{"instance_id": "ba8707e206f9", "generation_result": [{"code": "def _kazoo_connect(self, *args: Any) -> Tuple[Union[int, float], Union[int, float]]\n\t\n    start = time.time()\n    result = self._orig_connect(*args)\n    end = time.time()\n    wait_time = max(2, self.loop_wait - (end - start)) * 1000\n    return wait_time, result\n\n", "CodeBleu_score": 47.040086016807095}, {"code": "def _kazoo_connect(self, *args: Any) -> Tuple[Union[int, float], Union[int, float]]\n\t\n    start_time = time.time()\n    wait_time = self.loop_wait - (time.time() - start_time)\n    if wait_time < 2:\n        wait_time = 2\n    return wait_time, self._orig_conn_func(*args)\n\n", "CodeBleu_score": 46.150374844580966}, {"code": "def _kazoo_connect(self, *args: Any) -> Tuple[Union[int, float], Union[int, float]]\n\t\n    start = time.time()\n    result = self._original_connect(*args)\n    end = time.time()\n    return ((self.loop_wait - 2) * 1000) - ((end - start) * 1000), result\n\n", "CodeBleu_score": 47.183543688268756}]}
{"instance_id": "88e24a7c26a4", "generation_result": [{"code": "def reload_config(self, config: Union['Config', Dict[str, Any]]) -> None\n\t\n    if isinstance(config, dict):\n        config = Config(**config)\n\n    if config.retry_timeout != self._retry.deadline:\n        self._retry.deadline = config.retry_timeout\n\n    if config.ttl != self._session_timeout:\n        try:\n            self.set_session_timeout(config.ttl)\n        except (ConnectionClosedError, SessionExpiredError):\n            if config.loop_wait != self._handler.sleep_func.delay:\n                self._handler.sleep_func.delay = config.loop_wait\n                self._handler.sleep_func.reset()\n            raise\n\n    if config.loop_wait != self._handler.sleep_func.delay:\n        if isinstance(self._handler, SequentialThreadingHandler):\n            self._handler.sleep_func.delay = config.loop_wait\n            self._handler.sleep_func.reset()\n        else:\n            logging.warning('Loop wait time changed, but not supported by the current handler')\n\n", "CodeBleu_score": 31.733435358361707}, {"code": "def reload_config(self, config: Union['Config', Dict[str, Any]]) -> None\n\t\n\n    if isinstance(config, dict):\n        config = Config(config)\n    if config.retry_timeout is not None:\n        self._retry.deadline = config.retry_timeout\n    if config.loop_wait is not None:\n        self._loop_wait = config.loop_wait\n        if isinstance(self._handler, SequentialThreadingHandler):\n            self._handler.set_connect_timeout(self._loop_wait)\n    if config.ttl is not None:\n        try:\n            self.set_ttl(config.ttl)\n        except (ConnectionClosedError, SessionExpiredError):\n            if config.loop_wait != self._loop_wait:\n                self.close()\n\n", "CodeBleu_score": 37.16234816726578}, {"code": "def reload_config(self, config: Union['Config', Dict[str, Any]]) -> None\n\t\n\n    if isinstance(config, dict):\n        config = Config(config)\n\n    if config.retry_timeout != self._retry.deadline:\n        self._retry.deadline = config.retry_timeout\n\n    if config.ttl != self._session_timeout:\n        try:\n            self.set_session_timeout(config.ttl)\n        except (ConnectionClosedError, SessionExpiredError):\n            if config.loop_wait != self._handler.sleep_func.delay:\n                self._handler.sleep_func.delay = config.loop_wait\n                self._handler.socket.settimeout(config.loop_wait + config.retry_timeout)\n\n", "CodeBleu_score": 30.923116081149033}]}
{"instance_id": "2af7d7b3c887", "generation_result": [{"code": "def _postgresql_cluster_loader(self, path: str) -> Cluster\n\t\n\n    # Load initialization state\n    initialization_state_path = path + \"/initialize\"\n    initialization_state_data, _ = self.get(initialization_state_path)\n    if initialization_state_data is None:\n        raise Exception(\"Failed to load initialization state\")\n    initialization_state = InitializationState(initialization_state_data)\n\n    # Load configuration\n    configuration_path = path + \"/config\"\n    configuration_data, _ = self.get(configuration_path)\n    if configuration_data is None:\n        raise Exception(\"Failed to load configuration\")\n    configuration = Configuration(configuration_data)\n\n    # Load timeline history\n    timeline_history_path = path + \"/history\"\n    timeline_history_data, _ = self.get(timeline_history_path)\n    if timeline_history_data is None:\n        raise Exception(\"Failed to load timeline history\")\n    timeline_history = TimelineHistory(timeline_history_data)\n\n    # Load synchronization state\n    synchronization_state_path = path + \"/sync\"\n    synchronization_state_data, _ = self.get(synchronization_state_path)\n    if synchronization_state_data is None:\n        raise Exception(\"Failed to load synchronization state\")\n    synchronization_state = SynchronizationState(synchronization_state_data)\n\n    # Load members\n    members_path = path + \"/members\"\n    members_data, _ = self.get(members_path)\n    if members_data is None:\n        raise Exception(\"Failed to load members\")\n    members = Members(members_data)\n\n    # Load leader information\n    leader_path = path + \"/leader\"\n    leader_data, _ = self.get(leader_path)\n    if leader_data is None:\n        raise Exception(\"Failed to load leader information\")\n    leader = Leader(leader_data)\n\n    # Load cluster status\n    cluster_status_path = path + \"/status\"\n    cluster_status_data, _ = self.get(cluster_status_path)\n    if cluster_status_data is None:\n        raise Exception(\"Failed to load cluster status\")\n    cluster_status = ClusterStatus(cluster_status_data)\n\n    # Load failover state\n    failover_state_path = path + \"/failover\"\n    failover_state_data, _ = self.get(failover_state_path)\n    if failover_state_data is None:\n        raise Exception(\"Failed to load failover state\")\n    failover_state", "CodeBleu_score": 19.88260672596186}, {"code": "def _postgresql_cluster_loader(self, path: str) -> Cluster\n\t\n    cluster = Cluster(path)\n    cluster.load()\n    return cluster\n\n", "CodeBleu_score": 1.2544828921098223}, {"code": "def _postgresql_cluster_loader(self, path: str) -> Cluster\n\t\n\n    # Get the list of cluster components.\n    components = self.get_children(path)\n\n    # Initialize the cluster.\n    cluster = Cluster()\n\n    # Process the cluster components.\n    for component in components:\n        component_path = f\"{path}/{component}\"\n\n        # Get the component data.\n        data, _ = self.get(component_path)\n\n        # Process the component data.\n        if component == \"init\":\n            cluster.init = json.loads(data)\n        elif component == \"config\":\n            cluster.config = json.loads(data)\n        elif component == \"history\":\n            cluster.history = json.loads(data)\n        elif component == \"sync\":\n            cluster.sync = json.loads(data)\n        elif component == \"members\":\n            cluster.members = json.loads(data)\n        elif component == \"leader\":\n            cluster.leader = json.loads(data)\n        elif component == \"status\":\n            cluster.status = json.loads(data)\n        elif component == \"failover\":\n            cluster.failover = json.loads(data)\n        elif component == \"failsafe\":\n            cluster.failsafe = json.loads(data)\n\n    return cluster\n\n", "CodeBleu_score": 13.13548581570567}]}
{"instance_id": "43e1bc044d8e", "generation_result": [{"code": "def attempt_to_acquire_leader(self) -> bool\n\t\n    try:\n        self._retry(self._client.create, self._path, acl=self._acl, ephemeral=True)\n        return True\n    except NodeExistsError:\n        self.logger.info(\"Failed to acquire leader lock: %s\", self._path)\n        return False\n    except (ConnectionClosedError, RetryFailedError) as e:\n        raise e\n    except Exception as e:\n        self.logger.error(\"Failed to acquire leader lock: %s\", self._path)\n        raise e\n\n", "CodeBleu_score": 53.28186087206666}, {"code": "def attempt_to_acquire_leader(self) -> bool\n\t\n    try:\n        self.retry(self._inner_attempt_to_acquire_leader)\n        return True\n    except NoNodeError:\n        self.log.warning(\"Leader lock path does not exist\")\n        return False\n    except NodeExistsError:\n        self.log.info(\"Leader lock already held\")\n        return False\n    except RetryFailedError:\n        self.log.error(\"Failed to acquire leader lock\")\n        raise\n\n", "CodeBleu_score": 30.1832133271688}, {"code": "def attempt_to_acquire_leader(self) -> bool\n\t\n    try:\n        self.create(self.leader_path, value=self.id, ephemeral=True, makepath=True)\n        return True\n    except (ConnectionClosedError, RetryFailedError) as e:\n        raise e\n    except Exception as e:\n        if not isinstance(e, NodeExistsError):\n            self.logger.exception(f\"Exception while attempting to acquire leader lock: {e}\")\n        return False\n\n", "CodeBleu_score": 46.33415158849809}]}
{"instance_id": "93d126ab8a22", "generation_result": [{"code": "def _update_leader(self, leader: Leader) -> bool\n\t\n    if self.client_id != leader.session_id:\n        # The current client ID does not match the leader's session.\n        # Delete the leader node and retry.\n        try:\n            self.delete(leader.path)\n        except (NoNodeError, ConnectionClosedError, RetryFailedError):\n            # If the leader node does not exist, we can safely ignore these errors.\n            # If the connection is lost, we can safely ignore these errors.\n            # If the retry failed, we can safely ignore these errors.\n            pass\n        else:\n            # Successfully deleted the leader node.\n            # Try to create a new leader node with the current client's name.\n            try:\n                self.create(leader.path, self.client_id.encode('utf-8'), ephemeral=True, makepath=True)\n            except (ConnectionClosedError, RetryFailedError):\n                # If the connection is lost, we can safely ignore these errors.\n                # If the retry failed, we can safely ignore these errors.\n                pass\n            else:\n                # Successfully created a new leader node.\n                return True\n\n    # If we reach this point, we either successfully updated the leader node or there was no mismatch in client IDs.\n    return False\n\n", "CodeBleu_score": 25.651386767308292}, {"code": "def _update_leader(self, leader: Leader) -> bool\n\t\n    try:\n        # If the current client is not the leader, delete the leader ZNode.\n        if leader.client_id != self.client_id:\n            try:\n                self.delete(leader.path)\n            except (NoNodeError, ConnectionClosedError, RetryFailedError) as e:\n                logging.warning(\"Could not delete leader node %s: %s\", leader.path, e)\n\n        # Create a new leader ZNode with the current client's name encoded in UTF-8.\n        self.create(leader.path, self.client_id.encode(\"utf-8\"), ephemeral=True, makepath=True)\n        return True\n    except (NoNodeError, ConnectionClosedError, RetryFailedError) as e:\n        logging.warning(\"Could not create leader node %s: %s\", leader.path, e)\n        return False\n\n", "CodeBleu_score": 37.96053956464899}, {"code": "def _update_leader(self, leader: Leader) -> bool\n\t\n    if self.client_id == leader.session:\n        self.logger.debug(\"Leader is still %s\", leader.id)\n        return True\n    else:\n        self.logger.warning(\"Leader %s is no longer valid, attempting to delete\", leader.id)\n        try:\n            self.delete(leader.path)\n        except (NoNodeError, ConnectionClosedError, RetryFailedError) as e:\n            self.logger.warning(\"Failed to delete leader %s: %s\", leader.id, e)\n            return False\n    try:\n        self.create(leader.path, bytes(self.client_id, \"utf-8\"), acl=[make_acl(ACL.OPEN_ACL_UNSAFE, \"world:anyone:rwcda\")])\n        self.logger.info(\"Created new leader %s\", leader.id)\n        return True\n    except (NodeExistsError, ConnectionClosedError, RetryFailedError) as e:\n        self.logger.warning(\"Failed to create leader %s: %s\", leader.id, e)\n        return False\n\n", "CodeBleu_score": 41.0596577305064}]}
{"instance_id": "f68719982812", "generation_result": [{"code": "def poll(self) -> bool\n\t\n    if self._last_poll is None:\n        self._last_poll = time.time()\n\n    if time.time() - self._last_poll < self._poll_interval:\n        return False\n\n    self._last_poll = time.time()\n\n    try:\n        data = self._get_exhibitors()\n        if data is None:\n            return False\n\n        new_exhibitors = self._parse_exhibitors(data)\n        if new_exhibitors is None:\n            return False\n\n        if new_exhibitors != self._exhibitors:\n            self._exhibitors = new_exhibitors\n            self._update_zookeeper_connection_string()\n            logging.info(\"Exhibitors changed to: %s\", self._exhibitors)\n            return True\n\n        return False\n    except Exception as e:\n        logging.error(\"Failed to poll exhibitors: %s\", e)\n        return False\n\n", "CodeBleu_score": 30.83652214266719}, {"code": "def poll(self) -> bool\n\t\n\n    # If we have no exhibitors, we can't do anything.\n    if len(self.exhibitors) == 0:\n        return False\n\n    # If we have no ZooKeeper connection string, we can't do anything.\n    if self.zk_conn_str is None:\n        return False\n\n    # If we have no ZooKeeper client, we can't do anything.\n    if self.zk_client is None:\n        return False\n\n    # If we have no ZooKeeper listener, we can't do anything.\n    if self.zk_listener is None:\n        return False\n\n    # If we have no ZooKeeper path, we can't do anything.\n    if self.zk_path is None:\n        return False\n\n    # If we have no ZooKeeper state, we can't do anything.\n    if self.zk_state is None:\n        return False\n\n    # If we have no ZooKeeper watcher, we can't do anything.\n    if self.zk_watcher is None:\n        return False\n\n    # If we have no ZooKeeper watchers, we can't do anything.\n    if self.zk_watchers is None:\n        return False\n\n    # If we have no ZooKeeper znode, we can't do anything.\n    if self.zk_znode is None:\n        return False\n\n    # If we have no ZooKeeper znodes, we can't do anything.\n    if self.zk_znodes is None:\n        return False\n\n    # If we have no ZooKeeper znodes, we can't do anything.\n    if self.zk_znodes is None:\n        return False\n\n    # If we have no ZooKeeper znodes, we can't do anything.\n    if self.zk_znodes is None:\n        return False\n\n    # If we have no ZooKeeper znodes, we can't do anything.\n    if self.zk_znodes is None:\n        return False\n\n    # If we have no ZooKeeper znodes, we can't do anything.\n    if self.zk_znodes is None:\n        return False\n\n    # If we have no ZooKeeper znodes, we can't do anything.\n    if self.zk_znodes is None:\n        return False\n\n    # If we have no ZooKeeper znodes, we can't do anything.\n    if self.zk_znodes is None:\n        return False\n\n    # If we have no Zoo", "CodeBleu_score": 17.857063766126956}, {"code": "def poll(self) -> bool\n\t\n    if self.last_poll + self.poll_interval < time.time():\n        self.last_poll = time.time()\n        # Get the current status of the exhibitors\n        status = self.get_exhibitor_status()\n        # If we got valid data, update the connection string if it has changed\n        if status:\n            if self.exhibitor_status != status:\n                self.exhibitor_status = status\n                self.update_zk_connection_string()\n                logging.info(f\"Exhibitor status updated to {self.exhibitor_status}\")\n                return True\n        else:\n            logging.warning(f\"Exhibitor status is invalid: {status}\")\n    return False\n\n", "CodeBleu_score": 21.708902226996916}]}
{"instance_id": "022ed3721913", "generation_result": [{"code": "def _load_cluster(\n            self, path: str, loader: Callable[[str], Union[Cluster, Dict[int, Cluster]]]\n    ) -> Union[Cluster, Dict[int, Cluster]]\n\t\n    # If the ensemble provider is available, we need to update the client's hosts with the Zookeeper hosts\n    if self.ensemble_provider is not None:\n        self.ensemble_provider.update_client_hosts(self.client)\n\n    # Load the cluster using the parent class's method\n    cluster = super()._load_cluster(path, loader)\n\n    # If the ensemble provider is available, we need to update the client's hosts with the Zookeeper hosts\n    if self.ensemble_provider is not None:\n        self.ensemble_provider.update_client_hosts(self.client)\n\n    return cluster\n\n", "CodeBleu_score": 55.905252936387086}, {"code": "def _load_cluster(\n            self, path: str, loader: Callable[[str], Union[Cluster, Dict[int, Cluster]]]\n    ) -> Union[Cluster, Dict[int, Cluster]]\n\t\n    if self.ensemble_provider is not None:\n        self.ensemble_provider.update_hosts(self.zookeeper_hosts)\n\n    return super()._load_cluster(path, loader)\n\n", "CodeBleu_score": 61.69390277998696}, {"code": "def _load_cluster(\n            self, path: str, loader: Callable[[str], Union[Cluster, Dict[int, Cluster]]]\n    ) -> Union[Cluster, Dict[int, Cluster]]\n\t\n    if self.ensemble_provider is not None:\n        self.ensemble_provider.update_client(self)\n    return super(ZookeeperClient, self)._load_cluster(path, loader)\n\n", "CodeBleu_score": 63.57288381732465}]}
{"instance_id": "c7d2e1db0cda", "generation_result": [{"code": "public ZookeeperListener(NodeCache nodeCache, NodeCacheListener nodeCacheListener){\n\t\tthis.nodeCache = nodeCache;\n\tthis.nodeCacheListener = nodeCacheListener;\n}", "CodeBleu_score": 78.53464624293271}, {"code": "public ZookeeperListener(NodeCache nodeCache, NodeCacheListener nodeCacheListener){\n\t\tthis.nodeCache = nodeCache;\n\tthis.nodeCacheListener = nodeCacheListener;\n}", "CodeBleu_score": 78.53464624293271}, {"code": "public ZookeeperListener(NodeCache nodeCache, NodeCacheListener nodeCacheListener){\n\t\tthis.nodeCache = nodeCache;\n\tthis.nodeCacheListener = nodeCacheListener;\n\tnodeCache.getListenable().addListener(nodeCacheListener);\n}", "CodeBleu_score": 61.10275242826573}]}
{"instance_id": "c779f567d3e2", "generation_result": [{"code": "public void destroy(){\n\tif (zookeeperListener == null) {\nreturn;\n}\n\nString group = configProcessor.getGroup();\nString dataId = configProcessor.getDataId();\n\nlogger.info(\"Unsubscribe config, group=\" + group + \", dataId=\" + dataId);\ntry {\nzookeeperOperation.unsubscribeConfig(group, dataId, zookeeperListener);\n} catch (Exception e) {\nlogger.error(\"Unsubscribe config failed, group=\" + group + \", dataId=\" + dataId, e);\n}\n}", "CodeBleu_score": 56.31620139500123}, {"code": "public void destroy(){\n\t//    if (zookeeperListener == null) {\n//        return;\n//    }\n//\n//    String group = configType.getGroup();\n//    String dataId = configType.getDataId();\n//\n//    LOGGER.info(\"Unsubscribe config, group={}, dataId={}\", group, dataId);\n//    try {\n//        zookeeperOperation.unsubscribeConfig(group, dataId, zookeeperListener);\n//    } catch (Exception e) {\n//        LOGGER.error(\"Unsubscribe config failed, group={}, dataId={}\", group, dataId, e);\n//    }\n}", "CodeBleu_score": 1.6858207481113618}, {"code": "public void destroy(){\n\tif (zookeeperListener != null) {\n    String group = getGroup();\n    String dataId = getDataId();\n    if (StringUtils.isEmpty(group)) {\n        group = DEFAULT_GROUP;\n    }\n\n    if (StringUtils.isEmpty(dataId)) {\n        dataId = DEFAULT_DATA_ID;\n    }\n\n    LOGGER.info(\"Unsubscribe config, group={}, dataId={}, configType={}, configServerAddressList={}\", group, dataId, configType, configServerAddressList);\n    try {\n        zookeeperListener.unsubscribe(group, dataId, configType, configServerAddressList, new ZookeeperSubscribeCallback() {\n            @Override\n            public void callback(String config) {\n                LOGGER.info(\"Unsubscribe config successfully, group={}, dataId={}, configType={}, configServerAddressList={}, config={}\", group, dataId, configType, configServerAddressList, config);\n            }\n        });\n    } catch (Exception e) {\n        LOGGER.error(\"Unsubscribe config failed, group={}, dataId={}, configType={}, configServerAddressList={}\", group, dataId, configType, configServerAddressList, e);\n    }\n}\n}", "CodeBleu_score": 55.769249272601726}]}
{"instance_id": "7f0ce4db487b", "generation_result": [{"code": "public Map<String, String> getServerMetadata(Server server){\n\tif (server instanceof ZookeeperServer) {\nZookeeperServer zookeeperServer = (ZookeeperServer) server;\nZookeeperRegistration zookeeperRegistration = zookeeperServer.getInstance().getPayload();\nreturn zookeeperRegistration.getMetadata();\n} else {\nreturn Collections.emptyMap();\n}\n}", "CodeBleu_score": 61.314223075963795}, {"code": "public Map<String, String> getServerMetadata(Server server){\n\t//    if (server instanceof ZookeeperServer) {\n//        ZookeeperServer zookeeperServer = (ZookeeperServer) server;\n//        ZookeeperRegistration zookeeperRegistration = zookeeperServer.getInstance();\n//        return zookeeperRegistration.getMetadata();\n//    } else {\n//        return Collections.emptyMap();\n//    }\n    return Collections.emptyMap();\n}", "CodeBleu_score": 10.293171165287646}, {"code": "public Map<String, String> getServerMetadata(Server server){\n\t//    if (server instanceof ZookeeperServer) {\n//        ZookeeperServer zookeeperServer = (ZookeeperServer) server;\n//        ZookeeperRegistration zookeeperRegistration = zookeeperServer.getInstance().getPayload();\n//        return zookeeperRegistration.getMetadata();\n//    } else {\n//        return Collections.emptyMap();\n//    }\n    return Collections.emptyMap();\n}", "CodeBleu_score": 10.293171165287646}]}
{"instance_id": "7365d194b7ee", "generation_result": [{"code": "public ZookeeperListener subscribeConfig(String group, String serviceId, ZookeeperSubscribeCallback zookeeperSubscribeCallback) throws Exception{\n\t\tString path = group + \"/\" + serviceId;\n\tfinal String path = group + \"/\" + serviceId;\n\tfinal NodeCache nodeCache = new NodeCache(client, path);\n\tfinal NodeCacheListener listener = new NodeCacheListener() {\n\t\t@Override\n\t\tpublic void nodeChanged() throws Exception {\n\t\t\tChildData currentData = nodeCache.getCurrentData();\n\t\t\tif (currentData != null) {\n\t\t\t\tString data = new String(currentData.getData());\n\t\t\t\tzookeeperSubscribeCallback.callback(data);\n\t\t\t}\n\t\t}\n\t};\n\tnodeCache.getListenable().addListener(listener);\n\tnodeCache.start();\n\tZookeeperListener zookeeperListener = new ZookeeperListener();\n\tzookeeperListener.setNodeCache(nodeCache);\n\tzookeeperListener.setZookeeperSubscribeCallback(zookeeperSubscribeCallback);\n\tlisteners.add(zookeeperListener);\n\treturn zookeeperListener;\n}", "CodeBleu_score": 54.726421286655444}, {"code": "public ZookeeperListener subscribeConfig(String group, String serviceId, ZookeeperSubscribeCallback zookeeperSubscribeCallback) throws Exception{\n\t\tString path = ZookeeperUtils.getConfigPath(group, serviceId);\n\tNodeCache nodeCache = new NodeCache(curatorFramework, path);\n\tnodeCache.getListenable().addListener(new NodeCacheListener() {\n\t\t@Override\n\t\tpublic void nodeChanged() throws Exception {\n\t\t\tChildData data = nodeCache.getCurrentData();\n\t\t\tif (data != null) {\n\t\t\t\tString config = new String(data.getData(), StandardCharsets.UTF_8);\n\t\t\t\tzookeeperSubscribeCallback.callback(config);\n\t\t\t}\n\t\t}\n\t});\n\tnodeCache.start();\n\tZookeeperListener zookeeperListener = new ZookeeperListener(nodeCache, zookeeperSubscribeCallback);\n\tzookeeperListener.start();\n\treturn zookeeperListener;\n}", "CodeBleu_score": 62.34982784802152}, {"code": "public ZookeeperListener subscribeConfig(String group, String serviceId, ZookeeperSubscribeCallback zookeeperSubscribeCallback) throws Exception{\n\t\tString path = String.format(\"/config/%s/%s\", group, serviceId);\n\tNodeCache nodeCache = new NodeCache(curatorFramework, path);\n\tnodeCache.start();\n\tZookeeperListener zookeeperListener = new ZookeeperListener(nodeCache, zookeeperSubscribeCallback);\n\tnodeCache.getListenable().addListener(zookeeperListener);\n\treturn zookeeperListener;\n}", "CodeBleu_score": 41.419556719683676}]}
{"instance_id": "6f492670162b", "generation_result": [{"code": "public ServerList<?> ribbonServerList(IClientConfig config, ServiceDiscovery<ZookeeperInstance> serviceDiscovery){\n\t\tZookeeperServerListDecorator serverList = new ZookeeperServerListDecorator(config, serviceDiscovery);\n\tserverList.setLoadBalanceListenerExecutor(loadBalanceListenerExecutor());\n\tserverList.setServiceId(config.getClientName());\n\treturn serverList;\n}", "CodeBleu_score": 66.21288005265119}, {"code": "public ServerList<?> ribbonServerList(IClientConfig config, ServiceDiscovery<ZookeeperInstance> serviceDiscovery){\n\t\treturn new ZookeeperServerListDecorator(config, serviceDiscovery, LoadBalanceListenerExecutor.getInstance(), config.getClientName());\n}", "CodeBleu_score": 24.331364810847177}, {"code": "public ServerList<?> ribbonServerList(IClientConfig config, ServiceDiscovery<ZookeeperInstance> serviceDiscovery){\n\t\tZookeeperServerListDecorator serverList = new ZookeeperServerListDecorator(serviceDiscovery);\n\tserverList.initWithNiwsConfig(config);\n\tserverList.setLoadBalanceListenerExecutor(loadBalanceListenerExecutor());\n\tserverList.setServiceId(config.getClientName());\n\treturn serverList;\n}", "CodeBleu_score": 75.81514127389798}]}
{"instance_id": "17c01a5f8ef8", "generation_result": [{"code": "public void register(ZookeeperRegistration registration){\n\t\ttry {\n\t\tRegisterListenerExecutor listenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n\t\tlistenerExecutor.onRegister(registration);\n\t} catch (BeansException e) {\n\t\t// ignore\n\t}\n\n\tserviceRegistry.register(registration);\n}", "CodeBleu_score": 77.08725616141437}, {"code": "public void register(ZookeeperRegistration registration){\n\t\tConfigurableApplicationContext context = getContext();\n\n\tif (context != null) {\n\t\ttry {\n\t\t\tRegisterListenerExecutor listenerExecutor = context.getBean(RegisterListenerExecutor.class);\n\t\t\tlistenerExecutor.onRegister(registration);\n\t\t} catch (BeansException e) {\n\t\t\t// ignore\n\t\t}\n\t}\n\n\tZookeeperServiceRegistry serviceRegistry = getServiceRegistry();\n\tserviceRegistry.register(registration);\n}", "CodeBleu_score": 66.05175948046723}, {"code": "public void register(ZookeeperRegistration registration){\n\t\tConfigurableApplicationContext context = getApplicationContext();\n\n\ttry {\n\t\tif (context != null) {\n\t\t\tRegisterListenerExecutor registerListenerExecutor = context.getBean(RegisterListenerExecutor.class);\n\t\t\tregisterListenerExecutor.onRegister(registration);\n\t\t}\n\t} catch (BeansException e) {\n\t\t// Ignore\n\t}\n\n\tserviceRegistry.register(registration);\n}", "CodeBleu_score": 71.32290969195395}]}
{"instance_id": "99392dfa2335", "generation_result": [{"code": "public void deregister(ZookeeperRegistration registration){\n\t\ttry {\n\t\tif (applicationContext instanceof ConfigurableApplicationContext) {\n\t\t\tRegisterListenerExecutor registerListenerExecutor = ((ConfigurableApplicationContext) applicationContext).getBean(RegisterListenerExecutor.class);\n\t\t\tregisterListenerExecutor.onDeregister(registration);\n\t\t}\n\t} catch (BeansException e) {\n\t\t// ignore\n\t}\n\n\tserviceRegistry.unregister(registration);\n}", "CodeBleu_score": 64.74724616777439}, {"code": "public void deregister(ZookeeperRegistration registration){\n\t\ttry {\n\t\tRegisterListenerExecutor listenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n\t\tlistenerExecutor.onDeregister(registration);\n\t} catch (BeansException e) {\n\t\t// Ignore\n\t}\n\n\tserviceRegistry.unregister(registration);\n}", "CodeBleu_score": 73.46048169582929}, {"code": "public void deregister(ZookeeperRegistration registration){\n\t\ttry {\n\t\tRegisterListenerExecutor listenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n\t\tlistenerExecutor.onDeregister(registration);\n\t} catch (BeansException e) {\n\t\t// ignore\n\t}\n\n\tserviceRegistry.unregister(registration);\n}", "CodeBleu_score": 73.46048169582929}]}
{"instance_id": "02a835946e90", "generation_result": [{"code": "public void close(){\n\t\ttry {\n\t\t// \u5148\u4eceSpring\u5bb9\u5668\u4e2d\u83b7\u53d6RegisterListenerExecutor\uff0c\u518d\u8c03\u7528\u5176onClose()\u65b9\u6cd5\n\t\tRegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n\t\tregisterListenerExecutor.onClose();\n\t} catch (BeansException e) {\n\t\t// ignore\n\t} finally {\n\t\t// \u6700\u540e\u8c03\u7528serviceRegistry\u7684close()\u65b9\u6cd5\uff0c\u8fdb\u884c\u6e05\u7406\n\t\tserviceRegistry.close();\n\t}\n}", "CodeBleu_score": 82.84912112059787}, {"code": "public void close(){\n\t\ttry {\n\t\tRegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n\t\tregisterListenerExecutor.onClose();\n\t} catch (BeansException e) {\n\t\t// ignore\n\t}\n\n\tserviceRegistry.close();\n}", "CodeBleu_score": 95.6448461355359}, {"code": "public void close(){\n\t\ttry {\n\t\tRegisterListenerExecutor listenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n\t\tlistenerExecutor.onClose();\n\t} catch (BeansException e) {\n\t\t// Ignore\n\t} finally {\n\t\tserviceRegistry.close();\n\t}\n}", "CodeBleu_score": 77.48008479987772}]}
{"instance_id": "64cf817f5945", "generation_result": [{"code": "private ZookeeperListener subscribeConfig(boolean globalConfig){\n\t\tString group = configAdapter.getGroup();\n\tString dataId = configAdapter.getDataId();\n\n\tif (globalConfig) {\n\t\tgroup = configAdapter.getGlobalGroup();\n\t\tdataId = configAdapter.getGlobalDataId();\n\t}\n\n\tLOGGER.info(\"Subscribe config, group={}, dataId={}\", group, dataId);\n\n\tZookeeperSubscribeCallback callback = new ZookeeperSubscribeCallback() {\n\t\t@Override\n\t\tpublic void handleDataChange(String config) throws Exception {\n\t\t\tLOGGER.info(\"Handle config change, config={}\", config);\n\n\t\t\tconfigAdapter.publishConfig(config, ConfigType.LOCAL);\n\t\t}\n\n\t\t@Override\n\t\tpublic void handleDataDeleted() throws Exception {\n\t\t\tLOGGER.info(\"Handle config deleted\");\n\n\t\t\tconfigAdapter.publishConfig(null, ConfigType.LOCAL);\n\t\t}\n\t};\n\n\ttry {\n\t\tZookeeperListener zookeeperListener = zookeeperOperation.subscribeConfig(group, dataId, callback);\n\t\tLOGGER.info(\"Subscribe config success\");\n\n\t\treturn zookeeperListener;\n\t} catch (Exception e) {\n\t\tLOGGER.error(\"Subscribe config failed\", e);\n\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 37.20153823206906}, {"code": "private ZookeeperListener subscribeConfig(boolean globalConfig){\n\t\tString group = globalConfig ? \"global\" : configEntity.getGroup();\n\tString dataId = globalConfig ? \"config.properties\" : configEntity.getDataId();\n\n\tlogger.info(\"Subscribe config, group=\" + group + \", dataId=\" + dataId);\n\n\ttry {\n\t\tZookeeperSubscribeCallback callback = new ZookeeperSubscribeCallback() {\n\t\t\t@Override\n\t\t\tpublic void handleDataChange(String config) throws Exception {\n\t\t\t\tlogger.info(\"Config changed, group=\" + group + \", dataId=\" + dataId + \", config=\" + config);\n\t\t\t\tconfigAdapter.publishConfig(configEntity, config);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void handleDataDeleted(String config) throws Exception {\n\t\t\t\tlogger.info(\"Config deleted, group=\" + group + \", dataId=\" + dataId + \", config=\" + config);\n\t\t\t\tconfigAdapter.publishConfig(configEntity, config);\n\t\t\t}\n\t\t};\n\n\t\tZookeeperListener zookeeperListener = zookeeperOperation.subscribeDataChanges(group, dataId, callback);\n\t\tlogger.info(\"Subscribe config success, group=\" + group + \", dataId=\" + dataId);\n\n\t\treturn zookeeperListener;\n\t} catch (Exception e) {\n\t\tlogger.error(\"Subscribe config fail, group=\" + group + \", dataId=\" + dataId, e);\n\t}\n\n\treturn null;\n}", "CodeBleu_score": 39.5037756966567}, {"code": "private ZookeeperListener subscribeConfig(boolean globalConfig){\n\t\tString group = null;\n\tString dataId = null;\n\tif (globalConfig) {\n\t\tgroup = configAdapter.getGlobalConfigGroup();\n\t\tdataId = configAdapter.getGlobalConfigDataId();\n\t} else {\n\t\tgroup = configAdapter.getConfigGroup();\n\t\tdataId = configAdapter.getConfigDataId();\n\t}\n\n\tif (StringUtils.isEmpty(group) || StringUtils.isEmpty(dataId)) {\n\t\tlogger.warn(\"The group or dataId is empty, subscribe failed\");\n\n\t\treturn null;\n\t}\n\n\tlogger.info(\"Subscribe config, group={}, dataId={}\", group, dataId);\n\n\ttry {\n\t\tZookeeperSubscribeCallback callback = new ZookeeperSubscribeCallback() {\n\t\t\t@Override\n\t\t\tpublic void handleDataChange(String config) throws Exception {\n\t\t\t\tconfigAdapter.setConfig(config);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void handleDataDeleted() throws Exception {\n\t\t\t\tconfigAdapter.setConfig(\"\");\n\t\t\t}\n\t\t};\n\n\t\tZookeeperListener zookeeperListener = zookeeperOperation.subscribeConfig(group, dataId, callback);\n\t\treturn zookeeperListener;\n\t} catch (Exception e) {\n\t\tlogger.error(\"Subscribe config failed, group={}, dataId={}, cause={}\", group, dataId, e.getMessage(), e);\n\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 37.803342603612734}]}
{"instance_id": "be408acc71f6", "generation_result": [{"code": "public CuratorFramework curatorFramework(){\n\t//    String connectionString = environment.getProperty(ZookeeperConstant.ZOOKEEPER_CONNECTION_STRING);\n//    if (StringUtils.isEmpty(connectionString)) {\n//        throw new DiscoveryException(\"Zookeeper connection string is null or empty\");\n//    }\n//\n//    int retryCount = environment.getProperty(ZookeeperConstant.ZOOKEEPER_RETRY_COUNT, Integer.class, ZookeeperConstant.ZOOKEEPER_RETRY_COUNT_DEFAULT);\n//    int sleepTime = environment.getProperty(ZookeeperConstant.ZOOKEEPER_SLEEP_TIME, Integer.class, ZookeeperConstant.ZOOKEEPER_SLEEP_TIME_DEFAULT);\n//\n//    CuratorFramework curatorFramework = CuratorFrameworkFactory.builder()\n//            .connectString(connectionString)\n//            .retryPolicy(new ExponentialBackoffRetry(sleepTime, retryCount))\n//            .build();\n//    curatorFramework.start();\n//\n//    return curatorFramework;\n    return null;\n}", "CodeBleu_score": 1.106610873680301}, {"code": "public CuratorFramework curatorFramework(){\n\t//    String connectString = environment.getProperty(ZookeeperConstant.ZOOKEEPER_CONNECT_STRING);\n//    if (StringUtils.isEmpty(connectString)) {\n//        throw new DiscoveryException(\"Zookeeper connect string is empty\");\n//    }\n//\n//    int baseSleepTime = Integer.parseInt(environment.getProperty(ZookeeperConstant.ZOOKEEPER_BASE_SLEEP_TIME));\n//    int maxRetries = Integer.parseInt(environment.getProperty(ZookeeperConstant.ZOOKEEPER_MAX_RETRIES));\n//    CuratorFramework curatorFramework = CuratorFrameworkFactory.builder().connectString(connectString)\n//            .retryPolicy(new ExponentialBackoffRetry(baseSleepTime, maxRetries)).build();\n//    curatorFramework.start();\n//\n//    return curatorFramework;\n}", "CodeBleu_score": 1.0627241599234007}, {"code": "public CuratorFramework curatorFramework(){\n\t//    String connectString = environment.getProperty(ZookeeperConstant.ZOOKEEPER_CONNECT_STRING);\n//    if (StringUtils.isEmpty(connectString)) {\n//        throw new DiscoveryException(\"Zookeeper connect string is empty\");\n//    }\n//\n//    int baseSleepTime = Integer.parseInt(environment.getProperty(ZookeeperConstant.ZOOKEEPER_BASE_SLEEP_TIME, \"1000\"));\n//    int maxRetries = Integer.parseInt(environment.getProperty(ZookeeperConstant.ZOOKEEPER_MAX_RETRIES, \"3\"));\n//\n//    CuratorFramework curatorFramework = CuratorFrameworkFactory.builder()\n//            .connectString(connectString)\n//            .retryPolicy(new ExponentialBackoffRetry(baseSleepTime, maxRetries))\n//            .build();\n//\n//    curatorFramework.start();\n//\n//    return curatorFramework;\n    return null;\n}", "CodeBleu_score": 1.106610873680301}]}
{"instance_id": "3628d7b6f0a5", "generation_result": [{"code": "protected static class GatewayRouteZookeeperConfiguration{\n\t@Bean\n@ConditionalOnProperty(name = \"spring.cloud.gateway.discovery.locator.enabled\", matchIfMissing = true)\n@ConditionalOnMissingBean\npublic static GatewayStrategyRouteZookeeperProcessor gatewayStrategyRouteZookeeperProcessor(ConfigurableEnvironment environment, @Autowired(required = false) ConsulProcessor consulProcessor, @Autowired(required = false) EtcdProcessor etcdProcessor, @Autowired(required = false) ApolloProcessor apolloProcessor, @Autowired(required = false) ZookeeperProcessor zookeeperProcessor, @Autowired(required = false) RedisProcessor redisProcessor, @Autowired(required = false) NacosProcessor nacosProcessor) {\nreturn new GatewayStrategyRouteZookeeperProcessor(environment, consulProcessor, etcdProcessor, apolloProcessor, zookeeperProcessor, redisProcessor, nacosProcessor);\n}\n}", "CodeBleu_score": 19.49402956115467}, {"code": "protected static class GatewayRouteZookeeperConfiguration{\n\tprivate static final Logger LOG = LoggerFactory.getLogger(GatewayRouteZookeeperConfiguration.class);\n\n@Bean\n@ConditionalOnProperty(value = \"spring.cloud.gateway.discovery.locator.enabled\", matchIfMissing = true)\npublic GatewayStrategyRouteZookeeperProcessor gatewayStrategyRouteZookeeperProcessor() {\nGatewayStrategyRouteZookeeperProcessor gatewayStrategyRouteZookeeperProcessor = new GatewayStrategyRouteZookeeperProcessor();\n\nreturn gatewayStrategyRouteZookeeperProcessor;\n}\n}", "CodeBleu_score": 33.48709603474344}, {"code": "protected static class GatewayRouteZookeeperConfiguration{\n\tprivate static final Logger LOG = LoggerFactory.getLogger(GatewayRouteZookeeperConfiguration.class);\n\n@Bean\n@ConditionalOnProperty(value = \"spring.cloud.gateway.discovery.locator.enabled\", matchIfMissing = true)\n@ConditionalOnMissingBean\npublic GatewayStrategyRouteZookeeperProcessor gatewayStrategyRouteZookeeperProcessor() {\nreturn new GatewayStrategyRouteZookeeperProcessor();\n}\n}", "CodeBleu_score": 43.82121977571008}]}
{"instance_id": "68a13b54ad7c", "generation_result": [{"code": "public  CuratorFramework createCuratorFramework(){\n\t\tCuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder();\n\tbuilder.connectString(zookeeper_hosts);\n\tbuilder.sessionTimeoutMs(zookeeper_session_timeout);\n\tbuilder.namespace(zookeeper_namespace);\n\tbuilder.retryPolicy(new ExponentialBackoffRetry(1000, 3));\n\tCuratorFramework curatorFramework = builder.build();\n\tcuratorFramework.start();\n\treturn curatorFramework;\n}", "CodeBleu_score": 34.1251914729827}, {"code": "public  CuratorFramework createCuratorFramework(){\n\t\t// Create CuratorFramework instance\n\tCuratorFramework curatorFramework = CuratorFrameworkFactory.builder()\n\t\t\t.connectString(zookeeperConnectString)\n\t\t\t.sessionTimeoutMs(sessionTimeoutMs)\n\t\t\t.namespace(namespace)\n\t\t\t.retryPolicy(new ExponentialBackoffRetry(baseSleepTimeMs, maxRetries))\n\t\t\t.build();\n\t// Start CuratorFramework instance\n\tcuratorFramework.start();\n\treturn curatorFramework;\n}", "CodeBleu_score": 43.87106721537146}, {"code": "public  CuratorFramework createCuratorFramework(){\n\t\tCuratorFramework client = CuratorFrameworkFactory.builder()\n\t\t\t.connectString(zookeeperHost)\n\t\t\t.sessionTimeoutMs(sessionTimeoutMs)\n\t\t\t.namespace(namespace)\n\t\t\t.retryPolicy(new ExponentialBackoffRetry(baseSleepTimeMs, maxRetries))\n\t\t\t.build();\n\tclient.start();\n\treturn client;\n}", "CodeBleu_score": 37.49621474797692}]}
{"instance_id": "018a3d7b5f59", "generation_result": [{"code": "public void lock(String path) throws DistributedLockException{\n\t\tInterProcessLock lock = locksMap.get(path);\n\tif (lock == null) {\n\t\tInterProcessMutex mutex = new InterProcessMutex(curatorFrameworkClient, path);\n\t\ttry {\n\t\t\tmutex.acquire();\n\t\t\tlocksMap.put(path, mutex);\n\t\t} catch (Exception e) {\n\t\t\tthrow new DistributedLockException(\"Failed to acquire lock for path [\" + path + \"]\", e);\n\t\t}\n\t} else {\n\t\ttry {\n\t\t\tlock.acquire();\n\t\t} catch (Exception e) {\n\t\t\tthrow new DistributedLockException(\"Failed to acquire lock for path [\" + path + \"]\", e);\n\t\t}\n\t}\n}", "CodeBleu_score": 32.9618369000052}, {"code": "public void lock(String path) throws DistributedLockException{\n\t\tDistributedLock lock = locksMap.get(path);\n\tif (lock == null) {\n\t\tlock = new ZookeeperDistributedLock(path, curatorFrameworkClient);\n\t\tlocksMap.put(path, lock);\n\t}\n\tlock.lock();\n}", "CodeBleu_score": 16.573310957583576}, {"code": "public void lock(String path) throws DistributedLockException{\n\t\ttry {\n\t\tif (locksMap.containsKey(path)) {\n\t\t\tlocksMap.get(path).acquire();\n\t\t} else {\n\t\t\tInterProcessLock lock = new InterProcessMutex(curatorFrameworkClient, path);\n\t\t\tlock.acquire();\n\t\t\tlocksMap.put(path, lock);\n\t\t}\n\t} catch (Exception e) {\n\t\tthrow new DistributedLockException(\"Failed to acquire lock for path: \" + path, e);\n\t}\n}", "CodeBleu_score": 23.930550090955325}]}
{"instance_id": "2068af09c973", "generation_result": [{"code": "public static Map<Object, Object> genPropertiesMap(DtpProperties dtpProperties){\n\t\tMap<Object, Object> propertiesMap = Maps.newHashMap();\n\tCuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(dtpProperties.getZkServers(), new ExponentialBackoffRetry(1000, 3));\n\tcuratorFramework.start();\n\tString nodePath = dtpProperties.getZkNodePath();\n\tif (dtpProperties.getConfigFileType() == PROPERTIES) {\n\t\tpropertiesMap = genPropertiesTypeMap(dtpProperties, nodePath, curatorFramework);\n\t} else if (dtpProperties.getConfigFileType() == JSON) {\n\t\tString configKey = dtpProperties.getConfigKey();\n\t\tString configValue = getConfigValue(curatorFramework, nodePath, configKey);\n\t\tpropertiesMap = ConfigHandler.getConfigMap(configValue, JSON);\n\t}\n\tcuratorFramework.close();\n\treturn propertiesMap;\n}", "CodeBleu_score": 45.22353131515066}, {"code": "public static Map<Object, Object> genPropertiesMap(DtpProperties dtpProperties){\n\t\tMap<Object, Object> map = Maps.newHashMap();\n\tif (JSON.equals(dtpProperties.getConfigFileType())) {\n\t\tString config = new String(zkClient.getData().forPath(ZKPaths.makePath(dtpProperties.getConfigPath(), dtpProperties.getConfigKey())), StandardCharsets.UTF_8);\n\t\tConfigHandler configHandler = new ConfigHandler(JSON.getFormat());\n\t\tmap = configHandler.getMap(config);\n\t} else {\n\t\tmap = genPropertiesTypeMap(dtpProperties);\n\t}\n\treturn map;\n}", "CodeBleu_score": 40.015225554157915}, {"code": "public static Map<Object, Object> genPropertiesMap(DtpProperties dtpProperties){\n\t\tval propertiesMap = Maps.<Object, Object>newHashMap();\n\tval latch = new CountDownLatch(1);\n\tval zk = CuratorFrameworkFactory.newClient(dtpProperties.getZkServer(), new ExponentialBackoffRetry(1000, 3));\n\tzk.getConnectionStateListenable().addListener(new ConnectionStateListener() {\n\t\t@Override\n\t\tpublic void stateChanged(CuratorFramework client, ConnectionState state) {\n\t\t\tif (state == ConnectionState.CONNECTED) {\n\t\t\t\tlatch.countDown();\n\t\t\t}\n\t\t}\n\t});\n\tzk.start();\n\ttry {\n\t\tlatch.await();\n\t} catch (InterruptedException e) {\n\t\tlog.error(\"genPropertiesMap error\", e);\n\t}\n\tif (dtpProperties.getConfigFileType() == PROPERTIES) {\n\t\tgenPropertiesTypeMap(zk, dtpProperties.getConfigPath(), propertiesMap);\n\t} else {\n\t\tval configPath = ZKPaths.makePath(dtpProperties.getConfigPath(), dtpProperties.getConfigKey());\n\t\tval configValue = getConfigValue(zk, configPath);\n\t\tif (configValue != null) {\n\t\t\ttry {\n\t\t\t\tval configHandler = new ConfigHandler(JSON);\n\t\t\t\tconfigHandler.parse(configValue);\n\t\t\t\tpropertiesMap.putAll(configHandler.getProperties());\n\t\t\t} catch (Exception e) {\n\t\t\t\tlog.error(\"genPropertiesMap error\", e);\n\t\t\t}\n\t\t}\n\t}\n\tzk.close();\n\treturn propertiesMap;\n}", "CodeBleu_score": 38.737492556364025}]}
{"instance_id": "3d3c9020d299", "generation_result": [{"code": "public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application){\n\t\tDtpProperties dtpProperties = DtpProperties.getInstance();\n\tBinderHelper.bind(dtpProperties, environment);\n\tBinderHelper.bind(dtpProperties.getCoordinator(), environment);\n\tBinderHelper.bind(dtpProperties.getCoordinator().getCoordinatorNode(), environment);\n\tBinderHelper.bind(dtpProperties.getCoordinator().getCoordinatorNode().getCoordinator(), environment);\n\tBinderHelper.bind(dtpProperties.getCoordinator().getCoordinatorNode().getCoordinator().getCoordinatorNode(), environment);\n\tBinderHelper.bind(dtpProperties.getCoordinator().getCoordinatorNode().getCoordinator().getCoordinatorNode().getCoordinator(), environment);\n\tBinderHelper.bind(dtpProperties.getCoordinator().getCoordinatorNode().getCoordinator().getCoordinatorNode().getCoordinator().getCoordinatorNode(), environment);\n\tBinderHelper.bind(dtpProperties.getCoordinator().getCoordinatorNode().getCoordinator().getCoordinatorNode().getCoordinator().getCoordinatorNode().getCoordinator(), environment);\n\tBinderHelper.bind(dtpProperties.getCoordinator().getCoordinatorNode().getCoordinator().getCoordinatorNode().getCoordinator().getCoordinatorNode().getCoordinator().getCoordinatorNode(), environment);\n\tBinderHelper.bind(dtpProperties.getCoordinator().getCoordinatorNode().getCoordinator().getCoordinatorNode().getCoordinator().getCoordinatorNode().getCoordinator().getCoordinatorNode().getCoordinator(), environment);\n\tBinderHelper.bind(dtpProperties.getCoordinator().getCoordinatorNode().getCoordinator().getCoordinatorNode().getCoordinator().getCoordinatorNode().getCoordinator().getCoordinatorNode().getCoordinator().getCoordinatorNode(), environment);\n\tBinderHelper.bind(dtpProperties.getCoordinator().getCoordinatorNode().getCoordinator().getCoordinatorNode().getCoordinator().getCoordinatorNode().getCoordinator().getCoordinatorNode().getCoordinator().getCoordinatorNode().getCoordinator(), environment);\n\tBinderHelper.bind(dtpProperties.getCoordinator().getCoordinatorNode().getCoordinator().getCoordinatorNode().getCoordinator().getCoordinatorNode().getCoordinator().getCoordinatorNode().getCoordinator().getCoordinatorNode().getCoordinator().getCoordinatorNode(), environment);\n\tBinderHelper.bind(dtpProperties.getCoordinator().getCoordinatorNode().getCoordinator().getCoordinatorNode().getCoordinator().getCoordinatorNode().getCoordinator().getCoordinatorNode().getCoordinator().getCoordinatorNode().getCoordinator().getCoordinatorNode().getCoordinator(), environment);\n", "CodeBleu_score": 32.29975365434201}, {"code": "public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application){\n\t\tDtpProperties dtpProperties = BinderHelper.getBinder(environment).bind(\"dtp\", Bindable.of(DtpProperties.class)).orElse(DtpProperties.builder().build());\n\tMap<String, Object> properties = BinderHelper.getBinder(environment).bind(\"zookeeper\", Bindable.of(Map.class)).orElse(Maps.newHashMap());\n\tif (properties.isEmpty()) {\n\t\tthrow new IllegalArgumentException(\"zookeeper properties must not be empty\");\n\t}\n\tString path = dtpProperties.getPath();\n\tString url = CuratorUtil.buildUrl(properties, path);\n\tCuratorUtil.checkExists(url, path);\n\tCuratorUtil.checkExists(url, path + \"/leader\");\n\tCuratorUtil.checkExists(url, path + \"/leader/election\");\n\tCuratorUtil.checkExists(url, path + \"/leader/election/latch\");\n\tCuratorUtil.checkExists(url, path + \"/leader/election/latch/count\");\n\tCuratorUtil.checkExists(url, path + \"/leader/election/latch/owner\");\n\tCuratorUtil.checkExists(url, path + \"/leader/election/latch/time\");\n\tCuratorUtil.checkExists(url, path + \"/leader/election/latch/timestamp\");\n\tCuratorUtil.checkExists(url, path + \"/leader/election/latch/version\");\n\tCuratorUtil.checkExists(url, path + \"/leader/election/latch/waiting\");\n\tCuratorUtil.checkExists(url, path + \"/leader/election/latch/waiting/count\");\n\tCuratorUtil.checkExists(url, path + \"/leader/election/latch/waiting/owner\");\n\tCuratorUtil.checkExists(url, path + \"/leader/election/latch/waiting/time\");\n\tCuratorUtil.checkExists(url, path + \"/leader/election/latch/waiting/timestamp\");\n\tCuratorUtil.checkExists(url, path + \"/leader/election/latch/waiting/version\");\n\tCuratorUtil.checkExists(url, path + \"/leader/election/latch/waiting/waiting\");\n\tCuratorUtil.checkExists(url, path + \"/leader/election/latch/waiting/waiting/count\");\n\tCuratorUtil.checkExists(", "CodeBleu_score": 40.82889375529463}, {"code": "public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application){\n\t\tDtpProperties dtpProperties = DtpProperties.getDtpProperties();\n\tBinderHelper.bind(dtpProperties, environment);\n\tMap<String, Object> propertiesMap = dtpProperties.toProperties();\n\tfor (Map.Entry<String, Object> entry : propertiesMap.entrySet()) {\n\t\tString key = entry.getKey();\n\t\tObject value = entry.getValue();\n\t\tif (!environment.containsProperty(key)) {\n\t\t\tCuratorUtil.createPropertySource(key, value);\n\t\t}\n\t}\n}", "CodeBleu_score": 47.13667567265519}]}
{"instance_id": "0a934e7885be", "generation_result": [{"code": "public ZookeeperModule UseZooKeeperRouteManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t\tif (configInfo == null) {\n\t\tthrow new ArgumentNullException(nameof(configInfo));\n\t}\n\n\tvar serializer = GetSerializer(configInfo.SerializerType);\n\tvar routePath = configInfo.RoutePath;\n\tvar routePathRoot = configInfo.RoutePathRoot;\n\tvar routePathRegex = configInfo.RoutePathRegex;\n\tvar routePathReplacement = configInfo.RoutePathReplacement;\n\tvar address = configInfo.Address;\n\tvar watch = configInfo.Watch;\n\tvar serializerType = configInfo.SerializerType;\n\tvar namespaceName = configInfo.NamespaceName;\n\tvar configuration = configInfo.Configuration;\n\tvar sectionName = configInfo.SectionName;\n\tvar routeKey = configInfo.RouteKey;\n\tvar routeKeyReplacement = configInfo.RouteKeyReplacement;\n\tvar routeKeyRegex = configInfo.RouteKeyRegex;\n\tvar routeKeyRoot = configInfo.RouteKeyRoot;\n\tvar watch = configInfo.Watch;\n\tvar configInfo = new ConfigInfo {\n\t\tSerializerType = serializerType,\n\t\tRoutePath = routePath,\n\t\tRoutePathRoot = routePathRoot,\n\t\tRoutePathRegex = routePathRegex,\n\t\tRoutePathReplacement = routePathReplacement,\n\t\tAddress = address,\n\t\tWatch = watch,\n\t\tNamespaceName = namespaceName,\n\t\tConfiguration = configuration,\n\t\tSectionName = sectionName,\n\t\tRouteKey = routeKey,\n\t\tRouteKeyReplacement = routeKeyReplacement,\n\t\tRouteKeyRegex = routeKeyRegex,\n\t\tRouteKeyRoot = routeKeyRoot\n\t};\n\tvar clientProvider = GetClientProvider(configInfo);\n\tvar logger = GetLogger();\n\tvar routeProvider = new ZookeeperRouteProvider(clientProvider, configInfo, logger);\n\tvar serviceRouteFactory = new ServiceRouteFactory(routeProvider, logger);\n\tvar serviceRouteManager = new ServiceRouteManager(serviceRouteFactory, logger);\n\tbuilder.RegisterType<ServiceRouteManager>(ServiceLifetime.Singleton).WithParameter(\"serviceRouteManager\", serviceRouteManager);\n\treturn this;\n}", "CodeBleu_score": 18.104346760741848}, {"code": "public ZookeeperModule UseZooKeeperRouteManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t\treturn UseZooKeeperRouteManager(builder, configInfo, null);\n}", "CodeBleu_score": 10.975688102343188}, {"code": "public ZookeeperModule UseZooKeeperRouteManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t\tif (configInfo == null) {\n\t\tthrow new ArgumentNullException(nameof(configInfo));\n\t}\n\n\tvar serviceRouteProvider = new ServiceRouteProvider(configInfo, _serviceProvider)\n\tbuilder.RegisterType(serviceRouteProvider.GetType()).SingleInstance().PropertiesAutowired()\n\tbuilder.RegisterType(typeof(ServiceRouteManager)).SingleInstance().PropertiesAutowired()\n\tbuilder.RegisterType(typeof(MqttServiceRouteManager)).SingleInstance().PropertiesAutowired()\n\tbuilder.RegisterType(typeof(MqttServiceRouteProvider)).SingleInstance().PropertiesAutowired()\n\tbuilder.RegisterType(typeof(ServiceRouteManager)).SingleInstance().PropertiesAutowired()\n\tbuilder.RegisterType(typeof(ServiceRouteFactory)).SingleInstance().PropertiesAutowired()\n\tbuilder.RegisterType(typeof(DefaultServiceRouteFactory)).SingleInstance().PropertiesAutowired()\n\tbuilder.RegisterType(typeof(DefaultSerializer)).SingleInstance().PropertiesAutowired()\n\tbuilder.RegisterType(typeof(DefaultJsonSerializer)).SingleInstance().PropertiesAutowired()\n\tbuilder.RegisterType(typeof(DefaultHealthCheckService)).SingleInstance().PropertiesAutowired()\n\tbuilder.RegisterType(typeof(DefaultHealthChecksBuilder)).SingleInstance().PropertiesAutowired()\n\tbuilder.RegisterType(typeof(DefaultHealthCheckService)).SingleInstance().PropertiesAutowired()\n\tbuilder.RegisterType(typeof(DefaultHealthCheckOptions)).SingleInstance().PropertiesAutowired()\n\tbuilder.RegisterType(typeof(DefaultServiceRouteProvider)).SingleInstance().PropertiesAutowired()\n\tbuilder.RegisterType(typeof(DefaultServiceRouteManager)).SingleInstance().PropertiesAutowired()\n\tbuilder.RegisterType(typeof(DefaultMqttServiceRouteManager)).SingleInstance().PropertiesAutowired()\n\tbuilder.RegisterType(typeof(DefaultMqttServiceRouteProvider)).SingleInstance().PropertiesAutowired()\n\tbuilder.RegisterType(typeof(DefaultMqttServiceSubscribeManager)).SingleInstance().PropertiesAutowired()\n\tbuilder.RegisterType(typeof(DefaultMqttServiceUnsubscribeManager)).SingleInstance().PropertiesAutowired()\n\tbuilder.RegisterType(typeof(DefaultMqttServicePublishManager)).SingleInstance().PropertiesAutowired()\n\tbuilder.RegisterType(typeof(DefaultMqttServiceRouteFactory)).SingleInstance().PropertiesAutowired()\n\tbuilder.RegisterType(typeof(DefaultMqttServiceRouteManager)).SingleInstance().PropertiesAutowired()\n\tbuilder.RegisterType(typeof(DefaultMqttServiceRouteProvider)).SingleInstance().PropertiesAutowired()\n\tbuilder.RegisterType(typeof(DefaultMqttServiceSubscribeManager)).SingleInstance().PropertiesAutowired()\n\tbuilder.RegisterType(typeof(DefaultMqttServiceUnsubscribeManager", "CodeBleu_score": 32.3578754018963}]}
{"instance_id": "c30a17587331", "generation_result": [{"code": " public ZookeeperModule UseZooKeeperCommandManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t return UseZooKeeperCommandManager(builder, configInfo, null);\n}", "CodeBleu_score": 23.843842901114794}, {"code": " public ZookeeperModule UseZooKeeperCommandManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t\tif (configInfo == null) {\n\tthrow new ArgumentNullException(nameof(configInfo));\n\t}\n\tvar services = builder.Services;\n\tservices.AddSingleton(configInfo);\n\tservices.AddSingleton<ISerializer<byte[]>, JsonBytesSerializer>();\n\tservices.AddSingleton<ISerializer<string>, JsonStringSerializer>();\n\tservices.AddSingleton<ISerializer<object>, JsonNetSerializer>();\n\tservices.AddSingleton<ISerializer<byte>, JsonByteSerializer>();\n\tservices.AddSingleton<ISerializer<short>, JsonShortSerializer>();\n\tservices.AddSingleton<ISerializer<int>, JsonIntSerializer>();\n\tservices.AddSingleton<ISerializer<long>, JsonLongSerializer>();\n\tservices.AddSingleton<ISerializer<ushort>, JsonUShortSerializer>();\n\tservices.AddSingleton<ISerializer<uint>, JsonUIntSerializer>();\n\tservices.AddSingleton<ISerializer<ulong>, JsonULongSerializer>();\n\tservices.AddSingleton<ISerializer<float>, JsonFloatSerializer>();\n\tservices.AddSingleton<ISerializer<double>, JsonDoubleSerializer>();\n\tservices.AddSingleton<ISerializer<decimal>, JsonDecimalSerializer>();\n\tservices.AddSingleton<ISerializer<bool>, JsonBoolSerializer>();\n\tservices.AddSingleton<ISerializer<char>, JsonCharSerializer>();\n\tservices.AddSingleton<ISerializer<DateTime>, JsonDateTimeSerializer>();\n\tservices.AddSingleton<ISerializer<DateTimeOffset>, JsonDateTimeOffsetSerializer>();\n\tservices.AddSingleton<ISerializer<TimeSpan>, JsonTimeSpanSerializer>();\n\tservices.AddSingleton<ISerializer<Guid>, JsonGuidSerializer>();\n\tservices.AddSingleton<ISerializer<Uri>, JsonUriSerializer>();\n\tservices.AddSingleton<ISerializer<Version>, JsonVersionSerializer>();\n\tservices.AddSingleton<ISerializer<StringBuilder>, JsonStringBuilderSerializer>();\n\tservices.AddSingleton<ISerializer<Hashtable>, JsonHashtableSerializer>();\n\tservices.AddSingleton<ISerializer<Dictionary<string, object>>, JsonDictionaryStringObjectSerializer>();\n\tservices.AddSingleton<ISerializer<ConcurrentDictionary<string, object>>, JsonConcurrentDictionaryStringObjectSerializer>();\n\tservices.AddSingleton<ISerializer<Hashtable>, JsonHashtableSerializer>();\n\tservices.AddSingleton<ISerializer<List<object>>, JsonListObjectSerializer>();\n\tservices.AddSingleton<ISerializer<List<string>>, JsonList", "CodeBleu_score": 35.44801169789166}, {"code": " public ZookeeperModule UseZooKeeperCommandManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t\treturn UseZooKeeperCommandManager(builder, configInfo, null);\n}", "CodeBleu_score": 23.843688503881815}]}
{"instance_id": "213cc4aa9b19", "generation_result": [{"code": "public static IConfigurationBuilder AddZookeeperFile(this IConfigurationBuilder builder, IFileProvider provider, string path, bool optional, bool reloadOnChange){\n\t\tif (builder == null) {\n\t\tthrow new ArgumentNullException(nameof(builder))\n\t}\n\tif (string.IsNullOrEmpty(path)) {\n\t\tthrow new ArgumentException(\"Invalid path\", nameof(path))\n\t}\n\tif (path[0] != Path.DirectorySeparatorChar && path[0] != Path.AltDirectorySeparatorChar) {\n\t\tthrow new ArgumentException(\"Invalid path\", nameof(path))\n\t}\n\tif (provider == null) {\n\t\tprovider = new PhysicalFileProvider(Path.GetDirectoryName(path))\n\t}\n\tvar source = new ZookeeperConfigurationSource(provider, path, optional, reloadOnChange)\n\tbuilder.Add(source)\n\treturn builder\n}", "CodeBleu_score": 45.40772539550445}, {"code": "public static IConfigurationBuilder AddZookeeperFile(this IConfigurationBuilder builder, IFileProvider provider, string path, bool optional, bool reloadOnChange){\n\t\tif (builder == null) {\n\t\tthrow new ArgumentNullException(nameof(builder))\n\t}\n\tif (string.IsNullOrEmpty(path)) {\n\t\tthrow new ArgumentException(\"The path must be a non-empty string.\", nameof(path))\n\t}\n\tif (provider == null && !Path.IsPathRooted(path)) {\n\t\tthrow new ArgumentException(\"The path must be absolute.\", nameof(path))\n\t}\n\tvar source = new ZookeeperConfigurationSource() {\n\t\tPath = path,\n\t\tOptional = optional,\n\t\tReloadOnChange = reloadOnChange\n\t}\n\tif (provider != null) {\n\t\tsource.FileProvider = provider\n\t}\n\treturn builder.Add(source)\n}", "CodeBleu_score": 47.06539880314661}, {"code": "public static IConfigurationBuilder AddZookeeperFile(this IConfigurationBuilder builder, IFileProvider provider, string path, bool optional, bool reloadOnChange){\n\t\tif (builder == null) {\n\t\tthrow new ArgumentNullException(nameof(builder))\n\t}\n\tif (string.IsNullOrEmpty(path)) {\n\t\tthrow new ArgumentException(\"Path cannot be null or empty\", nameof(path))\n\t}\n\tif (provider == null && !Path.IsPathRooted(path)) {\n\t\tthrow new ArgumentException(\"Provider cannot be null if path is not rooted\", nameof(provider))\n\t}\n\tvar source = new ZookeeperConfigurationSource {\n\t\tFileProvider = provider,\n\t\tPath = path,\n\t\tOptional = optional,\n\t\tReloadOnChange = reloadOnChange\n\t}\n\treturn builder.Add(source)\n}", "CodeBleu_score": 49.42536820377407}]}
{"instance_id": "15bbffa82a13", "generation_result": [{"code": "public override async Task RemveAddressAsync(IEnumerable<AddressModel> Address){\n\t\tawait Task.WhenAll(Address.Select(async address => {\n\t\tvar routes = await GetRoutesAsync();\n\t\tvar route = routes.FirstOrDefault(route => route.ServiceDescriptor.Id == address.ServiceId);\n\t\tif (route != null) {\n\t\t\troute.Address = route.Address.Except(new[] { address });\n\t\t\tawait SetRoutesAsync(routes);\n\t\t}\n\t}));\n}", "CodeBleu_score": 49.79865412037873}, {"code": "public override async Task RemveAddressAsync(IEnumerable<AddressModel> Address){\n\t\tif (Address == null) {\n\t\tthrow new ArgumentNullException(nameof(Address))\n\t}\n\tvar address = Address.ToList()\n\tvar routes = await GetRoutesAsync()\n\tvar routeModels = routes.Result\n\tforeach (var route in routeModels) {\n\t\tvar newAddress = route.Address.Except(address).ToList()\n\t\tif (newAddress.Count == 0) {\n\t\t\tawait RemoveRouteAsync(route.ServiceDescriptor.Id)\n\t\t} else {\n\t\t\troute.Address = newAddress\n\t\t\tawait SetRouteAsync(route)\n\t\t}\n\t}\n}", "CodeBleu_score": 47.93032941114542}, {"code": "public override async Task RemveAddressAsync(IEnumerable<AddressModel> Address){\n\t\tif (Address == null) {\n\t\tthrow new ArgumentNullException(nameof(Address))\n\t}\n\tvar addressList = Address.ToList()\n\tif (addressList.Count == 0) {\n\t\treturn\n\t}\n\tvar addressModels = await GetRoutesAsync()\n\tforeach (var addressModel in addressModels) {\n\t\taddressModel.Endpoints.RemoveAll(p => addressList.Any(a => a.ToString() == p.ToString()))\n\t}\n\tawait SetRoutesAsync(addressModels)\n}", "CodeBleu_score": 19.96902857927004}]}
{"instance_id": "125d23de2a60", "generation_result": [{"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<ServiceRoute> routes, AddressModel hostAddr){\n\t\tvar routePath = _serviceRoutePath + \"/\" + hostAddr.ToString()\n\tvar zkClients = _clientFactory.GetClients()\n\tforeach (var zkClient in zkClients) {\n\t\tvar children = await zkClient.GetChildrenAsync(routePath)\n\t\tvar exceptRoutes = children.Except(routes.Select(p => p.ServiceDescriptor.Id))\n\t\tforeach (var exceptRoute in exceptRoutes) {\n\t\t\tvar exceptRoutePath = routePath + \"/\" + exceptRoute\n\t\t\tif (await zkClient.ExistsAsync(exceptRoutePath)) {\n\t\t\t\tawait zkClient.DeleteAsync(exceptRoutePath)\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 26.312427409587112}, {"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<ServiceRoute> routes, AddressModel hostAddr){\n\t\tvar routePath = _routePath\n\tvar routePaths = new List<string>()\n\tvar routePathPrefix = routePath + \"/\"\n\tvar routePathPrefixLength = routePathPrefix.Length\n\tvar routePathPrefixLength2 = routePathPrefixLength + 1\n\tvar routePathPrefixLength3 = routePathPrefixLength2 + 1\n\tvar routePathPrefixLength4 = routePathPrefixLength3 + 1\n\tvar routePathPrefixLength5 = routePathPrefixLength4 + 1\n\tvar routePathPrefixLength6 = routePathPrefixLength5 + 1\n\tvar routePathPrefixLength7 = routePathPrefixLength6 + 1\n\tvar routePathPrefixLength8 = routePathPrefixLength7 + 1\n\tvar routePathPrefixLength9 = routePathPrefixLength8 + 1\n\tvar routePathPrefixLength10 = routePathPrefixLength9 + 1\n\tvar routePathPrefixLength11 = routePathPrefixLength10 + 1\n\tvar routePathPrefixLength12 = routePathPrefixLength11 + 1\n\tvar routePathPrefixLength13 = routePathPrefixLength12 + 1\n\tvar routePathPrefixLength14 = routePathPrefixLength13 + 1\n\tvar routePathPrefixLength15 = routePathPrefixLength14 + 1\n\tvar routePathPrefixLength16 = routePathPrefixLength15 + 1\n\tvar routePathPrefixLength17 = routePathPrefixLength16 + 1\n\tvar routePathPrefixLength18 = routePathPrefixLength17 + 1\n\tvar routePathPrefixLength19 = routePathPrefixLength18 + 1\n\tvar routePathPrefixLength20 = routePathPrefixLength19 + 1\n\tvar routePathPrefixLength21 = routePathPrefixLength20 + 1\n\tvar routePathPrefixLength22 = routePathPrefixLength21 + 1\n\tvar routePathPrefixLength23 = routePathPrefixLength22 + 1\n\tvar routePathPrefixLength24 = routePathPrefixLength23 + 1\n\tvar routePathPrefixLength25 = routePathPrefixLength24 + 1\n\tvar routePathPrefixLength26 = routePathPrefixLength25 + 1\n\tvar routePathPrefixLength27 = routePath", "CodeBleu_score": 13.485314938629575}, {"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<ServiceRoute> routes, AddressModel hostAddr){\n\t\tvar routePath = GetRoutePath()\n\tvar zkClients = await _zkClientFactory.GetClients()\n\tforeach (var zkClient in zkClients) {\n\t\tvar routeNodes = await zkClient.GetChildrenAsync(routePath)\n\t\tforeach (var routeNode in routeNodes) {\n\t\t\tvar route = _serializer.Deserialize(await zkClient.GetDataAsync(routePath + \"/\" + routeNode), typeof(ServiceRoute)) as ServiceRoute\n\t\t\tif (route != null) {\n\t\t\t\tvar newRoute = routes.FirstOrDefault(x => x.ServiceDescriptor.Id == route.ServiceDescriptor.Id)\n\t\t\t\tif (newRoute == null) {\n\t\t\t\t\tif (route.Address.Any(x => x.ToString() == hostAddr.ToString())) {\n\t\t\t\t\t\tawait zkClient.DeleteAsync(routePath + \"/\" + routeNode)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 24.673215917206708}]}
{"instance_id": "b020a235d57f", "generation_result": [{"code": "private async Task<ServiceRoute> GetRoute(byte[] data){\n\t_logger.LogDebug(\"GetRoute called.\");\nif (data == null) {\n_logger.LogDebug(\"The data is null.\");\nreturn null;\n}\nvar serviceRouteDescriptor = _serializer.Deserialize(data, typeof(ServiceRouteDescriptor)) as ServiceRouteDescriptor;\nif (serviceRouteDescriptor == null) {\n_logger.LogDebug(\"The data is not ServiceRouteDescriptor type.\");\nreturn null;\n}\nvar serviceRoute = _serviceRouteFactory.CreateRoute(serviceRouteDescriptor);\nif (serviceRoute == null) {\n_logger.LogDebug(\"The service route is null.\");\nreturn null;\n}\n_logger.LogDebug($\"The service route is retrieved and is {serviceRoute.Address}\");\nreturn serviceRoute;\n}", "CodeBleu_score": 38.14301829002497}, {"code": "private async Task<ServiceRoute> GetRoute(byte[] data){\n\t-\n\tif (data == null) {\n\t\treturn null\n\t}\n\tvar route = _serializer.Deserialize(data, typeof(ServiceRouteDescriptor)) as ServiceRouteDescriptor\n\tif (_logger.IsEnabled(LogLevel.Debug)) {\n\t\t_logger.LogDebug($\"\u83b7\u53d6\u670d\u52a1\u8def\u7531\uff1a{route.ServiceDescriptor.Id}\")\n\t}\n\treturn _serviceRouteFactory.CreateRoute(route)\n}", "CodeBleu_score": 36.81603113171715}, {"code": "private async Task<ServiceRoute> GetRoute(byte[] data){\n\t_logger.LogDebug(\"\u51c6\u5907\u83b7\u53d6\u670d\u52a1\u8def\u7531\u4fe1\u606f\u3002\");\nif (data == null) {\n_logger.LogDebug(\"\u670d\u52a1\u8def\u7531\u6570\u636e\u4e3a\u7a7a\u3002\");\nreturn null;\n}\nvar descriptor = _serializer.Deserialize<ServiceRouteDescriptor>(data);\nvar serviceRoute = await _serviceRouteFactory.CreateRouteByDescriptor(descriptor);\n_logger.LogDebug($\"\u670d\u52a1\u8def\u7531\u4fe1\u606f\uff1a{serviceRoute.ToJsonString()}\u3002\");\nreturn serviceRoute;\n}", "CodeBleu_score": 42.62126121798608}]}
{"instance_id": "169ed4cc2ad4", "generation_result": [{"code": "public async Task NodeChange(byte[] oldData, byte[] newData){\n\t\tif (oldData == newData) {\n\t\treturn;\n\t}\n\tvar oldRoute = _serializer.Deserialize(Encoding.UTF8.GetString(oldData), _routeType) as Route;\n\tvar newRoute = _serializer.Deserialize(Encoding.UTF8.GetString(newData), _routeType) as Route;\n\tvar oldRouteProvider = _routes.FirstOrDefault(route => route.ServiceDescriptor.Id == oldRoute.ServiceDescriptor.Id);\n\tif (oldRouteProvider == null) {\n\t\treturn;\n\t}\n\tvar newRouteProvider = new RouteProvider(newRoute);\n\tawait _routesLock.WaitAsync();\n\ttry {\n\t\t_routes.Remove(oldRouteProvider);\n\t\t_routes.Add(newRouteProvider);\n\t}\n\tfinally {\n\t\t_routesLock.Release();\n\t}\n\t_logger.LogInformation($\"\u670d\u52a1\u5730\u5740\u53d1\u751f\u6539\u53d8\uff0c\u670d\u52a1id\uff1a{newRoute.ServiceDescriptor.Id},\u670d\u52a1\u5730\u5740\uff1a{newRoute.Address}\");\n\tawait _onChanged?.Invoke(newRoute, oldRoute);\n}", "CodeBleu_score": 32.147729845997304}, {"code": "public async Task NodeChange(byte[] oldData, byte[] newData){\n\t\tif (oldData == null && newData == null) {\n\t\treturn;\n\t}\n\n\tif (oldData != null && newData != null && oldData.SequenceEqual(newData)) {\n\t\treturn;\n\t}\n\n\tRoute oldRoute = null;\n\tRoute newRoute = null;\n\n\tif (oldData != null) {\n\t\toldRoute = _serializer.Deserialize(Encoding.UTF8.GetString(oldData), typeof(Route)) as Route;\n\t}\n\n\tif (newData != null) {\n\t\tnewRoute = _serializer.Deserialize(Encoding.UTF8.GetString(newData), typeof(Route)) as Route;\n\t}\n\n\tif (oldRoute == null && newRoute == null) {\n\t\treturn;\n\t}\n\n\tif (oldRoute != null && newRoute != null && oldRoute.ServiceDescriptor.Id == newRoute.ServiceDescriptor.Id) {\n\t\treturn;\n\t}\n\n\tif (oldRoute != null && newRoute != null && oldRoute.ServiceDescriptor.Id != newRoute.ServiceDescriptor.Id) {\n\t\treturn;\n\t}\n\n\tif (oldRoute != null && newRoute == null) {\n\t\treturn;\n\t}\n\n\tif (oldRoute == null && newRoute != null) {\n\t\treturn;\n\t}\n\n\tawait _lock.WaitAsync();\n\ttry {\n\t\tif (oldRoute != null) {\n\t\t\t_routes.Remove(oldRoute);\n\t\t}\n\n\t\tif (newRoute != null) {\n\t\t\t_routes.Add(newRoute);\n\t\t}\n\t}\n\tfinally {\n\t\t_lock.Release();\n\t}\n\n\tawait _onChanged(newRoute, oldRoute);\n}", "CodeBleu_score": 39.93995654016248}, {"code": "public async Task NodeChange(byte[] oldData, byte[] newData){\n\t\tvar newRoute = _serializer.Deserialize(newData, _routeType) as Route;\n\tif (newRoute == null) {\n\t\treturn;\n\t}\n\tvar oldRoute = _serializer.Deserialize(oldData, _routeType) as Route;\n\tif (oldRoute == null) {\n\t\treturn;\n\t}\n\tvar newAddress = new List<AddressModel>();\n\tforeach (var address in newRoute.Address) {\n\t\tnewAddress.Add(address);\n\t}\n\tvar oldAddress = new List<AddressModel>();\n\tforeach (var address in oldRoute.Address) {\n\t\toldAddress.Add(address);\n\t}\n\tif (newAddress.SequenceEqual(oldAddress)) {\n\t\treturn;\n\t}\n\tawait _lock.WaitAsync();\n\ttry {\n\t\tvar index = _routes.FindIndex(p => p.ServiceDescriptor.Id == newRoute.ServiceDescriptor.Id);\n\t\t_routes[index] = newRoute;\n\t}\n\tfinally {\n\t\t_lock.Release();\n\t}\n\tawait _changedEvent.InvokeAsync(newRoute, oldRoute);\n}", "CodeBleu_score": 31.812781701242056}]}
{"instance_id": "af01261d3199", "generation_result": [{"code": "public override async Task SetSubscribersAsync(IEnumerable<ServiceSubscriber> subscribers){\n\t\tvar serviceSubscribers = subscribers.ToList();\n\tvar serviceIds = serviceSubscribers.Select(i => i.ServiceId).ToList();\n\tvar addressLists = await GetAddressListsAsync(serviceIds);\n\tforeach (var serviceSubscriber in serviceSubscribers) {\n\t\tvar addressList = addressLists[serviceSubscriber.ServiceId];\n\t\tserviceSubscriber.Address = addressList;\n\t}\n\tawait base.SetSubscribersAsync(serviceSubscribers);\n}", "CodeBleu_score": 28.13538358646019}, {"code": "public override async Task SetSubscribersAsync(IEnumerable<ServiceSubscriber> subscribers){\n\t\tif (subscribers == null) {\n\t\treturn\n\t}\n\tvar watchers = new List<Task>()\n\tvar tasks = new List<Task>()\n\tforeach (var subscriber in subscribers) {\n\t\tvar watchTask = _client.SubscribeDataChange(subscriber.ServiceKey, _nodeChanged)\n\t\twatchers.Add(watchTask)\n\t\tvar task = _client.GetDataAsync(subscriber.ServiceKey)\n\t\ttasks.Add(task)\n\t}\n\tawait Task.WhenAll(watchers)\n\tvar datas = await Task.WhenAll(tasks)\n\tforeach (var subscriber in subscribers) {\n\t\tvar data = datas.FirstOrDefault(p => p.Path == subscriber.ServiceKey)\n\t\tif (data != null) {\n\t\t\tsubscriber.Address = Encoding.UTF8.GetString(data.Data)\n\t\t}\n\t}\n\tawait base.SetSubscribersAsync(subscribers)\n}", "CodeBleu_score": 43.17591027234521}, {"code": "public override async Task SetSubscribersAsync(IEnumerable<ServiceSubscriber> subscribers){\n\t\tif (subscribers == null) {\n\t\treturn;\n\t}\n\n\tvar oldSubscribers = await GetSubscribersAsync();\n\tforeach (var subscriber in subscribers) {\n\t\tvar oldSubscriber = oldSubscribers.FirstOrDefault(item => item.Id == subscriber.Id);\n\t\tif (oldSubscriber != null) {\n\t\t\tsubscriber.Address = oldSubscriber.Address.Union(subscriber.Address).ToList();\n\t\t}\n\t}\n\n\tawait base.SetSubscribersAsync(subscribers);\n}", "CodeBleu_score": 54.14130318510597}]}
{"instance_id": "fda02cec3296", "generation_result": [{"code": "private async Task<ServiceSubscriber[]> GetSubscribers(IEnumerable<string> childrens){\n\t\tvar subscribers = new List<ServiceSubscriber>();\n\tforeach (var child in childrens) {\n\t\tvar fullPath = $\"/surging/rpc/{child}\";\n\t\tvar data = await _client.GetDataAsync(fullPath);\n\t\tvar serializer = _serviceProvider.GetRequiredService<ISerializer<byte[]>>();\n\t\tvar subscriber = serializer.Deserialize<ServiceSubscriber>(data);\n\t\tsubscribers.Add(subscriber);\n\t}\n\treturn subscribers.ToArray();\n}", "CodeBleu_score": 33.04645259930993}, {"code": "private async Task<ServiceSubscriber[]> GetSubscribers(IEnumerable<string> childrens){\n\t\tvar subscribers = new List<ServiceSubscriber>();\n\tforeach (var children in childrens) {\n\t\tvar path = $\"/surging/rpc/{children}\";\n\t\tvar data = await _client.GetDataAsync(path);\n\t\tvar serializer = _serviceProvider.GetRequiredService<ISerializer<byte[]>>();\n\t\tvar subscriber = serializer.Deserialize<ServiceSubscriber>(data);\n\t\tsubscriber.Path = path;\n\t\tsubscribers.Add(subscriber);\n\t\tif (_logger.IsEnabled(LogLevel.Debug)) {\n\t\t\t_logger.LogDebug($\"Get subscriber from path:{path}.\");\n\t\t}\n\t}\n\treturn subscribers.ToArray();\n}", "CodeBleu_score": 44.525740062608044}, {"code": "private async Task<ServiceSubscriber[]> GetSubscribers(IEnumerable<string> childrens){\n\t\tvar subscribers = new List<ServiceSubscriber>();\n\tforeach (var children in childrens) {\n\t\tvar child = children;\n\t\tvar path = _serviceRoutePath + \"/\" + child;\n\t\tvar data = await _client.GetDataAsync(path);\n\t\tif (data != null) {\n\t\t\tvar serializer = _client.GetSerializer<byte[]>();\n\t\t\tvar subscriber = serializer.Deserialize(data, typeof(ServiceSubscriber));\n\t\t\tsubscribers.Add(subscriber);\n\t\t\t_logger.LogDebug($\"Found subscriber,Id:{subscriber.Id},ServiceId:{subscriber.ServiceDescriptor.Id},Implementation:{subscriber.ImplementationType.FullName},CacheTime:{subscriber.CacheTime},Weight:{subscriber.Weight}\");\n\t\t}\n\t}\n\treturn subscribers.ToArray();\n}", "CodeBleu_score": 38.81125457971655}]}
{"instance_id": "6c3018ff0c0d", "generation_result": [{"code": "private async Task EnterSubscribers(){\n\t\tif (_subscribers != null) {\n\t\treturn;\n\t}\n\tusing (var client = await _clientFactory.CreateClientAsync()) {\n\t\t_logger.LogInformation(\"\u5f00\u59cb\u521d\u59cb\u5316\u8ba2\u9605\u8005\u96c6\u5408\u3002\");\n\t\tawait client.EnsureConnectedAsync();\n\t\tawait client.ExistsAsync(_path);\n\t\tvar children = await client.GetChildrenAsync(_path);\n\t\tvar subscribers = new List<Tuple<string, byte[]>>();\n\t\tforeach (var child in children) {\n\t\t\tvar data = await client.GetDataAsync(_path + \"/\" + child);\n\t\t\tsubscribers.Add(Tuple.Create(child, data));\n\t\t}\n\t\t_subscribers = subscribers;\n\t\t_logger.LogInformation(\"\u5b8c\u6210\u521d\u59cb\u5316\u8ba2\u9605\u8005\u96c6\u5408\u3002\");\n\t}\n}", "CodeBleu_score": 28.928759652928925}, {"code": "private async Task EnterSubscribers(){\n\t\tif (_subscribers != null) {\n\t\treturn\n\t}\n\tvar client = await _clientFactory.CreateClient(new ConfigInfo {\n\t\tAddress = _configInfo.Address,\n\t\tEnableEphemeral = false,\n\t\tSerializerType = _configInfo.SerializerType\n\t})\n\tawait client.SubscribeDataChange(_configInfo.Path, async (sender, args) => {\n\t\tvar children = await client.GetChildren(args.Path)\n\t\tvar childrenNodes = children.Select(p => {\n\t\t\tvar childPath = args.Path + \"/\" + p\n\t\t\treturn new NodeData {\n\t\t\t\tData = await client.GetData(childPath),\n\t\t\t\tPath = childPath\n\t\t\t}\n\t\t}).ToArray()\n\t\tawait Task.Yield()\n\t\t_subscribers = childrenNodes\n\t\t_logger.LogInformation($\"The current subscribers are updated, path:{args.Path}, subscribers count:{_subscribers.Count()}\")\n\t})\n}", "CodeBleu_score": 30.641117807040835}, {"code": "private async Task EnterSubscribers(){\n\t\tif (_subscribers != null) {\n\t\treturn\n\t}\n\tawait _lock.WaitAsync();\n\ttry {\n\t\tif (_subscribers != null) {\n\t\t\treturn\n\t\t}\n\t\tvar client = await _clientFactory.CreateClientAsync();\n\t\tawait client.SubscribeDataChange(Path, async (sender, args) => {\n\t\t\tvar children = await client.GetChildrenAsync(Path);\n\t\t\tvar subscribers = new List<Tuple<string, Action<byte[]>>>();\n\t\t\tforeach (var child in children) {\n\t\t\t\tvar bytes = await client.GetDataAsync(Path + \"/\" + child);\n\t\t\t\tvar subscriber = _serializer.Deserialize<Subscriber>(bytes);\n\t\t\t\tsubscribers.Add(new Tuple<string, Action<byte[]>>(child, subscriber.Notify));\n\t\t\t}\n\t\t\t_subscribers = subscribers;\n\t\t});\n\t\tawait client.SubscribeChildChange(Path, async (sender, args) => {\n\t\t\tvar children = await client.GetChildrenAsync(Path);\n\t\t\tvar subscribers = new List<Tuple<string, Action<byte[]>>>();\n\t\t\tforeach (var child in children) {\n\t\t\t\tvar bytes = await client.GetDataAsync(Path + \"/\" + child);\n\t\t\t\tvar subscriber = _serializer.Deserialize<Subscriber>(bytes);\n\t\t\t\tsubscribers.Add(new Tuple<string, Action<byte[]>>(child, subscriber.Notify));\n\t\t\t}\n\t\t\t_subscribers = subscribers;\n\t\t});\n\t\tvar children = await client.GetChildrenAsync(Path);\n\t\tvar subscribers = new List<Tuple<string, Action<byte[]>>>();\n\t\tforeach (var child in children) {\n\t\t\tvar bytes = await client.GetDataAsync(Path + \"/\" + child);\n\t\t\tvar subscriber = _serializer.Deserialize<Subscriber>(bytes);\n\t\t\tsubscribers.Add(new Tuple<string, Action<byte[]>>(child, subscriber.Notify));\n\t\t}\n\t\t_subscribers = subscribers;\n\t}\n\tfinally {\n\t\t_lock.Release();\n\t}\n}", "CodeBleu_score": 39.50188197714079}]}
{"instance_id": "60ff973ba60a", "generation_result": [{"code": "public void NodeChange(byte[] oldData, byte[] newData){\n\t\tif (newData == null) {\n\t\treturn;\n\t}\n\tvar services = _serializer.Deserialize<List<ServiceCommand>>(newData);\n\tif (services == null) {\n\t\treturn;\n\t}\n\tvar oldServices = _serializer.Deserialize<List<ServiceCommand>>(oldData);\n\tif (oldServices == null) {\n\t\treturn;\n\t}\n\tforeach (var service in services) {\n\t\tvar oldService = oldServices.FirstOrDefault(x => x.Id == service.Id);\n\t\tif (oldService != null && oldService.Command != service.Command) {\n\t\t\toldServices.Remove(oldService);\n\t\t\toldServices.Add(service);\n\t\t}\n\t}\n\t_logger.LogInformation(\"Node {node} has changed.\", _path);\n\t_onChanged?.Invoke(oldServices, services);\n}", "CodeBleu_score": 28.35078834490467}, {"code": "public void NodeChange(byte[] oldData, byte[] newData){\n\t\tif (oldData != null && newData != null && oldData.SequenceEqual(newData)) {\n\t\treturn;\n\t}\n\n\tvar oldCommand = _serializer.Deserialize(oldData, CommandInfo.Descriptor) as CommandInfo;\n\tvar newCommand = _serializer.Deserialize(newData, CommandInfo.Descriptor) as CommandInfo;\n\tif (oldCommand != null && newCommand != null) {\n\t\tif (oldCommand.Id == newCommand.Id) {\n\t\t\t_logger.LogInformation($\"Node {newCommand.Id} is changed,old command is:{oldCommand.ToJsonString()},new command is:{newCommand.ToJsonString()}.\");\n\t\t\t_commands[newCommand.Id] = newCommand;\n\t\t\tOnChanged?.Invoke(newCommand, oldCommand);\n\t\t}\n\t}\n}", "CodeBleu_score": 28.04624150794629}, {"code": "public void NodeChange(byte[] oldData, byte[] newData){\n\t\tif (oldData == null && newData == null) {\n\t\treturn;\n\t}\n\tif (oldData == null) {\n\t\toldData = Encoding.UTF8.GetBytes(string.Empty);\n\t}\n\tif (newData == null) {\n\t\tnewData = Encoding.UTF8.GetBytes(string.Empty);\n\t}\n\tvar oldCommand = _serializer.Deserialize(Encoding.UTF8.GetString(oldData), typeof(ServiceCommand)) as ServiceCommand;\n\tvar newCommand = _serializer.Deserialize(Encoding.UTF8.GetString(newData), typeof(ServiceCommand)) as ServiceCommand;\n\tif (oldCommand != null && newCommand != null && oldCommand.ServiceId == newCommand.ServiceId) {\n\t\t_serviceCommands.Remove(oldCommand.ServiceId);\n\t\t_serviceCommands.Add(newCommand.ServiceId, newCommand);\n\t\tOnChanged?.Invoke(newCommand, oldCommand);\n\t}\n}", "CodeBleu_score": 35.27106393454602}]}
{"instance_id": "4597b75f2b3d", "generation_result": [{"code": "protected override async Task ProcessImpl(WatchedEvent watchedEvent){\n\t\t// Get the node path from the watched event.\n\tstring path = watchedEvent.Path\n\n\t// Get the node data from the watched event.\n\tbyte[] data = watchedEvent.Data\n\n\t// If the node data is null, the node has been deleted.\n\tif (data == null) {\n\t\t// Remove the node path from the watcher.\n\t\tRemove(path)\n\n\t\t// Return.\n\t\treturn\n\t}\n\n\t// Get the node data as a string.\n\tstring dataStr = Encoding.UTF8.GetString(data)\n\n\t// If the node data is not null, the node has been created or updated.\n\tif (dataStr != null) {\n\t\t// Get the node data as a string.\n\t\tstring dataStr = Encoding.UTF8.GetString(data)\n\n\t\t// If the node data is not null, the node has been created or updated.\n\t\tif (dataStr != null) {\n\t\t\t// Execute the action.\n\t\t\tawait ExecuteAction(path, dataStr)\n\n\t\t\t// Update the watcher with the new data.\n\t\t\tawait Update(path, dataStr)\n\t\t}\n\t}\n}", "CodeBleu_score": 15.225673580201796}, {"code": "protected override async Task ProcessImpl(WatchedEvent watchedEvent){\n\t\tif (watchedEvent.Type == EventType.NodeDataChanged) {\n\t\tvar client = new ZooKeeperClient(ZooKeeperConnectionString, 10000, this.Process);\n\t\tvar data = await client.GetData(watchedEvent.Path);\n\t\tawait client.Close();\n\t\tawait Process(watchedEvent.Path, data);\n\t}\n}", "CodeBleu_score": 43.72442923086215}, {"code": "protected override async Task ProcessImpl(WatchedEvent watchedEvent){\n\t\t// Get the current data from the node\n\tvar data = await zkClient.GetDataAsync(watchedEvent.Path, Watcher, CancellationToken.None);\n\n\t// Execute the action with the current and new data\n\tawait ExecuteAction(data, watchedEvent);\n}", "CodeBleu_score": 38.45016594719415}]}
{"instance_id": "cb4f0e22a0d5", "generation_result": [{"code": "public static IServiceBuilder UseZookeeperClientProvider(this IServiceBuilder builder, ConfigInfo configInfo){\n\t\treturn builder.UseZookeeperClientProvider(provider => {\n\t}, configInfo);\n}", "CodeBleu_score": 14.167441306771744}, {"code": "public static IServiceBuilder UseZookeeperClientProvider(this IServiceBuilder builder, ConfigInfo configInfo){\n\t\treturn builder.UseZookeeperClientProvider(provider => {\n\t\tprovider.ConfigInfo = configInfo;\n\t});\n}", "CodeBleu_score": 14.87232758217018}, {"code": "public static IServiceBuilder UseZookeeperClientProvider(this IServiceBuilder builder, ConfigInfo configInfo){\n\t\tvar services = builder.Services;\n\tservices.AddSingleton(configInfo);\n\tservices.AddSingleton<IZookeeperClientProvider, DefaultZookeeperClientProvider>();\n\tservices.AddSingleton<ISerializer<byte[]>, JsonBytesSerializer>();\n\tservices.AddSingleton<ISerializer<string>, JsonStringSerializer>();\n\tservices.AddSingleton<ISerializer<object>, JsonObjectSerializer>();\n\tservices.AddSingleton<ISerializer<int>, IntSerializer>();\n\tservices.AddSingleton<ISerializer<long>, LongSerializer>();\n\tservices.AddSingleton<ISerializer<short>, ShortSerializer>();\n\tservices.AddSingleton<ISerializer<float>, FloatSerializer>();\n\tservices.AddSingleton<ISerializer<double>, DoubleSerializer>();\n\tservices.AddSingleton<ISerializer<bool>, BoolSerializer>();\n\tservices.AddSingleton<ISerializer<DateTime>, DateTimeSerializer>();\n\tservices.AddSingleton<ISerializer<DateTimeOffset>, DateTimeOffsetSerializer>();\n\tservices.AddSingleton<ISerializer<TimeSpan>, TimeSpanSerializer>();\n\tservices.AddSingleton<ISerializer<byte>, ByteSerializer>();\n\tservices.AddSingleton<ISerializer<char>, CharSerializer>();\n\tservices.AddSingleton<ISerializer<decimal>, DecimalSerializer>();\n\tservices.AddSingleton<ISerializer<Guid>, GuidSerializer>();\n\tservices.AddSingleton<ISerializer<ushort>, UShortSerializer>();\n\tservices.AddSingleton<ISerializer<uint>, UIntSerializer>();\n\tservices.AddSingleton<ISerializer<ulong>, ULongSerializer>();\n\tservices.AddSingleton<ISerializer<sbyte>, SByteSerializer>();\n\tservices.AddSingleton<ISerializer<IPAddress>, IPAddressSerializer>();\n\tservices.AddSingleton<ISerializer<IPEndPoint>, IPEndPointSerializer>();\n\tservices.AddSingleton<ISerializer<Uri>, UriSerializer>();\n\tservices.AddSingleton<ISerializer<HttpContent>, HttpContentSerializer>();\n\tservices.AddSingleton<ISerializer<Encoding>, EncodingSerializer>();\n\tservices.AddSingleton<ISerializer<Stream>, StreamSerializer>();\n\tservices.AddSingleton<ISerializer<Type>, TypeSerializer>();\n\tservices.AddSingleton<ISerializer<RpcRequest>, RpcRequestSerializer>();\n\tservices.AddSingleton<ISerializer<RpcResponse>, RpcResponseSerializer>();\n\tservices.AddSingleton<ISerializer<byte[][]>, ByteArray2dSerializer>();\n\tservices.AddSingleton", "CodeBleu_score": 29.689068044442667}]}
{"instance_id": "80709a4b2b69", "generation_result": [{"code": "protected override async Task SetRoutesAsync(IEnumerable<MqttServiceDescriptor> routes){\n\t\tvar logger = _serviceProvider.GetRequiredService<ILogger<MqttHostedService>>()\n\tvar serializer = _serviceProvider.GetRequiredService<ISerializer<string>>()\n\tvar zkOptions = _serviceProvider.GetRequiredService<ZookeeperOptions>()\n\tvar zkClient = await _serviceProvider.GetRequiredService<ZookeeperClientFactory>().CreateClient(zkOptions)\n\tvar zkPath = zkOptions.RoutePath\n\tvar mqttOptions = _serviceProvider.GetRequiredService<MqttOptions>()\n\tvar mqttClient = new MqttClient(mqttOptions)\n\tvar mqttClients = new List<MqttClient>()\n\tmqttClients.Add(mqttClient)\n\tvar mqttRoutePath = zkPath + \"/mqtt\"\n\tvar mqttRoutePathExist = await zkClient.ExistsAsync(mqttRoutePath)\n\tif (mqttRoutePathExist == null) {\n\t\tawait zkClient.CreatePersistentAsync(mqttRoutePath, true)\n\t\tlogger.LogInformation($\"\\\"{mqttRoutePath}\\\" node does not exist, so it has been created.\")\n\t}\n\telse {\n\t\tlogger.LogInformation($\"\\\"{mqttRoutePath}\\\" node exists, so it will not be created.\")\n\t}\n\tforeach (var route in routes) {\n\t\tvar routePath = mqttRoutePath + \"/\" + route.Id\n\t\tvar routePathExist = await zkClient.ExistsAsync(routePath)\n\t\tif (routePathExist == null) {\n\t\t\tawait zkClient.CreatePersistentAsync(routePath, true)\n\t\t\tlogger.LogInformation($\"\\\"{routePath}\\\" node does not exist, so it has been created.\")\n\t\t}\n\t\telse {\n\t\t\tlogger.LogInformation($\"\\\"{routePath}\\\" node exists, so it will not be created.\")\n\t\t}\n\t\tvar routeData = serializer.Serialize(route)\n\t\tvar routeDataBytes = Encoding.UTF8.GetBytes(routeData)\n\t\tvar routeDataExist = await zkClient.ExistsAsync(routePath + \"/data\")\n\t\tif (routeDataExist == null) {\n\t\t\tawait zkClient.CreatePersistentAsync(routePath + \"/data\", routeDataBytes)\n\t\t\tlogger.LogInformation($\"\\\"{routePath}/data\\\" node does not exist, so it has been created.\")\n\t\t}\n\t\telse {\n\t\t\tawait zkClient.WriteDataAsync(routePath + \"/data", "CodeBleu_score": 37.547281092285125}, {"code": "protected override async Task SetRoutesAsync(IEnumerable<MqttServiceDescriptor> routes){\n\t\tif (routes == null) {\n\t\tthrow new ArgumentNullException(nameof(routes))\n\t}\n\n\tvar logger = ServiceProvider.GetLogger(typeof(MqttRouteManager))\n\n\tvar serializer = ServiceProvider.GetRequiredService<ISerializer<string>>()\n\n\tvar clients = ServiceProvider.GetInstances<IZookeeperClientProvider>()\n\tif (clients.Count() == 0) {\n\t\tlogger.LogWarning(\"\u6ca1\u6709\u53ef\u7528\u7684zookeeper\u5ba2\u6237\u7aef\")\n\t\treturn\n\t}\n\n\tvar path = ServiceProvider.GetRequiredService<MqttOptions>()?.RoutePath\n\tif (string.IsNullOrEmpty(path)) {\n\t\tlogger.LogWarning(\"\u6ca1\u6709\u53ef\u7528\u7684zookeeper\u5ba2\u6237\u7aef\")\n\t\treturn\n\t}\n\n\tvar address = ServiceProvider.GetRequiredService<AddressModel>()\n\tif (address == null) {\n\t\tlogger.LogWarning(\"\u6ca1\u6709\u53ef\u7528\u7684\u670d\u52a1\u5730\u5740\")\n\t\treturn\n\t}\n\n\tvar mqttOptions = ServiceProvider.GetRequiredService<MqttOptions>()\n\tvar options = new ZookeeperClientOptions() {\n\t\tSerializer = serializer,\n\t\tAddress = new[] { address.ToString() },\n\t\tSessionTimeout = TimeSpan.FromMilliseconds(mqttOptions.SessionTimeout),\n\t\tConnectionTimeout = TimeSpan.FromMilliseconds(mqttOptions.ConnectionTimeout),\n\t\tOperatingTimeout = TimeSpan.FromMilliseconds(mqttOptions.OperatingTimeout)\n\t}\n\n\tvar client = clients.First().GetClient(options)\n\tawait client.EnsurePathExistsAsync(path)\n\n\tvar tasks = new List<Task>()\n\tforeach (var route in routes) {\n\t\tvar routePath = path + \"/\" + route.Id\n\t\tvar data = serializer.Serialize(route)\n\t\tvar task = client.CreateOrUpdateAsync(routePath, data, true)\n\t\ttasks.Add(task)\n\t}\n\n\tawait Task.WhenAll(tasks)\n\n\tlogger.LogInformation(\"\u8bbe\u7f6eMQTT\u670d\u52a1\u8def\u7531\u6210\u529f\u3002\")\n}", "CodeBleu_score": 31.170519812831703}, {"code": "protected override async Task SetRoutesAsync(IEnumerable<MqttServiceDescriptor> routes){\n\t\tawait _logger.LogDebugAsync($\"\u51c6\u5907\u8bbe\u7f6eMqtt\u670d\u52a1\u8def\u7531\u4fe1\u606f\u3002\")\n\tvar routePath = _options.RoutePath\n\tvar routeDataPath = _options.RouteDataPath\n\tvar clients = await GetClients()\n\tvar routeDatas = routes.Select(route => route.GetMqttRouteData()).ToArray()\n\tawait _logger.LogDebugAsync($\"\u51c6\u5907\u8bbe\u7f6eMqtt\u670d\u52a1\u8def\u7531\u4fe1\u606f\u3002\")\n\tforeach (var client in clients) {\n\t\tawait _logger.LogDebugAsync($\"\u6b63\u5728\u8bbe\u7f6eMqtt\u670d\u52a1\u8def\u7531\u4fe1\u606f\u3002\")\n\t\tvar routeData = routeDatas.Where(route => route.Address == client.Address).ToArray()\n\t\tvar routeDataBytes = _serializer.Serialize(routeData)\n\t\tvar routeDataPathWithClient = routeDataPath.Replace(\"{address}\", client.Address.ToString())\n\t\tawait client.CreatePersistentNode(routeDataPathWithClient, Encoding.UTF8.GetString(routeDataBytes), true)\n\t\tawait _logger.LogDebugAsync($\"Mqtt\u670d\u52a1\u8def\u7531\u4fe1\u606f\u8bbe\u7f6e\u5b8c\u6210\u3002\")\n\t}\n\tawait _logger.LogDebugAsync($\"Mqtt\u670d\u52a1\u8def\u7531\u4fe1\u606f\u8bbe\u7f6e\u5b8c\u6210\u3002\")\n}", "CodeBleu_score": 23.300080144508208}]}
{"instance_id": "69ff4d3427cd", "generation_result": [{"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<MqttServiceRoute> routes, AddressModel hostAddr){\n\t\tvar routePath = ZookeeperPath.RoutePath\n\tvar routeData = _serializer.Serialize(routes)\n\tvar clients = _clientProvider.GetClients()\n\tvar tasks = new List<Task>()\n\tforeach (var client in clients) {\n\t\ttasks.Add(Task.Run(() => {\n\t\t\tvar children = client.GetChildren(routePath, false)\n\t\t\tvar toBeDeleted = new List<string>()\n\t\t\tforeach (var child in children) {\n\t\t\t\tvar childPath = ZookeeperPath.Combine(routePath, child)\n\t\t\t\tvar childData = client.GetData(childPath, false)\n\t\t\t\tvar childRoutes = _serializer.Deserialize<IEnumerable<MqttServiceRoute>>(childData)\n\t\t\t\tif (childRoutes.Except(routes).Any(p => p.Address == hostAddr)) {\n\t\t\t\t\ttoBeDeleted.Add(child)\n\t\t\t\t}\n\t\t\t}\n\t\t\tforeach (var child in toBeDeleted) {\n\t\t\t\tvar childPath = ZookeeperPath.Combine(routePath, child)\n\t\t\t\tclient.Delete(childPath, -1)\n\t\t\t}\n\t\t}))\n\t}\n\tawait Task.WhenAll(tasks)\n}", "CodeBleu_score": 24.78825468758322}, {"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<MqttServiceRoute> routes, AddressModel hostAddr){\n\t\tvar routePaths = routes.Select(p => ZookeeperPathHelper.GetRoutePath(p.Topic)).ToList()\n\tvar zooKeeperClients = _zooKeeperClientFactory.GetClients()\n\tforeach (var zooKeeperClient in zooKeeperClients) {\n\t\tvar currentRoutes = await zooKeeperClient.GetChildrenAsync(_options.RoutePath)\n\t\tforeach (var currentRoute in currentRoutes) {\n\t\t\tif (!routePaths.Contains(currentRoute) && currentRoute.StartsWith(hostAddr.ToString())) {\n\t\t\t\tawait zooKeeperClient.DeleteAsync(ZookeeperPathHelper.GetRoutePath(currentRoute))\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 20.7265554825162}, {"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<MqttServiceRoute> routes, AddressModel hostAddr){\n\t\tif (routes == null) {\n\t\treturn\n\t}\n\tvar routePath = _options.RoutePath\n\tvar zkClients = _clientFactory.GetClients()\n\tforeach (var zkClient in zkClients) {\n\t\tvar children = await zkClient.GetChildrenAsync(routePath)\n\t\tvar exceptRoutes = children.Except(routes.Select(p => p.RoutePath)).ToList()\n\t\tif (exceptRoutes.Any()) {\n\t\t\tforeach (var exceptRoute in exceptRoutes) {\n\t\t\t\tvar routeNodePath = $\"/routePath/{exceptRoute}\"\n\t\t\t\tvar children = await zkClient.GetChildrenAsync(routeNodePath)\n\t\t\t\tvar exceptAddresses = children.Except(routes.Select(p => p.Address)).ToList()\n\t\t\t\tif (exceptAddresses.Any()) {\n\t\t\t\t\tforeach (var exceptAddress in exceptAddresses) {\n\t\t\t\t\t\tvar addressNodePath = $\"/routePath/{exceptRoute}/{exceptAddress}\"\n\t\t\t\t\t\tif (hostAddr != null && exceptAddress.Equals(hostAddr.ToString())) {\n\t\t\t\t\t\t\tawait zkClient.DeleteAsync(addressNodePath)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 45.54382213986616}]}
{"instance_id": "8856055e4872", "generation_result": [{"code": "public override async Task SetCachesAsync(IEnumerable<ServiceCacheDescriptor> cacheDescriptors){\n\t\tvar logger = ServiceProvider.GetLogger(typeof(ZookeeperServiceCacheProvider));\n\tvar serializer = ServiceProvider.GetRequiredService(typeof(ISerializer<byte[]>)) as Serializer<byte[]>;\n\tvar path = _options.CachePath;\n\tvar clients = _clientFactory.GetClients();\n\tvar cachePath = path;\n\tvar cacheDescriptors = cacheDescriptors.ToArray();\n\tlogger.LogInformation($\"Setting cache descriptors for {cacheDescriptors.Length} cache paths in Zookeeper.\");\n\tforeach (var client in clients) {\n\t\tlogger.LogDebug($\"Setting cache descriptors for {cacheDescriptors.Length} cache paths in Zookeeper using client {client.Options.ConnectionString}.\");\n\t\tawait client.EnsurePathExistsAsync(cachePath);\n\t\tforeach (var cacheDescriptor in cacheDescriptors) {\n\t\t\tvar key = cacheDescriptor.GetKey();\n\t\t\tvar bytes = serializer.Serialize(cacheDescriptor);\n\t\t\tvar cacheNodePath = cachePath + \"/\" + key;\n\t\t\tvar cacheNodeExists = await client.ExistsAsync(cacheNodePath);\n\t\t\tif (cacheNodeExists == null) {\n\t\t\t\tawait client.CreatePersistentAsync(cacheNodePath, bytes);\n\t\t\t} else {\n\t\t\t\tvar cacheNodeBytes = await client.GetDataAsync(cacheNodePath);\n\t\t\t\tif (!cacheNodeBytes.SequenceEqual(bytes)) {\n\t\t\t\t\tawait client.SetDataAsync(cacheNodePath, bytes);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tlogger.LogInformation(\"Successfully set cache descriptors in Zookeeper.\");\n}", "CodeBleu_score": 37.02117295645664}, {"code": "public override async Task SetCachesAsync(IEnumerable<ServiceCacheDescriptor> cacheDescriptors){\n\t\tif (cacheDescriptors == null) {\n\t\tthrow new ArgumentNullException(nameof(cacheDescriptors))\n\t}\n\n\tvar serializer = GetService<ISerializer<string>>()\n\tvar logger = GetService<ILogger<DefaultZookeeperCacheProvider>>()\n\tvar path = GetService<ZookeeperConfig>().Path\n\tvar clients = GetService<ZookeeperClientFactory>().GetClients()\n\tvar cacheDescriptorList = cacheDescriptors.ToList()\n\tvar cacheCount = cacheDescriptorList.Count\n\tvar cacheDescriptorIndex = 0\n\tvar cacheDescriptor = cacheDescriptorList[cacheDescriptorIndex]\n\tvar cachePath = path + \"/\" + cacheDescriptor.CacheName\n\tvar cachePathExists = await clients.ExistsAsync(cachePath)\n\tif (!cachePathExists) {\n\t\tawait clients.CreatePersistentAsync(cachePath, true)\n\t}\n\n\twhile (cacheDescriptorIndex < cacheCount) {\n\t\tvar descriptor = cacheDescriptorList[cacheDescriptorIndex]\n\t\tvar descriptorPath = cachePath + \"/\" + descriptor.Key\n\t\tvar descriptorPathExists = await clients.ExistsAsync(descriptorPath)\n\t\tif (!descriptorPathExists) {\n\t\t\tawait clients.CreatePersistentAsync(descriptorPath, true)\n\t\t}\n\n\t\tvar descriptorValue = serializer.Serialize(descriptor)\n\t\tvar descriptorValueBytes = Encoding.UTF8.GetBytes(descriptorValue)\n\t\tvar descriptorValueExists = await clients.ExistsAsync(descriptorPath)\n\t\tif (!descriptorValueExists) {\n\t\t\tawait clients.CreatePersistentAsync(descriptorPath, descriptorValueBytes)\n\t\t} else {\n\t\t\tvar descriptorValueBytesFromZookeeper = await clients.GetDataAsync(descriptorPath)\n\t\t\tif (!descriptorValueBytesFromZookeeper.SequenceEqual(descriptorValueBytes)) {\n\t\t\t\tawait clients.SetDataAsync(descriptorPath, descriptorValueBytes)\n\t\t\t}\n\t\t}\n\n\t\tlogger.LogInformation($\"Cache descriptor {descriptor.Key} for cache {descriptor.CacheName} added to Zookeeper.\")\n\t\tcacheDescriptorIndex += 1\n\t\tcacheDescriptor = cacheDescriptorIndex < cacheCount ? cacheDescriptorList[cacheDescriptorIndex] : null\n\t}\n}", "CodeBleu_score": 23.278957105748983}, {"code": "public override async Task SetCachesAsync(IEnumerable<ServiceCacheDescriptor> cacheDescriptors){\n\t\tif (cacheDescriptors == null) {\n\t\tthrow new ArgumentNullException(nameof(cacheDescriptors));\n\t}\n\n\tif (cacheDescriptors.Any()) {\n\t\t_logger.LogInformation(\"Set service caches to zookeeper, cache descriptors count: {count}.\", cacheDescriptors.Count());\n\t\tvar serializer = GetRequiredService<ISerializer<byte[]>>();\n\t\tvar cachePath = _options.CachePath;\n\t\tvar clients = GetRequiredService<IServiceCacheClients>();\n\t\tforeach (var client in clients) {\n\t\t\tvar zkClient = client.Value;\n\t\t\tawait zkClient.CreatePersistent(cachePath, true);\n\t\t\tforeach (var cacheDescriptor in cacheDescriptors) {\n\t\t\t\tvar descriptorPath = Path.Combine(cachePath, cacheDescriptor.Id);\n\t\t\t\tvar descriptorBytes = serializer.Serialize(cacheDescriptor);\n\t\t\t\tvar descriptorExists = await zkClient.Exists(descriptorPath);\n\t\t\t\tif (descriptorExists) {\n\t\t\t\t\tvar descriptorData = await zkClient.GetData(descriptorPath);\n\t\t\t\t\tif (descriptorData.DataEquals(descriptorBytes)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tawait zkClient.CreatePersistent(descriptorPath, true);\n\t\t\t\tawait zkClient.SetData(descriptorPath, descriptorBytes);\n\t\t\t}\n\t\t}\n\t\t_logger.LogInformation(\"Set service caches to zookeeper success, cache descriptors count: {count}.\", cacheDescriptors.Count());\n\t}\n}", "CodeBleu_score": 34.91587921943716}]}
{"instance_id": "57d92c17de83", "generation_result": [{"code": "private async Task CreateSubdirectory((ManualResetEvent, ZooKeeper) zooKeeper, string path){\n\t\tif (zooKeeper.Item1.WaitOne(0)) {\n\t\treturn\n\t}\n\ttry {\n\t\tawait zooKeeper.Item2.createTask(path, null, CreateMode.PERSISTENT)\n\t\t_logger.LogInformation(\"The path {0} has been created.\", path)\n\t}\n\tcatch (KeeperException.NodeExistsException) {\n\t\t_logger.LogInformation(\"The path {0} already exists.\", path)\n\t}\n\tcatch (Exception ex) {\n\t\t_logger.LogError(ex, \"An error occurred while creating the path {0}.\", path)\n\t}\n\tfinally {\n\t\tif (path.LastIndexOf(\"/\") > 0) {\n\t\t\tawait CreateSubdirectory(zooKeeper, path.Substring(0, path.LastIndexOf(\"/\")))\n\t\t}\n\t}\n}", "CodeBleu_score": 39.835481804081766}, {"code": "private async Task CreateSubdirectory((ManualResetEvent, ZooKeeper) zooKeeper, string path){\n\t\tif (zooKeeper == null) {\n\t\tthrow new ArgumentNullException(nameof(zooKeeper))\n\t}\n\tif (string.IsNullOrEmpty(path)) {\n\t\tthrow new ArgumentNullException(nameof(path))\n\t}\n\tvar directories = path.Split('/')\n\tvar directory = \"\"\n\tfor (var i = 1; i < directories.Length; i++) {\n\t\tdirectory += $\"/{directories[i]}\"\n\t\tvar exists = await zooKeeper.Item2.existsAsync(directory)\n\t\tif (exists == null) {\n\t\t\tawait zooKeeper.Item2.createAsync(directory, Encoding.UTF8.GetBytes(DateTime.Now.ToString()), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT)\n\t\t\t_logger.LogInformation(\"Created Zookeeper node: {0}\", directory)\n\t\t}\n\t}\n}", "CodeBleu_score": 40.034994592811415}, {"code": "private async Task CreateSubdirectory((ManualResetEvent, ZooKeeper) zooKeeper, string path){\n\t\tif (zooKeeper.Item1.WaitOne(0)) {\n\t\treturn\n\t}\n\tif (zooKeeper.Item2.Exists(path) != null) {\n\t\treturn\n\t}\n\tawait Task.Run(() => {\n\t\tif (zooKeeper.Item2.Exists(path) == null) {\n\t\t\tvar pathSegments = path.Split(new char[] { '/' }, StringSplitOptions.RemoveEmptyEntries)\n\t\t\tvar currentPath = \"/\"\n\t\t\tforeach (var pathSegment in pathSegments) {\n\t\t\t\tcurrentPath += pathSegment + \"/\"\n\t\t\t\tif (zooKeeper.Item2.Exists(currentPath) == null) {\n\t\t\t\t\tzooKeeper.Item2.Create(currentPath, Encoding.UTF8.GetBytes(string.Empty), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t})\n}", "CodeBleu_score": 43.59615734109135}]}
{"instance_id": "b276a07da453", "generation_result": [{"code": "public async ValueTask<IEnumerable<(ManualResetEvent, ZooKeeper)>> GetZooKeepers(){\n\t\tvar addresses = GetAddresses();\n\tvar result = new List<(ManualResetEvent, ZooKeeper)>();\n\tforeach (var address in addresses) {\n\t\ttry {\n\t\t\tvar connectionEvent = new ManualResetEvent(false);\n\t\t\tvar zk = new ZooKeeper(address, 10000, async (event) => {\n\t\t\t\tif (event.State == Watcher.Event.KeeperState.SyncConnected) {\n\t\t\t\t\tconnectionEvent.Set();\n\t\t\t\t}\n\t\t\t});\n\t\t\tawait connectionEvent.WaitOneAsync();\n\t\t\tresult.Add((connectionEvent, zk));\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\t_logger.Log(Level.Error, $\"\u83b7\u53d6zookeeper\u5ba2\u6237\u7aef\u5931\u8d25\uff1a{ex.Message}\u3002\");\n\t\t}\n\t}\n\treturn result;\n}", "CodeBleu_score": 59.779434461099676}, {"code": "public async ValueTask<IEnumerable<(ManualResetEvent, ZooKeeper)>> GetZooKeepers(){\n\t\tvar addresses = GetAddresses()\n\tvar zooKeeperList = new ConcurrentBag<(ManualResetEvent, ZooKeeper)>()\n\tvar tasks = new List<Task>()\n\tforeach (var address in addresses) {\n\t\tvar healthCheckService = GetHealthCheckService(address)\n\t\ttasks.Add(Task.Run(async () => {\n\t\t\tif (await healthCheckService.IsHealth(address)) {\n\t\t\t\tvar event = new ManualResetEvent(false)\n\t\t\t\tvar zk = new ZooKeeper(address.ToString(), 15000, event, event, event)\n\t\t\t\tzooKeeperList.Add((event, zk))\n\t\t\t}\n\t\t}))\n\t}\n\tawait Task.WhenAll(tasks)\n\treturn zooKeeperList\n}", "CodeBleu_score": 51.55039495907422}, {"code": "public async ValueTask<IEnumerable<(ManualResetEvent, ZooKeeper)>> GetZooKeepers(){\n\t\tvar result = new ConcurrentBag<(ManualResetEvent, ZooKeeper)>()\n\tvar addressList = _addressSelector.SelectAddresses()\n\tvar tasks = new List<Task>()\n\tvar logger = ServiceLocator.Current.Resolve<ILogger<ZookeeperClient>>()\n\tvar semaphore = new SemaphoreSlim(1)\n\tforeach (var address in addressList) {\n\t\tvar addressString = address.ToString()\n\t\tvar addressEvent = new ManualResetEvent(false)\n\t\tawait semaphore.WaitAsync()\n\t\ttasks.Add(Task.Run(async () => {\n\t\t\tvar zk = new ZooKeeper(addressString, _sessionTimeout, async (WatchedEvent) => await HandleWatchedEvent(WatchedEvent, addressEvent, addressString))\n\t\t\tawait zk.ConnectAsync()\n\t\t\tawait zk.AddAuthInfoAsync(\"digest\", Encoding.UTF8.GetBytes(_authInfo))\n\t\t\tawait zk.RegisterWatchersAsync()\n\t\t\tlogger.LogInformation($\"The ZooKeeper client has started and connected to the server:{addressString}.\")\n\t\t\tresult.Add((addressEvent, zk))\n\t\t}))\n\t}\n\tawait Task.WhenAll(tasks)\n\treturn result\n}", "CodeBleu_score": 38.29425100265594}]}
{"instance_id": "dbb6463e7ee8", "generation_result": [{"code": "ZooKeeper getZooKeeper() throws Exception{\n\t\tsynchronized (this) {\n\t\tif (zooKeeper == null) {\n\t\t\tif (zooKeeperFactory != null) {\n\t\t\t\tzooKeeper = zooKeeperFactory.newZooKeeper(ensembleProvider.getConnectionString(), sessionTimeoutMs, new Watcher() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void process(WatchedEvent event) {\n\t\t\t\t\t\tif (event.getState() == Event.KeeperState.Expired) {\n\t\t\t\t\t\t\tsynchronized (this) {\n\t\t\t\t\t\t\t\tzooKeeper = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tzooKeeper = new ZooKeeper(ensembleProvider.getConnectionString(), sessionTimeoutMs, new Watcher() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void process(WatchedEvent event) {\n\t\t\t\t\t\tif (event.getState() == Event.KeeperState.Expired) {\n\t\t\t\t\t\t\tsynchronized (this) {\n\t\t\t\t\t\t\t\tzooKeeper = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (zooKeeper.getState() != ZooKeeper.States.CONNECTED) {\n\t\t\t\tthrow new Exception(\"Unable to connect to zookeeper server.\");\n\t\t\t}\n\t\t}\n\t}\n\treturn zooKeeper;\n}", "CodeBleu_score": 32.042897293000124}, {"code": "ZooKeeper getZooKeeper() throws Exception{\n\t\tsynchronized (this) {\n\t\tif (zookeeper == null) {\n\t\t\tif (ensembleProvider == null) {\n\t\t\t\tensembleProvider = new FixedEnsembleProvider(ensembleConnectionString);\n\t\t\t}\n\t\t\tif (zookeeperFactory == null) {\n\t\t\t\tzookeeperFactory = new DefaultZookeeperFactory();\n\t\t\t}\n\t\t\tzookeeper = zookeeperFactory.getZooKeeper(ensembleProvider, sessionTimeoutMs, sessionTimeoutMs, new Watcher() {\n\t\t\t\t@Override\n\t\t\t\tpublic void process(WatchedEvent event) {\n\t\t\t\t\t// do nothing\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (zookeeper.getState() != ZooKeeper.States.CONNECTED) {\n\t\t\t\tthrow new Exception(\"Unable to connect to zookeeper cluster\");\n\t\t\t}\n\t\t}\n\t\treturn zookeeper;\n\t}\n}", "CodeBleu_score": 38.20101713369126}, {"code": "ZooKeeper getZooKeeper() throws Exception{\n\t\tsynchronized(this) {\n\t\tif (zookeeper == null) {\n\t\t\tif (ensembleProvider == null) {\n\t\t\t\tensembleProvider = new FixedEnsembleProvider(ensembleConnectionString);\n\t\t\t}\n\t\t\tif (zookeeperFactory == null) {\n\t\t\t\tzookeeperFactory = new DefaultZookeeperFactory();\n\t\t\t}\n\t\t\tzookeeper = zookeeperFactory.newZooKeeper(ensembleProvider, sessionTimeoutMs, new Watcher() {\n\t\t\t\t@Override\n\t\t\t\tpublic void process(WatchedEvent event) {\n\t\t\t\t\tsynchronized(this) {\n\t\t\t\t\t\tif (event.getState() == Event.KeeperState.Expired) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tif (zookeeper != null) {\n\t\t\t\t\t\t\t\t\tzookeeper.close();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tzookeeper = null;\n\t\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t\t// ignore errors - nothing we can do\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\treturn zookeeper;\n}", "CodeBleu_score": 31.306315457067512}]}
{"instance_id": "0d9f311aa482", "generation_result": [{"code": "private void internalClose(int waitForShutdownTimeoutMs) throws Exception{\n\t\tif ( zookeeper != null ) {\n\t\ttry {\n\t\t\tif ( waitForShutdownTimeoutMs > 0 ) {\n\t\t\t\tzookeeper.register( new Watcher() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void process(WatchedEvent event) {\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\tzookeeper.close();\n\t\t\t\tzookeeper.waitForShutdown( waitForShutdownTimeoutMs );\n\t\t\t} else {\n\t\t\t\tzookeeper.close();\n\t\t\t}\n\t\t} catch ( InterruptedException e ) {\n\t\t\tThread.currentThread().interrupt();\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\tzookeeper = null;\n\t\t}\n\t}\n}", "CodeBleu_score": 35.50904821276835}, {"code": "private void internalClose(int waitForShutdownTimeoutMs) throws Exception{\n\t\tif ( zookeeper != null ) {\n\t\ttry {\n\t\t\tif ( waitForShutdownTimeoutMs > 0 ) {\n\t\t\t\tzookeeper.register( new Watcher() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void process(WatchedEvent event) {\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\tzookeeper.close();\n\t\t\t\tzookeeper.waitForShutdown( waitForShutdownTimeoutMs );\n\t\t\t} else {\n\t\t\t\tzookeeper.close();\n\t\t\t}\n\t\t} catch ( InterruptedException e ) {\n\t\t\tThread.currentThread().interrupt();\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\tzookeeper = null;\n\t\t}\n\t}\n}", "CodeBleu_score": 35.50904821276835}, {"code": "private void internalClose(int waitForShutdownTimeoutMs) throws Exception{\n\t\tif ( zookeeper == null ) {\n\t\treturn;\n\t}\n\n\ttry {\n\t\tif ( waitForShutdownTimeoutMs > 0 ) {\n\t\t\tzookeeper.register( new Watcher() {\n\t\t\t\t@Override\n\t\t\t\tpublic void process(WatchedEvent event) {\n\t\t\t\t}\n\t\t\t} );\n\t\t\tzookeeper.waitForShutdown( waitForShutdownTimeoutMs );\n\t\t} else {\n\t\t\tzookeeper.close();\n\t\t}\n\t} finally {\n\t\tzookeeper = null;\n\t}\n}", "CodeBleu_score": 29.289561609434323}]}
{"instance_id": "d57ef4592303", "generation_result": [{"code": "public boolean blockUntilConnectedOrTimedOut() throws InterruptedException{\n\t\treturn blockUntilConnectedOrTimedOut(DEFAULT_CONNECTION_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n}", "CodeBleu_score": 5.556509317671711}, {"code": "public boolean blockUntilConnectedOrTimedOut() throws InterruptedException{\n\t\tPreconditions.checkState(client != null, \"Client is not started\");\n\tPreconditions.checkState(client.isConnected(), \"Client is not connected\");\n\tif (client.isConnected()) {\n\t\treturn true;\n\t}\n\tfinal CountDownLatch connectedLatch = new CountDownLatch(1);\n\tfinal AtomicBoolean connected = new AtomicBoolean(false);\n\tfinal AtomicReference<OperationTrace> trace = new AtomicReference<OperationTrace>();\n\tfinal AtomicReference<String> path = new AtomicReference<String>();\n\tfinal AtomicReference<String> message = new AtomicReference<String>();\n\tfinal AtomicReference<String> stackTrace = new AtomicReference<String>();\n\tfinal AtomicReference<String> description = new AtomicReference<String>();\n\tfinal AtomicReference<String> connectionString = new AtomicReference<String>();\n\tfinal AtomicReference<String> scheme = new AtomicReference<String>();\n\tfinal AtomicReference<String> authScheme = new AtomicReference<String>();\n\tfinal AtomicReference<String> auth = new AtomicReference<String>();\n\tfinal AtomicReference<String> sessionTimeout = new AtomicReference<String>();\n\tfinal AtomicReference<String> connectionTimeout = new AtomicReference<String>();\n\tfinal AtomicReference<String> retryPolicyName = new AtomicReference<String>();\n\tfinal AtomicReference<String> retryPolicyData = new AtomicReference<String>();\n\tfinal AtomicReference<String> namespace = new AtomicReference<String>();\n\tfinal AtomicReference<String> ensembleProviderName = new AtomicReference<String>();\n\tfinal AtomicReference<String> ensembleProviderData = new AtomicReference<String>();\n\tfinal AtomicReference<String> ensembleProviderConnectionString = new AtomicReference<String>();\n\tfinal AtomicReference<String> ensembleProviderConnectionString2 = new AtomicReference<String>();\n\tfinal AtomicReference<String> ensembleProviderConnectionString3 = new AtomicReference<String>();\n\tfinal AtomicReference<String> ensembleProviderConnectionString4 = new AtomicReference<String>();\n\tfinal AtomicReference<String> ensembleProviderConnectionString5 = new AtomicReference<String>();\n\tfinal AtomicReference<String> ensembleProviderConnectionString6 = new AtomicReference<String>();\n\tfinal AtomicReference<String> ensembleProviderConnectionString7 = new AtomicReference<String>();\n\tfinal AtomicReference<String> ensembleProviderConnectionString8 = new AtomicReference<String>();\n\tfinal AtomicReference<String> ensembleProviderConnectionString9 =", "CodeBleu_score": 34.48996497718107}, {"code": "public boolean blockUntilConnectedOrTimedOut() throws InterruptedException{\n\t\tPreconditions.checkState(client != null, \"Not started\");\n\tif ( client.isConnected() ) {\n\t\tlog.debug(\"Client is connected\");\n\t\treturn true;\n\t}\n\tlog.debug(\"Waiting for client to connect\");\n\tCountDownLatch connectedLatch = new CountDownLatch(1);\n\tAtomicBoolean connected = new AtomicBoolean(false);\n\tAtomicReference<OperationTrace> trace = new AtomicReference<OperationTrace>();\n\tclient.getTracerDriver().addTracer(new TracerDriver.Tracer() {\n\t\t@Override\n\t\tpublic void process(OperationTrace operationTrace) {\n\t\t\ttrace.set(operationTrace);\n\t\t\tif ( operationTrace.getType() == OperationTrace.Type.CONNECTION_SUSPENDED ) {\n\t\t\t\tconnected.set(false);\n\t\t\t} else if ( operationTrace.getType() == OperationTrace.Type.CONNECTION_RECONNECTED ) {\n\t\t\t\tconnected.set(true);\n\t\t\t\tconnectedLatch.countDown();\n\t\t\t}\n\t\t}\n\t});\n\tboolean success = connectedLatch.await(connectionTimeoutMs, TimeUnit.MILLISECONDS);\n\tif ( success ) {\n\t\tlog.debug(\"Client connected\");\n\t} else {\n\t\tlog.debug(\"Client connection timed out\");\n\t}\n\tif ( client.isConnected() ) {\n\t\tclient.getTracerDriver().removeTracer(trace.get());\n\t}\n\treturn success;\n}", "CodeBleu_score": 37.47630944388257}]}
{"instance_id": "d722f6d0beb6", "generation_result": [{"code": "public void close(int waitForShutdownTimeoutMs){\n\t\tif ( isStarted() ) {\n\t\tLOGGER.info(\"Closing\");\n\t\ttry {\n\t\t\tcloseable.close();\n\t\t} catch ( IOException e ) {\n\t\t\tif ( Thread.currentThread().isInterrupted() ) {\n\t\t\t\tLOGGER.info(\"Interrupted while closing\", e);\n\t\t\t} else {\n\t\t\t\tLOGGER.error(\"Unable to close\", e);\n\t\t\t}\n\t\t}\n\t\tLOGGER.info(\"Waiting for shutdown\");\n\t\ttry {\n\t\t\tif ( !shutdownLatch.await(waitForShutdownTimeoutMs, TimeUnit.MILLISECONDS) ) {\n\t\t\t\tLOGGER.warn(\"Shutdown timed out after \" + waitForShutdownTimeoutMs + \" ms\");\n\t\t\t}\n\t\t} catch ( InterruptedException e ) {\n\t\t\tThread.currentThread().interrupt();\n\t\t\tLOGGER.info(\"Interrupted while waiting for shutdown\", e);\n\t\t}\n\t\tLOGGER.info(\"Closed\");\n\t}\n}", "CodeBleu_score": 38.572750853624484}, {"code": "public void close(int waitForShutdownTimeoutMs){\n\t\tif ( started.compareAndSet(true, false) )\n\t{\n\t\ttry\n\t\t{\n\t\t\tcloseable.close();\n\t\t}\n\t\tcatch ( IOException e )\n\t\t{\n\t\t\tif ( Thread.currentThread().isInterrupted() )\n\t\t\t{\n\t\t\t\tlog.debug(\"Interrupted while shutting down\", e);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tlog.error(\"Error while shutting down\", e);\n\t\t\t}\n\t\t}\n\n\t\ttry\n\t\t{\n\t\t\tThreadUtils.quietlySleep(waitForShutdownTimeoutMs);\n\t\t}\n\t\tcatch ( InterruptedException e )\n\t\t{\n\t\t\tThread.currentThread().interrupt();\n\t\t}\n\t}\n}", "CodeBleu_score": 42.9725203075359}, {"code": "public void close(int waitForShutdownTimeoutMs){\n\t\tPreconditions.checkState(started.get(), \"Not started\");\n\tif (shutdown.compareAndSet(false, true)) {\n\t\ttry {\n\t\t\tcloseInternal(waitForShutdownTimeoutMs);\n\t\t} catch (IOException e) {\n\t\t\tif (Thread.currentThread().isInterrupted()) {\n\t\t\t\tlogger.debug(\"Interrupted during close\", e);\n\t\t\t} else {\n\t\t\t\tlogger.error(\"Error closing\", e);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 37.53188772770933}]}
{"instance_id": "8492e37ce46e", "generation_result": [{"code": "public void internalBlockUntilConnectedOrTimedOut() throws InterruptedException {\n\t\tif ( state.isConnected() )\n\t{\n\t\treturn;\n\t}\n\tlong            startMs = System.currentTimeMillis();\n\tlong            endMs = startMs + connectionTimeoutMs;\n\tCountDownLatch  connectedLatch = new CountDownLatch(1);\n\tWatcher         watcher = new Watcher()\n\t{\n\t\t@Override\n\t\tpublic void process(WatchedEvent event) throws Exception\n\t\t{\n\t\t\tif ( event.getState() == Event.KeeperState.SyncConnected )\n\t\t\t{\n\t\t\t\tconnectedLatch.countDown();\n\t\t\t}\n\t\t}\n\t};\n\ttry\n\t{\n\t\taddAuthInfoIfNeeded();\n\t\taddWatcher(watcher);\n\t\tlong            timeToWait = endMs - startMs;\n\t\tif ( timeToWait > 0 )\n\t\t{\n\t\t\tif ( !connectedLatch.await(timeToWait, TimeUnit.MILLISECONDS) )\n\t\t\t{\n\t\t\t\tthrow new ConnectionLossException();\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tconnectedLatch.await();\n\t\t}\n\t}\n\tfinally\n\t{\n\t\tremoveWatcher(watcher);\n\t}\n}", "CodeBleu_score": 39.42419199090382}, {"code": "public void internalBlockUntilConnectedOrTimedOut() throws InterruptedException {\n\t\tinternalBlockUntilConnectedOrTimedOut(connectionTimeoutMs, TimeUnit.MILLISECONDS);\n}", "CodeBleu_score": 2.941236956268449}, {"code": "public void internalBlockUntilConnectedOrTimedOut() throws InterruptedException {\n\t\tlong startTimeMs = System.currentTimeMillis();\n\tlong waitTimeMs = connectionTimeoutMs;\n\tlong elapsedTimeMs = 0;\n\twhile ( true )  {\n\t\ttry  {\n\t\t\tif ( client.getConnectionState().isConnected() )  {\n\t\t\t\treturn;\n\t\t\t}\n\t\t} catch ( Exception ignore ) {\n\t\t\t// ignore - this is just to check the connection state\n\t\t}\n\n\t\tif ( waitTimeMs > 0 )  {\n\t\t\tlong waitTimeMs2 = Math.min(waitTimeMs, 1000);\n\t\t\tif ( waitTimeMs2 > 0 )  {\n\t\t\t\ttry  {\n\t\t\t\t\tclient.waitUntilConnected(waitTimeMs2, TimeUnit.MILLISECONDS);\n\t\t\t\t} catch ( Exception ignore ) {\n\t\t\t\t\t// ignore - this is just to wait for the connection\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\telapsedTimeMs = System.currentTimeMillis() - startTimeMs;\n\t\twaitTimeMs = connectionTimeoutMs - elapsedTimeMs;\n\t\tif ( waitTimeMs <= 0 )  {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tthrow new KeeperException.OperationTimeoutException();\n}", "CodeBleu_score": 30.62865999883072}]}
{"instance_id": "4a01f5365731", "generation_result": [{"code": "String validateFoundNode(CuratorFrameworkImpl client, CreateMode createMode, String foundNode) throws Exception{\n\t\tString sessionID = client.getZookeeperClient().getZooKeeper().getSessionId().toString();\n\tString nodeSessionID = foundNode.substring(foundNode.lastIndexOf(\"-\") + 1);\n\tif (!sessionID.equals(nodeSessionID)) {\n\t\tlogger.info(\"Session ID changed from {} to {}.\", nodeSessionID, sessionID);\n\t\tclient.getZookeeperClient().getZooKeeper().delete(foundNode, -1);\n\t\treturn createNode(client, createMode);\n\t}\n\treturn foundNode;\n}", "CodeBleu_score": 31.79920995658104}, {"code": "String validateFoundNode(CuratorFrameworkImpl client, CreateMode createMode, String foundNode) throws Exception{\n\t\tString sessionId = client.getZookeeperClient().getZooKeeper().getSessionId();\n\tString nodeSessionId = foundNode.substring(foundNode.lastIndexOf(\"-\") + 1);\n\tif (!sessionId.equals(nodeSessionId)) {\n\t\tString oldNode = foundNode.substring(0, foundNode.lastIndexOf(\"-\"));\n\t\tclient.getZookeeperClient().getZooKeeper().delete(oldNode, -1);\n\t\tclient.getZookeeperClient().getZooKeeper().create(foundNode, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, createMode);\n\t\tLOGGER.info(\"Session ID changed from {} to {}. Old node {} deleted. New node {} created.\", sessionId, nodeSessionId, oldNode, foundNode);\n\t\treturn client.getZookeeperClient().getZooKeeper().create(foundNode, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, createMode);\n\t}\n\treturn foundNode;\n}", "CodeBleu_score": 36.88295120252766}, {"code": "String validateFoundNode(CuratorFrameworkImpl client, CreateMode createMode, String foundNode) throws Exception{\n\t\tString sessionId = client.getZookeeperClient().getZooKeeper().getSessionId();\n\tif (foundNode != null) {\n\t\tbyte[] data = client.getZookeeperClient().getZooKeeper().getData(foundNode, false, null);\n\t\tString foundSessionId = new String(data, StandardCharsets.UTF_8);\n\t\tif (!sessionId.equals(foundSessionId)) {\n\t\t\tLOG.info(\"Session ID has changed from {} to {}\", foundSessionId, sessionId);\n\t\t\tclient.getZookeeperClient().getZooKeeper().delete(foundNode, -1);\n\t\t\tif (createMode == CreateMode.EPHEMERAL) {\n\t\t\t\tfoundNode = client.getZookeeperClient().getZooKeeper().create(client.getZookeeperClient().getZooKeeper().create(client.getZookeeperClient().getZooKeeper().create(client.getZookeeperClient().getZooKeeper().create(\"/\" + UUID.randomUUID(), new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, createMode), new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, createMode), new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, createMode), new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, createMode);\n\t\t\t} else {\n\t\t\t\tfoundNode = client.getZookeeperClient().getZooKeeper().create(client.getZookeeperClient().getZooKeeper().create(client.getZookeeperClient().getZooKeeper().create(client.getZookeeperClient().getZooKeeper().create(\"/\" + UUID.randomUUID(), new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, createMode), new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, createMode), new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, createMode), new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, createMode);\n\t\t\t}\n\t\t\tclient.getZookeeperClient().getZooKeeper().setData(foundNode, sessionId.getBytes(StandardCharsets.UTF_8), -1);\n\t\t}\n\t} else if (createMode == CreateMode.EPHEMERAL) {\n\t\tfoundNode = client.getZookeeperClient().getZooKeeper().create(client.getZookeeperClient().getZooKeeper().create(client", "CodeBleu_score": 32.51234920884698}]}
{"instance_id": "126d0922a699", "generation_result": [{"code": "private Stat pathInForeground(final String path, final List<ACL> aclList) throws Exception{\n\t\tfinal OperationTrace trace = new OperationTrace();\n\ttrace.addNode(path);\n\ttrace.addEvent(new OperationTrace.Event(OperationTrace.Event.Type.SET_ACL));\n\tfinal Stat stat = new Stat();\n\tRetryLoop.callWithRetry(client, new Callable<Stat>() {\n\t\t@Override\n\t\tpublic Stat call() throws Exception {\n\t\t\ttry {\n\t\t\t\tStat localStat = client.setACL().withACL(aclList).forPath(path);\n\t\t\t\tstat.setAversion(localStat.getAversion());\n\t\t\t\tstat.setCtime(localStat.getCtime());\n\t\t\t\tstat.setCzxid(localStat.getCzxid());\n\t\t\t\tstat.setMtime(localStat.getMtime());\n\t\t\t\tstat.setMzxid(localStat.getMzxid());\n\t\t\t\tstat.setPzxid(localStat.getPzxid());\n\t\t\t\tstat.setSize(localStat.getSize());\n\t\t\t\tstat.setVersion(localStat.getVersion());\n\t\t\t\tstat.setEphemeralOwner(localStat.getEphemeralOwner());\n\t\t\t\tstat.setDataLength(localStat.getDataLength());\n\t\t\t\tstat.setNumChildren(localStat.getNumChildren());\n\t\t\t\ttrace.setStat(stat);\n\t\t\t\treturn stat;\n\t\t\t}\n\t\t\tcatch ( Exception e ) {\n\t\t\t\ttrace.setException(e);\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t});\n\ttrace.commit();\n\treturn stat;\n}", "CodeBleu_score": 41.65350197398996}, {"code": "private Stat pathInForeground(final String path, final List<ACL> aclList) throws Exception{\n\t\tfinal OperationTrace trace = client.traceOp().forPath(path);\n\tfinal SetACLBuilder aclBuilder = client.setACL().withACL(aclList);\n\tfinal BackgroundCallback callback = new BackgroundCallback() {\n\t\t@Override\n\t\tpublic void processResult(CuratorFramework client, CuratorEvent event) throws Exception {\n\t\t\ttrace.commit();\n\t\t\ttrace.setOutcome(event.getResultCode());\n\t\t}\n\t};\n\ttry {\n\t\tRetryLoop.callWithRetry(client, aclBuilder, callback);\n\t}\n\tcatch (Exception e) {\n\t\ttrace.setOutcome(CuratorEventType.ERROR);\n\t\ttrace.commit();\n\t\tthrow e;\n\t}\n\treturn trace.getResultStat();\n}", "CodeBleu_score": 43.6564069001127}, {"code": "private Stat pathInForeground(final String path, final List<ACL> aclList) throws Exception{\n\t\tfinal OperationTrace trace = new OperationTrace();\n\ttrace.setPath(path);\n\ttrace.setStartMs(System.currentTimeMillis());\n\ttry {\n\t\ttrace.setOutcome(OperationTrace.Outcome.NOT_SET);\n\t\ttrace.setStep(OperationTrace.Step.NOT_SET);\n\t\ttrace.setRetryCount(0);\n\t\ttrace.setRetryDelayMs(0);\n\t\ttrace.setMaxRetryDelayMs(0);\n\t\ttrace.setElapsedTimeMs(0);\n\t\ttrace.setChildren(null);\n\t\ttrace.setACLList(aclList);\n\t\ttrace.setStat(null);\n\t\ttrace.setResultMessage(null);\n\t\ttrace.setThreadId(Thread.currentThread().getId());\n\t\ttrace.setThreadName(Thread.currentThread().getName());\n\t\ttrace.setThreadPriority(Thread.currentThread().getPriority());\n\t\ttrace.setThreadState(Thread.currentThread().getState().toString());\n\t\ttrace.setTimestamp(System.currentTimeMillis());\n\t\ttrace.setTraceId(trace.generateTraceId());\n\t\ttrace.setChildren(null);\n\t\ttrace.setStat(null);\n\t\ttrace.setResultMessage(null);\n\t\ttrace.setThreadId(Thread.currentThread().getId());\n\t\ttrace.setThreadName(Thread.currentThread().getName());\n\t\ttrace.setThreadPriority(Thread.currentThread().getPriority());\n\t\ttrace.setThreadState(Thread.currentThread().getState().toString());\n\t\ttrace.setTimestamp(System.currentTimeMillis());\n\t\ttrace.setTraceId(trace.generateTraceId());\n\t\ttrace.setOutcome(OperationTrace.Outcome.NOT_SET);\n\t\ttrace.setStep(OperationTrace.Step.NOT_SET);\n\t\ttrace.setRetryCount(0);\n\t\ttrace.setRetryDelayMs(0);\n\t\ttrace.setMaxRetryDelayMs(0);\n\t\ttrace.setElapsedTimeMs(0);\n\t\ttrace.setChildren(null);\n\t\ttrace.setStat(null);\n\t\ttrace.setResultMessage(null);\n\t\ttrace.setThreadId(Thread.currentThread().getId());\n\t\ttrace.setThreadName(Thread.currentThread().getName());\n\t\ttrace.setThreadPriority(Thread.currentThread().getPriority());\n\t\ttrace.setThreadState(Thread.currentThread().getState().toString());\n\t\ttrace.set", "CodeBleu_score": 29.257363244434753}]}
{"instance_id": "e07b079ff61f", "generation_result": [{"code": "public GroupMember(CuratorFramework client, String membershipPath, String thisId, byte[] payload){\n\t\tPreconditions.checkArgument(client != null, \"client cannot be null\");\n\tPreconditions.checkArgument(StringUtils.isNotEmpty(membershipPath), \"membershipPath cannot be empty\");\n\tPreconditions.checkArgument(StringUtils.isNotEmpty(thisId), \"thisId cannot be empty\");\n\tPreconditions.checkArgument(payload != null, \"payload cannot be null\");\n\tPreconditions.checkArgument(thisId.length() <= MAX_ID_LENGTH, \"thisId cannot be longer than %s characters\", MAX_ID_LENGTH);\n\tthis.client = client;\n\tthis.membershipPath = membershipPath;\n\tthis.thisId = thisId;\n\tthis.payload = payload;\n\tthis.cache = CuratorCache.builder(client, membershipPath).build();\n\tthis.cache.listenable().addListener(new GroupMemberCacheListener(this));\n\tthis.bridge = CuratorCacheBridge.makeBridge(cache, new GroupMemberCacheListener(this));\n\tthis.bridge.start();\n\tthis.memberPath = ZKPaths.makePath(membershipPath, thisId);\n\tthis.memberNode = new PersistentNode(client, CreateMode.EPHEMERAL, memberPath, payload);\n}", "CodeBleu_score": 44.43854031148303}, {"code": "public GroupMember(CuratorFramework client, String membershipPath, String thisId, byte[] payload){\n\t\tPreconditions.checkArgument(client != null, \"client cannot be null\");\n\tPreconditions.checkArgument(membershipPath != null, \"membershipPath cannot be null\");\n\tPreconditions.checkArgument(thisId != null, \"thisId cannot be null\");\n\tPreconditions.checkArgument(payload != null, \"payload cannot be null\");\n\tPreconditions.checkArgument(thisId.length() > 0, \"thisId cannot be empty\");\n\tPreconditions.checkArgument(payload.length > 0, \"payload cannot be empty\");\n\tif (thisId.contains(\"/\")) {\n\t\tthrow new IllegalArgumentException(\"thisId cannot contain a /\");\n\t}\n\tif (thisId.contains(\"\\\\\")) {\n\t\tthrow new IllegalArgumentException(\"thisId cannot contain a \\\\\");\n\t}\n\tif (payload.length > MAX_PAYLOAD_LENGTH) {\n\t\tthrow new IllegalArgumentException(\"payload cannot be longer than \" + MAX_PAYLOAD_LENGTH + \" bytes\");\n\t}\n\tthis.client = client;\n\tthis.membershipPath = membershipPath;\n\tthis.thisId = thisId;\n\tthis.payload = payload;\n\tthis.memberPath = ZKPaths.makePath(membershipPath, thisId);\n\tthis.bridge = new CuratorCacheBridge(client, memberPath);\n\tthis.cache = CuratorCache.builder(client, memberPath).withCacheData(true).build();\n\tthis.cache.listenable().addListener(new GroupMember.Listener(this));\n\tthis.bridge.start();\n\tthis.cache.start();\n\tthis.node = new PersistentNode(client, CreateMode.EPHEMERAL, memberPath, payload);\n}", "CodeBleu_score": 42.4221148126364}, {"code": "public GroupMember(CuratorFramework client, String membershipPath, String thisId, byte[] payload){\n\t\tPreconditions.checkArgument(client != null, \"client cannot be null\");\n\tPreconditions.checkArgument(membershipPath != null, \"membershipPath cannot be null\");\n\tPreconditions.checkArgument(thisId != null, \"thisId cannot be null\");\n\tPreconditions.checkArgument(payload != null, \"payload cannot be null\");\n\tPreconditions.checkArgument(ZKPaths.PATH_SEPARATOR.equals(thisId.charAt(0)), \"thisId must start with a /\");\n\tPreconditions.checkArgument(!thisId.endsWith(ZKPaths.PATH_SEPARATOR), \"thisId must not end with a /\");\n\tPreconditions.checkArgument(payload.length <= MAX_PAYLOAD_SIZE, \"payload cannot be larger than %s bytes\", MAX_PAYLOAD_SIZE);\n\tthis.client = client;\n\tthis.membershipPath = membershipPath;\n\tthis.thisId = thisId;\n\tthis.payload = payload;\n\tthis.cache = CuratorCache.build(client, membershipPath);\n\tthis.cache.listenable().addListener(new CuratorCacheListener() {\n\n\t\t@Override\n\t\tpublic void eventReceived(CuratorFramework client, CuratorCacheEvent event) throws Exception {\n\t\t\tif (event.getType() == CuratorCacheEvent.Type.INITIALIZED) {\n\t\t\t\tupdateCache();\n\t\t\t}\n\t\t}\n\t});\n\tthis.cache.start();\n\tthis.bridge = CuratorCacheBridge.build(cache);\n\tthis.bridge.start();\n\tthis.memberNode = new PersistentNode(client, CreateMode.EPHEMERAL, true, ZKPaths.makePath(membershipPath, thisId), payload);\n\tthis.memberNode.start();\n}", "CodeBleu_score": 43.53252809509346}]}
{"instance_id": "d11c76b2b912", "generation_result": [{"code": "public static void createThenWatch(CuratorFramework client, String path) {\n\t\ttry {\n\t\tCompletionStage<String> stage = AsyncCuratorFramework.wrap(client).create().forPath(path);\n\t\tstage.whenComplete((s, e) -> {\n\t\t\tif ( e != null ) {\n\t\t\t\te.printStackTrace();\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"Created node: \" + s);\n\t\t\t\tAsyncCuratorFramework.wrap(client).watched().watch(path, WatchMode.POST_PERSISTED, (watchedEvent, eventPath) -> {\n\t\t\t\t\tSystem.out.println(\"Watch fired for path: \" + eventPath);\n\t\t\t\t\tSystem.out.println(\"Type: \" + watchedEvent.getType());\n\t\t\t\t\tSystem.out.println(\"State: \" + watchedEvent.getState());\n\t\t\t\t\tSystem.out.println(\"Path: \" + watchedEvent.getPath());\n\t\t\t\t\tSystem.out.println(\"Context: \" + watchedEvent.getContext());\n\t\t\t\t\tSystem.out.println(\"Auth failed? \" + watchedEvent.getAuthFailed());\n\t\t\t\t\tSystem.out.println(\"Session ID: \" + watchedEvent.getSessionId());\n\t\t\t\t\tSystem.out.println(\"Session state: \" + watchedEvent.getSessionState());\n\t\t\t\t\tSystem.out.println(\"Stat: \" + watchedEvent.getStat());\n\t\t\t\t}).whenComplete((w, ex) -> {\n\t\t\t\t\tif ( ex != null ) {\n\t\t\t\t\t\tif ( ex instanceof AsyncEventException ) {\n\t\t\t\t\t\t\tAsyncEventException aee = (AsyncEventException)ex;\n\t\t\t\t\t\t\tSystem.out.println(\"AsyncEventException: \" + aee.getEventType());\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tex.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tSystem.out.println(\"Watching path: \" + w.getPath());\n\t\t\t\t\t\tSystem.out.println(\"Watching mode: \" + w.getMode());\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t} catch ( Exception e ) {\n\t\te.printStackTrace();\n\t}\n}", "CodeBleu_score": 40.45990707957243}, {"code": "public static void createThenWatch(CuratorFramework client, String path) {\n\t\ttry {\n\t\tSystem.out.println(\"Creating node: \" + path);\n\t\tclient.create().forPath(path, \"data\".getBytes());\n\t\tSystem.out.println(\"Watching node: \" + path);\n\t\tclient.watch().watched().forPath(path);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}", "CodeBleu_score": 32.76969664161013}, {"code": "public static void createThenWatch(CuratorFramework client, String path) {\n\t\ttry {\n\t\tAsyncCuratorFramework asyncClient = AsyncCuratorFramework.wrap(client);\n\t\tCompletionStage<String> stage = asyncClient.create().forPath(path, \"some data\".getBytes());\n\t\tstage.whenComplete((s, e) -> {\n\t\t\tif (e != null) {\n\t\t\t\tSystem.out.println(\"Error creating path: \" + path);\n\t\t\t\te.printStackTrace();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tSystem.out.println(\"Path created: \" + path);\n\t\t\ttry {\n\t\t\t\tasyncClient.watched().watch().inBackground().forPath(path).whenComplete((s1, e1) -> {\n\t\t\t\t\tif (e1 != null) {\n\t\t\t\t\t\tSystem.out.println(\"Error watching path: \" + path);\n\t\t\t\t\t\te1.printStackTrace();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println(\"Path changed: \" + path);\n\t\t\t\t}).join();\n\t\t\t} catch (AsyncEventException e2) {\n\t\t\t\tSystem.out.println(\"Error watching path: \" + path);\n\t\t\t\te2.printStackTrace();\n\t\t\t}\n\t\t}).join();\n\t} catch (Exception e) {\n\t\tSystem.out.println(\"Error creating path: \" + path);\n\t\te.printStackTrace();\n\t}\n}", "CodeBleu_score": 43.46832510309597}]}
{"instance_id": "4571de52ad5d", "generation_result": [{"code": "private List<OpResult> doOperation() throws Exception{\n\t\tif ( this.checkACLs ) {\n\t\tPreconditions.checkState(this.transaction instanceof TransactionWithACL, \"checkACLs only applies to TransactionWithACL\");\n\t}\n\tList<OpResult>        results;\n\tint                   rc;\n\ttry {\n\t\tresults = this.transaction.commit();\n\t} catch ( KeeperException.NoNodeException e ) {\n\t\tresults = e.getResults();\n\t}\n\trc = results.get(0).getRc();\n\tif ( rc != KeeperException.Code.OK.intValue() ) {\n\t\tif ( rc == KeeperException.Code.NONODE.intValue() ) {\n\t\t\tthrow new KeeperException.NoNodeException(results.get(0).getPath());\n\t\t} else if ( rc == KeeperException.Code.BADVERSION.intValue() ) {\n\t\t\tthrow new KeeperException.BadVersionException(results.get(0).getPath());\n\t\t} else if ( rc == KeeperException.Code.NONODE.intValue() ) {\n\t\t\tthrow new KeeperException.NoNodeException(results.get(0).getPath());\n\t\t} else if ( rc == KeeperException.Code.NODEEXISTS.intValue() ) {\n\t\t\tthrow new KeeperException.NodeExistsException(results.get(0).getPath());\n\t\t} else if ( rc == KeeperException.Code.NOTEMPTY.intValue() ) {\n\t\t\tthrow new KeeperException.NotEmptyException(results.get(0).getPath());\n\t\t} else if ( rc == KeeperException.Code.SESSIONEXPIRED.intValue() ) {\n\t\t\tthrow new KeeperException.SessionExpiredException();\n\t\t} else if ( rc == KeeperException.Code.INVALIDCALLBACK.intValue() ) {\n\t\t\tthrow new KeeperException.InvalidCallbackException();\n\t\t} else if ( rc == KeeperException.Code.INVALIDACL.intValue() ) {\n\t\t\tthrow new KeeperException.InvalidACLException();\n\t\t} else if ( rc == KeeperException.Code.AUTHFAILED.intValue() ) {\n\t\t\tthrow new KeeperException.AuthFailedException();\n\t\t} else if ( rc == KeeperException.Code.NOTREADONLY.intValue() ) {\n\t\t\tthrow new KeeperException.NotReadOnlyException();\n\t\t} else {\n\t\t\tthrow new KeeperException(KeeperException.create", "CodeBleu_score": 28.11920861037922}, {"code": "private List<OpResult> doOperation() throws Exception{\n\t\tList<OpResult>        results = null;\n\tTransactionOp        op      = null;\n\tTransaction          txn     = null;\n\tList<TransactionOp>  ops     = new ArrayList<TransactionOp>(operations.size());\n\tTransactionResponse  txnResp = null;\n\tint                  i       = 0;\n\n\tfor (OperationAndData opAndData : operations) {\n\t\tops.add(opAndData.getOperation());\n\t\tif (opAndData.getData() != null) {\n\t\t\tops.add(opAndData.getData());\n\t\t}\n\t}\n\n\ttry {\n\t\ttxn = client.transaction();\n\t\ttxn.add(ops);\n\t\ttxnResp = txn.commit();\n\t\tresults = txnResp.getResults();\n\n\t\tfor (OpResult result : results) {\n\t\t\tif (result.getType() == OpCode.error) {\n\t\t\t\tErrorResult err = (ErrorResult) result;\n\t\t\t\tthrow KeeperException.create(err.getErr());\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\tif (txn != null) {\n\t\t\ttxn.abort();\n\t\t}\n\t\tthrow e;\n\t}\n\n\treturn results;\n}", "CodeBleu_score": 35.028622951835615}, {"code": "private List<OpResult> doOperation() throws Exception{\n\t\tPreconditions.checkState(this.checkExecuted(), \"Transaction has already been executed\");\n\tPreconditions.checkState(this.check(), \"Transaction is not ready to be executed\");\n\n\tthis.results = this.client.getZookeeperClient().getZooKeeper().multi(this.transaction);\n\tif (this.results.size() > 0) {\n\t\tOpResult result = this.results.get(0);\n\t\tif (result.getType() == OpCode.error) {\n\t\t\tint errorCode = KeeperException.Code.get(((ErrorResult) result).getErr());\n\t\t\tString message = KeeperException.create(errorCode).getMessage();\n\t\t\tif (errorCode == KeeperException.Code.NONODE.intValue()) {\n\t\t\t\tmessage = message + \" \" + this.path;\n\t\t\t}\n\n\t\t\tthrow new KeeperException(errorCode, message);\n\t\t}\n\t}\n\n\treturn this.results;\n}", "CodeBleu_score": 41.893001608634364}]}
{"instance_id": "99263700ce6d", "generation_result": [{"code": "private static void listInstances(ServiceDiscovery<InstanceDetails> serviceDiscovery) throws Exception{\n\t\tCollection<String> services = serviceDiscovery.queryForNames();\n\tif (services.isEmpty()) {\n\t\tSystem.out.println(\"No services registered\");\n\t} else {\n\t\tfor (String service : services) {\n\t\t\tCollection<ServiceInstance<InstanceDetails>> instances = serviceDiscovery.queryForInstances(service);\n\t\t\tif (instances.isEmpty()) {\n\t\t\t\tSystem.out.println(\"No instances found for service: \" + service);\n\t\t\t} else {\n\t\t\t\tfor (ServiceInstance<InstanceDetails> instance : instances) {\n\t\t\t\t\tSystem.out.println(service + \"->\" + instance.getPayload().getPayload());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 47.46887001685076}, {"code": "private static void listInstances(ServiceDiscovery<InstanceDetails> serviceDiscovery) throws Exception{\n\t\tSystem.out.println(\"Available services:\");\n\tfor (String serviceName : serviceDiscovery.queryForNames()) {\n\t\tSystem.out.println(\"  \" + serviceName);\n\t\tfor (ServiceInstance<InstanceDetails> instance : serviceDiscovery.queryForInstances(serviceName)) {\n\t\t\tSystem.out.println(\"    \" + instance.getId() + \" => \" + instance.getAddress() + \":\" + instance.getPort());\n\t\t}\n\t}\n}", "CodeBleu_score": 33.257770856189005}, {"code": "private static void listInstances(ServiceDiscovery<InstanceDetails> serviceDiscovery) throws Exception{\n\t\tSystem.out.println(\"List instances\");\n\tSystem.out.println(\"===============\");\n\tfor (String serviceName : serviceDiscovery.queryForNames()) {\n\t\tSystem.out.println(\"Service Name: \" + serviceName);\n\t\tfor (ServiceInstance<InstanceDetails> instance : serviceDiscovery.queryForInstances(serviceName)) {\n\t\t\tSystem.out.println(\"Instance: \" + instance.getId());\n\t\t}\n\t}\n\tSystem.out.println();\n}", "CodeBleu_score": 32.37515665348331}]}
{"instance_id": "891a390fa04d", "generation_result": [{"code": "private List<String> filterAndSortChildren(List<String> children){\n\t\tPreconditions.checkNotNull(children, \"children cannot be null\");\n\tList<String> filtered = Lists.newArrayList(Iterables.filter(children, new Predicate<String>() {\n\t\t@Override\n\t\tpublic boolean apply(String input) {\n\t\t\treturn !input.equals(READY_NODE);\n\t\t}\n\t}));\n\tCollections.sort(filtered);\n\treturn filtered;\n}", "CodeBleu_score": 62.920775497344906}, {"code": "private List<String> filterAndSortChildren(List<String> children){\n\t\treturn Lists.newArrayList(Iterables.filter(children, new Predicate<String>() {\n\t\t@Override\n\t\tpublic boolean apply(String input) {\n\t\t\treturn !input.equals(READY_NODE);\n\t\t}\n\t})).toArray(new String[0]);\n}", "CodeBleu_score": 37.70313492056129}, {"code": "private List<String> filterAndSortChildren(List<String> children){\n\t\treturn Lists.newArrayList(Iterables.filter(children, new Predicate<String>() {\n\t\t@Override\n\t\tpublic boolean apply(String child) {\n\t\t\treturn !child.equals(READY_NODE);\n\t\t}\n\t})).toArray(new String[children.size()]);\n}", "CodeBleu_score": 38.297174098663874}]}
{"instance_id": "f25af95a13b6", "generation_result": [{"code": "protected void connectToZK(String newHost) throws InterruptedException, IOException{\n\t\tif (zk != null) {\n\t\tzk.close();\n\t\tzk = null;\n\t}\n\tif (newHost != null) {\n\t\tzk = new ZooKeeper(newHost, 3000, this);\n\t\tLOGGER.info(\"Connected to ZooKeeper at \" + newHost);\n\t}\n}", "CodeBleu_score": 25.376853051411896}, {"code": "protected void connectToZK(String newHost) throws InterruptedException, IOException{\n\t\t// Close the existing connection, if any\n\tif (zk != null) {\n\t\tzk.close();\n\t}\n\n\t// Connect to the new host\n\tzk = new ZooKeeper(newHost, sessionTimeout, new Watcher() {\n\t\tpublic void process(WatchedEvent event) {\n\t\t\t// We don't need to do anything here\n\t\t}\n\t});\n\n\t// Wait for the connection to be established\n\twhile (zk.getState() != ZooKeeper.States.CONNECTED) {\n\t\tThread.sleep(1000);\n\t}\n\n\t// If we are in read-only mode, disable write access\n\tif (readOnly) {\n\t\tzk.addAuthInfo(\"digest\", \"admin:admin\".getBytes(StandardCharsets.UTF_8));\n\t\tzk.setACL(ZooDefs.CONFIG_NODE, Collections.singletonList(new ACL(ZooDefs.Perms.ALL, Ids.ANYONE_ID_UNSAFE)), -1);\n\t}\n}", "CodeBleu_score": 33.69637534336117}, {"code": "protected void connectToZK(String newHost) throws InterruptedException, IOException{\n\t\tif (zk != null) {\n\t\tzk.close();\n\t}\n\tzk = new ZooKeeper(newHost, 3000, this);\n\tif (readonly) {\n\t\tzk.addAuthInfo(\"digest\", (\"cc:cc1234:\" + readonlyUser + \":\" + readonlyPassword).getBytes(StandardCharsets.UTF_8));\n\t}\n\tzk.sync(\"/cc\", null, null);\n}", "CodeBleu_score": 29.100726294022632}]}
{"instance_id": "269eaac5cec6", "generation_result": [{"code": "private List<ACL> parseACLs(String aclString) throws IOException{\n\t\tList<ACL> aclList = new ArrayList<ACL>();\n\tString[] aclStrings = aclString.split(\",\");\n\tfor (String acl : aclStrings) {\n\t\tString[] parts = acl.split(\":\");\n\t\tif (parts.length != 3) {\n\t\t\tlogger.error(\"Invalid ACL: \" + acl);\n\t\t\tthrow new IOException(\"Invalid ACL: \" + acl);\n\t\t}\n\t\tint perms = -1;\n\t\ttry {\n\t\t\tperms = Integer.parseInt(parts[2]);\n\t\t} catch (NumberFormatException e) {\n\t\t\tlogger.error(\"Invalid ACL: \" + acl);\n\t\t\tthrow new IOException(\"Invalid ACL: \" + acl);\n\t\t}\n\t\tACL newAcl = new ACL();\n\t\tnewAcl.setPerms(perms);\n\t\tId id = new Id(parts[0], parts[1]);\n\t\tnewAcl.setId(id);\n\t\taclList.add(newAcl);\n\t}\n\treturn aclList;\n}", "CodeBleu_score": 31.811646046109267}, {"code": "private List<ACL> parseACLs(String aclString) throws IOException{\n\t\tList<ACL> acls = new ArrayList<>();\n\tString[] aclStrings = aclString.split(\",\");\n\tfor (String aclString : aclStrings) {\n\t\tString[] parts = aclString.split(\":\");\n\t\tif (parts.length == 3) {\n\t\t\tint scheme = -1;\n\t\t\ttry {\n\t\t\t\tscheme = Integer.parseInt(parts[0]);\n\t\t\t} catch (NumberFormatException e) {\n\t\t\t\tlog.error(\"Error parsing scheme in ACL string: \" + aclString);\n\t\t\t\tthrow new IOException(\"Error parsing scheme in ACL string: \" + aclString);\n\t\t\t}\n\t\t\tString id = parts[1];\n\t\t\tint perms = -1;\n\t\t\ttry {\n\t\t\t\tperms = Integer.parseInt(parts[2]);\n\t\t\t} catch (NumberFormatException e) {\n\t\t\t\tlog.error(\"Error parsing permissions in ACL string: \" + aclString);\n\t\t\t\tthrow new IOException(\"Error parsing permissions in ACL string: \" + aclString);\n\t\t\t}\n\t\t\tif (scheme == ACL.WORLD_ACL_SCHEME) {\n\t\t\t\tacls.add(new ACL(perms, Ids.ANYONE_ID_UNSAFE));\n\t\t\t} else if (scheme == ACL.AUTH_IDS_ACL_SCHEME) {\n\t\t\t\tacls.add(new ACL(perms, new Id(\"auth\", id)));\n\t\t\t} else if (scheme == ACL.AUTH_IDS_ACL_SCHEME) {\n\t\t\t\tacls.add(new ACL(perms, new Id(\"auth\", id)));\n\t\t\t} else {\n\t\t\t\tlog.error(\"Error parsing ACL string: \" + aclString);\n\t\t\t\tthrow new IOException(\"Error parsing ACL string: \" + aclString);\n\t\t\t}\n\t\t} else {\n\t\t\tlog.error(\"Error parsing ACL string: \" + aclString);\n\t\t\tthrow new IOException(\"Error parsing ACL string: \" + aclString);\n\t\t}\n\t}\n\treturn acls;\n}", "CodeBleu_score": 23.512614918938667}, {"code": "private List<ACL> parseACLs(String aclString) throws IOException{\n\t\tList<ACL> acls = new ArrayList<ACL>();\n\tString[] aclStrings = aclString.split(\",\");\n\tfor (String aclString : aclStrings) {\n\t\tString[] schemeAndId = aclString.split(\":\");\n\t\tif (schemeAndId.length != 2) {\n\t\t\tlogger.error(\"Invalid ACL format: \" + aclString);\n\t\t\tthrow new IOException(\"Invalid ACL format: \" + aclString);\n\t\t}\n\t\tString scheme = schemeAndId[0];\n\t\tString id = schemeAndId[1];\n\t\tint perms = -1;\n\t\tif (scheme.equals(\"world\")) {\n\t\t\tif (id.equals(\"anyone\")) {\n\t\t\t\tperms = ZooDefs.Perms.ALL;\n\t\t\t} else {\n\t\t\t\tlogger.error(\"Invalid ACL format: \" + aclString);\n\t\t\t\tthrow new IOException(\"Invalid ACL format: \" + aclString);\n\t\t\t}\n\t\t} else if (scheme.equals(\"auth\")) {\n\t\t\tif (id.equals(\"digest\")) {\n\t\t\t\tperms = ZooDefs.Perms.READ;\n\t\t\t} else {\n\t\t\t\tlogger.error(\"Invalid ACL format: \" + aclString);\n\t\t\t\tthrow new IOException(\"Invalid ACL format: \" + aclString);\n\t\t\t}\n\t\t} else if (scheme.equals(\"digest\")) {\n\t\t\tString[] digestParts = id.split(\":\");\n\t\t\tif (digestParts.length != 2) {\n\t\t\t\tlogger.error(\"Invalid ACL format: \" + aclString);\n\t\t\t\tthrow new IOException(\"Invalid ACL format: \" + aclString);\n\t\t\t}\n\t\t\tperms = ZooDefs.Perms.NONE;\n\t\t\tif (digestParts[1].contains(\"r\")) {\n\t\t\t\tperms = perms | ZooDefs.Perms.READ;\n\t\t\t}\n\t\t\tif (digestParts[1].contains(\"w\")) {\n\t\t\t\tperms = perms | ZooDefs.Perms.WRITE;\n\t\t\t}\n\t\t\tif (digestParts[1].contains(\"c\")) {\n\t\t\t\tperms = perms | ZooDefs.Perms.CREATE;\n\t\t\t}\n\t\t\tif (digestParts[1].contains(\"d\")) {\n\t\t\t\tperms = perms | ZooDefs.Perms.DELETE;\n\t\t\t}\n\t\t\tif (digestParts[1].contains(\"a\")) {\n\t\t\t\tperms = perms | ZooDefs", "CodeBleu_score": 23.401614816350605}]}
{"instance_id": "c25db637a176", "generation_result": [{"code": "public void delete(String serverId, List<String> pathList) throws Exception{\n\t\tif (pathList == null) {\n\t\tthrow new IllegalArgumentException(\"pathList cannot be null\");\n\t}\n\tif (pathList.size() < 20) {\n\t\tdeleteSynchronous(serverId, pathList);\n\t} else {\n\t\tdeleteAsynchronous(serverId, pathList);\n\t}\n}", "CodeBleu_score": 35.37414273468116}, {"code": "public void delete(String serverId, List<String> pathList) throws Exception{\n\t\tif (pathList == null) {\n\t\tthrow new IllegalArgumentException(\"pathList must not be null\");\n\t}\n\tif (pathList.size() < 20) {\n\t\tdeleteSynchronously(serverId, pathList);\n\t} else {\n\t\tdeleteAsynchronously(serverId, pathList);\n\t}\n}", "CodeBleu_score": 35.397484901143564}, {"code": "public void delete(String serverId, List<String> pathList) throws Exception{\n\t\tif (pathList == null) {\n\t\tthrow new IllegalArgumentException(\"pathList cannot be null\");\n\t}\n\tif (pathList.size() < 20) {\n\t\tdeleteSync(serverId, pathList);\n\t} else {\n\t\tdeleteAsync(serverId, pathList);\n\t}\n}", "CodeBleu_score": 35.06034795101518}]}
{"instance_id": "3ecb1ce78f90", "generation_result": [{"code": "public Terminal createTerminal(String id, String url, StringWriter writer) throws Exception{\n\t\t// create a connection using CuratorZookeeperConnectionFactory\n\tCuratorZookeeperConnectionFactory connectionFactory = new CuratorZookeeperConnectionFactory();\n\tZookeeperParams params = new ZookeeperParams();\n\tparams.setConnectString(url);\n\tparams.setSessionTimeoutMs(10000);\n\tZookeeper zookeeper = connectionFactory.create(params);\n\t// write a connecting message to the provided StringWriter\n\twriter.write(\"Connecting to Zookeeper at \" + url + \"...\");\n\t// create a ZooKeeperMain instance\n\tZooKeeperMain main = new ZooKeeperMain(zookeeper);\n\t// return a new Terminal instance\n\treturn new Terminal(id, url, connectionFactory, main);\n}", "CodeBleu_score": 37.42951891624138}, {"code": "public Terminal createTerminal(String id, String url, StringWriter writer) throws Exception{\n\t\tZookeeperParams params = new ZookeeperParams(id, url);\n\tZookeeper zookeeper = CuratorZookeeperConnectionFactory.getInstance(params).getZookeeper();\n\tif (zookeeper == null) {\n\t\twriter.write(\"Failed to connect to Zookeeper\");\n\t\treturn null;\n\t}\n\twriter.write(\"Successfully connected to Zookeeper\");\n\tZooKeeperMain main = new ZooKeeperMain(zookeeper);\n\treturn new Terminal(id, url, zookeeper, main);\n}", "CodeBleu_score": 34.31825476682501}, {"code": "public Terminal createTerminal(String id, String url, StringWriter writer) throws Exception{\n\t\tTerminal terminal = new Terminal();\n\tterminal.setId(id);\n\tterminal.setUrl(url);\n\tterminal.setWriter(writer);\n\tterminal.setZookeeper(createZookeeper(id, url, writer));\n\tterminal.setServerListener(createServerListener(terminal));\n\tterminal.setZookeeperNodeListener(createZookeeperNodeListener(terminal));\n\treturn terminal;\n}", "CodeBleu_score": 19.6210909330373}]}
{"instance_id": "a3606e777eb5", "generation_result": [{"code": "public void blockUntilConnected(){\n\t\tint retries = 0;\n\twhile (true) {\n\t\ttry {\n\t\t\tretries++;\n\t\t\tlog.info(\"Attempting to connect to {}:{}\", tunnelHost, tunnelPort);\n\t\t\tsshClient.connect(tunnelHost, tunnelPort);\n\t\t\tlog.info(\"Connection established\");\n\t\t\treturn;\n\t\t} catch (IOException e) {\n\t\t\tlog.warn(\"Connection attempt {} failed\", retries, e);\n\t\t\tsshClient.close();\n\t\t}\n\t\ttry {\n\t\t\tThread.sleep(1000);\n\t\t} catch (InterruptedException e) {\n\t\t\tThread.currentThread().interrupt();\n\t\t\tthrow new IllegalStateException(\"Interrupted while waiting for connection to be established\", e);\n\t\t}\n\t}\n}", "CodeBleu_score": 30.713045113830706}, {"code": "public void blockUntilConnected(){\n\t\tint attempts = 0;\n\twhile (attempts < 6) {\n\t\ttry {\n\t\t\tlog.info(\"Attempting to connect to SSH tunnel at \" + tunnelAddress);\n\t\t\tsshClient.connect(tunnelAddress, sshConfig.getConnectTimeout(), sshConfig.getConnectTimeout());\n\t\t\tlog.info(\"Successfully connected to SSH tunnel at \" + tunnelAddress);\n\t\t\tbreak;\n\t\t} catch (IOException e) {\n\t\t\tlog.error(\"Failed to connect to SSH tunnel at \" + tunnelAddress, e);\n\t\t\tattempts++;\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000);\n\t\t\t} catch (InterruptedException e1) {\n\t\t\t\tlog.error(\"Interrupted while waiting to retry connection to SSH tunnel at \" + tunnelAddress, e1);\n\t\t\t\tThread.currentThread().interrupt();\n\t\t\t}\n\t\t}\n\t}\n\tif (attempts == 6) {\n\t\tlog.error(\"Failed to connect to SSH tunnel at \" + tunnelAddress + \" after 6 attempts\");\n\t\tsshClient.close();\n\t\tthrow new IllegalStateException(\"Failed to connect to SSH tunnel at \" + tunnelAddress);\n\t}\n}", "CodeBleu_score": 33.857865904071275}, {"code": "public void blockUntilConnected(){\n\t\tint retries = 0;\n\twhile (!connected) {\n\t\ttry {\n\t\t\tif (retries > 0) {\n\t\t\t\tlog.info(\"Retrying tunnel connection (attempt \" + retries + \")\");\n\t\t\t}\n\t\t\tconnect();\n\t\t\tconnected = true;\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"Error connecting to tunnel\", e);\n\t\t\tclose();\n\t\t\tif (retries == 6) {\n\t\t\t\tthrow new IllegalStateException(\"Failed to connect to tunnel after 6 attempts\", e);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000);\n\t\t\t} catch (InterruptedException e1) {\n\t\t\t\tThread.currentThread().interrupt();\n\t\t\t\tthrow new IllegalStateException(\"Interrupted while waiting to retry tunnel connection\", e1);\n\t\t\t}\n\t\t}\n\t\tretries++;\n\t}\n}", "CodeBleu_score": 40.21286056090814}]}
{"instance_id": "a4e5b886b72b", "generation_result": [{"code": "public void deleteNode(String serverId, List<String> pathList){\n\t\tfinal var zookeeperDomainService = ZookeeperDomainService.getInstance();\n\tfinal var server = getServerById(serverId);\n\tfinal var connectionConfiguration = getConnectionConfiguration(server);\n\tzookeeperDomainService.deleteNode(connectionConfiguration, pathList)\n\t\t\t.onFailure(e -> {\n\t\t\t\tLOGGER.error(\"delete node failed\", e);\n\t\t\t\tthrow new IllegalStateException(\"delete node failed\");\n\t\t\t})\n\t\t\t.onSuccess(v -> LOGGER.info(\"delete node success\"));\n}", "CodeBleu_score": 42.06371184070659}, {"code": "public void deleteNode(String serverId, List<String> pathList){\n\t\tfinal var server = servers.get(serverId);\n\tAsserts.checkNull(server, \"server is null\");\n\tAsserts.checkNull(pathList, \"pathList is null\");\n\tAsserts.checkArgument(pathList.size() > 0, \"pathList is empty\");\n\tAsserts.checkArgument(pathList.stream().allMatch(Objects::nonNull), \"pathList contains null\");\n\tAsserts.checkArgument(pathList.stream().allMatch(path -> path.length() > 0), \"pathList contains empty path\");\n\tAsserts.checkArgument(pathList.stream().allMatch(path -> path.split(\"/\").length > 1), \"pathList contains root path\");\n\tAsserts.checkArgument(pathList.stream().allMatch(path -> path.split(\"/\").length % 2 == 0), \"pathList contains invalid path\");\n\tAsserts.checkArgument(pathList.stream().allMatch(path -> path.split(\"/\").length <= 10), \"pathList contains too long path\");\n\n\tfinal var pathListWithoutRoot = pathList.stream()\n\t\t\t.map(path -> path.substring(1))\n\t\t\t.collect(Collectors.toList());\n\n\tfinal var zkDomainService = server.getZkDomainService();\n\tAsserts.checkNull(zkDomainService, \"zkDomainService is null\");\n\n\ttry {\n\t\tzkDomainService.deleteNodes(pathListWithoutRoot);\n\t} catch (Exception e) {\n\t\tlog.error(\"failed to delete nodes {}\", pathList, e);\n\t\tthrow new IllegalStateException(\"failed to delete nodes \" + pathList);\n\t}\n}", "CodeBleu_score": 35.051336269628194}, {"code": "public void deleteNode(String serverId, List<String> pathList){\n\t\tAsserts.requireNonEmpty(serverId, \"serverId is empty\");\n\tAsserts.requireNonEmpty(pathList, \"pathList is empty\");\n\tZookeeperDomainService zookeeperDomainService = ZookeeperDomainService.getInstance();\n\tfor (String path : pathList) {\n\t\ttry {\n\t\t\tzookeeperDomainService.deleteNode(serverId, path);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"delete node error\", e);\n\t\t\tthrow new IllegalStateException(e);\n\t\t}\n\t}\n}", "CodeBleu_score": 64.4021988394629}]}
{"instance_id": "4fdbc9ec2e75", "generation_result": [{"code": "public void disconnect(String id){\n\t\tAsserts.checkNull(id, \"id is null\");\n\tfinal StringWriter writer = new StringWriter();\n\tfinal StringWriter errorWriter = new StringWriter();\n\tfinal StringWriter errorWriter2 = new StringWriter();\n\tfinal StringWriter errorWriter3 = new StringWriter();\n\tfinal StringWriter errorWriter4 = new StringWriter();\n\tfinal StringWriter errorWriter5 = new StringWriter();\n\tfinal StringWriter errorWriter6 = new StringWriter();\n\tfinal StringWriter errorWriter7 = new StringWriter();\n\tfinal StringWriter errorWriter8 = new StringWriter();\n\tfinal StringWriter errorWriter9 = new StringWriter();\n\tfinal StringWriter errorWriter10 = new StringWriter();\n\tfinal StringWriter errorWriter11 = new StringWriter();\n\tfinal StringWriter errorWriter12 = new StringWriter();\n\tfinal StringWriter errorWriter13 = new StringWriter();\n\tfinal StringWriter errorWriter14 = new StringWriter();\n\tfinal StringWriter errorWriter15 = new StringWriter();\n\tfinal StringWriter errorWriter16 = new StringWriter();\n\tfinal StringWriter errorWriter17 = new StringWriter();\n\tfinal StringWriter errorWriter18 = new StringWriter();\n\tfinal StringWriter errorWriter19 = new StringWriter();\n\tfinal StringWriter errorWriter20 = new StringWriter();\n\tfinal StringWriter errorWriter21 = new StringWriter();\n\tfinal StringWriter errorWriter22 = new StringWriter();\n\tfinal StringWriter errorWriter23 = new StringWriter();\n\tfinal StringWriter errorWriter24 = new StringWriter();\n\tfinal StringWriter errorWriter25 = new StringWriter();\n\tfinal StringWriter errorWriter26 = new StringWriter();\n\tfinal StringWriter errorWriter27 = new StringWriter();\n\tfinal StringWriter errorWriter28 = new StringWriter();\n\tfinal StringWriter errorWriter29 = new StringWriter();\n\tfinal StringWriter errorWriter30 = new StringWriter();\n\tfinal StringWriter errorWriter31 = new StringWriter();\n\tfinal StringWriter errorWriter32 = new StringWriter();\n\tfinal StringWriter errorWriter33 = new StringWriter();\n\tfinal StringWriter errorWriter34 = new StringWriter();\n\tfinal StringWriter errorWriter35 = new StringWriter();\n\tfinal StringWriter errorWriter", "CodeBleu_score": 10.929805202539425}, {"code": "public void disconnect(String id){\n\t\tif (id == null) {\n\t\treturn;\n\t}\n\tfinal String finalId = id;\n\tfinal VBox vbox = new VBox();\n\tfinal TextFlow textFlow = new TextFlow();\n\tfinal Text text = new Text();\n\ttext.setText(ResourceBundleUtils.getString(\"server.disconnecting\"));\n\ttextFlow.getChildren().add(text);\n\tvbox.getChildren().add(textFlow);\n\tfinal Scene scene = new Scene(vbox, 300, 200);\n\tfinal Stage stage = new Stage();\n\tstage.setScene(scene);\n\tstage.show();\n\tPlatform.runLater(() -> {\n\t\tfinal Configuration configuration = configurationDomainService.get(finalId);\n\t\tif (configuration == null) {\n\t\t\tlogger.error(\"configuration is null, id: {}\", finalId);\n\t\t\tVToast.error(stage, ResourceBundleUtils.getString(\"server.disconnect.error\"));\n\t\t\treturn;\n\t\t}\n\t\tfinal ConnectionConfiguration connectionConfiguration = configuration.getConnectionConfiguration();\n\t\tif (connectionConfiguration == null) {\n\t\t\tlogger.error(\"connectionConfiguration is null, id: {}\", finalId);\n\t\t\tVToast.error(stage, ResourceBundleUtils.getString(\"server.disconnect.error\"));\n\t\t\treturn;\n\t\t}\n\t\tfinal String serverId = connectionConfiguration.getId();\n\t\tif (serverId == null) {\n\t\t\tlogger.error(\"serverId is null, id: {}\", finalId);\n\t\t\tVToast.error(stage, ResourceBundleUtils.getString(\"server.disconnect.error\"));\n\t\t\treturn;\n\t\t}\n\t\tfinal String zkHost = connectionConfiguration.getZkHost();\n\t\tif (zkHost == null) {\n\t\t\tlogger.error(\"zkHost is null, id: {}\", finalId);\n\t\t\tVToast.error(stage, ResourceBundleUtils.getString(\"server.disconnect.error\"));\n\t\t\treturn;\n\t\t}\n\t\tfinal String zkPort = connectionConfiguration.getZkPort();\n\t\tif (zkPort == null) {\n\t\t\tlogger.error(\"zkPort is null, id: {}\", finalId);\n\t\t\tVToast.error(stage, ResourceBundleUtils.getString(\"server.disconnect.error\"));\n\t\t\treturn;\n\t\t}\n\t\tfinal String zkPath = connectionConfiguration.getZkPath();\n\t\tif (zkPath", "CodeBleu_score": 30.54973021716272}, {"code": "public void disconnect(String id){\n\t\tAsserts.checkNull(id, \"id\");\n\tfinal var server = treeItemCache.getServerById(id);\n\tif (server == null) {\n\t\tVToast.error(\"Server not found\");\n\t\treturn;\n\t}\n\tfinal var serverVO = server.getValue();\n\tfinal var serverConfigVO = serverVO.getConfiguration();\n\tfinal var serverConfig = serverConfigVO.getConfiguration();\n\tfinal var serverId = serverConfig.getId();\n\tfinal var serverName = serverConfig.getName();\n\tfinal var serverMode = serverConfig.getNodeMode();\n\tfinal var serverModeText = NodeMode.getNodeModeText(serverMode);\n\tfinal var serverAddress = serverConfig.getAddress();\n\tfinal var serverPort = serverConfig.getPort();\n\tfinal var serverAddressAndPort = serverAddress + \":\" + serverPort;\n\tfinal var serverZookeeperAddress = serverConfig.getZookeeperAddress();\n\tfinal var serverZookeeperPort = serverConfig.getZookeeperPort();\n\tfinal var serverZookeeperAddressAndPort = serverZookeeperAddress + \":\" + serverZookeeperPort;\n\tfinal var serverZookeeperPath = serverConfig.getZookeeperPath();\n\tfinal var serverZookeeperPathText = serverZookeeperPath == null ? \"null\" : serverZookeeperPath;\n\tfinal var serverSshTunnel = serverConfig.getSshTunnel();\n\tfinal var serverSshTunnelText = serverSshTunnel == null ? \"null\" : serverSshTunnel.toString();\n\tfinal var serverSshTunnelPort = serverSshTunnel == null ? \"null\" : serverSshTunnel.getPort();\n\tfinal var serverSshTunnelAddress = serverSshTunnel == null ? \"null\" : serverSshTunnel.getAddress();\n\tfinal var serverSshTunnelAddressAndPort = serverSshTunnel == null ? \"null\" : serverSshTunnel.getAddress() + \":\" + serverSshTunnel.getPort();\n\tfinal var serverSshTunnelEnabled = serverConfig.isSshTunnelEnabled();\n\tfinal var serverSshTunnelEnabledText = serverSshTunnelEnabled ? \"true\" : \"false\";\n\tfinal var serverSshTunnelPassword = serverConfig.getSshTunnelPassword();\n\tfinal var serverSshTunnelPasswordText = serverSshTunnelPassword == null ? \"null\" : \"******\";\n\tfinal var serverSshTunnelPrivateKeyPath = serverConfig.getSshTunnelPrivateKeyPath();\n\tfinal", "CodeBleu_score": 29.686332685379618}]}
{"instance_id": "6bf0d7ac9390", "generation_result": [{"code": "public void startTerminal(String serverId, StringWriter stream){\n\t\ttry {\n\t\tfinal ServerConfiguration serverConfiguration = configurationDomainService.getServerConfiguration(serverId);\n\t\tif (serverConfiguration.getMode() == NodeMode.STANDALONE) {\n\t\t\tstream.write(\"standalone mode is not supported\");\n\t\t\treturn;\n\t\t}\n\t\tfinal ConnectionConfiguration connectionConfiguration = configurationDomainService.getConnectionConfiguration(serverId);\n\t\tfinal SSHTunnelConfiguration sshTunnelConfiguration = connectionConfiguration.getSshTunnelConfiguration();\n\t\tif (sshTunnelConfiguration.isEnabled()) {\n\t\t\tfinal String sshHost = sshTunnelConfiguration.getHost();\n\t\t\tfinal int sshPort = sshTunnelConfiguration.getPort();\n\t\t\tfinal String sshUser = sshTunnelConfiguration.getUser();\n\t\t\tfinal String sshPassword = sshTunnelConfiguration.getPassword();\n\t\t\tfinal String connectionUrl = String.format(\"ssh://%s@%s:%d\", sshUser, sshHost, sshPort);\n\t\t\tzookeeperDomainService.startTerminal(serverId, connectionUrl, stream);\n\t\t} else {\n\t\t\tzookeeperDomainService.startTerminal(serverId, serverConfiguration.getConnectionUrl(), stream);\n\t\t}\n\t} catch (Exception e) {\n\t\tstream.write(e.getMessage());\n\t}\n}", "CodeBleu_score": 36.202642240062794}, {"code": "public void startTerminal(String serverId, StringWriter stream){\n\t\tfinal StringWriter error = new StringWriter();\n\tfinal StringWriter info = new StringWriter();\n\tfinal StringWriter debug = new StringWriter();\n\tfinal StringWriter trace = new StringWriter();\n\tfinal StringWriter warn = new StringWriter();\n\tfinal StringWriter error2 = new StringWriter();\n\tfinal StringWriter info2 = new StringWriter();\n\tfinal StringWriter debug2 = new StringWriter();\n\tfinal StringWriter trace2 = new StringWriter();\n\tfinal StringWriter warn2 = new StringWriter();\n\tfinal StringWriter error3 = new StringWriter();\n\tfinal StringWriter info3 = new StringWriter();\n\tfinal StringWriter debug3 = new StringWriter();\n\tfinal StringWriter trace3 = new StringWriter();\n\tfinal StringWriter warn3 = new StringWriter();\n\tfinal StringWriter error4 = new StringWriter();\n\tfinal StringWriter info4 = new StringWriter();\n\tfinal StringWriter debug4 = new StringWriter();\n\tfinal StringWriter trace4 = new StringWriter();\n\tfinal StringWriter warn4 = new StringWriter();\n\tfinal StringWriter error5 = new StringWriter();\n\tfinal StringWriter info5 = new StringWriter();\n\tfinal StringWriter debug5 = new StringWriter();\n\tfinal StringWriter trace5 = new StringWriter();\n\tfinal StringWriter warn5 = new StringWriter();\n\tfinal StringWriter error6 = new StringWriter();\n\tfinal StringWriter info6 = new StringWriter();\n\tfinal StringWriter debug6 = new StringWriter();\n\tfinal StringWriter trace6 = new StringWriter();\n\tfinal StringWriter warn6 = new StringWriter();\n\tfinal StringWriter error7 = new StringWriter();\n\tfinal StringWriter info7 = new StringWriter();\n\tfinal StringWriter debug7 = new StringWriter();\n\tfinal StringWriter trace7 = new StringWriter();\n\tfinal StringWriter warn7 = new StringWriter();\n\tfinal StringWriter error8 = new StringWriter();\n\tfinal StringWriter info8 = new StringWriter();\n\tfinal StringWriter debug8 = new StringWriter();\n\tfinal StringWriter trace8 = new StringWriter();\n\tfinal StringWriter warn8 = new StringWriter();\n\tfinal StringWriter error9 = new StringWriter();\n\tfinal StringWriter info9 = new StringWriter();\n\tfinal StringWriter debug9 = new StringWriter();\n\t", "CodeBleu_score": 9.63863566488146}, {"code": "public void startTerminal(String serverId, StringWriter stream){\n\t\tServerConfigurationVO serverConfiguration = getServerConfiguration(serverId);\n\tif (serverConfiguration == null) {\n\t\treturn;\n\t}\n\tSSHTunnelConfiguration sshTunnelConfiguration = serverConfiguration.getSshTunnelConfiguration();\n\tif (sshTunnelConfiguration != null) {\n\t\tif (sshTunnelConfiguration.isEnabled()) {\n\t\t\tsshTunnelConfiguration.setHost(serverConfiguration.getHost());\n\t\t\tsshTunnelConfiguration.setPort(serverConfiguration.getPort());\n\t\t\tsshTunnelConfiguration.setUsername(serverConfiguration.getUsername());\n\t\t\tsshTunnelConfiguration.setPassword(serverConfiguration.getPassword());\n\t\t\tsshTunnelConfiguration.setPrivateKey(serverConfiguration.getPrivateKey());\n\t\t\tsshTunnelConfiguration.setPassphrase(serverConfiguration.getPassphrase());\n\t\t\tsshTunnelConfiguration.setLocalPort(sshTunnelConfiguration.getLocalPort());\n\t\t\tsshTunnelConfiguration.setLocalHost(sshTunnelConfiguration.getLocalHost());\n\t\t\tsshTunnelConfiguration.setLocalUsername(sshTunnelConfiguration.getLocalUsername());\n\t\t\tsshTunnelConfiguration.setLocalPassword(sshTunnelConfiguration.getLocalPassword());\n\t\t\tsshTunnelConfiguration.setLocalPrivateKey(sshTunnelConfiguration.getLocalPrivateKey());\n\t\t\tsshTunnelConfiguration.setLocalPassphrase(sshTunnelConfiguration.getLocalPassphrase());\n\t\t\tsshTunnelConfiguration.setRemotePort(sshTunnelConfiguration.getRemotePort());\n\t\t\tsshTunnelConfiguration.setRemoteHost(sshTunnelConfiguration.getRemoteHost());\n\t\t\tsshTunnelConfiguration.setRemoteUsername(sshTunnelConfiguration.getRemoteUsername());\n\t\t\tsshTunnelConfiguration.setRemotePassword(sshTunnelConfiguration.getRemotePassword());\n\t\t\tsshTunnelConfiguration.setRemotePrivateKey(sshTunnelConfiguration.getRemotePrivateKey());\n\t\t\tsshTunnelConfiguration.setRemotePassphrase(sshTunnelConfiguration.getRemotePassphrase());\n\t\t\tsshTunnelConfiguration.setPrivateKeyPath(serverConfiguration.getPrivateKeyPath());\n\t\t\tsshTunnelConfiguration.setPassphrasePath(serverConfiguration.getPassphrasePath());\n\t\t\tsshTunnelConfiguration.setLocalPrivateKeyPath(serverConfiguration.getLocalPrivateKeyPath());\n\t\t\tsshTunnelConfiguration.setLocalPassphrasePath(serverConfiguration.getLocalPassphrasePath());\n\t\t\tsshTunnelConfiguration.setRemotePrivateKeyPath(serverConfiguration.getRemotePrivateKeyPath());\n\t\t\tsshTunnelConfiguration.setRemotePassphrasePath(serverConfiguration.getRemotePassphrasePath());\n\t\t\tsshTunnelConfiguration.setPrivateKeyPassphrase(serverConfiguration.getPrivateKeyPassphrase());\n\t\t\tsshTunnelConfiguration.", "CodeBleu_score": 21.016412563224808}]}
{"instance_id": "635dea120e55", "generation_result": [{"code": "public void executeCommand(String id, String command){\n\t\tfinal var zk = ZookeeperDomainService.getInstance();\n\tfinal var server = zk.getServer(id);\n\tif (server == null) {\n\t\tVToast.error(LocaleContext.getLocalizedString(\"server.not.found\", id));\n\t\treturn;\n\t}\n\tfinal var future = zk.executeCommand(id, command);\n\tfuture.whenComplete((s, t) -> {\n\t\tif (t != null) {\n\t\t\tVToast.error(LocaleContext.getLocalizedString(\"server.command.failed\", id, command, t.getMessage()));\n\t\t} else {\n\t\t\tVToast.success(LocaleContext.getLocalizedString(\"server.command.success\", id, command));\n\t\t}\n\t});\n}", "CodeBleu_score": 30.454322160181945}, {"code": "public void executeCommand(String id, String command){\n\t\tfinal var server = serverDomainService.getServerById(id);\n\tif (server.isPresent()) {\n\t\tfinal var serverConfig = server.get();\n\t\ttry {\n\t\t\tfinal var zk = zookeeperDomainService.getZookeeper(serverConfig);\n\t\t\tfinal var result = zk.execute(command);\n\t\t\tif (result.isFailure()) {\n\t\t\t\tLOG.error(\"command execution failed, server: {}, command: {}, error: {}\", id, command, result.error());\n\t\t\t\tVToast.error(result.error().getMessage());\n\t\t\t} else {\n\t\t\t\tLOG.info(\"command execution succeeded, server: {}, command: {}\", id, command);\n\t\t\t\tVToast.success(\"command execution succeeded\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"command execution failed, server: {}, command: {}, error: {}\", id, command, e);\n\t\t\tVToast.error(e.getMessage());\n\t\t}\n\t} else {\n\t\tLOG.error(\"server not found, id: {}\", id);\n\t\tVToast.error(\"server not found\");\n\t}\n}", "CodeBleu_score": 35.56163890369024}, {"code": "public void executeCommand(String id, String command){\n\t\tfinal StringWriter writer = new StringWriter();\n\tfinal ZookeeperDomainService service = ZookeeperDomainService.getInstance();\n\tfinal ZkNodeSearchResult result = service.findZkNodeById(id);\n\tif (result.isSuccess()) {\n\t\tfinal ZookeeperNode node = result.getNode();\n\t\tif (node.getNodeMode() == NodeMode.LEADER) {\n\t\t\tfinal Try<String> output = service.executeCommand(node.getPath(), command);\n\t\t\tif (output.isSuccess()) {\n\t\t\t\twriter.write(output.get());\n\t\t\t} else {\n\t\t\t\tlogger.error(\"failed to execute command on {}: {}\", id, output.getCause());\n\t\t\t\twriter.write(\"failed to execute command on \" + id + \": \" + output.getCause());\n\t\t\t}\n\t\t} else {\n\t\t\twriter.write(\"node is not leader\");\n\t\t}\n\t} else {\n\t\twriter.write(\"node not found\");\n\t}\n\tPlatform.runLater(() -> {\n\t\tfinal TextFlow flow = new TextFlow();\n\t\tfinal Text text = new Text(writer.toString());\n\t\tflow.getChildren().add(text);\n\t\tfinal Scene scene = new Scene(flow);\n\t\tfinal Stage stage = new Stage();\n\t\tstage.setScene(scene);\n\t\tstage.show();\n\t});\n}", "CodeBleu_score": 30.273162259185437}]}
{"instance_id": "8627d161f5fc", "generation_result": [{"code": "public Properties loadZookeeperSystemProperties(){\n\t\tfinal Properties properties = new Properties();\n\ttry {\n\t\tfinal String propertiesFilePath = System.getProperty(\"zookeeper.properties\");\n\t\tif (Strings.isNullOrEmpty(propertiesFilePath)) {\n\t\t\treturn properties;\n\t\t}\n\t\tif (Files.exists(Paths.get(propertiesFilePath))) {\n\t\t\tproperties.load(Files.newInputStream(Paths.get(propertiesFilePath)));\n\t\t\treturn properties;\n\t\t}\n\t} catch (Exception e) {\n\t\tLOGGER.error(\"failed to load zookeeper system properties\", e);\n\t}\n\treturn properties;\n}", "CodeBleu_score": 41.15786269589573}, {"code": "public Properties loadZookeeperSystemProperties(){\n\t\tfinal Properties properties = new Properties();\n\tfinal String filePath = System.getProperty(\"zookeeper.properties.file\", \"zookeeper.properties\");\n\ttry (final InputStream inputStream = Files.newInputStream(Paths.get(filePath))) {\n\t\tproperties.load(inputStream);\n\t\tlog.info(\"loaded zookeeper system properties from {}\", filePath);\n\t\treturn properties;\n\t} catch (final FileNotFoundException e) {\n\t\tlog.warn(\"zookeeper system properties file not found at {}\", filePath);\n\t\treturn properties;\n\t} catch (final IOException e) {\n\t\tlog.error(\"zookeeper system properties file could not be loaded from {}\", filePath, e);\n\t\treturn properties;\n\t}\n}", "CodeBleu_score": 41.39603810475933}, {"code": "public Properties loadZookeeperSystemProperties(){\n\t\tfinal Properties systemProperties = new Properties();\n\tfinal String path = System.getProperty(\"zookeeper.properties.path\");\n\tif (path != null) {\n\t\ttry (final InputStream stream = new FileInputStream(path)) {\n\t\t\tsystemProperties.load(stream);\n\t\t\tlog.info(\"Loaded system properties from \" + path);\n\t\t} catch (final IOException e) {\n\t\t\tlog.error(\"Failed to load system properties from \" + path, e);\n\t\t}\n\t} else {\n\t\tlog.info(\"No system properties file specified\");\n\t}\n\treturn systemProperties;\n}", "CodeBleu_score": 35.94969848373948}]}
{"instance_id": "dce20e143e04", "generation_result": [{"code": "public void saveZookeeperSystemProperties(String content){\n\t\ttry {\n\t\tProperties properties = new Properties();\n\t\tproperties.load(new StringReader(content));\n\t\ttry {\n\t\t\tFiles.write(Paths.get(SYS_PROP_PATH), properties.toString().getBytes(Charset.defaultCharset()));\n\t\t} catch (IOException e) {\n\t\t\tLOGGER.error(\"failed to save zk system properties to file\", e);\n\t\t\tVToast.error(LocaleContext.get(\"zk.error.save.system.properties\"));\n\t\t}\n\t} catch (IOException e) {\n\t\tLOGGER.error(\"failed to load zk system properties from content\", e);\n\t\tVToast.error(LocaleContext.get(\"zk.error.load.system.properties\"));\n\t}\n}", "CodeBleu_score": 34.87213308415781}, {"code": "public void saveZookeeperSystemProperties(String content){\n\t\ttry {\n\t\tProperties props = new Properties();\n\t\tprops.load(new StringReader(content));\n\t\tFiles.write(Paths.get(SYS_PROP_PATH), props.entrySet().stream()\n\t\t\t\t.map(entry -> entry.getKey() + \"=\" + entry.getValue())\n\t\t\t\t.collect(Collectors.toList()));\n\t\tVToast.success(LocaleContext.translate(\"success\"), LocaleContext.translate(\"saved_success\"));\n\t} catch (Exception e) {\n\t\tlogger.error(\"failed to save zookeeper system properties\", e);\n\t\tVToast.error(LocaleContext.translate(\"error\"), LocaleContext.translate(\"saved_failed\"));\n\t}\n}", "CodeBleu_score": 28.829345928803196}, {"code": "public void saveZookeeperSystemProperties(String content){\n\t\ttry {\n\t\tProperties props = new Properties();\n\t\tprops.load(new StringReader(content));\n\t\ttry (OutputStream out = new FileOutputStream(SYS_PROP_PATH)) {\n\t\t\tprops.store(out, \"zookeeper system properties\");\n\t\t\tVToast.success(LocaleContext.translate(\"success\"), LocaleContext.translate(\"zookeeper.system.properties.saved\"));\n\t\t}\n\t} catch (IOException e) {\n\t\tlogger.error(\"failed to save zookeeper system properties\", e);\n\t\tVToast.error(LocaleContext.translate(\"error\"), LocaleContext.translate(\"zookeeper.system.properties.save.failed\"));\n\t}\n}", "CodeBleu_score": 31.497628417177527}]}
{"instance_id": "d89f8e6bfb31", "generation_result": [{"code": "private String response(Socket client){\n\t\ttry {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(client.getInputStream()));\n\t\tString line;\n\t\twhile ((line = br.readLine()) != null) {\n\t\t\tsb.append(line);\n\t\t}\n\t\tclient.close();\n\t\treturn sb.toString();\n\t} catch (IOException e) {\n\t\tthrow new IllegalStateException(\"Error reading from socket\", e);\n\t}\n}", "CodeBleu_score": 47.96872347515464}, {"code": "private String response(Socket client){\n\t\ttry {\n\t\tStringBuilder response = new StringBuilder();\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(client.getInputStream()));\n\t\tString inputLine;\n\t\twhile ((inputLine = in.readLine()) != null) {\n\t\t\tresponse.append(inputLine);\n\t\t}\n\t\tin.close();\n\t\tclient.close();\n\t\treturn response.toString();\n\t} catch (Exception e) {\n\t\tthrow new IllegalStateException(\"Error reading response from socket\", e);\n\t}\n}", "CodeBleu_score": 50.59967506581861}, {"code": "private String response(Socket client){\n\t\ttry {\n\t\tStringBuilder response = new StringBuilder();\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(client.getInputStream()));\n\t\tString inputLine;\n\n\t\twhile ((inputLine = in.readLine()) != null) {\n\t\t\tresponse.append(inputLine);\n\t\t}\n\n\t\tin.close();\n\t\tclient.close();\n\n\t\treturn response.toString();\n\t} catch (Exception e) {\n\t\tthrow new IllegalStateException(\"Could not get response from server\", e);\n\t}\n}", "CodeBleu_score": 50.54184290325816}]}
{"instance_id": "b0a277c5e3c0", "generation_result": [{"code": "public ZookeeperConnection<CuratorFramework> create(ZookeeperParams params){\n\t\tfinal CuratorFramework client = CuratorFrameworkFactory.builder()\n\t\t\t.connectString(params.getConnectString())\n\t\t\t.connectionTimeoutMs(params.getConnectionTimeoutMs())\n\t\t\t.sessionTimeoutMs(params.getSessionTimeoutMs())\n\t\t\t.retryPolicy(new ExponentialBackoffRetry(params.getRetryIntervalMs(), params.getMaxRetries()))\n\t\t\t.namespace(params.getNamespace())\n\t\t\t.aclProvider(new ACLProvider() {\n\t\t\t\t@Override\n\t\t\t\tpublic List<ACL> getDefaultAcl() {\n\t\t\t\t\treturn ZooDefs.Ids.CREATOR_ALL_ACL;\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic List<ACL> getAclForPath(String path) {\n\t\t\t\t\treturn ZooDefs.Ids.CREATOR_ALL_ACL;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.authorization(params.getAuthorization())\n\t\t\t.defaultData(params.getDefaultData())\n\t\t\t.defaultAcl(params.getDefaultAcl())\n\t\t\t.build();\n\tclient.start();\n\ttry {\n\t\tif (!client.blockUntilConnected(5, TimeUnit.SECONDS)) {\n\t\t\tclient.close();\n\t\t\tthrow new ZookeeperException(\"Unable to connect to Zookeeper in 5 seconds\");\n\t\t}\n\t} catch (InterruptedException e) {\n\t\tclient.close();\n\t\tthrow new ZookeeperException(\"Interrupted while waiting for connection\", e);\n\t}\n\treturn new CuratorZookeeperConnection(client);\n}", "CodeBleu_score": 54.726596080015234}, {"code": "public ZookeeperConnection<CuratorFramework> create(ZookeeperParams params){\n\t\tfinal CuratorFramework client = CuratorFrameworkFactory.builder()\n\t\t\t.connectString(params.getHost())\n\t\t\t.sessionTimeoutMs(params.getSessionTimeoutMs())\n\t\t\t.connectionTimeoutMs(params.getConnectionTimeoutMs())\n\t\t\t.retryPolicy(new ExponentialBackoffRetry(1000, 3))\n\t\t\t.namespace(params.getNamespace())\n\t\t\t.aclProvider(new ACLProvider() {\n\t\t\t\t@Override\n\t\t\t\tpublic List<ACL> getDefaultAcl() {\n\t\t\t\t\treturn ZooDefs.Ids.CREATOR_ALL_ACL;\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic List<ACL> getAclForPath(final String path) {\n\t\t\t\t\treturn ZooDefs.Ids.CREATOR_ALL_ACL;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.authorization(params.getAuth())\n\t\t\t.build();\n\n\tclient.start();\n\n\ttry {\n\t\tclient.blockUntilConnected(5, TimeUnit.SECONDS);\n\t} catch (InterruptedException e) {\n\t\tthrow new ZookeeperException(\"Interrupted while waiting for connection\", e);\n\t}\n\n\tif (!client.getZookeeperClient().isConnected()) {\n\t\tclient.close();\n\t\tthrow new ZookeeperException(\"Could not connect to Zookeeper server\");\n\t}\n\n\treturn new CuratorZookeeperConnection(client);\n}", "CodeBleu_score": 48.460471571954606}, {"code": "public ZookeeperConnection<CuratorFramework> create(ZookeeperParams params){\n\t\tfinal Logger logger = LoggerFactory.getLogger(CuratorZookeeperConnection.class);\n\tfinal CuratorZookeeperConnection connection = new CuratorZookeeperConnection(params);\n\tfinal RetryPolicy retryPolicy = new ExponentialBackoffRetry(params.getRetrySleepMs(), params.getRetryMaxAttempts());\n\tfinal List<ACL> acl = ZooDefs.Ids.OPEN_ACL_UNSAFE;\n\tfinal List<AuthInfo> authInfo = null;\n\tfinal String scheme = params.getScheme();\n\tfinal String auth = params.getAuth();\n\tfinal String host = params.getHost();\n\tfinal int port = params.getPort();\n\tfinal String path = params.getPath();\n\tfinal CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder()\n\t\t\t.connectString(host + \":\" + port)\n\t\t\t.retryPolicy(retryPolicy)\n\t\t\t.namespace(path)\n\t\t\t.authorization(authInfo)\n\t\t\t.aclProvider(new ACLProvider() {\n\t\t\t\t@Override\n\t\t\t\tpublic List<ACL> getDefaultAcl() {\n\t\t\t\t\treturn acl;\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic List<ACL> getAclForPath(final String path) {\n\t\t\t\t\treturn acl;\n\t\t\t\t}\n\t\t\t});\n\tif (scheme.equals(\"digest\")) {\n\t\tbuilder.authorization(\"digest\", auth.getBytes());\n\t}\n\tfinal CuratorFramework client = builder.build();\n\tfinal ConnectionStateListener listener = new ConnectionStateListener() {\n\t\t@Override\n\t\tpublic void stateChanged(final CuratorFramework client, final ConnectionState state) {\n\t\t\tif (state == ConnectionState.CONNECTED) {\n\t\t\t\tlogger.info(\"Connected to Zookeeper\");\n\t\t\t\tconnection.setConnected(true);\n\t\t\t} else if (state == ConnectionState.LOST) {\n\t\t\t\tlogger.info(\"Connection lost to Zookeeper\");\n\t\t\t\tconnection.setConnected(false);\n\t\t\t} else if (state == ConnectionState.SUSPENDED) {\n\t\t\t\tlogger.info(\"Connection suspended to Zookeeper\");\n\t\t\t\tconnection.setConnected(false);\n\t\t\t}\n\t\t}\n\t};\n\tclient.getConnectionStateListenable().addListener(listener);\n\ttry {\n\t\tclient.start();\n\t\tclient.blockUntilConnected(5, TimeUnit.SECONDS);\n\t\tif (connection.isConnected()) {\n\t\t\treturn connection", "CodeBleu_score": 33.06060823783874}]}
{"instance_id": "b144bcd67462", "generation_result": [{"code": "public void sync(List<ZookeeperNodeListener> listeners){\n\t\tif (listeners == null) {\n\t\tthrow new IllegalArgumentException(\"listeners cannot be null\");\n\t}\n\n\tif (this.connection.getConnectionMode() == NodeMode.STANDALONE) {\n\t\tLOGGER.info(\"sync: standalone mode, no need to sync\");\n\t\treturn;\n\t}\n\n\tif (this.syncInProgress.get()) {\n\t\tLOGGER.info(\"sync: sync already in progress, skipping\");\n\t\treturn;\n\t}\n\n\tLOGGER.info(\"sync: starting sync\");\n\tthis.syncInProgress.set(true);\n\n\ttry {\n\t\tfinal String connectionString = this.connection.getConnectionString();\n\t\tLOGGER.info(\"sync: connection string: {}\", connectionString);\n\n\t\tfinal CuratorFramework client = CuratorFrameworkFactory.newClient(connectionString, new ExponentialBackoffRetry(1000, 3));\n\t\tclient.start();\n\n\t\tfinal TreeCache cache = new TreeCache(client, \"/\");\n\t\tcache.getListenable().addListener((client1, event) -> {\n\t\t\tLOGGER.info(\"sync: tree cache event: {}\", event);\n\t\t\tfor (ZookeeperNodeListener listener : listeners) {\n\t\t\t\tif (event.getType() == TreeCacheEvent.Type.NODE_ADDED) {\n\t\t\t\t\tlistener.nodeAdded(event.getData().getPath(), event.getData().getData());\n\t\t\t\t} else if (event.getType() == TreeCacheEvent.Type.NODE_UPDATED) {\n\t\t\t\t\tlistener.nodeUpdated(event.getData().getPath(), event.getData().getData());\n\t\t\t\t} else if (event.getType() == TreeCacheEvent.Type.NODE_REMOVED) {\n\t\t\t\t\tlistener.nodeRemoved(event.getData().getPath());\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tcache.start();\n\t} catch (Exception e) {\n\t\tLOGGER.error(\"sync: error while syncing\", e);\n\t} finally {\n\t\tthis.syncInProgress.set(false);\n\t}\n}", "CodeBleu_score": 38.63687174160392}, {"code": "public void sync(List<ZookeeperNodeListener> listeners){\n\t\tfinal Logger log = LoggerFactory.getLogger(getClass());\n\tfinal String connectionString = ZookeeperConnection.getConnectionString();\n\tfinal CuratorFramework client = CuratorFrameworkFactory.newClient(connectionString, new ExponentialBackoffRetry(1000, 3));\n\tfinal AtomicBoolean isSynchronizing = new AtomicBoolean(false);\n\tfinal TreeCache treeCache = TreeCache.newBuilder(client, \"/\").setCacheData(true).build();\n\n\ttry {\n\t\tif (!isSynchronizing.get()) {\n\t\t\tisSynchronizing.set(true);\n\t\t\tlog.info(\"Starting synchronization process\");\n\t\t\tclient.start();\n\t\t\ttreeCache.getListenable().addListener((client1, event) -> {\n\t\t\t\ttry {\n\t\t\t\t\tif (event.getType() == TreeCacheEvent.Type.INITIALIZED) {\n\t\t\t\t\t\tlog.info(\"TreeCache initialized\");\n\t\t\t\t\t} else if (event.getType() == TreeCacheEvent.Type.NODE_ADDED) {\n\t\t\t\t\t\tfinal String path = event.getData().getPath();\n\t\t\t\t\t\tlog.info(\"Node added: {}\", path);\n\t\t\t\t\t\tfor (final ZookeeperNodeListener listener : listeners) {\n\t\t\t\t\t\t\tlistener.onNodeAdded(path);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (event.getType() == TreeCacheEvent.Type.NODE_UPDATED) {\n\t\t\t\t\t\tfinal String path = event.getData().getPath();\n\t\t\t\t\t\tlog.info(\"Node updated: {}\", path);\n\t\t\t\t\t\tfor (final ZookeeperNodeListener listener : listeners) {\n\t\t\t\t\t\t\tlistener.onNodeUpdated(path);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (event.getType() == TreeCacheEvent.Type.NODE_REMOVED) {\n\t\t\t\t\t\tfinal String path = event.getData().getPath();\n\t\t\t\t\t\tlog.info(\"Node removed: {}\", path);\n\t\t\t\t\t\tfor (final ZookeeperNodeListener listener : listeners) {\n\t\t\t\t\t\t\tlistener.onNodeRemoved(path);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tlog.error(\"Failed to process event\", e);\n\t\t\t\t}\n\t\t\t});\n\t\t\ttreeCache.start();\n\t\t} else {\n\t\t\tlog.info(\"Synchronization already in progress\");\n\t\t}\n\t} catch (Exception e) {\n\t\tlog.error(\"Failed to synchronize\", e);\n\t\ttreeCache.close();\n\t}\n}", "CodeBleu_score": 44.28927131929394}, {"code": "public void sync(List<ZookeeperNodeListener> listeners){\n\t\tif (this.nodeMode != NodeMode.LEADER) {\n\t\tLOGGER.info(\"Node is not leader\");\n\t\treturn;\n\t}\n\tif (this.syncInProgress.get()) {\n\t\tLOGGER.info(\"Sync already in progress\");\n\t\treturn;\n\t}\n\tthis.syncInProgress.set(true);\n\tLOGGER.info(\"Starting sync\");\n\ttry (ZookeeperConnection connection = this.getConnection()) {\n\t\tCuratorFramework curator = connection.getCurator();\n\t\tTreeCache cache = TreeCache.newBuilder(curator, this.path).setCacheData(true).build();\n\t\tcache.getListenable().addListener((client, event) -> {\n\t\t\tif (event.getType() == TreeCacheEvent.Type.INITIALIZED) {\n\t\t\t\tLOGGER.info(\"TreeCache initialized\");\n\t\t\t}\n\t\t\tif (event.getType() == TreeCacheEvent.Type.NODE_ADDED) {\n\t\t\t\tLOGGER.info(\"Node added: {}\", event.getData().getPath());\n\t\t\t\tfor (ZookeeperNodeListener listener : listeners) {\n\t\t\t\t\tlistener.nodeAdded(event.getData().getPath());\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (event.getType() == TreeCacheEvent.Type.NODE_UPDATED) {\n\t\t\t\tLOGGER.info(\"Node updated: {}\", event.getData().getPath());\n\t\t\t\tfor (ZookeeperNodeListener listener : listeners) {\n\t\t\t\t\tlistener.nodeUpdated(event.getData().getPath());\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (event.getType() == TreeCacheEvent.Type.NODE_REMOVED) {\n\t\t\t\tLOGGER.info(\"Node removed: {}\", event.getData().getPath());\n\t\t\t\tfor (ZookeeperNodeListener listener : listeners) {\n\t\t\t\t\tlistener.nodeRemoved(event.getData().getPath());\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tcache.start();\n\t} catch (Exception e) {\n\t\tLOGGER.error(\"Error while syncing\", e);\n\t} finally {\n\t\tthis.syncInProgress.set(false);\n\t}\n}", "CodeBleu_score": 39.59278846936734}]}
{"instance_id": "6452f272f2d7", "generation_result": [{"code": "public void watchPathChildrenNode(String path, PathChildrenCacheListener listener) throws Exception{\n\t\t// Create the curator client and start it\n\tCuratorFramework client = CuratorFrameworkFactory.newClient(Constant.ZK_ADDRESS, new ExponentialBackoffRetry(1000, 3));\n\tclient.start();\n\n\t// Create the PathChildrenCache object\n\tPathChildrenCache cache = new PathChildrenCache(client, path, true);\n\n\t// Set the cache to build the initial cache\n\tcache.start(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE);\n\n\t// Add the listener\n\tcache.getListenable().addListener(listener);\n}", "CodeBleu_score": 67.26393766104287}, {"code": "public void watchPathChildrenNode(String path, PathChildrenCacheListener listener) throws Exception{\n\t\tPathChildrenCache cache = new PathChildrenCache(client, path, true);\n\tcache.getListenable().addListener(listener);\n\tcache.start(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE);\n}", "CodeBleu_score": 69.20128486956945}, {"code": "public void watchPathChildrenNode(String path, PathChildrenCacheListener listener) throws Exception{\n\t\tCuratorFramework client = CuratorFrameworkFactory.newClient(Constant.ZK_ADDRESS, new ExponentialBackoffRetry(1000, 3));\n\tclient.start();\n\tPathChildrenCache cache = new PathChildrenCache(client, path, true);\n\tcache.start(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE);\n\tcache.getListenable().addListener(listener);\n}", "CodeBleu_score": 67.22041980531091}]}
{"instance_id": "17f786e147c3", "generation_result": [{"code": "public void unregisterService(){\n\t\tLOGGER.info(\"Un-registering service from zookeeper\");\n\tfor (String servicePath : servicePaths) {\n\t\ttry {\n\t\t\tcuratorClient.delete().deletingChildrenIfNeeded().forPath(servicePath);\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"Error while unregistering service from zookeeper: \" + e.getMessage());\n\t\t}\n\t}\n\tcuratorClient.close();\n}", "CodeBleu_score": 52.75589067347642}, {"code": "public void unregisterService(){\n\t\tlogger.info(\"Unregistering services...\");\n\tfor (String servicePath : servicePaths) {\n\t\ttry {\n\t\t\tcuratorClient.delete().forPath(servicePath);\n\t\t\tlogger.info(\"Unregistered service: \" + servicePath);\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Error unregistering service: \" + servicePath, e);\n\t\t}\n\t}\n\tcuratorClient.close();\n}", "CodeBleu_score": 42.21519483268368}, {"code": "public void unregisterService(){\n\t\t// log the start of the unregistration process\n\tlogger.info(\"Unregistering services\");\n\n\t// iterate through the list of paths, attempting to delete each one using the Curator client\n\tfor (String servicePath : servicePaths) {\n\t\ttry {\n\t\t\t// delete the path\n\t\t\tcuratorClient.delete().deletingChildrenIfNeeded().forPath(servicePath);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t// log the error message\n\t\t\tlogger.error(\"Error deleting path: \" + servicePath, e);\n\t\t}\n\t}\n\n\t// close the Curator client\n\tcuratorClient.close();\n}", "CodeBleu_score": 49.1079937376781}]}
{"instance_id": "32fec6cfa353", "generation_result": [{"code": "public void addListener(IZkStateListener listener){\n\t\tCompletableFuture<Void> future = new CompletableFuture<Void>();\n\tfuture.completeExceptionally(new ZkTimeoutException(\"Unable to connect to Zookeeper within \" + connectionTimeout + \"ms\"));\n\texecutor.schedule(new Runnable() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tmakeClientReady();\n\t\t\t\tzkClient.subscribeStateChanges(listener);\n\t\t\t\tfuture.complete(null);\n\t\t\t} catch (ZkException e) {\n\t\t\t\tfuture.completeExceptionally(e);\n\t\t\t}\n\t\t}\n\t}, connectionTimeout, TimeUnit.MILLISECONDS);\n\ttry {\n\t\tfuture.get();\n\t} catch (Exception e) {\n\t\tthrow new ZkInterruptedException(\"Interrupted while waiting for Zookeeper connection\", e);\n\t}\n}", "CodeBleu_score": 24.118336144804857}, {"code": "public void addListener(IZkStateListener listener){\n\t\tif (this.stateListener == null) {\n\t\tthis.stateListener = new CompletableFuture();\n\t\tthis.stateListener.whenComplete((v, e) -> {\n\t\t\tif (e != null) {\n\t\t\t\tLOGGER.error(\"Error in state listener\", e);\n\t\t\t} else {\n\t\t\t\tthis.stateListener = null;\n\t\t\t}\n\n\t\t});\n\t\tthis.stateListener.exceptionally((e) -> {\n\t\t\tLOGGER.error(\"Error in state listener\", e);\n\t\t\treturn null;\n\t\t});\n\t\tthis.makeClientReady();\n\t}\n\n\tthis.stateListener.thenAcceptAsync((v) -> {\n\t\tthis.zkClient.subscribeStateChanges(listener);\n\t});\n}", "CodeBleu_score": 28.070027332273916}, {"code": "public void addListener(IZkStateListener listener){\n\t\tif (stateListener == null) {\n\t\tstateListener = listener;\n\t\tCompletableFuture.runAsync(this::makeClientReady);\n\t}\n}", "CodeBleu_score": 20.768888434019807}]}
{"instance_id": "619d57562a76", "generation_result": [{"code": "public CuratorZookeeperClient(String serverAddr, String authority){\n\t\tthis(serverAddr, authority, 30000, 10000, null);\n}", "CodeBleu_score": 3.410257372715728}, {"code": "public CuratorZookeeperClient(String serverAddr, String authority){\n\t\tthis(serverAddr, authority, null, null);\n}", "CodeBleu_score": 3.8008823674125973}, {"code": "public CuratorZookeeperClient(String serverAddr, String authority){\n\t\tsuper(serverAddr, authority);\n\tthis.client = CuratorFrameworkFactory.newClient(serverAddr, sessionTimeoutMs, connectionTimeoutMs, new RetryNTimes(retryTimes, retryIntervalMs));\n\tthis.client.getConnectionStateListenable().addListener(new ConnectionStateListener() {\n\t\tpublic void stateChanged(CuratorFramework client, ConnectionState state) {\n\t\t\tif (state == ConnectionState.LOST) {\n\t\t\t\tCuratorZookeeperClient.this.notifyConnectionStateChanged(ConnectionState.LOST);\n\t\t\t} else if (state == ConnectionState.CONNECTED) {\n\t\t\t\tCuratorZookeeperClient.this.notifyConnectionStateChanged(ConnectionState.CONNECTED);\n\t\t\t} else if (state == ConnectionState.RECONNECTED) {\n\t\t\t\tCuratorZookeeperClient.this.notifyConnectionStateChanged(ConnectionState.RECONNECTED);\n\t\t\t}\n\t\t}\n\t});\n\ttry {\n\t\tif (authority != null) {\n\t\t\tthis.client.start();\n\t\t\tthis.client.getZookeeperClient().addAuthInfo(\"digest\", (authority + \":\").getBytes());\n\t\t} else {\n\t\t\tthis.client.start();\n\t\t}\n\t} catch (Exception e) {\n\t\tthrow new IllegalStateException(\"Error initializing CuratorZookeeperClient\", e);\n\t}\n}", "CodeBleu_score": 48.560292052024465}]}
{"instance_id": "9e7fb18946e4", "generation_result": [{"code": "public void removeChildListener(String path, ChildListener listener){\n\t\tcheckState(state == State.STARTED, \"Zookeeper client is not started\");\n\tcheckArgument(path != null, \"Path must not be null\");\n\tcheckArgument(listener != null, \"Listener must not be null\");\n\tlogger.debug(\"Removing child listener {} for path {}\", listener, path);\n\tSet<ChildListener> listeners = childListeners.get(path);\n\tif (listeners != null) {\n\t\tlisteners.remove(listener);\n\t\tif (listeners.isEmpty()) {\n\t\t\tchildListeners.remove(path);\n\t\t\t// We don't need to remove the TargetChildListener if the path has no child listeners\n\t\t\t// because the TargetChildListener is only used for watching the path\n\t\t\tif (zkClient.exists(path)) {\n\t\t\t\tzkClient.getChildren(path, targetChildListener);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 49.89099105865483}, {"code": "public void removeChildListener(String path, ChildListener listener){\n\t\tif (path == null) {\n\t\tthrow new IllegalArgumentException(\"path can't be null\");\n\t}\n\tif (listener == null) {\n\t\tthrow new IllegalArgumentException(\"listener can't be null\");\n\t}\n\tif (path.length() == 0) {\n\t\tthrow new IllegalArgumentException(\"path can't be empty\");\n\t}\n\tif (path.charAt(0) != '/') {\n\t\tthrow new IllegalArgumentException(\"path must be absolute\");\n\t}\n\tif (path.length() > 1 && path.endsWith(\"/\")) {\n\t\tpath = path.substring(0, path.length() - 1);\n\t}\n\tsynchronized (this) {\n\t\tSet<ChildListener> listeners = childListenerMap.get(path);\n\t\tif (listeners != null) {\n\t\t\tlisteners.remove(listener);\n\t\t\tif (listeners.isEmpty()) {\n\t\t\t\tchildListenerMap.remove(path);\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug(\"remove child listener for path: \" + path);\n\t\t\t\t}\n\t\t\t\tif (targetChildListenerMap.containsKey(path)) {\n\t\t\t\t\ttargetChildListenerMap.remove(path);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 44.83311468346713}, {"code": "public void removeChildListener(String path, ChildListener listener){\n\t\tsynchronized (listeners) {\n\t\tList<ChildListener> listeners = this.listeners.get(path);\n\t\tif (listeners != null) {\n\t\t\tlisteners.remove(listener);\n\t\t}\n\t}\n}", "CodeBleu_score": 34.85363856469778}]}
{"instance_id": "2c3fae642654", "generation_result": [{"code": "static int watcher_reconnect_to_zookeeper(zhandle_t *zh){\n\t\tint ret = 0;\n\tchar *idc = NULL;\n\tchar *host = NULL;\n\tchar *port = NULL;\n\tchar *zk_root = NULL;\n\tint zk_timeout = 0;\n\tstruct host_info *host_info = NULL;\n\tstruct qconf_env *env = NULL;\n\n\tif (NULL == zh) {\n\t\tqconf_log(LOG_ERR, \"zh is NULL\");\n\t\tret = QCONF_ERR_PARAM;\n\t\tgoto out;\n\t}\n\n\tif (ZOO_CONNECTED_STATE != zoo_state(zh)) {\n\t\tqconf_log(LOG_ERR, \"zh is not connected\");\n\t\tret = QCONF_ERR_ZK_NOT_CONNECTED;\n\t\tgoto out;\n\t}\n\n\tidc = qconf_get_idc(zh);\n\thost = qconf_get_host(zh);\n\tport = qconf_get_port(zh);\n\tzk_root = qconf_get_zk_root(zh);\n\tzk_timeout = qconf_get_zk_timeout(zh);\n\thost_info = qconf_get_host_info(zh);\n\tenv = qconf_get_env(zh);\n\n\tqconf_del_idc(zh);\n\tqconf_del_host(zh);\n\tqconf_del_port(zh);\n\tqconf_del_zk_root(zh);\n\tqconf_del_zk_timeout(zh);\n\tqconf_del_host_info(zh);\n\tqconf_del_env(zh);\n\n\tif (NULL == idc || NULL == host || NULL == port || NULL == zk_root || NULL == host_info || NULL == env) {\n\t\tqconf_log(LOG_ERR, \"get idc, host, port, zk_root, host_info or env failed\");\n\t\tret = QCONF_ERR_PARAM;\n\t\tgoto out;\n\t}\n\n\tqconf_free(idc);\n\tqconf_free(host);\n\tqconf_free(port);\n\tqconf_free(zk_root);\n\n\tzh = qconf_init(idc, host, port, zk_root,", "CodeBleu_score": 39.89066248638433}, {"code": "static int watcher_reconnect_to_zookeeper(zhandle_t *zh){\n\t\tif (NULL == zh) {\n\t\tqconf_log(LOG_ERR, \"The zookeeper handle is null\");\n\t\treturn QCONF_ERR_OTHER;\n\t}\n\n\tqconf_log(LOG_INFO, \"Attempting to reconnect to zookeeper\");\n\n\t// Get the old idc and host information\n\tchar *old_idc = qconf_get_idc(zh);\n\tchar *old_host = qconf_get_host(zh);\n\n\t// Delete the old idc and host information\n\tqconf_del_idc(zh);\n\tqconf_del_host(zh);\n\n\t// Close the old handle\n\tint rc = zookeeper_close(zh);\n\tif (ZOK != rc) {\n\t\tqconf_log(LOG_ERR, \"Failed to close zookeeper handle: %s\", zerror(rc));\n\t\treturn QCONF_ERR_OTHER;\n\t}\n\n\t// Deserialize the old idc and host information\n\tqconf_idc_info_t *idc_info = qconf_idc_info_new();\n\tif (NULL == idc_info) {\n\t\tqconf_log(LOG_ERR, \"Failed to deserialize idc information\");\n\t\treturn QCONF_ERR_OTHER;\n\t}\n\n\tqconf_host_info_t *host_info = qconf_host_info_new();\n\tif (NULL == host_info) {\n\t\tqconf_log(LOG_ERR, \"Failed to deserialize host information\");\n\t\tqconf_idc_info_free(idc_info);\n\t\treturn QCONF_ERR_OTHER;\n\t}\n\n\t// Initialize a new handle\n\tzh = qconf_init(idc_info, host_info);\n\tif (NULL == zh) {\n\t\tqconf_log(LOG_ERR, \"Failed to initialize zookeeper handle\");\n\t\tqconf_idc_info_free(idc_info);\n\t\tqconf_host_info_free(host_info);\n\t\treturn QCONF_ERR_OTHER;\n\t}\n\n\t// Initialize the environment for the new handle\n\trc = qconf_init_env(zh);\n\tif (QCONF_OK != rc) {\n\t\tqconf", "CodeBleu_score": 36.17784283941795}, {"code": "static int watcher_reconnect_to_zookeeper(zhandle_t *zh){\n\t\tif (!zh) {\n\t\tqconf_log(LOG_ERR, \"zh is null\");\n\t\treturn QCONF_ERR_PARAM;\n\t}\n\n\tif (qconf_get_idc_by_zkhandle(zh)) {\n\t\tqconf_log(LOG_ERR, \"zh is not null\");\n\t\treturn QCONF_ERR_PARAM;\n\t}\n\n\tchar *idc = qconf_get_idc_by_path(zh);\n\n\tif (!idc) {\n\t\tqconf_log(LOG_ERR, \"idc is null\");\n\t\treturn QCONF_ERR_OTHER;\n\t}\n\n\tchar *host = qconf_get_host_by_path(zh);\n\n\tif (!host) {\n\t\tqconf_log(LOG_ERR, \"host is null\");\n\t\tfree(idc);\n\t\treturn QCONF_ERR_OTHER;\n\t}\n\n\tqconf_log(LOG_INFO, \"reconnect to zookeeper, idc: %s, host: %s\", idc, host);\n\n\tqconf_del_idc_by_path(zh);\n\n\tqconf_del_host_by_path(zh);\n\n\tfree(idc);\n\n\tfree(host);\n\n\tzh = qconf_init(idc, host);\n\n\tif (!zh) {\n\t\tqconf_log(LOG_ERR, \"qconf_init error\");\n\t\treturn QCONF_ERR_OTHER;\n\t}\n\n\tqconf_set_env(zh);\n\n\tqconf_init_table_watcher();\n\n\treturn QCONF_OK;\n}", "CodeBleu_score": 27.75141261198648}]}
{"instance_id": "0b5ab34e1dd9", "generation_result": [{"code": "static void init_env_for_zk(zhandle_t *zh, const string &idc_host, const string &idc){\n\t\n}", "CodeBleu_score": 4.319947644130407}, {"code": "static void init_env_for_zk(zhandle_t *zh, const string &idc_host, const string &idc){\n\t\n}", "CodeBleu_score": 4.319947644130407}, {"code": "static void init_env_for_zk(zhandle_t *zh, const string &idc_host, const string &idc){\n\t\tstring notify_node = \"/\" + QCONF_PATH_SEPARATOR + QCONF_NOTIFY_NODE + QCONF_PATH_SEPARATOR + idc;\n\tint ret = zookeeper_add_auth(zh, \"digest\", (char*)QCONF_AUTH_USER_PASS.c_str(), (int)QCONF_AUTH_USER_PASS.size(), NULL, 0);\n\tif (ZOK != ret) {\n\t\tQCONF_ERR(\"zookeeper_add_auth fail, ret:%d\", ret);\n\t}\n\tret = zookeeper_create(zh, notify_node.c_str(), (const char*)QCONF_NOTIFY_VALUE.c_str(), (int)QCONF_NOTIFY_VALUE.size(), &ZOO_OPEN_ACL_UNSAFE, 0, NULL, 0);\n\tif (ZOK == ret) {\n\t\tQCONF_DBG(\"zookeeper_create %s success\", notify_node.c_str());\n\t} else if (ZNODEEXISTS == ret) {\n\t\tQCONF_DBG(\"zookeeper_create %s node exists\", notify_node.c_str());\n\t} else {\n\t\tQCONF_ERR(\"zookeeper_create %s fail, ret:%d\", notify_node.c_str(), ret);\n\t}\n\tret = zookeeper_exists(zh, notify_node.c_str(), NULL, notify_watcher, NULL);\n\tif (ZOK == ret) {\n\t\tQCONF_DBG(\"zookeeper_exists %s success\", notify_node.c_str());\n\t} else if (ZNONODE == ret) {\n\t\tQCONF_DBG(\"zookeeper_exists %s node not exists\", notify_node.c_str());\n\t} else {\n\t\tQCONF_ERR(\"zookeeper_exists %s fail, ret:%d\", notify_node.c_str(), ret);\n\t}\n\tret = zookeeper_create(zh, QCONF_HOST_NODE.c_str(), (const char*)idc_host.c_str(), (int)idc_host.size(), &ZOO_OPEN_ACL_UNSAFE, 0, NULL, 0);\n\tif (ZOK == ret) {\n\t\tQCONF_DBG(\"zookeeper_create %s success\", QCONF_HOST_NODE", "CodeBleu_score": 35.96279539958199}]}
{"instance_id": "19fc5847a7c5", "generation_result": [{"code": "def make_digest_acl_credential(username, password)\n\t\n    username_password = username + \":\" + password\n    sha1 = hashlib.sha1()\n    sha1.update(username_password.encode(\"utf-8\"))\n    digest = b64encode(sha1.digest()).decode(\"utf-8\")\n    return username + \":\" + digest\n\n", "CodeBleu_score": 48.66660542107203}, {"code": "def make_digest_acl_credential(username, password)\n\t\n    hash_object = hashlib.sha1(f\"{username}:{password}\".encode())\n    return f\"{username}:{b64encode(hash_object.digest()).decode()}\"\n\n", "CodeBleu_score": 19.25746700014862}, {"code": "def make_digest_acl_credential(username, password)\n\t\n    h = hashlib.sha1()\n    h.update(password)\n    return \"{0}:{1}\".format(username, b64encode(h.digest()))\n\n", "CodeBleu_score": 16.88987337896362}]}
{"instance_id": "4a062391deb0", "generation_result": [{"code": "def holds_lock(self)\n\t\n    if not self.processing_element:\n        return False\n\n    lock_path = self.processing_element + \"/lock\"\n    try:\n        lock = self.client.sync(lock_path, self.lock_id)\n        return lock.decode(\"utf-8\") == self.lock_id\n    except NoNodeError:\n        return False\n\n", "CodeBleu_score": 36.266089845534275}, {"code": "def holds_lock(self)\n\t\n    if self.processing_element is None:\n        return False\n    else:\n        lock_path = self.processing_element + \"/lock\"\n        lock_value = self.client.sync(lock_path)\n        return lock_value == self.id\n\n", "CodeBleu_score": 41.35401684058201}, {"code": "def holds_lock(self)\n\t\n    if self.processing_element_path is None:\n        return False\n    lock_path = self.processing_element_path + \"/lock\"\n    try:\n        lock_value = self.client.get(lock_path)[0].decode()\n    except NoNodeError:\n        return False\n    return lock_value == self.id\n\n", "CodeBleu_score": 44.71756583374472}]}
{"instance_id": "aaac7523d2b5", "generation_result": [{"code": "def consume(self)\n\t\n    return self._inner_client.consume(self._path)\n\n", "CodeBleu_score": 0.6307636176026437}, {"code": "def consume(self)\n\t\n    if self.processing_element is None:\n        return False\n    if self.is_acquired():\n        self.client.retry(self.client.delete, self.processing_element)\n        self.processing_element = None\n        return True\n    return False\n\n", "CodeBleu_score": 26.03259885639987}, {"code": "def consume(self)\n\t\n    if self.processing_element is None:\n        return False\n    if not self.is_acquired:\n        return False\n    try:\n        with self.client.transaction() as transaction:\n            transaction.delete(self.processing_element_path)\n            transaction.delete(self.processing_element_lock_path)\n        self.processing_element = None\n        return True\n    except NoNodeError:\n        return False\n\n", "CodeBleu_score": 40.857528206947165}]}
{"instance_id": "bed0c998ac4c", "generation_result": [{"code": "def _read_socket(self, read_timeout)\n\t\n    if self._socket is None:\n        raise ConnectionDropped(\"socket connection broken\")\n\n    if self._read_timeout is None:\n        self._socket.settimeout(None)\n    else:\n        self._socket.settimeout(read_timeout)\n\n    try:\n        # Read header\n        header_bytes = self._socket.recv(4)\n        if len(header_bytes) != 4:\n            raise ConnectionDropped(\"Connection closed\")\n        header = ReplyHeader.from_buffer_copy(header_bytes)\n\n        if header.xid == -1:\n            # Handle ping\n            if header.zxid == -1:\n                raise ConnectionDropped(\"Connection closed\")\n            self._pings.remove(header.zxid)\n            BLATHER(\"Received ping response for %s\" % (header.zxid,))\n            return header\n\n        if header.xid == -2:\n            # Handle auth\n            if header.zxid == -1:\n                raise ConnectionDropped(\"Connection closed\")\n            self._pings.remove(header.zxid)\n            if header.err == 0:\n                # Auth successful\n                BLATHER(\"Authentication successful\")\n                return header\n            else:\n                # Auth failed\n                raise AuthFailedError(\"Server authentication failed: %s\" % (\n                    EXCEPTIONS.get(header.err, \"Unknown error %s\" % (header.err,))))\n\n        if header.xid == -4:\n            # Handle sasl\n            if header.zxid == -1:\n                raise ConnectionDropped(\"Connection closed\")\n            self._pings.remove(header.zxid)\n            if header.err == 0:\n                # Sasl complete\n                BLATHER(\"SASL authentication complete\")\n                return header\n            else:\n                # Sasl failed\n                raise SASLException(\"SASL authentication failed: %s\" % (\n                    EXCEPTIONS.get(header.err, \"Unknown error %s\" % (header.err,))))\n\n        if header.xid == -11:\n            # Handle close\n            if header.zxid == -1:\n                raise ConnectionDropped(\"Connection closed\")\n            self._pings.remove(header.zxid)\n            raise ConnectionDropped(\"Connection closed\")\n\n        # Read response\n        if header.len == -1:\n            # Special case for no response\n            response = None\n        else:\n            response = self._socket.recv(header.len)\n            if len(response) != header.len:\n               ", "CodeBleu_score": 30.999464325936987}, {"code": "def _read_socket(self, read_timeout)\n\t\n    header = ReplyHeader()\n    try:\n        if self._read_timeout is not None:\n            r, w, e = select.select([self._socket], [], [], self._read_timeout)\n            if not r:\n                raise socket.timeout()\n        else:\n            r, w, e = select.select([self._socket], [], [])\n        if not r:\n            raise socket.timeout()\n        header.deserialize(self._socket.recv(4))\n        if header.xid == -1:\n            raise ConnectionDropped()\n        if header.xid == -2:\n            raise AuthFailedError(\"Server authentication failed\")\n        if header.xid == -4:\n            raise SessionExpiredError(\"Session has expired\")\n        if header.xid == -11:\n            raise NoNodeError(\"Node does not exist\")\n        if header.xid == -101:\n            raise ForceRetryError(\"Retry with sequence number {0}\".format(\n                int_struct.unpack(self._socket.recv(4))[0]))\n        if header.xid == -102:\n            raise ForceRetryError(\"Retry with last-zxid {0}\".format(\n                int_struct.unpack(self._socket.recv(8))[0]))\n        if header.xid == -103:\n            raise ForceRetryError(\"Retry with base-zxid {0}\".format(\n                int_struct.unpack(self._socket.recv(8))[0]))\n        if header.xid == -104:\n            raise ForceRetryError(\"Retry with delta {0}\".format(\n                int_struct.unpack(self._socket.recv(8))[0]))\n        if header.xid == -105:\n            raise ForceRetryError(\"Retry with count {0}\".format(\n                int_struct.unpack(self._socket.recv(4))[0]))\n        if header.xid == -100:\n            raise Exception(\"Connection closed\")\n        if header.xid == -10:\n            raise Exception(\"Unknown error\")\n        if header.xid == -12:\n            raise Exception(\"Session moved to another server\")\n        if header.xid == -13:\n            raise Exception(\"Session moved to another server and back\")\n        if header.xid == -14:\n            raise Exception(\"Session expired\")\n        if header.xid == -15:\n            raise Exception(\"Invalid", "CodeBleu_score": 26.392167184938064}, {"code": "def _read_socket(self, read_timeout)\n\t\n    self.raw_bytes = b\"\"\n    while True:\n        if self._session_expired:\n            raise SessionExpiredError()\n        try:\n            ready = select.select([self._socket], [], [], read_timeout)\n        except select.error as ex:\n            if ex.args[0] == errno.EINTR:\n                continue\n            raise\n        if not ready[0]:\n            raise socket.timeout()\n\n        try:\n            data = self._socket.recv(4096)\n        except socket.error as ex:\n            if ex.args[0] == errno.EINTR:\n                continue\n            raise\n        if not data:\n            raise ConnectionDropped()\n        self.raw_bytes += data\n        if len(self.raw_bytes) < 4:\n            continue\n\n        header = ReplyHeader.deserialize(self.raw_bytes)\n        if header.xid == -1:\n            self.logger.warning(\"Server returned a non-xid reply\")\n            continue\n\n        if header.xid == Ping.PING_XID:\n            self.logger.debug(\"Received ping\")\n            self._outstanding_pings.clear()\n            self._socket.sendall(PingInstance.serialize(header.xid))\n            continue\n\n        if header.xid == PingInstance.PING_XID:\n            self.logger.debug(\"Received ping response\")\n            self._outstanding_pings.clear()\n            continue\n\n        if header.xid == Watch.WATCH_XID:\n            self.logger.debug(\"Received session event: %s\", EVENT_TYPE_MAP[header.type])\n            self._process_session_event(WatchedEvent(header.type, header.state, header.path))\n            continue\n\n        if header.xid == Auth.AUTH_XID:\n            if header.err == 0:\n                self.logger.debug(\"Authentication successful\")\n                self._state = KeeperState.CONNECTED\n                self._auth_in_progress = False\n                self._auth_data = None\n                self._reset()\n                continue\n            self.logger.error(\"Authentication failed: %s\", EXCEPTIONS[header.err])\n            self._auth_in_progress = False\n            self._auth_data = None\n            raise AuthFailedError(\"Authentication failed: %s\" % EXCEPTIONS[header.err])\n\n        if header.xid == SASL.SASL_XID:\n            if header.err ==", "CodeBleu_score": 31.126519657995022}]}
{"instance_id": "b10e2c2c410b", "generation_result": [{"code": "def zk_loop(self)\n\t\n    self.logger.debug(\"Starting connection loop\")\n    self.connection_stopped.clear()\n    while not self._stopped.is_set():\n        try:\n            self.connect_loop()\n        except Exception as e:\n            self.logger.warning(\"Connection loop failed: %s\", e)\n            self.connection_stopped.wait(self.retry.delay)\n    self.connection_stopped.set()\n    self.session_callback(KeeperState.CLOSED)\n    self.logger.debug(\"Connection loop stopped\")\n\n", "CodeBleu_score": 40.305620611580636}, {"code": "def zk_loop(self)\n\t\n    self.log.info(\"Starting connection\")\n    self.connection_stopped.clear()\n    while not self.client_stopped.is_set():\n        try:\n            self.connect_loop()\n        except (ConnectionDropped, socket.error) as e:\n            self.log.warning(\"Connection dropped: %s\", e)\n            self.state = KeeperState.LOST\n            self.reset()\n            self.wake_event.set()\n        except Exception as e:\n            self.log.exception(\"Unexpected exception in connect loop: %s\", e)\n            self.state = KeeperState.LOST\n            self.reset()\n            self.wake_event.set()\n    self.log.info(\"Connection stopped\")\n    self.connection_stopped.set()\n    self.session_callback(KeeperState.CLOSED)\n\n", "CodeBleu_score": 44.53278362456056}, {"code": "def zk_loop(self)\n\t\n    self.log.info(\"Starting connection to server at %s:%s\", self._address_string(), self._port)\n    self.connection_stopped.clear()\n    self.last_zxid = 0\n    self.session_id = 0\n    self.client_state = KeeperState.CLOSED\n    self.last_read = 0\n    self.last_write = 0\n    self.session_passwd = <PASSWORD>\n    self.pending = {}\n    self.reset = False\n    self.last_expire_check = 0\n    self.state_change = self.state_change_event.is_set()\n    self.retry = self.retry_policy()\n    self.wake_event.set()\n    while not self.stopped.is_set():\n        try:\n            if self.client_state == KeeperState.CONNECTING:\n                if self.reset:\n                    self.reset = False\n                    self.last_read = 0\n                    self.last_write = 0\n                    self.session_passwd = <PASSWORD>\n                    self.session_id = 0\n                    self.pending = {}\n                    self.client_state = KeeperState.CLOSED\n                    self.close()\n                self.connect()\n                if self.client_state == KeeperState.CONNECTED:\n                    self.state_change = self.state_change_event.is_set()\n                    self.session_id = self.session_id\n                    self.send_ping()\n                    self.read_loop()\n            else:\n                if self.client_state == KeeperState.CONNECTED:\n                    if self.state_change:\n                        self.state_change = self.state_change_event.is_set()\n                        self.session_id = self.session_id\n                        self.send_ping()\n                        self.read_loop()\n                    else:\n                        self.read_loop()\n                else:\n                    if self.client_state == KeeperState.EXPIRED_SESSION:\n                        self.handle_session_loss()\n                    else:\n                        if self.client_state == KeeperState.AUTH_FAILED:\n                            self.handle_auth_failure()\n                        else:\n                            if self.client_state == KeeperState.CONNECTING:\n                                pass\n                            else:\n                                if self.client_state == KeeperState.CLOSED:\n                                    self.handle_connection_failure()\n                                else:\n                                    raise RuntimeError(\"", "CodeBleu_score": 29.197821354881725}]}
{"instance_id": "42b3d26a3540", "generation_result": [{"code": "def _partitioner(self, identifier, members, partitions)\n\t\n    partitions = sorted(partitions)\n    members = sorted(members)\n    index = members.index(identifier)\n    return partitions[index::len(members)]\n\n", "CodeBleu_score": 39.65957835883439}, {"code": "def _partitioner(self, identifier, members, partitions)\n\t\n    partitions = sorted(partitions)\n    members = sorted(members)\n    index = members.index(identifier)\n    return partitions[index::len(members)]\n\n", "CodeBleu_score": 39.65957835883439}, {"code": "def _partitioner(self, identifier, members, partitions)\n\t\n    partitions.sort()\n    members.sort()\n    index = members.index(identifier)\n    return partitions[index::len(members)]\n\n", "CodeBleu_score": 33.6805163744097}]}
{"instance_id": "738974d4e9c0", "generation_result": [{"code": "def leave(self)\n\t\n    if self._state.connected:\n        self.ensure_path(self._path)\n        try:\n            self.retry(self._inner_leave)\n        except KazooException:\n            self._logger.exception(\"Failed to leave barrier %s\", self._path)\n            self.reset()\n\n    self._state.participating = False\n\n", "CodeBleu_score": 41.77394648844809}, {"code": "def leave(self)\n\t\n    if self.participating:\n        self.participating = False\n        try:\n            self.client.retry(self._leave)\n        except KazooException:\n            self._cleanup()\n            raise\n        self.client.handler.spawn(self._cleanup)\n\n", "CodeBleu_score": 43.472111083825496}, {"code": "def leave(self)\n\t\n    try:\n        self.retry(self._inner_leave)\n    except KazooException as e:\n        self.logger.exception(e)\n        self._inner_cleanup()\n\n", "CodeBleu_score": 44.93120928664421}]}
{"instance_id": "a321fef7d100", "generation_result": [{"code": "public Result start(){\n\t\ttry {\n\t\tif (ftpService.isServerRunning()) {\n\t\t\treturn Result.success(\"The server is already running\");\n\t\t}\n\t\tftpService.startServer();\n\t\treturn Result.success(\"The server has started successfully\");\n\t} catch (Exception e) {\n\t\tlogger.error(e);\n\t\treturn Result.error(\"Failed to start the server\");\n\t}\n}", "CodeBleu_score": 36.3173650949631}, {"code": "public Result start(){\n\t\ttry {\n\t\tif (service.isServerRunning()) {\n\t\t\treturn Result.success();\n\t\t}\n\t\tservice.start();\n\t\treturn Result.success();\n\t} catch (Exception e) {\n\t\tlogger.error(\"start server error\", e);\n\t\treturn Result.error(e.getMessage());\n\t}\n}", "CodeBleu_score": 31.778616189421953}, {"code": "public Result start(){\n\t\tResult result = new Result();\n\ttry {\n\t\tif (!HFtpService.isServerRunning()) {\n\t\t\tHFtpService.startServer();\n\t\t\tresult.setSuccess(true);\n\t\t\tresult.setMessage(\"Server started successfully.\");\n\t\t} else {\n\t\t\tresult.setSuccess(false);\n\t\t\tresult.setMessage(\"Server is already running.\");\n\t\t}\n\t} catch (Exception e) {\n\t\tresult.setSuccess(false);\n\t\tresult.setMessage(\"Exception occurred while starting server.\");\n\t\tlogger.error(\"Exception occurred while starting server.\", e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 30.5037923850278}]}
{"instance_id": "24b088689114", "generation_result": [{"code": "public Result stop(){\n\t\tResult result = new Result();\n\tresult.setSuccess(false);\n\tresult.setMessage(\"Failed to stop the FTP server\");\n\ttry {\n\t\tif (ftpService.isServerRunning()) {\n\t\t\tftpService.stopServer();\n\t\t\tresult.setSuccess(true);\n\t\t\tresult.setMessage(\"Successfully stopped the FTP server\");\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(\"Failed to stop the FTP server\", e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 32.43577303691539}, {"code": "public Result stop(){\n\t\tResult result = new Result();\n\ttry {\n\t\tif (ftpService.isRunning()) {\n\t\t\tftpService.stop();\n\t\t\tresult.setSuccess(true);\n\t\t\tresult.setMessage(\"FTP server stopped\");\n\t\t} else {\n\t\t\tresult.setSuccess(false);\n\t\t\tresult.setMessage(\"FTP server not running\");\n\t\t}\n\t} catch (Exception e) {\n\t\tresult.setSuccess(false);\n\t\tresult.setMessage(\"Error stopping FTP server\");\n\t\tLOGGER.error(\"Error stopping FTP server\", e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 30.95627437738318}, {"code": "public Result stop(){\n\t\tResult result = new Result();\n\ttry {\n\t\tif (ftpService.isServerRunning()) {\n\t\t\tftpService.stopServer();\n\t\t\tresult.setSuccess(true);\n\t\t\tresult.setMessage(\"FTP server stopped successfully.\");\n\t\t} else {\n\t\t\tresult.setSuccess(false);\n\t\t\tresult.setMessage(\"FTP server is not currently running.\");\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error stopping FTP server.\", e);\n\t\tresult.setSuccess(false);\n\t\tresult.setMessage(\"Error stopping FTP server.\");\n\t}\n\treturn result;\n}", "CodeBleu_score": 30.949545882684383}]}
{"instance_id": "af0884ffda66", "generation_result": [{"code": "public AuthorizationRequest authorize(AuthorizationRequest request){\n\t\tif (authorities == null || authorities.isEmpty()) {\n\t\treturn null;\n\t}\n\tfor (Authority authority : authorities) {\n\t\tif (authority.authorize(request)) {\n\t\t\treturn request;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 24.173602296783702}, {"code": "public AuthorizationRequest authorize(AuthorizationRequest request){\n\t\tif (authorities == null) {\n\t\treturn null;\n\t}\n\tfor (int i = 0; i < authorities.length; i++) {\n\t\tAuthority authority = (Authority) authorities[i];\n\t\tAuthorizationRequest req = authority.authorize(request);\n\t\tif (req != null) {\n\t\t\treturn req;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 31.044521482726918}, {"code": "public AuthorizationRequest authorize(AuthorizationRequest request){\n\t\tif (authorities == null || authorities.isEmpty()) {\n\t\treturn null;\n\t}\n\n\tfor (Authority authority : authorities) {\n\t\tif (authority.authorize(request)) {\n\t\t\treturn request;\n\t\t}\n\t}\n\n\treturn null;\n}", "CodeBleu_score": 24.173602296783702}]}
{"instance_id": "920d28a0fe76", "generation_result": [{"code": "public boolean mkdir(){\n\t\tboolean result = false;\n\ttry {\n\t\tFileSystem fs = FileSystem.get(getFileSystemConfiguration());\n\t\tresult = fs.mkdirs(new Path(fullPath));\n\t} catch (IOException e) {\n\t\tLOG.error(\"Error creating directory\", e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 43.904607139926924}, {"code": "public boolean mkdir(){\n\t\ttry {\n\t\tFileSystem fs = FileSystem.get(new Configuration());\n\t\tPath fullPath = new Path(this.getWorkingDirectory(), this.getName());\n\t\treturn fs.mkdirs(fullPath);\n\t} catch (IOException e) {\n\t\tlogger.error(\"Error creating directory {}\", this.getName(), e);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 52.24605499983894}, {"code": "public boolean mkdir(){\n\t\tboolean result = false;\n\ttry {\n\t\tif (fs.mkdirs(fullPath)) {\n\t\t\tresult = true;\n\t\t}\n\t} catch (IOException e) {\n\t\tlogger.error(\"Error creating directory\", e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 36.92953017636415}]}
{"instance_id": "a2b04232d387", "generation_result": [{"code": "public boolean delete(){\n\t\ttry {\n\t\tFileSystem fs = getFileSystem();\n\t\tfs.delete(new Path(fullPath), true);\n\t\treturn true;\n\t} catch (IOException e) {\n\t\tlog.error(\"Error deleting file\", e);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 50.17291340209616}, {"code": "public boolean delete(){\n\t\ttry {\n\t\tFileSystem fs = FileSystem.get(URI.create(fullPath), conf);\n\t\tfs.delete(new Path(fullPath), true);\n\t\treturn true;\n\t} catch (IOException e) {\n\t\tLOG.error(\"Error deleting file: \" + fullPath, e);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 55.62165243033419}, {"code": "public boolean delete(){\n\t\ttry {\n\t\tFileSystem fs = FileSystem.get(new URI(fullPath), conf);\n\t\tfs.delete(new Path(fullPath), true);\n\t\treturn true;\n\t} catch (Exception e) {\n\t\tLOG.error(\"Error in delete\", e);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 49.45511412993797}]}
{"instance_id": "3407087c9af6", "generation_result": [{"code": "public boolean move(FtpFile ftpFile){\n\t\ttry {\n\t\tFileStatus status = fs.getFileStatus(new Path(ftpFile.getDirectory(), ftpFile.getName()));\n\t\tPath srcPath = new Path(ftpFile.getDirectory(), ftpFile.getName());\n\t\tPath dstPath = new Path(ftpFile.getDirectory(), ftpFile.getName() + \"_moved\");\n\t\tfs.rename(srcPath, dstPath);\n\t\treturn true;\n\t} catch (IOException e) {\n\t\tlogger.error(\"Failed to move file: \" + ftpFile.getName(), e);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 50.23767757377715}, {"code": "public boolean move(FtpFile ftpFile){\n\t\tHdfsUser hdfsUser = (HdfsUser) ftpFile.getUser();\n\tFileSystem fs = hdfsUser.getFileSystem();\n\tPath srcPath = new Path(ftpFile.getDirectory(), ftpFile.getName());\n\tPath dstPath = new Path(ftpFile.getDirectory(), ftpFile.getRenameTo());\n\ttry {\n\t\tfs.rename(srcPath, dstPath);\n\t\treturn true;\n\t} catch (IOException e) {\n\t\tlog.error(\"Error moving file\", e);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 49.84084299872396}, {"code": "public boolean move(FtpFile ftpFile){\n\t\tHdfsUser user = (HdfsUser) ftpFile.getUser();\n\tFileSystem fs = user.getFileSystem();\n\tPath oldPath = new Path(ftpFile.getDirectory(), ftpFile.getName());\n\tPath newPath = new Path(ftpFile.getParent(), ftpFile.getName());\n\ttry {\n\t\tfs.rename(oldPath, newPath);\n\t\treturn true;\n\t} catch (IOException e) {\n\t\tLOGGER.error(\"Error occurred while attempting to move file.\", e);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 49.890984684391356}]}
{"instance_id": "91227000a139", "generation_result": [{"code": "public List<FtpFile> listFiles(){\n\t\tList<FtpFile> files = new ArrayList<FtpFile>();\n\ttry {\n\t\tFileSystem fs = FileSystem.get(new URI(baseDir.getAbsolutePath()), conf);\n\t\tFileStatus[] status = fs.listStatus(new Path(baseDir.getAbsolutePath()));\n\t\tfor (FileStatus fileStatus : status) {\n\t\t\tif (fileStatus.isFile()) {\n\t\t\t\tfiles.add(new FtpFile(fileStatus.getPath().getName(), fileStatus.getPath().getName(), fileStatus.getLen(), fileStatus.getModificationTime(), fileStatus.isDirectory(), fileStatus.getPermission().toString(), fileStatus.getOwner(), fileStatus.getGroup()));\n\t\t\t}\n\t\t}\n\t\treturn Collections.unmodifiableList(files);\n\t} catch (IOException e) {\n\t\tlog.error(e.getMessage(), e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 31.649437136818438}, {"code": "public List<FtpFile> listFiles(){\n\t\tList<FtpFile> files = new ArrayList<FtpFile>();\n\ttry {\n\t\tFileSystem fs = FileSystem.get(new URI(baseDir), conf);\n\t\tFileStatus[] fileStatuses = fs.listStatus(new Path(path));\n\t\tfor (FileStatus fileStatus : fileStatuses) {\n\t\t\tif (fileStatus.isFile()) {\n\t\t\t\tfiles.add(new FtpFile(fileStatus.getPath().toString(), fileStatus.getPath().getName(), fileStatus.getLen(), fileStatus.isDirectory(), fileStatus.getModificationTime()));\n\t\t\t}\n\t\t}\n\t\treturn Collections.unmodifiableList(files);\n\t} catch (Exception e) {\n\t\tLOG.error(\"Error while listing files\", e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 29.352436363447648}, {"code": "public List<FtpFile> listFiles(){\n\t\tif (this.fs == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tPath path = new Path(this.baseDir.getAbsolutePath());\n\t\tFileStatus[] files = this.fs.listStatus(path);\n\t\tList<FtpFile> ftpFiles = new ArrayList<FtpFile>();\n\t\tfor (FileStatus file : files) {\n\t\t\tString fileName = file.getPath().getName();\n\t\t\tif (fileName.startsWith(\".\")) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tFtpFile ftpFile = new FtpFile();\n\t\t\tftpFile.setName(fileName);\n\t\t\tftpFile.setDirectory(file.isDirectory());\n\t\t\tftpFile.setOwner(file.getOwner());\n\t\t\tftpFile.setGroup(file.getGroup());\n\t\t\tftpFile.setSize(file.getLen());\n\t\t\tftpFile.setTimestamp(file.getModificationTime());\n\t\t\tftpFiles.add(ftpFile);\n\t\t}\n\t\treturn Collections.unmodifiableList(ftpFiles);\n\t} catch (IOException e) {\n\t\tlogger.error(\"Error while listing files\", e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 33.0861614113371}]}
{"instance_id": "aec4623134b5", "generation_result": [{"code": "public void configure(){\n\t\t// set configuration state to true\n\tthis.configured = true;\n\n\t// initialize user data properties\n\tthis.userManager = new ConfigurableUserManager();\n\tthis.userManager.setFile(this.userFile);\n\tthis.userManager.setAdminName(this.adminName);\n\tthis.userManager.setAdminPassword(this.adminPassword);\n\tthis.userManager.setMaxIdleTime(this.maxIdleTime);\n\tthis.userManager.setMaxLoginFailures(this.maxLoginFailures);\n\tthis.userManager.setSave(this.save);\n\n\t// check if user data file exists and load its properties\n\tif (this.userManager.getFile() != null && this.userManager.getFile().exists()) {\n\t\ttry {\n\t\t\tthis.userManager.load();\n\t\t} catch (IOException e) {\n\t\t\tthrow new FtpServerConfigurationException(\"Failed to load user data file - \" + this.userManager.getFile().getAbsolutePath() + \" - \" + e.getMessage());\n\t\t}\n\t}\n\n\t// convert any deprecated property names\n\tif (this.anonymousEnabled) {\n\t\tthis.userManager.setAdminName(\"anonymous\");\n\t\tthis.userManager.setAdminPassword(\"<PASSWORD>\");\n\t}\n\tif (this.anonymousPassword != null) {\n\t\tthis.userManager.setAdminPassword(this.anonymousPassword);\n\t}\n\tif (this.anonymousRootEnabled) {\n\t\tthis.userManager.addUser(\"anonymous\", \"anonymous\", this.anonymousRoot, new String[] {\"anonymous\"});\n\t}\n\tif (this.anonymousUploadEnabled) {\n\t\tthis.userManager.addUser(\"anonymous\", \"anonymous\", this.anonymousUpload, new String[] {\"anonymous\"}, \"/\");\n\t}\n\tif (this.defaultDateFormat != null) {\n\t\tthis.userManager.setDefaultDateFormat(this.defaultDateFormat);\n\t}\n\tif (this.defaultControlEncoding != null) {\n\t\tthis.userManager.setDefaultControlEncoding(this.defaultControlEncoding);\n\t}\n\tif (this.defaultDirectory != null) {\n\t\tthis.userManager.setDefaultWriteDirectory(this.defaultDirectory);\n\t}\n\tif (this.defaultFilePerm != null) {\n\t\tthis.userManager.setDefaultFilePerm(this.default", "CodeBleu_score": 29.064883787161357}, {"code": "public void configure(){\n\t\tif (configured) {\n\t\treturn;\n\t}\n\tconfigured = true;\n\tif (!checkConfiguration()) {\n\t\tthrow new FtpServerConfigurationException(\"Configuration check failed\");\n\t}\n\t// load user data file\n\ttry {\n\t\tloadUserDataFile();\n\t} catch (IOException e) {\n\t\tthrow new FtpServerConfigurationException(\"Failed to load user data file: \" + getUserDataFile(), e);\n\t}\n\t// convert deprecated properties\n\tconvertDeprecatedProperties();\n}", "CodeBleu_score": 24.83088556552333}, {"code": "public void configure(){\n\t\tif (isConfigured()) {\n\t\treturn;\n\t}\n\tsetConfigured(true);\n\t//\n\t// check if user file exists\n\t//\n\tFile file = new File(getUserFile());\n\tif (!file.exists()) {\n\t\tthrow new FtpServerConfigurationException(\"User file does not exist: \" + getUserFile());\n\t}\n\t//\n\t// load user file\n\t//\n\tBaseProperties props = new BaseProperties();\n\ttry {\n\t\tprops.load(new FileInputStream(getUserFile()));\n\t} catch (IOException ex) {\n\t\tthrow new FtpServerConfigurationException(\"Failed to load user file: \" + getUserFile(), ex);\n\t}\n\t//\n\t// convert any deprecated property names\n\t//\n\tconvertDeprecatedProperties(props);\n\t//\n\t// set user data\n\t//\n\tsetUserData(props);\n}", "CodeBleu_score": 34.68938206307074}]}
{"instance_id": "b5a2587f14d0", "generation_result": [{"code": "private void saveUserData() throws FtpException{\n\t\ttry {\n\t\tFile parent = new File(userManager.getUserHomeDirectory(userName));\n\t\tif (!parent.exists()) {\n\t\t\tparent.mkdirs();\n\t\t}\n\t\tFileOutputStream out = new FileOutputStream(userManager.getUserHomeDirectory(userName) + \"/user_data.txt\");\n\t\tout.write(userData.getBytes());\n\t\tout.flush();\n\t\tout.close();\n\t} catch (IOException e) {\n\t\tlog.error(\"Failed to save user data\", e);\n\t\tthrow new FtpException(\"Failed to save user data\");\n\t}\n}", "CodeBleu_score": 35.47433254931021}, {"code": "private void saveUserData() throws FtpException{\n\t\tFile file = new File(userFile);\n\tif (!file.exists()) {\n\t\ttry {\n\t\t\tfile.createNewFile();\n\t\t} catch (IOException e) {\n\t\t\tLOG.error(\"Failed to create user file\", e);\n\t\t\tthrow new FtpException(\"Failed to create user file\");\n\t\t}\n\t}\n\n\tFileOutputStream fos = null;\n\ttry {\n\t\tfos = new FileOutputStream(file);\n\t\tuserManager.save(fos);\n\t} catch (IOException e) {\n\t\tLOG.error(\"Failed to save user data\", e);\n\t\tthrow new FtpException(\"Failed to save user data\");\n\t} finally {\n\t\tIoUtils.close(fos);\n\t}\n}", "CodeBleu_score": 43.62158889355562}, {"code": "private void saveUserData() throws FtpException{\n\t\ttry {\n\t\tFile file = new File(userFile);\n\t\tif (!file.exists()) {\n\t\t\tif (!file.getParentFile().exists()) {\n\t\t\t\tif (!file.getParentFile().mkdirs()) {\n\t\t\t\t\tthrow new FtpException(\"Failed to create directory \" + file.getParent());\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!file.createNewFile()) {\n\t\t\t\tthrow new FtpException(\"Failed to create file \" + file.getAbsolutePath());\n\t\t\t}\n\t\t}\n\t\tFileOutputStream fos = new FileOutputStream(file);\n\t\ttry {\n\t\t\tuserManager.save(fos);\n\t\t} finally {\n\t\t\tIoUtils.close(fos);\n\t\t}\n\t} catch (IOException e) {\n\t\tlog.error(\"Failed to save user data\", e);\n\t\tthrow new FtpException(\"Failed to save user data\", e);\n\t}\n}", "CodeBleu_score": 43.70962044710211}]}
{"instance_id": "5cf2989cf513", "generation_result": [{"code": "public Result delete(@PathVariable(value = \"user\") String user){\n\t\tResult result = new Result();\n\ttry {\n\t\tHdfsUserManager userManager = new HdfsUserManager();\n\t\tuserManager.setFile(new File(\"users.properties\"));\n\t\tuserManager.delete(user);\n\t\tresult.setSuccess(true);\n\t\tresult.setMessage(\"User deleted successfully\");\n\t} catch (Exception e) {\n\t\tLOGGER.error(e);\n\t\tresult.setSuccess(false);\n\t\tresult.setMessage(e.getMessage());\n\t}\n\treturn result;\n}", "CodeBleu_score": 39.33257452044848}, {"code": "public Result delete(@PathVariable(value = \"user\") String user){\n\t\ttry {\n\t\tHdfsUserManager userManager = new HdfsUserManager(new File(\"users.properties\"));\n\t\tuserManager.delete(user);\n\t\treturn new Result(true, \"Successfully deleted user: \" + user);\n\t} catch (Exception e) {\n\t\tlog.error(\"Error deleting user: \" + user, e);\n\t\treturn new Result(false, \"Error deleting user: \" + user);\n\t}\n}", "CodeBleu_score": 45.31305693948994}, {"code": "public Result delete(@PathVariable(value = \"user\") String user){\n\t\ttry {\n\t\tUserFactory factory = new HdfsUserManager(new File(\"users.properties\"), new Md5PasswordEncryptor());\n\t\tUser u = factory.delete(user);\n\t\tif (u != null) {\n\t\t\treturn new Result(true, \"Successfully deleted user \" + user);\n\t\t} else {\n\t\t\treturn new Result(false, \"User \" + user + \" does not exist\");\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error deleting user \" + user, e);\n\t\treturn new Result(false, \"Error deleting user \" + user);\n\t}\n}", "CodeBleu_score": 43.5212169624922}]}
{"instance_id": "ce383a9a6497", "generation_result": [{"code": "public FSDataInputStream open(Path path, int bufferSize) throws IOException{\n\t\tString qualifiedPath = qualify(path);\n\tLOG.info(\"open: path={}, bufferSize={}\", qualifiedPath, bufferSize);\n\ttry {\n\t\treturn new FSDataInputStream(new BufferedFSInputStream(new SeaweedInputStream(qualifiedPath, bufferSize)));\n\t} catch (FileNotFoundException e) {\n\t\tLOG.warn(\"open: path={} not found\", qualifiedPath);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 28.425813814072715}, {"code": "public FSDataInputStream open(Path path, int bufferSize) throws IOException{\n\t\tif (LOG.isDebugEnabled()) {\n\t\tLOG.debug(\"open({}, {})\", path, bufferSize);\n\t}\n\tString qualifiedPath = qualify(path);\n\tif (qualifiedPath == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tFSDataInputStream inputStream = fileSystemStore.open(qualifiedPath, bufferSize);\n\t\tif (LOG.isDebugEnabled()) {\n\t\t\tLOG.debug(\"open({}, {}) -> {}\", path, bufferSize, inputStream);\n\t\t}\n\t\treturn inputStream;\n\t} catch (FileNotFoundException e) {\n\t\tLOG.warn(\"File not found: {}\", path);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 43.62469091973325}, {"code": "public FSDataInputStream open(Path path, int bufferSize) throws IOException{\n\t\tString pathName = path.toString();\n\tLOGGER.info(\"Open: \" + pathName + \" bufferSize: \" + bufferSize);\n\tif (bufferSize <= 0) {\n\t\tthrow new IllegalArgumentException(\"bufferSize must be > 0\");\n\t}\n\tif (pathName.contains(\"..\")) {\n\t\tthrow new IllegalArgumentException(\"Path must not contain ..\");\n\t}\n\tif (pathName.startsWith(\"/\")) {\n\t\tpathName = pathName.substring(1);\n\t}\n\tString qualifiedPath = qualifyPath(pathName);\n\tLOGGER.info(\"Qualified path: \" + qualifiedPath);\n\tFSDataInputStream fsDataInputStream = null;\n\ttry {\n\t\tfsDataInputStream = seaweedfsStore.openFileForRead(qualifiedPath, bufferSize);\n\t} catch (FileNotFoundException e) {\n\t\tLOGGER.warn(\"File not found: \" + qualifiedPath);\n\t}\n\treturn fsDataInputStream;\n}", "CodeBleu_score": 36.06442663121124}]}
{"instance_id": "f0fc12072c02", "generation_result": [{"code": "public boolean rename(Path src, Path dst) throws IOException{\n\t\tif(src.equals(dst)) {\n\t\treturn true;\n\t}\n\tif(src.getParent() == null) {\n\t\treturn false;\n\t}\n\tif(dst.getParent() == null) {\n\t\treturn false;\n\t}\n\tif(src.equals(dst.getParent())) {\n\t\treturn false;\n\t}\n\tif(src.depth() > dst.depth()) {\n\t\treturn false;\n\t}\n\tif(src.depth() == dst.depth()) {\n\t\tif(src.getName().compareTo(dst.getName()) > 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tPath qualifiedSrc = makeQualified(src);\n\tPath qualifiedDst = makeQualified(dst);\n\tif(qualifiedSrc.toUri().getScheme() != null && !qualifiedSrc.toUri().getScheme().equals(\"seaweedfs\")) {\n\t\treturn false;\n\t}\n\tif(qualifiedDst.toUri().getScheme() != null && !qualifiedDst.toUri().getScheme().equals(\"seaweedfs\")) {\n\t\treturn false;\n\t}\n\tFilerProto.Entry entry = lookupPath(qualifiedDst, false);\n\tif(entry != null && entry.getIsDirectory() == false) {\n\t\treturn false;\n\t}\n\tif(entry != null && entry.getIsDirectory() == true) {\n\t\tif(qualifiedDst.depth() != qualifiedSrc.depth() + 1) {\n\t\t\treturn false;\n\t\t}\n\t\tif(qualifiedDst.depth() == qualifiedSrc.depth() + 1) {\n\t\t\tif(qualifiedDst.getName().compareTo(qualifiedSrc.getName()) > 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tif(qualifiedDst.depth() == qualifiedSrc.depth()) {\n\t\tif(qualifiedDst.getName().compareTo(qualifiedSrc.getName()) > 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif(qualifiedDst.depth() == qualifiedSrc.depth() + 1) {\n\t\tif(qualifiedDst.getName().compareTo(qualifiedSrc.getName()) >= 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif(qualifiedDst.depth() > qualifiedSrc.depth() + 1)", "CodeBleu_score": 41.549922162821794}, {"code": "public boolean rename(Path src, Path dst) throws IOException{\n\t\tif (LOG.isDebugEnabled()) {\n\t\tLOG.debug(\"rename: src: \" + src + \", dst: \" + dst);\n\t}\n\tboolean success = false;\n\tif (src.equals(dst)) {\n\t\treturn true;\n\t}\n\tif (src.depth() == 0) {\n\t\treturn false;\n\t}\n\tif (src.depth() == dst.depth()) {\n\t\tif (src.isAncestorOf(dst)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (dst.isAncestorOf(src)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tFilerProto.Entry entry = lookupPath(dst);\n\tif (entry != null) {\n\t\tif (entry.getIsDirectory()) {\n\t\t\tdst = new Path(dst, src.getName());\n\t\t}\n\t}\n\tif (LOG.isDebugEnabled()) {\n\t\tLOG.debug(\"rename: dst: \" + dst);\n\t}\n\tPath qualifiedSrc = makeQualified(src);\n\tPath qualifiedDst = makeQualified(dst);\n\tsuccess = renameInternal(qualifiedSrc, qualifiedDst);\n\treturn success;\n}", "CodeBleu_score": 52.12844387186909}, {"code": "public boolean rename(Path src, Path dst) throws IOException{\n\t\tif (src.equals(dst)) {\n\t\treturn true;\n\t}\n\tif (src.getParent() == null) {\n\t\treturn false;\n\t}\n\tPath qualifiedDst = makeQualified(dst);\n\tif (qualifiedDst.getParent() == null) {\n\t\treturn false;\n\t}\n\tif (qualifiedDst.getParent().toString().equals(\"/\")) {\n\t\treturn false;\n\t}\n\tFilerProto.Entry entry = lookupPath(qualifiedDst, false, false);\n\tif (entry != null) {\n\t\tif (entry.getIsDirectory()) {\n\t\t\tPath qualifiedSrc = makeQualified(src);\n\t\t\tif (qualifiedSrc.toString().equals(\"/\")) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (qualifiedDst.toString().equals(\"/\")) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tString srcPath = qualifiedSrc.toString();\n\t\t\tString dstPath = qualifiedDst.toString();\n\t\t\tif (srcPath.startsWith(dstPath)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (dstPath.startsWith(srcPath)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tString dstParentPath = qualifiedDst.getParent().toString();\n\t\t\tString srcParentPath = qualifiedSrc.getParent().toString();\n\t\t\tif (dstParentPath.startsWith(srcParentPath)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (srcParentPath.startsWith(dstParentPath)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (src.toString().equals(dst.toString())) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (src.toString().startsWith(dst.toString())) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (dst.toString().startsWith(src.toString())) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (src.toString().endsWith(\"/\")) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (dst.toString().endsWith(\"/\")) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (src.toString().contains(\"/.\")) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (dst.toString().contains(\"/.\")) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (src.toString().contains(\"/./\")) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (dst.toString().contains(\"/./\")) {\n\t\t\t\treturn false;\n\t\t\t", "CodeBleu_score": 46.56411542906137}]}
{"instance_id": "5104c071af46", "generation_result": [{"code": "public boolean hasCapability(String capability){\n\t\tif (capability.toLowerCase(Locale.ROOT).equals(\"hsync\")) {\n\t\treturn supportFlush;\n\t} else if (capability.toLowerCase(Locale.ROOT).equals(\"hflush\")) {\n\t\treturn supportFlush;\n\t} else {\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 34.778989747526886}, {"code": "public boolean hasCapability(String capability){\n\t\treturn (capability.toLowerCase(Locale.ENGLISH).equals(\"hsync\") || capability.toLowerCase(Locale.ENGLISH).equals(\"hflush\"));\n}", "CodeBleu_score": 40.85525284627251}, {"code": "public boolean hasCapability(String capability){\n\t\treturn (capability != null && capability.toLowerCase(Locale.ENGLISH).equals(\"hsync\") == supportFlush);\n}", "CodeBleu_score": 15.362656513912087}]}
{"instance_id": "6989c860c79b", "generation_result": [{"code": "private synchronized void flushWrittenBytesToServiceInternal(final long offset) throws IOException{\n\t\tfinal long size = this.writtenBytes.position() - offset;\n\tif (size > 0) {\n\t\tthis.writtenBytes.position(offset);\n\t\tthis.writtenBytes.limit((int) (offset + size));\n\t\tthis.writtenBytes.flip();\n\t\tthis.flushWrittenBytesToService(this.writtenBytes);\n\t\tthis.writtenBytes.clear();\n\t\tthis.lastFlushOffset = offset + size;\n\t}\n}", "CodeBleu_score": 28.21612602405541}, {"code": "private synchronized void flushWrittenBytesToServiceInternal(final long offset) throws IOException{\n\t\tif (this.closed) {\n\t\tthrow new IOException(\"The file has been closed.\");\n\t}\n\tif (this.writtenBytesCount == 0) {\n\t\treturn;\n\t}\n\tif (this.writtenBytesCount > this.fileSize) {\n\t\tthrow new IOException(\"The written bytes count \" + this.writtenBytesCount + \" is greater than the file size \" + this.fileSize);\n\t}\n\tif (offset < 0) {\n\t\tthrow new IOException(\"The offset \" + offset + \" is negative\");\n\t}\n\tif (offset > this.fileSize) {\n\t\tthrow new IOException(\"The offset \" + offset + \" is greater than the file size \" + this.fileSize);\n\t}\n\tif (offset > this.lastFlushOffset) {\n\t\tthrow new IOException(\"The offset \" + offset + \" is greater than the last flush offset \" + this.lastFlushOffset);\n\t}\n\tif (this.lastFlushOffset == offset && this.writtenBytesCount == 0) {\n\t\treturn;\n\t}\n\tif (this.lastFlushOffset > offset) {\n\t\tthrow new IOException(\"The last flush offset \" + this.lastFlushOffset + \" is greater than the offset \" + offset);\n\t}\n\tif (this.lastFlushOffset + this.writtenBytesCount < offset) {\n\t\tthrow new IOException(\"The last flush offset \" + this.lastFlushOffset + \" plus the written bytes count \" + this.writtenBytesCount + \" is less than the offset \" + offset);\n\t}\n\tif (this.lastFlushOffset + this.writtenBytesCount > this.fileSize) {\n\t\tthrow new IOException(\"The last flush offset \" + this.lastFlushOffset + \" plus the written bytes count \" + this.writtenBytesCount + \" is greater than the file size \" + this.fileSize);\n\t}\n\tfinal long length = this.fileSize - this.lastFlushOffset;\n\tif (length <= 0) {\n\t\treturn;\n\t}\n\tfinal byte[] bytes = new byte[(int) length];\n\tthis.readInternal(bytes, 0, (int) length, this.lastFlushOffset);\n\tthis.writeMetadata(this.lastFlushOffset, length);\n\tthis.lastFlushOffset = offset", "CodeBleu_score": 27.72762407798431}, {"code": "private synchronized void flushWrittenBytesToServiceInternal(final long offset) throws IOException{\n\t\tif (offset < 0) {\n\t\tthrow new IllegalArgumentException(\"offset: \" + offset + \" (expected: >= 0)\");\n\t}\n\tif (offset == 0) {\n\t\t// No need to flush anything\n\t\treturn;\n\t}\n\tif (offset > this.lastFlushOffset) {\n\t\t// Write the metadata\n\t\tthis.metadata.putLong(Constants.KEY_LAST_FLUSH_OFFSET, offset);\n\t\tthis.metadata.putLong(Constants.KEY_LAST_FLUSH_TIME, System.currentTimeMillis());\n\t\tthis.metadata.putInt(Constants.KEY_NUM_FLUSHES, this.numFlushes + 1);\n\t\tthis.metadata.putInt(Constants.KEY_NUM_WRITES, this.numWrites);\n\t\tthis.metadata.putInt(Constants.KEY_NUM_BYTES_WRITTEN, this.numBytesWritten);\n\t\tthis.metadata.putInt(Constants.KEY_NUM_BYTES_WRITTEN_TO_SERVICE, this.numBytesWrittenToService);\n\t\tthis.metadata.putInt(Constants.KEY_NUM_BYTES_WRITTEN_TO_CLIENT, this.numBytesWrittenToClient);\n\t\tthis.metadata.putInt(Constants.KEY_NUM_BYTES_WRITTEN_TO_DISK, this.numBytesWrittenToDisk);\n\t\tthis.metadata.putInt(Constants.KEY_NUM_BYTES_WRITTEN_TO_DISK_CACHE, this.numBytesWrittenToDiskCache);\n\t\tthis.metadata.putInt(Constants.KEY_NUM_BYTES_WRITTEN_TO_DISK_CACHE_HITS, this.numBytesWrittenToDiskCacheHits);\n\t\tthis.metadata.putInt(Constants.KEY_NUM_BYTES_WRITTEN_TO_DISK_CACHE_MISSES, this.numBytesWrittenToDiskCacheMisses);\n\t\tthis.metadata.putInt(Constants.KEY_NUM_BYTES_WRITTEN_TO_DISK_CACHE_EVICTED, this.numBytesWrittenToDiskCacheEvicted);\n\t\tthis.metadata.putInt(Constants.KEY_NUM_BYTES_WRITTEN_TO_DISK_CACHE_REWRITES, this.numBytesWrittenToDiskCacheRewrites);\n\t\tthis.metadata.putInt(Constants.KEY_", "CodeBleu_score": 26.553209137851795}]}
{"instance_id": "56e8fb9de5da", "generation_result": [{"code": "private synchronized int submitWriteBufferToService(final ByteBuffer bufferToWrite, final long writePosition) throws IOException {\n\t\tfinal int bufferLength = bufferToWrite.remaining();\n\tif (bufferLength == 0)  {\n\t\treturn 0;\n\t}\n\tif (bufferLength > this.maxWriteBufferSize)  {\n\t\tthrow new IllegalArgumentException(\"buffer length \" + bufferLength + \" is greater than maximum write buffer size \" + this.maxWriteBufferSize);\n\t}\n\tfinal ByteBuffer bufferToWriteFlipped = bufferToWrite.duplicate();\n\tbufferToWriteFlipped.flip();\n\tfinal int bufferToWriteFlippedLength = bufferToWriteFlipped.remaining();\n\tfinal ByteBuffer bufferToWriteFlippedSlice = bufferToWriteFlipped.slice();\n\tfinal int bytesWritten = bufferToWriteFlippedLength;\n\tfinal long writePositionToWrite = writePosition;\n\tfinal long writePositionToWritePlusBytesWritten = writePositionToWrite + bytesWritten;\n\tfinal boolean writePositionToWritePlusBytesWrittenGreaterThanSize = writePositionToWritePlusBytesWritten > this.size;\n\tif (writePositionToWritePlusBytesWrittenGreaterThanSize)  {\n\t\tthrow new IllegalArgumentException(\"write position \" + writePositionToWritePlusBytesWritten + \" plus bytes written \" + bytesWritten + \" is greater than size \" + this.size);\n\t}\n\tfinal boolean writePositionToWriteLessThanZero = writePositionToWrite < 0;\n\tif (writePositionToWriteLessThanZero)  {\n\t\tthrow new IllegalArgumentException(\"write position \" + writePositionToWrite + \" is less than zero\");\n\t}\n\tfinal boolean writePositionToWritePlusBytesWrittenGreaterThanSize = writePositionToWritePlusBytesWritten > this.size;\n\tif (writePositionToWritePlusBytesWrittenGreaterThanSize)  {\n\t\tthrow new IllegalArgumentException(\"write position \" + writePositionToWritePlusBytesWritten + \" plus bytes written \" + bytesWritten + \" is greater than size \" + this.size);\n\t}\n\tfinal boolean writePositionToWritePlusBytesWrittenGreaterThanSize = writePositionToWritePlusBytesWritten > this.size;\n\tif (writePositionToWritePlusBytesWrittenGreaterThanSize)  {\n\t\tthrow new IllegalArgumentException(\"write position \" + writePositionToWritePlusBytesWritten + \" plus bytes written \" + bytesWritten + \" is greater than size \" + this.size);\n\t}\n\tfinal boolean writePositionToWritePlusBytesWrittenGreaterThanSize = writePositionTo", "CodeBleu_score": 24.39971467183363}, {"code": "private synchronized int submitWriteBufferToService(final ByteBuffer bufferToWrite, final long writePosition) throws IOException {\n\t\tif (bufferToWrite.remaining() == 0) {\n\t\treturn 0;\n\t}\n\tfinal int bytesToWrite = bufferToWrite.remaining();\n\tfinal long writePositionToWrite = writePosition + bytesToWrite;\n\tfinal int bytesToWriteForTask = Math.min(bytesToWrite, maxWriteTaskSize);\n\tfinal ByteBuffer bufferToWriteForTask = bufferToWrite.duplicate();\n\tbufferToWriteForTask.limit(bufferToWriteForTask.position() + bytesToWriteForTask);\n\tfinal WriteTask writeTask = new WriteTask(bufferToWriteForTask, writePositionToWrite);\n\twriteTask.future = completionService.submit(writeTask);\n\twriteOperations.put(writeTask.future, writeTask);\n\tif (writeOperations.size() > maxWriteOperations) {\n\t\tLOGGER.warn(\"The number of write operations is greater than the maximum allowed.  Waiting for a write operation to complete.\");\n\t\tfinal WriteTask completedWriteTask = waitForWriteOperationToComplete();\n\t\tif (completedWriteTask != null) {\n\t\t\twriteOperations.remove(completedWriteTask.future);\n\t\t}\n\t}\n\treturn bytesToWrite;\n}", "CodeBleu_score": 34.53695481824803}, {"code": "private synchronized int submitWriteBufferToService(final ByteBuffer bufferToWrite, final long writePosition) throws IOException {\n\t\t// Flip the buffer to prepare for reading.\n\tbufferToWrite.flip();\n\t// Calculate the byte length of the buffer.\n\tfinal int bufferByteLength = bufferToWrite.remaining();\n\t// Ensure the task queue is not overloaded.\n\tif (bufferByteLength > this.writeBufferSize) {\n\t\tthrow new IOException(\"Buffer length exceeds maximum write buffer size: \" + bufferByteLength + \" > \" + this.writeBufferSize);\n\t}\n\t// Submit the write task to the completion service.\n\tfinal WriteTask writeTask = new WriteTask(bufferToWrite, writePosition);\n\tthis.writeTaskQueue.add(writeTask);\n\tthis.writeTaskQueueSemaphore.release();\n\tthis.writeTaskQueueSemaphore.drainPermits();\n\tthis.writeTaskQueueSemaphore.release();\n\t// Record the write operation.\n\tthis.writeOperations++;\n\t// Return the number of bytes written.\n\treturn bufferByteLength;\n}", "CodeBleu_score": 26.247975079319946}]}
{"instance_id": "bf27d955c38b", "generation_result": [{"code": "private void waitForTaskToComplete() throws IOException{\n\t\ttry {\n\t\twhile (!completionService.poll().isDone()) {\n\t\t\tThread.sleep(100);\n\t\t}\n\t} catch (InterruptedException e) {\n\t\tthrow new InterruptedIOException();\n\t}\n}", "CodeBleu_score": 17.851641707818967}, {"code": "private void waitForTaskToComplete() throws IOException{\n\t\tCompletionService<Integer> completionService = new ExecutorCompletionService<Integer>(executor);\n\tcompletionService.submit(new Callable<Integer>() {\n\t\tpublic Integer call() throws Exception {\n\t\t\treturn 1;\n\t\t}\n\t});\n\twhile (!completionService.isDone()) {\n\t\ttry {\n\t\t\tFuture<Integer> future = completionService.take();\n\t\t\tif (future.get() != null) {\n\t\t\t\tthrow new IOException(\"Future returned non-null value\");\n\t\t\t}\n\t\t} catch (InterruptedException e) {\n\t\t\tthrow new InterruptedIOException();\n\t\t} catch (ExecutionException e) {\n\t\t\tthrow new IOException(e);\n\t\t}\n\t}\n}", "CodeBleu_score": 29.92906984670432}, {"code": "private void waitForTaskToComplete() throws IOException{\n\t\twhile (true) {\n\t\ttry {\n\t\t\tFuture<Integer> future = completionService.take();\n\t\t\tif (future.isDone()) {\n\t\t\t\tif (future.isCancelled()) {\n\t\t\t\t\tthrow new IOException(\"Task was cancelled\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfuture.get();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (ExecutionException e) {\n\t\t\t\t\t\tthrow new IOException(\"Task failed\", e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (InterruptedException e) {\n\t\t\tthrow new IOException(\"Interrupted while waiting for task to complete\", e);\n\t\t}\n\t}\n}", "CodeBleu_score": 25.524830219161288}]}
{"instance_id": "5c7a311273ae", "generation_result": [{"code": "private synchronized void shrinkWriteOperationQueue() throws IOException{\n\t\tint i = 0;\n\twhile (i < writeOperations.size()) {\n\t\tWriteOperation op = writeOperations.get(i);\n\t\tif (op.isDone()) {\n\t\t\ttry {\n\t\t\t\top.get();\n\t\t\t} catch (ExecutionException e) {\n\t\t\t\tthrow new IOException(\"Write operation failed\", e);\n\t\t\t}\n\t\t\tappendOffset += op.getLength();\n\t\t\twriteOperations.remove(i);\n\t\t} else {\n\t\t\ti++;\n\t\t}\n\t}\n}", "CodeBleu_score": 36.344470927478795}, {"code": "private synchronized void shrinkWriteOperationQueue() throws IOException{\n\t\twhile (!writeQueue.isEmpty()) {\n\t\tWriteOperation writeOperation = writeQueue.peek();\n\t\tif (writeOperation.isDone()) {\n\t\t\twriteQueue.remove();\n\t\t\ttotalAppendOffset += writeOperation.getLength();\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n}", "CodeBleu_score": 23.294899234657805}, {"code": "private synchronized void shrinkWriteOperationQueue() throws IOException{\n\t\twhile (!writeOperationQueue.isEmpty()) {\n\t\tWriteOperation writeOperation = writeOperationQueue.peek();\n\t\tif (writeOperation.isDone()) {\n\t\t\twriteOperationQueue.poll();\n\t\t\tif (writeOperation.exception != null) {\n\t\t\t\tthrow writeOperation.exception;\n\t\t\t}\n\t\t\ttotalAppendOffset += writeOperation.length;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n}", "CodeBleu_score": 27.61722354475133}]}
{"instance_id": "d8f07e66f690", "generation_result": [{"code": "protected HdfsFileSystemView(User user){\n\t\tif (user == null) {\n\t\tthrow new IllegalArgumentException(\"user can not be null\");\n\t}\n\tif (user.getHomeDirectory() == null) {\n\t\tthrow new IllegalArgumentException(\"user's home directory can not be null\");\n\t}\n\thomePath = new Path(user.getHomeDirectory());\n\tthis.user = user;\n}", "CodeBleu_score": 75.92914656639608}, {"code": "protected HdfsFileSystemView(User user){\n\t\tif (user == null) {\n\t\tthrow new IllegalArgumentException(\"user can not be null\");\n\t}\n\tif (user.getHomeDirectory() == null) {\n\t\tthrow new IllegalArgumentException(\"user home directory can not be null\");\n\t}\n\thomePath = new Path(user.getHomeDirectory());\n\tthis.user = user;\n}", "CodeBleu_score": 76.2066563206822}, {"code": "protected HdfsFileSystemView(User user){\n\t\tsuper(user);\n\tif (user == null) {\n\t\tthrow new IllegalArgumentException(\"user can not be null\");\n\t}\n\tif (user.getHomeDirectory() == null) {\n\t\tthrow new IllegalArgumentException(\"user home directory can not be null\");\n\t}\n\thomePath = new Path(user.getHomeDirectory());\n\tthis.user = user;\n}", "CodeBleu_score": 74.62392272053087}]}
{"instance_id": "27807db0eb0f", "generation_result": [{"code": "public boolean changeWorkingDirectory(String dir){\n\t\tif (dir == null) {\n\t\treturn false;\n\t}\n\tString newPath = null;\n\tif (dir.startsWith(\"/\")) {\n\t\tnewPath = dir;\n\t} else {\n\t\tnewPath = workingDirectory.toString() + \"/\" + dir;\n\t}\n\tFile newDir = new File(newPath);\n\tif (newDir.exists() && newDir.isDirectory()) {\n\t\tworkingDirectory = newPath;\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 23.94966226344118}, {"code": "public boolean changeWorkingDirectory(String dir){\n\t\tFileSystemView fsView = session.getFileSystemView();\n\tUser user = session.getUser();\n\tboolean isLoggedIn = user != null;\n\tString userName = isLoggedIn ? user.getName() : \"anonymous\";\n\tString currentDir = session.getCurrentDirectory().getAbsolutePath();\n\tPath newPath = null;\n\tif (dir.startsWith(\"/\")) {\n\t\tnewPath = new Path(dir);\n\t} else {\n\t\tnewPath = new Path(currentDir, dir);\n\t}\n\tif (newPath.toString().equals(\"/\")) {\n\t\tsession.setCurrentDirectory(new File(newPath.toString()));\n\t\treturn true;\n\t}\n\tFtpFile newFtpFile = fsView.getFile(newPath.toString());\n\tif (newFtpFile == null) {\n\t\tsession.write(550, \"Directory does not exist\");\n\t\treturn false;\n\t}\n\tif (newFtpFile.isDirectory()) {\n\t\tsession.setCurrentDirectory(new File(newPath.toString()));\n\t\treturn true;\n\t}\n\tsession.write(550, \"Not a directory\");\n\treturn false;\n}", "CodeBleu_score": 32.54370322297577}, {"code": "public boolean changeWorkingDirectory(String dir){\n\t\tif (dir == null) {\n\t\treturn false;\n\t}\n\tPath newPath = null;\n\tif (dir.startsWith(\"/\")) {\n\t\tnewPath = new Path(dir);\n\t} else {\n\t\tnewPath = new Path(getCurrentDirectory(), dir);\n\t}\n\tif (newPath.getParent() == null) {\n\t\treturn false;\n\t}\n\tif (!newPath.isDir()) {\n\t\treturn false;\n\t}\n\tsetCurrentDirectory(newPath);\n\treturn true;\n}", "CodeBleu_score": 24.233487734189417}]}
{"instance_id": "be7aba23d184", "generation_result": [{"code": "public SeaweedFileSystemStore(String host, int port, int grpcPort, Configuration conf){\n\t\tthis.host = host;\n\tthis.port = port;\n\tthis.grpcPort = grpcPort;\n\tthis.conf = conf;\n\tthis.accessMode = conf.get(ACCESS_MODE, DEFAULT_ACCESS_MODE);\n\tthis.filer = new FilerClient(host, port, grpcPort, conf);\n\tthis.pathToVolumeId = new HashMap<String, String>();\n\tthis.volumeIdToPath = new HashMap<String, String>();\n\tthis.pathToAttr = new HashMap<String, Entry>();\n\tthis.pathToLocations = new HashMap<String, List<Location>>();\n\tthis.pathToLocations.put(\"/\", new ArrayList<Location>());\n\tthis.pathToLocations.put(\"/user\", new ArrayList<Location>());\n\tthis.pathToLocations.put(\"/user/root\", new ArrayList<Location>());\n\tthis.pathToLocations.put(\"/user/nobody\", new ArrayList<Location>());\n\tthis.pathToLocations.put(\"/user/hdfs\", new ArrayList<Location>());\n\tthis.pathToLocations.put(\"/user/hive\", new ArrayList<Location>());\n\tthis.pathToLocations.put(\"/user/hue\", new ArrayList<Location>());\n\tthis.pathToLocations.put(\"/user/spark\", new ArrayList<Location>());\n\tthis.pathToLocations.put(\"/user/zookeeper\", new ArrayList<Location>());\n\tthis.pathToLocations.put(\"/user/hbase\", new ArrayList<Location>());\n\tthis.pathToLocations.put(\"/user/yarn\", new ArrayList<Location>());\n\tthis.pathToLocations.put(\"/user/mapred\", new ArrayList<Location>());\n\tthis.pathToLocations.put(\"/user/flume\", new ArrayList<Location>());\n\tthis.pathToLocations.put(\"/user/hue/desktop\", new ArrayList<Location>());\n\tthis.pathToLocations.put(\"/user/hue/desktop/lib\", new ArrayList<Location>());\n\tthis.pathToLocations.put(\"/user/hue/desktop/log\", new ArrayList<Location>());\n\tthis.pathToLocations.put(\"/user/hue/desktop/desktop.lib.thrift\", new ArrayList<Location>());\n\tthis.pathToLocations.put(\"/user/hue/desktop/desktop.lib.thrift/thrift\", new ArrayList<Location>());\n\tthis.pathToLocations", "CodeBleu_score": 32.97456236199229}, {"code": "public SeaweedFileSystemStore(String host, int port, int grpcPort, Configuration conf){\n\t\tsuper();\n\tthis.host = host;\n\tthis.port = port;\n\tthis.grpcPort = grpcPort;\n\tthis.conf = conf;\n\tthis.accessMode = conf.get(ACCESS_MODE_KEY, ACCESS_MODE_DEFAULT);\n\tthis.filer = new FilerClient(host, port, grpcPort, conf);\n\tthis.userGroupInformation = UserGroupInformation.getCurrentUser();\n\tthis.ugi = userGroupInformation.getShortUserName();\n\tthis.logger = LoggerFactory.getLogger(SeaweedFileSystemStore.class);\n}", "CodeBleu_score": 37.97725133286672}, {"code": "public SeaweedFileSystemStore(String host, int port, int grpcPort, Configuration conf){\n\t\tthis.conf = conf;\n\tthis.host = host;\n\tthis.port = port;\n\tthis.grpcPort = grpcPort;\n\tthis.filerClient = new FilerClient(host, port, grpcPort);\n\tthis.accessMode = conf.get(ACCESS_MODE, DEFAULT_ACCESS_MODE);\n\tif (accessMode.equals(ACCESS_MODE_PUBLIC_URL)) {\n\t\tthis.filerClient.setFilerHost(host);\n\t}\n\tLOG.info(\"Initialized SeaweedFileSystemStore with host: {}, port: {}, grpcPort: {}, accessMode: {}\", host, port, grpcPort, accessMode);\n}", "CodeBleu_score": 38.00659638325444}]}
{"instance_id": "7943a1723c23", "generation_result": [{"code": "public FSInputStream openFileForRead(final Path path, FileSystem.Statistics statistics) throws IOException{\n\t\tif (LOG.isTraceEnabled()) {\n\t\tLOG.trace(\"openFileForRead: \" + path);\n\t}\n\tfinal SeaweedFilerClient filerClient = getFilerClient();\n\tfinal SeaweedFilerClient.Lookup lookup = filerClient.lookupPath(path.toString());\n\tif (lookup == null) {\n\t\tLOG.error(\"openFileForRead: file not found: \" + path);\n\t\tthrow new FileNotFoundException(\"File not found: \" + path);\n\t}\n\treturn new SeaweedHadoopInputStream(filerClient, lookup, statistics, path);\n}", "CodeBleu_score": 53.63246116981557}, {"code": "public FSInputStream openFileForRead(final Path path, FileSystem.Statistics statistics) throws IOException{\n\t\tif (LOG.isTraceEnabled()) {\n\t\tLOG.trace(\"openFileForRead: \" + path.toString());\n\t}\n\n\tFileStatus fileStatus = getFileStatus(path);\n\n\tif (fileStatus == null) {\n\t\tthrow new FileNotFoundException(\"File \" + path.toString() + \" not found\");\n\t}\n\n\tif (fileStatus.isDirectory()) {\n\t\tthrow new FileNotFoundException(\"File \" + path.toString() + \" is a directory\");\n\t}\n\n\tif (!fileStatus.isFile()) {\n\t\tthrow new FileNotFoundException(\"File \" + path.toString() + \" is not a file\");\n\t}\n\n\treturn new SeaweedHadoopInputStream(client, path, statistics);\n}", "CodeBleu_score": 46.00060809553982}, {"code": "public FSInputStream openFileForRead(final Path path, FileSystem.Statistics statistics) throws IOException{\n\t\tif (LOG.isTraceEnabled()) {\n\t\tLOG.trace(\"openFileForRead({}, {})\", path, statistics);\n\t}\n\tString key = path.toString();\n\tif (!key.startsWith(SEAWEEDFS_URI_PREFIX)) {\n\t\tthrow new FileNotFoundException(\"Not found: \" + path);\n\t}\n\tString name = key.substring(SEAWEEDFS_URI_PREFIX.length());\n\tFileEntry fileEntry = findFileEntry(name);\n\tif (fileEntry == null) {\n\t\tthrow new FileNotFoundException(\"Not found: \" + path);\n\t}\n\treturn new SeaweedHadoopInputStream(this.filerClient, statistics, path, fileEntry);\n}", "CodeBleu_score": 56.65413593848445}]}
{"instance_id": "36634cee9ed3", "generation_result": [{"code": "public void configure(JobConf conf){\n\t\tLOG.info(\"Running configure\");\n\ttry {\n\t\thost = InetAddress.getLocalHost().getHostName();\n\t} catch (UnknownHostException e) {\n\t\tLOG.warn(\"Unable to retrieve host name, defaulting to 'localhost'\");\n\t\thost = \"localhost\";\n\t}\n\tthreadsPerMap = conf.getInt(\"threadsPerMap\", 1);\n\tfilesPerThread = conf.getInt(\"filesPerThread\", 1);\n\texecutor = Executors.newFixedThreadPool(threadsPerMap, new ThreadFactory() {\n\t\tpublic Thread newThread(Runnable r) {\n\t\t\tThread t = new Thread(r);\n\t\t\tt.setDaemon(true);\n\t\t\treturn t;\n\t\t}\n\t});\n}", "CodeBleu_score": 65.98889177568705}, {"code": "public void configure(JobConf conf){\n\t\tLOG.info(\"Configuring job\");\n\tconf_ = conf;\n\ttry {\n\t\thost_ = InetAddress.getLocalHost().getHostName();\n\t} catch (UnknownHostException e) {\n\t\tLOG.warn(\"Unable to get local host name, using 'localhost' instead\");\n\t\thost_ = \"localhost\";\n\t}\n\tnumThreadsPerMap_ = conf.getInt(\"mapred.map.tasks\", 1);\n\tnumFilesPerThread_ = conf.getInt(\"mapred.text.maxinput.per.split\", 1);\n\texecutor_ = Executors.newFixedThreadPool(numThreadsPerMap_, new ThreadFactory() {\n\t\tpublic Thread newThread(Runnable r) {\n\t\t\tThread t = new Thread(r);\n\t\t\tt.setDaemon(true);\n\t\t\treturn t;\n\t\t}\n\t});\n}", "CodeBleu_score": 56.266229718709646}, {"code": "public void configure(JobConf conf){\n\t\ttry {\n\t\thost = InetAddress.getLocalHost().getHostName();\n\t} catch (UnknownHostException e) {\n\t\tLOG.warn(\"Unable to get host name, defaulting to 'localhost'\");\n\t\thost = \"localhost\";\n\t}\n\tnumThreads = conf.getInt(\"mapred.map.tasks\", 1);\n\tnumFiles = conf.getInt(\"files.per.thread\", 1);\n\texecutor = Executors.newFixedThreadPool(numThreads, new ThreadFactory() {\n\t\tpublic Thread newThread(Runnable r) {\n\t\t\tThread thread = new Thread(r);\n\t\t\tthread.setDaemon(true);\n\t\t\treturn thread;\n\t\t}\n\t});\n}", "CodeBleu_score": 52.83601587683682}]}
{"instance_id": "53cd9065153d", "generation_result": [{"code": "private void startTrashEmptier(URI uri, final Configuration conf) throws IOException{\n\tString host = uri.getHost();\nif (host == null) {\nhost = \"\";\n}\nfinal String key = host + \":\" + conf.get(Constants.PROPERTY_CONFKEY_TRASH_INTERVAL);\nsynchronized (trashEmptierLock) {\nif (trashEmptierMap.containsKey(key)) {\nreturn;\n}\n}\nfinal JuiceFileSystemImpl fs = new JuiceFileSystemImpl();\nfs.initialize(uri, conf);\nfinal UserGroupInformation ugi = UserGroupInformation.createProxyUser(conf.get(Constants.PROPERTY_CONFKEY_TRASH_USER), UserGroupInformation.getLoginUser());\ntry {\nugi.doAs(new PrivilegedExceptionAction<Void>() {\n@Override\npublic Void run() throws Exception {\nif (fs.exists(new Path(conf.get(Constants.PROPERTY_CONFKEY_TRASH_DIR)))) {\nfs.delete(new Path(conf.get(Constants.PROPERTY_CONFKEY_TRASH_DIR)), true);\n}\nfs.mkdirs(new Path(conf.get(Constants.PROPERTY_CONFKEY_TRASH_DIR)));\nreturn null;\n}\n});\n} catch (Exception e) {\nthrow new IOException(\"Failed to initialize trash for \" + uri.toString(), e);\n}\nTrashEmptierTask task = new TrashEmptierTask(fs, conf);\nsynchronized (trashEmptierLock) {\ntrashEmptierMap.put(key, task);\n}\ntrashEmptierExecutor.scheduleAtFixedRate(task, 10, 10, TimeUnit.MINUTES);\n}", "CodeBleu_score": 46.25710040677741}, {"code": "private void startTrashEmptier(URI uri, final Configuration conf) throws IOException{\n\tString host = uri.getHost();\nString trashPath = conf.get(Trash.TRASH_PREFIX_KEY, Trash.DEFAULT_TRASH_PREFIX) + \"/\" + host;\n\n// check if trash emptier is already running for the host\nif (trashEmptierMap.get(host) != null) {\nthrow new IOException(\"Trash emptier is already running for host: \" + host);\n}\n\n// create superuser and initialize file system\nfinal JuiceFileSystemImpl fs = (JuiceFileSystemImpl) createFSAsSuperUser(uri, conf);\n\n// initialize trash emptier\nTrashEmptier trashEmptier = new TrashEmptier(fs, trashPath, conf);\n\n// start trash emptier\ntrashEmptier.start();\n\n// add trash emptier to map\ntrashEmptierMap.put(host, trashEmptier);\n}", "CodeBleu_score": 32.18740125518419}, {"code": "private void startTrashEmptier(URI uri, final Configuration conf) throws IOException{\n\tif (uri.getScheme() == null) {", "CodeBleu_score": 6.370201883126296}]}
{"instance_id": "ede797f6a8f2", "generation_result": [{"code": "public static void setContext(String context) throws Exception{\n\t\tif (context == null) {\n\t\tthrow new IllegalArgumentException(\"Context cannot be null\");\n\t}\n\ttry {\n\t\tCallerContext currentContext = CallerContext.getCurrent();\n\t\tif (currentContext == null) {\n\t\t\tcurrentContext = CallerContext.create(\"default\", context);\n\t\t} else {\n\t\t\tString current = currentContext.getContext();\n\t\t\tif (current == null) {\n\t\t\t\tcurrentContext = CallerContext.create(\"default\", context);\n\t\t\t} else if (current.equals(context)) {\n\t\t\t\t// do nothing\n\t\t\t} else {\n\t\t\t\t// append\n\t\t\t\tcurrent = current + \" \" + context;\n\t\t\t\tcurrentContext = CallerContext.create(\"default\", current);\n\t\t\t}\n\t\t}\n\t\tCallerContext.setCurrent(currentContext);\n\t} catch (IOException e) {\n\t\tthrow new Exception(e);\n\t}\n}", "CodeBleu_score": 42.43068353042504}, {"code": "public static void setContext(String context) throws Exception{\n\t\tif (context == null) {\n\t\tthrow new IllegalArgumentException(\"Context cannot be null\");\n\t}\n\tCallerContext callerContext = CallerContext.getCurrent();\n\tif (callerContext != null) {\n\t\tString currentContext = callerContext.getContext();\n\t\tif (currentContext != null) {\n\t\t\tString[] contexts = currentContext.split(\",\");\n\t\t\tfor (String ctx : contexts) {\n\t\t\t\tif (ctx.startsWith(context)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcallerContext.setContext(currentContext + \",\" + context);\n\t\t} else {\n\t\t\tcallerContext.setContext(context);\n\t\t}\n\t} else {\n\t\tcallerContext = CallerContext.create(context);\n\t\tCallerContext.setCurrent(callerContext);\n\t}\n}", "CodeBleu_score": 35.285856351378165}, {"code": "public static void setContext(String context) throws Exception{\n\t\tCallerContext callerContext = CallerContext.getCurrent();\n\tif (callerContext == null) {\n\t\tcallerContext = new CallerContext();\n\t\tcallerContext.setContext(context);\n\t\tCallerContext.setCurrent(callerContext);\n\t} else {\n\t\tcallerContext.setContext(context);\n\t}\n}", "CodeBleu_score": 25.99556489203901}]}
{"instance_id": "56968a526f6a", "generation_result": [{"code": "Status HDFS::remove_file(const URI& uri){\n\t\thdfsFS fs = hdfsConnect(host_.c_str(), port_, 0);\n\tif (fs == NULL) {\n\t\tLOG(ERROR) << \"Could not connect to HDFS at \" << host_ << \":\" << port_;\n\t\treturn Status::IOError(\"Could not connect to HDFS\");\n\t}\n\tint ret = hdfsDelete(fs, uri.path().c_str(), 0);\n\thdfsDisconnect(fs);\n\tif (ret != 0) {\n\t\tLOG(ERROR) << \"Could not delete file \" << uri.path() << \" from HDFS: \" << get_hdfs_error_msg(ret);\n\t\treturn Status::IOError(\"Could not delete file \" + uri.path() + \" from HDFS\");\n\t}\n\treturn Status::OK();\n}", "CodeBleu_score": 51.80023102006346}, {"code": "Status HDFS::remove_file(const URI& uri){\n\t\thdfsFS fs = hdfsConnect(uri.host().c_str(), uri.port());\n\tif (!fs) {\n\t\tLOG(ERROR) << \"Could not connect to HDFS: \" << uri.host() << \":\" << uri.port();\n\t\treturn Status::IOError(\"Could not connect to HDFS\");\n\t}\n\n\tint ret = hdfsDelete(fs, uri.path().c_str(), 0);\n\tif (ret) {\n\t\tLOG(ERROR) << \"Could not delete file: \" << uri.path();\n\t\treturn Status::IOError(\"Could not delete file\");\n\t}\n\treturn Status::OK();\n}", "CodeBleu_score": 51.124860536763784}, {"code": "Status HDFS::remove_file(const URI& uri){\n\t\thdfsFS fs = hdfsConnect(uri.host().c_str(), uri.port());\n\tif (fs == NULL) {\n\t\tLOG_ERROR(\"Could not connect to HDFS\");\n\t\treturn Status::IOError(\"Could not connect to HDFS\");\n\t}\n\n\tint res = hdfsDelete(fs, uri.path().c_str(), 0);\n\tif (res != 0) {\n\t\tLOG_ERROR(\"Could not delete file from HDFS\");\n\t\treturn Status::IOError(\"Could not delete file from HDFS\");\n\t}\n\n\treturn Status::OK();\n}", "CodeBleu_score": 52.83340365496139}]}
{"instance_id": "f33adb3e8cb6", "generation_result": [{"code": "Status HDFS::sync(const URI& uri){\n\t\tLOG_TRACE(\"HDFS::sync called\");\n\n\t// connect to the file system\n\tauto fs = hdfsConnect(host.c_str(), port, 0);\n\tif (fs == nullptr) {\n\t\tLOG_ERROR(\"Could not connect to HDFS\");\n\t\treturn Status::Error(\"Could not connect to HDFS\");\n\t}\n\n\t// check if the file exists\n\tif (hdfsExists(fs, uri.path.c_str()) == 0) {\n\t\tLOG_TRACE(\"File does not exist\");\n\t\thdfsDisconnect(fs);\n\t\treturn Status::Ok();\n\t}\n\n\t// open the file in write and append mode\n\tauto file = hdfsOpenFile(fs, uri.path.c_str(), O_WRONLY | O_APPEND);\n\tif (file == nullptr) {\n\t\tLOG_ERROR(\"Could not open file\");\n\t\thdfsDisconnect(fs);\n\t\treturn Status::Error(\"Could not open file\");\n\t}\n\n\t// flush the file's data to HDFS\n\tif (hdfsFlush(fs, file) != 0) {\n\t\tLOG_ERROR(\"Could not flush file\");\n\t\thdfsCloseFile(fs, file);\n\t\thdfsDisconnect(fs);\n\t\treturn Status::Error(\"Could not flush file\");\n\t}\n\n\t// close the file\n\tif (hdfsCloseFile(fs, file) != 0) {\n\t\tLOG_ERROR(\"Could not close file\");\n\t\thdfsDisconnect(fs);\n\t\treturn Status::Error(\"Could not close file\");\n\t}\n\n\thdfsDisconnect(fs);\n\treturn Status::Ok();\n}", "CodeBleu_score": 39.00458062313271}, {"code": "Status HDFS::sync(const URI& uri){\n\t\tLOG_TRACE(\"HDFS::sync called\");\n\n\tif (!uri.isValid()) {\n\t\tLOG_ERROR(\"Invalid URI\");\n\t\treturn Status(Status::InvalidInput, \"Invalid URI\");\n\t}\n\n\ttry {\n\t\t// Open file in write and append mode\n\t\thdfsFS fs = getHDFSFS(uri.getAuthority());\n\t\thdfsFile file = hdfsOpenFile(fs, uri.getPath().c_str(), O_WRONLY | O_APPEND);\n\n\t\tif (file == NULL) {\n\t\t\tLOG_ERROR(\"Could not open file\");\n\t\t\treturn Status(Status::IOError, \"Could not open file\");\n\t\t}\n\n\t\t// Flush the file's data to HDFS\n\t\tif (hdfsFlush(fs, file) != 0) {\n\t\t\tLOG_ERROR(\"Could not flush file data to HDFS\");\n\t\t\thdfsCloseFile(fs, file);\n\t\t\treturn Status(Status::IOError, \"Could not flush file data to HDFS\");\n\t\t}\n\n\t\t// Close the file\n\t\tif (hdfsCloseFile(fs, file) != 0) {\n\t\t\tLOG_ERROR(\"Could not close file\");\n\t\t\treturn Status(Status::IOError, \"Could not close file\");\n\t\t}\n\n\t\treturn Status::Ok();\n\t} catch (const std::exception& e) {\n\t\tLOG_ERROR(\"Exception: \" + std::string(e.what()));\n\t\treturn Status(Status::IOError, std::string(e.what()));\n\t}\n}", "CodeBleu_score": 43.93331450398198}, {"code": "Status HDFS::sync(const URI& uri){\n\t\tLOG_TRACE(\"HDFS::sync called\");\n\n\tif (!uri.isValid()) {\n\t\tLOG_ERROR(\"Invalid URI\");\n\t\treturn Status::Error(\"Invalid URI\");\n\t}\n\n\ttry {\n\t\tauto fs = getFileSystem(uri);\n\t\tauto path = getPath(uri);\n\n\t\tif (fs.exists(path)) {\n\t\t\tauto fsData = fs.open(path);\n\t\t\tfsData.sync();\n\t\t\tfsData.close();\n\t\t}\n\n\t\treturn Status::Ok();\n\t}\n\tcatch (const std::exception& e) {\n\t\tLOG_ERROR(\"HDFS::sync error: {}\", e.what());\n\t\treturn Status::Error(e.what());\n\t}\n}", "CodeBleu_score": 31.32998055018095}]}
{"instance_id": "893c46ab9675", "generation_result": [{"code": "Status HDFS::file_size(const URI& uri, uint64_t* nbytes){\n\t\tLOG(INFO) << \"HDFS::file_size \" << uri.to_string();\n\t*nbytes = 0;\n\thdfsFS fs = hdfsConnect(uri.host.c_str(), uri.port, 0);\n\tif (fs == NULL) {\n\t\tLOG(ERROR) << \"Failed to connect to HDFS: \" << uri.to_string();\n\t\treturn Status::IOError(\"Failed to connect to HDFS\");\n\t}\n\thdfsFileInfo* info = hdfsGetPathInfo(fs, uri.path.c_str());\n\tif (info == NULL) {\n\t\tLOG(ERROR) << \"Failed to get HDFS file info: \" << uri.to_string();\n\t\treturn Status::IOError(\"Failed to get HDFS file info\");\n\t}\n\tif (info->mKind != kObjectKindFile) {\n\t\tLOG(ERROR) << \"Not a file: \" << uri.to_string();\n\t\thdfsFreeFileInfo(info, 1);\n\t\treturn Status::IOError(\"Not a file\");\n\t}\n\t*nbytes = info->mSize;\n\thdfsFreeFileInfo(info, 1);\n\treturn Status::OK();\n}", "CodeBleu_score": 46.11311062702026}, {"code": "Status HDFS::file_size(const URI& uri, uint64_t* nbytes){\n\t\tif (!nbytes) {\n\t\treturn Status::Invalid(\"null nbytes\");\n\t}\n\t*nbytes = 0;\n\thdfsFS fs = get_hdfs_connection(uri);\n\tif (!fs) {\n\t\treturn Status::IOError(\"Cannot connect to HDFS\");\n\t}\n\thdfsFileInfo* info = hdfsGetPathInfo(fs, uri.path().c_str());\n\tif (!info) {\n\t\treturn Status::IOError(\"Cannot get path info\");\n\t}\n\tif (info->mKind != kObjectKindFile) {\n\t\thdfsFreeFileInfo(info, 1);\n\t\treturn Status::IOError(\"Not a file\");\n\t}\n\t*nbytes = info->mSize;\n\thdfsFreeFileInfo(info, 1);\n\treturn Status::OK();\n}", "CodeBleu_score": 40.23723305481652}, {"code": "Status HDFS::file_size(const URI& uri, uint64_t* nbytes){\n\t\tLOG(INFO) << \"HDFS::file_size \" << uri;\n\tif (uri.scheme() != \"hdfs\") {\n\t\treturn Status::Invalid(\"URI scheme must be hdfs\");\n\t}\n\tif (uri.authority().empty()) {\n\t\treturn Status::Invalid(\"URI authority must not be empty\");\n\t}\n\tif (uri.path().empty()) {\n\t\treturn Status::Invalid(\"URI path must not be empty\");\n\t}\n\tif (uri.query().size() != 0) {\n\t\treturn Status::Invalid(\"URI query must be empty\");\n\t}\n\tif (uri.fragment().size() != 0) {\n\t\treturn Status::Invalid(\"URI fragment must be empty\");\n\t}\n\tstd::string host = uri.authority();\n\tstd::string path = uri.path();\n\tif (path[0] != '/') {\n\t\tpath = \"/\" + path;\n\t}\n\tLOG(INFO) << \"HDFS::file_size host \" << host << \" path \" << path;\n\thdfsFS fs = hdfsConnect(host.c_str(), 0);\n\tif (fs == NULL) {\n\t\treturn Status::IOError(\"Could not connect to HDFS\");\n\t}\n\thdfsFileInfo* fileinfo = hdfsGetPathInfo(fs, path.c_str());\n\tif (fileinfo == NULL) {\n\t\thdfsDisconnect(fs);\n\t\treturn Status::IOError(\"Could not get file info\");\n\t}\n\tif (fileinfo->mKind != kObjectKindFile) {\n\t\thdfsFreeFileInfo(fileinfo, 1);\n\t\thdfsDisconnect(fs);\n\t\treturn Status::IOError(\"Path is not a file\");\n\t}\n\t*nbytes = fileinfo->mSize;\n\thdfsFreeFileInfo(fileinfo, 1);\n\thdfsDisconnect(fs);\n\treturn Status::OK();\n}", "CodeBleu_score": 40.1932440797732}]}
{"instance_id": "3da0b4d8ae16", "generation_result": [{"code": "public static Pair<String, String> getHbaseConfig(String hbaseCfgString){\n\t\tString quorum = null;\n\tString znode = null;\n\tString[] cfgArr = hbaseCfgString.split(\",\");\n\tfor (String cfg : cfgArr) {\n\t\tString[] cfgItem = cfg.split(\"=\");\n\t\tif (cfgItem.length == 2) {\n\t\t\tif (cfgItem[0].trim().equals(\"hbase.zookeeper.quorum\")) {\n\t\t\t\tquorum = cfgItem[1].trim();\n\t\t\t}\n\t\t\tif (cfgItem[0].trim().equals(\"zookeeper.znode.parent\")) {\n\t\t\t\tznode = cfgItem[1].trim();\n\t\t\t}\n\t\t}\n\t}\n\tif (quorum == null) {\n\t\tthrow AddaxException.asAddaxException(HBase20xReaderErrorCode.REQUIRED_VALUE, \"hbase.zookeeper.quorum\");\n\t}\n\tif (znode == null) {\n\t\tznode = HBaseKey.DEFAULT_ZNODE;\n\t}\n\tif (!quorum.contains(\":\")) {\n\t\tquorum += \":\" + HBaseKey.DEFAULT_ZOOKEEPER_PORT;\n\t}\n\treturn new Pair<String, String>(quorum, znode);\n}", "CodeBleu_score": 32.01546952106243}, {"code": "public static Pair<String, String> getHbaseConfig(String hbaseCfgString){\n\t\tString zookeeperQuorum = null;\n\tString znodeParent = null;\n\tif (hbaseCfgString.contains(HBaseConstant.ZOOKEEPER_QUORUM)) {\n\t\tzookeeperQuorum = hbaseCfgString.substring(hbaseCfgString.indexOf(HBaseConstant.ZOOKEEPER_QUORUM) + HBaseConstant.ZOOKEEPER_QUORUM.length() + 1);\n\t}\n\tif (hbaseCfgString.contains(HBaseConstant.ZNODE_PARENT)) {\n\t\tznodeParent = hbaseCfgString.substring(hbaseCfgString.indexOf(HBaseConstant.ZNODE_PARENT) + HBaseConstant.ZNODE_PARENT.length() + 1);\n\t}\n\tif (zookeeperQuorum == null) {\n\t\tthrow DataXException.asDataXException(HBaseWriterErrorCode.REQUIRED_VALUE, HBaseConstant.ZOOKEEPER_QUORUM + \" is not defined.\");\n\t}\n\tif (znodeParent == null) {\n\t\tznodeParent = HBaseConstant.DEFAULT_ZNODE_PARENT;\n\t}\n\tif (!zookeeperQuorum.contains(HBaseConstant.COLON)) {\n\t\tzookeeperQuorum += HBaseConstant.COLON + HBaseConstant.DEFAULT_ZOOKEEPER_PORT;\n\t}\n\treturn new Pair<>(zookeeperQuorum, znodeParent);\n}", "CodeBleu_score": 37.068435789594915}, {"code": "public static Pair<String, String> getHbaseConfig(String hbaseCfgString){\n\t\tString[] hbaseCfgStringParts = hbaseCfgString.split(\",\");\n\tString hbaseZookeeperQuorum = hbaseCfgStringParts[0];\n\tString hbaseZnodeParent = HBaseConstant.DEFAULT_ZNODE_PARENT;\n\tif (hbaseCfgStringParts.length > 1) {\n\t\thbaseZnodeParent = hbaseCfgStringParts[1];\n\t}\n\tif (!hbaseZookeeperQuorum.contains(\":\")) {\n\t\thbaseZookeeperQuorum = hbaseZookeeperQuorum + \":\" + HBaseConstant.DEFAULT_ZOOKEEPER_PORT;\n\t}\n\treturn new Pair<>(hbaseZookeeperQuorum, hbaseZnodeParent);\n}", "CodeBleu_score": 29.965291736746263}]}
{"instance_id": "860cae2bb7f4", "generation_result": [{"code": "public static void validateConfig(HbaseSQLWriterConfig cfg){\n\t\tString mode = cfg.getMode();\n\tString hbaseConfig = cfg.getHbaseConfig();\n\tString tableName = cfg.getTableName();\n\tString namespace = cfg.getNamespace();\n\tString encoding = cfg.getEncoding();\n\tString nullMode = cfg.getNullMode();\n\tString nullFormat = cfg.getNullFormat();\n\tString zookeeperQuorum = cfg.getZookeeperQuorum();\n\tString zookeeperClientPort = cfg.getZookeeperClientPort();\n\tString batchSize = cfg.getBatchSize();\n\tString column = cfg.getColumn();\n\tString columnType = cfg.getColumnType();\n\tString where = cfg.getWhere();\n\tString writeBufferSize = cfg.getWriteBufferSize();\n\tString writeThreadCount = cfg.getWriteThreadCount();\n\tString hbaseProperties = cfg.getHbaseProperties();\n\tString kerberosPrincipal = cfg.getKerberosPrincipal();\n\tString kerberosKeytab = cfg.getKerberosKeytab();\n\tString hbaseKerberosPrincipal = cfg.getHbaseKerberosPrincipal();\n\tString hbaseKerberosKeytab = cfg.getHbaseKerberosKeytab();\n\tString hbaseSecurityAuthentication = cfg.getHbaseSecurityAuthentication();\n\tString hbaseSecurityAuthorization = cfg.getHbaseSecurityAuthorization();\n\tString hbaseSaslQop = cfg.getHbaseSaslQop();\n\tString hbaseSaslRealm = cfg.getHbaseSaslRealm();\n\tString hbaseSaslUserName = cfg.getHbaseSaslUserName();\n\tString hbaseSaslPassword = cfg.getHbaseSaslPassword();\n\tString hbaseZkPrincipal = cfg.getHbaseZkPrincipal();\n\tString hbaseZkKeytab = cfg.getHbaseZkKeytab();\n\tString hbaseZkQuorum = cfg.getHbaseZkQuorum();\n\tString hbaseZkClientPort = cfg.getHbaseZkClientPort();\n\tString hbaseZkRootDir = cfg.getHbaseZkRootDir();\n\tString hbaseZkZnodeParent = cfg.getHbaseZkZnodeParent();\n\tString hbaseZkRetryNum = cfg.getHbaseZkRetryNum();\n\tString hbaseZkRetryInterval = cfg.getHbaseZkRetryInterval();\n\tString hbase", "CodeBleu_score": 21.41801328841188}, {"code": "public static void validateConfig(HbaseSQLWriterConfig cfg){\n\t\tif (null == cfg) {\n\t\tthrow AddaxException.asAddaxException(HbaseSQLWriterErrorCode.REQUIRED_VALUE, \"\u53c2\u6570\u4e0d\u80fd\u4e3a\u7a7a\");\n\t}\n\tif (StringUtils.isBlank(cfg.getHbaseConfig())) {\n\t\tthrow AddaxException.asAddaxException(HbaseSQLWriterErrorCode.REQUIRED_VALUE, \"hbaseConfig\u4e0d\u80fd\u4e3a\u7a7a\");\n\t}\n\tif (StringUtils.isBlank(cfg.getZkConfig())) {\n\t\tthrow AddaxException.asAddaxException(HbaseSQLWriterErrorCode.REQUIRED_VALUE, \"zkConfig\u4e0d\u80fd\u4e3a\u7a7a\");\n\t}\n\tif (StringUtils.isBlank(cfg.getTableName())) {\n\t\tthrow AddaxException.asAddaxException(HbaseSQLWriterErrorCode.REQUIRED_VALUE, \"tableName\u4e0d\u80fd\u4e3a\u7a7a\");\n\t}\n\tif (StringUtils.isBlank(cfg.getEncoding())) {\n\t\tthrow AddaxException.asAddaxException(HbaseSQLWriterErrorCode.REQUIRED_VALUE, \"encoding\u4e0d\u80fd\u4e3a\u7a7a\");\n\t}\n\tif (null == cfg.getColumn()) {\n\t\tthrow AddaxException.asAddaxException(HbaseSQLWriterErrorCode.REQUIRED_VALUE, \"column\u4e0d\u80fd\u4e3a\u7a7a\");\n\t}\n\tif (null == cfg.getColumn().getType()) {\n\t\tthrow AddaxException.asAddaxException(HbaseSQLWriterErrorCode.REQUIRED_VALUE, \"column.type\u4e0d\u80fd\u4e3a\u7a7a\");\n\t}\n\tif (StringUtils.isBlank(cfg.getColumn().getName())) {\n\t\tthrow AddaxException.asAddaxException(HbaseSQLWriterErrorCode.REQUIRED_VALUE, \"column.name\u4e0d\u80fd\u4e3a\u7a7a\");\n\t}\n\tif (StringUtils.isBlank(cfg.getColumn().getValue())) {\n\t\tthrow AddaxException.asAddaxException(HbaseSQLWriterErrorCode.REQUIRED_VALUE, \"column.value\u4e0d\u80fd\u4e3a\u7a7a\");\n\t}\n\tif (StringUtils.isBlank(cfg.getHbaseConfig())) {\n\t\tthrow AddaxException.asAddaxException(HbaseSQLWriterErrorCode.REQUIRED_VALUE, \"hbaseConfig\u4e0d\u80fd\u4e3a\u7a7a\");\n\t}\n\tif (StringUtils.isBlank(cfg.getZkConfig())) {\n\t\tthrow AddaxException.asAddaxException(HbaseSQLWriterErrorCode.REQUIRED_VALUE, \"zkConfig\u4e0d\u80fd\u4e3a\u7a7a\");\n\t}\n\tif (StringUtils.isBlank(cfg.getTableName())) {\n\t\tthrow AddaxException.asAddaxException(HbaseSQLWriterErrorCode", "CodeBleu_score": 25.341391117733362}, {"code": "public static void validateConfig(HbaseSQLWriterConfig cfg){\n\t\tif (StringUtils.isBlank(cfg.getHbaseConfig())) {\n\t\tthrow AddaxException.asAddaxException(HbaseSQLWriterErrorCode.REQUIRED_VALUE, \"\u60a8\u9700\u8981\u6307\u5b9aHbase\u7684\u914d\u7f6e\u6587\u4ef6\u8def\u5f84\");\n\t}\n\tif (StringUtils.isBlank(cfg.getZkQuorum())) {\n\t\tthrow AddaxException.asAddaxException(HbaseSQLWriterErrorCode.REQUIRED_VALUE, \"\u60a8\u9700\u8981\u6307\u5b9aHbase\u7684zk\u5730\u5740\");\n\t}\n\tif (StringUtils.isBlank(cfg.getTableName())) {\n\t\tthrow AddaxException.asAddaxException(HbaseSQLWriterErrorCode.REQUIRED_VALUE, \"\u60a8\u9700\u8981\u6307\u5b9aHbase\u7684\u8868\u540d\");\n\t}\n\tif (cfg.getBatchSize() <= 0) {\n\t\tthrow AddaxException.asAddaxException(HbaseSQLWriterErrorCode.ILLEGAL_VALUE, \"batchSize\u4e0d\u80fd\u5c0f\u4e8e\u7b49\u4e8e0\");\n\t}\n\tif (cfg.getBatchSize() > 100) {\n\t\tthrow AddaxException.asAddaxException(HbaseSQLWriterErrorCode.ILLEGAL_VALUE, \"batchSize\u4e0d\u80fd\u5927\u4e8e100\");\n\t}\n\tif (cfg.getBatchSize() == 100 && cfg.getBufferSize() < 100) {\n\t\tthrow AddaxException.asAddaxException(HbaseSQLWriterErrorCode.ILLEGAL_VALUE, \"batchSize\u4e3a100\u65f6\uff0cbufferSize\u4e0d\u80fd\u5c0f\u4e8e100\");\n\t}\n\tif (cfg.getBatchSize() < 100 && cfg.getBufferSize() < 10) {\n\t\tthrow AddaxException.asAddaxException(HbaseSQLWriterErrorCode.ILLEGAL_VALUE, \"batchSize\u5c0f\u4e8e100\u65f6\uff0cbufferSize\u4e0d\u80fd\u5c0f\u4e8e10\");\n\t}\n\tif (cfg.getBatchSize() < 100 && cfg.getBufferSize() > 100) {\n\t\tthrow AddaxException.asAddaxException(HbaseSQLWriterErrorCode.ILLEGAL_VALUE, \"batchSize\u5c0f\u4e8e100\u65f6\uff0cbufferSize\u4e0d\u80fd\u5927\u4e8e100\");\n\t}\n\tif (cfg.getBatchSize() > 100 && cfg.getBufferSize() < 10) {\n\t\tthrow AddaxException.asAddaxException(H", "CodeBleu_score": 24.95762623215158}]}
{"instance_id": "61721c327cf6", "generation_result": [{"code": "private static void kerberosAuthentication(String kerberosPrincipal, String kerberosKeytabFilePath){\n\t\tif (StringUtils.isBlank(kerberosPrincipal) || StringUtils.isBlank(kerberosKeytabFilePath)) {\n\t\treturn;\n\t}\n\ttry {\n\t\tUserGroupInformation.setConfiguration(hadoopConfiguration);\n\t\tUserGroupInformation.loginUserFromKeytab(kerberosPrincipal, kerberosKeytabFilePath);\n\t} catch (IOException e) {\n\t\tLOGGER.error(\"kerberos login error, please check kerberosPrincipal and kerberosKeytabFilePath\", e);\n\t\tthrow AddaxException.asAddaxException(HBaseWriterErrorCode.KERBEROS_LOGIN_ERROR, e);\n\t}\n}", "CodeBleu_score": 41.71336375804118}, {"code": "private static void kerberosAuthentication(String kerberosPrincipal, String kerberosKeytabFilePath){\n\t\tif (StringUtils.isNotBlank(kerberosPrincipal) && StringUtils.isNotBlank(kerberosKeytabFilePath)) {\n\t\ttry {\n\t\t\tUserGroupInformation.setConfiguration(HadoopConfigurationUtil.getHadoopConfiguration());\n\t\t\tUserGroupInformation.loginUserFromKeytab(kerberosPrincipal, kerberosKeytabFilePath);\n\t\t} catch (IOException e) {\n\t\t\tLOGGER.error(\"kerberos login failed\", e);\n\t\t\tthrow AddaxException.asAddaxException(HBase20xReaderErrorCode.KERBEROS_LOGIN_ERROR, e);\n\t\t}\n\t}\n}", "CodeBleu_score": 40.40441872386051}, {"code": "private static void kerberosAuthentication(String kerberosPrincipal, String kerberosKeytabFilePath){\n\t\tif (StringUtils.isNotBlank(kerberosPrincipal) && StringUtils.isNotBlank(kerberosKeytabFilePath)) {\n\t\tConfiguration.set(HBaseKey.HBASE_SECURITY_AUTHENTICATION, HBaseConstant.AUTHENTICATION_TYPE_KERBEROS);\n\t\tConfiguration.set(HBaseKey.HBASE_SECURITY_AUTHORIZATION, HBaseConstant.AUTHORIZATION_TYPE_NONE);\n\t\tConfiguration.set(HBaseKey.HBASE_MASTER_KERBEROS_PRINCIPAL, kerberosPrincipal);\n\t\tConfiguration.set(HBaseKey.HBASE_REGIONSERVER_KERBEROS_PRINCIPAL, kerberosPrincipal);\n\t\tConfiguration.set(HBaseKey.HBASE_REST_SERVER_KERBEROS_PRINCIPAL, kerberosPrincipal);\n\t\tConfiguration.set(HBaseKey.HBASE_ZOOKEEPER_KERBEROS_PRINCIPAL, kerberosPrincipal);\n\t\tConfiguration.set(HBaseKey.HBASE_CLIENT_KEYTAB_FILE, kerberosKeytabFilePath);\n\t\tConfiguration.set(HBaseKey.HBASE_SERVER_KEYTAB_FILE, kerberosKeytabFilePath);\n\t\tConfiguration.set(HBaseKey.HBASE_REST_SERVER_KEYTAB_FILE, kerberosKeytabFilePath);\n\t\tConfiguration.set(HBaseKey.HBASE_ZOOKEEPER_KEYTAB_FILE, kerberosKeytabFilePath);\n\t\ttry {\n\t\t\tUserGroupInformation.setConfiguration(Configuration.get());\n\t\t\tUserGroupInformation.loginUserFromKeytab(kerberosPrincipal, kerberosKeytabFilePath);\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tLOGGER.error(\"Kerberos login failed, please check the configuration of kerberosPrincipal and kerberosKeytabFilePath\", e);\n\t\t\tthrow AddaxException.asAddaxException(HBase20xReaderErrorCode.KERBEROS_LOGIN_ERROR, e);\n\t\t}\n\t}\n}", "CodeBleu_score": 45.31121227373237}]}
{"instance_id": "9ceb7f0bb717", "generation_result": [{"code": "public static Map<String, ThinClientPTable.ThinClientPColumn> parseColType(ResultSet rs)\n            throws SQLException{\n\t\tResultSetMetaData rsmd = rs.getMetaData();\n\tint columnCount = rsmd.getColumnCount();\n\tMap<String, ThinClientPTable.ThinClientPColumn> columnMap = new HashMap<>();\n\tfor (int i = 1; i <= columnCount; i++) {\n\t\tString columnName = rsmd.getColumnName(i);\n\t\tif (columnName == null) {\n\t\t\tthrow new SQLException(\"A result column name was null\");\n\t\t}\n\t\tint sqlType = rsmd.getColumnType(i);\n\t\tif (sqlType == 0) {\n\t\t\tthrow new SQLException(\"A result column type was null\");\n\t\t}\n\t\tPDataType columnType = PDataType.fromTypeId(sqlType);\n\t\tif (columnType == null) {\n\t\t\tthrow new SQLException(\"A result column type was invalid\");\n\t\t}\n\t\tcolumnMap.put(columnName, new ThinClientPTable.ThinClientPColumn(columnName, columnType));\n\t}\n\treturn columnMap;\n}", "CodeBleu_score": 41.68322644793831}, {"code": "public static Map<String, ThinClientPTable.ThinClientPColumn> parseColType(ResultSet rs)\n            throws SQLException{\n\t//    ResultSetMetaData rsmd = rs.getMetaData();\n//    int columnCount = rsmd.getColumnCount();\n//    Map<String, ThinClientPTable.ThinClientPColumn> colTypeMap = new HashMap<String, ThinClientPTable.ThinClientPColumn>(columnCount);\n//    for (int i = 1; i <= columnCount; i++) {\n//        String colName = rsmd.getColumnName(i);\n//        if (colName == null) {\n//            throw new SQLException(\"Column name is null\");\n//        }\n//        int colType = rsmd.getColumnType(i);\n//        if (colType == Types.NULL) {\n//            throw new SQLException(\"Column type is null\");\n//        }\n//        colTypeMap.put(colName, new ThinClientPTable.ThinClientPColumn(colName, PDataType.fromTypeId(colType)));\n//    }\n//    return colTypeMap;\n    return null;\n}", "CodeBleu_score": 3.673165065421735}, {"code": "public static Map<String, ThinClientPTable.ThinClientPColumn> parseColType(ResultSet rs)\n            throws SQLException{\n\t//    Map<String, ThinClientPTable.ThinClientPColumn> columns = new HashMap<>();\n    Map<String, ThinClientPTable.ThinClientPColumn> columns = new TreeMap<>();\n    ResultSetMetaData md = rs.getMetaData();\n    int columnCount = md.getColumnCount();\n    for (int i = 1; i <= columnCount; i++) {\n        String name = md.getColumnName(i);\n        if (name == null) {\n            throw new SQLException(\"A column name was null\");\n        }\n        PDataType type = PDataType.fromTypeId(md.getColumnType(i));\n        if (type == null) {\n            throw new SQLException(\"A column type was null\");\n        }\n        columns.put(name, new ThinClientPTable.ThinClientPColumn(name, type));\n    }\n    return columns;\n}", "CodeBleu_score": 42.597768487532626}]}
{"instance_id": "247fc8882f6f", "generation_result": [{"code": "public static void truncateTable(Connection conn, String tableName){\n\t\ttry {\n\t\tif (conn == null) {\n\t\t\tthrow new AddaxException(\n\t\t\t\t\tHBaseKey.HBASE_07,\n\t\t\t\t\t\"hbase connection instance is null, please check\");\n\t\t}\n\t\tif (StringUtils.isBlank(tableName)) {\n\t\t\tthrow new AddaxException(\n\t\t\t\t\tHBaseKey.HBASE_08,\n\t\t\t\t\t\"table name is null or empty, please check\");\n\t\t}\n\t\tif (!(conn instanceof PhoenixConnection)) {\n\t\t\tthrow new AddaxException(\n\t\t\t\t\tHBaseKey.HBASE_09,\n\t\t\t\t\t\"connection is not an instance of PhoenixConnection, please check\");\n\t\t}\n\t\tPhoenixConnection phxConn = (PhoenixConnection) conn;\n\t\tAdmin admin = phxConn.getQueryServices().getAdmin();\n\t\tif (!admin.tableExists(TableName.valueOf(tableName))) {\n\t\t\tthrow new AddaxException(\n\t\t\t\t\tHBaseKey.HBASE_10,\n\t\t\t\t\t\"table \" + tableName + \" does not exist, please check\");\n\t\t}\n\t\tadmin.disableTable(TableName.valueOf(tableName));\n\t\tadmin.truncateTable(TableName.valueOf(tableName), true);\n\t\tLOGGER.debug(\"table \" + tableName + \" has been truncated\");\n\t} catch (Exception e) {\n\t\tLOGGER.error(\"truncate table \" + tableName + \" failed\", e);\n\t\tthrow AddaxException.asAddaxException(HBaseKey.HBASE_11, e);\n\t} finally {\n\t\tif (conn != null) {\n\t\t\ttry {\n\t\t\t\tconn.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\tLOGGER.error(\"close hbase connection failed\", e);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 39.90479409920172}, {"code": "public static void truncateTable(Connection conn, String tableName){\n\t\ttry {\n\t\tif (conn == null) {\n\t\t\tthrow new AddaxException(ErrorCode.CONFIG_INVALID_EXCEPTION, \"\u672a\u627e\u5230HBase\u8fde\u63a5\u4fe1\u606f\");\n\t\t}\n\t\tif (StringUtils.isBlank(tableName)) {\n\t\t\tthrow new AddaxException(ErrorCode.CONFIG_INVALID_EXCEPTION, \"\u672a\u627e\u5230\u8868\u540d\");\n\t\t}\n\t\tif (!(conn instanceof PhoenixConnection)) {\n\t\t\tthrow new AddaxException(ErrorCode.CONFIG_INVALID_EXCEPTION, \"HBase\u8fde\u63a5\u4e0d\u662fPhoenixConnection\u7c7b\u578b\");\n\t\t}\n\t\tPhoenixConnection phoenixConn = (PhoenixConnection) conn;\n\t\tAdmin admin = phoenixConn.getQueryServices().getAdmin();\n\t\tif (!admin.tableExists(TableName.valueOf(tableName))) {\n\t\t\tthrow new AddaxException(ErrorCode.CONFIG_INVALID_EXCEPTION, \"\u8868\" + tableName + \"\u4e0d\u5b58\u5728\");\n\t\t}\n\t\tadmin.disableTable(TableName.valueOf(tableName));\n\t\tadmin.truncateTable(TableName.valueOf(tableName), true);\n\t\tLOGGER.debug(\"\u8868\" + tableName + \"\u5df2\u6e05\u7a7a\");\n\t} catch (Exception e) {\n\t\tthrow AddaxException.asAddaxException(\n\t\t\t\tErrorCode.CONFIG_INVALID_EXCEPTION, e);\n\t} finally {\n\t\tif (conn != null) {\n\t\t\ttry {\n\t\t\t\tconn.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\tLOGGER.error(\"\u5173\u95edHBase\u8fde\u63a5\u5931\u8d25\", e);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 40.09958479135165}, {"code": "public static void truncateTable(Connection conn, String tableName){\n\t\ttry {\n\t\tif (conn == null) {\n\t\t\tthrow new AddaxException(HBaseKey.HBASE_07);\n\t\t}\n\t\tif (StringUtils.isBlank(tableName)) {\n\t\t\tthrow new AddaxException(HBaseKey.HBASE_08);\n\t\t}\n\t\tif (!(conn instanceof PhoenixConnection)) {\n\t\t\tthrow new AddaxException(HBaseKey.HBASE_09);\n\t\t}\n\t\tPhoenixConnection phoenixConn = (PhoenixConnection) conn;\n\t\tAdmin admin = phoenixConn.getQueryServices().getAdmin();\n\t\tif (!admin.tableExists(TableName.valueOf(tableName))) {\n\t\t\tthrow new AddaxException(HBaseKey.HBASE_10);\n\t\t}\n\t\tadmin.disableTable(TableName.valueOf(tableName));\n\t\tadmin.truncateTable(TableName.valueOf(tableName), true);\n\t\tLOGGER.debug(\"Table {} truncated.\", tableName);\n\t} catch (IOException e) {\n\t\tthrow new AddaxException(HBaseKey.HBASE_11, e);\n\t} finally {\n\t\ttry {\n\t\t\tif (conn != null) {\n\t\t\t\tconn.close();\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\tLOGGER.error(\"Failed to close connection.\", e);\n\t\t}\n\t}\n}", "CodeBleu_score": 39.166402762016425}]}
{"instance_id": "ac87e1b9a54e", "generation_result": [{"code": "private void addSourceFileByType(String filePath){\n\t\t// 1. Get the file type of the given file path.\n\tString fileType = getFileType(filePath);\n\t// 2. If the file type is supported, add the file to the source files list.\n\tif (fileType.equals(\"text\") || fileType.equals(\"csv\") || fileType.equals(\"tsv\")) {\n\t\tsourceFiles.add(filePath);\n\t\tLOG.info(\"Add file [{}] to source files\", filePath);\n\t} else {\n\t\t// 3. If the file type is not supported, throw an exception.\n\t\tString errMsg = String.format(\"Currently only supports text, csv, and tsv files, but got [%s]\", fileType);\n\t\tLOG.error(errMsg);\n\t\tthrow AddaxException.asAddaxException(StorageReaderErrorCode.ILLEGAL_VALUE, errMsg);\n\t}\n}", "CodeBleu_score": 35.384453664802045}, {"code": "private void addSourceFileByType(String filePath){\n\t\tString fileType = this.config.getString(Key.FILE_TYPE);\n\tif (fileType == null) {\n\t\tthis.sourceFiles.add(filePath);\n\t\treturn;\n\t}\n\n\tString fileTypeInPath = filePath.substring(filePath.lastIndexOf(\".\") + 1);\n\tif (fileTypeInPath.equalsIgnoreCase(fileType)) {\n\t\tthis.sourceFiles.add(filePath);\n\t} else {\n\t\tLOGGER.error(\"The file type of the given file path is not supported. The file type of the given file path is: {}, the configured file type is: {}\", fileTypeInPath, fileType);\n\t\tthrow AddaxException.asAddaxException(StorageReaderErrorCode.ILLEGAL_VALUE,\n\t\t\t\tString.format(\"The file type of the given file path is not supported. The file type of the given file path is: %s, the configured file type is: %s\", fileTypeInPath, fileType));\n\t}\n}", "CodeBleu_score": 32.100456818233106}, {"code": "private void addSourceFileByType(String filePath){\n\t\tString fileType = filePath.substring(filePath.lastIndexOf(\".\") + 1).toLowerCase();\n\tif (fileType.equals(\"orc\")) {\n\t\tsourceFiles.add(filePath);\n\t} else if (fileType.equals(\"seq\")) {\n\t\tsourceFiles.add(filePath);\n\t} else if (fileType.equals(\"text\")) {\n\t\tsourceFiles.add(filePath);\n\t} else if (fileType.equals(\"rc\")) {\n\t\tsourceFiles.add(filePath);\n\t} else if (fileType.equals(\"parquet\")) {\n\t\tsourceFiles.add(filePath);\n\t} else {\n\t\tlogger.error(\"Unsupported file type: \" + filePath);\n\t\tthrow AddaxException.asAddaxException(StorageReaderErrorCode.UNSUPPORTED_FILE_TYPE, \"file type:\" + fileType);\n\t}\n}", "CodeBleu_score": 31.914270022951563}]}
{"instance_id": "5e6a66d06162", "generation_result": [{"code": "public void sequenceFileStartRead(String sourceSequenceFilePath, Configuration readerSliceConfig,\n            RecordSender recordSender, TaskPluginCollector taskPluginCollector){\n\t\tFileSystem fs = null;\n\tFSDataInputStream inputStream = null;\n\ttry {\n\t\tfs = FileSystem.get(this.getPluginJobConf());\n\t\tinputStream = fs.open(new Path(sourceSequenceFilePath));\n\t} catch (Exception e) {\n\t\tString errorMessage = String.format(\"Failed to read sequence file [%s] as HDFS file system.\", sourceSequenceFilePath);\n\t\tLOG.error(errorMessage);\n\t\tthrow AddaxException.asAddaxException(StorageReaderErrorCode.READ_FILE_IO_ERROR, e);\n\t}\n\tString compressType = readerSliceConfig.getString(Key.COMPRESS);\n\tString compressCodecClassName = readerSliceConfig.getString(Key.COMPRESS_CODEC_CLASS);\n\tif (compressType != null && compressCodecClassName != null) {\n\t\ttry {\n\t\t\tClass compressCodecClass = Class.forName(compressCodecClassName);\n\t\t\tCompressionCodec compressionCodec = (CompressionCodec) ReflectionUtils.newInstance(compressCodecClass,\n\t\t\t\t\tthis.getPluginJobConf());\n\t\t\tinputStream = compressionCodec.createInputStream(inputStream);\n\t\t} catch (Exception e) {\n\t\t\tString errorMessage = String.format(\"Failed to read sequence file [%s] as compressed file system.\",\n\t\t\t\t\tsourceSequenceFilePath);\n\t\t\tLOG.error(errorMessage);\n\t\t\tthrow AddaxException.asAddaxException(StorageReaderErrorCode.READ_FILE_IO_ERROR, e);\n\t\t}\n\t}\n\tStorageReaderUtil.transportOneFile(inputStream, recordSender, taskPluginCollector, compressType,\n\t\t\treaderSliceConfig);\n}", "CodeBleu_score": 40.16831065463965}, {"code": "public void sequenceFileStartRead(String sourceSequenceFilePath, Configuration readerSliceConfig,\n            RecordSender recordSender, TaskPluginCollector taskPluginCollector){\n\t\n}", "CodeBleu_score": 4.241384187539755}, {"code": "public void sequenceFileStartRead(String sourceSequenceFilePath, Configuration readerSliceConfig,\n            RecordSender recordSender, TaskPluginCollector taskPluginCollector){\n\t\tFileSystem fs = null;\n\tFSDataInputStream inputStream = null;\n\ttry {\n\t\tfs = FileSystem.get(readerSliceConfig);\n\t\tinputStream = fs.open(new Path(sourceSequenceFilePath));\n\t\t// \u8bb0\u5f55\u8bfb\u53d6\u5f00\u59cb\u4f4d\u7f6e\n\t\ttaskPluginCollector.collectDirtyRecord(0, \"sequence file starts to read data\");\n\t\tStorageReaderUtil.transportOneRecord(inputStream, recordSender, readerSliceConfig, taskPluginCollector);\n\t} catch (Exception e) {\n\t\tLOGGER.error(\"Addax reader or writer gets an error:\", e);\n\t\tthrow AddaxException.asAddaxException(StorageReaderErrorCode.READ_RECORD_FAILED, e);\n\t} finally {\n\t\tif (inputStream != null) {\n\t\t\ttry {\n\t\t\t\tinputStream.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\tLOGGER.error(\"close stream error:\", e);\n\t\t\t}\n\t\t}\n\t\tif (fs != null) {\n\t\t\ttry {\n\t\t\t\tfs.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\tLOGGER.error(\"close FileSystem error:\", e);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 33.205241484003615}]}
{"instance_id": "c450f959616c", "generation_result": [{"code": "public boolean checkHdfsFileType(String filepath, String specifiedFileType){\n\t\tString fileType = null;\n\ttry {\n\t\tfileType = getHdfsFileType(filepath);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Failed to get HDFS file type for file \" + filepath, e);\n\t\tthrow AddaxException.asAddaxException(StorageReaderErrorCode.ILLEGAL_VALUE, e);\n\t}\n\tif (fileType == null) {\n\t\tlogger.error(\"Failed to get HDFS file type for file \" + filepath);\n\t\tthrow AddaxException.asAddaxException(StorageReaderErrorCode.ILLEGAL_VALUE, \"Failed to get HDFS file type for file \" + filepath);\n\t}\n\tif (fileType.equals(specifiedFileType)) {\n\t\treturn true;\n\t} else {\n\t\tlogger.error(\"The specified file type \" + specifiedFileType + \" does not match the actual file type \" + fileType + \" for file \" + filepath);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 30.339858140958015}, {"code": "public boolean checkHdfsFileType(String filepath, String specifiedFileType){\n\t\tboolean isFileType = false;\n\tFileSystem fs = null;\n\ttry {\n\t\tfs = FileSystem.get(new Configuration());\n\t\tFileStatus fileStatus = fs.getFileStatus(new Path(filepath));\n\t\tString fileType = fileStatus.isFile() ? fileStatus.getPath().getName().substring(fileStatus.getPath().getName().lastIndexOf(\".\") + 1) : fileStatus.getPath().getName();\n\t\tif (specifiedFileType.equals(fileType)) {\n\t\t\tisFileType = true;\n\t\t}\n\t} catch (Exception e) {\n\t\tLOGGER.error(\"checkHdfsFileType function error, please check your hdfs config\", e);\n\t\tthrow AddaxException.asAddaxException(StorageReaderErrorCode.READ_RECORD_FAIL, e);\n\t} finally {\n\t\tif (null != fs) {\n\t\t\ttry {\n\t\t\t\tfs.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\tLOGGER.error(\"close hdfs FileSystem error\", e);\n\t\t\t}\n\t\t}\n\t}\n\treturn isFileType;\n}", "CodeBleu_score": 28.910569108345204}, {"code": "public boolean checkHdfsFileType(String filepath, String specifiedFileType){\n\t\tboolean fileIsType = false;\n\tFileSystem fs = null;\n\ttry {\n\t\tfs = FileSystem.get(new Configuration());\n\t\tFileStatus fileStatus = fs.getFileStatus(new Path(filepath));\n\t\tString fileType = fileStatus.isFile() ? getFileType(fileStatus) : getFileType(fs.listStatus(new Path(filepath)));\n\t\tif (fileType.equals(specifiedFileType)) {\n\t\t\tfileIsType = true;\n\t\t}\n\t} catch (IOException e) {\n\t\tLOGGER.error(\"Error occurred while checking file type for file: \" + filepath, e);\n\t\tthrow AddaxException.asAddaxException(StorageReaderErrorCode.FILE_TYPE_ERROR, e);\n\t} finally {\n\t\tif (fs != null) {\n\t\t\ttry {\n\t\t\t\tfs.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\tLOGGER.error(\"Error occurred while closing filesystem\", e);\n\t\t\t\tthrow AddaxException.asAddaxException(StorageReaderErrorCode.FILE_TYPE_ERROR, e);\n\t\t\t}\n\t\t}\n\t}\n\treturn fileIsType;\n}", "CodeBleu_score": 29.820567310812883}]}
{"instance_id": "1bf487d2cc64", "generation_result": [{"code": "public static void closeConnection(Connection hConnection){\n\t\tif (hConnection != null) {\n\t\ttry {\n\t\t\thConnection.close();\n\t\t} catch (IOException e) {\n\t\t\tthrow AddaxException.asAddaxException(HBaseWriterErrorCode.CLOSE_HBASE_CONNECTION_ERROR, e);\n\t\t}\n\t}\n}", "CodeBleu_score": 54.84456835391431}, {"code": "public static void closeConnection(Connection hConnection){\n\t\tif (hConnection != null) {\n\t\ttry {\n\t\t\thConnection.close();\n\t\t} catch (IOException e) {\n\t\t\tthrow AddaxException.asAddaxException(\n\t\t\t\t\tHBaseWriterErrorCode.CLOSE_HBASE_CONNECTION_ERROR, e);\n\t\t}\n\t}\n}", "CodeBleu_score": 54.87686300123104}, {"code": "public static void closeConnection(Connection hConnection){\n\t\tif (hConnection != null) {\n\t\ttry {\n\t\t\thConnection.close();\n\t\t} catch (IOException e) {\n\t\t\tthrow AddaxException.asAddaxException(HBaseWriterErrorCode.CLOSE_HBASE_CONNECTION_ERROR, e);\n\t\t}\n\t}\n}", "CodeBleu_score": 54.84456835391431}]}
{"instance_id": "680728cbc3ec", "generation_result": [{"code": "public static void closeAdmin(Admin admin){\n\t\tif (admin != null) {\n\t\ttry {\n\t\t\tadmin.close();\n\t\t} catch (IOException e) {\n\t\t\tthrow AddaxException.asAddaxException(HBaseWriterErrorCode.CLOSE_ADMIN_ERROR, e);\n\t\t}\n\t}\n}", "CodeBleu_score": 53.18241889994275}, {"code": "public static void closeAdmin(Admin admin){\n\t\tif (admin != null) {\n\t\ttry {\n\t\t\tadmin.close();\n\t\t} catch (IOException e) {\n\t\t\tthrow AddaxException.asAddaxException(HBaseWriterErrorCode.CLOSE_ADMIN_ERROR, e);\n\t\t}\n\t}\n}", "CodeBleu_score": 53.18241889994275}, {"code": "public static void closeAdmin(Admin admin){\n\t\tif (null != admin) {\n\t\ttry {\n\t\t\tadmin.close();\n\t\t} catch (IOException e) {\n\t\t\tthrow AddaxException.asAddaxException(HBaseWriterErrorCode.CLOSE_ADMIN_ERROR, e);\n\t\t}\n\t}\n}", "CodeBleu_score": 71.86886406886447}]}
{"instance_id": "ce50bd53abef", "generation_result": [{"code": "private void convertCellToLine(Cell cell, Record record)\n            throws Exception{\n\t// The row key is the row key of the current cell.\n        String rowKey = Bytes.toString(CellUtil.cloneRow(cell));\n        String rowKeyFormat = this.getRowKeyFormat();\n        String rowKeyDelimiter = this.getRowKeyDelimiter();\n        if (StringUtils.isNotBlank(rowKeyFormat)) {\n            rowKey = String.format(rowKeyFormat, rowKey);\n        }\n        if (StringUtils.isNotBlank(rowKeyDelimiter)) {\n            rowKey = rowKey.replaceAll(HBaseConstant.HBASE_ROWKEY_DELIMITER, rowKeyDelimiter);\n        }\n        record.setColumn(HBaseKey.HBASE_ROWKEY, new LongColumn(rowKey));\n// The timestamp is the timestamp of the current cell.\n        LongColumn timestampColumn = new LongColumn(cell.getTimestamp());\n        record.setColumn(HBaseKey.HBASE_TIMESTAMP, timestampColumn);\n// The column family is the column family of the current cell.\n        String columnFamily = Bytes.toString(CellUtil.cloneFamily(cell));\n        record.setColumn(HBaseKey.HBASE_FAMILY, new LongColumn(columnFamily));\n// The qualifier is the qualifier of the current cell.\n        String qualifier = Bytes.toString(CellUtil.cloneQualifier(cell));\n        record.setColumn(HBaseKey.HBASE_QUALIFIER, new LongColumn(qualifier));\n// The value is the value of the current cell.\n        String value = Bytes.toString(CellUtil.cloneValue(cell));\n        record.setColumn(HBaseKey.HBASE_VALUE, new LongColumn(value));\n}", "CodeBleu_score": 33.44522365359148}, {"code": "private void convertCellToLine(Cell cell, Record record)\n            throws Exception{\n\t\tbyte[] rowKey = cell.getRowArray();\n\tbyte[] family = CellUtil.cloneFamily(cell);\n\tbyte[] qualifier = CellUtil.cloneQualifier(cell);\n\tbyte[] value = CellUtil.cloneValue(cell);\n\tString rowKeyString = Bytes.toString(rowKey);\n\tString familyString = Bytes.toString(family);\n\tString qualifierString = Bytes.toString(qualifier);\n\tString valueString = Bytes.toString(value);\n\tLongColumn rowKeyColumn = new LongColumn(rowKeyString);\n\trecord.addColumn(HBaseKey.KEY, rowKeyColumn);\n\tLongColumn timestampColumn = new LongColumn(cell.getTimestamp());\n\trecord.addColumn(HBaseKey.TIMESTAMP, timestampColumn);\n\tLongColumn familyColumn = new LongColumn(familyString);\n\trecord.addColumn(HBaseKey.FAMILY, familyColumn);\n\tLongColumn qualifierColumn = new LongColumn(qualifierString);\n\trecord.addColumn(HBaseKey.QUALIFIER, qualifierColumn);\n\tLongColumn valueColumn = new LongColumn(valueString);\n\trecord.addColumn(HBaseKey.VALUE, valueColumn);\n}", "CodeBleu_score": 32.827227557076164}, {"code": "private void convertCellToLine(Cell cell, Record record)\n            throws Exception{\n\t//    String rowKey = Bytes.toString(cell.getRowArray(), cell.getRowOffset(), cell.getRowLength());\n    String rowKey = new String(cell.getRowArray(), cell.getRowOffset(), cell.getRowLength(), StandardCharsets.UTF_8);\n    record.setColumn(0, new StringColumn(rowKey));\n    record.setColumn(1, new StringColumn(cell.getFamilyArray() == null ? null : new String(cell.getFamilyArray(), cell.getFamilyOffset(), cell.getFamilyLength(), StandardCharsets.UTF_8)));\n    record.setColumn(2, new StringColumn(cell.getQualifierArray() == null ? null : new String(cell.getQualifierArray(), cell.getQualifierOffset(), cell.getQualifierLength(), StandardCharsets.UTF_8)));\n    record.setColumn(3, new LongColumn(cell.getTimestamp()));\n    record.setColumn(4, new StringColumn(cell.getValueArray() == null ? null : new String(cell.getValueArray(), cell.getValueOffset(), cell.getValueLength(), StandardCharsets.UTF_8)));\n}", "CodeBleu_score": 18.777429860915536}]}
{"instance_id": "29e8f3a99f0c", "generation_result": [{"code": "public static byte[] convertUserStartRowkey(Configuration configuration){\n\t\tString startRowkey = configuration.getString(HBaseKey.START_ROWKEY);\n\tif (StringUtils.isBlank(startRowkey)) {\n\t\treturn new byte[0];\n\t}\n\tif (startRowkey.startsWith(\"0x\")) {\n\t\treturn Bytes.fromHex(startRowkey.substring(2));\n\t}\n\treturn startRowkey.getBytes(Charset.forName(HBaseConstant.DEFAULT_ENCODING));\n}", "CodeBleu_score": 44.8058956530777}, {"code": "public static byte[] convertUserStartRowkey(Configuration configuration){\n\t\tString userStartRowkey = configuration.getString(HBaseKey.HBASE_SCAN_START_ROWKEY);\n\tif (StringUtils.isBlank(userStartRowkey)) {\n\t\treturn new byte[0];\n\t}\n\treturn Bytes.toBytesBinary(userStartRowkey);\n}", "CodeBleu_score": 35.36461652830479}, {"code": "public static byte[] convertUserStartRowkey(Configuration configuration){\n\t\tString startRowkey = configuration.getString(HBaseKey.START_ROWKEY);\n\tif (StringUtils.isBlank(startRowkey)) {\n\t\treturn new byte[0];\n\t} else {\n\t\treturn Bytes.toBytesBinary(startRowkey);\n\t}\n}", "CodeBleu_score": 42.25116580037734}]}
{"instance_id": "f5ad51545b10", "generation_result": [{"code": "public static byte[] convertInnerStartRowkey(Configuration configuration){\n\t\tString startRowkey = configuration.getString(HBaseKey.START_ROWKEY);\n\tif (StringUtils.isBlank(startRowkey)) {\n\t\treturn new byte[0];\n\t}\n\treturn Bytes.toBytesBinary(startRowkey);\n}", "CodeBleu_score": 65.22878533967483}, {"code": "public static byte[] convertInnerStartRowkey(Configuration configuration){\n\t\tString startRowkey = configuration.getString(HBaseKey.START_ROWKEY);\n\tif (StringUtils.isBlank(startRowkey)) {\n\t\treturn new byte[0];\n\t}\n\treturn Bytes.toBytesBinary(startRowkey);\n}", "CodeBleu_score": 65.22878533967483}, {"code": "public static byte[] convertInnerStartRowkey(Configuration configuration){\n\t\tString startRowkey = configuration.getString(HBaseKey.START_ROWKEY);\n\tif (StringUtils.isBlank(startRowkey)) {\n\t\treturn new byte[0];\n\t}\n\treturn Bytes.toBytesBinary(startRowkey);\n}", "CodeBleu_score": 65.22878533967483}]}
{"instance_id": "8618eef8b0e9", "generation_result": [{"code": "public KafkaTbQueueMsg(ConsumerRecord<String, byte[]> record){\n\t\tsuper(new TbQueueMsgHeaders(DefaultTbQueueMsgHeaders.builder()\n\t\t\t.withPartition(record.partition())\n\t\t\t.withTimestamp(record.timestamp())\n\t\t\t.withKey(UUID.fromString(record.key()))\n\t\t\t.withOffset(record.offset())\n\t\t\t.withTopicName(record.topic())\n\t\t\t.build()), record.value());\n}", "CodeBleu_score": 23.72904619843342}, {"code": "public KafkaTbQueueMsg(ConsumerRecord<String, byte[]> record){\n\t\tsuper(UUID.fromString(record.key()));\n\tTbQueueMsgHeaders headers = new DefaultTbQueueMsgHeaders();\n\tfor (Header header : record.headers()) {\n\t\theaders.add(header.key(), new String(header.value()));\n\t}\n\tsetHeaders(headers);\n\tsetData(record.value());\n}", "CodeBleu_score": 41.390002549582114}, {"code": "public KafkaTbQueueMsg(ConsumerRecord<String, byte[]> record){\n\t\tthis.key = UUID.fromString(record.key());\n\tthis.headers = new DefaultTbQueueMsgHeaders(record.headers());\n\tthis.data = record.value();\n}", "CodeBleu_score": 43.47063434148068}]}
{"instance_id": "46484df184dd", "generation_result": [{"code": "public TbQueueProducer<TbProtoQueueMsg<ToTransportMsg>> createTransportNotificationsMsgProducer(){\n\t\tTbKafkaProducerTemplate<TbProtoQueueMsg<ToTransportMsg>> producerTemplate = new TbKafkaProducerTemplate<>(kafkaTransportNotificationsSettings, clientId + \"-transport-notifications\", kafkaTransportNotificationsTopic);\n\tproducerTemplate.setAdmin(admin);\n\treturn producerTemplate;\n}", "CodeBleu_score": 30.404268838348354}, {"code": "public TbQueueProducer<TbProtoQueueMsg<ToTransportMsg>> createTransportNotificationsMsgProducer(){\n\t\tString serviceId = tbCoreComponent.getTransportService().getServiceId();\n\tString clientId = \"tb_transport_notifications_\" + serviceId;\n\tString defaultTopic = TbQueueTransportNotificationSettings.getNotificationsTopic();\n\tTbKafkaProducerTemplate<TbProtoQueueMsg<ToTransportMsg>> kafkaProducerTemplate = new TbKafkaProducerTemplate<>(\n\t\t\ttbKafkaSettings, clientId, defaultTopic, TbProtoQueueMsg.class);\n\tkafkaProducerTemplate.setAdmin(new TbKafkaAdmin(tbKafkaSettings));\n\treturn kafkaProducerTemplate;\n}", "CodeBleu_score": 41.631322840861344}, {"code": "public TbQueueProducer<TbProtoQueueMsg<ToTransportMsg>> createTransportNotificationsMsgProducer(){\n\t\treturn new TbKafkaProducerTemplate<>(tbKafkaSettings, tbServiceInfoProvider,\n\t\t\tnew TbKafkaTopicConfigs(tbQueueTransportNotificationSettings.getNotificationsTopic()),\n\t\t\tToTransportMsg.class);\n}", "CodeBleu_score": 18.08367012490652}]}
{"instance_id": "4ac56ef9f89a", "generation_result": [{"code": "public TbQueueConsumer<TbProtoQueueMsg<ToCoreNotificationMsg>> createToCoreNotificationsMsgConsumer(){\n\t\treturn new TbKafkaConsumerTemplate<>(\n\t\t\tnew TbKafkaSettings(\n\t\t\t\t\t\"tb_core\",\n\t\t\t\t\t\"tb_core_notifications_consumer\",\n\t\t\t\t\tgetTopic(ServiceType.TB_CORE, ServiceType.TB_CORE, \"notifications\"),\n\t\t\t\t\tgetTopic(ServiceType.TB_CORE, ServiceType.TB_CORE, \"notifications\"),\n\t\t\t\t\tnew TbKafkaTopicConfigs(\n\t\t\t\t\t\t\tTbKafkaTopicConfigs.TB_CORE_NOTIFICATIONS_TOPIC_PARTITIONS,\n\t\t\t\t\t\t\tTbKafkaTopicConfigs.TB_CORE_NOTIFICATIONS_TOPIC_REPLICAS\n\t\t\t\t\t)\n\t\t\t),\n\t\t\tnew TbKafkaConsumerStatsService(),\n\t\t\t(topic, data) -> TbProtoQueueMsg.decode(topic, data, ToCoreNotificationMsg.parser())\n\t);\n}", "CodeBleu_score": 27.97331634529478}, {"code": "public TbQueueConsumer<TbProtoQueueMsg<ToCoreNotificationMsg>> createToCoreNotificationsMsgConsumer(){\n\t\treturn new TbKafkaConsumerTemplate<>(\n\t\t\tnew TbKafkaConsumerStatsService(\n\t\t\t\t\tnew TbKafkaAdmin(\n\t\t\t\t\t\t\tnew TbKafkaSettings(),\n\t\t\t\t\t\t\tnew TbKafkaTopicConfigs(\n\t\t\t\t\t\t\t\t\tnew TbKafkaSettings(),\n\t\t\t\t\t\t\t\t\tServiceType.TB_CORE,\n\t\t\t\t\t\t\t\t\tnew TbQueueCoreSettings()\n\t\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t),\n\t\t\tnew TbKafkaSettings().getToCoreNotificationsTopic(),\n\t\t\t\"tb-core-notifications-consumer\",\n\t\t\t\"tb-core-notifications-group\",\n\t\t\tToCoreNotificationMsg.parser()\n\t);\n}", "CodeBleu_score": 16.868321237408317}, {"code": "public TbQueueConsumer<TbProtoQueueMsg<ToCoreNotificationMsg>> createToCoreNotificationsMsgConsumer(){\n\t\treturn new TbKafkaConsumerTemplate<>(\n\t\t\tnew TbKafkaConsumerStatsService(),\n\t\t\tcreateToCoreNotificationsMsgTopic(),\n\t\t\tgetToCoreNotificationsMsgConsumerGroupId(),\n\t\t\tcreateToCoreNotificationsMsgDecoder(),\n\t\t\tgetToCoreNotificationsMsgConsumerSettings(),\n\t\t\tgetKafkaAdmin());\n}", "CodeBleu_score": 9.525808460619556}]}
{"instance_id": "e13a82b26338", "generation_result": [{"code": "protected void doSubscribe(List<String> topicNames){\n\t//        if (topicNames.isEmpty()) {\n//            log.info(\"[{}] No topics provided for subscription. Unsubscribing from all topics.\", consumerId);\n//            unsubscribe();\n//        } else {\n//            log.info(\"[{}] Subscribing to topics: {}\", consumerId, topicNames);\n//            subscribe(topicNames);\n//        }\n}", "CodeBleu_score": 4.603291878150888}, {"code": "protected void doSubscribe(List<String> topicNames){\n\t\tif (topicNames.isEmpty()) {\n\t\tlog.info(\"No topics provided, unsubscribing from all topics\");\n\t\tconsumer.unsubscribe();\n\t} else {\n\t\tlog.info(\"Subscribing to topics: [{}]\", String.join(\", \", topicNames));\n\t\tconsumer.subscribe(topicNames);\n\t}\n}", "CodeBleu_score": 56.95062516523127}, {"code": "protected void doSubscribe(List<String> topicNames){\n\tif (topicNames == null) {\nlog.info(\"Topic names list is empty, unsubscribing consumer from all topics.\");\nunsubscribe();\nreturn;\n}\n\nfor (String topicName : topicNames) {\ntry {\ncreateTopicIfNotExists(topicName);\n} catch (IOException e) {\nlog.error(\"Failed to create topic [{}]\", topicName, e);\nthrow new RuntimeException(e);\n}\n}\n\nlog.info(\"Subscribing consumer to topics: {}\", topicNames);\nsubscribe(topicNames);\n}", "CodeBleu_score": 45.344992443129144}]}
{"instance_id": "8a20d0b48703", "generation_result": [{"code": "protected List<ConsumerRecord<String, byte[]>> doPoll(long durationInMillis){\n\t\tStopWatch stopWatch = new StopWatch();\n\tstopWatch.start();\n\tlog.trace(\"[{}] Polling topic [{}] for [{}] ms.\", consumerId, topic, durationInMillis);\n\tList<ConsumerRecord<String, byte[]>> records = new ArrayList<>();\n\tConsumerRecords<String, byte[]> consumerRecords = consumer.poll(Duration.ofMillis(durationInMillis));\n\tif (!consumerRecords.isEmpty()) {\n\t\tfor (ConsumerRecord<String, byte[]> consumerRecord : consumerRecords) {\n\t\t\trecords.add(consumerRecord);\n\t\t}\n\t}\n\tstopWatch.stop();\n\tlog.trace(\"[{}] Polled [{}] records from topic [{}] in [{}] ms.\", consumerId, records.size(), topic, stopWatch.getTotalTimeMillis());\n\treturn records;\n}", "CodeBleu_score": 57.88872967457287}, {"code": "protected List<ConsumerRecord<String, byte[]>> doPoll(long durationInMillis){\n\t\tStopWatch stopWatch = new StopWatch();\n\tstopWatch.start();\n\tlog.trace(\"[{}] Start polling messages\", topic);\n\tList<ConsumerRecord<String, byte[]>> records = new ArrayList<>();\n\ttry {\n\t\trecords = consumer.poll(Duration.ofMillis(durationInMillis)).records(topic);\n\t} catch (Exception e) {\n\t\tlog.error(\"[{}] Failed to poll messages due to: {}\", topic, e.getMessage(), e);\n\t}\n\tstopWatch.stop();\n\tlog.trace(\"[{}] Polling messages took: {}ms\", topic, stopWatch.getTotalTimeMillis());\n\treturn records;\n}", "CodeBleu_score": 54.194815935767494}, {"code": "protected List<ConsumerRecord<String, byte[]>> doPoll(long durationInMillis){\n\t\tStopWatch stopWatch = new StopWatch();\n\tstopWatch.start();\n\tlog.trace(\"[{}] Polling Kafka topic [{}] for [{}] ms\", this.getClass().getSimpleName(), this.topic, durationInMillis);\n\tList<ConsumerRecord<String, byte[]>> records = this.consumer.poll(Duration.ofMillis(durationInMillis)).records(this.topic);\n\tstopWatch.stop();\n\tlog.trace(\"[{}] Polled [{}] records from Kafka topic [{}] in [{}] ms\", this.getClass().getSimpleName(), records.size(), this.topic, stopWatch.getTotalTimeMillis());\n\treturn records;\n}", "CodeBleu_score": 55.72602134975482}]}
{"instance_id": "328e4c39a8e1", "generation_result": [{"code": "public void onMsg(TbContext ctx, TbMsg msg){\n\t\ttry {\n\t\tif (!initialized) {\n\t\t\tinit(ctx);\n\t\t}\n\t\tif (!initialized) {\n\t\t\treturn;\n\t\t}\n\t\tTbMsgMetaData metaData = msg.getMetaData();\n\t\tString topic = topicPattern.replace(\"${deviceType}\", metaData.getDeviceType())\n\t\t\t\t.replace(\"${deviceName}\", metaData.getDeviceName())\n\t\t\t\t.replace(\"${customerId}\", metaData.getCustomerId().toString())\n\t\t\t\t.replace(\"${ruleChainId}\", metaData.getRuleChainId().toString())\n\t\t\t\t.replace(\"${ruleNodeId}\", metaData.getRuleNodeId().toString());\n\t\tString key = keyPattern.replace(\"${deviceType}\", metaData.getDeviceType())\n\t\t\t\t.replace(\"${deviceName}\", metaData.getDeviceName())\n\t\t\t\t.replace(\"${customerId}\", metaData.getCustomerId().toString())\n\t\t\t\t.replace(\"${ruleChainId}\", metaData.getRuleChainId().toString())\n\t\t\t\t.replace(\"${ruleNodeId}\", metaData.getRuleNodeId().toString());\n\t\tString payload = msg.getData();\n\t\tctx.tellNext(msg, new TbMsg(msg.getQueueName(), topic, key, payload, msg.getDataType(), msg.getMetaData()));\n\t} catch (Exception e) {\n\t\tlog.error(\"Failed to process message\", e);\n\t\tctx.tellFailure(msg, e);\n\t}\n}", "CodeBleu_score": 34.04222059545804}, {"code": "public void onMsg(TbContext ctx, TbMsg msg){\n\t\tif (!initialized) {\n\t\tctx.tellFailure(msg, new TbNodeException(\"Kafka producer is not initialized!\"));\n\t\treturn;\n\t}\n\tString topic = getTopic(msg);\n\tString key = getKey(msg);\n\tif (topic == null || key == null) {\n\t\tctx.tellFailure(msg, new TbNodeException(\"Failed to determine topic or key!\"));\n\t\treturn;\n\t}\n\ttry {\n\t\tctx.getSelf().tellAsync(msg, new KafkaPublisher(topic, key, msg));\n\t} catch (Exception e) {\n\t\tctx.tellFailure(msg, e);\n\t}\n}", "CodeBleu_score": 25.788957979202642}, {"code": "public void onMsg(TbContext ctx, TbMsg msg){\n\t\ttry {\n\t\tlog.debug(\"Executing Kafka 'publish' node, msg: [{}]\", msg);\n\t\tTbMsgMetaData metaData = msg.getMetaData();\n\t\tString topic = resolveTopic(ctx, msg);\n\t\tString key = resolveKey(ctx, msg);\n\t\tString payload = resolvePayload(ctx, msg);\n\t\tString headers = resolveHeaders(ctx, msg);\n\t\tString contentType = resolveContentType(ctx, msg);\n\t\tString charset = resolveCharset(ctx, msg);\n\t\tBoolean sync = resolveSync(ctx, msg);\n\t\tlog.debug(\"Kafka 'publish' node initialized, msg: [{}], topic: [{}], key: [{}], payload: [{}], headers: [{}], contentType: [{}], charset: [{}], sync: [{}]\", msg, topic, key, payload, headers, contentType, charset, sync);\n\t\tctx.tellNext(msg, new KafkaPublishNodeMsg(topic, key, payload, headers, contentType, charset, sync));\n\t} catch (Exception e) {\n\t\tlog.error(\"Failed to execute 'publish' node, msg: [{}], error: [{}]\", msg, e.getMessage(), e);\n\t\tctx.tellFailure(msg, e);\n\t}\n}", "CodeBleu_score": 34.43998915962451}]}
{"instance_id": "35f835e8c387", "generation_result": [{"code": "protected void publish(TbContext ctx, TbMsg msg, String topic, String key){\n\t\tString msgTopic = resolveTopic(ctx, topic);\n\tString msgKey = resolveKey(ctx, key);\n\tString msgValue = resolveValue(ctx, msg);\n\tHeaders headers = null;\n\tif (BooleanUtils.isTrue(addMetadata)) {\n\t\theaders = resolveHeaders(ctx, msg);\n\t}\n\ttry {\n\t\tif (headers != null) {\n\t\t\tproducer.send(new ProducerRecord(msgTopic, msgKey, msgValue, headers), (RecordMetadata metadata, Exception exception) -> {\n\t\t\t\tif (exception != null) {\n\t\t\t\t\tlog.debug(\"[{}] Failed to publish message to topic [{}] with key [{}].\", ctx.getRuleChainId(), msgTopic, msgKey, exception);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tproducer.send(new ProducerRecord(msgTopic, msgKey, msgValue), (RecordMetadata metadata, Exception exception) -> {\n\t\t\t\tif (exception != null) {\n\t\t\t\t\tlog.debug(\"[{}] Failed to publish message to topic [{}] with key [{}].\", ctx.getRuleChainId(), msgTopic, msgKey, exception);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t} catch (Exception e) {\n\t\tthrow new TbNodeException(e);\n\t}\n}", "CodeBleu_score": 33.91660525097237}, {"code": "protected void publish(TbContext ctx, TbMsg msg, String topic, String key){\n\t\ttry {\n\t\tbyte[] keyBytes = null;\n\t\tbyte[] valueBytes = null;\n\t\tif (key != null) {\n\t\t\tkeyBytes = key.getBytes(Charset.forName(\"UTF-8\"));\n\t\t}\n\t\tif (msg.getPayload() != null) {\n\t\t\tvalueBytes = msg.getPayload().array();\n\t\t}\n\t\tif (keyBytes != null && valueBytes != null) {\n\t\t\tctx.getRuleEngineTelemetryService().saveAndPropagate(ctx.getTenantId(), ctx.getCustomerId(),\n\t\t\t\t\tnew TbMsgMetaData(msg.getMetaData()), null, keyBytes, valueBytes);\n\t\t} else if (keyBytes != null) {\n\t\t\tctx.getRuleEngineTelemetryService().saveAndPropagate(ctx.getTenantId(), ctx.getCustomerId(),\n\t\t\t\t\tnew TbMsgMetaData(msg.getMetaData()), null, keyBytes);\n\t\t} else if (valueBytes != null) {\n\t\t\tctx.getRuleEngineTelemetryService().saveAndPropagate(ctx.getTenantId(), ctx.getCustomerId(),\n\t\t\t\t\tnew TbMsgMetaData(msg.getMetaData()), null, valueBytes);\n\t\t} else {\n\t\t\tctx.getRuleEngineTelemetryService().saveAndPropagate(ctx.getTenantId(), ctx.getCustomerId(),\n\t\t\t\t\tnew TbMsgMetaData(msg.getMetaData()), null);\n\t\t}\n\t} catch (Exception e) {\n\t\tlog.debug(\"[{}] Failed to publish message: {}\", ctx.getTenantId(), msg, e);\n\t}\n}", "CodeBleu_score": 30.541498479158633}, {"code": "protected void publish(TbContext ctx, TbMsg msg, String topic, String key){\n\t\ttry {\n\t\tbyte[] keyBytes = null;\n\t\tif (key != null) {\n\t\t\tkeyBytes = key.getBytes(Charset.forName(\"UTF-8\"));\n\t\t}\n\t\tbyte[] valueBytes = ctx.getRuleEngine().convertToBytes(msg.getData());\n\t\tHeaders headers = null;\n\t\tif (BooleanUtils.isTrue(addMetadata)) {\n\t\t\tTbMsgMetaData metaData = msg.getMetaData();\n\t\t\theaders = new RecordHeaders();\n\t\t\tfor (String key : metaData.keySet()) {\n\t\t\t\theaders.add(new RecordHeader(key, metaData.getValue(key).getBytes(Charset.forName(\"UTF-8\"))));\n\t\t\t}\n\t\t}\n\t\tProducerRecord<byte[], byte[]> record = new ProducerRecord<byte[], byte[]>(topic, keyBytes, valueBytes, headers);\n\t\tRecordMetadata metadata = producer.send(record).get();\n\t\tctx.getRuleEngine().debug(\"[{}] Message published to topic {} partition {} at offset {}\", ctx.getRuleChainId(), metadata.topic(), metadata.partition(), metadata.offset());\n\t\tcallback(ctx, msg, metadata);\n\t} catch (Exception e) {\n\t\tctx.getRuleEngine().debug(\"[{}] Failed to publish message: {}\", ctx.getRuleChainId(), e.getMessage());\n\t}\n}", "CodeBleu_score": 34.66329115033787}]}
{"instance_id": "111a11189434", "generation_result": [{"code": "public void destroy(){\n\t\tif (this.producer != null) {\n\t\ttry {\n\t\t\tthis.producer.close();\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"Failed to close Kafka producer\", e);\n\t\t}\n\t}\n}", "CodeBleu_score": 83.8189503462662}, {"code": "public void destroy(){\n\t\tif (this.producer != null) {\n\t\ttry {\n\t\t\tthis.producer.close();\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"Failed to close Kafka producer\", e);\n\t\t}\n\t}\n}", "CodeBleu_score": 83.8189503462662}, {"code": "public void destroy(){\n\tif (this.producer != null) {\ntry {\nthis.producer.close();\n} catch (Exception e) {\nlog.error(\"Failed to close Kafka producer\", e);\n}\n}\n}", "CodeBleu_score": 83.29190318981914}]}
{"instance_id": "f5d2487100a9", "generation_result": [{"code": "public TbQueueProducer<TbProtoQueueMsg<ToRuleEngineMsg>> createRuleEngineMsgProducer(){\n\t\treturn new TbKafkaProducerTemplate<ToRuleEngineMsg>(\n\t\t\tnew TbKafkaSettings(tbRuleEngineSettings.getKafka().getBootstrapServers(),\n\t\t\t\t\ttbRuleEngineSettings.getKafka().getRetryInterval(),\n\t\t\t\t\ttbRuleEngineSettings.getKafka().getRetryIntervalMax()),\n\t\t\ttbServiceInfoProvider.getServiceId(),\n\t\t\tnew TopicService(ServiceType.TB_RULE_ENGINE, tbRuleEngineSettings.getKafka().getDefaultTopic()),\n\t\t\tnew TbKafkaAdmin(tbRuleEngineSettings.getKafka().getBootstrapServers(),\n\t\t\t\t\ttbRuleEngineSettings.getKafka().getZkNodes(),\n\t\t\t\t\ttbRuleEngineSettings.getKafka().getZkPath(),\n\t\t\t\t\ttbRuleEngineSettings.getKafka().getGroupId(),\n\t\t\t\t\ttbRuleEngineSettings.getKafka().getTopicConfigs()),\n\t\t\tnew TbKafkaProducerTemplate.DefaultTbKafkaProducerFactory<>())\n\t\t\t.getProducer();\n}", "CodeBleu_score": 28.379795536655937}, {"code": "public TbQueueProducer<TbProtoQueueMsg<ToRuleEngineMsg>> createRuleEngineMsgProducer(){\n\t\treturn new TbKafkaProducerTemplate<ToRuleEngineMsg>(\n\t\t\tnew TbKafkaSettings(\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngineTopic,\n\t\t\t\t\truleEngine", "CodeBleu_score": 12.166844654765736}, {"code": "public TbQueueProducer<TbProtoQueueMsg<ToRuleEngineMsg>> createRuleEngineMsgProducer(){\n\t\treturn new TbKafkaProducerTemplate<ToRuleEngineMsg>(\n\t\t\tnew TbKafkaSettings(\n\t\t\t\t\truleEngineSettings.getBootstrapServers(),\n\t\t\t\t\truleEngineSettings.getRetryInterval(),\n\t\t\t\t\truleEngineSettings.getRetryIntervalMax(),\n\t\t\t\t\truleEngineSettings.getFlushFrequency(),\n\t\t\t\t\truleEngineSettings.getLinger(),\n\t\t\t\t\truleEngineSettings.getBatchSize(),\n\t\t\t\t\truleEngineSettings.getAcks(),\n\t\t\t\t\truleEngineSettings.getCompression()),\n\t\t\truleEngineSettings.getTopic(),\n\t\t\tnew TbKafkaTopicConfigs(\n\t\t\t\t\truleEngineSettings.getTopic(),\n\t\t\t\t\truleEngineSettings.getPartitions(),\n\t\t\t\t\truleEngineSettings.getReplicationFactor(),\n\t\t\t\t\truleEngineSettings.getRetentionMs(),\n\t\t\t\t\truleEngineSettings.getMaxMessageSize(),\n\t\t\t\t\truleEngineSettings.getCleanupPolicy(),\n\t\t\t\t\truleEngineSettings.getDeleteRetentionMs(),\n\t\t\t\t\truleEngineSettings.getSegmentMs(),\n\t\t\t\t\truleEngineSettings.getSegmentBytes(),\n\t\t\t\t\truleEngineSettings.getMaxMessageBytes(),\n\t\t\t\t\truleEngineSettings.getFlushMs(),\n\t\t\t\t\truleEngineSettings.getUncleanLeaderElectionEnable(),\n\t\t\t\t\truleEngineSettings.getUncleanLeaderElectionEnable(),\n\t\t\t\t\truleEngineSettings.getMessageFormatVersion(),\n\t\t\t\t\truleEngineSettings.getMessageFormatVersion(),\n\t\t\t\t\truleEngineSettings.getMessageFormatVersion()),\n\t\t\tnew TbKafkaAdmin(\n\t\t\t\t\truleEngineSettings.getBootstrapServers(),\n\t\t\t\t\truleEngineSettings.getRetryInterval(),\n\t\t\t\t\truleEngineSettings.getRetryIntervalMax(),\n\t\t\t\t\truleEngineSettings.getAdminClientCloseMs(),\n\t\t\t\t\truleEngineSettings.getAdminClientCloseMs(),\n\t\t\t\t\truleEngineSettings.getAdminClientCloseMs(),\n\t\t\t\t\truleEngineSettings.getAdminClientCloseMs(),\n\t\t\t\t\truleEngineSettings.getAdminClientCloseMs(),\n\t\t\t\t\truleEngineSettings.getAdminClientCloseMs(),\n\t\t\t\t\truleEngineSettings.getAdminClientCloseMs(),\n\t\t\t\t\truleEngineSettings.getAdminClientCloseMs(),\n\t\t\t\t\truleEngineSettings.getAdminClientCloseMs(),\n\t\t\t\t\truleEngineSettings.getAdminClientCloseMs(),\n\t\t\t\t\truleEngineSettings.getAdminClientCloseMs(),\n\t\t\t\t\truleEngineSettings.getAdminClientCloseMs(),\n\t\t\t\t\truleEngineSettings.getAdminClientCloseMs(),\n\t\t\t\t\truleEngineSettings.getAdminClientCloseMs(),\n\t\t\t\t\truleEngineSettings.getAdminClientCloseMs(),\n\t\t\t\t\truleEngineSettings.get", "CodeBleu_score": 31.980338126410945}]}
{"instance_id": "886264f5ca27", "generation_result": [{"code": "private void startLogScheduling(){\n\t\tlong timeout = TimeUnit.SECONDS.toMillis(consumerProperties.getResponseTimeoutMs());\n\tlong delay = timeout / 2;\n\tlong period = timeout / 2;\n\tlog.info(\"Starting log scheduling with delay: {} and period: {}\", delay, period);\n\tscheduledExecutor.scheduleWithFixedDelay(() -> {\n\t\ttry {\n\t\t\tif (log.isInfoEnabled()) {\n\t\t\t\tlog.info(\"Checking for consumer group offsets and end offsets\");\n\t\t\t}\n\t\t\tfor (String consumerGroup : consumerGroups) {\n\t\t\t\ttry {\n\t\t\t\t\tMap<TopicPartition, OffsetAndMetadata> offsets = consumer.committed(consumerGroup);\n\t\t\t\t\tMap<TopicPartition, Long> endOffsets = consumer.endOffsets(consumerGroup);\n\t\t\t\t\tfor (TopicPartition partition : offsets.keySet()) {\n\t\t\t\t\t\tlong committedOffset = offsets.get(partition).offset();\n\t\t\t\t\t\tlong endOffset = endOffsets.get(partition);\n\t\t\t\t\t\tlong lag = endOffset - committedOffset;\n\t\t\t\t\t\tif (lag > 0) {\n\t\t\t\t\t\t\tlog.info(\"Consumer group {} has {} messages lagged for partition {}\", consumerGroup, lag, partition);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tlog.warn(\"Failed to check consumer group offsets for group {}\", consumerGroup, e);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tlog.warn(\"Failed to check consumer group offsets\", e);\n\t\t}\n\t}, delay, period, TimeUnit.MILLISECONDS);\n}", "CodeBleu_score": 31.216945718670768}, {"code": "private void startLogScheduling(){\n\t\tlong timeout = Duration.ofMillis(kafkaConsumer.poll(0).getTimeout()).toMillis();\n\tlong schedulePeriod = Math.max(timeout, 1000);\n\tscheduledExecutor.scheduleAtFixedRate(this::logLaggingTopics, 0, schedulePeriod, TimeUnit.MILLISECONDS);\n}", "CodeBleu_score": 8.922442046167761}, {"code": "private void startLogScheduling(){\n\t\tif (log.isInfoEnabled()) {\n\t\tlog.info(\"Starting log scheduling with fixed delay [{}] and timeout [{}]...\", LOGGING_FIXED_DELAY, LOGGING_TIMEOUT);\n\t}\n\tscheduledExecutor.scheduleWithFixedDelay(this::logStats, LOGGING_FIXED_DELAY, LOGGING_FIXED_DELAY, TimeUnit.MILLISECONDS);\n}", "CodeBleu_score": 7.8348143233932275}]}
{"instance_id": "81553181cdc8", "generation_result": [{"code": "protected Properties toAdminProps(){\n\tProperties props = toProps();", "CodeBleu_score": 24.25516504283889}, {"code": "protected Properties toAdminProps(){\n\tProperties props = toProps();", "CodeBleu_score": 24.25516504283889}, {"code": "protected Properties toAdminProps(){\n\t\tProperties props = toProps();\n\tprops.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, getBootstrapServers());\n\tprops.put(AdminClientConfig.RETRIES_CONFIG, getRetries());\n\treturn props;\n}", "CodeBleu_score": 71.28417625547586}]}
{"instance_id": "3c8bf3ff31b7", "generation_result": [{"code": "public void notifyOfAddedMetric(Metric metric, String metricName, MetricGroup group){\n\t\tif (metric instanceof Counter) {\n\t\tCounter counter = (Counter) metric;\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.inc(counter.getCount());\n\t\tcounter.", "CodeBleu_score": 20.966492827313964}, {"code": "public void notifyOfAddedMetric(Metric metric, String metricName, MetricGroup group){\n\t\tif (metric instanceof Counter) {\n\t\tCounter counter = (Counter) metric;\n\t\tMetricEvent event = new MetricEvent(metricName, group, counter.getCount());\n\t\tcounterEvents.add(event);\n\t} else if (metric instanceof Gauge) {\n\t\tGauge gauge = (Gauge) metric;\n\t\tMetricEvent event = new MetricEvent(metricName, group, gauge.getValue());\n\t\tgaugeEvents.add(event);\n\t} else if (metric instanceof Histogram) {\n\t\tHistogram histogram = (Histogram) metric;\n\t\tMetricEvent event = new MetricEvent(metricName, group, histogram.getMean(), histogram.getMax(), histogram.getMin(), histogram.getStdDev(), histogram.get75thPercentile(), histogram.get95thPercentile(), histogram.get98thPercentile(), histogram.get99thPercentile(), histogram.get999thPercentile());\n\t\thistogramEvents.add(event);\n\t} else if (metric instanceof Meter) {\n\t\tMeter meter = (Meter) metric;\n\t\tMetricEvent event = new MetricEvent(metricName, group, meter.getCount(), meter.getRate());\n\t\tmeterEvents.add(event);\n\t} else {\n\t\tLOG.warn(\"Unknown metric type: \" + metric.getClass().getName());\n\t}\n}", "CodeBleu_score": 42.547731471937475}, {"code": "public void notifyOfAddedMetric(Metric metric, String metricName, MetricGroup group){\n\t\tif (group instanceof FrontMetricGroup) {\n\t\treturn;\n\t}\n\tMetricType metricType = metric.getMetricType();\n\tMetricName scopedMetricName = group.getScopeComponents().scope(metricName);\n\tMetricEvent metricEvent = new MetricEvent(scopedMetricName, group.getAllVariables());\n\tif (metricType == MetricType.COUNTER) {\n\t\tcounters.put(scopedMetricName, (Counter) metric);\n\t} else if (metricType == MetricType.GAUGE) {\n\t\tgauges.put(scopedMetricName, (Gauge) metric);\n\t} else if (metricType == MetricType.HISTOGRAM) {\n\t\thistograms.put(scopedMetricName, (Histogram) metric);\n\t} else if (metricType == MetricType.METER) {\n\t\tmeters.put(scopedMetricName, (Meter) metric);\n\t} else {\n\t\tLOG.warn(\"Metric type {} is not supported.\", metricType);\n\t}\n}", "CodeBleu_score": 37.83266529943777}]}
{"instance_id": "77c6addc9b99", "generation_result": [{"code": "static MetricEvent addFields(MetricEvent metricEvent, String field, Gauge<?> gauge){\n\t\tObject value = gauge.getValue();\n\tif (value instanceof Number) {\n\t\tif (metricEvent.getFields() == null) {\n\t\t\tmetricEvent.setFields(new HashMap<>());\n\t\t}\n\t\tmetricEvent.getFields().put(field, ((Number) value).doubleValue());\n\t} else if (value instanceof String) {\n\t\tif (metricEvent.getFields() == null) {\n\t\t\tmetricEvent.setFields(new HashMap<>());\n\t\t}\n\t\tmetricEvent.getFields().put(field, value);\n\t} else {\n\t\tthrow new IllegalArgumentException(\"Unsupported field type: \" + value.getClass().getName());\n\t}\n\treturn metricEvent;\n}", "CodeBleu_score": 41.62584960835265}, {"code": "static MetricEvent addFields(MetricEvent metricEvent, String field, Gauge<?> gauge){\n\t\tNumber number = null;\n\tString string = null;\n\tObject value = gauge.getValue();\n\tif (value instanceof Number) {\n\t\tnumber = (Number) value;\n\t} else {\n\t\tstring = value.toString();\n\t}\n\tMap<String, Object> fields = metricEvent.getFields();\n\tif (fields == null) {\n\t\tfields = new HashMap<>();\n\t\tmetricEvent.setFields(fields);\n\t}\n\tif (number != null) {\n\t\tfields.put(field, number);\n\t} else if (string != null) {\n\t\tfields.put(field, string);\n\t}\n\treturn metricEvent;\n}", "CodeBleu_score": 52.649927556941215}, {"code": "static MetricEvent addFields(MetricEvent metricEvent, String field, Gauge<?> gauge){\n\t\tObject value = gauge.getValue();\n\tif (value instanceof Number) {\n\t\treturn addFields(metricEvent, field, (Number) value);\n\t} else if (value instanceof String) {\n\t\treturn addFields(metricEvent, field, (String) value);\n\t} else {\n\t\tthrow new IllegalArgumentException(\"Gauge value must be either a Number or a String\");\n\t}\n}", "CodeBleu_score": 34.23681522245856}]}
{"instance_id": "a48971ffb3e9", "generation_result": [{"code": "static MetricEvent addKafkaLagMetricFields(MetricEvent metricEvent, Long timestamp, Gauge<?> gauge){\n\t\tMap<String, Object> fields = metricEvent.getFields();\n\tMap<String, Long> kafkaLagTimes = (Map<String, Long>) fields.get(\"kafkaLagTimes\");\n\tif (kafkaLagTimes == null) {\n\t\tkafkaLagTimes = new HashMap<>();\n\t\tfields.put(\"kafkaLagTimes\", kafkaLagTimes);\n\t}\n\tString[] split = ((String) gauge.getValue()).split(KafkaReporter.DELIMITER);\n\tif (split.length != 3) {\n\t\tthrow new IllegalArgumentException(\"Expected 3 values, but found \" + split.length);\n\t}\n\tString topic = split[0];\n\tLong currentOffset = Long.parseLong(split[1]);\n\tLong committedOffset = Long.parseLong(split[2]);\n\tLong lastOffset = kafkaLagTimes.get(topic);\n\tif (lastOffset == null || currentOffset != lastOffset) {\n\t\tkafkaLagTimes.put(topic, currentOffset);\n\t\tmetricEvent.setTimestamp(timestamp);\n\t}\n\tfields.put(\"currentOffset\", currentOffset);\n\tfields.put(\"committedOffset\", committedOffset);\n\treturn metricEvent;\n}", "CodeBleu_score": 46.66340950120047}, {"code": "static MetricEvent addKafkaLagMetricFields(MetricEvent metricEvent, Long timestamp, Gauge<?> gauge){\n\t\tString[] metricNameComponents = metricEvent.getName().split(\"\\\\.\");\n\tString topicName = metricNameComponents[1];\n\tString partition = metricNameComponents[2];\n\tString metricName = metricNameComponents[3];\n\tif (metricName.equals(\"CurrentOffset\")) {\n\t\tlong currentOffset = (long) gauge.getValue();\n\t\tlong committedOffset = metricEvent.getFields().get(\"CommittedOffset\");\n\t\tif (committedOffset == 0) {\n\t\t\tcommittedOffset = currentOffset;\n\t\t}\n\t\tlong kafkaLag = currentOffset - committedOffset;\n\t\tlong kafkaLagTime = System.currentTimeMillis() - timestamp;\n\t\tif (kafkaLagTime > 0 && kafkaLag > 0) {\n\t\t\tif (kafkaLagTimes.containsKey(topicName + partition)) {\n\t\t\t\tif (kafkaLagTimes.get(topicName + partition) != kafkaLagTime) {\n\t\t\t\t\tmetricEvent.getFields().put(\"KafkaLag\", kafkaLag);\n\t\t\t\t\tmetricEvent.getFields().put(\"KafkaLagTime\", kafkaLagTime);\n\t\t\t\t\tkafkaLagTimes.put(topicName + partition, kafkaLagTime);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmetricEvent.getFields().put(\"KafkaLag\", kafkaLag);\n\t\t\t\tmetricEvent.getFields().put(\"KafkaLagTime\", kafkaLagTime);\n\t\t\t\tkafkaLagTimes.put(topicName + partition, kafkaLagTime);\n\t\t\t}\n\t\t}\n\t}\n\treturn metricEvent;\n}", "CodeBleu_score": 31.765269681765318}, {"code": "static MetricEvent addKafkaLagMetricFields(MetricEvent metricEvent, Long timestamp, Gauge<?> gauge){\n\t\tString[] metricNameComponents = metricEvent.getMetricName().split(Pattern.quote(\".\"));\n\tString topic = metricNameComponents[1];\n\tString partition = metricNameComponents[2];\n\tString groupID = metricNameComponents[3];\n\n\tMap<String, Object> metricValue = new HashMap<>();\n\tmetricValue.put(\"value\", gauge.getValue());\n\n\tif (metricEvent.getMetricValue() == null) {\n\t\tmetricEvent.setMetricValue(metricValue);\n\t} else {\n\t\tmetricEvent.getMetricValue().putAll(metricValue);\n\t}\n\n\tif (metricEvent.getTimestamp() == null) {\n\t\tmetricEvent.setTimestamp(timestamp);\n\t}\n\n\tMap<String, Object> kafkaLagTimes = (Map<String, Object>) metricEvent.getMetricValue().get(\"kafkaLagTimes\");\n\n\tif (kafkaLagTimes == null) {\n\t\tkafkaLagTimes = new HashMap<>();\n\t}\n\n\tif (kafkaLagTimes.get(topic) == null) {\n\t\tkafkaLagTimes.put(topic, new HashMap<>());\n\t}\n\n\tif (kafkaLagTimes.get(topic).get(partition) == null) {\n\t\tkafkaLagTimes.get(topic).put(partition, new HashMap<>());\n\t}\n\n\tif (kafkaLagTimes.get(topic).get(partition).get(groupID) == null) {\n\t\tkafkaLagTimes.get(topic).get(partition).put(groupID, new HashMap<>());\n\t}\n\n\tMap<String, Object> topicMap = (Map<String, Object>) kafkaLagTimes.get(topic);\n\tMap<String, Object> partitionMap = (Map<String, Object>) topicMap.get(partition);\n\tMap<String, Object> groupIDMap = (Map<String, Object>) partitionMap.get(groupID);\n\n\tif (groupIDMap.get(\"currentOffset\") == null) {\n\t\tgroupIDMap.put(\"currentOffset\", metricValue.get(\"value\"));\n\t} else if (!groupIDMap.get(\"currentOffset\").equals(metricValue.get(\"value\"))) {\n\t\tgroupIDMap.put(\"previousOffset\", groupIDMap.get(\"currentOffset\"));\n\t\tgroupIDMap.put(\"currentOffset\", metricValue.get(\"", "CodeBleu_score": 35.415750053824105}]}
{"instance_id": "c2080c299bb0", "generation_result": [{"code": "public static DataStreamSource<MetricEvent> buildSource(StreamExecutionEnvironment env, String topic, Long time) throws IllegalAccessException{\n\t\tParameterTool params = env.getExecutionConfig().getGlobalJobParameters();\n\tProperties properties = new Properties();\n\tproperties.setProperty(\"bootstrap.servers\", params.get(BOOTSTRAP_SERVERS));\n\tproperties.setProperty(\"group.id\", params.get(GROUP_ID));\n\tproperties.setProperty(\"flink.partition-discovery.interval-millis\", params.get(PARTITION_DISCOVERY_INTERVAL_MILLIS));\n\tproperties.setProperty(\"flink.partition-discovery.max-attempts\", params.get(PARTITION_DISCOVERY_MAX_ATTEMPTS));\n\tproperties.setProperty(\"flink.partition-discovery.min-pause-between-attempts-millis\", params.get(PARTITION_DISCOVERY_MIN_PAUSE_BETWEEN_ATTEMPTS_MILLIS));\n\tproperties.setProperty(\"flink.partition-discovery.min-partitions\", params.get(PARTITION_DISCOVERY_MIN_PARTITIONS));\n\tproperties.setProperty(\"flink.partition-discovery.parallelism\", params.get(PARTITION_DISCOVERY_PARALLELISM));\n\tproperties.setProperty(\"auto.offset.reset\", params.get(AUTO_OFFSET_RESET));\n\tproperties.setProperty(\"flink.partition-discovery.retry-backoff-millis\", params.get(PARTITION_DISCOVERY_RETRY_BACKOFF_MILLIS));\n\tproperties.setProperty(\"flink.partition-discovery.retry-max-attempts\", params.get(PARTITION_DISCOVERY_RETRY_MAX_ATTEMPTS));\n\tproperties.setProperty(\"flink.partition-discovery.retry-max-delay-millis\", params.get(PARTITION_DISCOVERY_RETRY_MAX_DELAY_MILLIS));\n\tproperties.setProperty(\"flink.partition-discovery.retry-min-delay-millis\", params.get(PARTITION_DISCOVERY_RETRY_MIN_DELAY_MILLIS));\n\tproperties.setProperty(\"flink.partition-discovery.retry-timeout-millis\", params.get(PARTITION_DISCOVERY_RETRY_TIMEOUT_MILLIS));\n\tproperties.setProperty(\"flink.partition-discovery.startup-mode\", params.get(PARTITION_DISCOVERY_STARTUP_MODE));\n\tproperties.setProperty(\"flink.partition-discovery.use-group-management\", params.get(PARTITION_DISCOVERY_USE_GROUP_MANAGEMENT));\n\tproperties.setProperty(\"flink.partition-discovery.use", "CodeBleu_score": 24.59693299969049}, {"code": "public static DataStreamSource<MetricEvent> buildSource(StreamExecutionEnvironment env, String topic, Long time) throws IllegalAccessException{\n\t\t// Retrieve global job parameters from the StreamExecutionEnvironment\n\tParameterTool params = (ParameterTool) env.getExecutionConfig().getGlobalJobParameters();\n\n\t// Build Kafka properties\n\tProperties properties = new Properties();\n\tproperties.setProperty(\"bootstrap.servers\", params.get(BOOTSTRAP_SERVERS));\n\tproperties.setProperty(\"group.id\", params.get(CONSUMER_GROUP_ID));\n\tproperties.setProperty(\"auto.offset.reset\", params.get(CONSUMER_AUTO_OFFSET_RESET));\n\tproperties.setProperty(\"flink.partition-discovery.interval-millis\", params.get(PARTITION_DISCOVERY_INTERVAL_MILLIS));\n\tproperties.setProperty(\"flink.partition-discovery.max-attempts\", params.get(PARTITION_DISCOVERY_MAX_ATTEMPTS));\n\tproperties.setProperty(\"enable.auto.commit\", params.get(ENABLE_AUTO_COMMIT));\n\tproperties.setProperty(\"auto.commit.interval.ms\", params.get(AUTO_COMMIT_INTERVAL_MS));\n\tproperties.setProperty(\"session.timeout.ms\", params.get(SESSION_TIMEOUT_MS));\n\tproperties.setProperty(\"key.deserializer\", params.get(KEY_DESERIALIZER));\n\tproperties.setProperty(\"value.deserializer\", params.get(VALUE_DESERIALIZER));\n\tproperties.setProperty(\"flink.partition-discovery.interval-millis\", params.get(PARTITION_DISCOVERY_INTERVAL_MILLIS));\n\tproperties.setProperty(\"flink.partition-discovery.max-attempts\", params.get(PARTITION_DISCOVERY_MAX_ATTEMPTS));\n\tproperties.setProperty(\"security.protocol\", params.get(SECURITY_PROTOCOL));\n\tproperties.setProperty(\"ssl.truststore.location\", params.get(SSL_TRUSTSTORE_LOCATION));\n\tproperties.setProperty(\"ssl.truststore.password\", params.get(SSL_TRUSTSTORE_PASSWORD));\n\tproperties.setProperty(\"ssl.keystore.location\", params.get(SSL_KEYSTORE_LOCATION));\n\tproperties.setProperty(\"ssl.keystore.password\", params.get(SSL_KEYSTORE_PASSWORD));\n\tproperties.setProperty(\"ssl.key.password\", params.get(SSL_KEY_PASSWORD));\n\n\t// Instantiate a FlinkKafkaConsumer for MetricEvent\n\tFlinkKafkaConsumer<MetricEvent> kafkaConsumer = new", "CodeBleu_score": 30.377091765049368}, {"code": "public static DataStreamSource<MetricEvent> buildSource(StreamExecutionEnvironment env, String topic, Long time) throws IllegalAccessException{\n\t\t// get global job parameters from the StreamExecutionEnvironment\n\tParameterTool params = (ParameterTool) env.getExecutionConfig().getGlobalJobParameters();\n\t// build Kafka properties\n\tProperties properties = new Properties();\n\tproperties.setProperty(\"bootstrap.servers\", params.get(BOOTSTRAP_SERVERS));\n\tproperties.setProperty(\"group.id\", params.get(GROUP_ID));\n\tproperties.setProperty(\"key.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n\tproperties.setProperty(\"value.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n\tproperties.setProperty(\"auto.offset.reset\", \"earliest\");\n\tproperties.setProperty(\"flink.partition-discovery.interval-millis\", \"10000\");\n\tproperties.setProperty(\"flink.partition-discovery.max-attempts\", \"10\");\n\tproperties.setProperty(\"flink.partition-discovery.retry-backoff.millis\", \"1000\");\n\tproperties.setProperty(\"flink.partition-discovery.retry-max-attempts\", \"3\");\n\tproperties.setProperty(\"flink.partition-discovery.retry-backoff.millis\", \"1000\");\n\tproperties.setProperty(\"flink.partition-discovery.retry-backoff.millis\", \"1000\");\n\tproperties.setProperty(\"flink.partition-discovery.retry-backoff.millis\", \"1000\");\n\tproperties.setProperty(\"flink.partition-discovery.retry-backoff.millis\", \"1000\");\n\tproperties.setProperty(\"flink.partition-discovery.retry-backoff.millis\", \"1000\");\n\tproperties.setProperty(\"flink.partition-discovery.retry-backoff.millis\", \"1000\");\n\tproperties.setProperty(\"flink.partition-discovery.retry-backoff.millis\", \"1000\");\n\tproperties.setProperty(\"flink.partition-discovery.retry-backoff.millis\", \"1000\");\n\tproperties.setProperty(\"flink.partition-discovery.retry-backoff.millis\", \"1000\");\n\tproperties.setProperty(\"flink.partition-discovery.retry-backoff.millis\", \"1000\");\n\tproperties.setProperty(\"flink.partition-discovery.retry-backoff.millis\", \"1000\");\n\tproperties.setProperty(\"flink.partition-", "CodeBleu_score": 28.683851761363677}]}
{"instance_id": "5e828afbe8e4", "generation_result": [{"code": "private static Map<KafkaTopicPartition, Long> buildOffsetByTime(Properties props, ParameterTool parameterTool, Long time){\n\t\tMap<KafkaTopicPartition, Long> partitionOffsets = new HashMap<>();\n\tString topic = parameterTool.getRequired(PropertiesConstants.KAFKA_TOPIC);\n\tString groupId = \"flink-kafka-consumer-\" + time;\n\tKafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);\n\tconsumer.assign(getTopicPartitionInfo(consumer, topic));\n\tconsumer.assign(getTopicPartitionInfo(consumer, topic));\n\tMap<TopicPartition, OffsetAndTimestamp> offsets = consumer.offsetsForTimes(getTopicPartitionTimestamps(consumer, topic, time));\n\tfor (Map.Entry<TopicPartition, OffsetAndTimestamp> entry : offsets.entrySet()) {\n\t\tpartitionOffsets.put(new KafkaTopicPartition(entry.getKey().topic(), entry.getKey().partition()), entry.getValue().offset());\n\t}\n\tconsumer.close();\n\treturn partitionOffsets;\n}", "CodeBleu_score": 45.363052644945}, {"code": "private static Map<KafkaTopicPartition, Long> buildOffsetByTime(Properties props, ParameterTool parameterTool, Long time){\n\t\tString topic = parameterTool.get(PropertiesConstants.KAFKA_TOPIC);\n\tString groupId = parameterTool.get(PropertiesConstants.KAFKA_CONSUMER_GROUP_ID);\n\tString bootstrapServers = parameterTool.get(PropertiesConstants.KAFKA_BROKER_LIST);\n\tprops.setProperty(\"bootstrap.servers\", bootstrapServers);\n\tprops.setProperty(\"group.id\", groupId);\n\n\tKafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);\n\tList<PartitionInfo> partitions = consumer.partitionsFor(topic);\n\n\tMap<KafkaTopicPartition, Long> topicPartitionOffsets = new HashMap<>();\n\tfor (PartitionInfo partition : partitions) {\n\t\tTopicPartition topicPartition = new TopicPartition(topic, partition.partition());\n\t\tOffsetAndTimestamp offsetAndTimestamp = consumer.offsetsForTimes(Map.of(topicPartition, time)).get(topicPartition);\n\t\tif (offsetAndTimestamp != null) {\n\t\t\ttopicPartitionOffsets.put(new KafkaTopicPartition(topicPartition), offsetAndTimestamp.offset());\n\t\t}\n\t}\n\tconsumer.close();\n\treturn topicPartitionOffsets;\n}", "CodeBleu_score": 46.82187327993715}, {"code": "private static Map<KafkaTopicPartition, Long> buildOffsetByTime(Properties props, ParameterTool parameterTool, Long time){\n\t\tMap<KafkaTopicPartition, Long> partitionOffsets = new HashMap<>();\n\tString topic = parameterTool.getRequired(PropertiesConstants.KAFKA_TOPIC);\n\tString groupId = \"flink-kafka-consumer-offset-time-fetcher-\" + time;\n\tprops.setProperty(\"group.id\", groupId);\n\tKafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);\n\tList<PartitionInfo> partitionInfos = consumer.partitionsFor(topic);\n\tfor (PartitionInfo partitionInfo : partitionInfos) {\n\t\tTopicPartition topicPartition = new TopicPartition(partitionInfo.topic(), partitionInfo.partition());\n\t\tOffsetAndTimestamp offsetAndTimestamp = consumer.offsetsForTimes(Collections.singletonMap(topicPartition, time));\n\t\tpartitionOffsets.put(new KafkaTopicPartition(topicPartition), offsetAndTimestamp.get(topicPartition).offset());\n\t}\n\tconsumer.close();\n\treturn partitionOffsets;\n}", "CodeBleu_score": 51.22756405112297}]}
{"instance_id": "28da89f56f67", "generation_result": [{"code": "public static void writeToKafka() throws InterruptedException{\n\t\tProperties properties = new Properties();\n\tproperties.put(\"bootstrap.servers\", \"kafka-broker:9092\");\n\tproperties.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n\tproperties.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n\tKafkaProducer<String, String> producer = new KafkaProducer<>(properties);\n\tMetricEvent metricEvent = new MetricEvent();\n\tmetricEvent.setTimestamp(System.currentTimeMillis());\n\tmetricEvent.setName(\"test-metric-event\");\n\tMap<String, String> tags = new HashMap<>();\n\ttags.put(\"host\", \"localhost\");\n\ttags.put(\"region\", \"us-west-1\");\n\tmetricEvent.setTags(tags);\n\tMap<String, Double> fields = new HashMap<>();\n\tfields.put(\"temperature\", 21.0);\n\tfields.put(\"humidity\", 68.5);\n\tmetricEvent.setFields(fields);\n\tProducerRecord<String, String> record = new ProducerRecord<>(\"test-topic\", null, null,\n\t\t\tGsonUtil.toJsonStr(metricEvent));\n\tproducer.send(record);\n\tproducer.flush();\n\tSystem.out.println(record);\n}", "CodeBleu_score": 57.82758109836276}, {"code": "public static void writeToKafka() throws InterruptedException{\n\t\tProperties properties = new Properties();\n\tproperties.put(\"bootstrap.servers\", \"localhost:9092\");\n\tproperties.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n\tproperties.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n\tKafkaProducer<String, String> producer = new KafkaProducer<>(properties);\n\tMetricEvent metricEvent = new MetricEvent();\n\tmetricEvent.setTimestamp(System.currentTimeMillis());\n\tmetricEvent.setName(\"metric_name\");\n\tMap<String, String> tags = new HashMap<>();\n\ttags.put(\"tag1\", \"tag1\");\n\tmetricEvent.setTags(tags);\n\tMap<String, Double> fields = new HashMap<>();\n\tfields.put(\"field1\", 1.0);\n\tmetricEvent.setFields(fields);\n\tProducerRecord<String, String> record = new ProducerRecord<String, String>(\"metric_topic\", null, null,\n\t\tGsonUtil.GSON.toJson(metricEvent));\n\tproducer.send(record);\n\tproducer.flush();\n\tSystem.out.println(metricEvent);\n}", "CodeBleu_score": 58.26875748176793}, {"code": "public static void writeToKafka() throws InterruptedException{\n\t// 1. Define the bootstrap servers and topic name.\nfinal String bootstrapServers = \"localhost:9092\";\nfinal String topicName = \"test\";\n// 2. Create producer properties.\nfinal Properties properties = new Properties();\nproperties.put(\"bootstrap.servers\", bootstrapServers);\nproperties.put(\"key.serializer\", StringSerializer.class.getName());\nproperties.put(\"value.serializer\", StringSerializer.class.getName());\n// 3. Create a producer\nfinal KafkaProducer<String, String> producer = new KafkaProducer<String, String>(properties);\n// 4. Create a MetricEvent\nfinal MetricEvent metricEvent = new MetricEvent();\nmetricEvent.setTimestamp(System.currentTimeMillis());\nmetricEvent.setName(\"test_metric\");\nmetricEvent.setFields(new HashMap<String, Object>() {{\nput(\"field1\", \"value1\");\nput(\"field2\", 2);\n}});\nmetricEvent.setTags(new HashMap<String, String>() {{\nput(\"tag1\", \"value1\");\nput(\"tag2\", \"value2\");\n}});\n// 5. Create a ProducerRecord\nfinal ProducerRecord<String, String> record = new ProducerRecord<String, String>(topicName, null, null,\nGsonUtil.GSON.toJson(metricEvent));\n// 6. Write to Kafka\nproducer.send(record);\n// 7. Flush data\nproducer.flush();\nSystem.out.println(\"Data sent to Kafka\");\n}", "CodeBleu_score": 44.47381838892614}]}
{"instance_id": "14bffe09c25a", "generation_result": [{"code": "public void append(org.apache.logging.log4j.core.LogEvent event){\n\t\tif (event == null) {\n\t\tLOGGER.warn(\"event is null\");\n\t\treturn;\n\t}\n\tif (event.getMessage() == null) {\n\t\tLOGGER.warn(\"event.getMessage() is null\");\n\t\treturn;\n\t}\n\tif (event.getLoggerName() == null) {\n\t\tLOGGER.warn(\"event.getLoggerName() is null\");\n\t\treturn;\n\t}\n\tif (event.getLevel() == null) {\n\t\tLOGGER.warn(\"event.getLevel() is null\");\n\t\treturn;\n\t}\n\tif (this.filter != null && !this.filter.isLoggable(event)) {\n\t\treturn;\n\t}\n\tif (this.ignoreLoggerNames != null && this.ignoreLoggerNames.contains(event.getLoggerName())) {\n\t\treturn;\n\t}\n\tif (this.acceptableLevels != null && !this.acceptableLevels.contains(event.getLevel().toString())) {\n\t\treturn;\n\t}\n\tif (this.layout == null) {\n\t\tLOGGER.warn(\"layout is null\");\n\t\treturn;\n\t}\n\tString json;\n\ttry {\n\t\tjson = this.layout.toSerializable(event);\n\t\tif (json == null) {\n\t\t\tLOGGER.warn(\"layout.toSerializable(event) is null\");\n\t\t\treturn;\n\t\t}\n\t\tif (this.producer == null) {\n\t\t\tLOGGER.warn(\"producer is null\");\n\t\t\treturn;\n\t\t}\n\t\tProducerRecord producerRecord = new ProducerRecord(this.topic, json);\n\t\ttry {\n\t\t\tthis.producer.send(producerRecord);\n\t\t} catch (Exception var10) {\n\t\t\tLOGGER.warn(\"Exception while sending event to Kafka\", var10);\n\t\t}\n\t} catch (JsonProcessingException var11) {\n\t\tLOGGER.warn(\"Exception while serializing event to JSON\", var11);\n\t}\n}", "CodeBleu_score": 44.52453309816098}, {"code": "public void append(org.apache.logging.log4j.core.LogEvent event){\n\t\tif (event.getLevel().isMoreSpecificThan(this.getLevel())) {\n\t\treturn;\n\t}\n\tif (this.loggerFilter.isFiltered(event.getLoggerName(), event.getLevel())) {\n\t\treturn;\n\t}\n\ttry {\n\t\tString json = this.layout.toSerializable(event);\n\t\tProducerRecord<String, String> record = new ProducerRecord(this.topic, json);\n\t\tthis.producer.send(record);\n\t} catch (Exception var4) {\n\t\tString msg = \"Failed to send log event to Kafka topic \" + this.topic + \": \" + var4.getMessage();\n\t\tthis.errorHandler.error(msg, var4, (org.apache.logging.log4j.util.Supplier<Boolean>) () -> {\n\t\t\treturn Boolean.valueOf(this.ignoreExceptions);\n\t\t});\n\t}\n}", "CodeBleu_score": 37.86759534665558}, {"code": "public void append(org.apache.logging.log4j.core.LogEvent event){\n\t\tif (event.getLevel().isMoreSpecificThan(this.level)) {\n\t\treturn;\n\t}\n\tif (event.getLoggerName().contains(this.loggerName)) {\n\t\treturn;\n\t}\n\ttry {\n\t\tString topic = this.topic;\n\t\tif (this.topic.contains(\"${\")) {\n\t\t\ttopic = event.getContextMap().get(\"loggerName\").toString().replace('.', '-');\n\t\t}\n\t\tString message = this.layout.toSerializable(event);\n\t\tif (message == null) {\n\t\t\treturn;\n\t\t}\n\t\tMap<String, String> headers = new HashMap<>();\n\t\theaders.put(\"hostname\", InetAddress.getLocalHost().getHostName());\n\t\theaders.put(\"ip\", InetAddress.getLocalHost().getHostAddress());\n\t\theaders.put(\"topic\", topic);\n\t\theaders.put(\"partition\", Integer.toString(this.partition));\n\t\theaders.put(\"offset\", Long.toString(event.getSequenceNumber()));\n\t\theaders.put(\"timestamp\", Long.toString(event.getTimeMillis()));\n\t\theaders.put(\"loggerName\", event.getLoggerName());\n\t\theaders.put(\"threadName\", event.getThreadName());\n\t\theaders.put(\"threadId\", Long.toString(event.getThreadId()));\n\t\theaders.put(\"level\", event.getLevel().name());\n\t\theaders.put(\"ndc\", event.getContextMap().get(\"ndc\").toString());\n\t\theaders.put(\"exception\", event.getContextMap().get(\"exception\").toString());\n\t\theaders.put(\"loggerFqcn\", event.getContextMap().get(\"loggerFqcn\").toString());\n\t\theaders.put(\"contextStack\", event.getContextStack().toString());\n\t\theaders.put(\"message\", message);\n\t\theaders.put(\"mdc\", event.getContextMap().get(\"mdc\").toString());\n\t\theaders.put(\"source\", event.getContextMap().get(\"source\").toString());\n\t\theaders.put(\"marker\", event.getContextMap().get(\"marker\").toString());\n\t\theaders.put(\"timeMillis\", Long.toString(event.getTimeMillis()));\n\t\theaders.put(\"threadPriority\", Integer.toString(event.getThreadPriority()));\n\t\theaders.put(\"sourceMethodName\", event.getContextMap().get(\"sourceMethodName\").toString());\n\t\theaders.put(\"sourceClassName\", event.", "CodeBleu_score": 38.18167621330788}]}
{"instance_id": "a9e0786fb5c1", "generation_result": [{"code": "func ValidateTopicSuffixMethod(method string) error{\n\t\tvalidMethods := []string{\"static\", \"tag\", \"timestamp\"}\n\tfor _, m := range validMethods {\n\t\tif method == m {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn fmt.Errorf(\"unknown topic suffix method: %s\", method)\n}", "CodeBleu_score": 75.03576237033519}, {"code": "func ValidateTopicSuffixMethod(method string) error{\n\t\tvalidMethods := []string{\"tag\", \"field\", \"none\"}\n\tfor _, validMethod := range validMethods {\n\t\tif method == validMethod {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn errors.New(\"unknown topic suffix method\")\n}", "CodeBleu_score": 70.993663201458}, {"code": "func ValidateTopicSuffixMethod(method string) error{\n\t\tvalidMethods := []string{\"none\", \"uuid\", \"timestamp\"}\n\tfor _, validMethod := range validMethods {\n\t\tif method == validMethod {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn fmt.Errorf(\"unknown topic suffix method: %s\", method)\n}", "CodeBleu_score": 80.3772280066966}]}
{"instance_id": "9b88d720d48a", "generation_result": [{"code": "func (k *Kafka) routingKey(metric telegraf.Metric) (string, error) {\n\t\tif k.RoutingKey == \"random\" {\n\t\treturn uuid.Must(uuid.NewV4()).String(), nil\n\t}\n\n\tif k.RoutingTag != \"\" {\n\t\tfor _, tag := range metric.Tags() {\n\t\t\tif strings.Split(tag, \"=\")[0] == k.RoutingTag {\n\t\t\t\treturn strings.Split(tag, \"=\")[1], nil\n\t\t\t}\n\t\t}\n\t\treturn \"\", errors.New(\"Routing tag not found in metric tags\")\n\t}\n\n\treturn k.RoutingKey, nil\n}", "CodeBleu_score": 49.2019001670721}, {"code": "func (k *Kafka) routingKey(metric telegraf.Metric) (string, error) {\n\t\tif k.RoutingTag != \"\" {\n\t\tfor _, tag := range metric.Tags() {\n\t\t\tif strings.HasPrefix(tag, k.RoutingTag) {\n\t\t\t\treturn tag[len(k.RoutingTag):], nil\n\t\t\t}\n\t\t}\n\t}\n\tif k.RoutingKey == \"random\" {\n\t\treturn uuid.Must(uuid.NewV4()).String(), nil\n\t}\n\treturn k.RoutingKey, nil\n}", "CodeBleu_score": 46.521519809846694}, {"code": "func (k *Kafka) routingKey(metric telegraf.Metric) (string, error) {\n\t\tif k.RoutingKey == \"random\" {\n\t\tuuid, err := uuid.NewV4()\n\t\tif err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\t\treturn uuid.String(), nil\n\t}\n\tif k.RoutingTag != \"\" {\n\t\tfor _, tag := range metric.Tags() {\n\t\t\tif strings.Split(tag, \"=\")[0] == k.RoutingTag {\n\t\t\t\treturn strings.Split(tag, \"=\")[1], nil\n\t\t\t}\n\t\t}\n\t\treturn \"\", errors.New(\"Routing tag not found in metric tags\")\n\t}\n\treturn k.RoutingKey, nil\n}", "CodeBleu_score": 67.31029970876602}]}
{"instance_id": "dc35e80e7f8d", "generation_result": [{"code": "func (k *KafkaConsumer) compileTopicRegexps() error{\n\t\tvar err error\n\tk.regexps = make([]*regexp.Regexp, len(k.TopicRegexps))\n\tfor i, re := range k.TopicRegexps {\n\t\tk.regexps[i], err = regexp.Compile(re)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed to compile topic regexp '%s': %s\", re, err)\n\t\t}\n\t}\n\treturn nil\n}", "CodeBleu_score": 57.904555061038145}, {"code": "func (k *KafkaConsumer) compileTopicRegexps() error{\n\t\tk.regexps = make([]*regexp.Regexp, 0, len(k.TopicRegexps))\n\tfor _, r := range k.TopicRegexps {\n\t\tre, err := regexp.Compile(r)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed to compile topic regexp %q: %v\", r, err)\n\t\t}\n\t\tk.regexps = append(k.regexps, re)\n\t}\n\treturn nil\n}", "CodeBleu_score": 71.53112975867177}, {"code": "func (k *KafkaConsumer) compileTopicRegexps() error{\n\t\tvar err error\n\tk.regexps = make([]*regexp.Regexp, len(k.TopicRegexps))\n\tfor i, re := range k.TopicRegexps {\n\t\tk.regexps[i], err = regexp.Compile(re)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"invalid topic regexp %q: %s\", re, err)\n\t\t}\n\t}\n\treturn nil\n}", "CodeBleu_score": 57.3147667703583}]}
{"instance_id": "daf09ba144b2", "generation_result": [{"code": "func (h *ConsumerGroupHandler) onDelivery(track telegraf.DeliveryInfo){\n\t\th.lock.Lock()\n\tdefer h.lock.Unlock()\n\n\tmsg := h.undelivered[track.ID()]\n\tif msg == nil {\n\t\treturn\n\t}\n\n\tmsg.delivered = true\n\tmsg.session.MarkMessage(msg.message, \"\")\n\tdelete(h.undelivered, track.ID())\n\th.sem.Release(1)\n}", "CodeBleu_score": 53.53624747006192}, {"code": "func (h *ConsumerGroupHandler) onDelivery(track telegraf.DeliveryInfo){\n\t\th.lock.Lock()\n\tdefer h.lock.Unlock()\n\n\tif msg, ok := h.undelivered[track.ID]; ok {\n\t\tmsg.delivered = true\n\t\tmsg.session.MarkMessage(msg, \"\")\n\t\tdelete(h.undelivered, track.ID)\n\t\th.sem.Release(1)\n\t}\n}", "CodeBleu_score": 49.36987309027832}, {"code": "func (h *ConsumerGroupHandler) onDelivery(track telegraf.DeliveryInfo){\n\t\th.Lock()\n\tdefer h.Unlock()\n\tmsg := h.undelivered[track.ID()]\n\tif msg != nil {\n\t\tmsg.delivered = true\n\t\tmsg.session.MarkMessage(msg, \"\")\n\t\tdelete(h.undelivered, track.ID())\n\t\th.semaphore.Release(1)\n\t}\n}", "CodeBleu_score": 48.37196113319659}]}
{"instance_id": "8ecf2a1efead", "generation_result": [{"code": "func (h *ConsumerGroupHandler) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error{\n\t\tfor message := range claim.Messages() {\n\t\tif h.ctx.Err() != nil {\n\t\t\treturn nil\n\t\t}\n\t\terr := h.handler(session, message)\n\t\tif err != nil {\n\t\t\th.log.Error(err)\n\t\t}\n\t\tclaim.MarkMessage(message, \"\")\n\t}\n\treturn nil\n}", "CodeBleu_score": 46.75762368685994}, {"code": "func (h *ConsumerGroupHandler) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error{\n\t\tfor msg := range claim.Messages() {\n\t\tif h.ctx.Err() != nil {\n\t\t\treturn nil\n\t\t}\n\t\th.handleMessage(session, msg)\n\t}\n\treturn nil\n}", "CodeBleu_score": 23.979481138908127}, {"code": "func (h *ConsumerGroupHandler) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error{\n\t\th.wg.Add(1)\n\tdefer h.wg.Done()\n\n\tfor msg := range claim.Messages() {\n\t\th.Log.Debug(\"Received message: \", msg.Topic, msg.Partition, msg.Offset, msg.Key, msg.Value)\n\t\tif msg == nil {\n\t\t\th.Log.Error(\"Received nil message\")\n\t\t\tcontinue\n\t\t}\n\t\tif err := h.handleMessage(session, msg); err != nil {\n\t\t\th.Log.Error(\"Error handling message: \", err)\n\t\t}\n\t\tsession.MarkMessage(msg, \"\")\n\t}\n\treturn nil\n}", "CodeBleu_score": 46.955426848861926}]}
{"instance_id": "eba9dafa99ab", "generation_result": [{"code": "def validateLogkafkaId(logkafka_id: String){\n\t\tif (logkafka_id == null || logkafka_id.isEmpty()) {\n\t\tthrow new IllegalArgumentException(\"Logkafka ID cannot be empty\")\n\t}\n\tif (logkafka_id == \".\" || logkafka_id == \"..\") {\n\t\tthrow new IllegalArgumentException(\"Logkafka ID cannot be \\\".\\\" or \\\"..\\\"\")\n\t}\n\tif (logkafka_id.length() > 255) {\n\t\tthrow new IllegalArgumentException(\"Logkafka ID cannot be longer than 255 characters\")\n\t}\n\tif (!logkafka_id.matches(\"[a-zA-Z0-9_-]+\")) {\n\t\tthrow new IllegalArgumentException(\"Logkafka ID can only contain alphanumeric characters, underscores and dashes\")\n\t}\n}", "CodeBleu_score": 20.09499149693532}, {"code": "def validateLogkafkaId(logkafka_id: String){\n\t\tif (logkafka_id.isEmpty) {\n\t\tthrow new IllegalArgumentException(\"Logkafka ID cannot be empty\")\n\t}\n\tif (logkafka_id == \".\" || logkafka_id == \"..\") {\n\t\tthrow new IllegalArgumentException(\"Logkafka ID cannot be \\\".\\\" or \\\"..\\\"\")\n\t}\n\tif (logkafka_id.length() > 255) {\n\t\tthrow new IllegalArgumentException(\"Logkafka ID cannot exceed 255 characters\")\n\t}\n\tif (!logkafka_id.matches(\"^[A-Za-z0-9_-]+$\")) {\n\t\tthrow new IllegalArgumentException(\"Logkafka ID can only contain alphanumeric characters, underscores, and dashes\")\n\t}\n}", "CodeBleu_score": 20.12468178011385}, {"code": "def validateLogkafkaId(logkafka_id: String){\n\t\tif (logkafka_id == null || logkafka_id.trim() == \"\") {\n\t\tthrow new IllegalArgumentException(\"Logkafka ID cannot be empty.\")\n\t} else if (logkafka_id.trim() == \".\" || logkafka_id.trim() == \"..\") {\n\t\tthrow new IllegalArgumentException(\"Logkafka ID cannot be \\\".\\\" or \\\"..\\\".\")\n\t} else if (logkafka_id.length() > 255) {\n\t\tthrow new IllegalArgumentException(\"Logkafka ID cannot exceed 255 characters.\")\n\t} else if (!logkafka_id.matches(\"^[A-Za-z0-9_-]+$\")) {\n\t\tthrow new IllegalArgumentException(\"Logkafka ID can only contain alphanumeric characters, underscores, and dashes.\")\n\t}\n}", "CodeBleu_score": 24.426697813713467}]}
{"instance_id": "45d5aefd3f6c", "generation_result": [{"code": "  private[this] def tryWithKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => FOutput)\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t//    val logger = Logger(\"KafkaManagerActor\")\n    val future = ask(kafkaManagerActor, msg)\n    future.map {\n      case Success(output) =>\n        try {\n          \\/-(fn(output))\n        } catch {\n          case e: Exception =>\n            logger.error(s\"Exception while processing response from Kafka Manager Actor: ${e.getMessage}\")\n            \\/-(ApiError(\"Internal server error\", 500))\n        }\n      case Failure(e) =>\n        logger.error(s\"Exception while processing response from Kafka Manager Actor: ${e.getMessage}\")\n        \\/-(ApiError(\"Internal server error\", 500))\n    }\n  }", "CodeBleu_score": 36.46307206766865}, {"code": "  private[this] def tryWithKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => FOutput)\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t\nval f = Future {\n      self.kafkaManagerActor ? msg\n    }\n\n    f.map {\n      case Success(result) =>\n        result match {\n          case Success(success) =>\n            try {\n              \\/-(fn(success))\n            } catch {\n              case e: Exception =>\n                logger.error(s\"Failed to transform response: $result\", e)\n                \\/-(ApiError.GeneralException(e))\n            }\n          case Failure(failure) =>\n            logger.error(s\"Failed to get response: $result\")\n            \\/-(ApiError.GeneralException(failure))\n        }\n      case Failure(failure) =>\n        logger.error(s\"Failed to send message to Kafka manager actor: $msg\", failure)\n        \\/-(ApiError.GeneralException(failure))\n    }.recover {\n      case e: Exception =>\n        logger.error(s\"Failed to send message to Kafka manager actor: $msg\", e)\n        \\/-(ApiError.GeneralException(e))\n    }\n  }", "CodeBleu_score": 34.574706879829705}, {"code": "  private[this] def tryWithKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => FOutput)\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t//    val logger = Logger(this.getClass)\n    implicit val timeout = Timeout(5.seconds)\n    (kafkaManagerActor ? msg).mapTo[Future[Output]].flatMap { future =>\n      future.recover {\n        case e: Exception =>\n          logger.error(s\"Error processing message ${msg}\", e)\n          ApiError.fromException(e)\n      }.map {\n        case error: ApiError => error.left\n        case output: Output =>\n          try {\n            fn(output).right\n          } catch {\n            case e: Exception =>\n              logger.error(s\"Error processing message ${msg}\", e)\n              ApiError.fromException(e).left\n          }\n      }\n    }\n  }", "CodeBleu_score": 35.40370506523881}]}
{"instance_id": "a535ce861222", "generation_result": [{"code": "  private[this] def withKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => Future[ApiError \\/ FOutput])\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t\n```\nval kafkaManagerActor = system.actorSelection(\"/user/kafka-manager\")\n```\n\n```\nimplicit val timeout = Timeout(5 seconds)\n```\n\n```\nval future = (kafkaManagerActor ? msg).mapTo[Output]\n```\n\n```\nfuture.map(fn).recover {\n  case e: Throwable =>\n    logger.error(\"Error getting kafka manager actor\", e)\n    ApiError.fromThrowable(e)\n}\n```\n\n  }", "CodeBleu_score": 33.7420024376217}, {"code": "  private[this] def withKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => Future[ApiError \\/ FOutput])\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t\n//    val future = ask(kafkaManagerActor, msg)(timeout)\n    val future = kafkaManagerActor ? msg\n    future.map {\n      case ActorErrorResponse(error) =>\n        error\n      case o: Output =>\n        fn(o)\n    }.recover {\n      case e: Throwable =>\n        ApiError.fromThrowable(e)\n    }\n  }", "CodeBleu_score": 50.14191668472308}, {"code": "  private[this] def withKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => Future[ApiError \\/ FOutput])\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t\nval future = ask(kafkaManagerActor, msg)\nfuture.map {\ncase ActorErrorResponse(error) => ApiError(error)\ncase ActorResponse(output) => fn(output)\ncase ActorResponseWithFailure(failure) => ApiError(failure)\ncase ActorResponseWithFailureAndContext(failure, context) => ApiError(failure, context)\ncase ActorResponseWithFailureAndContextAndStack(failure, context, stack) => ApiError(failure, context, stack)\ncase ActorResponseWithFailureAndStack(failure, stack) => ApiError(failure, None, stack)\ncase ActorResponseWithStack(stack) => ApiError(\"Unknown error\", None, stack)\n}\n.recover {\ncase e: Throwable => ApiError(e)\n}\n}", "CodeBleu_score": 21.23152707883676}]}
{"instance_id": "ad37d3914acc", "generation_result": [{"code": "  def runPreferredLeaderElection(clusterName: String, topics: Set[String]): Future[ApiError \\/ ClusterContext] ={\n\t\nval commandRequest = KMClusterCommandRequest(clusterName, PreferredReplicaElectionCommand(topics))\nval response = ask(kafkaManager)(commandRequest)\nresponse.map {\n  case (error, clusterContext) =>\n    error.map(e => e: ApiError).toRight(clusterContext)\n}\n  }", "CodeBleu_score": 24.222419649167627}, {"code": "  def runPreferredLeaderElection(clusterName: String, topics: Set[String]): Future[ApiError \\/ ClusterContext] ={\n\t\n//    val topicList = topics.mkString(\",\")\n//    val commandRequest = KMClusterCommandRequest(clusterName, \"PreferredReplicaElectionCommand\", s\"PreferredReplicaElectionCommand for topics $topicList\", s\"PreferredReplicaElectionCommand for topics $topicList\")\n//    val kafkaManagerActor = getKafkaManagerActor(clusterName)\n//    val commandResult = kafkaManagerActor ? commandRequest\n//    commandResult.map(result => result.map(convertClusterContext))\n//  }", "CodeBleu_score": 8.064516129032258}, {"code": "  def runPreferredLeaderElection(clusterName: String, topics: Set[String]): Future[ApiError \\/ ClusterContext] ={\n\t\nval commandRequest = KMClusterCommandRequest(clusterName, PreferredReplicaElectionCommand(topics))\n\nval future = (kafkaManagerActor ? commandRequest).mapTo[CommandResult]\n\nfuture.map {\n  case CommandSuccess(_, clusterContext) => \\/-(clusterContext)\n  case CommandError(_, message) => -\\/(ApiError(s\"Error in preferred leader election: $message\"))\n}\n}", "CodeBleu_score": 21.962662695439757}]}
{"instance_id": "3ecdb2c1534f", "generation_result": [{"code": "private def runPreferredLeaderElectionWithAllTopics(clusterName: String) ={\n\t\tval topicList = getTopicList(clusterName)\n\tif (topicList.isFailure) {\n\t\tprintln(s\"Failed to retrieve the topic list for cluster $clusterName: ${topicList.failed.get}\")\n\t} else {\n\t\tval topicList = topicList.get\n\t\tval topicCount = topicList.size\n\t\tif (topicCount > 0) {\n\t\t\tval topicNames = topicList.map(_.name)\n\t\t\tval topicCountString = if (topicCount == 1) \"topic\" else \"topics\"\n\t\t\tprintln(s\"Found $topicCount $topicCountString in cluster $clusterName: $topicNames\")\n\t\t\tval result = topicNames.map(runPreferredLeaderElection(clusterName, _))\n\t\t\tval successCount = result.count(_.isSuccess)\n\t\t\tval failureCount = result.count(_.isFailure)\n\t\t\tval successCountString = if (successCount == 1) \"topic\" else \"topics\"\n\t\t\tval failureCountString = if (failureCount == 1) \"topic\" else \"topics\"\n\t\t\tval successString = if (successCount == 0) \"No\" else s\"$successCount\"\n\t\t\tval failureString = if (failureCount == 0) \"No\" else s\"$failureCount\"\n\t\t\tprintln(s\"Successfully completed preferred leader election for $successString $successCountString and failed for $failureString $failureCountString\")\n\t\t} else {\n\t\t\tprintln(s\"No topics found in cluster $clusterName\")\n\t\t}\n\t}\n}", "CodeBleu_score": 11.926991145825388}, {"code": "private def runPreferredLeaderElectionWithAllTopics(clusterName: String) ={\n\t\timplicit val ec = ExecutionContext.global\n\tval cluster = adminClient.describeCluster(clusterName).cluster\n\tval topicNames = cluster.topics.map(_.topic)\n\tval topicFutures = topicNames.map(topicName => runPreferredLeaderElection(clusterName, topicName))\n\tAwait.result(Future.sequence(topicFutures), Duration.Inf)\n}", "CodeBleu_score": 23.668431332751094}, {"code": "private def runPreferredLeaderElectionWithAllTopics(clusterName: String) ={\n\t\tval cluster = AdminClient.create(Collections.singletonMap(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, clusterName))\n\ttry {\n\t\tval topicNames = cluster.listTopics().names.get\n\t\ttopicNames.foreach(topicName => runPreferredLeaderElection(clusterName, topicName))\n\t} catch {\n\t\tcase e: Exception => println(s\"Error while retrieving the topic list for cluster $clusterName: $e\")\n\t} finally {\n\t\tcluster.close()\n\t}\n}", "CodeBleu_score": 13.315157970829247}]}
{"instance_id": "5955ade118b9", "generation_result": [{"code": "def manualPartitionAssignments(clusterName: String,\n                                 assignments: List[(String, List[(Int, List[Int])])]) = {\n\t\timplicit val executionContext = system.dispatcher\n\tval cluster = getCluster(clusterName)\n\tval brokers = getBrokers(cluster)\n\tval brokersMap = brokers.map(broker => (broker.id, broker)).toMap\n\tval brokersWithPartitions = assignments.flatMap{ case (topic, partitions) =>\n\t\tpartitions.flatMap{ case (partition, replicas) =>\n\t\t\treplicas.map(replica => (brokersMap(replica), topic, partition))\n\t\t}\n\t}\n\tval brokerAssignments = brokersWithPartitions.groupBy(_._1)\n\tval brokerAssignmentsWithErrors = brokerAssignments.map{ case (broker, assignments) =>\n\t\tval brokerAssignments = assignments.map(assignment => (assignment._2, assignment._3))\n\t\tval request = KafkaManagerCommandRequest(clusterName, KafkaManagerCommand.AssignPartitions, brokerAssignments)\n\t\tval future = ask(kafkaManagerActor, request)\n\t\tfuture.map(response => (broker, response))\n\t}\n\tval brokerAssignmentsWithErrorsFuture = Future.sequence(brokerAssignmentsWithErrors)\n\tbrokerAssignmentsWithErrorsFuture.map{ assignmentsWithErrors =>\n\t\tval errors = assignmentsWithErrors.flatMap{ case (broker, response) =>\n\t\t\tif (response.successful) None\n\t\t\telse Some(s\"Broker ${broker.id} failed to assign partitions: ${response.message}\")\n\t\t}\n\t\tif (errors.isEmpty) Success(true)\n\t\telse Failure(errors.mkString(\"\n\"))\n\t}\n}", "CodeBleu_score": 16.975800499559824}, {"code": "def manualPartitionAssignments(clusterName: String,\n                                 assignments: List[(String, List[(Int, List[Int])])]) = {\n\t//  val cluster = getCluster(clusterName)\n//  if (cluster == null) {\n//    throw new IllegalArgumentException(s\"Cluster $clusterName does not exist\")\n//  }\n//  val brokers = cluster.getBrokers\n//  val brokerMap = brokers.map(b => (b.id, b)).toMap\n//  val brokerIds = brokerMap.keys.toSeq.sorted\n//  val topicNames = cluster.getTopicNames\n//  val topicMap = topicNames.map(t => (t, cluster.getTopic(t))).toMap\n//  val topicAssignments = assignments.map {\n//    case (topicName, partitionAssignments) =>\n//      val topic = topicMap.get(topicName)\n//      if (topic == null) {\n//        throw new IllegalArgumentException(s\"Topic $topicName does not exist\")\n//      }\n//      val topicId = topic.id\n//      val topicPartitionMap = topic.partitions.map(p => (p.id, p)).toMap\n//      val partitionAssignmentsMap = partitionAssignments.map {\n//        case (partitionId, replicas) =>\n//          val partition = topicPartitionMap.get(partitionId)\n//          if (partition == null) {\n//            throw new IllegalArgumentException(s\"Partition $partitionId does not exist\")\n//          }\n//          val partitionId = partition.id\n//          val partitionReplicas = replicas.map {\n//            case replicaId =>\n//              val broker = brokerMap.get(replicaId)\n//              if (broker == null) {\n//                throw new IllegalArgumentException(s\"Broker $replicaId does not exist\")\n//              }\n//              broker.id\n//          }\n//          (partitionId, partitionReplicas)\n//      }.toMap\n//      (topicId, partitionAssignmentsMap)\n//  }\n//  val command = KMClusterCommand(clusterName, topicAssignments)\n//  val future = ask(kmActor, command)\n//  val result = Await.result(future, timeout.duration)\n//  result match {\n//    case KMClusterCommandSuccess(_, _, _) =>\n//      true\n//    case KMClusterCommandFailure(_, _, _, errors) =>\n//      errors\n//  }\n}", "CodeBleu_score": 5.183114608858888}, {"code": "def manualPartitionAssignments(clusterName: String,\n                                 assignments: List[(String, List[(Int, List[Int])])]) = {\n\t\n//  val command = KMClusterCommand(clusterName, KMClusterCommandNames.ManualPartitionAssignments, Some(KMClusterManualPartitionAssignments(assignments)))\n//  val request = KMClusterCommandRequest(command)\n//  val result = Await.result(KMClusterManager.get(clusterName).command(request), 5 seconds)\n//  result match {\n//    case KMClusterCommandSuccess(_, _) => true\n//    case KMClusterCommandFailure(_, _, errors) => errors\n//  }\n}", "CodeBleu_score": 5.183114608858888}]}
{"instance_id": "26fbc2ba1d28", "generation_result": [{"code": "private Config getKafkaBrokerConfig(AdminClient admin) throws Exception{\n\t\t// Get the cluster ID.\n\tCollection<Node> nodes = admin.describeCluster(Duration.ofSeconds(60)).nodes().get();\n\tif (nodes.isEmpty()) {\n\t\tthrow new ConnectException(\"No Kafka nodes available.\");\n\t}\n\n\t// Get the first node's ID.\n\tNode node = nodes.iterator().next();\n\tString nodeId = node.idString();\n\n\t// Get the node's configuration.\n\tConfigResource configResource = new ConfigResource(ConfigResource.Type.BROKER, nodeId);\n\tConfig config = admin.describeConfigs(Collections.singleton(configResource)).all().get().get(configResource);\n\tif (config.entries().isEmpty()) {\n\t\tthrow new ConnectException(\"No Kafka broker configurations available.\");\n\t}\n\n\t// Return the broker's configuration.\n\treturn config;\n}", "CodeBleu_score": 54.75925500529206}, {"code": "private Config getKafkaBrokerConfig(AdminClient admin) throws Exception{\n\t\tfinal long timeout = config.getDuration(KAFKA_BROKER_CONFIGURATION_TIMEOUT_MS).toMillis();\n\tfinal DescribeTopicsResult describeTopicsResult = admin.describeTopics(Collections.singleton(config.getString(KAFKA_TOPIC_NAME)));\n\tfinal Collection<TopicDescription> topicDescriptions = describeTopicsResult.all().get(timeout, TimeUnit.MILLISECONDS);\n\tif (topicDescriptions == null || topicDescriptions.isEmpty()) {\n\t\tthrow new ConnectException(\"No topic named '\" + config.getString(KAFKA_TOPIC_NAME) + \"' exists in the Kafka cluster.\");\n\t}\n\tfinal Node leader = topicDescriptions.iterator().next().partitions().iterator().next().leader();\n\tif (leader == null) {\n\t\tthrow new ConnectException(\"No leader exists for topic '\" + config.getString(KAFKA_TOPIC_NAME) + \"' in the Kafka cluster.\");\n\t}\n\tfinal ConfigResource resource = new ConfigResource(ConfigResource.Type.BROKER, leader.idString());\n\tfinal Config config = admin.describeConfigs(Collections.singleton(resource)).all().get(timeout, TimeUnit.MILLISECONDS).get(resource);\n\tif (config == null) {\n\t\tthrow new ConnectException(\"No configuration for broker \" + leader.idString() + \" exists in the Kafka cluster.\");\n\t}\n\treturn config;\n}", "CodeBleu_score": 46.407739489575185}, {"code": "private Config getKafkaBrokerConfig(AdminClient admin) throws Exception{\n\t\tSet<Node> nodes = admin.describeCluster(Duration.ofSeconds(30)).nodes();\n\tif (nodes.isEmpty()) {\n\t\tthrow new ConnectException(\"No nodes found in the Kafka cluster.\");\n\t}\n\tNode node = nodes.iterator().next();\n\treturn admin.describeConfigs(Collections.singleton(ConfigResource.forNode(node.id(), ConfigResource.Type.BROKER))).all().get().get(ConfigResource.forNode(node.id(), ConfigResource.Type.BROKER));\n}", "CodeBleu_score": 38.14896733684359}]}
{"instance_id": "adf40b68c93e", "generation_result": [{"code": "private static Validator forKafka(final Validator validator){\n\t\treturn (config, field, instance) -> config.getString(HistorizedRelationalDatabaseConnectorConfig.SCHEMA_HISTORY_CLASS)\n\t\t\t.equals(KafkaSchemaHistory.class.getName()) ? validator.validate(config, field, instance) : 0;\n}", "CodeBleu_score": 43.73549643620201}, {"code": "private static Validator forKafka(final Validator validator){\n\t\treturn (name, value) -> {\n\t\tif (KafkaSchemaHistory.isKafkaSchemaHistory(value)) {\n\t\t\treturn validator.validate(name, value);\n\t\t}\n\t\telse {\n\t\t\treturn 0;\n\t\t}\n\t};\n}", "CodeBleu_score": 17.42474557025958}, {"code": "private static Validator forKafka(final Validator validator){\n\t\treturn (name, value) -> {\n\t\tif (KafkaSchemaHistory.isEnabled()) {\n\t\t\treturn validator.validate(name, value);\n\t\t}\n\t\telse {\n\t\t\treturn 0;\n\t\t}\n\t};\n}", "CodeBleu_score": 16.59483073539919}]}
{"instance_id": "07ff1ca41c93", "generation_result": [{"code": "private synchronized Boolean isTopicCreationEnabled(Map<String, ?> config){\n\t\tif (config == null) {\n\t\treturn false;\n\t}\n\tBoolean topicCreationEnabled = Boolean.parseBoolean(config.getOrDefault(\"topic.creation.enable\", \"true\").toString());\n\tif (topicCreationEnabled == null) {\n\t\treturn false;\n\t}\n\treturn topicCreationEnabled;\n}", "CodeBleu_score": 30.875927216958498}, {"code": "private synchronized Boolean isTopicCreationEnabled(Map<String, ?> config){\n\t\tBoolean isTopicCreationEnabled = true;\n\tVersion kafkaConnectVersion = AppInfoParser.getVersion();\n\tif (kafkaConnectVersion.getMajor() >= 2 && kafkaConnectVersion.getMinor() >= 5) {\n\t\tisTopicCreationEnabled = (Boolean) config.get(\"topic.creation.enable\");\n\t}\n\treturn isTopicCreationEnabled;\n}", "CodeBleu_score": 36.273027844346615}, {"code": "private synchronized Boolean isTopicCreationEnabled(Map<String, ?> config){\n\t\t// Retrieve the Kafka Connect version\n\tString version = AppInfoParser.getVersion();\n\tif (version == null) {\n\t\tthrow new DebeziumException(\"Unable to retrieve Kafka Connect version\");\n\t}\n\n\t// Parse the Kafka Connect version\n\tVersion kafkaConnectVersion = Version.parse(version);\n\n\t// Retrieve the topic.creation.enable property from the configuration\n\tBoolean topicCreationEnabled = Boolean.parseBoolean(config.getOrDefault(\"topic.creation.enable\", \"true\").toString());\n\n\t// Check if the Kafka Connect version is compatible with topic creation\n\tif (kafkaConnectVersion.compareTo(Version.parse(\"2.5.0\")) < 0) {\n\t\tthrow new DebeziumException(\"Kafka Connect version \" + kafkaConnectVersion + \" is not compatible with topic creation\");\n\t}\n\n\t// Return true if the Kafka Connect version is compatible with topic creation and the property is set to true\n\treturn topicCreationEnabled;\n}", "CodeBleu_score": 42.072647096694475}]}
{"instance_id": "e2cc420e1e63", "generation_result": [{"code": "public static final KafkaOffsetBackingStore kafkaOffsetBackingStore(Map<String, String> config){\n\t\tif (config == null) {\n\t\tthrow new IllegalArgumentException(\"config must not be null\");\n\t}\n\n\tMap<String, String> adminConfig = new HashMap<>(config);\n\tString offsetStorageTopic = config.get(DistributedConfig.OFFSET_STORAGE_TOPIC_CONFIG);\n\tif (offsetStorageTopic == null) {\n\t\tthrow new DebeziumException(\"Offset storage topic name must be provided in the configuration\");\n\t}\n\tadminConfig.put(AdminClientConfig.CLIENT_ID_CONFIG, config.get(CLIENT_ID_CONFIG));\n\tadminConfig.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, config.get(DistributedConfig.BOOTSTRAP_SERVERS_CONFIG));\n\tSharedTopicAdmin admin = new SharedTopicAdmin(adminConfig);\n\tadmin.createTopicIfNotExists(offsetStorageTopic, 1, (short) 1);\n\tMap<String, Object> offsetStorageConfig = new HashMap<>(config);\n\toffsetStorageConfig.put(JsonConverterConfig.SCHEMAS_ENABLE_CONFIG, false);\n\tConverter offsetConverter = new JsonConverter();\n\toffsetConverter.configure(offsetStorageConfig);\n\treturn new KafkaOffsetBackingStore(admin, config.get(CLIENT_ID_CONFIG), offsetConverter);\n}", "CodeBleu_score": 38.277251318389126}, {"code": "public static final KafkaOffsetBackingStore kafkaOffsetBackingStore(Map<String, String> config){\n\t\tif (config == null) {\n\t\tthrow new IllegalArgumentException(\"config must not be null\");\n\t}\n\tif (!config.containsKey(BOOTSTRAP_SERVERS_CONFIG)) {\n\t\tthrow new IllegalArgumentException(\"Missing required configuration: \" + BOOTSTRAP_SERVERS_CONFIG);\n\t}\n\tif (!config.containsKey(GROUP_ID_CONFIG)) {\n\t\tthrow new IllegalArgumentException(\"Missing required configuration: \" + GROUP_ID_CONFIG);\n\t}\n\tif (!config.containsKey(OFFSET_STORAGE_TOPIC)) {\n\t\tthrow new IllegalArgumentException(\"Missing required configuration: \" + OFFSET_STORAGE_TOPIC);\n\t}\n\tif (!config.containsKey(OFFSET_STORAGE_REPLICATION_FACTOR)) {\n\t\tthrow new IllegalArgumentException(\"Missing required configuration: \" + OFFSET_STORAGE_REPLICATION_FACTOR);\n\t}\n\tif (!config.containsKey(OFFSET_STORAGE_PARTITIONS)) {\n\t\tthrow new IllegalArgumentException(\"Missing required configuration: \" + OFFSET_STORAGE_PARTITIONS);\n\t}\n\tif (!config.containsKey(OFFSET_COMMIT_INTERVAL_MS_CONFIG)) {\n\t\tthrow new IllegalArgumentException(\"Missing required configuration: \" + OFFSET_COMMIT_INTERVAL_MS_CONFIG);\n\t}\n\tif (!config.containsKey(OFFSET_STORAGE_FILE_FILENAME)) {\n\t\tthrow new IllegalArgumentException(\"Missing required configuration: \" + OFFSET_STORAGE_FILE_FILENAME);\n\t}\n\tif (!config.containsKey(OFFSET_STORAGE_FILE_REPLICATION_FACTOR)) {\n\t\tthrow new IllegalArgumentException(\"Missing required configuration: \" + OFFSET_STORAGE_FILE_REPLICATION_FACTOR);\n\t}\n\tif (!config.containsKey(OFFSET_STORAGE_FILE_PARTITIONS)) {\n\t\tthrow new IllegalArgumentException(\"Missing required configuration: \" + OFFSET_STORAGE_FILE_PARTITIONS);\n\t}\n\tif (!config.containsKey(OFFSET_STORAGE_FILE_DELETE_DELAY_MS)) {\n\t\tthrow new IllegalArgumentException(\"Missing required configuration: \" + OFFSET_STORAGE_FILE_DELETE_DELAY_MS);\n\t}\n\tif (!config.containsKey(OFFSET_STORAGE_FILE_MIN_CLEANUP_INTERVAL_MS)) {\n\t\tthrow new IllegalArgumentException(\"Missing required configuration: \" + OFFSET_STORAGE_FILE_MIN_CLEANUP_INTERVAL_MS);\n\t}\n\tif (!config.containsKey(OFFSET_STORAGE_FILE_INDEX_INTERVAL_BYTES))", "CodeBleu_score": 15.502121598244454}, {"code": "public static final KafkaOffsetBackingStore kafkaOffsetBackingStore(Map<String, String> config){\n\t\tDistributedConfig dc = new DistributedConfig(config);\n\tSet<String> missing = dc.validate();\n\tif (!missing.isEmpty()) {\n\t\tthrow new DebeziumException(\"Missing required configuration options: \" + missing);\n\t}\n\tMap<String, Object> adminConfig = new HashMap<>();\n\tadminConfig.put(BOOTSTRAP_SERVERS_CONFIG, dc.getString(BOOTSTRAP_SERVERS_CONFIG));\n\tadminConfig.put(SECURITY_PROTOCOL_CONFIG, dc.getString(SECURITY_PROTOCOL_CONFIG));\n\tadminConfig.put(CLIENT_ID_CONFIG, dc.getString(CLIENT_ID_CONFIG) + \"-admin\");\n\tSharedTopicAdmin admin = new SharedTopicAdmin(adminConfig);\n\tConverter offsetConverter = createOffsetConverter(dc);\n\treturn new KafkaOffsetBackingStore(admin, dc.getString(CLIENT_ID_CONFIG), offsetConverter);\n}", "CodeBleu_score": 33.96409821744664}]}
{"instance_id": "4ecb2279231e", "generation_result": [{"code": "private T readKey(JsonNode node) throws IOException{\n\t\tif (node.isObject()) {\n\t\tIterator<String> fieldNames = node.fieldNames();\n\t\twhile (fieldNames.hasNext()) {\n\t\t\tString fieldName = fieldNames.next();\n\t\t\tif (fieldName.equals(Envelope.FieldName.PAYLOAD)) {\n\t\t\t\tnode = node.get(fieldName);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif (node.isValueNode()) {\n\t\treturn keySerializer.deserialize(topic, node.asText());\n\t}\n\telse {\n\t\treturn keySerializer.deserialize(topic, node.toString());\n\t}\n}", "CodeBleu_score": 33.41647395954915}, {"code": "private T readKey(JsonNode node) throws IOException{\n\t\tif (node.isObject()) {\n\t\tIterator<String> fieldNames = node.fieldNames();\n\t\tif (fieldNames.hasNext()) {\n\t\t\tString fieldName = fieldNames.next();\n\t\t\tif (fieldName.equals(Envelope.FieldName.PAYLOAD)) {\n\t\t\t\tnode = node.get(fieldName);\n\t\t\t\tif (node.isObject()) {\n\t\t\t\t\tfieldNames = node.fieldNames();\n\t\t\t\t\tif (fieldNames.hasNext()) {\n\t\t\t\t\t\tfieldName = fieldNames.next();\n\t\t\t\t\t\tif (fieldName.equals(Envelope.FieldName.AFTER)) {\n\t\t\t\t\t\t\tnode = node.get(fieldName);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnode = node.get(Envelope.FieldName.BEFORE);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn keyDeserializer.deserialize(topic, node);\n}", "CodeBleu_score": 39.610269075658834}, {"code": "private T readKey(JsonNode node) throws IOException{\n\t\tif (node.isObject()) {\n\t\tIterator<String> fieldNames = node.fieldNames();\n\t\tif (fieldNames.hasNext()) {\n\t\t\tString fieldName = fieldNames.next();\n\t\t\tif (fieldName.equals(Envelope.FieldName.PAYLOAD)) {\n\t\t\t\treturn read(node.get(fieldName));\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn read(node);\n\t\t\t}\n\t\t}\n\t}\n\treturn read(node);\n}", "CodeBleu_score": 32.45074424651763}]}
{"instance_id": "b8ba1bfc7b5e", "generation_result": [{"code": "public String topicNameFor(I id, String prefix, String delimiter){\n\t\tString topicName = topicNameForDelegate.topicNameFor(id);\n\tif (topicName == null) {\n\t\treturn null;\n\t}\n\tStringBuilder sb = new StringBuilder();\n\tsb.append(prefix);\n\tsb.append(delimiter);\n\tsb.append(topicName);\n\tsb.append(delimiter);\n\tsb.append(id);\n\treturn sanitize(sb.toString());\n}", "CodeBleu_score": 19.14534810526261}, {"code": "public String topicNameFor(I id, String prefix, String delimiter){\n\t\tString topicName = topicNameDelegate.apply(id);\n\tif (topicName == null) {\n\t\treturn null;\n\t}\n\tif (topicName.isEmpty()) {\n\t\tthrow new IllegalArgumentException(\"The topic name cannot be empty\");\n\t}\n\tif (delimiter == null || delimiter.isEmpty()) {\n\t\tthrow new IllegalArgumentException(\"The delimiter cannot be null or empty\");\n\t}\n\tif (prefix == null) {\n\t\tprefix = \"\";\n\t}\n\tif (prefix.isEmpty()) {\n\t\tprefix = \"\";\n\t}\n\tif (topicName.contains(delimiter)) {\n\t\tthrow new IllegalArgumentException(\"The topic name cannot contain the delimiter\");\n\t}\n\tif (topicName.contains(prefix)) {\n\t\tthrow new IllegalArgumentException(\"The topic name cannot contain the prefix\");\n\t}\n\tif (topicName.startsWith(delimiter)) {\n\t\tthrow new IllegalArgumentException(\"The topic name cannot start with the delimiter\");\n\t}\n\tif (topicName.endsWith(delimiter)) {\n\t\tthrow new IllegalArgumentException(\"The topic name cannot end with the delimiter\");\n\t}\n\tif (topicName.startsWith(prefix)) {\n\t\tthrow new IllegalArgumentException(\"The topic name cannot start with the prefix\");\n\t}\n\tif (topicName.endsWith(prefix)) {\n\t\tthrow new IllegalArgumentException(\"The topic name cannot end with the prefix\");\n\t}\n\tboolean replaced = false;\n\tfor (int i = 0; i < topicName.length(); i++) {\n\t\tchar c = topicName.charAt(i);\n\t\tif (c == delimiter.charAt(0) || c == prefix.charAt(0)) {\n\t\t\ttopicName = topicName.substring(0, i) + replacementCharacter + topicName.substring(i + 1);\n\t\t\treplaced = true;\n\t\t}\n\t}\n\tif (replaced) {\n\t\tLOGGER.warn(\"The topic name {} was sanitized to {} because it contained illegal characters\", id, topicName);\n\t}\n\treturn prefix + topicName + delimiter;\n}", "CodeBleu_score": 41.90302440463465}, {"code": "public String topicNameFor(I id, String prefix, String delimiter){\n\t\tif (id == null) {\n\t\tthrow new IllegalArgumentException(\"id cannot be null\");\n\t}\n\tif (prefix == null) {\n\t\tthrow new IllegalArgumentException(\"prefix cannot be null\");\n\t}\n\tif (delimiter == null) {\n\t\tthrow new IllegalArgumentException(\"delimiter cannot be null\");\n\t}\n\tString topicName = topicNameDelegate.apply(id);\n\tif (topicName == null) {\n\t\tthrow new IllegalArgumentException(\"topicNameDelegate cannot return null\");\n\t}\n\tif (topicName.isEmpty()) {\n\t\tthrow new IllegalArgumentException(\"topicNameDelegate cannot return an empty string\");\n\t}\n\tif (topicName.length() > MAX_TOPIC_NAME_LENGTH) {\n\t\tthrow new IllegalArgumentException(\"topicNameDelegate cannot return a string longer than \" + MAX_TOPIC_NAME_LENGTH + \" characters\");\n\t}\n\tStringBuilder sb = new StringBuilder(prefix);\n\tsb.append(delimiter);\n\tsb.append(topicName);\n\tString sanitizedTopicName = sb.toString();\n\tfor (int i = 0; i < sanitizedTopicName.length(); i++) {\n\t\tchar c = sanitizedTopicName.charAt(i);\n\t\tif (c < 0x20 || c > 0x7E) {\n\t\t\tif (c == delimiter.charAt(0)) {\n\t\t\t\tthrow new IllegalArgumentException(\"topicNameDelegate cannot return a string that contains the delimiter\");\n\t\t\t}\n\t\t\tif (c == prefix.charAt(0)) {\n\t\t\t\tthrow new IllegalArgumentException(\"topicNameDelegate cannot return a string that contains the prefix\");\n\t\t\t}\n\t\t\tif (c == REPLACEMENT_CHAR) {\n\t\t\t\tthrow new IllegalArgumentException(\"topicNameDelegate cannot return a string that contains the replacement character\");\n\t\t\t}\n\t\t\tif (c == ESCAPE_CHAR) {\n\t\t\t\tthrow new IllegalArgumentException(\"topicNameDelegate cannot return a string that contains the escape character\");\n\t\t\t}\n\t\t\tlogger.warn(\"The topic name '{}' contains invalid character '{}', which will be replaced with '{}'\", sanitizedTopicName, c, REPLACEMENT_CHAR);\n\t\t\tsanitizedTopicName = sanitizedTopicName.replace(c, REPLACEMENT_CHAR);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn sanitizedTopicName;\n}", "CodeBleu_score": 35.957131214785065}]}
{"instance_id": "9cf0d74c098d", "generation_result": [{"code": "public ErrorHandler(Class<? extends SourceConnector> connectorType, CommonConnectorConfig connectorConfig,\n                        ChangeEventQueue<?> queue, ErrorHandler replacedErrorHandler) {\n\t\tthis.connectorType = connectorType;\n\tthis.connectorConfig = connectorConfig;\n\tthis.queue = queue;\n\tthis.producerThrowable = new AtomicReference<>();\n\tthis.maxRetries = connectorConfig.maxRetries();\n\tif (replacedErrorHandler != null) {\n\t\tthis.retries = replacedErrorHandler.retries;\n\t}\n\telse {\n\t\tthis.retries = 0;\n\t}\n}", "CodeBleu_score": 63.28396254935513}, {"code": "public ErrorHandler(Class<? extends SourceConnector> connectorType, CommonConnectorConfig connectorConfig,\n                        ChangeEventQueue<?> queue, ErrorHandler replacedErrorHandler) {\n\t\tthis.connectorType = connectorType;\n\tthis.connectorConfig = connectorConfig;\n\tthis.queue = queue;\n\tthis.producerThrowable = new AtomicReference<>();\n\tthis.maxRetries = connectorConfig.maxRetries();\n\tif (replacedErrorHandler != null) {\n\t\tthis.retries = replacedErrorHandler.retries;\n\t}\n\telse {\n\t\tthis.retries = 0;\n\t}\n}", "CodeBleu_score": 63.28396254935513}, {"code": "public ErrorHandler(Class<? extends SourceConnector> connectorType, CommonConnectorConfig connectorConfig,\n                        ChangeEventQueue<?> queue, ErrorHandler replacedErrorHandler) {\n\t\tthis.connectorType = connectorType;\n\tthis.connectorConfig = connectorConfig;\n\tthis.queue = queue;\n\tthis.producerThrowable = new AtomicReference<>();\n\tthis.maxRetries = connectorConfig.getMaxRetries() != null ? connectorConfig.getMaxRetries() : Integer.MAX_VALUE;\n\tif (replacedErrorHandler != null) {\n\t\tthis.retries = replacedErrorHandler.retries;\n\t}\n\telse {\n\t\tthis.retries = 0;\n\t}\n}", "CodeBleu_score": 63.06655080655044}]}
{"instance_id": "8ab4bf3a4dd8", "generation_result": [{"code": "public void validate(Configuration configuration, Field.Set fields){\n\t\t// Validate the configuration\n\tMap<String, ConfigValue> configErrors = configuration.validate(fields);\n\tif (configErrors != null && !configErrors.isEmpty()) {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tsb.append(\"The following configuration problems were identified:\n\");\n\t\tfor (Map.Entry<String, ConfigValue> configError : configErrors.entrySet()) {\n\t\t\tsb.append(\"\\t\").append(configError.getKey()).append(\" = \").append(configError.getValue().errorMessages()).append(\"\n\");\n\t\t}\n\t\tthrow new ConfigException(sb.toString());\n\t}\n}", "CodeBleu_score": 38.67747231640012}, {"code": "public void validate(Configuration configuration, Field.Set fields){\n\t\tif (configuration == null) {\n\t\tthrow new ConfigException(\"Configuration object is null\");\n\t}\n\tif (fields == null) {\n\t\tthrow new ConfigException(\"Fields object is null\");\n\t}\n\tfor (Field field : fields) {\n\t\tConfigValue configValue = configuration.validate(field);\n\t\tif (configValue.errorMessages() != null && configValue.errorMessages().size() > 0) {\n\t\t\tthrow new ConfigException(configValue.errorMessages().get(0));\n\t\t}\n\t}\n}", "CodeBleu_score": 32.54285611135204}, {"code": "public void validate(Configuration configuration, Field.Set fields){\n\tfor (Field field : fields) {\nConfigValue configValue = configuration.validate(field, false);\nif (configValue.errorMessages() != null && !configValue.errorMessages().isEmpty()) {\nthrow new ConfigException(configValue.errorMessages().get(0));\n}\n}\n}", "CodeBleu_score": 30.89394379942204}]}
{"instance_id": "860405dc9abb", "generation_result": [{"code": "private Schema buildNewSchema(String fieldName, Schema oldSchema, Map<String, Header> headerToProcess, List<String> nestedFields, int level){\n\t\tSchemaBuilder builder = SchemaUtil.copySchemaBasics(oldSchema, SchemaBuilder.struct());\n\tif (oldSchema.type() == Schema.Type.STRUCT) {\n\t\tfor (Field field : oldSchema.fields()) {\n\t\t\tString fieldPath = fieldName != null ? fieldName + \".\" + field.name() : field.name();\n\t\t\tif (headerToProcess.containsKey(fieldPath)) {\n\t\t\t\t// The field is in the header, so we need to add it to the schema\n\t\t\t\tSchema fieldSchema = field.schema();\n\t\t\t\tSchema newFieldSchema = buildNewSchema(fieldPath, fieldSchema, headerToProcess, nestedFields, level + 1);\n\t\t\t\tbuilder.field(field.name(), newFieldSchema);\n\t\t\t\tLOGGER.debug(\"Adding field '{}' to schema at path '{}'\", field.name(), fieldPath);\n\t\t\t}\n\t\t\telse if (nestedFields.contains(fieldPath)) {\n\t\t\t\t// The field is in the nested fields, so we need to add it to the schema\n\t\t\t\tSchema fieldSchema = field.schema();\n\t\t\t\tSchema newFieldSchema = buildNewSchema(fieldPath, fieldSchema, headerToProcess, nestedFields, level + 1);\n\t\t\t\tbuilder.field(field.name(), newFieldSchema);\n\t\t\t\tLOGGER.debug(\"Adding field '{}' to schema at path '{}'\", field.name(), fieldPath);\n\t\t\t}\n\t\t\telse if (field.schema().type() == Schema.Type.STRUCT) {\n\t\t\t\t// The field is a struct, so we need to add it to the schema\n\t\t\t\tSchema fieldSchema = field.schema();\n\t\t\t\tSchema newFieldSchema = buildNewSchema(fieldPath, fieldSchema, headerToProcess, nestedFields, level + 1);\n\t\t\t\tbuilder.field(field.name(), newFieldSchema);\n\t\t\t\tLOGGER.debug(\"Adding field '{}' to schema at path '{}'\", field.name(), fieldPath);\n\t\t\t}\n\t\t}\n\t}\n\telse if (oldSchema.type() == Schema.Type.ARRAY) {\n\t\tSchema elementSchema = oldSchema.valueSchema();\n\t\tSchema newElementSchema = buildNewSchema(fieldName, elementSchema, headerToProcess, nestedFields, level + 1);\n\t\tbuilder.valueSchema(newElementSchema);\n\t}\n\treturn builder.build();\n}", "CodeBleu_score": 37.97087490916995}, {"code": "private Schema buildNewSchema(String fieldName, Schema oldSchema, Map<String, Header> headerToProcess, List<String> nestedFields, int level){\n\t\tif (oldSchema.type().isPrimitive()) {\n\t\treturn oldSchema;\n\t}\n\tSchemaBuilder builder = SchemaUtil.copySchemaBasics(oldSchema, SchemaBuilder.struct());\n\tfor (Field field : oldSchema.fields()) {\n\t\tSchema newSchema = buildNewSchema(field.name(), field.schema(), headerToProcess, nestedFields, level + 1);\n\t\tif (newSchema != null) {\n\t\t\tbuilder.field(field.name(), newSchema);\n\t\t}\n\t}\n\tif (headerToProcess.containsKey(fieldName)) {\n\t\tSchema headerSchema = SchemaUtil.getPrimitiveSchemaBuilder(headerToProcess.get(fieldName).schema().type()).build();\n\t\tbuilder.field(fieldName, headerSchema);\n\t\tlogger.debug(\"Adding field '{}' to schema at level {}\", fieldName, level);\n\t} else if (nestedFields.contains(fieldName)) {\n\t\tSchemaBuilder schemaBuilder = SchemaUtil.copySchemaBasics(oldSchema, SchemaBuilder.struct());\n\t\tfor (Field field : oldSchema.fields()) {\n\t\t\tSchema newSchema = buildNewSchema(field.name(), field.schema(), headerToProcess, nestedFields, level + 1);\n\t\t\tif (newSchema != null) {\n\t\t\t\tschemaBuilder.field(field.name(), newSchema);\n\t\t\t}\n\t\t}\n\t\tSchema schema = schemaBuilder.build();\n\t\tbuilder.field(fieldName, schema);\n\t\tlogger.debug(\"Adding field '{}' to schema at level {}\", fieldName, level);\n\t}\n\treturn builder.build();\n}", "CodeBleu_score": 46.15988426993905}, {"code": "private Schema buildNewSchema(String fieldName, Schema oldSchema, Map<String, Header> headerToProcess, List<String> nestedFields, int level){\n\t\tif (oldSchema.type().isPrimitive()) {\n\t\treturn oldSchema;\n\t}\n\tSchemaBuilder builder = SchemaUtil.copySchemaBasics(oldSchema, SchemaBuilder.struct());\n\tList<Schema.Field> fields = oldSchema.fields();\n\tfor (Schema.Field field : fields) {\n\t\tString fieldName = field.name();\n\t\tSchema fieldSchema = field.schema();\n\t\tif (fieldSchema.type().isPrimitive()) {\n\t\t\tbuilder.field(fieldName, fieldSchema);\n\t\t} else {\n\t\t\tSchemaBuilder fieldBuilder = SchemaUtil.copySchemaBasics(fieldSchema, SchemaBuilder.struct());\n\t\t\tList<Schema.Field> subFields = fieldSchema.fields();\n\t\t\tfor (Schema.Field subField : subFields) {\n\t\t\t\tString subFieldName = subField.name();\n\t\t\t\tSchema subFieldSchema = subField.schema();\n\t\t\t\tif (subFieldSchema.type().isPrimitive()) {\n\t\t\t\t\tfieldBuilder.field(subFieldName, subFieldSchema);\n\t\t\t\t} else {\n\t\t\t\t\tfieldBuilder.field(subFieldName, buildNewSchema(subFieldName, subFieldSchema, headerToProcess, nestedFields, level + 1));\n\t\t\t\t}\n\t\t\t}\n\t\t\tbuilder.field(fieldName, fieldBuilder.build());\n\t\t}\n\t}\n\tif (headerToProcess.containsKey(fieldName)) {\n\t\tHeader header = headerToProcess.get(fieldName);\n\t\tSchema headerSchema = SchemaUtil.getPrimitiveSchemaBuilder(header.schema().type()).build();\n\t\tbuilder.field(fieldName, headerSchema);\n\t}\n\treturn builder.build();\n}", "CodeBleu_score": 42.95732180860785}]}
{"instance_id": "681a0415df83", "generation_result": [{"code": "public static SnapshotRecord fromSource(Struct source){\n\t\tif (source.schema().field(SNAPSHOT_KEY) == null) {\n\t\treturn null;\n\t}\n\tString snapshotString = (String) source.get(SNAPSHOT_KEY);\n\tif (snapshotString == null) {\n\t\treturn null;\n\t}\n\treturn SnapshotRecord.valueOf(snapshotString.toUpperCase());\n}", "CodeBleu_score": 33.25947354671817}, {"code": "public static SnapshotRecord fromSource(Struct source){\n\t\tif (source.schema().field(SNAPSHOT_KEY) == null) {\n\t\treturn null;\n\t}\n\tString snapshotString = source.getString(SNAPSHOT_KEY);\n\tif (snapshotString == null) {\n\t\treturn null;\n\t}\n\treturn SnapshotRecord.valueOf(snapshotString.toUpperCase());\n}", "CodeBleu_score": 29.879273517904398}, {"code": "public static SnapshotRecord fromSource(Struct source){\n\t\tif (source.schema().field(SNAPSHOT_KEY) == null) {\n\t\treturn null;\n\t}\n\tString snapshotString = (String) source.get(SNAPSHOT_KEY);\n\tif (snapshotString == null) {\n\t\treturn null;\n\t}\n\treturn SnapshotRecord.valueOf(snapshotString.toUpperCase());\n}", "CodeBleu_score": 33.25947354671817}]}
{"instance_id": "85ef1162e38a", "generation_result": [{"code": "public static Optional<Float> parse(String version) throws NumberFormatException{\n\t\tString[] parts = version.split(\"\\\\.\");\n\tif (parts.length > 2) {\n\t\tparts = Arrays.copyOfRange(parts, 0, 2);\n\t}\n\tString[] subParts = parts[0].split(\"-\");\n\tif (subParts.length > 0) {\n\t\ttry {\n\t\t\treturn Optional.of(Float.parseFloat(subParts[0]));\n\t\t} catch (NumberFormatException e) {\n\t\t\treturn Optional.empty();\n\t\t}\n\t}\n\treturn Optional.empty();\n}", "CodeBleu_score": 62.103154925902125}, {"code": "public static Optional<Float> parse(String version) throws NumberFormatException{\n\t\tString[] parts = version.split(\"\\\\.\");\n\tString[] numbers = parts[0].split(\"-\");\n\tfloat result = Float.parseFloat(numbers[0]);\n\tif (parts.length > 1) {\n\t\tresult += Float.parseFloat(parts[1]) / 100;\n\t}\n\treturn Optional.of(result);\n}", "CodeBleu_score": 48.13170712358771}, {"code": "public static Optional<Float> parse(String version) throws NumberFormatException{\n\t\tif (version == null) {\n\t\treturn Optional.empty();\n\t}\n\tString[] parts = version.split(\"\\\\.\");\n\tif (parts.length > 2) {\n\t\tparts = Arrays.copyOfRange(parts, 0, 2);\n\t}\n\tString[] numbers = parts[0].split(\"-\");\n\tif (numbers.length > 0) {\n\t\treturn Optional.of(Float.parseFloat(numbers[0]));\n\t}\n\treturn Optional.empty();\n}", "CodeBleu_score": 54.73010961057332}]}
{"instance_id": "64346d69eba0", "generation_result": [{"code": "public Mono<ResponseEntity<ConnectorDTO>> createConnector(String clusterName, String connectName,\n                                                            @Valid Mono<NewConnectorDTO> connector,\n                                                            ServerWebExchange exchange){\n\treturn createConnector(clusterName, connectName, connector, null, exchange);\n}", "CodeBleu_score": 12.600422865605399}, {"code": "public Mono<ResponseEntity<ConnectorDTO>> createConnector(String clusterName, String connectName,\n                                                            @Valid Mono<NewConnectorDTO> connector,\n                                                            ServerWebExchange exchange){\n\tMono<AccessContext> ctx = buildAccessContext(clusterName, exchange);\nreturn ctx.zipWith(connector)\n.map(tuple -> tuple.getT1().withAdditionalPermissions(ConnectAction.CREATE))\n.filterWhen(ctxAndConnector -> validateAccess(ctxAndConnector.getT1(), ctxAndConnector.getT2()))\n.map(tuple -> tuple.getT2())\n.map(NewConnectorDTO::toConnectorDTO)\n.map(connectorDTO -> audit(ctx, connectorDTO, exchange))\n.map(ResponseEntity::ok)\n.defaultIfEmpty(ResponseEntity.notFound().build());\n}", "CodeBleu_score": 34.713801671018565}, {"code": "public Mono<ResponseEntity<ConnectorDTO>> createConnector(String clusterName, String connectName,\n                                                            @Valid Mono<NewConnectorDTO> connector,\n                                                            ServerWebExchange exchange){\n\t\tAccessContext accessContext = accessService.createBaseAccessContext(clusterName);\n\taccessContext.setResource(connectName);\n\taccessContext.setAction(ConnectAction.CREATE);\n\treturn accessService.authorize(accessContext, exchange)\n\t\t\t.then(kafkaConnectService.createConnector(clusterName, connectName, connector))\n\t\t\t.map(ResponseEntity::ok)\n\t\t\t.doOnSuccess(response -> auditService.log(accessContext,\n\t\t\t\t\tMap.of(\"connect\", connectName, \"connector\", connector), response))\n\t\t\t.switchIfEmpty(Mono.just(ResponseEntity.status(403).build()));\n}", "CodeBleu_score": 35.80366014263101}]}
{"instance_id": "4c446fd64db6", "generation_result": [{"code": "public Mono<ResponseEntity<Void>> deleteConnector(String clusterName, String connectName,\n                                                    String connectorName,\n                                                    ServerWebExchange exchange){\n\tAccessContext accessContext = AccessContext.builder()\n    .clusterName(clusterName)\n    .connectorName(connectorName)\n    .build();\naccessContext.setActionType(ConnectAction.DELETE);\nreturn accessControlService.filter(accessContext, exchange)\n    .then(Mono.defer(() -> {\n      log.debug(\"Starting delete connector request for connector {} in cluster {}\",\n          connectorName, clusterName);\n      return kafkaConnectService.deleteConnector(clusterName, connectName, connectorName)\n          .map(v -> {\n            log.info(\"Connector {} in cluster {} was deleted\", connectorName, clusterName);\n            auditService.log(\n                KafkaConnectAuditEvent.builder()\n                    .cluster(clusterName)\n                    .topic(connectorName)\n                    .principal(exchange.getPrincipal().getName())\n                    .operation(KafkaConnectAuditEvent.Operation.DELETE)\n                    .build());\n            return ResponseEntity.ok().build();\n          });\n    }));\n}", "CodeBleu_score": 35.64603301841403}, {"code": "public Mono<ResponseEntity<Void>> deleteConnector(String clusterName, String connectName,\n                                                    String connectorName,\n                                                    ServerWebExchange exchange){\n\t\nAccessContext accessContext = AccessContext.builder()\n    .clusterName(clusterName)\n    .connectName(connectName)\n    .permission(ConnectAction.DELETE)\n    .build();\n\nreturn kafkaConnectService.validateAccess(accessContext)\n    .then(kafkaConnectService.deleteConnector(clusterName, connectName, connectorName))\n    .then(Mono.defer(() -> audit(accessContext, connectorName, \"DELETE\", exchange)))\n    .then(Mono.just(ResponseEntity.noContent().build()));\n\n}", "CodeBleu_score": 43.51619411212044}, {"code": "public Mono<ResponseEntity<Void>> deleteConnector(String clusterName, String connectName,\n                                                    String connectorName,\n                                                    ServerWebExchange exchange){\n\tAccessContext accessContext = new AccessContext(clusterName, connectName, Set.of(ConnectAction.DELETE));\nreturn accessService.hasAccess(accessContext, exchange)\n        .then(kafkaConnectService.getConnector(clusterName, connectName, connectorName))\n        .map(connector -> {\n            auditService.log(Map.of(\n                \"cluster\", clusterName,\n                \"connect\", connectName,\n                \"connector\", connectorName,\n                \"user\", accessContext.getUserName()\n            ),\n                ConnectorActions.DELETE,\n                connector.getConnector().config()\n            );\n            return connector;\n        })\n        .map(FullConnectorInfoDTO::getConnector)\n        .flatMap(connector -> kafkaConnectService.deleteConnector(clusterName, connectName, connector))\n        .then(Mono.just(ResponseEntity.ok().build()))\n        .doOnError(e -> auditService.log(Map.of(\n            \"cluster\", clusterName,\n            \"connect\", connectName,\n            \"connector\", connectorName,\n            \"user\", accessContext.getUserName()\n        ), ConnectorActions.DELETE_FAILED, e));\n}", "CodeBleu_score": 32.34885947944143}]}
{"instance_id": "d34a49f3ca1b", "generation_result": [{"code": "public Mono<ResponseEntity<Void>> updateConnectorState(String clusterName, String connectName,\n                                                         String connectorName,\n                                                         ConnectorActionDTO action,\n                                                         ServerWebExchange exchange) {\n\t\nConnectorDTO connectorDTO = new ConnectorDTO();\nconnectorDTO.setName(connectorName);\nconnectorDTO.setCluster(clusterName);\nconnectorDTO.setConfig(action.getConfig());\n\nreturn Mono.just(connectorDTO)\n    .map(c -> buildAccessContext(c, action))\n    .map(c -> validateAccess(c, exchange))\n    .map(c -> kafkaConnectService.updateConnectorState(c, action))\n    .map(c -> audit(c, exchange))\n    .then(Mono.just(ResponseEntity.noContent().build()));\n}", "CodeBleu_score": 22.948443847916206}, {"code": "public Mono<ResponseEntity<Void>> updateConnectorState(String clusterName, String connectName,\n                                                         String connectorName,\n                                                         ConnectorActionDTO action,\n                                                         ServerWebExchange exchange) {\n\t\nfinal var accessContext = new AccessContext(clusterName, Set.of(ConnectAction.READ, ConnectAction.WRITE));\n", "CodeBleu_score": 12.294921264159482}, {"code": "public Mono<ResponseEntity<Void>> updateConnectorState(String clusterName, String connectName,\n                                                         String connectorName,\n                                                         ConnectorActionDTO action,\n                                                         ServerWebExchange exchange) {\n\t\treturn Mono.just(accessService.buildAccessContext(clusterName, exchange))\n\t\t.filter(ctx -> ctx.hasAccess(ConnectAction.UPDATE))\n\t\t.map(ctx -> accessService.buildConnectorContext(ctx, clusterName, connectName, connectorName))\n\t\t.filter(ctx -> ctx.hasAccess(ConnectAction.UPDATE))\n\t\t.map(ctx -> accessService.buildConnectorActionContext(ctx, action))\n\t\t.filter(ctx -> ctx.hasAccess(action))\n\t\t.flatMap(ctx -> kafkaConnectService.updateConnectorState(clusterName, connectName, connectorName, action))\n\t\t.map(ResponseEntity::ok)\n\t\t.doOnNext(resp -> auditService.log(ctx.getAuditContext(), action.name(),\n\t\t\t\"Connector state has been updated\", connectorName, clusterName))\n\t\t.doOnError(e -> auditService.log(ctx.getAuditContext(), action.name(),\n\t\t\t\"Failed to update connector state\", connectorName, clusterName, e));\n}", "CodeBleu_score": 31.309821455919675}]}
{"instance_id": "199cfe41b374", "generation_result": [{"code": "public Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig{\n\t\n}", "CodeBleu_score": 8.648212644078399}, {"code": "public Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig{\n\t\npublic Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig(\n        ServerWebExchange exchange,\n        String clusterName,\n        String connectName,\n        String pluginName,\n        @Valid ConnectorPluginConfigValidationRequestDTO connectorPluginConfigValidationRequestDTO\n) {\n    return Mono.fromCallable(() -> {\n        AccessContext accessContext = accessService.getAccessContext(exchange);\n        if (!accessService.isAllowed(accessContext, clusterName, ConnectAction.READ)) {\n            throw new ForbiddenException();\n        }\n\n        return kafkaConnectService.validateConnectorPluginConfig(clusterName, connectName, pluginName,\n                connectorPluginConfigValidationRequestDTO);\n    });\n}\n\n}", "CodeBleu_score": 48.37409686708883}, {"code": "public Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig{\n\tpublic Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig(ServerWebExchange exchange,\n        String clusterName,\n        String connectName,\n        String pluginName,\n        @Valid ConnectorPluginConfigValidationRequestDTO body) {\n    return kafkaConnectService.validateConnectorPluginConfig(clusterName, connectName, pluginName, body)\n            .map(ResponseEntity::ok);\n}\n", "CodeBleu_score": 56.42608878511825}]}
{"instance_id": "88380ae300c4", "generation_result": [{"code": "public static ConfigurableApplicationContext startApplication(String[] args){\n\t\treturn new SpringApplicationBuilder(KafkaUiApplication.class)\n\t\t\t.initializers(new DynamicConfigInitializer())\n\t\t\t.run(args);\n}", "CodeBleu_score": 38.80857953105964}, {"code": "public static ConfigurableApplicationContext startApplication(String[] args){\n\t\treturn new SpringApplicationBuilder(KafkaUiApplication.class)\n\t\t.initializers(new DynamicConfigInitializer())\n\t\t.run(args);\n}", "CodeBleu_score": 38.72125911651061}, {"code": "public static ConfigurableApplicationContext startApplication(String[] args){\n\t\treturn new SpringApplicationBuilder(KafkaUiApplication.class)\n\t\t\t.initializers(new DynamicConfigOperations())\n\t\t\t.run(args);\n}", "CodeBleu_score": 38.63590681702785}]}
{"instance_id": "3f022876f737", "generation_result": [{"code": "private Predicate<FullConnectorInfoDTO> matchesSearchTerm(@Nullable final String search){\n\t\tif (search == null) {\n\t\treturn c -> true;\n\t} else {\n\t\tfinal String searchTerm = search.toLowerCase();\n\t\treturn c -> c.name.toLowerCase().contains(searchTerm) ||\n\t\t\t\tc.config.keySet().stream().anyMatch(k -> c.config.get(k).toLowerCase().contains(searchTerm));\n\t}\n}", "CodeBleu_score": 45.0971937481843}, {"code": "private Predicate<FullConnectorInfoDTO> matchesSearchTerm(@Nullable final String search){\n\t\treturn (connector) -> search == null || matchesSearchTerm(search, connector);\n}", "CodeBleu_score": 31.53536783229891}, {"code": "private Predicate<FullConnectorInfoDTO> matchesSearchTerm(@Nullable final String search){\n\t\tif (search == null) {\n\t\treturn connector -> true;\n\t} else {\n\t\tfinal String searchTerm = search.toLowerCase();\n\t\treturn connector -> {\n\t\t\tfinal String name = connector.getName().toLowerCase();\n\t\t\tfinal String type = connector.getType().toLowerCase();\n\t\t\tfinal String state = connector.getState().toLowerCase();\n\t\t\tfinal String config = connector.getConfig().toLowerCase();\n\t\t\treturn name.contains(searchTerm) || type.contains(searchTerm) || state.contains(searchTerm) || config.contains(searchTerm);\n\t\t};\n\t}\n}", "CodeBleu_score": 38.091228496092164}]}
{"instance_id": "9754aa1ec96c", "generation_result": [{"code": "  private Map<String, Object> flattenClusterProperties(@Nullable String prefix,\n                                                       @Nullable Map<String, Object> propertiesMap){\n\tMap<String, Object> flattenedMap = new HashMap<>();\nif (propertiesMap == null) {\nreturn flattenedMap;\n}\nfor (Map.Entry<String, Object> entry : propertiesMap.entrySet()) {\nString newPrefix = prefix == null ? entry.getKey() : prefix + \".\" + entry.getKey();\nif (entry.getValue() instanceof Map) {\nflattenedMap.putAll(flattenClusterProperties(newPrefix, (Map<String, Object>) entry.getValue()));\n} else {\nflattenedMap.put(newPrefix, entry.getValue());\n}\n}\nreturn flattenedMap;\n}", "CodeBleu_score": 46.27715371261662}, {"code": "  private Map<String, Object> flattenClusterProperties(@Nullable String prefix,\n                                                       @Nullable Map<String, Object> propertiesMap){\n\tMap<String, Object> result = new HashMap<>();\nif (propertiesMap == null) {\nreturn result;\n}\nfor (Map.Entry<String, Object> entry : propertiesMap.entrySet()) {\nString key = entry.getKey();\nObject value = entry.getValue();\nString newKey = prefix == null ? key : prefix + \".\" + key;\nif (value instanceof Map) {\nresult.putAll(flattenClusterProperties(newKey, (Map<String, Object>) value));\n} else {\nresult.put(newKey, value);\n}\n}\nreturn result;\n}", "CodeBleu_score": 54.54813269640121}, {"code": "  private Map<String, Object> flattenClusterProperties(@Nullable String prefix,\n                                                       @Nullable Map<String, Object> propertiesMap){\n\tMap<String, Object> result = new HashMap<>();\nif (propertiesMap == null) {\nreturn result;\n}\n\nfor (Map.Entry<String, Object> entry : propertiesMap.entrySet()) {\nString key = entry.getKey();\nObject value = entry.getValue();\nString newKey = prefix == null ? key : prefix + \".\" + key;\nif (value instanceof Map) {\nresult.putAll(flattenClusterProperties(newKey, (Map<String, Object>) value));\n} else {\nresult.put(newKey, value);\n}\n}\n\nreturn result;\n}", "CodeBleu_score": 54.54813269640121}]}
{"instance_id": "99266677c846", "generation_result": [{"code": " private static Set<String> kafkaConfigKeysToSanitize(){\n\t numpy.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0", "CodeBleu_score": 3.1524642208061415}, {"code": " private static Set<String> kafkaConfigKeysToSanitize(){\n\t numpy.core.multiarray", "CodeBleu_score": 3.0925431417779277}, {"code": " private static Set<String> kafkaConfigKeysToSanitize(){\n\t sysout(\"kafkaConfigKeysToSanitize() called\");\n    ConfigDef configDef = new ConfigDef();\n    configDef.define(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG, ConfigDef.Type.STRING, ConfigDef.NO_DEFAULT_VALUE, ConfigDef.Importance.HIGH, SslConfigs.SSL_KEYSTORE_LOCATION_DOC, \"SSL\", 1, ConfigDef.Width.LONG, \"SSL Configuration\");\n    configDef.define(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, ConfigDef.NO_DEFAULT_VALUE, ConfigDef.Importance.HIGH, SslConfigs.SSL_KEYSTORE_PASSWORD_DOC, \"SSL\", 2, ConfigDef.Width.LONG, \"SSL Configuration\");\n    configDef.define(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, ConfigDef.Type.STRING, ConfigDef.NO_DEFAULT_VALUE, ConfigDef.Importance.HIGH, SslConfigs.SSL_TRUSTSTORE_LOCATION_DOC, \"SSL\", 3, ConfigDef.Width.LONG, \"SSL Configuration\");\n    configDef.define(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, ConfigDef.NO_DEFAULT_VALUE, ConfigDef.Importance.HIGH, SslConfigs.SSL_TRUSTSTORE_PASSWORD_DOC, \"SSL\", 4, ConfigDef.Width.LONG, \"SSL Configuration\");\n    configDef.define(SslConfigs.SSL_KEY_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, ConfigDef.NO_DEFAULT_VALUE, ConfigDef.Importance.HIGH, SslConfigs.SSL_KEY_PASSWORD_DOC, \"SSL\", 5, ConfigDef.Width.LONG, \"SSL Configuration\");\n    configDef.define(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG, ConfigDef.Type.STRING, \"JKS\", ConfigDef.Importance.MEDIUM, SslConfigs.SSL_KEYSTORE_TYPE_DOC, \"SSL\", 6, ConfigDef.Width.LONG, \"SSL Configuration\");\n    configDef.define(SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG, ConfigDef.Type.STRING, \"JKS\", ConfigDef.Importance.MEDIUM, SslConfigs.SSL_TRUSTSTORE_TYPE_DOC, \"SSL\", 7, ConfigDef.", "CodeBleu_score": 42.935504970031225}]}
{"instance_id": "deebb6fcb0a8", "generation_result": [{"code": "private Mono<ClusterFeature> aclEdit(ReactiveAdminClient adminClient, ClusterDescription clusterDescription){\n\t\treturn adminClient.describeAcls(clusterDescription)\n\t\t\t.map(aclDescription -> {\n\t\t\t\tSet<AclOperation> authorizedOperations = aclDescription.authorizedOperations();\n\t\t\t\tboolean aclViewEnabled = aclDescription.isAclAuthorizationEnabled();\n\t\t\t\tboolean canViewAllAcls = authorizedOperations.contains(AclOperation.DESCRIBE) || authorizedOperations.contains(AclOperation.DESCRIBE_CONFIGS);\n\t\t\t\tboolean canAlterAcls = authorizedOperations.contains(AclOperation.ALTER) || authorizedOperations.contains(AclOperation.ALTER_CONFIGS);\n\t\t\t\tboolean canDeleteAcls = authorizedOperations.contains(AclOperation.DELETE);\n\t\t\t\tboolean canDescribeAcls = authorizedOperations.contains(AclOperation.DESCRIBE);\n\t\t\t\tboolean canReadAcls = authorizedOperations.contains(AclOperation.READ);\n\t\t\t\tboolean canWriteAcls = authorizedOperations.contains(AclOperation.WRITE);\n\t\t\t\tboolean canCreateAcls = authorizedOperations.contains(AclOperation.CREATE);\n\n\t\t\t\tif (aclViewEnabled && canViewAllAcls && canAlterAcls && canDeleteAcls && canDescribeAcls && canReadAcls && canWriteAcls && canCreateAcls) {\n\t\t\t\t\treturn ClusterFeature.KAFKA_ACL_EDIT;\n\t\t\t\t} else {\n\t\t\t\t\treturn ClusterFeature.NONE;\n\t\t\t\t}\n\t\t\t});\n}", "CodeBleu_score": 36.85305277879694}, {"code": "private Mono<ClusterFeature> aclEdit(ReactiveAdminClient adminClient, ClusterDescription clusterDescription){\n\t\treturn getAclOperations(clusterDescription)\n\t\t.filter(aclOperations -> aclOperations.containsAll(Set.of(AclOperation.ALTER, AclOperation.DESCRIBE)))\n\t\t.switchIfEmpty(Mono.error(new AccessDeniedException(\"User is not authorized to edit ACLs\")))\n\t\t.then(Mono.just(ClusterFeature.KAFKA_ACL_EDIT));\n}", "CodeBleu_score": 25.853756149339347}, {"code": "private Mono<ClusterFeature> aclEdit(ReactiveAdminClient adminClient, ClusterDescription clusterDescription){\n\t\treturn adminClient.describeAcls(clusterDescription)\n\t\t\t.map(acls -> {\n\t\t\t\tList<AclOperation> authorizedOperations = new ArrayList<>(acls.authorizedOperations());\n\t\t\t\tif (authorizedOperations.containsAll(Set.of(AclOperation.ALL, AclOperation.ALTER))) {\n\t\t\t\t\treturn ClusterFeature.KAFKA_ACL_EDIT;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.filter(Predicate.isEqual(ClusterFeature.KAFKA_ACL_EDIT))\n\t\t\t.switchIfEmpty(Mono.empty());\n}", "CodeBleu_score": 34.50538196478332}]}
{"instance_id": "a5d8cc77955f", "generation_result": [{"code": "protected TreeMap<TopicPartition, FromToOffset> nextPollingRange(TreeMap<TopicPartition, FromToOffset> prevRange,\n                                                                   SeekOperations seekOperations){\n\t\tTreeMap<TopicPartition, Long> offsetsToReadFrom = new TreeMap<>();\n\tfor (Map.Entry<TopicPartition, FromToOffset> entry : seekOperations.entrySet()) {\n\t\tTopicPartition tp = entry.getKey();\n\t\tFromToOffset fromToOffset = entry.getValue();\n\t\tif (fromToOffset.getFrom() == null) {\n\t\t\tif (prevRange.containsKey(tp)) {\n\t\t\t\tFromToOffset prev = prevRange.get(tp);\n\t\t\t\tif (prev.getTo() == null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\toffsetsToReadFrom.put(tp, prev.getTo());\n\t\t\t}\n\t\t} else {\n\t\t\toffsetsToReadFrom.put(tp, fromToOffset.getFrom());\n\t\t}\n\t}\n\tlong messagesToPoll = getMessagesToPoll();\n\tMap<TopicPartition, Long> result = offsetsToReadFrom.entrySet().stream()\n\t\t.map(tp -> new AbstractMap.SimpleEntry<>(tp.getKey(), Math.max(0, tp.getValue() - messagesToPoll)))\n\t\t.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n\treturn new TreeMap<>(result);\n}", "CodeBleu_score": 34.038194434829975}, {"code": "protected TreeMap<TopicPartition, FromToOffset> nextPollingRange(TreeMap<TopicPartition, FromToOffset> prevRange,\n                                                                   SeekOperations seekOperations){\n\t\tTreeMap<TopicPartition, FromToOffset> nextRange = new TreeMap<>();\n\tif (prevRange == null) {\n\t\tprevRange = new TreeMap<>();\n\t}\n\tfor (Map.Entry<TopicPartition, Long> entry : seekOperations.getSeekTo().entrySet()) {\n\t\tTopicPartition topicPartition = entry.getKey();\n\t\tlong seekTo = entry.getValue();\n\t\tif (seekTo < 0) {\n\t\t\tthrow new IllegalArgumentException(\"Seek to offset cannot be negative\");\n\t\t}\n\t\tFromToOffset fromToOffset = prevRange.get(topicPartition);\n\t\tif (fromToOffset == null) {\n\t\t\tfromToOffset = new FromToOffset(seekTo, seekTo);\n\t\t} else {\n\t\t\tfromToOffset = new FromToOffset(seekTo, fromToOffset.getTo());\n\t\t}\n\t\tnextRange.put(topicPartition, fromToOffset);\n\t}\n\tfor (Map.Entry<TopicPartition, Long> entry : seekOperations.getSeekToBeginning().entrySet()) {\n\t\tTopicPartition topicPartition = entry.getKey();\n\t\tlong seekToBeginning = entry.getValue();\n\t\tif (seekToBeginning < 0) {\n\t\t\tthrow new IllegalArgumentException(\"Seek to beginning offset cannot be negative\");\n\t\t}\n\t\tFromToOffset fromToOffset = prevRange.get(topicPartition);\n\t\tif (fromToOffset == null) {\n\t\t\tfromToOffset = new FromToOffset(seekToBeginning, seekToBeginning);\n\t\t} else {\n\t\t\tfromToOffset = new FromToOffset(seekToBeginning, fromToOffset.getTo());\n\t\t}\n\t\tnextRange.put(topicPartition, fromToOffset);\n\t}\n\tfor (Map.Entry<TopicPartition, Long> entry : seekOperations.getSeekToEnd().entrySet()) {\n\t\tTopicPartition topicPartition = entry.getKey();\n\t\tlong seekToEnd = entry.getValue();\n\t\tif (seekToEnd < 0) {\n\t\t\tthrow new IllegalArgumentException(\"Seek to end offset cannot be negative\");\n\t\t}\n\t\tFromToOffset fromToOffset = prevRange.get(topicPartition);\n\t\tif (fromToOffset == null) {\n\t\t\tfromToOffset = new FromToOffset(seekToEnd, seekToEnd);\n\t\t} else {\n\t\t\tfromToOffset = new FromToOffset(fromToOffset.get", "CodeBleu_score": 28.76203471643323}, {"code": "protected TreeMap<TopicPartition, FromToOffset> nextPollingRange(TreeMap<TopicPartition, FromToOffset> prevRange,\n                                                                   SeekOperations seekOperations){\n\t\tTreeMap<TopicPartition, FromToOffset> nextRange = new TreeMap<>();\n\tMap<TopicPartition, Long> seekOffsets = seekOperations.getSeekOffsets();\n\tfor (Map.Entry<TopicPartition, Long> entry : seekOffsets.entrySet()) {\n\t\tTopicPartition tp = entry.getKey();\n\t\tLong seekOffset = entry.getValue();\n\t\tFromToOffset fromToOffset = prevRange.getOrDefault(tp, new FromToOffset());\n\t\tnextRange.put(tp, new FromToOffset(seekOffset, seekOffset + 1));\n\t}\n\treturn nextRange;\n}", "CodeBleu_score": 22.935892908025757}]}
{"instance_id": "c4c657caeba5", "generation_result": [{"code": "public void doLaunch(final MessageInput input){\n\t\tfinal Configuration configuration = input.getConfiguration();\n\tfinal String mode = configuration.getString(KafkaTransport.MODE);\n\tif (KafkaTransport.LEGACY_MODE.equals(mode)) {\n\t\tif (configuration.getString(KafkaTransport.ZOOKEEPER_CONNECT) == null) {\n\t\t\tthrow new ConfigurationException(\"Zookeeper connect must be set when using legacy mode.\");\n\t\t}\n\t\tif (configuration.getString(KafkaTransport.TOPIC_FILTER) == null) {\n\t\t\tthrow new ConfigurationException(\"Topic filter must be set when using legacy mode.\");\n\t\t}\n\t\tif (configuration.getString(KafkaTransport.GROUP_ID) == null) {\n\t\t\tthrow new ConfigurationException(\"Group id must be set when using legacy mode.\");\n\t\t}\n\t\tif (configuration.getString(KafkaTransport.ZOOKEEPER_SESSION_TIMEOUT) == null) {\n\t\t\tthrow new ConfigurationException(\"Zookeeper session timeout must be set when using legacy mode.\");\n\t\t}\n\t\tif (configuration.getString(KafkaTransport.ZOOKEEPER_CONNECTION_TIMEOUT) == null) {\n\t\t\tthrow new ConfigurationException(\"Zookeeper connection timeout must be set when using legacy mode.\");\n\t\t}\n\t\tif (configuration.getString(KafkaTransport.ZOOKEEPER_SYNC_TIME) == null) {\n\t\t\tthrow new ConfigurationException(\"Zookeeper sync time must be set when using legacy mode.\");\n\t\t}\n\t\tif (configuration.getString(KafkaTransport.ZOOKEEPER_SYNC_TIME) == null) {\n\t\t\tthrow new ConfigurationException(\"Zookeeper sync time must be set when using legacy mode.\");\n\t\t}\n\t\tif (configuration.getString(KafkaTransport.ZOOKEEPER_SYNC_TIME) == null) {\n\t\t\tthrow new ConfigurationException(\"Zookeeper sync time must be set when using legacy mode.\");\n\t\t}\n\t\tif (configuration.getString(KafkaTransport.ZOOKEEPER_SYNC_TIME) == null) {\n\t\t\tthrow new ConfigurationException(\"Zookeeper sync time must be set when using legacy mode.\");\n\t\t}\n\t\tif (configuration.getString(KafkaTransport.ZOOKEEPER_SYNC_TIME) == null) {\n\t\t\tthrow new ConfigurationException(\"Zookeeper sync time must be set when using legacy mode.\");\n\t\t}\n\t\tif (configuration.getString(KafkaTransport.ZOOKEEPER_SYNC_TIME", "CodeBleu_score": 26.472061994875638}, {"code": "public void doLaunch(final MessageInput input){\n\t\tif (legacyMode) {\n\t\tvalidateLegacyConfig();\n\t\tlaunchLegacyInput();\n\t} else {\n\t\tlaunchConsumerInput(input);\n\t}\n\n\tserverStatus.setHealthy();\n\tserverStatus.setReady(true);\n\n\tscheduledExecutor.scheduleAtFixedRate(new Runnable() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tlastSecondBytesRead.set(bytesRead.getAndSet(0));\n\t\t}\n\t}, 1, 1, TimeUnit.SECONDS);\n}", "CodeBleu_score": 16.15384743412772}, {"code": "public void doLaunch(final MessageInput input){\n\t\tif (legacyMode) {\n\t\tif (Strings.isNullOrEmpty(zkConnectString)) {\n\t\t\tthrow new ConfigurationException(\"ZooKeeper connect string must not be empty\");\n\t\t}\n\t\tif (Strings.isNullOrEmpty(zkSessionTimeout)) {\n\t\t\tthrow new ConfigurationException(\"ZooKeeper session timeout must not be empty\");\n\t\t}\n\t\tif (Strings.isNullOrEmpty(zkKafkaPath)) {\n\t\t\tthrow new ConfigurationException(\"ZooKeeper Kafka path must not be empty\");\n\t\t}\n\t\tif (Strings.isNullOrEmpty(zkKafkaConsumerGroup)) {\n\t\t\tthrow new ConfigurationException(\"ZooKeeper Kafka consumer group must not be empty\");\n\t\t}\n\t\tif (Strings.isNullOrEmpty(zkKafkaTopic)) {\n\t\t\tthrow new ConfigurationException(\"ZooKeeper Kafka topic must not be empty\");\n\t\t}\n\t\tif (Strings.isNullOrEmpty(zkKafkaResetPolicy)) {\n\t\t\tthrow new ConfigurationException(\"ZooKeeper Kafka reset policy must not be empty\");\n\t\t}\n\t\tif (Strings.isNullOrEmpty(zkKafkaAutoOffsetReset)) {\n\t\t\tthrow new ConfigurationException(\"ZooKeeper Kafka auto offset reset must not be empty\");\n\t\t}\n\t\tif (Strings.isNullOrEmpty(zkKafkaAutoCommitEnable)) {\n\t\t\tthrow new ConfigurationException(\"ZooKeeper Kafka auto commit enable must not be empty\");\n\t\t}\n\t\tif (Strings.isNullOrEmpty(zkKafkaAutoCommitIntervalMs)) {\n\t\t\tthrow new ConfigurationException(\"ZooKeeper Kafka auto commit interval ms must not be empty\");\n\t\t}\n\t\tif (Strings.isNullOrEmpty(zkKafkaFetchSize)) {\n\t\t\tthrow new ConfigurationException(\"ZooKeeper Kafka fetch size must not be empty\");\n\t\t}\n\t\tif (Strings.isNullOrEmpty(zkKafkaFetchBuffer)) {\n\t\t\tthrow new ConfigurationException(\"ZooKeeper Kafka fetch buffer must not be empty\");\n\t\t}\n\t\tif (Strings.isNullOrEmpty(zkKafkaFetchMaxWaitMs)) {\n\t\t\tthrow new ConfigurationException(\"ZooKeeper Kafka fetch max wait ms must not be empty\");\n\t\t}\n\t\tif (Strings.isNullOrEmpty(zkKafkaQueuedMaxMessageKbytes)) {\n\t\t\tthrow new ConfigurationException(\"ZooKeeper Kafka queued max message kbytes must not be empty\");\n\t\t}\n\t\tif (Strings.isNullOrEmpty(zkKafkaQueuedMinMessages)) {\n\t\t\tthrow new ConfigurationException(\"ZooKeeper Kafka", "CodeBleu_score": 19.983595854191666}]}
{"instance_id": "dffe85dbb47b", "generation_result": [{"code": "private void insertCustomProperties(Properties props){\n\t\tString customProperties = configuration.getString(CUSTOM_PROPERTIES);\n\tif (Strings.isNullOrEmpty(customProperties)) {\n\t\treturn;\n\t}\n\ttry {\n\t\tProperties customProps = new Properties();\n\t\tcustomProps.load(new ByteArrayInputStream(customProperties.getBytes(StandardCharsets.UTF_8)));\n\t\tcustomProps.stringPropertyNames().forEach(key -> {\n\t\t\tif (props.containsKey(key)) {\n\t\t\t\tLOG.warn(\"Property {} is already set. Ignoring custom property value {}\", key, customProps.getProperty(key));\n\t\t\t} else {\n\t\t\t\tprops.setProperty(key, customProps.getProperty(key));\n\t\t\t}\n\t\t});\n\t} catch (IOException e) {\n\t\tLOG.error(\"Failed to load custom properties\", e);\n\t}\n}", "CodeBleu_score": 46.74635351908652}, {"code": "private void insertCustomProperties(Properties props){\n\t\tString customProperties = configuration.getString(CUSTOM_PROPERTIES);\n\tif (Strings.isNullOrEmpty(customProperties)) {\n\t\treturn;\n\t}\n\n\ttry {\n\t\tProperties custom = new Properties();\n\t\tcustom.load(new ByteArrayInputStream(customProperties.getBytes(StandardCharsets.UTF_8)));\n\t\tprops.putAll(custom);\n\t} catch (IOException e) {\n\t\tLOGGER.error(\"Failed to load custom properties: {}\", e.getMessage());\n\t}\n}", "CodeBleu_score": 44.97908334917674}, {"code": "private void insertCustomProperties(Properties props){\n\t\ttry {\n\t\tString customPropsString = configuration.stringProperty(\"custom_properties\");\n\t\tif (Strings.isNullOrEmpty(customPropsString)) {\n\t\t\treturn;\n\t\t}\n\t\tProperties customProps = new Properties();\n\t\tcustomProps.load(new ByteArrayInputStream(customPropsString.getBytes(StandardCharsets.UTF_8)));\n\t\tcustomProps.stringPropertyNames().forEach(key -> props.setProperty(key, customProps.getProperty(key)));\n\t} catch (IOException e) {\n\t\tlogger.error(\"Error while loading custom properties\", e);\n\t}\n}", "CodeBleu_score": 46.02348997900073}]}
{"instance_id": "ea146a7bc30c", "generation_result": [{"code": "public void write(List<RawMessageEvent> entries) throws MessageQueueException{\n\tif (entries == null) {\nthrow new NullPointerException(\"entries\");\n}\n\nfinal List<RawMessageEvent> filteredEntries = entries.stream().filter(Objects::nonNull).collect(Collectors.toList());\n\nif (filteredEntries.isEmpty()) {\nreturn;\n}\n\nfinal long startNanos = System.nanoTime();\n\ntry {\nretryer.call(() -> {\njournal.write(filteredEntries);\nreturn null;\n});\n} catch (ExecutionException e) {\nif (e.getCause() instanceof MessageQueueException) {\nthrow (MessageQueueException) e.getCause();\n}\n\nthrow new MessageQueueException(\"Unexpected exception while writing to journal.\", e);\n} catch (RetryException e) {\nthrow new MessageQueueException(\"Failed to write to journal after \" + retryer.getAttemptCount() + \" attempts.\", e);\n}\n\nfinal long elapsedNanos = System.nanoTime() - startNanos;\n\nmetrics.updateWrite(filteredEntries.size(), elapsedNanos);\n}", "CodeBleu_score": 38.32862224571675}, {"code": "public void write(List<RawMessageEvent> entries) throws MessageQueueException{\n\t\tif (entries == null) {\n\t\treturn;\n\t}\n\tList<RawMessageEvent> filtered = entries.stream().filter(Objects::nonNull).collect(Collectors.toList());\n\tlong bytes = filtered.stream().mapToLong(RawMessageEvent::serializedMessageSize).sum();\n\tlong messages = filtered.size();\n\tlong start = System.nanoTime();\n\ttry {\n\t\tretryer.call(() -> journal.write(filtered));\n\t} catch (ExecutionException | RetryException e) {\n\t\tthrow new MessageQueueException(\"Failed to write to journal\", e);\n\t}\n\tlong duration = System.nanoTime() - start;\n\tmetrics.update(messages, bytes, duration);\n}", "CodeBleu_score": 36.85737950692909}, {"code": "public void write(List<RawMessageEvent> entries) throws MessageQueueException{\n\t\tif (entries == null) {\n\t\treturn;\n\t}\n\tfinal long startTime = System.nanoTime();\n\tfinal List<RawMessageEvent> filteredEntries = entries.stream().filter(Objects::nonNull).collect(Collectors.toList());\n\tfinal long messageBytes = filteredEntries.stream().mapToLong(RawMessageEvent::size).sum();\n\tfinal long messages = filteredEntries.size();\n\tfinal long startJournalWriteTime = System.nanoTime();\n\ttry {\n\t\tjournal.write(filteredEntries);\n\t} catch (JournalException e) {\n\t\tthrow new MessageQueueException(\"Failed to write messages to journal\", e);\n\t}\n\tfinal long journalWriteTime = System.nanoTime() - startJournalWriteTime;\n\tmetrics.updateWriteStats(messages, messageBytes, journalWriteTime, System.nanoTime() - startTime);\n}", "CodeBleu_score": 37.04222611646374}]}
{"instance_id": "944e77614042", "generation_result": [{"code": "public void acknowledge(List<Message> messages){\n\t\tif (messages == null || messages.isEmpty()) {\n\t\treturn;\n\t}\n\tlong maxValidMessageQueueId = messages.stream()\n\t\t.map(message -> message.getMessageQueueId())\n\t\t.filter(messageQueueId -> messageQueueId != null && messageQueueId >= 0)\n\t\t.max(Long::compare)\n\t\t.orElse(-1);\n\tif (maxValidMessageQueueId >= 0) {\n\t\tmessageQueue.ack(maxValidMessageQueueId);\n\t}\n\tmetrics.markAcked(messages.size());\n}", "CodeBleu_score": 41.748532810205006}, {"code": "public void acknowledge(List<Message> messages){\n\t\tlong maxValidMessageQueueId = -1;\n\tfor (Message message : messages) {\n\t\tlong messageQueueId = message.getMessageQueueId();\n\t\tif (messageQueueId > 0) {\n\t\t\tmaxValidMessageQueueId = Math.max(maxValidMessageQueueId, messageQueueId);\n\t\t}\n\t}\n\tif (maxValidMessageQueueId > 0) {\n\t\tacknowledger.ack(maxValidMessageQueueId);\n\t}\n\tmetrics.markMessagesAcknowledged(messages.size());\n}", "CodeBleu_score": 24.720554522842374}, {"code": "public void acknowledge(List<Message> messages){\n\t\tif (messages == null || messages.isEmpty()) {\n\t\treturn;\n\t}\n\tlong maxValidMessageQueueId = -1L;\n\tfor (Message message : messages) {\n\t\tlong messageQueueId = message.getMessageQueueId();\n\t\tif (messageQueueId > maxValidMessageQueueId && messageQueueId != -1L) {\n\t\t\tmaxValidMessageQueueId = messageQueueId;\n\t\t}\n\t}\n\tif (maxValidMessageQueueId != -1L) {\n\t\ttry (LocalKafkaJournal localKafkaJournal = new LocalKafkaJournal(configuration)) {\n\t\t\tMessageQueueAcknowledger acknowledger = new AbstractMessageQueueAcknowledger(localKafkaJournal) {\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isMessageQueueIdValid(long messageQueueId) {\n\t\t\t\t\treturn messageQueueId <= maxValidMessageQueueId;\n\t\t\t\t}\n\t\t\t};\n\t\t\tacknowledger.ack(maxValidMessageQueueId);\n\t\t}\n\t}\n\tmetrics.markMessagesAcknowledged(messages.size());\n}", "CodeBleu_score": 26.362624024273916}]}
{"instance_id": "981280879490", "generation_result": [{"code": "private void registerLegacyMetrics(){\n\t\tfinal Set<String> metricNames = metricRegistry.getNames();\n\tfinal Set<String> legacyMetricNames = new HashSet<>();\n\tfor (String metricName : metricNames) {\n\t\tif (metricName.startsWith(LocalKafkaJournal.class.getName())) {\n\t\t\tlegacyMetricNames.add(metricName);\n\t\t}\n\t}\n\tfor (String legacyMetricName : legacyMetricNames) {\n\t\ttry {\n\t\t\tmetricRegistry.register(legacyMetricName, metricRegistry.getMetrics().get(legacyMetricName));\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tLOGGER.warn(\"Could not register legacy metric {} under its original name {}.\", legacyMetricName, legacyMetricName.replace(LocalKafkaJournal.class.getName(), \"KafkaJournal\"));\n\t\t}\n\t}\n}", "CodeBleu_score": 30.79135208590894}, {"code": "private void registerLegacyMetrics(){\n\t\tfinal String prefix = LocalKafkaJournal.class.getName() + \".\";\n\tfinal MetricFilter filter = (name, metric) -> name.startsWith(prefix);\n\tfor (Map.Entry<String, Metric> entry : metricRegistry.getMetrics(filter).entrySet()) {\n\t\tString legacyName = entry.getKey().replace(prefix, \"kafka.journal.\");\n\t\ttry {\n\t\t\tmetricRegistry.register(legacyName, entry.getValue());\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tLOG.warn(\"Failed to register legacy metric \" + legacyName + \" under the new name \" + entry.getKey() + \": \" + e.getMessage());\n\t\t}\n\t}\n}", "CodeBleu_score": 42.174276253913305}, {"code": "private void registerLegacyMetrics(){\n\t\tfor (Map.Entry<String, Gauge> entry : metricRegistry.getGauges(new MetricFilter() {\n\t\t@Override\n\t\tpublic boolean matches(String name, Metric metric) {\n\t\t\treturn name.startsWith(\"org.graylog2.plugins.kafka.KafkaJournal\");\n\t\t}\n\t}).entrySet()) {\n\t\tString legacyMetricName = entry.getKey().replace(\"org.graylog2.plugins.kafka.KafkaJournal\", \"kafka\");\n\t\ttry {\n\t\t\tmetricRegistry.register(legacyMetricName, entry.getValue());\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tLOGGER.warn(\"Failed to register legacy metric {}: {}\", legacyMetricName, e.getMessage());\n\t\t}\n\t}\n}", "CodeBleu_score": 32.84830841838945}]}
{"instance_id": "3ca34bfd2d64", "generation_result": [{"code": "private Timer registerHdrTimer(MetricRegistry metricRegistry, final String metricName){\n\t\tTimer timer = metricRegistry.timer(metricName);\n\tif (timer == null) {\n\t\tfinal String[] metricNameParts = metricName.split(\"\\\\.\");\n\t\tfinal String metricNameSuffix = metricNameParts[metricNameParts.length - 1];\n\t\tfinal String metricNamePrefix = StringUtils.join(metricNameParts, \".\", 0, metricNameParts.length - 1);\n\t\tfinal Set<String> metricNames = metricRegistry.getNames();\n\t\tfor (String name : metricNames) {\n\t\t\tif (name.startsWith(metricNamePrefix) && name.endsWith(metricNameSuffix)) {\n\t\t\t\ttimer = metricRegistry.timer(name);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn timer;\n}", "CodeBleu_score": 33.188654190238665}, {"code": "private Timer registerHdrTimer(MetricRegistry metricRegistry, final String metricName){\n\t\ttry {\n\t\treturn metricRegistry.timer(metricName);\n\t} catch (IllegalArgumentException e) {\n\t\treturn metricRegistry.timer(metricRegistry.getNames().get(metricName));\n\t}\n}", "CodeBleu_score": 21.319544607929934}, {"code": "private Timer registerHdrTimer(MetricRegistry metricRegistry, final String metricName){\n\t\ttry {\n\t\treturn metricRegistry.timer(metricName);\n\t} catch (IllegalArgumentException e) {\n\t\treturn metricRegistry.timer(metricRegistry.getNames().stream().filter(new AbstractFunction1<String, Boolean>() {\n\t\t\t@Override\n\t\t\tpublic Boolean apply(String name) {\n\t\t\t\treturn name.equals(metricName);\n\t\t\t}\n\t\t}).findFirst().get());\n\t}\n}", "CodeBleu_score": 28.47572697862558}]}
{"instance_id": "e1d07a1fa986", "generation_result": [{"code": "private void registerUncommittedGauge(MetricRegistry metricRegistry, String name){\n\t\tmetricRegistry.register(name, (Gauge<Integer>) () -> {\n\t\ttry {\n\t\t\treturn uncommittedMessages();\n\t\t} catch (IllegalArgumentException e) {\n\t\t\treturn 0;\n\t\t}\n\t});\n}", "CodeBleu_score": 22.58209416351577}, {"code": "private void registerUncommittedGauge(MetricRegistry metricRegistry, String name){\n\t\ttry {\n\t\tmetricRegistry.register(name, (Gauge<Integer>) () -> {\n\t\t\tfinal long committedOffset = log.highwaterMarkOffset().offset();\n\t\t\tfinal long logStartOffset = log.logStartOffset();\n\t\t\tfinal long logEndOffset = log.logEndOffset();\n\t\t\tfinal int uncommittedMessages;\n\t\t\tif (committedOffset == Log.NoOffset$.MODULE$) {\n\t\t\t\tuncommittedMessages = (int) (logEndOffset - logStartOffset);\n\t\t\t} else {\n\t\t\t\tuncommittedMessages = (int) (logEndOffset - committedOffset);\n\t\t\t}\n\t\t\treturn uncommittedMessages < 0 ? 0 : uncommittedMessages;\n\t\t});\n\t} catch (IllegalArgumentException e) {\n\t\tLOGGER.warn(\"Failed to register uncommitted gauge for log {}.\", name, e);\n\t}\n}", "CodeBleu_score": 37.46329903819166}, {"code": "private void registerUncommittedGauge(MetricRegistry metricRegistry, String name){\n\t\ttry {\n\t\tmetricRegistry.register(name, (Gauge<Integer>) () -> {\n\t\t\tlong committedOffset = log.committedOffset();\n\t\t\tlong logStartOffset = log.logStartOffset();\n\t\t\tlong logEndOffset = log.logEndOffset();\n\t\t\tif (committedOffset == log.defaultOffset()) {\n\t\t\t\treturn Ints.saturatedCast(logEndOffset - logStartOffset);\n\t\t\t} else {\n\t\t\t\treturn Ints.saturatedCast(logEndOffset - committedOffset);\n\t\t\t}\n\t\t});\n\t} catch (IllegalArgumentException e) {\n\t\tLOGGER.error(\"Unable to register gauge {}. Reason: {}\", name, e.getMessage());\n\t}\n}", "CodeBleu_score": 39.71970570224765}]}
{"instance_id": "8b30a387069f", "generation_result": [{"code": "private long flushMessages(List<Message> messages, long payloadSize){\n\t\tif (messages.isEmpty()) {\n\t\tLOG.debug(\"No messages to flush.\");\n\t\treturn lastFlushedOffset.get();\n\t}\n\n\tLOG.debug(\"Flushing {} messages with total payload size {} bytes.\", messages.size(), payloadSize);\n\n\tfinal ByteBufferMessageSet messageSet = new ByteBufferMessageSet(payloadSize, messages);\n\tfinal LogAppendInfo appendInfo = log.append(messageSet);\n\tfinal long lastOffset = appendInfo.lastOffset().get();\n\n\tLOG.debug(\"Flushed messages to log {} with {} bytes from offset {} to offset {}.\", log, payloadSize,\n\t\t\tappendInfo.firstOffset().get(), lastOffset);\n\n\tmessages.clear();\n\tmessageSet.buffer().clear();\n\tlastFlushedOffset.set(lastOffset);\n\n\treturn lastOffset;\n}", "CodeBleu_score": 47.9042693608394}, {"code": "private long flushMessages(List<Message> messages, long payloadSize){\n\t\tif (messages.isEmpty()) {\n\t\tLOG.debug(\"No messages to flush\");\n\t\treturn 0;\n\t}\n\tLOG.debug(\"Flushing {} messages with total payload size {} bytes\", messages.size(), payloadSize);\n\tByteBufferMessageSet messageSet = new ByteBufferMessageSet(payloadSize, messages);\n\tlong start = System.nanoTime();\n\tLogAppendInfo appendInfo = log.append(messageSet, recoveryPoint);\n\tlong duration = System.nanoTime() - start;\n\tLOG.debug(\"Flushing {} messages took {} ms\", messages.size(), duration / 1000000);\n\tLOG.debug(\"Wrote {} bytes to log {} at offset {}\", appendInfo.size(), log, appendInfo.lastOffset());\n\tmetrics.markMeter(LOG_WRITES_METER, messages.size());\n\tmetrics.markTimer(LOG_WRITE_TIME_TIMER, duration, NANOSECONDS);\n\tmetrics.updateHistogram(LOG_WRITE_SIZE_HISTOGRAM, payloadSize);\n\treturn appendInfo.lastOffset();\n}", "CodeBleu_score": 49.38373304201329}, {"code": "private long flushMessages(List<Message> messages, long payloadSize){\n\t\tif (messages.isEmpty()) {\n\t\tlogger.debug(\"No messages to flush.\");\n\t\treturn 0L;\n\t}\n\tlogger.debug(\"Flushing {} messages with payload size {} bytes.\", messages.size(), payloadSize);\n\tfinal MessageSet messageSet = new ByteBufferMessageSet(payloadSize, messages);\n\tfinal LogAppendInfo appendInfo = log.append(messageSet, leaderEpoch);\n\tlogger.debug(\"Append operation on partition {} returned offset {}.\", partition, appendInfo.offset());\n\treturn appendInfo.offset();\n}", "CodeBleu_score": 35.70514126426121}]}
{"instance_id": "ee338b61e75d", "generation_result": [{"code": "private void closeKafkaAdminClient(Long clusterPhyId) {\n\t//    synchronized (clientMap) {\n        List<AdminClient> clients = clientMap.get(clusterPhyId);\n        if (clients == null) {\n            return;\n        }\n        LOG.info(\"Closing {} Kafka AdminClient instances for cluster ID {}\", clients.size(), clusterPhyId);\n        for (AdminClient client : clients) {\n            try {\n                client.close(Duration.ofSeconds(5));\n            } catch (Exception e) {\n                LOG.error(\"Error closing Kafka AdminClient instance for cluster ID {}: {}\", clusterPhyId, e.getMessage(), e);\n            }\n        }\n//        clientMap.remove(clusterPhyId);\n//    }\n}", "CodeBleu_score": 33.567091487788744}, {"code": "private void closeKafkaAdminClient(Long clusterPhyId) {\n\t//    synchronized (kafkaAdminClientMap) {\n        List<AdminClient> clients = kafkaAdminClientMap.get(clusterPhyId);\n        if (clients == null) {\n            return;\n        }\n        ILog logger = LogFactory.getLogger(CloseKafkaAdminClientThread.class);\n        logger.info(\"Closing \" + clients.size() + \" Kafka AdminClient instances for cluster \" + clusterPhyId);\n        for (AdminClient client : clients) {\n            try {\n                client.close(Duration.ofSeconds(5));\n            } catch (Exception e) {\n                logger.error(\"Error closing Kafka AdminClient for cluster \" + clusterPhyId, e);\n            }\n        }\n        logger.info(\"Closed \" + clients.size() + \" Kafka AdminClient instances for cluster \" + clusterPhyId);\n//        clients.clear();\n//        kafkaAdminClientMap.remove(clusterPhyId);\n//    }\n}", "CodeBleu_score": 45.20796002829653}, {"code": "private void closeKafkaAdminClient(Long clusterPhyId) {\n\t\ttry {\n\t\tLOGGER.info(\"Start closing kafka admin client for cluster phy id: {}\", clusterPhyId);\n\t\tList<AdminClient> clients = new ArrayList<>();\n\t\tsynchronized (kafkaAdminClientMap) {\n\t\t\tif (kafkaAdminClientMap.containsKey(clusterPhyId)) {\n\t\t\t\tclients = kafkaAdminClientMap.get(clusterPhyId);\n\t\t\t\tkafkaAdminClientMap.remove(clusterPhyId);\n\t\t\t}\n\t\t}\n\t\tif (clients.size() == 0) {\n\t\t\tLOGGER.info(\"No kafka admin client found for cluster phy id: {}\", clusterPhyId);\n\t\t\treturn;\n\t\t}\n\t\tfor (AdminClient client : clients) {\n\t\t\ttry {\n\t\t\t\tclient.close(Duration.ofSeconds(10));\n\t\t\t\tLOGGER.info(\"Kafka admin client closed for cluster phy id: {}\", clusterPhyId);\n\t\t\t} catch (Exception e) {\n\t\t\t\tLOGGER.error(\"Kafka admin client close failed for cluster phy id: {}\", clusterPhyId, e);\n\t\t\t}\n\t\t}\n\t\tLOGGER.info(\"Kafka admin client closed for cluster phy id: {}\", clusterPhyId);\n\t} finally {\n\t\tsynchronized (kafkaAdminClientMap) {\n\t\t\tkafkaAdminClientMap.notifyAll();\n\t\t}\n\t}\n}", "CodeBleu_score": 47.80284379423962}]}
{"instance_id": "6f0b935b971c", "generation_result": [{"code": "private boolean closeAdminClientList(Long clusterPhyId, List<AdminClient> adminClientList){\n\t\tif (adminClientList == null) {\n\t\treturn true;\n\t}\n\tboolean success = true;\n\tfor (AdminClient adminClient : adminClientList) {\n\t\ttry {\n\t\t\tadminClient.close(Duration.ofSeconds(30));\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"close kafka admin client error, clusterId:{}\", clusterPhyId, e);\n\t\t\tsuccess = false;\n\t\t}\n\t}\n\treturn success;\n}", "CodeBleu_score": 78.37003586430743}, {"code": "private boolean closeAdminClientList(Long clusterPhyId, List<AdminClient> adminClientList){\n\t\tif (adminClientList == null) {\n\t\treturn true;\n\t}\n\n\tboolean success = true;\n\tfor (AdminClient adminClient : adminClientList) {\n\t\ttry {\n\t\t\tadminClient.close(Duration.ofSeconds(30));\n\t\t} catch (Exception e) {\n\t\t\tILog log = LogFactory.getLogger(AbstractClusterLoadedChangedHandler.class);\n\t\t\tlog.error(\"close adminClient error, clusterId:{}, clusterPhyId:{}, adminClient:{}\", clusterId, clusterPhyId, adminClient, e);\n\t\t\tsuccess = false;\n\t\t}\n\t}\n\treturn success;\n}", "CodeBleu_score": 66.13759398362023}, {"code": "private boolean closeAdminClientList(Long clusterPhyId, List<AdminClient> adminClientList){\n\t\tif (adminClientList == null) {\n\t\treturn true;\n\t}\n\n\tboolean success = true;\n\tfor (AdminClient adminClient : adminClientList) {\n\t\ttry {\n\t\t\tadminClient.close(Duration.ofSeconds(30));\n\t\t} catch (Exception e) {\n\t\t\tsuccess = false;\n\t\t\tLOGGER.error(\"close admin client error, clusterId:{}, adminClient:{}\", clusterPhyId, adminClient.toString(), e);\n\t\t}\n\t}\n\treturn success;\n}", "CodeBleu_score": 64.61902827216521}]}
{"instance_id": "b5475aa94c1a", "generation_result": [{"code": "public void stop() {\n\t\tif (app != null)  {\n\t\ttry  {\n\t\t\tapp.stop();\n\t\t}\n\t\tcatch (Exception e)  {\n\t\t\tthrow new IllegalStateException(e);\n\t\t}\n\t\tint i = 0;\n\t\twhile (app.isRunning() && i < 5)  {\n\t\t\ttry  {\n\t\t\t\tThread.sleep(1000);\n\t\t\t}\n\t\t\tcatch (InterruptedException e)  {\n\t\t\t\tthrow new IllegalStateException(e);\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tif (app.isRunning())  {\n\t\t\tthrow new IllegalStateException(\"Application failed to stop\");\n\t\t}\n\t\tapp = null;\n\t}\n}", "CodeBleu_score": 56.98183000027498}, {"code": "public void stop() {\n\t\tif (app != null)  {\n\t\ttry  {\n\t\t\tapp.stop();\n\t\t}\n\t\tcatch (Exception e)  {\n\t\t\tthrow new IllegalStateException(\"Failed to stop the application\", e);\n\t\t}\n\t\tint count = 0;\n\t\twhile (app.isRunning() && count < 5)  {\n\t\t\ttry  {\n\t\t\t\tThread.sleep(1000);\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tcatch (InterruptedException e)  {\n\t\t\t\tthrow new IllegalStateException(\"Failed to stop the application\", e);\n\t\t\t}\n\t\t}\n\t\tif (app.isRunning())  {\n\t\t\tthrow new IllegalStateException(\"Failed to stop the application\");\n\t\t}\n\t\tapp = null;\n\t}\n}", "CodeBleu_score": 44.05554571515292}, {"code": "public void stop() {\n\t\tif (this.app != null)  {\n\t\ttry  {\n\t\t\tthis.app.stop();\n\t\t}\n\t\tcatch (Exception e)  {\n\t\t\tthrow new IllegalStateException(e);\n\t\t}\n\t\tint i = 0;\n\t\twhile (this.app.isRunning() && i < 5)  {\n\t\t\ttry  {\n\t\t\t\tThread.sleep(1000);\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tcatch (InterruptedException e)  {\n\t\t\t\tthrow new IllegalStateException(e);\n\t\t\t}\n\t\t}\n\t\tif (this.app.isRunning())  {\n\t\t\tthrow new IllegalStateException(\"Application did not stop\");\n\t\t}\n\t\tthis.app = null;\n\t}\n}", "CodeBleu_score": 40.360989415878336}]}
{"instance_id": "5da405de9e3d", "generation_result": [{"code": "static EurekaServerRunner startEurekaServer(Class config){\n\t\tEurekaServerRunner runner = new EurekaServerRunner(config);\n\trunner.enableTLS(getKeystore(), getTruststore(), \"test\");\n\trunner.start();\n\treturn runner;\n}", "CodeBleu_score": 35.50576949599457}, {"code": "static EurekaServerRunner startEurekaServer(Class config){\n\t\tEurekaServerRunner runner = new EurekaServerRunner(config);\n\trunner.enableTls(true);\n\trunner.setKeystore(\"src/test/resources/testkeystore.jks\", \"testkey\", \"testkey\");\n\trunner.setTruststore(\"src/test/resources/testkeystore.jks\", \"testkey\", \"testkey\");\n\trunner.start();\n\treturn runner;\n}", "CodeBleu_score": 36.80735592296452}, {"code": "static EurekaServerRunner startEurekaServer(Class config){\n\t\tEurekaServerRunner eurekaServerRunner = new EurekaServerRunner(config);\n\teurekaServerRunner.enableTls(true);\n\teurekaServerRunner.setKeystore(\"src/test/resources/testkeystore.jks\", \"test1234\");\n\teurekaServerRunner.setTruststore(\"src/test/resources/testtruststore.jks\", \"test1234\");\n\teurekaServerRunner.start();\n\treturn eurekaServerRunner;\n}", "CodeBleu_score": 36.321305179809386}]}
{"instance_id": "19cbf70751b2", "generation_result": [{"code": "static EurekaClientRunner startService(EurekaServerRunner server, Class config){\n\t\tEurekaClientRunner runner = new EurekaClientRunner(config, server, \"testservice\");\n\trunner.enableTls(true);\n\trunner.start();\n\treturn runner;\n}", "CodeBleu_score": 61.94251929284729}, {"code": "static EurekaClientRunner startService(EurekaServerRunner server, Class config){\n\t\treturn startService(server, config, \"testservice\");\n}", "CodeBleu_score": 20.70353119577279}, {"code": "static EurekaClientRunner startService(EurekaServerRunner server, Class config){\n\t\tEurekaClientRunner runner = new EurekaClientRunner(server, \"testservice\", config);\n\trunner.enableTls(true);\n\trunner.start();\n\treturn runner;\n}", "CodeBleu_score": 49.6109597698339}]}
{"instance_id": "d6ccff5c0536", "generation_result": [{"code": "static void createCertificates() throws Exception{\n\t\tString keystorePassword = \"<PASSWORD>\";\n\tString caPassword = \"<PASSWORD>\";\n\tString keyPassword = \"<PASSWORD>\";\n\tString caAlias = \"ca\";\n\tString serverAlias = \"server\";\n\tString clientAlias = \"client\";\n\tString secondCaAlias = \"secondCa\";\n\tString secondClientAlias = \"secondClient\";\n\tString keystoreFileName = \"keystore.jks\";\n\tString caCertFileName = \"ca.crt\";\n\tString serverCertFileName = \"server.crt\";\n\tString clientCertFileName = \"client.crt\";\n\tString secondCaCertFileName = \"secondCa.crt\";\n\tString secondClientCertFileName = \"secondClient.crt\";\n\tString keystorePath = \"src/test/resources/\" + keystoreFileName;\n\tString caCertPath = \"src/test/resources/\" + caCertFileName;\n\tString serverCertPath = \"src/test/resources/\" + serverCertFileName;\n\tString clientCertPath = \"src/test/resources/\" + clientCertFileName;\n\tString secondCaCertPath = \"src/test/resources/\" + secondCaCertFileName;\n\tString secondClientCertPath = \"src/test/resources/\" + secondClientCertFileName;\n\tString keystorePath2 = \"src/test/resources/\" + keystoreFileName + \"2\";\n\tString secondCaCertPath2 = \"src/test/resources/\" + secondCaCertFileName + \"2\";\n\tString secondClientCertPath2 = \"src/test/resources/\" + secondClientCertFileName + \"2\";\n\tString keystorePath3 = \"src/test/resources/\" + keystoreFileName + \"3\";\n\tString secondClientCertPath3 = \"src/test/resources/\" + secondClientCertFileName + \"3\";\n\tString keystorePath4 = \"src/test/resources/\" + keystoreFileName + \"4\";\n\tString secondClientCertPath4 = \"src/test/resources/\" + secondClientCertFileName + \"4\";\n\tString keystorePath5 = \"src/test/resources/\" + keystoreFileName + \"5\";\n\tString secondClientCertPath5 = \"src/test/resources/\" + secondClientCertFileName + \"5\";\n\tString keystorePath6 = \"src/test/resources/\" + keystoreFileName + \"6\";\n\tString secondClientCertPath6 = \"src/test/resources", "CodeBleu_score": 14.781943668931447}, {"code": "static void createCertificates() throws Exception{\n\t\t// Create a CA key and certificate\n\tKeyTool.createKeyPair(caKey, caCert);\n\t// Create a CA certificate\n\tKeyTool.createCertificate(caCert, caCert, caKey, \"CA\", \"SHA256withRSA\", 365);\n\t// Create a server key and certificate\n\tKeyTool.createKeyPair(serverKey, serverCert);\n\t// Create a server certificate\n\tKeyTool.createCertificate(serverCert, caCert, caKey, \"server\", \"SHA256withRSA\", 365);\n\t// Create a client key and certificate\n\tKeyTool.createKeyPair(clientKey, clientCert);\n\t// Create a client certificate\n\tKeyTool.createCertificate(clientCert, caCert, caKey, \"client\", \"SHA256withRSA\", 365);\n\t// Create a second CA key and certificate\n\tKeyTool.createKeyPair(ca2Key, ca2Cert);\n\t// Create a second CA certificate\n\tKeyTool.createCertificate(ca2Cert, ca2Cert, ca2Key, \"CA\", \"SHA256withRSA\", 365);\n\t// Create a second client key and certificate\n\tKeyTool.createKeyPair(client2Key, client2Cert);\n\t// Create a second client certificate\n\tKeyTool.createCertificate(client2Cert, ca2Cert, ca2Key, \"client\", \"SHA256withRSA\", 365);\n\t// Save the certificates and keys\n\tsaveCert(caCert, \"ca.crt\");\n\tsaveCert(ca2Cert, \"ca2.crt\");\n\tsaveCert(serverCert, \"server.crt\");\n\tsaveCert(clientCert, \"client.crt\");\n\tsaveCert(client2Cert, \"client2.crt\");\n\tsaveKeyAndCert(caKey, caCert, \"ca\");\n\tsaveKeyAndCert(ca2Key, ca2Cert, \"ca2\");\n\tsaveKeyAndCert(serverKey, serverCert, \"server\");\n\tsaveKeyAndCert(clientKey, clientCert, \"client\");\n\tsaveKeyAndCert(client2Key, client2Cert, \"client2\");\n}", "CodeBleu_score": 18.2599740457294}, {"code": "static void createCertificates() throws Exception{\n\t\t// Create a CA certificate and key pair\n\tKeyTool.createCA(\"ca\", \"ca-password\", \"ca-alias\", \"ca-keystore\", \"ca-keystore-password\");\n\t// Create a server certificate and key pair signed by the CA\n\tKeyTool.createSignedCertificate(\"server\", \"server-password\", \"server-alias\", \"server-keystore\", \"server-keystore-password\", \"ca\", \"ca-password\");\n\t// Create a client certificate and key pair signed by the CA\n\tKeyTool.createSignedCertificate(\"client\", \"client-password\", \"client-alias\", \"client-keystore\", \"client-keystore-password\", \"ca\", \"ca-password\");\n\t// Create a second CA certificate and key pair\n\tKeyTool.createCA(\"second-ca\", \"second-ca-password\", \"second-ca-alias\", \"second-ca-keystore\", \"second-ca-keystore-password\");\n\t// Create a second client certificate and key pair signed by the second CA\n\tKeyTool.createSignedCertificate(\"second-client\", \"second-client-password\", \"second-client-alias\", \"second-client-keystore\", \"second-client-keystore-password\", \"second-ca\", \"second-ca-password\");\n}", "CodeBleu_score": 9.998415118317075}]}
{"instance_id": "d2eeaa6a6bbe", "generation_result": [{"code": "private void assertInSeconds(BooleanSupplier assertion, int seconds){\n\t\tlong endTime = System.currentTimeMillis() + (seconds * 1000);\n\twhile (System.currentTimeMillis() < endTime) {\n\t\tif (assertion.getAsBoolean()) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tThread.sleep(100);\n\t\t} catch (InterruptedException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\tthrow new RuntimeException(\"Timed out waiting for condition\");\n}", "CodeBleu_score": 43.676575715443825}, {"code": "private void assertInSeconds(BooleanSupplier assertion, int seconds){\n\t\tlong startTime = System.currentTimeMillis();\n\tlong endTime = startTime + seconds * 1000;\n\twhile (System.currentTimeMillis() < endTime) {\n\t\tif (assertion.getAsBoolean()) {\n\t\t\treturn;\n\t\t}\n\t}\n\tthrow new RuntimeException(\"Assertion failed\");\n}", "CodeBleu_score": 47.76094297941547}, {"code": "private void assertInSeconds(BooleanSupplier assertion, int seconds){\n\t\tlong limit = System.currentTimeMillis() + seconds * 1000;\n\twhile (System.currentTimeMillis() < limit) {\n\t\tif (assertion.getAsBoolean()) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tThread.sleep(100);\n\t\t} catch (InterruptedException e) {\n\t\t\tThread.currentThread().interrupt();\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\tthrow new RuntimeException(\"Assertion failed after \" + seconds + \" seconds.\");\n}", "CodeBleu_score": 43.66508284802737}]}
{"instance_id": "6bb261b0e4e1", "generation_result": [{"code": "public X509Certificate createCert(KeyPair keyPair, String ca) throws Exception{\n\t\t// Create a new certificate builder using the public key\n\tJcaX509v3CertificateBuilder certBuilder = new JcaX509v3CertificateBuilder(\n\t\tnew X500Name(\"CN=Test Certificate\"), // Subject\n\t\tBigInteger.valueOf(System.currentTimeMillis()), // Serial number\n\t\tnew Date(System.currentTimeMillis() - 1000L * 60 * 60 * 24 * 30), // Valid from\n\t\tnew Date(System.currentTimeMillis() + 1000L * 60 * 60 * 24 * 30), // Valid until\n\t\tnew X500Name(\"CN=\" + ca), // CA\n\t\tkeyPair.getPublic() // Public key\n\t);\n\n\t// Add the extensions\n\tcertBuilder.addExtension(Extension.subjectKeyIdentifier, false, createSubjectKeyIdentifier(keyPair.getPublic()));\n\tcertBuilder.addExtension(Extension.basicConstraints, false, new BasicConstraints(false));\n\tcertBuilder.addExtension(Extension.keyUsage, false, new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyEncipherment));\n\tcertBuilder.addExtension(Extension.authorityKeyIdentifier, false, createAuthorityKeyIdentifier(keyPair.getPublic()));\n\n\t// Sign the certificate\n\tContentSigner signer = new JcaContentSignerBuilder(\"SHA256WithRSAEncryption\").build(keyPair.getPrivate());\n\tX509CertificateHolder holder = certBuilder.build(signer);\n\treturn new JcaX509CertificateConverter().getCertificate(holder);\n}", "CodeBleu_score": 34.90908846712403}, {"code": "public X509Certificate createCert(KeyPair keyPair, String ca) throws Exception{\n\t\tX500Name issuer = new X500Name(ca);\n\tBigInteger serial = new BigInteger(64, new SecureRandom());\n\tDate notBefore = new Date();\n\tDate notAfter = new Date(System.currentTimeMillis() + (1000L * 60 * 60 * 24 * 365 * 10));\n\tJcaX509v3CertificateBuilder certBuilder = new JcaX509v3CertificateBuilder(issuer, serial, notBefore, notAfter, issuer, keyPair.getPublic());\n\tcertBuilder.addExtension(Extension.subjectKeyIdentifier, false, createSubjectKeyId(keyPair.getPublic()));\n\tcertBuilder.addExtension(Extension.basicConstraints, true, new BasicConstraints(false));\n\tcertBuilder.addExtension(Extension.keyUsage, true, new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyEncipherment));\n\tcertBuilder.addExtension(Extension.authorityKeyIdentifier, false, createAuthorityKeyId(ca));\n\tContentSigner signer = new JcaContentSignerBuilder(\"SHA256WithRSAEncryption\").build(keyPair.getPrivate());\n\treturn new JcaX509CertificateConverter().setProvider(\"BC\").getCertificate(certBuilder.build(signer));\n}", "CodeBleu_score": 33.48273005890023}, {"code": "public X509Certificate createCert(KeyPair keyPair, String ca) throws Exception{\n\t\tX500Name issuer = new X500Name(ca);\n\tBigInteger serial = new BigInteger(64, new SecureRandom());\n\tDate notBefore = new Date();\n\tDate notAfter = new Date(System.currentTimeMillis() + (1000L * 60 * 60 * 24 * 365));\n\tJcaX509v3CertificateBuilder builder = new JcaX509v3CertificateBuilder(issuer, serial, notBefore, notAfter, issuer, keyPair.getPublic());\n\tbuilder.addExtension(Extension.subjectKeyIdentifier, false, createSubjectKeyId(keyPair.getPublic()));\n\tbuilder.addExtension(Extension.authorityKeyIdentifier, false, createAuthorityKeyId(ca));\n\tbuilder.addExtension(Extension.basicConstraints, true, new BasicConstraints(false));\n\tbuilder.addExtension(Extension.keyUsage, true, new KeyUsage(KeyUsage.keyCertSign | KeyUsage.cRLSign));\n\tContentSigner signer = new JcaContentSignerBuilder(\"SHA256WithRSAEncryption\").build(keyPair.getPrivate());\n\tX509CertificateHolder holder = builder.build(signer);\n\treturn new JcaX509CertificateConverter().setProvider(\"BC\").getCertificate(holder);\n}", "CodeBleu_score": 35.41788327838971}]}
{"instance_id": "e4f9c32a7c9e", "generation_result": [{"code": "EurekaHttpClient getEurekaHttpClient(){\n\t\tEurekaHttpClient eurekaHttpClient = EurekaHttpClientHolder.INSTANCE.get();\n\tif (eurekaHttpClient == null) {\n\t\ttry {\n\t\t\teurekaHttpClient = (EurekaHttpClient) ReflectionUtils.findField(eurekaTransport, \"registrationClient\").get(eurekaTransport);\n\t\t\tEurekaHttpClientHolder.INSTANCE.set(eurekaHttpClient);\n\t\t}\n\t\tcatch (IllegalAccessException e) {\n\t\t\tlogger.error(\"Error while accessing EurekaHttpClient\", e);\n\t\t}\n\t}\n\treturn eurekaHttpClient;\n}", "CodeBleu_score": 48.40340809078414}, {"code": "EurekaHttpClient getEurekaHttpClient(){\n\t\tif (eurekaHttpClient.get() == null) {\n\t\ttry {\n\t\t\tField registrationClientField = ReflectionUtils.findField(eurekaTransport.getClass(), \"registrationClient\");\n\t\t\tregistrationClientField.setAccessible(true);\n\t\t\tregistrationClient = (RegistrationClient) ReflectionUtils.getField(registrationClientField, eurekaTransport);\n\t\t\teurekaHttpClient.set(registrationClient.getEurekaHttpClient());\n\t\t} catch (IllegalAccessException e) {\n\t\t\tlogger.error(\"Error while trying to get the eurekaHttpClient\", e);\n\t\t}\n\t}\n\treturn eurekaHttpClient.get();\n}", "CodeBleu_score": 55.09921269589763}, {"code": "EurekaHttpClient getEurekaHttpClient(){\n\t\tEurekaHttpClient eurekaHttpClient = EurekaHttpClientHolder.getEurekaHttpClient();\n\tif (eurekaHttpClient == null) {\n\t\ttry {\n\t\t\tField field = ReflectionUtils.findField(DiscoveryClient.class, \"registrationClient\");\n\t\t\tfield.setAccessible(true);\n\t\t\tObject registrationClient = field.get(discoveryClient);\n\t\t\tField field2 = ReflectionUtils.findField(registrationClient.getClass(), \"eurekaTransport\");\n\t\t\tfield2.setAccessible(true);\n\t\t\tObject eurekaTransport = field2.get(registrationClient);\n\t\t\tField field3 = ReflectionUtils.findField(eurekaTransport.getClass(), \"clientFactories\");\n\t\t\tfield3.setAccessible(true);\n\t\t\tObject clientFactories = field3.get(eurekaTransport);\n\t\t\tField field4 = ReflectionUtils.findField(clientFactories.getClass(), \"transportClientFactories\");\n\t\t\tfield4.setAccessible(true);\n\t\t\tObject transportClientFactories = field4.get(clientFactories);\n\t\t\tField field5 = ReflectionUtils.findField(transportClientFactories.getClass(), \"sharedTransportClient\");\n\t\t\tfield5.setAccessible(true);\n\t\t\tObject sharedTransportClient = field5.get(transportClientFactories);\n\t\t\tField field6 = ReflectionUtils.findField(sharedTransportClient.getClass(), \"eurekaHttpClient\");\n\t\t\tfield6.setAccessible(true);\n\t\t\teurekaHttpClient = (EurekaHttpClient) field6.get(sharedTransportClient);\n\t\t\tEurekaHttpClientHolder.setEurekaHttpClient(eurekaHttpClient);\n\t\t} catch (IllegalAccessException e) {\n\t\t\tlog.error(\"Unable to get EurekaHttpClient\", e);\n\t\t}\n\t}\n\treturn eurekaHttpClient;\n}", "CodeBleu_score": 46.88676820728316}]}
{"instance_id": "5c404f04e34c", "generation_result": [{"code": "public List<String> getServices(){\n\t\tApplications apps = eurekaClient.getApplications();\n\tList<String> services = new ArrayList<>();\n\tif (apps != null) {\n\t\tfor (Application app : apps.getRegisteredApplications()) {\n\t\t\tif (!app.getInstances().isEmpty()) {\n\t\t\t\tservices.add(app.getName().toLowerCase());\n\t\t\t}\n\t\t}\n\t}\n\treturn services;\n}", "CodeBleu_score": 48.88216733742989}, {"code": "public List<String> getServices(){\n\t\tList<String> services = new ArrayList<String>();\n\tApplications applications = eurekaClient.getApplications();\n\tfor (Application application : applications.getRegisteredApplications()) {\n\t\tfor (InstanceInfo instanceInfo : application.getInstances()) {\n\t\t\tservices.add(application.getName().toLowerCase());\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn services;\n}", "CodeBleu_score": 45.92542065051162}, {"code": "public List<String> getServices(){\n\t\tApplications applications = eurekaClient.getApplications();\n\tList<String> services = new ArrayList<String>();\n\tfor (Application application : applications.getRegisteredApplications()) {\n\t\tif (application.getInstances().size() > 0) {\n\t\t\tservices.add(application.getName().toLowerCase());\n\t\t}\n\t}\n\treturn services;\n}", "CodeBleu_score": 46.4705318303701}]}
{"instance_id": "a21251337ade", "generation_result": [{"code": "void populateHealthContributors(Map<String, HealthContributor> healthContributors){\n\t\tfor (Map.Entry<String, HealthContributor> entry : this.healthContributors.entrySet()) {\n\t\tif (entry.getValue() instanceof DiscoveryCompositeHealthContributor) {\n\t\t\tDiscoveryCompositeHealthContributor discoveryCompositeHealthContributor = (DiscoveryCompositeHealthContributor) entry.getValue();\n\t\t\tfor (NamedContributor<HealthContributor> namedContributor : discoveryCompositeHealthContributor.getContributorMap().entrySet()) {\n\t\t\t\tif (!(namedContributor.getContributor() instanceof EurekaHealthIndicator)) {\n\t\t\t\t\thealthContributors.put(namedContributor.getName(), namedContributor.getContributor());\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\thealthContributors.put(entry.getKey(), entry.getValue());\n\t\t}\n\t}\n}", "CodeBleu_score": 40.94147092056267}, {"code": "void populateHealthContributors(Map<String, HealthContributor> healthContributors){\n\t\tMap<String, HealthContributor> map = new HashMap<>();\n\tfor (Map.Entry<String, HealthContributor> entry : healthContributors.entrySet()) {\n\t\tif (entry.getValue() instanceof DiscoveryCompositeHealthContributor) {\n\t\t\tDiscoveryCompositeHealthContributor discoveryCompositeHealthContributor = (DiscoveryCompositeHealthContributor) entry.getValue();\n\t\t\tfor (NamedContributor<HealthContributor> namedContributor : discoveryCompositeHealthContributor.getContributors()) {\n\t\t\t\tif (!(namedContributor.getContributor() instanceof EurekaHealthIndicator)) {\n\t\t\t\t\tmap.put(namedContributor.getName(), namedContributor.getContributor());\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tmap.put(entry.getKey(), entry.getValue());\n\t\t}\n\t}\n\thealthContributors.clear();\n\thealthContributors.putAll(map);\n}", "CodeBleu_score": 40.994815921502564}, {"code": "void populateHealthContributors(Map<String, HealthContributor> healthContributors){\n\t\tfor (Map.Entry<String, HealthContributor> entry : this.healthContributors.entrySet()) {\n\t\tif (entry.getValue() instanceof DiscoveryCompositeHealthContributor) {\n\t\t\tDiscoveryCompositeHealthContributor discoveryCompositeHealthContributor = (DiscoveryCompositeHealthContributor) entry.getValue();\n\t\t\tfor (NamedContributor<HealthContributor> namedContributor : discoveryCompositeHealthContributor.getContributors()) {\n\t\t\t\tif (!(namedContributor.getContributor() instanceof EurekaHealthIndicator)) {\n\t\t\t\t\tHealthContributor healthContributor = (HealthContributor) namedContributor.getContributor();\n\t\t\t\t\tif (healthContributor instanceof CompositeHealthContributor) {\n\t\t\t\t\t\tCompositeHealthContributor compositeHealthContributor = (CompositeHealthContributor) healthContributor;\n\t\t\t\t\t\tfor (NamedContributor<HealthContributor> compositeNamedContributor : compositeHealthContributor.getContributors()) {\n\t\t\t\t\t\t\tHealthContributor compositeHealthContributorContributor = (HealthContributor) compositeNamedContributor.getContributor();\n\t\t\t\t\t\t\tif (compositeHealthContributorContributor instanceof EurekaHealthIndicator) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.healthContributors.put(compositeNamedContributor.getName(), compositeHealthContributorContributor);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (healthContributor instanceof CompositeReactiveHealthContributor) {\n\t\t\t\t\t\tCompositeReactiveHealthContributor compositeReactiveHealthContributor = (CompositeReactiveHealthContributor) healthContributor;\n\t\t\t\t\t\tfor (NamedContributor<ReactiveHealthContributor> compositeNamedContributor : compositeReactiveHealthContributor.getContributors()) {\n\t\t\t\t\t\t\tReactiveHealthContributor compositeReactiveHealthContributorContributor = (ReactiveHealthContributor) compositeNamedContributor.getContributor();\n\t\t\t\t\t\t\tif (compositeReactiveHealthContributorContributor instanceof EurekaHealthIndicator) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.healthContributors.put(compositeNamedContributor.getName(), compositeReactiveHealthContributorContributor);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (healthContributor instanceof EurekaHealthIndicator) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.healthContributors.put(namedContributor.getName(), healthContributor);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (!(entry.getValue() instanceof EurekaHealthIndicator)) {\n\t\t\t\tthis.healthContributors.put(entry.getKey(), entry.getValue());\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 36.1457696292743}]}
{"instance_id": "998fee829929", "generation_result": [{"code": "public String hello(){\n\t\tList<ServiceInstance> instances = discoveryClient.getInstances(\"provider-application\");\n\tif (instances.isEmpty()) {\n\t\tthrow new RuntimeException(\"No instances found for 'provider-application'\");\n\t}\n\tURI uri = instances.get(0).getUri();\n\tRestTemplate restTemplate = new RestTemplate();\n\treturn restTemplate.postForObject(uri + \"/echo\", \"Hello\", String.class);\n}", "CodeBleu_score": 41.06633990073674}, {"code": "public String hello(){\n\t\tServiceInstance instance = loadBalancerClient.choose(\"provider-application\");\n\tif (instance == null) {\n\t\tthrow new RuntimeException(\"No instances found for provider-application\");\n\t}\n\tURI uri = instance.getUri();\n\tRestTemplate restTemplate = new RestTemplate();\n\tString response = restTemplate.postForObject(uri + \"/echo\", \"Hello from the consumer\", String.class);\n\treturn response;\n}", "CodeBleu_score": 47.349069910504596}, {"code": "public String hello(){\n\t\tList<ServiceInstance> instances = this.discoveryClient.getInstances(\"provider-application\");\n\tif (instances.isEmpty()) {\n\t\tthrow new RuntimeException(\"No instances found for 'provider-application'\");\n\t}\n\tServiceInstance instance = instances.get(0);\n\tURI uri = instance.getUri();\n\tRestTemplate restTemplate = new RestTemplate();\n\tString response = restTemplate.postForObject(uri + \"/echo\", \"Hello from Spring Cloud OpenFeign!\", String.class);\n\treturn response;\n}", "CodeBleu_score": 55.121492713741915}]}
{"instance_id": "31166ae7d3dc", "generation_result": [{"code": "public String world(){\n\t\tList<ServiceInstance> instances = loadBalancerClient.choose(\"provider-application\").get();\n\tif (instances == null || instances.isEmpty()) {\n\t\tthrow new RuntimeException(\"No provider-application instances found\");\n\t}\n\tURI uri = instances.get(0).getUri().resolve(\"/echo\");\n\treturn new RestTemplate().postForObject(uri, \"Hello world\", String.class);\n}", "CodeBleu_score": 45.69210908108434}, {"code": "public String world(){\n\t\tList<ServiceInstance> serviceInstances = loadBalancerClient.getInstances(\"provider-application\");\n\tif (serviceInstances.isEmpty()) {\n\t\tthrow new RuntimeException(\"No service instance found for provider-application\");\n\t}\n\tURI uri = serviceInstances.get(0).getUri();\n\turi = uri.resolve(\"/echo\");\n\tRestTemplate restTemplate = new RestTemplate();\n\treturn restTemplate.postForObject(uri, \"hello\", String.class);\n}", "CodeBleu_score": 50.83155061168599}, {"code": "public String world(){\n\t\tLoadBalancerClient loadBalancer = new TutuDiscoveryClient();\n\tList<ServiceInstance> instances = loadBalancer.getInstances(\"provider-application\");\n\tif (instances.isEmpty()) {\n\t\tthrow new RuntimeException(\"No service instance found for provider-application\");\n\t}\n\tURI uri = URI.create(\"http://\" + instances.get(0).getHost() + \":\" + instances.get(0).getPort() + \"/echo\");\n\tRestTemplate restTemplate = new RestTemplate();\n\treturn restTemplate.postForObject(uri, \"World!\", String.class);\n}", "CodeBleu_score": 48.639132076209705}]}
{"instance_id": "d7714f9cf0e9", "generation_result": [{"code": "public boolean register(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t\tSet<Server> servers;\n\tsynchronized (serverMap) {\n\t\tif (serverMap.containsKey(serviceName)) {\n\t\t\tservers = serverMap.get(serviceName);\n\t\t} else {\n\t\t\tservers = Collections.newSetFromMap(new ConcurrentHashMap<>());\n\t\t\tserverMap.put(serviceName, servers);\n\t\t}\n\t}\n\tservers.add(new Server(ip, port));\n\tlogger.info(\"Server registered: \" + serviceName + \" \" + ip + \":\" + port);\n\treturn true;\n}", "CodeBleu_score": 51.17590745024958}, {"code": "public boolean register(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t\tif (serverMap.containsKey(serviceName)) {\n\t\tserverMap.get(serviceName).add(new Server(ip, port));\n\t\treturn true;\n\t}\n\tSet<Server> newSet = Collections.synchronizedSet(new HashSet<Server>());\n\tnewSet.add(new Server(ip, port));\n\tserverMap.put(serviceName, newSet);\n\treturn true;\n}", "CodeBleu_score": 51.110592538288344}, {"code": "public boolean register(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t\tif (serverMap.containsKey(serviceName)) {\n\t\tserverMap.get(serviceName).add(new Server(ip, port));\n\t\treturn true;\n\t} else {\n\t\tsynchronized (serverMap) {\n\t\t\tif (serverMap.containsKey(serviceName)) {\n\t\t\t\tserverMap.get(serviceName).add(new Server(ip, port));\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tHashSet<Server> serverSet = new HashSet<Server>();\n\t\t\t\tserverSet.add(new Server(ip, port));\n\t\t\t\tserverMap.put(serviceName, serverSet);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 49.17030866863453}]}
{"instance_id": "45f91ed1c560", "generation_result": [{"code": "public boolean deregister(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t\t// TODO: Your code goes here\n\treturn true;\n}", "CodeBleu_score": 17.11610163111535}, {"code": "public boolean deregister(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t\tServer server = new Server(serviceName, ip, port);\n\tif (serverMap.containsKey(serviceName)) {\n\t\tSet<Server> serverSet = serverMap.get(serviceName);\n\t\tif (serverSet.contains(server)) {\n\t\t\tserverSet.remove(server);\n\t\t\tlogger.info(\"Deregistered \" + server);\n\t\t\treturn true;\n\t\t}\n\t}\n\tlogger.info(\"Failed to deregister \" + server);\n\treturn false;\n}", "CodeBleu_score": 51.15219322976712}, {"code": "public boolean deregister(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t\tif (serverMap.containsKey(serviceName)) {\n\t\tSet<Server> serverSet = serverMap.get(serviceName);\n\t\tServer server = new Server(ip, port);\n\t\tif (serverSet.contains(server)) {\n\t\t\tserverSet.remove(server);\n\t\t\tlogger.info(\"Deregistered server: \" + server.toString());\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 53.66276624328972}]}
{"instance_id": "f671d9564e40", "generation_result": [{"code": "public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry){\n\tAnnotationAttributes attributes = AnnotationAttributes.fromMap(metadata.getAnnotationAttributes(RibbonClients.class.getName(), false));\nif (attributes == null) {\nreturn;\n}\nMap<String, Object> defaultAttributes = attributes.getAnnotation(DefaultClientConfig.class.getName()).getAnnotationAttributes(DefaultClientConfig.class.getName());\nString defaultName = (String) defaultAttributes.get(\"name\");\nString defaultConfiguration = (String) defaultAttributes.get(\"configuration\");\nif (defaultConfiguration != null && defaultConfiguration.length() > 0) {\nBeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(ClientConfiguration.class);\nbuilder.addPropertyValue(\"name\", defaultName);\nbuilder.addPropertyValue(\"configuration\", defaultConfiguration);\nregistry.registerBeanDefinition(defaultName, builder.getBeanDefinition());\n}\nMap<String, Object> value = attributes.getAnnotation(RibbonClient.class.getName()).getAnnotationAttributes(RibbonClient.class.getName());\nString name = (String) value.get(\"name\");\nString configuration = (String) value.get(\"configuration\");\nif (configuration != null && configuration.length() > 0) {\nBeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(ClientConfiguration.class);\nbuilder.addPropertyValue(\"name\", name);\nbuilder.addPropertyValue(\"configuration\", configuration);\nregistry.registerBeanDefinition(name, builder.getBeanDefinition());\n}\n}", "CodeBleu_score": 38.98305090128105}, {"code": "public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry){\n\t\tMap<String, Object> attributes = metadata.getAnnotationAttributes(RibbonClients.class.getName());\n\tif (attributes == null) {\n\t\treturn;\n\t}\n\tString[] value = (String[])attributes.get(\"value\");\n\tString[] basePackages = (String[])attributes.get(\"basePackages\");\n\tClass<?>[] defaultConfiguration = (Class<?>[])attributes.get(\"defaultConfiguration\");\n\tClass<?>[] clients = new Class<?>[0];\n\tif (value.length > 0) {\n\t\tclients = new Class<?>[value.length];\n\t\tfor (int i = 0; i < value.length; i++) {\n\t\t\ttry {\n\t\t\t\tclients[i] = Class.forName(value[i]);\n\t\t\t}\n\t\t\tcatch (ClassNotFoundException ex) {\n\t\t\t\tthrow new IllegalStateException(\"Could not load client definition class [\" + value[i] + \"]\", ex);\n\t\t\t}\n\t\t}\n\t}\n\telse if (basePackages.length > 0) {\n\t\tclients = ClassPathScanningCandidateComponentProvider.forAnnotation(RibbonClient.class).findCandidateComponents(StringUtils.arrayToCommaDelimitedString(basePackages));\n\t\tclients = (Class<?>[])Stream.of(clients).map((candidate) -> {\n\t\t\treturn candidate.getBeanClassName();\n\t\t}).toArray(Class<?>[]::new);\n\t}\n\tif (defaultConfiguration.length > 0) {\n\t\tBeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(RibbonClientConfiguration.class);\n\t\tbuilder.addPropertyValue(\"clients\", clients);\n\t\tbuilder.addPropertyValue(\"configuration\", defaultConfiguration[0]);\n\t\tregistry.registerBeanDefinition(defaultConfiguration[0].getName(), builder.getBeanDefinition());\n\t}\n}", "CodeBleu_score": 38.125054162563444}, {"code": "public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry){\n\tAnnotationAttributes attributes = AnnotationAttributes.fromMap(metadata.getAnnotationAttributes(RibbonClients.class.getName(), false));", "CodeBleu_score": 26.53995272132924}]}
{"instance_id": "dbc92d8f146f", "generation_result": [{"code": "public <T> ServiceInstance choose(String serviceId, Request<T> request) {\n\t\tLoadBalancerClient loadBalancer = getLoadBalancer(serviceId);\n\tif (loadBalancer == null) {\n\t\treturn null;\n\t}\n\tServer server = loadBalancer.choose(serviceId);\n\tif (server == null) {\n\t\treturn null;\n\t}\n\tURI uri = reconstructURI(server, request);\n\treturn new TutuServiceInstance(serviceId, uri.getHost(), uri.getPort());\n}", "CodeBleu_score": 49.93977717601778}, {"code": "public <T> ServiceInstance choose(String serviceId, Request<T> request) {\n\t\tILoadBalancer lb = this.loadBalancerClient.getLoadBalancer(serviceId);\n\tif (lb == null) {\n\t\treturn null;\n\t}\n\tServer server = lb.chooseServer(this.getPredicate(serviceId, request));\n\tif (server == null) {\n\t\treturn null;\n\t}\n\treturn new TutuServiceInstance(serviceId, server.getHost(), server.getPort(), false);\n}", "CodeBleu_score": 54.217412746151126}, {"code": "public <T> ServiceInstance choose(String serviceId, Request<T> request) {\n\t\t// Get the load balancer for the service ID\n\tILoadBalancer loadBalancer = loadBalancerClient.getLoadBalancer(serviceId);\n\n\t// Get the server instance from the load balancer\n\tServer server = loadBalancer.chooseServer(request);\n\n\t// If there is no server, return null\n\tif (server == null) {\n\t\treturn null;\n\t}\n\n\t// Create and return a TutuServiceInstance representing the chosen server\n\treturn new TutuServiceInstance(serviceId, server.getHost(), server.getPort());\n}", "CodeBleu_score": 59.84919188911514}]}
{"instance_id": "362eadbd3c5e", "generation_result": [{"code": "public URI reconstructURI(ServiceInstance server, URI original) {\n\t\tString scheme = original.getScheme();\n\tString host = server.getHost();\n\tint port = server.getPort();\n\tString path = original.getRawPath();\n\tString query = original.getRawQuery();\n\tString fragment = original.getRawFragment();\n\tStringBuilder sb = new StringBuilder();\n\tsb.append(scheme).append(\"://\").append(host).append(\":\").append(port).append(path);\n\tif (StrUtil.isNotEmpty(query)) {\n\t\tsb.append(\"?\").append(query);\n\t}\n\tif (StrUtil.isNotEmpty(fragment)) {\n\t\tsb.append(\"#\").append(fragment);\n\t}\n\ttry {\n\t\treturn new URI(sb.toString());\n\t} catch (URISyntaxException e) {\n\t\tthrow new RuntimeException(e);\n\t}\n}", "CodeBleu_score": 53.04348104984602}, {"code": "public URI reconstructURI(ServiceInstance server, URI original) {\n\t\tString scheme = original.getScheme();\n\tString userInfo = original.getUserInfo();\n\tString host = server.getHost();\n\tint port = server.getPort();\n\tString path = original.getPath();\n\tString query = original.getQuery();\n\tString fragment = original.getFragment();\n\n\ttry {\n\t\treturn new URI(scheme, userInfo, host, port, path, query, fragment);\n\t} catch (URISyntaxException e) {\n\t\tthrow new RuntimeException(e);\n\t}\n}", "CodeBleu_score": 36.167997052430565}, {"code": "public URI reconstructURI(ServiceInstance server, URI original) {\n\t\tString scheme = original.getScheme();\n\tString userInfo = original.getUserInfo();\n\tString host = server.getHost();\n\tint port = server.getPort();\n\tString path = original.getPath();\n\tString query = original.getQuery();\n\tString fragment = original.getFragment();\n\tURI reconstructed = null;\n\ttry {\n\t\treconstructed = new URI(scheme, userInfo, host, port, path, query, fragment);\n\t}\n\tcatch (URISyntaxException e) {\n\t\tthrow new RuntimeException(\"Error reconstructing URI\", e);\n\t}\n\treturn reconstructed;\n}", "CodeBleu_score": 34.51457641113996}]}
{"instance_id": "6801d2b2e4c8", "generation_result": [{"code": "private List<TutuServer> getServer(){\n\t\t// Create a new HashMap to store the parameters for the HTTP request\n\tMap<String, String> params = new HashMap<String, String>();\n\t// Add the serviceName parameter to the HashMap\n\tparams.put(\"serviceName\", serviceName);\n\t// Add the zone parameter to the HashMap\n\tparams.put(\"zone\", zone);\n\t// Add the protocol parameter to the HashMap\n\tparams.put(\"protocol\", protocol);\n\t// Add the port parameter to the HashMap\n\tparams.put(\"port\", port);\n\t// Add the weight parameter to the HashMap\n\tparams.put(\"weight\", weight);\n\t// Add the status parameter to the HashMap\n\tparams.put(\"status\", status);\n\t// Add the healthy parameter to the HashMap\n\tparams.put(\"healthy\", healthy);\n\t// Add the metadata parameter to the HashMap\n\tparams.put(\"metadata\", metadata);\n\t// Add the pageNo parameter to the HashMap\n\tparams.put(\"pageNo\", pageNo);\n\t// Add the pageSize parameter to the HashMap\n\tparams.put(\"pageSize\", pageSize);\n\t// Add the cluster parameter to the HashMap\n\tparams.put(\"cluster\", cluster);\n\t// Add the group parameter to the HashMap\n\tparams.put(\"group\", group);\n\t// Add the namespaceId parameter to the HashMap\n\tparams.put(\"namespaceId\", namespaceId);\n\t// Add the namespaceName parameter to the HashMap\n\tparams.put(\"namespaceName\", namespaceName);\n\t// Add the namespaceShowName parameter to the HashMap\n\tparams.put(\"namespaceShowName\", namespaceShowName);\n\t// Add the namespaceDesc parameter to the HashMap\n\tparams.put(\"namespaceDesc\", namespaceDesc);\n\t// Add the namespaceStatus parameter to the HashMap\n\tparams.put(\"namespaceStatus\", namespaceStatus);\n\t// Add the namespacePublicStatus parameter to the HashMap\n\tparams.put(\"namespacePublicStatus\", namespacePublicStatus);\n\t// Add the namespaceType parameter to the HashMap\n\tparams.put(\"namespaceType\", namespaceType);\n\t// Add the namespaceTag parameter to the HashMap\n\tparams.put(\"namespaceTag\", namespaceTag);\n\t// Add the namespaceUser parameter to the HashMap\n\tparams.put(\"namespaceUser\", namespaceUser);\n\t// Add the namespaceUserEmail parameter to the HashMap\n\tparams.put(\"namespaceUserEmail\", namespaceUserEmail", "CodeBleu_score": 16.748240272506624}, {"code": "private List<TutuServer> getServer(){\n\t\tTutuDiscoveryProperties discoveryProperties = this.discoveryProperties;\n\tString discoveryServer = discoveryProperties.getDiscoveryServer();\n\tString serviceName = discoveryProperties.getServiceName();\n\tString region = discoveryProperties.getRegion();\n\tString zone = discoveryProperties.getZone();\n\tString serverListPath = discoveryProperties.getServerListPath();\n\tMap<String, String> params = new HashMap<>();\n\tparams.put(\"serviceName\", serviceName);\n\tparams.put(\"region\", region);\n\tparams.put(\"zone\", zone);\n\tString url = serverListPath + \"?\" + URLUtil.buildQuery(params);\n\tString response = HttpUtil.get(discoveryServer + url);\n\tJSONObject jsonObject = JSON.parseObject(response);\n\tList<JSONObject> jsonArray = jsonObject.getJSONArray(\"list\");\n\tList<TutuServer> servers = jsonArray.stream().map(json -> {\n\t\tString ip = json.getString(\"ip\");\n\t\tint port = json.getInteger(\"port\");\n\t\treturn new TutuServer(ip, port);\n\t}).collect(Collectors.toList());\n\treturn servers;\n}", "CodeBleu_score": 43.289730475975915}, {"code": "private List<TutuServer> getServer(){\n\t\tString serviceName = discoveryProperties.getServiceId();\n\tString url = discoveryProperties.getServerAddr() + \"/list?serviceName=\" + serviceName;\n\tString response = HttpUtil.get(url);\n\tJSONObject json = JSON.parseObject(response);\n\tList<TutuServer> servers = json.getJSONArray(\"servers\").toJavaList(TutuServer.class);\n\treturn servers;\n}", "CodeBleu_score": 33.35482172022921}]}
{"instance_id": "ab2fb77484fd", "generation_result": [{"code": "public Route getMatchingRoute(String path){\n\t\tif (routes == null) {\n\t\treturn null;\n\t}\n\tfor (Map.Entry<String, ZuulRoute> entry : routes.entrySet()) {\n\t\tString pattern = entry.getValue().getPath();\n\t\tif (pathMatcher.match(pattern, path)) {\n\t\t\tString serviceId = entry.getValue().getServiceId();\n\t\t\tString routePath = pathMatcher.extractPathWithinPattern(pattern, path);\n\t\t\treturn new Route(routePath, serviceId);\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 43.59701220237662}, {"code": "public Route getMatchingRoute(String path){\n\t\tif (path == null) {\n\t\treturn null;\n\t}\n\tMap<String, ZuulRoute> routes = this.routes.get(this.serviceId);\n\tif (routes == null) {\n\t\treturn null;\n\t}\n\tPathMatcher pathMatcher = new AntPathMatcher();\n\tfor (String route : routes.keySet()) {\n\t\tif (pathMatcher.match(route, path)) {\n\t\t\tZuulRoute zuulRoute = routes.get(route);\n\t\t\tString targetPath = pathMatcher.extractPathWithinPattern(route, path);\n\t\t\treturn new Route(zuulRoute.getId(), targetPath, zuulRoute.getServiceId());\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 39.99322276833852}, {"code": "public Route getMatchingRoute(String path){\n\t\tif (routes == null || routes.isEmpty()) {\n\t\treturn null;\n\t}\n\tfor (Map.Entry<String, ZuulRoute> entry : routes.entrySet()) {\n\t\tString serviceId = entry.getValue().getServiceId();\n\t\tString routePath = entry.getValue().getPath();\n\t\tif (pathMatcher.match(routePath, path)) {\n\t\t\tString targetPath = pathMatcher.extractPathWithinPattern(routePath, path);\n\t\t\treturn new Route(serviceId, targetPath);\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 45.45537594281943}]}
{"instance_id": "822071925513", "generation_result": [{"code": "public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry){\n\t\tSet<String> basePackages = ClassUtil.getPackageNames(ClassUtils.getPackageName(importingClassMetadata.getClassName()));\n\tif (basePackages.isEmpty()) {\n\t\tbasePackages.add(ClassUtils.getPackageName(importingClassMetadata.getClassName()));\n\t}\n\tregisterBeanDefinitions(importingClassMetadata, registry, basePackages);\n}", "CodeBleu_score": 15.924549681421754}, {"code": "public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry){\n\t\tSet<String> basePackages = ClassUtil.scanPackageByAnnotation(importingClassMetadata.getClassName(), FeignClient.class);\n\tif (basePackages.isEmpty()) {\n\t\treturn;\n\t}\n\tClass<?>[] classes = ClassUtil.scanPackageByAnnotation(basePackages, FeignClient.class);\n\tfor (Class<?> clazz : classes) {\n\t\tGenericBeanDefinition definition = new GenericBeanDefinition();\n\t\tdefinition.setBeanClass(FeignClientFactoryBean.class);\n\t\tdefinition.setLazyInit(true);\n\t\tdefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n\t\tdefinition.getConstructorArgumentValues().addGenericArgumentValue(clazz);\n\t\tdefinition.getConstructorArgumentValues().addGenericArgumentValue(ClassUtils.getPackageName(clazz));\n\t\tdefinition.getConstructorArgumentValues().addGenericArgumentValue(ClassUtils.getShortName(clazz));\n\t\tregistry.registerBeanDefinition(ClassUtils.getShortName(clazz), definition);\n\t}\n}", "CodeBleu_score": 41.792480279847126}, {"code": "public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry){\n\t\tSet<Class<?>> annotatedClasses = ClassUtil.scanPackageByAnnotation(ClassUtils.getPackageName(importingClassMetadata.getClassName()), FeignClient.class);\n\tfor (Class<?> annotatedClass : annotatedClasses) {\n\t\tGenericBeanDefinition beanDefinition = new GenericBeanDefinition();\n\t\tbeanDefinition.setBeanClass(FeignClientFactoryBean.class);\n\t\tbeanDefinition.setLazyInit(true);\n\t\tbeanDefinition.setAutowireCandidate(false);\n\t\tbeanDefinition.getConstructorArgumentValues().addGenericArgumentValue(annotatedClass);\n\t\tbeanDefinition.getConstructorArgumentValues().addGenericArgumentValue(annotatedClass.getSimpleName());\n\t\tbeanDefinition.getConstructorArgumentValues().addGenericArgumentValue(annotatedClass.getPackage().getName());\n\t\tregistry.registerBeanDefinition(annotatedClass.getSimpleName(), beanDefinition);\n\t}\n}", "CodeBleu_score": 42.06745002535654}]}
{"instance_id": "3d678e3bf3c8", "generation_result": [{"code": "public TutuDiscoveryClient tutuDiscoveryClient(TutuDiscoveryProperties tutuDiscoveryProperties){\n\t\treturn new TutuDiscoveryClient(tutuDiscoveryProperties);\n}", "CodeBleu_score": 72.530822855626}, {"code": "public TutuDiscoveryClient tutuDiscoveryClient(TutuDiscoveryProperties tutuDiscoveryProperties){\n\t\treturn new TutuDiscoveryClient(tutuDiscoveryProperties);\n}", "CodeBleu_score": 72.530822855626}, {"code": "public TutuDiscoveryClient tutuDiscoveryClient(TutuDiscoveryProperties tutuDiscoveryProperties){\n\t\treturn new TutuDiscoveryClient(tutuDiscoveryProperties);\n}", "CodeBleu_score": 72.530822855626}]}
