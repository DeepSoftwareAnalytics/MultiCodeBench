{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t\n    # Get attachment IDs from HTTP request arguments\n    attachment_ids = self._get_attachment_ids(**args)\n    if not attachment_ids:\n        return request.make_response(status=404)\n\n    # Verify read access rights and rules for the attachments\n    self.check_access_rights('read')\n    self.check_access_rule('read')\n    attachments = self.env['ir.attachment'].sudo().browse(attachment_ids)\n\n    # Build a zip file from the attachments' content\n    zip_file = io.BytesIO()\n    with zipfile.ZipFile(zip_file, 'w') as zip_file_object:\n        for attachment in attachments:\n            # Verify read access rights and rules for the attachment\n            attachment.check_access_rule('read')\n            # Read the attachment's content\n            content = attachment.datas\n            if not content:\n                continue\n            # Get the attachment's filename\n            filename = attachment.name or _(\"Attachment\")\n            if attachment.res_model == self._name:\n                filename = \"%s - %s\" % (self.name, filename)\n            elif attachment.res_model and attachment.res_id:\n                filename = \"%s - %s\" % (attachment.res_model, filename)\n            # Add the attachment's content to the zip file\n            zip_file_object.writestr(filename, content)\n\n    # Prepare HTTP headers for the zip file\n    zip_file_size = zip_file.tell()\n    zip_file.seek(0)\n    headers = {\n        'Content-Type': 'application/zip',\n        'Content-Disposition': content_disposition(self.name),\n        'Content-Length': zip_file_size,\n    }\n\n    # Return the zip file as an HTTP response\n    return request.make_response(zip_file.read(), headers)\n\n", "CodeBleu_score": 35.64889880325768}, {"code": "def export_zip_documents(self, **args)\n\t\n    self.ensure_one()\n    if not self.env.user.has_group('base.group_erp_manager'):\n        raise AccessError(_(\"You do not have access rights to export documents.\"))\n    if not self.attachment_ids:\n        raise UserError(_(\"There are no attachments to export.\"))\n    if not self.env.user.has_group('base.group_user'):\n        self.attachment_ids._check_access_rights('read')\n        self.attachment_ids._check_access_rule('read')\n    zip_buffer = io.BytesIO()\n    with zipfile.ZipFile(zip_buffer, 'w') as zip_file:\n        for attachment in self.attachment_ids:\n            zip_file.writestr(attachment.name, attachment.datas)\n    zip_buffer.seek(0)\n    headers = {\n        'Content-Type': 'application/zip',\n        'Content-Disposition': content_disposition(self.name + '.zip'),\n    }\n    return request.make_response(zip_buffer.read(), headers=headers)\n", "CodeBleu_score": 32.02608379164779}, {"code": "def export_zip_documents(self, **args)\n\t\n    # Retrieve attachment IDs from HTTP request arguments\n    attachment_ids = self.env['ir.http'].parse_list_as_int(args.get('id', ''))\n\n    # Verify read access rights and rules for the attachments\n    documents = request.env['ir.attachment'].sudo().browse(attachment_ids).exists()\n\n    # Build a zip file from the attachments' content\n    zip_file = io.BytesIO()\n    with zipfile.ZipFile(zip_file, 'w') as zf:\n        for document in documents:\n            # Verify read access rights and rules for the document\n            if not document.check_access_rule('read'):\n                raise AccessError(_(\"You don't have the access right to read this document.\"))\n\n            # Verify that the document is an image\n            if not document.mimetype.startswith('image/'):\n                raise ValidationError(_(\"The document must be an image.\"))\n\n            # Read the document's content\n            content = document.datas\n            if not content:\n                raise ValidationError(_(\"The document has no content.\"))\n\n            # Add the document to the zip file\n            zf.writestr(document.name, content)\n\n    # Prepare HTTP headers for the zip file\n    headers = content_disposition(\n        'attachment',\n        filename_or_fp='documents.zip',\n        filename=f'documents_{datetime.datetime.now().strftime(\"%Y%m%d%H%M%S\")}.zip'\n    )\n\n    # Return the zip file as an HTTP response\n    return request.make_response(zip_file.getvalue(), headers=headers)\n", "CodeBleu_score": 24.516695352656164}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(CustomerPortal, self)._prepare_home_portal_values(counters)\n    try:\n        if request.env['account.move'].check_access_rights('read', raise_exception=True):\n            values['invoice_count'] = request.env['account.move'].search_count([('partner_id', '=', request.env.user.partner_id.id), ('state', 'in', ['posted', 'cancel'])])\n            values['bill_count'] = request.env['account.move'].search_count([('partner_id', '=', request.env.user.partner_id.id), ('state', '=', 'draft')])\n    except AccessError:\n        values['invoice_count'] = 0\n        values['bill_count'] = 0\n    return values\n\n", "CodeBleu_score": 41.74608004868099}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(CustomerPortal, self)._prepare_home_portal_values(counters)\n    try:\n        self.env['account.move'].check_access_rights('read')\n        self.env['account.move'].check_access_rule('read')\n        values['invoice_count'] = self.env['account.move'].search_count([('partner_id', '=', self.env.user.partner_id.id), ('state', 'in', ['posted', 'partially_paid'])])\n        values['bill_count'] = self.env['account.move'].search_count([('partner_id', '=', self.env.user.partner_id.id), ('type', '=', 'out_refund')])\n    except (AccessError, MissingError):\n        values['invoice_count'] = 0\n        values['bill_count'] = 0\n    return values\n\n", "CodeBleu_score": 41.365075515414574}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(CustomerPortal, self)._prepare_home_portal_values(counters)\n    try:\n        self.env['account.move'].check_access_rights('read')\n        self.env['account.move'].check_access_rule('read')\n    except AccessError:\n        pass\n    else:\n        values['invoice_count'] = counters.get('account.move', 0)\n        values['bill_count'] = counters.get('account.move', 0)\n    return values\n\n", "CodeBleu_score": 26.310823588149223}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_portal_layout_values()\n    partner = request.env.user.partner_id\n\n    # Default options\n    date_begin = date_begin or fields.Date.to_string(fields.Date.context_today(self))\n    date_end = date_end or fields.Date.to_string(fields.Date.context_today(self))\n    sortby = sortby or 'date_invoice:desc'\n    filterby = filterby or 'all'\n\n    # Search domains\n    search_domain = [('state', 'in', ['open', 'in_payment', 'paid']), ('type', 'in', ['out_invoice', 'out_refund'])]\n    if filterby == 'draft':\n        search_domain += [('state', '=', 'draft')]\n    elif filterby == 'sent':\n        search_domain += [('state', '=', 'sent')]\n    elif filterby == 'cancel':\n        search_domain += [('state', '=', 'cancel')]\n    elif filterby == 'paid':\n        search_domain += [('state', '=', 'paid')]\n    elif filterby == 'overdue':\n        search_domain += [('state', '=', 'open'), ('date_due', '<', fields.Date.context_today(self))]\n    elif filterby == 'all':\n        pass\n    else:\n        # Default value\n        search_domain += [('state', 'in', ['open', 'in_payment', 'paid'])]\n\n    # Add date filter\n    search_domain += [\n        '|', ('date_invoice', '>', date_begin), '&', ('date', '>', date_begin), ('create_date', '>', date_begin),\n        '|', ('date_invoice', '<', date_end), '&', ('date', '<', date_end), ('create_date', '<', date_end),\n    ]\n\n    # Invoices\n    invoice_count = request.env['account.move'].sudo().search_count(search_domain)\n    invoices = request.env['account.move'].sudo().search(search_domain, order=sortby, limit=self._items_per_page, offset=self._items_per_page * (page - 1))\n\n    # Get the first invoice date and the last invoice date\n    first_invoice_date = invoices[:1].date_invoice\n    last_invoice_date = invoices[-1:].date_invoice\n\n    # Update history with", "CodeBleu_score": 34.75440879290353}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_portal_layout_values()\n    partner = request.env.user.partner_id\n    domain = [('partner_id', '=', partner.id)]\n    searchbar_sortings = {\n        'date': {'label': _('Newest'), 'order': 'date_invoice desc'},\n        'name': {'label': _('Name'), 'order': 'number desc'},\n        'amount_total': {'label': _('Total'), 'order': 'amount_total desc'},\n    }\n    # default sort by value\n    if not sortby:\n        sortby = 'date'\n    sort_order = searchbar_sortings[sortby]['order']\n    # default filter by value\n    if not filterby:\n        filterby = 'all'\n    searchbar_filters = {\n        'all': {'label': _('All'), 'domain': [('state', 'in', ['open', 'in_payment', 'paid'])], 'default': True},\n        'open': {'label': _('Open'), 'domain': [('state', '=', 'open')], 'default': False},\n        'paid': {'label': _('Paid'), 'domain': [('state', '=', 'paid')], 'default': False},\n    }\n    # archive groups - default is all\n    archive_groups = request.env['account.invoice'].read_group(domain, ['state'], ['state'])\n    archive_groups = {\n        'all': {'label': _('All'), 'filter': [('state', 'in', ['open', 'in_payment', 'paid'])]},\n        'open': {'label': _('Open'), 'filter': [('state', '=', 'open')]}\n    }\n    for group in archive_groups.values():\n        group['filter'] += domain\n        group['amount'] = request.env['account.invoice'].read_group(group['filter'], ['amount_total'], ['amount_total'])[0]['amount_total']\n    # pager\n    pager = portal_pager(\n        url=\"/my/invoices\",\n        url_args={'sortby': sortby, 'filterby': filterby},\n        total=request.env['account.invoice'].search_count(domain),\n        page=page,\n        step=self._items_per_page\n    )\n    # content\n    invoices = request.env['account.invoice'].search(domain, order=sort_order, limit=self._items_per_page, offset=pager", "CodeBleu_score": 33.3591512561619}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    if not date_begin:\n        date_begin = fields.Date.to_string(fields.Date.context_today(self))\n    if not date_end:\n        date_end = fields.Date.to_string(fields.Date.context_today(self))\n    # Ensure that the date_begin is before the date_end\n    date_begin, date_end = sorted([date_begin, date_end])\n\n    domain = [\n        ('type', '=', 'out_invoice'),\n        ('state', 'in', ['open', 'paid']),\n        ('date_invoice', '>=', date_begin),\n        ('date_invoice', '<=', date_end),\n        ('user_id', '=', self.env.uid),\n    ]\n\n    if filterby:\n        domain += [filterby]\n\n    searchbar_sortings = {\n        'date': {'label': _('Invoice Date'), 'order': 'date_invoice desc'},\n        'name': {'label': _('Reference'), 'order': 'name desc'},\n        'amount': {'label': _('Amount'), 'order': 'amount_total desc'},\n    }\n\n    # Default sort by value\n    if not sortby:\n        sortby = 'date'\n    order = searchbar_sortings[sortby]['order']\n\n    # pager\n    url = \"/my/invoices\"\n    url_args = {\n        'date_begin': date_begin,\n        'date_end': date_end,\n        'sortby': sortby,\n        'filterby': filterby,\n    }\n    count = self.env['account.move'].search_count(domain)\n    pager = portal_pager(\n        url=url,\n        url_args=url_args,\n        total=count,\n        page=page,\n        step=self._context.get('invoices_per_page', 20),\n        scope=7,\n    )\n    # content\n    invoices = self.env['account.move'].search(domain, order=order, limit=self._context.get('invoices_per_page', 20), offset=pager['offset'])\n    request.session['my_invoices_history'] = invoices.ids[:100]\n    request.session['my_invoices_history_date'] = fields.Date.context_today(self)\n    return {\n        'invoices': invoices,\n        'page_name': 'invoices',\n        '", "CodeBleu_score": 37.39087805021426}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    if not access_token:\n        access_token = request.params.get('access_token')\n    if not report_type:\n        report_type = request.params.get('report_type')\n    if not download:\n        download = request.params.get('download')\n    if not access_token:\n        return request.redirect('/my/invoices')\n    if report_type:\n        report_type = report_type.lower()\n    invoice = request.env['account.invoice'].sudo().search([('id', '=', int(invoice_id))])\n    if not invoice:\n        raise MissingError\n    if invoice.access_token != access_token:\n        raise AccessError\n    if report_type == 'html':\n        return request.render('account.portal_my_invoice_report', {\n            'report_type': report_type,\n            'invoice': invoice,\n            'company': request.env.user.company_id,\n            'report_layout': request.env.ref('account.account_invoices_reports_portal').report_layout,\n        })\n    elif report_type == 'pdf':\n        return request.render('account.portal_my_invoice_report', {\n            'report_type': report_type,\n            'invoice': invoice,\n            'company': request.env.user.company_id,\n            'report_layout': request.env.ref('account.account_invoices_reports_portal').report_layout,\n        })\n    elif report_type == 'text':\n        return request.render('account.portal_my_invoice_report', {\n            'report_type': report_type,\n            'invoice': invoice,\n            'company': request.env.user.company_id,\n            'report_layout': request.env.ref('account.account_invoices_reports_portal').report_layout,\n        })\n    elif report_type == 'xlsx':\n        return request.render('account.portal_my_invoice_report', {\n            'report_type': report_type,\n            'invoice': invoice,\n            'company': request.env.user.company_id,\n            'report_layout': request.env.ref('account.account_invoices_reports_portal').report_layout,\n        })\n    elif report_type == 'docx':\n        return request.render('account.portal_my_invoice_report', {\n            'report_type", "CodeBleu_score": 33.93998113351698}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    if not invoice_id:\n        raise MissingError\n\n    if access_token:\n        invoice_sudo = request.env['account.invoice'].sudo().search([\n            ('access_token', '=', access_token),\n            ('id', '=', invoice_id),\n            ('type', '=', 'out_invoice')\n        ], limit=1)\n    else:\n        invoice_sudo = request.env['account.invoice'].sudo().browse(invoice_id)\n\n    if not invoice_sudo.exists():\n        raise MissingError\n\n    if not invoice_sudo.check_access_rights('read', raise_exception=False):\n        raise AccessError\n\n    if not invoice_sudo.check_access_rule('read', raise_exception=False):\n        raise AccessError\n\n    if report_type:\n        if report_type == 'html':\n            return request.render('account.portal_my_invoice_report', {'object': invoice_sudo, 'report_type': report_type})\n        if report_type == 'pdf':\n            return request.render('account.portal_my_invoice_report', {'object': invoice_sudo, 'report_type': report_type})\n        if report_type == 'text':\n            return request.render('account.portal_my_invoice_report', {'object': invoice_sudo, 'report_type': report_type})\n        if report_type == 'xlsx':\n            return request.render('account.portal_my_invoice_report', {'object': invoice_sudo, 'report_type': report_type})\n\n    if download:\n        return _get_zip_headers(invoice_sudo, 'account.invoice', invoice_sudo.number, invoice_sudo.partner_id.name, 'account.invoice')\n\n    return request.render('account.portal_my_invoice', {'object': invoice_sudo})\n\n", "CodeBleu_score": 35.95466985544275}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    if not access_token:\n        access_token = request.params.get('access_token')\n    try:\n        invoice = self.env['account.invoice'].sudo().browse(int(invoice_id))\n        if invoice.access_token != access_token:\n            raise AccessError(_(\"You do not have access to this invoice.\"))\n    except (ValueError, AccessError):\n        return request.redirect('/my')\n\n    if report_type:\n        report_type = report_type.lower()\n        if report_type not in ('pdf', 'html', 'text'):\n            raise AccessError(_(\"Invalid report type.\"))\n\n    if download:\n        if not invoice.state == 'posted':\n            raise MissingError(_(\"You can only download a posted invoice.\"))\n        if len(invoice.attachment_ids) > 1:\n            attachments = [invoice.attachment_ids[0]] + invoice.attachment_ids[1:]\n            zip_data = self.env['ir.attachment'].sudo().read_datas(attachments)\n            zip_filename = \"%s.zip\" % invoice.number\n            headers = _get_zip_headers(zip_filename)\n            return request.make_response(zip_data, headers)\n        else:\n            return request.redirect(invoice.attachment_ids[0].url)\n\n    if report_type:\n        report_name = 'account.report_invoice'\n        if report_type == 'html':\n            report_name = 'account.report_invoice_html'\n        elif report_type == 'text':\n            report_name = 'account.report_invoice_text'\n        return request.render(report_name, {'object': invoice})\n\n    values = {\n        'invoice': invoice,\n        'company': invoice.company_id,\n        'partners': invoice.partner_id,\n        'lines': invoice.invoice_line_ids,\n        'taxes': invoice.tax_line_ids,\n        'payment_term': invoice.payment_term_id,\n        'currency': invoice.currency_id,\n        'sums': {\n            'total_amount_untaxed': invoice.amount_untaxed,\n            'total_amount_tax': invoice.amount_tax,\n            'total_amount_total': invoice.amount_total,\n        },\n        'page_name': 'invoice',\n        'is_portal': True,\n    }\n    return request.render(\"account.", "CodeBleu_score": 41.131689485476976}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t\n    res = super(ResConfigSettings, self)._get_demo_data_products(company)\n    if company:\n        if company.account_sale_tax_id:\n            for product in res:\n                product.taxes_id = [(6, 0, [company.account_sale_tax_id.id])]\n        if company.account_purchase_tax_id:\n            for product in res:\n                product.supplier_taxes_id = [(6, 0, [company.account_purchase_tax_id.id])]\n    return res\n\n", "CodeBleu_score": 22.9121899712116}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    products = self.env['product.template'].search([('sale_ok', '=', True), ('list_price', '!=', False)])\n    if company:\n        if company.account_sale_tax_id:\n            products.write({'taxes_id': [(4, company.account_sale_tax_id.id)]})\n        if company.account_purchase_tax_id:\n            products.write({'supplier_taxes_id': [(4, company.account_purchase_tax_id.id)]})\n    return products\n\n", "CodeBleu_score": 19.4836188558689}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    if not company:\n        company = self.env.user.company_id\n    templates = self.env['product.template'].search([('sale_ok', '=', True), ('purchase_ok', '=', True), ('company_id', '=', company.id)], limit=10)\n    if templates:\n        templates.write({'sale_tax_id': company.account_sale_tax_id.id, 'purchase_tax_id': company.account_purchase_tax_id.id})\n\n", "CodeBleu_score": 27.596269353895746}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    try:\n        return self.env.ref(xml_id, raise_if_not_found=True).with_company(company)\n    except ValueError:\n        return self.env['account.account'].search([('user_type_id', '=', account_type.id), ('company_id', '=', company.id)], limit=1) or self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n\n", "CodeBleu_score": 31.162683086594445}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account_id = self.env['account.account'].search(\n        [('company_id', '=', company.id), ('type', '=', account_type), ('code', '=', xml_id)], limit=1)\n    if not account_id:\n        account_id = self.env['account.account'].search(\n            [('company_id', '=', company.id), ('type', '=', account_type)], limit=1)\n    if not account_id:\n        account_id = self.env['account.account'].search(\n            [('company_id', '=', company.id)], limit=1)\n    return account_id\n\n", "CodeBleu_score": 48.23155660791307}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    demo_account = self.env['account.account'].search([('company_id', '=', company.id), ('code', '=', xml_id)], limit=1)\n    if not demo_account:\n        demo_account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id', '=', account_type.id)], limit=1)\n    if not demo_account:\n        demo_account = self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n    return demo_account\n\n", "CodeBleu_score": 46.16249378464444}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    self.ensure_one()\n    company_ids = self.env['res.company'].search([])\n    current_year_earnings_accounts = self.env['account.account'].search([('company_id', 'in', company_ids.ids), ('user_type_id', '=', self.env.ref('account.data_account_type_current_year_earnings').id)])\n    grouped_accounts = current_year_earnings_accounts.read_group([('company_id', 'in', company_ids.ids), ('user_type_id', '=', self.env.ref('account.data_account_type_current_year_earnings').id)], ['company_id'], ['company_id'])\n    grouped_accounts = {group['company_id'][0]: group['company_id_count'] for group in grouped_accounts}\n    for company_id, count in grouped_accounts.items():\n        if count > 1:\n            raise ValidationError(_('You cannot have more than one Current Year Earnings account for company %s. Please correct your data.') % company_id)\n\n", "CodeBleu_score": 26.846923276460526}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    self.ensure_one()\n    domain = [\n        (\"company_id\", \"=\", self.company_id.id),\n        (\"code\", \"=\", \"1000\"),\n        (\"user_type_id.type\", \"=\", \"earnings\"),\n        (\"active\", \"=\", True),\n    ]\n    accounts = self.env[\"account.account\"].search(domain)\n    if len(accounts) > 1:\n        raise ValidationError(\n            _(\n                \"You can only have one Current Year Earnings account per company. You have %s Current Year Earnings accounts.\"\n                % len(accounts)\n            )\n        )\n\n", "CodeBleu_score": 21.915520378658965}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    self.ensure_one()\n    domain = [('company_id', '=', self.company_id.id), ('type', '=', 'current_year_earnings')]\n    current_year_earnings_accounts = self.env['account.account'].search_read(domain, ['company_id'])\n    if len(current_year_earnings_accounts) > 1:\n        raise ValidationError(_('You cannot have more than one Current Year Earnings account per company.'))\n\n", "CodeBleu_score": 25.23723181802866}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if name and operator in expression.NEGATIVE_TERM_OPERATORS:\n        name = '!' + name\n\n    if not name and self._context.get('search_default_account_id'):\n        # search on the account given in the context, the default must not be an account type account\n        domain = expression.AND([domain or [], [('id', 'child_of', self._context.get('search_default_account_id'))], [('user_type_id', '!=', False)]])\n        order = 'name'\n    elif not name and self._context.get('search_default_journal_id'):\n        # search on the journal given in the context, the default must be an account type account\n        domain = expression.AND([domain or [], [('id', 'child_of', self._context.get('search_default_journal_id'))], [('user_type_id', '=', False)]])\n        order = 'name'\n    elif not name and self._context.get('search_default_group_by_type'):\n        # search on the type of the account given in the context, the default must be an account type account\n        domain = expression.AND([domain or [], [('user_type_id.type', '=', self._context.get('search_default_group_by_type'))], [('user_type_id', '=', False)]])\n        order = 'name'\n    elif not name and self._context.get('search_default_categ_id'):\n        # search on the account given in the context, the default must not be an account type account\n        domain = expression.AND([domain or [], [('categ_id', '=', self._context.get('search_default_categ_id'))], [('user_type_id', '!=', False)]])\n        order = 'name'\n    elif not name and self._context.get('search_default_partner_id'):\n        # search on the partner given in the context\n        domain = expression.AND([domain or [], [('partner_id', '=', self._context.get('search_default_partner_id'))], [('user_type_id', '!=', False)]])\n        order = 'name'\n    elif not name and self._context.get('search_default_company_id'):\n        # search on the company given in the context\n        domain = expression.AND([domain or [], [('company_id", "CodeBleu_score": 42.41653930659236}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if name and operator in ('=', 'ilike', '=ilike', 'like', '=like'):\n        # search on the name of the account and its code, or code_prefix\n        search_domain = []\n        if operator in ('ilike', 'like'):\n            name = '%%%s%%' % name\n        if self._context.get('search_field') == 'name':\n            search_domain = ['|', ('name', operator, name), ('code', operator, name)]\n        elif self._context.get('search_field') == 'code':\n            search_domain = [('code', operator, name)]\n        if self._context.get('search_field') == 'code_prefix':\n            search_domain = [('code_prefix', operator, name)]\n        if domain:\n            search_domain = expression.AND([domain, search_domain])\n        accounts = self.search(search_domain, limit=limit, order=order)\n        if not accounts and self._context.get('search_field') == 'name':\n            # search on the name of the partner\n            partner_name_operator = operator\n            if operator in ('ilike', 'like'):\n                partner_name_operator = '=ilike'\n            partners = self.env['res.partner'].name_search(name, operator=partner_name_operator, limit=limit)\n            partner_ids = [partner[0] for partner in partners]\n            accounts = self.search([('partner_id', 'in', partner_ids)], limit=limit, order=order)\n        return accounts\n    return super(AccountAccountType, self)._name_search(name, domain=domain, operator=operator, limit=limit, order=order)\n\n", "CodeBleu_score": 44.671367485587844}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if name and operator in expression.NEGATIVE_TERM_OPERATORS:\n        # Do not search on the negative operator, flip the operator\n        # and reapply the negative operator on the results.\n        new_operator = expression.NEGATIVE_TERM_OPERATOR_MAPPING[operator]\n        new_domain = expression.AND([domain or [], [(self._rec_name, new_operator, name)]])\n        return self._search(new_domain, limit=limit, order=order)\n    if not name and not operator and self._context.get('search_default_account_id') and self._context.get('default_type') in ('receivable', 'payable'):\n        account_id = self._context.get('search_default_account_id')\n        account = self.env['account.account'].browse(account_id)\n        if account.user_type_id.type in ('receivable', 'payable'):\n            return account.partner_id.commercial_partner_id.ids\n        else:\n            return []\n    if not operator and not domain:\n        # Default domain and operator\n        operator = 'ilike'\n        domain = []\n    elif not domain:\n        # Default domain\n        domain = []\n    if name:\n        # Add domain to filter results based on the name\n        domain = expression.AND([domain, [(self._rec_name, operator, name)]])\n    return self._search(domain, limit=limit, order=order)\n\n", "CodeBleu_score": 48.566984776307066}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t\n    super(self, self).copy_translations(new, excluded + ('name',))\n\n    if new.name and new.name != self.name:\n        name_lang = new.name_get()[0][1]\n        new.with_context(lang=name_lang).write({'name': new.name})\n\n", "CodeBleu_score": 20.712208251494655}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    excluded = set(excluded)\n    excluded.add('name')\n    super(self, self).copy_translations(new, excluded)\n    if re.match(r'^(.+?)\\s+\\d+$', new.name):\n        self.env['ir.translation'].sudo().search([\n            ('type', '=', 'model'),\n            ('name', '=', 'ir.ui.view,name'),\n            ('res_id', '=', self.env['ir.ui.view'].with_context(active_test=False).search([('key', '=', self.key)]).id),\n        ]).write({\n            'res_id': new.env['ir.ui.view'].with_context(active_test=False).search([('key', '=', new.key)]).id,\n        })\n\n", "CodeBleu_score": 26.087680351824226}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    if self.env.lang:\n        # get the name of the new record and the old one\n        new_name = new.name_get()[0][1]\n        old_name = self.name_get()[0][1]\n        # if the new record's name differs from the old one, update the translations for the name field in the cache\n        if new_name != old_name:\n            # get the name of the field that contains the new record's name\n            name_field = self._fields[self._rec_name]\n            # if the field is a function field, get the name of the related field\n            if name_field.type == 'function':\n                name_field = name_field.related_field\n            # get the translations for the name field in the cache\n            name_translations = self.env['ir.translation'].search([('name', '=', name_field.string), ('res_id', '=', self.id)])\n            # if the translations exist, update the translations for the new record's name\n            if name_translations:\n                for translation in name_translations:\n                    # get the translation's value\n                    value = translation.value\n                    # if the translation's value contains the old name, update the value to reflect the new name\n                    if value.find(old_name) != -1:\n                        value = value.replace(old_name, new_name)\n                        # if the value has changed, update the translation's value\n                        if value != translation.value:\n                            translation.value = value\n        # get the translations that should not be copied\n        excluded = excluded + ('name',)\n        # get the translations of the current record\n        translations = self.env['ir.translation'].search([('res_id', '=', self.id)])\n        # if there are translations, copy the translations to the new record\n        if translations:\n            # loop through the translations\n            for translation in translations:\n                # if the translation is not in the list of fields to exclude, copy the translation to the new record\n                if translation.name not in excluded:\n                    # create a copy of the translation\n                    new_translation = translation.copy()\n                    # change the translation's ID and res_id to the new record's ID\n                    new_translation.id = None\n                    new_translation.res_id = new.id\n                    # if the translation's language is the same as the language of the user's context, set the translation as the user", "CodeBleu_score": 31.111033179142357}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    action = self.env.ref('account.action_move_out_invoice_type').read()[0]\n    action['context'] = {\n        'default_type': 'out_invoice',\n        'default_journal_id': self.env.ref('account.account_journal_sale').id,\n        'default_partner_id': self.partner_id.id,\n        'default_company_id': self.company_id.id,\n        'default_analytic_account_id': self.analytic_account_id.id,\n        'default_reference': self.name,\n        'search_default_sale': 1,\n        'search_default_customer': 1,\n        'search_default_reference': self.name,\n        'search_default_date_invoice': self.date_order,\n    }\n    action['domain'] = [\n        ('id', 'in', self.mapped('invoice_ids').ids),\n        ('move_type', 'in', ('out_invoice', 'out_refund')),\n        ('partner_id', 'child_of', [self.partner_id.commercial_partner_id.id]),\n        ('company_id', '=', self.company_id.id),\n    ]\n    return action\n\n", "CodeBleu_score": 41.5603214640704}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    action = self.env[\"ir.actions.actions\"]._for_xml_id(\"account.action_move_in_invoice_type\")\n    action[\"context\"] = dict(self.env.context)\n    action[\"context\"].update(\n        {\n            \"default_move_type\": \"out_invoice\",\n            \"default_journal_id\": self.env.context.get(\"default_journal_id\", False),\n            \"default_sale_id\": self.id,\n            \"search_default_sale_id\": self.id,\n        }\n    )\n    action[\"domain\"] = [(\"sale_line_ids.sale_id\", \"=\", self.id)]\n    return action\n\n", "CodeBleu_score": 25.04210625283957}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['context'] = {\n        'default_type': 'out_invoice',\n        'default_journal_id': self.env['account.move'].default_get(['journal_id'])['journal_id'],\n        'default_partner_id': self.id,\n        'default_company_id': self.env.company.id,\n    }\n    action['domain'] = [('id', 'in', self.env['account.move.line'].search([\n        ('account_id.user_type_id.type', '=', 'receivable'),\n        ('partner_id', '=', self.id),\n        ('reconciled', '=', False),\n        ('state', '!=', 'draft')\n    ]).mapped('move_id').ids)]\n    return action\n\n", "CodeBleu_score": 40.807167632985106}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    action = self.env[\"ir.actions.actions\"]._for_xml_id(\"account.action_move_in_invoice_type\")\n    action[\"context\"] = {\n        \"search_default_journal_id\": self.env.company.purchase_journal_id.id,\n        \"default_move_type\": \"in_invoice\",\n        \"search_default_purchase_id\": self.id,\n        \"search_default_group_invoice\": 1,\n    }\n    action[\"domain\"] = [(\"id\", \"in\", self.mapped(\"account_move_ids.id\"))]\n    return action\n\n", "CodeBleu_score": 26.475423163485}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['context'] = {\n        'search_default_supplier': self.id,\n        'default_move_type': 'in_invoice',\n    }\n    action['domain'] = [('id', 'in', self.env['account.move.line'].search([('purchase_line_id', '!=', False), ('move_id.state', 'not in', ('draft', 'cancel'))]).move_id.ids)]\n    return action\n\n", "CodeBleu_score": 28.182650968377963}, {"code": "def action_view_vendor_bill(self)\n\t\n    # Ensure a single record context\n    if self._context.get('active_model') == 'account.move.line' and len(self._context.get('active_ids', [])) > 1:\n        self = self.with_context(active_ids=[self._context.get('active_ids', [])[0]])\n    # Search for account move lines related to purchase types and the current record's ID\n    move_lines = self.env['account.move.line'].search([\n        ('purchase_line_id', 'in', self.ids),\n        ('account_internal_type', 'in', ['receivable', 'payable']),\n        ('move_id.state', 'in', ['posted', 'draft'])\n    ])\n    # Retrieve distinct move IDs\n    move_ids = move_lines.mapped('move_id').ids\n    # Construct and return an action to display vendor bills in a tree and form view, with a specific context to prevent creation and set the default move type to 'in_invoice'\n    return {\n        'name': _('Vendor Bills'),\n        'type': 'ir.actions.act_window',\n        'view_mode': 'tree,form',\n        'res_model': 'account.move',\n        'domain': [('id', 'in', move_ids)],\n        'context': {\n            'create': False,\n            'default_move_type': 'in_invoice',\n            'search_default_draft': 1,\n            'search_default_purchase': 1,\n            'search_default_group_invoice': 1,\n        }\n    }\n\n", "CodeBleu_score": 42.29213976431954}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        with self.check_attachment_integrity():\n            values.pop('attachment_ids')\n    return super(models.Model, self).write(values)\n\n", "CodeBleu_score": 30.828254502442558}, {"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        with self.check_attachments(values['attachment_ids']):\n            values.pop('attachment_ids')\n            return super(models.Model, self).write(values)\n    return super(models.Model, self).write(values)\n\n", "CodeBleu_score": 39.81915956106194}, {"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        with self.check_attachment_ids():\n            return super(self.__class__, self).write(values)\n    return super(self.__class__, self).write(values)\n\n", "CodeBleu_score": 35.44599068517963}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\t\n    if self.env.context.get('skip_bank_account_creation'):\n        return self.env['res.partner.bank'].new({'acc_number': False})\n    else:\n        return self.env['res.partner.bank'].search([('acc_number', '=', self.acc_number), ('partner_id', '=', self.partner_id.id), ('company_id', '=', self.company_id.id)], limit=1)\n\n", "CodeBleu_score": 21.51945112094334}, {"code": "def _find_or_create_bank_account(self)\n\t\n    if self.env.context.get(\"skip_account_creation\"):\n        return self.env[\"res.partner.bank\"]\n    else:\n        return self.env[\"res.partner.bank\"]._find_or_create(self.id, self.acc_number)\n\n", "CodeBleu_score": 13.568649107659885}, {"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_one()\n    if not self.env.user.has_group('base.group_multi_company'):\n        self = self.with_context(force_company=self.company_id.id)\n    if self.env['res.config.settings'].get_param('bank_skip_account_creation'):\n        return self.env['res.partner.bank']\n    else:\n        bank_account = self.env['res.partner.bank'].search([\n            ('acc_number', '=', sanitize_account_number(self.acc_number)),\n            ('partner_id', '=', self.partner_id.id),\n            ('company_id', '=', self.company_id.id),\n        ])\n        if not bank_account:\n            bank_account = self.env['res.partner.bank'].create({\n                'acc_number': sanitize_account_number(self.acc_number),\n                'partner_id': self.partner_id.id,\n                'company_id': self.company_id.id,\n            })\n        return bank_account\n\n", "CodeBleu_score": 54.709099883788916}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    # The function is called from the _prepare_counterpart_amounts function in account_move_line.\n    # The function ensures a single record context and retrieves relevant accounting amounts and currencies.\n    # The function computes the transaction amount, journal amount, and company amount using various exchange rates.\n    # The function depends on the currency type, and adjusts the transaction amount and balance accordingly.\n    # The function returns these values in a dictionary.\n\n    # The function is called from the _prepare_counterpart_amounts function in account_move_line.\n    # The function ensures a single record context and retrieves relevant accounting amounts and currencies.\n    # The function computes the transaction amount, journal amount, and company amount using various exchange rates.\n    # The function depends on the currency type, and adjusts the transaction amount and balance accordingly.\n    # The function returns these values in a dictionary.\n\n    # The function is called from the _prepare_counterpart_amounts function in account_move_line.\n    # The function ensures a single record context and retrieves relevant accounting amounts and currencies.\n    # The function computes the transaction amount, journal amount, and company amount using various exchange rates.\n    # The function depends on the currency type, and adjusts the transaction amount and balance accordingly.\n    # The function returns these values in a dictionary.\n\n    # The function is called from the _prepare_counterpart_amounts function in account_move_line.\n    # The function ensures a single record context and retrieves relevant accounting amounts and currencies.\n    # The function computes the transaction amount, journal amount, and company amount using various exchange rates.\n    # The function depends on the currency type, and adjusts the transaction amount and balance accordingly.\n    # The function returns these values in a dictionary.\n\n    # The function is called from the _prepare_counterpart_amounts function in account_move_line.\n    # The function ensures a single record context and retrieves relevant accounting amounts and currencies.\n    # The function computes the transaction amount, journal amount, and company amount using various exchange rates.\n    # The function depends on the currency type, and adjusts the transaction amount and balance accordingly.\n    # The function returns these values in a dictionary.\n\n    # The function is called from the _prepare_counterpart_amounts function in account_move_line.\n    # The function ensures a single record context and retrieves relevant accounting amounts and currencies.\n    # The function computes", "CodeBleu_score": 1.5725316675342702}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    # TODO: This function is a copy of the function in account_voucher.py. Need to find a way to avoid this duplication.\n    # TODO: This function should be a method in account.move.line.\n\n    # Ensure a single record context\n    self = self.with_context(check_move_validity=False)\n\n    # Retrieve relevant accounting amounts and currencies\n    amount_residual = self.amount_residual\n    amount_residual_currency = self.amount_residual_currency\n    amount_currency = amount_currency or self.currency_id\n    amount_currency_company = self.company_currency_id\n    amount_currency_rate = self.currency_id._convert(1.0, amount_currency, self.company_id, self.date)\n    amount_currency_rate_company = self.company_id.currency_id._convert(1.0, amount_currency, self.company_id, self.date)\n    amount_company = self.company_id.currency_id._convert(amount_currency, self.currency_id, self.company_id, self.date)\n    amount_company_currency = self.currency_id._convert(amount_currency, self.company_id.currency_id, self.company_id, self.date)\n    amount_company_currency_rate = self.company_id.currency_id._convert(1.0, amount_currency, self.company_id, self.date)\n    amount_company_currency_rate_company = self.company_id.currency_id._convert(1.0, amount_currency, self.company_id, self.date)\n\n    # Compute the transaction amount, journal amount, and company amount\n    if self.currency_id == currency:\n        amount = amount_residual\n        amount_currency = amount_residual_currency\n        amount_company = amount_residual_currency\n        amount_company_currency = amount_residual_currency\n    elif self.currency_id == amount_currency:\n        amount = amount_residual / amount_currency_rate\n        amount_currency = amount_residual_currency\n        amount_company = amount_residual_currency / amount_currency_rate\n        amount_company_currency = amount_residual_currency / amount_currency_rate_company\n    elif self.currency_id == amount_currency_company:\n        amount = amount_residual / amount", "CodeBleu_score": 24.192381901295327}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n\n    if self.currency_id == currency:\n        return {\n            'amount_currency': amount_currency,\n            'balance': balance,\n            'amount': self.amount,\n            'journal_amount': self.amount,\n            'company_amount': self.amount,\n        }\n\n    # Get the currency rate from the transaction's date to the currency's date.\n    # If no rate is found, use the rate from the transaction's date to the company's date.\n    currency_rate = self.currency_id._get_conversion_rate(currency, self.company_id, self.date)\n    if not currency_rate:\n        currency_rate = self.currency_id._get_conversion_rate(currency, self.company_id, self.date)\n\n    # Compute the transaction amount in the transaction's currency.\n    amount = self.amount * currency_rate\n\n    # Compute the balance in the transaction's currency.\n    balance = balance * currency_rate\n\n    # Compute the amount in the currency of the transaction.\n    amount_currency = amount_currency * currency_rate\n\n    return {\n        'amount_currency': amount_currency,\n        'balance': balance,\n        'amount': amount,\n        'journal_amount': amount,\n        'company_amount': amount,\n    }\n\n", "CodeBleu_score": 17.496682175278877}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids = [(5, 0)]\n        if journal.type in ('bank', 'cash'):\n            journal.outbound_payment_method_line_ids = journal.env['account.payment.method.line'].search([('payment_type', '=', 'outbound'), ('payment_method_id', 'in', journal.outbound_payment_method_ids.ids)])\n\n", "CodeBleu_score": 37.50869160347277}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids = [(5,)]\n        if journal.type in ('bank', 'cash'):\n            journal.outbound_payment_method_line_ids = journal.env['account.payment.method.line'].search([('payment_type', '=', 'outbound'), ('journal_id', '=', journal.id)])\n\n", "CodeBleu_score": 35.72385811525747}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids = [(5, 0, 0)]\n        if journal.type in ('bank', 'cash'):\n            for method in journal.outbound_payment_methods:\n                journal.outbound_payment_method_line_ids += [(0, 0, {\n                    'payment_method_id': method.id,\n                    'sequence': method.sequence,\n                })]\n        journal.outbound_payment_method_line_ids.sort(key=lambda line: line.sequence)\n\n", "CodeBleu_score": 42.758982612827964}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t\n    for move in self:\n        if move.date:\n            continue\n        if move.invoice_date:\n            if move.is_sale_document():\n                move.date = move.invoice_date\n            else:\n                # If the move is a purchase, the accounting date is the invoice date plus the tax report impact\n                move.date = move.invoice_date + relativedelta(days=move.company_id.account_tax_report_date_in_invoice_diff)\n        else:\n            move.date = fields.Date.context_today(move)\n", "CodeBleu_score": 31.41296786366435}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if move.date:\n            continue\n        if move.invoice_date:\n            if move.move_type != \"out_invoice\" and move.move_type != \"out_refund\":\n                move.date = move.invoice_date\n            else:\n                if move.company_id.tax_calculation_rounding_method == \"round_globally\":\n                    # We round to the nearest cent to avoid rounding issues with fiscal positions\n                    move.date = fields.Date.from_string(move.invoice_date) + relativedelta(day=31)\n                else:\n                    # We round to the nearest cent to avoid rounding issues with fiscal positions\n                    move.date = fields.Date.from_string(move.invoice_date) + relativedelta(day=30)\n                # We recompute the date if the move's date is different from the accounting date\n                if move.date != move.account_id.date_last_entry_id:\n                    move.date = move.date\n                    move.account_id.write({\"date_last_entry_id\": move.date})\n        else:\n            move.date = fields.Date.today()\n\n", "CodeBleu_score": 33.49536822637852}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if move.date:\n            continue\n        if not move.invoice_date:\n            move.date = fields.Date.context_today(move)\n            continue\n        if move.is_sale_document():\n            move.date = move.invoice_date\n        else:\n            move.date = move.get_account_date()\n        if move.date != fields.Date.context_today(move):\n            move.date = fields.Date.context_today(move)\n            move.with_context(recompute_move_date=True).recompute()\n\n", "CodeBleu_score": 37.44334252599674}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document() and move.partner_id.property_payment_term:\n            move.invoice_payment_term_id = move.partner_id.property_payment_term.id\n        elif move.is_purchase_document() and move.partner_id.supplier_payment_term_id:\n            move.invoice_payment_term_id = move.partner_id.supplier_payment_term_id.id\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 44.570113665601355}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self.filtered(lambda m: not m.is_sale_document() and not m.is_purchase_document()):\n        move.invoice_payment_term_id = False\n    for move in self.filtered(lambda m: m.is_sale_document() and m.partner_id.property_payment_term_id):\n        move.invoice_payment_term_id = m.partner_id.property_payment_term_id\n    for move in self.filtered(lambda m: m.is_purchase_document() and m.partner_id.supplier_payment_term_id):\n        move.invoice_payment_term_id = m.partner_id.supplier_payment_term_id\n\n", "CodeBleu_score": 44.384375675139395}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document() and move.partner_id.property_payment_term_id:\n            move.invoice_payment_term_id = move.partner_id.property_payment_term_id\n        elif move.is_purchase_document() and move.partner_id.supplier_payment_term_id:\n            move.invoice_payment_term_id = move.partner_id.supplier_payment_term_id\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 52.43341232051678}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t\n    self.ensure_one()\n    tax_group_obj = self.env['account.tax.group']\n    tax_group_ids = tax_group_obj.search([('country_id', '=', self.country_id.id), ('company_id', '=', self.company_id.id)])\n    if not tax_group_ids:\n        tax_group_ids = tax_group_obj.search([('country_id', '=', False), ('company_id', '=', self.company_id.id)])\n    self.tax_group_id = tax_group_ids[0].id if tax_group_ids else False\n\n", "CodeBleu_score": 17.494874774301618}, {"code": " def _compute_tax_group_id(self)\n\t\n    # Get all taxes\n    taxes = self.env['account.tax'].search([])\n    # Group taxes by country and company\n    tax_groups = defaultdict(lambda: defaultdict(list))\n    for tax in taxes:\n        tax_groups[tax.company_id][tax.country_id].append(tax)\n    # For each group, try to find a matching tax group with the same country and company. If no exact match is found, try to find a tax group without a specified country but within the same company.\n    for company, country_groups in tax_groups.items():\n        for country, taxes in country_groups.items():\n            # Search for a matching tax group with the same country and company\n            tax_group = self.env['account.tax.group'].search([\n                ('company_id', '=', company.id),\n                ('country_id', '=', country.id),\n            ], limit=1)\n            if tax_group:\n                for tax in taxes:\n                    tax.tax_group_id = tax_group\n            # Search for a tax group without a specified country but within the same company\n            else:\n                tax_group = self.env['account.tax.group'].search([\n                    ('company_id', '=', company.id),\n                    ('country_id', '=', False),\n                ], limit=1)\n                if tax_group:\n                    for tax in taxes:\n                        tax.tax_group_id = tax_group\n", "CodeBleu_score": 38.751709691546985}, {"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        tax.tax_group_id = False\n        tax_group_domain = [\n            ('company_id', '=', tax.company_id.id),\n            ('country_id', '=', tax.country_id.id),\n            ('type_tax_use', '=', tax.type_tax_use),\n        ]\n        if tax.type_tax_use == 'sale':\n            tax_group_domain += [('applicability', '=', 'on_invoice')]\n        elif tax.type_tax_use == 'purchase':\n            tax_group_domain += [('applicability', '=', 'on_bill')]\n        elif tax.type_tax_use == 'none':\n            tax_group_domain += [('applicability', '=', 'on_invoice')]\n        else:\n            tax_group_domain += [('applicability', '=', 'on_invoice')]\n        tax_group = self.env['account.tax.group'].search(tax_group_domain, limit=1)\n        if not tax_group:\n            tax_group_domain = [\n                ('company_id', '=', tax.company_id.id),\n                ('type_tax_use', '=', tax.type_tax_use),\n            ]\n            if tax.type_tax_use == 'sale':\n                tax_group_domain += [('applicability', '=', 'on_invoice')]\n            elif tax.type_tax_use == 'purchase':\n                tax_group_domain += [('applicability', '=', 'on_bill')]\n            elif tax.type_tax_use == 'none':\n                tax_group_domain += [('applicability', '=', 'on_invoice')]\n            else:\n                tax_group_domain += [('applicability', '=', 'on_invoice')]\n            tax_group = self.env['account.tax.group'].search(tax_group_domain, limit=1)\n        tax.tax_group_id = tax_group.id\n\n", "CodeBleu_score": 27.835772433066065}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    if self.verbose:\n        print(f\"Uploading module {module_file} to {url}...\")\n    # Set the database in the session\n    try:\n        self.set_database(db)\n    except requests.exceptions.HTTPError as e:\n        raise Exception(f\"Failed to set database {db}:", "CodeBleu_score": 12.633635137340685}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n\n    # Set database in session\n    session = requests.Session()\n    session.get(url + '/login')\n    session.post(url + '/login', data={'login': login, 'password': password, 'database': db})\n\n    # Prepare POST request data\n    data = {'force': force}\n    files = {'module_file': open(module_file, 'rb')}\n\n    # Upload module file\n    response = session.post(url + '/base_import_module/login_upload', data=data, files=files)\n\n    # Raise exception if server does not have the required module installed or is outdated\n    if response.status_code == 400:\n        raise Exception(response.text)\n\n    return response.text\n\n", "CodeBleu_score": 36.01855926704545}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n\n    # Set the database in the session\n    r = self.session.get(url + \"/login\", params={\"login\": login, \"password\": password})\n    if r.status_code != 200:\n        raise Exception(\n            \"Login failed. Check your login credentials and try again.\"\n        )\n    r = self.session.get(url + \"/database\", params={\"database\": db})\n    if r.status_code != 200:\n        raise Exception(\n            \"Database does not exist or you do not have access to it. Check your login credentials and try again.\"\n        )\n\n    # Prepare the POST request data\n    data = {\n        \"login\": login,\n        \"password\": password,\n        \"database\": db,\n    }\n    if force:\n        data[\"force\"] = \"1\"\n\n    # Upload the module file\n    files = {\"module_file\": open(module_file, \"rb\")}\n    r = self.session.post(\n        url + \"/base_import_module/login_upload\", data=data, files=files\n    )\n    if r.status_code != 200:\n        raise Exception(\n            \"Upload failed. Check your login credentials and try again.\"\n        )\n    return r.text\n\n", "CodeBleu_score": 41.63735702835107}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t\n    # Set up logging\n    logging.basicConfig(filename='import_translation.log', level=logging.DEBUG)\n\n    # Set up database connection\n    db_name = os.environ.get('DB_NAME')\n    db_user = os.environ.get('DB_USER')\n    db_password = os.environ.get('DB_PASSWORD')\n    db_host = os.environ.get('DB_HOST')\n    db_port = os.environ.get('DB_PORT')\n    db_sslmode = os.environ.get('DB_SSLMODE')\n    db_sslrootcert = os.environ.get('DB_SSLROOTCERT')\n    db_sslcert = os.environ.get('DB_SSLCERT')\n    db_sslkey = os.environ.get('DB_SSLKEY')\n    db_sslcrl = os.environ.get('DB_SSLCRL')\n    db_timeout = os.environ.get('DB_TIMEOUT')\n    db_connect_timeout = os.environ.get('DB_CONNECT_TIMEOUT')\n    db_application_name = os.environ.get('DB_APPLICATION_NAME')\n    db_options = os.environ.get('DB_OPTIONS')\n    db_autocommit = os.environ.get('DB_AUTOCOMMIT')\n    db_readonly = os.environ.get('DB_READONLY')\n    db_timezone = os.environ.get('DB_TIMEZONE')\n    db_parameters = os.environ.get('DB_PARAMETERS')\n    db_server_version = os.environ.get('DB_SERVER_VERSION')\n    db_server_encoding = os.environ.get('DB_SERVER_ENCODING')\n    db_template = os.environ.get('DB_TEMPLATE')\n    db_isolation_level = os.environ.get('DB_ISOLATION_LEVEL')\n    db_auto_reconnect = os.environ.get('DB_AUTO_RECONNECT')\n    db_dsn = os.environ.get('DB_DSN')\n\n    # Set up Odoo connection\n    odoo_host = os.environ.get('ODOO_HOST')\n    odoo_port = os.environ.get('ODOO_PORT')\n    odoo_db_name = os.environ.get('ODOO_DB_NAME')\n    odoo_db_user", "CodeBleu_score": 22.710076435997888}, {"code": "def import_translation()\n\t\n    logging.info('Importing translations')\n    # Get configuration settings\n    config = get_config()\n    # Get database settings\n    db_name = config['db_name']\n    overwrite = config['overwrite']\n    # Create database registry\n    db_registry = odoo.modules.registry.Registry(db_name)\n    # Initialize a TranslationImporter\n    importer = TranslationImporter(db_registry, overwrite)\n    # Import translations\n    importer.import_translations()\n    # Close database connection\n    db_registry.cursor().close()\n    logging.info('Translations imported')\n\n", "CodeBleu_score": 44.750619577810426}, {"code": "def import_translation()\n\t\n\n    # Retrieve configuration settings\n    db_name = os.environ.get(\"DB_NAME\")\n    overwrite = os.environ.get(\"OVERWRITE\", \"false\") == \"true\"\n\n    # Initialize a new database registry\n    registry = odoo.modules.registry.Registry(db_name)\n\n    # Initialize a cursor to the database\n    with registry.cursor() as cr:\n        # Initialize a TranslationImporter\n        importer = TranslationImporter(cr, overwrite)\n\n        # Load translations\n        importer.load_translations()\n\n", "CodeBleu_score": 42.25311167574284}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\t\n    if name not in self.children:\n        new_node = Node(name, info)\n        new_node.depth = self.depth + 1\n        new_node.parent = self\n        new_node.children = []\n        new_node.inherit_from_parent()\n        self.children.append(new_node)\n        self.sort_children()\n        return new_node\n    else:\n        return self.children[self.children.index(name)]\n\n", "CodeBleu_score": 36.63322829546309}, {"code": "def add_child(self, name, info)\n\t\n    node = Node(name, info)\n    node.depth = self.depth + 1\n    if node not in self.children:\n        self.children.append(node)\n    node.parent = self\n    node.sort_children()\n    return node\n\n", "CodeBleu_score": 37.15421088627398}, {"code": "def add_child(self, name, info)\n\t\n    if name in self.children:\n        return self.children[name]\n    node = Node(name, info, self.depth + 1)\n    node.parent = self\n    node.inherit_attributes()\n    self.children[name] = node\n    self.children = dict(sorted(self.children.items(), key=lambda x: x[0]))\n    return node\n\n", "CodeBleu_score": 33.402615773198534}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t\n\n    result = {\n        \"account\": account,\n        \"dates\": dates,\n        \"total\": [0.0] * len(dates),\n        \"account_name\": account.account_name,\n    }\n\n    # initialize the result with the dates and zeros for balances\n    for entry in gl_entries:\n        if entry.posting_date in dates:\n            result[entry.posting_date] = result.get(entry.posting_date, [0.0] * len(dates))\n            result[entry.posting_date][dates.index(entry.posting_date)] = entry.debit\n            result[\"total\"][dates.index(entry.posting_date)] = entry.debit\n\n    # determine the root type of the account\n    root_type = frappe.db.get_value(\"Account\", account.name, \"root_type\")\n\n    # iterate through the entries, updating the balance for each date\n    for entry in gl_entries:\n        if entry.posting_date in dates:\n            result[entry.posting_date][dates.index(entry.posting_date)] += entry.credit\n            result[\"total\"][dates.index(entry.posting_date)] += entry.credit\n\n    # if the root type is not \"Asset\" or \"Expense,\" it negates the balances\n    if root_type not in [\"Asset\", \"Expense\"]:\n        for key in result:\n            if key != \"dates\" and key != \"total\" and key != \"account\":\n                result[key] = [-1 * x for x in result[key]]\n\n    # for \"Asset,\" \"Liability,\" and \"Equity\" accounts, it accumulates the balance over time\n    if root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n        for key in result:\n            if key != \"dates\" and key != \"total\" and key != \"account\":\n                result[key] = [sum(result[key][:i + 1]) for i in range(len(result[key]))]\n\n    return result\n\n", "CodeBleu_score": 25.933826965974543}, {"code": "def build_result(account, dates, gl_entries)\n\t\n\n    result = frappe._dict()\n    result.update(\n        {\n            \"account\": account.name,\n            \"account_name\": account.account_name,\n            \"account_type\": account.account_type,\n            \"root_type\": account.root_type,\n            \"is_group\": account.is_group,\n        }\n    )\n\n    for date in dates:\n        result[date] = 0\n\n    for entry in gl_entries:\n        if entry.account == account.name:\n            if entry.is_opening:\n                result[entry.posting_date] = result.get(entry.posting_date, 0) + entry.debit\n            else:\n                result[entry.posting_date] = result.get(entry.posting_date, 0) + entry.credit\n\n    if result.root_type not in [\"Asset\", \"Expense\"]:\n        for date in dates:\n            result[date] = -1 * result.get(date, 0)\n\n    if result.root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n        for date in dates:\n            result[date] = result.get(date, 0) + result.get(add_to_date(date, years=-1), 0)\n\n    return result\n\n", "CodeBleu_score": 23.614387439309013}, {"code": "def build_result(account, dates, gl_entries)\n\t\n\n    # Initialize the result with the dates and zeros for balances\n    result = {\n        \"account_name\": account.account_name,\n        \"account\": get_link_to_form(\"Account\", account.name),\n        \"account_type\": account.account_type,\n        \"root_type\": account.root_type,\n        \"is_group\": account.is_group,\n        \"currency\": account.account_currency,\n        \"total_debit\": 0,\n        \"total_credit\": 0,\n        \"net_balance\": 0,\n        \"balances\": [\n            {\"date\": formatdate(d), \"debit\": 0, \"credit\": 0, \"balance\": 0} for d in dates\n        ],\n    }\n\n    # Determine the root type of the account\n    if result[\"root_type\"] not in [\"Asset\", \"Expense\"]:\n        result[\"net_balance\"] = -1\n\n    # Iterate through the entries and update the balance for each date\n    for entry in gl_entries:\n        if entry.account == account.name:\n            for balance in result[\"balances\"]:\n                if entry.posting_date <= balance[\"date\"]:\n                    balance[\"debit\"] += flt(entry.debit)\n                    balance[\"credit\"] += flt(entry.credit)\n                    balance[\"balance\"] += flt(entry.debit) - flt(entry.credit)\n                    result[\"total_debit\"] += flt(entry.debit)\n                    result[\"total_credit\"] += flt(entry.credit)\n                    result[\"net_balance\"] += flt(entry.debit) - flt(entry.credit)\n                    break\n\n    # If the root type is not \"Asset\" or \"Expense,\" it negates the balances\n    if result[\"root_type\"] not in [\"Asset\", \"Expense\"]:\n        for balance in result[\"balances\"]:\n            balance[\"debit\"] = -1 * balance[\"debit\"]\n            balance[\"credit\"] = -1 * balance[\"credit\"]\n            balance[\"balance\"] = -1 * balance[\"balance\"]\n\n    # For \"Asset,\" \"Liability,\" and \"Equity\" accounts, it accumulates the balance over time\n    if result[\"root_type\"] in [\"Asset\", \"Liability\", \"Equity\"]:\n        for i, balance in enumerate(result[\"balances\"]):\n            if i > 0:\n                balance[\"balance\"] += result[\"balances\"][i - 1][\"balance", "CodeBleu_score": 21.945747935475246}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.doctype == \"Account\" and self.is_group:\n        if self.account_type == \"Receivable\" or self.account_type == \"Payable\":\n            return\n        else:\n            for d in frappe.db.sql(\"\"\"select name from `tabGL Entry` where account=%s\"\"\", self.name):\n                frappe.msgprint(_(\"There are existing general ledger entries for this account. Please check the Accounts report for more details.\"), raise_exception=1)\n                frappe.msgprint(_(\"There are existing general ledger entries for this account. Please check the Accounts report for more details.\"), raise_exception=1)\n                frappe.msgprint(_(\"There are existing general ledger entries for this account. Please check the Accounts report for more details.\"), raise_exception=1)\n                frappe.msgprint(_(\"There are existing general ledger entries for this account. Please check the Accounts report for more details.\"), raise_exception=1)\n                frappe.msgprint(_(\"There are existing general ledger entries for this account. Please check the Accounts report for more details.\"), raise_exception=1)\n                frappe.msgprint(_(\"There are existing general ledger entries for this account. Please check the Accounts report for more details.\"), raise_exception=1)\n                frappe.msgprint(_(\"There are existing general ledger entries for this account. Please check the Accounts report for more details.\"), raise_exception=1)\n                frappe.msgprint(_(\"There are existing general ledger entries for this account. Please check the Accounts report for more details.\"), raise_exception=1)\n                frappe.msgprint(_(\"There are existing general ledger entries for this account. Please check the Accounts report for more details.\"), raise_exception=1)\n                frappe.msgprint(_(\"There are existing general ledger entries for this account. Please check the Accounts report for more details.\"), raise_exception=1)\n                frappe.msgprint(_(\"There are existing general ledger entries for this account. Please check the Accounts report for more details.\"), raise_exception=1)\n                frappe.msgprint(_(\"There are existing general ledger entries for this account. Please check the Accounts report for more details.\"), raise_exception=1)\n                frappe.msgprint(_(\"There are existing general ledger entries for this account. Please check the Accounts report for more details.\"), raise_exception=1)\n                frappe.msgprint(_(\"There are existing general ledger entries for this account. Please check the Accounts report for", "CodeBleu_score": 22.986988578075948}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n\n    if self.doctype == \"Account\" and self.docstatus == 0:\n        if self.account_type in (\"Receivable\", \"Payable\") and self.get(\"__islocal\"):\n            # check if the account is being set to a non-receivable/payable type\n            if self.account_type != frappe.db.get_value(\"Account\", self.name, \"account_type\"):\n                # check if there are any existing general ledger entries for the account\n                if frappe.db.sql(\"\"\"select name from `tabGL Entry` where account=%s\"\"\", self.name):\n                    frappe.msgprint(_(\"Warning: Changing the account type from {0} to {1} will affect existing general ledger entries. Please check the Accounts report for details.\").format(self.account_type, frappe.db.get_value(\"Account\", self.name, \"account_type\")))\n                    frappe.db.sql(\"\"\"update `tabAccount` set account_type=%s where name=%s\"\"\", (frappe.db.get_value(\"Account\", self.name, \"account_type\"), self.name))\n                    frappe.db.commit()\n                    frappe.get_doc(\"Account\", self.name).add_comment(\"Comment\", _(\"Account type changed to {0}\").format(frappe.db.get_value(\"Account\", self.name, \"account_type\")))\n\n", "CodeBleu_score": 27.814299340982522}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n\n    if self.doctype == \"Account\":\n        if self.account_type == \"Receivable\" or self.account_type == \"Payable\":\n            if self.is_group:\n                # if group account, check if any of the child accounts are receivable or payable\n                child_accounts = frappe.db.sql(\"\"\"select name from `tabAccount` where parent_account = %s and (account_type = 'Receivable' or account_type = 'Payable')\"\"\", self.name)\n                if child_accounts:\n                    frappe.msgprint(_(\"Cannot change account type to Receivable or Payable if child accounts are Receivable or Payable\"), raise_exception=1)\n            else:\n                # if non-group account, check if any of the transactions are against receivable or payable\n                gl_entries = frappe.db.sql(\"\"\"select name from `tabGL Entry` where account = %s and (against_voucher_type = 'Sales Invoice' or against_voucher_type = 'Purchase Invoice')\"\"\", self.name)\n                if gl_entries:\n                    frappe.msgprint(_(\"Cannot change account type to Receivable or Payable if GL Entries are against Receivable or Payable\"), raise_exception=1)\n\n        elif self.account_type != \"Receivable\" and self.account_type != \"Payable\":\n            if self.is_group:\n                # if group account, check if any of the child accounts are not receivable or payable\n                child_accounts = frappe.db.sql(\"\"\"select name from `tabAccount` where parent_account = %s and (account_type != 'Receivable' and account_type != 'Payable')\"\"\", self.name)\n                if child_accounts:\n                    frappe.msgprint(_(\"Cannot change account type to non-Receivable or non-Payable if child accounts are non-Receivable or non-Payable\"), raise_exception=1)\n            else:\n                # if non-group account, check if any of the transactions are against non-receivable or non-payable\n                gl_entries = frappe.db.sql(\"\"\"select name from `tabGL Entry` where account = %s and (against_voucher_type != 'Sales Invoice' and against_voucher_type != 'Purchase Invoice')\"\"\", self.name)\n                if gl_", "CodeBleu_score": 26.60354023917943}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t\n    if self.is_group:\n        return\n\n    if not self.account_currency:\n        self.account_currency = self.company_currency\n\n    if self.account_currency != self.company_currency and not self.get(\"__islocal\"):\n        gl_entries = frappe.db.sql(\"\"\"select name, account_currency, debit, credit, is_cancelled from `tabGL Entry` where account = %s and company = %s and is_cancelled = 'No'\"\"\", (self.name, self.company), as_dict=1)\n        if gl_entries:\n            for entry in gl_entries:\n                if entry.account_currency != self.account_currency:\n                    frappe.throw(_(\"Account: {0} has accounting entries in currency: {1}. Please set account currency to {1} or delete the existing entries.\").format(self.name, entry.account_currency))\n\n    self.set_default_in_company_currency()\n", "CodeBleu_score": 37.865736187120405}, {"code": "def validate_account_currency(self)\n\t\n    if self.is_group:\n        return\n\n    if not self.currency:\n        self.currency = frappe.db.get_value(\"Company\", self.company, \"default_currency\")\n        self.set_default_in_company()\n\n    if self.account_type in [\"Receivable\", \"Payable\"]:\n        if self.account_currency == self.company_currency:\n            self.account_currency = None\n            self.set_default_in_company()\n\n        if self.account_currency != self.currency:\n            if frappe.db.sql(\"\"\"select name from `tabGL Entry` where account = %s and company = %s and\n                ifnull(account_currency, '') != %s\"\"\", (self.name, self.company, self.currency)):\n                frappe.throw(_(\"Account {0} has accounting entries in currency {1}. You cannot change the currency of an account which has accounting entries.\").format(self.name, self.account_currency))\n\n    if self.account_type == \"Stock\":\n        if self.account_currency == self.company_currency:\n            self.account_currency = None\n            self.set_default_in_company()\n\n        if self.account_currency != self.currency:\n            if frappe.db.sql(\"\"\"select name from `tabStock Ledger Entry` where account = %s and company = %s and\n                ifnull(account_currency, '') != %s\"\"\", (self.name, self.company, self.currency)):\n                frappe.throw(_(\"Account {0} has stock ledger entries in currency {1}. You cannot change the currency of an account which has stock ledger entries.\").format(self.name, self.account_currency))\n\n", "CodeBleu_score": 33.260248276233675}, {"code": "def validate_account_currency(self)\n\t\n    if self.account_currency:\n        self.set_explicit_currency()\n        if not self.currency:\n            self.currency = self.account_currency\n        else:\n            if self.account_currency != self.currency:\n                # check if there are existing entries with a different currency\n                existing_gle = frappe.db.sql(\"\"\"select name from `tabGL Entry` where account=%s and company=%s and ifnull(is_cancelled, 'No')='No' and currency != %s\"\"\", (self.name, self.company, self.account_currency))\n                if existing_gle:\n                    existing_gle = [e[0] for e in existing_gle]\n                    frappe.msgprint(_(\"Cannot change currency for {0} because there are existing transactions with currency {1}.\").format(self.name, self.account_currency), title=_(\"Account Currency Difference\"), indicator=\"orange\",\n                        primary_action={\n                            \"label\": _(\"View Transactions\"),\n                            \"action\": lambda: frappe.set_route(\"query-report\", \"General Ledger\", {\"account\": self.name, \"company\": self.company, \"from_posting_date\": self.creation, \"to_posting_date\": self.creation})\n                        })\n                    frappe.throw(_(\"Cannot change currency for {0} because there are existing transactions with currency {1}.\").format(self.name, self.account_currency))\n\n", "CodeBleu_score": 32.078763738834475}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n\n    aggregated_entries = {}\n    for entry in entries:\n        key = get_key(entry, accounting_dimensions)\n        if key not in aggregated_entries:\n            aggregated_entries.setdefault(key, frappe._dict({\n                \"debit\": 0.0,\n                \"credit\": 0.0,\n                \"debit_in_account_currency\": 0.0,\n                \"credit_in_account_currency\": 0.0,\n                \"account_currency\": entry.account_currency\n            }))\n        aggregated_entries[key].debit += flt(entry.debit)\n        aggregated_entries[key].credit += flt(entry.credit)\n        aggregated_entries[key].debit_in_account_currency += flt(entry.debit_in_account_currency)\n        aggregated_entries[key].credit_in_account_currency += flt(entry.credit_in_account_currency)\n\n    return aggregated_entries\n\n", "CodeBleu_score": 32.449490022457105}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n\n    aggregated_entries = {}\n\n    for entry in entries:\n        key = []\n        for dimension in accounting_dimensions:\n            key.append(cstr(entry.get(dimension)))\n\n        key = tuple(key)\n        if key in aggregated_entries:\n            aggregated_entries[key][\"debit\"] += flt(entry.debit)\n            aggregated_entries[key][\"credit\"] += flt(entry.credit)\n            aggregated_entries[key][\"debit_in_account_currency\"] += flt(entry.debit_in_account_currency)\n            aggregated_entries[key][\"credit_in_account_currency\"] += flt(entry.credit_in_account_currency)\n        else:\n            aggregated_entries[key] = entry\n\n    return aggregated_entries\n\n", "CodeBleu_score": 34.133969315166965}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    aggregated_entries = {}\n    for entry in entries:\n        key = []\n        for dimension in accounting_dimensions:\n            key.append(cstr(entry.get(dimension)))\n        key = tuple(key)\n\n        if key not in aggregated_entries:\n            aggregated_entries[key] = {\n                \"debit\": 0.0,\n                \"credit\": 0.0,\n                \"debit_in_account_currency\": 0.0,\n                \"credit_in_account_currency\": 0.0,\n            }\n\n        aggregated_entries[key][\"debit\"] += flt(entry.debit)\n        aggregated_entries[key][\"credit\"] += flt(entry.credit)\n        aggregated_entries[key][\"debit_in_account_currency\"] += flt(\n            entry.debit_in_account_currency\n        )\n        aggregated_entries[key][\"credit_in_account_currency\"] += flt(\n            entry.credit_in_account_currency\n        )\n\n    return aggregated_entries\n\n", "CodeBleu_score": 33.950805972000815}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype == \"Supplier Payment\":\n        supplier = frappe.db.get_value(\"Supplier\", self.party, [\"on_hold\", \"hold_type\"], as_dict=1)\n        if supplier.on_hold and supplier.hold_type == self.doctype:\n            if getdate(self.posting_date) < getdate(supplier.release_date):\n                frappe.throw(\n                    _(\"Supplier is on hold till {0}\").format(formatdate(supplier.release_date))\n                )\n    elif self.doctype == \"Purchase Invoice\":\n        supplier = frappe.db.get_value(\"Supplier\", self.supplier, [\"on_hold\", \"hold_type\"], as_dict=1)\n        if supplier.on_hold and supplier.hold_type == self.doctype:\n            if getdate(self.posting_date) < getdate(supplier.release_date):\n                frappe.throw(\n                    _(\"Supplier is on hold till {0}\").format(formatdate(supplier.release_date))\n                )\n\n", "CodeBleu_score": 35.95724540720602}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype == \"Supplier Payment\":\n        supplier = frappe.db.get_value(\"Supplier\", self.party, [\"on_hold\", \"hold_type\"], as_dict=True)\n    elif self.doctype == \"Purchase Invoice\":\n        supplier = frappe.db.get_value(\"Supplier\", self.supplier, [\"on_hold\", \"hold_type\"], as_dict=True)\n    else:\n        return\n\n    if supplier.on_hold and supplier.hold_type == self.doctype:\n        if not self.release_date:\n            frappe.throw(_(\"Please enter a release date to release the supplier.\"), title=_(\"Release Date Missing\"))\n        elif getdate(self.release_date) < getdate(nowdate()):\n            frappe.db.set_value(self.doctype, self.name, \"on_hold\", 0)\n            frappe.db.set_value(self.doctype, self.name, \"release_date\", \"\")\n\n", "CodeBleu_score": 37.73828604294033}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype in [\"Purchase Invoice\", \"Purchase Receipt\"]:\n        supplier = self.supplier\n        supplier_type = \"Supplier\"\n    elif self.doctype in [\"Supplier Quotation\", \"Supplier Quotation Item\"]:\n        supplier = self.supplier\n        supplier_type = \"Customer\"\n    elif self.doctype in [\"Purchase Order\", \"Purchase Order Item\"]:\n        supplier = self.supplier\n        supplier_type = \"Supplier\"\n    elif self.doctype in [\"Sales Invoice\", \"Sales Invoice Item\"]:\n        supplier = self.customer\n        supplier_type = \"Customer\"\n    elif self.doctype in [\"Delivery Note\", \"Delivery Note Item\"]:\n        supplier = self.customer\n        supplier_type = \"Customer\"\n    elif self.doctype in [\"Sales Order\", \"Sales Order Item\"]:\n        supplier = self.customer\n        supplier_type = \"Customer\"\n    elif self.doctype in [\"Material Request\", \"Material Request Item\"]:\n        supplier = self.supplier\n        supplier_type = \"Supplier\"\n    elif self.doctype in [\"Request for Quotation\", \"Request for Quotation Item\"]:\n        supplier = self.quotation_to\n        supplier_type = \"Customer\"\n    else:\n        return\n\n    if supplier:\n        supplier_is_blocked = frappe.db.get_value(\n            \"Supplier\",\n            supplier,\n            \"on_hold\",\n            order_by=\"on_hold desc\",\n            cache=True,\n        )\n        if supplier_is_blocked:\n            if self.doctype in [\n                \"Purchase Invoice\",\n                \"Purchase Receipt\",\n                \"Purchase Order\",\n            ]:\n                hold_type = \"All\"\n            elif self.doctype in [\n                \"Supplier Quotation\",\n                \"Supplier Quotation Item\",\n                \"Request for Quotation\",\n                \"Request for Quotation Item\",\n            ]:\n                hold_type = \"Quotations\"\n            elif self.doctype in [\"Sales Invoice\", \"Sales Invoice Item\"]:\n                hold_type = \"All\"\n            elif self.doctype in [\n                \"Delivery Note\",\n                \"Delivery Note Item\",\n                \"Sales Order\",\n                \"Sales Order Item\",\n            ]:\n                hold_type = \"All\"\n            elif self.doctype in [\"Material Request\", \"Material Request Item\"]:\n                hold_type = \"Material Requests\"\n            else:\n                hold_type = \"All\"\n\n            if supplier_is_blocked == hold_type:\n                release_date = frappe.db.", "CodeBleu_score": 29.603849396586256}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    if not self.meta.get_field(\"ignore_pricing_rule\"):\n        return\n\n    # identify repost doctypes\n    repost_doctypes = []\n    for doctype in frappe.get_hooks(\"repost_item_valuation_in_future\"):\n        if self.meta.get_field(doctype):\n            repost_doctypes.append(doctype)\n\n    # query for rows\n    rows = frappe.db.sql(\n        \"\"\"\n            SELECT parenttype, parent, repost_vouchers, vouchers\n            FROM `tab{doctype}`\n            WHERE voucher_type=%s AND voucher_no=%s\n        \"\"\".format(\n            doctype=self.doctype\n        ),\n        values=(self.doctype, self.name),\n        as_dict=True,\n    )\n\n    # organize rows by parent document type and parent\n    rows_by_parent = defaultdict(lambda: defaultdict(list))\n    for row in rows:\n        rows_by_parent[row.parenttype][row.parent].append(row)\n\n    # get parents and remove rows\n    for parenttype, parents in rows_by_parent.items():\n        for parent, rows in parents.items():\n            parent = frappe.get_doc(parenttype, parent)\n            for row in rows:\n                if row.repost_vouchers:\n                    parent.repost_vouchers = [\n                        d for d in parent.repost_vouchers if d.voucher_type != self.doctype or d.voucher_no != self.name\n                    ]\n                if row.vouchers:\n                    parent.set(\n                        \"vouchers\",\n                        [d for d in parent.vouchers if d.voucher_type != self.doctype or d.voucher_no != self.name],\n                    )\n            parent.flags.ignore_validate_update_after_submit = True\n            parent.flags.ignore_links = True\n            parent.save()\n\n", "CodeBleu_score": 28.84861139343391}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n\n    doctypes_to_repost = [\"Delivery Note\", \"Sales Invoice\", \"Purchase Invoice\"]\n    doctypes_to_repost.extend(self.get(\"additional_documents\"))\n    doctypes_to_repost = list(set(doctypes_to_repost))\n\n    for doctype in doctypes_to_repost:\n        if doctype == \"Delivery Note\":\n            fieldname = \"repost_vouchers\"\n        elif doctype == \"Sales Invoice\":\n            fieldname = \"repost_invoices\"\n        elif doctype == \"Purchase Invoice\":\n            fieldname = \"repost_invoices\"\n        else:\n            fieldname = \"repost_items\"\n\n        if not self.meta.get_field(fieldname):\n            continue\n\n        rows = frappe.db.sql(\n            \"\"\"\n                SELECT\n                    parent,\n                    {fieldname}\n                FROM\n                    `tab{doctype}`\n                WHERE\n                    {fieldname} like %(voucher_no)s\n                AND\n                    docstatus = 1\n                AND\n                    parent != %(voucher_no)s\n            \"\"\".format(\n                doctype=doctype, fieldname=fieldname\n            ),\n            values={\"voucher_no\": \"%{0}%\".format(self.name)},\n            as_dict=True,\n        )\n\n        if not rows:\n            continue\n\n        rows_by_parent = defaultdict(list)\n        for row in rows:\n            rows_by_parent[row.parent].append(row)\n\n        for parent, rows in rows_by_parent.items():\n            if doctype == \"Delivery Note\":\n                parent_doc = frappe.get_doc(doctype, parent)\n                parent_doc.flags.ignore_validate_update_after_submit = True\n                parent_doc.flags.ignore_links = True\n                parent_doc.set(fieldname, [d for d in parent_doc.get(fieldname) if d.voucher_no != self.name])\n                parent_doc.save()\n            else:\n                for row in rows:\n                    frappe.db.sql(\n                        \"\"\"\n                            UPDATE\n                                `tab{doctype}`\n                            SET\n                                {fieldname} = %(new_value)s\n                            WHERE\n                                name = %(voucher_name)s\n                        \"\"\".format(\n                            doctype=doctype, fieldname=fieldname\n                        ),\n                        values={\n                            \"new_value\": row[fieldname].replace(self.name, \"\"),\n                            \"voucher_name\": row[\"parent\"],", "CodeBleu_score": 25.229293629213593}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    if self.doctype in [\"Sales Invoice\", \"Purchase Invoice\"]:\n        doctypes = [\"Sales Invoice Item\", \"Purchase Invoice Item\"]\n    elif self.doctype in [\"Delivery Note\", \"Sales Invoice\", \"Purchase Invoice\"]:\n        doctypes = [\"Delivery Note Item\", \"Sales Invoice Item\", \"Purchase Invoice Item\"]\n    elif self.doctype in [\"Purchase Receipt\", \"Purchase Invoice\"]:\n        doctypes = [\"Purchase Receipt Item\", \"Purchase Invoice Item\"]\n    elif self.doctype in [\"Purchase Order\", \"Purchase Invoice\"]:\n        doctypes = [\"Purchase Order Item\", \"Purchase Invoice Item\"]\n    elif self.doctype in [\"Stock Entry\", \"Delivery Note\", \"Sales Invoice\"]:\n        doctypes = [\"Stock Entry Detail\", \"Delivery Note Item\", \"Sales Invoice Item\"]\n    elif self.doctype in [\"Stock Entry\", \"Delivery Note\", \"Sales Invoice\", \"Purchase Invoice\"]:\n        doctypes = [\n            \"Stock Entry Detail\",\n            \"Delivery Note Item\",\n            \"Sales Invoice Item\",\n            \"Purchase Invoice Item\",\n        ]\n    else:\n        return\n\n    for doctype in doctypes:\n        if not frappe.db.exists(doctype):\n            continue\n        repost_doctype = frappe.get_meta(doctype).repost_doctypes\n        if not repost_doctype:\n            continue\n        repost_doctype = repost_doctype[0]\n        if not repost_doctype:\n            continue\n\n        # Find rows where the voucher type and number match the current document\n        rows = frappe.qb.from_(doctype).where(\n            (doctype.voucher_type == self.doctype)\n            & (doctype.voucher_no == self.name)\n        ).select(doctype.parenttype, doctype.parent)\n\n        # Organize rows by parent document type and parent\n        rows_by_parent = defaultdict(list)\n        for row in rows:\n            rows_by_parent[(row.parenttype, row.parent)].append(row)\n\n        for (parenttype, parent), rows in rows_by_parent.items():\n            # Retrieve the parent document\n            parent_doc = frappe.get_doc(parenttype, parent)\n\n            # Remove the relevant rows from either \"repost_vouchers\" or \"vouchers\"\n            # depending on the doctype\n            if doctype in parent_doc.repost_vouchers:\n                parent_doc.repost_vouchers = [\n                    row for row", "CodeBleu_score": 26.608781462959435}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    self.authenticate()\n    transactions = []\n    cursor = None\n    has_more = True\n    while has_more:\n        try:\n            response = self.client.Transactions.get(\n                start_date=start_date,\n                end_date=end_date,\n                account_ids=[account_id] if account_id else None,\n                cursor=cursor,\n            )\n            transactions.extend(response[\"transactions\"])\n            cursor = response[\"cursor\"]\n            has_more = response[\"has_more\"]\n        except InvalidRequestError as e:\n            if e.code == \"PRODUCT_NOT_READY\":\n                frappe.log_error(\n                    \"Plaid product is not ready. Please contact your administrator.\",\n                    \"Plaid Error\",\n                )\n            else:\n                frappe.log_error(\n                    \"Invalid request error. Please contact your administrator.\",\n                    \"Plaid Error\",\n                )\n        except ItemError as e:\n            if e.code == \"PRODUCT_NOT_READY\":\n                frappe.log_error(\n                    \"Plaid product is not ready. Please contact your administrator.\",\n                    \"Plaid Error\",\n                )\n            else:\n                frappe.log_error(\n                    \"Item error. Please contact your administrator.\", \"Plaid Error\"\n                )\n        except APIError as e:\n            if e.code == \"PRODUCT_NOT_READY\":\n                frappe.log_error(\n                    \"Plaid product is not ready. Please contact your administrator.\",\n                    \"Plaid Error\",\n                )\n            else:\n                frappe.log_error(\n                    \"API error. Please contact your administrator.\", \"Plaid Error\"\n                )\n        except Exception as e:\n            frappe.log_error(\n                f\"An unknown error occurred. Please contact your administrator. Error: {e}\",\n                \"Plaid Error\",\n            )\n    return transactions\n\n", "CodeBleu_score": 24.843326436349717}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n\n    # Initialize the client\n    client = plaid.Client(client_id=self.client_id, secret=self.secret,\n                          environment=self.environment, api_version='2020-09-14')\n\n    # Initialize the access token\n    access_token = self.get_access_token()\n\n    # Prepare the request\n    options = {\n        'account_ids': [account_id] if account_id else None,\n        'start_date': start_date,\n        'end_date': end_date,\n    }\n\n    # Fetch the transactions\n    try:\n        response = client.Transactions.get(access_token, options)\n    except InvalidRequestError as e:\n        if e.code == 'PRODUCT_NOT_READY':\n            frappe.log_error(\n                'Plaid API is not ready to accept requests. Please try again later.')\n            return []\n        else:\n            raise e\n    except ItemError as e:\n        frappe.log_error(\n            'An error occurred while fetching transactions. Please try again later.')\n        return []\n    except APIError as e:\n        frappe.log_error(\n            'An error occurred while fetching transactions. Please try again later.')\n        return []\n\n    transactions = []\n\n    # Iterate through the transactions\n    for transaction in response['transactions']:\n        transactions.append(transaction)\n\n    # If the number of transactions is less than the total, continue fetching\n    if len(transactions) < response['total_transactions']:\n        # Continue fetching\n        transactions.extend(get_transactions(\n            self, start_date, end_date, account_id))\n\n    return transactions\n\n", "CodeBleu_score": 34.060754431848665}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    # Initialize variables\n    client = plaid.Client(client_id=self.client_id,\n                          secret=self.get_password(fieldname=\"client_secret\", raise_exception=False),\n                          environment=self.environment)\n    access_token = self.get_password(fieldname=\"access_token\", raise_exception=False)\n    transactions = []\n    cursor = None\n\n    # Authenticate the client\n    try:\n        client.Auth.get(access_token)\n    except InvalidRequestError as e:\n        frappe.log_error(title=\"Plaid API Error\", message=e)\n        frappe.throw(\n            title=\"Plaid API Error\",\n            message=_(\n                \"The client ID and/or secret are incorrect. Please update them in the Plaid Settings.\"),\n            exc=e)\n    except APIError as e:\n        frappe.log_error(title=\"Plaid API Error\", message=e)\n        frappe.throw(\n            title=\"Plaid API Error\",\n            message=_(\n                \"The access token is invalid. Please update it in the Plaid Settings.\"),\n            exc=e)\n\n    # Construct the query parameters\n    params = {\n        \"gte\": start_date,\n        \"lte\": end_date,\n        \"options\": {\n            \"account_id\": account_id\n        }\n    }\n\n    # Fetch the transactions from the client\n    try:\n        response = client.Transactions.get(access_token, params)\n        transactions = response[\"transactions\"]\n        cursor = response[\"request_id\"]\n    except ItemError as e:\n        frappe.log_error(title=\"Plaid API Error\", message=e)\n        frappe.throw(\n            title=\"Plaid API Error\",\n            message=_(\n                \"The account ID is invalid. Please update it in the Plaid Settings.\"),\n            exc=e)\n    except InvalidRequestError as e:\n        frappe.log_error(title=\"Plaid API Error\", message=e)\n        frappe.throw(\n            title=\"Plaid API Error\",\n            message=_(\n                \"The request is invalid. Please update the start and end dates.\"),\n            exc=e)\n    except APIError as e:\n        frappe.log_error(title=\"Plaid API Error\", message=e)\n        frappe.throw(title=\"Plaid API Error\", message=_(\n            \"The request failed. Please try again.\"), exc=", "CodeBleu_score": 30.144246181949363}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t matplotlib.pyplot.\n\n    Args:\n        token (str): The Plaid access token\n        response (dict): The response from the Plaid API\n\n    Returns:\n        str: The bank name if the bank was added successfully, otherwise None\n    \"\"\"\n    try:\n        plaid_connector = PlaidConnector()\n        plaid_connector.set_access_token(token)\n        institution = plaid_connector.get_institution(response)\n\n        # Check if institution already exists in database\n        if not frappe.db.exists(\"Bank\", institution.name):\n            # Create new bank record\n            bank = frappe.get_doc(\n                {\n                    \"doctype\": \"Bank\",\n                    \"bank_name\": institution.name,\n                    \"country\": institution.country_codes[0],\n                    \"plaid_access_token\": token,\n                }\n            )\n            bank.insert()\n            return institution.name\n        else:\n            # Update existing bank record\n            bank = frappe.get_doc(\"Bank\", institution.name)\n            bank.plaid_access_token = token\n            bank.save()\n            return institution.name\n    except ItemError as e:\n        frappe.log_error(frappe.get_traceback(), _(\"Plaid Error\"))\n        return None\n\n", "CodeBleu_score": 7.5417712730356525}, {"code": "def add_institution(token, response)\n\t numpy.\n\n    Args:\n        token (str): A Plaid access token.\n        response (dict): A Plaid response object.\n\n    Returns:\n        dict: A dictionary containing the bank name, institution ID, and access token for the new or updated bank record.\n    \"\"\"\n    try:\n        # Parse the response\n        institution = response[\"institution\"]\n        institution_name = institution[\"name\"]\n        institution_id = institution[\"institution_id\"]\n\n        # Create a PlaidConnector object\n        plaid_connector = PlaidConnector()\n\n        # Get an access token for the institution\n        access_token = plaid_connector.get_access_token(token, institution_id)\n\n        # Check if the bank exists in the database\n        bank = frappe.db.exists(\n            \"Bank\", {\"plaid_institution_id\": institution_id})\n\n        # If the bank does not exist, create a new bank record\n        if not bank:\n            bank = frappe.get_doc({\n                \"doctype\": \"Bank\",\n                \"bank_name\": institution_name,\n                \"plaid_access_token\": access_token,\n                \"plaid_institution_id\": institution_id\n            })\n            bank.insert()\n\n        # If the bank does exist, update the access token for the existing record\n        else:\n            frappe.db.set_value(\n                \"Bank\", bank, \"plaid_access_token\", access_token)\n\n        # Return the bank information\n        return {\n            \"bank_name\": institution_name,\n            \"institution_id\": institution_id,\n            \"access_token\": access_token\n        }\n\n    except ItemError as e:\n        frappe.log_error(\n            title=\"Bank Creation Error\",\n            message=frappe.get_traceback(),\n            method=\"plaid_integration.plaid_integration.doctype.plaid_settings.plaid_settings.add_institution\"\n        )\n        frappe.throw(e)\n\n", "CodeBleu_score": 11.965896631930201}, {"code": "def add_institution(token, response)\n\t numpy.\n\n    Args:\n        token (str): The access token used to retrieve the bank's transactions\n        response (dict): The response from the Plaid API containing the bank's data\n\n    Returns:\n        None\n    \"\"\"\n    try:\n        # parse the response\n        institution_data = parse_response(response)\n\n        # get the access token\n        access_token = PlaidConnector().get_access_token(token)\n\n        # check if the bank exists in the database\n        bank = frappe.db.exists(\n            \"Bank\",\n            {\n                \"institution_name\": institution_data[\"institution_name\"],\n                \"plaid_access_token\": access_token,\n            },\n        )\n\n        # if the bank does not exist, create a new bank record\n        if not bank:\n            bank = frappe.get_doc(\n                {\n                    \"doctype\": \"Bank\",\n                    \"institution_name\": institution_data[\"institution_name\"],\n                    \"plaid_access_token\": access_token,\n                }\n            ).insert()\n\n        # if the bank already exists, update the access token\n        else:\n            frappe.db.set_value(\n                \"Bank\",\n                bank,\n                \"plaid_access_token\",\n                access_token,\n                update_modified=False,\n            )\n\n        # save the bank record\n        bank.save()\n\n    # catch any errors and log them\n    except Exception as e:\n        frappe.log_error(\n            title=\"plaid_connector.add_institution\",\n            message=frappe.get_traceback(),\n        )\n\n", "CodeBleu_score": 6.9875537426450585}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t\n\n    # Get the last integration date\n    last_integration_date = frappe.db.get_single_value(\"Bank Account\", bank_account, \"last_integration_date\")\n    # If the last integration date is not set, set it to today\n    if not last_integration_date:\n        last_integration_date = today()\n    # If the last integration date is in the future, set it to today\n    if getdate(last_integration_date) > getdate(today()):\n        last_integration_date = today()\n\n    # Get the start date for the transaction retrieval\n    start_date = add_months(last_integration_date, -1)\n    # Get the end date for the transaction retrieval\n    end_date = add_months(last_integration_date, 1)\n\n    # Get the transactions\n    transactions = get_transactions(bank, bank_account, start_date, end_date)\n\n    # Process the transactions\n    if transactions:\n        # Get the bank account name\n        bank_account_name = frappe.db.get_value(\"Bank Account\", bank_account, \"account_name\")\n        # Process the transactions\n        process_transactions(transactions, bank_account_name)\n\n    # Update the last integration date to the date of the oldest transaction\n    oldest_transaction_date = frappe.db.get_value(\n        \"Bank Transaction\", {\"bank_account\": bank_account}, \"transaction_date\", order_by=\"transaction_date asc\"\n    )\n    if oldest_transaction_date:\n        frappe.db.set_value(\"Bank Account\", bank_account, \"last_integration_date\", oldest_transaction_date)\n\n", "CodeBleu_score": 40.27303437864226}, {"code": "def sync_transactions(bank, bank_account)\n\t\n\n    try:\n        # Get the last integration date from the bank account\n        last_integration_date = get_last_integration_date(bank, bank_account)\n\n        # Get the start and end dates for the transaction retrieval\n        start_date = get_start_date(last_integration_date)\n        end_date = get_end_date(start_date)\n\n        # Get the transactions for the specified bank account\n        transactions = get_transactions(bank, bank_account, start_date, end_date)\n\n        # Process the transactions into new bank transactions\n        process_transactions(transactions, bank, bank_account)\n\n        # Update the last integration date to the date of the oldest transaction\n        update_last_integration_date(bank, bank_account, get_oldest_transaction_date(transactions))\n\n        # Log the number of new transactions added\n        new_transactions = len(transactions)\n        frappe.log_error(\n            _(\"Synced {0} transactions for bank {1} and bank account {2}\").format(\n                new_transactions, bank, bank_account\n            ),\n            _(\"Bank Transactions Synced\"),\n        )\n\n    except ItemError as e:\n        frappe.log_error(\n            _(\"Error syncing transactions for bank {0} and bank account {1}: {2}\").format(\n                bank, bank_account, e\n            ),\n            _(\"Bank Transactions Sync Failed\"),\n        )\n\n", "CodeBleu_score": 28.780978675394685}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        # Get the last transaction date from the bank account\n        last_integration_date = frappe.db.get_value(\n            \"Bank Account\", bank_account, \"last_integration_date\"\n        )\n        # Get the last transaction date from the bank account\n        last_integration_date = frappe.db.get_value(\n            \"Bank Account\", bank_account, \"last_integration_date\"\n        )\n        # If there is no last integration date, set it to the beginning of the year\n        if not last_integration_date:\n            last_integration_date = formatdate(\n                getdate(today()).replace(day=1), \"yyyy-MM-dd\"\n            )\n        # Get the last transaction date from the bank account\n        last_transaction_date = frappe.db.get_value(\n            \"Bank Account\", bank_account, \"last_transaction_date\"\n        )\n        # If there is no last transaction date, set it to the beginning of the year\n        if not last_transaction_date:\n            last_transaction_date = formatdate(\n                getdate(today()).replace(day=1), \"yyyy-MM-dd\"\n            )\n\n        # Get the last transaction date from the bank account\n        last_synced_transaction_id = frappe.db.get_value(\n            \"Bank Account\", bank_account, \"last_synced_transaction_id\"\n        )\n\n        # Get the last transaction date from the bank account\n        last_synced_transaction_id = frappe.db.get_value(\n            \"Bank Account\", bank_account, \"last_synced_transaction_id\"\n        )\n\n        # If there is no last integration date, set it to the beginning of the year\n        if not last_synced_transaction_id:\n            last_synced_transaction_id = 0\n\n        # Get the last transaction date from the bank account\n        last_synced_transaction_id = frappe.db.get_value(\n            \"Bank Account\", bank_account, \"last_synced_transaction_id\"\n        )\n\n        # If there is no last integration date, set it to the beginning of the year\n        if not last_synced_transaction_id:\n            last_synced_transaction_id = 0\n\n        # Get the last transaction date from the bank account\n        last_synced_transaction_id =", "CodeBleu_score": 29.60913503502488}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t\n    try:\n        if not self.quickbooks_company:\n            frappe.throw(_(\"Please select a QuickBooks Company.\"))\n        if not self.quickbooks_access_token:\n            frappe.throw(_(\"Please generate an Access Token.\"))\n\n        headers = {\n            \"Accept\": \"application/json\",\n            \"Authorization\": \"Bearer {}\".format(self.quickbooks_access_token),\n        }\n\n        url = \"https://quickbooks.api.intuit.com/v3/company/{}/query?query={}\".format(\n            self.quickbooks_company, entity\n        )\n\n        r = requests.get(url, headers=headers)\n\n        if r.status_code == 200:\n            response = r.json()\n            total_count = response[\"TotalCount\"]\n            if total_count > 0:\n                query_response = response[\"QueryResponse\"]\n                for entry in query_response:\n                    self.preprocess_entry(entry)\n                self.save()\n                frappe.db.commit()\n                for entry in query_response:\n                    self.save_entry(entry)\n                self.save()\n                frappe.db.commit()\n                frappe.msgprint(\n                    _(\"Successfully migrated {} entries.\").format(total_count)\n                )\n            else:\n                frappe.msgprint(_(\"No entries found to migrate.\"))\n        else:\n            frappe.throw(\n                _(\n                    \"Failed to retrieve data from QuickBooks. Response: {}.\").format(\n                        r.text\n                    )\n            )\n\n    except Exception:\n        frappe.log_error(\n            title=\"QuickBooks Migration Error\",\n            message=traceback.format_exc(),\n            method=\"migrate_entries\",\n        )\n\n", "CodeBleu_score": 26.645021642949658}, {"code": "def _migrate_entries(self, entity)\n\t\n    try:\n        self.log_start_time()\n        self.validate_quickbooks_company()\n        self.validate_quickbooks_credentials()\n        self.validate_quickbooks_company_sync_status(entity)\n        self.validate_quickbooks_company_sync_settings(entity)\n        self.validate_quickbooks_company_sync_errors(entity)\n        self.validate_quickbooks_company_sync_batch_size(entity)\n        self.validate_quickbooks_company_sync_batch_delay(entity)\n        self.validate_quickbooks_company_sync_batch_retry_delay(entity)\n        self.validate_quickbooks_company_sync_batch_max_retries(entity)\n        self.validate_quickbooks_company_sync_batch_retry_status(entity)\n        self.validate_quickbooks_company_sync_batch_retry_errors(entity)\n        self.validate_quickbooks_company_sync_batch_retry_count(entity)\n        self.validate_quickbooks_company_sync_batch_retry_count_max(entity)\n        self.validate_quickbooks_company_sync_batch_retry_count_reset(entity)\n\n        self.log_status(\"Fetching QuickBooks {} entries...\".format(entity))\n        query_uri = self.get_quickbooks_query_uri(entity)\n        self.log_status(\"Fetching QuickBooks {} entries...\".format(entity), query_uri)\n        response = self.get_quickbooks_entries(query_uri)\n        self.log_status(\"Fetching QuickBooks {} entries...\".format(entity), \"success\")\n        self.log_status(\"Processing QuickBooks {} entries...\".format(entity))\n        self.preprocess_quickbooks_entries(response, entity)\n        self.log_status(\"Processing QuickBooks {} entries...\".format(entity), \"success\")\n        self.log_status(\"Saving QuickBooks {} entries...\".format(entity))\n        self.save_quickbooks_entries(response, entity)\n        self.log_status(\"Saving QuickBooks {} entries...\".format(entity), \"success\")\n        self.log_status(\"QuickBooks {} entries migration completed.\".format(entity))\n        self.log_success_time()\n\n    except Exception:\n        self.log_status(\"QuickBooks {} entries migration failed.\".format(entity))\n        self", "CodeBleu_score": 18.92512095549456}, {"code": "def _migrate_entries(self, entity)\n\t\n    try:\n        self.log_start_time()\n        self.log_status_message(_(\"Migrating {0}\").format(entity))\n        self.set_status(\"In Progress\")\n        self.save()\n\n        # Construct the query URI\n        query_uri = self.construct_query_uri(entity)\n        self.log_info_message(_(\"Query URI: {0}\").format(query_uri))\n\n        # Get the total number of entries\n        total_entries = self.get_total_entries(query_uri)\n        self.log_info_message(_(\"Total {0} entries: {1}\").format(entity, total_entries))\n\n        # Fetch the entries in batches of 1000\n        entries = []\n        for i in range(0, total_entries, 1000):\n            entries = entries + self.get_entries(query_uri, i)\n\n        # Preprocess and save the entries\n        self.preprocess_entries(entries, entity)\n        self.save_entries(entries, entity)\n\n        self.log_status_message(_(\"Migration completed successfully\"))\n        self.set_status(\"Completed\")\n\n    except Exception as e:\n        self.log_status_message(_(\"Migration failed\"))\n        self.set_status(\"Failed\")\n        self.log_exception(e)\n\n", "CodeBleu_score": 31.10879305762957}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\t\n    if invoice[\"TxnType\"] == \"Invoice\":\n        self.save_sales_invoice(invoice)\n    elif invoice[\"TxnType\"] == \"Bill\":\n        self.save_bill(invoice)\n    elif invoice[\"TxnType\"] == \"CreditMemo\":\n        self.save_credit_memo(invoice)\n    elif invoice[\"TxnType\"] == \"JournalEntry\":\n        self.save_journal_entry(invoice)\n    elif invoice[\"TxnType\"] == \"Estimate\":\n        self.save_estimate(invoice)\n    elif invoice[\"TxnType\"] == \"Deposit\":\n        self.save_deposit(invoice)\n    elif invoice[\"TxnType\"] == \"Check\":\n        self.save_check(invoice)\n    elif invoice[\"TxnType\"] == \"CreditCardCharge\":\n        self.save_credit_card_charge(invoice)\n    elif invoice[\"TxnType\"] == \"Charge\":\n        self.save_charge(invoice)\n    elif invoice[\"TxnType\"] == \"Credit\":\n        self.save_credit(invoice)\n    elif invoice[\"TxnType\"] == \"RefundReceipt\":\n        self.save_refund_receipt(invoice)\n    elif invoice[\"TxnType\"] == \"VendorCredit\":\n        self.save_vendor_credit(invoice)\n    elif invoice[\"TxnType\"] == \"JournalEntry\":\n        self.save_journal_entry(invoice)\n    elif invoice[\"TxnType\"] == \"Purchase\":\n        self.save_purchase(invoice)\n    elif invoice[\"TxnType\"] == \"Transfer\":\n        self.save_transfer(invoice)\n    elif invoice[\"TxnType\"] == \"Paycheck\":\n        self.save_paycheck(invoice)\n    elif invoice[\"TxnType\"] == \"Timesheet\":\n        self.save_timesheet(invoice)\n    elif invoice[\"TxnType\"] == \"EmployeeExpense\":\n        self.save_employee_expense(invoice)\n    elif invoice[\"TxnType\"] == \"PurchaseOrder\":\n        self.save_purchase_order(invoice)\n    elif invoice[\"TxnType\"] == \"BillPayment\":\n        self.save_bill_payment(invoice)\n    elif invoice[\"TxnType\"] == \"DepositPayment\":\n        self.save_deposit_payment(invoice)\n    elif invoice[\"TxnType\"] == \"CreditCardPayment\":\n        self.save_credit_card_payment(invoice)\n    elif invoice[\"TxnType\"] == \"EmployeePay\":\n        self.save_employee_pay(invoice)\n    elif invoice[\"TxnType", "CodeBleu_score": 16.822990420689127}, {"code": "def _save_invoice(self, invoice)\n\t\n    if invoice[\"BillType\"] == \"SalesInvoice\":\n        self.save_sales_invoice(invoice)\n    elif invoice[\"BillType\"] == \"JournalEntry\":\n        self.save_journal_entry(invoice)\n    elif invoice[\"BillType\"] == \"CreditCardCharge\":\n        self.save_credit_card_charge(invoice)\n    elif invoice[\"BillType\"] == \"Bill\":\n        self.save_bill(invoice)\n    elif invoice[\"BillType\"] == \"Purchase\":\n        self.save_purchase(invoice)\n    elif invoice[\"BillType\"] == \"Deposit\":\n        self.save_deposit(invoice)\n    elif invoice[\"BillType\"] == \"DepositPayment\":\n        self.save_deposit_payment(invoice)\n    elif invoice[\"BillType\"] == \"Estimate\":\n        self.save_estimate(invoice)\n    elif invoice[\"BillType\"] == \"StatementCharge\":\n        self.save_statement_charge(invoice)\n    elif invoice[\"BillType\"] == \"ReimburseCharge\":\n        self.save_reimburse_charge(invoice)\n    elif invoice[\"BillType\"] == \"JournalEntry\":\n        self.save_journal_entry(invoice)\n    elif invoice[\"BillType\"] == \"JournalEntry\":\n        self.save_journal_entry(invoice)\n    elif invoice[\"BillType\"] == \"JournalEntry\":\n        self.save_journal_entry(invoice)\n    elif invoice[\"BillType\"] == \"JournalEntry\":\n        self.save_journal_entry(invoice)\n    elif invoice[\"BillType\"] == \"JournalEntry\":\n        self.save_journal_entry(invoice)\n    elif invoice[\"BillType\"] == \"JournalEntry\":\n        self.save_journal_entry(invoice)\n    elif invoice[\"BillType\"] == \"JournalEntry\":\n        self.save_journal_entry(invoice)\n    elif invoice[\"BillType\"] == \"JournalEntry\":\n        self.save_journal_entry(invoice)\n    elif invoice[\"BillType\"] == \"JournalEntry\":\n        self.save_journal_entry(invoice)\n    elif invoice[\"BillType\"] == \"JournalEntry\":\n        self.save_journal_entry(invoice)\n    elif invoice[\"BillType\"] == \"JournalEntry\":\n        self.save_journal_entry(invoice)\n    elif invoice[\"BillType\"] == \"JournalEntry\":\n        self.save_journal_entry(invoice)\n    elif invoice[\"BillType\"] == \"Journal", "CodeBleu_score": 16.86086671127816}, {"code": "def _save_invoice(self, invoice)\n\t\n    if self.invoice_type == \"Sales Invoice\":\n        self._save_sales_invoice(invoice)\n    elif self.invoice_type == \"Journal Entry\":\n        self._save_journal_entry(invoice)\n\n", "CodeBleu_score": 19.550404411602287}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\n    # Get the interval between visits\n    visit_interval = date_diff(end_date, start_date) / (no_of_visit - 1)\n\n    # Create a list of dates, starting with the first visit\n    visit_dates = [start_date]\n\n    # Create the rest of the dates by adding the interval to the previous date\n    for i in range(1, no_of_visit):\n        visit_dates.append(add_days(visit_dates[i - 1], visit_interval))\n\n    # Adjust the dates to avoid holidays\n    for i in range(len(visit_dates)):\n        holiday_list = get_holiday_list_for_employee(sales_person)\n        while getdate(visit_dates[i]) in frappe.get_all(\n            \"Holiday List\", filters={\"name\": holiday_list}, fields=[\"holiday_date\"]\n        ):\n            visit_dates[i] = add_days(visit_dates[i], 1)\n\n    return visit_dates\n\n", "CodeBleu_score": 28.7724203297005}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\n    schedule_list = []\n    date = start_date\n    holiday_list = get_holiday_list_for_employee(sales_person)\n    while date <= end_date:\n        schedule_list.append(date)\n        date = add_days(date, no_of_visit)\n        while getdate(date) in frappe.get_all(\"Holiday\", filters={\"holiday_date\": date, \"parent\": holiday_list}):\n            date = add_days(date, 1)\n    return schedule_list\n\n", "CodeBleu_score": 18.583530561954937}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    if sales_person:\n        sales_person_doc = frappe.get_doc(\"Sales Person\", sales_person)\n        if sales_person_doc.holiday_list:\n            holiday_list = sales_person_doc.holiday_list\n        else:\n            holiday_list = get_holiday_list_for_employee(self.employee)\n    else:\n        holiday_list = get_holiday_list_for_employee(self.employee)\n    if holiday_list:\n        holiday_list_doc = frappe.get_doc(\"Holiday List\", holiday_list)\n    else:\n        frappe.throw(_(\"Please set a Holiday List for Employee {0} or for the Sales Person {1}\").format(self.employee, sales_person))\n    holiday_list_days = [getdate(d.holiday_date) for d in holiday_list_doc.holidays]\n    day_count = date_diff(end_date, start_date) + 1\n    interval = day_count / no_of_visit\n    for i in range(no_of_visit):\n        schedule_date = add_days(start_date, i * interval)\n        while schedule_date in holiday_list_days:\n            schedule_date = add_days(schedule_date, 1)\n        schedule_list.append(schedule_date)\n    return schedule_list\n\n", "CodeBleu_score": 33.18136296468388}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\t\n/**\n * Determine the request method.\n */\n       $method = request()->method();\n\n/**\n * Construct a URL for bulk actions.\n */\n       $bulk_action_url = request()->url() . '/bulk';\n\n/**\n * Render HTML content for a modal using the specified view and data.\n */\n       $modal_content = view($view, $data)->render();\n\n/**\n * The response includes success status, message, data with title, path, handle, and the rendered HTML.\n */\n       return response()->json([\n           'success' => true,\n           'message' => trans('messages.success.saved'),\n           'data' => [\n               'title' => Arr::get($data, 'title', ''),\n               'path' => Arr::get($data, 'path', ''),\n               'handle' => Arr::get($data, 'handle', ''),\n               'modal_content' => $modal_content,\n               'bulk_action_url' => $bulk_action_url,\n           ],\n       ]);\n   }", "CodeBleu_score": 41.1101304458357}, {"code": "<?\n   public function response($view, $data = []){\n\t\n// Determine the request method.\n        $method = request()->method();\n\n// Construct a URL for bulk actions.\n        $url = request()->url();\n\n// Render HTML content for a modal using the specified view and data.\n        $html = view($view, $data)->render();\n\n// Return a JSON response.\n        return response()->json([\n            'success' => true,\n            'message' => trans('messages.success.saved'),\n            'data' => [\n                'title' => $data['title'] ?? '',\n                'path' => $data['path'] ?? '',\n                'handle' => $data['handle'] ?? '',\n                'html' => $html,\n            ],\n        ]);\n    }", "CodeBleu_score": 40.19108154061593}, {"code": "<?\n   public function response($view, $data = []){\n\t\n/**\n * This function is used to handle the request.\n */\n   public function handle() {\n", "CodeBleu_score": 6.195477226837814}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t$selected = $request->input('selected');\n\nforeach ($selected as $contact_id) {\ntry {\nBus::chain([\nnew DeleteContact($contact_id),\nnew DeleteTransaction($contact_id)\n])->dispatch();\n} catch (Exception $e) {\n$message = $e->getMessage();\n\nreturn redirect()->back()->with('error', $message);\n}\n}\n\nreturn redirect()->back()->with('success', 'success');\n}", "CodeBleu_score": 38.30752560378955}, {"code": "<?\npublic function deleteContacts($request){\n\t$user = $request->user();\n$contacts = $request->input('contacts');\n$errors = [];\nforeach ($contacts as $contact) {\ntry {\n$contact = Contact::find($contact);\nif ($contact) {\nBus::chain([\nnew DeleteContact($contact),\nnew DeleteTransaction($contact),\nnew DeleteContact($contact, true),\nnew DeleteTransaction($contact, true),\n])->dispatch();\n}\n} catch (Throwable $e) {\n$errors[] = $e->getMessage();\n}\n}\nif (count($errors)) {\nreturn response()->json([\n'status' => false,\n'errors' => $errors,\n], 400);\n}\nreturn response()->json([\n'status' => true,\n'messages' => trans('messages.success.deleted', ['type' => trans_choice('general.contacts', 2)]),\n], 200);\n}", "CodeBleu_score": 40.913901444206594}, {"code": "<?\npublic function deleteContacts($request){\n\t\t$selected_contacts = $request->selected_contacts;\n\t$contacts = Contact::whereIn('id', $selected_contacts);\n\t$contacts_count = $contacts->count();\n\t$contacts_deleted = 0;\n\n\tforeach ($contacts->get() as $contact) {\n\t\ttry {\n\t\t\tBus::chain([\n\t\t\t\tnew DeleteContact($contact),\n\t\t\t\tnew DeleteTransaction($contact->transactions),\n\t\t\t\tnew DeleteContactDocument($contact->documents),\n\t\t\t\tnew DeleteContactNote($contact->notes),\n\t\t\t])->dispatch();\n\t\t\t$contacts_deleted++;\n\t\t} catch (Throwable $e) {\n\t\t\t$message = $e->getMessage();\n\t\t}\n\t}\n\n\tif ($contacts_deleted == $contacts_count) {\n\t\t$message = trans('messages.success.deleted', ['type' => trans_choice('general.contacts', $contacts_count)]);\n\t} else {\n\t\t$message = trans('messages.error.deleted', ['type' => trans_choice('general.contacts', $contacts_deleted), 'count' => $contacts_count]);\n\t}\n\n\treturn response()->json([\n\t\t'success' => $contacts_deleted == $contacts_count,\n\t\t'message' => $message,\n\t], 200);\n}", "CodeBleu_score": 37.538587121587206}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t$transactions = $this->getTransactions($request);\n\nforeach ($transactions as $transaction) {\ntry {\nBus::dispatchNow(new DeleteTransaction($transaction));\n} catch (Exception $e) {\nflash($e->getMessage())->error();\n}\n}\n\nflash('success', 'messages.deleted', ['resource' => trans_choice('general.transactions', 2)]);\nreturn response(['message' => trans('messages.success.deleted', ['resource' => trans_choice('general.transactions', 2)])], 200);\n}", "CodeBleu_score": 49.08335422477959}, {"code": "<?\npublic function deleteTransactions($request){\n\t\n$selected_transactions = $request->input('selected_transactions');\n$selected_transactions = json_decode($selected_transactions);\n\nforeach ($selected_transactions as $selected_transaction) {\n\n$transaction = Transaction::find($selected_transaction);\n\ntry {\n\nBus::chain([\nnew DeleteTransaction($transaction),\nnew DeleteTransaction($transaction, true),\n])->dispatch();\n\n} catch (Exception $e) {\nflash(__('There was an error while deleting the transaction. Please try again.'))->error();\n\nreturn back();\n}\n}\n\nflash(__('The selected transactions have been deleted successfully.'))->success();\n\nreturn back();\n}", "CodeBleu_score": 33.758960558703365}, {"code": "<?\npublic function deleteTransactions($request){\n\t$transactions = $this->getTransactions($request);\nforeach ($transactions as $transaction) {\ntry {\nBus::dispatchNow(new DeleteTransaction($transaction));\n} catch (Throwable $e) {\nflash()->error($e->getMessage());\n}\n}\n}", "CodeBleu_score": 50.071546918312904}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\t\nif (class_exists($this->requestClass) && $this->requestClass instanceof FormRequest) {\n\n$request = new $this->requestClass();\n\nforeach ($this->data as $row) {\n\n$request->initialize($row);\n\n$rules = $request->rules();\n\n$validator->after(function ($validator) use ($request, $rules) {\n\nif (count($rules) > 0) {\n\ntry {\n\n$validator->validate();\n\n} catch (ValidationException $e) {\n\n$errors = $e->errors();\n\nforeach ($errors as $field => $messages) {\n\nforeach ($messages as $message) {\n\n$validator->errors()->add($field, $message);\n\n}\n\n}\n\n}\n\n}\n\n});\n\n}\n\n}\n\n}", "CodeBleu_score": 34.33376524305595}, {"code": "<?\npublic function withValidator($validator){\n\t$requestClass = $this->getRequestClass();\nif (is_null($requestClass)) {\nreturn $validator;\n}\nif (!is_subclass_of($requestClass, FormRequest::class)) {\nreturn $validator;\n}\n$request = $this->getRequest($requestClass);\n$rules = $this->getValidationRules($request);\nforeach ($this->getData() as $row) {\n$request->replace($row);\n$validator->after(function ($validator) use ($request, $rules) {\ntry {\n$request->validate($rules);\n} catch (ValidationException $e) {\n$errors = $e->errors();\nforeach ($errors as $key => $value) {\nforeach ($value as $message) {\n$validator->errors()->add($key, $message);\n}\n}\n}\n});\n}\nreturn $validator;\n}", "CodeBleu_score": 40.54587197654851}, {"code": "<?\npublic function withValidator($validator){\n\t\nif (class_exists($this->requestClass) && is_subclass_of($this->requestClass, FormRequest::class)) {\n$request = new $this->requestClass();\n\nforeach ($this->data as $row) {\n$request->initialize($row);\n$rules = $request->rules();\n$validator->after(function ($validator) use ($request, $rules) {\n$validator->validateUsing(function ($attribute, $value, $parameters, $validator) use ($request, $rules) {\nif (Arr::has($rules, $attribute)) {\nreturn Validator::make([$attribute => $value], $rules)->validate();\n}\n});\n});\n}\n}\n}", "CodeBleu_score": 31.010326714196644}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\t$this->model = $arguments[0] instanceof Model ? $arguments[0] : null;\n\t$this->request = $arguments[1] instanceof Request ? $arguments[1] : null;\n}", "CodeBleu_score": 25.455133831397198}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\t$this->bootUpdateTrait(...$arguments);\n}", "CodeBleu_score": 8.70186226422645}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\t$this->updateModel(...$arguments);\n\t$this->updateRequest(...$arguments);\n}", "CodeBleu_score": 9.653642087250608}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t$request = request();\n\n$query = $this->applySearch($query, $request);\n\n$query = $this->applySorting($query, $sort, $request);\n\nif ($request->expectsJson() && ! $request->is('api/*')) {\nreturn $query->get();\n}\n\nreturn $query->paginate(request('limit', setting('general.list_limit', 25)));\n}", "CodeBleu_score": 43.78386056207818}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t$request = request();\n\n// Apply search\n$query = $this->applySearch($query);\n\n// Apply sorting\nif (request()->has('sort') && in_array(request()->input('sort'), $this->sortable)) {\n$query = $this->applySorting($query, request()->input('sort'));\n} else {\n$query = $this->applySorting($query, $sort);\n}\n\n// Return all records if JSON response is expected and not an API request\nif (request()->expectsJson() && !request()->is('api/*')) {\nreturn $query->get();\n}\n\n// Paginate results\nreturn $query->paginate(request()->input('limit', setting('general.list_limit', 25)));\n}", "CodeBleu_score": 45.5428356012416}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t$request = request();\n\nif ($request->has('search')) {\nevent(new SearchStringApplying($request->get('search'), $query));\n\n$query = $query->search($request->get('search'));\n\nevent(new SearchStringApplied($request->get('search'), $query));\n}\n\nif ($request->expectsJson() && ! $request->is('api/*')) {\nreturn $query->get();\n}\n\nreturn $query->paginate(\n$request->get('limit', setting('general.list_limit', 25))\n);\n}", "CodeBleu_score": 48.856258384922405}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$open_amount = 0;\n\t$overdue_amount = 0;\n\n\tif ($model->status == 'paid') {\n\t\treturn [\n\t\t\t'open_amount' => $open_amount,\n\t\t\t'overdue_amount' => $overdue_amount\n\t\t];\n\t}\n\n\t$payments = $model->transactions()\n\t\t->where('type', '=', 'payment')\n\t\t->where('payment_type', '=', 'received')\n\t\t->where('reconciled', '=', 0)\n\t\t->where('currency_id', '=', $model->currency_id)\n\t\t->sum('amount');\n\n\t$open_amount = $payments;\n\n\t$due_date = Date::parse($model->due_date, $model->due_time);\n\t$now = Date::now();\n\n\tif ($due_date < $now) {\n\t\t$overdue_amount = $payments;\n\t\t$open_amount = 0;\n\t}\n\n\treturn [\n\t\t'open_amount' => $open_amount,\n\t\t'overdue_amount' => $overdue_amount\n\t];\n}", "CodeBleu_score": 40.87617560805954}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$open = 0;\n\t$overdue = 0;\n\t$payments = 0;\n\n\t// If the document is paid, return zeroes\n\tif ($model->status == 'paid') {\n\t\treturn [\n\t\t\t'open' => 0,\n\t\t\t'overdue' => 0\n\t\t];\n\t}\n\n\t// If the document is not paid, sum the payments\n\tforeach ($model->transactions as $transaction) {\n\t\tif ($transaction->payment_type == 'cash') {\n\t\t\t$payments += $transaction->payment_amount;\n\t\t}\n\t}\n\n\t// If the document is overdue, calculate the overdue amount\n\tif ($model->status == 'partial') {\n\t\t$due_date = new DateTime($model->due_date);\n\t\t$now = new DateTime();\n\t\tif ($due_date < $now) {\n\t\t\t$overdue = $model->total - $payments;\n\t\t} else {\n\t\t\t$open = $model->total - $payments;\n\t\t}\n\t} else {\n\t\t$open = $model->total - $payments;\n\t}\n\n\treturn [\n\t\t'open' => $open,\n\t\t'overdue' => $overdue\n\t];\n}", "CodeBleu_score": 49.4093190806684}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$open_amount = 0;\n\t$overdue_amount = 0;\n\n\tif ($model->status == 'paid') {\n\t\treturn [\n\t\t\t'open_amount' => $open_amount,\n\t\t\t'overdue_amount' => $overdue_amount,\n\t\t];\n\t}\n\n\t$payments = $model->transactions()\n\t\t->where('payment_type', 'payment')\n\t\t->where('status', 'paid')\n\t\t->where('amount', '>', 0)\n\t\t->get();\n\n\tforeach ($payments as $payment) {\n\t\t$open_amount += $payment->amount;\n\t}\n\n\t$due_date = $model->due_date;\n\t$now = Carbon::now();\n\n\tif ($due_date < $now) {\n\t\t$overdue_amount = $open_amount;\n\t\t$open_amount = 0;\n\t}\n\n\treturn [\n\t\t'open_amount' => $open_amount,\n\t\t'overdue_amount' => $overdue_amount,\n\t];\n}", "CodeBleu_score": 41.06826834069291}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$page = $page ?: Paginator::resolveCurrentPage($pageName);\n$perPage = $perPage ?: $this->model->getPerPage();\n$total = $this->toBase()->getCountForPagination();\n$results = $total ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\nreturn new LengthAwarePaginator($results, $total, $perPage, $page, [\n'path' => Paginator::resolveCurrentPath(),\n'pageName' => $pageName,\n]);\n}", "CodeBleu_score": 79.48364900106877}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$this->query->select($columns);\n$total = $this->toBase()->getCountForPagination();\n$perPage = $perPage ?: $this->model->getPerPage();\n$page = $page ?: Paginator::resolveCurrentPage($pageName);\n$items = $total ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\nreturn $this->paginator($items, $total, $perPage, $page, [\n'path' => Paginator::resolveCurrentPath(),\n'pageName' => $pageName,\n]);\n}", "CodeBleu_score": 73.75222280799655}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\n$page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n$perPage = $perPage ?: $this->model->getPerPage();\n\n$total = $this->toBase()->getCountForPagination();\n\n$results = $total ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n\nreturn new LengthAwarePaginator($results, $total, $perPage, $page, [\n'path' => Paginator::resolveCurrentPath(),\n'pageName' => $pageName,\n]);\n}", "CodeBleu_score": 79.47832933841563}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t$reconciliations = Reconciliation::where('id', '=', $request->id)->get();\n\nforeach ($reconciliations as $reconciliation) {\n$reconciliation->status = 'reconciled';\n$reconciliation->save();\n\n$transactions = Transaction::where('account_id', '=', $reconciliation->account_id)\n->where('date', '>=', $reconciliation->start_date)\n->where('date', '<=', $reconciliation->end_date)\n->where('reconciled', '=', false)\n->get();\n\nforeach ($transactions as $transaction) {\n$transaction->reconciled = true;\n$transaction->save();\n}\n}\n}", "CodeBleu_score": 37.19425202495139}, {"code": "<?\npublic function reconcile($request){\n\t$reconciliations = Reconciliation::where('status', 'open')\n->where('account_id', $request->account_id)\n->whereBetween('transaction_date', [$request->start_date, $request->end_date])\n->get();\n\nforeach ($reconciliations as $reconciliation) {\nDB::transaction(function () use ($reconciliation) {\n$reconciliation->status = 'reconciled';\n$reconciliation->save();\n\n$transactions = Transaction::where('reconciliation_id', $reconciliation->id)\n->get();\n\nforeach ($transactions as $transaction) {\n$transaction->reconciled = 1;\n$transaction->save();\n}\n});\n}\n}", "CodeBleu_score": 44.935244292350774}, {"code": "<?\npublic function reconcile($request){\n\t\n$reconciliations = Reconciliation::whereIn('id', $request->input('ids'))->get();\n\n$reconciliations->each(function ($reconciliation) {\n\n$reconciliation->transactions()->update(['reconciled' => 1]);\n\n$reconciliation->transactions()->saveMany(Transaction::where('account_id', $reconciliation->account_id)\n->where('date', '>=', $reconciliation->date)\n->where('date', '<=', $reconciliation->reconciled_date)\n->get()->each(function ($transaction) {\n$transaction->reconciled = 1;\n})->all());\n\n$reconciliation->status = 'reconciled';\n$reconciliation->save();\n\n});\n}", "CodeBleu_score": 35.69703208946584}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t\n$this->deleteExistingInvitations();\n\n$invitation = $this->createNewInvitation();\n\ntry {\n$this->sendInvitationNotification($invitation);\n} catch (Exception $e) {\n$this->deleteInvitation($invitation);\nthrow $e;\n}\n\nreturn $invitation;\n}", "CodeBleu_score": 11.529127471572838}, {"code": "<?\npublic function handle(): UserInvitation{\n\t$invitations = UserInvitation::where('user_id', $this->user->id)->where('status', 'pending')->get();\nforeach ($invitations as $invitation) {\n$invitation->delete();\n}\n$invitation = UserInvitation::create([\n'user_id' => $this->user->id,\n'token' => Str::random(64),\n]);\ntry {\n$this->dispatch(new Notification($invitation));\n} catch (TransportException $e) {\n$invitation->delete();\nthrow new Exception('Unable to send invitation to user.');\n}\nreturn $invitation;\n}", "CodeBleu_score": 41.64491886995439}, {"code": "<?\npublic function handle(): UserInvitation{\n\t$this->user->invitations()->delete();\n$invitation = $this->user->invitations()->create([\n'token' => Str::random(64),\n]);\ntry {\ndispatch(new Notification($invitation));\n} catch (TransportException $e) {\nthrow new Exception('Unable to send invitation email.');\n}\nreturn $invitation;\n}", "CodeBleu_score": 22.028546795087266}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\tif($this->transaction->reconciled) {\nthrow new \\Exception('Transaction has already been reconciled.');\n}\n\nif($this->transaction->type->is_transfer) {\nthrow new \\Exception('Transfer transactions cannot be authorized.');\n}\n}", "CodeBleu_score": 29.99560883349808}, {"code": "<?\npublic function authorize(): void{\n\t// check if transaction has been reconciled\nif ($this->transaction->reconciled) {\nthrow new \\Exception('Transaction has already been reconciled');\n}\n\n// check if transaction is a transfer\nif ($this->transaction->type_id == Transaction::TYPE_TRANSFER) {\nthrow new UnauthorizedException('Transfer transactions are not allowed to be reconciled');\n}\n}", "CodeBleu_score": 30.05829708114779}, {"code": "<?\npublic function authorize(): void{\n\tif ($this->is_reconciled) {\nthrow new Exception('This transaction has been reconciled.');\n}\nif ($this->is_transfer) {\nthrow new UnauthorizedException('This transaction is a transfer.');\n}\n}", "CodeBleu_score": 23.704224398866568}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t\tif (tableName.startsWith(\"erp_\")) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 6.151507809012724}, {"code": "public boolean doTableFilter(String tableName){\n\t\tif (tableName.startsWith(\"erp\")) {\n\t\treturn true;\n\t}\n\tif (tableName.startsWith(\"jsh_\")) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 8.591473118202797}, {"code": "public boolean doTableFilter(String tableName){\n\t\tif (tableName.startsWith(\"t_\")) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 6.148338271080098}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\tmapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 63.38599822289982}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 74.32520802003512}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tString basePackage = \"com.jsh.erp.datasource.mappers*\";\n\tmapperScannerConfigurer.setBasePackage(basePackage);\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 56.2643104980839}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t\tList<Account> dataList = null;\n\ttry{\n\t\tdataList = accountService.findBySelect();\n\t}catch(Exception e){\n\t\tlogger.error(e.getMessage(), e);\n\t}\n\treturn returnJson(dataList, \"1\", request);\n}", "CodeBleu_score": 20.15504396494797}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t\tList<Account> dataList = null;\n    Integer total = null;\n    try{\n        String name = request.getParameter(\"name\");\n        String type = request.getParameter(\"type\");\n        String remark = request.getParameter(\"remark\");\n        String enable = request.getParameter(\"enable\");\n        String operater = request.getParameter(\"operater\");\n        String accountIds = request.getParameter(\"accountIds\");\n        String sort = request.getParameter(\"sort\");\n        String order = request.getParameter(\"order\");\n        Integer offset = Integer.valueOf(request.getParameter(\"offset\"));\n        Integer rows = Integer.valueOf(request.getParameter(\"rows\"));\n        dataList = accountService.findBySelect(name, type, remark, enable, operater, accountIds, sort, order, offset, rows);\n        total = accountService.countBySelect(name, type, remark, enable, operater, accountIds, sort, order, offset, rows);\n    }catch(Exception e){\n        e.printStackTrace();\n    }\n    Map<String, Object> objectMap = new HashMap<String, Object>();\n    objectMap.put(\"rows\", dataList);\n    objectMap.put(\"total\", total);\n    return returnJson(objectMap, ErpInfo.OK.name, ErpInfo.OK.code);\n}", "CodeBleu_score": 30.550522413661724}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t\tList<Account> dataList = null;\n    Integer total = null;\n    try{\n        String name = request.getParameter(\"name\");\n        String type = request.getParameter(\"type\");\n        String remark = request.getParameter(\"remark\");\n        String opertime = request.getParameter(\"opertime\");\n        String endTime = request.getParameter(\"endTime\");\n        String beginTime = request.getParameter(\"beginTime\");\n        String deleteFlag = request.getParameter(\"deleteFlag\");\n        String account = request.getParameter(\"account\");\n        String debit = request.getParameter(\"debit\");\n        String credit = request.getParameter(\"credit\");\n        String anaAccount = request.getParameter(\"anaAccount\");\n        String anaDebtor = request.getParameter(\"anaDebtor\");\n        String anaCredit = request.parameter(\"anaCredit\");\n        String anotherAmount = request.getParameter(\"anotherAmount\");\n        String anotherAmountSum = request.getParameter(\"anotherAmountSum\");\n        String anotherAmountRemark = request.getParameter(\"anotherAmountRemark\");\n        String supplierId = request.getParameter(\"supplierId\");\n        String customerId = request.getParameter(\"customerId\");\n        String beginTimeMonth = request.getParameter(\"beginTimeMonth\");\n        String endTimeMonth = request.getParameter(\"endTimeMonth\");\n        String beginTimeYear = request.getParameter(\"beginTimeYear\");\n        String endTimeYear = request.getParameter(\"endTimeYear\");\n        String month = request.getParameter(\"month\");\n        String year = request.getParameter(\"year\");\n        String beginInOut = request.getParameter(\"beginInOut\");\n        String endInOut = request.getParameter(\"endInOut\");\n        String beginChangeAmount = request.getParameter(\"beginChangeAmount\");\n        String endChangeAmount = request.getParameter(\"endChangeAmount\");\n        String changeAmount = request.getParameter(\"changeAmount\");\n        String beginBalance = request.getParameter(\"beginBalance\");\n        String endBalance = request.getParameter(\"endBalance\");\n        String balance = request.getParameter(\"balance\");\n        String beginRemark = request.getParameter(\"beginRemark\");\n        String endRemark = request.getParameter(\"endRemark\");\n        String remarkAnd = request.getParameter(\"remarkAnd\");\n        String remarkOr = request.getParameter(\"remarkOr\");\n        String remarkNot = request.getParameter(\"remarkNot\");\n        String remarkLike = request.getParameter(\"remarkLike\");\n        String remarkNotLike = request.getParameter(\"remarkNotLike\");\n        String remarkStart = request.getParameter(\"remarkStart\");\n        String remarkEnd = request.getParameter(\"remarkEnd", "CodeBleu_score": 17.86720736716213}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t", "CodeBleu_score": 10.89778041758137}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t Map<String, Object> objectMap = new HashMap<>();\n String res = null;\n try {\n     res = accountService.listWithBalance(name, serialNo, currentPage, pageSize);\n     objectMap.put(\"data\", res);\n     return returnJson(objectMap, ErpInfo.OK.name, ErpInfo.OK.code);\n } catch (Exception e) {\n     e.printStackTrace();\n     objectMap.put(\"data\", res);\n     return returnJson(objectMap, ErpInfo.ERROR.name, ErpInfo.ERROR.code);\n }\n }", "CodeBleu_score": 34.680143900668185}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\ttry{\n    AccountService accountService = new AccountService();\n    String res = accountService.listWithBalance(name, serialNo, currentPage, pageSize);\n    return returnJson(res);\n}catch(Exception e){\n    e.printStackTrace();\n    return returnJson(e);\n}\n}", "CodeBleu_score": 21.60363703965154}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n    String exception = \"\u5f02\u5e38\";\n    String message = \"\u83b7\u53d6\u7edf\u8ba1\u4fe1\u606f\u5931\u8d25\";\n    Integer code = 500;\n    try {\n        AccountService accountService = new AccountService();\n        List<AccountVo4List> dataList = accountService.getStatisticList(name, serialNo);\n        if (null != dataList) {\n            code = 200;\n            message = \"\u8bf7\u6c42\u6210\u529f\";\n            res.code = code;\n            res.data = dataList;\n        } else {\n            code = 200;\n            message = \"\u65e0\u6570\u636e\";\n        }\n    } catch(Exception e){\n        e.printStackTrace();\n        message = exception;\n        log.error(message);\n        return res;\n    }\n    return res;\n}", "CodeBleu_score": 45.06833854643918}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\tres.code = 200;\n\tres.data = accountService.getStatistics(name, serialNo);\n\treturn res;\n}", "CodeBleu_score": 32.91437100419354}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo erpInfo = new BaseResponseInfo();\n    Map<String, Object> objectMap = new HashMap<>();\n    String operType = request.getParameter(\"operType\");\n    String billType = request.getParameter(\"billType\");\n    String billTime = request.getParameter(\"billTime\");\n    String endTime = request.getParameter(\"endTime\");\n    String beginTime = request.getParameter(\"beginTime\");\n    String endTimeMonth = request.getParameter(\"endTimeMonth\");\n    String beginTimeMonth = request.getParameter(\"beginTimeMonth\");\n    String endTimeYear = request.getParameter(\"endTimeYear\");\n    String beginTimeYear = request.getParameter(\"beginTimeYear\");\n    String endTimeDay = request.getParameter(\"endTimeDay\");\n    String beginTimeDay = request.getParameter(\"beginTimeDay\");\n    String type = request.getParameter(\"type\");\n    String billNo = request.getParameter(\"billNo\");\n    String accountIds = request.getParameter(\"accountIds\");\n    String accountType = request.getParameter(\"accountType\");\n    String organIds = request.getParameter(\"organIds\");\n    String supplierId = request.getParameter(\"supplierId\");\n    String customerId = request.getParameter(\"customerId\");\n    String endTimeYearMonth = request.getParameter(\"endTimeYearMonth\");\n    String beginTimeYearMonth = request.getParameter(\"beginTimeYearMonth\");\n    String endTimeYearMonthDay = request.getParameter(\"endTimeYearMonthDay\");\n    String beginTimeYearMonthDay = request.getParameter(\"beginTimeYearMonthDay\");\n    String endTimeYearMonthDayHour = request.getParameter(\"endTimeYearMonthDayHour\");\n    String beginTimeYearMonthDayHour = request.getParameter(\"beginTimeYearMonthDayHour\");\n    String endTimeYearMonthDayHourMinute = request.getParameter(\"endTimeYearMonthDayHourMinute\");\n    String beginTimeYearMonthDayHourMinute = request.getParameter(\"beginTimeYearMonthDayHourMinute\");\n    String endTimeYearMonthDayHourMinuteSecond = request.getParameter(\"endTimeYearMonthDayHourMinuteSecond\");\n    String beginTimeYearMonthDayHourMinuteSecond = request.getParameter(\"beginTimeYearMonthDayHourMinuteSecond\");\n    String endTimeYearMonthDayHourMinuteSecondMillSecond = request.getParameter(\"endTimeYearMonthDayHourMinuteSecondMillSecond\");\n    String beginTimeYearMonthDayHourMinuteSecondMillSecond = request.getParameter(\"beginTimeYearMonthDayHourMinuteSecondMillSecond\");\n    String billTimeMonth = request.getParameter(\"billTimeMonth\");\n    String billTimeYear =", "CodeBleu_score": 25.425458058514007}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t\tBaseResponseInfo resInfo = new BaseResponseInfo();\n\ttry{\n\t\tList<AccountHeadVo4ListEx> dataList = accountHeadService.getDetailByNumber(billNo);\n\t\tif(null != dataList && dataList.size() > 0) {\n\t\t\tresInfo.code = 200;\n\t\t\tresInfo.data = dataList.get(0);\n\t\t\treturn resInfo;\n\t\t}\n\t}catch(Exception e){\n\t\tresInfo.code = 500;\n\t\tresInfo.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn resInfo;\n }", "CodeBleu_score": 44.091654884507655}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t//        String billNo = request.getParameter(\"billNo\");\n        BaseResponseInfo responseInfo = new BaseResponseInfo();\n        AccountHeadService accountHeadService = new AccountHeadService();\n        try {\n            AccountHeadVo4ListEx s = accountHeadService.getDetailByNumber(billNo);\n            responseInfo.code = 200;\n            responseInfo.data = s;\n        } catch(Exception e){\n            e.printStackTrace();\n            responseInfo.code = 500;\n            responseInfo.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return responseInfo;\n    }", "CodeBleu_score": 47.9728481222211}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t //     String billNo = request.getParameter(\"billNo\");\n        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            AccountHeadVo4ListEx s = accountHeadService.getDetailByNumber(billNo);\n            if(s == null) {\n                res.code = 200;\n                res.data = \"null\";\n            } else {\n                res.code = 200;\n                res.data = s;\n            }\n        } catch(Exception e){\n            e.printStackTrace();\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 53.46715987471703}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry{\n\t\tList<Depot> dataList = userService.findUserDepotByCurrentUser(request);\n\t\tif(null != dataList) {\n\t\t\tres.code = 200;\n\t\t\tres.data = dataList;\n\t\t} else {\n\t\t\tres.code = 500;\n\t\t\tres.data = \"\u83b7\u53d6\u4fe1\u606f\u5931\u8d25\";\n\t\t}\n\t} catch(Exception e){\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u4fe1\u606f\u5931\u8d25\";\n\t\te.printStackTrace();\n\t}\n\treturn res;\n}", "CodeBleu_score": 50.51145164625712}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry{\n\t\tList<DepotEx> depotList = depotService.findDepotByCurrentUser(request);\n\t\tres.code = 200;\n\t\tres.data = depotList;\n\t}catch(Exception e){\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u4fe1\u606f\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 49.65600921987274}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry{\n\t\tList<DepotEx> depotList = depotService.findDepotByCurrentUser(request);\n\t\tdepotList.forEach(depotEx -> {\n\t\t\tdepotEx.setMaterialList(depotService.findMaterialListByDepotId(depotEx.getId()));\n\t\t});\n\t\tres.code = 200;\n\t\tres.data = depotList;\n\t} catch(Exception e){\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u4fe1\u606f\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 50.06987278507431}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t\tlogger.info(\"findRoleFunction type:{}, keyId:{}\", type, keyId);\n    JSONArray jsonArray = new JSONArray();\n    JSONObject outer = new JSONObject();\n    try {\n        List<Function> functions = functionService.findRoleFunction(type, keyId);\n        if (functions == null) {\n            return jsonArray;\n        }\n        for (Function function : functions) {\n            if (function.getDeleteFlag() == 0) {\n                JSONObject item = new JSONObject();\n                item.put(\"id\", function.getId());\n                item.put(\"value\", function.getValue());\n                item.put(\"name\", function.getName());\n                item.put(\"parentId\", function.getParentId());\n                item.put(\"sort\", function.getSort());\n                item.put(\"type\", function.getType());\n                item.put(\"keyId\", function.getKeyId());\n                item.put(\"url\", function.getUrl());\n                item.put(\"icon\", function.getIcon());\n                item.put(\"description\", function.getDescription());\n                item.put(\"createTime\", function.getCreateTime());\n                item.put(\"updateTime\", function.getUpdateTime());\n                item.put(\"deleteFlag\", function.getDeleteFlag());\n                jsonArray.add(item);\n            }\n        }\n        outer.put(\"functions\", jsonArray);\n        return jsonArray;\n    } catch (Exception e) {\n        e.printStackTrace();\n        logger.error(ExceptionConstants.DATA_READ_FAIL_MSG, e);\n        return null;\n    }\n}", "CodeBleu_score": 38.442338143372744}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t//    String ubType = request.getParameter(\"UBType\");\n//    String ubKeyId = request.getParameter(\"UBKeyId\");\n    JSONArray jsonArray = new JSONArray();\n    JSONObject outerJsonObject = new JSONObject();\n    List<UserBusiness> userBusinessList = null;\n    try{\n        userBusinessList = userBusinessService.findBySelective(type, keyId);\n    }catch(Exception e){\n        e.printStackTrace();\n        logger.error(\">>>>>>>>>>>>>>>\u67e5\u627e\u7528\u6237\u4e1a\u52a1\u4fe1\u606f\u51fa\u9519\", e);\n    }\n    if(userBusinessList != null && userBusinessList.size() > 0) {\n        for(UserBusiness ub: userBusinessList) {\n            if(ub.getFunctionId() != null) {\n                Function function = functionService.getFunction(ub.getFunctionId());\n                if(function != null) {\n                    JSONObject innerJsonObject = new JSONObject();\n                    innerJsonObject.put(\"id\", function.getId());\n                    innerJsonObject.put(\"value\", function.getValue());\n                    innerJsonObject.put(\"name\", function.getName());\n                    innerJsonObject.put(\"parentId\", function.getParentId());\n                    innerJsonObject.put(\"sort\", function.getSort());\n                    innerJsonObject.put(\"type\", function.getType());\n                    innerJsonObject.put(\"url\", function.getUrl());\n                    innerJsonObject.put(\"icon\", function.getIcon());\n                    innerJsonObject.put(\"isShow\", function.getIsShow());\n                    innerJsonObject.put(\"isControl\", function.getIsControl());\n                    innerJsonObject.put(\"isDefault\", function.getIsDefault());\n                    innerJsonObject.put(\"status\", function.getStatus());\n                    innerJsonObject.put(\"memo\", function.getMemo());\n                    innerJsonObject.put(\"creator\", function.getCreator());\n                    innerJsonObject.put(\"updater\", function.getUpdater());\n                    innerJsonObject.put(\"createTime\", function.getCreateTime());\n                    innerJsonObject.put(\"updateTime\", function.getUpdateTime());\n                    innerJsonObject.put(\"parentIdName\", function.getParentIdName());\n                    innerJsonObject.put(\"functionName\", function.getFunctionName());\n                    jsonArray.add(innerJsonObject);\n                }\n            }\n        }\n    }\n    outerJsonObject.put(\"functions\", jsonArray);\n    return jsonArray;\n}", "CodeBleu_score": 34.91436566672343}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t\tJSONArray jsonArray = new JSONArray();\n\ttry {\n\t    User user = ErpInfo.getUser(request);\n\t    // \u4e0d\u662f\u8d85\u7ea7\u7ba1\u7406\u5458\uff0c\u5219\u8fc7\u6ee4\u6389\u7cfb\u7edf\u7ba1\u7406\n            if (user.getJshRole().getRid() != 1) {\n                List<Function> functionList = functionService.getRoleFunction(type, keyId);\n                for (Function function : functionList) {\n                    if (function.getJshFunction().getFname().equals(\"\u7cfb\u7edf\u7ba1\u7406\")) {\n                        continue;\n                    }\n                    jsonArray.add(function);\n                }\n            } else {\n                jsonArray = functionService.getRoleFunction(type, keyId);\n            }\n\t} catch(Exception e) {\n\t\te.printStackTrace();\n\t\tthrow e;\n\t}\n\treturn jsonArray;\n}", "CodeBleu_score": 32.35858585382244}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\tBaseResponseInfo erpInfo = new BaseResponseInfo();\n\tMap<String, String> map = new HashMap<String, String>();\n\ttry{\n\t\tPlatformConfigService platformConfigService = (PlatformConfigService) SpringContextUtil.getBean(\"platformConfigService\");\n\t\tPlatformConfig platformConfig = platformConfigService.getPlatformConfigByPlatformKey(platformKey);\n\t\tif(platformConfig == null) {\n\t\t\tmap.put(\"status\", \"failure\");\n\t\t\tmap.put(\"message\", \"\u83b7\u53d6\u5e73\u53f0\u4fe1\u606f\u5931\u8d25\");\n\t\t\treturn returnJson(erpInfo, map);\n\t\t}\n\t\tmap.put(\"status\", \"success\");\n\t\tmap.put(\"message\", \"\u83b7\u53d6\u5e73\u53f0\u4fe1\u606f\u6210\u529f\");\n\t\tmap.put(\"platformValue\", platformConfig.getPlatformValue());\n\t\tmap.put(\"platformName\", platformConfig.getPlatformName());\n\t\treturn returnJson(erpInfo, map);\n\t}catch(Exception e){\n\t\tmap.put(\"status\", \"failure\");\n\t\tmap.put(\"message\", \"\u83b7\u53d6\u5e73\u53f0\u4fe1\u606f\u5931\u8d25\");\n\t\treturn returnJson(erpInfo, map);\n\t}\n}", "CodeBleu_score": 31.541389898333584}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t//        String platformKey = request.getParameter(\"platformKey\");\n        BaseResponseInfo responseInfo = new BaseResponseInfo();\n        Map<String, Object> map = new HashMap<String, Object>();\n        try {\n            PlatformConfig result = platformConfigService.getPlatformConfigByPlatformKey(platformKey);\n            if (null != result) {\n                map.put(\"result\", result);\n                responseInfo.code = 200;\n                responseInfo.data = map;\n            } else {\n                responseInfo.code = 500;\n                responseInfo.data = \"\u83b7\u53d6\u5931\u8d25\";\n            }\n        } catch(Exception e){\n            e.printStackTrace();\n            responseInfo.code = 500;\n            responseInfo.data = \"\u83b7\u53d6\u5931\u8d25\";\n        }\n        return responseInfo;\n    }", "CodeBleu_score": 43.176865348281744}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\tMap<String, Object> map = new HashMap<String, Object>();\n\ttry{\n\t\tPlatformConfigService platformConfigService = new PlatformConfigService();\n\t\tPlatformConfig platformConfig = platformConfigService.getPlatformConfigByPlatformKey(platformKey);\n\t\tif(platformConfig == null) {\n\t\t\tresponseInfo.code = 500;\n\t\t\tresponseInfo.msg = \"\u8bf7\u6c42\u5931\u8d25\";\n\t\t\treturn responseInfo;\n\t\t}\n\t\tmap.put(\"platformConfig\", platformConfig);\n\t\tresponseInfo.code = 200;\n\t\tresponseInfo.data = map;\n\t\tresponseInfo.msg = \"\u8bf7\u6c42\u6210\u529f\";\n\t} catch(Exception e){\n\t\tresponseInfo.code = 500;\n\t\tresponseInfo.msg = \"\u8bf7\u6c42\u5931\u8d25\";\n\t\treturn responseInfo;\n\t}\n\treturn responseInfo;\n}", "CodeBleu_score": 41.23050402621461}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo resInfo = new BaseResponseInfo();\n\ttry {\n\t\tList<SystemConfig> list = systemConfigService.getSystemConfig();\n\t\tif(null != list && list.size() > 0) {\n\t\t\tSystemConfig s = list.get(0);\n\t\t\tresInfo.code = 200;\n\t\t\tresInfo.data = s;\n\t\t} else {\n\t\t\tresInfo.code = 500;\n\t\t\tresInfo.msg = \"\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\u5f02\u5e38\";\n\t\t}\n\t} catch(Exception e) {\n\t\tresInfo.code = 500;\n\t\tresInfo.msg = \"\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\u5f02\u5e38\";\n\t\tlogger.error(e.getMessage(), e);\n\t}\n\treturn resInfo;\n}", "CodeBleu_score": 50.263319190703825}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\tres.code = 200;\n\tres.data = \"1\";\n\treturn res;\n}", "CodeBleu_score": 23.155312300483782}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tSystemConfigService systemConfigService = new SystemConfigService();\n\t\tList<SystemConfig> dataList = systemConfigService.getSystemConfig();\n\t\tif(dataList!=null && dataList.size()>0) {\n\t\t\tres.code = 200;\n\t\t\tres.data = dataList.get(0);\n\t\t} else {\n\t\t\tres.code = 500;\n\t\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t\t}\n\t} catch(Exception e) {\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t\te.getStackTrace();\n\t}\n\treturn res;\n}", "CodeBleu_score": 54.305295038294666}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tString method = \"upload\";\n    String businessPath = request.getParameter(\"businessPath\");\n    MultipartFile file = ((MultipartHttpServletRequest) request).getFile(\"file\");\n    String originalFilename = file.getOriginalFilename();\n    String suffix = originalFilename.substring(originalFilename.lastIndexOf(\".\"));\n    String fileName = StringUtil.getUuid() + suffix;\n    String ossPath = businessPath + \"/\" + fileName;\n    String url = \"\";\n    String result = \"fail\";\n    String message = \"\u4e0a\u4f20\u5931\u8d25\";\n    String exceptionMessage = \"\";\n    try {\n        // \u4fdd\u5b58\u6587\u4ef6\n        FileUtils.upload(ossPath, file);\n        // \u4e0a\u4f20\u6210\u529f\n        url = getBasePath() + ossPath;\n        result = \"success\";\n        message = \"\u4e0a\u4f20\u6210\u529f\";\n    } catch (Exception e) {\n        exceptionMessage = e.getMessage();\n        logger.error(e.getMessage());\n    }\n    BaseResponseInfo res = new BaseResponseInfo();\n    res.code = result;\n    res.data = url;\n    res.msg = message;\n    res.exceptionMessage = exceptionMessage;\n    return res;\n}", "CodeBleu_score": 41.29594098633418}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tMultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n\t\tMultipartFile file = multipartRequest.getFile(\"file\");\n\t\tString businessType = request.getParameter(\"businessType\");\n\t\tString businessId = request.getParameter(\"businessId\");\n\t\tString originalFileName = file.getOriginalFilename();\n\t\tString suffix = originalFileName.substring(originalFileName.lastIndexOf(\".\"));\n\t\tString newFileName = StringUtil.randomId() + suffix;\n\t\tString fileBusinessPath = FileUtils.getFileBusinessPath(businessType, businessId);\n\t\tString fileBusinessTypePath = FileUtils.getFileBusinessTypePath(businessType);\n\t\tString fileBusinessAllPath = FileUtils.getFileBusinessAllPath(businessType, businessId);\n\t\tString fileBusinessTypeAllPath = FileUtils.getFileBusinessTypeAllPath(businessType);\n\t\tString filePath = FileUtils.getUploadPath() + fileBusinessPath + fileBusinessTypePath + fileBusinessAllPath;\n\t\tString fileAllPath = FileUtils.getUploadPath() + fileBusinessPath + fileBusinessTypePath + fileBusinessTypeAllPath;\n\t\tString allFilePath = FileUtils.getUploadPath() + fileBusinessPath + fileBusinessTypePath;\n\t\tString url = FileUtils.getUrl(fileBusinessPath + fileBusinessTypePath + fileBusinessAllPath);\n\t\tFile targetFile = new File(filePath);\n\t\tif (!targetFile.exists()) {\n\t\t\ttargetFile.mkdirs();\n\t\t}\n\t\tfile.transferTo(targetFile);\n\t\tres.code = 200;\n\t\tres.data = url;\n\t} catch (Exception e) {\n\t\tres.code = 500;\n\t\tres.data = \"\u4e0a\u4f20\u5931\u8d25\";\n\t\tlogger.error(e.getMessage(), e);\n\t}\n\treturn res;\n}", "CodeBleu_score": 44.55796470763661}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\t// \u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u7c7b\u578b\n\t\tString type = request.getParameter(\"type\");\n\t\t// \u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\n\t\tMultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n\t\tMultipartFile file = multipartRequest.getFile(\"file\");\n\t\t// \u4e0a\u4f20\u6587\u4ef6\n\t\tif (type.equals(\"image\")) {\n\t\t\tres = uploadImage(file, request);\n\t\t} else if (type.equals(\"file\")) {\n\t\t\tres = uploadFile(file, request);\n\t\t} else {\n\t\t\tres.code = 500;\n\t\t\tres.msg = \"\u4e0a\u4f20\u6587\u4ef6\u7c7b\u578b\u9519\u8bef\";\n\t\t}\n\t} catch (Exception e) {\n\t\tres.code = 500;\n\t\tres.msg = \"\u4e0a\u4f20\u6587\u4ef6\u5931\u8d25\";\n\t\tlogger.error(e.getMessage(), e);\n\t}\n\treturn res;\n}", "CodeBleu_score": 45.186632410271535}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t//        try {", "CodeBleu_score": 4.729595318249916}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t//        String title = jsonObject.getString(\"title\");", "CodeBleu_score": 4.807288443435734}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t // \u5f00\u59cb\u65f6\u95f4\n long beginTime = System.currentTimeMillis();\n // \u65e5\u5fd7\u8bb0\u5f55\u5668\n Logger logger = LoggerFactory.getLogger(ExportExcelController.class);\n // \u5bfc\u51fa\u6587\u4ef6\u540d\n String fileName = jsonObject.getString(\"fileName\");\n // \u5bfc\u51fa\u6587\u4ef6\u7c7b\u578b\n String fileType = jsonObject.getString(\"fileType\");\n // \u5bfc\u51fa\u6570\u636e\u7c7b\u578b\n String dataType = jsonObject.getString(\"dataType\");\n // \u5bfc\u51fa\u6570\u636e\u6765\u6e90\n String dataSource = jsonObject.getString(\"dataSource\");\n // \u5bfc\u51fa\u6570\u636e\u6765\u6e90\n String dataParam = jsonObject.getString(\"dataParam\");\n // \u5bfc\u51fa\u6570\u636e\u6765\u6e90\n String dataParam2 = jsonObject.getString(\"dataParam2\");\n // \u5bfc\u51fa\u6570\u636e\u6765\u6e90\n String dataParam3 = jsonObject.getString(\"dataParam3\");\n // \u5bfc\u51fa\u6570\u636e\u6765\u6e90\n String dataParam4 = jsonObject.getString(\"dataParam4\");\n // \u5bfc\u51fa\u6570\u636e\u6765\u6e90\n String dataParam5 = jsonObject.getString(\"dataParam5\");\n // \u5bfc\u51fa\u6570\u636e\u6765\u6e90\n String dataParam6 = jsonObject.getString(\"dataParam6\");\n // \u5bfc\u51fa\u6570\u636e\u6765\u6e90\n String dataParam7 = jsonObject.getString(\"dataParam7\");\n // \u5bfc\u51fa\u6570\u636e\u6765\u6e90\n String dataParam8 = jsonObject.getString(\"dataParam8\");\n // \u5bfc\u51fa\u6570\u636e\u6765\u6e90\n String dataParam9 = jsonObject.getString(\"dataParam9\");\n // \u5bfc\u51fa\u6570\u636e\u6765\u6e90\n String dataParam10 = jsonObject.getString(\"dataParam10\");\n // \u5bfc\u51fa\u6570\u636e\u6765\u6e90\n String dataParam11 = jsonObject.getString(\"dataParam11\");\n // \u5bfc\u51fa\u6570\u636e\u6765\u6e90\n String dataParam12 = jsonObject.getString(\"dataParam12\");\n // \u5bfc\u51fa\u6570\u636e\u6765\u6e90\n String dataParam13 = jsonObject.getString(\"dataParam13\");\n // \u5bfc\u51fa\u6570\u636e\u6765\u6e90\n String dataParam14 = jsonObject.getString(\"dataParam14\");\n // \u5bfc\u51fa\u6570\u636e\u6765\u6e90\n String dataParam15 = jsonObject.getString(\"dataParam15\");\n // \u5bfc\u51fa\u6570\u636e\u6765\u6e90\n String dataParam16 = jsonObject.getString(\"dataParam16\");\n // \u5bfc\u51fa\u6570\u636e\u6765\u6e90\n String dataParam17 = jsonObject.getString(\"dataParam17\");\n // \u5bfc\u51fa\u6570\u636e\u6765\u6e90\n String dataParam18 = jsonObject.getString(\"dataParam18\");\n // \u5bfc\u51fa\u6570\u636e\u6765\u6e90\n String dataParam19 = jsonObject.getString(\"dataParam", "CodeBleu_score": 30.814611396662368}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tint result=0;\n\ttry{\n\t\tresult=accountMapper.insertAccount(obj);\n\t\t//\u63d2\u5165\u64cd\u4f5c\u7684\u65e5\u5fd7\u8bb0\u5f55\n\t\tlogService.create(new Logdetails(getUser(request), \"\u5355\u636e\", \"\u65b0\u589e\", \"\u8d22\u52a1\u8d26\u6237\", obj.get(\"accountId\").toString(), \"\u6210\u529f\"));\n\t}catch(Exception e){\n\t\t//\u63d2\u5165\u64cd\u4f5c\u7684\u65e5\u5fd7\u8bb0\u5f55\n\t\tlogService.create(new Logdetails(getUser(request), \"\u5355\u636e\", \"\u65b0\u589e\", \"\u8d22\u52a1\u8d26\u6237\", obj.get(\"accountId\").toString(), \"\u5931\u8d25\"+e.getMessage()));\n\t\treturn 0;\n\t}\n\treturn result;\n}", "CodeBleu_score": 26.172990413634462}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tint result=0;\n\ttry{\n\t\tAccount account = JSONObject.toJavaObject(obj, Account.class);\n\t\taccount.setType(AccountTypeEnum.getTypeByKey(account.getType()));\n\t\taccount.setStatus(AccountStatusEnum.ENABLE.getValue());\n\t\taccount.setCreateTime(new Date());\n\t\taccount.setCreator(request.getHeader(\"userid\"));\n\t\taccount.setRemark(account.getRemark());\n\t\tresult=dao.insertAccount(account);\n\t\t// \u540c\u6b65\u66f4\u65b0\u7f13\u5b58\n\t\tList<Account> list = getAccountListById(account.getType());\n\t\tCacheManager.setAccountListByType(list, account.getType());\n\t}catch(Exception e){\n\t\tJshException.writeFail(logger, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 43.557274287453005}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tint result=0;\n\ttry{\n\t\tresult=accountMapper.insertAccount(obj);\n\t\t//\u63d2\u5165\u64cd\u4f5c\u7684\u65e5\u5fd7\u8bb0\u5f55\n\t\tlogService.insertLog(new Logdetails(getUser(request), \"\u589e\u52a0\u8d22\u52a1\u8d26\u6237\", \"\u589e\u52a0\u4e86\u7f16\u53f7\u4e3a  \" + obj.get(\"accountCode\") + \" \" + obj.get(\"accountName\") + \" \" + obj.get(\"remark\") + \" \" + \"\u7684\u4fe1\u606f\",\n\t\t\t\tTools.getNowTime()));\n\t}catch(Exception e){\n\t\tlogService.insertLog(new Logdetails(getUser(request), \"\u589e\u52a0\u8d22\u52a1\u8d26\u6237\", \"\u589e\u52a0\u8d22\u52a1\u8d26\u6237\u5931\u8d25\",\n\t\t\t\tTools.getNowTime(), e.getMessage()));\n\t\treturn 0;\n\t}\n\treturn result;\n}", "CodeBleu_score": 27.08620620067861}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\tLong result = null;\n\ttry {\n\t\tresult = accountMapper.listWithBalanceCount(name, serialNo);\n\t} catch(Exception e) {\n\t\tJshException.writeFail(logger, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 59.00001658252256}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\tLong result = null;\n\ttry {\n\t\tresult = accountMapper.listWithBalanceCount(name, serialNo);\n\t} catch(Exception e) {\n\t\tJshException.writeFail(logger, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 59.00001658252256}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\tLong result = 0L;\n\ttry{\n\t\tresult = accountMapperEx.listWithBalanceCount(name, serialNo);\n\t}catch(Exception e){\n\t\tJshException.writeFail(logger, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 55.350608945269975}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\treturn depotItemMapperEx.deleteDepotItemById(id);\n}", "CodeBleu_score": 14.088911997054081}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tlogger.info(\"\u5220\u9664\u4ed3\u4f4d\u660e\u7ec6\u4fe1\u606f\");\n    int result=0;\n    try{\n        result=depotItemMapperEx.deleteDepotItemById(id);\n    }catch(Exception e){\n        logger.error(e.getMessage(), e);\n        result=0;\n    }\n    return result;\n}", "CodeBleu_score": 58.30034781527766}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\treturn 1;\n    /*try{\n        DepotItemMapper depotItemMapper=SpringUtils.getBean(DepotItemMapper.class);\n        DepotItem depotItem = depotItemMapper.selectByPrimaryKey(id);\n        int result = depotItemMapper.deleteByPrimaryKey(id);\n        //\u5220\u9664\u5bf9\u5e94\u64cd\u4f5c\u8bb0\u5f55\n        logService.insertLog(BusinessConstants.LOG_OPERATION_TYPE_DELETE, Tools.getOperationInfo(request, \"\u5355\u636e\", depotItem.getMaterialName()), request.getRemoteAddr(), request.getHeader(\"user-agent\"));\n        return result;\n    }catch(Exception e){\n        logger.error(e.getMessage(), e);\n        return 0;\n    }*/\n}", "CodeBleu_score": 10.58309959653111}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\ttry {\n\t\t// Create an HTTP client.\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\n\t\t// Construct the request URL.\n\t\tString url = String.format(\"%s/projects/%s/%s/%s\", baseUrl, projectName, nodeType, nodeKey);\n\n\t\t// Create an HTTP GET request.\n\t\tHttpGet request = new HttpGet(url);\n\n\t\t// Execute the request and process the response.\n\t\tCloseableHttpResponse response = httpClient.execute(request);\n\t\tint statusCode = response.getStatusLine().getStatusCode();\n\t\tif (statusCode == 200) {\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tif (entity != null) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\ttry {\n\t\t\thttpClient.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 42.76847846921347}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\ttry {\n\t\tString url = String.format(\"%s/projects/%s/%s/%s\", graphService.getGraphEndpoint(), projectName, nodeType, nodeKey);\n\t\tCloseableHttpClient httpclient = HttpClients.createDefault();\n\t\tHttpGet httpget = new HttpGet(url);\n\t\tCloseableHttpResponse response = httpclient.execute(httpget);\n\t\ttry {\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tif (entity != null) {\n\t\t\t\tString responseString = EntityUtils.toString(entity, Charset.forName(\"UTF-8\"));\n\t\t\t\tif (responseString.contains(\"key\")) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tresponse.close();\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\ttry {\n\t\t\thttpclient.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 46.493888803613686}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\tString url = \"http://localhost:8080/projects/\" + projectName + \"/nodes/\" + nodeType + \"/\" + nodeKey;\n\tCloseableHttpClient httpclient = HttpClients.createDefault();\n\ttry {\n\t\tHttpGet httpget = new HttpGet(url);\n\t\tCloseableHttpResponse response = httpclient.execute(httpget);\n\t\ttry {\n\t\t\tSystem.out.println(\"Response status: \" + response.getStatusLine().getStatusCode());\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tif (entity != null) {\n\t\t\t\tSystem.out.println(\"Response content: \" + EntityUtils.toString(entity));\n\t\t\t}\n\t\t\treturn true;\n\t\t} finally {\n\t\t\tresponse.close();\n\t\t}\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\ttry {\n\t\t\thttpclient.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 40.485055435719474}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\ttry {\n\t\tString url = \"http://localhost:8080/graph/addEdge?projectName=\" + projectName + \"&edgeType=\" + edgeType + \"&fromType=\" + fromType + \"&toType=\" + toType + \"&from=\" + from + \"&to=\" + to;\n\t\tCloseableHttpClient httpclient = HttpClients.createDefault();\n\t\tHttpGet httpget = new HttpGet(url);\n\t\tCloseableHttpResponse response = httpclient.execute(httpget);\n\t\ttry {\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tif (entity != null) {\n\t\t\t\tString json = EntityUtils.toString(entity, Charset.forName(\"UTF-8\"));\n\t\t\t\tif (json.contains(\"\\\"key\\\"\")) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tresponse.close();\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\treturn false;\n}", "CodeBleu_score": 45.32953989902951}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\ttry {\n\t\tString endpoint = \"http://localhost:8080/graph/addEdge?projectName=\" + projectName + \"&edgeType=\" + edgeType + \"&fromType=\" + fromType + \"&toType=\" + toType + \"&from=\" + from + \"&to=\" + to;\n\t\tHttpGet httpGet = new HttpGet(endpoint);\n\t\tCloseableHttpResponse response = httpClient.execute(httpGet);\n\t\ttry {\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tif (entity != null) {\n\t\t\t\tString responseString = EntityUtils.toString(entity, Charset.forName(\"UTF-8\"));\n\t\t\t\tObjectMapper mapper = new ObjectMapper();\n\t\t\t\tMap<String, Object> map = mapper.readValue(responseString, Map.class);\n\t\t\t\tif (map.containsKey(\"key\")) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tresponse.close();\n\t\t}\n\t} catch (IOException e) {\n\t\tthrow new RuntimeException(e);\n\t} finally {\n\t\ttry {\n\t\t\thttpClient.close();\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 50.98257556045635}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\tif (projectName == null) {\n\t\tthrow new IllegalArgumentException(\"Parameter projectName must be specified\");\n\t}\n\tif (edgeType == null) {\n\t\tthrow new IllegalArgumentException(\"Parameter edgeType must be specified\");\n\t}\n\tif (fromType == null) {\n\t\tthrow new IllegalArgumentException(\"Parameter fromType must be specified\");\n\t}\n\tif (toType == null) {\n\t\tthrow new IllegalArgumentException(\"Parameter toType must be specified\");\n\t}\n\tif (from == null) {\n\t\tthrow new IllegalArgumentException(\"Parameter from must be specified\");\n\t}\n\tif (to == null) {\n\t\tthrow new IllegalArgumentException(\"Parameter to must be specified\");\n\t}\n\tString url = \"http://localhost:8080/graph/addEdge?projectName=\" + projectName + \"&edgeType=\" + edgeType + \"&fromType=\" + fromType + \"&toType=\" + toType + \"&from=\" + from + \"&to=\" + to;\n\ttry (CloseableHttpClient httpClient = HttpClients.createDefault()) {\n\t\tHttpGet httpGet = new HttpGet(url);\n\t\ttry (CloseableHttpResponse response = httpClient.execute(httpGet)) {\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tif (entity != null) {\n\t\t\t\tString responseJson = EntityUtils.toString(entity, Charset.forName(\"UTF-8\"));\n\t\t\t\tif (responseJson != null && responseJson.contains(\"key\")) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (IOException e) {\n\t\tthrow new RuntimeException(e);\n\t}\n\treturn false;\n}", "CodeBleu_score": 35.9720597765902}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\t\tif (event == null) {\n\t\treturn;\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(new Location(39.984191, 116.319382));\n\t}\n\tif (event.getTime() == null) {\n\t\tevent.setTime(new Date());\n\t}\n\tString json = null;\n\ttry {\n\t\tjson = new ObjectMapper().writeValueAsString(event);\n\t} catch (JsonProcessingException e) {\n\t\te.printStackTrace();\n\t}\n\tif (target == null) {\n\t\ttarget = \"test\";\n\t}\n\tProducerRecord<String, String> record = new ProducerRecord<String, String>(target, json);\n\tproducer.send(record);\n\tproducer.flush();\n}", "CodeBleu_score": 49.74490747112451}, {"code": "public void sendEvent(Event event){\n\t\tif (event == null) {\n\t\tthrow new IllegalArgumentException(\"Event cannot be null.\");\n\t}\n\tif (event.getMessage() == null) {\n\t\tthrow new IllegalArgumentException(\"Event message cannot be null.\");\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(new Location(39.9042, 116.4074));\n\t}\n\tevent.setTime(new Date());\n\tString json = null;\n\ttry {\n\t\tjson = new ObjectMapper().writeValueAsString(event);\n\t} catch (JsonProcessingException e) {\n\t\tthrow new RuntimeException(\"Could not convert event to JSON string.\", e);\n\t}\n\tProducerRecord<String, String> record = new ProducerRecord<String, String>(getTarget(event), json);\n\tgetProducer().send(record);\n\tgetProducer().flush();\n}", "CodeBleu_score": 45.07525713698881}, {"code": "public void sendEvent(Event event){\n\t\tif (event == null || event.getMessage() == null) {\n\t\treturn;\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(new Location(40.730610, -73.935242));\n\t}\n\tevent.setTimestamp(new Date());\n\tString topic = \"test\";\n\tif (target != null) {\n\t\ttopic = target;\n\t}\n\tString json = null;\n\ttry {\n\t\tjson = new ObjectMapper().writeValueAsString(event);\n\t} catch (JsonProcessingException e) {\n\t\te.printStackTrace();\n\t}\n\tProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, json);\n\tproducer.send(record);\n\tproducer.flush();\n}", "CodeBleu_score": 54.11945420131414}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t\t// The endpoint of your OSS instance.\n\tString endpoint = \"oss-cn-beijing.aliyuncs.com\";\n\t// The name of your bucket.\n\tString bucketName = \"oss-example\";\n\t// The access key ID of your Alibaba Cloud account.\n\tString accessKeyId = \"yourAccessKeyId\";\n\t// The access key secret of your Alibaba Cloud account.\n\tString accessKeySecret = \"yourAccessKeySecret\";\n\t// The role that you want to assume to perform the operation.\n\tString roleArn = \"acs:ram::123456789012****:role/oss-ram-role\";\n\t// The duration, in seconds, of the role session.\n\tint durationSeconds = 3600;\n\n\t// Create an OSS client instance.\n\tOSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\n\t// Create an STS client instance.\n\tDefaultProfile profile = DefaultProfile.getProfile(\"cn-hangzhou\", accessKeyId, accessKeySecret);\n\tDefaultAcsClient client = new DefaultAcsClient(profile);\n\n\t// Assume a role and get temporary credentials.\n\tAssumeRoleRequest request = new AssumeRoleRequest();\n\trequest.setRoleArn(roleArn);\n\trequest.setRoleSessionName(\"oss-api-test\");\n\trequest.setDurationSeconds(durationSeconds);\n\trequest.setMethod(MethodType.POST);\n\trequest.setProtocol(ProtocolType.HTTPS);\n\ttry {\n\t\tAssumeRoleResponse response = client.getAcsResponse(request);\n\t\tMap<String, String> credentials = new LinkedHashMap<String, String>();\n\t\tcredentials.put(\"AccessKeyId\", response.getCredentials().getAccessKeyId());\n\t\tcredentials.put(\"AccessKeySecret\", response.getCredentials().getAccessKeySecret());\n\t\tcredentials.put(\"SecurityToken\", response.getCredentials().getSecurityToken());\n\t\tcredentials.put(\"Expiration\", response.getCredentials().getExpiration());\n\n\t\t// Upload the file content to an object with the specified name in the specified bucket.\n\t\tossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\n\t\t// Shut down the OSS client.\n\t\tossClient.shutdown();\n\n\t\t// Return the URL of the uploaded object.\n\t", "CodeBleu_score": 34.4205205465137}, {"code": "public String upload(String objName, byte[] content){\n\t\t// Initialize the OSS client with your account for accessing Alibaba Cloud services.\n\tString accessKeyId = \"yourAccessKeyId\";\n\tString accessKeySecret = \"yourAccessKeySecret\";\n\tString endpoint = \"yourEndpoint\";\n\tOSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\n\t// Upload the file content as an object with the specified name.\n\tossClient.putObject(\"yourBucketName\", objName, new ByteArrayInputStream(content));\n\n\t// Shut down the OSS client.\n\tossClient.shutdown();\n\n\t// Return the URL of the uploaded object.\n\treturn \"http://\" + endpoint + \"/\" + objName;\n}", "CodeBleu_score": 34.38709746368281}, {"code": "public String upload(String objName, byte[] content){\n\t\t// Get the OSS credentials from the runtime environment variables\n\tString accessKeyId = System.getenv(\"accessKeyId\");\n\tString accessKeySecret = System.getenv(\"accessKeySecret\");\n\tString endpoint = System.getenv(\"endpoint\");\n\tString bucketName = System.getenv(\"bucketName\");\n\n\t// Initialize the OSS client\n\tOSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\n\t// Upload the file content as an object with the specified name to the OSS bucket\n\tossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\n\t// Shut down the OSS client\n\tossClient.shutdown();\n\n\t// Return the URL of the uploaded object\n\treturn \"https://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}", "CodeBleu_score": 45.7426220529635}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\tLocationInfo locationInfo = new LocationInfo();\n\tif (ipAddress == null) {\n\t\treturn locationInfo;\n\t}\n\tif (ipAddress.length() == 0) {\n\t\treturn locationInfo;\n\t}\n\tif (ipAddress.contains(\":\")) {\n\t\treturn locationInfo;\n\t}\n\tif (ipAddress.contains(\"127.0.0.1\")) {\n\t\treturn locationInfo;\n\t}\n\tif (ipAddress.contains(\"0.0.0.0\")) {\n\t\treturn locationInfo;\n\t}\n\tif (ipAddress.contains(\"localhost\")) {\n\t\treturn locationInfo;\n\t}\n\tif (ipAddress.contains(\"169.254\")) {\n\t\treturn locationInfo;\n\t}\n\tif (ipAddress.contains(\"172.16\")) {\n\t\treturn locationInfo;\n\t}\n\tif (ipAddress.contains(\"192.168\")) {\n\t\treturn locationInfo;\n\t}\n\tif (ipAddress.contains(\"10.\")) {\n\t\treturn locationInfo;\n\t}\n\tif (ipAddress.contains(\"172.\")) {\n\t\treturn locationInfo;\n\t}\n\tif (ipAddress.contains(\"192.\")) {\n\t\treturn locationInfo;\n\t}\n\tif (ipAddress.contains(\"198.\")) {\n\t\treturn locationInfo;\n\t}\n\tif (ipAddress.contains(\"199.\")) {\n\t\treturn locationInfo;\n\t}\n\tif (ipAddress.contains(\"200.\")) {\n\t\treturn locationInfo;\n\t}\n\tif (ipAddress.contains(\"201.\")) {\n\t\treturn locationInfo;\n\t}\n\tif (ipAddress.contains(\"202.\")) {\n\t\treturn locationInfo;\n\t}\n\tif (ipAddress.contains(\"203.\")) {\n\t\treturn locationInfo;\n\t}\n\tif (ipAddress.contains(\"204.\")) {\n\t\treturn locationInfo;\n\t}\n\tif (ipAddress.contains(\"205.\")) {\n\t\treturn locationInfo;\n\t}\n\tif (ipAddress.contains(\"206.\")) {\n\t\treturn locationInfo;\n\t}\n\tif (ipAddress.contains(\"207.\")) {\n\t\treturn locationInfo;\n\t}\n\tif (ipAddress.", "CodeBleu_score": 21.50980130408232}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\tif (ipAddress == null) {\n\t\treturn null;\n\t}\n\tif (ipAddress.length() == 0) {\n\t\treturn null;\n\t}\n\tif (ipAddress.equals(\"127.0.0.1\")) {\n\t\treturn null;\n\t}\n\tif (ipAddress.equals(\"0:0:0:0:0:0:0:1\")) {\n\t\treturn null;\n\t}\n\tif (ipAddress.equals(\"0.0.0.0\")) {\n\t\treturn null;\n\t}\n\tif (ipAddress.equals(\"0:0:0:0:0:0:0:0\")) {\n\t\treturn null;\n\t}\n\tif (ipAddress.equals(\"::1\")) {\n\t\treturn null;\n\t}\n\tif (ipAddress.equals(\"::\")) {\n\t\treturn null;\n\t}\n\tif (ipAddress.equals(\"0000:0000:0000:0000:0000:0000:0000:0001\")) {\n\t\treturn null;\n\t}\n\tif (ipAddress.equals(\"0:0:0:0:0:0:0:0001\")) {\n\t\treturn null;\n\t}\n\tif (ipAddress.equals(\"0000:0000:0000:0000:0000:0000:0000:0000\")) {\n\t\treturn null;\n\t}\n\tif (ipAddress.equals(\"0:0:0:0:0:0:0:0000\")) {\n\t\treturn null;\n\t}\n\tif (ipAddress.equals(\"0000:0000:0000:0000:0000:0000:0000:0000\")) {\n\t\treturn null;\n\t}\n\tif (ipAddress.equals(\"0:0:0:0:0:0:0:0000\")) {\n\t\treturn null;\n\t}\n\tif (ipAddress.equals(\"0000:0000:0000:0000:0000:0000:0", "CodeBleu_score": 17.104779370344104}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\t// Get the worker\n\tIpToLocationWorker worker = getWorker();\n\tif (worker == null) {\n\t\treturn new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\");\n\t}\n\t// Get the location\n\tLocationInfo location = worker.getIpLocation(ipAddress);\n\tif (location == null) {\n\t\treturn new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\");\n\t}\n\treturn location;\n}", "CodeBleu_score": 37.60012497798698}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (esClient == null) {\n\t\tsynchronized (this) {\n\t\t\tif (esClient == null) {\n\t\t\t\tesClient = new RestHighLevelClient(RestClient.builder(getESClusterHosts().toArray(new HttpHost[0])));\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 30.786611020881455}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tsynchronized (this) {\n\t\tif (this.esClient == null) {\n\t\t\t// Get the Elasticsearch cluster hosts and ports\n\t\t\tString[] hostsAndPorts = this.esClusterHostsAndPorts.split(\",\");\n\t\t\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\t\t\tfor (String hostAndPort : hostsAndPorts) {\n\t\t\t\tString[] hostAndPortTokens = hostAndPort.split(\":\");\n\t\t\t\tString host = hostAndPortTokens[0];\n\t\t\t\tint port = Integer.parseInt(hostAndPortTokens[1]);\n\t\t\t\thosts.add(new HttpHost(host, port, \"http\"));\n\t\t\t}\n\t\t\t// Initialize the low-level REST client\n\t\t\tthis.esClient = new RestClient(hosts);\n\t\t\t// Initialize the high-level REST client\n\t\t\tthis.esClientHL = new RestHighLevelClient(this.esClient);\n\t\t}\n\t}\n}", "CodeBleu_score": 32.188696289087694}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tsynchronized(this) {\n\t\tif (esClient == null) {\n\t\t\t// Get the Elasticsearch cluster hosts and ports from the environment variable\n\t\t\tString[] esHosts = System.getenv(\"ES_HOSTS\").split(\",\");\n\t\t\tList<HttpHost> esHttpHosts = new ArrayList<HttpHost>();\n\t\t\tfor (String esHost : esHosts) {\n\t\t\t\tString[] esHostParts = esHost.split(\":\");\n\t\t\t\tesHttpHosts.add(new HttpHost(esHostParts[0], Integer.parseInt(esHostParts[1]), \"http\"));\n\t\t\t}\n\n\t\t\t// Create the low-level and high-level REST clients\n\t\t\tesClient = new RestHighLevelClient(RestClient.builder(esHttpHosts.toArray(new HttpHost[esHttpHosts.size()])));\n\t\t}\n\t}\n}", "CodeBleu_score": 31.515308660428808}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tfor (String host : clusterHostList.split(\",\")) {\n\t\tString[] hostParts = host.split(\":\");\n\t\tString hostName = hostParts[0].trim();\n\t\tint port = clusterPort;\n\t\tif (hostParts.length > 1) {\n\t\t\tport = Integer.parseInt(hostParts[1].trim());\n\t\t}\n\t\thosts.add(new HttpHost(hostName, port, \"http\"));\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 44.72264113278007}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tString[] hostStrings = clusterHostList.split(\",\");\n\tfor (String hostString : hostStrings) {\n\t\tString[] hostParts = hostString.split(\":\");\n\t\tif (hostParts.length == 1) {\n\t\t\thosts.add(new HttpHost(hostParts[0], clusterPort, \"http\"));\n\t\t} else {\n\t\t\thosts.add(new HttpHost(hostParts[0], Integer.parseInt(hostParts[1]), \"http\"));\n\t\t}\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 42.566807818263285}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tfor (String host : clusterHostList.split(\",\")) {\n\t\tString[] parts = host.split(\":\");\n\t\tif (parts.length == 1) {\n\t\t\thosts.add(new HttpHost(parts[0], clusterPort));\n\t\t} else {\n\t\t\thosts.add(new HttpHost(parts[0], Integer.parseInt(parts[1])));\n\t\t}\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 48.67805096069658}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\t\twhile (true) {\n\t\t// Get a task from the queue.\n\t\tTask task = tasks.poll(30, TimeUnit.SECONDS);\n\t\tif (task != null) {\n\t\t\ttry {\n\t\t\t\t// Check the task type and process it.\n\t\t\t\tif (task.getTaskType() == TaskType.PlainTextMessage) {\n\t\t\t\t\tprocessPlainTextMessageTask(task);\n\t\t\t\t}\n\t\t\t} catch (Exception ex) {\n\t\t\t\t// Log the error.\n\t\t\t\tlogger.error(\"Error processing task\", ex);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 15.077886845308822}, {"code": "protected void pollingWork() throws InterruptedException{\n\t\tfinal AtomicBoolean keepPolling = new AtomicBoolean(true);\n\tfinal LinkedBlockingQueue<Task> taskQueue = new LinkedBlockingQueue<Task>();\n\tfinal CloseableHttpClient httpClient = HttpClients.createDefault();\n\tfinal String apiUrl = \"https://api.twilio.com/2010-04-01/Accounts/\" + ACCOUNT_SID + \"/Messages.json\";\n\tfinal String sender = \"+15558675310\";\n\tfinal String recipient = \"+15558675311\";\n\tfinal String message = \"Hello from your Twilio trial account - \" + ACCOUNT_SID;\n\n\t// Start polling for messages\n\tnew Thread(new Runnable() {\n\t\tpublic void run() {\n\t\t\twhile (keepPolling.get()) {\n\t\t\t\ttry {\n\t\t\t\t\t// Poll for a message\n\t\t\t\t\tTask task = taskQueue.poll(30, TimeUnit.SECONDS);\n\t\t\t\t\tif (task != null) {\n\t\t\t\t\t\t// Process the message\n\t\t\t\t\t\tprocessTask(task, httpClient, apiUrl, sender, recipient, message);\n\t\t\t\t\t}\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t// Exit the polling loop\n\t\t\t\t\tkeepPolling.set(false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}).start();\n\n\t// Poll for messages\n\twhile (keepPolling.get()) {\n\t\t// Poll for a message\n\t\tTask task = taskQueue.poll(30, TimeUnit.SECONDS);\n\t\tif (task != null) {\n\t\t\t// Process the message\n\t\t\tprocessTask(task, httpClient, apiUrl, sender, recipient, message);\n\t\t}\n\t}\n\n\t// Close the HTTP client\n\ttry {\n\t\thttpClient.close();\n\t} catch (IOException e) {\n\t\t// Ignore\n\t}\n}", "CodeBleu_score": 27.958319114445107}, {"code": "protected void pollingWork() throws InterruptedException{\n\t\twhile (true) {\n\t\tif (stop.get()) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tTask task = taskQueue.poll(30, TimeUnit.SECONDS);\n\t\t\tif (task != null) {\n\t\t\t\tif (task.getTaskType() == TaskType.PLAIN_TEXT_MESSAGE) {\n\t\t\t\t\tString recipientNumber = task.getRecipientNumber();\n\t\t\t\t\tString messageData = task.getMessageData();\n\t\t\t\t\tif (StringUtils.isEmpty(recipientNumber) || StringUtils.isEmpty(messageData)) {\n\t\t\t\t\t\tlogger.error(\"Message data or recipient number is empty.\");\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tvalidateRecipientNumber(recipientNumber);\n\t\t\t\t\t\t\tvalidateMessageData(messageData);\n\t\t\t\t\t\t\tsendMessage(recipientNumber, messageData);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t\t\tlogger.error(\"Failed to send message.\", e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlogger.error(\"Invalid task type: \" + task.getTaskType());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (InterruptedException e) {\n\t\t\tlogger.error(\"Thread interrupted.\", e);\n\t\t\tThread.currentThread().interrupt();\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 29.219577691871702}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tCloseableHttpClient httpclient = HttpClients.createDefault();\n\tHttpGet httpGet = new HttpGet(uri);\n\thttpGet.addHeader(\"Accept\", \"application/xml\");\n\tCloseableHttpResponse response = httpclient.execute(httpGet);\n\ttry {\n\t\tSystem.out.println(\"Status code: \" + response.getStatusLine().getStatusCode());\n\t\tHttpEntity entity = response.getEntity();\n\t\tif (entity != null) {\n\t\t\treturn EntityUtils.toString(entity, StandardCharsets.UTF_8);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t} finally {\n\t\tresponse.close();\n\t}\n}", "CodeBleu_score": 43.57379367036576}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\t// Create a CloseableHttpClient and execute the request\n\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\tHttpGet request = new HttpGet(uri);\n\tCloseableHttpResponse response = httpClient.execute(request);\n\n\t// Get the response entity and convert it to a string\n\tHttpEntity entity = response.getEntity();\n\tString responseString = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n\n\t// Log the response string\n\tSystem.out.println(responseString);\n\n\t// Return the response string\n\treturn responseString;\n}", "CodeBleu_score": 59.150240257692666}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\tHttpGet httpGet = new HttpGet(uri);\n\tCloseableHttpResponse response = httpClient.execute(httpGet);\n\tHttpEntity entity = response.getEntity();\n\tString responseString = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n\tSystem.out.println(responseString);\n\treturn responseString;\n}", "CodeBleu_score": 59.58705315171354}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tif (messageXmlStr == null) {\n\t\treturn null;\n\t}\n\n\tDocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n\tByteArrayInputStream byteInputStream = new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8));\n\tDocument document = documentBuilder.parse(byteInputStream);\n\treturn decodeToMap(document.getChildNodes(), doTrim);\n}", "CodeBleu_score": 39.785553300902656}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tDocumentBuilder documentBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\tDocument document = documentBuilder.parse(new InputSource(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8))));\n\tMap<String, Object> map = new HashMap<String, Object>();\n\tList<Node> nodeList = new LinkedList<Node>();\n\tnodeList.add(document.getDocumentElement());\n\tmap = decodeToHashMap(nodeList, doTrim);\n\treturn map;\n}", "CodeBleu_score": 46.78668964334452}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tDocumentBuilder docBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\tByteArrayInputStream bais = new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8));\n\tDocument doc = docBuilder.parse(bais);\n\tbais.close();\n\treturn decodeToMap(doc.getChildNodes(), doTrim);\n}", "CodeBleu_score": 32.67965304776312}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tif (!isEligibleForAutoProcessing(orderRecord)) {\n\t\treturn;\n\t}\n\n\tfinal String transactionName = CompleteShipAndInvoiceEnqueuer.extractTransactionName(orderRecord);\n\tif (transactionName == null) {\n\t\treturn;\n\t}\n\n\tfinal AsyncBatchId asyncBatchId = createAsyncBatchId(orderRecord);\n\tServices.get(ITrxManager.class).runAfterCommit(transactionName, () -> enqueueOrderForAutoProcessing(orderRecord, asyncBatchId));\n}", "CodeBleu_score": 27.86457886751351}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tif (!orderRecord.isSOTrx())\n\t\treturn;\n\n\tfinal DeliveryRule deliveryRule = DeliveryRule.ofNullableCode(orderRecord.getDeliveryRule());\n\tif (deliveryRule != DeliveryRule.AVAILABILITY)\n\t\treturn;\n\n\tfinal OrderId orderId = OrderId.ofRepoId(orderRecord.getC_Order_ID());\n\tfinal AsyncBatchId asyncBatchId = AsyncBatchId.ofString(orderRecord.getPOReference());\n\tfinal AsyncBatchObserver asyncBatchObserver = AsyncBatchObserver.builder()\n\t\t\t.orderId(orderId)\n\t\t\t.asyncBatchId(asyncBatchId)\n\t\t\t.build();\n\n\tfinal boolean autoProcess = Services.get(ISysConfigBL.class)\n\t\t\t.getBooleanValue(CreateMissingShipmentSchedulesWorkpackageProcessor.SYSCONFIG_AUTO_PROCESS_MISSING_SHIPMENT_SCHEDULES,\n\t\t\t\t\tCreateMissingShipmentSchedulesWorkpackageProcessor.SYSCONFIG_AUTO_PROCESS_MISSING_SHIPMENT_SCHEDULES_DEFAULT,\n\t\t\t\t\torderRecord.getAD_Client_ID(),\n\t\t\t\t\torderRecord.getAD_Org_ID());\n\n\tif (!autoProcess) {\n\t\tLoggables.withLogger(logger, Level.INFO).addLog(\"Auto-processing of missing shipment schedules for order {} is disabled. Scheduling it now.\", orderId);\n\t\tServices.get(ITrxManager.class).runAfterCommit(\n\t\t\t\t() -> Services.get(CompleteShipAndInvoiceEnqueuer.class).enqueueMissingShipmentSchedules(asyncBatchObserver));\n\t\treturn;\n\t}\n\n\tLoggables.withLogger(logger, Level.INFO).addLog(\"Auto-processing of missing shipment schedules for order {} is enabled. Enqueuing it now.\", orderId);\n\tServices.get(ITrxManager.class).runAfterCommit(\n\t\t\t() -> Services.get(CompleteShipAndInvoiceEnqueuer.class).enqueueMissingShipmentSchedules(asyncBatchObserver));\n}", "CodeBleu_score": 46.18516601511451}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tfinal OrderId orderId = OrderId.ofRepoId(orderRecord.getC_Order_ID());\n\tfinal DeliveryRule deliveryRule = DeliveryRule.ofCode(orderRecord.getDeliveryRule());\n\n\tif (deliveryRule == DeliveryRule.AVAILABILITY) {\n\t\treturn;\n\t}\n\n\tif (!orderRecord.isSOTrx()) {\n\t\treturn;\n\t}\n\n\tif (orderRecord.isDropShip()) {\n\t\treturn;\n\t}\n\n\tfinal boolean autoDelivery = Services.get(ISysConfigBL.class)\n\t\t\t.getBooleanValue(\"de.metas.async.CreateMissingShipmentSchedulesWorkpackageProcessor.AutoDelivery\", true);\n\n\tif (!autoDelivery) {\n\t\treturn;\n\t}\n\n\tfinal AsyncBatchId asyncBatchId = AsyncBatchId.ofString(orderRecord.getExternalHeaderId());\n\tfinal AsyncBatchObserver asyncBatchObserver = Services.get(ITrxManager.class).getAsyncBatchObserver(asyncBatchId);\n\n\tfinal CreateMissingShipmentSchedulesWorkpackageProcessor workpackageProcessor = new CreateMissingShipmentSchedulesWorkpackageProcessor();\n\tasyncBatchObserver.addObserver(workpackageProcessor);\n\n\tLoggables.addLog(\"Enqueueing order {} for automatic processing\", orderId);\n\tasyncBatchObserver.notifyAsyncBatchProcessed();\n}", "CodeBleu_score": 45.844719767472334}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$this->validateLogin($request);\n\n$user = User::where('email', $request->email)->first();\n\nif ( ! $user || ! Hash::check($request->password, $user->password)) {\nevent(new Failed($user, $request->only('email'), ['password' => $request->password]));\n\nthrow ValidationException::withMessages([\n'email' => [trans('auth.failed')],\n]);\n}\n\nreturn $user;\n}", "CodeBleu_score": 49.52112703664033}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$this->validateLogin($request);\n\n$user = User::where('email', $request->email)->first();\n\nif (! $user || ! Hash::check($request->password, $user->password)) {\nevent(new Failed($user, $request->only('email'), ['password' => ['<PASSWORD>.']]));\n\nthrow ValidationException::withMessages([\n'email' => [trans('auth.failed')],\n]);\n}\n\nreturn $user;\n}", "CodeBleu_score": 50.88980816263307}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$user = User::where('email', $request->email)->first();\n\nif (is_null($user)) {\nevent(new Failed($user, $request->only('email'), ['password' => $request->password]));\n\nthrow ValidationException::withMessages([\n'email' => [trans('auth.failed')],\n]);\n}\n\nif (! $this->guard->getProvider()->validateCredentials($user, $request->only('password'))) {\nevent(new Failed($user, $request->only('email'), ['password' => $request->password]));\n\nthrow ValidationException::withMessages([\n'email' => [trans('auth.failed')],\n]);\n}\n\nreturn $user;\n}", "CodeBleu_score": 42.41287770943142}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->incrementLoginAttempts($request);\n\nthrow ValidationException::withMessages([\n'email' => [trans('auth.failed')],\n]);\n}", "CodeBleu_score": 79.84966060433261}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->incrementLoginAttempts($request);\n\n$seconds = $this->limiter()->availableIn(\n$this->getLoginRateLimiterKey($request)\n);\n\nthrow ValidationException::withMessages([\n'email' => [trans('auth.failed')],\n'throttle' => trans('auth.throttle', [\n'minutes' => ceil($seconds / 60),\n'seconds' => $seconds,\n]),\n]);\n}", "CodeBleu_score": 61.194557819707875}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\tif (Webauthn::hasChallenged($request)) {\nreturn;\n}\n\n$this->rateLimiter->increment($request);\n\nevent(new Failed($this->guard->user(), $request->only($this->username(), 'password')));\n\nthrow ValidationException::withMessages([\n$this->username() => [trans('auth.failed')],\n]);\n}", "CodeBleu_score": 60.216148340103516}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t$user = $request->user();\nif (! $user) {\nreturn app(TwoFactorAuthenticated::class);\n}\n$webauthn = Webauthn::create($user, 'https://example.com/webauthn/assertion/create');\nreturn Inertia::render('TwoFactorChallenge', [\n'username' => $user->name,\n'isTwoFactorEnabled' => $user->two_factor_secret,\n'isRemembered' => $request->session()->has('login.remember'),\n'publicKey' => $webauthn->getPublicKey(),\n'challenge' => $webauthn->getChallenge(),\n'user' => $user,\n]);\n}", "CodeBleu_score": 33.61439648093884}, {"code": "<?\npublic function toResponse($request){\n\t$user = $request->user();\n\nif (! $user->two_factor_secret) {\nreturn app(TwoFactorAuthenticationController::class)->showTwoFactorForm($request);\n}\n\n$publicKey = Webauthn::getRegisteredKeys($user)->first();\n\nreturn Inertia::render('TwoFactorChallenge', [\n'user' => [\n'id' => $user->id,\n'name' => $user->name,\n'email' => $user->email,\n],\n'publicKey' => [\n'id' => $publicKey->id,\n'name' => $publicKey->name,\n'icon' => $publicKey->icon,\n'credentialId' => $publicKey->credential_id,\n'publicKey' => $publicKey->public_key,\n'aaguid' => $publicKey->aaguid,\n'transports' => $publicKey->transports,\n'attestationType' => $publicKey->attestation_type,\n'attestationStatement' => $publicKey->attestation_statement,\n'url' => route('webauthn.verify'),\n],\n'qrCode' => base64_encode(QrCode::format('png')\n->merge(public_path('img/logo.png'), .2, true)\n->size(200)\n->errorCorrection('H')\n->generate($publicKey->name)),\n'remember' => $request->has('remember'),\n]);\n}", "CodeBleu_score": 31.75873249034232}, {"code": "<?\npublic function toResponse($request){\n\t$user = $request->user();\n$id = $user->id;\n$webauthn = Webauthn::hasRegistered($user);\n$remember = $request->filled('remember');\n$challenge = Webauthn::generateServerChallenge();\n$publicKey = Webauthn::getRegisteredKey($user);\n$data = [\n'id' => $id,\n'webauthn' => $webauthn,\n'remember' => $remember,\n'challenge' => $challenge,\n'publicKey' => $publicKey,\n];\nreturn Inertia::render('TwoFactorChallenge', $data);\n}", "CodeBleu_score": 39.46300263285014}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$userToken = UserToken::where('driver', $driver)->where('socialite_id', $socialite->getId())->first();\n\nif (! is_null($userToken)) {\n$user = $userToken->user;\n\nif (! $user->hasVerifiedEmail()) {\n$user->markEmailAsVerified();\n}\n\nif (! $user->hasVerifiedTwoFactorAuthentication()) {\n$user->markTwoFactorAuthenticationAsVerified();\n}\n\nif (! $user->hasPassword()) {\n$user->setPassword(Str::random(24));\n$user->save();\n}\n\nreturn $user;\n}\n\n$guard = $this->guard;\n\n$email = $socialite->getEmail();\n\nif (is_null($email) || User::where('email', $email)->exists()) {\n$email = $socialite->getNickname() . '@' . $driver . '.com';\n}\n\n$user = User::create([\n'name' => $socialite->getName(),\n'email' => $email,\n'password' => <PASSWORD>::<PASSWORD>(24),\n]);\n\n$userToken = UserToken::create([\n'user_id' => $user->id,\n'driver' => $driver,\n'socialite_id' => $socialite->getId(),\n]);\n\nevent(new Registered($user));\n\n$this->guard->login($user);\n\nreturn $user;\n}", "CodeBleu_score": 43.18934024117678}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t\t$userToken = UserToken::where('driver', $driver)\n\t\t->where('socialite_id', $socialite->getId())\n\t\t->first();\n\n\tif ($userToken) {\n\t\t$user = User::find($userToken->user_id);\n\n\t\tif ($user) {\n\t\t\t$user->update([\n\t\t\t\t'email' => $socialite->getEmail()\n\t\t\t]);\n\n\t\t\treturn $user;\n\t\t}\n\t}\n\n\t$user = User::where('email', $socialite->getEmail())->first();\n\n\tif ($user) {\n\t\t$userToken = UserToken::create([\n\t\t\t'user_id' => $user->id,\n\t\t\t'driver' => $driver,\n\t\t\t'socialite_id' => $socialite->getId(),\n\t\t\t'socialite_token' => $socialite->token,\n\t\t]);\n\n\t\treturn $user;\n\t}\n\n\t$user = User::create([\n\t\t'name' => $socialite->getName(),\n\t\t'email' => $socialite->getEmail(),\n\t\t'password' => <PASSWORD>(Str::random(24))\n\t]);\n\n\t$userToken = UserToken::create([\n\t\t'user_id' => $user->id,\n\t\t'driver' => $driver,\n\t\t'socialite_id' => $socialite->getId(),\n\t\t'socialite_token' => $socialite->token,\n\t]);\n\n\treturn $user;\n}", "CodeBleu_score": 40.98061976374208}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t\t$userToken = UserToken::where('driver', $driver)->where('socialite_id', $socialite->getId())->first();\n\tif ($userToken) {\n\t\t$user = $userToken->user;\n\t\tif (Auth::guard('web')->login($user)) {\n\t\t\treturn $user;\n\t\t}\n\t\tthrow ValidationException::withMessages([\n\t\t\t'email' => [__('auth.failed')],\n\t\t]);\n\t}\n\t$email = $socialite->getEmail();\n\tif ($email) {\n\t\t$user = User::where('email', $email)->first();\n\t\tif ($user) {\n\t\t\t$userToken = UserToken::create([\n\t\t\t\t'user_id' => $user->id,\n\t\t\t\t'driver' => $driver,\n\t\t\t\t'socialite_id' => $socialite->getId(),\n\t\t\t]);\n\t\t\tif (Auth::guard('web')->login($user)) {\n\t\t\t\treturn $user;\n\t\t\t}\n\t\t\tthrow ValidationException::withMessages([\n\t\t\t\t'email' => [__('auth.failed')],\n\t\t\t]);\n\t\t}\n\t}\n\t$name = $socialite->getName();\n\tif (!$name) {\n\t\t$name = $email;\n\t}\n\t$user = User::create([\n\t\t'name' => $name,\n\t\t'email' => $email,\n\t]);\n\t$userToken = UserToken::create([\n\t\t'user_id' => $user->id,\n\t\t'driver' => $driver,\n\t\t'socialite_id' => $socialite->getId(),\n\t]);\n\tif (Auth::guard('web')->login($user)) {\n\t\treturn $user;\n\t}\n\tthrow ValidationException::withMessages([\n\t\t'email' => [__('auth.failed')],\n\t]);\n}", "CodeBleu_score": 42.8330368300179}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$user = $request->user();\n\nif (! $user) {\nreturn false;\n}\n\n$credentials = $this->getFilteredCredentials($request);\n\nif (! Webauthn::validateAssertion($user, $credentials)) {\n$this->fireFailedEvent($user, $request);\n\nthrow ValidationException::withMessages([\n'webauthn' => [trans('webauthn.validation_error')],\n]);\n}\n\nreturn true;\n}", "CodeBleu_score": 54.59684341949236}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$user = $request->user();\n\nif (is_null($user)) {\nreturn false;\n}\n\n$credentials = $this->getFilteredCredentials($request);\n\n$webauthn = WebauthnFacade::create($user, $credentials);\n\ntry {\n$webauthn->validateAssertion();\n} catch (ValidationException $e) {\n$this->fireFailedEvent($user, $e);\n\nthrow $e;\n}\n\nreturn true;\n}", "CodeBleu_score": 56.8906869491562}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$user = $request->user();\n\nif (is_null($user)) {\nreturn false;\n}\n\n$webauthn = app(Webauthn::class);\n\ntry {\n$webauthn->validateAssertion(\n$user,\n$request->input('webauthn_credential_id'),\n$request->input('webauthn_client_data_json'),\n$request->input('webauthn_auth_data'),\n$request->input('webauthn_signature')\n);\n} catch (WebauthnException $e) {\nevent(new Failed($user, $e));\n\nthrow ValidationException::withMessages([\n'webauthn_error' => [trans('webauthn.validation_error')],\n]);\n}\n\nreturn true;\n}", "CodeBleu_score": 40.811080951378166}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\t$email = $this->argument('email');\n\nif (is_null($email)) {\n$this->error('No email address provided');\n\nreturn null;\n}\n\ntry {\n$user = User::where('email', $email)->firstOrFail();\n\nreturn $user;\n} catch (ModelNotFoundException $e) {\n$this->error('User not found');\n\nreturn null;\n}\n}", "CodeBleu_score": 60.975975515803626}, {"code": "<?\nprivate function user(): ?User{\n\t$user = null;\n$email = $this->argument('email');\n\nif (is_null($email)) {\n$this->error('Please provide an email address.');\n} else {\ntry {\n$user = User::where('email', $email)->firstOrFail();\n} catch (ModelNotFoundException $e) {\n$this->error('No user found with email address ' . $email);\n}\n}\nreturn $user;\n}", "CodeBleu_score": 53.581723602929856}, {"code": "<?\nprivate function user(): ?User{\n\t$email = $this->argument('email');\nif (empty($email)) {\n$this->error('Please provide an email address.');\nreturn null;\n}\ntry {\n$user = User::where('email', $email)->firstOrFail();\nreturn $user;\n} catch (ModelNotFoundException $e) {\n$this->error(\"User with email address $email not found.\");\nreturn null;\n}\n}", "CodeBleu_score": 64.32644406641563}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\t// If the Scout driver is not set, return.\nif (! config('scout.driver')) {\nreturn;\n}\n\n// If the flush option is not set, return.\nif (! $this->option('flush')) {\nreturn;\n}\n\n// Iterate through the Meilisearch index settings.\nforeach (config('scout.meilisearch.indexes') as $index) {\n// Determine the table name for the index.\n$table = $this->getTableName($index);\n\n// Run the Artisan command to flush the index.\n$this->call('scout:flush', ['model' => $table]);\n}\n\n// Log a message indicating that the indexes have been flushed.\n$this->info('Scout indexes flushed.');\n}", "CodeBleu_score": 50.45121031574043}, {"code": "<?\nprotected function scoutFlush(): void{\n\t// If the Scout driver is not configured, we will not proceed.\nif (config('scout.driver') === null) {\nreturn;\n}\n\n// If the Scout driver is configured but the flush option is not set, we will not proceed.\nif (! $this->option('flush')) {\nreturn;\n}\n\n// Iterate through the Meilisearch index settings.\nforeach (config('scout.algolia.indices') as $index) {\n// Determine the table name for the index.\n$table = $index['name'];\n\n// Run the Artisan command to flush the index.\n$this->call('scout:flush', ['model' => $table]);\n}\n\n// Log a message indicating that the indexes have been flushed.\n$this->info('Scout indexes have been flushed.');\n}", "CodeBleu_score": 38.792466837364664}, {"code": "<?\nprotected function scoutFlush(): void{\n\tif (config('scout.driver') === 'meilisearch') {\nforeach (config('scout.meilisearch.indexes') as $index) {\n$this->call('scout:flush', ['model' => $index]);\n}\n$this->info('Scout indexes have been flushed.');\n}\n}", "CodeBleu_score": 24.248008629142635}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$vcard = null;\n$uid = $resource->getUID();\n\ntry {\n$vcard = Reader::read($resource->getContents());\n} catch (ParseException $e) {\n}\n\nif (!$vcard) {\n$vcard = new VCard();\n$vcard->add('UID', $uid);\n$vcard->add('FN', $resource->getDisplayName());\n$vcard->add('N', [\n'family' => $resource->getFamilyName(),\n'given' => $resource->getGivenName(),\n]);\n}\n\nforeach ($this->exporters as $exporter) {\n$exporter->export($vcard, $resource);\n}\n\nreturn $vcard;\n}", "CodeBleu_score": 34.89576265347907}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$vcard = $this->read($resource);\n\nforeach ($this->exporters as $exporter) {\n$exporter->export($vcard, $resource);\n}\n\nreturn $vcard;\n}", "CodeBleu_score": 17.100501029842203}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$vcard = $resource->read();\nif ($vcard === null) {\n$vcard = new VCard();\n$vcard->UID = $resource->getUID();\n$vcard->FN = $resource->getDisplayName();\n}\n\nforeach ($this->exporters as $exporter) {\n$exporter->export($vcard, $resource);\n}\n\nreturn $vcard;\n}", "CodeBleu_score": 23.197154389942582}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t\t$object = $this->getObjectForCardUri($addressBookId, $cardUri);\n\tif ($object instanceof Contact) {\n\t\tBus::dispatchNow(new DestroyContact($object));\n\t} elseif ($object instanceof Group) {\n\t\tBus::dispatchNow(new DestroyGroup($object));\n\t} else {\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 30.26619579619276}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$object = $this->getObjectForCardUri($addressBookId, $cardUri);\nif ($object instanceof Contact) {\nBus::dispatch(new DestroyContact($object));\n} elseif ($object instanceof Group) {\nBus::dispatch(new DestroyGroup($object));\n} else {\nreturn false;\n}\nreturn true;\n}", "CodeBleu_score": 29.91508972753063}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t\t$object = $this->getCard($addressBookId, $cardUri);\n\tif ($object instanceof Contact) {\n\t\tBus::dispatchNow(new DestroyContact($object));\n\t} elseif ($object instanceof Group) {\n\t\tBus::dispatchNow(new DestroyGroup($object));\n\t} else {\n\t\treturn false;\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 29.929779212905217}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\tif (!isset($data['file'])) {\nreturn false;\n}\n\n$leadActivity = $this->model->create([\n'lead_id' => $data['lead_id'],\n'user_id' => auth()->guard('user')->user()->id,\n'comment' => $data['comment'],\n]);\n\n$file = $data['file'];\n\n$fileName = $file->getClientOriginalName();\n\n$path = 'leads/' . $leadActivity->id . '/' . $fileName;\n\n$file->store($path);\n\n$leadFile = $this->model->create([\n'lead_activity_id' => $leadActivity->id,\n'file_name' => $fileName,\n'file_path' => $path,\n]);\n\nreturn $leadFile;\n}", "CodeBleu_score": 51.04952674666509}, {"code": "<?\npublic function upload(array $data){\n\t$file = $data['file'];\n\nif (! $file) {\nreturn;\n}\n\n$leadActivity = $this->create($data);\n\n$fileStorage = Storage::disk('s3');\n\n$filename = $fileStorage->putFile('leads', $file);\n\n$leadActivityFile = new LeadActivityFile;\n$leadActivityFile->lead_activity_id = $leadActivity->id;\n$leadActivityFile->file = $filename;\n$leadActivityFile->save();\n\nreturn $leadActivityFile;\n}", "CodeBleu_score": 40.26349320891255}, {"code": "<?\npublic function upload(array $data){\n\t$file = $data['file'];\n\nif (! $file) {\nreturn;\n}\n\n$leadActivity = app(LeadActivityRepository::class)->create([\n'lead_id' => $data['lead_id'],\n'user_id' => auth()->guard('user')->user()->id,\n'comment' => $data['comment'],\n]);\n\n$path = 'leads/' . $leadActivity->id . '/' . $file->getClientOriginalName();\n$file->storeAs('public/' . $path);\n\nreturn app(LeadActivityFileRepository::class)->create([\n'lead_activity_id' => $leadActivity->id,\n'name' => $file->getClientOriginalName(),\n'path' => $path,\n]);\n}", "CodeBleu_score": 54.92790287392422}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t$request = request();\n$route = $request->route();\n$is_admin = false;\n$is_api = false;\n$is_api_auth = false;\n\nif ($route) {\n$route_name = $route->getName();\n$is_admin = substr($route_name, 0, 5) == 'admin';\n$is_api = substr($route_name, 0, 3) == 'api';\n$is_api_auth = substr($route_name, 0, 13) == 'api.auth.login';\n}\n\nif ($exception instanceof ModelNotFoundException) {\nif ($is_admin) {\nreturn redirect(route('admin.session.create'));\n}\n\nreturn abort(404);\n}\n\nif ($exception instanceof PDOException) {\nreturn abort(500);\n}\n\nif ($exception instanceof ParseError) {\nreturn abort(500);\n}\n\nif ($exception instanceof AuthenticationException) {\nif ($is_admin) {\nreturn redirect(route('admin.session.create'));\n}\n\nreturn abort(401);\n}\n\nif ($exception instanceof HttpException) {\nreturn response()->view('errors.http', ['exception' => $exception], $exception->getStatusCode());\n}\n\n$handler = Container::getInstance()->make(AppExceptionHandler::class);\nreturn $handler->render($request, $exception);\n}", "CodeBleu_score": 46.805853334835575}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t\t$request = request();\n\t$response = app(ResponseFactory::class);\n\t$handler = app(ExceptionHandler::class);\n\n\t$this->app->instance(ExceptionHandler::class, $handler);\n\n\tif (app()->bound(Container::class)) {\n\t\t$this->app->bind(Container::class, Container::getInstance());\n\t}\n\n\tif ($request->is('api/*')) {\n\t\tif ($exception instanceof ModelNotFoundException) {\n\t\t\treturn $response->json([\n\t\t\t\t'error' => 'Resource not found'\n\t\t\t], 404);\n\t\t}\n\n\t\tif ($exception instanceof PDOException) {\n\t\t\treturn $response->json([\n\t\t\t\t'error' => 'Database error'\n\t\t\t], 500);\n\t\t}\n\n\t\tif ($exception instanceof ParseError) {\n\t\t\treturn $response->json([\n\t\t\t\t'error' => 'Parse error'\n\t\t\t], 500);\n\t\t}\n\n\t\treturn $handler->render($request, $exception);\n\t}\n\n\tif ($exception instanceof AuthenticationException) {\n\t\treturn redirect(route('admin.login'));\n\t}\n\n\tif ($exception instanceof HttpException) {\n\t\treturn redirect(route('admin.login'));\n\t}\n\n\treturn $handler->render($request, $exception);\n}", "CodeBleu_score": 37.973837852048334}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t$request = app(Request::class);\n$response = app(Response::class);\n$router = app(Router::class);\n$exceptionHandler = app(ExceptionHandler::class);\n$appExceptionHandler = app(AppExceptionHandler::class);\n\nif ($exception instanceof AuthenticationException) {\n$request->session()->flush();\nreturn $response->redirectToRoute('admin.login');\n}\n\nif ($exception instanceof ModelNotFoundException) {\nreturn $response->view('errors.404', [], 404);\n}\n\nif ($exception instanceof PDOException) {\nreturn $response->view('errors.500', [], 500);\n}\n\nif ($exception instanceof ParseError) {\nreturn $response->view('errors.500', [], 500);\n}\n\nif ($exception instanceof HttpException) {\nreturn $response->view('errors.500', [], 500);\n}\n\n$requestUri = $request->getRequestUri();\n$route = $router->getRoutes()->match($requestUri);\n\nif (isset($route->action['middleware']) && in_array('auth', $route->action['middleware'])) {\n$request->session()->flush();\nreturn $response->redirectToRoute('admin.login');\n}\n\nif (isset($route->action['middleware']) && in_array('admin', $route->action['middleware'])) {\n$request->session()->flush();\nreturn $response->redirectToRoute('admin.login');\n}\n\nif (isset($route->action['middleware']) && in_array('front', $route->action['middleware'])) {\n$request->session()->flush();\nreturn $response->redirectToRoute('admin.login');\n}\n\n$exceptionHandler->render($request, $exception)->send();\n$appExceptionHandler->report($exception);\n}", "CodeBleu_score": 41.51963200770853}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\t\tif (request()->expectsJson()) {\n\t\treturn response()->json([\n\t\t\t'error' => [\n\t\t\t\t'code' => $statusCode,\n\t\t\t\t'message' => $this->getError($path, $statusCode)\n\t\t\t]\n\t\t], $statusCode);\n\t} else {\n\t\treturn response()->view('errors.' . $statusCode, [\n\t\t\t'error' => [\n\t\t\t\t'code' => $statusCode,\n\t\t\t\t'message' => $this->getError($path, $statusCode)\n\t\t\t]\n\t\t], $statusCode);\n\t}\n}", "CodeBleu_score": 57.577643247783726}, {"code": "<?\nprivate function response($path, $statusCode){\n\t\tif (request()->expectsJson()) {\n\t\treturn response()->json([\n\t\t\t'message' => \"The page $path could not be found.\",\n\t\t], $statusCode);\n\t} else {\n\t\treturn response()->view(\"errors.$statusCode\", [\n\t\t\t'title' => \"Error $statusCode\",\n\t\t\t'message' => \"The page $path could not be found.\"\n\t\t], $statusCode);\n\t}\n}", "CodeBleu_score": 58.30140651995486}, {"code": "<?\nprivate function response($path, $statusCode){\n\t\t$request = request();\n\tif ($request->expectsJson()) {\n\t\treturn response()->json([\n\t\t\t'error' => $statusCode,\n\t\t\t'message' => $path\n\t\t], $statusCode);\n\t} else {\n\t\treturn response()->view('errors.' . $statusCode, [\n\t\t\t'error' => $statusCode,\n\t\t\t'message' => $path\n\t\t], $statusCode);\n\t}\n}", "CodeBleu_score": 50.36703505840969}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t$activityIds = request()->get('activityIds');\n$isDone = request()->get('isDone');\n$count = 0;\n\nforeach ($activityIds as $activityId) {\nEvent::dispatch('activity.activity.update.before', $activityId);\n$activity = $this->activityRepository->find($activityId);\n$activity->update(['is_done' => $isDone]);\nEvent::dispatch('activity.activity.update.after', $activityId);\n$count++;\n}\n\nreturn response()->json([\n'success' => true,\n'message' => trans('admin::app.activity.mass-update-status', ['count' => $count])\n], 200);\n}", "CodeBleu_score": 42.41058331596955}, {"code": "<?\npublic function massUpdate(){\n\t$activityIds = request()->get('activityIds');\n$isDone = request()->get('isDone');\n$updatedActivities = 0;\n\nif (! $activityIds || ! $isDone) {\nreturn response()->json(['success' => false, 'message' => 'Please specify activity IDs and a status to update to.']);\n}\n\nforeach ($activityIds as $activityId) {\n$activity = $this->activityRepository->find($activityId);\n\nif (! $activity) {\ncontinue;\n}\n\nEvent::dispatch('activity.update.before', $activity);\n$activity->is_done = $isDone;\n$activity->save();\nEvent::dispatch('activity.update.after', $activity);\n$updatedActivities++;\n}\n\nreturn response()->json(['success' => true, 'message' => 'Updated ' . $updatedActivities . ' activities.']);\n}", "CodeBleu_score": 42.609320745372855}, {"code": "<?\npublic function massUpdate(){\n\t$activities = request()->input('activities');\n$status = request()->input('status');\n$count = 0;\n\nforeach ($activities as $activityId) {\n$activity = $this->activityRepository->find($activityId);\n\nEvent::dispatch('activity.mass_update.before', $activity);\n$activity->update(['is_done' => $status]);\nEvent::dispatch('activity.mass_update.after', $activity);\n$count++;\n}\n\nreturn response()->json([\n'success' => true,\n'message' => trans('admin::app.response.mass-update-status', ['name' => 'Activities', 'count' => $count])\n]);\n}", "CodeBleu_score": 42.39269569420212}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t$ids = request()->input('ids');\n$ids = explode(',', $ids);\nforeach ($ids as $id) {\nEvent::dispatch('activity.activity.delete.before', $id);\n$activity = $this->activityRepository->find($id);\nif ($activity->attachment) {\nStorage::delete($activity->attachment);\n}\n$activity->delete();\nEvent::dispatch('activity.activity.delete.after', $id);\n}\n\nreturn response()->json(['message' => trans('admin::app.response.destroy-success', ['name' => trans('admin::app.acl.activities')])]);\n}", "CodeBleu_score": 42.25379006287109}, {"code": "<?\n public function massDestroy(){\n\t$activities = request()->get('indexes');\nforeach ($activities as $activity) {\n$activity = $this->activityRepository->find($activity);\n\nEvent::dispatch('activity.deleting', $activity);\n$activity->delete();\nEvent::dispatch('activity.deleted', $activity);\n}\n\nreturn response()->json([\n'success' => true,\n'message' => trans('admin::app.activity.mass-destroy-success')\n]);\n}", "CodeBleu_score": 35.75550718426721}, {"code": "<?\n public function massDestroy(){\n\t$ids = request()->input('ids');\n\nforeach (explode(',', $ids) as $id) {\nEvent::dispatch('activity.activity.delete.before', $id);\n\nif (auth()->guard('user')->check()) {\n$activity = $this->activityRepository->findWhere(['id' => $id, 'user_id' => auth()->guard('user')->user()->id])->first();\n} else {\n$activity = $this->activityRepository->findWhere(['id' => $id, 'admin_id' => auth()->guard('admin')->user()->id])->first();\n}\n\nif (! $activity) {\ncontinue;\n}\n\n$activity->delete();\nEvent::dispatch('activity.activity.delete.after', $id);\n}\n\nreturn response()->json(['message' => trans('activity::app.admin.activities.mass-destroy-success')]);\n}", "CodeBleu_score": 29.502662014131324}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t$cards = $this->getDashboardCards();\n$data = request()->all();\nforeach ($cards as $card) {\n$cardId = $card->id;\n$cardType = $card->type;\n$card->selected = false;\nif (isset($data[$cardId])) {\nif ($data[$cardId] == 'true') {\n$card->selected = true;\n}\n}\n}\nreturn response()->json($cards);\n}", "CodeBleu_score": 38.53624968457039}, {"code": "<?\n public function updateCards(){\n\t$cards = $this->getDashboardCards();\n$request = request();\nforeach ($cards as $card) {\n$card->selected = $request->get($card->code);\n$card->save();\n}\nreturn response()->json($cards);\n}", "CodeBleu_score": 26.754455760304495}, {"code": "<?\n public function updateCards(){\n\t $cards = $this->getDashboardCards();\n $request = request();\n foreach ($cards as $card) {\n if ($request->has($card['code'])) {\n $card['selected'] = $request->input($card['code']);\n }\n }\n return response()->json($cards);\n }", "CodeBleu_score": 33.87476459830876}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t_375\u200d.\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d", "CodeBleu_score": 1.800250659240318}, {"code": "<?\npublic function store(){\n\t_token, name, value, code}", "CodeBleu_score": 1.7447806432532755}, {"code": "<?\npublic function store(){\n\t_method_=\"PUT\"}", "CodeBleu_score": 1.7441917989076512}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t$file_name = request()->get('file_name');\n$file_path = request()->get('file_path');\n$config = $this->configRepository->findOneByField('code', $file_path);\n$file_path = $config->value['path'] . '/' . $file_name;\n$file_name = $config->value['path'] . '/' . $file_name;\n$file = Storage::get($file_path);\n$headers = array(\n'Content-Type: ' . $config->value['content_type'],\n);\nreturn response($file, 200, $headers);\n}", "CodeBleu_score": 42.5628357976207}, {"code": "<?\npublic function download(){\n\t$filePath = request()->get('path');\n$fileName = basename($filePath);\n$config = app(ConfigurationRepository::class)->findOneByField('code', $fileName);\nif (! $config) {\nreturn response()->json([\n'message' => 'File not found.'\n], 404);\n}\n$file = Storage::disk($config->value['disk'])->getDriver()\n->getAdapter()\n->applyPathPrefix($filePath);\nreturn response()->download($file, $config->value['file_name']);\n}", "CodeBleu_score": 41.082901002450164}, {"code": "<?\npublic function download(){\n\t$filePath = request()->route('path');\n$fileName = request()->route('name');\n$file = $this->configRepository->findOneByField('code', $filePath);\n\nif (! $file) {\nabort(404);\n}\n\n$filePath = $file->value;\n$fileName = $file->label . '.' . pathinfo($filePath, PATHINFO_EXTENSION);\n\nreturn response()->download(storage_path('app/' . $filePath), $fileName);\n}", "CodeBleu_score": 44.39627629432706}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\n}", "CodeBleu_score": 4.81262677663159}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t//    String token = request.getHeader(\"token\");\n//    if (token == null) {\n//        return Result.fail(AdminCodeEnum.TOKEN_ERROR.getCode(), AdminCodeEnum.TOKEN_ERROR.getMsg());\n//    }\n//    AdminUser adminUser = adminUserService.checkToken(token);\n//    if (adminUser == null) {\n//        return Result.fail(AdminCodeEnum.TOKEN_ERROR.getCode(), AdminCodeEnum.TOKEN_ERROR.getMsg());\n//    }\n//    if (list == null) {\n//        return Result.fail(AdminCodeEnum.PARAM_ERROR.getCode(), AdminCodeEnum.PARAM_ERROR.getMsg());\n//    }\n//    List<AdminModelSort> adminModelSortList = new ArrayList<>();\n//    for (String s : list) {\n//        AdminModelSort adminModelSort = new AdminModelSort();\n//        adminModelSort.setAdminUserId(adminUser.getId());\n//        adminModelSort.setModelSort(s);\n//        adminModelSortList.add(adminModelSort);\n//    }\n//    adminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getAdminUserId, adminUser.getId()));\n//    adminModelSortService.saveBatch(adminModelSortList);\n//    return Result.success();\n    return Result.fail(AdminCodeEnum.NOT_IMPLEMENTED.getCode(), AdminCodeEnum.NOT_IMPLEMENTED.getMsg());\n}", "CodeBleu_score": 8.093595451559038}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t//    List<AdminModelSort> modelSortList = new ArrayList<>();\n//    for (String s : list) {\n//        AdminModelSort modelSort = new AdminModelSort();\n//        modelSort.setModel(s);\n//        modelSort.setSort(0);\n//        modelSortList.add(modelSort);\n//    }\n//    adminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, userId));\n//    adminModelSortService.saveBatch(modelSortList);\n//    return ResultUtil.success(null);\n    return ResultUtil.success(null);\n}", "CodeBleu_score": 4.860580714462699}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t\tResult result = new Result();\n\ttry {\n\t\tAdminUserConfig adminUserConfig = adminUserConfigService.getById(moduleSetting.getId());\n\t\tif (adminUserConfig == null) {\n\t\t\tresult.setCode(AdminCodeEnum.CONFIG_NOT_EXIST.getCode());\n\t\t\tresult.setMsg(AdminCodeEnum.CONFIG_NOT_EXIST.getMsg());\n\t\t\treturn result;\n\t\t}\n\t\tif (adminUserConfig.getModule() == AdminModuleEnum.CRM.getCode()) {\n\t\t\tresult.setCode(AdminCodeEnum.CONFIG_NOT_CRM.getCode());\n\t\t\tresult.setMsg(AdminCodeEnum.CONFIG_NOT_CRM.getMsg());\n\t\t\treturn result;\n\t\t}\n\t\tadminUserConfig.setEnable(moduleSetting.getEnable());\n\t\tadminUserConfig.setUpdateTime(DateUtil.getTime());\n\t\tadminUserConfigService.updateById(adminUserConfig);\n\t\tresult.setCode(AdminCodeEnum.SUCCESS.getCode());\n\t\tresult.setMsg(AdminCodeEnum.SUCCESS.getMsg());\n\t\treturn result;\n\t} catch (Exception e) {\n\t\tresult.setCode(AdminCodeEnum.ERROR.getCode());\n\t\tresult.setMsg(AdminCodeEnum.ERROR.getMsg());\n\t\treturn result;\n\t}\n}", "CodeBleu_score": 40.440776482279425}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t\tResult result = new Result();\n\tAdminUserConfig userConfig = UserUtil.getUserConfig();\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getId());\n\tif (adminConfig == null) {\n\t\tresult.setCode(AdminCodeEnum.NOT_FOUND.getCode());\n\t\tresult.setMessage(AdminCodeEnum.NOT_FOUND.getMessage());\n\t\treturn result;\n\t}\n\tif (adminConfig.getModule() == AdminModuleEnum.CRM.getModule()) {\n\t\tresult.setCode(AdminCodeEnum.NOT_FOUND.getCode());\n\t\tresult.setMessage(AdminCodeEnum.NOT_FOUND.getMessage());\n\t\treturn result;\n\t}\n\tif (adminConfig.getModule() == AdminModuleEnum.MODULE.getModule()) {\n\t\tresult.setCode(AdminCodeEnum.NOT_FOUND.getCode());\n\t\tresult.setMessage(AdminCodeEnum.NOT_FOUND.getMessage());\n\t\treturn result;\n\t}\n\tif (adminConfig.getModule() == AdminModuleEnum.USER.getModule()) {\n\t\tresult.setCode(AdminCodeEnum.NOT_FOUND.getCode());\n\t\tresult.setMessage(AdminCodeEnum.NOT_FOUND.getMessage());\n\t\treturn result;\n\t}\n\tif (adminConfig.getModule() == AdminModuleEnum.ROLE.getModule()) {\n\t\tresult.setCode(AdminCodeEnum.NOT_FOUND.getCode());\n\t\tresult.setMessage(AdminCodeEnum.NOT_FOUND.getMessage());\n\t\treturn result;\n\t}\n\tif (adminConfig.getModule() == AdminModuleEnum.COMPANY.getModule()) {\n\t\tresult.setCode(AdminCodeEnum.NOT_FOUND.getCode());\n\t\tresult.setMessage(AdminCodeEnum.NOT_FOUND.getMessage());\n\t\treturn result;\n\t}\n\tif (adminConfig.getModule() == AdminModuleEnum.WELCOMESPEECH.getModule()) {\n\t\tresult.setCode(AdminCodeEnum.NOT_FOUND.getCode());\n\t\tresult.setMessage(AdminCodeEnum.NOT_FOUND.getMessage());\n\t\treturn result;\n\t}\n\tif (adminConfig.getModule() == AdminModuleEnum.LOG.getModule()) {\n\t\tresult.setCode(AdminCodeEnum.NOT_FOUND.getCode());\n\t\tresult.setMessage(AdminCodeEnum.NOT_FOUND.getMessage());\n\t\treturn", "CodeBleu_score": 34.59681052594896}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t\tResult result = new Result();\n\t// 1. \u9a8c\u8bc1\u53c2\u6570\n\tif (moduleSetting == null || moduleSetting.getId() == null) {\n\t\tresult.setCode(AdminCodeEnum.PARAM_ERROR.getCode());\n\t\tresult.setMsg(AdminCodeEnum.PARAM_ERROR.getMsg());\n\t\treturn result;\n\t}\n\n\t// 2. \u9a8c\u8bc1\u6743\u9650\n\tif (!UserUtil.hasPermission(AdminModuleEnum.SYSTEM_SETTING)) {\n\t\tresult.setCode(AdminCodeEnum.NO_PERMISSION.getCode());\n\t\tresult.setMsg(AdminCodeEnum.NO_PERMISSION.getMsg());\n\t\treturn result;\n\t}\n\n\t// 3. \u67e5\u8be2\u5f53\u524d\u914d\u7f6e\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getId());\n\tif (adminConfig == null) {\n\t\tresult.setCode(AdminCodeEnum.CONFIG_NOT_FOUND.getCode());\n\t\tresult.setMsg(AdminCodeEnum.CONFIG_NOT_FOUND.getMsg());\n\t\treturn result;\n\t}\n\n\t// 4. \u9a8c\u8bc1\u662f\u5426\u4e3a CRM\n\tif (adminConfig.getModule() == AdminModuleEnum.CRM) {\n\t\tresult.setCode(AdminCodeEnum.CONFIG_NOT_FOUND.getCode());\n\t\tresult.setMsg(AdminCodeEnum.CONFIG_NOT_FOUND.getMsg());\n\t\treturn result;\n\t}\n\n\t// 5. \u4fee\u6539\u914d\u7f6e\n\tadminConfig.setStatus(moduleSetting.getStatus());\n\tadminConfigService.updateById(adminConfig);\n\n\treturn result;\n}", "CodeBleu_score": 46.91738799091545}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\n//        // \u6821\u9a8c\u53c2\u6570", "CodeBleu_score": 7.019457028351049}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t//     List<AdminUserConfig> list = adminUserConfigService.list(new LambdaQueryWrapper<AdminUserConfig>()\n//             .eq(AdminUserConfig::getCustomKey, customKey));\n//     if (list.size() == 0) {\n//         AdminUserConfig adminUserConfig = new AdminUserConfig();\n//         adminUserConfig.setCustomKey(customKey);\n//         adminUserConfig.setCustomValue(json.toJSONString());\n//         adminUserConfigService.save(adminUserConfig);\n//     } else {\n//         AdminUserConfig adminUserConfig = list.get(0);\n//         adminUserConfig.setCustomValue(json.toJSONString());\n//         adminUserConfigService.updateById(adminUserConfig);\n//     }\n//     return ResultUtil.success(null);\n }", "CodeBleu_score": 7.1426324062336555}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t String username = UserUtil.getCurrentUserName();\n AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByKey(username, customKey);\n if (userConfig == null) {\n userConfig = new AdminUserConfig();\n userConfig.setUsername(username);\n userConfig.setCustomKey(customKey);\n userConfig.setCustomValue(json.toJSONString());\n adminUserConfigService.save(userConfig);\n } else {\n userConfig.setCustomValue(json.toJSONString());\n adminUserConfigService.updateById(userConfig);\n }\n return Result.success();\n }", "CodeBleu_score": 57.402046986355295}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t//        AdminUser user = adminUserService.queryUserInfo(userId);\n//        if (ObjectUtil.isNull(user)) {\n//            return Result.fail(AdminCodeEnum.USER_NOT_EXIST);\n//        }\n//        AdminUserVO userVO = BeanUtil.copyProperties(user, AdminUserVO.class);\n//        userVO.setDepartmentName(departmentService.queryDepartmentName(user.getDepartmentId()));\n//        userVO.setSalt(null);\n//        userVO.setPassword(null);\n//        return Result.success(userVO);\n    return null;\n}", "CodeBleu_score": 8.254434954803864}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t//    AdminUser user = adminUserService.getById(userId);\n//    if (user == null) {\n//        return Result.fail(AdminCodeEnum.USER_NOT_EXIST);\n//    }\n//    return Result.success(user);\n    return null;\n}", "CodeBleu_score": 8.254434954803864}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t//    AdminUser user = adminUserService.queryUserInfo(userId);\n//    if (user == null) {\n//        return Result.fail(AdminCodeEnum.USER_NOT_EXIST);\n//    }\n//    String deptName = adminDepartmentService.queryDeptName(user.getDeptId());\n//    user.setDeptName(deptName);\n//    user.setSalt(null);\n//    user.setPassword(<PASSWORD>);\n//    return Result.success(user);\n    return null;\n}", "CodeBleu_score": 8.254434954803864}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t }", "CodeBleu_score": 0.8375966930517764}, {"code": " public Result readNotice() {\n\t\n}", "CodeBleu_score": 0.8375966930517764}, {"code": " public Result readNotice() {\n\t\n}", "CodeBleu_score": 0.8375966930517764}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\n}", "CodeBleu_score": 1.7832668431601406}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t//    AdminConfig adminConfig = adminConfigMapper.selectOne(new QueryWrapper<AdminConfig>()\n//            .eq(\"name\", AdminConst.ADMIN_CONFIG_COMPANY_INFO));\n//    if (adminConfig == null) {\n//        adminConfig = new AdminConfig();\n//        adminConfig.setName(AdminConst.ADMIN_CONFIG_COMPANY_INFO);\n//        adminConfig.setValue(\"{\n\" +\n//                \"    \\\"companyName\\\": \\\"\\\",\n\" +\n//                \"    \\\"companyAddress\\\": \\\"\\\",\n\" +\n//                \"    \\\"companyTel\\\": \\\"\\\",\n\" +\n//                \"    \\\"companyFax\\\": \\\"\\\",\n\" +\n//                \"    \\\"companyEmail\\\": \\\"\\\",\n\" +\n//                \"    \\\"companyWebsite\\\": \\\"\\\",\n\" +\n//                \"    \\\"companyLogo\\\": \\\"\\\",\n\" +\n//                \"    \\\"companyCopyright\\\": \\\"\\\",\n\" +\n//                \"    \\\"companyNotice\\\": \\\"\\\"\n\" +\n//                \"}\");\n//        adminConfigMapper.insert(adminConfig);\n//    }\n//    adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n//    adminConfigMapper.updateById(adminConfig);\n}", "CodeBleu_score": 7.270407417627456}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\n}", "CodeBleu_score": 1.7832668431601406}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminConfig config = adminConfigMapper.selectOne(new QueryWrapper<AdminConfig>().eq(\"key\", AdminConst.ADMIN_CONFIG_KEY));\n\tif (config == null) {\n\t\treturn new AdminCompanyBO();\n\t}\n\treturn JSON.parseObject(config.getValue(), AdminCompanyBO.class);\n}", "CodeBleu_score": 32.93719946110467}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminCompanyBO company = new AdminCompanyBO();\n\ttry {\n\t\tList<AdminConfig> configs = adminConfigMapper.selectList(new QueryWrapper<AdminConfig>().eq(\"key\", AdminConst.ADMIN_COMPANY_CONFIG));\n\t\tif (CollUtil.isEmpty(configs)) {\n\t\t\treturn company;\n\t\t}\n\t\tString value = configs.get(0).getValue();\n\t\tcompany = JSON.parseObject(value, AdminCompanyBO.class);\n\t} catch (Exception e) {\n\t\tlog.error(\"\u67e5\u8be2\u516c\u53f8\u914d\u7f6e\u5931\u8d25\", e);\n\t}\n\treturn company;\n}", "CodeBleu_score": 41.819296834343525}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n\tAdminConfig adminConfig = adminConfigService.queryByKey(AdminConst.ADMIN_COMPANY_KEY);\n\tif (adminConfig != null) {\n\t\tadminCompanyBO = JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\n\t}\n\treturn adminCompanyBO;\n}", "CodeBleu_score": 56.421204519914134}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t if (CollUtil.isEmpty(stringList)) {\n return;\n }\n List<AdminConfig> list = new ArrayList<>();\n stringList.forEach(s -> {\n AdminConfig adminConfig = new AdminConfig();\n adminConfig.setConfigName(\"log_welcome_speech\");\n adminConfig.setConfigValue(s);\n list.add(adminConfig);\n });\n this.remove(new QueryWrapper<AdminConfig>().eq(\"config_name\", \"log_welcome_speech\"));\n this.saveBatch(list);\n }", "CodeBleu_score": 37.38283789228964}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t if (CollUtil.isEmpty(stringList)) {\n return;\n }\n List<AdminConfig> configList = new ArrayList<>();\n stringList.forEach(s -> {\n AdminConfig config = new AdminConfig();\n config.setConfigName(AdminConst.LOG_WELCOME_SPEECH);\n config.setConfigValue(s);\n configList.add(config);\n });\n adminConfigService.remove(new QueryWrapper<AdminConfig>().eq(\"config_name\", AdminConst.LOG_WELCOME_SPEECH));\n adminConfigService.saveBatch(configList);\n }", "CodeBleu_score": 49.962559519786815}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t\tList<AdminConfig> list = new ArrayList<>();\n\tfor (String string : stringList) {\n\t\tAdminConfig config = new AdminConfig();\n\t\tconfig.setConfigKey(AdminConst.LOG_WELCOME_SPEECH);\n\t\tconfig.setConfigValue(string);\n\t\tlist.add(config);\n\t}\n\tthis.remove(new QueryWrapper<AdminConfig>().eq(\"config_key\", AdminConst.LOG_WELCOME_SPEECH));\n\tthis.saveBatch(list);\n}", "CodeBleu_score": 45.69887116810308}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tAdminUser adminUser = adminUserService.queryByUsername(adminInitDataBO.getUsername());\n\tif (adminUser == null) {\n\t\tlog.error(\"\u7528\u6237\u540d\u9519\u8bef\");\n\t\tthrow new CrmException(SystemCodeEnum.USERNAME_ERROR);\n\t}\n\tString password = <PASSWORD>Util.md5(adminInitDataBO.getPassword() + adminUser.getSalt());\n\tif (!password.equals(adminUser.getPassword())) {\n\t\tlog.error(\"\u5bc6\u7801\u9519\u8bef\");\n\t\tthrow new CrmException(SystemCodeEnum.PASSWORD_ERROR);\n\t}\n\tString token = RandomUtil.randomString(32);\n\tredisService.set(AdminCacheKey.ADMIN_TOKEN_PREFIX + token, adminUser.getId(), 600000);\n\treturn token;\n}", "CodeBleu_score": 35.00161472847751}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tString username = adminInitDataBO.getUsername();\n\tString password = <PASSWORD>InitDataBO.getPassword();\n\tString salt = adminInitDataBO.getSalt();\n\tAdminUser adminUser = adminUserService.getAdminUserByUsername(username);\n\tif (adminUser == null) {\n\t\tthrow new CrmException(AdminCodeEnum.USER_NOT_EXIST);\n\t}\n\tString passwordMd5 = AuthPasswordUtil.encrypt(password, salt);\n\tif (!passwordMd5.equals(adminUser.getPassword())) {\n\t\tthrow new CrmException(AdminCodeEnum.PASSWORD_ERROR);\n\t}\n\tString token = RandomUtil.randomString(16);\n\tredisService.set(AdminCacheKey.ADMIN_TOKEN + token, adminUser.getId(), 10 * 60);\n\treturn token;\n}", "CodeBleu_score": 40.853170373228465}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t//    String username = adminInitDataBO.getUsername();", "CodeBleu_score": 1.4779500694324244}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\t argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse = argparse =", "CodeBleu_score": 2.645893030477927}, {"code": "private boolean verifyInitAuth(){\n\t matplotlib.use('Agg')", "CodeBleu_score": 1.6541416198364227}, {"code": "private boolean verifyInitAuth(){\n\t numpy.array([1, 2, 3, 4, 5, 6])\n    String userId = UserUtil.getUserId();\n    String key = AdminCacheKey.ADMIN_INIT_AUTH.getKey() + userId;\n    List<String> unAuthUrlList = redisService.getList(key);\n    if (CollUtil.isEmpty(unAuthUrlList)) {\n        return true;\n    }\n    String url = RequestUtil.getRequest().getRequestURI();\n    return !unAuthUrlList.contains(url);\n}", "CodeBleu_score": 46.55856659113735}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tList<AdminRoleMenu> adminRoleMenuList = new ArrayList<>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n\t\tadminRoleMenu.setRoleId(roleId);\n\t\tadminRoleMenu.setMenuId(menuId);\n\t\tadminRoleMenuList.add(adminRoleMenu);\n\t}\n\tadminRoleMenuMapper.saveRoleMenu(adminRoleMenuList);\n}", "CodeBleu_score": 66.57260885327435}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tList<AdminRoleMenu> list = new ArrayList<>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu roleMenu = new AdminRoleMenu();\n\t\troleMenu.setRoleId(roleId);\n\t\troleMenu.setMenuId(menuId);\n\t\tlist.add(roleMenu);\n\t}\n\tadminRoleMenuMapper.saveRoleMenu(list);\n}", "CodeBleu_score": 52.5028427648351}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tList<AdminRoleMenu> adminRoleMenuList = new ArrayList<>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n\t\tadminRoleMenu.setRoleId(roleId);\n\t\tadminRoleMenu.setMenuId(menuId);\n\t\tadminRoleMenuList.add(adminRoleMenu);\n\t}\n\tadminRoleMenuMapper.saveRoleMenu(adminRoleMenuList);\n}", "CodeBleu_score": 66.57260885327435}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\t\t// 1. \u83b7\u5f97\u7d22\u5f15\n\tString index = \"sys_log\";\n\t// 2. \u83b7\u5f97RestHighLevelClient\n\tRestHighLevelClient client = ElasticsearchUtil.getRestHighLevelClient();\n\t// 3. \u5224\u65ad\u7d22\u5f15\u662f\u5426\u5b58\u5728\n\tGetIndexRequest request = new GetIndexRequest(index);\n\tboolean exists = false;\n\ttry {\n\t\texists = client.indices().exists(request, RequestOptions.DEFAULT);\n\t} catch (IOException e) {\n\t\tlog.error(\"\u5224\u65ad\u7d22\u5f15\u662f\u5426\u5b58\u5728\u5f02\u5e38\", e);\n\t}\n\t// 4. \u4e0d\u5b58\u5728\u5219\u521b\u5efa\n\tif (!exists) {\n\t\tCreateIndexRequest createIndexRequest = new CreateIndexRequest(index);\n\t\ttry {\n\t\t\tclient.indices().create(createIndexRequest, RequestOptions.DEFAULT);\n\t\t} catch (IOException e) {\n\t\t\tlog.error(\"\u521b\u5efa\u7d22\u5f15\u5f02\u5e38\", e);\n\t\t}\n\t}\n\t// 5. \u83b7\u5f97map\n\tMap<String, Object> map = BeanUtil.beanToMap(sysLog);\n\t// 6. \u683c\u5f0f\u5316\u65f6\u95f4\n\tmap.put(\"createTime\", DateUtil.format(sysLog.getCreateTime(), \"yyyy-MM-dd HH:mm:ss\"));\n\t// 7. \u5220\u9664ID\n\tmap.remove(\"id\");\n\t// 8. \u521b\u5efaIndexRequest\n\tIndexRequest indexRequest = new IndexRequest(index);\n\tindexRequest.id(String.valueOf(sysLog.getId()));\n\tindexRequest.source(map, XContentType.JSON);\n\t// 9. \u5f02\u6b65\u4fdd\u5b58\n\tThreadPoolTaskExecutor executor = SpringUtil.getBean(\"threadPoolTaskExecutor\");\n\texecutor.execute(() -> {\n\t\ttry {\n\t\t\tIndexResponse response = client.index(indexRequest, RequestOptions.DEFAULT);\n\t\t\tlog.info(\"\u4fdd\u5b58\u65e5\u5fd7\u6210\u529f\uff0cid={}\", response.getId());\n\t\t} catch (IOException e) {\n\t\t\tlog.error(\"\u4fdd\u5b58\u65e5\u5fd7\u5f02\u5e38\", e);\n\t\t}\n\t});\n}", "CodeBleu_score": 51.58492761878644}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t\n}", "CodeBleu_score": 2.498932858752913}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t//    // \u5148\u67e5\u8be2\u7d22\u5f15\n//    GetIndexRequest getIndexRequest = new GetIndexRequest(sysLogIndex);\n//    boolean exists = esClient.indices().exists(getIndexRequest, RequestOptions.DEFAULT);\n//    if (!exists) {\n//        try {\n//            CreateIndexRequest createIndexRequest = new CreateIndexRequest(sysLogIndex);\n//            createIndexRequest.mapping(sysLogMapping, XContentType.JSON);\n//            esClient.indices().create(createIndexRequest, RequestOptions.DEFAULT);\n//        } catch (IOException e) {\n//            log.error(\"\u521b\u5efa\u7d22\u5f15\u5931\u8d25\", e);\n//        }\n//    }\n//    // \u7136\u540e\u4fdd\u5b58\u6570\u636e\n//    Map<String, Object> map = BeanUtil.beanToMap(sysLog);\n//    map.put(\"createTime\", DateUtil.format(sysLog.getCreateTime(), \"yyyy-MM-dd HH:mm:ss\"));\n//    map.remove(\"id\");\n//    IndexRequest indexRequest = new IndexRequest(sysLogIndex).id(String.valueOf(sysLog.getId()));\n//    indexRequest.source(JSONUtil.toJsonStr(map), XContentType.JSON);\n//    try {\n//        IndexResponse response = esClient.index(indexRequest, RequestOptions.DEFAULT);\n//        log.info(\"\u4fdd\u5b58\u65e5\u5fd7\u6210\u529f, id: {}, response: {}\", sysLog.getId(), response.getResult());\n//    } catch (IOException e) {\n//        log.error(\"\u4fdd\u5b58\u65e5\u5fd7\u5931\u8d25\", e);\n//    }\n}", "CodeBleu_score": 2.498932858752913}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\tSearchRequest searchRequest = new SearchRequest(\"sys_log\");", "CodeBleu_score": 5.976473588464719}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t\n}", "CodeBleu_score": 2.2160770868584074}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t\n}", "CodeBleu_score": 2.2160770868584074}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\t\t// Create a writable stream for the destination file.\n\tconst file = fs.createWriteStream(dest);\n\n\t// Make an HTTPS GET request to the URL.\n\tconst response = await axios({\n\t\tmethod: 'get',\n\t\turl,\n\t\tresponseType: 'stream'\n\t});\n\n\t// Pipe the response to the file.\n\tresponse.data.pipe(file);\n\n\t// Wait for the file to finish downloading.\n\treturn new Promise((resolve, reject) => {\n\t\tfile.on('finish', resolve);\n\t\tfile.on('error', reject);\n\t});\n}", "CodeBleu_score": 36.92976873515802}, {"code": "async function downloadFile(url, dest){\n\t\tconst file = fs.createWriteStream(dest);\n\tconst response = await axios({\n\t\tmethod: 'GET',\n\t\turl,\n\t\tresponseType: 'stream',\n\t});\n\n\tresponse.data.pipe(file);\n\n\treturn new Promise((resolve, reject) => {\n\t\tfile.on('finish', () => {\n\t\t\tfile.close();\n\t\t\tresolve();\n\t\t});\n\n\t\tfile.on('error', (error) => {\n\t\t\tfs.unlink(dest, () => {\n\t\t\t\treject(error);\n\t\t\t});\n\t\t});\n\t});\n}", "CodeBleu_score": 46.9085722895431}, {"code": "async function downloadFile(url, dest){\n\t\tconst file = fs.createWriteStream(dest);\n\tconst request = https.get(url, (response) => {\n\t\tresponse.pipe(file);\n\t});\n\n\treturn new Promise((resolve, reject) => {\n\t\trequest.on('error', (error) => {\n\t\t\tfs.unlink(dest, () => {});\n\t\t\treject(error.message);\n\t\t});\n\n\t\tfile.on('finish', () => {\n\t\t\tfile.close(resolve);\n\t\t});\n\n\t\tfile.on('error', (error) => {\n\t\t\tfs.unlink(dest, () => {});\n\t\t\treject(error.message);\n\t\t});\n\t});\n}", "CodeBleu_score": 46.86796133036364}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t\treturn getDependentModulesFromDsl(module.dsl)\n\t\t\t.map(dependentModule -> {\n\t\t\t\tif (circularDependencyCheckSet.contains(dependentModule.id)) {\n\t\t\t\t\tlog.warn(\"Circular dependency detected! Skipping module {} in application {}\", dependentModule.id, module.id);\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tcircularDependencyCheckSet.add(dependentModule.id);\n\t\t\t\treturn dependentModule;\n\t\t\t})\n\t\t\t.filter(Objects::nonNull)\n\t\t\t.flatMap(dependentModule -> applicationRepository.findById(dependentModule.id)\n\t\t\t\t\t.switchIfEmpty(Mono.fromSupplier(() -> {\n\t\t\t\t\t\tlog.warn(\"Module {} in application {} not found. Skipping\", dependentModule.id, module.id);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}))\n\t\t\t\t\t.map(dependentModule::merge)\n\t\t\t\t\t.switchIfEmpty(Mono.just(dependentModule))\n\t\t\t\t\t.flatMap(dependentModuleMerged -> getDependentModules(dependentModuleMerged, circularDependencyCheckSet))\n\t\t\t\t\t.defaultIfEmpty(dependentModule)\n\t\t\t\t\t.onErrorResume(e -> {\n\t\t\t\t\t\tlog.warn(\"Error while getting dependent modules for module {} in application {}: {}\", module.id, dependentModule.id, e);\n\t\t\t\t\t\treturn Mono.just(dependentModule);\n\t\t\t\t\t})\n\t\t\t);\n }", "CodeBleu_score": 38.78087648454436}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t\tSet<String> dependentModuleIds = getDependentModulesFromDsl(module.dsl);\n\t\n\tList<Mono<Application>> dependentModules = dependentModuleIds.stream()\n\t\t.filter(dependentModuleId -> !circularDependencyCheckSet.contains(dependentModuleId))\n\t\t.map(dependentModuleId -> applicationRepository.findById(dependentModuleId))\n\t\t.collect(Collectors.toList());\n\t\n\t// Add the newly retrieved modules to the circular dependency check set\n\tcircularDependencyCheckSet.addAll(dependentModuleIds);\n\t\n\treturn Flux.merge(dependentModules);\n}", "CodeBleu_score": 39.18026920562128}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t return Flux.fromIterable(getDependentModulesFromDsl(module.dsl))\n .filter(id -> !circularDependencyCheckSet.contains(id))\n .doOnNext(id -> circularDependencyCheckSet.add(id))\n .flatMap(id -> applicationRepository.findById(id)\n .switchIfEmpty(Mono.error(new BizException(BizError.APPLICATION_NOT_FOUND, id)))\n .doOnNext(dependentModule -> {\n if (dependentModule.status != ApplicationStatus.PUBLISHED) {\n log.warn(\"Dependent module {} is not published, ignoring it\", id);\n }\n })\n .map(dependentModule -> {\n dependentModule.dependencies.add(module);\n return dependentModule;\n })\n );\n }", "CodeBleu_score": 43.99324816653894}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t\tif (map == null) {\n\t\treturn;\n\t}\n\tfor (Object entry : map.entrySet()) {\n\t\tMap.Entry<?, ?> entryObject = (Map.Entry<?, ?>) entry;\n\t\tObject value = entryObject.getValue();\n\t\tif (value instanceof Map) {\n\t\t\tdoGetDependentModules((Map<?, ?>) value, dependentModuleIds);\n\t\t} else if (value instanceof List) {\n\t\t\tdoGetDependentModules((List<?>) value, dependentModuleIds);\n\t\t} else {\n\t\t\tString componentType = (String) entryObject.getKey();\n\t\t\tif (\"module\".equals(componentType)) {\n\t\t\t\tString appId = (String) entryObject.getValue();\n\t\t\t\tif (StringUtils.isNotBlank(appId)) {\n\t\t\t\t\tdependentModuleIds.add(appId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 37.873463603193784}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t\tif (map == null) {\n\t\treturn;\n\t}\n\tfor (Object key : map.keySet()) {\n\t\tObject value = map.get(key);\n\t\tif (value == null) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (value instanceof Map) {\n\t\t\tdoGetDependentModules((Map<?, ?>) value, dependentModuleIds);\n\t\t}\n\t\tif (value instanceof List) {\n\t\t\tdoGetDependentModules((List<?>) value, dependentModuleIds);\n\t\t}\n\t\tif (value instanceof String) {\n\t\t\tString stringValue = (String) value;\n\t\t\tif (StringUtils.equals(stringValue, \"module\")) {\n\t\t\t\tString appId = (String) key;\n\t\t\t\tif (StringUtils.isNotBlank(appId)) {\n\t\t\t\t\tdependentModuleIds.add(appId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 36.76277440495591}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t\tif (map == null) {\n\t\treturn;\n\t}\n\n\tfor (Object entry : map.entrySet()) {\n\t\tMap.Entry<String, Object> entryObject = (Map.Entry<String, Object>) entry;\n\t\tObject value = entryObject.getValue();\n\n\t\tif (value instanceof Map) {\n\t\t\tMap<String, Object> valueMap = (Map<String, Object>) value;\n\t\t\tString componentType = (String) valueMap.get(\"componentType\");\n\t\t\tif (\"module\".equals(componentType)) {\n\t\t\t\tString appId = (String) valueMap.get(\"appId\");\n\t\t\t\tif (StringUtils.isNotBlank(appId)) {\n\t\t\t\t\tdependentModuleIds.add(appId);\n\t\t\t\t}\n\t\t\t}\n\t\t\tdoGetDependentModules(valueMap, dependentModuleIds);\n\t\t} else if (value instanceof List) {\n\t\t\tList<Object> valueList = (List<Object>) value;\n\t\t\tfor (Object valueListItem : valueList) {\n\t\t\t\tif (valueListItem instanceof Map) {\n\t\t\t\t\tdoGetDependentModules((Map<String, Object>) valueListItem, dependentModuleIds);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 43.722775705865644}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t\tbyte[] data = new byte[dataBuffer.readableByteCount()];\n\tdataBuffer.read(data);\n\tdataBuffer.release();\n\n\tif (createThumbnail) {\n\t\tBufferedImage image = ImageIO.read(new ByteArrayInputStream(data));\n\t\tBufferedImage thumbnail = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_RGB);\n\t\tGraphics2D g = thumbnail.createGraphics();\n\t\tg.drawImage(image, 0, 0, image.getWidth(), image.getHeight(), null);\n\t\tg.dispose();\n\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tImageIO.write(thumbnail, \"JPEG\", baos);\n\t\tbaos.flush();\n\t\tdata = baos.toByteArray();\n\t\tbaos.close();\n\t}\n\n\treturn new Asset(data, srcContentType.toString());\n}", "CodeBleu_score": 40.887012757818376}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t\t// Read the image data\n\tbyte[] imageData = new byte[dataBuffer.readableByteCount()];\n\tdataBuffer.read(imageData);\n\tdataBuffer.release();\n\n\t// Convert the image data to a BufferedImage\n\tBufferedImage image = ImageIO.read(new ByteArrayInputStream(imageData));\n\n\t// If we are creating a thumbnail, resize the image\n\tif (createThumbnail) {\n\t\timage = resizeImage(image);\n\t}\n\n\t// Convert the image to JPEG\n\tByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n\tImageIO.write(image, \"jpg\", outputStream);\n\tbyte[] jpegData = outputStream.toByteArray();\n\n\t// Get the content type\n\tMediaType contentType = MediaType.IMAGE_JPEG;\n\tif (!createThumbnail) {\n\t\tcontentType = srcContentType;\n\t}\n\n\t// Return the asset\n\treturn new Asset(contentType, jpegData);\n}", "CodeBleu_score": 54.370605433268}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t\tbyte[] data = DataBufferUtils.take(dataBuffer, dataBuffer.readableByteCount()).asByteArray();\n\tDataBufferUtils.release(dataBuffer);\n\tif (createThumbnail) {\n\t\tImage image = ImageIO.read(new ByteArrayInputStream(data));\n\t\tBufferedImage bufferedImage = new BufferedImage(image.getWidth(null), image.getHeight(null), BufferedImage.TYPE_INT_RGB);\n\t\tbufferedImage.getGraphics().drawImage(image, 0, 0, null);\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tImageIO.write(bufferedImage, \"jpg\", baos);\n\t\tdata = baos.toByteArray();\n\t}\n\treturn new Asset(data, createThumbnail ? \"image/jpeg\" : srcContentType.toString());\n}", "CodeBleu_score": 39.94377263022977}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn Mono.just(exchange)\n\t\t.map(ServerWebExchange::getResponse)\n\t\t.doOnNext(response -> response.setStatusCode(HttpStatus.OK))\n\t\t.map(ServerHttpResponse::getHeaders)\n\t\t.doOnNext(headers -> headers.setContentType(MediaType.IMAGE_PNG))\n\t\t.map(ServerHttpResponse::getBody)\n\t\t.cast(DataBuffer.class)\n\t\t.flatMap(DataBufferUtils::read)\n\t\t.map(data -> {\n\t\t\tbyte[] dataBytes = data.asByteBuffer().array();\n\t\t\treturn new Asset(assetId, dataBytes);\n\t\t})\n\t\t.map(asset -> {\n\t\t\ttry {\n\t\t\t\tByteArrayOutputStream out = new ByteArrayOutputStream();\n\t\t\t\tImageIO.write(ImageIO.read(new ByteArrayInputStream(asset.data)), \"png\", out);\n\t\t\t\tout.flush();\n\t\t\t\treturn out.toByteArray();\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new BizException(BizError.IMAGE_GENERATION_ERROR, e);\n\t\t\t}\n\t\t})\n\t\t.map(data -> {\n\t\t\tDefaultDataBufferFactory factory = new DefaultDataBufferFactory();\n\t\t\tDataBuffer buffer = factory.wrap(data);\n\t\t\treturn buffer;\n\t\t})\n\t\t.doOnNext(buffer -> DataBufferUtils.write(buffer, exchange.getResponse().getBody()))\n\t\t.then();\n}", "CodeBleu_score": 37.88389268582123}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn Mono.just(exchange.getResponse())\n\t\t.map(response -> response.writeWith(writeAsset(assetId, response)))\n\t\t.then();\n}", "CodeBleu_score": 12.474422198691904}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn exchange.getMultipartData()\n\t\t.switchIfEmpty(Mono.error(new BizException(BizError.INVALID_ASSET_ID)))\n\t\t.flatMap(map -> Mono.justOrEmpty(map.getFirst(\"assetId\")))\n\t\t.switchIfEmpty(Mono.error(new BizException(BizError.INVALID_ASSET_ID)))\n\t\t.flatMap(Part::content)\n\t\t.switchIfEmpty(Mono.error(new BizException(BizError.INVALID_ASSET_ID)))\n\t\t.flatMap(dataBuffer -> {\n\t\t\ttry {\n\t\t\t\tAsset asset = assetService.getAsset(assetId);\n\t\t\t\tif (asset == null) {\n\t\t\t\t\tthrow new BizException(BizError.INVALID_ASSET_ID);\n\t\t\t\t}\n\t\t\t\tif (asset.data == null) {\n\t\t\t\t\tthrow new BizException(BizError.INVALID_ASSET_DATA);\n\t\t\t\t}\n\n\t\t\t\tString contentType = asset.contentType;\n\t\t\t\tif (contentType == null) {\n\t\t\t\t\tcontentType = MediaType.APPLICATION_OCTET_STREAM_VALUE;\n\t\t\t\t}\n\n\t\t\t\texchange.getResponse().setStatusCode(HttpStatus.OK);\n\t\t\t\texchange.getResponse().getHeaders().set(HttpHeaders.CONTENT_TYPE, contentType);\n\n\t\t\t\treturn DataBufferUtils.write(dataBuffer, exchange.getResponse().bufferFactory())\n\t\t\t\t\t.doOnSuccess(v -> log.debug(\"Wrote asset data to response\"))\n\t\t\t\t\t.then();\n\t\t\t} catch (BizException e) {\n\t\t\t\treturn Mono.error(e);\n\t\t\t}\n\t\t});\n}", "CodeBleu_score": 39.010160628045895}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\tif (workspaceMode == WorkspaceMode.SAAS) {\n\t\treturn Flux.empty();\n\t}\n\n\treturn organizationService.findAll()\n\t\t.map(toFindAuthConfig())\n\t\t.onErrorResume(ofError(LOG_IN_SOURCE_NOT_SUPPORTED), e -> {\n\t\t\tlog.error(\"Failed to get organizations: {}\", e.getMessage());\n\t\t\treturn Flux.empty();\n\t\t});\n}", "CodeBleu_score": 26.683556961940084}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\tif (workspaceMode == WorkspaceMode.SAAS) {\n\t\treturn Flux.empty();\n\t}\n\t\n\treturn organizationService.findAllOrganizations()\n\t\t.filter(organization -> organization.getAuthConfig() != null)\n\t\t.map(organization -> {\n\t\t\tAuthConfig authConfig = organization.getAuthConfig();\n\t\t\treturn FindAuthConfig.builder()\n\t\t\t\t.id(authConfig.getId())\n\t\t\t\t.name(authConfig.getName())\n\t\t\t\t.type(authConfig.getType())\n\t\t\t\t.build();\n\t\t});\n}", "CodeBleu_score": 32.48137705665706}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\tif (workspaceMode == WorkspaceMode.SAAS) {\n\t\treturn Flux.empty();\n\t}\n\n\treturn organizationService.findAllOrganizations()\n\t\t\t.filter(organization -> organization.getAuthConfig() != null)\n\t\t\t.map(organization -> new FindAuthConfig(organization.getName(), organization.getAuthConfig()));\n}", "CodeBleu_score": 29.872984017984177}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\t// Configure the MongoDB driver\n\tMongoDatabaseFactory mongoDbFactory = mongoTemplate.getMongoDbFactory();\n\tMongoClient mongoClient = mongoDbFactory.getMongoDatabase().getMongoClient();\n\tMongoClientSettings settings = MongoClientSettings.builder()\n\t\t\t.readPreference(ReadPreference.secondaryPreferred())\n\t\t\t.writeConcern(WriteConcern.MAJORITY)\n\t\t\t.readConcern(ReadConcern.MAJORITY)\n\t\t\t.applyToClusterSettings(builder -> builder.hosts(Arrays.asList(mongoClient.getClusterSettings().getHosts())))\n\t\t\t.build();\n\tMongoClient mongoClientWithWriteConcern = MongoClients.create(settings);\n\tMongoDatabaseFactory mongoDbFactoryWithWriteConcern = new SimpleReactiveMongoDatabaseFactory(mongoClientWithWriteConcern, mongoDbFactory.getDatabaseName());\n\t\n\t// Configure the SpringData Mongo driver\n\tReactiveMongoDatabaseFactory reactiveMongoDbFactory = new SimpleReactiveMongoDatabaseFactory(mongoClient, mongoDbFactory.getDatabaseName());\n\t\n\t// Configure Mongock\n\tSpringDataMongoV3Driver springDataMongoV3Driver = new SpringDataMongoV3Driver(reactiveMongoDbFactory, mongoTemplate.getConverter(), \"changelogs\");\n\t\n\t// Configure the package to scan for change logs\n\tString changeLogsPackage = \"com.openblocks.db.changelogs\";\n\t\n\t// Configure the application context\n\tMap<Class<?>, Object> beans = springContext.getBeansWithAnnotation(Bean.class);\n\tMap<String, Object> beansByName = springContext.getBeansWithAnnotation(Bean.class);\n\tMap<String, Object> beansById = springContext.getBeansWithAnnotation(Bean.class);\n\tMap<String, Object> beansByType = springContext.getBeansWithAnnotation(Bean.class);\n\tMap<String, Object> beansByGroup = springContext.getBeansWithAnnotation(Bean.class);\n\tMap<String, Object> beansByPrimary = springContext.getBeansWithAnnotation(Bean.class);\n\tMap<String, Object> beansByRole = springContext.getBeansWithAnnotation(Bean.class);\n\tMap<String, Object> beansByScope = springContext.getBeansWithAnnotation(Bean.class);\n\tMap<String, Object> beansByType = springContext.getBeansWithAnnotation(Bean.", "CodeBleu_score": 35.870217880670566}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\t// Create a Mongock driver with the MongoDB driver and the package to scan for change logs\n\tSpringDataMongoV3Driver driver = SpringDataMongoV3Driver.withDefaultLock(mongoTemplate, \"com.openblocks.mongo.changesets\");\n\t\n\t// Configure the driver with specific write and read concerns\n\tdriver.withWriteConcern(WriteConcern.MAJORITY)\n\t\t.withReadConcern(ReadConcern.MAJORITY)\n\t\t.withReadPreference(ReadPreference.primaryPreferred());\n\t\n\t// Create the MongockApplicationRunner\n\treturn MongockSpring5.builder()\n\t\t.setDriver(driver)\n\t\t.addChangeLogsScanPackage(\"com.openblocks.mongo.changesets\")\n\t\t.setSpringContext(springContext)\n\t\t.buildApplicationRunner();\n}", "CodeBleu_score": 47.44709408081878}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\t// Set up the MongoDB driver\n\tMongoClientSettings mongoClientSettings = MongoClientSettings.builder()\n\t\t\t.writeConcern(WriteConcern.MAJORITY)\n\t\t\t.readConcern(ReadConcern.MAJORITY)\n\t\t\t.readPreference(ReadPreference.primary())\n\t\t\t.build();\n\tMongoClient mongoClient = MongoClients.create(mongoClientSettings);\n\t\n\t// Set up the SpringData MongoDB driver\n\tMappingMongoConverter mappingMongoConverter = new MappingMongoConverter(NoOpDbRefResolver.INSTANCE, mongoTemplate.getConverter().getMappingContext());\n\tmappingMongoConverter.setCodecRegistry(mongoTemplate.getConverter().getCodecRegistry());\n\tmappingMongoConverter.afterPropertiesSet();\n\tReactiveMongoDatabaseFactory reactiveMongoDatabaseFactory = new SimpleReactiveMongoDatabaseFactory(mongoClient, mongoTemplate.getDb().getName(), mappingMongoConverter);\n\t\n\t// Set up the MongockApplicationRunner\n\treturn MongockSpring5.builder()\n\t\t\t.setDriver(new SpringDataMongoV3Driver(reactiveMongoDatabaseFactory, mongoTemplate.getDb().getName()))\n\t\t\t.setSpringContext(springContext)\n\t\t\t.setLockRepository(new MongoLockRepository(reactiveMongoDatabaseFactory, mongoTemplate.getDb().getName()))\n\t\t\t.addChangeLogsScanPackage(\"com.openblocks.module.changelog\")\n\t\t\t.buildApplicationRunner();\n}", "CodeBleu_score": 42.63910921394637}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\treturn new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter)\n                .withReadPreference(ReadPreference.secondaryPreferred())\n                .withReadConcern(ReadConcern.MAJORITY)\n                .withWriteConcern(WriteConcern.MAJORITY);\n}", "CodeBleu_score": 41.385488506605896}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\tlog.info(\"Creating reactiveMongoSlaveTemplate\");\n\treturn new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter).withReadPreference(ReadPreference.secondaryPreferred());\n}", "CodeBleu_score": 41.6977610083788}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\tlog.info(\"Creating reactive mongo template\");\n\treturn new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n}", "CodeBleu_score": 31.598369240093337}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t\treturn libraryQueryRepository.findById(libraryQueryId)\n\t\t.flatMap(libraryQueryRecord -> {\n\t\t\tif (libraryQueryRecord == null) {\n\t\t\t\treturn deferredError(new BizError(LIBRARY_QUERY_NOT_FOUND, \"Library query not found\"));\n\t\t\t}\n\t\t\treturn Mono.just(libraryQueryRecord.getDsl());\n\t\t})\n\t\t.switchIfEmpty(libraryQueryService.getLiveDSLByLibraryQueryId(libraryQueryId));\n}", "CodeBleu_score": 39.30115580306073}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t\treturn libraryQueryRepository.findLatestByLibraryQueryId(libraryQueryId)\n\t\t.switchIfEmpty(libraryQueryRepository.findByLibraryQueryId(libraryQueryId)\n\t\t\t.switchIfEmpty(deferredError(LIBRARY_QUERY_NOT_FOUND, \"Library query with ID \" + libraryQueryId + \" not found\")))\n\t\t.map(LibraryQueryRecord::getDsl);\n}", "CodeBleu_score": 47.83990303530493}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t\treturn libraryQueryRepository.findLatestByLibraryQueryId(libraryQueryId)\n\t\t.switchIfEmpty(libraryQueryRepository.findById(libraryQueryId)\n\t\t\t.switchIfEmpty(deferredError(LIBRARY_QUERY_NOT_FOUND, \"Library query not found\", libraryQueryId))\n\t\t\t.map(libraryQuery -> new LibraryQueryRecord(libraryQuery, null))\n\t\t)\n\t\t.map(LibraryQueryRecord::getDsl)\n\t\t.switchIfEmpty(deferredError(LIBRARY_QUERY_NOT_FOUND, \"Library query not found\", libraryQueryId));\n}", "CodeBleu_score": 51.66795429180668}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t\nDatasourcePluginClient datasourcePluginClient = datasourceMetaInfoService.getDatasourcePluginClient(datasource);\n\nDatasourceConnectionHolder connectionHolder = datasourceConnectionPool.getConnectionHolder(datasource);\n\nif (connectionHolder == null) {\nreturn Mono.error(new BizException(QUERY_EXECUTION_ERROR, \"Datasource connection is not available\"));\n}\n\nlong timeout = QueryTimeoutUtils.getTimeout(timeoutStr);\n\nQueryExecutionContext queryExecutionContext = new QueryExecutionContext(connectionHolder, queryConfig, requestParams, timeout, queryVisitorContext);\n\nMono<QueryExecutionResult> queryExecutionResultMono = null;\n\nswitch (datasource.type) {\ncase \"mysql\":\nqueryExecutionResultMono = datasourcePluginClient.executeMysqlQuery(queryExecutionContext);\nbreak;\ncase \"postgres\":\nqueryExecutionResultMono = datasourcePluginClient.executePostgresQuery(queryExecutionContext);\nbreak;\ncase \"sqlite\":\nqueryExecutionResultMono = datasourcePluginClient.executeSqliteQuery(queryExecutionContext);\nbreak;\ncase \"mssql\":\nqueryExecutionResultMono = datasourcePluginClient.executeMssqlQuery(queryExecutionContext);\nbreak;\ncase \"mongo\":\nqueryExecutionResultMono = datasourcePluginClient.executeMongoQuery(queryExecutionContext);\nbreak;\ncase \"http\":\nqueryExecutionResultMono = datasourcePluginClient.executeHttpQuery(queryExecutionContext);\nbreak;\ncase \"csv\":\nqueryExecutionResultMono = datasourcePluginClient.executeCsvQuery(queryExecutionContext);\nbreak;\ndefault:\nreturn Mono.error(new BizException(QUERY_EXECUTION_ERROR, \"Unsupported datasource type: \" + datasource.type));\n}\n\nreturn queryExecutionResultMono.timeout(Duration.ofMillis(timeout), Mono.error(new TimeoutException(\"Query execution timed out\")))\n.onErrorResume(TimeoutException.class, e -> Mono.error(new PluginException(QUERY_EXECUTION_TIMEOUT, \"Query execution timed out\")))\n.onErrorResume(PluginException.class, ofException(QUERY_EXECUTION_ERROR, \"Query execution error\"))\n.onErrorResume(e -> {\nlog.error(\"Query execution failed\", e);\nreturn Mono.error(new BizException(QUERY_EXECUTION_ERROR, \"Query execution failed\"));\n});\n}", "CodeBleu_score": 33.226031601101724}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t // TODO: Make this function async\n DatasourcePluginClient datasourcePluginClient = datasourceMetaInfoService.getDatasourcePluginClient(datasource);\n DatasourceConnectionHolder connectionHolder = datasourceConnectionPool.getConnectionHolder(datasource);\n QueryExecutionContext queryExecutionContext = new QueryExecutionContext(datasourcePluginClient, connectionHolder, queryConfig, requestParams, timeoutStr, queryVisitorContext);\n long timeoutDuration = QueryTimeoutUtils.getTimeoutDuration(timeoutStr);\n Duration duration = Duration.ofMillis(timeoutDuration);\n Mono<QueryExecutionResult> result = datasourcePluginClient.executeQuery(queryExecutionContext)\n .timeout(duration)\n .onErrorMap(ofException(TimeoutException.class, QUERY_EXECUTION_TIMEOUT))\n .onErrorResume(ofException(PluginException.class, QUERY_EXECUTION_ERROR))\n .onErrorResume(ofException(BizException.class, QUERY_EXECUTION_ERROR))\n .onErrorResume(ofException(Exception.class, QUERY_EXECUTION_ERROR));\n return result;\n }", "CodeBleu_score": 35.53762602448242}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t\nQueryTimeoutUtils.QueryTimeout queryTimeout = QueryTimeoutUtils.parseTimeout(timeoutStr);\n", "CodeBleu_score": 13.86868537960436}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\tDatasourcePluginClient datasourcePluginClient = datasourceMetaInfoService.getDatasourcePluginClient(datasource.getPluginId());\n\tDatasourceConnectionHolder connectionHolder = datasourceConnectionPool.getConnection(datasource.getId());\n\tQueryExecutionContext queryExecutionContext = new QueryExecutionContext(datasourcePluginClient, connectionHolder, queryConfig, requestParams, queryVisitorContext);\n\t\n\ttry {\n\t\treturn datasourcePluginClient.execute(queryExecutionContext)\n\t\t\t\t.timeout(Duration.ofMillis(QueryTimeoutUtils.getTimeout(queryConfig)))\n\t\t\t\t.doOnTerminate(connectionHolder::release);\n\t} catch (TimeoutException e) {\n\t\tlog.error(\"Query execution timeout\", e);\n\t\treturn Mono.error(ofException(QUERY_EXECUTION_TIMEOUT));\n\t} catch (Exception e) {\n\t\tlog.error(\"Error executing query\", e);\n\t\treturn Mono.error(ofException(QUERY_EXECUTION_ERROR));\n\t}\n}", "CodeBleu_score": 47.262243307938526}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\tDatasourcePluginClient datasourcePluginClient = datasourceMetaInfoService.getDatasourcePluginClient(datasource.type);\n\t\n\t// Build the query execution context\n\tQueryExecutionContext queryExecutionContext = new QueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n\t\n\t// Acquire a connection from the connection pool\n\tDatasourceConnectionHolder connectionHolder = datasourceConnectionPool.acquireConnection(datasource);\n\t\n\t// Execute the query using the connection\n\treturn datasourcePluginClient.executeQuery(connectionHolder, queryExecutionContext)\n\t\t\t.timeout(Duration.ofMillis(QueryTimeoutUtils.getQueryTimeoutMillis(queryExecutionContext)))\n\t\t\t.doOnSuccess(result -> datasourceConnectionPool.releaseConnection(connectionHolder))\n\t\t\t.onErrorMap(ofException(TimeoutException.class, QUERY_EXECUTION_TIMEOUT, QUERY_EXECUTION_ERROR))\n\t\t\t.onErrorMap(ofException(Exception.class, QUERY_EXECUTION_ERROR))\n\t\t\t.onErrorMap(ofException(PluginException.class, QUERY_EXECUTION_ERROR))\n\t\t\t.onErrorMap(ofException(BizException.class, QUERY_EXECUTION_ERROR));\n}", "CodeBleu_score": 37.91338381233034}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\tDatasourcePluginClient datasourcePluginClient = datasourceMetaInfoService.getDatasourcePluginClient(datasource.type);\n\t\n\tDatasourceConnectionHolder connectionHolder = datasourceConnectionPool.acquire(datasource);\n\tQueryExecutionContext queryExecutionContext = datasourcePluginClient.buildQueryExecutionContext(datasource, connectionHolder, queryConfig, requestParams, queryVisitorContext);\n\t\n\ttry {\n\t\treturn datasourcePluginClient.execute(queryExecutionContext).timeout(Duration.ofMillis(QueryTimeoutUtils.getTimeoutMillis(queryExecutionContext))).onErrorMap(ofException(QueryExecutionTimeoutError.class, QUERY_EXECUTION_TIMEOUT, QUERY_EXECUTION_ERROR), e -> new BizException(QUERY_EXECUTION_TIMEOUT, e));\n\t} catch (TimeoutException e) {\n\t\treturn Mono.error(new BizException(QUERY_EXECUTION_TIMEOUT, e));\n\t} catch (Exception e) {\n\t\treturn Mono.error(new PluginException(QUERY_EXECUTION_ERROR, e));\n\t} finally {\n\t\tdatasourceConnectionPool.release(datasource, connectionHolder);\n\t}\n}", "CodeBleu_score": 36.6680480272499}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t\tif (StringUtils.isBlank(timeoutStr)) {\n\t\treturn DEFAULT_QUERY_TIMEOUT_MS;\n\t}\n\t\n\tPair<String, String> timeout = splitTimeout(timeoutStr);\n\t\n\tif (timeout == null) {\n\t\tthrow new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout: \" + timeoutStr);\n\t}\n\t\n\tString valueStr = timeout.getLeft();\n\tString unitStr = timeout.getRight();\n\t\n\tif (!NumberUtils.isCreatable(valueStr)) {\n\t\tthrow new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout value: \" + valueStr);\n\t}\n\t\n\tint value = Integer.parseInt(valueStr);\n\t\n\tif (value <= 0) {\n\t\tthrow new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout value: \" + valueStr);\n\t}\n\t\n\tif (unitStr.equals(\"s\")) {\n\t\treturn value * 1000;\n\t}\n\t\n\tif (unitStr.equals(\"m\")) {\n\t\treturn value * 60 * 1000;\n\t}\n\t\n\tif (unitStr.equals(\"h\")) {\n\t\treturn value * 60 * 60 * 1000;\n\t}\n\t\n\tif (unitStr.equals(\"d\")) {\n\t\treturn value * 24 * 60 * 60 * 1000;\n\t}\n\t\n\tthrow new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout unit: \" + unitStr);\n}", "CodeBleu_score": 39.16585353431836}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t\tif (StringUtils.isBlank(timeoutStr)) {\n\t\treturn DEFAULT_QUERY_TIMEOUT_MS;\n\t}\n\t\n\tPair<String, String> valueUnitPair = StringUtils.splitByWholeSeparator(timeoutStr, \" \");\n\tif (valueUnitPair.getLeft() == null || valueUnitPair.getRight() == null) {\n\t\tthrow new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout string: \" + timeoutStr);\n\t}\n\t\n\tint value = NumberUtils.toInt(valueUnitPair.getLeft(), -1);\n\tif (value == -1) {\n\t\tthrow new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout value: \" + valueUnitPair.getLeft());\n\t}\n\t\n\tString unit = valueUnitPair.getRight().toLowerCase();\n\tif (unit.equals(\"ms\")) {\n\t\treturn value;\n\t} else if (unit.equals(\"s\")) {\n\t\treturn value * 1000;\n\t} else if (unit.equals(\"m\")) {\n\t\treturn value * 1000 * 60;\n\t} else if (unit.equals(\"h\")) {\n\t\treturn value * 1000 * 60 * 60;\n\t} else {\n\t\tthrow new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout unit: \" + valueUnitPair.getRight());\n\t}\n}", "CodeBleu_score": 40.809820395905824}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t\tif (StringUtils.isBlank(timeoutStr)) {\n\t\treturn DEFAULT_QUERY_TIMEOUT_MS;\n\t}\n\n\tPair<Integer, String> parsedTimeout = parseTimeoutString(timeoutStr);\n\n\tint timeoutMs = parsedTimeout.getLeft() * UNIT_TO_MS_MAP.get(parsedTimeout.getRight());\n\n\tif (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n\t\tthrow new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"Query timeout cannot exceed \" + MAX_QUERY_TIMEOUT_MS + \" ms\");\n\t}\n\n\treturn timeoutMs;\n}", "CodeBleu_score": 27.31552779491671}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t\treturn applicationService.getLiveQueries(application.id, visitorId)\n\t\t\t.switchIfEmpty(deferredError(ofError(TEMPLATE_NOT_CORRECT, \"No live queries found in the template\")))\n\t\t\t.map(ApplicationQuery::getLiveQueries)\n\t\t\t.map(queries -> queries.stream()\n\t\t\t\t\t.map(query -> query.getDatasourceId())\n\t\t\t\t\t.collect(Collectors.toList()))\n\t\t\t.flatMap(datasourceIds -> Flux.fromIterable(datasourceIds)\n\t\t\t\t\t.flatMap(datasourceId -> datasourceService.copyDatasource(datasourceId, currentOrganizationId, DatasourceCreationSource.TEMPLATE))\n\t\t\t\t\t.collectList())\n\t\t\t.map(datasources -> datasources.stream()\n\t\t\t\t\t.map(datasource -> Pair.of(datasource.originalId, datasource.id))\n\t\t\t\t\t.collect(Collectors.toList()));\n}", "CodeBleu_score": 33.633750168094124}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t\treturn Mono.fromSupplier(() -> application.getQueries())\n\t\t.filter(queries -> !isNull(queries))\n\t\t.switchIfEmpty(deferredError(ofError(TEMPLATE_NOT_CORRECT, \"The application does not have any queries\")))\n\t\t.flatMapMany(queries -> Flux.fromIterable(queries)\n\t\t\t.filter(query -> !isNull(query.getDatasourceId()))\n\t\t\t.map(query -> query.getDatasourceId())\n\t\t\t.collect(Collectors.toSet()))\n\t\t.collectList()\n\t\t.map(datasourceIds -> copyDatasourceFromTemplateToCurrentOrganization(currentOrganizationId, datasourceIds, visitorId));\n}", "CodeBleu_score": 33.855151629446105}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t\treturn Mono.just(application)\n\t\t.map(Application::getQueries)\n\t\t.filter(queries -> !isNull(queries) && !queries.isEmpty())\n\t\t.map(queries -> queries.stream()\n\t\t\t.map(ApplicationQuery::getDatasourceId)\n\t\t\t.collect(Collectors.toList()))\n\t\t.flatMap(datasourceIds -> datasourceIds.isEmpty() ? deferredError(TEMPLATE_NOT_CORRECT, \"No queries found in the application\") : Mono.just(datasourceIds))\n\t\t.map(datasourceIds -> datasourceIds.stream()\n\t\t\t.map(datasourceId -> Pair.of(datasourceId, RandomStringUtils.randomAlphanumeric(20)))\n\t\t\t.collect(Collectors.toList()))\n\t\t.flatMap(datasourceIdPairs -> datasourceIdPairs.isEmpty() ? deferredError(TEMPLATE_NOT_CORRECT, \"No queries found in the application\") : Mono.just(datasourceIdPairs))\n\t\t.flatMap(datasourceIdPairs -> Flux.fromIterable(datasourceIdPairs)\n\t\t\t.flatMap(datasourceIdPair -> datasourceService.copyDatasource(currentOrganizationId, datasourceIdPair.getLeft(), datasourceIdPair.getRight(), DatasourceCreationSource.TEMPLATE, visitorId)\n\t\t\t\t.onErrorResume(e -> ofError(TEMPLATE_NOT_EXIST, \"Datasource with ID \" + datasourceIdPair.getLeft() + \" does not exist in the template\")))\n\t\t\t.collectList());\n}", "CodeBleu_score": 33.84644009552649}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t\treturn datasourceService.getDatasourceById(datasourceId)\n\t\t.map(datasource -> {\n\t\t\tif (isNull(datasource)) {\n\t\t\t\treturn deferredError(ofError(DATASOURCE_NOT_EXIST, \"Datasource with ID \" + datasourceId + \" does not exist\"));\n\t\t\t}\n\n\t\t\tif (datasource.isSystemStatic()) {\n\t\t\t\treturn datasourceId;\n\t\t\t}\n\n\t\t\t// For legacy quick REST API or legacy Openblocks API datasources, return their respective new IDs\n\t\t\tif (datasource.getCreationSource() == DatasourceCreationSource.OPENBLOCKS_API) {\n\t\t\t\treturn datasource.getOpenblocksApiId();\n\t\t\t} else if (datasource.getCreationSource() == DatasourceCreationSource.QUICK_REST_API) {\n\t\t\t\treturn datasource.getQuickRestApiId();\n\t\t\t}\n\n\t\t\t// Otherwise, create a new datasource\n\t\t\treturn datasourceService.createDatasource(\n\t\t\t\tnew Datasource(\n\t\t\t\t\tnull,\n\t\t\t\t\torganizationId,\n\t\t\t\t\tvisitorId,\n\t\t\t\t\tdatasource.getName(),\n\t\t\t\t\tdatasource.getCreationSource(),\n\t\t\t\t\tdatasource.getCreationSourceId(),\n\t\t\t\t\tdatasource.getCreationSourceUrl(),\n\t\t\t\t\tdatasource.getCreationSourceUsername(),\n\t\t\t\t\tdatasource.getCreationSourcePassword(),\n\t\t\t\t\tdatasource.getCreationSourceToken(),\n\t\t\t\t\tdatasource.getCreationSourceRefreshToken(),\n\t\t\t\t\tdatasource.getCreationSourceClientSecret(),\n\t\t\t\t\tdatasource.getCreationSourceClientId(),\n\t\t\t\t\tdatasource.getCreationSourceClientName(),\n\t\t\t\t\tdatasource.getCreationSourceClientEmail(),\n\t\t\t\t\tdatasource.getCreationSourceClientDescription(),\n\t\t\t\t\tdatasource.getCreationSourceClientRedirectUri(),\n\t\t\t\t\tdatasource.getCreationSourceClientLogoUrl(),\n\t\t\t\t\tdatasource.getCreationSourceClientWebsiteUrl(),\n\t\t\t\t\tdatasource.getCreationSourceClientContactEmail(),\n\t\t\t\t\tdatasource.getCreationSourceClientContactName(),\n\t\t\t\t\tdatasource.getCreationSourceClientContactUrl(),\n\t\t\t\t\tdatasource.getCreationSourceClientPrivacyPolicyUrl(),\n\t\t\t\t\tdatasource.getCreationSourceClientTermsOfServiceUrl(),\n\t\t\t\t\tdatasource.getCreationSourceClientAccessToken(),\n\t\t\t\t\tdatasource.getCreationSourceClientRefreshToken(),\n\t\t\t\t\tdatasource.getCreationSourceClientExpirationDate(),\n\t\t\t\t\tdatasource.getCreationSourceClientScope(),\n\t\t\t\t\tdatasource.getCreationSourceClientGrantType(),\n\t\t\t\t\tdatasource.getCreationSourceClientResponseType(),\n\t\t\t\t\tdatasource.getCreationSourceClientState(),\n\t\t\t\t\tdatasource.getCreationSourceClientCodeChallenge(),\n\t\t\t\t\tdatasource.", "CodeBleu_score": 42.33384658616437}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t\treturn datasourceService.getDatasourceById(datasourceId)\n\t\t.switchIfEmpty(deferredError(ofError(DATASOURCE_NOT_EXIST, \"Datasource with ID \" + datasourceId + \" does not exist\")))\n\t\t.map(datasource -> {\n\t\t\tif (datasource.isSystemStatic()) {\n\t\t\t\treturn datasourceId;\n\t\t\t} else if (datasource.getCreationSource() == DatasourceCreationSource.OPENBLOCKS_API) {\n\t\t\t\treturn datasource.getNewId();\n\t\t\t} else if (datasource.getCreationSource() == DatasourceCreationSource.QUICK_REST_API) {\n\t\t\t\treturn datasource.getNewId();\n\t\t\t} else {\n\t\t\t\treturn datasourceService.createDatasource(\n\t\t\t\t\torganizationId,\n\t\t\t\t\tvisitorId,\n\t\t\t\t\tdatasource.getCreationSource(),\n\t\t\t\t\tdatasource.getJsonData()\n\t\t\t\t).map(Datasource::getNewId);\n\t\t\t}\n\t\t});\n}", "CodeBleu_score": 45.202484239207344}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t\treturn datasourceService.getDatasourceById(datasourceId)\n\t\t.switchIfEmpty(deferredError(ofError(NOT_FOUND, \"Datasource not found\")))\n\t\t.map(datasource -> {\n\t\t\tif (datasource.isSystemStatic()) {\n\t\t\t\treturn datasourceId;\n\t\t\t}\n\t\t\t\n\t\t\tif (datasource.getCreationSource() == DatasourceCreationSource.OPENBLOCKS_API) {\n\t\t\t\treturn datasource.getId();\n\t\t\t}\n\t\t\t\n\t\t\tif (datasource.getCreationSource() == DatasourceCreationSource.QUICK_REST_API) {\n\t\t\t\treturn datasource.getId();\n\t\t\t}\n\t\t\t\n\t\t\treturn datasourceService.createDatasource(new Datasource(\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\torganizationId,\n\t\t\t\tvisitorId,\n\t\t\t\tdatasource.getName(),\n\t\t\t\tdatasource.getCreationSource(),\n\t\t\t\tdatasource.getCreationSourceId(),\n\t\t\t\tdatasource.getCreationSourceUrl(),\n\t\t\t\tdatasource.getCreationSourceUsername(),\n\t\t\t\tdatasource.getCreationSourcePassword(),\n\t\t\t\tdatasource.getCreationSourceQuery()\n\t\t\t)).map(newDatasource -> newDatasource.getId());\n\t\t});\n}", "CodeBleu_score": 48.97115220744923}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t\treturn Mono.fromCallable(() -> {\n\t\tif (filePart == null) {\n\t\t\treturn false;\n\t\t}\n\n\t\tString fileName = filePart.filename();\n\t\tif (StringUtils.isEmpty(fileName)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tString fileExtension = FilenameUtils.getExtension(fileName);\n\t\tif (!Arrays.asList(CommonConfig.ALLOWED_IMAGE_EXTENSIONS).contains(fileExtension)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Upload the file\n\t\tString key = String.format(\"user/%s/profile_photo.%s\", user.getId(), fileExtension);\n\t\ttry {\n\t\t\ts3Client.putObject(bucketName, key, filePart.content());\n\t\t} catch (SdkClientException e) {\n\t\t\tlog.error(\"Failed to upload file to S3\", e);\n\t\t\treturn false;\n\t\t}\n\n\t\t// If the user has a previous profile photo, remove it\n\t\tif (user.getProfilePhoto() != null) {\n\t\t\ts3Client.deleteObject(bucketName, user.getProfilePhoto());\n\t\t}\n\n\t\t// Update the user's profile with the new profile photo\n\t\tuser.setProfilePhoto(key);\n\t\tuserRepository.save(user);\n\t\treturn true;\n\t});\n}", "CodeBleu_score": 33.81314216243943}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t\t// If the user has a previous avatar, remove it\n\tif (user.getAvatar() != null) {\n\t\ttry {\n\t\t\tstorageService.delete(user.getAvatar().getStoragePath());\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"Error deleting old avatar\", e);\n\t\t}\n\t}\n\n\t// Upload the new avatar\n\ttry {\n\t\tString storagePath = storageService.store(filePart.filename(), filePart.content());\n\t\tuser.setAvatar(new Asset(storagePath, filePart.filename()));\n\t} catch (Exception e) {\n\t\tlog.error(\"Error storing new avatar\", e);\n\t\treturn Mono.just(false);\n\t}\n\n\t// Update the user's profile with the new avatar\n\treturn userRepository.update(user).map(updated -> true);\n}", "CodeBleu_score": 31.819829880022706}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t\t// Get the file name and extension\n\tString fileName = filePart.filename();\n\tString[] parts = fileName.split(\"\\\\.\");\n\tString extension = parts[parts.length - 1];\n\n\t// Get the file content\n\tFlux<DataBuffer> fileContent = filePart.content();\n\n\t// Create a random file name\n\tString randomFileName = RandomStringUtils.randomAlphanumeric(10) + \".\" + extension;\n\n\t// Upload the file\n\treturn fileService.uploadFile(fileContent, randomFileName).map(url -> {\n\t\t// If the user has an avatar, delete it\n\t\tif (user.getProfilePhoto() != null) {\n\t\t\tfileService.deleteFile(user.getProfilePhoto());\n\t\t}\n\n\t\t// Update the user's profile\n\t\tuser.setProfilePhoto(url);\n\t\treturn userRepository.update(user).block();\n\t});\n}", "CodeBleu_score": 35.487034715107576}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t\treturn Mono.just(authUser)\n\t\t.map(a -> {\n\t\t\tUser user = new User();\n\t\t\tuser.name = a.name;\n\t\t\tuser.state = UserState.NEW;\n\t\t\tuser.enabled = true;\n\t\t\tuser.avatar = a.avatar;\n\t\t\tuser.authSource = a.authSource;\n\t\t\tuser.authId = a.authId;\n\t\t\tuser.authContext = a.authContext;\n\t\t\tuser.connections = a.connections;\n\t\t\tuser.currentWorkspace = a.currentWorkspace;\n\t\t\tuser.currentWorkspaceId = a.currentWorkspaceId;\n\t\t\tuser.currentWorkspaceMode = a.currentWorkspaceMode;\n\t\t\tuser.currentWorkspaceName = a.currentWorkspaceName;\n\t\t\tuser.currentWorkspaceCategory = a.currentWorkspaceCategory;\n\t\t\tuser.currentWorkspaceCategoryName = a.currentWorkspaceCategoryName;\n\t\t\tuser.currentWorkspaceCategoryColor = a.currentWorkspaceCategoryColor;\n\t\t\tuser.currentWorkspaceCategoryIcon = a.currentWorkspaceCategoryIcon;\n\t\t\tuser.currentWorkspaceCategoryIconColor = a.currentWorkspaceCategoryIconColor;\n\t\t\tuser.currentWorkspaceCategoryIconBackgroundColor = a.currentWorkspaceCategoryIconBackgroundColor;\n\t\t\tuser.currentWorkspaceCategoryIconTextColor = a.currentWorkspaceCategoryIconTextColor;\n\t\t\tuser.currentWorkspaceCategoryIconTextBackgroundColor = a.currentWorkspaceCategoryIconTextBackgroundColor;\n\t\t\tuser.currentWorkspaceCategoryIconTextBorderColor = a.currentWorkspaceCategoryIconTextBorderColor;\n\t\t\tuser.currentWorkspaceCategoryIconTextBorderWidth = a.currentWorkspaceCategoryIconTextBorderWidth;\n\t\t\tuser.currentWorkspaceCategoryIconTextBorderRadius = a.currentWorkspaceCategoryIconTextBorderRadius;\n\t\t\tuser.currentWorkspaceCategoryIconTextFontFamily = a.currentWorkspaceCategoryIconTextFontFamily;\n\t\t\tuser.currentWorkspaceCategoryIconTextFontSize = a.currentWorkspaceCategoryIconTextFontSize;\n\t\t\tuser.currentWorkspaceCategoryIconTextFontWeight = a.currentWorkspaceCategoryIconTextFontWeight;\n\t\t\tuser.currentWorkspaceCategoryIconTextFontStyle = a.currentWorkspaceCategoryIconTextFontStyle;\n\t\t\tuser.currentWorkspaceCategoryIconTextLineHeight = a.currentWorkspaceCategoryIconTextLineHeight;\n\t\t\tuser.currentWorkspaceCategoryIconTextLetterSpacing = a.currentWorkspaceCategoryIconTextLetterSpacing;\n\t\t\tuser.currentWorkspaceCategoryIconTextAlign = a.currentWorkspaceCategoryIconTextAlign;", "CodeBleu_score": 23.055910160815934}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t\t// Set the user's name, state, enabled status, and avatar link based on the AuthUser\n\tUser user = new User()\n\t\t\t.setName(authUser.getName())\n\t\t\t.setState(UserState.NEW)\n\t\t\t.setEnabled(true)\n\t\t\t.setAvatarLink(authUser.getAvatarLink())\n\t\t\t.setLocale(LocaleUtils.parseLocale(authUser.getLocale()))\n\t\t\t.setAuthSource(authUser.getAuthSource())\n\t\t\t.setAuthSourceId(authUser.getAuthSourceId())\n\t\t\t.setAuthSourceProfileLink(authUser.getAuthSourceProfileLink())\n\t\t\t.setEmail(authUser.getEmail())\n\t\t\t.setEmailVerified(authUser.getEmailVerified())\n\t\t\t.setPassword(authUser.getPassword());\n\t\n\t// If the auth source is email and the auth context contains a password, it encrypts the password and sets it for the user\n\tif (authUser.getAuthSource() == AuthSourceConstants.EMAIL && authUser.getPassword() != null) {\n\t\tuser.setPassword(encryptionService.encryptPassword(authUser.getPassword()));\n\t}\n\t\n\t// Establish user connections from the AuthUser and marks the user as new\n\tuser = user.withConnections(authUser.getConnections()).withNew(true);\n\t\n\t// Create and return the new user\n\treturn userRepository.save(user);\n}", "CodeBleu_score": 41.533546807567426}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t\treturn Mono.just(authUser)\n\t\t.map(authUser -> {\n\t\t\tUser user = new User();\n\t\t\tuser.setName(authUser.getName());\n\t\t\tuser.setState(UserState.NEW);\n\t\t\tuser.setEnabled(true);\n\t\t\tuser.setAvatarLink(authUser.getAvatarLink());\n\t\t\tuser.setAuthSource(authUser.getAuthSource());\n\t\t\tuser.setAuthSourceId(authUser.getAuthSourceId());\n\t\t\tuser.setAuthSourceUserInfo(authUser.getAuthSourceUserInfo());\n\t\t\tuser.setAuthContext(authUser.getAuthContext());\n\t\t\t\n\t\t\tif (authUser.getAuthSource() == AuthSourceConstants.EMAIL && authUser.getAuthContext().containsKey(\"password\")) {\n\t\t\t\tuser.setPassword(encryptionService.encrypt(authUser.getAuthContext().get(\"password\")));\n\t\t\t}\n\t\t\t\n\t\t\treturn user;\n\t\t})\n\t\t.map(user -> {\n\t\t\tuser.setConnections(authUser.getConnections());\n\t\t\tuser.setNew(true);\n\t\t\treturn user;\n\t\t})\n\t\t.flatMap(userRepository::insert)\n\t\t.map(user -> {\n\t\t\tlog.info(\"Created new user from auth user: \" + user.getId());\n\t\t\treturn user;\n\t\t});\n}", "CodeBleu_score": 40.03286787722995}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\treturn connectionRepository.findByEmail(email)\n\t\t\t.switchIfEmpty(Mono.defer(() -> connectionRepository.save(new Connection(email, AuthSourceConstants.EMAIL))))\n\t\t\t.map(connection -> {\n\t\t\t\tif (user.connections.contains(connection)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tuser.connections.add(connection);\n\t\t\t\treturn true;\n\t\t\t})\n\t\t\t.onErrorResume(DuplicateKeyException.class, e -> Mono.just(false));\n}", "CodeBleu_score": 21.576652693797893}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\tConnection connection = new Connection(email, AuthSourceConstants.EMAIL);\n\treturn userRepository.save(user.addConnection(connection))\n\t\t\t.onErrorResume(DuplicateKeyException.class, e -> Mono.error(ofError(BizError.EMAIL_ALREADY_BOUND)));\n}", "CodeBleu_score": 20.87089478168604}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\treturn Mono.defer( () -> {\n\t\tConnection connection = Connection.builder()\n\t\t\t\t.source(AuthSourceConstants.EMAIL)\n\t\t\t\t.value(email)\n\t\t\t\t.build();\n\n\t\t// If the user already has this email bound, don't add it again\n\t\tif (user.hasConnection(connection)) {\n\t\t\treturn Mono.just(false);\n\t\t}\n\n\t\t// Add the connection to the user\n\t\tuser.addConnection(connection);\n\n\t\t// Save the user\n\t\treturn userRepository.save(user).map(u -> true);\n\t});\n}", "CodeBleu_score": 39.74863409495356}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t\treturn userRepository.findById(userId)\n\t\t\t.switchIfEmpty(Mono.error(new BizException(BizError.USER_NOT_FOUND)))\n\t\t\t.filter(user -> user.checkPassword(oldPassword))\n\t\t\t.map(user -> {\n\t\t\t\tuser.setPassword(encryptionService.encrypt(newPassword));\n\t\t\t\treturn userRepository.save(user);\n\t\t\t})\n\t\t\t.map(user -> true);\n}", "CodeBleu_score": 19.299612285098267}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t\treturn findById(userId)\n\t\t.map(user -> {\n\t\t\tif (!user.verifyPassword(oldPassword)) {\n\t\t\t\tthrow new BizException(BizError.INVALID_PASSWORD);\n\t\t\t}\n\t\t\treturn user;\n\t\t})\n\t\t.map(user -> {\n\t\t\tuser.setPassword(<PASSWORD>);\n\t\t\treturn user;\n\t\t})\n\t\t.flatMap(user -> save(user))\n\t\t.map(user -> true);\n}", "CodeBleu_score": 17.799271141840006}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t\treturn userRepository.findById(userId)\n\t\t.switchIfEmpty(Mono.error(new BizException(BizError.USER_NOT_FOUND)))\n\t\t.map(user -> {\n\t\t\tif (user.validatePassword(oldPassword)) {\n\t\t\t\tuser.encryptPassword(newPassword);\n\t\t\t\tuserRepository.update(user);\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n}", "CodeBleu_score": 16.320380136978642}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t\treturn groupService.getUserDetailGroups(userId, orgMember, withoutDynamicGroups, locale);\n}", "CodeBleu_score": 6.829067051617821}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t\treturn Mono.just(newHashSet(orgMember.getGroups()))\n\t\t\t.map(groups -> groups.stream()\n\t\t\t\t\t.filter(group -> !group.isAllUsersGroup())\n\t\t\t\t\t.filter(group -> !withoutDynamicGroups || !group.isDynamicGroup())\n\t\t\t\t\t.map(group -> {\n\t\t\t\t\t\tMap<String, String> groupMap = newHashMap();\n\t\t\t\t\t\tgroupMap.put(\"id\", group.getId());\n\t\t\t\t\t\tgroupMap.put(\"name\", group.getName(locale));\n\t\t\t\t\t\treturn groupMap;\n\t\t\t\t\t})\n\t\t\t\t\t.collect(Collectors.toList()))\n\t\t\t.map(groups -> {\n\t\t\t\tif (orgMember.isAdmin()) {\n\t\t\t\t\t// If the user is an admin, we add the \"all users\" group to the list\n\t\t\t\t\tMap<String, String> allUsersGroupMap = newHashMap();\n\t\t\t\t\tallUsersGroupMap.put(\"id\", Group.ALL_USERS_GROUP_ID);\n\t\t\t\t\tallUsersGroupMap.put(\"name\", Group.ALL_USERS_GROUP_NAME);\n\t\t\t\t\tgroups.add(allUsersGroupMap);\n\t\t\t\t}\n\t\t\t\treturn groups;\n\t\t\t});\n}", "CodeBleu_score": 31.492643274167936}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t\t// If the user is an admin, we don't need to filter out the dynamic groups\n\tif (orgMember.isAdmin()) {\n\t\treturn groupService.listAllGroups(locale)\n\t\t\t\t.map(group -> new HashMap<String, String>() {{\n\t\t\t\t\tput(\"id\", group.getId());\n\t\t\t\t\tput(\"name\", group.getName());\n\t\t\t\t}});\n\t}\n\n\t// If we should exclude dynamic groups, we can just filter out the \"all users\" group\n\tif (withoutDynamicGroups) {\n\t\treturn groupService.listAllGroups(locale)\n\t\t\t\t.filter(group -> !group.isDynamic())\n\t\t\t\t.map(group -> new HashMap<String, String>() {{\n\t\t\t\t\tput(\"id\", group.getId());\n\t\t\t\t\tput(\"name\", group.getName());\n\t\t\t\t}});\n\t}\n\n\t// Otherwise, we need to filter out the \"all users\" group and the dynamic groups\n\treturn groupService.listAllGroups(locale)\n\t\t\t.filter(group -> !group.isDynamic())\n\t\t\t.filter(group -> !group.getId().equals(Group.ALL_USERS_GROUP_ID))\n\t\t\t.map(group -> new HashMap<String, String>() {{\n\t\t\t\tput(\"id\", group.getId());\n\t\t\t\tput(\"name\", group.getName());\n\t\t\t}});\n}", "CodeBleu_score": 30.98502684458266}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\treturn userStatusRepository.save(new UserStatus(userId, UserStatusType.NEW_USER_GUIDANCE_SHOWN))\n\t\t.then(mongoUpsertHelper.upsert(UserStatus.class, userId, new Update().set(\"hasShowNewUserGuidance\", true)))\n\t\t.thenReturn(true);\n}", "CodeBleu_score": 25.094273428456926}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\tUserStatus userStatus = new UserStatus();\n\tuserStatus.userId = userId;\n\tuserStatus.hasShowNewUserGuidance = true;\n\t\n\treturn mongoUpsertHelper.upsert(userStatus, UserStatusRepository.class, UserStatus.class)\n\t\t.map(success -> true);\n}", "CodeBleu_score": 32.65144366443067}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\tUserStatus userStatus = new UserStatus();\n\tuserStatus.userId = userId;\n\tuserStatus.hasShowNewUserGuidance = true;\n\n\treturn mongoUpsertHelper.upsert(userStatus);\n}", "CodeBleu_score": 34.08173654740929}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition must not be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue must not be nil\")\n\t}\n\tif c.partitionManager == nil {\n\t\treturn\n\t}\n\n\tpartitions := c.partitionManager.Partitions()\n\twg := rungroup.New()\n\tfor _, p := range partitions {\n\t\tif predicatePartition(p.Name(), p) {\n\t\t\twg.Go(func() error {\n\t\t\t\treturn p.ClearMatching(predicateValue)\n\t\t\t})\n\t\t}\n\t}\n\twg.Wait()\n}", "CodeBleu_score": 39.268052131931896}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition must not be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue must not be nil\")\n\t}\n\tif c.partitions == nil {\n\t\treturn\n\t}\n\twg := rungroup.New()\n\tfor k, p := range c.partitions {\n\t\tif predicatePartition(k, p) {\n\t\t\twg.Go(func() error {\n\t\t\t\treturn p.ClearMatching(predicateValue)\n\t\t\t})\n\t\t}\n\t}\n\twg.Wait()\n}", "CodeBleu_score": 40.1821999404562}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\tif c.partitionManager == nil {\n\t\treturn\n\t}\n\tpartitions := c.partitionManager.Partitions()\n\twg := rungroup.New()\n\tfor _, partition := range partitions {\n\t\tif predicatePartition(partition.Name(), partition) {\n\t\t\twg.Run(func() error {\n\t\t\t\tpartition.ClearMatching(predicateValue)\n\t\t\t\treturn nil\n\t\t\t})\n\t\t}\n\t}\n\twg.Wait()\n}", "CodeBleu_score": 40.86011802646161}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\treturn int(math.Ceil(float64(maxItemsTotal) / float64(numPartitions) * float64(totalWeightQuantity)))\n}", "CodeBleu_score": 33.30972279339894}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 {\n\t\treturn 0\n\t}\n\tif totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\taverageWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\tmaxSizePerPartition := int(math.Ceil(float64(maxItemsTotal) / float64(numPartitions) / averageWeightPerPartition))\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 48.573523906177776}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 {\n\t\tpanic(\"Number of partitions must be greater than zero\")\n\t}\n\tif totalWeightQuantity <= 0 {\n\t\tpanic(\"Total weight quantity must be greater than zero\")\n\t}\n\tavgWeightPerPartition := totalWeightQuantity / numPartitions\n\tmaxItemsPerPartition := maxItemsTotal / numPartitions\n\tmaxSizePerPartition := avgWeightPerPartition * maxItemsPerPartition\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 46.59751405935234}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> map = new HashMap<>();\n\tConnection connection = null;\n\ttry {\n\t\tconnection = connectionFactory.create().block();\n\t\tConnectionMetadata metadata = connection.getMetadata();\n\t\tif (metadata != null) {\n\t\t\tmap.put(\"databaseProductName\", metadata.getDatabaseProductName());\n\t\t\tmap.put(\"databaseProductVersion\", metadata.getDatabaseProductVersion());\n\t\t}\n\t}\n\tfinally {\n\t\tif (connection != null) {\n\t\t\tconnection.close().subscribe();\n\t\t}\n\t}\n\treturn map;\n}", "CodeBleu_score": 45.565984292116944}, {"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> map = new HashMap<>();\n\tConnectionFactory connectionFactory = ConnectionFactoryCreator.getConnectionFactory();\n\tif (connectionFactory != null) {\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tconnection = connectionFactory.create().block();\n\t\t\tConnectionMetadata connectionMetadata = connection.getMetadata().block();\n\t\t\tif (connectionMetadata != null) {\n\t\t\t\tmap.put(\"databaseProductName\", connectionMetadata.getDatabaseProductName());\n\t\t\t\tmap.put(\"databaseProductVersion\", connectionMetadata.getDatabaseProductVersion());\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tif (connection != null) {\n\t\t\t\tconnection.close().subscribe();\n\t\t\t}\n\t\t}\n\t}\n\treturn map;\n}", "CodeBleu_score": 41.702097354123765}, {"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> map = new HashMap<>();\n\tConnection connection = connectionFactory.create().block();\n\tConnectionMetadata metadata = connection.getMetadata();\n\tif (metadata != null) {\n\t\tmap.put(\"databaseProductName\", metadata.getDatabaseProductName());\n\t\tmap.put(\"databaseProductVersion\", metadata.getDatabaseProductVersion());\n\t}\n\treturn map;\n}", "CodeBleu_score": 47.605563088681244}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tUser user = configMap.getUser();\n\tif (user == null) {\n\t\tinfo.setEnableRegistration(false);\n\t\tinfo.setEnableEmailVerify(false);\n\t\treturn;\n\t}\n\tinfo.setEnableRegistration(isTrue(user.getEnableRegistration()));\n\tinfo.setEnableEmailVerify(isTrue(user.getEnableEmailVerify()));\n\tinfo.setEnableSocialSignIn(isTrue(user.getEnableSocialSignIn()));\n\tinfo.setEnableSocialSignUp(isTrue(user.getEnableSocialSignUp()));\n\tinfo.setEnableSocialConnection(isTrue(user.getEnableSocialConnection()));\n\tinfo.setEnableThirdPartyComment(isTrue(user.getEnableThirdPartyComment()));\n\tinfo.setEnableThirdPartyLike(isTrue(user.getEnableThirdPartyLike()));\n\tinfo.setEnableThirdPartyReward(isTrue(user.getEnableThirdPartyReward()));\n\tinfo.setEnableThirdPartyCommentLike(isTrue(user.getEnableThirdPartyCommentLike()));\n\tinfo.setEnableThirdPartyCommentReward(isTrue(user.getEnableThirdPartyCommentReward()));\n\tinfo.setEnableThirdPartyCommentLikeReward(isTrue(user.getEnableThirdPartyCommentLikeReward()));\n\tinfo.setEnableThirdPartyAvatar(isTrue(user.getEnableThirdPartyAvatar()));\n\tinfo.setEnableThirdPartyCover(isTrue(user.getEnableThirdPartyCover()));\n\tinfo.setEnableThirdPartyFollow(isTrue(user.getEnableThirdPartyFollow()));\n\tinfo.setEnableThirdPartyFavorite(isTrue(user.getEnableThirdPartyFavorite()));\n\tinfo.setEnableThirdPartyNotification(isTrue(user.getEnableThirdPartyNotification()));\n\tinfo.setEnableThirdPartyPreference(isTrue(user.getEnableThirdPartyPreference()));\n\tinfo.setEnableThirdPartyEditor(isTrue(user.getEnableThirdPartyEditor()));\n\tinfo.setEnableThirdPartyEditorMd(isTrue(user.getEnableThirdPartyEditorMd()));\n\tinfo.setEnableThirdPartyEditorType(isTrue(user.getEnableThirdPartyEditorType()));\n\tinfo.setEnableThirdPartyEditorTheme(isTrue(user.getEnableThirdPartyEditorTheme()));\n\tinfo.setEnableThirdPartyEditorAttachment(isTrue(user.getEnableThirdPartyEditorAttachment()));\n\tinfo.setEnableThirdPartyEditorMention(isTrue(user.getEnableThirdPartyEditorMention()));\n\tinfo.setEnableThirdPartyEditorMath(isTrue(user.getEnableThirdPartyEditorMath()));\n\t", "CodeBleu_score": 28.312860650917855}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tif (configMap.get(User.ENABLE_REGISTER) != null) {\ninfo.setEnableRegister(isTrue(configMap.get(User.ENABLE_REGISTER)));\n}\nif (configMap.get(User.ENABLE_EMAIL_VERIFICATION) != null) {\ninfo.setEnableEmailVerification(isTrue(configMap.get(User.ENABLE_EMAIL_VERIFICATION)));\n}\n}", "CodeBleu_score": 17.852948579637477}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tUser userSetting = configMap.get(User.class);\n\tif (userSetting == null) {\n\t\tinfo.setEnableRegistration(false);\n\t\tinfo.setEnableEmailVerify(false);\n\t} else {\n\t\tinfo.setEnableRegistration(isTrue(userSetting.getEnableRegistration()));\n\t\tinfo.setEnableEmailVerify(isTrue(userSetting.getEnableEmailVerify()));\n\t}\n}", "CodeBleu_score": 43.65994520123257}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\t\tThreadGroup threadGroup = new ThreadGroup(\"Halo-Restart-Thread-Group\");\n\tThread thread = new Thread(threadGroup, () -> {\n\t\ttry {\n\t\t\tThread.currentThread().setContextClassLoader(Application.class.getClassLoader());\n\t\t\tConfigurableApplicationContext context = (ConfigurableApplicationContext) ApplicationContextProvider.getInstance();\n\t\t\tcontext.close();\n\t\t\tSpringApplication.exit(context, () -> 0);\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"Restart error.\", e);\n\t\t}\n\t});\n\tthread.setDaemon(false);\n\tthread.start();\n\treturn \"Restart has begun.\";\n}", "CodeBleu_score": 45.36529112128609}, {"code": "public Object restart(){\n\t\tThreadGroup group = new ThreadGroup(\"Halo-Restart\");\n\tThread restartThread = new Thread(group, new Runnable() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\t// Get the context class loader\n\t\t\t\tClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n\t\t\t\t// Get the Spring Boot application context\n\t\t\t\tConfigurableApplicationContext context = (ConfigurableApplicationContext) Application.run();\n\t\t\t\t// Set the context class loader to the application class loader\n\t\t\t\tThread.currentThread().setContextClassLoader(classLoader);\n\t\t\t\t// Close the context\n\t\t\t\tcontext.close();\n\t\t\t} catch (Exception e) {\n\t\t\t\tlog.error(e.getMessage(), e);\n\t\t\t}\n\t\t}\n\t});\n\trestartThread.setDaemon(false);\n\trestartThread.start();\n\treturn \"The application has been restarted. Please check the logs for details.\";\n}", "CodeBleu_score": 37.826819634549345}, {"code": "public Object restart(){\n\t\tThreadGroup threadGroup = new ThreadGroup(\"Halo-Restart-Thread-Group\");\n\tThread restartThread = new Thread(threadGroup, new Runnable() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\tlog.error(\"Restart thread sleep interrupted\", e);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\t// Get the application context class loader\n\t\t\t\tClassLoader classLoader = Application.class.getClassLoader();\n\t\t\t\t// Create a new class loader with the same class path as the application class loader\n\t\t\t\tClassLoader restartClassLoader = new URLClassLoader(classLoader.getURLs(), null);\n\t\t\t\t// Create a new thread with the application class loader as its context class loader\n\t\t\t\tThread thread = new Thread(new Runnable() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t// Get the application context\n\t\t\t\t\t\t\tApplicationContext applicationContext = Application.run();\n\t\t\t\t\t\t\t// Get the application context bean\n\t\t\t\t\t\t\tConfigurableApplicationContext configurableApplicationContext = (ConfigurableApplicationContext) applicationContext;\n\t\t\t\t\t\t\t// Stop the application context\n\t\t\t\t\t\t\tconfigurableApplicationContext.close();\n\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\tlog.error(\"Restart application context close error\", e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, \"Halo-Restart-Thread\");\n\t\t\t\tthread.setContextClassLoader(restartClassLoader);\n\t\t\t\tthread.setDaemon(false);\n\t\t\t\tthread.start();\n\t\t\t} catch (Exception e) {\n\t\t\t\tlog.error(\"Restart thread error\", e);\n\t\t\t}\n\t\t}\n\t}, \"Halo-Restart-Thread\");\n\trestartThread.setContextClassLoader(classLoader);\n\trestartThread.setDaemon(false);\n\trestartThread.start();\n\treturn \"Application restart initiated\";\n}", "CodeBleu_score": 40.25735220624112}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t ObjectMapper mapper = Jackson2ObjectMapperBuilder.json().build();\n configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(mapper));\n configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(mapper));\n }", "CodeBleu_score": 53.484655684421625}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t // Jackson JSON\n ObjectMapper mapper = Jackson2ObjectMapperBuilder.json().build();\n Jackson2JsonEncoder encoder = new Jackson2JsonEncoder(mapper);\n Jackson2JsonDecoder decoder = new Jackson2JsonDecoder(mapper);\n configurer.defaultCodecs().jackson2JsonEncoder(encoder);\n configurer.defaultCodecs().jackson2JsonDecoder(decoder);\n }", "CodeBleu_score": 40.68411331305495}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t ObjectMapper mapper = Jackson2ObjectMapperBuilder.json().build();\n configurer.customCodecs().register(new Jackson2JsonEncoder(mapper, MediaType.APPLICATION_JSON));\n configurer.customCodecs().register(new Jackson2JsonDecoder(mapper, MediaType.APPLICATION_JSON));\n }", "CodeBleu_score": 34.28904751105656}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t\treturn route(path(\"/console/**\").and(accept(MediaType.TEXT_HTML)).and(\n\t\t\tnew WebSocketRequestPredicate(false)), request -> ServerResponse.ok().body(BodyInserters.fromResource(\n\t\t\t\"classpath:static/console/index.html\")));\n}", "CodeBleu_score": 24.07968675626808}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t\treturn route(path(\"/console/**\").and(accept(MediaType.TEXT_HTML)).and(\n\t\t\tnew WebSocketRequestPredicate(false)), request -> ServerResponse.ok()\n\t\t\t.contentType(MediaType.TEXT_HTML)\n\t\t\t.body(BodyInserters.fromResource(new ClassPathResource(\"/static/console/index.html\"))));\n}", "CodeBleu_score": 26.600985125911574}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t\treturn route(path(\"/console/**\")\n\t\t\t.and(accept(MediaType.TEXT_HTML))\n\t\t\t.and(new WebSocketRequestPredicate().not()),\n\t\t\trequest -> ServerResponse.ok().render(\"index\"));\n}", "CodeBleu_score": 23.06732082830269}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t\treturn route(path(\"/uc/**\").and(accept(MediaType.TEXT_HTML)).and(new WebSocketRequestPredicate(false)),\n\t\t\trequest -> ServerResponse.ok().contentType(MediaType.TEXT_HTML)\n\t\t\t\t\t.body(BodyInserters.fromResource(ucIndexResource)));\n}", "CodeBleu_score": 24.708956922417816}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t\treturn route(path(\"/uc/**\").and(accept(MediaType.TEXT_HTML)).and(\n\t\t\tnew WebSocketRequestPredicate().negate()),\n\t\t\trequest -> ServerResponse.ok().contentType(MediaType.TEXT_HTML)\n\t\t\t\t\t.body(BodyInserters.fromResource(ucIndexPath)));\n}", "CodeBleu_score": 26.98811649678693}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t\treturn route(path(\"/uc/**\").and(accept(MediaType.TEXT_HTML)).and(\n\t\tnew WebSocketRequestPredicate().negate()), request -> {\n\t\tString location = \"/uc/index.html\";\n\t\treturn ServerResponse.temporaryRedirect(location).build();\n\t});\n}", "CodeBleu_score": 26.670635961117995}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\treturn new InMemoryReactiveIndexedSessionRepository<>(new ConcurrentHashMap<>());\n}", "CodeBleu_score": 10.729825334961589}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\treturn new InMemoryReactiveIndexedSessionRepository<>(new ConcurrentHashMap<>());\n}", "CodeBleu_score": 10.729825334961589}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\n}", "CodeBleu_score": 3.783306382432926}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t//    if (haloProperties.getSecurity().getTwoFactor().isEnabled()) {\n//        return new TwoFactorUserDetailsService(userService, roleService, haloProperties);\n//    }\n    return new DefaultUserDetailService(userService, roleService, haloProperties);\n}", "CodeBleu_score": 14.01322597689099}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\treturn new DefaultUserDetailService(userService, roleService, haloProperties);\n}", "CodeBleu_score": 13.671575804488825}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t//    return new DefaultUserDetailService(userService, roleService, haloProperties);\n    return null;\n}", "CodeBleu_score": 8.295316384116305}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\t\tAssert.notNull(this, \"Comment owner must not be null\");\n\tComment.CommentOwner owner = new Comment.CommentOwner();\n\towner.setKind(\"email\");\n\towner.setEmail(StringUtils.defaultIfBlank(getEmail(), \"\"));\n\towner.setDisplayName(getDisplayName());\n\towner.setAvatar(getAvatar());\n\towner.setWebsite(getWebsite());\n\treturn owner;\n}", "CodeBleu_score": 25.84275415758423}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\tComment.CommentOwner owner = new Comment.CommentOwner();\nowner.setKind(\"email\");\nowner.setDisplayName(displayName);\nowner.setEmail(email);\nowner.setAvatar(avatar);\nowner.setWebsite(website);\nreturn owner;\n}", "CodeBleu_score": 25.38089474600343}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t\tComment.CommentOwner commentOwner = new Comment.CommentOwner();\n\tcommentOwner.setKind(\"email\");\n\tcommentOwner.setEmail(StringUtils.defaultIfBlank(getEmail(), \"\"));\n\tcommentOwner.setDisplayName(StringUtils.defaultIfBlank(getDisplayName(), \"\"));\n\tMap<String, String> annotations = new LinkedHashMap<>();\n\tif (StringUtils.isNotBlank(getAvatar())) {\n\t\tannotations.put(\"avatar\", getAvatar());\n\t}\n\tif (StringUtils.isNotBlank(getWebsite())) {\n\t\tannotations.put(\"website\", getWebsite());\n\t}\n\tcommentOwner.setAnnotations(annotations);\n\treturn commentOwner;\n}", "CodeBleu_score": 64.0181805160107}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (commentOwner.getKind() == Comment.CommentOwner.Kind.EMAIL) {\n\t\tOptional<User> user = userService.getUserByEmail(commentOwner.getName());\n\t\treturn user.map(u -> u.getLoginName().equals(post.getAuthorLoginName())).orElse(false);\n\t} else {\n\t\treturn commentOwner.getName().equals(post.getAuthorLoginName());\n\t}\n}", "CodeBleu_score": 29.778278230491996}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (post.getOwnerKind() == commentOwner.getKind()) {\n\t\tif (post.getOwnerKind() == Comment.OwnerKind.USER) {\n\t\t\treturn post.getOwner().getUsername().equals(commentOwner.getName());\n\t\t} else if (post.getOwnerKind() == Comment.OwnerKind.EMAIL) {\n\t\t\treturn post.getOwner().getEmail().equals(commentOwner.getName());\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 26.954504758031522}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (post.getAuthor().getKind() == Comment.Author.AuthorKind.EMAIL) {\n\t\tUser user = userService.getByEmail(post.getAuthor().getName());\n\t\treturn user.getLogin().equals(commentOwner.getName());\n\t} else {\n\t\treturn post.getAuthor().getName().equals(commentOwner.getName());\n\t}\n}", "CodeBleu_score": 33.07455584857922}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\t\tListOptions listOptions = new ListOptions();\n\tlistOptions.setFieldSelector(fieldSelector);\n\tlistOptions.setKeyword(keyword);\n\tif (StringUtils.isNotBlank(owner)) {\n\t\tlistOptions.addCondition(equal(\"owner\", owner));\n\t}\n\treturn listOptions;\n}", "CodeBleu_score": 13.217316946754531}, {"code": "public ListOptions toListOptions(){\n\t\tListOptions listOptions = new ListOptions();\n\tlistOptions.setPageRequest(PageRequestImpl.of(page, size));\n\tlistOptions.setSort(sort);\n\tlistOptions.setKeywords(keywords);\n\tlistOptions.setOwner(owner);\n\tlistOptions.setQuery(query);\n\tlistOptions.setFieldSelector(fieldSelector);\n\treturn listOptions;\n}", "CodeBleu_score": 12.077863873211124}, {"code": "public ListOptions toListOptions(){\n\t\tListOptions listOptions = new ListOptions();\n\tlistOptions.setFieldSelector(fieldSelector);\n\n\tif (StringUtils.isNoneBlank(keyword)) {\n\t\tlistOptions.add(contains(\"content\", keyword));\n\t}\n\n\tif (StringUtils.isNoneBlank(ownerName)) {\n\t\tlistOptions.add(equal(\"author\", ownerName));\n\t}\n\n\treturn listOptions;\n}", "CodeBleu_score": 16.438046240334323}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\tAssert.notNull(commentName, \"commentName must not be null\");\n\treturn counterService.get(commentName).map(commentCount -> new CommentStats(commentCount, commentName));\n}", "CodeBleu_score": 33.09944692406579}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\tAssert.notNull(commentName, \"Comment name must not be null\");\n\treturn counterService.get(commentName)\n\t\t.map(count -> new CommentStats(commentName, count));\n}", "CodeBleu_score": 32.39024377838046}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\tAssert.notNull(commentName, \"commentName must not be null\");\n\treturn counterService.findCounter(commentName).map(counter -> {\n\t\tif (counter != null) {\n\t\t\treturn new CommentStats(counter.getValue(), commentName);\n\t\t} else {\n\t\t\treturn new CommentStats(0, commentName);\n\t\t}\n\t});\n}", "CodeBleu_score": 51.28765202779437}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\t\t// Create a subscriber from the given identity\n\tSubscriber subscriber = Subscriber.create(identity);\n\t// Create a reason for the subscriber\n\tReason reason = Reason.create(NotificationReasonConst.REPLY);\n\t// Set the condition for the reason\n\treason.setCondition(new Condition() {\n\t\t@Override\n\t\tpublic boolean test(Comment comment, Reply reply) {\n\t\t\treturn StringUtils.equals(comment.getAuthorName(), reply.getAuthorName());\n\t\t}\n\t});\n\t// Add the reason to the subscriber\n\tsubscriber.add(reason);\n\t// Subscribe the subscriber to the notification center\n\tNotificationCenter.subscribe(subscriber);\n}", "CodeBleu_score": 36.55874343204684}, {"code": "void subscribeReply(UserIdentity identity){\n\t\t// Create a subscriber from the user identity\n\tSubscriber subscriber = Subscriber.fromUserIdentity(identity);\n\t// Create an interest reason for the subscriber\n\tInterest interest = Interest.builder()\n\t\t.setReason(Interest.Reason.someoneRepliedToYou)\n\t\t.setCondition(Interest.Condition.repliedOwnerMatches(identity.getName()))\n\t\t.build();\n\t// Create a subscription from the subscriber and interest\n\tSubscription subscription = Subscription.builder()\n\t\t.setSubscriber(subscriber)\n\t\t.setInterest(interest)\n\t\t.build();\n\t// Subscribe the user to the notification center\n\tnotificationCenter.subscribe(subscription);\n\t// Block until the subscription is completed\n\tnotificationCenter.awaitSubscriptionComplete(subscription);\n}", "CodeBleu_score": 35.07479167403778}, {"code": "void subscribeReply(UserIdentity identity){\n\t\tSubscription subscription = new Subscription(identity, NotificationReasonConst.REPLY);\n\tsubscription.setCondition(Subscription.Condition.IS_REPLIED_OWNER_EQUALS_TO_USER_NAME);\n\tnotificationCenter.subscribe(subscription);\n\tnotificationCenter.awaitSubscriptionComplete(subscription);\n}", "CodeBleu_score": 25.352683332985066}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\t\treturn client.updateComment(comment, comment -> {\n\t\tcomment.setApproved(true);\n\t\tcomment.setApprovedBy(user.getId());\n\t\tcomment.setApprovedAt(Instant.now());\n\t\treturn comment;\n\t});\n}", "CodeBleu_score": 18.458955923364208}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t\treturn Mono.defer(() -> {\n\t\ttry {\n\t\t\treturn client.updateComment(comment);\n\t\t} catch (OptimisticLockingFailureException ex) {\n\t\t\treturn client.updateComment(comment, updateComment(comment));\n\t\t}\n\t});\n}", "CodeBleu_score": 13.804671440465269}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t\treturn Mono.fromCallable(() -> {\n\t\tcomment.setApproved(true);\n\t\tcomment.setApprovedAt(Instant.now());\n\t\treturn comment;\n\t}).retryWhen(Retry.backoff(3, Duration.ofMillis(100)).filter(e -> e instanceof OptimisticLockingFailureException))\n\t    .map(comment -> {\n\t\treturn updateComment(comment);\n\t});\n}", "CodeBleu_score": 23.920513295398315}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction && $this->getMountedComponent()) {\n$action->mount($this->getMountedComponent());\n}\nif ($action instanceof HasRecord && $this->getRecord()) {\n$action->setRecord($this->getRecord());\n}\nreturn $action;\n}", "CodeBleu_score": 53.57973676221517}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction) {\n$action->setLivewire($this);\n}\nif ($action instanceof HasRecord && $this->record) {\n$action->setRecord($this->record);\n}\nreturn $action;\n}", "CodeBleu_score": 46.90797182255134}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction) {\n$action->setLivewire($this);\n}\n\nif ($action instanceof HasRecord && $this->record) {\n$action->setRecord($this->record);\n}\n\nreturn $action;\n}", "CodeBleu_score": 46.90797182255134}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$url = $this->getSuccessRedirectUrl();\nif (!is_app_url($url)) {\n$url = FilamentView::getUrl($url);\n}\n\nreturn redirect($url);\n}", "CodeBleu_score": 44.99697132341374}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\tif (is_app_url($this->getSuccessRedirectUrl())) {\nreturn redirect($this->getSuccessRedirectUrl());\n}\n\nreturn $this;\n}", "CodeBleu_score": 27.043377212541607}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$url = $this->getSuccessRedirectUrl();\n\nif (is_app_url($url)) {\nreturn redirect($url);\n}\n\nreturn redirect()->route($url);\n}", "CodeBleu_score": 40.5624111253102}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t\tif (! $record || ! method_exists($record, 'tags')) {\n\t\treturn;\n\t}\n\n\t$tagModelClass = config('tags.models.tag');\n\t$tagModel = new $tagModelClass();\n\n\t$tags = collect($state['tags'])\n\t\t->map(fn (string $tag) => $tagModel::firstOrCreate(['name' => $tag])->id)\n\t\t->all();\n\n\t$record->tags()->sync($tags);\n}", "CodeBleu_score": 29.947792171064293}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t\tif (is_null($record)) {\n\t\treturn;\n\t}\n\n\tif (! method_exists($record, 'tags')) {\n\t\treturn;\n\t}\n\n\t$tagModelClass = $record->tags()->getRelated();\n\n\t$tags = collect($state['tags'])\n\t\t->map(fn (string $tagName) => $this->getOrCreateTag($tagModelClass, $tagName))\n\t\t->map(fn (Tag $tag) => $tag->getKey())\n\t\t->toArray();\n\n\t$record->tags()->sync($tags);\n}", "CodeBleu_score": 33.39262139160083}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t\tif (is_null($record)) {\n\t\treturn;\n\t}\n\n\tif (!method_exists($record, 'tags')) {\n\t\treturn;\n\t}\n\n\t$tagModel = config('tags.model');\n\t$tagTypes = config('tags.types', AllTagTypes::class);\n\n\t$tagNames = $state[static::getTagsInputName()];\n\t$tags = [];\n\n\tforeach ($tagNames as $tagName) {\n\t\t$tag = $tagModel::firstOrCreate([\n\t\t\t'name' => $tagName,\n\t\t], [\n\t\t\t'type' => $tagTypes::getType($tagName),\n\t\t]);\n\n\t\t$tags[] = $tag;\n\t}\n\n\t$record->tags()->sync(collect($tags)->pluck('id'));\n}", "CodeBleu_score": 38.05296052016251}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tif repoPath == \"\" {\n\t\treturn fmt.Errorf(\"repo path is empty\")\n\t}\n\tif pipelineIdentifier == \"\" {\n\t\treturn fmt.Errorf(\"pipeline identifier is empty\")\n\t}\n\tif permission == enum.Permission(0) {\n\t\treturn fmt.Errorf(\"permission is not set\")\n\t}\n\n\tspacePath, repoName, err := paths.DissectRepoPath(repoPath)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to dissect repo path: %w\", err)\n\t}\n\n\tscope, err := authz.NewScope(spacePath, repoName)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to create scope: %w\", err)\n\t}\n\n\tresource, err := authz.NewResource(types.PipelineType, pipelineIdentifier)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to create resource: %w\", err)\n\t}\n\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 51.720938322132184}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, repoName, err := paths.DissectRepoPath(repoPath)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to dissect repo path: %w\", err)\n\t}\n\n\tscope := authz.Scope{\n\t\tSpacePath: spacePath,\n\t\tRepoName:  repoName,\n\t}\n\n\tresource := authz.Resource{\n\t\tPipelineIdentifier: pipelineIdentifier,\n\t}\n\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 66.1403472384807}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, repoName, err := paths.DissectRepoPath(repoPath)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to dissect repo path: %w\", err)\n\t}\n\n\tpipelineScope := types.Scope{\n\t\tSpace: spacePath,\n\t\tRepo:  repoName,\n\t}\n\n\tpipelineResource := types.Resource{\n\t\tType: enum.ResourceTypePipeline,\n\t\tID:   pipelineIdentifier,\n\t}\n\n\treturn authorizer.Check(ctx, session, pipelineScope, pipelineResource, permission)\n}", "CodeBleu_score": 67.22763177270161}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparentSpace, name := paths.GetParentSpace(space.Path)\n\tscope := authz.SpaceScope(parentSpace, name)\n\tresource := authz.SpaceResource(space.Path)\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 39.15345452356623}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tif space == nil {\n\t\treturn fmt.Errorf(\"space cannot be nil\")\n\t}\n\n\tparentSpace, name := paths.SplitSpace(space.Path)\n\tscope := authz.Scope{\n\t\tType:  authz.SpaceType,\n\t\tName:  name,\n\t\tOwner: parentSpace,\n\t}\n\tresource := authz.Resource{\n\t\tType: authz.SpaceType,\n\t\tName: name,\n\t}\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 60.23287834259909}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparentPath := paths.GetParentPath(space.Path)\n\tparentSpace, err := types.GetSpace(ctx, parentPath)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"unable to get space %s: %w\", parentPath, err)\n\t}\n\n\tscope := authz.Scope(parentSpace.Name)\n\tresource := authz.Resource(space.Name)\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 56.99300755629785}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\treturn json.Marshal(data)\n\t}\n\n\tvar payload map[string]any\n\terr := json.Unmarshal(source, &payload)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tpayload = types.Map(payload)\n\tfor k := range payload {\n\t\tif !types.Has(types.GitnessPayloadFields, k) {\n\t\t\treturn nil, fmt.Errorf(\"unknown field %s\", k)\n\t\t}\n\t}\n\n\tpayload[\"data\"] = data\n\tsanitized, err := json.Marshal(payload)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn bytes.TrimSuffix(sanitized, []byte(\"\n\")), nil\n}", "CodeBleu_score": 43.08046762873647}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif source == nil {\n\t\tsource = json.Marshal(data)\n\t\tif source == nil {\n\t\t\treturn nil, errors.New(\"failed to marshal data\")\n\t\t}\n\t}\n\n\tvar m map[string]any\n\tif err := json.Unmarshal(source, &m); err != nil {\n\t\treturn nil, err\n\t}\n\n\tm = types.SanitizeMap(m)\n\n\tb, err := json.Marshal(m)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn bytes.TrimSuffix(b, []byte(\"\n\")), nil\n}", "CodeBleu_score": 36.440219478357776}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif source == nil {\n\t\tsource = json.RawMessage(json.Marshal(data))\n\t}\n\n\tvar m map[string]any\n\tif err := json.Unmarshal(source, &m); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn json.Marshal(m)\n}", "CodeBleu_score": 25.31884035676668}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference.\n\tif err := validateRepoRef(repoRef); err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Fetch the repository.\n\trepo, err := c.store.GetRepository(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the session's permissions.\n\tif err := c.checkAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 47.62075158618412}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference.\n\tif err := c.validateRepoRef(repoRef); err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Fetch the repository.\n\trepo, err := c.repoStore.GetRepoByRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the session's access to the repository.\n\tif err := c.checkRepoAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 45.83060543408066}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.validateRepoRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := c.checkRepoAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 38.763852227699815}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tcheckSanitizers := map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.EmptyPayloadKind: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.RawPayloadKind: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.MarkdownPayloadKind: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.PipelinePayloadKind: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t}\n\treturn checkSanitizers\n}", "CodeBleu_score": 26.311555053839903}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.EmptyPayloadKind:    func(in *ReportInput, s *auth.Session) error { return nil },\n\t\tenum.RawPayloadKind:      SanitizeRaw,\n\t\tenum.MarkdownPayloadKind: SanitizeMarkdown,\n\t\tenum.PipelinePayloadKind: SanitizePipeline,\n\t}\n}", "CodeBleu_score": 24.471584026963676}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tcheckSanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\tcheckSanitizers[enum.EmptyPayloadKind] = func(in *ReportInput, s *auth.Session) error {\n\t\treturn nil\n\t}\n\tcheckSanitizers[enum.RawPayloadKind] = func(in *ReportInput, s *auth.Session) error {\n\t\treturn sanitizeRawCheck(in, s)\n\t}\n\tcheckSanitizers[enum.MarkdownPayloadKind] = func(in *ReportInput, s *auth.Session) error {\n\t\treturn sanitizeMarkdownCheck(in, s)\n\t}\n\tcheckSanitizers[enum.PipelinePayloadKind] = func(in *ReportInput, s *auth.Session) error {\n\t\treturn sanitizePipelineCheck(in, s)\n\t}\n\treturn checkSanitizers\n}", "CodeBleu_score": 44.30661944525078}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\t\tif not self.state.is_attached_to_renderer then\n\t\tself.state.is_attached_to_renderer = true\n\t\tself.state.on_render = on_render\n\t\tself.state.renderer.attach_buffer(self)\n\tend\n\treturn self", "CodeBleu_score": 55.26415203726165}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tself.state.on_render = on_render\n\tself.state.renderer.add_buffer(self)\n\treturn self", "CodeBleu_score": 33.67211578892697}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tif self.is_attached_to_renderer then\n\t\treturn self\n\tend\n\n\tself.on_render = on_render\n\tself.is_attached_to_renderer = true\n\tself.renderer.add_buffer(self)\n\n\treturn self", "CodeBleu_score": 49.32789816955031}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\t\tif not self.valid or not callback or not self.filename then\n\t\treturn\n\tend\n\tself.watcher = Watcher(self.filename, function(err)\n\t\tif err then\n\t\t\terror(err)\n\t\tend\n\t\tcallback(self)\n\tend)", "CodeBleu_score": 34.667937060028954}, {"code": "function Buffer:watch(callback)\n\t\tif not self.filename then\n\t\treturn\n\tend\n\tif not callback then\n\t\treturn\n\tend\n\tlocal watcher = Watcher(self.filename, callback)\n\twatcher:start()", "CodeBleu_score": 28.737607324978832}, {"code": "function Buffer:watch(callback)\n\t\tif self.filename == nil then\n\t\terror('Cannot watch a buffer without a filename')\n\tend\n\n\tif self.watcher == nil then\n\t\tself.watcher = Watcher:new(self.filename)\n\tend\n\n\tself.watcher:watch(callback)", "CodeBleu_score": 30.14105818631578}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\t\tif self.hex then \n\t\treturn self.hex\n\tend \n\tlocal spec = self.spec\n\tif spec == 'fg' then \n\t\tspec = 'guifg'\n\telseif spec == 'bg' then \n\t\tspec = 'guibg'\n\tend \n\tlocal hl = vim.api.nvim_get_hl(spec)\n\tif hl and hl[1] then \n\t\tlocal color = hl[1][spec]\n\t\tif color then \n\t\t\tself.hex = self:rgb_to_hex(color)\n\t\t\treturn self.hex\n\t\tend \n\tend \n\treturn ''", "CodeBleu_score": 54.18657763400122}, {"code": "function Color:to_hex()\n\t\tif self.hex then\n\t\treturn self.hex\n\tend\n\n\tlocal spec = self.spec\n\tlocal fg = spec.foreground and 'fg' or 'bg'\n\tlocal color = vim.fn.synIDattr(spec.id, fg)\n\tif color ~= '' then\n\t\tlocal rgb = Rgb:from_hex(color)\n\t\tself.hex = rgb:to_hex()\n\t\treturn self.hex\n\tend\n\n\treturn ''", "CodeBleu_score": 53.28094235653946}, {"code": "function Color:to_hex()\n\t\tif self.hex then\n\t\treturn self.hex\n\tend\n\tlocal fg = self.spec.fg\n\tlocal bg = self.spec.bg\n\tlocal hl = self.spec.hl\n\tif not fg and not bg and not hl then\n\t\treturn\n\tend\n\tif hl then\n\t\tlocal hl_group = vim.fn.synIDattr(hl, 'name')\n\t\tif hl_group then\n\t\t\tlocal fg_color = vim.fn.synIDattr(hl, 'fg#')\n\t\t\tif fg_color then\n\t\t\t\tfg = Rgb.from_hex(fg_color)\n\t\t\tend\n\t\t\tlocal bg_color = vim.fn.synIDattr(hl, 'bg#')\n\t\t\tif bg_color then\n\t\t\t\tbg = Rgb.from_hex(bg_color)\n\t\t\tend\n\t\tend\n\tend\n\tlocal color = bg or fg\n\tif color then\n\t\tcolor = color:to_hex()\n\t\tself.hex = color\n\tend\n\treturn color", "CodeBleu_score": 44.92287475788208}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = buffer.get_line_count()\n\tfor i = 1, lines do\n\t\tlocal line = buffer[i]\n\t\tlocal start, _ = line:find(pattern)\n\t\tif start then\n\t\t\tbuffer:add_highlight(hl, start, start + #pattern)\n\t\tend\n\tend\n\treturn self", "CodeBleu_score": 38.08441477001915}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = buffer:get_lines()\n\tfor _, line in ipairs(lines) do\n\t\tfor match in line:gmatch(pattern) do\n\t\t\tbuffer:add_highlight(match, hl)\n\t\tend\n\tend", "CodeBleu_score": 27.183413163201003}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = vim.api.nvim_buf_get_lines(buffer, 0, -1, false)\n\tfor _, line in ipairs(lines) do\n\t\tlocal start = 1\n\t\twhile start <= #line do\n\t\t\tlocal match = line:find(pattern, start, true)\n\t\t\tif match then\n\t\t\t\tvim.api.nvim_buf_add_highlight(\n\t\t\t\t\tbuffer,\n\t\t\t\t\thl,\n\t\t\t\t\tmatch - 1,\n\t\t\t\t\tmatch,\n\t\t\t\t\t#pattern\n\t\t\t\t)\n\t\t\t\tstart = match + #pattern\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend", "CodeBleu_score": 41.125286212807765}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = buffer.id .. row .. col\n\tbuffer:add_extmark(row, col, pos, {\n\t\tid = id,\n\t\tvirt_text = { { text, hl } },\n\t\tvirt_text_pos = 'overlay',\n\t\tpriority = priority,\n\t})\n\treturn id", "CodeBleu_score": 63.706552749019494}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = (row + 1) * 10000 + col + 1\n\tbuffer:add_extmark(pos, id, row, col, {\n\t\tvirt_text = {{text, hl}},\n\t\tvirt_text_pos = pos,\n\t\tpriority = priority\n\t})\n\treturn id", "CodeBleu_score": 46.08685090813276}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = string.format('%s_%s_%s', buffer.number, row, col)\n\tbuffer.api.buf_set_extmark(buffer.number, self.ns_id, row, col, {\n\t\tid = id,\n\t\tvirt_text = { { text, hl } },\n\t\tvirt_text_pos = pos,\n\t\tpriority = priority\n\t})\n\treturn id", "CodeBleu_score": 66.12702397782367}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\t\tlocal lines = {}\n\tlocal line = ''\n\tfor c in output:gmatch('.') do\n\t\tif c == '", "CodeBleu_score": 10.46377699002651}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = ''\n\tfor i = 1, #output do\n\t\tlocal char = output:sub(i, i)\n\t\tif char == '", "CodeBleu_score": 22.187029572699466}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = ''\n\tfor char in output:gmatch('.') do\n\t\tif char == '", "CodeBleu_score": 7.54985768617675}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t\tif not self.watchers[path] then\n\t\tself.watchers[path] = loop.fs_watch(path, handler)\n\tend\n\treturn self.watchers[path]", "CodeBleu_score": 27.446417549378644}, {"code": "function Watcher:watch_file(path, handler)\n\t\tif self.watchers[path] == nil then\n\t\tself.watchers[path] = loop.new_fs_event()\n\t\tself.watchers[path]:start(path, handler)\n\tend\n\treturn self.watchers[path]", "CodeBleu_score": 34.93298838823805}, {"code": "function Watcher:watch_file(path, handler)\n\t\tif self.watchers[path] then\n\t\treturn self.watchers[path]\n\tend\n\tlocal watcher = loop.new_fs_event()\n\twatcher:start(path, handler)\n\tself.watchers[path] = watcher\n\treturn watcher", "CodeBleu_score": 38.31329448630635}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t\tif self._git_object:is_valid() then\n\t\tlocal hunks = self._git_object:hunks()\n\t\tif hunks then\n\t\t\tlocal hunk_lines = self:get_buffer_lines()\n\t\t\tlocal hunk_signs = self:get_buffer_signs()\n\t\t\tlocal hunk_sign_ids = self:get_buffer_sign_ids()\n\t\t\tlocal hunk_sign_priorities = self:get_buffer_sign_priorities()\n\t\t\tfor hunk in hunks:iter() do\n\t\t\t\tlocal hunk_start_line = hunk.start_line\n\t\t\t\tlocal hunk_end_line = hunk.end_line\n\t\t\t\tfor line in hunk_lines:iter(hunk_start_line, hunk_end_line) do\n\t\t\t\t\tlocal hunk_sign_id = hunk_signs:get(line)\n\t\t\t\t\tif hunk_sign_id == nil then\n\t\t\t\t\t\thunk_sign_id = hunk_sign_ids:get(line)\n\t\t\t\t\t\tif hunk_sign_id == nil then\n\t\t\t\t\t\t\thunk_sign_id = self:setup_sign(line, hunk.type)\n\t\t\t\t\t\tend\n\t\t\t\t\t\thunk_signs:set(line, hunk_sign_id)\n\t\t\t\t\tend\n\t\t\t\t\thunk_sign_priorities:set(line, hunk.priority)\n\t\t\t\tend\n\t\t\tend\n\t\t\tself:set_buffer_signs(hunk_signs)\n\t\t\tself:set_buffer_sign_priorities(hunk_sign_priorities)\n\t\t\treturn hunks\n\t\telse\n\t\t\treturn nil\n\t\tend\n\telse\n\t\treturn nil\n\tend", "CodeBleu_score": 36.716454287905165}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal lines = self:get_buffer_lines()\n\tif lines == nil then\n\t\treturn nil\n\tend\n\n\tlocal git_object = GitObject:new(self:get_git_object_type())\n\tif git_object:is_error() then\n\t\treturn git_object\n\tend\n\n\tlocal hunks = git_object:live_hunks(lines)\n\tif hunks == nil then\n\t\treturn nil\n\tend\n\n\tself:clear_signs()\n\tself:set_signs(hunks)\n\treturn hunks", "CodeBleu_score": 18.533097023953975}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal lines = self:get_buffer_lines()\n\tif lines == nil then\n\t\treturn lines\n\tend\n\n\tlocal git_object = GitObject(self.git_repo, self.file_path)\n\tlocal hunks = git_object:hunks(lines)\n\tif hunks == nil then\n\t\treturn hunks\n\tend\n\n\tlocal signs = Signs(self.bufnr)\n\tlocal signs_config = SignsConfig()\n\tfor _, hunk in pairs(hunks) do\n\t\tlocal hunk_start = hunk.start\n\t\tlocal hunk_end = hunk.end_\n\t\tlocal hunk_lines = hunk.lines\n\t\tlocal hunk_type = hunk.type\n\t\tlocal hunk_priority = hunk.priority\n\n\t\tif hunk_type == 'context' then\n\t\t\tsigns:add_sign(\n\t\t\t\tsigns_config.context_sign,\n\t\t\t\thunk_start,\n\t\t\t\thunk_end,\n\t\t\t\thunk_priority\n\t\t\t)\n\t\telseif hunk_type == 'delete' then\n\t\t\tsigns:add_sign(\n\t\t\t\tsigns_config.delete_sign,\n\t\t\t\thunk_start,\n\t\t\t\thunk_end,\n\t\t\t\thunk_priority\n\t\t\t)\n\t\telseif hunk_type == 'insert' then\n\t\t\tsigns:add_sign(\n\t\t\t\tsigns_config.insert_sign,\n\t\t\t\thunk_start,\n\t\t\t\thunk_end,\n\t\t\t\thunk_priority\n\t\t\t)\n\t\telseif hunk_type == 'replace' then\n\t\t\tsigns:add_sign(\n\t\t\t\tsigns_config.replace_sign,\n\t\t\t\thunk_start,\n\t\t\t\thunk_end,\n\t\t\t\thunk_priority\n\t\t\t)\n\t\telse\n\t\t\tsigns:add_sign(\n\t\t\t\tsigns_config.error_sign,\n\t\t\t\thunk_start,\n\t\t\t\thunk_end,\n\t\t\t\thunk_priority\n\t\t\t)\n\t\tend\n\tend\n\n\treturn hunks", "CodeBleu_score": 31.072684185595755}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal file_path = vim.fn.tempname()\n\tlocal file = io.open(file_path, 'w')\n\tfile:write(patch.content)\n\tfile:close()\n\tlocal cmd = self:get_command_prefix()\n\tcmd = cmd .. ' apply --cached --ignore-space-change --ignore-whitespace -'\n\tlocal _, err = self.loop:run_in_executor(\n\t\tfunction()\n\t\t\treturn vim.fn.system(cmd, file_path)\n\t\tend\n\t)\n\tvim.fn.delete(file_path)\n\treturn err", "CodeBleu_score": 45.665972592372185}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal temp_file = self.fs.create_temp_file()\n\tlocal temp_file_path = temp_file.path\n\tlocal err = self.fs.write_file(temp_file_path, patch.content)\n\tif err then\n\t\treturn err\n\tend\n\tlocal args = {\n\t\t'apply',\n\t\t'--cached',\n\t\ttemp_file_path,\n\t}\n\tlocal git = Git(self.git_obj.repo, self.git_obj.git_dir)\n\tlocal result = git.run(args)\n\tself.fs.delete_file(temp_file_path)\n\treturn result", "CodeBleu_score": 48.79956805474336}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal hunk = patch.hunks[1]\n\tlocal file_path = utils.get_temp_file_path()\n\tlocal file = io.open(file_path, 'w+')\n\tfile:write(hunk.content)\n\tfile:close()\n\tlocal err = self.git.stage_hunk(file_path, hunk.start, hunk.length)\n\tos.remove(file_path)\n\treturn err", "CodeBleu_score": 47.437303024864285}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\tOAuthRequest request = new OAuthRequest(Verb.POST, accessTokenUrl);\n\trequest.addBodyParameter(OAuthConstants.CLIENT_ID, apiKey);\n\trequest.addBodyParameter(OAuthConstants.CLIENT_SECRET, apiSecret);\n\trequest.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n\trequest.addBodyParameter(OAuthConstants.REDIRECT_URI, redirectUri);\n\trequest.addBodyParameter(OAuthConstants.GRANT_TYPE, \"authorization_code\");\n\trequest.addBodyParameter(OAuthConstants.TOKEN, requestToken.getValue());\n\trequest.addBodyParameter(OAuthConstants.TOKEN_TYPE, requestToken.getType());\n\tResponse response = request.send();\n\treturn accessTokenExtractor.extract(response.getBody());\n}", "CodeBleu_score": 50.21760972246061}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\tOAuthRequest request = new OAuthRequest(Verb.POST, config.getAccessTokenEndpoint());\n\trequest.addBodyParameter(OAuthConstants.CLIENT_ID, config.getApiKey());\n\trequest.addBodyParameter(OAuthConstants.CLIENT_SECRET, config.getApiSecret());\n\trequest.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n\trequest.addBodyParameter(OAuthConstants.REDIRECT_URI, config.getCallback());\n\trequest.addBodyParameter(OAuthConstants.GRANT_TYPE, OAuthConstants.AUTHORIZATION_CODE);\n\tconfig.getApi().getAccessTokenExtractor().extract(request, this.getResponse(request));\n\treturn request.getToken();\n}", "CodeBleu_score": 42.337737122411795}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\tOAuthRequest request = new OAuthRequest(Verb.POST, accessTokenUrl);\n\trequest.addBodyParameter(OAuthConstants.CLIENT_ID, clientId);\n\trequest.addBodyParameter(OAuthConstants.CLIENT_SECRET, clientSecret);\n\trequest.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n\trequest.addBodyParameter(OAuthConstants.REDIRECT_URI, redirectUri);\n\trequest.addBodyParameter(OAuthConstants.GRANT_TYPE, \"authorization_code\");\n\trequest.addBodyParameter(OAuthConstants.STATE, state);\n\trequest.addBodyParameter(OAuthConstants.TOKEN, requestToken.getValue());\n\trequest.addBodyParameter(OAuthConstants.TOKEN_TYPE, \"bearer\");\n\trequest.addBodyParameter(\"scope\", \"repo\");\n\trequest.addBodyParameter(\"note\", \"jgitver-maven-plugin\");\n\trequest.addBodyParameter(\"note_url\", \"https://github.com/jgitver/jgitver-maven-plugin\");\n\trequest.addBodyParameter(\"client_id\", clientId);\n\trequest.addBodyParameter(\"client_secret\", clientSecret);\n\trequest.addBodyParameter(\"fingerprint\", fingerprint);\n\trequest.addBodyParameter(\"user_id\", userId);\n\trequest.addBodyParameter(\"client_id\", clientId);\n\trequest.addBodyParameter(\"client_secret\", clientSecret);\n\trequest.addBodyParameter(\"fingerprint\", fingerprint);\n\trequest.addBodyParameter(\"user_id\", userId);\n\trequest.addHeader(\"Accept\", \"application/json\");\n\trequest.addHeader(\"Content-Type\", \"application/json\");\n\trequest.addHeader(\"User-Agent\", \"jgitver-maven-plugin\");\n\tResponse response = client.execute(request);\n\treturn new DefaultApi20().getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 43.74020974472971}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t numpy.set_log_level(Level.FINEST)\n    StandardUsernameCredentials credentials = getCredentials(host)\n    if (credentials != null) {\n        context.setCredentialsProvider(buildCredentialsProvider(credentials))\n        context.setAuthCache(buildAuthCache(host, credentials))\n        logger.fine(\"Added host \" + host.toURI() + \" to the authentication cache\")\n    }\n}", "CodeBleu_score": 32.65368272605331}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t numpy.set_printoptions(threshold=numpy.nan)\n    if (host == null) {\n        throw new IllegalArgumentException(\"Host cannot be null\");\n    }\n    if (context == null) {\n        throw new IllegalArgumentException(\"Context cannot be null\");\n    }\n\n    StandardUsernameCredentials credentials = getCredentials();\n    if (credentials == null) {\n        return;\n    }\n\n    context.setCredentialsProvider(getCredentialsProvider(credentials));\n\n    AuthCache authCache = new BasicAuthCache();\n    authCache.put(host, new BasicScheme());\n    context.setAuthCache(authCache);\n\n    LOGGER.log(Level.INFO, \"Configured context with authentication details for {0}\", host.getHostName());\n}", "CodeBleu_score": 47.35573981598991}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t numpy.ndarray\n\t// Get the credentials from the Jenkins credentials store\n\tStandardUsernameCredentials credentials = CredentialsMatchers.firstOrNull(\n\t\tCredentialsProvider.lookupCredentials(StandardUsernameCredentials.class, Jenkins.getInstance()),\n\t\tCredentialsMatchers.withId(BitbucketAuthenticator.BITBUCKET_API_USERNAME)\n\t);\n\tif (credentials == null) {\n\t\tthrow new RuntimeException(\"Bitbucket credentials could not be found. Please add a username and password for the Bitbucket API user in Jenkins credentials.\");\n\t}\n\tif (!(credentials instanceof StandardUsernamePasswordCredentials)) {\n\t\tthrow new RuntimeException(\"Bitbucket credentials are not a username/password combination. Please add a username and password for the Bitbucket API user in Jenkins credentials.\");\n\t}\n\tStandardUsernamePasswordCredentials usernamePasswordCredentials = (StandardUsernamePasswordCredentials) credentials;\n\n\t// Create a credentials provider and add the credentials to it\n\tCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n\tcredentialsProvider.setCredentials(\n\t\tnew AuthScope(host.getHostName(), host.getPort()),\n\t\tnew UsernamePasswordCredentialsImpl(\n\t\t\tusernamePasswordCredentials.getUsername(),\n\t\t\tusernamePasswordCredentials.getPassword().getPlainText()\n\t\t)\n\t);\n\n\t// Create an authentication cache and add the host to it\n\tAuthCache authCache = new BasicAuthCache();\n\tauthCache.put(host, new BasicScheme());\n\n\t// Assign the credentials and cache to the context\n\tcontext.setCredentialsProvider(credentialsProvider);\n\tcontext.setAuthCache(authCache);\n\n\t// Log the action\n\tLogger logger = Logger.getLogger(getClass().getName());\n\tlogger.log(Level.INFO, \"Added Bitbucket host {0} to authentication cache\", host);\n}", "CodeBleu_score": 54.318713086613826}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t\tAvatarCache avatarCache = AvatarCache.getInstance();\n\tif (avatarCache == null) {\n\t\tthrow new RuntimeException(\"AvatarCache is not configured\");\n\t}\n\tString cacheKey = avatarCache.getKey(source);\n\tavatarCache.seed(cacheKey, source);\n\ttry {\n\t\treturn Jenkins.get().getRootUrl() + \"avatar-cache/\" + URLEncoder.encode(cacheKey, \"UTF-8\") + \"/\" + size;\n\t} catch (UnsupportedEncodingException e) {\n\t\tthrow new RuntimeException(e);\n\t}\n}", "CodeBleu_score": 35.56130756673502}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t\tAvatarCache avatarCache = AvatarCache.getInstance();\n\tif (avatarCache == null) {\n\t\tthrow new Error(\"AvatarCache is not configured.\");\n\t}\n\tString key = source.getKey();\n\tavatarCache.seed(key);\n\tString url = Jenkins.get().getRootUrl();\n\tif (url == null) {\n\t\tthrow new Error(\"Jenkins root URL is not configured.\");\n\t}\n\ttry {\n\t\treturn url + \"/avatar-cache/\" + URLEncoder.encode(key, \"UTF-8\") + \"/\" + size;\n\t} catch (UnsupportedEncodingException e) {\n\t\tthrow new Error(\"UTF-8 encoding is not supported.\", e);\n\t}\n}", "CodeBleu_score": 41.041444195842644}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t\tAvatarCache avatarCache = AvatarCache.get();\n\tif (avatarCache == null) {\n\t\tthrow new AvatarCacheException(\"AvatarCache is null\");\n\t}\n\tString key = avatarCache.getKey(source, size);\n\tavatarCache.seed(key);\n\tString url = Jenkins.get().getRootUrl() + \"avatar-cache/\" + encode(key) + \"/\" + size;\n\treturn url;\n}", "CodeBleu_score": 34.44892461170402}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t\tif (source == null) {\n\t\tthrow new IllegalArgumentException(\"source cannot be null\");\n\t}\n\tif (image == null) {\n\t\tthrow new IllegalArgumentException(\"image cannot be null\");\n\t}\n\tif (lastModified < 0) {\n\t\tlastModified = System.currentTimeMillis();\n\t}\n\tthis.source = source;\n\tthis.image = image;\n\tthis.lastModified = lastModified;\n}", "CodeBleu_score": 33.408120561238604}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t\tthis.source = source;\n\tif (image.getWidth() > 128 || image.getHeight() > 128) {\n\t\timage = scaleImage(image);\n\t}\n\tthis.image = image;\n\tif (lastModified < 0) {\n\t\tlastModified = System.currentTimeMillis();\n\t}\n\tthis.lastModified = lastModified;\n}", "CodeBleu_score": 47.71431794437839}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t\tthis.source = source;\n\tthis.image = image;\n\tthis.lastModified = Math.max(lastModified, System.currentTimeMillis());\n}", "CodeBleu_score": 30.020698496402353}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false;\n\t}\n\ttry {\n\t\tif (future.isDone()) {\n\t\t\tAvatarCacheSource.AvatarImage image = future.get();\n\t\t\tif (image != null) {\n\t\t\t\tavatarCache.put(hash, image);\n\t\t\t\tlastModified = image.lastModified;\n\t\t\t}\n\t\t\tfuture = null;\n\t\t\treturn false;\n\t\t}\n\t} catch (InterruptedException | ExecutionException e) {\n\t\tLOGGER.log(Level.WARNING, \"Exception while checking pending avatar cache entry\", e);\n\t}\n\treturn true;\n}", "CodeBleu_score": 51.52329494181353}, {"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false;\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\tAvatarCacheEntry entry = future.get();\n\t\t\tif (entry != null) {\n\t\t\t\tentry.image = createAvatar(entry.text);\n\t\t\t\tentry.lastModified = System.currentTimeMillis();\n\t\t\t\tfuture = null;\n\t\t\t}\n\t\t} catch (InterruptedException e) {\n\t\t\tLOGGER.log(Level.WARNING, \"Interrupted while waiting for avatar cache entry to complete\", e);\n\t\t} catch (ExecutionException e) {\n\t\t\tLOGGER.log(Level.WARNING, \"Exception while waiting for avatar cache entry to complete\", e);\n\t\t}\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 49.0450256078128}, {"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false;\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\tAvatarCacheSource.AvatarCacheEntry entry = future.get();\n\t\t\tif (entry != null) {\n\t\t\t\tentry.image = createImage(entry.avatar);\n\t\t\t\tentry.lastModified = System.currentTimeMillis();\n\t\t\t\tfuture = null;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} catch (InterruptedException e) {\n\t\t\tLOGGER.log(Level.WARNING, \"AvatarCacheSource.AvatarCacheEntry.pending() interrupted\", e);\n\t\t} catch (ExecutionException e) {\n\t\t\tLOGGER.log(Level.WARNING, \"AvatarCacheSource.AvatarCacheEntry.pending() execution exception\", e);\n\t\t}\n\t}\n\treturn true;\n}", "CodeBleu_score": 49.57040549971405}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\tAvatarCacheSource.AvatarImage image = AvatarCacheSource.getInstance().getAvatarImage(node);\n\tif (image == null) {\n\t\trsp.sendError(404);\n\t\treturn;\n\t}\n\tif (image.isExpired()) {\n\t\trsp.sendError(404);\n\t\treturn;\n\t}\n\tif (req.checkIfModified(image.getModificationDate())) {\n\t\trsp.setStatus(304);\n\t\treturn;\n\t}\n\tif (image.getImage() != null) {\n\t\tif (image.getContentType() != null) {\n\t\t\trsp.setContentType(image.getContentType());\n\t\t}\n\t\tif (image.getCharset() != null) {\n\t\t\trsp.setCharacterEncoding(image.getCharset());\n\t\t}\n\t\tif (image.getCacheControl() != null) {\n\t\t\trsp.setHeader(\"Cache-Control\", image.getCacheControl());\n\t\t}\n\t\tif (image.getEtag() != null) {\n\t\t\trsp.setHeader(\"ETag\", image.getEtag());\n\t\t}\n\t\tif (image.getLastModified() != null) {\n\t\t\trsp.setHeader(\"Last-Modified\", image.getLastModified());\n\t\t}\n\t\tif (image.getExpires() != null) {\n\t\t\trsp.setHeader(\"Expires\", image.getExpires());\n\t\t}\n\t\tif (image.getPragma() != null) {\n\t\t\trsp.setHeader(\"Pragma\", image.getPragma());\n\t\t}\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tImageIO.write(image.getImage(), \"PNG\", baos);\n\t\trsp.getOutputStream().write(baos.toByteArray());\n\t\trsp.getOutputStream().flush();\n\t} else {\n\t\trsp.sendError(404);\n\t}\n}", "CodeBleu_score": 37.488389321075566}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\tAvatarImage image = AvatarCacheSource.get(node);\n\tif (image == null) {\n\t\trsp.sendError(404, \"Avatar not found\");\n\t\treturn;\n\t}\n\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\tImageIO.write(image.image, \"PNG\", baos);\n\trsp.setHeader(\"Expires\", \"Sat, 26 Jul 1997 05:00:00 GMT\");\n\trsp.setHeader(\"Cache-Control\", \"max-age=31536000\");\n\trsp.setHeader(\"Content-Type\", \"image/png\");\n\trsp.getOutputStream().write(baos.toByteArray());\n}", "CodeBleu_score": 37.200984003600205}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\tAvatarImage image = AvatarCacheSource.getAvatarImage(req, node);\n\tif (image == null) {\n\t\trsp.sendError(404, \"Avatar not found\");\n\t\treturn;\n\t}\n\n\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\ttry {\n\t\tImageIO.write(image.getImage(), \"PNG\", baos);\n\t} catch (IOException e) {\n\t\trsp.sendError(500, \"Failed to write image\");\n\t\treturn;\n\t}\n\n\trsp.setHeader(\"Expires\", \"Fri, 01 Jan 1990 00:00:00 GMT\");\n\trsp.setHeader(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n\trsp.setHeader(\"Pragma\", \"no-cache\");\n\trsp.setHeader(\"Content-Type\", \"image/png\");\n\trsp.setContentLength(baos.size());\n\trsp.getOutputStream().write(baos.toByteArray());\n}", "CodeBleu_score": 36.14335255856278}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t\tthis.enableCache = enableCache;\n\tthis.teamCacheDuration = teamCacheDuration;\n\tthis.repositoriesCacheDuration = repositoriesCacheDuration;\n\tthis.owner = owner;\n\tthis.projectKey = projectKey;\n\tthis.repositoryName = repositoryName;\n\tthis.authenticator = authenticator;\n\tthis.logger = Logger.getLogger(BitbucketCloudApiClient.class.getName());\n\tthis.httpclient = this.buildHttpClient();\n}", "CodeBleu_score": 26.87194311296086}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t\tthis.enableCache = enableCache;\n\tthis.teamCacheDuration = teamCacheDuration;\n\tthis.repositoriesCacheDuration = repositoriesCacheDuration;\n\tthis.owner = owner;\n\tthis.projectKey = projectKey;\n\tthis.repositoryName = repositoryName;\n\tthis.authenticator = authenticator;\n\tthis.httpClient = HttpClientBuilder.create()\n\t\t.setKeepAliveStrategy((response, context) -> 1000 * 60 * 5)\n\t\t.setConnectionManager(new PoolingHttpClientConnectionManager(60, TimeUnit.SECONDS))\n\t\t.setRetryHandler(new StandardHttpRequestRetryHandler(3, true))\n\t\t.setDefaultSocketConfig(SocketConfig.custom()\n\t\t\t.setSoTimeout(10, TimeUnit.SECONDS)\n\t\t\t.build())\n\t\t.build();\n\tif (authenticator != null) {\n\t\tHttpHost targetHost = new HttpHost(authenticator.getHost(), authenticator.getPort(), \"https\");\n\t\tAuthCache authCache = new BasicAuthCache();\n\t\tBasicScheme basicAuth = new BasicScheme();\n\t\tauthCache.put(targetHost, basicAuth);\n\t\tCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n\t\tcredentialsProvider.setCredentials(\n\t\t\tnew AuthScope(targetHost.getHostName(), targetHost.getPort()),\n\t\t\tnew UsernamePasswordCredentials(authenticator.getUsername(), authenticator.getPassword()));\n\t\thttpClient = HttpClientBuilder.create()\n\t\t\t.setKeepAliveStrategy((response, context) -> 1000 * 60 * 5)\n\t\t\t.setConnectionManager(new PoolingHttpClientConnectionManager(60, TimeUnit.SECONDS))\n\t\t\t.setRetryHandler(new StandardHttpRequestRetryHandler(3, true))\n\t\t\t.setDefaultSocketConfig(SocketConfig.custom()\n\t\t\t\t.setSoTimeout(10, TimeUnit.SECONDS)\n\t\t\t\t.build())\n\t\t\t.setDefaultCredentialsProvider(credentialsProvider)\n\t\t\t.build();\n\t\thttpClientContext = HttpClientContext.create();\n\t\thttpClientContext.setAuthCache(authCache);\n\t}\n\tif (ProxyConfiguration.load().getNoProxyHost()) {\n\t\tLOGGER.log(Level.INFO, \"Using proxy settings from global Jenkins settings\");\n\t\tHttpHost proxy = new HttpHost(ProxyConfiguration.load().getNoProxyHost(), ProxyConfiguration.load().getNoProxyPort(), \"http\");\n\t", "CodeBleu_score": 41.742575772668886}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t\tthis.owner = owner;\n\tthis.projectKey = projectKey;\n\tthis.repositoryName = repositoryName;\n\tthis.enableCache = enableCache;\n\tthis.teamCacheDuration = teamCacheDuration;\n\tthis.repositoriesCacheDuration = repositoriesCacheDuration;\n\tthis.authenticator = authenticator;\n\tthis.logger = Logger.getLogger(BitbucketCloudApiClient.class.getName());\n\tthis.logger.setLevel(Level.FINEST);\n\tthis.logger.fine(\"Creating BitbucketApiClient for \" + owner + \"/\" + projectKey + \"/\" + repositoryName);\n\t// set up cache expiration for teams and repositories if caching is enabled\n\tif (enableCache) {\n\t\tthis.teamCache = CacheBuilder.newBuilder().expireAfterWrite(teamCacheDuration, TimeUnit.MINUTES).build(CacheLoader.from(this::getTeams));\n\t\tthis.repositoriesCache = CacheBuilder.newBuilder().expireAfterWrite(repositoriesCacheDuration, TimeUnit.MINUTES).build(CacheLoader.from(this::getRepositories));\n\t}\n\t// set up connection manager with keep-alive strategy\n\tthis.connectionManager = new PoolingHttpClientConnectionManager();\n\tthis.connectionManager.setDefaultSocketConfig(SocketConfig.custom().setSoTimeout((int) MINUTES.toMillis(1)).build());\n\tthis.connectionManager.setMaxTotal(20);\n\tthis.connectionManager.setDefaultMaxPerRoute(20);\n\t// set up retry handler\n\tthis.retryHandler = new StandardHttpRequestRetryHandler(3, true);\n\t// set up proxy parameters\n\tProxyConfiguration proxyConfig = Jenkins.get().proxy;\n\tif (proxyConfig != null) {\n\t\tString proxyHost = proxyConfig.name;\n\t\tint proxyPort = proxyConfig.port;\n\t\tif (StringUtils.isNotBlank(proxyHost)) {\n\t\t\tthis.logger.fine(\"Using proxy host \" + proxyHost + \" and port \" + proxyPort);\n\t\t\tHttpHost proxy = new HttpHost(proxyHost, proxyPort);\n\t\t\tthis.connectionManager.setProxy(proxy);\n\t\t}\n\t}\n\t// build HTTP client\n\tHttpClientBuilder builder = HttpClientBuilder.create();\n\tbuilder.setConnectionManager(this.connectionManager);\n\tbuilder.setRetryHandler(this.retryHandler);\n\t// set up authentication if provided", "CodeBleu_score": 41.98463382589099}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\tif (pullRequest == null) {\n\t\treturn;\n\t}\n\n\t// If the source branch is not in the cache, then we need to get it.\n\tBitbucketCloudBranch sourceBranch = getSourceBranch(pullRequest);\n\tif (sourceBranch != null) {\n\t\tLOGGER.log(Level.FINE, \"Source branch {0} found in cache\", sourceBranch.getName());\n\t\t// If the source branch is in the cache, then we need to set up a commit closure for it.\n\t\tsetupCommitClosureForBranch(sourceBranch);\n\t} else {\n\t\tLOGGER.log(Level.FINE, \"Source branch {0} not found in cache\", pullRequest.getSource().getBranch().getName());\n\t\t// If the source branch is not in the cache, then we need to get it.\n\t\ttry {\n\t\t\tsourceBranch = getSourceBranch(pullRequest);\n\t\t\tif (sourceBranch != null) {\n\t\t\t\tLOGGER.log(Level.FINE, \"Source branch {0} found in cache\", sourceBranch.getName());\n\t\t\t\t// If the source branch is in the cache, then we need to set up a commit closure for it.\n\t\t\t\tsetupCommitClosureForBranch(sourceBranch);\n\t\t\t} else {\n\t\t\t\tLOGGER.log(Level.FINE, \"Source branch {0} not found in cache\", pullRequest.getSource().getBranch().getName());\n\t\t\t}\n\t\t} catch (BitbucketException e) {\n\t\t\tLOGGER.log(Level.WARNING, \"Error getting source branch\", e);\n\t\t}\n\t}\n\n\t// If the destination branch is not in the cache, then we need to get it.\n\tBitbucketCloudBranch destinationBranch = getDestinationBranch(pullRequest);\n\tif (destinationBranch != null) {\n\t\tLOGGER.log(Level.FINE, \"Destination branch {0} found in cache\", destinationBranch.getName());\n\t\t// If the destination branch is in the cache, then we need to set up a commit closure for it.\n\t\tsetupCommitClosureForBranch(destinationBranch);\n\t} else {\n\t\tLOGGER.log(Level.FINE, \"Destination branch {0} not found in cache\", pullRequest.getDestination().getBranch().getName());\n\t\t// If the destination branch is not in the cache, then we need to get it.\n\t\ttry {\n\t\t", "CodeBleu_score": 36.42882426436728}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\tif (pullRequest.getDestination().getCommit() != null) {\n\t\t// If the destination branch is not null, then we can set up a closure for it.\n\t\tString destinationBranch = pullRequest.getDestination().getBranch().getFullName();\n\t\tString destinationCommit = pullRequest.getDestination().getCommit().getHash();\n\t\tString destinationRepo = pullRequest.getDestination().getRepository().getFullName();\n\t\tString destinationRepoOwner = pullRequest.getDestination().getRepository().getOwner().getUsername();\n\t\tString destinationRepoSlug = pullRequest.getDestination().getRepository().getSlug();\n\t\tString destinationRepoApiUrl = pullRequest.getDestination().getRepository().getLinks().getSelf().getHref();\n\t\tString destinationRepoApiUrlOwner = pullRequest.getDestination().getRepository().getOwner().getLinks().getSelf().getHref();\n\t\tString destinationRepoApiUrlRepo = pullRequest.getDestination().getRepository().getLinks().getSelf().getHref();\n\t\tString destinationRepoApiUrlCommits = pullRequest.getDestination().getRepository().getLinks().getCommits().getHref();\n\t\tString destinationRepoApiUrlCommit = pullRequest.getDestination().getRepository().getLinks().getCommit().getHref();\n\t\tString destinationRepoApiUrlCommitStatuses = pullRequest.getDestination().getRepository().getLinks().getCommitStatuses().getHref();\n\t\tString destinationRepoApiUrlCommitStatus = pullRequest.getDestination().getRepository().getLinks().getCommitStatus().getHref();\n\t\tString destinationRepoApiUrlBranch = pullRequest.getDestination().getBranch().getLinks().getSelf().getHref();\n\t\tString destinationRepoApiUrlBranchCommits = pullRequest.getDestination().getBranch().getLinks().getCommits().getHref();\n\t\tString destinationRepoApiUrlBranchCommit = pullRequest.getDestination().getBranch().getLinks().getCommit().getHref();\n\t\tString destinationRepoApiUrlBranchStatus = pullRequest.getDestination().getBranch().getLinks().getStatus().getHref();\n\t\tString destinationRepoApiUrlBranchStatuses = pullRequest.getDestination().getBranch().getLinks().getStatuses().getHref();\n\t\tString destinationRepoApiUrlBranchPullRequest = pullRequest.getDestination().getBranch().getLinks().getPullrequest().getHref();\n\t\tString destinationRepoApiUrlBranchPullRequests = pullRequest.getDestination().getBranch().getLinks().getPullrequests().getHref();\n\t", "CodeBleu_score": 29.3601648545307}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\tif (pullRequest == null) {\n\t\treturn;\n\t}\n\tString sourceBranch = pullRequest.getSourceBranch();\n\tif (sourceBranch != null) {\n\t\ttry {\n\t\t\tString sourceRepositoryOwner = pullRequest.getSourceRepositoryOwner();\n\t\t\tString sourceRepositorySlug = pullRequest.getSourceRepositorySlug();\n\t\t\tString sourceBranchName = pullRequest.getSourceBranchName();\n\t\t\tString sourceCommit = pullRequest.getSourceCommit();\n\t\t\tif (sourceCommit != null) {\n\t\t\t\tSCMHead head = new BitbucketSCMHead(sourceRepositoryOwner, sourceRepositorySlug, sourceBranchName, sourceCommit);\n\t\t\t\tSCMRevision revision = new BitbucketSCMRevision(sourceCommit);\n\t\t\t\tSCMSource source = new BitbucketSCMSource(sourceRepositoryOwner, sourceRepositorySlug, sourceRepositoryOwner + \"/\" + sourceRepositorySlug, credentialsId, \"\", \"*\", \"\", \"\", \"\", false);\n\t\t\t\tSCMSourceRetriever retriever = source.newRetriever(head, revision);\n\t\t\t\tretriever.setCredentialsId(credentialsId);\n\t\t\t\tSCMFile scmFile = retriever.retrieve(head, revision);\n\t\t\t\tif (scmFile != null) {\n\t\t\t\t\thead.setCommit(scmFile.lastModified());\n\t\t\t\t}\n\t\t\t\thead.setCommit(sourceCommit);\n\t\t\t\thead.setPullRequestId(pullRequest.getId());\n\t\t\t\thead.setOrigin(new BitbucketSCMHeadOrigin(sourceRepositoryOwner, sourceRepositorySlug, sourceBranchName));\n\t\t\t\thead.setAuthor(pullRequest.getSourceAuthor());\n\t\t\t\thead.setComment(pullRequest.getSourceCommitMessage());\n\t\t\t\thead.setRemote(remote);\n\t\t\t\thead.setCredentialsId(credentialsId);\n\t\t\t\thead.setOwner(sourceRepositoryOwner);\n\t\t\t\thead.setRepository(sourceRepositorySlug);\n\t\t\t\thead.setBranchName(sourceBranchName);\n\t\t\t\thead.setHash(sourceCommit);\n\t\t\t\thead.setMergeTarget(pullRequest.getDestinationCommit());\n\t\t\t\thead.setMergeTarget(pullRequest.getDestinationCommit());\n\t\t\t\thead.setMergeTarget(pullRequest.getDestinationCommit());\n\t\t\t\thead.setMergeTarget(pullRequest.getDestinationCommit());\n\t\t\t\thead.setMergeTarget(pullRequest.getDestinationCommit());\n\t\t\t\thead.setMergeTarget(pullRequest.getDestinationCommit());\n\t\t\t\thead.setMergeTarget(pullRequest.getDestinationCommit());\n\t\t\t\thead.setMergeTarget(", "CodeBleu_score": 27.792002584875796}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t\tJenkinsLocationConfiguration locationConfiguration = JenkinsLocationConfiguration.get();\n\tString rootURL = locationConfiguration.getUrl();\n\tif (rootURL == null) {\n\t\tthrow new IllegalStateException(\"Jenkins URL is null\");\n\t}\n\treturn DisplayURLProvider.get().getRunURL(build);\n}", "CodeBleu_score": 58.15335732579714}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t\tJenkinsLocationConfiguration locationConfiguration = JenkinsLocationConfiguration.get();\n\tif (locationConfiguration == null) {\n\t\tthrow new IllegalStateException(\"JenkinsLocationConfiguration is null\");\n\t}\n\tURL url = locationConfiguration.getUrl();\n\tif (url == null) {\n\t\tthrow new IllegalStateException(\"JenkinsLocationConfiguration.getUrl() is null\");\n\t}\n\treturn DisplayURLProvider.get().getRunURL(build);\n}", "CodeBleu_score": 53.606732156144886}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t\tJenkinsLocationConfiguration jenkinsLocationConfiguration = JenkinsLocationConfiguration.get();\n\tif (jenkinsLocationConfiguration == null) {\n\t\tthrow new IllegalStateException(\"Jenkins location configuration is null.\");\n\t}\n\tURL jenkinsRootURL = jenkinsLocationConfiguration.getUrl();\n\tif (jenkinsRootURL == null) {\n\t\tthrow new IllegalStateException(\"Jenkins root URL is null.\");\n\t}\n\treturn DisplayURLProvider.get().getRunURL(build);\n}", "CodeBleu_score": 53.11198071958759}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\ttry {\n\t\tURL jenkinsURL = new URL(url);\n\t\tString host = jenkinsURL.getHost();\n\t\tif (host.equals(\"localhost\") || host.equals(\"unconfigured-jenkins-location\")) {\n\t\t\tthrow new IllegalStateException(\"The Jenkins URL cannot use \\\"localhost\\\" or \\\"unconfigured-jenkins-location\\\" as the host.\");\n\t\t}\n\t\tif (bitbucket instanceof BitbucketCloudApiClient) {\n\t\t\tif (host.contains(\".\")) {\n\t\t\t\treturn url;\n\t\t\t}\n\t\t\tthrow new IllegalStateException(\"The Jenkins URL must be a fully qualified URL for Bitbucket Cloud API clients.\");\n\t\t}\n\t\treturn url;\n\t} catch (MalformedURLException e) {\n\t\tthrow new IllegalStateException(\"The Jenkins URL is malformed. Please check the value of the Jenkins Location Configuration.\");\n\t}\n}", "CodeBleu_score": 57.22631448227489}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\tif (url.contains(\"localhost\") || url.contains(\"unconfigured-jenkins-location\")) {\n\t\tthrow new IllegalStateException(\"Jenkins URL cannot contain localhost or unconfigured-jenkins-location\");\n\t}\n\n\ttry {\n\t\tURL urlObj = new URL(url);\n\t\tif (bitbucket instanceof BitbucketCloudApiClient) {\n\t\t\tif (!urlObj.getHost().contains(\".\")) {\n\t\t\t\tthrow new IllegalStateException(\"Jenkins URL must be a fully qualified URL\");\n\t\t\t}\n\t\t}\n\t\treturn url;\n\t} catch (MalformedURLException e) {\n\t\tthrow new IllegalStateException(\"Jenkins URL is malformed\");\n\t}\n}", "CodeBleu_score": 52.50764216270469}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\ttry {\n\t\tURL parsedURL = new URL(url);\n\t\tString host = parsedURL.getHost();\n\t\tif (host == null) {\n\t\t\tthrow new IllegalStateException(\"Malformed URL: \" + url);\n\t\t}\n\t\tif (host.equals(\"localhost\") || host.equals(\"unconfigured-jenkins-location\")) {\n\t\t\tthrow new IllegalStateException(\"The Jenkins URL cannot be localhost or the default Jenkins URL\");\n\t\t}\n\t\tif (bitbucket instanceof BitbucketCloudApiClient) {\n\t\t\tif (host.contains(\":\")) {\n\t\t\t\tthrow new IllegalStateException(\"The Jenkins URL cannot contain a port\");\n\t\t\t}\n\t\t\tif (host.contains(\"/\")) {\n\t\t\t\tthrow new IllegalStateException(\"The Jenkins URL cannot contain a path\");\n\t\t\t}\n\t\t}\n\t\treturn url;\n\t} catch (MalformedURLException e) {\n\t\tthrow new IllegalStateException(\"Malformed URL: \" + url);\n\t}\n}", "CodeBleu_score": 57.44932943614776}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\tif (source.shouldNotify()) {\n\t\tSCMRevision revision = build.getAction(SCMRevisionAction.class).getRevision();\n\t\tString revisionType = revision.getType();\n\t\tString buildKey = source.getBuildKey(build);\n\t\tString buildName = build.getDisplayName();\n\t\tString buildUrl = build.getAbsoluteUrl();\n\t\tString projectName = source.getProject();\n\t\tString repoName = source.getRepository();\n\t\tString commitHash = revision.getHash();\n\t\tString commitMessage = revision.getHead().getShortMessage();\n\t\tString commitAuthor = revision.getHead().getAuthor().getDisplayName();\n\t\tString commitUrl = DisplayURLProvider.get().getRunURL(build, commitHash);\n\t\tString serverUrl = source.getServerUrl();\n\t\tString serverName = serverUrl.substring(8, serverUrl.length() - 1);\n\t\tString serverUrlWithProject = serverUrl + projectName + \"/\";\n\t\tString serverUrlWithRepo = serverUrlWithProject + repoName + \"/\";\n\t\tString serverUrlWithCommit = serverUrlWithRepo + \"commits/\" + commitHash + \"/\";\n\n\t\tlistener.getLogger().println(\"Sending build status notifications for \" + buildName + \" to Bitbucket\");\n\n\t\tif (revisionType.equals(\"Branch\")) {\n\t\t\tBitbucketApi api = new BitbucketCloudApiClient(serverUrl, source.getCredentialsId(), listener);\n\t\t\tBitbucketBuildStatus buildStatus = new BitbucketBuildStatus(commitHash, buildName, buildUrl, Result.FAILURE.toString(), commitAuthor, commitMessage, serverName, serverUrlWithCommit);\n\t\t\tapi.sendBuildStatus(projectName, repoName, buildKey, buildStatus);\n\t\t} else if (revisionType.equals(\"Pull Request\")) {\n\t\t\tboolean shareBuildKey = source.isShareBuildKey();\n\t\t\tif (shareBuildKey) {\n\t\t\t\tBitbucketApi api = new BitbucketCloudApiClient(serverUrl, source.getCredentialsId(), listener);\n\t\t\t\tBitbucketBuildStatus buildStatus = new BitbucketBuildStatus(commitHash, buildName, buildUrl, Result.FAILURE.toString(), commitAuthor, commitMessage, serverName, serverUrlWithCommit);\n\t\t\t\tapi.sendBuildStatus(projectName, repoName, buildKey, buildStatus);\n\t\t\t} else {\n\t\t\t\tString prNumber = buildKey.substring(1, build", "CodeBleu_score": 33.99982685001718}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\tif (source.shouldNotifyBitbucket()) {\n\t\tif (source.isPRBuild()) {\n\t\t\tlistener.getLogger().println(\"Sending Bitbucket PR build status notifications\");\n\t\t\tString buildKey = getBuildKey(build, listener);\n\t\t\tString buildName = build.getParent().getFullName();\n\t\t\tString buildStatus = getBuildStatus(build);\n\t\t\tString url = getBuildUrl(build);\n\t\t\tString buildDescription = build.getDescription();\n\t\t\tString buildResultKey = getBuildResultKey(build);\n\t\t\tString commitHash = getCommitHash(build, listener);\n\t\t\tString commitMessage = getCommitMessage(build, listener);\n\t\t\tString commitAuthor = getCommitAuthor(build, listener);\n\t\t\tString commitTimestamp = getCommitTimestamp(build, listener);\n\t\t\tString commitUrl = getCommitUrl(build, listener);\n\t\t\tString prUrl = getPullRequestUrl(build, listener);\n\t\t\tString prTitle = getPullRequestTitle(build, listener);\n\t\t\tString prAuthor = getPullRequestAuthor(build, listener);\n\t\t\tString prAuthorUrl = getPullRequestAuthorUrl(build, listener);\n\t\t\tString prDescription = getPullRequestDescription(build, listener);\n\t\t\tString prDestinationBranch = getPullRequestDestinationBranch(build, listener);\n\t\t\tString prSourceBranch = getPullRequestSourceBranch(build, listener);\n\t\t\tString prSourceBranchUrl = getPullRequestSourceBranchUrl(build, listener);\n\t\t\tString prTargetBranch = getPullRequestTargetBranch(build, listener);\n\t\t\tString prTargetBranchUrl = getPullRequestTargetBranchUrl(build, listener);\n\t\t\tString prMergeCommit = getPullRequestMergeCommit(build, listener);\n\t\t\tString prMergeCommitUrl = getPullRequestMergeCommitUrl(build, listener);\n\t\t\tString prMergeBranch = getPullRequestMergeBranch(build, listener);\n\t\t\tString prMergeBranchUrl = getPullRequestMergeBranchUrl(build, listener);\n\t\t\tString prMergeMessage = getPullRequestMergeMessage(build, listener);\n\t\t\tString prMergeAuthor = getPullRequestMergeAuthor(build, listener);\n\t\t\tString prMergeAuthorUrl = getPullRequestMergeAuthorUrl(build, listener);\n\t\t\tString prMergeTimestamp = getPullRequestMergeTimestamp(build, listener);\n\t\t\tString prMergeCommitHash = getPullRequestMergeCommitHash(build, listener);\n\t\t\tString prMergeCommitHashUrl = getPullRequestMergeCommitHashUrl(build, listener);\n\t\t\t", "CodeBleu_score": 31.10359118089776}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\tif (source.shouldNotifyBitbucket()) {\n\t\tString revision = getRevision(build, listener);\n\t\tif (revision == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tString hash = getHash(build, listener);\n\t\tif (hash == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tString buildKey = getBuildKey(build, listener, revision, hash);\n\t\tif (buildKey == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tBitbucketApiClient client = getClient(build, listener, source, buildKey);\n\t\tif (client == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tBitbucketBuildStatus status = getBuildStatus(build, listener);\n\t\tif (status == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tclient.sendBuildStatus(status);\n\t}\n}", "CodeBleu_score": 25.72910888080635}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t\tString buildKey = null;\n\tif (shareBuildKeyBetweenBranchAndPR) {\n\t\tString jobName = build.getParent().getFullName();\n\t\tif (jobName.contains(\"/\")) {\n\t\t\tbuildKey = jobName.substring(jobName.lastIndexOf(\"/\") + 1) + \"-\" + branch;\n\t\t} else {\n\t\t\tbuildKey = jobName + \"-\" + branch;\n\t\t}\n\t} else {\n\t\tbuildKey = build.getParent().getFullName();\n\t}\n\treturn buildKey;\n}", "CodeBleu_score": 52.16421482190064}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t if (shareBuildKeyBetweenBranchAndPR) {\n return build.getParent().getFullName() + \":\" + branch;\n } else {\n return build.getDisplayName();\n }\n }", "CodeBleu_score": 26.068099066379467}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t String key = null;\n if (shareBuildKeyBetweenBranchAndPR) {\n key = build.getParent().getFullName() + \" \" + branch;\n } else {\n key = build.getParent().getFullName();\n }\n return key.trim();\n }", "CodeBleu_score": 49.739524951658275}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\t\tif (serverUrl == null) {\n\t\tLOGGER.log(Level.WARNING, \"No server URL set on deserialization. Attempting to resolve.\");\n\t\tserverUrl = BitbucketServerEndpoint.SERVER_URL_DEFAULT;\n\t}\n\tif (traits == null) {\n\t\tLOGGER.log(Level.WARNING, \"No traits set on deserialization. Attempting to resolve.\");\n\t\ttraits = new ArrayList<>();\n\t\ttraits.add(new BitbucketSCMNavigatorTrait(new BitbucketSCMNavigatorTrait.Builder().withTrait(Discovery.class).withTrait(RegexSCMSourceFilterTrait.class).withTrait(Selection.class).withTrait(WildcardSCMHeadFilterTrait.class)));\n\t}\n\treturn this;\n}", "CodeBleu_score": 19.029733301176876}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t\tif (serverUrl == null) {\n\t\tLOGGER.log(Level.WARNING, \"Deserialization of BitbucketSCMNavigator object with null serverUrl field. Setting serverUrl to {0}.\", BitbucketSCMNavigator.SERVER_URL_DEFAULT);\n\t\tserverUrl = BitbucketSCMNavigator.SERVER_URL_DEFAULT;\n\t}\n\tif (traits == null) {\n\t\tLOGGER.log(Level.WARNING, \"Deserialization of BitbucketSCMNavigator object with null traits field. Reconstructing traits to reflect legacy behavior.\");\n\t\ttraits = new ArrayList<>();\n\t\ttraits.add(new BitbucketSCMNavigatorTrait(this.serverUrl, this.credentialsId, this.repoOwner, this.repo, this.traits, this.filterText, this.includes, this.excludes, this.ignorePostCommitHooks));\n\t}\n\treturn this;\n}", "CodeBleu_score": 20.004560217916957}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t\tif (serverUrl == null) {\n\t\tLOGGER.warning(\"The server URL for this navigator is null. This may be due to a configuration error. Setting the server URL to the default Bitbucket Server URL.\");\n\t\tserverUrl = DEFAULT_SERVER_URL;\n\t}\n\tif (traits == null) {\n\t\ttraits = new ArrayList<>();\n\t\ttraits.add(new BitbucketSCMNavigatorTrait(serverUrl));\n\t}\n\treturn this;\n}", "CodeBleu_score": 15.58201865864855}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tif (isMatch) {\n\t\tLOGGER.log(Level.FINE, \"Found match for repository {0}\", name);\n\t\tmatches++;\n\t} else {\n\t\tLOGGER.log(Level.FINE, \"Ignoring repository {0}\", name);\n\t\tignored++;\n\t}\n}", "CodeBleu_score": 22.192844851902375}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tif (isMatch) {\n\t\tLOGGER.log(Level.FINE, \"Found matching repository {0}\", name);\n\t\tmatchingCount++;\n\t} else {\n\t\tLOGGER.log(Level.FINE, \"Ignoring repository {0}\", name);\n\t\tignoredCount++;\n\t}\n}", "CodeBleu_score": 22.739940091848077}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t\ttry {\n\t\tBitbucketRepository repository = api.getRepository(name);\n\t\tif (isMatch) {\n\t\t\tLOGGER.info(\"Proposing repository \" + repository.getFullName());\n\t\t\tproposedCount++;\n\t\t} else {\n\t\t\tLOGGER.info(\"Ignoring repository \" + repository.getFullName());\n\t\t}\n\t} catch (BitbucketRequestException e) {\n\t\tif (e.getStatus() == 404) {\n\t\t\tLOGGER.info(\"Repository \" + name + \" does not exist\");\n\t\t} else {\n\t\t\tLOGGER.log(Level.WARNING, \"Failed to retrieve repository \" + name, e);\n\t\t}\n\t}\n}", "CodeBleu_score": 51.1810753320578}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t\ttry {\n\t\tGitSCMExtension[] extensions = scm.getExtensions();\n\t\tfor (GitSCMExtension ext : extensions) {\n\t\t\tif (ext instanceof CloneLink) {\n\t\t\t\tCloneLink cloneLink = (CloneLink) ext;\n\t\t\t\tif (cloneLink.getBuildType() == CloneLink.BuildType.SAME_BRANCH) {\n\t\t\t\t\tString branch = rev.getBranches().get(0).getName();\n\t\t\t\t\tString cloneLinkString = cloneLink.getCloneLinkString(build, listener);\n\t\t\t\t\tURIish uri = new URIish(cloneLinkString);\n\t\t\t\t\tFetchCommand fetch = git.fetch_();\n\t\t\t\t\tfetch.from(uri, new RefSpec(branch + \":\" + branch));\n\t\t\t\t\tfetch.from(uri, new RefSpec(branch + \"^{}:\" + branch));\n\t\t\t\t\tfetch.from(uri, new RefSpec(\"origin/HEAD:\" + branch));\n\t\t\t\t\tfetch.from(uri, new RefSpec(\"origin/HEAD^{}:\" + branch));\n\t\t\t\t\tfetch.from(uri, new RefSpec(\"origin/origin/HEAD:\" + branch));\n\t\t\t\t\tfetch.from(uri, new RefSpec(\"origin/origin/HEAD^{}:\" + branch));\n\t\t\t\t\tfetch.from(uri, new RefSpec(\"origin/refs/heads/HEAD:\" + branch));\n\t\t\t\t\tfetch.from(uri, new RefSpec(\"origin/refs/heads/HEAD^{}:\" + branch));\n\t\t\t\t\tfetch.from(uri, new RefSpec(\"origin/refs/heads/\" + branch + \":\" + branch));\n\t\t\t\t\tfetch.from(uri, new RefSpec(\"origin/refs/heads/\" + branch + \"^{}:\" + branch));\n\t\t\t\t\tfetch.from(uri, new RefSpec(\"refs/heads/HEAD:\" + branch));\n\t\t\t\t\tfetch.from(uri, new RefSpec(\"refs/heads/HEAD^{}:\" + branch));\n\t\t\t\t\tfetch.from(uri, new RefSpec(\"refs/heads/\" + branch + \":\" + branch));\n\t\t\t\t\tfetch.from(uri, new RefSpec(\"refs/heads/\" + branch + \"^{}:\" + branch));\n\t\t\t\t\tfetch.from(uri, new RefSpec(\"refs/remotes/origin/HEAD:\" + branch));\n\t\t\t\t\tfetch.from(uri, new RefSpec(\"refs/remotes/origin/HEAD^{}:\" + branch));\n\t\t\t\t\tfetch.from(uri, new RefSpec(\"refs", "CodeBleu_score": 34.28017025039844}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t\ttry {\n\t\tif (rev == null) {\n\t\t\treturn null;\n\t\t}\n\t\tURIish cloneLink = scm.getRepo().getCloneLink();\n\t\tString branch = marked.getBranches().get(0).getName();\n\t\tif (branch.contains(\"#\")) {\n\t\t\tList<RefSpec> refSpecs = scm.getExtensions().stream()\n\t\t\t\t.filter(GitSCMExtension.class::isInstance)\n\t\t\t\t.map(GitSCMExtension.class::cast)\n\t\t\t\t.filter(ext -> ext instanceof BranchSpec || ext instanceof LocalBranch)\n\t\t\t\t.map(ext -> {\n\t\t\t\t\tif (ext instanceof BranchSpec) {\n\t\t\t\t\t\treturn ((BranchSpec) ext).getBranches().stream()\n\t\t\t\t\t\t\t.filter(b -> b.getName().equals(branch))\n\t\t\t\t\t\t\t.map(b -> new RefSpec(b.getName() + \":\" + b.getName()))\n\t\t\t\t\t\t\t.collect(Collectors.toList());\n\t\t\t\t\t}\n\t\t\t\t\telse if (ext instanceof LocalBranch) {\n\t\t\t\t\t\treturn ((LocalBranch) ext).getBranches().stream()\n\t\t\t\t\t\t\t.filter(b -> b.getName().equals(branch))\n\t\t\t\t\t\t\t.map(b -> new RefSpec(b.getName() + \":\" + b.getName()))\n\t\t\t\t\t\t\t.collect(Collectors.toList());\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t})\n\t\t\t\t.filter(ext -> ext != null)\n\t\t\t\t.flatMap(List::stream)\n\t\t\t\t.collect(Collectors.toList());\n\t\t\tif (!refSpecs.isEmpty()) {\n\t\t\t\tFetchCommand fetch = git.fetch_();\n\t\t\t\tfetch.from(cloneLink, refSpecs);\n\t\t\t\tfetch.execute();\n\t\t\t}\n\t\t}\n\t\treturn rev;\n\t}\n\tcatch (GitException | URISyntaxException e) {\n\t\tlistener.fatalError(\"Failed to decorate revision for build \" + build.getUrl() + \": \" + e.getMessage());\n\t\tthrow new InterruptedException(e.getMessage());\n\t}\n}", "CodeBleu_score": 43.41357351411407}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t\tGitSCMExtension[] extensions = scm.getExtensions();\n\tGitSCMExtension first = extensions[0];\n\tString cloneLink = first.getCloneLink(build);\n\tURIish uri;\n\ttry {\n\t\turi = new URIish(cloneLink);\n\t} catch (URISyntaxException e) {\n\t\tthrow new GitException(e);\n\t}\n\tList<RefSpec> refSpecs = rev.getBranches().stream()\n\t\t.filter(branch -> branch.getName().matches(\"^\\\\w{7}$\"))\n\t\t.map(branch -> new RefSpec(\"+\" + branch.getName() + \":\" + branch.getName()))\n\t\t.collect(Collectors.toList());\n\tif (refSpecs.size() > 0) {\n\t\tFetchCommand fetch = git.fetch_();\n\t\tfetch.from(uri);\n\t\tfetch.refspecs(refSpecs);\n\t\tfetch.execute();\n\t}\n\treturn rev;\n}", "CodeBleu_score": 53.076543411102186}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tif (links == null) {\n\t\treturn null;\n\t}\n\tMap<String, BitbucketHref> result = new HashMap<>();\n\tfor (Map.Entry<String, BitbucketHref> entry : links.entrySet()) {\n\t\tresult.put(entry.getKey(), entry.getValue());\n\t\tbreak;\n\t}\n\treturn result;\n}", "CodeBleu_score": 58.61995867210992}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tif (links == null) {\n\t\treturn null;\n\t}\n\tMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n\tfor (Map.Entry<String, BitbucketHref> entry : links.entrySet()) {\n\t\tresult.put(entry.getKey(), entry.getValue());\n\t\tbreak;\n\t}\n\treturn result;\n}", "CodeBleu_score": 53.579291244686786}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tif (links == null) {\n\t\treturn null;\n\t}\n\tMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n\tfor (Map.Entry<String, BitbucketHref> entry : links.entrySet()) {\n\t\tresult.put(entry.getKey(), entry.getValue());\n\t\tbreak;\n\t}\n\treturn result;\n}", "CodeBleu_score": 53.579291244686786}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tif (!resourceStates.length) {\n\t\tconst message = localize('noSourceControl', 'There are no source control resources to add.');\n\t\treturn window.showErrorMessage(message);\n\t}\n\tconst resources = resourceStates.map(r => r.resourceUri);\n\tconst repositoryPaths = await this.repositoryPaths;\n\tconst repositories = repositoryPaths.map(p => this.repositoryForPath(p));\n\tconst repositoryToResourceMap = groupBy(resources, r => repositories.find(repository => repository.rootUri === r.toString()));\n\tfor (const [repository, resources] of repositoryToResourceMap) {\n\t\tif (repository) {\n\t\t\tconst repositoryResources = resources.map(r => this.toFilePath(r));\n\t\t\tawait this.addResourcesToRepository(repository, repositoryResources);\n\t\t}\n\t}\n}", "CodeBleu_score": 37.943496050134364}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tconst repositoryResourceStates = this.repositoryResourceStates(resourceStates);\n\tif (repositoryResourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\tconst repositories = this.repositories(repositoryResourceStates);\n\tconst repositoryPaths = repositories.map(repository => repository.rootUri?.path);\n\n\tconst filePaths = this.filePaths(repositoryResourceStates);\n\n\tconst addedResources = await this.addResources(repositories, filePaths);\n\tconst addedResourcePaths = addedResources.map(resource => resource.path);\n\n\tconst skippedResources = repositoryResourceStates.filter(resourceState => !addedResourcePaths.includes(resourceState.resourceUri.path));\n\tconst skippedResourcePaths = skippedResources.map(resourceState => resourceState.resourceUri.path);\n\n\tif (skippedResources.length > 0) {\n\t\tthis.showSkippedMessage(skippedResources, skippedResourcePaths, repositoryPaths);\n\t}\n}", "CodeBleu_score": 41.008018370639206}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tconst resources = this.getResourceStates(resourceStates);\n\tif (!resources.length) {\n\t\treturn;\n\t}\n\n\tconst repositories = this.repository.getRepositories();\n\tif (!repositories.length) {\n\t\treturn;\n\t}\n\n\tconst repository = repositories[0];\n\tconst uris = resources.map(resource => resource.resourceUri);\n\tconst paths = await this.repository.getResourcePaths(uris);\n\tconst added = await repository.add(paths);\n\tif (added.length) {\n\t\tthis.repository.inputBox.value = \"\";\n\t\tthis.repository.inputBox.show();\n\t}\n}", "CodeBleu_score": 48.97815161506255}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\t}", "CodeBleu_score": 3.4603389863503295}, {"code": "protected async getResourceStates{\n\t/**\n * This async function retrieves resource states for source control. It first checks if the provided resource states are empty or if the first resource URI is not an instance of Uri. If so, it attempts to get a single SCM resource and updates the resource states. Finally, it filters and returns the resource states that are instances of Resource.\n */", "CodeBleu_score": 4.903682038680252}, {"code": "protected async getResourceStates{\n\t\n}", "CodeBleu_score": 3.4603389863503295}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t/**\n * This async function retrieves a source control management (SCM) resource for a given URI. If no URI is provided, it uses the URI of the active text editor. If the URI is in the \"svn\" scheme, it converts it to a file URI. For file URIs, it gets the source control manager and retrieves the repository for the URI, returning the corresponding resource. If no valid URI or repository is found, it returns undefined.\n */\n    uri = uri || this.activeEditor.document.uri;", "CodeBleu_score": 1.8678735322991962}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t\n/**\n * This async function retrieves a source control management (SCM) resource for a given URI. If no URI is provided, it uses the URI of the active text editor. If the URI is in the \"svn\" scheme, it converts it to a file URI. For file URIs, it gets the source control manager and retrieves the repository for the URI, returning the corresponding resource. If no valid URI or repository is found, it returns undefined.\n */\n    const resource = uri ? this.fromUri(uri) : this.fromUri(window.activeTextEditor && window.activeTextEditor.document.uri);\n\n/**\n * This async function retrieves a source control management (SCM) resource for a given URI. If no URI is provided, it uses the URI of the active text editor. If the URI is in the \"svn\" scheme, it converts it to a file URI. For file URIs, it gets the source control manager and retrieves the repository for the URI, returning the corresponding resource. If no valid URI or repository is found, it returns undefined.\n */\n    if (resource && resource.repo) {\n\n/**\n * This async function retrieves a source control management (SCM) resource for a given URI. If no URI is provided, it uses the URI of the active text editor. If the URI is in the \"svn\" scheme, it converts it to a file URI. For file URIs, it gets the source control manager and retrieves the repository for the URI, returning the corresponding resource. If no valid URI or repository is found, it returns undefined.\n */\n      return resource;\n    }\n\n/**\n * This async function retrieves a source control management (SCM) resource for a given URI. If no URI is provided, it uses the URI of the active text editor. If the URI is in the \"svn\" scheme, it converts it to a file URI. For file URIs, it gets the source control manager and retrieves the repository for the URI, returning the corresponding resource. If no valid URI or repository is found, it returns undefined.\n */\n    return undefined;\n  }", "CodeBleu_score": 14.541482330510199}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t/**\n * This async function retrieves a source control management (SCM) resource for a given URI. If no URI is provided, it uses the URI of the active text editor. If the URI is in the \"svn\" scheme, it converts it to a file URI. For file URIs, it gets the source control manager and retrieves the repository for the URI, returning the corresponding resource. If no valid URI or repository is found, it returns undefined.\n */\n    if (uri == null) {", "CodeBleu_score": 1.6229015633224004}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\tconst { path, status } = element;\nconst repo = await this.svn.getRepo(path);\nconst url = repo.root;\nconst revision = repo.revision;\nconst oldPath = element.oldPath || path;\nconst oldRevision = element.oldRevision || revision;\nconst newPath = element.newPath || path;\nconst newRevision = element.newRevision || revision;\nconst oldUri = url + \"/\" + oldPath + \"@\" + oldRevision;\nconst newUri = url + \"/\" + newPath + \"@\" + newRevision;\nif (status === Status.Modified) {\nopenDiff(oldUri, newUri);\n} else if (status === Status.Added) {\nopenFileRemote(newUri);\n}\n}", "CodeBleu_score": 33.54857188323105}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t{\n  openDiff, getIconObject, openFileRemote\n}", "CodeBleu_score": 5.501243984878433}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t\nelement: ISvnPathChange", "CodeBleu_score": 2.7622611094428327}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!env.clipboard.writeText) {\n\t\twindow.showErrorMessage(\"Your clipboard does not support writing text.\");\n\t\treturn;\n\t}\n\tif (what === \"revision\") {\n\t\tconst revision = await item.getRevision();\n\t\tif (!revision) {\n\t\t\twindow.showErrorMessage(\"Revision not found\");\n\t\t\treturn;\n\t\t}\n\t\tawait env.clipboard.writeText(revision);\n\t\treturn;\n\t}\n\tif (what === \"message\") {\n\t\tconst message = await item.getMessage();\n\t\tif (!message) {\n\t\t\twindow.showErrorMessage(\"Message not found\");\n\t\t\treturn;\n\t\t}\n\t\tawait env.clipboard.writeText(message);\n\t\treturn;\n\t}\n\twindow.showErrorMessage(\"Unknown copy type\");\n}", "CodeBleu_score": 34.712486203262074}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tconst clipboard = env.clipboard;\n\tif (!clipboard) {\n\t\twindow.showErrorMessage(\"Your clipboard is not supported.\");\n\t\treturn;\n\t}\n\tif (item.type === \"commit\") {\n\t\tconst commit = item.commit;\n\t\tif (what === \"revision\") {\n\t\t\tclipboard.writeText(commit.revision);\n\t\t} else if (what === \"message\") {\n\t\t\tclipboard.writeText(commit.message);\n\t\t}\n\t} else {\n\t\twindow.showErrorMessage(\"The item is not a commit.\");\n\t}\n}", "CodeBleu_score": 42.45824627394275}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!env.clipboard.writeText) {\n\t\twindow.showErrorMessage(\"The clipboard is not supported.\");\n\t\treturn;\n\t}\n\tif (item.type !== \"commit\") {\n\t\twindow.showErrorMessage(\"This item is not a commit.\");\n\t\treturn;\n\t}\n\tif (what === \"revision\") {\n\t\tawait env.clipboard.writeText(item.commit.revision);\n\t} else if (what === \"message\") {\n\t\tawait env.clipboard.writeText(item.commit.message);\n\t}\n}", "CodeBleu_score": 31.67278568209579}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t\tServiceLoader<GiteaConnectionFactory> serviceLoader = ServiceLoader.load(GiteaConnectionFactory.class);\n\tfor (GiteaConnectionFactory factory : serviceLoader) {\n\t\tif (factory.isApplicable()) {\n\t\t\treturn factory.open(Jenkins.getAuthentication());\n\t\t}\n\t}\n\tthrow new IOException(\"No Gitea connection factory found\");\n}", "CodeBleu_score": 19.670599171000603}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t\tServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class);\n\tfor (GiteaConnectionFactory factory : loader) {\n\t\tif (factory.isAvailable()) {\n\t\t\treturn factory.open();\n\t\t}\n\t}\n\tthrow new IOException(\"No Gitea connection factory is available\");\n}", "CodeBleu_score": 19.9078034271487}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t\tServiceLoader<GiteaConnectionFactory> factories = ServiceLoader.load(GiteaConnectionFactory.class);\n\tfor (GiteaConnectionFactory factory : factories) {\n\t\tif (factory.isAvailable()) {\n\t\t\tGiteaConnection connection = factory.open();\n\t\t\tif (connection != null) {\n\t\t\t\treturn connection;\n\t\t\t}\n\t\t}\n\t}\n\tthrow new IOException(\"No Gitea connection factory is available\");\n}", "CodeBleu_score": 24.442305452975297}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tClassLoader cl = null;\n\tJenkins jenkins = Jenkins.getInstance();\n\tif (jenkins != null) {\n\t\tcl = jenkins.getPluginManager().uberClassLoader;\n\t}\n\tif (cl == null) {\n\t\tcl = getClass().getClassLoader();\n\t}\n\treturn Gitea.using(cl);\n}", "CodeBleu_score": 47.40576332394357}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tClassLoader classLoader = null;\n\tJenkins jenkins = Jenkins.getInstance();\n\tif (jenkins != null) {\n\t\tclassLoader = jenkins.getPluginManager().uberClassLoader;\n\t} else {\n\t\tclassLoader = getClass().getClassLoader();\n\t}\n\treturn new Gitea(classLoader);\n}", "CodeBleu_score": 46.64969763375172}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tClassLoader classLoader = null;\n\tJenkins jenkins = Jenkins.getInstance();\n\tif (jenkins != null) {\n\t\tclassLoader = jenkins.getPluginManager().uberClassLoader;\n\t}\n\tif (classLoader == null) {\n\t\tclassLoader = getClass().getClassLoader();\n\t}\n\tServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n\tfor (GiteaConnectionFactory factory : loader) {\n\t\treturn factory.create();\n\t}\n\tthrow new IllegalStateException(\"No Gitea connection factory found\");\n}", "CodeBleu_score": 42.75990111304393}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tsuper();\nif (StringUtils.isBlank(displayName)) {\ndisplayName = serverUrl;\n}\n\nif (StringUtils.isBlank(aliasUrl)) {\naliasUrl = serverUrl;\n} else {\naliasUrl = aliasUrl.trim();\n}\n\nif (StringUtils.isBlank(serverUrl)) {\nthrow new IllegalArgumentException(\"Server URL cannot be empty\");\n}\n\nif (StringUtils.isBlank(aliasUrl)) {\nthrow new IllegalArgumentException(\"Alias URL cannot be empty\");\n}\n\ntry {\nURI serverUri = new URI(serverUrl);\nif (serverUri.getHost() == null) {\nthrow new URISyntaxException(serverUrl, \"Host cannot be empty\");\n}\n\nif (serverUri.getPort() == -1) {\nif (\"http\".equals(serverUri.getScheme())) {\nserverUrl = serverUrl + \":3000\";\n} else if (\"https\".equals(serverUri.getScheme())) {\nserverUrl = serverUrl + \":443\";\n}\n}\n} catch (URISyntaxException e) {\nthrow new IllegalArgumentException(\"Server URL is not a valid URL\", e);\n}\n\nthis.displayName = displayName;\nthis.serverUrl = serverUrl;\nthis.manageHooks = manageHooks;\nif (manageHooks) {\nif (credentialsId == null) {\nthrow new IllegalArgumentException(\"Credentials ID cannot be empty when managing hooks\");\n}\n\nthis.credentialsId = credentialsId;\n} else {\nthis.credentialsId = null;\n}\n\nthis.aliasUrl = aliasUrl;\n}", "CodeBleu_score": 34.39323742213533}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t```\n", "CodeBleu_score": 12.653061224489798}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tif (serverUrl == null) {\nthrow new IllegalArgumentException(\"serverUrl cannot be null\");\n}\nif (StringUtils.isBlank(serverUrl)) {\nthrow new IllegalArgumentException(\"serverUrl cannot be empty\");\n}\nif (aliasUrl != null) {\naliasUrl = aliasUrl.trim();\n}\nif (aliasUrl != null && aliasUrl.length() > 0 && !aliasUrl.startsWith(\"/\")) {\naliasUrl = \"/\" + aliasUrl;\n}\nif (aliasUrl != null && aliasUrl.length() > 0 && aliasUrl.endsWith(\"/\")) {\naliasUrl = aliasUrl.substring(0, aliasUrl.length() - 1);\n}\nthis.displayName = StringUtils.defaultIfBlank(displayName, serverUrl);\nthis.serverUrl = normalizeServerUrl(serverUrl);\nthis.manageHooks = manageHooks;\nif (manageHooks) {\nif (credentialsId == null) {\nthrow new IllegalArgumentException(\"credentialsId cannot be null when manageHooks is true\");\n}\nif (StringUtils.isBlank(credentialsId)) {\nthrow new IllegalArgumentException(\"credentialsId cannot be empty when manageHooks is true\");\n}\nthis.credentialsId = credentialsId;\n} else {\nthis.credentialsId = null;\n}\nthis.aliasUrl = aliasUrl;\n}", "CodeBleu_score": 36.97594202036104}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tif (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n\t\treturn new StandardListBoxModel().includeCurrentValue(credentialsId);\n\t}\n\n\tString serverUrlNorm = normalizeServerUrl(serverUrl);\n\tif (serverUrlNorm == null) {\n\t\treturn new StandardListBoxModel().includeCurrentValue(credentialsId);\n\t}\n\n\tList<GiteaAuth> auths = AuthenticationTokens.getAuthenticationTokens().getCredentials(GiteaAuth.class);\n\tList<GiteaAuth> matchingAuths = new ArrayList<>();\n\tfor (GiteaAuth auth : auths) {\n\t\tif (auth.getServerUrl().equals(serverUrlNorm)) {\n\t\t\tmatchingAuths.add(auth);\n\t\t}\n\t}\n\n\tList<StandardCredentials> credentials = CredentialsProvider.lookupCredentials(StandardCredentials.class, Jenkins.get(), ACL.SYSTEM, URIRequirementBuilder.fromUri(serverUrlNorm).build());\n\tList<StandardCredentials> matchingCredentials = new ArrayList<>();\n\tfor (StandardCredentials cred : credentials) {\n\t\tif (cred instanceof StandardUsernamePasswordCredentials) {\n\t\t\tStandardUsernamePasswordCredentials upCred = (StandardUsernamePasswordCredentials) cred;\n\t\t\tif (StringUtils.equals(upCred.getUsername(), Gitea.DEFAULT_USER)) {\n\t\t\t\tmatchingCredentials.add(cred);\n\t\t\t}\n\t\t}\n\t}\n\n\tList<StandardCredentials> allCredentials = new ArrayList<>();\n\tallCredentials.addAll(matchingCredentials);\n\tallCredentials.addAll(matchingAuths);\n\n\treturn new StandardListBoxModel().includeEmptyValue().includeMatchingAs(ACL.SYSTEM, Jenkins.get(), StandardCredentials.class, URIRequirementBuilder.fromUri(serverUrlNorm).build(), allCredentials, CredentialsMatchers.allOf(CredentialsMatchers.withId(credentialsId)));\n}", "CodeBleu_score": 43.62462964965288}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tif (!hasPermission()) {\n\t\treturn new StandardListBoxModel().includeCurrentValue(true);\n\t}\n\treturn new StandardListBoxModel()\n\t\t.includeEmptyValue()\n\t\t.includeMatchingAs(\n\t\t\tACL.SYSTEM,\n\t\t\tJenkins.getInstance(),\n\t\t\tStandardCredentials.class,\n\t\t\tURIRequirementBuilder.fromUri(normalizeServerUrl(serverUrl)).build(),\n\t\t\tCredentialsMatchers.anyOf(\n\t\t\t\tCredentialsMatchers.instanceOf(StandardUsernamePasswordCredentials.class),\n\t\t\t\tCredentialsMatchers.instanceOf(GiteaAuth.class)\n\t\t\t)\n\t\t);\n}", "CodeBleu_score": 31.5499230002103}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tif (Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n\t\treturn new StandardListBoxModel().includeEmptyValue().includeMatchingAs(ACL.SYSTEM, Jenkins.get(), StandardCredentials.class, URIRequirementBuilder.fromUri(normalizeServerUrl(serverUrl)).build(), GiteaAuth.matcher());\n\t} else {\n\t\treturn new StandardListBoxModel().includeEmptyValue().includeMatchingAs(ACL.SYSTEM, Jenkins.get(), StandardCredentials.class, URIRequirementBuilder.fromUri(normalizeServerUrl(serverUrl)).build(), GiteaAuth.matcher());\n\t}\n}", "CodeBleu_score": 33.35567363319862}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tURI uri = new URI(serverUrl.toLowerCase(Locale.ENGLISH));\n\t\tif (uri.getPort() == 80 && \"http\".equals(uri.getScheme())) {\n\t\t\turi = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), -1, uri.getPath(), uri.getQuery(), uri.getFragment());\n\t\t} else if (uri.getPort() == 443 && \"https\".equals(uri.getScheme())) {\n\t\t\turi = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), -1, uri.getPath(), uri.getQuery(), uri.getFragment());\n\t\t}\n\t\treturn uri.toString().replaceAll(\"/$\", \"\");\n\t} catch (URISyntaxException e) {\n\t\treturn serverUrl;\n\t}\n}", "CodeBleu_score": 32.29659912573047}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tURI uri = new URI(serverUrl.toLowerCase());\n\t\tif (uri.getPort() == 80 && \"http\".equals(uri.getScheme())) {\n\t\t\turi = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), -1, uri.getPath(), uri.getQuery(), uri.getFragment());\n\t\t} else if (uri.getPort() == 443 && \"https\".equals(uri.getScheme())) {\n\t\t\turi = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), -1, uri.getPath(), uri.getQuery(), uri.getFragment());\n\t\t}\n\t\treturn uri.toString().replaceAll(\"/$\", \"\");\n\t} catch (URISyntaxException e) {\n\t\treturn serverUrl;\n\t}\n}", "CodeBleu_score": 29.864948897508114}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tURI uri = new URI(serverUrl.toLowerCase());\n\t\tif (uri.getPort() == 80 && \"http\".equals(uri.getScheme())) {\n\t\t\turi = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), -1, uri.getPath(), uri.getQuery(), uri.getFragment());\n\t\t}\n\t\tif (uri.getPort() == 443 && \"https\".equals(uri.getScheme())) {\n\t\t\turi = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), -1, uri.getPath(), uri.getQuery(), uri.getFragment());\n\t\t}\n\t\treturn uri.toString();\n\t} catch (URISyntaxException e) {\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 27.867225297610045}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\t\tListBoxModel model = new ListBoxModel();\n\tfor (GiteaServer server : GiteaServer.all()) {\n\t\tString displayName = server.getDisplayName();\n\t\tif (StringUtils.isBlank(displayName)) {\n\t\t\tdisplayName = server.getServerUrl();\n\t\t}\n\t\tmodel.add(displayName, server.getServerUrl());\n\t}\n\treturn model;\n}", "CodeBleu_score": 46.29503634437873}, {"code": "public ListBoxModel getServerItems(){\n\t\tListBoxModel model = new ListBoxModel();\n\n\tList<GiteaServer> servers = GiteaServer.all();\n\tfor (GiteaServer server : servers) {\n\t\tString displayName = server.getDisplayName();\n\t\tif (StringUtils.isBlank(displayName)) {\n\t\t\tdisplayName = server.getUrl();\n\t\t}\n\t\tmodel.add(displayName, server.getUrl());\n\t}\n\n\treturn model;\n}", "CodeBleu_score": 41.78751281919926}, {"code": "public ListBoxModel getServerItems(){\n\t\tListBoxModel model = new ListBoxModel();\n\tfor (GiteaServer giteaServer : getServers()) {\n\t\tString displayName = giteaServer.getDisplayName();\n\t\tif (StringUtils.isBlank(displayName)) {\n\t\t\tdisplayName = giteaServer.getUrl();\n\t\t}\n\t\tmodel.add(displayName, giteaServer.getUrl());\n\t}\n\treturn model;\n}", "CodeBleu_score": 49.21519490378981}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tLOGGER.info(\"Setting Gitea servers\");\n\n\tif (servers == null) {\n\t\tLOGGER.warning(\"No Gitea servers provided.\");\n\t\treturn;\n\t}\n\n\tSet<GiteaServer> serverSet = new HashSet<>();\n\tList<GiteaServer> newServers = new ArrayList<>();\n\tList<GiteaServer> oldServers = new ArrayList<>();\n\n\tfor (GiteaServer server : servers) {\n\t\tif (server == null) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (serverSet.contains(server)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (StringUtils.isBlank(server.getUrl())) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tserverSet.add(server);\n\t\tnewServers.add(server);\n\n\t\tif (server.isConfigured()) {\n\t\t\toldServers.add(server);\n\t\t}\n\t}\n\n\tLOGGER.info(\"New Gitea servers: \" + newServers);\n\tLOGGER.info(\"Old Gitea servers: \" + oldServers);\n\n\tif (oldServers.size() > 0) {\n\t\tLOGGER.warning(\"Removing old Gitea servers: \" + oldServers);\n\t\toldServers.forEach(server -> server.setConfigured(false));\n\t}\n\n\tLOGGER.info(\"Saving Gitea servers\");\n\tJenkins.get().getDescriptorByType(GiteaServers.class).setServers(newServers);\n}", "CodeBleu_score": 30.601504338586}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tif (servers == null) {\n\t\tLOGGER.warning(\"setServers called with null\");\n\t\treturn;\n\t}\n\tList<GiteaServer> filteredServers = new ArrayList<>();\n\tSet<String> serverUrls = new HashSet<>();\n\tfor (GiteaServer server : servers) {\n\t\tif (server == null) {\n\t\t\tLOGGER.warning(\"setServers called with null server\");\n\t\t\tcontinue;\n\t\t}\n\t\tString serverUrl = server.getServerUrl();\n\t\tif (StringUtils.isBlank(serverUrl)) {\n\t\t\tLOGGER.warning(\"setServers called with server with empty URL\");\n\t\t\tcontinue;\n\t\t}\n\t\tif (serverUrls.contains(serverUrl)) {\n\t\t\tLOGGER.warning(\"setServers called with server that already exists\");\n\t\t\tcontinue;\n\t\t}\n\t\tserverUrls.add(serverUrl);\n\t\tfilteredServers.add(server);\n\t}\n\tif (filteredServers.size() == 0) {\n\t\tLOGGER.warning(\"setServers called with empty list\");\n\t\treturn;\n\t}\n\tLOGGER.info(\"setServers called with \" + filteredServers.size() + \" servers\");\n\tJenkins.XSTREAM2.addCompatibilityAlias(\"org.jenkinsci.plugins.gitea.servers.GiteaServer\", GiteaServer.class);\n\tJenkins.XSTREAM2.addCompatibilityAlias(\"org.jenkinsci.plugins.gitea.servers.GiteaServers\", GiteaServers.class);\n\tJenkins.XSTREAM2.addCompatibilityAlias(\"org.jenkinsci.plugins.gitea.servers.GiteaServer.ServerList\", GiteaServer.ServerList.class);\n\tJenkins.XSTREAM2.addCompatibilityAlias(\"org.jenkinsci.plugins.gitea.servers.GiteaServer.ServerList.Server\", GiteaServer.ServerList.Server.class);\n\tJenkins.XSTREAM2.addCompatibilityAlias(\"org.jenkinsci.plugins.gitea.servers.GiteaServer.ServerList.Server.Protocol\", GiteaServer.ServerList.Server.Protocol.class);\n\tJenkins.XSTREAM2.addCompatibilityAlias(\"org.jenkinsci.plugins.gitea.servers.G", "CodeBleu_score": 36.055111125435346}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tif (servers == null) {\n\t\treturn;\n\t}\n\n\t// check for necessary admin permissions\n\tif (!Jenkins.getInstance().hasPermission(Jenkins.ADMINISTER)) {\n\t\tthrow new AccessDeniedException(\"User is missing the \\\"Administer\\\" permission\");\n\t}\n\n\t// remove duplicates and empty URLs\n\tSet<GiteaServer> uniqueServers = new HashSet<>();\n\tfor (GiteaServer server : servers) {\n\t\tif (server != null && StringUtils.isNotBlank(server.getUrl())) {\n\t\t\tuniqueServers.add(server);\n\t\t}\n\t}\n\n\t// update the servers\n\tList<GiteaServer> newServers = new ArrayList<>(uniqueServers);\n\tfor (GiteaServer server : getServers()) {\n\t\tif (!newServers.contains(server)) {\n\t\t\tnewServers.add(server);\n\t\t}\n\t}\n\tGiteaServers.get().setServers(newServers);\n\n\t// save the configuration\n\tsave();\n}", "CodeBleu_score": 36.05903200098835}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn false;\n\t}\n\tserverUrl = serverUrl.trim();\n\tif (serverUrl.isEmpty()) {\n\t\treturn false;\n\t}\n\tserverUrl = normalizeServerUrl(serverUrl);\n\tfor (GiteaServer server : getServers()) {\n\t\tif (serverUrl.equals(server.getServerUrl())) {\n\t\t\tgetServers().remove(server);\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 29.560298108778564}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn false;\n\t}\n\tserverUrl = normalizeServerUrl(serverUrl);\n\tfor (GiteaServer server : getServers()) {\n\t\tif (server.getServerUrl().equals(serverUrl)) {\n\t\t\tgetServers().remove(server);\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 23.605390273288723}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn false;\n\t}\n\tserverUrl = serverUrl.trim();\n\tif (serverUrl.isEmpty()) {\n\t\treturn false;\n\t}\n\tserverUrl = normalizeServerUrl(serverUrl);\n\tfor (GiteaServer server : getServers()) {\n\t\tif (serverUrl.equals(server.getServerUrl())) {\n\t\t\tgetServers().remove(server);\n\t\t\tsave();\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 29.77729261357087}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t\tSet<? extends Element> annotatedElements = roundEnv.getElementsAnnotatedWith(annotation);\n\tfor (Element element : annotatedElements) {\n\t\tif (element.getKind() == ElementKind.FIELD) {\n\t\t\tVariableElement field = (VariableElement) element;\n\t\t\tdescriptorElements.add(new DescriptorElement(field.getSimpleName().toString(), field.asType().toString(), field.getAnnotationMirrors()));\n\t\t} else if (element.getKind() == ElementKind.METHOD) {\n\t\t\tExecutableElement method = (ExecutableElement) element;\n\t\t\tdescriptorElements.add(new DescriptorElement(method.getSimpleName().toString(), method.getReturnType().toString(), method.getAnnotationMirrors()));\n\t\t}\n\t}\n}", "CodeBleu_score": 40.83657287405918}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tSet<? extends Element> annotatedElements = roundEnv.getElementsAnnotatedWith(annotation);\nfor (Element annotatedElement : annotatedElements) {\nString name = annotatedElement.getSimpleName().toString();\nString type = annotatedElement.asType().toString();\nMap<String, String> attributes = Maps.newHashMap();\nfor (AnnotationMirror annotationMirror : annotatedElement.getAnnotationMirrors()) {\nif (annotationMirror.getAnnotationType().toString().equals(annotation.toString())) {\nfor (Map.Entry<? extends ExecutableElement, ? extends AnnotationValue> entry : annotationMirror.getElementValues().entrySet()) {\nattributes.put(entry.getKey().getSimpleName().toString(), entry.getValue().getValue().toString());\n}\n}\n}\ndescriptorElements.add(new DescriptorElement(name, type, attributes));\n}\n}", "CodeBleu_score": 45.79950356990599}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tSet<? extends Element> annotatedElements = roundEnv.getElementsAnnotatedWith(annotation);\nfor (Element element : annotatedElements) {\nif (element.getKind() != ElementKind.METHOD) {\nthrow new IllegalArgumentException(\"Only methods can be annotated with @\" + annotation.getSimpleName());\n}\nExecutableElement method = (ExecutableElement) element;\nif (!method.getModifiers().contains(Modifier.PUBLIC)) {\nthrow new IllegalArgumentException(\"Only public methods can be annotated with @\" + annotation.getSimpleName());\n}\nif (method.getReturnType().getKind() != TypeKind.VOID) {\nthrow new IllegalArgumentException(\"Only methods without return type can be annotated with @\" + annotation.getSimpleName());\n}\nif (method.getParameters().size() != 1) {\nthrow new IllegalArgumentException(\"Only methods with exactly one parameter can be annotated with @\" + annotation.getSimpleName());\n}\nVariableElement parameter = method.getParameters().get(0);\nString type = parameter.asType().toString();\nMap<String, String> attributes = Maps.newHashMap();\nfor (AnnotationMirror annotationMirror : method.getAnnotationMirrors()) {\nif (annotationMirror.getAnnotationType().toString().equals(annotation.toString())) {\nMap<? extends ExecutableElement, ? extends AnnotationValue> elementValues = annotationMirror.getElementValues();\nfor (Map.Entry<? extends ExecutableElement, ? extends AnnotationValue> entry : elementValues.entrySet()) {\nString attribute = entry.getKey().getSimpleName().toString();\nObject value = entry.getValue().getValue();\nattributes.put(attribute, value.toString());\n}\n}\n}\nif (attributes.isEmpty()) {\nthrow new IllegalArgumentException(\"The method annotated with @\" + annotation.getSimpleName() + \" must specify at least one attribute\");\n}\ndescriptorElements.add(new DescriptorElement(type, attributes));\n}\n}", "CodeBleu_score": 45.03141565561537}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\tfor (TypeElement annotation : annotations) {\n\t\tif (annotation.getQualifiedName().toString().equals(annotationClass.getCanonicalName())) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 43.00639825160165}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\tfor (TypeElement annotation : annotations) {\n\t\tif (annotation.getQualifiedName().toString().equals(annotationClass.getCanonicalName())) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 43.00639825160165}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\tfor (TypeElement annotation : annotations) {\n\t\tif (annotation.getQualifiedName().toString().equals(annotationClass.getName())) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 42.74977956444374}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"docstatus\": 0 if for_approval else 1,\n        \"status\": \"Open\" if for_approval else (\"Approved\", \"Rejected\"),\n        \"employee\": employee,\n    }\n\n    if for_approval:\n        filters[\"leave_approver\"] = [\"!=\", approver_id]\n\n    return filters\n\n", "CodeBleu_score": 21.14731684053004}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = [\n        [\"Leave Application\", \"docstatus\", \"=\", 1],\n        [\"Leave Application\", \"status\", \"!=\", \"Rejected\"],\n        [\"Leave Application\", \"employee\", \"=\", employee],\n    ]\n    if for_approval:\n        filters.extend(\n            [\n                [\"Leave Application\", \"status\", \"in\", [\"Open\", \"Approved\"]],\n                [\"Leave Application\", \"leave_approver\", \"!=\", approver_id],\n            ]\n        )\n    else:\n        filters.append([\"Leave Application\", \"status\", \"in\", [\"Open\", \"Approved\"]])\n    return filters\n\n", "CodeBleu_score": 24.10405327211283}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"docstatus\": 1,\n        \"status\": [\"!=\", \"Rejected\"],\n        \"employee\": employee,\n    }\n    if for_approval:\n        filters[\"status\"] = \"Open\"\n        filters[\"name\"] = [\"!=\", frappe.db.get_value(\"Leave Application\", {\"employee\": employee, \"status\": \"Open\"})]\n        filters[\"leave_approver\"] = [\"!=\", approver_id] if approver_id else [\"!=\", employee]\n    else:\n        filters[\"status\"] = [\"!=\", \"Cancelled\"]\n    return filters\n\n", "CodeBleu_score": 33.721765903106274}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    leave_balance_map: dict[str, dict[str, float]] = {}\n    leave_details = get_leave_details(employee)\n    leave_balance_map = {\n        leave_type: {\n            \"allocated\": leave_details.get(leave_type).get(\"allocated\"),\n            \"balance\": leave_details.get(leave_type).get(\"balance\"),\n        }\n        for leave_type in leave_details\n    }\n    return leave_balance_map\n\n", "CodeBleu_score": 36.674117435746226}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n\n    leave_balance_map = {}\n\n    # Get the current date.\n    current_date = getdate()\n\n    # Get the leave details.\n    leave_details = get_leave_details(employee, current_date)\n\n    # Construct the leave balance map.\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_details[leave_type][\"allocated\"],\n            \"balance\": leave_details[leave_type][\"balance\"],\n        }\n\n    return leave_balance_map\n\n", "CodeBleu_score": 38.8901183142903}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    leave_balance_map = {}\n    leave_details = get_leave_details(employee)\n    leave_balance_map[\"leave_allocation\"] = leave_details[\"leave_allocation\"]\n    leave_balance_map[\"leave_balance\"] = leave_details[\"leave_balance\"]\n    return leave_balance_map\n\n", "CodeBleu_score": 27.776084253718818}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.db.get_value(\"Employee\", employee, \"holiday_list\")\n    if not holiday_list:\n        return []\n    holidays = (\n        frappe.qb.from_(\n            \"Holiday List Holiday\",\n            \"holiday\",\n        )\n        .select(\"*\")\n        .where(\n            (\n                frappe.qb.from_(\n                    \"Holiday\",\n                    \"holiday\",\n                )\n                .select(\"*\")\n                .where(\n                    (\n                        frappe.qb.from_(\n                            \"Holiday List\",\n                            \"holiday_list\",\n                        )\n                        .select(\"*\")\n                        .where(\n                            (\n                                frappe.qb.from_(\n                                    \"Employee\",\n                                    \"employee\",\n                                )\n                                .select(\"*\")\n                                .where(\n                                    (\n                                        frappe.qb.from_(\n                                            \"Holiday List Employee\",\n                                            \"holiday_list_employee\",\n                                        )\n                                        .select(\"*\")\n                                        .where(\n                                            (\n                                                \"holiday_list_employee.employee = employee.name\"\n                                            )\n                                            & (\n                                                \"holiday_list_employee.holiday_list = holiday_list.name\"\n                                            )\n                                            & (\n                                                \"holiday_list_employee.parent = %(holiday_list)s\"\n                                            )\n                                        )\n                                        .for_update()\n                                    )\n                                )\n                                & (\n                                    \"holiday_list.name = %(holiday_list)s\"\n                                )\n                            )\n                            & (\n                                \"holiday.parent = holiday_list.name\"\n                            )\n                            & (\n                                \"holiday.parenttype = 'Holiday List'\"\n                            )\n                            & (\n                                \"holiday.parentfield = 'holidays'\"\n                            )\n                            & (\n                                \"holiday.holiday_date >= %(start_date)s\"\n                            )\n                            & (\n                                \"holiday.holiday_date <= %(end_date)s\"\n                            )\n                        )\n                        .for_update()\n                    )\n                )\n                .for_update()\n            )\n            & (\n                \"holiday.parent = holiday_list.name\"\n            )\n            & (\n                \"holiday.parenttype = 'Holiday List'\"\n            )\n            & (\n                \"holiday.parentfield = 'holidays'\"\n            )\n            & (\n                \"holiday.weekly_off = 0\"\n            )\n        )\n        .orderby(\n            \"holiday.holiday_date\",\n            Order.asc,\n        )\n        .for_update()\n    )\n    holidays = frappe.db", "CodeBleu_score": 27.507845141923415}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.db.get_value(\"Employee\", employee, \"holiday_list\")\n    if holiday_list:\n        holidays = (\n            frappe.qb.from_((\"Holiday List Holiday\", \"hlh\"))\n            .join(\"Holiday List\", \"hlh.parent\")\n            .where(\n                (\n                    \"hlh.parenttype = 'Holiday List'\"\n                    and \"hlh.parent = %(holiday_list)s\"\n                    and \"hlh.holiday_date >= %(start_date)s\"\n                    and \"hlh.holiday_date <= %(end_date)s\"\n                )\n            )\n            .orderby(\"hlh.holiday_date\")\n            .for_update(of=(\"Holiday List Holiday\", \"hlh\"))\n            .all()\n        )\n        holidays = [\n            {\n                \"name\": strip_html(holiday.name),\n                \"holiday_date\": getdate(holiday.holiday_date),\n                \"description\": strip_html(holiday.description),\n            }\n            for holiday in holidays\n        ]\n        return holidays\n    return []\n\n", "CodeBleu_score": 34.67099514444173}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.db.get_value(\"Employee\", employee, \"holiday_list\")\n    if not holiday_list:\n        return []\n    holidays = frappe.db.sql(\n        \"\"\"\n            SELECT\n                name,\n                holiday_date,\n                description\n            FROM `tabHoliday`\n            WHERE\n                parent=%(holiday_list)s\n                AND holiday_date >= %(start_date)s\n                AND holiday_date <= %(end_date)s\n                AND description != ''\n                AND weekly_off = 0\n            ORDER BY holiday_date ASC\n        \"\"\",\n        values={\n            \"holiday_list\": holiday_list,\n            \"start_date\": getdate(),\n            \"end_date\": add_days(getdate(), 365),\n        },\n        as_dict=True,\n    )\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html(holiday[\"description\"])\n    return holidays\n\n", "CodeBleu_score": 35.787263711231674}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t\n    # Get all employees\n    employees = frappe.get_all(\"Employee\", filters={\"status\": \"Active\"}, fields=[\"name\", \"holiday_list\"])\n\n    # Get all HR Settings\n    hr_settings = frappe.get_all(\"HR Settings\", fields=[\"send_weekly_reminders\", \"frequency_of_reminders\", \"send_reminders_in_advance\", \"number_of_days_to_send_reminders_in_advance\", \"number_of_days_in_advance_to_calculate_reminders\", \"number_of_days_in_advance_to_send_second_reminder\", \"send_reminders_for_holiday_list\"])\n\n    # Get the HR Settings for the first reminder\n    hr_settings_first_reminder = frappe.get_doc(\"HR Settings\", hr_settings[0].name)\n\n    # Get the HR Settings for the second reminder\n    hr_settings_second_reminder = frappe.get_doc(\"HR Settings\", hr_settings[0].name)\n\n    # Iterate through all employees\n    for employee in employees:\n        # Get the holiday list for the employee\n        holiday_list = frappe.get_value(\"Employee\", employee.name, \"holiday_list\")\n\n        # Get the holidays for the employee\n        holidays = get_holidays_for_employee(employee.name, holiday_list)\n\n        # Get the holidays that are in the future\n        future_holidays = [holiday for holiday in holidays if getdate(holiday.holiday_date) > getdate(today())]\n\n        # Get the holidays that are in the past\n        past_holidays = [holiday for holiday in holidays if getdate(holiday.holiday_date) < getdate(today())]\n\n        # Get the holidays that are in the future and are in the holiday list\n        future_holidays_in_holiday_list = [holiday for holiday in future_holidays if holiday.parent == holiday_list]\n\n        # Get the holidays that are in the past and are in the holiday list\n        past_holidays_in_holiday_list = [holiday for holiday in past_holidays if holiday.parent == holiday_list]\n\n        # Get the holidays that are in the future and are not in the holiday list\n        future_holidays_not_", "CodeBleu_score": 27.04964278029218}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    settings = frappe.get_doc(\"HR Settings\")\n    if settings.send_weekly_reminder and settings.weekly_reminder_frequency == \"Weekly\":\n        send_weekly_reminders()\n\n", "CodeBleu_score": 13.892307107467788}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    holiday_settings = frappe.get_doc(\"HR Settings\")\n    if holiday_settings.send_weekly_holiday_reminders and holiday_settings.weekly_holiday_day == \"Friday\":\n        send_reminders_for_frequency(\"weekly\")\n\n", "CodeBleu_score": 18.198105709274962}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t\n    if self.self_rating_1:\n        self.self_appraisal_score = round(\n            self.self_rating_1 * self.self_rating_1_weightage / 100, 2\n        )\n    else:\n        self.self_appraisal_score = 0\n\n    if self.self_rating_2:\n        self.self_appraisal_score += round(\n            self.self_rating_2 * self.self_rating_2_weightage / 100, 2\n        )\n    if self.self_rating_3:\n        self.self_appraisal_score += round(\n            self.self_rating_3 * self.self_rating_3_weightage / 100, 2\n        )\n    if self.self_rating_4:\n        self.self_appraisal_score += round(\n            self.self_rating_4 * self.self_rating_4_weightage / 100, 2\n        )\n    if self.self_rating_5:\n        self.self_appraisal_score += round(\n            self.self_rating_5 * self.self_rating_5_weightage / 100, 2\n        )\n    if self.self_rating_6:\n        self.self_appraisal_score += round(\n            self.self_rating_6 * self.self_rating_6_weightage / 100, 2\n        )\n    if self.self_rating_7:\n        self.self_appraisal_score += round(\n            self.self_rating_7 * self.self_rating_7_weightage / 100, 2\n        )\n    if self.self_rating_8:\n        self.self_appraisal_score += round(\n            self.self_rating_8 * self.self_rating_8_weightage / 100, 2\n        )\n    if self.self_rating_9:\n        self.self_appraisal_score += round(\n            self.self_rating_9 * self.self_rating_9_weightage / 100, 2\n        )\n    if self.self_rating_10:\n        self.self_appra", "CodeBleu_score": 17.489398828712005}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self_ratings = frappe.db.sql(\n        \"\"\"\n        SELECT\n            sr.name, sr.rating, sr.weightage\n        FROM `tabSelf Rating` sr\n        WHERE sr.parent = %(employee)s\n        \"\"\",\n        values={\n            \"employee\": self.employee\n        },\n        as_dict=True\n    )\n    self_appraisal_score = 0\n    for rating in self_ratings:\n        self_appraisal_score += (rating.rating * rating.weightage) / 100\n    self.self_appraisal_score = flt(self_appraisal_score, 2)\n    self.db_update()\n\n", "CodeBleu_score": 20.663204850046014}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self_appraisal_score = 0\n    for rating in self.self_rating_weights:\n        self_appraisal_score += (rating.rating * rating.weightage) / 100\n\n    self.self_appraisal_score = round(self_appraisal_score, 2)\n\n", "CodeBleu_score": 22.23752463654331}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t\n    if self.final_score:\n        return\n\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n\n    if appraisal_cycle.final_score_formula:\n        # Gather necessary data\n        total_score = 0\n        average_feedback_score = 0\n        self_appraisal_score = 0\n\n        for appraisal in self.appraisal_details:\n            total_score += appraisal.score\n            average_feedback_score += appraisal.feedback_score\n            self_appraisal_score += appraisal.self_appraisal_score\n\n        # Sanitize formula\n        formula = sanitize_expression(appraisal_cycle.final_score_formula)\n\n        # Evaluate formula\n        final_score = eval(formula)\n    else:\n        # Calculate final score as average of total score, average feedback score, and self-appraisal score\n        final_score = (\n            (total_score / len(self.appraisal_details))\n            + (average_feedback_score / len(self.appraisal_details))\n            + (self_appraisal_score / len(self.appraisal_details))\n        ) / 3\n\n    # Set final score with appropriate precision\n    self.final_score = flt(final_score, 2)\n\n", "CodeBleu_score": 37.93302467245372}, {"code": "def calculate_final_score(self)\n\t\n    if self.appraisal_template:\n        appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_template)\n        if appraisal_cycle.formula:\n            data = get_data_for_formula(self)\n            formula = sanitize_expression(appraisal_cycle.formula)\n            score = frappe.safe_eval(formula, None, data)\n            self.final_score = flt(score, 1)\n        else:\n            self.final_score = (\n                self.total_score\n                + self.average_feedback_score\n                + self.self_appraisal_score\n            ) / 3\n        self.final_score = flt(self.final_score, 1)\n\n", "CodeBleu_score": 33.86541361115603}, {"code": "def calculate_final_score(self)\n\t\n    # Get the appraisal cycle document\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    # If the final score is calculated based on a formula\n    if appraisal_cycle.formula:\n        # Get the formula\n        formula = appraisal_cycle.formula\n        # Get the data that will be used in the formula\n        data = get_data(self)\n        # Sanitize the formula\n        formula = sanitize_expression(formula)\n        # Evaluate the formula\n        final_score = flt(frappe.safe_eval(formula, None, data))\n    # Otherwise, calculate the final score as the average of the total score, average feedback score, and self-appraisal score\n    else:\n        # Get the average of the total score, average feedback score, and self-appraisal score\n        final_score = (\n            self.total_score / 100\n            + self.average_feedback_score / 100\n            + self.self_appraisal_score / 100\n        ) / 3\n    # Set the final score with the appropriate precision\n    self.final_score = flt(final_score * 100, self.precision)\n\n", "CodeBleu_score": 26.859229705156707}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\t\n    if self.status == \"Present\" or self.status == \"Half Day\":\n        if getdate(self.attendance_date) > getdate(nowdate()):\n            frappe.throw(\n                _(\"Attendance cannot be marked for a future date.\"))\n        if getdate(self.attendance_date) < getdate(self.employee_id.date_of_joining):\n            frappe.throw(\n                _(\"Attendance cannot be marked for a date earlier than the employee's joining date.\"))\n    if self.status == \"On Leave\":\n        leave_record = frappe.db.sql(\"\"\"select name from `tabLeave Application` where employee = %s and %s between from_date and to_date and docstatus = 1\"\"\", (self.employee, self.attendance_date))\n        if not leave_record:\n            frappe.throw(_(\"Attendance for employee {0} cannot be marked as On Leave for a date {1} without an existing leave application.\").format(self.employee, format_date(self.attendance_date)))\n\n", "CodeBleu_score": 41.75715077229033}, {"code": "def validate_attendance_date(self)\n\t\n\n    if self.status != \"On Leave\" and getdate(self.attendance_date) > getdate(nowdate()):\n        frappe.throw(\n            _(\"Attendance date cannot be a future date. Please select a past date.\")\n        )\n\n    if getdate(self.attendance_date) < getdate(self.employee.date_of_joining):\n        frappe.throw(\n            _(\n                \"Attendance date cannot be before employee's joining date. Please select a date after {0}\"\n            ).format(format_date(self.employee.date_of_joining))\n        )\n\n", "CodeBleu_score": 35.12314617349577}, {"code": "def validate_attendance_date(self)\n\t\n\n    if self.attendance_date > nowdate():\n        if self.status != \"On Leave\":\n            frappe.throw(\n                _(\"Attendance can not be marked for future dates. Please select On Leave.\")\n            )\n        elif self.status == \"On Leave\" and not self.leave_application:\n            frappe.throw(\n                _(\n                    \"Attendance can not be marked for future dates unless there is a leave application.\"\n                )\n            )\n    if self.attendance_date < self.employee.date_of_joining:\n        frappe.throw(\n            _(\n                \"Attendance can not be marked for a date earlier than the employee's joining date.\"\n            )\n        )\n\n", "CodeBleu_score": 34.297469543173456}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\t\n    if not self.employee:\n        frappe.throw(_(\"Employee is mandatory\"))\n    if not self.attendance_date:\n        frappe.throw(_(\"Attendance Date is mandatory\"))\n\n    filters = {\n        \"employee\": self.employee,\n        \"attendance_date\": self.attendance_date,\n        \"docstatus\": 1,\n    }\n    if self.name:\n        filters[\"name\"] = (\"!=\", self.name)\n    if self.docstatus == 2:\n        filters[\"docstatus\"] = 2\n\n    attendance = frappe.get_all(\"Attendance\", filters=filters)\n    if attendance:\n        attendance = attendance[0]\n        frappe.throw(\n            _(\n                \"Attendance record already exists for employee {0} on {1}. Please refer to {2}\"\n            ).format(\n                get_link_to_form(\"Employee\", self.employee),\n                format_date(self.attendance_date),\n                get_link_to_form(\"Attendance\", attendance.name),\n            )\n        )\n\n", "CodeBleu_score": 34.53174595143927}, {"code": "def validate_duplicate_record(self)\n\t\n    attendance_records = frappe.db.sql(\n        \"\"\"\n        SELECT name\n        FROM `tabAttendance`\n        WHERE employee = %s AND attendance_date = %s AND name != %s\n        \"\"\",\n        (self.employee, self.attendance_date, self.name),\n        as_dict=1,\n    )\n    if attendance_records:\n        frappe.throw(\n            _(\n                \"Attendance record for employee {0} already exists on {1}. Please check {2}.\"\n            ).format(\n                get_link_to_form(\"Employee\", self.employee),\n                format_date(self.attendance_date),\n                get_link_to_form(\"Attendance\", attendance_records[0].name),\n            )\n        )\n\n", "CodeBleu_score": 33.97990137772585}, {"code": "def validate_duplicate_record(self)\n\t\n    if not self.employee:\n        frappe.throw(_(\"Employee is required\"))\n    if not self.attendance_date:\n        frappe.throw(_(\"Attendance date is required\"))\n    if not self.status:\n        frappe.throw(_(\"Status is required\"))\n    if not self.shift:\n        frappe.throw(_(\"Shift is required\"))\n    if not self.company:\n        frappe.throw(_(\"Company is required\"))\n\n    # check if employee has already submitted an attendance record for the given date\n    attendance_record = frappe.db.exists(\n        \"Attendance\",\n        {\n            \"employee\": self.employee,\n            \"attendance_date\": self.attendance_date,\n            \"docstatus\": 1,\n        },\n    )\n    if attendance_record:\n        frappe.throw(\n            _(\n                \"Attendance record already exists for employee {0} on {1}. Please update the existing record via {2}\"\n            ).format(\n                get_link_to_form(\"Employee\", self.employee),\n                format_date(self.attendance_date),\n                get_link_to_form(\"Attendance\", attendance_record),\n            )\n        )\n\n", "CodeBleu_score": 36.17409199913402}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t\n    if self.send_email_alert:\n        if self.email_group:\n            email_group = frappe.get_doc(\"Email Group\", self.email_group)\n            if email_group:\n                if email_group.email_group_type == \"Communication\":\n                    # Get message details\n                    message_list = frappe.db.sql(\n                        \"\"\"SELECT name, message_id, subject, content, sender, recipients, communication_date, communication_medium, communication_type, status, reference_doctype, reference_name, email_status, email_account, reference_owner FROM `tabCommunication` WHERE email_status='Replied' AND communication_medium='Email' AND communication_type='Communication' AND reference_doctype='{0}' AND reference_name='{1}'\"\"\".format(\n                            self.reference_doctype, self.reference_name\n                        ),\n                        as_dict=True,\n                    )\n                    if message_list:\n                        # Get email addresses of users in the specified group\n                        email_list = frappe.db.sql(\n                            \"\"\"SELECT DISTINCT email_id FROM `tabEmail Group Member` WHERE parent='{0}'\"\"\".format(\n                                self.email_group\n                            ),\n                            as_dict=True,\n                        )\n                        if email_list:\n                            # Compose email\n                            email_message = \"\"\n                            for message in message_list:\n                                # Get sender's name\n                                sender_name = frappe.db.sql(\n                                    \"\"\"SELECT full_name FROM `tabUser` WHERE name='{0}'\"\"\".format(\n                                        message.sender\n                                    ),\n                                    as_dict=True,\n                                )\n                                if sender_name:\n                                    sender_name = sender_name[0].full_name\n                                else:\n                                    sender_name = \"\"\n                                # Get recipients' names\n                                recipients_names = frappe.db.sql(\n                                    \"\"\"SELECT full_name FROM `tabUser` WHERE name IN ('{0}')\"\"\".format(\n                                        \"', '\".join(message.recipients)\n                                    ),\n                                    as_dict=True,\n                                )\n                                if recipients_names:\n                                    recipients_names = \", \".join(\n                                        [\n                                            recipients_name.full_name\n                                            for recipients_name in recipients_names\n                                        ]\n                                    )\n                                else:\n                                    recipients_names = \"\"\n                                # Get the email addresses of the recipients\n                                recipients_emails = frappe.db.sql(\n                                    \"\"\"SELECT email_id FROM `tabUser` WHERE name", "CodeBleu_score": 29.212715212311018}, {"code": "def send_summary(self)\n\t\n    # Get the group name from the doctype\n    group_name = self.group\n    # Get the list of members in the group\n    members = frappe.get_all(\"Members\", filters={\"parent\": group_name}, fields=[\"member\"])\n    # Get the email addresses of the members\n    email_list = []\n    for member in members:\n        email_list.append(frappe.db.get_value(\"User\", member.member, \"email\"))\n    # Get the replies from the group\n    replies = frappe.get_all(\n        \"Replies\", filters={\"parent\": group_name}, fields=[\"name\", \"message\", \"date\"]\n    )\n    # Create a list of replies that will be sent in the email\n    reply_list = []\n    for reply in replies:\n        # Get the message from the reply\n        message = frappe.db.get_value(\"Replies\", reply.name, \"message\")\n        # Get the date from the reply\n        date = frappe.db.get_value(\"Replies\", reply.name, \"date\")\n        # Parse the message\n        parsed_message = EmailReplyParser.parse_reply(message)\n        # Append the parsed message to the reply list\n        reply_list.append(parsed_message)\n    # Create a string with the replies\n    reply_string = \"\"\n    for reply in reply_list:\n        reply_string += reply\n    # Create the email\n    email = frappe.new_doc(\"Email\")\n    email.sender = \"<EMAIL>\"\n    email.subject = \"Summary of replies to \" + group_name\n    email.content = reply_string\n    email.recipients = email_list\n    email.send()\n    # Update the status of the summary to \"Sent\"\n    frappe.db.set_value(\"Summary\", self.name, \"status\", \"Sent\")\n\n", "CodeBleu_score": 27.58868779114416}, {"code": "def send_summary(self)\n\t\n    if self.status == \"Draft\":\n        if self.send_to_group:\n            group = frappe.get_doc(\"Email Group\", self.send_to_group)\n            if group.email_group_type == \"One-Off\":\n                self.recipients = group.email_group_members\n                self.send_emails()\n            else:\n                self.recipients = get_group_members(self.send_to_group)\n                self.send_emails()\n            self.status = \"Sent\"\n            self.save()\n        else:\n            frappe.throw(_(\"Please select a group to send the summary.\"))\n    else:\n        frappe.throw(_(\"The summary has already been sent.\"))\n\n", "CodeBleu_score": 35.0280750923563}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t\n    if not self.job_applicant:\n        return\n\n    duplicate_interview = frappe.db.exists(\n        \"Interview\",\n        {\n            \"job_applicant\": self.job_applicant,\n            \"round\": self.round,\n            \"name\": (\"!=\", self.name),\n        },\n    )\n\n    if duplicate_interview:\n        duplicate_interview_record = frappe.get_doc(\n            \"Interview\", duplicate_interview\n        )\n        duplicate_interview_record_link = get_link_to_form(\n            \"Interview\", duplicate_interview_record.name\n        )\n        job_applicant_link = get_link_to_form(\"Job Applicant\", self.job_applicant)\n        raise frappe.ValidationError(\n            _(\n                \"The job applicant {0} has already been interviewed for the round {1} in the interview record {2}. Please check the interview record {3} for more details.\"\n            ).format(\n                job_applicant_link,\n                self.round,\n                duplicate_interview_record_link,\n                duplicate_interview_record_link,\n            )\n        )\n\n", "CodeBleu_score": 43.23859657851434}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.job_applicant:\n        existing_interview_record = frappe.db.sql(\n            \"\"\"\n            SELECT name\n            FROM `tabInterview`\n            WHERE\n                job_applicant=%(job_applicant)s\n                AND name != %(name)s\n                AND interview_round=%(interview_round)s\n                AND docstatus=1\n            \"\"\",\n            values={\n                \"job_applicant\": self.job_applicant,\n                \"name\": self.name,\n                \"interview_round\": self.interview_round,\n            },\n        )\n        if existing_interview_record:\n            existing_interview_record = get_link_to_form(\n                \"Interview\", existing_interview_record[0][0]\n            )\n            frappe.throw(\n                _(\n                    \"You have already applied for this interview round. Please check {0} to see if you have already submitted an interview for this round.\".format(\n                        existing_interview_record\n                    )\n                )\n            )\n\n", "CodeBleu_score": 38.321301013681996}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.job_applicant:\n        # get all interview records for this job applicant\n        existing_interview_records = frappe.get_all(\n            \"Interview\",\n            filters={\n                \"job_applicant\": self.job_applicant,\n                \"interview_round\": self.interview_round,\n            },\n        )\n        # if there are existing interview records, check if this is a new record or an existing record\n        if existing_interview_records:\n            # if this is a new record, no problem\n            if not self.name:\n                return\n            # if this is an existing record, check if it's the same as the existing record\n            for existing_interview_record in existing_interview_records:\n                if self.name == existing_interview_record.name:\n                    return\n            # if this is an existing record, but not the same as the existing record, raise an exception\n            raise frappe.ValidationError(\n                _(\n                    \"Job Applicant {0} is already scheduled for interview round {1}. See {2} for details.\"\n                ).format(\n                    get_link_to_form(\"Job Applicant\", self.job_applicant),\n                    get_link_to_form(\"Interview Round\", self.interview_round),\n                    get_link_to_form(\"Interview\", existing_interview_record.name),\n                )\n            )\n\n", "CodeBleu_score": 41.182547781084956}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\t\n    total_ratings = 0\n    total_assessments = 0\n    for assessment in self.skill_assessments:\n        if assessment.rating:\n            total_ratings += assessment.rating\n            total_assessments += 1\n\n    if total_assessments:\n        self.average_rating = total_ratings / total_assessments\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 25.63552249699782}, {"code": "def calculate_average_rating(self)\n\t\n\n    if self.get(\"skill_assessments\"):\n        ratings = [\n            d.rating\n            for d in self.skill_assessments\n            if d.rating and d.skill_level == self.skill_level\n        ]\n        self.average_rating = flt(sum(ratings)) / len(ratings)\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 28.08758030718716}, {"code": "def calculate_average_rating(self)\n\t\n    average_rating = frappe.db.sql(\n        \"\"\"SELECT ROUND(AVG(rating), 1) AS average_rating\n        FROM `tabSkill Assessment`\n        WHERE parenttype = 'Job Applicant' AND parent = %s AND rating IS NOT NULL\"\"\",\n        (self.name),\n        as_dict=1,\n    )\n    if average_rating:\n        self.average_rating = average_rating[0].average_rating\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 15.170741187312084}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    interview = frappe.new_doc(\"Interview\")\n    interview.designation = doc[\"designation\"]\n    interview.round = doc[\"round\"]\n    interview.save()\n    for interviewer in doc[\"interviewers\"]:\n        interview.append(\"interviewers\", {\"interviewer\": interviewer})\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 50.532995555061156}, {"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc[\"interview_round\"]\n    interview.designation = doc[\"designation\"]\n    interview.insert()\n    if doc[\"interviewers\"] is not None:\n        for interviewer in doc[\"interviewers\"]:\n            interview.append(\"interviewers\", interviewer)\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 50.48499802505258}, {"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc[\"interview_round\"]\n    interview.designation = doc[\"designation\"]\n    if doc.get(\"interviewers\"):\n        for interviewer in doc[\"interviewers\"]:\n            interview.append(\"interviewers\", {\n                \"interviewer\": interviewer\n            })\n    interview.insert()\n    return interview\n\n", "CodeBleu_score": 50.60092157185599}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offer_list = frappe.db.sql(\n        \"\"\"SELECT name FROM `tabJob Offer` WHERE designation = %(designation)s AND company = %(company)s AND posting_date BETWEEN %(from_date)s AND %(to_date)s AND status = '1'\"\"\", {\n            'designation': self.designation,\n            'company': self.company,\n            'from_date': from_date,\n            'to_date': to_date\n        }, as_dict=True)\n    return job_offer_list\n\n", "CodeBleu_score": 44.424610992811495}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offer_list = frappe.db.sql(\n        \"\"\"SELECT name FROM `tabJob Offer` WHERE designation = %s AND company = %s AND docstatus = 1 AND posting_date BETWEEN %s AND %s\"\"\",\n        (self.designation, self.company, from_date, to_date),\n        as_dict=True,\n    )\n    job_offer_list = [x.name for x in job_offer_list]\n    return job_offer_list\n\n", "CodeBleu_score": 36.119949767484435}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offer = frappe.db.sql(\n        \"\"\"select name from `tabJob Offer` where designation = %s and company = %s and status = '1' and posting_date between %s and %s\"\"\", (self.designation, self.company, from_date, to_date))\n    return job_offer\n\n", "CodeBleu_score": 34.66738781190501}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if not company and not department:\n        return 0\n    if not company:\n        return 100 * (\n            frappe.db.count(\"Job Offer\", {\"department\": department, \"status\": \"Accepted\"})\n            / frappe.db.count(\"Job Offer\", {\"department\": department})\n        )\n    if not department:\n        return 100 * (\n            frappe.db.count(\"Job Offer\", {\"company\": company, \"status\": \"Accepted\"})\n            / frappe.db.count(\"Job Offer\", {\"company\": company})\n        )\n    return 100 * (\n        frappe.db.count(\n            \"Job Offer\",\n            {\"company\": company, \"department\": department, \"status\": \"Accepted\"},\n        )\n        / frappe.db.count(\"Job Offer\", {\"company\": company, \"department\": department})\n    )\n\n", "CodeBleu_score": 20.55488822690372}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\"\"\n    if not company:\n        company = frappe.db.get_single_value(\"Global Defaults\", \"default_company\")\n\n    if not department:\n        department = frappe.db.get_single_value(\"Global Defaults\", \"default_department\")\n\n    if not company or not department:\n        return None\n\n    total_offers = frappe.db.count(\"Job Offer\", {\"company\": company, \"department\": department, \"docstatus\": 1})\n    accepted_offers = frappe.db.count(\n        \"Job Offer\",\n        {\n            \"company\": company,\n            \"department\": department,\n            \"docstatus\": 1,\n            \"status\": \"Accepted\",\n        },\n    )\n\n    if total_offers == 0:\n        return 0\n\n    return flt(accepted_offers) / flt(total_offers) * 100\n\n", "CodeBleu_score": 38.777332694981666}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if not company and not department:\n        return 0\n    total_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1})\n    accepted_offers = frappe.db.count(\n        \"Job Offer\",\n        filters={\n            \"docstatus\": 1,\n            \"status\": \"Accepted\",\n            \"company\": company,\n            \"department\": department,\n        },\n    )\n    if total_offers == 0:\n        return 0\n    return flt(accepted_offers) / flt(total_offers) * 100\n\n", "CodeBleu_score": 40.94087219716355}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn new ResponseEntity<>(result, HttpStatus.OK);\n}", "CodeBleu_score": 81.08095906975439}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\treturn new ResponseEntity<>(result, HttpStatus.OK);\n}", "CodeBleu_score": 81.08095906975439}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = this.employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn new ResponseEntity<>(result, HttpStatus.OK);\n}", "CodeBleu_score": 74.86454793718032}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\tfinal Optional<CompanyStaff> companyStaff = companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\n\tif (!companyStaff.isPresent())\n\t\treturn new ErrorResult(Messages.notFound(\"Staff\"));\n\n\tfinal CompanyStaff companyStaffToUpdate = companyStaff.get();\n\n\tfinal Result result = BusinessRules.run(checkIfPasswordsMatch(companyStaffForUpdateDto.getPassword(), companyStaffToUpdate.getPassword()));\n\n\tif (!result.isSuccess())\n\t\treturn result;\n\n\tcompanyStaffToUpdate.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaffToUpdate.setLastName(companyStaffForUpdateDto.getLastName());\n\n\tcompanyStaffDao.save(companyStaffToUpdate);\n\n\treturn new SuccessResult(Messages.updated(\"Staff\"));\n}", "CodeBleu_score": 65.83929165161682}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\tfinal Optional<CompanyStaff> result = this.companyStaffDao.findById(companyStaffForUpdateDto.getStaffId());\n\tif (result.isEmpty())\n\t\treturn ErrorResult.notFound(Messages.notFound(\"Staff\"));\n\n\tfinal CompanyStaff companyStaff = result.get();\n\n\tfinal Result passwordResult = this.checkPassword(companyStaff, companyStaffForUpdateDto.getPassword());\n\tif (!passwordResult.isSuccess())\n\t\treturn passwordResult;\n\n\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\n\tthis.companyStaffDao.save(companyStaff);\n\n\treturn new SuccessResult(Messages.updated(\"Staff\"));\n}", "CodeBleu_score": 56.40938232651268}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\tfinal Optional<CompanyStaff> companyStaff = companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\n\tif (!companyStaff.isPresent()) {\n\t\treturn new ErrorResult(Messages.notFound(\"Company Staff\"));\n\t}\n\n\tfinal CompanyStaff companyStaffToUpdate = companyStaff.get();\n\n\tfinal boolean doesCompanyStaffMatchPassword = companyStaffToUpdate.getPassword().equals(companyStaffForUpdateDto.getPassword());\n\n\tif (!doesCompanyStaffMatchPassword) {\n\t\treturn new ErrorResult(Messages.passwordsNotMatch());\n\t}\n\n\tcompanyStaffToUpdate.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaffToUpdate.setLastName(companyStaffForUpdateDto.getLastName());\n\n\tcompanyStaffDao.save(companyStaffToUpdate);\n\n\treturn new SuccessResult(Messages.updated(\"Company Staff\"));\n}", "CodeBleu_score": 63.358562046983025}]}
