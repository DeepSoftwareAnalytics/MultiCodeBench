{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t\n    # retrieve attachment IDs from HTTP request arguments\n    attachment_ids = args.get('attachment_ids')\n    if not attachment_ids:\n        return request.not_found()\n    attachment_ids = attachment_ids.split(',')\n\n    # verify read access rights and rules for the attachments\n    attachments = request.env['ir.attachment'].browse(attachment_ids)\n    attachments.check_access_rights('read')\n    attachments.check_access_rule('read')\n\n    # build zip file from the attachments' content\n    zip_file = io.BytesIO()\n    with zipfile.ZipFile(zip_file, 'w', zipfile.ZIP_DEFLATED) as zip_file_zip:\n        for attachment in attachments:\n            zip_file_zip.writestr(attachment.datas_fname, base64.b64decode(attachment.datas))\n\n    # prepare HTTP headers for the zip file\n    zip_file.seek(0)\n    zip_file_size = zip_file.tell()\n    zip_file.seek(0)\n    headers = [\n        ('Content-Type', 'application/zip'),\n        ('Content-Length', zip_file_size),\n        ('Content-Disposition', content_disposition(attachment.datas_fname))\n    ]\n\n    return request.make_response(zip_file.read(), headers=headers)\n\n", "CodeBleu_score": 37.631508944327074}, {"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = args.get('attachment_ids')\n    if not attachment_ids:\n        return request.not_found()\n    attachment_ids = attachment_ids.split(',')\n    attachment_ids = [int(i) for i in attachment_ids]\n    attachments = request.env['ir.attachment'].browse(attachment_ids)\n    if not attachments.filtered(lambda a: a.check_access_rights('read') and a.check_access_rule('read')):\n        return request.not_found()\n    zip_file = io.BytesIO()\n    with zipfile.ZipFile(zip_file, 'w') as zip_file:\n        for attachment in attachments:\n            zip_file.writestr(attachment.datas_fname, base64.b64decode(attachment.datas))\n    zip_file.seek(0)\n    headers = [\n        ('Content-Type', 'application/zip'),\n        ('Content-Length', len(zip_file.read())),\n        ('Content-Disposition', content_disposition(f'{self.name}.zip')),\n    ]\n    return request.make_response(zip_file.read(), headers=headers)\n\n", "CodeBleu_score": 36.362797139973466}, {"code": "def export_zip_documents(self, **args)\n\t\n    # retrieve attachment IDs from HTTP request arguments\n    attachment_ids = args.get('attachment_ids')\n    if not attachment_ids:\n        return request.not_found()\n    attachment_ids = attachment_ids.split(',')\n    try:\n        attachment_ids = [int(id) for id in attachment_ids]\n    except ValueError:\n        return request.not_found()\n    # verify read access rights and rules for the attachments\n    attachments = request.env['ir.attachment'].browse(attachment_ids)\n    if not attachments.check_access_rights('read', raise_exception=False):\n        return request.not_found()\n    if not attachments.check_access_rule('read'):\n        return request.not_found()\n    # build a zip file from the attachments' content\n    zip_file = io.BytesIO()\n    with zipfile.ZipFile(zip_file, 'w') as zip_file_zip:\n        for attachment in attachments:\n            zip_file_zip.writestr(attachment.datas_fname, base64.b64decode(attachment.datas))\n    zip_file.seek(0)\n    # prepare HTTP headers for the zip file\n    zip_file_name = '%s.zip' % content_disposition(self.attachment_filename)\n    headers = [\n        ('Content-Type', 'application/zip'),\n        ('Content-Length', len(zip_file.getvalue())),\n        ('Content-Disposition', content_disposition(zip_file_name)),\n    ]\n    # return the zip file as an HTTP response\n    return request.make_response(zip_file.getvalue(), headers=headers)\n\n", "CodeBleu_score": 35.53163237231279}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(CustomerPortal, self)._prepare_home_portal_values(counters)\n    # add invoice and bill counts to values\n    Invoice = request.env['account.move']\n    Bill = request.env['account.move']\n    domain = [\n        ('partner_id', '=', request.env.user.partner_id.id),\n        ('state', 'in', ['draft', 'open', 'paid']),\n        ('type', '=', 'out_invoice')\n    ]\n    try:\n        Invoice.check_access_rights('read')\n        Invoice.check_access_rule(domain)\n    except AccessError:\n        pass\n    else:\n        values['invoice_count'] = Invoice.search_count(domain)\n    domain = [\n        ('partner_id', '=', request.env.user.partner_id.id),\n        ('state', 'in', ['draft', 'open', 'paid']),\n        ('type', '=', 'in_invoice')\n    ]\n    try:\n        Bill.check_access_rights('read')\n        Bill.check_access_rule(domain)\n    except AccessError:\n        pass\n    else:\n        values['bill_count'] = Bill.search_count(domain)\n    return values\n\n", "CodeBleu_score": 34.864693180450125}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(CustomerPortal, self)._prepare_home_portal_values(counters)\n    if request.env.user.has_group('account.group_account_invoice'):\n        Invoice = request.env['account.move']\n        domain = [\n            ('partner_id', '=', request.env.user.partner_id.id),\n            ('state', 'in', ['draft', 'open', 'paid']),\n        ]\n        search_count = Invoice.search_count\n        # replace the domain of the search with a custom one\n        Invoice = Invoice.with_context(\n            active_test=False,\n            auth_user_id=request.env.user.id,\n        )\n        values['invoice_count'] = search_count(expression.AND([domain, [('type', '=', 'out_invoice')]]))\n        values['bill_count'] = search_count(expression.AND([domain, [('type', '=', 'in_invoice')]]))\n    return values\n\n", "CodeBleu_score": 35.13524937654397}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(CustomerPortal, self)._prepare_home_portal_values(counters)\n    if request.env.user.has_group('account.group_account_invoice'):\n        Invoice = request.env['account.move'].with_context(default_type='out_invoice')\n        Bill = request.env['account.move'].with_context(default_type='in_invoice')\n        domain = [\n            ('partner_id', '=', request.env.user.partner_id.id),\n            ('state', 'not in', ['draft', 'cancel'])\n        ]\n        search_count = Invoice.search_count\n        if request.env.user.has_group('account.group_account_invoice'):\n            search_count += Bill.search_count\n        values.update({\n            'invoice_count': search_count(domain),\n            'bill_count': search_count(domain),\n        })\n    return values\n\n", "CodeBleu_score": 35.98343482892937}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    # clean context and session\n    # clean context and session\n    request.env = request.env(user=request.env.user)\n    values = {}\n    domain = []\n    archive_groups = self._get_archive_groups('account.invoice')\n    if date_begin and date_end:\n        domain += [('create_date', '>', date_begin), ('create_date', '<=', date_end)]\n\n    searchbar_sortings = {\n        'date': {'label': _('Invoice Date'), 'order': 'date_invoice desc'},\n        'customer': {'label': _('Customer'), 'order': 'partner_id'},\n       'status': {'label': _('Status'), 'order':'state'},\n        'amount': {'label': _('Amount'), 'order': 'amount_total desc'},\n    }\n    # default sort by order\n    if not sortby:\n        sortby = 'date'\n    order = searchbar_sortings[sortby]['order']\n\n    archive_groups['ids'] = [int(id) for id in archive_groups['ids']]\n    if filterby and filterby in archive_groups['ids']:\n        domain += [('id', 'in', archive_groups[filterby])]\n\n    # count for pager\n    invoice_count = request.env['account.invoice'].search_count(domain)\n    # make pager\n    pager = portal_pager(\n        url=\"/my/invoices\",\n        url_args={'date_begin': date_begin, 'date_end': date_end,'sortby': sortby, 'filterby': filterby},\n        total=invoice_count,\n        page=page,\n        step=self._items_per_page\n    )\n    # search the invoices\n    invoices = request.env['account.invoice'].search(domain, order=order, limit=self._items_per_page, offset=pager['offset'])\n    request.session['my_invoices_history'] = invoices.ids[:100]\n\n    values.update({\n        'date': date_begin,\n        'invoices': invoices,\n        'page_name': 'invoice',\n        'pager': pager,\n        'archive_groups': archive_groups,\n        'default_url': '/my/invoices',\n       'searchbar_sortings': searchbar_sortings,\n       'sortby': sortby,\n    })\n    if 'error_message' in request.session", "CodeBleu_score": 39.47743757767972}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = {}\n    domain = []\n    archive_groups = self._get_archive_groups('invoice.invoice', domain)\n    if date_begin and date_end:\n        domain += [('create_date', '>', date_begin), ('create_date', '<=', date_end)]\n\n    searchbar_sortings = {\n        'date': {'label': _('Invoice Date'), 'order': 'date_invoice desc'},\n        'customer': {'label': _('Customer'), 'order': 'partner_id'},\n        'amount': {'label': _('Amount'), 'order': 'amount_total desc'},\n    }\n    # default sort by order\n    if not sortby:\n        sortby = 'date'\n    order = searchbar_sortings[sortby]['order']\n\n    # default filter by state\n    if not filterby:\n        filterby = 'all'\n    domain += [('state', 'in', ['open', 'paid'])]\n\n    # count for pager\n    invoice_count = request.env['account.invoice'].search_count(domain)\n    # make pager\n    pager = portal_pager(\n        url=\"/my/invoices\",\n        url_args={'date_begin': date_begin, 'date_end': date_end,'sortby': sortby},\n        total=invoice_count,\n        page=page,\n        step=self._items_per_page\n    )\n    # search the invoices\n    invoices = request.env['account.invoice'].search(domain, order=order, limit=self._items_per_page, offset=pager['offset'])\n    request.session['my_invoices_history'] = invoices.ids[:100]\n\n    values.update({\n        'date': date_begin,\n        'date_end': date_end,\n        'invoices': invoices,\n        'page_name': 'invoice',\n        'pager': pager,\n        'archive_groups': archive_groups,\n        'default_url': '/my/invoices',\n       'searchbar_sortings': searchbar_sortings,\n       'sortby': sortby,\n    })\n    if 'error_message' in kw:\n        values['error'] = kw['error_message']\n    return request.render(\"account.portal_my_invoices\", values)\n\n", "CodeBleu_score": 42.34608515627705}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    # clean context and session\n    request.env = request.env(context=dict(request.env.context, show_address=True, no_tag_br=True))\n    request.session.update(\n        my_invoices_history=[],\n        my_invoices_date_begin=None,\n        my_invoices_date_end=None,\n        my_invoices_sortby=None,\n        my_invoices_filterby=None,\n    )\n\n    # search the invoices\n    Invoices = request.env['account.invoice'].sudo().search([('partner_id', '=', request.env.user.partner_id.id)])\n\n    # default sort by date\n    if not sortby:\n        sortby = 'date'\n    sort_param = {'date': {'label': _('Invoice Date'), 'order': 'date_invoice desc'},\n                  'name': {'label': _('Reference'), 'order': 'name'},\n                 'state': {'label': _('Status'), 'order':'state'},\n                  'amount': {'label': _('Amount'), 'order': 'amount_total desc'},\n                  'type': {'label': _('Type'), 'order': 'type'},\n                  }\n\n    # default filter by all\n    if not filterby:\n        filterby = 'all'\n    filter_param = {'all': {'label': _('All'), 'domain': []},\n                    'open': {'label': _('Open'), 'domain': [('state', 'in', ('draft', 'open'))]},\n                    'paid': {'label': _('Paid'), 'domain': [('state', '=', 'paid')]},\n                    'overdue': {'label': _('Overdue'), 'domain': [('state', '=', 'open'), ('date_due', '<', fields.Date.today())]},\n                    }\n\n    # count for pager\n    invoice_count = len(Invoices)\n    pager = portal_pager(\n        url=\"/my/invoices\",\n        url_args={'date_begin': date_begin, 'date_end': date_end,'sortby': sortby, 'filterby': filterby},\n        total=invoice_count,\n        page=page,\n        step=self._items_per_page\n    )\n\n    # content according to pager and archive selected\n    invoices = Invoices.search(\n        [('id', 'not in', request.session.get('my_invoices_history')), ('state', '!=', 'cancel')] +\n        eval(filter", "CodeBleu_score": 29.486006996443358}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    # check access\n    try:\n        invoice = request.env['account.invoice'].browse(int(invoice_id)).sudo()\n    except (TypeError, ValueError):\n        invoice = request.env['account.invoice']\n    if invoice:\n        try:\n            invoice.check_access_rights('read')\n            invoice.check_access_rule('read')\n        except AccessError:\n            invoice = request.env['account.invoice']\n    if not invoice:\n        return request.redirect('/my/home')\n\n    # check report type\n    if report_type in ('html', 'pdf', 'text'):\n        # report\n        report_name = 'account.report_invoice'\n        if invoice.type == 'out_invoice':\n            report_name = 'account.account_invoices'\n        elif invoice.type == 'out_refund':\n            report_name = 'account.account_invoices_refund'\n        elif invoice.type == 'in_invoice':\n            report_name = 'account.account_vendor_bills'\n        elif invoice.type == 'in_refund':\n            report_name = 'account.account_vendor_bills_refund'\n        report = request.env.ref(report_name)\n        pdf = report.render_qweb_pdf([invoice.id])[0]\n        pdfhttpheaders = [('Content-Type', 'application/pdf'), ('Content-Length', len(pdf))]\n        if download:\n            return request.make_response(pdf, headers=pdfhttpheaders)\n        else:\n            response = request.make_response(pdf, headers=pdfhttpheaders)\n            response.headers.add('Content-Disposition', 'inline; filename=output.pdf;')\n            return response\n    elif report_type == 'legal_docs':\n        # legal documents\n        legal_docs = invoice.get_legal_docs()\n        if len(legal_docs) == 1:\n            return request.redirect(legal_docs[0].url)\n        elif len(legal_docs) > 1:\n            zip_content = _get_zip_headers(legal_docs, 'account_legal_docs.zip')\n            return request.make_response(zip_content, headers=[('Content-Disposition', 'attachment; filename=account_legal_docs.zip;')])\n    else:\n        # default: HTML\n        return request.render('account.portal_my_invoice_page', {\n           ", "CodeBleu_score": 43.1470106014799}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    invoice = request.env['account.invoice'].sudo().browse(invoice_id)\n    if invoice.type == 'out_invoice':\n        return request.redirect('/my/invoices/out/%s?access_token=%s' % (invoice.id, access_token))\n    if invoice.type == 'out_refund':\n        return request.redirect('/my/refunds/%s?access_token=%s' % (invoice.id, access_token))\n    if invoice.type == 'in_invoice':\n        return request.redirect('/my/invoices/in/%s?access_token=%s' % (invoice.id, access_token))\n    if invoice.type == 'in_refund':\n        return request.redirect('/my/refunds/in/%s?access_token=%s' % (invoice.id, access_token))\n    return request.redirect('/my/invoices/%s?access_token=%s' % (invoice.id, access_token))\n\n", "CodeBleu_score": 17.957785635952277}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    # check access\n    invoice = request.env['account.invoice'].browse(invoice_id)\n    try:\n        invoice.check_access_rights('read')\n        invoice.check_access_rule('read')\n    except AccessError:\n        return request.redirect('/my/home')\n\n    # check if the invoice is posted\n    if invoice.state!= 'posted':\n        return request.redirect('/my/invoices/%s' % invoice_id)\n\n    # check if the invoice belongs to the current user\n    if invoice.partner_id!= request.env.user.partner_id:\n        return request.redirect('/my/invoices/%s' % invoice_id)\n\n    # get the invoice report\n    report_name = 'account.report_invoice'\n    report = request.env['ir.actions.report']._get_report_from_name(report_name)\n\n    # get the invoice report type\n    if not report_type:\n        report_type = 'html'\n    elif report_type not in ['html', 'pdf', 'text']:\n        report_type = 'html'\n\n    # get the invoice report attachment\n    if report_type == 'pdf':\n        invoice_report_attachment = invoice.get_invoice_report_attachment()\n\n    # if the invoice report is a PDF and the download is requested, return the file with appropriate headers\n    if report_type == 'pdf' and download:\n        if invoice_report_attachment:\n            return request.make_response(invoice_report_attachment.datas, headers=_get_zip_headers(invoice_report_attachment.name))\n        else:\n            return request.not_found()\n\n    # prepare the invoice report\n    if report_type in ['html', 'pdf', 'text']:\n        report_data = invoice.with_context(lang=invoice.partner_id.lang).sudo().render_qweb_pdf(report.id)[0]\n        report_attachment = request.env['ir.attachment'].sudo().create({\n            'name': report.name,\n            'type': 'binary',\n            'datas': base64.b64encode(report_data),\n           'res_model': 'account.invoice',\n           'res_id': invoice.id,\n           'mimetype': 'application/pdf',\n        })\n\n    # get the invoice legal documents\n    legal_docs = invoice.get_legal_docs()\n\n    # get the invoice", "CodeBleu_score": 41.86857825402315}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t\n    product_obj = self.env['product.template']\n    product_ids = product_obj.search([('sale_ok', '=', True), ('purchase_ok', '=', True), ('company_id', '=', company.id)])\n    for product in product_ids:\n        if company.account_sale_tax_id:\n            product.write({'taxes_id': [(6, 0, [company.account_sale_tax_id.id])]})\n        if company.account_purchase_tax_id:\n            product.write({'supplier_taxes_id': [(6, 0, [company.account_purchase_tax_id.id])]})\n\n", "CodeBleu_score": 19.347487852086484}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    product_obj = self.env['product.template']\n    product_ids = product_obj.search([('company_id', '=', company.id)])\n    if product_ids:\n        for product in product_ids:\n            if company.account_sale_tax_id:\n                product.write({'taxes_id': [(6, 0, [company.account_sale_tax_id.id])]})\n            if company.account_purchase_tax_id:\n                product.write({'supplier_taxes_id': [(6, 0, [company.account_purchase_tax_id.id])]})\n\n", "CodeBleu_score": 20.459034499342494}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    product_template_obj = self.env['product.template']\n    product_product_obj = self.env['product.product']\n    product_uom_obj = self.env['uom.uom']\n    product_uom_categ_obj = self.env['uom.category']\n    product_supplierinfo_obj = self.env['product.supplierinfo']\n    product_pricelist_obj = self.env['product.pricelist']\n    product_pricelist_item_obj = self.env['product.pricelist.item']\n    product_pricelist_version_obj = self.env['product.pricelist.version']\n    product_pricelist_type_obj = self.env['product.pricelist.type']\n    product_pricelist_item_categ_obj = self.env['product.pricelist.item.categ']\n    product_pricelist_item_categ_rel_obj = self.env['product.pricelist.item.categ.rel']\n    product_pricelist_item_categ_rel_obj = self.env['product.pricelist.item.categ.rel']\n    product_pricelist_item_categ_rel_obj = self.env['product.pricelist.item.categ.rel']\n    product_pricelist_item_categ_rel_obj = self.env['product.pricelist.item.categ.rel']\n    product_pricelist_item_categ_rel_obj = self.env['product.pricelist.item.categ.rel']\n    product_pricelist_item_categ_rel_obj = self.env['product.pricelist.item.categ.rel']\n    product_pricelist_item_categ_rel_obj = self.env['product.pricelist.item.categ.rel']\n    product_pricelist_item_categ_rel_obj = self.env['product.pricelist.item.categ.rel']\n    product_pricelist_item_categ_rel_obj = self.env['product.pricelist.item.categ.rel']\n    product_pricelist_item_categ_rel", "CodeBleu_score": 8.81889910724829}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env.ref(xml_id, raise_if_not_found=False)\n    if account and account.company_id == company:\n        return account\n    account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id.type', '=', account_type)], limit=1)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n    return account\n\n", "CodeBleu_score": 41.71189853977989}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env.ref(xml_id, raise_if_not_found=False)\n    if account:\n        return account\n    account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id.type', '=', account_type)], limit=1)\n    if account:\n        return account\n    account = self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n    if account:\n        return account\n    raise UserError(\n        _('You must create some accounts before you can create a demo invoice.'))\n\n", "CodeBleu_score": 43.93456262778679}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env.ref(xml_id, raise_if_not_found=False)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id.type', '=', account_type)], limit=1)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n    return account\n\n", "CodeBleu_score": 38.09976153225092}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    Account = self.env['account.account']\n    accounts = Account.search([('user_type_id.type', '=', 'liquidity'), ('user_type_id.name', '=', 'Current Year Earnings')])\n    grouped_accounts = defaultdict(list)\n    for account in accounts:\n        grouped_accounts[account.company_id.id].append(account)\n    for company_id, accounts in grouped_accounts.items():\n        if len(accounts) > 1:\n            raise ValidationError(f\"There is more than one account with the 'Current Year Earnings' type for the company {self.env['res.company'].browse(company_id).name}.\")\n\n", "CodeBleu_score": 25.458818087379242}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    account_type_id = self.env.ref(\"account.data_account_type_current_year_earnings\").id\n    accounts_by_company = self.search_group(\n        [(\"user_type_id\", \"=\", account_type_id)],\n        [\"company_id\"],\n        [\"company_id\"],\n        lazy=False,\n    )\n    for account_by_company in accounts_by_company:\n        if len(account_by_company[\"__domain\"]) > 1:\n            raise ValidationError(\n                _(\n                    \"There is more than one account of the 'Current Year Earnings' type for company '%s'.\"\n                    % account_by_company[\"company_id\"][1]\n                )\n            )\n\n", "CodeBleu_score": 32.546826764849676}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    if self.env.context.get('skip_check_account_type_unique_current_year_earning'):\n        return\n    account_types = self.env['account.account.type'].search([('name', '=', 'Current Year Earnings')])\n    if not account_types:\n        return\n    current_year_earning_accounts = self.env['account.account'].search([('user_type_id', 'in', account_types.ids)])\n    current_year_earning_accounts_by_company = defaultdict(list)\n    for account in current_year_earning_accounts:\n        current_year_earning_accounts_by_company[account.company_id.id].append(account)\n    for company_id, accounts in current_year_earning_accounts_by_company.items():\n        if len(accounts) > 1:\n            raise ValidationError(\n                _('There should be only one account with the \"Current Year Earnings\" type for each company. Please check the accounts: %s') % ', '.join(account.code for account in accounts))\n\n", "CodeBleu_score": 35.81504355636063}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if name:\n        domain = expression.AND([domain, [('code', '=', name)]])\n    else:\n        if 'account_id' in self._context:\n            domain = expression.AND([domain, [('account_id', '=', self._context['account_id'])]])\n        if 'partner_id' in self._context:\n            domain = expression.AND([domain, [('partner_id', '=', self._context['partner_id'])]])\n        if 'journal_id' in self._context:\n            domain = expression.AND([domain, [('journal_id', '=', self._context['journal_id'])]])\n        if 'company_id' in self._context:\n            domain = expression.AND([domain, [('company_id', '=', self._context['company_id'])]])\n        if'reconcile' in self._context:\n            domain = expression.AND([domain, [('reconcile', '=', self._context['reconcile'])]])\n        if 'date' in self._context:\n            domain = expression.AND([domain, [('date', operator, self._context['date'])]])\n        if 'date_to' in self._context:\n            domain = expression.AND([domain, [('date', operator, self._context['date_to'])]])\n        if'state' in self._context:\n            domain = expression.AND([domain, [('state', '=', self._context['state'])]])\n        if'move_type' in self._context:\n            domain = expression.AND([domain, [('move_type', '=', self._context['move_type'])]])\n        if'move_id' in self._context:\n            domain = expression.AND([domain, [('move_id', '=', self._context['move_id'])]])\n        if 'currency_id' in self._context:\n            domain = expression.AND([domain, [('currency_id', '=', self._context['currency_id'])]])\n        if 'amount_currency' in self._context:\n            domain = expression.AND([domain, [('amount_currency', operator, self._context['amount_currency'])]])\n        if 'amount_residual' in self._context:\n            domain = expression.AND([domain, [('amount_residual', operator, self._context['amount_residual'])]])\n        if 'amount_residual_currency' in self._context:\n            domain = expression.AND([", "CodeBleu_score": 31.692348302151863}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name:\n        return self._search(domain, limit=limit, access_rights_uid=self.env.user.id, order=order)\n    if operator == 'ilike' and not name.isdigit() and not name.startswith('^'):\n        name = name + '%'\n    domain = self._name_search_domain(name, operator=operator, access_rights_uid=self.env.user.id)\n    if domain:\n        domain = expression.AND([domain, domain])\n    return self._search(domain, limit=limit, access_rights_uid=self.env.user.id, order=order)\n\n", "CodeBleu_score": 35.4991007967085}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name:\n        if'res_id' in self.env.context and self.env.context['res_id']:\n            return [(self.env.context['res_id'], '')]\n        if self.env.context.get('default_code'):\n            return [(self.env.context['default_code'], '')]\n        if self.env.context.get('default_name'):\n            return [(self.env.context['default_name'], '')]\n        if self.env.context.get('default_account_id'):\n            return [(self.env.context['default_account_id'], '')]\n        if self.env.context.get('default_account_internal_type'):\n            return [(self.env.context['default_account_internal_type'], '')]\n        if self.env.context.get('default_account_user_type_id'):\n            return [(self.env.context['default_account_user_type_id'], '')]\n        if self.env.context.get('default_account_tag_ids'):\n            return [(self.env.context['default_account_tag_ids'], '')]\n        if self.env.context.get('default_account_group_ids'):\n            return [(self.env.context['default_account_group_ids'], '')]\n        if self.env.context.get('default_account_root_ids'):\n            return [(self.env.context['default_account_root_ids'], '')]\n        if self.env.context.get('default_account_parent_ids'):\n            return [(self.env.context['default_account_parent_ids'], '')]\n        if self.env.context.get('default_account_child_ids'):\n            return [(self.env.context['default_account_child_ids'], '')]\n        if self.env.context.get('default_account_partner_ids'):\n            return [(self.env.context['default_account_partner_ids'], '')]\n        if self.env.context.get('default_account_move_ids'):\n            return [(self.env.context['default_account_move_ids'], '')]\n        if self.env.context.get('default_account_journal_ids'):\n            return [(self.env.context['default_account_journal_ids'], '')]\n        if self", "CodeBleu_score": 21.752632703379728}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t\n    if self._context.get('copy_translations_exclude'):\n        excluded = self._context.get('copy_translations_exclude')\n    if not isinstance(excluded, (list, tuple)):\n        excluded = [excluded]\n    excluded = list(excluded) + ['name']\n    if 'name' in self._fields:\n        if self.name and self._fields['name'].translate:\n            name_field = self._fields['name']\n            name_field_type = name_field.type\n            if name_field_type == 'char':\n                pattern = self.env.ref('base.field_res_lang_name').value\n                if pattern:\n                    name = pattern % self.name\n                    new.name = name\n                    excluded.append('name')\n            elif name_field_type =='selection':\n                pattern = self.env.ref('base.field_res_lang_name_selection').value\n                if pattern:\n                    name = pattern % self.name\n                    new.name = name\n                    excluded.append('name')\n    for field in self._fields:\n        if field not in excluded and self._fields[field].translate:\n            if field in self._translate_fields:\n                new._set_field_translate(field, self._get_field_translate(field))\n            elif field in self._fields and self._fields[field].type =='selection':\n                new._set_field_selection(field, self._get_field_selection(field))\n    return new\n\n", "CodeBleu_score": 32.95133117032027}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    excluded = excluded + ('name',)\n    super(self.__class__, self).copy_translations(new, excluded)\n    if new.name and new.name.startswith(self.name +''):\n        new._update_translations(\n            'name',\n            self.name,\n            new.name,\n            self.env.context.get('lang') or self.env.user.lang,\n        )\n\n", "CodeBleu_score": 33.13776493554193}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    if not new:\n        return\n    excluded = excluded + ('name',)\n    for field in self._fields.values():\n        if field.translate and field.name not in excluded:\n            new.write({field.name: self[field.name]})\n    if new.name and new._fields['name'].translate and re.search(r'\\{.*\\}', new.name):\n        new._cache['name'] = new.name\n    return\n\n", "CodeBleu_score": 33.015336150987196}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\t\n    if self._context.get('active_model') =='sale.order' and self._context.get('active_id'):\n        sale_order = self.env['sale.order'].browse(self._context.get('active_id'))\n        if sale_order.state in ('sale', 'done'):\n            if self._context.get('invoice_type') == 'out_invoice':\n                action = self.env.ref('account.action_move_out_invoice_type')\n                result = action.read()[0]\n                result['context'] = {'default_partner_id': sale_order.partner_id.id, 'default_company_id': sale_order.company_id.id}\n                result['domain'] = \"[('partner_id', '=', %s), ('type', '=', 'out_invoice'), ('state', '=', 'posted'), ('sale_id', '=', %s)]\" % (sale_order.partner_id.id, sale_order.id)\n                return result\n            elif self._context.get('invoice_type') == 'out_refund':\n                action = self.env.ref('account.action_move_out_invoice_type')\n                result = action.read()[0]\n                result['context'] = {'default_partner_id': sale_order.partner_id.id, 'default_company_id': sale_order.company_id.id}\n                result['domain'] = \"[('partner_id', '=', %s), ('type', '=', 'out_refund'), ('state', '=', 'posted'), ('sale_id', '=', %s)]\" % (sale_order.partner_id.id, sale_order.id)\n                return result\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n", "CodeBleu_score": 33.867158371349426}, {"code": "def action_view_invoice(self)\n\t\n    if self.env.context.get('active_model')!='sale.order':\n        return False\n    if self.env.context.get('active_id'):\n        sale_order = self.env['sale.order'].browse(self.env.context['active_id'])\n        if sale_order.state in ('draft','sent'):\n            return False\n    action = self.env.ref('account.action_move_out_invoice_type').read()[0]\n    action['context'] = {}\n    action['domain'] = []\n    if self.env.context.get('active_model') =='sale.order':\n        action['domain'] = ['|', ('sale_id', '=', self.env.context['active_id']), ('sale_id', '=', False)]\n    if self.env.context.get('active_model') =='sale.advance.payment.inv':\n        action['domain'] = ['|', ('sale_id', '=', self.env.context['active_id']), ('sale_id', '=', False)]\n    if self.env.context.get('active_model') =='sale.order':\n        action['context'] = {'default_sale_id': self.env.context['active_id']}\n    if self.env.context.get('active_model') =='sale.advance.payment.inv':\n        action['context'] = {'default_sale_id': self.env.context['active_id']}\n    return action\n\n", "CodeBleu_score": 33.14163266761553}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    action = self.env.ref('account.action_move_out_invoice_type').read()[0]\n    action['domain'] = [('id', 'in', self.mapped('invoice_ids').ids)]\n    return action\n\n", "CodeBleu_score": 16.252443537245018}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    vendor_bill_action = self.env.ref('account.action_vendor_bill_template').read()[0]\n    vendor_bill_action['context'] = {'default_move_type': 'in_invoice', 'default_vendor_bill_id': self.id}\n    vendor_bill_action['domain'] = [('id', 'in', self.env['account.move.line'].search([('move_id.purchase_id', '=', self.id)]).mapped('move_id').ids)]\n    vendor_bill_action['domain'] = [('id', 'in', self.env['account.move'].search([('purchase_id', '=', self.id)]).ids)]\n    return vendor_bill_action\n\n", "CodeBleu_score": 30.921238984792215}, {"code": "def action_view_vendor_bill(self)\n\t\n    if self.env.context.get('default_type') == 'in_invoice':\n        self.env.context = dict(self.env.context, default_move_type='in_invoice')\n    if self.env.context.get('default_type') == 'in_refund':\n        self.env.context = dict(self.env.context, default_move_type='in_refund')\n    if self.env.context.get('default_type') == 'out_invoice':\n        self.env.context = dict(self.env.context, default_move_type='out_invoice')\n    if self.env.context.get('default_type') == 'out_refund':\n        self.env.context = dict(self.env.context, default_move_type='out_refund')\n    if self.env.context.get('default_type') == 'entry':\n        self.env.context = dict(self.env.context, default_move_type='entry')\n    if self.env.context.get('default_type') == 'entry_refund':\n        self.env.context = dict(self.env.context, default_move_type='entry_refund')\n    if self.env.context.get('default_type') == 'liquidity':\n        self.env.context = dict(self.env.context, default_move_type='liquidity')\n    if self.env.context.get('default_type') == 'liquidity_refund':\n        self.env.context = dict(self.env.context, default_move_type='liquidity_refund')\n    if self.env.context.get('default_type') == 'general':\n        self.env.context = dict(self.env.context, default_move_type='general')\n    if self.env.context.get('default_type') == 'general_refund':\n        self.env.context = dict(self.env.context, default_move_type='general_refund')\n    if self.env.context.get('default_type') == 'transfer':\n        self.env.context = dict(self.env.context, default_move_type='transfer')\n    if self.env.context.get('default_type') == 'transfer_refund':\n        self.env.context = dict(", "CodeBleu_score": 22.550214073194493}, {"code": "def action_view_vendor_bill(self)\n\t\n    if self.purchase_type == 'purchase':\n        action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n        action['context'] = {'default_move_type': 'in_invoice'}\n        action['domain'] = [('id', 'in', self.move_ids.ids)]\n    else:\n        action = self.env.ref('account.action_move_in_receipt_type').read()[0]\n        action['context'] = {'default_move_type': 'in_receipt'}\n        action['domain'] = [('id', 'in', self.move_ids.ids)]\n    return action\n\n", "CodeBleu_score": 29.44690867607497}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values and len(self) > 1:\n        values.pop('attachment_ids')\n    with self.env.manage_attachments():\n        return super(IrModelData, self).write(values)\n\n", "CodeBleu_score": 28.64105351132571}, {"code": "def write(self, values)\n\t\n    if self._context.get('attachment_ids') and 'attachment_ids' in values:\n        del values['attachment_ids']\n    with self.env.attachment_manager:\n        return super(MailThread, self).write(values)\n\n", "CodeBleu_score": 31.30930578981181}, {"code": "def write(self, values)\n\t\n    if self._name == 'ir.attachment' and self._context.get('attachment_ids'):\n        values.pop('attachment_ids', None)\n    with self.env.attachment_manager as attachment_manager:\n        result = super(models.Model, self).write(values)\n        attachment_manager.check_attachments()\n    return result\n\n", "CodeBleu_score": 42.38101728475238}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\t\n    if self._context.get('import_file'):\n        return self.env['res.partner.bank']\n    if self.env['ir.config_parameter'].sudo().get_param('bank_statement_import.skip_bank_account_creation'):\n        return self.env['res.partner.bank']\n    bank_account = self.search([\n        ('acc_number', '=', self.acc_number),\n        ('partner_id', '=', self.partner_id.id),\n        ('company_id', '=', self.env.company.id)\n    ], limit=1)\n    if not bank_account:\n        bank_account = self.create({\n            'acc_number': self.acc_number,\n            'partner_id': self.partner_id.id,\n            'company_id': self.env.company.id,\n        })\n    return bank_account\n\n", "CodeBleu_score": 58.21618167150886}, {"code": "def _find_or_create_bank_account(self)\n\t\n    if self.env['ir.config_parameter'].sudo().get_param('account.disable_automatic_bank_account_creation', False):\n        return self.env['res.bank.account'].with_context(active_test=False)\n    company_id = self.env.context.get('default_company_id') or self.env.company.id\n    bank_account = self.env['res.bank.account'].search([\n        ('company_id', '=', company_id),\n        ('acc_number', '=', self.acc_number),\n        ('partner_id', '=', self.partner_id.id),\n    ], limit=1)\n    if not bank_account:\n        bank_account = self.env['res.bank.account'].create({\n            'acc_number': self.acc_number,\n            'partner_id': self.partner_id.id,\n            'company_id': company_id,\n        })\n    return bank_account.with_context(active_test=False)\n\n", "CodeBleu_score": 54.586386909934845}, {"code": "def _find_or_create_bank_account(self)\n\t\n    if not self.env.context.get('default_company_id'):\n        raise UserError(_('You must specify a company for the bank account.'))\n    if not self.env.context.get('default_partner_id'):\n        raise UserError(_('You must specify a partner for the bank account.'))\n    if not self.env.context.get('default_acc_number'):\n        raise UserError(_('You must specify an account number for the bank account.'))\n    if not self.env['ir.config_parameter'].sudo().get_param('bank_statement_import.allow_bank_account_creation'):\n        return self.env['res.partner.bank'].search([])\n    company = self.env['res.company'].browse(self.env.context.get('default_company_id'))\n    if not company.bank_account_code_prefix:\n        return self.env['res.partner.bank'].search([])\n    prefix = company.bank_account_code_prefix\n    if prefix:\n        acc_number = sanitize_account_number(self.env.context.get('default_acc_number'))\n        if not acc_number.startswith(prefix):\n            return self.env['res.partner.bank'].search([])\n        acc_number = acc_number[len(prefix):]\n    partner_id = self.env.context.get('default_partner_id')\n    bank_account = self.env['res.partner.bank'].search([\n        ('acc_number', '=', acc_number),\n        ('partner_id', '=', partner_id),\n        ('company_id', '=', company.id)\n    ])\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create({\n            'acc_number': acc_number,\n            'partner_id': partner_id,\n            'company_id': company.id,\n        })\n    return bank_account\n\n", "CodeBleu_score": 48.38916426960162}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    # In case of a single record context, retrieve the relevant accounting amounts and currencies\n    if self.currency_id == currency:\n        amount_currency = 0.0\n    elif self.currency_id and currency and self.currency_id!= currency:\n        amount_currency = self.currency_id._convert(self.balance, currency, self.company_id, self.date or fields.Date.today())\n    # Compute the transaction amount, journal amount, and company amount using various exchange rates\n    if self.currency_id and currency:\n        amount_currency = self.currency_id._convert(balance, currency, self.company_id, self.date or fields.Date.today())\n    elif self.currency_id and not currency:\n        amount_currency = self.currency_id._convert(balance, self.company_id.currency_id, self.company_id, self.date or fields.Date.today())\n    elif not self.currency_id and currency:\n        amount_currency = currency._convert(balance, self.company_id.currency_id, self.company_id, self.date or fields.Date.today())\n    # Adjust the transaction amount and balance accordingly\n    if self.currency_id and currency:\n        amount_currency = self.currency_id._convert(balance, currency, self.company_id, self.date or fields.Date.today())\n    elif self.currency_id and not currency:\n        amount_currency = self.currency_id._convert(balance, self.company_id.currency_id, self.company_id, self.date or fields.Date.today())\n    elif not self.currency_id and currency:\n        amount_currency = currency._convert(balance, self.company_id.currency_id, self.company_id, self.date or fields.Date.today())\n    # Return the transaction amount, journal amount, and company amount in a dictionary\n    return {\n        'amount_currency': amount_currency,\n        'currency_id': currency.id,\n        'amount': self.company_id.currency_id.round(amount_currency) if currency else balance,\n        'journal_amount': currency.round(amount_currency) if currency else balance,\n    }\n\n", "CodeBleu_score": 29.012726747053065}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    if not self._context.get('force_company_currency'):\n        # If the company currency is not forced, use the currency of the journal\n        journal_currency = self.journal_id.currency_id or self.journal_id.company_id.currency_id\n        if journal_currency!= currency:\n            # If the journal currency is different from the transaction currency, convert the transaction amount to the journal currency using the standard rate\n            amount = currency._convert(amount_currency, journal_currency, self.env.user.company_id, self.date or fields.Date.today())\n        else:\n            # If the journal currency is the same as the transaction currency, use the transaction amount directly\n            amount = amount_currency\n    else:\n        # If the company currency is forced, use the company currency as the journal currency\n        journal_currency = self.env.user.company_id.currency_id\n        if journal_currency!= currency:\n            # If the company currency is different from the transaction currency, convert the transaction amount to the company currency using the standard rate\n            amount = currency._convert(amount_currency, journal_currency, self.env.user.company_id, self.date or fields.Date.today())\n        else:\n            # If the company currency is the same as the transaction currency, use the transaction amount directly\n            amount = amount_currency\n\n    # Compute the journal amount\n    journal_amount = amount_currency\n\n    # Compute the company amount\n    if self._context.get('company_currency') and self.env.user.company_id.currency_id!= self._context.get('company_currency'):\n        company_currency = self.env['res.currency'].browse(self._context.get('company_currency'))\n        company_amount = company_currency._convert(amount_currency, company_currency, self.env.user.company_id, self.date or fields.Date.today())\n    else:\n        company_amount = amount_currency\n\n    # If the transaction amount is negative, adjust the balance accordingly\n    if amount < 0:\n        balance -= amount\n\n    return {\n        'amount': amount,\n        'amount_currency': amount_currency,\n        'journal_amount': journal_amount,\n        'company_amount': company_amount,\n        'balance': balance,\n    }\n\n", "CodeBleu_score": 34.64211354076637}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    if self.env.context.get('force_currency'):\n        currency = self.env.context['force_currency']\n\n    if currency == self.env.user.company_id.currency_id:\n        amount_currency = 0.0\n    elif not amount_currency:\n        amount_currency = self.with_context(allow_amount_currency=True).currency_id._convert(\n            balance, currency, self.env.user.company_id, self.date or fields.Date.today())\n\n    # Compute the transaction amount and journal amount.\n    if self.env.context.get('force_balance'):\n        balance = self.env.context['force_balance']\n    if self.env.context.get('force_amount'):\n        amount_currency = self.env.context['force_amount']\n    if self.env.context.get('force_amount_currency'):\n        amount_currency = self.env.context['force_amount_currency']\n    if self.env.context.get('force_amount_company_currency'):\n        amount_currency = self.env.context['force_amount_company_currency']\n\n    # Compute the company amount.\n    if self.env.context.get('force_company_amount'):\n        company_amount = self.env.context['force_company_amount']\n    else:\n        company_amount = self.env.user.company_id.currency_id._convert(\n            amount_currency, self.env.user.company_id.currency_id, self.env.user.company_id, self.date or fields.Date.today())\n\n    return {\n        'amount_currency': currency.round(amount_currency) if currency else 0.0,\n        'currency_id': currency and currency.id,\n        'company_currency_id': self.env.user.company_id.currency_id.id,\n        'amount_currency_company_signed': self.env.user.company_id.currency_id.with_context(\n            date=self.date or fields.Date.today()).compute(amount_currency, self.env.user.company_id.currency_id) if currency else 0.0,\n        'amount_company_signed': company_amount,\n        'amount_currency_signed': amount_currency,\n        'balance': balance,\n    }", "CodeBleu_score": 33.33071348805412}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids = []\n        if journal.type in ('bank', 'cash'):\n            default_payment_method_ids = self.env['account.payment.method'].search([('payment_type', '=', 'outbound')])\n            for default_payment_method in default_payment_method_ids:\n                journal.outbound_payment_method_line_ids = [(0, 0, {'payment_method_id': default_payment_method.id})]\n\n", "CodeBleu_score": 40.86200192360497}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        if journal.outbound_payment_method_ids:\n            journal.outbound_payment_method_ids.unlink()\n        if journal.type in ['bank', 'cash']:\n            journal.outbound_payment_method_ids = journal.outbound_payment_method_default_get()\n\n", "CodeBleu_score": 24.05154113402309}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        if journal.type in ['bank', 'cash']:\n            journal.outbound_payment_method_line_ids.unlink()\n            default_methods = self.env['account.payment.method'].search([('payment_type', '=', 'outbound'), ('is_default', '=', True)])\n            for method in default_methods:\n                journal.outbound_payment_method_line_ids.create({\n                    'payment_method_id': method.id,\n                    'journal_id': journal.id,\n                })\n\n", "CodeBleu_score": 41.793682642472085}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t\n    if not self.date:\n        self.date = fields.Date.context_today(self)\n    elif self.invoice_date and not self.is_sale_document(include_receipts=True):\n        # Compute the accounting date based on the invoice date and tax report impact\n        accounting_date = date_utils.get_tax_report_date(self.invoice_date, self.tax_report_id)\n        if accounting_date!= self.date:\n            # Update the move's date and schedule the recalculation of related fields in the environment\n            self.date = accounting_date\n            self.env.recompute()\n\n", "CodeBleu_score": 27.909934044700368}, {"code": "def _compute_date(self)\n\t\n    today = fields.Date.context_today(self)\n    for move in self:\n        if move.date_invoice:\n            if move.company_id.tax_report_revenue_recognition and not move.is_sale_document(include_receipts=True):\n                move.date = move._get_tax_report_date(move.date_invoice)\n            else:\n                move.date = move.date_invoice\n        else:\n            move.date = today\n    self.env.recompute()\n\n", "CodeBleu_score": 28.28830498525989}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if not move.date_done and not move.date:\n            move.date = date_utils.today()\n        elif move.invoice_date and move.invoice_date!= move.date:\n            if move.type!= 'out_invoice':\n                move.date = move.invoice_date + relativedelta(days=move.company_id.tax_report_impact)\n            else:\n                move.date = move.invoice_date\n        if move.date_done and move.date_done!= move.date:\n            move.date = move.date_done\n        if move.date!= move._context.get('date_done'):\n            move.env.recompute()\n\n", "CodeBleu_score": 37.349237045735556}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_invoice(include_receipts=True):\n            if move.partner_id.invoice_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.invoice_payment_term_id.id\n            else:\n                move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 37.416225255998704}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.type == 'out_invoice':\n            move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id.id or False\n        elif move.type == 'in_invoice':\n            move.invoice_payment_term_id = move.partner_id.property_payment_term_id.id or False\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 39.32462593703996}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_invoice(include_receipts=True):\n            if move.type == \"out_invoice\" and move.partner_id.invoice_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.invoice_payment_term_id.id\n            elif move.type == \"in_invoice\" and move.partner_id.payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.payment_term_id.id\n            else:\n                move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 46.893009718974085}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t\n    tax_groups = self.env['account.tax.group']\n    tax_groups_by_country_company = groupby(self, lambda tax: (tax.country_id, tax.company_id))\n    for (country_id, company_id), taxes in tax_groups_by_country_company.items():\n        tax_group = tax_groups.search([('country_id', '=', country_id.id), ('company_id', '=', company_id.id)], limit=1)\n        if not tax_group:\n            tax_group = tax_groups.search([('country_id', '=', False), ('company_id', '=', company_id.id)], limit=1)\n        taxes.tax_group_id = tax_group.id\n", "CodeBleu_score": 23.908302717740902}, {"code": " def _compute_tax_group_id(self)\n\t\n    tax_groups = self.env['account.tax.group']\n    tax_group_ids = tax_groups.search([('country_id', '=', self.country_id.id), ('company_id', '=', self.company_id.id)])\n    if not tax_group_ids:\n        tax_group_ids = tax_groups.search([('country_id', '=', False), ('company_id', '=', self.company_id.id)])\n    if not tax_group_ids:\n        tax_group_ids = tax_groups.search([('country_id', '=', False), ('company_id', '=', False)])\n    return tax_group_ids[0].id if tax_group_ids else False\n", "CodeBleu_score": 19.073991849477455}, {"code": " def _compute_tax_group_id(self)\n\t\n    tax_groups = self.env['account.tax.group']\n    tax_group_ids = []\n    tax_groups_by_country_company = groupby(self, lambda tax: (tax.country_id, tax.company_id))\n    for (country_id, company_id), taxes in tax_groups_by_country_company.items():\n        tax_group_id = tax_groups.search([('country_id', '=', country_id.id), ('company_id', '=', company_id.id)], limit=1)\n        if not tax_group_id:\n            tax_group_id = tax_groups.search([('country_id', '=', False), ('company_id', '=', company_id.id)], limit=1)\n        tax_group_ids.extend([tax_group_id.id] * len(tax_es))\n    self.tax_group_id = tax_group_ids\n\n", "CodeBleu_score": 26.419711916153542}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    self.session.get(url)\n    data = {\n        \"login\": login,\n        \"password\":,\n        \"db\": db,\n        \"force\": force,\n    }\n    files = {\"file\": open(module_file, \"rb\")}\n    response = self.session.post(url + \"/base_import_module/login_upload\", data=data, files=files)\n    response.raise_for_status()\n    return response.text\n\n", "CodeBleu_score": 34.55379552485147}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    self.session.get(url)\n    self.session.post(url, data={\"login\": login, \"password\":, \"db\": db})\n    if not force:\n        module_file_name = Path(module_file).stem\n        r = self.session.get(url + \"base_import_module/login_upload\")\n        if module_file_name in r.text:\n            raise Exception(\"Module already installed. Use --force to overwrite.\")\n    with open(module_file, \"rb\") as f:\n        r = self.session.post(\n            url + \"base_import_module/login_upload\",\n            files={\"file\": f},\n            data={\"login\": login, \"password\":, \"db\": db, \"force\": force},\n        )\n    return r.text\n\n", "CodeBleu_score": 46.827952959290826}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    self.set_db(db)\n    data = {\"login\": login, \"password\":, \"db\": db, \"force\": force}\n    files = {\"file\": (\"module.zip\", module_file, \"application/zip\")}\n    response = requests.post(\n        url + \"/base_import_module/login_upload\", data=data, files=files\n    )\n    if response.status_code == 200:\n        return response.text\n    else:\n        raise Exception(\n            f\"Error uploading module file: {response.status_code} {response.text}\"\n        )\n\n", "CodeBleu_score": 33.89738169485895}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t\n    # Get the database name and overwrite flag from the configuration\n    db_name = odoo.tools.config['db_name']\n    overwrite = odoo.tools.config.get('overwrite', False)\n\n    # Create a new database registry\n    registry = odoo.registry(db_name)\n\n    # Use a cursor to initialize a TranslationImporter\n    with registry.cursor() as cr:\n        importer = TranslationImporter(cr)\n\n        # Load translation files based on the specified configuration\n        importer.load_files(overwrite=overwrite)\n\n        # Save the translations, with the option to overwrite existing ones\n        importer.save(overwrite=overwrite)\n\n", "CodeBleu_score": 33.070263332022826}, {"code": "def import_translation()\n\t\n    # Get database name and overwrite option from environment variables\n    database_name = os.environ.get(\"DATABASE_NAME\")\n    overwrite = os.environ.get(\"OVERWRITE\", \"false\").lower() == \"true\"\n\n    # Create a new database registry\n    registry = odoo.registry(database_name)\n\n    # Initialize a TranslationImporter with the registry and overwrite option\n    importer = odoo.tools.translate.TranslationImporter(registry, overwrite=overwrite)\n\n    # Load translation files based on the configuration\n    importer.load_files(\n        \"base\",\n        [\n            \"i18n/ar.po\",\n            \"i18n/de.po\",\n            \"i18n/en_US.po\",\n            \"i18n/es.po\",\n            \"i18n/fr.po\",\n            \"i18n/it.po\",\n            \"i18n/ja.po\",\n            \"i18n/nl_NL.po\",\n            \"i18n/pl.po\",\n            \"i18n/pt_BR.po\",\n            \"i18n/ru.po\",\n            \"i18n/zh_CN.po\",\n        ],\n    )\n\n    # Save the translations, overwriting existing ones if specified\n    importer.save()\n\n", "CodeBleu_score": 36.97634228010168}, {"code": "def import_translation()\n\t\n    config = odoo.tools.config\n    db_name = config.get('db_name')\n    overwrite = config.get('overwrite_translation') == 'True'\n    registry = odoo.registry(db_name)\n    with registry.cursor() as cr:\n        importer = TranslationImporter(cr, overwrite)\n        importer.load_translations()\n        importer.save_translations()\n\n", "CodeBleu_score": 40.01093632873589}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\t\n    # Create a new node with the given name and info\n    child = Node(name, info)\n    # Set the depth of the child node to one greater than the parent's depth\n    child.depth = self.depth + 1\n    # Inherit certain attributes from the parent if they exist\n    child.parent = self\n    child.path = self.path + [child.name]\n    child.full_path = self.full_path + [child.name]\n    # Append the child node to the children list if it's not already present\n    if child not in self.children:\n        self.children.append(child)\n    # Sort the children by name\n    self.children.sort(key=lambda x: x.name)\n    # Return the new node\n    return child\n\n", "CodeBleu_score": 42.30242665793506}, {"code": "def add_child(self, name, info)\n\t\n    # Create a new node with the given name and info\n    child = Node(name, info)\n    # Set the depth of the new node to the parent's depth + 1\n    child.depth = self.depth + 1\n    # If the parent has a parent, inherit the parent's attributes\n    if self.parent:\n        child.parent = self.parent\n        child.module = self.module\n        child.type = self.type\n        child.version = self.version\n        child.author = self.author\n        child.license = self.license\n        child.website = self.website\n        child.summary = self.summary\n        child.description = self.description\n        child.category = self.category\n        child.depends = self.depends\n        child.data = self.data\n        child.demo = self.demo\n        child.external_dependencies = self.external_dependencies\n        child.installable = self.installable\n        child.auto_install = self.auto_install\n        child.application = self.application\n        child.sequence = self.sequence\n        child.icon = self.icon\n        child.qweb = self.qweb\n        child.images = self.images\n        child.post_init_hook = self.post_init_hook\n        child.pre_init_hook = self.pre_init_hook\n        child.post_load = self.post_load\n        child.pre_init_doc = self.pre_init_doc\n        child.post_init_doc = self.post_init_doc\n        child.pre_update = self.pre_update\n        child.post_update = self.post_update\n        child.uninstall_hook = self.uninstall_hook\n        child.uninstall_doc = self.uninstall_doc\n        child.uninstall_hook = self.uninstall_hook\n        child.uninstall_doc = self.uninstall_doc\n        child.uninstall_hook = self.uninstall_hook\n        child.uninstall_doc = self.uninstall_doc\n        child.uninstall_hook = self.uninstall_hook\n        child.uninstall_doc = self.uninstall_doc\n        child.uninstall_hook = self.uninstall_hook\n        child.uninstall_doc = self.uninstall_doc\n        child.uninstall_hook = self.uninstall_hook\n        child.uninstall_doc = self.uninstall_doc\n        child.uninstall_hook = self.uninstall_hook\n        child.uninstall_doc =", "CodeBleu_score": 19.790599018506764}, {"code": "def add_child(self, name, info)\n\t\n    new_node = self.new_child(name, info)\n    new_node.depth = self.depth + 1\n    new_node.parent = self\n    new_node.context = self.context\n    new_node.inherit_attributes()\n    if new_node not in self.children:\n        self.children.append(new_node)\n    self.children.sort(key=lambda x: x.name)\n    return new_node\n\n", "CodeBleu_score": 36.706851753374664}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\n        \"account\": account,\n        \"account_name\": frappe.get_value(\"Account\", account, \"account_name\"),\n        \"account_currency\": frappe.get_value(\"Account\", account, \"account_currency\"),\n        \"account_type\": frappe.get_value(\"Account\", account, \"root_type\"),\n        \"account_balance\": 0,\n        \"account_balance_in_account_currency\": 0,\n        \"dates\": dates,\n        \"data\": {},\n    }\n\n    # Initialize balances to zero\n    for date in dates:\n        result[\"data\"][date] = {\n            \"balance\": 0,\n            \"balance_in_account_currency\": 0,\n        }\n\n    # Determine root type\n    root_type = frappe.get_cached_value(\"Account\", account, \"root_type\")\n\n    # Iterate through the entries\n    for entry in gl_entries:\n        # Get the balance for the entry date\n        balance = entry.debit - entry.credit\n        balance_in_account_currency = entry.debit_in_account_currency - entry.credit_in_account_currency\n\n        # Update the balance for the entry date\n        result[\"data\"][entry.posting_date][\"balance\"] += balance\n        result[\"data\"][entry.posting_date][\"balance_in_account_currency\"] += balance_in_account_currency\n\n        # Update the account balance\n        result[\"account_balance\"] += balance\n        result[\"account_balance_in_account_currency\"] += balance_in_account_currency\n\n    # If the root type is not \"Asset\" or \"Expense,\" negate the balances\n    if root_type not in (\"Asset\", \"Expense\"):\n        for date in dates:\n            result[\"data\"][date][\"balance\"] *= -1\n            result[\"data\"][date][\"balance_in_account_currency\"] *= -1\n\n        result[\"account_balance\"] *= -1\n        result[\"account_balance_in_account_currency\"] *= -1\n\n    # Accumulate the balance over time for \"Asset,\" \"Liability,\" and \"Equity\" accounts\n    if root_type in (\"Asset\", \"Liability\", \"Equity\"):\n        for date in dates:\n            if date!= dates[0]:\n                result[\"data\"][date][\"balance\"] += result[\"data\"][dates[dates.index(date) - 1]][\"balance\"]\n                result", "CodeBleu_score": 29.89448757852306}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\n        \"account\": account,\n        \"account_name\": frappe.get_value(\"Account\", account, \"account_name\"),\n        \"parent_account\": frappe.get_value(\"Account\", account, \"parent_account\"),\n        \"parent_account_name\": frappe.get_value(\"Account\", account, \"parent_account_name\"),\n        \"root_type\": frappe.get_value(\"Account\", account, \"root_type\"),\n        \"balances\": {date: 0 for date in dates},\n    }\n\n    root_type = result[\"root_type\"]\n    balance = 0\n    for entry in gl_entries:\n        if entry.posting_date < dates[0]:\n            balance += entry.debit - entry.credit\n        else:\n            balance += entry.debit - entry.credit\n            for date in dates:\n                if entry.posting_date <= date:\n                    result[\"balances\"][date] += balance\n\n    if root_type not in (\"Asset\", \"Expense\"):\n        for date in dates:\n            result[\"balances\"][date] *= -1\n\n    if root_type in (\"Asset\", \"Liability\", \"Equity\"):\n        balance = 0\n        for date in dates:\n            balance += result[\"balances\"][date]\n            result[\"balances\"][date] = balance\n\n    return result\n\n", "CodeBleu_score": 31.01774635269436}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\n        \"account\": account,\n        \"account_name\": frappe.get_value(\"Account\", account, \"account_name\"),\n        \"account_currency\": frappe.get_value(\"Account\", account, \"account_currency\"),\n        \"balance\": {date: 0.0 for date in dates},\n        \"debit\": {date: 0.0 for date in dates},\n        \"credit\": {date: 0.0 for date in dates},\n    }\n    root_type = frappe.get_cached_value(\"Account\", account, \"root_type\")\n\n    for entry in gl_entries:\n        for date in dates:\n            if entry.posting_date <= date:\n                result[\"balance\"][date] += entry.debit - entry.credit\n                result[\"debit\"][date] += entry.debit\n                result[\"credit\"][date] += entry.credit\n\n    if root_type not in (\"Asset\", \"Expense\"):\n        for date in dates:\n            result[\"balance\"][date] = -result[\"balance\"][date]\n\n    if root_type in (\"Asset\", \"Liability\", \"Equity\"):\n        for date in dates:\n            result[\"balance\"][date] = result[\"balance\"][date - dates[0]]\n\n    return result\n\n", "CodeBleu_score": 34.36061534049324}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.is_group:\n        return\n\n    if not self.flags.ignore_account_type_change_validation:\n        if self.account_type in (\"Receivable\", \"Payable\"):\n            if self.get(\"account_type\")!= self.account_type:\n                if self.get_gl_entries():\n                    frappe.msgprint(\n                        _(\n                            \"Changing the account type from Receivable or Payable to another type will affect the Accounts report. Please check the report before making this change.\"\n                        ),\n                        title=_(\"Warning\"),\n                        indicator=\"orange\",\n                    )\n                    self.add_comment(\n                        \"Comment\",\n                        _(\n                            \"Changing the account type from Receivable or Payable to another type will affect the Accounts report. Please check the report before making this change.\"\n                        ),\n                    )\n\n", "CodeBleu_score": 22.59103506472678}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type in (\"Receivable\", \"Payable\"):\n        if self.account_type!= self.get_value(\"account_type\"):\n            if erpnext.get_company_currency(self.company) == self.account_currency:\n                if erpnext.get_default_cost_center(self.company) == self.cost_center:\n                    if not frappe.db.sql(\n                        \"\"\"SELECT name FROM `tabGL Entry` WHERE account = %s AND company = %s\"\"\",\n                        (self.name, self.company),\n                    ):\n                        frappe.throw(\n                            _(\"Account type change from Receivable/Payable to a non-receivable/payable type is not allowed as there are no general ledger entries for the account.\"),\n                            title=_(\"Account Type Change\"),\n                        )\n                    else:\n                        frappe.msgprint(\n                            _(\n                                \"Account type change from Receivable/Payable to a non-receivable/payable type is not allowed as there are existing general ledger entries for the account. This may lead to issues in the Accounts report. Please verify the account type change and ensure that the account is not used for any transactions.\"\n                            ),\n                            alert=True,\n                        )\n                        frappe.db.set_value(\n                            \"Account\",\n                            self.name,\n                            \"comment\",\n                            _(\"Account type change from Receivable/Payable to a non-receivable/payable type is not allowed as there are existing general ledger entries for the account. This may lead to issues in the Accounts report. Please verify the account type change and ensure that the account is not used for any transactions.\"),\n                        )\n\n", "CodeBleu_score": 20.489670621737048}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.is_group:\n        return\n    if not self.account_type:\n        return\n    if self.account_type in (\"Receivable\", \"Payable\"):\n        if self.account_type!= self.get_value(\"account_type\"):\n            if self.get_gl_entries():\n                frappe.throw(\n                    _(\n                        \"Changing the account type from {0} to {1} is not allowed as there are existing general ledger entries for this account. Please check the 'Accounts' report for potential issues.\").format(\n                        self.get_value(\"account_type\"), self.account_type\n                    ),\n                    title=_(\"Account Type Change Not Allowed\"),\n                )\n                self.add_comment(\n                    \"Comment\",\n                    _(\"Changing the account type from {0} to {1} is not allowed as there are existing general ledger entries for this account. Please check the 'Accounts' report for potential issues.\").format(\n                        self.get_value(\"account_type\"), self.account_type\n                    ),\n                )\n\n", "CodeBleu_score": 24.050609235852555}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t\n\n    if self.account_type == \"Root\":\n        self.currency = self.company_currency\n        self.is_group = 1\n        self.is_group_for_reporting = 1\n        self.is_group_for_ledger = 1\n        self.is_group_for_tax = 1\n        self.is_group_for_costcenter = 1\n        self.is_group_for_profitcenter = 1\n        self.is_group_for_payroll = 1\n        self.is_group_for_receivable = 1\n        self.is_group_for_payable = 1\n        self.is_group_for_fixed_asset = 1\n        self.is_group_for_stock = 1\n        self.is_group_for_expense = 1\n        self.is_group_for_income = 1\n        self.is_group_for_equity = 1\n        self.is_group_for_liability = 1\n        self.is_group_for_asset = 1\n        self.is_group_for_bank = 1\n        self.is_group_for_cash = 1\n        self.is_group_for_tax_receivable = 1\n        self.is_group_for_tax_payable = 1\n        self.is_group_for_deferred_revenue = 1\n        self.is_group_for_deferred_expense = 1\n        self.is_group_for_reconciliation = 1\n        self.is_group_for_rounding_adjustment = 1\n        self.is_group_for_bank_account = 1\n        self.is_group_for_cash_account = 1\n        self.is_group_for_payroll_payable = 1\n        self.is_group_for_payroll_receivable = 1\n        self.is_group_for_payroll_advance = 1\n        self.is_group_for_payroll_advance_clearance = 1\n        self.is_group_for_payroll_expense_claim = 1\n        self.is_group_for_payroll_expense_claim_clearance = 1\n        self.is_group_for_payroll_liability = 1", "CodeBleu_score": 13.020031760289077}, {"code": "def validate_account_currency(self)\n\t\n    if self.account_type in (\"Bank\", \"Cash\"):\n        if not self.is_group:\n            if not self.account_currency:\n                self.account_currency = self.company_currency\n                self.is_group = 0\n            elif self.account_currency!= self.company_currency:\n                # Check if there are existing general ledger entries with a different currency\n                existing_entries = frappe.db.sql(\n                    \"\"\"\n                    SELECT name\n                    FROM `tabGL Entry`\n                    WHERE account = %s\n                    AND posting_date < %s\n                    AND company = %s\n                    AND currency!= %s\n                    \"\"\",\n                    (self.name, self.creation, self.company, self.account_currency),\n                    as_dict=1,\n                )\n                if existing_entries:\n                    throw(\n                        _(\"Account Currency must be {0} for account {1} as there are existing General Ledger Entries with a different currency.\").format(\n                            self.company_currency, self.name\n                        )\n                    )\n\n", "CodeBleu_score": 32.49013462711157}, {"code": "def validate_account_currency(self)\n\t\n\n    if not self.account_currency:\n        self.account_currency = frappe.get_cached_value(\"Company\", self.company, \"default_currency\")\n        self.is_account_currency_explicitly_specified = 1\n    elif self.account_currency!= frappe.get_cached_value(\"Company\", self.company, \"default_currency\"):\n        # Check for existing general ledger entries with a different currency\n        existing_gle_entries = frappe.db.sql(\n            \"\"\"\n            SELECT name\n            FROM `tabGL Entry`\n            WHERE account = %s\n            AND ifnull(account_currency, '')!= %s\n            AND docstatus = 1\n            \"\"\",\n            (self.name, self.account_currency),\n        )\n        if existing_gle_entries:\n            throw(\n                _(\n                    \"Cannot change account currency as General Ledger Entries have already been created for this account with a different currency. Please delete the existing General Ledger Entries before changing the account currency.\"\n                )\n            )\n\n", "CodeBleu_score": 40.13168513860364}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    aggregated_entries = {}\n    for entry in entries:\n        key = tuple(entry[dimension] for dimension in accounting_dimensions)\n        if key not in aggregated_entries:\n            aggregated_entries[key] = {\n                \"account\": entry.account,\n                \"debit\": 0.0,\n                \"credit\": 0.0,\n                \"debit_in_account_currency\": 0.0,\n                \"credit_in_account_currency\": 0.0,\n                \"balance\": 0.0,\n                \"balance_in_account_currency\": 0.0,\n            }\n        aggregated_entries[key][\"debit\"] += entry.debit\n        aggregated_entries[key][\"credit\"] += entry.credit\n        aggregated_entries[key][\"debit_in_account_currency\"] += entry.debit_in_account_currency\n        aggregated_entries[key][\"credit_in_account_currency\"] += entry.credit_in_account_currency\n        aggregated_entries[key][\"balance\"] += entry.balance\n        aggregated_entries[key][\"balance_in_account_currency\"] += entry.balance_in_account_currency\n    return aggregated_entries\n\n", "CodeBleu_score": 32.160022518935286}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n\n    aggregated_entries = {}\n    for entry in entries:\n        key = \"\"\n        for dimension in accounting_dimensions:\n            if entry.get(dimension):\n                key += entry.get(dimension) + \"|\"\n        if not aggregated_entries.get(key):\n            aggregated_entries[key] = frappe._dict(\n                debit=0,\n                credit=0,\n                debit_in_account_currency=0,\n                credit_in_account_currency=0,\n            )\n        aggregated_entries[key].debit += flt(entry.debit)\n        aggregated_entries[key].credit += flt(entry.credit)\n        aggregated_entries[key].debit_in_account_currency += flt(\n            entry.debit_in_account_currency\n        )\n        aggregated_entries[key].credit_in_account_currency += flt(\n            entry.credit_in_account_currency\n        )\n\n    return aggregated_entries\n\n", "CodeBleu_score": 30.085884171803297}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    aggregated_entries = {}\n\n    for entry in entries:\n        key = tuple(entry.get(dimension) for dimension in accounting_dimensions)\n        if key not in aggregated_entries:\n            aggregated_entries[key] = frappe._dict(\n                {\n                    \"account\": entry.account,\n                    \"debit_in_account_currency\": 0,\n                    \"credit_in_account_currency\": 0,\n                    \"debit_in_company_currency\": 0,\n                    \"credit_in_company_currency\": 0,\n                }\n            )\n\n        aggregated_entries[key].update(\n            {\n                \"debit_in_account_currency\": aggregated_entries[key][\n                    \"debit_in_account_currency\"\n                ]\n                + entry.debit_in_account_currency,\n                \"credit_in_account_currency\": aggregated_entries[key][\n                    \"credit_in_account_currency\"\n                ]\n                + entry.credit_in_account_currency,\n                \"debit_in_company_currency\": aggregated_entries[key][\n                    \"debit_in_company_currency\"\n                ]\n                + entry.debit_in_company_currency,\n                \"credit_in_company_currency\": aggregated_entries[key][\n                    \"credit_in_company_currency\"\n                ]\n                + entry.credit_in_company_currency,\n            }\n        )\n\n    return aggregated_entries\n\n", "CodeBleu_score": 29.233569847625702}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.get(\"supplier\"):\n        supplier_blocked = frappe.db.get_value(\n            \"Supplier\", self.supplier, \"blocked\"\n        )\n        if supplier_blocked:\n            supplier_hold_type = frappe.db.get_value(\n                \"Supplier\", self.supplier, \"hold_type\"\n            )\n            if supplier_hold_type == \"Payment\":\n                if self.get(\"payment_type\") == \"Receive\":\n                    if self.get(\"release_date\"):\n                        if getdate(self.release_date) > getdate(today()):\n                            frappe.throw(\n                                _(\"Supplier is on hold. Payment cannot be released before {0}\").format(\n                                    formatdate(self.release_date)\n                                )\n                            )\n                    else:\n                        frappe.throw(_(\"Supplier is on hold. Release Date is mandatory\"))\n            elif supplier_hold_type == \"Invoice\":\n                if self.get(\"payment_type\") == \"Pay\":\n                    if self.get(\"release_date\"):\n                        if getdate(self.release_date) > getdate(today()):\n                            frappe.throw(\n                                _(\"Supplier is on hold. Invoice cannot be released before {0}\").format(\n                                    formatdate(self.release_date)\n                                )\n                            )\n                    else:\n                        frappe.throw(_(\"Supplier is on hold. Release Date is mandatory\"))\n\n", "CodeBleu_score": 26.683954295805513}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.supplier and self.supplier_type == \"Company\":\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.blocked:\n            if supplier.hold_type == \"Supplier Payment\" and self.doctype == \"Supplier Payment\":\n                if supplier.release_date and getdate(supplier.release_date) < getdate(self.posting_date):\n                    pass\n                else:\n                    frappe.throw(_(\"Supplier {0} is on hold\").format(bold(self.supplier)))\n            elif supplier.hold_type == \"Purchase Invoice\" and self.doctype == \"Purchase Invoice\":\n                if supplier.release_date and getdate(supplier.release_date) < getdate(self.posting_date):\n                    pass\n                else:\n                    frappe.throw(_(\"Supplier {0} is on hold\").format(bold(self.supplier)))\n            else:\n                frappe.throw(_(\"Supplier {0} is on hold\").format(bold(self.supplier)))\n\n", "CodeBleu_score": 28.18064670791842}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.get(\"supplier\"):\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.on_hold:\n            if supplier.hold_type == \"Payment\":\n                if supplier.release_date and supplier.release_date < getdate():\n                    supplier.on_hold = 0\n                    supplier.hold_type = \"\"\n                    supplier.release_date = None\n                    supplier.save()\n                else:\n                    frappe.throw(\n                        _(\"Supplier {0} is on hold.\").format(\n                            self.supplier\n                        ),\n                        title=_(\"Supplier is on hold\"),\n                    )\n\n", "CodeBleu_score": 26.469966004287798}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = frappe.get_all(\"DocType\", filters={\"is_repost_doctype\": 1})\n    repost_doctypes = [d.name for d in repost_doctypes]\n\n    if repost_doctypes:\n        repost_vouchers = frappe.db.sql(\n            \"\"\"\n            SELECT\n                parent, parenttype, parentfield, name\n            FROM\n                `tabRepost Voucher`\n            WHERE\n                voucher_type = %s AND voucher_no = %s AND parenttype IN %s\n            \"\"\",\n            (self.doctype, self.name, repost_doctypes),\n            as_dict=1,\n        )\n\n        if repost_vouchers:\n            repost_vouchers_by_parent = defaultdict(list)\n\n            for voucher in repost_vouchers:\n                repost_vouchers_by_parent[voucher.parenttype][voucher.parent].append(\n                    voucher.name\n                )\n\n            for parenttype, parents in repost_vouchers_by_parent.items():\n                for parent, vouchers in parents.items():\n                    parent_doc = frappe.get_doc(parenttype, parent)\n\n                    if parent_doc.meta.get_field(\"repost_vouchers\"):\n                        parent_doc.set(\"repost_vouchers\", [])\n                        parent_doc.flags.ignore_links = True\n                        parent_doc.flags.ignore_validate = True\n                        parent_doc.save()\n\n                    elif parent_doc.meta.get_field(\"vouchers\"):\n                        parent_doc.set(\"vouchers\", [])\n                        parent_doc.flags.ignore_links = True\n                        parent_doc.flags.ignore_validate = True\n                        parent_doc.save()\n\n", "CodeBleu_score": 25.02556824919841}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    # get the doctypes that have a repost_vouchers field\n    repost_doctypes = frappe.get_all(\"DocType\", filters={\"repost_vouchers\": 1}, pluck=\"name\")\n    # get the voucher type and number of the current document\n    voucher_type = self.doctype\n    voucher_number = self.name\n    # query for rows in the repost doctypes where the voucher type and number match the current document\n    rows = frappe.get_all(\n        repost_doctypes,\n        filters={\"voucher_type\": voucher_type, \"voucher_number\": voucher_number},\n        fields=[\"parent\", \"parenttype\"],\n    )\n    # organize the rows into a map by parent document type and parent\n    parent_map = defaultdict(lambda: defaultdict(list))\n    for row in rows:\n        parent_map[row.parenttype][row.parent].append(row)\n    # iterate over each parent document type\n    for parenttype, parents in parent_map.items():\n        # iterate over each parent document\n        for parent, rows in parents.items():\n            # retrieve the parent document\n            parent_doc = frappe.get_doc(parenttype, parent)\n            # remove the relevant rows from either \"repost_vouchers\" or \"vouchers\" fields depending on the doctype\n            if parent_doc.doctype in (\"Journal Entry\", \"GL Entry\"):\n                parent_doc.repost_vouchers = [\n                    row for row in parent_doc.repost_vouchers if row.voucher_number!= voucher_number\n                ]\n            else:\n                parent_doc.vouchers = [\n                    row for row in parent_doc.vouchers if row.voucher_number!= voucher_number\n                ]\n            # set flags to ignore validation and links\n            parent_doc.flags.ignore_links = True\n            parent_doc.flags.ignore_validate = True\n            # save the changes\n            parent_doc.save()\n\n", "CodeBleu_score": 27.799750194683252}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    # get the relevant repost doctypes\n    repost_doctypes = [\n        \"Repost Sales Invoice\",\n        \"Repost Purchase Invoice\",\n        \"Repost Journal Entry\",\n        \"Repost Sales Order\",\n        \"Repost Purchase Order\",\n        \"Repost Delivery Note\",\n        \"Repost Sales Invoice\",\n        \"Repost Purchase Invoice\",\n        \"Repost Journal Entry\",\n        \"Repost Sales Order\",\n        \"Repost Purchase Order\",\n        \"Repost Delivery Note\",\n        \"Repost Sales Invoice\",\n        \"Repost Purchase Invoice\",\n        \"Repost Journal Entry\",\n        \"Repost Sales Order\",\n        \"Repost Purchase Order\",\n        \"Repost Delivery Note\",\n    ]\n    # query for rows where the voucher type and number match the current document\n    repost_rows = frappe.get_all(\n        \"Repost Voucher\",\n        filters={\n            \"voucher_type\": self.doctype,\n            \"voucher_no\": self.name,\n        },\n        fields=[\"parent\", \"parenttype\"],\n    )\n    # organize the rows into a map by parent document type and parent\n    repost_map = defaultdict(list)\n    for row in repost_rows:\n        repost_map[row.parenttype].append(row.parent)\n    # get each parent document, remove the relevant rows from either \"repost_vouchers\" or \"vouchers\" fields depending on the doctype, set flags to ignore validation and links, and save the changes\n    for parent_doctype, parents in repost_map.items():\n        if parent_doctype in repost_doctypes:\n            parent_doc = frappe.get_doc(parent_doctype, parents[0])\n            if parent_doc.doctype in [\n                \"Repost Sales Invoice\",\n                \"Repost Purchase Invoice\",\n                \"Repost Journal Entry\",\n            ]:\n                parent_doc.repost_vouchers = [\n                    v for v in parent_doc.repost_vouchers if v.voucher_no!= self.name\n                ]\n            else:\n                parent_doc.vouchers = [\n                    v for v in parent_doc.vouchers if v.voucher_no!= self.name\n                ]\n            parent_doc.flags.ignore_links = True\n            parent_doc.flags.ignore_validate = True\n            parent_doc.save()\n\n", "CodeBleu_score": 21.57933951553621}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        # Authenticate the client\n        client = plaid.Client(\n            client_id=self.plaid_client_id,\n            secret=self.plaid_secret,\n            public_key=self.plaid_public_key,\n            environment=self.plaid_environment,\n        )\n\n        # Construct the query parameters\n        query_params = {\n            \"options\": {\"count\": 250, \"offset\": 0},\n            \"gte\": start_date,\n            \"lte\": end_date,\n        }\n\n        if account_id:\n            query_params[\"account_ids\"] = [account_id]\n\n        # Fetch the transactions\n        transactions = []\n        while True:\n            response = client.Transactions.get(\n                self.access_token, **query_params\n            )\n\n            # Add the retrieved transactions to the list\n            transactions.extend(response[\"transactions\"])\n\n            # Check if there are more transactions to fetch\n            if response[\"total_transactions\"] > len(transactions):\n                query_params[\"options\"][\"offset\"] += 250\n            else:\n                break\n\n        return transactions\n\n    except APIError as e:\n        # Handle specific API errors\n        raise e\n\n    except InvalidRequestError as e:\n        # Handle invalid request errors\n        raise e\n\n    except ItemError as e:\n        # Handle item errors\n        raise e\n\n    except Exception as e:\n        # Log any other exceptions\n        frappe.log_error(frappe.get_traceback())\n        raise e\n\n", "CodeBleu_score": 40.22322523981799}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        # Authenticate the client\n        client = plaid.Client(\n            client_id=self.client_id,\n            secret=self.secret,\n            public_key=self.public_key,\n            environment=self.environment,\n        )\n        # Construct the query parameters\n        query_params = {\n            \"start_date\": start_date,\n            \"end_date\": end_date,\n            \"options\": {\n                \"count\": 500,\n                \"offset\": 0,\n            },\n        }\n        if account_id:\n            query_params[\"account_ids\"] = [account_id]\n\n        # Fetch the transactions\n        transactions = []\n        while True:\n            response = client.Transactions.get(self.access_token, **query_params)\n            transactions.extend(response[\"transactions\"])\n            query_params[\"options\"][\"offset\"] += query_params[\"options\"][\"count\"]\n            if query_params[\"options\"][\"offset\"] >= response[\"total_transactions\"]:\n                break\n\n        # Return the transactions\n        return transactions\n    except APIError as e:\n        # Handle specific API errors\n        raise e\n    except (InvalidRequestError, ItemError) as e:\n        # Handle invalid requests and item errors\n        raise e\n    except Exception as e:\n        # Log any other exceptions\n        frappe.log_error(frappe.get_traceback())\n        raise e\n\n", "CodeBleu_score": 38.362882869534644}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        client = plaid.Client(\n            client_id=self.client_id,\n            secret=self.secret,\n            environment=self.environment,\n            api_version=\"2020-09-14\",\n        )\n        access_token = self.get_access_token()\n        if not access_token:\n            raise frappe.ValidationError(_(\"No access token found\"))\n\n        transactions_response = client.Transactions.get(\n            access_token,\n            start_date=start_date,\n            end_date=end_date,\n            options={\"count\": 500, \"offset\": 0},\n        )\n\n        transactions = transactions_response[\"transactions\"]\n        total_transactions = transactions_response[\"total_transactions\"]\n\n        while len(transactions) < total_transactions:\n            transactions_response = client.Transactions.get(\n                access_token,\n                start_date=start_date,\n                end_date=end_date,\n                options={\n                    \"count\": 500,\n                    \"offset\": len(transactions),\n                },\n            )\n            transactions.extend(transactions_response[\"transactions\"])\n\n        return transactions\n    except InvalidRequestError as e:\n        frappe.log_error(\n            title=\"Invalid Request Error\",\n            message=f\"Error: {e.error_code} - {e.error_message}\",\n            exc=e,\n        )\n        raise\n    except APIError as e:\n        frappe.log_error(\n            title=\"API Error\",\n            message=f\"Error: {e.error_code} - {e.error_message}\",\n            exc=e,\n        )\n        raise\n    except ItemError as e:\n        frappe.log_error(\n            title=\"Item Error\",\n            message=f\"Error: {e.error_code} - {e.error_message}\",\n            exc=e,\n        )\n        raise\n    except Exception as e:\n        frappe.log_error(\n            title=\"Unknown Error\",\n            message=\"An unknown error occurred while fetching transactions.\",\n            exc=e,\n        )\n        raise\n\n", "CodeBleu_score": 39.12782133773041}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t\n    try:\n        institution = response[\"item\"][\"institution_id\"]\n        institution_name = response[\"item\"][\"institution\"][\"name\"]\n        # Get the access token for the institution\n        access_token = PlaidConnector().get_access_token(token)\n        # Check if the institution already exists in the database\n        existing_bank = frappe.db.exists(\n            \"Bank\", {\"institution\": institution, \"access_token\": access_token}\n        )\n        if existing_bank:\n            # Update the access token if the institution already exists\n            bank = frappe.get_doc(\"Bank\", existing_bank)\n            bank.access_token = access_token\n            bank.save()\n        else:\n            # Create and insert a new bank record if the institution does not exist\n            bank = frappe.get_doc(\n                {\n                    \"doctype\": \"Bank\",\n                    \"institution\": institution,\n                    \"institution_name\": institution_name,\n                    \"access_token\": access_token,\n                }\n            )\n            bank.insert()\n        # Log any errors that occur during the process\n    except Exception as e:\n        frappe.log_error(frappe.get_traceback(), \"Plaid Integration\")\n\n", "CodeBleu_score": 45.74834842107058}, {"code": "def add_institution(token, response)\n\t\n    try:\n        institution_id = response[\"item\"][\"institution_id\"]\n        institution_name = response[\"item\"][\"institution_name\"]\n        access_token = PlaidConnector().get_access_token(token)\n        bank = frappe.get_doc(\"Bank\", {\"institution_id\": institution_id})\n        if bank.name:\n            bank.access_token = access_token\n            bank.save()\n        else:\n            bank = frappe.new_doc(\"Bank\")\n            bank.institution_id = institution_id\n            bank.institution_name = institution_name\n            bank.access_token = access_token\n            bank.save(ignore_permissions=True)\n    except Exception as e:\n        frappe.log_error(frappe.get_traceback(), \"Bank Integration\")\n\n", "CodeBleu_score": 40.81144383371323}, {"code": "def add_institution(token, response)\n\t\n    try:\n        if response[\"status\"] == \"connected\":\n            access_token = PlaidConnector.get_access_token(token)\n            institution = frappe.db.get_value(\n                \"Plaid Bank\", {\"bank_name\": response[\"institution\"][\"name\"]}\n            )\n            if not institution:\n                bank = frappe.get_doc(\n                    {\n                        \"doctype\": \"Plaid Bank\",\n                        \"bank_name\": response[\"institution\"][\"name\"],\n                        \"access_token\": access_token,\n                        \"public_token\": token,\n                    }\n                )\n                bank.insert(ignore_permissions=True)\n            else:\n                bank = frappe.get_doc(\"Plaid Bank\", institution)\n                bank.access_token = access_token\n                bank.save(ignore_permissions=True)\n    except ItemError as e:\n        frappe.log_error(frappe.get_traceback(), title=e)\n\n", "CodeBleu_score": 46.20075841340289}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        plaid_settings = frappe.get_single(\"Plaid Settings\")\n        plaid_connector = PlaidConnector(plaid_settings)\n        # Get the last integration date for the bank account\n        last_integration_date = frappe.db.get_value(\"Bank Account\", bank_account, \"last_integration_date\")\n        if not last_integration_date:\n            last_integration_date = getdate(today()) - 30\n        # Get the start and end dates for the transaction retrieval\n        start_date = formatdate(last_integration_date)\n        end_date = formatdate(add_months(last_integration_date, 1))\n        # Fetch the transactions\n        transactions = plaid_connector.get_transactions(bank, bank_account, start_date, end_date)\n        # Process the transactions into new bank transactions\n        for transaction in transactions:\n            if transaction[\"date\"] > last_integration_date:\n                new_bank_transaction = frappe.new_doc(\"Bank Transaction\")\n                new_bank_transaction.posting_date = transaction[\"date\"]\n                new_bank_transaction.bank_account = bank_account\n                new_bank_transaction.amount = transaction[\"amount\"]\n                new_bank_transaction.reference_number = transaction[\"transaction_id\"]\n                new_bank_transaction.remarks = transaction[\"name\"]\n                new_bank_transaction.save()\n        # Update the last integration date to the date of the oldest transaction\n        oldest_transaction_date = min(transaction[\"date\"] for transaction in transactions)\n        frappe.db.set_value(\"Bank Account\", bank_account, \"last_integration_date\", oldest_transaction_date)\n        # Log the number of new transactions added\n        frappe.log_error(f\"Added {len(transactions)} new transactions for bank account {bank_account}.\")\n    except ItemError as e:\n        # Log the error message\n        frappe.log_error(f\"Error syncing transactions for bank account {bank_account}: {e}\")\n\n", "CodeBleu_score": 40.08859593127179}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        start_date = bank_account.last_integration_date or bank.start_date\n        end_date = today()\n        transactions = get_transactions(bank, bank_account, start_date, end_date)\n        for transaction in transactions:\n            process_transaction(bank, bank_account, transaction)\n        bank_account.last_integration_date = getdate(transactions[-1].date)\n        bank_account.save()\n        frappe.db.commit()\n        frappe.msgprint(_(\"Added {0} new transactions\").format(len(transactions)))\n    except Exception as e:\n        frappe.log_error(title=\"Error syncing transactions\", message=str(e))\n\n", "CodeBleu_score": 27.365232909345345}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        connector = PlaidConnector(bank)\n        start_date = bank_account.last_integration_date or today()\n        end_date = today()\n        transactions = connector.get_transactions(bank_account.access_token, start_date, end_date)\n        for transaction in transactions:\n            if not frappe.db.exists(\"Bank Transaction\", transaction[\"transaction_id\"]):\n                bank_transaction = frappe.new_doc(\"Bank Transaction\")\n                bank_transaction.update(\n                    {\n                        \"transaction_id\": transaction[\"transaction_id\"],\n                        \"bank_account\": bank_account.name,\n                        \"bank\": bank_account.bank,\n                        \"date\": transaction[\"date\"],\n                        \"amount\": transaction[\"amount\"],\n                        \"name\": transaction[\"name\"],\n                        \"transaction_type\": transaction[\"transaction_type\"],\n                        \"pending\": transaction[\"pending\"],\n                        \"account\": transaction[\"account\"],\n                        \"category\": transaction[\"category\"],\n                        \"category_id\": transaction[\"category_id\"],\n                        \"transaction_code\": transaction[\"transaction_code\"],\n                        \"unofficial_currency_code\": transaction[\"unofficial_currency_code\"],\n                    }\n                )\n                bank_transaction.flags.ignore_mandatory = True\n                bank_transaction.insert(ignore_permissions=True)\n                add_tag(bank_transaction.name, \"Bank Transaction\")\n        if transactions:\n            bank_account.last_integration_date = transactions[-1][\"date\"]\n            bank_account.save()\n        frappe.db.commit()\n        frappe.msgprint(f\"Added {len(transactions)} new transactions.\")\n    except ItemError as e:\n        frappe.log_error(f\"Error syncing transactions for {bank_account.name}: {e}\")\n\n", "CodeBleu_score": 27.51826070529421}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t\n    try:\n        # Construct the query URI\n        query_uri = f\"query?query=select * from {entity}\"\n\n        # Determine the total number of entries\n        total_entries = int(self.get_total_entries(query_uri))\n\n        # Fetch the entries in batches of 1000\n        for i in range(0, total_entries, 1000):\n            entries = self.get_entries(query_uri, i, 1000)\n\n            # Preprocess and save the entries\n            self.preprocess_entries(entity, entries)\n            self.save_entries(entity, entries)\n    except Exception as e:\n        frappe.log_error(\n            f\"Error migrating {entity} from QuickBooks: {e}\",\n            title=f\"Error migrating {entity}\",\n            exc=traceback.format_exc(),\n        )\n\n", "CodeBleu_score": 26.455663453563133}, {"code": "def _migrate_entries(self, entity)\n\t\n    try:\n        self.processed_entries = 0\n        self.total_entries = 0\n        self.processed_entries_list = []\n        self.total_entries_list = []\n        self.error_entries_list = []\n        self.error_entries = 0\n        self.error_list = []\n        self.error_log = \"\"\n        self.error_log_list = []\n        self.company_abbr = encode_company_abbr(self.company)\n\n        # Construct the query URI\n        query_uri = self.base_url + self.query_uri_map[entity]\n\n        # Determine the total number of entries\n        response = self.get_request(query_uri)\n        if response.status_code == 200:\n            data = response.json()\n            self.total_entries = data[\"QueryResponse\"][entity + \"Count\"]\n            self.total_entries_list.append(self.total_entries)\n            self.total_entries_list.append(entity)\n            self.total_entries_list.append(self.company_abbr)\n            frappe.get_doc(\n                {\n                    \"doctype\": \"QB Total Entries\",\n                    \"total_entries\": self.total_entries,\n                    \"entity\": entity,\n                    \"company\": self.company,\n                }\n            ).insert()\n\n            # Fetch entries in batches of 1000\n            if self.total_entries > 0:\n                for start_pos in range(0, self.total_entries, 1000):\n                    query_uri = self.base_url + self.query_uri_map[entity]\n                    query_uri += \"&startPosition=\" + str(start_pos + 1)\n                    response = self.get_request(query_uri)\n                    if response.status_code == 200:\n                        data = response.json()\n                        entries = data[\"QueryResponse\"][entity]\n                        self.processed_entries += len(entries)\n                        self.processed_entries_list.append(self.processed_entries)\n                        self.processed_entries_list.append(entity)\n                        self.processed_entries_list.append(self.company_abbr)\n                        frappe.get_doc(\n                            {\n                                \"doctype\": \"QB Processed Entries\",\n                                \"processed_entries\": self.processed_entries,\n                                \"entity\": entity,", "CodeBleu_score": 24.229050485500114}, {"code": "def _migrate_entries(self, entity)\n\t\n    try:\n        query_uri = self.get_query_uri(entity)\n        total_count = self.get_total_count(query_uri)\n        self.logger.info(\n            f\"Total {entity} count: {total_count} for company {self.company_name}\"\n        )\n        for i in range(0, total_count, 1000):\n            query_uri = self.get_query_uri(entity, i)\n            response = self.get_data(query_uri)\n            if response.status_code == 200:\n                entries = response.json().get(\"QueryResponse\", {}).get(entity, [])\n                self.logger.info(\n                    f\"Fetched {len(entries)} {entity} entries for company {self.company_name}\"\n                )\n                self.preprocess_and_save_entries(entries, entity)\n            else:\n                self.logger.error(\n                    f\"Failed to fetch {entity} entries for company {self.company_name}. Status code: {response.status_code}. Response text: {response.text}\"\n                )\n    except Exception as e:\n        self.logger.error(\n            f\"Failed to migrate {entity} entries for company {self.company_name}. Error: {str(e)}\"\n        )\n        self.logger.error(traceback.format_exc())\n\n", "CodeBleu_score": 30.98244892742298}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\t\n    invoice.quickbooks_id = invoice.name\n    invoice.save()\n    if invoice.quickbooks_id:\n        invoice.quickbooks_id = invoice.quickbooks_id.replace(\n            \"INV-\", \"INV\")\n        invoice.save()\n\n    for linked_transaction in invoice.linked_transactions:\n        if linked_transaction.transaction_type in [\n                \"StatementCharge\", \"ReimburseCharge\"]:\n            _save_journal_entry(self, invoice)\n            break\n    else:\n        _save_sales_invoice(self, invoice)\n\n", "CodeBleu_score": 24.448751430582043}, {"code": "def _save_invoice(self, invoice)\n\t\n    if invoice.DocType == \"Invoice\":\n        # Save the invoice as a sales invoice\n        self.save_sales_invoice(invoice)\n    elif invoice.DocType == \"JournalEntry\":\n        # Save the invoice as a journal entry\n        self.save_journal_entry(invoice)\n    else:\n        # Save the invoice as a journal entry\n        self.save_journal_entry(invoice)\n\n", "CodeBleu_score": 23.752173382847115}, {"code": "def _save_invoice(self, invoice)\n\t\n    if invoice.get(\"LinkedTxn\"):\n        for linked_txn in invoice.get(\"LinkedTxn\"):\n            if linked_txn.get(\"TxnType\") in [\"StatementCharge\", \"ReimburseCharge\"]:\n                self._save_journal_entry(invoice)\n                return\n    self._save_sales_invoice(invoice)\n\n", "CodeBleu_score": 30.067042655199778}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    if no_of_visit == 0:\n        return []\n    if start_date > end_date:\n        throw(_(\"Start date cannot be after end date\"))\n\n    schedule_list = []\n    interval = date_diff(end_date, start_date) / (no_of_visit - 1)\n    if interval < 1:\n        interval = 1\n    for i in range(no_of_visit):\n        schedule_date = add_days(start_date, interval * i)\n        holidays = get_holiday_list_for_employee(sales_person, schedule_date, schedule_date)\n        if holidays:\n            schedule_date = add_days(schedule_date, 1)\n        schedule_list.append(schedule_date)\n    return schedule_list\n\n", "CodeBleu_score": 38.128127902083946}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    holidays = get_holiday_list_for_employee(sales_person, start_date, end_date)\n    schedule_list = []\n    interval = date_diff(end_date, start_date) / no_of_visit\n    for i in range(no_of_visit):\n        schedule_date = add_days(start_date, i * interval)\n        while schedule_date in holidays:\n            schedule_date = add_days(schedule_date, 1)\n        schedule_list.append(schedule_date)\n    return schedule_list\n\n", "CodeBleu_score": 26.88727369730145}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    if not sales_person:\n        sales_person = self.sales_person\n    if not sales_person:\n        sales_person = self.customer_group\n    if not sales_person:\n        sales_person = self.territory\n    if not sales_person:\n        sales_person = self.customer\n    if not sales_person:\n        sales_person = self.customer_name\n    if not sales_person:\n        sales_person = self.contact_person\n\n    interval = self.get_interval(sales_person)\n\n    schedule_list = []\n    if no_of_visit and interval:\n        if not start_date:\n            start_date = getdate(self.planned_start_date)\n        if not end_date:\n            end_date = getdate(self.planned_end_date)\n\n        if not self.visit_date:\n            self.visit_date = start_date\n\n        if self.visit_date:\n            schedule_list.append(self.visit_date)\n\n        if start_date and end_date:\n            if start_date > end_date:\n                throw(_(\"Start Date must be before End Date\"))\n\n            if start_date > self.visit_date:\n                start_date = self.visit_date\n\n            if end_date < self.visit_date:\n                end_date = self.visit_date\n\n            if interval == 0:\n                interval = 1\n\n            # Calculate the number of days between the start and end dates\n            days_between = date_diff(end_date, start_date)\n\n            # Calculate the number of visits that can be scheduled within the range\n            no_of_visit = min(no_of_visit, days_between // interval + 1)\n\n            # Calculate the number of days between the start date and the first visit date\n            days_to_first_visit = date_diff(schedule_list[0], start_date)\n\n            # Calculate the number of days between the start date and the last visit date\n            days_to_last_visit = date_diff(schedule_list[-1], start_date)\n\n            # Calculate the number of days between the first and last visit dates\n            days_between_visits = date_diff(schedule_list[-1], schedule_list[0])\n\n            # Calculate the number of days between the last visit date and the end date\n            days_to_end =", "CodeBleu_score": 28.73351316714501}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\t\t$method = $this->getMethod();\n\n\t$data['title'] = $this->title;\n\t$data['path'] = $this->path;\n\t$data['handle'] = $this->handle;\n\t$data['modal'] = $this->modal;\n\t$data['bulk'] = $this->bulk;\n\n\tif ($this->method =='modal') {\n\t    $data['html'] = view($view, $data)->render();\n\t} else {\n\t    $data['html'] = '';\n\t}\n\n\treturn response()->json([\n\t   'success' => true,\n\t   'message' => $this->message,\n\t    'data' => $data\n\t]);\n    }", "CodeBleu_score": 33.79840136987687}, {"code": "<?\n   public function response($view, $data = []){\n\t\t$method = request()->method();\n\t$url = $this->url();\n\t$html = view($view, $data)->render();\n\n\treturn response()->json([\n\t\t'status' => true,\n\t\t'message' => 'Success',\n\t\t'data' => [\n\t\t\t'title' => $this->title(),\n\t\t\t'path' => $this->path(),\n\t\t\t'handle' => $this->handle(),\n\t\t\t'html' => $html\n\t\t]\n\t]);\n}", "CodeBleu_score": 29.088335903589535}, {"code": "<?\n   public function response($view, $data = []){\n\t\n// Get the request method and the bulk action handle\n$method = request()->method();\n$handle = request()->get('handle');\n\n// Construct the URL for bulk actions\n$url = route('common.bulk', [\n    'handle' => $handle,\n]);\n\n// Render the HTML content for the modal using the specified view and data\n$html = view($view, $data)->render();\n\n// Return the JSON response\nreturn response()->json([\n   'success' => true,\n   'message' => __('messages.success'),\n    'data' => [\n        'title' => __('messages.success'),\n        'path' => $url,\n        'handle' => $handle,\n        'html' => $html,\n    ],\n]);\n}", "CodeBleu_score": 40.93737043203758}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t\ttry {\n\t\t$contacts = $this->getContacts($request);\n\t\t$contacts->each(function ($contact) {\n\t\t\tBus::dispatch(new DeleteContact($contact));\n\t\t});\n\t\t$this->alertSuccess(__('contacts.deleted'));\n\t} catch (Throwable $th) {\n\t\t$this->alertError(__('contacts.not_deleted'));\n\t}\n}", "CodeBleu_score": 40.00010180546689}, {"code": "<?\npublic function deleteContacts($request){\n\t\ttry {\n\t\t$contacts = $request->input('contacts');\n\t\t$contacts = explode(',', $contacts);\n\n\t\tforeach ($contacts as $contact) {\n\t\t\t$contact = Contact::findOrFail($contact);\n\t\t\t$job = (new DeleteContact($contact));\n\t\t\tBus::dispatch($job);\n\t\t}\n\t} catch (Throwable $e) {\n\t\treturn redirect()->back()->with('error', $e->getMessage());\n\t}\n}", "CodeBleu_score": 44.77560126656213}, {"code": "<?\npublic function deleteContacts($request){\n\t\t$contacts = $this->getContacts($request);\n\t$errors = [];\n\tforeach ($contacts as $contact) {\n\t\ttry {\n\t\t\tBus::dispatch(new DeleteContact($contact));\n\t\t} catch (Throwable $e) {\n\t\t\t$errors[] = $e->getMessage();\n\t\t}\n\t}\n\tif (count($errors)) {\n\t\treturn back()->withErrors($errors);\n\t}\n\treturn redirect()->route('contacts.index');\n}", "CodeBleu_score": 48.462260472059256}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t\t$transactions = Transaction::with('contact', 'category', 'account', 'attachments')->whereIn('id', $request->get('transactions'))->get();\n\t$count = 0;\n\tforeach ($transactions as $transaction) {\n\t\ttry {\n\t\t\tBus::dispatch(new DeleteTransaction($transaction));\n\t\t\t$count++;\n\t\t} catch (Throwable $e) {\n\t\t\tflash(trans('general.x_has_been_deleted', ['x' => trans('general.transaction')]), 'danger');\n\t\t}\n\t}\n\tflash(trans_choice('general.x_has_been_deleted', $count, ['x' => trans_choice('general.transaction', $count)]),'success');\n}", "CodeBleu_score": 44.88399405679427}, {"code": "<?\npublic function deleteTransactions($request){\n\t\t$transactions = Transaction::with('transactionCategory', 'transactionType', 'transactionStatus', 'transactionPayee', 'transactionPayer', 'transactionPayee.transactionPayeeContacts', 'transactionPayer.transactionPayerContacts')\n\t\t->whereIn('id', $request->transaction_ids)\n\t\t->get();\n\n\tforeach ($transactions as $transaction) {\n\t\ttry {\n\t\t\tBus::dispatch(new DeleteTransaction($transaction));\n\t\t} catch (Throwable $e) {\n\t\t\tflash($e->getMessage())->error();\n\t\t}\n\t}\n}", "CodeBleu_score": 50.16992858111343}, {"code": "<?\npublic function deleteTransactions($request){\n\t\t$transactions = $this->getTransactions($request);\n\ttry {\n\t\t$transactions->each(function($transaction) {\n\t\t\tBus::dispatch(new DeleteTransaction($transaction));\n\t\t});\n\t} catch (Throwable $e) {\n\t\tflash(trans('messages.error_deleting_transactions'))->error();\n\t}\n}", "CodeBleu_score": 41.56686511178966}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\t\tif (!class_exists($requestClass = $this->requestClass())) return;\n\tif (!is_a($requestClass, FormRequest::class, true)) return;\n\n\t$validator->after(function($validator) use ($requestClass) {\n\t\tforeach ($this->data as $row) {\n\t\t\t$request = new $requestClass($row);\n\t\t\t$validator->setData($request->all());\n\t\t\t$validator->setRules($request->rules());\n\n\t\t\ttry {\n\t\t\t\t$validator->validate();\n\t\t\t} catch (ValidationException $e) {\n\t\t\t\t$validator->errors()->merge($e->errors());\n\t\t\t\tthrow $e;\n\t\t\t}\n\t\t}\n\t});\n}", "CodeBleu_score": 28.342026443427983}, {"code": "<?\npublic function withValidator($validator){\n\t\t$request = $this->request();\n\tif (class_exists($request) && $request instanceof FormRequest) {\n\t\tforeach ($validator->getData() as $key => $row) {\n\t\t\t$request = $request::createFrom($row);\n\t\t\t$rules = $request->rules();\n\t\t\t$validator->setRules(Arr::dot($rules));\n\t\t\ttry {\n\t\t\t\t$request->validateResolved();\n\t\t\t} catch (ValidationException $e) {\n\t\t\t\t$validator->errors()->add($key, $e->errors());\n\t\t\t\tthrow $e;\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 28.38329507647655}, {"code": "<?\npublic function withValidator($validator){\n\t\t$requestClass = Arr::get($this->options,'request');\n\tif (class_exists($requestClass) && $requestClass instanceof FormRequest) {\n\t\t$request = $requestClass::createFrom($this->request);\n\t\t$validator->after(function ($validator) use ($request) {\n\t\t\ttry {\n\t\t\t\t$request->validateResolved();\n\t\t\t} catch (ValidationException $e) {\n\t\t\t\t$validator->errors()->merge($e->validator->errors()->messages());\n\t\t\t}\n\t\t});\n\t}\n}", "CodeBleu_score": 27.978475306151463}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\t$this->bootModel($arguments[0]?? null);\n\t$this->bootRequest($arguments[1]?? null);\n}", "CodeBleu_score": 11.798329569269143}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\tif ($arguments[0] instanceof Model) {\n\t\t$this->setModel($arguments[0]);\n\t}\n\tif ($arguments[1] instanceof Request) {\n\t\t$this->setRequest($arguments[1]);\n\t}\n}", "CodeBleu_score": 25.470869792903038}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\t$this->bootSource($arguments);\n\t$this->bootRelationships($arguments);\n\t$this->bootUploads($arguments);\n\t$this->bootModel($arguments);\n\t$this->bootRequest($arguments);\n}", "CodeBleu_score": 14.044611717306912}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t\t$sort = $this->sort($sort);\n\t$query = $this->applySearch($query);\n\t$query = $query->orderBy($sort->column, $sort->direction);\n\tif (request()->expectsJson() &&! request()->wantsJson() &&! request()->is('api/*')) {\n\t\treturn $query->get();\n\t}\n\treturn $query->paginate(request('limit', config('akaunting.limit')));\n}", "CodeBleu_score": 43.680954498637604}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t\t$sort = request('sort', $sort);\n\t$query = $this->scopeSearch($query);\n\t$query = $this->scopeSort($query, $sort);\n\t$limit = request('limit', config('settings.default_limit'));\n\t$json = request('json', false);\n\t$api = request('api', false);\n\tif ($json &&!$api) {\n\t\treturn $query->get();\n\t} else {\n\t\treturn $query->paginate($limit);\n\t}\n}", "CodeBleu_score": 45.23310670953874}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t\t$sort = request()->sort?? $sort;\n\t$sort = explode('|', $sort);\n\t$sort[0] = $sort[0]?? 'name';\n\t$sort[1] = $sort[1]?? 'asc';\n\t$sort[2] = $sort[2]??'string';\n\n\t$search = request()->search;\n\n\tif ($search) {\n\t\t$query->searchString($search);\n\t}\n\n\tif (request()->expectsJson() &&! request()->ajax()) {\n\t\treturn $query->get();\n\t}\n\n\treturn $query->sortable($sort[0], $sort[1], $sort[2])->paginate(request()->limit?? config('settings.limit'));\n}", "CodeBleu_score": 45.03179731247631}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$openAmount = 0;\n\t$overdueAmount = 0;\n\tif ($model->status == 'paid') {\n\t\treturn [0, 0];\n\t}\n\tif ($model->status == 'partial') {\n\t\t$openAmount = $model->amount - $model->transactions->sum('amount');\n\t}\n\tif ($model->due_date < Date::now()) {\n\t\t$overdueAmount = $openAmount;\n\t\t$openAmount = 0;\n\t}\n\treturn [$openAmount, $overdueAmount];\n}", "CodeBleu_score": 37.57712674106794}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$open = $overdue = 0;\n\n\tif ($model->status == 'paid') {\n\t\treturn [0, 0];\n\t}\n\n\tif ($model->status == 'partial') {\n\t\t$open = $model->transactions->sum('amount');\n\t\t$overdue = $model->transactions->sum('amount');\n\t}\n\n\tif ($model->due_date < now()) {\n\t\t$overdue = $model->amount - $open;\n\t} else {\n\t\t$open = $model->amount - $open;\n\t}\n\n\treturn [$open, $overdue];\n}", "CodeBleu_score": 45.09505941499351}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$open = 0;\n\t$overdue = 0;\n\n\tif ($model->status == 'paid') {\n\t\treturn [0, 0];\n\t}\n\n\tif ($model->status == 'partial') {\n\t\t$open = $model->transactions()->sum('amount');\n\t}\n\n\tif ($model->due_date < Date::today()) {\n\t\t$overdue = $model->amount - $open;\n\t} else {\n\t\t$open = $model->amount - $open;\n\t}\n\n\treturn [$open, $overdue];\n}", "CodeBleu_score": 43.89720829005063}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t$page = $page?: Paginator::resolveCurrentPage($pageName);\n\t$perPage = $perPage?: $this->model->getPerPage();\n\t$results = $this->model->forPage($page, $perPage)->get($columns);\n\treturn $this->paginator($results, $this->model->getCountForPagination(), $perPage, $page, [\n\t\t'path' => Paginator::resolveCurrentPath(),\n\t\t'pageName' => $pageName,\n\t]);\n}", "CodeBleu_score": 62.6052597034945}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t$page = $page?: Paginator::resolveCurrentPage($pageName);\n\t$perPage = $perPage?: $this->model->getPerPage();\n\t$results = $this->model->forPage($page, $perPage)->get($columns);\n\treturn $this->paginator($results, $this->model->getCountForPagination(), $perPage, $page, [\n\t\t'path' => Paginator::resolveCurrentPath(),\n\t\t'pageName' => $pageName,\n\t]);\n}", "CodeBleu_score": 62.6052597034945}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t$perPage = $perPage?: $this->model->getPerPage();\n\n\t$page = $page?: Paginator::resolveCurrentPage($pageName);\n\n\t$total = $this->toBase()->getCountForPagination();\n\n\t$results = $total? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n\n\treturn $this->paginator($results, $total, $perPage, $page, [\n\t\t'path' => Paginator::resolveCurrentPath(),\n\t\t'pageName' => $pageName,\n\t]);\n}", "CodeBleu_score": 74.52351706000235}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t\t$reconciliations = Reconciliation::whereIn('id', $request->ids)->get();\n\n\tforeach ($reconciliations as $reconciliation) {\n\t\tDB::transaction(function () use ($reconciliation) {\n\t\t\t$reconciliation->status ='reconciled';\n\t\t\t$reconciliation->save();\n\n\t\t\t$transactions = Transaction::where('account_id', $reconciliation->account_id)\n\t\t\t\t->whereBetween('date', [$reconciliation->start_date, $reconciliation->end_date])\n\t\t\t\t->get();\n\n\t\t\tforeach ($transactions as $transaction) {\n\t\t\t\t$transaction->reconciled = true;\n\t\t\t\t$transaction->save();\n\t\t\t}\n\t\t});\n\t}\n}", "CodeBleu_score": 44.85761516174968}, {"code": "<?\npublic function reconcile($request){\n\t\t$reconciliations = Reconciliation::whereIn('id', $request->get('reconciliations'))->get();\n\n\tforeach ($reconciliations as $reconciliation) {\n\t\t$reconciliation->status ='reconciled';\n\t\t$reconciliation->save();\n\n\t\t$transactions = Transaction::where('account_id', $reconciliation->account_id)\n\t\t\t->whereBetween('transaction_date', [$reconciliation->start_date, $reconciliation->end_date])\n\t\t\t->get();\n\n\t\tforeach ($transactions as $transaction) {\n\t\t\t$transaction->is_reconciled = true;\n\t\t\t$transaction->save();\n\t\t}\n\t}\n}", "CodeBleu_score": 39.73831022913082}, {"code": "<?\npublic function reconcile($request){\n\t\t$reconciliations = Reconciliation::whereIn('id', $request->ids)->get();\n\n\tforeach ($reconciliations as $reconciliation) {\n\t\t$reconciliation->status = Reconciliation::STATUS_RECONCILED;\n\t\t$reconciliation->save();\n\n\t\t$transactions = Transaction::where('account_id', $reconciliation->account_id)\n\t\t\t->where('date', '>=', $reconciliation->start_date)\n\t\t\t->where('date', '<=', $reconciliation->end_date)\n\t\t\t->get();\n\n\t\tforeach ($transactions as $transaction) {\n\t\t\t$transaction->reconciled = true;\n\t\t\t$transaction->save();\n\t\t}\n\t}\n}", "CodeBleu_score": 38.65168517745205}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t\ttry {\n\t\t// Retrieve existing invitations for the user\n\t\t$invitations = UserInvitation::where('user_id', $this->user->id)->get();\n\n\t\t// Delete existing invitations for the user\n\t\tforeach ($invitations as $invitation) {\n\t\t\t$invitation->delete();\n\t\t}\n\n\t\t// Create a new invitation with a unique token\n\t\t$invitation = new UserInvitation();\n\t\t$invitation->user_id = $this->user->id;\n\t\t$invitation->token = Str::random(128);\n\t\t$invitation->save();\n\n\t\t// Dispatch a notification job to notify the user\n\t\tNotification::dispatch($this->user, $invitation);\n\t} catch (TransportException $e) {\n\t\t// Throw an exception with an error message\n\t\tthrow new Exception('Failed to send invitation email');\n\t}\n\n\t// Return the newly created invitation\n\treturn $invitation;\n}", "CodeBleu_score": 41.46249855007576}, {"code": "<?\npublic function handle(): UserInvitation{\n\t\t$this->user->invitations()->delete();\n\n\t$invitation = $this->user->invitations()->create([\n\t\t'token' => Str::random(32),\n\t]);\n\n\ttry {\n\t\t$this->user->notify(new Notification($invitation));\n\t} catch (TransportException $e) {\n\t\tthrow new Exception('Failed to send invitation email');\n\t}\n\n\treturn $invitation;\n}", "CodeBleu_score": 22.598232802479536}, {"code": "<?\npublic function handle(): UserInvitation{\n\t\t$this->user->load('invitations');\n\n\t$this->user->invitations()->delete();\n\n\t$invitation = $this->user->invitations()->create([\n\t\t'token' => Str::uuid(),\n\t]);\n\n\ttry {\n\t\t$invitation->notify(new Notification());\n\t} catch (TransportException $e) {\n\t\tthrow new Exception('Unable to send invitation email');\n\t}\n\n\treturn $invitation;\n}", "CodeBleu_score": 22.61482199367267}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\t\tif ($this->transaction->isReconciled()) {\n\t\tthrow new Exception('This transaction has been reconciled and cannot be edited.');\n\t}\n\n\tif ($this->transaction->isTransfer()) {\n\t\tthrow new Exception('This transaction is a transfer and cannot be edited.');\n\t}\n}", "CodeBleu_score": 25.164388349302158}, {"code": "<?\npublic function authorize(): void{\n\t\tif ($this->transaction->isReconciled()) {\n\t\tthrow new \\Exception('The transaction has already been reconciled.');\n\t}\n\n\tif ($this->transaction->isTransfer()) {\n\t\tthrow new \\Exception('The transaction is a transfer transaction.');\n\t}\n}", "CodeBleu_score": 31.23786580647114}, {"code": "<?\npublic function authorize(): void{\n\t\tif ($this->transaction->isReconciled()) {\n\t\tthrow new \\Exception('Transaction is already reconciled');\n\t}\n\tif ($this->transaction->isTransfer()) {\n\t\tthrow new \\Exception('Transaction is a transfer');\n\t}\n}", "CodeBleu_score": 31.041968516907847}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t\tif (tenantId!= 0) {\n\t\t// Allow access to specific tables if tenant ID is not zero\n\t\treturn Arrays.asList(\"table1\", \"table2\", \"table3\").contains(tableName);\n\t}\n\t// Deny access to all tables if tenant ID is zero\n\treturn false;\n}", "CodeBleu_score": 9.433017894391272}, {"code": "public boolean doTableFilter(String tableName){\n\t\t// Get the tenant ID from the request's access token\n\tHttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();\n\tString tenantId = request.getHeader(\"X-TENANT-ID\");\n\n\t// If the tenant ID is not zero, allow access to certain predefined tables, otherwise, deny access\n\tif (!tenantId.equals(\"0\")) {\n\t\tList<String> allowedTables = Arrays.asList(\"table1\", \"table2\", \"table3\");\n\t\treturn allowedTables.contains(tableName);\n\t} else {\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 28.44563382664969}, {"code": "public boolean doTableFilter(String tableName){\n\t\t// Extract the tenant ID from the request's access token\n\tString tenantId = request.getHeader(\"X-TENANT-ID\");\n\n\t// Check if the tenant ID is not zero\n\tif (!\"0\".equals(tenantId)) {\n\t\t// Allow access to specific tables\n\t\tList<String> allowedTables = Arrays.asList(\"table1\", \"table2\", \"table3\");\n\t\treturn allowedTables.contains(tableName);\n\t}\n\n\t// Deny access for other tables\n\treturn false;\n}", "CodeBleu_score": 24.093384121735976}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 63.20374477183781}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 63.20374477183781}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 63.38599822289982}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t\t// create a logger to log any errors or exceptions\n\tLogger logger = LoggerFactory.getLogger(AccountController.class);\n\t// create a BaseResponseInfo object to store the response data\n\tBaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n\t// create a JSONObject object to store the JSON response data\n\tJSONObject json = new JSONObject();\n\t// create a JSONArray object to store the JSON array of account IDs and names\n\tJSONArray jsonArray = new JSONArray();\n\ttry {\n\t\t// get the list of accounts from accountService\n\t\tList<Account> accountList = accountService.findAll();\n\t\t// loop through the list of accounts\n\t\tfor (Account account : accountList) {\n\t\t\t// create a JSONObject object to store the JSON data for each account\n\t\t\tJSONObject jsonObject = new JSONObject();\n\t\t\t// add the account ID and name to the JSONObject\n\t\t\tjsonObject.put(\"id\", account.getId());\n\t\t\tjsonObject.put(\"name\", account.getName());\n\t\t\t// add the JSONObject to the JSONArray\n\t\t\tjsonArray.add(jsonObject);\n\t\t}\n\t\t// set the JSON response data\n\t\tjson.put(\"data\", jsonArray);\n\t\t// set the response status to success\n\t\tbaseResponseInfo.setSuccess(true);\n\t\t// set the response message to \"success\"\n\t\tbaseResponseInfo.setMsg(\"success\");\n\t\t// set the response data to the JSON object\n\t\tbaseResponseInfo.setData(json);\n\t} catch (Exception e) {\n\t\t// log the error message\n\t\tlogger.error(e.getMessage());\n\t\t// set the response status to failure\n\t\tbaseResponseInfo.setSuccess(false);\n\t\t// set the response message to the error message\n\t\tbaseResponseInfo.setMsg(e.getMessage());\n\t}\n\t// return the response data as a JSON string\n\treturn returnJson(request, baseResponseInfo);\n}", "CodeBleu_score": 36.400870301748256}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t\tLogger logger = LoggerFactory.getLogger(AccountController.class);\n\ttry {\n\t\tString token = request.getHeader(\"token\");\n\t\tString json = request.getParameter(\"json\");\n\t\tJSONObject jsonObj = JSONObject.parseObject(json);\n\t\tString accountName = jsonObj.getString(\"accountName\");\n\t\tString accountType = jsonObj.getString(\"accountType\");\n\t\tString accountCode = jsonObj.getString(\"accountCode\");\n\t\tString accountNature = jsonObj.getString(\"accountNature\");\n\t\tString accountCategory = jsonObj.getString(\"accountCategory\");\n\t\tString accountStatus = jsonObj.getString(\"accountStatus\");\n\t\tString accountLevel = jsonObj.getString(\"accountLevel\");\n\t\tString accountProperty = jsonObj.getString(\"accountProperty\");\n\t\tString accountBalance = jsonObj.getString(\"accountBalance\");\n\t\tString accountBalanceType = jsonObj.getString(\"accountBalanceType\");\n\t\tString accountCurrency = jsonObj.getString(\"accountCurrency\");\n\t\tString accountCurrencyType = jsonObj.getString(\"accountCurrencyType\");\n\t\tString accountParent = jsonObj.getString(\"accountParent\");\n\t\tString accountParentName = jsonObj.getString(\"accountParentName\");\n\t\tString accountParentCode = jsonObj.getString(\"accountParentCode\");\n\t\tString accountParentProperty = jsonObj.getString(\"accountParentProperty\");\n\t\tString accountParentBalance = jsonObj.getString(\"accountParentBalance\");\n\t\tString accountParentBalanceType = jsonObj.getString(\"accountParentBalanceType\");\n\t\tString accountParentCurrency = jsonObj.getString(\"accountParentCurrency\");\n\t\tString accountParentCurrencyType = jsonObj.getString(\"accountParentCurrencyType\");\n\t\tString accountParentLevel = jsonObj.getString(\"accountParentLevel\");\n\t\tString accountParentCategory = jsonObj.getString(\"accountParentCategory\");\n\t\tString accountParentType = jsonObj.getString(\"accountParentType\");\n\t\tString accountParentStatus = jsonObj.getString(\"accountParentStatus\");\n\t\tString accountParentNature = jsonObj.getString(\"accountParentNature\");\n\t\tString accountParentProperty2 = jsonObj.getString(\"accountParentProperty2\");\n\t\tString accountParentBalance2 = jsonObj.getString(\"accountParentBalance2\");\n\t\tString accountParentBalanceType2 = jsonObj.getString(\"accountParentBalanceType2\");\n\t\tString accountParentCurrency2 = jsonObj.getString(\"accountParentCurrency2\");", "CodeBleu_score": 14.714174583482079}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t\tString json = \"\";\n\ttry {\n\t\tList<Account> list = accountService.findBySelect();\n\t\tJSONArray jsonArray = new JSONArray();\n\t\tfor (Account account : list) {\n\t\t\tJSONObject jsonObject = new JSONObject();\n\t\t\tjsonObject.put(\"id\", account.getId());\n\t\t\tjsonObject.put(\"name\", account.getName());\n\t\t\tjsonArray.add(jsonObject);\n\t\t}\n\t\tjson = jsonArray.toJSONString();\n\t} catch (Exception e) {\n\t\tlogger.error(\"\u67e5\u8be2\u8d26\u6237\u5217\u8868\u5931\u8d25\", e);\n\t\treturn returnJson(ErpInfo.ERROR, \"\u67e5\u8be2\u8d26\u6237\u5217\u8868\u5931\u8d25\", null);\n\t}\n\treturn returnJson(ErpInfo.SUCCESS, \"\u67e5\u8be2\u8d26\u6237\u5217\u8868\u6210\u529f\", json);\n}", "CodeBleu_score": 55.09614538940721}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t\t// TODO Auto-generated method stub\n\tBaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n\tMap<String, Object> map = new HashMap<String, Object>();\n\ttry {\n\t\tif (StringUtil.isEmpty(name) && StringUtil.isEmpty(serialNo)) {\n\t\t\tbaseResponseInfo.setCode(ErpInfo.NAME_OR_SERIALNO_NOT_NULL.getCode());\n\t\t\tbaseResponseInfo.setMsg(ErpInfo.NAME_OR_SERIALNO_NOT_NULL.getMsg());\n\t\t\treturn baseResponseInfo;\n\t\t}\n\t\tmap.put(\"name\", name);\n\t\tmap.put(\"serialNo\", serialNo);\n\t\tmap.put(\"currentPage\", currentPage);\n\t\tmap.put(\"pageSize\", pageSize);\n\t\tList<AccountVo4List> list = accountService.listWithBalance(map);\n\t\tInteger count = accountService.countWithBalance(map);\n\t\tJSONObject result = new JSONObject();\n\t\tresult.put(\"list\", list);\n\t\tresult.put(\"count\", count);\n\t\tbaseResponseInfo.setResult(result);\n\t\tbaseResponseInfo.setCode(ErpInfo.SUCCESS.getCode());\n\t\tbaseResponseInfo.setMsg(ErpInfo.SUCCESS.getMsg());\n\t} catch (Exception e) {\n\t\t// TODO: handle exception\n\t\tlogger.error(\"listWithBalance error:\", e);\n\t\tbaseResponseInfo.setCode(ErpInfo.ERROR.getCode());\n\t\tbaseResponseInfo.setMsg(ErpInfo.ERROR.getMsg());\n\t}\n\treturn baseResponseInfo;\n}", "CodeBleu_score": 42.543502386528615}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t//        BaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n//        try {\n//            Map<String, Object> params = new HashMap<>();\n//            params.put(\"name\", name);\n//            params.put(\"serialNo\", serialNo);\n//            params.put(\"currentPage\", currentPage);\n//            params.put(\"pageSize\", pageSize);\n//            Map<String, Object> result = accountService.listWithBalance(params);\n//            baseResponseInfo.setCode(ErpInfo.SUCCESS.getCode());\n//            baseResponseInfo.setMessage(ErpInfo.SUCCESS.getMessage());\n//            baseResponseInfo.setData(result);\n//        } catch (Exception e) {\n//            logger.error(\"listWithBalance error:\", e);\n//            baseResponseInfo.setCode(ErpInfo.ERROR.getCode());\n//            baseResponseInfo.setMessage(ErpInfo.ERROR.getMessage());\n//        }\n//        return baseResponseInfo;\n//    }", "CodeBleu_score": 10.89778041758137}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t\ttry {\n\t\tMap<String, Object> map = new HashMap<>();\n\t\tmap.put(\"name\", name);\n\t\tmap.put(\"serialNo\", serialNo);\n\t\tmap.put(\"currentPage\", currentPage);\n\t\tmap.put(\"pageSize\", pageSize);\n\t\tList<AccountVo4List> accounts = accountService.listWithBalance(map);\n\t\tInteger count = accountService.count(map);\n\t\tMap<String, Object> result = new HashMap<>();\n\t\tresult.put(\"accounts\", accounts);\n\t\tresult.put(\"count\", count);\n\t\treturn returnJson(ErpInfo.OK, result);\n\t} catch (Exception e) {\n\t\tlogger.error(\"listWithBalance error\", e);\n\t\treturn returnJson(ErpInfo.ERROR);\n\t}\n}", "CodeBleu_score": 41.16183046478461}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tMap<String, Object> map = new HashMap<>();\n\t\tmap.put(\"name\", name);\n\t\tmap.put(\"serialNo\", serialNo);\n\t\tMap<String, Object> statistics = accountService.getStatistics(map);\n\t\tif (statistics!= null) {\n\t\t\tresponse.setCode(200);\n\t\t\tresponse.setData(statistics);\n\t\t} else {\n\t\t\tresponse.setCode(500);\n\t\t\tresponse.setMsg(\"\u83b7\u53d6\u7edf\u8ba1\u4fe1\u606f\u5931\u8d25\");\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(\"\u83b7\u53d6\u7edf\u8ba1\u4fe1\u606f\u5931\u8d25\", e);\n\t\tresponse.setCode(500);\n\t\tresponse.setMsg(\"\u83b7\u53d6\u7edf\u8ba1\u4fe1\u606f\u5931\u8d25\");\n\t}\n\treturn response;\n}", "CodeBleu_score": 43.00513420731422}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tMap<String, Object> statistics = accountService.getStatistics(name, serialNo);\n\t\tresponse.setCode(200);\n\t\tresponse.setData(statistics);\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(\"\u83b7\u53d6\u7edf\u8ba1\u4fe1\u606f\u5931\u8d25\");\n\t}\n\treturn response;\n}", "CodeBleu_score": 44.924954191713375}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tMap<String, Object> map = new HashMap<>();\n\t\tmap.put(\"name\", name);\n\t\tmap.put(\"serialNo\", serialNo);\n\t\tMap<String, Object> result = accountService.getStatistics(map);\n\t\tresponse.setCode(200);\n\t\tresponse.setData(result);\n\t} catch (Exception e) {\n\t\tlogger.error(\"\u83b7\u53d6\u7edf\u8ba1\u6570\u636e\u5f02\u5e38\", e);\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 45.58540046459323}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t//    try {\n//        AccountHeadVo4ListEx accountHeadVo4ListEx = accountHeadService.getDetailByNumber(billNo);\n//        return returnJson(200, accountHeadVo4ListEx);\n//    } catch (Exception e) {\n//        logger.error(\"\u83b7\u53d6\u5355\u636e\u8be6\u7ec6\u4fe1\u606f\u5931\u8d25\", e);\n//        return returnJson(500, \"\u83b7\u53d6\u5355\u636e\u8be6\u7ec6\u4fe1\u606f\u5931\u8d25\");\n//    }\n//\n//}", "CodeBleu_score": 5.245897578635309}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t\tBaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n\ttry {\n\t\tAccountHeadVo4ListEx accountHeadVo4ListEx = accountHeadService.getDetailByNumber(billNo);\n\t\tif (accountHeadVo4ListEx!= null) {\n\t\t\tbaseResponseInfo.setCode(BusinessConstants.SUCCESS_CODE);\n\t\t\tbaseResponseInfo.setMessage(BusinessConstants.SUCCESS_MESSAGE);\n\t\t\tbaseResponseInfo.setData(accountHeadVo4ListEx);\n\t\t} else {\n\t\t\tbaseResponseInfo.setCode(BusinessConstants.FAILED_CODE);\n\t\t\tbaseResponseInfo.setMessage(BusinessConstants.FAILED_MESSAGE);\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(\"getDetailByNumber error\", e);\n\t\tbaseResponseInfo.setCode(BusinessConstants.FAILED_CODE);\n\t\tbaseResponseInfo.setMessage(BusinessConstants.FAILED_MESSAGE);\n\t}\n\treturn baseResponseInfo;\n}", "CodeBleu_score": 31.233029559321768}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t//    try {\n//        AccountHeadVo4Body accountHeadVo4Body = accountHeadService.getDetailByNumber(billNo);\n//        return returnJson(accountHeadVo4Body, 200, null);\n//    } catch (Exception e) {\n//        logger.error(\"\u83b7\u53d6\u5355\u636e\u8be6\u7ec6\u4fe1\u606f\u5931\u8d25\", e);\n//        return returnJson(null, 500, \"\u83b7\u53d6\u5355\u636e\u8be6\u7ec6\u4fe1\u606f\u5931\u8d25\");\n//    }\n//    return null;\n}", "CodeBleu_score": 5.327221849344074}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\n\t\tUser user = (User) request.getSession().getAttribute(BusinessConstants.USER_SESSION);\n\t\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u4ed3\u5e93\u4fe1\u606f\n\t\tList<Depot> depotList = depotService.findDepotByUserId(user.getId());\n\t\tif (depotList!= null && depotList.size() > 0) {\n\t\t\tresponse.setCode(BusinessConstants.SUCCESS_CODE);\n\t\t\tresponse.setData(depotList);\n\t\t} else {\n\t\t\tresponse.setCode(BusinessConstants.SUCCESS_CODE);\n\t\t\tresponse.setData(new ArrayList<>());\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\tresponse.setCode(BusinessConstants.FAIL_CODE);\n\t\tresponse.setMsg(BusinessConstants.FAIL_MSG);\n\t}\n\treturn response;\n}", "CodeBleu_score": 36.57253998139784}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tString userCode = request.getHeader(\"userCode\");\n\t\tString token = request.getHeader(\"token\");\n\t\tString depotCode = request.getHeader(\"depotCode\");\n\t\tString depotName = request.getHeader(\"depotName\");\n\t\tString depotType = request.getHeader(\"depotType\");\n\t\tString depotStatus = request.getHeader(\"depotStatus\");\n\t\tString page = request.getHeader(\"page\");\n\t\tString rows = request.getHeader(\"rows\");\n\t\tString sort = request.getHeader(\"sort\");\n\t\tString order = request.getHeader(\"order\");\n\t\tString search = request.getHeader(\"search\");\n\t\tString searchField = request.getHeader(\"searchField\");\n\t\tString searchOper = request.getHeader(\"searchOper\");\n\t\tString searchString = request.getHeader(\"searchString\");\n\t\tString searchValue = request.getHeader(\"searchValue\");\n\t\tString searchValue2 = request.getHeader(\"searchValue2\");\n\t\tString searchValue3 = request.getHeader(\"searchValue3\");\n\t\tString searchValue4 = request.getHeader(\"searchValue4\");\n\t\tString searchValue5 = request.getHeader(\"searchValue5\");\n\t\tString searchValue6 = request.getHeader(\"searchValue6\");\n\t\tString searchValue7 = request.getHeader(\"searchValue7\");\n\t\tString searchValue8 = request.getHeader(\"searchValue8\");\n\t\tString searchValue9 = request.getHeader(\"searchValue9\");\n\t\tString searchValue10 = request.getHeader(\"searchValue10\");\n\t\tString searchValue11 = request.getHeader(\"searchValue11\");\n\t\tString searchValue12 = request.getHeader(\"searchValue12\");\n\t\tString searchValue13 = request.getHeader(\"searchValue13\");\n\t\tString searchValue14 = request.getHeader(\"searchValue14\");\n\t\tString searchValue15 = request.getHeader(\"searchValue15\");\n\t\tString searchValue16 = request.getHeader(\"searchValue16\");\n\t\tString searchValue17 = request.getHeader(\"searchValue17\");\n\t\tString searchValue18 = request.getHeader(\"searchValue18\");\n\t\tString searchValue19 = request.getHeader(\"searchValue19\");\n\t\tString searchValue20 = request.getHeader(\"searchValue20", "CodeBleu_score": 22.035316897636008}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n\ttry {\n\t\tString userId = request.getHeader(\"userId\");\n\t\tList<Depot> depotList = depotService.findDepotByUserId(userId);\n\t\tif (depotList.size() == 0) {\n\t\t\tbaseResponseInfo.setCode(BusinessConstants.RESPONSE_CODE_ERROR);\n\t\t\tbaseResponseInfo.setMessage(BusinessConstants.RESPONSE_MESSAGE_ERROR);\n\t\t} else {\n\t\t\tbaseResponseInfo.setCode(BusinessConstants.RESPONSE_CODE_SUCCESS);\n\t\t\tbaseResponseInfo.setMessage(BusinessConstants.RESPONSE_MESSAGE_SUCCESS);\n\t\t\tbaseResponseInfo.setData(depotList);\n\t\t}\n\t} catch (DataAccessException e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tbaseResponseInfo.setCode(BusinessConstants.RESPONSE_CODE_ERROR);\n\t\tbaseResponseInfo.setMessage(BusinessConstants.RESPONSE_MESSAGE_ERROR);\n\t}\n\treturn baseResponseInfo;\n}", "CodeBleu_score": 36.88672692516882}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t\tLogger logger = LoggerFactory.getLogger(this.getClass());\n\tJSONArray jsonArray = new JSONArray();\n\ttry {\n\t\tList<Function> functionList = functionService.findRoleFunction(type, keyId);\n\t\tJSONObject jsonObject = new JSONObject();\n\t\tjsonObject.put(\"functionList\", functionList);\n\t\tif (!StringUtil.isEmpty(type) &&!StringUtil.isEmpty(keyId)) {\n\t\t\tif (\"1\".equals(type)) {\n\t\t\t\tjsonObject.put(\"roleId\", keyId);\n\t\t\t} else if (\"2\".equals(type)) {\n\t\t\t\tjsonObject.put(\"groupId\", keyId);\n\t\t\t}\n\t\t}\n\t\tjsonArray.add(jsonObject);\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage());\n\t\tthrow new BusinessRunTimeException(ExceptionConstants.ERROR_CODE_0001, ExceptionConstants.ERROR_DESC_0001);\n\t}\n\treturn jsonArray;\n}", "CodeBleu_score": 30.24127137972371}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t\tJSONArray jsonArray = new JSONArray();\n\ttry {\n\t\tList<Function> functionList = functionService.findRoleFunction(type, keyId);\n\t\tJSONObject jsonObject = new JSONObject();\n\t\tjsonObject.put(\"functionList\", functionList);\n\t\tif (functionList!= null && functionList.size() > 0) {\n\t\t\tList<Function> functionList2 = new ArrayList<Function>();\n\t\t\tfor (Function function : functionList) {\n\t\t\t\tif (function.getFunctionId()!= null && function.getFunctionId().equals(\"1000\")) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tfunctionList2.add(function);\n\t\t\t}\n\t\t\tjsonObject.put(\"functionList\", functionList2);\n\t\t}\n\t\tjsonArray.add(jsonObject);\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage());\n\t\tthrow new BusinessRunTimeException(ExceptionConstants.CODE_10000000, ExceptionConstants.MSG_10000000);\n\t}\n\treturn jsonArray;\n}", "CodeBleu_score": 32.78314508700948}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t\tJSONArray jsonArray = new JSONArray();\n\ttry {\n\t\tList<Function> functionList = functionService.findRoleFunction(type, keyId);\n\t\tJSONObject jsonObject = new JSONObject();\n\t\tjsonObject.put(\"functions\", functionList);\n\t\tif (!\"admin\".equals(Tools.getAdmin(request))) {\n\t\t\tjsonObject.put(\"functions\", filterFunction(functionList, Tools.getTenantId(request)));\n\t\t}\n\t\tjsonArray.add(jsonObject);\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t}\n\treturn jsonArray;\n}", "CodeBleu_score": 28.203206800801546}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tPlatformConfig platformConfig = platformConfigService.getPlatformConfigByKey(platformKey);\n\t\tresponse.setCode(200);\n\t\tresponse.setData(platformConfig);\n\t\tresponse.setMessage(\"success\");\n\t} catch (Exception e) {\n\t\tlogger.error(\"\u83b7\u53d6\u5e73\u53f0\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\", e);\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(\"\u83b7\u53d6\u5e73\u53f0\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\");\n\t}\n\treturn response;\n}", "CodeBleu_score": 44.17169138693179}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\n//    BaseResponseInfo response = new BaseResponseInfo();\n//    try {\n//        PlatformConfig config = platformConfigService.getPlatformConfigByKey(platformKey);\n//        response.setCode(200);\n//        response.setData(config);\n//    } catch (Exception e) {\n//        logger.error(e.getMessage(), e);\n//        response.setCode(500);\n//        response.setMsg(\"\u7cfb\u7edf\u9519\u8bef\");\n//    }\n    return null;\n}", "CodeBleu_score": 7.245239364604567}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t//    BaseResponseInfo response = new BaseResponseInfo();\n//    try {\n//        PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n//        response.setCode(200);\n//        response.setData(platformConfig);\n//    } catch (Exception e) {\n//        logger.error(\"getInfoByKey error\", e);\n//        response.setCode(500);\n//        response.setMessage(\"getInfoByKey error\");\n//    }\n//    return response;\n    return null;\n}", "CodeBleu_score": 7.245239364604567}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n\ttry {\n\t\tList<SystemConfig> list = systemConfigService.list();\n\t\tif (list.size() > 0) {\n\t\t\tbaseResponseInfo.setCode(200);\n\t\t\tbaseResponseInfo.setData(list.get(0));\n\t\t} else {\n\t\t\tbaseResponseInfo.setCode(200);\n\t\t\tbaseResponseInfo.setData(null);\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage());\n\t\tbaseResponseInfo.setCode(500);\n\t\tbaseResponseInfo.setData(\"\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\u83b7\u53d6\u5931\u8d25\");\n\t}\n\treturn baseResponseInfo;\n}", "CodeBleu_score": 34.94738950799599}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tList<SystemConfig> list = systemConfigService.getSystemConfigList();\n\t\tif (list!= null && list.size() > 0) {\n\t\t\tresponse.setCode(200);\n\t\t\tresponse.setData(list.get(0));\n\t\t} else {\n\t\t\tresponse.setCode(500);\n\t\t\tresponse.setMessage(\"\u6ca1\u6709\u83b7\u53d6\u5230\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\");\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage());\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(\"\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\u83b7\u53d6\u5931\u8d25\");\n\t}\n\treturn response;\n}", "CodeBleu_score": 34.7317574075012}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n\ttry {\n\t\tList<SystemConfig> systemConfigList = systemConfigService.getSystemConfigList();\n\t\tif (systemConfigList!= null && systemConfigList.size() > 0) {\n\t\t\tbaseResponseInfo.setCode(200);\n\t\t\tbaseResponseInfo.setData(systemConfigList.get(0));\n\t\t} else {\n\t\t\tbaseResponseInfo.setCode(500);\n\t\t\tbaseResponseInfo.setMessage(\"\u83b7\u53d6\u5f53\u524d\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\uff01\");\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage());\n\t\tbaseResponseInfo.setCode(500);\n\t\tbaseResponseInfo.setMessage(\"\u83b7\u53d6\u5f53\u524d\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\uff01\");\n\t}\n\treturn baseResponseInfo;\n}", "CodeBleu_score": 31.28713774995576}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tBaseResponseInfo result = new BaseResponseInfo();\n\ttry {\n\t\tMultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n\t\tString businessPath = multipartRequest.getParameter(\"businessPath\");\n\t\tString type = multipartRequest.getParameter(\"type\");\n\t\tMultipartFile file = multipartRequest.getFile(\"file\");\n\t\tString fileName = file.getOriginalFilename();\n\t\tString fileType = fileName.substring(fileName.lastIndexOf(\".\"));\n\t\tString newFileName = StringUtil.getUUID() + fileType;\n\t\tString filePath = businessPath + \"/\" + newFileName;\n\t\tString fileUrl = \"\";\n\t\tif (\"local\".equals(type)) {\n\t\t\tString realPath = request.getSession().getServletContext().getRealPath(\"/\");\n\t\t\tString path = realPath + \"upload\" + businessPath;\n\t\t\tFile dir = new File(path);\n\t\t\tif (!dir.exists()) {\n\t\t\t\tdir.mkdirs();\n\t\t\t}\n\t\t\tfile.transferTo(new File(path + \"/\" + newFileName));\n\t\t\tfileUrl = request.getScheme() + \"://\" + request.getServerName() + \":\" + request.getServerPort() + request.getContextPath() + \"/upload\" + businessPath + \"/\" + newFileName;\n\t\t} else if (\"oss\".equals(type)) {\n\t\t\tString bucketName = \"jsh-erp\";\n\t\t\tString endpoint = \"oss-cn-shenzhen.aliyuncs.com\";\n\t\t\tString accessKeyId = \"\";\n\t\t\tString accessKeySecret = \"\";\n\t\t\tString fileUrlPrefix = \"https://jsh-erp.oss-cn-shenzhen.aliyuncs.com/\";\n\t\t\tfileUrl = FileUtils.uploadFileToOss(bucketName, endpoint, accessKeyId, accessKeySecret, fileUrlPrefix, filePath, file);\n\t\t}\n\t\tresult.setData(fileUrl);\n\t\tresult.setCode(0);\n\t\tresult.setMsg(\"\u4e0a\u4f20\u6210\u529f\");\n\t} catch (Exception e) {\n\t\tresult.setCode(1);\n\t\tresult.setMsg(\"\u4e0a\u4f20\u5931\u8d25\");\n\t\te.printStackTrace();\n\t}\n\treturn result;\n}", "CodeBleu_score": 33.260848943416455}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tString type = request.getParameter(\"type\");\n\t\tMultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n\t\tMultipartFile file = multipartRequest.getFile(\"file\");\n\t\tString fileName = file.getOriginalFilename();\n\t\tString fileSuffix = fileName.substring(fileName.lastIndexOf(\".\") + 1);\n\t\tString fileType = file.getContentType();\n\t\tString businessPath = request.getParameter(\"businessPath\");\n\t\tString businessType = request.getParameter(\"businessType\");\n\t\tString businessId = request.getParameter(\"businessId\");\n\t\tString businessName = request.getParameter(\"businessName\");\n\t\tString businessName_ = request.getParameter(\"businessName_\");\n\t\tString businessName_1 = request.getParameter(\"businessName_1\");\n\t\tString businessName_2 = request.getParameter(\"businessName_2\");\n\t\tString businessName_3 = request.getParameter(\"businessName_3\");\n\t\tString businessName_4 = request.getParameter(\"businessName_4\");\n\t\tString businessName_5 = request.getParameter(\"businessName_5\");\n\t\tString businessName_6 = request.getParameter(\"businessName_6\");\n\t\tString businessName_7 = request.getParameter(\"businessName_7\");\n\t\tString businessName_8 = request.getParameter(\"businessName_8\");\n\t\tString businessName_9 = request.getParameter(\"businessName_9\");\n\t\tString businessName_10 = request.getParameter(\"businessName_10\");\n\t\tString businessName_11 = request.getParameter(\"businessName_11\");\n\t\tString businessName_12 = request.getParameter(\"businessName_12\");\n\t\tString businessName_13 = request.getParameter(\"businessName_13\");\n\t\tString businessName_14 = request.getParameter(\"businessName_14\");\n\t\tString businessName_15 = request.getParameter(\"businessName_15\");\n\t\tString businessName_16 = request.getParameter(\"businessName_16\");\n\t\tString businessName_17 = request.getParameter(\"businessName_17\");\n\t\tString businessName_18 = request.getParameter(\"businessName_18\");\n\t\tString businessName_19 = request.getParameter(\"businessName_19\");\n\t\tString businessName_20 = request.", "CodeBleu_score": 27.097269633820677}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\t//\u83b7\u53d6\u4e1a\u52a1\u8def\u5f84\n\tString businessPath = request.getParameter(\"businessPath\");\n\t//\u83b7\u53d6\u4e0a\u4f20\u7684\u6587\u4ef6\n\tMultipartFile file = ((MultipartHttpServletRequest) request).getFile(\"file\");\n\t//\u83b7\u53d6\u6587\u4ef6\u540d\n\tString fileName = file.getOriginalFilename();\n\t//\u83b7\u53d6\u6587\u4ef6\u540e\u7f00\u540d\n\tString suffix = fileName.substring(fileName.lastIndexOf(\".\"));\n\t//\u83b7\u53d6\u6587\u4ef6\u5927\u5c0f\n\tlong fileSize = file.getSize();\n\t//\u83b7\u53d6\u6587\u4ef6\u4e0a\u4f20\u7c7b\u578b\n\tString uploadType = request.getParameter(\"uploadType\");\n\t//\u83b7\u53d6\u6587\u4ef6\u4e0a\u4f20\u8def\u5f84\n\tString uploadPath = request.getParameter(\"uploadPath\");\n\t//\u83b7\u53d6\u6587\u4ef6\u4e0a\u4f20\u8def\u5f84\n\tString uploadPathType = request.getParameter(\"uploadPathType\");\n\t//\u83b7\u53d6\u6587\u4ef6\u4e0a\u4f20\u8def\u5f84\n\tString uploadPathUrl = request.getParameter(\"uploadPathUrl\");\n\t//\u83b7\u53d6\u6587\u4ef6\u4e0a\u4f20\u8def\u5f84\n\tString uploadPathUrlType = request.getParameter(\"uploadPathUrlType\");\n\t//\u83b7\u53d6\u6587\u4ef6\u4e0a\u4f20\u8def\u5f84\n\tString uploadPathUrlName = request.getParameter(\"uploadPathUrlName\");\n\t//\u83b7\u53d6\u6587\u4ef6\u4e0a\u4f20\u8def\u5f84\n\tString uploadPathUrlSuffix = request.getParameter(\"uploadPathUrlSuffix\");\n\t//\u83b7\u53d6\u6587\u4ef6\u4e0a\u4f20\u8def\u5f84\n\tString uploadPathUrlSize = request.getParameter(\"uploadPathUrlSize\");\n\t//\u83b7\u53d6\u6587\u4ef6\u4e0a\u4f20\u8def\u5f84\n\tString uploadPathUrlTime = request.getParameter(\"uploadPathUrlTime\");\n\t//\u83b7\u53d6\u6587\u4ef6\u4e0a\u4f20\u8def\u5f84\n\tString uploadPathUrlTimeType = request.getParameter(\"uploadPathUrlTimeType\");\n\t//\u83b7\u53d6\u6587\u4ef6\u4e0a\u4f20\u8def\u5f84\n\tString uploadPathUrlTimeFormat = request.getParameter(\"uploadPathUrlTimeFormat\");\n\t//\u83b7\u53d6\u6587\u4ef6\u4e0a\u4f20\u8def\u5f84\n\tString uploadPathUrlTimeFormatType = request.getParameter(\"uploadPathUrlTimeFormatType\");\n\t//\u83b7\u53d6\u6587\u4ef6\u4e0a\u4f20\u8def\u5f84\n\tString uploadPathUrlTimeFormatSuffix = request.getParameter(\"uploadPathUrlTimeFormatSuffix\");\n\t//\u83b7\u53d6\u6587\u4ef6\u4e0a\u4f20\u8def\u5f84\n\tString uploadPathUrlTimeFormatSuffixType = request.getParameter(\"uploadPathUrlTimeFormatSuffixType\");\n\t//\u83b7\u53d6\u6587\u4ef6\u4e0a\u4f20\u8def\u5f84\n\tString uploadPathUrlTimeFormatSuffixFormat = request.getParameter(\"uploadPathUrlTimeFormatSuffixFormat\");\n\t//\u83b7\u53d6\u6587\u4ef6\u4e0a\u4f20\u8def\u5f84\n\tString uploadPathUrlTimeFormatSuffixFormatType = request.getParameter(\"uploadPathUrlTimeFormatSuffixFormatType\");\n\t//\u83b7\u53d6\u6587\u4ef6\u4e0a\u4f20\u8def\u5f84\n\tString uploadPathUrlTime", "CodeBleu_score": 22.745979348725005}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t//        String title = jsonObject.getString(\"title\");\n//        String head = jsonObject.getString(\"head\");\n//        String tip = jsonObject.getString(\"tip\");\n//        List<JSONObject> dataList = jsonObject.getJSONArray(\"dataList\");\n//        try {\n//            exportExcelService.exportExcel(title, head, tip, dataList, response);\n//        } catch (Exception e) {\n//            logger.error(\"\u5bfc\u51faExcel\u5931\u8d25\", e);\n//        }\n}", "CodeBleu_score": 4.842893009750053}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t\ttry {\n\t\tString title = jsonObject.getString(\"title\");\n\t\tString head = jsonObject.getString(\"head\");\n\t\tString tip = jsonObject.getString(\"tip\");\n\t\tList<JSONObject> data = JSONArray.parseArray(jsonObject.getString(\"data\"), JSONObject.class);\n\t\texportExcel(title, head, tip, data, response);\n\t} catch (Exception e) {\n\t\tlogger.error(\"exportExcelByParam error\", e);\n\t}\n}", "CodeBleu_score": 69.42978317923793}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t try {\n String title = jsonObject.getString(\"title\");\n String head = jsonObject.getString(\"head\");\n String tip = jsonObject.getString(\"tip\");\n List<List<String>> dataList = JSONArray.parseArray(jsonObject.getString(\"dataList\"), List.class);\n ExportExcelUtil.exportExcelByParam(title, head, tip, dataList, response);\n } catch (Exception e) {\n log.error(\"exportExcelByParam error\", e);\n }\n }", "CodeBleu_score": 70.7317855835178}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tAccount account = new Account();\n\taccount.setAccountNo(obj.getString(\"accountNo\"));\n\taccount.setAccountName(obj.getString(\"accountName\"));\n\taccount.setAccountType(obj.getString(\"accountType\"));\n\taccount.setAccountCategory(obj.getString(\"accountCategory\"));\n\taccount.setAccountStatus(obj.getString(\"accountStatus\"));\n\taccount.setAccountLevel(obj.getString(\"accountLevel\"));\n\taccount.setAccountParentId(obj.getString(\"accountParentId\"));\n\taccount.setAccountParentName(obj.getString(\"accountParentName\"));\n\taccount.setAccountRemark(obj.getString(\"accountRemark\"));\n\taccount.setAccountCreateTime(new Date());\n\taccount.setAccountCreateBy(obj.getString(\"accountCreateBy\"));\n\taccount.setAccountUpdateTime(new Date());\n\taccount.setAccountUpdateBy(obj.getString(\"accountUpdateBy\"));\n\taccount.setAccountIsDel(\"0\");\n\taccount.setAccountIsDefault(\"0\");\n\taccount.setAccountBalance(new BigDecimal(0));\n\taccount.setAccountCredit(new BigDecimal(0));\n\taccount.setAccountDebit(new BigDecimal(0));\n\taccount.setAccountCurrency(obj.getString(\"accountCurrency\"));\n\taccount.setAccountCurrencyRate(new BigDecimal(1));\n\taccount.setAccountCurrencyRateTime(new Date());\n\taccount.setAccountCurrencyRateBy(obj.getString(\"accountCreateBy\"));\n\taccount.setAccountIsDefault(\"0\");\n\taccount.setAccountIsDefault(\"0\");\n\taccount.setAccountIsDefault(\"0\");\n\taccount.setAccountIsDefault(\"0\");\n\taccount.setAccountIsDefault(\"0\");\n\taccount.setAccountIsDefault(\"0\");\n\taccount.setAccountIsDefault(\"0\");\n\taccount.setAccountIsDefault(\"0\");\n\taccount.setAccountIsDefault(\"0\");\n\taccount.setAccountIsDefault(\"0\");\n\taccount.setAccountIsDefault(\"0\");\n\taccount.setAccountIsDefault(\"0\");\n\taccount.setAccountIsDefault(\"0\");\n\taccount.setAccountIsDefault(\"0\");\n\taccount.setAccountIsDefault(\"0\");\n\taccount.setAccountIsDefault(\"0\");\n\taccount.setAccountIsDefault(\"0\");\n\taccount", "CodeBleu_score": 14.656471348830735}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tint result = 0;\n\ttry {\n\t\t//\u83b7\u53d6\u7528\u6237id\n\t\tString userId = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest().getSession().getAttribute(\"userId\").toString();\n\t\t//\u83b7\u53d6\u7528\u6237\u540d\u79f0\n\t\tString userName = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest().getSession().getAttribute(\"userName\").toString();\n\t\t//\u83b7\u53d6\u7528\u6237\u6240\u5c5e\u516c\u53f8id\n\t\tString companyId = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest().getSession().getAttribute(\"companyId\").toString();\n\t\t//\u83b7\u53d6\u7528\u6237\u6240\u5c5e\u516c\u53f8\u540d\u79f0\n\t\tString companyName = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest().getSession().getAttribute(\"companyName\").toString();\n\t\t//\u83b7\u53d6\u7528\u6237\u6240\u5c5e\u90e8\u95e8id\n\t\tString departmentId = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest().getSession().getAttribute(\"departmentId\").toString();\n\t\t//\u83b7\u53d6\u7528\u6237\u6240\u5c5e\u90e8\u95e8\u540d\u79f0\n\t\tString departmentName = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest().getSession().getAttribute(\"departmentName\").toString();\n\t\t//\u83b7\u53d6\u7528\u6237\u6240\u5c5e\u516c\u53f8id\n\t\tString roleId = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest().getSession().getAttribute(\"roleId\").toString();\n\t\t//\u83b7\u53d6\u7528\u6237\u6240\u5c5e\u516c\u53f8\u540d\u79f0\n\t\tString roleName = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest().getSession().getAttribute(\"roleName\").toString();\n\t\t//\u83b7\u53d6\u7528\u6237\u6240\u5c5e\u516c\u53f8id\n\t\tString roleType = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest().getSession().getAttribute(\"roleType\").toString();\n\t\t//\u83b7\u53d6\u7528\u6237\u6240\u5c5e\u516c\u53f8\u540d\u79f0\n\t\tString roleTypeName = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest().getSession().getAttribute(\"roleTypeName\").toString();\n\t\t//\u83b7\u53d6\u7528\u6237\u6240\u5c5e\u516c\u53f8id\n\t\tString userType = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest().getSession().getAttribute(\"userType\").toString();\n\t\t//\u83b7\u53d6\u7528\u6237\u6240\u5c5e\u516c\u53f8\u540d\u79f0\n\t\tString userTypeName = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest().getSession().getAttribute(\"userTypeName\").toString();\n\t\t//\u83b7\u53d6\u7528\u6237\u6240\u5c5e\u516c\u53f8id\n\t\tString userTypeName = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest().getSession().getAttribute(\"userTypeName\").toString();\n\t\t//\u83b7\u53d6\u7528\u6237\u6240\u5c5e\u516c\u53f8\u540d\u79f0\n\t\tString userTypeName = ((Servlet", "CodeBleu_score": 25.26473745203466}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tAccount account = new Account();\n\taccount.setAccount(obj.getString(\"account\"));\n\taccount.setAccountName(obj.getString(\"accountName\"));\n\taccount.setAccountType(obj.getString(\"accountType\"));\n\taccount.setAccountLevel(obj.getString(\"accountLevel\"));\n\taccount.setAccountParentId(obj.getString(\"accountParentId\"));\n\taccount.setAccountParentName(obj.getString(\"accountParentName\"));\n\taccount.setAccountParentIds(obj.getString(\"accountParentIds\"));\n\taccount.setAccountParentNames(obj.getString(\"accountParentNames\"));\n\taccount.setAccountRemark(obj.getString(\"accountRemark\"));\n\taccount.setAccountStatus(obj.getString(\"accountStatus\"));\n\taccount.setAccountSort(obj.getString(\"accountSort\"));\n\taccount.setAccountDirection(obj.getString(\"accountDirection\"));\n\taccount.setAccountDirectionName(obj.getString(\"accountDirectionName\"));\n\taccount.setAccountBalance(obj.getString(\"accountBalance\"));\n\taccount.setAccountBalanceName(obj.getString(\"accountBalanceName\"));\n\taccount.setAccountCurrency(obj.getString(\"accountCurrency\"));\n\taccount.setAccountCurrencyName(obj.getString(\"accountCurrencyName\"));\n\taccount.setAccountInitAmount(obj.getString(\"accountInitAmount\"));\n\taccount.setAccountInitAmountName(obj.getString(\"accountInitAmountName\"));\n\taccount.setAccountInitDate(obj.getString(\"accountInitDate\"));\n\taccount.setAccountInitDateName(obj.getString(\"accountInitDateName\"));\n\taccount.setAccountInitBalance(obj.getString(\"accountInitBalance\"));\n\taccount.setAccountInitBalanceName(obj.getString(\"accountInitBalanceName\"));\n\taccount.setAccountInitBalanceDirection(obj.getString(\"accountInitBalanceDirection\"));\n\taccount.setAccountInitBalanceDirectionName(obj.getString(\"accountInitBalanceDirectionName\"));\n\taccount.setAccountInitBalanceCurrency(obj.getString(\"accountInitBalanceCurrency\"));\n\taccount.setAccountInitBalanceCurrencyName(obj.getString(\"accountInitBalanceCurrencyName\"));\n\taccount.setAccountInitBalanceAmount(obj.getString(\"accountInitBalanceAmount\"));\n\taccount.setAccountInitBalanceAmountName(obj.getString(\"accountInitBalanceAmountName\"));\n\taccount.setAccountInitBalanceDate(obj", "CodeBleu_score": 12.9296898149747}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\ttry {\n\t\treturn accountMapper.listWithBalanceCount(name, serialNo);\n\t} catch (Exception e) {\n\t\tlogger.error(\"listWithBalanceCount\", e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 26.09909058810902}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\ttry {\n\t\treturn accountMapper.listWithBalanceCount(name, serialNo);\n\t} catch (Exception e) {\n\t\tlogger.error(\"\u67e5\u8be2\u8d26\u6237\u5217\u8868\u6570\u91cf\u51fa\u9519\", e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 25.501814549296075}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\ttry {\n\t\treturn accountMapper.listWithBalanceCount(name, serialNo);\n\t} catch (Exception e) {\n\t\tlogger.error(\"listWithBalanceCount error:\", e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 26.28691686196239}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result = 0;\n\ttry {\n\t\tresult = depotItemMapper.deleteByPrimaryKey(id);\n\t} catch (Exception e) {\n\t\tlog.error(\"deleteDepotItem error\", e);\n\t\tthrow new BusinessRunTimeException(ExceptionConstants.ERROR_CODE_10000, ExceptionConstants.ERROR_MSG_10000);\n\t}\n\treturn result;\n}", "CodeBleu_score": 53.22819579977991}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result = 0;\n\ttry {\n\t\t// delete by id\n\t\tresult = depotItemMapper.deleteByPrimaryKey(id);\n\t\t// delete by depot id\n\t\tresult = depotItemMapper.deleteByDepotId(id);\n\t\t// delete by depot head id\n\t\tresult = depotItemMapper.deleteByDepotHeadId(id);\n\t\t// delete by depot head id\n\t\tresult = depotItemMapper.deleteByDepotHeadId(id);\n\t\t// delete by depot head id\n\t\tresult = depotItemMapper.deleteByDepotHeadId(id);\n\t\t// delete by depot head id\n\t\tresult = depotItemMapper.deleteByDepotHeadId(id);\n\t\t// delete by depot head id\n\t\tresult = depotItemMapper.deleteByDepotHeadId(id);\n\t\t// delete by depot head id\n\t\tresult = depotItemMapper.deleteByDepotHeadId(id);\n\t\t// delete by depot head id\n\t\tresult = depotItemMapper.deleteByDepotHeadId(id);\n\t\t// delete by depot head id\n\t\tresult = depotItemMapper.deleteByDepotHeadId(id);\n\t\t// delete by depot head id\n\t\tresult = depotItemMapper.deleteByDepotHeadId(id);\n\t\t// delete by depot head id\n\t\tresult = depotItemMapper.deleteByDepotHeadId(id);\n\t\t// delete by depot head id\n\t\tresult = depotItemMapper.deleteByDepotHeadId(id);\n\t\t// delete by depot head id\n\t\tresult = depotItemMapper.deleteByDepotHeadId(id);\n\t\t// delete by depot head id\n\t\tresult = depotItemMapper.deleteByDepotHeadId(id);\n\t\t// delete by depot head id\n\t\tresult = depotItemMapper.deleteByDepotHeadId(id);\n\t\t// delete by depot head id\n\t\tresult = depotItemMapper.deleteByDepotHeadId(id);\n\t\t// delete by depot head id\n\t\tresult = depotItemMapper.deleteByDepotHeadId(id);\n\t\t// delete by depot head id\n\t\tresult = depotItemMapper.deleteByDepotHead", "CodeBleu_score": 36.40273078407463}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result = 0;\n\ttry {\n\t\tresult = depotItemMapper.deleteByPrimaryKey(id);\n\t\tif (result > 0) {\n\t\t\tlogService.insertLog(request, \"\u5220\u9664\u4e86ID\u4e3a\" + id + \"\u7684\u5e93\u5b58\u660e\u7ec6\");\n\t\t}\n\t} catch (Exception e) {\n\t\tlog.error(\"\u5220\u9664\u5e93\u5b58\u660e\u7ec6\u5931\u8d25\", e);\n\t\tthrow new BusinessRunTimeException(ExceptionConstants.DELETE_DEPOT_ITEM_ERROR);\n\t}\n\treturn result;\n}", "CodeBleu_score": 54.43037826582193}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\tString url = \"http://localhost:7474/db/data/transaction/commit\";\n\tHttpPost request = new HttpPost(url);\n\trequest.setHeader(\"Content-Type\", \"application/json\");\n\trequest.setHeader(\"Accept\", \"application/json\");\n\tString json = \"{\\\"statements\\\":[{\\\"statement\\\":\\\"MATCH (n:\" + nodeType + \") WHERE n.key = '\" + nodeKey + \"' RETURN n\\\"}]}\";\n\tStringEntity params = new StringEntity(json);\n\trequest.setEntity(params);\n\tCloseableHttpResponse response = null;\n\ttry {\n\t\tresponse = httpClient.execute(request);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString responseString = EntityUtils.toString(entity, Charset.defaultCharset());\n\t\tObjectMapper mapper = new ObjectMapper();\n\t\tMap<String, Object> map = mapper.readValue(responseString, Map.class);\n\t\tList<Map<String, Object>> results = (List<Map<String, Object>>) map.get(\"results\");\n\t\tMap<String, Object> result = results.get(0);\n\t\tList<Map<String, Object>> data = (List<Map<String, Object>>) result.get(\"data\");\n\t\tif (data.size() > 0) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\tif (response!= null) {\n\t\t\ttry {\n\t\t\t\tresponse.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\ttry {\n\t\t\thttpClient.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "CodeBleu_score": 48.22226574371488}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\t// Create an HTTP client\n\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\ttry {\n\t\t// Construct the request URL\n\t\tString url = \"http://localhost:7474/db/data/node\";\n\t\tif (!StringUtils.isEmpty(projectName)) {\n\t\t\turl += \"/\" + projectName;\n\t\t}\n\t\tif (!StringUtils.isEmpty(nodeType)) {\n\t\t\turl += \"/\" + nodeType;\n\t\t}\n\t\tif (!StringUtils.isEmpty(nodeKey)) {\n\t\t\turl += \"/\" + nodeKey;\n\t\t}\n\n\t\t// Execute the request\n\t\tHttpGet request = new HttpGet(url);\n\t\tCloseableHttpResponse response = httpClient.execute(request);\n\n\t\t// Process the response\n\t\tif (response.getStatusLine().getStatusCode() == 200) {\n\t\t\tString responseBody = EntityUtils.toString(response.getEntity());\n\t\t\tif (!StringUtils.isEmpty(responseBody) && responseBody.contains(nodeKey)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\t// Close resources\n\t\ttry {\n\t\t\thttpClient.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 39.36745372474932}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\ttry {\n\t\t// Create an HTTP client\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\n\t\t// Construct the request URL\n\t\tString requestUrl = \"http://localhost:7474/db/data/transaction/commit\";\n\n\t\t// Create a GET request\n\t\tHttpGet request = new HttpGet(requestUrl);\n\n\t\t// Execute the request and process the response\n\t\tCloseableHttpResponse response = httpClient.execute(request);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString responseString = EntityUtils.toString(entity, Charset.forName(\"UTF-8\"));\n\t\tSystem.out.println(responseString);\n\n\t\t// Close the response and the HTTP client\n\t\tEntityUtils.consume(entity);\n\t\tresponse.close();\n\t\thttpClient.close();\n\n\t\t// Return true if the response contains a key\n\t\treturn responseString.contains(nodeKey);\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 36.65143212258811}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\tString url = \"http://localhost:8080/api/projects/\" + projectName + \"/edges/\" + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to;\n\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\tHttpGet httpGet = new HttpGet(url);\n\ttry {\n\t\tCloseableHttpResponse response = httpClient.execute(httpGet);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString responseString = EntityUtils.toString(entity, Charset.forName(\"UTF-8\"));\n\t\tif (responseString.contains(\"key\")) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\ttry {\n\t\t\thttpClient.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "CodeBleu_score": 48.15590420682113}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\t// Create a CloseableHttpClient instance to make the request\n\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\n\t// Create a HttpGet instance with the specified endpoint URL\n\tHttpGet request = new HttpGet(\"http://localhost:7474/db/data/transaction/commit\");\n\n\t// Add parameters to the request\n\tList<NameValuePair> params = new ArrayList<>();\n\tparams.add(new BasicNameValuePair(\"statements\", \"[{\\\"statement\\\":\\\"MATCH (n:\" + fromType + \"),(m:\" + toType + \") WHERE n.id='\" + from + \"' AND m.id='\" + to + \"' CREATE (n)-[r:\" + edgeType + \"]->(m) RETURN r\\\"}]\"));\n\n\t// Set the parameters in the request\n\ttry {\n\t\trequest.setEntity(new UrlEncodedFormEntity(params, \"UTF-8\"));\n\t} catch (UnsupportedEncodingException e) {\n\t\te.printStackTrace();\n\t}\n\n\t// Execute the request and get the response\n\tCloseableHttpResponse response = null;\n\ttry {\n\t\tresponse = httpClient.execute(request);\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n\n\t// Check the response status code and handle exceptions\n\tif (response == null || response.getStatusLine().getStatusCode()!= 200) {\n\t\t// Handle the error\n\t\tthrow new RuntimeException(\"Error executing request\");\n\t}\n\n\t// Process the response\n\ttry {\n\t\tHttpEntity entity = response.getEntity();\n\t\tString responseString = EntityUtils.toString(entity, \"UTF-8\");\n\n\t\t// Parse the JSON response and check for the \"key\" field\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\t\tMap<String, Object> responseMap = objectMapper.readValue(responseString, Map.class);\n\t\tList<Map<String, Object>> results = (List<Map<String, Object>>) responseMap.get(\"results\");\n\t\tif (results!= null &&!results.isEmpty()) {\n\t\t\tMap<String, Object> result = results.get(0);\n\t\t\tList<Map<String, Object>> data = (List<Map<String, Object>>) result.get(\"data\");\n\t\t\tif (data!= null &&!data.isEmpty()) {\n\t\t\t\tMap<String, Object> row = data.get(0);\n\t\t\t\tList<Map<", "CodeBleu_score": 42.61797762810424}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\tCloseableHttpClient httpclient = HttpClients.createDefault();\n\ttry {\n\t\t// Create the request\n\t\tString url = \"http://localhost:7474/db/data/transaction/commit\";\n\t\tHttpPost httpPost = new HttpPost(url);\n\t\t// Add the parameters to the request\n\t\tString json = \"{\\\"statements\\\" : [{\\\"statement\\\" : \\\"MATCH (n:\" + fromType + \"),(m:\" + toType + \") WHERE n.id = '\" + from + \"' AND m.id = '\" + to + \"' CREATE (n)-[r:\" + edgeType + \"]->(m) RETURN r\\\"}]}\";\n\t\tStringEntity entity = new StringEntity(json, Charset.forName(\"UTF-8\"));\n\t\thttpPost.setEntity(entity);\n\t\thttpPost.setHeader(\"Content-type\", \"application/json\");\n\t\t// Execute the request and process the response\n\t\tCloseableHttpResponse response = httpclient.execute(httpPost);\n\t\ttry {\n\t\t\tHttpEntity responseEntity = response.getEntity();\n\t\t\tif (responseEntity!= null) {\n\t\t\t\tString responseString = EntityUtils.toString(responseEntity);\n\t\t\t\tif (responseString.contains(\"key\")) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tresponse.close();\n\t\t}\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\ttry {\n\t\t\thttpclient.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 41.93445964322805}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\t\tif (event == null || event.getMessage() == null) {\n\t\treturn;\n\t}\n\tif (event.getLocation() == null) {\n\t\tLocation location = new Location();\n\t\tlocation.setLatitude(30.2672);\n\t\tlocation.setLongitude(-97.7431);\n\t\tevent.setLocation(location);\n\t}\n\tevent.setEventTime(new Date());\n\tObjectMapper mapper = new ObjectMapper();\n\tString jsonString = null;\n\ttry {\n\t\tjsonString = mapper.writeValueAsString(event);\n\t} catch (JsonProcessingException e) {\n\t\te.printStackTrace();\n\t}\n\tif (jsonString == null) {\n\t\treturn;\n\t}\n\tString target = event.getTarget();\n\tif (target == null) {\n\t\ttarget = \"test\";\n\t}\n\tProducerRecord<String, String> record = new ProducerRecord<>(target, jsonString);\n\tproducer.send(record);\n\tproducer.flush();\n}", "CodeBleu_score": 57.7216888449939}, {"code": "public void sendEvent(Event event){\n\t\tif (event!= null && event.getMessage()!= null) {\n\t\tif (event.getLocation() == null) {\n\t\t\tevent.setLocation(new Location(100, 100));\n\t\t}\n\t\tevent.setTime(new Date().getTime());\n\t\tString json = null;\n\t\ttry {\n\t\t\tjson = new ObjectMapper().writeValueAsString(event);\n\t\t} catch (JsonProcessingException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tif (json!= null) {\n\t\t\tString topic = event.getTarget();\n\t\t\tif (topic == null) {\n\t\t\t\ttopic = \"test\";\n\t\t\t}\n\t\t\tProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, json);\n\t\t\tproducer.send(record);\n\t\t\tproducer.flush();\n\t\t}\n\t}\n}", "CodeBleu_score": 47.34898871264777}, {"code": "public void sendEvent(Event event){\n\t\tif (event == null) {\n\t\treturn;\n\t}\n\tif (event.getMessage() == null) {\n\t\treturn;\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(new Location(\"127.0.0.1\", 8080));\n\t}\n\tevent.setTime(new Date());\n\tObjectMapper mapper = new ObjectMapper();\n\tString json = null;\n\ttry {\n\t\tjson = mapper.writeValueAsString(event);\n\t} catch (JsonProcessingException e) {\n\t\te.printStackTrace();\n\t\treturn;\n\t}\n\tString topic = event.getTarget();\n\tif (topic == null) {\n\t\ttopic = \"test\";\n\t}\n\tProducerRecord<String, String> record = new ProducerRecord<>(topic, json);\n\tproducer.send(record);\n\tproducer.flush();\n}", "CodeBleu_score": 56.347326458857374}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t\t// Initialize the OSS client with access credentials.\n\tOSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\n\t// Upload the file content as an object with the specified name.\n\tossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\n\t// Shut down the OSS client.\n\tossClient.shutdown();\n\n\t// Return the URL of the uploaded object.\n\treturn \"https://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}", "CodeBleu_score": 31.405686986274034}, {"code": "public String upload(String objName, byte[] content){\n\t\t// Initialize the OSS client with access credentials.\n\tOSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\n\t// Upload the file content as an object with the specified name.\n\tossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\n\t// Shut down the OSS client.\n\tossClient.shutdown();\n\n\t// Return the URL of the uploaded object.\n\treturn \"https://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}", "CodeBleu_score": 31.405686986274034}, {"code": "public String upload(String objName, byte[] content){\n\t\t// Initialize the OSS client with access credentials.\n\tOSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\t// Upload the file content as an object with the specified name.\n\tossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\t// Shut down the OSS client.\n\tossClient.shutdown();\n\t// Return the URL of the uploaded object.\n\treturn \"https://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}", "CodeBleu_score": 31.405686986274034}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\tif (ipToLocationWorker == null) {\n\t\tipToLocationWorker = new IpToLocationWorker();\n\t}\n\tif (ipToLocationWorker.isUnavailable()) {\n\t\treturn new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\");\n\t}\n\treturn ipToLocationWorker.getLocationInfo(ipAddress);\n}", "CodeBleu_score": 22.171903281835053}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\tif (ipAddress == null || ipAddress.length() == 0) {\n\t\treturn new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\");\n\t}\n\n\tif (!ipAddress.matches(\"\\\\d+\\\\.\\\\d+\\\\.\\\\d+\\\\.\\\\d+\")) {\n\t\treturn new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\");\n\t}\n\n\tif (ipAddress.equals(\"127.0.0.1\")) {\n\t\treturn new LocationInfo(\"localhost\", \"localhost\", \"localhost\", \"localhost\");\n\t}\n\n\tString path = System.getProperty(\"user.dir\") + File.separator + \"qqwry.dat\";\n\tQQWry qqwry = new QQWry(path);\n\tIPZone zone = qqwry.getIPZone(ipAddress);\n\tString country = zone.getCountry();\n\tString area = zone.getArea();\n\tif (area.equals(\"CZ88.NET\")) {\n\t\tarea = \"\";\n\t}\n\treturn new LocationInfo(country, area, \"unknown\", \"unknown\");\n}", "CodeBleu_score": 30.62572306571154}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\tIpToLocationWorker worker = IpToLocationWorker.getInstance();\n\tif (worker == null) {\n\t\treturn new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\");\n\t}\n\treturn worker.getLocationInfo(ipAddress);\n}", "CodeBleu_score": 23.485228400776997}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (this.lowLevelClient == null && this.highLevelClient == null) {\n\t\tsynchronized (this) {\n\t\t\tif (this.lowLevelClient == null && this.highLevelClient == null) {\n\t\t\t\t// Parse the cluster hosts and ports\n\t\t\t\tString[] hosts = this.esCluster.split(\",\");\n\t\t\t\tList<HttpHost> httpHosts = new ArrayList<>();\n\t\t\t\tfor (String host : hosts) {\n\t\t\t\t\tString[] hostPort = host.split(\":\");\n\t\t\t\t\thttpHosts.add(new HttpHost(hostPort[0], Integer.parseInt(hostPort[1]), \"http\"));\n\t\t\t\t}\n\n\t\t\t\t// Build the low-level REST client\n\t\t\t\tthis.lowLevelClient = RestClient.builder(httpHosts.toArray(new HttpHost[httpHosts.size()])).build();\n\n\t\t\t\t// Build the high-level REST client\n\t\t\t\tthis.highLevelClient = new RestHighLevelClient(this.lowLevelClient);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 35.430766426815744}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (this.restClient == null || this.restHighLevelClient == null) {\n\t\tsynchronized (this) {\n\t\t\tif (this.restClient == null || this.restHighLevelClient == null) {\n\t\t\t\tList<HttpHost> httpHosts = new ArrayList<>();\n\t\t\t\tfor (String hostPort : this.elasticsearchClusterHostsPorts.split(\",\")) {\n\t\t\t\t\tString[] hostPortSplit = hostPort.split(\":\");\n\t\t\t\t\tString host = hostPortSplit[0];\n\t\t\t\t\tint port = Integer.parseInt(hostPortSplit[1]);\n\t\t\t\t\thttpHosts.add(new HttpHost(host, port, \"http\"));\n\t\t\t\t}\n\t\t\t\tthis.restClient = RestClient.builder(httpHosts.toArray(new HttpHost[0])).build();\n\t\t\t\tthis.restHighLevelClient = new RestHighLevelClient(this.restClient);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 37.47891155166141}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (esClient == null) {\n\t\tsynchronized (this) {\n\t\t\tif (esClient == null) {\n\t\t\t\tString hosts = System.getProperty(\"es.hosts\");\n\t\t\t\tString[] hostsArray = hosts.split(\",\");\n\t\t\t\tList<HttpHost> esHosts = new ArrayList<>();\n\t\t\t\tfor (String host : hostsArray) {\n\t\t\t\t\tString[] hostParts = host.split(\":\");\n\t\t\t\t\tesHosts.add(new HttpHost(hostParts[0], Integer.parseInt(hostParts[1]), \"http\"));\n\t\t\t\t}\n\t\t\t\tesClient = RestClient.builder(esHosts.toArray(new HttpHost[0])).build();\n\t\t\t\tesClientHighLevel = new RestHighLevelClient(esClient);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 42.39434816741441}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<>();\n\tString[] hostList = clusterHostList.split(\",\");\n\tfor (String host : hostList) {\n\t\tString[] hostParts = host.split(\":\");\n\t\tif (hostParts.length == 1) {\n\t\t\thosts.add(new HttpHost(hostParts[0], clusterPort));\n\t\t} else {\n\t\t\thosts.add(new HttpHost(hostParts[0], Integer.parseInt(hostParts[1])));\n\t\t}\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 46.71174058508248}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<>();\n\tString[] hostList = clusterHostList.split(\",\");\n\tfor (String host : hostList) {\n\t\tString[] hostParts = host.split(\":\");\n\t\tif (hostParts.length == 1) {\n\t\t\thosts.add(new HttpHost(hostParts[0], clusterPort));\n\t\t} else {\n\t\t\thosts.add(new HttpHost(hostParts[0], Integer.parseInt(hostParts[1])));\n\t\t}\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 46.71174058508248}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<>();\n\tString[] hostList = clusterHostList.split(\",\");\n\tfor (String host : hostList) {\n\t\thosts.add(new HttpHost(host, clusterPort));\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 31.295932157293393}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\t\t// Initialize the queue\n\tLinkedBlockingQueue<Task> queue = new LinkedBlockingQueue<>();\n\n\t// Create a thread pool with 5 threads\n\tExecutorService executor = Executors.newFixedThreadPool(5);\n\n\t// Create 5 threads to process tasks\n\tfor (int i = 0; i < 5; i++) {\n\t\texecutor.execute(() -> {\n\t\t\twhile (true) {\n\t\t\t\ttry {\n\t\t\t\t\tTask task = queue.poll(30, TimeUnit.SECONDS);\n\t\t\t\t\tif (task!= null) {\n\t\t\t\t\t\t// Process the task\n\t\t\t\t\t\tprocessTask(task);\n\t\t\t\t\t}\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t// Interrupted, exit the loop\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t// Wait for all threads to finish\n\texecutor.shutdown();\n\texecutor.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);\n}", "CodeBleu_score": 17.64470769412327}, {"code": "protected void pollingWork() throws InterruptedException{\n\t\tfinal AtomicBoolean isRunning = new AtomicBoolean(true);\n\tfinal LinkedBlockingQueue<Task> queue = new LinkedBlockingQueue<>();\n\n\t// Create a thread to poll for tasks\n\tThread pollThread = new Thread(() -> {\n\t\twhile (isRunning.get()) {\n\t\t\ttry {\n\t\t\t\tTask task = queue.poll(30, TimeUnit.SECONDS);\n\t\t\t\tif (task!= null) {\n\t\t\t\t\tif (task.getType() == TaskType.PLAIN_TEXT_MESSAGE) {\n\t\t\t\t\t\tString recipientNumber = task.getRecipientNumber();\n\t\t\t\t\t\tString messageData = task.getMessageData();\n\n\t\t\t\t\t\t// Validate the recipient number and message data\n\t\t\t\t\t\tif (isValidRecipientNumber(recipientNumber) && isValidMessageData(messageData)) {\n\t\t\t\t\t\t\t// Send the message\n\t\t\t\t\t\t\tsendPlainTextMessage(recipientNumber, messageData);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Log an error message\n\t\t\t\t\t\t\tlog.error(\"Invalid recipient number or message data: recipientNumber={}, messageData={}\", recipientNumber, messageData);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\tlog.error(\"Interrupted while polling for tasks\", e);\n\t\t\t\tisRunning.set(false);\n\t\t\t}\n\t\t}\n\t});\n\tpollThread.start();\n\n\t// Main loop\n\twhile (isRunning.get()) {\n\t\t// Do other work here\n\t\t//...\n\n\t\t// Add a task to the queue\n\t\tqueue.add(new Task(TaskType.PLAIN_TEXT_MESSAGE, \"1234567890\", \"Hello World!\"));\n\n\t\t// Check if the application should stop\n\t\tif (shouldStop()) {\n\t\t\tisRunning.set(false);\n\t\t\tpollThread.interrupt();\n\t\t}\n\t}\n}", "CodeBleu_score": 26.404516400039054}, {"code": "protected void pollingWork() throws InterruptedException{\n\t\tLinkedBlockingQueue<Task> queue = new LinkedBlockingQueue<Task>();\n\twhile (true) {\n\t\tTask task = queue.poll(30, TimeUnit.SECONDS);\n\t\tif (task == null) {\n\t\t\tcontinue;\n\t\t}\n\t\tString taskType = task.getTaskType();\n\t\tif (\"send-text-message\".equals(taskType)) {\n\t\t\ttry {\n\t\t\t\tMap<String, String> taskData = task.getTaskData();\n\t\t\t\tString phoneNumber = taskData.get(\"phoneNumber\");\n\t\t\t\tString messageData = taskData.get(\"messageData\");\n\t\t\t\tif (StringUtils.isBlank(phoneNumber) || StringUtils.isBlank(messageData)) {\n\t\t\t\t\tlog.error(\"Invalid task data: phoneNumber={}, messageData={}\", phoneNumber, messageData);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tsendMessage(phoneNumber, messageData);\n\t\t\t} catch (Exception e) {\n\t\t\t\tlog.error(\"Error sending text message\", e);\n\t\t\t}\n\t\t} else {\n\t\t\tlog.error(\"Unknown task type: {}\", taskType);\n\t\t}\n\t}\n}", "CodeBleu_score": 32.59362889033097}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\tHttpGet httpGet = new HttpGet(uri);\n\tCloseableHttpResponse response = httpClient.execute(httpGet);\n\tHttpEntity entity = response.getEntity();\n\tString content = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n\tlogger.info(\"httpGetRequestXml content: \" + content);\n\treturn content;\n}", "CodeBleu_score": 67.23983214409583}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\tHttpGet request = new HttpGet(uri);\n\tCloseableHttpResponse response = httpClient.execute(request);\n\tHttpEntity entity = response.getEntity();\n\tString content = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n\tlog.info(\"Response content: {}\", content);\n\treturn content;\n}", "CodeBleu_score": 65.04364649601503}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\tHttpGet httpGet = new HttpGet(uri);\n\tCloseableHttpResponse response = httpClient.execute(httpGet);\n\tHttpEntity entity = response.getEntity();\n\tString content = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n\tlogger.info(\"HTTP GET request to {} returned: {}\", uri, content);\n\treturn content;\n}", "CodeBleu_score": 64.83147508299868}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tMap<String, Object> map = new HashMap<>();\n\tif (StringUtils.isBlank(messageXmlStr)) {\n\t\treturn map;\n\t}\n\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument doc = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n\tNodeList nodes = doc.getChildNodes();\n\tif (nodes.getLength() > 0) {\n\t\tNode node = nodes.item(0);\n\t\tif (node!= null) {\n\t\t\tString name = node.getNodeName();\n\t\t\tObject value = decodeNode(node, doTrim);\n\t\t\tmap.put(name, value);\n\t\t}\n\t}\n\treturn map;\n}", "CodeBleu_score": 57.789767615564}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tif (StringUtils.isBlank(messageXmlStr)) {\n\t\treturn null;\n\t}\n\tDocumentBuilder documentBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\tDocument document = documentBuilder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n\tMap<String, Object> map = new HashMap<>();\n\tfor (Node node = document.getFirstChild(); node!= null; node = node.getNextSibling()) {\n\t\tdecodeNode(node, map, doTrim);\n\t}\n\treturn map;\n}", "CodeBleu_score": 46.05673351241536}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tif (StringUtils.isBlank(messageXmlStr)) {\n\t\treturn null;\n\t}\n\tMap<String, Object> map = new HashMap<>();\n\ttry {\n\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\t\tDocumentBuilder builder = factory.newDocumentBuilder();\n\t\tDocument doc = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n\t\tNodeList rootNodes = doc.getChildNodes();\n\t\tif (rootNodes!= null && rootNodes.getLength() > 0) {\n\t\t\tNode rootNode = rootNodes.item(0);\n\t\t\tif (rootNode!= null) {\n\t\t\t\tString rootNodeName = rootNode.getNodeName();\n\t\t\t\tif (StringUtils.isNotBlank(rootNodeName)) {\n\t\t\t\t\tObject rootNodeValue = decodeNode(rootNode, doTrim);\n\t\t\t\t\tif (rootNodeValue instanceof List) {\n\t\t\t\t\t\tmap.put(rootNodeName, rootNodeValue);\n\t\t\t\t\t} else if (rootNodeValue instanceof Map) {\n\t\t\t\t\t\tmap.putAll((Map<String, Object>) rootNodeValue);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\tthrow new Exception(\"Failed to decode XML to Map\", e);\n\t}\n\treturn map;\n}", "CodeBleu_score": 53.716416568768224}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tfinal Logger logger = LogManager.getLogger(this);\n\tfinal ISysConfigBL sysConfig = Services.getSysConfigBL();\n\tfinal ITrxManager trxManager = Services.getTrxManager();\n\tfinal boolean autoProcess = sysConfig.isAutoProcess();\n\tfinal boolean postponeScheduleCreation = sysConfig.isPostponeScheduleCreation();\n\tfinal boolean autoProcessOrder = orderRecord.isAutoProcess();\n\tfinal boolean isScheduled = orderRecord.isScheduled();\n\tfinal boolean isAutoProcessEligible = autoProcess && autoProcessOrder &&!isScheduled;\n\tfinal boolean isPostponeScheduleCreationEligible =!postponeScheduleCreation &&!isScheduled;\n\tfinal boolean isEligible = isAutoProcessEligible || isPostponeScheduleCreationEligible;\n\tif (isEligible) {\n\t\tfinal OrderId orderId = new OrderId(orderRecord);\n\t\tfinal String transactionName = trxManager.getTransactionName();\n\t\tfinal DeliveryRule deliveryRule = new DeliveryRule(orderRecord);\n\t\tfinal boolean isShipAndInvoiceEligible = deliveryRule.isShipAndInvoiceEligible();\n\t\tif (isShipAndInvoiceEligible) {\n\t\t\tlogger.info(\"Enqueueing order {} for automatic shipping and invoicing using transaction name {}.\", Loggables.orderId(orderId), transactionName);\n\t\t\tfinal CompleteShipAndInvoiceEnqueuer enqueuer = new CompleteShipAndInvoiceEnqueuer();\n\t\t\tenqueuer.enqueue(orderId, transactionName);\n\t\t} else {\n\t\t\tlogger.info(\"Enqueueing order {} for schedule creation using transaction name {}.\", Loggables.orderId(orderId), transactionName);\n\t\t\tfinal CreateMissingShipmentSchedulesWorkpackageProcessor processor = new CreateMissingShipmentSchedulesWorkpackageProcessor();\n\t\t\tfinal AsyncBatchObserver observer = new AsyncBatchObserver();\n\t\t\tfinal AsyncBatchId batchId = processor.process(orderId, transactionName, observer);\n\t\t\tlogger.info(\"Order {} enqueued for schedule creation using transaction name {}. Batch ID is {}.\", Loggables.orderId(orderId), transactionName, batchId);\n\t\t}\n\t} else {\n\t\tlogger.info(\"Order {} is not eligible for automatic shipping and invoicing.\", Loggables.orderId(orderId));\n\t}\n}", "CodeBleu_score": 36.48414617714941}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tif (!orderRecord.isSOTrx()) {\n\t\treturn;\n\t}\n\tif (!orderRecord.isDelivered()) {\n\t\treturn;\n\t}\n\tif (orderRecord.isDelivered() && orderRecord.isDeliveredCompletely()) {\n\t\treturn;\n\t}\n\tif (orderRecord.isDelivered() &&!orderRecord.isDeliveredCompletely() && orderRecord.isProcessed()) {\n\t\treturn;\n\t}\n\tif (orderRecord.isDelivered() &&!orderRecord.isDeliveredCompletely() &&!orderRecord.isProcessed()) {\n\t\treturn;\n\t}\n\tif (orderRecord.getDeliveryRule().equals(DeliveryRule.DeliveryComplete.getValue())) {\n\t\treturn;\n\t}\n\tif (orderRecord.getDeliveryRule().equals(DeliveryRule.DeliveryPartial.getValue())) {\n\t\treturn;\n\t}\n\tif (orderRecord.getDeliveryRule().equals(DeliveryRule.DeliveryNone.getValue())) {\n\t\treturn;\n\t}\n\tif (orderRecord.getDeliveryRule().equals(DeliveryRule.DeliveryPartial.getValue())) {\n\t\treturn;\n\t}\n\tif (orderRecord.getDeliveryRule().equals(DeliveryRule.DeliveryPartial.getValue())) {\n\t\treturn;\n\t}\n\tif (orderRecord.getDeliveryRule().equals(DeliveryRule.DeliveryPartial.getValue())) {\n\t\treturn;\n\t}\n\tif (orderRecord.getDeliveryRule().equals(DeliveryRule.DeliveryPartial.getValue())) {\n\t\treturn;\n\t}\n\tif (orderRecord.getDeliveryRule().equals(DeliveryRule.DeliveryPartial.getValue())) {\n\t\treturn;\n\t}\n\tif (orderRecord.getDeliveryRule().equals(DeliveryRule.DeliveryPartial.getValue())) {\n\t\treturn;\n\t}\n\tif (orderRecord.getDeliveryRule().equals(DeliveryRule.DeliveryPartial.getValue())) {\n\t\treturn;\n\t}\n\tif (orderRecord.getDeliveryRule().equals(DeliveryRule.DeliveryPartial.getValue())) {\n\t\treturn;\n\t}\n\tif (orderRecord.getDeliveryRule().equals(DeliveryRule.DeliveryPartial.getValue())) {\n\t\treturn;\n\t}\n\tif (orderRecord.getDeliveryRule().equals(DeliveryRule.DeliveryPartial.", "CodeBleu_score": 22.990266743462637}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tfinal OrderId orderId = new OrderId(orderRecord.get_ID());\n\tfinal boolean isEligibleForAutoProcessing = orderRecord.isEligibleForAutoProcessing();\n\tfinal boolean isPostponed = orderRecord.isPostponed();\n\tfinal String transactionName = orderRecord.getTransactionName();\n\tfinal DeliveryRule deliveryRule = orderRecord.getDeliveryRule();\n\tfinal boolean isAutoDelivery = deliveryRule.isAutoDelivery();\n\tfinal boolean isAutoInvoice = deliveryRule.isAutoInvoice();\n\tfinal boolean isAutoDeliveryAndInvoice = deliveryRule.isAutoDeliveryAndInvoice();\n\tfinal boolean isAutoDeliveryOrInvoice = deliveryRule.isAutoDeliveryOrInvoice();\n\tfinal boolean isAutoDeliveryOrInvoiceAndPostponed = deliveryRule.isAutoDeliveryOrInvoiceAndPostponed();\n\tfinal boolean isAutoDeliveryOrInvoiceAndNotPostponed = deliveryRule.isAutoDeliveryOrInvoiceAndNotPostponed();\n\tfinal boolean isAutoDeliveryAndInvoiceAndPostponed = deliveryRule.isAutoDeliveryAndInvoiceAndPostponed();\n\tfinal boolean isAutoDeliveryAndInvoiceAndNotPostponed = deliveryRule.isAutoDeliveryAndInvoiceAndNotPostponed();\n\tfinal boolean isAutoDeliveryAndNotInvoice = deliveryRule.isAutoDeliveryAndNotInvoice();\n\tfinal boolean isAutoDeliveryAndNotInvoiceAndPostponed = deliveryRule.isAutoDeliveryAndNotInvoiceAndPostponed();\n\tfinal boolean isAutoDeliveryAndNotInvoiceAndNotPostponed = deliveryRule.isAutoDeliveryAndNotInvoiceAndNotPostponed();\n\tfinal boolean isAutoInvoiceAndNotDelivery = deliveryRule.isAutoInvoiceAndNotDelivery();\n\tfinal boolean isAutoInvoiceAndNotDeliveryAndPostponed = deliveryRule.isAutoInvoiceAndNotDeliveryAndPostponed();\n\tfinal boolean isAutoInvoiceAndNotDeliveryAndNotPostponed = deliveryRule.isAutoInvoiceAndNotDeliveryAndNotPostponed();\n\tfinal boolean isAutoDeliveryOrInvoiceAndNotPostponedAndNotAutoDelivery = deliveryRule.isAutoDeliveryOrInvoiceAndNotPostponedAndNotAutoDelivery();\n\tfinal boolean isAutoDeliveryOrInvoiceAndNotPostponedAndNotAutoInvoice = deliveryRule.isAutoDeliveryOrInvoiceAndNotPostponedAndNotAutoInvoice();\n\tfinal boolean isAutoDeliveryOrInvoiceAndPostponed", "CodeBleu_score": 28.8886758186757}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\tuser = User::where('email', $request->email)->first();\n\nif (!$user ||!Hash::check($request->password, $user->password)) {\nevent(new Failed($user?? null, $request));\n\nthrow ValidationException::withMessages([\n'email' => __('auth.failed'),\n]);\n}\n\nreturn $user;\n}", "CodeBleu_score": 37.54965319685072}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$user = User::where('email', $request->email)->first();\n\n\tif (!$user ||!Hash::check($request->password, $user->password)) {\n\t\tevent(new Failed($user, $request));\n\n\t\tthrow ValidationException::withMessages([\n\t\t\t'email' => __('auth.failed'),\n\t\t]);\n\t}\n\n\treturn $user;\n}", "CodeBleu_score": 43.067325474985566}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$user = User::where('email', $request->email)->first();\n\n\tif (empty($user)) {\n\t\treturn null;\n\t}\n\n\tif (!Hash::check($request->password, $user->password)) {\n\t\treturn null;\n\t}\n\n\treturn $user;\n}", "CodeBleu_score": 33.36606266957867}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->limiter->increment($request);\n\nthrow ValidationException::withMessages([\nFortify::username() => [trans('auth.failed')],\n]);\n}", "CodeBleu_score": 70.67788296100704}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\tLoginRateLimiter::increment($request);\n\nthrow ValidationException::withMessages([\nFortify::username() => [trans('auth.failed')],\n]);\n}", "CodeBleu_score": 64.7399319431582}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->limiter->increment($request);\n\nthrow ValidationException::withMessages([\nFortify::username() => [trans('auth.failed')],\n]);\n}", "CodeBleu_score": 70.67788296100704}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t\t$userId = $request->session()->get('login.id');\n\t$user = User::find($userId);\n\n\tif ($user) {\n\t\t$assertion = Webauthn::prepareAssertion($user);\n\t\t$data = [\n\t\t\t'enabled' => $user->two_factor_secret,\n\t\t\t'remember' => $request->session()->get('login.remember'),\n\t\t\t'publicKey' => $assertion->publicKey,\n\t\t];\n\n\t\treturn Inertia::render('TwoFactorChallenge', $data);\n\t}\n\n\treturn redirect()->route('login');\n}", "CodeBleu_score": 51.15227797635917}, {"code": "<?\npublic function toResponse($request){\n\t\t$userId = $request->session()->get('login.id');\n\t$user = User::find($userId);\n\n\tif ($user) {\n\t\t$assertion = Webauthn::prepareAssertion($user);\n\t\t$data = [\n\t\t\t'enabled' => $user->two_factor_secret!= null,\n\t\t\t'remember' => $request->session()->get('login.remember'),\n\t\t\t'publicKey' => $assertion->publicKey,\n\t\t];\n\n\t\treturn Inertia::render('TwoFactorChallenge', $data);\n\t}\n\n\tabort(403);\n}", "CodeBleu_score": 50.83977331325151}, {"code": "<?\npublic function toResponse($request){\n\t\t$userId = $request->session()->get('login.id');\n\t$user = User::find($userId);\n\n\tif ($user) {\n\t\t$publicKey = Webauthn::prepareAssertion($user);\n\t\t$data = [\n\t\t\t'enabled' => $user->two_factor_secret,\n\t\t\t'remember' => $request->session()->has('login.remember'),\n\t\t\t'publicKey' => $publicKey,\n\t\t];\n\t} else {\n\t\t$data = [\n\t\t\t'enabled' => false,\n\t\t\t'remember' => false,\n\t\t];\n\t}\n\n\treturn Inertia::render('TwoFactorChallenge', $data);\n}", "CodeBleu_score": 50.64912286703767}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t// Check if there is an existing user token for the given driver and socialite user ID\n$token = UserToken::where('driver', $driver)\n    ->where('socialite_user_id', $socialite->getId())\n    ->first();\n\n// If found, retrieve the associated user and verify the user association\nif ($token) {\n    $user = $token->user;\n    if (! $user->hasVerifiedEmail()) {\n        throw ValidationException::withMessages([\n            'email' => __('Your email address is unverified.'),\n        ]);\n    }\n\n    // Verify the user association\n    if (! $token->verify($socialite->token)) {\n        throw ValidationException::withMessages([\n            'email' => __('The provided credentials are incorrect.'),\n        ]);\n    }\n} else {\n    // Create a new user or associate the socialite token with an existing user\n    $user = User::where('email', $socialite->getEmail())->first();\n    if (! $user) {\n        $user = User::create([\n            'name' => $socialite->getName(),\n            'email' => $socialite->getEmail(),\n            'password' => (Str::(16)),\n            'email_verified_at' => now(),\n        ]);\n    }\n\n    // Associate the socialite token with the user\n    $user->tokens()->create([\n        'driver' => $driver,\n       'socialite_user_id' => $socialite->getId(),\n        'token' => $socialite->token,\n    ]);\n}\n\n// Log the user in\n$request->session()->put(\n    'login.intended_url',\n    $request->header('Referer')\n);\n\n$request->session()->regenerate();\n\n$this->guard()->login($user, true);\n\nreturn $user;\n}", "CodeBleu_score": 46.28621815376414}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t\t$token = UserToken::where('driver', $driver)->where('socialite_id', $socialite->getId())->first();\n\n\tif ($token) {\n\t\t$user = $token->user;\n\n\t\tif (!$user->hasVerifiedEmail()) {\n\t\t\tthrow ValidationException::withMessages([\n\t\t\t\t'email' => __('Your email address is not verified.'),\n\t\t\t]);\n\t\t}\n\n\t\t$this->guard()->login($user, $request->filled('remember'));\n\t} else {\n\t\t$user = User::where('email', $socialite->getEmail())->first();\n\n\t\tif (!$user) {\n\t\t\t$user = (new CreateNewUser())->create([\n\t\t\t\t'name' => $socialite->getName(),\n\t\t\t\t'email' => $socialite->getEmail(),\n\t\t\t\t'password' => (Str::(16)),\n\t\t\t]);\n\n\t\t\t$user->email_verified_at = now();\n\t\t\t$user->save();\n\n\t\t\tevent(new Registered($user));\n\t\t}\n\n\t\tUserToken::create([\n\t\t\t'user_id' => $user->id,\n\t\t\t'driver' => $driver,\n\t\t\t'socialite_id' => $socialite->getId(),\n\t\t]);\n\t}\n\n\treturn $user;\n}", "CodeBleu_score": 47.13629083280219}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t\t// Check if there is an existing user token for the given driver and socialite user ID\n\t$userToken = UserToken::where('driver', $driver)->where('socialite_user_id', $socialite->getId())->first();\n\n\t// If found, retrieve the associated user and verify the user association\n\tif ($userToken) {\n\t\t$user = $userToken->user;\n\t\tif ($user->socialite_token!== $socialite->token) {\n\t\t\t$user->socialite_token = $socialite->token;\n\t\t\t$user->save();\n\t\t}\n\t}\n\n\t// If not, create a new user or associate the socialite token with an existing user\n\telse {\n\t\t$user = User::where('email', $socialite->getEmail())->first();\n\t\tif (!$user) {\n\t\t\t// Create a new user\n\t\t\t$user = CreateNewUser::create([\n\t\t\t\t'name' => $socialite->getName(),\n\t\t\t\t'email' => $socialite->getEmail(),\n\t\t\t\t'password' => (Str::(16)),\n\t\t\t\t'email_verified_at' => now(),\n\t\t\t]);\n\t\t}\n\n\t\t// Associate the socialite token with the user\n\t\tUserToken::create([\n\t\t\t'user_id' => $user->id,\n\t\t\t'driver' => $driver,\n\t\t\t'socialite_user_id' => $socialite->getId(),\n\t\t\t'socialite_token' => $socialite->token,\n\t\t]);\n\t}\n\n\t// Return the authenticated user\n\treturn $user;\n}", "CodeBleu_score": 46.72997180316947}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t\t$user = $this->getUser($request);\n\tif (!$user) {\n\t\treturn false;\n\t}\n\t$filteredCredentials = $this->getFilteredCredentials($request);\n\tif (!WebauthnFacade::validateAssertion($user, $filteredCredentials)) {\n\t\tevent(new Failed($user, $this));\n\t\tthrow ValidationException::withMessages([\n\t\t\t'webauthn' => [trans('auth.failed')],\n\t\t]);\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 45.543895016619096}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t\t$user = $this->getUser($request);\n\tif ($user === null) {\n\t\treturn false;\n\t}\n\n\t$credentials = $this->getCredentials($request);\n\t$credentials['user'] = $user;\n\n\tif (! $this->validate($credentials)) {\n\t\tevent(new Failed($user, $this));\n\t\tthrow ValidationException::withMessages([\n\t\t\t'user' => [trans('auth.failed')],\n\t\t]);\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 47.34951526742262}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t\t$user = $this->getUser($request);\n\n\tif (!$user) {\n\t\treturn false;\n\t}\n\n\t$credentials = $this->getCredentials($request);\n\t$credentials['user'] = $user;\n\n\t$response = WebauthnFacade::validateAssertion($credentials);\n\n\tif (!$response) {\n\t\tevent(new Failed($user, $this));\n\n\t\t$this->fireFailedEvent($user, $credentials);\n\n\t\tthrow ValidationException::withMessages([\n\t\t\t$this->username() => [trans('auth.failed')],\n\t\t]);\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 48.67053207753601}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\tif (empty($this->email)) {\n\t\t$this->error('No email provided');\n\t\treturn null;\n\t}\n\n\ttry {\n\t\treturn User::whereEmail($this->email)->firstOrFail();\n\t} catch (ModelNotFoundException $exception) {\n\t\t$this->error('User not found');\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 36.41311539812906}, {"code": "<?\nprivate function user(): ?User{\n\tif (empty($this->email)) {\n\t\t$this->error('No email provided');\n\t\treturn null;\n\t}\n\n\ttry {\n\t\treturn User::where('email', $this->email)->firstOrFail();\n\t} catch (ModelNotFoundException $e) {\n\t\t$this->error('User not found');\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 37.555811844267986}, {"code": "<?\nprivate function user(): ?User{\n\tif (! $this->email) {\n\t\t$this->error('No email provided');\n\n\t\treturn null;\n\t}\n\n\ttry {\n\t\treturn User::where('email', $this->email)->firstOrFail();\n\t} catch (ModelNotFoundException $e) {\n\t\t$this->error('User not found');\n\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 37.42266663041651}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\t\tif ($this->option('flush') && $this->usingScout() && $this->confirmToProceed('This will flush the Scout indexes. Proceed?')) {\n\t\t$this->info('Flushing Scout indexes...');\n\n\t\t$indexes = $this->scoutIndexes();\n\n\t\tforeach ($indexes as $index) {\n\t\t\t$table = $index->getTable();\n\n\t\t\t$this->call('scout:flush', [\n\t\t\t\t'index' => $table,\n\t\t\t]);\n\t\t}\n\n\t\t$this->info('Scout indexes flushed.');\n\t}\n}", "CodeBleu_score": 42.121322847970966}, {"code": "<?\nprotected function scoutFlush(): void{\n\tif (config('scout.driver') ==='meilisearch' && config('scout.meilisearch.flush')) {\n    foreach (config('scout.meilisearch.indexes') as $index) {\n        $table = $this->getTableName($index);\n        $this->call('scout:flush', ['model' => $table]);\n    }\n    $this->info('Indexes flushed!');\n}\n}", "CodeBleu_score": 52.80234707712895}, {"code": "<?\nprotected function scoutFlush(): void{\n\t\tif (config('scout.driver') ==='meilisearch' && config('scout.flush')) {\n\t\t$this->info('Flushing Scout indexes...');\n\t\tforeach (config('scout.meilisearch.indexes') as $indexName => $indexSettings) {\n\t\t\t$tableName = $indexSettings['table'];\n\t\t\tArtisan::call('scout:flush', ['model' => $tableName]);\n\t\t}\n\t\t$this->info('Scout indexes flushed.');\n\t}\n}", "CodeBleu_score": 41.29185123574642}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t\ttry {\n\t\t$vcard = Reader::read($resource->getVCard());\n\t} catch (ParseException $e) {\n\t\t$vcard = new VCard();\n\t}\n\n\tif ($vcard->UID->getValue() === null) {\n\t\t$vcard->add('UID', $resource->getUid());\n\t}\n\n\tforeach ($this->exporters as $exporter) {\n\t\t$exporter->export($vcard, $resource);\n\t}\n\n\treturn $vcard;\n}", "CodeBleu_score": 27.35567433630866}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t\t$vcard = null;\n\n\ttry {\n\t\t$vcard = $this->read($resource);\n\t} catch (ParseException $e) {\n\t\t// Do nothing, we'll create a new VCard\n\t}\n\n\tif ($vcard === null) {\n\t\t$vcard = $this->create($resource);\n\t}\n\n\t$this->exporters->each(function (ExportVCardResource $exporter) use ($resource, $vcard) {\n\t\t$exporter->export($resource, $vcard);\n\t});\n\n\treturn $vcard;\n}", "CodeBleu_score": 26.28696122241659}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t\ttry {\n\t\t$vcard = Reader::read($resource->getVCard());\n\t\tif (!$vcard->UID) {\n\t\t\t$vcard->UID = uniqid();\n\t\t}\n\t} catch (ParseException $e) {\n\t\t$vcard = new VCard();\n\t\t$vcard->UID = uniqid();\n\t\t$vcard->add('FN', $resource->getDisplayName());\n\t\t$vcard->add('N', $resource->getDisplayName());\n\t\t$vcard->add('EMAIL', $resource->getEmail());\n\t}\n\n\tforeach (ExportVCardResource::getExporters() as $exporter) {\n\t\t$vcard = $exporter->export($resource, $vcard);\n\t}\n\n\treturn $vcard;\n}", "CodeBleu_score": 35.28138037120642}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t\t$object = $this->getAddressBookObject($addressBookId, $cardUri);\n\tif (!$object) {\n\t\treturn false;\n\t}\n\n\tif ($object instanceof Contact) {\n\t\tBus::dispatch(new DestroyContact($object));\n\t} elseif ($object instanceof Group) {\n\t\tBus::dispatch(new DestroyGroup($object));\n\t} else {\n\t\treturn false;\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 31.137395143131453}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t\t$object = $this->getCard($addressBookId, $cardUri);\n\tif ($object instanceof Contact) {\n\t\tBus::dispatch(new DestroyContact($object));\n\t\treturn true;\n\t}\n\tif ($object instanceof Group) {\n\t\tBus::dispatch(new DestroyGroup($object));\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 32.413131929368035}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t\t$object = $this->getCard($addressBookId, $cardUri);\n\n\tif ($object instanceof Contact) {\n\t\tBus::dispatch(new DestroyContact($object))->onQueue('high');\n\t\treturn true;\n\t}\n\n\tif ($object instanceof Group) {\n\t\tBus::dispatch(new DestroyGroup($object))->onQueue('high');\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 37.53352744020036}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\t\tif (! request()->hasFile('file')) {\n\t\treturn;\n\t}\n\n\t$leadActivity = $this->create([\n\t\t'type' => 'file',\n\t\t'lead_id' => $data['lead_id'],\n\t\t'user_id' => auth()->user()->id,\n\t\t'comment' => $data['comment'],\n\t]);\n\n\t$file = request()->file('file');\n\t$fileName = $file->getClientOriginalName();\n\t$filePath = $file->storeAs('public/lead', $fileName);\n\n\treturn $this->create([\n\t\t'lead_activity_id' => $leadActivity->id,\n\t\t'name' => $fileName,\n\t\t'path' => $filePath,\n\t]);\n}", "CodeBleu_score": 58.501536361930405}, {"code": "<?\npublic function upload(array $data){\n\t\tif (! request()->hasFile('file')) {\n\t\treturn;\n\t}\n\n\t$leadActivity = $this->create([\n\t\t'user_id' => auth()->user()->id,\n\t\t'lead_id' => $data['lead_id'],\n\t\t'type' => 'file',\n\t\t'comment' => $data['comment'],\n\t]);\n\n\t$file = request()->file('file');\n\n\t$fileName = $file->getClientOriginalName();\n\t$file->storeAs('leads', $fileName, 'public');\n\n\treturn $this->create([\n\t\t'lead_activity_id' => $leadActivity->id,\n\t\t'name' => $fileName,\n\t\t'path' =>'storage/leads/'. $fileName,\n\t]);\n}", "CodeBleu_score": 60.023089809984064}, {"code": "<?\npublic function upload(array $data){\n\t\tif (!request()->hasFile('file')) {\n\t\treturn;\n\t}\n\n\t$leadActivity = $this->create([\n\t\t'type' => 'file',\n\t\t'lead_id' => $data['lead_id'],\n\t\t'user_id' => auth()->user()->id,\n\t\t'details' => [\n\t\t\t'name' => request()->file('file')->getClientOriginalName(),\n\t\t\t'size' => request()->file('file')->getSize(),\n\t\t],\n\t]);\n\n\t$file = request()->file('file')->store('lead-activities');\n\n\treturn $this->create([\n\t\t'lead_activity_id' => $leadActivity->id,\n\t\t'file' => $file,\n\t]);\n}", "CodeBleu_score": 56.00821046725728}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t\tif (request()->route()->getPrefix() == '/admin') {\n\t\tif ($exception instanceof AuthenticationException) {\n\t\t\treturn redirect()->route('admin.login');\n\t\t}\n\t} else {\n\t\tif ($exception instanceof AuthenticationException) {\n\t\t\treturn redirect()->route('admin.login');\n\t\t}\n\t}\n\n\tif ($exception instanceof HttpException) {\n\t\t$statusCode = $exception->getStatusCode();\n\t\t$response = response()->json([\n\t\t\t'message' => $exception->getMessage(),\n\t\t\t'errors' => $exception->getErrors(),\n\t\t], $statusCode);\n\t\tif ($statusCode >= 500) {\n\t\t\t$response->setStatusCode(500);\n\t\t}\n\t\treturn $response;\n\t}\n\n\tif ($exception instanceof ModelNotFoundException) {\n\t\treturn response()->json([\n\t\t\t'message' => 'Resource not found.',\n\t\t], 404);\n\t}\n\n\tif ($exception instanceof PDOException) {\n\t\treturn response()->json([\n\t\t\t'message' => 'Database error.',\n\t\t], 500);\n\t}\n\n\tif ($exception instanceof ParseError) {\n\t\treturn response()->json([\n\t\t\t'message' => 'Parse error.',\n\t\t], 500);\n\t}\n\n\treturn response()->json([\n\t\t'message' => 'Internal server error.',\n\t], 500);\n}", "CodeBleu_score": 48.19438664444452}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t\t$request = Container::getInstance()->make('request');\n\t$response = Container::getInstance()->make('response');\n\t$route = $request->route();\n\n\tif ($route && $route->getPrefix() === 'admin') {\n\t\t$response->setStatusCode(302);\n\t\t$response->headers->set('Location', route('admin.login'));\n\t} else if ($exception instanceof HttpException) {\n\t\t$response->setStatusCode($exception->getStatusCode());\n\t} else if ($exception instanceof ModelNotFoundException) {\n\t\t$response->setStatusCode(404);\n\t} else if ($exception instanceof PDOException) {\n\t\t$response->setStatusCode(500);\n\t} else if ($exception instanceof ParseError) {\n\t\t$response->setStatusCode(500);\n\t}\n\n\treturn $response;\n}", "CodeBleu_score": 39.91577589515118}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t\t$route = request()->route();\n\t$request = request();\n\t$response = app(ResponseFactory::class);\n\t$handler = app(AppExceptionHandler::class);\n\t$container = Container::getInstance();\n\t$container->instance(ExceptionHandler::class, $handler);\n\t$container->instance(ResponseFactory::class, $response);\n\t$container->instance(Container::class, $container);\n\n\t// Check if the route is for admin or front\n\t$is_admin = false;\n\tif ($route) {\n\t\t$is_admin = $route->getPrefix() === 'admin';\n\t}\n\n\t// Redirect front routes to the admin session creation\n\tif (!$is_admin && $route && $route->getName()!== 'admin.login') {\n\t\treturn redirect()->route('admin.login');\n\t}\n\n\t// Handle HTTP exceptions\n\tif ($exception instanceof HttpException) {\n\t\t$status = $exception->getStatusCode();\n\t\t$status = $status === 404? 404 : 500;\n\t\t$message = $exception->getMessage();\n\t\treturn response()->json(['message' => $message], $status);\n\t}\n\n\t// Handle ModelNotFoundException\n\tif ($exception instanceof ModelNotFoundException) {\n\t\t$status = 404;\n\t\t$message = 'Resource not found.';\n\t\treturn response()->json(['message' => $message], $status);\n\t}\n\n\t// Handle PDOException\n\tif ($exception instanceof PDOException) {\n\t\t$status = 500;\n\t\t$message = 'Internal server error.';\n\t\treturn response()->json(['message' => $message], $status);\n\t}\n\n\t// Handle ParseError\n\tif ($exception instanceof ParseError) {\n\t\t$status = 500;\n\t\t$message = 'Internal server error.';\n\t\treturn response()->json(['message' => $message], $status);\n\t}\n\n\t// Handle AuthenticationException\n\tif ($exception instanceof AuthenticationException) {\n\t\t$status = 401;\n\t\t$message = 'Unauthorized.';\n\t\treturn response()->json(['message' => $message], $status);\n\t}\n\n\t// Handle other exceptions\n\t$status = 500;\n\t$message = 'Internal server error.';\n\treturn", "CodeBleu_score": 41.10184286698754}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\t\tif (request()->expectsJson()) {\n\t\treturn response()->json([\n\t\t\t'error' => [\n\t\t\t\t'message' => $path,\n\t\t\t\t'code' => $statusCode,\n\t\t\t],\n\t\t], $statusCode);\n\t}\n\n\treturn response()->view(\"errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 52.74662026751906}, {"code": "<?\nprivate function response($path, $statusCode){\n\t\tif (request()->expectsJson()) {\n\t\treturn response()->json([\n\t\t\t'error' => [\n\t\t\t\t'message' => $path,\n\t\t\t]\n\t\t], $statusCode);\n\t}\n\n\treturn response()->view(\"errors.$statusCode\", [], $statusCode);\n}", "CodeBleu_score": 50.88473044608034}, {"code": "<?\nprivate function response($path, $statusCode){\n\t\tif (request()->expectsJson()) {\n\t\treturn response()->json([\n\t\t\t'error' => [\n\t\t\t\t'message' => $path,\n\t\t\t],\n\t\t], $statusCode);\n\t}\n\n\treturn response()->view(\"errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 51.24901220392509}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t\t$data = request()->all();\n\t$activityIds = $data['activityIds'];\n\t$isDone = $data['isDone'];\n\n\t$count = 0;\n\tforeach ($activityIds as $activityId) {\n\t\t$activity = $this->activityRepository->find($activityId);\n\t\tif ($activity) {\n\t\t\t$oldIsDone = $activity->is_done;\n\t\t\t$activity->is_done = $isDone;\n\t\t\t$activity->save();\n\n\t\t\tEvent::dispatch('activity.mass.update.before', $activityId);\n\t\t\tEvent::dispatch('activity.mass.update.after', $activityId);\n\n\t\t\tif ($oldIsDone!= $activity->is_done) {\n\t\t\t\t$count++;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn response()->json([\n\t\t'success' => $count > 0,\n\t\t'count' => $count,\n\t]);\n}", "CodeBleu_score": 42.10165409404907}, {"code": "<?\npublic function massUpdate(){\n\t\t$data = request()->all();\n\n\tif (empty($data['ids'])) {\n\t\treturn response()->json([\n\t\t\t'success' => false,\n\t\t\t'message' => trans('admin::app.response.select-one'),\n\t\t]);\n\t}\n\n\t$count = 0;\n\n\tforeach ($data['ids'] as $id) {\n\t\t$activity = $this->activityRepository->find($id);\n\n\t\tif ($activity) {\n\t\t\tEvent::dispatch('activity.before.mass-update', $id);\n\n\t\t\t$activity->update(['is_done' => $data['status']]);\n\n\t\t\tEvent::dispatch('activity.after.mass-update', $id);\n\n\t\t\t$count++;\n\t\t}\n\t}\n\n\tif ($count) {\n\t\treturn response()->json([\n\t\t\t'success' => true,\n\t\t\t'message' => trans('admin::app.datagrid.mass-ops.success'),\n\t\t]);\n\t} else {\n\t\treturn response()->json([\n\t\t\t'success' => false,\n\t\t\t'message' => trans('admin::app.datagrid.mass-ops.failure'),\n\t\t]);\n\t}\n}", "CodeBleu_score": 43.945459565176506}, {"code": "<?\npublic function massUpdate(){\n\t\t$data = request()->all();\n\n\tif (isset($data['ids']) && count($data['ids'])) {\n\t\tforeach ($data['ids'] as $id) {\n\t\t\t$activity = $this->activityRepository->find($id);\n\n\t\t\tif ($activity) {\n\t\t\t\tEvent::dispatch('lead.activity.mass-update.before', $activity);\n\n\t\t\t\t$activity->is_done = $data['is_done'];\n\t\t\t\t$activity->save();\n\n\t\t\t\tEvent::dispatch('lead.activity.mass-update.after', $activity);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn response()->json([\n\t\t'message' => trans('admin::app.response.update-success', ['name' => 'Activity']),\n\t]);\n}", "CodeBleu_score": 42.103810312257146}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t\t$ids = explode(',', request()->input('ids'));\n\t$activities = $this->activityRepository->findWhereIn('id', $ids);\n\n\tforeach ($activities as $activity) {\n\t\tEvent::dispatch('customer.activity.deleting', $activity->id);\n\t\t$activity->delete();\n\t\tEvent::dispatch('customer.activity.deleted', $activity->id);\n\t}\n\n\treturn response()->json(['message' => trans('admin::app.datagrid.mass-ops.delete-success', ['resource' => 'activities'])]);\n}", "CodeBleu_score": 29.300115312110194}, {"code": "<?\n public function massDestroy(){\n\t\t$activityIds = explode(',', request()->input('indexes'));\n\n\tforeach ($activityIds as $activityId) {\n\t\tEvent::dispatch('activity.before.delete', $activityId);\n\n\t\t$activity = $this->activityRepository->find($activityId);\n\n\t\tif ($activity) {\n\t\t\t$this->activityRepository->delete($activityId);\n\n\t\t\tEvent::dispatch('activity.after.delete', $activityId);\n\t\t}\n\t}\n\n\treturn response()->json([\n\t\t'message' => trans('admin::app.datagrid.mass-ops.delete-success', ['resource' => 'Activities']),\n\t]);\n}", "CodeBleu_score": 38.08942842806617}, {"code": "<?\n public function massDestroy(){\n\t\t$ids = explode(',', request()->input('indexes'));\n\n\tforeach ($ids as $id) {\n\t\tEvent::dispatch('activity.before.delete', $id);\n\t}\n\n\t$this->repository->delete($ids);\n\n\tforeach ($ids as $id) {\n\t\tEvent::dispatch('activity.after.delete', $id);\n\t}\n\n\treturn response()->json(['message' => trans('admin::app.datagrid.mass-ops.delete', ['resource' => 'Activities'])]);\n}", "CodeBleu_score": 31.477571859768872}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t$cards = DashboardHelper::getCards();\n\n\tforeach (request()->all() as $key => $value) {\n\t\tforeach ($cards as $card) {\n\t\t\tif ($card['key'] == $key) {\n\t\t\t\t$card['selected'] = $value;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn response()->json($cards);\n}", "CodeBleu_score": 32.263768492664255}, {"code": "<?\n public function updateCards(){\n\t$cards = DashboardHelper::getCards();\n\n\tforeach ($cards as $key => $card) {\n\t\tif (isset(request()->cards[$key])) {\n\t\t\t$cards[$key]['selected'] = true;\n\t\t} else {\n\t\t\t$cards[$key]['selected'] = false;\n\t\t}\n\t}\n\n\treturn response()->json($cards);\n}", "CodeBleu_score": 28.136254727147893}, {"code": "<?\n public function updateCards(){\n\t$cards = DashboardHelper::getCards();\n\n\tforeach (request()->cards as $card) {\n\t\tforeach ($cards as $key => $value) {\n\t\t\tif ($card['id'] == $value['id']) {\n\t\t\t\t$cards[$key]['selected'] = $card['selected'];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn response()->json([\n\t\t'success' => true,\n\t\t'message' => 'Cards updated successfully',\n\t\t'cards' => $cards,\n\t]);\n}", "CodeBleu_score": 34.75730026432598}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t\tEvent::dispatch('admin.configuration.create.before');\n\n\t$configuration = $this->configurationRepository->create(request()->all());\n\n\tEvent::dispatch('admin.configuration.create.after', $configuration);\n\n\tsession()->flash('success', trans('admin::app.response.create-success', ['name' => 'Configuration']));\n\n\treturn redirect()->back();\n}", "CodeBleu_score": 39.95001176260423}, {"code": "<?\npublic function store(){\n\t\tEvent::dispatch('admin.configuration.create.before');\n\n\t$configuration = $this->configurationRepository->create(request()->all());\n\n\tEvent::dispatch('admin.configuration.create.after', $configuration);\n\n\tsession()->flash('success', trans('admin::app.response.create-success', ['name' => 'Configuration']));\n\n\treturn redirect()->back();\n}", "CodeBleu_score": 39.95001176260423}, {"code": "<?\npublic function store(){\n\t\tEvent::dispatch('admin.configuration.create.before');\n\n\t$configuration = app(ConfigurationRepository::class)->create(request()->all());\n\n\tEvent::dispatch('admin.configuration.create.after', $configuration);\n\n\tsession()->flash('success', trans('admin::app.response.create-success', ['name' => 'Configuration']));\n\n\treturn redirect()->back();\n}", "CodeBleu_score": 37.8325608052603}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t\t$path = request()->get('path');\n\t$name = request()->get('name');\n\t$config = $this->configRepository->findOneWhere(['code' => $path]);\n\t$file = $config->value;\n\n\tif (Storage::exists($file)) {\n\t\treturn Storage::download($file, $name);\n\t}\n\n\treturn abort(404);\n}", "CodeBleu_score": 43.22202245424692}, {"code": "<?\npublic function download(){\n\t\t$fileName = request()->get('file');\n\n\tif ($fileName) {\n\t\t$filePath = Storage::path($fileName);\n\n\t\tif (Storage::exists($filePath)) {\n\t\t\t$configuration = app(ConfigurationRepository::class)->findOneWhere([\n\t\t\t\t'code' => 'general.system.configuration_file_name',\n\t\t\t]);\n\n\t\t\treturn response()->download($filePath, $configuration->value);\n\t\t}\n\t}\n\n\treturn abort(404);\n}", "CodeBleu_score": 40.28333471700333}, {"code": "<?\npublic function download(){\n\t\t$filePath = request()->get('file');\n\t$fileName = basename($filePath);\n\n\t$config = app(ConfigurationRepository::class)->findOneWhere([\n\t\t'code' => 'core::general.upload.storage',\n\t]);\n\n\treturn Storage::disk($config->value)->download($filePath, $fileName);\n}", "CodeBleu_score": 43.629252090084556}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\tList<AdminModelSort> adminModelSortList = new ArrayList<>();\n\tfor (int i = 0; i < list.size(); i++) {\n\t\tAdminModelSort adminModelSort = new AdminModelSort();\n\t\tadminModelSort.setUserId(UserUtil.getUserId());\n\t\tadminModelSort.setModel(list.get(i));\n\t\tadminModelSort.setSort(i);\n\t\tadminModelSortList.add(adminModelSort);\n\t}\n\tadminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, UserUtil.getUserId()));\n\tadminModelSortService.saveBatch(adminModelSortList);\n\treturn Result.ok();\n}", "CodeBleu_score": 64.69281776819015}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\tList<AdminModelSort> adminModelSortList = new ArrayList<>();\n\tfor (int i = 0; i < list.size(); i++) {\n\t\tAdminModelSort adminModelSort = new AdminModelSort();\n\t\tadminModelSort.setUserId(UserUtil.getUserId());\n\t\tadminModelSort.setModelName(list.get(i));\n\t\tadminModelSort.setSort(i);\n\t\tadminModelSortList.add(adminModelSort);\n\t}\n\tadminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, UserUtil.getUserId()));\n\tadminModelSortService.saveBatch(adminModelSortList);\n\treturn Result.ok();\n}", "CodeBleu_score": 64.69572543848734}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\tList<AdminModelSort> list1 = new ArrayList<>();\n\tfor (int i = 0; i < list.size(); i++) {\n\t\tAdminModelSort adminModelSort = new AdminModelSort();\n\t\tadminModelSort.setUserId(UserUtil.getUserId());\n\t\tadminModelSort.setSort(i);\n\t\tadminModelSort.setModelId(list.get(i));\n\t\tlist1.add(adminModelSort);\n\t}\n\tadminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, UserUtil.getUserId()));\n\tadminModelSortService.saveBatch(list1);\n\treturn Result.ok();\n}", "CodeBleu_score": 63.86252754839199}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t\tAdminConfig config = adminConfigService.getById(moduleSetting.getSettingId());\n\tif (config.getModule() == AdminModuleEnum.CRM.getModule()) {\n\t\treturn Result.fail(AdminCodeEnum.CRM_MODULE_CAN_NOT_DISABLE);\n\t}\n\tconfig.setStatus(moduleSetting.getStatus());\n\tadminConfigService.updateById(config);\n\treturn Result.success();\n}", "CodeBleu_score": 56.84872132282975}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getId());\n\tif (adminConfig.getCode().equals(AdminCodeEnum.CRM.getCode())) {\n\t\treturn Result.fail(\"CRM\u6a21\u5757\u4e0d\u80fd\u7981\u7528\");\n\t}\n\tadminConfig.setStatus(moduleSetting.getStatus());\n\tadminConfigService.updateById(adminConfig);\n\treturn Result.ok();\n}", "CodeBleu_score": 58.761835802566154}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n\tif (adminConfig.getAdminConfigType() == AdminConfig.CRM_TYPE) {\n\t\treturn Result.fail(AdminCodeEnum.CRM_MODULE_NOT_EDIT);\n\t}\n\tadminConfig.setAdminConfigStatus(moduleSetting.getStatus());\n\tadminConfigService.updateById(adminConfig);\n\treturn Result.success();\n}", "CodeBleu_score": 63.54348017040808}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\tAdminUserConfig userConfig = adminUserConfigService.queryUserConfig(customKey);\n\tif (userConfig!= null) {\n\t\tuserConfig.setConfigValue(json.toJSONString());\n\t\tadminUserConfigService.updateById(userConfig);\n\t} else {\n\t\tuserConfig = new AdminUserConfig();\n\t\tuserConfig.setConfigKey(customKey);\n\t\tuserConfig.setConfigValue(json.toJSONString());\n\t\tuserConfig.setUserId(UserUtil.getUserId());\n\t\tadminUserConfigService.save(userConfig);\n\t}\n\treturn Result.ok();\n}", "CodeBleu_score": 69.23772032857661}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\tAdminUserConfig adminUserConfig = adminUserConfigService.queryCustomSetting(customKey);\n\tif (adminUserConfig!= null) {\n\t\tadminUserConfig.setConfigValue(json.toJSONString());\n\t\tadminUserConfigService.updateById(adminUserConfig);\n\t} else {\n\t\tadminUserConfig = new AdminUserConfig();\n\t\tadminUserConfig.setConfigKey(customKey);\n\t\tadminUserConfig.setConfigValue(json.toJSONString());\n\t\tadminUserConfigService.save(adminUserConfig);\n\t}\n\treturn Result.ok();\n}", "CodeBleu_score": 55.9031340255692}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\tAdminUserConfig adminUserConfig = adminUserConfigService.queryCustomSetting(customKey);\n\tif (adminUserConfig!= null) {\n\t\tadminUserConfig.setConfigValue(json.toJSONString());\n\t\tadminUserConfigService.updateById(adminUserConfig);\n\t} else {\n\t\tadminUserConfig = new AdminUserConfig();\n\t\tadminUserConfig.setConfigKey(customKey);\n\t\tadminUserConfig.setConfigValue(json.toJSONString());\n\t\tadminUserConfigService.save(adminUserConfig);\n\t}\n\treturn Result.ok();\n}", "CodeBleu_score": 55.9031340255692}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser user = adminUserService.getById(userId);\n\tif (ObjectUtil.isNull(user)) {\n\t\treturn Result.fail(AdminCodeEnum.USER_NOT_EXIST);\n\t}\n\t//\u83b7\u53d6\u90e8\u95e8\u540d\u79f0\n\tif (ObjectUtil.isNotNull(user.getDeptId())) {\n\t\tString deptName = adminDeptService.getDeptName(user.getDeptId());\n\t\tuser.setDeptName(deptName);\n\t}\n\tuser.setSalt(null);\n\tuser.setPassword(null);\n\treturn Result.success(user);\n}", "CodeBleu_score": 50.88002097360472}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser user = adminUserService.getById(userId);\n\tif (ObjectUtil.isNotNull(user)) {\n\t\tuser.setSalt(null);\n\t\tuser.setPassword(null);\n\t}\n\treturn Result.data(user);\n}", "CodeBleu_score": 33.71834589162044}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser adminUser = adminUserService.getById(userId);\n\tif (ObjectUtil.isNull(adminUser)) {\n\t\treturn Result.fail(\"\u7528\u6237\u4e0d\u5b58\u5728\");\n\t}\n\treturn Result.ok(adminUser);\n}", "CodeBleu_score": 27.723862724460535}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t\tLong userId = UserUtil.getUserId();\n\tList<AdminUserConfig> userConfigs = adminUserConfigService.list(new LambdaQueryWrapper<AdminUserConfig>().eq(AdminUserConfig::getConfigType, 3).eq(AdminUserConfig::getUserId, userId));\n\tif (userConfigs.size() > 1) {\n\t\tuserConfigs.forEach(userConfig -> {\n\t\t\tuserConfig.setConfigValue(\"1\");\n\t\t\tadminUserConfigService.updateById(userConfig);\n\t\t});\n\t} else {\n\t\tAdminUserConfig userConfig = new AdminUserConfig();\n\t\tuserConfig.setUserId(userId);\n\t\tuserConfig.setConfigType(3);\n\t\tuserConfig.setConfigValue(\"1\");\n\t\tadminUserConfigService.save(userConfig);\n\t}\n\treturn Result.success();\n}", "CodeBleu_score": 48.848602733054754}, {"code": " public Result readNotice() {\n\t\t// Get the current user's ID\n\tLong userId = UserUtil.getUserId();\n\n\t// Check if there are multiple \"readNotice\" entries for the user\n\tLambdaQueryWrapper<AdminUserConfig> queryWrapper = new LambdaQueryWrapper<>();\n\tqueryWrapper.eq(AdminUserConfig::getUserId, userId);\n\tqueryWrapper.eq(AdminUserConfig::getConfigKey, \"readNotice\");\n\tList<AdminUserConfig> readNoticeList = adminUserConfigService.list(queryWrapper);\n\n\t// Update the status to 1 for all matching entries\n\tif (readNoticeList.size() > 1) {\n\t\tfor (AdminUserConfig readNotice : readNoticeList) {\n\t\t\treadNotice.setConfigValue(\"1\");\n\t\t\tadminUserConfigService.updateById(readNotice);\n\t\t}\n\t} else {\n\t\t// Create a new \"readNotice\" entry with status 1\n\t\tAdminUserConfig newReadNotice = new AdminUserConfig();\n\t\tnewReadNotice.setUserId(userId);\n\t\tnewReadNotice.setConfigKey(\"readNotice\");\n\t\tnewReadNotice.setConfigValue(\"1\");\n\t\tadminUserConfigService.save(newReadNotice);\n\t}\n\n\t// Return a success result\n\treturn Result.ok();\n}", "CodeBleu_score": 45.410413015461636}, {"code": " public Result readNotice() {\n\t\t// \u83b7\u53d6\u5f53\u524d\u7528\u6237ID\n\tLong userId = UserUtil.getUserId();\n\t// \u67e5\u8be2\u5f53\u524d\u7528\u6237\u662f\u5426\u6709\u591a\u4e2a\"readNotice\"\u8bb0\u5f55\n\tList<AdminUserConfig> readNoticeList = adminUserConfigService.list(new LambdaQueryWrapper<AdminUserConfig>().eq(AdminUserConfig::getUserId, userId).eq(AdminUserConfig::getConfigKey, \"readNotice\"));\n\t// \u5982\u679c\u6709\u591a\u4e2a\u8bb0\u5f55\uff0c\u5219\u66f4\u65b0\u6240\u6709\u8bb0\u5f55\u7684\u72b6\u6001\u4e3a1\n\tif (readNoticeList.size() > 1) {\n\t\tadminUserConfigService.update(new LambdaUpdateWrapper<AdminUserConfig>().eq(AdminUserConfig::getUserId, userId).eq(AdminUserConfig::getConfigKey, \"readNotice\").set(AdminUserConfig::getConfigValue, 1));\n\t} else {\n\t\t// \u5982\u679c\u6ca1\u6709\u591a\u4e2a\u8bb0\u5f55\uff0c\u5219\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\"readNotice\"\u8bb0\u5f55\uff0c\u72b6\u6001\u4e3a1\n\t\tAdminUserConfig readNotice = new AdminUserConfig();\n\t\treadNotice.setUserId(userId);\n\t\treadNotice.setConfigKey(\"readNotice\");\n\t\treadNotice.setConfigValue(1);\n\t\tadminUserConfigService.save(readNotice);\n\t}\n\t// \u8fd4\u56de\u6210\u529f\u7ed3\u679c\n\treturn Result.ok();\n}", "CodeBleu_score": 49.591042170044766}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\tAdminConfig adminConfig = adminConfigService.getOne(new QueryWrapper<AdminConfig>().eq(\"config_name\", \"companyInfo\"));\n\tif (Objects.isNull(adminConfig)) {\n\t\tadminConfig = new AdminConfig();\n\t\tadminConfig.setConfigName(\"companyInfo\");\n\t\tadminConfig.setConfigValue(JSON.toJSONString(adminCompanyBO));\n\t\tadminConfigService.save(adminConfig);\n\t} else {\n\t\tadminConfig.setConfigValue(JSON.toJSONString(adminCompanyBO));\n\t\tadminConfigService.updateById(adminConfig);\n\t}\n}", "CodeBleu_score": 48.26078333546286}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\tAdminConfig adminConfig = adminConfigService.getOne(new QueryWrapper<AdminConfig>().eq(\"config_name\", \"companyInfo\"));\n\tif (adminConfig == null) {\n\t\tadminConfig = new AdminConfig();\n\t\tadminConfig.setConfigName(\"companyInfo\");\n\t\tadminConfig.setConfigValue(JSON.toJSONString(adminCompanyBO));\n\t\tadminConfigService.save(adminConfig);\n\t} else {\n\t\tadminConfig.setConfigValue(JSON.toJSONString(adminCompanyBO));\n\t\tadminConfigService.updateById(adminConfig);\n\t}\n}", "CodeBleu_score": 53.45143405678947}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\tAdminConfig adminConfig = adminConfigService.getOne(new QueryWrapper<AdminConfig>().eq(\"config_name\", \"companyInfo\"));\n\tif (adminConfig == null) {\n\t\tadminConfig = new AdminConfig();\n\t\tadminConfig.setConfigName(\"companyInfo\");\n\t\tadminConfig.setConfigValue(JSON.toJSONString(adminCompanyBO));\n\t\tadminConfigService.save(adminConfig);\n\t} else {\n\t\tadminConfig.setConfigValue(JSON.toJSONString(adminCompanyBO));\n\t\tadminConfigService.updateById(adminConfig);\n\t}\n}", "CodeBleu_score": 53.45143405678947}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminConfig config = adminConfigService.queryAdminConfig(AdminCacheKey.ADMIN_COMPANY_INFO);\n\tAdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n\tif (config!= null) {\n\t\tadminCompanyBO = JSON.parseObject(config.getValue(), AdminCompanyBO.class);\n\t}\n\treturn adminCompanyBO;\n}", "CodeBleu_score": 50.07327595247918}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminConfig adminConfig = adminConfigMapper.selectOne(new QueryWrapper<AdminConfig>().lambda().eq(AdminConfig::getConfigKey, AdminConst.ADMIN_CONFIG_KEY));\n\tAdminCompanyBO adminCompanyBO = null;\n\tif (adminConfig!= null) {\n\t\tadminCompanyBO = JSON.parseObject(adminConfig.getConfigValue(), AdminCompanyBO.class);\n\t}\n\tif (adminCompanyBO == null) {\n\t\tadminCompanyBO = new AdminCompanyBO();\n\t}\n\treturn adminCompanyBO;\n}", "CodeBleu_score": 57.39324443285649}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t\t// get the admin configuration for the company\n\tAdminConfig adminConfig = queryAdminConfigByKey(AdminConst.COMPANY_CONFIG_KEY);\n\n\t// if the admin configuration is found, parse the configuration value into an AdminCompanyBO object\n\tif (Objects.nonNull(adminConfig)) {\n\t\treturn JSON.parseObject(adminConfig.getConfigValue(), AdminCompanyBO.class);\n\t}\n\n\t// if the admin configuration is not found, return a new instance of AdminCompanyBO\n\treturn new AdminCompanyBO();\n}", "CodeBleu_score": 22.401881933707884}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t List<AdminConfig> adminConfigs = new ArrayList<>();\n for (String s : stringList) {\n AdminConfig adminConfig = new AdminConfig();\n adminConfig.setConfigName(AdminConst.LOG_WELCOME_SPEECH);\n adminConfig.setConfigValue(s);\n adminConfigs.add(adminConfig);\n }\n removeByConfigName(AdminConst.LOG_WELCOME_SPEECH);\n saveBatch(adminConfigs);\n }", "CodeBleu_score": 41.120165997392355}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t\tList<AdminConfig> configList = new ArrayList<>();\n\tfor (String string : stringList) {\n\t\tAdminConfig config = new AdminConfig();\n\t\tconfig.setConfigName(AdminConst.LOG_WELCOME_SPEECH);\n\t\tconfig.setConfigValue(string);\n\t\tconfig.setConfigType(AdminCodeEnum.LOG_WELCOME_SPEECH.getType());\n\t\tconfigList.add(config);\n\t}\n\tremoveByConfigName(AdminConst.LOG_WELCOME_SPEECH);\n\tsaveBatch(configList);\n}", "CodeBleu_score": 49.6485759233456}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t List<AdminConfig> adminConfigs = stringList.stream().map(s -> {\n AdminConfig adminConfig = new AdminConfig();\n adminConfig.setName(AdminConst.LOG_WELCOME_SPEECH);\n adminConfig.setValue(s);\n return adminConfig;\n }).collect(Collectors.toList());\n removeConfig(AdminConst.LOG_WELCOME_SPEECH);\n saveBatch(adminConfigs);\n }", "CodeBleu_score": 35.059132411599535}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\t// Get the current user ID and user details\n\tLong userId = UserUtil.getUserId();\n\tAdminUser user = adminUserService.getById(userId);\n\n\t// Check the provided password against the stored password using the username and salt\n\tif (!AuthPasswordUtil.checkPassword(adminInitDataBO.getPassword(), user.getPassword(), user.getSalt())) {\n\t\tthrow new CrmException(AdminCodeEnum.PASSWORD_ERROR);\n\t}\n\n\t// Generate a temporary access code and store it in Redis with a 10-minute expiration\n\tString code = RandomUtil.randomString(6);\n\tredisService.set(AdminCacheKey.ADMIN_INIT_DATA_CODE + userId, code, 600);\n\n\treturn code;\n}", "CodeBleu_score": 38.625090173597485}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tAdminUser adminUser = UserUtil.getUser();\n\tif (adminUser == null) {\n\t\tthrow new CrmException(AdminCodeEnum.USER_NOT_EXIST);\n\t}\n\tif (StrUtil.isEmpty(adminInitDataBO.getPassword())) {\n\t\tthrow new CrmException(SystemCodeEnum.PASSWORD_ERROR);\n\t}\n\tString password = Util.encode(adminUser.getUsername(), adminInitDataBO.getPassword());\n\tif (!Objects.equals(password, adminUser.getPassword())) {\n\t\tthrow new CrmException(SystemCodeEnum.PASSWORD_ERROR);\n\t}\n\tString code = RandomUtil.randomString(6);\n\tredisTemplate.opsForValue().set(AdminCacheKey.getAdminTemporaryAccessCodeKey(adminUser.getUserId()), code, 600, TimeUnit.SECONDS);\n\treturn code;\n}", "CodeBleu_score": 34.28128011181205}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237ID\n\tLong userId = UserUtil.getUserId();\n\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\u4fe1\u606f\n\tAdminUser adminUser = adminUserService.getById(userId);\n\t//\u68c0\u67e5\u63d0\u4f9b\u7684\u5bc6\u7801\u662f\u5426\u4e0e\u5b58\u50a8\u7684\u5bc6\u7801\u5339\u914d\n\tif (AuthPasswordUtil.checkPassword(adminInitDataBO.getPassword(), adminUser.getPassword(), adminUser.getSalt())) {\n\t\t//\u751f\u6210\u4e34\u65f6\u8bbf\u95ee\u7801\n\t\tString code = RandomUtil.randomString(10);\n\t\t//\u5c06\u4e34\u65f6\u8bbf\u95ee\u7801\u5b58\u50a8\u5728Redis\u4e2d\n\t\tredisUtil.set(AdminCacheKey.ADMIN_INIT_DATA + userId, code, 600);\n\t\t//\u8fd4\u56de\u4e34\u65f6\u8bbf\u95ee\u7801\n\t\treturn code;\n\t} else {\n\t\t//\u5982\u679c\u5bc6\u7801\u4e0d\u6b63\u786e\uff0c\u5219\u629b\u51fa\u5f02\u5e38\n\t\tthrow new CrmException(AdminCodeEnum.PASSWORD_ERROR);\n\t}\n}", "CodeBleu_score": 39.14190582283406}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\t\tString userId = UserUtil.getUserId();\n\tif (StrUtil.isEmpty(userId)) {\n\t\treturn false;\n\t}\n\tString key = AdminCacheKey.UNAUTH_MENU_URL_KEY + userId;\n\tList<String> unAuthUrlList = cacheManager.get(key);\n\tif (CollUtil.isEmpty(unAuthUrlList)) {\n\t\treturn false;\n\t}\n\tString url = request.getRequestURI();\n\tif (StrUtil.isEmpty(url)) {\n\t\treturn false;\n\t}\n\treturn unAuthUrlList.contains(url);\n}", "CodeBleu_score": 38.917071867580134}, {"code": "private boolean verifyInitAuth(){\n\t\tString userId = UserUtil.getUserId();\n\tString key = AdminCacheKey.INIT_AUTH_KEY + userId;\n\tList<String> list = redisUtil.getList(key);\n\tif (CollUtil.isEmpty(list)) {\n\t\treturn false;\n\t}\n\treturn list.contains(AdminConst.INIT_AUTH_URL);\n}", "CodeBleu_score": 39.10559284569103}, {"code": "private boolean verifyInitAuth(){\n\t\tString userId = UserUtil.getUserId().toString();\n\tString key = AdminCacheKey.INIT_AUTH_KEY + userId;\n\tList<String> urlList = redisUtil.get(key);\n\tif (CollUtil.isEmpty(urlList)) {\n\t\treturn false;\n\t}\n\treturn urlList.contains(request.getRequestURI());\n}", "CodeBleu_score": 37.62836988359095}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\t// Create a list of AdminRoleMenu objects, each containing a role ID and a menu ID.\n\tList<AdminRoleMenu> list = new ArrayList<>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n\t\tadminRoleMenu.setRoleId(roleId);\n\t\tadminRoleMenu.setMenuId(menuId);\n\t\tlist.add(adminRoleMenu);\n\t}\n\t// Save the list of role-menu associations in batches.\n\tsaveBatch(list);\n}", "CodeBleu_score": 59.351556706056286}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\t// 1. Create a list of AdminRoleMenu objects, each containing a role ID and a menu ID.\n\tList<AdminRoleMenu> list = new ArrayList<>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu roleMenu = new AdminRoleMenu();\n\t\troleMenu.setRoleId(roleId);\n\t\troleMenu.setMenuId(menuId);\n\t\tlist.add(roleMenu);\n\t}\n\n\t// 2. Save the list of role-menu associations in batches.\n\tif (list.size() > 0) {\n\t\tthis.saveBatch(list);\n\t}\n}", "CodeBleu_score": 52.09295552101331}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\t// Create a list of AdminRoleMenu objects, each containing a role ID and a menu ID.\n\tList<AdminRoleMenu> list = new ArrayList<>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n\t\tadminRoleMenu.setRoleId(roleId);\n\t\tadminRoleMenu.setMenuId(menuId);\n\t\tlist.add(adminRoleMenu);\n\t}\n\t// Save the list of role-menu associations in batches.\n\tsaveBatch(list);\n}", "CodeBleu_score": 59.351556706056286}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\t\tString index = \"sys_log_\" + DateUtil.format(LocalDate.now(), \"yyyyMMdd\");\n\tMap<String, Object> map = BeanUtil.beanToMap(sysLog);\n\tmap.put(\"createTime\", DateUtil.format(sysLog.getCreateTime(), \"yyyy-MM-dd HH:mm:ss\"));\n\tmap.remove(\"id\");\n\tIndexRequest indexRequest = new IndexRequest(index);\n\tindexRequest.source(map);\n\ttry {\n\t\tIndexResponse response = restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n\t} catch (IOException e) {\n\t\tlog.error(\"Elasticsearch save log error:{}\", e.getMessage());\n\t}\n}", "CodeBleu_score": 52.897770313944356}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t\tString index = \"sys_log_\" + DateUtil.format(LocalDate.now(), \"yyyyMMdd\");\n\tMap<String, Object> map = BeanUtil.beanToMap(sysLog);\n\tmap.put(\"createTime\", DateUtil.format(sysLog.getCreateTime(), \"yyyy-MM-dd HH:mm:ss\"));\n\tmap.remove(\"id\");\n\tIndexRequest indexRequest = new IndexRequest(index).source(map, XContentType.JSON);\n\ttry {\n\t\tIndexResponse response = client.index(indexRequest, RequestOptions.DEFAULT);\n\t} catch (IOException e) {\n\t\tlog.error(\"save sys log error: {}\", e.getMessage());\n\t}\n}", "CodeBleu_score": 52.13774325480076}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t\tString index = getIndex();\n\tMap<String, Object> map = BeanUtil.beanToMap(sysLog, false, true);\n\tmap.put(\"createTime\", DateUtil.format(sysLog.getCreateTime(), \"yyyy-MM-dd HH:mm:ss\"));\n\tmap.remove(\"id\");\n\tIndexRequest indexRequest = new IndexRequest(index).source(map, XContentType.JSON);\n\ttry {\n\t\tIndexResponse indexResponse = restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n\t} catch (IOException e) {\n\t\tlog.error(e.getMessage());\n\t}\n}", "CodeBleu_score": 51.10696846765907}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t\t// Initialize the search criteria\n\tBoolQueryBuilder queryBuilder = QueryBuilders.boolQuery();\n\tif (StrUtil.isNotEmpty(querySysLogBO.getSearch())) {\n\t\tqueryBuilder.must(QueryBuilders.matchQuery(\"content\", querySysLogBO.getSearch()));\n\t}\n\tif (StrUtil.isNotEmpty(querySysLogBO.getIp())) {\n\t\tqueryBuilder.must(QueryBuilders.matchQuery(\"ip\", querySysLogBO.getIp()));\n\t}\n\tif (StrUtil.isNotEmpty(querySysLogBO.getAccount())) {\n\t\tqueryBuilder.must(QueryBuilders.matchQuery(\"account\", querySysLogBO.getAccount()));\n\t}\n\tif (querySysLogBO.getStartTime()!= null) {\n\t\tqueryBuilder.must(QueryBuilders.rangeQuery(\"createTime\").gte(DateUtil.beginOfDay(querySysLogBO.getStartTime())));\n\t}\n\tif (querySysLogBO.getEndTime()!= null) {\n\t\tqueryBuilder.must(QueryBuilders.rangeQuery(\"createTime\").lte(DateUtil.endOfDay(querySysLogBO.getEndTime())));\n\t}\n\t// Sort the results by creation time in descending order\n\tSortBuilder sortBuilder = new FieldSortBuilder(\"createTime\").order(SortOrder.DESC);\n\t// Exclude specific fields from the response\n\tString[] excludes = {\"_source\", \"_type\", \"_id\", \"_score\", \"_index\"};\n\t// Execute the search request using a REST client\n\tSearchRequest searchRequest = new SearchRequest(querySysLogBO.getIndex());\n\tSearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n\tsearchSourceBuilder.query(queryBuilder);\n\tsearchSourceBuilder.sort(sortBuilder);\n\tsearchSourceBuilder.excludes(excludes);\n\tsearchSourceBuilder.from(querySysLogBO.getCurrentPage() - 1);\n\tsearchSourceBuilder.size(querySysLogBO.getPageSize());\n\tsearchRequest.source(searchSourceBuilder);\n\ttry {\n\t\tSearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n\t\t// Map the search results to SysLog objects\n\t\tSearchHits hits = searchResponse.getHits();\n\t\tList<SysLog> sysLogList = new ArrayList<>();\n\t\tfor (SearchHit hit", "CodeBleu_score": 45.375547592230745}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t//    SearchRequest searchRequest = new SearchRequest(\"sys_log\");\n    SearchRequest searchRequest = new SearchRequest(querySysLogBO.getIndexName());\n    SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n    BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n    //\u6839\u636e\u7528\u6237id\u67e5\u8be2\n    if (querySysLogBO.getUserId()!= null) {\n        boolQueryBuilder.filter(QueryBuilders.termQuery(\"userId\", querySysLogBO.getUserId()));\n    }\n    //\u6839\u636e\u64cd\u4f5c\u7c7b\u578b\u67e5\u8be2\n    if (StrUtil.isNotEmpty(querySysLogBO.getType())) {\n        boolQueryBuilder.filter(QueryBuilders.termQuery(\"type\", querySysLogBO.getType()));\n    }\n    //\u6839\u636e\u64cd\u4f5c\u6a21\u5757\u67e5\u8be2\n    if (StrUtil.isNotEmpty(querySysLogBO.getModule())) {\n        boolQueryBuilder.filter(QueryBuilders.termQuery(\"module\", querySysLogBO.getModule()));\n    }\n    //\u6839\u636e\u64cd\u4f5c\u65f6\u95f4\u67e5\u8be2\n    if (querySysLogBO.getStartTime()!= null && querySysLogBO.getEndTime()!= null) {\n        boolQueryBuilder.filter(QueryBuilders.rangeQuery(\"createTime\").gte(querySysLogBO.getStartTime()).lte(querySysLogBO.getEndTime()));\n    }\n    //\u6839\u636e\u64cd\u4f5c\u5185\u5bb9\u67e5\u8be2\n    if (StrUtil.isNotEmpty(querySysLogBO.getContent())) {\n        boolQueryBuilder.filter(QueryBuilders.wildcardQuery(\"content\", \"*\" + querySysLogBO.getContent() + \"*\"));\n    }\n    searchSourceBuilder.query(boolQueryBuilder);\n    searchSourceBuilder.sort(\"createTime\", SortOrder.DESC);\n    searchSourceBuilder.fetchSource(new String[]{\"id\", \"userId\", \"type\", \"module\", \"content\", \"createTime\"}, null);\n    searchSourceBuilder.size(querySysLogBO.getSize());\n    searchSourceBuilder.from(querySysLogBO.getOffset());\n    searchRequest.source(searchSourceBuilder);\n    SearchResponse searchResponse = null;\n    try {\n        searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n    } catch (IOException e) {\n        log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5217\u8868\u5f02\u5e38\", e);\n    }\n    SearchHits hits = searchResponse.getHits();\n    List<SysLog> sysLogList = new ArrayList<>();\n    for (SearchHit hit : hits) {\n        Map<String, Object> sourceAsMap = hit.getSourceAsMap();\n        SysLog", "CodeBleu_score": 50.14549745827643}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t\tSearchRequest searchRequest = new SearchRequest();\n\tsearchRequest.indices(\"sys_log\");\n\tSearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n\tBoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n\tif (StrUtil.isNotEmpty(querySysLogBO.getUserName())) {\n\t\tboolQueryBuilder.must(QueryBuilders.matchQuery(\"userName\", querySysLogBO.getUserName()));\n\t}\n\tif (StrUtil.isNotEmpty(querySysLogBO.getIp())) {\n\t\tboolQueryBuilder.must(QueryBuilders.matchQuery(\"ip\", querySysLogBO.getIp()));\n\t}\n\tif (StrUtil.isNotEmpty(querySysLogBO.getLogType())) {\n\t\tboolQueryBuilder.must(QueryBuilders.matchQuery(\"logType\", querySysLogBO.getLogType()));\n\t}\n\tif (StrUtil.isNotEmpty(querySysLogBO.getStartTime())) {\n\t\tboolQueryBuilder.must(QueryBuilders.rangeQuery(\"createTime\").gte(querySysLogBO.getStartTime()));\n\t}\n\tif (StrUtil.isNotEmpty(querySysLogBO.getEndTime())) {\n\t\tboolQueryBuilder.must(QueryBuilders.rangeQuery(\"createTime\").lte(querySysLogBO.getEndTime()));\n\t}\n\tsearchSourceBuilder.query(boolQueryBuilder);\n\tsearchSourceBuilder.sort(\"createTime\", SortOrder.DESC);\n\tsearchSourceBuilder.fetchSource(new String[]{\"userName\", \"ip\", \"logType\", \"createTime\"}, null);\n\tsearchRequest.source(searchSourceBuilder);\n\tSearchResponse searchResponse = null;\n\ttry {\n\t\tsearchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n\t} catch (IOException e) {\n\t\tlog.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5217\u8868\u5f02\u5e38\", e);\n\t}\n\tSearchHits hits = searchResponse.getHits();\n\tList<SysLog> sysLogList = new ArrayList<>();\n\tfor (SearchHit hit : hits) {\n\t\tMap<String, Object> sourceAsMap = hit.getSourceAsMap();\n\t\tSysLog sysLog = new SysLog();\n\t\tBeanUtil.copyProperties(sourceAsMap, sysLog);\n\t\tsysLogList.add(sysLog);\n\t}\n\treturn new BasePage<>(hits.getTotalHits(), querySysLogBO.getPage", "CodeBleu_score": 49.46224185471401}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\t\thttps.get(url, (response) => {\n\t\t\tresponse.pipe(file);\n\t\t\tfile.on('finish', () => {\n\t\t\t\tfile.close();\n\t\t\t\tresolve();\n\t\t\t});\n\t\t}).on('error', (err) => {\n\t\t\tfs.unlink(dest, () => {\n\t\t\t\treject(err);\n\t\t\t});\n\t\t});\n\t});\n}", "CodeBleu_score": 55.244822924938006}, {"code": "async function downloadFile(url, dest){\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\t\thttps.get(url, (response) => {\n\t\t\tresponse.pipe(file);\n\t\t\tfile.on('finish', () => {\n\t\t\t\tfile.close();\n\t\t\t\tresolve();\n\t\t\t});\n\t\t}).on('error', (err) => {\n\t\t\tfs.unlink(dest);\n\t\t\treject(err);\n\t\t});\n\t});\n}", "CodeBleu_score": 58.21375259163496}, {"code": "async function downloadFile(url, dest){\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\t\thttps.get(url, (response) => {\n\t\t\tresponse.pipe(file);\n\t\t\tfile.on('finish', () => {\n\t\t\t\tfile.close();\n\t\t\t\tresolve();\n\t\t\t});\n\t\t}).on('error', (err) => {\n\t\t\tfs.unlink(dest);\n\t\t\treject(err);\n\t\t});\n\t});\n}", "CodeBleu_score": 58.21375259163496}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t\tif (circularDependencyCheckSet.contains(module.getId())) {\n\t\tlog.warn(\"Circular dependency detected for module: \" + module.getId());\n\t\treturn Flux.empty();\n\t}\n\tcircularDependencyCheckSet.add(module.getId());\n\treturn getDependentModulesFromDsl(module.getDsl())\n\t\t.flatMap(applicationRepository::findById)\n\t\t.flatMap(dependentModule -> getDependentModules(dependentModule, circularDependencyCheckSet));\n}", "CodeBleu_score": 48.16898005386497}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t\tif (circularDependencyCheckSet.contains(module.getId())) {\n\t\tlog.warn(\"Circular dependency detected for module {}\", module.getId());\n\t\treturn Flux.empty();\n\t}\n\tcircularDependencyCheckSet.add(module.getId());\n\treturn getDependentModulesFromDsl(module.getDsl())\n\t\t.flatMap(id -> applicationRepository.findById(id)\n\t\t\t.switchIfEmpty(Mono.error(BizError.APPLICATION_NOT_FOUND.withParams(id)))\n\t\t\t.flatMap(dependentModule -> getDependentModules(dependentModule, circularDependencyCheckSet)))\n\t\t.onErrorResume(e -> {\n\t\t\tlog.warn(\"Error while retrieving dependent modules for module {}\", module.getId(), e);\n\t\t\treturn Flux.empty();\n\t\t});\n}", "CodeBleu_score": 46.60025615806077}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t\t// Check if the module is already processed\n\tif (circularDependencyCheckSet.contains(module.getId())) {\n\t\t// Log a warning and continue processing\n\t\tlog.warn(\"Circular dependency detected for module {}. Skipping...\", module.getId());\n\t\treturn Flux.empty();\n\t}\n\n\t// Add the module ID to the circular dependency check set\n\tcircularDependencyCheckSet.add(module.getId());\n\n\t// Retrieve the dependent modules for the given module\n\treturn getDependentModulesFromDsl(module.getDsl())\n\t\t.flatMap(depModuleId -> {\n\t\t\t// Retrieve the dependent module\n\t\t\treturn applicationRepository.findById(depModuleId)\n\t\t\t\t.flatMap(depModule -> {\n\t\t\t\t\t// Check if the dependent module is already processed\n\t\t\t\t\tif (circularDependencyCheckSet.contains(depModule.getId())) {\n\t\t\t\t\t\t// Log a warning and continue processing\n\t\t\t\t\t\tlog.warn(\"Circular dependency detected for module {}. Skipping...\", depModule.getId());\n\t\t\t\t\t\treturn Mono.empty();\n\t\t\t\t\t}\n\n\t\t\t\t\t// Add the dependent module ID to the circular dependency check set\n\t\t\t\t\tcircularDependencyCheckSet.add(depModule.getId());\n\n\t\t\t\t\t// Return the dependent module\n\t\t\t\t\treturn Mono.just(depModule);\n\t\t\t\t})\n\t\t\t\t.switchIfEmpty(Mono.error(BizException.of(BizError.of(BizError.Type.NOT_FOUND, \"Module not found: \" + depModuleId))));\n\t\t});\n}", "CodeBleu_score": 44.71715815393681}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t// Check if the map is null or empty\n\tif (map == null || map.isEmpty()) {\n\t\treturn;\n\t}\n\n\t// Iterate through the map's entries\n\tfor (Map.Entry<?,?> entry : map.entrySet()) {\n\t\t// Check if the entry's value is a map\n\t\tif (entry.getValue() instanceof Map) {\n\t\t\t// Cast the value to a map\n\t\t\tMap<?,?> nestedMap = (Map<?,?>) entry.getValue();\n\n\t\t\t// Check if the entry's key is \"componentType\" and the value is \"module\"\n\t\t\tif (entry.getKey().equals(\"componentType\") && entry.getValue().equals(\"module\")) {\n\t\t\t\t// Get the app ID from the nested map\n\t\t\t\tString appId = (String) nestedMap.get(\"appId\");\n\n\t\t\t\t// Check if the app ID is not blank\n\t\t\t\tif (StringUtils.isNotBlank(appId)) {\n\t\t\t\t\t// Add the app ID to the set of dependent module IDs\n\t\t\t\t\tdependentModuleIds.add(appId);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Recursively call the function to process any nested maps or lists\n\t\t\tdoGetDependentModules(nestedMap, dependentModuleIds);\n\t\t} else if (entry.getValue() instanceof List) {\n\t\t\t// Cast the value to a list\n\t\t\tList<?> nestedList = (List<?>) entry.getValue();\n\n\t\t\t// Iterate through the list\n\t\t\tfor (Object item : nestedList) {\n\t\t\t\t// Check if the item is a map\n\t\t\t\tif (item instanceof Map) {\n\t\t\t\t\t// Cast the item to a map\n\t\t\t\t\tMap<?,?> nestedMap = (Map<?,?>) item;\n\n\t\t\t\t\t// Recursively call the function to process any nested maps or lists\n\t\t\t\t\tdoGetDependentModules(nestedMap, dependentModuleIds);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 43.147012888909515}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t// Check if the map is null or empty\n\tif (map == null || map.isEmpty()) {\n\t\treturn;\n\t}\n\n\t// Iterate over the map's entries\n\tfor (Map.Entry<?,?> entry : map.entrySet()) {\n\t\t// Check if the value is a map\n\t\tif (entry.getValue() instanceof Map) {\n\t\t\t// Recursively process the nested map\n\t\t\tdoGetDependentModules((Map<?,?>) entry.getValue(), dependentModuleIds);\n\t\t} else if (entry.getValue() instanceof List) {\n\t\t\t// Recursively process the nested list\n\t\t\tdoGetDependentModules((List<?>) entry.getValue(), dependentModuleIds);\n\t\t} else {\n\t\t\t// Check if the entry key is \"componentType\" and the value is \"module\"\n\t\t\tif (\"componentType\".equals(entry.getKey()) && \"module\".equals(entry.getValue())) {\n\t\t\t\t// Check if the entry key is \"appId\" and the value is not blank\n\t\t\t\tif (\"appId\".equals(entry.getKey()) && StringUtils.isNotBlank(entry.getValue())) {\n\t\t\t\t\t// Add the app ID to the set of dependent module IDs\n\t\t\t\t\tdependentModuleIds.add((String) entry.getValue());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 23.21137353558686}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tfor (Map.Entry<?,?> entry : map.entrySet()) {\n\t\tif (entry.getValue() instanceof Map) {\n\t\t\tdoGetDependentModules((Map<?,?>) entry.getValue(), dependentModuleIds);\n\t\t} else if (entry.getValue() instanceof List) {\n\t\t\tdoGetDependentModules((List<?>) entry.getValue(), dependentModuleIds);\n\t\t} else if (entry.getKey().equals(\"componentType\") && entry.getValue().equals(\"module\")) {\n\t\t\tString appId = (String) map.get(\"appId\");\n\t\t\tif (StringUtils.isNotBlank(appId)) {\n\t\t\t\tdependentModuleIds.add(appId);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 36.69345440258003}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t\t// create a buffered image from the data buffer\n\tBufferedImage bufferedImage = ImageIO.read(dataBuffer.asInputStream());\n\t// if the image is null, throw an exception\n\tif (bufferedImage == null) {\n\t\tthrow new BizException(BizError.INVALID_ARGUMENT, \"The uploaded file is not an image.\");\n\t}\n\t// get the image width and height\n\tint width = bufferedImage.getWidth();\n\tint height = bufferedImage.getHeight();\n\t// if the image is too small, throw an exception\n\tif (width < 100 || height < 100) {\n\t\tthrow new BizException(BizError.INVALID_ARGUMENT, \"The uploaded image is too small.\");\n\t}\n\t// if the image is too large, throw an exception\n\tif (width > 2000 || height > 2000) {\n\t\tthrow new BizException(BizError.INVALID_ARGUMENT, \"The uploaded image is too large.\");\n\t}\n\t// if the image is a thumbnail, resize it to 200x200\n\tif (createThumbnail) {\n\t\tbufferedImage = resizeImage(bufferedImage, 200, 200);\n\t}\n\t// create a byte array output stream\n\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t// write the buffered image to the byte array output stream\n\tImageIO.write(bufferedImage, \"JPEG\", baos);\n\t// create a new data buffer from the byte array output stream\n\tDataBuffer dataBuffer2 = new DefaultDataBufferFactory().wrap(baos.toByteArray());\n\t// set the content type to JPEG\n\tMediaType contentType = MediaType.IMAGE_JPEG;\n\t// if not creating a thumbnail, retain the original content type\n\tif (!createThumbnail) {\n\t\tcontentType = srcContentType;\n\t}\n\t// create a new asset with the processed image data and content type\n\tAsset asset = new Asset();\n\tasset.setDataBuffer(dataBuffer2);\n\tasset.setContentType(contentType);\n\t// release the data buffer\n\tDataBufferUtils.release(dataBuffer);\n\t// return the new asset\n\treturn asset;\n}", "CodeBleu_score": 41.627941398621424}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t\ttry {\n\t\tBufferedImage image = ImageIO.read(dataBuffer.asInputStream());\n\t\tif (createThumbnail) {\n\t\t\timage = resizeImage(image, 200, 200);\n\t\t}\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tImageIO.write(image, \"jpg\", baos);\n\t\tbaos.flush();\n\t\treturn new Asset(baos.toByteArray(), MediaType.IMAGE_JPEG);\n\t} finally {\n\t\tdataBuffer.release();\n\t}\n}", "CodeBleu_score": 35.548252537453976}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t\tImage srcImage = ImageIO.read(dataBuffer.asInputStream());\n\tif (srcImage == null) {\n\t\tthrow new BizException(BizError.INVALID_IMAGE_FORMAT);\n\t}\n\tMediaType dstContentType = srcContentType;\n\tif (createThumbnail) {\n\t\tdstContentType = MediaType.IMAGE_JPEG;\n\t\tsrcImage = resizeImage(srcImage);\n\t}\n\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\tImageIO.write((BufferedImage) srcImage, \"jpg\", baos);\n\tbyte[] data = baos.toByteArray();\n\tbaos.close();\n\treturn new Asset(data, dstContentType);\n}", "CodeBleu_score": 43.82118638249729}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn Mono.just(assetId)\n\t\t.flatMap(id -> {\n\t\t\treturn Mono.just(exchange.getResponse())\n\t\t\t\t.flatMap(response -> {\n\t\t\t\t\tresponse.getHeaders().setContentType(MediaType.IMAGE_PNG);\n\t\t\t\t\tresponse.setStatusCode(HttpStatus.OK);\n\t\t\t\t\treturn response.writeWith(Mono.just(DefaultDataBufferFactory.sharedInstance.wrap(new byte[0])));\n\t\t\t\t});\n\t\t});\n}", "CodeBleu_score": 31.659775229035713}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\tMono<Asset> assetMono = Asset.findById(assetId);\n\treturn assetMono.flatMap(asset -> {\n\t\tif (asset == null) {\n\t\t\treturn Mono.error(BizException.of(BizError.NOT_FOUND));\n\t\t}\n\t\tServerHttpResponse response = exchange.getResponse();\n\t\tresponse.setStatusCode(HttpStatus.OK);\n\t\tSet<String> contentTypes = asset.getContentType();\n\t\tif (contentTypes!= null &&!contentTypes.isEmpty()) {\n\t\t\tresponse.getHeaders().setContentType(MediaType.valueOf(contentTypes.iterator().next()));\n\t\t}\n\t\treturn response.writeWith(Flux.from(asset.getDataBuffer()));\n\t});\n}", "CodeBleu_score": 48.7953675052697}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\tMono<Asset> assetMono = assetService.getAssetById(assetId);\n\treturn assetMono.flatMap(asset -> {\n\t\tif (asset == null) {\n\t\t\tthrow new BizException(BizError.ASSET_NOT_FOUND);\n\t\t}\n\t\tServerHttpResponse response = exchange.getResponse();\n\t\tresponse.setStatusCode(HttpStatus.OK);\n\t\tif (asset.getContentType()!= null) {\n\t\t\tresponse.getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n\t\t}\n\t\treturn response.writeWith(Flux.from(asset.getData()));\n\t});\n}", "CodeBleu_score": 48.935049794781285}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\tif (workspaceMode == WorkspaceMode.SAAS) {\n\t\treturn Flux.empty();\n\t}\n\treturn organizationService.findAll().map(org -> {\n\t\tFindAuthConfig findAuthConfig = new FindAuthConfig();\n\t\tfindAuthConfig.setOrgId(org.getId());\n\t\tfindAuthConfig.setAuthConfigs(authProperties.getAuthConfigs().stream()\n\t\t\t.map(authConfig -> {\n\t\t\t\tAbstractAuthConfig abstractAuthConfig = authConfig.getAuthConfig();\n\t\t\t\tabstractAuthConfig.setOrgId(org.getId());\n\t\t\t\treturn abstractAuthConfig;\n\t\t\t})\n\t\t\t.collect(Collectors.toList()));\n\t\treturn findAuthConfig;\n\t});\n}", "CodeBleu_score": 33.800055802944925}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\tif (WorkspaceMode.SAAS.equals(commonConfig.getWorkspaceMode())) {\n\t\treturn Flux.empty();\n\t}\n\treturn organizationService.findAll()\n\t\t.map(organization -> {\n\t\t\tAbstractAuthConfig authConfig = authProperties.getAuthConfig(organization.getAuthConfigName());\n\t\t\treturn FindAuthConfig.builder()\n\t\t\t\t.authConfig(authConfig)\n\t\t\t\t.organization(organization)\n\t\t\t\t.build();\n\t\t});\n}", "CodeBleu_score": 29.577067558978865}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\tif (workspaceMode == WorkspaceMode.SAAS) {\n\t\treturn Flux.empty();\n\t}\n\treturn organizationService.findAllEnterpriseOrganizations()\n\t\t.flatMap(org -> authProperties.getAuthConfigs().stream()\n\t\t\t.map(authConfig -> mapToFindAuthConfig(authConfig, org))\n\t\t\t.collect(Collectors.toList()))\n\t\t.flatMapIterable(Function.identity());\n}", "CodeBleu_score": 33.92028958023944}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\tlog.info(\"Initializing MongockApplicationRunner\");\n\treturn MongockSpring5.builder()\n\t\t.setDriver(SpringDataMongoV3Driver.withDefaultLock(mongoTemplate))\n\t\t.addChangeLogsScanPackage(\"com.openblocks.domain\")\n\t\t.setSpringContext(springContext)\n\t\t.buildApplicationRunner();\n}", "CodeBleu_score": 24.83249278521015}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\treturn MongockSpring5.builder()\n\t\t.setDriver(SpringDataMongoV3Driver.withDefaultLock(mongoTemplate))\n\t\t.addChangeLogsScanPackage(MaterialProperties.getChangeLogsScanPackage())\n\t\t.setSpringContext(springContext)\n\t\t.buildApplicationRunner();\n}", "CodeBleu_score": 21.098587350384797}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\treturn MongockSpring5.builder()\n\t\t.setDriver(SpringDataMongoV3Driver.withDefaultLock(mongoTemplate))\n\t\t.addChangeLogsScanPackage(MIGRATION_PACKAGE)\n\t\t.setSpringContext(springContext)\n\t\t.buildApplicationRunner();\n}", "CodeBleu_score": 19.86799034965857}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\tReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\treactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\treturn reactiveMongoTemplate;\n}", "CodeBleu_score": 76.68946433531822}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\tReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\treactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\treturn reactiveMongoTemplate;\n}", "CodeBleu_score": 76.68946433531822}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\tReactiveMongoTemplate mongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\tmongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\treturn mongoTemplate;\n}", "CodeBleu_score": 96.37604361944668}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t\treturn Mono.defer(() -> {\n\t\treturn libraryQueryRepository.findById(libraryQueryId)\n\t\t\t.switchIfEmpty(deferredError(LIBRARY_QUERY_NOT_FOUND))\n\t\t\t.flatMap(libraryQuery -> {\n\t\t\t\treturn libraryQueryRecordRepository.findTopByLibraryQueryIdOrderByCreatedAtDesc(libraryQueryId)\n\t\t\t\t\t.switchIfEmpty(Mono.just(new LibraryQueryRecord(libraryQuery)))\n\t\t\t\t\t.flatMap(libraryQueryRecord -> {\n\t\t\t\t\t\treturn Mono.just(libraryQueryRecord.getDsl());\n\t\t\t\t\t});\n\t\t\t});\n\t});\n}", "CodeBleu_score": 45.16261090419819}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t\treturn Mono.defer(() -> {\n\t\tif (libraryQueryId == null) {\n\t\t\treturn deferredError(LIBRARY_QUERY_ID_NULL);\n\t\t}\n\t\treturn libraryQueryRepository.findById(libraryQueryId)\n\t\t\t.flatMap(libraryQuery -> {\n\t\t\t\treturn libraryQueryRecordRepository.findTopByLibraryQueryIdOrderByCreatedDateDesc(libraryQueryId)\n\t\t\t\t\t.switchIfEmpty(Mono.just(new LibraryQueryRecord(libraryQuery)))\n\t\t\t\t\t.flatMap(libraryQueryRecord -> {\n\t\t\t\t\t\treturn Mono.just(libraryQueryRecord.getDsl());\n\t\t\t\t\t});\n\t\t\t})\n\t\t\t.switchIfEmpty(Mono.error(LIBRARY_QUERY_NOT_FOUND.withId(libraryQueryId)));\n\t});\n}", "CodeBleu_score": 43.65959789123106}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t\treturn libraryQueryRepository.findById(libraryQueryId)\n\t\t.switchIfEmpty(deferredError(LIBRARY_QUERY_NOT_FOUND.withId(libraryQueryId)))\n\t\t.flatMap(libraryQuery -> {\n\t\t\treturn libraryQueryRecordRepository.findLatestByLibraryQueryId(libraryQueryId)\n\t\t\t\t.map(libraryQueryRecord -> libraryQueryRecord.getDsl())\n\t\t\t\t.switchIfEmpty(Mono.just(libraryQuery.getDsl()))\n\t\t\t\t.map(dsl -> {\n\t\t\t\t\tMap<String, Object> liveDSL = new HashMap<>();\n\t\t\t\t\tliveDSL.put(\"id\", libraryQueryId);\n\t\t\t\t\tliveDSL.put(\"dsl\", dsl);\n\t\t\t\t\treturn liveDSL;\n\t\t\t\t});\n\t\t});\n}", "CodeBleu_score": 45.75041561166216}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t\treturn Mono.defer(() -> {\n\t\tDuration timeout = QueryTimeoutUtils.parseQueryTimeout(timeoutStr);\n\t\treturn executeQuery(datasource, queryConfig, requestParams, timeout, queryVisitorContext);\n\t});\n}", "CodeBleu_score": 21.342998405105153}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t\treturn executeQuery(datasource, queryConfig, requestParams, timeoutStr, queryVisitorContext, null);\n}", "CodeBleu_score": 13.958301975678127}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t\n//        log.debug(\"executeQuery: datasource: {}, queryConfig: {}, requestParams: {}, timeoutStr: {}, queryVisitorContext: {}\", datasource, queryConfig, requestParams, timeoutStr, queryVisitorContext);\n\n        return DatasourceConnectionPool.getConnection(datasource)\n               .flatMap(connection -> {\n                    Duration timeout = QueryTimeoutUtils.getTimeout(timeoutStr);\n                    QueryExecutionContext context = new QueryExecutionContext(queryConfig, requestParams, queryVisitorContext);\n                    return executeQuery(datasource, connection, context, timeout);\n                })\n               .onErrorResume(e -> {\n                    if (e instanceof TimeoutException) {\n                        return Mono.error(ofException(QUERY_EXECUTION_TIMEOUT, e));\n                    } else if (e instanceof PluginException) {\n                        return Mono.just(QueryExecutionResult.error(e.getMessage()));\n                    } else {\n                        log.error(\"executeQuery: datasource: {}, queryConfig: {}, requestParams: {}, timeoutStr: {}, queryVisitorContext: {}\", datasource, queryConfig, requestParams, timeoutStr, queryVisitorContext, e);\n                        return Mono.error(ofException(QUERY_EXECUTION_ERROR, e));\n                    }\n                });\n    }", "CodeBleu_score": 45.94460604256394}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\tDatasourcePluginClient datasourcePluginClient = datasourceMetaInfoService.getDatasourcePluginClient(datasource);\n\tQueryExecutionContext queryExecutionContext = buildQueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n\treturn datasourceConnectionPool.getConnection(datasource)\n           .flatMap(connectionHolder -> {\n                try {\n                    return Mono.just(datasourcePluginClient.executeQuery(connectionHolder, queryExecutionContext));\n                } catch (Exception e) {\n                    return Mono.error(ofException(e));\n                }\n            })\n           .onErrorResume(e -> {\n                if (e instanceof BizException) {\n                    return Mono.error(e);\n                }\n                if (e instanceof TimeoutException) {\n                    return Mono.error(QUERY_EXECUTION_TIMEOUT.withMessage(e.getMessage()));\n                }\n                return Mono.error(QUERY_EXECUTION_ERROR.withMessage(e.getMessage()));\n            });\n}", "CodeBleu_score": 43.148775873876346}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\treturn Mono.fromCallable(() -> {\n\t\tDatasourcePluginClient datasourcePluginClient = datasourcePluginClientFactory.getDatasourcePluginClient(datasource);\n\t\tDatasourceMetaInfoService datasourceMetaInfoService = datasourceMetaInfoServiceFactory.getDatasourceMetaInfoService(datasource);\n\t\tQueryExecutionContext queryExecutionContext = QueryExecutionContext.builder()\n\t\t\t\t.datasource(datasource)\n\t\t\t\t.datasourcePluginClient(datasourcePluginClient)\n\t\t\t\t.datasourceMetaInfoService(datasourceMetaInfoService)\n\t\t\t\t.queryConfig(queryConfig)\n\t\t\t\t.requestParams(requestParams)\n\t\t\t\t.queryVisitorContext(queryVisitorContext)\n\t\t\t\t.build();\n\t\tDatasourceConnectionHolder datasourceConnectionHolder = datasourceConnectionPool.getConnection(datasource);\n\t\ttry {\n\t\t\treturn datasourcePluginClient.execute(datasourceConnectionHolder, queryExecutionContext);\n\t\t} catch (TimeoutException e) {\n\t\t\tthrow ofException(QUERY_EXECUTION_TIMEOUT, e);\n\t\t} catch (Exception e) {\n\t\t\tthrow ofException(QUERY_EXECUTION_ERROR, e);\n\t\t} finally {\n\t\t\tdatasourceConnectionPool.releaseConnection(datasource, datasourceConnectionHolder);\n\t\t}\n\t});\n}", "CodeBleu_score": 36.88278150015679}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\n// Get the appropriate query executor for the datasource type\nDatasourcePluginClient datasourcePluginClient = datasourceMetaInfoService.getDatasourcePluginClient(datasource.getType());\n\n// Build the query execution context\nQueryExecutionContext queryExecutionContext = new QueryExecutionContext();\nqueryExecutionContext.setQueryConfig(queryConfig);\nqueryExecutionContext.setQueryVisitorContext(queryVisitorContext);\nqueryExecutionContext.setRequestParams(requestParams);\n\n// Acquire a connection from the datasource connection pool\nDatasourceConnectionHolder datasourceConnectionHolder = datasourceConnectionPool.getConnection(datasource.getId());\n\n// Execute the query using the connection\nreturn datasourcePluginClient.executeQuery(datasourceConnectionHolder.getConnection(), queryExecutionContext)\n               .doOnSuccess(result -> {\n                    // Log the query execution result\n                    log.info(\"Query execution result: {}\", result);\n                })\n               .doOnError(throwable -> {\n                    // Log the error if it occurs during query execution\n                    log.error(\"Error occurred during query execution: {}\", throwable.getMessage());\n                })\n               .doFinally(signalType -> {\n                    // Release the connection back to the datasource connection pool\n                    datasourceConnectionPool.releaseConnection(datasource.getId());\n                })\n               .timeout(Duration.ofMillis(QueryTimeoutUtils.getQueryTimeout(datasource, queryConfig)),\n                        Mono.error(ofException(QUERY_EXECUTION_TIMEOUT)))\n               .onErrorMap(throwable -> {\n                    // Handle any errors that occur during query execution\n                    if (throwable instanceof TimeoutException) {\n                        return ofException(QUERY_EXECUTION_TIMEOUT);\n                    } else if (throwable instanceof PluginException) {\n                        return ofException(QUERY_EXECUTION_ERROR, throwable.getMessage());\n                    } else {\n                        return ofException(QUERY_EXECUTION_ERROR, throwable);\n                    }\n                });\n}", "CodeBleu_score": 38.268197799727}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t\tif (StringUtils.isBlank(timeoutStr)) {\n\t\treturn DEFAULT_QUERY_TIMEOUT_MS;\n\t}\n\tPair<Long, String> timeoutPair = parseTimeout(timeoutStr);\n\tlong timeoutMs = timeoutPair.getLeft();\n\tString unit = timeoutPair.getRight();\n\tif (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n\t\tthrow new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"timeoutStr\", timeoutStr, \"maxTimeoutMs\", MAX_QUERY_TIMEOUT_MS);\n\t}\n\tif (timeoutMs < 0) {\n\t\tthrow new PluginException(QUERY_ARGUMENT_ERROR, \"timeoutStr\", timeoutStr, \"reason\", \"negative timeout\");\n\t}\n\tif (StringUtils.isBlank(unit)) {\n\t\tthrow new PluginException(QUERY_ARGUMENT_ERROR, \"timeoutStr\", timeoutStr, \"reason\", \"no unit\");\n\t}\n\treturn (int) timeoutMs;\n}", "CodeBleu_score": 37.07998628138597}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t\t// Check if the timeout string is blank and use a default timeout if necessary\n\tif (StringUtils.isBlank(timeoutStr)) {\n\t\treturn DEFAULT_QUERY_TIMEOUT_MS;\n\t}\n\n\t// Extract the numeric value and unit from the string\n\tPair<Integer, String> valueAndUnit = extractNumericValueAndUnit(timeoutStr);\n\tint value = valueAndUnit.getLeft();\n\tString unit = valueAndUnit.getRight();\n\n\t// Convert the value to milliseconds\n\tint timeoutMs;\n\tswitch (unit) {\n\t\tcase \"s\":\n\t\t\ttimeoutMs = value * 1000;\n\t\t\tbreak;\n\t\tcase \"m\":\n\t\t\ttimeoutMs = value * 60 * 1000;\n\t\t\tbreak;\n\t\tcase \"h\":\n\t\t\ttimeoutMs = value * 60 * 60 * 1000;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid timeout unit: \" + unit);\n\t}\n\n\t// Ensure the timeout does not exceed the maximum allowed timeout\n\tif (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n\t\tthrow new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"Query timeout exceeds the maximum allowed limit: \" + MAX_QUERY_TIMEOUT_MS);\n\t}\n\n\treturn timeoutMs;\n}", "CodeBleu_score": 34.434090044517276}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t\tif (StringUtils.isBlank(timeoutStr)) {\n\t\treturn DEFAULT_QUERY_TIMEOUT_MS;\n\t}\n\n\tPair<String, String> timeoutPair = extractTimeoutValueAndUnit(timeoutStr);\n\tif (timeoutPair == null) {\n\t\tthrow new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout: \" + timeoutStr);\n\t}\n\n\tint timeoutValue = NumberUtils.toInt(timeoutPair.getLeft(), -1);\n\tif (timeoutValue <= 0) {\n\t\tthrow new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout: \" + timeoutStr);\n\t}\n\n\tint timeoutMs = convertTimeoutToMs(timeoutValue, timeoutPair.getRight());\n\tif (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n\t\tthrow new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"Query timeout exceeds maximum allowed value: \" + timeoutStr);\n\t}\n\n\treturn timeoutMs;\n}", "CodeBleu_score": 42.59421692492713}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t\treturn getLiveQueries(application)\n           .flatMap(queries -> {\n                if (queries.isEmpty()) {\n                    return deferredError(ofError(TEMPLATE_NOT_CORRECT, \"No queries found in the application\"));\n                }\n                return Mono.just(queries);\n            })\n           .flatMapMany(Flux::fromIterable)\n           .flatMap(query -> getDatasourceId(query))\n           .collectList()\n           .flatMap(datasourceIds -> {\n                if (datasourceIds.isEmpty()) {\n                    return deferredError(ofError(TEMPLATE_NOT_CORRECT, \"No datasources found in the application\"));\n                }\n                return Mono.just(datasourceIds);\n            })\n           .flatMapMany(Flux::fromIterable)\n           .flatMap(datasourceId -> copyDatasource(currentOrganizationId, datasourceId, visitorId))\n           .collectList();\n}", "CodeBleu_score": 36.044754370514895}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t\treturn Mono.defer(() -> {\n\t\tif (isNull(application)) {\n\t\t\treturn Mono.error(ofError(TEMPLATE_NOT_EXIST));\n\t\t}\n\t\treturn Mono.just(application);\n\t}).flatMapMany(applicationService::listApplicationQueries)\n\t\t\t.filter(applicationQuery -> applicationQuery.getApplicationId().equals(application.getId()))\n\t\t\t.map(ApplicationQuery::getQueryId).collectList()\n\t\t\t.flatMap(applicationQueryIds -> {\n\t\t\t\tif (applicationQueryIds.isEmpty()) {\n\t\t\t\t\treturn Mono.error(deferredError(TEMPLATE_NOT_CORRECT));\n\t\t\t\t}\n\t\t\t\treturn Mono.just(applicationQueryIds);\n\t\t\t}).flatMapMany(applicationQueryIds -> {\n\t\t\t\treturn Flux.fromIterable(applicationQueryIds)\n\t\t\t\t\t\t.flatMap(applicationQueryId -> applicationService.getApplicationQuery(applicationQueryId).map(applicationQuery -> {\n\t\t\t\t\t\t\treturn applicationQuery.getDatasourceId();\n\t\t\t\t\t\t}));\n\t\t\t}).collectList().flatMap(datasourceIds -> {\n\t\t\t\treturn Flux.fromIterable(datasourceIds).flatMap(datasourceId -> {\n\t\t\t\t\treturn datasourceService.getDatasource(datasourceId).map(datasource -> {\n\t\t\t\t\t\treturn datasource.getId();\n\t\t\t\t\t});\n\t\t\t\t}).collectList().flatMap(datasourceIds1 -> {\n\t\t\t\t\treturn Flux.fromIterable(datasourceIds1).flatMap(datasourceId -> {\n\t\t\t\t\t\treturn datasourceService.getDatasource(datasourceId).map(datasource -> {\n\t\t\t\t\t\t\treturn datasource.getId();\n\t\t\t\t\t\t});\n\t\t\t\t\t}).collectList().flatMap(datasourceIds2 -> {\n\t\t\t\t\t\treturn Flux.fromIterable(datasourceIds2).flatMap(datasourceId -> {\n\t\t\t\t\t\t\treturn datasourceService.getDatasource(datasourceId).map(datasource -> {\n\t\t\t\t\t\t\t\treturn datasource.getId();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}).collectList().flatMap(datasourceIds3 -> {\n\t\t\t\t\t\t\treturn Flux.fromIterable(datasourceIds3).flatMap(datasourceId -> {\n\t\t\t\t\t\t\t\treturn datasourceService.getDatasource(datasourceId).map(datasource -> {\n\t\t\t\t\t\t\t\t\treturn datasource.getId();\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}).collectList().flatMap(datasourceIds4 -> {\n\t\t\t\t\t\t\t\treturn Flux.fromIterable(datasourceIds4).flatMap(datasourceId -> {\n\t\t\t\t\t\t\t\t\treturn datasourceService.getDatasource(datasourceId).map(datasource -> {\n\t\t\t\t\t\t\t\t\t\treturn datasource.getId();\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}).collectList().flatMap(datasourceIds5 -> {\n\t\t\t\t\t\t\t\t\treturn Flux.fromIterable", "CodeBleu_score": 29.218989613234704}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t\treturn Mono.just(application) //\n\t\t\t.map(Application::getQueries) //\n\t\t\t.flatMap(queries -> {\n\t\t\t\tif (isNull(queries) || queries.isEmpty()) {\n\t\t\t\t\treturn deferredError(TEMPLATE_NOT_CORRECT);\n\t\t\t\t}\n\t\t\t\treturn Mono.just(queries);\n\t\t\t}) //\n\t\t\t.flatMapMany(Flux::fromIterable) //\n\t\t\t.map(ApplicationQuery::getDatasourceId) //\n\t\t\t.collectList() //\n\t\t\t.flatMap(datasourceIds -> {\n\t\t\t\tif (datasourceIds.isEmpty()) {\n\t\t\t\t\treturn deferredError(TEMPLATE_NOT_CORRECT);\n\t\t\t\t}\n\t\t\t\treturn Mono.just(datasourceIds);\n\t\t\t}) //\n\t\t\t.flatMapMany(Flux::fromIterable) //\n\t\t\t.flatMap(datasourceId -> {\n\t\t\t\treturn Mono.just(datasourceId) //\n\t\t\t\t\t\t.flatMap(id -> datasourceService.findById(id)) //\n\t\t\t\t\t\t.flatMap(datasource -> {\n\t\t\t\t\t\t\treturn datasourceService.copyDatasource(currentOrganizationId, datasource, visitorId);\n\t\t\t\t\t\t}) //\n\t\t\t\t\t\t.map(datasource -> {\n\t\t\t\t\t\t\treturn Pair.of(datasourceId, datasource.getId());\n\t\t\t\t\t\t});\n\t\t\t}) //\n\t\t\t.collectList();\n}", "CodeBleu_score": 32.66055558289519}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t\treturn getDatasource(datasourceId)\n\t\t.flatMap(datasource -> {\n\t\t\tif (DatasourceCreationSource.SYSTEM_STATIC == datasource.getCreationSource()) {\n\t\t\t\treturn Mono.just(datasource.getId());\n\t\t\t} else if (DatasourceCreationSource.LEGACY_QUICK_REST_API == datasource.getCreationSource()) {\n\t\t\t\treturn Mono.just(datasource.getLegacyQuickRestApiDatasourceId());\n\t\t\t} else if (DatasourceCreationSource.LEGACY_OPENBLOCKS_API == datasource.getCreationSource()) {\n\t\t\t\treturn Mono.just(datasource.getLegacyOpenblocksApiDatasourceId());\n\t\t\t} else {\n\t\t\t\treturn createDatasource(organizationId, datasource.getName(), datasource.getDescription(), datasource.getDatasourceType(), datasource.getDatasourceUrl(), datasource.getDatasourceUsername(), datasource.getDatasourcePassword(), datasource.getDatasourceQuery(), datasource.getDatasourceConnectionTimeout(), datasource.getDatasourceReadTimeout(), datasource.getDatasourceMaxTotal(), datasource.getDatasourceDefaultMaxPerRoute(), datasource.getDatasourceKeepAliveTime(), datasource.getDatasourceKeepAliveTimeUnit(), datasource.getDatasourceMaxIdleTime(), datasource.getDatasourceMaxIdleTimeUnit(), datasource.getDatasourceConnectionRequestTimeout(), datasource.getDatasourceSocketTimeout(), datasource.getDatasourceSocketTimeUnit(), datasource.getDatasourceMaxRetryAttempts(), datasource.getDatasourceRetryInterval(), datasource.getDatasourceRetryIntervalTimeUnit(), datasource.getDatasourceRetryOnStatusCodes(), datasource.getDatasourceRetryOnSocketTimeout(), datasource.getDatasourceRetryOnConnectionTimeout(), datasource.getDatasourceRetryOnReadTimeout(), datasource.getDatasourceRetryOnRequestTimeout(), datasource.getDatasourceRetryOnUnknownHost(), datasource.getDatasourceRetryOnUnreachableHost(), datasource.getDatasourceRetryOnSslHandshake(), datasource.getDatasourceRetryOnConnectException(), datasource.getDatasourceRetryOnSocketException(), datasource.getDatasourceRetryOnInterruptedIOException(), datasource.getDatasourceRetryOnUnknownException(), datasource.getDatasourceRetryOnMaxTries(), datasource.getDatasourceRetryOnNoResponse(), datasource.getDatasourceRetryOnServerError(), datasource.getDatasourceRetryOnServerErrorContent(), datasource.getDatasourceRetryOnServerErrorStatusCode(), datasource.getDatasourceRetryOnServerErrorReason(), datasource.getDatasourceRetryOnServerErrorReasonPhrase(), datasource.getDatasourceRetryOnClientError(), datasource.getDatasourceRetryOnClientErrorContent(), datasource.getDatasourceRetryOnClientErrorStatusCode(), datasource.getDatasourceRetryOnClientErrorReason(), datasource.getDatasourceRetryOnClientErrorReasonPhrase(),", "CodeBleu_score": 41.074817310826475}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t\treturn Mono.defer(() -> {\n\t\tif (isNull(datasourceId)) {\n\t\t\treturn Mono.empty();\n\t\t}\n\n\t\treturn Mono.zip(\n\t\t\tdatasourceService.findById(datasourceId),\n\t\t\ttemplateService.findTemplateByDatasourceId(datasourceId),\n\t\t\tTupleUtils::of\n\t\t).flatMap(tuple -> {\n\t\t\tDatasource datasource = tuple.getLeft();\n\t\t\tTemplate template = tuple.getRight();\n\t\t\tif (isNull(datasource)) {\n\t\t\t\treturn Mono.error(deferredError(DATASOURCE_NOT_EXIST));\n\t\t\t}\n\n\t\t\tif (DatasourceCreationSource.SYSTEM.equals(datasource.getCreationSource())) {\n\t\t\t\treturn Mono.just(datasourceId);\n\t\t\t}\n\n\t\t\tif (DatasourceCreationSource.LEGACY_QUICK_REST_API.equals(datasource.getCreationSource())) {\n\t\t\t\treturn Mono.just(datasource.getLegacyQuickRestDatasourceId());\n\t\t\t}\n\n\t\t\tif (DatasourceCreationSource.LEGACY_OPENBLOCKS_API.equals(datasource.getCreationSource())) {\n\t\t\t\treturn Mono.just(datasource.getLegacyOpenblocksApiDatasourceId());\n\t\t\t}\n\n\t\t\treturn Mono.zip(\n\t\t\t\tMono.just(datasource),\n\t\t\t\ttemplateService.findTemplateByDatasourceId(datasourceId),\n\t\t\t\tTupleUtils::of\n\t\t\t).flatMap(tuple2 -> {\n\t\t\t\tDatasource datasource = tuple2.getLeft();\n\t\t\t\tTemplate template = tuple2.getRight();\n\t\t\t\tif (isNull(template)) {\n\t\t\t\t\treturn Mono.error(deferredError(TEMPLATE_NOT_EXIST));\n\t\t\t\t}\n\n\t\t\t\tif (isNull(template.getTemplate())) {\n\t\t\t\t\treturn Mono.error(deferredError(TEMPLATE_NOT_CORRECT));\n\t\t\t\t}\n\n\t\t\t\treturn Mono.zip(\n\t\t\t\t\tMono.just(datasource),\n\t\t\t\t\tMono.just(template),\n\t\t\t\t\tMono.just(RandomStringUtils.randomAlphabetic(10)),\n\t\t\t\t\tTupleUtils::of\n\t\t\t\t).flatMap(tuple3 -> {\n\t\t\t\t\tDatasource datasource = tuple3.getLeft();\n\t\t\t\t\tTemplate template = tuple3.getRight();\n\t\t\t\t\tString random = tuple3.getRight();\n\t\t\t\t\treturn Mono.zip(\n\t\t\t\t\t\tMono.just(datasource),\n\t\t\t\t\t\tMono.just(template),\n\t\t\t\t\t\tMono.just(random),\n\t\t\t\t\t\tMono.just(visitorId),\n\t\t\t\t\t\tTupleUtils::of\n\t\t\t\t\t).flatMap(tuple4 ->", "CodeBleu_score": 40.89658451705751}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t\treturn Mono.zip(\n\t\tdatasourceService.findById(datasourceId),\n\t\tapplicationService.findByVisitorId(visitorId),\n\t\t(datasource, applications) -> {\n\t\t\tif (DatasourceCreationSource.SYSTEM_STATIC.equals(datasource.getCreationSource())) {\n\t\t\t\treturn datasource.getId();\n\t\t\t}\n\t\t\tif (DatasourceCreationSource.LEGACY_QUICK_REST_API.equals(datasource.getCreationSource())) {\n\t\t\t\treturn datasource.getLegacyQuickRestApiId();\n\t\t\t}\n\t\t\tif (DatasourceCreationSource.LEGACY_OPENBLOCKS_API.equals(datasource.getCreationSource())) {\n\t\t\t\treturn datasource.getLegacyOpenblocksApiId();\n\t\t\t}\n\t\t\treturn Pair.of(datasource, applications);\n\t\t}\n\t).flatMap(pair -> {\n\t\tDatasource datasource = pair.getLeft();\n\t\tList<Application> applications = pair.getRight();\n\t\treturn Mono.zip(\n\t\t\tMono.just(datasource),\n\t\t\tMono.just(applications),\n\t\t\tMono.just(organizationId),\n\t\t\tMono.just(visitorId),\n\t\t\tMono.just(datasource.getName() + \" - Copy\"),\n\t\t\tMono.just(datasource.getDescription() + \" - Copy\"),\n\t\t\tMono.just(datasource.getDatasourceType()),\n\t\t\tMono.just(datasource.getDatasourceConfig()),\n\t\t\tMono.just(datasource.getDatasourceConfigSchema()),\n\t\t\tMono.just(datasource.getDatasourceConfigUiSchema()),\n\t\t\tMono.just(datasource.getDatasourceConfigUiOptions()),\n\t\t\tMono.just(datasource.getDatasourceConfigUiData()),\n\t\t\tMono.just(datasource.getDatasourceConfigUiDataSchema()),\n\t\t\tMono.just(datasource.getDatasourceConfigUiDataUiSchema()),\n\t\t\tMono.just(datasource.getDatasourceConfigUiDataUiOptions()),\n\t\t\tMono.just(datasource.getDatasourceConfigUiDataUiData()),\n\t\t\tMono.just(datasource.getDatasourceConfigUiDataUiDataSchema()),\n\t\t\tMono.just(datasource.getDatasourceConfigUiDataUiDataUiSchema()),\n\t\t\tMono.just(datasource.getDatasourceConfigUiDataUiDataUiOptions()),\n\t\t\tMono.just(datasource.getDatasourceConfigUiDataUiDataUiData()),\n\t\t\tMono.just(datasource.getDatasourceConfigUiDataUiDataUiDataSchema()),\n\t\t\tMono.just(datasource.getDatasourceConfigUiDataUiData", "CodeBleu_score": 37.015303886667205}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t\treturn Mono.just(user).flatMap(u -> {\n\t\treturn assetService.saveAsset(filePart, user.getOrgId(), user.getId(), \"profile-photo\").flatMap(asset -> {\n\t\t\tif (Objects.nonNull(user.getProfilePhoto())) {\n\t\t\t\treturn assetService.deleteAsset(user.getOrgId(), user.getProfilePhoto()).flatMap(result -> {\n\t\t\t\t\treturn userRepository.updateUser(new PartialResourceWithId(user.getId(), new HashMap<String, Object>() {{\n\t\t\t\t\t\tput(\"profilePhoto\", asset.getId());\n\t\t\t\t\t}})).flatMap(result -> {\n\t\t\t\t\t\treturn Mono.just(true);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn userRepository.updateUser(new PartialResourceWithId(user.getId(), new HashMap<String, Object>() {{\n\t\t\t\t\tput(\"profilePhoto\", asset.getId());\n\t\t\t\t}})).flatMap(result -> {\n\t\t\t\t\treturn Mono.just(true);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t});\n}", "CodeBleu_score": 25.614115614131016}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t return Mono.just(user)\n.map(u -> {\n String fileName = filePart.filename();\n String fileExt = StringUtils.substringAfterLast(fileName, \".\");\n String newFileName = String.format(\"%s.%s\", RandomStringUtils.random(16, true, true), fileExt);\n return new PartialResourceWithId<>(user.getId(), new User().setAvatar(newFileName));\n })\n.flatMap(partialUser -> {\n return mongoUpsertHelper.upsert(partialUser, userRepository);\n })\n.flatMap(u -> {\n return assetService.uploadAsset(filePart, user.getId(), \"avatar\");\n })\n.flatMap(asset -> {\n return mongoUpsertHelper.upsert(new PartialResourceWithId<>(user.getId(), new User().setAvatar(asset.getId())), userRepository);\n })\n.flatMap(u -> {\n return Mono.just(true);\n })\n.onErrorResume(e -> {\n return Mono.just(false);\n });\n }", "CodeBleu_score": 38.71105257402276}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t\treturn Mono.just(filePart)\n\t\t.flatMap(part -> {\n\t\t\tString fileName = part.filename();\n\t\t\tif (StringUtils.isBlank(fileName)) {\n\t\t\t\tthrow BizException.of(BizError.INVALID_ARGUMENT, \"file name is empty\");\n\t\t\t}\n\t\t\treturn Mono.just(part)\n\t\t\t\t.flatMap(part -> {\n\t\t\t\t\tString fileExtension = StringUtils.substringAfterLast(fileName, \".\");\n\t\t\t\t\tif (StringUtils.isBlank(fileExtension)) {\n\t\t\t\t\t\tthrow BizException.of(BizError.INVALID_ARGUMENT, \"file extension is empty\");\n\t\t\t\t\t}\n\t\t\t\t\treturn Mono.just(part)\n\t\t\t\t\t\t.flatMap(part -> {\n\t\t\t\t\t\t\tString newFileName = user.getId() + \".\" + fileExtension;\n\t\t\t\t\t\t\treturn Mono.just(part)\n\t\t\t\t\t\t\t\t.flatMap(part -> {\n\t\t\t\t\t\t\t\t\treturn Mono.just(part)\n\t\t\t\t\t\t\t\t\t\t.flatMap(part -> {\n\t\t\t\t\t\t\t\t\t\t\treturn Mono.just(part)\n\t\t\t\t\t\t\t\t\t\t\t\t.flatMap(part -> {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn Mono.just(part)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t.flatMap(part -> {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Mono.just(part)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.flatMap(part -> {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Mono.just(part)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.flatMap(part -> {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Mono.just(part)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.flatMap(part -> {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Mono.just(part)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.flatMap(part -> {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Mono.just(part)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.flatMap(part -> {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Mono.just(part)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.flatMap(part -> {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Mono.just(part)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.flatMap(part -> {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Mono.just(part)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.flatMap(part -> {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Mono.just(part)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.flatMap(part -> {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Mono.just(part)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.flatMap(part -> {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Mono.just(part)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.flatMap(part -> {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Mono.just(part)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.flatMap(part -> {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Mono.just(part)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.flatMap(part -> {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Mono.just(part)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.flatMap(part -> {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Mono.just", "CodeBleu_score": 30.862516436965436}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t\treturn Mono.defer(() -> {\n\t\tUser user = new User();\n\t\tuser.setUsername(authUser.getUsername());\n\t\tuser.setAvatar(authUser.getAvatar());\n\t\tuser.setEmail(authUser.getEmail());\n\t\tuser.setMobile(authUser.getMobile());\n\t\tuser.setFirstName(authUser.getFirstName());\n\t\tuser.setLastName(authUser.getLastName());\n\t\tuser.setState(UserState.ACTIVE);\n\t\tuser.setEnabled(true);\n\t\tuser.setConnections(authUser.getConnections());\n\t\tuser.setNew(true);\n\t\treturn Mono.just(user);\n\t});\n}", "CodeBleu_score": 40.93504851110713}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t\treturn Mono.fromCallable(() -> {\n\t\tUser user = new User();\n\t\tuser.setUsername(authUser.getUsername());\n\t\tuser.setState(UserState.ACTIVE);\n\t\tuser.setEnabled(true);\n\t\tuser.setAvatarLink(authUser.getAvatarLink());\n\t\tuser.setAuthSource(authUser.getAuthSource());\n\t\tuser.setConnections(authUser.getConnections());\n\t\tuser.setNew(true);\n\t\tif (AuthSourceConstants.EMAIL.equals(authUser.getAuthSource())\n\t\t\t\t&& StringUtils.isNotBlank(authUser.getAuthContext().getPassword())) {\n\t\t\tuser.setPassword(encryptionService.encrypt(authUser.getAuthContext().getPassword()));\n\t\t}\n\t\treturn user;\n\t});\n}", "CodeBleu_score": 44.32420509072494}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t\treturn Mono.deferContextual(ctx -> {\n\t\tServerWebExchange exchange = ctx.get(ServerWebExchange.class);\n\t\tString ip = exchange.getAttribute(CLIENT_IP);\n\t\treturn Mono.just(authUser)\n\t\t\t\t.map(a -> a.getConnections().stream().filter(Objects::nonNull).collect(Collectors.toList()))\n\t\t\t\t.flatMap(connections -> {\n\t\t\t\t\tif (connections.isEmpty()) {\n\t\t\t\t\t\treturn Mono.error(ofError(BizError.USER_CONNECTION_NOT_FOUND));\n\t\t\t\t\t}\n\t\t\t\t\treturn Mono.just(connections);\n\t\t\t\t})\n\t\t\t\t.map(connections -> connections.stream().filter(Objects::nonNull).map(Connection::getAuthSource).collect(Collectors.toSet()))\n\t\t\t\t.flatMap(authSources -> {\n\t\t\t\t\tif (authSources.isEmpty()) {\n\t\t\t\t\t\treturn Mono.error(ofError(BizError.USER_AUTH_SOURCE_NOT_FOUND));\n\t\t\t\t\t}\n\t\t\t\t\treturn Mono.just(authSources);\n\t\t\t\t})\n\t\t\t\t.flatMap(authSources -> {\n\t\t\t\t\tif (authSources.size() > 1) {\n\t\t\t\t\t\treturn Mono.error(ofError(BizError.USER_AUTH_SOURCE_TOO_MANY));\n\t\t\t\t\t}\n\t\t\t\t\treturn Mono.just(authSources.iterator().next());\n\t\t\t\t})\n\t\t\t\t.flatMap(authSource -> {\n\t\t\t\t\tif (authSource.equals(AuthSourceConstants.EMAIL) && StringUtils.isBlank(authUser.getPassword())) {\n\t\t\t\t\t\treturn Mono.error(ofError(BizError.USER_PASSWORD_NOT_FOUND));\n\t\t\t\t\t}\n\t\t\t\t\treturn Mono.just(authSource);\n\t\t\t\t})\n\t\t\t\t.flatMap(authSource -> {\n\t\t\t\t\tif (authSource.equals(AuthSourceConstants.EMAIL) && StringUtils.isBlank(authUser.getEmail())) {\n\t\t\t\t\t\treturn Mono.error(ofError(BizError.USER_EMAIL_NOT_FOUND));\n\t\t\t\t\t}\n\t\t\t\t\treturn Mono.just(authSource);\n\t\t\t\t})\n\t\t\t\t.flatMap(authSource -> {\n\t\t\t\t\tif (authSource.equals(AuthSourceConstants.EMAIL) && StringUtils.isBlank(authUser.getName())) {\n\t\t\t\t\t\treturn Mono.error(ofError(BizError.USER_NAME_NOT_FOUND));\n\t\t\t\t\t}\n\t\t\t\t\treturn Mono.just(authSource);\n\t\t\t\t})\n\t\t\t\t.flatMap(authSource ->", "CodeBleu_score": 29.465811966521006}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\treturn Mono.just(user)\n\t\t.flatMap(u -> {\n\t\t\tif (StringUtils.isBlank(email)) {\n\t\t\t\treturn Mono.just(false);\n\t\t\t}\n\t\t\tConnection connection = Connection.builder()\n\t\t\t\t.source(AuthSourceConstants.EMAIL)\n\t\t\t\t.sourceId(email)\n\t\t\t\t.build();\n\t\t\tif (user.getConnections().contains(connection)) {\n\t\t\t\treturn Mono.just(false);\n\t\t\t}\n\t\t\tuser.getConnections().add(connection);\n\t\t\treturn userRepository.save(user)\n\t\t\t\t.map(u2 -> true);\n\t\t})\n\t\t.onErrorResume(e -> {\n\t\t\tif (e instanceof DuplicateKeyException) {\n\t\t\t\treturn Mono.just(false);\n\t\t\t}\n\t\t\treturn Mono.error(e);\n\t\t});\n}", "CodeBleu_score": 53.32352034383049}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\treturn Mono.fromCallable(() -> {\n\t\tConnection connection = new Connection(AuthSourceConstants.EMAIL, email);\n\t\tuser.getConnections().add(connection);\n\t\tuserRepository.save(user);\n\t\treturn true;\n\t}).onErrorResume(e -> {\n\t\tif (e instanceof DuplicateKeyException) {\n\t\t\treturn Mono.just(false);\n\t\t} else {\n\t\t\treturn Mono.error(e);\n\t\t}\n\t});\n}", "CodeBleu_score": 34.44256984363891}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\treturn Mono.just(user)\n\t\t.flatMap(u -> {\n\t\t\tif (u.getConnections().stream().anyMatch(c -> c.getSource().equals(AuthSourceConstants.EMAIL) && c.getId().equals(email))) {\n\t\t\t\treturn Mono.just(false);\n\t\t\t}\n\t\t\treturn Mono.just(u)\n\t\t\t\t.flatMap(u1 -> {\n\t\t\t\t\tConnection c = new Connection();\n\t\t\t\t\tc.setSource(AuthSourceConstants.EMAIL);\n\t\t\t\t\tc.setId(email);\n\t\t\t\t\tc.setVerified(true);\n\t\t\t\t\treturn Mono.just(u1)\n\t\t\t\t\t\t.map(u2 -> {\n\t\t\t\t\t\t\tu2.getConnections().add(c);\n\t\t\t\t\t\t\treturn u2;\n\t\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.flatMap(u1 -> userRepository.save(u1))\n\t\t\t\t.map(u1 -> true)\n\t\t\t\t.onErrorResume(e -> {\n\t\t\t\t\tif (e instanceof DuplicateKeyException) {\n\t\t\t\t\t\treturn Mono.just(false);\n\t\t\t\t\t}\n\t\t\t\t\treturn Mono.error(e);\n\t\t\t\t});\n\t\t});\n}", "CodeBleu_score": 41.78911951241426}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t\treturn Mono.just(userId).flatMap(id -> userRepository.findById(id))\n\t\t\t.switchIfEmpty(Mono.error(ofError(BizError.USER_NOT_EXIST)))\n\t\t\t.flatMap(user -> {\n\t\t\t\tif (!user.getState().equals(UserState.ACTIVE)) {\n\t\t\t\t\treturn Mono.error(ofError(BizError.USER_NOT_ACTIVE));\n\t\t\t\t}\n\t\t\t\treturn Mono.just(user);\n\t\t\t}).flatMap(user -> {\n\t\t\t\tif (!user.getAuthSource().equals(AuthSourceConstants.LOCAL)) {\n\t\t\t\t\treturn Mono.error(ofError(BizError.USER_NOT_LOCAL));\n\t\t\t\t}\n\t\t\t\treturn Mono.just(user);\n\t\t\t}).flatMap(user -> {\n\t\t\t\tif (!encryptionService.verify(oldPassword, user.getPassword())) {\n\t\t\t\t\treturn Mono.error(ofError(BizError.PASSWORD_INCORRECT));\n\t\t\t\t}\n\t\t\t\treturn Mono.just(user);\n\t\t\t}).flatMap(user -> {\n\t\t\t\treturn userRepository.updatePassword(user.getId(), encryptionService.encrypt(newPassword));\n\t\t\t}).map(result -> true);\n}", "CodeBleu_score": 34.574979099452435}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t\treturn Mono.just(userId)\n\t\t\t.flatMap(userRepository::findById)\n\t\t\t.flatMap(user -> {\n\t\t\t\tif (user.isAnonymous()) {\n\t\t\t\t\treturn Mono.error(ofError(BizError.USER_NOT_FOUND));\n\t\t\t\t}\n\t\t\t\treturn Mono.just(user);\n\t\t\t})\n\t\t\t.flatMap(user -> {\n\t\t\t\tif (user.isAnonymous()) {\n\t\t\t\t\treturn Mono.error(ofError(BizError.USER_NOT_FOUND));\n\t\t\t\t}\n\t\t\t\treturn Mono.just(user);\n\t\t\t})\n\t\t\t.flatMap(user -> {\n\t\t\t\tif (user.isAnonymous()) {\n\t\t\t\t\treturn Mono.error(ofError(BizError.USER_NOT_FOUND));\n\t\t\t\t}\n\t\t\t\treturn Mono.just(user);\n\t\t\t})\n\t\t\t.flatMap(user -> {\n\t\t\t\tif (user.isAnonymous()) {\n\t\t\t\t\treturn Mono.error(ofError(BizError.USER_NOT_FOUND));\n\t\t\t\t}\n\t\t\t\treturn Mono.just(user);\n\t\t\t})\n\t\t\t.flatMap(user -> {\n\t\t\t\tif (user.isAnonymous()) {\n\t\t\t\t\treturn Mono.error(ofError(BizError.USER_NOT_FOUND));\n\t\t\t\t}\n\t\t\t\treturn Mono.just(user);\n\t\t\t})\n\t\t\t.flatMap(user -> {\n\t\t\t\tif (user.isAnonymous()) {\n\t\t\t\t\treturn Mono.error(ofError(BizError.USER_NOT_FOUND));\n\t\t\t\t}\n\t\t\t\treturn Mono.just(user);\n\t\t\t})\n\t\t\t.flatMap(user -> {\n\t\t\t\tif (user.isAnonymous()) {\n\t\t\t\t\treturn Mono.error(ofError(BizError.USER_NOT_FOUND));\n\t\t\t\t}\n\t\t\t\treturn Mono.just(user);\n\t\t\t})\n\t\t\t.flatMap(user -> {\n\t\t\t\tif (user.isAnonymous()) {\n\t\t\t\t\treturn Mono.error(ofError(BizError.USER_NOT_FOUND));\n\t\t\t\t}\n\t\t\t\treturn Mono.just(user);\n\t\t\t})\n\t\t\t.flatMap(user -> {\n\t\t\t\tif (user.isAnonymous()) {\n\t\t\t\t\treturn Mono.error(ofError(BizError.USER_NOT_FOUND));\n\t\t\t\t}\n\t\t\t\treturn Mono.just(user);\n\t\t\t})\n\t\t\t.flatMap(user -> {\n\t\t\t\tif (user.isAnonymous()) {\n\t\t\t\t\treturn Mono.error(of", "CodeBleu_score": 29.59207019129878}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t\treturn Mono.just(userId)\n\t\t.flatMap(id -> userRepository.findById(id))\n\t\t.flatMap(user -> {\n\t\t\tif (!user.checkPassword(oldPassword)) {\n\t\t\t\treturn Mono.error(ofError(BizError.USER_INVALID_PASSWORD));\n\t\t\t}\n\t\t\tuser.setPassword();\n\t\t\treturn userRepository.save(user);\n\t\t})\n\t\t.map(user -> true);\n}", "CodeBleu_score": 18.46961540440945}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\treturn groupService.findGroupsByOrgMember(orgMember, withoutDynamicGroups)\n           .filter(group ->!group.isAllUsers())\n           .map(group -> {\n                Map<String, String> groupMap = newHashMap();\n                groupMap.put(FieldName.GROUP_ID, group.getId());\n                groupMap.put(FieldName.GROUP_NAME, group.getLocalizedName(locale));\n                return groupMap;\n            })\n           .collectList();\n}", "CodeBleu_score": 28.482409612913926}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t\treturn groupService.findGroupsByUserAndOrg(userId, orgMember.getOrgId(), withoutDynamicGroups)\n\t\t\t.filter(group ->!group.isAllUsers())\n\t\t\t.map(group -> {\n\t\t\t\tMap<String, String> groupMap = newHashMap();\n\t\t\t\tgroupMap.put(FieldName.ID, group.getId());\n\t\t\t\tgroupMap.put(FieldName.NAME, LocaleUtils.getLocalizedName(group, locale));\n\t\t\t\treturn groupMap;\n\t\t\t})\n\t\t\t.collectList();\n}", "CodeBleu_score": 22.685883936961066}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\treturn Mono.just(orgMember)\n       .filter(Objects::nonNull)\n       .flatMapMany(orgMemberService::findOrgMemberGroups)\n       .filter(group ->!group.isAllUsers())\n       .filter(group ->!withoutDynamicGroups ||!group.isDynamic())\n       .flatMap(group -> groupService.findGroupById(group.getGroupId())\n               .map(group1 -> {\n                    Map<String, String> map = newHashMap();\n                    map.put(FieldName.ID, group1.getId());\n                    map.put(FieldName.NAME, LocaleUtils.getLocalizedName(group1, locale));\n                    return map;\n                })\n               .collectList())\n       .defaultIfEmpty(emptyList());\n}", "CodeBleu_score": 32.04169189021967}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\treturn Mono.defer(() -> {\n\t\tUserStatus userStatus = new UserStatus(userId);\n\t\tuserStatus.setHasShowNewUserGuidance(true);\n\t\treturn userStatusRepository.findById(userId).flatMap(existingUserStatus -> {\n\t\t\tif (existingUserStatus.getStatus() == UserStatusType.ACTIVE) {\n\t\t\t\treturn mongoUpsertHelper.upsert(userStatusRepository, userStatus, new Update().set(\"hasShowNewUserGuidance\", true));\n\t\t\t} else {\n\t\t\t\treturn Mono.just(false);\n\t\t\t}\n\t\t}).switchIfEmpty(mongoUpsertHelper.insert(userStatusRepository, userStatus));\n\t});\n}", "CodeBleu_score": 34.42282333773088}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\treturn Mono.defer(() -> {\n\t\tUserStatus userStatus = new UserStatus(userId);\n\t\tuserStatus.setHasShowNewUserGuidance(true);\n\n\t\tUpdate update = new Update();\n\t\tupdate.set(\"hasShowNewUserGuidance\", true);\n\n\t\treturn userStatusRepository.save(userStatus)\n\t\t\t.then(mongoUpsertHelper.upsert(UserStatus.class, userId, update))\n\t\t\t.thenReturn(true);\n\t});\n}", "CodeBleu_score": 34.93159077394559}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\tUserStatus userStatus = new UserStatus(userId, UserStatusType.NEW_USER_GUIDANCE_SHOWN);\n\treturn mongoUpsertHelper.upsert(userStatusRepository, userStatus.getId(), new Update().set(\"hasShowNewUserGuidance\", true));\n}", "CodeBleu_score": 38.35243296584746}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\tvar wg sync.WaitGroup\n\trg := rungroup.Group{}\n\tfor k, p := range c.partitions {\n\t\tif predicatePartition(k, p) {\n\t\t\twg.Add(1)\n\t\t\trg.Go(func() error {\n\t\t\t\tdefer wg.Done()\n\t\t\t\tfor k, v := range p.m {\n\t\t\t\t\tif predicateValue(k, v) {\n\t\t\t\t\t\tp.m.Delete(k)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn nil\n\t\t\t})\n\t\t}\n\t}\n\tif err := rg.Wait(); err!= nil {\n\t\tpanic(err)\n\t}\n\twg.Wait()\n}", "CodeBleu_score": 43.99387139800171}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition must not be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue must not be nil\")\n\t}\n\tvar wg sync.WaitGroup\n\twg.Add(1)\n\tvar rg = rungroup.Group{}\n\trg.Go(func() error {\n\t\tdefer wg.Done()\n\t\treturn c.partitions.Range(func(k string, p PartitionManager) bool {\n\t\t\tif!predicatePartition(k, p) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tp.ClearMatching(predicateValue)\n\t\t\treturn true\n\t\t})\n\t})\n\twg.Wait()\n\tif err := rg.Wait(); err!= nil {\n\t\tpanic(err)\n\t}\n}", "CodeBleu_score": 46.711024121226565}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\n\tvar wg sync.WaitGroup\n\tvar rwg sync.RWMutex\n\tvar rg = rungroup.New(runtime.NumCPU())\n\tvar partitionManagers = c.partitionManagers\n\n\tfor _, pm := range partitionManagers {\n\t\tif!predicatePartition(pm.Name(), pm) {\n\t\t\tcontinue\n\t\t}\n\n\t\twg.Add(1)\n\n\t\trg.Go(func() error {\n\t\t\tdefer wg.Done()\n\n\t\t\tvar err error\n\t\t\tvar keys []string\n\n\t\t\tkeys, err = pm.Keys()\n\t\t\tif err!= nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\tfor _, k := range keys {\n\t\t\t\tif!predicateValue(k, nil) {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\trwg.Lock()\n\t\t\t\terr = pm.Delete(k)\n\t\t\t\trwg.Unlock()\n\t\t\t\tif err!= nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn nil\n\t\t})\n\t}\n\n\terr := rg.Wait()\n\tif err!= nil {\n\t\tpanic(err)\n\t}\n}", "CodeBleu_score": 46.32656094525728}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\treturn int(math.Ceil(avgWeightPerPartition))\n}", "CodeBleu_score": 39.03795052220836}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\taverageWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\treturn int(math.Ceil(averageWeightPerPartition))\n}", "CodeBleu_score": 38.98056590455043}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\taverageWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\treturn int(math.Ceil(averageWeightPerPartition))\n}", "CodeBleu_score": 38.98056590455043}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> map = new HashMap<>();\n\tConnectionMetadata metadata = connectionFactory.getMetadata();\n\tif (metadata!= null) {\n\t\tmap.put(\"database\", metadata.getDatabase());\n\t\tmap.put(\"version\", metadata.getVersion());\n\t}\n\treturn map;\n}", "CodeBleu_score": 40.46756528317855}, {"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> map = new HashMap<>();\n\tConnectionMetadata metadata = connection.getMetadata();\n\tif (metadata!= null) {\n\t\tmap.put(\"databaseProductName\", metadata.getDatabaseProductName());\n\t\tmap.put(\"databaseProductVersion\", metadata.getDatabaseProductVersion());\n\t}\n\treturn map;\n}", "CodeBleu_score": 42.22628697118487}, {"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> map = new HashMap<>();\n\tConnection connection = connectionFactory.create().block();\n\tConnectionMetadata metadata = connection.getMetadata();\n\tif (metadata!= null) {\n\t\tmap.put(\"databaseProductName\", metadata.getDatabaseProductName());\n\t\tmap.put(\"databaseProductVersion\", metadata.getDatabaseProductVersion());\n\t}\n\treturn map;\n}", "CodeBleu_score": 46.71271501275795}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tUser userSetting = configMap.getUser();\n\tif (userSetting == null) {\n\t\tinfo.setRegistrationDisabled(true);\n\t\tinfo.setEmailVerificationDisabled(true);\n\t} else {\n\t\tinfo.setRegistrationDisabled(isFalse(userSetting.getRegistration()));\n\t\tinfo.setEmailVerificationDisabled(isFalse(userSetting.getEmailVerification()));\n\t}\n}", "CodeBleu_score": 35.37138775855463}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tUser user = configMap.getOrDefault(SystemSetting.USER_SETTING_KEY, new User());\n\tinfo.setAllowRegistration(isTrue(user.getAllowRegistration()));\n\tinfo.setAllowEmailVerification(isTrue(user.getAllowEmailVerification()));\n}", "CodeBleu_score": 30.807535581859753}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tif (configMap == null) {\n\t\tinfo.setRegistrationEnabled(false);\n\t\tinfo.setEmailVerificationEnabled(false);\n\t} else {\n\t\tinfo.setRegistrationEnabled(configMap.getRegistrationEnabled());\n\t\tinfo.setEmailVerificationEnabled(configMap.getEmailVerificationEnabled());\n\t}\n}", "CodeBleu_score": 28.206070857261395}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\t\tThread thread = new Thread(new Runnable() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tThread.currentThread().setContextClassLoader(Application.class.getClassLoader());\n\t\t\t\tSpringApplication.run(Application.class, new String[0]);\n\t\t\t} catch (Exception e) {\n\t\t\t\tlog.error(\"Restart application failed\", e);\n\t\t\t}\n\t\t}\n\t});\n\tthread.setDaemon(false);\n\tthread.start();\n\treturn \"Restart application has begun\";\n}", "CodeBleu_score": 42.30990574541909}, {"code": "public Object restart(){\n\t\tThread thread = new Thread(() -> {\n\t\tThread.currentThread().setContextClassLoader(Application.class.getClassLoader());\n\t\tThread.currentThread().setDaemon(false);\n\t\tSpringApplication.exit(Application.applicationContext, () -> 0);\n\t\tSpringApplication application = new SpringApplication(Application.class);\n\t\tapplication.setWebApplicationType(WebApplicationType.NONE);\n\t\tapplication.setBannerMode(Banner.Mode.OFF);\n\t\tapplication.setLogStartupInfo(false);\n\t\tConfigurableApplicationContext context = application.run(Application.args);\n\t\tcontext.publishEvent(new ApplicationStartedEvent(application, Application.args, null));\n\t});\n\tthread.start();\n\treturn \"Restarting...\";\n}", "CodeBleu_score": 39.52661691309195}, {"code": "public Object restart(){\n\t\tThreadGroup threadGroup = new ThreadGroup(\"restart\");\n\tThread thread = new Thread(threadGroup, () -> {\n\t\tThread.currentThread().setContextClassLoader(Application.class.getClassLoader());\n\t\tSpringApplicationBuilder builder = new SpringApplicationBuilder(Application.class);\n\t\tbuilder.bannerMode(Banner.Mode.OFF);\n\t\tbuilder.web(WebApplicationType.NONE);\n\t\tbuilder.run(args);\n\t});\n\tthread.setDaemon(false);\n\tthread.start();\n\treturn \"Restarting application...\";\n}", "CodeBleu_score": 51.89129029706405}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t ObjectMapper objectMapper = configurer.getObjectMapper();\n objectMapper.registerModule(new JavaTimeModule());\n objectMapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper, MediaType.APPLICATION_JSON));\n configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper, MediaType.APPLICATION_JSON));\n }", "CodeBleu_score": 34.689357397910584}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t ObjectMapper objectMapper = new ObjectMapper();\n configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper, MediaType.APPLICATION_JSON));\n configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper, MediaType.APPLICATION_JSON));\n }", "CodeBleu_score": 34.800349962176824}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper, MediaType.APPLICATION_JSON));\n configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper, MediaType.APPLICATION_JSON));\n }", "CodeBleu_score": 53.51964281055859}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t\treturn route(method(HttpMethod.GET).and(path(\"/console/**\").and(\n\t\t\taccept(MediaType.TEXT_HTML)).and(\n\t\t\tnew WebSocketRequestPredicate().negate())),\n\t\t\trequest -> {\n\t\t\t\tString path = request.path().substring(1);\n\t\t\t\tif (path.startsWith(\"console/assets/\")) {\n\t\t\t\t\treturn ServerResponse.notFound().build();\n\t\t\t\t}\n\t\t\t\treturn ServerResponse.ok().cacheControl(CacheControl.maxAge(1, TimeUnit.DAYS))\n\t\t\t\t\t\t.contentType(MediaType.TEXT_HTML)\n\t\t\t\t\t\t.body(BodyInserters.fromResource(\n\t\t\t\t\t\t\t\tnew EncodedResource(new ClassPathResource(path, ConsoleAutoConfiguration.class),\n\t\t\t\t\t\t\t\t\t\t\"UTF-8\")));\n\t\t\t});\n}", "CodeBleu_score": 31.650518215250734}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t\treturn route(\n\t\tmethod(HttpMethod.GET).and(path(\"/console/**\")).and(\n\t\t\taccept(MediaType.TEXT_HTML)).and(\n\t\t\t\tnew WebSocketRequestPredicate()),\n\t\trequest -> {\n\t\t\tString path = request.path().substring(\"/console/\".length());\n\t\t\tif (path.equals(\"\")) {\n\t\t\t\tpath = \"index.html\";\n\t\t\t}\n\t\t\tif (path.startsWith(\"assets/\")) {\n\t\t\t\treturn ServerResponse.notFound().build();\n\t\t\t}\n\t\t\treturn ServerResponse.ok().cacheControl(CacheControl.noCache())\n\t\t\t\t.body(BodyInserters.fromResource(\n\t\t\t\t\tnew EncodedResourceResolver(\n\t\t\t\t\t\tnew PathResourceResolver(\n\t\t\t\t\t\t\tnew ResourceHandlerRegistration(\n\t\t\t\t\t\t\t\tnew ResourceHandlerProperties(),\n\t\t\t\t\t\t\t\tnew WebProperties.Resources(),\n\t\t\t\t\t\t\t\tnew ApplicationContext() {\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic String getId() {\n\t\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic String getApplicationName() {\n\t\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic String getDisplayName() {\n\t\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic long getStartupDate() {\n\t\t\t\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic ApplicationContext getParent() {\n\t\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic AutowireCapableBeanFactory getAutowireCapableBeanFactory() {\n\t\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic void setEnvironment(Environment environment) {\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic Environment getEnvironment() {\n\t\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic void setParent(ApplicationContext applicationContext) {\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic void setClassLoader(ClassLoader classLoader) {\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic ClassLoader getClassLoader() {\n\t\t\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic boolean containsLocalBean(String name) {\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic boolean containsBeanDefinition(String beanName) {\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic int getBeanDefinitionCount() {\n\t\t\t\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\tpublic String[] getBeanDefinitionNames() {\n\t\t\t\t\t\t\t\t\t\treturn new String[0];\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\t\t", "CodeBleu_score": 31.86185634169346}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t\treturn route(path(\"/console/**\")\n\t\t\t.and(method(HttpMethod.GET))\n\t\t\t.and(accept(MediaType.TEXT_HTML))\n\t\t\t.and(WebSocketRequestPredicate.INSTANCE.negate()),\n\t\trequest -> {\n\t\t\tString path = request.uri().getPath();\n\t\t\tif (path.contains(\"/console/assets/\")) {\n\t\t\t\treturn ServerResponse.notFound().build();\n\t\t\t}\n\t\t\treturn ServerResponse.ok()\n\t\t\t\t\t.cacheControl(CacheControl.noStore())\n\t\t\t\t\t.render(\"console/index\", model -> model.addAttribute(\"contextPath\", request.uri().getPath().replace(\"/console\", \"\")));\n\t\t}\n\t);\n}", "CodeBleu_score": 29.978057946718177}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t\treturn route(\n\t\tpath(\"/uc/**\")\n\t\t\t.and(\n\t\t\t\taccept(MediaType.TEXT_HTML)\n\t\t\t)\n\t\t\t.and(\n\t\t\t\tmethod(HttpMethod.GET)\n\t\t\t)\n\t\t\t.and(\n\t\t\t\tnew WebSocketRequestPredicate()\n\t\t\t)\n\t\t\t.and(\n\t\t\t\tpath(\"/uc/assets/**\")\n\t\t\t\t\t.negate()\n\t\t\t),\n\t\tserverRequest -> {\n\t\t\tString path = serverRequest.path().substring(3);\n\t\t\tif (StringUtils.isEmpty(path) || \"/\".equals(path)) {\n\t\t\t\tpath = \"/index.html\";\n\t\t\t}\n\t\t\treturn ServerResponse.ok()\n\t\t\t\t.cacheControl(CacheControl.noCache())\n\t\t\t\t.body(BodyInserters.fromResource(new EncodedResource(\n\t\t\t\t\tnew PathResource(Objects.requireNonNull(ResourceUtils.getURL(FILE_URL_PREFIX + haloProperties.getUc().getIndex()))),\n\t\t\t\t\tStandardCharsets.UTF_8\n\t\t\t\t), MediaType.TEXT_HTML));\n\t\t}\n\t);\n}", "CodeBleu_score": 31.274082453880226}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t\treturn route(\n\t\tmethod(HttpMethod.GET).and(path(\"/uc/**\")).and(\n\t\t\taccept(MediaType.TEXT_HTML)).and(\n\t\t\t\tWebSocketRequestPredicate.INSTANCE.negate()),\n\t\tserverRequest -> {\n\t\t\tString path = serverRequest.path().value();\n\t\t\tif (!path.endsWith(\"/\")) {\n\t\t\t\treturn ServerResponse.temporaryRedirect(\n\t\t\t\t\tserverRequest.uri().resolve(path + \"/\")).build();\n\t\t\t}\n\t\t\tif (path.endsWith(\"/assets/\")) {\n\t\t\t\treturn ServerResponse.notFound().build();\n\t\t\t}\n\t\t\tif (path.endsWith(\"/index.html\")) {\n\t\t\t\treturn ServerResponse.notFound().build();\n\t\t\t}\n\t\t\treturn ServerResponse.temporaryRedirect(\n\t\t\t\tserverRequest.uri().resolve(\"/uc/index.html\")).build();\n\t\t});\n}", "CodeBleu_score": 31.370745842599835}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t\treturn route(method(HttpMethod.GET).and(path(\"/uc/**\").and(accept(MediaType.TEXT_HTML)).and(WebSocketRequestPredicate.INSTANCE.negate())),\n\t\tserverRequest -> {\n\t\t\tString path = serverRequest.path().substring(4);\n\t\t\tif (path.startsWith(\"assets/\")) {\n\t\t\t\treturn ServerResponse.notFound().build();\n\t\t\t}\n\t\t\tif (path.equals(\"/\")) {\n\t\t\t\tpath = \"/index.html\";\n\t\t\t}\n\t\t\treturn ServerResponse.ok().cacheControl(CacheControl.noStore()).body(BodyInserters.fromResource(new EncodedResourceResolver(new PathResourceResolver(new File(haloProperties.getUc().getLocation()), \"UTF-8\")).resolveResource(path, null)));\n\t\t});\n}", "CodeBleu_score": 29.65605797271361}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\treturn new InMemoryReactiveIndexedSessionRepository<>(new ConcurrentHashMap<>(),\n\t\tsessionProperties.getSession().getTimeout().getSeconds());\n}", "CodeBleu_score": 15.817138399157749}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\treturn new InMemoryReactiveIndexedSessionRepository<>(new ConcurrentHashMap<>(), sessionProperties.getTimeout().toMillis());\n}", "CodeBleu_score": 13.785297325076906}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\treturn new InMemoryReactiveIndexedSessionRepository<>(new ConcurrentHashMap<>(),\n\t\t\tsessionProperties.getSession().getTimeout().getSeconds());\n}", "CodeBleu_score": 15.864146742221624}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\tDefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService);\n\tuserDetailsService.setTwoFactorEnabled(haloProperties.getSecurity().getTwoFactor().isEnabled());\n\treturn userDetailsService;\n}", "CodeBleu_score": 47.085142752220385}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\tDefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService);\n\tuserDetailsService.setTwoFactorEnabled(haloProperties.getSecurity().isTwoFactor());\n\treturn userDetailsService;\n}", "CodeBleu_score": 44.89879526978908}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\tDefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService);\n\tuserDetailsService.setTwoFactorEnabled(haloProperties.getSecurity().getTwoFactor().isEnabled());\n\treturn userDetailsService;\n}", "CodeBleu_score": 47.085142752220385}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\t\tAssert.notNull(this, \"Cannot convert null to CommentOwner\");\n\tMap<String, Object> annotations = new LinkedHashMap<>();\n\tif (StringUtils.isNotBlank(avatar)) {\n\t\tannotations.put(\"avatar\", avatar);\n\t}\n\tif (StringUtils.isNotBlank(website)) {\n\t\tannotations.put(\"website\", website);\n\t}\n\treturn new Comment.CommentOwner(\"email\", email, displayName, annotations);\n}", "CodeBleu_score": 35.063012127994995}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t\tAssert.notNull(this, \"The comment owner cannot be null\");\n\tMap<String, Object> annotations = new LinkedHashMap<>();\n\tif (StringUtils.isNotBlank(avatar)) {\n\t\tannotations.put(\"avatar\", avatar);\n\t}\n\tif (StringUtils.isNotBlank(website)) {\n\t\tannotations.put(\"website\", website);\n\t}\n\treturn Comment.CommentOwner.builder()\n\t\t.kind(\"email\")\n\t\t.email(email)\n\t\t.displayName(displayName)\n\t\t.annotations(annotations)\n\t\t.build();\n}", "CodeBleu_score": 36.39090561259463}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t\tAssert.notNull(this, \"The comment owner must not be null.\");\n\tMap<String, Object> annotations = new LinkedHashMap<>();\n\tannotations.put(\"avatar\", StringUtils.defaultString(avatar, \"\"));\n\tannotations.put(\"website\", StringUtils.defaultString(website, \"\"));\n\treturn new Comment.CommentOwner(\"email\", email, displayName, annotations);\n}", "CodeBleu_score": 32.76280083716098}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (commentOwner.getKind() == \"email\") {\n\t\tUser user = userRepository.findByEmail(commentOwner.getName());\n\t\treturn user!= null && user.getId() == post.getOwnerId();\n\t}\n\treturn commentOwner.getName().equals(post.getOwnerName());\n}", "CodeBleu_score": 27.52875589555293}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (StringUtils.equalsIgnoreCase(commentOwner.getKind(), \"email\")) {\n\t\tUser user = ExtensionGetter.getUserExtension().getUserByEmail(commentOwner.getName());\n\t\treturn user!= null && post.getOwner().equals(user.getIdentity());\n\t}\n\treturn post.getOwner().equals(commentOwner.getName());\n}", "CodeBleu_score": 33.51557792375116}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (commentOwner.getKind().equals(User.KIND)) {\n\t\tUser user = extensionClient.get(new Ref<>(User.KIND, commentOwner.getName()));\n\t\tif (user == null) {\n\t\t\treturn false;\n\t\t}\n\t\treturn user.getEmail().equals(post.getOwner());\n\t} else {\n\t\treturn commentOwner.getName().equals(post.getOwner());\n\t}\n}", "CodeBleu_score": 36.281815558547784}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\t\treturn (IListRequest request, ServerWebExchange exchange) -> {\n\t\tvar labelSelectors = request.getLabelSelectors();\n\t\tvar fieldSelectors = request.getFieldSelectors();\n\t\tvar keyword = request.getKeyword();\n\t\tvar owner = request.getOwner();\n\t\tvar sort = request.getSort();\n\t\tvar page = request.getPage();\n\t\tvar size = request.getSize();\n\n\t\tvar fieldSelector = labelAndFieldSelectorToListOptions(labelSelectors, fieldSelectors);\n\n\t\tvar fieldQuery = fieldSelector.getFieldQuery();\n\t\tif (StringUtils.isNotBlank(keyword)) {\n\t\t\tfieldQuery = and(fieldQuery, contains(Comment.Fields.CONTENT, keyword));\n\t\t}\n\t\tif (StringUtils.isNotBlank(owner)) {\n\t\t\tfieldQuery = and(fieldQuery, equal(Comment.Fields.OWNER, owner));\n\t\t}\n\n\t\treturn new PageRequestImpl(fieldQuery, SortResolver.resolve(sort, Sort.by(Sort.Direction.DESC, Comment.Fields.CREATE_TIME)), page, size);\n\t};\n}", "CodeBleu_score": 41.24097027710408}, {"code": "public ListOptions toListOptions(){\n\t\treturn (ServerRequest request) -> {\n\t\tListOptions options = new ListOptions();\n\t\tString keyword = request.queryParam(\"keyword\").orElse(\"\");\n\t\tString owner = request.queryParam(\"owner\").orElse(\"\");\n\t\tString sort = request.queryParam(\"sort\").orElse(\"\");\n\t\tString order = request.queryParam(\"order\").orElse(\"desc\");\n\n\t\t// \u89e3\u6790\u67e5\u8be2\u53c2\u6570\n\t\tFieldSelector fieldSelector = labelAndFieldSelectorToListOptions(request);\n\n\t\t// \u89e3\u6790\u6392\u5e8f\u53c2\u6570\n\t\tSort sortObj = SortResolver.resolve(sort, order);\n\n\t\t// \u89e3\u6790\u5206\u9875\u53c2\u6570\n\t\tPageRequest pageRequest = PageRequestImpl.of(request);\n\n\t\t// \u6784\u5efa\u67e5\u8be2\u6761\u4ef6\n\t\tQuery fieldQuery = fieldSelector.buildQuery();\n\n\t\t// \u6dfb\u52a0\u5173\u952e\u8bcd\u67e5\u8be2\u6761\u4ef6\n\t\tif (StringUtils.isNotBlank(keyword)) {\n\t\t\tfieldQuery = and(fieldQuery, contains(\"content\", keyword));\n\t\t}\n\n\t\t// \u6dfb\u52a0\u4f5c\u8005\u67e5\u8be2\u6761\u4ef6\n\t\tif (StringUtils.isNotBlank(owner)) {\n\t\t\tfieldQuery = and(fieldQuery, equal(\"owner.name\", owner));\n\t\t}\n\n\t\t// \u6dfb\u52a0\u6392\u5e8f\u6761\u4ef6\n\t\tif (sortObj!= null) {\n\t\t\toptions.setSort(sortObj);\n\t\t}\n\n\t\t// \u6dfb\u52a0\u5206\u9875\u6761\u4ef6\n\t\tif (pageRequest!= null) {\n\t\t\toptions.setPageRequest(pageRequest);\n\t\t}\n\n\t\t// \u6dfb\u52a0\u67e5\u8be2\u6761\u4ef6\n\t\tif (fieldQuery!= null) {\n\t\t\toptions.setFieldQuery(fieldQuery);\n\t\t}\n\n\t\treturn options;\n\t};\n}", "CodeBleu_score": 42.6553183861176}, {"code": "public ListOptions toListOptions(){\n\t\treturn (request, exchange, user) -> {\n\t\tListOptions options = new ListOptions();\n\t\tString keyword = request.queryParam(\"keyword\").orElse(null);\n\t\tString ownerName = request.queryParam(\"ownerName\").orElse(null);\n\t\tString sort = request.queryParam(\"sort\").orElse(null);\n\t\tString order = request.queryParam(\"order\").orElse(null);\n\t\tFieldSelector fieldSelector = labelAndFieldSelectorToListOptions(request);\n\t\tfieldSelector.addCondition(and(equal(\"status\", Comment.Status.PUBLISHED.name())));\n\t\tif (StringUtils.isNotBlank(keyword)) {\n\t\t\tfieldSelector.addCondition(and(contains(\"content\", keyword)));\n\t\t}\n\t\tif (StringUtils.isNotBlank(ownerName)) {\n\t\t\tfieldSelector.addCondition(and(equal(\"ownerName\", ownerName)));\n\t\t}\n\t\tif (StringUtils.isNotBlank(sort)) {\n\t\t\tfieldSelector.setSort(SortResolver.resolve(sort, order));\n\t\t}\n\t\toptions.setFieldSelector(fieldSelector);\n\t\treturn options;\n\t};\n}", "CodeBleu_score": 32.82679264796482}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\tAssert.notNull(commentName, \"commentName must not be null\");\n\treturn Mono.defer(() -> {\n\t\treturn counterService.get(commentName)\n\t\t\t.map(counter -> new CommentStats(counter.getUpvoteCount()));\n\t})\n\t\t.switchIfEmpty(Mono.just(new CommentStats()));\n}", "CodeBleu_score": 44.7945453005988}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\tAssert.notNull(commentName, \"commentName must not be null\");\n\treturn Mono.fromCallable(() -> counterService.getCounter(commentName))\n\t\t.map(counter -> new CommentStats(counter.getUpvoteCount(), counter.getDownvoteCount()));\n}", "CodeBleu_score": 25.149688757718096}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\tAssert.notNull(commentName, \"commentName must not be null\");\n\treturn counterService.getCounter(commentName)\n\t\t.map(counter -> new CommentStats(counter.getUpvoteCount(), counter.getDownvoteCount()))\n\t\t.switchIfEmpty(Mono.just(new CommentStats()));\n}", "CodeBleu_score": 43.35633705832337}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\t\tSubscription.Subscriber subscriber = Subscription.Subscriber.from(identity);\n\tSubscription.InterestReason reason = Subscription.InterestReason.of(NotificationReasonConst.SOMEONE_REPLIED_TO_YOU, Reply::getRepliedOwner, StringUtils::equalsIgnoreCase, identity.getName());\n\tSubscription subscription = Subscription.of(NotificationCenter.REPLY_TOPIC, subscriber, reason);\n\tnotificationCenter.subscribe(subscription);\n}", "CodeBleu_score": 37.43044774332661}, {"code": "void subscribeReply(UserIdentity identity){\n\t\tSubscription subscription = Subscription.builder()\n\t\t.subscriber(identity)\n\t\t.reason(new Subscription.Reason(NotificationReasonConst.REPLY, \"repliedOwner\", identity.getName()))\n\t\t.build();\n\tnotificationCenter.subscribe(subscription);\n}", "CodeBleu_score": 35.686870230584056}, {"code": "void subscribeReply(UserIdentity identity){\n\t\tSubscription.Subscriber subscriber = Subscription.Subscriber.from(identity);\n\tif (subscriber.isPresent()) {\n\t\tSubscription.InterestReason reason = Subscription.InterestReason.builder()\n\t\t\t\t.reasonType(NotificationReasonConst.REPLY)\n\t\t\t\t.condition(reply -> StringUtils.equals(reply.getRepliedOwner(), identity.getName()))\n\t\t\t\t.build();\n\t\tNotificationCenter.subscribe(subscriber.get(), reason);\n\t}\n}", "CodeBleu_score": 38.22083231108541}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\t\treturn updateComment(comment, comment1 -> {\n\t\tcomment1.setApproved(true);\n\t\tcomment1.setApprovedAt(Instant.now());\n\t\treturn comment1;\n\t});\n}", "CodeBleu_score": 16.99466502080217}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t\treturn client.updateComment(comment.getId(), comment.getApproved(), comment.getApprovedAt())\n\t\t.retryWhen(Retry.backoff(3, Duration.ofSeconds(1))\n\t\t\t.filter(OptimisticLockingFailureException.class::isInstance)\n\t\t\t.onRetryExhaustedThrow(OptimisticLockingFailureException::new))\n\t\t.map(c -> {\n\t\t\tcomment.setApproved(c.getApproved());\n\t\t\tcomment.setApprovedAt(c.getApprovedAt());\n\t\t\treturn comment;\n\t\t});\n}", "CodeBleu_score": 27.25009489221811}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t\treturn ReactiveExtensionClient.get().updateComment(comment.getId(),\n\t\tcomment.withApproved(true).withApprovedTime(Instant.now()))\n\t\t.onErrorResume(OptimisticLockingFailureException.class,\n\t\t\te -> approveComment(comment.withVersion(comment.getVersion() + 1)));\n}", "CodeBleu_score": 24.120502127086116}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction) {\n$action->associateWithLivewireComponent($this);\n}\n\nif ($action instanceof HasRecord) {\n$action->setRecord($this->getRecord());\n}\n\nreturn $action;\n}", "CodeBleu_score": 54.24913176021593}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\tif ($action instanceof MountableAction) {\n\t\t$action->livewire($this);\n\t}\n\n\tif ($action instanceof HasRecord) {\n\t\t$action->record($this->getRecord());\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 56.108584083339984}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction) {\n$action->livewire($this);\n}\n\nif ($action instanceof HasRecord && $this instanceof HasRecord) {\n$action->record($this->getRecord());\n}\n\nreturn $action;\n}", "CodeBleu_score": 58.83357127806613}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t\t$url = $this->getSuccessRedirectUrl();\n\n\tif ($url) {\n\t\tif (is_app_url($url)) {\n\t\t\t$url = $this->getSuccessRedirectUrl();\n\t\t}\n\n\t\tif ($url instanceof Closure) {\n\t\t\t$url = $url();\n\t\t}\n\n\t\tif ($url) {\n\t\t\treturn $this->redirect($url);\n\t\t}\n\t}\n\n\treturn $this;\n}", "CodeBleu_score": 49.233538094915374}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\tif ($this->getSuccessRedirectUrl()) {\n$this->dispatchRedirect($this->getSuccessRedirectUrl());\n}\n\nreturn $this;\n}", "CodeBleu_score": 27.28899630968582}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\tif (filled($this->successRedirectUrl)) {\nif (is_app_url($this->successRedirectUrl)) {\n$this->redirect($this->successRedirectUrl);\n} else {\n$this->redirect(fn () => FilamentView::make($this->successRedirectUrl));\n}\n}\n\nreturn $this; }", "CodeBleu_score": 28.2507722110402}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tif (! $record ||! method_exists($record, 'tags')) {\nreturn;\n}\n\n$tagModelClass = $record->tags()->getRelated()->getMorphClass();\n\n$tagNames = array_map(fn (string $name) => trim($name), $state['tags']);\n\n$tags = collect($tagNames)\n->filter(fn (string $name) => $name!== '')\n->map(fn (string $name) => $tagModelClass::findOrCreate($name, $state['type']))\n->pluck('id')\n->toArray();\n\n$record->tags()->sync($tags);\n}", "CodeBleu_score": 38.02542755169799}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tif (!$record ||!method_exists($record, 'tags')) {\nreturn;\n}\n\n$tagModel = $record->tags()->getRelated();\n\n$tagNames = collect($state)\n->map(fn ($tagType) => collect($tagType)->map(fn ($tag) => $tag['name']))\n->flatten()\n->unique()\n->toArray();\n\n$tagIds = collect($tagNames)\n->map(fn ($tagName) => $tagModel::findOrCreate($tagName)->id)\n->toArray();\n\n$record->tags()->sync($tagIds);\n}", "CodeBleu_score": 37.56451123351431}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t\tif ($record === null) {\n\t\treturn;\n\t}\n\n\tif (! $record->tags) {\n\t\treturn;\n\t}\n\n\t$tagModel = $record->tags()->getRelated();\n\n\t$tagNames = collect($state)->map(function ($tag) {\n\t\treturn $tag['name'];\n\t})->toArray();\n\n\t$tags = $tagModel::findOrCreate($tagNames);\n\n\t$record->tags()->sync($tags);\n}", "CodeBleu_score": 29.28070432173001}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, repoName, err := paths.ParsePipelinePath(repoPath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\tscope := authz.Scope{\n\t\tType: types.ScopeTypePipeline,\n\t\tIdentifier: pipelineIdentifier,\n\t}\n\tresource := authz.Resource{\n\t\tType: types.ResourceTypePipeline,\n\t\tIdentifier: pipelineIdentifier,\n\t}\n\n\tif err := authorizer.Check(ctx, session, scope, resource, permission); err!= nil {\n\t\treturn fmt.Errorf(\"pipeline permission check failed: %w\", err)\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 59.714858837045504}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, repoName, err := paths.DissectRepoPath(repoPath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\tscope := authz.Scope{\n\t\tType: enum.ScopeTypeSpace,\n\t\tName: spacePath,\n\t}\n\tresource := authz.Resource{\n\t\tType: enum.ResourceTypePipeline,\n\t\tName: pipelineIdentifier,\n\t}\n\n\tif err := authorizer.Check(ctx, session, scope, resource, permission); err!= nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 62.51141586469239}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, repoName, err := paths.SplitRepoPath(repoPath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\tscope := authz.Scope{\n\t\tType: enum.ScopeTypeSpace,\n\t\tName: spacePath,\n\t}\n\tresource := authz.Resource{\n\t\tType: enum.ResourceTypePipeline,\n\t\tName: pipelineIdentifier,\n\t}\n\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 61.55527796741692}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\t// Get the parent space and name from the space path\n\tparentSpace, name, err := paths.ParseSpacePath(space.Path)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource based on the parent space and name\n\tscope := authz.Scope{\n\t\tType: authz.ScopeTypeSpace,\n\t\tName: parentSpace,\n\t}\n\tresource := authz.Resource{\n\t\tType: authz.ResourceTypeSpace,\n\t\tName: name,\n\t}\n\n\t// Call the Check function with the context, authorizer, session, scope, resource, and permission\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 63.29556504824215}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tif space == nil {\n\t\treturn nil\n\t}\n\n\tspacePath := paths.Space(space.Name)\n\tparentSpacePath, spaceName := spacePath.ParentSpace()\n\n\tparentSpace := &types.Space{\n\t\tName: parentSpacePath.Name,\n\t}\n\n\tscope := authz.Scope{\n\t\tType: authz.ScopeTypeSpace,\n\t\tName: spaceName,\n\t}\n\n\tresource := authz.Resource{\n\t\tType: authz.ResourceTypeSpace,\n\t\tName: spaceName,\n\t}\n\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 55.38858551307897}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tif space == nil {\n\t\treturn fmt.Errorf(\"space is nil\")\n\t}\n\n\tspacePath := space.Path()\n\tif spacePath == \"\" {\n\t\treturn fmt.Errorf(\"space path is empty\")\n\t}\n\n\tspaceScope, spaceResource, err := paths.GetSpaceScopeAndResource(spacePath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\treturn authorizer.Check(ctx, session, spaceScope, spaceResource, permission)\n}", "CodeBleu_score": 45.11628380574989}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif source == nil {\n\t\tsource, err := json.Marshal(data)\n\t\tif err!= nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tvar decoded map[string]any\n\tif err := json.Unmarshal(source, &decoded); err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Marshal the sanitized data\n\tsanitized, err := json.Marshal(decoded)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Remove any trailing newline\n\tsanitized = bytes.TrimRight(sanitized, \"\n\")\n\n\treturn sanitized, nil\n}", "CodeBleu_score": 36.300278114009174}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tbuf, err := json.Marshal(data)\n\t\tif err!= nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tsource = buf\n\t}\n\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\tif err := decoder.Decode(data); err!= nil {\n\t\treturn nil, err\n\t}\n\n\tbuf, err := json.Marshal(data)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\tbuf = bytes.TrimSuffix(buf, []byte(\"\n\"))\n\treturn buf, nil\n}", "CodeBleu_score": 46.89953335286559}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource, _ = json.Marshal(data)\n\t}\n\tvar sanitized bytes.Buffer\n\tif err := json.NewDecoder(bytes.NewReader(source)).DisallowUnknownFields().Decode(&sanitized); err!= nil {\n\t\treturn nil, err\n\t}\n\tsanitized.WriteString(\"\n\")\n\treturn sanitized.Bytes(), nil\n}", "CodeBleu_score": 30.605579640792158}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.getRepo(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\tif err := authz.CheckAccess(ctx, session, repo, reqPermission); err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 32.651975037421735}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\tif err := c.validateRepoRef(repoRef); err!= nil {\n\t\treturn nil, err\n\t}\n\n\trepo, err := c.store.Repository().Get(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\tif repo == nil {\n\t\treturn nil, usererror.New(usererror.NotFound, \"repository\", repoRef)\n\t}\n\n\tif err := c.authz.Check(ctx, session, repo, reqPermission); err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 47.58365825979055}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference\n\tif err := types.ValidateRepoRef(repoRef); err!= nil {\n\t\treturn nil, usererror.New(err.Error())\n\t}\n\n\t// Fetch the repository using the reference\n\trepo, err := c.store.Repository().Get(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, usererror.New(err.Error())\n\t}\n\n\t// Check access permissions for the session on the repository\n\tif err := c.authz.CheckAccess(ctx, session, repo, reqPermission); err!= nil {\n\t\treturn nil, usererror.New(err.Error())\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 47.39871398675666}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindRaw: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindMarkdown: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindPipeline: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t}\n}", "CodeBleu_score": 24.85861142804076}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindRaw: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindMarkdown: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindPipeline: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t}\n}", "CodeBleu_score": 24.85861142804076}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tsanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\tsanitizers[enum.CheckPayloadKindEmpty] = sanitizeEmpty\n\tsanitizers[enum.CheckPayloadKindMarkdown] = sanitizeMarkdown\n\tsanitizers[enum.CheckPayloadKindRaw] = sanitizeRaw\n\tsanitizers[enum.CheckPayloadKindPipeline] = sanitizePipeline\n\treturn sanitizers\n}", "CodeBleu_score": 40.94925211050796}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\t\tself.state.on_render = on_render\n\tif not self.state.renderer then\n\t\tself:attach_to_screen()\n\tend\n\treturn self", "CodeBleu_score": 40.92754933303778}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tself.state.on_render = on_render\n\tif not self.renderer then\n\t\tself:attach_to_screen()\n\tend\n\tself:update_state()\n\treturn self", "CodeBleu_score": 40.13022053103216}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tif self.state.renderer then\n\t\tself.state.on_render = on_render\n\telse\n\t\tself.state.renderer = Renderer:new(self.state.screen, on_render)\n\t\tself.state.renderer:attach_buffer(self)\n\tend\n\treturn self", "CodeBleu_score": 48.97745339543272}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\t\tif not self.filename then return end\n\tif not callback then return end\n\tif self.watcher then\n\t\tself.watcher:stop()\n\t\tself.watcher = nil\n\tend\n\tself.watcher = Watcher(self.filename, function(event)\n\t\tif event == 'change' then\n\t\t\tcallback()\n\t\tend\n\tend)", "CodeBleu_score": 48.264195380519745}, {"code": "function Buffer:watch(callback)\n\t\tif not self:valid() then return end\n\tif not callback then return end\n\tlocal watcher = Watcher:new(self:filename(), callback)\n\twatcher:start()\n\tself.watcher = watcher", "CodeBleu_score": 28.125172579780234}, {"code": "function Buffer:watch(callback)\n\t\tif self:isValid() and callback then\n\t\tlocal watcher = Watcher(self.filename, function(filename)\n\t\t\tcallback(self)\n\t\tend)\n\t\twatcher:start()\n\tend", "CodeBleu_score": 30.47179129561831}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\t\tif self.hex ~= nil then\n\t\treturn self.hex\n\tend\n\n\tlocal spec = self.spec\n\tlocal attr = self.is_fg and 'foreground' or 'background'\n\tlocal hl = vim.api.nvim_get_hl_by_name(attr, true)\n\tlocal rgb = spec[attr]\n\n\tif rgb == nil then\n\t\treturn nil\n\tend\n\n\tif hl.foreground ~= nil then\n\t\trgb = Rgb.from_int(hl.foreground)\n\tend\n\n\tself.hex = rgb:to_hex()\n\n\treturn self.hex", "CodeBleu_score": 56.56162093901125}, {"code": "function Color:to_hex()\n\t\tif self.hex then return self.hex end\n\tlocal spec = self.spec\n\tlocal attr = self.attr\n\tlocal highlight = vim.api.nvim_get_hl_by_name(spec[attr], true)\n\tif not highlight then return end\n\tlocal hex = string.format('#%02x%02x%02x', highlight.foreground, highlight.background, highlight.special)\n\tself.hex = hex\n\treturn hex", "CodeBleu_score": 52.792189266690535}, {"code": "function Color:to_hex()\n\t\tif self._hex then\n\t\treturn self._hex\n\tend\n\n\tlocal spec = self:get_spec()\n\tlocal attr = self:get_attr()\n\tlocal color = api.nvim_get_hl_by_name(attr, true)[1]\n\n\tif color then\n\t\tself._hex = string.format('#%02x%02x%02x', bit.rshift(color, 16), bit.band(bit.rshift(color, 8), 0xff), bit.band(color, 0xff))\n\telse\n\t\tself._hex = spec[attr]\n\tend\n\n\treturn self._hex", "CodeBleu_score": 47.20607419592113}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = buffer:get_lines(1, buffer:line_count(), false)\n\tlocal ns = buffer:add_highlight(0, 0, 0, 0)\n\tfor i = 1, #lines do\n\t\tlocal line = lines[i]\n\t\tlocal line_start = buffer:line_start_position(i - 1)\n\t\tfor match in line:gmatch(pattern) do\n\t\t\tlocal match_start = line:find(match)\n\t\t\tif match_start then\n\t\t\t\tlocal match_end = match_start + match:len() - 1\n\t\t\t\tbuffer:add_highlight_range(ns, i - 1, match_start - 1, i - 1, match_end)\n\t\t\tend\n\t\tend\n\tend\n\treturn ns", "CodeBleu_score": 51.401683712526115}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = buffer:get_lines(1, -1)\n\tfor line_num, line in ipairs(lines) do\n\t\tfor match in line:gmatch(pattern) do\n\t\t\tbuffer:add_highlight(line_num, match:find(pattern), #match, hl)\n\t\tend\n\tend\n\treturn self", "CodeBleu_score": 31.703254770164463}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = buffer:get_lines(1, -1, true)\n\tfor i, line in ipairs(lines) do\n\t\tfor _, match in ipairs(vim.regex(pattern):match_str(line)) do\n\t\t\tbuffer:add_highlight(i, match[1], match[2], hl)\n\t\tend\n\tend\n\treturn self", "CodeBleu_score": 32.95420886813227}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = buffer:add_extmark(buffer, Namespace.namespace, row, col, {\n\t\tvirt_text = { { text, hl } },\n\t\tvirt_text_pos = pos,\n\t\tvirt_text_prio = priority\n\t})\n\treturn id", "CodeBleu_score": 48.89516316394034}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = string.format(\"%s:%s\", row, col)\n\tlocal opts = {\n\t\tvirt_text = { { text, hl } },\n\t\tvirt_text_pos = pos,\n\t\tpriority = priority,\n\t}\n\tNamespace.virtual_text_extmarks[id] = vim.api.nvim_buf_set_extmark(buffer, Namespace.virtual_text_ns, row, col, opts)\n\treturn id", "CodeBleu_score": 57.43068027037259}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = Namespace:get_virtual_text_id(row, col)\n\tNamespace.virtual_text[id] = {\n\t\ttext = text,\n\t\thl = hl,\n\t\trow = row,\n\t\tcol = col,\n\t\tpos = pos,\n\t\tpriority = priority,\n\t}\n\tNamespace.virtual_text_ids[buffer] = Namespace.virtual_text_ids[buffer] or {}\n\ttable.insert(Namespace.virtual_text_ids[buffer], id)\n\tNamespace.virtual_text_extmarks[buffer] = Namespace.virtual_text_extmarks[buffer] or {}\n\tNamespace.virtual_text_extmarks[buffer][id] = vim.api.nvim_buf_set_extmark(buffer, Namespace.virtual_text_ns, row, col, {\n\t\tvirt_text = { { text, hl } },\n\t\tvirt_text_pos = pos,\n\t\tpriority = priority,\n\t})\n\treturn id", "CodeBleu_score": 55.16210699023769}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = ''\n\tfor i = 1, #output do\n\t\tlocal char = output:sub(i, i)\n\t\tif char == '", "CodeBleu_score": 22.187029572699466}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = \"\"\n\tfor i = 1, #output do\n\t\tlocal char = output:sub(i, i)\n\t\tif char == \"", "CodeBleu_score": 22.16746728091925}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = \"\"\n\tfor i = 1, #output do\n\t\tlocal char = output:sub(i, i)\n\t\tif char == \"", "CodeBleu_score": 22.16746728091925}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t\tif not self.watchers[path] then\n\t\tlocal watcher = self.loop:new_fs_event(path, {recursive = true}, handler)\n\t\twatcher:start()\n\t\tself.watchers[path] = watcher\n\tend\n\treturn self.watchers[path]", "CodeBleu_score": 39.05784616224477}, {"code": "function Watcher:watch_file(path, handler)\n\t\tif not self.watchers[path] then\n\t\tself.watchers[path] = self.loop:new_fs_event(path, handler, { recursive = true })\n\t\tself.watchers[path]:start()\n\tend\n\treturn self.watchers[path]", "CodeBleu_score": 38.58360040550403}, {"code": "function Watcher:watch_file(path, handler)\n\t\tlocal watcher = Watcher:get_watcher(path)\n\tif watcher then\n\t\treturn watcher\n\tend\n\twatcher = Watcher:new(path)\n\twatcher.handler = handler\n\twatcher:start()\n\treturn watcher", "CodeBleu_score": 34.200265672104344}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t\tlocal buffer_lines = self:lines()\n\tlocal hunks = self.git_object:live_hunks(buffer_lines)\n\tif hunks == nil then\n\t\treturn nil, self.git_object:error()\n\tend\n\n\tlocal signs = {}\n\tfor _, hunk in ipairs(hunks) do\n\t\tfor _, line in ipairs(hunk.lines) do\n\t\t\tlocal sign = {\n\t\t\t\tname = hunk.type,\n\t\t\t\tline = line.line,\n\t\t\t\tpriority = vgit.settings.signs[hunk.type].priority,\n\t\t\t\thunk = hunk\n\t\t\t}\n\t\t\ttable.insert(signs, sign)\n\t\tend\n\tend\n\n\tself:signs(signs)\n\treturn hunks", "CodeBleu_score": 38.39396504645213}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal buffer = self.buffer\n\tlocal git_object = self.git_object\n\tlocal lines = buffer:get_lines()\n\tlocal hunks, err = git_object:hunks(lines)\n\tif err then\n\t\treturn nil, err\n\tend\n\tlocal signs = {}\n\tfor _, hunk in ipairs(hunks) do\n\t\tlocal lines = hunk.lines\n\t\tlocal line_count = #lines\n\t\tlocal priority = 1\n\t\tif line_count > 1 then\n\t\t\tpriority = 2\n\t\tend\n\t\tfor i, line in ipairs(lines) do\n\t\t\tlocal sign_name = 'vgit_live_'.. hunk.type\n\t\t\tlocal sign = {\n\t\t\t\tname = sign_name,\n\t\t\t\tline = i,\n\t\t\t\tpriority = priority,\n\t\t\t\thunk = hunk\n\t\t\t}\n\t\t\ttable.insert(signs, sign)\n\t\tend\n\tend\n\tself.signs = signs\n\tbuffer:set_signs(signs)\n\treturn hunks", "CodeBleu_score": 44.211098033883346}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal lines = self:lines()\n\tlocal hunks = self.object:hunks(lines)\n\tif hunks.error then\n\t\treturn hunks.error\n\tend\n\tfor _, hunk in ipairs(hunks) do\n\t\tfor _, line in ipairs(hunk) do\n\t\t\tlocal sign_id = self.buffer:sign_place(line.line_number, 'GitSign', line.sign_name, {\n\t\t\t\tpriority = line.sign_priority,\n\t\t\t})\n\t\t\tline.sign_id = sign_id\n\t\tend\n\tend\n\tself.buffer.signs = hunks\n\treturn hunks", "CodeBleu_score": 31.96038543657472}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal hunk = patch:get_hunk()\n\tlocal path = patch:get_path()\n\tlocal tmpfile = fs.create_tmp_file(path)\n\tlocal content = hunk:get_content()\n\tfs.write_file(tmpfile, content)\n\tlocal cmd = 'add -p '.. tmpfile\n\tlocal result, err = self:run_cmd(cmd)\n\tfs.remove_file(tmpfile)\n\treturn result, err", "CodeBleu_score": 45.74776311868505}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal hunk = patch:get_hunk()\n\tlocal hunk_content = hunk:get_content()\n\tlocal temp_file = vgit.fs.get_temp_file()\n\tlocal temp_file_path = temp_file:get_path()\n\tlocal git_cli = vgit.git.cli.Git:new(self)\n\tlocal result, err = temp_file:write(hunk_content)\n\tif not result then\n\t\treturn nil, err\n\tend\n\tresult, err = temp_file:close()\n\tif not result then\n\t\treturn nil, err\n\tend\n\tresult, err = git_cli:stage_file(temp_file_path)\n\tif not result then\n\t\treturn nil, err\n\tend\n\tresult, err = temp_file:remove()\n\tif not result then\n\t\treturn nil, err\n\tend\n\treturn true", "CodeBleu_score": 37.40401983107399}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal tmp_file = self.fs.tmp_file()\n\tlocal err = self.fs.write_file(tmp_file, patch.content)\n\tif err ~= nil then\n\t\treturn err\n\tend\n\tlocal err = self.cli.stage_hunk(tmp_file, patch.hunk)\n\tself.fs.rm(tmp_file)\n\treturn err", "CodeBleu_score": 44.340929007905395}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\tOAuthConfig config = new OAuthConfig(new DefaultApi20(), requestToken.getToken(), requestToken.getSecret(), null, null, null, null, null, null);\n\tOAuthRequest request = new OAuthRequest(config);\n\trequest.addHeader(\"Authorization\", \"Basic \" + Base64.encode(StandardCharsets.UTF_8.encode(config.getApiKey() + \":\" + config.getApiSecret()).array()));\n\trequest.addBodyParameter(OAuthConstants.CLIENT_ID, config.getApiKey());\n\trequest.addBodyParameter(OAuthConstants.CLIENT_SECRET, config.getApiSecret());\n\trequest.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n\trequest.addBodyParameter(OAuthConstants.REDIRECT_URI, config.getCallback());\n\trequest.addBodyParameter(OAuthConstants.GRANT_TYPE, \"authorization_code\");\n\tResponse response = new OAuth20ServiceImpl(config).sendRequest(request);\n\treturn config.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 44.650360729975866}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\tOAuthRequest request = new OAuthRequest(this);\n\trequest.addHeader(OAuthConstants.HEADER_AUTHORIZATION, \"Basic \" + Base64.encodeBytes((this.apiKey + \":\" + this.apiSecret).getBytes(StandardCharsets.UTF_8)));\n\trequest.addBodyParameter(OAuthConstants.GRANT_TYPE, OAuthConstants.AUTHORIZATION_CODE);\n\trequest.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n\trequest.addBodyParameter(OAuthConstants.REDIRECT_URI, this.callback);\n\trequest.addBodyParameter(OAuthConstants.CLIENT_ID, this.apiKey);\n\tResponse response = this.service.execute(request);\n\treturn this.accessTokenExtractor.extract(response.getBody());\n}", "CodeBleu_score": 43.133472483602645}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\tOAuthRequest request = new OAuthRequest(DefaultApi20.HttpMethod.POST, \"https://api.github.com/login/oauth/access_token\");\n\trequest.addHeader(\"Accept\", \"application/json\");\n\trequest.addHeader(\"Content-Type\", \"application/json\");\n\trequest.addHeader(\"Authorization\", \"Basic \" + Base64.encode((clientID + \":\" + clientSecret).getBytes(StandardCharsets.UTF_8)));\n\trequest.addBodyParameter(\"client_id\", clientID);\n\trequest.addBodyParameter(\"client_secret\", clientSecret);\n\trequest.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n\trequest.addBodyParameter(OAuthConstants.REDIRECT_URI, redirectURI);\n\trequest.addBodyParameter(OAuthConstants.GRANT_TYPE, \"authorization_code\");\n\tResponse response = service.execute(request);\n\treturn service.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 48.64024854168183}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\t// Create a credentials provider with the specified credentials\n\tCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n\tcredentialsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), new UsernamePasswordCredentials(username, password));\n\n\t// Create an authentication cache and add the host to it using the Basic authentication scheme\n\tAuthCache authCache = new BasicAuthCache();\n\tauthCache.put(host, new BasicScheme());\n\n\t// Assign the credentials provider and authentication cache to the context\n\tcontext.setCredentialsProvider(credentialsProvider);\n\tcontext.setAuthCache(authCache);\n\n\t// Log the action of adding the host to the auth cache\n\tLOGGER.log(Level.INFO, \"Added host {0} to auth cache\", host);\n}", "CodeBleu_score": 76.3051655466783}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\t// Get the credentials from the credentials store\n\tString credentialsId = \"\";\n\tCredentials credentials = CredentialsProvider.findCredential(credentialsId, StandardUsernameCredentials.class);\n\tif (credentials == null) {\n\t\tthrow new RuntimeException(\"Could not find credentials with ID: \" + credentialsId);\n\t}\n\n\t// Create a credentials provider and add the credentials to it\n\tCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n\tif (credentials instanceof StandardUsernamePasswordCredentials) {\n\t\tStandardUsernamePasswordCredentials usernamePasswordCredentials = (StandardUsernamePasswordCredentials) credentials;\n\t\tUsernamePasswordCredentials httpCredentials = new UsernamePasswordCredentials(usernamePasswordCredentials.getUsername(), usernamePasswordCredentials.getPassword().getPlainText());\n\t\tcredentialsProvider.setCredentials(AuthScope.ANY, httpCredentials);\n\t} else {\n\t\tthrow new RuntimeException(\"Unsupported credentials type: \" + credentials.getClass().getName());\n\t}\n\n\t// Create an authentication cache and add the host to it using the Basic authentication scheme\n\tAuthCache authCache = new BasicAuthCache();\n\tauthCache.put(host, new BasicScheme());\n\n\t// Assign the credentials provider and authentication cache to the context\n\tcontext.setCredentialsProvider(credentialsProvider);\n\tcontext.setAuthCache(authCache);\n\n\t// Log the action of adding the host to the auth cache\n\tLogger.getLogger(getClass().getName()).log(Level.INFO, \"Added host {0} to auth cache\", host);\n}", "CodeBleu_score": 54.614380806633044}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\tif (context == null) {\n\t\treturn;\n\t}\n\tif (host == null) {\n\t\treturn;\n\t}\n\tif (credentials == null) {\n\t\treturn;\n\t}\n\tif (credentials.getUsername() == null) {\n\t\treturn;\n\t}\n\tif (credentials.getPassword() == null) {\n\t\treturn;\n\t}\n\tif (credentials.getUsername().isEmpty()) {\n\t\treturn;\n\t}\n\tif (credentials.getPassword().isEmpty()) {\n\t\treturn;\n\t}\n\ttry {\n\t\tCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n\t\tUsernamePasswordCredentials credentials = new UsernamePasswordCredentials(this.credentials.getUsername(), this.credentials.getPassword());\n\t\tcredentialsProvider.setCredentials(AuthScope.ANY, credentials);\n\t\tcontext.setCredentialsProvider(credentialsProvider);\n\t\tAuthCache authCache = new BasicAuthCache();\n\t\tBasicScheme basicAuth = new BasicScheme();\n\t\tauthCache.put(host, basicAuth);\n\t\tcontext.setAuthCache(authCache);\n\t\tLOGGER.log(Level.FINE, \"Added host {0} to auth cache\", host);\n\t} catch (Exception e) {\n\t\tLOGGER.log(Level.WARNING, \"Failed to configure context\", e);\n\t}\n}", "CodeBleu_score": 51.49584408753613}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t\tfinal Jenkins instance = Jenkins.getInstance();\n\tfinal AvatarCache cache = instance.getExtensionList(AvatarCache.class).get(AvatarCache.class);\n\tif (cache == null) {\n\t\tthrow new IllegalStateException(\"No AvatarCache extension found\");\n\t}\n\tfinal String key = cache.seed(source);\n\tfinal String encodedKey;\n\ttry {\n\t\tencodedKey = URLEncoder.encode(key, StandardCharsets.UTF_8.name());\n\t} catch (UnsupportedEncodingException e) {\n\t\tthrow new IllegalStateException(\"UTF-8 encoding is unsupported\", e);\n\t}\n\treturn instance.getRootUrl() + \"avatar-cache/\" + encodedKey + \"/\" + size;\n}", "CodeBleu_score": 54.92667640389246}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t\tJenkins jenkins = Jenkins.getInstance();\n\tif (jenkins == null) {\n\t\tthrow new IllegalStateException(\"Jenkins instance is null\");\n\t}\n\tAvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(AvatarCache.class);\n\tif (cache == null) {\n\t\tthrow new IllegalStateException(\"AvatarCache extension is null\");\n\t}\n\tString key = cache.seed(source);\n\ttry {\n\t\treturn jenkins.getRootUrl() + \"avatar/\" + URLEncoder.encode(key, StandardCharsets.UTF_8.name()) + \"/\" + size;\n\t} catch (UnsupportedEncodingException e) {\n\t\tthrow new IllegalStateException(\"UTF-8 encoding is unsupported\", e);\n\t}\n}", "CodeBleu_score": 50.96165171045747}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t\tJenkins jenkins = Jenkins.getInstance();\n\tif (jenkins == null) {\n\t\tthrow new IllegalStateException(\"Jenkins instance is null\");\n\t}\n\tAvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(AvatarCache.class);\n\tif (cache == null) {\n\t\tthrow new IllegalStateException(\"AvatarCache instance is null\");\n\t}\n\tString key = cache.generateCacheKey(source);\n\tcache.seedCache(source, key);\n\ttry {\n\t\treturn jenkins.getRootUrl() + \"avatars/\" + URLEncoder.encode(key, \"UTF-8\") + \"/\" + size;\n\t} catch (UnsupportedEncodingException e) {\n\t\tthrow new IllegalStateException(\"UTF-8 encoding is unsupported\", e);\n\t}\n}", "CodeBleu_score": 50.34735248770378}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t\tthis.source = source;\n\tthis.image = image;\n\tthis.lastModified = lastModified;\n\tif (this.lastModified < 0) {\n\t\tthis.lastModified = System.currentTimeMillis();\n\t}\n\tif (image.getWidth() > 128 || image.getHeight() > 128) {\n\t\tBufferedImage scaledImage = new BufferedImage(128, 128, BufferedImage.TYPE_INT_ARGB);\n\t\tGraphics2D g = scaledImage.createGraphics();\n\t\tg.setRenderingHint(KEY_INTERPOLATION, VALUE_INTERPOLATION_BICUBIC);\n\t\tg.setRenderingHint(KEY_ALPHA_INTERPOLATION, VALUE_ALPHA_INTERPOLATION_QUALITY);\n\t\tg.drawImage(image, 0, 0, 128, 128, null);\n\t\tg.dispose();\n\t\tthis.image = scaledImage;\n\t}\n}", "CodeBleu_score": 40.76784487507735}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t\tthis.source = source;\n\tthis.image = image;\n\tthis.lastModified = lastModified;\n\tif (lastModified < 0) {\n\t\tthis.lastModified = System.currentTimeMillis();\n\t}\n\tif (image.getHeight() > 128 || image.getWidth() > 128) {\n\t\tint newWidth = image.getWidth() > 128? 128 : image.getWidth();\n\t\tint newHeight = image.getHeight() > 128? 128 : image.getHeight();\n\t\tBufferedImage scaledImage = new BufferedImage(newWidth, newHeight, image.getType());\n\t\tGraphics2D graphics = scaledImage.createGraphics();\n\t\tgraphics.setRenderingHint(KEY_INTERPOLATION, VALUE_INTERPOLATION_BICUBIC);\n\t\tgraphics.setRenderingHint(KEY_ALPHA_INTERPOLATION, VALUE_ALPHA_INTERPOLATION_QUALITY);\n\t\tgraphics.drawImage(image, 0, 0, newWidth, newHeight, null);\n\t\tgraphics.dispose();\n\t\tthis.image = scaledImage;\n\t}\n}", "CodeBleu_score": 44.681862795548206}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t\tthis.source = source;\n\tthis.image = image;\n\tthis.lastModified = lastModified;\n\tif (lastModified < 0) {\n\t\tthis.lastModified = System.currentTimeMillis();\n\t}\n\tif (image.getWidth() > 128 || image.getHeight() > 128) {\n\t\tBufferedImage scaled = new BufferedImage(128, 128, image.getType());\n\t\tGraphics2D g = scaled.createGraphics();\n\t\tg.setRenderingHint(KEY_INTERPOLATION, VALUE_INTERPOLATION_BICUBIC);\n\t\tg.setRenderingHint(KEY_ALPHA_INTERPOLATION, VALUE_ALPHA_INTERPOLATION_QUALITY);\n\t\tg.drawImage(image, 0, 0, 128, 128, null);\n\t\tg.dispose();\n\t\tthis.image = scaled;\n\t}\n}", "CodeBleu_score": 41.95333970805866}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false;\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\tcacheEntry = future.get();\n\t\t\tlastModified = cacheEntry.getLastModified();\n\t\t\timage = cacheEntry.getImage();\n\t\t\tfuture = null;\n\t\t} catch (InterruptedException | ExecutionException e) {\n\t\t\tLOGGER.log(Level.WARNING, \"Error retrieving avatar\", e);\n\t\t\tfuture = null;\n\t\t}\n\t}\n\treturn future!= null;\n}", "CodeBleu_score": 50.34377956217549}, {"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false;\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\tentry = future.get();\n\t\t\tlastModifiedDate = entry.getLastModified();\n\t\t\timage = entry.getImage();\n\t\t\tfuture = null;\n\t\t} catch (InterruptedException | ExecutionException e) {\n\t\t\tLOGGER.log(Level.WARNING, \"Error retrieving avatar image from cache\", e);\n\t\t\tfuture = null;\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn true;\n}", "CodeBleu_score": 52.5249308705527}, {"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false;\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\tentry = future.get();\n\t\t} catch (InterruptedException | ExecutionException e) {\n\t\t\treturn true;\n\t\t}\n\t\tlastModified = System.currentTimeMillis();\n\t\tfuture = null;\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 43.88876685520044}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\tif (node instanceof AvatarImage) {\n\t\tAvatarImage image = (AvatarImage) node;\n\t\tif (image.isCacheable()) {\n\t\t\t// check if the image is already cached\n\t\t\tif (image.isCached()) {\n\t\t\t\t// if so, just write the cached image to the response\n\t\t\t\twriteImage(req, rsp, image.getImage());\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// if not cached, generate the image\n\t\tBufferedImage avatar = generateImage(req, image);\n\t\tif (avatar!= null) {\n\t\t\t// if the image is cacheable, write the image to the cache\n\t\t\tif (image.isCacheable()) {\n\t\t\t\timage.setImage(avatar);\n\t\t\t}\n\t\t\t// write the image to the response\n\t\t\twriteImage(req, rsp, avatar);\n\t\t}\n\t}\n}", "CodeBleu_score": 29.518673519583878}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\tString cacheKey = getCacheKey(req);\n\tif (cacheKey == null) {\n\t\tthrow new ServletException(\"No cache key\");\n\t}\n\tAvatarImage image = getAvatarImage(cacheKey);\n\tif (image == null) {\n\t\tthrow new ServletException(\"No avatar image\");\n\t}\n\tif (image.isExpired()) {\n\t\tif (LOGGER.isFineEnabled()) {\n\t\t\tLOGGER.fine(\"Avatar image expired, regenerating\");\n\t\t}\n\t\timage.regenerate();\n\t}\n\tif (image.isExpired()) {\n\t\tthrow new ServletException(\"Unable to generate avatar image\");\n\t}\n\tif (image.isDirty()) {\n\t\tif (LOGGER.isFineEnabled()) {\n\t\t\tLOGGER.fine(\"Avatar image dirty, regenerating\");\n\t\t}\n\t\timage.regenerate();\n\t}\n\tif (image.isDirty()) {\n\t\tthrow new ServletException(\"Unable to generate avatar image\");\n\t}\n\tif (image.isExpired()) {\n\t\tthrow new ServletException(\"Unable to generate avatar image\");\n\t}\n\tif (LOGGER.isFineEnabled()) {\n\t\tLOGGER.fine(\"Returning avatar image\");\n\t}\n\tif (image.isDirty()) {\n\t\tthrow new ServletException(\"Unable to generate avatar image\");\n\t}\n\tif (image.isExpired()) {\n\t\tthrow new ServletException(\"Unable to generate avatar image\");\n\t}\n\tif (LOGGER.isFineEnabled()) {\n\t\tLOGGER.fine(\"Returning avatar image\");\n\t}\n\tif (image.isDirty()) {\n\t\tthrow new ServletException(\"Unable to generate avatar image\");\n\t}\n\tif (image.isExpired()) {\n\t\tthrow new ServletException(\"Unable to generate avatar image\");\n\t}\n\tif (LOGGER.isFineEnabled()) {\n\t\tLOGGER.fine(\"Returning avatar image\");\n\t}\n\tif (image.isDirty()) {\n\t\tthrow new ServletException(\"Unable to generate avatar image\");\n\t}\n\tif (image.isExpired()) {\n\t\tthrow new ServletException(\"Unable to generate avatar image\");\n\t}\n\tif (LOGGER.isFineEnabled()) {\n\t\tLOGGER.fine(\"Returning avatar image\");\n\t}\n\tif (image.isDirty()) {\n\t\tthrow new ServletException(\"Unable to generate avatar image", "CodeBleu_score": 32.26431741968203}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\tAvatarImage image = getAvatarImage(node);\n\tif (image == null) {\n\t\trsp.sendError(HttpServletResponse.SC_NOT_FOUND);\n\t\treturn;\n\t}\n\tint width = getWidth(req);\n\tint height = getHeight(req);\n\tif (image.getWidth() == width && image.getHeight() == height) {\n\t\t// the image is already the right size, so just return it\n\t\trsp.setContentType(\"image/png\");\n\t\trsp.setHeader(\"Cache-Control\", \"max-age=31536000\");\n\t\trsp.setHeader(\"Expires\", \"Fri, 31 Dec 2037 23:59:59 GMT\");\n\t\trsp.setHeader(\"Pragma\", \"public\");\n\t\trsp.setHeader(\"Content-Length\", Integer.toString(image.getBytes().length));\n\t\trsp.getOutputStream().write(image.getBytes());\n\t\treturn;\n\t}\n\t// otherwise we need to resize it\n\tBufferedImage resized = resize(image, width, height);\n\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\tImageIO.write(resized, \"png\", baos);\n\trsp.setContentType(\"image/png\");\n\trsp.setHeader(\"Cache-Control\", \"max-age=31536000\");\n\trsp.setHeader(\"Expires\", \"Fri, 31 Dec 2037 23:59:59 GMT\");\n\trsp.setHeader(\"Pragma\", \"public\");\n\trsp.setHeader(\"Content-Length\", Integer.toString(baos.size()));\n\trsp.getOutputStream().write(baos.toByteArray());\n}", "CodeBleu_score": 40.03397967599495}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t\tthis.enableCache = enableCache;\n\tthis.teamCacheDuration = teamCacheDuration;\n\tthis.repositoriesCacheDuration = repositoriesCacheDuration;\n\tthis.owner = owner;\n\tthis.projectKey = projectKey;\n\tthis.repositoryName = repositoryName;\n\tthis.authenticator = authenticator;\n\tthis.httpClient = createHttpClient();\n\tthis.httpClientContext = createHttpClientContext();\n\tthis.setClientProxyParameters(httpClient, httpClientContext);\n}", "CodeBleu_score": 27.451531375689438}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t\tthis.enableCache = enableCache;\n\tthis.teamCacheDuration = teamCacheDuration;\n\tthis.repositoriesCacheDuration = repositoriesCacheDuration;\n\tthis.owner = owner;\n\tthis.projectKey = projectKey;\n\tthis.repositoryName = repositoryName;\n\tthis.authenticator = authenticator;\n\tthis.httpClient = createHttpClient();\n\tthis.httpClientContext = createHttpClientContext();\n\tthis.cache = new Cache(enableCache);\n\tthis.cache.setTeamCacheDuration(teamCacheDuration);\n\tthis.cache.setRepositoriesCacheDuration(repositoriesCacheDuration);\n\tthis.cache.setOwner(owner);\n\tthis.cache.setProjectKey(projectKey);\n\tthis.cache.setRepositoryName(repositoryName);\n\tthis.cache.setAuthenticator(authenticator);\n\tthis.cache.setHttpClient(httpClient);\n\tthis.cache.setHttpClientContext(httpClientContext);\n\tthis.cache.setCache(cache);\n\tthis.cache.setBitbucketApi(this);\n}", "CodeBleu_score": 34.45519213690037}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t\tthis.enableCache = enableCache;\n\tthis.teamCacheDuration = teamCacheDuration;\n\tthis.repositoriesCacheDuration = repositoriesCacheDuration;\n\tthis.owner = owner;\n\tthis.projectKey = projectKey;\n\tthis.repositoryName = repositoryName;\n\tthis.authenticator = authenticator;\n\tthis.httpClient = createHttpClient();\n\tthis.httpClientContext = createHttpClientContext();\n}", "CodeBleu_score": 24.4946824327156}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\t// Get the source branch\n\tBitbucketCloudBranch sourceBranch = pullRequest.getSource();\n\tif (sourceBranch!= null) {\n\t\tString sourceBranchName = sourceBranch.getBranch();\n\t\tBitbucketCloudCommit sourceBranchCommit = sourceBranch.getCommit();\n\t\tif (sourceBranchCommit!= null) {\n\t\t\tString sourceBranchRawNode = sourceBranchCommit.getRawNode();\n\t\t\tif (sourceBranchRawNode!= null) {\n\t\t\t\t// Assign a new CommitClosure to the source branch\n\t\t\t\tsourceBranch.setCommitClosure(new CommitClosure(sourceBranchRawNode));\n\t\t\t}\n\t\t}\n\t}\n\n\t// Get the destination branch\n\tBitbucketCloudBranch destinationBranch = pullRequest.getDestination();\n\tif (destinationBranch!= null) {\n\t\tString destinationBranchName = destinationBranch.getBranch();\n\t\tBitbucketCloudCommit destinationBranchCommit = destinationBranch.getCommit();\n\t\tif (destinationBranchCommit!= null) {\n\t\t\tString destinationBranchRawNode = destinationBranchCommit.getRawNode();\n\t\t\tif (destinationBranchRawNode!= null) {\n\t\t\t\t// Assign a new CommitClosure to the destination branch\n\t\t\t\tdestinationBranch.setCommitClosure(new CommitClosure(destinationBranchRawNode));\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 31.542517612194455}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\tif (pullRequest == null) {\n\t\treturn;\n\t}\n\n\tBitbucketCloudBranch sourceBranch = pullRequest.getSource();\n\tBitbucketCloudBranch destinationBranch = pullRequest.getDestination();\n\n\tif (sourceBranch!= null) {\n\t\tString sourceBranchName = sourceBranch.getBranch();\n\t\tString sourceBranchRawNode = sourceBranch.getCommit().getHash();\n\t\tsetCommitClosure(sourceBranchName, sourceBranchRawNode);\n\t}\n\n\tif (destinationBranch!= null) {\n\t\tString destinationBranchName = destinationBranch.getBranch();\n\t\tString destinationBranchRawNode = destinationBranch.getCommit().getHash();\n\t\tsetCommitClosure(destinationBranchName, destinationBranchRawNode);\n\t}\n}", "CodeBleu_score": 36.91272099816927}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\tBitbucketCloudBranch sourceBranch = pullRequest.getSource().getBranch();\n\tBitbucketCloudBranch destinationBranch = pullRequest.getDestination().getBranch();\n\n\tif (sourceBranch!= null) {\n\t\tBitbucketCloudCommit sourceBranchCommit = getCommit(sourceBranch);\n\t\tif (sourceBranchCommit!= null) {\n\t\t\tsourceBranch.setCommitClosure(new CommitClosure(sourceBranchCommit.getRawNode()));\n\t\t}\n\t}\n\n\tif (destinationBranch!= null) {\n\t\tBitbucketCloudCommit destinationBranchCommit = getCommit(destinationBranch);\n\t\tif (destinationBranchCommit!= null) {\n\t\t\tdestinationBranch.setCommitClosure(new CommitClosure(destinationBranchCommit.getRawNode()));\n\t\t}\n\t}\n}", "CodeBleu_score": 46.39333505625031}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration jenkinsLocationConfiguration = JenkinsLocationConfiguration.get();\n\tString rootURL = jenkinsLocationConfiguration.getUrl();\n\tif (StringUtils.isBlank(rootURL)) {\n\t\tthrow new IllegalStateException(\"Jenkins root URL is not configured\");\n\t}\n\treturn DisplayURLProvider.get().getRunURL(build);\n}", "CodeBleu_score": 51.83919001600663}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration jenkinsLocationConfiguration = JenkinsLocationConfiguration.get();\n\tif (jenkinsLocationConfiguration == null) {\n\t\tthrow new IllegalStateException(\"Jenkins location configuration is null\");\n\t}\n\tURL jenkinsURL = jenkinsLocationConfiguration.getUrl();\n\tif (jenkinsURL == null) {\n\t\tthrow new IllegalStateException(\"Jenkins URL is null\");\n\t}\n\treturn DisplayURLProvider.get().getRunURL(build);\n}", "CodeBleu_score": 53.46538928223765}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration locationConfiguration = JenkinsLocationConfiguration.get();\n\tif (locationConfiguration == null || StringUtils.isBlank(locationConfiguration.getUrl())) {\n\t\tthrow new IllegalStateException(\"Jenkins URL is not configured\");\n\t}\n\treturn DisplayURLProvider.get().getRootDisplayURL().toExternalForm();\n}", "CodeBleu_score": 48.179952374855866}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\tif (StringUtils.isBlank(url)) {\n\t\tthrow new IllegalStateException(\"Jenkins URL is not configured.\");\n\t}\n\ttry {\n\t\tURL jenkinsURL = new URL(url);\n\t\tif (jenkinsURL.getHost().equals(\"localhost\") || jenkinsURL.getHost().equals(\"unconfigured-jenkins-location\")) {\n\t\t\tthrow new IllegalStateException(\"Jenkins URL must be a fully qualified domain name.\");\n\t\t}\n\t\tif (bitbucket instanceof BitbucketCloudApiClient) {\n\t\t\tif (jenkinsURL.getHost().equals(\"localhost\") || jenkinsURL.getHost().equals(\"unconfigured-jenkins-location\")) {\n\t\t\t\tthrow new IllegalStateException(\"Jenkins URL must be a fully qualified domain name.\");\n\t\t\t}\n\t\t}\n\t} catch (MalformedURLException e) {\n\t\tthrow new IllegalStateException(\"Jenkins URL is malformed.\", e);\n\t}\n\treturn url;\n}", "CodeBleu_score": 64.67621446788243}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\ttry {\n\t\tURL u = new URL(url);\n\t\tif (u.getHost().equals(\"localhost\")) {\n\t\t\tthrow new IllegalStateException(\"Jenkins URL must not use 'localhost' as the host\");\n\t\t}\n\t\tif (u.getHost().equals(\"unconfigured-jenkins-location\")) {\n\t\t\tthrow new IllegalStateException(\"Jenkins URL must not use 'unconfigured-jenkins-location' as the host\");\n\t\t}\n\t\tif (bitbucket instanceof BitbucketCloudApiClient) {\n\t\t\tif (StringUtils.isBlank(u.getHost())) {\n\t\t\t\tthrow new IllegalStateException(\"Jenkins URL must be fully qualified\");\n\t\t\t}\n\t\t}\n\t} catch (MalformedURLException e) {\n\t\tthrow new IllegalStateException(\"Jenkins URL is malformed\", e);\n\t}\n\treturn url;\n}", "CodeBleu_score": 64.85746451905294}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\tif (StringUtils.isBlank(url)) {\n\t\tthrow new IllegalStateException(\"Jenkins URL is not configured\");\n\t}\n\ttry {\n\t\tURL u = new URL(url);\n\t\tif (u.getHost().equalsIgnoreCase(\"localhost\") || u.getHost().equalsIgnoreCase(\"unconfigured-jenkins-location\")) {\n\t\t\tthrow new IllegalStateException(\"Jenkins URL cannot be localhost or unconfigured-jenkins-location\");\n\t\t}\n\t\tif (bitbucket instanceof BitbucketCloudApiClient) {\n\t\t\tif (StringUtils.isBlank(u.getHost())) {\n\t\t\t\tthrow new IllegalStateException(\"Jenkins URL must be fully qualified\");\n\t\t\t}\n\t\t}\n\t} catch (MalformedURLException e) {\n\t\tthrow new IllegalStateException(\"Jenkins URL is malformed\");\n\t}\n\treturn url;\n}", "CodeBleu_score": 59.05466013092963}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\tBitbucketApi bitbucketApi = BitbucketApi.get();\n\tif (bitbucketApi == null) {\n\t\tlistener.getLogger().println(\"Bitbucket plugin is not installed.\");\n\t\treturn;\n\t}\n\tBitbucketBuildStatus buildStatus = new BitbucketBuildStatus(build, listener);\n\tif (buildStatus.isDisabled()) {\n\t\tlistener.getLogger().println(\"Notifications are disabled.\");\n\t\treturn;\n\t}\n\tSCMRevisionState state = build.getAction(SCMRevisionState.class);\n\tif (state == null) {\n\t\tlistener.getLogger().println(\"No SCM revision state found.\");\n\t\treturn;\n\t}\n\tSCMRevision revision = state.getRevision();\n\tif (revision == null) {\n\t\tlistener.getLogger().println(\"No SCM revision found.\");\n\t\treturn;\n\t}\n\tString hash = revision.getHash();\n\tif (StringUtils.isBlank(hash)) {\n\t\tlistener.getLogger().println(\"No SCM revision hash found.\");\n\t\treturn;\n\t}\n\tboolean useBranchName = source.getTraits().get(BranchDiscoveryTrait.class).isUseOrigin();\n\tString buildKey = buildStatus.getBuildKey(useBranchName);\n\tBitbucketCloudApiClient client = bitbucketApi.getClient(source, build, listener);\n\tif (client == null) {\n\t\tlistener.getLogger().println(\"Bitbucket client is not available.\");\n\t\treturn;\n\t}\n\tclient.postBuildStatus(buildKey, hash, buildStatus);\n}", "CodeBleu_score": 38.625997973656}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\tBitbucketBuildStatus buildStatus = new BitbucketBuildStatus(source, build, listener);\n\tSCM scm = build.getParent().getScm();\n\tif (scm instanceof AbstractGitSCMSource) {\n\t\tAbstractGitSCMSource gitSource = (AbstractGitSCMSource) scm;\n\t\tif (gitSource.isDisableStatusNotifications()) {\n\t\t\tlistener.getLogger().println(\"Bitbucket status notifications are disabled for this source.\");\n\t\t\treturn;\n\t\t}\n\t}\n\tSCMRevision revision = build.getAction(SCMRevisionAction.class).getRevision();\n\tif (revision == null) {\n\t\tlistener.getLogger().println(\"No revision information available.\");\n\t\treturn;\n\t}\n\tString revisionHash = revision.getHash();\n\tif (revisionHash == null) {\n\t\tlistener.getLogger().println(\"No revision hash available.\");\n\t\treturn;\n\t}\n\tString revisionType = revision.getType();\n\tif (revisionType == null) {\n\t\tlistener.getLogger().println(\"No revision type available.\");\n\t\treturn;\n\t}\n\tString buildKey = null;\n\tString buildName = null;\n\tString buildUrl = null;\n\tString buildDescription = null;\n\tString buildRef = null;\n\tString buildRefType = null;\n\tif (revisionType.equals(\"PR\")) {\n\t\tbuildKey = build.getParent().getFullName() + \"-PR-\" + revision.getBranch();\n\t\tbuildName = build.getParent().getFullName() + \"-PR-\" + revision.getBranch();\n\t\tbuildUrl = DisplayURLProvider.get().getRunURL(build);\n\t\tbuildDescription = build.getDisplayName();\n\t\tbuildRef = revision.getBranch();\n\t\tbuildRefType = \"BRANCH\";\n\t} else if (revisionType.equals(\"BRANCH\")) {\n\t\tbuildKey = build.getParent().getFullName() + \"-BRANCH-\" + revision.getBranch();\n\t\tbuildName = build.getParent().getFullName() + \"-BRANCH-\" + revision.getBranch();\n\t\tbuildUrl = DisplayURLProvider.get().getRunURL(build);\n\t\tbuildDescription = build.getDisplayName();\n\t\tbuildRef = revision.getBranch();\n\t\tbuildRefType = \"BRANCH\";\n\t} else if (revisionType.equals(\"TAG\")) {\n\t\tbuildKey = build.getParent().", "CodeBleu_score": 38.13619933866639}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\tif (source == null) {\n\t\treturn;\n\t}\n\tBitbucketBuildStatus status = null;\n\tString buildKey = null;\n\tString buildName = null;\n\tString buildUrl = null;\n\tString buildDescription = null;\n\tString commitHash = null;\n\tString repositorySlug = null;\n\tString projectKey = null;\n\tString branch = null;\n\tString pullRequestId = null;\n\tString pullRequestAuthor = null;\n\tString pullRequestAuthorUuid = null;\n\tString pullRequestTitle = null;\n\tString pullRequestDescription = null;\n\tString pullRequestState = null;\n\tString pullRequestFromRef = null;\n\tString pullRequestToRef = null;\n\tString pullRequestLink = null;\n\tString pullRequestSourceBranch = null;\n\tString pullRequestDestinationBranch = null;\n\tString pullRequestDestinationRepository = null;\n\tString pullRequestMergeCommit = null;\n\tString pullRequestAuthorEmail = null;\n\tString pullRequestAuthorDisplayName = null;\n\tString pullRequestAuthorAvatar = null;\n\tString pullRequestAuthorLink = null;\n\tString pullRequestCreatedDate = null;\n\tString pullRequestUpdatedDate = null;\n\tString pullRequestClosedDate = null;\n\tString pullRequestDeclinedDate = null;\n\tString pullRequestMergedDate = null;\n\tString pullRequestCommentCount = null;\n\tString pullRequestVersion = null;\n\tString pullRequestReviewers = null;\n\tString pullRequestParticipants = null;\n\tString pullRequestProperties = null;\n\tString pullRequestLinks = null;\n\tString pullRequestTasks = null;\n\tString pullRequestCommits = null;\n\tString pullRequestDiff = null;\n\tString pullRequestComments = null;\n\tString pullRequestActivity = null;\n\tString pullRequestChanges = null;\n\tString pullRequestDeclinedReviewers = null;\n\tString pullRequestApprovedReviewers = null;\n\tString pullRequestUnapprovedReviewers = null;\n\tString pullRequestOpenTasks = null;\n\tString pullRequestClosedTasks = null;\n\tString pullRequestOpenSubTasks = null;\n\tString pullRequestClosedSubTasks = null;\n\tString pullRequestOpenSubTaskCount = null;\n\tString pullRequestClosedSubTaskCount = null", "CodeBleu_score": 12.054931610958732}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\tString buildKey;\n\tif (shareBuildKeyBetweenBranchAndPR) {\n\t\tbuildKey = build.getParent().getFullName() + \"/\" + branch;\n\t} else {\n\t\tbuildKey = build.getParent().getFullName();\n\t}\n\treturn buildKey;\n}", "CodeBleu_score": 47.264418351467086}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    if (shareBuildKeyBetweenBranchAndPR) {\n-        return build.getParent().getFullName() + \" \" + branch;\n-    } else {\n-        return build.getParent().getFullName();\n-    }\n+    return shareBuildKeyBetweenBranchAndPR? build.getParent().getFullName() + \" \" + branch : build.getParent().getFullName();\n }", "CodeBleu_score": 38.106602961853866}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\tString jobName = build.getParent().getFullName();\n\tString buildKey;\n\tif (shareBuildKeyBetweenBranchAndPR) {\n\t\tbuildKey = jobName + \"_\" + branch;\n\t} else {\n\t\tbuildKey = jobName;\n\t}\n\treturn buildKey;\n}", "CodeBleu_score": 36.99099002269721}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\t\tif (serverUrl == null) {\n\t\tif (Jenkins.getInstance().getPlugin(\"bitbucket-branch-source\")!= null) {\n\t\t\tserverUrl = BitbucketSCMNavigator.DEFAULT_BITBUCKET_SERVER_URL;\n\t\t\tLOGGER.log(Level.WARNING, \"Server URL was not set for Bitbucket SCM Navigator. Defaulting to Bitbucket Server URL.\");\n\t\t} else {\n\t\t\tserverUrl = BitbucketSCMNavigator.DEFAULT_BITBUCKET_CLOUD_URL;\n\t\t\tLOGGER.log(Level.WARNING, \"Server URL was not set for Bitbucket SCM Navigator. Defaulting to Bitbucket Cloud URL.\");\n\t\t}\n\t}\n\tif (traits == null) {\n\t\ttraits = new ArrayList<>();\n\t\ttraits.add(new WildcardSCMHeadFilterTrait(null, null));\n\t\ttraits.add(new RegexSCMSourceFilterTrait(null, null, null));\n\t\ttraits.add(new BitbucketSCMNavigatorTrait());\n\t\ttraits.add(new BitbucketSCMSourceTrait());\n\t}\n\treturn this;\n}", "CodeBleu_score": 21.188288120576974}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t\tif (this.serverUrl == null) {\n\t\tthis.serverUrl = BitbucketSCMNavigator.DEFAULT_BITBUCKET_SERVER_URL;\n\t\tLOGGER.warning(String.format(\"BitbucketSCMNavigator: Server URL is null. Defaulting to %s\", this.serverUrl));\n\t}\n\tif (this.traits == null) {\n\t\tthis.traits = new ArrayList<>();\n\t\tif (this.discoverBranches) {\n\t\t\tthis.traits.add(new BranchDiscoveryTrait(this.discoverBranchesStrategy.create()));\n\t\t}\n\t\tif (this.discoverPRFromForks) {\n\t\t\tthis.traits.add(new ForkPullRequestDiscoveryTrait(this.discoverPRFromForksStrategy.create()));\n\t\t}\n\t\tif (this.discoverPRMergeFromForks) {\n\t\t\tthis.traits.add(new ForkPullRequestDiscoveryTrait(this.discoverPRMergeFromForksStrategy.create()));\n\t\t}\n\t\tif (this.discoverPRFromOrigin) {\n\t\t\tthis.traits.add(new OriginPullRequestDiscoveryTrait(this.discoverPRFromOriginStrategy.create()));\n\t\t}\n\t\tif (this.discoverPRMergeFromOrigin) {\n\t\t\tthis.traits.add(new OriginPullRequestDiscoveryTrait(this.discoverPRMergeFromOriginStrategy.create()));\n\t\t}\n\t}\n\treturn this;\n}", "CodeBleu_score": 17.871402765346783}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t\tif (this.serverUrl == null) {\n\t\tthis.serverUrl = BitbucketSCMNavigator.DEFAULT_BITBUCKET_SERVER_URL;\n\t\tLOGGER.log(Level.WARNING, \"Server URL was null. Setting to default value: {0}\", this.serverUrl);\n\t}\n\tif (this.traits == null) {\n\t\tthis.traits = new NamedArrayList<>(SCMTrait.class);\n\t\tthis.traits.addAll(BitbucketSCMNavigator.DEFAULT_TRAITS);\n\t}\n\treturn this;\n}", "CodeBleu_score": 10.265912373892395}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tif (isMatch) {\n\t\tproposed.add(name);\n\t\tcount++;\n\t} else {\n\t\tignored.add(name);\n\t}\n}", "CodeBleu_score": 19.660729081002405}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tBitbucketSCMNavigatorContext context = getContext();\n\tif (context == null) {\n\t\treturn;\n\t}\n\tBitbucketSCMNavigatorRequest request = context.getRequest();\n\tif (request == null) {\n\t\treturn;\n\t}\n\tBitbucketSCMNavigator navigator = request.getNavigator();\n\tif (navigator == null) {\n\t\treturn;\n\t}\n\tBitbucketSCMNavigatorContext.BitbucketSCMNavigatorRequestContext requestContext = context.getRequestContext();\n\tif (requestContext == null) {\n\t\treturn;\n\t}\n\tBitbucketSCMNavigatorContext.BitbucketSCMNavigatorRequestRepositoryContext repositoryContext = requestContext.getRepositoryContext(name);\n\tif (repositoryContext == null) {\n\t\treturn;\n\t}\n\tif (isMatch) {\n\t\trepositoryContext.propose();\n\t} else {\n\t\trepositoryContext.ignore();\n\t}\n}", "CodeBleu_score": 35.92705271669199}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tif (isMatch) {\n\t\tproposed.add(name);\n\t\tcount++;\n\t} else {\n\t\tignored.add(name);\n\t}\n}", "CodeBleu_score": 19.660729081002405}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tif (marked == null) {\n\t\treturn rev;\n\t}\n\n\t// Check if the revision is a branch with a hash\n\tif (!marked.getBranch().contains(\"/\")) {\n\t\treturn rev;\n\t}\n\n\t// Check if the revision is a commit\n\tif (marked.getSha1String().length() == 40) {\n\t\treturn rev;\n\t}\n\n\t// Get the remote repository URI\n\tURIish remoteURI = null;\n\ttry {\n\t\tremoteURI = new URIish(scm.getRepositories().get(0).getRemote());\n\t} catch (URISyntaxException e) {\n\t\tthrow new GitException(\"Error parsing remote URI\", e);\n\t}\n\n\t// Get the list of branches with hashes\n\tList<String> branchesWithHashes = scm.getBranches().stream()\n\t\t.filter(branch -> branch.contains(\"/\"))\n\t\t.collect(Collectors.toList());\n\n\t// Get the list of branches with hashes that don't exist locally\n\tList<String> missingBranches = branchesWithHashes.stream()\n\t\t.filter(branch ->!git.hasRevision(branch))\n\t\t.collect(Collectors.toList());\n\n\t// Create RefSpecs for the missing branches\n\tList<RefSpec> refSpecs = missingBranches.stream()\n\t\t.map(branch -> new RefSpec(branch))\n\t\t.collect(Collectors.toList());\n\n\t// Fetch the missing branches from the remote repository\n\tif (!refSpecs.isEmpty()) {\n\t\tFetchCommand fetch = git.fetch();\n\t\tfetch.setRemote(remoteURI);\n\t\tfetch.setRefSpecs(refSpecs);\n\t\tfetch.execute();\n\t}\n\n\treturn rev;\n}", "CodeBleu_score": 50.58555511514249}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t// TODO: This is a temporary fix. It should be removed once the Jenkins Git plugin supports fetching commits from a shallow clone.\n\t// This function is only called if the build is a shallow clone.\n\t// If the build is a shallow clone, the marked revision is a hash.\n\t// If the marked revision is a hash, it means that the build is a new branch.\n\t// The Jenkins Git plugin doesn't support fetching commits from a shallow clone.\n\t// So, we need to fetch the missing commits from the remote repository.\n\tif (marked.getSha1String().matches(\"[0-9a-f]{40}\")) {\n\t\t// The marked revision is a hash.\n\t\t// We need to fetch the missing commits from the remote repository.\n\t\t// First, we need to find the branches whose commits don't exist locally.\n\t\t// We do this by listing all branches in the remote repository.\n\t\t// Then, we filter the branches with hashes to find those whose commits don't exist locally.\n\t\t// Finally, we create RefSpecs for the branches whose commits don't exist locally.\n\t\tList<String> branches = git.getRemoteBranchNames();\n\t\tList<String> branchesWithHashes = branches.stream().filter(branch -> branch.matches(\".*[0-9a-f]{40}\")).collect(Collectors.toList());\n\t\tList<RefSpec> refSpecs = branchesWithHashes.stream().map(branch -> new RefSpec(branch)).collect(Collectors.toList());\n\t\t// If there are RefSpecs, we fetch the missing commits from the remote repository using the provided clone link.\n\t\tif (refSpecs.size() > 0) {\n\t\t\ttry {\n\t\t\t\tURIish uri = new URIish(scm.getRepositories().get(0).getURIs().get(0));\n\t\t\t\tFetchCommand fetch = git.fetch().setRemote(uri.toString()).setRefSpecs(refSpecs);\n\t\t\t\tfetch.execute();\n\t\t\t} catch (URISyntaxException e) {\n\t\t\t\tthrow new GitException(e);\n\t\t\t}\n\t\t}\n\t}\n\t// Finally, we return the given revision.\n\treturn rev;\n}", "CodeBleu_score": 49.827792333139286}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\ttry {\n\t\tString cloneLink = scm.getRepositories().get(0).getURIs().get(0).toString();\n\t\tif (cloneLink.contains(\"https://\")) {\n\t\t\tcloneLink = cloneLink.replace(\"https://\", \"https://x-access-token:\" + System.getenv(\"GITHUB_TOKEN\") + \"@\");\n\t\t} else if (cloneLink.contains(\"http://\")) {\n\t\t\tcloneLink = cloneLink.replace(\"http://\", \"http://x-access-token:\" + System.getenv(\"GITHUB_TOKEN\") + \"@\");\n\t\t} else {\n\t\t\tthrow new GitException(\"Unsupported clone link: \" + cloneLink);\n\t\t}\n\n\t\tList<String> branchesWithHashes = scm.getBranches().stream()\n\t\t\t\t.filter(branch -> branch.contains(\":\"))\n\t\t\t\t.collect(Collectors.toList());\n\n\t\tif (branchesWithHashes.isEmpty()) {\n\t\t\treturn rev;\n\t\t}\n\n\t\tList<RefSpec> refSpecs = branchesWithHashes.stream()\n\t\t\t\t.map(branch -> {\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn new RefSpec(new URIish(cloneLink), branch);\n\t\t\t\t\t} catch (URISyntaxException e) {\n\t\t\t\t\t\tthrow new GitException(e);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.filter(refSpec ->!git.hasRevision(refSpec.getDestination()))\n\t\t\t\t.collect(Collectors.toList());\n\n\t\tif (refSpecs.isEmpty()) {\n\t\t\treturn rev;\n\t\t}\n\n\t\tFetchCommand fetch = git.fetch();\n\t\tfor (GitSCMExtension ext : scm.getExtensions()) {\n\t\t\text.decorateFetch(scm, build, git, listener, fetch);\n\t\t}\n\t\tfetch.refSpecs(refSpecs);\n\t\tfetch.execute();\n\n\t\treturn rev;\n\t} catch (GitException e) {\n\t\tthrow new GitException(e);\n\t}\n}", "CodeBleu_score": 47.45503846108856}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tMap<String, BitbucketHref> links = getLinks();\n\tif (links == null) {\n\t\treturn null;\n\t}\n\tMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n\tfor (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n\t\tresult.put(entry.getKey(), entry.getValue().get(0));\n\t}\n\treturn result;\n}", "CodeBleu_score": 64.84055514063417}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tif (links == null) {\n\t\treturn null;\n\t}\n\tMap<String, BitbucketHref> result = new HashMap<>();\n\tfor (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n\t\tresult.put(entry.getKey(), entry.getValue().get(0));\n\t}\n\treturn result;\n}", "CodeBleu_score": 66.13166486182718}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tif (links == null) {\n\t\treturn null;\n\t}\n\tMap<String, BitbucketHref> linksMap = new HashMap<String, BitbucketHref>();\n\tfor (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n\t\tlinksMap.put(entry.getKey(), entry.getValue().get(0));\n\t}\n\treturn linksMap;\n}", "CodeBleu_score": 57.143425188904885}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tconst resources = resourceStates.filter(resource => resource.resourceUri);\n\tif (resources.length === 0) {\n\t\treturn;\n\t}\n\n\tconst uris = resources.map(resource => resource.resourceUri);\n\tconst repositories = await this.getRepositories(uris);\n\n\tfor (const repository of repositories) {\n\t\tconst files = uris.filter(uri => repository.contains(uri)).map(uri => uri.fsPath);\n\t\ttry {\n\t\t\tawait repository.add(files);\n\t\t} catch (error) {\n\t\t\tthis.log.error(error);\n\t\t\twindow.showErrorMessage(`Failed to add ${files.join(\", \")} to the repository.`);\n\t\t}\n\t}\n}", "CodeBleu_score": 54.44817788723214}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tconst selectedResources = resourceStates.length === 0? window.activeTextEditor?.document : resourceStates;\n\tif (!selectedResources) {\n\t\treturn;\n\t}\n\n\tconst selectedResourceUris = selectedResources.map(resource => resource.resourceUri);\n\tconst repositories = this.getRepositories(selectedResourceUris);\n\n\tfor (const repository of repositories) {\n\t\tconst resources = selectedResourceUris.filter(uri => repository.contains(uri));\n\t\tconst filePaths = resources.map(uri => uri.fsPath);\n\n\t\ttry {\n\t\t\tawait repository.add(filePaths);\n\t\t} catch (error) {\n\t\t\tconsole.error(`Failed to add files to repository: ${error}`);\n\t\t\twindow.showErrorMessage(`Failed to add files to repository: ${error}`);\n\t\t}\n\t}\n}", "CodeBleu_score": 46.72562449582974}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tconst selectedResources = resourceStates.length? resourceStates : window.activeTextEditor? [window.activeTextEditor.document.uri] : [];\n\n\tif (!selectedResources.length) {\n\t\treturn;\n\t}\n\n\tconst filePaths = selectedResources.map(resource => resource.resourceUri.fsPath);\n\tconst repository = await this.getRepository(filePaths[0]);\n\n\tif (!repository) {\n\t\treturn;\n\t}\n\n\ttry {\n\t\tawait repository.add(filePaths);\n\t} catch (error) {\n\t\tthis.logger.error(`Unable to add file(s) to repository: ${error}`);\n\t\twindow.showErrorMessage(`Unable to add file(s) to repository: ${error}`);\n\t}\n}", "CodeBleu_score": 46.87465947695323}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\t/**\n * This async function retrieves resource states for source control. It first checks if the provided resource states are empty or if the first resource URI is not an instance of Uri. If so, it attempts to get a single SCM resource and updates the resource states. Finally, it filters and returns the resource states that are instances of Resource.\n */", "CodeBleu_score": 4.903682038680252}, {"code": "protected async getResourceStates{\n\t/**\n * This async function retrieves resource states for source control. It first checks if the provided resource states are empty or if the first resource URI is not an instance of Uri. If so, it attempts to get a single SCM resource and updates the resource states. Finally, it filters and returns the resource states that are instances of Resource.\n */", "CodeBleu_score": 4.903682038680252}, {"code": "protected async getResourceStates{\n\t\n/**\n * This async function retrieves the resource states for source control. It first checks if the provided resource states are empty or if the first resource URI is not an instance of Uri. If so, it attempts to get a single SCM resource and updates the resource states. Finally, it filters and returns the resource states that are instances of Resource.\n */", "CodeBleu_score": 5.044600031615336}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t/**\n * This async function retrieves a source control management (SCM) resource for a given URI. If no URI is provided, it uses the URI of the active text editor. If the URI is in the \"svn\" scheme, it converts it to a file URI. For file URIs, it gets the source control manager and retrieves the repository for the URI, returning the corresponding resource. If no valid URI or repository is found, it returns undefined.\n */\n    uri = uri?? window.activeTextEditor?.document.uri;", "CodeBleu_score": 6.130677506001754}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t/**\n * This function retrieves a source control management (SCM) resource for a given URI. If no URI is provided, it uses the URI of the active text editor. If the URI is in the \"svn\" scheme, it converts it to a file URI. For file URIs, it gets the source control manager and retrieves the repository for the URI, returning the corresponding resource. If no valid URI or repository is found, it returns undefined.\n */\n  protected getSCMResource(uri?: Uri): Resource | undefined {", "CodeBleu_score": 5.8829578939982765}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t/**\n * This async function retrieves a source control management (SCM) resource for a given URI. If no URI is provided, it uses the URI of the active text editor. If the URI is in the \"svn\" scheme, it converts it to a file URI. For file URIs, it gets the source control manager and retrieves the repository for the URI, returning the corresponding resource. If no valid URI or repository is found, it returns undefined.\n */\n  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined> {", "CodeBleu_score": 7.325823122417948}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\t\tconst remote = await this.sourceControlManager.getRemote(element.uri);\n\tif (!remote) {\n\t\treturn;\n\t}\n\n\tconst oldPath = element.status === Status.Added? element.uri.fsPath : remote.oldPath;\n\tconst newPath = element.status === Status.Added? remote.newPath : element.uri.fsPath;\n\tconst oldRevision = element.status === Status.Added? 0 : element.oldRevision;\n\tconst newRevision = element.status === Status.Added? element.newRevision : 0;\n\n\topenDiff(oldPath, oldRevision, newPath, newRevision);\n}", "CodeBleu_score": 39.81886584731166}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t\tconst remote = await this.sourceControlManager.getRemote(element);\n\tif (element.status === Status.MODIFIED) {\n\t\tawait openDiff(\n\t\t\telement.oldPath,\n\t\t\telement.oldRevision,\n\t\t\telement.newPath,\n\t\t\telement.newRevision,\n\t\t\tremote\n\t\t);\n\t} else if (element.status === Status.ADDED) {\n\t\tawait openFileRemote(element.newPath, element.newRevision, remote);\n\t}\n}", "CodeBleu_score": 42.313327954474374}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t/**\n * This async function handles opening a diff command for a given SVN path change element. It retrieves the remote repository for the element. If the element is modified, it opens a diff between the old and new revisions. If the element is added, it opens the remote file at the new path and revision.\n */\n public async openDiffCmd(element: ISvnPathChange) {", "CodeBleu_score": 6.389270377188113}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!env.clipboard) {\n\t\twindow.showErrorMessage(\"Clipboard is not supported\");\n\t\treturn;\n\t}\n\n\tif (item.type === \"commit\") {\n\t\tif (what === \"message\") {\n\t\t\tawait env.clipboard.writeText(item.commit.message);\n\t\t\twindow.showInformationMessage(\"Commit message copied to clipboard\");\n\t\t} else {\n\t\t\tawait env.clipboard.writeText(item.commit.revision.toString());\n\t\t\twindow.showInformationMessage(\"Commit revision copied to clipboard\");\n\t\t}\n\t}\n}", "CodeBleu_score": 31.296082210493736}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!env.clipboard) {\n\t\twindow.showErrorMessage(\"Clipboard is not supported\");\n\t\treturn;\n\t}\n\n\tif (what === \"commit\") {\n\t\tconst commitMessage = await SvnRI.getCommitMessage(item.log.revision);\n\t\tawait env.clipboard.writeText(commitMessage);\n\t} else if (what === \"revision\") {\n\t\tawait env.clipboard.writeText(item.log.revision.toString());\n\t}\n}", "CodeBleu_score": 41.10763573157467}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!env.clipboard) {\n\t\twindow.showErrorMessage(\"Clipboard not supported\");\n\t\treturn;\n\t}\n\n\tif (what === \"revision\") {\n\t\tawait env.clipboard.writeText(item.revision.toString());\n\t} else {\n\t\tawait env.clipboard.writeText(item.message);\n\t}\n}", "CodeBleu_score": 26.38385896989416}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t\tGiteaConnectionFactory factory = null;\n\tfor (GiteaConnectionFactory f : ServiceLoader.load(GiteaConnectionFactory.class)) {\n\t\tif (f.canOpen(this)) {\n\t\t\tif (factory == null || f.getPriority() > factory.getPriority()) {\n\t\t\t\tfactory = f;\n\t\t\t}\n\t\t}\n\t}\n\tif (factory == null) {\n\t\tthrow new IOException(\"Unable to open Gitea connection\");\n\t}\n\treturn factory.open(this);\n}", "CodeBleu_score": 29.380069288954008}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t\tfor (GiteaConnectionFactory factory : ServiceLoader.load(GiteaConnectionFactory.class)) {\n\t\tif (factory.isApplicable(this)) {\n\t\t\treturn factory.open(this);\n\t\t}\n\t}\n\tthrow new IOException(\"No applicable GiteaConnectionFactory found\");\n}", "CodeBleu_score": 17.50260676810648}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t\tfor (GiteaConnectionFactory factory : ServiceLoader.load(GiteaConnectionFactory.class)) {\n\t\tif (factory.isAvailable()) {\n\t\t\tGiteaConnection connection = factory.open(this);\n\t\t\tif (connection!= null) {\n\t\t\t\treturn connection;\n\t\t\t}\n\t\t}\n\t}\n\tthrow new IOException(\"No GiteaConnectionFactory available\");\n}", "CodeBleu_score": 23.19515826649445}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tGitea gitea = new Gitea();\n\tClassLoader classLoader = Jenkins.getInstanceOrNull()!= null? Jenkins.getInstance().getPluginManager().uberClassLoader : Gitea.class.getClassLoader();\n\tgitea.setClassLoader(classLoader);\n\treturn gitea;\n}", "CodeBleu_score": 42.93862006790705}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tJenkins jenkins = Jenkins.getInstanceOrNull();\n\tClassLoader classLoader = jenkins!= null? jenkins.getPluginManager().uberClassLoader : Gitea.class.getClassLoader();\n\treturn new Gitea(classLoader);\n}", "CodeBleu_score": 52.868347028789344}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tGitea gitea = new Gitea();\n\tClassLoader classLoader = Jenkins.get().getPluginManager().uberClassLoader;\n\tif (classLoader == null) {\n\t\tclassLoader = Gitea.class.getClassLoader();\n\t}\n\tgitea.setClassLoader(classLoader);\n\treturn gitea;\n}", "CodeBleu_score": 40.60785862487291}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\tthis.displayName = Util.fixEmptyAndTrim(displayName);\n\tthis.serverUrl = Util.fixEmptyAndTrim(serverUrl);\n\tthis.manageHooks = manageHooks;\n\tthis.credentialsId = Util.fixEmptyAndTrim(credentialsId);\n\tthis.aliasUrl = Util.fixEmptyAndTrim(aliasUrl);\n\tthis.normalize();\n}", "CodeBleu_score": 34.00723005763113}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\tthis.displayName = Util.fixEmpty(displayName);\n\tthis.serverUrl = Util.fixEmptyAndTrim(serverUrl);\n\tthis.manageHooks = manageHooks;\n\tthis.credentialsId = Util.fixEmptyAndTrim(credentialsId);\n\tthis.aliasUrl = Util.fixEmptyAndTrim(aliasUrl);\n\tif (this.aliasUrl!= null) {\n\t\tthis.aliasUrl = this.aliasUrl.replaceAll(\"^http://\", \"https://\");\n\t\tthis.aliasUrl = this.aliasUrl.replaceAll(\"/$\", \"\");\n\t}\n}", "CodeBleu_score": 40.25229859542419}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\tthis.displayName = Util.fixEmptyAndTrim(displayName);\n\tthis.serverUrl = Util.fixEmptyAndTrim(serverUrl);\n\tthis.manageHooks = manageHooks;\n\tthis.credentialsId = Util.fixEmptyAndTrim(credentialsId);\n\tthis.aliasUrl = Util.fixEmptyAndTrim(aliasUrl);\n\tif (this.aliasUrl!= null) {\n\t\tthis.aliasUrl = this.aliasUrl.trim();\n\t}\n\tif (this.serverUrl!= null) {\n\t\tthis.serverUrl = this.serverUrl.trim();\n\t}\n\tif (this.displayName == null) {\n\t\tthis.displayName = Util.fixEmptyAndTrim(getDisplayNameFromUrl());\n\t}\n\tif (this.credentialsId!= null) {\n\t\tthis.credentialsId = this.credentialsId.trim();\n\t}\n}", "CodeBleu_score": 39.75463279693575}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\t// If the user has administrative permissions, normalize the server URL and include matching credentials based on the server URL requirements and authentication tokens for GiteaAuth.\n\tif (Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n\t\tserverUrl = Util.fixEmptyAndTrim(serverUrl);\n\t\tserverUrl = GiteaServerConfig.normalizeServerUrl(serverUrl);\n\t\treturn new StandardListBoxModel()\n\t\t\t\t.withEmptySelection()\n\t\t\t\t.withMatching(\n\t\t\t\t\t\tCredentialsMatchers.anyOf(\n\t\t\t\t\t\t\t\tCredentialsMatchers.instanceOf(StandardUsernamePasswordCredentials.class),\n\t\t\t\t\t\t\t\tCredentialsMatchers.instanceOf(GiteaAuth.class)\n\t\t\t\t\t\t),\n\t\t\t\t\t\tCredentialsProvider.lookupCredentials(\n\t\t\t\t\t\t\t\tStandardCredentials.class,\n\t\t\t\t\t\t\t\tJenkins.get(),\n\t\t\t\t\t\t\t\tACL.SYSTEM,\n\t\t\t\t\t\t\t\tURIRequirementBuilder.fromUri(serverUrl).build()\n\t\t\t\t\t\t)\n\t\t\t\t);\n\t}\n\t// Otherwise, return an empty list.\n\treturn new ListBoxModel();\n}", "CodeBleu_score": 46.60446917004051}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\treturn new StandardListBoxModel()\n\t\t.withEmptySelection()\n\t\t.withMatching(\n\t\t\tCredentialsMatchers.anyOf(\n\t\t\t\tCredentialsMatchers.instanceOf(StandardUsernamePasswordCredentials.class),\n\t\t\t\tCredentialsMatchers.instanceOf(GiteaToken.class)\n\t\t\t),\n\t\t\tCredentialsProvider.lookupCredentials(\n\t\t\t\tStandardCredentials.class,\n\t\t\t\tJenkins.get(),\n\t\t\t\tACL.SYSTEM,\n\t\t\t\tURIRequirementBuilder.fromUri(serverUrl).build()\n\t\t\t)\n\t\t);\n}", "CodeBleu_score": 32.344145260605536}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tif (Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n\t\ttry {\n\t\t\tserverUrl = Util.fixEmptyAndTrim(serverUrl);\n\t\t\tif (serverUrl!= null) {\n\t\t\t\tserverUrl = new URI(serverUrl).normalize().toString();\n\t\t\t}\n\t\t\treturn new StandardListBoxModel()\n\t\t\t\t\t.withEmptySelection()\n\t\t\t\t\t.withMatching(\n\t\t\t\t\t\t\tCredentialsMatchers.anyOf(\n\t\t\t\t\t\t\t\t\tCredentialsMatchers.instanceOf(StandardUsernamePasswordCredentials.class),\n\t\t\t\t\t\t\t\t\tCredentialsMatchers.instanceOf(GiteaToken.class)\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tCredentialsProvider.lookupCredentials(\n\t\t\t\t\t\t\t\t\tStandardCredentials.class,\n\t\t\t\t\t\t\t\t\tJenkins.get(),\n\t\t\t\t\t\t\t\t\tACL.SYSTEM,\n\t\t\t\t\t\t\t\t\tURIRequirementBuilder.fromUri(serverUrl).build()\n\t\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t} catch (URISyntaxException e) {\n\t\t\t// ignore\n\t\t}\n\t}\n\treturn new ListBoxModel();\n}", "CodeBleu_score": 46.316743733667224}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (StringUtils.isBlank(serverUrl)) {\n\t\treturn serverUrl;\n\t}\n\ttry {\n\t\tURI uri = new URI(serverUrl);\n\t\tString scheme = uri.getScheme().toLowerCase(Locale.ENGLISH);\n\t\tString host = uri.getHost().toLowerCase(Locale.ENGLISH);\n\t\tint port = uri.getPort();\n\t\tif ((port!= -1) && ((port == 80 && \"http\".equals(scheme)) || (port == 443 && \"https\".equals(scheme)))) {\n\t\t\tport = -1;\n\t\t}\n\t\tString path = uri.getPath();\n\t\tif (path!= null && path.endsWith(\"/\")) {\n\t\t\tpath = path.substring(0, path.length() - 1);\n\t\t}\n\t\treturn (new URI(scheme, null, host, port, path, uri.getQuery(), uri.getFragment())).toString();\n\t} catch (URISyntaxException e) {\n\t\t// ignore\n\t}\n\treturn serverUrl;\n}", "CodeBleu_score": 44.29194740292351}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (StringUtils.isBlank(serverUrl)) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tURI uri = new URI(serverUrl);\n\t\tString scheme = uri.getScheme();\n\t\tString host = uri.getHost();\n\t\tint port = uri.getPort();\n\t\tString path = uri.getPath();\n\t\tString query = uri.getQuery();\n\t\tString fragment = uri.getFragment();\n\t\tString normalizedScheme = scheme.toLowerCase(Locale.ROOT);\n\t\tString normalizedHost = host.toLowerCase(Locale.ROOT);\n\t\tint normalizedPort = port;\n\t\tif (port == -1) {\n\t\t\tif (normalizedScheme.equals(\"http\")) {\n\t\t\t\tnormalizedPort = 80;\n\t\t\t} else if (normalizedScheme.equals(\"https\")) {\n\t\t\t\tnormalizedPort = 443;\n\t\t\t}\n\t\t}\n\t\tString normalizedPath = path;\n\t\tif (normalizedPath!= null && normalizedPath.endsWith(\"/\")) {\n\t\t\tnormalizedPath = normalizedPath.substring(0, normalizedPath.length() - 1);\n\t\t}\n\t\treturn new URI(normalizedScheme, normalizedHost, normalizedPort, normalizedPath, query, fragment).toString();\n\t} catch (URISyntaxException e) {\n\t\t// Ignore exception and return original URL\n\t\treturn serverUrl;\n\t}\n}", "CodeBleu_score": 41.97693248930695}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (StringUtils.isBlank(serverUrl)) {\n\t\treturn serverUrl;\n\t}\n\n\ttry {\n\t\tURI uri = new URI(serverUrl);\n\t\tString scheme = uri.getScheme();\n\t\tString host = uri.getHost();\n\t\tint port = uri.getPort();\n\t\tString path = uri.getPath();\n\t\tString query = uri.getQuery();\n\t\tString fragment = uri.getFragment();\n\n\t\t// Convert the scheme to lowercase\n\t\tscheme = scheme.toLowerCase(Locale.ROOT);\n\n\t\t// Remove default ports\n\t\tif (port!= -1) {\n\t\t\tif (scheme.equals(\"http\") && port == 80) {\n\t\t\t\tport = -1;\n\t\t\t} else if (scheme.equals(\"https\") && port == 443) {\n\t\t\t\tport = -1;\n\t\t\t}\n\t\t}\n\n\t\t// Build the normalized URL\n\t\tStringBuilder normalizedUrl = new StringBuilder();\n\t\tnormalizedUrl.append(scheme).append(\"://\").append(host);\n\t\tif (port!= -1) {\n\t\t\tnormalizedUrl.append(':').append(port);\n\t\t}\n\t\tnormalizedUrl.append(path);\n\t\tif (query!= null) {\n\t\t\tnormalizedUrl.append('?').append(query);\n\t\t}\n\t\tif (fragment!= null) {\n\t\t\tnormalizedUrl.append('#').append(fragment);\n\t\t}\n\n\t\t// Remove trailing slash\n\t\tif (normalizedUrl.charAt(normalizedUrl.length() - 1) == '/') {\n\t\t\tnormalizedUrl.deleteCharAt(normalizedUrl.length() - 1);\n\t\t}\n\n\t\treturn normalizedUrl.toString();\n\t} catch (URISyntaxException e) {\n\t\t// Ignore the exception and return the original URL\n\t\treturn serverUrl;\n\t}\n}", "CodeBleu_score": 45.8720235863997}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\t\tListBoxModel items = new ListBoxModel();\n\tList<GiteaServer> servers = getServers();\n\tfor (GiteaServer server : servers) {\n\t\tString displayName = server.getDisplayName();\n\t\tif (StringUtils.isBlank(displayName)) {\n\t\t\titems.add(server.getBaseUrl(), server.getBaseUrl());\n\t\t} else {\n\t\t\titems.add(displayName, server.getBaseUrl());\n\t\t}\n\t}\n\treturn items;\n}", "CodeBleu_score": 45.75317161930455}, {"code": "public ListBoxModel getServerItems(){\n\t\tListBoxModel items = new ListBoxModel();\n\tfor (GiteaServer server : getServers()) {\n\t\tString name = server.getDisplayName();\n\t\tString url = server.getUrl();\n\t\tif (StringUtils.isBlank(name)) {\n\t\t\titems.add(url);\n\t\t} else {\n\t\t\titems.add(name, url);\n\t\t}\n\t}\n\treturn items;\n}", "CodeBleu_score": 47.08595549409617}, {"code": "public ListBoxModel getServerItems(){\n\t\tListBoxModel items = new ListBoxModel();\n\tfor (GiteaServer server : GiteaServer.all()) {\n\t\tString displayName = server.getDisplayName();\n\t\tif (displayName == null || displayName.isEmpty()) {\n\t\t\tdisplayName = server.getUrl();\n\t\t}\n\t\titems.add(displayName, server.getUrl());\n\t}\n\treturn items;\n}", "CodeBleu_score": 41.998343821768486}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tif (servers == null) {\n\t\treturn;\n\t}\n\tif (servers.isEmpty()) {\n\t\treturn;\n\t}\n\tif (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n\t\treturn;\n\t}\n\tList<GiteaServer> serverList = new ArrayList<>();\n\tfor (GiteaServer server : servers) {\n\t\tif (server!= null &&!StringUtils.isEmpty(server.getUrl())) {\n\t\t\tserverList.add(server);\n\t\t}\n\t}\n\tif (serverList.isEmpty()) {\n\t\treturn;\n\t}\n\tSet<String> urls = new HashSet<>();\n\tListIterator<GiteaServer> iterator = serverList.listIterator();\n\twhile (iterator.hasNext()) {\n\t\tGiteaServer server = iterator.next();\n\t\tif (urls.contains(server.getUrl())) {\n\t\t\titerator.remove();\n\t\t} else {\n\t\t\turls.add(server.getUrl());\n\t\t}\n\t}\n\tthis.servers = serverList;\n\tsave();\n}", "CodeBleu_score": 41.656051631395364}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tif (servers == null) {\n\t\treturn;\n\t}\n\n\t// Check for admin permissions\n\tif (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n\t\treturn;\n\t}\n\n\t// Remove duplicates and empty URLs\n\tSet<GiteaServer> serverSet = new HashSet<>();\n\tfor (GiteaServer server : servers) {\n\t\tif (StringUtils.isBlank(server.getUrl())) {\n\t\t\tcontinue;\n\t\t}\n\t\tserverSet.add(server);\n\t}\n\n\t// Update the servers\n\tthis.servers.clear();\n\tthis.servers.addAll(serverSet);\n\n\t// Save the configuration\n\tsave();\n}", "CodeBleu_score": 31.704930432259772}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tif (servers == null) {\n\t\treturn;\n\t}\n\tif (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n\t\treturn;\n\t}\n\tSet<String> urls = new HashSet<>();\n\tList<GiteaServer> newServers = new ArrayList<>();\n\tfor (GiteaServer server : servers) {\n\t\tString url = server.getUrl();\n\t\tif (StringUtils.isBlank(url)) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (urls.contains(url)) {\n\t\t\tcontinue;\n\t\t}\n\t\turls.add(url);\n\t\tnewServers.add(server);\n\t}\n\tthis.servers = newServers;\n\tsave();\n}", "CodeBleu_score": 38.3250796807549}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn false;\n\t}\n\n\tserverUrl = Util.fixEmptyAndTrim(serverUrl);\n\tif (serverUrl == null) {\n\t\treturn false;\n\t}\n\n\tserverUrl = normalizeServerUrl(serverUrl);\n\n\tListIterator<GiteaServer> iterator = getServers().listIterator();\n\twhile (iterator.hasNext()) {\n\t\tGiteaServer server = iterator.next();\n\t\tif (serverUrl.equals(server.getServerUrl())) {\n\t\t\titerator.remove();\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 44.2181116306029}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn false;\n\t}\n\tString normalizedUrl = normalizeServerUrl(serverUrl);\n\tif (normalizedUrl == null) {\n\t\treturn false;\n\t}\n\tListIterator<GiteaServer> iterator = servers.listIterator();\n\twhile (iterator.hasNext()) {\n\t\tGiteaServer server = iterator.next();\n\t\tif (server.getBaseUrl().equals(normalizedUrl)) {\n\t\t\titerator.remove();\n\t\t\tsetServers(servers);\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 35.13629092447632}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t\tserverUrl = Util.fixEmptyAndTrim(serverUrl);\n\tif (StringUtils.isBlank(serverUrl)) {\n\t\treturn false;\n\t}\n\tURI serverUri = normalizeServerUrl(serverUrl);\n\tif (serverUri == null) {\n\t\treturn false;\n\t}\n\tListIterator<GiteaServer> iterator = servers.listIterator();\n\twhile (iterator.hasNext()) {\n\t\tGiteaServer server = iterator.next();\n\t\tif (server.getServerUrl().equals(serverUri)) {\n\t\t\titerator.remove();\n\t\t\tupdateServerList();\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 39.15163398432918}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t\tfor (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {\n\t\tif (element.getKind() == ElementKind.METHOD) {\n\t\t\tExecutableElement executableElement = (ExecutableElement) element;\n\t\t\tString type = executableElement.getReturnType().toString();\n\t\t\tString name = executableElement.getSimpleName().toString();\n\t\t\tString description = getAnnotationValue(executableElement, \"description\");\n\t\t\tboolean required = getAnnotationValue(executableElement, \"required\");\n\t\t\tboolean sensitive = getAnnotationValue(executableElement, \"sensitive\");\n\t\t\tString defaultValue = getAnnotationValue(executableElement, \"defaultValue\");\n\t\t\tString[] options = getAnnotationValue(executableElement, \"options\");\n\t\t\tString[] groups = getAnnotationValue(executableElement, \"groups\");\n\t\t\tdescriptorElements.add(new ConfigElement(name, type, description, required, sensitive, defaultValue, options, groups));\n\t\t}\n\t}\n}", "CodeBleu_score": 32.105841408941174}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t\tfor (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {\n\t\tif (element.getKind()!= ElementKind.FIELD) {\n\t\t\tthrow new IllegalArgumentException(\"Only fields can be annotated with \" + annotation.getSimpleName());\n\t\t}\n\n\t\tVariableElement field = (VariableElement) element;\n\t\tString type = field.asType().toString();\n\t\tString name = field.getSimpleName().toString();\n\t\tString description = \"\";\n\t\tboolean required = false;\n\t\tboolean secure = false;\n\n\t\tfor (AnnotationMirror annotationMirror : field.getAnnotationMirrors()) {\n\t\t\tif (annotationMirror.getAnnotationType().asElement().equals(annotation)) {\n\t\t\t\tMap<String, AnnotationValue> attributes = Maps.uniqueIndex(annotationMirror.getElementValues().entrySet(), entry -> entry.getKey().getSimpleName().toString());\n\n\t\t\t\tif (attributes.containsKey(\"name\")) {\n\t\t\t\t\tname = attributes.get(\"name\").getValue().toString();\n\t\t\t\t}\n\n\t\t\t\tif (attributes.containsKey(\"description\")) {\n\t\t\t\t\tdescription = attributes.get(\"description\").getValue().toString();\n\t\t\t\t}\n\n\t\t\t\tif (attributes.containsKey(\"required\")) {\n\t\t\t\t\trequired = (Boolean) attributes.get(\"required\").getValue();\n\t\t\t\t}\n\n\t\t\t\tif (attributes.containsKey(\"secure\")) {\n\t\t\t\t\tsecure = (Boolean) attributes.get(\"secure\").getValue();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdescriptorElements.add(new DescriptorElement(name, type, description, required, secure));\n\t}\n}", "CodeBleu_score": 32.36643363887101}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t\tSet<? extends Element> annotatedElements = roundEnv.getElementsAnnotatedWith(annotation);\n\tfor (Element annotatedElement : annotatedElements) {\n\t\tif (annotatedElement.getKind()!= ElementKind.FIELD) {\n\t\t\terror(annotatedElement, \"Only fields can be annotated with @%s\", annotation.getSimpleName());\n\t\t\tcontinue;\n\t\t}\n\t\tVariableElement variableElement = (VariableElement) annotatedElement;\n\t\tString type = variableElement.asType().toString();\n\t\tAnnotationMirror annotationMirror = getAnnotationMirror(annotatedElement, annotation);\n\t\tMap<String, String> attributes = getAnnotationAttributes(annotationMirror);\n\t\tattributes.put(DescriptorElement.ATTR_TYPE, type);\n\t\tdescriptorElements.add(new DescriptorElement(attributes));\n\t}\n}", "CodeBleu_score": 48.93124319143693}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\tString annotationClassName = annotationClass.getName().replace(\"$\", \".\");\n\tfor (TypeElement annotation : annotations) {\n\t\tif (annotation.getQualifiedName().toString().equals(annotationClassName)) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 42.74998409529672}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\tfor (TypeElement annotation : annotations) {\n\t\tString annotationName = annotation.getQualifiedName().toString();\n\t\tif (annotationName.equals(annotationClass.getName()) || annotationName.replace('$', '.').equals(annotationClass.getName())) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 38.84740368321455}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\tString annotationClassName = annotationClass.getCanonicalName().replace('$', '.');\n\n\tfor (TypeElement annotation : annotations) {\n\t\tif (annotation.getQualifiedName().contentEquals(annotationClassName)) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\n\treturn null;\n}", "CodeBleu_score": 37.68059054702895}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters: dict[str, Any] = {\"employee\": employee, \"docstatus\": 1}\n    if for_approval:\n        filters[\"status\"] = \"Open\"\n        if approver_id:\n            filters[\"approver_id\"] = approver_id\n            filters[\"status\"] = \"Pending Approval\"\n        else:\n            workflow_name = get_workflow_name(\"Leave Application\")\n            if workflow_name:\n                filters[\"workflow_state\"] = [\n                    (\"not in\", [\"Approved\", \"Rejected\"])\n                ]\n            else:\n                filters[\"status\"] = \"Pending Approval\"\n    else:\n        filters[\"status\"] = (\"not in\", [\"Cancelled\", \"Rejected\"])\n    return filters\n\n", "CodeBleu_score": 27.723145039259073}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"docstatus\": 1,\n        \"employee\": employee,\n        \"status\": \"Open\",\n    }\n\n    if for_approval:\n        filters[\"status\"] = \"Open\"\n        if approver_id:\n            filters[\"approver_id\"] = approver_id\n        else:\n            filters[\"approver_id\"] = frappe.session.user\n\n        # get workflow name\n        workflow_name = get_workflow_name(\"Leave Application\")\n        if workflow_name:\n            # get workflow states\n            workflow_states = frappe.get_all(\n                \"Workflow State\",\n                filters={\"workflow\": workflow_name},\n                fields=[\"name\", \"state\"],\n            )\n            # get pending approval states\n            pending_approval_states = [\n                state[\"name\"]\n                for state in workflow_states\n                if state[\"state\"] == \"Pending Approval\"\n            ]\n            if pending_approval_states:\n                filters[\"workflow_state\"] = (\"in\", pending_approval_states)\n            else:\n                filters[\"workflow_state\"] = \"Open\"\n        else:\n            filters[\"workflow_state\"] = \"Open\"\n    else:\n        filters[\"status\"] = (\"!=\", \"Cancelled\")\n\n    return filters\n\n", "CodeBleu_score": 31.978511220320133}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\"employee\": employee}\n\n    if for_approval:\n        if approver_id:\n            filters[\"approver_id\"] = approver_id\n        filters[\"status\"] = [\"in\", [\"Open\", \"Approved\"]]\n        filters[\"workflow_state\"] = [\"!=\", \"Rejected\"]\n    else:\n        filters[\"status\"] = [\"!=\", \"Cancelled\"]\n\n    return filters\n\n", "CodeBleu_score": 24.133939187877502}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    from erpnext.hr.doctype.leave_application.leave_application import get_leave_details\n\n    current_date = getdate()\n    leave_details = get_leave_details(employee, current_date)\n\n    leave_balance_map = {}\n    for leave_detail in leave_details:\n        leave_balance_map[leave_detail.leave_type] = {\n            \"allocated_leaves\": leave_detail.allocated_leaves,\n            \"leave_balance\": leave_detail.leave_balance,\n        }\n\n    return leave_balance_map\n\n", "CodeBleu_score": 42.92544011718281}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    date = getdate()\n    leave_details = get_leave_details(employee, date)\n    leave_balance_map = {}\n    for leave_type, leave_balance in leave_details.items():\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_balance.allocated_leave_balance,\n            \"balance\": leave_balance.leave_balance,\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 42.82097500394961}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    today = getdate()\n    leave_details = get_leave_details(employee, today)\n    leave_balance_map = {}\n    for leave_detail in leave_details:\n        leave_balance_map[leave_detail.leave_type] = {\n            \"allocated_leaves\": leave_detail.allocated_leaves,\n            \"balance_leaves\": leave_detail.balance_leaves,\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 39.0467106956607}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.db.get_value(\"Employee\", employee, \"holiday_list\")\n    if not holiday_list:\n        return []\n\n    holidays = frappe.get_all(\n        \"Holiday\",\n        filters={\n            \"parent\": holiday_list,\n            \"holiday_date\": [\">=\", getdate()],\n            \"is_weekly_off\": 0,\n        },\n        order_by=\"holiday_date\",\n    )\n\n    for holiday in holidays:\n        holiday.description = strip_html(holiday.description)\n\n    return holidays\n\n", "CodeBleu_score": 33.59378790447948}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.get_all(\"Holiday List\", filters={\"employee\": employee})\n    if not holiday_list:\n        return []\n\n    holidays = frappe.get_all(\n        \"Holiday\",\n        filters={\n            \"holiday_list\": holiday_list[0].name,\n            \"docstatus\": 1,\n            \"holiday_date\": (\"!=\", None),\n            \"holiday_date\": (\"not in\", get_weekly_off_dates()),\n        },\n        order_by=\"holiday_date\",\n    )\n\n    for holiday in holidays:\n        holiday.description = strip_html(holiday.description)\n\n    return holidays\n\n", "CodeBleu_score": 35.66623785077594}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.db.get_value(\"Employee\", employee, \"holiday_list\")\n    if not holiday_list:\n        return []\n\n    holidays = frappe.get_all(\n        \"Holiday\",\n        filters={\n            \"parent\": holiday_list,\n            \"holiday_date\": [\">=\", getdate()],\n            \"docstatus\": 1,\n        },\n        fields=[\"name\", \"description\", \"holiday_date\"],\n        order_by=\"holiday_date\",\n    )\n\n    for holiday in holidays:\n        holiday.description = strip_html(holiday.description)\n\n    return holidays\n\n", "CodeBleu_score": 36.54031489525415}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t\n    if not frappe.db.get_single_value(\"HR Settings\", \"send_weekly_reminders\"):\n        return\n\n    if not frappe.db.get_single_value(\"HR Settings\", \"reminders_frequency\") == \"Weekly\":\n        return\n\n    send_reminders_in_advance()\n\n", "CodeBleu_score": 31.487001183208672}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    settings = frappe.get_single(\"HR Settings\")\n    if settings.send_holiday_reminders and settings.holiday_reminder_frequency == \"Weekly\":\n        send_holiday_reminders(settings.holiday_reminder_days_in_advance)\n\n", "CodeBleu_score": 19.18252345090379}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    # Get the HR settings\n    hr_settings = frappe.get_single(\"HR Settings\")\n\n    # Check if reminders are enabled and the frequency is set to \"Weekly\"\n    if hr_settings.send_holiday_reminders and hr_settings.holiday_reminder_frequency == \"Weekly\":\n        # Send the reminders\n        send_holiday_reminders(hr_settings.holiday_reminder_in_advance_days)\n\n", "CodeBleu_score": 19.595928933655014}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t\n    self.self_appraisal_score = flt(\n        sum(\n            [\n                (rating.rating * 5 * (rating.weightage / 100))\n                for rating in self.self_appraisal_ratings\n            ],\n            0,\n        ),\n        precision=2,\n    )\n\n", "CodeBleu_score": 17.38389229579387}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self.self_appraisal_score = 0\n    for rating in self.self_ratings:\n        self.self_appraisal_score += flt(rating.rating) * flt(rating.weightage) / 100\n    self.self_appraisal_score = flt(self.self_appraisal_score, precision=2)\n\n", "CodeBleu_score": 27.70925557606967}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self.self_appraisal_score = 0\n    for rating in self.self_ratings:\n        self.self_appraisal_score += flt(rating.rating) * flt(rating.weightage) / 100\n    self.self_appraisal_score = flt(self.self_appraisal_score, precision=2)\n\n", "CodeBleu_score": 27.70925557606967}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle.calculate_final_score_based_on_formula:\n        data = self.get_data_for_final_score_calculation()\n        formula = appraisal_cycle.final_score_formula\n        formula = sanitize_expression(formula, data)\n        final_score = flt(eval(formula), self.precision(\"final_score\"))\n    else:\n        final_score = flt(\n            (\n                self.total_score\n                + self.average_feedback_score\n                + self.self_appraisal_score\n            )\n            / 3,\n            self.precision(\"final_score\"),\n        )\n    self.final_score = final_score\n\n", "CodeBleu_score": 29.851215330137432}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle.calculate_final_score_based_on_formula:\n        formula = appraisal_cycle.final_score_formula\n        if not formula:\n            frappe.throw(_(\"Formula is mandatory to calculate final score based on formula\"))\n\n        data = {\n            \"total_score\": self.total_score,\n            \"average_feedback_score\": self.average_feedback_score,\n            \"self_appraisal_score\": self.self_appraisal_score,\n        }\n        sanitized_formula = sanitize_expression(formula, data)\n        final_score = eval(sanitized_formula)\n    else:\n        final_score = flt(\n            (self.total_score + self.average_feedback_score + self.self_appraisal_score) / 3,\n            precision=appraisal_cycle.precision,\n        )\n    self.final_score = final_score\n\n", "CodeBleu_score": 34.52135894050602}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle.calculate_final_score_using_formula:\n        total_score = 0\n        average_feedback_score = 0\n        self_appraisal_score = 0\n        for appraisal_item in self.appraisal_items:\n            total_score += appraisal_item.total_score\n            average_feedback_score += appraisal_item.average_feedback_score\n            self_appraisal_score += appraisal_item.self_appraisal_score\n        total_score /= len(self.appraisal_items)\n        average_feedback_score /= len(self.appraisal_items)\n        self_appraisal_score /= len(self.appraisal_items)\n        formula = sanitize_expression(appraisal_cycle.final_score_formula)\n        final_score = eval(formula)\n        self.final_score = flt(final_score, precision=appraisal_cycle.final_score_precision)\n    else:\n        total_score = Avg(\"total_score\")\n        average_feedback_score = Avg(\"average_feedback_score\")\n        self_appraisal_score = Avg(\"self_appraisal_score\")\n        self.final_score = flt(\n            (total_score + average_feedback_score + self_appraisal_score) / 3,\n            precision=appraisal_cycle.final_score_precision,\n        )\n\n", "CodeBleu_score": 31.89344912892781}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > nowdate():\n        if self.status!= \"On Leave\":\n            if not self.leave_application:\n                frappe.throw(_(\"Attendance cannot be marked for future dates unless the status is 'On Leave' and there is no leave application\"))\n    if self.employee:\n        employee = frappe.get_doc(\"Employee\", self.employee)\n        if self.attendance_date < employee.date_of_joining:\n            frappe.throw(_(\"Attendance cannot be marked for dates before the employee's date of joining\"))\n\n", "CodeBleu_score": 32.05156901073648}, {"code": "def validate_attendance_date(self)\n\t\n    if self.status == \"On Leave\":\n        leave_application = frappe.db.exists(\n            \"Leave Application\",\n            {\"employee\": self.employee, \"from_date\": self.attendance_date},\n        )\n        if not leave_application:\n            frappe.throw(_(\"Attendance cannot be marked for future dates unless there is a leave application\"))\n    if getdate(self.date_of_joining) > self.attendance_date:\n        frappe.throw(_(\"Attendance cannot be marked for dates before the employee's date of joining\"))\n\n", "CodeBleu_score": 36.37886367534367}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > nowdate():\n        if self.status!= \"On Leave\":\n            if not frappe.db.exists(\n                \"Leave Application\",\n                {\n                    \"employee\": self.employee,\n                    \"status\": \"Approved\",\n                    \"from_date\": [\"<=\", self.attendance_date],\n                    \"to_date\": [\">=\", self.attendance_date],\n                },\n            ):\n                frappe.throw(\n                    _(\"Attendance cannot be marked for future dates unless the employee is on leave and there is no leave application\")\n                )\n    if self.attendance_date < self.employee_detail.date_of_joining:\n        frappe.throw(\n            _(\"Attendance date cannot be earlier than employee's date of joining\")\n        )\n\n", "CodeBleu_score": 30.235119947737033}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\t\n    if self.employee and self.attendance_date:\n        duplicate_attendance = frappe.get_all(\n            \"Attendance\",\n            filters={\n                \"employee\": self.employee,\n                \"attendance_date\": self.attendance_date,\n            },\n            fields=[\"name\"],\n        )\n        if len(duplicate_attendance) > 1:\n            duplicate_attendance_link = get_link_to_form(\"Attendance\", duplicate_attendance[0].name)\n            frappe.throw(\n                _(\n                    \"Attendance already exists for employee {0} on {1}. <a href='{2}'>View Attendance</a>\"\n                ).format(self.employee, format_date(self.attendance_date), duplicate_attendance_link),\n                title=_(\"Duplicate Attendance\"),\n            )\n\n", "CodeBleu_score": 38.476227509077496}, {"code": "def validate_duplicate_record(self)\n\t\n    attendance = frappe.db.get_value(\"Attendance\", {\"employee\": self.employee, \"attendance_date\": self.attendance_date}, [\"name\"])\n    if attendance:\n        msg = _(\"Attendance already exists for {0} on {1}.\").format(\n            get_link_to_form(\"Employee\", self.employee),\n            format_date(self.attendance_date),\n        )\n        frappe.throw(msg, frappe.DuplicateEntryError)\n\n", "CodeBleu_score": 42.41477555516977}, {"code": "def validate_duplicate_record(self)\n\t\n    if self.employee and self.attendance_date:\n        duplicate_attendance = frappe.db.exists(\n            \"Attendance\",\n            {\n                \"employee\": self.employee,\n                \"attendance_date\": self.attendance_date,\n                \"docstatus\": 1,\n                \"name\": [\"!=\", self.name],\n            },\n        )\n        if duplicate_attendance:\n            attendance_link = get_link_to_form(\"Attendance\", duplicate_attendance)\n            message = f\"\"\"Attendance record already exists for {self.employee} on {format_date(self.attendance_date)}.", "CodeBleu_score": 33.709823365907965}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t\n    # Get the message details\n    message = self.message\n    message_subject = self.subject\n    message_content = self.content\n    message_date = self.creation\n    message_sender = self.sender\n\n    # Get the email addresses of users in the specified group\n    group = frappe.get_doc(\"Email Group\", \"Daily Summary\")\n    email_addresses = [user.email for user in group.users]\n\n    # Send an email with the summary using a template\n    subject = _(\"Daily Summary\")\n    message_content = message_content.replace(\"", "CodeBleu_score": 28.88997826322947}, {"code": "def send_summary(self)\n\t\n    # Get the message details\n    message = self.get_message()\n    # Get the email addresses of users in the specified group\n    email_addresses = get_email_addresses_from_group(self.group)\n    # Send the email with the summary\n    send_email_with_summary(message, email_addresses)\n    # Update the status to \"Sent\"\n    self.db_set(\"status\", \"Sent\")\n\n", "CodeBleu_score": 14.18765916079647}, {"code": "def send_summary(self)\n\t\n    if self.status == \"Open\":\n        # Get message details\n        message = frappe.get_doc(\"Message\", self.name)\n        subject = message.subject\n        body = message.content\n        # Get email addresses of users in the specified group\n        group = frappe.get_doc(\"User Group\", \"Daily Summary Group\")\n        email_addresses = [user.email for user in group.users]\n        # Send email with the summary using a template\n        template = \"Daily Summary Template\"\n        frappe.sendmail(\n            recipients=email_addresses,\n            subject=subject,\n            message=body,\n            template=template,\n            header=[_(\"Message ID: {}\").format(self.name)],\n        )\n        # Update status to \"Sent\"\n        self.status = \"Sent\"\n        self.save()\n\n", "CodeBleu_score": 39.3137848639842}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t\n    if self.status == \"Completed\":\n        if self.get_existing_interview():\n            raise frappe.ValidationError(\n                _(\n                    \"Job Applicant is not allowed to appear twice for the same interview round.\"\n                    \" <a href='#Form/Job Applicant Interview/{0}'>View Existing Interview</a>\"\n                ).format(self.get_existing_interview().name)\n            )\n\n", "CodeBleu_score": 27.07430836671614}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.job_applicant and self.interview_round:\n        existing_interview = frappe.db.get_value(\n            \"Job Applicant Interview\",\n            {\n                \"job_applicant\": self.job_applicant,\n                \"interview_round\": self.interview_round,\n            },\n            \"name\",\n        )\n        if existing_interview and existing_interview!= self.name:\n            frappe.throw(\n                _(\"Job Applicant {0} is already scheduled for this interview round.\").format(\n                    get_link_to_form(\"Job Applicant\", self.job_applicant)\n                ),\n                frappe.DuplicateEntryError,\n            )\n\n", "CodeBleu_score": 42.41971312360783}, {"code": "def validate_duplicate_interview(self)\n\t\n    interview_record = frappe.get_all(\n        \"Job Applicant Interview\",\n        filters={\n            \"job_applicant\": self.job_applicant,\n            \"interview_round\": self.interview_round,\n        },\n    )\n    if interview_record:\n        applicant = frappe.get_doc(\"Job Applicant\", self.job_applicant)\n        applicant_name = get_link_to_form(\"Job Applicant\", self.job_applicant)\n        interview_round_name = get_link_to_form(\n            \"Interview Round\", self.interview_round\n        )\n        msg = _(\n            \"Job Applicant {0} is not allowed to appear twice for the same interview round. \"\n            \"Please check the existing interview record for {1} in {2}.\"\n        ).format(applicant_name, applicant.applicant_name, interview_round_name)\n        frappe.throw(msg)\n\n", "CodeBleu_score": 44.4888781196353}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\t\n    assessments = frappe.get_all(\n        \"Skill Assessment\",\n        filters={\n            \"parent\": self.name,\n            \"rating\": (\"!=\", None),\n            \"rating\": (\"!=\", \"\"),\n            \"docstatus\": 1,\n        },\n        fields=[\"rating\"],\n    )\n\n    if assessments:\n        total = sum([flt(assessment.rating) for assessment in assessments])\n        self.average_rating = flt(total / len(assessments))\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 24.228441153848777}, {"code": "def calculate_average_rating(self)\n\t\n    assessments = frappe.get_all(\n        \"Skill Assessment\",\n        filters={\"parent\": self.name},\n        fields=[\"rating\"],\n    )\n\n    total_rating = 0\n    count = 0\n    for assessment in assessments:\n        if assessment.rating:\n            total_rating += assessment.rating\n            count += 1\n\n    if count:\n        self.average_rating = flt(total_rating / count)\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 25.70990435371917}, {"code": "def calculate_average_rating(self)\n\t\n    if self.skill_assessments:\n        total = 0\n        for assessment in self.skill_assessments:\n            if assessment.rating:\n                total += assessment.rating\n        self.average_rating = flt(total / len(self.skill_assessments))\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 37.00619466328266}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    if doc.interviewers:\n        for interviewer in doc.interviewers:\n            interview_detail = interview.append(\"interview_details\", {})\n            interview_detail.interviewer = interviewer.interviewer\n            interview_detail.interview_date = interviewer.interview_date\n            interview_detail.interview_time = interviewer.interview_time\n    return interview\n\n", "CodeBleu_score": 41.46246262484248}, {"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc('Interview')\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    if doc.interviewers:\n        interview.interview_details = []\n        for interviewer in doc.interviewers:\n            interview.append('interview_details', {\n                'interviewer': interviewer\n            })\n    return interview\n\n", "CodeBleu_score": 46.38527101151143}, {"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    if doc.interviewers:\n        interview.interview_details = []\n        for interviewer in doc.interviewers:\n            interview.append(\"interview_details\", {\n                \"interviewer\": interviewer\n            })\n    return interview\n\n", "CodeBleu_score": 49.688124956275374}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offers = frappe.db.sql(\n        \"\"\"SELECT name FROM `tabJob Offer` WHERE docstatus=1 AND designation=%s AND company=%s AND creation BETWEEN %s AND %s\"\"\",\n        (self.designation, self.company, from_date, to_date),\n        as_dict=True,\n    )\n    return [job_offer.name for job_offer in job_offers]\n\n", "CodeBleu_score": 36.75949763497699}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offers = frappe.db.sql(\n        \"\"\"\n        SELECT name\n        FROM `tabJob Offer`\n        WHERE designation = %(designation)s\n            AND company = %(company)s\n            AND docstatus = 1\n            AND creation BETWEEN %(from_date)s AND %(to_date)s\n        \"\"\",\n        values={\n            \"designation\": self.designation,\n            \"company\": self.company,\n            \"from_date\": from_date,\n            \"to_date\": to_date,\n        },\n        as_dict=True,\n    )\n    return [job_offer.name for job_offer in job_offers]\n\n", "CodeBleu_score": 47.52796283704817}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    return frappe.db.sql(\n        \"\"\"\n        SELECT name FROM `tabJob Offer`\n        WHERE docstatus = 1\n        AND designation = %s\n        AND company = %s\n        AND creation BETWEEN %s AND %s\n        \"\"\",\n        (self.designation, self.company, from_date, to_date),\n        as_dict=True,\n    )\n\n", "CodeBleu_score": 25.99585590716162}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    total_job_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1})\n    accepted_job_offers = frappe.db.count(\n        \"Job Offer\",\n        filters={\n            \"docstatus\": 1,\n            \"status\": \"Accepted\",\n            \"company\": company,\n            \"department\": department,\n        },\n    )\n    if total_job_offers:\n        return (accepted_job_offers / total_job_offers) * 100\n    else:\n        return 0\n\n", "CodeBleu_score": 32.7226964646244}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    total_offers = frappe.db.sql(\n        \"\"\"SELECT COUNT(*) FROM `tabJob Offer` WHERE docstatus = 1 AND company = %s AND department = %s\"\"\",\n        (company, department),\n    )\n    accepted_offers = frappe.db.sql(\n        \"\"\"SELECT COUNT(*) FROM `tabJob Offer` WHERE status = \"Accepted\" AND company = %s AND department = %s\"\"\",\n        (company, department),\n    )\n    if total_offers[0][0] == 0:\n        return 0\n    return accepted_offers[0][0] / total_offers[0][0] * 100\n\n", "CodeBleu_score": 16.528972765419077}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if company:\n        total_offers = frappe.db.sql(\n            \"\"\"SELECT COUNT(name) FROM `tabJob Offer` WHERE docstatus=1 AND company=%(company)s\"\"\",\n            values={\"company\": company},\n        )[0][0]\n        accepted_offers = frappe.db.sql(\n            \"\"\"SELECT COUNT(name) FROM `tabJob Offer` WHERE docstatus=1 AND company=%(company)s AND status=\"Accepted\" \"\"\",\n            values={\"company\": company},\n        )[0][0]\n    elif department:\n        total_offers = frappe.db.sql(\n            \"\"\"SELECT COUNT(name) FROM `tabJob Offer` WHERE docstatus=1 AND department=%(department)s\"\"\",\n            values={\"department\": department},\n        )[0][0]\n        accepted_offers = frappe.db.sql(\n            \"\"\"SELECT COUNT(name) FROM `tabJob Offer` WHERE docstatus=1 AND department=%(department)s AND status=\"Accepted\" \"\"\",\n            values={\"department\": department},\n        )[0][0]\n    else:\n        total_offers = frappe.db.sql(\n            \"\"\"SELECT COUNT(name) FROM `tabJob Offer` WHERE docstatus=1\"\"\",\n        )[0][0]\n        accepted_offers = frappe.db.sql(\n            \"\"\"SELECT COUNT(name) FROM `tabJob Offer` WHERE docstatus=1 AND status=\"Accepted\" \"\"\",\n        )[0][0]\n\n    if total_offers > 0:\n        acceptance_rate = accepted_offers / total_offers * 100\n        return acceptance_rate\n    else:\n        return 0\n\n", "CodeBleu_score": 25.71170495848456}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = this.employerService.register(employerForRegisterDto);\n\tif (!result.isSuccess()) {\n\t\treturn ResponseEntity.badRequest().body(result);\n\t}\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 63.14574246317479}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tResult result = this.employerService.register(employerForRegisterDto);\n\tif (!result.isSuccess()) {\n\t\treturn ResponseEntity.badRequest().body(result);\n\t}\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 56.289178231771096}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = this.employerService.register(employerForRegisterDto);\n\tif (!result.isSuccess()) {\n\t\treturn ResponseEntity.status(HttpStatus.BAD_REQUEST).body(result);\n\t}\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 64.77076883921677}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\tfinal Optional<CompanyStaff> companyStaff = companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\tif (companyStaff.isEmpty()) {\n\t\treturn new ErrorResult(Messages.COMPANY_STAFF_NOT_FOUND);\n\t}\n\tfinal CompanyStaff companyStaffToUpdate = companyStaff.get();\n\tif (!companyStaffToUpdate.getPassword().equals(companyStaffForUpdateDto.getPassword())) {\n\t\treturn new ErrorResult(Messages.WRONG_PASSWORD);\n\t}\n\tif (!companyStaffForUpdateDto.getPassword().equals(companyStaffForUpdateDto.getConfirmPassword())) {\n\t\treturn new ErrorResult(Messages.PASSWORDS_DONT_MATCH);\n\t}\n\tfinal Result result = BusinessRules.run(checkIfFirstNameExists(companyStaffForUpdateDto.getFirstName()),\n\t\t\tcheckIfLastNameExists(companyStaffForUpdateDto.getLastName()));\n\tif (result!= null) {\n\t\treturn result;\n\t}\n\tcompanyStaffToUpdate.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaffToUpdate.setLastName(companyStaffForUpdateDto.getLastName());\n\tcompanyStaffDao.save(companyStaffToUpdate);\n\treturn new SuccessResult(Messages.COMPANY_STAFF_UPDATED);\n}", "CodeBleu_score": 56.63198785772614}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\tOptional<CompanyStaff> companyStaff = companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\tif (!companyStaff.isPresent()) {\n\t\treturn new ErrorResult(Messages.NOT_FOUND);\n\t}\n\tif (!companyStaff.get().getPassword().equals(companyStaffForUpdateDto.getPassword())) {\n\t\treturn new ErrorResult(Messages.PASSWORD_NOT_MATCHED);\n\t}\n\tResult result = BusinessRules.run(checkIfFirstNameExists(companyStaffForUpdateDto.getFirstName()),\n\t\t\tcheckIfLastNameExists(companyStaffForUpdateDto.getLastName()));\n\tif (result!= null) {\n\t\treturn result;\n\t}\n\tcompanyStaff.get().setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.get().setLastName(companyStaffForUpdateDto.getLastName());\n\tcompanyStaffDao.save(companyStaff.get());\n\treturn new SuccessResult(Messages.USER_UPDATED);\n}", "CodeBleu_score": 60.56116271446038}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\tOptional<CompanyStaff> companyStaff = companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\tif (!companyStaff.isPresent()) {\n\t\treturn new ErrorResult(Messages.USER_NOT_FOUND);\n\t}\n\tif (!companyStaff.get().getPassword().equals(companyStaffForUpdateDto.getPassword())) {\n\t\treturn new ErrorResult(Messages.PASSWORD_NOT_MATCHED);\n\t}\n\tvar result = BusinessRules.run(checkIfEmailExists(companyStaffForUpdateDto.getEmail()));\n\tif (result!= null) {\n\t\treturn result;\n\t}\n\tcompanyStaff.get().setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.get().setLastName(companyStaffForUpdateDto.getLastName());\n\tcompanyStaffDao.save(companyStaff.get());\n\treturn new SuccessResult(Messages.USER_UPDATED);\n}", "CodeBleu_score": 58.88910550829968}]}
