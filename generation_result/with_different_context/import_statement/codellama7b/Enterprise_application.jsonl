{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = request.params.get('attachment_ids')\n    if attachment_ids:\n        attachment_ids = attachment_ids.split(',')\n    else:\n        attachment_ids = []\n    # Verify access rights and rules for the attachments.\n    attachment_data = self.env['ir.attachment'].browse(attachment_ids)\n    attachment_data._check_access_rights('read')\n    attachment_data._check_access_rule('read')\n    # Build a zip file from the attachments' content.\n    zip_file = self.env['ir.attachment']._zip_attachment_content(attachment_data)\n    # Prepare HTTP headers for the zip file.\n    headers = [('Content-Type', 'application/zip'),\n               ('Content-Disposition', content_disposition(filename='attachments.zip')),\n               ('Content-Transfer-Encoding', 'binary'),\n               ('Content-Length', str(len(zip_file)))]\n    return request.make_response(zip_file, headers=headers)\n\n", "CodeBleu_score": 40.52301701144824}, {"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = request.params.get('attachment_ids')\n    attachment_ids = attachment_ids.split(',')\n    if not attachment_ids:\n        attachment_ids = request.params.get('attachment_id')\n        attachment_ids = [attachment_ids]\n    attachment_ids = [int(attachment_id) for attachment_id in attachment_ids]\n    attachment_ids = self.env['ir.attachment'].browse(attachment_ids)\n    if not attachment_ids:\n        return request.make_response('', 204)\n    for attachment in attachment_ids:\n        attachment.check_access_rights('read')\n        attachment.check_access_rule('read')\n    zip_data = self.env['ir.attachment']._zip_attachments(attachment_ids)\n    response = request.make_response(zip_data)\n    response.headers['Content-Type'] = 'application/zip'\n    response.headers['Content-Disposition'] = content_disposition(\n        'attachment',\n        'attachments.zip'\n    )\n    return response\n\n", "CodeBleu_score": 38.00103006190123}, {"code": "def export_zip_documents(self, **args)\n\t\n\n    # Retrieve attachment IDs from HTTP request arguments\n    attachment_ids = request.env['ir.attachment'].sudo().browse(args.get('attachment_ids'))\n\n    # Verify read access rights and rules for the attachments\n    attachment_ids.check_access_rights('read')\n    attachment_ids.check_access_rule('read')\n\n    # Build zip file from the attachments' content\n    zip_file = self.build_zip_file(attachment_ids)\n\n    # Prepare HTTP headers for the zip file\n    filename = 'attachments.zip'\n    content_type = 'application/zip'\n    content_disposition = 'attachment; filename=%s' % filename\n    headers = {'Content-Type': content_type, 'Content-Disposition': content_disposition}\n\n    # Return the zip file as an HTTP response\n    return request.make_response(zip_file, headers=headers)\n\n", "CodeBleu_score": 33.38284036762852}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(CustomerPortal, self)._prepare_home_portal_values(counters)\n    if self.env.user.has_group('account.group_account_invoice'):\n        values['invoice_count'] = self._get_counters(counters, 'invoice', 'account.move', 'invoice_count')\n    if self.env.user.has_group('account.group_account_bill'):\n        values['bill_count'] = self._get_counters(counters, 'bill', 'account.move', 'bill_count')\n    return values\n\n", "CodeBleu_score": 24.98718964563253}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(CustomerPortal, self)._prepare_home_portal_values(counters)\n    if self.env.user.has_group('account.group_account_invoice'):\n        values['invoice_count'] = counters.get('invoice_count', 0)\n    if self.env.user.has_group('account.group_account_bill'):\n        values['bill_count'] = counters.get('bill_count', 0)\n    return values\n\n", "CodeBleu_score": 20.861474959415823}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(CustomerPortal, self)._prepare_home_portal_values(counters)\n    if counters.get('invoice'):\n        invoice_count = self.env['account.move'].search_count([('state', '=', 'posted'), ('partner_id', '=', self.id), ('type', 'in', ['in_invoice', 'in_refund'])])\n        values['invoice_count'] = invoice_count\n    if counters.get('bill'):\n        bill_count = self.env['account.move'].search_count([('state', '=', 'posted'), ('partner_id', '=', self.id), ('type', 'in', ['out_invoice', 'out_refund'])])\n        values['bill_count'] = bill_count\n    return values\n\n", "CodeBleu_score": 43.91691628708669}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    # retrieve the invoices\n    invoices = self.env['account.invoice'].search([\n        ('partner_id', '=', self.id),\n        ('type', 'in', ['out_invoice', 'out_refund']),\n        ('state', 'not in', ['cancel']),\n        ('date_invoice', '>=', date_begin),\n        ('date_invoice', '<=', date_end),\n    ], order=sortby, limit=self.env['account.invoice']._browse_limit())\n    # retrieve the invoices count\n    invoices_count = self.env['account.invoice'].search_count([\n        ('partner_id', '=', self.id),\n        ('type', 'in', ['out_invoice', 'out_refund']),\n        ('state', 'not in', ['cancel']),\n        ('date_invoice', '>=', date_begin),\n        ('date_invoice', '<=', date_end),\n    ])\n    # update the session history with the latest invoice IDs\n    self.env['bus.bus'].sendone(\n        self._cr.dbname,\n        ('my_invoices_history_update', self.id, invoices.ids),\n    )\n    # prepare the values for the invoices page\n    values = {\n        'invoices': invoices,\n        'invoices_count': invoices_count,\n        'date_begin': date_begin,\n        'date_end': date_end,\n        'sortby': sortby,\n        'filterby': filterby,\n        'pager': portal_pager(\n            url=\"/my/invoices\",\n            url_args={'date_begin': date_begin, 'date_end': date_end, 'sortby': sortby, 'filterby': filterby},\n            total=invoices_count,\n            page=page,\n            step=self.env['account.invoice']._browse_limit(),\n        ),\n    }\n    return request.render('account.portal_invoices', values)\n\n", "CodeBleu_score": 29.14724358971349}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    if not self.user.has_group('account.group_account_invoice'):\n        raise AccessError(_('Insufficient access rights'))\n\n    # retrieve invoices\n    domain = expression.AND([\n        [('partner_id', '=', self.id)],\n        [('state', 'in', ['open', 'paid'])],\n    ])\n    if date_begin:\n        domain += [('date_due', '>=', date_begin)]\n    if date_end:\n        domain += [('date_due', '<=', date_end)]\n    if filterby:\n        domain += [('type', '=', filterby)]\n\n    invoices = self.env['account.invoice'].search(domain)\n    invoices_count = invoices.count()\n    invoices = invoices.with_user(self.user_id).with_context(\n        search_default_partner_id=self.id,\n        search_default_type=filterby,\n        search_default_date_due_from=date_begin,\n        search_default_date_due_to=date_end,\n        search_default_sortby=sortby,\n    ).sorted(sortby)\n\n    # pager\n    page_name = 'invoices'\n    invoices_pager = portal_pager(invoices, url=self.invoice_pager_url, page_name=page_name, total=invoices_count, page=page)\n    invoices = invoices_pager['data']\n\n    # update session history\n    self._update_session_history(invoices, page_name)\n\n    # prepare values\n    values = self._prepare_portal_layout_values()\n    values.update({\n        'invoices': invoices,\n        'invoices_count': invoices_count,\n        'invoices_pager': invoices_pager,\n        'date_begin': date_begin,\n        'date_end': date_end,\n        'sortby': sortby,\n        'filterby': filterby,\n    })\n   ", "CodeBleu_score": 36.704863752379836}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    # Prepare the values needed for the invoices page\n    values = self._prepare_invoices_values(page, date_begin, date_end, sortby, filterby)\n    # Retrieve the invoices\n    invoices = self._get_invoices(values['form'].get('date_from', date_begin), values['form'].get('date_to', date_end), values['form'].get('sortby', sortby), values['form'].get('filterby', filterby), values['form'].get('search', False), values['form'].get('search_default', False))\n    # Update the session history with the latest invoice IDs\n    self._update_invoice_history(invoices)\n    # Prepare the values needed for the invoices list\n    values = self._prepare_invoices_list_values(invoices, values)\n    return request.render('account.invoice_list', values)\n\n", "CodeBleu_score": 36.63610216054739}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    invoice = self.env['account.invoice'].browse(invoice_id)\n    if not invoice:\n        return request.not_found()\n    if not invoice.has_read_access_rights('in_invoice', raise_exception=False):\n        return request.redirect(invoice.access_error_redirect())\n    if not invoice.state in ['open', 'paid']:\n        return request.redirect('/my/invoices')\n    if download and report_type == 'pdf' and invoice.state == 'open':\n        legal_docs = invoice._prepare_legal_documents()\n        if legal_docs:\n            zip_file = self._prepare_zip_file(legal_docs)\n            return request.make_response(zip_file, zip_file.filename, _get_zip_headers())\n    return self._portal_my_invoice_detail(invoice, access_token=access_token, report_type=report_type, download=download, **kw)\n\n", "CodeBleu_score": 29.187603150714402}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    invoice = self.env['account.invoice'].browse(invoice_id)\n    if not invoice:\n        raise MissingError(_('Invoice does not exist.'))\n    if not invoice.partner_id:\n        raise MissingError(_('Invoice does not have a customer.'))\n    if not invoice.partner_id.has_common_address(invoice.partner_id):\n        raise MissingError(_('Customer has no address.'))\n    if not invoice.partner_id.has_common_contact(invoice.partner_id):\n        raise MissingError(_('Customer has no contact.'))\n    if not invoice.partner_id.active:\n        raise MissingError(_('Customer is inactive.'))\n    if invoice.state not in ('open', 'paid', 'invoiced'):\n        raise MissingError(_('Invoice is not open.'))\n    if not invoice.company_id.currency_id.is_zero(invoice.amount_total):\n        raise MissingError(_('Invoice is not fully paid.'))\n    if not invoice.company_id.currency_id.is_zero(invoice.amount_untaxed):\n        raise MissingError(_('Invoice has unpaid taxes.'))\n    if not invoice.company_id.currency_id.is_zero(invoice.amount_total - invoice.amount_paid):\n        raise MissingError(_('Invoice is not fully paid.'))\n    if not invoice.company_id.currency_id.is_zero(invoice.amount_tax - invoice.amount_tax_due):\n        raise MissingError(_('Invoice has unpaid taxes.'))\n    if not invoice.company_id.currency_id.is_zero(invoice.amount_residual):\n        raise MissingError(_('Invoice has residual amount.'))\n    if not invoice.company_id.currency_id.is_zero(invoice.amount_total - invoice.amount_paid - invoice.amount_residual):\n        raise MissingError(_('Invoice is not fully paid.'))\n", "CodeBleu_score": 22.36081027106319}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    invoice = self.env['account.invoice'].browse(invoice_id)\n    if not invoice.exists():\n        raise MissingError(_('The requested invoice does not exist.'))\n\n    if not access_token or not invoice.check_access_token(access_token):\n        raise AccessError(_('Invoice access token is invalid!'))\n\n    if invoice.type == 'out_invoice' and not invoice.state in ('open', 'paid'):\n        raise AccessError(_('You can only access the invoice in the state: open or paid.'))\n\n    if invoice.type == 'in_invoice' and not invoice.state == 'open':\n        raise AccessError(_('You can only access the invoice in the state: open.'))\n\n    if report_type == 'pdf' and invoice.state != 'posted':\n        raise AccessError(_('You can only access the invoice in the state: posted.'))\n\n    if report_type == 'pdf' and invoice.type == 'out_invoice':\n        # This is a hack to avoid the generation of the pdf invoice when the invoice is paid\n        # because the pdf invoice is not available in the paid state\n        if invoice.state == 'paid':\n            raise AccessError(_('You can only access the invoice in the state: posted.'))\n\n    # Retrieve legal documents\n    legal_docs = []\n    if invoice.state == 'posted':\n        legal_docs = invoice.legal_document_ids.filtered(lambda doc: doc.state == 'done')\n\n    # Create zip file\n    if report_type == 'pdf' and legal_docs:\n        zip_file = _get_zip_headers()\n        for doc in legal_docs:\n            zip_file.write(doc._file.get_binary_content_as_string(), doc.name)\n        return zip_file.getvalue(), {'Content-Type': 'application/zip'}\n\n    # Render report\n    if report_type in ('html', 'pdf', 'text'):\n        return self.render('account_invoice_report_%s' % report_type, invoice=", "CodeBleu_score": 33.53258080883949}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t\n    # Search for the product templates\n    product_templates = self.env['product.template'].search([('demo_company_id', '=', self.id)])\n    # If the company has a sale tax, update the taxes for the products\n    if company.account_sale_tax_id:\n        product_templates.write({'taxes_id': [(6, 0, company.account_sale_tax_id.ids)]})\n    # If the company has a purchase tax, update the taxes for the products\n    if company.account_purchase_tax_id:\n        product_templates.write({'purchase_taxes_id': [(6, 0, company.account_purchase_tax_id.ids)]})\n\n", "CodeBleu_score": 18.294718807098864}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    product_template_ids = self.env['product.template'].search([('demo_company_id', '=', self.id), ('product_tmpl_id.default_code', '=', False)])\n    if company:\n        product_template_ids = product_template_ids.filtered(lambda p: p.company_id == company)\n    for product_template in product_template_ids:\n        product_template.product_tmpl_id.default_code = product_template.default_code\n        if product_template.product_tmpl_id.sale_ok:\n            product_template.product_tmpl_id.product_variant_ids.write({'default_code': product_template.default_code})\n        if product_template.product_tmpl_id.purchase_ok:\n            product_template.product_tmpl_id.product_variant_ids.write({'default_code': product_template.default_code})\n        if company:\n            if company.account_sale_tax_id:\n                product_template.product_tmpl_id.product_variant_ids.write({'taxes_id': [(4, company.account_sale_tax_id.id, 0)]})\n            if company.account_purchase_tax_id:\n                product_template.product_tmpl_id.product_variant_ids.write({'taxes_id': [(4, company.account_purchase_tax_id.id, 0)]})\n    return True\n\n", "CodeBleu_score": 29.37167563206237}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    if not company:\n        company = self.env.company\n    domain = [('company_id', '=', company.id)]\n    if not company.account_sale_tax_id:\n        domain.append(('account_sale_tax_id', '=', False))\n    if not company.account_purchase_tax_id:\n        domain.append(('account_purchase_tax_id', '=', False))\n    return self.env['product.template'].search(domain)\n\n", "CodeBleu_score": 23.22508238634507}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    demo_account = self.env['ir.model.data'].get_object(xml_id, company.id)\n    if demo_account:\n        return demo_account\n    else:\n        domain = [('company_id', '=', company.id), ('type', '=', account_type)]\n        demo_account = self.search(domain, limit=1)\n        if demo_account:\n            return demo_account\n        else:\n            demo_account = self.search(domain, limit=1)\n            if demo_account:\n                return demo_account\n            else:\n                return self.search([], limit=1)\n\n", "CodeBleu_score": 44.40903360379749}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account_data = self.env['ir.model.data']._get_id(xml_id, company.id)\n    if account_data:\n        return self.env['account.account'].browse(account_data).exists()\n    else:\n        domain = [('company_id', '=', company.id), ('internal_type', '=', account_type)]\n        account = self.env['account.account'].search(domain, limit=1)\n        if account:\n            return account\n        else:\n            return self.env['account.account'].search(domain, limit=1)\n\n", "CodeBleu_score": 49.60599799003863}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    if xml_id:\n        account = self.env['ir.model.data'].xmlid_to_object(xml_id, raise_if_not_found=False)\n        if account and account.company_id.id == company.id:\n            return account\n        else:\n            domain = [('company_id', '=', company.id), ('internal_type', '=', account_type)]\n            return self.env['account.account'].search(domain, limit=1)\n    else:\n        return self.env['account.account'].search([('company_id', '=', company.id), ('internal_type', '=', account_type)], limit=1)\n\n", "CodeBleu_score": 43.090704663290765}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    account_type_unique_current_year_earning = self.env['account.account.type'].search([\n        ('type_control_id', '=', self.env.ref('account.data_account_type_current_year_earning').id),\n        ('company_id', 'in', self.ids),\n    ])\n    account_type_unique_current_year_earning_by_company = account_type_unique_current_year_earning.group_by('company_id')\n    for company, account_type_unique_current_year_earning in account_type_unique_current_year_earning_by_company.items():\n        if len(account_type_unique_current_year_earning) > 1:\n            raise ValidationError(_('There can only be one account with the \"Current Year Earnings\" type for each company.'))\n\n", "CodeBleu_score": 21.234631278251808}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    # TODO: This function is a bit of a mess. It would be better to use the ORM to retrieve the data and then check that the length of the result is 1.\n    account_type_unique_current_year_earning = self.env['account.account.type'].search([('name', '=', 'Current Year Earnings')])\n    account_type_unique_current_year_earning_ids = [account_type_unique_current_year_earning.id]\n    domain = [('type_id', 'in', account_type_unique_current_year_earning_ids), ('company_id', 'in', self.env.companies.ids)]\n    accounts = self.env['account.account'].search(domain)\n    accounts_by_company = accounts.groupby('company_id')\n    for company_id, company_accounts in accounts_by_company:\n        if len(company_accounts) > 1:\n            raise ValidationError(_('There should be only one account of type \"Current Year Earnings\" for each company.'))\n\n", "CodeBleu_score": 20.744014117751806}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    account_types = self.env['account.account.type'].search([('type_current_year_earning', '=', True)])\n    account_types_dict = defaultdict(list)\n    for account_type in account_types:\n        account_types_dict[account_type.company_id.id].append(account_type)\n    for company_id, account_types in account_types_dict.items():\n        if len(account_types) > 1:\n            raise ValidationError(_(\"There can only be one account of type \\\"Current Year Earnings\\\" for each company.\"))\n\n", "CodeBleu_score": 22.528820243642766}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self.env.context.get('default_partner_id'):\n        # If no name is given and specific context values are present, it orders accounts by frequency for a partner.\n        # Otherwise, it constructs a search domain based on the name and operator, combines it with the given domain, and performs the search with optional limit and order parameters.\n        return self._order_by_frequency(self.env.context.get('default_partner_id'), domain, limit, order)\n    return super(AccountMoveLine, self)._name_search(name, domain=domain, operator=operator, limit=limit, order=order)\n\n", "CodeBleu_score": 21.520360952100994}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and 'search_default_name' in self.env.context:\n        return self._order_by_frequency(domain, limit, order)\n    else:\n        domain = expression.AND([\n            [('name', operator, name)],\n            domain or []\n        ])\n        return super(Account, self).name_search(name, domain=domain, operator=operator, limit=limit, order=order)\n\n", "CodeBleu_score": 27.8013136929738}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self._context.get('search_default_name'):\n        name = self._context['search_default_name']\n    if name:\n        if not domain:\n            domain = []\n        domain = expression.AND([\n            expression.OR([\n                ('name', operator, name),\n                ('code', operator, name),\n            ]),\n            domain,\n        ])\n    if not order:\n        order = self._order\n    return self._search(domain, order=order, limit=limit)\n\n", "CodeBleu_score": 38.04562213641763}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t\n    if not self.id:\n        return\n    if not new.id:\n        raise UserError(_('Cannot copy translations from a non-saved record.'))\n    if not isinstance(excluded, (list, tuple)):\n        excluded = [excluded]\n    excluded = excluded + ['name']\n    for field in self.fields_get():\n        if field['type'] == 'char' and field['name'] not in excluded:\n            new.write({field['name']: self[field['name']]})\n    if new.name and new.name.startswith('Copy of '):\n        new.name = new.name.replace('Copy of ', 'Copy of %s ' % self.name)\n    new.flush()\n\n", "CodeBleu_score": 29.716263780314378}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    for field in self:\n        for field_name in field:\n            if field_name in excluded:\n                continue\n            if field_name == 'name':\n                continue\n            if field_name in new:\n                new[field_name] = field[field_name]\n    return new\n\n", "CodeBleu_score": 21.10602768386155}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    for field in self:\n        if field.name not in excluded:\n            new[field.name] = field.value\n    if new.name:\n        new.name_search = new.name\n\n", "CodeBleu_score": 18.908076674412932}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    domain = [\n        ('type', 'in', ['in_invoice', 'in_refund']),\n        ('invoice_id', '=', self.id),\n        ('account_analytic_id', '=', self.analytic_account_id.id),\n    ]\n    query = \"\"\"\n        SELECT DISTINCT aml.move_id\n        FROM account_analytic_line aal\n        LEFT JOIN account_analytic_line_account aala ON (aal.id = aala.account_analytic_line_id)\n        LEFT JOIN account_analytic_line_account aalb ON (aal.id = aalb.account_analytic_line_id)\n        LEFT JOIN account_move_line aml ON (aal.id = aml.account_analytic_line_id)\n        WHERE aal.account_analytic_id = %s\n        AND (aala.account_id = %s OR aalb.account_id = %s)\n        AND aml.move_id IN (\n            SELECT move_id\n            FROM account_analytic_line aal\n            LEFT JOIN account_analytic_line_account aala ON (aal.id = aala.account_analytic_line_id)\n            LEFT JOIN account_analytic_line_account aalb ON (aal.id = aalb.account_analytic_line_id)\n            LEFT JOIN account_move_line aml ON (aal.id = aml.account_analytic_line_id)\n            WHERE aal.account_analytic_id = %s\n            AND (aala.account_id = %s OR aalb.account_id = %s)\n            AND aml.invoice_id = %s\n        )\n    \"\"\"\n    query = SQL(query)\n    query = query.on_clause(\n        self.analytic_account_id.id,\n        self.analytic_account_id.id,\n        self.analytic_account_id.id,\n        self.analytic_account_id.id,", "CodeBleu_score": 18.004337257519655}, {"code": "def action_view_invoice(self)\n\t\n    action = self.env.ref('account.action_invoice_tree')\n    action.context = dict(self.env.context, search_default_move_id=self.id)\n    return action\n\n", "CodeBleu_score": 13.305740849084009}, {"code": "def action_view_invoice(self)\n\t\n    action = self.env.ref('account.action_move_line_all_invoice').read()[0]\n    action['context'] = {\n        'search_default_move_type': 'out_invoice',\n        'search_default_move_state': 'posted',\n        'search_default_move_date': '1',\n        'search_default_partner_id': self.id,\n        'search_default_partner_type': 'customer',\n        'search_default_invoice_date': '1',\n        'search_default_invoice_state': 'posted',\n        'search_default_invoice_type': 'out_invoice',\n        'search_default_analytic_account_id': self.analytic_account_id.id,\n        'search_default_partner_category_id': self.partner_category_id.id,\n        'search_default_partner_id': self.id,\n        'search_default_partner_type': 'customer',\n        'search_default_invoice_date': '1',\n        'search_default_invoice_state': 'posted',\n        'search_default_invoice_type': 'out_invoice',\n        'search_default_move_state': 'posted',\n        'search_default_move_type': 'out_invoice',\n        'active_ids': self.ids,\n        'active_id': self.ids[0],\n        'active_model': self._name,\n    }\n    action['domain'] = [\n        ('move_id', 'in', SQL('SELECT DISTINCT move_id FROM account_analytic_line WHERE account_id IN %s AND partner_id IN %s AND invoice_date IS NOT NULL AND invoice_date != \\'0000-00-00\\' AND invoice_state IN %s AND invoice_type IN %s AND invoice_date IS NOT NULL AND invoice_date != \\'0000-00-00\\' AND invoice_state IN %s AND invoice_type IN %s AND invoice_date IS NOT NULL AND invoice_date", "CodeBleu_score": 29.939821788841662}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\t\n    if not self.env.context.get('active_ids'):\n        return False\n    if len(self.env.context.get('active_ids')) > 1:\n        return False\n    active_ids = self.env.context.get('active_ids')\n    active_id = active_ids[0]\n    move_lines = self.env['account.move.line'].search([('move_id', 'in', active_ids), ('account_id.internal_type', 'in', ['payable', 'receivable']), ('reconciled', '=', False)])\n    move_ids = move_lines.mapped('move_id').ids\n    return {\n        'name': _('Vendor Bills'),\n        'type': 'ir.actions.act_window',\n        'view_type': 'form',\n        'view_mode': 'tree,form',\n        'res_model': 'account.move',\n        'domain': [('id', 'in', move_ids), ('type', '=', 'in_invoice')],\n        'context': {\n            'default_move_type': 'in_invoice',\n            'default_move_id': active_id,\n            'active_ids': move_ids,\n            'active_model': 'account.move',\n            'active_id': active_id,\n            'search_default_move_type': 'in_invoice',\n            'search_default_move_id': active_id,\n        },\n    }\n\n", "CodeBleu_score": 37.750583259390545}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    return {\n        'name': _('Vendor Bills'),\n        'type': 'ir.actions.act_window',\n        'view_type': 'form',\n        'view_mode': 'tree,form',\n        'res_model': 'account.move',\n        'domain': [('type', 'in', ['in_invoice', 'in_refund'])],\n        'context': {\n            'default_type': 'in_invoice',\n            'default_move_type': 'in_invoice',\n            'search_default_move_line_ids': SQL(\n                \"\"\"SELECT DISTINCT move_id FROM account_move_line\n                    WHERE move_id IN (\n                        SELECT move_id\n                        FROM account_move_line\n                        WHERE id IN (\n                            SELECT move_line_id\n                            FROM account_move_line_tax\n                            WHERE account_id = %s\n                            AND move_line_id IN (\n                                SELECT id\n                                FROM account_move_line\n                                WHERE move_id IN (\n                                    SELECT id\n                                    FROM account_move\n                                    WHERE type IN ('in_invoice', 'in_refund')\n                                    AND id IN (\n                                        SELECT move_id\n                                        FROM account_move_line\n                                        WHERE id = %s\n                                    )\n                                )\n                            )\n                        )\n                    )\"\"\"\n            ),\n            'search_default_move_line_ids_count': SQL(\n                \"\"\"SELECT COUNT(DISTINCT move_id) FROM account_move_line\n                    WHERE move_id IN (\n                        SELECT move_id\n                        FROM account_move_line\n                        WHERE id IN (\n                            SELECT move_line_id\n                            FROM account_move_line_tax\n                            WHERE account_id = %s\n                            AND move_line_id IN (\n                                SELECT id\n                                FROM account_move_line\n                                WHERE move_id IN (\n                                    SELECT id\n                                    FROM account_move\n                                    WHERE type IN ('in_invoice', '", "CodeBleu_score": 17.27389831540905}, {"code": "def action_view_vendor_bill(self)\n\t\n    action = self.env.ref('account.action_move_line_all')\n    action.context = {\n        'search_default_move_type': 'in_invoice',\n        'search_default_purchase_type': self.id,\n        'search_default_move_id': self.env.context.get('move_id', False),\n    }\n    return action\n\n", "CodeBleu_score": 18.69541303814006}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        values.pop('attachment_ids')\n    with self.env.cr.savepoint():\n        res = super(MailThread, self).write(values)\n    return res\n\n", "CodeBleu_score": 44.33578433596477}, {"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        values.pop('attachment_ids')\n    with self.env.cr.savepoint():\n        result = super(MailThread, self).write(values)\n        self.check_attachment_access_rights(values)\n    return result\n\n", "CodeBleu_score": 50.76958368608568}, {"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        values.pop('attachment_ids', None)\n    with self.env.norecompute():\n        res = super(MailThread, self).write(values)\n    return res\n\n", "CodeBleu_score": 40.527742843890465}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\t\n    if self.env.company.bank_account_ids:\n        if self.env.company.bank_account_ids[0].company_id.id != self.env.company.id:\n            raise UserError(_('The bank account must belong to the same company as the one you are trying to create a payment for.'))\n        return self.env.company.bank_account_ids\n    else:\n        if self.env.company.bank_account_ids:\n            return self.env.company.bank_account_ids\n        if self.env.company.company_type == 'company':\n            if self.env.company.company_type == 'company' and self.env.company.partner_id.bank_ids:\n                return self.env.company.partner_id.bank_ids\n            else:\n                return self.env.company.partner_id.bank_ids\n        else:\n            if self.env.company.partner_id.bank_ids:\n                return self.env.company.partner_id.bank_ids\n            else:\n                return self.env.company.partner_id.bank_ids\n\n", "CodeBleu_score": 24.38014127570624}, {"code": "def _find_or_create_bank_account(self)\n\t\n    if str2bool(self.env['ir.config_parameter'].sudo().get_param('hr_payroll.skip_bank_account_creation')):\n        return self.env['res.partner.bank']\n    else:\n        partner_id = self.env.context.get('active_id')\n        if partner_id:\n            partner_id = int(partner_id)\n        else:\n            partner_id = self.env.context.get('active_id')\n        if partner_id:\n            partner_id = int(partner_id)\n        else:\n            partner_id = self.env.context.get('active_id')\n        if partner_id:\n            partner_id = int(partner_id)\n        else:\n            partner_id = self.env.context.get('active_id')\n        if partner_id:\n            partner_id = int(partner_id)\n        else:\n            partner_id = self.env.context.get('active_id')\n        if partner_id:\n            partner_id = int(partner_id)\n        else:\n            partner_id = self.env.context.get('active_id')\n        if partner_id:\n            partner_id = int(partner_id)\n        else:\n            partner_id = self.env.context.get('active_id')\n        if partner_id:\n            partner_id = int(partner_id)\n        else:\n            partner_id = self.env.context.get('active_id')\n        if partner_id:\n            partner_id = int(partner_id)\n        else:\n            partner_id = self.env.context.get('active_id')\n        if partner_id:\n            partner_id = int(partner_id)\n        else:\n            partner_id = self.env.context.get('active_id')\n        if partner_id:\n            partner_id = int(partner_id)\n        else:\n            partner_id = self.env.context.get('active_id')\n        if partner_id:\n            partner_id = int(partner_", "CodeBleu_score": 22.799202264494127}, {"code": "def _find_or_create_bank_account(self)\n\t\n    if self.env.context.get('create_bank_account'):\n        return self.env['res.partner.bank']\n    partner_id = self.env.context.get('partner_id')\n    if not partner_id:\n        raise UserError(_('No partner ID found in the context.'))\n    partner = self.env['res.partner'].browse(partner_id)\n    if not partner:\n        raise UserError(_('No partner found with ID %s.') % partner_id)\n    account_number = self.env.context.get('account_number')\n    if not account_number:\n        raise UserError(_('No account number found in the context.'))\n    bank_account = self.env['res.partner.bank'].search([\n        ('partner_id', '=', partner.id),\n        ('acc_number', '=', account_number),\n        ('company_id', '=', self.env.company.id),\n    ])\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create({\n            'partner_id': partner.id,\n            'acc_number': account_number,\n            'company_id': self.env.company.id,\n        })\n    return bank_account\n\n", "CodeBleu_score": 51.024357756185836}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n\n    self.ensure_one()\n    currency_id = self.currency_id.id\n    company_currency_id = self.company_id.currency_id.id\n    if currency_id == company_currency_id:\n        currency = self.currency_id\n        company_currency = self.company_id.currency_id\n    else:\n        currency = self.currency_id\n        company_currency = self.company_id.currency_id\n\n    # retrieve the amount and currency of the transaction\n    if self.amount_currency:\n        amount = self.amount_currency\n        amount_currency = self.amount_currency_id\n    else:\n        amount = self.amount\n        amount_currency = self.currency_id\n\n    # retrieve the amount and currency of the counterpart move\n    if self.partner_id.property_account_payable.id:\n        counterpart_account_id = self.partner_id.property_account_payable.id\n    elif self.partner_id.property_account_receivable.id:\n        counterpart_account_id = self.partner_id.property_account_receivable.id\n    else:\n        raise UserError(_('No account found for this partner.'))\n    counterpart_move = self.env['account.move'].search([('line_ids.account_id', '=', counterpart_account_id)], limit=1)\n    if not counterpart_move:\n        raise UserError(_('No account move found for this partner.'))\n    counterpart_move = counterpart_move[0]\n    if counterpart_move.amount_currency:\n        counterpart_amount = counterpart_move.amount_currency\n        counterpart_amount_currency = counterpart_move.amount_currency_id\n    else:\n        counterpart_amount = counterpart_move.amount\n        counterpart_amount_currency = counterpart_move.currency_id\n\n    # compute the transaction amount in the currency of the transaction\n    if self.currency_id.id == currency_id:\n        transaction_amount = amount\n    else:\n        transaction_amount = self.with_context(date=self.date).with_", "CodeBleu_score": 27.61611866726842}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    # The function _prepare_counterpart_amounts_using_st_line_rate calculates the amounts in different currencies for a given transaction. It ensures a single record context, retrieves relevant accounting amounts and currencies, and computes the transaction amount, journal amount, and company amount using various exchange rates. Depending on the currency type, it adjusts the transaction amount and balance accordingly and returns these values in a dictionary.\n    # The function _prepare_counterpart_amounts_using_st_line_rate calculates the amounts in different currencies for a given transaction. It ensures a single record context, retrieves relevant accounting amounts and currencies, and computes the transaction amount, journal amount, and company amount using various exchange rates. Depending on the currency type, it adjusts the transaction amount and balance accordingly and returns these values in a dictionary.\n    # The function _prepare_counterpart_amounts_using_st_line_rate calculates the amounts in different currencies for a given transaction. It ensures a single record context, retrieves relevant accounting amounts and currencies, and computes the transaction amount, journal amount, and company amount using various exchange rates. Depending on the currency type, it adjusts the transaction amount and balance accordingly and returns these values in a dictionary.\n    # The function _prepare_counterpart_amounts_using_st_line_rate calculates the amounts in different currencies for a given transaction. It ensures a single record context, retrieves relevant accounting amounts and currencies, and computes the transaction amount, journal amount, and company amount using various exchange rates. Depending on the currency type, it adjusts the transaction amount and balance accordingly and returns these values in a dictionary.\n    # The function _prepare_counterpart_amounts_using_st_line_rate calculates the amounts in different currencies for a given transaction. It ensures a single record context, retrieves relevant accounting amounts and currencies, and computes the transaction amount, journal amount, and company amount using various exchange rates. Depending on the currency type, it adjusts the transaction amount and balance accordingly and returns these values in a dictionary.\n    # The function _prepare_counterpart_amounts_using_st_line_rate calculates the amounts in different currencies for a given transaction. It ensures a single record context, retrieves relevant accounting", "CodeBleu_score": 1.5725316675342702}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n\n    if not self.currency_id:\n        self.currency_id = currency\n\n    # Get the currency rate to use for the transaction\n    currency_rate = self._get_currency_rate(currency, self.date)\n\n    # Get the currency rate to use for the company\n    company_currency_rate = self.company_id.currency_id._get_conversion_rate(\n        self.company_id.currency_id, self.date, self.company_id)\n\n    # Get the currency rate to use for the journal\n    journal_currency_rate = self.journal_id.currency_id._get_conversion_rate(\n        self.journal_id.currency_id, self.date, self.company_id)\n\n    # Get the currency rate to use for the partner\n    partner_currency_rate = self.partner_id.property_account_payable.currency_id._get_conversion_rate(\n        self.partner_id.property_account_payable.currency_id, self.date, self.company_id)\n\n    # Get the currency rate to use for the account\n    account_currency_rate = self.partner_id.property_account_payable.account_id.currency_id._get_conversion_rate(\n        self.partner_id.property_account_payable.account_id.currency_id, self.date, self.company_id)\n\n    # Get the currency rate to use for the payment method\n    payment_method_currency_rate = self.payment_method_id.currency_id._get_conversion_rate(\n        self.payment_method_id.currency_id, self.date, self.company_id)\n\n    # Get the currency rate to use for the payment term\n    payment_term_currency_rate = self.payment_term_id.currency_id._get_conversion_rate(\n        self.payment_term_id.currency_id, self.date, self.company_id)\n\n    # Get the currency rate to use for the partner bank account\n    partner_bank_account_currency_rate = self.partner_bank_account_id.currency_id._get", "CodeBleu_score": 21.09337299999589}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        if journal.type in ['bank', 'cash']:\n            journal.outbound_payment_method_line_ids = journal._get_outbound_payment_method_line_ids()\n        else:\n            journal.outbound_payment_method_line_ids = [(0, 0, {'payment_method_id': False, 'active': True, 'sequence': 1})]\n\n", "CodeBleu_score": 30.23885646275815}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        if journal.type == 'bank' or journal.type == 'cash':\n            journal.outbound_payment_method_line_ids.unlink()\n            for payment_method in journal.outbound_payment_methods:\n                journal.outbound_payment_method_line_ids.create({\n                    'payment_method_id': payment_method.id,\n                    'journal_id': journal.id,\n                    'active': payment_method.active,\n                    'sequence': payment_method.sequence,\n                    'name': payment_method.name,\n                    'payment_type': payment_method.payment_type,\n                    'payment_method_code': payment_method.payment_method_code,\n                    'payment_method_partner_id': payment_method.payment_method_partner_id.id,\n                    'payment_method_partner_bank_id': payment_method.payment_method_partner_bank_id.id,\n                    'payment_method_partner_bank_account_id': payment_method.payment_method_partner_bank_account_id.id,\n                    'payment_method_partner_bank_account_ref': payment_method.payment_method_partner_bank_account_ref,\n                    'payment_method_partner_bank_account_ref_type': payment_method.payment_method_partner_bank_account_ref_type,\n                    'payment_method_partner_bank_account_type': payment_method.payment_method_partner_bank_account_type,\n                    'payment_method_partner_bank_account_currency_id': payment_method.payment_method_partner_bank_account_currency_id.id,\n                    'payment_method_partner_bank_account_acc_number': payment_method.payment_method_partner_bank_account_acc_number,\n                    'payment_method_partner_bank_account_acc_number_type': payment_method.payment_method_partner_bank_account_acc_number_type,\n                    'payment_method_partner_bank", "CodeBleu_score": 19.347905099837057}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        if journal.type == 'bank':\n            journal.outbound_payment_method_line_ids = journal.outbound_payment_method_ids.filtered(lambda p: p.payment_type == 'outbound')\n        elif journal.type == 'cash':\n            journal.outbound_payment_method_line_ids = journal.outbound_payment_method_ids.filtered(lambda p: p.payment_type == 'outbound')\n        elif journal.type == 'purchase':\n            journal.outbound_payment_method_line_ids = journal.outbound_payment_method_ids.filtered(lambda p: p.payment_type == 'outbound')\n        elif journal.type == 'sale':\n            journal.outbound_payment_method_line_ids = journal.outbound_payment_method_ids.filtered(lambda p: p.payment_type == 'outbound')\n        elif journal.type == 'invoice':\n            journal.outbound_payment_method_line_ids = journal.outbound_payment_method_ids.filtered(lambda p: p.payment_type == 'outbound')\n        elif journal.type == 'general':\n            journal.outbound_payment_method_line_ids = journal.outbound_payment_method_ids.filtered(lambda p: p.payment_type == 'outbound')\n        elif journal.type == 'receivable':\n            journal.outbound_payment_method_line_ids = journal.outbound_payment_method_ids.filtered(lambda p: p.payment_type == 'outbound')\n        elif journal.type == 'payable':\n            journal.outbound_payment_method_line_ids = journal.outbound_payment_method_ids.filtered(lambda p: p.payment_type == 'outbound')\n        elif journal.type == 'taxes':\n            journal.outbound_payment_method_line_ids = journal.outbound_payment_method_ids.filtered(lambda p: p.payment_type == 'outbound')\n        elif journal.type == 'fixed_assets':\n            journal.outbound_payment_method_line_ids = journal.", "CodeBleu_score": 20.092213240027625}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t\n    for move in self:\n        if move.invoice_date and move.date:\n            # If the move has both an invoice date and a date, it does nothing.\n            pass\n        elif move.invoice_date:\n            # If the move has only an invoice date, it sets the date to the accounting date.\n            move.date = move.invoice_date\n        else:\n            # If the move has neither an invoice date nor a date, it sets the date to today's date.\n            move.date = fields.Date.today()\n\n", "CodeBleu_score": 17.74478447889435}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if move.invoice_date:\n            if move.type == 'out_invoice' and move.state != 'draft':\n                move.date = move.invoice_date\n            else:\n                move.date = move._get_accounting_date()\n        elif move.date:\n            move.date = move._get_accounting_date()\n        else:\n            move.date = fields.Date.context_today(move)\n\n", "CodeBleu_score": 30.290089164563277}, {"code": "def _compute_date(self)\n\t\n    # TODO: refactor the code to avoid this hack\n    self.env.context.get('force_company', False)\n    self.env.context.get('force_journal_id', False)\n    self.env.context.get('force_journal_ids', False)\n    self.env.context.get('force_journal_ids_str', False)\n    self.env.context.get('force_journal_id_str', False)\n    self.env.context.get('force_journal_ids_str', False)\n    self.env.context.get('force_journal_id_str', False)\n    self.env.context.get('force_journal_ids_str', False)\n    self.env.context.get('force_journal_id_str', False)\n    self.env.context.get('force_journal_ids_str', False)\n    self.env.context.get('force_journal_id_str', False)\n    self.env.context.get('force_journal_ids_str', False)\n    self.env.context.get('force_journal_id_str', False)\n    self.env.context.get('force_journal_ids_str', False)\n    self.env.context.get('force_journal_id_str', False)\n    self.env.context.get('force_journal_ids_str', False)\n    self.env.context.get('force_journal_id_str', False)\n    self.env.context.get('force_journal_ids_str', False)\n    self.env.context.get('force_journal_id_str', False)\n    self.env.context.get('force_journal_ids_str', False)\n    self.env.context.get('force_journal_id_str', False)\n    self.env.context.get('force_journal_ids_str', False)\n    self.env.context.get('force_journal_id_str', False)\n    self.env.context.get('force_journal_ids_str', False)\n    self.env", "CodeBleu_score": 16.311747977598944}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.type == 'in_invoice':\n            if move.partner_id.property_supplier_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id\n            elif move.partner_id.property_customer_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_customer_payment_term_id\n            else:\n                move.invoice_payment_term_id = False\n        elif move.type == 'out_invoice':\n            if move.partner_id.property_customer_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_customer_payment_term_id\n            elif move.partner_id.property_supplier_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id\n            else:\n                move.invoice_payment_term_id = False\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 42.82086649542088}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.type in ('in_invoice', 'in_refund'):\n            if move.partner_id.property_supplier_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id\n            else:\n                move.invoice_payment_term_id = False\n        elif move.type in ('out_invoice', 'out_refund'):\n            if move.partner_id.property_customer_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_customer_payment_term_id\n            else:\n                move.invoice_payment_term_id = False\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 46.266209797417645}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.type in ('out_invoice', 'in_invoice'):\n            if move.partner_id.property_supplier_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id\n            elif move.partner_id.property_customer_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_customer_payment_term_id\n            else:\n                move.invoice_payment_term_id = False\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 47.01125603217219}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t\n    tax_groups_by_country_and_company = defaultdict(list)\n    tax_groups_by_country_and_company_without_country = defaultdict(list)\n    for tax in self:\n        if tax.country_id:\n            tax_groups_by_country_and_company[(tax.country_id.id, tax.company_id.id)].append(tax)\n        else:\n            tax_groups_by_country_and_company_without_country[(tax.company_id.id)].append(tax)\n\n    for tax_group_by_country_and_company in tax_groups_by_country_and_company.values():\n        tax_group_by_country_and_company.tax_group_id = self.env['account.tax.group'].search([('country_id', 'in', [tax.country_id.id for tax in tax_group_by_country_and_company])], limit=1)\n        if not tax_group_by_country_and_company.tax_group_id:\n            tax_group_by_country_and_company.tax_group_id = self.env['account.tax.group'].search([('company_id', '=', tax_group_by_country_and_company[0].company_id.id)], limit=1)\n\n    for tax_group_by_country_and_company_without_country in tax_groups_by_country_and_company_without_country.values():\n        tax_group_by_country_and_company_without_country.tax_group_id = self.env['account.tax.group'].search([('company_id', '=', tax_group_by_country_and_company_without_country[0].company_id.id)], limit=1)\n\n    for tax in self:\n        if not tax.tax_group_id:\n            tax.tax_group_id = tax.tax_group_id.tax_group_id\n\n", "CodeBleu_score": 33.36114749875105}, {"code": " def _compute_tax_group_id(self)\n\t\n    tax_group_by_country_by_company = defaultdict(lambda: defaultdict(list))\n    for tax in self:\n        tax_group_by_country_by_company[tax.country_id.id][tax.company_id.id].append(tax)\n\n    for country_id, company_tax_groups in tax_group_by_country_by_company.items():\n        for company_id, taxes in company_tax_groups.items():\n            for tax in taxes:\n                tax.tax_group_id = tax._get_tax_group_for_country(country_id, company_id)\n\n\n def _get_tax_group_for_country(self, country_id, company_id):\n    \"\"\"This function searches for a matching tax group with the same country and company. If no exact match is found, it searches for a tax group without a specified country but within the same company.\"\"\"\n    for tax_group in self:\n        if tax_group.country_id.id == country_id and tax_group.company_id.id == company_id:\n            return tax_group\n    for tax_group in self:\n        if not tax_group.country_id.id and tax_group.company_id.id == company_id:\n            return tax_group\n    return False\n\n\n def _compute_tax_group_id(self):\n    \"\"\"This function assigns the appropriate tax group to each tax based on the tax's country and company. It first categorizes taxes by their country and company. For each group, it searches for a matching tax group with the same country and company. If no exact match is found, it searches for a tax group without a specified country but within the same company.\"\"\"\n    tax_group_by_country_by_company = defaultdict(lambda: defaultdict(list))\n    for tax in self:\n        tax_group_by_country_by_company[tax.country_id.id][tax.company_id.id].append(tax)\n\n    for country_id, company_tax_groups in tax_group_by_country_by_company.items():\n        for company_id, taxes in company_tax_groups.items", "CodeBleu_score": 25.432756984001337}, {"code": " def _compute_tax_group_id(self)\n\t\n    tax_groups_by_country_and_company = defaultdict(list)\n    for tax in self:\n        tax_groups_by_country_and_company[(tax.country_id, tax.company_id)].append(tax)\n\n    for country_and_company, taxes in tax_groups_by_country_and_company.items():\n        country, company = country_and_company\n        if country:\n            for tax in taxes:\n                tax.tax_group_id = tax.env['account.tax.group'].search([('country_id', '=', country.id), ('company_id', '=', company.id)], limit=1)\n        if not tax.tax_group_id:\n            for tax in taxes:\n                tax.tax_group_id = tax.env['account.tax.group'].search([('country_id', '=', False), ('company_id', '=', company.id)], limit=1)\n", "CodeBleu_score": 37.833717704382714}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    if not module_file.exists():\n        raise FileNotFoundError(f\"Module file {module_file} does not exist.\")\n    if not url.startswith(\"http\"):\n        raise ValueError(f\"Invalid URL: {url}. Must start with http or https.\")\n    if not db:\n        raise ValueError(\"Database name must be specified.\")\n    login_url = f\"{url}/login\"\n    with self.session.get(login_url, params={\"db\": db}) as response:\n        if response.status_code != 200:\n            raise RuntimeError(f\"Could not access login page: {response.status_code}\")\n    response_text = self.session.get(f\"{url}/base_import_module/login_upload\").text\n    if \"Please install the module\" in response_text:\n        raise RuntimeError(f\"Module not installed. Please install the module on the server by visiting {url}/base_import_module/install_module.\")\n    if \"Please update the module\" in response_text:\n        raise RuntimeError(f\"Module out of date. Please update the module on the server by visiting {url}/base_import_module/update_module.\")\n    with open(module_file, \"rb\") as f:\n        module_data = f.read()\n    files = {\"module_file\": (module_file.name, module_data)}\n    data = {\"login\": login, \"password\": password, \"db\": db, \"force\": force}\n    with self.session.post(f\"{url}/base_import_module/login_upload\", files=files, data=data) as response:\n        if response.status_code != 200:\n            raise RuntimeError(f\"Could not upload module: {response.status_code}\")\n        return response.text\n\n", "CodeBleu_score": 43.12188252811285}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n\n    # Set database\n    self.set_database(db)\n\n    # Check if module exists\n    if not force:\n        try:\n            self.check_module_exists(module_file)\n        except:\n            pass\n\n    # Login to the server\n    self.login(login, password)\n\n    # Read the module file\n    with open(module_file, \"rb\") as f:\n        module_file_content = f.read()\n\n    # Prepare the POST request data\n    data = {\n        \"module\": module_file_content,\n        \"force\": force,\n    }\n\n    # Send the POST request\n    r = self.post(url, data=data)\n\n    # Check the response\n    if r.status_code == 200:\n        return r.text\n    else:\n        raise Exception(\"Server response: {}\".format(r.text))\n\n", "CodeBleu_score": 35.56516602028877}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    if not os.path.isfile(module_file):\n        raise FileNotFoundError(\"Module file does not exist.\")\n\n    # Check if module file is a zip file\n    if not zipfile.is_zipfile(module_file):\n        raise FileNotFoundError(\"Module file is not a zip file.\")\n\n    # Set database\n    self.set_database(db)\n\n    # Get login page\n    login_page = self.get_page(url)\n\n    # Get CSRF token\n    token = self.get_csrf_token(login_page)\n\n    # Prepare POST data\n    post_data = {\n        \"csrfmiddlewaretoken\": token,\n        \"username\": login,\n        \"password\": password,\n        \"database\": db,\n        \"force\": force,\n    }\n\n    # Upload module\n    response = self.post_page(url + \"/login_upload\", data=post_data, files={\"module\": open(module_file, \"rb\")})\n\n    # Check if module was uploaded\n    if \"Module uploaded successfully.\" in response.text:\n        return response.text\n    else:\n        raise Exception(\"Module was not uploaded.\")\n\n", "CodeBleu_score": 43.43009319173462}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t\n    # Retrieve configuration settings\n    db_name = odoo.conf.settings.get_db_name()\n    overwrite = odoo.conf.settings.get_db_overwrite()\n\n    # Create a database registry and a cursor\n    registry = odoo.registry(db_name)\n    cr = registry.cursor()\n\n    # Create a TranslationImporter and load the translations\n    importer = odoo.modules.loading.TranslationImporter(cr, overwrite)\n    importer.load_translations()\n\n", "CodeBleu_score": 15.61739283821969}, {"code": "def import_translation()\n\t\n\n    # Get configuration settings\n    db_name = os.environ.get('ODOO_DB_NAME', 'odoo')\n    overwrite = os.environ.get('ODOO_IMPORT_TRANSLATION_OVERWRITE', 'False').lower() == 'true'\n\n    # Create new database registry\n    registry = odoo.modules.registry.Registry.new(db_name)\n    db = registry.db\n\n    # Create a cursor to initialize the TranslationImporter\n    cr = db.cursor()\n\n    # Initialize the TranslationImporter\n    importer = odoo.modules.db.translations.TranslationImporter(cr, overwrite)\n\n    # Load translation files\n    importer.load_translations()\n\n    # Save translations\n    importer.save_translations()\n\n", "CodeBleu_score": 44.10789959986449}, {"code": "def import_translation()\n\t\n    # Get configuration settings\n    db_name = odoo.tools.config['db_name']\n    overwrite_translations = odoo.tools.config['overwrite_translations']\n    # Create a new database registry\n    registry = odoo.modules.registry.Registry.new(db_name)\n    # Create a cursor to initialize a TranslationImporter\n    cr = registry.cursor()\n    # Initialize a TranslationImporter\n    importer = registry.get('web.translation.import')\n    # Load translation files based on the specified configuration\n    importer.load_translations(overwrite=overwrite_translations)\n    # Save the translations, with the option to overwrite existing ones\n    importer.save_translations(overwrite=overwrite_translations)\n    # Close the cursor and the registry\n    cr.close()\n    registry.close()\n\n", "CodeBleu_score": 32.744128241877654}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\t\n    if name in self.children:\n        return self.children[name]\n    else:\n        child = self.children[name] = self.new_child(name, info)\n        child.depth = self.depth + 1\n        child.inherit_from_parent(self)\n        child.sort_children()\n        return child\n\n", "CodeBleu_score": 29.534714602441603}, {"code": "def add_child(self, name, info)\n\t\n    # Check if the child already exists\n    if name in self.children:\n        child = self.children[name]\n    else:\n        # Create the child node\n        child = self.env['ir.module.module'].create({\n            'name': name,\n            'summary': info['summary'],\n            'description': info['description'],\n            'website': info['website'],\n            'sequence': info['sequence'],\n            'active': info['active'],\n            'state': info['state'],\n            'auto_install': info['auto_install'],\n            'application': info['application'],\n            'icon': info['icon'],\n            'demo': info['demo'],\n            'demo_xml': info['demo_xml'],\n            'demo_json': info['demo_json'],\n            'demo_report': info['demo_report'],\n            'demo_data': info['demo_data'],\n            'installable': info['installable'],\n            'website_id': self.website_id.id,\n            'website_published': self.website_published,\n            'website_meta_title': self.website_meta_title,\n            'website_meta_description': self.website_meta_description,\n            'website_meta_keywords': self.website_meta_keywords,\n            'website_published_menu': self.website_published_menu,\n            'website_published_menu_id': self.website_published_menu_id.id,\n            'website_id': self.website_id.id,\n            'website_url': self.website_url,\n            'website_meta_title': self.website_meta_title,\n            'website_meta_description': self.website_meta_description,\n            'website_meta_keywords': self.website_meta_keywords,\n            'website_published_menu': self.website_published_menu,\n            'website_published_menu_id': self.website_published_menu_id.id,\n            'website_id': self.website_id.id,\n            'website_url': self.website_url,\n            'website_meta_title': self.website_", "CodeBleu_score": 21.097013013807715}, {"code": "def add_child(self, name, info)\n\t\n    if name in self.children:\n        return self.children[name]\n    else:\n        self.children[name] = Node(name, info, self.depth + 1)\n        self.children[name].parent = self\n        self.children[name].children = {}\n        self.children[name].children.update(self.children)\n        self.children[name].children = dict(sorted(self.children[name].children.items(), key=lambda item: item[0]))\n        self.children[name].children.pop(name, None)\n        return self.children[name]\n\n", "CodeBleu_score": 26.27553892300304}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t\n\n    result = {}\n    for date in dates:\n        result[date] = {\n            \"opening\": 0.0,\n            \"debit\": 0.0,\n            \"credit\": 0.0,\n            \"balance\": 0.0,\n        }\n\n    for entry in gl_entries:\n        if entry.account == account:\n            if entry.is_opening == \"Yes\":\n                if entry.credit:\n                    result[entry.posting_date][\"opening\"] = entry.credit\n                elif entry.debit:\n                    result[entry.posting_date][\"opening\"] = entry.debit\n            elif entry.is_opening == \"No\":\n                if entry.credit:\n                    result[entry.posting_date][\"debit\"] = entry.credit\n                elif entry.debit:\n                    result[entry.posting_date][\"credit\"] = entry.debit\n\n    root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n    if root_type not in [\"Asset\", \"Liability\", \"Equity\"]:\n        for date in result:\n            result[date][\"debit\"] = -result[date][\"debit\"]\n            result[date][\"credit\"] = -result[date][\"credit\"]\n\n    for date in result:\n        result[date][\"balance\"] = result[date][\"opening\"] + result[date][\"debit\"] - result[date][\"credit\"]\n\n    return result\n\n", "CodeBleu_score": 22.734220717603463}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {}\n    for date in dates:\n        result[date] = {\"balance\": 0}\n    for entry in gl_entries:\n        if entry.account == account:\n            if entry.posting_date not in result:\n                result[entry.posting_date] = {\"balance\": 0}\n            if entry.credit:\n                result[entry.posting_date][\"balance\"] += entry.credit\n            else:\n                result[entry.posting_date][\"balance\"] -= entry.debit\n    root_type = frappe.get_cached_value(\"Account\", account, \"root_type\")\n    if root_type not in [\"Asset\", \"Liability\", \"Equity\"]:\n        for date in result:\n            result[date][\"balance\"] *= -1\n    elif root_type == \"Asset\":\n        balance = 0\n        for date in result:\n            balance += result[date][\"balance\"]\n            result[date][\"balance\"] = balance\n    return result\n\n", "CodeBleu_score": 29.84642707277918}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\"dates\": dates, \"balances\": {}}\n    for date in dates:\n        result[\"balances\"][date] = 0\n\n    root_type = frappe.get_cached_value(\"Account\", account, \"root_type\")\n    if root_type not in [\"Asset\", \"Liability\", \"Equity\"]:\n        gl_entries = [d for d in gl_entries if d.credit > 0]\n\n    for entry in gl_entries:\n        if entry.account == account:\n            if root_type in [\"Asset\", \"Liability\"]:\n                for date in dates:\n                    if getdate(entry.posting_date) <= getdate(date):\n                        result[\"balances\"][date] += entry.credit\n            elif root_type == \"Equity\":\n                for date in dates:\n                    if getdate(entry.posting_date) <= getdate(date):\n                        result[\"balances\"][date] += entry.debit\n            else:\n                for date in dates:\n                    if getdate(entry.posting_date) <= getdate(date):\n                        result[\"balances\"][date] -= entry.debit\n\n    return result\n\n", "CodeBleu_score": 28.69302058516868}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t\n    if not self.is_new():\n        if self.account_type == \"Receivable\":\n            if self.account_type != self.old_account_type:\n                if self.get(\"is_group\") == 0:\n                    if self.get(\"account_type\") != \"Receivable\":\n                        if self.get(\"account_type\") != \"Bank\":\n                            if self.get(\"account_type\") != \"Cash\":\n                                if self.get(\"account_type\") != \"Payable\":\n                                    if self.get(\"account_type\") != \"Bank\":\n                                        if self.get(\"account_type\") != \"Cash\":\n                                            if self.get(\"account_type\") != \"Bank\":\n                                                if self.get(\"account_type\") != \"Cash\":\n                                                    if self.get(\"account_type\") != \"Bank\":\n                                                        if self.get(\"account_type\") != \"Cash\":\n                                                            if self.get(\"account_type\") != \"Bank\":\n                                                                if self.get(\"account_type\") != \"Cash\":\n                                                                    if self.get(\"account_type\") != \"Bank\":\n                                                                        if self.get(\"account_type\") != \"Cash\":\n                                                                            if self.get(\"account_type\") != \"Bank\":\n                                                                                if self.get(\"account_type\") != \"Cash\":\n                                                                                    if self.get(\"account_type\") != \"Bank\":\n                                                                                        if self.get(\"account_type\") != \"Cash\":\n                                                                                            if self.get(\"account_type\") != \"Bank\":\n                                                                                                if self.get(\"account_type\") != \"Cash\":\n                                                                                                    if self.get(\"account_type\") != \"Bank\":\n                                                                                                        if self.get(\"account_type\") != \"Cash\":\n                                                                                                            if self.get(\"account_type\") != \"Bank\":\n                                                                                                                if", "CodeBleu_score": 15.95510684972271}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type == \"Receivable\" or self.account_type == \"Payable\":\n        if self.account_type != self.old_account_type:\n            if self.is_group:\n                if self.account_type == \"Receivable\":\n                    if self.get_children_accounts(parent_type=\"Receivable\"):\n                        frappe.msgprint(_(\"Cannot change the type of Receivable Account {0} to {1} as it has child accounts.\").format(self.name, self.account_type))\n                        frappe.throw(_(\"Cannot change the type of Receivable Account {0} to {1} as it has child accounts.\").format(self.name, self.account_type))\n                elif self.account_type == \"Payable\":\n                    if self.get_children_accounts(parent_type=\"Payable\"):\n                        frappe.msgprint(_(\"Cannot change the type of Payable Account {0} to {1} as it has child accounts.\").format(self.name, self.account_type))\n                        frappe.throw(_(\"Cannot change the type of Payable Account {0} to {1} as it has child accounts.\").format(self.name, self.account_type))\n            else:\n                if self.account_type == \"Receivable\":\n                    if self.get_gl_entries(\"credit_in_account_currency\", \">0\"):\n                        frappe.msgprint(_(\"Cannot change the type of Receivable Account {0} to {1} as it has existing receivable entries.\").format(self.name, self.account_type))\n                        frappe.throw(_(\"Cannot change the type of Receivable Account {0} to {1} as it has existing receivable entries.\").format(self.name, self.account_type))\n                elif self.account_type == \"Payable\":\n                    if self.get_gl_entries(\"debit_in_account_currency\", \">0\"):\n                        frappe.msgprint(_(\"Cannot change the type of Payable Account {0} to {1} as it has existing payable entries.\").format(self", "CodeBleu_score": 20.943288951463586}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type in (\"Receivable\", \"Payable\"):\n        if self.account_type != self.old_account_type:\n            if self.get(\"is_group\") == 0:\n                if self.get(\"account_type\") != \"Receivable\" and self.get(\"account_type\") != \"Payable\":\n                    if self.get(\"account_type\") == \"Bank\":\n                        if self.get(\"report_type\") == \"Balance Sheet\":\n                            if self.get(\"root_type\") == \"Asset\":\n                                if self.get(\"parent_account\") == \"Cash\" or self.get(\"parent_account\") == \"Bank\":\n                                    pass\n                                else:\n                                    throw(_(\"Please select a parent account as Cash or Bank.\"))\n                        else:\n                            if self.get(\"root_type\") == \"Asset\":\n                                pass\n                            else:\n                                throw(_(\"Please select a root type as Asset.\"))\n                    else:\n                        if self.get(\"report_type\") == \"Balance Sheet\":\n                            if self.get(\"root_type\") == \"Liability\":\n                                pass\n                            else:\n                                throw(_(\"Please select a root type as Liability.\"))\n                        else:\n                            if self.get(\"root_type\") == \"Liability\":\n                                pass\n                            else:\n                                throw(_(\"Please select a root type as Liability.\"))\n\n                if self.get(\"account_type\") == \"Receivable\":\n                    if self.get(\"report_type\") == \"Balance Sheet\":\n                        if self.get(\"root_type\") == \"Asset\":\n                            pass\n                        else:\n                            throw(_(\"Please select a root type as Asset.\"))\n                    else:\n                        if self.get(\"root_type\") == \"Asset\":\n                            pass\n                        else:\n                            throw(_(\"Please select a root type as Asset.\"))\n\n                if self.get(\"account_type\") == \"Payable\":\n                    if self.get(\"report_type\") == \"Balance Sheet", "CodeBleu_score": 17.58625763046265}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t\n    if self.is_group:\n        return\n\n    if not self.account_currency:\n        self.account_currency = self.company_currency\n        self.account_currency_display = self.account_currency\n    else:\n        self.account_currency_display = self.account_currency\n\n    if self.account_currency != self.company_currency:\n        self.is_currency_explicitly_set = 1\n\n    if self.account_type == \"Tax\":\n        self.is_tax_account = 1\n\n    if self.is_tax_account:\n        self.is_group = 1\n\n    if self.account_type == \"Bank\":\n        self.is_bank_account = 1\n\n    if self.account_type == \"Cash\":\n        self.is_cash_account = 1\n\n    if self.is_cash_account or self.is_bank_account:\n        self.is_group = 1\n\n    if self.is_group:\n        self.is_cash_account = 0\n        self.is_bank_account = 0\n\n    if not self.is_group:\n        self.is_cash_account = 0\n        self.is_bank_account = 0\n\n    if self.is_cash_account or self.is_bank_account:\n        self.is_group = 1\n\n    if self.is_group:\n        self.is_cash_account = 0\n        self.is_bank_account = 0\n\n    if self.is_group:\n        self.is_cash_account = 0\n        self.is_bank_account = 0\n\n    if not self.is_group:\n        self.is_cash_account = 0\n        self.is_bank_account = 0\n\n    if self.account_type == \"Cash\" and self.is_cash_account:\n        self.is_cash_account = 1\n\n    if self.account_type == \"Bank\" and self.is_bank_account:\n        self.is_bank_account =", "CodeBleu_score": 23.653119879920904}, {"code": "def validate_account_currency(self)\n\t\n    if not self.account_currency:\n        self.account_currency = self.company_currency\n    elif self.account_currency != self.company_currency:\n        # check if any GL entries exist with a different currency\n        if frappe.db.sql(\"\"\"select name from `tabGL Entry`\n\t\t\twhere account = %s and company = %s and account_currency != %s\"\"\",\n\t\t\t(self.name, self.company, self.account_currency)):\n            frappe.throw(_(\"Cannot change currency of account {0} as it has existing GL entries with a different currency.\").format(self.name))\n\n    if self.is_group:\n        self.account_currency = self.company_currency\n\n    if self.account_type in (\"Tax\", \"Chargeable\"):\n        self.account_currency = self.company_currency\n\n    if self.account_type in (\"Bank\", \"Cash\"):\n        self.account_currency = self.company_currency\n\n    if self.account_type == \"Expense Account\":\n        self.account_currency = self.company_currency\n\n", "CodeBleu_score": 26.776090932990073}, {"code": "def validate_account_currency(self)\n\t\n\n    if not self.account_currency:\n        self.account_currency = self.company_currency\n    if not self.account_currency:\n        self.account_currency = erpnext.get_default_currency()\n\n    if not self.account_currency:\n        frappe.throw(_(\"Please set default currency in Company master\"))\n\n    if self.account_currency != self.company_currency and self.account_type != \"Tax\":\n        frappe.throw(_(\"Account Currency cannot be different from Company Currency\"))\n\n    if self.account_currency != self.company_currency and self.is_group:\n        frappe.throw(_(\"Account Currency cannot be different from Company Currency for a group\"))\n\n    if self.account_currency != self.company_currency and self.is_group and self.parent_account:\n        frappe.throw(_(\"Parent Account Currency cannot be different from Company Currency for a group\"))\n\n    if self.account_currency != self.company_currency and self.is_group and self.parent_account:\n        frappe.throw(_(\"Parent Account Currency cannot be different from Company Currency for a group\"))\n\n    if self.account_currency != self.company_currency and self.is_group and self.parent_account:\n        frappe.throw(_(\"Parent Account Currency cannot be different from Company Currency for a group\"))\n\n    if self.account_currency != self.company_currency and self.is_group and self.parent_account:\n        frappe.throw(_(\"Parent Account Currency cannot be different from Company Currency for a group\"))\n\n    if self.account_currency != self.company_currency and self.is_group and self.parent_account:\n        frappe.throw(_(\"Parent Account Currency cannot be different from Company Currency for a group\"))\n\n    if self.account_currency != self.company_currency and self.is_group and self.parent_account:\n        frappe.throw(_(\"Parent Account Currency cannot be different from Company Currency for a group\"))\n\n    if self.account_currency != self.company_currency and self.is_group and self.parent_account:\n        frappe.throw(_(\"Parent Account", "CodeBleu_score": 27.32967072579553}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n\n    # Initialize the dictionary to merge entries\n    merged_entries = {}\n\n    # Iterate through each entry\n    for entry in entries:\n        # Generate a unique key for each entry based on account, posting date, and accounting dimensions\n        key = (\n            entry.account,\n            entry.posting_date,\n            tuple(\n                (\n                    accounting_dimension.dimension_value\n                    for accounting_dimension in accounting_dimensions\n                )\n            ),\n        )\n\n        # If the key is not present in the dictionary, initialize a new dictionary with the key as the key and the entry as the value\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \"entry\": entry,\n                \"debit\": 0,\n                \"credit\": 0,\n                \"debit_in_account_currency\": 0,\n                \"credit_in_account_currency\": 0,\n            }\n\n        # If the key is present in the dictionary, update the debit and credit amounts and their respective amounts in account currency\n        else:\n            merged_entries[key][\"debit\"] += entry.debit\n            merged_entries[key][\"credit\"] += entry.credit\n            merged_entries[key][\"debit_in_account_currency\"] += entry.debit_in_account_currency\n            merged_entries[key][\"credit_in_account_currency\"] += entry.credit_in_account_currency\n\n    return merged_entries\n\n", "CodeBleu_score": 40.65424072653961}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    entries_dict = {}\n    for entry in entries:\n        key = get_key(entry, accounting_dimensions)\n        if key:\n            if key not in entries_dict:\n                entries_dict[key] = entry\n            else:\n                entries_dict[key].debit += entry.debit\n                entries_dict[key].credit += entry.credit\n                entries_dict[key].debit_in_account_currency += entry.debit_in_account_currency\n                entries_dict[key].credit_in_account_currency += entry.credit_in_account_currency\n    return entries_dict\n\n", "CodeBleu_score": 25.1202074401352}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    aggregated_entries = {}\n    for entry in entries:\n        key = get_key_from_entry(entry, accounting_dimensions)\n        if key not in aggregated_entries:\n            aggregated_entries[key] = entry\n        else:\n            aggregated_entries[key].debit += entry.debit\n            aggregated_entries[key].credit += entry.credit\n            aggregated_entries[key].debit_in_account_currency += entry.debit_in_account_currency\n            aggregated_entries[key].credit_in_account_currency += entry.credit_in_account_currency\n            aggregated_entries[key].balance += entry.balance\n            aggregated_entries[key].balance_in_account_currency += entry.balance_in_account_currency\n            aggregated_entries[key].total_debit_in_account_currency += entry.total_debit_in_account_currency\n            aggregated_entries[key].total_credit_in_account_currency += entry.total_credit_in_account_currency\n            aggregated_entries[key].total += entry.total\n            aggregated_entries[key].total_in_account_currency += entry.total_in_account_currency\n    return aggregated_entries\n\n", "CodeBleu_score": 22.394466552970865}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype in (\"Purchase Invoice\", \"Purchase Receipt\"):\n        supplier = self.supplier\n    elif self.doctype in (\"Payment Entry\", \"Payment Request\"):\n        supplier = self.party_type\n        if self.party_type == \"Supplier\":\n            supplier = self.party\n    else:\n        return\n\n    if supplier:\n        supplier_blocked = frappe.db.get_value(\"Supplier\", supplier, \"supplier_blocked\")\n        if supplier_blocked:\n            if supplier_blocked.get(\"type\") == self.doctype:\n                if not supplier_blocked.get(\"release_date\") or getdate(supplier_blocked.get(\"release_date\")) <= getdate(nowdate()):\n                    frappe.throw(_(\"Supplier {0} is on hold. Please contact your administrator\").format(supplier))\n\n", "CodeBleu_score": 34.624164378925606}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype == \"Purchase Invoice\":\n        supplier = frappe.get_value(\"Purchase Invoice Item\", {\"parent\": self.name}, \"supplier\")\n    elif self.doctype == \"Purchase Receipt\":\n        supplier = frappe.get_value(\"Purchase Receipt Item\", {\"parent\": self.name}, \"supplier\")\n    else:\n        supplier = self.supplier\n\n    if supplier:\n        supplier_blocked = frappe.get_value(\"Supplier\", supplier, \"blocked\")\n        supplier_hold_type = frappe.get_value(\"Supplier\", supplier, \"hold_type\")\n        if supplier_blocked and supplier_hold_type == self.doctype:\n            supplier_hold_date = frappe.get_value(\"Supplier\", supplier, \"hold_date\")\n            if supplier_hold_date and supplier_hold_date <= today():\n                frappe.throw(_(\"Supplier {0} is still on hold\").format(supplier))\n\n", "CodeBleu_score": 35.16735201456854}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype == \"Purchase Invoice\":\n        supplier = self.supplier\n    elif self.doctype == \"Purchase Receipt\":\n        supplier = self.supplier\n    elif self.doctype == \"Purchase Order\":\n        supplier = self.supplier\n    elif self.doctype == \"Purchase Invoice\":\n        supplier = self.supplier\n    elif self.doctype == \"Purchase Invoice\":\n        supplier = self.supplier\n    elif self.doctype == \"Purchase Invoice\":\n        supplier = self.supplier\n    elif self.doctype == \"Purchase Invoice\":\n        supplier = self.supplier\n    elif self.doctype == \"Purchase Invoice\":\n        supplier = self.supplier\n    elif self.doctype == \"Purchase Invoice\":\n        supplier = self.supplier\n    elif self.doctype == \"Purchase Invoice\":\n        supplier = self.supplier\n    elif self.doctype == \"Purchase Invoice\":\n        supplier = self.supplier\n    elif self.doctype == \"Purchase Invoice\":\n        supplier = self.supplier\n    elif self.doctype == \"Purchase Invoice\":\n        supplier = self.supplier\n    elif self.doctype == \"Purchase Invoice\":\n        supplier = self.supplier\n    elif self.doctype == \"Purchase Invoice\":\n        supplier = self.supplier\n    elif self.doctype == \"Purchase Invoice\":\n        supplier = self.supplier\n    elif self.doctype == \"Purchase Invoice\":\n        supplier = self.supplier\n    elif self.doctype == \"Purchase Invoice\":\n        supplier = self.supplier\n    elif self.doctype == \"Purchase Invoice\":\n        supplier = self.supplier\n    elif self.doctype == \"Purchase Invoice\":\n        supplier = self.supplier\n    elif self.doctype == \"Purchase Invoice\":\n        supplier = self.supplier\n    elif self.doctype ==", "CodeBleu_score": 16.635513608620425}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = [\n        \"GL Entry\",\n        \"Stock Ledger Entry\",\n        \"Stock Reconciliation\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Purchase Invoice Item\",\n        \"Purchase Order\",\n        \"Purchase Order Item\",\n        \"Sales Invoice\",\n        \"Sales Invoice Item\",\n        \"Sales Order\",\n        \"Sales Order Item\",\n        \"Delivery Note\",\n        \"Delivery Note Item\",\n        \"Sales Invoice\",\n        \"Sales Invoice Item\",\n        \"Sales Order\",\n        \"Sales Order Item\",\n        \"Payment Entry\",\n        \"Journal Entry\",\n        \"Journal Entry Account\",\n        \"Payment Reconciliation\",\n        \"Purchase Receipt\",\n        \"Purchase Receipt Item\",\n        \"Purchase Invoice\",\n        \"Purchase Invoice Item\",\n        \"Purchase Order\",\n        \"Purchase Order Item\",\n        \"Stock Reconciliation\",\n        \"Stock Ledger Entry\",\n        \"GL Entry\",\n        \"Stock Ledger Entry\",\n        \"Stock Reconciliation\",\n        \"GL Entry\",\n        \"Stock Ledger Entry\",\n        \"Stock Reconciliation\",\n        \"GL Entry\",\n        \"Stock Ledger Entry\",\n        \"Stock Reconciliation\",\n        \"GL Entry\",\n        \"Stock Ledger Entry\",\n        \"Stock Reconciliation\",\n        \"GL Entry\",\n        \"Stock Ledger Entry\",\n        \"Stock Reconciliation\",\n        \"GL Entry\",\n        \"Stock Ledger Entry\",\n        \"Stock Reconciliation\",\n        \"GL Entry\",\n        \"Stock Ledger Entry\",\n        \"Stock Reconciliation\",\n        \"GL Entry\",\n        \"Stock Ledger Entry\",\n        \"Stock Reconciliation\",\n        \"GL Entry\",\n        \"Stock Ledger Entry\",\n        \"Stock Reconciliation\",\n        \"GL Entry\",\n        \"Stock Ledger Entry\",\n        \"Stock Re", "CodeBleu_score": 4.89263753399398}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n\n    repost_doctypes = [\n        \"GL Entry\",\n        \"Stock Ledger Entry\",\n        \"Stock Reconciliation\",\n        \"Stock Entry\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Purchase Invoice Item\",\n        \"Purchase Invoice Tax\",\n        \"Purchase Invoice Item Tax\",\n        \"Purchase Invoice Discount\",\n        \"Purchase Invoice Payment\",\n        \"Purchase Invoice Payment Accounting Entry\",\n        \"Purchase Invoice Payment Reconciliation\",\n        \"Purchase Invoice Taxes and Charges\",\n        \"Purchase Invoice Item Taxes and Charges\",\n        \"Purchase Invoice Taxes and Charges Accounting Entry\",\n        \"Purchase Invoice Taxes and Charges Payment\",\n        \"Purchase Invoice Taxes and Charges Payment Reconciliation\",\n        \"Purchase Invoice Taxes and Charges Payment Accounting Entry\",\n        \"Purchase Invoice Taxes and Charges Payment Reconciliation\",\n        \"Purchase Invoice Taxes and Charges Payment Reconciliation Accounting Entry\",\n        \"Purchase Invoice Taxes and Charges Payment Reconciliation Item\",\n        \"Purchase Invoice Taxes and Charges Payment Reconciliation Item Accounting Entry\",\n        \"Purchase Invoice Taxes and Charges Payment Reconciliation Item Tax\",\n        \"Purchase Invoice Taxes and Charges Payment Reconciliation Item Tax Accounting Entry\",\n        \"Purchase Invoice Taxes and Charges Payment Reconciliation Item Discount\",\n        \"Purchase Invoice Taxes and Charges Payment Reconciliation Item Discount Accounting Entry\",\n        \"Purchase Invoice Taxes and Charges Payment Reconciliation Item Tax\",\n        \"Purchase Invoice Taxes and Charges Payment Reconciliation Item Tax Accounting Entry\",\n        \"Purchase Invoice Taxes and Charges Payment Reconciliation Item Discount\",\n        \"Purchase Invoice Taxes", "CodeBleu_score": 4.654414604855912}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = [\n        \"GL Entry\",\n        \"Stock Ledger Entry\",\n        \"Stock Reconciliation\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Receipt\",\n        \"Delivery Note\",\n        \"Sales Order\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Purchase In", "CodeBleu_score": 3.804650004801325}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n\n    # authenticate the client\n    self.client.set_access_token(self.access_token)\n\n    # construct the query parameters\n    params = {\n        \"start_date\": start_date,\n        \"end_date\": end_date,\n        \"options\": {\n            \"count\": 200,\n            \"offset\": 0,\n        },\n    }\n    if account_id:\n        params[\"account_ids\"] = [account_id]\n\n    # fetch the transactions\n    transactions = []\n    while True:\n        try:\n            resp = self.client.transactions.get(**params)\n            transactions.extend(resp[\"transactions\"])\n            if len(resp[\"transactions\"]) < 200:\n                break\n            params[\"options\"][\"offset\"] += 200\n        except plaid.errors.InvalidRequestError as e:\n            frappe.log_error(e)\n            frappe.throw(_(\"Invalid request. Please try again.\"))\n        except plaid.errors.ItemError as e:\n            frappe.log_error(e)\n            frappe.throw(_(\"Item error. Please try again.\"))\n        except plaid.errors.APIError as e:\n            frappe.log_error(e)\n            frappe.throw(_(\"API error. Please try again.\"))\n        except Exception as e:\n            frappe.log_error(e)\n            frappe.throw(_(\"Unknown error. Please try again.\"))\n\n    return transactions\n\n", "CodeBleu_score": 31.029099994089616}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    # authenticate client\n    client = plaid.Client(\n        client_id=self.client_id,\n        secret=self.secret,\n        environment=self.environment,\n    )\n    # construct query parameters\n    start_date = start_date.strftime(\"%Y-%m-%d\")\n    end_date = end_date.strftime(\"%Y-%m-%d\")\n    query_params = {\n        \"start_date\": start_date,\n        \"end_date\": end_date,\n        \"options\": {\"count\": 200},\n    }\n    if account_id:\n        query_params[\"account_ids\"] = [account_id]\n    # fetch transactions\n    transactions = []\n    try:\n        response = client.Transactions.get(**query_params)\n        transactions = response.transactions\n        while response.total_transactions > len(transactions):\n            response = client.Transactions.get(\n                **query_params,\n                offset=len(transactions),\n            )\n            transactions.extend(response.transactions)\n    except (APIError, InvalidRequestError, ItemError) as e:\n        frappe.log_error(e)\n        frappe.throw(e)\n    return transactions\n\n", "CodeBleu_score": 36.46176760340221}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        # Authenticate the client.\n        client = plaid.Client(\n            client_id=self.client_id,\n            secret=self.secret,\n            environment=self.environment,\n            api_version=\"2020-09-14\",\n        )\n\n        # Construct the query parameters.\n        params = {\n            \"start_date\": start_date,\n            \"end_date\": end_date,\n            \"options\": {\"count\": 200},\n        }\n        if account_id:\n            params[\"account_ids\"] = [account_id]\n\n        # Fetch the transactions.\n        transactions = client.Transactions.get(**params)\n\n        # Check if there are more transactions to fetch.\n        if len(transactions[\"transactions\"]) < transactions[\"total_transactions\"]:\n            # Fetch the remaining transactions.\n            while len(transactions[\"transactions\"]) < transactions[\"total_transactions\"]:\n                transactions = client.Transactions.get(\n                    **params, offset=len(transactions[\"transactions\"])\n                )\n\n        # Return the transactions.\n        return transactions[\"transactions\"]\n\n    except plaid.errors.InvalidRequestError as e:\n        # Handle specific errors by raising them.\n        if e.code == \"INVALID_FIELD\":\n            frappe.throw(\n                _(\n                    \"The Plaid API returned an error. The error code is {0} and the error message is {1}.\".format(\n                        e.code, e.message\n                    )\n                )\n            )\n        elif e.code == \"INVALID_DATE\":\n            frappe.throw(\n                _(\n                    \"The Plaid API returned an error. The error code is {0} and the error message is {1}.\".format(\n                        e.code, e.message\n                    )\n                )\n            )\n        elif e.code == \"INVALID_ACCOUNT\":\n            frappe.throw(\n                _(\n                    \"The Plaid API returned an error. The error code is {0} and the error message is {1}.\".format(\n                        e.", "CodeBleu_score": 28.710379655310636}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t\n\n    try:\n        # parse response\n        response = json.loads(response)\n        institution_id = response[\"institution_id\"]\n        institution_name = response[\"institution_name\"]\n        institution_type = response[\"institution_type\"]\n        institution_primary_color = response[\"institution_primary_color\"]\n        institution_logo = response[\"institution_logo\"]\n        # get access token\n        access_token = PlaidConnector.get_access_token(token)\n        # check if bank already exists\n        bank = frappe.get_all(\"Bank\", filters={\"institution_id\": institution_id}, fields=[\"*\"])\n        if not bank:\n            # create and insert new bank record\n            new_bank = frappe.get_doc({\n                \"doctype\": \"Bank\",\n                \"institution_id\": institution_id,\n                \"institution_name\": institution_name,\n                \"institution_type\": institution_type,\n                \"institution_primary_color\": institution_primary_color,\n                \"institution_logo\": institution_logo,\n                \"access_token\": access_token\n            })\n            new_bank.insert()\n            frappe.db.commit()\n            frappe.log_error(\"New bank record created for institution: \" + institution_name)\n        else:\n            # update access token for existing bank record\n            existing_bank = frappe.get_doc(\"Bank\", bank[0].name)\n            existing_bank.access_token = access_token\n            existing_bank.save()\n            frappe.db.commit()\n            frappe.log_error(\"Access token updated for existing bank record for institution: \" + institution_name)\n    except Exception as e:\n        frappe.log_error(e)\n\n", "CodeBleu_score": 36.275863876569055}, {"code": "def add_institution(token, response)\n\t\n    try:\n        plaid_connector = PlaidConnector()\n        access_token = plaid_connector.get_access_token(token)\n        if access_token:\n            bank_id = frappe.db.get_value(\n                \"Bank\",\n                {\n                    \"institution_id\": response[\"institution_id\"],\n                    \"access_token\": access_token,\n                },\n                \"name\",\n            )\n            if not bank_id:\n                bank = frappe.new_doc(\"Bank\")\n                bank.institution_id = response[\"institution_id\"]\n                bank.institution_name = response[\"institution_name\"]\n                bank.access_token = access_token\n                bank.save()\n                frappe.msgprint(\n                    _(\"Successfully added {0} to the list of banks.\").format(\n                        response[\"institution_name\"]\n                    )\n                )\n            else:\n                bank = frappe.get_doc(\"Bank\", bank_id)\n                bank.access_token = access_token\n                bank.save()\n                frappe.msgprint(\n                    _(\"Successfully updated {0} access token.\").format(\n                        response[\"institution_name\"]\n                    )\n                )\n    except ItemError as e:\n        frappe.log_error(\n            _(\"Plaid error: {0}\").format(e.error_message), \"Plaid Error\", e\n        )\n        frappe.msgprint(\n            _(\"Plaid error: {0}\").format(e.error_message), alert=True\n        )\n\n", "CodeBleu_score": 39.713500384736854}, {"code": "def add_institution(token, response)\n\t\n    try:\n        # parse response\n        bank_name = response['item']['institution']['name']\n        bank_id = response['item']['institution_id']\n        access_token = token\n        # get access token\n        plaid_connector = PlaidConnector()\n        access_token = plaid_connector.get_access_token(access_token)\n        # check if bank exists\n        bank = frappe.get_all('Bank', filters={'bank_name': bank_name, 'bank_id': bank_id})\n        if not bank:\n            # create new bank record\n            bank = frappe.get_doc({\n                'doctype': 'Bank',\n                'bank_name': bank_name,\n                'bank_id': bank_id,\n                'access_token': access_token\n            })\n            bank.insert()\n            frappe.msgprint(_('Bank {0} added successfully.').format(bank_name))\n        else:\n            # update existing bank record\n            bank = frappe.get_doc('Bank', bank[0].name)\n            bank.access_token = access_token\n            bank.save()\n            frappe.msgprint(_('Bank {0} updated successfully.').format(bank_name))\n    except ItemError as e:\n        frappe.log_error(e)\n        frappe.msgprint(_('Bank {0} could not be added.').format(bank_name))\n\n", "CodeBleu_score": 43.181250438144545}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t\n\n    # Check if bank account is linked to a bank account in plaid\n    if not bank_account.linked_to_plaid:\n        return\n\n    # Get last integration date\n    last_integration_date = get_last_integration_date(bank_account)\n\n    # Get start and end dates for transactions\n    start_date = get_start_date(last_integration_date)\n    end_date = get_end_date()\n\n    # Get transactions\n    transactions = get_transactions(bank_account, start_date, end_date)\n\n    # Process transactions\n    process_transactions(transactions, bank_account, bank)\n\n    # Update last integration date\n    update_last_integration_date(bank_account, transactions)\n\n    # Log number of new transactions\n    log_number_of_new_transactions(transactions)\n\n", "CodeBleu_score": 15.89658682278689}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    bank_account_doc = frappe.get_doc(\"Bank Account\", bank_account)\n    if not bank_account_doc.is_plaid_linked:\n        frappe.msgprint(_(\"Bank Account {0} is not linked with Plaid\").format(bank_account_doc.name))\n        return\n\n    if not bank_account_doc.is_verified:\n        frappe.msgprint(_(\"Bank Account {0} is not verified\").format(bank_account_doc.name))\n        return\n\n    if not bank_account_doc.is_active:\n        frappe.msgprint(_(\"Bank Account {0} is not active\").format(bank_account_doc.name))\n        return\n\n    plaid_settings = frappe.get_doc(\"Plaid Settings\")\n    plaid_connector = PlaidConnector(plaid_settings)\n    plaid_connector.set_bank_account(bank_account_doc)\n\n    last_integration_date = bank_account_doc.last_integration_date\n    if not last_integration_date:\n        last_integration_date = today()\n\n    start_date = add_months(last_integration_date, -1)\n    end_date = last_integration_date\n\n    try:\n        transactions = plaid_connector.get_transactions(start_date, end_date)\n        transactions = sorted(transactions, key=lambda transaction: transaction.date, reverse=True)\n        transactions = filter_transactions(transactions)\n\n        new_transactions = []\n        for transaction in transactions:\n            if transaction.date < last_integration_date:\n                continue\n\n            new_transactions.append(transaction)\n\n        if new_transactions:\n            process_transactions(new_transactions, bank_account_doc)\n            bank_account_doc.last_integration_date = new_transactions[0].date\n            bank_account_doc.save()\n\n            frappe.msgprint(_(\"{0} new transactions added\").format(len(new_transactions)))\n        else:\n            frappe.msgprint(_(\"No new transactions found\"))\n   ", "CodeBleu_score": 34.16538090195375}, {"code": "def sync_transactions(bank, bank_account)\n\t\n\n    # Get last integration date\n    last_integration_date = frappe.get_value('Bank Integration Date', {'bank': bank, 'bank_account': bank_account}, 'last_integration_date')\n\n    # Get start and end dates for transactions\n    start_date = get_start_date(last_integration_date)\n    end_date = get_end_date(start_date)\n\n    # Get transactions\n    try:\n        transactions = get_transactions(bank, bank_account, start_date, end_date)\n    except Exception as e:\n        frappe.log_error(e)\n        return\n\n    # Create bank transactions\n    new_transactions = create_bank_transactions(transactions)\n\n    # Update last integration date\n    update_last_integration_date(transactions, new_transactions)\n\n    # Log number of new transactions added\n    log_number_of_new_transactions_added(new_transactions)\n\n", "CodeBleu_score": 20.75581404097585}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t\n\n    if not self.quickbooks_company:\n        frappe.throw(_(\"Please select a QuickBooks company to migrate from.\"))\n\n    if not self.quickbooks_access_token:\n        frappe.throw(_(\"Please authorize the QuickBooks company to migrate from.\"))\n\n    # Construct the query URI.\n    query_uri = \"https://quickbooks.api.intuit.com/v3/company/{}/query\".format(self.quickbooks_company)\n\n    # Determine the total number of entries.\n    total_entries = self._determine_total_entries(query_uri, entity)\n\n    # Fetch entries in batches of 1000.\n    for i in range(0, total_entries, 1000):\n        entries = self._fetch_entries(query_uri, entity, i)\n        self._preprocess_and_save_entries(entries, entity)\n\n", "CodeBleu_score": 24.489052676159506}, {"code": "def _migrate_entries(self, entity)\n\t\n\n    # Construct the query URI\n    query_uri = \"https://api.quickbooks.com/v3/company/{0}/query?query=select * from {1}\".format(encode_company_abbr(entity.company), entity.entity_type)\n\n    # Determine the total number of entries\n    response = requests.get(query_uri, headers=self.headers)\n    response.raise_for_status()\n    total_entries = response.json()['total_count']\n\n    # Retrieve the entries in batches of 1000\n    for start_position in range(0, total_entries, 1000):\n        response = requests.get(query_uri + \"&start_position={0}\".format(start_position), headers=self.headers)\n        response.raise_for_status()\n        entries = response.json()['query_response'][entity.entity_type]\n\n        # Preprocess and save the entries\n        for entry in entries:\n            try:\n                entry_doc = entity.get_doc(entry)\n                entry_doc.flags.ignore_validate = True\n                entry_doc.flags.ignore_mandatory = True\n                entry_doc.flags.ignore_links = True\n                entry_doc.flags.ignore_permissions = True\n                entry_doc.flags.ignore_on_submit = True\n                entry_doc.flags.ignore_validate_update_after_submit = True\n                entry_doc.save(ignore_permissions=True)\n            except Exception as e:\n                frappe.log_error(traceback.format_exc())\n                frappe.log_error(e)\n                frappe.log_error(json.dumps(entry))\n\n", "CodeBleu_score": 29.427269732950524}, {"code": "def _migrate_entries(self, entity)\n\t\n    # Construct query URI\n    uri = f\"https://api.quickbooks.com/v3/company/{encode_company_abbr(self.company)}/query?query=SELECT * FROM {entity}\"\n    # Determine total number of entries\n    try:\n        r = requests.get(uri, headers=self.headers)\n        r.raise_for_status()\n        total_count = int(r.headers.get(\"Total-Count\", 0))\n    except Exception as e:\n        frappe.log_error(traceback.format_exc())\n        frappe.log_error(e)\n        return\n    # Retrieve entries in batches of 1000\n    for start_position in range(0, total_count, 1000):\n        try:\n            r = requests.get(f\"{uri}&start_position={start_position}\")\n            r.raise_for_status()\n            entries = r.json()[\"QueryResponse\"][\"Results\"]\n            for entry in entries:\n                # Preprocess and save entry\n                self._preprocess_entry(entry)\n                self.save()\n        except Exception as e:\n            frappe.log_error(traceback.format_exc())\n            frappe.log_error(e)\n\n", "CodeBleu_score": 32.09673259935996}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        if invoice[\"Header\"][\"DocNumber\"] == \"\":\n            return\n        if invoice[\"Header\"][\"DocNumber\"] in self.invoice_numbers:\n            return\n        if invoice[\"Header\"][\"TxnTaxCodeRef\"][\"value\"] == \"\":\n            return\n        if invoice[\"Header\"][\"TxnTaxCodeRef\"][\"value\"] == \"NON\":\n            return\n        if invoice[\"Header\"][\"CustomerRef\"][\"value\"] == \"\":\n            return\n        if invoice[\"Header\"][\"CustomerRef\"][\"value\"] == \"NONE\":\n            return\n        if invoice[\"Header\"][\"CustomerRef\"][\"value\"] == \"NON\":\n            return\n        if invoice[\"Header\"][\"CustomerRef\"][\"value\"] == \"NONE\":\n            return\n        if invoice[\"Header\"][\"CustomerRef\"][\"value\"] == \"NON\":\n            return\n        if invoice[\"Header\"][\"CustomerRef\"][\"value\"] == \"NONE\":\n            return\n        if invoice[\"Header\"][\"CustomerRef\"][\"value\"] == \"NON\":\n            return\n        if invoice[\"Header\"][\"CustomerRef\"][\"value\"] == \"NONE\":\n            return\n        if invoice[\"Header\"][\"CustomerRef\"][\"value\"] == \"NON\":\n            return\n        if invoice[\"Header\"][\"CustomerRef\"][\"value\"] == \"NONE\":\n            return\n        if invoice[\"Header\"][\"CustomerRef\"][\"value\"] == \"NON\":\n            return\n        if invoice[\"Header\"][\"CustomerRef\"][\"value\"] == \"NONE\":\n            return\n        if invoice[\"Header\"][\"CustomerRef\"][\"value\"] == \"NON\":\n            return\n        if invoice[\"Header\"][\"CustomerRef\"][\"value\"] == \"NONE\":\n            return\n        if invoice[\"Header\"][\"CustomerRef\"][\"value\"] == \"NON\":\n            return\n        if invoice[\"Header\"][\"CustomerRef\"][\"value\"] == \"NONE\":\n            return\n        if invoice[\"Header\"][\"CustomerRef\"][\"value\"] == \"NON\":\n            return\n        if invoice[\"Header\"][\"CustomerRef\"][\"value\"] == \"NONE\":\n            return\n", "CodeBleu_score": 13.770747403238648}, {"code": "def _save_invoice(self, invoice)\n\t\n    if invoice.get(\"DocNumber\") is None:\n        invoice[\"DocNumber\"] = invoice.get(\"TxnID\")\n    invoice[\"company\"] = self.company\n    invoice[\"posting_date\"] = invoice.get(\"TxnDate\")\n    invoice[\"due_date\"] = invoice.get(\"TxnDate\")\n    invoice[\"currency\"] = invoice.get(\"CurrencyRef\").get(\"value\")\n    invoice[\"currency_symbol\"] = invoice.get(\"CurrencyRef\").get(\"value\")\n    invoice[\"grand_total\"] = invoice.get(\"TotalAmt\")\n    invoice[\"is_opening\"] = \"No\"\n    invoice[\"is_return\"] = \"No\"\n    invoice[\"is_pos\"] = \"No\"\n    invoice[\"is_internal_use\"] = \"No\"\n    invoice[\"is_recurring\"] = \"No\"\n    invoice[\"is_paid\"] = \"No\"\n    invoice[\"is_amended\"] = \"No\"\n    invoice[\"is_printed_in_pdf\"] = \"No\"\n    invoice[\"is_subscription\"] = \"No\"\n    invoice[\"is_credit_note\"] = \"No\"\n    invoice[\"is_return_from_credit_note\"] = \"No\"\n    invoice[\"is_return_from_debit_note\"] = \"No\"\n    invoice[\"is_return_from_sales_invoice\"] = \"No\"\n    invoice[\"is_return_from_purchase_invoice\"] = \"No\"\n    invoice[\"is_return_from_sales_order\"] = \"No\"\n    invoice[\"is_return_from_purchase_order\"] = \"No\"\n    invoice[\"is_return_from_quotation\"] = \"No\"\n    invoice[\"is_return_from_delivery_note\"] = \"No\"\n    invoice[\"is_return_from_sales_invoice_voucher\"] = \"No\"\n    invoice[\"is_return_from_purchase_invoice_voucher\"] = \"No\"\n    invoice[\"is_return", "CodeBleu_score": 25.41519200741301}, {"code": "def _save_invoice(self, invoice)\n\t\n    if invoice.get(\"Line\"):\n        invoice_line = invoice.get(\"Line\")[0]\n        if invoice_line.get(\"DetailType\") == \"AccountBasedExpenseLineDetail\":\n            return self._save_journal_entry(invoice)\n        else:\n            return self._save_sales_invoice(invoice)\n    else:\n        return self._save_sales_invoice(invoice)\n\n", "CodeBleu_score": 31.515177408145707}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\n    # Create a list of dates between the start and end date\n    dates = [start_date]\n    for i in range(date_diff(end_date, start_date)):\n        dates.append(add_days(dates[i], 1))\n\n    # Create a list of dates between the start and end date, with the number of visits\n    dates = [dates[i] for i in range(0, len(dates), int(no_of_visit))]\n\n    # Remove the last date if it is not the end date\n    if dates[-1] != end_date:\n        dates.pop()\n\n    # Create a list of dates between the start and end date, with the number of visits\n    dates = [dates[i] for i in range(0, len(dates), int(no_of_visit))]\n\n    # Remove the last date if it is not the end date\n    if dates[-1] != end_date:\n        dates.pop()\n\n    # Check if the dates are holidays\n    for i in range(0, len(dates)):\n        dates[i] = check_holiday(dates[i], sales_person)\n\n    return dates\n\n", "CodeBleu_score": 29.538531006628}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    if no_of_visit == 0:\n        return schedule_list\n\n    interval = date_diff(end_date, start_date) / no_of_visit\n    interval_days = int(interval)\n    interval_months = interval - interval_days\n    interval_years = interval - interval_months\n\n    start_date = getdate(start_date)\n    end_date = getdate(end_date)\n\n    while start_date <= end_date:\n        schedule_date = start_date\n        schedule_list.append(schedule_date)\n        start_date = add_days(schedule_date, interval_days + 1)\n        start_date = add_months(start_date, interval_months)\n        start_date = add_years(start_date, interval_years)\n\n    for visit_date in schedule_list:\n        if get_holiday_list_for_employee(sales_person) and get_holiday_list_for_employee(sales_person)[0]:\n            if visit_date in get_holiday_list_for_employee(sales_person)[0]:\n                schedule_list.remove(visit_date)\n\n    return schedule_list\n\n", "CodeBleu_score": 37.65422360364694}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\n    # Check if the salesperson is a valid salesperson.\n    if not frappe.db.exists(\"Sales Person\", sales_person):\n        frappe.throw(_(\"Sales Person {0} does not exist.\").format(sales_person))\n\n    # Check if the start date is before the end date.\n    if getdate(start_date) >= getdate(end_date):\n        frappe.throw(_(\"Start Date should be before End Date.\"))\n\n    # Check if the number of visits is a positive integer.\n    if cint(no_of_visit) <= 0:\n        frappe.throw(_(\"Number of Visits should be a positive integer.\"))\n\n    # Check if the salesperson is not the same as the customer.\n    if self.customer == sales_person:\n        frappe.throw(_(\"Sales Person cannot be the same as the Customer.\"))\n\n    # Check if the salesperson is not the same as the sales_person_1.\n    if self.sales_person_1 == sales_person:\n        frappe.throw(_(\"Sales Person cannot be the same as the Sales Person 1.\"))\n\n    # Check if the salesperson is not the same as the sales_person_2.\n    if self.sales_person_2 == sales_person:\n        frappe.throw(_(\"Sales Person cannot be the same as the Sales Person 2.\"))\n\n    # Check if the salesperson is not the same as the sales_person_3.\n    if self.sales_person_3 == sales_person:\n        frappe.throw(_(\"Sales Person cannot be the same as the Sales Person 3.\"))\n\n    # Check if the salesperson is not the same as the sales_person_4.\n    if self.sales_person_4 == sales_person:\n        frappe.throw(_(\"Sales Person cannot be the same as the Sales Person 4.\"))\n\n    # Check if the salesperson is not the same as the sales_person_5.\n    if self.sales_person_5 == sales_person:\n        frappe.throw(_(\"Sales Person cannot be the same as the Sales Person 5.\"))\n\n", "CodeBleu_score": 17.89871912726837}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\t\n        $title = $this->title;\n        $path = $this->path;\n        $handle = $this->handle;\n\n        $request = request();\n\n        $method = $request->method();\n\n        $action = $request->action;\n\n        $action = $action ?: ($method == 'POST' ? 'store' : 'index');\n\n        $bulk_action = $request->bulk_action;\n\n        $bulk_action = $bulk_action ?: ($method == 'POST' ? 'bulk_destroy' : '');\n\n        $bulk_action_url = $bulk_action ? route($this->route . 'bulk_action', ['bulk_action' => $bulk_action]) : '';\n\n        $data = $data ?: $this->data;\n\n        $data['bulk_action'] = $bulk_action;\n\n        $data['bulk_action_url'] = $bulk_action_url;\n\n        $data['title'] = $title;\n\n        $data['path'] = $path;\n\n        $data['handle'] = $handle;\n\n        $data['action'] = $action;\n\n        $data['method'] = $method;\n\n        $data['success'] = $this->success;\n\n        $data['message'] = $this->message;\n\n        $data['data'] = $data;\n\n        $data['view'] = $view;\n\n        $data['html'] = view($view, $data)->render();\n\n        return response()->json($data);\n\n    }", "CodeBleu_score": 39.5205770682202}, {"code": "<?\n   public function response($view, $data = []){\n\t\n       $response = [\n           'status' => 'success',\n           'message' => '',\n           'data' => [\n               'title' => '',\n               'path' => '',\n               'handle' => '',\n               'html' => '',\n           ],\n       ];\n\n       $method = request()->method();\n\n       if ($method === 'GET') {\n\n           $response['data']['title'] = $data['title'];\n           $response['data']['path'] = $data['path'];\n           $response['data']['handle'] = $data['handle'];\n           $response['data']['html'] = view($view, $data)->render();\n\n       } elseif ($method === 'POST') {\n\n           $response['data']['title'] = $data['title'];\n           $response['data']['path'] = $data['path'];\n           $response['data']['handle'] = $data['handle'];\n           $response['data']['html'] = view($view, $data)->render();\n\n       }\n\n       return response()->json($response);\n\n   }", "CodeBleu_score": 39.73376380436902}, {"code": "<?\n   public function response($view, $data = []){\n\t\n        // Determine the method to handle the request\n        $method = request()->method();\n\n        // Determine the route to use for bulk actions\n        $route = route($this->route);\n\n        // Determine the title of the data\n        $title = $this->title;\n\n        // Determine the path of the data\n        $path = $this->path;\n\n        // Determine the handle of the data\n        $handle = $this->handle;\n\n        // Determine the success message\n        $message = $this->message;\n\n        // Determine the success message\n        $message = $this->message;\n\n        // Determine the success message\n        $message = $this->message;\n\n        // Determine the success message\n        $message = $this->message;\n\n        // Determine the success message\n        $message = $this->message;\n\n        // Determine the success message\n        $message = $this->message;\n\n        // Determine the success message\n        $message = $this->message;\n\n        // Determine the success message\n        $message = $this->message;\n\n        // Determine the success message\n        $message = $this->message;\n\n        // Determine the success message\n        $message = $this->message;\n\n        // Determine the success message\n        $message = $this->message;\n\n        // Determine the success message\n        $message = $this->message;\n\n        // Determine the success message\n        $message = $this->message;\n\n        // Determine the success message\n        $message = $this->message;\n\n        // Determine the success message\n        $message = $this->message;\n\n        // Determine the success message\n        $message = $this->message;\n\n        // Determine the success message\n        $message = $this->message;\n\n        // Determine the success message\n        $message = $this->message;\n\n        // Determine the success message\n        $message = $this->message;\n\n        // Determine the success message\n        $message = $this->message;", "CodeBleu_score": 22.748524158494256}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t    $contacts = $request->get('contacts');\n\n    $error_message = null;\n\n    foreach ($contacts as $contact) {\n        try {\n            Bus::dispatch(new DeleteContact($contact));\n        } catch (Throwable $e) {\n            $error_message = $e->getMessage();\n        }\n    }\n\n    if ($error_message) {\n        flash($error_message)->error();\n    }\n\n    return redirect()->back();\n}", "CodeBleu_score": 48.52651189247975}, {"code": "<?\npublic function deleteContacts($request){\n\t\n    $contacts = $request->input('contacts');\n    $count = count($contacts);\n\n    if ($count) {\n\n        $success = 0;\n        $error = 0;\n\n        foreach ($contacts as $contact) {\n\n            try {\n\n                Bus::dispatch(new DeleteContact($contact));\n                $success++;\n\n            } catch (Throwable $e) {\n\n                $error++;\n\n            }\n\n        }\n\n        if ($error) {\n\n            flash('Error deleting ' . $error . ' of ' . $count . ' contacts.', 'danger');\n\n        } else {\n\n            flash('Deleted ' . $success . ' of ' . $count . ' contacts.', 'success');\n\n        }\n\n    }\n\n}", "CodeBleu_score": 44.558655776993405}, {"code": "<?\npublic function deleteContacts($request){\n\t    $contacts = $request->input('contacts');\n\n    foreach ($contacts as $contact) {\n        try {\n            $job = new DeleteContact($contact);\n            Bus::dispatch($job);\n        } catch (Throwable $e) {\n            $this->throwValidationException($request, $e->getMessage());\n        }\n    }\n\n    return $this->respondSuccess();\n}", "CodeBleu_score": 51.86947988805617}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getTransactions($request);\n    $deleted = 0;\n\n    foreach ($transactions as $transaction) {\n        try {\n            Bus::dispatch(new DeleteTransaction($transaction));\n            $deleted++;\n        } catch (Throwable $e) {\n            flash($e->getMessage())->error();\n        }\n    }\n\n    flash(trans('messages.success.deleted', ['type' => trans_choice('general.transactions', 2)]), 'success');\n\n    return $deleted;\n}", "CodeBleu_score": 56.058471374389974}, {"code": "<?\npublic function deleteTransactions($request){\n\t    try {\n        $transactions = Transaction::whereIn('id', $request->ids)->get();\n        foreach ($transactions as $transaction) {\n            Bus::dispatch(new DeleteTransaction($transaction));\n        }\n    } catch (Throwable $e) {\n        flash()->error(trans('messages.error.delete'));\n    }\n}", "CodeBleu_score": 53.83559478323532}, {"code": "<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getTransactions($request);\n\n    try {\n        foreach ($transactions as $transaction) {\n            Bus::dispatch(new DeleteTransaction($transaction));\n        }\n    } catch (Throwable $exception) {\n        $this->flashError($exception->getMessage());\n    }\n}", "CodeBleu_score": 52.55114023604506}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\t    $request = $this->getRequest();\n    if (!$request instanceof FormRequest) {\n        return;\n    }\n\n    foreach ($this->collection() as $row) {\n        $request = $this->getRequest($row);\n        if (!$request instanceof FormRequest) {\n            continue;\n        }\n\n        $request->setContainer($this->container);\n        $request->setRedirector($this->redirector);\n        $request->setSession($this->session);\n        $request->setJson($this->json);\n        $request->setUserResolver($this->userResolver);\n        $request->setRouteResolver($this->routeResolver);\n\n        $request->setValidator($validator);\n\n        $request->validateResolved();\n    }\n}", "CodeBleu_score": 31.58147134184771}, {"code": "<?\npublic function withValidator($validator){\n\t    $validator->after(function ($validator) {\n        if ($validator->errors()->count()) {\n            $this->failed($validator->errors());\n        }\n    });\n}", "CodeBleu_score": 11.814312351635774}, {"code": "<?\npublic function withValidator($validator){\n\t    if (!$this instanceof FormRequest) {\n        return;\n    }\n\n    $validator->after(function ($validator) {\n        $request = $this;\n        $rules = $this->container->call([$this, 'rules']);\n        $messages = $this->container->call([$this, 'messages']);\n        $attributes = $this->container->call([$this, 'attributes']);\n        $validator->setRules($rules);\n        $validator->setMessages($messages);\n        $validator->setAttributeNames($attributes);\n\n        foreach ($this->getData() as $row => $data) {\n            $this->replace($data);\n            $validator->validate();\n        }\n    });\n}", "CodeBleu_score": 36.52918954178182}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    if ($this instanceof ShouldUpdate) {\n        if ($this->isModel($arguments[0])) {\n            $this->model = $arguments[0];\n        }\n        if ($this->isRequest($arguments[1])) {\n            $this->request = $arguments[1];\n        }\n        if ($this instanceof HasOwner) {\n            $this->setOwner();\n        }\n        if ($this instanceof HasSource) {\n            $this->setSource();\n        }\n        if ($this instanceof ShouldCreate) {\n            $this->setCreate();\n        }\n        if ($this instanceof ShouldDelete) {\n            $this->setDelete();\n        }\n    }\n}", "CodeBleu_score": 44.98714179411674}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\n    if ($arguments[0] instanceof Model) {\n        $this->model = $arguments[0];\n    }\n\n    if ($arguments[0] instanceof Request) {\n        $this->request = $arguments[0];\n    }\n\n    if ($this instanceof ShouldUpdate) {\n        $this->update();\n    }\n}", "CodeBleu_score": 57.39554958352983}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\n    $model = null;\n    $request = null;\n\n    if ($arguments[0] instanceof Model) {\n        $model = $arguments[0];\n    }\n\n    if ($arguments[1] instanceof Request) {\n        $request = $arguments[1];\n    }\n\n    $this->setModel($model);\n    $this->setRequest($request);\n\n    if ($this->shouldUpdate()) {\n        $this->update();\n    }\n}", "CodeBleu_score": 39.49442665423963}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t    $search = request('search', '');\n    $sort = request('sort', $sort);\n    $limit = request('limit', 100);\n    $sort_field = request('sort_field', 'name');\n\n    $query->search($search);\n    $query->sort($sort, $sort_field);\n\n    if (request()->expectsJson() && !request()->isApi()) {\n        return $query->get();\n    }\n\n    return $query->paginate($limit);\n}", "CodeBleu_score": 46.69196080732817}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t    $sort = request()->sort ?? $sort;\n    $query->search()->sort($sort);\n    if (request()->expectsJson() && !request()->isApi()) {\n        return $query->get();\n    }\n    $limit = request()->limit ?? $this->perPage;\n    return $query->paginate($limit);\n}", "CodeBleu_score": 39.695831264966884}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t\n    $sort = $sort ?? 'name';\n\n    $query->orderBy($sort);\n\n    $query->search();\n\n    if (request()->expectsJson() && !request()->isApi()) {\n        return $query->get();\n    }\n\n    $limit = request('limit', 50);\n\n    return $query->paginate($limit);\n}", "CodeBleu_score": 37.759549287636716}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t\n    $totals = [\n        'open' => 0,\n        'overdue' => 0\n    ];\n\n    if ($model->status == 'paid') {\n        return $totals;\n    }\n\n    $totals['open'] = $model->amount;\n\n    $transactions = $model->transactions;\n\n    foreach ($transactions as $transaction) {\n        $totals['open'] -= $transaction->amount;\n    }\n\n    if ($model->due_date > Date::today()) {\n        $totals['open'] = $totals['open'] > 0 ? $totals['open'] : 0;\n    } else {\n        $totals['overdue'] = $totals['open'] > 0 ? $totals['open'] : 0;\n        $totals['open'] = 0;\n    }\n\n    return $totals;\n}", "CodeBleu_score": 40.16281579920852}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t\n    $open_amount = $overdue_amount = 0;\n\n    // If the document is paid, return zeroes\n    if ($model->status == 'paid') {\n        return [$open_amount, $overdue_amount];\n    }\n\n    // If the document is partial, sum the payments from transactions\n    if ($model->status == 'partial') {\n        foreach ($model->transactions as $transaction) {\n            $open_amount += $transaction->amount;\n        }\n    }\n\n    // Determine if the document is open or overdue\n    if ($model->due_date <= Date::now()->toDateString()) {\n        $overdue_amount = $open_amount;\n        $open_amount = 0;\n    }\n\n    return [$open_amount, $overdue_amount];\n}", "CodeBleu_score": 49.70599484631662}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t    $open = 0;\n    $overdue = 0;\n\n    if ($model->status == 'paid') {\n        return [\n            'open' => $open,\n            'overdue' => $overdue\n        ];\n    }\n\n    $amount = $model->amount;\n    $payments = $model->payments;\n    $due_date = $model->due_date;\n\n    if ($model->status == 'partial') {\n        $amount = $model->total_amount;\n        $payments = $model->total_payments;\n    }\n\n    if ($model->status == 'partial' && $payments > 0) {\n        $open = $amount - $payments;\n    }\n\n    if ($model->status == 'partial' && $payments < $amount) {\n        $overdue = $amount - $payments;\n    }\n\n    if ($model->status == 'partial' && $payments == 0) {\n        $open = $amount;\n    }\n\n    if ($model->status == 'open' && $payments > 0) {\n        $open = $amount - $payments;\n    }\n\n    if ($model->status == 'open' && $payments < $amount) {\n        $overdue = $amount - $payments;\n    }\n\n    if ($model->status == 'open' && $payments == 0) {\n        $open = $amount;\n    }\n\n    if ($model->status == 'overdue' && $payments > 0) {\n        $overdue = $amount - $payments;\n    }\n\n    if ($model->status == 'overdue' && $payments < $amount) {\n        $overdue = $amount - $payments;\n    }\n\n    if ($model->status == 'overdue' && $payments == 0) {\n        $overdue = $amount;\n    }\n\n    if ($model->status == 'overdue' && $payments > $amount) {\n        $overdue = 0;\n    }\n\n    if ($model->status == 'overdue' && $payments < $amount", "CodeBleu_score": 34.38704766008929}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n    $results = $this->forPage($page, $perPage)->get($columns);\n    return new Paginator($results, $this->model->count(), $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 70.8248099242257}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\n    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $results = $this->forPage($page, $perPage)->get($columns);\n\n    $total = $this->count();\n\n    return new LengthAwarePaginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 75.13327325479088}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n    $results = $this->forPage($page, $perPage)->get($columns);\n    $total = $this->getCountForPagination();\n    return new LengthAwarePaginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 76.20637060269085}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t    $reconciliations = Reconciliation::whereIn('id', $request->input('ids'))->get();\n\n    foreach ($reconciliations as $reconciliation) {\n        $reconciliation->reconcile();\n    }\n}", "CodeBleu_score": 23.070724314832823}, {"code": "<?\npublic function reconcile($request){\n\t    // Get the reconciliations\n    $reconciliations = Reconciliation::whereIn('id', $request->input('ids'))->get();\n\n    // Process each reconciliation\n    foreach ($reconciliations as $reconciliation) {\n        // Start transaction\n        DB::beginTransaction();\n\n        // Mark reconciliation as reconciled\n        $reconciliation->reconciled = true;\n        $reconciliation->save();\n\n        // Get transactions within date range and account ID\n        $transactions = Transaction::where('account_id', $reconciliation->account_id)\n            ->whereBetween('date', [$reconciliation->start_date, $reconciliation->end_date])\n            ->get();\n\n        // Mark transactions as reconciled\n        foreach ($transactions as $transaction) {\n            $transaction->reconciled = true;\n            $transaction->save();\n        }\n\n        // Commit transaction\n        DB::commit();\n    }\n}", "CodeBleu_score": 44.612574931484886}, {"code": "<?\npublic function reconcile($request){\n\t\n    $records = $request->input('records');\n\n    // Get the reconciliations to be reconciled\n    $reconciliations = Reconciliation::whereIn('id', $records)->get();\n\n    // Process each reconciliation\n    foreach ($reconciliations as $reconciliation) {\n\n        // Start a database transaction\n        DB::transaction(function () use ($reconciliation) {\n\n            // Set the reconciliation as reconciled\n            $reconciliation->status = Reconciliation::STATUS_RECONCILED;\n            $reconciliation->save();\n\n            // Get the transactions within the reconciliation's date range and account ID\n            $transactions = Transaction::where('account_id', $reconciliation->account_id)\n                ->where('paid_at', '>=', $reconciliation->paid_at)\n                ->where('paid_at', '<=', $reconciliation->paid_at->copy()->addDay())\n                ->get();\n\n            // Mark each transaction as reconciled\n            foreach ($transactions as $transaction) {\n                $transaction->status = Transaction::STATUS_RECONCILED;\n                $transaction->save();\n            }\n\n        });\n\n    }\n\n    // Return the number of records reconciled\n    return count($records);\n\n}", "CodeBleu_score": 42.63364932155712}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t    $user = $this->user;\n    $invitation = $user->invitations()->create([\n        'token' => Str::random(64),\n        'source' => $this->source,\n        'source_id' => $this->sourceId,\n        'source_type' => $this->sourceType,\n        'expires_at' => now()->addDays(config('boilerplate.auth.invitations.expiration_days')),\n    ]);\n\n    try {\n        $user->notify(new Notification($invitation));\n    } catch (Exception $e) {\n        throw new Exception(trans('auth::messages.invitation.failed', ['error' => $e->getMessage()]));\n    }\n\n    return $invitation;\n}", "CodeBleu_score": 36.29415355080726}, {"code": "<?\npublic function handle(): UserInvitation{\n\t\n    $this->transaction(function () {\n\n        $user = $this->user;\n        $user->invitations()->delete();\n\n        $token = Str::random(64);\n\n        $invitation = $user->invitations()->create([\n            'token' => $token,\n            'source' => $this->source,\n            'source_id' => $this->source_id,\n        ]);\n\n        try {\n            $user->notify(new Notification($invitation, $this->source, $this->source_id));\n        } catch (Exception $e) {\n            throw new Exception('Failed to send invitation email.');\n        }\n\n        return $invitation;\n    });\n\n    return $this->invitation;\n}", "CodeBleu_score": 36.28669690643003}, {"code": "<?\npublic function handle(): UserInvitation{\n\t    $user = $this->user;\n    $source = $this->source;\n    $token = $this->token;\n    $email = $this->email;\n    $expires = $this->expires;\n    $locale = $this->locale;\n    $data = $this->data;\n    $url = $this->url;\n\n    // Delete existing invitations for the user\n    UserInvitation::where('user_id', $user->id)->delete();\n\n    // Create a new invitation\n    $invitation = UserInvitation::create([\n        'user_id' => $user->id,\n        'source' => $source,\n        'token' => $token,\n        'email' => $email,\n        'expires' => $expires,\n        'locale' => $locale,\n        'data' => $data,\n        'url' => $url,\n    ]);\n\n    // Attempt to dispatch a notification\n    try {\n        $user->notify(new Notification($invitation));\n    } catch (Exception $e) {\n        throw new Exception('Notification failed.');\n    }\n\n    return $invitation;\n}", "CodeBleu_score": 42.419910674965564}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\t\n    // If the transaction is reconciled, throw an exception with a warning message.\n    if ($this->transaction->isReconciled()) {\n        throw new Exception(trans('exceptions.jobs.banking.transaction.authorize_reconciled'));\n    }\n\n    // If the transaction is a transfer transaction, throw an \"Unauthorized\" exception.\n    if ($this->transaction->isTransfer()) {\n        throw new Exception(trans('exceptions.jobs.banking.transaction.authorize_transfer'));\n    }\n}", "CodeBleu_score": 28.26572534790732}, {"code": "<?\npublic function authorize(): void{\n\t    $transaction = $this->getTransaction();\n\n    if ($transaction->isReconciled()) {\n        throw new Exception(trans('transaction.authorize.reconciled', ['name' => $transaction->name]));\n    }\n\n    if ($transaction->isTransfer()) {\n        throw new Exception(trans('transaction.authorize.transfer'));\n    }\n}", "CodeBleu_score": 43.303333221365634}, {"code": "<?\npublic function authorize(): void{\n\t    if ($this->transaction->isReconciled()) {\n        throw new \\Exception(__('exceptions.transaction_is_reconciled'));\n    }\n\n    if ($this->transaction->isTransfer()) {\n        throw new \\Exception(__('exceptions.transaction_is_transfer'));\n    }\n}", "CodeBleu_score": 32.43937429138023}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t    // If the tenant ID is not zero, it allows access to certain predefined tables, otherwise, it denies access.\n    if (0 != Tools.getTenantId()) {\n        // The tenant ID is not zero, it allows access to certain predefined tables.\n        List<String> list = new ArrayList<>();\n        list.add(\"sys_user\");\n        list.add(\"sys_role\");\n        list.add(\"sys_menu\");\n        list.add(\"sys_org\");\n        list.add(\"sys_depart\");\n        list.add(\"sys_dict\");\n        list.add(\"sys_dict_detail\");\n        list.add(\"sys_dict_item\");\n        list.add(\"sys_dict_item_detail\");\n        list.add(\"sys_dict_item_detail_value\");\n        list.add(\"sys_dict_item_value\");\n        list.add(\"sys_dict_item_value_detail\");\n        list.add(\"sys_dict_item_value_detail_value\");\n        list.add(\"sys_dict_item_value_value\");\n        list.add(\"sys_dict_value\");\n        list.add(\"sys_dict_value_detail\");\n        list.add(\"sys_dict_value_detail_value\");\n        list.add(\"sys_dict_value_value\");\n        list.add(\"sys_dict_value_value_detail\");\n        list.add(\"sys_dict_value_value_detail_value\");\n        list.add(\"sys_user_role\");\n        list.add(\"sys_role_menu\");\n        list.add(\"sys_user_org\");\n        list.add(\"sys_user_depart\");\n        list.add(\"sys_user_depart_detail\");\n        list.add(\"sys_user_depart_detail_value\");\n        list.add(\"sys_user_depart_value\");\n        list.add(\"sys_user_depart_value_detail\");\n        list.add(\"sys_user_depart_value_detail_value\");\n        list.add(\"sys_user_depart_value_value\");\n        list.add(\"sys_user_depart_value_value_detail\");\n        list", "CodeBleu_score": 14.586194316411055}, {"code": "public boolean doTableFilter(String tableName){\n\t    // The following tables are allowed to be accessed by the tenant ID extracted from the access token.\n    List<String> whiteList = new ArrayList<String>();\n    whiteList.add(\"user\");\n    whiteList.add(\"role\");\n    whiteList.add(\"department\");\n    whiteList.add(\"organization\");\n    whiteList.add(\"dict\");\n    whiteList.add(\"dict_detail\");\n    whiteList.add(\"dict_type\");\n    whiteList.add(\"dict_detail_type\");\n    whiteList.add(\"dict_detail_type_value\");\n    whiteList.add(\"dict_type_value\");\n    whiteList.add(\"dict_type_value_detail\");\n    whiteList.add(\"dict_type_value_detail_type\");\n    whiteList.add(\"dict_type_value_detail_type_value\");\n    whiteList.add(\"dict_type_value_detail_type_value_detail\");\n    whiteList.add(\"dict_type_value_detail_type_value_detail_type\");\n    whiteList.add(\"dict_type_value_detail_type_value_detail_type_value\");\n    whiteList.add(\"dict_type_value_detail_type_value_detail_type_value_detail\");\n    whiteList.add(\"dict_type_value_detail_type_value_detail_type_value_detail_type\");\n    whiteList.add(\"dict_type_value_detail_type_value_detail_type_value_detail_type_value\");\n    whiteList.add(\"dict_type_value_detail_type_value_detail_type_value_detail_type_value_detail\");\n    whiteList.add(\"dict_type_value_detail_type_value_detail_type_value_detail_type_value_detail_type\");\n    whiteList.add(\"dict_type_value_detail_type_value_detail_type_value_detail_type_value_detail_type_value\");\n    whiteList.add(\"dict_type_value_detail_type_value_detail_type_value_detail_type_value_detail_type_value_detail\");\n    whiteList.add(\"dict_type_value_detail_type", "CodeBleu_score": 11.84255959225334}, {"code": "public boolean doTableFilter(String tableName){\n\t    String[] tableNames = {\"t_system_config\", \"t_system_config_item\", \"t_system_config_item_value\", \"t_system_config_item_value_detail\", \"t_system_config_item_value_detail_history\", \"t_system_config_item_value_history\", \"t_system_config_item_value_history_detail\", \"t_system_config_item_value_history_detail_history\", \"t_system_config_item_value_history_detail_history_detail\", \"t_system_config_item_value_history_detail_history_detail_history\", \"t_system_config_item_value_history_detail_history_detail_history_detail\", \"t_system_config_item_value_history_detail_history_detail_history_detail_history\", \"t_system_config_item_value_history_detail_history_detail_history_detail_history_detail\", \"t_system_config_item_value_history_detail_history_detail_history_detail_history_detail_history\", \"t_system_config_item_value_history_detail_history_detail_history_detail_history_detail_history_detail\", \"t_system_config_item_value_history_detail_history_detail_history_detail_history_detail_history_detail_history\", \"t_system_config_item_value_history_detail_history_detail_history_detail_history_detail_history_detail_history_detail\", \"t_system_config_item_value_history_detail_history_detail_history_detail_history_detail_history_detail_history_detail_history\", \"t_system_config_item_value_history_detail_history_detail_history_detail_history_detail_history_detail_history_detail_history_detail\", \"t_system_config_item_value_history_detail_history_detail_history_detail_history_detail_history_detail_history_detail_history_detail_history\", \"t_system_config_item_value_history_detail_history_detail_history_detail_history_detail_history_detail_history_detail_history_detail_history_detail\", \"t_", "CodeBleu_score": 5.554160414705475}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 64.03882826107017}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 75.08759747992765}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 63.86783791790074}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    //Get the account ID from the request parameter.\n    String id = request.getParameter(\"accountId\");\n    if (StringUtil.isEmpty(id)) {\n        return returnJson(new BaseResponseInfo(), ErpInfo.BUSINESS_NAME, ErpInfo.BUSINESS_NOT_NULL);\n    }\n    //Get the account information from the database using accountService.\n    Account account = accountService.findById(Long.valueOf(id));\n    //Return a failure message if the account information is not found.\n    if (null == account) {\n        return returnJson(new BaseResponseInfo(), ErpInfo.BUSINESS_NAME, ErpInfo.BUSINESS_NOT_EXIST);\n    }\n    //Convert the account information to JSON format.\n    JSONObject item = new JSONObject();\n    item.put(\"Id\", account.getId());\n    item.put(\"Name\", account.getName());\n    item.put(\"Description\", account.getDescription());\n    item.put(\"AccountType\", account.getAccountType());\n    item.put(\"AccountClass\", account.getAccountClass());\n    item.put(\"AccountProperty\", account.getAccountProperty());\n    item.put(\"AccountStatus\", account.getAccountStatus());\n    item.put(\"AccountBalance\", account.getAccountBalance());\n    item.put(\"AccountNumber\", account.getAccountNumber());\n    item.put(\"AccountBank\", account.getAccountBank());\n    item.put(\"AccountBankAddress\", account.getAccountBankAddress());\n    item.put(\"AccountBankAccount\", account.getAccountBankAccount());\n    item.put(\"AccountBankAccountName\", account.getAccountBankAccountName());\n    item.put(\"AccountBankAccountType\", account.getAccountBankAccountType());\n    item.put(\"AccountBankAccountTypeName\", account.getAccountBankAccountTypeName());\n    item.put(\"AccountBankAccountTypeId\", account.getAccountBankAccountTypeId());\n    item.put(\"AccountBankAccountTypeIdName\", account.getAccountBankAccountTypeIdName());\n    item.put(\"AccountBankAccountTypeIdName\", account.getAccountBankAccountTypeIdName());", "CodeBleu_score": 33.78741214182893}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    Map<String, Object> map = new HashMap<String, Object>();\n    int offset = Integer.parseInt(request.getParameter(\"offset\"));\n    int limit = Integer.parseInt(request.getParameter(\"limit\"));\n    String accountName = request.getParameter(\"accountName\");\n    String accountType = request.getParameter(\"accountType\");\n    String accountNumber = request.getParameter(\"accountNumber\");\n    String remark = request.getParameter(\"remark\");\n    String orderByColumn = request.getParameter(\"orderByColumn\");\n    String isAsc = request.getParameter(\"isAsc\");\n    map.put(\"offset\", offset);\n    map.put(\"limit\", limit);\n    map.put(\"accountName\", accountName);\n    map.put(\"accountType\", accountType);\n    map.put(\"accountNumber\", accountNumber);\n    map.put(\"remark\", remark);\n    map.put(\"orderByColumn\", orderByColumn);\n    map.put(\"isAsc\", isAsc);\n    List<AccountVo4List> accountList = accountService.findAccount(map);\n    long total = 0;\n    if (StringUtil.isNotEmpty(accountName)) {\n        total = accountService.findAccountTotal(map);\n    } else {\n        total = accountService.findAccountTotal();\n    }\n    Map<String, Object> result = new HashMap<String, Object>();\n    result.put(\"total\", total);\n    result.put(\"rows\", accountList);\n    logger.info(\"\u67e5\u627e\u8d26\u6237\u4fe1\u606f\u5217\u8868\uff0c\u67e5\u8be2\u53c2\u6570\uff1a{}\", JSONObject.toJSONString(map));\n    return returnJson(result, ErpInfo.OK.name, ErpInfo.OK.code);\n}", "CodeBleu_score": 27.45493385557066}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    Map<String, Object> objectMap = new HashMap<String, Object>();\n    int offset = Integer.parseInt(request.getParameter(\"offset\"));\n    int limit = Integer.parseInt(request.getParameter(\"limit\"));\n    String accountName = StringUtil.getInfo(request.getParameter(\"accountName\"));\n    String accountType = StringUtil.getInfo(request.getParameter(\"accountType\"));\n    String accountClass = StringUtil.getInfo(request.getParameter(\"accountClass\"));\n    String accountCategory = StringUtil.getInfo(request.getParameter(\"accountCategory\"));\n    String accountProperty = StringUtil.getInfo(request.getParameter(\"accountProperty\"));\n    String accountId = StringUtil.getInfo(request.getParameter(\"accountId\"));\n    String accountNumber = StringUtil.getInfo(request.getParameter(\"accountNumber\"));\n    String accountDescription = StringUtil.getInfo(request.getParameter(\"accountDescription\"));\n    String accountStatus = StringUtil.getInfo(request.getParameter(\"accountStatus\"));\n    String accountBank = StringUtil.getInfo(request.getParameter(\"accountBank\"));\n    String accountBankNumber = StringUtil.getInfo(request.getParameter(\"accountBankNumber\"));\n    String accountBankAddress = StringUtil.getInfo(request.getParameter(\"accountBankAddress\"));\n    String accountBankAccountName = StringUtil.getInfo(request.getParameter(\"accountBankAccountName\"));\n    String accountBankAccountNumber = StringUtil.getInfo(request.getParameter(\"accountBankAccountNumber\"));\n    String accountBankAccountType = StringUtil.getInfo(request.getParameter(\"accountBankAccountType\"));\n    String accountBankAccountTypeName = StringUtil.getInfo(request.getParameter(\"accountBankAccountTypeName\"));\n    String accountBankAccountTypeId = StringUtil.getInfo(request.getParameter(\"accountBankAccountTypeId\"));\n    String accountBankAccountTypeNameId = StringUtil.getInfo(request.getParameter(\"accountBankAccountTypeNameId\"));\n    String accountBankAccountTypeIdName = StringUtil.getInfo(request.getParameter(\"accountBankAccountTypeIdName\"));\n    String accountBankAccountTypeNameIdName = StringUtil.getInfo(request", "CodeBleu_score": 19.995012109380877}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    Map<String, Object> map = new HashMap<String, Object>();\n    try {\n        res.setCode(BasicStateEnum.SUCCESS.getCode());\n        res.setMessage(BasicStateEnum.SUCCESS.getCode());\n        res.setDataCollection(new ArrayList<>());\n        res.setTotal(new Long(0));\n        AccountService accountService = (AccountService) request.getAttribute(\"accountService\");\n        List<AccountVo4List> accountVo4Lists = accountService.findAccountWithBalance(name, serialNo, currentPage, pageSize);\n        if (null != accountVo4Lists) {\n            res.setDataCollection(accountVo4Lists);\n            res.setTotal(accountService.findAccountWithBalanceCount(name, serialNo));\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n        res.setCode(BasicStateEnum.ERROR.getCode());\n        res.setMessage(BasicStateEnum.ERROR.getCode());\n        res.setDataCollection(new ArrayList<>());\n        res.setTotal(new Long(0));\n        logger.error(\">>>>>>>>>>>>>>>>>>>\u67e5\u627e\u8d26\u6237\u5217\u8868\u5f02\u5e38{}\", e);\n    }\n    return res;\n}", "CodeBleu_score": 47.28148199720883}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    Map<String, Object> map = new HashMap<String, Object>();\n    try {\n        res.setCode(200);\n        res.setData(map);\n        AccountService accountService = (AccountService) request.getAttribute(\"accountService\");\n        List<AccountVo4List> accounts = accountService.findWithBalance(name, serialNo, currentPage, pageSize);\n        Long count = accountService.findWithBalanceCount(name, serialNo);\n        map.put(\"total\", count);\n        map.put(\"rows\", accounts);\n    } catch(Exception e) {\n        e.printStackTrace();\n        res.setCode(500);\n        res.setMessage(e.getMessage());\n    }\n    return res;\n}", "CodeBleu_score": 52.26212362815008}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        Map<String, Object> map = new HashMap<String, Object>();\n        try {\n            res.setCode(200);\n\n            AccountService accountService = (AccountService) request.getAttribute(\"accountService\");\n            List<AccountVo4List> accountList = accountService.findAccountWithBalance(name, serialNo, currentPage, pageSize);\n            Long count = accountService.findAccountWithBalanceCount(name, serialNo);\n\n            map.put(\"AccountList\", accountList);\n            map.put(\"count\", count);\n            res.setData(map);\n        } catch(Exception e){\n            e.printStackTrace();\n            res.setCode(500);\n            res.setMessage(\"\u83b7\u53d6\u6570\u636e\u5931\u8d25\");\n        }\n        return res;\n    }", "CodeBleu_score": 49.83305912256246}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    Map<String, Object> map = new HashMap<String, Object>();\n    try {\n        AccountService accountService = (AccountService) request.getAttribute(\"accountService\");\n        Account account = new Account();\n        account.setName(name);\n        account.setSerialNo(serialNo);\n        List<AccountVo4List> list = accountService.getStatistics(account);\n        map.put(\"accountList\", list);\n        res.code = 200;\n        res.data = map;\n    } catch(Exception e){\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 63.62968415255962}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    Map<String, Object> map = new HashMap<String, Object>();\n    try {\n        String response = accountService.getStatistics(name, serialNo);\n        if (StringUtil.isNotEmpty(response)) {\n            map.put(\"data\", response);\n            res.code = 200;\n            res.data = map;\n        } else {\n            res.code = 500;\n            res.data = \"\u67e5\u8be2\u5931\u8d25\";\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 63.14817852786349}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    Map<String, Object> map = new HashMap<String, Object>();\n    try {\n        if (StringUtil.isEmpty(name) || StringUtil.isEmpty(serialNo)) {\n            res.code = 500;\n            res.data = \"\u8bf7\u8f93\u5165\u67e5\u8be2\u6761\u4ef6\";\n            return res;\n        }\n        List<AccountVo4List> list = accountService.getStatistics(name, serialNo);\n        res.code = 200;\n        res.data = list;\n    } catch (Exception e) {\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 59.929239571704414}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        Map<String, Object> data = new HashMap<String, Object>();\n        try {\n            AccountHead accountHead = accountHeadService.getDetailByNumber(billNo);\n            if (accountHead != null) {\n                data.put(\"AccountHead\", accountHead);\n                res.code = 200;\n                res.data = data;\n            } else {\n                res.code = 500;\n                res.data = \"\u83b7\u53d6\u4fe1\u606f\u5931\u8d25\";\n            }\n        } catch(Exception e){\n            e.printStackTrace();\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u4fe1\u606f\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 51.34373615488148}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    Map<String, Object> map = new HashMap<String, Object>();\n    try {\n        AccountHead accountHead = accountHeadService.getDetailByNumber(billNo);\n        if(accountHead != null) {\n            map.put(\"accountHead\", accountHead);\n            res.code = 200;\n            res.data = map;\n        } else {\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n    } catch(Exception e) {\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 55.633905098450164}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t     BaseResponseInfo res = new BaseResponseInfo();\n     Map<String, Object> map = new HashMap<String, Object>();\n     try {\n         AccountHead accountHead = accountHeadService.getDetailByNumber(billNo);\n         if (accountHead != null) {\n             res.code = 200;\n             res.data = accountHead;\n         } else {\n             res.code = 500;\n             res.data = \"billNo not found\";\n         }\n     } catch(Exception e){\n         e.printStackTrace();\n         res.code = 500;\n         res.data = \"Exception\";\n     }\n     return res;\n }", "CodeBleu_score": 53.96697717176823}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    Map<String, Object> map = new HashMap<String, Object>();\n    try {\n        Map<String, Object> user = request.getSession().getAttribute(\"user\") == null ? null : (Map<String, Object>) request.getSession().getAttribute(\"user\");\n        Long userId = Long.parseLong(user.get(\"id\").toString());\n        List<DepotEx> depotExs = depotService.findDepotByCurrentUser(userId);\n        map.put(\"depotList\", depotExs);\n        res.code = 200;\n        res.data = map;\n    } catch(Exception e){\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 53.59971756732998}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    Map<String, Object> dataMap = new HashMap<String, Object>();\n    try {\n        String userId = request.getHeader(\"userId\");\n        String userName = request.getHeader(\"userName\");\n        String token = request.getHeader(\"token\");\n        String appType = request.getHeader(\"appType\");\n        String response = userService.findByToken(userId, userName, token, appType);\n        JSONObject user = JSONObject.parseObject(response);\n        if (user.getInteger(\"code\") == 200) {\n            String[] depotIds = user.getString(\"depotIds\").split(\",\");\n            List<Depot> depotList = new ArrayList<>();\n            for (String depotId : depotIds) {\n                if (StringUtil.isNotEmpty(depotId)) {\n                    depotList.add(depotService.getDepot(Integer.parseInt(depotId)));\n                }\n            }\n            dataMap.put(\"depotList\", depotList);\n            res.code = 200;\n            res.data = dataMap;\n        } else {\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u7528\u6237\u4fe1\u606f\u5931\u8d25\";\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u7528\u6237\u4fe1\u606f\u5f02\u5e38\";\n    }\n    return res;\n}", "CodeBleu_score": 48.08883772352066}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    Map<String, Object> response = new HashMap<String, Object>();\n    try {\n        DepotService depotService = new DepotService();\n        UserBusinessService userBusinessService = new UserBusinessService();\n        UserService userService = new UserService();\n        List<Depot> depotList = depotService.findAllListByUserBusiness(userBusinessService.getUserBusiness(userService.getCurrentUser(request)).getId());\n        if (depotList.size() > 0) {\n            response.put(\"depotList\", depotList);\n            res.code = 200;\n            res.data = response;\n        } else {\n            res.code = 500;\n            res.data = \"\u5f53\u524d\u7528\u6237\u6ca1\u6709\u4ed3\u5e93\u4fe1\u606f\";\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 52.884811224360064}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    JSONArray jsonArray = new JSONArray();\n    JSONObject jsonObject = new JSONObject();\n    try {\n        // \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7684\u7528\u6237\u4fe1\u606f\n        User user = (User) request.getSession().getAttribute(\"user\");\n        if(user == null) {\n            return returnJson(null, ErpInfo.ERROR.name(), ErpInfo.CURRENT_USER_NOT_EXIST.name(), null);\n        }\n        String tenantId = user.getTenantId();\n        if(StringUtil.isEmpty(tenantId)) {\n            return returnJson(null, ErpInfo.ERROR.name(), ErpInfo.CURRENT_USER_NOT_EXIST.name(), null);\n        }\n        // \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684\u89d2\u8272\n        List<String> roles = user.getRoles();\n        if(roles == null || roles.isEmpty()) {\n            return returnJson(null, ErpInfo.ERROR.name(), ErpInfo.CURRENT_USER_NOT_EXIST.name(), null);\n        }\n        if(roles.contains(\"admin\")) {\n            // \u7ba1\u7406\u5458\u76f4\u63a5\u8fd4\u56de\u5168\u90e8\u529f\u80fd\n            List<Function> functions = functionService.findAllFunctions();\n            for(Function function : functions) {\n                jsonArray.add(function.getFunctionName());\n            }\n            jsonObject.put(\"functions\", jsonArray);\n            jsonArray.add(jsonObject);\n            return jsonArray;\n        }\n        // \u975e\u7ba1\u7406\u5458\u9700\u8981\u6839\u636e\u89d2\u8272\u83b7\u53d6\u529f\u80fd\n        List<UserBusiness> userBusinesses = userBusinessService.findUserBusinessesByUserId(user.getId());\n        if(userBusinesses == null || userBusinesses.isEmpty()) {\n            return returnJson(null, ErpInfo.ERROR.name(), ErpInfo.CURRENT_USER_NOT_EXIST.name(), null);\n        }\n        // \u6839\u636eUBType\u548cUBKeyId\u67e5\u8be2\u4e1a\u52a1\n        UserBusiness userBusiness = userBusinessService.findByTypeAndKeyId(type, keyId);\n        if(userBusiness == null) {\n           ", "CodeBleu_score": 39.00834000495018}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    JSONArray jsonArray = new JSONArray();\n    try {\n        User user = (User) request.getAttribute(\"user\");\n        List<Function> functionList = null;\n        if (type.equals(\"user\")) {\n            functionList = functionService.getFunctionsForUser(Integer.parseInt(keyId));\n        } else if (type.equals(\"business\")) {\n            functionList = functionService.getFunctionsForBusiness(Integer.parseInt(keyId));\n        }\n        if (functionList != null) {\n            for (Function function : functionList) {\n                if (function.getFunctionId() != 1) {\n                    JSONObject jsonObject = new JSONObject();\n                    jsonObject.put(\"functionId\", function.getFunctionId());\n                    jsonObject.put(\"functionName\", function.getFunctionName());\n                    jsonObject.put(\"functionUrl\", function.getFunctionUrl());\n                    jsonObject.put(\"functionPid\", function.getFunctionPid());\n                    jsonObject.put(\"functionType\", function.getFunctionType());\n                    jsonArray.add(jsonObject);\n                }\n            }\n        }\n        if (user.getUsername().equals(ErpInfo.ADMIN_ACCOUNT)) {\n            return jsonArray;\n        }\n        List<UserBusiness> userBusinessList = userBusinessService.getUserBusinessListByUserId(user.getId());\n        if (userBusinessList != null && userBusinessList.size() > 0) {\n            List<Integer> businessIds = new ArrayList<>();\n            for (UserBusiness ub : userBusinessList) {\n                businessIds.add(ub.getBusinessId());\n            }\n            List<Function> systemFunctionList = functionService.getFunctionsForBusiness(1);\n            if (systemFunctionList != null) {\n                for (Function function : systemFunctionList) {\n                    if (function.getFunctionId() != 1) {\n                        JSONObject jsonObject = new JSONObject();\n                        jsonObject.put(\"functionId\", function.getFunctionId());\n                        jsonObject.put(\"functionName\", function.getFunctionName());\n                        jsonObject.put(\"function", "CodeBleu_score": 41.31927313309023}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    JSONArray jsonArray = new JSONArray();\n    try {\n        UserBusinessService userBusinessService = (UserBusinessService) SpringContextUtils.getBean(\"userBusinessService\");\n        UserBusiness userBusiness = userBusinessService.findByTypeAndKeyId(type, keyId);\n        if(userBusiness == null){\n            return jsonArray;\n        }\n        List<UserBusiness> userBusinessList = new ArrayList<>();\n        userBusinessList.add(userBusiness);\n        List<UserBusiness> userBusinessListByType = userBusinessService.findByType(type);\n        if(userBusinessListByType.size() > 0){\n            for(UserBusiness ub:userBusinessListByType){\n                if(ub.getUBType().equals(type) && ub.getUBKeyId().equals(keyId)){\n                    userBusinessList.add(ub);\n                }\n            }\n        }\n        List<Function> functionList = new ArrayList<>();\n        for(UserBusiness ub:userBusinessList){\n            functionList.addAll(ub.getFunctions());\n        }\n        List<Function> functionListByType = new ArrayList<>();\n        if(functionList.size() > 0){\n            for(Function function:functionList){\n                if(function.getFunctionType().equals(type)){\n                    functionListByType.add(function);\n                }\n            }\n        }\n        FunctionService functionService = (FunctionService) SpringContextUtils.getBean(\"functionService\");\n        List<Function> functions = functionService.findAll();\n        if(functions.size() > 0){\n            for(Function function:functions){\n                if(function.getFunctionType().equals(type)){\n                    functionListByType.add(function);\n                }\n            }\n        }\n        List<Function> functionListByTypeAndKeyId = new ArrayList<>();\n        if(functionListByType.size() > 0){\n            for(Function function:functionListByType){\n                if(function.getFunctionType().equals(type) && function.getFunctionKeyId().equals(keyId)){\n                    functionListByTypeAndKeyId.", "CodeBleu_score": 39.51547523496115}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        PlatformConfig platformConfig = platformConfigService.getPlatformConfigByKey(platformKey);\n        res.code = 200;\n        res.data = platformConfig;\n    } catch(Exception e){\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 81.73335605072747}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        Map<String, Object> map = new HashMap<String, Object>();\n        map.put(\"platformKey\", platformKey);\n        PlatformConfig platformConfig = platformConfigService.getPlatformConfig(map);\n        if(platformConfig == null) {\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\";\n            logger.error(\"\u83b7\u53d6\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\");\n        } else {\n            res.code = 200;\n            res.data = platformConfig;\n        }\n    } catch(Exception e) {\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u914d\u7f6e\u4fe1\u606f\u5f02\u5e38\";\n        logger.error(\"\u83b7\u53d6\u914d\u7f6e\u4fe1\u606f\u5f02\u5e38\", e);\n    }\n    return res;\n}", "CodeBleu_score": 57.04699820954119}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    Map<String, Object> data = new HashMap<String, Object>();\n    try {\n        PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n        if (platformConfig != null) {\n            data.put(\"configValue\", platformConfig.getConfigValue());\n            res.code = 200;\n            res.data = data;\n        } else {\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u5931\u8d25\";\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 57.03728222848231}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        JSONObject jo = new JSONObject();\n        String[] args = new String[]{\"systemConfig\"};\n        List<?> list = systemConfigService.getBusinessObject(args);\n        if (null != list && list.size() > 0) {\n            SystemConfig systemConfig = (SystemConfig) list.get(0);\n            jo.put(\"systemConfig\", systemConfig);\n        }\n        res.code = 200;\n        res.data = jo;\n    } catch (Exception e) {\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 53.473694140307096}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        SystemConfigService systemConfigService = (SystemConfigService) SpringContextUtils.getBean(\"systemConfigService\");\n        List<SystemConfig> list = systemConfigService.findAll();\n        if (null != list && list.size() > 0) {\n            res.code = 200;\n            res.data = list.get(0);\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 61.02953158031678}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        //Get the current system configuration information\n        List<SystemConfig> systemConfigs = systemConfigService.getSystemConfigList(null);\n        if (systemConfigs.size() > 0) {\n            res.code = 200;\n            res.data = systemConfigs.get(0);\n        } else {\n            res.code = 500;\n            res.data = \"Not found the system configuration information.\";\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n        res.code = 500;\n        res.data = \"Class name\uff1a\" + className + \"|Method name\uff1a\" + methodName + \"|Response data\uff1a\" + e.toString();\n    }\n    return res;\n}", "CodeBleu_score": 52.24862188468583}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        String businessPath = request.getParameter(\"businessPath\");\n        String uploadType = request.getParameter(\"uploadType\");\n        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n        MultipartFile file = multipartRequest.getFile(\"file\");\n        String fileName = file.getOriginalFilename();\n        String suffix = fileName.substring(fileName.lastIndexOf(\".\"));\n        String newFileName = StringUtil.getUUID() + suffix;\n        String filePath = \"\";\n        if (\"local\".equals(uploadType)) {\n            filePath = FileUtils.getUploadPath() + newFileName;\n        } else if (\"aliOss\".equals(uploadType)) {\n            filePath = FileUtils.getUploadPath() + newFileName;\n        }\n        FileUtils.saveFile(file.getInputStream(), filePath);\n        res.code = 200;\n        res.data = filePath;\n        res.msg = \"\u4e0a\u4f20\u6210\u529f\";\n    } catch (Exception e) {\n        logger.error(\">>>>>>>>>>>>>>>>>\u6587\u4ef6\u4e0a\u4f20\u5f02\u5e38\", e);\n        res.code = 500;\n        res.msg = \"\u4e0a\u4f20\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 51.95703136057883}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        String uploadType = request.getParameter(\"uploadType\");\n        if (uploadType == null || uploadType.isEmpty()) {\n            res.code = 500;\n            res.msg = \"\u4e0a\u4f20\u7c7b\u578b\u4e0d\u80fd\u4e3a\u7a7a\";\n            return res;\n        }\n        String businessPath = request.getParameter(\"businessPath\");\n        if (businessPath == null || businessPath.isEmpty()) {\n            res.code = 500;\n            res.msg = \"\u4e1a\u52a1\u8def\u5f84\u4e0d\u80fd\u4e3a\u7a7a\";\n            return res;\n        }\n        String fileName = request.getParameter(\"fileName\");\n        if (fileName == null || fileName.isEmpty()) {\n            res.code = 500;\n            res.msg = \"\u6587\u4ef6\u540d\u4e0d\u80fd\u4e3a\u7a7a\";\n            return res;\n        }\n        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n        MultipartFile file = multipartRequest.getFile(\"file\");\n        if (file == null) {\n            res.code = 500;\n            res.msg = \"\u6587\u4ef6\u4e0d\u80fd\u4e3a\u7a7a\";\n            return res;\n        }\n        String fileType = file.getContentType();\n        if (fileType == null || fileType.isEmpty()) {\n            res.code = 500;\n            res.msg = \"\u6587\u4ef6\u7c7b\u578b\u4e0d\u80fd\u4e3a\u7a7a\";\n            return res;\n        }\n        String fileSize = request.getParameter(\"fileSize\");\n        if (fileSize == null || fileSize.isEmpty()) {\n            res.code = 500;\n            res.msg = \"\u6587\u4ef6\u5927\u5c0f\u4e0d\u80fd\u4e3a\u7a7a\";\n            return res;\n        }\n        String fileSizeUnit = request.getParameter(\"fileSizeUnit\");\n        if (fileSizeUnit == null || fileSizeUnit.isEmpty()) {\n            res.code = 500;\n            res.msg = \"\u6587\u4ef6\u5927\u5c0f\u5355\u4f4d\u4e0d\u80fd\u4e3a\u7a7a\";\n            return res;\n        }\n        String filePath = \"\";\n        String fileUrl = \"\";\n        if (uploadType.equals(\"local\")) {\n            filePath = local", "CodeBleu_score": 40.23539054082118}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        String filePath = \"\";\n        String fileName = \"\";\n        String fileType = \"\";\n        String fileUrl = \"\";\n        String filePathPrefix = \"\";\n        String fileRealName = \"\";\n        String fileSuffix = \"\";\n        String fileTypeName = \"\";\n        String fileSize = \"\";\n        String fileRealPath = \"\";\n        String fileRealNamePrefix = \"\";\n        String fileRealNameSuffix = \"\";\n        String fileRealNameNoSuffix = \"\";\n        String fileRealNameNoPrefix = \"\";\n        String fileRealNameNoPrefixNoSuffix = \"\";\n        String fileUploadType = \"\";\n        String fileUploadTypeName = \"\";\n        String fileUploadTypeName2 = \"\";\n        String fileUploadTypeName3 = \"\";\n        String fileUploadTypeName4 = \"\";\n        String fileUploadTypeName5 = \"\";\n        String fileUploadTypeName6 = \"\";\n        String fileUploadTypeName7 = \"\";\n        String fileUploadTypeName8 = \"\";\n        String fileUploadTypeName9 = \"\";\n        String fileUploadTypeName10 = \"\";\n        String fileUploadTypeName11 = \"\";\n        String fileUploadTypeName12 = \"\";\n        String fileUploadTypeName13 = \"\";\n        String fileUploadTypeName14 = \"\";\n        String fileUploadTypeName15 = \"\";\n        String fileUploadTypeName16 = \"\";\n        String fileUploadTypeName17 = \"\";\n        String fileUploadTypeName18 = \"\";\n        String fileUploadTypeName19 = \"\";\n        String fileUploadTypeName20 = \"\";\n        String fileUploadTypeName21 = \"\";\n        String fileUploadTypeName22 = \"\";\n        String fileUploadTypeName23 = \"\";\n        String fileUploadTypeName24 = \"\";\n        String fileUploadTypeName25 = \"\";\n        String fileUploadTypeName26 = \"\";\n        String fileUploadTypeName27 = \"\";\n        String fileUploadTypeName28 = \"\";\n        String fileUploadTypeName29 = \"\";\n        String fileUploadTypeName30 = \"\";\n        String fileUploadTypeName31 = \"\";\n        String fileUploadTypeName32 = \"\";\n        String fileUploadTypeName33 = \"\";\n        String fileUpload", "CodeBleu_score": 13.715695978233708}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t     try {\n         String fileName = jsonObject.getString(\"fileName\");\n         String title = jsonObject.getString(\"title\");\n         String head = jsonObject.getString(\"head\");\n         String tip = jsonObject.getString(\"tip\");\n         JSONArray data = jsonObject.getJSONArray(\"data\");\n         String[][] table = new String[data.size()][data.getJSONObject(0).size()];\n         for (int i = 0; i < data.size(); i++) {\n             JSONObject obj = data.getJSONObject(i);\n             for (int j = 0; j < obj.size(); j++) {\n                 table[i][j] = obj.getString(String.valueOf(j));\n             }\n         }\n         BaseResponseInfo info = new BaseResponseInfo();\n         info.setCode(200);\n         info.setData(table);\n         info.setMsg(fileName + \"\u5bfc\u51fa\u6210\u529f\");\n         String filePath = excelService.exportExcel(fileName, title, head, tip, table);\n         File file = new File(filePath);\n         InputStream in = new FileInputStream(file);\n         OutputStream out = response.getOutputStream();\n         response.setContentType(\"application/vnd.ms-excel;charset=utf-8\");\n         response.setHeader(\"Content-Disposition\", \"attachment;filename=\" + new String(fileName.getBytes(\"gbk\"), \"iso8859-1\") + \".xls\");\n         byte[] buffer = new byte[1024];\n         int b = 0;\n         while ((b = in.read(buffer)) != -1) {\n             out.write(buffer, 0, b);\n         }\n         in.close();\n         out.flush();\n         out.close();\n         file.delete();\n     } catch (Exception e) {\n         logger.error(\"\u5bfc\u51faExcel\u5931\u8d25\", e);\n     }\n }", "CodeBleu_score": 50.939106373058785}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t     try {\n         String title = jsonObject.getString(\"title\");\n         String head = jsonObject.getString(\"head\");\n         String tip = jsonObject.getString(\"tip\");\n         String[] table = jsonObject.getString(\"table\").split(\",\");\n         String[] field = jsonObject.getString(\"field\").split(\",\");\n         String[][] data = new String[table.length][field.length];\n         for (int i = 0; i < table.length; i++) {\n             String[] data1 = jsonObject.getJSONArray(table[i]).toArray(new String[0]);\n             for (int j = 0; j < field.length; j++) {\n                 data[i][j] = data1[j];\n             }\n         }\n         String fileName = jsonObject.getString(\"fileName\");\n         String path = jsonObject.getString(\"path\");\n         String sheetName = jsonObject.getString(\"sheetName\");\n         String[] key = jsonObject.getString(\"key\").split(\",\");\n         String[] value = jsonObject.getString(\"value\").split(\",\");\n         String[] key1 = jsonObject.getString(\"key1\").split(\",\");\n         String[] value1 = jsonObject.getString(\"value1\").split(\",\");\n         String[] key2 = jsonObject.getString(\"key2\").split(\",\");\n         String[] value2 = jsonObject.getString(\"value2\").split(\",\");\n         String[] key3 = jsonObject.getString(\"key3\").split(\",\");\n         String[] value3 = jsonObject.getString(\"value3\").split(\",\");\n         String[] key4 = jsonObject.getString(\"key4\").split(\",\");\n         String[] value4 = jsonObject.getString(\"value4\").split(\",\");\n         String[] key5 = jsonObject.getString(\"key5\").split(\",\");\n         String[] value5 = jsonObject.getString(\"value5\").split(\",\");\n         String[] key6 = jsonObject.getString(\"key6\").split(\",\");\n         String[] value6 = jsonObject.getString(\"value6\").split(\",\");\n         String[] key7 = jsonObject.getString(\"key7\").split(\",\");\n         String[] value7 = jsonObject.getString(\"value7\").split(\",\");\n         String[] key8 = jsonObject.getString(\"key8\").split(\",", "CodeBleu_score": 39.67300291048428}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t    String title = jsonObject.getString(\"title\");\n    String head = jsonObject.getString(\"head\");\n    String tip = jsonObject.getString(\"tip\");\n    JSONArray data = jsonObject.getJSONArray(\"data\");\n    List<String> titles = JSONArray.parseArray(head, String.class);\n    String[] titleArray = new String[titles.size()];\n    titles.toArray(titleArray);\n    try {\n        ExportExcelUtils.exportByArray(response, title, tip, titleArray, data);\n    } catch (Exception e) {\n        logger.error(\"Export excel error\", e);\n        BaseResponseInfo info = new BaseResponseInfo();\n        info.code = 500;\n        info.msg = \"\u5bfc\u51faExcel\u5931\u8d25\";\n        try {\n            response.getWriter().write(info);\n        } catch (IOException e1) {\n            logger.error(\"Response write error\", e1);\n        }\n    }\n}", "CodeBleu_score": 54.19597168815686}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t    HttpServletRequest req = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();\n    Account account = JSONObject.parseObject(obj.toJSONString(), Account.class);\n    int result = 0;\n    try {\n        result = accountMapperEx.insertAccount(account);\n        // \u65e5\u5fd7\n        LogService.addLog(req, \"\u65b0\u589e\u8d44\u91d1\u8d26\u6237\", account.getAccount());\n        return result;\n    } catch (Exception e) {\n        LogService.addLog(req, \"\u65b0\u589e\u8d44\u91d1\u8d26\u6237\u5931\u8d25\", account.getAccount());\n        e.printStackTrace();\n        throw e;\n    }\n}", "CodeBleu_score": 42.205255476865744}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t    HttpServletRequest req = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();\n    AccountMapper accountMapper = null;\n    try {\n        accountMapper = (AccountMapper) SpringContextUtils.getBean(\"accountMapper\");\n        Account account = JSONObject.parseObject(obj.toJSONString(), Account.class);\n        if(account.getAccountName() == null || account.getAccountName().length() == 0){\n            throw new BusinessRunTimeException(ExceptionConstants.ACCOUNT_NAME_NOT_EMPTY);\n        }\n        if(account.getAccountType() == null || account.getAccountType().length() == 0){\n            throw new BusinessRunTimeException(ExceptionConstants.ACCOUNT_TYPE_NOT_EMPTY);\n        }\n        if(account.getAccountClassification() == null || account.getAccountClassification().length() == 0){\n            throw new BusinessRunTimeException(ExceptionConstants.ACCOUNT_CLASSIFICATION_NOT_EMPTY);\n        }\n        if(account.getAccountCategory() == null || account.getAccountCategory().length() == 0){\n            throw new BusinessRunTimeException(ExceptionConstants.ACCOUNT_CATEGORY_NOT_EMPTY);\n        }\n        if(account.getAccountType() == null || account.getAccountType().length() == 0){\n            throw new BusinessRunTimeException(ExceptionConstants.ACCOUNT_TYPE_NOT_EMPTY);\n        }\n        if(account.getAccountProperty() == null || account.getAccountProperty().length() == 0){\n            throw new BusinessRunTimeException(ExceptionConstants.ACCOUNT_PROPERTY_NOT_EMPTY);\n        }\n        if(account.getAccountStatus() == null || account.getAccountStatus().length() == 0){\n            throw new BusinessRunTimeException(ExceptionConstants.ACCOUNT_STATUS_NOT_EMPTY);\n        }\n        if(account.getAccountType() != null && account.getAccountType().equals(BusinessConstants.ACCOUNT_TYPE_ASSET)){\n            if(account.getIsdefault() == null || account.getIsdefault().length() == 0){\n                throw new BusinessRunTimeException(ExceptionConstants.", "CodeBleu_score": 35.46565611860713}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t    try {\n        HttpServletRequest req = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();\n        Account account = JSONObject.parseObject(obj.toJSONString(), Account.class);\n        int result = 0;\n        String userId = request.getHeader(\"userId\");\n        String accountId = Tools.get32UUID();\n        account.setId(accountId);\n        account.setType(obj.getString(\"type\"));\n        account.setName(obj.getString(\"name\"));\n        account.setNumber(obj.getString(\"number\"));\n        account.setBalance(BigDecimal.ZERO);\n        account.setEnabled(Boolean.TRUE);\n        account.setDefaultAccount(Boolean.FALSE);\n        account.setRemark(obj.getString(\"remark\"));\n        account.setCreateTime(new Date());\n        account.setUpdateTime(new Date());\n        account.setCreateId(userId);\n        account.setUpdateId(userId);\n        account.setDeleteFlag(BusinessConstants.DELETE_FLAG_NORMAL);\n        //\u67e5\u8be2\u662f\u5426\u5df2\u7ecf\u5b58\u5728\u8be5\u8d26\u6237\n        AccountMapper accountMapper = SpringContextUtil.getBean(\"accountMapper\", AccountMapper.class);\n        AccountExample accountExample = new AccountExample();\n        accountExample.createCriteria().andDeleteFlagNotEqualTo(BusinessConstants.DELETE_FLAG_DELETED);\n        List<Account> accountList = accountMapper.selectByExample(accountExample);\n        if (accountList.size() > 0) {\n            account.setDefaultAccount(Boolean.FALSE);\n        } else {\n            account.setDefaultAccount(Boolean.TRUE);\n        }\n        result = accountMapper.insertSelective(account);\n        // \u8bb0\u5f55\u64cd\u4f5c\u65e5\u5fd7\n        LogService logService = SpringContextUtil.getBean(\"logServiceImpl\", LogService.class);\n        String logContent = GetGsonString.getAccountLogString(request, account, \"\u65b0\u589e\", account.getId());\n        logService.insertLog(request, logContent, BusinessConstants.LOG_INTERFACE_URL,\n                BusinessConstants.LOG_TYPE_OTHER,\n                BusinessConstants.LOG", "CodeBleu_score": 41.32884807180084}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    Long count = null;\n    try {\n        count = accountMapperEx.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        log.error(\"Get count with name and serialNo error.\", e);\n        return null;\n    }\n    return count;\n}", "CodeBleu_score": 45.635122589013676}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    Long count = null;\n    try {\n        count = accountMapperEx.findAccountCountByNameAndSerialNo(name, serialNo);\n    } catch (Exception e) {\n        log.error(\"Get the count of accounts with the specified name and serial number error\", e);\n    }\n    return count;\n}", "CodeBleu_score": 44.861729011949045}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    AccountMapper accountMapper = SpringContextUtil.getBean(\"accountMapper\", AccountMapper.class);\n    try {\n        return accountMapper.findAccountCountByNameAndSerialNo(name, serialNo);\n    } catch (Exception e) {\n        logger.error(\"\u5f02\u5e38\u4fe1\u606f\uff1a{}\", e.getMessage());\n        e.printStackTrace();\n    }\n    return null;\n}", "CodeBleu_score": 38.79659825779326}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    DepotItemMapper depotItemMapper = null;\n    try {\n        depotItemMapper = DepotItemMapper.getMapper();\n        DepotItemExample example = new DepotItemExample();\n        example.createCriteria().andIdEqualTo(id);\n        int result = depotItemMapper.deleteByExample(example);\n        if(result == 0) {\n            throw new Exception(\"\u5220\u9664\u5931\u8d25\");\n        }\n        return result;\n    } catch(Exception e) {\n        e.printStackTrace();\n        return 0;\n    }\n}", "CodeBleu_score": 43.34003622906811}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    DepotItemMapper mapper = null;\n    try {\n        mapper = DepotItemMapper.getMapper();\n        DepotItemExample example = new DepotItemExample();\n        example.createCriteria().andIdEqualTo(id);\n        int result = mapper.deleteByExample(example);\n        //\u5220\u9664\u6269\u5c55\u4fe1\u606f\n        if(result > 0){\n            DepotItemExtendMapper extendMapper = DepotItemExtendMapper.getMapper();\n            DepotItemExtendExample extendExample = new DepotItemExtendExample();\n            extendExample.createCriteria().andItemIdEqualTo(id);\n            extendMapper.deleteByExample(extendExample);\n        }\n        return result;\n    }catch(Exception e){\n        e.printStackTrace();\n        logger.error(\"\u5f02\u5e38\u4fe1\u606f\uff1a{}\", e);\n        return 0;\n    }\n}", "CodeBleu_score": 37.602842894046596}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    DepotItemMapper depotItemMapper = null;\n    try {\n        depotItemMapper = DepotComponent.getDepotItemMapper();\n        DepotItemExample example = new DepotItemExample();\n        example.createCriteria().andIdEqualTo(id);\n        int result = depotItemMapper.deleteByExample(example);\n        //\u5220\u9664\u6210\u529f\u540e\uff0c\u5220\u9664\u76f8\u5173\u7684\u5e8f\u5217\u53f7\n        SerialNumberService.deleteSerialNumberByMaterialId(id, request);\n        //\u5220\u9664\u6210\u529f\u540e\uff0c\u5220\u9664\u76f8\u5173\u7684\u6269\u5c55\u4fe1\u606f\n        MaterialExtendService.deleteMaterialExtendByMaterialId(id, request);\n        return result;\n    } catch(Exception e){\n        JshException.writeFail(logger, e);\n        return 0;\n    }\n}", "CodeBleu_score": 39.04154699434942}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t    // Create an HTTP client\n    CloseableHttpClient httpClient = HttpClients.createDefault();\n\n    // Construct the request URL\n    String url = \"http://localhost:8080/graph/project/\" + projectName + \"/node/\" + nodeType + \"/\" + nodeKey;\n\n    // Construct the request\n    HttpGet request = new HttpGet(url);\n\n    // Execute the request and get the response\n    try {\n        CloseableHttpResponse response = httpClient.execute(request);\n\n        // Process the response\n        if (response.getStatusLine().getStatusCode() == 200) {\n            HttpEntity entity = response.getEntity();\n            String responseString = EntityUtils.toString(entity, Charset.forName(\"UTF-8\"));\n            ObjectMapper mapper = new ObjectMapper();\n            Map<String, Object> responseMap = mapper.readValue(responseString, Map.class);\n            return (boolean) responseMap.get(\"key\");\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        // Close the HTTP client\n        try {\n            httpClient.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    return false;\n}", "CodeBleu_score": 47.66288362843115}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t    // TODO: Implement this function\n    return false;\n}", "CodeBleu_score": 3.6328963611648906}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t    // TODO: Implement\n    return false;\n}", "CodeBleu_score": 3.6328963611648906}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t    try {\n        CloseableHttpClient httpclient = HttpClients.createDefault();\n        String url = \"http://localhost:7474/db/data/transaction/commit\";\n        HttpPost httpPost = new HttpPost(url);\n        String json = \"{\\\"statements\\\":[{\\\"statement\\\":\\\"MATCH (n:\"+fromType+\") WHERE id(n)=\"+from+\", (m:\"+toType+\") WHERE id(m)=\"+to+\", MERGE (n)-[e:\"+edgeType+\"]->(m) RETURN e\\\",\\\"resultDataContents\\\":[\\\"graph\\\"]}]}\";\n        httpPost.setEntity(new StringEntity(json, Charset.forName(\"UTF-8\")));\n        httpPost.setHeader(\"Accept\", \"application/json; charset=UTF-8\");\n        httpPost.setHeader(\"Content-type\", \"application/json\");\n        CloseableHttpResponse response = httpclient.execute(httpPost);\n        HttpEntity entity = response.getEntity();\n        String result = EntityUtils.toString(entity, \"UTF-8\");\n        ObjectMapper mapper = new ObjectMapper();\n        Map<String, Object> map = mapper.readValue(result, Map.class);\n        if (map.containsKey(\"errors\")) {\n            return false;\n        }\n        return true;\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 45.70192146360165}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t    String url = \"http://localhost:8080/graph/addEdge\";\n    ObjectMapper mapper = new ObjectMapper();\n    StringEntity requestEntity = null;\n    try {\n        Map<String, String> params = new HashMap<>();\n        params.put(\"projectName\", projectName);\n        params.put(\"edgeType\", edgeType);\n        params.put(\"fromType\", fromType);\n        params.put(\"toType\", toType);\n        params.put(\"from\", from);\n        params.put(\"to\", to);\n        requestEntity = new StringEntity(mapper.writeValueAsString(params), Charset.forName(\"UTF-8\"));\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    CloseableHttpClient httpClient = HttpClients.createDefault();\n    HttpPost httpPost = new HttpPost(url);\n    httpPost.setEntity(requestEntity);\n    try {\n        CloseableHttpResponse response = httpClient.execute(httpPost);\n        HttpEntity entity = response.getEntity();\n        String result = EntityUtils.toString(entity);\n        return result.contains(\"key\");\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    } finally {\n        try {\n            httpClient.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}", "CodeBleu_score": 45.63091804911837}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t    // Create the request URL\n    String url = \"http://localhost:7474/db/data/transaction/commit\";\n    // Create the request body\n    String requestBody = \"{\\\"statements\\\":[{\\\"statement\\\":\\\"MATCH (f: \" + fromType + \" {id: \\\"\" + from + \"\\\"}),(t: \" + toType + \" {id: \\\"\" + to + \"\\\"}) CREATE (f)-[r:\" + edgeType + \"]->(t) RETURN r\\\",\\\"parameters\\\":{},\\\"resultDataContents\\\":[\\\"graph\\\"]}]}\";\n    // Create the HTTP client\n    CloseableHttpClient httpClient = HttpClients.createDefault();\n    // Create the HTTP post\n    HttpPost httpPost = new HttpPost(url);\n    // Add headers\n    httpPost.addHeader(\"Accept\", \"application/json\");\n    httpPost.addHeader(\"Content-type\", \"application/json\");\n    // Add the request body\n    StringEntity requestEntity = new StringEntity(requestBody);\n    httpPost.setEntity(requestEntity);\n    // Execute the request\n    CloseableHttpResponse response = null;\n    try {\n        response = httpClient.execute(httpPost);\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    // Get the response\n    HttpEntity entity = response.getEntity();\n    String responseString = null;\n    try {\n        responseString = EntityUtils.toString(entity, Charset.forName(\"UTF-8\"));\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    // Close the response\n    try {\n        response.close();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    // Close the client\n    try {\n        httpClient.close();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    // Parse the response\n    ObjectMapper mapper = new ObjectMapper();\n    Map<String, Object> responseMap = null;\n    try {\n        responseMap = mapper.readValue(responseString, Map.class);\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    // Check for a", "CodeBleu_score": 41.49359835329188}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\t    if (event == null) {\n        return;\n    }\n    if (event.getMessage() == null) {\n        event.setMessage(\"\");\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(new Location(\"1234567890123456789012345678901234567890\", \"testing location\"));\n    }\n    event.setTime(new Date());\n    String jsonString;\n    try {\n        jsonString = mapper.writeValueAsString(event);\n    } catch (JsonProcessingException e) {\n        e.printStackTrace();\n        return;\n    }\n    String topic = event.getTarget() == null ? \"test\" : event.getTarget();\n    ProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, jsonString);\n    producer.send(record);\n    producer.flush();\n}", "CodeBleu_score": 61.52066137241571}, {"code": "public void sendEvent(Event event){\n\t    if (event == null) {\n        return;\n    }\n    if (event.getMessage() == null) {\n        return;\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(new Location(\"test\", \"test\"));\n    }\n    event.setTime(new Date());\n    String jsonString = null;\n    try {\n        jsonString = new ObjectMapper().writeValueAsString(event);\n    } catch (JsonProcessingException e) {\n        e.printStackTrace();\n    }\n    if (jsonString == null) {\n        return;\n    }\n    String topic = event.getLocation().getTopic();\n    if (topic == null) {\n        topic = \"test\";\n    }\n    ProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, jsonString);\n    producer.send(record);\n    producer.flush();\n}", "CodeBleu_score": 64.94685817565284}, {"code": "public void sendEvent(Event event){\n\t    if (event == null) {\n        System.out.println(\"Event is null.\");\n        return;\n    }\n    if (event.getMessage() == null) {\n        System.out.println(\"Message is null.\");\n        return;\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(new Location(\"testing\", \"testing\", \"testing\"));\n    }\n    event.setTime(new Date());\n    ObjectMapper objectMapper = new ObjectMapper();\n    String eventJsonString;\n    try {\n        eventJsonString = objectMapper.writeValueAsString(event);\n    } catch (JsonProcessingException e) {\n        e.printStackTrace();\n        return;\n    }\n    String topic = \"test\";\n    if (event.getTarget() != null) {\n        topic = event.getTarget();\n    }\n    Producer<String, String> producer = EventService.getProducer();\n    ProducerRecord<String, String> record = new ProducerRecord<>(topic, eventJsonString);\n    producer.send(record);\n    producer.flush();\n}", "CodeBleu_score": 61.251871943885035}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t    // Initialize the OSS client\n    OSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\n    // Upload the file content as an object with the specified name\n    ossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\n    // Shut down the OSS client\n    ossClient.shutdown();\n\n    // Return the URL of the uploaded object\n    return \"http://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}", "CodeBleu_score": 29.856126295097056}, {"code": "public String upload(String objName, byte[] content){\n\t    // Create an OSS client instance.\n    OSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\n    // Upload an object to your bucket.\n    ossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\n    // Shut down the OSSClient instance.\n    ossClient.shutdown();\n\n    // Return the URL of the uploaded object.\n    return \"http://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}", "CodeBleu_score": 29.856126295097056}, {"code": "public String upload(String objName, byte[] content){\n\t    // Initializes a client profile.\n    IClientProfile profile = DefaultProfile.getProfile(\"cn-hangzhou\", \"<accessKeyId>\", \"<accessKeySecret>\");\n    // Initializes the OSS client using the specified client profile.\n    OSSClient ossClient = new OSSClient(\"<yourEndpoint>\", profile);\n    // Uploads an object to OSS.\n    ossClient.putObject(\"<yourBucketName>\", objName, new ByteArrayInputStream(content));\n    // Shuts down the OSS client.\n    ossClient.shutdown();\n    // Returns the URL of the uploaded object.\n    return \"<yourEndpoint>\" + \"/\" + \"<yourBucketName>\" + \"/\" + objName;\n}", "CodeBleu_score": 34.6407515804918}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\t// \u83b7\u53d6\u4e00\u4e2aIpToLocationWorker\u5b9e\u4f8b\uff0c\u786e\u4fdd\u5b83\u5df2\u7ecf\u521d\u59cb\u5316\n\tIpToLocationWorker worker = getWorker();\n\tif (worker == null) {\n\t\t// \u5982\u679cworker\u4e0d\u53ef\u7528\uff0c\u8fd4\u56de\u4e00\u4e2aLocationInfo\u5bf9\u8c61\uff0c\u5176\u4e2d\u6240\u6709\u503c\u90fd\u662funknown\n\t\treturn new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\");\n\t}\n\t// \u4f7f\u7528worker\u83b7\u53d6ip\u5730\u5740\u7684\u4f4d\u7f6e\u4fe1\u606f\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c\n\treturn worker.getLocationInfo(ipAddress);\n}", "CodeBleu_score": 30.592798009915118}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\t// \u9996\u5148\u4ece\u7f13\u5b58\u4e2d\u53d6\n\tLocationInfo result = (LocationInfo) getCache().get(ipAddress);\n\tif (result != null) {\n\t\treturn result;\n\t}\n\t// \u6ca1\u6709\u7f13\u5b58\uff0c\u5219\u4ece\u6570\u636e\u5e93\u4e2d\u53d6\n\tIPZone ipZone = getQQWry().findIP(ipAddress);\n\tif (ipZone == null) {\n\t\tresult = new LocationInfo();\n\t\tresult.setCountry(\"unknown\");\n\t\tresult.setProvince(\"unknown\");\n\t\tresult.setCity(\"unknown\");\n\t\tresult.setIsp(\"unknown\");\n\t\tresult.setIpAddress(ipAddress);\n\t\tresult.setUpdateTime(new Date());\n\t\tgetCache().put(ipAddress, result);\n\t\treturn result;\n\t}\n\tresult = new LocationInfo();\n\tresult.setCountry(ipZone.getCountry());\n\tresult.setProvince(ipZone.getProvince());\n\tresult.setCity(ipZone.getCity());\n\tresult.setIsp(ipZone.getIsp());\n\tresult.setIpAddress(ipAddress);\n\tresult.setUpdateTime(new Date());\n\tgetCache().put(ipAddress, result);\n\treturn result;\n}", "CodeBleu_score": 43.02653742096879}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t    IPZone ipZone = null;\n    String country = \"unknown\";\n    String province = \"unknown\";\n    String city = \"unknown\";\n    String isp = \"unknown\";\n    String lat = \"unknown\";\n    String lon = \"unknown\";\n    String timezone = \"unknown\";\n    String timezoneId = \"unknown\";\n    String utcOffset = \"unknown\";\n    String dstOffset = \"unknown\";\n    String ispId = \"unknown\";\n    String areaId = \"unknown\";\n    String areaName = \"unknown\";\n    String countryId = \"unknown\";\n    String countryName = \"unknown\";\n    String countryCode = \"unknown\";\n    String countryCode3 = \"unknown\";\n    String countryCodeNum = \"unknown\";\n    String continentCode = \"unknown\";\n    String continentName = \"unknown\";\n    String countryType = \"unknown\";\n    String iddCode = \"unknown\";\n    String countryPrefix = \"unknown\";\n    String countryPostalCode = \"unknown\";\n    String countryFlag = \"unknown\";\n    String countryFlagEmoji = \"unknown\";\n    String countryFlagEmojiU = \"unknown\";\n    String countryFlagHTML = \"unknown\";\n    String countryFlagHTMLU = \"unknown\";\n    String countryFlagHTMLC = \"unknown\";\n    String countryFlagHTMLUCSS = \"unknown\";\n    String countryFlagHTMLUCSSC = \"unknown\";\n    String countryFlagHTMLUCSSD = \"unknown\";\n    String countryFlagHTMLUCSSD2 = \"unknown\";\n    String countryFlagHTMLUCSSD3 = \"unknown\";\n    String countryFlagHTMLUCSSD4 = \"unknown\";\n    String countryFlagHTMLUCSSD5 = \"unknown\";\n    String countryFlagHTMLUCSSD6 = \"unknown\";\n    String countryFlagHTMLUCSSD7 = \"unknown\";\n    String countryFlagHTMLUCSSD8 = \"unknown\";\n    String countryFlagHTMLUCSSD9 = \"unknown\";\n    String countryFlagHTMLUCSSD10 = \"unknown\";\n    String countryFlagHTMLUCSSD11 = \"unknown\";\n    String countryFlagHTMLUCSSD12 = \"unknown\";\n    String countryFlagHTMLUCSSD13 = \"unknown\";\n    String countryFlagHTMLUCSSD14", "CodeBleu_score": 9.78221540203924}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\t    if (this.esClient == null) {\n        synchronized (this) {\n            if (this.esClient == null) {\n                if (this.esClientLowLevel == null) {\n                    List<HttpHost> hosts = new ArrayList<>();\n                    for (String host : this.esClusterHosts.split(\",\")) {\n                        String[] hostPort = host.split(\":\");\n                        hosts.add(new HttpHost(hostPort[0], Integer.parseInt(hostPort[1]), \"http\"));\n                    }\n                    this.esClientLowLevel = new RestClient(hosts);\n                }\n                if (this.esClientHighLevel == null) {\n                    this.esClientHighLevel = new RestHighLevelClient(this.esClientLowLevel);\n                }\n                this.esClient = this.esClientHighLevel;\n            }\n        }\n    }\n}", "CodeBleu_score": 32.58036652682581}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\n    // Check if both low-level and high-level REST clients are already set.\n    if (this.esRestLowLevelClient != null && this.esRestHighLevelClient != null) {\n        return;\n    }\n\n    // Synchronize the initialization process.\n    synchronized (this) {\n\n        // Check if both low-level and high-level REST clients are already set.\n        if (this.esRestLowLevelClient != null && this.esRestHighLevelClient != null) {\n            return;\n        }\n\n        // Parse the cluster hosts and ports.\n        List<HttpHost> esHosts = new ArrayList<>();\n        String[] hosts = this.esClusterHosts.split(\",\");\n        for (String host : hosts) {\n            String[] hostAndPort = host.split(\":\");\n            if (hostAndPort.length != 2) {\n                throw new Exception(\"Invalid host and port pair: \" + host);\n            }\n            esHosts.add(new HttpHost(hostAndPort[0], Integer.parseInt(hostAndPort[1]), \"http\"));\n        }\n\n        // Build the low-level REST client.\n        this.esRestLowLevelClient = RestClient.builder(esHosts.toArray(new HttpHost[0])).build();\n\n        // Build the high-level REST client.\n        this.esRestHighLevelClient = new RestHighLevelClient(RestClient.builder(esHosts.toArray(new HttpHost[0])));\n    }\n}", "CodeBleu_score": 44.567577300974555}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t    if (esClient == null) {\n        synchronized (this) {\n            if (esClient == null) {\n                if (esHosts == null || esHosts.isEmpty()) {\n                    throw new Exception(\"No Elasticsearch hosts specified.\");\n                }\n                List<HttpHost> httpHosts = new ArrayList<HttpHost>();\n                for (String host : esHosts) {\n                    String[] hostParts = host.split(\":\");\n                    if (hostParts.length != 2) {\n                        throw new Exception(\"Invalid Elasticsearch host: \" + host);\n                    }\n                    httpHosts.add(new HttpHost(hostParts[0], Integer.parseInt(hostParts[1]), \"http\"));\n                }\n                if (esClientLowLevel == null) {\n                    esClientLowLevel = RestClient.builder(httpHosts.toArray(new HttpHost[0])).build();\n                }\n                if (esClientHighLevel == null) {\n                    esClientHighLevel = new RestHighLevelClient(RestClient.builder(httpHosts.toArray(new HttpHost[0])));\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 35.59414867941535}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<>();\n    String[] hostList = clusterHostList.split(\",\");\n    for (String host : hostList) {\n        String[] hostPort = host.split(\":\");\n        if (hostPort.length == 2) {\n            hosts.add(new HttpHost(hostPort[0], Integer.parseInt(hostPort[1]), \"http\"));\n        } else {\n            hosts.add(new HttpHost(host, clusterPort, \"http\"));\n        }\n    }\n    return hosts;\n}", "CodeBleu_score": 42.500879717069964}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<HttpHost>();\n    String[] hostsArray = clusterHostList.split(\",\");\n    for (String host : hostsArray) {\n        String hostName = host.trim();\n        String hostPort = clusterPort + \"\";\n        if (host.contains(\":\")) {\n            hostName = host.substring(0, host.indexOf(\":\"));\n            hostPort = host.substring(host.indexOf(\":\") + 1);\n        }\n        hosts.add(new HttpHost(hostName, Integer.parseInt(hostPort), \"http\"));\n    }\n    return hosts;\n}", "CodeBleu_score": 38.31725368676538}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<>();\n    String[] hostList = clusterHostList.split(\",\");\n    for (String host : hostList) {\n        String[] hostPort = host.split(\":\");\n        if (hostPort.length == 2) {\n            hosts.add(new HttpHost(hostPort[0], Integer.parseInt(hostPort[1]), \"http\"));\n        } else {\n            hosts.add(new HttpHost(hostPort[0], clusterPort, \"http\"));\n        }\n    }\n    return hosts;\n}", "CodeBleu_score": 42.17476558201271}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\t    // Create a queue to hold tasks.\n    LinkedBlockingQueue<Task> tasks = new LinkedBlockingQueue<>();\n\n    // Create a thread to poll for tasks.\n    Thread poller = new Thread(() -> {\n        while (true) {\n            try {\n                // Poll for tasks.\n                Task task = queue.poll(30, TimeUnit.SECONDS);\n                if (task != null) {\n                    // Add the task to the queue.\n                    tasks.add(task);\n                }\n            } catch (InterruptedException e) {\n                // Exit the thread.\n                break;\n            }\n        }\n    });\n\n    // Start the thread.\n    poller.start();\n\n    // Create a thread to process tasks.\n    Thread processor = new Thread(() -> {\n        while (true) {\n            try {\n                // Get the next task.\n                Task task = tasks.take();\n                if (task != null) {\n                    // Check the task type.\n                    if (task instanceof PlainTextMessageTask) {\n                        // Extract the recipient number and message data.\n                        String recipient = ((PlainTextMessageTask) task).getRecipient();\n                        String message = ((PlainTextMessageTask) task).getMessage();\n\n                        // Validate the data.\n                        if (recipient != null && message != null) {\n                            // Send the message.\n                            sendMessage(recipient, message);\n                        } else {\n                            // Log an error message.\n                            logger.error(\"Invalid data: \" + task.toString());\n                        }\n                    } else {\n                        // Log an error message.\n                        logger.error(\"Invalid task type: \" + task.toString());\n                    }\n                }\n            } catch (InterruptedException e) {\n                // Exit the thread.\n                break;\n            }\n        }\n    });\n\n    // Start the thread.\n    processor.start();\n\n    // Wait for the threads to complete.\n    processor.join();\n    poller.join();\n}", "CodeBleu_score": 28.242530974343623}, {"code": "protected void pollingWork() throws InterruptedException{\n\t    while (!isShutdownRequested()) {\n        try {\n            Task task = taskQueue.poll(30, TimeUnit.SECONDS);\n            if (task != null) {\n                if (task.getType() == TaskType.PLAIN_TEXT_MESSAGE) {\n                    processPlainTextMessageTask(task);\n                } else {\n                    logger.error(\"Task type \" + task.getType() + \" is not supported.\");\n                }\n            }\n        } catch (InterruptedException e) {\n            throw e;\n        } catch (Exception e) {\n            logger.error(\"Error processing task\", e);\n        }\n    }\n}", "CodeBleu_score": 22.143478493361084}, {"code": "protected void pollingWork() throws InterruptedException{\n\t    while (true) {\n        // Wait for a task to be available, or for 30 seconds.\n        Task task = taskQueue.poll(30, TimeUnit.SECONDS);\n        if (task == null) {\n            continue;\n        }\n\n        // Check the task type.\n        switch (task.getType()) {\n            case TASK_TYPE_PLAIN_TEXT_MESSAGE:\n                // Extract the recipient number and message data.\n                String recipient = task.getData();\n                String message = task.getData2();\n\n                // Validate the data.\n                if (!validatePhoneNumber(recipient)) {\n                    System.out.println(\"Invalid recipient number: \" + recipient);\n                    break;\n                }\n                if (StringUtils.isBlank(message)) {\n                    System.out.println(\"No message data: \" + message);\n                    break;\n                }\n\n                // Send the message.\n                try {\n                    sendMessage(recipient, message);\n                } catch (Exception e) {\n                    System.out.println(\"Error sending message: \" + e.getMessage());\n                }\n                break;\n            default:\n                System.out.println(\"Unknown task type: \" + task.getType());\n                break;\n        }\n    }\n}", "CodeBleu_score": 32.81579959309659}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t    CloseableHttpClient httpclient = HttpClients.createDefault();\n    HttpGet httpGet = new HttpGet(uri);\n    CloseableHttpResponse response = httpclient.execute(httpGet);\n    HttpEntity entity = response.getEntity();\n    String result = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n    EntityUtils.consume(entity);\n    response.close();\n    httpclient.close();\n    return result;\n}", "CodeBleu_score": 58.689612492490085}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t    CloseableHttpClient httpclient = HttpClients.createDefault();\n    HttpGet httpGet = new HttpGet(uri);\n    httpGet.addHeader(\"Accept\", \"application/xml\");\n    try (CloseableHttpResponse response = httpclient.execute(httpGet)) {\n        HttpEntity entity = response.getEntity();\n        String result = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        System.out.println(result);\n        return result;\n    }\n}", "CodeBleu_score": 52.84859540049259}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\n    CloseableHttpClient httpclient = HttpClients.createDefault();\n    HttpGet httpget = new HttpGet(uri);\n\n    try (CloseableHttpResponse response = httpclient.execute(httpget)) {\n\n        // Get HttpResponse Status\n        System.out.println(response.getStatusLine());\n\n        HttpEntity entity = response.getEntity();\n\n        // Get HttpResponse Content\n        String xml = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        System.out.println(xml);\n        return xml;\n\n    }\n\n}", "CodeBleu_score": 56.00505449307467}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\n    if (StringUtils.isBlank(messageXmlStr)) {\n        return null;\n    }\n\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document document = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n\n    NodeList nodeList = document.getDocumentElement().getChildNodes();\n    List<Map<String, Object>> rootMapList = decodeToArray(nodeList, doTrim);\n\n    if (rootMapList == null || rootMapList.isEmpty()) {\n        return null;\n    }\n\n    return rootMapList.get(0);\n}", "CodeBleu_score": 59.04779023609035}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tif (StringUtils.isBlank(messageXmlStr)) {\n\t\treturn null;\n\t}\n\t\n\tDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder db = dbf.newDocumentBuilder();\n\tDocument document = db.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n\t\n\tNodeList nodeList = document.getChildNodes();\n\tif (nodeList.getLength() != 1) {\n\t\treturn null;\n\t}\n\t\n\treturn decodeToMap(nodeList.item(0), doTrim);\n}", "CodeBleu_score": 41.503762818688536}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t    if (StringUtils.isBlank(messageXmlStr)) {\n        return null;\n    }\n    DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n    Document document = documentBuilder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n    NodeList nodeList = document.getChildNodes();\n    if (nodeList.getLength() == 0) {\n        return null;\n    }\n    Node rootNode = nodeList.item(0);\n    return decodeToMap(rootNode, doTrim);\n}", "CodeBleu_score": 45.652204905997664}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tfinal ITrxManager trxManager = Services.get(ITrxManager.class);\n\tfinal String trxName = trxManager.getThreadInheritedTrxName();\n\n\tfinal boolean autoProcess = Services.get(ISysConfigBL.class).getBooleanValue(\"de.metas.order.autoProcess\", false, orderRecord.getAD_Client_ID(), orderRecord.getAD_Org_ID());\n\tfinal boolean autoCreateMissingSchedules = Services.get(ISysConfigBL.class).getBooleanValue(\"de.metas.order.autoCreateMissingSchedules\", false, orderRecord.getAD_Client_ID(), orderRecord.getAD_Org_ID());\n\n\tif (autoProcess)\n\t{\n\t\tfinal CompleteShipAndInvoiceEnqueuer enqueuer = new CompleteShipAndInvoiceEnqueuer();\n\t\tenqueuer.setTrxName(trxName);\n\t\tenqueuer.enqueue(OrderId.ofRepoId(orderRecord.getC_Order_ID()));\n\t}\n\telse if (autoCreateMissingSchedules)\n\t{\n\t\tfinal CreateMissingShipmentSchedulesWorkpackageProcessor processor = new CreateMissingShipmentSchedulesWorkpackageProcessor();\n\t\tprocessor.setTrxName(trxName);\n\t\tprocessor.enqueue(OrderId.ofRepoId(orderRecord.getC_Order_ID()));\n\t}\n\telse\n\t{\n\t\tfinal Logger logger = LogManager.getLogger(ModelValidator.class);\n\t\tlogger.info(\"Not enqueuing missing shipment schedules for order {}.\", orderRecord.getC_Order_ID());\n\t}\n}", "CodeBleu_score": 39.637601060800854}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tfinal boolean isAutoShipmentAndInvoicingEnabled = Services.get(ISysConfigBL.class).getBooleanValue(CreateMissingShipmentSchedulesWorkpackageProcessor.SYSCONFIG_AutoCreateMissingShipmentSchedules, false);\n\n\tfinal Level logLevel = isAutoShipmentAndInvoicingEnabled ? Level.INFO : Level.DEBUG;\n\tfinal Logger logger = LogManager.getLogger(CreateMissingShipmentSchedulesWorkpackageProcessor.class);\n\n\tif (isAutoShipmentAndInvoicingEnabled) {\n\t\tfinal String trxName = Services.get(ITrxManager.class).getTrxName(orderRecord);\n\t\tfinal OrderId orderId = OrderId.ofRepoId(orderRecord.getC_Order_ID());\n\n\t\tlogger.log(logLevel, \"Enqueuing order {} for auto-processing using transaction {}\", orderId, trxName);\n\n\t\tServices.get(CompleteShipAndInvoiceEnqueuer.class).enqueueForAutoProcessing(orderId, trxName);\n\t} else {\n\t\tfinal String trxName = Services.get(ITrxManager.class).getTrxName(orderRecord);\n\t\tfinal OrderId orderId = OrderId.ofRepoId(orderRecord.getC_Order_ID());\n\n\t\tlogger.log(logLevel, \"Enqueuing order {} for missing shipment schedules creation using transaction {}\", orderId, trxName);\n\n\t\tServices.get(AsyncBatchObserver.class).newAsyncBatch(AsyncBatchId.random())\n\t\t\t\t.setBatchType(CreateMissingShipmentSchedulesWorkpackageProcessor.BATCH_TYPE_CreateMissingShipmentSchedules)\n\t\t\t\t.setContext(orderId)\n\t\t\t\t.setEnqueuerName(CreateMissingShipmentSchedulesWorkpackageProcessor.class.getSimpleName())\n\t\t\t\t.setTrxName(trxName)\n\t\t\t\t.execute();\n\t}\n}", "CodeBleu_score": 44.541457366212946}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\n\tfinal ISysConfigBL sysConfigBL = Services.get(ISysConfigBL.class);\n\n\tfinal boolean isAutoProcess = sysConfigBL.getBooleanValue(SYSCONFIG_AUTO_PROCESS, false, orderRecord.getAD_Client_ID(), orderRecord.getAD_Org_ID());\n\tfinal boolean isAutoCreateMissingSchedules = sysConfigBL.getBooleanValue(SYSCONFIG_AUTO_CREATE_MISSING_SCHEDULES, true, orderRecord.getAD_Client_ID(), orderRecord.getAD_Org_ID());\n\tfinal boolean isPostponeMissingSchedules = sysConfigBL.getBooleanValue(SYSCONFIG_POSTPONE_MISSING_SCHEDULES, false, orderRecord.getAD_Client_ID(), orderRecord.getAD_Org_ID());\n\n\tfinal DeliveryRule deliveryRule = DeliveryRule.ofCode(orderRecord.getDeliveryRule());\n\tfinal boolean isEligibleForAutoProcessing = isAutoProcess && deliveryRule.isAutoProcess();\n\n\tfinal Level logLevel = isEligibleForAutoProcessing ? Level.INFO : Level.DEBUG;\n\n\tfinal String trxName = ITrxManager.TRXNAME_ThreadInherited;\n\n\tif (isEligibleForAutoProcessing)\n\t{\n\t\tfinal CompleteShipAndInvoiceEnqueuer enqueuer = new CompleteShipAndInvoiceEnqueuer(orderRecord.getC_Order_ID(), trxName);\n\t\tenqueuer.enqueue();\n\n\t\tLoggables.withLogger(logger, logLevel).addLog(\n\t\t\t\t\"Enqueued order {} for automatic processing\",\n\t\t\t\torderRecord.getDocumentNo());\n\t}\n\telse\n\t{\n\t\tfinal CreateMissingShipmentSchedulesWorkpackageProcessor processor = new CreateMissingShipmentSchedulesWorkpackageProcessor(orderRecord.getC_Order_ID(), trxName);\n\t\tprocessor.setPostponeMissingSchedules(isPostponeMissingSchedules);\n\t\tprocessor.process();\n\n\t\tLoggables.withLogger(logger, logLevel", "CodeBleu_score": 42.67123566007289}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = User::where('email', $request->email)->first();\n    if (\n        $user &&\n        $this->attemptingTwoFactorAuthentication($request) &&\n        ! $user->twoFactorChallenged()\n    ) {\n        event(new TwoFactorAuthenticationChallenged($request, $user));\n\n        throw ValidationException::withMessages([\n            'email' => [__('Your two factor authentication has not been challenged.')],\n        ]);\n    }\n\n    if ($user &&\n        $this->limiter()->tooManyAttempts(\n            $this->throttleKey($request),\n            $maxAttempts = $this->maxAttempts($request)\n        )\n    ) {\n        event(new Failed($request, $user));\n\n        $seconds = $this->limiter()->availableIn(\n            $this->throttleKey($request)\n        );\n\n        throw ValidationException::withMessages([\n            'email' => [__('Too many login attempts. Please try again in :seconds seconds.', ['seconds' => $seconds])],\n        ]);\n    }\n\n    if ($user &&\n        $this->attemptingTwoFactorAuthentication($request) &&\n        ! $user->twoFactorAuthenticatable()\n    ) {\n        event(new TwoFactorAuthenticationChallenged($request, $user));\n\n        throw ValidationException::withMessages([\n            'email' => [__('Your account is not two factor authenticatable.')],\n        ]);\n    }\n\n    if ($user &&\n        $this->attemptingTwoFactorAuthentication($request) &&\n        ! $user->twoFactorEnabled()\n    ) {\n        event(new TwoFactorAuthenticationChallenged($request, $user));\n\n        throw ValidationException::withMessages([\n            'email' => [__('Your two factor authentication is not enabled.')],\n        ]);\n    }\n\n    if ($user &&\n        $this->attemptingTwoFactorAuthentication($request) &&\n        ! $user->twoFactorChallenged()\n    ) {\n        event(new TwoFactorAuthenticationChallenged($request, $", "CodeBleu_score": 35.744832190543896}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = User::where('email', $request->email)->first();\n\n    if (\n        $user &&\n        $this->attemptingTwoFactorAuth($request) &&\n        ! $user->hasTwoFactorAuthenticationEnabled()\n    ) {\n        event(new TwoFactorAuthenticationChallenged($request, $user));\n\n        throw ValidationException::withMessages([\n            'email' => [__('Your two factor authentication is not enabled.')],\n        ]);\n    }\n\n    if ($user && $this->attemptingTwoFactorAuth($request) &&\n        ! Webauthn::checkUserHasEnrolledDevices($user)\n    ) {\n        event(new TwoFactorAuthenticationChallenged($request, $user));\n\n        throw ValidationException::withMessages([\n            'email' => [__('You have not enrolled any security keys.')],\n        ]);\n    }\n\n    if ($user && $this->attemptingTwoFactorAuth($request) &&\n        ! $user->hasRecentLogin()\n    ) {\n        event(new TwoFactorAuthenticationChallenged($request, $user));\n\n        throw ValidationException::withMessages([\n            'email' => [__('You have not recently logged in.')],\n        ]);\n    }\n\n    if ($user &&\n        $this->limiter()->tooManyAttempts(\n            $this->throttleKey($request),\n            $maxAttempts = $this->maxAttempts($request)\n        )\n    ) {\n        event(new Failed($request, $user, null));\n\n        $this->limiter()->hit(\n            $this->throttleKey($request),\n            $decayMinutes = $this->decayMinutes($request)\n        );\n\n        throw ValidationException::withMessages([\n            'email' => [__('Too many login attempts. Please try again in :seconds seconds.', ['seconds' => $this->limiter()->availableIn(\n                $this->throttleKey($request)\n            )])],\n        ]);\n    }\n\n    if ($this->attemptingTwoFactorAuth($request) &&\n       ", "CodeBleu_score": 35.895792142831375}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = User::where('email', $request->email)->first();\n\n    if (\n        $user &&\n        $this->limiter()->tooManyAttempts($request, $this->maxAttempts())\n    ) {\n        event(new Failed(config('fortify.guard'), $request));\n\n        $this->limiter()->hit($request);\n\n        throw ValidationException::withMessages([\n            Fortify::username() => [__($this->maxAttemptsErrorMessage())],\n        ]);\n    }\n\n    return $user &&\n        $this->guard->validate(\n            $request->only(Fortify::username(), 'password'),\n            $user\n        )\n        ? $user\n        : null;\n}", "CodeBleu_score": 45.26612292672921}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter->increment($request);\n\n    throw ValidationException::withMessages([\n        Fortify::username() => [__($this->limiter->tooManyAttempts($request) ? 'auth.throttle' : 'auth.failed')],\n    ]);\n}", "CodeBleu_score": 56.39254927859025}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter->increment($this->throttleKey($request));\n\n    throw ValidationException::withMessages([\n        'email' => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 83.61592416841617}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter->increment($request);\n\n    $this->fireFailedEvent($request);\n\n    throw ValidationException::withMessages([\n        'email' => [__($this->errorMessages['failed'])],\n    ])->status(422);\n}", "CodeBleu_score": 60.82529634207244}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t    $user = User::find(session('auth.id'));\n    $response = Webauthn::prepareAssertionResponse($user);\n\n    $data = [\n        'twoFactorEnabled' => $user->two_factor_enabled,\n        'remember' => session()->has('auth.remember'),\n        'assertionResponse' => $response,\n        'publicKey' => $user->webauthnKey->publicKey,\n    ];\n\n    return Inertia::render('TwoFactorChallenge', $data);\n}", "CodeBleu_score": 43.15970310735286}, {"code": "<?\npublic function toResponse($request){\n\t    $user = User::find($request->session()->get('auth.id'));\n\n    if ($user) {\n        $user->setTwoFactorAuthenticatable();\n\n        $publicKey = Webauthn::publicKey($user);\n\n        $publicKey->setUserHandle($user->getAuthIdentifier());\n\n        $publicKey->setRpEntityName(config('app.name'));\n\n        $publicKey->setRpId(config('app.url'));\n\n        $publicKey->setRpIcon(config('app.url') . '/favicon.ico');\n\n        $publicKey->setRpOrigin(config('app.url'));\n\n        $publicKey->setRpId(config('app.url'));\n\n        $publicKey->setRpName(config('app.name'));\n\n        $publicKey->setRpDisplayName(config('app.name'));\n\n        $publicKey->setRpId(config('app.url'));\n\n        $publicKey->setRpDisplayName(config('app.name'));\n\n        $publicKey->setRpName(config('app.name'));\n\n        $publicKey->setRpId(config('app.url'));\n\n        $publicKey->setRpDisplayName(config('app.name'));\n\n        $publicKey->setRpName(config('app.name'));\n\n        $publicKey->setRpId(config('app.url'));\n\n        $publicKey->setRpDisplayName(config('app.name'));\n\n        $publicKey->setRpName(config('app.name'));\n\n        $publicKey->setRpId(config('app.url'));\n\n        $publicKey->setRpDisplayName(config('app.name'));\n\n        $publicKey->setRpName(config('app.name'));\n\n        $publicKey->setRpId(config('app.url'));\n\n        $publicKey->setRpDisplayName(config('app.name'));\n\n        $publicKey->setRpName(config('app.name'));\n\n        $publicKey->setRpId(config('app.url'));\n\n        $publicKey->setRpDisplay", "CodeBleu_score": 32.44758708716468}, {"code": "<?\npublic function toResponse($request){\n\t    $user = User::findOrFail($request->session()->get('auth.id'));\n\n    $data = [\n        'isEnabled' => $user->two_factor_secret !== null,\n        'remember' => $request->session()->get('auth.remember')\n    ];\n\n    if ($user->two_factor_secret !== null) {\n        $data['assertion'] = Webauthn::assertion($user->two_factor_secret, $user->two_factor_recovery_codes);\n    }\n\n    return Inertia::render('TwoFactorChallenge', $data);\n}", "CodeBleu_score": 45.691032648614424}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    $userToken = UserToken::where('driver', $driver)->where('socialite_id', $socialite->getId())->first();\n\n    if ($userToken) {\n        $user = $userToken->user;\n        $user->setRememberToken(Str::random(60));\n\n        if (!$user->hasVerifiedEmail()) {\n            $user->markEmailAsVerified();\n        }\n\n        event(new Registered($user));\n\n        Auth::login($user, true);\n\n        return $user;\n    }\n\n    $user = User::where('email', $socialite->getEmail())->first();\n\n    if ($user) {\n        $user->tokens()->delete();\n\n        $user->setRememberToken(Str::random(60));\n\n        $user->tokens()->create([\n            'name' => 'webauthn',\n            'token' => Webauthn::generateToken($user),\n            'abilities' => ['*'],\n        ]);\n\n        $user->tokens()->create([\n            'name' => 'webauthn-backup',\n            'token' => Webauthn::generateBackupToken($user),\n            'abilities' => ['*'],\n        ]);\n\n        $user->tokens()->create([\n            'name' => 'api',\n            'token' => Str::random(60),\n            'abilities' => ['*'],\n        ]);\n\n        $userToken = UserToken::create([\n            'user_id' => $user->id,\n            'driver' => $driver,\n            'socialite_id' => $socialite->getId(),\n            'socialite_token' => $socialite->token,\n            'socialite_refresh_token' => $socialite->refreshToken,\n        ]);\n\n        event(new TwoFactorAuthenticationChallenged($user, $userToken));\n\n        return $user;\n    }\n\n    $user = (new CreateNewUser)->create($request->all());\n\n    $user->tokens()->create([\n        'name' => 'webauthn',\n        'token' => Webauthn::generateToken($user),\n       ", "CodeBleu_score": 41.37964026264128}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    $userToken = UserToken::where('driver', $driver)->where('socialite_user_id', $socialite->getId())->first();\n    if ($userToken) {\n        $user = $userToken->user;\n        $user->update([\n            'name' => $socialite->getName(),\n            'email' => $socialite->getEmail(),\n        ]);\n        $user->tokens()->delete();\n        $userToken->delete();\n    } else {\n        $user = User::where('email', $socialite->getEmail())->first();\n        if (!$user) {\n            $user = $this->createUser($request, $socialite);\n        } else {\n            $userToken = UserToken::create([\n                'user_id' => $user->id,\n                'driver' => $driver,\n                'socialite_user_id' => $socialite->getId(),\n                'token' => Str::random(100),\n            ]);\n        }\n    }\n\n    return $user;\n}", "CodeBleu_score": 50.884114382507065}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    // If the driver is not supported, throw an exception.\n    if (!in_array($driver, config('fortify.socialite_drivers'))) {\n        throw new \\Exception('The socialite driver is not supported.');\n    }\n\n    // Check if the driver is enabled.\n    if (!config(\"fortify.socialite_drivers.$driver.enabled\")) {\n        throw new \\Exception('The socialite driver is not enabled.');\n    }\n\n    // Check if the driver has been configured.\n    if (!config(\"fortify.socialite_drivers.$driver.configured\")) {\n        throw new \\Exception('The socialite driver is not configured.');\n    }\n\n    // Check if the driver is enabled.\n    if (!config(\"fortify.socialite_drivers.$driver.enabled\")) {\n        throw new \\Exception('The socialite driver is not enabled.');\n    }\n\n    // Check if the driver is configured.\n    if (!config(\"fortify.socialite_drivers.$driver.configured\")) {\n        throw new \\Exception('The socialite driver is not configured.');\n    }\n\n    // Check if the driver is enabled.\n    if (!config(\"fortify.socialite_drivers.$driver.enabled\")) {\n        throw new \\Exception('The socialite driver is not enabled.');\n    }\n\n    // Check if the driver is configured.\n    if (!config(\"fortify.socialite_drivers.$driver.configured\")) {\n        throw new \\Exception('The socialite driver is not configured.');\n    }\n\n    // Check if the driver is enabled.\n    if (!config(\"fortify.socialite_drivers.$driver.enabled\")) {\n        throw new \\Exception('The socialite driver is not enabled.');\n    }\n\n    // Check if the driver is configured.\n    if (!config(\"fortify.socialite_drivers.$driver.configured\")) {\n        throw new \\Exception('The socialite driver is not configured.');\n    }\n\n    // Check if the driver is enabled.\n    if (!config(\"fortify.socialite_drivers.$driver.enabled\")) {\n        throw new \\Exception('The socialite driver is not enabled.');\n    }\n\n", "CodeBleu_score": 17.362420790256117}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $user = $request->user();\n    if (!$user) {\n        return false;\n    }\n\n    $credentials = $request->validate([\n        'id' => 'required|string',\n        'rawId' => 'required|string',\n        'response' => 'required|array',\n        'type' => 'required|string',\n    ]);\n\n    $assertion = $credentials['response'];\n\n    $loginRateLimiter = new LoginRateLimiter($user);\n    if ($loginRateLimiter->hasTooManyLoginAttempts($request)) {\n        $this->fireFailedEvent($user, $credentials);\n        throw ValidationException::withMessages([\n            'id' => [__('auth.throttle', ['seconds' => $loginRateLimiter->availableIn($request)])],\n        ]);\n    }\n\n    try {\n        WebauthnFacade::validateAssertion(\n            $assertion,\n            $user->getKey(),\n            $user->getAuthIdentifierName(),\n            $user->getAuthPassword(),\n            $user->getRememberToken(),\n            $user->getAuthIdentifier()\n        );\n    } catch (Webauthn\\Exceptions\\InvalidAssertionException $e) {\n        $this->fireFailedEvent($user, $credentials);\n        $loginRateLimiter->loginAttempted($request);\n        throw ValidationException::withMessages([\n            'id' => [__('auth.failed')],\n        ]);\n    }\n\n    $this->guard()->setUser($user);\n\n    $this->fireLoginEvent($user, $request);\n\n    return true;\n}", "CodeBleu_score": 52.09282895433207}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $user = $this->getUser($request);\n    if ($user === null) {\n        return false;\n    }\n    $credentials = $this->credentials($request);\n    if ($credentials === null) {\n        return false;\n    }\n    if (! $this->guard->validate($credentials)) {\n        $this->fireFailedEvent($user, $credentials);\n        $this->throwFailedAuthenticationException($request);\n        return false;\n    }\n    $this->guard->setUser($user);\n    return true;\n}", "CodeBleu_score": 54.47538942903161}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $user = $request->user();\n    if ($user === null) {\n        return false;\n    }\n\n    $credentials = $request->only('id', 'type', 'rawId', 'response');\n    $credentials['id'] = (string) $credentials['id'];\n    $credentials['rawId'] = (string) $credentials['rawId'];\n    $credentials['response'] = json_decode($credentials['response'], true);\n\n    try {\n        Webauthn::validateAssertion($user, $credentials);\n    } catch (ValidationException $e) {\n        event(new Failed(config('webauthn.guard'), $user, $credentials));\n\n        throw $e;\n    }\n\n    return true;\n}", "CodeBleu_score": 55.52227897001315}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\t    if (!$email = $this->argument('email')) {\n        $this->error('No email provided.');\n        return null;\n    }\n\n    try {\n        return User::where('email', $email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error(\"Could not find user with email $email.\");\n        return null;\n    }\n}", "CodeBleu_score": 76.63631259537263}, {"code": "<?\nprivate function user(): ?User{\n\t    if (! $this->argument('email')) {\n        $this->error('No email provided.');\n        return null;\n    }\n\n    try {\n        return User::where('email', $this->argument('email'))->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error('User not found.');\n        return null;\n    }\n}", "CodeBleu_score": 44.188216103264956}, {"code": "<?\nprivate function user(): ?User{\n\t    if ($this->argument('email')) {\n        try {\n            return User::where('email', $this->argument('email'))->firstOrFail();\n        } catch (ModelNotFoundException $e) {\n            $this->error('User not found.');\n            return null;\n        }\n    }\n\n    $this->error('No email provided.');\n    return null;\n}", "CodeBleu_score": 41.93841422374237}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\t    if (config('scout.driver') === 'meilisearch') {\n        $meilisearch = app('meilisearch');\n        $indexes = $meilisearch->getAllIndexes();\n        $indexes = array_filter($indexes, function ($index) {\n            return !in_array($index['uid'], ['movies', 'tv', 'people', 'companies', 'keywords']);\n        });\n        foreach ($indexes as $index) {\n            $table = $index['uid'];\n            $this->call('scout:flush', [\n                '--model' => 'App\\\\Models\\\\' . ucfirst($table),\n            ]);\n            $this->info(\"Index {$table} flushed.\");\n        }\n    }\n}", "CodeBleu_score": 41.4510101826889}, {"code": "<?\nprotected function scoutFlush(): void{\n\t    if (config('scout.driver') !== 'meilisearch') {\n        return;\n    }\n\n    $meilisearch = app('meilisearch');\n\n    $indexes = $meilisearch->getAllIndexes();\n\n    $indexes = $indexes->filter(function ($index) {\n        return $index->uid !== 'meilisearch_system_info';\n    });\n\n    $indexes->each(function ($index) {\n        $table = $index->uid;\n\n        $this->call('scout:flush', [\n            '--model' => $table,\n        ]);\n    });\n\n    $this->info('Indexes flushed.');\n}", "CodeBleu_score": 44.56728238844303}, {"code": "<?\nprotected function scoutFlush(): void{\n\t    if (! config('scout.driver') || ! config('scout.flush')) {\n        return;\n    }\n\n    $indexes = config('scout.meilisearch.indexes');\n\n    if (! $indexes) {\n        return;\n    }\n\n    foreach ($indexes as $index => $config) {\n        $table = $config['table'];\n\n        $this->info(\"Flushing {$index} index.\");\n\n        $this->call('scout:flush', [\n            'index' => $index,\n            '--table' => $table,\n        ]);\n\n        $this->info(\"Flushed {$index} index.\");\n    }\n}", "CodeBleu_score": 45.52750998617291}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    $vcard = $this->read($resource);\n\n    $vcard->UID = $vcard->UID ?? $resource->getUid();\n\n    $this->applyExporters($resource, $vcard);\n\n    return $vcard;\n}", "CodeBleu_score": 18.26698853355068}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    $vcard = $this->getVCard($resource);\n\n    $this->applyExporters($resource, $vcard);\n\n    return $vcard;\n}", "CodeBleu_score": 13.20358399478618}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    $vcard = $this->read($resource);\n\n    if (!$vcard) {\n        $vcard = $this->create($resource);\n    }\n\n    $this->applyExporters($vcard, $resource);\n\n    return $vcard;\n}", "CodeBleu_score": 16.0177817380369}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $addressBook = $this->addressBooks[$addressBookId];\n    $object = $addressBook->getObjectByUri($cardUri);\n\n    if ($object instanceof Contact) {\n        Bus::dispatch(new DestroyContact($object));\n    } elseif ($object instanceof Group) {\n        Bus::dispatch(new DestroyGroup($object));\n    } else {\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 28.633142780515776}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $object = $this->getObjectByUri($addressBookId, $cardUri);\n\n    if ($object instanceof Contact) {\n        Bus::dispatch((new DestroyContact($object))->onQueue('high'));\n        return true;\n    }\n\n    if ($object instanceof Group) {\n        Bus::dispatch((new DestroyGroup($object))->onQueue('high'));\n        return true;\n    }\n\n    return false;\n}", "CodeBleu_score": 40.252434417471626}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $card = $this->getCard($addressBookId, $cardUri);\n    if ($card === null) {\n        return false;\n    }\n\n    if ($card instanceof Contact) {\n        Bus::dispatch(new DestroyContact($card->id))->onQueue('high');\n    } elseif ($card instanceof Group) {\n        Bus::dispatch(new DestroyGroup($card->id))->onQueue('high');\n    } else {\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 42.27535665972806}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\t    if (!request()->hasFile('file')) {\n        return;\n    }\n\n    $file = request()->file('file');\n    $fileName = $file->getClientOriginalName();\n\n    $filePath = $file->storeAs(\n        'lead_attachments', $fileName, 'public'\n    );\n\n    $data['file_name'] = $fileName;\n    $data['file_path'] = $filePath;\n\n    $this->create($data);\n}", "CodeBleu_score": 39.64551678642473}, {"code": "<?\npublic function upload(array $data){\n\t\n    if (!request()->hasFile('file')) {\n        return;\n    }\n\n    $leadActivity = app(Repository::class)->create(array_merge($data, [\n        'user_id' => auth()->user()->id,\n        'channel_type' => 'leads',\n        'channel_id' => $data['lead_id'],\n    ]));\n\n    $file = request()->file('file');\n\n    $file_name = $file->getClientOriginalName();\n\n    $path = $file->storeAs('lead_activity_files', $file_name);\n\n    return app(Repository::class)->create([\n        'lead_activity_id' => $leadActivity->id,\n        'name' => $file_name,\n        'path' => $path,\n    ]);\n}", "CodeBleu_score": 58.31789324229016}, {"code": "<?\npublic function upload(array $data){\n\t    if (! request()->hasFile('file')) {\n        return;\n    }\n\n    $file = request()->file('file');\n\n    $leadActivity = $this->create([\n        'type' => $data['type'],\n        'lead_id' => $data['lead_id'],\n        'user_id' => auth()->guard('user')->user()->id,\n        'comment' => $data['comment'],\n    ]);\n\n    $path = $file->storeAs('leads/' . $data['lead_id'], $file->getClientOriginalName(), 's3');\n\n    $this->create([\n        'lead_activity_id' => $leadActivity->id,\n        'name' => $file->getClientOriginalName(),\n        'path' => $path,\n    ]);\n}", "CodeBleu_score": 61.128087808507516}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t\n    if ($this->shouldReturnJson($request)) {\n        if ($exception instanceof ModelNotFoundException) {\n            return response()->json([\n                'message' => 'Resource not found'\n            ], 404);\n        }\n\n        if ($exception instanceof AuthenticationException) {\n            return response()->json([\n                'message' => 'Unauthenticated'\n            ], 401);\n        }\n\n        if ($exception instanceof AuthorizationException) {\n            return response()->json([\n                'message' => 'This action is unauthorized'\n            ], 403);\n        }\n\n        if ($exception instanceof PDOException) {\n            return response()->json([\n                'message' => 'Database error'\n            ], 500);\n        }\n\n        if ($exception instanceof ParseError) {\n            return response()->json([\n                'message' => 'Parse error'\n            ], 400);\n        }\n\n        if ($exception instanceof HttpException) {\n            return response()->json([\n                'message' => 'Something went wrong'\n            ], $exception->getStatusCode());\n        }\n\n        if ($exception instanceof Exception) {\n            return response()->json([\n                'message' => 'Something went wrong'\n            ], 500);\n        }\n    }\n\n    return parent::render($request, $exception);\n}", "CodeBleu_score": 31.856171664567178}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    if ($this->shouldReturnJson($request)) {\n        return $this->prepareJsonResponse($request, $exception);\n    }\n\n    if ($exception instanceof ModelNotFoundException) {\n        return $this->prepareModelNotFoundResponse($request, $exception);\n    }\n\n    if ($exception instanceof AuthenticationException) {\n        return $this->unauthenticated($request, $exception);\n    }\n\n    if ($exception instanceof AuthorizationException) {\n        return $this->prepareAuthorizationResponse($request, $exception);\n    }\n\n    if ($exception instanceof MethodNotAllowedHttpException) {\n        return $this->prepareMethodNotAllowedResponse($request, $exception);\n    }\n\n    if ($exception instanceof NotFoundHttpException) {\n        return $this->prepareNotFoundResponse($request, $exception);\n    }\n\n    if ($exception instanceof HttpException) {\n        return $this->prepareHttpExceptionResponse($request, $exception);\n    }\n\n    if ($exception instanceof PDOException) {\n        return $this->preparePDOExceptionResponse($request, $exception);\n    }\n\n    if ($exception instanceof ParseError) {\n        return $this->prepareParseErrorResponse($request, $exception);\n    }\n\n    return $this->prepareExceptionResponse($request, $exception);\n}", "CodeBleu_score": 27.824337881385798}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    if ($this->isFrontRoute($request)) {\n        return response()->view('errors.front-error', ['exception' => $exception], $exception->getStatusCode());\n    }\n\n    if ($this->isAdminRoute($request)) {\n        return response()->view('errors.admin-error', ['exception' => $exception], $exception->getStatusCode());\n    }\n\n    if ($exception instanceof ModelNotFoundException) {\n        return response()->view('errors.front-error', ['exception' => $exception], 404);\n    }\n\n    if ($exception instanceof PDOException) {\n        return response()->view('errors.front-error', ['exception' => $exception], 500);\n    }\n\n    if ($exception instanceof ParseError) {\n        return response()->view('errors.front-error', ['exception' => $exception], 500);\n    }\n\n    if ($exception instanceof HttpException) {\n        return response()->view('errors.front-error', ['exception' => $exception], $exception->getStatusCode());\n    }\n\n    if ($exception instanceof AuthenticationException) {\n        return response()->view('errors.front-error', ['exception' => $exception], 403);\n    }\n\n    return response()->view('errors.front-error', ['exception' => $exception], 500);\n}", "CodeBleu_score": 33.1571656584866}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\t    $response = response(view('errors.' . $statusCode, ['path' => $path]), $statusCode);\n\n    if ($this->expectsJson()) {\n        return $response->header('Content-Type', 'application/json');\n    }\n\n    return $response;\n}", "CodeBleu_score": 40.54878829963293}, {"code": "<?\nprivate function response($path, $statusCode){\n\t    $response = new Response();\n    $response->setStatusCode($statusCode);\n\n    if ($this->request->expectsJson()) {\n        $response->setContent(json_encode(['error' => $path]));\n    } else {\n        $response->setContent(view('errors.' . $statusCode, ['path' => $path])->render());\n    }\n\n    return $response;\n}", "CodeBleu_score": 39.91568522128739}, {"code": "<?\nprivate function response($path, $statusCode){\n\t    if ($this->request->expectsJson()) {\n        return response()->json([\n            'message' => $path\n        ], $statusCode);\n    }\n\n    return response()->view($path, [], $statusCode, $this->request);\n}", "CodeBleu_score": 47.71558779461997}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t    $data = request()->all();\n    $activityIds = $data['activity_ids'];\n    $isDone = $data['is_done'];\n    $activityRepo = app(ActivityRepository::class);\n    $activityRepo->massUpdate($activityIds, $isDone);\n    return response()->json(['message' => 'Activities updated successfully!'], 200);\n}", "CodeBleu_score": 26.45766366390837}, {"code": "<?\npublic function massUpdate(){\n\t    $request = request();\n    $ids = $request->input('ids');\n    $is_done = $request->input('is_done');\n\n    $activityRepo = app(ActivityRepository::class);\n    $updated = 0;\n    foreach ($ids as $id) {\n        $activity = $activityRepo->find($id);\n        if ($activity) {\n            $activity->is_done = $is_done;\n            $activity->save();\n            $updated++;\n        }\n    }\n\n    if ($updated) {\n        return response()->json([\n            'message' => trans('admin::app.activities.activities.update-success'),\n            'updated' => $updated,\n            'ids' => $ids,\n        ]);\n    } else {\n        return response()->json([\n            'message' => trans('admin::app.activities.activities.update-failure'),\n            'updated' => $updated,\n            'ids' => $ids,\n        ], 400);\n    }\n}", "CodeBleu_score": 48.45926125518984}, {"code": "<?\npublic function massUpdate(){\n\t    $activityRepository = app(ActivityRepository::class);\n    $activityIds = request()->input('ids');\n    $isDone = request()->input('is_done');\n    $count = 0;\n    foreach ($activityIds as $activityId) {\n        $activity = $activityRepository->find($activityId);\n        if ($activity) {\n            Event::dispatch('activity.update.before', $activity);\n            $activity->is_done = $isDone;\n            $activity->save();\n            Event::dispatch('activity.update.after', $activity);\n            $count++;\n        }\n    }\n    if ($count) {\n        return response()->json([\n            'message' => trans('admin::app.activities.update-success', ['count' => $count]),\n        ], 200);\n    } else {\n        return response()->json([\n            'message' => trans('admin::app.activities.update-failure'),\n        ], 400);\n    }\n}", "CodeBleu_score": 57.20464566123987}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t\n        $ids = request()->get('ids');\n\n        foreach ($ids as $id) {\n            $activity = $this->activity->findOrFail($id);\n\n            Event::dispatch('activity.delete.before', $id);\n\n            $this->activity->delete($id);\n\n            Event::dispatch('activity.delete.after', $id);\n        }\n\n        return response()->json([\n            'message' => trans('admin::app.response.delete-success', ['name' => 'Activity']),\n        ]);\n    }", "CodeBleu_score": 40.052247075326854}, {"code": "<?\n public function massDestroy(){\n\t    $ids = request()->get('ids');\n\n    foreach ($ids as $id) {\n        Event::dispatch('activity.delete.before', $id);\n\n        $activity = $this->activityRepository->findOrFail($id);\n\n        $this->activityRepository->delete($id);\n\n        Event::dispatch('activity.delete.after', $activity);\n    }\n\n    return response()->json(['message' => trans('admin::app.response.delete-success', ['name' => 'Activity'])]);\n}", "CodeBleu_score": 37.42679794191065}, {"code": "<?\n public function massDestroy(){\n\t\n    $activities = $this->activityRepository->findWhereIn('id', explode(\",\", request('ids')));\n\n    foreach ($activities as $activity) {\n        Event::dispatch('activity.delete.before', $activity);\n\n        $activity->delete();\n\n        Event::dispatch('activity.delete.after', $activity);\n    }\n\n    return response()->json(['message' => trans('admin::app.response.delete-success', ['name' => 'Activity'])]);\n}", "CodeBleu_score": 37.390213523052154}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t    $cards = DashboardHelper::getCards();\n    $selectedCards = request()->get('cards');\n\n    foreach ($cards as $key => $card) {\n        $cards[$key]['selected'] = false;\n\n        foreach ($selectedCards as $selectedCard) {\n            if ($selectedCard['id'] == $card['id']) {\n                $cards[$key]['selected'] = true;\n            }\n        }\n    }\n\n    return response()->json($cards);\n}", "CodeBleu_score": 44.34121660639017}, {"code": "<?\n public function updateCards(){\n\t    $cards = request()->get('cards');\n\n    foreach ($cards as $card) {\n        $dashboardCard = DashboardHelper::getCardByCode($card['code']);\n\n        if ($dashboardCard) {\n            $dashboardCard->update(['selected' => $card['selected']]);\n        }\n    }\n\n    return response()->json([\n        'cards' => DashboardHelper::getCards(),\n    ]);\n}", "CodeBleu_score": 37.237578869500446}, {"code": "<?\n public function updateCards(){\n\t\n        $cards = DashboardHelper::getCards();\n\n        foreach ($cards as $card) {\n            foreach (request()->all() as $key => $value) {\n                if ($key == $card['code']) {\n                    $card['selected'] = $value;\n                }\n            }\n        }\n\n        return response()->json($cards);\n    }", "CodeBleu_score": 38.004723179521825}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t    $this->validate(request(), [\n        'code' => ['required', 'unique:core_configurations,code', new Code],\n        'value' => 'required',\n        'channel_based' => 'required',\n        'locale_based' => 'required',\n        'channel_code' => 'required_if:channel_based,1',\n        'locale_code' => 'required_if:locale_based,1',\n    ]);\n\n    Event::dispatch('core.configuration.create.before');\n\n    $configuration = $this->configurationRepository->create(request()->all());\n\n    Event::dispatch('core.configuration.create.after', $configuration);\n\n    session()->flash('success', trans('admin::app.settings.configuration.save-message'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 36.097589132212384}, {"code": "<?\npublic function store(){\n\t    $this->validate(request(), [\n        'code' => ['required', 'unique:core_config,code', new Code],\n        'value' => 'required',\n        'channel_based' => 'boolean',\n        'locale_based' => 'boolean',\n        'channel_locale_based' => 'boolean',\n        'type' => 'required',\n    ]);\n\n    Event::dispatch('core.configuration.create.before');\n\n    $configuration = $this->configurationRepository->create(request()->all());\n\n    Event::dispatch('core.configuration.create.after', $configuration);\n\n    session()->flash('success', trans('admin::app.response.create-success', ['name' => 'Configuration']));\n\n    return redirect()->route($this->_config['redirect']);\n}", "CodeBleu_score": 29.67683858976403}, {"code": "<?\npublic function store(){\n\t    Event::dispatch('core.configuration.store.before');\n\n    $this->configurationRepository->create(request()->all());\n\n    Event::dispatch('core.configuration.store.after');\n\n    session()->flash('success', trans('admin::app.settings.configuration.save-message'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 51.27603087785153}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t    $code = request()->route('code');\n\n    $file = $this->coreConfigRepository->findOneByField('code', $code);\n\n    return Storage::download($file->value);\n}", "CodeBleu_score": 40.2842060241838}, {"code": "<?\npublic function download(){\n\t    $path = request('path');\n    $fileName = request('file');\n    $config = app(ConfigurationRepository::class)->findOneByField('value', $fileName);\n    return Storage::download($path . '/' . $config->value);\n}", "CodeBleu_score": 41.43484380352949}, {"code": "<?\npublic function download(){\n\t    $filePath = request()->get('path');\n    $fileName = request()->get('name');\n    $config = request()->get('config');\n    $configRepository = app(ConfigurationRepository::class);\n\n    $file = $configRepository->findOneByField('code', $config)->value;\n\n    return response()->download(storage_path($filePath . '/' . $fileName));\n}", "CodeBleu_score": 42.56106470845483}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    List<AdminModelSort> sortList = new ArrayList<>();\n    for (int i = 0; i < list.size(); i++) {\n        AdminModelSort sort = new AdminModelSort();\n        sort.setModel(list.get(i));\n        sort.setSort(i);\n        sortList.add(sort);\n    }\n    adminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, UserUtil.getUserId()));\n    adminModelSortService.saveBatch(sortList);\n    return Result.success();\n}", "CodeBleu_score": 58.79822001490073}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    //TODO: Implement...\n    return null;\n}", "CodeBleu_score": 4.860576751540888}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\n    // 1. Create a list of AdminModelSort objects\n    List<AdminModelSort> list2 = new ArrayList<>();\n    for (String item : list) {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setModule(AdminModuleEnum.HEADER.getCode());\n        adminModelSort.setSort(item);\n        list2.add(adminModelSort);\n    }\n\n    // 2. Remove existing sort settings for the user\n    adminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, UserUtil.getUserId()));\n\n    // 3. Save the new sort settings in batch\n    adminModelSortService.saveBatch(list2);\n\n    // 4. Return a success result\n    return Result.success();\n}", "CodeBleu_score": 45.477946247149525}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    // 1. check if the module is CRM\n    AdminConfig adminConfig = adminConfigService.getOne(new LambdaQueryWrapper<AdminConfig>().eq(AdminConfig::getId, moduleSetting.getAdminConfigId()));\n    if (adminConfig.getModule().equals(AdminModuleEnum.CRM.getCode())) {\n        return Result.fail(AdminCodeEnum.MODULE_SETTING_FAIL);\n    }\n    // 2. update status of the admin configuration\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.updateById(adminConfig);\n    // 3. update the status of the admin configuration\n    AdminUserConfig adminUserConfig = adminUserConfigService.getOne(new LambdaQueryWrapper<AdminUserConfig>().eq(AdminUserConfig::getAdminConfigId, adminConfig.getId()).eq(AdminUserConfig::getUserId, UserUtil.getCurrentUserId()));\n    adminUserConfig.setStatus(moduleSetting.getStatus());\n    adminUserConfigService.updateById(adminUserConfig);\n    return Result.success();\n}", "CodeBleu_score": 54.495867169875225}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    // 1. Check if the module is CRM. If it is, return an error.\n    // 2. Retrieve the current admin configuration by the setting ID.\n    // 3. Update the status of the admin configuration.\n    // 4. Save the updated setting.\n    // 5. Return a success result.\n\n    // 1. Check if the module is CRM. If it is, return an error.\n    if (moduleSetting.getModule().equals(AdminModuleEnum.CRM.getCode())) {\n        return Result.fail(AdminCodeEnum.MODULE_SETTING_FAIL);\n    }\n\n    // 2. Retrieve the current admin configuration by the setting ID.\n    AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getId());\n    if (adminConfig == null) {\n        return Result.fail(AdminCodeEnum.MODULE_SETTING_FAIL);\n    }\n\n    // 3. Update the status of the admin configuration.\n    adminConfig.setStatus(moduleSetting.getStatus());\n\n    // 4. Save the updated setting.\n    adminConfigService.updateById(adminConfig);\n\n    // 5. Return a success result.\n    return Result.success();\n}", "CodeBleu_score": 61.20298210939148}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    AdminConfig adminConfig = adminConfigService.getOne(new LambdaQueryWrapper<AdminConfig>()\n            .eq(AdminConfig::getId, moduleSetting.getId())\n    );\n    if (adminConfig == null) {\n        return Result.error(AdminCodeEnum.ADMIN_CONFIG_NOT_FOUND);\n    }\n    if (AdminModuleEnum.CRM.getCode().equals(adminConfig.getModule())) {\n        return Result.error(AdminCodeEnum.ADMIN_CONFIG_CRM_MODULE_CANNOT_BE_UPDATED);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.updateById(adminConfig);\n    return Result.success();\n}", "CodeBleu_score": 60.367471865141255}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\n    // Get the user's configuration by the custom key\n    AdminUserConfig adminUserConfig = adminUserConfigService.getOne(new LambdaQueryWrapper<AdminUserConfig>().eq(AdminUserConfig::getCustomKey, customKey));\n    if (adminUserConfig == null) {\n        // If the configuration does not exist, create a new one\n        adminUserConfig = new AdminUserConfig();\n        adminUserConfig.setCustomKey(customKey);\n        adminUserConfig.setCustomValue(json.toJSONString());\n        adminUserConfigService.save(adminUserConfig);\n    } else {\n        // If the configuration exists, update its value\n        adminUserConfig.setCustomValue(json.toJSONString());\n        adminUserConfigService.updateById(adminUserConfig);\n    }\n\n    return Result.success();\n}", "CodeBleu_score": 54.41960870464426}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t        if (json == null || json.size() == 0) {\n            return Result.error(AdminCodeEnum.CUSTOM_SETTING_ERROR);\n        }\n        AdminUserConfig adminUserConfig = adminUserConfigService.getOne(new LambdaQueryWrapper<AdminUserConfig>().eq(AdminUserConfig::getCustomKey, customKey));\n        if (adminUserConfig == null) {\n            adminUserConfig = new AdminUserConfig();\n            adminUserConfig.setCustomKey(customKey);\n            adminUserConfig.setCustomValue(json.toJSONString());\n            adminUserConfig.setUserId(UserUtil.getUserId());\n            adminUserConfigService.save(adminUserConfig);\n        } else {\n            adminUserConfig.setCustomValue(json.toJSONString());\n            adminUserConfigService.updateById(adminUserConfig);\n        }\n        return Result.success();\n    }", "CodeBleu_score": 50.931491561980266}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t    try {\n        AdminUserConfig adminUserConfig = adminUserConfigService.getOne(new LambdaQueryWrapper<AdminUserConfig>().eq(AdminUserConfig::getCustomKey,customKey));\n        if(adminUserConfig != null){\n            adminUserConfig.setCustomValue(json.toString());\n            adminUserConfigService.updateById(adminUserConfig);\n        }else{\n            adminUserConfig = new AdminUserConfig();\n            adminUserConfig.setCustomKey(customKey);\n            adminUserConfig.setCustomValue(json.toString());\n            adminUserConfigService.save(adminUserConfig);\n        }\n        return Result.success(null);\n    } catch (Exception e) {\n        e.printStackTrace();\n        return Result.error(e.getMessage());\n    }\n}", "CodeBleu_score": 50.21249021783814}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser adminUser = adminUserService.getById(userId);\n    if (adminUser == null) {\n        return Result.failure(AdminCodeEnum.USER_NOT_FOUND);\n    }\n    // \u8bbe\u7f6e\u90e8\u95e8\u540d\u79f0\n    AdminDepartment department = adminDepartmentService.getById(adminUser.getDepartmentId());\n    if (department != null) {\n        adminUser.setDepartmentName(department.getName());\n    }\n    // \u8bbe\u7f6e\u89d2\u8272\u540d\u79f0\n    List<AdminRole> roles = adminRoleService.list(new LambdaQueryWrapper<AdminRole>().eq(AdminRole::getId, adminUser.getRoleId()));\n    if (roles != null && !roles.isEmpty()) {\n        adminUser.setRoleName(roles.get(0).getName());\n    }\n    // \u8bbe\u7f6e\u7528\u6237\u72b6\u6001\n    AdminUserStatusEnum statusEnum = AdminUserStatusEnum.getByCode(adminUser.getStatus());\n    if (statusEnum != null) {\n        adminUser.setStatusName(statusEnum.getName());\n    }\n    // \u8bbe\u7f6e\u7528\u6237\u7c7b\u578b\n    AdminUserTypeEnum typeEnum = AdminUserTypeEnum.getByCode(adminUser.getType());\n    if (typeEnum != null) {\n        adminUser.setTypeName(typeEnum.getName());\n    }\n    // \u8bbe\u7f6e\u7528\u6237\u6027\u522b\n    AdminUserGenderEnum genderEnum = AdminUserGenderEnum.getByCode(adminUser.getGender());\n    if (genderEnum != null) {\n        adminUser.setGenderName(genderEnum.getName());\n    }\n    // \u8bbe\u7f6e\u7528\u6237\u5934\u50cf\n    if (adminUser.getAvatar() != null) {\n        adminUser.setAvatarUrl(adminUser.getAvatar().getUrl());\n    }\n    // \u8bbe\u7f6e\u7528\u6237\u90ae\u7bb1\n    if (adminUser.getEmail() != null) {\n        adminUser.setEmail(adminUser.getEmail().getEmail());\n    }\n    // \u8bbe\u7f6e\u7528\u6237\u624b\u673a\u53f7\n    if (adminUser.getMobile() != null) {", "CodeBleu_score": 39.14291736244309}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    // \u83b7\u53d6\u7528\u6237\u4fe1\u606f\n    AdminUser user = adminUserService.getById(userId);\n    // \u83b7\u53d6\u7528\u6237\u90e8\u95e8\u4fe1\u606f\n    AdminDepartment department = adminDepartmentService.getById(user.getDepartmentId());\n    // \u8bbe\u7f6e\u90e8\u95e8\u540d\u79f0\n    user.setDepartmentName(department.getName());\n    // \u6e05\u9664\u5bc6\u7801\u548c\u76d0\u503c\n    user.setPassword(null);\n    user.setSalt(null);\n    return Result.success(user);\n}", "CodeBleu_score": 46.577364100558015}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser adminUser = adminUserService.getById(userId);\n    if (adminUser == null) {\n        return Result.fail(AdminCodeEnum.USER_NOT_EXIST);\n    }\n    AdminUserVO adminUserVO = new AdminUserVO();\n    BeanUtil.copyProperties(adminUser, adminUserVO);\n    AdminUserConfig adminUserConfig = adminUserConfigService.getOne(new LambdaQueryWrapper<AdminUserConfig>().eq(AdminUserConfig::getUserId, userId));\n    if (adminUserConfig != null) {\n        BeanUtil.copyProperties(adminUserConfig, adminUserVO);\n    }\n    return Result.success(adminUserVO);\n}", "CodeBleu_score": 41.09128916645695}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t        AdminUser user = UserUtil.getUser();\n        if (user == null) {\n            throw new NoLoginException();\n        }\n        AdminUserService adminUserService = ApplicationContextHolder.getBean(AdminUserService.class);\n        LambdaQueryWrapper<AdminUser> queryWrapper = new LambdaQueryWrapper<AdminUser>()\n                .eq(AdminUser::getId, user.getId())\n                .eq(AdminUser::getStatus, 1);\n        AdminUser adminUser = adminUserService.getOne(queryWrapper);\n        if (adminUser == null) {\n            return Result.error(AdminCodeEnum.USER_NOT_EXIST);\n        }\n        if (adminUser.getReadNotice() == 1) {\n            return Result.success();\n        }\n        adminUser.setReadNotice(1);\n        adminUserService.updateById(adminUser);\n        return Result.success();\n    }", "CodeBleu_score": 40.1025114600644}, {"code": " public Result readNotice() {\n\t  try {\n   AdminUser user = UserUtil.getUser();\n   AdminUserService adminUserService = ApplicationContextHolder.getBean(AdminUserService.class);\n   LambdaQueryWrapper<AdminUserConfig> queryWrapper = new LambdaQueryWrapper<>();\n   queryWrapper.eq(AdminUserConfig::getUserId, user.getId());\n   queryWrapper.eq(AdminUserConfig::getConfigKey, \"readNotice\");\n   AdminUserConfig adminUserConfig = adminUserService.getOne(queryWrapper);\n   if (adminUserConfig == null) {\n    adminUserConfig = new AdminUserConfig();\n    adminUserConfig.setUserId(user.getId());\n    adminUserConfig.setConfigKey(\"readNotice\");\n    adminUserConfig.setConfigValue(\"1\");\n    adminUserService.save(adminUserConfig);\n   } else {\n    adminUserConfig.setConfigValue(\"1\");\n    adminUserService.updateById(adminUserConfig);\n   }\n   return Result.success();\n  } catch (Exception e) {\n   return Result.error(e);\n  }\n }", "CodeBleu_score": 45.53668821585091}, {"code": " public Result readNotice() {\n\t        AdminUser adminUser = UserCacheUtil.getUser();\n        if (adminUser == null) {\n            throw new NoLoginException();\n        }\n        AdminUserConfig adminUserConfig = adminUserConfigService.getOne(new LambdaQueryWrapper<AdminUserConfig>().eq(AdminUserConfig::getAdminUserId, adminUser.getId()));\n        if (adminUserConfig == null) {\n            adminUserConfig = new AdminUserConfig();\n            adminUserConfig.setAdminUserId(adminUser.getId());\n            adminUserConfig.setReadNotice(0);\n            adminUserConfigService.save(adminUserConfig);\n        } else {\n            adminUserConfig.setReadNotice(1);\n            adminUserConfigService.updateById(adminUserConfig);\n        }\n        return Result.success();\n    }", "CodeBleu_score": 46.612992783728586}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    AdminConfig adminConfig = adminConfigMapper.selectOne(new QueryWrapper<AdminConfig>().lambda().eq(AdminConfig::getConfigName, AdminConst.ADMIN_CONFIG_COMPANY_INFO));\n    if (Objects.isNull(adminConfig)) {\n        adminConfig = new AdminConfig();\n        adminConfig.setConfigName(AdminConst.ADMIN_CONFIG_COMPANY_INFO);\n        adminConfig.setConfigValue(JSON.toJSONString(adminCompanyBO));\n        adminConfigMapper.insert(adminConfig);\n    } else {\n        adminConfig.setConfigValue(JSON.toJSONString(adminCompanyBO));\n        adminConfigMapper.updateById(adminConfig);\n    }\n}", "CodeBleu_score": 47.197290010159136}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    AdminConfig adminConfig = adminConfigService.getOne(new QueryWrapper<AdminConfig>().eq(\"name\", AdminConst.ADMIN_CONFIG_COMPANY_INFO));\n    if (Objects.isNull(adminConfig)) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(AdminConst.ADMIN_CONFIG_COMPANY_INFO);\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        adminConfigService.save(adminConfig);\n    } else {\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        adminConfigService.updateById(adminConfig);\n    }\n}", "CodeBleu_score": 47.80642626638477}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    AdminConfig adminConfig = adminConfigMapper.selectOne(new QueryWrapper<AdminConfig>().eq(\"name\", \"companyInfo\"));\n    if (Objects.isNull(adminConfig)) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(\"companyInfo\");\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        adminConfigMapper.insert(adminConfig);\n    } else {\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        adminConfigMapper.updateById(adminConfig);\n    }\n}", "CodeBleu_score": 51.14305385902488}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\t    AdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n    adminCompanyBO.setCompanyId(UserUtil.getCompanyId());\n    adminCompanyBO.setCompanyName(UserUtil.getCompanyName());\n    adminCompanyBO.setCompanyLogo(UserUtil.getCompanyLogo());\n    adminCompanyBO.setCompanyLogoUrl(UserUtil.getCompanyLogoUrl());\n    adminCompanyBO.setCompanyLogoUrlSmall(UserUtil.getCompanyLogoUrlSmall());\n    adminCompanyBO.setCompanyLogoUrlLarge(UserUtil.getCompanyLogoUrlLarge());\n    adminCompanyBO.setCompanyLogoUrlMedium(UserUtil.getCompanyLogoUrlMedium());\n    adminCompanyBO.setCompanyLogoUrlThumbnail(UserUtil.getCompanyLogoUrlThumbnail());\n    adminCompanyBO.setCompanyLogoUrlOriginal(UserUtil.getCompanyLogoUrlOriginal());\n    adminCompanyBO.setCompanyLogoUrlWatermark(UserUtil.getCompanyLogoUrlWatermark());\n    adminCompanyBO.setCompanyLogoUrlWatermarkSmall(UserUtil.getCompanyLogoUrlWatermarkSmall());\n    adminCompanyBO.setCompanyLogoUrlWatermarkLarge(UserUtil.getCompanyLogoUrlWatermarkLarge());\n    adminCompanyBO.setCompanyLogoUrlWatermarkMedium(UserUtil.getCompanyLogoUrlWatermarkMedium());\n    adminCompanyBO.setCompanyLogoUrlWatermarkThumbnail(UserUtil.getCompanyLogoUrlWatermarkThumbnail());\n    adminCompanyBO.setCompanyLogoUrlWatermarkOriginal(UserUtil.getCompanyLogoUrlWatermarkOriginal());\n    adminCompanyBO.setCompanyLogoUrlWatermarkWatermark(UserUtil.getCompanyLogoUrlWatermarkWatermark());\n    adminCompanyBO.setCompanyLogoUrlWatermarkWatermarkSmall(UserUtil.getCompanyLogoUrlWatermarkWatermarkSmall());\n    adminCompanyBO.setCompanyLogoUrlWatermarkWatermarkLarge(UserUtil.getCompanyLogoUrlWat", "CodeBleu_score": 15.480510264491615}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t    AdminConfig adminConfig = adminConfigMapper.selectOne(new QueryWrapper<AdminConfig>().lambda().eq(AdminConfig::getKey, AdminConst.ADMIN_CONFIG_KEY));\n    AdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n    if (adminConfig != null) {\n        adminCompanyBO = JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\n    }\n    return adminCompanyBO;\n}", "CodeBleu_score": 70.88883229140535}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t    AdminConfig adminConfig = adminConfigMapper.selectOne(new QueryWrapper<AdminConfig>().eq(\"config_key\", AdminConst.ADMIN_CONFIG_KEY));\n    if (Objects.isNull(adminConfig)) {\n        return new AdminCompanyBO();\n    }\n    return JSON.parseObject(adminConfig.getConfigValue(), AdminCompanyBO.class);\n}", "CodeBleu_score": 35.927671817613046}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t    // Create a list of AdminConfig objects\n    List<AdminConfig> adminConfigList = new ArrayList<>();\n    stringList.forEach(s -> {\n        AdminConfig adminConfig = new AdminConfig();\n        adminConfig.setConfigName(AdminConst.LOG_WELCOME_SPEECH_CONFIG_NAME);\n        adminConfig.setConfigValue(s);\n        adminConfigList.add(adminConfig);\n    });\n\n    // Remove existing configurations with the specified log configuration name\n    adminConfigMapper.delete(new QueryWrapper<AdminConfig>().eq(\"config_name\", AdminConst.LOG_WELCOME_SPEECH_CONFIG_NAME));\n\n    // Save the new list of configurations in batch\n    adminConfigMapper.insertBatch(adminConfigList);\n}", "CodeBleu_score": 46.48388675308907}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t    // remove existing configurations with the specified log configuration name\n    adminConfigMapper.delete(new QueryWrapper<AdminConfig>().lambda().eq(AdminConfig::getConfigName, AdminConst.LOG_WELCOME_SPEECH));\n\n    // create a new list of configurations\n    List<AdminConfig> adminConfigList = new ArrayList<>();\n    stringList.forEach(string -> {\n        AdminConfig adminConfig = new AdminConfig();\n        adminConfig.setConfigName(AdminConst.LOG_WELCOME_SPEECH);\n        adminConfig.setConfigValue(string);\n        adminConfigList.add(adminConfig);\n    });\n\n    // save the new list of configurations in batch\n    adminConfigMapper.insertBatch(adminConfigList);\n}", "CodeBleu_score": 44.530118905420146}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t        List<AdminConfig> configList = new ArrayList<>();\n        for (String string : stringList) {\n            AdminConfig config = new AdminConfig();\n            config.setConfigName(AdminConst.LOG_WELCOME_SPEECH_CONFIG_NAME);\n            config.setConfigValue(string);\n            configList.add(config);\n        }\n        adminConfigMapper.delete(new QueryWrapper<AdminConfig>().eq(\"config_name\", AdminConst.LOG_WELCOME_SPEECH_CONFIG_NAME));\n        adminConfigMapper.insertBatch(configList);\n    }", "CodeBleu_score": 52.94991485876193}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    AdminUser adminUser = adminUserService.getOne(new QueryWrapper<AdminUser>()\n            .eq(\"user_name\", adminInitDataBO.getUserName()));\n    if (adminUser == null) {\n        throw new CrmException(AdminCodeEnum.ADMIN_USER_NOT_EXIST);\n    }\n    String password = adminInitDataBO.getPassword();\n    String salt = adminUser.getSalt();\n    String passwordEncode = AuthPasswordUtil.encode(password, salt);\n    if (!passwordEncode.equals(adminUser.getPassword())) {\n        throw new CrmException(AdminCodeEnum.ADMIN_USER_PASSWORD_ERROR);\n    }\n    String token = RandomUtil.randomString(16);\n    adminUser.setToken(token);\n    adminUserService.updateById(adminUser);\n    return token;\n}", "CodeBleu_score": 42.590050646170006}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    String userName = adminInitDataBO.getUserName();\n    String password = adminInitDataBO.getPassword();\n\n    // \u9a8c\u8bc1\u5bc6\u7801\n    String salt = AuthPasswordUtil.getSaltByUserName(userName);\n    String passwordEncode = AuthPasswordUtil.encodePassword(password, salt);\n\n    AdminUser adminUser = adminUserService.getOne(new QueryWrapper<AdminUser>().eq(\"user_name\", userName));\n    if (Objects.isNull(adminUser)) {\n        throw new CrmException(AdminCodeEnum.ADMIN_USER_NOT_EXIST);\n    }\n\n    String storedPassword = adminUser.getPassword();\n    if (!passwordEncode.equals(storedPassword)) {\n        throw new CrmException(AdminCodeEnum.ADMIN_PASSWORD_ERROR);\n    }\n\n    // \u751f\u6210\u968f\u673a\u7684access_token\n    String accessToken = RandomUtil.randomString(32);\n    adminUser.setAccessToken(accessToken);\n    adminUser.setLastLoginTime(System.currentTimeMillis());\n    adminUser.setLastLoginIp(adminInitDataBO.getIp());\n    adminUserService.updateById(adminUser);\n\n    return accessToken;\n}", "CodeBleu_score": 41.98567514973044}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    AdminUser adminUser = adminUserService.getOne(new QueryWrapper<AdminUser>().eq(\"username\", adminInitDataBO.getUsername()));\n    if (adminUser == null) {\n        throw new CrmException(AdminCodeEnum.ADMIN_USER_NOT_EXIST);\n    }\n    if (adminUser.getStatus() == 0) {\n        throw new CrmException(AdminCodeEnum.ADMIN_USER_STATUS_ERROR);\n    }\n    if (!AuthPasswordUtil.verifyPassword(adminInitDataBO.getPassword(), adminUser.getSalt(), adminUser.getPassword())) {\n        throw new CrmException(AdminCodeEnum.ADMIN_USER_PASSWORD_ERROR);\n    }\n    // \u751f\u6210token\n    String token = UserUtil.generateToken(adminUser.getId(), adminUser.getUsername());\n    // \u5b58\u5165redis\n    adminUserService.setToken(adminUser.getId(), token);\n    // \u5b58\u5165\u7f13\u5b58\n    adminUserService.setAdminUser(adminUser);\n    return token;\n}", "CodeBleu_score": 35.57886970697018}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\t    String userId = UserUtil.getUserId();\n    String key = AdminCacheKey.getInitAuthKey(userId);\n    List<String> list = redisTemplate.opsForList().range(key, 0, -1);\n    if (CollUtil.isNotEmpty(list)) {\n        if (list.contains(AdminConst.INIT_AUTH_URL)) {\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 51.01960543190886}, {"code": "private boolean verifyInitAuth(){\n\t    String userId = UserUtil.getUserId();\n    String key = AdminCacheKey.getAdminInitAuthKey(userId);\n    List<String> initAuthUrls = redisTemplate.opsForList().range(key, 0, -1);\n    String currentUrl = request.getRequestURI();\n    return initAuthUrls.contains(currentUrl);\n}", "CodeBleu_score": 48.06138111478294}, {"code": "private boolean verifyInitAuth(){\n\t    String userId = UserUtil.getUserId();\n    String key = AdminCacheKey.INIT_AUTH_PREFIX.getKey() + userId;\n    List<String> initAuthUrls = adminCacheService.getList(key);\n    if (initAuthUrls == null || initAuthUrls.isEmpty()) {\n        return false;\n    }\n    String currentUrl = UserUtil.getCurrentUrl();\n    if (initAuthUrls.contains(currentUrl)) {\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 47.98661887267909}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    // Create a list of AdminRoleMenu objects\n    List<AdminRoleMenu> adminRoleMenuList = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n        adminRoleMenu.setRoleId(roleId);\n        adminRoleMenu.setMenuId(menuId);\n        adminRoleMenuList.add(adminRoleMenu);\n    }\n    // Save the list of role-menu associations in batches\n    adminRoleMenuMapper.batchSave(adminRoleMenuList);\n}", "CodeBleu_score": 70.68428341469371}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    List<AdminRoleMenu> list = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n        adminRoleMenu.setRoleId(roleId);\n        adminRoleMenu.setMenuId(menuId);\n        list.add(adminRoleMenu);\n    }\n    adminRoleMenuMapper.insertList(list);\n}", "CodeBleu_score": 64.38045914459833}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    if (roleId == null || menuIdList == null) {\n        return;\n    }\n    List<AdminRoleMenu> list = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n        adminRoleMenu.setRoleId(roleId);\n        adminRoleMenu.setMenuId(menuId);\n        list.add(adminRoleMenu);\n    }\n    adminRoleMenuMapper.insertList(list);\n}", "CodeBleu_score": 63.13906754708133}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\t    //Retrieve the log index\n    String index = \"sys_log\";\n    //Convert the log object to a map\n    Map<String, Object> map = BeanUtil.beanToMap(sysLog,false,true);\n    //Format the creation time\n    DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n    LocalDate localDate = LocalDate.now();\n    String createTime = localDate.format(dateTimeFormatter);\n    map.put(\"create_time\", createTime);\n    //Remove the ID\n    map.remove(\"id\");\n    //Create an index request\n    IndexRequest indexRequest = new IndexRequest(index);\n    //Set the index name\n    indexRequest.id(sysLog.getId().toString());\n    //Set the source\n    indexRequest.source(map, XContentType.JSON);\n    //Submit the index request to the Elasticsearch client\n    try {\n        IndexResponse indexResponse = restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n    } catch (IOException e) {\n        log.error(\"[saveSysLog] \u7cfb\u7edf\u65e5\u5fd7\u5b58\u50a8\u5931\u8d25\uff0c\u9519\u8bef\u4fe1\u606f\uff1a{}\", e.getMessage());\n    }\n}", "CodeBleu_score": 53.88463542013325}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t    // \u83b7\u53d6\u7d22\u5f15\n    String index = \"syslog-\" + DateUtil.format(LocalDate.now(), \"yyyy-MM-dd\");\n    // \u5c06\u65e5\u5fd7\u5bf9\u8c61\u8f6c\u5316\u4e3aMap\n    Map<String, Object> map = BeanUtil.beanToMap(sysLog);\n    // \u683c\u5f0f\u5316\u521b\u5efa\u65f6\u95f4\n    map.put(\"createTime\", DateUtil.format(sysLog.getCreateTime(), \"yyyy-MM-dd HH:mm:ss\"));\n    // \u5220\u9664ID\n    map.remove(\"id\");\n    // \u521b\u5efa\u7d22\u5f15\u8bf7\u6c42\n    IndexRequest indexRequest = new IndexRequest(index)\n            .source(map, XContentType.JSON);\n    // \u63d0\u4ea4\u8bf7\u6c42\n    try {\n        IndexResponse indexResponse = highLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n        log.info(\"\u7d22\u5f15\u6210\u529f\uff1a{}\", indexResponse.getId());\n    } catch (IOException e) {\n        log.error(\"\u7d22\u5f15\u5931\u8d25\uff1a{}\", e.getMessage());\n    }\n}", "CodeBleu_score": 54.98012455425955}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t    // 1. Get the log index\n    String index = getLogIndex();\n    // 2. Convert the log object to a map\n    Map<String, Object> logMap = BeanUtil.beanToMap(sysLog);\n    // 3. Format the creation time\n    logMap.put(\"createTime\", DateUtil.format(sysLog.getCreateTime(), \"yyyy-MM-dd HH:mm:ss\"));\n    // 4. Remove the ID\n    logMap.remove(\"id\");\n    // 5. Create an index request\n    IndexRequest request = new IndexRequest(index).source(logMap, XContentType.JSON);\n    // 6. Submit the request to the Elasticsearch client\n    try {\n        IndexResponse response = client.index(request, RequestOptions.DEFAULT);\n        log.info(\"save sys log success, index: {}, id: {}\", response.getIndex(), response.getId());\n    } catch (IOException e) {\n        log.error(\"save sys log error\", e);\n    }\n}", "CodeBleu_score": 53.67446231931709}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t    // Create a search source builder\n    SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();\n    // Set the page number and the number of results per page\n    sourceBuilder.size(querySysLogBO.getPageSize());\n    sourceBuilder.from((querySysLogBO.getPageNo() - 1) * querySysLogBO.getPageSize());\n    // Set the sorting criteria\n    sourceBuilder.sort(\"createTime\", SortOrder.DESC);\n    // Set the search criteria\n    BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n    if (StrUtil.isNotBlank(querySysLogBO.getTitle())) {\n        boolQueryBuilder.must(QueryBuilders.matchQuery(\"title\", querySysLogBO.getTitle()));\n    }\n    if (StrUtil.isNotBlank(querySysLogBO.getDescription())) {\n        boolQueryBuilder.must(QueryBuilders.matchQuery(\"description\", querySysLogBO.getDescription()));\n    }\n    if (StrUtil.isNotBlank(querySysLogBO.getUsername())) {\n        boolQueryBuilder.must(QueryBuilders.matchQuery(\"username\", querySysLogBO.getUsername()));\n    }\n    if (StrUtil.isNotBlank(querySysLogBO.getUserId())) {\n        boolQueryBuilder.must(QueryBuilders.matchQuery(\"userId\", querySysLogBO.getUserId()));\n    }\n    if (StrUtil.isNotBlank(querySysLogBO.getType())) {\n        boolQueryBuilder.must(QueryBuilders.matchQuery(\"type\", querySysLogBO.getType()));\n    }\n    if (StrUtil.isNotBlank(querySysLogBO.getResult())) {\n        boolQueryBuilder.must(QueryBuilders.matchQuery(\"result\", querySysLogBO.getResult()));\n    }\n    if (StrUtil.isNotBlank(querySysLogBO.getStatus())) {\n        boolQueryBuilder.must(QueryBuilders.matchQuery(\"status\", querySysLogBO.getStatus()));\n    }\n    if (StrUtil.isNotBlank(querySysLogBO.getStartDate())) {\n", "CodeBleu_score": 26.03070542207297}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t    BasePage<SysLog> basePage = new BasePage<>(querySysLogBO.getPageNum(), querySysLogBO.getPageSize());\n    SearchRequest searchRequest = new SearchRequest();\n    SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n    searchRequest.source(searchSourceBuilder);\n    searchSourceBuilder.query(QueryBuilders.matchAllQuery());\n    searchSourceBuilder.sort(\"createTime\", SortOrder.DESC);\n    searchSourceBuilder.fetchSource(false);\n    searchSourceBuilder.fetchSource(\"id\", \"type\", \"createTime\", \"description\", \"ip\", \"userName\", \"userAgent\", \"url\", \"method\", \"status\", \"errorMsg\", \"errorCode\");\n    searchRequest.indices(\"sys_log\");\n    try {\n        SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n        SearchHits searchHits = searchResponse.getHits();\n        SearchHit[] hits = searchHits.getHits();\n        for (SearchHit hit : hits) {\n            Map<String, Object> sourceAsMap = hit.getSourceAsMap();\n            SysLog sysLog = new SysLog();\n            BeanUtil.copyProperties(sourceAsMap, sysLog);\n            basePage.getList().add(sysLog);\n        }\n        basePage.setTotal(searchHits.getTotalHits().value);\n    } catch (IOException e) {\n        log.error(\"querySysLogPageList error:\", e);\n    }\n    return basePage;\n}", "CodeBleu_score": 54.465083475738105}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t    try {\n        // Create a search request and set the search criteria\n        SearchRequest searchRequest = new SearchRequest();\n        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n        searchSourceBuilder.query(QueryBuilders.matchAllQuery());\n        searchSourceBuilder.sort(\"createTime\", SortOrder.DESC);\n        searchSourceBuilder.fetchSource(false);\n        searchRequest.source(searchSourceBuilder);\n        // Execute the search request\n        SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);\n        // Map the search results to SysLog objects\n        List<SysLog> sysLogs = new ArrayList<>();\n        SearchHits searchHits = searchResponse.getHits();\n        SearchHit[] hits = searchHits.getHits();\n        for (SearchHit hit : hits) {\n            SysLog sysLog = new SysLog();\n            Map<String, Object> sourceAsMap = hit.getSourceAsMap();\n            BeanUtil.copyProperties(sourceAsMap, sysLog);\n            sysLogs.add(sysLog);\n        }\n        // Populate the BasePage object with the results\n        BasePage<SysLog> basePage = new BasePage<>();\n        basePage.setTotal(searchHits.getTotalHits().value);\n        basePage.setPageSize(querySysLogBO.getPageSize());\n        basePage.setPageNum(querySysLogBO.getPageNum());\n        basePage.setData(sysLogs);\n        return basePage;\n    } catch (IOException e) {\n        log.error(\"Query syslog error: {}\", e.getMessage());\n        return null;\n    }\n}", "CodeBleu_score": 55.12422871258911}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\t  const writer = fs.createWriteStream(dest);\n\n  const response = await axios({\n    url,\n    method: 'GET',\n    responseType: 'stream'\n  });\n\n  response.data.pipe(writer);\n\n  return new Promise((resolve, reject) => {\n    writer.on('finish', resolve);\n    writer.on('error', reject);\n  });\n}", "CodeBleu_score": 36.88118080593875}, {"code": "async function downloadFile(url, dest){\n\t  return new Promise((resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n    https.get(url, response => {\n      response.pipe(file);\n      file.on('finish', () => {\n        file.close();\n        resolve();\n      });\n    }).on('error', err => {\n      fs.unlink(dest);\n      reject(err);\n    });\n  });\n}", "CodeBleu_score": 59.80342341031297}, {"code": "async function downloadFile(url, dest){\n\t  return new Promise((resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n    https.get(url, (response) => {\n      if (response.statusCode === 200) {\n        response.pipe(file);\n      } else {\n        fs.unlink(dest, () => {\n          reject(new Error(`${response.statusCode}: ${response.statusMessage}`));\n        });\n      }\n      file.on('finish', () => {\n        file.close();\n        resolve();\n      });\n      file.on('error', (err) => {\n        fs.unlink(dest, () => {\n          reject(err);\n        });\n      });\n    }).on('error', (err) => {\n      fs.unlink(dest, () => {\n        reject(err);\n      });\n    });\n  });\n}", "CodeBleu_score": 58.2215060345809}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t    // Check if the module has already been processed\n    if (circularDependencyCheckSet.contains(module.getId())) {\n        return Flux.empty();\n    }\n\n    // Add the module to the circular dependency check set\n    circularDependencyCheckSet.add(module.getId());\n\n    // Get the dependent modules\n    return getDependentModulesFromDsl(module.getDsl())\n        // Filter out already processed modules\n        .filter(m -> !circularDependencyCheckSet.contains(m.getId()))\n        // Get the dependent modules recursively\n        .flatMap(m -> getDependentModules(m, circularDependencyCheckSet))\n        // Add the module to the result\n        .concatWith(Mono.just(module))\n        // Remove the module from the circular dependency check set\n        .doFinally(signal -> circularDependencyCheckSet.remove(module.getId()));\n}", "CodeBleu_score": 49.229665508872856}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t    List<String> dependentModules = getDependentModulesFromDsl(module.getDsl());\n    if (dependentModules.isEmpty()) {\n        return Flux.empty();\n    }\n\n    return Flux.fromIterable(dependentModules)\n        .filter(moduleId -> !circularDependencyCheckSet.contains(moduleId))\n        .flatMap(moduleId -> getById(moduleId)\n            .doOnError(throwable -> log.warn(\"Error while getting dependent module: \" + moduleId, throwable))\n            .onErrorResume(throwable -> Mono.empty()))\n        .doOnNext(dependentModule -> circularDependencyCheckSet.add(dependentModule.getId()))\n        .flatMap(dependentModule -> getDependentModules(dependentModule, circularDependencyCheckSet));\n}", "CodeBleu_score": 50.94047004535827}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t        return Flux.fromIterable(getDependentModulesFromDsl(module.getDsl()))\n                .filter(dependentModuleId -> !circularDependencyCheckSet.contains(dependentModuleId))\n                .flatMap(dependentModuleId -> {\n                    circularDependencyCheckSet.add(dependentModuleId);\n                    return getById(dependentModuleId)\n                            .flatMapMany(dependentModule -> {\n                                if (dependentModule.getStatus() == ApplicationStatus.DELETED) {\n                                    log.warn(\"Dependent module {} is deleted\", dependentModuleId);\n                                    return Flux.empty();\n                                }\n                                return getDependentModules(dependentModule, circularDependencyCheckSet);\n                            });\n                });\n    }", "CodeBleu_score": 46.36379991689347}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        Object value = entry.getValue();\n        if (value instanceof Map) {\n            doGetDependentModules((Map<?, ?>) value, dependentModuleIds);\n        } else if (value instanceof List) {\n            for (Object listValue : (List<?>) value) {\n                if (listValue instanceof Map) {\n                    doGetDependentModules((Map<?, ?>) listValue, dependentModuleIds);\n                }\n            }\n        } else if (value instanceof String) {\n            String componentType = (String) value;\n            if (StringUtils.equals(componentType, \"module\")) {\n                String appId = (String) entry.getKey();\n                if (StringUtils.isNotBlank(appId)) {\n                    dependentModuleIds.add(appId);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 45.18744980042162}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        Object value = entry.getValue();\n        if (value instanceof Map) {\n            doGetDependentModules((Map<?, ?>) value, dependentModuleIds);\n        } else if (value instanceof List) {\n            for (Object listValue : (List<?>) value) {\n                if (listValue instanceof Map) {\n                    doGetDependentModules((Map<?, ?>) listValue, dependentModuleIds);\n                }\n            }\n        } else if (value instanceof String) {\n            String componentType = (String) value;\n            if (componentType.equals(\"module\")) {\n                String appId = (String) map.get(\"appId\");\n                if (StringUtils.isNotBlank(appId)) {\n                    dependentModuleIds.add(appId);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 49.57688016605674}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    if (map == null) {\n        return;\n    }\n    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        Object value = entry.getValue();\n        if (value instanceof Map) {\n            doGetDependentModules((Map<?, ?>) value, dependentModuleIds);\n        } else if (value instanceof List) {\n            doGetDependentModules((List<?>) value, dependentModuleIds);\n        } else if (value instanceof String) {\n            String valueStr = (String) value;\n            if (StringUtils.isNotBlank(valueStr) && \"module\".equals(entry.getKey())) {\n                dependentModuleIds.add(valueStr);\n            }\n        }\n    }\n}", "CodeBleu_score": 35.89412189937692}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t    log.info(\"createAsset: {}\", dataBuffer.toString());\n    log.info(\"createAsset: {}\", srcContentType.toString());\n\n    // Create a new Asset object\n    Asset asset = new Asset();\n\n    // Get the image data from the DataBuffer\n    byte[] imageData = new byte[dataBuffer.readableByteCount()];\n    dataBuffer.read(imageData);\n\n    // Create a BufferedImage from the image data\n    BufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(imageData));\n\n    // Resize the image if createThumbnail is true\n    if (createThumbnail) {\n        // Get the thumbnail size from the config\n        int thumbnailWidth = ConfigCenter.get(Conf.THUMBNAIL_WIDTH);\n        int thumbnailHeight = ConfigCenter.get(Conf.THUMBNAIL_HEIGHT);\n\n        // Resize the image\n        BufferedImage thumbnail = new BufferedImage(thumbnailWidth, thumbnailHeight, bufferedImage.getType());\n        thumbnail.getGraphics().drawImage(bufferedImage, 0, 0, thumbnailWidth, thumbnailHeight, null);\n\n        // Set the thumbnail content type to JPEG\n        asset.setContentType(MediaType.IMAGE_JPEG);\n\n        // Set the thumbnail image data\n        imageData = toByteArray(thumbnail);\n    } else {\n        // Set the thumbnail content type to the original content type\n        asset.setContentType(srcContentType);\n    }\n\n    // Set the asset image data\n    asset.setImageData(imageData);\n\n    return asset;\n}", "CodeBleu_score": 48.58478638803713}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    DataBufferUtils.write(dataBuffer, baos);\n\n    // Read image data\n    byte[] bytes = baos.toByteArray();\n\n    // Resize image\n    if (createThumbnail) {\n        Image image = ImageIO.read(new ByteArrayInputStream(bytes));\n        int width = image.getWidth(null);\n        int height = image.getHeight(null);\n\n        // Calculate new width and height\n        int newWidth = (int) (width * 0.5);\n        int newHeight = (int) (height * 0.5);\n\n        // Create new image\n        BufferedImage resizedImage = new BufferedImage(newWidth, newHeight, BufferedImage.TYPE_INT_RGB);\n        Graphics2D g2d = resizedImage.createGraphics();\n        g2d.setColor(Color.WHITE);\n        g2d.fillRect(0, 0, newWidth, newHeight);\n        g2d.drawImage(image, 0, 0, newWidth, newHeight, null);\n        g2d.dispose();\n\n        // Convert to byte array\n        ByteArrayOutputStream baos2 = new ByteArrayOutputStream();\n        ImageIO.write(resizedImage, \"jpg\", baos2);\n        bytes = baos2.toByteArray();\n    }\n\n    // Set content type\n    String contentType = srcContentType.toString();\n    if (!createThumbnail) {\n        contentType = srcContentType.getType();\n    }\n\n    // Create asset\n    Asset asset = new Asset();\n    asset.setContentType(contentType);\n    asset.setData(bytes);\n\n    return asset;\n}", "CodeBleu_score": 38.216348998986355}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t    Image image = ImageIO.read(dataBuffer.asInputStream());\n    int width = image.getWidth(null);\n    int height = image.getHeight(null);\n\n    // Create a new image of the same type as the original image\n    BufferedImage bufferedImage = new BufferedImage(width, height, image.getType());\n\n    // Copy the pixels from the original image to the new image\n    bufferedImage.getGraphics().drawImage(image, 0, 0, null);\n\n    // If the image is not a thumbnail, then we need to retain the original content type\n    if (!createThumbnail) {\n        srcContentType = MediaType.valueOf(srcContentType.toString());\n    }\n\n    // If the image is a thumbnail, then we need to resize it\n    if (createThumbnail) {\n        // Resize the image to fit within the thumbnail size\n        bufferedImage = resizeImage(bufferedImage, width, height);\n    }\n\n    // Create a new Asset object with the new image data and content type\n    Asset asset = new Asset();\n    asset.setContentType(MediaType.IMAGE_JPEG_VALUE);\n    asset.setImageData(toByteArray(bufferedImage));\n\n    return asset;\n}", "CodeBleu_score": 39.16923550798616}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return getAssetById(assetId)\n            .flatMap(asset -> {\n                if (asset == null) {\n                    throw new BizException(BizError.NOT_FOUND);\n                }\n\n                ServerHttpResponse response = exchange.getResponse();\n                response.setStatusCode(HttpStatus.OK);\n                if (asset.getContentType() != null) {\n                    response.getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n                }\n                return response.writeWith(Flux.just(bufferAssetData(asset)));\n            });\n}", "CodeBleu_score": 55.00971974724389}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return makeImageResponse(exchange, assetId, HttpStatus.OK);\n}", "CodeBleu_score": 12.818667354202695}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return ConfigCenter.getConf().getAssets().get(assetId)\n        .flatMap(asset -> {\n            HttpHeaders headers = new HttpHeaders();\n            headers.setContentType(MediaType.IMAGE_PNG);\n\n            ServerHttpResponse response = exchange.getResponse();\n            response.setStatusCode(HttpStatus.OK);\n            response.getHeaders().putAll(headers);\n\n            return response.writeWith(Flux.fromIterable(asset.getData()));\n        });\n}", "CodeBleu_score": 46.730756915581885}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    if (commonConfig.getWorkspaceMode() == WorkspaceMode.SAAS) {\n        return Flux.empty();\n    }\n\n    return organizationService.getAllOrganizations()\n        .map(organization -> {\n            return organization.getAuthConfigs()\n                .stream()\n                .map(authConfig -> {\n                    return new FindAuthConfig(\n                        authConfig.getId(),\n                        authConfig.getOrganizationId(),\n                        authConfig.getName(),\n                        authConfig.getDescription(),\n                        authConfig.getSource(),\n                        authConfig.getConfig()\n                    );\n                })\n                .collect(Collectors.toList());\n        })\n        .flatMapMany(Flux::fromIterable);\n}", "CodeBleu_score": 37.26852976514701}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    if (commonConfig.getWorkspaceMode() == WorkspaceMode.SAAS) {\n        return Flux.empty();\n    }\n    return organizationService.getOrganizations()\n            .flatMap(organization -> organization.getAuthConfigs().stream()\n                    .map(authConfig -> new FindAuthConfig(authConfig.getSource(), authConfig.getId()))\n                    .collect(Collectors.toList()))\n            .flatMapMany(Flux::fromIterable);\n}", "CodeBleu_score": 41.58770213496127}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    if (workspaceMode == WorkspaceMode.SAAS) {\n        return Flux.empty();\n    }\n\n    return organizationService.findAll()\n        .map(organization -> organization.getAuthConfigs())\n        .flatMap(Flux::fromIterable)\n        .map(authConfig -> {\n            FindAuthConfig findAuthConfig = new FindAuthConfig();\n            findAuthConfig.setId(authConfig.getId());\n            findAuthConfig.setName(authConfig.getName());\n            findAuthConfig.setType(authConfig.getType());\n            findAuthConfig.setConfig(authConfig.getConfig());\n            return findAuthConfig;\n        });\n}", "CodeBleu_score": 36.01356873021885}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    return new MongockSpring5.MongockApplicationRunner(\n            new SpringDataMongoV3Driver(mongoTemplate),\n            \"com.openblocks.mongock\",\n            springContext\n    );\n}", "CodeBleu_score": 14.225462857537666}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    return MongockSpring5.builder()\n            .setApplicationContext(springContext)\n            .setDriver(new SpringDataMongoV3Driver(mongoTemplate))\n            .setChangeLogsScanPackage(MaterialProperties.class.getPackage().getName())\n            .build();\n}", "CodeBleu_score": 21.064143133360126}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    return new MongockSpring5.MongockApplicationRunner(\n        new SpringDataMongoV3Driver(springContext, mongoTemplate),\n        \"com.openblocks.mongock.changelogs\",\n        springContext\n    );\n}", "CodeBleu_score": 16.60103501403415}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t    ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n    reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n    return reactiveMongoTemplate;\n}", "CodeBleu_score": 77.17711848849393}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t    return new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter) {\n        @Override\n        public ReadPreference getReadPreference() {\n            return ReadPreference.secondaryPreferred();\n        }\n    };\n}", "CodeBleu_score": 38.768722019881984}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t    return new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n}", "CodeBleu_score": 26.655499688833643}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return libraryQueryRepository.findById(libraryQueryId)\n        .flatMap(libraryQuery -> {\n            if (libraryQuery.getRecords().isEmpty()) {\n                return deferredError(LIBRARY_QUERY_NOT_FOUND, \"Library query ID \" + libraryQueryId + \" not found\");\n            }\n\n            return getLiveDSLByLibraryQueryRecordId(libraryQuery.getRecords().get(0).getId());\n        });\n}", "CodeBleu_score": 45.511654406051505}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return libraryQueryRepository.findLatestRecordByLibraryQueryId(libraryQueryId)\n        .switchIfEmpty(deferredError(LIBRARY_QUERY_NOT_FOUND, \"Library query not found\"))\n        .flatMap(record -> getLiveDSLByLibraryQueryRecord(record))\n        .switchIfEmpty(libraryQueryRepository.findById(libraryQueryId)\n            .switchIfEmpty(deferredError(LIBRARY_QUERY_NOT_FOUND, \"Library query not found\"))\n            .flatMap(query -> getLiveDSLByLibraryQuery(query)));\n}", "CodeBleu_score": 48.01687481472595}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return libraryQueryRepository.getLatestRecordByLibraryQueryId(libraryQueryId)\n        .switchIfEmpty(deferredError(LIBRARY_QUERY_NOT_FOUND))\n        .flatMap(record -> getLiveDSLByLibraryQueryRecord(record))\n        .switchIfEmpty(libraryQueryRepository.getById(libraryQueryId)\n            .flatMap(query -> getLiveDSLByLibraryQuery(query)));\n}", "CodeBleu_score": 51.52740578743467}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        QueryExecutionContext queryExecutionContext = new QueryExecutionContext(datasource, queryConfig, requestParams, timeoutStr, queryVisitorContext);\n        Duration timeout = QueryTimeoutUtils.parseTimeout(timeoutStr);\n        return Mono.defer(() -> {\n            try {\n                QueryExecutionResult result = queryExecutionContext.getDatasourcePluginClient().executeQuery(queryExecutionContext, timeout);\n                return Mono.just(result);\n            } catch (TimeoutException e) {\n                return Mono.error(new PluginException(QUERY_EXECUTION_TIMEOUT, \"Query execution timeout\"));\n            } catch (BizException e) {\n                return Mono.error(e);\n            } catch (Exception e) {\n                return Mono.error(new PluginException(QUERY_EXECUTION_ERROR, \"Error executing query\", ofException(e)));\n            }\n        });\n    }", "CodeBleu_score": 41.652237692629456}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t\n        Duration timeout = QueryTimeoutUtils.parseTimeout(timeoutStr);\n\n        try {\n            return Mono.defer(() -> {\n                DatasourceConnectionHolder connectionHolder = datasourceConnectionPool.getConnection(datasource);\n                DatasourcePluginClient client = datasourceMetaInfoService.getClient(datasource.getType());\n\n                return client.executeQuery(datasource, connectionHolder, queryConfig, requestParams, timeout, queryVisitorContext)\n                        .map(QueryExecutionResult::new)\n                        .onErrorMap(TimeoutException.class, ofException(QUERY_EXECUTION_TIMEOUT))\n                        .onErrorMap(e -> {\n                            log.error(\"Error executing query\", e);\n                            return new BizException(QUERY_EXECUTION_ERROR);\n                        });\n            });\n        } catch (PluginException e) {\n            return Mono.error(e);\n        }\n    }", "CodeBleu_score": 46.28997957878157}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t\n        // Get the timeout duration\n        Duration timeout = QueryTimeoutUtils.getTimeoutDuration(timeoutStr);\n\n        // Get the datasource connection holder\n        DatasourceConnectionHolder datasourceConnectionHolder = datasourceConnectionPool.getConnection(datasource);\n\n        // Get the datasource meta info\n        DatasourceMetaInfoService.DatasourceMetaInfo datasourceMetaInfo = datasourceMetaInfoService.getDatasourceMetaInfo(datasource.getId());\n\n        // Get the query execution context\n        QueryExecutionContext queryExecutionContext = new QueryExecutionContext(\n                datasourceConnectionHolder,\n                datasourceMetaInfo,\n                queryConfig,\n                requestParams,\n                timeout\n        );\n\n        // Execute the query\n        Mono<QueryExecutionResult> queryExecutionResultMono = datasourcePluginClient.executeQuery(queryExecutionContext, queryVisitorContext);\n\n        // Handle the timeout exception\n        Mono<QueryExecutionResult> timeoutExceptionMono = Mono.error(new TimeoutException()).map(ofException(QUERY_EXECUTION_TIMEOUT));\n\n        // Handle the plugin exception\n        Mono<QueryExecutionResult> pluginExceptionMono = queryExecutionResultMono.onErrorResume(PluginException.class, ofException(QUERY_EXECUTION_ERROR));\n\n        // Handle the generic exception\n        Mono<QueryExecutionResult> genericExceptionMono = queryExecutionResultMono.onErrorResume(e -> Mono.just(new BizException(QUERY_EXECUTION_ERROR, e)));\n\n        // Handle the error\n        Mono<QueryExecutionResult> errorMono = Mono.error(new BizException(QUERY_EXECUTION_ERROR));\n\n        // Return the query execution result\n        return Mono.firstWithSignal(\n                Mono.just(queryExecutionResultMono),\n                timeoutExceptionMono,\n                pluginExceptionMono,\n                genericExceptionMono,\n                errorMono\n        );\n    }", "CodeBleu_score": 37.10341900949914}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\n    DatasourceConnectionHolder connectionHolder = datasourceConnectionPool.acquire(datasource);\n\n    QueryExecutionContext executionContext = QueryExecutionContext.builder()\n            .datasource(datasource)\n            .connectionHolder(connectionHolder)\n            .queryConfig(queryConfig)\n            .requestParams(requestParams)\n            .queryVisitorContext(queryVisitorContext)\n            .build();\n\n    return queryExecutorFactory.get(datasource.getType())\n            .execute(executionContext)\n            .doOnError(t -> {\n                if (t instanceof TimeoutException) {\n                    throw new BizException(QUERY_EXECUTION_TIMEOUT);\n                }\n\n                log.error(\"Error executing query locally\", t);\n                throw ofException(t);\n            })\n            .doFinally(s -> {\n                try {\n                    datasourceConnectionPool.release(connectionHolder);\n                } catch (Exception e) {\n                    log.error(\"Error releasing connection\", e);\n                }\n            });\n}", "CodeBleu_score": 42.56728762093272}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t    DatasourceConnectionHolder connectionHolder = datasourceConnectionPool.acquireConnection(datasource);\n    if (connectionHolder == null) {\n        return Mono.error(new BizException(QUERY_EXECUTION_ERROR, \"Unable to acquire connection from connection pool\"));\n    }\n\n    QueryExecutionContext queryExecutionContext = QueryExecutionContext.builder()\n            .queryConfig(queryConfig)\n            .requestParams(requestParams)\n            .queryVisitorContext(queryVisitorContext)\n            .connectionHolder(connectionHolder)\n            .build();\n\n    return datasourcePluginClient.executeQuery(datasource, queryExecutionContext)\n            .doFinally(s -> datasourceConnectionPool.releaseConnection(connectionHolder));\n}", "CodeBleu_score": 46.553566314043394}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t    DatasourceConnectionHolder connectionHolder = datasourceConnectionPool.acquire(datasource);\n\n    QueryExecutionContext queryExecutionContext = QueryExecutionContext.builder()\n            .datasource(datasource)\n            .queryConfig(queryConfig)\n            .requestParams(requestParams)\n            .queryVisitorContext(queryVisitorContext)\n            .connectionHolder(connectionHolder)\n            .build();\n\n    return Mono.fromFuture(datasourcePluginClient.executeQuery(datasource, queryExecutionContext))\n            .timeout(Duration.ofMillis(QueryTimeoutUtils.getTimeout(datasource)))\n            .onErrorResume(TimeoutException.class, e -> Mono.error(ofException(QUERY_EXECUTION_TIMEOUT, e)))\n            .onErrorResume(e -> Mono.error(ofException(QUERY_EXECUTION_ERROR, e)))\n            .doFinally(signal -> datasourceConnectionPool.release(connectionHolder));\n}", "CodeBleu_score": 44.495993306336814}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t    if (StringUtils.isBlank(timeoutStr)) {\n        return DEFAULT_QUERY_TIMEOUT_MS;\n    }\n\n    Pair<Integer, String> timeout = extractTimeout(timeoutStr);\n    if (timeout == null) {\n        throw new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid timeout string: \" + timeoutStr);\n    }\n\n    int timeoutMs = timeout.getLeft() * getTimeoutUnitMs(timeout.getRight());\n    if (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n        throw new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"Timeout cannot exceed \" + MAX_QUERY_TIMEOUT_MS + \"ms\");\n    }\n\n    return timeoutMs;\n}", "CodeBleu_score": 34.872244515712126}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t    if (StringUtils.isBlank(timeoutStr)) {\n        return DEFAULT_QUERY_TIMEOUT_MS;\n    }\n\n    Pair<Integer, String> timeoutPair = parseTimeout(timeoutStr);\n\n    int timeoutMs = timeoutPair.getLeft() * getTimeoutUnitMs(timeoutPair.getRight());\n\n    if (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n        throw new PluginException(EXCEED_MAX_QUERY_TIMEOUT);\n    }\n\n    return timeoutMs;\n}", "CodeBleu_score": 25.534423112299727}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t    if (StringUtils.isBlank(timeoutStr)) {\n        return DEFAULT_QUERY_TIMEOUT_MS;\n    }\n\n    Pair<Integer, String> parsed = parseTimeout(timeoutStr);\n\n    if (parsed == null) {\n        throw new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid timeout string: \" + timeoutStr);\n    }\n\n    int timeout = parsed.getLeft();\n    String unit = parsed.getRight();\n\n    if (timeout > MAX_QUERY_TIMEOUT_MS) {\n        throw new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"Query timeout \" + timeout + \" exceeds maximum allowed timeout of \" + MAX_QUERY_TIMEOUT_MS + \" milliseconds.\");\n    }\n\n    if (unit.equalsIgnoreCase(\"ms\")) {\n        return timeout;\n    }\n\n    if (unit.equalsIgnoreCase(\"s\")) {\n        return timeout * 1000;\n    }\n\n    if (unit.equalsIgnoreCase(\"m\")) {\n        return timeout * 1000 * 60;\n    }\n\n    if (unit.equalsIgnoreCase(\"h\")) {\n        return timeout * 1000 * 60 * 60;\n    }\n\n    if (unit.equalsIgnoreCase(\"d\")) {\n        return timeout * 1000 * 60 * 60 * 24;\n    }\n\n    throw new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid timeout unit: \" + unit);\n}", "CodeBleu_score": 37.81517806147995}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t    return applicationService.getApplicationQuery(application.getId())\n            .flatMap(applicationQuery -> {\n                if (applicationQuery.getQueries().isEmpty()) {\n                    return Mono.error(ofError(TEMPLATE_NOT_CORRECT, \"No queries found in application\"));\n                }\n\n                // Extract the datasource IDs\n                Set<String> datasourceIds = applicationQuery.getQueries().stream()\n                        .flatMap(query -> query.getDatasources().stream())\n                        .map(Datasource::getId)\n                        .collect(Collectors.toSet());\n\n                // Copy the datasources\n                return datasourceService.copyDatasources(currentOrganizationId, datasourceIds, visitorId)\n                        .collectList();\n            })\n            .flatMap(datasources -> {\n                // Map the datasources to the original and copied datasource IDs\n                List<Pair<String, String>> datasourcePairs = datasources.stream()\n                        .map(datasource -> Pair.of(datasource.getOriginalDatasourceId(), datasource.getId()))\n                        .collect(Collectors.toList());\n\n                return Mono.just(datasourcePairs);\n            });\n}", "CodeBleu_score": 51.143557476556076}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t    return Mono.just(application.getQuery())\n            .flatMap(query -> {\n                if (isNull(query)) {\n                    return Mono.error(ofError(TEMPLATE_NOT_CORRECT, \"Query is null\"));\n                }\n                return Mono.just(query.getQueries());\n            })\n            .flatMapMany(Flux::fromIterable)\n            .flatMap(query -> {\n                if (isNull(query.getLiveQuery())) {\n                    return Mono.error(ofError(TEMPLATE_NOT_CORRECT, \"Live query is null\"));\n                }\n                return Mono.just(query.getLiveQuery().getDatasourceIds());\n            })\n            .collectList()\n            .flatMap(datasourceIds -> {\n                if (datasourceIds.isEmpty()) {\n                    return Mono.error(ofError(TEMPLATE_NOT_CORRECT, \"Datasource IDs is empty\"));\n                }\n                return Mono.just(datasourceIds);\n            })\n            .flatMapMany(Flux::fromIterable)\n            .flatMap(datasourceId -> {\n                return datasourceService.getDatasource(datasourceId, visitorId)\n                        .flatMap(datasource -> {\n                            if (isNull(datasource)) {\n                                return Mono.error(ofError(TEMPLATE_NOT_CORRECT, \"Datasource is null\"));\n                            }\n                            return Mono.just(Pair.of(datasourceId, datasource));\n                        });\n            })\n            .collectMap(Pair::getKey, Pair::getValue)\n            .flatMap(datasourceMap -> {\n                if (datasourceMap.isEmpty()) {\n                    return Mono.error(ofError(TEMPLATE_NOT_CORRECT, \"Datasource map is empty\"));\n                }\n                return Mono.just(datasourceMap);\n            })\n            .flatMap(datasourceMap -> {\n                return Mono.just(datasourceMap.entrySet());\n            })\n            .flatMapMany(Flux::fromIterable)\n            .flatMap(", "CodeBleu_score": 32.66468093757675}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t    return applicationService.getApplicationQueries(application.getId())\n            .switchIfEmpty(deferredError(ofError(TEMPLATE_NOT_CORRECT, \"No queries found in the application.\")))\n            .flatMapMany(Flux::fromIterable)\n            .flatMap(query -> query.getDatasources()\n                    .stream()\n                    .map(Datasource::getId)\n                    .collect(Collectors.toList()))\n            .collectList()\n            .flatMap(datasourceIds -> {\n                if (datasourceIds.isEmpty()) {\n                    return deferredError(ofError(TEMPLATE_NOT_CORRECT, \"No datasources found in the application.\"));\n                }\n                return Flux.fromIterable(datasourceIds)\n                        .flatMap(datasourceId -> datasourceService.copyDatasource(datasourceId, currentOrganizationId, visitorId))\n                        .collectList()\n                        .map(datasourceIdPairs -> {\n                            for (Pair<String, String> datasourceIdPair : datasourceIdPairs) {\n                                application.getDatasourceIds().add(datasourceIdPair.getRight());\n                            }\n                            return datasourceIdPairs;\n                        });\n            });\n}", "CodeBleu_score": 32.0228922491024}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceService.getDatasourceById(datasourceId)\n        .flatMap(datasource -> {\n            if (datasource.getCreationSource() == DatasourceCreationSource.SYSTEM_STATIC) {\n                return Mono.just(datasource.getId());\n            } else if (datasource.getCreationSource() == DatasourceCreationSource.LEGACY_QUICK_REST_API) {\n                return legacyQuickRestApiService.getDatasourceById(datasource.getId())\n                    .flatMap(legacyQuickRestApiDatasource -> legacyQuickRestApiService.createDatasource(legacyQuickRestApiDatasource, organizationId, visitorId))\n                    .map(datasource -> datasource.getId());\n            } else if (datasource.getCreationSource() == DatasourceCreationSource.LEGACY_OPENBLOCKS_API) {\n                return legacyOpenblocksApiService.getDatasourceById(datasource.getId())\n                    .flatMap(legacyOpenblocksApiDatasource -> legacyOpenblocksApiService.createDatasource(legacyOpenblocksApiDatasource, organizationId, visitorId))\n                    .map(datasource -> datasource.getId());\n            } else {\n                return datasourceService.createDatasource(datasource, organizationId, visitorId)\n                    .map(datasource -> datasource.getId());\n            }\n        });\n}", "CodeBleu_score": 51.453749607011545}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceService.get(datasourceId)\n        .flatMap(datasource -> {\n            if (datasource.getCreationSource() == DatasourceCreationSource.SYSTEM_STATIC) {\n                return Mono.just(datasource.getId());\n            }\n\n            if (datasource.getCreationSource() == DatasourceCreationSource.LEGACY_QUICK_REST_API || datasource.getCreationSource() == DatasourceCreationSource.LEGACY_OPENBLOCKS_API) {\n                return datasourceService.create(organizationId, visitorId, datasource.getId(), datasource.getName(), datasource.getType())\n                    .map(Datasource::getId);\n            }\n\n            return deferredError(ofError(TEMPLATE_NOT_EXIST, \"Datasource not found\"));\n        });\n}", "CodeBleu_score": 56.162382991342795}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceService.getById(datasourceId)\n        .flatMap(datasource -> {\n            if (datasource.getCreationSource() == DatasourceCreationSource.SYSTEM_STATIC) {\n                return Mono.just(datasource.getId());\n            }\n\n            return datasourceService.create(\n                organizationId,\n                visitorId,\n                datasource.getName(),\n                datasource.getQuery(),\n                datasource.getParams(),\n                datasource.getCreationSource()\n            ).map(Datasource::getId);\n        });\n}", "CodeBleu_score": 53.16500353635604}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t    return saveProfilePhoto(filePart, user, null);\n}", "CodeBleu_score": 8.142472824176606}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t    return Mono.just(filePart)\n        .flatMap(part -> {\n            String fileName = part.filename();\n            String fileType = part.headers().getFirst(\"Content-Type\");\n            if (StringUtils.isBlank(fileName) || StringUtils.isBlank(fileType)) {\n                return Mono.error(ofError(BizError.INVALID_PARAMETERS));\n            }\n\n            String filePath = String.format(\"%s/%s\", CommonConfig.UPLOAD_DIR, fileName);\n            return Mono.just(filePath)\n                .flatMap(path -> filePart.transferTo(path))\n                .flatMap(path -> Mono.just(user)\n                    .map(u -> u.getProfilePhoto())\n                    .map(url -> {\n                        if (StringUtils.isNotBlank(url)) {\n                            String filePath = String.format(\"%s/%s\", CommonConfig.UPLOAD_DIR, url);\n                            try {\n                                java.nio.file.Files.deleteIfExists(java.nio.file.Paths.get(filePath));\n                            } catch (Exception e) {\n                                log.error(\"Failed to delete file: {}\", filePath, e);\n                            }\n                        }\n                        return url;\n                    })\n                    .map(url -> user.setProfilePhoto(filePath))\n                    .flatMap(userRepository::save)\n                );\n        })\n        .map(user -> true);\n}", "CodeBleu_score": 38.25990850862088}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t    return saveProfilePhoto(filePart, user, null);\n}", "CodeBleu_score": 8.142472824176606}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    User user = new User();\n    user.setName(authUser.getName());\n    user.setState(UserState.NEW);\n    user.setEnabled(true);\n    user.setAvatar(authUser.getAvatar());\n    user.setConnections(authUser.getConnections());\n    user.setNew(true);\n\n    if (authUser.getPassword() != null) {\n        user.setPassword(encryptionService.encryptPassword(authUser.getPassword()));\n    }\n\n    return userRepository.save(user);\n}", "CodeBleu_score": 37.94826621774826}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    return Mono.fromCallable(() -> {\n        User user = new User();\n        user.setName(authUser.getName());\n        user.setState(UserState.NEW);\n        user.setEnabled(true);\n        user.setAvatarLink(authUser.getAvatarLink());\n        user.setAuthSource(authUser.getAuthSource());\n\n        if (authUser.getAuthSource() == AuthSourceConstants.EMAIL) {\n            String encryptedPassword = encryptionService.encrypt(authUser.getPassword());\n            user.setPassword(encryptedPassword);\n        }\n\n        user.setConnections(authUser.getConnections());\n        user.setNew(true);\n\n        return user;\n    });\n}", "CodeBleu_score": 48.77108416591912}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    User user = new User();\n    user.setName(authUser.getName());\n    user.setState(UserState.NEW);\n    user.setEnabled(true);\n    user.setAvatar(authUser.getAvatar());\n    user.setConnections(authUser.getConnections());\n    user.setNew(true);\n    return Mono.just(user);\n}", "CodeBleu_score": 27.058914884909026}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    if (user.getConnections().stream().anyMatch(conn -> conn.getSource().equals(AuthSourceConstants.EMAIL))) {\n        return Mono.error(ofError(BizError.USER_EMAIL_ALREADY_BINDED));\n    }\n    Connection connection = new Connection(email, AuthSourceConstants.EMAIL);\n    user.getConnections().add(connection);\n    return userRepository.save(user)\n        .map(u -> true)\n        .onErrorResume(DuplicateKeyException.class, e -> Mono.error(ofError(BizError.USER_EMAIL_ALREADY_BINDED)));\n}", "CodeBleu_score": 37.28014806948822}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return Mono.just(user)\n        .flatMap(u -> {\n            Connection conn = Connection.builder()\n                .source(AuthSourceConstants.EMAIL)\n                .sourceId(email)\n                .build();\n            return Mono.just(u.addConnection(conn));\n        })\n        .flatMap(userRepository::save)\n        .map(u -> true)\n        .onErrorResume(DuplicateKeyException.class, e -> Mono.just(false))\n        .onErrorMap(e -> ofException(BizError.EMAIL_ALREADY_EXISTS, e));\n}", "CodeBleu_score": 45.09803162111397}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return Mono.fromCallable(() -> {\n        if (user.getConnections().stream().anyMatch(c -> c.getSource().equals(AuthSourceConstants.EMAIL))) {\n            throw new BizException(BizError.USER_EMAIL_ALREADY_BOUND);\n        }\n\n        Connection connection = new Connection();\n        connection.setSource(AuthSourceConstants.EMAIL);\n        connection.setIdentifier(email);\n        user.getConnections().add(connection);\n\n        userRepository.save(user).subscribe();\n        return true;\n    }).onErrorMap(e -> {\n        if (e instanceof DuplicateKeyException) {\n            return new BizException(BizError.USER_EMAIL_ALREADY_BOUND);\n        }\n\n        return ofException(e);\n    });\n}", "CodeBleu_score": 39.93719322447761}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return userRepository.findById(userId)\n        .switchIfEmpty(Mono.error(ofError(BizError.USER_NOT_FOUND)))\n        .flatMap(user -> {\n            if (user.getPassword().equals(encryptionService.encrypt(oldPassword))) {\n                user.setPassword(encryptionService.encrypt(newPassword));\n                return userRepository.save(user);\n            }\n            return Mono.error(ofError(BizError.INVALID_PASSWORD));\n        })\n        .thenReturn(true);\n}", "CodeBleu_score": 31.00880943515549}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return userRepository.findById(userId)\n        .flatMap(user -> {\n            if (!user.getPassword().equals(encryptionService.encrypt(oldPassword))) {\n                return Mono.error(ofError(BizError.INVALID_PASSWORD));\n            }\n            user.setPassword(encryptionService.encrypt(newPassword));\n            return userRepository.save(user);\n        })\n        .thenReturn(true);\n}", "CodeBleu_score": 24.343155839213725}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return findById(userId)\n        .switchIfEmpty(Mono.error(ofError(BizError.USER_NOT_FOUND)))\n        .flatMap(user -> {\n            if (!user.getPassword().equals(encryptionService.encrypt(oldPassword))) {\n                return Mono.error(ofError(BizError.INVALID_PASSWORD));\n            }\n\n            user.setPassword(encryptionService.encrypt(newPassword));\n            return save(user);\n        })\n        .thenReturn(true);\n}", "CodeBleu_score": 28.675701505955477}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t    return Mono.zip(\n            Flux.fromIterable(orgMember.getGroups())\n                    .filter(group -> !group.getId().equals(CommonConfig.ALL_USERS_GROUP_ID))\n                    .collectList(),\n            Flux.fromIterable(orgMember.getGroups())\n                    .filter(group -> !withoutDynamicGroups || !group.isDynamic())\n                    .collectList()\n    ).map(tuple -> {\n        List<Group> allGroups = tuple.getT1();\n        List<Group> dynamicGroups = tuple.getT2();\n\n        return allGroups.stream()\n                .map(group -> {\n                    String groupName = group.getName();\n                    if (group.getLocalization().containsKey(locale.getLanguage())) {\n                        groupName = group.getLocalization().get(locale.getLanguage());\n                    }\n                    return Map.of(\n                            FieldName.GROUP_ID, group.getId(),\n                            FieldName.GROUP_NAME, groupName\n                    );\n                })\n                .collect(Collectors.toList());\n    });\n}", "CodeBleu_score": 33.80568448369721}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t    return Flux.merge(\n            Mono.just(orgMember.getAdminGroup()),\n            Flux.fromIterable(orgMember.getGroups())\n                    .filter(group -> !group.getId().equals(orgMember.getAdminGroup().getId()))\n                    .filter(group -> !withoutDynamicGroups || !group.isDynamic())\n    )\n            .map(group -> {\n                Map<String, String> groupInfo = new HashMap<>();\n                groupInfo.put(\"id\", group.getId());\n                groupInfo.put(\"name\", group.getLocalizedName(locale));\n                return groupInfo;\n            })\n            .collectList()\n            .map(groups -> {\n                if (!withoutDynamicGroups) {\n                    groups.add(0, Map.of(\"id\", \"all\", \"name\", \"All Users\"));\n                }\n                return groups;\n            });\n}", "CodeBleu_score": 32.73634270478824}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t    return Flux.from(orgMember.getGroups())\n            .filter(group -> !group.getId().equals(groupIdAllUsers))\n            .collectList()\n            .flatMap(groups -> {\n                if (withoutDynamicGroups) {\n                    return Flux.fromIterable(groups)\n                            .filter(group -> !group.isDynamic())\n                            .collectList();\n                }\n                return Mono.just(groups);\n            })\n            .flatMap(groups -> {\n                return Flux.fromIterable(groups)\n                        .map(group -> {\n                            return Map.of(FieldName.ID, group.getId(), FieldName.NAME, group.getLocalizedName(locale));\n                        })\n                        .collectList();\n            })\n            .flatMap(groups -> {\n                return Flux.fromIterable(groups)\n                        .filter(group -> !group.get(FieldName.ID).equals(groupIdAllUsers))\n                        .collectList();\n            });\n}", "CodeBleu_score": 30.439540814885124}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    UserStatus userStatus = new UserStatus();\n    userStatus.setUserId(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n\n    return mongoUpsertHelper.upsert(\n            UserStatus.class,\n            \"userId\",\n            userId,\n            userStatus,\n            Update.update(\"hasShowNewUserGuidance\", true)\n    );\n}", "CodeBleu_score": 36.59262777623646}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    UserStatus userStatus = new UserStatus();\n    userStatus.setUserId(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n\n    return mongoUpsertHelper.upsert(UserStatusRepository.COLLECTION_NAME, userStatus, Update.update(\"hasShowNewUserGuidance\", true)).map(result -> result.wasAcknowledged());\n}", "CodeBleu_score": 35.404164937153084}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    UserStatus userStatus = new UserStatus();\n    userStatus.setUserId(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n\n    return mongoUpsertHelper.upsert(\n            UserStatus.class,\n            Update.update(\"userId\", userId),\n            Update.update(\"hasShowNewUserGuidance\", true),\n            userStatus\n    );\n}", "CodeBleu_score": 38.62872941213494}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition must not be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue must not be nil\")\n\t}\n\tc.logger.Debugf(\"clearing cache entries matching predicate\")\n\tvar wg sync.WaitGroup\n\tc.runGroup.Run(func() {\n\t\tfor _, p := range c.partitions {\n\t\t\tif predicatePartition(p.Name(), p) {\n\t\t\t\twg.Add(1)\n\t\t\t\tc.runGroup.Run(func() {\n\t\t\t\t\tdefer wg.Done()\n\t\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t})\n\twg.Wait()\n\tc.logger.Debugf(\"done clearing cache entries matching predicate\")\n}", "CodeBleu_score": 38.9158671296129}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\tc.runGroup.Add(1)\n\tdefer c.runGroup.Done()\n\tc.runGroup.Wait()\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.Name(), p) {\n\t\t\tp.ClearMatching(predicateValue)\n\t\t}\n\t}\n}", "CodeBleu_score": 33.876393332284366}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\tc.ensureInitialized()\n\tr := rungroup.New()\n\tfor pName, p := range c.partitions {\n\t\tif predicatePartition(pName, p) {\n\t\t\tr.Add(func() error {\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t\treturn nil\n\t\t\t})\n\t\t}\n\t}\n\tr.Wait()\n}", "CodeBleu_score": 39.42893475244857}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\t// The average weight per partition is the total weight quantity divided by the number of partitions.\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\n\t// The maximum size per partition is the maximum size per partition formula.\n\tmaxSizePerPartition := int(math.Ceil(float64(maxItemsTotal) / avgWeightPerPartition))\n\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 41.70934245568974}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\taverageWeightPerPartition := totalWeightQuantity / numPartitions\n\treturn int(math.Ceil(float64(maxItemsTotal) / float64(averageWeightPerPartition)))\n}", "CodeBleu_score": 40.61966621192779}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\treturn int(math.Ceil(float64(maxItemsTotal) / avgWeightPerPartition))\n}", "CodeBleu_score": 41.67657031457538}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\t    Map<String, Object> contributorMap = new HashMap<>();\n    contributorMap.put(\"database\", \"\");\n    contributorMap.put(\"databaseVersion\", \"\");\n    return contributorMap;\n}", "CodeBleu_score": 22.863203042032968}, {"code": "public Map<String, Object> contributorMap(){\n\t    Map<String, Object> map = new HashMap<>();\n    map.put(\"database\", contributorMap(connectionFactory));\n    return map;\n}", "CodeBleu_score": 21.827017301305148}, {"code": "public Map<String, Object> contributorMap(){\n\t    Map<String, Object> map = new HashMap<>();\n    if (connectionFactory != null) {\n        Mono<Connection> connection = connectionFactory.create();\n        connection.flatMap(Connection::getMetadata)\n                .doOnNext(connectionMetadata -> {\n                    map.put(\"database.product.name\", connectionMetadata.getDatabaseProductName());\n                    map.put(\"database.product.version\", connectionMetadata.getDatabaseProductVersion());\n                }).subscribe();\n    }\n    return map;\n}", "CodeBleu_score": 40.83250224057892}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    // User settings\n    User user = configMap.get(User.class);\n    if (user != null) {\n        info.setUserRegistrationEnabled(user.isUserRegistrationEnabled());\n        info.setUserEmailVerificationEnabled(user.isUserEmailVerificationEnabled());\n    } else {\n        info.setUserRegistrationEnabled(false);\n        info.setUserEmailVerificationEnabled(false);\n    }\n}", "CodeBleu_score": 40.92631147226426}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    // Get user setting\n    User userSetting = configMap.get(User.class);\n\n    // Disable registration and email verification if user setting is null\n    if (userSetting == null) {\n        info.setRegistrationEnabled(false);\n        info.setEmailVerificationEnabled(false);\n    } else {\n        // Update GlobalInfo object with user setting\n        info.setRegistrationEnabled(isTrue(userSetting.getRegistrationEnabled()));\n        info.setEmailVerificationEnabled(isTrue(userSetting.getEmailVerificationEnabled()));\n    }\n}", "CodeBleu_score": 46.84703034747283}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    User user = configMap.getUser();\n    if (user == null) {\n        info.setDisableRegistration(true);\n        info.setDisableEmailVerification(true);\n    } else {\n        info.setDisableRegistration(isTrue(user.getDisableRegistration()));\n        info.setDisableEmailVerification(isTrue(user.getDisableEmailVerification()));\n    }\n}", "CodeBleu_score": 33.29380466377907}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\t    // Create a new thread group\n    ThreadGroup threadGroup = new ThreadGroup(\"RestartThreadGroup\");\n\n    // Create a new thread\n    Thread thread = new Thread(threadGroup, () -> {\n        // Set the thread as non-daemon\n        thread.setDaemon(false);\n\n        // Assign the application class loader as the context class loader\n        thread.setContextClassLoader(Application.class.getClassLoader());\n\n        // Start the thread\n        thread.start();\n    });\n\n    // Set the thread as non-daemon\n    thread.setDaemon(false);\n\n    // Assign the application class loader as the context class loader\n    thread.setContextClassLoader(Application.class.getClassLoader());\n\n    // Start the thread\n    thread.start();\n\n    // Return a message indicating the restart has begun\n    return \"Restart has begun\";\n}", "CodeBleu_score": 58.14602840889035}, {"code": "public Object restart(){\n\t    if (applicationContext instanceof ConfigurableApplicationContext) {\n        ((ConfigurableApplicationContext) applicationContext).close();\n    }\n\n    try {\n        // Create a new thread group\n        ThreadGroup group = new ThreadGroup(\"RestartThreadGroup\");\n\n        // Create a new thread\n        Thread thread = new Thread(group, () -> {\n            try {\n                // Load application class loader\n                ClassLoader classLoader = Application.class.getClassLoader();\n\n                // Create a new application context\n                ConfigurableApplicationContext context =\n                    SpringApplication.run(Application.class, args);\n\n                // Set the application context\n                applicationContext = context;\n\n                // Set the application class loader\n                Thread.currentThread().setContextClassLoader(classLoader);\n\n                // Set the application class loader\n                ClassLoader.getSystemClassLoader().setDefaultAssertionStatus(false);\n\n                // Set the application class loader\n                ClassLoader.getSystemClassLoader().setDefaultAssertionStatus(true);\n\n                // Set the application class loader\n                ClassLoader.getSystemClassLoader().setPackageAssertionStatus(\"\", true);\n\n                // Set the application class loader\n                ClassLoader.getSystemClassLoader().setPackageAssertionStatus(\"java.lang\", true);\n\n                // Set the application class loader\n                ClassLoader.getSystemClassLoader().setPackageAssertionStatus(\"java.io\", true);\n\n                // Set the application class loader\n                ClassLoader.getSystemClassLoader().setPackageAssertionStatus(\"java.util\", true);\n\n                // Set the application class loader\n                ClassLoader.getSystemClassLoader().setPackageAssertionStatus(\"java.util.concurrent\", true);\n\n                // Set the application class loader\n                ClassLoader.getSystemClassLoader().setPackageAssertionStatus(\"java.util.concurrent.atomic\", true);\n\n                // Set the application class loader\n                ClassLoader.getSystemClassLoader().setPackageAssertionStatus(\"java.util.concurrent.locks\", true);\n\n                // Set the application class loader\n                ClassLoader.getSystemClassLoader().setPackageAssertionStatus(\"java.util.concurrent.atomic\", true);\n\n                // Set the application class loader\n                ClassLoader.getSystemClassLoader().setPackageAssertionStatus(\"java.util.concurrent.locks\", true);\n\n", "CodeBleu_score": 35.4497393048726}, {"code": "public Object restart(){\n\t    // 1. Create new thread group\n    ThreadGroup newThreadGroup = new ThreadGroup(\"RestartThreadGroup\");\n\n    // 2. Create new thread\n    Thread restartThread = new Thread(() -> {\n        try {\n            // 3. Set the context class loader\n            Thread.currentThread().setContextClassLoader(Application.class.getClassLoader());\n\n            // 4. Create new application context\n            ApplicationContext newContext = SpringApplication.run(Application.class);\n\n            // 5. Register shutdown hook\n            Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n                try {\n                    // 6. Close all closeable resources\n                    newContext.getBeansOfType(Closeable.class).values().forEach(Closeable::close);\n                } catch (IOException e) {\n                    log.error(\"Failed to close closeable resources\", e);\n                }\n            }));\n        } catch (Exception e) {\n            log.error(\"Failed to restart application\", e);\n        }\n    }, \"RestartThread\");\n\n    // 7. Set the thread as non-daemon\n    restartThread.setDaemon(false);\n\n    // 8. Start the thread\n    restartThread.start();\n\n    // 9. Return message\n    return \"Restarting application...\";\n}", "CodeBleu_score": 42.94534879246284}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t    configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(this.objectMapper));\n    configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(this.objectMapper));\n}", "CodeBleu_score": 51.97745099920634}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t        configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n        configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n    }", "CodeBleu_score": 70.31411393684094}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t    configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n    configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n}", "CodeBleu_score": 71.82220753180427}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t    return route(\n        path(\"/console/**\")\n            .and(method(HttpMethod.GET))\n            .and(path().doesNotStartWith(\"/console/assets/\")),\n        request -> {\n            if (WebSocketRequestPredicate.INSTANCE.test(request)) {\n                return Mono.empty();\n            }\n            return ServerResponse.temporaryRedirect(URI.create(\"/console/index.html\"))\n                .build();\n        });\n}", "CodeBleu_score": 27.104692737640868}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t    return route(\n        path(\"/console/**\")\n            .and(accept(MediaType.TEXT_HTML).and(method(HttpMethod.GET))\n                .and(WebSocketRequestPredicate.not())),\n        request -> ServerResponse.temporaryRedirect(URI.create(\"/console/index.html\")).build());\n}", "CodeBleu_score": 28.96692447486563}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t    return route(\n        path(\"/console/**\")\n            .and(accept(MediaType.TEXT_HTML).and(method(HttpMethod.GET))\n                .and(WebSocketRequestPredicate.not())),\n        request -> ServerResponse.temporaryRedirect(URI.create(\"/console/index.html\")).build());\n}", "CodeBleu_score": 28.96692447486563}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t    return route(\n        path(\"/uc/**\").and(\n            method(HttpMethod.GET).and(\n                accept(MediaType.TEXT_HTML).and(\n                    WebSocketRequestPredicate.not()\n                )\n            )\n        ),\n        request -> ServerResponse.temporaryRedirect(URI.create(\"/uc/index.html\"))\n    );\n}", "CodeBleu_score": 28.472672827842693}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t    return route(\n        path(\"/uc/**\")\n            .and(accept(MediaType.TEXT_HTML))\n            .and(method(HttpMethod.GET))\n            .and(WebSocketRequestPredicate.notWebSocket()),\n        request -> ServerResponse.temporaryRedirect(URI.create(\"/uc/index.html\")));\n}", "CodeBleu_score": 29.285784488964705}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t    return route(\n        path(\"/uc/**\").and(\n            method(HttpMethod.GET).and(\n                accept(MediaType.TEXT_HTML).and(\n                    WebSocketRequestPredicate.not()\n                )\n            )\n        ),\n        request -> ServerResponse.temporaryRedirect(URI.create(\"/uc/index.html\")).build()\n    );\n}", "CodeBleu_score": 28.577410464898012}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    return new InMemoryReactiveIndexedSessionRepository(new ConcurrentHashMap<>());\n}", "CodeBleu_score": 12.60307979233427}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    return new InMemoryReactiveIndexedSessionRepository(new ConcurrentHashMap<>());\n}", "CodeBleu_score": 12.60307979233427}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    return new InMemoryReactiveIndexedSessionRepository(new ConcurrentHashMap<>());\n}", "CodeBleu_score": 12.60307979233427}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    DefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService);\n    userDetailsService.setTwoFactorAuthenticationEnabled(haloProperties.getSecurity().isTwoFactorAuthenticationEnabled());\n    return userDetailsService;\n}", "CodeBleu_score": 47.90332711446787}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    DefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService);\n    userDetailsService.setTwoFactorEnabled(haloProperties.getSecurity().isTwoFactorEnabled());\n    return userDetailsService;\n}", "CodeBleu_score": 46.76595836715228}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    return new DefaultUserDetailService(userService, roleService, haloProperties);\n}", "CodeBleu_score": 14.052454824669788}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\t    Assert.notNull(email, \"Email must not be null\");\n    Assert.notNull(displayName, \"Display name must not be null\");\n    Comment.CommentOwner commentOwner = new Comment.CommentOwner();\n    commentOwner.setKind(\"email\");\n    commentOwner.setEmail(email);\n    commentOwner.setDisplayName(displayName);\n    commentOwner.setAvatar(avatar);\n    commentOwner.setWebsite(website);\n    return commentOwner;\n}", "CodeBleu_score": 35.80943984776179}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t    Assert.notNull(this, \"CommentOwner must not be null\");\n    String email = StringUtils.defaultIfBlank(this.getEmail(), \"\");\n    String displayName = StringUtils.defaultIfBlank(this.getDisplayName(), email);\n    Map<String, String> annotations = new LinkedHashMap<>();\n    if (StringUtils.isNotBlank(this.getAvatar())) {\n        annotations.put(\"avatar\", this.getAvatar());\n    }\n    if (StringUtils.isNotBlank(this.getWebsite())) {\n        annotations.put(\"website\", this.getWebsite());\n    }\n    return new Comment.CommentOwner(email, displayName, annotations);\n}", "CodeBleu_score": 40.471407783128384}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t    Assert.notNull(email, \"Email can not be null\");\n\n    Comment.CommentOwner commentOwner = new Comment.CommentOwner();\n    commentOwner.setKind(\"email\");\n    commentOwner.setEmail(email);\n    commentOwner.setDisplayName(StringUtils.defaultIfBlank(displayName, email));\n\n    Map<String, String> annotations = new LinkedHashMap<>();\n    if (StringUtils.isNotBlank(avatar)) {\n        annotations.put(\"avatar\", avatar);\n    }\n    if (StringUtils.isNotBlank(website)) {\n        annotations.put(\"website\", website);\n    }\n    commentOwner.setAnnotations(annotations);\n\n    return commentOwner;\n}", "CodeBleu_score": 61.99422368149341}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    Assert.notNull(post, \"Post must not be null\");\n    Assert.notNull(commentOwner, \"Comment owner must not be null\");\n    return post.getOwner().getKind().equals(commentOwner.getKind())\n        && post.getOwner().getName().equals(commentOwner.getName());\n}", "CodeBleu_score": 27.49530305695394}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    Assert.notNull(post, \"Post must not be null\");\n    Assert.notNull(commentOwner, \"Comment owner must not be null\");\n\n    if (commentOwner.getKind().equalsIgnoreCase(User.USER_KIND)) {\n        // If the comment owner is a user, we need to fetch the user by the post owner\n        return post.getOwner().getKind().equalsIgnoreCase(User.USER_KIND)\n            && post.getOwner().getName().equalsIgnoreCase(commentOwner.getName());\n    } else {\n        // If the comment owner is not a user, we can compare the comment owner's name with the post owner's name\n        return post.getOwner().getName().equalsIgnoreCase(commentOwner.getName());\n    }\n}", "CodeBleu_score": 33.16474641112837}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    if (StringUtils.isBlank(post.getOwner())) {\n        return false;\n    }\n\n    if (commentOwner.getKind().equals(User.Kind.EMAIL)) {\n        Optional<User> userOptional = extensionGetter.getExtension(ExtensionClient.USER)\n            .getUserByEmail(commentOwner.getName());\n        if (userOptional.isPresent()) {\n            return userOptional.get().getEmail().equals(post.getOwner());\n        }\n        return false;\n    }\n\n    return commentOwner.getName().equals(post.getOwner());\n}", "CodeBleu_score": 39.129291842473236}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\t    return (ListOptions) (req, resp) -> {\n        ServerRequest serverRequest = (ServerRequest) req;\n        ServerWebExchange serverWebExchange = serverRequest.exchange();\n        ListOptions listOptions = new ListOptions();\n        PageRequest pageRequest = new PageRequestImpl();\n        // 1. build sort\n        Sort sort = SortResolver.getSort(serverWebExchange);\n        listOptions.setSort(sort);\n        pageRequest.setSort(sort);\n        // 2. build field selector\n        FieldSelector fieldSelector = labelAndFieldSelectorToListOptions(serverWebExchange);\n        listOptions.setFieldSelector(fieldSelector);\n        // 3. build query\n        String keyword = QueryParamBuildUtil.buildQuery(serverWebExchange);\n        if (StringUtils.isNotBlank(keyword)) {\n            listOptions.setQuery(and(contains(Comment.FIELD_CONTENT, keyword),\n                contains(Comment.FIELD_TITLE, keyword)));\n        }\n        String ownerName = QueryParamBuildUtil.buildOwnerName(serverWebExchange);\n        if (StringUtils.isNotBlank(ownerName)) {\n            listOptions.setQuery(and(equal(Comment.FIELD_OWNER_NAME, ownerName),\n                listOptions.getQuery()));\n        }\n        // 4. build page request\n        pageRequest.setPage(QueryParamBuildUtil.buildPage(serverWebExchange));\n        pageRequest.setSize(QueryParamBuildUtil.buildSize(serverWebExchange));\n        listOptions.setPageRequest(pageRequest);\n        return listOptions;\n    };\n}", "CodeBleu_score": 34.70844601987157}, {"code": "public ListOptions toListOptions(){\n\t    return labelAndFieldSelectorToListOptions(\n        (user, listOptions) -> {\n            // 1. build field query\n            QueryFactory.Query fieldQuery = QueryFactory.Query.EMPTY;\n            if (user != null) {\n                fieldQuery = and(equal(\"owner\", user.getUsername()), fieldQuery);\n            }\n            if (listOptions.getKeyword() != null) {\n                fieldQuery = and(contains(\"content\", listOptions.getKeyword()), fieldQuery);\n            }\n            if (listOptions.getFieldSelector() != null) {\n                fieldQuery = and(listOptions.getFieldSelector(), fieldQuery);\n            }\n            listOptions.setFieldSelector(fieldQuery);\n\n            // 2. build sort\n            Sort sort = SortResolver.getSort(listOptions.getSort());\n            if (sort != null) {\n                listOptions.setSort(sort);\n            }\n        });\n}", "CodeBleu_score": 35.43041950889306}, {"code": "public ListOptions toListOptions(){\n\t    return labelAndFieldSelectorToListOptions(\n        this,\n        (queryBuilder, label, field) -> {\n            queryBuilder.must(equal(\"label\", label));\n            queryBuilder.must(equal(\"field\", field));\n        });\n}", "CodeBleu_score": 6.200209290486804}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    return Mono.justOrEmpty(commentName)\n        .filter(name -> !name.isEmpty())\n        .flatMap(name -> counterService.get(name).map(CommentStats::new))\n        .switchIfEmpty(Mono.just(new CommentStats()));\n}", "CodeBleu_score": 35.17947027773404}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    Assert.notNull(commentName, \"Comment name must not be null\");\n    return counterService.getCounter(commentName)\n        .map(counter -> new CommentStats(counter.getCount(), counter.getLastUpdated()))\n        .defaultIfEmpty(new CommentStats(0, null));\n}", "CodeBleu_score": 45.649253732153305}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    Assert.hasText(commentName, \"Comment name must not be blank\");\n\n    return counterService.getCounter(commentName)\n        .map(counter -> new CommentStats(counter.getUpvotes(), counter.getDownvotes()));\n}", "CodeBleu_score": 41.35833365079728}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\t    Subscription subscription = Subscription.builder()\n        .identity(identity)\n        .reason(NotificationReasonConst.REPLY)\n        .condition(\"repliedOwner\", identity.getUsername())\n        .build();\n\n    // Subscribe\n    NotificationCenter.subscribe(subscription);\n}", "CodeBleu_score": 36.83448182319029}, {"code": "void subscribeReply(UserIdentity identity){\n\t    Subscription subscription = Subscription.builder()\n        .identity(identity)\n        .interestReason(NotificationReasonConst.SOMEONE_REPLY_TO_YOU)\n        .interestCondition(String.format(\"reply.owner.name=='%s'\", identity.getName()))\n        .build();\n    notificationCenter.subscribe(subscription);\n}", "CodeBleu_score": 39.86681932430488}, {"code": "void subscribeReply(UserIdentity identity){\n\t    Subscription subscription = new Subscription(identity, NotificationReasonConst.REPLY);\n    subscription.setCondition(\"repliedOwner\", identity.getUsername());\n    NotificationCenter.subscribe(subscription);\n}", "CodeBleu_score": 26.100764824311273}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\t    return client.update(comment, c -> c.setApproved(true).setApprovedTime(Instant.now()))\n        .retryWhen(Retry.any()\n            .doBeforeRetry(MeterUtils.meterRetry(meterRegistry, \"comment.approve\"))\n            .backoff(Duration.ofSeconds(1))\n            .maxAttempts(3))\n        .doOnSuccess(c -> counterService.increment(\"comment.approve\"))\n        .doOnSuccess(c -> meterRegistry.counter(\"comment.approve\").increment());\n}", "CodeBleu_score": 27.03169228605397}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t    return client.update(comment, update -> {\n        update.setApproved(true);\n        update.setApprovedTime(Instant.now());\n        return update;\n    });\n}", "CodeBleu_score": 18.914366120679897}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t    return client.update(comment)\n        .retryWhen(Retry.backoff(3, Duration.ofMillis(500)).filter(throwable -> {\n            // Only retry on optimistic locking failures\n            return throwable instanceof OptimisticLockingFailureException;\n        }))\n        .onErrorResume(throwable -> {\n            // Log the error\n            log.error(\"Failed to approve comment: {}\", comment.getId(), throwable);\n\n            // Return an empty comment\n            return Mono.empty();\n        })\n        .map(comment1 -> {\n            // Update the comment\n            comment1.setApproved(true);\n            comment1.setApprovedTime(Instant.now());\n\n            return comment1;\n        });\n}", "CodeBleu_score": 30.803532970883147}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->mountUsing(fn () => app(static::class));\n    }\n\n    if (\n        $action instanceof HasRecord &&\n        $record = $this->getRecord()\n    ) {\n        $action->record($record);\n    }\n\n    return $action;\n}", "CodeBleu_score": 59.609850218527136}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->setMountedContainer(static::getMountedContainer());\n    }\n\n    if ($action instanceof HasRecord) {\n        $action->setRecord($this->record);\n    }\n\n    return $action;\n}", "CodeBleu_score": 52.270297861439566}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->setMountedOn($this);\n    }\n\n    if ($action instanceof HasRecord && $record = $this->getRecord()) {\n        $action->setRecord($record);\n    }\n\n    return $action;\n}", "CodeBleu_score": 53.309030404921145}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    if ($this->successRedirectUrl) {\n        if (is_app_url($this->successRedirectUrl)) {\n            return redirect()->intended($this->successRedirectUrl);\n        }\n\n        return redirect()->to($this->successRedirectUrl);\n    }\n\n    return $this;\n}", "CodeBleu_score": 28.73883828396825}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    if (filled($this->successUrl)) {\n        if (is_app_url($this->successUrl)) {\n            return redirect($this->successUrl);\n        }\n\n        return redirect()->route($this->successUrl);\n    }\n\n    if (filled($this->successMessage)) {\n        Filament\\Support\\Facades\\Filament::notify($this->successMessage);\n    }\n\n    return $this;\n}", "CodeBleu_score": 26.2959391935506}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    $url = $this->getSuccessRedirectUrl();\n\n    if (! $url) {\n        return $this;\n    }\n\n    if (is_app_url($url)) {\n        return redirect()->intended($url);\n    }\n\n    return redirect()->to($url);\n}", "CodeBleu_score": 43.520281798742225}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if (!$record || !method_exists($record, 'tags')) {\n        return;\n    }\n    $tagModel = $record->tags()->getMorphClass();\n    $tagNames = $state['tags'] ?? [];\n    $tags = collect($tagNames)->map(function (string $tagName) use ($tagModel) {\n        $tag = Tag::firstOrCreate(['name' => $tagName], [\n            'type' => AllTagTypes::getTagType($tagModel),\n        ]);\n        return $tag;\n    });\n    $record->tags()->sync($tags->pluck('id'));\n}", "CodeBleu_score": 44.24457733727937}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if ($record && $record->hasMethod('tags')) {\n        $tagModelClass = $record->tags()->getMorphClass();\n        $tagNames = array_filter($state['tags']);\n        $tags = collect();\n        foreach ($tagNames as $tagName) {\n            $tags->push(Tag::firstOrCreate([\n                'name' => $tagName,\n                'type' => $tagModelClass,\n            ], [\n                'name' => $tagName,\n                'type' => $tagModelClass,\n            ]));\n        }\n        $record->tags()->sync($tags->pluck('id'));\n    }\n}", "CodeBleu_score": 32.850176274058754}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if ($record === null || ! method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagModel = $record->tags()->getRelated();\n\n    $tagNames = array_filter($state);\n\n    $tags = $tagModel::getOrCreate($tagNames);\n\n    $record->tags()->sync($tags->pluck('id'));\n}", "CodeBleu_score": 27.22300852295515}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\n\t// Dissect the repository path to obtain the space path and repository name\n\tspacePath, repoName, err := paths.DissectRepositoryPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource for the pipeline\n\tscope := authz.Scope{\n\t\tSpace: spacePath,\n\t\tRepo:  repoName,\n\t}\n\tresource := authz.Resource{\n\t\tType: authz.PipelineResourceType,\n\t\tID:   pipelineIdentifier,\n\t}\n\n\t// Check the permission\n\tif err := authorizer.Check(ctx, session, scope, resource, permission); err != nil {\n\t\treturn fmt.Errorf(\"failed to check permission: %w\", err)\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 67.99852580664212}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\n\t// Get the space path and repository name from the repository path.\n\tspacePath, repoName, err := paths.GetSpaceAndRepoPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Create the scope and resource for the pipeline.\n\tscope := &types.Scope{\n\t\tResourceType: enum.RESOURCE_TYPE_PIPELINE,\n\t\tResourceId:   pipelineIdentifier,\n\t}\n\tresource := &types.Resource{\n\t\tSpacePath: spacePath,\n\t\tRepoName:  repoName,\n\t\tResourceType: enum.RESOURCE_TYPE_PIPELINE,\n\t\tResourceId:   pipelineIdentifier,\n\t}\n\n\t// Check the permission.\n\tif err := Check(ctx, authorizer, session, scope, resource, permission); err != nil {\n\t\treturn fmt.Errorf(\"CheckPipeline: permission check failed: %s\", err.Error())\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 66.71981252674834}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\n\t// Dissect the repository path to obtain the space path and repository name.\n\tspacePath, repoName, err := paths.DissectRepositoryPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource for the pipeline.\n\tscope := authz.Scope{\n\t\tResourceType: authz.PipelineResourceType,\n\t\tResourceName: pipelineIdentifier,\n\t}\n\tresource := authz.Resource{\n\t\tResourceType: authz.PipelineResourceType,\n\t\tResourceName: pipelineIdentifier,\n\t}\n\n\t// Check if the user has the required permission for the pipeline.\n\tif err := authorizer.Check(ctx, session, scope, resource, permission); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 58.445620424282716}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tif space == nil {\n\t\treturn nil\n\t}\n\n\tscope, resource, err := paths.CreateScopeAndResource(space.Path)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to create scope and resource from path: %w\", err)\n\t}\n\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 54.561264948034506}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\t// Create a scope and resource based on the parent space and name.\n\tscope := authz.NewScope(space.ParentSpace, space.Name)\n\tresource := authz.NewResource(space.ParentSpace, space.Name)\n\n\t// Check the session's permissions for the scope and resource.\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 41.57585789883037}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tif space == nil {\n\t\treturn fmt.Errorf(\"space is nil\")\n\t}\n\n\tscope, err := authz.NewScope(\n\t\tpaths.GetSpacePath(space.ParentSpace, space.Name),\n\t\tpaths.GetSpacePath(space.ParentSpace, space.Name),\n\t\tpaths.GetSpacePath(space.ParentSpace, space.Name),\n\t\tpaths.GetSpacePath(space.ParentSpace, space.Name),\n\t\tpaths.GetSpacePath(space.ParentSpace, space.Name),\n\t\tpaths.GetSpacePath(space.ParentSpace, space.Name),\n\t)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tresource := &authz.Resource{\n\t\tResource: space.Path,\n\t}\n\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 58.234498489055355}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsanitized, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn sanitized, nil\n\t}\n\n\tvar decoded map[string]any\n\tif err := json.Unmarshal(source, &decoded); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := json.Unmarshal(source, &data); err != nil {\n\t\treturn nil, err\n\t}\n\n\tsanitized, err := json.Marshal(data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn sanitized, nil\n}", "CodeBleu_score": 37.414862567002224}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsanitized, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\treturn sanitized, nil\n\t}\n\n\tvar decoded map[string]any\n\tif err := json.Unmarshal(source, &decoded); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := json.Unmarshal(source, &data); err != nil {\n\t\treturn nil, err\n\t}\n\n\tsanitized, err := json.Marshal(data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn sanitized, nil\n}", "CodeBleu_score": 37.414862567002224}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tvar sanitized json.RawMessage\n\terr := json.Unmarshal(source, &sanitized)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tsanitized, err = json.Marshal(sanitized)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tsanitized = bytes.TrimRight(sanitized, \"\n\")\n\treturn sanitized, nil\n}", "CodeBleu_score": 39.5750956692294}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference.\n\trepo, err := c.validateRepoRef(repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Fetch the repository.\n\tif err := c.fetchRepo(ctx, repo); err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check access permissions.\n\tif err := c.checkRepoAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 44.65497490437237}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference.\n\trepo, err := c.validateRepoRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check access permissions.\n\tif err := c.checkAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 38.43237687310766}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\n\t// Validate the repository reference.\n\trepo, err := c.validateRepoRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check access permissions.\n\tif err := c.checkAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 38.43237687310766}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tcheckSanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\tcheckSanitizers[enum.CheckPayloadKindEmpty] = sanitizeEmptyPayload\n\tcheckSanitizers[enum.CheckPayloadKindRaw] = sanitizeRawPayload\n\tcheckSanitizers[enum.CheckPayloadKindMarkdown] = sanitizeRawPayload\n\tcheckSanitizers[enum.CheckPayloadKindPipeline] = sanitizePipelinePayload\n\treturn checkSanitizers\n}", "CodeBleu_score": 44.34404899619201}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tsanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\n\tsanitizers[enum.CheckPayloadKindEmpty] = func(in *ReportInput, s *auth.Session) error {\n\t\treturn nil\n\t}\n\n\tsanitizers[enum.CheckPayloadKindRaw] = func(in *ReportInput, s *auth.Session) error {\n\t\treturn nil\n\t}\n\n\tsanitizers[enum.CheckPayloadKindMarkdown] = func(in *ReportInput, s *auth.Session) error {\n\t\treturn nil\n\t}\n\n\tsanitizers[enum.CheckPayloadKindPipeline] = func(in *ReportInput, s *auth.Session) error {\n\t\tif in.Pipeline == nil {\n\t\t\treturn usererror.New(usererror.CodeBadRequest, \"Pipeline is required\")\n\t\t}\n\n\t\tif in.Pipeline.Name == \"\" {\n\t\t\treturn usererror.New(usererror.CodeBadRequest, \"Pipeline name is required\")\n\t\t}\n\n\t\tif in.Pipeline.Repository == \"\" {\n\t\t\treturn usererror.New(usererror.CodeBadRequest, \"Pipeline repository is required\")\n\t\t}\n\n\t\tif in.Pipeline.Branch == \"\" {\n\t\t\treturn usererror.New(usererror.CodeBadRequest, \"Pipeline branch is required\")\n\t\t}\n\n\t\tif in.Pipeline.Commit == \"\" {\n\t\t\treturn usererror.New(usererror.CodeBadRequest, \"Pipeline commit is required\")\n\t\t}\n\n\t\tif in.Pipeline.Job == \"\" {\n\t\t\treturn usererror.New(usererror.CodeBadRequest, \"Pipeline job is required\")\n\t\t}\n\n\t\tif in.Pipeline.Build == \"\" {\n\t\t\treturn usererror.New(usererror.CodeBadRequest, \"Pipeline build is required\")\n\t\t}\n\n\t\treturn nil\n\t}\n\n\treturn sanitizers\n}", "CodeBleu_score": 37.52036823185686}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tsanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\tsanitizers[enum.CheckPayloadKindEmpty] = sanitizeEmpty\n\tsanitizers[enum.CheckPayloadKindRaw] = sanitizeRaw\n\tsanitizers[enum.CheckPayloadKindMarkdown] = sanitizeRaw\n\tsanitizers[enum.CheckPayloadKindPipeline] = sanitizePipeline\n\treturn sanitizers\n}", "CodeBleu_score": 40.84498842314937}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\t\tself.state.on_render = on_render\n\tif not self.state.attached then\n\t\tself.state.attached = true\n\t\tself:attach()\n\tend\n\treturn self", "CodeBleu_score": 52.24549100711471}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t    if self.attached_to_renderer then\n        return self\n    end\n    self.attached_to_renderer = true\n    self.on_render = on_render\n    if self.attached then\n        self:attach()\n    end\n    return self", "CodeBleu_score": 51.26348819464411}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t    self.state.on_render = on_render\n    if not self.state.attached then\n        self.state.attached = true\n        self.renderer:attach_buffer(self)\n    end\n    return self", "CodeBleu_score": 58.41751170283791}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\t    if self.is_valid then\n        local watcher = vgit.core.Watcher:new()\n        watcher:watch(self.filename, function(event)\n            if event == 'modified' then\n                if callback then\n                    callback()\n                end\n            end\n        end)\n        self.watchers[#self.watchers + 1] = watcher\n    end", "CodeBleu_score": 45.99574889978552}, {"code": "function Buffer:watch(callback)\n\t    local filename = self:get_filename()\n    local watcher = Watcher:new(filename, callback)\n    local ok, err = pcall(watcher.start, watcher)\n    if not ok then\n        vgit.console.log_error(err)\n    end", "CodeBleu_score": 33.61787488809313}, {"code": "function Buffer:watch(callback)\n\t  local watcher = vgit.core.Watcher:new(self.filename, callback)\n  local ok, err = watcher:start()\n  if not ok then\n    vgit.core.console:error(err)\n  end", "CodeBleu_score": 30.470659768876484}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\t    if self.hex ~= nil then\n        return self.hex\n    end\n\n    local spec = self:get_spec()\n\n    local attr = self:get_attr()\n    local fg = self:get_fg()\n    local bg = self:get_bg()\n\n    local hex\n\n    if spec[attr] == nil then\n        hex = self:get_default_hex()\n    else\n        local color = spec[attr]\n        if color == 'NONE' then\n            hex = self:get_default_hex()\n        else\n            hex = self:get_hex_from_color(color)\n        end\n    end\n\n    self.hex = hex\n    return hex", "CodeBleu_score": 47.43206875270259}, {"code": "function Color:to_hex()\n\t    if self.hex then return self.hex end\n    local color = self:to_rgb()\n    local attr = self.foreground and \"fg\" or \"bg\"\n    local spec = vim.api.nvim_get_hl_by_name(attr, self.name)\n    if spec then\n        local rgb = vgit.core.Rgb:new(spec.foreground or spec.background)\n        local hex = rgb:to_hex()\n        self.hex = hex\n        return hex\n    end", "CodeBleu_score": 52.34865005406372}, {"code": "function Color:to_hex()\n\t    if self.hex then\n        return self.hex\n    end\n    local hex = self.hex\n    local spec = self:to_spec()\n    if spec.foreground then\n        hex = vim.api.nvim_get_hl_by_name('Normal', true)[1]\n    elseif spec.background then\n        hex = vim.api.nvim_get_hl_by_name('Normal', true)[2]\n    end\n    if hex then\n        self.hex = hex\n        return hex\n    end\n    return nil", "CodeBleu_score": 51.83506815277248}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t    local ns = self.ns\n    local lines = buffer:get_lines()\n    local start_row = 1\n    local end_row = #lines\n    local start_col = 1\n    local end_col = 0\n    for row = start_row, end_row do\n        local line = lines[row]\n        local start_col, end_col = line:find(pattern, start_col, true)\n        if start_col then\n            buffer:add_highlight(ns, row, start_col, end_col, hl)\n            start_col = end_col + 1\n        end\n    end\n    return ns", "CodeBleu_score": 55.40910474793811}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t    local lines = buffer:get_lines()\n    local ns = self:get_namespace()\n    local pattern_hl = vim.regex(pattern)\n    for line in lines:iter() do\n        local matches = pattern_hl:match_str(line)\n        if #matches > 0 then\n            local start_col, end_col = pattern_hl:match_str_pos(line)\n            vim.api.nvim_buf_add_highlight(buffer, ns, hl, line, start_col, end_col)\n        end\n    end\n    return self", "CodeBleu_score": 46.702589730620566}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t  local ns = self:get_namespace(buffer)\n  local lines = vim.api.nvim_buf_get_lines(buffer, 0, -1, false)\n  local pattern_hl = vim.regex(pattern)\n  for i, line in ipairs(lines) do\n    if pattern_hl:match_str(line) then\n      vim.api.nvim_buf_add_highlight(buffer, ns, hl, i - 1, 0, -1)\n    end\n  end\n  return ns", "CodeBleu_score": 44.13942996340804}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t    local id = self:get_virtual_text_id(buffer, row, col)\n    self:set_virtual_text(buffer, id, text, hl, pos, priority)\n    return id", "CodeBleu_score": 31.522777049667567}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t    local id = self.virtual_text_id_counter\n    local ns = self.virtual_text_ns\n    local buf = vim.api.nvim_create_namespace(ns)\n    vim.api.nvim_buf_set_extmark(buffer, buf, row, col, {\n        virt_text = { text },\n        virt_text_pos = pos,\n        virt_text_win_col = col,\n        virt_text_hide = true,\n        virt_text_hide_on_insert = true,\n        hl_mode = 'combine',\n        hl_group = hl,\n        priority = priority,\n    })\n    self.virtual_text_id_counter = self.virtual_text_id_counter + 1\n    return id", "CodeBleu_score": 47.94515323789494}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t    local id = self.transpose_virtual_text_ids[row .. col]\n    if not id then\n        id = vim.api.nvim_buf_set_extmark(buffer, self.ns_id, row, col, {\n            virt_text = { { text, hl } },\n            virt_text_pos = pos,\n            virt_text_win_col = col,\n            hl_mode = 'combine',\n            priority = priority,\n        })\n        self.transpose_virtual_text_ids[row .. col] = id\n    else\n        vim.api.nvim_buf_clear_namespace(buffer, self.ns_id, id, -1)\n        vim.api.nvim_buf_set_extmark(buffer, self.ns_id, row, col, {\n            virt_text = { { text, hl } },\n            virt_text_pos = pos,\n            virt_text_win_col = col,\n            hl_mode = 'combine',\n            priority = priority,\n        })\n    end\n    return id", "CodeBleu_score": 59.905272469212136}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\t    local lines = {}\n    local line = ''\n    for _, char in ipairs(output) do\n        if char == '", "CodeBleu_score": 13.16381668000628}, {"code": "function Spawn:parse_result(output, callback)\n\t    local lines = {}\n    local line = ''\n    for i = 1, #output do\n        local char = output:sub(i, i)\n        if char == '", "CodeBleu_score": 28.234770181214508}, {"code": "function Spawn:parse_result(output, callback)\n\t  local lines = {}\n  local line = ''\n  for i = 1, #output do\n    local c = output:sub(i, i)\n    if c == '", "CodeBleu_score": 24.030644653151636}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t    if self.watchers[path] then\n        return self.watchers[path]\n    end\n    local watcher = vim.loop.new_fs_event()\n    watcher:start(path, vim.schedule_wrap(handler))\n    self.watchers[path] = watcher\n    return watcher", "CodeBleu_score": 49.5573823768416}, {"code": "function Watcher:watch_file(path, handler)\n\t  if self.watchers[path] then\n    return self.watchers[path]\n  end\n\n  local watcher = vim.loop.new_fs_event()\n  watcher:start(path, vim.schedule_wrap(handler))\n  self.watchers[path] = watcher\n\n  return watcher", "CodeBleu_score": 48.24693313867655}, {"code": "function Watcher:watch_file(path, handler)\n\t    local watcher = self:get_watcher(path)\n    if watcher then return watcher end\n    watcher = self:create_watcher(path, handler)\n    self:start_watcher(watcher)\n    return watcher", "CodeBleu_score": 32.31206871493116}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t    local lines = self:lines()\n    local git_object = self:git_object()\n    local hunks = git_object:hunks(lines)\n    if not hunks then\n        return git_object.error\n    end\n    self:set_signs(hunks)\n    return hunks", "CodeBleu_score": 16.34145370861085}, {"code": "function GitBuffer:live_hunks()\n\t  local git_object = self:get_git_object()\n  if not git_object then\n    return 'No git object found'\n  end\n  local hunks = git_object:get_live_hunks()\n  if not hunks then\n    return 'No hunks found'\n  end\n  local signs = {}\n  local priority = 1\n  for _, hunk in pairs(hunks) do\n    local lines = self:get_lines()\n    for _, line in pairs(hunk.lines) do\n      if line.type == 'add' then\n        signs[line.lnum] = {\n          name = 'GitGutterAdd',\n          priority = priority,\n        }\n        priority = priority + 1\n      elseif line.type == 'delete' then\n        signs[line.lnum] = {\n          name = 'GitGutterDelete',\n          priority = priority,\n        }\n        priority = priority + 1\n      elseif line.type == 'change' then\n        signs[line.lnum] = {\n          name = 'GitGutterChange',\n          priority = priority,\n        }\n        priority = priority + 1\n      end\n    end\n  end\n  self:set_signs(signs)\n  return hunks", "CodeBleu_score": 41.81841556976673}, {"code": "function GitBuffer:live_hunks()\n\t    local git_object = self.git_object\n    local git_object_type = git_object.type\n    local git_object_name = git_object.name\n    local git_object_lines = git_object.lines\n    local git_object_hunks = git_object.hunks\n    local git_object_hunks_length = #git_object_hunks\n    local git_object_hunks_index = 1\n    local git_object_hunk = git_object_hunks[git_object_hunks_index]\n    local git_object_hunk_lines = git_object_hunk.lines\n    local git_object_hunk_lines_length = #git_object_hunk_lines\n    local git_object_hunk_lines_index = 1\n    local git_object_hunk_line = git_object_hunk_lines[git_object_hunk_lines_index]\n    local git_object_hunk_line_text = git_object_hunk_line.text\n    local git_object_hunk_line_text_length = #git_object_hunk_line_text\n    local git_object_hunk_line_text_index = 1\n    local git_object_hunk_line_text_char = git_object_hunk_line_text:sub(git_object_hunk_line_text_index, git_object_hunk_line_text_index)\n    local git_object_hunk_line_text_char_index = 1\n    local git_object_hunk_line_text_char_count = 0\n    local git_object_hunk_line_text_char_prev = ''\n    local git_object_hunk_line_text_char_next = ''\n    local git_object_hunk_line_text_char_next_next = ''\n    local git_object_hunk_line_text_char_prev_prev = ''\n    local git_object_hunk_line_text_char_prev_prev_prev = ''\n    local git_object_hunk_line_text_char_prev_prev_prev_prev = ''\n", "CodeBleu_score": 22.805792317404713}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\t    local temp_file = self:create_temp_file()\n    self:write_to_file(temp_file, patch.content)\n    local command = self:get_command('add', { '--patch', '--reject-file=' .. temp_file })\n    local _, err = self:execute_command(command)\n    os.remove(temp_file)\n    return err", "CodeBleu_score": 41.15912272453746}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\n    local temp_file = os.tmpname()\n    local file = io.open(temp_file, 'w')\n    file:write(patch.content)\n    file:close()\n\n    local git = Git()\n    local _, _, stderr = git:stage_hunk_from_patch(self, patch, temp_file)\n    os.remove(temp_file)\n\n    return stderr\n", "CodeBleu_score": 54.97068793746526}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t  local temp_file = os.tmpname()\n  local file = io.open(temp_file, \"w\")\n  file:write(patch:get_content())\n  file:close()\n  local err = self.cli:stage_hunk(temp_file, patch.hunk)\n  os.remove(temp_file)\n  return err", "CodeBleu_score": 47.692479042972536}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\tOAuthConfig oauthConfig = new OAuthConfig(this.clientId, this.clientSecret, this.callbackUrl, this.scope, this.userAgent);\n\tOAuth20ServiceImpl oauthService = new OAuth20ServiceImpl(this, oauthConfig);\n\tOAuthRequest oauthRequest = new OAuthRequest(this.accessTokenVerb, this.accessTokenEndpoint);\n\toauthRequest.addHeader(OAuthConstants.CONTENT_TYPE, \"application/x-www-form-urlencoded\");\n\toauthRequest.addHeader(OAuthConstants.ACCEPT, \"application/json\");\n\toauthRequest.addBodyParameter(OAuthConstants.CLIENT_ID, this.clientId);\n\toauthRequest.addBodyParameter(OAuthConstants.CLIENT_SECRET, this.clientSecret);\n\toauthRequest.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n\toauthRequest.addBodyParameter(OAuthConstants.GRANT_TYPE, \"authorization_code\");\n\toauthRequest.addBodyParameter(OAuthConstants.REDIRECT_URI, this.callbackUrl);\n\toauthRequest.addBodyParameter(OAuthConstants.RESPONSE_TYPE, \"code\");\n\toauthRequest.addBodyParameter(OAuthConstants.SCOPE, this.scope);\n\tResponse response = oauthService.getAccessToken(oauthRequest, requestToken, verifier);\n\tString body = response.getBody();\n\treturn this.accessTokenExtractor.extract(body);\n}", "CodeBleu_score": 39.5538538220989}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\n    OAuthConfig oauthConfig = new OAuthConfig(\n            \"1234567890\",\n            \"https://github.com/login/oauth/access_token\",\n            \"https://github.com/login/oauth/authorize\",\n            \"https://github.com/login/oauth/access_token\",\n            StandardCharsets.UTF_8.name(),\n            null,\n            null\n    );\n\n    OAuth20ServiceImpl service = new OAuth20ServiceImpl(new DefaultApi20() {\n        @Override\n        public String getAccessTokenEndpoint() {\n            return \"https://github.com/login/oauth/access_token\";\n        }\n\n        @Override\n        public String getAuthorizationUrl(OAuthConfig config) {\n            return \"https://github.com/login/oauth/authorize\";\n        }\n\n        @Override\n        public String getRequestTokenEndpoint() {\n            return \"https://github.com/login/oauth/access_token\";\n        }\n\n        @Override\n        public String getScope() {\n            return null;\n        }\n\n        @Override\n        public String getResponseType() {\n            return null;\n        }\n\n        @Override\n        public String getCallbackUrl() {\n            return null;\n        }\n\n        @Override\n        public String getVersion() {\n            return null;\n        }\n\n        @Override\n        public OAuthService createService(OAuthConfig config) {\n            return null;\n        }\n    }, oauthConfig);\n\n    OAuthRequest request = new OAuthRequest(service.getAccessTokenVerb(), service.getAccessTokenEndpoint());\n\n    request.addHeader(\"Accept\", \"application/json\");\n    request.addHeader(\"Authorization\", \"Basic \" + Base64.encode(\"1234567890:\".getBytes(StandardCharsets.UTF_8)));\n    request.addBodyParameter(OAuthConstants.CLIENT_ID, \"1234567890\");\n    request.addBodyParameter(OAuthConstants.CLIENT_SECRET, \"\");\n    request.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n", "CodeBleu_score": 41.08977689537784}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\n    OAuthConfig oauthConfig = new OAuthConfig(\n            clientId,\n            clientSecret,\n            \"https://api.github.com/login/oauth/access_token\",\n            \"https://api.github.com/login/oauth/authorize\",\n            StandardCharsets.UTF_8,\n            signatureType,\n            connectTimeout,\n            readTimeout,\n            proxyHost,\n            proxyPort);\n\n    OAuth20ServiceImpl oauthService = new OAuth20ServiceImpl(new GitHubApi(), oauthConfig);\n    OAuthRequest request = new OAuthRequest(oauthService.getAccessTokenVerb(), oauthService.getAccessTokenEndpoint());\n    request.addHeader(OAuthConstants.CONTENT_TYPE_HEADER, OAuthConstants.CONTENT_TYPE_FORM);\n    request.addHeader(OAuthConstants.ACCEPT_HEADER, OAuthConstants.CONTENT_TYPE_JSON);\n    request.addBodyParameter(OAuthConstants.CLIENT_ID, clientId);\n    request.addBodyParameter(OAuthConstants.CLIENT_SECRET, clientSecret);\n    request.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n    request.addBodyParameter(OAuthConstants.REDIRECT_URI, callbackUrl);\n    request.addBodyParameter(OAuthConstants.GRANT_TYPE, \"authorization_code\");\n\n    Response response = oauthService.getAccessToken(request, requestToken, verifier);\n    String body = response.getBody();\n    String accessToken = Base64.decode(body.substring(body.indexOf(\"access_token=\") + 13, body.indexOf(\"&token_type\")));\n\n    return new Token(accessToken, null, response.getBody());\n}", "CodeBleu_score": 47.30485353182509}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    // Create a credentials provider\n    CredentialsProvider credsProvider = new BasicCredentialsProvider();\n\n    // Set credentials\n    StandardUsernamePasswordCredentials credentials = getCredentials();\n    UsernamePasswordCredentials usernamePasswordCredentials = new UsernamePasswordCredentials(credentials.getUsername(), credentials.getPassword().getPlainText());\n    credsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), usernamePasswordCredentials);\n\n    // Create an auth cache and add the credentials to it\n    AuthCache authCache = new BasicAuthCache();\n    authCache.put(host, new BasicScheme());\n\n    // Add auth cache to the execution context\n    context.setCredentialsProvider(credsProvider);\n    context.setAuthCache(authCache);\n\n    Logger.getLogger(this.getClass().getName()).log(Level.FINE, \"Added {0} to the auth cache\", host.getHostName());\n}", "CodeBleu_score": 48.11438400967063}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\n    // Get the credentials from the credentials provider\n    StandardUsernamePasswordCredentials credentials = getCredentials();\n\n    // If the credentials are null, then we can't authenticate\n    if (credentials == null) {\n        return;\n    }\n\n    // Set up the credentials provider and the authentication cache\n    CredentialsProvider provider = new BasicCredentialsProvider();\n    AuthCache authCache = new BasicAuthCache();\n\n    // Add the credentials to the credentials provider and the authentication cache\n    UsernamePasswordCredentials upCredentials = new UsernamePasswordCredentials(credentials.getUsername(), credentials.getPassword().getPlainText());\n    provider.setCredentials(new AuthScope(host), upCredentials);\n    authCache.put(host, new BasicScheme());\n\n    // Set the credentials provider and authentication cache on the context\n    context.setCredentialsProvider(provider);\n    context.setAuthCache(authCache);\n\n    // Log the action of adding the host to the auth cache\n    Logger.getLogger(getClass().getName()).log(Level.INFO, \"Added host {0} to the authentication cache\", host);\n}", "CodeBleu_score": 55.0801072087849}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    if (host == null) {\n        return;\n    }\n\n    final String hostName = host.getHostName();\n    final int port = host.getPort();\n    final String scheme = host.getSchemeName();\n\n    final CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n\n    final StandardUsernamePasswordCredentials credentials = (StandardUsernamePasswordCredentials) lookupCredentials(StandardUsernamePasswordCredentials.class, null, null, null);\n    if (credentials != null) {\n        final String username = credentials.getUsername();\n        final String password = credentials.getPassword().getPlainText();\n        final UsernamePasswordCredentials usernamePasswordCredentials = new UsernamePasswordCredentials(username, password);\n        credentialsProvider.setCredentials(new AuthScope(hostName, port, scheme), usernamePasswordCredentials);\n        LOGGER.log(Level.INFO, \"Added username/password credentials for {0}:{1}\", new Object[]{hostName, port});\n    }\n\n    final StandardUsernameCredentials credentials2 = (StandardUsernameCredentials) lookupCredentials(StandardUsernameCredentials.class, null, null, null);\n    if (credentials2 != null) {\n        final String username = credentials2.getUsername();\n        final UsernamePasswordCredentials usernamePasswordCredentials = new UsernamePasswordCredentials(username, \"\");\n        credentialsProvider.setCredentials(new AuthScope(hostName, port, scheme), usernamePasswordCredentials);\n        LOGGER.log(Level.INFO, \"Added username credentials for {0}:{1}\", new Object[]{hostName, port});\n    }\n\n    final BitbucketAuthenticator authenticator = (BitbucketAuthenticator) lookupCredentials(BitbucketAuthenticator.class, null, null, null);\n    if (authenticator != null) {\n        final String username = authenticator.getUsername();\n        final String password = authenticator.getPassword();\n        final UsernamePasswordCredentials usernamePasswordCredentials = new UsernamePasswordCredentials(username, password);\n        credentialsProvider.setCredentials(new AuthScope(hostName, port, scheme), usernamePasswordCredentials);\n        LOGGER.log(Level.INFO, \"Added username/password credentials for {0}:{1}\", new Object[]{hostName, port});\n    }\n\n    final AuthCache authCache = new BasicAuthCache();", "CodeBleu_score": 34.953978727932714}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins instance = Jenkins.getInstance();\n    if (instance == null) {\n        throw new IllegalStateException(\"Jenkins instance is null\");\n    }\n    AvatarCacheExtension cache = instance.getExtensionList(AvatarCacheExtension.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCacheExtension instance is null\");\n    }\n    String key = cache.getCacheKey(source);\n    cache.seedCache(source);\n    try {\n        return instance.getRootUrl() + \"avatars/\" + URLEncoder.encode(key, StandardCharsets.UTF_8.name()) + \"/\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding is unsupported\", e);\n    }\n}", "CodeBleu_score": 54.769465943091376}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    String key = buildCacheKey(source, size);\n    AvatarCacheExtension cache = Jenkins.getInstance().getExtensionList(AvatarCacheExtension.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"No AvatarCacheExtension found\");\n    }\n    cache.seedCache(key);\n    String rootUrl = Jenkins.getInstance().getRootUrl();\n    if (rootUrl == null) {\n        throw new IllegalStateException(\"Jenkins root URL is null\");\n    }\n    try {\n        return rootUrl + \"/avatars/\" + URLEncoder.encode(key, StandardCharsets.UTF_8.name());\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding is unsupported\", e);\n    }\n}", "CodeBleu_score": 53.51190211018935}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins jenkins = Jenkins.getInstanceOrNull();\n    if (jenkins == null) {\n        throw new IllegalStateException(\"Jenkins instance is null\");\n    }\n\n    AvatarCacheExtension cache = jenkins.getExtensionList(AvatarCacheExtension.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCacheExtension is null\");\n    }\n\n    String cacheKey = cache.getCacheKey(source);\n    if (StringUtils.isBlank(cacheKey)) {\n        throw new IllegalStateException(\"Cache key is blank\");\n    }\n\n    try {\n        cache.seedCache(source);\n    } catch (IOException e) {\n        throw new IllegalStateException(\"Failed to seed cache\", e);\n    }\n\n    try {\n        return jenkins.getRootUrl() + \"avatars/\" + URLEncoder.encode(cacheKey, \"UTF-8\") + \"/\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding is unsupported\", e);\n    }\n}", "CodeBleu_score": 46.96093309277691}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    this.image = image;\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 40.381814926456435}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    this.image = image;\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 40.381814926456435}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    this.image = image;\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 40.381814926456435}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    if (future.isDone()) {\n        try {\n            cacheEntry = future.get();\n        } catch (InterruptedException | ExecutionException e) {\n            // ignore\n        }\n        future = null;\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 43.43652860972587}, {"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    if (future.isDone()) {\n        try {\n            entry = future.get();\n        } catch (InterruptedException | ExecutionException e) {\n            e.printStackTrace();\n        }\n        future = null;\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 44.37130317794315}, {"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    try {\n        if (future.isDone()) {\n            AvatarImage image = future.get();\n            this.image = image.image;\n            this.lastModified = image.lastModified;\n            this.future = null;\n            return false;\n        }\n    } catch (InterruptedException | ExecutionException e) {\n        LOGGER.log(Level.WARNING, \"Exception while retrieving avatar image\", e);\n    }\n    return true;\n}", "CodeBleu_score": 53.94143606791284}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t    final String avatarId = req.getRestOfPath().substring(1);\n    final String color = req.getParameter(\"color\");\n    final String text = req.getParameter(\"text\");\n    final String size = req.getParameter(\"size\");\n    final String cache = req.getParameter(\"cache\");\n    final String cacheKey = avatarId + color + text + size;\n\n    if (StringUtils.isBlank(avatarId)) {\n        rsp.sendError(HttpServletResponse.SC_BAD_REQUEST, \"Avatar ID is required\");\n        return;\n    }\n\n    if (StringUtils.isBlank(color)) {\n        rsp.sendError(HttpServletResponse.SC_BAD_REQUEST, \"Color is required\");\n        return;\n    }\n\n    if (StringUtils.isBlank(text)) {\n        rsp.sendError(HttpServletResponse.SC_BAD_REQUEST, \"Text is required\");\n        return;\n    }\n\n    if (StringUtils.isBlank(size)) {\n        rsp.sendError(HttpServletResponse.SC_BAD_REQUEST, \"Size is required\");\n        return;\n    }\n\n    if (StringUtils.isBlank(cache)) {\n        rsp.sendError(HttpServletResponse.SC_BAD_REQUEST, \"Cache is required\");\n        return;\n    }\n\n    final AvatarImage avatarImage = getAvatarImage(avatarId, color, text, size, cache);\n    if (avatarImage == null) {\n        rsp.sendError(HttpServletResponse.SC_NOT_FOUND, \"Avatar image not found\");\n        return;\n    }\n\n    rsp.setContentType(\"image/png\");\n    rsp.setHeader(\"Cache-Control\", \"max-age=\" + avatarImage.getCacheDuration());\n    rsp.setHeader(\"ETag\", avatarImage.getEtag());\n    rsp.setHeader(\"Last-Modified\", avatarImage.getLastModified());\n    rsp.setHeader(\"Expires\", avatarImage.getExpires());\n    rsp.setHeader(\"Vary\", \"Accept-Encoding\");", "CodeBleu_score": 31.32615657823819}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t    String key = req.getRestOfPath();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    try {\n        ImageIO.write(generateImage(key), \"png\", baos);\n    } catch (Exception e) {\n        throw new ServletException(e);\n    }\n    rsp.setContentType(\"image/png\");\n    rsp.setHeader(\"Cache-Control\", \"public, max-age=3600\");\n    rsp.setHeader(\"Expires\", Util.getHttpDate(System.currentTimeMillis() + 3600000L));\n    rsp.setHeader(\"Last-Modified\", Util.getHttpDate(System.currentTimeMillis()));\n    rsp.setHeader(\"ETag\", generateETag(key));\n    rsp.setHeader(\"Vary\", \"Accept-Encoding\");\n    rsp.setHeader(\"Content-Length\", String.valueOf(baos.size()));\n    rsp.setHeader(\"X-Content-Type-Options\", \"nosniff\");\n    rsp.getOutputStream().write(baos.toByteArray());\n    baos.close();\n}", "CodeBleu_score": 39.67788036934062}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t    String url = req.getRestOfPath();\n    if (url.startsWith(\"/\")) {\n        url = url.substring(1);\n    }\n    String[] parts = url.split(\"/\");\n    String avatarId = parts[0];\n    String size = parts.length > 1 ? parts[1] : \"16x16\";\n    String color = parts.length > 2 ? parts[2] : null;\n    String text = parts.length > 3 ? parts[3] : null;\n    String style = parts.length > 4 ? parts[4] : null;\n    String backgroundColor = parts.length > 5 ? parts[5] : null;\n    String textColor = parts.length > 6 ? parts[6] : null;\n    String font = parts.length > 7 ? parts[7] : null;\n    String fontSize = parts.length > 8 ? parts[8] : null;\n    String fontWeight = parts.length > 9 ? parts[9] : null;\n    String fontStyle = parts.length > 10 ? parts[10] : null;\n    String fontVariant = parts.length > 11 ? parts[11] : null;\n    String fontStretch = parts.length > 12 ? parts[12] : null;\n    String fontFamily = parts.length > 13 ? parts[13] : null;\n    String textTransform = parts.length > 14 ? parts[14] : null;\n    String textAlign = parts.length > 15 ? parts[15] : null;\n    String textDecoration = parts.length > 16 ? parts[16] : null;\n    String textShadow = parts.length > 17 ? parts[17] : null;\n    String borderRadius = parts.length > 18 ? parts[18] : null;\n    String borderWidth = parts.length > 19 ? parts[19] : null;\n    String borderColor = parts.length > 20 ? parts[20] : null;\n    String borderStyle = parts.length > 21 ? parts[21] : null;\n    String padding = parts", "CodeBleu_score": 29.16616083403004}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t        this.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n        this.client = createHttpClient();\n        this.context = createHttpContext();\n    }", "CodeBleu_score": 25.95268531013735}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t        this.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n        this.httpClient = buildHttpClient();\n        this.httpClientContext = buildHttpClientContext();\n    }", "CodeBleu_score": 26.338666181421434}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t        this(enableCache, teamCacheDuration, repositoriesCacheDuration, owner, projectKey, repositoryName, authenticator,\n                Jenkins.get().proxy);\n    }", "CodeBleu_score": 9.017837269071123}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    if (pullRequest.getSource() != null) {\n        String sourceBranch = pullRequest.getSource().getBranch().getName();\n        if (sourceBranch != null) {\n            String sourceBranchRawNode = pullRequest.getSource().getBranch().getRawNode();\n            if (sourceBranchRawNode != null) {\n                pullRequest.getSource().setCommitClosure(new CommitClosure(sourceBranchRawNode));\n            }\n        }\n    }\n    if (pullRequest.getDestination() != null) {\n        String destinationBranch = pullRequest.getDestination().getBranch().getName();\n        if (destinationBranch != null) {\n            String destinationBranchRawNode = pullRequest.getDestination().getBranch().getRawNode();\n            if (destinationBranchRawNode != null) {\n                pullRequest.getDestination().setCommitClosure(new CommitClosure(destinationBranchRawNode));\n            }\n        }\n    }\n}", "CodeBleu_score": 40.484687627281225}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    // get source branch\n    BitbucketPullRequestSource source = pullRequest.getSource();\n    if (source != null) {\n        // get source branch closure\n        BitbucketPullRequestCommit sourceBranch = source.getCommit();\n        if (sourceBranch != null) {\n            // get source branch node\n            String sourceBranchNode = sourceBranch.getNode();\n            if (StringUtils.isNotBlank(sourceBranchNode)) {\n                // set source branch closure\n                source.setClosure(new BitbucketPullRequestCommit(sourceBranchNode));\n            }\n        }\n    }\n\n    // get destination branch\n    BitbucketPullRequestDestination destination = pullRequest.getDestination();\n    if (destination != null) {\n        // get destination branch closure\n        BitbucketPullRequestCommit destinationBranch = destination.getCommit();\n        if (destinationBranch != null) {\n            // get destination branch node\n            String destinationBranchNode = destinationBranch.getNode();\n            if (StringUtils.isNotBlank(destinationBranchNode)) {\n                // set destination branch closure\n                destination.setClosure(new BitbucketPullRequestCommit(destinationBranchNode));\n            }\n        }\n    }\n}", "CodeBleu_score": 33.03171190476492}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    String sourceBranch = pullRequest.getSource().getBranch().getName();\n    String destinationBranch = pullRequest.getDestination().getBranch().getName();\n    if (sourceBranch != null) {\n        BitbucketCloudBranch source = getBranch(pullRequest.getSource().getRepository(), sourceBranch);\n        if (source != null) {\n            pullRequest.setSource(source);\n        }\n    }\n    if (destinationBranch != null) {\n        BitbucketCloudBranch destination = getBranch(pullRequest.getDestination().getRepository(), destinationBranch);\n        if (destination != null) {\n            pullRequest.setDestination(destination);\n        }\n    }\n}", "CodeBleu_score": 40.39992124914015}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration locationConfiguration = JenkinsLocationConfiguration.get();\n    if (locationConfiguration == null) {\n        throw new IllegalStateException(\"Jenkins Location Configuration is null\");\n    }\n    URL url = locationConfiguration.getUrl();\n    if (url == null) {\n        throw new IllegalStateException(\"Jenkins Location Configuration URL is null\");\n    }\n    String displayURL = DisplayURLProvider.get().getRunURL(build);\n    if (displayURL == null) {\n        throw new IllegalStateException(\"Display URL for build is null\");\n    }\n    return url + displayURL;\n}", "CodeBleu_score": 48.65114517909735}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration jlc = JenkinsLocationConfiguration.get();\n    if (jlc == null) {\n        throw new IllegalStateException(\"Jenkins Location Configuration is null\");\n    }\n    URL url = jlc.getUrl();\n    if (url == null) {\n        throw new IllegalStateException(\"Jenkins URL is null\");\n    }\n    return DisplayURLProvider.get().getRunURL(build);\n}", "CodeBleu_score": 57.24162548913962}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    final JenkinsLocationConfiguration config = JenkinsLocationConfiguration.get();\n    if (config == null) {\n        throw new IllegalStateException(\"Jenkins location configuration is null\");\n    }\n    final String url = config.getUrl();\n    if (StringUtils.isBlank(url)) {\n        throw new IllegalStateException(\"Jenkins location configuration URL is blank\");\n    }\n    try {\n        return new DisplayURLProvider().getRunURL(build);\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"Invalid URL\", e);\n    }\n}", "CodeBleu_score": 47.23211360174797}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    try {\n        URL u = new URL(url);\n        if (u.getHost().equals(\"localhost\") || u.getHost().equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"The Jenkins URL must be fully qualified and cannot be localhost or unconfigured-jenkins-location\");\n        }\n        if (bitbucket instanceof BitbucketCloudApiClient) {\n            if (!u.getProtocol().equals(\"https\")) {\n                throw new IllegalStateException(\"Bitbucket Cloud API clients must use https\");\n            }\n        }\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"The Jenkins URL must be a valid URL\");\n    }\n    return url;\n}", "CodeBleu_score": 64.75287364865446}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    try {\n        URL u = new URL(url);\n        String host = u.getHost();\n        if (StringUtils.isBlank(host)) {\n            throw new IllegalStateException(\"Jenkins URL is missing a hostname.\");\n        }\n        if (\"localhost\".equals(host)) {\n            throw new IllegalStateException(\"Jenkins URL cannot use \\\"localhost\\\" as the hostname.\");\n        }\n        if (\"unconfigured-jenkins-location\".equals(host)) {\n            throw new IllegalStateException(\"Jenkins URL cannot use \\\"unconfigured-jenkins-location\\\" as the hostname.\");\n        }\n        if (bitbucket instanceof BitbucketCloudApiClient) {\n            if (!host.contains(\".\")) {\n                throw new IllegalStateException(\"Bitbucket Cloud API clients must use a fully qualified hostname.\");\n            }\n        }\n        return u.toString();\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"Jenkins URL is malformed.\", e);\n    }\n}", "CodeBleu_score": 60.50211146036042}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    if (StringUtils.isBlank(url)) {\n        throw new IllegalStateException(\"Jenkins URL cannot be blank\");\n    }\n\n    try {\n        URL jenkinsURL = new URL(url);\n        if (jenkinsURL.getHost().equals(\"localhost\")) {\n            throw new IllegalStateException(\"Jenkins URL cannot use 'localhost' as the host\");\n        }\n\n        if (jenkinsURL.getHost().equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"Jenkins URL cannot use 'unconfigured-jenkins-location' as the host\");\n        }\n\n        if (bitbucket instanceof BitbucketCloudApiClient) {\n            String host = jenkinsURL.getHost();\n            if (!host.equals(\"localhost\") && !host.equals(\"unconfigured-jenkins-location\") && !host.startsWith(\"127.0.0.1\") && !host.startsWith(\"0:0:0:0:0:0:0:1\")) {\n                return url;\n            }\n\n            throw new IllegalStateException(\"Jenkins URL must be fully qualified for Bitbucket Cloud API clients\");\n        }\n\n        return url;\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"Jenkins URL is malformed\");\n    }\n}", "CodeBleu_score": 64.09667097840027}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t    // If notifications are disabled, return\n    if (source.isDisableBitbucketNotifications()) {\n        return;\n    }\n\n    // Get the SCM revision\n    SCMRevision revision = source.fetch(listener, build);\n\n    // If there is no revision, return\n    if (revision == null) {\n        return;\n    }\n\n    // Get the SCM revision action\n    SCMRevisionAction revisionAction = revision.getAction(SCMRevisionAction.class);\n\n    // If there is no action, return\n    if (revisionAction == null) {\n        return;\n    }\n\n    // Get the SCM revision state\n    SCMRevisionState revisionState = revisionAction.getRevisionState();\n\n    // If there is no revision state, return\n    if (revisionState == null) {\n        return;\n    }\n\n    // Get the SCM head\n    SCMHead head = revisionState.getHead();\n\n    // If there is no head, return\n    if (head == null) {\n        return;\n    }\n\n    // Get the SCM head observer\n    SCMHeadObserver headObserver = revisionState.getHeadObserver();\n\n    // If there is no head observer, return\n    if (headObserver == null) {\n        return;\n    }\n\n    // Get the SCM head event\n    SCMHeadEvent headEvent = headObserver.getHeadEvent();\n\n    // If there is no head event, return\n    if (headEvent == null) {\n        return;\n    }\n\n    // Get the SCM head event type\n    SCMHeadEvent.Type headEventType = headEvent.getType();\n\n    // If there is no head event type, return\n    if (headEventType == null) {\n        return;\n    }\n\n    // Get the SCM head event type\n    SCMHeadEvent.Type headEventType = headEvent.getType();\n\n    // If there is no head event type, return\n    if (headEventType == null) {\n        return;\n    }\n\n    // Get the SCM head event type\n    SCMHeadEvent.Type headEventType = headEvent.getType();\n", "CodeBleu_score": 33.578344048083245}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t    BitbucketSCMRevision scmRevision = source.getRevision(build, listener);\n    if (scmRevision == null) {\n        return;\n    }\n    BitbucketBuildStatus.sendNotifications(source, scmRevision, build, listener);\n}", "CodeBleu_score": 10.644361733722176}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\n    // Initialize the Bitbucket context.\n    BitbucketContext context = BitbucketContextFactory.create(source);\n    if (context == null) {\n        return;\n    }\n\n    // Check if notifications are disabled.\n    if (context.isNotificationsDisabled()) {\n        return;\n    }\n\n    // Retrieve the SCM revision and its hash.\n    SCMRevisionAction revisionAction = build.getAction(SCMRevisionAction.class);\n    if (revisionAction == null) {\n        return;\n    }\n\n    SCMRevision revision = revisionAction.getRevision();\n    if (revision == null) {\n        return;\n    }\n\n    String revisionHash = revision.getSha1String();\n\n    // Determine whether to share the build key between branch and PR.\n    boolean shareBuildKey = source.getTraits().get(BitbucketBranchDiscoveryTrait.class).isShareBuildKey();\n\n    // Determine the notification type.\n    String notificationType;\n    if (source.getTraits().get(BitbucketBranchDiscoveryTrait.class).isOriginBranchesDiscoveryTrait()) {\n        notificationType = \"origin\";\n    } else {\n        notificationType = \"pull\";\n    }\n\n    // Construct the build key.\n    String buildKey = String.format(\"%s/%s/%s/%s/%s\", context.getRepositorySlug(), notificationType, revisionHash,\n            build.getParent().getFullName(), build.getNumber());\n\n    // Initialize the Bitbucket client.\n    BitbucketApi api = context.createApi();\n\n    // Send the build status notification.\n    BitbucketBuildStatus.create(api, buildKey, build, listener, shareBuildKey);\n}", "CodeBleu_score": 45.65813616975268}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String buildKey = build.getParent().getFullName();\n    if (shareBuildKeyBetweenBranchAndPR) {\n        buildKey += \"/\" + branch;\n    }\n    return buildKey;\n}", "CodeBleu_score": 33.682346473493965}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String buildKey = StringUtils.EMPTY;\n    if (shareBuildKeyBetweenBranchAndPR) {\n        buildKey = build.getParent().getFullName() + \"/\" + branch;\n    } else {\n        buildKey = build.getParent().getFullName();\n    }\n    return buildKey;\n}", "CodeBleu_score": 51.269489182826966}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String buildKey = null;\n    if (shareBuildKeyBetweenBranchAndPR) {\n        String folderName = build.getParent().getParent().getFullName();\n        buildKey = folderName + \"/\" + branch;\n    } else {\n        buildKey = build.getParent().getFullName();\n    }\n    return buildKey;\n}", "CodeBleu_score": 61.48450953650653}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        // If serverUrl is null, use the first endpoint.\n        BitbucketEndpointConfiguration endpointConfiguration = BitbucketEndpointConfiguration.get();\n        if (endpointConfiguration != null) {\n            BitbucketApi api = BitbucketApiFactory.resolve(endpointConfiguration.getServerUrl());\n            if (api instanceof BitbucketCloudApi) {\n                serverUrl = BitbucketCloudEndpoint.URL;\n            } else if (api instanceof BitbucketServerApi) {\n                serverUrl = BitbucketServerEndpoint.URL;\n            }\n        }\n    }\n\n    if (serverUrl == null) {\n        // If serverUrl is still null, log a warning.\n        LOGGER.log(Level.WARNING, \"BitbucketSCMNavigator.serverUrl is null. This is likely due to a BitbucketSCMNavigator object being deserialized from a version prior to 1.1.0.\");\n    }\n\n    if (traits == null) {\n        // If traits is null, reconstruct legacy traits to reflect legacy behavior.\n        traits = new NamedArrayList<>();\n        traits.add(new WildcardSCMHeadFilterTrait(\".*\"));\n        traits.add(new RegexSCMSourceFilterTrait(\".*\"));\n        traits.add(new Discovery());\n    }\n\n    return this;\n}", "CodeBleu_score": 34.70065865211983}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        LOGGER.log(Level.WARNING, \"BitbucketSCMNavigator.serverUrl is null. This should not happen.\");\n        serverUrl = BitbucketSCMNavigator.getDefaultServerUrl();\n    }\n    if (traits == null) {\n        LOGGER.log(Level.WARNING, \"BitbucketSCMNavigator.traits is null. This should not happen.\");\n        traits = new NamedArrayList<>();\n        if (branchDiscoveryTrait == null) {\n            branchDiscoveryTrait = new BranchDiscoveryTrait(true, false);\n        }\n        if (tagDiscoveryTrait == null) {\n            tagDiscoveryTrait = new TagDiscoveryTrait(true);\n        }\n        if (prDiscoveryTrait == null) {\n            prDiscoveryTrait = new PullRequestDiscoveryTrait(ChangeRequestCheckoutStrategy.MERGE);\n        }\n        if (regexSCMHeadFilterTrait == null) {\n            regexSCMHeadFilterTrait = new WildcardSCMHeadFilterTrait(\"**\");\n        }\n        if (regexSCMSourceFilterTrait == null) {\n            regexSCMSourceFilterTrait = new RegexSCMSourceFilterTrait(\"\");\n        }\n    }\n    return this;\n}", "CodeBleu_score": 33.34559462034397}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        LOGGER.log(Level.WARNING, \"BitbucketSCMNavigator.serverUrl is null, using BitbucketEndpointConfiguration.serverUrl\");\n        serverUrl = BitbucketEndpointConfiguration.get().getServerUrl();\n    }\n    if (traits == null) {\n        LOGGER.log(Level.WARNING, \"BitbucketSCMNavigator.traits is null, reconstructing legacy traits\");\n        traits = new NamedArrayList<>();\n        if (isDiscoverBranches()) {\n            traits.add(new Discovery());\n        }\n        if (isDiscoverTags()) {\n            traits.add(new Discovery());\n        }\n        if (isDiscoverPRFromOrigin()) {\n            traits.add(new WildcardSCMHeadFilterTrait(\"origin/pr/*\"));\n        }\n        if (isDiscoverPRFromForks()) {\n            traits.add(new WildcardSCMHeadFilterTrait(\"refs/pull-requests/*\"));\n        }\n        if (getHeadFilterPattern() != null) {\n            traits.add(new WildcardSCMHeadFilterTrait(getHeadFilterPattern()));\n        }\n        if (getOriginPRFilterPattern() != null) {\n            traits.add(new WildcardSCMHeadFilterTrait(getOriginPRFilterPattern()));\n        }\n        if (getForkPRFilterPattern() != null) {\n            traits.add(new WildcardSCMHeadFilterTrait(getForkPRFilterPattern()));\n        }\n        if (getOriginBranchFilterPattern() != null) {\n            traits.add(new WildcardSCMHeadFilterTrait(getOriginBranchFilterPattern()));\n        }\n        if (getForkBranchFilterPattern() != null) {\n            traits.add(new WildcardSCMHeadFilterTrait(getForkBranchFilterPattern()));\n        }\n        if (getOriginPRStatusFilter() != null) {\n            traits.add(new RegexSCMSourceFilterTrait(getOriginPRStatusFilter()));\n        }\n        if (getForkPRStatusFilter() != null) {\n            traits.add(new RegexSC", "CodeBleu_score": 42.38968175162361}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\t    BitbucketRepository repository = BitbucketSCMSource.getRepo(name);\n    if (repository == null) {\n        LOGGER.log(Level.WARNING, \"Could not find repository {0}\", name);\n        return;\n    }\n    if (isMatch) {\n        repository.incrementProposedCount();\n        LOGGER.log(Level.FINE, \"Proposed repository {0}\", name);\n    } else {\n        repository.incrementIgnoredCount();\n        LOGGER.log(Level.FINE, \"Ignored repository {0}\", name);\n    }\n}", "CodeBleu_score": 46.453752265194495}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t    BitbucketRepository repository = getRepository(name);\n    if (repository != null) {\n        if (isMatch) {\n            LOGGER.log(Level.FINE, \"Proposed {0}\", repository.getFullName());\n            repository.setProposed(repository.getProposed() + 1);\n        } else {\n            LOGGER.log(Level.FINE, \"Ignored {0}\", repository.getFullName());\n            repository.setIgnored(repository.getIgnored() + 1);\n        }\n    }\n}", "CodeBleu_score": 45.14713314973085}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t    BitbucketSCMSource source = (BitbucketSCMSource) SCMSource.SourceByItem.findSource(Jenkins.get(), this);\n    if (source == null) {\n        LOGGER.log(Level.WARNING, \"Could not find BitbucketSCMSource for {0}\", name);\n        return;\n    }\n    BitbucketSCMSourceContext context = source.getContext();\n    if (context == null) {\n        LOGGER.log(Level.WARNING, \"Could not find BitbucketSCMSourceContext for {0}\", name);\n        return;\n    }\n    BitbucketSCMNavigator navigator = (BitbucketSCMNavigator) context.getOwner();\n    if (navigator == null) {\n        LOGGER.log(Level.WARNING, \"Could not find BitbucketSCMNavigator for {0}\", name);\n        return;\n    }\n    BitbucketSCMSourceOwner owner = navigator.getOwner();\n    if (owner == null) {\n        LOGGER.log(Level.WARNING, \"Could not find BitbucketSCMSourceOwner for {0}\", name);\n        return;\n    }\n    BitbucketSCMSourceRequest request = new BitbucketSCMSourceContext(null, null, null).newRequest(owner, null);\n    request.wantBranches(true);\n    request.wantTags(true);\n    SCMHeadObserver observer = new SCMHeadObserver() {\n        @Override\n        public void observe(SCMHead head, SCMRevision revision) {\n            if (head instanceof BitbucketSCMHead) {\n                BitbucketSCMHead bbHead = (BitbucketSCMHead) head;\n                if (StringUtils.equals(name, bbHead.getName())) {\n                    if (isMatch) {\n                        navigator.recordMatch(bbHead);\n                    } else {\n                        navigator.recordIgnore(bbHead);\n                    }\n                }\n            }\n        }\n    };\n    try {\n        SCMSourceCriteria.Probe probe = new SCMSourceCriteria.Probe(request, observer);\n        probe.probe(source);\n    } catch (IOException | InterruptedException e", "CodeBleu_score": 36.323435077535436}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t\n    // If we're not building a branch, we don't need to do anything.\n    if (!marked.getBranches().isEmpty()) {\n        return rev;\n    }\n\n    // If we're not building a branch, we don't need to do anything.\n    if (rev.getBranches().isEmpty()) {\n        return rev;\n    }\n\n    // If we're not building a branch, we don't need to do anything.\n    if (rev.getBranches().size() > 1) {\n        return rev;\n    }\n\n    // If we're not building a branch, we don't need to do anything.\n    if (rev.getBranches().get(0).getName() == null) {\n        return rev;\n    }\n\n    // If we're not building a branch, we don't need to do anything.\n    if (rev.getBranches().get(0).getName().startsWith(\"origin/\")) {\n        return rev;\n    }\n\n    // If we're not building a branch, we don't need to do anything.\n    if (rev.getBranches().get(0).getName().startsWith(\"refs/remotes/origin/\")) {\n        return rev;\n    }\n\n    // If we're not building a branch, we don't need to do anything.\n    if (rev.getBranches().get(0).getName().startsWith(\"refs/heads/\")) {\n        return rev;\n    }\n\n    // If we're not building a branch, we don't need to do anything.\n    if (rev.getBranches().get(0).getName().startsWith(\"refs/remotes/\")) {\n        return rev;\n    }\n\n    // If we're not building a branch, we don't need to do anything.\n    if (rev.getBranches().get(0).getName().startsWith(\"refs/tags/\")) {\n        return rev;\n    }\n\n    // If we're not building a branch, we don't need to do anything.\n    if (rev.getBranches().get(0).getName().startsWith(\"", "CodeBleu_score": 24.648617888435577}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t\n    // Get the clone link\n    String cloneLink = getCloneLink(scm);\n    if (cloneLink == null) {\n        return rev;\n    }\n\n    // Get the list of branches to fetch\n    List<String> branchesToFetch = getBranchesToFetch(scm, rev.getSha1());\n\n    // If there are no branches to fetch, return the given revision\n    if (branchesToFetch.isEmpty()) {\n        return rev;\n    }\n\n    // Get the list of branches that don't exist locally\n    List<String> branchesToFetchList = getBranchesToFetchList(scm, rev.getSha1());\n\n    // If there are no branches to fetch, return the given revision\n    if (branchesToFetchList.isEmpty()) {\n        return rev;\n    }\n\n    // Create the list of RefSpecs\n    List<RefSpec> refSpecs = branchesToFetchList.stream().map(branch -> new RefSpec(branch + \":\" + branch)).collect(Collectors.toList());\n\n    // Fetch the missing commits from the remote repository\n    try {\n        FetchCommand fetch = git.fetch_().from(new URIish(cloneLink), refSpecs);\n        fetch.execute();\n    } catch (URISyntaxException | GitException e) {\n        listener.getLogger().println(\"Error fetching missing commits from remote repository: \" + e.getMessage());\n        return rev;\n    }\n\n    // Return the given revision\n    return rev;\n}", "CodeBleu_score": 46.07146975429684}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t\n    // If the branch is not a hash, we don't need to fetch.\n    if (!rev.getSha1String().matches(\"^[0-9a-fA-F]{40}$\")) {\n        return rev;\n    }\n\n    // Get the clone link from the GitSCM.\n    URIish cloneLink;\n    try {\n        cloneLink = new URIish(scm.getUserRemoteConfigs().get(0).getUrl());\n    } catch (URISyntaxException e) {\n        listener.getLogger().println(\"Failed to get clone link from GitSCM. This is likely a bug. Please report it.\");\n        e.printStackTrace(listener.getLogger());\n        return rev;\n    }\n\n    // Get the branches with hashes.\n    List<RefSpec> refSpecs = scm.getExtensions().stream()\n        .filter(ext -> ext instanceof GitSCMExtension)\n        .map(ext -> (GitSCMExtension)ext)\n        .flatMap(ext -> ext.getRefSpecs().stream())\n        .filter(refSpec -> refSpec.getSource().matches(\"^[0-9a-fA-F]{40}$\"))\n        .collect(Collectors.toList());\n\n    // If there are no branches with hashes, we don't need to fetch.\n    if (refSpecs.isEmpty()) {\n        return rev;\n    }\n\n    // Fetch the missing commits.\n    listener.getLogger().println(\"Fetching missing commits...\");\n    FetchCommand fetch = git.fetch_();\n    for (RefSpec refSpec : refSpecs) {\n        fetch.refspec(refSpec);\n    }\n    fetch.repositoryUrl(cloneLink);\n    try {\n        fetch.execute();\n    } catch (GitException e) {\n        listener.getLogger().println(\"Failed to fetch missing commits. This is likely a bug. Please report it.\");\n        e.printStackTrace(listener.getLogger());\n        return rev;\n    }\n\n    // Return the revision.\n    return rev;\n}", "CodeBleu_score": 46.67298031916799}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> linksMap = new HashMap<>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        if (entry.getValue() != null && !entry.getValue().isEmpty()) {\n            linksMap.put(entry.getKey(), entry.getValue().get(0));\n        }\n    }\n    return linksMap;\n}", "CodeBleu_score": 75.6574371360383}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue().get(0));\n    }\n    return result;\n}", "CodeBleu_score": 74.17503757459158}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue().get(0));\n    }\n    return result;\n}", "CodeBleu_score": 74.17503757459158}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tif (resourceStates.length === 0) {\n\t\treturn;\n\t}\n\tconst resourcesByRepository = groupBy(resourceStates, r => r.resourceUri.authority);\n\tfor (const [repository, resources] of resourcesByRepository) {\n\t\tconst repositoryPath = this.getRepositoryPath(repository);\n\t\tif (!repositoryPath) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst paths = resources.map(r => r.resourceUri.fsPath);\n\t\ttry {\n\t\t\tawait this.runByRepository(repositoryPath, async () => {\n\t\t\t\tawait this.git.add(paths);\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tLogger.error(err);\n\t\t\tvoid window.showErrorMessage(`Error adding files to repository: ${err.message}`);\n\t\t}\n\t}\n}", "CodeBleu_score": 46.76355216170081}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t    if (resourceStates.length === 0) {\n        return;\n    }\n\n    // Get the selected resources and their URIs.\n    const resources = resourceStates.map(r => r.resourceUri);\n\n    // Get the repositories for each resource.\n    const repositories = this.getRepositoriesForResources(resources);\n\n    // Convert the resources to file paths.\n    const paths = resources.map(r => this.toFilePath(r));\n\n    // Add the files to each repository.\n    for (const [repository, files] of repositories) {\n        try {\n            await repository.add(files);\n        } catch (err) {\n            this.logError(err);\n            window.showErrorMessage(`Unable to add files to repository '${repository.rootUri.fsPath}'.`);\n        }\n    }\n}", "CodeBleu_score": 53.23349522288032}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tif (resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\t// Get the selected resources and map them to their URIs.\n\tconst resources = this.getResources(resourceStates);\n\tif (resources.length === 0) {\n\t\treturn;\n\t}\n\n\t// Group the resources by repository.\n\tconst repositories = this.groupByRepository(resources);\n\tif (repositories.length === 0) {\n\t\treturn;\n\t}\n\n\t// Add the resources to each repository.\n\tfor (const repository of repositories) {\n\t\tconst paths = resources.map(r => r.resourceUri.fsPath);\n\t\ttry {\n\t\t\tawait repository.add(paths);\n\t\t} catch (ex) {\n\t\t\tthis.logError(ex);\n\t\t\twindow.showErrorMessage(`Unable to add ${paths.join(', ')} to ${repository.rootUri.fsPath}`);\n\t\t}\n\t}\n}", "CodeBleu_score": 48.733400001209404}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\t  protected async getResourceStates(\n    resourceStates: SourceControlResourceState[]\n  ): Promise<Resource[]> {\n    if (resourceStates.length === 0) {\n      const svnUri = await this.getSvnUri();\n      if (!svnUri) {\n        return [];\n      }\n      resourceStates = [\n        new Resource(svnUri, await this.getStatus(svnUri))\n      ];\n    }\n    if (!(resourceStates[0] instanceof Uri)) {\n      const svnUri = await this.getSvnUri();\n      if (!svnUri) {\n        return [];\n      }\n      resourceStates = [\n        new Resource(svnUri, await this.getStatus(svnUri))\n      ];\n    }\n    return resourceStates.filter(\n      resourceState => resourceState instanceof Resource\n    ) as Resource[];\n  }\n}", "CodeBleu_score": 51.876480012744054}, {"code": "protected async getResourceStates{\n\t  /**\n   * This async function retrieves resource states for source control. It first checks if the provided resource states are empty or if the first resource URI is not an instance of Uri. If so, it attempts to get a single SCM resource and updates the resource states. Finally, it filters and returns the resource states that are instances of Resource.\n   */\n  protected async getResourceStates(\n    resourceStates: SourceControlResourceState[]\n  ): Promise<Resource[]> {\n    if (!resourceStates || resourceStates.length === 0) {\n      const uri = await this.getSCMResource();\n      if (uri) {\n        resourceStates = [\n          new Resource(\n            uri,\n            await this.getStatus(uri),\n            await this.getSvnUriAction(uri)\n          )\n        ];\n      }\n    }\n\n    if (resourceStates && resourceStates.length > 0) {\n      if (!(resourceStates[0].resourceUri instanceof Uri)) {\n        return [];\n      }\n\n      resourceStates = resourceStates.filter(\n        resourceState => resourceState instanceof Resource\n      );\n\n      return resourceStates as Resource[];\n    }\n\n    return [];\n  }\n\n  /**\n   * This async function retrieves resource states for source control. It first checks if the provided resource states are empty or if the first resource URI is not an instance of Uri. If so, it attempts to get a single SCM resource and updates the resource states. Finally, it filters and returns the resource states that are instances of Resource.\n   */\n  protected async getResourceStates(\n    resourceStates: SourceControlResourceState[]\n  ): Promise<Resource[]> {\n    if (!resourceStates || resourceStates.length === 0) {\n      const uri = await this.getSCMResource();\n      if (uri) {\n        resourceStates = [\n          new Resource(\n            uri,\n            await this.getStatus(uri),\n            await this.getSvnUriAction(uri)\n          )\n        ];\n      }\n    }\n\n    if (resourceStates && resourceStates.length > 0) {\n      if (!(resourceStates[0].resourceUri instanceof Uri", "CodeBleu_score": 50.01469405685922}, {"code": "protected async getResourceStates{\n\t  /**\n   * This async function retrieves resource states for source control. It first checks if the provided resource states are empty or if the first resource URI is not an instance of Uri. If so, it attempts to get a single SCM resource and updates the resource states. Finally, it filters and returns the resource states that are instances of Resource.\n   */\n  protected async getResourceStates(\n    resourceStates: SourceControlResourceState[]\n  ): Promise<SourceControlResourceState[]> {\n    /**\n     * This async function retrieves resource states for source control. It first checks if the provided resource states are empty or if the first resource URI is not an instance of Uri. If so, it attempts to get a single SCM resource and updates the resource states. Finally, it filters and returns the resource states that are instances of Resource.\n     */\n    if (!resourceStates.length || !(resourceStates[0].resourceUri instanceof Uri)) {\n      /**\n       * This async function retrieves resource states for source control. It first checks if the provided resource states are empty or if the first resource URI is not an instance of Uri. If so, it attempts to get a single SCM resource and updates the resource states. Finally, it filters and returns the resource states that are instances of Resource.\n       */\n      const resource = await this.getResource(resourceStates[0]?.resourceUri);\n      /**\n       * This async function retrieves resource states for source control. It first checks if the provided resource states are empty or if the first resource URI is not an instance of Uri. If so, it attempts to get a single SCM resource and updates the resource states. Finally, it filters and returns the resource states that are instances of Resource.\n       */\n      if (resource) {\n        /**\n         * This async function retrieves resource states for source control. It first checks if the provided resource states are empty or if the first resource URI is not an instance of Uri. If so, it attempts to get a single SCM resource and updates the resource states. Finally, it filters and returns the resource states that are instances of Resource.\n         */\n        resourceStates = [resource];\n      }\n    }\n    /**\n     * This async function retrieves resource states for source control. It first checks if the provided resource states are empty or if the first resource URI is", "CodeBleu_score": 47.91097646537299}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    const svnUri = uri ? uri.toString(true) : window.activeTextEditor?.document.uri.toString(true);\n    if (!svnUri) {\n      return undefined;\n    }\n\n    const svnUriAction = fromSvnUri(svnUri);\n    if (svnUriAction === SvnUriAction.NotASvnUri) {\n      return undefined;\n    }\n\n    const fileUri = toSvnUri(svnUri);\n    const repository = await this.getRepository(fileUri);\n    if (!repository) {\n      return undefined;\n    }\n\n    return repository.getResource(fileUri);\n  }", "CodeBleu_score": 39.39060413646447}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    if (!uri) {\n      const editor = window.activeTextEditor;\n      if (editor) {\n        uri = editor.document.uri;\n      }\n    }\n\n    if (!uri || uri.scheme !== \"svn\") {\n      uri = toSvnUri(uri);\n    }\n\n    const scm = await this.getSourceControlManager();\n    if (!scm) {\n      return undefined;\n    }\n\n    const repository = await scm.getRepository(uri);\n    if (!repository) {\n      return undefined;\n    }\n\n    return repository.getResource(uri);\n  }", "CodeBleu_score": 44.21341418824751}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    const svnUri = uri ? fromSvnUri(uri) : fromSvnUri(window.activeTextEditor?.document.uri);\n    if (!svnUri) {\n      return undefined;\n    }\n    const svnDir = getSvnDir(svnUri.fsPath);\n    if (!svnDir) {\n      return undefined;\n    }\n    const repository = await this.getRepository(svnDir);\n    if (!repository) {\n      return undefined;\n    }\n    return repository.getResource(svnUri);\n  }", "CodeBleu_score": 38.28940877256491}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\t    const { path, status, revision } = element;\n    const repo = await this.getRepo(path);\n    if (!repo) {\n      return;\n    }\n    const remotePath = await repo.getRemotePath(path);\n    if (!remotePath) {\n      return;\n    }\n    if (status === Status.Added) {\n      await openFileRemote(repo, remotePath, revision);\n    } else {\n      const oldRevision = await repo.getOldRevision(path);\n      await openDiff(repo, remotePath, oldRevision, revision);\n    }\n  }", "CodeBleu_score": 33.98429892610111}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t  if (element.status === Status.Modified) {\n    const oldFile = await this.getRemoteFile(element.path, element.oldRevision);\n    const newFile = await this.getRemoteFile(element.path, element.newRevision);\n    openDiff(oldFile, newFile);\n  } else if (element.status === Status.Added) {\n    const remoteFile = await this.getRemoteFile(element.path, element.newRevision);\n    openFileRemote(remoteFile);\n  }\n}", "CodeBleu_score": 41.20767680696681}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t    try {\n      if (element.status === Status.Added) {\n        await openFileRemote(element.path, element.newRevision);\n      } else if (element.status === Status.Modified) {\n        await openDiff(element.path, element.oldRevision, element.newRevision);\n      }\n    } catch (err) {\n      window.showErrorMessage(err.message);\n    }\n  }", "CodeBleu_score": 33.2878438759415}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t  if (env.clipboard.writeText) {\n    if (what === \"message\") {\n      await env.clipboard.writeText(item.commitMessage);\n    } else if (what === \"revision\") {\n      await env.clipboard.writeText(item.commitRevision);\n    }\n  } else {\n    window.showErrorMessage(\"Clipboard is not supported\");\n  }\n}", "CodeBleu_score": 30.01492813301232}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t  const svnRI = SvnRI.get();\n  const clipboard = window.activeTextEditor?.document.getText(window.activeTextEditor.selection);\n  if (!clipboard) {\n    window.showErrorMessage(\"Please select a commit to copy to the clipboard.\");\n    return;\n  }\n  if (what === \"message\") {\n    await env.clipboard.writeText(item.commit.message);\n    window.showInformationMessage(`Copied commit message to clipboard.`);\n  } else if (what === \"revision\") {\n    await env.clipboard.writeText(item.commit.revision);\n    window.showInformationMessage(`Copied commit revision to clipboard.`);\n  } else if (what === \"author\") {\n    await env.clipboard.writeText(item.commit.author);\n    window.showInformationMessage(`Copied commit author to clipboard.`);\n  } else if (what === \"date\") {\n    await env.clipboard.writeText(item.commit.date);\n    window.showInformationMessage(`Copied commit date to clipboard.`);\n  } else if (what === \"url\") {\n    await env.clipboard.writeText(item.commit.url);\n    window.showInformationMessage(`Copied commit url to clipboard.`);\n  } else if (what === \"diff\") {\n    await env.clipboard.writeText(item.commit.diff);\n    window.showInformationMessage(`Copied commit diff to clipboard.`);\n  } else if (what === \"hash\") {\n    await env.clipboard.writeText(item.commit.hash);\n    window.showInformationMessage(`Copied commit hash to clipboard.`);\n  } else if (what === \"all\") {\n    await env.clipboard.writeText(item.commit.message + \"", "CodeBleu_score": 33.83585978887367}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t  if (window.activeTextEditor?.document.languageId !== \"svn-log\") {\n    window.showErrorMessage(\"Please open a log file in the active editor to copy commit information.\");\n    return;\n  }\n\n  const commit = item.commit;\n  if (!commit) {\n    window.showErrorMessage(\"Please select a commit to copy.\");\n    return;\n  }\n\n  if (what === \"message\") {\n    await env.clipboard.writeText(commit.message);\n  } else if (what === \"revision\") {\n    await env.clipboard.writeText(commit.revision);\n  }\n}", "CodeBleu_score": 35.637187162178584}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    GiteaConnectionFactory[] factories = ServiceLoader.load(GiteaConnectionFactory.class).toArray(new GiteaConnectionFactory[0]);\n    for (GiteaConnectionFactory factory : factories) {\n        if (factory.canOpen(this)) {\n            return factory.open(this);\n        }\n    }\n    throw new IOException(\"No suitable GiteaConnectionFactory found\");\n}", "CodeBleu_score": 29.451416911333933}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    final GiteaConnectionFactory[] factories = ServiceLoader.load(GiteaConnectionFactory.class, Jenkins.getInstance().pluginManager.uberClassLoader).toArray(new GiteaConnectionFactory[0]);\n    GiteaConnectionFactory factory = null;\n    for (GiteaConnectionFactory f : factories) {\n        if (f.canOpen(this)) {\n            if (factory == null || factory.getPriority() < f.getPriority()) {\n                factory = f;\n            }\n        }\n    }\n    if (factory == null) {\n        throw new IOException(\"No suitable GiteaConnectionFactory found\");\n    }\n    return factory.open(this);\n}", "CodeBleu_score": 41.97660275452618}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    final ServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class);\n    final GiteaConnectionFactory factory = loader.stream()\n            .filter(GiteaConnectionFactory::canOpen)\n            .max((a, b) -> Integer.compare(a.getPriority(), b.getPriority()))\n            .orElseThrow(() -> new IOException(\"No suitable GiteaConnectionFactory found\"));\n    return factory.open();\n}", "CodeBleu_score": 25.27998383730213}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\t    Jenkins jenkins = Jenkins.getInstanceOrNull();\n    ClassLoader cl = jenkins != null ? jenkins.getPluginManager().uberClassLoader : Gitea.class.getClassLoader();\n    return new Gitea(cl);\n}", "CodeBleu_score": 53.14282544830655}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t    Jenkins jenkins = Jenkins.getInstanceOrNull();\n    ClassLoader classLoader;\n    if (jenkins != null) {\n        classLoader = jenkins.pluginManager.uberClassLoader;\n    } else {\n        classLoader = getClass().getClassLoader();\n    }\n    return new Gitea(classLoader);\n}", "CodeBleu_score": 45.911309373495186}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t    Jenkins jenkins = Jenkins.getInstance();\n    ClassLoader cl;\n    if (jenkins != null) {\n        cl = jenkins.pluginManager.uberClassLoader;\n    } else {\n        cl = getClass().getClassLoader();\n    }\n    return new Gitea(cl);\n}", "CodeBleu_score": 46.92380143696491}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = StringUtils.defaultIfBlank(displayName, SCMName.of(serverUrl).get());\n    this.serverUrl = Util.fixEmptyAndTrim(serverUrl);\n    this.manageHooks = manageHooks;\n    this.credentialsId = manageHooks ? Util.fixEmptyAndTrim(credentialsId) : null;\n    this.aliasUrl = Util.fixEmptyAndTrim(aliasUrl);\n}", "CodeBleu_score": 45.0081537674319}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = displayName;\n    this.serverUrl = serverUrl;\n    this.manageHooks = manageHooks;\n    this.credentialsId = credentialsId;\n    this.aliasUrl = aliasUrl;\n}", "CodeBleu_score": 22.80247048901313}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = StringUtils.isNotBlank(displayName) ? displayName : SCMName.of(serverUrl).get();\n    this.serverUrl = Util.fixEmptyAndTrim(serverUrl);\n    this.manageHooks = manageHooks;\n    this.credentialsId = StringUtils.isNotBlank(credentialsId) ? credentialsId : null;\n    this.aliasUrl = Util.fixEmptyAndTrim(aliasUrl);\n}", "CodeBleu_score": 46.84625654146514}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t        ListBoxModel items = new ListBoxModel();\n        items.add(\"\");\n        if (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n            return items;\n        }\n        try {\n            String normalizedUrl = normalizeUrl(serverUrl);\n            if (normalizedUrl == null) {\n                return items;\n            }\n            List<StandardCredentials> credentials = CredentialsProvider.lookupCredentials(\n                    StandardCredentials.class,\n                    Jenkins.get(),\n                    ACL.SYSTEM,\n                    URIRequirementBuilder.fromUri(normalizedUrl).build()\n            );\n            items.addAll(\n                    CredentialsMatchers.filter(\n                            credentials,\n                            CredentialsMatchers.anyOf(\n                                    CredentialsMatchers.instanceOf(StandardUsernamePasswordCredentials.class),\n                                    CredentialsMatchers.instanceOf(StandardListBoxModel.Option.class)\n                            )\n                    )\n            );\n        } catch (MalformedURLException e) {\n            // ignore\n        }\n        return items;\n    }", "CodeBleu_score": 41.24866193325139}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    if (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n      return new StandardListBoxModel().includeCurrentValue(serverUrl);\n    }\n    try {\n      return new StandardListBoxModel()\n        .includeEmptyValue()\n        .includeMatchingAs(ACL.SYSTEM, Jenkins.get(), StandardCredentials.class,\n          URIRequirementBuilder.fromUri(serverUrl).build(), CredentialsMatchers.always())\n        .includeMatchingAs(ACL.SYSTEM, Jenkins.get(), StandardUsernamePasswordCredentials.class,\n          URIRequirementBuilder.fromUri(serverUrl).build(), CredentialsMatchers.always());\n    } catch (MalformedURLException e) {\n      return new StandardListBoxModel().includeCurrentValue(serverUrl);\n    }\n  }", "CodeBleu_score": 48.57020048602477}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    return new StandardListBoxModel()\n            .includeEmptyValue()\n            .includeMatchingAs(\n                    ACL.SYSTEM,\n                    Jenkins.get(),\n                    StandardCredentials.class,\n                    URIRequirementBuilder.fromUri(serverUrl).build(),\n                    CredentialsMatchers.always()\n            );\n}", "CodeBleu_score": 32.11681428147563}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return null;\n    }\n\n    serverUrl = serverUrl.trim();\n    if (serverUrl.isEmpty()) {\n        return null;\n    }\n\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        String host = uri.getHost();\n        int port = uri.getPort();\n\n        if (scheme == null) {\n            scheme = \"http\";\n        }\n\n        if (host == null) {\n            return null;\n        }\n\n        if (port == -1) {\n            if (\"http\".equals(scheme)) {\n                port = 80;\n            } else if (\"https\".equals(scheme)) {\n                port = 443;\n            }\n        }\n\n        if (port != -1) {\n            serverUrl = String.format(\"%s://%s:%d\", scheme, host, port);\n        } else {\n            serverUrl = String.format(\"%s://%s\", scheme, host);\n        }\n\n        if (serverUrl.endsWith(\"/\")) {\n            serverUrl = serverUrl.substring(0, serverUrl.length() - 1);\n        }\n    } catch (URISyntaxException e) {\n        // ignore\n    }\n\n    return serverUrl;\n}", "CodeBleu_score": 49.61302769682204}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return null;\n    }\n\n    try {\n        URI uri = new URI(serverUrl);\n\n        String scheme = uri.getScheme();\n        if (scheme == null) {\n            return null;\n        }\n\n        String host = uri.getHost();\n        if (host == null) {\n            return null;\n        }\n\n        int port = uri.getPort();\n\n        if (port == -1) {\n            if (scheme.equalsIgnoreCase(\"http\")) {\n                port = 80;\n            } else if (scheme.equalsIgnoreCase(\"https\")) {\n                port = 443;\n            }\n        }\n\n        StringBuilder sb = new StringBuilder();\n        sb.append(scheme).append(\"://\").append(host);\n        if (port != -1 && (scheme.equalsIgnoreCase(\"http\") || scheme.equalsIgnoreCase(\"https\"))) {\n            sb.append(\":\").append(port);\n        }\n\n        String path = uri.getPath();\n        if (path != null) {\n            if (path.endsWith(\"/\")) {\n                sb.append(path.substring(0, path.length() - 1));\n            } else {\n                sb.append(path);\n            }\n        }\n\n        return sb.toString();\n    } catch (URISyntaxException e) {\n        return null;\n    }\n}", "CodeBleu_score": 41.73476080017188}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return null;\n    }\n\n    // Convert to lowercase\n    serverUrl = serverUrl.toLowerCase(Locale.ENGLISH);\n\n    // Remove default ports\n    if (serverUrl.startsWith(\"http://\") && serverUrl.endsWith(\":80\")) {\n        serverUrl = serverUrl.substring(0, serverUrl.length() - 3);\n    } else if (serverUrl.startsWith(\"https://\") && serverUrl.endsWith(\":443\")) {\n        serverUrl = serverUrl.substring(0, serverUrl.length() - 4);\n    }\n\n    // Ensure the URL is properly formatted\n    try {\n        URI uri = new URI(serverUrl);\n        if (uri.getHost() == null) {\n            return null;\n        }\n        serverUrl = uri.toString();\n    } catch (URISyntaxException e) {\n        return null;\n    }\n\n    // Remove trailing slash\n    if (serverUrl.endsWith(\"/\")) {\n        serverUrl = serverUrl.substring(0, serverUrl.length() - 1);\n    }\n\n    return serverUrl;\n}", "CodeBleu_score": 34.344583055692674}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\t\n    ListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : ExtensionList.lookup(GiteaServer.class)) {\n        items.add(server.getDisplayName(), server.getServerUrl());\n    }\n    return items;\n}", "CodeBleu_score": 33.70380745953994}, {"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        items.add(server.getDisplayName(), server.getServerUrl());\n    }\n    return items;\n}", "CodeBleu_score": 32.573212658762834}, {"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel items = new ListBoxModel();\n    List<GiteaServer> servers = getServers();\n    for (GiteaServer server : servers) {\n        items.add(server.getDisplayName(), server.getServerUrl());\n    }\n    return items;\n}", "CodeBleu_score": 30.346698308354913}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    if (servers == null) {\n        servers = new ArrayList<>();\n    }\n    Set<String> serverUrls = new HashSet<>();\n    List<GiteaServer> newServers = new ArrayList<>();\n    for (GiteaServer server : servers) {\n        if (server == null) {\n            continue;\n        }\n        String serverUrl = server.getServerUrl();\n        if (serverUrls.contains(serverUrl)) {\n            continue;\n        }\n        serverUrls.add(serverUrl);\n        newServers.add(server);\n    }\n    this.servers = newServers;\n    save();\n}", "CodeBleu_score": 46.47811850548167}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    List<GiteaServer> newServers = new ArrayList<>();\n    Set<String> serverUrls = new HashSet<>();\n    for (GiteaServer server : servers) {\n        String url = server.getServerUrl();\n        if (StringUtils.isBlank(url)) {\n            continue;\n        }\n        try {\n            new URI(url);\n        } catch (URISyntaxException e) {\n            continue;\n        }\n        if (!serverUrls.add(url)) {\n            continue;\n        }\n        newServers.add(server);\n    }\n    Collections.sort(newServers);\n    this.servers = newServers;\n    save();\n}", "CodeBleu_score": 44.89880403722765}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    if (servers == null) {\n        servers = Collections.emptyList();\n    }\n    // remove duplicates\n    Set<String> serverUrls = new HashSet<>();\n    List<GiteaServer> newServers = new ArrayList<>();\n    for (GiteaServer server : servers) {\n        String url = server.getUrl();\n        if (StringUtils.isBlank(url)) {\n            continue;\n        }\n        if (serverUrls.contains(url)) {\n            continue;\n        }\n        serverUrls.add(url);\n        newServers.add(server);\n    }\n    // remove empty URLs\n    Iterator<GiteaServer> it = newServers.iterator();\n    while (it.hasNext()) {\n        GiteaServer server = it.next();\n        String url = server.getUrl();\n        if (StringUtils.isBlank(url)) {\n            it.remove();\n        }\n    }\n    this.servers = newServers;\n    save();\n}", "CodeBleu_score": 52.45470538223349}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    if (StringUtils.isBlank(serverUrl)) {\n        return false;\n    }\n    serverUrl = normalizeServerUrl(serverUrl);\n    List<GiteaServer> servers = getServers();\n    for (Iterator<GiteaServer> it = servers.iterator(); it.hasNext(); ) {\n        GiteaServer server = it.next();\n        if (server.getServerUrl().equals(serverUrl)) {\n            it.remove();\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 40.7571968319568}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    if (StringUtils.isBlank(serverUrl)) {\n        return false;\n    }\n\n    serverUrl = Util.fixEmptyAndTrim(serverUrl);\n    if (serverUrl == null) {\n        return false;\n    }\n\n    try {\n        URI uri = new URI(serverUrl);\n        serverUrl = uri.normalize().toString();\n    } catch (URISyntaxException e) {\n        return false;\n    }\n\n    // Remove the matching server from the list\n    Iterator<GiteaServer> it = servers.iterator();\n    while (it.hasNext()) {\n        GiteaServer server = it.next();\n        if (server.getServerUrl().equals(serverUrl)) {\n            it.remove();\n            break;\n        }\n    }\n\n    // Update the server list\n    save();\n\n    return true;\n}", "CodeBleu_score": 40.254724078718354}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return false;\n    }\n    String normalizedServerUrl = normalizeServerUrl(serverUrl);\n    Iterator<GiteaServer> it = servers.iterator();\n    while (it.hasNext()) {\n        GiteaServer giteaServer = it.next();\n        if (giteaServer.getServerUrl().equals(normalizedServerUrl)) {\n            it.remove();\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 36.6663015121553}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {\n        if (element.getKind() == ElementKind.FIELD) {\n            VariableElement field = (VariableElement) element;\n            AnnotationMirror annotationMirror = field.getAnnotationMirrors().stream()\n                    .filter(mirror -> mirror.getAnnotationType().toString().equals(annotation.getQualifiedName().toString()))\n                    .findFirst().orElse(null);\n            if (annotationMirror != null) {\n                Map<String, String> attributes = Maps.newHashMap();\n                for (Map.Entry<? extends ExecutableElement, ? extends AnnotationValue> entry : annotationMirror.getElementValues().entrySet()) {\n                    ExecutableElement key = entry.getKey();\n                    AnnotationValue value = entry.getValue();\n                    attributes.put(key.getSimpleName().toString(), value.getValue().toString());\n                }\n                descriptorElements.add(new ConfigElement(field.getSimpleName().toString(), field.asType().toString(), attributes));\n            }\n        }\n    }\n}", "CodeBleu_score": 31.942800209428068}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {\n        if (element.getKind() == ElementKind.FIELD) {\n            VariableElement variableElement = (VariableElement) element;\n            String name = variableElement.getSimpleName().toString();\n            String type = variableElement.asType().toString();\n            Map<String, String> attributes = Maps.newHashMap();\n            for (AnnotationMirror annotationMirror : variableElement.getAnnotationMirrors()) {\n                for (Map.Entry<? extends ExecutableElement, ? extends AnnotationValue> entry : annotationMirror.getElementValues().entrySet()) {\n                    ExecutableElement key = entry.getKey();\n                    AnnotationValue value = entry.getValue();\n                    if (key.getSimpleName().contentEquals(\"value\")) {\n                        attributes.put(\"value\", value.getValue().toString());\n                    } else {\n                        attributes.put(key.getSimpleName().toString(), value.getValue().toString());\n                    }\n                }\n            }\n            descriptorElements.add(new ConfigElement(name, type, attributes));\n        } else if (element.getKind() == ElementKind.METHOD) {\n            ExecutableElement methodElement = (ExecutableElement) element;\n            String name = methodElement.getSimpleName().toString();\n            String type = methodElement.getReturnType().toString();\n            Map<String, String> attributes = Maps.newHashMap();\n            for (AnnotationMirror annotationMirror : methodElement.getAnnotationMirrors()) {\n                for (Map.Entry<? extends ExecutableElement, ? extends AnnotationValue> entry : annotationMirror.getElementValues().entrySet()) {\n                    ExecutableElement key = entry.getKey();\n                    AnnotationValue value = entry.getValue();\n                    if (key.getSimpleName().contentEquals(\"value\")) {\n                        attributes.put(\"value\", value.getValue().toString());\n                    } else {\n                        attributes.put(key.getSimpleName().toString(), value.getValue().toString());\n                    }\n                }\n            }\n            descriptorElements.add(new ConfigElement(name, type, attributes));\n        } else {", "CodeBleu_score": 32.81424916876792}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {\n        if (element.getKind() == ElementKind.FIELD) {\n            VariableElement variableElement = (VariableElement) element;\n            if (!variableElement.getModifiers().contains(javax.lang.model.element.Modifier.STATIC)) {\n                error(\"Only static fields can be annotated with @ConfigValue\", variableElement);\n            }\n            String value = variableElement.getSimpleName().toString();\n            Map<String, String> attributes = Maps.newHashMap();\n            for (AnnotationMirror mirror : variableElement.getAnnotationMirrors()) {\n                if (mirror.getAnnotationType().asElement().equals(annotation)) {\n                    for (Map.Entry<? extends ExecutableElement, ? extends AnnotationValue> entry : mirror.getElementValues().entrySet()) {\n                        String key = entry.getKey().getSimpleName().toString();\n                        String value = entry.getValue().getValue().toString();\n                        attributes.put(key, value);\n                    }\n                }\n            }\n            descriptorElements.add(new ConfigValueElement(value, attributes));\n        } else {\n            error(\"Only fields can be annotated with @ConfigValue\", element);\n        }\n    }\n}", "CodeBleu_score": 36.70539170630077}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t  for (TypeElement annotation : annotations) {\n    String annotationClassName = annotation.getQualifiedName().toString();\n    if (annotationClassName.equals(annotationClass.getName())) {\n      return annotation;\n    }\n    if (annotationClassName.equals(annotationClass.getCanonicalName())) {\n      return annotation;\n    }\n    if (annotationClassName.equals(annotationClass.getName().replace(\"$\", \".\"))) {\n      return annotation;\n    }\n  }\n  return null;\n}", "CodeBleu_score": 39.60449417813652}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t  for (TypeElement annotation : annotations) {\n    if (annotation.getQualifiedName().toString().replace('$', '.').equals(annotationClass.getName())) {\n      return annotation;\n    }\n  }\n  return null;\n}", "CodeBleu_score": 47.956977239318796}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    for (TypeElement annotation : annotations) {\n        if (annotation.getQualifiedName().toString().equals(annotationClass.getName().replace('$', '.'))) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 48.921718246565575}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"docstatus\": 1,\n        \"leave_type\": [\"in\", frappe.get_list(\"Leave Type\", filters={\"is_lwp\": 1})],\n        \"employee\": employee,\n        \"status\": \"Open\",\n    }\n    if for_approval:\n        filters.update(\n            {\n                \"status\": [\"in\", [\"Open\", \"Approved\", \"Rejected\"]],\n                \"approver\": [\"in\", [employee, approver_id]],\n                \"employee\": [\"!=\", employee],\n            }\n        )\n    else:\n        filters.update({\"status\": [\"!=\", \"Cancelled\"]})\n    return filters\n\n", "CodeBleu_score": 25.260652330609318}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n\n    filters = {\n        \"docstatus\": 1,\n        \"employee\": employee,\n    }\n\n    if for_approval:\n        filters.update({\n            \"workflow_state\": [\"not in\", [\"Cancelled\", \"Rejected\"]],\n            \"approver\": [\n                \"in\",\n                [\n                    approver_id,\n                    frappe.session.user,\n                ],\n            ],\n        })\n    else:\n        filters.update({\n            \"workflow_state\": \"Open\",\n            \"workflow_state\": [\"not in\", [\"Cancelled\", \"Rejected\"]],\n        })\n\n    return filters\n\n", "CodeBleu_score": 24.374558919496014}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"docstatus\": 1,\n        \"leave_type\": [\"not in\", [\"Holiday\", \"Compensatory Off\"]],\n        \"from_date\": [\"<=\", getdate()],\n        \"to_date\": [\">=\", getdate()],\n    }\n\n    if employee:\n        filters[\"employee\"] = employee\n\n    if approver_id:\n        filters[\"approver\"] = approver_id\n\n    if for_approval:\n        filters[\"status\"] = [\n            \"in\",\n            [\"Open\", \"Approved\", \"Rejected\", \"Cancelled\"],\n        ]\n        filters[\"employee\"] = [\"!=\", employee]\n    else:\n        filters[\"status\"] = \"Open\"\n\n    return filters\n\n", "CodeBleu_score": 27.84434235477319}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    leave_balance_map = {}\n    current_date = getdate()\n    leave_details = get_leave_details(employee, current_date)\n    for leave_type in leave_details:\n        leave_balance_map[leave_type.name] = {\n            \"allocated\": leave_details[leave_type.name].allocated_leaves,\n            \"balance\": leave_details[leave_type.name].balance_leaves\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 40.26939629441689}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = getdate()\n    leave_details = get_leave_details(employee, current_date)\n\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_details[leave_type][\"allocated\"],\n            \"balance\": leave_details[leave_type][\"balance\"],\n        }\n\n    return leave_balance_map\n\n", "CodeBleu_score": 39.36181642749784}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    from_date = getdate()\n    to_date = getdate()\n    return get_leave_details(employee, from_date, to_date)\n\n", "CodeBleu_score": 14.661854052194446}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n\n    # Get the holiday list for the employee\n    holiday_list = frappe.get_value(\"Employee\", employee, \"holiday_list\")\n\n    # Return an empty list if the employee has no holiday list\n    if not holiday_list:\n        return []\n\n    # Get the holidays from the database\n    holidays = frappe.get_all(\n        \"Holiday\",\n        filters={\"parent\": holiday_list, \"type\": \"Holiday\"},\n        fields=[\"name\", \"holiday_date\", \"description\"],\n        order_by=\"holiday_date\",\n    )\n\n    # Exclude weekly offs\n    holidays = [\n        h\n        for h in holidays\n        if frappe.get_value(\"Holiday\", h.name, \"is_weekly_off\") != 1\n    ]\n\n    # Order the holidays by date\n    holidays = sorted(holidays, key=lambda x: x.holiday_date)\n\n    # Strip HTML from the holiday descriptions\n    for h in holidays:\n        h.description = strip_html(h.description)\n\n    return holidays\n\n", "CodeBleu_score": 37.92538808412367}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.get_value(\"Employee\", employee, \"holiday_list\")\n    if not holiday_list:\n        return []\n    holidays = frappe.get_all(\n        \"Holiday\",\n        filters={\"parent\": holiday_list, \"weekly_off\": 0},\n        fields=[\"holiday_date\", \"description\"],\n        order_by=\"holiday_date\",\n    )\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html(holiday[\"description\"])\n    return holidays\n\n", "CodeBleu_score": 34.25327405639332}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.db.get_value(\"Employee\", employee, \"holiday_list\")\n    if not holiday_list:\n        return []\n    holidays = frappe.get_all(\n        \"Holiday\",\n        filters={\n            \"parent\": holiday_list,\n            \"holiday_date\": [\">=\", getdate(today())],\n            \"status\": \"Published\",\n            \"type\": \"Holiday\",\n        },\n        fields=[\"holiday_date\", \"description\"],\n        order_by=\"holiday_date\",\n    )\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html(holiday[\"description\"])\n    return holidays\n\n", "CodeBleu_score": 39.666068839643984}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t\n    # Get the settings\n    hr_settings = frappe.get_single(\"HR Settings\")\n    if hr_settings.send_reminders and hr_settings.holiday_reminder_frequency == \"Weekly\":\n        # Get the employees who are on holiday this week\n        employees_on_holiday_this_week = get_employees_on_holiday_this_week()\n        if employees_on_holiday_this_week:\n            # Get the employees who are on holiday next week\n            employees_on_holiday_next_week = get_employees_on_holiday_next_week()\n            if employees_on_holiday_next_week:\n                # Get the employees who are on holiday in two weeks\n                employees_on_holiday_in_two_weeks = get_employees_on_holiday_in_two_weeks()\n                if employees_on_holiday_in_two_weeks:\n                    # Get the employees who are on holiday in three weeks\n                    employees_on_holiday_in_three_weeks = get_employees_on_holiday_in_three_weeks()\n                    if employees_on_holiday_in_three_weeks:\n                        # Get the employees who are on holiday in four weeks\n                        employees_on_holiday_in_four_weeks = get_employees_on_holiday_in_four_weeks()\n                        if employees_on_holiday_in_four_weeks:\n                            # Get the employees who are on holiday in five weeks\n                            employees_on_holiday_in_five_weeks = get_employees_on_holiday_in_five_weeks()\n                            if employees_on_holiday_in_five_weeks:\n                                # Send the reminders\n                                send_reminders(employees_on_holiday_this_week, employees_on_holiday_next_week, employees_on_holiday_in_two_weeks, employees_on_holiday_in_three_weeks, employees_on_holiday_in_four_", "CodeBleu_score": 21.69246901544773}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    send_reminders_in_advance(frequency=\"Weekly\")\n\n", "CodeBleu_score": 6.353999323709073}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    holiday_settings = frappe.get_single(\"Holiday Settings\")\n    if holiday_settings.send_reminders and holiday_settings.reminder_frequency == \"Weekly\":\n        send_reminders()\n\n", "CodeBleu_score": 15.468937236363825}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t\n    total_score = 0\n    for entry in self.self_ratings:\n        total_score += entry.rating * entry.percentage_weightage\n    self.self_appraisal_score = round(total_score, 2)\n\n", "CodeBleu_score": 28.928843977086498}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    total_score = 0\n    for entry in self.self_ratings:\n        total_score += flt(entry.rating) * flt(entry.percentage_weightage)\n    self.self_appraisal_score = total_score\n\n", "CodeBleu_score": 31.411534546944566}, {"code": "def calculate_self_appraisal_score(self)\n\t\n\n    total_score = 0\n    for rating in self.self_ratings:\n        total_score += rating.rating * rating.percentage_weightage\n\n    self.self_appraisal_score = total_score\n\n", "CodeBleu_score": 19.908952759258106}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle.final_score_formula:\n        formula = appraisal_cycle.final_score_formula\n        appraisal_cycle_name = get_link_to_form(\"Appraisal Cycle\", self.appraisal_cycle)\n        total_score = self.total_score\n        average_feedback_score = self.average_feedback_score\n        self_appraisal_score = self.self_appraisal_score\n        if not total_score or not average_feedback_score or not self_appraisal_score:\n            frappe.throw(_(\"Please calculate the total score, average feedback score, and self-appraisal score before calculating the final score.\"))\n        data = {\n            \"appraisal_cycle\": appraisal_cycle_name,\n            \"total_score\": total_score,\n            \"average_feedback_score\": average_feedback_score,\n            \"self_appraisal_score\": self_appraisal_score\n        }\n        for key, value in data.items():\n            formula = formula.replace(key, str(value))\n        try:\n            sanitized_formula = sanitize_expression(formula)\n            final_score = eval(sanitized_formula)\n        except Exception as e:\n            frappe.throw(_(\"Error while calculating final score: {0}\").format(e))\n        self.db_set(\"final_score\", final_score)\n    else:\n        final_score = (flt(self.total_score) + flt(self.average_feedback_score) + flt(self.self_appraisal_score)) / 3\n        self.db_set(\"final_score\", final_score)\n\n", "CodeBleu_score": 43.75415167666178}, {"code": "def calculate_final_score(self)\n\t\n\n    if not self.appraisal_cycle:\n        frappe.throw(_(\"Please select an appraisal cycle for the appraisal.\"))\n\n    if not self.appraisal_cycle_name:\n        frappe.throw(_(\"Please select an appraisal cycle for the appraisal.\"))\n\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle_name)\n\n    if appraisal_cycle.final_score_formula:\n        data = {}\n        data[\"employee\"] = self.employee\n        data[\"appraisal_cycle\"] = self.appraisal_cycle_name\n        data[\"total_score\"] = self.total_score\n        data[\"average_feedback_score\"] = self.average_feedback_score\n        data[\"self_appraisal_score\"] = self.self_appraisal_score\n\n        formula = sanitize_expression(appraisal_cycle.final_score_formula)\n        result = frappe.safe_eval(formula, None, data)\n        self.final_score = round(result, appraisal_cycle.precision)\n    else:\n        self.final_score = round(\n            (self.total_score + self.average_feedback_score + self.self_appraisal_score) / 3,\n            appraisal_cycle.precision,\n        )\n\n", "CodeBleu_score": 36.25290398267348}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle.final_score_formula:\n        formula = sanitize_expression(appraisal_cycle.final_score_formula)\n        total_score = sum(\n            [\n                flt(self.get_score(appraisal_item.appraisal_item))\n                for appraisal_item in self.appraisal_items\n            ]\n        )\n        average_feedback_score = (\n            flt(\n                frappe.db.get_value(\n                    \"Appraisal Feedback\",\n                    {\"parent\": self.name, \"appraisal_item\": [\"in\", [None, \"\"]]},\n                    \"avg(score)\",\n                )\n            )\n            or 0\n        )\n        self_appraisal_score = flt(self.get_score(\"Self Appraisal\"))\n        final_score = eval(formula)\n        final_score = round(final_score, appraisal_cycle.precision)\n    else:\n        total_score = flt(\n            frappe.db.get_value(\n                \"Appraisal Score\",\n                {\"parent\": self.name, \"appraisal_item\": [\"in\", [None, \"\"]]},\n                \"sum(score)\",\n            )\n        )\n        average_feedback_score = flt(\n            frappe.db.get_value(\n                \"Appraisal Feedback\",\n                {\"parent\": self.name, \"appraisal_item\": [\"in\", [None, \"\"]]},\n                \"avg(score)\",\n            )\n        )\n        self_appraisal_score = flt(self.get_score(\"Self Appraisal\"))\n        final_score = (\n            total_score + average_feedback_score + self_appraisal_score\n        ) / 3\n        final_score = round(final_score, appraisal_cycle.precision)\n    self.db_set(\"final_score\", final_score)\n\n", "CodeBleu_score": 33.90974554014336}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\t\n\n    validate_active_employee(self)\n\n    if self.attendance_date > getdate(nowdate()):\n        if self.status != \"On Leave\":\n            frappe.throw(\n                _(\n                    \"Attendance cannot be marked for future dates unless the status is 'On Leave' and there is no leave application.\"\n                )\n            )\n        else:\n            leave_application = frappe.db.get_value(\n                \"Leave Application\",\n                {\"employee\": self.employee, \"status\": \"Approved\"},\n                \"name\",\n            )\n            if not leave_application:\n                frappe.throw(\n                    _(\n                        \"Attendance cannot be marked for future dates unless the status is 'On Leave' and there is no leave application.\"\n                    )\n                )\n\n    if self.attendance_date < getdate(self.employee_name.date_of_joining):\n        frappe.throw(\n            _(\n                \"Attendance cannot be marked for dates prior to the employee's date of joining.\"\n            )\n        )\n\n", "CodeBleu_score": 33.52330024853343}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > nowdate():\n        if self.status != \"On Leave\":\n            frappe.throw(\n                _(\n                    \"Attendance cannot be marked for future dates unless the status is 'On Leave' and there is no leave application.\"\n                )\n            )\n        else:\n            if not frappe.db.exists(\n                \"Leave Application\",\n                {\"employee\": self.employee, \"leave_type\": \"On Leave\", \"status\": \"Approved\"},\n            ):\n                frappe.throw(\n                    _(\n                        \"Attendance cannot be marked for future dates unless the status is 'On Leave' and there is an approved leave application.\"\n                    )\n                )\n\n    if self.attendance_date < self.employee_name.date_of_joining:\n        frappe.throw(\n            _(\n                \"Attendance cannot be marked for dates earlier than the employee's date of joining.\"\n            )\n        )\n\n", "CodeBleu_score": 26.12583129848314}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > getdate(nowdate()):\n        if not (self.status == \"On Leave\" and not self.leave_application):\n            frappe.throw(\n                _(\n                    \"Attendance cannot be marked for future dates unless the employee is on leave.\"\n                )\n            )\n\n    if self.attendance_date < self.employee.date_of_joining:\n        frappe.throw(\n            _(\n                \"Attendance cannot be marked for dates earlier than the employee's date of joining.\"\n            )\n        )\n\n", "CodeBleu_score": 28.051593498313153}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\t\n    if self.employee and self.attendance_date:\n        duplicate_attendance_record = frappe.db.exists(\n            \"Attendance\",\n            {\n                \"employee\": self.employee,\n                \"attendance_date\": self.attendance_date,\n                \"name\": (\"!=\", self.name),\n            },\n        )\n        if duplicate_attendance_record:\n            frappe.throw(\n                _(\n                    \"Duplicate attendance record found for employee {0} on {1}. Please check {2}.\"\n                ).format(\n                    self.employee,\n                    format_date(self.attendance_date),\n                    get_link_to_form(\"Attendance\", duplicate_attendance_record),\n                )\n            )\n\n", "CodeBleu_score": 37.00169347491865}, {"code": "def validate_duplicate_record(self)\n\t\n\n    if not self.employee:\n        frappe.throw(_(\"Please select an employee\"))\n\n    if not self.attendance_date:\n        frappe.throw(_(\"Please select a date\"))\n\n    attendance_date = getdate(self.attendance_date)\n    employee = self.employee\n    existing_attendance = frappe.db.sql(\n        \"\"\"\n\t\tSELECT\n\t\t\tname\n\t\tFROM\n\t\t\t`tabAttendance`\n\t\tWHERE\n\t\t\temployee = %s\n\t\t\tAND attendance_date = %s\n\t\t\tAND docstatus = 1\n\t\t\"\"\",\n        (employee, attendance_date),\n        as_dict=1,\n    )\n\n    if existing_attendance:\n        frappe.throw(\n            _(\n                \"Attendance already exists for {0} on {1}. {2}\".format(\n                    employee,\n                    format_date(attendance_date),\n                    get_link_to_form(\"Attendance\", existing_attendance[0].name),\n                )\n            )\n        )\n\n", "CodeBleu_score": 34.39669464924465}, {"code": "def validate_duplicate_record(self)\n\t\n    if self.docstatus == 1:\n        if frappe.db.exists(\"Attendance\", {\"employee\": self.employee, \"attendance_date\": self.attendance_date}):\n            frappe.throw(\n                _(\n                    \"An attendance record already exists for the employee {0} on {1}. Please view the existing record here: {2}\".format(\n                        self.employee,\n                        format_date(self.attendance_date),\n                        get_link_to_form(\"Attendance\", frappe.db.get_value(\"Attendance\", {\"employee\": self.employee, \"attendance_date\": self.attendance_date})),\n                    )\n                )\n            )\n\n", "CodeBleu_score": 27.59948119300964}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t\n\n    # Get the email addresses of users in the specified group\n    users = frappe.get_all(\"User\", filters={\"user_type\": \"System User\", \"enabled\": 1}, fields=[\"email\"])\n    user_emails = [user.email for user in users]\n\n    # Get the message details\n    messages = frappe.get_all(\"Communication\", filters={\"reference_doctype\": self.reference_doctype, \"reference_name\": self.reference_name}, fields=[\"name\", \"communication_medium\", \"subject\", \"content\", \"creation\"])\n\n    # Create a list of tuples with the message details\n    message_details = [(message.name, message.communication_medium, message.subject, message.content, message.creation) for message in messages]\n\n    # Create a list of tuples with the message details and the email addresses of users in the specified group\n    message_details_with_emails = [(message_detail, user_email) for message_detail in message_details for user_email in user_emails]\n\n    # Create a list of tuples with the message details and the email addresses of users in the specified group\n    message_details_with_emails_and_status = [(message_detail, user_email, \"Not Sent\") for message_detail in message_details_with_emails]\n\n    # Create a list of tuples with the message details, email addresses of users in the specified group, and the status\n    message_details_with_emails_and_status_and_date = [(message_detail, user_email, \"Not Sent\", global_date_format(frappe.utils.now())) for message_detail in message_details_with_emails_and_status]\n\n    # Create a list of tuples with the message details, email addresses of users in the specified group, the status, and the date\n    message_details_with_emails_and_status_and_date_and_time = [(message_detail, user_email, \"Not Sent\", global_date_format(frappe.utils.now()), frappe.utils.now()) for message_detail in message_details_with_emails_and_status_and_date", "CodeBleu_score": 25.965056042103257}, {"code": "def send_summary(self)\n\t\n    if self.status == \"Draft\":\n        return\n    if self.status == \"Sent\":\n        return\n    if self.status == \"Error\":\n        return\n\n    if self.group:\n        group_users = frappe.get_all(\"User\", filters={\"parent\": self.group}, fields=[\"email\"])\n        if group_users:\n            email_list = [user.email for user in group_users]\n            email_list.append(self.email)\n            email_list = list(set(email_list))\n            email_list.sort()\n            email_list = \", \".join(email_list)\n            message = self.message\n            if self.message_format == \"Plain Text\":\n                message = self.message_plain_text\n            if self.message_format == \"HTML\":\n                message = self.message_html\n            if self.message_format == \"Markdown\":\n                message = self.message_markdown\n            if self.message_format == \"Wiki\":\n                message = self.message_wiki\n            if self.message_format == \"Text Editor\":\n                message = self.message_text_editor\n            if self.message_format == \"Email\":\n                message = self.message_email\n            if self.message_format == \"Blogger\":\n                message = self.message_blogger\n            if self.message_format == \"Telegram\":\n                message = self.message_telegram\n            if self.message_format == \"WhatsApp\":\n                message = self.message_whatsapp\n            if self.message_format == \"Facebook\":\n                message = self.message_facebook\n            if self.message_format == \"Twitter\":\n                message = self.message_twitter\n            if self.message_format == \"Slack\":\n                message = self.message_slack\n            if self.message_format == \"Mattermost\":\n                message = self.message_mattermost\n            if self.message_format == \"Zulip\":\n                message = self.message_zulip\n            if self.message_format == \"Rocket Chat\":\n                message = self.message_rocketchat\n            if self", "CodeBleu_score": 30.580878883528428}, {"code": "def send_summary(self)\n\t\n    if self.status == \"Draft\":\n        return\n    if self.status == \"Sent\":\n        return\n    if self.status == \"Error\":\n        return\n    if self.status == \"Scheduled\":\n        return\n    if self.status == \"Cancelled\":\n        return\n    if self.status == \"Expired\":\n        return\n    if self.status == \"Skipped\":\n        return\n    if self.status == \"Success\":\n        return\n    if self.status == \"Failure\":\n        return\n    if self.status == \"Retry\":\n        return\n\n    self.status = \"Sending\"\n    self.save()\n\n    if not self.message_id:\n        frappe.throw(_(\"Please specify the message ID.\"))\n\n    if not self.group_name:\n        frappe.throw(_(\"Please specify the group name.\"))\n\n    if not self.template:\n        frappe.throw(_(\"Please specify the template.\"))\n\n    if not self.subject:\n        frappe.throw(_(\"Please specify the subject.\"))\n\n    if not self.recipients:\n        frappe.throw(_(\"Please specify the recipients.\"))\n\n    if not self.sender:\n        frappe.throw(_(\"Please specify the sender.\"))\n\n    if not self.reply_to:\n        frappe.throw(_(\"Please specify the reply-to address.\"))\n\n    if not self.cc:\n        frappe.throw(_(\"Please specify the CC address.\"))\n\n    if not self.bcc:\n        frappe.throw(_(\"Please specify the BCC address.\"))\n\n    if not self.attachments:\n        frappe.throw(_(\"Please specify the attachments.\"))\n\n    if not self.message_id:\n        frappe.throw(_(\"Please specify the message ID.\"))\n\n    if not self.group_name:\n        frappe.throw(_(\"Please specify the group name.\"))\n\n    if not self.template:\n        frappe.throw(_(\"Please specify the template.\"))\n\n    if not self.subject:\n        frappe.throw(_(\"Please specify the subject.\"))\n\n    if not self.reci", "CodeBleu_score": 29.44780314102492}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t\n    if self.status == \"Open\":\n        duplicate_interview = frappe.db.get_value(\n            \"Interview\",\n            {\n                \"job_applicant\": self.job_applicant,\n                \"interview_round\": self.interview_round,\n                \"status\": [\"!=\", \"Open\"],\n            },\n        )\n        if duplicate_interview:\n            frappe.throw(\n                _(\n                    \"A duplicate interview record has been found for the selected job applicant and interview round. Please check the existing interview record at {0} or create a new one.\"\n                ).format(\n                    get_link_to_form(\n                        \"Interview\",\n                        duplicate_interview,\n                        _(\"View duplicate interview record\"),\n                    )\n                )\n            )\n\n", "CodeBleu_score": 43.548129919029144}, {"code": "def validate_duplicate_interview(self)\n\t\n    if frappe.get_value(\"Job Applicant\", self.job_applicant, \"interview_round\") == self.interview_round:\n        frappe.throw(\n            _(\n                \"Job Applicant {0} has already been interviewed for this round. Please link the existing record instead of creating a new one.\"\n            ).format(get_link_to_form(\"Job Applicant\", self.job_applicant)),\n            title=_(\"Duplicate Interview\"),\n        )\n\n", "CodeBleu_score": 27.610801390005246}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.status not in [\"Open\", \"Closed\"]:\n        return\n\n    duplicate_interview = frappe.db.exists(\n        \"Job Applicant Interview\",\n        {\n            \"job_applicant\": self.job_applicant,\n            \"interview_round\": self.interview_round,\n            \"status\": [\"in\", [\"Open\", \"Closed\"]],\n        },\n    )\n\n    if duplicate_interview:\n        frappe.throw(\n            _(\n                \"Job Applicant {0} is already scheduled for interview {1}.\"\n                \" Please update the existing record.\"\n            ).format(\n                get_link_to_form(\"Job Applicant\", self.job_applicant),\n                get_link_to_form(\"Job Applicant Interview\", duplicate_interview),\n            )\n        )\n\n", "CodeBleu_score": 34.65984596805504}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\t\n    if self.assessments:\n        average_rating = sum(\n            flt(assessment.rating) for assessment in self.assessments if flt(assessment.rating)\n        ) / len(self.assessments)\n        self.average_rating = average_rating\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 32.985360293622826}, {"code": "def calculate_average_rating(self)\n\t\n    if self.skill_assessments:\n        average_rating = (\n            frappe.qb.from_(self.skill_assessments)\n            .select(Avg(self.skill_assessments.rating))\n            .run(as_dict=True)[0][\"avg(rating)\"]\n        )\n        self.average_rating = average_rating\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 27.62017872270687}, {"code": "def calculate_average_rating(self)\n\t\n    if self.skill_assessments:\n        total_rating = sum(\n            flt(assessment.rating) for assessment in self.skill_assessments\n        )\n        self.average_rating = total_rating / len(self.skill_assessments)\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 33.38888534258146}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc[\"interview_round\"]\n    interview.designation = doc[\"designation\"]\n    interview.interviewers = doc[\"interviewers\"]\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 47.818319176369315}, {"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc[\"interview_round\"]\n    interview.designation = doc[\"designation\"]\n    interview.interviewers = doc[\"interviewers\"]\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 47.818319176369315}, {"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    interview = frappe.get_doc({\n        \"doctype\": \"Interview\",\n        \"interview_round\": doc[\"interview_round\"],\n        \"designation\": doc[\"designation\"],\n        \"interviewers\": doc[\"interviewers\"]\n    })\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 44.92421545304367}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offers = frappe.db.sql(\n        \"\"\"\n        SELECT\n            name\n        FROM\n            `tabJob Offer`\n        WHERE\n            designation = %(designation)s\n            AND company = %(company)s\n            AND docstatus = 1\n            AND creation BETWEEN %(from_date)s AND %(to_date)s\n        \"\"\",\n        {\n            \"designation\": self.designation,\n            \"company\": self.company,\n            \"from_date\": from_date,\n            \"to_date\": to_date,\n        },\n        as_dict=1,\n    )\n    return [job_offer.get(\"name\") for job_offer in job_offers]\n\n", "CodeBleu_score": 47.266000754219455}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    return frappe.db.sql(\n        \"\"\"\n        SELECT\n            name\n        FROM\n            `tabJob Offer`\n        WHERE\n            company = %(company)s\n            AND designation = %(designation)s\n            AND status = 1\n            AND (\n                (\n                    from_date <= %(from_date)s\n                    AND to_date >= %(to_date)s\n                )\n                OR (\n                    from_date <= %(from_date)s\n                    AND to_date >= %(from_date)s\n                )\n                OR (\n                    from_date >= %(from_date)s\n                    AND to_date <= %(to_date)s\n                )\n            )\n        \"\"\",\n        {\n            \"company\": self.company,\n            \"designation\": self.designation,\n            \"from_date\": from_date,\n            \"to_date\": to_date,\n        },\n        as_dict=True,\n    )\n\n", "CodeBleu_score": 41.70825210307227}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offer_list = []\n    job_offer_list = frappe.db.sql(\n        \"\"\"\n        SELECT name\n        FROM `tabJob Offer`\n        WHERE company = %s\n        AND designation = %s\n        AND docstatus = 1\n        AND (DATE(creation) BETWEEN %s AND %s)\n        \"\"\",\n        (self.company, self.designation, from_date, to_date),\n        as_dict=True,\n    )\n    return job_offer_list\n\n", "CodeBleu_score": 32.54248251636106}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    filters = []\n    if company:\n        filters.append({\"company\": company})\n    if department:\n        filters.append({\"department\": department})\n    total_job_offers = frappe.db.count(\"Job Offer\", {\"docstatus\": 1, \"company\": company, \"department\": department})\n    accepted_job_offers = frappe.db.count(\"Job Offer\", {\"docstatus\": 1, \"company\": company, \"department\": department, \"status\": \"Accepted\"})\n    return flt(accepted_job_offers / total_job_offers * 100, 2), \"Percent\"\n\n", "CodeBleu_score": 36.71605796387952}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n\n    if company:\n        filters = {'company': company}\n    elif department:\n        filters = {'department': department}\n    else:\n        filters = {}\n\n    total_job_offers = frappe.db.count('Job Offer', filters)\n    accepted_job_offers = frappe.db.count('Job Offer', {'docstatus': 1, 'status': 'Accepted', **filters})\n\n    if not total_job_offers:\n        return 0\n    else:\n        return flt(accepted_job_offers) / flt(total_job_offers) * 100\n\n", "CodeBleu_score": 38.66587586011755}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    # Get the total number of job offers\n    total_job_offers = frappe.db.count(\"Job Offer\", {\"docstatus\": 1})\n    # Get the total number of accepted job offers\n    total_accepted_job_offers = frappe.db.count(\"Job Offer\", {\"docstatus\": 1, \"status\": \"Accepted\"})\n    # If there are no job offers, return 0\n    if not total_job_offers:\n        return 0\n    # Calculate the acceptance rate\n    acceptance_rate = (total_accepted_job_offers / total_job_offers) * 100\n    # Return the acceptance rate as a percentage\n    return acceptance_rate\n\n", "CodeBleu_score": 28.925772484830958}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t    Result result = this.employerService.register(employerForRegisterDto);\n    return new ResponseEntity<Result>(result, result.isSuccess() ? HttpStatus.OK : HttpStatus.BAD_REQUEST);\n}", "CodeBleu_score": 52.2034397585738}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t    Result result = this.employerService.register(employerForRegisterDto);\n    return new ResponseEntity<>(result, result.isSuccess() ? HttpStatus.OK : HttpStatus.BAD_REQUEST);\n}", "CodeBleu_score": 54.18924435430055}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t    final Result result = this.employerService.register(employerForRegisterDto);\n    return this.createResponseEntity(result);\n}", "CodeBleu_score": 47.17761712005489}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t    Optional<CompanyStaff> optionalCompanyStaff = this.companyStaffDao.findById(companyStaffForUpdateDto.getId());\n    if (optionalCompanyStaff.isPresent()) {\n        CompanyStaff companyStaff = optionalCompanyStaff.get();\n        if (companyStaff.getPassword().equals(companyStaffForUpdateDto.getPassword())) {\n            companyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n            companyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n            this.companyStaffDao.save(companyStaff);\n            return new SuccessResult(Messages.companyStaffUpdated);\n        }\n        return new ErrorResult(Messages.wrongPassword);\n    }\n    return new ErrorResult(Messages.companyStaffNotFound);\n}", "CodeBleu_score": 43.29610561271658}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t    Optional<CompanyStaff> optionalCompanyStaff = companyStaffDao.getById(companyStaffForUpdateDto.getId());\n    if (optionalCompanyStaff.isPresent()) {\n        CompanyStaff companyStaff = optionalCompanyStaff.get();\n        if (companyStaff.getPassword().equals(companyStaffForUpdateDto.getPassword())) {\n            companyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n            companyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n            companyStaffDao.save(companyStaff);\n            return new SuccessResult(Messages.companyStaffUpdated);\n        } else {\n            return new ErrorResult(Messages.wrongPassword);\n        }\n    } else {\n        return new ErrorResult(Messages.companyStaffNotFound);\n    }\n}", "CodeBleu_score": 42.98225858564557}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\t\t\n\t\tOptional<CompanyStaff> optionalCompanyStaff = companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\t\tif(optionalCompanyStaff.isPresent()) {\n\t\t\tCompanyStaff companyStaff = optionalCompanyStaff.get();\n\t\t\t\n\t\t\tif(!companyStaff.getPassword().equals(companyStaffForUpdateDto.getPassword())) {\n\t\t\t\treturn new ErrorResult(Messages.passwordsDoNotMatch);\n\t\t\t}\n\t\t\t\n\t\t\tBusinessRules.run(\n\t\t\t\t\t()-> BusinessRules.isNull(companyStaffForUpdateDto.getFirstName()),\n\t\t\t\t\t()-> BusinessRules.isNull(companyStaffForUpdateDto.getLastName()),\n\t\t\t\t\t()-> BusinessRules.isNull(companyStaffForUpdateDto.getEmail())\n\t\t\t\t\t);\n\t\t\t\n\t\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\t\tcompanyStaff.setEmail(companyStaffForUpdateDto.getEmail());\n\t\t\tcompanyStaff.setPassword(companyStaffForUpdateDto.getPassword());\n\t\t\tcompanyStaff.setPhoneNumber(companyStaffForUpdateDto.getPhoneNumber());\n\t\t\tcompanyStaff.setCompanyId(companyStaffForUpdateDto.getCompanyId());\n\t\t\tcompanyStaff.setPositionId(companyStaffForUpdateDto.getPositionId());\n\t\t\tcompanyStaff.setSalary(companyStaffForUpdateDto.getSalary());\n\t\t\tcompanyStaff.setBirthDate(companyStaffForUpdateDto.getBirthDate());\n\t\t\tcompanyStaff.setHireDate(companyStaffForUpdateDto.getHireDate());\n\t\t\tcompanyStaff.setActive(companyStaffForUpdateDto.getActive());\n\t\t\tcompanyStaff.setImage(companyStaffForUpdateDto.getImage());\n\t\t\t\n", "CodeBleu_score": 37.96080376549049}]}
