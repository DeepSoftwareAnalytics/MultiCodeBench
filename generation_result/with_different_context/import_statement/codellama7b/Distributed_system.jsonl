{"instance_id": "ba8707e206f9", "generation_result": [{"code": "def _kazoo_connect(self, *args: Any) -> Tuple[Union[int, float], Union[int, float]]\n\t\n    start = time.time()\n    result = self._connection_method(*args)\n    end = time.time()\n    return (max(self._loop_wait - 2, 2) * 1000, result)\n\n", "CodeBleu_score": 56.87615094193351}, {"code": "def _kazoo_connect(self, *args: Any) -> Tuple[Union[int, float], Union[int, float]]\n\t\n    try:\n        return self._loop_wait, self._connect(*args)\n    except Exception as e:\n        logging.error(\"Kazoo client error: %s\", e)\n        return self._loop_wait, None\n\n", "CodeBleu_score": 44.49502483080374}, {"code": "def _kazoo_connect(self, *args: Any) -> Tuple[Union[int, float], Union[int, float]]\n\t\n    return (\n        (self.loop_wait - 2) * 1000,\n        self._original_connect(*args),\n    )\n\n", "CodeBleu_score": 47.154533722609266}]}
{"instance_id": "88e24a7c26a4", "generation_result": [{"code": "def reload_config(self, config: Union['Config', Dict[str, Any]]) -> None\n\t\n    if isinstance(config, dict):\n        self.retry_timeout = config.get('retry_timeout', self.retry_timeout)\n        self.loop_wait = config.get('loop_wait', self.loop_wait)\n        self.ttl = config.get('ttl', self.ttl)\n    else:\n        self.retry_timeout = config.retry_timeout\n        self.loop_wait = config.loop_wait\n        self.ttl = config.ttl\n\n    if self.handler and isinstance(self.handler, PatroniSequentialThreadingHandler) and self.loop_wait != self.handler.connect_timeout:\n        self.handler.connect_timeout = self.loop_wait\n\n    if self.ttl and self.ttl != self.handler.ttl:\n        try:\n            self.handler.ttl = self.ttl\n        except ValueError:\n            if self.loop_wait != self.handler.connect_timeout:\n                self.handler.connect_timeout = self.loop_wait\n            self.close()\n\n", "CodeBleu_score": 34.203435755114974}, {"code": "def reload_config(self, config: Union['Config', Dict[str, Any]]) -> None\n\t\n    if isinstance(config, Config):\n        self.retry_timeout = config.retry_timeout\n        self.loop_wait = config.loop_wait\n        self.ttl = config.ttl\n    else:\n        self.retry_timeout = config.get('retry_timeout', self.retry_timeout)\n        self.loop_wait = config.get('loop_wait', self.loop_wait)\n        self.ttl = config.get('ttl', self.ttl)\n    if self.handler.loop_wait != self.loop_wait:\n        try:\n            self.handler.loop_wait = self.loop_wait\n        except AttributeError:\n            pass\n    if self.handler.connect_timeout != self.loop_wait:\n        try:\n            self.handler.connect_timeout = self.loop_wait\n        except AttributeError:\n            pass\n\n", "CodeBleu_score": 37.96044002899508}, {"code": "def reload_config(self, config: Union['Config', Dict[str, Any]]) -> None\n\t\n    if isinstance(config, dict):\n        config = Config(**config)\n    self.retry_timeout = config.retry_timeout\n    self.loop_wait = config.loop_wait\n    self.ttl = config.ttl\n    if isinstance(self.handler, PatroniSequentialThreadingHandler) and self.loop_wait != self._loop_wait:\n        self.handler.connect_timeout = self.loop_wait\n    try:\n        self.set_timeout(self.ttl)\n    except ConnectionClosedError:\n        if self.loop_wait != self._loop_wait:\n            self.handler.close()\n            raise\n\n", "CodeBleu_score": 37.686026718695466}]}
{"instance_id": "2af7d7b3c887", "generation_result": [{"code": "def _postgresql_cluster_loader(self, path: str) -> Cluster\n\t\n    cluster = Cluster(self, path)\n    cluster.initialize()\n    cluster.configuration()\n    cluster.timeline_history()\n    cluster.synchronization_state()\n    cluster.members()\n    cluster.leader()\n    cluster.status()\n    cluster.failover()\n    cluster.failsafe()\n    return cluster\n\n", "CodeBleu_score": 1.563887616365367}, {"code": "def _postgresql_cluster_loader(self, path: str) -> Cluster\n\t\n    # TODO: Implement the function\n    raise NotImplementedError()\n\n", "CodeBleu_score": 0.8139927031915872}, {"code": "def _postgresql_cluster_loader(self, path: str) -> Cluster\n\t\n    # TODO: Implement this function\n    raise NotImplementedError(\"TODO: Implement this function\")\n\n", "CodeBleu_score": 0.8139927034186333}]}
{"instance_id": "43e1bc044d8e", "generation_result": [{"code": "def attempt_to_acquire_leader(self) -> bool\n\t\n    retry = self.retry\n    if retry is None:\n        retry = self.DEFAULT_RETRY\n\n    def acquire_leader():\n        try:\n            self.create(self.leader_path, ephemeral=True, sequence=True, makepath=True)\n            return True\n        except ConnectionClosedError:\n            raise ZooKeeperError(\"Connection to ZooKeeper is closed\")\n        except NoNodeError:\n            raise ZooKeeperError(\"Parent path does not exist\")\n        except NodeExistsError:\n            return False\n        except SessionExpiredError:\n            raise ZooKeeperError(\"Session expired\")\n        except RetryFailedError:\n            raise ZooKeeperError(\"Retries failed\")\n        except Exception as e:\n            if not isinstance(e, NodeExistsError):\n                self.log.error(\"Failed to acquire leader lock: %s\", e)\n            return False\n\n    try:\n        return retry(acquire_leader)\n    except RetryFailedError:\n        raise ZooKeeperError(\"Retries failed\")\n\n", "CodeBleu_score": 52.5915800885587}, {"code": "def attempt_to_acquire_leader(self) -> bool\n\t\n    if self._retry_policy.retry_sleep is not None:\n        time.sleep(self._retry_policy.retry_sleep)\n    try:\n        self._client.create(self._path, ephemeral=True)\n        return True\n    except ConnectionClosedError:\n        self._client.retry(attempt_to_acquire_leader, self)\n    except NoNodeError:\n        self._client.retry(attempt_to_acquire_leader, self)\n    except NodeExistsError:\n        logging.info(\"Could not acquire leader lock because another instance already has it.\")\n        return False\n    except SessionExpiredError:\n        logging.info(\"Could not acquire leader lock because session has expired.\")\n        return False\n    except RetryFailedError:\n        logging.error(\"Could not acquire leader lock because retries failed.\")\n        raise\n    except Exception as e:\n        logging.error(\"Could not acquire leader lock because of error: %s\", e)\n        return False\n\n", "CodeBleu_score": 47.65749232286238}, {"code": "def attempt_to_acquire_leader(self) -> bool\n\t\n    try:\n        self._zk.create(self._lock_path, ephemeral=True, sequence=True)\n        return True\n    except ConnectionClosedError:\n        raise\n    except RetryFailedError:\n        raise\n    except Exception as e:\n        if isinstance(e, NodeExistsError):\n            self._logger.info('%s: Failed to acquire leader lock. Another instance has the lock.', self._lock_path)\n        else:\n            self._logger.error('%s: Failed to acquire leader lock. %s', self._lock_path, e)\n        return False\n\n", "CodeBleu_score": 51.88250203782667}]}
{"instance_id": "93d126ab8a22", "generation_result": [{"code": "def _update_leader(self, leader: Leader) -> bool\n\t\n\n    # Check if the current client matches the leader's session\n    if leader.session != self.client_id:\n        self.logger.warning(\"Leader session mismatch: %s != %s\", leader.session, self.client_id)\n\n    # Delete the existing leader ZNode\n    try:\n        self.logger.debug(\"Deleting leader ZNode %s\", leader.znode)\n        self.zk.delete(leader.znode)\n    except NoNodeError:\n        self.logger.debug(\"Leader ZNode %s does not exist\", leader.znode)\n    except ConnectionClosedError:\n        self.logger.warning(\"Connection closed while deleting leader ZNode %s\", leader.znode)\n    except RetryFailedError:\n        self.logger.warning(\"Retry failed while deleting leader ZNode %s\", leader.znode)\n    except Exception as e:\n        self.logger.warning(\"Unknown error while deleting leader ZNode %s: %s\", leader.znode, e)\n        raise ZooKeeperError(e)\n\n    # Create a new leader ZNode with the current client's name encoded in UTF-8\n    try:\n        self.logger.debug(\"Creating leader ZNode %s with value %s\", self.leader_znode, self.client_id)\n        self.zk.create(self.leader_znode, self.client_id.encode('utf-8'), acl=self.acl, ephemeral=True, sequence=True)\n        return True\n    except NodeExistsError:\n        self.logger.debug(\"Leader ZNode %s already exists\", self.leader_znode)\n    except ConnectionClosedError:\n        self.logger.warning(\"Connection closed while creating leader ZNode %s\", self.leader_znode)\n    except RetryFailedError:\n        self.logger.warning(\"Retry failed while creating leader ZNode %s\", self.leader_znode)\n    except Exception as e:\n        self.logger.warning(\"Unknown error while creating leader ZNode %s: %s\", self.leader_znode, e)\n        raise ZooKeeperError(e)", "CodeBleu_score": 48.79952693177263}, {"code": "def _update_leader(self, leader: Leader) -> bool\n\t\n    try:\n        if self.client_id != leader.session_id:\n            logging.warning(\"Leader session ID mismatch: %s vs %s\", self.client_id, leader.session_id)\n            self.delete_leader_znode()\n        else:\n            logging.info(\"Leader session ID match: %s vs %s\", self.client_id, leader.session_id)\n            return True\n    except NoNodeError:\n        logging.info(\"Leader znode does not exist. Creating...\")\n    except ConnectionClosedError:\n        logging.warning(\"Leader znode creation failed due to connection loss.\")\n    except RetryFailedError:\n        logging.warning(\"Leader znode creation failed due to connection loss.\")\n    except SessionExpiredError:\n        logging.warning(\"Leader znode creation failed due to session expiration.\")\n    try:\n        self.create_leader_znode()\n    except NoNodeError:\n        logging.warning(\"Leader znode creation failed due to missing parent.\")\n    except ConnectionClosedError:\n        logging.warning(\"Leader znode creation failed due to connection loss.\")\n    except RetryFailedError:\n        logging.warning(\"Leader znode creation failed due to connection loss.\")\n    except SessionExpiredError:\n        logging.warning(\"Leader znode creation failed due to session expiration.\")\n    return False\n\n", "CodeBleu_score": 31.665652514178717}, {"code": "def _update_leader(self, leader: Leader) -> bool\n\t\n    if self.client_id != leader.client_id:\n        self.logger.warning(\"Leader session ID mismatch, attempting to delete leader ZNode\")\n        try:\n            self.client.delete(self.leader_path)\n        except (NoNodeError, ConnectionClosedError, RetryFailedError):\n            self.logger.warning(\"Failed to delete leader ZNode\")\n            return False\n    else:\n        self.logger.info(\"Leader session ID matches, attempting to update leader ZNode\")\n        try:\n            self.client.set(self.leader_path, self.client_id.encode(\"utf-8\"))\n        except (ConnectionClosedError, RetryFailedError):\n            self.logger.warning(\"Failed to update leader ZNode\")\n            return False\n    return True\n\n", "CodeBleu_score": 34.37653085849442}]}
{"instance_id": "f68719982812", "generation_result": [{"code": "def poll(self) -> bool\n\t\n    if self._last_poll_time is None:\n        self._last_poll_time = time.time()\n        return False\n    elif time.time() - self._last_poll_time > self._poll_interval:\n        self._last_poll_time = time.time()\n        return True\n    return False\n\n", "CodeBleu_score": 12.666254866533356}, {"code": "def poll(self) -> bool\n\t\n    # get the current time\n    now = time.time()\n    # if the last poll was too recent, return False\n    if now - self._last_poll < self._poll_interval:\n        return False\n    # set the last poll time to now\n    self._last_poll = now\n    # get the exhibitor data\n    exhibitor_data = self._get_exhibitor_data()\n    # if the exhibitor data is None, return False\n    if exhibitor_data is None:\n        return False\n    # get the exhibitor data as a dict\n    exhibitor_data_dict = exhibitor_data.as_dict()\n    # if the server data is empty, return False\n    if not exhibitor_data_dict[\"server\"]:\n        return False\n    # if the port data is empty, return False\n    if not exhibitor_data_dict[\"port\"]:\n        return False\n    # if the zk data is empty, return False\n    if not exhibitor_data_dict[\"zk\"]:\n        return False\n    # get the current connection string\n    current_connection_string = self._connection_string\n    # get the current zk string\n    current_zk_string = self._zk_string\n    # get the new zk string\n    new_zk_string = \"{}:{}\".format(exhibitor_data_dict[\"server\"], exhibitor_data_dict[\"port\"])\n    # get the new connection string\n    new_connection_string = \"{}/{}\".format(new_zk_string, exhibitor_data_dict[\"zk\"])\n    # if the connection string hasn't changed, return False\n    if new_connection_string == current_connection_string:\n        return False\n    # if the zk string hasn't changed, return False\n    if new_zk_string == current_zk_string:\n        return False\n    # log the change\n    self._logger.info(\"ZooKeeper connection string changed from {} to {}\".format(current_connection_string, new_connection_string))\n    # set the connection string\n    self._connection_string = new_connection_string\n    # set the zk string\n    self._zk_string = new_zk", "CodeBleu_score": 32.04673739021728}, {"code": "def poll(self) -> bool\n\t\n    if self.poll_interval is not None:\n        if self.last_poll is None:\n            self.last_poll = time.time()\n        elif time.time() - self.last_poll > self.poll_interval:\n            self.last_poll = time.time()\n            return True\n    return False\n\n", "CodeBleu_score": 13.606560895940726}]}
{"instance_id": "022ed3721913", "generation_result": [{"code": "def _load_cluster(\n            self, path: str, loader: Callable[[str], Union[Cluster, Dict[int, Cluster]]]\n    ) -> Union[Cluster, Dict[int, Cluster]]\n\t\n    # check if the ensemble provider is available\n    if self.ensemble_provider is not None:\n        # update the client's hosts with the Zookeeper hosts\n        self.hosts = self.ensemble_provider.get_hosts()\n    # invoke the parent class's _load_cluster method to complete the loading process\n    return super()._load_cluster(path, loader)\n\n", "CodeBleu_score": 60.29159893233966}, {"code": "def _load_cluster(\n            self, path: str, loader: Callable[[str], Union[Cluster, Dict[int, Cluster]]]\n    ) -> Union[Cluster, Dict[int, Cluster]]\n\t\n    cluster = loader(path)\n    if isinstance(cluster, Cluster):\n        cluster.update_hosts(self.hosts)\n        return cluster\n    else:\n        for host_id, cluster_ in cluster.items():\n            cluster_.update_hosts(self.hosts)\n        return cluster\n\n", "CodeBleu_score": 51.21660022199692}, {"code": "def _load_cluster(\n            self, path: str, loader: Callable[[str], Union[Cluster, Dict[int, Cluster]]]\n    ) -> Union[Cluster, Dict[int, Cluster]]\n\t\n    cluster = loader(path)\n    if isinstance(cluster, Cluster):\n        cluster.hosts = self.hosts\n    elif isinstance(cluster, dict):\n        for cluster_id, cluster in cluster.items():\n            cluster.hosts = self.hosts\n    return cluster\n\n", "CodeBleu_score": 49.89172801141978}]}
{"instance_id": "c7d2e1db0cda", "generation_result": [{"code": "public ZookeeperListener(NodeCache nodeCache, NodeCacheListener nodeCacheListener){\n\t    this.nodeCache = nodeCache;\n    this.nodeCacheListener = nodeCacheListener;\n}", "CodeBleu_score": 81.45633845775137}, {"code": "public ZookeeperListener(NodeCache nodeCache, NodeCacheListener nodeCacheListener){\n\t    this.nodeCache = nodeCache;\n    this.nodeCacheListener = nodeCacheListener;\n}", "CodeBleu_score": 81.45633845775137}, {"code": "public ZookeeperListener(NodeCache nodeCache, NodeCacheListener nodeCacheListener){\n\t    this.nodeCache = nodeCache;\n    this.nodeCacheListener = nodeCacheListener;\n}", "CodeBleu_score": 81.45633845775137}]}
{"instance_id": "c779f567d3e2", "generation_result": [{"code": "public void destroy(){\n\t    if (zookeeperListener == null) {\n        return;\n    }\n\n    String group = zookeeperListener.getGroup();\n    String dataId = zookeeperListener.getDataId();\n\n    logger.info(\"{} unsubscribe {}\", ConfigType.toType(configType), dataId);\n\n    try {\n        zookeeperOperation.unsubscribe(group, dataId, zookeeperListener);\n    } catch (Exception e) {\n        logger.error(\"{} unsubscribe {} failed\", ConfigType.toType(configType), dataId, e);\n    }\n\n    zookeeperListener = null;\n}", "CodeBleu_score": 55.573255036542044}, {"code": "public void destroy(){\n\t    if (zookeeperListener == null) {\n        return;\n    }\n\n    String group = zookeeperListener.getGroup();\n    String dataId = zookeeperListener.getDataId();\n    String content = zookeeperListener.getContent();\n    ConfigType configType = zookeeperListener.getConfigType();\n\n    logger.info(\"Start to unsubscribe config, group={}, dataId={}, content={}, configType={}\", group, dataId, content, configType);\n\n    try {\n        zookeeperOperation.unsubscribe(group, dataId, configType, new ZookeeperSubscribeCallback() {\n            @Override\n            public void callback(String content) {\n                try {\n                    logger.info(\"Config has been updated, group={}, dataId={}, content={}, configType={}\", group, dataId, content, configType);\n\n                    DiscoveryConfigProcessor discoveryConfigProcessor = discoveryConfigProcessorFactory.getDiscoveryConfigProcessor(configType);\n                    discoveryConfigProcessor.process(content);\n                } catch (Exception e) {\n                    logger.error(\"Failed to update config, group={}, dataId={}, content={}, configType={}\", group, dataId, content, configType, e);\n                }\n            }\n        });\n\n        logger.info(\"Succeed to unsubscribe config, group={}, dataId={}, content={}, configType={}\", group, dataId, content, configType);\n    } catch (Exception e) {\n        logger.error(\"Failed to unsubscribe config, group={}, dataId={}, content={}, configType={}\", group, dataId, content, configType, e);\n    }\n}", "CodeBleu_score": 40.9174925528461}, {"code": "public void destroy(){\n\t    if (zookeeperListener == null) {\n        return;\n    }\n\n    String group = zookeeperListener.getGroup();\n    String dataId = zookeeperListener.getDataId();\n\n    logger.info(\"Destroying Zookeeper config, group={}, dataId={}\", group, dataId);\n\n    try {\n        zookeeperOperation.unsubscribe(group, dataId, zookeeperListener);\n    } catch (Exception e) {\n        logger.error(\"Failed to unsubscribe Zookeeper config, group={}, dataId={}, exception={}\", group, dataId, e.getMessage(), e);\n    }\n}", "CodeBleu_score": 54.14879232133809}]}
{"instance_id": "7f0ce4db487b", "generation_result": [{"code": "public Map<String, String> getServerMetadata(Server server){\n\t    if (server instanceof ZookeeperServer) {\n        ZookeeperServer zookeeperServer = (ZookeeperServer) server;\n        ZookeeperRegistration registration = (ZookeeperRegistration) zookeeperServer.getPayload();\n        return registration.getMetadata();\n    } else {\n        return null;\n    }\n}", "CodeBleu_score": 63.2735930194541}, {"code": "public Map<String, String> getServerMetadata(Server server){\n\t    if (server instanceof ZookeeperServer) {\n        ZookeeperServer zookeeperServer = (ZookeeperServer) server;\n        ZookeeperRegistration registration = zookeeperServer.getRegistration();\n        if (registration != null) {\n            return registration.getMetadata();\n        }\n    }\n\n    return null;\n}", "CodeBleu_score": 62.394950825871284}, {"code": "public Map<String, String> getServerMetadata(Server server){\n\t    if (server instanceof ZookeeperServer) {\n        ZookeeperServer zookeeperServer = (ZookeeperServer) server;\n        ZookeeperRegistration zookeeperRegistration = (ZookeeperRegistration) zookeeperServer.getPayload();\n        return zookeeperRegistration.getMetadata();\n    } else {\n        return null;\n    }\n}", "CodeBleu_score": 62.405789534850584}]}
{"instance_id": "7365d194b7ee", "generation_result": [{"code": "public ZookeeperListener subscribeConfig(String group, String serviceId, ZookeeperSubscribeCallback zookeeperSubscribeCallback) throws Exception{\n\t    String path = getConfigPath(group, serviceId);\n    NodeCache nodeCache = new NodeCache(curatorFramework, path);\n    NodeCacheListener nodeCacheListener = new NodeCacheListener() {\n        @Override\n        public void nodeChanged() throws Exception {\n            ChildData childData = nodeCache.getCurrentData();\n            if (childData == null) {\n                return;\n            }\n            byte[] data = childData.getData();\n            if (data == null || data.length == 0) {\n                return;\n            }\n            String config = new String(data, \"UTF-8\");\n            zookeeperSubscribeCallback.callback(config);\n        }\n    };\n    nodeCache.getListenable().addListener(nodeCacheListener);\n    nodeCache.start(true);\n    ZookeeperListener zookeeperListener = new ZookeeperListener(nodeCache, nodeCacheListener);\n    zookeeperListeners.put(path, zookeeperListener);\n    return zookeeperListener;\n}", "CodeBleu_score": 69.20822144621775}, {"code": "public ZookeeperListener subscribeConfig(String group, String serviceId, ZookeeperSubscribeCallback zookeeperSubscribeCallback) throws Exception{\n\t    String path = getConfigPath(group, serviceId);\n    CuratorFramework client = zookeeperRegistryCenter.getClient();\n    NodeCache nodeCache = new NodeCache(client, path);\n    NodeCacheListener nodeCacheListener = new NodeCacheListener() {\n        @Override\n        public void nodeChanged() throws Exception {\n            ChildData childData = nodeCache.getCurrentData();\n            if (null != childData) {\n                String config = new String(childData.getData(), Charsets.UTF_8);\n                zookeeperSubscribeCallback.callback(config);\n            }\n        }\n    };\n    nodeCache.getListenable().addListener(nodeCacheListener);\n    nodeCache.start();\n    ZookeeperListener zookeeperListener = new ZookeeperListener(nodeCache, nodeCacheListener);\n    zookeeperRegistryCenter.addZookeeperListener(zookeeperListener);\n    return zookeeperListener;\n}", "CodeBleu_score": 66.74114821524847}, {"code": "public ZookeeperListener subscribeConfig(String group, String serviceId, ZookeeperSubscribeCallback zookeeperSubscribeCallback) throws Exception{\n\t    String path = ZookeeperPathUtils.getConfigPath(group, serviceId);\n    NodeCache nodeCache = new NodeCache(client, path);\n    NodeCacheListener nodeCacheListener = new NodeCacheListener() {\n        @Override\n        public void nodeChanged() throws Exception {\n            ChildData childData = nodeCache.getCurrentData();\n            if (childData != null) {\n                String config = new String(childData.getData(), \"UTF-8\");\n                zookeeperSubscribeCallback.callback(config);\n            }\n        }\n    };\n    nodeCache.getListenable().addListener(nodeCacheListener);\n    nodeCache.start();\n    ZookeeperListener zookeeperListener = new ZookeeperListener(nodeCache, nodeCacheListener);\n    zookeeperListeners.put(path, zookeeperListener);\n    return zookeeperListener;\n}", "CodeBleu_score": 65.31476198234107}]}
{"instance_id": "6f492670162b", "generation_result": [{"code": "public ServerList<?> ribbonServerList(IClientConfig config, ServiceDiscovery<ZookeeperInstance> serviceDiscovery){\n\t    return new ZookeeperServerListDecorator(config, serviceDiscovery);\n}", "CodeBleu_score": 17.053887097503267}, {"code": "public ServerList<?> ribbonServerList(IClientConfig config, ServiceDiscovery<ZookeeperInstance> serviceDiscovery){\n\t    return new ZookeeperServerListDecorator(config, serviceDiscovery);\n}", "CodeBleu_score": 17.053887097503267}, {"code": "public ServerList<?> ribbonServerList(IClientConfig config, ServiceDiscovery<ZookeeperInstance> serviceDiscovery){\n\t    ZookeeperServerListDecorator decorator = new ZookeeperServerListDecorator(serviceDiscovery);\n    decorator.setClientConfig(config);\n    decorator.setLoadBalanceListenerExecutor(new LoadBalanceListenerExecutor());\n    decorator.setServiceId(config.getClientName());\n    \n    return decorator;\n}", "CodeBleu_score": 58.81196959882382}]}
{"instance_id": "17c01a5f8ef8", "generation_result": [{"code": "public void register(ZookeeperRegistration registration){\n\t    ConfigurableApplicationContext applicationContext = getApplicationContext();\n    if (applicationContext == null) {\n        return;\n    }\n    try {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onRegister(registration);\n    } catch (BeansException e) {\n        // Do nothing\n    }\n\n    ZookeeperServiceRegistry serviceRegistry = getServiceRegistry();\n    if (serviceRegistry == null) {\n        return;\n    }\n\n    serviceRegistry.register(registration);\n}", "CodeBleu_score": 73.22134990184037}, {"code": "public void register(ZookeeperRegistration registration){\n\t    ConfigurableApplicationContext applicationContext = getApplicationContext();\n    RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n    if (registerListenerExecutor != null) {\n        try {\n            registerListenerExecutor.onRegister(registration);\n        } catch (BeansException e) {\n            // Ignore\n        }\n    }\n\n    ZookeeperServiceRegistry serviceRegistry = applicationContext.getBean(ZookeeperServiceRegistry.class);\n    serviceRegistry.register(registration);\n}", "CodeBleu_score": 65.50430824074358}, {"code": "public void register(ZookeeperRegistration registration){\n\t    ConfigurableApplicationContext applicationContext = (ConfigurableApplicationContext) applicationContext;\n    ZookeeperServiceRegistry serviceRegistry = (ZookeeperServiceRegistry) serviceRegistry;\n    RegisterListenerExecutor registerListenerExecutor = null;\n    try {\n        registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n    } catch (BeansException e) {\n        // Ignore\n    }\n    if (registerListenerExecutor != null) {\n        registerListenerExecutor.onRegister(registration);\n    }\n    serviceRegistry.register(registration);\n}", "CodeBleu_score": 58.39296310941001}]}
{"instance_id": "99392dfa2335", "generation_result": [{"code": "public void deregister(ZookeeperRegistration registration){\n\t    try {\n        ConfigurableApplicationContext applicationContext = (ConfigurableApplicationContext) applicationContextReference.get();\n        if (applicationContext != null) {\n            RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n            if (registerListenerExecutor != null) {\n                registerListenerExecutor.onDeregister(registration);\n            }\n        }\n    } catch (BeansException e) {\n        // Ignore\n    }\n\n    ZookeeperServiceRegistry serviceRegistry = (ZookeeperServiceRegistry) serviceRegistryReference.get();\n    if (serviceRegistry != null) {\n        serviceRegistry.deregister(registration);\n    }\n}", "CodeBleu_score": 62.85664641651193}, {"code": "public void deregister(ZookeeperRegistration registration){\n\t    try {\n        ConfigurableApplicationContext applicationContext = (ConfigurableApplicationContext) context;\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onDeregister(registration);\n    } catch (BeansException e) {\n        // Do nothing\n    }\n\n    ZookeeperServiceRegistry serviceRegistry = (ZookeeperServiceRegistry) context;\n    serviceRegistry.removeRegistration(registration);\n}", "CodeBleu_score": 69.65854608024013}, {"code": "public void deregister(ZookeeperRegistration registration){\n\t    ConfigurableApplicationContext applicationContext = getApplicationContext();\n    if (applicationContext != null) {\n        try {\n            RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n            if (registerListenerExecutor != null) {\n                registerListenerExecutor.onDeregister(registration);\n            }\n        } catch (BeansException e) {\n        }\n    }\n\n    ZookeeperServiceRegistry serviceRegistry = getServiceRegistry();\n    if (serviceRegistry != null) {\n        serviceRegistry.removeRegistration(registration);\n    }\n}", "CodeBleu_score": 65.28297543219342}]}
{"instance_id": "02a835946e90", "generation_result": [{"code": "public void close(){\n\t    try {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onClose();\n    } catch (BeansException e) {\n        // Ignore\n    }\n\n    try {\n        ZookeeperRegistration zookeeperRegistration = applicationContext.getBean(ZookeeperRegistration.class);\n        zookeeperRegistration.close();\n    } catch (BeansException e) {\n        // Ignore\n    }\n\n    try {\n        ZookeeperServiceRegistry zookeeperServiceRegistry = applicationContext.getBean(ZookeeperServiceRegistry.class);\n        zookeeperServiceRegistry.close();\n    } catch (BeansException e) {\n        // Ignore\n    }\n}", "CodeBleu_score": 78.28695006498754}, {"code": "public void close(){\n\t    try {\n        RegisterListenerExecutor registerListenerExecutor = (RegisterListenerExecutor) applicationContext.getBean(RegisterListenerExecutor.class.getName());\n        if (registerListenerExecutor != null) {\n            registerListenerExecutor.onClose();\n        }\n    } catch (BeansException e) {\n        // Ignore\n    }\n\n    try {\n        ZookeeperServiceRegistry serviceRegistry = (ZookeeperServiceRegistry) applicationContext.getBean(ZookeeperServiceRegistry.class.getName());\n        if (serviceRegistry != null) {\n            serviceRegistry.close();\n        }\n    } catch (BeansException e) {\n        // Ignore\n    }\n\n    try {\n        ZookeeperRegistration registration = (ZookeeperRegistration) applicationContext.getBean(ZookeeperRegistration.class.getName());\n        if (registration != null) {\n            registration.close();\n        }\n    } catch (BeansException e) {\n        // Ignore\n    }\n\n    try {\n        ZookeeperServiceRegistryAutoConfiguration autoConfiguration = (ZookeeperServiceRegistryAutoConfiguration) applicationContext.getBean(ZookeeperServiceRegistryAutoConfiguration.class.getName());\n        if (autoConfiguration != null) {\n            autoConfiguration.close();\n        }\n    } catch (BeansException e) {\n        // Ignore\n    }\n\n    try {\n        ZookeeperDiscoveryClientAutoConfiguration autoConfiguration = (ZookeeperDiscoveryClientAutoConfiguration) applicationContext.getBean(ZookeeperDiscoveryClientAutoConfiguration.class.getName());\n        if (autoConfiguration != null) {\n            autoConfiguration.close();\n        }\n    } catch (BeansException e) {\n        // Ignore\n    }\n\n    try {\n        ZookeeperDiscoveryClient zkDiscoveryClient = (ZookeeperDiscoveryClient) applicationContext.getBean(ZookeeperDiscoveryClient.class.getName());\n        if (zkDiscoveryClient != null) {\n            zkDiscoveryClient.close();\n        }\n    } catch (BeansException e) {\n        // Ignore\n    }\n\n    try {\n        ZookeeperDiscoveryClientAutoConfiguration zkDiscovery", "CodeBleu_score": 55.166341435601026}, {"code": "public void close(){\n\t    try {\n        RegisterListenerExecutor registerListenerExecutor = context.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onClose();\n    } catch (BeansException e) {\n        // Ignore\n    }\n\n    try {\n        ZookeeperServiceRegistry serviceRegistry = context.getBean(ZookeeperServiceRegistry.class);\n        serviceRegistry.close();\n    } catch (BeansException e) {\n        // Ignore\n    }\n\n    try {\n        ZookeeperRegistration registration = context.getBean(ZookeeperRegistration.class);\n        registration.close();\n    } catch (BeansException e) {\n        // Ignore\n    }\n\n    try {\n        context.close();\n    } catch (BeansException e) {\n        // Ignore\n    }\n\n    try {\n        context.registerShutdownHook();\n    } catch (BeansException e) {\n        // Ignore\n    }\n}", "CodeBleu_score": 72.74070644830766}]}
{"instance_id": "64cf817f5945", "generation_result": [{"code": "private ZookeeperListener subscribeConfig(boolean globalConfig){\n\t    String group = getGroup();\n    String dataId = getDataId();\n    String content = getContent();\n\n    if (globalConfig) {\n        logger.info(\"Subscribe global config, group={}, dataId={}, content={}\", group, dataId, content);\n    } else {\n        logger.info(\"Subscribe local config, group={}, dataId={}, content={}\", group, dataId, content);\n    }\n\n    try {\n        String path = zookeeperOperation.getConfigPath(group, dataId, globalConfig);\n        ZookeeperListener zookeeperListener = zookeeperOperation.subscribeConfig(path, new ZookeeperSubscribeCallback() {\n            @Override\n            public void callback(String path, String content) {\n                logger.info(\"Receive config update, path={}, content={}\", path, content);\n\n                ConfigType configType = getConfigType();\n                if (configType == ConfigType.FILE) {\n                    writeConfig(content);\n                } else {\n                    updateConfig(content);\n                }\n            }\n        });\n\n        return zookeeperListener;\n    } catch (Exception e) {\n        logger.error(\"Subscribe config failed, group={}, dataId={}, content={}\", group, dataId, content, e);\n\n        return null;\n    }\n}", "CodeBleu_score": 50.374111534883866}, {"code": "private ZookeeperListener subscribeConfig(boolean globalConfig){\n\t    ConfigAdapter configAdapter = getConfigAdapter();\n    if (configAdapter == null) {\n        return null;\n    }\n\n    String group = configAdapter.getGroup();\n    String dataId = configAdapter.getDataId();\n\n    logger.info(\"Subscribe config, group={}, dataId={}\", group, dataId);\n\n    ZookeeperListener zookeeperListener = new ZookeeperListener(dataId, group);\n\n    try {\n        zookeeperOperation.subscribe(zookeeperListener, zookeeperSubscribeCallback);\n    } catch (Exception e) {\n        logger.error(\"Subscribe config failed, group={}, dataId={}\", group, dataId, e);\n\n        return null;\n    }\n\n    return zookeeperListener;\n}", "CodeBleu_score": 37.80517130771776}, {"code": "private ZookeeperListener subscribeConfig(boolean globalConfig){\n\t    String group = getGroup();\n    String dataId = getDataId();\n    String tenant = getTenant();\n\n    if (globalConfig) {\n        dataId = getGlobalDataId();\n    }\n\n    if (dataId == null) {\n        return null;\n    }\n\n    // \u5982\u679c\u662f\u5168\u5c40\u914d\u7f6e\uff0c\u5219\u4e0d\u9700\u8981\u79df\u6237\n    if (globalConfig) {\n        tenant = null;\n    }\n\n    String path = getConfigPath(group, dataId, tenant);\n\n    // \u5982\u679c\u662f\u5168\u5c40\u914d\u7f6e\uff0c\u5219\u4e0d\u9700\u8981\u79df\u6237\n    if (globalConfig) {\n        path = getConfigPath(group, dataId);\n    }\n\n    // \u5982\u679c\u662f\u79df\u6237\u914d\u7f6e\uff0c\u5219\u9700\u8981\u79df\u6237\n    if (!globalConfig && tenant == null) {\n        return null;\n    }\n\n    // \u5982\u679c\u662f\u79df\u6237\u914d\u7f6e\uff0c\u5219\u9700\u8981\u79df\u6237\n    if (!globalConfig && tenant != null) {\n        path = getConfigPath(group, dataId, tenant);\n    }\n\n    String value = null;\n    try {\n        value = zookeeperOperation.getConfig(path);\n    } catch (Exception e) {\n        logger.warn(\"Subscribe config failed, path={}, group={}, dataId={}, tenant={}\", path, group, dataId, tenant, e);\n\n        return null;\n    }\n\n    if (value == null) {\n        logger.warn(\"Subscribe config failed, path={}, group={}, dataId={}, tenant={}\", path, group, dataId, tenant);\n\n        return null;\n    }\n\n    logger.info(\"Subscribe config, path={}, group={}, dataId={}, tenant={}, value={}\", path, group, dataId, tenant, value);\n\n    ZookeeperListener zookeeperListener = new ZookeeperListener(path, zookeeperOperation);\n\n    zookeeperListener.setCallback(new ZookeeperSubscribeCallback() {\n        @Override\n        public void process(String path, String value) {\n            ConfigType configType = getConfigType();\n", "CodeBleu_score": 48.38477962210918}]}
{"instance_id": "be408acc71f6", "generation_result": [{"code": "public CuratorFramework curatorFramework(){\n\t    String connectionString = environment.getProperty(ZookeeperConstant.ZOOKEEPER_CONNECTION_STRING);\n    if (StringUtils.isEmpty(connectionString)) {\n        throw new DiscoveryException(\"Zookeeper connection string is null\");\n    }\n\n    int retryCount = environment.getProperty(ZookeeperConstant.ZOOKEEPER_RETRY_COUNT, int.class, ZookeeperConstant.ZOOKEEPER_RETRY_COUNT_DEFAULT);\n    int sleepTime = environment.getProperty(ZookeeperConstant.ZOOKEEPER_SLEEP_TIME, int.class, ZookeeperConstant.ZOOKEEPER_SLEEP_TIME_DEFAULT);\n\n    return CuratorFrameworkFactory.builder().connectString(connectionString).retryPolicy(new ExponentialBackoffRetry(sleepTime, retryCount)).build();\n}", "CodeBleu_score": 51.295204036065044}, {"code": "public CuratorFramework curatorFramework(){\n\t    String connectionString = environment.getProperty(ZookeeperConstant.ZOOKEEPER_CONNECTION_STRING);\n    if (StringUtils.isEmpty(connectionString)) {\n        throw new DiscoveryException(\"Zookeeper connection string is null\");\n    }\n\n    int retryCount = environment.getProperty(ZookeeperConstant.ZOOKEEPER_RETRY_COUNT, Integer.class, ZookeeperConstant.ZOOKEEPER_RETRY_COUNT_DEFAULT);\n    int sleepTime = environment.getProperty(ZookeeperConstant.ZOOKEEPER_SLEEP_TIME, Integer.class, ZookeeperConstant.ZOOKEEPER_SLEEP_TIME_DEFAULT);\n\n    CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(connectionString, new ExponentialBackoffRetry(sleepTime, retryCount));\n    curatorFramework.start();\n\n    return curatorFramework;\n}", "CodeBleu_score": 63.264500838101625}, {"code": "public CuratorFramework curatorFramework(){\n\t    String connectionString = environment.getProperty(ZookeeperConstant.ZOOKEEPER_CONNECTION_STRING);\n    if (StringUtils.isEmpty(connectionString)) {\n        throw new DiscoveryException(\"Zookeeper connection string is null\");\n    }\n\n    int retryCount = environment.getProperty(ZookeeperConstant.ZOOKEEPER_RETRY_COUNT, int.class, ZookeeperConstant.ZOOKEEPER_RETRY_COUNT_DEFAULT);\n    int sleepTime = environment.getProperty(ZookeeperConstant.ZOOKEEPER_SLEEP_TIME, int.class, ZookeeperConstant.ZOOKEEPER_SLEEP_TIME_DEFAULT);\n\n    return CuratorFrameworkFactory.builder().connectString(connectionString).retryPolicy(new ExponentialBackoffRetry(sleepTime, retryCount)).build();\n}", "CodeBleu_score": 51.295204036065044}]}
{"instance_id": "3628d7b6f0a5", "generation_result": [{"code": "protected static class GatewayRouteZookeeperConfiguration{\n\t    @Autowired\n    private ConfigurableEnvironment environment;\n\n    @Bean\n    @ConditionalOnMissingBean\n    @ConditionalOnProperty(name = StrategyConstant.SPRING_APPLICATION_STRATEGY_ROUTE_ZOOKEEPER_ENABLED, matchIfMissing = true)\n    public GatewayStrategyRouteZookeeperProcessor gatewayStrategyRouteZookeeperProcessor() {\n        return new GatewayStrategyRouteZookeeperProcessor();\n    }\n\n    @Bean\n    @ConditionalOnMissingBean\n    @ConditionalOnProperty(name = StrategyConstant.SPRING_APPLICATION_STRATEGY_ROUTE_ZOOKEEPER_ENABLED, matchIfMissing = true)\n    public GatewayStrategyRoute zookeeperGatewayStrategyRoute() {\n        return new GatewayStrategyRouteZookeeperProcessor();\n    }\n}", "CodeBleu_score": 30.43440221957261}, {"code": "protected static class GatewayRouteZookeeperConfiguration{\n\t    @Bean\n    @ConditionalOnMissingBean\n    @ConditionalOnProperty(name = StrategyConstant.SPRING_APPLICATION_STRATEGY_ROUTE_ZOOKEEPER_ENABLED, matchIfMissing = true)\n    public GatewayStrategyRouteZookeeperProcessor gatewayStrategyRouteZookeeperProcessor(ConfigurableEnvironment environment) {\n        return new GatewayStrategyRouteZookeeperProcessor(environment);\n    }\n}", "CodeBleu_score": 24.199756542512834}, {"code": "protected static class GatewayRouteZookeeperConfiguration{\n\t    @Bean\n    @ConditionalOnMissingBean\n    public GatewayStrategyRouteZookeeperProcessor gatewayStrategyRouteZookeeperProcessor() {\n        return new GatewayStrategyRouteZookeeperProcessor();\n    }\n}", "CodeBleu_score": 33.12836865667273}]}
{"instance_id": "68a13b54ad7c", "generation_result": [{"code": "public  CuratorFramework createCuratorFramework(){\n\t\n    // create a ZooKeeper client\n    String hosts = \"localhost:2181\";\n    int sessionTimeoutMs = 10000;\n    int connectionTimeoutMs = 10000;\n    String namespace = \"myapp\";\n\n    // set the retry policy\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n\n    // create the CuratorFramework\n    CuratorFramework curatorFramework =\n            CuratorFrameworkFactory.builder()\n                    .connectString(hosts)\n                    .sessionTimeoutMs(sessionTimeoutMs)\n                    .connectionTimeoutMs(connectionTimeoutMs)\n                    .namespace(namespace)\n                    .retryPolicy(retryPolicy)\n                    .build();\n\n    // start the CuratorFramework\n    curatorFramework.start();\n\n    return curatorFramework;\n}", "CodeBleu_score": 49.480181394508215}, {"code": "public  CuratorFramework createCuratorFramework(){\n\t  // Get the ZooKeeper hosts from the ZooKeeper client properties.\n  String hosts = getZooKeeperClientProperties().getProperty(ZOOKEEPER_CLIENT_HOSTS);\n  // Get the ZooKeeper session timeout from the ZooKeeper client properties.\n  int sessionTimeout = Integer.parseInt(getZooKeeperClientProperties().getProperty(ZOOKEEPER_CLIENT_SESSION_TIMEOUT));\n  // Get the ZooKeeper namespace from the ZooKeeper client properties.\n  String namespace = getZooKeeperClientProperties().getProperty(ZOOKEEPER_CLIENT_NAMESPACE);\n  // Set the retry policy for the CuratorFramework instance.\n  RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n  // Create a CuratorFramework instance.\n  CuratorFramework curatorFramework = CuratorFrameworkFactory.builder()\n    .connectString(hosts)\n    .sessionTimeoutMs(sessionTimeout)\n    .namespace(namespace)\n    .retryPolicy(retryPolicy)\n    .build();\n  // Start the CuratorFramework instance.\n  curatorFramework.start();\n  // Return the initialized CuratorFramework instance.\n  return curatorFramework;\n}", "CodeBleu_score": 51.23179233035773}, {"code": "public  CuratorFramework createCuratorFramework(){\n\t  // get the zookeeper hosts from the properties file\n  String hosts = zookeeperProperties.getHosts();\n  // get the zookeeper session timeout from the properties file\n  int sessionTimeoutMs = zookeeperProperties.getSessionTimeoutMs();\n  // get the zookeeper namespace from the properties file\n  String namespace = zookeeperProperties.getNamespace();\n  // get the zookeeper retry policy from the properties file\n  String retryPolicy = zookeeperProperties.getRetryPolicy();\n  // get the zookeeper base sleep time from the properties file\n  int baseSleepTimeMs = zookeeperProperties.getBaseSleepTimeMs();\n  // get the zookeeper max retries from the properties file\n  int maxRetries = zookeeperProperties.getMaxRetries();\n  // get the zookeeper max sleep time from the properties file\n  int maxSleepTimeMs = zookeeperProperties.getMaxSleepTimeMs();\n\n  // create the retry policy\n  RetryPolicy retryPolicyObj = new ExponentialBackoffRetry(baseSleepTimeMs, maxRetries, maxSleepTimeMs);\n\n  // create the curator framework\n  CuratorFramework curatorFramework = CuratorFrameworkFactory.builder()\n      .connectString(hosts)\n      .sessionTimeoutMs(sessionTimeoutMs)\n      .namespace(namespace)\n      .retryPolicy(retryPolicyObj)\n      .build();\n\n  // start the curator framework\n  curatorFramework.start();\n\n  // return the initialized curator framework\n  return curatorFramework;\n}", "CodeBleu_score": 43.87509878422213}]}
{"instance_id": "018a3d7b5f59", "generation_result": [{"code": "public void lock(String path) throws DistributedLockException{\n\t    if (path == null || path.trim().isEmpty()) {\n        throw new DistributedLockException(\"path is null\");\n    }\n    if (locksMap.containsKey(path)) {\n        InterProcessLock lock = locksMap.get(path);\n        try {\n            lock.acquire();\n        } catch (Exception e) {\n            throw new DistributedLockException(\"acquire lock error\", e);\n        }\n    } else {\n        InterProcessLock lock = new InterProcessMutex(client, path);\n        try {\n            lock.acquire();\n        } catch (Exception e) {\n            throw new DistributedLockException(\"acquire lock error\", e);\n        }\n        locksMap.put(path, lock);\n    }\n}", "CodeBleu_score": 43.76654594507673}, {"code": "public void lock(String path) throws DistributedLockException{\n\t\n    if (path == null || path.trim().length() == 0) {\n        throw new DistributedLockException(\"path is null or empty\");\n    }\n\n    if (locksMap.containsKey(path)) {\n        InterProcessLock lock = locksMap.get(path);\n        try {\n            if (!lock.isAcquiredInThisProcess()) {\n                lock.acquire();\n            }\n        } catch (Exception e) {\n            throw new DistributedLockException(\"acquire lock error\", e);\n        }\n    } else {\n        InterProcessLock lock = new InterProcessMutex(client, path);\n        try {\n            lock.acquire();\n        } catch (Exception e) {\n            throw new DistributedLockException(\"acquire lock error\", e);\n        }\n        locksMap.put(path, lock);\n    }\n}", "CodeBleu_score": 45.19310146546777}, {"code": "public void lock(String path) throws DistributedLockException{\n\t    InterProcessLock lock = null;\n    try {\n        lock = getLock(path);\n        if (!lock.acquire(10, TimeUnit.SECONDS)) {\n            throw new DistributedLockException(\"\u83b7\u53d6\u5206\u5e03\u5f0f\u9501\u5931\u8d25\");\n        }\n    } catch (Exception e) {\n        throw new DistributedLockException(e);\n    }\n}", "CodeBleu_score": 15.87811871298177}]}
{"instance_id": "2068af09c973", "generation_result": [{"code": "public static Map<Object, Object> genPropertiesMap(DtpProperties dtpProperties){\n\t    Map<Object, Object> propertiesMap = Maps.newHashMap();\n    val properties = dtpProperties.getProperties();\n    val configType = dtpProperties.getConfigType();\n    val configFilePath = dtpProperties.getConfigFilePath();\n    val configFileType = dtpProperties.getConfigFileType();\n    val configKey = dtpProperties.getConfigKey();\n    val configValue = dtpProperties.getConfigValue();\n    if (PROPERTIES.equals(configType)) {\n        propertiesMap = genPropertiesTypeMap(properties);\n    } else if (JSON.equals(configFileType)) {\n        propertiesMap = genJsonTypeMap(properties, configFilePath, configKey, configValue);\n    }\n    return propertiesMap;\n}", "CodeBleu_score": 41.15213921496624}, {"code": "public static Map<Object, Object> genPropertiesMap(DtpProperties dtpProperties){\n\t    val curatorFramework = initCuratorFramework(dtpProperties);\n    val configType = dtpProperties.getConfigType();\n    val nodePath = getNodePath(dtpProperties, configType);\n    val propertiesMap = genPropertiesTypeMap(dtpProperties, configType, nodePath, curatorFramework);\n    return propertiesMap;\n}", "CodeBleu_score": 31.118076640879966}, {"code": "public static Map<Object, Object> genPropertiesMap(DtpProperties dtpProperties){\n\t    val curatorFramework = genCuratorFramework(dtpProperties);\n    val configPath = genConfigPath(dtpProperties);\n    val configType = dtpProperties.getConfigType();\n    Map<Object, Object> map = Maps.newHashMap();\n    if (configType.equals(PROPERTIES)) {\n        map = genPropertiesTypeMap(curatorFramework, configPath, dtpProperties);\n    } else if (configType.equals(JSON)) {\n        map = genJsonTypeMap(curatorFramework, configPath, dtpProperties);\n    }\n    return map;\n}", "CodeBleu_score": 42.326845972367295}]}
{"instance_id": "3d3c9020d299", "generation_result": [{"code": "public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application){\n\t    DtpProperties dtpProperties = BinderHelper.getDtpProperties();\n    if (dtpProperties == null) {\n        log.warn(\"DtpProperties is not found, DtpAutoConfiguration will be disabled.\");\n        return;\n    }\n    if (dtpProperties.getZookeeper() == null) {\n        log.warn(\"Zookeeper is not configured, DtpAutoConfiguration will be disabled.\");\n        return;\n    }\n    if (dtpProperties.getZookeeper().getAddress() == null) {\n        log.warn(\"Zookeeper address is not configured, DtpAutoConfiguration will be disabled.\");\n        return;\n    }\n    String address = dtpProperties.getZookeeper().getAddress();\n    String path = dtpProperties.getZookeeper().getPath();\n    String zkProperties = CuratorUtil.getZkProperties(address, path);\n    if (zkProperties == null) {\n        log.warn(\"Zookeeper properties is not found, DtpAutoConfiguration will be disabled.\");\n        return;\n    }\n    Map<String, Object> map = BinderHelper.bindProperties(zkProperties);\n    if (map == null || map.isEmpty()) {\n        log.warn(\"Zookeeper properties is empty, DtpAutoConfiguration will be disabled.\");\n        return;\n    }\n    MutablePropertySources propertySources = environment.getPropertySources();\n    if (propertySources.contains(\"zookeeper\")) {\n        propertySources.remove(\"zookeeper\");\n    }\n    OriginTrackedMapPropertySource zookeeper = new OriginTrackedMapPropertySource(\"zookeeper\", map);\n    propertySources.addLast(zookeeper);\n    log.info(\"Zookeeper properties is found, DtpAutoConfiguration will be enabled.\");\n}", "CodeBleu_score": 41.74060463761994}, {"code": "public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application){\n\t    log.info(\"[Dtp] DtpEnvironmentPostProcessor started\");\n    DtpProperties dtpProperties = BinderHelper.getDtpProperties(environment);\n    Map<String, Object> properties = BinderHelper.getProperties(dtpProperties);\n    if (properties.containsKey(DtpProperties.DT_ZOOKEEPER_ENABLED)) {\n        if (Boolean.parseBoolean(properties.get(DtpProperties.DT_ZOOKEEPER_ENABLED).toString())) {\n            MutablePropertySources propertySources = environment.getPropertySources();\n            OriginTrackedMapPropertySource propertySource = new OriginTrackedMapPropertySource(CuratorUtil.ZOOKEEPER_PROPERTY_SOURCE_NAME, properties);\n            propertySources.addLast(propertySource);\n        }\n    }\n}", "CodeBleu_score": 41.73823609595103}, {"code": "public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application){\n\t    DtpProperties dtpProperties = application.getBean(DtpProperties.class);\n    if (dtpProperties != null) {\n        BinderHelper.bindProperties(environment, dtpProperties);\n        Map<String, Object> dtpPropertiesMap = BinderHelper.getPropertiesMap(dtpProperties);\n        if (dtpPropertiesMap != null && !dtpPropertiesMap.isEmpty()) {\n            MutablePropertySources propertySources = environment.getPropertySources();\n            if (propertySources.contains(DtpProperties.DTP_PROPERTIES_SOURCE_NAME)) {\n                propertySources.remove(DtpProperties.DTP_PROPERTIES_SOURCE_NAME);\n            }\n            if (propertySources.contains(DtpProperties.DTP_PROPERTIES_ORIGIN_SOURCE_NAME)) {\n                propertySources.remove(DtpProperties.DTP_PROPERTIES_ORIGIN_SOURCE_NAME);\n            }\n            OriginTrackedMapPropertySource dtpPropertiesPropertySource = new OriginTrackedMapPropertySource(DtpProperties.DTP_PROPERTIES_SOURCE_NAME, dtpPropertiesMap);\n            propertySources.addFirst(dtpPropertiesPropertySource);\n            OriginTrackedMapPropertySource dtpPropertiesOriginPropertySource = new OriginTrackedMapPropertySource(DtpProperties.DTP_PROPERTIES_ORIGIN_SOURCE_NAME, dtpPropertiesMap);\n            propertySources.addFirst(dtpPropertiesOriginPropertySource);\n            if (dtpProperties.getZookeeper().isEnabled()) {\n                CuratorUtil.setZookeeperProperties(dtpPropertiesMap);\n            }\n        }\n    }\n}", "CodeBleu_score": 43.36013359022828}]}
{"instance_id": "0a934e7885be", "generation_result": [{"code": "public ZookeeperModule UseZooKeeperRouteManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t    if (builder == null) {\n        throw new ArgumentNullException(nameof(builder));\n    }\n    if (configInfo == null) {\n        throw new ArgumentNullException(nameof(configInfo));\n    }\n    builder.RegisterType<ZooKeeperServiceRouteManager>().As<IServiceRouteManager>().SingleInstance();\n    builder.RegisterType<ZooKeeperServiceRouteFactory>().As<IServiceRouteFactory>().SingleInstance();\n    builder.RegisterType<ZooKeeperServiceRouteProvider>().As<IServiceRouteProvider>().SingleInstance();\n    builder.RegisterType<ZooKeeperServiceSubscriber>().As<IServiceSubscriber>().SingleInstance();\n    builder.RegisterType<ZooKeeperServiceWatcher>().As<IServiceWatcher>().SingleInstance();\n    builder.RegisterType<ZooKeeperServiceHealthCheck>().As<IServiceHealthCheck>().SingleInstance();\n    builder.RegisterType<ZooKeeperServiceSubscriberFactory>().As<IServiceSubscriberFactory>().SingleInstance();\n    builder.RegisterType<ZooKeeperServiceWatcherFactory>().As<IServiceWatcherFactory>().SingleInstance();\n    builder.RegisterType<ZooKeeperServiceHealthCheckFactory>().As<IServiceHealthCheckFactory>().SingleInstance();\n    builder.RegisterType<ZooKeeperServiceRouteManagerFactory>().As<IServiceRouteManagerFactory>().SingleInstance();\n    builder.RegisterType<ZooKeeperServiceRouteFactoryFactory>().As<IServiceRouteFactoryFactory>().SingleInstance();\n    builder.RegisterType<ZooKeeperServiceRouteProviderFactory>().As<IServiceRouteProviderFactory>().SingleInstance();\n    builder.RegisterType<ZooKeeperServiceSubscriberFactoryFactory>().As<IServiceSubscriberFactoryFactory>().SingleInstance();\n    builder.RegisterType<ZooKeeperServiceWatcherFactoryFactory>().As<IServiceWatcherFactoryFactory>().SingleInstance();\n    builder.RegisterType<ZooKeeperServiceHealthCheckFactoryFactory>().As<IServiceHealthCheckFactoryFactory>().SingleInstance();\n    builder.Register", "CodeBleu_score": 37.96993015011489}, {"code": "public ZookeeperModule UseZooKeeperRouteManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t    builder.RegisterType<ZooKeeperServiceRouteManager>().As<IServiceRouteManager>().SingleInstance();\n    builder.RegisterType<ZooKeeperServiceRouteFactory>().As<IServiceRouteFactory>().SingleInstance();\n    builder.RegisterType<ZooKeeperServiceRouteManager>().As<IServiceRouteManager>().SingleInstance();\n    builder.RegisterType<ZooKeeperServiceRouteFactory>().As<IServiceRouteFactory>().SingleInstance();\n    builder.RegisterType<ZooKeeperServiceRouteFactory>().As<IServiceRouteFactory>().SingleInstance();\n    builder.RegisterType<ZooKeeperServiceRouteFactory>().As<IServiceRouteFactory>().SingleInstance();\n    builder.RegisterType<ZooKeeperServiceRouteFactory>().As<IServiceRouteFactory>().SingleInstance();\n    builder.RegisterType<ZooKeeperServiceRouteFactory>().As<IServiceRouteFactory>().SingleInstance();\n    builder.RegisterType<ZooKeeperServiceRouteFactory>().As<IServiceRouteFactory>().SingleInstance();\n    builder.RegisterType<ZooKeeperServiceRouteFactory>().As<IServiceRouteFactory>().SingleInstance();\n    builder.RegisterType<ZooKeeperServiceRouteFactory>().As<IServiceRouteFactory>().SingleInstance();\n    builder.RegisterType<ZooKeeperServiceRouteFactory>().As<IServiceRouteFactory>().SingleInstance();\n    builder.RegisterType<ZooKeeperServiceRouteFactory>().As<IServiceRouteFactory>().SingleInstance();\n    builder.RegisterType<ZooKeeperServiceRouteFactory>().As<IServiceRouteFactory>().SingleInstance();\n    builder.RegisterType<ZooKeeperServiceRouteFactory>().As<IServiceRouteFactory>().SingleInstance();\n    builder.RegisterType<ZooKeeperServiceRouteFactory>().As<IServiceRouteFactory>().SingleInstance();\n    builder.RegisterType<ZooKeeperServiceRouteFactory>().As<IServiceRouteFactory>().SingleInstance();\n    builder.RegisterType<ZooKeeperServiceRouteFactory>().As<IServiceRouteFactory>().SingleInstance();\n    builder.RegisterType<Zoo", "CodeBleu_score": 31.156753470077625}, {"code": "public ZookeeperModule UseZooKeeperRouteManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t    var zookeeperOption = new ZookeeperOption();\n    configInfo.GetSection(\"Zookeeper\").Bind(zookeeperOption);\n    builder.RegisterType(zookeeperOption.RouteType).As<IRouteFactory>().SingleInstance();\n    builder.RegisterType(zookeeperOption.SerializerType).As<ISerializer<byte[]>>().SingleInstance();\n    builder.RegisterType(zookeeperOption.ClientProviderType).As<IClientProvider>().SingleInstance();\n    builder.RegisterType(zookeeperOption.HealthCheckType).As<IHealthCheck>().SingleInstance();\n    builder.RegisterType(zookeeperOption.ServiceSubscriberType).As<IServiceSubscriber>().SingleInstance();\n    builder.RegisterType(zookeeperOption.ServiceCommandType).As<IServiceCommand>().SingleInstance();\n    builder.RegisterType(zookeeperOption.ServiceRouteFactoryType).As<IServiceRouteFactory>().SingleInstance();\n    builder.RegisterType(zookeeperOption.ServiceRouteManagerType).As<IServiceRouteManager>().SingleInstance();\n    builder.RegisterType(zookeeperOption.ServiceRouteFactoryType).As<IServiceRouteFactory>().SingleInstance();\n    builder.RegisterType(zookeeperOption.ServiceRouteManagerType).As<IServiceRouteManager>().SingleInstance();\n    builder.RegisterType(zookeeperOption.ServiceCommandType).As<IServiceCommand>().SingleInstance();\n    builder.RegisterType(zookeeperOption.ServiceSubscriberType).As<IServiceSubscriber>().SingleInstance();\n    builder.RegisterType(zookeeperOption.ServiceRouteFactoryType).As<IServiceRouteFactory>().SingleInstance();\n    builder.RegisterType(zookeeperOption.ServiceRouteManagerType).As<IServiceRouteManager>().SingleInstance();\n    builder.RegisterType(zookeeperOption.ServiceCommandType).As<IServiceCommand>().SingleInstance();\n    builder.RegisterType(zookeeperOption.ServiceSubscriberType).As<IServiceSubscriber>().SingleInstance();\n    builder.RegisterType(zookeeperOption.ServiceRouteFactoryType).As<IServiceRouteFactory>().SingleInstance();\n    builder.RegisterType(zookeeperOption", "CodeBleu_score": 37.808533545026044}]}
{"instance_id": "c30a17587331", "generation_result": [{"code": " public ZookeeperModule UseZooKeeperCommandManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t    var module = new ZookeeperModule(builder.ContainerBuilder);\n    module.ConfigureServices(builder.ContainerBuilder);\n    module.Configure(configInfo);\n    return module;\n}", "CodeBleu_score": 26.661355272895438}, {"code": " public ZookeeperModule UseZooKeeperCommandManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t        return UseZooKeeperCommandManager(builder, configInfo, null);\n    }", "CodeBleu_score": 23.86374936376735}, {"code": " public ZookeeperModule UseZooKeeperCommandManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t  builder.RegisterType<ZookeeperServiceCommandManager>().As<IServiceCommandManager>().SingleInstance();\n  builder.RegisterType<ZookeeperServiceCommand>().As<IServiceCommand>().SingleInstance();\n  builder.RegisterType<ZookeeperServiceRouteManager>().As<IServiceRouteManager>().SingleInstance();\n  builder.RegisterType<ZookeeperServiceRouteFactory>().As<IServiceRouteFactory>().SingleInstance();\n  builder.RegisterType<ZookeeperServiceRouteManager>().As<IServiceRouteManager>().SingleInstance();\n  builder.RegisterType<ZookeeperServiceRouteFactory>().As<IServiceRouteFactory>().SingleInstance();\n  builder.RegisterType<ZookeeperServiceRouteManager>().As<IServiceRouteManager>().SingleInstance();\n  builder.RegisterType<ZookeeperServiceRouteFactory>().As<IServiceRouteFactory>().SingleInstance();\n  builder.RegisterType<ZookeeperServiceRouteManager>().As<IServiceRouteManager>().SingleInstance();\n  builder.RegisterType<ZookeeperServiceRouteFactory>().As<IServiceRouteFactory>().SingleInstance();\n  builder.RegisterType<ZookeeperServiceRouteManager>().As<IServiceRouteManager>().SingleInstance();\n  builder.RegisterType<ZookeeperServiceRouteFactory>().As<IServiceRouteFactory>().SingleInstance();\n  builder.RegisterType<ZookeeperServiceRouteManager>().As<IServiceRouteManager>().SingleInstance();\n  builder.RegisterType<ZookeeperServiceRouteFactory>().As<IServiceRouteFactory>().SingleInstance();\n  builder.RegisterType<ZookeeperServiceRouteManager>().As<IServiceRouteManager>().SingleInstance();\n  builder.RegisterType<ZookeeperServiceRouteFactory>().As<IServiceRouteFactory>().SingleInstance();\n  builder.RegisterType<ZookeeperServiceRouteManager>().As<IServiceRouteManager>().SingleInstance();\n  builder.RegisterType<ZookeeperServiceRouteFactory>().As<IServiceRouteFactory>().SingleInstance();\n  builder.RegisterType<ZookeeperServiceRouteManager>().As<IServiceRouteManager>().SingleInstance();\n  builder.RegisterType<ZookeeperServiceRouteFactory>().As<IServiceRouteFactory", "CodeBleu_score": 33.2437069087371}]}
{"instance_id": "213cc4aa9b19", "generation_result": [{"code": "public static IConfigurationBuilder AddZookeeperFile(this IConfigurationBuilder builder, IFileProvider provider, string path, bool optional, bool reloadOnChange){\n\t    return AddZookeeperFile(builder, provider, path, optional, reloadOnChange, null);\n}", "CodeBleu_score": 12.407060733114156}, {"code": "public static IConfigurationBuilder AddZookeeperFile(this IConfigurationBuilder builder, IFileProvider provider, string path, bool optional, bool reloadOnChange){\n\t    if (builder == null) {\n        throw new ArgumentNullException(nameof(builder));\n    }\n    if (string.IsNullOrEmpty(path)) {\n        throw new ArgumentException(nameof(path));\n    }\n    if (provider == null && Path.IsPathRooted(path)) {\n        provider = new PhysicalFileProvider(Path.GetDirectoryName(path));\n        path = Path.GetFileName(path);\n    }\n    var source = new ZookeeperConfigurationSource {\n        FileProvider = provider,\n        Path = path,\n        Optional = optional,\n        ReloadOnChange = reloadOnChange\n    };\n    builder.Add(source);\n    return builder;\n}", "CodeBleu_score": 72.48831035970785}, {"code": "public static IConfigurationBuilder AddZookeeperFile(this IConfigurationBuilder builder, IFileProvider provider, string path, bool optional, bool reloadOnChange){\n\t    if (builder == null) {\n        throw new ArgumentNullException(nameof(builder));\n    }\n    if (string.IsNullOrEmpty(path)) {\n        throw new ArgumentException(\"File path must be a non-empty string.\", nameof(path));\n    }\n    if (provider == null && Path.IsPathRooted(path)) {\n        provider = new PhysicalFileProvider(Path.GetDirectoryName(path));\n        path = Path.GetFileName(path);\n    }\n    var source = new ZookeeperConfigurationSource {\n        Path = path,\n        Optional = optional,\n        ReloadOnChange = reloadOnChange,\n        FileProvider = provider\n    };\n    builder.Add(source);\n    return builder;\n}", "CodeBleu_score": 67.99714094679561}]}
{"instance_id": "15bbffa82a13", "generation_result": [{"code": "public override async Task RemveAddressAsync(IEnumerable<AddressModel> Address){\n\t    var addresses = Address.ToList();\n    if (addresses.Count == 0)\n        return;\n    var routes = await GetRoutesAsync();\n    var removeRoutes = new List<ServiceRoute>();\n    foreach (var route in routes)\n    {\n        var routeAddresses = route.Address.Where(p => addresses.Any(p.Equals)).ToList();\n        if (routeAddresses.Count > 0)\n        {\n            foreach (var address in routeAddresses)\n            {\n                route.Address.Remove(address);\n            }\n\n            if (route.Address.Count == 0)\n            {\n                removeRoutes.Add(route);\n            }\n        }\n    }\n\n    if (removeRoutes.Count > 0)\n    {\n        foreach (var route in removeRoutes)\n        {\n            routes.Remove(route);\n        }\n\n        await SetRoutesAsync(routes);\n    }\n}", "CodeBleu_score": 51.485630400466086}, {"code": "public override async Task RemveAddressAsync(IEnumerable<AddressModel> Address){\n\t    var routes = await GetRoutesAsync();\n    var newRoutes = new List<Route>();\n    foreach (var route in routes)\n    {\n        var address = route.Address.FirstOrDefault(p => Address.Any(p.Equals));\n        if (address != null)\n        {\n            var newAddress = new List<AddressModel>(route.Address);\n            newAddress.Remove(address);\n            var newRoute = new Route(route.Id, route.ServiceId, newAddress, route.HealthCheck, route.Metadata);\n            newRoutes.Add(newRoute);\n        }\n        else\n        {\n            newRoutes.Add(route);\n        }\n    }\n\n    await SetRoutesAsync(newRoutes);\n}", "CodeBleu_score": 39.99310168950978}, {"code": "public override async Task RemveAddressAsync(IEnumerable<AddressModel> Address){\n\t    var routes = await GetRoutesAsync();\n    var addressModels = Address.ToList();\n    foreach (var route in routes)\n    {\n        foreach (var addressModel in addressModels)\n        {\n            route.Address.Remove(addressModel);\n        }\n    }\n    await SetRoutesAsync(routes);\n}", "CodeBleu_score": 51.13870705700639}]}
{"instance_id": "125d23de2a60", "generation_result": [{"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<ServiceRoute> routes, AddressModel hostAddr){\n\t    var routePath = $\"{_zookeeperProvider.RoutePath}/{hostAddr.Host}:{hostAddr.Port}\";\n    var clientList = await _zookeeperProvider.GetChildrenAsync(routePath);\n    var newRoutes = routes.Select(i => i.ToRoutePath()).ToList();\n    var oldRoutes = clientList.Select(i => $\"{routePath}/{i}\").ToList();\n    var removeRoutes = oldRoutes.Except(newRoutes).ToList();\n    foreach (var route in removeRoutes) {\n        await _zookeeperProvider.DeleteAsync(route);\n    }\n}", "CodeBleu_score": 23.25066216561462}, {"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<ServiceRoute> routes, AddressModel hostAddr){\n\t    var serviceRoutes = await GetRoutesAsync();\n    var routesToRemove = serviceRoutes.Where(p => !routes.Any(q => q.Path == p.Path)).ToList();\n    var routePaths = routesToRemove.Select(p => p.Path).ToList();\n    foreach (var routePath in routePaths) {\n        var clients = await GetClientsAsync(routePath);\n        if (clients.Any(p => p.Address.Equals(hostAddr))) {\n            await RemoveClientAsync(routePath, hostAddr);\n        }\n    }\n}", "CodeBleu_score": 23.42736572581094}, {"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<ServiceRoute> routes, AddressModel hostAddr){\n\t    var clientProvider = _serviceRouteFactory.GetClientProvider();\n    var zookeeperPath = _serviceRouteFactory.GetRoutePath();\n    var zookeeperClient = clientProvider.GetZookeeperClient();\n    var children = await zookeeperClient.GetChildrenAsync(zookeeperPath);\n    var exists = children.Any();\n    if (!exists)\n    {\n        return;\n    }\n\n    var serviceRouteList = new List<ServiceRoute>();\n    foreach (var child in children)\n    {\n        var routePath = zookeeperPath + \"/\" + child;\n        var route = await zookeeperClient.ReadDataAsync<ServiceRoute>(routePath);\n        serviceRouteList.Add(route);\n    }\n\n    var exceptRoutes = serviceRouteList.Where(p => !routes.Any(q => q.Path == p.Path));\n    foreach (var route in exceptRoutes)\n    {\n        var addressModel = route.Address.FirstOrDefault(p => p.Host == hostAddr.Host && p.Port == hostAddr.Port);\n        if (addressModel != null)\n        {\n            var path = zookeeperPath + \"/\" + route.Path;\n            await zookeeperClient.DeleteAsync(path);\n        }\n    }\n}", "CodeBleu_score": 35.47687063145054}]}
{"instance_id": "b020a235d57f", "generation_result": [{"code": "private async Task<ServiceRoute> GetRoute(byte[] data){\n\t    if (data == null)\n        return null;\n\n    var descriptor = SerializationUtil.Deserialize<ServiceRouteDescriptor>(data);\n    var serviceRoute = await _serviceRouteFactory.Create(descriptor);\n    if (_logger.IsEnabled(LogLevel.Debug))\n        _logger.LogDebug($\"Get route {serviceRoute.ServiceDescriptor.Id} success.\");\n\n    return serviceRoute;\n}", "CodeBleu_score": 45.30011537348411}, {"code": "private async Task<ServiceRoute> GetRoute(byte[] data){\n\t    if (data == null) {\n        return null;\n    }\n    var route = await _serviceRouteFactory.CreateRoute(data);\n    if (route == null) {\n        return null;\n    }\n    if (_logger.IsEnabled(LogLevel.Debug)) {\n        _logger.LogDebug(\"Route: {0}\", route);\n    }\n    return route;\n}", "CodeBleu_score": 32.50933397229725}, {"code": "private async Task<ServiceRoute> GetRoute(byte[] data){\n\t    if (data == null)\n        return null;\n\n    var descriptor = _serializer.Deserialize<ServiceRouteDescriptor>(Encoding.UTF8.GetString(data));\n    if (descriptor == null)\n        return null;\n\n    var serviceRoute = await _serviceRouteFactory.Create(descriptor);\n    if (serviceRoute == null)\n        return null;\n\n    return serviceRoute;\n}", "CodeBleu_score": 42.25775623126645}]}
{"instance_id": "169ed4cc2ad4", "generation_result": [{"code": "public async Task NodeChange(byte[] oldData, byte[] newData){\n\t    var newRoute = _serializer.Deserialize<Route>(newData);\n    var oldRoute = _serializer.Deserialize<Route>(oldData);\n    if (oldRoute != null && newRoute != null && oldRoute.Path == newRoute.Path)\n    {\n        var routes = new List<Route>();\n        var address = newRoute.Address;\n        var addressList = address.ToList();\n        if (addressList.Any())\n        {\n            var addressModel = addressList.First();\n            addressModel.HealthCheck = newRoute.HealthCheck;\n            addressModel.Metadata = newRoute.Metadata;\n            addressModel.ExtendData = newRoute.ExtendData;\n            addressModel.IsAuth = newRoute.IsAuth;\n            addressModel.ServiceProtocol = newRoute.ServiceProtocol;\n            addressModel.ServiceProtocolMap = newRoute.ServiceProtocolMap;\n            addressModel.ServiceDescriptor = newRoute.ServiceDescriptor;\n            addressModel.ServiceId = newRoute.ServiceId;\n            addressModel.ServiceName = newRoute.ServiceName;\n            addressModel.ServicePath = newRoute.ServicePath;\n            addressModel.ServiceProviderName = newRoute.ServiceProviderName;\n            addressModel.ServiceProviderTypeName = newRoute.ServiceProviderTypeName;\n            addressModel.ServiceTypes = newRoute.ServiceTypes;\n            addressModel.Tags = newRoute.Tags;\n            addressModel.UniqueServiceId = newRoute.UniqueServiceId;\n            addressModel.Url = newRoute.Url;\n            addressModel.Watch = newRoute.Watch;\n            addressModel.Weight = newRoute.Weight;\n            addressModel.Enable = newRoute.Enable;\n            addressModel.Strategy = newRoute.Strategy;\n            addressModel.ServiceDescriptor = newRoute.ServiceDescriptor;\n            addressModel.ServiceProtocol = newRoute.ServiceProtocol;\n            addressModel.ServiceProtocolMap = newRoute.ServiceProtocolMap;\n            addressModel.ServiceTypes = newRoute.ServiceTypes;\n            addressModel.ServiceId = newRoute.ServiceId;\n            addressModel.ServiceName = newRoute.ServiceName;\n            addressModel.ServicePath = newRoute.ServicePath;\n            addressModel.ServiceProviderName = newRoute.Service", "CodeBleu_score": 27.759583732529926}, {"code": "public async Task NodeChange(byte[] oldData, byte[] newData){\n\t    var oldRoute = _serializer.Deserialize<Route>(oldData);\n    var newRoute = _serializer.Deserialize<Route>(newData);\n    if (newRoute.Equals(oldRoute))\n        return;\n\n    var routes = new List<Route>();\n    lock (_lock)\n    {\n        routes.AddRange(_routes);\n        _routes.Remove(oldRoute);\n        _routes.Add(newRoute);\n    }\n\n    await OnChanged(newRoute, oldRoute, routes);\n}", "CodeBleu_score": 24.800036685747624}, {"code": "public async Task NodeChange(byte[] oldData, byte[] newData){\n\t    var newRoute = _serialization.Deserialize<Route>(newData);\n    var oldRoute = _serialization.Deserialize<Route>(oldData);\n    var addressModel = newRoute.AddressModel;\n    if (addressModel == null)\n    {\n        _logger.LogWarning(\"Route address is null.\");\n        return;\n    }\n\n    var address = addressModel.GetAddress();\n    if (address == null)\n    {\n        _logger.LogWarning(\"Route address is null.\");\n        return;\n    }\n\n    var route = new Route(newRoute.ServiceDescriptor, address);\n    var serviceDescriptor = newRoute.ServiceDescriptor;\n    var serviceId = serviceDescriptor.Id;\n    var servicePath = serviceDescriptor.ServicePath;\n    var serviceGroup = serviceDescriptor.ServiceGroup;\n    var addressList = addressModel.GetAddress();\n    var serviceRoute = new ServiceRoute(serviceId, servicePath, serviceGroup, route, addressList);\n    if (oldRoute != null)\n    {\n        var oldAddressList = oldRoute.AddressList;\n        var newAddressList = addressList;\n        var oldAddress = oldAddressList.FirstOrDefault();\n        var newAddress = newAddressList.FirstOrDefault();\n        if (oldAddress == null || newAddress == null)\n        {\n            _routes.TryRemove(serviceId, out var route);\n            _logger.LogInformation($\"Route {serviceId} was removed.\");\n            OnChanged(serviceRoute, serviceRoute);\n            return;\n        }\n\n        if (oldAddress.Equals(newAddress))\n        {\n            _logger.LogInformation($\"Route {serviceId} was not changed.\");\n            return;\n        }\n\n        _routes.TryUpdate(serviceId, serviceRoute, serviceRoute);\n        _logger.LogInformation($\"Route {serviceId} was changed.\");\n        OnChanged(serviceRoute, serviceRoute);\n    }\n    else\n    {\n        _routes.TryAdd(serviceId, serviceRoute);\n        _logger.LogInformation($\"Route {serviceId} was added.\");\n        OnChanged(serviceRoute, default);\n    }\n}", "CodeBleu_score": 29.243764017686342}]}
{"instance_id": "af01261d3199", "generation_result": [{"code": "public override async Task SetSubscribersAsync(IEnumerable<ServiceSubscriber> subscribers){\n\t    var currentSubscribers = await GetSubscribersAsync();\n    var newSubscribers = subscribers.Where(p => p.SubscribeType == SubscribeType.Subscribe).ToList();\n    var oldSubscribers = subscribers.Where(p => p.SubscribeType == SubscribeType.Unsubscribe).ToList();\n    foreach (var subscriber in newSubscribers) {\n        var currentSubscriber = currentSubscribers.FirstOrDefault(p => p.ServiceId == subscriber.ServiceId);\n        if (currentSubscriber == null) {\n            currentSubscriber = new ServiceSubscriber\n            {\n                ServiceId = subscriber.ServiceId,\n                ServiceDescriptor = subscriber.ServiceDescriptor,\n                SubscribeType = SubscribeType.Subscribe,\n                Subscribers = new List<SubscriberModel>()\n            };\n            currentSubscribers.Add(currentSubscriber);\n        }\n        var currentSubscriberModel = currentSubscriber.Subscribers.FirstOrDefault(p => p.ServiceDescriptor.Id == subscriber.ServiceDescriptor.Id);\n        if (currentSubscriberModel == null) {\n            currentSubscriber.Subscribers.Add(new SubscriberModel\n            {\n                Address = subscriber.Address,\n                ServiceDescriptor = subscriber.ServiceDescriptor\n            });\n        }\n        else {\n            currentSubscriberModel.Address = subscriber.Address;\n        }\n    }\n    foreach (var subscriber in oldSubscribers) {\n        var currentSubscriber = currentSubscribers.FirstOrDefault(p => p.ServiceId == subscriber.ServiceId);\n        if (currentSubscriber != null) {\n            currentSubscriber.Subscribers.RemoveAll(p => p.ServiceDescriptor.Id == subscriber.ServiceDescriptor.Id);\n            if (currentSubscriber.Subscribers.Count == 0) {\n                currentSubscribers.Remove(currentSubscriber);\n            }\n        }\n    }\n    await base.SetSubscribersAsync(currentSubscribers);\n}", "CodeBleu_score": 37.80310245499773}, {"code": "public override async Task SetSubscribersAsync(IEnumerable<ServiceSubscriber> subscribers){\n\t    var addresses = subscribers.SelectMany(i => i.Address).Distinct().ToArray();\n    var watcher = new SubscribersWatcher(addresses, _serviceEntryProvider, _serviceSubscriberProvider, _serializationProvider, _loggerFactory);\n    await _serviceSubscriberProvider.UpdateSubscribersAsync(addresses, watcher, CancellationToken.None);\n}", "CodeBleu_score": 17.46944621392617}, {"code": "public override async Task SetSubscribersAsync(IEnumerable<ServiceSubscriber> subscribers){\n\t    var subscribersList = subscribers.ToList();\n    var serviceSubscribers = await GetSubscribersAsync(subscribersList.Select(p => p.ServiceId).ToList());\n    foreach (var serviceSubscriber in serviceSubscribers) {\n        var subscriber = subscribersList.FirstOrDefault(p => p.ServiceId.Equals(serviceSubscriber.ServiceId));\n        if (subscriber != null) {\n            subscriber.Address = serviceSubscriber.Address;\n        }\n    }\n    await base.SetSubscribersAsync(subscribersList);\n}", "CodeBleu_score": 44.091194946771964}]}
{"instance_id": "fda02cec3296", "generation_result": [{"code": "private async Task<ServiceSubscriber[]> GetSubscribers(IEnumerable<string> childrens){\n\t    var subscribers = new List<ServiceSubscriber>();\n    foreach (var children in childrens)\n    {\n        var nodePath = $\"{_options.SubscribersRootPath}/{children}\";\n        var data = await _zooKeeperClient.GetDataAsync(nodePath);\n        var subscriber = _serializer.Deserialize<ServiceSubscriber>(data.ToArray());\n        subscribers.Add(subscriber);\n        if (_logger.IsEnabled(LogLevel.Debug))\n        {\n            _logger.LogDebug($\"\u83b7\u53d6\u8ba2\u9605\u8005\u4fe1\u606f\u6210\u529f,\u8282\u70b9\u8def\u5f84\uff1a{nodePath},\u8ba2\u9605\u8005\u4fe1\u606f\uff1a{subscriber}\");\n        }\n    }\n    return subscribers.ToArray();\n}", "CodeBleu_score": 46.042437733567866}, {"code": "private async Task<ServiceSubscriber[]> GetSubscribers(IEnumerable<string> childrens){\n\t    var subscribers = new List<ServiceSubscriber>();\n    var rootPath = ZookeeperClientProvider.RootPath;\n    var logger = Logger;\n    foreach (var children in childrens) {\n        var fullPath = rootPath + \"/\" + children;\n        var result = await ZookeeperClientProvider.GetDataAsync(fullPath);\n        var subscriber = SerializationProvider.Deserialize<ServiceSubscriber>(result.Data);\n        subscriber.Id = children;\n        subscriber.Address = fullPath;\n        subscribers.Add(subscriber);\n        if (logger.IsEnabled(LogLevel.Debug)) {\n            logger.LogDebug($\"{fullPath} \u8282\u70b9\u7684\u8ba2\u9605\u8005\u4fe1\u606f\uff1a{subscriber}\");\n        }\n    }\n    return subscribers.ToArray();\n}", "CodeBleu_score": 51.721108465949605}, {"code": "private async Task<ServiceSubscriber[]> GetSubscribers(IEnumerable<string> childrens){\n\t    var subscribers = new List<ServiceSubscriber>();\n    var rootPath = $\"{_options.RootPath}/{_options.SubscribersPath}\";\n    var children = await _zooKeeperClient.GetChildrenAsync(rootPath);\n    foreach (var childrenNode in childrens) {\n        var nodePath = $\"{rootPath}/{childrenNode}\";\n        var data = await _zooKeeperClient.GetDataAsync(nodePath);\n        var subscriber = _serialization.Deserialize<ServiceSubscriber>(data.Data);\n        subscribers.Add(subscriber);\n    }\n    return subscribers.ToArray();\n}", "CodeBleu_score": 40.98957631060649}]}
{"instance_id": "6c3018ff0c0d", "generation_result": [{"code": "private async Task EnterSubscribers(){\n\t    if (_subscribers != null)\n        return;\n\n    _subscribers = new List<Subscriber>();\n\n    var client = await _clientProvider.GetClientAsync();\n\n    var exists = await client.ExistsAsync(_options.SubscribersPath);\n    if (exists != null) {\n        var children = await client.GetChildrenAsync(_options.SubscribersPath);\n        foreach (var child in children) {\n            var data = await client.GetDataAsync($\"{_options.SubscribersPath}/{child}\");\n            var subscriber = _serializer.Deserialize<Subscriber>(data.Result.Data);\n            _subscribers.Add(subscriber);\n        }\n    }\n    else {\n        _logger.LogWarning($\"Subscriber path {_options.SubscribersPath} does not exist.\");\n    }\n}", "CodeBleu_score": 41.662580018190624}, {"code": "private async Task EnterSubscribers(){\n\t    if (_subscribers != null)\n        return;\n\n    var client = _zooKeeperClientProvider.GetZooKeeperClient();\n    var path = _options.SubscriberPath;\n    var watcher = new SubscriberWatcher(_options, _subscribers, _logger);\n    var children = await client.getChildrenAsync(path, watcher);\n    var data = await client.getDataAsync(path, watcher);\n    _subscribers = data.Children.Select(id =>\n    {\n        var index = id.LastIndexOf('.');\n        if (index == -1)\n            return null;\n\n        var serviceId = id.Substring(0, index);\n        var serviceDescriptor = _serviceDescriptorProvider.GetServiceDescriptor(serviceId);\n        if (serviceDescriptor == null)\n            return null;\n\n        var serviceEntry = serviceDescriptor.ServiceEntries.FirstOrDefault(i => i.Id == id);\n        if (serviceEntry == null)\n            return null;\n\n        return new Subscriber(serviceId, serviceEntry, serviceDescriptor);\n    }).Where(i => i != null).ToArray();\n}", "CodeBleu_score": 33.381514756505354}, {"code": "private async Task EnterSubscribers(){\n\t    if (_subscribers == null) {\n        var client = await _clientProvider.GetClient();\n        var path = $\"{_zookeeperOptions.Path}/{_serviceSubscriberProvider.ServiceDescriptor.Id}/{_serviceSubscriberProvider.ServiceDescriptor.ApplicationId}/{_serviceSubscriberProvider.ServiceDescriptor.ServiceProtocol}\";\n        if (await client.ExistsAsync(path)) {\n            var children = await client.GetChildrenAsync(path);\n            var tasks = new List<Task<byte[]>>();\n            foreach (var child in children) {\n                tasks.Add(client.GetDataAsync($\"{path}/{child}\"));\n            }\n            var datas = await Task.WhenAll(tasks);\n            _subscribers = datas.Select(p => _serializationProvider.Deserialize<ServiceSubscriber>(p)).ToList();\n        } else {\n            _logger.LogWarning($\"The subscriber path {path} does not exist.\");\n            _subscribers = new List<ServiceSubscriber>();\n        }\n    }\n}", "CodeBleu_score": 36.222089953168265}]}
{"instance_id": "60ff973ba60a", "generation_result": [{"code": "public void NodeChange(byte[] oldData, byte[] newData){\n\t    var oldCommand = SerializationUtil.Deserialize<ServiceCommand>(oldData);\n    var newCommand = SerializationUtil.Deserialize<ServiceCommand>(newData);\n    if (oldCommand == null || newCommand == null)\n        return;\n    if (oldCommand.Id != newCommand.Id)\n        return;\n    if (oldCommand.ServiceDescriptor.Id != newCommand.ServiceDescriptor.Id)\n        return;\n    if (oldCommand.ServiceDescriptor.RoutePath != newCommand.ServiceDescriptor.RoutePath)\n        return;\n    if (oldCommand.ServiceDescriptor.ServiceProtocol != newCommand.ServiceDescriptor.ServiceProtocol)\n        return;\n    if (oldCommand.ServiceDescriptor.ServiceDescriptorItems.Count != newCommand.ServiceDescriptor.ServiceDescriptorItems.Count)\n        return;\n    if (oldCommand.ServiceDescriptor.ServiceDescriptorItems.Any(p => newCommand.ServiceDescriptor.ServiceDescriptorItems.All(q => q.Name != p.Name)))\n        return;\n    if (oldCommand.ServiceDescriptor.ServiceDescriptorItems.Any(p => newCommand.ServiceDescriptor.ServiceDescriptorItems.All(q => q.Name != p.Name)))\n        return;\n    if (oldCommand.ServiceDescriptor.ServiceDescriptorItems.Any(p => newCommand.ServiceDescriptor.ServiceDescriptorItems.All(q => q.Name != p.Name)))\n        return;\n    if (oldCommand.ServiceDescriptor.ServiceDescriptorItems.Any(p => newCommand.ServiceDescriptor.ServiceDescriptorItems.All(q => q.Name != p.Name)))\n        return;\n    if (oldCommand.ServiceDescriptor.ServiceDescriptorItems.Any(p => newCommand.ServiceDescriptor.ServiceDescriptorItems.All(q => q.Name != p.Name)))\n        return;\n    if (oldCommand.ServiceDescriptor.ServiceDescriptorItems.Any(p => newCommand.ServiceDescriptor.ServiceDescriptorItems.All(q => q.Name != p.Name)))\n        return;\n    if (oldCommand.ServiceDescriptor.ServiceDescriptorItems.Any(p => newCommand.ServiceDescriptor.ServiceDescriptorItems.All(q => q.Name != p.Name)))\n        return;\n    if (oldCommand.ServiceDescriptor.ServiceDescriptorItems.Any(p => newCommand.", "CodeBleu_score": 31.100385021069364}, {"code": "public void NodeChange(byte[] oldData, byte[] newData){\n\t\tif (oldData == null || newData == null) {\n\t\treturn;\n\t}\n\t\n\tvar oldCommands = _serializer.Deserialize<List<ServiceCommand>>(oldData);\n\tvar newCommands = _serializer.Deserialize<List<ServiceCommand>>(newData);\n\t\n\tif (oldCommands.Count == 0 && newCommands.Count == 0) {\n\t\treturn;\n\t}\n\t\n\tvar newCommandsList = new List<ServiceCommand>();\n\tvar oldCommandsList = new List<ServiceCommand>();\n\t\n\tforeach (var newCommand in newCommands) {\n\t\tvar oldCommand = oldCommands.FirstOrDefault(p => p.Id == newCommand.Id);\n\t\tif (oldCommand == null) {\n\t\t\tnewCommandsList.Add(newCommand);\n\t\t} else {\n\t\t\toldCommandsList.Add(oldCommand);\n\t\t}\n\t}\n\t\n\tforeach (var oldCommand in oldCommands) {\n\t\tvar newCommand = newCommands.FirstOrDefault(p => p.Id == oldCommand.Id);\n\t\tif (newCommand == null) {\n\t\t\toldCommandsList.Add(oldCommand);\n\t\t}\n\t}\n\t\n\tif (newCommandsList.Count > 0) {\n\t\t_logger.LogInformation($\"Zookeeper service change, {newCommandsList.Count} new service commands.\");\n\t\t_serviceCommandProvider.Update(newCommandsList);\n\t}\n\t\n\tif (oldCommandsList.Count > 0) {\n\t\t_logger.LogInformation($\"Zookeeper service change, {oldCommandsList.Count} removed service commands.\");\n\t\t_serviceCommandProvider.Remove(oldCommandsList);\n\t}\n\t\n\tif (newCommandsList.Count > 0 || oldCommandsList.Count > 0) {\n\t\tOnChanged?.Invoke(newCommandsList, oldCommandsList);\n\t}\n}", "CodeBleu_score": 35.12244805455092}, {"code": "public void NodeChange(byte[] oldData, byte[] newData){\n\t    var oldCommands = _serializer.Deserialize<List<ServiceCommand>>(oldData);\n    var newCommands = _serializer.Deserialize<List<ServiceCommand>>(newData);\n    var oldCommand = oldCommands.FirstOrDefault();\n    var newCommand = newCommands.FirstOrDefault();\n    if (oldCommand == null)\n    {\n        _logger.LogInformation($\"Service command {newCommand.ServiceId} has been registered.\");\n        _serviceCommandManager.Add(newCommand);\n        OnChanged?.Invoke(newCommand, null);\n        return;\n    }\n\n    if (newCommand == null)\n    {\n        _logger.LogInformation($\"Service command {oldCommand.ServiceId} has been unregistered.\");\n        _serviceCommandManager.Remove(oldCommand.ServiceId);\n        OnChanged?.Invoke(null, oldCommand);\n        return;\n    }\n\n    if (oldCommand.ServiceId != newCommand.ServiceId)\n    {\n        _logger.LogInformation($\"Service command {oldCommand.ServiceId} has been unregistered.\");\n        _serviceCommandManager.Remove(oldCommand.ServiceId);\n        _logger.LogInformation($\"Service command {newCommand.ServiceId} has been registered.\");\n        _serviceCommandManager.Add(newCommand);\n        OnChanged?.Invoke(newCommand, null);\n        return;\n    }\n\n    if (oldCommand.Route != newCommand.Route)\n    {\n        _logger.LogInformation($\"Service command {oldCommand.ServiceId} has been updated.\");\n        _serviceCommandManager.Update(oldCommand, newCommand);\n        OnChanged?.Invoke(newCommand, oldCommand);\n        return;\n    }\n}", "CodeBleu_score": 35.717533500460476}]}
{"instance_id": "4597b75f2b3d", "generation_result": [{"code": "protected override async Task ProcessImpl(WatchedEvent watchedEvent){\n\t    // If the event is a NodeDataChanged event, retrieve the updated data from the node asynchronously using a ZooKeeper client.\n    if (watchedEvent.get_Type() == Event.EventType.NodeDataChanged) {\n        // Create a ZooKeeper client instance.\n        ZooKeeper zookeeper = new ZooKeeper(zookeeperConnectionString, (int)timeOut, null);\n        // Create a task to retrieve the updated data from the node asynchronously.\n        Task<byte[]> task = zookeeper.getDataAsync(watchedEvent.get_Path(), false);\n        // Wait for the task to complete.\n        await task;\n        // Retrieve the updated data from the task.\n        byte[] data = task.Result;\n        // Create a string from the data.\n        string dataString = Encoding.UTF8.GetString(data);\n        // Execute the specified action with the current and new data.\n        action(watchedEvent.get_Path(), dataString);\n        // Update the watcher with the new data.\n        zookeeper.setDataAsync(watchedEvent.get_Path(), data);\n    }\n}", "CodeBleu_score": 48.620204683514544}, {"code": "protected override async Task ProcessImpl(WatchedEvent watchedEvent){\n\t    if (watchedEvent.get_Type() == Event.EventType.NodeDataChanged) {\n        // Retrieve the updated data from the node asynchronously using a ZooKeeper client.\n        var data = await this.ZooKeeper.getDataAsync(watchedEvent.get_Path(), null);\n        // Execute a specified action with the current and new data.\n        this.Action(this.Data, data);\n        // Update the watcher with the new data.\n        this.Data = data;\n    }\n}", "CodeBleu_score": 44.34729386998283}, {"code": "protected override async Task ProcessImpl(WatchedEvent watchedEvent){\n\t    var path = watchedEvent.Path\n    var eventType = watchedEvent.get_Type()\n    var state = watchedEvent.get_State()\n    var client = watchedEvent.get_Client()\n    if (state != Watcher.Event.KeeperState.SyncConnected) {\n        return\n    }\n    if (eventType == Watcher.Event.EventType.NodeDataChanged) {\n        var data = await client.getDataAsync(path)\n        var newData = Encoding.UTF8.GetString(data.Data)\n        var oldData = Encoding.UTF8.GetString(data.Stat.Data)\n        if (oldData != newData) {\n            // Execute the action with the old and new data.\n            await action(oldData, newData)\n            // Update the watcher with the new data.\n            await client.existsAsync(path, true)\n        }\n    }\n}", "CodeBleu_score": 54.74064214605113}]}
{"instance_id": "cb4f0e22a0d5", "generation_result": [{"code": "public static IServiceBuilder UseZookeeperClientProvider(this IServiceBuilder builder, ConfigInfo configInfo){\n\t    if (builder == null) {\n        throw new ArgumentNullException(nameof(builder));\n    }\n    if (configInfo == null) {\n        throw new ArgumentNullException(nameof(configInfo));\n    }\n    builder.Services.AddSingleton<IServiceCommandProvider>(new DefaultServiceCommandProvider(configInfo.Address));\n    builder.Services.AddSingleton<IServiceRouteProvider>(new DefaultServiceRouteProvider(configInfo.Address));\n    builder.Services.AddSingleton<IServiceSubscribeProvider>(new DefaultServiceSubscribeProvider(configInfo.Address));\n    builder.Services.AddSingleton<IServiceHealthCheckProvider>(new DefaultServiceHealthCheckProvider(configInfo.Address));\n    builder.Services.AddSingleton<IServiceEntryProvider>(new DefaultServiceEntryProvider(configInfo.Address));\n    builder.Services.AddSingleton<IServiceEntryManager>(new DefaultServiceEntryManager(configInfo.Address));\n    builder.Services.AddSingleton<IServiceSubscriberFactory>(new DefaultServiceSubscriberFactory(configInfo.Address));\n    builder.Services.AddSingleton<IServiceCommandFactory>(new DefaultServiceCommandFactory(configInfo.Address));\n    builder.Services.AddSingleton<IServiceRouteFactory>(new DefaultServiceRouteFactory(configInfo.Address));\n    builder.Services.AddSingleton<IServiceSubscriber>(new DefaultServiceSubscriber(configInfo.Address));\n    builder.Services.AddSingleton<IServiceCommand>(new DefaultServiceCommand(configInfo.Address));\n    builder.Services.AddSingleton<IServiceRoute>(new DefaultServiceRoute(configInfo.Address));\n    builder.Services.AddSingleton<IServiceHealthCheck>(new DefaultServiceHealthCheck(configInfo.Address));\n    builder.Services.AddSingleton<IServiceEntryManager>(new DefaultServiceEntryManager(configInfo.Address));\n    builder.Services.AddSingleton<IServiceEntryProvider>(new DefaultServiceEntryProvider(configInfo.Address));\n    builder.Services.AddSingleton<IServiceSubscribeProvider>(new DefaultServiceSubscribeProvider(configInfo.Address));\n    builder.Services.AddSingleton<IServiceRouteProvider>(new DefaultServiceRouteProvider(configInfo.Address));\n    builder.Services.Add", "CodeBleu_score": 37.097561146134105}, {"code": "public static IServiceBuilder UseZookeeperClientProvider(this IServiceBuilder builder, ConfigInfo configInfo){\n\t    builder.Services.AddSingleton<IServiceCommandProvider, DefaultServiceCommandProvider>();\n    builder.Services.AddSingleton<IServiceRouteFactory, DefaultServiceRouteFactory>();\n    builder.Services.AddSingleton<IServiceRouteBuilder, DefaultServiceRouteBuilder>();\n    builder.Services.AddSingleton<IServiceSubscriberFactory, DefaultServiceSubscriberFactory>();\n    builder.Services.AddSingleton<IServiceBuilder, DefaultServiceBuilder>();\n    builder.Services.AddSingleton<IServiceEntryProvider, DefaultServiceEntryProvider>();\n    builder.Services.AddSingleton<IServiceEntryFactory, DefaultServiceEntryFactory>();\n    builder.Services.AddSingleton<IServiceEntryManager, DefaultServiceEntryManager>();\n    builder.Services.AddSingleton<IServiceRouteManager, DefaultServiceRouteManager>();\n    builder.Services.AddSingleton<IServiceSubscriberManager, DefaultServiceSubscriberManager>();\n    builder.Services.AddSingleton<IServiceExecutor, DefaultServiceExecutor>();\n    builder.Services.AddSingleton<IServiceHostAdaptor, DefaultServiceHostAdaptor>();\n    builder.Services.AddSingleton<IServiceSubscriber, DefaultServiceSubscriber>();\n    builder.Services.AddSingleton<IServiceSubscriberFactory, DefaultServiceSubscriberFactory>();\n    builder.Services.AddSingleton<IServiceSubscriberManager, DefaultServiceSubscriberManager>();\n    builder.Services.AddSingleton<IServiceRouteFactory, DefaultServiceRouteFactory>();\n    builder.Services.AddSingleton<IServiceRouteManager, DefaultServiceRouteManager>();\n    builder.Services.AddSingleton<IServiceEntryFactory, DefaultServiceEntryFactory>();\n    builder.Services.AddSingleton<IServiceEntryProvider, DefaultServiceEntryProvider>();\n    builder.Services.AddSingleton<IServiceEntryManager, DefaultServiceEntryManager>();\n    builder.Services.AddSingleton<IServiceCommandProvider, DefaultServiceCommandProvider>();\n    builder.Services.AddSingleton<IServiceBuilder, DefaultServiceBuilder>();\n    builder.Services.AddSingleton<IServiceRouteFactory, DefaultServiceRouteFactory>();\n    builder.Services.AddSingleton<IServiceRouteManager, DefaultServiceRouteManager>();\n    builder.Services.AddSingleton<IServiceSubscriber", "CodeBleu_score": 30.936123036019513}, {"code": "public static IServiceBuilder UseZookeeperClientProvider(this IServiceBuilder builder, ConfigInfo configInfo){\n\t    return builder.RegisterAssemblyByConvention().RegisterType(typeof(DefaultZookeeperClientProvider)).As<IClientProvider>().WithParameter(\"configInfo\", configInfo).SingleInstance();\n}", "CodeBleu_score": 27.596553695496205}]}
{"instance_id": "80709a4b2b69", "generation_result": [{"code": "protected override async Task SetRoutesAsync(IEnumerable<MqttServiceDescriptor> routes){\n\t    var mqttRoutes = routes.ToList();\n    var address = mqttRoutes.Select(r => r.Address).ToList();\n    var serviceIds = mqttRoutes.Select(r => r.Id).ToList();\n    var servicePaths = mqttRoutes.Select(r => r.Path).ToList();\n    var serviceAddresses = mqttRoutes.Select(r => r.Address).ToList();\n    var serviceMetadatas = mqttRoutes.Select(r => r.Metadata).ToList();\n    var serviceProtocols = mqttRoutes.Select(r => r.Protocol).ToList();\n    var serviceProtocolTypes = mqttRoutes.Select(r => r.ProtocolType).ToList();\n    var serviceTokens = mqttRoutes.Select(r => r.Token).ToList();\n    var serviceTypes = mqttRoutes.Select(r => r.ServiceType).ToList();\n    var serviceLoadBalance = mqttRoutes.Select(r => r.LoadBalance).ToList();\n    var serviceEnable = mqttRoutes.Select(r => r.Enable).ToList();\n    var serviceEnableTls = mqttRoutes.Select(r => r.EnableTls).ToList();\n    var serviceTlsCertificate = mqttRoutes.Select(r => r.TlsCertificate).ToList();\n    var serviceTlsCertificateKey = mqttRoutes.Select(r => r.TlsCertificateKey).ToList();\n    var serviceTlsCertificatePassword = mqttRoutes.Select(r => r.TlsCertificatePassword).ToList();\n    var serviceTlsCertificateAuthority = mqttRoutes.Select(r => r.TlsCertificateAuthority).ToList();\n    var serviceTlsCertificateAuthorityPassword = mqttRoutes.Select(r => r.TlsCertificateAuthorityPassword).ToList();\n    var serviceTlsCertificateRevocationList = mqttRoutes.Select(r => r.TlsCertificateRevocationList).ToList();\n    var serviceTlsCertificateRevocationListPassword = mqttRoutes.Select(r => r.Tls", "CodeBleu_score": 12.551879996116039}, {"code": "protected override async Task SetRoutesAsync(IEnumerable<MqttServiceDescriptor> routes){\n\t    var zookeeperProvider = _zookeeperProvider;\n    var zookeeperClient = zookeeperProvider.GetClient();\n    if (zookeeperClient == null) {\n        return;\n    }\n\n    var watcher = new RoutesWatcher(_loggerFactory.CreateLogger<RoutesWatcher>());\n    watcher.Initialize(zookeeperClient, _zookeeperOptions);\n    await watcher.WatchAsync();\n\n    var mqttRoutePath = _zookeeperOptions.RoutePath;\n    if (!string.IsNullOrEmpty(mqttRoutePath)) {\n        var children = await zookeeperClient.GetChildrenAsync(mqttRoutePath);\n        var childrenPaths = children.Select(p => mqttRoutePath + \"/\" + p).ToArray();\n        await zookeeperClient.DeleteAsync(childrenPaths);\n    }\n\n    var routesPath = mqttRoutePath + \"/\" + MqttRouteProvider.RoutePath;\n    if (await zookeeperClient.ExistsAsync(routesPath) == false) {\n        await zookeeperClient.CreateAsync(routesPath, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n    }\n\n    foreach (var route in routes) {\n        var routePath = routesPath + \"/\" + route.Id;\n        var data = _serializer.Serialize(route);\n        if (await zookeeperClient.ExistsAsync(routePath) == false) {\n            await zookeeperClient.CreateAsync(routePath, data, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        } else {\n            await zookeeperClient.SetDataAsync(routePath, data);\n        }\n    }\n\n    _logger.LogInformation(\"Set mqtt routes success.\");\n}", "CodeBleu_score": 45.49221835600509}, {"code": "protected override async Task SetRoutesAsync(IEnumerable<MqttServiceDescriptor> routes){\n\t    var logger = LoggerFactory.CreateLogger<ZooKeeperMqttServiceRouteManager>();\n    var watcherProvider = ServiceLocator.GetService<IZooKeeperWatcherProvider>();\n    var zooKeeperClientProvider = ServiceLocator.GetService<IZooKeeperClientProvider>();\n    var serialization = ServiceLocator.GetService<ISerializer<byte[]>>();\n    var address = ServiceLocator.GetService<IServiceAddressProvider>();\n    var config = ServiceLocator.GetService<ZooKeeperOptions>();\n    var zooKeeperPath = config.RoutePath;\n    var zooKeeperAddress = config.ConnectionString;\n    var zooKeeperRoutePath = zooKeeperPath.EnsureEndsWith('/') + MqttRoutePath;\n    var zooKeeperAddressPath = zooKeeperPath.EnsureEndsWith('/') + MqttAddressPath;\n    var zooKeeperRouteWatcher = watcherProvider.GetWatcher(zooKeeperRoutePath);\n    var zooKeeperAddressWatcher = watcherProvider.GetWatcher(zooKeeperAddressPath);\n    var zooKeeperClients = zooKeeperClientProvider.GetClients();\n    var zooKeeperRouteClient = zooKeeperClients.FirstOrDefault(p => p.ConnectionString == zooKeeperAddress);\n    if (zooKeeperRouteClient == null) {\n        logger.LogWarning(\"ZooKeeper client not found.\");\n        return;\n    }\n    var zooKeeperAddressClient = zooKeeperClients.FirstOrDefault(p => p.ConnectionString == zooKeeperAddress);\n    if (zooKeeperAddressClient == null) {\n        logger.LogWarning(\"ZooKeeper client not found.\");\n        return;\n    }\n    if (!zooKeeperRouteClient.Exists(zooKeeperRoutePath)) {\n        logger.LogInformation(\"ZooKeeper route path does not exist, creating...\");\n        await zooKeeperRouteClient.CreateAsync(zooKeeperRoutePath, null, ZooDefs.Ids", "CodeBleu_score": 25.928342794011556}]}
{"instance_id": "69ff4d3427cd", "generation_result": [{"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<MqttServiceRoute> routes, AddressModel hostAddr){\n\t    var zookeeperProvider = ServiceLocator.GetService<IZookeeperProvider>();\n    var zookeeperClient = zookeeperProvider.GetZookeeperClient();\n    var zookeeperServiceRouteWatcher = ServiceLocator.GetService<IZookeeperServiceRouteWatcher>();\n    var zookeeperServiceSubscriberWatcher = ServiceLocator.GetService<IZookeeperServiceSubscriberWatcher>();\n    var zookeeperServicePublisherWatcher = ServiceLocator.GetService<IZookeeperServicePublisherWatcher>();\n    var zookeeperServiceRouteManager = ServiceLocator.GetService<IZookeeperServiceRouteManager>();\n    var zookeeperServiceSubscriberManager = ServiceLocator.GetService<IZookeeperServiceSubscriberManager>();\n    var zookeeperServicePublisherManager = ServiceLocator.GetService<IZookeeperServicePublisherManager>();\n    var zookeeperServiceRouteFactory = ServiceLocator.GetService<IZookeeperServiceRouteFactory>();\n    var zookeeperServiceSubscriberFactory = ServiceLocator.GetService<IZookeeperServiceSubscriberFactory>();\n    var zookeeperServicePublisherFactory = ServiceLocator.GetService<IZookeeperServicePublisherFactory>();\n    var zookeeperServiceRoutePathProvider = ServiceLocator.GetService<IZookeeperServiceRoutePathProvider>();\n    var zookeeperServiceSubscriberPathProvider = ServiceLocator.GetService<IZookeeperServiceSubscriberPathProvider>();\n    var zookeeperServicePublisherPathProvider = ServiceLocator.GetService<IZookeeperServicePublisherPathProvider>();\n    var logger = ServiceLocator.GetService<ILogger<ZookeeperServiceRouteManager>>();\n    var zookeeperServiceRouteWatcherProvider = ServiceLocator.GetService<IZookeeperServiceRouteWatcherProvider>();\n    var zookeeperServiceSubscriberWatcherProvider = ServiceLocator.GetService<IZookeeperServiceSubscriberWatcherProvider>();\n    var zookeeperServicePublisherWatcherProvider = ServiceLocator.GetService<IZookeeperServicePublisherWatcherProvider>();\n    var zookeeperServiceRouteManagerProvider = ServiceLocator.GetService<IZookeeperServiceRouteManagerProvider>();\n    var zookeeperServiceSubscriberManagerProvider = ServiceLocator.GetService<IZ", "CodeBleu_score": 15.504762227339155}, {"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<MqttServiceRoute> routes, AddressModel hostAddr){\n\t    var routePath = $\"/mqtt/{hostAddr.Host}:{hostAddr.Port}/routes\";\n    var children = await _zooKeeperClient.GetChildrenAsync(routePath);\n    foreach (var child in children) {\n        var route = await _zooKeeperClient.ReadDataAsync<MqttServiceRoute>(routePath + \"/\" + child);\n        if (!routes.Any(i => i.Id == route.Id)) {\n            if (route.Address.Host.Equals(hostAddr.Host) && route.Address.Port == hostAddr.Port) {\n                await _zooKeeperClient.DeleteAsync(routePath + \"/\" + child);\n            }\n        }\n    }\n}", "CodeBleu_score": 27.90025462528125}, {"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<MqttServiceRoute> routes, AddressModel hostAddr){\n\t    var currentRoutes = await GetRoutesAsync();\n    var exceptRoutes = currentRoutes.Where(r => !routes.Any(route => route.Path == r.Path));\n    foreach (var route in exceptRoutes) {\n        var client = await GetClient(route.Address);\n        var path = GetRoutePath(route.Path);\n        if (client.Children.Contains(path)) {\n            var children = await client.GetChildrenAsync(path);\n            foreach (var child in children) {\n                var host = child.Split(\":\")[0];\n                if (host == hostAddr.Host) {\n                    await client.DeleteAsync(path + \"/\" + child);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 32.36894660590144}]}
{"instance_id": "8856055e4872", "generation_result": [{"code": "public override async Task SetCachesAsync(IEnumerable<ServiceCacheDescriptor> cacheDescriptors){\n\t    var zookeeperConfig = AppConfig.GetSection(\"Surging:Zookeeper\");\n    var zookeeperOption = new ZookeeperOption();\n    zookeeperOption.ConnectionString = zookeeperConfig[\"ConnectionString\"];\n    zookeeperOption.SessionTimeout = int.Parse(zookeeperConfig[\"SessionTimeout\"]);\n    zookeeperOption.Root = zookeeperConfig[\"Root\"];\n    zookeeperOption.ConnectionTimeout = int.Parse(zookeeperConfig[\"ConnectionTimeout\"]);\n    zookeeperOption.ElectionPath = zookeeperConfig[\"ElectionPath\"];\n    zookeeperOption.ElectionValue = zookeeperConfig[\"ElectionValue\"];\n    zookeeperOption.LockPath = zookeeperConfig[\"LockPath\"];\n    zookeeperOption.LockValue = zookeeperConfig[\"LockValue\"];\n    zookeeperOption.EphemeralNodePath = zookeeperConfig[\"EphemeralNodePath\"];\n    zookeeperOption.EphemeralNodeValue = zookeeperConfig[\"EphemeralNodeValue\"];\n    zookeeperOption.Watcher = new ServiceCacheWatcher();\n    zookeeperOption.Serializer = new DefaultServiceCacheSerializer();\n    zookeeperOption.Serializer.Initialize(AppConfig);\n    var logger = ServiceLocator.GetService<ILogger<ZookeeperServiceCacheProvider>>();\n    var serviceCachePath = zookeeperOption.Root + \"/\" + \"ServiceCache\";\n    var cachePath = zookeeperOption.Root + \"/\" + \"Cache\";\n    var watcherProvider = ServiceLocator.GetService<IServiceCacheWatcherProvider>();\n    var serializer = zookeeperOption.Serializer;\n    var zookeeperClientProvider = ServiceLocator.GetService<IZookeeperClientProvider>();\n    var cacheDescriptorsList = cacheDescriptors.ToList();\n    foreach (var zookeeperClient in zookeeperClientProvider.GetClients())\n    {\n        var zookeeper = zookeeperClient.GetZookeeper();\n        await zookeeper.CreateAsync(serviceCachePath, null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        await zookeeper.CreateAsync(cachePath, null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSI", "CodeBleu_score": 31.596473200301734}, {"code": "public override async Task SetCachesAsync(IEnumerable<ServiceCacheDescriptor> cacheDescriptors){\n\t    var watcherProvider = ApplicationContext.ServiceProvider.GetService<IWatcherProvider>();\n    var logger = ApplicationContext.ServiceProvider.GetRequiredService<ILogger<ZookeeperServiceCacheManager>>();\n    var serializer = ApplicationContext.ServiceProvider.GetRequiredService<ISerializer<byte[]>>();\n    var configuration = ApplicationContext.ServiceProvider.GetRequiredService<ZookeeperOptions>();\n    var zookeeperProvider = ApplicationContext.ServiceProvider.GetService<IZookeeperClientProvider>();\n    var path = configuration.CachePath;\n    var zookeeperClients = zookeeperProvider.GetClients();\n    var tasks = new List<Task>();\n    foreach (var zookeeperClient in zookeeperClients) {\n        tasks.Add(Task.Run(async () => {\n            var client = zookeeperClient.GetClient();\n            var exists = await client.existsAsync(path, watcherProvider.GetWatcher<CacheDataChangedWatcher>());\n            if (exists == null) {\n                await client.createAsync(path, null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            }\n            var nodes = cacheDescriptors.Where(p => p.ServiceDescriptor.Id.GetHashCode() == zookeeperClient.GetHashCode()).ToList();\n            foreach (var node in nodes) {\n                var bytes = serializer.Serialize(node);\n                var path = $\"{configuration.CachePath}/{node.ServiceDescriptor.Id}\";\n                var exists = await client.existsAsync(path, watcherProvider.GetWatcher<CacheDataChangedWatcher>());\n                if (exists == null) {\n                    await client.createAsync(path, bytes, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n                } else {\n                    if (exists.getDataLength() != bytes.Length) {\n                        await client.setDataAsync(path, bytes);\n                    }\n                }\n            }\n        }));\n    }\n    await Task.WhenAll(tasks);\n    logger.LogInformation($\"Service cache has been updated successfully.\");\n}", "CodeBleu_score": 41.37481886133607}, {"code": "public override async Task SetCachesAsync(IEnumerable<ServiceCacheDescriptor> cacheDescriptors){\n\t    var cachePath = _zookeeperOptions.CachePath;\n    var zookeeperClients = await _zookeeperClientProvider.GetClientsAsync();\n    var logger = _loggerFactory.CreateLogger<ZookeeperCacheManager>();\n    var serializer = _serviceCommandExecutor.Serializer;\n    foreach (var zookeeperClient in zookeeperClients) {\n        if (!await zookeeperClient.ExistsAsync(cachePath)) {\n            await zookeeperClient.CreatePersistentAsync(cachePath, true);\n        }\n        var cacheDescriptorsByClient = cacheDescriptors.Where(p => p.ZookeeperClient == zookeeperClient);\n        foreach (var cacheDescriptor in cacheDescriptorsByClient) {\n            var cachePath = _zookeeperOptions.CachePath + \"/\" + cacheDescriptor.CacheDescriptor.Id;\n            var cacheDescriptorBytes = serializer.Serialize(cacheDescriptor.CacheDescriptor);\n            if (!await zookeeperClient.ExistsAsync(cachePath)) {\n                await zookeeperClient.CreatePersistentAsync(cachePath, cacheDescriptorBytes);\n            } else {\n                var data = await zookeeperClient.GetDataAsync(cachePath);\n                if (data != cacheDescriptorBytes) {\n                    await zookeeperClient.SetDataAsync(cachePath, cacheDescriptorBytes);\n                }\n            }\n        }\n    }\n    logger.LogInformation($\"Successfully added service caches.\");\n}", "CodeBleu_score": 40.93682957304093}]}
{"instance_id": "57d92c17de83", "generation_result": [{"code": "private async Task CreateSubdirectory((ManualResetEvent, ZooKeeper) zooKeeper, string path){\n\t    var (resetEvent, client) = zooKeeper;\n    resetEvent.WaitOne();\n    var nodes = path.Split('/').Where(p => !string.IsNullOrWhiteSpace(p)).ToArray();\n    var currentPath = \"/\";\n    for (var i = 0; i < nodes.Length; i++) {\n        var node = nodes[i];\n        if (i == nodes.Length - 1) {\n            await client.CreateAsync(currentPath + node, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            continue;\n        }\n        try {\n            await client.CreateAsync(currentPath + node, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        } catch (KeeperException.NodeExistsException) {\n        }\n        currentPath += node + \"/\";\n    }\n}", "CodeBleu_score": 40.91566982274022}, {"code": "private async Task CreateSubdirectory((ManualResetEvent, ZooKeeper) zooKeeper, string path){\n\t    var client = zooKeeper.Item2;\n    var resetEvent = zooKeeper.Item1;\n    resetEvent.WaitOne();\n    var subdirectories = path.Split(\"/\").ToList();\n    var subdirectory = subdirectories.First();\n    subdirectories.Remove(subdirectory);\n    if (subdirectory.Equals(\"\")) {\n        subdirectory = \"/\";\n    }\n    var result = await client.existsAsync(subdirectory);\n    if (result == null) {\n        var createResult = await client.createAsync(subdirectory, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        if (createResult != null) {\n            Logger.LogInformation($\"{subdirectory} created.\");\n        }\n    }\n    if (subdirectories.Count > 0) {\n        await CreateSubdirectory(zooKeeper, string.Join(\"/\", subdirectories));\n    }\n}", "CodeBleu_score": 34.65307147685513}, {"code": "private async Task CreateSubdirectory((ManualResetEvent, ZooKeeper) zooKeeper, string path){\n\t    var pathParts = path.Split('/').Where(part => part.Length > 0).ToArray();\n    var currentPath = \"/\";\n    var currentPathParts = new List<string> { currentPath };\n    for (var i = 0; i < pathParts.Length; i++) {\n        currentPath += pathParts[i] + \"/\";\n        currentPathParts.Add(currentPath);\n        if (i == pathParts.Length - 1) {\n            continue;\n        }\n        var exists = await zooKeeper.Item2.existsAsync(currentPath, null);\n        if (exists == null) {\n            var result = await zooKeeper.Item2.createAsync(currentPath, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            if (result == null) {\n                _logger.LogError($\"Unable to create path {currentPath}\");\n                return;\n            }\n            _logger.LogInformation($\"Created path {currentPath}\");\n        }\n    }\n}", "CodeBleu_score": 38.73551655803684}]}
{"instance_id": "b276a07da453", "generation_result": [{"code": "public async ValueTask<IEnumerable<(ManualResetEvent, ZooKeeper)>> GetZooKeepers(){\n\t    var zooKeeperAddresses = new List<(ManualResetEvent, ZooKeeper)>();\n    foreach (var address in _zooKeeperAddressProvider.Addresses)\n    {\n        var zooKeeperAddress = new ZooKeeperAddress(address);\n        var zooKeeper = new ZooKeeper(zooKeeperAddress.Host, zooKeeperAddress.SessionTimeout, new ZooKeeperWatcher(zooKeeperAddress.Host, _loggerFactory.CreateLogger<ZooKeeperWatcher>()));\n        var manualResetEvent = new ManualResetEvent(false);\n        zooKeeper.StateChanged += (sender, @event) =>\n        {\n            switch (@event.GetState())\n            {\n                case ZooKeeper.States.SyncConnected:\n                    manualResetEvent.Set();\n                    break;\n                case ZooKeeper.States.Expired:\n                    manualResetEvent.Set();\n                    break;\n                default:\n                    break;\n            }\n        };\n        zooKeeperAddresses.Add((manualResetEvent, zooKeeper));\n    }\n    var zooKeeperAddressesWithHealthStatus = new List<(ManualResetEvent, ZooKeeper)>();\n    foreach (var zooKeeperAddress in zooKeeperAddresses)\n    {\n        var zooKeeper = zooKeeperAddress.Item2;\n        var manualResetEvent = zooKeeperAddress.Item1;\n        try\n        {\n            zooKeeper.Connect();\n            if (manualResetEvent.WaitOne(zooKeeperAddress.Item2.SessionTimeout))\n            {\n                zooKeeperAddressesWithHealthStatus.Add(zooKeeperAddress);\n            }\n        }\n        catch (Exception ex)\n        {\n            _logger.LogWarning(ex, \"ZooKeeper address {address} is unhealthy.\", zooKeeper.ConnectString);\n        }\n    }\n    return zooKeeperAddressesWithHealthStatus;\n}", "CodeBleu_score": 53.67994425818529}, {"code": "public async ValueTask<IEnumerable<(ManualResetEvent, ZooKeeper)>> GetZooKeepers(){\n\t    var zooKeeperAddresses = await _zookeeperAddressProvider.GetAddressesAsync();\n    var zooKeeperInstances = new List<(ManualResetEvent, ZooKeeper)>();\n    foreach (var address in zooKeeperAddresses)\n    {\n        var zooKeeper = await CreateZooKeeperAsync(address);\n        var manualResetEvent = new ManualResetEvent(false);\n        zooKeeperInstances.Add((manualResetEvent, zooKeeper));\n    }\n    return zooKeeperInstances;\n}", "CodeBleu_score": 61.30946357113955}, {"code": "public async ValueTask<IEnumerable<(ManualResetEvent, ZooKeeper)>> GetZooKeepers(){\n\t    var zookeepers = new List<(ManualResetEvent, ZooKeeper)>();\n    var zookeeperAddresses = _zookeeperConfiguration.Address.Split(',');\n    var zookeeperAddressesCount = zookeeperAddresses.Length;\n    var zookeeperAddressesIndex = 0;\n    var zookeeperAddress = zookeeperAddresses[zookeeperAddressesIndex];\n    var zookeeperAddressesIndexLock = new object();\n    var zookeeperAddressesIndexLockValue = 0;\n    var zookeeperAddressesIndexLockValueLock = new object();\n    var zookeeperAddressesIndexLockValueLockValue = 0;\n    var zookeeperAddressesIndexLockValueLockValueLock = new object();\n    var zookeeperAddressesIndexLockValueLockValueLockValue = 0;\n    var zookeeperAddressesIndexLockValueLockValueLockValueLock = new object();\n    var zookeeperAddressesIndexLockValueLockValueLockValueLockValue = 0;\n    var zookeeperAddressesIndexLockValueLockValueLockValueLockValueLock = new object();\n    var zookeeperAddressesIndexLockValueLockValueLockValueLockValueLockValue = 0;\n    var zookeeperAddressesIndexLockValueLockValueLockValueLockValueLockValueLock = new object();\n    var zookeeperAddressesIndexLockValueLockValueLockValueLockValueLockValueLockValue = 0;\n    var zookeeperAddressesIndexLockValueLockValueLockValueLockValueLockValueLockValueLock = new object();\n    var zookeeperAddressesIndexLockValueLockValueLockValueLockValueLockValueLockValueLockValue = 0;\n    var zookeeperAddressesIndexLockValueLockValueLockValueLockValueLockValueLockValueLockValueLock = new object();\n    var zookeeperAddressesIndexLockValueLockValueLockValueLockValueLockValueLockValueLockValueLockValue = 0;\n    var zookeeperAddressesIndexLockValueLockValueLockValueLockValueLockValueLockValueLockValueLockValueLock = new object();\n    var zookeeperAddressesIndexLockValueLockValueLockValueLockValueLockValueLockValueLockValueLockValueLockValue = 0;\n    var zookeeperAddressesIndexLockValueLockValueLockValueLockValueLockValueLockValueLockValueLockValueLockValueLock = new object();\n    var zookeeperAddress", "CodeBleu_score": 19.05184208126986}]}
{"instance_id": "dbb6463e7ee8", "generation_result": [{"code": "ZooKeeper getZooKeeper() throws Exception{\n\t    synchronized (this) {\n        if (zooKeeper == null) {\n            zooKeeper = new ZooKeeper(ensembleProvider.getConnectionString(), sessionTimeoutMs, this);\n        }\n        return zooKeeper;\n    }\n}", "CodeBleu_score": 33.968916972532064}, {"code": "ZooKeeper getZooKeeper() throws Exception{\n\t    synchronized(this) {\n        if (zooKeeper == null) {\n            zooKeeper = new ZooKeeper(ensembleProvider.getConnectionString(), sessionTimeoutMs, new Watcher() {\n                public void process(WatchedEvent event) {\n                    // TODO: implement this method\n                }\n            });\n        }\n        return zooKeeper;\n    }\n}", "CodeBleu_score": 36.28569910880035}, {"code": "ZooKeeper getZooKeeper() throws Exception{\n\t\tsynchronized(this) {\n\t\tif (zooKeeper == null) {\n\t\t\tzooKeeper = new ZooKeeper(ensembleProvider.getConnectionString(), sessionTimeoutMs, new Watcher() {\n\t\t\t\t@Override\n\t\t\t\tpublic void process(WatchedEvent event) {\n\t\t\t\t\tif (event.getType() == Event.EventType.None && event.getState() == Event.KeeperState.SyncConnected) {\n\t\t\t\t\t\t// This is a notification that the connection was re-established.\n\t\t\t\t\t\t// We don't need to do anything here, but we do need to update the\n\t\t\t\t\t\t// last seen event time, so that we don't time out.\n\t\t\t\t\t\tlastSeenEvent = System.currentTimeMillis();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\thelper = new Helper(zooKeeper, this);\n\t\t}\n\t\treturn zooKeeper;\n\t}\n}", "CodeBleu_score": 34.481869331864225}]}
{"instance_id": "0d9f311aa482", "generation_result": [{"code": "private void internalClose(int waitForShutdownTimeoutMs) throws Exception{\n\t    if (zooKeeper != null) {\n        try {\n            // register a dummy watcher to clear the default watcher, preventing new events from being processed\n            zooKeeper.register(new Watcher() {\n                @Override\n                public void process(WatchedEvent event) {\n                    // ignore\n                }\n            });\n\n            if (waitForShutdownTimeoutMs > 0) {\n                // wait for shutdown\n                zooKeeper.close(waitForShutdownTimeoutMs);\n            } else {\n                // close immediately\n                zooKeeper.close();\n            }\n        } finally {\n            // restore the interrupted status\n            if (Thread.interrupted()) {\n                Thread.currentThread().interrupt();\n            }\n        }\n    }\n}", "CodeBleu_score": 42.903781821218324}, {"code": "private void internalClose(int waitForShutdownTimeoutMs) throws Exception{\n\t    if (zooKeeper != null) {\n        try {\n            // register a dummy watcher to clear the default watcher, preventing new events from being processed\n            zooKeeper.register(new Watcher() {\n                @Override\n                public void process(WatchedEvent event) {\n                }\n            });\n        } catch (Exception e) {\n            // ignore\n        }\n\n        if (waitForShutdownTimeoutMs > 0) {\n            // wait for shutdown\n            try {\n                zooKeeper.close(waitForShutdownTimeoutMs);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        } else {\n            // close immediately\n            zooKeeper.close();\n        }\n    }\n}", "CodeBleu_score": 46.3369795745429}, {"code": "private void internalClose(int waitForShutdownTimeoutMs) throws Exception{\n\t    // clear the default watcher\n    Watcher watcher = new Watcher() {\n        @Override\n        public void process(WatchedEvent event) {\n        }\n    };\n    // close the ZooKeeper instance\n    ZooKeeper zk = getZooKeeper();\n    if (zk != null) {\n        if (waitForShutdownTimeoutMs == 0) {\n            zk.close();\n        } else {\n            zk.close(waitForShutdownTimeoutMs);\n        }\n    }\n}", "CodeBleu_score": 40.07160909870767}]}
{"instance_id": "d57ef4592303", "generation_result": [{"code": "public boolean blockUntilConnectedOrTimedOut() throws InterruptedException{\n\t    Preconditions.checkState(state.get() == State.STARTED, \"Must be started\");\n    final AtomicReference<Boolean> result = new AtomicReference<Boolean>();\n    final CountDownLatch latch = new CountDownLatch(1);\n    final AtomicBoolean timedOut = new AtomicBoolean(false);\n    final OperationTrace trace = tracerDriver.trace(this, \"blockUntilConnectedOrTimedOut\");\n    final Watcher watcher = new Watcher()\n    {\n        @Override\n        public void process(WatchedEvent event)\n        {\n            if ( event.getState() == Event.KeeperState.SyncConnected )\n            {\n                result.set(true);\n                latch.countDown();\n            }\n            else if ( event.getState() == Event.KeeperState.Expired )\n            {\n                timedOut.set(true);\n                latch.countDown();\n            }\n        }\n    };\n    try\n    {\n        client.getZooKeeper().register(watcher);\n        latch.await(connectTimeoutMs, TimeUnit.MILLISECONDS);\n        if ( !timedOut.get() )\n        {\n            trace.commit();\n            return result.get();\n        }\n        else\n        {\n            trace.setStatus(OperationTrace.FAILURE);\n            trace.commit();\n            return false;\n        }\n    }\n    catch ( Exception e )\n    {\n        trace.setException(e);\n        trace.commit();\n        throw e;\n    }\n    finally\n    {\n        client.getZooKeeper().unregister(watcher);\n    }\n}", "CodeBleu_score": 30.755380208028203}, {"code": "public boolean blockUntilConnectedOrTimedOut() throws InterruptedException{\n\t    return blockUntilConnectedOrTimedOut(0, TimeUnit.MILLISECONDS);\n}", "CodeBleu_score": 5.326858260203291}, {"code": "public boolean blockUntilConnectedOrTimedOut() throws InterruptedException{\n\t    return blockUntilConnectedOrTimedOut(CONNECTION_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n}", "CodeBleu_score": 5.5211708708697245}]}
{"instance_id": "d722f6d0beb6", "generation_result": [{"code": "public void close(int waitForShutdownTimeoutMs){\n\t    if ( !started.get() ) {\n        return;\n    }\n    try {\n        if ( !shutdownLatch.await(waitForShutdownTimeoutMs, TimeUnit.MILLISECONDS) ) {\n            LOG.warn(\"Shutdown timed out after {} ms\", waitForShutdownTimeoutMs);\n        }\n    } catch ( InterruptedException e ) {\n        Thread.currentThread().interrupt();\n        LOG.warn(\"Interrupted while waiting for shutdown\", e);\n    }\n}", "CodeBleu_score": 41.053028557181456}, {"code": "public void close(int waitForShutdownTimeoutMs){\n\t    if ( started.get() )\n    {\n        log.info(\"Shutdown called on {}\", this);\n        started.set(false);\n\n        try\n        {\n            if ( closeable != null )\n            {\n                closeable.close();\n            }\n        }\n        catch ( IOException e )\n        {\n            if ( Thread.currentThread().isInterrupted() )\n            {\n                log.warn(\"Interrupted while closing\", e);\n            }\n            else\n            {\n                log.error(\"Error closing\", e);\n            }\n        }\n\n        try\n        {\n            if ( zk != null )\n            {\n                zk.close();\n            }\n        }\n        catch ( IOException e )\n        {\n            if ( Thread.currentThread().isInterrupted() )\n            {\n                log.warn(\"Interrupted while closing\", e);\n            }\n            else\n            {\n                log.error(\"Error closing\", e);\n            }\n        }\n\n        if ( waitForShutdownTimeoutMs > 0 )\n        {\n            try\n            {\n                shutdownLatch.await(waitForShutdownTimeoutMs, TimeUnit.MILLISECONDS);\n            }\n            catch ( InterruptedException e )\n            {\n                // ignore\n            }\n        }\n    }\n}", "CodeBleu_score": 36.94556074466374}, {"code": "public void close(int waitForShutdownTimeoutMs){\n\t    if ( !started.get() ) {\n        return;\n    }\n    started.set(false);\n    if ( waitForShutdownTimeoutMs < 0 ) {\n        waitForShutdownTimeoutMs = 0;\n    }\n    if ( waitForShutdownTimeoutMs == 0 ) {\n        // no wait\n        closeInternal();\n    } else {\n        final CountDownLatch latch = new CountDownLatch(1);\n        final Thread shutdownThread = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                closeInternal();\n                latch.countDown();\n            }\n        }, \"ZookeeperClient-shutdown-thread\");\n        shutdownThread.setDaemon(true);\n        shutdownThread.start();\n        try {\n            latch.await(waitForShutdownTimeoutMs, TimeUnit.MILLISECONDS);\n        } catch ( InterruptedException e ) {\n            Thread.currentThread().interrupt();\n        }\n    }\n}", "CodeBleu_score": 25.28698835444635}]}
{"instance_id": "8492e37ce46e", "generation_result": [{"code": "public void internalBlockUntilConnectedOrTimedOut() throws InterruptedException {\n\t    Preconditions.checkState(!isClosed(), \"Cannot wait on a closed Zookeeper client\");\n\n    final CountDownLatch latch = new CountDownLatch(1);\n    final AtomicBoolean connected = new AtomicBoolean(false);\n    final AtomicBoolean timedOut = new AtomicBoolean(false);\n    final AtomicReference<Watcher> watcher = new AtomicReference<Watcher>();\n    final AtomicReference<OperationTrace> trace = new AtomicReference<OperationTrace>();\n    final AtomicReference<ZooKeeper> zooKeeper = new AtomicReference<ZooKeeper>();\n\n    final Runnable watcherRunnable = new Runnable() {\n        @Override\n        public void run() {\n            while ( !timedOut.get() ) {\n                try {\n                    final ZooKeeper zk = zooKeeper.get();\n                    if ( zk == null ) {\n                        ThreadUtils.sleep(100);\n                        continue;\n                    }\n                    final Watcher watcher = watcher.get();\n                    if ( watcher == null ) {\n                        ThreadUtils.sleep(100);\n                        continue;\n                    }\n                    final OperationTrace trace = trace.get();\n                    final WatchedEvent event = zk.exists(\"/\", watcher);\n                    if ( event == null ) {\n                        ThreadUtils.sleep(100);\n                        continue;\n                    }\n                    if ( event.getState() == Watcher.Event.KeeperState.SyncConnected ) {\n                        connected.set(true);\n                        latch.countDown();\n                    }\n                } catch ( Throwable e ) {\n                    LOG.error(\"Error in watcher thread\", e);\n                }\n            }\n        }\n    };\n\n    final Runnable timeoutRunnable = new Runnable() {\n        @Override\n        public void run() {\n            try {\n                ThreadUtils.sleep(connectionTimeoutMs);\n            } catch ( InterruptedException e ) {\n                Thread.currentThread().interrupt();\n            }\n            if ( !connected.get() ) {\n                tim", "CodeBleu_score": 28.43211366596432}, {"code": "public void internalBlockUntilConnectedOrTimedOut() throws InterruptedException {\n\t    Preconditions.checkState(state.get() == State.LATENT, \"Cannot block until connected in state \" + state.get());\n    Preconditions.checkNotNull(ensembleProvider, \"ensembleProvider cannot be null\");\n\n    final CountDownLatch latch = new CountDownLatch(1);\n    final AtomicReference<Watcher> watcher = new AtomicReference<Watcher>();\n    final AtomicBoolean watcherSet = new AtomicBoolean(false);\n    final AtomicReference<ZooKeeper> zkRef = new AtomicReference<ZooKeeper>();\n\n    final Runnable runnable = new Runnable()\n    {\n        @Override\n        public void run()\n        {\n            try\n            {\n                zkRef.set(createZooKeeper());\n            }\n            catch ( Exception e )\n            {\n                // ignore\n            }\n\n            if ( zkRef.get() != null )\n            {\n                // watcher is used to check if the connection is still valid\n                watcher.set(new Watcher()\n                {\n                    @Override\n                    public void process(WatchedEvent event)\n                    {\n                        if ( event.getState() == Watcher.Event.KeeperState.SyncConnected )\n                        {\n                            // connection is still valid\n                            watcherSet.set(false);\n                            latch.countDown();\n                        }\n                        else if ( event.getState() == Watcher.Event.KeeperState.Expired )\n                        {\n                            // connection has been lost\n                            watcherSet.set(false);\n                            latch.countDown();\n                        }\n                    }\n                });\n\n                // add the watcher\n                try\n                {\n                    zkRef.get().exists(\"/\", watcher.get());\n                    watcherSet.set(true);\n                }\n                catch ( Exception e )\n                {\n                    // ignore\n                }\n            }\n        }\n    };\n\n    final Thread thread = new Thread(runnable);\n    thread.start();\n\n    // wait for the connection\n    try\n    {\n       ", "CodeBleu_score": 29.593076409681153}, {"code": "public void internalBlockUntilConnectedOrTimedOut() throws InterruptedException {\n\t    Preconditions.checkState(state == State.LATENT, \"Cannot call blockUntilConnectedOrTimedOut() more than once\");\n    state = State.CONNECTING;\n    try\n    {\n        final CountDownLatch connectedLatch = new CountDownLatch(1);\n        final AtomicBoolean timedOut = new AtomicBoolean(false);\n        final AtomicReference<Watcher> watcher = new AtomicReference<Watcher>();\n        final AtomicReference<Watcher> connectionWatcher = new AtomicReference<Watcher>();\n        final AtomicReference<Watcher> sessionWatcher = new AtomicReference<Watcher>();\n        final AtomicReference<Watcher> childWatcher = new AtomicReference<Watcher>();\n        final AtomicReference<Watcher> stateWatcher = new AtomicReference<Watcher>();\n        final AtomicReference<Watcher> dataWatcher = new AtomicReference<Watcher>();\n        final AtomicReference<Watcher> authWatcher = new AtomicReference<Watcher>();\n        final AtomicReference<Watcher> watcherWatcher = new AtomicReference<Watcher>();\n        final AtomicReference<Watcher> ephemeralWatcher = new AtomicReference<Watcher>();\n        final AtomicReference<Watcher> ephemeralWatcherWatcher = new AtomicReference<Watcher>();\n        final AtomicReference<Watcher> ephemeralNodeWatcher = new AtomicReference<Watcher>();\n        final AtomicReference<Watcher> ephemeralNodeWatcherWatcher = new AtomicReference<Watcher>();\n        final AtomicReference<Watcher> containerWatcher = new AtomicReference<Watcher>();\n        final AtomicReference<Watcher> containerWatcherWatcher = new AtomicReference<Watcher>();\n        final AtomicReference<Watcher> containerWatcherChildWatcher = new AtomicReference<Watcher>();\n        final AtomicReference<Watcher> containerWatcherChildWatcherWatcher = new AtomicReference<Watcher>();\n        final AtomicReference<Watcher> containerWatcherDataWatcher = new AtomicReference<Watcher>();\n        final AtomicReference<Watcher> containerWatcherDataWatcherWatcher = new At", "CodeBleu_score": 15.085116433055735}]}
{"instance_id": "4a01f5365731", "generation_result": [{"code": "String validateFoundNode(CuratorFrameworkImpl client, CreateMode createMode, String foundNode) throws Exception{\n\t    if (foundNode == null) {\n        return null;\n    }\n\n    if (createMode == CreateMode.EPHEMERAL || createMode == CreateMode.EPHEMERAL_SEQUENTIAL) {\n        String sessionId = client.getZookeeperClient().getSessionId().toString();\n        String clientSessionId = client.getZookeeperClient().getClient().getSessionId();\n        if (!sessionId.equals(clientSessionId)) {\n            String path = client.getNamespace() + foundNode;\n            logger.warn(\"Session ID changed during protected mode operation. Deleting old node: {}\", path);\n            client.getZookeeperClient().getZooKeeper().delete(path, -1);\n            client.getZookeeperClient().getZooKeeper().create(foundNode, null, CreateMode.EPHEMERAL, true);\n            logger.info(\"Created new ephemeral node: {}\", foundNode);\n        }\n    }\n    return foundNode;\n}", "CodeBleu_score": 46.281678997982986}, {"code": "String validateFoundNode(CuratorFrameworkImpl client, CreateMode createMode, String foundNode) throws Exception{\n\t    if (foundNode == null) {\n        return null;\n    }\n    if (createMode == CreateMode.EPHEMERAL) {\n        String sessionId = client.getZookeeperClient().getZooKeeper().getSessionId();\n        String oldSessionId = client.getEphemeralContainers().get(foundNode);\n        if (sessionId != oldSessionId) {\n            LOG.debug(\"Session ID changed from {} to {}\", oldSessionId, sessionId);\n            client.getZookeeperClient().getZooKeeper().delete(foundNode, -1);\n            client.getEphemeralContainers().remove(foundNode);\n            client.getEphemeralContainers().put(foundNode, sessionId);\n        }\n    }\n    return foundNode;\n}", "CodeBleu_score": 44.15919902034278}, {"code": "String validateFoundNode(CuratorFrameworkImpl client, CreateMode createMode, String foundNode) throws Exception{\n\t    if (foundNode != null) {\n        String sessionId = client.getZookeeperClient().getSessionId();\n        String previousSessionId = client.getPreviousSessionId();\n        if (sessionId != null && !sessionId.equals(previousSessionId)) {\n            logger.warn(\"Session id changed from {} to {}\", previousSessionId, sessionId);\n            client.getZookeeperClient().getZooKeeper().delete(foundNode, -1);\n            client.setPreviousSessionId(sessionId);\n            if (createMode == CreateMode.EPHEMERAL) {\n                foundNode = client.create().creatingParentsIfNeeded().withProtection().withMode(createMode).forPath(foundNode);\n            }\n        }\n    }\n    return foundNode;\n}", "CodeBleu_score": 46.80750196040845}]}
{"instance_id": "126d0922a699", "generation_result": [{"code": "private Stat pathInForeground(final String path, final List<ACL> aclList) throws Exception{\n\t    final OperationAndData<String> operationAndData = new OperationAndData<String>(path, aclList);\n    final OperationTrace<String> operationTrace = new OperationTrace<String>(client, \"setACL\", operationAndData);\n    final RetryLoop loop = client.getZookeeperClient().newRetryLoop();\n    final Stat stat = loop.withRetry(new Callable<Stat>() {\n        @Override\n        public Stat call() throws Exception {\n            return client.getZooKeeper().setACL(path, aclList, -1);\n        }\n    });\n    operationTrace.setResult(stat);\n    operationTrace.commit();\n    return stat;\n}", "CodeBleu_score": 58.39130560277277}, {"code": "private Stat pathInForeground(final String path, final List<ACL> aclList) throws Exception{\n\t    final OperationAndData<String> operationAndData = new OperationAndData<String>(path, null);\n    final OperationTrace trace = new OperationTrace(getZooKeeper(), operationAndData);\n    trace.started().path(path).acl(aclList);\n    final RetryLoop loop = new RetryLoop(getRetryPolicy(), getContext(), getUnhandledErrorListener(), getDefaultData(), getDefaultACL(), getDefaultCreateMode(), trace, getSessionId(), getSessionPasswd());\n    final Stat result = loop.callWithRetry(new Callable<Stat>() {\n        @Override\n        public Stat call() throws Exception {\n            return getZooKeeper().setACL(path, aclList, -1);\n        }\n    });\n    trace.setStat(result);\n    trace.commit();\n    return result;\n}", "CodeBleu_score": 55.90154041585198}, {"code": "private Stat pathInForeground(final String path, final List<ACL> aclList) throws Exception{\n\t    final OperationTrace.Call detail = trace.detail(\"pathInForeground\", path);\n    final RetryLoop loop = client.getZookeeperClient().newRetryLoop();\n    while ( true )\n    {\n        final Stat stat = loop.callWithRetry(new Callable<Stat>()\n        {\n            @Override\n            public Stat call() throws Exception\n            {\n                return client.getZooKeeper().setACL(path, aclList, -1);\n            }\n        });\n        if ( stat != null )\n        {\n            detail.setResult(stat);\n            break;\n        }\n    }\n    return detail.getResult();\n}", "CodeBleu_score": 54.162039215857874}]}
{"instance_id": "e07b079ff61f", "generation_result": [{"code": "public GroupMember(CuratorFramework client, String membershipPath, String thisId, byte[] payload){\n\t    Preconditions.checkNotNull(client, \"client cannot be null\");\n    Preconditions.checkNotNull(membershipPath, \"membershipPath cannot be null\");\n    Preconditions.checkNotNull(thisId, \"thisId cannot be null\");\n    Preconditions.checkNotNull(payload, \"payload cannot be null\");\n    this.client = client;\n    this.membershipPath = membershipPath;\n    this.thisId = thisId;\n    this.payload = payload;\n    this.cache = CuratorCache.build(client, membershipPath);\n    this.cache.listenable().addListener(new CuratorCacheListener() {\n        @Override\n        public void eventReceived(CuratorCacheEvent event) throws Exception {\n            if (event.getType() == CuratorCacheEvent.Type.INITIALIZED) {\n                for (ChildData childData : event.getInitialized().getInitialData()) {\n                    if (childData.getPath().equals(membershipPath)) {\n                        continue;\n                    }\n                    String memberId = ZKPaths.getNodeFromPath(childData.getPath());\n                    if (memberId.equals(thisId)) {\n                        continue;\n                    }\n                    if (childData.getStat() == null) {\n                        if (childData.getData() == null) {\n                            if (members.containsKey(memberId)) {\n                                members.remove(memberId);\n                                if (listener != null) {\n                                    listener.memberRemoved(memberId);\n                                }\n                            }\n                        } else {\n                            members.put(memberId, childData.getData());\n                            if (listener != null) {\n                                listener.memberAdded(memberId);\n                            }\n                        }\n                    } else {\n                        members.put(memberId, childData.getData());\n                        if (listener != null) {\n                            listener.memberChanged(memberId);\n                        }\n                    }\n                }\n            } else if (event.getType() == CuratorCacheEvent.Type.NODE_CHANGED) {\n                ChildData", "CodeBleu_score": 40.38595363725294}, {"code": "public GroupMember(CuratorFramework client, String membershipPath, String thisId, byte[] payload){\n\t    Preconditions.checkNotNull(client, \"client cannot be null\");\n    Preconditions.checkNotNull(membershipPath, \"membershipPath cannot be null\");\n    Preconditions.checkNotNull(thisId, \"thisId cannot be null\");\n    Preconditions.checkNotNull(payload, \"payload cannot be null\");\n    this.client = client;\n    this.membershipPath = membershipPath;\n    this.thisId = thisId;\n    this.payload = payload;\n\n    // create the membership path if it doesn't exist\n    try {\n        client.create().creatingParentsIfNeeded().forPath(membershipPath);\n    } catch (Exception e) {\n        throw Throwables.propagate(e);\n    }\n\n    // create the persistent node for this member\n    try {\n        this.memberNode = new PersistentNode(client, membershipPath + \"/\" + thisId, payload, CreateMode.EPHEMERAL);\n    } catch (Exception e) {\n        throw Throwables.propagate(e);\n    }\n\n    // create the cache for the membership path\n    try {\n        this.cache = CuratorCache.build(client, membershipPath);\n    } catch (Exception e) {\n        throw Throwables.propagate(e);\n    }\n\n    // start the cache\n    try {\n        cache.start();\n    } catch (Exception e) {\n        throw Throwables.propagate(e);\n    }\n\n    // start the bridge\n    try {\n        bridge = new CuratorCacheBridge(cache, new GroupMemberListener(this), parentPathFilter(membershipPath));\n        bridge.start();\n    } catch (Exception e) {\n        throw Throwables.propagate(e);\n    }\n}", "CodeBleu_score": 45.6877758761659}, {"code": "public GroupMember(CuratorFramework client, String membershipPath, String thisId, byte[] payload){\n\t    Preconditions.checkNotNull(client, \"client cannot be null\");\n    Preconditions.checkNotNull(membershipPath, \"membershipPath cannot be null\");\n    Preconditions.checkNotNull(thisId, \"thisId cannot be null\");\n    Preconditions.checkNotNull(payload, \"payload cannot be null\");\n\n    this.client = client;\n    this.membershipPath = membershipPath;\n    this.thisId = thisId;\n    this.payload = payload;\n\n    // Check if the member ID is valid\n    if (thisId.contains(\"/\")) {\n        throw new IllegalArgumentException(\"Invalid member ID: \" + thisId);\n    }\n\n    // Create the membership path if it does not exist\n    if (!client.checkExists().forPath(membershipPath) != null) {\n        client.create().creatingParentsIfNeeded().forPath(membershipPath);\n    }\n\n    // Create a CuratorCache for the membership path\n    cache = CuratorCache.build(client, membershipPath);\n    cache.listenable().addListener(new CacheListener());\n\n    // Create a PersistentNode with ephemeral mode for the member using the provided payload\n    memberNode = new PersistentNode(client, CreateMode.EPHEMERAL, membershipPath + \"/\" + thisId, payload);\n}", "CodeBleu_score": 47.881400165072726}]}
{"instance_id": "d11c76b2b912", "generation_result": [{"code": "public static void createThenWatch(CuratorFramework client, String path) {\n\t    AsyncCuratorFramework asyncClient = client.async();\n    CompletionStage<String> stage = asyncClient.create().creatingParentsIfNeeded().withMode(CreateMode.PERSISTENT).forPath(path);\n    stage.whenComplete((path, throwable) -> {\n        if (throwable != null) {\n            System.err.println(\"Error creating node \" + path + \": \" + throwable);\n            throwable.printStackTrace();\n        } else {\n            System.out.println(\"Created node \" + path);\n            asyncClient.getChildren().usingWatcher(new Watcher() {\n                @Override\n                public void process(WatchedEvent event) throws Exception {\n                    System.out.println(\"Got event \" + event);\n                }\n            }).forPath(path).whenComplete((children, throwable) -> {\n                if (throwable != null) {\n                    System.err.println(\"Error getting children for node \" + path + \": \" + throwable);\n                    throwable.printStackTrace();\n                } else {\n                    System.out.println(\"Children for node \" + path + \": \" + children);\n                }\n            });\n        }\n    });\n}", "CodeBleu_score": 40.949390294122466}, {"code": "public static void createThenWatch(CuratorFramework client, String path) {\n\t    CompletionStage<String> result = client.create().creatingParentsIfNeeded().withMode(CreateMode.PERSISTENT).forPath(path);\n    result.handle((value, throwable) -> {\n        if (throwable != null) {\n            throwable.printStackTrace();\n        }\n        return null;\n    });\n    client.checkExists().usingWatcher(new Watcher() {\n        @Override\n        public void process(WatchedEvent event) {\n            System.out.println(\"Event received: \" + event.getType());\n        }\n    }).forPath(path);\n}", "CodeBleu_score": 48.09632944599342}, {"code": "public static void createThenWatch(CuratorFramework client, String path) {\n\t    AsyncCuratorFramework asyncClient = client.async();\n    CompletionStage<String> stage = asyncClient.create().creatingParentsIfNeeded().withMode(CreateMode.PERSISTENT).forPath(path);\n    stage.whenComplete((createdPath, throwable) -> {\n        if (throwable != null) {\n            throwable.printStackTrace();\n        } else {\n            System.out.println(\"Created \" + createdPath);\n            asyncClient.getChildren().usingWatcher((client, event) -> {\n                System.out.println(\"Got event \" + event);\n            }).withMode(WatchMode.PERSISTENT).forPath(path).whenComplete((children, throwable) -> {\n                if (throwable != null) {\n                    if (throwable instanceof AsyncEventException) {\n                        WatchedEvent event = ((AsyncEventException) throwable).getWatchedEvent();\n                        System.out.println(\"Got event \" + event);\n                    } else {\n                        throwable.printStackTrace();\n                    }\n                } else {\n                    System.out.println(\"Got children \" + children);\n                }\n            });\n        }\n    });\n}", "CodeBleu_score": 41.71453908131444}]}
{"instance_id": "4571de52ad5d", "generation_result": [{"code": "private List<OpResult> doOperation() throws Exception{\n\t    Preconditions.checkState(transactionOp.size() > 0, \"Transaction must contain at least one operation\");\n    final List<OpResult> results = client.transaction().forPath(transactionPath, transactionOp);\n    final OpResult result = results.get(0);\n    if (result.getType() == OpResult.ErrorResult.class) {\n        final ErrorResult errorResult = (ErrorResult) result;\n        throw KeeperException.create(errorResult.getErr(), errorResult.getPath());\n    }\n    return results;\n}", "CodeBleu_score": 34.00284728957706}, {"code": "private List<OpResult> doOperation() throws Exception{\n\t    Preconditions.checkNotNull(client, \"null client\");\n    Preconditions.checkNotNull(ops, \"null ops\");\n\n    final List<OpResult> results = client.getZooKeeper().multi(ops);\n    if (results.isEmpty()) {\n        return results;\n    }\n\n    final OpResult result = results.get(0);\n    final int errorCode = result.getErr();\n    if (errorCode != 0) {\n        throw KeeperException.create(KeeperException.Code.get(errorCode),\n                \"multi failed with error code \" + errorCode);\n    }\n    return results;\n}", "CodeBleu_score": 37.08162698217923}, {"code": "private List<OpResult> doOperation() throws Exception{\n\t    Preconditions.checkState(this.transactionOps.size() > 0, \"no operations to execute\");\n    List<OpResult> results = this.client.getZooKeeper().multi(this.transactionOps);\n    if (results.isEmpty()) {\n        return results;\n    }\n    OpResult firstResult = results.get(0);\n    if (firstResult.getType() == ZooDefs.OpCode.error) {\n        KeeperException.Code code = KeeperException.Code.get((int)((ErrorResult)firstResult).getErr());\n        throw KeeperException.create(code);\n    }\n    return results;\n}", "CodeBleu_score": 54.13696922094452}]}
{"instance_id": "99263700ce6d", "generation_result": [{"code": "private static void listInstances(ServiceDiscovery<InstanceDetails> serviceDiscovery) throws Exception{\n\t    // Get all service names\n    Collection<String> serviceNames = serviceDiscovery.queryForNames();\n\n    // Get all service instances for each service name\n    for (String serviceName : serviceNames) {\n        ServiceProvider<InstanceDetails> serviceProvider = serviceDiscovery.serviceProviderBuilder()\n                .serviceName(serviceName)\n                .providerStrategy(new RandomStrategy<InstanceDetails>())\n                .build();\n\n        // Get all instances for the service name\n        List<ServiceInstance<InstanceDetails>> instances = serviceProvider.getInstanceList();\n        if (instances.isEmpty()) {\n            System.out.println(\"No instances found for service \" + serviceName);\n        } else {\n            System.out.println(\"Service \" + serviceName + \" has \" + instances.size() + \" instances:\");\n            for (ServiceInstance<InstanceDetails> instance : instances) {\n                System.out.println(instance.buildJsonString());\n            }\n        }\n    }\n}", "CodeBleu_score": 49.94745811589838}, {"code": "private static void listInstances(ServiceDiscovery<InstanceDetails> serviceDiscovery) throws Exception{\n\t    // Query for all service names and their instances\n    Collection<String> serviceNames = serviceDiscovery.queryForNames();\n    System.out.println(\"Service names: \" + serviceNames);\n    for (String serviceName : serviceNames) {\n        System.out.println(\"Service name: \" + serviceName);\n        ServiceProvider<InstanceDetails> serviceProvider = serviceDiscovery.serviceProviderBuilder()\n                .serviceName(serviceName)\n                .providerStrategy(new RandomStrategy<>())\n                .build();\n        try {\n            // Get the first instance\n            ServiceInstance<InstanceDetails> instance = serviceProvider.getInstance();\n            System.out.println(\"Instance: \" + instance.getName());\n            System.out.println(\"Instance details: \" + instance.getPayload());\n            // Get the rest of the instances\n            Collection<ServiceInstance<InstanceDetails>> instances = serviceProvider.getInstanceList();\n            System.out.println(\"Instances: \" + instances);\n        } catch (KeeperException.NoNodeException e) {\n            System.out.println(\"No instances registered for service: \" + serviceName);\n        }\n    }\n}", "CodeBleu_score": 54.077279513816535}, {"code": "private static void listInstances(ServiceDiscovery<InstanceDetails> serviceDiscovery) throws Exception{\n\t    // Get all service names\n    Collection<String> serviceNames = serviceDiscovery.queryForNames();\n    System.out.println(\"Services: \" + serviceNames);\n\n    // Get all service instances for each service\n    for (String serviceName : serviceNames) {\n        System.out.println(\"Instances for \" + serviceName);\n        ServiceProvider<InstanceDetails> serviceProvider = serviceDiscovery.serviceProviderBuilder().serviceName(serviceName).providerStrategy(new RandomStrategy<>()).build();\n        List<ServiceInstance<InstanceDetails>> instances = serviceProvider.getInstanceList();\n        if (instances.isEmpty()) {\n            System.out.println(\"No instances\");\n        } else {\n            for (ServiceInstance<InstanceDetails> instance : instances) {\n                System.out.println(instance.getId() + \" \" + instance.getAddress() + \" \" + instance.getPayload());\n            }\n        }\n        serviceProvider.close();\n    }\n}", "CodeBleu_score": 55.997214183821654}]}
{"instance_id": "891a390fa04d", "generation_result": [{"code": "private List<String> filterAndSortChildren(List<String> children){\n\t  List<String> filteredChildren = Lists.newArrayList();\n  for (String child : children) {\n    if (!READY_NODE.equals(child)) {\n      filteredChildren.add(child);\n    }\n  }\n  Collections.sort(filteredChildren);\n  return filteredChildren;\n}", "CodeBleu_score": 29.674277602457426}, {"code": "private List<String> filterAndSortChildren(List<String> children){\n\t    List<String> filtered = Lists.newArrayList();\n    for (String child : children) {\n        if (!READY_NODE.equals(child)) {\n            filtered.add(child);\n        }\n    }\n    Collections.sort(filtered);\n    return filtered;\n}", "CodeBleu_score": 31.258243032905202}, {"code": "private List<String> filterAndSortChildren(List<String> children){\n\t    List<String> filtered = Lists.newArrayList();\n    for (String child : children) {\n        if (!READY_NODE.equals(child)) {\n            filtered.add(child);\n        }\n    }\n    Collections.sort(filtered);\n    return filtered;\n}", "CodeBleu_score": 31.258243032905202}]}
{"instance_id": "f25af95a13b6", "generation_result": [{"code": "protected void connectToZK(String newHost) throws InterruptedException, IOException{\n\t    if (zk != null) {\n        zk.close();\n    }\n\n    zk = new ZooKeeper(newHost, 10000, this);\n}", "CodeBleu_score": 21.086217252792927}, {"code": "protected void connectToZK(String newHost) throws InterruptedException, IOException{\n\t    if (zk != null) {\n        zk.close();\n    }\n    zk = new ZooKeeper(newHost, sessionTimeout, watcher);\n    connected = true;\n    LOG.info(\"Connected to \" + newHost);\n}", "CodeBleu_score": 27.99869834119232}, {"code": "protected void connectToZK(String newHost) throws InterruptedException, IOException{\n\t    // Close the current ZooKeeper instance if it exists\n    if (zk != null) {\n        zk.close();\n    }\n\n    // Create the new ZooKeeper instance\n    zk = new ZooKeeper(newHost, sessionTimeout, watcher);\n}", "CodeBleu_score": 21.634560638798742}]}
{"instance_id": "269eaac5cec6", "generation_result": [{"code": "private List<ACL> parseACLs(String aclString) throws IOException{\n\t    List<ACL> aclList = new ArrayList<ACL>();\n    if (aclString == null) {\n        return aclList;\n    }\n    String[] aclStrings = aclString.split(\",\");\n    for (String acl : aclStrings) {\n        String[] parts = acl.split(\":\");\n        if (parts.length != 3) {\n            logger.error(\"Invalid ACL string: \" + acl);\n            continue;\n        }\n        Id id = new Id(parts[0], parts[1]);\n        int perms = parsePerms(parts[2]);\n        ACL aclObj = new ACL(perms, id);\n        aclList.add(aclObj);\n    }\n    return aclList;\n}", "CodeBleu_score": 32.19652131727095}, {"code": "private List<ACL> parseACLs(String aclString) throws IOException{\n\t    List<ACL> aclList = new ArrayList<ACL>();\n    if (aclString == null) {\n        aclString = \"\";\n    }\n    String[] aclStrings = aclString.split(\",\");\n    for (String acl : aclStrings) {\n        String[] parts = acl.split(\":\");\n        if (parts.length != 3) {\n            System.err.println(\"Invalid ACL entry: \" + acl);\n            continue;\n        }\n        Id id = new Id(parts[0], parts[1]);\n        int perms = 0;\n        for (int i = 2; i < parts.length; i++) {\n            if (parts[i].equals(\"r\")) {\n                perms |= ZooDefs.Perms.READ;\n            } else if (parts[i].equals(\"w\")) {\n                perms |= ZooDefs.Perms.WRITE;\n            } else if (parts[i].equals(\"c\")) {\n                perms |= ZooDefs.Perms.CREATE;\n            } else if (parts[i].equals(\"d\")) {\n                perms |= ZooDefs.Perms.DELETE;\n            } else if (parts[i].equals(\"a\")) {\n                perms |= ZooDefs.Perms.ADMIN;\n            } else {\n                System.err.println(\"Invalid ACL entry: \" + acl);\n                continue;\n            }\n        }\n        aclList.add(new ACL(perms, id));\n    }\n    return aclList;\n}", "CodeBleu_score": 26.49433943351709}, {"code": "private List<ACL> parseACLs(String aclString) throws IOException{\n\t    List<ACL> aclList = new ArrayList<ACL>();\n    if (aclString == null) {\n        return aclList;\n    }\n    String[] aclStrings = aclString.split(\",\");\n    for (String acl : aclStrings) {\n        try {\n            String[] parts = acl.split(\":\");\n            if (parts.length != 3) {\n                throw new IOException(\"Invalid ACL format: \" + acl);\n            }\n            Id id = new Id(parts[0], parts[1]);\n            int perms = parsePermString(parts[2]);\n            aclList.add(new ACL(perms, id));\n        } catch (IllegalArgumentException e) {\n            throw new IOException(\"Invalid ACL format: \" + acl, e);\n        }\n    }\n    return aclList;\n}", "CodeBleu_score": 31.380958995725756}]}
{"instance_id": "c25db637a176", "generation_result": [{"code": "public void delete(String serverId, List<String> pathList) throws Exception{\n\t    if (pathList == null || pathList.size() == 0) {\n        log.warn(\"The path list is null or empty\");\n        return;\n    }\n    Zookeeper zookeeper = ZookeeperFactory.getZookeeper(serverId);\n    if (zookeeper == null) {\n        log.warn(\"Zookeeper server {} is not connected\", serverId);\n        return;\n    }\n    if (zookeeper.getState() != Zookeeper.State.CONNECTED) {\n        log.warn(\"Zookeeper server {} is not connected\", serverId);\n        return;\n    }\n    log.info(\"Zookeeper server {} is connected\", serverId);\n    StringWriter stringWriter = new StringWriter();\n    stringWriter.append(\"Delete paths: \").append(pathList).append(\"", "CodeBleu_score": 36.69031595297437}, {"code": "public void delete(String serverId, List<String> pathList) throws Exception{\n\t    ServerConfiguration serverConfiguration = getServerConfiguration(serverId);\n    Zookeeper zookeeper = ZookeeperFactory.getInstance().getZookeeper(serverConfiguration);\n    if (zookeeper == null) {\n        log.error(\"can not get zookeeper instance, serverId:{}\", serverId);\n        return;\n    }\n    if (pathList == null || pathList.size() == 0) {\n        log.error(\"path list is empty, serverId:{}\", serverId);\n        return;\n    }\n    if (pathList.size() < 20) {\n        for (String path : pathList) {\n            zookeeper.delete(path, -1);\n        }\n    } else {\n        for (String path : pathList) {\n            zookeeper.deleteAsync(path, -1);\n        }\n    }\n}", "CodeBleu_score": 49.10930360119764}, {"code": "public void delete(String serverId, List<String> pathList) throws Exception{\n\t\n    if (pathList == null) {\n        throw new IllegalArgumentException(\"Path list is null\");\n    }\n\n    Zookeeper zookeeper = ZookeeperFactory.getZookeeper(serverId);\n    if (zookeeper == null) {\n        throw new IllegalArgumentException(\"Zookeeper is null\");\n    }\n\n    if (pathList.size() < 20) {\n        for (String path : pathList) {\n            delete(zookeeper, path);\n        }\n    } else {\n        for (String path : pathList) {\n            deleteAsync(zookeeper, path);\n        }\n    }\n}", "CodeBleu_score": 54.34454223659982}]}
{"instance_id": "3ecb1ce78f90", "generation_result": [{"code": "public Terminal createTerminal(String id, String url, StringWriter writer) throws Exception{\n\t    // write connecting message\n    writer.write(\"Connecting to Zookeeper...\");\n    // create connection\n    ZookeeperParams params = ZookeeperParams.builder()\n            .id(id)\n            .url(url)\n            .build();\n    Zookeeper zookeeper = CuratorZookeeperConnectionFactory.getInstance().createZookeeper(params);\n    // write success message\n    writer.write(\"Connected to Zookeeper.\");\n    // create ZooKeeperMain\n    ZooKeeperMain main = new ZooKeeperMain(zookeeper);\n    // return new Terminal instance\n    return new Terminal(id, url, zookeeper, main);\n}", "CodeBleu_score": 44.717381343805556}, {"code": "public Terminal createTerminal(String id, String url, StringWriter writer) throws Exception{\n\t    writer.write(\"Connecting to \" + url + \"...\");\n    ZookeeperParams zookeeperParams = ZookeeperParams.builder()\n            .url(url)\n            .build();\n    CuratorZookeeperConnectionFactory connectionFactory = new CuratorZookeeperConnectionFactory(zookeeperParams);\n    Zookeeper zookeeper = connectionFactory.connect();\n    writer.write(\"Connected to \" + url + \"!\");\n    ZooKeeperMain zooKeeperMain = new ZooKeeperMain(zookeeper);\n    return new Terminal(id, url, zookeeper, zooKeeperMain);\n}", "CodeBleu_score": 45.53472753958311}, {"code": "public Terminal createTerminal(String id, String url, StringWriter writer) throws Exception{\n\t    writer.write(\"Connecting to \" + url + \"...\");\n    CuratorZookeeperConnectionFactory factory = new CuratorZookeeperConnectionFactory(url);\n    Zookeeper zookeeper = factory.getZookeeper();\n    writer.write(\"Connected to \" + url + \".\");\n    ZooKeeperMain main = new ZooKeeperMain(zookeeper);\n    return new Terminal(id, url, zookeeper, main);\n}", "CodeBleu_score": 35.66391372502441}]}
{"instance_id": "a3606e777eb5", "generation_result": [{"code": "public void blockUntilConnected(){\n\t    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockUntilConnected\n    // TODO: Implement blockU", "CodeBleu_score": 0.9533746325938501}, {"code": "public void blockUntilConnected(){\n\t    int retries = 6;\n    while (retries > 0) {\n        try {\n            connect();\n            return;\n        } catch (IOException e) {\n            log.error(\"Failed to connect to SSH tunnel\", e);\n            retries--;\n            if (retries == 0) {\n                throw new IllegalStateException(\"Failed to connect to SSH tunnel\", e);\n            }\n        }\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new IllegalStateException(\"Interrupted while waiting for SSH tunnel to connect\", e);\n        }\n    }\n}", "CodeBleu_score": 44.0517754657489}, {"code": "public void blockUntilConnected(){\n\t    int retryCount = 0;\n    while (!isConnected()) {\n        try {\n            log.info(\"Attempting to connect to SSH tunnel.\");\n            connect();\n            log.info(\"SSH tunnel connected.\");\n            break;\n        } catch (IOException e) {\n            log.error(\"SSH tunnel connection failed.\", e);\n            if (retryCount < 6) {\n                log.info(\"Retrying connection.\");\n                retryCount++;\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e1) {\n                    log.error(\"Interrupted while sleeping.\", e1);\n                }\n            } else {\n                log.error(\"SSH tunnel connection failed after six attempts.\");\n                throw new IllegalStateException(\"SSH tunnel connection failed after six attempts.\");\n            }\n        }\n    }\n}", "CodeBleu_score": 35.09440771143374}]}
{"instance_id": "a4e5b886b72b", "generation_result": [{"code": "public void deleteNode(String serverId, List<String> pathList){\n\t    try {\n        ZookeeperDomainService zookeeperDomainService = ActiveServerContext.getZookeeperDomainService(serverId);\n        zookeeperDomainService.deleteNode(pathList);\n    } catch (Exception e) {\n        LOGGER.error(\"deleteNode error\", e);\n        VToast.error(ResourceBundleUtils.getMessage(\"toast.deleteNode.error\"));\n        throw new IllegalStateException(e);\n    }\n}", "CodeBleu_score": 49.40036091400783}, {"code": "public void deleteNode(String serverId, List<String> pathList){\n\t    try {\n        ZookeeperDomainService zookeeperDomainService = ActiveServerContext.getZookeeperDomainService(serverId);\n        zookeeperDomainService.deleteNode(pathList);\n    } catch (Exception e) {\n        LOGGER.error(\"deleteNode error\", e);\n        VToast.error(e.getMessage());\n        throw new IllegalStateException(e.getMessage());\n    }\n}", "CodeBleu_score": 44.4715959423822}, {"code": "public void deleteNode(String serverId, List<String> pathList){\n\t    CompletableFuture.runAsync(() -> {\n        try {\n            ZookeeperDomainService zookeeperDomainService = ActiveServerContext.getActiveServer(serverId).getZookeeperDomainService();\n            for (String path : pathList) {\n                zookeeperDomainService.deleteNode(path);\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"deleteNode failed\", e);\n            Platform.runLater(() -> VToast.error(ResourceBundleUtils.getMessage(\"error.deleteNode\")));\n            throw new IllegalStateException(e);\n        }\n    });\n}", "CodeBleu_score": 47.94629706194154}]}
{"instance_id": "4fdbc9ec2e75", "generation_result": [{"code": "public void disconnect(String id){\n\t    CompletableFuture.runAsync(() -> {\n        ServerConfiguration serverConfiguration = ConfigurationDomainService.getServerConfiguration(id);\n        if (serverConfiguration != null) {\n            Configuration configuration = serverConfiguration.getConfiguration();\n            if (configuration != null) {\n                ZookeeperDomainService.disconnect(configuration);\n            }\n        }\n        Platform.runLater(() -> {\n            TreeItemCache.removeServer(id);\n            if (PrimaryStageContext.getPrimaryStage() != null) {\n                PrimaryStageContext.getPrimaryStage().setTitle(ResourceBundleUtils.getLocaleString(\"app.title\"));\n            }\n        });\n    });\n}", "CodeBleu_score": 48.370076000916015}, {"code": "public void disconnect(String id){\n\t    CompletableFuture.runAsync(() -> {\n        ServerConfiguration serverConfiguration = ConfigurationDomainService.getInstance().getServerConfigurationById(id);\n        if (serverConfiguration == null) {\n            Platform.runLater(() -> VToast.error(\"Server configuration not found!\"));\n            return;\n        }\n        try {\n            ZookeeperDomainService.getInstance().disconnect(serverConfiguration);\n        } catch (Exception e) {\n            Platform.runLater(() -> VToast.error(e.getMessage()));\n            return;\n        }\n        Platform.runLater(() -> {\n            TreeItemCache.getInstance().removeServer(id);\n            VToast.success(ResourceBundleUtils.get(\"server.disconnect.success\", serverConfiguration.getHost()));\n        });\n    });\n}", "CodeBleu_score": 49.634148248657276}, {"code": "public void disconnect(String id){\n\t    CompletableFuture.runAsync(() -> {\n        ServerConfiguration serverConfiguration = ActiveServerContext.get().getServerConfigurationById(id);\n        if (serverConfiguration == null) {\n            return;\n        }\n        try {\n            ActiveServerContext.get().disconnect(serverConfiguration);\n            TreeItemCache.removeServer(serverConfiguration);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    });\n}", "CodeBleu_score": 50.940190778357284}]}
{"instance_id": "6bf0d7ac9390", "generation_result": [{"code": "public void startTerminal(String serverId, StringWriter stream){\n\t    CompletableFuture.runAsync(() -> {\n        ServerConfiguration serverConfiguration = ActiveServerContext.get().getServerConfiguration(serverId);\n        Configuration configuration = ActiveServerContext.get().getConfiguration(serverId);\n        ConnectionConfiguration connectionConfiguration = ActiveServerContext.get().getConnectionConfiguration(serverId);\n        String connectionUrl = getConnectionUrl(serverConfiguration, connectionConfiguration);\n        if (Strings.isNullOrEmpty(connectionUrl)) {\n            VToast.error(ResourceBundleUtils.get(\"server.connection.url.empty\"));\n            return;\n        }\n        if (Strings.isNullOrEmpty(configuration.getUsername())) {\n            VToast.error(ResourceBundleUtils.get(\"server.username.empty\"));\n            return;\n        }\n        if (Strings.isNullOrEmpty(configuration.getPassword())) {\n            VToast.error(ResourceBundleUtils.get(\"server.password.empty\"));\n            return;\n        }\n        if (Strings.isNullOrEmpty(configuration.getJmxPort())) {\n            VToast.error(ResourceBundleUtils.get(\"server.jmx.port.empty\"));\n            return;\n        }\n        if (Strings.isNullOrEmpty(configuration.getJmxUsername())) {\n            VToast.error(ResourceBundleUtils.get(\"server.jmx.username.empty\"));\n            return;\n        }\n        if (Strings.isNullOrEmpty(configuration.getJmxPassword())) {\n            VToast.error(ResourceBundleUtils.get(\"server.jmx.password.empty\"));\n            return;\n        }\n        if (Strings.isNullOrEmpty(configuration.getJmxHost())) {\n            VToast.error(ResourceBundleUtils.get(\"server.jmx.host.empty\"));\n            return;\n        }\n        ZookeeperDomainService.get().startTerminal(serverId, connectionUrl, stream);\n    });\n}", "CodeBleu_score": 34.11381260641204}, {"code": "public void startTerminal(String serverId, StringWriter stream){\n\t    ServerConfigurationVO serverConfigurationVO = ActiveServerContext.getServerConfiguration(serverId);\n    ConnectionConfigurationVO connectionConfigurationVO = ActiveServerContext.getConnectionConfiguration(serverId);\n    Configuration configuration = ConfigurationDomainService.getConfiguration();\n    ServerConfiguration serverConfiguration = configuration.getServerConfiguration(serverId);\n    ConnectionConfiguration connectionConfiguration = configuration.getConnectionConfiguration(serverId);\n    String connectionUrl = serverConfiguration.getConnectionUrl();\n\n    if (connectionConfiguration.isSshTunnelEnabled()) {\n        connectionUrl = SSHTunnelConfiguration.getSSHTunnelUrl(connectionUrl, connectionConfiguration.getSshTunnelConfiguration());\n    }\n\n    ZookeeperDomainService.startTerminal(serverId, connectionUrl, stream);\n}", "CodeBleu_score": 35.75188773833572}, {"code": "public void startTerminal(String serverId, StringWriter stream){\n\t    ServerConfiguration serverConfiguration = ActiveServerContext.get().getServerConfiguration(serverId);\n    ConnectionConfiguration connectionConfiguration = ActiveServerContext.get().getConnectionConfiguration(serverId);\n\n    if (connectionConfiguration.isSshTunnel()) {\n        startSSHTerminal(serverConfiguration, stream);\n    } else {\n        startDirectTerminal(serverConfiguration, stream);\n    }\n}", "CodeBleu_score": 36.62264630205098}]}
{"instance_id": "635dea120e55", "generation_result": [{"code": "public void executeCommand(String id, String command){\n\t\n    ServerConfiguration server = ConfigurationDomainService.getServerConfiguration(id);\n\n    if (server == null) {\n        VToast.error(ResourceBundleUtils.getMessage(\"toast.server.not.exist\", id));\n        return;\n    }\n\n    if (server.getMode() == NodeMode.SINGLE) {\n        executeSingleCommand(server, command);\n    } else if (server.getMode() == NodeMode.CLUSTER) {\n        executeClusterCommand(server, command);\n    } else {\n        VToast.error(ResourceBundleUtils.getMessage(\"toast.server.mode.not.support\"));\n    }\n}", "CodeBleu_score": 31.18515462584512}, {"code": "public void executeCommand(String id, String command){\n\t    try {\n        final ServerConfiguration serverConfiguration = ActiveServerContext.getServerConfiguration(id);\n        if (serverConfiguration == null) {\n            throw new IllegalArgumentException(\"server configuration not found\");\n        }\n        final ConnectionConfiguration connectionConfiguration = ActiveServerContext.getConnectionConfiguration(id);\n        if (connectionConfiguration == null) {\n            throw new IllegalArgumentException(\"connection configuration not found\");\n        }\n        final ConnectionConfigurationVO connectionConfigurationVO = ConfigurationVOTransfer.toConnectionConfigurationVO(connectionConfiguration);\n        final ServerConfigurationVO serverConfigurationVO = ConfigurationVOTransfer.toServerConfigurationVO(serverConfiguration);\n        final Configuration configuration = ConfigurationDomainService.buildConfiguration(connectionConfigurationVO, serverConfigurationVO);\n        final ZookeeperDomainService zookeeperDomainService = ConfigurationDomainService.buildZookeeperDomainService(configuration);\n        zookeeperDomainService.executeCommand(command);\n    } catch (Exception e) {\n        VToast.error(ResourceBundleUtils.getMessage(\"error.command.execute.failed\", command));\n        LOGGER.error(\"execute command failed\", e);\n    }\n}", "CodeBleu_score": 37.107287846559686}, {"code": "public void executeCommand(String id, String command){\n\t    try {\n        Asserts.notBlank(id, \"id\");\n        Asserts.notBlank(command, \"command\");\n\n        ServerConfiguration serverConfiguration = getServerConfiguration(id);\n        ConnectionConfiguration connectionConfiguration = getConnectionConfiguration(id);\n        Configuration configuration = getConfiguration(id);\n\n        PrettyZooConfigRepository prettyZooConfigRepository = ConfigurationDomainService.getPrettyZooConfigRepository(id);\n        if (prettyZooConfigRepository == null) {\n            prettyZooConfigRepository = new PrettyZooConfigRepository(id, connectionConfiguration, serverConfiguration, configuration);\n            ConfigurationDomainService.addPrettyZooConfigRepository(id, prettyZooConfigRepository);\n        }\n\n        prettyZooConfigRepository.executeCommand(command);\n    } catch (Exception e) {\n        VToast.error(ResourceBundleUtils.getMessage(\"message.executeCommand.failed\", id, command));\n        logger.error(\"execute command failed, id: {}, command: {}\", id, command, e);\n    }\n}", "CodeBleu_score": 42.08643284061782}]}
{"instance_id": "8627d161f5fc", "generation_result": [{"code": "public Properties loadZookeeperSystemProperties(){\n\t    Properties properties = new Properties();\n    try {\n        File file = new File(System.getProperty(\"user.home\"), \"zookeeper.properties\");\n        if (file.exists()) {\n            properties.load(new FileInputStream(file));\n            LOGGER.info(\"load zookeeper system properties from {}\", file.getAbsolutePath());\n        }\n    } catch (Exception e) {\n        LOGGER.error(\"load zookeeper system properties error\", e);\n    }\n    return properties;\n}", "CodeBleu_score": 40.79301418143268}, {"code": "public Properties loadZookeeperSystemProperties(){\n\t    Properties properties = new Properties();\n    try {\n        String path = System.getProperty(\"zookeeper.properties\");\n        if (path == null) {\n            path = \"/usr/local/zookeeper/conf/zookeeper-env.sh\";\n        }\n        File file = new File(path);\n        if (file.exists()) {\n            try (InputStream inputStream = new FileInputStream(file)) {\n                properties.load(inputStream);\n            }\n            LOGGER.info(\"Zookeeper properties loaded from {}\", path);\n        } else {\n            LOGGER.info(\"Zookeeper properties file {} not found\", path);\n        }\n    } catch (Exception e) {\n        LOGGER.error(\"Error loading zookeeper properties\", e);\n    }\n    return properties;\n}", "CodeBleu_score": 41.12656331384401}, {"code": "public Properties loadZookeeperSystemProperties(){\n\t    Properties properties = new Properties();\n    String zookeeperSystemPropertiesFilePath = System.getProperty(\"zookeeper.system.properties.file.path\");\n    if (Strings.isNullOrEmpty(zookeeperSystemPropertiesFilePath)) {\n        logger.warn(\"zookeeper.system.properties.file.path is empty\");\n        return properties;\n    }\n    File file = new File(zookeeperSystemPropertiesFilePath);\n    if (!file.exists()) {\n        logger.warn(\"zookeeper.system.properties.file.path is not exist: {}\", zookeeperSystemPropertiesFilePath);\n        return properties;\n    }\n    try {\n        properties.load(new FileInputStream(file));\n        logger.info(\"zookeeper.system.properties.file.path is loaded: {}\", zookeeperSystemPropertiesFilePath);\n    } catch (IOException e) {\n        logger.error(\"zookeeper.system.properties.file.path is not loaded: {}\", zookeeperSystemPropertiesFilePath, e);\n    }\n    return properties;\n}", "CodeBleu_score": 42.08541104567691}]}
{"instance_id": "dce20e143e04", "generation_result": [{"code": "public void saveZookeeperSystemProperties(String content){\n\t    try (StringReader sr = new StringReader(content)) {\n        Properties properties = new Properties();\n        properties.load(sr);\n        try (FileWriter fw = new FileWriter(SYS_PROP_PATH)) {\n            properties.store(fw, \"\");\n        }\n    } catch (IOException e) {\n        LOGGER.error(\"load zookeeper system properties failed\", e);\n        VToast.error(e.getMessage());\n    }\n}", "CodeBleu_score": 27.328025851016974}, {"code": "public void saveZookeeperSystemProperties(String content){\n\t    Properties props = new Properties();\n    try {\n        props.load(new StringReader(content));\n    } catch (IOException e) {\n        LOGGER.error(\"Failed to load zookeeper system properties from content: {}\", content, e);\n        VToast.error(ResourceBundleUtils.getMessage(\"app.error.failedToLoadZookeeperSystemProperties\"));\n        return;\n    }\n    String path = SYS_PROP_PATH;\n    try {\n        Files.write(Paths.get(path), props.entrySet().stream().map(e -> e.getKey() + \"=\" + e.getValue()).collect(Collectors.joining(\"\n\")).getBytes(Charset.defaultCharset()));\n    } catch (IOException e) {\n        LOGGER.error(\"Failed to save zookeeper system properties to file: {}\", path, e);\n        VToast.error(ResourceBundleUtils.getMessage(\"app.error.failedToSaveZookeeperSystemProperties\"));\n    }\n}", "CodeBleu_score": 43.60282277279005}, {"code": "public void saveZookeeperSystemProperties(String content){\n\t    Properties properties = new Properties();\n    try (StringReader reader = new StringReader(content)) {\n        properties.load(reader);\n    } catch (IOException e) {\n        e.printStackTrace();\n        VToast.error(ResourceBundleUtils.getLocaleString(\"message.load.zookeeper.system.properties.failed\"));\n        return;\n    }\n    String path = System.getProperty(\"user.home\") + File.separator + \"zookeeper.properties\";\n    try (FileOutputStream output = new FileOutputStream(path)) {\n        properties.store(output, \"zookeeper system properties\");\n    } catch (IOException e) {\n        e.printStackTrace();\n        VToast.error(ResourceBundleUtils.getLocaleString(\"message.save.zookeeper.system.properties.failed\"));\n    }\n}", "CodeBleu_score": 53.78675461901794}]}
{"instance_id": "d89f8e6bfb31", "generation_result": [{"code": "private String response(Socket client){\n\t    try {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(client.getInputStream()));\n        StringBuilder builder = new StringBuilder();\n        String line;\n        while ((line = reader.readLine()) != null) {\n            builder.append(line);\n            builder.append(\"\n\");\n        }\n        reader.close();\n        client.close();\n        return builder.toString();\n    } catch (IOException e) {\n        System.err.println(\"Error reading input stream from client: \" + e.getMessage());\n        throw new IllegalStateException(\"Error reading input stream from client\");\n    }\n}", "CodeBleu_score": 51.48413127132863}, {"code": "private String response(Socket client){\n\t    try {\n        BufferedReader in = new BufferedReader(new InputStreamReader(client.getInputStream()));\n        StringBuilder sb = new StringBuilder();\n        String line;\n        while ((line = in.readLine()) != null) {\n            sb.append(line);\n        }\n        in.close();\n        client.close();\n        return sb.toString();\n    } catch (IOException e) {\n        throw new IllegalStateException(\"Response function failed: \" + e.getMessage());\n    }\n}", "CodeBleu_score": 51.63393567520418}, {"code": "private String response(Socket client){\n\t    StringBuilder response = new StringBuilder();\n    try {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(client.getInputStream()));\n        String line;\n        while ((line = reader.readLine()) != null) {\n            response.append(line);\n        }\n    } catch (IOException e) {\n        throw new IllegalStateException(\"Error reading data from client.\");\n    } finally {\n        try {\n            client.close();\n        } catch (IOException e) {\n            throw new IllegalStateException(\"Error closing client socket.\");\n        }\n    }\n    return response.toString();\n}", "CodeBleu_score": 50.05109521195431}]}
{"instance_id": "b0a277c5e3c0", "generation_result": [{"code": "public ZookeeperConnection<CuratorFramework> create(ZookeeperParams params){\n\t    logger.info(\"create zookeeper connection with params: {}\", params);\n    CuratorFramework client = createCuratorFramework(params);\n    client.start();\n    try {\n        client.blockUntilConnected(5, TimeUnit.SECONDS);\n    } catch (InterruptedException e) {\n        client.close();\n        throw new RuntimeException(\"interrupted when connecting to zookeeper\", e);\n    }\n    return new CuratorZookeeperConnection(params, client);\n}", "CodeBleu_score": 66.95705899869576}, {"code": "public ZookeeperConnection<CuratorFramework> create(ZookeeperParams params){\n\t\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(params.getBaseSleepTimeMs(), params.getMaxRetries(), params.getMaxSleepMs());\n    CuratorFramework client = CuratorFrameworkFactory.builder()\n            .connectString(params.getConnectString())\n            .retryPolicy(retryPolicy)\n            .sessionTimeoutMs(params.getSessionTimeoutMs())\n            .connectionTimeoutMs(params.getConnectionTimeoutMs())\n            .namespace(params.getNamespace())\n            .authorization(params.getAuthScheme(), params.getAuthValue())\n            .aclProvider(new ACLProvider() {\n                @Override\n                public List<ACL> getDefaultAcl() {\n                    return ZooDefs.Ids.CREATOR_ALL_ACL;\n                }\n\n                @Override\n                public List<ACL> getAclForPath(String path) {\n                    return ZooDefs.Ids.CREATOR_ALL_ACL;\n                }\n            })\n            .build();\n    client.start();\n    client.getConnectionStateListenable().addListener(new ConnectionStateListener() {\n        @Override\n        public void stateChanged(CuratorFramework client, ConnectionState newState) {\n            if (newState == ConnectionState.LOST) {\n                logger.warn(\"Connection to Zookeeper lost\");\n            } else if (newState == ConnectionState.RECONNECTED) {\n                logger.info(\"Connection to Zookeeper re-established\");\n            } else if (newState == ConnectionState.SUSPENDED) {\n                logger.warn(\"Connection to Zookeeper suspended\");\n            }\n        }\n    });\n    try {\n        client.blockUntilConnected(5, TimeUnit.SECONDS);\n    } catch (InterruptedException e) {\n        logger.error(\"Error while waiting for connection to Zookeeper\", e);\n        client.close();\n        throw new RuntimeException(e);\n    }\n    return new CuratorZookeeperConnection(client, params);\n}", "CodeBleu_score": 41.124424820490994}, {"code": "public ZookeeperConnection<CuratorFramework> create(ZookeeperParams params){\n\t    Logger logger = LoggerFactory.getLogger(CuratorZookeeperConnectionFactory.class);\n    CuratorFramework curatorFramework = null;\n    try {\n        curatorFramework = createCuratorFramework(params);\n        curatorFramework.start();\n        curatorFramework.blockUntilConnected(5, TimeUnit.SECONDS);\n    } catch (Exception e) {\n        logger.error(\"Failed to connect to Zookeeper\", e);\n        if (curatorFramework != null) {\n            curatorFramework.close();\n        }\n        throw new RuntimeException(e);\n    }\n    return new CuratorZookeeperConnection(curatorFramework, params);\n}", "CodeBleu_score": 45.13372620656657}]}
{"instance_id": "b144bcd67462", "generation_result": [{"code": "public void sync(List<ZookeeperNodeListener> listeners){\n\t    final Logger logger = LoggerFactory.getLogger(ZookeeperConnection.class);\n    final AtomicBoolean isSyncing = new AtomicBoolean(false);\n\n    logger.info(\"syncing zookeeper nodes\");\n    isSyncing.set(true);\n\n    try {\n        final TreeCache treeCache = new TreeCache(curator, \"/\");\n        treeCache.getListenable().addListener(new CuratorTreeCacheListener(listeners));\n        treeCache.start();\n    } catch (Exception e) {\n        logger.error(\"error syncing zookeeper nodes\", e);\n        isSyncing.set(false);\n    }\n}", "CodeBleu_score": 44.31982537769645}, {"code": "public void sync(List<ZookeeperNodeListener> listeners){\n\t    if (isSyncInProgress()) {\n        log.info(\"Synchronization already in progress\");\n        return;\n    }\n\n    log.info(\"Starting synchronization\");\n\n    try {\n        addTreeCacheListener(listeners);\n        startTreeCache();\n    } catch (Exception e) {\n        log.error(\"Error starting TreeCache\", e);\n        closeTreeCache();\n    }\n}", "CodeBleu_score": 27.48311535446971}, {"code": "public void sync(List<ZookeeperNodeListener> listeners){\n\t    // TODO: 2021/12/13\n    // 1. \u83b7\u53d6\u5f53\u524d\u7684\u8fde\u63a5\u4fe1\u606f\n    // 2. \u5224\u65ad\u662f\u5426\u6b63\u5728\u540c\u6b65\n    // 3. \u5982\u679c\u6b63\u5728\u540c\u6b65\uff0c\u5219\u4e0d\u8fdb\u884c\u540c\u6b65\n    // 4. \u5982\u679c\u4e0d\u6b63\u5728\u540c\u6b65\uff0c\u5219\u8bb0\u5f55\u540c\u6b65\u5f00\u59cb\uff0c\u6dfb\u52a0\u76d1\u542c\u5668\uff0c\u5f00\u59cb\u540c\u6b65\n    // 5. \u5982\u679c\u53d1\u751f\u9519\u8bef\uff0c\u8bb0\u5f55\u9519\u8bef\uff0c\u5173\u95ed\u76d1\u542c\u5668\uff0c\u8bb0\u5f55\u540c\u6b65\u7ed3\u675f\n    // 6. \u5982\u679c\u53d1\u751f\u9519\u8bef\uff0c\u8bb0\u5f55\u9519\u8bef\uff0c\u5173\u95ed\u76d1\u542c\u5668\uff0c\u8bb0\u5f55\u540c\u6b65\u7ed3\u675f\n}", "CodeBleu_score": 6.406152466160046}]}
{"instance_id": "6452f272f2d7", "generation_result": [{"code": "public void watchPathChildrenNode(String path, PathChildrenCacheListener listener) throws Exception{\n\t    CuratorFramework client = CuratorFrameworkFactory.newClient(Constant.ZK_SERVER, new ExponentialBackoffRetry(1000, 3));\n    client.start();\n    PathChildrenCache cache = new PathChildrenCache(client, path, true);\n    cache.getListenable().addListener(listener);\n    cache.start(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE);\n}", "CodeBleu_score": 67.9632534596137}, {"code": "public void watchPathChildrenNode(String path, PathChildrenCacheListener listener) throws Exception{\n\t    CuratorFramework client = CuratorFrameworkFactory.builder()\n            .connectString(Constant.CONNECT_STRING)\n            .retryPolicy(new ExponentialBackoffRetry(1000, 3))\n            .build();\n    client.start();\n\n    PathChildrenCache cache = new PathChildrenCache(client, path, true);\n    cache.getListenable().addListener(listener);\n    cache.start(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE);\n}", "CodeBleu_score": 67.23244836627873}, {"code": "public void watchPathChildrenNode(String path, PathChildrenCacheListener listener) throws Exception{\n\t    CuratorFramework client = CuratorFrameworkFactory.newClient(Constant.ZK_CONNECTION_STRING,\n            new ExponentialBackoffRetry(Constant.CONNECTION_BACKOFF_BASE, Constant.CONNECTION_MAX_RETRIES));\n    client.getConnectionStateListenable().addListener(new ConnectionStateListener() {\n        @Override\n        public void stateChanged(CuratorFramework client, ConnectionState newState) {\n            System.out.println(newState);\n        }\n    });\n    client.start();\n    PathChildrenCache childrenCache = new PathChildrenCache(client, path, true);\n    childrenCache.start(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE);\n    childrenCache.getListenable().addListener(listener);\n}", "CodeBleu_score": 62.96357615479351}]}
{"instance_id": "17f786e147c3", "generation_result": [{"code": "public void unregisterService(){\n\t    logger.info(\"unregisterService start\");\n    for (String path : paths) {\n        try {\n            curatorClient.delete().forPath(path);\n        } catch (Exception e) {\n            logger.error(\"delete path error: \" + path, e);\n        }\n    }\n    curatorClient.close();\n    logger.info(\"unregisterService end\");\n}", "CodeBleu_score": 53.79198138703081}, {"code": "public void unregisterService(){\n\t    logger.info(\"unregisterService start\");\n    List<String> paths = new ArrayList<String>();\n    for (Map.Entry<String, RpcServiceInfo> entry : ServiceUtil.getServiceMap().entrySet()) {\n        String path = entry.getValue().getPath();\n        if (path != null) {\n            paths.add(path);\n        }\n    }\n    for (String path : paths) {\n        try {\n            client.delete().guaranteed().forPath(path);\n        } catch (Exception e) {\n            logger.error(\"delete path error\", e);\n        }\n    }\n    client.close();\n    logger.info(\"unregisterService end\");\n}", "CodeBleu_score": 31.02849631581322}, {"code": "public void unregisterService(){\n\t\n    if (curatorClient == null) {\n        return;\n    }\n\n    try {\n        List<String> paths = new ArrayList<String>();\n        for (Map.Entry<String, RpcServiceInfo> entry : serviceMap.entrySet()) {\n            paths.add(entry.getKey());\n        }\n        for (String path : paths) {\n            try {\n                curatorClient.delete().forPath(path);\n                logger.info(\"delete service path: {}\", path);\n            } catch (Exception e) {\n                logger.error(\"delete service path: {} error: {}\", path, e);\n            }\n        }\n    } finally {\n        if (curatorClient != null) {\n            curatorClient.close();\n        }\n    }\n}", "CodeBleu_score": 27.777861867870644}]}
{"instance_id": "32fec6cfa353", "generation_result": [{"code": "public void addListener(IZkStateListener listener){\n\t    CompletableFuture<Void> future = new CompletableFuture<>();\n    makeClientReady().whenComplete((v, e) -> {\n        if (e == null) {\n            zkClient.subscribeStateChanges(listener);\n            future.complete(null);\n        } else {\n            future.completeExceptionally(e);\n        }\n    });\n    try {\n        future.get(10, TimeUnit.SECONDS);\n    } catch (Exception e) {\n        logger.error(\"Error adding listener\", e);\n    }\n}", "CodeBleu_score": 34.718241488710696}, {"code": "public void addListener(IZkStateListener listener){\n\t    CompletableFuture<Void> future = new CompletableFuture<>();\n    makeClientReady(future);\n    future.whenComplete((v, t) -> {\n        if (t == null) {\n            client.subscribeStateChanges(listener);\n        } else {\n            LOG.error(\"Failed to subscribe state changes\", t);\n        }\n    });\n}", "CodeBleu_score": 44.58832091013139}, {"code": "public void addListener(IZkStateListener listener){\n\t    CompletableFuture<Void> future = makeClientReady();\n    future.thenAccept(v -> {\n        try {\n            client.subscribeStateChanges(listener);\n        } catch (Exception e) {\n            log.error(\"Error while subscribing state changes\", e);\n        }\n    });\n}", "CodeBleu_score": 35.910925180338275}]}
{"instance_id": "619d57562a76", "generation_result": [{"code": "public CuratorZookeeperClient(String serverAddr, String authority){\n\t    this(serverAddr, authority, 5000, 3000, 1);\n}", "CodeBleu_score": 3.410257369619058}, {"code": "public CuratorZookeeperClient(String serverAddr, String authority){\n\t    this(serverAddr, authority, new RetryNTimes(1, 1000));\n}", "CodeBleu_score": 3.691058682390448}, {"code": "public CuratorZookeeperClient(String serverAddr, String authority){\n\t    this(serverAddr, authority, null);\n}", "CodeBleu_score": 3.410257367327043}]}
{"instance_id": "9e7fb18946e4", "generation_result": [{"code": "public void removeChildListener(String path, ChildListener listener){\n\t    try {\n        ConcurrentMap<ChildListener, TargetChildListener> listeners = zk.getChildListenerContainer().get(path);\n        if (listeners != null) {\n            TargetChildListener targetChildListener = listeners.remove(listener);\n            if (targetChildListener != null) {\n                zk.removeTargetChildListener(path, targetChildListener);\n            }\n        }\n    } catch (Exception e) {\n        LOGGER.error(\"\", e);\n    }\n}", "CodeBleu_score": 64.63027715189588}, {"code": "public void removeChildListener(String path, ChildListener listener){\n\t    ConcurrentMap<ChildListener, ChildListener> listeners = childListener.get(path);\n    if (listeners != null) {\n        ChildListener targetListener = listeners.get(listener);\n        if (targetListener != null) {\n            listeners.remove(listener);\n            childListener.remove(path, targetListener);\n        }\n    }\n}", "CodeBleu_score": 68.27766463539587}, {"code": "public void removeChildListener(String path, ChildListener listener){\n\t    try {\n        ConcurrentMap<ChildListener, ChildListener> listeners = zkClient.getChildListeners().get(path);\n        if (listeners != null) {\n            listeners.remove(listener);\n            if (listeners.isEmpty()) {\n                zkClient.getChildListeners().remove(path);\n                zkClient.removeTargetChildListener(path);\n            }\n        }\n    } catch (Throwable e) {\n        logger.error(\"\", e);\n    }\n}", "CodeBleu_score": 52.03294111293396}]}
{"instance_id": "2c3fae642654", "generation_result": [{"code": "static int watcher_reconnect_to_zookeeper(zhandle_t *zh){\n\t    int rc;\n    char *idc_host_info = NULL;\n    char *idc_host_info_del = NULL;\n    char *idc_host_info_del_tmp = NULL;\n    char *idc_host_info_tmp = NULL;\n    char *host_info = NULL;\n    char *host_info_del = NULL;\n    char *host_info_del_tmp = NULL;\n    char *host_info_tmp = NULL;\n    char *idc = NULL;\n    char *host = NULL;\n    char *host_tmp = NULL;\n    char *host_del = NULL;\n    char *host_del_tmp = NULL;\n    char *host_del_tmp_tmp = NULL;\n    char *host_del_tmp_tmp_tmp = NULL;\n    char *host_del_tmp_tmp_tmp_tmp = NULL;\n    char *host_del_tmp_tmp_tmp_tmp_tmp = NULL;\n    char *host_del_tmp_tmp_tmp_tmp_tmp_tmp = NULL;\n    char *host_del_tmp_tmp_tmp_tmp_tmp_tmp_tmp = NULL;\n    char *host_del_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp = NULL;\n    char *host_del_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp = NULL;\n    char *host_del_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp = NULL;\n    char *host_del_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp = NULL;\n    char *host_del_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp = NULL;\n    char *host_del_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp = NULL;\n    char *host_del_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp = NULL;\n    char *host_del_tmp_tmp_", "CodeBleu_score": 9.110879096417332}, {"code": "static int watcher_reconnect_to_zookeeper(zhandle_t *zh){\n\t\n    int ret = 0;\n\n    char *idc_host = NULL;\n\n    char *host = NULL;\n\n    char *idc = NULL;\n\n    char *zk_hosts = NULL;\n\n    char *zk_idc = NULL;\n\n    int zk_hosts_len = 0;\n\n    int zk_idc_len = 0;\n\n    int idc_host_len = 0;\n\n    int host_len = 0;\n\n    int idc_len = 0;\n\n    int ret_code = 0;\n\n    if (NULL == zh) {\n\n        qerror_log(\"zh is null\");\n\n        ret = -1;\n\n        goto out;\n\n    }\n\n    idc_host = (char *)get_idc_host_from_handle(zh);\n\n    if (NULL == idc_host) {\n\n        qerror_log(\"get_idc_host_from_handle failed\");\n\n        ret = -1;\n\n        goto out;\n\n    }\n\n    idc_host_len = strlen(idc_host);\n\n    ret_code = get_idc_and_host_from_idc_host(idc_host, idc_host_len, &idc, &idc_len, &host, &host_len);\n\n    if (0 != ret_code) {\n\n        qerror_log(\"get_idc_and_host_from_idc_host failed, ret_code=%d\", ret_code);\n\n        ret = -1;\n\n        goto out;\n\n    }\n\n    zk_idc = (char *)get_idc_from_handle(zh);\n\n    if (NULL == zk_idc) {\n\n        qerror_log(\"get_idc_from_handle failed\");\n\n        ret = -1;\n\n        goto out;\n\n    }\n\n    zk_idc_len = strlen(zk_idc);\n\n    if (0 != strcmp(idc, zk_idc)) {\n\n        qerror", "CodeBleu_score": 43.147954166169086}, {"code": "static int watcher_reconnect_to_zookeeper(zhandle_t *zh){\n\t\n    if (zh == NULL) {\n\n        return -1;\n\n    }\n\n    if (qconf_get_idc_host(zh, NULL) != 0) {\n\n        return -1;\n\n    }\n\n    if (qconf_get_idc_host(zh, NULL) != 0) {\n\n        return -1;\n\n    }\n\n    qconf_close_zookeeper(zh);\n\n    if (qconf_init_zookeeper(zh) != 0) {\n\n        return -1;\n\n    }\n\n    if (qconf_init_env(zh) != 0) {\n\n        return -1;\n\n    }\n\n    if (qconf_init_table_watcher(zh) != 0) {\n\n        return -1;\n\n    }\n\n    return 0;\n\n}", "CodeBleu_score": 12.681399516614366}]}
{"instance_id": "0b5ab34e1dd9", "generation_result": [{"code": "static void init_env_for_zk(zhandle_t *zh, const string &idc_host, const string &idc){\n\t    string idc_path = QCONF_ZK_IDC_PATH;\n    string host_path = QCONF_ZK_HOST_PATH;\n    string notify_path = QCONF_ZK_NOTIFY_PATH;\n    string gray_path = QCONF_ZK_GRAY_PATH;\n    string gray_idc_path = QCONF_ZK_GRAY_IDC_PATH;\n    string gray_host_path = QCONF_ZK_GRAY_HOST_PATH;\n    string gray_notify_path = QCONF_ZK_GRAY_NOTIFY_PATH;\n    string gray_host_idc_path = QCONF_ZK_GRAY_HOST_IDC_PATH;\n    string gray_host_idc_notify_path = QCONF_ZK_GRAY_HOST_IDC_NOTIFY_PATH;\n\n    string gray_host_idc_notify_path_new = gray_host_idc_notify_path;\n    gray_host_idc_notify_path_new.append(\"_new\");\n\n    string gray_host_idc_notify_path_old = gray_host_idc_notify_path;\n    gray_host_idc_notify_path_old.append(\"_old\");\n\n    string gray_host_idc_notify_path_tmp = gray_host_idc_notify_path;\n    gray_host_idc_notify_path_tmp.append(\"_tmp\");\n\n    string gray_host_idc_notify_path_new_old = gray_host_idc_notify_path;\n    gray_host_idc_notify_path_new_old.append(\"_new_old\");\n\n    string gray_host_idc_notify_path_tmp_old = gray_host_idc_notify_path;\n    gray_host_idc_notify_path_tmp_old.append(\"_tmp_old\");\n\n    string gray_host_idc_notify_path_tmp_new = gray_host_idc_notify_path;\n    gray_host_idc_notify_path_tmp_new.", "CodeBleu_score": 31.20913575168609}, {"code": "static void init_env_for_zk(zhandle_t *zh, const string &idc_host, const string &idc){\n\t    if (zh == NULL) {\n        return;\n    }\n\n    /* add the handle to the table */\n    lock_t lock(g_idc_map_lock);\n    g_idc_map[idc] = zh;\n\n    lock.unlock();\n\n    /* add the host to the table */\n    lock_t lock1(g_host_map_lock);\n    g_host_map[idc_host] = zh;\n\n    lock1.unlock();\n\n    /* check the connection state of the handle */\n    int state = zoo_state(zh);\n    if (state != ZOO_CONNECTED_STATE) {\n        return;\n    }\n\n    /* register the current host on the Zookeeper server */\n    string host_path = string(QCONF_ZK_REGISTER_PATH) + \"/\" + idc_host;\n    if (zoo_exists(zh, host_path.c_str(), 0, NULL) != ZOK) {\n        zoo_create(zh, host_path.c_str(), NULL, 0, &ZOO_OPEN_ACL_UNSAFE, 0, NULL, 0);\n    }\n\n    /* set a watcher on the notify node */\n    string notify_path = string(QCONF_ZK_NOTIFY_PATH) + \"/\" + idc;\n    if (zoo_exists(zh, notify_path.c_str(), 0, NULL) != ZOK) {\n        zoo_create(zh, notify_path.c_str(), NULL, 0, &ZOO_OPEN_ACL_UNSAFE, 0, NULL, 0);\n    }\n\n    if (zoo_wexists(zh, notify_path.c_str(), watcher_notify, (void *)idc.c_str(), NULL) != ZOK) {\n        /* add the IDC to the gray list */\n        lock_t lock2(g_gray_list_lock);\n        g_gray_list.insert(idc);\n        lock2.unlock();\n\n        log_err(\"set watcher", "CodeBleu_score": 46.290469358063035}, {"code": "static void init_env_for_zk(zhandle_t *zh, const string &idc_host, const string &idc){\n\t    int ret = 0;\n    string path = \"/qconf/quota/\" + idc;\n    string host = get_local_ip();\n    if (host.empty()) {\n        host = get_local_ip_by_name();\n    }\n    if (host.empty()) {\n        QCONF_LOG_ERROR(\"get local ip failed\");\n        return;\n    }\n    QCONF_LOG_DEBUG(\"local host is %s\", host.c_str());\n    ret = qconf_set_local_ip(host.c_str());\n    if (ret != 0) {\n        QCONF_LOG_ERROR(\"set local ip failed\");\n        return;\n    }\n    ret = qconf_set_local_ip_by_name(host.c_str());\n    if (ret != 0) {\n        QCONF_LOG_ERROR(\"set local ip by name failed\");\n        return;\n    }\n    ret = qconf_set_local_ip_by_name(host.c_str());\n    if (ret != 0) {\n        QCONF_LOG_ERROR(\"set local ip by name failed\");\n        return;\n    }\n    ret = qconf_set_local_idc(idc.c_str());\n    if (ret != 0) {\n        QCONF_LOG_ERROR(\"set local idc failed\");\n        return;\n    }\n    ret = qconf_set_local_idc_host(idc_host.c_str());\n    if (ret != 0) {\n        QCONF_LOG_ERROR(\"set local idc host failed\");\n        return;\n    }\n    ret = qconf_set_local_idc_host(idc_host.c_str());\n    if (ret != 0) {\n        QCONF_LOG_ERROR(\"set local idc host failed\");\n        return;\n    }\n    ret = qconf_set_local_idc_host(idc_host.c_str());\n    if (ret != 0) {\n        QCONF_LOG_ERROR(\"set local idc host failed\");\n        return;\n    }\n    ret", "CodeBleu_score": 35.043984061971805}]}
{"instance_id": "19fc5847a7c5", "generation_result": [{"code": "def make_digest_acl_credential(username, password)\n\t\n    hash = hashlib.sha1()\n    hash.update(password)\n    hash.update(username)\n    return '%s:%s' % (username, b64encode(hash.digest()))\n\n", "CodeBleu_score": 22.084218574353155}, {"code": "def make_digest_acl_credential(username, password)\n\t\n    return \"{}:{}\".format(username, b64encode(hashlib.sha1(password.encode()).digest()).decode())\n\n", "CodeBleu_score": 16.625494782352668}, {"code": "def make_digest_acl_credential(username, password)\n\t\n    username_password = \"%s:%s\" % (username, password)\n    hashed_username_password = hashlib.sha1(username_password).digest()\n    encoded_hashed_username_password = b64encode(hashed_username_password)\n    return \"%s:%s\" % (username, encoded_hashed_username_password)\n\n", "CodeBleu_score": 32.401871828869815}]}
{"instance_id": "4a062391deb0", "generation_result": [{"code": "def holds_lock(self)\n\t\n    if self.processing_element is None:\n        return False\n    lock_path = self._lock_path(self.processing_element)\n    try:\n        return self.client.get(lock_path)[0] == self.instance_id\n    except NoNodeError:\n        return False\n\n", "CodeBleu_score": 36.80001706901424}, {"code": "def holds_lock(self)\n\t\n    if self._processing_element is None:\n        return False\n    lock_path = self._lock_path()\n    try:\n        lock_value = self._client.get(lock_path)[0]\n    except NoNodeError:\n        return False\n    return lock_value == self._processing_element.instance_id\n\n", "CodeBleu_score": 39.50199787043766}, {"code": "def holds_lock(self)\n\t\n    if self.processing_element is None:\n        return False\n    lock_path = self.lock_path\n    try:\n        lock_value = self.client.get(lock_path)[0]\n    except NoNodeError:\n        return False\n    return lock_value == self.processing_element.instance_id\n\n", "CodeBleu_score": 41.6132104775856}]}
{"instance_id": "aaac7523d2b5", "generation_result": [{"code": "def consume(self)\n\t\n    if self._processing is None:\n        return False\n    if self.client.exists(self._processing):\n        self.client.delete(self._processing)\n        self._processing = None\n        return True\n    return False\n\n", "CodeBleu_score": 20.29475072841793}, {"code": "def consume(self)\n\t\n    if self.processing is None:\n        return False\n    if self.processing.value is None:\n        return False\n    if self.processing.value != self.id:\n        return False\n    if self.processing.ephemeral_owner != self.client.client_id:\n        return False\n    try:\n        self.client.transaction()\n        self.client.delete(self.path)\n        self.client.delete(self.processing_path)\n        self.client.commit()\n        self.processing = None\n        return True\n    except NoNodeError:\n        return False\n    except ForceRetryError:\n        return False\n\n", "CodeBleu_score": 36.28829233793126}, {"code": "def consume(self)\n\t\n    if not self.is_held:\n        return False\n    if self.processing is not None:\n        try:\n            self.client.delete(self.path, version=self.version)\n            return True\n        except NoNodeError:\n            return False\n    else:\n        return False\n\n", "CodeBleu_score": 21.760620917105058}]}
{"instance_id": "bed0c998ac4c", "generation_result": [{"code": "def _read_socket(self, read_timeout)\n\t\n    # Read the header\n    try:\n        header = self._sock.recv(4)\n    except socket.error as e:\n        if e.errno == socket.errno.EAGAIN:\n            return None\n        raise\n    if len(header) != 4:\n        self._raise_socket_error(\n            \"Did not receive header of 4 bytes, only received %s\" % len(header)\n        )\n    header = ReplyHeader.from_bytes(header)\n    # Read the rest of the buffer\n    try:\n        buf = self._sock.recv(header.buflen)\n    except socket.error as e:\n        if e.errno == socket.errno.EAGAIN:\n            return None\n        raise\n    if len(buf) != header.buflen:\n        self._raise_socket_error(\n            \"Did not receive %s bytes of data, only received %s\"\n            % (header.buflen, len(buf))\n        )\n    # Handle the message\n    if header.xid == Ping.XID:\n        self._logger.log(BLATHER, \"Received ping\")\n        self._outstanding_pings = False\n    elif header.xid == Auth.XID:\n        self._handle_auth_response(header, buf)\n    elif header.xid == Watch.XID:\n        self._handle_watch_event(header, buf)\n    else:\n        self._logger.log(BLATHER, \"Received message %s\" % header)\n        self._handle_response(header, buf)\n\n", "CodeBleu_score": 38.61642278723642}, {"code": "def _read_socket(self, read_timeout)\n\t\n    self.recv_header = self.recv_header or ReplyHeader()\n    self.recv_buffer = self.recv_buffer or bytearray()\n    try:\n        # Read header\n        self.recv_header.deserialize(self.recv_buffer)\n        if self.recv_header.xid == PING_XID:\n            self.log.debug('Received ping')\n            self.outstanding_ping = False\n        elif self.recv_header.xid == AUTH_XID:\n            self.log.debug('Received auth response')\n            self.recv_buffer = self.recv_buffer[self.recv_header.len:]\n            self.recv_header = ReplyHeader()\n            self.recv_header.deserialize(self.recv_buffer)\n            if self.recv_header.zxid == 0:\n                self.log.info('Auth failed')\n                self.auth_failed = True\n                raise AuthFailedError('Authentication failed')\n            else:\n                self.log.info('Auth succeeded')\n                self.auth_failed = False\n        elif self.recv_header.xid == WATCH_XID:\n            self.log.debug('Received watch event')\n            self.recv_buffer = self.recv_buffer[self.recv_header.len:]\n            self.recv_header = ReplyHeader()\n            self.recv_header.deserialize(self.recv_buffer)\n            self.handle_watch_event()\n        else:\n            self.log.debug('Received response for xid: %d', self.recv_header.xid)\n            self.recv_buffer = self.recv_buffer[self.recv_header.len:]\n            self.recv_header = ReplyHeader()\n            self.recv_header.deserialize(self.recv_buffer)\n    except Exception:\n        self.log.exception('Error reading from socket')\n        raise\n    else:\n        if self.recv_header.xid == 0:\n            self.log.debug('Received keep alive')\n        elif", "CodeBleu_score": 32.155851335209064}, {"code": "def _read_socket(self, read_timeout)\n\t\n    header = self._recv_header()\n    if header.xid == PING_XID:\n        self._log(BLATHER, \"Received ping\")\n        self._clear_outstanding_ping()\n    elif header.xid == AUTH_XID:\n        self._handle_auth_response(header)\n    elif header.xid == WATCH_XID:\n        self._handle_watch_event(header)\n    else:\n        self._log(BLATHER, \"Received header %s\", header)\n        self._recv_response(header)\n\n    self._timeout = read_timeout\n\n", "CodeBleu_score": 31.633577397060275}]}
{"instance_id": "b10e2c2c410b", "generation_result": [{"code": "def zk_loop(self)\n\t\n    self.logger.debug(\"Starting Zookeeper connection loop\")\n    self.connection_stopped.clear()\n    while not self.stopped.is_set():\n        try:\n            self.connect()\n        except ForceRetryError:\n            self.logger.warning(\"Force retrying connection\")\n        except RetryFailedError:\n            self.logger.warning(\"Connection failed\")\n            self.session_callback(KeeperState.CONNECTING)\n            self.connection_stopped.set()\n            break\n        except Exception:\n            self.logger.exception(\"Connection failed\")\n            self.session_callback(KeeperState.CONNECTING)\n            self.connection_stopped.set()\n            break\n    self.session_callback(KeeperState.CLOSED)\n    self.logger.debug(\"Stopped Zookeeper connection loop\")\n\n", "CodeBleu_score": 42.51877344393353}, {"code": "def zk_loop(self)\n\t\n    self.connection_stopped.clear()\n    self.log.info(\"Starting connection loop\")\n    while not self.connection_stopped.is_set():\n        try:\n            self.connect()\n            break\n        except ForceRetryError:\n            self.log.warning(\"Connection attempt failed, retrying\")\n        except RetryFailedError:\n            self.log.warning(\"Connection attempt failed, no more retries\")\n            break\n    self.log.info(\"Stopping connection loop\")\n    self.trigger_session_event(KeeperState.CONNECTED, \"closed\")\n    self.connection_stopped.set()\n\n", "CodeBleu_score": 40.71194492758653}, {"code": "def zk_loop(self)\n\t\n    self.connection_stopped.clear()\n    self.log.debug(\"Starting Zookeeper connection loop\")\n    try:\n        self._connect()\n    except (ForceRetryError, RetryFailedError):\n        self.log.warning(\"Unable to connect to Zookeeper, retrying\")\n        self.connection_stopped.set()\n        return\n    except Exception:\n        self.log.exception(\"Unable to connect to Zookeeper\")\n        self.connection_stopped.set()\n        return\n    self.log.debug(\"Connected to Zookeeper\")\n    self.connection_stopped.set()\n    self.session_event.set()\n    self.session_event.clear()\n    try:\n        self._handle_events()\n    except Exception:\n        self.log.exception(\"Unable to handle events\")\n    self.log.debug(\"Disconnected from Zookeeper\")\n    self.session_event.set()\n    self.session_event.clear()\n    self._close()\n\n", "CodeBleu_score": 38.8112728483769}]}
{"instance_id": "42b3d26a3540", "generation_result": [{"code": "def _partitioner(self, identifier, members, partitions)\n\t\n    members.sort()\n    partitions.sort()\n    index = members.index(identifier)\n    return [partitions[i] for i in range(index, len(partitions), len(members))]\n\n", "CodeBleu_score": 36.27956862628124}, {"code": "def _partitioner(self, identifier, members, partitions)\n\t\n    members.sort()\n    partitions.sort()\n    idx = members.index(identifier)\n    partitions_per_worker = int(len(partitions) / len(members))\n    return partitions[idx * partitions_per_worker:(idx + 1) * partitions_per_worker]\n\n", "CodeBleu_score": 25.155228700632698}, {"code": "def _partitioner(self, identifier, members, partitions)\n\t\n    # sort the members\n    members = sorted(members)\n    # sort the partitions\n    partitions = sorted(partitions)\n    # find the index of the identifier in the sorted members list\n    index = members.index(identifier)\n    # return every nth partition starting from that index, where n is the number of workers\n    return partitions[index::len(members)]\n\n", "CodeBleu_score": 39.65957835883439}]}
{"instance_id": "738974d4e9c0", "generation_result": [{"code": "def leave(self)\n\t\n    self._check_not_closed()\n    try:\n        self._client.delete(self._path, version=self._version)\n    except (NoNodeError, KazooException):\n        pass\n    self._version = None\n    self._participating = False\n\n", "CodeBleu_score": 43.728488848485945}, {"code": "def leave(self)\n\t\n    if not self.participating:\n        return\n    try:\n        self.client.delete(self.path)\n    except NoNodeError:\n        pass\n    except KazooException as e:\n        self.log.warning(\"Failed to delete barrier node %s: %s\", self.path, e)\n    self.client.handler.event_object.wait()\n    self.client.handler.event_object.clear()\n    self.client.handler.event_object.set()\n    self.participating = False\n\n", "CodeBleu_score": 43.050146517640044}, {"code": "def leave(self)\n\t\n    try:\n        self._barrier.leave()\n    except (NoNodeError, KazooException):\n        pass\n    self._participating = False\n\n", "CodeBleu_score": 42.31164437361757}]}
{"instance_id": "a321fef7d100", "generation_result": [{"code": "public Result start(){\n\t    try {\n        hftpService.start();\n        return Result.success();\n    } catch (Exception e) {\n        return Result.error(e.getMessage());\n    }\n}", "CodeBleu_score": 24.4216569846727}, {"code": "public Result start(){\n\t    try {\n        hftpService.start();\n        return Result.success();\n    } catch (Exception e) {\n        logger.error(e);\n        return Result.error(e);\n    }\n}", "CodeBleu_score": 33.777601097860725}, {"code": "public Result start(){\n\t    try {\n        hftpService.start();\n        return Result.success();\n    } catch (Exception e) {\n        logger.error(\"Start HFTP server failed.\", e);\n        return Result.failure(e.getMessage());\n    }\n}", "CodeBleu_score": 29.622410575796504}]}
{"instance_id": "24b088689114", "generation_result": [{"code": "public Result stop(){\n\t    try {\n        if (hftpService.isRunning()) {\n            hftpService.stop();\n            return new Result(true, \"Successfully stopped the server\");\n        }\n        return new Result(false, \"The server is not running\");\n    } catch (Exception e) {\n        logger.error(\"Failed to stop the server\", e);\n        return new Result(false, \"Failed to stop the server\");\n    }\n}", "CodeBleu_score": 36.02169005990265}, {"code": "public Result stop(){\n\t    try {\n        if (service.isRunning()) {\n            service.stop();\n            return new Result(true, \"FTP server stopped successfully.\");\n        } else {\n            return new Result(false, \"FTP server is not running.\");\n        }\n    } catch (Exception e) {\n        logger.error(\"Failed to stop FTP server.\", e);\n        return new Result(false, \"Failed to stop FTP server.\");\n    }\n}", "CodeBleu_score": 39.50302398600392}, {"code": "public Result stop(){\n\t    try {\n        hftpService.stop();\n        return new Result(true, \"success\");\n    } catch (Exception e) {\n        logger.error(\"Stop FTP Server Error\", e);\n        return new Result(false, \"failed\");\n    }\n}", "CodeBleu_score": 34.74532047526504}]}
{"instance_id": "af0884ffda66", "generation_result": [{"code": "public AuthorizationRequest authorize(AuthorizationRequest request){\n\t\n    // if no authorities are available, return null\n    if (authorities.isEmpty()) {\n        return null;\n    }\n\n    // if an authority can authorize the request, update it\n    for (Authority authority : authorities) {\n        if (authority.canAuthorize(request)) {\n            authority.authorize(request);\n            break;\n        }\n    }\n\n    // if authorization fails at any point, return null\n    if (!request.isAuthorized()) {\n        return null;\n    }\n\n    // if at least one authority successfully processes the request, return the updated request\n    // otherwise, return null\n    for (Authority authority : authorities) {\n        if (authority.canAuthorize(request)) {\n            return request;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 37.273406440357704}, {"code": "public AuthorizationRequest authorize(AuthorizationRequest request){\n\t    if (authorities == null) {\n        return null;\n    }\n    for (Authority authority : authorities) {\n        if (authority.authorize(request)) {\n            request.setAuthority(authority);\n            return request;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 31.895432372122862}, {"code": "public AuthorizationRequest authorize(AuthorizationRequest request){\n\t\tif (authorities.isEmpty()) {\n\t\treturn null;\n\t}\n\n\tfor (Authority authority : authorities) {\n\t\tif (authority.authorize(request)) {\n\t\t\treturn request;\n\t\t}\n\t}\n\n\treturn null;\n}", "CodeBleu_score": 21.08786084570299}]}
{"instance_id": "920d28a0fe76", "generation_result": [{"code": "public boolean mkdir(){\n\t    try {\n        FileSystem fileSystem = ((HdfsUser) user).getFileSystem();\n        fileSystem.mkdirs(new Path(fullPath));\n        return true;\n    } catch (IOException e) {\n        LOGGER.error(\"mkdir: IOException: \" + e.getMessage());\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 58.75446161712682}, {"code": "public boolean mkdir(){\n\t    try {\n        FileSystem fs = ((HdfsUser) user).getFileSystem();\n        fs.mkdirs(new Path(fullPath));\n        return true;\n    } catch (IOException e) {\n        logger.error(\"mkdir() failed for user {}\", user.getName(), e);\n        return false;\n    }\n}", "CodeBleu_score": 59.358191488481616}, {"code": "public boolean mkdir(){\n\t    try {\n        FtpFile ftpFile = getFile();\n        User user = getUser();\n        String fullPath = ftpFile.getAbsolutePath();\n        HdfsUser hdfsUser = (HdfsUser) user;\n        FileSystem fs = hdfsUser.getFileSystem();\n        fs.mkdirs(new Path(fullPath));\n        return true;\n    } catch (IOException e) {\n        LOG.error(e.getMessage(), e);\n        return false;\n    }\n}", "CodeBleu_score": 48.87862956956379}]}
{"instance_id": "a2b04232d387", "generation_result": [{"code": "public boolean delete(){\n\t    try {\n        LOGGER.info(\"Delete operation on path: \" + fullPath);\n        FileSystem fs = ((HdfsUser) user).getFileSystem();\n        fs.delete(new Path(fullPath), true);\n        return true;\n    } catch (IOException e) {\n        LOGGER.error(\"Failed to delete file/directory: \" + fullPath, e);\n        return false;\n    }\n}", "CodeBleu_score": 50.79878721679536}, {"code": "public boolean delete(){\n\t    try {\n        if (this.isDirectory()) {\n            FileStatus[] files = fs.listStatus(fullPath);\n            if (files.length > 0) {\n                for (FileStatus file : files) {\n                    if (!file.isDirectory()) {\n                        fs.delete(file.getPath(), false);\n                    }\n                }\n            }\n            fs.delete(fullPath, true);\n        } else {\n            fs.delete(fullPath, false);\n        }\n        return true;\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 61.40495303417619}, {"code": "public boolean delete(){\n\t    try {\n        FtpFile ftpFile = getFtpFile();\n        String fullPath = ftpFile.getAbsolutePath();\n        FileSystem fs = ((HdfsUser) getUser()).getFileSystem();\n        fs.delete(new Path(fullPath), true);\n        return true;\n    } catch (IOException e) {\n        LOGGER.error(\"Exception while deleting file\", e);\n        return false;\n    }\n}", "CodeBleu_score": 51.555702122048075}]}
{"instance_id": "3407087c9af6", "generation_result": [{"code": "public boolean move(FtpFile ftpFile){\n\t\n    String ftpFilePath = ftpFile.getAbsolutePath();\n    String ftpFileParentDirectory = ftpFile.getParent().getAbsolutePath();\n    String ftpFileName = ftpFile.getName();\n    String newFtpFilePath = ftpFileParentDirectory + \"/\" + ftpFileName;\n\n    User user = ftpFile.getUser();\n    HdfsUser hdfsUser = (HdfsUser) user;\n\n    try {\n        FileSystem fileSystem = hdfsUser.getFileSystem();\n        Path oldPath = new Path(ftpFilePath);\n        Path newPath = new Path(newFtpFilePath);\n\n        if (fileSystem.exists(oldPath)) {\n            fileSystem.rename(oldPath, newPath);\n            return true;\n        }\n\n    } catch (IOException e) {\n        LOG.error(\"IOException: \" + e.getMessage());\n        e.printStackTrace();\n    }\n\n    return false;\n}", "CodeBleu_score": 42.607860020027175}, {"code": "public boolean move(FtpFile ftpFile){\n\t    try {\n        FileSystem fs = ((HdfsUser) user).getFileSystem();\n        Path src = new Path(ftpFile.getAbsolutePath());\n        Path dst = new Path(ftpFile.getParent().getAbsolutePath() + \"/\" + ftpFile.getName());\n        fs.rename(src, dst);\n        return true;\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 58.45589295092273}, {"code": "public boolean move(FtpFile ftpFile){\n\t    try {\n        FileSystem fs = ((HdfsUser) user).getFileSystem();\n        Path src = new Path(ftpFile.getAbsolutePath());\n        Path dst = new Path(ftpFile.getParent().getAbsolutePath() + \"/\" + ftpFile.getName());\n        fs.rename(src, dst);\n        return true;\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 58.45589295092273}]}
{"instance_id": "91227000a139", "generation_result": [{"code": "public List<FtpFile> listFiles(){\n\t\n    final Logger logger = LoggerFactory.getLogger(HdfsFile.class);\n\n    try {\n        logger.debug(\"listFiles()\");\n        FileStatus[] statuses = fs.listStatus(new Path(path));\n        FtpFile[] files = new FtpFile[statuses.length];\n        for (int i = 0; i < statuses.length; i++) {\n            FileStatus status = statuses[i];\n            String name = status.getPath().getName();\n            String virtualPath = path + \"/\" + name;\n            String physicalPath = status.getPath().toString();\n            FtpFile file = new HdfsFile(name, virtualPath, physicalPath, status, fs, user);\n            files[i] = file;\n        }\n        return Collections.unmodifiableList(Arrays.asList(files));\n    } catch (IOException e) {\n        logger.error(\"listFiles()\", e);\n        return null;\n    }\n}", "CodeBleu_score": 43.96306346116779}, {"code": "public List<FtpFile> listFiles(){\n\t    final Logger logger = LoggerFactory.getLogger(HdfsFile.class);\n    List<FtpFile> ftpFiles = Collections.emptyList();\n    try {\n        FileSystem fs = HdfsUser.getFileSystem(user);\n        FileStatus[] fileStatuses = fs.listStatus(new Path(path));\n        ftpFiles = Arrays.asList(new FtpFile[fileStatuses.length]);\n        for (int i = 0; i < fileStatuses.length; i++) {\n            ftpFiles.set(i, new HdfsFile(fileStatuses[i], this));\n        }\n    } catch (IOException e) {\n        logger.error(\"Could not list files in directory \" + path, e);\n    }\n    return Collections.unmodifiableList(ftpFiles);\n}", "CodeBleu_score": 39.819064808600835}, {"code": "public List<FtpFile> listFiles(){\n\t    List<FtpFile> files = null;\n    try {\n        FileStatus[] fileStatuses = hdfsFileSystem.listStatus(new Path(path));\n        files = Arrays.asList(createFtpFiles(fileStatuses));\n    } catch (IOException e) {\n        LOGGER.error(\"listFiles: IOException: \" + e.getMessage());\n    }\n    return Collections.unmodifiableList(files);\n}", "CodeBleu_score": 20.873962601617567}]}
{"instance_id": "aec4623134b5", "generation_result": [{"code": "public void configure(){\n\t    try {\n        // check if the file exists\n        File file = new File(filePath);\n        if (!file.exists()) {\n            // create a new file\n            file.createNewFile();\n        }\n        // load the properties\n        properties.load(new FileInputStream(file));\n        // convert deprecated property names\n        convertPropertyNames();\n        // initialize user data properties\n        userData = new Properties();\n        userData.load(new FileInputStream(file));\n        // set the configuration state to true\n        setConfigured(true);\n    } catch (IOException e) {\n        throw new FtpServerConfigurationException(\n                \"Unable to load user data file: \" + filePath, e);\n    }\n}", "CodeBleu_score": 42.879863977108194}, {"code": "public void configure(){\n\t    try {\n        if (userDataFile.exists()) {\n            Properties props = new Properties();\n            FileInputStream in = new FileInputStream(userDataFile);\n            try {\n                props.load(in);\n            } finally {\n                IoUtils.close(in);\n            }\n            // convert deprecated properties\n            convertDeprecatedProperties(props);\n            // set user data properties\n            userDataProperties.setProperties(props);\n        } else {\n            // create new user data file\n            FileOutputStream out = new FileOutputStream(userDataFile);\n            try {\n                userDataProperties.store(out, \"User data file\");\n            } finally {\n                IoUtils.close(out);\n            }\n        }\n    } catch (IOException ex) {\n        throw new FtpServerConfigurationException(\"Unable to configure user data file \" + userDataFile.getAbsolutePath(), ex);\n    }\n}", "CodeBleu_score": 47.485151865211506}, {"code": "public void configure(){\n\t    try {\n        // check if user data file exists\n        File file = new File(userDataFile);\n        if (file.exists()) {\n            // load user data properties\n            Properties props = new BaseProperties();\n            FileInputStream in = new FileInputStream(file);\n            try {\n                props.load(in);\n            } finally {\n                IoUtils.close(in);\n            }\n            // convert deprecated property names\n            convertDeprecatedPropertyNames(props);\n            // set user data properties\n            userDataProps = props;\n        }\n        // set configuration state\n        configured = true;\n    } catch (IOException e) {\n        throw new FtpServerConfigurationException(\"Could not load user data file \" + userDataFile, e);\n    }\n}", "CodeBleu_score": 46.65169781758383}]}
{"instance_id": "b5a2587f14d0", "generation_result": [{"code": "private void saveUserData() throws FtpException{\n\t    File userDataFile = new File(userDataFilePath);\n    File parentDir = userDataFile.getParentFile();\n    if (!parentDir.exists()) {\n        if (!parentDir.mkdirs()) {\n            throw new FtpServerConfigurationException(\"Failed to create user data directory \" + parentDir.getAbsolutePath());\n        }\n    }\n    FileOutputStream fos = null;\n    try {\n        fos = new FileOutputStream(userDataFile);\n        BaseProperties props = new BaseProperties();\n        for (User user : users.values()) {\n            props.put(user.getName(), user.getProperties().toString());\n        }\n        props.store(fos);\n    } catch (IOException ex) {\n        log.error(\"Failed to save user data\", ex);\n        throw new FtpException(\"Failed to save user data\", ex);\n    } finally {\n        IoUtils.close(fos);\n    }\n}", "CodeBleu_score": 54.601210943254394}, {"code": "private void saveUserData() throws FtpException{\n\t    FileOutputStream out = null;\n    try {\n        // check if the parent directory exists\n        File parent = new File(getUserDataFile().getParent());\n        if (!parent.exists()) {\n            // create the parent directory\n            if (!parent.mkdirs()) {\n                throw new FtpServerConfigurationException(\"Cannot create user data parent directory: \" + parent);\n            }\n        }\n        // create the user data file\n        out = new FileOutputStream(getUserDataFile());\n        // write the user data\n        getUserData().write(out);\n    } catch (IOException e) {\n        // log the error\n        LOG.error(\"Cannot save user data to file: \" + getUserDataFile(), e);\n        // throw an exception\n        throw new FtpException(\"Cannot save user data to file: \" + getUserDataFile(), e);\n    } finally {\n        // close the output stream\n        IoUtils.close(out);\n    }\n}", "CodeBleu_score": 42.15830461150762}, {"code": "private void saveUserData() throws FtpException{\n\t    FileOutputStream out = null;\n    try {\n        File dir = new File(userDataFile.getParent());\n        if (!dir.exists()) {\n            if (!dir.mkdirs()) {\n                throw new FtpServerConfigurationException(\"Cannot create user data directory: \" + dir.getAbsolutePath());\n            }\n        }\n        out = new FileOutputStream(userDataFile);\n        out.write(BaseProperties.toProperties(userData).getBytes());\n    } catch (IOException ex) {\n        log.error(\"Cannot save user data\", ex);\n        throw new FtpException(\"Cannot save user data\", ex);\n    } finally {\n        IoUtils.close(out);\n    }\n}", "CodeBleu_score": 50.85585576373437}]}
{"instance_id": "5cf2989cf513", "generation_result": [{"code": "public Result delete(@PathVariable(value = \"user\") String user){\n\t    try {\n        HdfsUserManager userManager = new HdfsUserManager(new File(\"./users.properties\"));\n        userManager.deleteUser(user);\n        return new Result(true, \"User \" + user + \" deleted\");\n    } catch (Exception e) {\n        logger.error(\"Error deleting user \" + user + \": \" + e.getMessage());\n        return new Result(false, \"Error deleting user \" + user + \": \" + e.getMessage());\n    }\n}", "CodeBleu_score": 46.604967576062705}, {"code": "public Result delete(@PathVariable(value = \"user\") String user){\n\t    try {\n        HdfsUserManager userManager = new HdfsUserManager();\n        userManager.setFile(new File(\"users.properties\"));\n        UserFactory userFactory = new UserFactory();\n        userFactory.setPasswordEncryptor(new Md5PasswordEncryptor());\n        User user1 = userFactory.createUser(user, \"\");\n        userManager.delete(user1);\n        return new Result(true, \"Successfully deleted user.\");\n    } catch (Exception e) {\n        logger.error(e);\n        return new Result(false, \"Failed to delete user.\");\n    }\n}", "CodeBleu_score": 48.56286607425264}, {"code": "public Result delete(@PathVariable(value = \"user\") String user){\n\t    try {\n        HdfsUserManager userManager = new HdfsUserManager(new File(\"users.properties\"));\n        UserFactory userFactory = new UserFactory();\n        userFactory.setPasswordEncryptor(new Md5PasswordEncryptor());\n        User u = userFactory.createUser(user, \"\");\n        userManager.deleteUser(u);\n        return new Result(true, \"User \" + user + \" deleted\");\n    } catch (Exception e) {\n        logger.error(\"Failed to delete user \" + user, e);\n        return new Result(false, \"Failed to delete user \" + user + \": \" + e.getMessage());\n    }\n}", "CodeBleu_score": 45.29445649320625}]}
{"instance_id": "ce383a9a6497", "generation_result": [{"code": "public FSDataInputStream open(Path path, int bufferSize) throws IOException{\n\t    if (LOG.isDebugEnabled()) {\n        LOG.debug(\"open({}, {})\", path, bufferSize);\n    }\n\n    final Path qualifiedPath = makeQualified(path);\n    final FSDataInputStream result;\n    try {\n        result = new FSDataInputStream(new SeaweedInputStream(qualifiedPath, bufferSize, getConf()));\n    } catch (FileNotFoundException e) {\n        LOG.warn(\"open({}, {}) failed to open {}\", path, bufferSize, qualifiedPath, e);\n        return null;\n    }\n\n    if (LOG.isDebugEnabled()) {\n        LOG.debug(\"open({}, {}) returning {}\", path, bufferSize, result);\n    }\n    return result;\n}", "CodeBleu_score": 45.89534794788937}, {"code": "public FSDataInputStream open(Path path, int bufferSize) throws IOException{\n\t    return open(path, bufferSize, new Progressable() {\n        public void progress() {\n        }\n    });\n}", "CodeBleu_score": 9.572235007907455}, {"code": "public FSDataInputStream open(Path path, int bufferSize) throws IOException{\n\t    return open(path, bufferSize, getDefaultOpenOptions());\n}", "CodeBleu_score": 9.25805200780286}]}
{"instance_id": "f0fc12072c02", "generation_result": [{"code": "public boolean rename(Path src, Path dst) throws IOException{\n\t    if (src.isRoot()) {\n        return false;\n    }\n    if (src.equals(dst)) {\n        return true;\n    }\n    FileStatus srcStatus = getFileStatus(src);\n    if (srcStatus.isDirectory()) {\n        if (dst.isRoot()) {\n            return false;\n        }\n        if (dst.equals(src)) {\n            return true;\n        }\n        FileStatus dstStatus = getFileStatus(dst);\n        if (dstStatus.isDirectory()) {\n            dst = new Path(dst, src.getName());\n        }\n    }\n    src = makeQualified(src);\n    dst = makeQualified(dst);\n    String srcKey = src.toUri().getPath();\n    String dstKey = dst.toUri().getPath();\n    if (srcKey.equals(dstKey)) {\n        return true;\n    }\n    if (srcKey.startsWith(dstKey)) {\n        return false;\n    }\n    return store.rename(srcKey, dstKey);\n}", "CodeBleu_score": 53.547041843770934}, {"code": "public boolean rename(Path src, Path dst) throws IOException{\n\t    if (src.isRoot()) {\n        return false;\n    }\n    if (src.equals(dst)) {\n        return true;\n    }\n    FileStatus dstStatus = null;\n    try {\n        dstStatus = getFileStatus(dst);\n    } catch (FileNotFoundException e) {\n        // dst doesn't exist, do nothing\n    }\n    if (dstStatus != null && dstStatus.isDirectory()) {\n        dst = new Path(dst, src.getName());\n    }\n    Path qualifiedSrc = makeQualified(src);\n    Path qualifiedDst = makeQualified(dst);\n    if (!qualifiedSrc.equals(qualifiedDst)) {\n        return store.rename(qualifiedSrc, qualifiedDst);\n    }\n    return true;\n}", "CodeBleu_score": 50.992107389904554}, {"code": "public boolean rename(Path src, Path dst) throws IOException{\n\t    if (src.isRoot()) {\n        return false;\n    }\n    if (src.equals(dst)) {\n        return true;\n    }\n    String srcPath = src.toUri().getPath();\n    String dstPath = dst.toUri().getPath();\n    if (srcPath.endsWith(\"/\")) {\n        srcPath = srcPath.substring(0, srcPath.length() - 1);\n    }\n    if (dstPath.endsWith(\"/\")) {\n        dstPath = dstPath.substring(0, dstPath.length() - 1);\n    }\n    String[] srcPaths = srcPath.split(\"/\");\n    String[] dstPaths = dstPath.split(\"/\");\n    String[] newDstPaths = new String[dstPaths.length];\n    for (int i = 0; i < dstPaths.length; i++) {\n        if (dstPaths[i].equals(\"..\")) {\n            newDstPaths[i] = srcPaths[i];\n        } else {\n            newDstPaths[i] = dstPaths[i];\n        }\n    }\n    dstPath = String.join(\"/\", newDstPaths);\n    dst = new Path(dstPath);\n    return store.rename(src, dst);\n}", "CodeBleu_score": 47.73350135462178}]}
{"instance_id": "5104c071af46", "generation_result": [{"code": "public boolean hasCapability(String capability){\n\t    if (capability == null) {\n        return false;\n    }\n    capability = capability.toLowerCase(Locale.ENGLISH);\n    if (capability.equals(StreamCapabilities.HFLUSH) || capability.equals(StreamCapabilities.HSYNC)) {\n        return supportFlush;\n    }\n    return false;\n}", "CodeBleu_score": 46.020739745662766}, {"code": "public boolean hasCapability(String capability){\n\t    if (capability == null) {\n        return false;\n    }\n    String capabilityLower = capability.toLowerCase(Locale.ENGLISH);\n    if (capabilityLower.equals(StreamCapabilities.HFLUSH.toString()) || capabilityLower.equals(StreamCapabilities.HSYNC.toString())) {\n        return supportFlush;\n    }\n    return false;\n}", "CodeBleu_score": 39.69932704453228}, {"code": "public boolean hasCapability(String capability){\n\t    return capability.equalsIgnoreCase(StreamCapabilities.HSYNC.toString()) || capability.equalsIgnoreCase(StreamCapabilities.HFLUSH.toString()) || capability.equalsIgnoreCase(StreamCapabilities.HDFS_DATA_STREAM.toString());\n}", "CodeBleu_score": 41.78199836799442}]}
{"instance_id": "6989c860c79b", "generation_result": [{"code": "private synchronized void flushWrittenBytesToServiceInternal(final long offset) throws IOException{\n\t    if (offset < lastFlushedOffset) {\n        throw new IOException(\"Flush offset \" + offset + \" is before last flushed offset \" + lastFlushedOffset);\n    }\n    if (offset == lastFlushedOffset) {\n        return;\n    }\n    if (offset > lastFlushedOffset) {\n        if (offset > lastFlushedOffset + bufferSize) {\n            throw new IOException(\"Flush offset \" + offset + \" is greater than last flushed offset \" + lastFlushedOffset + \" plus buffer size \" + bufferSize);\n        }\n        long toFlush = offset - lastFlushedOffset;\n        if (toFlush > 0) {\n            if (toFlush > bufferSize) {\n                throw new IOException(\"Flush offset \" + offset + \" is greater than last flushed offset \" + lastFlushedOffset + \" plus buffer size \" + bufferSize);\n            }\n            int toFlushInt = (int) toFlush;\n            if (toFlushInt != toFlush) {\n                throw new IOException(\"Flush offset \" + offset + \" is greater than last flushed offset \" + lastFlushedOffset + \" plus buffer size \" + bufferSize);\n            }\n            if (toFlushInt > buffer.position()) {\n                throw new IOException(\"Flush offset \" + offset + \" is greater than last flushed offset \" + lastFlushedOffset + \" plus buffer size \" + bufferSize);\n            }\n            if (toFlushInt > 0) {\n                if (toFlushInt > buffer.position()) {\n                    throw new IOException(\"Flush offset \" + offset + \" is greater than last flushed offset \" + lastFlushedOffset + \" plus buffer size \" + bufferSize);\n                }\n                if (toFlushInt > 0) {\n                    buffer.flip();\n                    buffer.limit(toFlushInt);\n                    try {\n                        filerClient.write(filerConfig.getFilePath(), lastFlushedOffset, buffer);\n                    } catch (Exception e) {\n                        throw new IOException(\"Exception writing to filer \" + filerConfig.getFilePath() + \" offset \" + lastFlushedOffset + \" length \" + toFlushInt, e);\n", "CodeBleu_score": 30.96521764578377}, {"code": "private synchronized void flushWrittenBytesToServiceInternal(final long offset) throws IOException{\n\t    if (offset < 0) {\n        throw new IllegalArgumentException(\"offset is negative: \" + offset);\n    }\n\n    if (offset < lastFlushOffset) {\n        throw new IllegalArgumentException(\"offset is smaller than lastFlushOffset: \" + offset + \" vs \" + lastFlushOffset);\n    }\n\n    if (offset > lastFlushOffset + buffer.position()) {\n        throw new IllegalArgumentException(\"offset is larger than lastFlushOffset + buffer.position(): \" + offset + \" vs \" + (lastFlushOffset + buffer.position()));\n    }\n\n    if (offset == lastFlushOffset) {\n        return;\n    }\n\n    if (offset > lastFlushOffset + buffer.position()) {\n        throw new IllegalArgumentException(\"offset is larger than lastFlushOffset + buffer.position(): \" + offset + \" vs \" + (lastFlushOffset + buffer.position()));\n    }\n\n    long flushOffset = offset;\n    long flushLength = buffer.position();\n    if (flushOffset + flushLength > lastFlushOffset + buffer.position()) {\n        flushLength = lastFlushOffset + buffer.position() - flushOffset;\n    }\n\n    if (flushLength <= 0) {\n        return;\n    }\n\n    try {\n        if (flushOffset > lastFlushOffset) {\n            // flush metadata\n            filerClient.writeMetadata(path, lastFlushOffset, flushOffset - lastFlushOffset, buffer);\n            lastFlushOffset = flushOffset;\n        }\n\n        // flush data\n        filerClient.writeData(path, flushOffset, flushLength, buffer);\n        lastFlushOffset = flushOffset + flushLength;\n\n        if (flushOffset + flushLength >= lastFlushOffset + buffer.position()) {\n            // flush metadata\n            filerClient.writeMetadata(path, lastFlushOffset, flushOffset + flushLength - lastFlushOffset, buffer);\n            lastFlushOffset = flushOffset + flushLength;\n        }\n    } catch (IOException e) {\n        logger.error(\"flushWrittenBytesToServiceInternal\", e);\n        throw e;\n    }\n}", "CodeBleu_score": 28.878574221930887}, {"code": "private synchronized void flushWrittenBytesToServiceInternal(final long offset) throws IOException{\n\t    if (offset < 0) {\n        throw new IllegalArgumentException(\"offset cannot be negative\");\n    }\n    if (offset <= lastFlushOffset) {\n        return;\n    }\n    if (offset > buffer.limit()) {\n        throw new IllegalArgumentException(\"offset cannot be greater than buffer.limit()\");\n    }\n    if (offset > buffer.position()) {\n        throw new IllegalArgumentException(\"offset cannot be greater than buffer.position()\");\n    }\n    if (offset < buffer.position()) {\n        throw new IllegalArgumentException(\"offset cannot be less than buffer.position()\");\n    }\n    if (offset > buffer.capacity()) {\n        throw new IllegalArgumentException(\"offset cannot be greater than buffer.capacity()\");\n    }\n    if (buffer.remaining() == 0) {\n        return;\n    }\n    try {\n        if (buffer.remaining() > 0) {\n            buffer.flip();\n            if (offset > lastFlushOffset) {\n                filerClient.write(buffer, offset);\n                lastFlushOffset = offset + buffer.remaining();\n            }\n        }\n    } catch (IOException e) {\n        throw new IOException(\"failed to write to filer server at \" + filerServer + \", \" + e.getMessage(), e);\n    }\n}", "CodeBleu_score": 29.7220101385957}]}
{"instance_id": "56e8fb9de5da", "generation_result": [{"code": "private synchronized int submitWriteBufferToService(final ByteBuffer bufferToWrite, final long writePosition) throws IOException {\n\t    if (bufferToWrite.position() != 0) {\n        bufferToWrite.flip();\n    }\n    final int bytesToWrite = bufferToWrite.limit();\n    if (writePosition + bytesToWrite > getLength()) {\n        throw new IOException(\"Cannot write past the end of the file\");\n    }\n    if (writePosition < 0) {\n        throw new IOException(\"Cannot write to a negative position\");\n    }\n    if (getWriteQueueDepth() > getWriteQueueDepthLimit()) {\n        throw new IOException(\"Write queue depth exceeded\");\n    }\n    final ByteBuffer bufferToWriteClone = bufferToWrite.duplicate();\n    final WriteTask writeTask = new WriteTask(bufferToWriteClone, writePosition);\n    getWriteTaskQueue().put(writeTask);\n    getCompletionService().submit(writeTask);\n    getWriteQueueDepth().incrementAndGet();\n    return bytesToWrite;\n}", "CodeBleu_score": 31.553528271982266}, {"code": "private synchronized int submitWriteBufferToService(final ByteBuffer bufferToWrite, final long writePosition) throws IOException {\n\t    if (bufferToWrite.hasRemaining()) {\n        bufferToWrite.flip();\n        final int bytesToWrite = bufferToWrite.remaining();\n        if (taskQueue.size() >= maxQueueSize) {\n            throw new IOException(\"task queue is full\");\n        }\n        final WriteTask writeTask = new WriteTask(bufferToWrite, writePosition);\n        taskQueue.add(writeTask);\n        completionService.submit(writeTask);\n        return bytesToWrite;\n    }\n    return 0;\n}", "CodeBleu_score": 27.255012369414054}, {"code": "private synchronized int submitWriteBufferToService(final ByteBuffer bufferToWrite, final long writePosition) throws IOException {\n\t    if (bufferToWrite.isDirect()) {\n        throw new IOException(\"Direct buffer write not supported\");\n    }\n    if (bufferToWrite.hasArray()) {\n        throw new IOException(\"Array buffer write not supported\");\n    }\n    if (bufferToWrite.isReadOnly()) {\n        throw new IOException(\"Read-only buffer write not supported\");\n    }\n    if (bufferToWrite.position() != 0) {\n        throw new IOException(\"Buffer position must be 0\");\n    }\n    if (bufferToWrite.limit() == 0) {\n        return 0;\n    }\n    if (bufferToWrite.limit() > bufferToWrite.capacity()) {\n        throw new IOException(\"Buffer limit must be less than capacity\");\n    }\n    if (bufferToWrite.limit() > bufferToWrite.capacity()) {\n        throw new IOException(\"Buffer limit must be less than capacity\");\n    }\n    if (bufferToWrite.remaining() == 0) {\n        return 0;\n    }\n    if (bufferToWrite.remaining() > bufferToWrite.capacity()) {\n        throw new IOException(\"Buffer remaining must be less than capacity\");\n    }\n    if (bufferToWrite.remaining() > bufferToWrite.capacity()) {\n        throw new IOException(\"Buffer remaining must be less than capacity\");\n    }\n    if (bufferToWrite.remaining() > bufferToWrite.capacity()) {\n        throw new IOException(\"Buffer remaining must be less than capacity\");\n    }\n    if (bufferToWrite.remaining() > bufferToWrite.capacity()) {\n        throw new IOException(\"Buffer remaining must be less than capacity\");\n    }\n    if (bufferToWrite.remaining() > bufferToWrite.capacity()) {\n        throw new IOException(\"Buffer remaining must be less than capacity\");\n    }\n    if (bufferToWrite.remaining() > bufferToWrite.capacity()) {\n        throw new IOException(\"Buffer remaining must be less than capacity\");\n    }\n    if (bufferToWrite.remaining() > bufferToWrite.capacity()) {\n        throw new IOException(\"Buffer remaining must be less than capacity\");\n    }\n    if (bufferToWrite.remaining() > bufferToWrite.capacity", "CodeBleu_score": 19.613797888934467}]}
{"instance_id": "bf27d955c38b", "generation_result": [{"code": "private void waitForTaskToComplete() throws IOException{\n\t    try {\n        while (true) {\n            Future<ByteBuffer> future = completionService.take();\n            ByteBuffer buffer = future.get();\n            if (buffer == null) {\n                break;\n            }\n            if (buffer.hasRemaining()) {\n                buffer.flip();\n                outputStream.write(buffer.array(), buffer.arrayOffset() + buffer.position(), buffer.remaining());\n                buffer.clear();\n            }\n        }\n    } catch (InterruptedException e) {\n        throw new InterruptedIOException(\"Interrupted while waiting for a task to complete.\");\n    } catch (ExecutionException e) {\n        throw new IOException(\"Exception while executing task.\", e.getCause());\n    }\n}", "CodeBleu_score": 29.381808546981308}, {"code": "private void waitForTaskToComplete() throws IOException{\n\t    // Get the next task\n    Future<Void> task = null;\n    try {\n        task = completionService.take();\n    } catch (InterruptedException e) {\n        throw new InterruptedIOException(\"Interrupted while waiting for a task to complete\");\n    }\n    // Wait for the task to complete\n    try {\n        task.get();\n    } catch (InterruptedException e) {\n        throw new InterruptedIOException(\"Interrupted while waiting for a task to complete\");\n    } catch (ExecutionException e) {\n        throw new IOException(\"Error while waiting for a task to complete\", e.getCause());\n    }\n}", "CodeBleu_score": 30.54212396694973}, {"code": "private void waitForTaskToComplete() throws IOException{\n\t    while (true) {\n        try {\n            Future<ByteBuffer> future = completionService.take();\n            if (future == null) {\n                break;\n            }\n            ByteBuffer buffer = future.get();\n            if (buffer == null) {\n                break;\n            }\n            if (buffer.hasRemaining()) {\n                outputStream.write(buffer.array(), 0, buffer.remaining());\n            }\n        } catch (InterruptedException e) {\n            throw new InterruptedIOException(\"Interrupted while waiting for task to complete\");\n        } catch (ExecutionException e) {\n            throw new IOException(e);\n        }\n    }\n}", "CodeBleu_score": 29.229096242967056}]}
{"instance_id": "5c7a311273ae", "generation_result": [{"code": "private synchronized void shrinkWriteOperationQueue() throws IOException{\n\t    if (writeOperationQueue.size() > 0) {\n        for (int i = 0; i < writeOperationQueue.size(); i++) {\n            if (writeOperationQueue.get(i).isDone()) {\n                try {\n                    ByteBuffer buffer = (ByteBuffer) writeOperationQueue.get(i).get();\n                    if (buffer != null) {\n                        totalAppendOffset += buffer.limit();\n                        if (buffer.hasArray()) {\n                            buffer.clear();\n                        }\n                    }\n                } catch (ExecutionException e) {\n                    if (e.getCause() instanceof IOException) {\n                        throw (IOException) e.getCause();\n                    } else {\n                        throw new IOException(e);\n                    }\n                } catch (InterruptedException e) {\n                    throw new InterruptedIOException(e.getMessage());\n                }\n                writeOperationQueue.remove(i);\n                i--;\n            }\n        }\n    }\n}", "CodeBleu_score": 29.280583126847265}, {"code": "private synchronized void shrinkWriteOperationQueue() throws IOException{\n\t    while (!writeOperationQueue.isEmpty()) {\n        WriteOperation writeOperation = writeOperationQueue.peek();\n        if (writeOperation.isDone()) {\n            writeOperationQueue.remove();\n            try {\n                writeOperation.get();\n            } catch (ExecutionException e) {\n                IOException ioe = new IOException(e.getCause().getMessage());\n                ioe.initCause(e.getCause());\n                throw ioe;\n            } catch (InterruptedException e) {\n                throw new InterruptedIOException(e.getMessage());\n            }\n            if (writeOperation.getOffset() > 0) {\n                totalAppendOffset += writeOperation.getLength();\n            }\n        } else {\n            break;\n        }\n    }\n}", "CodeBleu_score": 32.03470837583769}, {"code": "private synchronized void shrinkWriteOperationQueue() throws IOException{\n\t    while (!writeOperationQueue.isEmpty()) {\n        WriteOperation writeOperation = writeOperationQueue.peek();\n        if (writeOperation.isDone()) {\n            writeOperationQueue.remove();\n            if (writeOperation.getException() != null) {\n                throw new IOException(writeOperation.getException());\n            }\n            totalAppendOffset += writeOperation.getLength();\n        } else {\n            break;\n        }\n    }\n}", "CodeBleu_score": 32.891763138595564}]}
{"instance_id": "d8f07e66f690", "generation_result": [{"code": "protected HdfsFileSystemView(User user){\n\t    if (user == null) {\n        throw new IllegalArgumentException(\"user is null\");\n    }\n    if (user.getHomeDirectory() == null) {\n        throw new IllegalArgumentException(\"user's home directory is null\");\n    }\n    this.user = user;\n    this.homePath = new Path(user.getHomeDirectory());\n}", "CodeBleu_score": 65.37703054643254}, {"code": "protected HdfsFileSystemView(User user){\n\t    if (user == null) {\n        throw new IllegalArgumentException(\"user is null\");\n    }\n    if (user.getHomeDirectory() == null) {\n        throw new IllegalArgumentException(\"user's home directory is null\");\n    }\n    this.user = user;\n    this.homePath = new Path(user.getHomeDirectory());\n}", "CodeBleu_score": 65.37703054643254}, {"code": "protected HdfsFileSystemView(User user){\n\t    if (user == null) {\n        throw new IllegalArgumentException(\"User cannot be null\");\n    }\n    if (user.getHomeDirectory() == null) {\n        throw new IllegalArgumentException(\"User's home directory cannot be null\");\n    }\n    this.user = user;\n    this.homePath = new Path(user.getHomeDirectory());\n}", "CodeBleu_score": 66.18294693037552}]}
{"instance_id": "27807db0eb0f", "generation_result": [{"code": "public boolean changeWorkingDirectory(String dir){\n\t    Path newPath = new Path(dir);\n    if (newPath.isAbsolute()) {\n        if (newPath.equals(new Path(rootPath))) {\n            return false;\n        }\n        currentPath = newPath;\n        return true;\n    } else {\n        if (newPath.equals(new Path(rootPath, currentPath))) {\n            return false;\n        }\n        currentPath = new Path(currentPath, newPath);\n        return true;\n    }\n}", "CodeBleu_score": 23.60356512833708}, {"code": "public boolean changeWorkingDirectory(String dir){\n\t    try {\n        if (dir == null || dir.isEmpty()) {\n            return false;\n        }\n        if (dir.startsWith(\"/\")) {\n            dir = dir.substring(1);\n        }\n        String[] dirs = dir.split(\"/\");\n        for (String dir1 : dirs) {\n            if (dir1.equals(\"..\")) {\n                if (currentPath.getParent() == null) {\n                    return false;\n                }\n                currentPath = currentPath.getParent();\n            } else {\n                currentPath = currentPath.resolve(dir1);\n            }\n        }\n        return true;\n    } catch (Exception e) {\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 29.76938063352259}, {"code": "public boolean changeWorkingDirectory(String dir){\n\t\tPath newPath = null;\n\tFtpFile file = null;\n\ttry {\n\t\tif (dir.equals(\"..\")) {\n\t\t\tnewPath = new Path(currentPath.getParent());\n\t\t} else if (dir.equals(\".\")) {\n\t\t\tnewPath = new Path(currentPath.toString());\n\t\t} else {\n\t\t\tnewPath = new Path(currentPath, dir);\n\t\t}\n\t\tfile = fsView.getFile(newPath);\n\t\tif (file.isDirectory()) {\n\t\t\tcurrentPath = newPath;\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} catch (Exception e) {\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 33.01829548309815}]}
{"instance_id": "be7aba23d184", "generation_result": [{"code": "public SeaweedFileSystemStore(String host, int port, int grpcPort, Configuration conf){\n\t    this.host = host;\n    this.port = port;\n    this.grpcPort = grpcPort;\n    this.conf = conf;\n    this.filerClient = new FilerClient(host, port, grpcPort);\n    this.accessMode = conf.get(SEAWEED_FS_VOLUME_SERVER_ACCESS_MODE, \"direct\");\n    this.filerClient.setFilerGrpcClient(new FilerGrpcClient(host, grpcPort));\n    this.filerClient.setFilerGrpcClient(new FilerGrpcClient(host, grpcPort));\n    this.filerClient.setFilerGrpcClient(new FilerGrpcClient(host, grpcPort));\n    this.filerClient.setFilerGrpcClient(new FilerGrpcClient(host, grpcPort));\n    this.filerClient.setFilerGrpcClient(new FilerGrpcClient(host, grpcPort));\n    this.filerClient.setFilerGrpcClient(new FilerGrpcClient(host, grpcPort));\n    this.filerClient.setFilerGrpcClient(new FilerGrpcClient(host, grpcPort));\n    this.filerClient.setFilerGrpcClient(new FilerGrpcClient(host, grpcPort));\n    this.filerClient.setFilerGrpcClient(new FilerGrpcClient(host, grpcPort));\n    this.filerClient.setFilerGrpcClient(new FilerGrpcClient(host, grpcPort));\n    this.filerClient.setFilerGrpcClient(new FilerGrpcClient(host, grpcPort));\n    this.filerClient.setFilerGrpcClient(new FilerGrpcClient(host, grpcPort));\n    this.filerClient.setFilerGrpcClient(new FilerGrpcClient(host, grpcPort));\n    this.filerClient.setFilerGrpcClient(new FilerGrpcClient(host, grpcPort));\n    this.filerClient.setFilerGrpcClient(new FilerGrpcClient(host, grpcPort));\n    this", "CodeBleu_score": 32.967596111779976}, {"code": "public SeaweedFileSystemStore(String host, int port, int grpcPort, Configuration conf){\n\t    this.host = host;\n    this.port = port;\n    this.grpcPort = grpcPort;\n    this.conf = conf;\n    this.filerClient = new FilerClient(host, port, grpcPort, conf);\n    this.accessMode = conf.get(ACCESS_MODE_KEY, ACCESS_MODE_DIRECT);\n    this.logger = LoggerFactory.getLogger(SeaweedFileSystemStore.class);\n    this.logger.info(\"SeaweedFileSystemStore initialized with host: {}, port: {}, grpcPort: {}, accessMode: {}\", host, port, grpcPort, accessMode);\n}", "CodeBleu_score": 38.01932704258366}, {"code": "public SeaweedFileSystemStore(String host, int port, int grpcPort, Configuration conf){\n\t    this.host = host;\n    this.port = port;\n    this.grpcPort = grpcPort;\n    this.conf = conf;\n    this.filerClient = new FilerClient(host, port, grpcPort);\n    this.filerClient.setFilerClientGrpc(conf);\n    this.filerClient.setFilerClientGrpc(conf);\n    this.filerClient.setFilerClientGrpc(conf);\n    this.filerClient.setFilerClientGrpc(conf);\n    this.filerClient.setFilerClientGrpc(conf);\n    this.filerClient.setFilerClientGrpc(conf);\n    this.filerClient.setFilerClientGrpc(conf);\n    this.filerClient.setFilerClientGrpc(conf);\n    this.filerClient.setFilerClientGrpc(conf);\n    this.filerClient.setFilerClientGrpc(conf);\n    this.filerClient.setFilerClientGrpc(conf);\n    this.filerClient.setFilerClientGrpc(conf);\n    this.filerClient.setFilerClientGrpc(conf);\n    this.filerClient.setFilerClientGrpc(conf);\n    this.filerClient.setFilerClientGrpc(conf);\n    this.filerClient.setFilerClientGrpc(conf);\n    this.filerClient.setFilerClientGrpc(conf);\n    this.filerClient.setFilerClientGrpc(conf);\n    this.filerClient.setFilerClientGrpc(conf);\n    this.filerClient.setFilerClientGrpc(conf);\n    this.filerClient.setFilerClientGrpc(conf);\n    this.filerClient.setFilerClientGrpc(conf);\n    this.filerClient.setFilerClientGrpc(conf);\n    this.filerClient.setFilerClientGrpc(conf);\n    this.filerClient.setFilerClientGrpc(conf);\n    this.filerClient.setFilerClientGrpc(conf);\n    this.filerClient.setFilerClientGrpc", "CodeBleu_score": 29.626100901914665}]}
{"instance_id": "7943a1723c23", "generation_result": [{"code": "public FSInputStream openFileForRead(final Path path, FileSystem.Statistics statistics) throws IOException{\n\t    final FileStatus fileStatus = getFileStatus(path);\n    if (fileStatus.isDirectory()) {\n        throw new FileNotFoundException(\"Cannot open \" + path + \" for reading\");\n    }\n    return new SeaweedHadoopInputStream(fileStatus, path, statistics);\n}", "CodeBleu_score": 41.939469080580416}, {"code": "public FSInputStream openFileForRead(final Path path, FileSystem.Statistics statistics) throws IOException{\n\t    LOG.debug(\"openFileForRead: \" + path);\n    FileStatus fileStatus = null;\n    try {\n        fileStatus = getFileStatus(path);\n    } catch (FileNotFoundException e) {\n        LOG.error(\"File not found: \" + path);\n        throw e;\n    }\n    return new SeaweedHadoopInputStream(fileStatus, statistics);\n}", "CodeBleu_score": 47.306321732465804}, {"code": "public FSInputStream openFileForRead(final Path path, FileSystem.Statistics statistics) throws IOException{\n\t    final String pathString = path.toString();\n    final String[] pathComponents = pathString.split(\"/\");\n    final String fileName = pathComponents[pathComponents.length - 1];\n    final String filePath = pathString.substring(0, pathString.length() - fileName.length() - 1);\n\n    final FileEntry fileEntry = lookupFileEntry(filePath, fileName);\n\n    if (fileEntry == null) {\n        throw new FileNotFoundException(pathString);\n    }\n\n    final String fileId = fileEntry.getFileId();\n    final long fileSize = fileEntry.getFileSize();\n\n    logger.info(\"Opening file: \" + pathString);\n\n    return new SeaweedHadoopInputStream(fileId, fileSize, statistics, path);\n}", "CodeBleu_score": 46.02427472841264}]}
{"instance_id": "36634cee9ed3", "generation_result": [{"code": "public void configure(JobConf conf){\n\t    this.conf = conf;\n    try {\n        host = InetAddress.getLocalHost().getHostName();\n    } catch (Exception e) {\n        host = \"localhost\";\n    }\n    numThreads = conf.getInt(\"mapred.map.tasks\", 1);\n    numFiles = conf.getInt(\"mapred.map.max.attempts\", 1);\n    executor = Executors.newFixedThreadPool(numThreads, new ThreadFactory(host));\n}", "CodeBleu_score": 48.974142203793704}, {"code": "public void configure(JobConf conf){\n\t\tthis.conf = conf;\n\ttry {\n\t\tthis.localHost = InetAddress.getLocalHost().getHostName();\n\t} catch (Exception e) {\n\t\tthis.localHost = \"localhost\";\n\t}\n\tthis.numThreadsPerMap = conf.getInt(\"mapred.map.tasks.per.node\", 1);\n\tthis.numFilesPerThread = conf.getInt(\"mapred.map.max.attempts\", 1);\n\tthis.threadPool = Executors.newFixedThreadPool(numThreadsPerMap, new ThreadFactory() {\n\t\tpublic Thread newThread(Runnable r) {\n\t\t\tThread t = new Thread(r);\n\t\t\tt.setDaemon(true);\n\t\t\treturn t;\n\t\t}\n\t});\n}", "CodeBleu_score": 52.87928885773112}, {"code": "public void configure(JobConf conf){\n\t    this.conf = conf;\n    try {\n        this.host = InetAddress.getLocalHost().getHostName();\n    } catch (Exception e) {\n        this.host = \"localhost\";\n    }\n    this.numThreads = conf.getInt(\"mapred.map.tasks.per.job\", 1);\n    this.filesPerThread = conf.getInt(\"mapred.files.per.thread\", 1);\n    this.threadPool = Executors.newFixedThreadPool(numThreads, new ThreadFactory(this.host));\n}", "CodeBleu_score": 43.28179479742087}]}
{"instance_id": "53cd9065153d", "generation_result": [{"code": "private void startTrashEmptier(URI uri, final Configuration conf) throws IOException{\n\t    String host = uri.getHost();\n    if (BgTaskUtil.isTrashEmptierRunning(host)) {\n        return;\n    }\n    // check if the trash emptier is already running for the specified host\n    // if not, it creates a superuser and initializes a JuiceFileSystemImpl instance as the superuser\n    // it then starts the trash emptier task using the initialized file system and the trash configuration, scheduling it to run every 10 minutes\n    // if any exception occurs, it throws an IOException indicating the failure to start the trash emptier\n    try {\n        UserGroupInformation.loginUserFromKeytab(conf.get(Constants.PRINCIPAL), conf.get(Constants.KEYTAB_FILE));\n        UserGroupInformation.setConfiguration(conf);\n        UserGroupInformation ugi = UserGroupInformation.getLoginUser();\n        ugi.doAs(new PrivilegedExceptionAction<Void>() {\n            @Override\n            public Void run() throws Exception {\n                try {\n                    // initialize a JuiceFileSystemImpl instance as the superuser\n                    JuiceFileSystemImpl fs = new JuiceFileSystemImpl();\n                    fs.initialize(uri, conf);\n                    // start the trash emptier task using the initialized file system and the trash configuration, scheduling it to run every 10 minutes\n                    BgTaskUtil.startTrashEmptier(host, fs, conf);\n                } catch (Exception e) {\n                    throw new IOException(e);\n                }\n                return null;\n            }\n        });\n    } catch (Exception e) {\n        throw new IOException(e);\n    }\n}", "CodeBleu_score": 40.58526811400128}, {"code": "private void startTrashEmptier(URI uri, final Configuration conf) throws IOException{\n\t  final String host = uri.getHost();\n  final String scheme = uri.getScheme();\n  if (host == null || scheme == null) {\n    throw new IOException(\"Invalid URI: \" + uri);\n  }\n  if (BgTaskUtil.isTrashEmptierRunning(host)) {\n    LOG.info(\"Trash emptier is already running for host: \" + host);\n    return;\n  }\n  try {\n    UserGroupInformation.loginUserFromKeytab(getConf().get(JUICEFS_KEYTAB_USERNAME), getConf().get(JUICEFS_KEYTAB_PATH));\n  } catch (IOException e) {\n    throw new IOException(\"Failed to login user from keytab: \" + getConf().get(JUICEFS_KEYTAB_PATH));\n  }\n  final UserGroupInformation ugi = UserGroupInformation.getLoginUser();\n  ugi.doAs(new PrivilegedExceptionAction<Void>() {\n    @Override\n    public Void run() throws Exception {\n      final String superuser = getConf().get(JUICEFS_SUPERUSER);\n      if (superuser == null) {\n        throw new IOException(\"Superuser is not specified\");\n      }\n      final String superpass = getConf().get(JUICEFS_SUPERPASS);\n      if (superpass == null) {\n        throw new IOException(\"Superpass is not specified\");\n      }\n      try {\n        FileSystem fs = FileSystem.get(uri, conf);\n        if (!(fs instanceof JuiceFileSystemImpl)) {\n          throw new IOException(\"Invalid file system: \" + fs.getClass().getName());\n        }\n        JuiceFileSystemImpl jfs = (JuiceFileSystemImpl) fs;\n        jfs.setConf(conf);\n        jfs.setUserGroupInformation(ugi);\n        jfs.setSuperuser(superuser);\n        jfs.setSuperpass(superpass);\n        jfs.setUri(uri);\n        jfs.setHost(host);\n        jfs.setScheme(scheme);\n        jfs.setTrashEnabled(true);\n        jfs.setTrashInterval(get", "CodeBleu_score": 35.52227060001164}, {"code": "private void startTrashEmptier(URI uri, final Configuration conf) throws IOException{\n\t    if (BgTaskUtil.isTrashEmptierRunning(uri)) {\n        LOG.info(\"Trash emptier is already running for URI: \" + uri);\n        return;\n    }\n\n    LOG.info(\"Starting trash emptier for URI: \" + uri);\n    try {\n        UserGroupInformation ugi = UserGroupInformation.createRemoteUser(conf.get(\"fs.juicefs.superuser\"));\n        ugi.doAs(new PrivilegedExceptionAction<Void>() {\n            @Override\n            public Void run() throws Exception {\n                try {\n                    Configuration superConf = new Configuration(conf);\n                    superConf.set(\"fs.defaultFS\", uri.toString());\n                    FileSystem fs = FileSystem.get(uri, superConf);\n                    BgTaskUtil.initTrashEmptier(fs);\n                    BgTaskUtil.startTrashEmptier(fs, conf);\n                } catch (Exception e) {\n                    LOG.error(\"Failed to start trash emptier\", e);\n                    throw new IOException(e);\n                }\n                return null;\n            }\n        });\n    } catch (Exception e) {\n        throw new IOException(e);\n    }\n}", "CodeBleu_score": 39.77996655676803}]}
{"instance_id": "ede797f6a8f2", "generation_result": [{"code": "public static void setContext(String context) throws Exception{\n\t    CallerContext callerContext = CallerContext.getCurrent();\n    if (callerContext == null) {\n        callerContext = new CallerContext.Builder(context).build();\n        CallerContext.setCurrent(callerContext);\n    } else {\n        if (!callerContext.isValid()) {\n            throw new Exception(\"Invalid caller context.\");\n        }\n        if (callerContext.getSignature() == null) {\n            callerContext = new CallerContext.Builder(callerContext).withSignature(context).build();\n            CallerContext.setCurrent(callerContext);\n        } else {\n            if (!callerContext.getSignature().contains(context)) {\n                callerContext = new CallerContext.Builder(callerContext).withSignature(callerContext.getSignature() + context).build();\n                CallerContext.setCurrent(callerContext);\n            }\n        }\n    }\n}", "CodeBleu_score": 44.53238563234686}, {"code": "public static void setContext(String context) throws Exception{\n\t  CallerContext callerContext = CallerContext.getCurrent();\n  if (callerContext == null) {\n    callerContext = new CallerContext.Builder(context).build();\n    CallerContext.setCurrent(callerContext);\n  } else {\n    if (callerContext.getSignature() == null) {\n      callerContext = new CallerContext.Builder(callerContext).append(context).build();\n      CallerContext.setCurrent(callerContext);\n    } else {\n      if (!callerContext.toString().contains(context)) {\n        callerContext = new CallerContext.Builder(callerContext).append(context).build();\n        CallerContext.setCurrent(callerContext);\n      }\n    }\n  }\n}", "CodeBleu_score": 45.72104686947629}, {"code": "public static void setContext(String context) throws Exception{\n\t  CallerContext callerContext = CallerContext.getCurrent();\n  if (callerContext != null) {\n    if (callerContext.isValid()) {\n      if (callerContext.getSignature() == null) {\n        callerContext.setSignature(context);\n      } else if (!callerContext.getSignature().contains(context)) {\n        callerContext.appendSignature(context);\n      }\n    } else {\n      callerContext = new CallerContext.Builder(context).build();\n    }\n  } else {\n    callerContext = new CallerContext.Builder(context).build();\n  }\n  CallerContext.setCurrent(callerContext);\n}", "CodeBleu_score": 42.394717358061776}]}
{"instance_id": "56968a526f6a", "generation_result": [{"code": "Status HDFS::remove_file(const URI& uri){\n\t  auto status = hdfsDelete(fs_, uri.c_str());\n  if (status == -1) {\n    return LOG_STATUS(Status::HDFSError(\n        std::string(\"Cannot remove file '\") + uri.c_str() + \"'\"));\n  }\n\n  return Status::Ok();\n}", "CodeBleu_score": 44.867637471860526}, {"code": "Status HDFS::remove_file(const URI& uri){\n\t  auto status = hdfsDelete(fs_, uri.c_str());\n  if (status != 0) {\n    return LOG_STATUS(Status::HdfsError(\n        std::string(\"Cannot delete file '\") + uri.c_str() + \"'\"));\n  }\n\n  return Status::Ok();\n}", "CodeBleu_score": 46.03711310564054}, {"code": "Status HDFS::remove_file(const URI& uri){\n\t  // TODO: Implement\n  return Status::OK();\n}", "CodeBleu_score": 7.412438854187908}]}
{"instance_id": "f33adb3e8cb6", "generation_result": [{"code": "Status HDFS::sync(const URI& uri){\n\t  try {\n    hdfsFS fs = hdfsConnect(uri.getHost().c_str(), uri.getPort());\n    if (fs == NULL) {\n      return LOG_STATUS(Status::HdfsError(\n          std::string(\"Could not connect to HDFS file system\")));\n    }\n\n    hdfsFile file = hdfsOpenFile(fs, uri.getPath().c_str(),\n                                 O_WRONLY | O_APPEND, 0, 0, 0);\n    if (file == NULL) {\n      hdfsDisconnect(fs);\n      return LOG_STATUS(Status::HdfsError(\n          std::string(\"Could not open file\") + uri.getPath()));\n    }\n\n    int err = hdfsFlush(fs, file);\n    if (err) {\n      hdfsCloseFile(fs, file);\n      hdfsDisconnect(fs);\n      return LOG_STATUS(Status::HdfsError(\n          std::string(\"Could not flush file\") + uri.getPath()));\n    }\n\n    err = hdfsCloseFile(fs, file);\n    if (err) {\n      hdfsDisconnect(fs);\n      return LOG_STATUS(Status::HdfsError(\n          std::string(\"Could not close file\") + uri.getPath()));\n    }\n\n    hdfsDisconnect(fs);\n    return Status::Ok();\n  } catch (...) {\n    return LOG_STATUS(Status::HdfsError(\n        std::string(\"Could not sync file\") + uri.getPath()));\n  }\n\n  return Status::Ok();\n}", "CodeBleu_score": 53.68855783582458}, {"code": "Status HDFS::sync(const URI& uri){\n\t  if (!uri.is_hdfs()) {\n    return Status::Error(\"Sync only works for HDFS URI\");\n  }\n\n  std::string uri_path = uri.to_string();\n  if (uri_path.back() == '/') {\n    return Status::Error(\"Sync only works for files, not directories\");\n  }\n\n  auto* fs = get_fs(uri);\n  if (fs == nullptr) {\n    return Status::Error(\"File system not found\");\n  }\n\n  std::string path = uri_path.substr(fs->uri.size());\n\n  hdfsFile file = nullptr;\n  try {\n    file = hdfsOpenFile(fs->fs, path.c_str(), O_WRONLY | O_APPEND, 0, 0, 0);\n    if (file == nullptr) {\n      return Status::Error(\"Failed to open file\");\n    }\n\n    int flush_result = hdfsFlush(fs->fs, file);\n    if (flush_result != 0) {\n      return Status::Error(\"Failed to flush file\");\n    }\n\n    int close_result = hdfsCloseFile(fs->fs, file);\n    if (close_result != 0) {\n      return Status::Error(\"Failed to close file\");\n    }\n\n    return Status::Ok();\n  } catch (const std::exception& e) {\n    return Status::Error(e.what());\n  }\n}", "CodeBleu_score": 47.993221210341886}, {"code": "Status HDFS::sync(const URI& uri){\n\t  // TODO(dong): Implement\n  return Status::OK();\n}", "CodeBleu_score": 5.146323895924115}]}
{"instance_id": "893c46ab9675", "generation_result": [{"code": "Status HDFS::file_size(const URI& uri, uint64_t* nbytes){\n\t  *nbytes = 0;\n\n  hdfsFileInfo* info = hdfsGetPathInfo(fs_, uri.c_str());\n  if(info == NULL) {\n    LOG_STATUS(\n        Status::HdfsError(\n            std::string(\"Could not get file information for file '\") +\n            uri.c_str() + \"'.\"));\n    return Status::HdfsError(\n        std::string(\"Could not get file information for file '\") + uri.c_str());\n  }\n\n  if(info->mSize == -1) {\n    hdfsFreeFileInfo(info, 1);\n    LOG_STATUS(\n        Status::HdfsError(\n            std::string(\"Could not get file size for file '\") + uri.c_str() +\n            \"'.\"));\n    return Status::HdfsError(\n        std::string(\"Could not get file size for file '\") + uri.c_str());\n  }\n\n  *nbytes = info->mSize;\n  hdfsFreeFileInfo(info, 1);\n\n  return Status::Ok();\n}", "CodeBleu_score": 46.71380559110471}, {"code": "Status HDFS::file_size(const URI& uri, uint64_t* nbytes){\n\t  // Check the input parameters.\n  if (nbytes == nullptr)\n    return LOG_STATUS(Status::HDFSError(\n        \"Null pointer passed for file size argument.\"));\n\n  // Connect to file system.\n  hdfsFS fs;\n  RETURN_NOT_OK(hdfs_connect(&fs, uri.to_string()));\n\n  // Get the file info.\n  hdfsFileInfo* info = hdfsGetPathInfo(fs, uri.c_str());\n  if (info == nullptr) {\n    hdfsDisconnect(fs);\n    return LOG_STATUS(Status::HDFSError(\n        std::string(\"Failed to get file info for: \" + uri.to_string())));\n  }\n\n  // Check if the path is a file.\n  if (!info->mKind) {\n    hdfsFreeFileInfo(info, 1);\n    hdfsDisconnect(fs);\n    return LOG_STATUS(Status::HDFSError(\n        std::string(\"Path is not a file: \" + uri.to_string())));\n  }\n\n  // Set the file size.\n  *nbytes = info->mSize;\n\n  // Free file info.\n  hdfsFreeFileInfo(info, 1);\n\n  // Disconnect from file system.\n  hdfsDisconnect(fs);\n\n  return Status::Ok();\n}", "CodeBleu_score": 50.816792188207195}, {"code": "Status HDFS::file_size(const URI& uri, uint64_t* nbytes){\n\t  // Check the URI\n  if (uri.is_invalid()) {\n    return LOG_STATUS(Status::HDFSError(\n        std::string(\"Cannot get file size; Invalid URI '\") + uri.c_str() +\n        std::string(\"'\")));\n  }\n\n  // Connect to file system\n  hdfsFS fs = hdfsConnect(uri.c_str(), 0);\n  if (fs == nullptr) {\n    return LOG_STATUS(Status::HDFSError(\n        std::string(\"Cannot get file size; Error connecting to HDFS file \"\n                    \"system for URI '\") +\n        uri.c_str() + std::string(\"'\")));\n  }\n\n  // Get the file information\n  hdfsFileInfo* info = hdfsGetPathInfo(fs, uri.c_str());\n  if (info == nullptr) {\n    hdfsDisconnect(fs);\n    return LOG_STATUS(Status::HDFSError(\n        std::string(\"Cannot get file size; Error retrieving file information \"\n                    \"for URI '\") +\n        uri.c_str() + std::string(\"'\")));\n  }\n\n  // Check if the path is a file\n  if (!info->mKind) {\n    hdfsFreeFileInfo(info, 1);\n    hdfsDisconnect(fs);\n    return LOG_STATUS(Status::HDFSError(\n        std::string(\"Cannot get file size; URI '\") + uri.c_str() +\n        std::string(\"' is not a file\")));\n  }\n\n  // Set the file size\n  *nbytes = info->mSize;\n\n  // Free the file information\n  hdfsFreeFileInfo(info, 1);\n\n  // Disconnect from file system\n  hdfsDisconnect(fs);\n\n  // Success\n  return Status::Ok();\n}", "CodeBleu_score": 48.213738910783256}]}
{"instance_id": "3da0b4d8ae16", "generation_result": [{"code": "public static Pair<String, String> getHbaseConfig(String hbaseCfgString){\n\t    String quorum = HConstants.LOCALHOST;\n    String znodeParent = HConstants.DEFAULT_ZOOKEEPER_ZNODE_PARENT;\n    if (StringUtils.isNotBlank(hbaseCfgString)) {\n        String[] cfg = hbaseCfgString.split(\";\");\n        for (String s : cfg) {\n            String[] kv = s.split(\"=\");\n            if (kv.length != 2) {\n                throw new IllegalArgumentException(\"HBase configuration string is invalid.  Expected key=value pairs separated by semicolons.\");\n            }\n            if (kv[0].equals(HConstants.ZOOKEEPER_QUORUM)) {\n                quorum = kv[1];\n            } else if (kv[0].equals(HConstants.ZOOKEEPER_ZNODE_PARENT)) {\n                znodeParent = kv[1];\n            }\n        }\n    }\n    if (quorum.contains(\":\")) {\n        // quorum already contains the port number\n        return new Pair<>(quorum, znodeParent);\n    }\n    // add port number to quorum\n    return new Pair<>(quorum + \":\" + HConstants.DEFAULT_ZOOKEEPER_CLIENT_PORT, znodeParent);\n}", "CodeBleu_score": 33.211868030276506}, {"code": "public static Pair<String, String> getHbaseConfig(String hbaseCfgString){\n\t    String[] hbaseCfgArray = hbaseCfgString.split(\";\");\n    String quorum = null;\n    String znodeParent = null;\n    for (String hbaseCfg : hbaseCfgArray) {\n        if (hbaseCfg.startsWith(\"hbase.zookeeper.quorum\")) {\n            quorum = hbaseCfg.substring(hbaseCfg.indexOf(\"=\") + 1);\n        } else if (hbaseCfg.startsWith(\"hbase.zookeeper.znode.parent\")) {\n            znodeParent = hbaseCfg.substring(hbaseCfg.indexOf(\"=\") + 1);\n        }\n    }\n    if (quorum == null) {\n        throw AddaxException.asAddaxException(HBase11XReaderErrorCode.ILLEGAL_VALUE,\n                \"HBase\u914d\u7f6e\u4e2d\u5fc5\u987b\u5305\u542bhbase.zookeeper.quorum\u5c5e\u6027\");\n    }\n    if (znodeParent == null) {\n        znodeParent = HConstants.DEFAULT_ZOOKEEPER_ZNODE_PARENT;\n    }\n    return new Pair<>(quorum, znodeParent);\n}", "CodeBleu_score": 33.384798294974225}, {"code": "public static Pair<String, String> getHbaseConfig(String hbaseCfgString){\n\t    String[] hbaseCfgArray = hbaseCfgString.split(\";\");\n    String quorum = null;\n    String znodeParent = null;\n    for (String cfg : hbaseCfgArray) {\n        String[] cfgArray = cfg.split(\"=\");\n        if (cfgArray.length != 2) {\n            throw new IllegalArgumentException(\"HBase configuration string must be in the format of 'key1=value1;key2=value2'\");\n        }\n        String key = cfgArray[0];\n        String value = cfgArray[1];\n        if (key.equals(HConstants.ZOOKEEPER_QUORUM)) {\n            if (value.contains(\":\")) {\n                quorum = value;\n            } else {\n                quorum = value + \":\" + HConstants.DEFAULT_ZOOKEPER_CLIENT_PORT;\n            }\n        } else if (key.equals(HConstants.ZOOKEEPER_ZNODE_PARENT)) {\n            znodeParent = value;\n        }\n    }\n    if (quorum == null) {\n        throw new IllegalArgumentException(\"HBase configuration string must contain a Zookeeper quorum\");\n    }\n    if (znodeParent == null) {\n        znodeParent = HConstants.DEFAULT_ZOOKEEPER_ZNODE_PARENT;\n    }\n    return new Pair<>(quorum, znodeParent);\n}", "CodeBleu_score": 33.929262426266106}]}
{"instance_id": "860cae2bb7f4", "generation_result": [{"code": "public static void validateConfig(HbaseSQLWriterConfig cfg){\n\t    String tableName = cfg.getTable();\n    String[] tableNameParts = tableName.split(\"\\\\.\");\n    String tableNameWithoutNamespace = tableNameParts[tableNameParts.length - 1];\n    String tableNamespace = tableNameParts[0];\n    String jdbcUrl = cfg.getJdbcUrl();\n    String username = cfg.getUsername();\n    String password = cfg.getPassword();\n    String driver = cfg.getDriver();\n    String[] columnNames = cfg.getColumn();\n    String[] columnTypes = cfg.getColumnType();\n    String[] columnValue = cfg.getColumnValue();\n    String[] columnValueType = cfg.getColumnValueType();\n    String[] columnValueDefault = cfg.getColumnValueDefault();\n    String[] columnValueUpdate = cfg.getColumnValueUpdate();\n    String[] columnValueUpdateType = cfg.getColumnValueUpdateType();\n    String[] columnValueUpdateDefault = cfg.getColumnValueUpdateDefault();\n    String[] columnValueUpdateDefaultType = cfg.getColumnValueUpdateDefaultType();\n    String[] columnValueInsert = cfg.getColumnValueInsert();\n    String[] columnValueInsertType = cfg.getColumnValueInsertType();\n    String[] columnValueInsertDefault = cfg.getColumnValueInsertDefault();\n    String[] columnValueInsertDefaultType = cfg.getColumnValueInsertDefaultType();\n    String[] columnValueDelete = cfg.getColumnValueDelete();\n    String[] columnValueDeleteType = cfg.getColumnValueDeleteType();\n    String[] columnValueDeleteDefault = cfg.getColumnValueDeleteDefault();\n    String[] columnValueDeleteDefaultType = cfg.getColumnValueDeleteDefaultType();\n    String[] columnValueFilter = cfg.getColumnValueFilter();\n    String[] columnValueFilterType = cfg.getColumnValueFilterType();\n    String[] columnValueFilterDefault = cfg.getColumnValueFilterDefault();\n    String[] columnValueFilterDefaultType = cfg.getColumnValueFilterDefaultType();\n    String[] columnValueFilterUpdate = cfg.getColumnValueFilterUpdate();\n    String[] columnValueFilterUpdateType = cfg.getColumnValueFilterUpdateType();\n", "CodeBleu_score": 23.500421172610224}, {"code": "public static void validateConfig(HbaseSQLWriterConfig cfg){\n\t    String jdbcUrl = cfg.getJdbcUrl();\n    String tableName = cfg.getTableName();\n    String username = cfg.getUsername();\n    String password = cfg.getPassword();\n    String[] tableNameArray = tableName.split(\"\\\\.\");\n    if (tableNameArray.length != 2) {\n        throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.ILLEGAL_VALUE,\n                String.format(\"The tableName configuration is illegal. The tableName should be like 'namespace.tableName'\"));\n    }\n    String namespace = tableNameArray[0];\n    String table = tableNameArray[1];\n    String zkQuorum = cfg.getZkQuorum();\n    String zkParent = cfg.getZkParent();\n    String kerberosPrincipal = cfg.getKerberosPrincipal();\n    String kerberosKeytabFilePath = cfg.getKerberosKeytabFilePath();\n    String kerberosAuthenticationType = cfg.getKerberosAuthenticationType();\n    String kerberosConfFilePath = cfg.getKerberosConfFilePath();\n    String kerberosKrb5FilePath = cfg.getKerberosKrb5FilePath();\n    String kerberosLoginUserKeytabFilePath = cfg.getKerberosLoginUserKeytabFilePath();\n    String kerberosLoginUserPrincipal = cfg.getKerberosLoginUserPrincipal();\n    String kerberosLoginUserKey = cfg.getKerberosLoginUserKey();\n    String kerberosLoginUser = cfg.getKerberosLoginUser();\n    String kerberosLoginUserPassword = cfg.getKerberosLoginUserPassword();\n    String kerberosLoginUserKrb5FilePath = cfg.getKerberosLoginUserKrb5FilePath();\n    String kerberosLoginUserRealm = cfg.getKerberosLoginUserRealm();\n    String kerberosLoginUserUseKeytab = cfg.getKerberosLoginUserUseKeytab();\n    String kerberosLoginUserStoreKey = cfg.getKer", "CodeBleu_score": 27.307449415333963}, {"code": "public static void validateConfig(HbaseSQLWriterConfig cfg){\n\t    String namespace = cfg.getNamespace();\n    String tableName = cfg.getTable();\n    String zkQuorum = cfg.getZkQuorum();\n    String zkRoot = cfg.getZkRoot();\n    String username = cfg.getUsername();\n    String password = cfg.getPassword();\n    String driver = cfg.getDriver();\n    String jdbcUrl = cfg.getJdbcUrl();\n    String hbaseConfig = cfg.getHbaseConfig();\n    String column = cfg.getColumn();\n    String[] columns = column.split(\",\");\n    String[] columnTypes = cfg.getColumnType().split(\",\");\n    String[] columnNames = cfg.getColumnName().split(\",\");\n\n    String[] hbaseColumnTypes = new String[columns.length];\n    String[] hbaseColumnNames = new String[columns.length];\n    String[] hbaseColumnFamilies = new String[columns.length];\n    String[] hbaseColumnQualifiers = new String[columns.length];\n    String[] hbaseColumnIndexes = new String[columns.length];\n\n    try {\n        // 1. Validate the JDBC URL\n        if (StringUtils.isBlank(jdbcUrl)) {\n            throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.ILLEGAL_VALUE,\n                    HbaseSQLWriterErrorCode.ILLEGAL_VALUE.getDescription());\n        }\n        // 2. Validate the table name\n        if (StringUtils.isBlank(tableName)) {\n            throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.ILLEGAL_VALUE,\n                    HbaseSQLWriterErrorCode.ILLEGAL_VALUE.getDescription());\n        }\n        // 3. Validate the HBase configuration\n        if (StringUtils.isBlank(hbaseConfig)) {\n            throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.ILLEGAL_VALUE,\n                    HbaseSQLWriterErrorCode.ILLEGAL_VALUE.getDescription());\n        }\n        // 4. Validate the columns\n        if (columns.length != columnTypes.length", "CodeBleu_score": 32.54110652157001}]}
{"instance_id": "61721c327cf6", "generation_result": [{"code": "private static void kerberosAuthentication(String kerberosPrincipal, String kerberosKeytabFilePath){\n\t    if (StringUtils.isNotBlank(kerberosPrincipal) && StringUtils.isNotBlank(kerberosKeytabFilePath)) {\n        UserGroupInformation.setConfiguration(HBaseConstant.hbaseConfiguration);\n        UserGroupInformation.loginUserFromKeytab(kerberosPrincipal, kerberosKeytabFilePath);\n    }\n}", "CodeBleu_score": 25.082857301495732}, {"code": "private static void kerberosAuthentication(String kerberosPrincipal, String kerberosKeytabFilePath){\n\t    if (StringUtils.isNotBlank(kerberosPrincipal) && StringUtils.isNotBlank(kerberosKeytabFilePath)) {\n        UserGroupInformation.setConfiguration(HBaseConstant.hbaseConfiguration);\n        try {\n            UserGroupInformation.loginUserFromKeytab(kerberosPrincipal, kerberosKeytabFilePath);\n        } catch (IOException e) {\n            String message = String.format(\"kerberos authentication failed, please check the kerberosPrincipal[%s] and kerberosKeytabFilePath[%s]\", kerberosPrincipal, kerberosKeytabFilePath);\n            LOG.error(message);\n            throw AddaxException.asAddaxException(HBase11XReaderErrorCode.KERBEROS_LOGIN_ERROR, e);\n        }\n    }\n}", "CodeBleu_score": 68.41364061711903}, {"code": "private static void kerberosAuthentication(String kerberosPrincipal, String kerberosKeytabFilePath){\n\t    if (StringUtils.isNotBlank(kerberosPrincipal) && StringUtils.isNotBlank(kerberosKeytabFilePath)) {\n        UserGroupInformation.setConfiguration(hbaseConfiguration);\n        try {\n            UserGroupInformation.loginUserFromKeytab(kerberosPrincipal, kerberosKeytabFilePath);\n        } catch (IOException e) {\n            throw AddaxException.asAddaxException(Hbase11xWriterErrorCode.KERBEROS_LOGIN_ERROR, e);\n        }\n    }\n}", "CodeBleu_score": 44.05607463487297}]}
{"instance_id": "9ceb7f0bb717", "generation_result": [{"code": "public static Map<String, ThinClientPTable.ThinClientPColumn> parseColType(ResultSet rs)\n            throws SQLException{\n\t        ResultSetMetaData rsmd = rs.getMetaData();\n        int columnCount = rsmd.getColumnCount();\n        Map<String, ThinClientPTable.ThinClientPColumn> columns = new HashMap<>();\n        for (int i = 1; i <= columnCount; i++) {\n            String name = rsmd.getColumnLabel(i);\n            String type = rsmd.getColumnTypeName(i);\n            if (StringUtils.isBlank(name) || StringUtils.isBlank(type)) {\n                throw new SQLException(\"Column name or type is null\");\n            }\n            columns.put(name, new ThinClientPTable.ThinClientPColumn(name, type));\n        }\n        return columns;\n    }", "CodeBleu_score": 39.50606006071359}, {"code": "public static Map<String, ThinClientPTable.ThinClientPColumn> parseColType(ResultSet rs)\n            throws SQLException{\n\t        ResultSetMetaData metaData = rs.getMetaData();\n        int columnCount = metaData.getColumnCount();\n        Map<String, ThinClientPTable.ThinClientPColumn> columnMap = new HashMap<>();\n        for (int i = 1; i <= columnCount; i++) {\n            String columnName = metaData.getColumnLabel(i);\n            if (columnName == null) {\n                throw new SQLException(\"Column name is null\");\n            }\n            String columnType = metaData.getColumnTypeName(i);\n            if (columnType == null) {\n                throw new SQLException(\"Column type is null\");\n            }\n            PDataType pDataType = PDataType.fromSqlTypeName(columnType);\n            if (pDataType == null) {\n                throw new SQLException(\"Column type is null\");\n            }\n            ThinClientPTable.ThinClientPColumn column = new ThinClientPTable.ThinClientPColumn(columnName, pDataType);\n            columnMap.put(columnName, column);\n        }\n        return columnMap;\n    }", "CodeBleu_score": 44.83637339592269}, {"code": "public static Map<String, ThinClientPTable.ThinClientPColumn> parseColType(ResultSet rs)\n            throws SQLException{\n\t        Map<String, ThinClientPTable.ThinClientPColumn> colMap = new HashMap<>();\n        ResultSetMetaData rsmd = rs.getMetaData();\n        int colCount = rsmd.getColumnCount();\n        for (int i = 1; i <= colCount; i++) {\n            String colName = rsmd.getColumnLabel(i);\n            if (colName == null) {\n                colName = rsmd.getColumnName(i);\n            }\n            if (colName == null) {\n                throw new SQLException(\"Column name is null\");\n            }\n            int colType = rsmd.getColumnType(i);\n            PDataType pDataType = PDataType.fromTypeId(colType);\n            if (pDataType == null) {\n                throw new SQLException(\"Unrecognized column type: \" + colType);\n            }\n            colMap.put(colName, new ThinClientPTable.ThinClientPColumn(colName, pDataType));\n        }\n        return colMap;\n    }", "CodeBleu_score": 51.07007229058256}]}
{"instance_id": "247fc8882f6f", "generation_result": [{"code": "public static void truncateTable(Connection conn, String tableName){\n\t    // check if the table exists\n    if (!isTableExists(conn, tableName)) {\n        throw AddaxException.asAddaxException(HBaseConstant.ERROR_HBASE_TABLE_NOT_EXISTS,\n                String.format(\"HBase table %s does not exist.\", tableName));\n    }\n    try {\n        // disable the table\n        disableTable(conn, tableName);\n        // truncate the table\n        truncateTable(conn, tableName);\n    } finally {\n        // close the Admin instance\n        closeAdmin(conn);\n    }\n}", "CodeBleu_score": 19.737962301578243}, {"code": "public static void truncateTable(Connection conn, String tableName){\n\t    try {\n        if (conn == null) {\n            throw AddaxException.asAddaxException(HBase11xSQLWriterErrorCode.ILLEGAL_VALUE,\n                    String.format(\"The connection is null, please check.\"));\n        }\n        if (StringUtils.isBlank(tableName)) {\n            throw AddaxException.asAddaxException(HBase11xSQLWriterErrorCode.ILLEGAL_VALUE,\n                    String.format(\"The tableName is null or empty, please check.\"));\n        }\n        Pair<PhoenixConnection, Admin> phoenixConnectionAndAdmin = getPhoenixConnectionAndAdmin(conn);\n        if (phoenixConnectionAndAdmin.getSecond() == null) {\n            throw AddaxException.asAddaxException(HBase11xSQLWriterErrorCode.ILLEGAL_VALUE,\n                    String.format(\"The admin is null, please check.\"));\n        }\n        if (phoenixConnectionAndAdmin.getSecond().tableExists(TableName.valueOf(tableName))) {\n            phoenixConnectionAndAdmin.getSecond().disableTable(TableName.valueOf(tableName));\n            phoenixConnectionAndAdmin.getSecond().truncateTable(TableName.valueOf(tableName), true);\n            LOG.debug(\"The table [{}] has been truncated.\", tableName);\n        } else {\n            LOG.debug(\"The table [{}] does not exist.\", tableName);\n        }\n    } catch (IOException | SQLException e) {\n        throw AddaxException.asAddaxException(HBase11xSQLWriterErrorCode.TRUNCATE_TABLE_ERROR,\n                String.format(\"Error occurs while truncating table [%s].\", tableName), e);\n    } finally {\n        closeConnection(conn);\n    }\n}", "CodeBleu_score": 38.478093368605556}, {"code": "public static void truncateTable(Connection conn, String tableName){\n\t    try {\n        PhoenixConnection phoenixConnection = conn.unwrap(PhoenixConnection.class);\n        Admin admin = phoenixConnection.getQueryServices().getAdmin();\n        TableName hTableName = TableName.valueOf(tableName);\n        if (!admin.tableExists(hTableName)) {\n            throw AddaxException.asAddaxException(HBaseErrorCode.HBASE_0003, String.format(\"The table %s does not exist.\", tableName));\n        }\n        admin.disableTable(hTableName);\n        admin.truncateTable(hTableName, true);\n        LOG.debug(\"Successfully truncated table {}\", tableName);\n    } catch (IOException | SQLException e) {\n        throw AddaxException.asAddaxException(HBaseErrorCode.HBASE_0004, String.format(\"Failed to truncate table %s. Cause: %s\", tableName, e.getMessage()));\n    } finally {\n        try {\n            if (conn != null) {\n                conn.close();\n            }\n        } catch (SQLException e) {\n            LOG.warn(\"Failed to close connection. Cause: {}\", e.getMessage());\n        }\n    }\n}", "CodeBleu_score": 49.53912795971848}]}
{"instance_id": "ac87e1b9a54e", "generation_result": [{"code": "private void addSourceFileByType(String filePath){\n\t    if (filePath.endsWith(RCFILE_SUFFIX)) {\n        sourceFiles.add(filePath);\n    } else if (filePath.endsWith(SEQUENCEFILE_SUFFIX)) {\n        sourceFiles.add(filePath);\n    } else if (filePath.endsWith(ORCFILE_SUFFIX)) {\n        sourceFiles.add(filePath);\n    } else if (filePath.endsWith(PARQUETFILE_SUFFIX)) {\n        sourceFiles.add(filePath);\n    } else if (filePath.endsWith(JSONFILE_SUFFIX)) {\n        sourceFiles.add(filePath);\n    } else {\n        throw AddaxException.asAddaxException(\n                StorageReaderErrorCode.ILLEGAL_VALUE,\n                String.format(\"\u60a8\u914d\u7f6e\u7684\u76ee\u5f55 %s \u4e0b\u6587\u4ef6\u540e\u7f00\u540d\u4e0d\u5408\u6cd5, \u8bf7\u68c0\u67e5\u60a8\u7684\u914d\u7f6e\u5e76\u4f5c\u51fa\u4fee\u6539.\", filePath));\n    }\n}", "CodeBleu_score": 22.934358662132592}, {"code": "private void addSourceFileByType(String filePath){\n\t    if (fileType.equalsIgnoreCase(Key.RCFILE)) {\n        if (filePath.endsWith(Key.RCFILE_SUFFIX)) {\n            sourceFiles.add(filePath);\n            LOG.info(\"add source file: {}\", filePath);\n        } else {\n            LOG.error(\"unsupported file type: {}\", filePath);\n            throw AddaxException.asAddaxException(\n                    StorageReaderErrorCode.ILLEGAL_VALUE,\n                    String.format(\"unsupported file type: %s\", filePath));\n        }\n    } else if (fileType.equalsIgnoreCase(Key.SEQUENCE_FILE)) {\n        if (filePath.endsWith(Key.SEQUENCE_FILE_SUFFIX)) {\n            sourceFiles.add(filePath);\n            LOG.info(\"add source file: {}\", filePath);\n        } else {\n            LOG.error(\"unsupported file type: {}\", filePath);\n            throw AddaxException.asAddaxException(\n                    StorageReaderErrorCode.ILLEGAL_VALUE,\n                    String.format(\"unsupported file type: %s\", filePath));\n        }\n    } else if (fileType.equalsIgnoreCase(Key.ORCFILE)) {\n        if (filePath.endsWith(Key.ORCFILE_SUFFIX)) {\n            sourceFiles.add(filePath);\n            LOG.info(\"add source file: {}\", filePath);\n        } else {\n            LOG.error(\"unsupported file type: {}\", filePath);\n            throw AddaxException.asAddaxException(\n                    StorageReaderErrorCode.ILLEGAL_VALUE,\n                    String.format(\"unsupported file type: %s\", filePath));\n        }\n    } else if (fileType.equalsIgnoreCase(Key.PARQUETFILE)) {\n        if (filePath.endsWith(Key.PARQUETFILE_SUFFIX)) {\n            sourceFiles.add(filePath);\n            LOG.info(\"add source file: {}\", filePath);\n        } else {\n            LOG.error(\"unsupported file type: {}\", filePath);\n            throw AddaxException.asAddaxException(\n                    StorageReader", "CodeBleu_score": 33.707024452938235}, {"code": "private void addSourceFileByType(String filePath){\n\t    if (filePath.endsWith(\".rc\")) {\n        LOG.info(\"Adding RC file: {}\", filePath);\n        sourceFiles.add(filePath);\n    } else if (filePath.endsWith(\".orc\")) {\n        LOG.info(\"Adding ORC file: {}\", filePath);\n        sourceFiles.add(filePath);\n    } else if (filePath.endsWith(\".parquet\")) {\n        LOG.info(\"Adding PARQUET file: {}\", filePath);\n        sourceFiles.add(filePath);\n    } else if (filePath.endsWith(\".seq\")) {\n        LOG.info(\"Adding SEQ file: {}\", filePath);\n        sourceFiles.add(filePath);\n    } else if (filePath.endsWith(\".json\")) {\n        LOG.info(\"Adding JSON file: {}\", filePath);\n        sourceFiles.add(filePath);\n    } else {\n        LOG.error(\"Unsupported file type: {}\", filePath);\n        throw AddaxException.asAddaxException(\n                StorageReaderErrorCode.ILLEGAL_VALUE,\n                String.format(\"Unsupported file type: %s\", filePath));\n    }\n}", "CodeBleu_score": 22.030330363593208}]}
{"instance_id": "5e6a66d06162", "generation_result": [{"code": "public void sequenceFileStartRead(String sourceSequenceFilePath, Configuration readerSliceConfig,\n            RecordSender recordSender, TaskPluginCollector taskPluginCollector){\n\t    String encoding = readerSliceConfig.getString(Key.ENCODING, Constant.DEFAULT_ENCODING);\n    String nullFormat = readerSliceConfig.getString(Key.NULL_FORMAT, Constant.DEFAULT_NULL_FORMAT);\n    List<Configuration> column = readerSliceConfig.getListConfiguration(COLUMN);\n    List<String> allColumns;\n    if (column == null) {\n        allColumns = new ArrayList<>();\n    } else {\n        allColumns = StorageReaderUtil.getListFromConfiguration(column);\n    }\n    Set<String> nullColumns = StorageReaderUtil.getNullColumnSet(allColumns, nullFormat);\n    int batchSize = readerSliceConfig.getInt(Key.BATCH_SIZE, Constant.DEFAULT_BATCH_SIZE);\n    String defaultFs = readerSliceConfig.getString(Key.DEFAULT_FS, \"\");\n    String hadoopKerberos = readerSliceConfig.getString(Key.HADOOP_SECURITY_AUTHENTICATION, \"\");\n    String kerberosKeytabFilePath = readerSliceConfig.getString(Key.KERBEROS_KEYTAB_FILE_PATH);\n    String kerberosPrincipal = readerSliceConfig.getString(Key.KERBEROS_PRINCIPAL);\n    String hadoopConfig = readerSliceConfig.getString(Key.HADOOP_CONFIG);\n    String charsetName = readerSliceConfig.getString(Key.CHARSET, Constant.DEFAULT_CHARSET);\n    String dateFormat = readerSliceConfig.getString(Key.DATE_FORMAT, Constant.DEFAULT_DATE_FORMAT);\n    String timestampFormat = readerSliceConfig.getString(Key.TIMESTAMP_FORMAT, Constant.DEFAULT_TIMESTAMP_FORMAT);\n    String dateTimeFormat = readerSliceConfig.getString(Key.DATETIME_FORMAT, Constant.DEFAULT_DATETIME_FORMAT);\n    String decimalFormat = readerSliceConfig.getString(Key.DECIMAL_FORMAT, Constant.DEFAULT_DECIMAL_FORMAT);\n    String maxColumnLength = readerSliceConfig.getString(Key.MAX_COLUMN_LENGTH, Constant.DEFAULT_MAX_COLUMN_LENGTH);", "CodeBleu_score": 25.913033325745616}, {"code": "public void sequenceFileStartRead(String sourceSequenceFilePath, Configuration readerSliceConfig,\n            RecordSender recordSender, TaskPluginCollector taskPluginCollector){\n\t        String nullFormat = readerSliceConfig.getString(Key.NULL_FORMAT);\n        if (StringUtils.isBlank(nullFormat)) {\n            throw AddaxException.asAddaxException(\n                    StorageReaderErrorCode.REQUIRED_VALUE,\n                    \"\u60a8\u9700\u8981\u6307\u5b9a [\" + Key.NULL_FORMAT + \"] \u7684\u503c\");\n        }\n        List<Configuration> columns = readerSliceConfig.getListConfiguration(COLUMN);\n        List<String> columnNames = new ArrayList<>();\n        for (Configuration eachColumnConf : columns) {\n            String columnName = eachColumnConf.getString(Key.NAME);\n            columnNames.add(columnName);\n        }\n        Set<String> allColumnName = new HashSet<>();\n        allColumnName.addAll(columnNames);\n        if (null != nullFormat) {\n            String[] nullFormats = nullFormat.split(\"\\", "CodeBleu_score": 28.147021894401952}, {"code": "public void sequenceFileStartRead(String sourceSequenceFilePath, Configuration readerSliceConfig,\n            RecordSender recordSender, TaskPluginCollector taskPluginCollector){\n\t        String encoding = readerSliceConfig.getString(Key.ENCODING, Constant.DEFAULT_ENCODING);\n        String nullFormat = readerSliceConfig.getString(Key.NULL_FORMAT);\n        List<Configuration> columns = readerSliceConfig.getListConfiguration(COLUMN);\n        Set<String> columnSet = new HashSet<>();\n        for (Configuration eachColumnConf : columns) {\n            eachColumnConf.getNecessaryValue(Key.NAME, SequenceFileReaderErrorCode.REQUIRED_VALUE);\n            eachColumnConf.getNecessaryValue(Key.TYPE, SequenceFileReaderErrorCode.REQUIRED_VALUE);\n            String columnName = eachColumnConf.getString(Key.NAME);\n            columnSet.add(columnName);\n        }\n        if (columnSet.isEmpty()) {\n            throw AddaxException.asAddaxException(\n                    StorageReaderErrorCode.REQUIRED_VALUE,\n                    \"\u60a8\u9700\u8981\u6307\u5b9a columns \u4fe1\u606f\uff0c\u6bcf\u4e2a column \u4e2d\u5fc5\u987b\u5305\u542b name \u548c type \u5c5e\u6027\");\n        }\n        List<String> columnNames = new ArrayList<>(columnSet);\n        List<TypeDescription> types = new ArrayList<>();\n        for (Configuration eachColumnConf : columns) {\n            String columnName = eachColumnConf.getString(Key.NAME);\n            String columnType = eachColumnConf.getString(Key.TYPE);\n            if (columnType.equalsIgnoreCase(\"string\")) {\n                types.add(TypeDescription.createString());\n            } else if (columnType.equalsIgnoreCase(\"boolean\")) {\n                types.add(TypeDescription.createBoolean());\n            } else if (columnType.equalsIgnoreCase(\"int\")) {\n                types.add(TypeDescription.createInt());\n            } else if (columnType.equalsIgnoreCase(\"long\")) {\n                types.add(TypeDescription.createLong());\n            } else if (columnType.equalsIgnoreCase(\"float\")) {\n                types.add(TypeDescription.createFloat());\n            } else if (columnType.equalsIgnoreCase(\"double\")) {\n                types.add(TypeDescription.createDouble());\n            } else if (columnType.equalsIgnoreCase(\"date", "CodeBleu_score": 31.214366630447792}]}
{"instance_id": "c450f959616c", "generation_result": [{"code": "public boolean checkHdfsFileType(String filepath, String specifiedFileType){\n\t    FileSystem fs;\n    try {\n        fs = FileSystem.get(new Configuration());\n    } catch (IOException e) {\n        String message = String.format(\"get FileSystem error when check file type. file path: [%s], specified file type: [%s]\", filepath, specifiedFileType);\n        LOG.error(message);\n        throw AddaxException.asAddaxException(StorageReaderErrorCode.GET_FILE_SYSTEM_ERROR, message);\n    }\n    Path path = new Path(filepath);\n    FileStatus fileStatus;\n    try {\n        fileStatus = fs.getFileStatus(path);\n    } catch (IOException e) {\n        String message = String.format(\"get file status error when check file type. file path: [%s], specified file type: [%s]\", filepath, specifiedFileType);\n        LOG.error(message);\n        throw AddaxException.asAddaxException(StorageReaderErrorCode.GET_FILE_STATUS_ERROR, message);\n    }\n    if (fileStatus.isDir()) {\n        String message = String.format(\"file path is a directory. file path: [%s], specified file type: [%s]\", filepath, specifiedFileType);\n        LOG.error(message);\n        throw AddaxException.asAddaxException(StorageReaderErrorCode.FILE_NOT_EXISTS, message);\n    }\n    if (fileStatus.getLen() == 0) {\n        String message = String.format(\"file size is 0. file path: [%s], specified file type: [%s]\", filepath, specifiedFileType);\n        LOG.error(message);\n        throw AddaxException.asAddaxException(StorageReaderErrorCode.FILE_SIZE_ZERO, message);\n    }\n    if (specifiedFileType.equalsIgnoreCase(\"ORC\")) {\n        return checkOrcFileType(filepath);\n    }\n    if (specifiedFileType.equalsIgnoreCase(\"RC\")) {\n        return checkRCFileType(filepath);\n    }\n    if (specifiedFileType.equalsIgnoreCase(\"SEQUENCE\")) {\n        return checkSequenceFileType(filepath);\n    }\n    if (specified", "CodeBleu_score": 39.69956580383677}, {"code": "public boolean checkHdfsFileType(String filepath, String specifiedFileType){\n\t    boolean isFileTypeMatch = false;\n    try {\n        if (StringUtils.isBlank(specifiedFileType)) {\n            throw AddaxException.asAddaxException(StorageReaderErrorCode.ILLEGAL_VALUE, \"\u60a8\u914d\u7f6e\u7684filetype\u4e0d\u5408\u6cd5, \u4e0d\u5141\u8bb8\u4e3a\u7a7a\");\n        }\n        FileSystem fileSystem = FileSystem.get(new Path(filepath).toUri(), new Configuration());\n        if (fileSystem.isFile(new Path(filepath))) {\n            Path path = new Path(filepath);\n            FileStatus fileStatus = fileSystem.getFileStatus(path);\n            long fileSize = fileStatus.getLen();\n            if (fileSize == 0) {\n                throw AddaxException.asAddaxException(StorageReaderErrorCode.ILLEGAL_VALUE, \"\u60a8\u8bfb\u53d6\u7684\u6587\u4ef6 \" + filepath + \" \u5927\u5c0f\u4e3a0\uff0c\u8bf7\u68c0\u67e5\u60a8\u7684\u914d\u7f6e \u6216 \u6587\u4ef6\u662f\u5426\u6b63\u5e38\");\n            }\n            if (fileSize > 256 * 1024 * 1024) {\n                throw AddaxException.asAddaxException(StorageReaderErrorCode.ILLEGAL_VALUE, \"\u60a8\u8bfb\u53d6\u7684\u6587\u4ef6 \" + filepath + \" \u5927\u5c0f\u8d85\u8fc7256MB, \u8bf7\u68c0\u67e5\u60a8\u7684\u914d\u7f6e \u6216 \u6587\u4ef6\u662f\u5426\u6b63\u5e38\");\n            }\n            if (fileSize < 1024 * 1024) {\n                throw AddaxException.asAddaxException(StorageReaderErrorCode.ILLEGAL_VALUE, \"\u60a8\u8bfb\u53d6\u7684\u6587\u4ef6 \" + filepath + \" \u5927\u5c0f\u5c0f\u4e8e1MB, \u8bf7\u68c0\u67e5\u60a8\u7684\u914d\u7f6e \u6216 \u6587\u4ef6\u662f\u5426\u6b63\u5e38\");\n            }\n            if (fileSize > 1024 * 1024) {\n                LOG.info(\"\u60a8\u8bfb\u53d6\u7684\u6587\u4ef6 \" + filepath + \" \u5927\u5c0f\u5927\u4e8e1MB, \u5efa\u8bae\u538b\u7f29\");\n            }\n            FSDataInputStream inputStream =", "CodeBleu_score": 31.99032872482215}, {"code": "public boolean checkHdfsFileType(String filepath, String specifiedFileType){\n\t    // check file type\n    String fileType = \"\";\n    String fileName = new Path(filepath).getName();\n    if (fileName.endsWith(\".orc\")) {\n        fileType = \"ORC\";\n    } else if (fileName.endsWith(\".rc\")) {\n        fileType = \"RC\";\n    } else if (fileName.endsWith(\".seq\")) {\n        fileType = \"SEQUENCE\";\n    } else if (fileName.endsWith(\".parquet\")) {\n        fileType = \"PARQUET\";\n    } else if (fileName.endsWith(\".csv\")) {\n        fileType = \"CSV\";\n    } else if (fileName.endsWith(\".txt\")) {\n        fileType = \"TEXT\";\n    } else {\n        return false;\n    }\n    return fileType.equalsIgnoreCase(specifiedFileType);\n}", "CodeBleu_score": 20.07405690147042}]}
{"instance_id": "1bf487d2cc64", "generation_result": [{"code": "public static void closeConnection(Connection hConnection){\n\t    if (hConnection != null) {\n        try {\n            hConnection.close();\n        } catch (IOException e) {\n            throw AddaxException.asAddaxException(HBase11xWriterErrorCode.CLOSE_CONNECTION_ERROR, e);\n        }\n    }\n}", "CodeBleu_score": 61.30349449620668}, {"code": "public static void closeConnection(Connection hConnection){\n\t    if (hConnection != null) {\n        try {\n            hConnection.close();\n        } catch (IOException e) {\n            throw AddaxException.asAddaxException(HBase11XErrorCode.HBASE11X_001, e);\n        }\n    }\n}", "CodeBleu_score": 58.15960929026328}, {"code": "public static void closeConnection(Connection hConnection){\n\t    if (null != hConnection) {\n        try {\n            hConnection.close();\n        } catch (IOException e) {\n            throw AddaxException.asAddaxException(HBaseErrorCode.CONNECT_HBASE11X_IO_ERROR, e);\n        }\n    }\n}", "CodeBleu_score": 78.17621165581777}]}
{"instance_id": "680728cbc3ec", "generation_result": [{"code": "public static void closeAdmin(Admin admin){\n\t    if (admin != null) {\n        try {\n            admin.close();\n        } catch (IOException e) {\n            throw AddaxException.asAddaxException(HBase20XErrorCode.HBASE20X_ADMIN_CLOSE_ERROR, e);\n        }\n    }\n}", "CodeBleu_score": 59.55655572536935}, {"code": "public static void closeAdmin(Admin admin){\n\t    if (admin != null) {\n        try {\n            admin.close();\n        } catch (IOException e) {\n            throw AddaxException.asAddaxException(HBase11xSQLWriterErrorCode.CLOSE_ADMIN_ERROR, e);\n        }\n    }\n}", "CodeBleu_score": 60.58604650974901}, {"code": "public static void closeAdmin(Admin admin){\n\t    if (admin != null) {\n        try {\n            admin.close();\n        } catch (IOException e) {\n            throw AddaxException.asAddaxException(HBase11xSQLWriterErrorCode.CLOSE_ADMIN_ERROR, e);\n        }\n    }\n}", "CodeBleu_score": 60.58604650974901}]}
{"instance_id": "ce50bd53abef", "generation_result": [{"code": "private void convertCellToLine(Cell cell, Record record)\n            throws Exception{\n\t    if (cell == null) {\n        return;\n    }\n    String rowKey = Bytes.toString(CellUtil.cloneRow(cell));\n    String family = Bytes.toString(CellUtil.cloneFamily(cell));\n    String qualifier = Bytes.toString(CellUtil.cloneQualifier(cell));\n    String value = Bytes.toString(CellUtil.cloneValue(cell));\n    String timestamp = String.valueOf(cell.getTimestamp());\n    String type = HBaseConstant.DEFAULT_TYPE;\n    if (null != this.columnType) {\n        type = this.columnType.get(family + HBaseConstant.HBASE_NAME_DELIMITER + qualifier);\n    }\n    if (null == type || StringUtils.isBlank(type)) {\n        type = HBaseConstant.DEFAULT_TYPE;\n    }\n    if (HBaseConstant.LONG.equalsIgnoreCase(type)) {\n        record.addColumn(new LongColumn(qualifier, Long.parseLong(value)));\n    } else if (HBaseConstant.DOUBLE.equalsIgnoreCase(type)) {\n        record.addColumn(new LongColumn(qualifier, Double.parseDouble(value)));\n    } else if (HBaseConstant.FLOAT.equalsIgnoreCase(type)) {\n        record.addColumn(new LongColumn(qualifier, Float.parseFloat(value)));\n    } else if (HBaseConstant.SHORT.equalsIgnoreCase(type)) {\n        record.addColumn(new LongColumn(qualifier, Short.parseShort(value)));\n    } else if (HBaseConstant.INT.equalsIgnoreCase(type)) {\n        record.addColumn(new LongColumn(qualifier, Integer.parseInt(value)));\n    } else if (HBaseConstant.BOOLEAN.equalsIgnoreCase(type)) {\n        record.addColumn(new LongColumn(qualifier, Boolean.parseBoolean(value)));\n    } else {\n        record.addColumn(new LongColumn(qualifier, value));\n    }\n    record.addColumn(new LongColumn(HBaseKey.HBASE_ROWKEY, rowKey));\n    record.addColumn(new LongColumn(HBaseKey", "CodeBleu_score": 29.66600800267597}, {"code": "private void convertCellToLine(Cell cell, Record record)\n            throws Exception{\n\t    String family = Bytes.toString(CellUtil.cloneFamily(cell));\n    String qualifier = Bytes.toString(CellUtil.cloneQualifier(cell));\n    String value = Bytes.toString(CellUtil.cloneValue(cell));\n    String rowKey = Bytes.toString(CellUtil.cloneRow(cell));\n    String timestamp = String.valueOf(CellUtil.getTimestamp(cell));\n    String type = StringUtils.isBlank(columnType) ? HBaseConstant.DEFAULT_TYPE : columnType;\n    String format = StringUtils.isBlank(columnFormat) ? HBaseConstant.DEFAULT_FORMAT : columnFormat;\n    String columnValue = HBaseConstant.DEFAULT_VALUE;\n    String columnQualifier = HBaseConstant.DEFAULT_VALUE;\n    String columnFamily = HBaseConstant.DEFAULT_VALUE;\n    String columnRowKey = HBaseConstant.DEFAULT_VALUE;\n    String columnTimestamp = HBaseConstant.DEFAULT_VALUE;\n    switch (type) {\n        case HBaseConstant.STRING_TYPE:\n            columnValue = value;\n            break;\n        case HBaseConstant.LONG_TYPE:\n            columnValue = Long.toString(Long.parseLong(value));\n            break;\n        case HBaseConstant.DOUBLE_TYPE:\n            columnValue = Double.toString(Double.parseDouble(value));\n            break;\n        case HBaseConstant.BOOLEAN_TYPE:\n            columnValue = Boolean.toString(Boolean.parseBoolean(value));\n            break;\n        default:\n            columnValue = value;\n            break;\n    }\n    switch (format) {\n        case HBaseConstant.STRING_FORMAT:\n            columnQualifier = qualifier;\n            columnFamily = family;\n            columnRowKey = rowKey;\n            columnTimestamp = timestamp;\n            break;\n        case HBaseConstant.JSON_FORMAT:\n            Map<String, String> map = new HashMap<>();\n            map.put(\"rowKey\", rowKey);\n            map.put(\"family\", family);\n            map.put(\"qualifier\", qualifier);\n            map.put(\"value\", value);\n            map.put(\"timestamp\", timestamp);\n", "CodeBleu_score": 31.88709899550803}, {"code": "private void convertCellToLine(Cell cell, Record record)\n            throws Exception{\n\t    String rowKey = Bytes.toString(CellUtil.cloneRow(cell));\n    String family = Bytes.toString(CellUtil.cloneFamily(cell));\n    String qualifier = Bytes.toString(CellUtil.cloneQualifier(cell));\n    String value = Bytes.toString(CellUtil.cloneValue(cell));\n    String timestamp = String.valueOf(cell.getTimestamp());\n    String type = HBaseConstant.DEFAULT_TYPE;\n    if (this.columnType.containsKey(family)) {\n        type = this.columnType.get(family);\n    }\n    String format = HBaseConstant.DEFAULT_FORMAT;\n    if (this.columnFormat.containsKey(family)) {\n        format = this.columnFormat.get(family);\n    }\n    Map<String, Object> map = new HashMap<>();\n    map.put(HBaseKey.ROW_KEY, rowKey);\n    map.put(HBaseKey.COLUMN_FAMILY, family);\n    map.put(HBaseKey.COLUMN_QUALIFIER, qualifier);\n    map.put(HBaseKey.COLUMN_VALUE, value);\n    map.put(HBaseKey.COLUMN_TYPE, type);\n    map.put(HBaseKey.COLUMN_FORMAT, format);\n    map.put(HBaseKey.COLUMN_TIMESTAMP, timestamp);\n    record.addColumn(new LongColumn(HBaseKey.COLUMN_TIMESTAMP, Long.parseLong(timestamp)));\n    for (Map.Entry<String, Object> entry : map.entrySet()) {\n        if (entry.getValue() instanceof String) {\n            record.addColumn(new StringColumn(entry.getKey(), (String) entry.getValue()));\n        } else if (entry.getValue() instanceof Long) {\n            record.addColumn(new LongColumn(entry.getKey(), (Long) entry.getValue()));\n        } else if (entry.getValue() instanceof Double) {\n            record.addColumn(new DoubleColumn(entry.getKey(), (Double) entry.getValue()));\n        } else if (entry.getValue() instanceof Boolean) {\n            record.addColumn(new BoolColumn(entry.getKey(), (Boolean", "CodeBleu_score": 31.47786560499067}]}
{"instance_id": "29e8f3a99f0c", "generation_result": [{"code": "public static byte[] convertUserStartRowkey(Configuration configuration){\n\t    String startRowkey = configuration.getString(HBaseKey.START_ROWKEY);\n    if (StringUtils.isBlank(startRowkey)) {\n        return HConstants.EMPTY_START_ROW;\n    }\n    if (configuration.getBool(HBaseKey.IS_BINARY_ROWKEY, false)) {\n        return Bytes.toBytesBinary(startRowkey);\n    } else {\n        return Bytes.toBytes(startRowkey);\n    }\n}", "CodeBleu_score": 55.136069102217476}, {"code": "public static byte[] convertUserStartRowkey(Configuration configuration){\n\t    String startRowkey = configuration.getString(HBaseKey.START_ROWKEY);\n    if (StringUtils.isBlank(startRowkey)) {\n        return new byte[0];\n    }\n    return Bytes.toBytesBinary(startRowkey);\n}", "CodeBleu_score": 42.39011561071169}, {"code": "public static byte[] convertUserStartRowkey(Configuration configuration){\n\t    String startRowkey = configuration.getString(HBaseKey.START_ROWKEY);\n    if (StringUtils.isBlank(startRowkey)) {\n        return new byte[0];\n    }\n    return Bytes.toBytesBinary(startRowkey);\n}", "CodeBleu_score": 42.39011561071169}]}
{"instance_id": "f5ad51545b10", "generation_result": [{"code": "public static byte[] convertInnerStartRowkey(Configuration configuration){\n\t    String startRowkey = configuration.getString(HBaseKey.START_ROWKEY);\n    if (StringUtils.isBlank(startRowkey)) {\n        return HConstants.EMPTY_START_ROW;\n    }\n    return Bytes.toBytes(startRowkey);\n}", "CodeBleu_score": 73.08344165592572}, {"code": "public static byte[] convertInnerStartRowkey(Configuration configuration){\n\t    String startRowkey = configuration.getString(HBaseKey.START_ROWKEY);\n    if (StringUtils.isBlank(startRowkey)) {\n        return new byte[0];\n    } else {\n        return Bytes.toBytes(startRowkey);\n    }\n}", "CodeBleu_score": 64.44572829466284}, {"code": "public static byte[] convertInnerStartRowkey(Configuration configuration){\n\t    String startRowkey = configuration.getString(HBaseKey.START_ROWKEY);\n    if (StringUtils.isBlank(startRowkey)) {\n        return new byte[0];\n    }\n    return Bytes.toBytes(startRowkey);\n}", "CodeBleu_score": 64.6708741193602}]}
{"instance_id": "8618eef8b0e9", "generation_result": [{"code": "public KafkaTbQueueMsg(ConsumerRecord<String, byte[]> record){\n\t    this.key = UUID.fromString(record.key());\n    this.headers = new DefaultTbQueueMsgHeaders(record.headers());\n    this.data = record.value();\n}", "CodeBleu_score": 43.65240826036944}, {"code": "public KafkaTbQueueMsg(ConsumerRecord<String, byte[]> record){\n\t    this.key = UUID.fromString(record.key());\n    this.headers = new DefaultTbQueueMsgHeaders(record.headers());\n    this.data = record.value();\n}", "CodeBleu_score": 43.65240826036944}, {"code": "public KafkaTbQueueMsg(ConsumerRecord<String, byte[]> record){\n\t    this.key = UUID.fromString(record.key());\n    this.headers = new DefaultTbQueueMsgHeaders(record.headers());\n    this.data = record.value();\n}", "CodeBleu_score": 43.65240826036944}]}
{"instance_id": "46484df184dd", "generation_result": [{"code": "public TbQueueProducer<TbProtoQueueMsg<ToTransportMsg>> createTransportNotificationsMsgProducer(){\n\t    return new TbKafkaProducerTemplate<>(kafkaSettings,\n            new TbKafkaTopicConfigs(topicService, ServiceType.TB_TRANSPORT_NOTIFICATIONS_TOPIC, topicService.getServiceId()).getTopic());\n}", "CodeBleu_score": 14.46663631336102}, {"code": "public TbQueueProducer<TbProtoQueueMsg<ToTransportMsg>> createTransportNotificationsMsgProducer(){\n\t    return new TbKafkaProducerTemplate<>(transportNotificationsSettings.getProducerSettings(),\n            transportNotificationsSettings.getDefaultTopic(), transportNotificationsAdmin);\n}", "CodeBleu_score": 15.119168381137127}, {"code": "public TbQueueProducer<TbProtoQueueMsg<ToTransportMsg>> createTransportNotificationsMsgProducer(){\n\t    return new TbKafkaProducerTemplate<>(transportNotificationsTemplate);\n}", "CodeBleu_score": 7.3586815619602435}]}
{"instance_id": "4ac56ef9f89a", "generation_result": [{"code": "public TbQueueConsumer<TbProtoQueueMsg<ToCoreNotificationMsg>> createToCoreNotificationsMsgConsumer(){\n\t    TbKafkaConsumerTemplate.TbKafkaConsumerTemplateBuilder<?, ToCoreNotificationMsg> consumerBuilder =\n            new TbKafkaConsumerTemplate.TbKafkaConsumerTemplateBuilder<>(kafkaSettings, new TbProtoQueueMsg<ToCoreNotificationMsg>() {\n\n                private final AtomicLong counter = new AtomicLong();\n\n                @Override\n                public ToCoreNotificationMsg getData() {\n                    return ToCoreNotificationMsg.parseFrom(getDataBytes());\n                }\n\n                @Override\n                public byte[] getDataBytes() {\n                    return getPayload();\n                }\n\n                @Override\n                public String getKey() {\n                    return null;\n                }\n\n                @Override\n                public long getTimestamp() {\n                    return 0;\n                }\n\n                @Override\n                public int getSequenceNumber() {\n                    return 0;\n                }\n\n                @Override\n                public String getServiceId() {\n                    return null;\n                }\n\n                @Override\n                public String getShardId() {\n                    return null;\n                }\n\n                @Override\n                public String getNodeId() {\n                    return null;\n                }\n\n                @Override\n                public String getTenantId() {\n                    return null;\n                }\n\n                @Override\n                public String getCustomerId() {\n                    return null;\n                }\n\n                @Override\n                public String getOriginatorId() {\n                    return null;\n                }\n\n                @Override\n                public String getOriginatorName() {\n                    return null;\n                }\n\n                @Override\n                public String getEntityId() {\n                    return null;\n                }\n\n                @Override\n                public String getEntityType() {\n                    return null;\n                }\n\n                @Override\n                public String getEntityName() {\n                    return null;\n                }\n\n                @Override\n                public String getEntityLabel() {\n                    return null;\n                }\n\n                @Override\n                public String getEntityProfileId() {\n                    return null;\n                }\n\n                @Override\n                public String getEntityProfileName() {\n                    return null;", "CodeBleu_score": 14.81784981834644}, {"code": "public TbQueueConsumer<TbProtoQueueMsg<ToCoreNotificationMsg>> createToCoreNotificationsMsgConsumer(){\n\t    TbKafkaConsumerTemplate.TbKafkaConsumerTemplateBuilder<TbProtoQueueMsg<ToCoreNotificationMsg>> consumerBuilder =\n            new TbKafkaConsumerTemplate.TbKafkaConsumerTemplateBuilder<TbProtoQueueMsg<ToCoreNotificationMsg>>()\n                    .setAdmin(kafkaAdmin)\n                    .setSettings(kafkaSettings)\n                    .setTopic(topicService.getNotificationsTopic(ServiceType.TB_CORE))\n                    .setDecoder(new TbProtoQueueMsgValueDecoder<>(ToCoreNotificationMsg.class));\n    return createToCoreNotificationsMsgConsumer(consumerBuilder);\n}", "CodeBleu_score": 33.26399880614408}, {"code": "public TbQueueConsumer<TbProtoQueueMsg<ToCoreNotificationMsg>> createToCoreNotificationsMsgConsumer(){\n\t    TbKafkaConsumerTemplate.TbKafkaConsumerTemplateBuilder<?> builder = TbKafkaConsumerTemplate.builder();\n    TbKafkaConsumerTemplate<TbProtoQueueMsg<ToCoreNotificationMsg>> consumerTemplate =\n            builder\n                    .consumerName(\"core-notifications-msg-consumer\")\n                    .serviceId(serviceInfoProvider.getServiceId())\n                    .topic(topicService.getNotificationsTopic(ServiceType.TB_CORE))\n                    .decoder(new TbProtoQueueMsgDecoder<>(ToCoreNotificationMsg.class))\n                    .admin(kafkaAdmin)\n                    .statsService(kafkaConsumerStatsService)\n                    .build();\n    return consumerTemplate;\n}", "CodeBleu_score": 38.23316888930229}]}
{"instance_id": "e13a82b26338", "generation_result": [{"code": "protected void doSubscribe(List<String> topicNames){\n\t    if (topicNames.isEmpty()) {\n        log.info(\"Unsubscribing consumer from all topics!\");\n        consumer.unsubscribe();\n    } else {\n        consumer.subscribe(topicNames);\n    }\n}", "CodeBleu_score": 33.86643489341422}, {"code": "protected void doSubscribe(List<String> topicNames){\n\t    if (topicNames.isEmpty()) {\n        consumer.unsubscribe();\n        log.info(\"[{}] Unsubscribed from all topics!\", name);\n    } else {\n        consumer.subscribe(topicNames);\n        log.info(\"[{}] Subscribed to topics: {}!\", name, topicNames);\n    }\n}", "CodeBleu_score": 57.53744733224896}, {"code": "protected void doSubscribe(List<String> topicNames){\n\t    if (topicNames.isEmpty()) {\n        consumer.unsubscribe();\n        log.info(\"Unsubscribed from all topics!\");\n    } else {\n        consumer.subscribe(topicNames);\n        log.info(\"Subscribed to topics {}!\", topicNames);\n    }\n}", "CodeBleu_score": 61.193251931475615}]}
{"instance_id": "8a20d0b48703", "generation_result": [{"code": "protected List<ConsumerRecord<String, byte[]>> doPoll(long durationInMillis){\n\t    StopWatch stopWatch = new StopWatch();\n    stopWatch.start();\n    ConsumerRecords<String, byte[]> records = consumer.poll(Duration.ofMillis(durationInMillis));\n    stopWatch.stop();\n    log.trace(\"Polled records from {} in {} ms.\", topic, stopWatch.getTotalTimeMillis());\n    if (records.isEmpty()) {\n        return Collections.emptyList();\n    } else {\n        List<ConsumerRecord<String, byte[]>> result = new ArrayList<>(records.count());\n        records.forEach(result::add);\n        return result;\n    }\n}", "CodeBleu_score": 67.70747154181775}, {"code": "protected List<ConsumerRecord<String, byte[]>> doPoll(long durationInMillis){\n\t    StopWatch stopWatch = new StopWatch();\n    stopWatch.start();\n    ConsumerRecords<String, byte[]> records = consumer.poll(Duration.ofMillis(durationInMillis));\n    stopWatch.stop();\n    log.trace(\"[{}] Records received from Kafka in {} ms\", topic, stopWatch.getTotalTimeMillis());\n    if (records.isEmpty()) {\n        return Collections.emptyList();\n    } else {\n        List<ConsumerRecord<String, byte[]>> result = new ArrayList<>(records.count());\n        for (ConsumerRecord<String, byte[]> record : records) {\n            result.add(record);\n        }\n        return result;\n    }\n}", "CodeBleu_score": 65.87990910271314}, {"code": "protected List<ConsumerRecord<String, byte[]>> doPoll(long durationInMillis){\n\t    StopWatch stopWatch = new StopWatch();\n    stopWatch.start();\n    log.trace(\"[{}] Starting consumer poll\", name);\n    ConsumerRecords<String, byte[]> records = consumer.poll(Duration.ofMillis(durationInMillis));\n    stopWatch.stop();\n    log.trace(\"[{}] Consumer poll took {} ms\", name, stopWatch.getTotalTimeMillis());\n    if (records.isEmpty()) {\n        log.trace(\"[{}] No records received\", name);\n        return Collections.emptyList();\n    } else {\n        List<ConsumerRecord<String, byte[]>> result = new ArrayList<>();\n        for (ConsumerRecord<String, byte[]> record : records) {\n            result.add(record);\n        }\n        return result;\n    }\n}", "CodeBleu_score": 64.32401771520718}]}
{"instance_id": "328e4c39a8e1", "generation_result": [{"code": "public void onMsg(TbContext ctx, TbMsg msg){\n\t    try {\n        String topic = getTopic(msg);\n        String key = getKey(msg);\n        byte[] data = getData(msg);\n        if (topic != null && key != null && data != null) {\n            ctx.enqueue(msg, \"KAFKA_SINK\", TbNodeUtils.processFunction(getSinkConfiguration().getOnMsg(), msg));\n            ctx.tellNext(msg, \"KAFKA_SINK\");\n            log.debug(\"[{}] Forwarded message to Kafka topic: {} with key: {}\", msg.getId(), topic, key);\n            ctx.getKafkaProducer().send(new ProducerRecord<>(topic, key, data), new KafkaCallback(ctx, msg));\n        } else {\n            ctx.tellFailure(msg, new RuntimeException(\"Failed to process message!\"));\n        }\n    } catch (Exception e) {\n        ctx.tellFailure(msg, e);\n    }\n}", "CodeBleu_score": 36.97137365511867}, {"code": "public void onMsg(TbContext ctx, TbMsg msg){\n\t\n    if (producer == null) {\n        try {\n            producer = createProducer();\n        } catch (TbNodeException e) {\n            ctx.tellFailure(msg, e);\n            return;\n        }\n    }\n\n    String topic = TbNodeUtils.processPattern(ctx, msg, configuration.getTopicPattern(), TOPIC_PATTERN_KEY);\n    String key = TbNodeUtils.processPattern(ctx, msg, configuration.getKeyPattern(), KEY_PATTERN_KEY);\n    byte[] data = TbNodeUtils.processPattern(ctx, msg, configuration.getDataPattern(), DATA_PATTERN_KEY).getBytes(Charset.defaultCharset());\n\n    if (key.isEmpty()) {\n        key = null;\n    }\n\n    if (topic.isEmpty()) {\n        ctx.tellFailure(msg, new RuntimeException(\"Topic is empty!\"));\n        return;\n    }\n\n    if (data.length == 0) {\n        ctx.tellFailure(msg, new RuntimeException(\"Data is empty!\"));\n        return;\n    }\n\n    log.trace(\"[{}] Pushing message to Kafka topic: {}\", msg.getId(), topic);\n\n    if (configuration.isUseHeaders()) {\n        Headers headers = new RecordHeaders();\n        for (String key : configuration.getHeaderKeys()) {\n            String value = TbNodeUtils.processPattern(ctx, msg, configuration.getHeaderValues().get(key), key);\n            headers.add(new RecordHeader(key, value.getBytes(StandardCharsets.UTF_8)));\n        }\n        ProducerRecord<String, byte[]> record = new ProducerRecord<>(topic, null, key, data, headers);\n        sendRecord(ctx, msg, record);\n    } else {\n        ProducerRecord<String, byte[]> record = new ProducerRecord<>(topic, key, data);\n        sendRecord(ctx, msg, record);\n    }\n}", "CodeBleu_score": 36.212724598457825}, {"code": "public void onMsg(TbContext ctx, TbMsg msg){\n\t    try {\n        String topic = getTopic(msg);\n        String key = getKey(msg);\n        byte[] payload = getPayload(msg);\n        Headers headers = getHeaders(msg);\n        if (headers == null) {\n            headers = new RecordHeaders();\n        }\n        ProducerRecord<String, byte[]> record = new ProducerRecord<>(topic, key, payload, headers);\n        log.trace(\"[{}] Publishing message to Kafka topic {} with key {}.\", ctx.getSelfId(), topic, key);\n        producer.send(record, (metadata, exception) -> {\n            if (exception != null) {\n                log.warn(\"[{}] Failed to publish message to Kafka topic {} with key {}.\", ctx.getSelfId(), topic, key, exception);\n                ctx.tellFailure(msg, new ThingsboardKafkaClientError(exception));\n            } else {\n                log.trace(\"[{}] Message published to Kafka topic {} with key {}.\", ctx.getSelfId(), topic, key);\n                ctx.tellSuccess(msg);\n            }\n        });\n    } catch (Exception e) {\n        ctx.tellFailure(msg, e);\n    }\n}", "CodeBleu_score": 40.506583240034175}]}
{"instance_id": "35f835e8c387", "generation_result": [{"code": "protected void publish(TbContext ctx, TbMsg msg, String topic, String key){\n\t    try {\n        TbMsgMetaData metadata = msg.getMetaData();\n        Headers headers = new RecordHeaders();\n        for (String key : metadata.keySet()) {\n            headers.add(new RecordHeader(key, metadata.getValue(key).getBytes(StandardCharsets.UTF_8)));\n        }\n        ProducerRecord<String, String> record = new ProducerRecord<>(topic, key, msg.getData(), headers);\n        ctx.enqueue(record, new Callback(ctx, msg));\n    } catch (Exception e) {\n        log.debug(\"Failed to publish message to Kafka: {}\", msg, e);\n        ctx.tellFailure(msg, new ThingsboardKafkaClientError(\"Failed to publish message to Kafka: \" + msg, e));\n    }\n}", "CodeBleu_score": 41.31623274549303}, {"code": "protected void publish(TbContext ctx, TbMsg msg, String topic, String key){\n\t    try {\n        TbMsgMetaData metaData = msg.getMetaData();\n        Headers headers = new RecordHeaders();\n        if (BooleanUtils.isTrue(addMetadata)) {\n            for (String key : metaData.keySet()) {\n                headers.add(new RecordHeader(key, metaData.getValue(key).getBytes(StandardCharsets.UTF_8)));\n            }\n        }\n        ProducerRecord<String, String> record = new ProducerRecord<>(topic, key, msg.getData(), headers);\n        log.trace(\"[{}] Publishing msg: {}\", ctx.getTraceId(), msg);\n        producer.send(record, (metadata, exception) -> {\n            if (exception != null) {\n                log.error(\"[{}] Failed to publish msg: {}\", ctx.getTraceId(), msg, exception);\n                if (exception instanceof ThingsboardKafkaClientError) {\n                    ctx.tellFailure(msg, ((ThingsboardKafkaClientError) exception).getCause());\n                } else {\n                    ctx.tellFailure(msg, exception);\n                }\n            } else {\n                log.trace(\"[{}] Published msg: {}\", ctx.getTraceId(), msg);\n                ctx.ack(msg);\n            }\n        });\n    } catch (Exception e) {\n        log.error(\"[{}] Failed to publish msg: {}\", ctx.getTraceId(), msg, e);\n        ctx.tellFailure(msg, e);\n    }\n}", "CodeBleu_score": 39.44630223788902}, {"code": "protected void publish(TbContext ctx, TbMsg msg, String topic, String key){\n\t    try {\n        if (ctx.isDebugEnabled()) {\n            ctx.debug(\"Publishing message to topic \" + topic + \" with key \" + key + \" and content \" + msg.getData());\n        }\n        ProducerRecord<String, String> producerRecord = new ProducerRecord<>(topic, key, msg.getData());\n        Headers headers = new RecordHeaders();\n        if (msg.getMetaData().getValue(\"metadata\") != null) {\n            String metadata = msg.getMetaData().getValue(\"metadata\");\n            for (String metadataKey : metadata.split(\",\")) {\n                if (msg.getMetaData().hasKey(metadataKey)) {\n                    headers.add(new RecordHeader(metadataKey, msg.getMetaData().getValue(metadataKey).getBytes(StandardCharsets.UTF_8)));\n                }\n            }\n        }\n        producerRecord.headers(headers);\n        RecordMetadata metadata = kafkaProducer.send(producerRecord).get();\n        ctx.getTelemetryService().onPublished(msg, metadata.offset());\n    } catch (Exception e) {\n        log.debug(\"Failed to publish message to topic {} with key {}.\", topic, key, e);\n        ctx.tellFailure(msg, new ThingsboardKafkaClientError(\"Failed to publish message to topic \" + topic + \" with key \" + key + \".\", e));\n    }\n}", "CodeBleu_score": 39.641284200203046}]}
{"instance_id": "111a11189434", "generation_result": [{"code": "public void destroy(){\n\t    try {\n        if (producer != null) {\n            producer.close();\n        }\n    } catch (Exception e) {\n        log.error(\"Failed to close Kafka producer\", e);\n    }\n}", "CodeBleu_score": 68.126018294879}, {"code": "public void destroy(){\n\t    if (producer != null) {\n        try {\n            producer.close();\n        } catch (Exception e) {\n            log.error(\"Failed to close Kafka producer\", e);\n        }\n    }\n}", "CodeBleu_score": 71.42565466358049}, {"code": "public void destroy(){\n\t    if (producer != null) {\n        try {\n            producer.flush();\n            producer.close();\n        } catch (Exception e) {\n            log.error(\"Failed to close Kafka producer\", e);\n        }\n    }\n}", "CodeBleu_score": 62.852975689506586}]}
{"instance_id": "f5d2487100a9", "generation_result": [{"code": "public TbQueueProducer<TbProtoQueueMsg<ToRuleEngineMsg>> createRuleEngineMsgProducer(){\n\t    TbKafkaProducerTemplate.TbKafkaProducerTemplateBuilder<?, ToRuleEngineMsg> builder = TbKafkaProducerTemplate.builder();\n    return builder\n            .settings(ruleEngineSettings)\n            .clientId(serviceInfoProvider.getServiceId())\n            .defaultTopic(topicService.getRuleEngineNotificationsTopic())\n            .admin(kafkaAdmin)\n            .build();\n}", "CodeBleu_score": 44.69952621565863}, {"code": "public TbQueueProducer<TbProtoQueueMsg<ToRuleEngineMsg>> createRuleEngineMsgProducer(){\n\t    return new TbKafkaProducerTemplate<>(ruleEngineSettings.getTopic(), new TbProtoQueueMsg<>(TbProtoQueueMsg.Status.ACTIVE, ToRuleEngineMsg.getDefaultInstance()),\n            ruleEngineSettings.getBootstrapServers(), ruleEngineSettings.getProducerSettings());\n}", "CodeBleu_score": 20.896258211406096}, {"code": "public TbQueueProducer<TbProtoQueueMsg<ToRuleEngineMsg>> createRuleEngineMsgProducer(){\n\t    return new TbKafkaProducerTemplate<>(ruleEngineSettings.getTopic(),\n            ruleEngineSettings.getBootstrapServers(),\n            ruleEngineSettings.getProducerSettings());\n}", "CodeBleu_score": 17.311507126302264}]}
{"instance_id": "886264f5ca27", "generation_result": [{"code": "private void startLogScheduling(){\n\t    if (logSchedulingEnabled) {\n        logSchedulingExecutor = Executors.newSingleThreadScheduledExecutor(ThingsBoardThreadFactory.forName(getClass().getSimpleName()));\n        logSchedulingExecutor.scheduleAtFixedRate(this::logStatistics, responseTimeout, responseTimeout, TimeUnit.MILLISECONDS);\n    }\n}", "CodeBleu_score": 8.219367448108814}, {"code": "private void startLogScheduling(){\n\t    if (logScheduler != null) {\n        logScheduler.shutdownNow();\n    }\n    if (logScheduler == null || logScheduler.isTerminated()) {\n        logScheduler = Executors.newSingleThreadScheduledExecutor(ThingsBoardThreadFactory.forName(\"kafka-consumer-monitor-log\"));\n    }\n    logScheduler.scheduleAtFixedRate(new Runnable() {\n        @Override\n        public void run() {\n            try {\n                if (logStatistics) {\n                    for (Map.Entry<String, KafkaConsumerMonitor> entry : consumerMonitors.entrySet()) {\n                        KafkaConsumerMonitor monitor = entry.getValue();\n                        if (monitor.isLoggingRequired()) {\n                            monitor.logStatistics();\n                        }\n                    }\n                }\n            } catch (Exception e) {\n                log.warn(\"[{}] Failed to log statistics: {}\", logPrefix, e.getMessage(), e);\n            }\n        }\n    }, 0, logStatisticsInterval, TimeUnit.MILLISECONDS);\n}", "CodeBleu_score": 25.90557356642902}, {"code": "private void startLogScheduling(){\n\t    log.info(\"Starting Kafka consumer group lag logging\");\n    if (logStatisticsInterval > 0) {\n        logStatisticsExecutor = Executors.newSingleThreadScheduledExecutor(ThingsBoardThreadFactory.forName(\"kafka-consumer-group-lag-logger\"));\n        logStatisticsExecutor.scheduleWithFixedDelay(this::logStatistics, 0, logStatisticsInterval, TimeUnit.MILLISECONDS);\n    }\n}", "CodeBleu_score": 5.549002966749868}]}
{"instance_id": "81553181cdc8", "generation_result": [{"code": "protected Properties toAdminProps(){\n\t    Properties props = new Properties();\n    props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n    props.put(AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG, \"5000\");\n    props.put(AdminClientConfig.RETRIES_CONFIG, \"3\");\n    props.put(AdminClientConfig.MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION, \"5\");\n    props.put(AdminClientConfig.CONNECTIONS_MAX_IDLE_MS_CONFIG, \"10000\");\n    props.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG, securityProtocol);\n    props.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, trustStoreLocation);\n    props.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, trustStorePassword);\n    props.put(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG, keyStoreLocation);\n    props.put(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, keyStorePassword);\n    props.put(SslConfigs.SSL_KEY_PASSWORD_CONFIG, keyPassword);\n    return props;\n}", "CodeBleu_score": 46.603522296101914}, {"code": "protected Properties toAdminProps(){\n\t    Properties props = toProps();\n    props.put(CommonClientConfigs.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n    props.put(AdminClientConfig.RETRIES_CONFIG, retries);\n    return props;\n}", "CodeBleu_score": 83.96102979662619}, {"code": "protected Properties toAdminProps(){\n\t    Properties props = toProps();\n    props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n    props.put(AdminClientConfig.RETRIES_CONFIG, 5);\n    return props;\n}", "CodeBleu_score": 82.54321802981079}]}
{"instance_id": "3c8bf3ff31b7", "generation_result": [{"code": "public void notifyOfAddedMetric(Metric metric, String metricName, MetricGroup group){\n\t    if (metric instanceof Counter) {\n        Counter counter = (Counter) metric;\n        MetricEvent event = new MetricEvent(metricName, group.getAllVariables(), counter.getCount());\n        addMetric(event);\n    } else if (metric instanceof Gauge) {\n        Gauge gauge = (Gauge) metric;\n        MetricEvent event = new MetricEvent(metricName, group.getAllVariables(), gauge.getValue());\n        addMetric(event);\n    } else if (metric instanceof Histogram) {\n        Histogram histogram = (Histogram) metric;\n        MetricEvent event = new MetricEvent(metricName, group.getAllVariables(), histogram.getCount(), histogram.getMean(), histogram.getMin(), histogram.getMax(), histogram.getSum());\n        addMetric(event);\n    } else if (metric instanceof Meter) {\n        Meter meter = (Meter) metric;\n        MetricEvent event = new MetricEvent(metricName, group.getAllVariables(), meter.getCount(), meter.getMeanRate(), meter.getOneMinuteRate(), meter.getFiveMinuteRate(), meter.getFifteenMinuteRate());\n        addMetric(event);\n    } else {\n        LOG.warn(\"Metric type {} is not supported.\", metric.getClass());\n    }\n}", "CodeBleu_score": 43.235791948151835}, {"code": "public void notifyOfAddedMetric(Metric metric, String metricName, MetricGroup group){\n\t\n    if (metric instanceof Counter) {\n        Counter counter = (Counter) metric;\n        addCounter(counter, metricName, group);\n    } else if (metric instanceof Gauge) {\n        Gauge gauge = (Gauge) metric;\n        addGauge(gauge, metricName, group);\n    } else if (metric instanceof Histogram) {\n        Histogram histogram = (Histogram) metric;\n        addHistogram(histogram, metricName, group);\n    } else if (metric instanceof Meter) {\n        Meter meter = (Meter) metric;\n        addMeter(meter, metricName, group);\n    } else {\n        LOG.warn(\"Metric type not supported: \" + metric.getClass().getName());\n    }\n}", "CodeBleu_score": 48.100242278052576}, {"code": "public void notifyOfAddedMetric(Metric metric, String metricName, MetricGroup group){\n\t\t\tif (metric instanceof Counter) {\n\t\t\tCounter counter = (Counter) metric;\n\t\t\tMetricEvent event = new MetricEvent(metricName, group.getAllVariables(), counter.getCount());\n\t\t\tcounterEvents.add(event);\n\t\t} else if (metric instanceof Gauge) {\n\t\t\tGauge gauge = (Gauge) metric;\n\t\t\tMetricEvent event = new MetricEvent(metricName, group.getAllVariables(), gauge.getValue());\n\t\t\tgaugeEvents.add(event);\n\t\t} else if (metric instanceof Histogram) {\n\t\t\tHistogram histogram = (Histogram) metric;\n\t\t\tMetricEvent event = new MetricEvent(metricName, group.getAllVariables(), histogram.getCount());\n\t\t\thistogramEvents.add(event);\n\t\t} else if (metric instanceof Meter) {\n\t\t\tMeter meter = (Meter) metric;\n\t\t\tMetricEvent event = new MetricEvent(metricName, group.getAllVariables(), meter.getCount());\n\t\t\tmeterEvents.add(event);\n\t\t} else {\n\t\t\tLOG.warn(\"Metric type {} is not supported\", metric.getClass().getName());\n\t\t}\n\t}", "CodeBleu_score": 44.916910142207065}]}
{"instance_id": "77c6addc9b99", "generation_result": [{"code": "static MetricEvent addFields(MetricEvent metricEvent, String field, Gauge<?> gauge){\n\t    Map<String, Object> fields = metricEvent.getFields();\n    if (fields == null) {\n        fields = new HashMap<String, Object>();\n    }\n    Object value = gauge.getValue();\n    if (value instanceof Number) {\n        fields.put(field, ((Number) value).doubleValue());\n    } else {\n        fields.put(field, value.toString());\n    }\n    metricEvent.setFields(fields);\n    return metricEvent;\n}", "CodeBleu_score": 49.48776606889504}, {"code": "static MetricEvent addFields(MetricEvent metricEvent, String field, Gauge<?> gauge){\n\t    Map<String, Object> fields = metricEvent.getFields();\n    if (fields == null) {\n        fields = new HashMap<String, Object>();\n        metricEvent.setFields(fields);\n    }\n    Object value = gauge.getValue();\n    if (value instanceof Number) {\n        fields.put(field, ((Number) value).doubleValue());\n    } else if (value instanceof String) {\n        fields.put(field, value);\n    } else {\n        throw new RuntimeException(\"Unsupported type: \" + value.getClass().getName());\n    }\n    return metricEvent;\n}", "CodeBleu_score": 54.37507938818027}, {"code": "static MetricEvent addFields(MetricEvent metricEvent, String field, Gauge<?> gauge){\n\t\tif (metricEvent.getFields() != null) {\n\t\tObject value = gauge.getValue();\n\t\tif (value instanceof Number) {\n\t\t\tmetricEvent.getFields().put(field, ((Number) value).doubleValue());\n\t\t} else if (value instanceof String) {\n\t\t\tmetricEvent.getFields().put(field, value);\n\t\t} else {\n\t\t\tLOG.warn(\"KafkaReporter: Gauge value is not a Number or String, so it will not be added to the MetricEvent.\");\n\t\t}\n\t} else {\n\t\tMap<String, Object> fields = new HashMap<>();\n\t\tObject value = gauge.getValue();\n\t\tif (value instanceof Number) {\n\t\t\tfields.put(field, ((Number) value).doubleValue());\n\t\t} else if (value instanceof String) {\n\t\t\tfields.put(field, value);\n\t\t} else {\n\t\t\tLOG.warn(\"KafkaReporter: Gauge value is not a Number or String, so it will not be added to the MetricEvent.\");\n\t\t}\n\t\tmetricEvent.setFields(fields);\n\t}\n\treturn metricEvent;\n}", "CodeBleu_score": 56.75247159820487}]}
{"instance_id": "a48971ffb3e9", "generation_result": [{"code": "static MetricEvent addKafkaLagMetricFields(MetricEvent metricEvent, Long timestamp, Gauge<?> gauge){\n\t\tString metricName = metricEvent.getMetricName();\n\tString[] metricNameParts = metricName.split(Pattern.quote(\".\"));\n\tString topic = metricNameParts[0];\n\tString partition = metricNameParts[1];\n\tString lagMetricName = metricNameParts[2];\n\tString lagMetricValue = metricEvent.getMetricValue().toString();\n\tLong lagMetricTimestamp = metricEvent.getTimestamp();\n\tLong lagMetricTime = lagMetricTimestamp / 1000;\n\tString lagMetricTimeString = lagMetricTime.toString();\n\tString lagMetricTimeStringWithoutMinutes = lagMetricTimeString.substring(0, lagMetricTimeString.length() - 3);\n\tString lagMetricTimeStringWithoutSeconds = lagMetricTimeStringWithoutMinutes.substring(0, lagMetricTimeStringWithoutMinutes.length() - 3);\n\tString lagMetricTimeStringWithoutMilliseconds = lagMetricTimeStringWithoutSeconds.substring(0, lagMetricTimeStringWithoutSeconds.length() - 3);\n\tString lagMetricTimeStringWithoutMicroseconds = lagMetricTimeStringWithoutMilliseconds.substring(0, lagMetricTimeStringWithoutMilliseconds.length() - 3);\n\tString lagMetricTimeStringWithoutNanoseconds = lagMetricTimeStringWithoutMicroseconds.substring(0, lagMetricTimeStringWithoutMicroseconds.length() - 3);\n\tString lagMetricTimeStringWithoutHours = lagMetricTimeStringWithoutNanoseconds.substring(0, lagMetricTimeStringWithoutNanoseconds.length() - 3);\n\tString lagMetricTimeStringWithoutDays = lagMetricTimeStringWithoutHours.substring(0, lagMetricTimeStringWithoutHours.length() - 3);\n\tString lagMetricTimeStringWithoutMonths = lagMetricTimeStringWithoutDays.substring(0, lagMetricTimeStringWithoutDays.length() - 3);\n\tString lagMetricTimeStringWithoutYears = lagMetricTimeStringWithoutMonths.substring(0, lagMetricTimeString", "CodeBleu_score": 25.74889224328426}, {"code": "static MetricEvent addKafkaLagMetricFields(MetricEvent metricEvent, Long timestamp, Gauge<?> gauge){\n\t    String[] metricComponents = gauge.getName().split(Pattern.quote(\"\\\\.\"));\n    String metricGroup = metricComponents[0];\n    String metricName = metricComponents[1];\n    String metricType = metricComponents[2];\n    String metricValue = gauge.getValue().toString();\n\n    // Get the lag value\n    int lag = Integer.parseInt(metricValue);\n\n    // Get the offsets\n    Long offset = Long.parseLong(metricEvent.getField(\"offset\"));\n    Long committedOffset = Long.parseLong(metricEvent.getField(\"committedOffset\"));\n\n    // Get the data timestamp\n    Long dataTimestamp = Long.parseLong(metricEvent.getField(\"dataTimestamp\"));\n\n    // Get the current time\n    Long currentTime = System.currentTimeMillis();\n\n    // Get the last time this metric was reported\n    Long lastReportedTime = kafkaLagTimes.get(metricGroup + \".\" + metricName);\n\n    // Update the metric event's fields\n    metricEvent.setField(\"lag\", lag);\n    metricEvent.setField(\"offset\", offset);\n    metricEvent.setField(\"committedOffset\", committedOffset);\n    metricEvent.setField(\"dataTimestamp\", dataTimestamp);\n    metricEvent.setField(\"currentTime\", currentTime);\n\n    // Set the metric event's timestamp\n    metricEvent.setTimestamp(timestamp);\n\n    // Update the last reported time for this metric\n    kafkaLagTimes.put(metricGroup + \".\" + metricName, currentTime);\n\n    // Return the updated metric event\n    return metricEvent;\n}", "CodeBleu_score": 35.465824659133254}, {"code": "static MetricEvent addKafkaLagMetricFields(MetricEvent metricEvent, Long timestamp, Gauge<?> gauge){\n\t    String[] components = gauge.getValue().toString().split(\"\\\\|\");\n    if (components.length != 3) {\n        return metricEvent;\n    }\n    String topic = components[0];\n    String partition = components[1];\n    String lag = components[2];\n    String key = topic + \":\" + partition;\n    Long lastTimestamp = kafkaLagTimes.get(key);\n    if (lastTimestamp == null || lastTimestamp < timestamp) {\n        metricEvent.setField(\"topic\", topic);\n        metricEvent.setField(\"partition\", partition);\n        metricEvent.setField(\"lag\", lag);\n        metricEvent.setField(\"dataTimestamp\", timestamp);\n        metricEvent.setField(\"committedOffsets\", kafkaLagCommittedOffsets.get(key));\n        kafkaLagTimes.put(key, timestamp);\n    }\n    return metricEvent;\n}", "CodeBleu_score": 34.92956034542276}]}
{"instance_id": "c2080c299bb0", "generation_result": [{"code": "public static DataStreamSource<MetricEvent> buildSource(StreamExecutionEnvironment env, String topic, Long time) throws IllegalAccessException{\n\t    ParameterTool parameterTool = ParameterTool.fromMap(env.getConfig().getGlobalJobParameters());\n    Properties properties = new Properties();\n    properties.put(PropertiesConstants.BOOTSTRAP_SERVERS, parameterTool.get(BOOTSTRAP_SERVERS));\n    properties.put(PropertiesConstants.GROUP_ID, parameterTool.get(GROUP_ID));\n    properties.put(PropertiesConstants.AUTO_OFFSET_RESET, parameterTool.get(AUTO_OFFSET_RESET));\n    properties.put(PropertiesConstants.KEY_DESERIALIZER, parameterTool.get(KEY_DESERIALIZER));\n    properties.put(PropertiesConstants.VALUE_DESERIALIZER, parameterTool.get(VALUE_DESERIALIZER));\n    properties.put(PropertiesConstants.SCHEMA_REGISTRY_URL, parameterTool.get(SCHEMA_REGISTRY_URL));\n    properties.put(PropertiesConstants.SCHEMA_REGISTRY_SUBJECT, parameterTool.get(SCHEMA_REGISTRY_SUBJECT));\n    properties.put(PropertiesConstants.SCHEMA_REGISTRY_VALUE_SUBJECT, parameterTool.get(SCHEMA_REGISTRY_VALUE_SUBJECT));\n    properties.put(PropertiesConstants.SCHEMA_REGISTRY_SUBJECT_VALUE_SUFFIX, parameterTool.get(SCHEMA_REGISTRY_SUBJECT_VALUE_SUFFIX));\n    properties.put(PropertiesConstants.SCHEMA_REGISTRY_SUBJECT_KEY_SUFFIX, parameterTool.get(SCHEMA_REGISTRY_SUBJECT_KEY_SUFFIX));\n    properties.put(PropertiesConstants.SCHEMA_REGISTRY_SUBJECT_VERSION, parameterTool.get(SCHEMA_REGISTRY_SUBJECT_VERSION));\n    properties.put(PropertiesConstants.SCHEMA_REGISTRY_SUBJECT_VERSION_VALUE_SUFFIX, parameterTool.get(SCHEMA_REGISTRY_SUBJECT_VERSION_VALUE_SUFFIX));\n    properties.put(PropertiesConstants.SCHEMA_REGISTRY_SUBJECT_VERSION_KEY_SUFFIX, parameterTool.get(SCHEMA_REGISTRY", "CodeBleu_score": 30.766107913338963}, {"code": "public static DataStreamSource<MetricEvent> buildSource(StreamExecutionEnvironment env, String topic, Long time) throws IllegalAccessException{\n\t    ParameterTool parameterTool = (ParameterTool) env.getConfig().getGlobalJobParameters();\n    Properties properties = new Properties();\n    properties.put(PropertiesConstants.BOOTSTRAP_SERVERS, parameterTool.get(BOOTSTRAP_SERVERS));\n    properties.put(PropertiesConstants.GROUP_ID, parameterTool.get(GROUP_ID));\n    properties.put(PropertiesConstants.AUTO_OFFSET_RESET, parameterTool.get(AUTO_OFFSET_RESET));\n    properties.put(PropertiesConstants.KEY_DESERIALIZER, parameterTool.get(KEY_DESERIALIZER));\n    properties.put(PropertiesConstants.VALUE_DESERIALIZER, parameterTool.get(VALUE_DESERIALIZER));\n    properties.put(PropertiesConstants.SPECIFIC_OFFSETS, parameterTool.get(SPECIFIC_OFFSETS));\n    properties.put(PropertiesConstants.OFFSET_RESET, parameterTool.get(OFFSET_RESET));\n    properties.put(PropertiesConstants.SPECIFIC_START_TIME, parameterTool.get(SPECIFIC_START_TIME));\n    properties.put(PropertiesConstants.START_TIME, parameterTool.get(START_TIME));\n    properties.put(PropertiesConstants.TIMESTAMP_TYPE, parameterTool.get(TIMESTAMP_TYPE));\n    properties.put(PropertiesConstants.POLL_INTERVAL_MS, parameterTool.get(POLL_INTERVAL_MS));\n\n    FlinkKafkaConsumer<MetricEvent> metricEventFlinkKafkaConsumer = new FlinkKafkaConsumer<>(topic, new MetricSchema(), properties);\n\n    if (time != null) {\n        List<PartitionInfo> partitionInfos = metricEventFlinkKafkaConsumer.listPartitions();\n        Map<TopicPartition, Long> specificStartTimeOffsets = new HashMap<>();\n        for (PartitionInfo partitionInfo : partitionInfos) {\n            specificStartTimeOffsets.put(new TopicPartition(partitionInfo.topic(), partitionInfo.partition()), time);\n        }\n\n        KafkaConsumer<byte[], byte[]> kafkaConsumer = new KafkaConsumer<>(", "CodeBleu_score": 49.56059944575549}, {"code": "public static DataStreamSource<MetricEvent> buildSource(StreamExecutionEnvironment env, String topic, Long time) throws IllegalAccessException{\n\t    ParameterTool parameterTool = (ParameterTool) env.getConfig().getGlobalJobParameters();\n    Properties properties = new Properties();\n    properties.put(PropertiesConstants.KAFKA_TOPIC, topic);\n    properties.put(PropertiesConstants.KAFKA_GROUP_ID, parameterTool.get(GROUP_ID));\n    properties.put(PropertiesConstants.KAFKA_BOOTSTRAP_SERVERS, parameterTool.get(BOOTSTRAP_SERVERS));\n    properties.put(PropertiesConstants.KAFKA_AUTO_OFFSET_RESET, parameterTool.get(AUTO_OFFSET_RESET));\n    properties.put(PropertiesConstants.KAFKA_ENABLE_AUTO_COMMIT, parameterTool.get(ENABLE_AUTO_COMMIT));\n    properties.put(PropertiesConstants.KAFKA_AUTO_COMMIT_INTERVAL_MS, parameterTool.get(AUTO_COMMIT_INTERVAL_MS));\n    properties.put(PropertiesConstants.KAFKA_SESSION_TIMEOUT_MS, parameterTool.get(SESSION_TIMEOUT_MS));\n    properties.put(PropertiesConstants.KAFKA_KEY_DESERIALIZER, parameterTool.get(KEY_DESERIALIZER));\n    properties.put(PropertiesConstants.KAFKA_VALUE_DESERIALIZER, parameterTool.get(VALUE_DESERIALIZER));\n    properties.put(PropertiesConstants.KAFKA_SPECIFIC_OFFSETS_FOR_TIMESTAMP, parameterTool.get(SPECIFIC_OFFSETS_FOR_TIMESTAMP));\n    properties.put(PropertiesConstants.KAFKA_REQUEST_TIMEOUT_MS, parameterTool.get(REQUEST_TIMEOUT_MS));\n    properties.put(PropertiesConstants.KAFKA_MAX_POLL_RECORDS, parameterTool.get(MAX_POLL_RECORDS));\n    properties.put(PropertiesConstants.KAFKA_POLL_INTERVAL_MS, parameterTool.get(POLL_INTERVAL_MS));\n    properties.put(PropertiesConstants.KAFKA_FETCH_MIN_BYT", "CodeBleu_score": 34.50044769687221}]}
{"instance_id": "5e828afbe8e4", "generation_result": [{"code": "private static Map<KafkaTopicPartition, Long> buildOffsetByTime(Properties props, ParameterTool parameterTool, Long time){\n\t    String topic = parameterTool.get(TOPIC);\n    String groupId = parameterTool.get(GROUP_ID);\n    KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);\n    List<PartitionInfo> partitionInfos = consumer.partitionsFor(topic);\n    Map<KafkaTopicPartition, Long> partitionOffsets = new HashMap<>();\n    for (PartitionInfo partitionInfo : partitionInfos) {\n        TopicPartition partition = new TopicPartition(partitionInfo.topic(), partitionInfo.partition());\n        OffsetAndTimestamp offsetAndTimestamp = consumer.offsetsForTimes(new TopicPartition(partition.topic(), partition.partition()), time);\n        if (offsetAndTimestamp != null) {\n            partitionOffsets.put(new KafkaTopicPartition(partition.topic(), partition.partition()), offsetAndTimestamp.offset());\n        }\n    }\n    consumer.close();\n    return partitionOffsets;\n}", "CodeBleu_score": 53.70479198717657}, {"code": "private static Map<KafkaTopicPartition, Long> buildOffsetByTime(Properties props, ParameterTool parameterTool, Long time){\n\t    String topic = parameterTool.get(TOPIC);\n    String groupId = parameterTool.get(GROUP_ID);\n    // get partition information for the topic\n    List<PartitionInfo> partitionInfos = new KafkaConsumer<>(props).partitionsFor(topic);\n    // create a map associating each partition with the timestamp\n    Map<TopicPartition, Long> partitionTimes = new HashMap<>();\n    for (PartitionInfo partitionInfo : partitionInfos) {\n        partitionTimes.put(new TopicPartition(partitionInfo.topic(), partitionInfo.partition()), time);\n    }\n    // create a KafkaConsumer\n    KafkaConsumer<byte[], byte[]> consumer = new KafkaConsumer<>(props);\n    // retrieve offsets for the given times\n    Map<TopicPartition, OffsetAndTimestamp> offsetsForTimes = consumer.offsetsForTimes(partitionTimes);\n    // close the consumer\n    consumer.close();\n    // create a map associating each partition with the offset\n    Map<KafkaTopicPartition, Long> partitionOffsets = new HashMap<>();\n    for (Map.Entry<TopicPartition, OffsetAndTimestamp> entry : offsetsForTimes.entrySet()) {\n        partitionOffsets.put(new KafkaTopicPartition(entry.getKey().topic(), entry.getKey().partition()), entry.getValue().offset());\n    }\n    return partitionOffsets;\n}", "CodeBleu_score": 55.19578965969273}, {"code": "private static Map<KafkaTopicPartition, Long> buildOffsetByTime(Properties props, ParameterTool parameterTool, Long time){\n\t    String topic = parameterTool.get(PropertiesConstants.TOPIC_NAME);\n    String groupId = parameterTool.get(PropertiesConstants.GROUP_ID);\n    KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);\n    consumer.subscribe(List.of(topic));\n    Map<TopicPartition, OffsetAndTimestamp> offsetsForTimes = consumer.offsetsForTimes(new HashMap<>());\n    consumer.close();\n    Map<KafkaTopicPartition, Long> partitionOffsets = new HashMap<>();\n    List<PartitionInfo> partitionInfos = consumer.partitionsFor(topic);\n    for (PartitionInfo partitionInfo : partitionInfos) {\n        TopicPartition topicPartition = new TopicPartition(partitionInfo.topic(), partitionInfo.partition());\n        OffsetAndTimestamp offsetAndTimestamp = offsetsForTimes.get(topicPartition);\n        if (offsetAndTimestamp != null) {\n            partitionOffsets.put(new KafkaTopicPartition(topic, partitionInfo.partition()), offsetAndTimestamp.offset());\n        }\n    }\n    return partitionOffsets;\n}", "CodeBleu_score": 48.88304323704371}]}
{"instance_id": "28da89f56f67", "generation_result": [{"code": "public static void writeToKafka() throws InterruptedException{\n\t\n    // create producer properties\n    Properties properties = new Properties();\n    properties.put(\"bootstrap.servers\", \"localhost:9092\");\n    properties.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n    properties.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n\n    // create the producer\n    KafkaProducer<String, String> producer = new KafkaProducer<>(properties);\n\n    // create the event\n    MetricEvent event = new MetricEvent();\n    event.setTimestamp(System.currentTimeMillis());\n    event.setName(\"metric-name\");\n    Map<String, String> tags = new HashMap<>();\n    tags.put(\"tag1\", \"value1\");\n    tags.put(\"tag2\", \"value2\");\n    event.setTags(tags);\n    Map<String, Double> fields = new HashMap<>();\n    fields.put(\"field1\", 1.0);\n    fields.put(\"field2\", 2.0);\n    event.setFields(fields);\n\n    // send the event\n    String serializedEvent = GsonUtil.GSON.toJson(event);\n    ProducerRecord<String, String> record = new ProducerRecord<>(\"metric-topic\", serializedEvent);\n    producer.send(record);\n\n    // flush the producer to ensure all data is sent\n    producer.flush();\n\n    // print the sent data\n    System.out.println(\"Sent: \" + serializedEvent);\n\n    // close the producer\n    producer.close();\n}", "CodeBleu_score": 60.25428757796464}, {"code": "public static void writeToKafka() throws InterruptedException{\n\t    Properties props = new Properties();\n    props.put(\"bootstrap.servers\", \"localhost:9092\");\n    props.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n    props.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n\n    KafkaProducer<String, String> producer = new KafkaProducer<>(props);\n\n    MetricEvent metricEvent = new MetricEvent();\n    metricEvent.setTimestamp(System.currentTimeMillis());\n    metricEvent.setName(\"metric\");\n    Map<String, String> tags = new HashMap<>();\n    tags.put(\"tag1\", \"value1\");\n    metricEvent.setTags(tags);\n    Map<String, Double> fields = new HashMap<>();\n    fields.put(\"field1\", 1.0);\n    metricEvent.setFields(fields);\n\n    String metricEventString = GsonUtil.GSON.toJson(metricEvent);\n    ProducerRecord<String, String> record = new ProducerRecord<>(\"metric-topic\", metricEventString);\n    producer.send(record);\n    producer.flush();\n    System.out.println(\"Sent data: \" + metricEventString);\n}", "CodeBleu_score": 61.414122638939915}, {"code": "public static void writeToKafka() throws InterruptedException{\n\t    Properties props = new Properties();\n    props.put(\"bootstrap.servers\", \"localhost:9092\");\n    props.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n    props.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n    KafkaProducer<String, String> producer = new KafkaProducer<>(props);\n\n    MetricEvent metricEvent = new MetricEvent();\n    metricEvent.setTimestamp(System.currentTimeMillis());\n    metricEvent.setName(\"metric\");\n    Map<String, String> tags = new HashMap<>();\n    tags.put(\"tag1\", \"value1\");\n    tags.put(\"tag2\", \"value2\");\n    metricEvent.setTags(tags);\n    Map<String, Double> fields = new HashMap<>();\n    fields.put(\"field1\", 1.0);\n    fields.put(\"field2\", 2.0);\n    metricEvent.setFields(fields);\n\n    String serializedMetricEvent = GsonUtil.GSON.toJson(metricEvent);\n    System.out.println(\"Sending event: \" + serializedMetricEvent);\n    ProducerRecord<String, String> record = new ProducerRecord<>(\"metric-topic\", serializedMetricEvent);\n    producer.send(record);\n    producer.flush();\n    System.out.println(\"Sent event: \" + serializedMetricEvent);\n    producer.close();\n}", "CodeBleu_score": 63.243823217376715}]}
{"instance_id": "14bffe09c25a", "generation_result": [{"code": "public void append(org.apache.logging.log4j.core.LogEvent event){\n\t    try {\n        if (event.getLevel().isLessSpecificThan(threshold)) {\n            return;\n        }\n        if (event.getLoggerName().contains(\"xxx\")) {\n            return;\n        }\n        LogEvent logEvent = new LogEvent(\n                event.getLoggerName(),\n                event.getLevel().name(),\n                event.getMessage().getFormattedMessage(),\n                event.getTimeMillis(),\n                event.getThreadName(),\n                event.getSource().getClassName(),\n                event.getSource().getMethodName(),\n                event.getContextMap()\n        );\n        String logEventStr = JacksonUtil.writeValueAsString(logEvent);\n        if (logEventStr != null) {\n            ProducerRecord<String, String> record = new ProducerRecord<>(topic, logEventStr);\n            producer.send(record);\n        }\n    } catch (Exception e) {\n        log.warn(\"Exception while sending log event\", e);\n    }\n}", "CodeBleu_score": 49.53639513891491}, {"code": "public void append(org.apache.logging.log4j.core.LogEvent event){\n\t    if (event.getLevel().isLessSpecificThan(threshold)) {\n        return;\n    }\n\n    String loggerName = event.getLoggerName();\n    if (loggerName != null && loggerName.contains(loggerNameFilter)) {\n        return;\n    }\n\n    try {\n        String eventMessage = new String(layout.toByteArray(event), \"UTF-8\");\n        LogEvent logEvent = JacksonUtil.toObj(eventMessage, LogEvent.class);\n        if (logEvent != null) {\n            String topic = topicName;\n            if (topic == null) {\n                topic = \"flink-log\";\n            }\n            ProducerRecord<String, String> record = new ProducerRecord<>(topic, JacksonUtil.toJson(logEvent));\n            producer.send(record);\n        }\n    } catch (Exception e) {\n        log.warn(\"Error sending event to Kafka\", e);\n    }\n}", "CodeBleu_score": 40.13201095432203}, {"code": "public void append(org.apache.logging.log4j.core.LogEvent event){\n\t    if (event.getLevel().isLessSpecificThan(threshold) && !event.getLoggerName().contains(\"xxx\")) {\n        try {\n            LogEvent logEvent = new LogEvent();\n            logEvent.setLoggerName(event.getLoggerName());\n            logEvent.setLevel(event.getLevel().name());\n            logEvent.setMessage(event.getMessage().getFormattedMessage());\n            logEvent.setThreadName(event.getThreadName());\n            logEvent.setTimeStamp(event.getTimeMillis());\n            String json = JacksonUtil.toJson(logEvent);\n            log.info(\"send message to kafka: {}\", json);\n            producer.send(new ProducerRecord<>(topic, json));\n        } catch (Exception e) {\n            log.warn(\"Exception in KafkaAppender: {}\", ExceptionUtil.getErrorMessage(e));\n        }\n    }\n}", "CodeBleu_score": 46.78878638841435}]}
{"instance_id": "a9e0786fb5c1", "generation_result": [{"code": "func ValidateTopicSuffixMethod(method string) error{\n\t\tvalidMethods := []string{\"topic_name\", \"topic_name_uuid\", \"topic_name_uuid_time\", \"topic_name_uuid_time_index\", \"topic_name_uuid_time_index_partition\", \"topic_name_uuid_time_index_partition_sequence\", \"topic_name_uuid_time_index_partition_sequence_sequence\"}\n\tfor _, validMethod := range validMethods {\n\t\tif method == validMethod {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn fmt.Errorf(\"unknown topic suffix method: %s\", method)\n}", "CodeBleu_score": 72.66359995557318}, {"code": "func ValidateTopicSuffixMethod(method string) error{\n\t\tvar validTopicSuffixMethods = []string{\"timestamp\", \"uuid\", \"none\"}\n\tfor _, validMethod := range validTopicSuffixMethods {\n\t\tif method == validMethod {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn fmt.Errorf(\"unknown topic suffix method: %s\", method)\n}", "CodeBleu_score": 67.44548060571576}, {"code": "func ValidateTopicSuffixMethod(method string) error{\n\t\tvalidTopicSuffixMethods := []string{\"none\", \"topic_name\", \"topic_name_suffix\", \"topic_name_suffix_with_timestamp\", \"topic_name_suffix_with_timestamp_and_random_id\"}\n\tfor _, validMethod := range validTopicSuffixMethods {\n\t\tif method == validMethod {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn fmt.Errorf(\"topic_suffix_method must be one of: %s\", strings.Join(validTopicSuffixMethods, \", \"))\n}", "CodeBleu_score": 64.27264793306779}]}
{"instance_id": "9b88d720d48a", "generation_result": [{"code": "func (k *Kafka) routingKey(metric telegraf.Metric) (string, error) {\n\t\tif k.RoutingTag == \"\" {\n\t\treturn k.RoutingKey, nil\n\t}\n\troutingKey, ok := metric.Tags()[k.RoutingTag]\n\tif !ok {\n\t\treturn \"\", fmt.Errorf(\"routing tag %s not found in metric\", k.RoutingTag)\n\t}\n\treturn routingKey, nil\n}", "CodeBleu_score": 41.996605055429434}, {"code": "func (k *Kafka) routingKey(metric telegraf.Metric) (string, error) {\n\t\tif k.RoutingTag != \"\" {\n\t\tif routingKey, ok := metric.GetTag(k.RoutingTag); ok {\n\t\t\treturn routingKey, nil\n\t\t}\n\t}\n\n\tif k.RoutingKey == \"random\" {\n\t\tuuid, err := uuid.NewV5(uuid.NamespaceOID, []byte(metric.Name()))\n\t\tif err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\t\treturn uuid.String(), nil\n\t}\n\n\treturn k.RoutingKey, nil\n}", "CodeBleu_score": 76.78077674502394}, {"code": "func (k *Kafka) routingKey(metric telegraf.Metric) (string, error) {\n\t\tif k.RoutingTag != \"\" {\n\t\tif routingKey, ok := metric.Tags()[k.RoutingTag]; ok {\n\t\t\treturn routingKey, nil\n\t\t}\n\t}\n\tif k.RoutingKey == \"random\" {\n\t\tid, err := uuid.NewV5(uuid.NamespaceURL, metric.Name())\n\t\tif err != nil {\n\t\t\treturn \"\", err\n\t\t}\n\t\treturn id.String(), nil\n\t}\n\treturn k.RoutingKey, nil\n}", "CodeBleu_score": 74.87887028608017}]}
{"instance_id": "dc35e80e7f8d", "generation_result": [{"code": "func (k *KafkaConsumer) compileTopicRegexps() error{\n\t\tif k.TopicRegexps == nil {\n\t\treturn nil\n\t}\n\tif len(k.TopicRegexps) == 0 {\n\t\treturn nil\n\t}\n\n\tk.regexps = make([]*regexp.Regexp, 0, len(k.TopicRegexps))\n\n\tfor _, topicRegexp := range k.TopicRegexps {\n\t\tregexp, err := regexp.Compile(topicRegexp)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"could not compile topic regexp %q: %s\", topicRegexp, err)\n\t\t}\n\t\tk.regexps = append(k.regexps, regexp)\n\t}\n\treturn nil\n}", "CodeBleu_score": 59.19567435850581}, {"code": "func (k *KafkaConsumer) compileTopicRegexps() error{\n\t\tif len(k.TopicRegexps) == 0 {\n\t\treturn nil\n\t}\n\tk.regexps = make([]*regexp.Regexp, 0, len(k.TopicRegexps))\n\tfor _, regexpString := range k.TopicRegexps {\n\t\tregexp, err := regexp.Compile(regexpString)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed to compile topic regexp %q: %s\", regexpString, err)\n\t\t}\n\t\tk.regexps = append(k.regexps, regexp)\n\t}\n\treturn nil\n}", "CodeBleu_score": 60.50232585108783}, {"code": "func (k *KafkaConsumer) compileTopicRegexps() error{\n\t\tif len(k.TopicRegexps) == 0 {\n\t\treturn fmt.Errorf(\"topic_regexps is empty\")\n\t}\n\n\tk.regexps = make([]*regexp.Regexp, len(k.TopicRegexps))\n\tfor i, topicRegexp := range k.TopicRegexps {\n\t\tregexp, err := regexp.Compile(topicRegexp)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed to compile topic_regexp %s: %s\", topicRegexp, err)\n\t\t}\n\t\tk.regexps[i] = regexp\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 53.73263309794972}]}
{"instance_id": "daf09ba144b2", "generation_result": [{"code": "func (h *ConsumerGroupHandler) onDelivery(track telegraf.DeliveryInfo){\n\t\th.Lock()\n\tdefer h.Unlock()\n\tif m, ok := h.undelivered[track.Delivery]; ok {\n\t\tm.MarkDead()\n\t\tdelete(h.undelivered, track.Delivery)\n\t}\n\th.semaphore <- struct{}{}\n}", "CodeBleu_score": 42.669784882628015}, {"code": "func (h *ConsumerGroupHandler) onDelivery(track telegraf.DeliveryInfo){\n\t\th.Lock()\n\tdefer h.Unlock()\n\tif _, ok := h.undelivered[track.DeliveryID]; !ok {\n\t\treturn\n\t}\n\tmsg := h.undelivered[track.DeliveryID]\n\tif msg.Topic == track.Topic && msg.Partition == track.Partition && msg.Offset == track.Offset {\n\t\th.session.MarkMessage(msg, \"\")\n\t\tdelete(h.undelivered, track.DeliveryID)\n\t\th.semaphore <- struct{}{}\n\t}\n}", "CodeBleu_score": 50.62214042572908}, {"code": "func (h *ConsumerGroupHandler) onDelivery(track telegraf.DeliveryInfo){\n\t\th.Lock()\n\tdefer h.Unlock()\n\tif msg, ok := h.undelivered[track.DeliveryID]; ok {\n\t\ttrack.Message = msg\n\t\th.session.MarkMessage(msg, \"\")\n\t\tdelete(h.undelivered, track.DeliveryID)\n\t\th.semaphore <- struct{}{}\n\t}\n}", "CodeBleu_score": 50.03821913674319}]}
{"instance_id": "8ecf2a1efead", "generation_result": [{"code": "func (h *ConsumerGroupHandler) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error{\n\t\tfor {\n\t\tselect {\n\t\tcase <-session.Context().Done():\n\t\t\treturn nil\n\t\tcase msg := <-claim.Messages():\n\t\t\t// TODO: Handle error\n\t\t\tif h.ConsumerGroup.Consumer.Handler != nil {\n\t\t\t\th.ConsumerGroup.Consumer.Handler.ConsumeClaim(session, claim)\n\t\t\t}\n\t\t\tif err := session.MarkMessage(msg, \"\") ; err != nil {\n\t\t\t\th.Log.Errorf(\"Failed to mark message: %s\", err)\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 40.804162669587676}, {"code": "func (h *ConsumerGroupHandler) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error{\n\t\tfor {\n\t\tselect {\n\t\tcase <-session.Context().Done():\n\t\t\treturn session.Context().Err()\n\t\tcase msg, ok := <-claim.Messages():\n\t\t\tif !ok {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\th.handleMessage(session, msg)\n\t\t\tclaim.Commit()\n\t\t}\n\t}\n}", "CodeBleu_score": 34.675738941563935}, {"code": "func (h *ConsumerGroupHandler) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error{\n\t\tfor {\n\t\tselect {\n\t\tcase <-session.Context().Done():\n\t\t\treturn session.Context().Err()\n\t\tcase msg, ok := <-claim.Messages():\n\t\t\tif !ok {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif err := h.handleMessage(session, msg); err != nil {\n\t\t\t\th.Log.Errorf(\"Error handling message: %v\", err)\n\t\t\t}\n\t\t\tclaim.Commit()\n\t\t}\n\t}\n}", "CodeBleu_score": 52.074998568935946}]}
{"instance_id": "eba9dafa99ab", "generation_result": [{"code": "def validateLogkafkaId(logkafka_id: String){\n\t\n  if (logkafka_id == null || logkafka_id.isEmpty) {\n    throw new Exception(\"Logkafka ID is null or empty\")\n  }\n\n  if (logkafka_id == \".\" || logkafka_id == \"..\") {\n    throw new Exception(\"Logkafka ID cannot be '.' or '..'\")\n  }\n\n  if (logkafka_id.length > 255) {\n    throw new Exception(\"Logkafka ID cannot exceed 255 characters\")\n  }\n\n  if (!logkafka_id.matches(\"^[a-zA-Z0-9\\\\-_]+$\")) {\n    throw new Exception(\"Logkafka ID can only contain alphanumeric characters, hyphens and underscores\")\n  }\n\n  logkafka_id\n}", "CodeBleu_score": 23.890865216028807}, {"code": "def validateLogkafkaId(logkafka_id: String){\n\t\n  if (logkafka_id == null) {\n    throw new IllegalArgumentException(\"Logkafka ID cannot be null\")\n  }\n\n  if (logkafka_id.equals(\".\")) {\n    throw new IllegalArgumentException(\"Logkafka ID cannot be \\\".\\\"\")\n  }\n\n  if (logkafka_id.equals(\"..\")) {\n    throw new IllegalArgumentException(\"Logkafka ID cannot be \\\"..\\\"\")\n  }\n\n  if (logkafka_id.length() > 100) {\n    throw new IllegalArgumentException(\"Logkafka ID cannot exceed 100 characters\")\n  }\n\n  val pattern = Pattern.compile(\"^[a-zA-Z0-9\\\\-_\\\\.]+$\")\n  val matcher = pattern.matcher(logkafka_id)\n\n  if (!matcher.matches()) {\n    throw new IllegalArgumentException(\"Logkafka ID can only contain alphanumeric characters, underscores, hyphens and periods\")\n  }\n\n}", "CodeBleu_score": 27.739693186339377}, {"code": "def validateLogkafkaId(logkafka_id: String){\n\t  if (logkafka_id == null || logkafka_id.trim == \"\") {\n    throw new Exception(\"Logkafka ID cannot be empty\")\n  }\n  if (logkafka_id == \".\" || logkafka_id == \"..\") {\n    throw new Exception(\"Logkafka ID cannot be \\\".\\\" or \\\"..\\\"\")\n  }\n  if (logkafka_id.length > 255) {\n    throw new Exception(\"Logkafka ID cannot exceed 255 characters\")\n  }\n  if (!logkafka_id.matches(\"^[a-zA-Z0-9\\\\-_]+$\")) {\n    throw new Exception(\"Logkafka ID can only contain alphanumeric characters, \\\"-\\\" and \\\"_\\\"\")\n  }\n  logkafka_id\n}", "CodeBleu_score": 23.714020015896057}]}
{"instance_id": "45d5aefd3f6c", "generation_result": [{"code": "  private[this] def tryWithKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => FOutput)\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t    implicit val ec = context.dispatcher\n    val p = Promise[ApiError \\/ FOutput]()\n    kafkaManagerActor.ask(msg)(timeout).mapTo[ApiError \\/ Output] onComplete {\n      case Success(result) =>\n        result match {\n          case \\/-(out) =>\n            try {\n              p success \\/-(fn(out))\n            } catch {\n              case t: Throwable =>\n                log.error(t, \"Exception thrown while processing KafkaManager response\")\n                p failure ApiError(s\"Exception thrown while processing KafkaManager response: ${t.getMessage}\")\n            }\n          case -\\/(error) =>\n            log.error(s\"Error received from KafkaManager: $error\")\n            p failure error\n        }\n      case Failure(t) =>\n        log.error(t, \"Exception thrown while processing KafkaManager response\")\n        p failure ApiError(s\"Exception thrown while processing KafkaManager response: ${t.getMessage}\")\n    }\n    p.future\n  }", "CodeBleu_score": 29.580808604897445}, {"code": "  private[this] def tryWithKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => FOutput)\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t    kafkaManagerActor ? msg map {\n      case r: ApiError => -\\/(r)\n      case r: Output => \\/-(fn(r))\n      case r =>\n        logger.error(s\"Unexpected response from Kafka Manager actor: $r\")\n        -\\/(ApiError.UnknownError(s\"Unexpected response from Kafka Manager actor: $r\"))\n    } recover {\n      case e: Throwable =>\n        logger.error(s\"Unexpected error from Kafka Manager actor: $e\")\n        -\\/(ApiError.UnknownError(s\"Unexpected error from Kafka Manager actor: $e\"))\n    }\n  }", "CodeBleu_score": 41.689435251716546}, {"code": "  private[this] def tryWithKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => FOutput)\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t    implicit val ec: ExecutionContext = context.dispatcher\n    val p = Promise[ApiError \\/ FOutput]()\n    kafkaManagerActor ! msg\n    kafkaManagerActor.ask(replyTo => KafkaManagerActor.Response(replyTo)).mapTo[Output]\n      .onComplete {\n        case Success(output) => p.success(fn(output).right)\n        case Failure(e) =>\n          log.error(e, \"Error while processing request\")\n          p.success(ApiError.error(e).left)\n      }\n    p.future\n  }", "CodeBleu_score": 23.17667276788952}]}
{"instance_id": "a535ce861222", "generation_result": [{"code": "  private[this] def withKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => Future[ApiError \\/ FOutput])\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t    kafkaManager.actorRef ? msg map {\n      case response: Output =>\n        fn(response)\n      case response: ActorErrorResponse =>\n        Future.successful(-\\/(ApiError(s\"Actor error: ${response.msg}\")))\n      case _ =>\n        Future.successful(-\\/(ApiError(s\"Unexpected response from Kafka Manager actor\")))\n    } recover {\n      case t: Throwable =>\n        Future.successful(-\\/(ApiError(s\"Unexpected error from Kafka Manager actor: ${t.getMessage}\")))\n    }\n  }", "CodeBleu_score": 52.51511263028835}, {"code": "  private[this] def withKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => Future[ApiError \\/ FOutput])\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t    (kafkaManagerActor ? msg).flatMap {\n      case response: Output =>\n        fn(response)\n      case response: ActorErrorResponse =>\n        Future.successful(-\\/(ApiError(response.error)))\n      case response =>\n        Future.failed(new IllegalArgumentException(s\"Unexpected response type: ${response.getClass}\"))\n    }\n  }", "CodeBleu_score": 28.339071628205048}, {"code": "  private[this] def withKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => Future[ApiError \\/ FOutput])\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t    val p = Promise[ApiError \\/ FOutput]()\n    kafkaManager.actor ! msg\n    kafkaManager.actor ! KafkaManagerActor.GetResponse(p)\n    p.future.flatMap(_.fold(\n      error => Future.successful(-\\/(error)),\n      response => {\n        response match {\n          case output: Output => fn(output)\n          case _ => Future.successful(-\\/(ApiError(s\"Unexpected output type ${response.getClass.getName}.\")))\n        }\n      }\n    ))\n  }", "CodeBleu_score": 26.393271246370166}]}
{"instance_id": "ad37d3914acc", "generation_result": [{"code": "  def runPreferredLeaderElection(clusterName: String, topics: Set[String]): Future[ApiError \\/ ClusterContext] ={\n\t    val command = KMClusterCommandRequest(clusterName, KMClusterCommand.RunPreferredLeaderElection, Some(topics))\n    sendCommandToKafkaManagerActor(command)\n  }", "CodeBleu_score": 19.488380710967096}, {"code": "  def runPreferredLeaderElection(clusterName: String, topics: Set[String]): Future[ApiError \\/ ClusterContext] ={\n\t    val command = KMClusterCommandRequest(clusterName, KMClusterCommand(PreferredLeaderElectionCommand, topics))\n    sendCommandToKafkaManager(command).map(mapKMClusterCommandResponse)\n  }", "CodeBleu_score": 20.285087506529802}, {"code": "  def runPreferredLeaderElection(clusterName: String, topics: Set[String]): Future[ApiError \\/ ClusterContext] ={\n\t    val commandRequest = KMClusterCommandRequest(clusterName, PreferredLeaderElectionCommand(topics))\n    sendCommandRequest(commandRequest)\n  }", "CodeBleu_score": 19.270927793198666}]}
{"instance_id": "3ecdb2c1534f", "generation_result": [{"code": "private def runPreferredLeaderElectionWithAllTopics(clusterName: String) ={\n\t  val cluster = clusters.get(clusterName)\n  if (cluster == null)\n    throw new IllegalArgumentException(s\"Cluster '$clusterName' not found\")\n  val topics = cluster.getTopics\n  if (topics == null)\n    throw new IllegalArgumentException(s\"Cluster '$clusterName' has no topics\")\n  if (topics.isEmpty)\n    throw new IllegalArgumentException(s\"Cluster '$clusterName' has no topics\")\n  val topicNames = topics.asScala.map(_.getName).asJava\n  runPreferredLeaderElection(clusterName, topicNames)\n}", "CodeBleu_score": 14.205303220067295}, {"code": "private def runPreferredLeaderElectionWithAllTopics(clusterName: String) ={\n\t  implicit val executionContext = ExecutionContext.Implicits.global\n  val cluster = getClusterByName(clusterName)\n  if (cluster.isDefined) {\n    val topics = getTopicsByCluster(cluster.get.id)\n    if (topics.isDefined) {\n      topics.get.foreach(topic => runPreferredLeaderElection(cluster.get.id, topic.name))\n    } else {\n      None\n    }\n  } else {\n    None\n  }\n}", "CodeBleu_score": 21.334567632699077}, {"code": "private def runPreferredLeaderElectionWithAllTopics(clusterName: String) ={\n\t  implicit val ec: ExecutionContext = ExecutionContext.Implicits.global\n  implicit val timeout: Timeout = Timeout(100000, TimeUnit.MILLISECONDS)\n  val cluster = Cluster(clusterName)\n  val topicsFuture: Future[Seq[Topic]] = cluster.getTopics()\n  topicsFuture.map { topics =>\n    topics.foreach(topic => runPreferredLeaderElection(clusterName, topic.name))\n  }\n}", "CodeBleu_score": 21.573906869450333}]}
{"instance_id": "5955ade118b9", "generation_result": [{"code": "def manualPartitionAssignments(clusterName: String,\n                                 assignments: List[(String, List[(Int, List[Int])])]) = {\n\t  implicit val ec = context.system.dispatcher\n  val kmActor = KMClusterSingletonProxy.getKMClusterSingletonProxy(context.system).getActorRef()\n  val request = KMClusterCommandRequest(clusterName, ManualPartitionAssignmentsCommand(assignments))\n  val future = (kmActor ? request).mapTo[KMClusterCommandResponse]\n  future.map { response =>\n    response.command match {\n      case ManualPartitionAssignmentsCommand(assignments) =>\n        response.result match {\n          case ManualPartitionAssignmentsResult(errors) =>\n            if (errors.isEmpty) {\n              Success(s\"Successfully assigned partitions for cluster $clusterName\")\n            } else {\n              Failure(s\"Failed to assign partitions for cluster $clusterName\", errors)\n            }\n        }\n    }\n  }\n}", "CodeBleu_score": 24.52354019276371}, {"code": "def manualPartitionAssignments(clusterName: String,\n                                 assignments: List[(String, List[(Int, List[Int])])]) = {\n\t  implicit val ec: ExecutionContext = ExecutionContext.Implicits.global\n  implicit val timeout: Timeout = Timeout(10 seconds)\n  val kafkaManagerContext: ActorRef = AkkaContext.getKafkaManagerContext()\n  val clusterContextFuture = (kafkaManagerContext ? GetClusterContext(clusterName)).mapTo[Option[ActorRef]]\n  clusterContextFuture.map { clusterContext =>\n    clusterContext match {\n      case Some(clusterContext) =>\n        val clusterRequest = KMClusterCommandRequest(clusterName,\n          KMClusterCommand(ManualPartitionAssignmentsCommand(assignments)))\n        clusterContext ! clusterRequest\n        val responseFuture = (clusterContext ? clusterRequest).mapTo[KMClusterCommandResponse]\n        responseFuture.map { response =>\n          response.result match {\n            case Some(result) =>\n              result.success match {\n                case true =>\n                  val assignments = result.commandResult.asInstanceOf[ManualPartitionAssignmentsCommandResult].assignments\n                  val assignmentsMap = assignments.map { assignment =>\n                    assignment._1 -> assignment._2.map { partitionAssignment =>\n                      partitionAssignment._1 -> partitionAssignment._2.map { broker => broker.id }\n                    }\n                  }\n                  val assignmentsJson = Json.toJson(assignmentsMap)\n                  Ok(assignmentsJson)\n                case false =>\n                  val error = result.error.getOrElse(\"Unknown error.\")\n                  BadRequest(Json.toJson(Map(\"result\" -> false, \"error\" -> error)))\n              }\n            case None =>\n              val error = \"No response from cluster.\"\n              BadRequest(Json.toJson(Map(\"result\" -> false, \"error\" -> error)))\n          }\n        }\n      case None =>\n        val error = \"Cluster \" + clusterName + \" is not registered.\"\n        BadRequest(Json.toJson(Map(\"result\" -> false, \"error\" -> error)))\n    }\n  }\n}", "CodeBleu_score": 15.907872515209059}, {"code": "def manualPartitionAssignments(clusterName: String,\n                                 assignments: List[(String, List[(Int, List[Int])])]) = {\n\t  implicit val ec: ExecutionContext = ExecutionContext.Implicits.global\n\n  val request = KMClusterCommandRequest(clusterName,\n    KMClusterCommand(ManualPartitionAssignments(assignments)))\n\n  val future = (kafkaManager ? request).mapTo[KMClusterCommandResponse]\n\n  val response = Await.result(future, timeout.duration)\n\n  response.commandResponses.find(_.command.isInstanceOf[ManualPartitionAssignmentsResponse]).map {\n    case KMClusterCommandResponse(_, ManualPartitionAssignmentsResponse(errors), _) =>\n      if (errors.nonEmpty)\n        Left(errors.map(e => s\"${e.topic} ${e.partition} ${e.error.code} ${e.error.message}\"))\n      else\n        Right(s\"Successfully assigned partitions to brokers\")\n  }.getOrElse(Left(s\"No response from Kafka Manager for manual partition assignments\"))\n}", "CodeBleu_score": 21.310776949343545}]}
{"instance_id": "26fbc2ba1d28", "generation_result": [{"code": "private Config getKafkaBrokerConfig(AdminClient admin) throws Exception{\n\t    final Collection<Node> nodes = admin.describeCluster().nodes().get();\n    if (nodes.isEmpty()) {\n        throw new ConnectException(\"No Kafka brokers are available\");\n    }\n    final String nodeId = nodes.iterator().next().idString();\n    final ConfigResource configResource = new ConfigResource(ConfigResource.Type.BROKER, nodeId);\n    final Config brokerConfig = admin.describeConfigs(Collections.singleton(configResource)).values().get(configResource).get();\n    if (brokerConfig.entries().isEmpty()) {\n        throw new ConnectException(\"No configuration found for Kafka broker with ID \" + nodeId);\n    }\n    return brokerConfig;\n}", "CodeBleu_score": 58.72411353373535}, {"code": "private Config getKafkaBrokerConfig(AdminClient admin) throws Exception{\n\t    LOGGER.info(\"Retrieving Kafka broker configuration\");\n    final Collection<Node> nodes = admin.describeCluster().nodes().get();\n    if (nodes.isEmpty()) {\n        throw new ConnectException(\"No Kafka broker nodes found\");\n    }\n    final Node node = nodes.iterator().next();\n    final ConfigResource resource = new ConfigResource(ConfigResource.Type.BROKER, String.valueOf(node.id()));\n    final Map<ConfigResource, Config> configs = admin.describeConfigs(Collections.singleton(resource)).all().get();\n    if (configs.isEmpty()) {\n        throw new ConnectException(\"No configuration found for Kafka broker \" + node.id());\n    }\n    return configs.get(resource);\n}", "CodeBleu_score": 60.77444412426984}, {"code": "private Config getKafkaBrokerConfig(AdminClient admin) throws Exception{\n\t    LOGGER.info(\"Retrieving Kafka broker configuration\");\n    Map<String, Config> configs = admin.describeConfigs(Collect.hashSetOf(new ConfigResource(ConfigResource.Type.BROKER, \"0\"))).all().get();\n    if (configs.isEmpty()) {\n        throw new ConnectException(\"No broker configuration available\");\n    }\n    return configs.get(new ConfigResource(ConfigResource.Type.BROKER, \"0\").name());\n}", "CodeBleu_score": 35.94772181465603}]}
{"instance_id": "adf40b68c93e", "generation_result": [{"code": "private static Validator forKafka(final Validator validator){\n\t    return (name, value) -> {\n        if (value == null) return 0;\n        if (value.equals(KafkaSchemaHistory.class.getName())) {\n            return validator.validate(name, value);\n        }\n        return 0;\n    };\n}", "CodeBleu_score": 27.499813802393707}, {"code": "private static Validator forKafka(final Validator validator){\n\t    return (name, value) -> {\n        if (Schema.KAFKA.equals(value)) {\n            return validator.validate(name, value);\n        }\n        return 0;\n    };\n}", "CodeBleu_score": 20.37561184468195}, {"code": "private static Validator forKafka(final Validator validator){\n\t    return (name, value) -> {\n        if (value == null) {\n            return 0;\n        }\n        if (value instanceof String) {\n            if (SchemaHistory.KAFKA.toString().equalsIgnoreCase((String) value)) {\n                return validator.validate(name, value);\n            }\n        }\n        return 0;\n    };\n}", "CodeBleu_score": 26.551172289555836}]}
{"instance_id": "07ff1ca41c93", "generation_result": [{"code": "private synchronized Boolean isTopicCreationEnabled(Map<String, ?> config){\n\t    String kafkaConnectVersion = AppInfoParser.getVersion();\n    String topicCreationProperty = \"topic.creation.enable\";\n    Boolean topicCreationEnabled = Boolean.TRUE;\n    if (kafkaConnectVersion != null && kafkaConnectVersion.startsWith(\"2.6\")) {\n        if (config.containsKey(topicCreationProperty)) {\n            topicCreationEnabled = Boolean.valueOf(config.get(topicCreationProperty).toString());\n        }\n    }\n    return topicCreationEnabled;\n}", "CodeBleu_score": 46.51460753569885}, {"code": "private synchronized Boolean isTopicCreationEnabled(Map<String, ?> config){\n\t    String version = (String) config.get(\"version\");\n    String topicCreationEnabled = (String) config.get(\"topic.creation.enable\");\n    if (version != null && topicCreationEnabled != null) {\n        if (version.equals(\"2.0.0\")) {\n            return topicCreationEnabled.equals(\"true\");\n        }\n        else {\n            return false;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 38.256447544821}, {"code": "private synchronized Boolean isTopicCreationEnabled(Map<String, ?> config){\n\t    String kafkaConnectVersion = getKafkaConnectVersion();\n    if (kafkaConnectVersion == null) {\n        return true;\n    }\n    String topicCreationEnable = getKafkaConnectProperty(config, \"topic.creation.enable\");\n    if (topicCreationEnable == null) {\n        return true;\n    }\n    return Boolean.parseBoolean(topicCreationEnable);\n}", "CodeBleu_score": 31.599969885890296}]}
{"instance_id": "e2cc420e1e63", "generation_result": [{"code": "public static final KafkaOffsetBackingStore kafkaOffsetBackingStore(Map<String, String> config){\n\t    if (config == null || config.isEmpty()) {\n        throw new IllegalArgumentException(\"config map is null or empty\");\n    }\n\n    String clientId = config.get(CLIENT_ID_CONFIG);\n    if (clientId == null) {\n        throw new IllegalArgumentException(\"client.id must be specified in the configuration\");\n    }\n\n    Map<String, Object> adminProps = new HashMap<>();\n    for (Map.Entry<String, String> entry : config.entrySet()) {\n        if (entry.getKey().startsWith(DistributedConfig.PREFIX)) {\n            adminProps.put(entry.getKey(), entry.getValue());\n        }\n    }\n\n    if (adminProps.isEmpty()) {\n        throw new IllegalArgumentException(\"At least one DistributedConfig property must be specified in the configuration\");\n    }\n\n    SharedTopicAdmin admin = new SharedTopicAdmin(adminProps);\n\n    Converter converter = new JsonConverter();\n    Map<String, String> converterConfig = new HashMap<>();\n    converterConfig.put(JsonConverterConfig.SCHEMAS_ENABLE_CONFIG, \"false\");\n    converter.configure(converterConfig, false);\n\n    return new KafkaOffsetBackingStore(admin, clientId, converter);\n}", "CodeBleu_score": 38.802064652101244}, {"code": "public static final KafkaOffsetBackingStore kafkaOffsetBackingStore(Map<String, String> config){\n\t    String clientId = config.get(CLIENT_ID_CONFIG);\n    if (clientId == null) {\n        throw new DebeziumException(\"Client ID must be specified in the configuration\");\n    }\n    Map<String, String> adminProps = new HashMap<>(config);\n    adminProps.put(CLIENT_ID_CONFIG, clientId + \"-admin\");\n    SharedTopicAdmin admin = new SharedTopicAdmin(adminProps);\n    Converter converter = new JsonConverter();\n    converter.configure(Collections.singletonMap(JsonConverterConfig.SCHEMAS_ENABLE_CONFIG, \"false\"), false);\n    return new KafkaOffsetBackingStore(admin, clientId, converter);\n}", "CodeBleu_score": 39.9285075599123}, {"code": "public static final KafkaOffsetBackingStore kafkaOffsetBackingStore(Map<String, String> config){\n\t    Map<String, String> props = new HashMap<>(config);\n    props.put(CLIENT_ID_CONFIG, \"connect-offset-\" + props.get(DistributedConfig.GROUP_ID_CONFIG));\n    props.putAll(adminProps(props));\n    SharedTopicAdmin admin = new SharedTopicAdmin(props);\n    Converter converter = converter(props);\n    return new KafkaOffsetBackingStore(admin, props.get(DistributedConfig.GROUP_ID_CONFIG), converter);\n}", "CodeBleu_score": 31.759302880447354}]}
{"instance_id": "4ecb2279231e", "generation_result": [{"code": "private T readKey(JsonNode node) throws IOException{\n\t    if (node.isObject()) {\n        if (node.has(\"payload\")) {\n            node = node.get(\"payload\");\n        }\n        if (node.isObject()) {\n            return keyReader.readValue(node.traverse());\n        } else {\n            return keyReader.readValue(node);\n        }\n    } else {\n        return keyReader.readValue(node);\n    }\n}", "CodeBleu_score": 34.57248362439}, {"code": "private T readKey(JsonNode node) throws IOException{\n\t    if (node.isObject()) {\n        if (node.has(PAYLOAD_FIELD)) {\n            node = node.get(PAYLOAD_FIELD);\n        }\n        if (node.isArray()) {\n            return readCompositeKey(node);\n        } else {\n            return readSimpleKey(node);\n        }\n    } else {\n        return readSimpleKey(node);\n    }\n}", "CodeBleu_score": 30.753657841976235}, {"code": "private T readKey(JsonNode node) throws IOException{\n\t    if (!node.isObject()) {\n        return (T) node;\n    }\n    JsonNode payloadNode = node.get(PAYLOAD_FIELD);\n    if (payloadNode == null) {\n        return (T) node;\n    }\n    return (T) payloadNode;\n}", "CodeBleu_score": 29.042678514818377}]}
{"instance_id": "b8ba1bfc7b5e", "generation_result": [{"code": "public String topicNameFor(I id, String prefix, String delimiter){\n\t    return topicNameFor(id, prefix, delimiter, false);\n}", "CodeBleu_score": 5.6986298194057525}, {"code": "public String topicNameFor(I id, String prefix, String delimiter){\n\t    return topicNameFor(id, prefix, delimiter, DEFAULT_REPLACEMENT_CHARACTER);\n}", "CodeBleu_score": 5.70377275466888}, {"code": "public String topicNameFor(I id, String prefix, String delimiter){\n\t    String topicName = delegate().topicNameFor(id, prefix, delimiter);\n    return sanitize(topicName);\n}", "CodeBleu_score": 12.926242817245093}]}
{"instance_id": "9cf0d74c098d", "generation_result": [{"code": "public ErrorHandler(Class<? extends SourceConnector> connectorType, CommonConnectorConfig connectorConfig,\n                        ChangeEventQueue<?> queue, ErrorHandler replacedErrorHandler) {\n\t    this.connectorType = connectorType;\n    this.connectorConfig = connectorConfig;\n    this.queue = queue;\n    this.producerThrowableRef = new AtomicReference<>();\n    this.maxRetries = replacedErrorHandler == null ? connectorConfig.getMaxRetries() : replacedErrorHandler.getMaxRetries();\n}", "CodeBleu_score": 51.53958450082362}, {"code": "public ErrorHandler(Class<? extends SourceConnector> connectorType, CommonConnectorConfig connectorConfig,\n                        ChangeEventQueue<?> queue, ErrorHandler replacedErrorHandler) {\n\t    this.connectorType = connectorType;\n    this.connectorConfig = connectorConfig;\n    this.queue = queue;\n    this.producerThrowableRef = new AtomicReference<>();\n    this.maxRetries = replacedErrorHandler == null ? connectorConfig.maxRetries() : replacedErrorHandler.getMaxRetries();\n    this.retryCount = replacedErrorHandler == null ? 0 : replacedErrorHandler.getRetryCount();\n}", "CodeBleu_score": 54.207507287865674}, {"code": "public ErrorHandler(Class<? extends SourceConnector> connectorType, CommonConnectorConfig connectorConfig,\n                        ChangeEventQueue<?> queue, ErrorHandler replacedErrorHandler) {\n\t    this.connectorType = connectorType;\n    this.connectorConfig = connectorConfig;\n    this.queue = queue;\n    this.maxRetries = connectorConfig.getLogicalName() == null ? Integer.MAX_VALUE : connectorConfig.getMaxRetries();\n    if (replacedErrorHandler != null) {\n        this.maxRetries = replacedErrorHandler.getRetryCount() + 1;\n    }\n    this.producerThrowableRef = new AtomicReference<Throwable>();\n    this.retryCount = 0;\n}", "CodeBleu_score": 58.37570885792335}]}
{"instance_id": "8ab4bf3a4dd8", "generation_result": [{"code": "public void validate(Configuration configuration, Field.Set fields){\n\t    LOGGER.info(\"Validating configuration\");\n    Map<String, ConfigValue> configValues = configuration.asMap();\n    for (Field field : fields) {\n        String fieldName = field.name();\n        if (configValues.containsKey(fieldName)) {\n            ConfigValue configValue = configValues.get(fieldName);\n            if (configValue.errorMessages().size() > 0) {\n                throw new ConfigException(configValue.name(), configValue.value(), configValue.errorMessages().get(0));\n            }\n        }\n    }\n}", "CodeBleu_score": 46.387957757787724}, {"code": "public void validate(Configuration configuration, Field.Set fields){\n\t    for (Field field : fields) {\n        if (field.hasDefaultValue()) {\n            if (configuration.getString(field.name()).isEmpty()) {\n                configuration.set(field.name(), field.defaultValue());\n            }\n        }\n    }\n\n    for (Field field : fields) {\n        try {\n            configuration.validate(field.name());\n        } catch (ConfigException e) {\n            if (field.validator() != null) {\n                field.validator().validate(field.name(), configuration.getString(field.name()));\n            }\n            throw new ConfigException(e.getMessage());\n        }\n    }\n}", "CodeBleu_score": 30.459388079929862}, {"code": "public void validate(Configuration configuration, Field.Set fields){\n\t    for (Field field : fields) {\n        if (field.name().equals(MySqlConnectorConfig.DATABASE_SERVER_NAME)) {\n            if (configuration.getString(MySqlConnectorConfig.DATABASE_SERVER_NAME).isEmpty()) {\n                throw new ConfigException(\"The server name is empty.\");\n            }\n        }\n        if (field.name().equals(MySqlConnectorConfig.DATABASE_SERVER_ID)) {\n            if (configuration.getString(MySqlConnectorConfig.DATABASE_SERVER_ID).isEmpty()) {\n                throw new ConfigException(\"The server id is empty.\");\n            }\n        }\n        if (field.name().equals(MySqlConnectorConfig.DATABASE_USER)) {\n            if (configuration.getString(MySqlConnectorConfig.DATABASE_USER).isEmpty()) {\n                throw new ConfigException(\"The user name is empty.\");\n            }\n        }\n        if (field.name().equals(MySqlConnectorConfig.DATABASE_PASSWORD)) {\n            if (configuration.getString(MySqlConnectorConfig.DATABASE_PASSWORD).isEmpty()) {\n                throw new ConfigException(\"The password is empty.\");\n            }\n        }\n        if (field.name().equals(MySqlConnectorConfig.DATABASE_HOSTNAME)) {\n            if (configuration.getString(MySqlConnectorConfig.DATABASE_HOSTNAME).isEmpty()) {\n                throw new ConfigException(\"The host name is empty.\");\n            }\n        }\n        if (field.name().equals(MySqlConnectorConfig.DATABASE_PORT)) {\n            if (configuration.getString(MySqlConnectorConfig.DATABASE_PORT).isEmpty()) {\n                throw new ConfigException(\"The port is empty.\");\n            }\n        }\n        if (field.name().equals(MySqlConnectorConfig.DATABASE_SERVER_ID)) {\n            if (configuration.getString(MySqlConnectorConfig.DATABASE_SERVER_ID).isEmpty()) {\n                throw new ConfigException(\"The server id is empty.\");\n            }\n        }\n        if (field.name().equals(MySqlConnectorConfig.DATABASE_SERVER_NAME)) {\n            if (configuration.getString(MySqlConnectorConfig.DATABASE_SERVER_NAME).isEmpty()) {", "CodeBleu_score": 19.47065454555431}]}
{"instance_id": "860405dc9abb", "generation_result": [{"code": "private Schema buildNewSchema(String fieldName, Schema oldSchema, Map<String, Header> headerToProcess, List<String> nestedFields, int level){\n\t    if (oldSchema.type() == Schema.Type.STRUCT) {\n        SchemaBuilder newSchemaBuilder = SchemaBuilder.struct().name(oldSchema.name());\n        for (Field field : oldSchema.fields()) {\n            String newFieldName = field.name();\n            if (nestedFields.contains(newFieldName)) {\n                newFieldName = fieldName + \".\" + newFieldName;\n            }\n            newSchemaBuilder.field(newFieldName, buildNewSchema(newFieldName, field.schema(), headerToProcess, nestedFields, level + 1));\n        }\n        Schema newSchema = newSchemaBuilder.build();\n        return newSchema;\n    } else if (oldSchema.type() == Schema.Type.ARRAY) {\n        SchemaBuilder newSchemaBuilder = SchemaBuilder.array(buildNewSchema(fieldName, oldSchema.valueSchema(), headerToProcess, nestedFields, level + 1));\n        Schema newSchema = newSchemaBuilder.build();\n        return newSchema;\n    } else {\n        return oldSchema;\n    }\n}", "CodeBleu_score": 40.034874802360946}, {"code": "private Schema buildNewSchema(String fieldName, Schema oldSchema, Map<String, Header> headerToProcess, List<String> nestedFields, int level){\n\t    if (oldSchema.type() == Schema.Type.STRUCT) {\n        SchemaBuilder newSchemaBuilder = SchemaBuilder.struct();\n        if (level == 0) {\n            newSchemaBuilder.name(fieldName);\n        }\n        for (Field field : oldSchema.fields()) {\n            if (nestedFields.contains(field.name())) {\n                newSchemaBuilder.field(field.name(), buildNewSchema(field.name(), field.schema(), headerToProcess, nestedFields, level + 1));\n            } else {\n                newSchemaBuilder.field(field.name(), field.schema());\n            }\n        }\n        for (Map.Entry<String, Header> headerEntry : headerToProcess.entrySet()) {\n            if (nestedFields.contains(headerEntry.getKey())) {\n                newSchemaBuilder.field(headerEntry.getKey(), headerEntry.getValue().schema());\n            }\n        }\n        return newSchemaBuilder.build();\n    } else if (oldSchema.type() == Schema.Type.ARRAY) {\n        return SchemaBuilder.array(buildNewSchema(fieldName, oldSchema.valueSchema(), headerToProcess, nestedFields, level)).build();\n    } else if (oldSchema.type() == Schema.Type.MAP) {\n        return SchemaBuilder.map(buildNewSchema(fieldName, oldSchema.keySchema(), headerToProcess, nestedFields, level),\n                buildNewSchema(fieldName, oldSchema.valueSchema(), headerToProcess, nestedFields, level)).build();\n    } else {\n        return oldSchema;\n    }\n}", "CodeBleu_score": 41.673953201907345}, {"code": "private Schema buildNewSchema(String fieldName, Schema oldSchema, Map<String, Header> headerToProcess, List<String> nestedFields, int level){\n\t    if (oldSchema.type() == Schema.Type.STRUCT) {\n        SchemaBuilder newSchemaBuilder = SchemaBuilder.struct();\n        for (Field field : oldSchema.fields()) {\n            String newFieldName = field.name();\n            if (nestedFields.contains(newFieldName)) {\n                newFieldName = fieldName + \".\" + newFieldName;\n            }\n            newSchemaBuilder.field(newFieldName, buildNewSchema(newFieldName, field.schema(), headerToProcess, nestedFields, level + 1));\n        }\n        return newSchemaBuilder.build();\n    } else if (oldSchema.type() == Schema.Type.MAP) {\n        SchemaBuilder newSchemaBuilder = SchemaBuilder.map(oldSchema.keySchema(), buildNewSchema(\"key\", oldSchema.valueSchema(), headerToProcess, nestedFields, level + 1));\n        return newSchemaBuilder.build();\n    } else if (oldSchema.type() == Schema.Type.ARRAY) {\n        SchemaBuilder newSchemaBuilder = SchemaBuilder.array(buildNewSchema(\"array\", oldSchema.valueSchema(), headerToProcess, nestedFields, level + 1));\n        return newSchemaBuilder.build();\n    } else {\n        return oldSchema;\n    }\n}", "CodeBleu_score": 39.726647323808194}]}
{"instance_id": "681a0415df83", "generation_result": [{"code": "public static SnapshotRecord fromSource(Struct source){\n\t    if (source.schema().field(SNAPSHOT_KEY) != null) {\n        String snapshotString = source.getString(SNAPSHOT_KEY);\n        if (snapshotString != null) {\n            return SnapshotRecord.valueOf(snapshotString.toUpperCase());\n        }\n    }\n    return null;\n}", "CodeBleu_score": 44.94405568600424}, {"code": "public static SnapshotRecord fromSource(Struct source){\n\t    if (source.schema().field(SNAPSHOT_KEY) != null && source.schema().field(SNAPSHOT_KEY).schema().name().equals(SNAPSHOT_ENUM_LOGICAL_NAME)) {\n        String snapshotString = source.getString(SNAPSHOT_KEY);\n        if (snapshotString != null) {\n            return SnapshotRecord.valueOf(snapshotString.toUpperCase());\n        }\n    }\n    return null;\n}", "CodeBleu_score": 58.28497888703759}, {"code": "public static SnapshotRecord fromSource(Struct source){\n\t    if (source == null) {\n        return null;\n    }\n    if (source.schema().field(SNAPSHOT_KEY) == null) {\n        return null;\n    }\n    String snapshotString = source.getString(SNAPSHOT_KEY);\n    if (snapshotString == null) {\n        return null;\n    }\n    snapshotString = snapshotString.toUpperCase();\n    return SnapshotRecord.valueOf(snapshotString);\n}", "CodeBleu_score": 40.961507993823076}]}
{"instance_id": "85ef1162e38a", "generation_result": [{"code": "public static Optional<Float> parse(String version) throws NumberFormatException{\n\t    if (version == null || version.isEmpty()) {\n        return Optional.empty();\n    }\n    String[] parts = version.split(\"\\\\.\");\n    if (parts.length > 2) {\n        parts = new String[] { parts[0], parts[1] };\n    }\n    String[] subparts = parts[0].split(\"-\");\n    if (subparts.length > 1) {\n        parts[0] = subparts[0];\n    }\n    return Optional.ofNullable(Float.parseFloat(parts[0]));\n}", "CodeBleu_score": 52.831916413306004}, {"code": "public static Optional<Float> parse(String version) throws NumberFormatException{\n\t\tif (version == null) {\n\t\treturn Optional.empty();\n\t}\n\tString[] parts = version.split(\"\\\\.\");\n\tif (parts.length > 2) {\n\t\tparts = new String[] { parts[0], parts[1] };\n\t}\n\tString[] subParts = parts[0].split(\"-\");\n\tif (subParts.length > 1) {\n\t\tparts[0] = subParts[0];\n\t}\n\treturn Optional.of(Float.parseFloat(parts[0]));\n}", "CodeBleu_score": 52.685337823205344}, {"code": "public static Optional<Float> parse(String version) throws NumberFormatException{\n\t\ttry {\n\t\tString[] parts = version.split(\"\\\\.\");\n\t\tString[] part1 = parts[0].split(\"-\");\n\t\tString[] part2 = parts[1].split(\"-\");\n\t\treturn Optional.of(Float.parseFloat(part1[0]));\n\t} catch (Exception e) {\n\t\treturn Optional.empty();\n\t}\n}", "CodeBleu_score": 58.369848797706794}]}
{"instance_id": "64346d69eba0", "generation_result": [{"code": "public Mono<ResponseEntity<ConnectorDTO>> createConnector(String clusterName, String connectName,\n                                                            @Valid Mono<NewConnectorDTO> connector,\n                                                            ServerWebExchange exchange){\n\t    return Mono.zip(\n        kafkaConnectService.createConnector(clusterName, connectName, connector.block()),\n        Mono.just(exchange)\n    ).flatMap(tuple -> {\n        AccessContext accessContext = AccessContext.builder()\n            .currentUser(tuple.getT1().getOwner())\n            .resourceType(ResourceType.CONNECTOR)\n            .resourceName(tuple.getT1().getName())\n            .action(ConnectAction.CREATE)\n            .build();\n        return Mono.zip(\n            Mono.just(tuple.getT1()),\n            auditService.audit(accessContext, tuple.getT2(), tuple.getT1().getOwner(),\n                \"Created connector {}\", tuple.getT1().getName())\n        );\n    }).map(tuple -> ResponseEntity.ok(tuple.getT1()));\n}", "CodeBleu_score": 46.33871170640179}, {"code": "public Mono<ResponseEntity<ConnectorDTO>> createConnector(String clusterName, String connectName,\n                                                            @Valid Mono<NewConnectorDTO> connector,\n                                                            ServerWebExchange exchange){\n\t    return Mono.zip(\n        Mono.just(new AccessContext(exchange, connectName, clusterName, ConnectAction.CREATE_CONNECTOR)),\n        connector\n    ).flatMap(tuple -> {\n        AccessContext accessContext = tuple.getT1();\n        NewConnectorDTO newConnector = tuple.getT2();\n        return kafkaConnectService.createConnector(accessContext, newConnector)\n            .map(ResponseEntity::ok)\n            .onErrorResume(ex -> {\n                log.error(\"Error creating connector {} in cluster {}\", newConnector, clusterName, ex);\n                return Mono.just(ResponseEntity.status(500).build());\n            });\n    });\n}", "CodeBleu_score": 34.106740319372946}, {"code": "public Mono<ResponseEntity<ConnectorDTO>> createConnector(String clusterName, String connectName,\n                                                            @Valid Mono<NewConnectorDTO> connector,\n                                                            ServerWebExchange exchange){\n\t    return Mono.zip(\n        Mono.just(clusterName),\n        Mono.just(connectName),\n        connector\n    )\n        .flatMap(tuple -> {\n            final String clusterName = tuple.getT1();\n            final String connectName = tuple.getT2();\n            final NewConnectorDTO newConnectorDTO = tuple.getT3();\n            AccessContext accessContext = AccessContext.builder()\n                .currentUser(exchange.getPrincipal())\n                .resourceType(ResourceType.CONNECTOR)\n                .resource(newConnectorDTO.getName())\n                .action(ConnectAction.CREATE)\n                .build();\n            return Mono.zip(\n                Mono.just(accessContext),\n                kafkaConnectService.createConnector(clusterName, connectName, newConnectorDTO)\n            );\n        })\n        .flatMap(tuple -> {\n            AccessContext accessContext = tuple.getT1();\n            ConnectorDTO connectorDTO = tuple.getT2();\n            return auditService.audit(accessContext, AuditService.AuditOperation.CREATE, connectorDTO)\n                .thenReturn(ResponseEntity.ok(connectorDTO));\n        });\n}", "CodeBleu_score": 41.51244774572639}]}
{"instance_id": "4c446fd64db6", "generation_result": [{"code": "public Mono<ResponseEntity<Void>> deleteConnector(String clusterName, String connectName,\n                                                    String connectorName,\n                                                    ServerWebExchange exchange){\n\t  return Mono.just(AccessContext.builder()\n      .clusterName(clusterName)\n      .connectName(connectName)\n      .action(ConnectAction.DELETE_CONNECTOR)\n      .object(connectorName)\n      .build())\n      .flatMap(accessContext -> accessService.canAccess(accessContext, exchange))\n      .flatMap(accessResult -> kafkaConnectService.deleteConnector(clusterName, connectName, connectorName))\n      .flatMap(result -> Mono.just(ResponseEntity.noContent().build()));\n}", "CodeBleu_score": 34.47667824732856}, {"code": "public Mono<ResponseEntity<Void>> deleteConnector(String clusterName, String connectName,\n                                                    String connectorName,\n                                                    ServerWebExchange exchange){\n\t  AccessContext accessContext = AccessContext.builder()\n      .currentUser(exchange.getPrincipal())\n      .resourceType(ResourceType.CONNECTOR)\n      .resourceName(connectorName)\n      .resourceAction(ConnectAction.DELETE)\n      .build();\n  return accessService.canAccess(accessContext)\n      .flatMap(accessResult -> {\n        if (!accessResult.isAllowed()) {\n          return Mono.error(new ResponseStatusException(\n              HttpStatus.FORBIDDEN,\n              \"Access denied\",\n              accessResult.getDeniedReason()\n          ));\n        }\n        return kafkaConnectService.deleteConnector(clusterName, connectName, connectorName)\n            .map(ignored -> ResponseEntity.noContent().build());\n      })\n      .onErrorResume(e -> {\n        log.error(\"Error while deleting connector\", e);\n        return Mono.just(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n            .body(null));\n      })\n      .doOnEach(signal -> auditService.logEvent(\n          exchange,\n          clusterName,\n          connectName,\n          connectorName,\n          ConnectAction.DELETE,\n          signal\n      ));\n}", "CodeBleu_score": 38.6873981487447}, {"code": "public Mono<ResponseEntity<Void>> deleteConnector(String clusterName, String connectName,\n                                                    String connectorName,\n                                                    ServerWebExchange exchange){\n\t    AccessContext accessContext = AccessContext.builder()\n            .clusterName(clusterName)\n            .connectName(connectName)\n            .connectAction(ConnectAction.DELETE_CONNECTOR)\n            .build();\n    return accessContextService.createAndAudit(accessContext)\n            .flatMap(ac -> kafkaConnectService.deleteConnector(clusterName, connectName, connectorName)\n                    .map(ResponseEntity::ok))\n            .defaultIfEmpty(ResponseEntity.notFound().build());\n}", "CodeBleu_score": 43.636690670023285}]}
{"instance_id": "d34a49f3ca1b", "generation_result": [{"code": "public Mono<ResponseEntity<Void>> updateConnectorState(String clusterName, String connectName,\n                                                         String connectorName,\n                                                         ConnectorActionDTO action,\n                                                         ServerWebExchange exchange) {\n\t    return Mono.defer(() -> {\n        AccessContext accessContext = AccessContext.builder()\n            .currentUser(exchange.getPrincipal())\n            .resource(connectName)\n            .resourceAction(ConnectAction.UPDATE_CONNECTOR_STATE)\n            .params(Map.of(\"clusterName\", clusterName,\n                    \"connectName\", connectName,\n                    \"connectorName\", connectorName,\n                    \"action\", action.name()))\n            .build();\n\n        return kafkaConnectService.updateConnectorState(clusterName, connectName, connectorName, action)\n            .doOnNext(aVoid -> auditService.audit(accessContext, Map.of()))\n            .then(Mono.just(ResponseEntity.ok().build()));\n    });\n}", "CodeBleu_score": 40.845741706835966}, {"code": "public Mono<ResponseEntity<Void>> updateConnectorState(String clusterName, String connectName,\n                                                         String connectorName,\n                                                         ConnectorActionDTO action,\n                                                         ServerWebExchange exchange) {\n\t    AccessContext accessContext = new AccessContext(exchange);\n    accessContext.setClusterName(clusterName);\n    accessContext.setConnectName(connectName);\n    accessContext.setConnectorName(connectorName);\n    accessContext.setActions(Set.of(ConnectAction.UPDATE));\n    accessContext.setOperationName(action.toString());\n    accessContext.setParameters(Map.of());\n    return accessService.canAccess(accessContext)\n        .flatMap(accessResult -> {\n          if (accessResult.isAuthorized()) {\n            return kafkaConnectService.updateConnectorState(clusterName, connectName, connectorName, action)\n                .flatMap(result -> Mono.just(ResponseEntity.noContent().build()));\n          } else {\n            return Mono.just(ResponseEntity.status(403).build());\n          }\n        })\n        .doOnEach(signal -> auditService.sendAuditRecord(accessContext, signal));\n  }", "CodeBleu_score": 29.698070320760184}, {"code": "public Mono<ResponseEntity<Void>> updateConnectorState(String clusterName, String connectName,\n                                                         String connectorName,\n                                                         ConnectorActionDTO action,\n                                                         ServerWebExchange exchange) {\n\t    log.debug(\"updateConnectorState clusterName: {}, connectName: {}, connectorName: {}, action: {}\",\n            clusterName, connectName, connectorName, action);\n    AccessContext accessContext = AccessContext.builder()\n            .currentUser(exchange.getPrincipal())\n            .resourceType(ResourceType.CONNECT)\n            .resource(connectName)\n            .operation(Operation.UPDATE)\n            .parameters(Map.of(\"connectorName\", connectorName, \"action\", action))\n            .build();\n    return Mono.just(accessContext)\n            .flatMap(accessControlService::canAccess)\n            .flatMap(allowed -> {\n                if (allowed) {\n                    return kafkaConnectService.updateConnectorState(clusterName, connectName, connectorName, action);\n                } else {\n                    return Mono.error(new AccessDeniedException(\"No access to resource\"));\n                }\n            })\n            .doOnEach(signal -> auditService.logEvent(exchange, accessContext, signal));\n}", "CodeBleu_score": 41.93690077954971}]}
{"instance_id": "199cfe41b374", "generation_result": [{"code": "public Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig{\n\t    @Override\n    public Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig(\n        @Valid Mono<NewConnectorDTO> newConnectorDTOMono,\n        @Valid String clusterName,\n        @Valid String connectName,\n        @Valid String pluginName,\n        ServerWebExchange exchange) {\n        return kafkaConnectService.validateConnectorPluginConfig(\n            newConnectorDTOMono, clusterName, connectName, pluginName, exchange);\n    }\n}", "CodeBleu_score": 52.28961276194589}, {"code": "public Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig{\n\t\n    /**\n     * The getConnectors function returns all connectors in a specified Kafka Connect cluster.", "CodeBleu_score": 11.607359901727808}, {"code": "public Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig{\n\t    @Override\n    public Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig(\n            @Valid Mono<NewConnectorDTO> newConnectorDTOMono,\n            @Valid Mono<String> clusterNameMono,\n            @Valid Mono<String> connectNameMono,\n            @Valid Mono<String> pluginNameMono,\n            ServerWebExchange exchange) {\n        return Mono.zip(newConnectorDTOMono, clusterNameMono, connectNameMono, pluginNameMono)\n                .flatMap(tuple -> {\n                    NewConnectorDTO newConnectorDTO = tuple.getT1();\n                    String clusterName = tuple.getT2();\n                    String connectName = tuple.getT3();\n                    String pluginName = tuple.getT4();\n                    return kafkaConnectService.validateConnectorPluginConfig(clusterName, connectName, pluginName, newConnectorDTO.getConfig());\n                })\n                .map(ResponseEntity::ok);\n    }\n}", "CodeBleu_score": 46.39417732385923}]}
{"instance_id": "88380ae300c4", "generation_result": [{"code": "public static ConfigurableApplicationContext startApplication(String[] args){\n\t    return new SpringApplicationBuilder(KafkaUiApplication.class)\n            .initializers(new DynamicConfigOperations.DynamicConfigInitializer())\n            .run(args);\n}", "CodeBleu_score": 45.57861896654014}, {"code": "public static ConfigurableApplicationContext startApplication(String[] args){\n\t    return new SpringApplicationBuilder(KafkaUiApplication.class)\n            .initializers(new DynamicConfigOperations.DynamicConfigInitializer())\n            .run(args);\n}", "CodeBleu_score": 45.57861896654014}, {"code": "public static ConfigurableApplicationContext startApplication(String[] args){\n\t    return new SpringApplicationBuilder(KafkaUiApplication.class)\n        .initializers(new DynamicConfigOperations())\n        .run(args);\n}", "CodeBleu_score": 41.97670580114618}]}
{"instance_id": "3f022876f737", "generation_result": [{"code": "private Predicate<FullConnectorInfoDTO> matchesSearchTerm(@Nullable final String search){\n\t  return search == null ?\n    connector -> true :\n    connector -> Stream.of(connector.getConnector(), connector.getTasks().stream().map(TaskDTO::getName).toArray(String[]::new))\n      .flatMap(Stream::of)\n      .anyMatch(str -> StringUtils.containsIgnoreCase(str, search));\n}", "CodeBleu_score": 42.6343830821302}, {"code": "private Predicate<FullConnectorInfoDTO> matchesSearchTerm(@Nullable final String search){\n\t    return search == null\n        ? x -> true\n        : x -> Stream.of(x.getConnector().getName(), x.getConnector().getClassName())\n            .anyMatch(s -> s.toLowerCase().contains(search.toLowerCase()));\n}", "CodeBleu_score": 38.08290036344499}, {"code": "private Predicate<FullConnectorInfoDTO> matchesSearchTerm(@Nullable final String search){\n\t    return search == null\n        ? (__ -> true)\n        : (connector -> connector.getConnector().getName().toLowerCase().contains(search.toLowerCase()));\n}", "CodeBleu_score": 38.212844895165624}]}
{"instance_id": "9754aa1ec96c", "generation_result": [{"code": "  private Map<String, Object> flattenClusterProperties(@Nullable String prefix,\n                                                       @Nullable Map<String, Object> propertiesMap){\n\t    Map<String, Object> flattenedMap = new HashMap<>();\n    if (propertiesMap != null) {\n      for (Map.Entry<String, Object> entry : propertiesMap.entrySet()) {\n        String key = entry.getKey();\n        Object value = entry.getValue();\n        String newKey = (prefix != null ? prefix + \".\" : \"\") + key;\n        if (value instanceof Map) {\n          flattenedMap.putAll(flattenClusterProperties(newKey, (Map<String, Object>) value));\n        } else {\n          flattenedMap.put(newKey, value);\n        }\n      }\n    }\n    return flattenedMap;\n  }", "CodeBleu_score": 52.313237560881575}, {"code": "  private Map<String, Object> flattenClusterProperties(@Nullable String prefix,\n                                                       @Nullable Map<String, Object> propertiesMap){\n\t    Map<String, Object> flattenedProperties = new HashMap<>();\n    if (propertiesMap == null) {\n      return flattenedProperties;\n    }\n    for (Map.Entry<String, Object> entry : propertiesMap.entrySet()) {\n      String key = entry.getKey();\n      Object value = entry.getValue();\n      if (value instanceof Map) {\n        flattenedProperties.putAll(flattenClusterProperties(key, (Map<String, Object>) value));\n      } else {\n        flattenedProperties.put(prefix == null ? key : prefix + \".\" + key, value);\n      }\n    }\n    return flattenedProperties;\n  }", "CodeBleu_score": 51.2343035142017}, {"code": "  private Map<String, Object> flattenClusterProperties(@Nullable String prefix,\n                                                       @Nullable Map<String, Object> propertiesMap){\n\t    if (propertiesMap == null) {\n      return new HashMap<>();\n    }\n    Map<String, Object> flattened = new HashMap<>();\n    for (Map.Entry<String, Object> entry : propertiesMap.entrySet()) {\n      String key = entry.getKey();\n      Object value = entry.getValue();\n      if (value instanceof Map) {\n        flattened.putAll(flattenClusterProperties(key, (Map<String, Object>) value));\n      } else {\n        if (prefix != null) {\n          key = prefix + \".\" + key;\n        }\n        flattened.put(key, value);\n      }\n    }\n    return flattened;\n  }", "CodeBleu_score": 54.55760640981984}]}
{"instance_id": "99266677c846", "generation_result": [{"code": " private static Set<String> kafkaConfigKeysToSanitize(){\n\t  final ConfigDef configDef = new ConfigDef();\n  configDef.define(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, \"\", ConfigDef.Importance.MEDIUM, \"\");\n  configDef.define(SslConfigs.SSL_KEY_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, \"\", ConfigDef.Importance.MEDIUM, \"\");\n  configDef.define(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, \"\", ConfigDef.Importance.MEDIUM, \"\");\n  configDef.define(SslConfigs.SSL_CLIENT_AUTH_CONFIG, ConfigDef.Type.STRING, \"\", ConfigDef.Importance.MEDIUM, \"\");\n  configDef.define(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG, ConfigDef.Type.STRING, \"\", ConfigDef.Importance.MEDIUM, \"\");\n  configDef.define(SslConfigs.SSL_KEY_LOCATION_CONFIG, ConfigDef.Type.STRING, \"\", ConfigDef.Importance.MEDIUM, \"\");\n  configDef.define(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, ConfigDef.Type.STRING, \"\", ConfigDef.Importance.MEDIUM, \"\");\n  configDef.define(SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG, ConfigDef.Type.STRING, \"\", ConfigDef.Importance.MEDIUM, \"\");\n  configDef.define(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG, ConfigDef.Type.STRING, \"\", ConfigDef.Importance.MEDIUM, \"\");\n  configDef.define(SslConfigs.SSL_KEYSTORE_CERTIFICATE_CHAIN_CONFIG, ConfigDef.Type.STRING, \"\", ConfigDef.Importance.MEDIUM, \"\");\n  configDef.define(SslConfigs.SSL_KEYSTORE_KEY_CONFIG, ConfigDef.Type.STRING, \"\", ConfigDef.Importance.MEDIUM, \"\");\n  configDef.define(SslConfigs.SSL_TR", "CodeBleu_score": 47.36454335700275}, {"code": " private static Set<String> kafkaConfigKeysToSanitize(){\n\t    final ConfigDef configDef = new ConfigDef();\n    configDef.define(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG, ConfigDef.Type.STRING, \"\", ConfigDef.Importance.MEDIUM, \"\");\n    configDef.define(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, \"\", ConfigDef.Importance.MEDIUM, \"\");\n    configDef.define(SslConfigs.SSL_KEY_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, \"\", ConfigDef.Importance.MEDIUM, \"\");\n    configDef.define(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, ConfigDef.Type.STRING, \"\", ConfigDef.Importance.MEDIUM, \"\");\n    configDef.define(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, \"\", ConfigDef.Importance.MEDIUM, \"\");\n    configDef.define(SslConfigs.SSL_KEY_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, \"\", ConfigDef.Importance.MEDIUM, \"\");\n    configDef.define(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG, ConfigDef.Type.STRING, \"\", ConfigDef.Importance.MEDIUM, \"\");\n    configDef.define(SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG, ConfigDef.Type.STRING, \"\", ConfigDef.Importance.MEDIUM, \"\");\n    configDef.define(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, ConfigDef.Type.STRING, \"\", ConfigDef.Importance.MEDIUM, \"\");\n    configDef.define(SslConfigs.SSL_ENABLED_CIPHER_SUITES_CONFIG, ConfigDef.Type.STRING, \"\", ConfigDef.Importance.MEDIUM, \"\");\n    configDef.define(SslConfigs.SSL_PROVIDER_CONFIG, ConfigDef.Type.STRING, \"\", ConfigDef.Importance.MEDIUM, \"\");\n    configDef.define(SslConfigs.SSL_CIPHER", "CodeBleu_score": 47.47646195086948}, {"code": " private static Set<String> kafkaConfigKeysToSanitize(){\n\t        final ConfigDef configDef = new ConfigDef();\n        configDef.define(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG, ConfigDef.Type.STRING, ConfigDef.NO_DEFAULT_VALUE, ConfigDef.Importance.HIGH, SslConfigs.SSL_KEYSTORE_LOCATION_DOC);\n        configDef.define(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, ConfigDef.NO_DEFAULT_VALUE, ConfigDef.Importance.HIGH, SslConfigs.SSL_KEYSTORE_PASSWORD_DOC);\n        configDef.define(SslConfigs.SSL_KEY_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, ConfigDef.NO_DEFAULT_VALUE, ConfigDef.Importance.HIGH, SslConfigs.SSL_KEY_PASSWORD_DOC);\n        configDef.define(SslConfigs.SSL_KEYSTORE_TYPE_CONFIG, ConfigDef.Type.STRING, ConfigDef.NO_DEFAULT_VALUE, ConfigDef.Importance.HIGH, SslConfigs.SSL_KEYSTORE_TYPE_DOC);\n        configDef.define(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, ConfigDef.Type.STRING, ConfigDef.NO_DEFAULT_VALUE, ConfigDef.Importance.HIGH, SslConfigs.SSL_TRUSTSTORE_LOCATION_DOC);\n        configDef.define(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, ConfigDef.NO_DEFAULT_VALUE, ConfigDef.Importance.HIGH, SslConfigs.SSL_TRUSTSTORE_PASSWORD_DOC);\n        configDef.define(SslConfigs.SSL_TRUSTSTORE_TYPE_CONFIG, ConfigDef.Type.STRING, ConfigDef.NO_DEFAULT_VALUE, ConfigDef.Importance.HIGH, SslConfigs.SSL_TRUSTSTORE_TYPE_DOC);\n        configDef.define(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, ConfigDef.Type.LIST, Config", "CodeBleu_score": 47.48693221004191}]}
{"instance_id": "deebb6fcb0a8", "generation_result": [{"code": "private Mono<ClusterFeature> aclEdit(ReactiveAdminClient adminClient, ClusterDescription clusterDescription){\n\t    return Mono.just(clusterDescription)\n        .flatMap(cd -> Mono.just(cd.getAuthorizedOperations())\n            .filter(predicate)\n            .flatMap(authorizedOperations -> {\n                if (authorizedOperations.contains(AclOperation.ALTER) && authorizedOperations.contains(AclOperation.DESCRIBE)) {\n                    return Mono.just(ClusterFeature.KAFKA_ACL_EDIT);\n                }\n                return Mono.empty();\n            })\n        );\n}", "CodeBleu_score": 35.568682012050644}, {"code": "private Mono<ClusterFeature> aclEdit(ReactiveAdminClient adminClient, ClusterDescription clusterDescription){\n\t    return Mono.just(clusterDescription)\n        .flatMap(cd -> {\n            List<AclOperation> authorizedOperations = cd.getAuthorizedOperations();\n            if (authorizedOperations == null) {\n                return Mono.empty();\n            }\n            if (authorizedOperations.contains(AclOperation.ALTER)\n                && authorizedOperations.contains(AclOperation.DESCRIBE)\n                && authorizedOperations.contains(AclOperation.CREATE)\n                && authorizedOperations.contains(AclOperation.DELETE)\n                && authorizedOperations.contains(AclOperation.ALTER_CONFIGS)\n                && authorizedOperations.contains(AclOperation.DESCRIBE_CONFIGS)\n                && authorizedOperations.contains(AclOperation.ALTER_RESOURCE)) {\n                return Mono.just(ClusterFeature.KAFKA_ACL_EDIT);\n            }\n            return Mono.empty();\n        });\n}", "CodeBleu_score": 30.449115920645713}, {"code": "private Mono<ClusterFeature> aclEdit(ReactiveAdminClient adminClient, ClusterDescription clusterDescription){\n\t    return adminClient.getAcls()\n        .filter(acl -> acl.getResourceType().equals(\"TOPIC\"))\n        .map(acl -> acl.getResourcePatternType().equals(\"LITERAL\"))\n        .flatMap(hasLiteralTopicAcls -> {\n            if (hasLiteralTopicAcls) {\n                return adminClient.getAcls()\n                    .filter(acl -> acl.getResourceType().equals(\"GROUP\"))\n                    .map(acl -> acl.getResourcePatternType().equals(\"LITERAL\"))\n                    .flatMap(hasLiteralGroupAcls -> {\n                        if (hasLiteralGroupAcls) {\n                            return Mono.just(ClusterFeature.KAFKA_ACL_EDIT);\n                        } else {\n                            return Mono.empty();\n                        }\n                    });\n            } else {\n                return Mono.empty();\n            }\n        });\n}", "CodeBleu_score": 26.007239338695204}]}
{"instance_id": "a5d8cc77955f", "generation_result": [{"code": "protected TreeMap<TopicPartition, FromToOffset> nextPollingRange(TreeMap<TopicPartition, FromToOffset> prevRange,\n                                                                   SeekOperations seekOperations){\n\t    Map<TopicPartition, FromToOffset> nextRange = prevRange.entrySet().stream()\n        .collect(Collectors.toMap(\n            Map.Entry::getKey,\n            entry -> entry.getValue().getNextRange(seekOperations.get(entry.getKey()))\n        ));\n    Map<TopicPartition, FromToOffset> result = new TreeMap<>(nextRange);\n    return result;\n}", "CodeBleu_score": 30.980713222996613}, {"code": "protected TreeMap<TopicPartition, FromToOffset> nextPollingRange(TreeMap<TopicPartition, FromToOffset> prevRange,\n                                                                   SeekOperations seekOperations){\n\t  TreeMap<TopicPartition, FromToOffset> result = new TreeMap<>();\n  if (prevRange.isEmpty()) {\n    result.putAll(seekOperations.getSeekToOffsets());\n  } else {\n    result.putAll(prevRange);\n    for (Map.Entry<TopicPartition, FromToOffset> entry : prevRange.entrySet()) {\n      TopicPartition topicPartition = entry.getKey();\n      FromToOffset fromToOffset = entry.getValue();\n      if (fromToOffset.getFrom() == null) {\n        result.put(topicPartition, new FromToOffset(fromToOffset.getTo(), fromToOffset.getTo()));\n      }\n    }\n  }\n  for (Map.Entry<TopicPartition, FromToOffset> entry : result.entrySet()) {\n    TopicPartition topicPartition = entry.getKey();\n    FromToOffset fromToOffset = entry.getValue();\n    long from = fromToOffset.getFrom();\n    long to = fromToOffset.getTo();\n    long messagesToPoll = Math.min(to - from, maxMessagesPerPartition);\n    long start = Math.max(from, Math.max(to - messagesToPoll, 0));\n    result.put(topicPartition, new FromToOffset(start, to));\n  }\n  return result;\n}", "CodeBleu_score": 38.916317191873766}, {"code": "protected TreeMap<TopicPartition, FromToOffset> nextPollingRange(TreeMap<TopicPartition, FromToOffset> prevRange,\n                                                                   SeekOperations seekOperations){\n\t  TreeMap<TopicPartition, FromToOffset> nextRange = new TreeMap<>();\n  Map<TopicPartition, Long> offsetsToReadFrom = new TreeMap<>();\n\n  for (Map.Entry<TopicPartition, FromToOffset> entry : prevRange.entrySet()) {\n    TopicPartition topicPartition = entry.getKey();\n    FromToOffset fromToOffset = entry.getValue();\n    long fromOffset = fromToOffset.getFromOffset();\n    long toOffset = fromToOffset.getToOffset();\n\n    if (fromOffset == -1) {\n      offsetsToReadFrom.put(topicPartition, toOffset);\n    } else {\n      offsetsToReadFrom.put(topicPartition, fromOffset);\n    }\n  }\n\n  for (Map.Entry<TopicPartition, Long> entry : offsetsToReadFrom.entrySet()) {\n    TopicPartition topicPartition = entry.getKey();\n    Long fromOffset = entry.getValue();\n\n    long toOffset = seekOperations.getSeek(topicPartition);\n    if (toOffset == -1) {\n      toOffset = consumer.endOffsets(List.of(topicPartition)).get(topicPartition);\n    }\n\n    long numMessagesToPoll = Math.min(POLL_MESSAGES_PER_PARTITION, toOffset - fromOffset);\n\n    long startOffset = Math.max(fromOffset, toOffset - numMessagesToPoll);\n\n    nextRange.put(topicPartition, new FromToOffset(startOffset, toOffset));\n  }\n\n  return nextRange;\n}", "CodeBleu_score": 34.631688880661684}]}
{"instance_id": "c4c657caeba5", "generation_result": [{"code": "public void doLaunch(final MessageInput input){\n\t    final Configuration configuration = input.getConfiguration();\n    final String mode = configuration.getString(MODE);\n    final String topic = configuration.getString(TOPIC);\n    final String groupId = configuration.getString(GROUP_ID);\n    final String clientId = configuration.getString(CLIENT_ID);\n    final String zookeeper = configuration.getString(ZOOKEEPER);\n    final String bootstrapServers = configuration.getString(BOOTSTRAP_SERVERS);\n    final String codec = configuration.getString(CODEC);\n    final String codecAggregator = configuration.getString(CODEC_AGGREGATOR);\n    final String codecAggregatorConfig = configuration.getString(CODEC_AGGREGATOR_CONFIG);\n    final String codecAggregatorConfigField = configuration.getString(CODEC_AGGREGATOR_CONFIG_FIELD);\n    final String codecAggregatorConfigValue = configuration.getString(CODEC_AGGREGATOR_CONFIG_VALUE);\n    final boolean useLegacyMode = configuration.getBoolean(USE_LEGACY_MODE);\n    final boolean legacyModeEnabled = configuration.getBoolean(LEGACY_MODE_ENABLED);\n    final boolean legacyModeUseZookeeper = configuration.getBoolean(LEGACY_MODE_USE_ZOOKEEPER);\n    final boolean legacyModeUseBootstrapServers = configuration.getBoolean(LEGACY_MODE_USE_BOOTSTRAP_SERVERS);\n    final boolean legacyModeAutoOffsetReset = configuration.getBoolean(LEGACY_MODE_AUTO_OFFSET_RESET);\n    final boolean legacyModeAutoCommit = configuration.getBoolean(LEGACY_MODE_AUTO_COMMIT);\n    final boolean legacyModeEnableAutoCommit = configuration.getBoolean(LEGACY_MODE_ENABLE_AUTO_COMMIT);\n    final boolean legacyModeEnableAutoOffsetReset = configuration.getBoolean(LEGACY_MODE_ENABLE_AUTO_OFFSET_RESET);\n    final boolean legacyModeEnableAutoCommitAndOffset = configuration.getBoolean(LEGACY_MODE_ENABLE_AUTO_COMMIT_AND_OFFSET);\n    final String", "CodeBleu_score": 29.439631782364668}, {"code": "public void doLaunch(final MessageInput input){\n\t    final KafkaInput kafkaInput = (KafkaInput) input;\n    final Configuration configuration = input.getConfiguration();\n\n    final String inputId = kafkaInput.getId();\n    final String topic = configuration.getString(TOPIC_CONFIG_KEY);\n    final String groupId = configuration.getString(GROUP_ID_CONFIG_KEY);\n    final String zkConnect = configuration.getString(ZOOKEEPER_CONNECT_CONFIG_KEY);\n    final String bootstrapServers = configuration.getString(BOOTSTRAP_SERVERS_CONFIG_KEY);\n    final String consumerMode = configuration.getString(CONSUMER_MODE_CONFIG_KEY);\n    final String consumerModeZookeeper = configuration.getString(CONSUMER_MODE_ZOOKEEPER_CONFIG_KEY);\n    final String consumerModeBootstrap = configuration.getString(CONSUMER_MODE_BOOTSTRAP_CONFIG_KEY);\n    final String consumerModeLegacy = configuration.getString(CONSUMER_MODE_LEGACY_CONFIG_KEY);\n    final String consumerModeLegacyZookeeper = configuration.getString(CONSUMER_MODE_LEGACY_ZOOKEEPER_CONFIG_KEY);\n    final String consumerModeLegacyBootstrap = configuration.getString(CONSUMER_MODE_LEGACY_BOOTSTRAP_CONFIG_KEY);\n    final String consumerModeLegacyGroupId = configuration.getString(CONSUMER_MODE_LEGACY_GROUP_ID_CONFIG_KEY);\n    final String consumerModeLegacyZookeeperGroupId = configuration.getString(CONSUMER_MODE_LEGACY_ZOOKEEPER_GROUP_ID_CONFIG_KEY);\n    final String consumerModeLegacyBootstrapGroupId = configuration.getString(CONSUMER_MODE_LEGACY_BOOTSTRAP_GROUP_ID_CONFIG_KEY);\n    final String consumerModeLegacyZookeeperTopic = configuration.getString(CONSUMER_MODE_LEGACY_ZOOKEEPER_TOPIC_CONFIG_KEY);\n    final String consumerModeLegacyBootstrapTopic = configuration.getString(CONSUMER_MODE_LEGACY_BOOTSTRAP_TOPIC_CONFIG", "CodeBleu_score": 28.14864202115837}, {"code": "public void doLaunch(final MessageInput input){\n\t    final Configuration configuration = input.getConfiguration();\n    final String mode = configuration.getString(MODE_CONFIG_KEY);\n    final String zookeeper = configuration.getString(ZOOKEEPER_CONFIG_KEY);\n    final String bootstrap = configuration.getString(BOOTSTRAP_CONFIG_KEY);\n    final String groupId = configuration.getString(GROUP_ID_CONFIG_KEY);\n    final String topic = configuration.getString(TOPIC_CONFIG_KEY);\n    final String codec = configuration.getString(CODEC_CONFIG_KEY);\n    final String codecAggregator = configuration.getString(CODEC_AGGREGATOR_CONFIG_KEY);\n    final String consumerType = configuration.getString(CONSUMER_TYPE_CONFIG_KEY);\n    final String consumerTypeLegacy = configuration.getString(CONSUMER_TYPE_LEGACY_CONFIG_KEY);\n    final String consumerTypeKafka = configuration.getString(CONSUMER_TYPE_KAFKA_CONFIG_KEY);\n    final String consumerTypeKafkaStreams = configuration.getString(CONSUMER_TYPE_KAFKA_STREAMS_CONFIG_KEY);\n    final String consumerTypeKafkaStreamsStream = configuration.getString(CONSUMER_TYPE_KAFKA_STREAMS_STREAM_CONFIG_KEY);\n    final String consumerTypeKafkaStreamsThread = configuration.getString(CONSUMER_TYPE_KAFKA_STREAMS_THREAD_CONFIG_KEY);\n    final String consumerTypeKafkaStreamsStreamThread = configuration.getString(CONSUMER_TYPE_KAFKA_STREAMS_STREAM_THREAD_CONFIG_KEY);\n    final String consumerTypeKafkaStreamsStreamThreadCount = configuration.getString(CONSUMER_TYPE_KAFKA_STREAMS_STREAM_THREAD_COUNT_CONFIG_KEY);\n    final String consumerTypeKafkaStreamsStreamThreadPollInterval = configuration.getString(CONSUMER_TYPE_KAFKA_STREAMS_STREAM_THREAD_POLL_INTERVAL_CONFIG_KEY);\n    final String consumerTypeKafkaStreamsStreamThreadPollTimeout = configuration.getString(CONSUMER_TYPE_KAF", "CodeBleu_score": 27.652791896454577}]}
{"instance_id": "dffe85dbb47b", "generation_result": [{"code": "private void insertCustomProperties(Properties props){\n\t    if (props.containsKey(KafkaInput.CUSTOM_PROPERTIES)) {\n        try {\n            Properties customProps = new Properties();\n            customProps.load(new ByteArrayInputStream(props.getProperty(KafkaInput.CUSTOM_PROPERTIES).getBytes(StandardCharsets.UTF_8)));\n            props.putAll(customProps);\n        } catch (IOException e) {\n            logger.error(\"Failed to load custom properties: \" + e.getMessage());\n        }\n    }\n}", "CodeBleu_score": 47.6844731372583}, {"code": "private void insertCustomProperties(Properties props){\n\t    try {\n        String customProperties = config.get(\"customProperties\", \"\");\n        Properties customProps = new Properties();\n        if (!Strings.isNullOrEmpty(customProperties)) {\n            try (ByteArrayInputStream is = new ByteArrayInputStream(customProperties.getBytes(StandardCharsets.UTF_8))) {\n                customProps.load(is);\n            }\n        }\n        props.putAll(customProps);\n    } catch (IOException e) {\n        logger.error(\"Failed to load custom properties\", e);\n    }\n}", "CodeBleu_score": 53.60878181096491}, {"code": "private void insertCustomProperties(Properties props){\n\t    try {\n        String customProps = config.getString(KafkaInput.CUSTOM_PROPERTIES_CONFIG_KEY);\n        if (!Strings.isNullOrEmpty(customProps)) {\n            Properties customPropsObj = new Properties();\n            customPropsObj.load(new ByteArrayInputStream(customProps.getBytes(StandardCharsets.UTF_8)));\n            props.putAll(customPropsObj);\n        }\n    } catch (IOException e) {\n        LOG.error(\"Failed to load custom properties from configuration string: {}\", config.getString(KafkaInput.CUSTOM_PROPERTIES_CONFIG_KEY));\n    }\n}", "CodeBleu_score": 50.268511992229}]}
{"instance_id": "ea146a7bc30c", "generation_result": [{"code": "public void write(List<RawMessageEvent> entries) throws MessageQueueException{\n\t    if (entries == null || entries.isEmpty()) {\n        return;\n    }\n    final List<Journal.Entry> journalEntries = entries.stream().filter(Objects::nonNull).map(entry -> new Journal.Entry(entry.getRawMessage().getBytes(), entry.getRawMessage().getBytes().length)).collect(Collectors.toList());\n    final AtomicLong messageBytes = new AtomicLong();\n    final AtomicLong messagesWritten = new AtomicLong();\n    final Semaphore semaphore = new Semaphore(1);\n    final Retryer<Void> retryer = RetryerBuilder.<Void>newBuilder()\n            .retryIfExceptionOfType(MessageQueueException.class)\n            .retryIfExceptionOfType(ExecutionException.class)\n            .retryIfExceptionOfType(RetryException.class)\n            .retryIfException()\n            .withStopStrategy(StopStrategies.stopAfterAttempt(2))\n            .withWaitStrategy(WaitStrategies.exponentialWait(100, 2, TimeUnit.MILLISECONDS))\n            .build();\n    try {\n        semaphore.acquire();\n        retryer.call(() -> {\n            final long startTime = System.currentTimeMillis();\n            journal.write(journalEntries);\n            final long endTime = System.currentTimeMillis();\n            messageBytes.addAndGet(journalEntries.stream().mapToLong(entry -> entry.getBytes().length).sum());\n            messagesWritten.addAndGet(journalEntries.size());\n            LOG.debug(\"Wrote {} messages to journal in {}ms\", journalEntries.size(), endTime - startTime);\n            return null;\n        });\n    } catch (Exception e) {\n        throw new MessageQueueException(\"Failed to write entries to journal\", e);\n    } finally {\n        semaphore.release();\n    }\n    messagesWritten.addAndGet(journalEntries.size());\n    messageBytes.addAndGet(journalEntries.stream().mapToLong(entry -> entry.getBytes().length).sum());\n    metrics.messagesWritten(messagesWritten", "CodeBleu_score": 49.75427759914782}, {"code": "public void write(List<RawMessageEvent> entries) throws MessageQueueException{\n\t    Objects.requireNonNull(entries);\n    if (entries.isEmpty()) {\n        return;\n    }\n\n    final List<RawMessageEvent> filteredEntries = entries.stream().filter(Objects::nonNull).collect(Collectors.toList());\n    final int entriesCount = filteredEntries.size();\n    final AtomicLong bytes = new AtomicLong(0);\n    filteredEntries.forEach(entry -> bytes.addAndGet(entry.getRawMessage().length));\n\n    final Semaphore semaphore = new Semaphore(1);\n    semaphore.acquireUninterruptibly();\n\n    final Retryer<Void> retryer = RetryerBuilder.<Void>newBuilder()\n            .retryIfExceptionOfType(MessageQueueException.class)\n            .retryIfRuntimeException()\n            .withStopStrategy(StopStrategies.stopAfterAttempt(10))\n            .withWaitStrategy(WaitStrategies.exponentialWait(100, 10000, TimeUnit.MILLISECONDS))\n            .build();\n\n    try {\n        retryer.call(() -> {\n            try {\n                journal.write(filteredEntries);\n            } catch (MessageQueueException e) {\n                throw new RetryException(e);\n            }\n            return null;\n        });\n    } catch (ExecutionException e) {\n        throw new MessageQueueException(\"Failed to write to journal\", e);\n    } catch (RetryException e) {\n        throw new MessageQueueException(\"Failed to write to journal\", e.getCause());\n    } finally {\n        semaphore.release();\n    }\n\n    writtenMessages.addAndGet(entriesCount);\n    writtenBytes.addAndGet(bytes.get());\n}", "CodeBleu_score": 50.61206143675273}, {"code": "public void write(List<RawMessageEvent> entries) throws MessageQueueException{\n\t    Objects.requireNonNull(entries, \"entries\");\n    if (entries.isEmpty()) {\n        return;\n    }\n\n    final List<RawMessageEvent> validEntries = entries.stream()\n            .filter(Objects::nonNull)\n            .collect(Collectors.toList());\n\n    if (validEntries.isEmpty()) {\n        return;\n    }\n\n    final AtomicLong bytes = new AtomicLong(0);\n    final AtomicLong messages = new AtomicLong(0);\n\n    validEntries.forEach(entry -> {\n        bytes.addAndGet(entry.getMessage().length);\n        messages.incrementAndGet();\n    });\n\n    final Retryer<Void> retryer = RetryerBuilder.<Void>newBuilder()\n            .retryIfExceptionOfType(MessageQueueException.class)\n            .retryIfExceptionOfType(ExecutionException.class)\n            .retryIfExceptionOfType(InterruptedException.class)\n            .retryIfRuntimeException()\n            .withWaitStrategy(WaitStrategies.exponentialWait(100, 1000, TimeUnit.MILLISECONDS))\n            .withStopStrategy(StopStrategies.stopAfterAttempt(3))\n            .build();\n\n    try {\n        retryer.call(() -> {\n            final List<Journal.Entry> journalEntries = validEntries.stream()\n                    .map(entry -> new Journal.Entry(entry.getMessage(), entry.getTimestamp()))\n                    .collect(Collectors.toList());\n\n            journal.write(journalEntries);\n            return null;\n        });\n    } catch (RetryException e) {\n        throw new MessageQueueException(\"Failed to write to journal\", e);\n    }\n\n    metrics.writtenBytes.add(bytes.get());\n    metrics.writtenMessages.add(messages.get());\n}", "CodeBleu_score": 53.51503910450791}]}
{"instance_id": "944e77614042", "generation_result": [{"code": "public void acknowledge(List<Message> messages){\n\t\n    if (messages == null || messages.isEmpty()) {\n        return;\n    }\n\n    Optional<Message> maxMessage = messages.stream().max(Message::compareTo);\n\n    if (maxMessage.isPresent()) {\n        Message message = maxMessage.get();\n        MessageQueueAcknowledger acknowledger = message.getMessageQueueAcknowledger();\n\n        if (acknowledger instanceof LocalKafkaJournal.Acknowledger) {\n            ((LocalKafkaJournal.Acknowledger) acknowledger).acknowledge(message);\n        } else if (acknowledger instanceof AbstractMessageQueueAcknowledger) {\n            ((AbstractMessageQueueAcknowledger) acknowledger).acknowledge(message);\n        }\n    }\n\n    // Update metrics\n    if (metrics != null) {\n        metrics.incMessagesAcknowledged(messages.size());\n    }\n}", "CodeBleu_score": 35.11231204774845}, {"code": "public void acknowledge(List<Message> messages){\n\t\n    // Get the maximum valid message queue ID from the list of messages\n    Optional<Long> maxMessageQueueId = messages.stream().map(Message::getMessageQueueId).max(Long::compareTo);\n\n    // If the maximum valid message queue ID is present, acknowledge it\n    if (maxMessageQueueId.isPresent()) {\n        messageQueueAcknowledger.acknowledge(maxMessageQueueId.get());\n    }\n\n    // Update the metrics by marking the number of acknowledged messages\n    metrics.incrementAcknowledgedMessages(messages.size());\n}", "CodeBleu_score": 36.81378546692964}, {"code": "public void acknowledge(List<Message> messages){\n\t    // TODO: Implement this method\n    throw new UnsupportedOperationException(\"Not implemented yet.\");\n}", "CodeBleu_score": 5.238833550758574}]}
{"instance_id": "981280879490", "generation_result": [{"code": "private void registerLegacyMetrics(){\n\t    final MetricFilter filter = new MetricFilter() {\n        @Override\n        public boolean matches(String name, Metric metric) {\n            return name.startsWith(LocalKafkaJournal.class.getName());\n        }\n    };\n    final Map<String, Metric> metrics = metricRegistry.getMetrics(filter);\n    for (Map.Entry<String, Metric> entry : metrics.entrySet()) {\n        final String legacyName = entry.getKey().substring(LocalKafkaJournal.class.getName().length() + 1);\n        try {\n            metricRegistry.register(legacyName, entry.getValue());\n        } catch (IllegalArgumentException e) {\n            LOG.warn(\"Failed to register legacy metric '{}' with value '{}'\", legacyName, entry.getValue(), e);\n        }\n    }\n}", "CodeBleu_score": 43.75728428518965}, {"code": "private void registerLegacyMetrics(){\n\t    try {\n        final MetricRegistry metricRegistry = getMetricRegistry();\n        final Set<String> legacyMetrics = Sets.newHashSet();\n        for (final Map.Entry<String, com.codahale.metrics.Metric> entry : metricRegistry.getMetrics().entrySet()) {\n            if (entry.getKey().startsWith(LocalKafkaJournal.class.getName())) {\n                legacyMetrics.add(entry.getKey());\n            }\n        }\n        for (final String legacyMetric : legacyMetrics) {\n            final String legacyName = legacyMetric.substring(LocalKafkaJournal.class.getName().length() + 1);\n            try {\n                metricRegistry.register(legacyName, metricRegistry.remove(legacyMetric));\n            } catch (final IllegalArgumentException e) {\n                LOG.warn(\"Failed to register legacy metric {} under name {}: {}\", legacyMetric, legacyName, e.getMessage());\n            }\n        }\n    } catch (final Exception e) {\n        LOG.warn(\"Failed to register legacy metrics: {}\", e.getMessage());\n    }\n}", "CodeBleu_score": 35.70643446894203}, {"code": "private void registerLegacyMetrics(){\n\t    // The following line registers legacy metrics in the metric registry.\n    // It filters the metrics to include only those starting with the LocalKafkaJournal class name.\n    // For each filtered metric, it constructs a legacy metric name and attempts to register it under this name in the metric registry.\n    // If registration fails, it logs a warning message indicating the original and legacy metric names.\n    MetricRegistry.defaultRegistry().registerAll(new MetricFilter() {\n        @Override\n        public boolean matches(String name, Metric metric) {\n            return name.startsWith(LocalKafkaJournal.class.getName());\n        }\n    }, new MetricRegistry.MetricFilter() {\n        @Override\n        public boolean matches(String name, Metric metric) {\n            return true;\n        }\n    });\n}", "CodeBleu_score": 27.248954503494737}]}
{"instance_id": "3ca34bfd2d64", "generation_result": [{"code": "private Timer registerHdrTimer(MetricRegistry metricRegistry, final String metricName){\n\t    try {\n        return metricRegistry.timer(metricName);\n    } catch (IllegalArgumentException e) {\n        return metricRegistry.timer(metricName);\n    }\n}", "CodeBleu_score": 20.24486019613349}, {"code": "private Timer registerHdrTimer(MetricRegistry metricRegistry, final String metricName){\n\t    try {\n        return metricRegistry.timer(metricName);\n    } catch (IllegalArgumentException e) {\n        return metricRegistry.timer(metricName);\n    }\n}", "CodeBleu_score": 20.24486019613349}, {"code": "private Timer registerHdrTimer(MetricRegistry metricRegistry, final String metricName){\n\t    try {\n        return metricRegistry.timer(metricName);\n    } catch (IllegalArgumentException e) {\n        return metricRegistry.timer(metricName);\n    }\n}", "CodeBleu_score": 20.24486019613349}]}
{"instance_id": "e1d07a1fa986", "generation_result": [{"code": "private void registerUncommittedGauge(MetricRegistry metricRegistry, String name){\n\t    try {\n        metricRegistry.register(name, new Gauge<Integer>() {\n            @Override\n            public Integer getValue() {\n                long uncommitted = 0;\n                if (logEndOffset.get() > logStartOffset.get())\n                    uncommitted = logEndOffset.get() - committedOffset.get();\n                return (int) uncommitted;\n            }\n        });\n    } catch (IllegalArgumentException e) {\n        // ignore\n    }\n}", "CodeBleu_score": 43.70193137844615}, {"code": "private void registerUncommittedGauge(MetricRegistry metricRegistry, String name){\n\t    try {\n        metricRegistry.register(name, (Gauge<Integer>) () -> {\n            long committed = getLastFetchedOffset();\n            if (committed == -1) {\n                return 0;\n            }\n            long end = getLogEndOffset();\n            if (committed == end) {\n                return 0;\n            }\n            if (committed == getLogStartOffset()) {\n                return (int) (end - getLogStartOffset());\n            }\n            return (int) (end - committed);\n        });\n    } catch (IllegalArgumentException e) {\n        // ignore\n    }\n}", "CodeBleu_score": 50.40478546010332}, {"code": "private void registerUncommittedGauge(MetricRegistry metricRegistry, String name){\n\t    try {\n        metricRegistry.register(name, new Gauge<Long>() {\n            public Long getValue() {\n                return uncommittedMessages();\n            }\n        });\n    } catch (IllegalArgumentException e) {\n        // ignore\n    }\n}", "CodeBleu_score": 28.65474126055188}]}
{"instance_id": "8b30a387069f", "generation_result": [{"code": "private long flushMessages(List<Message> messages, long payloadSize){\n\t    if (messages.isEmpty()) {\n        logger.debug(\"Flushing empty message list\");\n        return -1L;\n    }\n    logger.debug(\"Flushing {} messages to log {}\", messages.size(), log.name());\n    ByteBufferMessageSet messageSet = new ByteBufferMessageSet(messages.iterator());\n    logger.trace(\"Message set size is {}\", messageSet.sizeInBytes());\n    long start = Time.SYSTEM.hiResClockMs();\n    long offset = log.append(messageSet);\n    long elapsed = Time.SYSTEM.hiResClockMs() - start;\n    long appendedSize = messageSet.validBytes();\n    logAppendInfo.markAppend(offset, appendedSize, elapsed, payloadSize);\n    logAppendInfo.maybeSwapSegment();\n    return offset;\n}", "CodeBleu_score": 51.999368185540554}, {"code": "private long flushMessages(List<Message> messages, long payloadSize){\n\t    if (messages.isEmpty()) {\n        log.debug(\"No messages to flush for partition {}\", partitionId);\n        return -1L;\n    }\n    log.debug(\"Flushing {} messages for partition {}\", messages.size(), partitionId);\n    long start = System.nanoTime();\n    ByteBufferMessageSet messageSet = new ByteBufferMessageSet(messages.iterator());\n    long end = System.nanoTime();\n    log.debug(\"Created {} byte message set for partition {} in {} ms\", messageSet.sizeInBytes(), partitionId,\n            (end - start) / 1000000L);\n    start = System.nanoTime();\n    long lastOffset = log.append(messageSet).lastOffset;\n    end = System.nanoTime();\n    log.debug(\"Appended {} byte message set for partition {} in {} ms\", messageSet.sizeInBytes(), partitionId,\n            (end - start) / 1000000L);\n    if (lastOffset == -1) {\n        log.error(\"Append returned -1 offset for partition {}\", partitionId);\n    }\n    lastFlushOffset = lastOffset;\n    lastFlushTimeMs = time.milliseconds();\n    lastFlushTimeNanos = System.nanoTime();\n    lastFlushSize = messageSet.sizeInBytes();\n    lastFlushPayloadSize = payloadSize;\n    lastFlushMessages = messages.size();\n    log.debug(\"Flushed {} messages to offset {} for partition {} in {} ms\", messages.size(), lastOffset, partitionId,\n            (end - start) / 1000000L);\n    return lastOffset;\n}", "CodeBleu_score": 47.48522574689981}, {"code": "private long flushMessages(List<Message> messages, long payloadSize){\n\t    if (messages.isEmpty()) {\n        logger.debug(\"No messages to flush for partition {}\", topicPartition);\n        return -1L;\n    }\n\n    logger.debug(\"Flushing {} messages to partition {}\", messages.size(), topicPartition);\n\n    ByteBufferMessageSet messageSet = new ByteBufferMessageSet(messages.iterator());\n    long logAppendStartNanos = Time.SYSTEM.nanoseconds();\n    long logAppendEndNanos = 0L;\n    long logAppendEndOffset = -1L;\n    try {\n        LogAppendInfo logAppendInfo = log.append(messageSet);\n        logAppendEndNanos = Time.SYSTEM.nanoseconds();\n        logAppendEndOffset = logAppendInfo.lastOffset;\n        logger.debug(\"Flushed {} messages to partition {} (offset {}) in {}ms\", messages.size(), topicPartition, logAppendEndOffset,\n                Time.SYSTEM.milliseconds() - logAppendStartNanos);\n    } catch (KafkaException e) {\n        logger.error(\"Failed to flush messages to partition {}\", topicPartition, e);\n        throw e;\n    }\n\n    if (logAppendEndOffset < 0) {\n        logger.error(\"Failed to flush messages to partition {}\", topicPartition);\n        throw new RuntimeException(\"Failed to flush messages to partition \" + topicPartition);\n    }\n\n    metrics.messagesWritten.mark(messages.size());\n    metrics.bytesWritten.mark(payloadSize);\n    metrics.logFlushTimer.update(logAppendEndNanos - logAppendStartNanos, MILLISECONDS);\n\n    return logAppendEndOffset;\n}", "CodeBleu_score": 47.448674858314774}]}
{"instance_id": "ee338b61e75d", "generation_result": [{"code": "private void closeKafkaAdminClient(Long clusterPhyId) {\n\t    try {\n        if (adminClientMap.containsKey(clusterPhyId)) {\n            List<AdminClient> adminClientList = adminClientMap.get(clusterPhyId);\n            log.info(\"Close Kafka AdminClient instances associated with cluster ID: {}\", clusterPhyId);\n            for (AdminClient adminClient : adminClientList) {\n                try {\n                    adminClient.close(Duration.ofSeconds(30));\n                } catch (Exception e) {\n                    log.error(\"Close Kafka AdminClient instance failed, cluster ID: {}, exception: {}\", clusterPhyId, e);\n                }\n            }\n            adminClientMap.remove(clusterPhyId);\n            log.info(\"Close Kafka AdminClient instances associated with cluster ID: {} successfully\", clusterPhyId);\n        }\n    } finally {\n        lock.unlock();\n    }\n}", "CodeBleu_score": 47.92306836688716}, {"code": "private void closeKafkaAdminClient(Long clusterPhyId) {\n\t    if (clusterPhyId == null) {\n        return;\n    }\n    try {\n        List<AdminClient> adminClients = clusterAdminClientMap.get(clusterPhyId);\n        if (adminClients == null) {\n            return;\n        }\n        log.info(\"close kafka admin client for clusterPhyId {}\", clusterPhyId);\n        for (AdminClient adminClient : adminClients) {\n            try {\n                adminClient.close();\n            } catch (Exception e) {\n                log.error(\"close kafka admin client failed, clusterPhyId:{}\", clusterPhyId, e);\n            }\n        }\n        clusterAdminClientMap.remove(clusterPhyId);\n    } finally {\n        clusterAdminClientMapLock.unlock();\n    }\n}", "CodeBleu_score": 48.69598439677102}, {"code": "private void closeKafkaAdminClient(Long clusterPhyId) {\n\t    ILog log = LogFactory.getLog(KafkaClusterPhyManager.class);\n    log.info(\"start to close kafka admin client for cluster phy id {}\", clusterPhyId);\n    Map<String, AdminClient> adminClientMap = clusterPhyIdToAdminClientMap.get(clusterPhyId);\n    if (adminClientMap == null) {\n        log.warn(\"cluster phy id {} not exist\", clusterPhyId);\n        return;\n    }\n    List<String> failedToCloseClientList = new ArrayList<>();\n    for (Map.Entry<String, AdminClient> entry : adminClientMap.entrySet()) {\n        String clientId = entry.getKey();\n        AdminClient adminClient = entry.getValue();\n        try {\n            adminClient.close(Duration.ofMillis(5000));\n        } catch (Exception e) {\n            failedToCloseClientList.add(clientId);\n            log.error(\"failed to close kafka admin client for cluster phy id {}, client id {}\", clusterPhyId, clientId, e);\n        }\n    }\n    if (failedToCloseClientList.size() > 0) {\n        log.error(\"failed to close kafka admin client for cluster phy id {}, failed client list {}\", clusterPhyId, failedToCloseClientList);\n    } else {\n        log.info(\"successfully close kafka admin client for cluster phy id {}\", clusterPhyId);\n    }\n    clusterPhyIdToAdminClientMap.remove(clusterPhyId);\n}", "CodeBleu_score": 48.62204878872298}]}
{"instance_id": "6f0b935b971c", "generation_result": [{"code": "private boolean closeAdminClientList(Long clusterPhyId, List<AdminClient> adminClientList){\n\t    if (adminClientList == null) {\n        return true;\n    }\n    boolean success = true;\n    for (AdminClient adminClient : adminClientList) {\n        try {\n            adminClient.close(Duration.ofSeconds(30));\n        } catch (Exception e) {\n            ILog log = LogFactory.getLog();\n            log.error(\"closeAdminClientList failed, clusterPhyId: {}, adminClient: {}, error: {}\", clusterPhyId, adminClient, e);\n            success = false;\n        }\n    }\n    return success;\n}", "CodeBleu_score": 71.05544291147459}, {"code": "private boolean closeAdminClientList(Long clusterPhyId, List<AdminClient> adminClientList){\n\t    if (adminClientList == null) {\n        return true;\n    }\n    boolean success = true;\n    for (AdminClient adminClient : adminClientList) {\n        try {\n            adminClient.close(Duration.ofSeconds(30));\n        } catch (Exception e) {\n            success = false;\n            log.error(\"close adminClient failed, clusterPhyId: {}, adminClient: {}\", clusterPhyId, adminClient, e);\n        }\n    }\n    return success;\n}", "CodeBleu_score": 70.87837353606601}, {"code": "private boolean closeAdminClientList(Long clusterPhyId, List<AdminClient> adminClientList){\n\t    if (adminClientList == null) {\n        return true;\n    }\n\n    for (AdminClient adminClient : adminClientList) {\n        try {\n            adminClient.close(Duration.ofSeconds(30));\n        } catch (Exception e) {\n            log.error(\"close adminClient failed, clusterPhyId: {}, adminClient: {}\", clusterPhyId, adminClient, e);\n            success = false;\n        }\n    }\n\n    return success;\n}", "CodeBleu_score": 62.8137204623406}]}
{"instance_id": "b5475aa94c1a", "generation_result": [{"code": "public void stop() {\n\t    if (app == null) {\n        throw new IllegalStateException(\"Application is not running\");\n    }\n    try {\n        app.stop();\n    } catch (Exception e) {\n        throw new IllegalStateException(\"Error stopping application\", e);\n    }\n    try {\n        TestSocketUtils.waitForSocket(app.getLocalManagementPort(), 10000, 5);\n    } catch (Exception e) {\n        throw new IllegalStateException(\"Error stopping application\", e);\n    }\n    app = null;\n}", "CodeBleu_score": 28.15383931757946}, {"code": "public void stop() {\n\t\tif (app == null) {\n\t\treturn;\n\t}\n\ttry {\n\t\tapp.stop();\n\t} catch (Exception e) {\n\t\tthrow new RuntimeException(e);\n\t}\n\tif (app.isRunning()) {\n\t\tint i = 0;\n\t\twhile (app.isRunning() && i < 5) {\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\tthrow new IllegalStateException(\"Interrupted while waiting for the application to stop\", e);\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tif (app.isRunning()) {\n\t\t\tthrow new IllegalStateException(\"Application did not stop\");\n\t\t}\n\t}\n\tapp = null;\n}", "CodeBleu_score": 49.21664826441421}, {"code": "public void stop() {\n\t\t\tif (app == null) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tapp.stop();\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\tthrow new IllegalStateException(\"Failed to stop application\", ex);\n\t\t}\n\t\tfinally {\n\t\t\tapp = null;\n\t\t}\n\t}", "CodeBleu_score": 26.289187133906296}]}
{"instance_id": "5da405de9e3d", "generation_result": [{"code": "static EurekaServerRunner startEurekaServer(Class config){\n\t    return startEurekaServer(config, null, null, null, null);\n}", "CodeBleu_score": 7.76198829888932}, {"code": "static EurekaServerRunner startEurekaServer(Class config){\n\t    return startEurekaServer(config, null);\n}", "CodeBleu_score": 7.160574376176218}, {"code": "static EurekaServerRunner startEurekaServer(Class config){\n\t    EurekaServerRunner eurekaServerRunner = new EurekaServerRunner(config);\n    eurekaServerRunner.enableSSLWithKeyStore(\n            \"src/test/resources/server.jks\", \"password\",\n            \"src/test/resources/ca.jks\", \"password\");\n    eurekaServerRunner.start();\n    return eurekaServerRunner;\n}", "CodeBleu_score": 38.453898823375695}]}
{"instance_id": "19cbf70751b2", "generation_result": [{"code": "static EurekaClientRunner startService(EurekaServerRunner server, Class config){\n\t    EurekaClientRunner runner = new EurekaClientRunner(config);\n    runner.setEurekaServerRunner(server);\n    runner.setServiceName(\"testservice\");\n    runner.setEnableTls(true);\n    runner.start();\n    return runner;\n}", "CodeBleu_score": 38.466528784166535}, {"code": "static EurekaClientRunner startService(EurekaServerRunner server, Class config){\n\t    EurekaClientRunner runner = new EurekaClientRunner(config, server);\n    runner.setServiceName(\"testservice\");\n    runner.setEnableTls(true);\n    runner.start();\n    return runner;\n}", "CodeBleu_score": 46.00401820647265}, {"code": "static EurekaClientRunner startService(EurekaServerRunner server, Class config){\n\t    return startService(server, config, \"testservice\");\n}", "CodeBleu_score": 21.179683550434607}]}
{"instance_id": "d6ccff5c0536", "generation_result": [{"code": "static void createCertificates() throws Exception{\n\t    // Create a CA certificate\n    KeyTool.createSelfSignedCertificate(new File(CA_CERT_FILE), \"CA\", \"CN=CA\");\n    saveCert(CA_CERT_FILE, CA_CERT_ALIAS);\n\n    // Create a server certificate\n    KeyTool.createSelfSignedCertificate(new File(SERVER_CERT_FILE), \"server\", \"CN=server\");\n    saveCert(SERVER_CERT_FILE, SERVER_CERT_ALIAS);\n\n    // Create a client certificate\n    KeyTool.createSelfSignedCertificate(new File(CLIENT_CERT_FILE), \"client\", \"CN=client\");\n    saveCert(CLIENT_CERT_FILE, CLIENT_CERT_ALIAS);\n\n    // Create a second CA certificate\n    KeyTool.createSelfSignedCertificate(new File(SECOND_CA_CERT_FILE), \"CA\", \"CN=secondCA\");\n    saveCert(SECOND_CA_CERT_FILE, SECOND_CA_CERT_ALIAS);\n\n    // Create a second client certificate\n    KeyTool.createSelfSignedCertificate(new File(SECOND_CLIENT_CERT_FILE), \"client\", \"CN=secondClient\");\n    saveCert(SECOND_CLIENT_CERT_FILE, SECOND_CLIENT_CERT_ALIAS);\n}", "CodeBleu_score": 13.329224303320567}, {"code": "static void createCertificates() throws Exception{\n\t    // Create CA certificate\n    String caAlias = \"ca\";\n    KeyStore caKeyStore = KeyStore.getInstance(\"JKS\");\n    caKeyStore.load(null, null);\n    caKeyTool.createSelfSignedCertificate(caAlias, caKeyStore);\n    saveCert(caAlias, caKeyStore);\n\n    // Create server certificate\n    String serverAlias = \"server\";\n    KeyStore serverKeyStore = KeyStore.getInstance(\"JKS\");\n    serverKeyStore.load(null, null);\n    caKeyTool.createCertificate(serverAlias, caAlias, serverAlias, serverKeyStore);\n    saveKeyAndCert(serverAlias, serverKeyStore);\n\n    // Create client certificate\n    String clientAlias = \"client\";\n    KeyStore clientKeyStore = KeyStore.getInstance(\"JKS\");\n    clientKeyStore.load(null, null);\n    caKeyTool.createCertificate(clientAlias, caAlias, clientAlias, clientKeyStore);\n    saveKeyAndCert(clientAlias, clientKeyStore);\n\n    // Create second CA certificate\n    String secondCaAlias = \"secondCa\";\n    KeyStore secondCaKeyStore = KeyStore.getInstance(\"JKS\");\n    secondCaKeyStore.load(null, null);\n    caKeyTool.createSelfSignedCertificate(secondCaAlias, secondCaKeyStore);\n    saveCert(secondCaAlias, secondCaKeyStore);\n\n    // Create client certificate\n    String secondClientAlias = \"secondClient\";\n    KeyStore secondClientKeyStore = KeyStore.getInstance(\"JKS\");\n    secondClientKeyStore.load(null, null);\n    caKeyTool.createCertificate(secondClientAlias, secondCaAlias, secondClientAlias, secondClientKeyStore);\n    saveKeyAndCert(secondClientAlias, secondClientKeyStore);\n}", "CodeBleu_score": 29.203579884280085}, {"code": "static void createCertificates() throws Exception{\n\t    // Create a CA certificate and key\n    KeyTool keyTool = new KeyTool();\n    keyTool.createCertificateAuthority(\"ca\", \"ca\", \"ca\", \"ca\");\n    saveCert(\"ca\", \"ca.cert\");\n    saveKeyAndCert(\"ca\", \"ca.key\", \"ca.cert\");\n    // Create a server certificate and key\n    keyTool.createServerCertificate(\"server\", \"server\", \"ca\", \"server\", \"server\");\n    saveCert(\"server\", \"server.cert\");\n    saveKeyAndCert(\"server\", \"server.key\", \"server.cert\");\n    // Create a client certificate and key\n    keyTool.createClientCertificate(\"client\", \"client\", \"ca\", \"client\", \"client\");\n    saveCert(\"client\", \"client.cert\");\n    saveKeyAndCert(\"client\", \"client.key\", \"client.cert\");\n    // Create a second CA certificate and key\n    keyTool.createCertificateAuthority(\"ca2\", \"ca2\", \"ca2\", \"ca2\");\n    saveCert(\"ca2\", \"ca2.cert\");\n    saveKeyAndCert(\"ca2\", \"ca2.key\", \"ca2.cert\");\n    // Create a second client certificate and key\n    keyTool.createClientCertificate(\"client2\", \"client2\", \"ca2\", \"client2\", \"client2\");\n    saveCert(\"client2\", \"client2.cert\");\n    saveKeyAndCert(\"client2\", \"client2.key\", \"client2.cert\");\n}", "CodeBleu_score": 17.895406620007577}]}
{"instance_id": "d2eeaa6a6bbe", "generation_result": [{"code": "private void assertInSeconds(BooleanSupplier assertion, int seconds){\n\t    long startTime = System.currentTimeMillis();\n    long limit = startTime + (seconds * 1000);\n    while (System.currentTimeMillis() < limit) {\n        if (assertion.getAsBoolean()) {\n            return;\n        }\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n    throw new RuntimeException(\"Assertion not met within \" + seconds + \" seconds\");\n}", "CodeBleu_score": 44.505100387384026}, {"code": "private void assertInSeconds(BooleanSupplier assertion, int seconds){\n\t    long timeLimit = System.currentTimeMillis() + (seconds * 1000);\n    while (System.currentTimeMillis() < timeLimit) {\n        if (assertion.getAsBoolean()) {\n            return;\n        }\n        try {\n            Thread.sleep(100);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n    throw new RuntimeException(\"Assertion not met within \" + seconds + \" seconds\");\n}", "CodeBleu_score": 41.60885768119475}, {"code": "private void assertInSeconds(BooleanSupplier assertion, int seconds){\n\t    long endTime = System.currentTimeMillis() + seconds * 1000;\n    while (System.currentTimeMillis() < endTime) {\n        if (assertion.getAsBoolean()) {\n            return;\n        }\n        try {\n            Thread.sleep(100);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new RuntimeException(e);\n        }\n    }\n    throw new RuntimeException(\"Assertion not met within \" + seconds + \" seconds\");\n}", "CodeBleu_score": 39.508061706214676}]}
{"instance_id": "6bb261b0e4e1", "generation_result": [{"code": "public X509Certificate createCert(KeyPair keyPair, String ca) throws Exception{\n\t\n    // Create the certificate builder\n    JcaX509v3CertificateBuilder certBuilder = new JcaX509v3CertificateBuilder(\n            new X500Name(ca),\n            BigInteger.valueOf(System.currentTimeMillis()),\n            new Date(),\n            new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 24 * 365),\n            new X500Name(ca),\n            keyPair.getPublic()\n    );\n\n    // Create the key usage extension\n    KeyUsage keyUsage = new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyEncipherment);\n    certBuilder.addExtension(Extension.keyUsage, false, keyUsage);\n\n    // Create the basic constraints extension\n    BasicConstraints basicConstraints = new BasicConstraints(0);\n    certBuilder.addExtension(Extension.basicConstraints, false, basicConstraints);\n\n    // Create the content signer\n    ContentSigner contentSigner = new JcaContentSignerBuilder(\"SHA256withRSA\").build(keyPair.getPrivate());\n\n    // Create the certificate holder\n    X509CertificateHolder certHolder = certBuilder.build(contentSigner);\n\n    // Convert the certificate holder to a X509 certificate\n    return new JcaX509CertificateConverter().getCertificate(certHolder);\n}", "CodeBleu_score": 38.26458086373903}, {"code": "public X509Certificate createCert(KeyPair keyPair, String ca) throws Exception{\n\t\t\n\t// Create a certificate builder\n\tJcaX509v3CertificateBuilder certBuilder = new JcaX509v3CertificateBuilder(\n\t\t\tnew X500Name(ca),\n\t\t\tnew BigInteger(\"1234567890123456789012345678901234567890\"),\n\t\t\tnew Date(),\n\t\t\tnew Date(System.currentTimeMillis() + 365 * 24 * 60 * 60 * 1000),\n\t\t\tnew X500Name(\"CN=Test\"),\n\t\t\tkeyPair.getPublic());\n\t\n\t// Create a content signer\n\tContentSigner signer = new JcaContentSignerBuilder(\"SHA256WithRSA\").setProvider(\"BC\").build(keyPair.getPrivate());\n\t\n\t// Add key usage extension\n\tcertBuilder.addExtension(Extension.keyUsage, true, new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyEncipherment));\n\t\n\t// Add basic constraints extension\n\tcertBuilder.addExtension(Extension.basicConstraints, true, new BasicConstraints(0));\n\t\n\t// Sign the certificate\n\tX509CertificateHolder certHolder = certBuilder.build(signer);\n\t\n\t// Convert to X509 certificate\n\tJcaX509CertificateConverter converter = new JcaX509CertificateConverter().setProvider(\"BC\");\n\treturn converter.getCertificate(certHolder);\n}", "CodeBleu_score": 36.910894255533655}, {"code": "public X509Certificate createCert(KeyPair keyPair, String ca) throws Exception{\n\t\n    // Create a certificate builder\n    JcaX509v3CertificateBuilder certBuilder = new JcaX509v3CertificateBuilder(\n        new X500Name(ca),\n        new BigInteger(\"1\"),\n        new Date(),\n        new Date(System.currentTimeMillis() + 3600000),\n        new X500Name(ca),\n        keyPair.getPublic()\n    );\n\n    // Add key usage and basic constraints extensions\n    certBuilder.addExtension(\n        Extension.keyUsage,\n        true,\n        new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyEncipherment)\n    );\n\n    certBuilder.addExtension(\n        Extension.basicConstraints,\n        true,\n        new BasicConstraints(0)\n    );\n\n    // Sign the certificate\n    ContentSigner signer = new JcaContentSignerBuilder(\"SHA256withECDSA\").setProvider(\"BC\").build(keyPair.getPrivate());\n\n    X509CertificateHolder certHolder = certBuilder.build(signer);\n    JcaX509CertificateConverter converter = new JcaX509CertificateConverter().setProvider(\"BC\");\n    return converter.getCertificate(certHolder);\n}", "CodeBleu_score": 36.251741537535004}]}
{"instance_id": "e4f9c32a7c9e", "generation_result": [{"code": "EurekaHttpClient getEurekaHttpClient(){\n\t    try {\n        Field eurekaTransportField = ReflectionUtils.findField(DiscoveryClient.class, \"eurekaTransport\");\n        ReflectionUtils.makeAccessible(eurekaTransportField);\n        Object eurekaTransport = ReflectionUtils.getField(eurekaTransportField, discoveryClient);\n        Field eurekaHttpClientField = ReflectionUtils.findField(eurekaTransport.getClass(), \"registrationClient\");\n        ReflectionUtils.makeAccessible(eurekaHttpClientField);\n        EurekaHttpClient eurekaHttpClient = (EurekaHttpClient) ReflectionUtils.getField(eurekaHttpClientField, eurekaTransport);\n        return eurekaHttpClient;\n    } catch (IllegalAccessException e) {\n        log.error(\"Unable to retrieve EurekaHttpClient instance\", e);\n        return null;\n    }\n}", "CodeBleu_score": 47.98327727549256}, {"code": "EurekaHttpClient getEurekaHttpClient(){\n\t    try {\n        Field registrationClientField = ReflectionUtils.findField(EurekaTransport.class, \"registrationClient\");\n        ReflectionUtils.makeAccessible(registrationClientField);\n        EurekaHttpClient eurekaHttpClient = (EurekaHttpClient) registrationClientField.get(eurekaTransport);\n        return eurekaHttpClient;\n    } catch (Exception e) {\n        LOGGER.error(\"Error retrieving EurekaHttpClient instance\", e);\n        return null;\n    }\n}", "CodeBleu_score": 41.67360219942805}, {"code": "EurekaHttpClient getEurekaHttpClient(){\n\t    EurekaHttpClient eurekaHttpClient = null;\n    try {\n        Field registrationClientField = ReflectionUtils.findField(EurekaTransport.class, \"registrationClient\");\n        if (registrationClientField != null) {\n            ReflectionUtils.makeAccessible(registrationClientField);\n            eurekaHttpClient = (EurekaHttpClient) ReflectionUtils.getField(registrationClientField, eurekaTransport);\n        }\n    } catch (IllegalAccessException e) {\n        logger.error(\"Could not access the registrationClient field from the eurekaTransport object. This may be due to a new version of the EurekaClient. Please report this issue to the Spring Cloud Netflix team.\", e);\n    }\n    return eurekaHttpClient;\n}", "CodeBleu_score": 46.007409763362276}]}
{"instance_id": "5c404f04e34c", "generation_result": [{"code": "public List<String> getServices(){\n\t    List<String> services = new ArrayList<String>();\n    Applications applications = eurekaClient.getApplications();\n    if (applications != null) {\n        List<Application> registeredApps = applications.getRegisteredApplications();\n        for (Application application : registeredApps) {\n            List<InstanceInfo> instances = application.getInstances();\n            if (instances != null && instances.size() > 0) {\n                services.add(application.getName().toLowerCase());\n            }\n        }\n    }\n    return services;\n}", "CodeBleu_score": 47.56139199455352}, {"code": "public List<String> getServices(){\n\t\t\tList<String> services = new ArrayList<String>();\n\t\tApplications applications = eurekaClient.getApplications();\n\t\tif (applications != null) {\n\t\t\tfor (Application application : applications.getRegisteredApplications()) {\n\t\t\t\tif (application.getInstances().size() > 0) {\n\t\t\t\t\tservices.add(application.getName().toLowerCase());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn services;\n\t}", "CodeBleu_score": 47.55042774378148}, {"code": "public List<String> getServices(){\n\t\n    List<String> services = new ArrayList<>();\n\n    Applications applications = eurekaClient.getApplications();\n\n    if (applications == null) {\n        return Collections.emptyList();\n    }\n\n    for (Application application : applications.getRegisteredApplications()) {\n        if (application.getInstances() != null && !application.getInstances().isEmpty()) {\n            services.add(application.getName().toLowerCase());\n        }\n    }\n\n    return services;\n}", "CodeBleu_score": 58.124694710826304}]}
{"instance_id": "a21251337ade", "generation_result": [{"code": "void populateHealthContributors(Map<String, HealthContributor> healthContributors){\n\t    Assert.notNull(healthContributors, \"HealthContributors map must not be null\");\n    for (Map.Entry<String, HealthContributor> entry : healthContributors.entrySet()) {\n        String name = entry.getKey();\n        HealthContributor contributor = entry.getValue();\n        if (contributor instanceof DiscoveryCompositeHealthContributor) {\n            DiscoveryCompositeHealthContributor compositeContributor = (DiscoveryCompositeHealthContributor) contributor;\n            for (HealthIndicator indicator : compositeContributor.getIndicators()) {\n                if (!(indicator instanceof EurekaHealthIndicator)) {\n                    healthContributors.put(name, indicator);\n                }\n            }\n        } else {\n            healthContributors.put(name, contributor);\n        }\n    }\n}", "CodeBleu_score": 39.77872046377613}, {"code": "void populateHealthContributors(Map<String, HealthContributor> healthContributors){\n\t\t\tAssert.notNull(healthContributors, \"Health contributors must not be null\");\n\t\tfor (Map.Entry<String, HealthContributor> entry : healthContributors.entrySet()) {\n\t\t\tif (entry.getValue() instanceof DiscoveryCompositeHealthContributor) {\n\t\t\t\tDiscoveryCompositeHealthContributor compositeHealthContributor = (DiscoveryCompositeHealthContributor) entry.getValue();\n\t\t\t\tfor (HealthIndicator healthIndicator : compositeHealthContributor.getIndicators()) {\n\t\t\t\t\tif (!(healthIndicator instanceof EurekaHealthIndicator)) {\n\t\t\t\t\t\thealthContributors.put(entry.getKey(), new HealthIndicatorAdapter(healthIndicator));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\thealthContributors.put(entry.getKey(), entry.getValue());\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 44.523985820469}, {"code": "void populateHealthContributors(Map<String, HealthContributor> healthContributors){\n\t\tfor (Map.Entry<String, HealthContributor> entry : healthContributors.entrySet()) {\n\t\tString name = entry.getKey();\n\t\tHealthContributor contributor = entry.getValue();\n\t\tif (contributor instanceof DiscoveryCompositeHealthContributor) {\n\t\t\tDiscoveryCompositeHealthContributor composite = (DiscoveryCompositeHealthContributor) contributor;\n\t\t\tfor (HealthIndicator indicator : composite.getIndicators()) {\n\t\t\t\tif (!(indicator instanceof EurekaHealthIndicator)) {\n\t\t\t\t\thealthContributors.put(name, indicator);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\thealthContributors.put(name, contributor);\n\t\t}\n\t}\n}", "CodeBleu_score": 43.46404710936048}]}
{"instance_id": "998fee829929", "generation_result": [{"code": "public String hello(){\n\t    ServiceInstance serviceInstance = loadBalancerClient.choose(\"provider-application\");\n    URI uri = serviceInstance.getUri();\n    return restTemplate.postForObject(uri+\"/echo\", \"Hello\", String.class);\n}", "CodeBleu_score": 28.132575874267594}, {"code": "public String hello(){\n\t    ServiceInstance serviceInstance = loadBalancerClient.choose(\"provider-application\");\n    URI uri = serviceInstance.getUri();\n    return restTemplate.postForObject(uri + \"/echo\", \"Hello\", String.class);\n}", "CodeBleu_score": 28.525874434237604}, {"code": "public String hello(){\n\t    List<ServiceInstance> instances = loadBalancerClient.getInstances(\"provider-application\");\n    if (instances == null || instances.isEmpty()) {\n        throw new RuntimeException(\"No instances found for provider-application\");\n    }\n    ServiceInstance instance = instances.get(0);\n    URI uri = instance.getUri();\n    String url = String.format(\"%s://%s:%s\", uri.getScheme(), uri.getHost(), uri.getPort());\n    RestTemplate restTemplate = new RestTemplate();\n    String response = restTemplate.postForObject(url + \"/echo\", \"Hello\", String.class);\n    return \"Hello \" + response;\n}", "CodeBleu_score": 57.776582529618835}]}
{"instance_id": "31166ae7d3dc", "generation_result": [{"code": "public String world(){\n\t    ServiceInstance instance = loadBalancerClient.choose(\"provider-application\");\n    URI uri = URI.create(instance.getUri().toString() + \"/echo\");\n    String response = restTemplate.postForObject(uri, \"Hello\", String.class);\n    return response;\n}", "CodeBleu_score": 49.611697751991244}, {"code": "public String world(){\n\t    ServiceInstance serviceInstance = loadBalancerClient.choose(\"provider-application\");\n    URI uri = serviceInstance.getUri();\n    return restTemplate.postForObject(uri + \"/echo\", \"Hello\", String.class);\n}", "CodeBleu_score": 37.9218192453747}, {"code": "public String world(){\n\t    ServiceInstance instance = loadBalancerClient.choose(\"provider-application\");\n    URI uri = instance.getUri();\n    return restTemplate.postForObject(uri + \"/echo\", \"Hello\", String.class);\n}", "CodeBleu_score": 33.042779055402676}]}
{"instance_id": "d7714f9cf0e9", "generation_result": [{"code": "public boolean register(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t    if (serverMap.containsKey(serviceName)) {\n        synchronized (serverMap.get(serviceName)) {\n            serverMap.get(serviceName).add(new Server(ip, port));\n        }\n        logger.info(\"Registered service: \" + serviceName + \" at \" + ip + \":\" + port);\n        return true;\n    } else {\n        Set<Server> serverSet = Collections.synchronizedSet(new HashSet<>());\n        serverSet.add(new Server(ip, port));\n        serverMap.put(serviceName, serverSet);\n        logger.info(\"Registered service: \" + serviceName + \" at \" + ip + \":\" + port);\n        return true;\n    }\n}", "CodeBleu_score": 50.962400410029396}, {"code": "public boolean register(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t    logger.info(\"Registering service with name: \" + serviceName + \" at IP: \" + ip + \" and port: \" + port);\n    synchronized (serverMap) {\n        if (serverMap.containsKey(serviceName)) {\n            Set<Server> serverSet = serverMap.get(serviceName);\n            if (serverSet.contains(new Server(ip, port))) {\n                logger.info(\"Service already registered. No need to register again.\");\n                return true;\n            } else {\n                serverSet.add(new Server(ip, port));\n                logger.info(\"Service registered successfully.\");\n                return true;\n            }\n        } else {\n            Set<Server> serverSet = Collections.synchronizedSet(new HashSet<>());\n            serverSet.add(new Server(ip, port));\n            serverMap.put(serviceName, serverSet);\n            logger.info(\"Service registered successfully.\");\n            return true;\n        }\n    }\n}", "CodeBleu_score": 48.233685308426864}, {"code": "public boolean register(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t    if (serverMap.containsKey(serviceName)) {\n        Set<Server> servers = serverMap.get(serviceName);\n        synchronized (servers) {\n            if (servers.contains(new Server(ip, port))) {\n                return false;\n            }\n            servers.add(new Server(ip, port));\n        }\n    } else {\n        Set<Server> servers = Collections.synchronizedSet(new HashSet<>());\n        servers.add(new Server(ip, port));\n        serverMap.put(serviceName, servers);\n    }\n    logger.info(\"Registered service: \" + serviceName + \" at \" + ip + \":\" + port);\n    return true;\n}", "CodeBleu_score": 51.9571801058083}]}
{"instance_id": "45f91ed1c560", "generation_result": [{"code": "public boolean deregister(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t    String key = serviceName + \":\" + ip + \":\" + port;\n    log.info(\"deregister server: \" + key);\n    Set<Server> servers = serverMap.get(serviceName);\n    if (servers != null) {\n        for (Server server : servers) {\n            if (server.getKey().equals(key)) {\n                servers.remove(server);\n                log.info(\"deregister server: \" + key);\n                return true;\n            }\n        }\n    }\n    return false;\n}", "CodeBleu_score": 44.82002686875746}, {"code": "public boolean deregister(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t    logger.info(\"deregister: \" + JSON.toJSONString(new Object[]{serviceName, ip, port}));\n    String key = serviceName + \":\" + ip + \":\" + port;\n    if (serverMap.containsKey(key)) {\n        serverMap.remove(key);\n        logger.info(\"deregister success: \" + JSON.toJSONString(new Object[]{serviceName, ip, port}));\n        return true;\n    } else {\n        logger.info(\"deregister failed: \" + JSON.toJSONString(new Object[]{serviceName, ip, port}));\n        return false;\n    }\n}", "CodeBleu_score": 43.48507261242196}, {"code": "public boolean deregister(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t\n    Set<Server> serverSet = serverMap.get(serviceName);\n    if (serverSet == null) {\n        logger.info(\"deregister failed, serviceName: \" + serviceName + \" not found\");\n        return false;\n    }\n\n    for (Server server : serverSet) {\n        if (server.getIp().equals(ip) && server.getPort() == port) {\n            logger.info(\"deregister server: \" + JSON.toJSONString(server));\n            serverSet.remove(server);\n            return true;\n        }\n    }\n\n    logger.info(\"deregister failed, server not found\");\n    return false;\n}", "CodeBleu_score": 43.188381182156135}]}
{"instance_id": "f671d9564e40", "generation_result": [{"code": "public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry){\n\t\n    Map<String, Object> attributes = metadata.getAnnotationAttributes(RibbonClients.class.getName());\n    if (attributes != null && attributes.containsKey(\"defaultConfiguration\")) {\n        String defaultConfiguration = (String) attributes.get(\"defaultConfiguration\");\n        BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(ClientConfiguration.class);\n        builder.addConstructorArgValue(defaultConfiguration);\n        registry.registerBeanDefinition(defaultConfiguration, builder.getBeanDefinition());\n    }\n\n}", "CodeBleu_score": 48.80985350701575}, {"code": "public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry){\n\t    Map<String, Object> attributes = metadata.getAnnotationAttributes(RibbonClients.class.getName());\n    if (attributes != null && attributes.containsKey(\"defaultConfiguration\")) {\n        String defaultConfiguration = (String) attributes.get(\"defaultConfiguration\");\n        String[] clients = (String[]) attributes.get(\"value\");\n        if (clients.length == 0) {\n            clients = (String[]) attributes.get(\"clients\");\n        }\n        registerConfiguration(defaultConfiguration, registry);\n        for (String client : clients) {\n            registerClient(client, registry);\n        }\n    }\n}", "CodeBleu_score": 47.61618373116321}, {"code": "public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry){\n\t    Map<String, Object> attributes = metadata.getAnnotationAttributes(RibbonClients.class.getName());\n    if (attributes == null) {\n        return;\n    }\n\n    String defaultConfiguration = (String) attributes.get(\"defaultConfiguration\");\n    if (defaultConfiguration != null) {\n        BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(ClientConfiguration.class);\n        builder.addPropertyValue(\"default\", true);\n        builder.addPropertyValue(\"name\", defaultConfiguration);\n        registry.registerBeanDefinition(defaultConfiguration, builder.getBeanDefinition());\n    }\n}", "CodeBleu_score": 44.93531527686891}]}
{"instance_id": "dbc92d8f146f", "generation_result": [{"code": "public <T> ServiceInstance choose(String serviceId, Request<T> request) {\n\t    String context = request.getContext();\n    if (StrUtil.isBlank(context)) {\n        context = \"/\";\n    }\n    ILoadBalancer loadBalancer = loadBalancerClient.getLoadBalancer(serviceId);\n    if (loadBalancer == null) {\n        return null;\n    }\n    Server server = loadBalancer.chooseServer(request);\n    if (server == null) {\n        return null;\n    }\n    try {\n        return new TutuServiceInstance(serviceId, server.getHost(), server.getPort(), context);\n    } catch (URISyntaxException e) {\n        throw new IOException(\"Error creating URI\", e);\n    }\n}", "CodeBleu_score": 50.121016749115284}, {"code": "public <T> ServiceInstance choose(String serviceId, Request<T> request) {\n\t\n    // \u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\n    ServiceInstance serviceInstance = loadBalancerClient.choose(serviceId);\n\n    // \u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u7684\u8be6\u7ec6\u4fe1\u606f\n    URI uri = serviceInstance.getUri();\n\n    // \u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u7684\u8be6\u7ec6\u4fe1\u606f\n    String host = uri.getHost();\n\n    // \u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u7684\u8be6\u7ec6\u4fe1\u606f\n    int port = uri.getPort();\n\n    // \u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u7684\u8be6\u7ec6\u4fe1\u606f\n    String scheme = uri.getScheme();\n\n    // \u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u7684\u8be6\u7ec6\u4fe1\u606f\n    String contextPath = uri.getPath();\n\n    // \u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u7684\u8be6\u7ec6\u4fe1\u606f\n    String contextPath2 = uri.getPath();\n\n    // \u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u7684\u8be6\u7ec6\u4fe1\u606f\n    String contextPath3 = uri.getPath();\n\n    // \u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u7684\u8be6\u7ec6\u4fe1\u606f\n    String contextPath4 = uri.getPath();\n\n    // \u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u7684\u8be6\u7ec6\u4fe1\u606f\n    String contextPath5 = uri.getPath();\n\n    // \u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u7684\u8be6\u7ec6\u4fe1\u606f\n    String contextPath6 = uri.getPath();\n\n    // \u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u7684\u8be6\u7ec6\u4fe1\u606f\n    String contextPath7 = uri.getPath();\n\n    // \u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u7684\u8be6\u7ec6\u4fe1\u606f\n    String contextPath8 = uri.getPath();\n\n    // \u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u7684\u8be6\u7ec6\u4fe1\u606f\n    String contextPath9 = uri.getPath();\n\n    // \u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u7684\u8be6\u7ec6\u4fe1\u606f\n    String contextPath10 = uri.getPath();\n\n    // \u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u7684\u8be6\u7ec6\u4fe1\u606f\n    String contextPath11 = uri.getPath();\n\n    // \u83b7\u53d6\u670d\u52a1\u5b9e", "CodeBleu_score": 28.293295533670836}, {"code": "public <T> ServiceInstance choose(String serviceId, Request<T> request) {\n\t\n    LoadBalancerClient loadBalancerClient = (LoadBalancerClient) request.getContext().get(LoadBalancerClient.class.getName());\n    ILoadBalancer loadBalancer = loadBalancerClient.getLoadBalancer(serviceId);\n    Server server = loadBalancer.chooseServer();\n    if (server == null) {\n        return null;\n    }\n\n    String host = server.getHost();\n    int port = server.getPort();\n    String scheme = server.isSecure() ? \"https\" : \"http\";\n    String contextPath = server.getMetaInfo().get(\"contextPath\");\n    String path = request.getContext().get(Request.PATH_KEY);\n    String uri = StrUtil.format(\"{}://{}:{}{}{}\", scheme, host, port, contextPath, path);\n    URI uriObj = null;\n    try {\n        uriObj = new URI(uri);\n    } catch (URISyntaxException e) {\n        e.printStackTrace();\n    }\n\n    return new TutuServiceInstance(serviceId, host, port, uriObj.getPath(), uri);\n}", "CodeBleu_score": 44.857129436741836}]}
{"instance_id": "362eadbd3c5e", "generation_result": [{"code": "public URI reconstructURI(ServiceInstance server, URI original) {\n\t    try {\n        if (server instanceof TutuServiceInstance) {\n            TutuServiceInstance tutuServiceInstance = (TutuServiceInstance) server;\n            return new URI(original.getScheme(), null, tutuServiceInstance.getHost(), tutuServiceInstance.getPort(), original.getPath(), original.getQuery(), original.getFragment());\n        }\n        return new URI(original.getScheme(), null, server.getHost(), server.getPort(), original.getPath(), original.getQuery(), original.getFragment());\n    } catch (URISyntaxException e) {\n        throw new RuntimeException(e);\n    }\n}", "CodeBleu_score": 44.198986750004245}, {"code": "public URI reconstructURI(ServiceInstance server, URI original) {\n\t    String scheme = original.getScheme();\n    String host = server.getHost();\n    int port = server.getPort();\n    String path = original.getPath();\n    String query = original.getQuery();\n    String fragment = original.getFragment();\n    try {\n        return new URI(scheme, null, host, port, path, query, fragment);\n    } catch (URISyntaxException e) {\n        throw new RuntimeException(e);\n    }\n}", "CodeBleu_score": 38.58967438388371}, {"code": "public URI reconstructURI(ServiceInstance server, URI original) {\n\t    String scheme = original.getScheme();\n    String host = server.getHost();\n    int port = server.getPort();\n    String path = original.getPath();\n    String query = original.getQuery();\n    String fragment = original.getFragment();\n    try {\n        return new URI(scheme, null, host, port, path, query, fragment);\n    } catch (URISyntaxException e) {\n        throw new RuntimeException(e);\n    }\n}", "CodeBleu_score": 38.58967438388371}]}
{"instance_id": "6801d2b2e4c8", "generation_result": [{"code": "private List<TutuServer> getServer(){\n\t    logger.info(\"Getting server list from \" + tutuDiscoveryProperties.getServiceUrl());\n    String result = HttpUtil.get(tutuDiscoveryProperties.getServiceUrl() + \"/list\");\n    logger.info(\"Result: \" + result);\n    List<TutuServer> serverList = JSON.parseArray(result, TutuServer.class);\n    return serverList;\n}", "CodeBleu_score": 25.03609082328667}, {"code": "private List<TutuServer> getServer(){\n\t    List<TutuServer> servers = null;\n    String serverList = tutuDiscoveryProperties.getServerList();\n    if (serverList != null) {\n        String url = serverList;\n        String serviceName = tutuDiscoveryProperties.getServiceName();\n        if (serviceName != null) {\n            url += \"/list?serviceName=\" + serviceName;\n        }\n        String response = HttpUtil.get(url);\n        if (response != null) {\n            JSONObject jsonObject = JSON.parseObject(response);\n            List<JSONObject> serverListJson = jsonObject.getJSONArray(\"serverList\").toJavaList(JSONObject.class);\n            servers = serverListJson.stream().map(json -> {\n                String ip = json.getString(\"ip\");\n                int port = json.getInteger(\"port\");\n                return new TutuServer(ip, port);\n            }).collect(Collectors.toList());\n        }\n    }\n    if (servers == null) {\n        servers = new ArrayList<>();\n    }\n    return servers;\n}", "CodeBleu_score": 42.034782422759385}, {"code": "private List<TutuServer> getServer(){\n\t    String serviceName = tutuDiscoveryProperties.getServiceName();\n    String serviceAddress = tutuDiscoveryProperties.getServiceAddress();\n    String servicePort = tutuDiscoveryProperties.getServicePort();\n    String url = \"http://\" + serviceAddress + \":\" + servicePort + \"/list\";\n    Map<String, String> param = new HashMap<>();\n    param.put(\"serviceName\", serviceName);\n    String response = HttpUtil.get(url, param);\n    JSONObject jsonObject = JSON.parseObject(response);\n    JSONArray jsonArray = jsonObject.getJSONArray(\"service\");\n    List<TutuServer> serverList = jsonArray.stream().map(o -> JSON.parseObject((String) o, TutuServer.class)).collect(Collectors.toList());\n    return serverList;\n}", "CodeBleu_score": 44.83397574214655}]}
{"instance_id": "ab2fb77484fd", "generation_result": [{"code": "public Route getMatchingRoute(String path){\n\t    for (Map.Entry<String, ZuulRoute> entry : routes.entrySet()) {\n        String pattern = entry.getKey();\n        ZuulRoute route = entry.getValue();\n        if (pathMatcher.match(pattern, path)) {\n            String target = pathMatcher.extractPathWithinPattern(pattern, path);\n            return new Route(target, route.getId());\n        }\n    }\n    return null;\n}", "CodeBleu_score": 47.838943643213895}, {"code": "public Route getMatchingRoute(String path){\n\t    for (Map.Entry<String, ZuulRoute> entry : routes.entrySet()) {\n        if (pathMatcher.match(entry.getKey(), path)) {\n            String target = pathMatcher.extractPathWithinPattern(entry.getKey(), path);\n            if (target == null) {\n                target = \"/\";\n            }\n            return new Route(entry.getValue().getId(), target);\n        }\n    }\n    return null;\n}", "CodeBleu_score": 37.721738584356935}, {"code": "public Route getMatchingRoute(String path){\n\t\n    for (Map.Entry<String, String> entry : routes.entrySet()) {\n        String pattern = entry.getKey();\n        String serviceId = entry.getValue();\n        if (pathMatcher.match(pattern, path)) {\n            String extractedPath = pathMatcher.extractPathWithinPattern(pattern, path);\n            return new Route(extractedPath, serviceId);\n        }\n    }\n    return null;\n}", "CodeBleu_score": 43.790549797345754}]}
{"instance_id": "822071925513", "generation_result": [{"code": "public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry){\n\t    Set<String> clientClasses = ClassUtil.scanPackageByAnnotation(importingClassMetadata.getClassName(), FeignClient.class);\n    for (String clientClass : clientClasses) {\n        if (ClassUtils.isPresent(clientClass, null)) {\n            GenericBeanDefinition beanDefinition = new GenericBeanDefinition();\n            beanDefinition.setBeanClass(FeignClientFactoryBean.class);\n            beanDefinition.getPropertyValues().add(\"type\", ClassUtil.forName(clientClass));\n            beanDefinition.getPropertyValues().add(\"contextId\", ClassUtil.getSimpleClassName(clientClass));\n            beanDefinition.setAutowireMode(GenericBeanDefinition.AUTOWIRE_BY_TYPE);\n            beanDefinition.setLazyInit(false);\n            registry.registerBeanDefinition(ClassUtil.getSimpleClassName(clientClass), beanDefinition);\n        }\n    }\n}", "CodeBleu_score": 40.46752861362721}, {"code": "public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry){\n\t    String className = importingClassMetadata.getClassName();\n    Class<?> targetClass = ClassUtils.resolveClassName(className, null);\n    Set<String> clients = ClassUtil.getClassNamesByAnnotation(targetClass, FeignClient.class);\n    for (String client : clients) {\n        GenericBeanDefinition beanDefinition = new GenericBeanDefinition();\n        beanDefinition.setBeanClass(FeignClientFactoryBean.class);\n        beanDefinition.getPropertyValues().addPropertyValue(\"contextId\", client);\n        beanDefinition.getPropertyValues().addPropertyValue(\"type\", Class.forName(client));\n        beanDefinition.setAutowireMode(GenericBeanDefinition.AUTOWIRE_BY_TYPE);\n        beanDefinition.setLazyInit(false);\n        registry.registerBeanDefinition(client, beanDefinition);\n    }\n}", "CodeBleu_score": 51.309451325068835}, {"code": "public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry){\n\t    Class<?>[] classes = ClassUtils.getDefaultClassLoader().getDefinedClasses(ClassUtil.getPackageName(importingClassMetadata.getClassName()));\n    Set<String> clientClassNames = ClassUtil.getClassNamesByAnnotation(classes, FeignClient.class);\n    for (String clientClassName : clientClassNames) {\n        GenericBeanDefinition beanDefinition = new GenericBeanDefinition();\n        beanDefinition.setBeanClass(FeignClientFactoryBean.class);\n        beanDefinition.getPropertyValues().add(\"type\", ClassUtil.loadClass(clientClassName));\n        beanDefinition.getPropertyValues().add(\"contextId\", clientClassName);\n        beanDefinition.setAutowireMode(GenericBeanDefinition.AUTOWIRE_BY_TYPE);\n        beanDefinition.setLazyInit(false);\n        registry.registerBeanDefinition(clientClassName, beanDefinition);\n    }\n}", "CodeBleu_score": 53.306219689112666}]}
{"instance_id": "3d678e3bf3c8", "generation_result": [{"code": "public TutuDiscoveryClient tutuDiscoveryClient(TutuDiscoveryProperties tutuDiscoveryProperties){\n\t    return new TutuDiscoveryClient(tutuDiscoveryProperties);\n}", "CodeBleu_score": 74.10612186004828}, {"code": "public TutuDiscoveryClient tutuDiscoveryClient(TutuDiscoveryProperties tutuDiscoveryProperties){\n\t    return new TutuDiscoveryClient(tutuDiscoveryProperties);\n}", "CodeBleu_score": 74.10612186004828}, {"code": "public TutuDiscoveryClient tutuDiscoveryClient(TutuDiscoveryProperties tutuDiscoveryProperties){\n\t    return new TutuDiscoveryClient(tutuDiscoveryProperties);\n}", "CodeBleu_score": 74.10612186004828}]}
