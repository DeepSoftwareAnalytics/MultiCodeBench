{"instance_id": "ba8707e206f9", "generation_result": [{"code": "def _kazoo_connect(self, *args: Any) -> Tuple[Union[int, float], Union[int, float]]\n\t\n    self.loop_wait = max(2, self.loop_wait - 2)\n    return super()._kazoo_connect(*args)\n\n", "CodeBleu_score": 47.95444342889002}, {"code": "def _kazoo_connect(self, *args: Any) -> Tuple[Union[int, float], Union[int, float]]\n\t\n    wait_time = self.loop_wait - 2\n    return wait_time, self.original_connect(*args)\n\n", "CodeBleu_score": 44.86009040528493}, {"code": "def _kazoo_connect(self, *args: Any) -> Tuple[Union[int, float], Union[int, float]]\n\t\n    self.loop_wait = max(2, self.loop_wait - 2)\n    return super()._kazoo_connect(*args)\n\n", "CodeBleu_score": 47.95444342889002}]}
{"instance_id": "88e24a7c26a4", "generation_result": [{"code": "def reload_config(self, config: Union['Config', Dict[str, Any]]) -> None\n\t\n    if not isinstance(config, Config):\n        config = Config(config)\n\n    self.retry_timeout = config.retry_timeout\n    self.loop_wait = config.loop_wait\n    self.ttl = config.ttl\n\n    if isinstance(self.handler, PatroniSequentialThreadingHandler):\n        self.handler.connect_timeout = config.loop_wait\n\n", "CodeBleu_score": 36.82026974276321}, {"code": "def reload_config(self, config: Union['Config', Dict[str, Any]]) -> None\n\t\n    if isinstance(config, Config):\n        self.retry_timeout = config.retry_timeout\n        self.loop_wait_time = config.loop_wait_time\n        self.ttl = config.ttl\n    else:\n        self.retry_timeout = config['retry_timeout']\n        self.loop_wait_time = config['loop_wait_time']\n        self.ttl = config['ttl']\n    if isinstance(self.handler, PatroniSequentialThreadingHandler) and self.loop_wait_time!= self.handler.wait_time:\n        self.handler.wait_time = self.loop_wait_time\n        self.handler.close_socket()\n    self.logger.info(f'Reloaded config: retry_timeout={self.retry_timeout}, loop_wait_time={self.loop_wait_time}, ttl={self.ttl}')\n\n", "CodeBleu_score": 36.875428029087885}, {"code": "def reload_config(self, config: Union['Config', Dict[str, Any]]) -> None\n\t\n    if isinstance(config, dict):\n        config = Config(config)\n    self.retry_timeout = config.retry_timeout\n    self.loop_wait = config.loop_wait\n    self.ttl = config.ttl\n    if isinstance(self.handler, PatroniSequentialThreadingHandler):\n        self.handler.connect_timeout = config.connect_timeout\n        if self.loop_wait!= self.handler.loop_wait:\n            self.handler.close()\n            self.handler = PatroniSequentialThreadingHandler(self.client, self.loop_wait)\n\n", "CodeBleu_score": 39.61439751353007}]}
{"instance_id": "2af7d7b3c887", "generation_result": [{"code": "def _postgresql_cluster_loader(self, path: str) -> Cluster\n\t\n    # Load initialization state\n    init_state_path = path + \"/init_state\"\n    init_state = self._load_init_state(init_state_path)\n\n    # Load configuration\n    config_path = path + \"/config\"\n    config = self._load_config(config_path)\n\n    # Load timeline history\n    timeline_history_path = path + \"/timeline_history\"\n    timeline_history = self._load_timeline_history(timeline_history_path)\n\n    # Load synchronization state\n    sync_state_path = path + \"/sync_state\"\n    sync_state = self._load_sync_state(sync_state_path)\n\n    # Load members\n    members_path = path + \"/members\"\n    members = self._load_members(members_path)\n\n    # Load leader information\n    leader_path = path + \"/leader\"\n    leader = self._load_leader(leader_path)\n\n    # Load cluster status\n    status_path = path + \"/status\"\n    status = self._load_status(status_path)\n\n    # Load failover state\n    failover_path = path + \"/failover\"\n    failover = self._load_failover(failover_path)\n\n    # Load failsafe configuration\n    failsafe_path = path + \"/failsafe\"\n    failsafe = self._load_failsafe(failsafe_path)\n\n    # Create cluster object\n    cluster = Cluster(init_state, config, timeline_history, sync_state, members, leader, status, failover, failsafe)\n    return cluster\n\n", "CodeBleu_score": 10.339119437882843}, {"code": "def _postgresql_cluster_loader(self, path: str) -> Cluster\n\t\n    if not self._check_path(path):\n        raise ValueError(f\"Invalid path: {path}\")\n\n    cluster_state = self._get_cluster_state(path)\n    if cluster_state is None:\n        raise ValueError(f\"Invalid cluster state: {cluster_state}\")\n\n    cluster_config = self._get_cluster_config(path)\n    if cluster_config is None:\n        raise ValueError(f\"Invalid cluster configuration: {cluster_config}\")\n\n    cluster_timeline = self._get_cluster_timeline(path)\n    if cluster_timeline is None:\n        raise ValueError(f\"Invalid cluster timeline: {cluster_timeline}\")\n\n    cluster_sync = self._get_cluster_sync(path)\n    if cluster_sync is None:\n        raise ValueError(f\"Invalid cluster synchronization: {cluster_sync}\")\n\n    cluster_members = self._get_cluster_members(path)\n    if cluster_members is None:\n        raise ValueError(f\"Invalid cluster members: {cluster_members}\")\n\n    cluster_leader = self._get_cluster_leader(path)\n    if cluster_leader is None:\n        raise ValueError(f\"Invalid cluster leader: {cluster_leader}\")\n\n    cluster_status = self._get_cluster_status(path)\n    if cluster_status is None:\n        raise ValueError(f\"Invalid cluster status: {cluster_status}\")\n\n    cluster_failover = self._get_cluster_failover(path)\n    if cluster_failover is None:\n        raise ValueError(f\"Invalid cluster failover: {cluster_failover}\")\n\n    cluster_failsafe = self._get_cluster_failsafe(path)\n    if cluster_failsafe is None:\n        raise ValueError(f\"Invalid cluster failsafe: {cluster_failsafe}\")\n\n    return Cluster(\n        cluster_state,\n        cluster_config,\n        cluster_timeline,\n        cluster_sync,\n        cluster_members,\n        cluster_leader,\n        cluster_status,\n        cluster_failover,\n        cluster_failsafe,\n    )\n\n", "CodeBleu_score": 18.744306962930054}, {"code": "def _postgresql_cluster_loader(self, path: str) -> Cluster\n\t\n    cluster = Cluster()\n    cluster.path = path\n    cluster.initialize_state = self._get_initialize_state(path)\n    cluster.configuration = self._get_configuration(path)\n    cluster.timeline_history = self._get_timeline_history(path)\n    cluster.synchronization_state = self._get_synchronization_state(path)\n    cluster.members = self._get_members(path)\n    cluster.leader = self._get_leader(path)\n    cluster.status = self._get_status(path)\n    cluster.failover_state = self._get_failover_state(path)\n    cluster.failsafe_configuration = self._get_failsafe_configuration(path)\n    return cluster\n\n", "CodeBleu_score": 9.048754779927961}]}
{"instance_id": "43e1bc044d8e", "generation_result": [{"code": "def attempt_to_acquire_leader(self) -> bool\n\t\n    try:\n        self.zk.create(self.leader_path, b'', make_acl(self.acl), ephemeral=True)\n        return True\n    except NodeExistsError:\n        return False\n    except Exception as e:\n        if isinstance(e, NodeExistsError):\n            logging.info(f\"Failed to acquire leader lock: {e}\")\n        else:\n            logging.error(f\"Failed to acquire leader lock: {e}\")\n        return False\n\n", "CodeBleu_score": 39.94211249013415}, {"code": "def attempt_to_acquire_leader(self) -> bool\n\t\n    try:\n        self.zk.create(self.lock_path, b\"\", ephemeral=True, sequence=True)\n        return True\n    except NodeExistsError:\n        return False\n    except Exception as e:\n        if isinstance(e, NodeExistsError):\n            logging.info(\"Lock already acquired by another instance\")\n            return False\n        else:\n            raise ZooKeeperError(e)\n\n", "CodeBleu_score": 41.42756512280491}, {"code": "def attempt_to_acquire_leader(self) -> bool\n\t\n    try:\n        self.zk.create(self.leader_path, b'', ephemeral=True)\n        return True\n    except NodeExistsError:\n        return False\n    except Exception as e:\n        if isinstance(e, NodeExistsError):\n            self.log.info(f\"Another instance has the lock: {e}\")\n            return False\n        else:\n            self.log.error(f\"Error acquiring the lock: {e}\")\n            raise e\n\n", "CodeBleu_score": 41.205867437234254}]}
{"instance_id": "93d126ab8a22", "generation_result": [{"code": "def _update_leader(self, leader: Leader) -> bool\n\t\n    if self.client_id!= leader.client_id:\n        logging.warning(f\"Client ID mismatch: {self.client_id}!= {leader.client_id}\")\n        try:\n            self.zk.delete(leader.path)\n        except (NoNodeError, ConnectionClosedError, RetryFailedError):\n            pass\n        return False\n    try:\n        self.zk.create(leader.path, leader.name.encode(\"utf-8\"), make_acl(leader.acl))\n    except (NodeExistsError, ConnectionClosedError, RetryFailedError):\n        pass\n    return True\n\n", "CodeBleu_score": 26.131236074601215}, {"code": "def _update_leader(self, leader: Leader) -> bool\n\t\n    if not self._leader_lock.acquire(blocking=False):\n        return False\n\n    if leader.session_id!= self._session_id:\n        logging.warning(f\"Session ID mismatch: leader's session ID is {leader.session_id}, but this client's session ID is {self._session_id}.\")\n        try:\n            self._zk.delete(leader.path, recursive=True)\n        except (NoNodeError, ConnectionClosedError, RetryFailedError):\n            pass\n        except Exception as e:\n            logging.warning(f\"Error deleting existing leader ZNode: {e}\")\n            return False\n\n    try:\n        self._zk.create(leader.path, leader.client_id.encode(\"utf-8\"), ephemeral=True, sequence=True)\n    except (ConnectionClosedError, RetryFailedError):\n        return False\n    except Exception as e:\n        logging.warning(f\"Error creating new leader ZNode: {e}\")\n        return False\n\n    self._leader = leader\n    self._leader_lock.release()\n    return True\n\n", "CodeBleu_score": 45.59609744412029}, {"code": "def _update_leader(self, leader: Leader) -> bool\n\t\n    if self._leader is None:\n        return False\n    if self._leader.client_id == self._client_id:\n        return False\n    try:\n        self._leader.delete()\n    except (NoNodeError, ConnectionClosedError, RetryFailedError):\n        logging.warning(\"Leader deletion failed: %s\", self._leader)\n        return False\n    try:\n        self._leader = Leader(self._zk, self._client_id)\n        self._leader.create()\n    except (ConnectionClosedError, RetryFailedError):\n        logging.warning(\"Leader creation failed: %s\", self._leader)\n        return False\n    return True\n\n", "CodeBleu_score": 33.72802637637789}]}
{"instance_id": "f68719982812", "generation_result": [{"code": "def poll(self) -> bool\n\t\n    if self._poll_interval is None:\n        return False\n\n    if self._last_poll is None or time.time() - self._last_poll >= self._poll_interval:\n        self._last_poll = time.time()\n        self._update_connection_string()\n        return True\n\n    return False\n\n", "CodeBleu_score": 14.379239323080064}, {"code": "def poll(self) -> bool\n\t\n    if self._poll_interval is None:\n        return False\n\n    if self._last_poll_time is None:\n        self._last_poll_time = time.time()\n        return False\n\n    if time.time() - self._last_poll_time < self._poll_interval:\n        return False\n\n    self._last_poll_time = time.time()\n    try:\n        response = self._http_client.get(self._poll_url)\n    except Exception as e:\n        logging.warning(\"Poll request failed: %s\", e)\n        return False\n\n    if response.status_code!= 200:\n        logging.warning(\"Poll request failed: %s\", response.text)\n        return False\n\n    try:\n        data = json.loads(response.text)\n    except Exception as e:\n        logging.warning(\"Poll request failed: %s\", e)\n        return False\n\n    if \"server\" not in data or \"port\" not in data:\n        logging.warning(\"Poll request returned invalid data: %s\", response.text)\n        return False\n\n    if data[\"server\"]!= self._zookeeper_server or data[\"port\"]!= self._zookeeper_port:\n        logging.info(\"Poll request returned new ZooKeeper server: %s:%s\", data[\"server\"], data[\"port\"])\n        self._zookeeper_server = data[\"server\"]\n        self._zookeeper_port = data[\"port\"]\n        self._zookeeper_connection_string = f\"{self._zookeeper_server}:{self._zookeeper_port}\"\n        self._zookeeper_connection_string_changed = True\n        return True\n\n    return False\n\n", "CodeBleu_score": 35.58256190347734}, {"code": "def poll(self) -> bool\n\t\n    if self._last_poll_time is None:\n        self._last_poll_time = time.time()\n        return False\n    if time.time() - self._last_poll_time < self._poll_interval:\n        return False\n    self._last_poll_time = time.time()\n    try:\n        self._logger.debug(\"Polling for new exhibitors\")\n        exhibitors = self._get_exhibitors()\n        if not exhibitors:\n            self._logger.debug(\"No exhibitors found\")\n            return False\n        if self._exhibitors!= exhibitors:\n            self._logger.debug(\"Exhibitors have changed\")\n            self._exhibitors = exhibitors\n            self._update_connection_string()\n            return True\n        return False\n    except Exception as e:\n        self._logger.exception(e)\n        return False\n\n", "CodeBleu_score": 30.858260077567333}]}
{"instance_id": "022ed3721913", "generation_result": [{"code": "def _load_cluster(\n            self, path: str, loader: Callable[[str], Union[Cluster, Dict[int, Cluster]]]\n    ) -> Union[Cluster, Dict[int, Cluster]]\n\t\n    if self.provider is None:\n        raise Exception(\"Ensemble provider is not available.\")\n    if self.provider.is_ensemble:\n        self.provider.update_hosts(self.hosts)\n    return super()._load_cluster(path, loader)\n\n", "CodeBleu_score": 58.14255512565054}, {"code": "def _load_cluster(\n            self, path: str, loader: Callable[[str], Union[Cluster, Dict[int, Cluster]]]\n    ) -> Union[Cluster, Dict[int, Cluster]]\n\t\n    if not self.ensemble_provider:\n        raise ValueError(\"Ensemble provider is not available.\")\n    if self.hosts is None:\n        self.hosts = self.ensemble_provider.get_hosts()\n    if path is None:\n        return loader(self.hosts)\n    if not os.path.exists(path):\n        raise ValueError(f\"Cluster configuration file {path} does not exist.\")\n    with open(path, \"r\") as file:\n        return loader(file.read())\n\n", "CodeBleu_score": 49.88948813237008}, {"code": "def _load_cluster(\n            self, path: str, loader: Callable[[str], Union[Cluster, Dict[int, Cluster]]]\n    ) -> Union[Cluster, Dict[int, Cluster]]\n\t\n    if self._ensemble_provider is None:\n        raise ValueError(\"Ensemble provider is not available.\")\n    if self._ensemble_provider.is_zookeeper_ensemble:\n        self._update_hosts_with_zookeeper_hosts(path)\n    return super()._load_cluster(path, loader)\n\n", "CodeBleu_score": 55.621695963124004}]}
{"instance_id": "c7d2e1db0cda", "generation_result": [{"code": "public ZookeeperListener(NodeCache nodeCache, NodeCacheListener nodeCacheListener){\n\t\tthis.nodeCache = nodeCache;\n\tthis.nodeCacheListener = nodeCacheListener;\n}", "CodeBleu_score": 78.53464624293271}, {"code": "public ZookeeperListener(NodeCache nodeCache, NodeCacheListener nodeCacheListener){\n\t\tthis.nodeCache = nodeCache;\n\tthis.nodeCacheListener = nodeCacheListener;\n}", "CodeBleu_score": 78.53464624293271}, {"code": "public ZookeeperListener(NodeCache nodeCache, NodeCacheListener nodeCacheListener){\n\t\tthis.nodeCache = nodeCache;\n\tthis.nodeCacheListener = nodeCacheListener;\n}", "CodeBleu_score": 78.53464624293271}]}
{"instance_id": "c779f567d3e2", "generation_result": [{"code": "public void destroy(){\n\t\tif (zookeeperListener == null) {\n\t\treturn;\n\t}\n\n\tString group = zookeeperListener.getGroup();\n\tString dataId = zookeeperListener.getDataId();\n\tlogger.info(\"ZookeeperListener unsubscribing from Zookeeper configuration, group: \" + group + \", dataId: \" + dataId);\n\ttry {\n\t\tZookeeperOperation.unsubscribe(zookeeperListener);\n\t} catch (Exception e) {\n\t\tlogger.error(\"ZookeeperListener unsubscribing from Zookeeper configuration failed, group: \" + group + \", dataId: \" + dataId, e);\n\t}\n}", "CodeBleu_score": 47.25720597629375}, {"code": "public void destroy(){\n\t\tif (zookeeperListener == null) {\n\t\treturn;\n\t}\n\t\n\tString group = zookeeperListener.getGroup();\n\tString dataId = zookeeperListener.getDataId();\n\t\n\tlogger.info(\"The unsubscribe process started for group: {}, dataId: {}\", group, dataId);\n\t\n\ttry {\n\t\tzookeeperListener.unsubscribe();\n\t}\n\tcatch (Exception e) {\n\t\tlogger.error(\"The unsubscribe process failed for group: {}, dataId: {}\", group, dataId, e);\n\t}\n}", "CodeBleu_score": 48.284199987849874}, {"code": "public void destroy(){\n\t\tif (zookeeperListener == null) {\n\t\treturn;\n\t}\n\n\tString group = zookeeperListener.getGroup();\n\tString dataId = zookeeperListener.getDataId();\n\n\tlogger.info(\"The unsubscribe process of group: \" + group + \", dataId: \" + dataId + \" starts.\");\n\n\ttry {\n\t\tZookeeperOperation.unsubscribe(zookeeperListener);\n\t} catch (Exception e) {\n\t\tlogger.error(\"The unsubscribe process of group: \" + group + \", dataId: \" + dataId + \" failed.\", e);\n\t}\n}", "CodeBleu_score": 48.482287546148285}]}
{"instance_id": "7f0ce4db487b", "generation_result": [{"code": "public Map<String, String> getServerMetadata(Server server){\n\t\tMap<String, String> metadata = new HashMap<String, String>();\n\tif (server instanceof ZookeeperServer) {\n\t\tZookeeperServer zookeeperServer = (ZookeeperServer) server;\n\t\tZookeeperRegistration registration = zookeeperServer.getPayload();\n\t\tmetadata.put(\"host\", registration.getHost());\n\t\tmetadata.put(\"port\", String.valueOf(registration.getPort()));\n\t\tmetadata.put(\"path\", registration.getPath());\n\t\tmetadata.put(\"serviceId\", registration.getServiceId());\n\t\tmetadata.put(\"metadata\", registration.getMetadata());\n\t\tmetadata.put(\"registrationTime\", String.valueOf(registration.getRegistrationTime()));\n\t\tmetadata.put(\"lastHeartbeatTime\", String.valueOf(registration.getLastHeartbeatTime()));\n\t\tmetadata.put(\"lastUpdatedTime\", String.valueOf(registration.getLastUpdatedTime()));\n\t\tmetadata.put(\"lastAccessedTime\", String.valueOf(registration.getLastAccessedTime()));\n\t\tmetadata.put(\"isAlive\", String.valueOf(registration.isAlive()));\n\t\tmetadata.put(\"isEurekaServer\", String.valueOf(registration.isEurekaServer()));\n\t\tmetadata.put(\"isSecure\", String.valueOf(registration.isSecure()));\n\t\tmetadata.put(\"isNonSecurePortEnabled\", String.valueOf(registration.isNonSecurePortEnabled()));\n\t\tmetadata.put(\"isNonSecurePortEnabled\", String.valueOf(registration.isNonSecurePortEnabled()));\n\t\tmetadata.put(\"isNonSecurePortEnabled\", String.valueOf(registration.isNonSecurePortEnabled()));\n\t\tmetadata.put(\"isNonSecurePortEnabled\", String.valueOf(registration.isNonSecurePortEnabled()));\n\t\tmetadata.put(\"isNonSecurePortEnabled\", String.valueOf(registration.isNonSecurePortEnabled()));\n\t\tmetadata.put(\"isNonSecurePortEnabled\", String.valueOf(registration.isNonSecurePortEnabled()));\n\t\tmetadata.put(\"isNonSecurePortEnabled\", String.valueOf(registration.isNonSecurePortEnabled()));\n\t\tmetadata.put(\"isNonSecurePortEnabled\", String.valueOf(registration.isNonSecurePortEnabled()));\n\t\tmetadata.put(\"isNonSecurePortEnabled\", String.valueOf(registration.isNonSecurePortEnabled()));\n\t\tmetadata.put(\"isNonSecurePortEnabled\", String.valueOf(registration.isNonSecurePortEnabled()));\n\t\tmetadata.put(\"isNonSecurePort", "CodeBleu_score": 45.758548154813695}, {"code": "public Map<String, String> getServerMetadata(Server server){\n\t\tMap<String, String> metadata = null;\n\n\tif (server instanceof ZookeeperServer) {\n\t\tZookeeperServer zookeeperServer = (ZookeeperServer) server;\n\t\tZookeeperRegistration registration = (ZookeeperRegistration) zookeeperServer.getPayload();\n\n\t\tmetadata = registration.getMetadata();\n\t} else {\n\t\tmetadata = Collections.emptyMap();\n\t}\n\n\treturn metadata;\n}", "CodeBleu_score": 53.65028274509106}, {"code": "public Map<String, String> getServerMetadata(Server server){\n\t\tif (server instanceof ZookeeperServer) {\n\t\tZookeeperServer zookeeperServer = (ZookeeperServer) server;\n\t\treturn zookeeperServer.getMetadata();\n\t} else {\n\t\treturn new HashMap<String, String>();\n\t}\n}", "CodeBleu_score": 60.08441755694002}]}
{"instance_id": "7365d194b7ee", "generation_result": [{"code": "public ZookeeperListener subscribeConfig(String group, String serviceId, ZookeeperSubscribeCallback zookeeperSubscribeCallback) throws Exception{\n\t\tif (group == null || group.length() == 0) {\n\t\tthrow new IllegalArgumentException(\"group is null or empty\");\n\t}\n\tif (serviceId == null || serviceId.length() == 0) {\n\t\tthrow new IllegalArgumentException(\"serviceId is null or empty\");\n\t}\n\tif (zookeeperSubscribeCallback == null) {\n\t\tthrow new IllegalArgumentException(\"zookeeperSubscribeCallback is null\");\n\t}\n\tZookeeperListener zookeeperListener = new ZookeeperListener(group, serviceId, zookeeperSubscribeCallback);\n\tString path = \"/config/\" + group + \"/\" + serviceId;\n\tNodeCache nodeCache = new NodeCache(zookeeperListener.curatorFramework, path);\n\tnodeCache.start(true);\n\tnodeCache.getListenable().addListener(new NodeCacheListener() {\n\t\t@Override\n\t\tpublic void nodeChanged() throws Exception {\n\t\t\tChildData childData = nodeCache.getCurrentData();\n\t\t\tif (childData!= null) {\n\t\t\t\tbyte[] data = childData.getData();\n\t\t\t\tif (data!= null) {\n\t\t\t\t\tzookeeperListener.config = new String(data, \"UTF-8\");\n\t\t\t\t\tzookeeperListener.zookeeperSubscribeCallback.onConfigChanged(zookeeperListener.config);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\tzookeeperListener.nodeCache = nodeCache;\n\tzookeeperListener.zookeeperSubscribeCallback = zookeeperSubscribeCallback;\n\tzookeeperListener.curatorFramework.getZookeeperClient().getZooKeeper().exists(path, false);\n\tzookeeperListener.curatorFramework.getZookeeperClient().getZooKeeper().getData(path, false, null);\n\treturn zookeeperListener;\n}", "CodeBleu_score": 44.80660466599464}, {"code": "public ZookeeperListener subscribeConfig(String group, String serviceId, ZookeeperSubscribeCallback zookeeperSubscribeCallback) throws Exception{\n\t\tZookeeperListener zookeeperListener = new ZookeeperListener(group, serviceId, zookeeperSubscribeCallback);\n\tzookeeperListener.start();\n\treturn zookeeperListener;\n}", "CodeBleu_score": 16.113900859350032}, {"code": "public ZookeeperListener subscribeConfig(String group, String serviceId, ZookeeperSubscribeCallback zookeeperSubscribeCallback) throws Exception{\n\t\tString path = String.format(\"/%s/%s\", group, serviceId);\n\tCuratorFramework curatorFramework = this.curatorFramework;\n\tZookeeperListener zookeeperListener = new ZookeeperListener();\n\tNodeCache nodeCache = new NodeCache(curatorFramework, path);\n\tnodeCache.start();\n\tzookeeperListener.setNodeCache(nodeCache);\n\tzookeeperListener.setNodeCacheListener(new NodeCacheListener() {\n\t\t@Override\n\t\tpublic void nodeChanged() throws Exception {\n\t\t\tChildData childData = nodeCache.getCurrentData();\n\t\t\tif (childData!= null) {\n\t\t\t\tString data = new String(childData.getData(), \"UTF-8\");\n\t\t\t\tzookeeperSubscribeCallback.onConfigChange(data);\n\t\t\t}\n\t\t}\n\t});\n\tzookeeperListener.setCuratorFramework(curatorFramework);\n\tzookeeperListener.setPath(path);\n\tzookeeperListener.setGroup(group);\n\tzookeeperListener.setServiceId(serviceId);\n\tzookeeperListener.setZookeeperSubscribeCallback(zookeeperSubscribeCallback);\n\tzookeeperListener.setZkPath(path);\n\treturn zookeeperListener;\n}", "CodeBleu_score": 54.912355056732274}]}
{"instance_id": "6f492670162b", "generation_result": [{"code": "public ServerList<?> ribbonServerList(IClientConfig config, ServiceDiscovery<ZookeeperInstance> serviceDiscovery){\n\t\treturn new ZookeeperServerListDecorator(config, serviceDiscovery);\n}", "CodeBleu_score": 16.854728783987206}, {"code": "public ServerList<?> ribbonServerList(IClientConfig config, ServiceDiscovery<ZookeeperInstance> serviceDiscovery){\n\t\treturn new ZookeeperServerListDecorator(config, serviceDiscovery);\n}", "CodeBleu_score": 16.854728783987206}, {"code": "public ServerList<?> ribbonServerList(IClientConfig config, ServiceDiscovery<ZookeeperInstance> serviceDiscovery){\n\t\treturn new ZookeeperServerListDecorator(config, serviceDiscovery);\n}", "CodeBleu_score": 16.854728783987206}]}
{"instance_id": "17c01a5f8ef8", "generation_result": [{"code": "public void register(ZookeeperRegistration registration){\n\t\ttry {\n\t\tRegisterListenerExecutor registerListenerExecutor = this.applicationContext.getBean(RegisterListenerExecutor.class);\n\t\tregisterListenerExecutor.onRegister(registration);\n\t}\n\tcatch (BeansException e) {\n\t\t// ignore\n\t}\n\tthis.serviceRegistry.register(registration);\n}", "CodeBleu_score": 72.914273900064}, {"code": "public void register(ZookeeperRegistration registration){\n\t\tif (registration == null) {\n\t\treturn;\n\t}\n\n\tRegisterListenerExecutor registerListenerExecutor = null;\n\ttry {\n\t\tregisterListenerExecutor = (RegisterListenerExecutor) this.applicationContext.getBean(RegisterListenerExecutor.class);\n\t}\n\tcatch (BeansException e) {\n\t\t// Ignore\n\t}\n\n\tif (registerListenerExecutor!= null) {\n\t\ttry {\n\t\t\tregisterListenerExecutor.onRegister(registration);\n\t\t}\n\t\tcatch (BeansException e) {\n\t\t\t// Ignore\n\t\t}\n\t}\n\n\tthis.serviceRegistry.register(registration);\n}", "CodeBleu_score": 59.69180898056364}, {"code": "public void register(ZookeeperRegistration registration){\n\t\ttry {\n\t\tif (this.registerListenerExecutor!= null) {\n\t\t\tthis.registerListenerExecutor.onRegister(registration);\n\t\t}\n\t}\n\tcatch (BeansException ex) {\n\t\t// ignore\n\t}\n\tthis.serviceRegistry.register(registration);\n}", "CodeBleu_score": 30.76674883317655}]}
{"instance_id": "99392dfa2335", "generation_result": [{"code": "public void deregister(ZookeeperRegistration registration){\n\t\ttry {\n\t\tRegisterListenerExecutor registerListenerExecutor = (RegisterListenerExecutor) applicationContext.getBean(RegisterListenerExecutor.class);\n\t\tregisterListenerExecutor.onDeregister(registration);\n\t}\n\tcatch (BeansException e) {\n\t\t// ignore\n\t}\n\n\tserviceRegistry.remove(registration);\n}", "CodeBleu_score": 73.70287928035236}, {"code": "public void deregister(ZookeeperRegistration registration){\n\t\ttry {\n\t\tRegisterListenerExecutor registerListenerExecutor = (RegisterListenerExecutor) context.getBean(\"registerListenerExecutor\");\n\t\tregisterListenerExecutor.onDeregister(registration);\n\t}\n\tcatch (BeansException e) {\n\t\t// ignore\n\t}\n\n\tserviceRegistry.deregister(registration);\n}", "CodeBleu_score": 75.65257834453398}, {"code": "public void deregister(ZookeeperRegistration registration){\n\t\ttry {\n\t\tRegisterListenerExecutor registerListenerExecutor = (RegisterListenerExecutor) applicationContext.getBean(\"registerListenerExecutor\");\n\t\tregisterListenerExecutor.onDeregister(registration);\n\t}\n\tcatch (BeansException e) {\n\t\t// ignore\n\t}\n\n\tserviceRegistry.remove(registration);\n}", "CodeBleu_score": 73.09445407786255}]}
{"instance_id": "02a835946e90", "generation_result": [{"code": "public void close(){\n\t\tConfigurableApplicationContext context = getApplicationContext();\n\tif (context!= null) {\n\t\ttry {\n\t\t\tRegisterListenerExecutor registerListenerExecutor = context.getBean(RegisterListenerExecutor.class);\n\t\t\tif (registerListenerExecutor!= null) {\n\t\t\t\tregisterListenerExecutor.onClose();\n\t\t\t}\n\t\t}\n\t\tcatch (BeansException ex) {\n\t\t\t// ignore\n\t\t}\n\t}\n\n\tZookeeperServiceRegistry serviceRegistry = getServiceRegistry();\n\tif (serviceRegistry!= null) {\n\t\tserviceRegistry.close();\n\t}\n}", "CodeBleu_score": 60.314509727097}, {"code": "public void close(){\n\t\tConfigurableApplicationContext applicationContext = this.applicationContext;\n\tif (applicationContext!= null) {\n\t\ttry {\n\t\t\tRegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n\t\t\tif (registerListenerExecutor!= null) {\n\t\t\t\tregisterListenerExecutor.onClose();\n\t\t\t}\n\t\t}\n\t\tcatch (BeansException ex) {\n\t\t}\n\t}\n\n\tZookeeperServiceRegistry serviceRegistry = this.serviceRegistry;\n\tif (serviceRegistry!= null) {\n\t\tserviceRegistry.close();\n\t}\n}", "CodeBleu_score": 61.649553568091186}, {"code": "public void close(){\n\t\ttry {\n\t\tRegisterListenerExecutor registerListenerExecutor = context.getBean(RegisterListenerExecutor.class);\n\t\tregisterListenerExecutor.onClose();\n\t}\n\tcatch (BeansException e) {\n\t\t// Ignore\n\t}\n\n\tif (serviceRegistry!= null) {\n\t\tserviceRegistry.close();\n\t}\n}", "CodeBleu_score": 83.89294971305337}]}
{"instance_id": "64cf817f5945", "generation_result": [{"code": "private ZookeeperListener subscribeConfig(boolean globalConfig){\n\t\tString group = null;\n\tString dataId = null;\n\tif (globalConfig) {\n\t\tgroup = this.globalConfig.getGroup();\n\t\tdataId = this.globalConfig.getDataId();\n\t} else {\n\t\tgroup = this.config.getGroup();\n\t\tdataId = this.config.getDataId();\n\t}\n\n\tlog.info(\"subscribeConfig, group: {}, dataId: {}\", group, dataId);\n\n\tZookeeperListener listener = null;\n\ttry {\n\t\tlistener = this.zookeeperOperation.subscribeConfig(group, dataId, new ZookeeperSubscribeCallback(this.configAdapter, this.config));\n\t} catch (Exception e) {\n\t\tlog.error(\"subscribeConfig failed, group: {}, dataId: {}\", group, dataId, e);\n\t}\n\n\treturn listener;\n}", "CodeBleu_score": 33.55569722757228}, {"code": "private ZookeeperListener subscribeConfig(boolean globalConfig){\n\t\tString group = null;\n\tString dataId = null;\n\tif (globalConfig) {\n\t\tgroup = this.globalConfig.getGroup();\n\t\tdataId = this.globalConfig.getDataId();\n\t} else {\n\t\tgroup = this.localConfig.getGroup();\n\t\tdataId = this.localConfig.getDataId();\n\t}\n\tif (StringUtils.isEmpty(group) || StringUtils.isEmpty(dataId)) {\n\t\treturn null;\n\t}\n\tlog.info(\"Subscribe config, group: \" + group + \", dataId: \" + dataId);\n\ttry {\n\t\treturn this.zookeeperOperation.subscribe(group, dataId, new ZookeeperSubscribeCallback() {\n\t\t\tpublic void process(String value) {\n\t\t\t\tif (StringUtils.isEmpty(value)) {\n\t\t\t\t\tlog.warn(\"Receive empty config, group: \" + group + \", dataId: \" + dataId);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tConfigAdapter configAdapter = ConfigAdapter.getInstance();\n\t\t\t\t\tif (configAdapter!= null) {\n\t\t\t\t\t\tconfigAdapter.updateConfig(group, dataId, value);\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tlog.error(\"Update config failed, group: \" + group + \", dataId: \" + dataId, e);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t} catch (Exception e) {\n\t\tlog.error(\"Subscribe config failed, group: \" + group + \", dataId: \" + dataId, e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 36.44286218438992}, {"code": "private ZookeeperListener subscribeConfig(boolean globalConfig){\n\t\ttry {\n\t\tif (globalConfig) {\n\t\t\tString group = configCenterConfig.getGroup();\n\t\t\tString dataId = configCenterConfig.getDataId();\n\t\t\tif (StringUtils.isEmpty(group) || StringUtils.isEmpty(dataId)) {\n\t\t\t\tthrow new IllegalArgumentException(\"The group or dataId is empty.\");\n\t\t\t}\n\t\t\tlogger.info(\"Subscribe config: group={}, dataId={}\", group, dataId);\n\t\t\treturn zookeeperOperation.subscribeConfig(group, dataId, new ZookeeperSubscribeCallback() {\n\t\t\t\t@Override\n\t\t\t\tpublic void handleConfigUpdate(String config) {\n\t\t\t\t\tlogger.info(\"Subscribe config: config={}\", config);\n\t\t\t\t\tconfigAdapter.updateConfig(ConfigType.GLOBAL, config);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tString dataId = configCenterConfig.getDataId();\n\t\t\tif (StringUtils.isEmpty(dataId)) {\n\t\t\t\tthrow new IllegalArgumentException(\"The dataId is empty.\");\n\t\t\t}\n\t\t\tlogger.info(\"Subscribe config: dataId={}\", dataId);\n\t\t\treturn zookeeperOperation.subscribeConfig(dataId, new ZookeeperSubscribeCallback() {\n\t\t\t\t@Override\n\t\t\t\tpublic void handleConfigUpdate(String config) {\n\t\t\t\t\tlogger.info(\"Subscribe config: config={}\", config);\n\t\t\t\t\tconfigAdapter.updateConfig(ConfigType.LOCAL, config);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(\"Subscribe config failure.\", e);\n\t}\n\treturn null;\n}", "CodeBleu_score": 42.351172840311236}]}
{"instance_id": "be408acc71f6", "generation_result": [{"code": "public CuratorFramework curatorFramework(){\n\t\tCuratorFramework curatorFramework = null;\n\tString connectionString = environment().getProperty(ZookeeperConstant.ZOOKEEPER_CONNECTION_STRING);\n\tif (StringUtils.isEmpty(connectionString)) {\n\t\tthrow new DiscoveryException(ZookeeperConstant.ZOOKEEPER_CONNECTION_STRING + \" is empty\");\n\t}\n\n\tint retryCount = environment().getProperty(ZookeeperConstant.ZOOKEEPER_RETRY_COUNT, Integer.class, 3);\n\tint sleepTime = environment().getProperty(ZookeeperConstant.ZOOKEEPER_SLEEP_TIME, Integer.class, 2000);\n\tExponentialBackoffRetry retryPolicy = new ExponentialBackoffRetry(sleepTime, retryCount);\n\n\tcuratorFramework = CuratorFrameworkFactory.builder().connectString(connectionString).retryPolicy(retryPolicy).build();\n\tcuratorFramework.start();\n\n\treturn curatorFramework;\n}", "CodeBleu_score": 58.01980742203241}, {"code": "public CuratorFramework curatorFramework(){\n\t\tString connectionString = environment().getProperty(ZookeeperConstant.ZOOKEEPER_CONNECTION_STRING);\n\tif (StringUtils.isEmpty(connectionString)) {\n\t\tthrow new DiscoveryException(\"The Zookeeper connection string is empty.\");\n\t}\n\n\tint retryCount = environment().getProperty(ZookeeperConstant.ZOOKEEPER_RETRY_COUNT, Integer.class, 3);\n\tint sleepTime = environment().getProperty(ZookeeperConstant.ZOOKEEPER_SLEEP_TIME, Integer.class, 1000);\n\n\tCuratorFramework curatorFramework = CuratorFrameworkFactory.builder()\n\t\t.connectString(connectionString)\n\t\t.retryPolicy(new ExponentialBackoffRetry(sleepTime, retryCount))\n\t\t.build();\n\n\tcuratorFramework.start();\n\n\treturn curatorFramework;\n}", "CodeBleu_score": 57.938706581438204}, {"code": "public CuratorFramework curatorFramework(){\n\t\tString connectionString = environment.getProperty(ZookeeperConstant.ZOOKEEPER_CONNECTION_STRING);\n\tif (StringUtils.isBlank(connectionString)) {\n\t\tthrow new DiscoveryException(\"Zookeeper connection string is empty\");\n\t}\n\n\tint retryCount = environment.getProperty(ZookeeperConstant.ZOOKEEPER_RETRY_COUNT, Integer.class);\n\tint sleepTime = environment.getProperty(ZookeeperConstant.ZOOKEEPER_SLEEP_TIME, Integer.class);\n\n\tCuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(connectionString, new ExponentialBackoffRetry(retryCount, sleepTime));\n\tcuratorFramework.start();\n\n\treturn curatorFramework;\n}", "CodeBleu_score": 52.729563754708465}]}
{"instance_id": "3628d7b6f0a5", "generation_result": [{"code": "protected static class GatewayRouteZookeeperConfiguration{\n\t\t@Bean\n\t@ConditionalOnProperty(value = \"spring.cloud.gateway.discovery.locator.enabled\", havingValue = \"false\")\n\t@ConditionalOnClass(ZookeeperProcessor.class)\n\tpublic GatewayStrategyRouteZookeeperProcessor gatewayStrategyRouteZookeeperProcessor() {\n\t\treturn new GatewayStrategyRouteZookeeperProcessor();\n\t}\n}", "CodeBleu_score": 48.254784868001884}, {"code": "protected static class GatewayRouteZookeeperConfiguration{\n\t\n/**\n * The GatewayStrategyRouteZookeeperProcessor class defines a processor for gateway routes.\nIt includes a bean method, which returns a new instance of GatewayStrategyRouteZookeeperProcessor.\nThis method is conditional, only executing if the property \"spring.cloud.gateway.discovery.locator.enabled\" is set to \"false\" or is missing.\n */\n@Configuration\n@ConditionalOnProperty(name = \"spring.cloud.gateway.discovery.locator.enabled\", matchIfMissing = true)\n@ConditionalOnClass(GatewayStrategyRouteZookeeperProcessor.class)\npublic static class GatewayStrategyRouteZookeeperProcessorConfiguration {\n\n/**\n * The GatewayStrategyRouteZookeeperProcessor class defines a processor for gateway routes.\nIt includes a bean method, which returns a new instance of GatewayStrategyRouteZookeeperProcessor.\nThis method is conditional, only executing if the property \"spring.cloud.gateway.discovery.locator.enabled\" is set to \"false\" or is missing.\n */\n@Bean\n@ConditionalOnMissingBean(GatewayStrategyRouteZookeeperProcessor.class)\npublic GatewayStrategyRouteZookeeperProcessor gatewayStrategyRouteZookeeperProcessor() {\n    return new GatewayStrategyRouteZookeeperProcessor();\n}\n\n}\n\n/**\n * The GatewayStrategyRouteZookeeperProcessor class defines a processor for gateway routes.\nIt includes a bean method, which returns a new instance of GatewayStrategyRouteZookeeperProcessor.\nThis method is conditional, only executing if the property \"spring.cloud.gateway.discovery.locator.enabled\" is set to \"false\" or is missing.\n */\n@Bean\n@ConditionalOnMissingBean(GatewayStrategyRouteZookeeperProcessor.class)\npublic GatewayStrategyRouteZookeeperProcessor gatewayStrategyRouteZookeeperProcessor() {\n    return new GatewayStrategyRouteZookeeperProcessor();\n}\n\n}", "CodeBleu_score": 34.943225630625065}, {"code": "protected static class GatewayRouteZookeeperConfiguration{\n\t\t@Bean\n\t@ConditionalOnMissingBean(GatewayStrategyRoute.class)\n\t@ConditionalOnProperty(name = \"spring.cloud.gateway.discovery.locator.enabled\", havingValue = \"false\", matchIfMissing = true)\n\tpublic GatewayStrategyRoute gatewayStrategyRouteZookeeper() {\n\t\treturn new DefaultGatewayStrategyRoute();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(GatewayStrategyRouteProcessor.class)\n\t@ConditionalOnProperty(name = \"spring.cloud.gateway.discovery.locator.enabled\", havingValue = \"false\", matchIfMissing = true)\n\tpublic GatewayStrategyRouteProcessor gatewayStrategyRouteProcessorZookeeper() {\n\t\treturn new GatewayStrategyRouteZookeeperProcessor();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(GatewayStrategyMonitor.class)\n\t@ConditionalOnProperty(name = \"spring.cloud.gateway.discovery.locator.enabled\", havingValue = \"false\", matchIfMissing = true)\n\tpublic GatewayStrategyMonitor gatewayStrategyMonitorZookeeper() {\n\t\treturn new DefaultGatewayStrategyMonitor();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(GatewayStrategyClearFilter.class)\n\t@ConditionalOnProperty(name = \"spring.cloud.gateway.discovery.locator.enabled\", havingValue = \"false\", matchIfMissing = true)\n\tpublic GatewayStrategyClearFilter gatewayStrategyClearFilterZookeeper() {\n\t\treturn new DefaultGatewayStrategyClearFilter();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(GatewayStrategyRouteFilter.class)\n\t@ConditionalOnProperty(name = \"spring.cloud.gateway.discovery.locator.enabled\", havingValue = \"false\", matchIfMissing = true)\n\tpublic GatewayStrategyRouteFilter gatewayStrategyRouteFilterZookeeper() {\n\t\treturn new DefaultGatewayStrategyRouteFilter();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(GatewayStrategyCallableWrapper.class)\n\t@ConditionalOnProperty(name = \"spring.cloud.gateway.discovery.locator.enabled\", havingValue = \"false\", matchIfMissing = true)\n\tpublic GatewayStrategyCallableWrapper gatewayStrategyCallableWrapperZookeeper() {\n\t\treturn new DefaultGatewayStrategyCallableWrapper();\n\t}\n\n\t@Bean\n\t@ConditionalOnMissingBean(GatewayStrategyContextListener.class)\n\t@ConditionalOnProperty(name = \"spring.cloud.gateway.discovery.locator", "CodeBleu_score": 37.29711089126326}]}
{"instance_id": "68a13b54ad7c", "generation_result": [{"code": "public  CuratorFramework createCuratorFramework(){\n\t\tRetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n\tCuratorFramework client = CuratorFrameworkFactory.builder()\n\t\t.connectString(this.hosts)\n\t\t.sessionTimeoutMs(this.sessionTimeout)\n\t\t.namespace(this.namespace)\n\t\t.retryPolicy(retryPolicy)\n\t\t.build();\n\tclient.start();\n\treturn client;\n}", "CodeBleu_score": 49.002674514665564}, {"code": "public  CuratorFramework createCuratorFramework(){\n\t\tRetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n\tCuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(curatorProperties.getHosts(), curatorProperties.getSessionTimeout(), curatorProperties.getNamespace(), retryPolicy);\n\tcuratorFramework.start();\n\treturn curatorFramework;\n}", "CodeBleu_score": 47.33923285323428}, {"code": "public  CuratorFramework createCuratorFramework(){\n\t\tCuratorFramework curatorFramework = CuratorFrameworkFactory.builder().connectString(hosts).sessionTimeoutMs(sessionTimeout).retryPolicy(retryPolicy).namespace(namespace).build();\n\tcuratorFramework.start();\n\treturn curatorFramework;\n}", "CodeBleu_score": 37.64231787359882}]}
{"instance_id": "018a3d7b5f59", "generation_result": [{"code": "public void lock(String path) throws DistributedLockException{\n\t\tif (locksMap.containsKey(path)) {\n\t\treturn;\n\t}\n\tInterProcessMutex mutex = new InterProcessMutex(client, path);\n\ttry {\n\t\tmutex.acquire();\n\t\tlocksMap.put(path, mutex);\n\t} catch (Exception e) {\n\t\tthrow new DistributedLockException(e);\n\t}\n}", "CodeBleu_score": 19.34318427508286}, {"code": "public void lock(String path) throws DistributedLockException{\n\t\tInterProcessMutex lock = getLock(path);\n\ttry {\n\t\tlock.acquire();\n\t} catch (Exception e) {\n\t\tthrow new DistributedLockException(e);\n\t}\n}", "CodeBleu_score": 18.150984506096194}, {"code": "public void lock(String path) throws DistributedLockException{\n\t\tlock(path, 0, TimeUnit.MILLISECONDS);\n}", "CodeBleu_score": 4.590252664249354}]}
{"instance_id": "2068af09c973", "generation_result": [{"code": "public static Map<Object, Object> genPropertiesMap(DtpProperties dtpProperties){\n\t\tval curatorFramework = CuratorFrameworkFactory.builder().connectString(dtpProperties.getZookeeperAddress()).retryPolicy(new ExponentialBackoffRetry(1000, 3)).build();\n\tcuratorFramework.start();\n\tcuratorFramework.getConnectionStateListenable().addListener(new ConnectionStateListener() {\n\t\t@Override\n\t\tpublic void stateChanged(CuratorFramework client, ConnectionState newState) {\n\t\t\tif (newState == ConnectionState.LOST) {\n\t\t\t\tlog.error(\"Connection to zookeeper lost\");\n\t\t\t} else if (newState == ConnectionState.SUSPENDED) {\n\t\t\t\tlog.error(\"Connection to zookeeper suspended\");\n\t\t\t} else if (newState == ConnectionState.RECONNECTED) {\n\t\t\t\tlog.info(\"Connection to zookeeper reconnected\");\n\t\t\t} else if (newState == ConnectionState.CONNECTED) {\n\t\t\t\tlog.info(\"Connection to zookeeper connected\");\n\t\t\t}\n\t\t}\n\t});\n\tval configFileType = dtpProperties.getConfigFileType();\n\tval configKey = dtpProperties.getConfigKey();\n\tString nodePath;\n\tif (PROPERTIES.equals(configFileType)) {\n\t\tnodePath = ZKPaths.makePath(dtpProperties.getConfigPath(), configKey);\n\t\tval propertiesMap = genPropertiesTypeMap(curatorFramework, nodePath);\n\t\tcuratorFramework.close();\n\t\treturn propertiesMap;\n\t} else if (JSON.equals(configFileType)) {\n\t\tnodePath = ZKPaths.makePath(dtpProperties.getConfigPath(), configKey, dtpProperties.getConfigFile());\n\t\tval configHandler = new ConfigHandler();\n\t\tval data = curatorFramework.getData().forPath(nodePath);\n\t\tval map = configHandler.parse(new String(data, StandardCharsets.UTF_8), configFileType);\n\t\tcuratorFramework.close();\n\t\treturn map;\n\t}\n\tcuratorFramework.close();\n\treturn Collections.emptyMap();\n}", "CodeBleu_score": 40.13654234275947}, {"code": "public static Map<Object, Object> genPropertiesMap(DtpProperties dtpProperties){\n\t\tval configHandler = new ConfigHandler();\n\tval configFileType = dtpProperties.getConfigFileType();\n\tval configKey = dtpProperties.getConfigKey();\n\tval curatorFramework = CuratorFrameworkFactory.builder()\n\t\t\t.connectString(dtpProperties.getZkAddress())\n\t\t\t.retryPolicy(new ExponentialBackoffRetry(1000, 3))\n\t\t\t.connectionStateListener(new ConnectionStateListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void stateChanged(CuratorFramework client, ConnectionState newState) {\n\t\t\t\t\tif (newState == ConnectionState.LOST) {\n\t\t\t\t\t\tlog.info(\"zookeeper connection lost\");\n\t\t\t\t\t} else if (newState == ConnectionState.RECONNECTED) {\n\t\t\t\t\t\tlog.info(\"zookeeper connection reconnected\");\n\t\t\t\t\t} else if (newState == ConnectionState.CONNECTED) {\n\t\t\t\t\t\tlog.info(\"zookeeper connection connected\");\n\t\t\t\t\t} else if (newState == ConnectionState.SUSPENDED) {\n\t\t\t\t\t\tlog.info(\"zookeeper connection suspended\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\t.build();\n\tcuratorFramework.start();\n\tval nodePath = ZKPaths.makePath(dtpProperties.getZkPath(), configKey);\n\tval countDownLatch = new CountDownLatch(1);\n\tMap<Object, Object> result = null;\n\tif (PROPERTIES.equals(configFileType)) {\n\t\tresult = genPropertiesTypeMap(curatorFramework, nodePath, countDownLatch);\n\t} else if (JSON.equals(configFileType)) {\n\t\tresult = genJsonMap(curatorFramework, nodePath, countDownLatch);\n\t}\n\tcountDownLatch.await();\n\tcuratorFramework.close();\n\treturn result;\n}", "CodeBleu_score": 39.0396034202305}, {"code": "public static Map<Object, Object> genPropertiesMap(DtpProperties dtpProperties){\n\t\tval configHandler = new ConfigHandler();\n\tval configFileType = dtpProperties.getConfigFileType();\n\tval configKey = dtpProperties.getConfigKey();\n\tval curatorFramework = CuratorFrameworkFactory.builder()\n\t\t\t.connectString(dtpProperties.getZkAddress())\n\t\t\t.sessionTimeoutMs(dtpProperties.getZkSessionTimeout())\n\t\t\t.connectionTimeoutMs(dtpProperties.getZkConnectionTimeout())\n\t\t\t.retryPolicy(new ExponentialBackoffRetry(dtpProperties.getZkRetryInterval(), dtpProperties.getZkRetryTimes()))\n\t\t\t.build();\n\tcuratorFramework.getConnectionStateListenable().addListener((client, newState) -> {\n\t\tif (ConnectionState.CONNECTED == newState) {\n\t\t\ttry {\n\t\t\t\tval children = curatorFramework.getChildren().forPath(ZKPaths.makePath(dtpProperties.getZkPath()));\n\t\t\t\tif (children.isEmpty()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tval nodePath = ZKPaths.makePath(dtpProperties.getZkPath(), children.get(0));\n\t\t\t\tval data = curatorFramework.getData().forPath(nodePath);\n\t\t\t\tval map = configHandler.parse(data, configFileType, configKey);\n\t\t\t\tif (map == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tdtpProperties.setProperties(map);\n\t\t\t\tlog.info(\"The properties have been updated.\");\n\t\t\t} catch (Exception e) {\n\t\t\t\tlog.error(\"Failed to update the properties.\", e);\n\t\t\t}\n\t\t}\n\t});\n\tcuratorFramework.start();\n\tcuratorFramework.getConnectionStateListenable().addListener(new ConnectionStateListener() {\n\t\t@Override\n\t\tpublic void stateChanged(CuratorFramework client, ConnectionState newState) {\n\t\t\tif (ConnectionState.LOST == newState) {\n\t\t\t\tlog.error(\"The connection to the zookeeper has been lost. Please check the configuration.\");\n\t\t\t}\n\t\t}\n\t});\n\tval countDownLatch = new CountDownLatch(1);\n\ttry {\n\t\tcountDownLatch.await();\n\t} catch (InterruptedException e) {\n\t\tlog.error(\"Failed to get the zookeeper connection.\", e);\n\t}\n\tif (curatorFramework.getZookeeperClient().isConnected()) {\n\t\ttry {\n\t\t\tval children = curatorFramework", "CodeBleu_score": 34.2754112823681}]}
{"instance_id": "3d3c9020d299", "generation_result": [{"code": "public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application){\n\t\tif (environment instanceof OriginTrackedMapPropertySource) {\n\t\treturn;\n\t}\n\tDtpProperties dtpProperties = new DtpProperties();\n\tdtpProperties.setZookeeperAddress(\"127.0.0.1:2181\");\n\tdtpProperties.setZookeeperRoot(\"/dynamictp\");\n\tdtpProperties.setZookeeperUsername(\"root\");\n\tdtpProperties.setZookeeperPassword(\"\");\n\tdtpProperties.setZookeeperSessionTimeout(10000);\n\tdtpProperties.setZookeeperConnectionTimeout(10000);\n\tdtpProperties.setZookeeperRetryTimes(3);\n\tdtpProperties.setZookeeperRetryInterval(5000);\n\tdtpProperties.setZookeeperRetryMaxTimes(3);\n\tdtpProperties.setZookeeperRetryMaxInterval(10000);\n\tdtpProperties.setZookeeperRetryMaxTotalTimes(3);\n\tdtpProperties.setZookeeperRetryMaxTotalInterval(10000);\n\tdtpProperties.setZookeeperRetryMaxTotalTimes(3);\n\tdtpProperties.setZookeeperRetryMaxTotalInterval(10000);\n\tdtpProperties.setZookeeperRetryMaxTotalTimes(3);\n\tdtpProperties.setZookeeperRetryMaxTotalInterval(10000);\n\tdtpProperties.setZookeeperRetryMaxTotalTimes(3);\n\tdtpProperties.setZookeeperRetryMaxTotalInterval(10000);\n\tdtpProperties.setZookeeperRetryMaxTotalTimes(3);\n\tdtpProperties.setZookeeperRetryMaxTotalInterval(10000);\n\tdtpProperties.setZookeeperRetryMaxTotalTimes(3);\n\tdtpProperties.setZookeeperRetryMaxTotalInterval(10000);\n\tdtpProperties.setZookeeperRetryMaxTotalTimes(3);\n\tdtpProperties.setZookeeperRetryMaxTotalInterval(10000);\n\tdtpProperties.setZookeeperRetryMaxTotalTimes(3);\n\tdtpProperties.setZookeeperRetryMaxTotalInterval(10000);\n\tdtpProperties.setZookeeperRetryMaxTotalTimes(3);\n\tdtpProperties.", "CodeBleu_score": 18.28602577911898}, {"code": "public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application){\n\t\tDtpProperties dtpProperties = DtpProperties.getInstance();\n\tMap<String, Object> properties = BinderHelper.bind(dtpProperties);\n\tif (properties!= null) {\n\t\tMutablePropertySources propertySources = environment.getPropertySources();\n\t\tif (propertySources.contains(ZOOKEEPER_PROPERTY_SOURCE_NAME)) {\n\t\t\tlog.warn(\"The Zookeeper property source already exists, so it will not be created again.\");\n\t\t\treturn;\n\t\t}\n\t\tOriginTrackedMapPropertySource originTrackedMapPropertySource = new OriginTrackedMapPropertySource(ZOOKEEPER_PROPERTY_SOURCE_NAME, properties);\n\t\tpropertySources.addLast(originTrackedMapPropertySource);\n\t\tCuratorUtil.createZookeeperPropertySource(environment, dtpProperties);\n\t}\n}", "CodeBleu_score": 49.54794687546213}, {"code": "public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application){\n\t\tDtpProperties dtpProperties = new DtpProperties();\n\tMap<String, Object> dtpPropertiesMap = BinderHelper.bind(dtpProperties);\n\tMutablePropertySources propertySources = environment.getPropertySources();\n\tif (propertySources instanceof OriginTrackedMapPropertySource) {\n\t\tOriginTrackedMapPropertySource originTrackedMapPropertySource = (OriginTrackedMapPropertySource) propertySources;\n\t\tMap<String, Object> originTrackedMap = originTrackedMapPropertySource.getSource();\n\t\tif (originTrackedMap.containsKey(\"zookeeper\")) {\n\t\t\tlog.error(\"zookeeper property source already exists in the environment, please check the configuration of the application.yml file\");\n\t\t\treturn;\n\t\t}\n\t\tif (CuratorUtil.checkExists(dtpProperties.getZkAddress())) {\n\t\t\tCuratorUtil.createPersistent(dtpProperties.getZkAddress(), dtpPropertiesMap);\n\t\t}\n\t\tpropertySources.addFirst(new OriginTrackedMapPropertySource(\"zookeeper\", dtpPropertiesMap));\n\t} else {\n\t\tlog.error(\"zookeeper property source does not exist in the environment, please check the configuration of the application.yml file\");\n\t}\n}", "CodeBleu_score": 37.57896821177474}]}
{"instance_id": "0a934e7885be", "generation_result": [{"code": "public ZookeeperModule UseZooKeeperRouteManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t\tbuilder.RegisterType<ZooKeeperRouteManager>().As<IRouteManager>().SingleInstance();\n\tbuilder.RegisterType<ZooKeeperRouteFactory>().As<IRouteFactory>().SingleInstance();\n\tbuilder.RegisterType<ZooKeeperRouteSelector>().As<IRouteSelector>().SingleInstance();\n\tbuilder.RegisterType<ZooKeeperRouteSelectorFactory>().As<IRouteSelectorFactory>().SingleInstance();\n\tbuilder.RegisterType<ZooKeeperRouteSelectorBuilder>().As<IRouteSelectorBuilder>().SingleInstance();\n\tbuilder.RegisterType<ZooKeeperRouteSelectorBuilderFactory>().As<IRouteSelectorBuilderFactory>().SingleInstance();\n\tbuilder.RegisterType<ZooKeeperRouteSelectorBuilderCollection>().As<IRouteSelectorBuilderCollection>().SingleInstance();\n\tbuilder.RegisterType<ZooKeeperRouteSelectorBuilderCollectionFactory>().As<IRouteSelectorBuilderCollectionFactory>().SingleInstance();\n\tbuilder.RegisterType<ZooKeeperRouteSelectorBuilderCollectionFactory>().As<IRouteSelectorBuilderCollectionFactory>().SingleInstance();\n\tbuilder.RegisterType<ZooKeeperRouteSelectorBuilderCollectionFactory>().As<IRouteSelectorBuilderCollectionFactory>().SingleInstance();\n\tbuilder.RegisterType<ZooKeeperRouteSelectorBuilderCollectionFactory>().As<IRouteSelectorBuilderCollectionFactory>().SingleInstance();\n\tbuilder.RegisterType<ZooKeeperRouteSelectorBuilderCollectionFactory>().As<IRouteSelectorBuilderCollectionFactory>().SingleInstance();\n\tbuilder.RegisterType<ZooKeeperRouteSelectorBuilderCollectionFactory>().As<IRouteSelectorBuilderCollectionFactory>().SingleInstance();\n\tbuilder.RegisterType<ZooKeeperRouteSelectorBuilderCollectionFactory>().As<IRouteSelectorBuilderCollectionFactory>().SingleInstance();\n\tbuilder.RegisterType<ZooKeeperRouteSelectorBuilderCollectionFactory>().As<IRouteSelectorBuilderCollectionFactory>().SingleInstance();\n\tbuilder.RegisterType<ZooKeeperRouteSelectorBuilderCollectionFactory>().As<IRouteSelectorBuilderCollectionFactory>().SingleInstance();\n\tbuilder.RegisterType<ZooKeeperRouteSelectorBuilderCollectionFactory>().As<IRouteSelectorBuilderCollectionFactory>().SingleInstance();\n\tbuilder.RegisterType<ZooKeeperRouteSelectorBuilderCollectionFactory>().As<IRouteSelectorBuilderCollectionFactory>().SingleInstance();\n\tbuilder.RegisterType<ZooKeeperRouteSelectorBuilderCollectionFactory>().As<IRouteSelectorBuilderCollectionFactory>().SingleInstance();\n\tbuilder.RegisterType<ZooKeeperRouteSelectorBuilderCollectionFactory>().As<IRouteSelectorBuilderCollectionFactory>().SingleInstance();\n\tbuilder", "CodeBleu_score": 33.356657690261734}, {"code": "public ZookeeperModule UseZooKeeperRouteManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t\tif (builder == null) {\n\t\tthrow new ArgumentNullException(nameof(builder));\n\t}\n\tif (configInfo == null) {\n\t\tthrow new ArgumentNullException(nameof(configInfo));\n\t}\n\tif (builder.ContainerBuilder.GetService(typeof(IServiceRouteManager))!= null) {\n\t\tthrow new InvalidOperationException(\"The ZooKeeper-based service route manager has already been configured.\");\n\t}\n\tif (builder.ContainerBuilder.GetService(typeof(ISerializer)) == null) {\n\t\tbuilder.ContainerBuilder.Register(c => new JsonNetSerializer()).As<ISerializer>();\n\t}\n\tif (builder.ContainerBuilder.GetService(typeof(IRouteFactory)) == null) {\n\t\tbuilder.ContainerBuilder.Register(c => new ZookeeperRouteFactory(configInfo)).As<IRouteFactory>();\n\t}\n\tif (builder.ContainerBuilder.GetService(typeof(ILogger)) == null) {\n\t\tbuilder.ContainerBuilder.Register(c => new LoggerFactory().AddConsole().CreateLogger(\"Surging.Core.Zookeeper\")).As<ILogger>();\n\t}\n\tif (builder.ContainerBuilder.GetService(typeof(IZookeeperClientProvider)) == null) {\n\t\tbuilder.ContainerBuilder.Register(c => new ZookeeperClientProvider(configInfo)).As<IZookeeperClientProvider>();\n\t}\n\tbuilder.ContainerBuilder.RegisterType<ZookeeperHealthCheckService>().As<IHealthCheckService>();\n\tbuilder.ContainerBuilder.RegisterType<ZookeeperHealthCheckClient>().As<IHealthCheckClient>();\n\tbuilder.ContainerBuilder.RegisterType<ZookeeperHealthCheckSelector>().As<IHealthCheckSelector>();\n\tbuilder.ContainerBuilder.RegisterType<ZookeeperHealthCheckSelectorFactory>().As<IHealthCheckSelectorFactory>();\n\tbuilder.ContainerBuilder.RegisterType<ZookeeperHealthCheckSelectorFactory>().As<IHealthCheckSelectorFactory>();\n\tbuilder.ContainerBuilder.RegisterType<ZookeeperHealthCheckSelectorFactory>().As<IHealthCheckSelectorFactory>();\n\tbuilder.ContainerBuilder.RegisterType<ZookeeperHealthCheckSelectorFactory>().As<IHealthCheckSelectorFactory>();\n\tbuilder.ContainerBuilder.RegisterType<ZookeeperHealthCheckSelectorFactory>().As<IHealthCheckSelectorFactory>();\n\tbuilder.ContainerBuilder.RegisterType<ZookeeperHealthCheckSelectorFactory>().As<IHealthCheckSelectorFactory>();\n\tbuilder.ContainerBuilder.RegisterType<ZookeeperHealthCheckSelectorFactory>().As<IHealthCheckSelectorFactory>();\n\tbuilder.ContainerBuilder", "CodeBleu_score": 29.43802730342276}, {"code": "public ZookeeperModule UseZooKeeperRouteManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t\tbuilder.AddSingleton<IRouteFactory, ZooKeeperRouteFactory>();\n\tbuilder.AddSingleton<IRouteFactory, ZooKeeperRouteFactory>();\n\tbuilder.AddSingleton<IRouteFactory, ZooKeeperRouteFactory>();\n\tbuilder.AddSingleton<IRouteFactory, ZooKeeperRouteFactory>();\n\tbuilder.AddSingleton<IRouteFactory, ZooKeeperRouteFactory>();\n\tbuilder.AddSingleton<IRouteFactory, ZooKeeperRouteFactory>();\n\tbuilder.AddSingleton<IRouteFactory, ZooKeeperRouteFactory>();\n\tbuilder.AddSingleton<IRouteFactory, ZooKeeperRouteFactory>();\n\tbuilder.AddSingleton<IRouteFactory, ZooKeeperRouteFactory>();\n\tbuilder.AddSingleton<IRouteFactory, ZooKeeperRouteFactory>();\n\tbuilder.AddSingleton<IRouteFactory, ZooKeeperRouteFactory>();\n\tbuilder.AddSingleton<IRouteFactory, ZooKeeperRouteFactory>();\n\tbuilder.AddSingleton<IRouteFactory, ZooKeeperRouteFactory>();\n\tbuilder.AddSingleton<IRouteFactory, ZooKeeperRouteFactory>();\n\tbuilder.AddSingleton<IRouteFactory, ZooKeeperRouteFactory>();\n\tbuilder.AddSingleton<IRouteFactory, ZooKeeperRouteFactory>();\n\tbuilder.AddSingleton<IRouteFactory, ZooKeeperRouteFactory>();\n\tbuilder.AddSingleton<IRouteFactory, ZooKeeperRouteFactory>();\n\tbuilder.AddSingleton<IRouteFactory, ZooKeeperRouteFactory>();\n\tbuilder.AddSingleton<IRouteFactory, ZooKeeperRouteFactory>();\n\tbuilder.AddSingleton<IRouteFactory, ZooKeeperRouteFactory>();\n\tbuilder.AddSingleton<IRouteFactory, ZooKeeperRouteFactory>();\n\tbuilder.AddSingleton<IRouteFactory, ZooKeeperRouteFactory>();\n\tbuilder.AddSingleton<IRouteFactory, ZooKeeperRouteFactory>();\n\tbuilder.AddSingleton<IRouteFactory, ZooKeeperRouteFactory>();\n\tbuilder.AddSingleton<IRouteFactory, ZooKeeperRouteFactory>();\n\tbuilder.AddSingleton<IRouteFactory, ZooKeeperRouteFactory>();\n\tbuilder.AddSingleton<IRouteFactory, ZooKeeperRouteFactory>();\n\tbuilder.AddSingleton<IRouteFactory, ZooKeeperRouteFactory>();\n\tbuilder.AddSingleton<IRouteFactory, ZooKeeperRouteFactory>();\n\tbuilder", "CodeBleu_score": 26.579894478486903}]}
{"instance_id": "c30a17587331", "generation_result": [{"code": " public ZookeeperModule UseZooKeeperCommandManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t if (builder == null) {\n throw new ArgumentNullException(nameof(builder));\n }\n if (configInfo == null) {\n throw new ArgumentNullException(nameof(configInfo));\n }\n builder.Register(c => new ZooKeeperServiceCommandManager(c.Resolve<ILogger<ZooKeeperServiceCommandManager>>(), c.Resolve<IConfiguration>(), c.Resolve<ISerializerManager>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<IObjectSerializer>(), c.Resolve<", "CodeBleu_score": 37.50463466810338}, {"code": " public ZookeeperModule UseZooKeeperCommandManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t var zookeeperServiceCommandManager = new ZookeeperServiceCommandManager();\n builder.Services.AddSingleton(zookeeperServiceCommandManager);\n builder.Services.AddSingleton<IServiceCommandManager>(zookeeperServiceCommandManager);\n return this;\n}", "CodeBleu_score": 35.545046721364756}, {"code": " public ZookeeperModule UseZooKeeperCommandManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\tbuilder.RegisterModule(new ZookeeperModule());", "CodeBleu_score": 10.845641881659843}]}
{"instance_id": "213cc4aa9b19", "generation_result": [{"code": "public static IConfigurationBuilder AddZookeeperFile(this IConfigurationBuilder builder, IFileProvider provider, string path, bool optional, bool reloadOnChange){\n\t\tif (builder == null) {\n\t\tthrow new ArgumentNullException(\"builder\");\n\t}\n\tif (path == null) {\n\t\tthrow new ArgumentNullException(\"path\");\n\t}\n\tif (provider == null) {\n\t\tprovider = new PhysicalFileProvider(Path.GetDirectoryName(path));\n\t}\n\treturn builder.Add(new ZookeeperConfigurationSource(provider, path, optional, reloadOnChange));\n}", "CodeBleu_score": 37.696106716814185}, {"code": "public static IConfigurationBuilder AddZookeeperFile(this IConfigurationBuilder builder, IFileProvider provider, string path, bool optional, bool reloadOnChange){\n\t\tif (builder == null) {\n\t\tthrow new ArgumentNullException(nameof(builder));\n\t}\n\tif (path == null) {\n\t\tthrow new ArgumentNullException(nameof(path));\n\t}\n\tif (provider == null) {\n\t\tprovider = new PhysicalFileProvider(Path.GetDirectoryName(path));\n\t}\n\treturn builder.Add(new ZookeeperConfigurationSource(provider, path, optional, reloadOnChange));\n}", "CodeBleu_score": 38.13371097285121}, {"code": "public static IConfigurationBuilder AddZookeeperFile(this IConfigurationBuilder builder, IFileProvider provider, string path, bool optional, bool reloadOnChange){\n\t\tif (builder == null) {\n\t\tthrow new ArgumentNullException(nameof(builder));\n\t}\n\n\tif (string.IsNullOrEmpty(path)) {\n\t\tthrow new ArgumentException(\"The path must not be empty.\", nameof(path));\n\t}\n\n\tif (provider == null) {\n\t\tprovider = new PhysicalFileProvider(Path.GetDirectoryName(path));\n\t}\n\n\tbuilder.Add(new ZookeeperConfigurationSource {\n\t\tOptional = optional,\n\t\tPath = path,\n\t\tProvider = provider,\n\t\tReloadOnChange = reloadOnChange\n\t});\n\n\treturn builder.Build();\n}", "CodeBleu_score": 46.87220394098477}]}
{"instance_id": "15bbffa82a13", "generation_result": [{"code": "public override async Task RemveAddressAsync(IEnumerable<AddressModel> Address){\n\t\tif (Address == null || Address.Count() == 0) {\n\t\treturn;\n\t}\n\tvar routes = await GetRoutesAsync();\n\tvar newRoutes = new List<RouteModel>();\n\tforeach (var route in routes) {\n\t\tvar newRoute = new RouteModel();\n\t\tnewRoute.RouteId = route.RouteId;\n\t\tnewRoute.ServiceName = route.ServiceName;\n\t\tnewRoute.RouteType = route.RouteType;\n\t\tnewRoute.Weight = route.Weight;\n\t\tnewRoute.Addresses = new List<AddressModel>();\n\t\tforeach (var address in route.Addresses) {\n\t\t\tif (Address.Any(a => a.Address == address.Address)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tnewRoute.Addresses.Add(address);\n\t\t}\n\t\tnewRoutes.Add(newRoute);\n\t}\n\tawait SetRoutesAsync(newRoutes);\n}", "CodeBleu_score": 49.920144500142385}, {"code": "public override async Task RemveAddressAsync(IEnumerable<AddressModel> Address){\n\t\tvar routes = await this.GetRoutesAsync();\n\tforeach (var route in routes) {\n\t\tvar addresses = route.Addresses.Where(x =>!Address.Select(y => y.Address).Contains(x.Address)).ToList();\n\t\troute.Addresses = addresses;\n\t}\n\tawait this.SetRoutesAsync(routes);\n}", "CodeBleu_score": 47.19947349434752}, {"code": "public override async Task RemveAddressAsync(IEnumerable<AddressModel> Address){\n\t\tif (Address == null ||!Address.Any()) {\n\t\treturn;\n\t}\n\tvar routes = await GetRoutesAsync();\n\tforeach (var route in routes) {\n\t\troute.RemoveAddress(Address);\n\t}\n\tawait SetRoutesAsync(routes);\n}", "CodeBleu_score": 49.90241907246733}]}
{"instance_id": "125d23de2a60", "generation_result": [{"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<ServiceRoute> routes, AddressModel hostAddr){\n\t\tif (routes == null || routes.Count() == 0) {\n\t\treturn;\n\t}\n\tvar routePaths = routes.Select(r => r.RoutePath);\n\tvar clientList = await _zkClientFactory.GetClientsAsync();\n\tvar deleteRoutes = new ConcurrentBag<ServiceRoute>();\n\tforeach (var client in clientList) {\n\t\tvar routesFromZk = await client.GetRoutesAsync();\n\t\tif (routesFromZk == null || routesFromZk.Count == 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tvar routesTobeDeleted = routesFromZk.Where(r =>!routePaths.Contains(r.RoutePath)).ToList();\n\t\tforeach (var route in routesTobeDeleted) {\n\t\t\tif (route.Addresses.Any(a => a.Host == hostAddr.Host)) {\n\t\t\t\tdeleteRoutes.Add(route);\n\t\t\t}\n\t\t}\n\t}\n\tif (deleteRoutes.Count > 0) {\n\t\tawait DeleteRoutesAsync(deleteRoutes);\n\t}\n}", "CodeBleu_score": 27.740380265354514}, {"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<ServiceRoute> routes, AddressModel hostAddr){\n\t\tvar routePaths = new List<string>();\n\tforeach (var route in routes) {\n\t\troutePaths.Add(route.RoutePath);\n\t}\n\n\tvar zookeeperClients = _zookeeperClientProvider.GetZookeeperClients();\n\tforeach (var zookeeperClient in zookeeperClients) {\n\t\tvar currentRoutes = await _routePathProvider.GetRoutesAsync(zookeeperClient);\n\t\tvar routesToDelete = currentRoutes.Where(r =>!routePaths.Contains(r)).ToList();\n\t\tforeach (var routeToDelete in routesToDelete) {\n\t\t\tif (routeToDelete.Contains(hostAddr.Host)) {\n\t\t\t\tawait _routePathProvider.DeleteRouteAsync(zookeeperClient, routeToDelete);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 25.38863497306167}, {"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<ServiceRoute> routes, AddressModel hostAddr){\n\t\tvar path = GetRoutePath(hostAddr);\n\tvar zookeeperClients = await GetZookeeperClientsAsync(hostAddr);\n\tforeach (var zookeeperClient in zookeeperClients) {\n\t\tvar currentRoutes = await GetRoutesFromZookeeperAsync(zookeeperClient, path);\n\t\tvar toBeDeletedRoutes = currentRoutes.Where(r =>!routes.Any(r1 => r1.ServiceId == r.ServiceId && r1.ServiceVersion == r.ServiceVersion)).ToList();\n\t\tforeach (var route in toBeDeletedRoutes) {\n\t\t\tawait zookeeperClient.DeleteAsync(path + \"/\" + route.ServiceId + \"/\" + route.ServiceVersion);\n\t\t}\n\t}\n}", "CodeBleu_score": 24.40697221545912}]}
{"instance_id": "b020a235d57f", "generation_result": [{"code": "private async Task<ServiceRoute> GetRoute(byte[] data){\n\t\tif (data == null) {\n\t\treturn null;\n\t}\n\tif (this.logger.IsEnabled(LogLevel.Debug)) {\n\t\tthis.logger.LogDebug(\"Received route data: {0}\", data);\n\t}\n\tvar descriptor = this.serializer.Deserialize<ServiceRouteDescriptor>(data);\n\treturn this.routeFactory.CreateRoute(descriptor);\n}", "CodeBleu_score": 36.821545997431635}, {"code": "private async Task<ServiceRoute> GetRoute(byte[] data){\n\t\tif (data == null) {\n\t\treturn null;\n\t}\n\tvar routeDescriptor = Deserialize(data);\n\tvar serviceRoute = await ServiceRouteFactory.CreateServiceRoute(routeDescriptor, _logger);\n\tif (_logger.IsEnabled(LogLevel.Debug)) {\n\t\t_logger.LogDebug(serviceRoute.ToString());\n\t}\n\treturn serviceRoute;\n}", "CodeBleu_score": 33.7102587255207}, {"code": "private async Task<ServiceRoute> GetRoute(byte[] data){\n\t\tif (data == null) {\n\t\treturn null;\n\t}\n\tif (this._logger.IsEnabled(LogLevel.Debug)) {\n\t\tthis._logger.LogDebug(\"GetRoute data: {0}\", data);\n\t}\n\tvar serviceRouteDescriptor = this._serializer.Deserialize<ServiceRouteDescriptor>(data);\n\tvar serviceRoute = this._serviceRouteFactory.Create(serviceRouteDescriptor);\n\treturn serviceRoute;\n}", "CodeBleu_score": 40.79236570621404}]}
{"instance_id": "169ed4cc2ad4", "generation_result": [{"code": "public async Task NodeChange(byte[] oldData, byte[] newData){\n\t\tvar oldRoute = await GetRoute(oldData);\n\tvar newRoute = await GetRoute(newData);\n\tif (oldRoute == newRoute) {\n\t\treturn;\n\t}\n\tif (oldRoute == null) {\n\t\t_routes.Add(newRoute);\n\t}\n\telse {\n\t\t_routes.Remove(oldRoute);\n\t\t_routes.Add(newRoute);\n\t}\n\tOnChanged(oldRoute, newRoute);\n}", "CodeBleu_score": 25.04005925336284}, {"code": "public async Task NodeChange(byte[] oldData, byte[] newData){\n\t\tif (oldData.Length == 0 && newData.Length == 0) {\n\t\treturn;\n\t}\n\n\tif (oldData.Length == 0) {\n\t\tvar route = await _routeProvider.GetRoute(newData);\n\t\t_routes.AddOrUpdate(route.ServiceId, route, (key, value) => route);\n\t\tOnChanged(new ChangedRouteEventArgs(route, null));\n\t\treturn;\n\t}\n\n\tif (newData.Length == 0) {\n\t\tvar route = await _routeProvider.GetRoute(oldData);\n\t\t_routes.TryRemove(route.ServiceId, out _);\n\t\tOnChanged(new ChangedRouteEventArgs(null, route));\n\t\treturn;\n\t}\n\n\tvar oldRoute = await _routeProvider.GetRoute(oldData);\n\tvar newRoute = await _routeProvider.GetRoute(newData);\n\n\tif (oldRoute.Equals(newRoute)) {\n\t\treturn;\n\t}\n\n\t_routes.AddOrUpdate(oldRoute.ServiceId, oldRoute, (key, value) => newRoute);\n\tOnChanged(new ChangedRouteEventArgs(newRoute, oldRoute));\n}", "CodeBleu_score": 33.468418292198486}, {"code": "public async Task NodeChange(byte[] oldData, byte[] newData){\n\t\tif (oldData == null && newData == null) {\n\t\treturn;\n\t}\n\tif (oldData!= null && oldData.Length == 0) {\n\t\treturn;\n\t}\n\tif (newData!= null && newData.Length == 0) {\n\t\treturn;\n\t}\n\tif (oldData!= null && oldData.SequenceEqual(newData)) {\n\t\treturn;\n\t}\n\tvar oldRoute = GetRoute(oldData);\n\tvar newRoute = GetRoute(newData);\n\tif (oldRoute!= null && newRoute!= null) {\n\t\tif (oldRoute.Equals(newRoute)) {\n\t\t\treturn;\n\t\t}\n\t\tlock (_routes) {\n\t\t\t_routes.Remove(oldRoute);\n\t\t\t_routes.Add(newRoute);\n\t\t}\n\t\t_onChanged?.Invoke(newRoute, oldRoute);\n\t}\n}", "CodeBleu_score": 27.50467710388589}]}
{"instance_id": "af01261d3199", "generation_result": [{"code": "public override async Task SetSubscribersAsync(IEnumerable<ServiceSubscriber> subscribers){\n\t\tvar newSubscribers = new List<ServiceSubscriber>();\n\tvar oldSubscribers = new List<ServiceSubscriber>();\n\tforeach (var subscriber in subscribers) {\n\t\tif (subscriber.IsNew) {\n\t\t\tnewSubscribers.Add(subscriber);\n\t\t} else {\n\t\t\toldSubscribers.Add(subscriber);\n\t\t}\n\t}\n\tvar newSubscribersResult = await SetSubscribersAsync(newSubscribers);\n\tvar oldSubscribersResult = await SetSubscribersAsync(oldSubscribers);\n\tif (newSubscribersResult!= null) {\n\t\tnewSubscribers.AddRange(newSubscribersResult);\n\t}\n\tif (oldSubscribersResult!= null) {\n\t\toldSubscribers.AddRange(oldSubscribersResult);\n\t}\n\tvar newSubscribersList = newSubscribers.ToList();\n\tvar oldSubscribersList = oldSubscribers.ToList();\n\tif (newSubscribersList.Count > 0) {\n\t\tawait this.SetSubscribersAsync(newSubscribersList);\n\t}\n\tif (oldSubscribersList.Count > 0) {\n\t\tawait this.SetSubscribersAsync(oldSubscribersList);\n\t}\n}", "CodeBleu_score": 31.557784430138753}, {"code": "public override async Task SetSubscribersAsync(IEnumerable<ServiceSubscriber> subscribers){\n\t\tvar newSubscribers = new List<ServiceSubscriber>();\n\tvar existingSubscribers = new List<ServiceSubscriber>();\n\tforeach (var subscriber in subscribers) {\n\t\tif (subscriber.Addresses.Count == 0) {\n\t\t\texistingSubscribers.Add(subscriber);\n\t\t} else {\n\t\t\tnewSubscribers.Add(subscriber);\n\t\t}\n\t}\n\tawait base.SetSubscribersAsync(newSubscribers);\n\tawait base.SetSubscribersAsync(existingSubscribers);\n}", "CodeBleu_score": 32.09400280347462}, {"code": "public override async Task SetSubscribersAsync(IEnumerable<ServiceSubscriber> subscribers){\n\t\tvar newSubscribers = subscribers.ToList();\n\tvar existingSubscribers = await _subscriberRepository.GetSubscribersAsync(newSubscribers.Select(s => s.ServiceId).ToList());\n\tvar newSubscribersWithAddress = newSubscribers.Select(s => {\n\t\tvar existingSubscriber = existingSubscribers.FirstOrDefault(es => es.ServiceId == s.ServiceId);\n\t\tif (existingSubscriber == null) {\n\t\t\treturn s;\n\t\t}\n\t\ts.Addresses = existingSubscriber.Addresses.Union(s.Addresses).ToList();\n\t\treturn s;\n\t}).ToList();\n\tawait base.SetSubscribersAsync(newSubscribersWithAddress);\n}", "CodeBleu_score": 27.03896401049015}]}
{"instance_id": "fda02cec3296", "generation_result": [{"code": "private async Task<ServiceSubscriber[]> GetSubscribers(IEnumerable<string> childrens){\n\t\tvar subscribers = new List<ServiceSubscriber>();\n\tvar rootPath = $\"{_zkConfig.RootPath}/{_serviceName}\";\n\tif (childrens.Any()) {\n\t\tforeach (var child in childrens) {\n\t\t\tvar path = $\"{rootPath}/{child}\";\n\t\t\tvar subscriber = await GetSubscriber(path);\n\t\t\tif (subscriber!= null) {\n\t\t\t\tsubscribers.Add(subscriber);\n\t\t\t}\n\t\t}\n\t}\n\treturn subscribers.ToArray();\n}", "CodeBleu_score": 36.270940934971904}, {"code": "private async Task<ServiceSubscriber[]> GetSubscribers(IEnumerable<string> childrens){\n\t\tvar subscribers = new List<ServiceSubscriber>();\n\tvar path = GetSubscribersPath();\n\tforeach (var child in childrens) {\n\t\tvar nodePath = path + child;\n\t\tvar subscriber = await GetSubscriber(nodePath);\n\t\tif (subscriber!= null) {\n\t\t\tsubscribers.Add(subscriber);\n\t\t\tif (_logger.IsEnabled(LogLevel.Debug)) {\n\t\t\t\t_logger.LogDebug($\"Subscriber found: {subscriber.ToString()}\");\n\t\t\t}\n\t\t}\n\t}\n\treturn subscribers.ToArray();\n}", "CodeBleu_score": 40.542013534811}, {"code": "private async Task<ServiceSubscriber[]> GetSubscribers(IEnumerable<string> childrens){\n\t\tvar subscribers = new List<ServiceSubscriber>();\n\tvar rootPath = GetRootPath();\n\tif (string.IsNullOrEmpty(rootPath)) {\n\t\treturn subscribers.ToArray();\n\t}\n\tforeach (var child in childrens) {\n\t\tvar nodePath = GetNodePath(child);\n\t\tif (string.IsNullOrEmpty(nodePath)) {\n\t\t\tcontinue;\n\t\t}\n\t\tvar subscriber = await GetSubscriber(nodePath);\n\t\tif (subscriber!= null) {\n\t\t\tsubscribers.Add(subscriber);\n\t\t}\n\t}\n\treturn subscribers.ToArray();\n}", "CodeBleu_score": 41.30414038215665}]}
{"instance_id": "6c3018ff0c0d", "generation_result": [{"code": "private async Task EnterSubscribers(){\n\tif (_subscribers!= null) return;\nvar client = await _zkClientFactory.CreateAsync(new ZkClientConfiguration {\nConnectionTimeout = _connectionTimeout,\nSessionTimeout = _sessionTimeout,\nLogger = _logger,\nWatcherProvider = _watcherProvider\n});\nawait client.ConnectAsync();\nif (!await client.ExistsAsync(_subscriberPath)) {\n_logger.LogWarning($\"The subscriber path {_subscriberPath} does not exist.\");\nreturn;\n}\nvar children = await client.GetChildrenAsync(_subscriberPath);\nvar tasks = new List<Task>();\nforeach (var child in children) {\nvar subscriber = await client.GetDataAsync($\"{_subscriberPath}/{child}\");\n_subscribers.Add(child, subscriber);\n}\n}", "CodeBleu_score": 24.435265003459545}, {"code": "private async Task EnterSubscribers(){\n\tif (_subscribers!= null) return;\nvar client = await GetClient();\nawait client.WaitUntilConnected();\nvar subscribersPath = Path.Combine(ServicePath, \"subscribers\");\nvar subscribersExists = await client.ExistsAsync(subscribersPath);\nif (subscribersExists) {\nvar children = await client.GetChildrenAsync(subscribersPath);\n_subscribers = new Dictionary<string, SubscriberData>(children.Count);\nforeach (var child in children) {\nvar data = await client.GetDataAsync(Path.Combine(subscribersPath, child));\n_subscribers.Add(child, DeserializeSubscriberData(data));\n}\n} else {\n_subscribers = new Dictionary<string, SubscriberData>();\n_logger.LogWarning($\"Subscribers path {subscribersPath} does not exist. No subscribers will be loaded.\");\n}\n}", "CodeBleu_score": 35.24336722505376}, {"code": "private async Task EnterSubscribers(){\n\tif (_subscribers!= null)\nreturn;\nawait _lock.WaitAsync();\ntry {\nif (_subscribers!= null)\nreturn;\n_subscribers = new List<Subscriber>();\nvar client = await _clientProvider.GetClient();\nawait client.WaitUntilConnectedAsync();\nvar path = $\"{_options.Path}/subscribers\";\nvar exists = await client.ExistsAsync(path);\nif (exists) {\nvar children = await client.GetChildrenAsync(path);\nforeach (var child in children) {\nvar data = await client.GetDataAsync(path + \"/\" + child);\n_subscribers.Add(new Subscriber(child, data));\n}\n}\nelse {\n_logger.LogWarning($\"The subscriber path {path} does not exist.\");\n}\n}\nfinally {\n_lock.Release();\n}\n}", "CodeBleu_score": 32.795988297101246}]}
{"instance_id": "60ff973ba60a", "generation_result": [{"code": "public void NodeChange(byte[] oldData, byte[] newData){\n\t\tvar oldCommand = _serializer.Deserialize<ServiceCommand>(oldData);\n\tvar newCommand = _serializer.Deserialize<ServiceCommand>(newData);\n\tif (oldCommand!= null && newCommand!= null && oldCommand.ServiceId == newCommand.ServiceId) {\n\t\t_serviceCommands.Remove(oldCommand);\n\t\t_serviceCommands.Add(newCommand);\n\t\t_logger.LogInformation($\"NodeChange: {_serviceCommands.Count}\");\n\t\tOnChanged?.Invoke(oldCommand, newCommand);\n\t}\n}", "CodeBleu_score": 24.803091947585614}, {"code": "public void NodeChange(byte[] oldData, byte[] newData){\n\t\tif (oldData!= null && oldData.Length > 0 && newData!= null && newData.Length > 0) {\n\t\tvar oldCommand = _serializer.Deserialize<ServiceCommand>(oldData);\n\t\tvar newCommand = _serializer.Deserialize<ServiceCommand>(newData);\n\t\tif (oldCommand.ServiceId!= newCommand.ServiceId) {\n\t\t\t_logger.LogWarning(\"The service ID of the old command and the new command are different, which is not allowed.\");\n\t\t\treturn;\n\t\t}\n\t\tif (oldCommand.ServiceId!= _serviceId) {\n\t\t\t_logger.LogWarning(\"The service ID of the old command and the current service ID are different, which is not allowed.\");\n\t\t\treturn;\n\t\t}\n\t\tvar oldCommandList = _serviceCommands.Where(x => x.ServiceId == oldCommand.ServiceId).ToList();\n\t\tvar newCommandList = _serviceCommands.Where(x => x.ServiceId == newCommand.ServiceId).ToList();\n\t\tif (oldCommandList.Count > 0) {\n\t\t\t_serviceCommands.Remove(oldCommandList[0]);\n\t\t}\n\t\tif (newCommandList.Count > 0) {\n\t\t\t_serviceCommands.Add(newCommandList[0]);\n\t\t}\n\t\t_logger.LogInformation($\"The service command of service {newCommand.ServiceId} has been changed.\");\n\t\tOnChanged(oldCommand, newCommand);\n\t}\n}", "CodeBleu_score": 33.06744552910595}, {"code": "public void NodeChange(byte[] oldData, byte[] newData){\n\t\tif (oldData == null) {\n\t\tif (newData!= null) {\n\t\t\tvar serviceCommand = this.DeserializeServiceCommand(newData);\n\t\t\tthis.AddServiceCommand(serviceCommand);\n\t\t\tthis.OnChanged(serviceCommand, null);\n\t\t}\n\t}\n\telse {\n\t\tif (newData == null) {\n\t\t\tvar serviceCommand = this.DeserializeServiceCommand(oldData);\n\t\t\tthis.RemoveServiceCommand(serviceCommand);\n\t\t\tthis.OnChanged(null, serviceCommand);\n\t\t}\n\t\telse {\n\t\t\tvar serviceCommand = this.DeserializeServiceCommand(newData);\n\t\t\tthis.UpdateServiceCommand(serviceCommand);\n\t\t\tthis.OnChanged(serviceCommand, null);\n\t\t}\n\t}\n}", "CodeBleu_score": 17.341151322627095}]}
{"instance_id": "4597b75f2b3d", "generation_result": [{"code": "protected override async Task ProcessImpl(WatchedEvent watchedEvent){\n\t\tif (watchedEvent.Type == EventType.NodeDataChanged) {\n\t\tvar data = await _client.GetDataAsync(watchedEvent.Path);\n\t\tawait _action(data, _client.GetDataAsync(watchedEvent.Path));\n\t}\n}", "CodeBleu_score": 39.48430697494004}, {"code": "protected override async Task ProcessImpl(WatchedEvent watchedEvent){\n\t\tif (watchedEvent.Type == EventType.NodeDataChanged) {\n\t\ttry {\n\t\t\t// Retrieve the updated data from the node asynchronously\n\t\t\tvar data = await _client.GetDataAsync(_path, false, watchedEvent.WatchedEvent.Watcher);\n\t\t\t// Execute the specified action with the current and new data\n\t\t\t_action(data);\n\t\t\t// Update the watcher with the new data\n\t\t\t_client.ExistsAsync(_path, false, watchedEvent.WatchedEvent.Watcher);\n\t\t} catch (KeeperException.NoNodeException) {\n\t\t\t// Handle the case when the node is deleted\n\t\t}\n\t}\n}", "CodeBleu_score": 19.36267986698802}, {"code": "protected override async Task ProcessImpl(WatchedEvent watchedEvent){\n\t\t// The ProcessImpl function handles watched events in a ZooKeeper node.\n\t// When a NodeDataChanged event occurs, it retrieves the updated data from the node asynchronously using a ZooKeeper client.\n\t// It then executes a specified action with the current and new data, and updates the watcher with the new data.\n\t// The ProcessImpl function is called by the ZooKeeper client when a watched event occurs.\n\t// The ProcessImpl function is an abstract method in the ZooKeeperWatcher class, and it is overridden in the ZooKeeperWatcherImpl class.\n\t// The ProcessImpl function is called by the ZooKeeper client when a watched event occurs.\n\t// The ProcessImpl function is an abstract method in the ZooKeeperWatcher class, and it is overridden in the ZooKeeperWatcherImpl class.\n\t// The ProcessImpl function is called by the ZooKeeper client when a watched event occurs.\n\t// The ProcessImpl function is an abstract method in the ZooKeeperWatcher class, and it is overridden in the ZooKeeperWatcherImpl class.\n\t// The ProcessImpl function is called by the ZooKeeper client when a watched event occurs.\n\t// The ProcessImpl function is an abstract method in the ZooKeeperWatcher class, and it is overridden in the ZooKeeperWatcherImpl class.\n\t// The ProcessImpl function is called by the ZooKeeper client when a watched event occurs.\n\t// The ProcessImpl function is an abstract method in the ZooKeeperWatcher class, and it is overridden in the ZooKeeperWatcherImpl class.\n\t// The ProcessImpl function is called by the ZooKeeper client when a watched event occurs.\n\t// The ProcessImpl function is an abstract method in the ZooKeeperWatcher class, and it is overridden in the ZooKeeperWatcherImpl class.\n\t// The ProcessImpl function is called by the ZooKeeper client when a watched event occurs.\n\t// The ProcessImpl function is an abstract method in the ZooKeeperWatcher class, and it is overridden in the ZooKeeperWatcherImpl class.\n\t// The ProcessImpl function is called by the ZooKeeper client when a watched event occurs.\n\t// The ProcessImpl function is an abstract method in the ZooKeeperWatcher class, and it is overridden in the ZooKeeperWatcherImpl class.\n\t// The ProcessImpl function is called by the", "CodeBleu_score": 1.9633378493461278}]}
{"instance_id": "cb4f0e22a0d5", "generation_result": [{"code": "public static IServiceBuilder UseZookeeperClientProvider(this IServiceBuilder builder, ConfigInfo configInfo){\n\t\tvar serviceCollection = builder.Services;\n\tvar configuration = builder.Configuration;\n\tvar loggerFactory = builder.LoggerFactory;\n\tvar serviceProvider = builder.ServiceProvider;\n\tvar serviceDescriptor = serviceCollection.FirstOrDefault(x => x.ServiceType == typeof(IZookeeperClientProvider));\n\tif (serviceDescriptor!= null) {\n\t\tserviceCollection.Remove(serviceDescriptor);\n\t}\n\tserviceCollection.AddSingleton<IZookeeperClientProvider>(new DefaultZookeeperClientProvider(configInfo, loggerFactory, serviceProvider));\n\treturn builder;\n}", "CodeBleu_score": 36.79810112849003}, {"code": "public static IServiceBuilder UseZookeeperClientProvider(this IServiceBuilder builder, ConfigInfo configInfo){\n\t\treturn builder.UseZookeeperClientProvider(configInfo, null);\n}", "CodeBleu_score": 10.619138853469218}, {"code": "public static IServiceBuilder UseZookeeperClientProvider(this IServiceBuilder builder, ConfigInfo configInfo){\n\t\tif (builder == null)\n\t\tthrow new ArgumentNullException(nameof(builder));\n\n\tif (configInfo == null)\n\t\tthrow new ArgumentNullException(nameof(configInfo));\n\n\tbuilder.Services.AddSingleton<IServiceBuilder>(builder);\n\tbuilder.Services.AddSingleton<IZookeeperClientProvider>(new DefaultZookeeperClientProvider(builder, configInfo));\n\treturn builder;\n}", "CodeBleu_score": 45.1320653161151}]}
{"instance_id": "80709a4b2b69", "generation_result": [{"code": "protected override async Task SetRoutesAsync(IEnumerable<MqttServiceDescriptor> routes){\n\t\t_logger.LogInformation(\"Starting to set routes in ZooKeeper.\");\n\ttry {\n\t\tvar clients = await GetClientsAsync();\n\t\tforeach (var client in clients) {\n\t\t\tawait SetRoutesAsync(routes, client);\n\t\t}\n\t}\n\tcatch (Exception ex) {\n\t\t_logger.LogError(ex, \"Error while setting routes in ZooKeeper.\");\n\t\tthrow;\n\t}\n\t_logger.LogInformation(\"Successfully set routes in ZooKeeper.\");\n}", "CodeBleu_score": 18.385746723710884}, {"code": "protected override async Task SetRoutesAsync(IEnumerable<MqttServiceDescriptor> routes){\n\t\tvar logger = _loggerFactory.CreateLogger(GetType());\n\tlogger.LogInformation(\"Setting routes...\");\n\n\tvar clients = await GetClientsAsync();\n\tlogger.LogInformation(\"Clients: {0}\", clients.Count);\n\n\tforeach (var client in clients) {\n\t\tvar clientLogger = logger.CreateScope($\"Client: {client.Name}\");\n\n\t\tvar clientRoutes = routes.Where(x => x.Client == client.Name).ToList();\n\t\tvar clientRouteCount = clientRoutes.Count;\n\t\tclientLogger.LogInformation(\"Routes: {0}\", clientRouteCount);\n\n\t\tvar path = Path.Combine(client.RoutePath, client.Name);\n\t\tawait CreatePathAsync(path);\n\n\t\tforeach (var route in clientRoutes) {\n\t\t\tvar routeLogger = clientLogger.CreateScope($\"Route: {route.Route}\");\n\t\t\tvar routePath = Path.Combine(path, route.Route);\n\n\t\t\tvar data = _serializer.Serialize(route);\n\t\t\tawait CreateOrUpdateNodeAsync(routePath, data);\n\n\t\t\trouteLogger.LogInformation(\"Created/Updated route node: {0}\", routePath);\n\t\t}\n\n\t\tclientLogger.LogInformation(\"Set routes for client: {0}\", client.Name);\n\t}\n\n\tlogger.LogInformation(\"Set routes\");\n}", "CodeBleu_score": 29.35327225968943}, {"code": "protected override async Task SetRoutesAsync(IEnumerable<MqttServiceDescriptor> routes){\n\t\tvar logger = this.GetLogger<ZooKeeperMqttService>();\n\n\tlogger.LogInformation(\"Setting up MQTT service routes in ZooKeeper.\");\n\n\tvar clients = await this.GetClientsAsync();\n\n\tforeach (var client in clients) {\n\t\tlogger.LogInformation(\"Setting up routes for client {ClientName}.\", client.Name);\n\n\t\tvar clientRoutes = routes.Where(r => r.ClientName == client.Name).ToList();\n\n\t\tif (clientRoutes.Count == 0) {\n\t\t\tlogger.LogInformation(\"No routes found for client {ClientName}.\", client.Name);\n\t\t\tcontinue;\n\t\t}\n\n\t\tvar clientPath = this.GetClientPath(client.Name);\n\n\t\tif (!client.Exists(clientPath)) {\n\t\t\tawait client.CreateAsync(clientPath, true);\n\t\t}\n\n\t\tforeach (var route in clientRoutes) {\n\t\t\tvar routePath = this.GetRoutePath(client.Name, route.Route);\n\n\t\t\tif (!client.Exists(routePath)) {\n\t\t\t\tawait client.CreateAsync(routePath, true);\n\t\t\t}\n\n\t\t\tawait client.SetDataAsync(routePath, this.GetRouteData(route));\n\t\t}\n\t}\n\n\tlogger.LogInformation(\"MQTT service routes successfully set up in ZooKeeper.\");\n}", "CodeBleu_score": 35.15730141283158}]}
{"instance_id": "69ff4d3427cd", "generation_result": [{"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<MqttServiceRoute> routes, AddressModel hostAddr){\n\t\tvar clientList = await GetClientsAsync();\n\tforeach (var client in clientList) {\n\t\tvar clientRoutes = await GetRoutesAsync(client);\n\t\tvar routesToDelete = clientRoutes.Where(x =>!routes.Any(r => r.Address.Equals(x.Address))).ToList();\n\t\tforeach (var route in routesToDelete) {\n\t\t\tif (route.Address.Host.Equals(hostAddr.Host)) {\n\t\t\t\tawait DeleteRouteAsync(client, route.Address);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 23.15620892188725}, {"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<MqttServiceRoute> routes, AddressModel hostAddr){\n\t\tvar path = GetPath(hostAddr);\n\tvar clients = await GetClients();\n\tforeach (var client in clients) {\n\t\tvar routesInZk = await GetRoutesInZk(client);\n\t\tvar routesToDel = routesInZk.Where(route =>!routes.Any(r => r.RoutePath == route.RoutePath)).ToList();\n\t\tforeach (var route in routesToDel) {\n\t\t\tif (route.Addresses.Any(a => a.Host == hostAddr.Host)) {\n\t\t\t\tawait client.DeleteAsync(path + route.RoutePath);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 24.95859848829547}, {"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<MqttServiceRoute> routes, AddressModel hostAddr){\n\t\tvar routePath = GetRoutePath(hostAddr);\n\tvar zookeeperClients = await _zookeeperClientProvider.GetZookeeperClientsAsync();\n\tforeach (var zookeeperClient in zookeeperClients) {\n\t\tvar currentRoutes = await zookeeperClient.GetChildrenAsync(routePath);\n\t\tvar routesTobeDeleted = currentRoutes.Where(x =>!routes.Any(y => y.Address.ToString() == x)).ToList();\n\t\tforeach (var routeTobeDeleted in routesTobeDeleted) {\n\t\t\tawait zookeeperClient.DeleteAsync(routePath + \"/\" + routeTobeDeleted);\n\t\t}\n\t}\n}", "CodeBleu_score": 26.492034137101996}]}
{"instance_id": "8856055e4872", "generation_result": [{"code": "public override async Task SetCachesAsync(IEnumerable<ServiceCacheDescriptor> cacheDescriptors){\n\t\tvar logger = _loggerFactory.CreateLogger(typeof(ZookeeperCacheProvider));\n\tlogger.LogInformation(\"Start to set caches.\");\n\tvar zookeeperClients = _zookeeperClientFactory.GetClients();\n\tforeach (var zookeeperClient in zookeeperClients) {\n\t\tvar cachePath = $\"{_options.Zookeeper.ZookeeperRoot}/{zookeeperClient.ClientId}\";\n\t\tvar cacheNodes = zookeeperClient.GetChildrenAsync(cachePath).Result;\n\t\tforeach (var cacheDescriptor in cacheDescriptors) {\n\t\t\tvar cacheNode = cacheNodes.FirstOrDefault(x => x == cacheDescriptor.Name);\n\t\t\tvar cacheData = cacheDescriptor.Serialize();\n\t\t\tif (cacheNode == null) {\n\t\t\t\tlogger.LogInformation($\"Create cache node:{cacheDescriptor.Name}.\");\n\t\t\t\tawait zookeeperClient.CreateAsync(cachePath, cacheData, CreateMode.Persistent);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvar cacheNodeData = zookeeperClient.GetDataAsync(cachePath, cacheNode).Result;\n\t\t\t\tif (cacheNodeData!= cacheData) {\n\t\t\t\t\tlogger.LogInformation($\"Update cache node:{cacheDescriptor.Name}.\");\n\t\t\t\t\tawait zookeeperClient.SetDataAsync(cachePath, cacheNode, cacheData);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tlogger.LogInformation(\"Set caches successfully.\");\n}", "CodeBleu_score": 38.40724152124369}, {"code": "public override async Task SetCachesAsync(IEnumerable<ServiceCacheDescriptor> cacheDescriptors){\n\t\tif (cacheDescriptors == null) {\n\t\tthrow new ArgumentNullException(nameof(cacheDescriptors));\n\t}\n\n\tvar logger = _loggerFactory.CreateLogger(this.GetType());\n\tvar cachePath = _configuration.CachePath;\n\tvar clients = _clientProvider.GetClients();\n\tvar cachePathExists = false;\n\tvar cacheDescriptorsUpdated = new List<ServiceCacheDescriptor>();\n\tforeach (var client in clients) {\n\t\ttry {\n\t\t\tcachePathExists = await client.ExistsAsync(cachePath);\n\t\t\tif (cachePathExists) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} catch (Exception ex) {\n\t\t\tlogger.LogError(ex, $\"Failed to check cache path existence in Zookeeper: {cachePath}\");\n\t\t}\n\t}\n\n\tif (!cachePathExists) {\n\t\ttry {\n\t\t\tawait client.CreateAsync(cachePath, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\t\t} catch (Exception ex) {\n\t\t\tlogger.LogError(ex, $\"Failed to create cache path in Zookeeper: {cachePath}\");\n\t\t}\n\t}\n\n\tforeach (var cacheDescriptor in cacheDescriptors) {\n\t\tvar cacheDescriptorBytes = _serializer.Serialize(cacheDescriptor);\n\t\tvar cacheDescriptorPath = $\"{cachePath}/{cacheDescriptor.ServiceKey}\";\n\t\tvar cacheDescriptorExists = false;\n\t\tforeach (var client in clients) {\n\t\t\ttry {\n\t\t\t\tcacheDescriptorExists = await client.ExistsAsync(cacheDescriptorPath);\n\t\t\t\tif (cacheDescriptorExists) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} catch (Exception ex) {\n\t\t\t\tlogger.LogError(ex, $\"Failed to check cache descriptor existence in Zookeeper: {cacheDescriptorPath}\");\n\t\t\t}\n\t\t}\n\n\t\tif (!cacheDescriptorExists) {\n\t\t\ttry {\n\t\t\t\tawait client.CreateAsync(cacheDescriptorPath, cacheDescriptorBytes, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\t\t\t\tcacheDescriptorsUpdated.Add(cacheDescriptor);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tlogger.LogError(ex, $\"Failed to create cache descriptor in Zookeeper: {cacheDescriptorPath}\");\n\t\t\t}\n\t\t} else {\n\t\t\tvar cacheDescriptorBytesFromZookeeper = await client.GetDataAsync(cacheDescriptorPath", "CodeBleu_score": 40.563697222295986}, {"code": "public override async Task SetCachesAsync(IEnumerable<ServiceCacheDescriptor> cacheDescriptors){\n\t\tif (cacheDescriptors == null) {\n\t\tthrow new ArgumentNullException(nameof(cacheDescriptors));\n\t}\n\tif (cacheDescriptors.Count() == 0) {\n\t\treturn;\n\t}\n\tvar cachePath = GetCachePath();\n\tvar zookeeperClients = GetZookeeperClients();\n\tforeach (var client in zookeeperClients) {\n\t\tvar exists = await client.ExistsAsync(cachePath);\n\t\tif (exists.Result == null) {\n\t\t\tawait client.CreateAsync(cachePath, null, Ids.OPEN_ACL_UNSAFE, CreateMode.Persistent);\n\t\t}\n\t\tforeach (var descriptor in cacheDescriptors) {\n\t\t\tvar descriptorBytes = _serializer.Serialize(descriptor);\n\t\t\tvar nodePath = GetNodePath(descriptor.CacheName);\n\t\t\tvar existsNode = await client.ExistsAsync(nodePath);\n\t\t\tif (existsNode.Result == null) {\n\t\t\t\tawait client.CreateAsync(nodePath, descriptorBytes, Ids.OPEN_ACL_UNSAFE, CreateMode.Persistent);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tawait client.SetDataAsync(nodePath, descriptorBytes);\n\t\t\t}\n\t\t}\n\t}\n\t_logger.LogInformation($\"Successfully added service caches to Zookeeper: {cachePath}\");\n}", "CodeBleu_score": 33.542653528251066}]}
{"instance_id": "57d92c17de83", "generation_result": [{"code": "private async Task CreateSubdirectory((ManualResetEvent, ZooKeeper) zooKeeper, string path){\n\t\tif (path == null) {\n\t\tthrow new ArgumentNullException(nameof(path));\n\t}\n\tif (path.Length == 0) {\n\t\tthrow new ArgumentException(\"Path cannot be empty.\", nameof(path));\n\t}\n\tif (path.IndexOf('/')!= 0) {\n\t\tthrow new ArgumentException(\"Path must start with a forward slash.\", nameof(path));\n\t}\n\tif (path.LastIndexOf('/')!= path.Length - 1) {\n\t\tthrow new ArgumentException(\"Path must end with a forward slash.\", nameof(path));\n\t}\n\tif (path.IndexOf('/', 1)!= -1) {\n\t\tthrow new ArgumentException(\"Path cannot contain consecutive forward slashes.\", nameof(path));\n\t}\n\tvar pathParts = path.Split('/');\n\tvar currentPath = string.Empty;\n\tfor (var i = 0; i < pathParts.Length; i++) {\n\t\tcurrentPath += pathParts[i] + '/';\n\t\tif (await zooKeeper.ExistsAsync(currentPath)) {\n\t\t\tcontinue;\n\t\t}\n\t\tawait zooKeeper.CreateAsync(currentPath, new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.Persistent);\n\t\t_logger.LogInformation(\"Created path: {Path}\", currentPath);\n\t}\n}", "CodeBleu_score": 42.23057147766283}, {"code": "private async Task CreateSubdirectory((ManualResetEvent, ZooKeeper) zooKeeper, string path){\n\t\tif (string.IsNullOrWhiteSpace(path)) {\n\t\tthrow new ArgumentNullException(nameof(path));\n\t}\n\n\tvar pathParts = path.Split(new[] { \"/\" }, StringSplitOptions.RemoveEmptyEntries);\n\tvar parentPath = \"/\";\n\n\tfor (var i = 0; i < pathParts.Length; i++) {\n\t\tvar pathPart = pathParts[i];\n\t\tvar fullPath = parentPath + pathPart;\n\n\t\tif (await zooKeeper.ExistsAsync(fullPath)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tawait zooKeeper.CreateAsync(fullPath, null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.Persistent);\n\t\tparentPath = fullPath;\n\t}\n}", "CodeBleu_score": 38.71716218368461}, {"code": "private async Task CreateSubdirectory((ManualResetEvent, ZooKeeper) zooKeeper, string path){\n\t\tif (string.IsNullOrEmpty(path)) {\n\t\tthrow new ArgumentNullException(nameof(path));\n\t}\n\n\tif (path.Contains(\"/\")) {\n\t\tthrow new ArgumentException(\"Path cannot contain slashes\", nameof(path));\n\t}\n\n\tif (path.StartsWith(\"/\")) {\n\t\tthrow new ArgumentException(\"Path cannot start with a slash\", nameof(path));\n\t}\n\n\tvar subpaths = path.Split('/');\n\tvar subpath = \"\";\n\tfor (var i = 0; i < subpaths.Length; i++) {\n\t\tsubpath = subpath + \"/\" + subpaths[i];\n\t\tif (await zooKeeper.ExistsAsync(subpath)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tawait zooKeeper.CreateAsync(subpath, Encoding.UTF8.GetBytes(\"\"));\n\t\tawait zooKeeper.SetACLAsync(subpath, new List<ACL>());\n\t}\n}", "CodeBleu_score": 37.4426503836611}]}
{"instance_id": "b276a07da453", "generation_result": [{"code": "public async ValueTask<IEnumerable<(ManualResetEvent, ZooKeeper)>> GetZooKeepers(){\n\t\tvar addresses = await GetAddresses();\n\tvar result = new List<(ManualResetEvent, ZooKeeper)>();\n\tvar healthCheckService = new HealthCheckService();\n\tforeach (var address in addresses) {\n\t\ttry {\n\t\t\tvar zk = new ZooKeeper(address.ToString(), new ZooKeeperConfiguration {\n\t\t\t\tSessionTimeout = _config.SessionTimeout,\n\t\t\t\tConnectionTimeout = _config.ConnectionTimeout,\n\t\t\t\tMaxRetries = _config.MaxRetries,\n\t\t\t\tRetryInterval = _config.RetryInterval\n\t\t\t});\n\t\t\tvar healthCheck = await healthCheckService.CheckHealthAsync(zk);\n\t\t\tif (healthCheck.IsHealthy) {\n\t\t\t\tvar manualResetEvent = new ManualResetEvent(false);\n\t\t\t\tresult.Add((manualResetEvent, zk));\n\t\t\t} else {\n\t\t\t\t_logger.LogWarning(\"The ZooKeeper instance at {Address} is unhealthy.\", address);\n\t\t\t}\n\t\t} catch (Exception ex) {\n\t\t\t_logger.LogWarning(ex, \"The ZooKeeper instance at {Address} is unhealthy.\", address);\n\t\t}\n\t}\n\treturn result;\n}", "CodeBleu_score": 58.056087581555815}, {"code": "public async ValueTask<IEnumerable<(ManualResetEvent, ZooKeeper)>> GetZooKeepers(){\n\t\tvar zooKeepers = new List<(ManualResetEvent, ZooKeeper)>();\n\tvar zooKeeperAddressList = this.ZooKeeperAddressResolver.GetZooKeeperAddressList();\n\tvar healthCheckService = this.HealthCheckService;\n\tvar logger = this.Logger;\n\tvar loggerFactory = this.LoggerFactory;\n\tvar zooKeeperConfiguration = this.ZooKeeperConfiguration;\n\tvar watcherProvider = this.WatcherProvider;\n\tvar zooKeeperAddressSelector = this.ZooKeeperAddressSelector;\n\tvar zooKeeperAddress = zooKeeperAddressSelector.GetZooKeeperAddress();\n\tvar zooKeeperAddressString = zooKeeperAddress.ToString();\n\tvar zooKeeperAddressListString = string.Join(\",\", zooKeeperAddressList);\n\tvar loggerName = $\"{typeof(ZooKeeperAddressResolver).FullName}.{nameof(GetZooKeepers)}\";\n\tlogger.LogDebug($\"[{loggerName}] Start to get ZooKeeper instances from address list [{zooKeeperAddressListString}].\");\n\tvar taskList = new List<Task>();\n\tforeach (var address in zooKeeperAddressList) {\n\t\tvar manualResetEvent = new ManualResetEvent(false);\n\t\tvar zooKeeper = new ZooKeeper(address, zooKeeperConfiguration.SessionTimeout, watcherProvider, loggerFactory);\n\t\ttaskList.Add(Task.Run(async () => {\n\t\t\ttry {\n\t\t\t\tawait zooKeeper.ConnectAsync();\n\t\t\t\tlogger.LogDebug($\"[{loggerName}] Get ZooKeeper instance [{zooKeeperAddressString}] successfully.\");\n\t\t\t\tzooKeepers.Add((manualResetEvent, zooKeeper));\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tlogger.LogError(ex, $\"[{loggerName}] Get ZooKeeper instance [{zooKeeperAddressString}] failed.\");\n\t\t\t\tmanualResetEvent.Set();\n\t\t\t}\n\t\t}));\n\t}\n\tawait Task.WhenAll(taskList);\n\tlogger.LogDebug($\"[{loggerName}] Get ZooKeeper instances from address list [{zooKeeperAddressListString}] successfully.\");\n\treturn zooKeepers;\n}", "CodeBleu_score": 50.36728571809831}, {"code": "public async ValueTask<IEnumerable<(ManualResetEvent, ZooKeeper)>> GetZooKeepers(){\n\t\tvar result = new List<(ManualResetEvent, ZooKeeper)>();\n\tvar addressList = await this.addressProvider.GetAddressesAsync();\n\tforeach (var address in addressList) {\n\t\tvar healthCheckService = new HealthCheckService(this.logger, this.configuration.HealthCheckInterval, this.configuration.HealthCheckTimeout, this.configuration.HealthCheckRetries);\n\t\tvar healthCheck = new ZooKeeperHealthCheck(healthCheckService, this.logger, address.ToString());\n\t\tvar healthCheckTask = healthCheck.CheckHealthAsync();\n\t\tvar zookeeper = new ZooKeeper(address, this.logger, this.configuration.SessionTimeout, this.configuration.ConnectionTimeout, this.configuration.MaxRetries, this.configuration.RetryInterval, this.configuration.SessionTimeout, this.configuration.ConnectionTimeout, this.configuration.MaxRetries, this.configuration.RetryInterval, this.configuration.SessionTimeout, this.configuration.ConnectionTimeout, this.configuration.MaxRetries, this.configuration.RetryInterval, this.configuration.SessionTimeout, this.configuration.ConnectionTimeout, this.configuration.MaxRetries, this.configuration.RetryInterval, this.configuration.SessionTimeout, this.configuration.ConnectionTimeout, this.configuration.MaxRetries, this.configuration.RetryInterval, this.configuration.SessionTimeout, this.configuration.ConnectionTimeout, this.configuration.MaxRetries, this.configuration.RetryInterval, this.configuration.SessionTimeout, this.configuration.ConnectionTimeout, this.configuration.MaxRetries, this.configuration.RetryInterval, this.configuration.SessionTimeout, this.configuration.ConnectionTimeout, this.configuration.MaxRetries, this.configuration.RetryInterval, this.configuration.SessionTimeout, this.configuration.ConnectionTimeout, this.configuration.MaxRetries, this.configuration.RetryInterval, this.configuration.SessionTimeout, this.configuration.ConnectionTimeout, this.configuration.MaxRetries, this.configuration.RetryInterval, this.configuration.SessionTimeout, this.configuration.ConnectionTimeout, this.configuration.MaxRetries, this.configuration.RetryInterval, this.configuration.SessionTimeout, this.configuration.ConnectionTimeout, this.configuration.MaxRetries, this.configuration.RetryInterval, this.configuration.SessionTimeout, this.configuration.ConnectionTimeout, this.configuration.MaxRetries, this.configuration.RetryInterval, this.configuration.SessionTimeout, this.configuration.ConnectionTimeout", "CodeBleu_score": 48.77882921803281}]}
{"instance_id": "dbb6463e7ee8", "generation_result": [{"code": "ZooKeeper getZooKeeper() throws Exception{\n\t\tif (zooKeeper!= null) {\n\t\treturn zooKeeper;\n\t}\n\tsynchronized (this) {\n\t\tif (zooKeeper!= null) {\n\t\t\treturn zooKeeper;\n\t\t}\n\t\tzooKeeper = new ZooKeeper(ensembleProvider.getConnectString(), sessionTimeout, new Watcher() {\n\t\t\tpublic void process(WatchedEvent event) {\n\t\t\t\tsynchronized (this) {\n\t\t\t\t\tif (zooKeeper!= null) {\n\t\t\t\t\t\tzooKeeper.close();\n\t\t\t\t\t}\n\t\t\t\t\tzooKeeper = null;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn zooKeeper;\n\t}\n}", "CodeBleu_score": 38.429813791356636}, {"code": "ZooKeeper getZooKeeper() throws Exception{\n\t\tZooKeeper zooKeeper = null;\n\tif (zooKeeper == null) {\n\t\tsynchronized (this) {\n\t\t\tif (zooKeeper == null) {\n\t\t\t\tzooKeeper = new ZooKeeper(ensembleProvider.getConnectionString(), ensembleProvider.getConnectionTimeout(), new Watcher() {\n\t\t\t\t\tpublic void process(WatchedEvent watchedEvent) {\n\t\t\t\t\t\t// do nothing\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\treturn zooKeeper;\n}", "CodeBleu_score": 36.91497157100443}, {"code": "ZooKeeper getZooKeeper() throws Exception{\n\t\tif (zk == null) {\n\t\tsynchronized (ZooKeeper.class) {\n\t\t\tif (zk == null) {\n\t\t\t\tzk = new ZooKeeper(ensembleProvider.getConnectionString(), ensembleProvider.getConnectionTimeout(), new Watcher() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void process(WatchedEvent event) {\n\t\t\t\t\t\tif (event.getState() == Event.KeeperState.SyncConnected) {\n\t\t\t\t\t\t\tHelper.this.event.set(true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\twhile (!event.get()) {\n\t\t\t\t\tThread.sleep(100);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn zk;\n}", "CodeBleu_score": 34.644626773589714}]}
{"instance_id": "0d9f311aa482", "generation_result": [{"code": "private void internalClose(int waitForShutdownTimeoutMs) throws Exception{\n\t\tZooKeeper zooKeeper = null;\n\tif (this.zooKeeper!= null) {\n\t\tzooKeeper = this.zooKeeper;\n\t\tthis.zooKeeper = null;\n\t}\n\tif (zooKeeper!= null) {\n\t\tzooKeeper.close();\n\t}\n\tif (this.watcher!= null) {\n\t\tthis.watcher.close();\n\t\tthis.watcher = null;\n\t}\n\tif (this.watcher!= null) {\n\t\tthis.watcher.close();\n\t\tthis.watcher = null;\n\t}\n\tif (this.watcher!= null) {\n\t\tthis.watcher.close();\n\t\tthis.watcher = null;\n\t}\n\tif (this.watcher!= null) {\n\t\tthis.watcher.close();\n\t\tthis.watcher = null;\n\t}\n\tif (this.watcher!= null) {\n\t\tthis.watcher.close();\n\t\tthis.watcher = null;\n\t}\n\tif (this.watcher!= null) {\n\t\tthis.watcher.close();\n\t\tthis.watcher = null;\n\t}\n\tif (this.watcher!= null) {\n\t\tthis.watcher.close();\n\t\tthis.watcher = null;\n\t}\n\tif (this.watcher!= null) {\n\t\tthis.watcher.close();\n\t\tthis.watcher = null;\n\t}\n\tif (this.watcher!= null) {\n\t\tthis.watcher.close();\n\t\tthis.watcher = null;\n\t}\n\tif (this.watcher!= null) {\n\t\tthis.watcher.close();\n\t\tthis.watcher = null;\n\t}\n\tif (this.watcher!= null) {\n\t\tthis.watcher.close();\n\t\tthis.watcher = null;\n\t}\n\tif (this.watcher!= null) {\n\t\tthis.watcher.close();\n\t\tthis.watcher = null;\n\t}\n\tif (this.watcher!= null) {\n\t\tthis.watcher.close();\n\t\tthis.watcher = null;\n\t}\n\tif (this.watcher!= null) {\n\t\tthis.watcher.close();\n\t\tthis.watcher = null;\n\t}\n\tif (this.watcher!= null) {\n\t\tthis.watcher.close();\n\t\tthis.watcher = null;\n", "CodeBleu_score": 18.912326112061216}, {"code": "private void internalClose(int waitForShutdownTimeoutMs) throws Exception{\n\t\tif (this.zk!= null) {\n\t\tif (this.zkHelper!= null) {\n\t\t\tthis.zk = this.zkHelper.get();\n\t\t}\n\t\tif (this.zk!= null) {\n\t\t\tthis.zk.register(new Watcher() {\n\t\t\t\tpublic void process(WatchedEvent event) {\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (waitForShutdownTimeoutMs > 0) {\n\t\t\t\ttry {\n\t\t\t\t\tthis.zk.close(waitForShutdownTimeoutMs);\n\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\tThread.currentThread().interrupt();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.zk.close();\n\t\t\t}\n\t\t\tthis.zk = null;\n\t\t}\n\t}\n}", "CodeBleu_score": 31.457727674745918}, {"code": "private void internalClose(int waitForShutdownTimeoutMs) throws Exception{\n\t\tif (this.helper!= null) {\n\t\tZooKeeper zk = this.helper.getZooKeeper();\n\t\tif (zk!= null) {\n\t\t\ttry {\n\t\t\t\tif (this.helper.getWatcher()!= null) {\n\t\t\t\t\tthis.helper.getWatcher().close();\n\t\t\t\t\tthis.helper.setWatcher(null);\n\t\t\t\t}\n\t\t\t\tif (this.helper.getCloseCallback()!= null) {\n\t\t\t\t\tthis.helper.getCloseCallback().close();\n\t\t\t\t\tthis.helper.setCloseCallback(null);\n\t\t\t\t}\n\t\t\t\tif (this.helper.getReconnectionCallback()!= null) {\n\t\t\t\t\tthis.helper.getReconnectionCallback().close();\n\t\t\t\t\tthis.helper.setReconnectionCallback(null);\n\t\t\t\t}\n\t\t\t\tif (this.helper.getAuthProvider()!= null) {\n\t\t\t\t\tthis.helper.getAuthProvider().close();\n\t\t\t\t\tthis.helper.setAuthProvider(null);\n\t\t\t\t}\n\t\t\t\tif (this.helper.getEnsembleProvider()!= null) {\n\t\t\t\t\tthis.helper.getEnsembleProvider().close();\n\t\t\t\t\tthis.helper.setEnsembleProvider(null);\n\t\t\t\t}\n\t\t\t\tif (this.helper.getFactory()!= null) {\n\t\t\t\t\tthis.helper.getFactory().close();\n\t\t\t\t\tthis.helper.setFactory(null);\n\t\t\t\t}\n\t\t\t\tif (this.helper.getConnectString()!= null) {\n\t\t\t\t\tthis.helper.getConnectString().close();\n\t\t\t\t\tthis.helper.setConnectString(null);\n\t\t\t\t}\n\t\t\t\tif (this.helper.getDigest()!= null) {\n\t\t\t\t\tthis.helper.getDigest().close();\n\t\t\t\t\tthis.helper.setDigest(null);\n\t\t\t\t}\n\t\t\t\tif (this.helper.getDigestProvider()!= null) {\n\t\t\t\t\tthis.helper.getDigestProvider().close();\n\t\t\t\t\tthis.helper.setDigestProvider(null);\n\t\t\t\t}\n\t\t\t\tif (this.helper.getWatcher()!= null) {\n\t\t\t\t\tthis.helper.getWatcher().close();\n\t\t\t\t\tthis.helper.setWatcher(null);\n\t\t\t\t}\n\t\t\t\tif (this.helper.getCloseCallback()!= null) {\n\t\t\t\t\tthis.helper.getCloseCallback().close();\n\t\t\t\t\tthis.helper.setCloseCallback(null);\n\t\t\t\t}\n\t\t\t\tif (this.helper", "CodeBleu_score": 22.74062003368077}]}
{"instance_id": "d57ef4592303", "generation_result": [{"code": "public boolean blockUntilConnectedOrTimedOut() throws InterruptedException{\n\t\tfinal AtomicBoolean connected = new AtomicBoolean();\n\tfinal AtomicReference<Exception> exception = new AtomicReference<>();\n\tfinal CountDownLatch latch = new CountDownLatch(1);\n\tfinal TracerDriver tracerDriver = new DefaultTracerDriver() {\n\t\t@Override\n\t\tpublic void trace(final OperationTrace trace) {\n\t\t\tlog.debug(trace.toString());\n\t\t}\n\t};\n\tfinal ZookeeperFactory zookeeperFactory = new DefaultZookeeperFactory() {\n\t\t@Override\n\t\tpublic ZooKeeper create(final String connectionString, final int sessionTimeout, final Watcher watcher) throws IOException {\n\t\t\tfinal ZooKeeper zooKeeper = super.create(connectionString, sessionTimeout, watcher);\n\t\t\tzooKeeper.addAuthInfo(\"digest\", \"admin:admin\".getBytes());\n\t\t\treturn zooKeeper;\n\t\t}\n\t};\n\tfinal EnsembleProvider ensembleProvider = new FixedEnsembleProvider(new String[] { \"127.0.0.1:2181\" });\n\tfinal ZooKeeper zooKeeper = new ZooKeeper(ensembleProvider, 1000, new Watcher() {\n\t\t@Override\n\t\tpublic void process(final WatchedEvent event) {\n\t\t\tif (event.getState() == Event.KeeperState.SyncConnected) {\n\t\t\t\tconnected.set(true);\n\t\t\t\tlatch.countDown();\n\t\t\t} else {\n\t\t\t\tconnected.set(false);\n\t\t\t\tlatch.countDown();\n\t\t\t\texception.set(new IllegalStateException(\"Connection failed\"));\n\t\t\t}\n\t\t}\n\t}, tracerDriver, zookeeperFactory);\n\tPreconditions.checkState(ThreadUtils.blockUntilTrue(connected, 10, TimeUnit.SECONDS), \"Timed out waiting for connection\");\n\tif (exception.get()!= null) {\n\t\tthrow new IllegalStateException(\"Connection failed\", exception.get());\n\t}\n\treturn true;\n}", "CodeBleu_score": 29.528990784353347}, {"code": "public boolean blockUntilConnectedOrTimedOut() throws InterruptedException{\n\t\tfinal AtomicBoolean result = new AtomicBoolean(false);\n\tfinal AtomicReference<Exception> exception = new AtomicReference<Exception>();\n\tfinal CountDownLatch latch = new CountDownLatch(1);\n\tfinal ZooKeeper zooKeeper = this.zooKeeper;\n\tfinal OperationTrace trace = this.trace;\n\tfinal TracerDriver tracerDriver = this.tracerDriver;\n\tfinal Logger logger = this.logger;\n\tfinal EnsembleProvider ensembleProvider = this.ensembleProvider;\n\tfinal Watcher watcher = this.watcher;\n\tfinal ZookeeperFactory zookeeperFactory = this.zookeeperFactory;\n\tfinal ThreadUtils threadUtils = this.threadUtils;\n\tfinal AtomicBoolean started = this.started;\n\tfinal AtomicBoolean connected = this.connected;\n\tfinal AtomicBoolean closed = this.closed;\n\tfinal AtomicBoolean stopped = this.stopped;\n\tfinal AtomicBoolean terminated = this.terminated;\n\tfinal AtomicBoolean stoppedOrTerminated = this.stoppedOrTerminated;\n\tfinal AtomicBoolean stoppedOrTerminatedOrClosed = this.stoppedOrTerminatedOrClosed;\n\tfinal AtomicBoolean stoppedOrTerminatedOrClosedOrTerminated = this.stoppedOrTerminatedOrClosedOrTerminated;\n\tfinal AtomicBoolean stoppedOrTerminatedOrClosedOrTerminatedOrTerminated = this.stoppedOrTerminatedOrClosedOrTerminatedOrTerminated;\n\tfinal AtomicBoolean stoppedOrTerminatedOrClosedOrTerminatedOrTerminatedOrTerminated = this.stoppedOrTerminatedOrClosedOrTerminatedOrTerminatedOrTerminated;\n\tfinal AtomicBoolean stoppedOrTerminatedOrClosedOrTerminatedOrTerminatedOrTerminatedOrTerminated = this.stoppedOrTerminatedOrClosedOrTerminatedOrTerminatedOrTerminatedOrTerminated;\n\tfinal AtomicBoolean stoppedOrTerminatedOrClosedOrTerminatedOrTerminatedOrTerminatedOrTerminatedOrTerminated = this.stoppedOrTerminatedOrClosedOrTerminatedOrTerminatedOrTerminatedOrTerminatedOrTerminated;\n\tfinal AtomicBoolean stoppedOrTerminatedOrClosedOrTerminatedOrTerminatedOrTerminatedOrTerminatedOrTerminatedOrTerminated = this.stoppedOrTerminatedOrClosedOrTerminatedOrTerminatedOrTerminatedOrTerminatedOrTerminatedOrTerminated;\n\tfinal AtomicBoolean stoppedOrTerminatedOrClosedOrTerminatedOrTerminatedOrTerminatedOrTerminatedOrTerminatedOrTerminatedOrTerminated = this.stoppedOrTerminatedOrClosedOrTerminatedOrTerminatedOrTerminatedOrTerminatedOrTerminatedOrTerminatedOrTerminated;\n\tfinal AtomicBoolean stoppedOrTerminatedOrClosedOrTerminatedOrTerminatedOrTerminatedOrTerminatedOrTerminatedOrTerminatedOrTerminatedOrTerminated = this.stoppedOrTerminatedOr", "CodeBleu_score": 22.007776352525898}, {"code": "public boolean blockUntilConnectedOrTimedOut() throws InterruptedException{\n\t\tif (this.started.get()) {\n\t\treturn true;\n\t}\n\tlong start = System.currentTimeMillis();\n\tlong timeout = this.timeout.get();\n\tlong end = start + timeout;\n\twhile (!this.started.get()) {\n\t\tif (System.currentTimeMillis() > end) {\n\t\t\treturn false;\n\t\t}\n\t\tThreadUtils.yield();\n\t}\n\treturn true;\n}", "CodeBleu_score": 30.49444072598279}]}
{"instance_id": "d722f6d0beb6", "generation_result": [{"code": "public void close(int waitForShutdownTimeoutMs){\n\t\ttry {\n\t\tPreconditions.checkState(this.started.get(), \"Service is not started\");\n\t\tthis.started.set(false);\n\t\tthis.shutdownLatch.await(waitForShutdownTimeoutMs, TimeUnit.MILLISECONDS);\n\t\tthis.zk.close();\n\t} catch (InterruptedException e) {\n\t\tThread.currentThread().interrupt();\n\t\tlog.warn(\"Interrupted while waiting for shutdown\", e);\n\t} catch (IOException e) {\n\t\tif (Thread.interrupted()) {\n\t\t\tThread.currentThread().interrupt();\n\t\t}\n\t\tlog.error(\"Error while shutting down\", e);\n\t}\n}", "CodeBleu_score": 43.58748989308945}, {"code": "public void close(int waitForShutdownTimeoutMs){\n\t\tif (this.started.get()) {\n\t\tthis.started.set(false);\n\t\ttry {\n\t\t\tthis.closeLatch.await(waitForShutdownTimeoutMs, TimeUnit.MILLISECONDS);\n\t\t} catch (InterruptedException e) {\n\t\t\tThread.currentThread().interrupt();\n\t\t}\n\t\tif (this.started.get()) {\n\t\t\tLOGGER.warn(\"Failed to shutdown ZooKeeper client in {} ms\", waitForShutdownTimeoutMs);\n\t\t}\n\t}\n}", "CodeBleu_score": 39.8857446442117}, {"code": "public void close(int waitForShutdownTimeoutMs){\n\t\tif (this.started.compareAndSet(true, false)) {\n\t\tthis.logger.info(\"Shutting down ZooKeeper client\");\n\t\ttry {\n\t\t\tthis.client.close();\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\tif (!Thread.currentThread().isInterrupted()) {\n\t\t\t\tthis.logger.error(\"Error shutting down ZooKeeper client\", e);\n\t\t\t}\n\t\t}\n\t\tif (this.shutdownLatch.getCount() > 0L) {\n\t\t\ttry {\n\t\t\t\tthis.shutdownLatch.await(waitForShutdownTimeoutMs, TimeUnit.MILLISECONDS);\n\t\t\t}\n\t\t\tcatch (InterruptedException e) {\n\t\t\t\tThread.currentThread().interrupt();\n\t\t\t\tthis.logger.error(\"Interrupted while waiting for ZooKeeper client shutdown\", e);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 42.093009097023184}]}
{"instance_id": "8492e37ce46e", "generation_result": [{"code": "public void internalBlockUntilConnectedOrTimedOut() throws InterruptedException {\n\t\tfinal AtomicReference<ZooKeeper> zooKeeperRef = new AtomicReference<ZooKeeper>();\n\tfinal AtomicBoolean connectionEstablished = new AtomicBoolean();\n\tfinal AtomicBoolean connectionTimedOut = new AtomicBoolean();\n\tfinal AtomicBoolean connectionFailed = new AtomicBoolean();\n\tfinal CountDownLatch latch = new CountDownLatch(1);\n\tfinal AtomicBoolean running = new AtomicBoolean(true);\n\tfinal AtomicBoolean connected = new AtomicBoolean();\n\tfinal AtomicBoolean timedOut = new AtomicBoolean();\n\tfinal AtomicBoolean failed = new AtomicBoolean();\n\tfinal AtomicBoolean closed = new AtomicBoolean();\n\tfinal AtomicBoolean closedAndTimedOut = new AtomicBoolean();\n\tfinal AtomicBoolean closedAndFailed = new AtomicBoolean();\n\tfinal AtomicBoolean closedAndConnected = new AtomicBoolean();\n\tfinal AtomicBoolean closedAndTimedOutAndFailed = new AtomicBoolean();\n\tfinal AtomicBoolean closedAndTimedOutAndConnected = new AtomicBoolean();\n\tfinal AtomicBoolean closedAndTimedOutAndConnectedAndFailed = new AtomicBoolean();\n\tfinal AtomicBoolean closedAndTimedOutAndConnectedAndFailedAndConnected = new AtomicBoolean();\n\tfinal AtomicBoolean closedAndTimedOutAndConnectedAndFailedAndConnectedAndFailed = new AtomicBoolean();\n\tfinal AtomicBoolean closedAndTimedOutAndConnectedAndFailedAndConnectedAndFailedAndConnected = new AtomicBoolean();\n\tfinal AtomicBoolean closedAndTimedOutAndConnectedAndFailedAndConnectedAndFailedAndConnectedAndFailed = new AtomicBoolean();\n\tfinal AtomicBoolean closedAndTimedOutAndConnectedAndFailedAndConnectedAndFailedAndConnectedAndFailedAndConnected = new AtomicBoolean();\n\tfinal AtomicBoolean closedAndTimedOutAndConnectedAndFailedAndConnectedAndFailedAndConnectedAndFailedAndConnectedAndFailed = new AtomicBoolean();\n\tfinal AtomicBoolean closedAndTimedOutAndConnectedAndFailedAndConnectedAndFailedAndConnectedAndFailedAndConnectedAndFailedAndConnected = new AtomicBoolean();\n\tfinal AtomicBoolean closedAndTimedOutAndConnectedAndFailedAndConnectedAndFailedAndConnectedAndFailedAndConnectedAndFailedAndConnectedAndFailed = new AtomicBoolean();\n\tfinal AtomicBoolean closedAndTimedOutAndConnectedAndFailedAndConnectedAndFailedAndConnectedAndFailedAndConnectedAndFailedAndConnectedAndFailedAndConnected = new AtomicBoolean();\n\tfinal AtomicBoolean closedAndTimedOutAndConnectedAndFailedAndConnectedAndFailedAndConnectedAndFailedAndConnectedAndFailedAndConnectedAndFailedAndConnectedAndFailed = new AtomicBoolean", "CodeBleu_score": 11.622592590537757}, {"code": "public void internalBlockUntilConnectedOrTimedOut() throws InterruptedException {\n\t\tif (this.connectionState.compareAndSet(ConnectionState.DISCONNECTED, ConnectionState.CONNECTING)) {\n\t\tif (this.traceDriver!= null) {\n\t\t\tthis.traceDriver.trace(OperationTrace.Operation.CONNECT);\n\t\t}\n\n\t\ttry {\n\t\t\tthis.connect();\n\t\t} catch (Exception e) {\n\t\t\tthis.connectionState.set(ConnectionState.DISCONNECTED);\n\t\t\tthrow e;\n\t\t}\n\n\t\tthis.connectionState.set(ConnectionState.CONNECTED);\n\t}\n\n\tfinal AtomicBoolean timedOut = new AtomicBoolean(false);\n\tfinal AtomicReference<Throwable> failure = new AtomicReference<Throwable>();\n\tfinal CountDownLatch latch = new CountDownLatch(1);\n\tfinal AtomicBoolean done = new AtomicBoolean(false);\n\tfinal AtomicBoolean isConnected = new AtomicBoolean(false);\n\tfinal AtomicBoolean isDisconnected = new AtomicBoolean(false);\n\tfinal AtomicBoolean isReconnecting = new AtomicBoolean(false);\n\tfinal AtomicBoolean isReconnected = new AtomicBoolean(false);\n\tfinal AtomicBoolean isReconnectingOrReconnected = new AtomicBoolean(false);\n\tfinal AtomicBoolean isReconnectingOrReconnectedOrTimedOut = new AtomicBoolean(false);\n\tfinal AtomicBoolean isReconnectingOrReconnectedOrTimedOutOrDone = new AtomicBoolean(false);\n\tfinal AtomicBoolean isReconnectingOrReconnectedOrTimedOutOrDoneOrFailure = new AtomicBoolean(false);\n\tfinal AtomicBoolean isReconnectingOrReconnectedOrTimedOutOrDoneOrFailureOrConnected = new AtomicBoolean(false);\n\tfinal AtomicBoolean isReconnectingOrReconnectedOrTimedOutOrDoneOrFailureOrConnectedOrDisconnected = new AtomicBoolean(false);\n\tfinal AtomicBoolean isReconnectingOrReconnectedOrTimedOutOrDoneOrFailureOrConnectedOrDisconnectedOrReconnecting = new AtomicBoolean(false);\n\tfinal AtomicBoolean isReconnectingOrReconnectedOrTimedOutOrDoneOrFailureOrConnectedOrDisconnectedOrReconnectingOrReconnected = new AtomicBoolean(false);\n\tfinal AtomicBoolean isReconnectingOrReconnectedOrTimedOutOrDoneOrFailureOrConnectedOrDisconnectedOrReconnectingOrReconnectedOrTimedOut = new AtomicBoolean(false);\n\tfinal AtomicBoolean isReconnectingOrReconnectedOrTimedOutOrDoneOrFailureOrConnectedOrDisconnectedOrReconnectingOrReconnectedOrTimedOutOrDone = new", "CodeBleu_score": 15.278196869896062}, {"code": "public void internalBlockUntilConnectedOrTimedOut() throws InterruptedException {\n\t\tfinal CountDownLatch connectionLatch = new CountDownLatch(1);\n\tfinal AtomicBoolean connectionState = new AtomicBoolean(false);\n\tfinal AtomicReference<Throwable> connectionException = new AtomicReference<Throwable>();\n\tfinal AtomicReference<Watcher> watcher = new AtomicReference<Watcher>();\n\tfinal AtomicReference<ZooKeeper> zooKeeper = new AtomicReference<ZooKeeper>();\n\tfinal AtomicBoolean connected = new AtomicBoolean(false);\n\tfinal AtomicBoolean timedOut = new AtomicBoolean(false);\n\tfinal AtomicBoolean closed = new AtomicBoolean(false);\n\tfinal AtomicBoolean connectionFailed = new AtomicBoolean(false);\n\tfinal AtomicBoolean connectionTimedOut = new AtomicBoolean(false);\n\tfinal AtomicBoolean connectionClosed = new AtomicBoolean(false);\n\tfinal AtomicBoolean connectionEstablished = new AtomicBoolean(false);\n\tfinal AtomicBoolean connectionLost = new AtomicBoolean(false);\n\tfinal AtomicBoolean connectionRefused = new AtomicBoolean(false);\n\tfinal AtomicBoolean connectionSaslFailed = new AtomicBoolean(false);\n\tfinal AtomicBoolean connectionSaslNegotiationFailed = new AtomicBoolean(false);\n\tfinal AtomicBoolean connectionSaslAuthenticationFailed = new AtomicBoolean(false);\n\tfinal AtomicBoolean connectionSaslAuthorizationFailed = new AtomicBoolean(false);\n\tfinal AtomicBoolean connectionSaslTokenExpired = new AtomicBoolean(false);\n\tfinal AtomicBoolean connectionSaslNotAuthorized = new AtomicBoolean(false);\n\tfinal AtomicBoolean connectionSaslNotAllowed = new AtomicBoolean(false);\n\tfinal AtomicBoolean connectionSaslUnknown = new AtomicBoolean(false);\n\tfinal AtomicBoolean connectionSaslUnsupported = new AtomicBoolean(false);\n\tfinal AtomicBoolean connectionSaslUnknownError = new AtomicBoolean(false);\n\tfinal AtomicBoolean connectionSaslError = new AtomicBoolean(false);\n\tfinal AtomicBoolean connectionSaslErrorUnknown = new AtomicBoolean(false);\n\tfinal AtomicBoolean connectionSaslErrorUnknownError = new AtomicBoolean(false);\n\tfinal AtomicBoolean connectionSaslErrorUnknownErrorUnknown = new AtomicBoolean(false);\n\tfinal AtomicBoolean connectionSaslErrorUnknownErrorUnknownError = new AtomicBoolean(false);\n\tfinal AtomicBoolean connectionSaslErrorUnknownErrorUnknownErrorUnknown = new AtomicBoolean(false);\n\tfinal AtomicBoolean connectionSaslErrorUnknownErrorUnknownErrorUnknownError = new AtomicBoolean(false);\n", "CodeBleu_score": 11.521645009053122}]}
{"instance_id": "4a01f5365731", "generation_result": [{"code": "String validateFoundNode(CuratorFrameworkImpl client, CreateMode createMode, String foundNode) throws Exception{\n\t\tif (foundNode == null) {\n\t\treturn null;\n\t}\n\tif (foundNode.startsWith(client.getEphemeralPrefix())) {\n\t\tString sessionId = client.getSessionId();\n\t\tif (sessionId == null) {\n\t\t\tthrow new IllegalStateException(\"Cannot create ephemeral node without session\");\n\t\t}\n\t\tString foundSessionId = foundNode.substring(client.getEphemeralPrefix().length());\n\t\tif (!sessionId.equals(foundSessionId)) {\n\t\t\tlogger.debug(\"Session ID changed from {} to {}. Deleting old ephemeral node\", sessionId, foundSessionId);\n\t\t\tclient.delete().deletingChildrenIfNeeded().forPath(foundNode);\n\t\t\tclient.setSessionId(foundSessionId);\n\t\t\tfoundNode = client.getEphemeralPrefix() + foundSessionId;\n\t\t}\n\t}\n\treturn foundNode;\n}", "CodeBleu_score": 39.092943184159566}, {"code": "String validateFoundNode(CuratorFrameworkImpl client, CreateMode createMode, String foundNode) throws Exception{\n\t\tif (client.getSessionId()!= client.getPreviousSessionId()) {\n\t\tlogger.info(\"Session ID has changed, deleting old node and updating session ID\");\n\t\tclient.delete().forPath(foundNode);\n\t\tclient.setSessionId(client.getPreviousSessionId());\n\t}\n\treturn foundNode;\n}", "CodeBleu_score": 21.724604218108496}, {"code": "String validateFoundNode(CuratorFrameworkImpl client, CreateMode createMode, String foundNode) throws Exception{\n\t\tif (foundNode == null) {\n\t\treturn null;\n\t}\n\tString sessionId = client.getSessionId();\n\tif (sessionId == null) {\n\t\treturn null;\n\t}\n\tString foundSessionId = client.getFoundSessionId();\n\tif (foundSessionId == null) {\n\t\treturn null;\n\t}\n\tif (!sessionId.equals(foundSessionId)) {\n\t\tlogger.warn(\"Found node {} has changed session id from {} to {}.  Deleting old node and updating session id.\", new Object[] { foundNode, foundSessionId, sessionId });\n\t\tclient.delete().forPath(foundNode);\n\t\tclient.setFoundSessionId(sessionId);\n\t}\n\treturn foundNode;\n}", "CodeBleu_score": 36.908357856990484}]}
{"instance_id": "126d0922a699", "generation_result": [{"code": "private Stat pathInForeground(final String path, final List<ACL> aclList) throws Exception{\n\t\tfinal OperationTrace trace = new OperationTrace(path);\n\tfinal RetryLoop retryLoop = new RetryLoop(new Callable<Stat>() {\n\t\t@Override\n\t\tpublic Stat call() throws Exception {\n\t\t\treturn curator.setACL(path, aclList);\n\t\t}\n\t}, trace, curator.getZookeeperClient().getZooKeeper());\n\treturn retryLoop.call();\n}", "CodeBleu_score": 49.64878736547963}, {"code": "private Stat pathInForeground(final String path, final List<ACL> aclList) throws Exception{\n\t\tfinal Stat stat = new Stat();\n\tfinal RetryLoop<Stat> retryLoop = new RetryLoop<Stat>() {\n\t\t@Override\n\t\tprotected Stat doLoop(final OperationTrace trace) throws Exception {\n\t\t\treturn pathInBackground(path, aclList, new BackgroundCallback() {\n\t\t\t\t@Override\n\t\t\t\tpublic void processResult(final CuratorEvent event) throws Exception {\n\t\t\t\t\tif (event.getType() == CuratorEventType.PATH_IN_BACKGROUND_ACL_RESULT) {\n\t\t\t\t\t\ttrace.recordResult(event.getPath(), event.getResultCode());\n\t\t\t\t\t\ttrace.recordResult(event.getPath(), stat);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n\treturn retryLoop.doRetry();\n}", "CodeBleu_score": 42.65048620025394}, {"code": "private Stat pathInForeground(final String path, final List<ACL> aclList) throws Exception{\n\t\tfinal OperationTrace trace = new OperationTrace();\n\tfinal RetryLoop retryLoop = new RetryLoop(trace);\n\tfinal Stat result = retryLoop.call(new Callable<Stat>() {\n\t\t@Override\n\t\tpublic Stat call() throws Exception {\n\t\t\treturn client.setACL(path, aclList);\n\t\t}\n\t});\n\ttrace.commit();\n\treturn result;\n}", "CodeBleu_score": 49.21712767697144}]}
{"instance_id": "e07b079ff61f", "generation_result": [{"code": "public GroupMember(CuratorFramework client, String membershipPath, String thisId, byte[] payload){\n\t\tthis(client, membershipPath, thisId, payload, false);\n}", "CodeBleu_score": 11.710997208837808}, {"code": "public GroupMember(CuratorFramework client, String membershipPath, String thisId, byte[] payload){\n\t\tPreconditions.checkNotNull(client, \"client\");\n\tPreconditions.checkNotNull(membershipPath, \"membershipPath\");\n\tPreconditions.checkNotNull(thisId, \"thisId\");\n\tPreconditions.checkNotNull(payload, \"payload\");\n\tPreconditions.checkArgument(!thisId.isEmpty(), \"thisId cannot be empty\");\n\tPreconditions.checkArgument(thisId.length() <= 16, \"thisId must be <= 16 characters\");\n\tthis.client = client;\n\tthis.membershipPath = membershipPath;\n\tthis.thisId = thisId;\n\tthis.payload = payload;\n\tthis.cache = new CuratorCache(client, membershipPath, parentPathFilter());\n\tthis.persistentNode = new PersistentNode(client, membershipPath, thisId, payload, CreateMode.EPHEMERAL);\n}", "CodeBleu_score": 41.64334966706661}, {"code": "public GroupMember(CuratorFramework client, String membershipPath, String thisId, byte[] payload){\n\t\tPreconditions.checkNotNull(client, \"client cannot be null\");\n\tPreconditions.checkNotNull(membershipPath, \"membershipPath cannot be null\");\n\tPreconditions.checkNotNull(thisId, \"thisId cannot be null\");\n\tPreconditions.checkNotNull(payload, \"payload cannot be null\");\n\tPreconditions.checkArgument(!thisId.isEmpty(), \"thisId cannot be empty\");\n\tPreconditions.checkArgument(!ZKPaths.validatePath(membershipPath), \"membershipPath cannot be empty\");\n\tPreconditions.checkArgument(!ZKPaths.validatePath(thisId), \"thisId cannot be empty\");\n\tPreconditions.checkArgument(!ZKPaths.validatePath(ZKPaths.makePath(membershipPath, thisId)), \"thisId cannot be empty\");\n\tthis.client = client;\n\tthis.membershipPath = membershipPath;\n\tthis.thisId = thisId;\n\tthis.payload = payload;\n\tthis.cache = new CuratorCache(client, membershipPath, parentPathFilter());\n\tthis.cacheBridge = new CuratorCacheBridge(cache);\n\tthis.persistentNode = new PersistentNode(client, ZKPaths.makePath(membershipPath, thisId), payload, CreateMode.EPHEMERAL);\n}", "CodeBleu_score": 46.82918405543399}]}
{"instance_id": "d11c76b2b912", "generation_result": [{"code": "public static void createThenWatch(CuratorFramework client, String path) {\n\t\ttry {\n\t\tCompletionStage<Void> createCompletion = client.async().create().creatingParentsIfNeeded().withMode(CreateMode.PERSISTENT).forPath(path);\n\t\tcreateCompletion.whenComplete((Void result, Throwable t) -> {\n\t\t\tif (t == null) {\n\t\t\t\tSystem.out.println(\"Node created successfully\");\n\t\t\t\tclient.async().getData().usingWatcher((Watcher) (event) -> {\n\t\t\t\t\tSystem.out.println(\"Received event: \" + event);\n\t\t\t\t\treturn null;\n\t\t\t\t}).forPath(path);\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"Failed to create node: \" + t.getMessage());\n\t\t\t}\n\t\t});\n\t} catch (Exception e) {\n\t\tSystem.out.println(\"Failed to create node: \" + e.getMessage());\n\t}\n}", "CodeBleu_score": 41.025227531209765}, {"code": "public static void createThenWatch(CuratorFramework client, String path) {\n\t\ttry {\n\t\tCompletionStage<Void> createCompletion = client.create().creatingParentsIfNeeded().withMode(CreateMode.PERSISTENT).forPath(path, \"data\".getBytes());\n\t\tcreateCompletion.whenComplete((Void result, Throwable t) -> {\n\t\t\tif (t!= null) {\n\t\t\t\tt.printStackTrace();\n\t\t\t}\n\t\t});\n\n\t\tCompletionStage<List<WatchedEvent>> watchCompletion = client.getChildren().watched().forPath(path);\n\t\twatchCompletion.whenComplete((List<WatchedEvent> result, Throwable t) -> {\n\t\t\tif (t!= null) {\n\t\t\t\tt.printStackTrace();\n\t\t\t}\n\t\t});\n\n\t\tclient.getChildren().watched().usingWatcher((WatchedEvent event) -> {\n\t\t\tSystem.out.println(\"Event: \" + event.toString());\n\t\t}).forPath(path);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}", "CodeBleu_score": 39.787045559220466}, {"code": "public static void createThenWatch(CuratorFramework client, String path) {\n\t\ttry {\n\t\tCompletionStage<Void> completionStage = client.create().creatingParentsIfNeeded().withMode(CreateMode.PERSISTENT).forPath(path, \"data\".getBytes());\n\t\tcompletionStage.thenAccept(aVoid -> {\n\t\t\tSystem.out.println(\"Created node at path: \" + path);\n\t\t\tclient.getData().usingWatcher(new Watcher() {\n\t\t\t\t@Override\n\t\t\t\tpublic void process(WatchedEvent event) {\n\t\t\t\t\tSystem.out.println(\"Event: \" + event);\n\t\t\t\t}\n\t\t\t}).forPath(path);\n\t\t});\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}", "CodeBleu_score": 38.42426161115801}]}
{"instance_id": "4571de52ad5d", "generation_result": [{"code": "private List<OpResult> doOperation() throws Exception{\n\t\tList<OpResult> results = null;\n\ttry {\n\t\tresults = this.client.multi(this.operations);\n\t} catch (KeeperException e) {\n\t\tif (e.code() == KeeperException.Code.NONODE) {\n\t\t\tthrow new KeeperException.NoNodeException(e);\n\t\t} else {\n\t\t\tthrow e;\n\t\t}\n\t} catch (InterruptedException e) {\n\t\tthrow new KeeperException.ConnectionLossException(e);\n\t}\n\treturn results;\n}", "CodeBleu_score": 27.839387760581875}, {"code": "private List<OpResult> doOperation() throws Exception{\n\t\tPreconditions.checkArgument(this.operations!= null &&!this.operations.isEmpty(), \"operations cannot be null or empty\");\n\tfinal List<OpResult> results = new ArrayList<OpResult>(this.operations.size());\n\tfinal List<Callable<OpResult>> callables = new ArrayList<Callable<OpResult>>(this.operations.size());\n\tfor (final Op op : this.operations) {\n\t\tcallables.add(new Callable<OpResult>() {\n\t\t\t@Override\n\t\t\tpublic OpResult call() throws Exception {\n\t\t\t\treturn op.getResult();\n\t\t\t}\n\t\t});\n\t}\n\tfinal RetryLoop<OpResult> retryLoop = new RetryLoop<OpResult>(this.client.getZooKeeper().getSessionTimeoutMs(), this.client.getZooKeeper().getRetryPolicy(), callables);\n\tfinal List<OpResult> results1 = retryLoop.call();\n\tfor (final OpResult result : results1) {\n\t\tif (result.getType() == OpResult.Type.ERROR) {\n\t\t\tfinal int error = result.getError();\n\t\t\tthrow new KeeperException(error);\n\t\t}\n\t\tresults.add(result);\n\t}\n\treturn results;\n}", "CodeBleu_score": 34.24083494859319}, {"code": "private List<OpResult> doOperation() throws Exception{\n\t//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':\n//ORIGINAL LINE: final org.apache.curator.RetryLoop retryLoop = new org.apache.curator.RetryLoop(new org.apache.curator.RetryLoop.RetryLoopBuilder().withRetryPolicy(retryPolicy).build());\n    RetryLoop retryLoop = new RetryLoop(new RetryLoop.RetryLoopBuilder().withRetryPolicy(retryPolicy).build());\n    try {\n//JAVA TO C# CONVERTER WARNING: The original Java variable was marked 'final':\n//ORIGINAL LINE: final org.apache.curator.RetryLoop.RetryLoopResult<List<OpResult>> result = retryLoop.callWithRetryLoop(new org.apache.curator.RetryLoop.RetryLoopCallable<List<OpResult>>() {\n      @Override\n      public List<OpResult> call() throws Exception {\n        return doOperation(curator, pathable, operations);\n      }\n    });\n      return result.getResult();\n    } catch (Exception e) {\n      if (e instanceof KeeperException) {\n        throw (KeeperException) e;\n      }\n      throw new KeeperException(KeeperException.Code.OPERATION_TIMEOUT, e);\n    }\n  }", "CodeBleu_score": 33.51371595618896}]}
{"instance_id": "99263700ce6d", "generation_result": [{"code": "private static void listInstances(ServiceDiscovery<InstanceDetails> serviceDiscovery) throws Exception{\n\tSystem.out.println(\"Listing instances:\");\nIterable<String> serviceNames = serviceDiscovery.queryForNames();\nfor (String serviceName : serviceNames) {\nSystem.out.println(\"Service: \" + serviceName);\nCollection<ServiceInstance<InstanceDetails>> instances = serviceDiscovery.queryForInstances(serviceName);\nfor (ServiceInstance<InstanceDetails> instance : instances) {\nSystem.out.println(\"  Instance: \" + instance.getAddress() + \":\" + instance.getPort());\n}\n}\n}", "CodeBleu_score": 46.37671983284829}, {"code": "private static void listInstances(ServiceDiscovery<InstanceDetails> serviceDiscovery) throws Exception{\n\ttry {\n// Get all service names\nCollection<String> serviceNames = serviceDiscovery.queryForNames();\n\n// Print each service name and its instances\nfor (String serviceName : serviceNames) {\nList<InstanceDetails> instances = serviceDiscovery.queryForInstances(serviceName);\nSystem.out.println(\"Service: \" + serviceName + \", Instances: \" + instances);\n}\n} catch (KeeperException.NoNodeException e) {\nSystem.out.println(\"No instances registered.\");\n}\nserviceDiscovery.close();\n}", "CodeBleu_score": 46.21080378964373}, {"code": "private static void listInstances(ServiceDiscovery<InstanceDetails> serviceDiscovery) throws Exception{\n\tList<String> serviceNames = serviceDiscovery.queryForNames();\nfor (String serviceName : serviceNames) {\nSystem.out.println(serviceName + \":\");\nCollection<ServiceInstance<InstanceDetails>> instances = serviceDiscovery.queryForInstances(serviceName);\nfor (ServiceInstance<InstanceDetails> instance : instances) {\nSystem.out.println(\"  \" + instance.getId() + \" \" + instance.getAddress() + \":\" + instance.getPort());\n}\n}\n}", "CodeBleu_score": 44.64809373388646}]}
{"instance_id": "891a390fa04d", "generation_result": [{"code": "private List<String> filterAndSortChildren(List<String> children){\n\t\tchildren.remove(READY_NODE);\n\tCollections.sort(children);\n\treturn children;\n}", "CodeBleu_score": 14.867141061252198}, {"code": "private List<String> filterAndSortChildren(List<String> children){\n\t\tList<String> filtered = new ArrayList<String>();\n\tfor (String child : children) {\n\t\tif (!child.equals(READY_NODE)) {\n\t\t\tfiltered.add(child);\n\t\t}\n\t}\n\tCollections.sort(filtered);\n\treturn filtered;\n}", "CodeBleu_score": 26.56995770994324}, {"code": "private List<String> filterAndSortChildren(List<String> children){\n\t\treturn Iterables.filter(children, new Predicate<String>() {\n\t\t@Override\n\t\tpublic boolean apply(String input) {\n\t\t\treturn!input.equals(READY_NODE);\n\t\t}\n\t}).stream().sorted().collect(Collectors.toList());\n}", "CodeBleu_score": 37.92373647413288}]}
{"instance_id": "f25af95a13b6", "generation_result": [{"code": "protected void connectToZK(String newHost) throws InterruptedException, IOException{\n\t\tif (zk!= null) {\n\t\tzk.close();\n\t}\n\tzk = new ZooKeeper(newHost, 3000, new Watcher() {\n\t\t@Override\n\t\tpublic void process(WatchedEvent event) {\n\t\t\tSystem.out.println(\"Watched event: \" + event);\n\t\t}\n\t});\n\tSystem.out.println(\"Connected to ZooKeeper.\");\n}", "CodeBleu_score": 35.72955599679537}, {"code": "protected void connectToZK(String newHost) throws InterruptedException, IOException{\n\t\tif (zk!= null) {\n\t\tzk.close();\n\t}\n\tzk = new ZooKeeper(newHost, timeout, new Watcher() {\n\t\tpublic void process(WatchedEvent event) {\n\t\t\tif (event.getState() == Event.KeeperState.SyncConnected) {\n\t\t\t\tif (event.getType() == Event.EventType.None && event.getPath() == null) {\n\t\t\t\t\tif (logger.isInfoEnabled()) {\n\t\t\t\t\t\tlogger.info(\"ZooKeeper session established\");\n\t\t\t\t\t}\n\t\t\t\t} else if (event.getType() == Event.EventType.NodeChildrenChanged) {\n\t\t\t\t\tif (logger.isInfoEnabled()) {\n\t\t\t\t\t\tlogger.info(\"ZooKeeper node children changed\");\n\t\t\t\t\t}\n\t\t\t\t} else if (event.getType() == Event.EventType.NodeDataChanged) {\n\t\t\t\t\tif (logger.isInfoEnabled()) {\n\t\t\t\t\t\tlogger.info(\"ZooKeeper node data changed\");\n\t\t\t\t\t}\n\t\t\t\t} else if (event.getType() == Event.EventType.NodeCreated) {\n\t\t\t\t\tif (logger.isInfoEnabled()) {\n\t\t\t\t\t\tlogger.info(\"ZooKeeper node created\");\n\t\t\t\t\t}\n\t\t\t\t} else if (event.getType() == Event.EventType.NodeDeleted) {\n\t\t\t\t\tif (logger.isInfoEnabled()) {\n\t\t\t\t\t\tlogger.info(\"ZooKeeper node deleted\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n}", "CodeBleu_score": 37.142222144530244}, {"code": "protected void connectToZK(String newHost) throws InterruptedException, IOException{\n\t\tif (zk!= null) {\n\t\tzk.close();\n\t}\n\tzk = new ZooKeeper(newHost, 30000, new Watcher() {\n\t\t@Override\n\t\tpublic void process(WatchedEvent event) {\n\t\t\tif (event.getState() == Event.KeeperState.SyncConnected) {\n\t\t\t\tlogger.info(\"ZooKeeper connected\");\n\t\t\t}\n\t\t}\n\t});\n\tlogger.info(\"ZooKeeper connected\");\n}", "CodeBleu_score": 38.65513636640911}]}
{"instance_id": "269eaac5cec6", "generation_result": [{"code": "private List<ACL> parseACLs(String aclString) throws IOException{\n\t\tString[] segments = aclString.split(\",\");\n\tList<ACL> acls = new ArrayList<ACL>();\n\tfor (String segment : segments) {\n\t\tString[] parts = segment.split(\":\");\n\t\tif (parts.length!= 3) {\n\t\t\tlogger.error(\"Invalid ACL format: {}\", segment);\n\t\t\tcontinue;\n\t\t}\n\t\tString scheme = parts[0];\n\t\tString idString = parts[1];\n\t\tString permsString = parts[2];\n\t\tId id = null;\n\t\tif (scheme.equals(\"world\")) {\n\t\t\tif (idString.equals(\"anyone\")) {\n\t\t\t\tid = Ids.ANYONE_ID;\n\t\t\t} else {\n\t\t\t\tlogger.error(\"Invalid ACL format: {}\", segment);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t} else if (scheme.equals(\"auth\")) {\n\t\t\tid = new Id(\"auth\", idString);\n\t\t} else if (scheme.equals(\"digest\")) {\n\t\t\tid = new Id(\"digest\", idString);\n\t\t} else if (scheme.equals(\"ip\")) {\n\t\t\tid = new Id(\"ip\", idString);\n\t\t} else {\n\t\t\tlogger.error(\"Invalid ACL format: {}\", segment);\n\t\t\tcontinue;\n\t\t}\n\t\tSet<Id.Permission> permissions = new HashSet<Id.Permission>();\n\t\tfor (String perm : permsString.split(\"\\\\s+\")) {\n\t\t\tif (perm.equals(\"c\")) {\n\t\t\t\tpermissions.add(Id.Permission.CREATE);\n\t\t\t} else if (perm.equals(\"d\")) {\n\t\t\t\tpermissions.add(Id.Permission.DELETE);\n\t\t\t} else if (perm.equals(\"r\")) {\n\t\t\t\tpermissions.add(Id.Permission.READ);\n\t\t\t} else if (perm.equals(\"w\")) {\n\t\t\t\tpermissions.add(Id.Permission.WRITE);\n\t\t\t} else if (perm.equals(\"a\")) {\n\t\t\t\tpermissions.add(Id.Permission.ADMIN);\n\t\t\t} else {\n\t\t\t\tlogger.error(\"Invalid ACL format: {}\", segment);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tACL acl = new ACL(permissions, id);\n\t\tacls.add(acl);\n\t}\n\treturn acls;\n}", "CodeBleu_score": 24.133898801805913}, {"code": "private List<ACL> parseACLs(String aclString) throws IOException{\n\t\tList<ACL> aclList = new ArrayList<ACL>();\n\tString[] aclStrings = aclString.split(\",\");\n\tfor (String acl : aclStrings) {\n\t\tif (acl.contains(\":\")) {\n\t\t\tString[] aclParts = acl.split(\":\");\n\t\t\tString scheme = aclParts[0];\n\t\t\tString idString = aclParts[1];\n\t\t\tint perms = 0;\n\t\t\tif (aclParts.length > 2) {\n\t\t\t\tperms = Integer.parseInt(aclParts[2]);\n\t\t\t}\n\t\t\tId id = new Id(scheme, idString);\n\t\t\tACL acl = new ACL(perms, id);\n\t\t\taclList.add(acl);\n\t\t} else {\n\t\t\tlogger.error(\"Invalid ACL: \" + acl);\n\t\t}\n\t}\n\treturn aclList;\n}", "CodeBleu_score": 24.237246950274326}, {"code": "private List<ACL> parseACLs(String aclString) throws IOException{\n\t\tList<ACL> aclList = new ArrayList<>();\n\tString[] aclSegments = aclString.split(\",\");\n\tfor (String aclSegment : aclSegments) {\n\t\tString[] aclComponents = aclSegment.split(\":\");\n\t\tif (aclComponents.length!= 3) {\n\t\t\tLOGGER.error(\"ACL segment does not conform to expected format: \" + aclSegment);\n\t\t\tcontinue;\n\t\t}\n\t\tString scheme = aclComponents[0];\n\t\tString id = aclComponents[1];\n\t\tString permissions = aclComponents[2];\n\t\tId idObject = new Id(scheme, id);\n\t\tACL acl = new ACL(ZooDefs.Perms.toPermission(Integer.parseInt(permissions)), idObject);\n\t\taclList.add(acl);\n\t}\n\treturn aclList;\n}", "CodeBleu_score": 25.51242362743829}]}
{"instance_id": "c25db637a176", "generation_result": [{"code": "public void delete(String serverId, List<String> pathList) throws Exception{\n\t\tif (pathList == null) {\n\t\tthrow new IllegalArgumentException(\"pathList cannot be null\");\n\t}\n\n\tif (pathList.size() < 20) {\n\t\tdeleteSync(serverId, pathList);\n\t} else {\n\t\tdeleteAsync(serverId, pathList);\n\t}\n}", "CodeBleu_score": 35.06034795101518}, {"code": "public void delete(String serverId, List<String> pathList) throws Exception{\n\t\tif (pathList == null || pathList.size() == 0) {\n\t\tthrow new Exception(\"The path list is empty.\");\n\t}\n\tif (pathList.size() < 20) {\n\t\tdeleteSynchronously(serverId, pathList);\n\t} else {\n\t\tdeleteAsynchronously(serverId, pathList);\n\t}\n}", "CodeBleu_score": 39.20562983054331}, {"code": "public void delete(String serverId, List<String> pathList) throws Exception{\n\t\tif (pathList == null || pathList.size() == 0) {\n\t\tthrow new Exception(\"Path list cannot be null or empty.\");\n\t}\n\tServerConfiguration serverConfiguration = ServerConfiguration.getInstance();\n\tif (serverConfiguration.getServerMap().containsKey(serverId)) {\n\t\tZookeeper zookeeper = ZookeeperFactory.getInstance().getZookeeper(serverId);\n\t\tif (zookeeper!= null) {\n\t\t\tif (pathList.size() < 20) {\n\t\t\t\tfor (String path : pathList) {\n\t\t\t\t\tzookeeper.delete(path);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tList<String> pathListCopy = new ArrayList<>(pathList);\n\t\t\t\tList<String> pathList20 = new ArrayList<>();\n\t\t\t\tfor (int i = 0; i < pathList.size(); i++) {\n\t\t\t\t\tif (i < 20) {\n\t\t\t\t\t\tpathList20.add(pathListCopy.get(i));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tList<String> pathList30 = new ArrayList<>();\n\t\t\t\tfor (int i = 20; i < pathList.size(); i++) {\n\t\t\t\t\tif (i < 40) {\n\t\t\t\t\t\tpathList30.add(pathListCopy.get(i));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tList<String> pathList40 = new ArrayList<>();\n\t\t\t\tfor (int i = 40; i < pathList.size(); i++) {\n\t\t\t\t\tif (i < 60) {\n\t\t\t\t\t\tpathList40.add(pathListCopy.get(i));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tList<String> pathList50 = new ArrayList<>();\n\t\t\t\tfor (int i = 60; i < pathList.size(); i++) {\n\t\t\t\t\tif (i < 80) {\n\t\t\t\t\t\tpathList50.add(pathListCopy.get(i));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tList<String> pathList60 = new ArrayList<>();\n\t\t\t\tfor (int i = 80; i < pathList.size(); i++) {\n\t\t\t\t\tif (i < 100) {\n\t\t\t\t\t\tpathList6", "CodeBleu_score": 52.042859742954874}]}
{"instance_id": "3ecb1ce78f90", "generation_result": [{"code": "public Terminal createTerminal(String id, String url, StringWriter writer) throws Exception{\n\t\twriter.write(\"Connecting to \" + url + \"...\");\n\tZookeeperParams params = new ZookeeperParams(url);\n\tCuratorZookeeperConnectionFactory connectionFactory = new CuratorZookeeperConnectionFactory(params);\n\tZooKeeperMain zooKeeperMain = new ZooKeeperMain(connectionFactory.getConnection());\n\twriter.write(\"Success!\");\n\treturn new Terminal(id, url, connectionFactory.getConnection(), zooKeeperMain);\n}", "CodeBleu_score": 35.92168822570068}, {"code": "public Terminal createTerminal(String id, String url, StringWriter writer) throws Exception{\n\t\twriter.write(\"Connecting to \" + url + \"...\");\n\tCuratorZookeeperConnectionFactory connectionFactory = new CuratorZookeeperConnectionFactory(new ZookeeperParams(url));\n\tZooKeeperMain zooKeeperMain = new ZooKeeperMain(connectionFactory);\n\twriter.write(\"Success\");\n\treturn new Terminal(id, url, zooKeeperMain);\n}", "CodeBleu_score": 26.757941364960562}, {"code": "public Terminal createTerminal(String id, String url, StringWriter writer) throws Exception{\n\t\t// TODO: Implement this function\n\tthrow new UnsupportedOperationException();\n}", "CodeBleu_score": 8.268590850262097}]}
{"instance_id": "a3606e777eb5", "generation_result": [{"code": "public void blockUntilConnected(){\n\t}", "CodeBleu_score": 1.0145750671711116}, {"code": "public void blockUntilConnected(){\n\t\ttry {\n\t\tSSHClient sshClient = new SSHClient();\n\t\tsshClient.addHostKeyVerifier(new PromiscuousVerifier());\n\t\tsshClient.connect(host);\n\t\tsshClient.authPassword(username, password);\n\t\tsshClient.startSession();\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNoDelay(true);\n\t\tsshClient.setTcpNo", "CodeBleu_score": 9.399680567841934}, {"code": "public void blockUntilConnected(){\n\t}", "CodeBleu_score": 1.0145750671711116}]}
{"instance_id": "a4e5b886b72b", "generation_result": [{"code": "public void deleteNode(String serverId, List<String> pathList){\n\t\ttry {\n\t\tZookeeperDomainService zookeeperDomainService = ActiveServerContext.getZookeeperDomainService();\n\t\tzookeeperDomainService.deleteNode(serverId, pathList);\n\t} catch (Exception e) {\n\t\tthrow new IllegalStateException(\"An error occurred while deleting nodes from Zookeeper.\", e);\n\t}\n}", "CodeBleu_score": 50.968349326446}, {"code": "public void deleteNode(String serverId, List<String> pathList){\n\t\ttry {\n\t\tZookeeperDomainService zookeeperDomainService = ActiveServerContext.getZookeeperDomainService();\n\t\tzookeeperDomainService.deleteNode(serverId, pathList);\n\t} catch (Exception e) {\n\t\tLOGGER.error(\"Error deleting node(s) from Zookeeper instance\", e);\n\t\tthrow new IllegalStateException(\"Error deleting node(s) from Zookeeper instance\", e);\n\t}\n}", "CodeBleu_score": 51.916468703687634}, {"code": "public void deleteNode(String serverId, List<String> pathList){\n\t\ttry {\n\t\tZookeeperDomainService zookeeperDomainService = new ZookeeperDomainService();\n\t\tzookeeperDomainService.deleteNode(serverId, pathList);\n\t} catch (Exception e) {\n\t\tlog.error(\"Error deleting node\", e);\n\t\tthrow new IllegalStateException(\"Error deleting node\", e);\n\t}\n}", "CodeBleu_score": 54.68957917190367}]}
{"instance_id": "4fdbc9ec2e75", "generation_result": [{"code": "public void disconnect(String id){\n\t\ttry {\n\t\tTreeItemCache.getTreeItem(id).ifPresent(treeItem -> {\n\t\t\tTreeItemCache.removeTreeItem(id);\n\t\t\tTreeItemCache.removeTreeItem(treeItem.getParentId());\n\t\t\tTreeItemCache.removeTreeItem(treeItem.getParentId());\n\t\t\tTreeItemCache.removeTreeItem(treeItem.getParentId());\n\t\t\tTreeItemCache.removeTreeItem(treeItem.getParentId());\n\t\t\tTreeItemCache.removeTreeItem(treeItem.getParentId());\n\t\t\tTreeItemCache.removeTreeItem(treeItem.getParentId());\n\t\t\tTreeItemCache.removeTreeItem(treeItem.getParentId());\n\t\t\tTreeItemCache.removeTreeItem(treeItem.getParentId());\n\t\t\tTreeItemCache.removeTreeItem(treeItem.getParentId());\n\t\t\tTreeItemCache.removeTreeItem(treeItem.getParentId());\n\t\t\tTreeItemCache.removeTreeItem(treeItem.getParentId());\n\t\t\tTreeItemCache.removeTreeItem(treeItem.getParentId());\n\t\t\tTreeItemCache.removeTreeItem(treeItem.getParentId());\n\t\t\tTreeItemCache.removeTreeItem(treeItem.getParentId());\n\t\t\tTreeItemCache.removeTreeItem(treeItem.getParentId());\n\t\t\tTreeItemCache.removeTreeItem(treeItem.getParentId());\n\t\t\tTreeItemCache.removeTreeItem(treeItem.getParentId());\n\t\t\tTreeItemCache.removeTreeItem(treeItem.getParentId());\n\t\t\tTreeItemCache.removeTreeItem(treeItem.getParentId());\n\t\t\tTreeItemCache.removeTreeItem(treeItem.getParentId());\n\t\t\tTreeItemCache.removeTreeItem(treeItem.getParentId());\n\t\t\tTreeItemCache.removeTreeItem(treeItem.getParentId());\n\t\t\tTreeItemCache.removeTreeItem(treeItem.getParentId());\n\t\t\tTreeItemCache.removeTreeItem(treeItem.getParentId());\n\t\t\tTreeItemCache.removeTreeItem(treeItem.getParentId());\n\t\t\tTreeItemCache.removeTreeItem(treeItem.getParentId());\n\t\t\tTreeItemCache.removeTreeItem(treeItem.getParentId());\n\t\t\tTreeItemCache.removeTreeItem(treeItem.getParentId());\n\t\t\tTreeItemCache.removeTreeItem(treeItem.getParentId());\n\t\t\tTreeItemCache.removeTreeItem(treeItem.getParentId());\n\t\t\tTreeItemCache.removeTreeItem(treeItem.getParentId());\n\t\t\tTreeItemCache.removeTreeItem(treeItem.getParentId());\n\t\t\tTreeItemCache.removeTreeItem(treeItem.getParentId());\n\t\t\tTreeItemCache.removeTreeItem(treeItem.getParentId());\n\t\t\tTreeItemCache.remove", "CodeBleu_score": 25.95501944221268}, {"code": "public void disconnect(String id){\n\t\tTreeItemCache.remove(id);\n}", "CodeBleu_score": 8.215972021634308}, {"code": "public void disconnect(String id){\n\t\ttry {\n\t\tTreeItem<ServerConfiguration> serverTreeItem = TreeItemCache.getServerTreeItem(id);\n\t\tif (serverTreeItem == null) {\n\t\t\treturn;\n\t\t}\n\t\tTreeItem<ServerConfiguration> parent = serverTreeItem.getParent();\n\t\tTreeItem<ServerConfiguration> root = TreeItemCache.getRoot();\n\t\tTreeItem<ServerConfiguration> serverTreeItemCopy = new TreeItem<>(serverTreeItem.getValue());\n\t\tTreeItem<ServerConfiguration> rootCopy = new TreeItem<>(root.getValue());\n\t\tTreeItem<ServerConfiguration> parentCopy = new TreeItem<>(parent.getValue());\n\t\tTreeItem<ServerConfiguration> serverTreeItemCopyParent = new TreeItem<>(serverTreeItemCopy.getValue());\n\t\tTreeItem<ServerConfiguration> rootCopyParent = new TreeItem<>(rootCopy.getValue());\n\t\tTreeItem<ServerConfiguration> parentCopyParent = new TreeItem<>(parentCopy.getValue());\n\t\tTreeItem<ServerConfiguration> serverTreeItemCopyParentParent = new TreeItem<>(serverTreeItemCopyParent.getValue());\n\t\tTreeItem<ServerConfiguration> rootCopyParentParent = new TreeItem<>(rootCopyParent.getValue());\n\t\tTreeItem<ServerConfiguration> parentCopyParentParent = new TreeItem<>(parentCopyParent.getValue());\n\t\tTreeItem<ServerConfiguration> serverTreeItemCopyParentParentParent = new TreeItem<>(serverTreeItemCopyParentParent.getValue());\n\t\tTreeItem<ServerConfiguration> rootCopyParentParentParent = new TreeItem<>(rootCopyParentParent.getValue());\n\t\tTreeItem<ServerConfiguration> parentCopyParentParentParent = new TreeItem<>(parentCopyParentParent.getValue());\n\t\tTreeItem<ServerConfiguration> serverTreeItemCopyParentParentParentParent = new TreeItem<>(serverTreeItemCopyParentParentParent.getValue());\n\t\tTreeItem<ServerConfiguration> rootCopyParentParentParentParent = new TreeItem<>(rootCopyParentParentParent.getValue());\n\t\tTreeItem<ServerConfiguration> parentCopyParentParentParentParent = new TreeItem<>(parentCopyParentParentParent.getValue());\n\t\tTreeItem<ServerConfiguration> serverTreeItemCopyParentParentParentParentParent = new TreeItem<>(serverTreeItemCopyParentParentParentParent.getValue());\n\t\tTreeItem<ServerConfiguration> rootCopyParentParentParentParentParent = new TreeItem<>(rootCopyParentParentParentParent.getValue());\n\t\tTreeItem<ServerConfiguration> parentCopyParentParentParentParentParent = new TreeItem<>(parentCopyParentParentParentParent.getValue());\n\t\tTreeItem<ServerConfiguration> serverTreeItemCopyParentParentParentParentParentParent = new", "CodeBleu_score": 30.339101725145767}]}
{"instance_id": "6bf0d7ac9390", "generation_result": [{"code": "public void startTerminal(String serverId, StringWriter stream){\n\t\t// TODO: Implement this method\n}", "CodeBleu_score": 3.9834435308745446}, {"code": "public void startTerminal(String serverId, StringWriter stream){\n\t\tfinal Logger logger = LoggerFactory.getLogger(getClass());\n\tfinal LocaleContext localeContext = ActiveServerContext.getLocaleContext();\n\tfinal PrimaryStageContext primaryStageContext = ActiveServerContext.getPrimaryStageContext();\n\tfinal ConfigurationDomainService configurationDomainService = ActiveServerContext.getConfigurationDomainService();\n\tfinal ZookeeperDomainService zookeeperDomainService = ActiveServerContext.getZookeeperDomainService();\n\tfinal ConfigurationVOTransfer configurationVOTransfer = ActiveServerContext.getConfigurationVOTransfer();\n\tfinal PrettyZooConfigRepository prettyZooConfigRepository = ActiveServerContext.getPrettyZooConfigRepository();\n\tfinal ServerListener serverListener = ActiveServerContext.getServerListener();\n\tfinal ZookeeperNodeListener zookeeperNodeListener = ActiveServerContext.getZookeeperNodeListener();\n\tfinal ConfigurationChangeListener configurationChangeListener = ActiveServerContext.getConfigurationChangeListener();\n\tfinal ServerConfiguration serverConfiguration = configurationDomainService.getServerConfiguration(serverId);\n\tfinal String serverName = serverConfiguration.getName();\n\tfinal String serverUrl = serverConfiguration.getUrl();\n\tfinal String serverUserName = serverConfiguration.getUserName();\n\tfinal String serverPassword = serverConfiguration.getPassword();\n\tfinal String serverSshUserName = serverConfiguration.getSshUserName();\n\tfinal String serverSshPassword = serverConfiguration.getSshPassword();\n\tfinal String serverSshHost = serverConfiguration.getSshHost();\n\tfinal String serverSshPort = serverConfiguration.getSshPort();\n\tfinal String serverSshLocalPort = serverConfiguration.getSshLocalPort();\n\tfinal String serverSshLocalHost = serverConfiguration.getSshLocalHost();\n\tfinal String serverSshRemotePort = serverConfiguration.getSshRemotePort();\n\tfinal String serverSshRemoteHost = serverConfiguration.getSshRemoteHost();\n\tfinal String serverSshRemoteUser = serverConfiguration.getSshRemoteUser();\n\tfinal String serverSshRemotePassword = serverConfiguration.getSshRemotePassword();\n\tfinal String serverSshRemotePrivateKey = serverConfiguration.getSshRemotePrivateKey();\n\tfinal String serverSshRemotePrivateKeyPassword = serverConfiguration.getSshRemotePrivateKeyPassword();\n\tfinal String serverSshRemotePrivateKeyPassphrase = serverConfiguration.getSshRemotePrivateKeyPassphrase();\n\tfinal String serverSshRemoteKnownHosts = serverConfiguration.getSshRemoteKnownHosts();\n\tfinal String serverSshRemoteKnownHostsPassword = serverConfiguration.getSshRemoteKnownHostsPassword();\n\tfinal String serverSshRemoteKnownHostsPassphrase = serverConfiguration.getSsh", "CodeBleu_score": 26.212516250820993}, {"code": "public void startTerminal(String serverId, StringWriter stream){\n\t\ttry {\n\t\t// Get the server configuration.\n\t\tServerConfiguration serverConfiguration = configurationDomainService.getServerConfiguration(serverId);\n\t\tAsserts.notNull(serverConfiguration, \"serverConfiguration\");\n\n\t\t// Get the connection configuration.\n\t\tConnectionConfiguration connectionConfiguration = configurationDomainService.getConnectionConfiguration(serverConfiguration.getConnectionId());\n\t\tAsserts.notNull(connectionConfiguration, \"connectionConfiguration\");\n\n\t\t// Determine the connection URL based on whether SSH tunneling is enabled.\n\t\tString connectionUrl = connectionConfiguration.getProtocol() + \"://\" + connectionConfiguration.getHost() + \":\" + connectionConfiguration.getPort();\n\t\tif (connectionConfiguration.isSshTunnelEnabled()) {\n\t\t\tconnectionUrl = connectionConfiguration.getProtocol() + \"://\" + connectionConfiguration.getSshTunnelHost() + \":\" + connectionConfiguration.getSshTunnelPort();\n\t\t}\n\n\t\t// Start the terminal with the connection URL.\n\t\tzookeeperDomainService.startTerminal(serverId, connectionUrl, stream);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}", "CodeBleu_score": 40.16257060555381}]}
{"instance_id": "635dea120e55", "generation_result": [{"code": "public void executeCommand(String id, String command){\n\t\ttry {\n\t\tActiveServerContext.get().getZookeeperDomainService().executeCommand(id, command);\n\t} catch (Exception e) {\n\t\tVToast.showError(\"Failed to execute command: \" + command + \" on server: \" + id);\n\t\te.printStackTrace();\n\t}\n}", "CodeBleu_score": 45.94498196452798}, {"code": "public void executeCommand(String id, String command){\n\t\tif (Strings.isNullOrEmpty(id)) {\n\t\tthrow new IllegalArgumentException(\"The server ID must not be null or empty\");\n\t}\n\tif (Strings.isNullOrEmpty(command)) {\n\t\tthrow new IllegalArgumentException(\"The command must not be null or empty\");\n\t}\n\tfinal ServerConfigurationVO serverConfigurationVO = ServerConfigurationVOTransfer.toServerConfigurationVO(serverConfigurationRepository.get(id));\n\tfinal ZookeeperDomainService zookeeperDomainService = zookeeperDomainServiceRepository.get(serverConfigurationVO.getId());\n\tfinal Configuration configuration = configurationRepository.get(serverConfigurationVO.getId());\n\tfinal ConnectionConfiguration connectionConfiguration = connectionConfigurationRepository.get(serverConfigurationVO.getId());\n\tfinal ConfigurationChangeListener configurationChangeListener = configurationChangeListenerRepository.get(serverConfigurationVO.getId());\n\tfinal ZookeeperNodeListener zookeeperNodeListener = zookeeperNodeListenerRepository.get(serverConfigurationVO.getId());\n\tfinal ServerListener serverListener = serverListenerRepository.get(serverConfigurationVO.getId());\n\tfinal StringWriter stringWriter = new StringWriter();\n\tfinal CompletableFuture<Void> future = new CompletableFuture<>();\n\ttry {\n\t\tfinal ZkNodeSearchResult zkNodeSearchResult = zookeeperDomainService.executeCommand(command);\n\t\tfinal String result = zkNodeSearchResult.getResult();\n\t\tfinal String error = zkNodeSearchResult.getError();\n\t\tfinal String message = String.format(\"Server %s: %s\", id, command);\n\t\tif (Strings.isNullOrEmpty(error)) {\n\t\t\tstringWriter.append(message);\n\t\t\tstringWriter.append(\": \");\n\t\t\tstringWriter.append(result);\n\t\t\tstringWriter.append(\"", "CodeBleu_score": 34.21135211039565}, {"code": "public void executeCommand(String id, String command){\n\t\ttry {\n\t\tZookeeperDomainService zookeeperDomainService = ActiveServerContext.get().getBean(ZookeeperDomainService.class);\n\t\tZookeeperNodeListener nodeListener = zookeeperDomainService.getNodeListener(id);\n\t\tif (nodeListener == null) {\n\t\t\tthrow new IllegalStateException(\"Cannot find node listener for \" + id);\n\t\t}\n\t\tnodeListener.executeCommand(command);\n\t} catch (Exception e) {\n\t\tVToast.showError(e.getMessage());\n\t\te.printStackTrace();\n\t}\n}", "CodeBleu_score": 32.23493229866292}]}
{"instance_id": "8627d161f5fc", "generation_result": [{"code": "public Properties loadZookeeperSystemProperties(){\n\t\tProperties properties = new Properties();\n\ttry {\n\t\tproperties.load(new FileInputStream(new File(\"zookeeper.properties\")));\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n\treturn properties;\n}", "CodeBleu_score": 17.563151153737866}, {"code": "public Properties loadZookeeperSystemProperties(){\n\t\tProperties properties = new Properties();\n\ttry {\n\t\tInputStream inputStream = new FileInputStream(ZooKeeperClient.ZOOKEEPER_SYSTEM_PROPERTIES_FILE_PATH);\n\t\tproperties.load(inputStream);\n\t\tlogger.info(\"Loaded system properties from file: {}\", ZooKeeperClient.ZOOKEEPER_SYSTEM_PROPERTIES_FILE_PATH);\n\t} catch (FileNotFoundException e) {\n\t\tlogger.warn(\"Failed to load system properties from file: {}. File not found.\", ZooKeeperClient.ZOOKEEPER_SYSTEM_PROPERTIES_FILE_PATH);\n\t} catch (IOException e) {\n\t\tlogger.warn(\"Failed to load system properties from file: {}. File not readable.\", ZooKeeperClient.ZOOKEEPER_SYSTEM_PROPERTIES_FILE_PATH);\n\t}\n\treturn properties;\n}", "CodeBleu_score": 38.68796770874715}, {"code": "public Properties loadZookeeperSystemProperties(){\n\t\tProperties properties = new Properties();\n\ttry {\n\t\tInputStream inputStream = getClass().getResourceAsStream(\"/zookeeper.properties\");\n\t\tproperties.load(inputStream);\n\t} catch (IOException e) {\n\t\tLOGGER.error(\"Failed to load zookeeper system properties\", e);\n\t}\n\treturn properties;\n}", "CodeBleu_score": 32.1752945083561}]}
{"instance_id": "dce20e143e04", "generation_result": [{"code": "public void saveZookeeperSystemProperties(String content){\n\t\ttry {\n\t\tProperties properties = new Properties();\n\t\tproperties.load(new StringReader(content));\n\t\tFile file = new File(Configuration.SYS_PROP_PATH);\n\t\tif (file.exists()) {\n\t\t\tfile.delete();\n\t\t}\n\t\tproperties.store(new FileOutputStream(file), \"Zookeeper system properties\");\n\t} catch (Exception e) {\n\t\tLOGGER.error(\"Failed to save Zookeeper system properties\", e);\n\t\tVToast.show(ResourceBundleUtils.getString(\"zk.save.system.properties.failed\"));\n\t}\n}", "CodeBleu_score": 29.810251744186083}, {"code": "public void saveZookeeperSystemProperties(String content){\n\t\tProperties properties = new Properties();\n\ttry {\n\t\tproperties.load(new StringReader(content));\n\t} catch (IOException e) {\n\t\tlog.error(\"Failed to load properties from content: {}\", content, e);\n\t\tVToast.showError(ResourceBundleUtils.getMessage(\"zk.save.properties.failed\", content));\n\t\treturn;\n\t}\n\n\ttry {\n\t\tPropertiesUtils.store(properties, SYS_PROP_PATH);\n\t} catch (IOException e) {\n\t\tlog.error(\"Failed to save properties to file: {}\", SYS_PROP_PATH, e);\n\t\tVToast.showError(ResourceBundleUtils.getMessage(\"zk.save.properties.failed\", SYS_PROP_PATH));\n\t}\n}", "CodeBleu_score": 38.571214605625606}, {"code": "public void saveZookeeperSystemProperties(String content){\n\t\tProperties properties = new Properties();\n\ttry {\n\t\tproperties.load(new StringReader(content));\n\t} catch (IOException e) {\n\t\tlogger.error(\"Error loading properties from string\", e);\n\t\tVToast.error(ResourceBundleUtils.getString(\"zk.save.error.properties.load\"));\n\t\treturn;\n\t}\n\ttry {\n\t\tFiles.write(Paths.get(SYS_PROP_PATH), properties.entrySet().stream().map(entry -> entry.getKey() + \"=\" + entry.getValue()).collect(Collectors.toList()), Charset.defaultCharset());\n\t} catch (IOException e) {\n\t\tlogger.error(\"Error saving properties to file\", e);\n\t\tVToast.error(ResourceBundleUtils.getString(\"zk.save.error.properties.save\"));\n\t}\n}", "CodeBleu_score": 38.89842963069483}]}
{"instance_id": "d89f8e6bfb31", "generation_result": [{"code": "private String response(Socket client){\n\t\tStringBuilder sb = new StringBuilder();\n\tBufferedReader br = new BufferedReader(new InputStreamReader(client.getInputStream()));\n\ttry {\n\t\tString line;\n\t\twhile ((line = br.readLine())!= null) {\n\t\t\tsb.append(line);\n\t\t}\n\t} catch (IOException e) {\n\t\tthrow new IllegalStateException(e);\n\t} finally {\n\t\ttry {\n\t\t\tbr.close();\n\t\t} catch (IOException e) {\n\t\t\tthrow new IllegalStateException(e);\n\t\t}\n\t\ttry {\n\t\t\tclient.close();\n\t\t} catch (IOException e) {\n\t\t\tthrow new IllegalStateException(e);\n\t\t}\n\t}\n\treturn sb.toString();\n}", "CodeBleu_score": 52.15641455812936}, {"code": "private String response(Socket client){\n\t\tStringBuilder sb = new StringBuilder();\n\tBufferedReader reader = null;\n\ttry {\n\t\treader = new BufferedReader(new InputStreamReader(client.getInputStream()));\n\t\tString line = null;\n\t\twhile ((line = reader.readLine())!= null) {\n\t\t\tsb.append(line).append(\"\n\");\n\t\t}\n\t} catch (IOException e) {\n\t\tthrow new IllegalStateException(\"Could not read from client socket\", e);\n\t} finally {\n\t\ttry {\n\t\t\tif (reader!= null) {\n\t\t\t\treader.close();\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tthrow new IllegalStateException(\"Could not close client socket reader\", e);\n\t\t}\n\t\ttry {\n\t\t\tclient.close();\n\t\t} catch (IOException e) {\n\t\t\tthrow new IllegalStateException(\"Could not close client socket\", e);\n\t\t}\n\t}\n\treturn sb.toString();\n}", "CodeBleu_score": 42.889662064807965}, {"code": "private String response(Socket client){\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(client.getInputStream()));\n\tStringBuilder sb = new StringBuilder();\n\tString line;\n\ttry {\n\t\twhile ((line = reader.readLine())!= null) {\n\t\t\tsb.append(line);\n\t\t}\n\t\treader.close();\n\t\tclient.close();\n\t} catch (IOException e) {\n\t\tthrow new IllegalStateException(e);\n\t}\n\treturn sb.toString();\n}", "CodeBleu_score": 53.401229699004595}]}
{"instance_id": "b0a277c5e3c0", "generation_result": [{"code": "public ZookeeperConnection<CuratorFramework> create(ZookeeperParams params){\n\t\tif (params == null) {\n\t\tthrow new IllegalArgumentException(\"The Zookeeper parameters cannot be null\");\n\t}\n\tif (params.getServers() == null || params.getServers().isEmpty()) {\n\t\tthrow new IllegalArgumentException(\"The Zookeeper servers cannot be null or empty\");\n\t}\n\tif (params.getSessionTimeout() <= 0) {\n\t\tthrow new IllegalArgumentException(\"The Zookeeper session timeout cannot be less than or equal to 0\");\n\t}\n\tif (params.getConnectionTimeout() <= 0) {\n\t\tthrow new IllegalArgumentException(\"The Zookeeper connection timeout cannot be less than or equal to 0\");\n\t}\n\tif (params.getConnectionRetryPolicy() == null) {\n\t\tthrow new IllegalArgumentException(\"The Zookeeper connection retry policy cannot be null\");\n\t}\n\tif (params.getAuthentication()!= null && params.getAuthentication().isEmpty()) {\n\t\tthrow new IllegalArgumentException(\"The Zookeeper authentication cannot be empty\");\n\t}\n\tif (params.getAclProvider() == null) {\n\t\tthrow new IllegalArgumentException(\"The Zookeeper ACL provider cannot be null\");\n\t}\n\tif (params.getListener() == null) {\n\t\tthrow new IllegalArgumentException(\"The Zookeeper listener cannot be null\");\n\t}\n\tLogger logger = LoggerFactory.getLogger(ZookeeperConnection.class);\n\tCuratorFramework curator = CuratorFrameworkFactory.builder()\n\t\t\t.connectString(params.getServers())\n\t\t\t.sessionTimeoutMs(params.getSessionTimeout())\n\t\t\t.connectionTimeoutMs(params.getConnectionTimeout())\n\t\t\t.retryPolicy(params.getConnectionRetryPolicy())\n\t\t\t.build();\n\tif (params.getAuthentication()!= null) {\n\t\tcurator.setAuthInfo(params.getAuthentication().getScheme(), params.getAuthentication().getPrincipal(), params.getAuthentication().getCredentials());\n\t}\n\tcurator.start();\n\tcurator.getConnectionStateListenable().addListener(new ConnectionStateListener() {\n\t\t@Override\n\t\tpublic void stateChanged(CuratorFramework client, ConnectionState newState) {\n\t\t\tlogger.info(\"Zookeeper connection state changed to \" + newState.name());\n\t\t\tparams.getListener().onStateChange(newState);\n\t\t}\n\t});\n\tcurator.getCuratorListenable().addListener(new CuratorEventListener(params.getListener()));\n\tcurator", "CodeBleu_score": 36.326644029545626}, {"code": "public ZookeeperConnection<CuratorFramework> create(ZookeeperParams params){\n\t\tif (params == null) {\n\t\tthrow new IllegalArgumentException(\"ZookeeperParams cannot be null\");\n\t}\n\tif (params.getTimeout() < 5) {\n\t\tthrow new IllegalArgumentException(\"Timeout must be at least 5 seconds\");\n\t}\n\tfinal Logger logger = LoggerFactory.getLogger(ZookeeperConnection.class);\n\tfinal CuratorFrameworkFactory.Builder builder = CuratorFrameworkFactory.builder();\n\tbuilder.connectString(params.getServers());\n\tbuilder.retryPolicy(new ExponentialBackoffRetry(params.getTimeout(), TimeUnit.SECONDS));\n\tbuilder.connectionTimeoutMs(params.getTimeout());\n\tbuilder.sessionTimeoutMs(params.getTimeout());\n\tbuilder.namespace(params.getNamespace());\n\tbuilder.authorization(params.getAuthInfo().getScheme(), params.getAuthInfo().getAuth());\n\tfinal CuratorFramework client = builder.build();\n\tclient.start();\n\tfinal CuratorFrameworkConnection<CuratorFramework> connection = new CuratorFrameworkConnection<>(client);\n\tfinal ConnectionStateListener listener = new ConnectionStateListener() {\n\t\t@Override\n\t\tpublic void stateChanged(CuratorFramework client, ConnectionState newState) {\n\t\t\tif (newState == ConnectionState.LOST) {\n\t\t\t\tlogger.info(\"Connection to Zookeeper lost\");\n\t\t\t\tconnection.close();\n\t\t\t} else if (newState == ConnectionState.RECONNECTED) {\n\t\t\t\tlogger.info(\"Connection to Zookeeper reconnected\");\n\t\t\t} else if (newState == ConnectionState.SUSPENDED) {\n\t\t\t\tlogger.info(\"Connection to Zookeeper suspended\");\n\t\t\t} else if (newState == ConnectionState.CONNECTED) {\n\t\t\t\tlogger.info(\"Connection to Zookeeper established\");\n\t\t\t}\n\t\t}\n\t};\n\tclient.getConnectionStateListenable().addListener(listener);\n\ttry {\n\t\tif (!client.blockUntilConnected(5, TimeUnit.SECONDS)) {\n\t\t\tthrow new IllegalStateException(\"Zookeeper connection failed to establish\");\n\t\t}\n\t} catch (InterruptedException e) {\n\t\tlogger.info(\"Zookeeper connection interrupted\");\n\t\tconnection.close();\n\t\tthrow new IllegalStateException(\"Zookeeper connection interrupted\");\n\t}\n\treturn connection;\n}", "CodeBleu_score": 46.60909642422695}, {"code": "public ZookeeperConnection<CuratorFramework> create(ZookeeperParams params){\n\t\tfinal Logger logger = LoggerFactory.getLogger(ZookeeperConnection.class);\n\tfinal ZookeeperConnectionFactory factory = new ZookeeperConnectionFactory();\n\tfinal CuratorFramework client = factory.create(params);\n\tfinal CuratorFrameworkConnection<CuratorFramework> connection = new CuratorFrameworkConnection<>(client);\n\tfinal RetryPolicy retryPolicy = new ExponentialBackoffRetry(params.getRetryPolicyBaseSleepTime(), params.getRetryPolicyMaxRetries());\n\tfinal int timeout = params.getTimeout();\n\tfinal TimeUnit timeUnit = params.getTimeUnit();\n\tfinal int sessionTimeout = params.getSessionTimeout();\n\tfinal int connectionTimeout = params.getConnectionTimeout();\n\tfinal int maxRetries = params.getMaxRetries();\n\tfinal boolean isSequential = params.isSequential();\n\tfinal String authScheme = params.getAuthScheme();\n\tfinal String authSchemeProvider = params.getAuthSchemeProvider();\n\tfinal List<String> authIds = params.getAuthIds();\n\tfinal List<String> authPasswords = params.getAuthPasswords();\n\tfinal String authSchemeProviderScheme = params.getAuthSchemeProviderScheme();\n\tfinal String authSchemeProviderParams = params.getAuthSchemeProviderParams();\n\tfinal String authSchemeProviderSchemeParams = params.getAuthSchemeProviderSchemeParams();\n\tfinal List<ACL> acls = params.getAcls();\n\tfinal String authSchemeProviderSchemeParams2 = params.getAuthSchemeProviderSchemeParams2();\n\tfinal String authSchemeProviderSchemeParams3 = params.getAuthSchemeProviderSchemeParams3();\n\tfinal String authSchemeProviderSchemeParams4 = params.getAuthSchemeProviderSchemeParams4();\n\tfinal String authSchemeProviderSchemeParams5 = params.getAuthSchemeProviderSchemeParams5();\n\tfinal String authSchemeProviderSchemeParams6 = params.getAuthSchemeProviderSchemeParams6();\n\tfinal String authSchemeProviderSchemeParams7 = params.getAuthSchemeProviderSchemeParams7();\n\tfinal String authSchemeProviderSchemeParams8 = params.getAuthSchemeProviderSchemeParams8();\n\tfinal String authSchemeProviderSchemeParams9 = params.getAuthSchemeProviderSchemeParams9();\n\tfinal String authSchemeProviderSchemeParams10 = params.getAuthSchemeProviderSchemeParams10();\n\tfinal String authSchemeProviderSchemeParams11 = params.getAuthSchemeProviderSchemeParams11();", "CodeBleu_score": 26.509020319163746}]}
{"instance_id": "b144bcd67462", "generation_result": [{"code": "public void sync(List<ZookeeperNodeListener> listeners){\n\t\tLogger logger = LoggerFactory.getLogger(ZookeeperSync.class);\n\tZookeeperConnection connection = this.getConnection();\n\tString connectionString = connection.getConnectionString();\n\tAtomicBoolean syncInProgress = new AtomicBoolean(false);\n\tlogger.info(\"Syncing Zookeeper nodes with connection string: \" + connectionString);\n\tif (!syncInProgress.get()) {\n\t\tsyncInProgress.set(true);\n\t\ttry {\n\t\t\tCuratorFramework client = this.getClient();\n\t\t\tTreeCache treeCache = new TreeCache(client, \"/\");\n\t\t\ttreeCache.getListenable().addListener(new CuratorTreeCacheListener(listeners));\n\t\t\ttreeCache.start();\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Error syncing Zookeeper nodes: \" + e.getMessage(), e);\n\t\t\tsyncInProgress.set(false);\n\t\t}\n\t} else {\n\t\tlogger.info(\"Zookeeper sync already in progress\");\n\t}\n}", "CodeBleu_score": 40.06945943707223}, {"code": "public void sync(List<ZookeeperNodeListener> listeners){\n\t\tLogger logger = LoggerFactory.getLogger(ZookeeperNodeListener.class);\n\tZookeeperConnection zookeeperConnection = ZookeeperConnection.getInstance();\n\tCuratorFramework client = zookeeperConnection.getClient();\n\tString connectionString = zookeeperConnection.getConnectionString();\n\tAtomicBoolean syncInProgress = new AtomicBoolean(false);\n\tif (!syncInProgress.get()) {\n\t\tlogger.info(\"Starting Zookeeper synchronization for connection string \" + connectionString + \"...\");\n\t\tclient.getCuratorListenable().addListener(new CuratorTreeCacheListener(client, listeners));\n\t\ttry {\n\t\t\tclient.getCuratorListenable().addListener(new CuratorTreeCacheListener(client, listeners));\n\t\t\tclient.start();\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Error starting Zookeeper TreeCache for connection string \" + connectionString + \"!\", e);\n\t\t\tclient.close();\n\t\t}\n\t\tsyncInProgress.set(true);\n\t} else {\n\t\tlogger.info(\"Zookeeper synchronization for connection string \" + connectionString + \" already in progress!\");\n\t}\n}", "CodeBleu_score": 42.85432079896772}, {"code": "public void sync(List<ZookeeperNodeListener> listeners){\n\t\tif (this.syncInProgress.get()) {\n\t\tLOGGER.info(\"Synchronization is already in progress.\");\n\t\treturn;\n\t}\n\tLOGGER.info(\"Starting synchronization.\");\n\ttry {\n\t\tthis.treeCache.getListenable().addListener(this.treeCacheListener);\n\t\tthis.treeCache.start();\n\t} catch (Exception e) {\n\t\tLOGGER.error(\"Error starting TreeCache.\", e);\n\t\tthis.treeCache.close();\n\t}\n\tthis.syncInProgress.set(true);\n\tfor (ZookeeperNodeListener listener : listeners) {\n\t\tlistener.onSyncStart();\n\t}\n}", "CodeBleu_score": 33.84730908854406}]}
{"instance_id": "6452f272f2d7", "generation_result": [{"code": "public void watchPathChildrenNode(String path, PathChildrenCacheListener listener) throws Exception{\n\t\tCuratorFramework client = getClient();\n\tclient.getCuratorListenable().addListener(new ConnectionStateListener() {\n\t\t@Override\n\t\tpublic void stateChanged(CuratorFramework client, ConnectionState newState) {\n\t\t\tif (newState == ConnectionState.LOST) {\n\t\t\t\tSystem.out.println(\"CuratorFramework client state changed to LOST\");\n\t\t\t} else if (newState == ConnectionState.CONNECTED) {\n\t\t\t\tSystem.out.println(\"CuratorFramework client state changed to CONNECTED\");\n\t\t\t} else if (newState == ConnectionState.RECONNECTED) {\n\t\t\t\tSystem.out.println(\"CuratorFramework client state changed to RECONNECTED\");\n\t\t\t}\n\t\t}\n\t});\n\tclient.start();\n\tPathChildrenCache cache = new PathChildrenCache(client, path, true);\n\tcache.start(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE);\n\tcache.getListenable().addListener(listener);\n}", "CodeBleu_score": 59.1782516066515}, {"code": "public void watchPathChildrenNode(String path, PathChildrenCacheListener listener) throws Exception{\n\t\tCuratorFramework client = getClient();\n\tPathChildrenCache cache = new PathChildrenCache(client, path, true);\n\tcache.start(TreeCache.StartMode.BUILD_INITIAL_CACHE);\n\tcache.getListenable().addListener(listener);\n}", "CodeBleu_score": 64.15396825172584}, {"code": "public void watchPathChildrenNode(String path, PathChildrenCacheListener listener) throws Exception{\n\t\tCuratorFramework client = CuratorFrameworkFactory.builder().connectString(Constant.ZK_ADDRESS).connectionTimeoutMs(3000).retryPolicy(new ExponentialBackoffRetry(1000, 3)).build();\n\tclient.start();\n\tclient.getConnectionStateListenable().addListener(new ConnectionStateListener() {\n\t\t@Override\n\t\tpublic void stateChanged(CuratorFramework curatorFramework, ConnectionState connectionState) {\n\t\t\tSystem.out.println(\"stateChanged \" + connectionState);\n\t\t}\n\t});\n\tPathChildrenCache cache = new PathChildrenCache(client, path, true);\n\tcache.start(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE);\n\tcache.getListenable().addListener(listener);\n\tcache.getListenable().addListener(new PathChildrenCacheListener() {\n\t\t@Override\n\t\tpublic void childEvent(CuratorFramework curatorFramework, PathChildrenCacheEvent pathChildrenCacheEvent) throws Exception {\n\t\t\tSystem.out.println(\"childEvent \" + pathChildrenCacheEvent);\n\t\t}\n\t});\n}", "CodeBleu_score": 59.257633037991454}]}
{"instance_id": "17f786e147c3", "generation_result": [{"code": "public void unregisterService(){\n\t\tCuratorFramework curatorClient = CuratorClient.getClient();\n\tList<String> servicePaths = new ArrayList<>();\n\ttry {\n\t\tservicePaths = curatorClient.getChildren().forPath(Constant.ZK_SERVICE_PATH);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Unable to retrieve service paths\", e);\n\t}\n\tfor (String servicePath : servicePaths) {\n\t\ttry {\n\t\t\tcuratorClient.delete().forPath(Constant.ZK_SERVICE_PATH + \"/\" + servicePath);\n\t\t\tlogger.info(\"Service \" + servicePath + \" unregistered\");\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Unable to unregister service \" + servicePath, e);\n\t\t}\n\t}\n\tcuratorClient.close();\n}", "CodeBleu_score": 18.552841765083546}, {"code": "public void unregisterService(){\n\t\tLogger logger = LoggerFactory.getLogger(getClass());\n\tlogger.info(\"Unregistering service\");\n\tList<String> paths = new ArrayList<>();\n\tCuratorFramework client = CuratorClient.getClient();\n\ttry {\n\t\tMap<String, RpcServiceInfo> services = ServiceUtil.getServices();\n\t\tfor (Map.Entry<String, RpcServiceInfo> entry : services.entrySet()) {\n\t\t\tRpcServiceInfo serviceInfo = entry.getValue();\n\t\t\tString path = Constant.SERVICE_PATH + serviceInfo.getServiceName();\n\t\t\tpaths.add(path);\n\t\t}\n\t\tfor (String path : paths) {\n\t\t\ttry {\n\t\t\t\tclient.delete().forPath(path);\n\t\t\t} catch (Exception e) {\n\t\t\t\tlogger.error(\"Error while unregistering service \" + path + \" : \" + e.getMessage());\n\t\t\t}\n\t\t}\n\t} finally {\n\t\tclient.close();\n\t}\n}", "CodeBleu_score": 25.732650537343705}, {"code": "public void unregisterService(){\n\t\tCuratorFramework client = CuratorClient.getClient();\n\ttry {\n\t\tlogger.info(\"Unregistering service: \" + ServiceUtil.getServiceName());\n\t\tList<String> paths = new ArrayList<String>();\n\t\tMap<String, RpcServiceInfo> serviceInfo = Constant.SERVICE_REGISTRY.get(ServiceUtil.getServiceName());\n\t\tfor (String path : serviceInfo.keySet()) {\n\t\t\tpaths.add(path);\n\t\t}\n\t\tfor (String path : paths) {\n\t\t\ttry {\n\t\t\t\tclient.delete().forPath(path);\n\t\t\t} catch (Exception e) {\n\t\t\t\tlogger.error(\"Error unregistering service: \" + ServiceUtil.getServiceName() + \" path: \" + path, e);\n\t\t\t}\n\t\t}\n\t} finally {\n\t\tclient.close();\n\t}\n}", "CodeBleu_score": 30.90186957165858}]}
{"instance_id": "32fec6cfa353", "generation_result": [{"code": "public void addListener(IZkStateListener listener){\n\t\tCompletableFuture.runAsync(() -> {\n\t\ttry {\n\t\t\tmakeClientReady();\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"Exception when making client ready\", e);\n\t\t}\n\t\tclient.subscribeStateChanges(listener);\n\t});\n}", "CodeBleu_score": 27.904307513009396}, {"code": "public void addListener(IZkStateListener listener){\n\t\tCompletableFuture<Void> future = new CompletableFuture<Void>();\n\ttry {\n\t\tfuture.complete(null);\n\t} catch (Exception e) {\n\t\tfuture.completeExceptionally(e);\n\t}\n\tfuture.thenRun(() -> {\n\t\ttry {\n\t\t\tthis.client.subscribeStateChanges(listener);\n\t\t} catch (Exception e) {\n\t\t\tLOGGER.error(\"Exception thrown while subscribing to state changes in Zookeeper client\", e);\n\t\t}\n\t});\n}", "CodeBleu_score": 28.906723917901918}, {"code": "public void addListener(IZkStateListener listener){\n\t\tif (this.listener == null) {\n\t\tthis.listener = listener;\n\t\tif (this.client.getState().equals(KeeperState.SyncConnected)) {\n\t\t\tmakeClientReady();\n\t\t} else {\n\t\t\tthis.client.subscribeStateChanges(listener);\n\t\t}\n\t}\n}", "CodeBleu_score": 27.525779960356623}]}
{"instance_id": "619d57562a76", "generation_result": [{"code": "public CuratorZookeeperClient(String serverAddr, String authority){\n\t\tthis(serverAddr, authority, 30000, 30000, 30000, 30000);\n}", "CodeBleu_score": 3.4102574467796716}, {"code": "public CuratorZookeeperClient(String serverAddr, String authority){\n\t\tthis(serverAddr, authority, 30000, 30000);\n}", "CodeBleu_score": 3.4102573676155714}, {"code": "public CuratorZookeeperClient(String serverAddr, String authority){\n\t\tthis(serverAddr, authority, 30000, 30000, 30000, 30000, 30000);\n}", "CodeBleu_score": 3.410257904926136}]}
{"instance_id": "9e7fb18946e4", "generation_result": [{"code": "public void removeChildListener(String path, ChildListener listener){\n\t\tif (path == null || path.length() == 0) {\n\t\tthrow new IllegalArgumentException(\"path is empty\");\n\t}\n\tif (listener == null) {\n\t\tthrow new IllegalArgumentException(\"listener is null\");\n\t}\n\tConcurrentMap<String, CopyOnWriteArraySet<ChildListener>> childListeners = this.childListeners;\n\tCopyOnWriteArraySet<ChildListener> listeners = childListeners.get(path);\n\tif (listeners!= null) {\n\t\tlisteners.remove(listener);\n\t\tif (listeners.isEmpty()) {\n\t\t\tchildListeners.remove(path);\n\t\t}\n\t}\n}", "CodeBleu_score": 42.30467083891646}, {"code": "public void removeChildListener(String path, ChildListener listener){\n\t\tif (path == null || listener == null) {\n\t\treturn;\n\t}\n\tsynchronized (this) {\n\t\tConcurrentMap<String, Set<ChildListener>> pathListeners = childListenerMap.get(path);\n\t\tif (pathListeners!= null) {\n\t\t\tSet<ChildListener> listeners = pathListeners.get(path);\n\t\t\tif (listeners!= null) {\n\t\t\t\tlisteners.remove(listener);\n\t\t\t\tif (listeners.isEmpty()) {\n\t\t\t\t\tpathListeners.remove(path);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 39.877251133975655}, {"code": "public void removeChildListener(String path, ChildListener listener){\n\t\tif (path == null) {\n\t\tthrow new IllegalArgumentException(\"path is null\");\n\t}\n\tif (listener == null) {\n\t\tthrow new IllegalArgumentException(\"listener is null\");\n\t}\n\tConcurrentMap<String, Set<ChildListener>> childListenerMap = this.childListenerMap;\n\tSet<ChildListener> childListenerSet = childListenerMap.get(path);\n\tif (childListenerSet!= null) {\n\t\tchildListenerSet.remove(listener);\n\t\tif (childListenerSet.isEmpty()) {\n\t\t\tchildListenerMap.remove(path);\n\t\t}\n\t}\n}", "CodeBleu_score": 39.042674265826875}]}
{"instance_id": "2c3fae642654", "generation_result": [{"code": "static int watcher_reconnect_to_zookeeper(zhandle_t *zh){\n\t\tint rc;\n\tint i;\n\tstruct qconf_env *env;\n\tstruct qconf_table_watcher *watcher;\n\tstruct qconf_table_watcher *old_watcher;\n\tstruct qconf_table_watcher *new_watcher;\n\tstruct qconf_table_watcher *tmp_watcher;\n\tstruct qconf_table_watcher *tmp_watcher_next;\n\tstruct qconf_table_watcher *tmp_watcher_prev;\n\tstruct qconf_table_watcher *tmp_watcher_tmp;\n\tstruct qconf_table_watcher *tmp_watcher_tmp_next;\n\tstruct qconf_table_watcher *tmp_watcher_tmp_prev;\n\tstruct qconf_table_watcher *tmp_watcher_tmp_tmp;\n\tstruct qconf_table_watcher *tmp_watcher_tmp_tmp_next;\n\tstruct qconf_table_watcher *tmp_watcher_tmp_tmp_prev;\n\tstruct qconf_table_watcher *tmp_watcher_tmp_tmp_tmp;\n\tstruct qconf_table_watcher *tmp_watcher_tmp_tmp_tmp_next;\n\tstruct qconf_table_watcher *tmp_watcher_tmp_tmp_tmp_prev;\n\tstruct qconf_table_watcher *tmp_watcher_tmp_tmp_tmp_tmp;\n\tstruct qconf_table_watcher *tmp_watcher_tmp_tmp_tmp_tmp_next;\n\tstruct qconf_table_watcher *tmp_watcher_tmp_tmp_tmp_tmp_prev;\n\tstruct qconf_table_watcher *tmp_watcher_tmp_tmp_tmp_tmp_tmp;\n\tstruct qconf_table_watcher *tmp_watcher_tmp_tmp_tmp_tmp_tmp_next;\n\tstruct qconf_table_watcher *tmp_watcher_tmp_tmp_tmp_tmp_tmp_prev;\n\tstruct qconf_table_watcher *tmp_watcher_tmp_tmp_tmp_tmp_tmp_tmp;\n\tstruct qconf_table_watcher *tmp_watcher_tmp_tmp_tmp_tmp_tmp_tmp_next;\n\tstruct qconf_table_watcher *tmp_watcher_tmp_tmp_tmp_tmp_tmp_tmp_prev;\n\tstruct qconf", "CodeBleu_score": 3.034387794293283}, {"code": "static int watcher_reconnect_to_zookeeper(zhandle_t *zh){\n\t\tif (zh == NULL) {\n\t\treturn QCONF_ZOOKEEPER_NULL_HANDLE;\n\t}\n\n\tqconf_idc_host_info_t *idc_host_info = NULL;\n\tint ret = qconf_shm_get_idc_host_info(zh, &idc_host_info);\n\tif (ret!= QCONF_OK) {\n\t\treturn ret;\n\t}\n\n\tret = qconf_shm_delete_idc_host_info(zh);\n\tif (ret!= QCONF_OK) {\n\t\treturn ret;\n\t}\n\n\tzhandle_t *new_zh = NULL;\n\tret = qconf_zoo_init(idc_host_info, &new_zh);\n\tif (ret!= QCONF_OK) {\n\t\treturn ret;\n\t}\n\n\tret = qconf_shm_init_idc_host_info(new_zh);\n\tif (ret!= QCONF_OK) {\n\t\treturn ret;\n\t}\n\n\tret = qconf_watcher_init(new_zh);\n\tif (ret!= QCONF_OK) {\n\t\treturn ret;\n\t}\n\n\treturn QCONF_OK;\n}", "CodeBleu_score": 23.032718813253837}, {"code": "static int watcher_reconnect_to_zookeeper(zhandle_t *zh){\n\t\tint ret = 0;\n\n\tif (zh == NULL) {\n\t\tqconf_log(QCONF_LOG_ERROR, \"zh is null\");\n\t\treturn QCONF_ERR_PARAM_NULL;\n\t}\n\n\tqconf_log(QCONF_LOG_DEBUG, \"watcher_reconnect_to_zookeeper zh:%p\", zh);\n\n\tif (qconf_shm_get_idc_host_info(zh)!= 0) {\n\t\tqconf_log(QCONF_LOG_ERROR, \"qconf_shm_get_idc_host_info error\");\n\t\treturn QCONF_ERR_GET_IDC_HOST_INFO;\n\t}\n\n\tif (qconf_shm_del_idc_host_info(zh)!= 0) {\n\t\tqconf_log(QCONF_LOG_ERROR, \"qconf_shm_del_idc_host_info error\");\n\t\treturn QCONF_ERR_DEL_IDC_HOST_INFO;\n\t}\n\n\tif (qconf_shm_get_idc_host_info(zh)!= 0) {\n\t\tqconf_log(QCONF_LOG_ERROR, \"qconf_shm_get_idc_host_info error\");\n\t\treturn QCONF_ERR_GET_IDC_HOST_INFO;\n\t}\n\n\tif (qconf_shm_del_idc_host_info(zh)!= 0) {\n\t\tqconf_log(QCONF_LOG_ERROR, \"qconf_shm_del_idc_host_info error\");\n\t\treturn QCONF_ERR_DEL_IDC_HOST_INFO;\n\t}\n\n\tif (qconf_shm_get_idc_host_info(zh)!= 0) {\n\t\tqconf_log(QCONF_LOG_ERROR, \"qconf_shm_get_idc_host_info error\");\n\t\treturn QCONF_ERR_GET_IDC_HOST_INFO;\n\t}\n\n\tif (qconf_shm_del_idc_host_info(zh)!= 0) {\n\t\tqconf_log(QCONF_LOG_ERROR, \"qconf_shm_del_idc_host_info error\");\n\t\treturn QCONF_ERR_DEL", "CodeBleu_score": 25.660384637488416}]}
{"instance_id": "0b5ab34e1dd9", "generation_result": [{"code": "static void init_env_for_zk(zhandle_t *zh, const string &idc_host, const string &idc){\n\t\t// initialize the environment for a Zookeeper handle with a specified IDC host and IDC\n\t// update internal tables with the handle and host information\n\t// check the connection state of the Zookeeper handle\n\t// if the handle is not connected, exit early\n\t// if connected, register the current host on the Zookeeper server and set a watcher on the notify node\n\t// depending on the result of setting the watcher, add the IDC to a gray list or log an error if the operation fails\n\t// initialize the environment for a Zookeeper handle with a specified IDC host and IDC\n\t// update internal tables with the handle and host information\n\t// check the connection state of the Zookeeper handle\n\t// if the handle is not connected, exit early\n\t// if connected, register the current host on the Zookeeper server and set a watcher on the notify node\n\t// depending on the result of setting the watcher, add the IDC to a gray list or log an error if the operation fails\n\t// initialize the environment for a Zookeeper handle with a specified IDC host and IDC\n\t// update internal tables with the handle and host information\n\t// check the connection state of the Zookeeper handle\n\t// if the handle is not connected, exit early\n\t// if connected, register the current host on the Zookeeper server and set a watcher on the notify node\n\t// depending on the result of setting the watcher, add the IDC to a gray list or log an error if the operation fails\n\t// initialize the environment for a Zookeeper handle with a specified IDC host and IDC\n\t// update internal tables with the handle and host information\n\t// check the connection state of the Zookeeper handle\n\t// if the handle is not connected, exit early\n\t// if connected, register the current host on the Zookeeper server and set a watcher on the notify node\n\t// depending on the result of setting the watcher, add the IDC to a gray list or log an error if the operation fails\n\t// initialize the environment for a Zookeeper handle with a specified IDC host and IDC\n\t// update internal tables with the handle and host information\n\t// check the connection state of the Zookeeper handle\n\t// if the handle is not connected, exit early\n\t// if connected, register the current host on the Zookeeper server and set a watcher on the notify node\n\t// depending on the result of setting the watcher, add the IDC to a gray list or", "CodeBleu_score": 4.272063017864065}, {"code": "static void init_env_for_zk(zhandle_t *zh, const string &idc_host, const string &idc){\n\t\t// Update the internal tables with the handle and host information.\n\tg_zk_handle_map[zh] = idc_host;\n\tg_zk_idc_map[idc_host] = idc;\n\n\t// Check the connection state of the Zookeeper handle.\n\tif (ZOK!= zoo_state(zh)) {\n\t\treturn;\n\t}\n\n\t// Register the current host on the Zookeeper server.\n\tstring notify_path = g_notify_path;\n\tnotify_path += \"/\";\n\tnotify_path += idc_host;\n\tint rc = zoo_exists(zh, notify_path.c_str(), 0, 0);\n\tif (ZNONODE == rc) {\n\t\trc = zoo_create(zh, notify_path.c_str(), \"\", 0, &ZOO_OPEN_ACL_UNSAFE, 0, 0, 0);\n\t\tif (ZOK!= rc) {\n\t\t\tQCONF_LOG_ERROR(\"create notify node [%s] failed, rc = %d\", notify_path.c_str(), rc);\n\t\t\treturn;\n\t\t}\n\t} else if (ZOK!= rc) {\n\t\tQCONF_LOG_ERROR(\"check notify node [%s] failed, rc = %d\", notify_path.c_str(), rc);\n\t\treturn;\n\t}\n\n\t// Set a watcher on the notify node.\n\trc = zoo_awexists(zh, notify_path.c_str(), notify_watcher, 0);\n\tif (ZOK!= rc) {\n\t\tQCONF_LOG_ERROR(\"set notify node watcher [%s] failed, rc = %d\", notify_path.c_str(), rc);\n\t}\n}", "CodeBleu_score": 41.43161615329487}, {"code": "static void init_env_for_zk(zhandle_t *zh, const string &idc_host, const string &idc){\n\t\tif (zh == NULL) {\n\t\treturn;\n\t}\n\n\t// Update the IDC and host information in the internal tables\n\tQconf::instance()->set_idc_host(idc, idc_host);\n\n\t// Check the connection state of the Zookeeper handle\n\tif (zh->state!= ZOO_CONNECTED_STATE) {\n\t\treturn;\n\t}\n\n\t// Register the current host on the Zookeeper server\n\tstring host_path = Qconf::instance()->get_zk_root() + \"/\" + idc + \"/host\";\n\tif (Qconf::instance()->register_host(zh, host_path)!= ZOK) {\n\t\tQconf::instance()->log_error(\"Register host failed\");\n\t\treturn;\n\t}\n\n\t// Set a watcher on the notify node\n\tstring notify_path = Qconf::instance()->get_zk_root() + \"/\" + idc + \"/notify\";\n\tQconf::instance()->set_watcher(zh, notify_path);\n}", "CodeBleu_score": 33.07972700507128}]}
{"instance_id": "19fc5847a7c5", "generation_result": [{"code": "def make_digest_acl_credential(username, password)\n\t\n    digest = hashlib.sha1(password.encode()).digest()\n    encoded_digest = b64encode(digest).decode()\n    return \"%s:%s\" % (username, encoded_digest)\n\n", "CodeBleu_score": 18.95902603504058}, {"code": "def make_digest_acl_credential(username, password)\n\t\n    hash_object = hashlib.sha1(password.encode('utf-8'))\n    return username + \":\" + b64encode(hash_object.digest()).decode('utf-8')\n\n", "CodeBleu_score": 28.246542428472353}, {"code": "def make_digest_acl_credential(username, password)\n\t\n    digest_acl_credential = username + ':' + b64encode(hashlib.sha1(password).digest()).decode()\n    return digest_acl_credential\n\n", "CodeBleu_score": 23.340186450919155}]}
{"instance_id": "4a062391deb0", "generation_result": [{"code": "def holds_lock(self)\n\t\n    return self._lock_path is not None and self.client.get(self._lock_path)[0] == self.instance_id\n\n", "CodeBleu_score": 11.657922019196912}, {"code": "def holds_lock(self)\n\t\n    if self._processing_element is None:\n        return False\n    lock_path = self._get_lock_path()\n    try:\n        lock_value = self._client.get(lock_path)[0]\n    except NoNodeError:\n        return False\n    return lock_value == self._id\n\n", "CodeBleu_score": 38.90206313578306}, {"code": "def holds_lock(self)\n\t\n    try:\n        if self.processing_element is None:\n            return False\n        lock_path = self.get_lock_path()\n        lock_value = self.client.get(lock_path)[0]\n        return lock_value == self.instance_id\n    except NoNodeError:\n        return False\n\n", "CodeBleu_score": 42.9777724155801}]}
{"instance_id": "aaac7523d2b5", "generation_result": [{"code": "def consume(self)\n\t\n    if self.processing_element is not None:\n        if self.processing_element.acquired_lock is not None:\n            self.processing_element.acquired_lock.delete()\n        self.processing_element = None\n        return True\n    else:\n        return False\n\n", "CodeBleu_score": 28.403762246578733}, {"code": "def consume(self)\n\t\n    with self._lock:\n        if self._processing is not None:\n            if self._processing.is_set():\n                self._processing.clear()\n                self._processing = None\n                return True\n            else:\n                return False\n        else:\n            return False\n\n", "CodeBleu_score": 32.32543387511897}, {"code": "def consume(self)\n\t\n    try:\n        if self.processing_element is None:\n            raise ValueError(\"No processing element has been set\")\n        with self.lock.transaction() as tx:\n            if self.processing_element!= tx.get(self.path)[0]:\n                raise ValueError(\"Processing element is not the same as the one held\")\n            tx.delete(self.path)\n            tx.delete(self.processing_element)\n            self.processing_element = None\n        return True\n    except (ForceRetryError, NoNodeError, NodeExistsError):\n        return False\n\n", "CodeBleu_score": 42.97814947017358}]}
{"instance_id": "bed0c998ac4c", "generation_result": [{"code": "def _read_socket(self, read_timeout)\n\t\n    if self.state == KeeperState.CONNECTED:\n        try:\n            self.socket.settimeout(read_timeout)\n            header = self.socket.recv(self.header_size)\n            if len(header) < self.header_size:\n                raise ConnectionDropped(\"Socket closed\")\n            if not header:\n                raise ConnectionDropped(\"Socket closed\")\n            xid, length = struct.unpack(\">iI\", header)\n            if length < 0:\n                raise ConnectionDropped(\"Socket closed\")\n            if length > self.max_packet_size:\n                raise ConnectionDropped(\"Socket closed\")\n            if xid == WATCH_XID:\n                self._process_watch_events(length)\n            elif xid == AUTH_XID:\n                self._process_auth_response(length)\n            elif xid == PING_XID:\n                self._process_ping(length)\n            else:\n                self._process_response(xid, length)\n        except (socket.timeout, socket.error, ConnectionDropped) as e:\n            self.state = KeeperState.CLOSED\n            self.logger.error(\n                \"Socket error %s, closing connection\",\n                e,\n                exc_info=True,\n            )\n            raise e\n        except Exception as e:\n            self.state = KeeperState.CLOSED\n            self.logger.error(\"Unexpected error %s, closing connection\", e)\n            raise e\n\n", "CodeBleu_score": 33.7927987959309}, {"code": "def _read_socket(self, read_timeout)\n\t\n    if not self.connected:\n        raise ConnectionDropped(\"Connection has been closed\")\n    if self.read_timeout is not None:\n        read_timeout = self.read_timeout\n    else:\n        read_timeout = self.timeout\n    try:\n        self._read_header(read_timeout)\n    except socket.timeout:\n        raise\n    except ConnectionDropped:\n        raise\n    except Exception as e:\n        raise ConnectionDropped(e)\n    if self.header.xid == Ping.XID:\n        self.logger.debug(\"Received ping\")\n        self.outstanding_ping = False\n        return\n    elif self.header.xid == SASL.XID:\n        if self.sasl_state == SASL.SASL_STATE_AUTH:\n            self.logger.debug(\"Received SASL authentication response\")\n            if self.sasl_state == SASL.SASL_STATE_AUTH:\n                if self.sasl_auth_handler(self.sasl_response):\n                    self.sasl_state = SASL.SASL_STATE_AUTH_DONE\n                    self.logger.debug(\"SASL authentication succeeded\")\n                    self.sasl_response = None\n                else:\n                    self.logger.debug(\"SASL authentication failed\")\n                    self.sasl_state = SASL.SASL_STATE_AUTH_FAILED\n                    self.sasl_response = None\n                    raise AuthFailedError(\"SASL authentication failed\")\n            else:\n                raise SASLException(\"SASL authentication failed\")\n        else:\n            raise SASLException(\"SASL authentication failed\")\n    elif self.header.xid == Watch.XID:\n        self.logger.debug(\"Received watch event\")\n        self.handle_watch(self.header, self.buffer)\n    else:\n        self.logger.debug(\"Received message with xid %d\", self.header.xid)\n        self.handle_response(self.header, self.buffer)\n\n", "CodeBleu_score": 30.47846503547287}, {"code": "def _read_socket(self, read_timeout)\n\t\n    try:\n        header = self.socket.recv(ReplyHeader.HEADER_LENGTH)\n    except socket.timeout:\n        raise ConnectionDropped()\n    except socket.error as e:\n        if e.errno == errno.ECONNRESET:\n            raise ConnectionDropped()\n        else:\n            raise e\n    except Exception:\n        raise ConnectionDropped()\n    if not header:\n        raise ConnectionDropped()\n    header = ReplyHeader.from_bytes(header)\n    if header.xid == Ping.XID:\n        self.logger.debug(\"Received ping from server\")\n        self.ping_outstanding = False\n        return\n    elif header.xid == SASL.XID:\n        if header.type == SASL.AUTH_RESPONSE:\n            if header.error:\n                raise AuthFailedError(header.error)\n            else:\n                self.logger.debug(\"Authentication successful\")\n                self.sasl_authenticated = True\n                return\n        else:\n            raise SASLException(\"Unexpected SASL response: %s\" % header.type)\n    elif header.xid == Watch.XID:\n        self.logger.debug(\"Received watch event: %s\" % WatchedEvent(header))\n        self.watch_callback(header)\n        return\n    elif header.xid in (\n        Exists.XID,\n        GetChildren.XID,\n        GetChildren2.XID,\n        Transaction.XID,\n    ):\n        self.logger.debug(\"Received response for xid: %s\" % header.xid)\n        if header.error:\n            raise KazooException(header.error)\n        else:\n            self.process_response(header)\n            return\n    else:\n        self.logger.debug(\"Received unknown response: %s\" % header.xid)\n        return\n\n", "CodeBleu_score": 32.492296263788944}]}
{"instance_id": "b10e2c2c410b", "generation_result": [{"code": "def zk_loop(self)\n\t\n    self.log.debug(\"Starting Zookeeper loop\")\n    self.connection_stopped.clear()\n    if not self.connected:\n        self.log.debug(\"Connecting to Zookeeper\")\n        try:\n            self.retry(self.connect)\n        except (\n            socket.error,\n            ssl.SSLError,\n            SASLException,\n            AuthFailedError,\n            ConnectionDropped,\n            SessionExpiredError,\n            NoNodeError,\n            EXCEPTIONS,\n        ) as e:\n            self.log.warning(\n                \"Connection attempt failed: %s\",\n                e,\n                exc_info=True,\n            )\n            self.connected = False\n        else:\n            self.log.debug(\"Connected to Zookeeper\")\n            self.connected = True\n            self.state = KeeperState.CONNECTED\n            self.session_callback(self.state)\n    self.connection_stopped.set()\n    self.log.debug(\"Stopping Zookeeper loop\")\n\n", "CodeBleu_score": 41.64226327745496}, {"code": "def zk_loop(self)\n\t\n    logging.debug(\"Zookeeper session started\")\n    self.connection_stopped.clear()\n    while not self.client_state.is_stopped():\n        try:\n            self.retry(self.connect)\n            break\n        except (\n            RetryFailedError,\n            ForceRetryError,\n            ConnectionDropped,\n            SASLException,\n            AuthFailedError,\n            SessionExpiredError,\n            NoNodeError,\n            EXCEPTIONS,\n        ) as e:\n            logging.warning(\"Failed to connect to Zookeeper: %s\", e)\n            self.client_state.set_state(KeeperState.DISCONNECTED)\n            time.sleep(self.retry_policy.sleep_time())\n    self.connection_stopped.set()\n    logging.debug(\"Zookeeper session stopped\")\n\n", "CodeBleu_score": 43.07932929925863}, {"code": "def zk_loop(self)\n\t\n    if self._connection_stopped.is_set():\n        return\n    self._log(logging.INFO, \"starting Zookeeper loop\")\n    self._connection_stopped.clear()\n    try:\n        while not self._connection_stopped.is_set():\n            try:\n                self._connect()\n                break\n            except (\n                AuthFailedError,\n                ConnectionDropped,\n                SessionExpiredError,\n                SASLException,\n                ForceRetryError,\n                RetryFailedError,\n                NoNodeError,\n            ) as e:\n                self._log(logging.WARNING, \"Zookeeper connection failed: %s\", e)\n                if self._connection_stopped.is_set():\n                    break\n                self._retry_policy.retry(e)\n        if not self._connection_stopped.is_set():\n            self._log(logging.INFO, \"stopping Zookeeper loop\")\n            self._connection_stopped.set()\n            self._trigger_session_event(KeeperState.CLOSED)\n            self._log(logging.INFO, \"stopped Zookeeper loop\")\n    except Exception as e:\n        self._log(logging.ERROR, \"Unexpected error in Zookeeper loop: %s\", e)\n        self._connection_stopped.set()\n        self._trigger_session_event(KeeperState.CLOSED)\n\n", "CodeBleu_score": 42.91210934487395}]}
{"instance_id": "42b3d26a3540", "generation_result": [{"code": "def _partitioner(self, identifier, members, partitions)\n\t\n    members.sort()\n    partitions.sort()\n    try:\n        index = members.index(identifier)\n    except ValueError:\n        index = 0\n    return partitions[index::len(members)]\n\n", "CodeBleu_score": 46.30928650234759}, {"code": "def _partitioner(self, identifier, members, partitions)\n\t\n    sorted_members = sorted(members)\n    sorted_partitions = sorted(partitions)\n    try:\n        member_index = sorted_members.index(identifier)\n    except ValueError:\n        member_index = -1\n    return sorted_partitions[member_index::len(sorted_members)]\n\n", "CodeBleu_score": 45.706790978898596}, {"code": "def _partitioner(self, identifier, members, partitions)\n\t\n    sorted_members = sorted(members)\n    sorted_partitions = sorted(partitions)\n    index = sorted_members.index(identifier)\n    return sorted_partitions[index::len(members)]\n\n", "CodeBleu_score": 37.493399878959686}]}
{"instance_id": "738974d4e9c0", "generation_result": [{"code": "def leave(self)\n\t\n    try:\n        self._barrier_leave()\n    except Exception:\n        self._barrier_leave_cleanup()\n    finally:\n        self.participating = False\n\n", "CodeBleu_score": 40.750286607637925}, {"code": "def leave(self)\n\t\n    self.zk.delete(self.path)\n    self.zk.delete(self.participating_path)\n    self.zk.delete(self.barrier_path)\n    self.zk.delete(self.barrier_path + '/state')\n    self.zk.delete(self.barrier_path + '/participating')\n    self.zk.delete(self.barrier_path + '/waiting')\n    self.zk.delete(self.barrier_path + '/participants')\n    self.zk.delete(self.barrier_path + '/leader')\n    self.zk.delete(self.barrier_path + '/leader/state')\n    self.zk.delete(self.barrier_path + '/leader/participating')\n    self.zk.delete(self.barrier_path + '/leader/waiting')\n    self.zk.delete(self.barrier_path + '/leader/participants')\n    self.zk.delete(self.barrier_path + '/leader/leader')\n    self.zk.delete(self.barrier_path + '/leader/leader/state')\n    self.zk.delete(self.barrier_path + '/leader/leader/participating')\n    self.zk.delete(self.barrier_path + '/leader/leader/waiting')\n    self.zk.delete(self.barrier_path + '/leader/leader/participants')\n    self.zk.delete(self.barrier_path + '/leader/leader/leader')\n    self.zk.delete(self.barrier_path + '/leader/leader/leader/state')\n    self.zk.delete(self.barrier_path + '/leader/leader/leader/participating')\n    self.zk.delete(self.barrier_path + '/leader/leader/leader/waiting')\n    self.zk.delete(self.barrier_path + '/leader/leader/leader/participants')\n    self.zk.delete(self.barrier_path + '/leader/leader/leader/leader')\n    self.zk.delete(self.barrier_path + '/leader/leader/leader/leader/state')\n    self.zk.delete(self.barrier_path + '/leader/leader/leader/leader/participating')\n    self.zk.delete(self.barrier_path + '/leader/leader/leader/leader/waiting')\n    self.zk.delete(self.barrier_", "CodeBleu_score": 24.169190433111726}, {"code": "def leave(self)\n\t\n    if self.participating:\n        self.participating = False\n        try:\n            self.barrier.leave()\n        except KazooException:\n            pass\n        finally:\n            self.barrier.close()\n            self.barrier = None\n            self.participating = False\n            self.zk.delete(self.path, recursive=True)\n\n", "CodeBleu_score": 30.821231130714928}]}
{"instance_id": "a321fef7d100", "generation_result": [{"code": "public Result start(){\n\t\ttry {\n\t\tif (this.service.isServerRunning()) {\n\t\t\treturn Result.success();\n\t\t} else {\n\t\t\tthis.service.startServer();\n\t\t\treturn Result.success();\n\t\t}\n\t} catch (Exception e) {\n\t\tLogger.getLogger(HFtpService.class).error(\"start error\", e);\n\t\treturn Result.error(e.getMessage());\n\t}\n}", "CodeBleu_score": 29.497250005511123}, {"code": "public Result start(){\n\t\ttry {\n\t\treturn new Result(hftpService.start());\n\t} catch (Exception e) {\n\t\tlogger.error(\"start\", e);\n\t\treturn new Result(e);\n\t}\n}", "CodeBleu_score": 20.711872251049844}, {"code": "public Result start(){\n\t\ttry {\n\t\tif (HftpService.getInstance().isServerRunning()) {\n\t\t\treturn new Result(Result.SUCCESS, \"HDFS over FTP server is already running.\");\n\t\t}\n\t\tHftpService.getInstance().startServer();\n\t\treturn new Result(Result.SUCCESS, \"HDFS over FTP server is started.\");\n\t} catch (Exception e) {\n\t\treturn new Result(Result.ERROR, \"HDFS over FTP server start failed.\");\n\t}\n}", "CodeBleu_score": 32.56708105999287}]}
{"instance_id": "24b088689114", "generation_result": [{"code": "public Result stop(){\n\t\tResult result = new Result();\n\ttry {\n\t\tif (ftpService.isFtpServerRunning()) {\n\t\t\tftpService.stopFtpServer();\n\t\t\tresult.setResult(\"success\");\n\t\t\tresult.setMsg(\"FTP Server stopped.\");\n\t\t\treturn result;\n\t\t} else {\n\t\t\tresult.setResult(\"failure\");\n\t\t\tresult.setMsg(\"FTP Server is not running.\");\n\t\t\treturn result;\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(\"stopFtpServer error\", e);\n\t\tresult.setResult(\"failure\");\n\t\tresult.setMsg(\"FTP Server stop error.\");\n\t\treturn result;\n\t}\n}", "CodeBleu_score": 30.72746949201121}, {"code": "public Result stop(){\n\t\tResult result = new Result();\n\ttry {\n\t\tif (HFtpService.isRunning()) {\n\t\t\tHFtpService.stop();\n\t\t\tresult.setSuccess(true);\n\t\t\tresult.setMessage(\"FTP Server Stopped\");\n\t\t} else {\n\t\t\tresult.setSuccess(false);\n\t\t\tresult.setMessage(\"FTP Server Not Running\");\n\t\t}\n\t} catch (Exception e) {\n\t\tresult.setSuccess(false);\n\t\tresult.setMessage(e.getMessage());\n\t}\n\treturn result;\n}", "CodeBleu_score": 31.515074892163554}, {"code": "public Result stop(){\n\t\ttry {\n\t\tif (HFtpService.getInstance().isFtpServerRunning()) {\n\t\t\tHFtpService.getInstance().stopFtpServer();\n\t\t\treturn new Result(true, \"FTP server stopped successfully\");\n\t\t} else {\n\t\t\treturn new Result(false, \"FTP server is not running\");\n\t\t}\n\t} catch (Exception e) {\n\t\tLogger.getLogger(this.getClass()).error(e.getMessage(), e);\n\t\treturn new Result(false, e.getMessage());\n\t}\n}", "CodeBleu_score": 40.196394754093326}]}
{"instance_id": "af0884ffda66", "generation_result": [{"code": "public AuthorizationRequest authorize(AuthorizationRequest request){\n\t\tlogger.info(\"AuthorizationRequest authorize(AuthorizationRequest request)\");\n\tList<Authority> authorities = getAuthorities();\n\tif (authorities.isEmpty()) {\n\t\treturn null;\n\t}\n\tfor (Authority authority : authorities) {\n\t\trequest = authority.authorize(request);\n\t\tif (request == null) {\n\t\t\treturn null;\n\t\t}\n\t}\n\treturn request;\n}", "CodeBleu_score": 46.09811388213513}, {"code": "public AuthorizationRequest authorize(AuthorizationRequest request){\n\t\tfinal Logger logger = Logger.getLogger(getClass());\n\tlogger.debug(\"authorize\");\n\tlogger.debug(\"    request: \" + request);\n\tList<Authority> authorities = getAuthorities();\n\tif (authorities == null || authorities.isEmpty()) {\n\t\treturn null;\n\t}\n\tList<Authority> authorities2 = new ArrayList<Authority>();\n\tfor (Authority authority : authorities) {\n\t\tlogger.debug(\"    authority: \" + authority);\n\t\tif (authority.authorize(request)) {\n\t\t\tlogger.debug(\"    authority.authorize(request): \" + request);\n\t\t\tauthorities2.add(authority);\n\t\t}\n\t}\n\tif (authorities2.isEmpty()) {\n\t\treturn null;\n\t}\n\tlogger.debug(\"    authorities2: \" + authorities2);\n\tCollections.sort(authorities2);\n\tlogger.debug(\"    authorities2: \" + authorities2);\n\trequest.setAuthorities(authorities2);\n\treturn request;\n}", "CodeBleu_score": 44.360770055834195}, {"code": "public AuthorizationRequest authorize(AuthorizationRequest request){\n\t\tif (request == null) {\n\t\tthrow new IllegalArgumentException(\"request cannot be null\");\n\t}\n\tList<Authority> authorities = getAuthorities();\n\tif (authorities.size() == 0) {\n\t\treturn null;\n\t}\n\tfor (Authority authority : authorities) {\n\t\tif (authority.authorize(request)) {\n\t\t\treturn request;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 41.42373953768372}]}
{"instance_id": "920d28a0fe76", "generation_result": [{"code": "public boolean mkdir(){\n\t\tboolean success = false;\n\ttry {\n\t\tFileSystem fs = FileSystem.get(hdfsConf);\n\t\tPath fullPath = new Path(this.path);\n\t\tsuccess = fs.mkdirs(fullPath);\n\t} catch (IOException e) {\n\t\tLOGGER.error(\"mkdir failed\", e);\n\t}\n\treturn success;\n}", "CodeBleu_score": 42.88251384610912}, {"code": "public boolean mkdir(){\n\t\ttry {\n\t\tFileSystem fs = FileSystem.get(hdfsConf);\n\t\tfs.mkdirs(fullPath);\n\t\treturn true;\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 73.23327430514426}, {"code": "public boolean mkdir(){\n\t\ttry {\n\t\tFileSystem fileSystem = FileSystem.get(hdfsConfiguration);\n\t\tPath fullPath = new Path(hdfsConfiguration.get(\"dfs.path\", \"/\"), path);\n\t\tboolean success = fileSystem.mkdirs(fullPath);\n\t\tif (success) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\tlogger.error(\"Failed to create directory at path: \" + path);\n\t\t\treturn false;\n\t\t}\n\t} catch (IOException e) {\n\t\tlogger.error(\"IOException occurred while creating directory at path: \" + path);\n\t\te.printStackTrace();\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 50.0888626895429}]}
{"instance_id": "a2b04232d387", "generation_result": [{"code": "public boolean delete(){\n\t\tString path = getFullPath();\n\tif (path == null) {\n\t\treturn false;\n\t}\n\ttry {\n\t\tFileSystem fs = HdfsUser.getFileSystem();\n\t\tfs.delete(new Path(path), true);\n\t\treturn true;\n\t} catch (IOException e) {\n\t\tLOGGER.error(\"IOException occurred when deleting file: \" + path, e);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 52.1124403830313}, {"code": "public boolean delete(){\n\t\ttry {\n\t\tFileSystem fs = HdfsUser.getFileSystem();\n\t\tfs.delete(new Path(fullPath), true);\n\t\treturn true;\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 77.31759895859953}, {"code": "public boolean delete(){\n\t\tboolean result = false;\n\ttry {\n\t\tFileSystem fs = FileSystem.get(new Configuration());\n\t\tPath fullPath = new Path(path);\n\t\tresult = fs.delete(fullPath, true);\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n\treturn result;\n}", "CodeBleu_score": 48.740205901537614}]}
{"instance_id": "3407087c9af6", "generation_result": [{"code": "public boolean move(FtpFile ftpFile){\n\t\tString parentPath = ftpFile.getParent().getAbsolutePath();\n\tString fileName = ftpFile.getName();\n\tString newPath = parentPath + \"/\" + fileName;\n\tFileSystem fs = HdfsUser.getFileSystem();\n\ttry {\n\t\tfs.rename(parentPath, newPath);\n\t\treturn true;\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 60.5636478171095}, {"code": "public boolean move(FtpFile ftpFile){\n\t\ttry {\n\t\tFileSystem fs = HdfsUser.getFileSystem();\n\t\tPath src = new Path(ftpFile.getAbsolutePath());\n\t\tPath dest = new Path(ftpFile.getParent().getAbsolutePath() + \"/\" + ftpFile.getName());\n\t\tfs.rename(src, dest);\n\t\treturn true;\n\t} catch (IOException e) {\n\t\tlogger.error(e.getMessage());\n\t\te.printStackTrace();\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 53.630478747058966}, {"code": "public boolean move(FtpFile ftpFile){\n\t\tLogger logger = LoggerFactory.getLogger(HdfsUser.class);\n\tlogger.info(\"move\");\n\ttry {\n\t\tFileSystem fs = FileSystem.get(new URI(ftpFile.getFileSystem().getUri()), ftpFile.getFileSystem().getConfiguration());\n\t\tString parent = ftpFile.getParent().getAbsolutePath();\n\t\tString name = ftpFile.getName();\n\t\tString newPath = parent + \"/\" + name;\n\t\tfs.rename(ftpFile.getAbsolutePath(), newPath);\n\t\treturn true;\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t} catch (URISyntaxException e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 53.36885662158109}]}
{"instance_id": "91227000a139", "generation_result": [{"code": "public List<FtpFile> listFiles(){\n\t\t// Get the HDFS file system instance\n\tFileSystem fs = HdfsUser.getFileSystem();\n\t// Get the base directory's virtual path\n\tString baseDirPath = this.getBasePath();\n\t// Get the base directory's virtual path\n\tString baseDirPath = this.getBasePath();\n\t// Get the base directory's virtual path\n\tString baseDirPath = this.getBasePath();\n\t// Get the base directory's virtual path\n\tString baseDirPath = this.getBasePath();\n\t// Get the base directory's virtual path\n\tString baseDirPath = this.getBasePath();\n\t// Get the base directory's virtual path\n\tString baseDirPath = this.getBasePath();\n\t// Get the base directory's virtual path\n\tString baseDirPath = this.getBasePath();\n\t// Get the base directory's virtual path\n\tString baseDirPath = this.getBasePath();\n\t// Get the base directory's virtual path\n\tString baseDirPath = this.getBasePath();\n\t// Get the base directory's virtual path\n\tString baseDirPath = this.getBasePath();\n\t// Get the base directory's virtual path\n\tString baseDirPath = this.getBasePath();\n\t// Get the base directory's virtual path\n\tString baseDirPath = this.getBasePath();\n\t// Get the base directory's virtual path\n\tString baseDirPath = this.getBasePath();\n\t// Get the base directory's virtual path\n\tString baseDirPath = this.getBasePath();\n\t// Get the base directory's virtual path\n\tString baseDirPath = this.getBasePath();\n\t// Get the base directory's virtual path\n\tString baseDirPath = this.getBasePath();\n\t// Get the base directory's virtual path\n\tString baseDirPath = this.getBasePath();\n\t// Get the base directory's virtual path\n\tString baseDirPath = this.getBasePath();\n\t// Get the base directory's virtual path\n\tString baseDirPath = this.getBasePath();\n\t// Get the base directory's virtual path\n\tString baseDirPath = this.getBasePath();\n\t// Get the base directory's virtual path\n\tString baseDirPath = this.getBasePath();\n\t// Get the base directory's virtual path\n\tString baseDirPath = this.getBasePath();\n\t// Get the base directory's virtual path\n\tString baseDirPath = this.getBasePath();\n\t// Get the base directory's", "CodeBleu_score": 12.72572831825569}, {"code": "public List<FtpFile> listFiles(){\n\t\tLogger logger = LoggerFactory.getLogger(getClass());\n\ttry {\n\t\tFileSystem fs = FileSystem.get(hdfsConf);\n\t\tPath path = new Path(baseDir);\n\t\tFileStatus[] status = fs.listStatus(path);\n\t\tFtpFile[] ftpFiles = new FtpFile[status.length];\n\t\tfor (int i = 0; i < status.length; i++) {\n\t\t\tFtpFile ftpFile = new FtpFile(status[i].getPath().toString(), status[i].isDirectory());\n\t\t\tftpFiles[i] = ftpFile;\n\t\t}\n\t\treturn Arrays.asList(ftpFiles);\n\t} catch (IOException e) {\n\t\tlogger.error(\"IOException occurred when listing files in HDFS directory.\", e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 39.38199974316058}, {"code": "public List<FtpFile> listFiles(){\n\t\tLogger logger = LoggerFactory.getLogger(this.getClass());\n\tlogger.debug(\"listFiles() called\");\n\ttry {\n\t\tFileSystem fs = FileSystem.get(hdfsConf);\n\t\tPath path = new Path(this.path);\n\t\tlogger.debug(\"listing files in path: \" + path.toString());\n\t\tFileStatus[] files = fs.listStatus(path);\n\t\tlogger.debug(\"listing files in path: \" + Arrays.toString(files));\n\t\tFtpFile[] ftpFiles = new FtpFile[files.length];\n\t\tfor (int i = 0; i < files.length; i++) {\n\t\t\tFtpFile ftpFile = new FtpFile(files[i].getPath().toString(), this.path, this.virtualPath);\n\t\t\tftpFiles[i] = ftpFile;\n\t\t}\n\t\treturn Collections.unmodifiableList(Arrays.asList(ftpFiles));\n\t} catch (IOException e) {\n\t\tlogger.error(\"IOException in listFiles()\", e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 44.92890745589236}]}
{"instance_id": "aec4623134b5", "generation_result": [{"code": "public void configure(){\n\t\t//TODO: Implement this function\n}", "CodeBleu_score": 1.0871503059820165}, {"code": "public void configure(){\n\t\ttry {\n\t\tif (this.userDataProperties.isEmpty()) {\n\t\t\tthis.loadUserData();\n\t\t}\n\t} catch (IOException e) {\n\t\tthrow new FtpServerConfigurationException(\"Error loading user data file: \" + this.userDataFile, e);\n\t}\n\tthis.convertDeprecatedProperties();\n}", "CodeBleu_score": 18.017239364540302}, {"code": "public void configure(){\n\t\t// TODO: Implement this function\n\tif (this.configurationState) {\n\t\treturn;\n\t}\n\tthis.configurationState = true;\n\ttry {\n\t\tthis.userManager = new BaseUserManager();\n\t\tthis.userManager.setPasswordEncryptor(new PasswordEncryptor() {\n\t\t\tpublic String encrypt(String password) {\n\t\t\t\treturn password;\n\t\t\t}\n\t\t});\n\t\tthis.userManager.setPasswordValidator(new PasswordValidator() {\n\t\t\tpublic void validate(String password) throws FtpException {\n\t\t\t\tif (password.length() < 8) {\n\t\t\t\t\tthrow new FtpException(\"Password must be at least 8 characters long.\");\n\t\t\t\t}\n\t\t\t\tif (password.length() > 20) {\n\t\t\t\t\tthrow new FtpException(\"Password must be at most 20 characters long.\");\n\t\t\t\t}\n\t\t\t\tif (password.contains(\" \")) {\n\t\t\t\t\tthrow new FtpException(\"Password must not contain spaces.\");\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tthis.userManager.setWritePermission(new WritePermission() {\n\t\t\tpublic boolean isWriteAllowed(String path) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t\tthis.userManager.setHomeDirectory(this.homeDirectory);\n\t\tthis.userManager.setWritePermission(new WritePermission() {\n\t\t\tpublic boolean isWriteAllowed(String path) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t\tthis.userManager.setWritePermission(new WritePermission() {\n\t\t\tpublic boolean isWriteAllowed(String path) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t\tthis.userManager.setWritePermission(new WritePermission() {\n\t\t\tpublic boolean isWriteAllowed(String path) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t\tthis.userManager.setWritePermission(new WritePermission() {\n\t\t\tpublic boolean isWriteAllowed(String path) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t\tthis.userManager.setWritePermission(new WritePermission() {\n\t\t\tpublic boolean isWriteAllowed(String path) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t\tthis.userManager.setWritePermission(new WritePermission() {\n\t\t\tpublic boolean isWriteAllowed(String path) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t\t", "CodeBleu_score": 26.02463234588786}]}
{"instance_id": "b5a2587f14d0", "generation_result": [{"code": "private void saveUserData() throws FtpException{\n\t\tif (userManager.getUserStore().isUserStorePersistent()) {\n\t\tFile userFile = new File(userManager.getUserStore().getUserFile());\n\t\tFile parentFile = userFile.getParentFile();\n\t\tif (!parentFile.exists() &&!parentFile.mkdirs()) {\n\t\t\tthrow new FtpServerConfigurationException(\"Unable to create parent directory for user data file: \" + userFile);\n\t\t}\n\t\ttry {\n\t\t\tFileOutputStream fos = new FileOutputStream(userFile);\n\t\t\ttry {\n\t\t\t\tuserManager.getUserStore().save(fos);\n\t\t\t} finally {\n\t\t\t\tIoUtils.closeQuietly(fos);\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tlogger.error(\"Unable to save user data to file: \" + userFile, e);\n\t\t\tthrow new FtpException(\"Unable to save user data to file: \" + userFile, e);\n\t\t}\n\t}\n}", "CodeBleu_score": 44.32995864853954}, {"code": "private void saveUserData() throws FtpException{\n\t\ttry {\n\t\tFile userdataFile = new File(this.userManager.getUserDataFile());\n\t\tFile parentDir = userdataFile.getParentFile();\n\t\tif (!parentDir.exists()) {\n\t\t\tif (!parentDir.mkdirs()) {\n\t\t\t\tthrow new FtpServerConfigurationException(\"Failed to create parent directory of user data file: \" + parentDir.getAbsolutePath());\n\t\t\t}\n\t\t}\n\t\tFileOutputStream fos = new FileOutputStream(userdataFile);\n\t\ttry {\n\t\t\tthis.userManager.saveUserData(fos);\n\t\t} catch (IOException e) {\n\t\t\tthrow new FtpException(\"Failed to save user data to file: \" + userdataFile.getAbsolutePath(), e);\n\t\t} finally {\n\t\t\tIoUtils.closeQuietly(fos);\n\t\t}\n\t} catch (IOException e) {\n\t\tthrow new FtpException(\"Failed to save user data to file: \" + this.userManager.getUserDataFile(), e);\n\t}\n}", "CodeBleu_score": 44.407042728972144}, {"code": "private void saveUserData() throws FtpException{\n\t\ttry {\n\t\tif (!userManager.getUserDatabase().getDirectory().exists()) {\n\t\t\tif (!userManager.getUserDatabase().getDirectory().mkdirs()) {\n\t\t\t\tthrow new FtpException(\"Unable to create user data directory\");\n\t\t\t}\n\t\t}\n\t\tFileOutputStream fos = new FileOutputStream(userManager.getUserDatabase().getFile());\n\t\tuserManager.writeUserData(fos);\n\t\tfos.close();\n\t} catch (IOException e) {\n\t\tlogger.error(\"Unable to save user data\", e);\n\t\tthrow new FtpException(\"Unable to save user data\", e);\n\t}\n}", "CodeBleu_score": 39.880324913831764}]}
{"instance_id": "5cf2989cf513", "generation_result": [{"code": "public Result delete(@PathVariable(value = \"user\") String user){\n\t\tLogger.getLogger(HdfsUserManager.class).info(\"delete user:\" + user);\n\tResult result = new Result();\n\ttry {\n\t\tHdfsUserManager userManager = new HdfsUserManager();\n\t\tuserManager.setFile(new File(\"users.properties\"));\n\t\tuserManager.delete(user);\n\t\tresult.setSuccess(true);\n\t\tresult.setMessage(\"delete user:\" + user);\n\t} catch (Exception e) {\n\t\tresult.setSuccess(false);\n\t\tresult.setMessage(e.getMessage());\n\t\tLogger.getLogger(HdfsUserManager.class).error(e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 39.003646355716356}, {"code": "public Result delete(@PathVariable(value = \"user\") String user){\n\t\tLogger logger = Logger.getLogger(delete.class);\n\tlogger.info(\"delete\");\n\tHdfsUserManager hdfsUserManager = new HdfsUserManager();\n\thdfsUserManager.setFile(new File(\"users.properties\"));\n\ttry {\n\t\thdfsUserManager.delete(user);\n\t\treturn Result.success();\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage());\n\t\treturn Result.failure(e.getMessage());\n\t}\n}", "CodeBleu_score": 43.454889504447735}, {"code": "public Result delete(@PathVariable(value = \"user\") String user){\n\t\tHdfsUserManager userManager = new HdfsUserManager();\n\tuserManager.setFile(new File(\"users.properties\"));\n\ttry {\n\t\tuserManager.delete(user);\n\t\treturn new Result(true, \"User deleted successfully\");\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage());\n\t\treturn new Result(false, \"User delete failed\");\n\t}\n}", "CodeBleu_score": 43.57646879305553}]}
{"instance_id": "ce383a9a6497", "generation_result": [{"code": "public FSDataInputStream open(Path path, int bufferSize) throws IOException{\n\t\tlong startTime = System.currentTimeMillis();\n\tString pathName = path.toString();\n\tString pathNameWithoutScheme = pathName.substring(pathName.indexOf(\":\") + 1);\n\tString pathNameWithoutSchemeAndSlash = pathNameWithoutScheme.substring(pathNameWithoutScheme.indexOf(\"/\") + 1);\n\tString pathNameWithoutSchemeAndSlashAndExtension = pathNameWithoutSchemeAndSlash.substring(pathNameWithoutSchemeAndSlash.indexOf(\".\") + 1);\n\tString pathNameWithoutSchemeAndSlashAndExtensionAndVersion = pathNameWithoutSchemeAndSlashAndExtension.substring(pathNameWithoutSchemeAndSlashAndExtension.indexOf(\".\") + 1);\n\tString pathNameWithoutSchemeAndSlashAndExtensionAndVersionAndFileName = pathNameWithoutSchemeAndSlashAndExtensionAndVersion.substring(pathNameWithoutSchemeAndSlashAndExtensionAndVersion.indexOf(\"/\") + 1);\n\tString pathNameWithoutSchemeAndSlashAndExtensionAndVersionAndFileNameAndFileExtension = pathNameWithoutSchemeAndSlashAndExtensionAndVersionAndFileName.substring(pathNameWithoutSchemeAndSlashAndExtensionAndVersionAndFileName.indexOf(\".\") + 1);\n\tString pathNameWithoutSchemeAndSlashAndExtensionAndVersionAndFileNameAndFileExtensionAndFileVersion = pathNameWithoutSchemeAndSlashAndExtensionAndVersionAndFileNameAndFileExtension.substring(pathNameWithoutSchemeAndSlashAndExtensionAndVersionAndFileNameAndFileExtension.indexOf(\".\") + 1);\n\tString pathNameWithoutSchemeAndSlashAndExtensionAndVersionAndFileNameAndFileExtensionAndFileVersionAndFileId = pathNameWithoutSchemeAndSlashAndExtensionAndVersionAndFileNameAndFileExtensionAndFileVersion.substring(pathNameWithoutSchemeAndSlashAndExtensionAndVersionAndFileNameAndFileExtensionAndFileVersion.indexOf(\"/\") + 1);\n\tString pathNameWithoutSchemeAndSlashAndExtensionAndVersionAndFileNameAndFileExtensionAndFileVersionAndFileIdAndFileChecksum = pathNameWithoutSchemeAndSlashAndExtensionAndVersionAndFileNameAndFileExtensionAndFileVersionAndFileId.substring(pathNameWithoutSchemeAndSlashAndExtensionAndVersionAndFileNameAndFileExtensionAndFileVersionAndFileId.indexOf(\"/\") + 1);\n\tString pathNameWithoutSchemeAndSlashAndExtensionAndVersionAndFileNameAndFileExtensionAndFileVersionAndFileIdAndFileChecksumAndFileLength = pathNameWithoutSchemeAndSlashAndExtensionAndVersionAndFileNameAndFileExtensionAndFileVersionAndFileIdAndFileChecksum.substring", "CodeBleu_score": 22.45764764056894}, {"code": "public FSDataInputStream open(Path path, int bufferSize) throws IOException{\n\t\ttry {\n\t\tConfiguration conf = this.getConf();\n\t\tFileSystem fs = FileSystem.get(path.toUri(), conf);\n\t\tFSDataInputStream in = fs.open(path, bufferSize);\n\t\treturn in;\n\t} catch (IOException e) {\n\t\tLOG.warn(\"Failed to open file \" + path + \" with buffer size \" + bufferSize, e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 39.35535282816406}, {"code": "public FSDataInputStream open(Path path, int bufferSize) throws IOException{\n\t\treturn open(path, bufferSize, null);\n}", "CodeBleu_score": 8.694661713537611}]}
{"instance_id": "f0fc12072c02", "generation_result": [{"code": "public boolean rename(Path src, Path dst) throws IOException{\n\t\tConfiguration conf = getConf();\n\tFileSystem fs = src.getFileSystem(conf);\n\tPath dstPath = dst;\n\tPath srcPath = src;\n\tboolean isRoot = false;\n\tboolean isSame = false;\n\tif (src.getName().equals(dst.getName())) {\n\t\tisSame = true;\n\t\treturn true;\n\t}\n\tif (src.toString().equals(\"/\")) {\n\t\tisRoot = true;\n\t}\n\tif (dst.toString().equals(\"/\")) {\n\t\tisRoot = true;\n\t}\n\tif (isRoot) {\n\t\treturn false;\n\t}\n\tif (isSame) {\n\t\treturn true;\n\t}\n\tdstPath = dst;\n\tif (fs.exists(dstPath)) {\n\t\tdstPath = new Path(dstPath.toString() + \"/\" + srcPath.getName());\n\t}\n\tif (!fs.rename(srcPath, dstPath)) {\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 41.12795424405514}, {"code": "public boolean rename(Path src, Path dst) throws IOException{\n\t\treturn fs.rename(src, dst);\n}", "CodeBleu_score": 6.276434821678234}, {"code": "public boolean rename(Path src, Path dst) throws IOException{\n\t\tConfiguration conf = new Configuration();\n\tconf.set(\"fs.defaultFS\", \"hdfs://192.168.1.101:9000\");\n\tconf.set(\"hadoop.security.authentication\", \"simple\");\n\tconf.set(\"hadoop.security.authentication.simple.anonymous.allowed\", \"true\");\n\tFileSystem fs = FileSystem.get(conf);\n\tPath path = new Path(\"hdfs://192.168.1.101:9000/user/hadoop/test\");\n\tfs.delete(path, true);\n\tfs.mkdirs(path);\n\tfs.setPermission(path, new FsPermission((short) 511));\n\tfs.setOwner(path, \"hadoop\", \"hadoop\");\n\tfs.setAcl(path, AclEntry.newBuilder().setOwner(\"hadoop\").setGroup(\"hadoop\").setPermission(FsPermission.valueOf(\"-rwxrwxrwx\")).build());\n\tfs.setReplication(path, (short) 3);\n\tfs.setTimes(path, System.currentTimeMillis(), System.currentTimeMillis());\n\tfs.setXAttr(path, \"user.test\", \"123456\".getBytes(), EnumSet.of(XAttrSetFlag.CREATE));\n\tfs.setXAttr(path, \"user.test2\", \"123456\".getBytes(), EnumSet.of(XAttrSetFlag.CREATE));\n\tfs.setXAttr(path, \"user.test3\", \"123456\".getBytes(), EnumSet.of(XAttrSetFlag.CREATE));\n\tfs.setXAttr(path, \"user.test4\", \"123456\".getBytes(), EnumSet.of(XAttrSetFlag.CREATE));\n\tfs.setXAttr(path, \"user.test5\", \"123456\".getBytes(), EnumSet.of(XAttrSetFlag.CREATE));\n\tfs.setXAttr(path, \"user.test6\", \"123456\".getBytes(), EnumSet.of(XAttrSetFlag.CREATE));\n\tfs.setXAttr(path, \"user.test7\", \"123456\".getBytes(), EnumSet.of(XAttrSetFlag", "CodeBleu_score": 24.29217684627859}]}
{"instance_id": "5104c071af46", "generation_result": [{"code": "public boolean hasCapability(String capability){\n\t\tif (capability.equalsIgnoreCase(\"hsync\")) {\n\t\treturn supportFlush;\n\t}\n\treturn false;\n}", "CodeBleu_score": 19.953397851757327}, {"code": "public boolean hasCapability(String capability){\n\t\tif (capability.toLowerCase(Locale.ENGLISH).equals(\"hsync\")) {\n\t\treturn supportFlush;\n\t}\n\treturn false;\n}", "CodeBleu_score": 28.462076061971548}, {"code": "public boolean hasCapability(String capability){\n\t\tif (capability == null) {\n\t\treturn false;\n\t}\n\treturn capability.toLowerCase(Locale.ROOT).equals(HSYNC) || capability.toLowerCase(Locale.ROOT).equals(HFLUSH);\n}", "CodeBleu_score": 46.36576660656127}]}
{"instance_id": "6989c860c79b", "generation_result": [{"code": "private synchronized void flushWrittenBytesToServiceInternal(final long offset) throws IOException{\n\t\tif (offset < 0) {\n\t\tthrow new IllegalArgumentException(\"Offset must be positive: \" + offset);\n\t}\n\tif (offset > this.fileSize) {\n\t\tthrow new IllegalArgumentException(\"Offset must be less than or equal to the file size: \" + offset + \", \" + this.fileSize);\n\t}\n\tif (this.flushing) {\n\t\tthrow new IllegalStateException(\"Already flushing\");\n\t}\n\tthis.flushing = true;\n\ttry {\n\t\tfinal long flushOffset = this.lastFlushOffset;\n\t\tif (flushOffset < offset) {\n\t\t\tthis.lastFlushOffset = offset;\n\t\t}\n\t\tfinal long flushSize = offset - flushOffset;\n\t\tif (flushSize > 0) {\n\t\t\tthis.metadata.setFlushSize(flushSize);\n\t\t\tthis.metadata.setFlushOffset(flushOffset);\n\t\t\tthis.metadata.setFlushTime(System.currentTimeMillis());\n\t\t\tthis.metadata.setFlushCount(this.metadata.getFlushCount() + 1);\n\t\t\tthis.metadata.setFlushError(false);\n\t\t\tthis.metadata.setFlushErrorCount(0);\n\t\t\tthis.metadata.setFlushErrorTime(0);\n\t\t\tthis.metadata.setFlushErrorSize(0);\n\t\t\tthis.metadata.setFlushErrorOffset(0);\n\t\t\tthis.metadata.setFlushErrorOffset(0);\n\t\t\tthis.metadata.setFlushErrorTime(0);\n\t\t\tthis.metadata.setFlushErrorCount(0);\n\t\t\tthis.metadata.setFlushErrorSize(0);\n\t\t\tthis.metadata.setFlushErrorOffset(0);\n\t\t\tthis.metadata.setFlushErrorOffset(0);\n\t\t\tthis.metadata.setFlushErrorTime(0);\n\t\t\tthis.metadata.setFlushErrorCount(0);\n\t\t\tthis.metadata.setFlushErrorSize(0);\n\t\t\tthis.metadata.setFlushErrorOffset(0);\n\t\t\tthis.metadata.setFlushErrorOffset(0);\n\t\t\tthis.metadata.setFlushErrorTime(0);\n\t\t\tthis.metadata.setFlushErrorCount(0);\n\t\t\tthis.metadata.setFlushErrorSize(0);\n\t\t\tthis.metadata.setFlushErrorOffset(0);\n\t\t\tthis.metadata.setFlushErrorOffset(0);\n\t\t\tthis.metadata.setFlushErrorTime(", "CodeBleu_score": 34.30226121418139}, {"code": "private synchronized void flushWrittenBytesToServiceInternal(final long offset) throws IOException{\n\t\tif (offset < 0) {\n\t\tthrow new IllegalArgumentException(\"offset must be greater than 0\");\n\t}\n\tif (offset > lastFlushOffset) {\n\t\tthrow new IllegalArgumentException(\"offset must be less than or equal to the last flush offset\");\n\t}\n\tif (offset == lastFlushOffset) {\n\t\treturn;\n\t}\n\tif (offset > currentOffset) {\n\t\tthrow new IllegalArgumentException(\"offset must be less than or equal to the current offset\");\n\t}\n\tif (offset < 0) {\n\t\tthrow new IllegalArgumentException(\"offset must be greater than 0\");\n\t}\n\tif (offset > lastFlushOffset) {\n\t\tthrow new IllegalArgumentException(\"offset must be less than or equal to the last flush offset\");\n\t}\n\tif (offset == lastFlushOffset) {\n\t\treturn;\n\t}\n\tif (offset > currentOffset) {\n\t\tthrow new IllegalArgumentException(\"offset must be less than or equal to the current offset\");\n\t}\n\tif (offset < 0) {\n\t\tthrow new IllegalArgumentException(\"offset must be greater than 0\");\n\t}\n\tif (offset > lastFlushOffset) {\n\t\tthrow new IllegalArgumentException(\"offset must be less than or equal to the last flush offset\");\n\t}\n\tif (offset == lastFlushOffset) {\n\t\treturn;\n\t}\n\tif (offset > currentOffset) {\n\t\tthrow new IllegalArgumentException(\"offset must be less than or equal to the current offset\");\n\t}\n\tif (offset < 0) {\n\t\tthrow new IllegalArgumentException(\"offset must be greater than 0\");\n\t}\n\tif (offset > lastFlushOffset) {\n\t\tthrow new IllegalArgumentException(\"offset must be less than or equal to the last flush offset\");\n\t}\n\tif (offset == lastFlushOffset) {\n\t\treturn;\n\t}\n\tif (offset > currentOffset) {\n\t\tthrow new IllegalArgumentException(\"offset must be less than or equal to the current offset\");\n\t}\n\tif (offset < 0) {\n\t\tthrow new IllegalArgumentException(\"offset must be greater than 0\");\n\t}\n\tif (offset > lastFlushOffset) {\n\t\tthrow new IllegalArgumentException(\"offset must be less than or equal to the last flush offset\");\n\t}\n\tif (offset == lastFlushOffset) {\n\t\treturn;\n\t", "CodeBleu_score": 25.121596320086308}, {"code": "private synchronized void flushWrittenBytesToServiceInternal(final long offset) throws IOException{\n\t\ttry {\n\t\tfinal long writeStart = offset;\n\t\tfinal long writeEnd = Math.min(offset + writeBufferSize, fileLength);\n\t\tif (writeEnd > offset) {\n\t\t\tfinal long writeSize = writeEnd - offset;\n\t\t\tfinal byte[] buffer = new byte[(int) writeSize];\n\t\t\tread(offset, buffer);\n\t\t\tif (writeSize > 0) {\n\t\t\t\tfinal long writeOffset = writeStart - writeStart % writeBufferSize;\n\t\t\t\tfinal long writeSizeInBuffer = writeSize - (writeOffset - writeStart);\n\t\t\t\tfinal int writeBufferSize = this.writeBufferSize;\n\t\t\t\tfinal int writeBufferOffset = (int) (writeOffset % writeBufferSize);\n\t\t\t\tfinal int writeBufferLength = (int) (writeSizeInBuffer % writeBufferSize);\n\t\t\t\tfinal byte[] writeBuffer = new byte[writeBufferLength];\n\t\t\t\tSystem.arraycopy(buffer, writeBufferOffset, writeBuffer, 0, writeBufferLength);\n\t\t\t\tif (writeBufferLength > 0) {\n\t\t\t\t\tif (writeBufferOffset + writeBufferLength < writeBufferSize) {\n\t\t\t\t\t\tSystem.arraycopy(buffer, writeBufferOffset + writeBufferLength, writeBuffer, writeBufferLength, writeBufferSize - writeBufferLength);\n\t\t\t\t\t}\n\t\t\t\t\twrite(writeOffset, writeBuffer);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (final IOException e) {\n\t\tthrow e;\n\t} catch (final Exception e) {\n\t\tthrow new IOException(e);\n\t}\n}", "CodeBleu_score": 31.43282645479577}]}
{"instance_id": "56e8fb9de5da", "generation_result": [{"code": "private synchronized int submitWriteBufferToService(final ByteBuffer bufferToWrite, final long writePosition) throws IOException {\n\t\tint writeLength = bufferToWrite.remaining();\n\tif (writeLength == 0) {\n\t\treturn 0;\n\t}\n\tbufferToWrite.flip();\n\tint bytesWritten = 0;\n\ttry {\n\t\tbytesWritten = writeBufferToService(bufferToWrite, writePosition);\n\t} catch (IOException ioe) {\n\t\tbufferToWrite.compact();\n\t\tthrow ioe;\n\t}\n\tbufferToWrite.compact();\n\treturn bytesWritten;\n}", "CodeBleu_score": 21.223307411559915}, {"code": "private synchronized int submitWriteBufferToService(final ByteBuffer bufferToWrite, final long writePosition) throws IOException {\n\t\tif (bufferToWrite == null) {\n\t\tthrow new IllegalArgumentException(\"bufferToWrite cannot be null\");\n\t}\n\tif (bufferToWrite.isReadOnly()) {\n\t\tthrow new IllegalArgumentException(\"bufferToWrite cannot be read-only\");\n\t}\n\tif (bufferToWrite.hasArray()) {\n\t\tthrow new IllegalArgumentException(\"bufferToWrite cannot have an array backing it\");\n\t}\n\tif (bufferToWrite.isDirect()) {\n\t\tthrow new IllegalArgumentException(\"bufferToWrite cannot be direct\");\n\t}\n\tif (writePosition < 0) {\n\t\tthrow new IllegalArgumentException(\"writePosition cannot be negative\");\n\t}\n\tif (writePosition > bufferToWrite.capacity()) {\n\t\tthrow new IllegalArgumentException(\"writePosition cannot be greater than bufferToWrite.capacity()\");\n\t}\n\tif (writePosition + bufferToWrite.remaining() > bufferToWrite.capacity()) {\n\t\tthrow new IllegalArgumentException(\"writePosition + bufferToWrite.remaining() cannot be greater than bufferToWrite.capacity()\");\n\t}\n\tif (bufferToWrite.remaining() < 0) {\n\t\tthrow new IllegalArgumentException(\"bufferToWrite.remaining() cannot be negative\");\n\t}\n\tif (bufferToWrite.remaining() == 0) {\n\t\treturn 0;\n\t}\n\tfinal long bufferLength = bufferToWrite.remaining();\n\tfinal int bufferIndex = bufferToWrite.position();\n\tbufferToWrite.position(bufferIndex + (int) writePosition);\n\tbufferToWrite.limit(bufferIndex + (int) (writePosition + bufferLength));\n\tbufferToWrite.flip();\n\tfinal long bufferOffset = bufferToWrite.position();\n\tfinal long bufferRemaining = bufferToWrite.remaining();\n\tfinal WriteTask writeTask = new WriteTask(bufferToWrite, bufferOffset, bufferRemaining);\n\tfinal Future<Integer> future = writeCompletionService.submit(writeTask);\n\twriteTask.setFuture(future);\n\twriteOperationQueue.add(writeTask);\n\treturn (int) bufferLength;\n}", "CodeBleu_score": 28.34084684368929}, {"code": "private synchronized int submitWriteBufferToService(final ByteBuffer bufferToWrite, final long writePosition) throws IOException {\n\t\tint bytesWritten = 0;\n\tif (bufferToWrite == null) {\n\t\tthrow new NullPointerException(\"bufferToWrite\");\n\t}\n\tif (bufferToWrite.isReadOnly()) {\n\t\tthrow new IllegalArgumentException(\"bufferToWrite is read-only\");\n\t}\n\tif (bufferToWrite.hasArray()) {\n\t\tthrow new IllegalArgumentException(\"bufferToWrite has an array backing it\");\n\t}\n\tif (bufferToWrite.isDirect()) {\n\t\tthrow new IllegalArgumentException(\"bufferToWrite is a direct buffer\");\n\t}\n\tif (bufferToWrite.isReadOnly()) {\n\t\tthrow new IllegalArgumentException(\"bufferToWrite is read-only\");\n\t}\n\tif (bufferToWrite.isDirect()) {\n\t\tthrow new IllegalArgumentException(\"bufferToWrite is a direct buffer\");\n\t}\n\tif (bufferToWrite.isDirect()) {\n\t\tthrow new IllegalArgumentException(\"bufferToWrite is a direct buffer\");\n\t}\n\tif (bufferToWrite.isDirect()) {\n\t\tthrow new IllegalArgumentException(\"bufferToWrite is a direct buffer\");\n\t}\n\tif (bufferToWrite.isDirect()) {\n\t\tthrow new IllegalArgumentException(\"bufferToWrite is a direct buffer\");\n\t}\n\tif (bufferToWrite.isDirect()) {\n\t\tthrow new IllegalArgumentException(\"bufferToWrite is a direct buffer\");\n\t}\n\tif (bufferToWrite.isDirect()) {\n\t\tthrow new IllegalArgumentException(\"bufferToWrite is a direct buffer\");\n\t}\n\tif (bufferToWrite.isDirect()) {\n\t\tthrow new IllegalArgumentException(\"bufferToWrite is a direct buffer\");\n\t}\n\tif (bufferToWrite.isDirect()) {\n\t\tthrow new IllegalArgumentException(\"bufferToWrite is a direct buffer\");\n\t}\n\tif (bufferToWrite.isDirect()) {\n\t\tthrow new IllegalArgumentException(\"bufferToWrite is a direct buffer\");\n\t}\n\tif (bufferToWrite.isDirect()) {\n\t\tthrow new IllegalArgumentException(\"bufferToWrite is a direct buffer\");\n\t}\n\tif (bufferToWrite.isDirect()) {\n\t\tthrow new IllegalArgumentException(\"bufferToWrite is a direct buffer\");\n\t}\n\tif (bufferToWrite.isDirect()) {\n\t\tthrow new IllegalArgumentException(\"bufferToWrite is a direct buffer\");\n\t}\n\tif (bufferToWrite.isDirect()) {\n\t\tthrow", "CodeBleu_score": 16.8736167864326}]}
{"instance_id": "bf27d955c38b", "generation_result": [{"code": "private void waitForTaskToComplete() throws IOException{\n\t\tif (this.completionService.poll(1000, TimeUnit.MILLISECONDS) == null) {\n\t\tthrow new InterruptedIOException(\"waitForTaskToComplete interrupted\");\n\t}\n}", "CodeBleu_score": 5.868853231785787}, {"code": "private void waitForTaskToComplete() throws IOException{\n\t\tCompletionService<String> completionService = new ExecutorCompletionService<String>(executor);\n\tFuture<String> future = completionService.poll();\n\twhile (future!= null) {\n\t\tfuture = completionService.poll();\n\t}\n\tif (Thread.interrupted()) {\n\t\tthrow new InterruptedIOException(\"waitForTaskToComplete interrupted\");\n\t}\n}", "CodeBleu_score": 26.048849882601267}, {"code": "private void waitForTaskToComplete() throws IOException{\n\t\tCompletionService<String> completionService = new ExecutorCompletionService<>(executor);\n\tcompletionService.submit(new Callable<String>() {\n\t\t@Override\n\t\tpublic String call() throws Exception {\n\t\t\treturn \"Hello World\";\n\t\t}\n\t});\n\twhile (true) {\n\t\tFuture<String> future = completionService.poll();\n\t\tif (future == null) {\n\t\t\tbreak;\n\t\t}\n\t\ttry {\n\t\t\tString result = future.get();\n\t\t\tSystem.out.println(result);\n\t\t} catch (InterruptedException e) {\n\t\t\tthrow new IOException(e);\n\t\t} catch (ExecutionException e) {\n\t\t\tthrow new IOException(e);\n\t\t}\n\t}\n}", "CodeBleu_score": 30.14301640768225}]}
{"instance_id": "5c7a311273ae", "generation_result": [{"code": "private synchronized void shrinkWriteOperationQueue() throws IOException{\n\t\tint size = writeOperationQueue.size();\n\tif (size == 0) {\n\t\treturn;\n\t}\n\tint totalLength = 0;\n\tint lastIndex = size - 1;\n\tfor (int i = 0; i < size; i++) {\n\t\tWriteOperation op = writeOperationQueue.poll();\n\t\tif (op!= null) {\n\t\t\tif (op.exception!= null) {\n\t\t\t\tthrow new IOException(op.exception);\n\t\t\t}\n\t\t\ttotalLength += op.length;\n\t\t\tif (op.offset!= -1) {\n\t\t\t\ttotalAppendOffset = op.offset;\n\t\t\t}\n\t\t\tif (op.offset + op.length > maxAppendOffset) {\n\t\t\t\tmaxAppendOffset = op.offset + op.length;\n\t\t\t}\n\t\t\tif (op.offset > maxOffset) {\n\t\t\t\tmaxOffset = op.offset;\n\t\t\t}\n\t\t\tif (op.offset + op.length > maxOffset) {\n\t\t\t\tmaxOffset = op.offset + op.length;\n\t\t\t}\n\t\t\tif (op.offset > totalAppendOffset) {\n\t\t\t\ttotalAppendOffset = op.offset;\n\t\t\t}\n\t\t\tif (op.offset + op.length > totalAppendOffset) {\n\t\t\t\ttotalAppendOffset = op.offset + op.length;\n\t\t\t}\n\t\t\tif (op.offset + op.length > totalLength) {\n\t\t\t\ttotalLength = op.offset + op.length;\n\t\t\t}\n\t\t}\n\t}\n\tif (size == 1) {\n\t\ttotalLength = 0;\n\t}\n\tif (totalAppendOffset > maxAppendOffset) {\n\t\tmaxAppendOffset = totalAppendOffset;\n\t}\n\tif (totalLength > maxLength) {\n\t\tmaxLength = totalLength;\n\t}\n\tif (totalAppendOffset > maxOffset) {\n\t\tmaxOffset = totalAppendOffset;\n\t}\n\tif (totalLength > maxOffset) {\n\t\tmaxOffset = totalLength;\n\t}\n\tif (totalAppendOffset > totalAppendOffset) {\n\t\ttotalAppendOffset = totalAppendOffset;\n\t}\n\tif (totalLength > totalAppendOffset) {\n\t\ttotalAppendOffset = totalLength;\n\t}\n\tif (totalLength > totalLength) {\n\t\ttotalLength = total", "CodeBleu_score": 18.836440357723106}, {"code": "private synchronized void shrinkWriteOperationQueue() throws IOException{\n\t\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n\t// TODO: implement this function\n", "CodeBleu_score": 1.798264719549243}, {"code": "private synchronized void shrinkWriteOperationQueue() throws IOException{\n\t\tif (this.writeOperationQueue.isEmpty()) {\n\t\treturn;\n\t}\n\ttry {\n\t\tfor (int i = 0; i < this.writeOperationQueue.size(); i++) {\n\t\t\tWriteOperation writeOperation = this.writeOperationQueue.poll();\n\t\t\tif (writeOperation.isDone()) {\n\t\t\t\tthis.totalAppendOffset += writeOperation.getLength();\n\t\t\t} else {\n\t\t\t\tthis.writeOperationQueue.add(writeOperation);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t} catch (InterruptedException e) {\n\t\tthrow new InterruptedIOException(\"Interrupted while shrinking write operation queue.\");\n\t}\n}", "CodeBleu_score": 30.102085860317278}]}
{"instance_id": "d8f07e66f690", "generation_result": [{"code": "protected HdfsFileSystemView(User user){\n\t}", "CodeBleu_score": 2.4752430149638065}, {"code": "protected HdfsFileSystemView(User user){\n\t\tif (user == null) {\n\t\tthrow new IllegalArgumentException(\"User cannot be null\");\n\t}\n\tif (user.getHomeDirectory() == null) {\n\t\tthrow new IllegalArgumentException(\"User's home directory cannot be null\");\n\t}\n\tthis.user = user;\n\tthis.homePath = new Path(user.getHomeDirectory());\n}", "CodeBleu_score": 66.67022935791658}, {"code": "protected HdfsFileSystemView(User user){\n\t\tthis.user = user;\n\tthis.homePath = new Path(user.getHomeDirectory());\n}", "CodeBleu_score": 19.195791953614545}]}
{"instance_id": "27807db0eb0f", "generation_result": [{"code": "public boolean changeWorkingDirectory(String dir){\n\t\tPath newPath = new Path(dir);\n\tif (newPath.isAbsolute()) {\n\t\tif (newPath.getParent()!= null) {\n\t\t\tif (newPath.getParent().getName().equals(\"\")) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tnewPath = new Path(this.currentPath.toString() + \"/\" + dir);\n\t}\n\tif (newPath.isAbsolute()) {\n\t\tif (newPath.getParent()!= null) {\n\t\t\tif (newPath.getParent().getName().equals(\"\")) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\tthis.currentPath = newPath;\n\treturn true;\n}", "CodeBleu_score": 27.077218091534444}, {"code": "public boolean changeWorkingDirectory(String dir){\n\t\t// TODO Auto-generated method stub\n\treturn false;\n}", "CodeBleu_score": 2.1773869450736156}, {"code": "public boolean changeWorkingDirectory(String dir){\n\t\tPath path = new Path(dir);\n\tif (path.isAbsolute()) {\n\t\tif (path.getParent()!= null) {\n\t\t\tif (path.getParent().toString().equals(root)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tcurrentPath = path;\n\t} else {\n\t\tif (currentPath.toString().equals(root)) {\n\t\t\tcurrentPath = new Path(root + \"/\" + path.toString());\n\t\t} else {\n\t\t\tcurrentPath = new Path(currentPath.toString() + \"/\" + path.toString());\n\t\t}\n\t}\n\treturn true;\n}", "CodeBleu_score": 28.901514752211348}]}
{"instance_id": "be7aba23d184", "generation_result": [{"code": "public SeaweedFileSystemStore(String host, int port, int grpcPort, Configuration conf){\n\t\tsuper(host, port, grpcPort, conf);\n\tthis.accessMode = conf.get(ACCESS_MODE, \"direct\");\n\tthis.filerClient = new FilerClient(host, port, grpcPort, conf);\n}", "CodeBleu_score": 29.376312650642806}, {"code": "public SeaweedFileSystemStore(String host, int port, int grpcPort, Configuration conf){\n\t\tthis.host = host;\n\tthis.port = port;\n\tthis.grpcPort = grpcPort;\n\tthis.conf = conf;\n\tthis.accessMode = conf.get(ACCESS_MODE, ACCESS_MODE_DEFAULT);\n\tthis.filerClient = new FilerClient(host, port, grpcPort);\n\tthis.filerClient.setAccessMode(accessMode);\n\tthis.filerClient.setGrpcClient(grpcPort);\n}", "CodeBleu_score": 37.16628347353971}, {"code": "public SeaweedFileSystemStore(String host, int port, int grpcPort, Configuration conf){\n\t\tsuper(host, port, grpcPort, conf);\n\tthis.accessMode = this.conf.get(ACCESS_MODE, \"direct\");\n}", "CodeBleu_score": 22.770854572710235}]}
{"instance_id": "7943a1723c23", "generation_result": [{"code": "public FSInputStream openFileForRead(final Path path, FileSystem.Statistics statistics) throws IOException{\n\t\ttry {\n\t\tfinal FileEntry entry = getFileEntry(path.toString());\n\t\tfinal FileClient client = new FileClient(entry.getFsAddress(), entry.getFsPort());\n\t\treturn new SeaweedHadoopInputStream(client, statistics, path.toString());\n\t} catch (FileNotFoundException e) {\n\t\tthrow e;\n\t} catch (Exception e) {\n\t\tthrow new IOException(e);\n\t}\n}", "CodeBleu_score": 43.17730940567064}, {"code": "public FSInputStream openFileForRead(final Path path, FileSystem.Statistics statistics) throws IOException{\n\t\treturn openFileForRead(path, statistics, null);\n}", "CodeBleu_score": 19.532164613239818}, {"code": "public FSInputStream openFileForRead(final Path path, FileSystem.Statistics statistics) throws IOException{\n\t\tfinal SeaweedFileSystem fs = (SeaweedFileSystem) path.getFileSystem(new Configuration());\n\tfinal FileEntry fileEntry = fs.getFileEntry(path);\n\tif (fileEntry == null) {\n\t\tthrow new FileNotFoundException(\"File not found: \" + path);\n\t}\n\tfinal SeaweedClient client = fs.getSeaweedClient();\n\treturn new SeaweedHadoopInputStream(client, fileEntry, statistics, path);\n}", "CodeBleu_score": 53.75723056972526}]}
{"instance_id": "36634cee9ed3", "generation_result": [{"code": "public void configure(JobConf conf){\n\t\t// TODO: Implement this function\n\tsuper.configure(conf);\n\tthis.conf = conf;\n\ttry {\n\t\tthis.hostname = InetAddress.getLocalHost().getHostName();\n\t} catch (UnknownHostException e) {\n\t\tthis.hostname = \"localhost\";\n\t}\n\tthis.threadsPerMap = conf.getInt(MAPPER_THREADS_PER_MAP, 1);\n\tthis.filesPerThread = conf.getInt(MAPPER_FILES_PER_THREAD, 1);\n\tthis.executor = Executors.newFixedThreadPool(threadsPerMap, new ThreadFactory() {\n\t\tpublic Thread newThread(Runnable r) {\n\t\t\tThread t = new Thread(r);\n\t\t\tt.setDaemon(true);\n\t\t\treturn t;\n\t\t}\n\t});\n}", "CodeBleu_score": 48.18493382230278}, {"code": "public void configure(JobConf conf){\n\t\tconf.set(\"mapred.tasktracker.map.tasks.maximum\", \"100\");\n\tconf.set(\"mapred.tasktracker.reduce.tasks.maximum\", \"100\");\n\tconf.set(\"mapred.tasktracker.map.tasks.maximum\", \"100\");\n\tconf.set(\"mapred.tasktracker.reduce.tasks.maximum\", \"100\");\n\tconf.set(\"mapred.tasktracker.map.tasks.maximum\", \"100\");\n\tconf.set(\"mapred.tasktracker.reduce.tasks.maximum\", \"100\");\n\tconf.set(\"mapred.tasktracker.map.tasks.maximum\", \"100\");\n\tconf.set(\"mapred.tasktracker.reduce.tasks.maximum\", \"100\");\n\tconf.set(\"mapred.tasktracker.map.tasks.maximum\", \"100\");\n\tconf.set(\"mapred.tasktracker.reduce.tasks.maximum\", \"100\");\n\tconf.set(\"mapred.tasktracker.map.tasks.maximum\", \"100\");\n\tconf.set(\"mapred.tasktracker.reduce.tasks.maximum\", \"100\");\n\tconf.set(\"mapred.tasktracker.map.tasks.maximum\", \"100\");\n\tconf.set(\"mapred.tasktracker.reduce.tasks.maximum\", \"100\");\n\tconf.set(\"mapred.tasktracker.map.tasks.maximum\", \"100\");\n\tconf.set(\"mapred.tasktracker.reduce.tasks.maximum\", \"100\");\n\tconf.set(\"mapred.tasktracker.map.tasks.maximum\", \"100\");\n\tconf.set(\"mapred.tasktracker.reduce.tasks.maximum\", \"100\");\n\tconf.set(\"mapred.tasktracker.map.tasks.maximum\", \"100\");\n\tconf.set(\"mapred.tasktracker.reduce.tasks.maximum\", \"100\");\n\tconf.set(\"mapred.tasktracker.map.tasks.maximum\", \"100\");\n\tconf.set(\"mapred.tasktracker.reduce.tasks.maximum\", \"100\");\n\tconf.set(\"map", "CodeBleu_score": 5.2708636238423185}, {"code": "public void configure(JobConf conf){\n\t\tthis.conf = conf;\n\ttry {\n\t\thostName = InetAddress.getLocalHost().getHostName();\n\t} catch (IOException e) {\n\t\thostName = \"localhost\";\n\t}\n\tnumThreadsPerMap = conf.getInt(\"mapred.map.tasks.per.host\", 1);\n\tnumFilesPerThread = conf.getInt(\"mapred.map.tasks.per.thread\", 1);\n\texecutor = Executors.newFixedThreadPool(numThreadsPerMap * numFilesPerThread, new DaemonThreadFactory());\n}", "CodeBleu_score": 50.567250538544485}]}
{"instance_id": "53cd9065153d", "generation_result": [{"code": "private void startTrashEmptier(URI uri, final Configuration conf) throws IOException{\n\t\tfinal String host = uri.getHost();\n\tfinal String trashPath = conf.get(\"juicefs.trash.path\");\n\tfinal String superuser = conf.get(\"juicefs.superuser\");\n\tfinal String superuserKeytab = conf.get(\"juicefs.superuser.keytab\");\n\tfinal String superuserPrincipal = conf.get(\"juicefs.superuser.principal\");\n\tfinal String superuserPassword = conf.get(\"juicefs.superuser.password\");\n\tfinal String superuserKrb5conf = conf.get(\"juicefs.superuser.krb5conf\");\n\tfinal String superuserKrb5confPath = conf.get(\"juicefs.superuser.krb5conf.path\");\n\tfinal String superuserKrb5confName = conf.get(\"juicefs.superuser.krb5conf.name\");\n\tfinal String superuserKrb5confDir = conf.get(\"juicefs.superuser.krb5conf.dir\");\n\tfinal String superuserKrb5confDirName = conf.get(\"juicefs.superuser.krb5conf.dir.name\");\n\tfinal String superuserKrb5confDirMode = conf.get(\"juicefs.superuser.krb5conf.dir.mode\");\n\tfinal String superuserKrb5confDirOwner = conf.get(\"juicefs.superuser.krb5conf.dir.owner\");\n\tfinal String superuserKrb5confDirGroup = conf.get(\"juicefs.superuser.krb5conf.dir.group\");\n\tfinal String superuserKrb5confDirAcl = conf.get(\"juicefs.superuser.krb5conf.dir.acl\");\n\tfinal String superuserKrb5confDirAclMode = conf.get(\"juicefs.superuser.krb5conf.dir.acl.mode\");\n\tfinal String superuserKrb5confDirAclOwner = conf.get(\"juicefs.superuser.krb5conf.dir.acl.owner\");\n\tfinal String superuserKrb5confDirAclGroup = conf.get(\"juicefs.superuser.krb5conf.dir.acl.group\");\n\tfinal String superuserKrb5confDirAclEntries = conf.get(\"juicefs.superuser.krb5", "CodeBleu_score": 20.01522612826865}, {"code": "private void startTrashEmptier(URI uri, final Configuration conf) throws IOException{\n\t\tif (this.trashEmptierTask!= null) {\n\t\treturn;\n\t}\n\tUserGroupInformation ugi = UserGroupInformation.getCurrentUser();\n\tif (ugi == null) {\n\t\tthrow new IOException(\"Could not get current user\");\n\t}\n\tfinal FileSystem fs = FileSystem.get(uri, conf);\n\tfinal JuiceFileSystemImpl juiceFS = new JuiceFileSystemImpl(fs);\n\tthis.trashEmptierTask = BgTaskUtil.schedulePeriodicTask(new Runnable() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tjuiceFS.startTrashEmptier(conf);\n\t\t\t} catch (IOException e) {\n\t\t\t\tLOGGER.error(\"Failed to start trash emptier\", e);\n\t\t\t}\n\t\t}\n\t}, 10 * 60 * 1000, 10 * 60 * 1000, TimeUnit.MILLISECONDS);\n}", "CodeBleu_score": 41.302792782505826}, {"code": "private void startTrashEmptier(URI uri, final Configuration conf) throws IOException{\n\t\ttry {\n\t\tif (isTrashEmptierRunning(uri)) {\n\t\t\tLOG.info(\"Trash emptier is already running for \" + uri);\n\t\t\treturn;\n\t\t}\n\t\tUserGroupInformation ugi = UserGroupInformation.createRemoteUser(getTrashEmptierUserName(uri));\n\t\tugi.doAs(new PrivilegedExceptionAction<Void>() {\n\t\t\t@Override\n\t\t\tpublic Void run() throws Exception {\n\t\t\t\tFileSystem fs = FileSystem.newInstance(uri, conf);\n\t\t\t\tif (fs instanceof JuiceFileSystemImpl) {\n\t\t\t\t\tJuiceFileSystemImpl juiceFS = (JuiceFileSystemImpl) fs;\n\t\t\t\t\tjuiceFS.initTrashEmptier(conf);\n\t\t\t\t} else {\n\t\t\t\t\tLOG.error(\"Failed to initialize trash emptier for \" + uri + \" because the file system is not a JuiceFileSystemImpl instance\");\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t\tBgTaskUtil.schedule(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tFileSystem fs = FileSystem.newInstance(uri, conf);\n\t\t\t\t\tif (fs instanceof JuiceFileSystemImpl) {\n\t\t\t\t\t\tJuiceFileSystemImpl juiceFS = (JuiceFileSystemImpl) fs;\n\t\t\t\t\t\tjuiceFS.startTrashEmptier(conf);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tLOG.error(\"Failed to start trash emptier for \" + uri + \" because the file system is not a JuiceFileSystemImpl instance\");\n\t\t\t\t\t}\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tLOG.error(\"Failed to start trash emptier for \" + uri + \": \" + e.getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t}, 10, TimeUnit.MINUTES);\n\t} catch (Exception e) {\n\t\tthrow new IOException(\"Failed to start trash emptier for \" + uri + \": \" + e.getMessage());\n\t}\n}", "CodeBleu_score": 37.458094121773215}]}
{"instance_id": "ede797f6a8f2", "generation_result": [{"code": "public static void setContext(String context) throws Exception{\n\t\torg.apache.hadoop.ipc.RPC.setProtocolEngine(org.apache.hadoop.hdfs.DFSClient.getRpcServer().getConf(), org.apache.hadoop.hdfs.DFSClient.class, org.apache.hadoop.hdfs.protocol.ClientProtocol.class);\n\torg.apache.hadoop.hdfs.DFSClient.getRpcServer().setProtocolVersion(org.apache.hadoop.hdfs.protocol.ClientProtocol.class, 1);\n\torg.apache.hadoop.hdfs.DFSClient.getRpcServer().setProtocolVersion(org.apache.hadoop.hdfs.protocol.ClientProtocol.class, 2);\n\torg.apache.hadoop.hdfs.DFSClient.getRpcServer().setProtocolVersion(org.apache.hadoop.hdfs.protocol.ClientProtocol.class, 3);\n\torg.apache.hadoop.hdfs.DFSClient.getRpcServer().setProtocolVersion(org.apache.hadoop.hdfs.protocol.ClientProtocol.class, 4);\n\torg.apache.hadoop.hdfs.DFSClient.getRpcServer().setProtocolVersion(org.apache.hadoop.hdfs.protocol.ClientProtocol.class, 5);\n\torg.apache.hadoop.hdfs.DFSClient.getRpcServer().setProtocolVersion(org.apache.hadoop.hdfs.protocol.ClientProtocol.class, 6);\n\torg.apache.hadoop.hdfs.DFSClient.getRpcServer().setProtocolVersion(org.apache.hadoop.hdfs.protocol.ClientProtocol.class, 7);\n\torg.apache.hadoop.hdfs.DFSClient.getRpcServer().setProtocolVersion(org.apache.hadoop.hdfs.protocol.ClientProtocol.class, 8);\n\torg.apache.hadoop.hdfs.DFSClient.getRpcServer().setProtocolVersion(org.apache.hadoop.hdfs.protocol.ClientProtocol.class, 9);\n\torg.apache.hadoop.hdfs.DFSClient.getRpcServer().setProtocolVersion(org.apache.hadoop.hdfs.protocol.ClientProtocol.class, 10);\n\torg.apache.hadoop.hdfs.DFSClient.getRpcServer().setProtocolVersion(org.apache.hadoop.hdfs.protocol.ClientProtocol.class, 11);\n\torg.apache.hadoop.hdfs.DFSClient.getRpcServer().setProtocolVersion", "CodeBleu_score": 17.405227566283234}, {"code": "public static void setContext(String context) throws Exception{\n\t\torg.apache.hadoop.ipc.RPC.setProtocolEngine(org.apache.hadoop.hdfs.protocolPB.ClientProtocol.class, org.apache.hadoop.hdfs.protocolPB.ClientProtocolTranslatorPB.class);\n\torg.apache.hadoop.hdfs.protocolPB.ClientProtocol clientProtocol = org.apache.hadoop.hdfs.protocolPB.ClientProtocol.getStub(org.apache.hadoop.hdfs.protocol.ClientProtocol.class, org.apache.hadoop.hdfs.protocolPB.ClientProtocol.class);\n\tclientProtocol.setContext(context);\n}", "CodeBleu_score": 25.89161940599423}, {"code": "public static void setContext(String context) throws Exception{\n\t\t// Write your code here\n}", "CodeBleu_score": 3.1494709380915578}]}
{"instance_id": "56968a526f6a", "generation_result": [{"code": "Status HDFS::remove_file(const URI& uri){\n\t\tStatus status;\n\thdfsFS fs = hdfsConnect(uri.host.c_str(), uri.port);\n\tif (fs == NULL) {\n\t\tLOG(ERROR) << \"Could not connect to HDFS at \" << uri.host << \":\" << uri.port;\n\t\treturn Status::Error(\"Could not connect to HDFS\");\n\t}\n\n\tif (hdfsDelete(fs, uri.path.c_str(), 0) == -1) {\n\t\tLOG(ERROR) << \"Could not delete file \" << uri.path << \" from HDFS at \" << uri.host << \":\" << uri.port;\n\t\thdfsDisconnect(fs);\n\t\treturn Status::Error(\"Could not delete file\");\n\t}\n\thdfsDisconnect(fs);\n\treturn Status::OK();\n}", "CodeBleu_score": 44.031402842061404}, {"code": "Status HDFS::remove_file(const URI& uri){\n\t\tStatus status;\n\thdfsFS fs = get_fs(status);\n\tif (!status.ok()) {\n\t\treturn status;\n\t}\n\n\tif (hdfsDelete(fs, uri.path().c_str(), 0) == -1) {\n\t\tstatus.set_error(hdfsGetLastError(fs));\n\t\tLOG(ERROR) << \"Failed to delete file \" << uri.path();\n\t\treturn status;\n\t}\n\n\treturn Status::OK();\n}", "CodeBleu_score": 49.426195788188}, {"code": "Status HDFS::remove_file(const URI& uri){\n\t\tif (uri.getScheme()!= \"hdfs\") {\n\t\tLOG(ERROR) << \"Invalid URI scheme: \" << uri.getScheme();\n\t\treturn Status::Invalid(\"Invalid URI scheme: \" << uri.getScheme());\n\t}\n\n\thdfsFS fs = hdfsConnect(uri.getHost().c_str(), uri.getPort());\n\tif (fs == NULL) {\n\t\tLOG(ERROR) << \"Failed to connect to HDFS at \" << uri.getHost() << \":\" << uri.getPort();\n\t\treturn Status::IOError(\"Failed to connect to HDFS at \" << uri.getHost() << \":\" << uri.getPort());\n\t}\n\n\tStatus status = Status::OK();\n\tif (hdfsDelete(fs, uri.getPath().c_str(), 0) == -1) {\n\t\tLOG(ERROR) << \"Failed to delete file: \" << uri.getPath();\n\t\tstatus = Status::IOError(\"Failed to delete file: \" << uri.getPath());\n\t}\n\n\thdfsDisconnect(fs);\n\treturn status;\n}", "CodeBleu_score": 42.87629912346184}]}
{"instance_id": "f33adb3e8cb6", "generation_result": [{"code": "Status HDFS::sync(const URI& uri){\n\t\tStatus status;\n\tif (hdfsExists(fs, uri.toString().c_str()) == 0) {\n\t\treturn Ok;\n\t} else {\n\t\thdfsFile file = hdfsOpenFile(fs, uri.toString().c_str(), O_WRONLY | O_APPEND, 0, 0, 0);\n\t\tif (file == NULL) {\n\t\t\tLOG(ERROR) << \"Failed to open file \" << uri.toString() << \" for append\";\n\t\t\treturn Failure;\n\t\t}\n\t\tif (hdfsFlush(fs, file)!= 0) {\n\t\t\tLOG(ERROR) << \"Failed to flush file \" << uri.toString() << \" to HDFS\";\n\t\t\treturn Failure;\n\t\t}\n\t\tif (hdfsCloseFile(fs, file)!= 0) {\n\t\t\tLOG(ERROR) << \"Failed to close file \" << uri.toString();\n\t\t\treturn Failure;\n\t\t}\n\t\treturn Ok;\n\t}\n}", "CodeBleu_score": 38.743358193809684}, {"code": "Status HDFS::sync(const URI& uri){\n\t\tStatus status;\n\tstatus.code = 0;\n\tstatus.message = \"\";\n\tstatus.error = false;\n\n\tLOG_DEBUG(\"HDFS::sync: uri: %s\", uri.toString().c_str());\n\n\tstd::string file = uri.toString();\n\tif (file.find(\"hdfs://\") == std::string::npos) {\n\t\tfile = \"hdfs://\" + file;\n\t}\n\n\tLOG_DEBUG(\"HDFS::sync: file: %s\", file.c_str());\n\n\thdfsFS fs = hdfsConnect(uri.host().c_str(), uri.port());\n\tif (fs == NULL) {\n\t\tstatus.code = 1;\n\t\tstatus.message = \"HDFS::sync: Failed to connect to HDFS\";\n\t\tstatus.error = true;\n\t\tLOG_ERROR(\"HDFS::sync: Failed to connect to HDFS\");\n\t\treturn status;\n\t}\n\n\thdfsFile hfile = hdfsOpenFile(fs, file.c_str(), O_WRONLY, 0, 0, 0);\n\tif (hfile == NULL) {\n\t\tstatus.code = 1;\n\t\tstatus.message = \"HDFS::sync: Failed to open HDFS file\";\n\t\tstatus.error = true;\n\t\tLOG_ERROR(\"HDFS::sync: Failed to open HDFS file\");\n\t\treturn status;\n\t}\n\n\tif (hdfsFlush(fs, hfile)!= 0) {\n\t\tstatus.code = 1;\n\t\tstatus.message = \"HDFS::sync: Failed to flush HDFS file\";\n\t\tstatus.error = true;\n\t\tLOG_ERROR(\"HDFS::sync: Failed to flush HDFS file\");\n\t\treturn status;\n\t}\n\n\tif (hdfsCloseFile(fs, hfile)!= 0) {\n\t\tstatus.code = 1;\n\t\tstatus.message = \"HDFS::sync: Failed to close HDFS file\";\n\t\tstatus.error = true;\n\t\tLOG_ERROR(\"HDFS::sync: Failed to close HDFS file\");\n\t\treturn status;\n\t}\n\n\treturn status;\n}", "CodeBleu_score": 37.08735258055784}, {"code": "Status HDFS::sync(const URI& uri){\n\t\tStatus status;\n\thdfsFS fs = hdfsConnect(uri.getHostName().c_str(), uri.getPort());\n\tif (fs == NULL) {\n\t\tLOG(ERROR) << \"HDFS connection failed\";\n\t\treturn Status::Error(\"HDFS connection failed\");\n\t}\n\n\thdfsFile file = hdfsOpenFile(fs, uri.getPath().c_str(), O_WRONLY, 0, 0, 0);\n\tif (file == NULL) {\n\t\tLOG(ERROR) << \"HDFS file open failed\";\n\t\treturn Status::Error(\"HDFS file open failed\");\n\t}\n\n\tint rc = hdfsFlush(fs, file);\n\tif (rc!= 0) {\n\t\tLOG(ERROR) << \"HDFS file flush failed\";\n\t\treturn Status::Error(\"HDFS file flush failed\");\n\t}\n\n\trc = hdfsCloseFile(fs, file);\n\tif (rc!= 0) {\n\t\tLOG(ERROR) << \"HDFS file close failed\";\n\t\treturn Status::Error(\"HDFS file close failed\");\n\t}\n\n\thdfsDisconnect(fs);\n\treturn Status::Ok();\n}", "CodeBleu_score": 41.01113487287064}]}
{"instance_id": "893c46ab9675", "generation_result": [{"code": "Status HDFS::file_size(const URI& uri, uint64_t* nbytes){\n\t\thdfsFS fs = get_hdfs_fs(uri);\n\tif (fs == NULL) {\n\t\tLOG(ERROR) << \"HDFS file system not initialized\";\n\t\treturn Status::Error(\"HDFS file system not initialized\");\n\t}\n\thdfsFileInfo* info = hdfsGetPathInfo(fs, uri.path().c_str());\n\tif (info == NULL) {\n\t\tLOG(ERROR) << \"HDFS file system not initialized\";\n\t\thdfsFreeFileInfo(info, 1);\n\t\treturn Status::Error(\"HDFS file system not initialized\");\n\t}\n\t*nbytes = info->mSize;\n\thdfsFreeFileInfo(info, 1);\n\treturn Status::Ok();\n}", "CodeBleu_score": 45.31338954119145}, {"code": "Status HDFS::file_size(const URI& uri, uint64_t* nbytes){\n\t\tStatus status;\n\tif (!uri.is_hdfs()) {\n\t\tstatus.set_error(\"HDFS::file_size: URI is not HDFS.\");\n\t\treturn status;\n\t}\n\n\t// get file information\n\ttFileStatus* stat = hdfsGetPathInfo(fs, uri.path().c_str());\n\tif (stat == NULL) {\n\t\tstatus.set_error(\"HDFS::file_size: hdfsGetPathInfo failed.\");\n\t\treturn status;\n\t}\n\n\t// set size\n\t*nbytes = stat->mSize;\n\n\t// free file information\n\thdfsFreeFileInfo(stat, 1);\n\n\treturn Status::OK();\n}", "CodeBleu_score": 31.813127206904536}, {"code": "Status HDFS::file_size(const URI& uri, uint64_t* nbytes){\n\t\tStatus status;\n\thdfsFS fs = get_hdfs_fs();\n\tif (fs == NULL) {\n\t\treturn Status::Error(\"hdfs_file_size: Failed to get hdfs file system\");\n\t}\n\thdfsFileInfo* info = hdfsGetPathInfo(fs, uri.path().c_str());\n\tif (info == NULL) {\n\t\treturn Status::Error(\"hdfs_file_size: Failed to get hdfs file information\");\n\t}\n\t*nbytes = info->mSize;\n\thdfsFreeFileInfo(info, 1);\n\treturn Status::Ok();\n}", "CodeBleu_score": 36.512322856030075}]}
{"instance_id": "3da0b4d8ae16", "generation_result": [{"code": "public static Pair<String, String> getHbaseConfig(String hbaseCfgString){\n\t\tString hbaseQuorum = null;\n\tString hbaseZnodeParent = null;\n\tif (StringUtils.isNotBlank(hbaseCfgString)) {\n\t\tString[] split = hbaseCfgString.split(\",\");\n\t\tif (split.length == 2) {\n\t\t\thbaseQuorum = split[0];\n\t\t\thbaseZnodeParent = split[1];\n\t\t} else if (split.length == 1) {\n\t\t\thbaseQuorum = split[0];\n\t\t} else {\n\t\t\tthrow new AddaxException(\"Hbase config string is invalid.\");\n\t\t}\n\t}\n\tif (StringUtils.isBlank(hbaseQuorum)) {\n\t\tthrow new AddaxException(\"Hbase config string is invalid.\");\n\t}\n\treturn new Pair<String, String>(hbaseQuorum, hbaseZnodeParent);\n}", "CodeBleu_score": 24.32513602459202}, {"code": "public static Pair<String, String> getHbaseConfig(String hbaseCfgString){\n\t\tString hbaseQuorum = null;\n\tString hbaseZnodeParent = null;\n\tif (StringUtils.isNotBlank(hbaseCfgString)) {\n\t\tString[] hbaseCfg = hbaseCfgString.split(\",\");\n\t\tfor (String hbaseCfgItem : hbaseCfg) {\n\t\t\tif (hbaseCfgItem.startsWith(\"hbase.zookeeper.quorum\")) {\n\t\t\t\thbaseQuorum = hbaseCfgItem.substring(20);\n\t\t\t} else if (hbaseCfgItem.startsWith(\"hbase.zookeeper.property.clientPort\")) {\n\t\t\t\thbaseQuorum = hbaseCfgItem.substring(29);\n\t\t\t} else if (hbaseCfgItem.startsWith(\"hbase.zookeeper.znode.parent\")) {\n\t\t\t\thbaseZnodeParent = hbaseCfgItem.substring(26);\n\t\t\t}\n\t\t}\n\t}\n\tif (StringUtils.isBlank(hbaseQuorum)) {\n\t\thbaseQuorum = \"localhost:2181\";\n\t}\n\tif (StringUtils.isBlank(hbaseZnodeParent)) {\n\t\thbaseZnodeParent = \"/hbase\";\n\t}\n\treturn new Pair<String, String>(hbaseQuorum, hbaseZnodeParent);\n}", "CodeBleu_score": 24.199255956197092}, {"code": "public static Pair<String, String> getHbaseConfig(String hbaseCfgString){\n\t\tString quorum = null;\n\tString znodeParent = null;\n\tif (StringUtils.isBlank(hbaseCfgString)) {\n\t\tthrow new AddaxException(\"hbaseCfgString is null\");\n\t}\n\tString[] hbaseCfgArray = StringUtils.split(hbaseCfgString, \",\");\n\tfor (String hbaseCfg : hbaseCfgArray) {\n\t\tString[] hbaseCfgKV = StringUtils.split(hbaseCfg, \"=\");\n\t\tif (hbaseCfgKV.length!= 2) {\n\t\t\tthrow new AddaxException(\"hbaseCfgString is error\");\n\t\t}\n\t\tString key = hbaseCfgKV[0];\n\t\tString value = hbaseCfgKV[1];\n\t\tif (key.equals(HBaseConstant.HBASE_ZOOKEEPER_QUORUM)) {\n\t\t\tquorum = value;\n\t\t} else if (key.equals(HBaseConstant.HBASE_ZOOKEEPER_ZNODE_PARENT)) {\n\t\t\tznodeParent = value;\n\t\t}\n\t}\n\tif (StringUtils.isBlank(quorum)) {\n\t\tthrow new AddaxException(\"hbaseCfgString is error\");\n\t}\n\tif (StringUtils.isBlank(znodeParent)) {\n\t\tznodeParent = HBaseConstant.DEFAULT_ZNODE_PARENT;\n\t}\n\treturn Pair.of(quorum, znodeParent);\n}", "CodeBleu_score": 29.8510722311065}]}
{"instance_id": "860cae2bb7f4", "generation_result": [{"code": "public static void validateConfig(HbaseSQLWriterConfig cfg){\n\t\tLogger logger = LoggerFactory.getLogger(HbaseSQLWriter.class);\n\tlogger.info(\"validateConfig begin\");\n\ttry {\n\t\tlogger.info(\"validateConfig: connect to hbase\");\n\t\tUserGroupInformation.setConfiguration(cfg.getHbaseConf());\n\t\tUserGroupInformation.loginUserFromKeytab(cfg.getHbaseUser(), cfg.getHbaseKeytab());\n\t\tConnection conn = DriverManager.getConnection(cfg.getHbaseJdbcUrl(), cfg.getHbaseUser(), cfg.getHbasePassword());\n\t\tconn.setSchema(cfg.getHbaseSchema());\n\t\tlogger.info(\"validateConfig: connect to hbase success\");\n\t\tlogger.info(\"validateConfig: check table\");\n\t\tString tableName = cfg.getHbaseTable();\n\t\tString schemaName = cfg.getHbaseSchema();\n\t\tString namespace = cfg.getHbaseNamespace();\n\t\tif (StringUtils.isBlank(tableName) || StringUtils.isBlank(schemaName) || StringUtils.isBlank(namespace)) {\n\t\t\tthrow new AddaxException(\"The table name, schema name, and namespace cannot be empty\");\n\t\t}\n\t\tif (conn instanceof PhoenixConnection) {\n\t\t\tMetaDataClient metaDataClient = ((PhoenixConnection) conn).getMetaDataClient();\n\t\t\tPTable table = metaDataClient.getTable(schemaName, namespace, tableName);\n\t\t\tif (table == null) {\n\t\t\t\tthrow new AddaxException(\"The table \" + tableName + \" does not exist in the specified schema \" + schemaName + \" and namespace \" + namespace);\n\t\t\t}\n\t\t\tlogger.info(\"validateConfig: check table success\");\n\t\t\tlogger.info(\"validateConfig: check columns\");\n\t\t\tList<Pair<String, PDataType>> columns = table.getColumns();\n\t\t\tif (columns == null || columns.size() == 0) {\n\t\t\t\tthrow new AddaxException(\"The table \" + tableName + \" does not have any columns\");\n\t\t\t}\n\t\t\tfor (Pair<String, PDataType> column : columns) {\n\t\t\t\tString columnName = column.getFirst();\n\t\t\t\tPDataType columnType = column.getSecond();\n\t\t\t\tif (cfg.getHbaseColumns().contains(columnName)) {\n\t\t\t\t\tlogger.info(\"validateConfig: check columns success\");\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tthrow new AddaxException(\"The table \" +", "CodeBleu_score": 31.237286731031748}, {"code": "public static void validateConfig(HbaseSQLWriterConfig cfg){\n\t\ttry {\n\t\t// 1. Connect to the HBase cluster\n\t\tConnection conn = getConnection(cfg);\n\t\t// 2. Check if the table exists\n\t\tcheckTableExists(conn, cfg.getTargetTable());\n\t\t// 3. Get the table schema\n\t\tMap<String, PDataType> tableSchema = getTableSchema(conn, cfg.getTargetTable());\n\t\t// 4. Check the table schema\n\t\tcheckTableSchema(tableSchema, cfg.getColumns());\n\t} catch (Exception e) {\n\t\tthrow new AddaxException(e);\n\t}\n}", "CodeBleu_score": 16.938736186230578}, {"code": "public static void validateConfig(HbaseSQLWriterConfig cfg){\n\t\t// Validate Hbase connection\n\ttry {\n\t\tUserGroupInformation.loginUserFromSubject(UserGroupInformation.getCurrentUser());\n\t\tConnection conn = DriverManager.getConnection(cfg.getUrl(), cfg.getProps());\n\t\tconn.close();\n\t} catch (Exception e) {\n\t\tthrow new AddaxException(HbaseSQLWriterErrorCode.HBASE_CONNECTION_ERROR, \"Hbase connection error: \" + e.getMessage());\n\t}\n\t// Validate table\n\ttry {\n\t\tAdmin admin = HBaseAdminUtil.getAdmin(cfg.getUrl(), cfg.getProps());\n\t\tTableName tableName = TableName.valueOf(cfg.getTableName());\n\t\tif (!admin.tableExists(tableName)) {\n\t\t\tthrow new AddaxException(HbaseSQLWriterErrorCode.HBASE_TABLE_NOT_FOUND, \"Hbase table not found: \" + cfg.getTableName());\n\t\t}\n\t\tadmin.close();\n\t} catch (Exception e) {\n\t\tthrow new AddaxException(HbaseSQLWriterErrorCode.HBASE_TABLE_NOT_FOUND, \"Hbase table not found: \" + cfg.getTableName());\n\t}\n\t// Validate columns\n\ttry {\n\t\tConnection conn = DriverManager.getConnection(cfg.getUrl(), cfg.getProps());\n\t\tStatement stmt = conn.createStatement();\n\t\tResultSet rs = stmt.executeQuery(\"SHOW COLUMNS FROM \" + cfg.getTableName());\n\t\tMap<String, PDataType> columns = new HashMap<>();\n\t\twhile (rs.next()) {\n\t\t\tString columnName = rs.getString(1);\n\t\t\tString columnType = rs.getString(2);\n\t\t\tcolumns.put(columnName, SchemaUtil.getDataType(columnType));\n\t\t}\n\t\tfor (Map.Entry<String, String> entry : cfg.getColumns().entrySet()) {\n\t\t\tString columnName = entry.getKey();\n\t\t\tString columnType = entry.getValue();\n\t\t\tif (!columns.containsKey(columnName)) {\n\t\t\t\tthrow new AddaxException(HbaseSQLWriterErrorCode.HBASE_COLUMN_NOT_FOUND, \"Hbase column not found: \" + columnName);\n\t\t\t}\n\t\t\tPDataType dataType = columns.get(columnName);\n\t\t\tif (columnType!= null &&!columnType.equals(dataType.getDataTypeString())) {\n\t\t\t\tthrow new AddaxException(HbaseSQLWriterErrorCode.H", "CodeBleu_score": 36.0664242571096}]}
{"instance_id": "61721c327cf6", "generation_result": [{"code": "private static void kerberosAuthentication(String kerberosPrincipal, String kerberosKeytabFilePath){\n\t\tif (StringUtils.isNotBlank(kerberosPrincipal) && StringUtils.isNotBlank(kerberosKeytabFilePath)) {\n\t\ttry {\n\t\t\tUserGroupInformation.setConfiguration(Configuration.getHadoopConf());\n\t\t\tUserGroupInformation.loginUserFromKeytab(kerberosPrincipal, kerberosKeytabFilePath);\n\t\t} catch (IOException e) {\n\t\t\tthrow new AddaxException(String.format(\"Kerberos authentication failed. principal: %s, keytab file path: %s\", kerberosPrincipal, kerberosKeytabFilePath), e);\n\t\t}\n\t}\n}", "CodeBleu_score": 40.87640317544873}, {"code": "private static void kerberosAuthentication(String kerberosPrincipal, String kerberosKeytabFilePath){\n\t\ttry {\n\t\tUserGroupInformation.setConfiguration(new Configuration());\n\t\tUserGroupInformation.loginUserFromKeytab(kerberosPrincipal, kerberosKeytabFilePath);\n\t} catch (IOException e) {\n\t\tlogger.error(\"Kerberos authentication failed, principal: {}, keytab file path: {}\", kerberosPrincipal, kerberosKeytabFilePath, e);\n\t\tthrow new AddaxException(\"Kerberos authentication failed, principal: {}, keytab file path: {}\", kerberosPrincipal, kerberosKeytabFilePath, e);\n\t}\n}", "CodeBleu_score": 30.529197637275722}, {"code": "private static void kerberosAuthentication(String kerberosPrincipal, String kerberosKeytabFilePath){\n\t\ttry {\n\t\tUserGroupInformation.setConfiguration(new Configuration());\n\t\tUserGroupInformation.loginUserFromKeytab(kerberosPrincipal, kerberosKeytabFilePath);\n\t\tLOGGER.info(\"Kerberos authentication succeeded.\");\n\t} catch (IOException e) {\n\t\tLOGGER.error(\"Kerberos authentication failed.\", e);\n\t\tthrow new AddaxException(\"Kerberos authentication failed.\", e);\n\t}\n}", "CodeBleu_score": 24.702201481869746}]}
{"instance_id": "9ceb7f0bb717", "generation_result": [{"code": "public static Map<String, ThinClientPTable.ThinClientPColumn> parseColType(ResultSet rs)\n            throws SQLException{\n\t//        ResultSetMetaData rsmd = rs.getMetaData();\n//        int numCols = rsmd.getColumnCount();\n//        Map<String, ThinClientPTable.ThinClientPColumn> cols = new HashMap<>(numCols);\n//        for (int i = 1; i <= numCols; i++) {\n//            String colName = rsmd.getColumnName(i);\n//            PDataType colType = PDataType.fromHBaseType(rsmd.getColumnType(i));\n//            cols.put(colName, new ThinClientPTable.ThinClientPColumn(colName, colType));\n//        }\n//        return cols;\n        Map<String, ThinClientPTable.ThinClientPColumn> cols = new HashMap<>();\n        ResultSetMetaData rsmd = rs.getMetaData();\n        int numCols = rsmd.getColumnCount();\n        for (int i = 1; i <= numCols; i++) {\n            String colName = rsmd.getColumnName(i);\n            PDataType colType = PDataType.fromHBaseType(rsmd.getColumnType(i));\n            cols.put(colName, new ThinClientPTable.ThinClientPColumn(colName, colType));\n        }\n        return cols;\n    }", "CodeBleu_score": 38.96415393999552}, {"code": "public static Map<String, ThinClientPTable.ThinClientPColumn> parseColType(ResultSet rs)\n            throws SQLException{\n\t//        Map<String, ThinClientPTable.ThinClientPColumn> colType = new HashMap<>();\n        Map<String, ThinClientPTable.ThinClientPColumn> colType = new HashMap<>();\n        ResultSetMetaData rsmd = rs.getMetaData();\n        int cols = rsmd.getColumnCount();\n        for (int i = 1; i <= cols; i++) {\n            String colName = rsmd.getColumnName(i);\n            String colTypeStr = rsmd.getColumnTypeName(i);\n            PDataType type = SchemaUtil.getDataType(colTypeStr);\n            if (type == null) {\n                throw new SQLException(\"Unsupported data type: \" + colTypeStr);\n            }\n            ThinClientPTable.ThinClientPColumn col = new ThinClientPTable.ThinClientPColumn(colName, type);\n            colType.put(colName, col);\n        }\n        return colType;\n    }", "CodeBleu_score": 46.22729236420236}, {"code": "public static Map<String, ThinClientPTable.ThinClientPColumn> parseColType(ResultSet rs)\n            throws SQLException{\n\t//        Map<String, ThinClientPTable.ThinClientPColumn> colType = new HashMap<>();\n//        ResultSetMetaData rsmd = rs.getMetaData();\n//        int columnCount = rsmd.getColumnCount();\n//        for (int i = 1; i <= columnCount; i++) {\n//            String columnName = rsmd.getColumnName(i);\n//            String columnType = rsmd.getColumnTypeName(i);\n//            ThinClientPTable.ThinClientPColumn col = new ThinClientPTable.ThinClientPColumn(columnName, columnType);\n//            colType.put(columnName, col);\n//        }\n//        return colType;\n        Map<String, ThinClientPTable.ThinClientPColumn> colType = new HashMap<>();\n        ResultSetMetaData rsmd = rs.getMetaData();\n        int columnCount = rsmd.getColumnCount();\n        for (int i = 1; i <= columnCount; i++) {\n            String columnName = rsmd.getColumnName(i);\n            String columnType = rsmd.getColumnTypeName(i);\n            ThinClientPTable.ThinClientPColumn col = new ThinClientPTable.ThinClientPColumn(columnName, columnType);\n            colType.put(columnName, col);\n        }\n        return colType;\n    }", "CodeBleu_score": 37.97994414015618}]}
{"instance_id": "247fc8882f6f", "generation_result": [{"code": "public static void truncateTable(Connection conn, String tableName){\n\t\tPhoenixConnection phoenixConn = null;\n\tAdmin admin = null;\n\ttry {\n\t\tphoenixConn = (PhoenixConnection) conn;\n\t\tadmin = phoenixConn.getAdmin();\n\t\tif (admin.tableExists(TableName.valueOf(tableName))) {\n\t\t\tadmin.disableTable(TableName.valueOf(tableName));\n\t\t\tadmin.truncateTable(TableName.valueOf(tableName), true);\n\t\t\tlogger.debug(\"Table {} has been truncated.\", tableName);\n\t\t}\n\t} catch (SQLException e) {\n\t\tthrow new AddaxException(\"Error while truncating table \" + tableName, e, HBaseConstant.HBASE_ERROR_CODE_TRUNCATE_TABLE_ERROR);\n\t} finally {\n\t\tif (admin!= null) {\n\t\t\ttry {\n\t\t\t\tadmin.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new AddaxException(\"Error while closing admin\", e, HBaseConstant.HBASE_ERROR_CODE_CLOSE_ADMIN_ERROR);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 43.87415018597351}, {"code": "public static void truncateTable(Connection conn, String tableName){\n\t\ttry {\n\t\tif (conn instanceof PhoenixConnection) {\n\t\t\tPhoenixConnection phoenixConnection = (PhoenixConnection) conn;\n\t\t\tAdmin admin = phoenixConnection.getAdmin();\n\t\t\tif (!admin.tableExists(TableName.valueOf(tableName))) {\n\t\t\t\tthrow new AddaxException(\"The table \" + tableName + \" does not exist.\");\n\t\t\t}\n\t\t\tadmin.disableTable(TableName.valueOf(tableName));\n\t\t\tadmin.truncateTable(TableName.valueOf(tableName), false);\n\t\t\tLOG.debug(\"The table \" + tableName + \" has been truncated.\");\n\t\t} else {\n\t\t\tthrow new AddaxException(\"The connection is not Phoenix connection.\");\n\t\t}\n\t} catch (Exception e) {\n\t\tthrow new AddaxException(\"The table \" + tableName + \" cannot be truncated.\", e);\n\t} finally {\n\t\tif (conn instanceof PhoenixConnection) {\n\t\t\ttry {\n\t\t\t\t((PhoenixConnection) conn).getAdmin().close();\n\t\t\t} catch (Exception e) {\n\t\t\t\tLOG.warn(\"Failed to close Phoenix connection.\", e);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 35.61275687348064}, {"code": "public static void truncateTable(Connection conn, String tableName){\n\t\tString msg = \"truncateTable\";\n\tLogger logger = LoggerFactory.getLogger(msg);\n\ttry {\n\t\tlogger.debug(\"truncateTable: start\");\n\t\tPhoenixConnection phoenixConn = (PhoenixConnection) conn;\n\t\tAdmin admin = phoenixConn.getAdmin();\n\t\tif (!admin.tableExists(TableName.valueOf(tableName))) {\n\t\t\tlogger.debug(\"table \" + tableName + \" not exists\");\n\t\t\treturn;\n\t\t}\n\t\tadmin.disableTable(TableName.valueOf(tableName));\n\t\tadmin.truncateTable(TableName.valueOf(tableName), false);\n\t\tlogger.debug(\"truncateTable: end\");\n\t} catch (SQLException e) {\n\t\tthrow new AddaxException(\"SQLException: \" + e.getMessage(), e);\n\t} catch (IOException e) {\n\t\tthrow new AddaxException(\"IOException: \" + e.getMessage(), e);\n\t} finally {\n\t\ttry {\n\t\t\tif (admin!= null) {\n\t\t\t\tadmin.close();\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tthrow new AddaxException(\"IOException: \" + e.getMessage(), e);\n\t\t}\n\t}\n}", "CodeBleu_score": 39.352450718564505}]}
{"instance_id": "ac87e1b9a54e", "generation_result": [{"code": "private void addSourceFileByType(String filePath){\n\t\tif (this.fileTypes.contains(this.getFileExtension(filePath))) {\n\t\tthis.sourceFiles.add(filePath);\n\t\tthis.logger.info(\"Added file {} to source files list.\", filePath);\n\t} else {\n\t\tthis.logger.error(\"Unsupported file type {}. File {} will not be added to the source files list.\", this.getFileExtension(filePath), filePath);\n\t\tthrow new AddaxException(StorageReaderErrorCode.UNSUPPORTED_FILE_TYPE, \"Unsupported file type \" + this.getFileExtension(filePath));\n\t}\n}", "CodeBleu_score": 23.025998913888806}, {"code": "private void addSourceFileByType(String filePath){\n\t\tif (filePath == null || filePath.isEmpty()) {\n\t\treturn;\n\t}\n\tFileStatus fileStatus = null;\n\ttry {\n\t\tfileStatus = fs.getFileStatus(new Path(filePath));\n\t} catch (IOException e) {\n\t\tthrow new AddaxException(StorageReaderErrorCode.FILE_NOT_FOUND, e, filePath);\n\t}\n\tif (fileStatus!= null) {\n\t\tString fileName = fileStatus.getPath().getName();\n\t\tif (fileName.endsWith(fileType)) {\n\t\t\tsourceFiles.add(filePath);\n\t\t\tLOG.info(\"The file {} is added to the source files list.\", filePath);\n\t\t} else {\n\t\t\tLOG.error(\"The file {} is not added to the source files list because it is not a {} file.\", filePath, fileType);\n\t\t\tthrow new AddaxException(StorageReaderErrorCode.UNSUPPORTED_FILE_TYPE, filePath, fileType);\n\t\t}\n\t}\n}", "CodeBleu_score": 33.711736856297804}, {"code": "private void addSourceFileByType(String filePath){\n\t\tString fileType = getFileType(filePath);\n\tif (fileType.equals(fileType)) {\n\t\tLOG.info(\"Add file \" + filePath + \" to source files list.\");\n\t\taddSourceFile(filePath);\n\t} else {\n\t\tLOG.error(\"Unsupported file type: \" + fileType + \".\");\n\t\tthrow new AddaxException(StorageReaderErrorCode.UNSUPPORTED_FILE_TYPE);\n\t}\n}", "CodeBleu_score": 18.16032827057189}]}
{"instance_id": "5e6a66d06162", "generation_result": [{"code": "public void sequenceFileStartRead(String sourceSequenceFilePath, Configuration readerSliceConfig,\n            RecordSender recordSender, TaskPluginCollector taskPluginCollector){\n\t\ttry {\n\t\tlong startTime = System.currentTimeMillis();\n\t\tlong readBytes = 0;\n\t\tlong readRecords = 0;\n\t\tlong readTime = 0;\n\t\tlong readTimePerRecord = 0;\n\t\tlong readTimePerByte = 0;\n\t\tlong readTimePerRecordPerByte = 0;\n\t\tlong readTimePerBytePerRecord = 0;\n\t\tlong readTimePerRecordPerBytePerRecord = 0;\n\t\tlong readTimePerBytePerRecordPerRecord = 0;\n\t\tlong readTimePerRecordPerBytePerRecordPerRecord = 0;\n\t\tlong readTimePerBytePerRecordPerRecordPerRecord = 0;\n\t\tlong readTimePerBytePerRecordPerRecordPerRecordPerRecord = 0;\n\t\tlong readTimePerBytePerRecordPerRecordPerRecordPerRecordPerRecord = 0;\n\t\tlong readTimePerBytePerRecordPerRecordPerRecordPerRecordPerRecordPerRecord = 0;\n\t\tlong readTimePerBytePerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecord = 0;\n\t\tlong readTimePerBytePerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecord = 0;\n\t\tlong readTimePerBytePerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecord = 0;\n\t\tlong readTimePerBytePerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecord = 0;\n\t\tlong readTimePerBytePerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecord = 0;\n\t\tlong readTimePerBytePerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecord = 0;\n\t\tlong readTimePerBytePerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecord = 0;\n\t\tlong readTimePerBytePerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecord = 0;\n\t\tlong readTimePerBytePerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecordPerRecord = 0;\n\t", "CodeBleu_score": 10.43257799676242}, {"code": "public void sequenceFileStartRead(String sourceSequenceFilePath, Configuration readerSliceConfig,\n            RecordSender recordSender, TaskPluginCollector taskPluginCollector){\n\t\ttry {\n\t\tlong start = System.currentTimeMillis();\n\t\t// 1. \u6253\u5f00sequence\u6587\u4ef6\n\t\tFileStatus[] fileStatuses = StorageReaderUtil.getFileStatus(sourceSequenceFilePath);\n\t\tif (fileStatuses.length == 0) {\n\t\t\tthrow new AddaxException(StorageReaderErrorCode.FILE_NOT_EXIST, \"The sequence file does not exist.\");\n\t\t}\n\t\tPath path = new Path(sourceSequenceFilePath);\n\t\tFileSystem fileSystem = path.getFileSystem(readerSliceConfig);\n\t\tFSDataInputStream inputStream = fileSystem.open(path);\n\t\tSequenceFile.Reader reader = new SequenceFile.Reader(fileSystem, inputStream, path);\n\t\t// 2. \u8bfb\u53d6sequence\u6587\u4ef6\n\t\tlong recordCount = 0;\n\t\tlong recordSize = 0;\n\t\tlong totalRecordSize = 0;\n\t\tlong totalRecordCount = 0;\n\t\tlong lastReadTime = System.currentTimeMillis();\n\t\tlong lastRecordSize = 0;\n\t\tlong lastRecordCount = 0;\n\t\tlong lastRecordCountTime = System.currentTimeMillis();\n\t\tlong lastRecordSizeTime = System.currentTimeMillis();\n\t\tlong lastRecordCountInterval = 0;\n\t\tlong lastRecordSizeInterval = 0;\n\t\tlong lastRecordCountTimeInterval = 0;\n\t\tlong lastRecordSizeTimeInterval = 0;\n\t\tlong lastRecordCountTimeIntervalInterval = 0;\n\t\tlong lastRecordSizeTimeIntervalInterval = 0;\n\t\tlong lastRecordCountTimeIntervalIntervalInterval = 0;\n\t\tlong lastRecordSizeTimeIntervalIntervalInterval = 0;\n\t\twhile (reader.next(new Text(), new Text())) {\n\t\t\tString key = reader.getCurrentKey().toString();\n\t\t\tString value = reader.getCurrentValue().toString();\n\t\t\tif (StringUtils.isBlank(value)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tRecord record = StorageReaderUtil.transportRecord(value, readerSliceConfig);\n\t\t\trecordCount++;\n\t\t\trecordSize += value.getBytes().length;\n\t\t\ttotalRecordSize += value.getBytes().length;\n\t\t\ttotalRecordCount++;\n\t\t\tif (System.currentTimeMillis() - lastReadTime > 1000) {\n\t\t\t\tlastRecordCountInterval = recordCount - lastRecordCount;\n\t\t\t\tlastRecordSizeInterval = recordSize - lastRecordSize;\n\t\t\t\tlastRecordCountTimeInterval", "CodeBleu_score": 29.602696613557626}, {"code": "public void sequenceFileStartRead(String sourceSequenceFilePath, Configuration readerSliceConfig,\n            RecordSender recordSender, TaskPluginCollector taskPluginCollector){\n\t\tfinal Logger logger = LoggerFactory.getLogger(this.getClass());\n\tlogger.info(\"sequenceFileStartRead start\");\n\tlong start = System.currentTimeMillis();\n\ttry {\n\t\t// Create a FileSystem object to access the sequence file\n\t\tFileSystem fs = FileSystem.get(new JobConf());\n\t\t// Open the sequence file using the provided file path\n\t\tPath path = new Path(sourceSequenceFilePath);\n\t\tSequenceFile.Reader reader = new SequenceFile.Reader(fs, path, new JobConf());\n\t\t// Get the key and value classes from the reader\n\t\tClass<?> keyClass = reader.getKeyClass();\n\t\tClass<?> valueClass = reader.getValueClass();\n\t\t// Create a new instance of the key and value classes\n\t\tObject key = ReflectionUtils.newInstance(keyClass, null);\n\t\tObject value = ReflectionUtils.newInstance(valueClass, null);\n\t\t// Iterate through the file, reading key-value pairs\n\t\twhile (reader.next(key, value)) {\n\t\t\t// Convert the key and value to byte arrays\n\t\t\tbyte[] keyBytes = key.toString().getBytes();\n\t\t\tbyte[] valueBytes = value.toString().getBytes();\n\t\t\t// Check if the value is not empty\n\t\t\tif (valueBytes.length > 0) {\n\t\t\t\t// Create a new record using StorageReaderUtil\n\t\t\t\tRecord record = StorageReaderUtil.createRecord(keyBytes, valueBytes);\n\t\t\t\t// Send the record to the RecordSender\n\t\t\t\trecordSender.send(record);\n\t\t\t}\n\t\t}\n\t\t// Close the reader\n\t\treader.close();\n\t\t// Log the end of the reading process\n\t\tlogger.info(\"sequenceFileStartRead end\");\n\t\t// Calculate the total reading time\n\t\tlong end = System.currentTimeMillis();\n\t\tlong duration = end - start;\n\t\tlogger.info(\"sequenceFileStartRead cost time: {} ms\", duration);\n\t} catch (Exception e) {\n\t\tlogger.error(\"sequenceFileStartRead error\", e);\n\t\tthrow new AddaxException(StorageReaderErrorCode.READ_ERROR, e);\n\t}\n}", "CodeBleu_score": 42.39845313649289}]}
{"instance_id": "c450f959616c", "generation_result": [{"code": "public boolean checkHdfsFileType(String filepath, String specifiedFileType){\n\t\tif (StringUtils.isBlank(filepath)) {\n\t\treturn false;\n\t}\n\tif (StringUtils.isBlank(specifiedFileType)) {\n\t\treturn false;\n\t}\n\tboolean result = false;\n\ttry {\n\t\tFileSystem fs = FileSystem.get(new Configuration());\n\t\tif (fs.exists(new Path(filepath))) {\n\t\t\tFileStatus[] fileStatus = fs.listStatus(new Path(filepath));\n\t\t\tif (fileStatus!= null && fileStatus.length > 0) {\n\t\t\t\tfor (FileStatus file : fileStatus) {\n\t\t\t\t\tif (file.getPath().getName().equals(specifiedFileType)) {\n\t\t\t\t\t\tresult = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (IOException e) {\n\t\tAddaxException.logError(StorageReaderErrorCode.READER_READ_HDFS_FILE_ERROR, e.getMessage());\n\t\treturn false;\n\t}\n\treturn result;\n}", "CodeBleu_score": 26.63197774138736}, {"code": "public boolean checkHdfsFileType(String filepath, String specifiedFileType){\n\t\tboolean result = false;\n\ttry {\n\t\tFileSystem fs = FileSystem.get(new Configuration());\n\t\tFileStatus[] fileStatus = fs.listStatus(new Path(filepath));\n\t\tif (fileStatus.length == 0) {\n\t\t\treturn result;\n\t\t}\n\t\tString fileName = fileStatus[0].getPath().getName();\n\t\tString fileExt = fileName.substring(fileName.lastIndexOf(\".\") + 1);\n\t\tif (specifiedFileType.equalsIgnoreCase(\"orc\")) {\n\t\t\tresult = fileExt.equalsIgnoreCase(\"orc\");\n\t\t} else if (specifiedFileType.equalsIgnoreCase(\"rc\")) {\n\t\t\tresult = fileExt.equalsIgnoreCase(\"rc\");\n\t\t} else if (specifiedFileType.equalsIgnoreCase(\"sequence\")) {\n\t\t\tresult = fileExt.equalsIgnoreCase(\"seq\");\n\t\t} else if (specifiedFileType.equalsIgnoreCase(\"parquet\")) {\n\t\t\tresult = fileExt.equalsIgnoreCase(\"parquet\");\n\t\t} else if (specifiedFileType.equalsIgnoreCase(\"csv\")) {\n\t\t\tresult = fileExt.equalsIgnoreCase(\"csv\");\n\t\t} else if (specifiedFileType.equalsIgnoreCase(\"text\")) {\n\t\t\tresult = fileExt.equalsIgnoreCase(\"txt\");\n\t\t} else if (specifiedFileType.equalsIgnoreCase(\"avro\")) {\n\t\t\tresult = fileExt.equalsIgnoreCase(\"avro\");\n\t\t} else {\n\t\t\tresult = false;\n\t\t}\n\t} catch (IOException e) {\n\t\tthrow new AddaxException(StorageReaderErrorCode.READER_HDFS_FILE_TYPE_CHECK_ERROR, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 31.484127147545355}, {"code": "public boolean checkHdfsFileType(String filepath, String specifiedFileType){\n\t\ttry {\n\t\tFileSystem fs = FileSystem.get(new Path(filepath).toUri(), new JobConf());\n\t\tif (specifiedFileType.equalsIgnoreCase(StorageReaderUtil.ORC_FILE_TYPE)) {\n\t\t\treturn checkOrcFileType(fs, new Path(filepath));\n\t\t} else if (specifiedFileType.equalsIgnoreCase(StorageReaderUtil.RC_FILE_TYPE)) {\n\t\t\treturn checkRCFileType(fs, new Path(filepath));\n\t\t} else if (specifiedFileType.equalsIgnoreCase(StorageReaderUtil.SEQUENCE_FILE_TYPE)) {\n\t\t\treturn checkSequenceFileType(fs, new Path(filepath));\n\t\t} else if (specifiedFileType.equalsIgnoreCase(StorageReaderUtil.PARQUET_FILE_TYPE)) {\n\t\t\treturn checkParquetFileType(fs, new Path(filepath));\n\t\t} else if (specifiedFileType.equalsIgnoreCase(StorageReaderUtil.CSV_FILE_TYPE)) {\n\t\t\treturn checkCsvFileType(fs, new Path(filepath));\n\t\t} else if (specifiedFileType.equalsIgnoreCase(StorageReaderUtil.TEXT_FILE_TYPE)) {\n\t\t\treturn checkTextFileType(fs, new Path(filepath));\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} catch (IOException e) {\n\t\tthrow new AddaxException(StorageReaderErrorCode.READ_FILE_ERROR, e.getMessage(), e);\n\t}\n}", "CodeBleu_score": 32.00513622642404}]}
{"instance_id": "1bf487d2cc64", "generation_result": [{"code": "public static void closeConnection(Connection hConnection){\n\t\tif (hConnection!= null) {\n\t\ttry {\n\t\t\thConnection.close();\n\t\t} catch (IOException e) {\n\t\t\tthrow new AddaxException(e, HBaseConstant.HBASE_ERROR_CODE_CLOSE_CONNECTION_ERROR);\n\t\t}\n\t}\n}", "CodeBleu_score": 40.8878600806269}, {"code": "public static void closeConnection(Connection hConnection){\n\t\tif (hConnection!= null) {\n\t\ttry {\n\t\t\thConnection.close();\n\t\t} catch (IOException e) {\n\t\t\tthrow new AddaxException(e.getMessage(), e);\n\t\t}\n\t}\n}", "CodeBleu_score": 40.60031329850474}, {"code": "public static void closeConnection(Connection hConnection){\n\t\tif (hConnection!= null) {\n\t\ttry {\n\t\t\thConnection.close();\n\t\t} catch (IOException e) {\n\t\t\tthrow new AddaxException(e, \"closeConnection\", \"Failed to close HBase connection\");\n\t\t}\n\t}\n}", "CodeBleu_score": 37.59973541760486}]}
{"instance_id": "680728cbc3ec", "generation_result": [{"code": "public static void closeAdmin(Admin admin){\n\tif (admin!= null) {\ntry {\nadmin.close();\n} catch (IOException e) {\nthrow new AddaxException(e, \"Failed to close admin: \" + admin.toString());\n}\n}\n}", "CodeBleu_score": 43.756319677958636}, {"code": "public static void closeAdmin(Admin admin){\n\t\tif (admin!= null) {\n\t\ttry {\n\t\t\tadmin.close();\n\t\t} catch (IOException e) {\n\t\t\tthrow new AddaxException(e.getMessage(), e);\n\t\t}\n\t}\n}", "CodeBleu_score": 40.08175232497308}, {"code": "public static void closeAdmin(Admin admin){\n\t\tif (admin!= null) {\n\t\ttry {\n\t\t\tadmin.close();\n\t\t} catch (IOException e) {\n\t\t\tthrow new AddaxException(\"Failed to close Admin instance\", e);\n\t\t}\n\t}\n}", "CodeBleu_score": 40.967855005450296}]}
{"instance_id": "ce50bd53abef", "generation_result": [{"code": "private void convertCellToLine(Cell cell, Record record)\n            throws Exception{\n\t//        String rowKey = Bytes.toString(CellUtil.cloneRow(cell));", "CodeBleu_score": 2.0380007517363365}, {"code": "private void convertCellToLine(Cell cell, Record record)\n            throws Exception{\n\t//    long timestamp = cell.getTimestamp();\n    byte[] rowKey = CellUtil.cloneRow(cell);\n    String rowKeyStr = new String(rowKey, StandardCharsets.UTF_8);\n    String family = CellUtil.cloneFamily(cell);\n    String qualifier = CellUtil.cloneQualifier(cell);\n    byte[] value = CellUtil.cloneValue(cell);\n    String valueStr = new String(value, StandardCharsets.UTF_8);\n    record.add(new LongColumn(HBaseKey.ROW_KEY, Long.parseLong(rowKeyStr)));\n    record.add(new LongColumn(HBaseKey.TIMESTAMP, cell.getTimestamp()));\n    record.add(new StringColumn(HBaseKey.FAMILY, family));\n    record.add(new StringColumn(HBaseKey.QUALIFIER, qualifier));\n    record.add(new StringColumn(HBaseKey.VALUE, valueStr));\n}", "CodeBleu_score": 27.42550556276865}, {"code": "private void convertCellToLine(Cell cell, Record record)\n            throws Exception{\n\t//    // get the row key\n//    String rowKey = Bytes.toString(CellUtil.cloneRow(cell));\n//    // get the timestamp\n//    long timestamp = cell.getTimestamp();\n//    // get the column family\n//    String family = Bytes.toString(CellUtil.cloneFamily(cell));\n//    // get the qualifier\n//    String qualifier = Bytes.toString(CellUtil.cloneQualifier(cell));\n//    // get the value\n//    byte[] value = CellUtil.cloneValue(cell);\n//    // get the type of the column value\n//    String type = getType(value);\n//    // get the format of the column value\n//    String format = getFormat(value);\n//    // convert the value to the appropriate type\n//    Object convertedValue = convertValue(value, type);\n//    // add the column to the record\n//    record.addColumn(family, qualifier, timestamp, convertedValue, format);\n//    // add the row key to the record\n//    record.setRow(rowKey);\n}", "CodeBleu_score": 2.1029777907619387}]}
{"instance_id": "29e8f3a99f0c", "generation_result": [{"code": "public static byte[] convertUserStartRowkey(Configuration configuration){\n\t\tString startRowKey = configuration.get(HBaseConstant.HBASE_START_ROWKEY);\n\tif (StringUtils.isBlank(startRowKey)) {\n\t\treturn new byte[0];\n\t}\n\tif (HBaseConstant.HBASE_ROWKEY_BINARY.equalsIgnoreCase(startRowKey)) {\n\t\treturn Bytes.toBytes(configuration.get(HBaseConstant.HBASE_START_ROWKEY_BINARY));\n\t}\n\treturn Bytes.toBytes(startRowKey);\n}", "CodeBleu_score": 41.93929702716443}, {"code": "public static byte[] convertUserStartRowkey(Configuration configuration){\n\t\tString startRowKey = configuration.get(HBaseConstant.HBASE_START_ROWKEY);\n\tif (StringUtils.isBlank(startRowKey)) {\n\t\treturn new byte[0];\n\t}\n\tif (startRowKey.startsWith(\"b\")) {\n\t\treturn Bytes.toBytes(startRowKey);\n\t}\n\treturn Bytes.toBytes(startRowKey, Charset.forName(\"UTF-8\"));\n}", "CodeBleu_score": 39.74678404834628}, {"code": "public static byte[] convertUserStartRowkey(Configuration configuration){\n\t\tbyte[] startRow = configuration.getBytes(HBaseConstant.START_ROW_KEY);\n\tif (startRow == null || startRow.length == 0) {\n\t\treturn new byte[0];\n\t}\n\treturn startRow;\n}", "CodeBleu_score": 28.290821836113977}]}
{"instance_id": "f5ad51545b10", "generation_result": [{"code": "public static byte[] convertInnerStartRowkey(Configuration configuration){\n\t\tString startRowKey = configuration.getString(HBaseConstant.START_ROW_KEY, \"\");\n\tif (StringUtils.isBlank(startRowKey)) {\n\t\treturn new byte[0];\n\t}\n\treturn startRowKey.getBytes(Charset.forName(HBaseConstant.DEFAULT_CHARSET));\n}", "CodeBleu_score": 49.461886804241736}, {"code": "public static byte[] convertInnerStartRowkey(Configuration configuration){\n\t\tString startRowkey = configuration.get(HBaseConstant.START_ROWKEY);\n\tif (StringUtils.isEmpty(startRowkey)) {\n\t\treturn new byte[0];\n\t} else {\n\t\treturn Bytes.toBytes(startRowkey);\n\t}\n}", "CodeBleu_score": 55.924528101888384}, {"code": "public static byte[] convertInnerStartRowkey(Configuration configuration){\n\t\tString startRowKey = configuration.getString(HBaseConstant.HBASE_SCANNER_START_ROWKEY);\n\tif (StringUtils.isBlank(startRowKey)) {\n\t\treturn new byte[0];\n\t} else {\n\t\treturn Bytes.toBytes(startRowKey);\n\t}\n}", "CodeBleu_score": 51.98969540238646}]}
{"instance_id": "8618eef8b0e9", "generation_result": [{"code": "public KafkaTbQueueMsg(ConsumerRecord<String, byte[]> record){\n\t\tthis.key = UUID.fromString(record.key());\n\tthis.headers = new DefaultTbQueueMsgHeaders(record.headers());\n\tthis.data = record.value();\n}", "CodeBleu_score": 42.04206291290926}, {"code": "public KafkaTbQueueMsg(ConsumerRecord<String, byte[]> record){\n\t\tthis.key = UUID.fromString(record.key());\n\tthis.headers = new DefaultTbQueueMsgHeaders(record.headers());\n\tthis.data = record.value();\n}", "CodeBleu_score": 42.04206291290926}, {"code": "public KafkaTbQueueMsg(ConsumerRecord<String, byte[]> record){\n\t\tthis.key = UUID.fromString(record.key());\n\tthis.headers = new DefaultTbQueueMsgHeaders(record.headers());\n\tthis.data = record.value();\n}", "CodeBleu_score": 42.04206291290926}]}
{"instance_id": "46484df184dd", "generation_result": [{"code": "public TbQueueProducer<TbProtoQueueMsg<ToTransportMsg>> createTransportNotificationsMsgProducer(){\n\t\treturn createTransportNotificationsMsgProducer(null);\n}", "CodeBleu_score": 8.317686145875003}, {"code": "public TbQueueProducer<TbProtoQueueMsg<ToTransportMsg>> createTransportNotificationsMsgProducer(){\n\t\treturn createTransportNotificationsMsgProducer(new TbQueueTransportNotificationSettings());\n}", "CodeBleu_score": 11.077240457912724}, {"code": "public TbQueueProducer<TbProtoQueueMsg<ToTransportMsg>> createTransportNotificationsMsgProducer(){\n\t\treturn createTransportNotificationsMsgProducer(TbQueueTransportNotificationSettings.getSettings());\n}", "CodeBleu_score": 14.309006484252437}]}
{"instance_id": "4ac56ef9f89a", "generation_result": [{"code": "public TbQueueConsumer<TbProtoQueueMsg<ToCoreNotificationMsg>> createToCoreNotificationsMsgConsumer(){\n\t\tTbQueueCoreSettings settings = TbQueueCoreSettings.create(ServiceType.CORE, \"core-notifications-msg\");\n\tTbKafkaTopicConfigs topicConfigs = settings.getTopicConfigs();\n\tTbKafkaSettings kafkaSettings = settings.getKafkaSettings();\n\tTbKafkaAdmin admin = new TbKafkaAdmin(kafkaSettings);\n\tTbKafkaConsumerStatsService statsService = new TbKafkaConsumerStatsService(admin, settings.getStatsServiceSettings());\n\tTbKafkaConsumerTemplate<TbProtoQueueMsg<ToCoreNotificationMsg>> consumerTemplate = new TbKafkaConsumerTemplate<>(\n\t\t\tsettings.getConsumerSettings(), admin, statsService);\n\tTbQueueConsumer<TbProtoQueueMsg<ToCoreNotificationMsg>> consumer = new TbQueueConsumer<>(consumerTemplate);\n\tconsumer.setMessageDecoder(new TbProtoQueueMsgDecoder<>(ToCoreNotificationMsg.parser(),\n\t\t\tTbProtoJsQueueMsg.getJsParser(),\n\t\t\tTbProtoJsQueueMsg.getJsParser(),\n\t\t\tTbProtoJsQueueMsg.getJsParser(),\n\t\t\tTbProtoJsQueueMsg.getJsParser(),\n\t\t\tTbProtoJsQueueMsg.getJsParser(),\n\t\t\tTbProtoJsQueueMsg.getJsParser(),\n\t\t\tTbProtoJsQueueMsg.getJsParser(),\n\t\t\tTbProtoJsQueueMsg.getJsParser(),\n\t\t\tTbProtoJsQueueMsg.getJsParser(),\n\t\t\tTbProtoJsQueueMsg.getJsParser(),\n\t\t\tTbProtoJsQueueMsg.getJsParser(),\n\t\t\tTbProtoJsQueueMsg.getJsParser(),\n\t\t\tTbProtoJsQueueMsg.getJsParser(),\n\t\t\tTbProtoJsQueueMsg.getJsParser(),\n\t\t\tTbProtoJsQueueMsg.getJsParser(),\n\t\t\tTbProtoJsQueueMsg.getJsParser(),\n\t\t\tTbProtoJsQueueMsg.getJsParser(),\n\t\t\tTbProtoJsQueueMsg.getJsParser(),\n\t\t\tTbProtoJsQueueMsg.getJsParser(),\n\t\t\tTbProtoJsQueueMsg.getJsParser(),\n\t\t\tTbProtoJsQueueMsg.getJsParser(),\n\t\t\tTbProtoJsQueueMsg.getJsParser(),\n\t\t\tTbProtoJsQueueMsg.getJsParser(),\n\t\t\tTbProtoJsQueueMsg.getJsParser(),\n\t\t\tTbProtoJsQueueMsg.getJsParser(),\n\t\t\tTbProtoJsQueueMsg.getJsParser(),\n\t\t\tTbProtoJsQueueMsg.getJsParser(),\n\t\t", "CodeBleu_score": 28.360279797371174}, {"code": "public TbQueueConsumer<TbProtoQueueMsg<ToCoreNotificationMsg>> createToCoreNotificationsMsgConsumer(){\n\t\tTbQueueCoreSettings coreSettings = TbQueueCoreSettings.createDefault();\n\tTbKafkaSettings kafkaSettings = TbKafkaSettings.createDefault();\n\tTbKafkaTopicConfigs topicConfigs = TbKafkaTopicConfigs.createDefault();\n\tTbQueueRemoteJsInvokeSettings remoteJsInvokeSettings = TbQueueRemoteJsInvokeSettings.createDefault();\n\tTbQueueTransportNotificationSettings transportNotificationSettings = TbQueueTransportNotificationSettings.createDefault();\n\tTbQueueRequestTemplate<TbProtoQueueMsg<ToCoreNotificationMsg>> requestTemplate = new DefaultTbQueueRequestTemplate<>(\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong(0),\n\t\t\tnew AtomicLong", "CodeBleu_score": 24.521460842448445}, {"code": "public TbQueueConsumer<TbProtoQueueMsg<ToCoreNotificationMsg>> createToCoreNotificationsMsgConsumer(){\n\t\treturn createToCoreNotificationsMsgConsumer(new TbQueueCoreSettings(), new TbServiceInfoProvider(), new TbKafkaSettings());\n}", "CodeBleu_score": 7.695239316715435}]}
{"instance_id": "e13a82b26338", "generation_result": [{"code": "protected void doSubscribe(List<String> topicNames){\n\t\tif (topicNames.isEmpty()) {\n\t\tlog.info(\"No topics to subscribe to\");\n\t\tconsumer.unsubscribe();\n\t\treturn;\n\t}\n\tlog.info(\"Subscribing to topics: {}\", topicNames);\n\tconsumer.subscribe(topicNames);\n}", "CodeBleu_score": 53.54740969646103}, {"code": "protected void doSubscribe(List<String> topicNames){\n\t\tif (topicNames.isEmpty()) {\n\t\tlog.info(\"No topics specified. Unsubscribing from all topics\");\n\t\tconsumer.unsubscribe();\n\t\treturn;\n\t}\n\n\tList<String> existingTopics = new ArrayList<>();\n\tfor (String topicName : topicNames) {\n\t\tif (topicName.isEmpty()) {\n\t\t\tcontinue;\n\t\t}\n\t\texistingTopics.add(topicName);\n\t}\n\n\tif (existingTopics.isEmpty()) {\n\t\tlog.info(\"No existing topics. Creating topics and subscribing to them\");\n\t\tconsumer.subscribe(topicNames);\n\t\treturn;\n\t}\n\n\tList<String> topicsToCreate = new ArrayList<>();\n\tList<String> topicsToSubscribe = new ArrayList<>();\n\tfor (String topicName : existingTopics) {\n\t\ttry {\n\t\t\tconsumer.partitionsFor(topicName);\n\t\t\ttopicsToSubscribe.add(topicName);\n\t\t} catch (UnsupportedOperationException e) {\n\t\t\ttopicsToCreate.add(topicName);\n\t\t}\n\t}\n\n\tif (!topicsToCreate.isEmpty()) {\n\t\tlog.info(\"Creating topics: {}\", topicsToCreate);\n\t\ttbQueueAdmin.createTopics(topicsToCreate);\n\t}\n\n\tif (!topicsToSubscribe.isEmpty()) {\n\t\tlog.info(\"Subscribing to topics: {}\", topicsToSubscribe);\n\t\tconsumer.subscribe(topicsToSubscribe);\n\t}\n}", "CodeBleu_score": 46.15580290962772}, {"code": "protected void doSubscribe(List<String> topicNames){\n\t\tif (topicNames.isEmpty()) {\n\t\tlog.info(\"No topics to subscribe to, unsubscribing from all topics.\");\n\t\tconsumer.unsubscribe();\n\t} else {\n\t\tList<String> topics = new ArrayList<>();\n\t\tfor (String topicName : topicNames) {\n\t\t\tif (topicName.isEmpty()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\ttopics.add(topicName);\n\t\t}\n\t\tif (topics.isEmpty()) {\n\t\t\tlog.info(\"No topics to subscribe to, unsubscribing from all topics.\");\n\t\t\tconsumer.unsubscribe();\n\t\t} else {\n\t\t\tlog.info(\"Subscribing to topics: {}\", topics);\n\t\t\tconsumer.subscribe(topics);\n\t\t}\n\t}\n}", "CodeBleu_score": 49.948035191356155}]}
{"instance_id": "8a20d0b48703", "generation_result": [{"code": "protected List<ConsumerRecord<String, byte[]>> doPoll(long durationInMillis){\n\t\tStopWatch stopWatch = new StopWatch();\n\tstopWatch.start();\n\tConsumerRecords<String, byte[]> records = consumer.poll(Duration.ofMillis(durationInMillis));\n\tstopWatch.stop();\n\tlog.info(\"Received {} records from {} in {} ms\", records.count(), topic, stopWatch.getTotalTimeMillis());\n\tif (records.count() == 0) {\n\t\treturn Collections.emptyList();\n\t}\n\tList<ConsumerRecord<String, byte[]>> list = new ArrayList<>();\n\trecords.forEach(record -> list.add(record));\n\treturn list;\n}", "CodeBleu_score": 55.16996467612042}, {"code": "protected List<ConsumerRecord<String, byte[]>> doPoll(long durationInMillis){\n\t\tStopWatch stopWatch = new StopWatch();\n\tstopWatch.start();\n\tConsumerRecords<String, byte[]> records = consumer.poll(Duration.ofMillis(durationInMillis));\n\tstopWatch.stop();\n\tlog.debug(\"Polling {} records from {} topic, duration: {}ms, total time: {}ms\", records.count(), topic, durationInMillis, stopWatch.getTotalTimeMillis());\n\tif (records.count() == 0) {\n\t\treturn Collections.emptyList();\n\t}\n\tList<ConsumerRecord<String, byte[]>> result = new ArrayList<>();\n\trecords.forEach(record -> result.add(record));\n\treturn result;\n}", "CodeBleu_score": 57.40281318124969}, {"code": "protected List<ConsumerRecord<String, byte[]>> doPoll(long durationInMillis){\n\t\tStopWatch stopWatch = new StopWatch();\n\tstopWatch.start();\n\tConsumerRecords<String, byte[]> records = consumer.poll(Duration.ofMillis(durationInMillis));\n\tstopWatch.stop();\n\tlog.info(\"Poll duration {}ms, topic {}, records {}\", stopWatch.getTotalTimeMillis(), topic, records.count());\n\tif (records.count() == 0) {\n\t\treturn Collections.emptyList();\n\t} else {\n\t\tList<ConsumerRecord<String, byte[]>> list = new ArrayList<>();\n\t\trecords.forEach(record -> list.add(record));\n\t\treturn list;\n\t}\n}", "CodeBleu_score": 58.44774215361246}]}
{"instance_id": "328e4c39a8e1", "generation_result": [{"code": "public void onMsg(TbContext ctx, TbMsg msg){\n\t\ttry {\n\t\tString topic = nodeConfiguration.getTopic();\n\t\tString key = nodeConfiguration.getKey();\n\t\tString value = msg.getPayload().toString();\n\t\tString keyValue = null;\n\t\tString topicValue = null;\n\t\tif (key == null || key.isEmpty()) {\n\t\t\tkeyValue = msg.getPayload().toString();\n\t\t} else {\n\t\t\tkeyValue = ctx.getVariable(key).toString();\n\t\t}\n\t\tif (topic == null || topic.isEmpty()) {\n\t\t\ttopicValue = msg.getPayload().toString();\n\t\t} else {\n\t\t\ttopicValue = ctx.getVariable(topic).toString();\n\t\t}\n\t\tif (topicValue == null || topicValue.isEmpty()) {\n\t\t\tthrow new TbNodeException(ThingsboardKafkaClientError.TOPIC_IS_EMPTY);\n\t\t}\n\t\tif (keyValue == null || keyValue.isEmpty()) {\n\t\t\tthrow new TbNodeException(ThingsboardKafkaClientError.KEY_IS_EMPTY);\n\t\t}\n\t\tif (value == null || value.isEmpty()) {\n\t\t\tthrow new TbNodeException(ThingsboardKafkaClientError.VALUE_IS_EMPTY);\n\t\t}\n\t\tif (nodeConfiguration.isSsl()) {\n\t\t\tProperties properties = new Properties();\n\t\t\tproperties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, nodeConfiguration.getBootstrapServers());\n\t\t\tproperties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, nodeConfiguration.getKeySerializer());\n\t\t\tproperties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, nodeConfiguration.getValueSerializer());\n\t\t\tproperties.put(ProducerConfig.CLIENT_ID_CONFIG, nodeConfiguration.getClientId());\n\t\t\tproperties.put(ProducerConfig.ACKS_CONFIG, nodeConfiguration.getAcks());\n\t\t\tproperties.put(ProducerConfig.RETRIES_CONFIG, nodeConfiguration.getRetries());\n\t\t\tproperties.put(ProducerConfig.LINGER_MS_CONFIG, nodeConfiguration.getLingerMs());\n\t\t\tproperties.put(ProducerConfig.BATCH_SIZE_CONFIG, nodeConfiguration.getBatchSize());\n\t\t\tproperties.put(ProducerConfig.BUFFER_MEMORY_CONFIG, nodeConfiguration.getBufferMemory());\n\t\t\tproperties.put(ProducerConfig.COMPRESSION_TYPE_CONFIG, nodeConfiguration.getCompressionType());\n\t\t\tproperties.put(", "CodeBleu_score": 28.26739231651671}, {"code": "public void onMsg(TbContext ctx, TbMsg msg){\n\t\ttry {\n\t\tif (ctx.getRuleNodeConfiguration().getInitStatus() == RuleNode.InitStatus.INIT_ERROR) {\n\t\t\tctx.notifyError(new ThingsboardKafkaClientError(ctx.getRuleNodeConfiguration().getInitErrorMessage()));\n\t\t\treturn;\n\t\t}\n\t\tString topic = ctx.getRuleNodeConfiguration().getTopic();\n\t\tString key = ctx.getRuleNodeConfiguration().getKey();\n\t\tString value = msg.getPayload();\n\t\tif (topic == null) {\n\t\t\ttopic = ctx.getRuleNodeConfiguration().getTopicPattern();\n\t\t}\n\t\tif (key == null) {\n\t\t\tkey = ctx.getRuleNodeConfiguration().getKeyPattern();\n\t\t}\n\t\tif (topic == null || key == null) {\n\t\t\tctx.notifyError(new ThingsboardKafkaClientError(\"Topic and key patterns are not specified\"));\n\t\t\treturn;\n\t\t}\n\t\tif (topic.contains(\"$\")) {\n\t\t\ttopic = topic.replace(\"$\", msg.getId());\n\t\t}\n\t\tif (key.contains(\"$\")) {\n\t\t\tkey = key.replace(\"$\", msg.getId());\n\t\t}\n\t\tif (topic.contains(\"$\")) {\n\t\t\ttopic = topic.replace(\"$\", msg.getId());\n\t\t}\n\t\tif (key.contains(\"$\")) {\n\t\t\tkey = key.replace(\"$\", msg.getId());\n\t\t}\n\t\tProperties props = new Properties();\n\t\tprops.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, ctx.getRuleNodeConfiguration().getBootstrapServers());\n\t\tprops.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, ctx.getRuleNodeConfiguration().getKeySerializer());\n\t\tprops.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, ctx.getRuleNodeConfiguration().getValueSerializer());\n\t\tprops.put(ProducerConfig.ACKS_CONFIG, ctx.getRuleNodeConfiguration().getAcks());\n\t\tprops.put(ProducerConfig.RETRIES_CONFIG, ctx.getRuleNodeConfiguration().getRetries());\n\t\tprops.put(ProducerConfig.BATCH_SIZE_CONFIG, ctx.getRuleNodeConfiguration().getBatchSize());\n\t\tprops.put(ProducerConfig.LINGER_MS_CONFIG, ctx.getRuleNodeConfiguration().getLingerMs());\n\t\tprops.put(ProducerConfig.BUFFER_MEMORY_CONFIG, ctx", "CodeBleu_score": 28.45408855573005}, {"code": "public void onMsg(TbContext ctx, TbMsg msg){\n\t\tfinal String topic = ctx.getNodeConfiguration().get(\"topic\");\n\tfinal String key = ctx.getNodeConfiguration().get(\"key\");\n\tfinal String partition = ctx.getNodeConfiguration().get(\"partition\");\n\tfinal String partitionKey = ctx.getNodeConfiguration().get(\"partitionKey\");\n\tfinal String partitionStrategy = ctx.getNodeConfiguration().get(\"partitionStrategy\");\n\tfinal String keyStrategy = ctx.getNodeConfiguration().get(\"keyStrategy\");\n\tfinal String keyType = ctx.getNodeConfiguration().get(\"keyType\");\n\tfinal String keyValue = ctx.getNodeConfiguration().get(\"keyValue\");\n\tfinal String keyField = ctx.getNodeConfiguration().get(\"keyField\");\n\tfinal String keyFields = ctx.getNodeConfiguration().get(\"keyFields\");\n\tfinal String keyFieldSeparator = ctx.getNodeConfiguration().get(\"keyFieldSeparator\");\n\tfinal String keyFieldCase = ctx.getNodeConfiguration().get(\"keyFieldCase\");\n\tfinal String keyFieldFormat = ctx.getNodeConfiguration().get(\"keyFieldFormat\");\n\tfinal String keyFieldFormatSeparator = ctx.getNodeConfiguration().get(\"keyFieldFormatSeparator\");\n\tfinal String keyFieldFormatCase = ctx.getNodeConfiguration().get(\"keyFieldFormatCase\");\n\tfinal String keyFieldFormatType = ctx.getNodeConfiguration().get(\"keyFieldFormatType\");\n\tfinal String keyFieldFormatTypeSeparator = ctx.getNodeConfiguration().get(\"keyFieldFormatTypeSeparator\");\n\tfinal String keyFieldFormatTypeCase = ctx.getNodeConfiguration().get(\"keyFieldFormatTypeCase\");\n\tfinal String keyFieldFormatTypeValue = ctx.getNodeConfiguration().get(\"keyFieldFormatTypeValue\");\n\tfinal String keyFieldFormatTypeValueSeparator = ctx.getNodeConfiguration().get(\"keyFieldFormatTypeValueSeparator\");\n\tfinal String keyFieldFormatTypeValueCase = ctx.getNodeConfiguration().get(\"keyFieldFormatTypeValueCase\");\n\tfinal String keyFieldFormatTypeValueFormat = ctx.getNodeConfiguration().get(\"keyFieldFormatTypeValueFormat\");\n\tfinal String keyFieldFormatTypeValueFormatSeparator = ctx.getNodeConfiguration().get(\"keyFieldFormatTypeValueFormatSeparator\");\n\tfinal String keyFieldFormatTypeValueFormatCase = ctx.getNodeConfiguration().get(\"keyFieldFormatTypeValueFormatCase\");\n\tfinal String keyFieldFormatTypeValueFormatType = ctx.getNodeConfiguration().get(\"keyFieldFormatTypeValueFormatType\");\n\tfinal String", "CodeBleu_score": 18.903339878931707}]}
{"instance_id": "35f835e8c387", "generation_result": [{"code": "protected void publish(TbContext ctx, TbMsg msg, String topic, String key){\n\t\tif (key == null) {\n\t\tkey = \"\";\n\t}\n\tif (msg.getMetaData()!= null && msg.getMetaData().getKeys()!= null && msg.getMetaData().getKeys().length > 0) {\n\t\tRecordHeaders headers = new RecordHeaders();\n\t\tfor (String key : msg.getMetaData().getKeys()) {\n\t\t\tString value = msg.getMetaData().getStringValue(key);\n\t\t\tif (value!= null) {\n\t\t\t\theaders.add(new RecordHeader(key, value.getBytes(StandardCharsets.UTF_8)));\n\t\t\t}\n\t\t}\n\t\tif (headers.count() > 0) {\n\t\t\tctx.send(new TbMsg(msg.getTs(), msg.getOriginatorId(), msg.getOriginatorType(), msg.getMetaData(), msg.getPayload(), headers));\n\t\t}\n\t} else {\n\t\tctx.send(new TbMsg(msg.getTs(), msg.getOriginatorId(), msg.getOriginatorType(), msg.getMetaData(), msg.getPayload()));\n\t}\n}", "CodeBleu_score": 27.990324701722546}, {"code": "protected void publish(TbContext ctx, TbMsg msg, String topic, String key){\n\t\tif (key == null || key.isEmpty()) {\n\t\tlog.error(\"Key is empty or null\");\n\t\tthrow new TbNodeException(\"Key is empty or null\");\n\t}\n\tif (topic == null || topic.isEmpty()) {\n\t\tlog.error(\"Topic is empty or null\");\n\t\tthrow new TbNodeException(\"Topic is empty or null\");\n\t}\n\tif (ctx.getTbMsgMetaData()!= null) {\n\t\ttry {\n\t\t\tTbMsgMetaData metaData = ctx.getTbMsgMetaData();\n\t\t\tif (metaData.getKeys()!= null && metaData.getKeys().size() > 0) {\n\t\t\t\tRecordHeaders headers = new RecordHeaders();\n\t\t\t\tfor (String key : metaData.getKeys()) {\n\t\t\t\t\theaders.add(key, metaData.get(key).getBytes(StandardCharsets.UTF_8));\n\t\t\t\t}\n\t\t\t\tctx.getTbMsg().setHeaders(headers);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"Error while adding metadata to headers\", e);\n\t\t}\n\t}\n\ttry {\n\t\tif (ctx.getTbMsg().getPayload() == null) {\n\t\t\tctx.getTbMsg().setPayload(new byte[0]);\n\t\t}\n\t\tProducer<String, byte[]> producer = createProducer(ctx);\n\t\tproducer.send(new ProducerRecord<String, byte[]>(topic, key, ctx.getTbMsg().getPayload()), new Callback() {\n\t\t\t@Override\n\t\t\tpublic void onCompletion(RecordMetadata metadata, Exception exception) {\n\t\t\t\tif (exception!= null) {\n\t\t\t\t\tlog.error(\"Error while sending message to Kafka\", exception);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t} catch (Exception e) {\n\t\tlog.error(\"Error while sending message to Kafka\", e);\n\t}\n}", "CodeBleu_score": 34.61973244225332}, {"code": "protected void publish(TbContext ctx, TbMsg msg, String topic, String key){\n\t\ttry {\n\t\tString msgStr = msg.toString();\n\t\tProperties props = new Properties();\n\t\tprops.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, this.getBootstrapServers());\n\t\tprops.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, this.getKeySerializer());\n\t\tprops.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, this.getValueSerializer());\n\t\tprops.put(ProducerConfig.CLIENT_ID_CONFIG, this.getClientId());\n\t\tif (this.isSslEnabled()) {\n\t\t\tprops.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, this.getTruststoreLocation());\n\t\t\tprops.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, this.getTruststorePassword());\n\t\t\tprops.put(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG, this.getKeystoreLocation());\n\t\t\tprops.put(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, this.getKeystorePassword());\n\t\t\tprops.put(SslConfigs.SSL_KEY_PASSWORD_CONFIG, this.getKeyPassword());\n\t\t\tprops.put(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG, this.getSslEndpointIdentificationAlgorithm());\n\t\t}\n\t\tProducer<String, String> producer = new KafkaProducer<>(props);\n\t\tif (this.isAddMetadata()) {\n\t\t\tTbMsgMetaData metaData = msg.getMetaData();\n\t\t\tif (metaData!= null) {\n\t\t\t\tRecordHeaders headers = new RecordHeaders();\n\t\t\t\tfor (String key : metaData.getKeys()) {\n\t\t\t\t\tString value = metaData.getString(key);\n\t\t\t\t\theaders.add(new RecordHeader(key, value.getBytes(StandardCharsets.UTF_8)));\n\t\t\t\t}\n\t\t\t\tproducer.send(new ProducerRecord<String, String>(topic, key, msgStr), new RecordMetadataCallback(ctx, msg, headers));\n\t\t\t} else {\n\t\t\t\tproducer.send(new ProducerRecord<String, String>(topic, key, msgStr), new RecordMetadataCallback(ctx, msg, null));\n\t\t\t}\n\t\t} else {\n\t\t\tproducer.send(new ProducerRecord<String, String>(topic, key, msgStr), new RecordMetadataCallback(ctx, msg, null));\n\t\t}\n\t\tproducer.close();\n\t} catch (Exception e) {\n\t\tlog", "CodeBleu_score": 34.74293074813662}]}
{"instance_id": "111a11189434", "generation_result": [{"code": "public void destroy(){\n\t\tif (producer!= null) {\n\t\ttry {\n\t\t\tproducer.close();\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"Failed to close producer\", e);\n\t\t}\n\t}\n}", "CodeBleu_score": 61.14510470097976}, {"code": "public void destroy(){\n\t\tif (producer!= null) {\n\t\ttry {\n\t\t\tproducer.close();\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"Failed to close Kafka producer\", e);\n\t\t}\n\t}\n}", "CodeBleu_score": 61.31318402746789}, {"code": "public void destroy(){\n\t\tif (producer!= null) {\n\t\ttry {\n\t\t\tproducer.close();\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"Error while closing producer\", e);\n\t\t}\n\t}\n}", "CodeBleu_score": 56.83866282137258}]}
{"instance_id": "f5d2487100a9", "generation_result": [{"code": "public TbQueueProducer<TbProtoQueueMsg<ToRuleEngineMsg>> createRuleEngineMsgProducer(){\n\t\treturn createRuleEngineMsgProducer(new TbQueueRuleEngineSettings());\n}", "CodeBleu_score": 10.850627608585187}, {"code": "public TbQueueProducer<TbProtoQueueMsg<ToRuleEngineMsg>> createRuleEngineMsgProducer(){\n\t\tTbQueueRequestTemplate<TbProtoQueueMsg<ToRuleEngineMsg>> requestTemplate = new DefaultTbQueueRequestTemplate<>();\n\tTbQueueProducer<TbProtoQueueMsg<ToRuleEngineMsg>> producer = new TbKafkaProducerTemplate<>(requestTemplate);\n\treturn producer;\n}", "CodeBleu_score": 27.479168760216105}, {"code": "public TbQueueProducer<TbProtoQueueMsg<ToRuleEngineMsg>> createRuleEngineMsgProducer(){\n\t\treturn createRuleEngineMsgProducer(new DefaultTbQueueRequestTemplate<>(ToRuleEngineMsg.class));\n}", "CodeBleu_score": 8.798524184261455}]}
{"instance_id": "886264f5ca27", "generation_result": [{"code": "private void startLogScheduling(){\n\t\tScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1, new ThingsBoardThreadFactory(\"kafka-consumer-stats-scheduler\"));\n\tscheduler.scheduleAtFixedRate(new Runnable() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tif (logSchedulingEnabled) {\n\t\t\t\t\tif (consumerGroupStats.size() > 0) {\n\t\t\t\t\t\tlog.info(\"Kafka consumer group stats: {}\", consumerGroupStats);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tlog.warn(\"Error while logging consumer group stats\", e);\n\t\t\t}\n\t\t}\n\t}, logSchedulingTimeout, logSchedulingTimeout, TimeUnit.MILLISECONDS);\n}", "CodeBleu_score": 16.28324695345247}, {"code": "private void startLogScheduling(){\n\t\tif (logSchedulingEnabled) {\n\t\tlog.info(\"Starting Kafka consumer group statistics logging\");\n\t\tscheduledExecutorService.scheduleAtFixedRate(this::logStatistics, 0, logSchedulingPeriod, TimeUnit.SECONDS);\n\t}\n}", "CodeBleu_score": 2.9376272953570663}, {"code": "private void startLogScheduling(){\n\t\tScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor(ThingsBoardThreadFactory.forName(\"kafka-consumer-group-stats-scheduler\"));\n\tscheduledExecutorService.scheduleAtFixedRate(() -> {\n\t\ttry {\n\t\t\tif (log.isDebugEnabled()) {\n\t\t\t\tlog.debug(\"Checking Kafka consumer group statistics...\");\n\t\t\t}\n\t\t\tSet<String> groupIds = kafkaConsumerGroupStats.keySet();\n\t\t\tif (groupIds.isEmpty()) {\n\t\t\t\tif (log.isDebugEnabled()) {\n\t\t\t\t\tlog.debug(\"No consumer groups to check.\");\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfor (String groupId : groupIds) {\n\t\t\t\ttry {\n\t\t\t\t\tKafkaConsumerStats kafkaConsumerStats = kafkaConsumerGroupStats.get(groupId);\n\t\t\t\t\tif (kafkaConsumerStats == null) {\n\t\t\t\t\t\tif (log.isDebugEnabled()) {\n\t\t\t\t\t\t\tlog.debug(\"Consumer group {} not found.\", groupId);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (kafkaConsumerStats.isPrintStats()) {\n\t\t\t\t\t\tif (log.isDebugEnabled()) {\n\t\t\t\t\t\t\tlog.debug(\"Printing consumer group {} statistics...\", groupId);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tMap<TopicPartition, OffsetAndMetadata> endOffsets = kafkaConsumerStats.getEndOffsets();\n\t\t\t\t\t\tMap<TopicPartition, OffsetAndMetadata> offsets = kafkaConsumerStats.getOffsets();\n\t\t\t\t\t\tif (offsets == null || endOffsets == null) {\n\t\t\t\t\t\t\tif (log.isDebugEnabled()) {\n\t\t\t\t\t\t\t\tlog.debug(\"Consumer group {} statistics not available.\", groupId);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tList<String> laggingTopics = new ArrayList<>();\n\t\t\t\t\t\tfor (TopicPartition topicPartition : offsets.keySet()) {\n\t\t\t\t\t\t\tif (endOffsets.containsKey(topicPartition) && offsets.get(topicPartition).offset() < endOffsets.get(topicPartition).offset()) {\n\t\t\t\t\t\t\t\tlaggingTopics.add(topicPartition.topic());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!laggingTopics.isEmpty()) {\n\t\t\t\t\t\t\tif (log.isDebugEnabled()) {\n\t\t\t\t\t\t\t\tlog.debug(\"Consumer group {} has {} lagging topics: {}\", groupId, laggingTopics.size(), StringUtils.join(laggingTopics, \",\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (log.isDebugEnabled()) {\n\t\t\t\t\t\t\t\tlog.debug(\"Consumer group {} has no lagging topics.\", groupId);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}", "CodeBleu_score": 31.141382777092165}]}
{"instance_id": "81553181cdc8", "generation_result": [{"code": "protected Properties toAdminProps(){\n\tProperties props = toProps();\nprops.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\nprops.put(AdminClientConfig.RETRIES_CONFIG, retries);\nreturn props;\n}", "CodeBleu_score": 89.98389245836069}, {"code": "protected Properties toAdminProps(){\n\t\tProperties props = toProps();\n\tprops.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n\tprops.put(AdminClientConfig.RETRIES_CONFIG, retries);\n\treturn props;\n}", "CodeBleu_score": 89.99349344802474}, {"code": "protected Properties toAdminProps(){\n\tProperties props = new Properties();", "CodeBleu_score": 13.711812501761166}]}
{"instance_id": "3c8bf3ff31b7", "generation_result": [{"code": "public void notifyOfAddedMetric(Metric metric, String metricName, MetricGroup group){\n\t\tif (metric instanceof Counter) {\n\t\tthis.counters.put(metricName, (Counter)metric);\n\t\tthis.counterEvents.put(metricName, new MetricEvent(metricName, group.getName(), group.getTags()));\n\t} else if (metric instanceof Gauge) {\n\t\tthis.gauges.put(metricName, (Gauge)metric);\n\t\tthis.gaugeEvents.put(metricName, new MetricEvent(metricName, group.getName(), group.getTags()));\n\t} else if (metric instanceof Histogram) {\n\t\tthis.histograms.put(metricName, (Histogram)metric);\n\t\tthis.histogramEvents.put(metricName, new MetricEvent(metricName, group.getName(), group.getTags()));\n\t} else if (metric instanceof Meter) {\n\t\tthis.meters.put(metricName, (Meter)metric);\n\t\tthis.meterEvents.put(metricName, new MetricEvent(metricName, group.getName(), group.getTags()));\n\t} else {\n\t\tLOGGER.warn(\"Metric type is not supported: \" + metric.getClass().getName());\n\t}\n}", "CodeBleu_score": 38.96431049941459}, {"code": "public void notifyOfAddedMetric(Metric metric, String metricName, MetricGroup group){\n\t\tif (metric instanceof Counter) {\n\t\tthis.metricCounter.put(metricName, metric);\n\t\tthis.metricCounterEvent.put(metricName, metric);\n\t} else if (metric instanceof Gauge) {\n\t\tthis.metricGauge.put(metricName, metric);\n\t\tthis.metricGaugeEvent.put(metricName, metric);\n\t} else if (metric instanceof Histogram) {\n\t\tthis.metricHistogram.put(metricName, metric);\n\t\tthis.metricHistogramEvent.put(metricName, metric);\n\t} else if (metric instanceof Meter) {\n\t\tthis.metricMeter.put(metricName, metric);\n\t\tthis.metricMeterEvent.put(metricName, metric);\n\t} else {\n\t\tthis.logger.warn(\"Metric type is unknown: \" + metric.getMetricType());\n\t}\n}", "CodeBleu_score": 38.80828472046677}, {"code": "public void notifyOfAddedMetric(Metric metric, String metricName, MetricGroup group){\n\t}", "CodeBleu_score": 5.4334600346481645}]}
{"instance_id": "77c6addc9b99", "generation_result": [{"code": "static MetricEvent addFields(MetricEvent metricEvent, String field, Gauge<?> gauge){\n\t\tif (metricEvent.getFields()!= null) {\n\t\tmetricEvent.getFields().put(field, gauge.getValue());\n\t} else {\n\t\tmetricEvent.setFields(new HashMap<>());\n\t\tmetricEvent.getFields().put(field, gauge.getValue());\n\t}\n\treturn metricEvent;\n}", "CodeBleu_score": 21.02856631205831}, {"code": "static MetricEvent addFields(MetricEvent metricEvent, String field, Gauge<?> gauge){\n\t\tMap<String, Object> fields = metricEvent.getFields();\n\tif (fields!= null) {\n\t\tif (fields.containsKey(field)) {\n\t\t\tNumber value = (Number) fields.get(field);\n\t\t\tif (value instanceof Integer) {\n\t\t\t\tfields.put(field, gauge.getValue().intValue());\n\t\t\t} else if (value instanceof Long) {\n\t\t\t\tfields.put(field, gauge.getValue().longValue());\n\t\t\t} else if (value instanceof Double) {\n\t\t\t\tfields.put(field, gauge.getValue().doubleValue());\n\t\t\t} else {\n\t\t\t\tfields.put(field, gauge.getValue().toString());\n\t\t\t}\n\t\t} else {\n\t\t\tfields.put(field, gauge.getValue().toString());\n\t\t}\n\t} else {\n\t\tfields = new HashMap<>();\n\t\tfields.put(field, gauge.getValue().toString());\n\t\tmetricEvent.setFields(fields);\n\t}\n\treturn metricEvent;\n}", "CodeBleu_score": 50.69400321813716}, {"code": "static MetricEvent addFields(MetricEvent metricEvent, String field, Gauge<?> gauge){\n\t\tif (metricEvent.hasFields()) {\n\t\tMap<String, Object> fields = metricEvent.getFields();\n\t\tif (fields.containsKey(field)) {\n\t\t\tObject value = fields.get(field);\n\t\t\tif (value instanceof Number) {\n\t\t\t\tfields.put(field, gauge.getValue());\n\t\t\t} else {\n\t\t\t\tfields.put(field, gauge.getValue().toString());\n\t\t\t}\n\t\t} else {\n\t\t\tfields.put(field, gauge.getValue());\n\t\t}\n\t} else {\n\t\tMap<String, Object> fields = new HashMap<>();\n\t\tfields.put(field, gauge.getValue());\n\t\tmetricEvent = metricEvent.withFields(fields);\n\t}\n\treturn metricEvent;\n}", "CodeBleu_score": 54.430865797354954}]}
{"instance_id": "a48971ffb3e9", "generation_result": [{"code": "static MetricEvent addKafkaLagMetricFields(MetricEvent metricEvent, Long timestamp, Gauge<?> gauge){\n\t\tString[] metricNames = gauge.getMetricNames();\n\tString[] metricValues = gauge.getMetricValues();\n\tString[] metricTimestamps = gauge.getMetricTimestamps();\n\tString[] metricCommittedOffsets = gauge.getMetricCommittedOffsets();\n\tString[] metricCurrentOffsets = gauge.getMetricCurrentOffsets();\n\tString[] metricLagTimes = gauge.getMetricLagTimes();\n\tString[] metricLagTimesTimestamps = gauge.getMetricLagTimesTimestamps();\n\tString[] metricLagTimesCommittedOffsets = gauge.getMetricLagTimesCommittedOffsets();\n\tString[] metricLagTimesCurrentOffsets = gauge.getMetricLagTimesCurrentOffsets();\n\n\tfor (int i = 0; i < metricNames.length; i++) {\n\t\tString metricName = metricNames[i];\n\t\tString metricValue = metricValues[i];\n\t\tString metricTimestamp = metricTimestamps[i];\n\t\tString metricCommittedOffset = metricCommittedOffsets[i];\n\t\tString metricCurrentOffset = metricCurrentOffsets[i];\n\t\tString metricLagTime = metricLagTimes[i];\n\t\tString metricLagTimeTimestamp = metricLagTimesTimestamps[i];\n\t\tString metricLagTimeCommittedOffset = metricLagTimesCommittedOffsets[i];\n\t\tString metricLagTimeCurrentOffset = metricLagTimesCurrentOffsets[i];\n\n\t\tif (metricName.equals(KAFKA_LAG_TIME_METRIC_NAME.get())) {\n\t\t\tif (metricLagTime == null) {\n\t\t\t\tmetricEvent.addMetric(KAFKA_LAG_TIME_METRIC_NAME.get(), metricValue, metricTimestamp, metricCommittedOffset, metricCurrentOffset, metricLagTimeTimestamp, metricLagTimeCommittedOffset, metricLagTimeCurrentOffset);\n\t\t\t} else if (!metricLagTime.equals(metricLagTimeCurrentOffset)) {\n\t\t\t\tmetricEvent.addMetric(KAFKA_LAG_TIME_METRIC_NAME.get(), metricValue, metricTimestamp, metricCommittedOffset, metricCurrentOffset, metricLagTimeTimestamp, metricLagTimeCommittedOffset, metricLagTimeCurrentOffset);\n\t\t\t}\n\t\t} else if (metricName.equals(KAFKA_LAG_TIME_METRIC_NAME_WITH_TIMESTAMP.get())) {\n\t\t\tif (metricLagTime == null) {\n\t\t\t\tmetricEvent.addMetric", "CodeBleu_score": 21.606819524631817}, {"code": "static MetricEvent addKafkaLagMetricFields(MetricEvent metricEvent, Long timestamp, Gauge<?> gauge){\n\t\tString metricName = gauge.getName();\n\tString[] metricNameComponents = metricName.split(Pattern.quote(METRIC_NAME_SEPARATOR));\n\tString topic = metricNameComponents[0];\n\tString partition = metricNameComponents[1];\n\tString consumerGroup = metricNameComponents[2];\n\tString metricType = metricNameComponents[3];\n\tif (metricType.equals(METRIC_TYPE_LAG)) {\n\t\tLong currentOffset = (Long) gauge.getValue();\n\t\tLong committedOffset = (Long) gauge.getTags().get(METRIC_TAG_COMMITTED_OFFSET);\n\t\tLong dataTimestamp = (Long) gauge.getTags().get(METRIC_TAG_DATA_TIMESTAMP);\n\t\tif (kafkaLagTimes.containsKey(topic)) {\n\t\t\tMap<String, Long> kafkaLagTime = kafkaLagTimes.get(topic);\n\t\t\tif (kafkaLagTime.containsKey(partition)) {\n\t\t\t\tif (kafkaLagTime.get(partition)!= currentOffset) {\n\t\t\t\t\tkafkaLagTime.put(partition, currentOffset);\n\t\t\t\t\tmetricEvent.setTimestamp(timestamp);\n\t\t\t\t\tmetricEvent.addField(METRIC_FIELD_TOPIC, topic);\n\t\t\t\t\tmetricEvent.addField(METRIC_FIELD_PARTITION, partition);\n\t\t\t\t\tmetricEvent.addField(METRIC_FIELD_CONSUMER_GROUP, consumerGroup);\n\t\t\t\t\tmetricEvent.addField(METRIC_FIELD_CURRENT_OFFSET, currentOffset);\n\t\t\t\t\tmetricEvent.addField(METRIC_FIELD_DATA_TIMESTAMP, dataTimestamp);\n\t\t\t\t\tmetricEvent.addField(METRIC_FIELD_COMMITTED_OFFSET, committedOffset);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tkafkaLagTime.put(partition, currentOffset);\n\t\t\t\tmetricEvent.setTimestamp(timestamp);\n\t\t\t\tmetricEvent.addField(METRIC_FIELD_TOPIC, topic);\n\t\t\t\tmetricEvent.addField(METRIC_FIELD_PARTITION, partition);\n\t\t\t\tmetricEvent.addField(METRIC_FIELD_CONSUMER_GROUP, consumerGroup);\n\t\t\t\tmetricEvent.addField(METRIC_FIELD_CURRENT_OFFSET, currentOffset);\n\t\t\t\tmetricEvent.addField(METRIC_FIELD_DATA_TIMESTAMP, dataTimestamp);\n\t\t\t\tmetricEvent.addField(METRIC_FIELD_COMMITTED_OFFSET, committedOffset);\n\t\t\t}\n\t\t} else {\n\t\t\tMap<String, Long> kafkaLagTime = new HashMap<>();\n\t\t\tkafkaLagTime", "CodeBleu_score": 29.682660289523465}, {"code": "static MetricEvent addKafkaLagMetricFields(MetricEvent metricEvent, Long timestamp, Gauge<?> gauge){\n\t\t// TODO: Add code here\n\treturn null;\n}", "CodeBleu_score": 4.217862814441391}]}
{"instance_id": "c2080c299bb0", "generation_result": [{"code": "public static DataStreamSource<MetricEvent> buildSource(StreamExecutionEnvironment env, String topic, Long time) throws IllegalAccessException{\n\t\t// Retrieve global job parameters\n\tParameterTool params = env.getExecutionConfig().getGlobalJobParameters();\n\n\t// Build Kafka properties\n\tProperties kafkaProperties = new Properties();\n\tkafkaProperties.setProperty(KAFKA_BOOTSTRAP_SERVERS_CONFIG, params.get(KAFKA_BOOTSTRAP_SERVERS_CONFIG));\n\tkafkaProperties.setProperty(KAFKA_CONSUMER_GROUP_ID_CONFIG, params.get(KAFKA_CONSUMER_GROUP_ID_CONFIG));\n\tkafkaProperties.setProperty(KAFKA_CONSUMER_AUTO_OFFSET_RESET_CONFIG, params.get(KAFKA_CONSUMER_AUTO_OFFSET_RESET_CONFIG));\n\n\t// Build the consumer\n\tFlinkKafkaConsumer<MetricEvent> consumer = new FlinkKafkaConsumer<>(topic, new MetricSchema.MetricEventSchema(), kafkaProperties);\n\n\t// If a specific start time is provided, set the consumer to start from the specific offsets based on the given time\n\tif (time!= null) {\n\t\tMap<TopicPartition, OffsetAndTimestamp> offsets = new HashMap<>();\n\t\tfor (PartitionInfo partitionInfo : consumer.assignment()) {\n\t\t\tTopicPartition topicPartition = new TopicPartition(partitionInfo.topic(), partitionInfo.partition());\n\t\t\tlong offset = consumer.getOffsets(topicPartition).get(topicPartition).offset();\n\t\t\tlong timestamp = consumer.getOffsets(topicPartition).get(topicPartition).timestamp();\n\t\t\toffsets.put(topicPartition, new OffsetAndTimestamp(offset, timestamp));\n\t\t}\n\t\tconsumer.setStartFromSpecificOffsets(offsets);\n\t}\n\n\t// Add the consumer as a source to the StreamExecutionEnvironment and return the DataStreamSource\n\tenv.addSource(consumer);\n\treturn consumer.getDataStream();\n}", "CodeBleu_score": 41.54758073808748}, {"code": "public static DataStreamSource<MetricEvent> buildSource(StreamExecutionEnvironment env, String topic, Long time) throws IllegalAccessException{\n\t\tProperties kafkaProperties = new Properties();\n\tkafkaProperties.put(KAFKA_BROKER_LIST, env.getConfig().get(KAFKA_BROKER_LIST));\n\tkafkaProperties.put(KAFKA_GROUP_ID, env.getConfig().get(KAFKA_GROUP_ID));\n\tkafkaProperties.put(KAFKA_AUTO_OFFSET_RESET, env.getConfig().get(KAFKA_AUTO_OFFSET_RESET));\n\tkafkaProperties.put(KAFKA_AUTO_COMMIT_ENABLE, env.getConfig().get(KAFKA_AUTO_COMMIT_ENABLE));\n\tkafkaProperties.put(KAFKA_AUTO_COMMIT_INTERVAL, env.getConfig().get(KAFKA_AUTO_COMMIT_INTERVAL));\n\tkafkaProperties.put(KAFKA_KEY_DESERIALIZER, env.getConfig().get(KAFKA_KEY_DESERIALIZER));\n\tkafkaProperties.put(KAFKA_VALUE_DESERIALIZER, env.getConfig().get(KAFKA_VALUE_DESERIALIZER));\n\tkafkaProperties.put(KAFKA_CLIENT_ID, env.getConfig().get(KAFKA_CLIENT_ID));\n\tkafkaProperties.put(KAFKA_CONNECTION_TIMEOUT, env.getConfig().get(KAFKA_CONNECTION_TIMEOUT));\n\tkafkaProperties.put(KAFKA_REQUEST_TIMEOUT, env.getConfig().get(KAFKA_REQUEST_TIMEOUT));\n\tkafkaProperties.put(KAFKA_SESSION_TIMEOUT, env.getConfig().get(KAFKA_SESSION_TIMEOUT));\n\tkafkaProperties.put(KAFKA_RETRIES, env.getConfig().get(KAFKA_RETRIES));\n\tkafkaProperties.put(KAFKA_SECURITY_PROTOCOL, env.getConfig().get(KAFKA_SECURITY_PROTOCOL));\n\tkafkaProperties.put(KAFKA_SSL_TRUSTSTORE_LOCATION, env.getConfig().get(KAFKA_SSL_TRUSTSTORE_LOCATION));\n\tkafkaProperties.put(KAFKA_SSL_TRUSTSTORE_PASSWORD, env.getConfig().get(KAFKA_SSL_TRUSTSTORE_PASSWORD));\n\tkafkaProperties.put(KAFKA_SSL_KEYSTORE_LOCATION, env.getConfig().get(KAFKA_SSL_KEYSTORE_", "CodeBleu_score": 19.54512059420254}, {"code": "public static DataStreamSource<MetricEvent> buildSource(StreamExecutionEnvironment env, String topic, Long time) throws IllegalAccessException{\n\t\tProperties kafkaProperties = buildKafkaProperties(env);\n\tMap<String, String> topicPartitionMap = new HashMap<>();\n\tList<PartitionInfo> partitions = env.getExecutionEnvironment().getKafkaCluster().describeTopics(topic).get(topic).get();\n\tfor (PartitionInfo partition : partitions) {\n\t\ttopicPartitionMap.put(partition.topic(), partition.partition());\n\t}\n\tFlinkKafkaConsumer<MetricEvent> kafkaConsumer = new FlinkKafkaConsumer<>(topic, new MetricSchema.MetricEventSchema(), kafkaProperties);\n\tkafkaConsumer.setStartFromEarliest();\n\tif (time!= null) {\n\t\tkafkaConsumer.setStartFromTimestamp(time);\n\t}\n\tkafkaConsumer.setStartFromGroupOffsets();\n\tkafkaConsumer.setStartFromSpecificOffsets(topicPartitionMap);\n\tDataStreamSource<MetricEvent> source = env.addSource(kafkaConsumer);\n\treturn source;\n}", "CodeBleu_score": 41.18796030201554}]}
{"instance_id": "5e828afbe8e4", "generation_result": [{"code": "private static Map<KafkaTopicPartition, Long> buildOffsetByTime(Properties props, ParameterTool parameterTool, Long time){\n\t\t// Get the Kafka topic from the parameter tool\n\tString topic = parameterTool.getRequired(TOPIC);\n\t// Create a Kafka consumer with the given properties\n\tKafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);\n\t// Get the partition information for the topic\n\tList<PartitionInfo> partitions = consumer.partitionsFor(topic);\n\t// Create a map associating each partition with the timestamp\n\tMap<KafkaTopicPartition, Long> partitionToOffsetMap = new HashMap<>();\n\t// Iterate over the partitions\n\tfor (PartitionInfo partition : partitions) {\n\t\t// Get the partition ID\n\t\tint partitionId = partition.partition();\n\t\t// Get the timestamp for the current partition\n\t\tLong timestamp = time;\n\t\t// Create a KafkaTopicPartition object for the current partition\n\t\tKafkaTopicPartition kafkaTopicPartition = new KafkaTopicPartition(topic, partitionId);\n\t\t// Calculate the offset for the current partition based on the timestamp\n\t\tLong offset = calculateOffset(timestamp, partitionId);\n\t\t// Add the offset to the map\n\t\tpartitionToOffsetMap.put(kafkaTopicPartition, offset);\n\t}\n\t// Close the consumer\n\tconsumer.close();\n\t// Return the map of partition offsets\n\treturn partitionToOffsetMap;\n}", "CodeBleu_score": 44.86577933552376}, {"code": "private static Map<KafkaTopicPartition, Long> buildOffsetByTime(Properties props, ParameterTool parameterTool, Long time){\n\t\t// Create consumer\n\tKafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);\n\t// Set consumer group ID\n\tconsumer.setGroupId(parameterTool.get(GROUP_ID, \"consumer-group\"));\n\t// Get partition information for the specified topic\n\tList<PartitionInfo> partitions = consumer.partitionsFor(parameterTool.get(TOPIC));\n\t// Create map associating each partition with the timestamp\n\tMap<KafkaTopicPartition, Long> partitionOffsets = new HashMap<>();\n\tfor (PartitionInfo partition : partitions) {\n\t\tTopicPartition topicPartition = new TopicPartition(partition.topic(), partition.partition());\n\t\t// Fetch offsets for the given times\n\t\tList<OffsetAndTimestamp> offsets = consumer.offsetsForTimes(Map.of(topicPartition, time));\n\t\t// Get the first offset for the given time\n\t\tLong offset = offsets.get(0).offset();\n\t\t// Add the partition and offset to the map\n\t\tpartitionOffsets.put(new KafkaTopicPartition(partition.topic(), partition.partition()), offset);\n\t}\n\t// Close the consumer\n\tconsumer.close();\n\t// Return the map of partition offsets\n\treturn partitionOffsets;\n}", "CodeBleu_score": 49.6772089556332}, {"code": "private static Map<KafkaTopicPartition, Long> buildOffsetByTime(Properties props, ParameterTool parameterTool, Long time){\n\t\t// \u521b\u5efa\u6d88\u8d39\u8005\n\tKafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);\n\t// \u8bbe\u7f6e\u6d88\u8d39\u8005\u5206\u7ec4\n\tconsumer.setGroupId(parameterTool.get(CONSUMER_GROUP_ID));\n\t// \u83b7\u53d6\u5206\u533a\u4fe1\u606f\n\tList<PartitionInfo> partitionInfos = consumer.partitionsFor(parameterTool.get(TOPIC));\n\t// \u521b\u5efamap\n\tMap<KafkaTopicPartition, Long> partitionOffsets = new HashMap<>();\n\t// \u904d\u5386\u5206\u533a\n\tfor (PartitionInfo partitionInfo : partitionInfos) {\n\t\tTopicPartition topicPartition = new TopicPartition(partitionInfo.topic(), partitionInfo.partition());\n\t\t// \u6784\u5efa\u504f\u79fb\u91cf\n\t\tOffsetAndTimestamp offsetAndTimestamp = consumer.offsetsForTimes(new TopicPartition[]{topicPartition}, time);\n\t\t// \u83b7\u53d6\u504f\u79fb\u91cf\n\t\tLong offset = offsetAndTimestamp.offset();\n\t\t// \u6784\u5efakafkaTopicPartition\n\t\tKafkaTopicPartition kafkaTopicPartition = new KafkaTopicPartition(topicPartition.topic(), topicPartition.partition());\n\t\t// \u6784\u5efa\u504f\u79fb\u91cfmap\n\t\tpartitionOffsets.put(kafkaTopicPartition, offset);\n\t}\n\t// \u5173\u95ed\u6d88\u8d39\u8005\n\tconsumer.close();\n\t// \u8fd4\u56de\u504f\u79fb\u91cfmap\n\treturn partitionOffsets;\n}", "CodeBleu_score": 46.970023771582184}]}
{"instance_id": "28da89f56f67", "generation_result": [{"code": "public static void writeToKafka() throws InterruptedException{\n\t\tString bootstrapServers = \"localhost:9092\";\n\tString topic = \"metrics\";\n\tString key = \"key\";\n\tString value = \"value\";\n\tString keySerializer = \"org.apache.kafka.common.serialization.StringSerializer\";\n\tString valueSerializer = \"org.apache.kafka.common.serialization.StringSerializer\";\n\tString keyDeserializer = \"org.apache.kafka.common.serialization.StringDeserializer\";\n\tString valueDeserializer = \"org.apache.kafka.common.serialization.StringDeserializer\";\n\tProperties props = new Properties();\n\tprops.put(\"bootstrap.servers\", bootstrapServers);\n\tprops.put(\"key.serializer\", keySerializer);\n\tprops.put(\"value.serializer\", valueSerializer);\n\tprops.put(\"key.deserializer\", keyDeserializer);\n\tprops.put(\"value.deserializer\", valueDeserializer);\n\tKafkaProducer<String, String> producer = new KafkaProducer<>(props);\n\tMetricEvent metricEvent = new MetricEvent();\n\tmetricEvent.setTimestamp(System.currentTimeMillis());\n\tmetricEvent.setName(\"metricName\");\n\tmetricEvent.setTags(new HashMap<String, String>());\n\tmetricEvent.getTags().put(\"tagKey\", \"tagValue\");\n\tmetricEvent.setFields(new HashMap<String, String>());\n\tmetricEvent.getFields().put(\"fieldKey\", \"fieldValue\");\n\tProducerRecord<String, String> record = new ProducerRecord<>(topic, key, value);\n\tproducer.send(record);\n\tproducer.flush();\n\tSystem.out.println(\"Sent: \" + GsonUtil.toJson(metricEvent));\n}", "CodeBleu_score": 44.20998720287636}, {"code": "public static void writeToKafka() throws InterruptedException{\n\t\tProperties props = new Properties();\n\tprops.put(\"bootstrap.servers\", \"localhost:9092\");\n\tprops.put(\"acks\", \"all\");\n\tprops.put(\"retries\", 0);\n\tprops.put(\"batch.size\", 16384);\n\tprops.put(\"linger.ms\", 1);\n\tprops.put(\"buffer.memory\", 33554432);\n\tprops.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n\tprops.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n\n\tKafkaProducer<String, String> producer = new KafkaProducer<String, String>(props);\n\n\tMetricEvent event = new MetricEvent();\n\tevent.setTimestamp(System.currentTimeMillis());\n\tevent.setName(\"my-metric\");\n\tMap<String, String> tags = new HashMap<String, String>();\n\ttags.put(\"tag1\", \"value1\");\n\ttags.put(\"tag2\", \"value2\");\n\tevent.setTags(tags);\n\tMap<String, String> fields = new HashMap<String, String>();\n\tfields.put(\"field1\", \"value1\");\n\tfields.put(\"field2\", \"value2\");\n\tevent.setFields(fields);\n\n\tProducerRecord<String, String> record = new ProducerRecord<String, String>(\"my-topic\", GsonUtil.toJson(event));\n\tproducer.send(record);\n\n\tSystem.out.println(\"Sent \" + record);\n\tproducer.flush();\n\tproducer.close();\n}", "CodeBleu_score": 62.43219499399735}, {"code": "public static void writeToKafka() throws InterruptedException{\n\t\t// Create a Kafka producer properties object\n\tProperties props = new Properties();\n\n\t// Set the bootstrap servers\n\tprops.put(\"bootstrap.servers\", \"localhost:9092\");\n\n\t// Set the key and value serializers\n\tprops.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n\tprops.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n\n\t// Create a Kafka producer instance with the properties\n\tKafkaProducer<String, String> producer = new KafkaProducer<String, String>(props);\n\n\t// Create a MetricEvent\n\tMetricEvent event = new MetricEvent();\n\n\t// Set the timestamp\n\tevent.setTimestamp(System.currentTimeMillis());\n\n\t// Set the name\n\tevent.setName(\"test\");\n\n\t// Set the tags\n\tMap<String, String> tags = new HashMap<String, String>();\n\ttags.put(\"tag1\", \"value1\");\n\ttags.put(\"tag2\", \"value2\");\n\tevent.setTags(tags);\n\n\t// Set the fields\n\tMap<String, Object> fields = new HashMap<String, Object>();\n\tfields.put(\"field1\", \"value1\");\n\tfields.put(\"field2\", \"value2\");\n\tevent.setFields(fields);\n\n\t// Create a ProducerRecord\n\tProducerRecord<String, String> record = new ProducerRecord<String, String>(\"test\", GsonUtil.toJson(event));\n\n\t// Send the record to the topic\n\tproducer.send(record);\n\n\t// Print the sent data\n\tSystem.out.println(\"Sent data: \" + record.value());\n\n\t// Flush the producer to ensure all data is sent\n\tproducer.flush();\n\n\t// Close the producer\n\tproducer.close();\n}", "CodeBleu_score": 62.873142732959764}]}
{"instance_id": "14bffe09c25a", "generation_result": [{"code": "public void append(org.apache.logging.log4j.core.LogEvent event){\n\t\tif (event.getLevel().toInt() < 10000) {\n\t\treturn;\n\t}\n\tString topic = \"log_topic\";\n\tString group = \"log_group\";\n\tString broker = \"192.168.127.12:9092\";\n\tString key = \"key\";\n\tString value = \"value\";\n\tString key_value = \"key_value\";\n\tString key_value_json = \"key_value_json\";\n\tString key_value_json_string = \"key_value_json_string\";\n\tString key_value_json_string_json = \"key_value_json_string_json\";\n\tString key_value_json_string_json_string = \"key_value_json_string_json_string\";\n\tString key_value_json_string_json_string_string = \"key_value_json_string_json_string_string\";\n\tString key_value_json_string_json_string_string_string = \"key_value_json_string_json_string_string_string\";\n\tString key_value_json_string_json_string_string_string_string = \"key_value_json_string_json_string_string_string_string\";\n\tString key_value_json_string_json_string_string_string_string_string = \"key_value_json_string_json_string_string_string_string_string\";\n\tString key_value_json_string_json_string_string_string_string_string_string = \"key_value_json_string_json_string_string_string_string_string_string\";\n\tString key_value_json_string_json_string_string_string_string_string_string_string = \"key_value_json_string_json_string_string_string_string_string_string_string\";\n\tString key_value_json_string_json_string_string_string_string_string_string_string_string = \"key_value_json_string_json_string_string_string_string_string_string_string_string\";\n\tString key_value_json_string_json_string_string", "CodeBleu_score": 15.874960080377107}, {"code": "public void append(org.apache.logging.log4j.core.LogEvent event){\n\t\ttry {\n\t\tif (event.getLevel().toInt() >= 50000 && event.getLoggerName().indexOf(\"xxx\") == -1) {\n\t\t\tString json = JacksonUtil.toJson(new LogEvent(event.getLevel().name(), event.getLoggerName(), event.getMessage().getFormattedMessage(), event.getContextData()));\n\t\t\tproducer.send(new ProducerRecord<>(topic, UUID.randomUUID().toString(), json));\n\t\t}\n\t} catch (Exception e) {\n\t\tlog.error(ExceptionUtil.getStackTrace(e));\n\t}\n}", "CodeBleu_score": 52.34230684107126}, {"code": "public void append(org.apache.logging.log4j.core.LogEvent event){\n\t\ttry {\n\t\tif (event.getLevel().isGreaterOrEqual(org.apache.logging.log4j.Level.WARN) &&!event.getLoggerName().contains(\"xxx\")) {\n\t\t\tLogEvent logEvent = new LogEvent();\n\t\t\tlogEvent.setTimestamp(event.getMillis());\n\t\t\tlogEvent.setHost(InetAddress.getLocalHost().getHostName());\n\t\t\tlogEvent.setLevel(event.getLevel().toString());\n\t\t\tlogEvent.setMessage(event.getMessage().getFormattedMessage());\n\t\t\tlogEvent.setLoggerName(event.getLoggerName());\n\t\t\tlogEvent.setThreadName(event.getThreadName());\n\t\t\tlogEvent.setThreadId(event.getThreadId());\n\t\t\tlogEvent.setThreadPriority(event.getThreadPriority());\n\t\t\tlogEvent.setThreadCpuTime(event.getThreadCpuTime());\n\t\t\tlogEvent.setThreadUserTime(event.getThreadUserTime());\n\t\t\tlogEvent.setThreadTotalTime(event.getThreadTotalTime());\n\t\t\tlogEvent.setThreadState(event.getThreadState());\n\t\t\tlogEvent.setThreadStackTrace(event.getThreadStackTrace());\n\t\t\tlogEvent.setThreadId(event.getThreadId());\n\t\t\tlogEvent.setThreadName(event.getThreadName());\n\t\t\tlogEvent.setThreadPriority(event.getThreadPriority());\n\t\t\tlogEvent.setThreadCpuTime(event.getThreadCpuTime());\n\t\t\tlogEvent.setThreadUserTime(event.getThreadUserTime());\n\t\t\tlogEvent.setThreadTotalTime(event.getThreadTotalTime());\n\t\t\tlogEvent.setThreadState(event.getThreadState());\n\t\t\tlogEvent.setThreadStackTrace(event.getThreadStackTrace());\n\t\t\tlogEvent.setThreadId(event.getThreadId());\n\t\t\tlogEvent.setThreadName(event.getThreadName());\n\t\t\tlogEvent.setThreadPriority(event.getThreadPriority());\n\t\t\tlogEvent.setThreadCpuTime(event.getThreadCpuTime());\n\t\t\tlogEvent.setThreadUserTime(event.getThreadUserTime());\n\t\t\tlogEvent.setThreadTotalTime(event.getThreadTotalTime());\n\t\t\tlogEvent.setThreadState(event.getThreadState());\n\t\t\tlogEvent.setThreadStackTrace(event.getThreadStackTrace());\n\t\t\tlogEvent.setThreadId", "CodeBleu_score": 33.94450264697434}]}
{"instance_id": "a9e0786fb5c1", "generation_result": [{"code": "func ValidateTopicSuffixMethod(method string) error{\n\t\tfor _, validMethod := range []string{\n\t\t\"uuid\",\n\t\t\"random\",\n\t\t\"hostname\",\n\t\t\"hostname_uuid\",\n\t} {\n\t\tif method == validMethod {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn fmt.Errorf(\"unknown topic suffix method: %s\", method)\n}", "CodeBleu_score": 77.71008786899665}, {"code": "func ValidateTopicSuffixMethod(method string) error{\n\t\tswitch method {\n\tcase \"topic\":\n\t\treturn nil\n\tcase \"partition\":\n\t\treturn nil\n\tcase \"partition-and-topic\":\n\t\treturn nil\n\tdefault:\n\t\treturn fmt.Errorf(\"unknown topic suffix method %q\", method)\n\t}\n}", "CodeBleu_score": 28.423490941686325}, {"code": "func ValidateTopicSuffixMethod(method string) error{\n\t\tfor _, validMethod := range []string{\"_json\", \"_protobuf\", \"_msgpack\"} {\n\t\tif method == validMethod {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn fmt.Errorf(\"unknown topic suffix method: %s\", method)\n}", "CodeBleu_score": 79.69522506879572}]}
{"instance_id": "9b88d720d48a", "generation_result": [{"code": "func (k *Kafka) routingKey(metric telegraf.Metric) (string, error) {\n\t\tif k.RoutingKey == \"random\" {\n\t\tid, err := uuid.NewV4()\n\t\tif err!= nil {\n\t\t\treturn \"\", err\n\t\t}\n\t\treturn id.String(), nil\n\t} else if k.RoutingKey == \"\" {\n\t\treturn \"\", nil\n\t} else if k.RoutingTag!= \"\" {\n\t\ttag, ok := metric.Tag(k.RoutingTag)\n\t\tif!ok {\n\t\t\treturn \"\", fmt.Errorf(\"tag %s not found in metric\", k.RoutingTag)\n\t\t}\n\t\treturn tag.Value, nil\n\t}\n\treturn k.RoutingKey, nil\n}", "CodeBleu_score": 62.460307896876}, {"code": "func (k *Kafka) routingKey(metric telegraf.Metric) (string, error) {\n\t\tif k.RoutingTag!= \"\" {\n\t\tif tag, ok := metric.GetTag(k.RoutingTag); ok {\n\t\t\treturn tag.Value, nil\n\t\t}\n\t}\n\n\tif k.RoutingKey == \"random\" {\n\t\treturn uuid.Must(uuid.NewV4()).String(), nil\n\t}\n\n\treturn k.RoutingKey, nil\n}", "CodeBleu_score": 50.94388380563727}, {"code": "func (k *Kafka) routingKey(metric telegraf.Metric) (string, error) {\n\t\tif k.RoutingKey == \"random\" {\n\t\tid, err := uuid.NewV4()\n\t\tif err!= nil {\n\t\t\treturn \"\", fmt.Errorf(\"unable to generate UUID: %w\", err)\n\t\t}\n\t\treturn id.String(), nil\n\t}\n\tif k.RoutingKey == \"\" {\n\t\treturn \"\", nil\n\t}\n\tif k.RoutingTag == \"\" {\n\t\treturn k.RoutingKey, nil\n\t}\n\ttag, ok := metric.Tag(k.RoutingTag)\n\tif!ok {\n\t\treturn \"\", fmt.Errorf(\"metric does not have a tag '%s'\", k.RoutingTag)\n\t}\n\treturn tag.Value, nil\n}", "CodeBleu_score": 56.713698154379976}]}
{"instance_id": "dc35e80e7f8d", "generation_result": [{"code": "func (k *KafkaConsumer) compileTopicRegexps() error{\n\t\tk.topicRegexps = make([]*regexp.Regexp, len(k.TopicRegexps))\n\tfor i, topicRegexp := range k.TopicRegexps {\n\t\tcompiledRegexp, err := regexp.Compile(topicRegexp)\n\t\tif err!= nil {\n\t\t\treturn fmt.Errorf(\"unable to compile topic regexp %q: %w\", topicRegexp, err)\n\t\t}\n\t\tk.topicRegexps[i] = compiledRegexp\n\t}\n\treturn nil\n}", "CodeBleu_score": 53.67570176314631}, {"code": "func (k *KafkaConsumer) compileTopicRegexps() error{\n\t\tk.topicRegexps = make([]*regexp.Regexp, len(k.TopicRegexps))\n\tfor i, topicRegexp := range k.TopicRegexps {\n\t\tif topicRegexp == \"\" {\n\t\t\tcontinue\n\t\t}\n\t\tre, err := regexp.Compile(topicRegexp)\n\t\tif err!= nil {\n\t\t\treturn fmt.Errorf(\"topic regex %q: %v\", topicRegexp, err)\n\t\t}\n\t\tk.topicRegexps[i] = re\n\t}\n\treturn nil\n}", "CodeBleu_score": 54.4549380703956}, {"code": "func (k *KafkaConsumer) compileTopicRegexps() error{\n\t\tk.topicRegexps = make([]regexp.Regexp, len(k.TopicRegexps))\n\tfor i, topicRegexp := range k.TopicRegexps {\n\t\tre, err := regexp.Compile(topicRegexp)\n\t\tif err!= nil {\n\t\t\treturn fmt.Errorf(\"invalid topic regex %q: %v\", topicRegexp, err)\n\t\t}\n\t\tk.topicRegexps[i] = *re\n\t}\n\treturn nil\n}", "CodeBleu_score": 55.68316829391927}]}
{"instance_id": "daf09ba144b2", "generation_result": [{"code": "func (h *ConsumerGroupHandler) onDelivery(track telegraf.DeliveryInfo){\n\t\th.lock.Lock()\n\tdefer h.lock.Unlock()\n\n\t// If the message is found and marked as delivered, it marks the message as delivered in the session.\n\t// It then removes the message from the undelivered map and releases a semaphore slot.\n\tmsg, ok := h.undelivered[track.Offset]\n\tif ok {\n\t\tif msg.deliveryInfo.Offset == track.Offset {\n\t\t\tif msg.deliveryInfo.Partition == track.Partition {\n\t\t\t\tif msg.deliveryInfo.Offset == track.Offset {\n\t\t\t\t\tif msg.deliveryInfo.Partition == track.Partition {\n\t\t\t\t\t\tif msg.deliveryInfo.Offset == track.Offset {\n\t\t\t\t\t\t\tif msg.deliveryInfo.Partition == track.Partition {\n\t\t\t\t\t\t\t\tif msg.deliveryInfo.Offset == track.Offset {\n\t\t\t\t\t\t\t\t\tif msg.deliveryInfo.Partition == track.Partition {\n\t\t\t\t\t\t\t\t\t\tif msg.deliveryInfo.Offset == track.Offset {\n\t\t\t\t\t\t\t\t\t\t\tif msg.deliveryInfo.Partition == track.Partition {\n\t\t\t\t\t\t\t\t\t\t\t\tif msg.deliveryInfo.Offset == track.Offset {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif msg.deliveryInfo.Partition == track.Partition {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif msg.deliveryInfo.Offset == track.Offset {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif msg.deliveryInfo.Partition == track.Partition {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif msg.deliveryInfo.Offset == track.Offset {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif msg.deliveryInfo.Partition == track.Partition {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif msg.deliveryInfo.Offset == track.Offset {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif msg.deliveryInfo.Partition == track.Partition {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif msg.deliveryInfo.Offset == track.Offset {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif msg.deliveryInfo.Partition == track.Partition {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif msg.deliveryInfo.Offset == track.Offset {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif msg.deliveryInfo.Partition == track.Partition {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif msg.deliveryInfo.Offset == track.Offset {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif msg.deliveryInfo.Partition == track.Partition {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif msg.deliveryInfo.Offset == track.Offset {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif msg.deliveryInfo.Partition == track.Partition {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif msg.deliveryInfo.Offset == track.Offset {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif msg.deliveryInfo.Partition == track.Partition {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif msg.deliveryInfo.Offset == track.Offset {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif msg.deliveryInfo.Partition == track.Partition {", "CodeBleu_score": 35.37809791005731}, {"code": "func (h *ConsumerGroupHandler) onDelivery(track telegraf.DeliveryInfo){\n\t\th.lock.Lock()\n\tdefer h.lock.Unlock()\n\tif msg, ok := h.undelivered[track.DeliveryID]; ok {\n\t\tmsg.MarkDelivered(track.Partition, track.Offset)\n\t\tdelete(h.undelivered, track.DeliveryID)\n\t\th.undeliveredSem.Release(1)\n\t}\n}", "CodeBleu_score": 48.18289343800386}, {"code": "func (h *ConsumerGroupHandler) onDelivery(track telegraf.DeliveryInfo){\n\t\th.mu.Lock()\n\tdefer h.mu.Unlock()\n\tmsg, ok := h.undelivered[track.Offset]\n\tif!ok {\n\t\treturn\n\t}\n\tif msg.delivered {\n\t\treturn\n\t}\n\tmsg.delivered = true\n\th.session.MarkMessage(msg, \"\")\n\tdelete(h.undelivered, track.Offset)\n\th.sem.Release(1)\n}", "CodeBleu_score": 55.000383124302424}]}
{"instance_id": "8ecf2a1efead", "generation_result": [{"code": "func (h *ConsumerGroupHandler) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error{\n\t\tctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\n\t// Wait for context to be done or for a message from the claim\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn ctx.Err()\n\t\tcase msg, more := <-claim.Messages():\n\t\t\tif!more {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif err := h.handleMessage(ctx, msg); err!= nil {\n\t\t\t\th.log.Errorf(\"error handling message: %v\", err)\n\t\t\t}\n\t\t\tsession.MarkMessage(msg, \"\")\n\t\t}\n\t}\n}", "CodeBleu_score": 55.50656103369664}, {"code": "func (h *ConsumerGroupHandler) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error{\n\t\tctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\n\t// Wait for the session to be ready before proceeding\n\tif err := session.WaitForReady(time.Second * 5); err!= nil {\n\t\treturn err\n\t}\n\n\t// Reserve the capacity to process messages\n\tif err := session.ReserveCapacity(len(claim.Messages())); err!= nil {\n\t\treturn err\n\t}\n\n\t// Enter the loop to process messages\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\t// If the context is done, exit the loop\n\t\t\treturn nil\n\t\tcase msg, more := <-claim.Messages():\n\t\t\tif!more {\n\t\t\t\t// If the claim is closed, exit the loop\n\t\t\t\treturn nil\n\t\t\t}\n\n\t\t\t// Handle the message\n\t\t\tif err := h.handleMessage(ctx, session, msg); err!= nil {\n\t\t\t\t// Log any errors encountered during handling\n\t\t\t\th.log.Error(err.Error())\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 59.21872835678376}, {"code": "func (h *ConsumerGroupHandler) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error{\n\t\tctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\tvar wg sync.WaitGroup\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-ctx.Done():\n\t\t\t\treturn\n\t\t\tcase msg, ok := <-claim.Messages():\n\t\t\t\tif!ok {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif err := h.handleMessage(ctx, msg); err!= nil {\n\t\t\t\t\th.log.Errorf(\"Error processing message: %v\", err)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}()\n\twg.Wait()\n\treturn nil\n}", "CodeBleu_score": 54.55323300503325}]}
{"instance_id": "eba9dafa99ab", "generation_result": [{"code": "def validateLogkafkaId(logkafka_id: String){\n\t\tval regex = \"^[a-zA-Z0-9_-]+$\".r\n\tif (logkafka_id.isEmpty)\n\t\tthrow new IllegalArgumentException(\"Logkafka ID cannot be empty.\")\n\tif (logkafka_id == \".\" || logkafka_id == \"..\")\n\t\tthrow new IllegalArgumentException(\"Logkafka ID cannot be equal to '.' or '..'.\")\n\tif (logkafka_id.length > MAX_LOGKAFKA_ID_LENGTH)\n\t\tthrow new IllegalArgumentException(s\"Logkafka ID cannot exceed ${MAX_LOGKAFKA_ID_LENGTH} characters. Found ${logkafka_id.length}.\")\n\tif (!regex.findFirstIn(logkafka_id).isDefined)\n\t\tthrow new IllegalArgumentException(\"Logkafka ID contains invalid characters. Only alphanumeric characters, underscores, and hyphens are allowed.\")\n}", "CodeBleu_score": 24.31390834621199}, {"code": "def validateLogkafkaId(logkafka_id: String){\n\t\tif (logkafka_id.isEmpty) {\n\t\tthrow new IllegalArgumentException(\"Logkafka ID cannot be empty.\")\n\t}\n\tif (logkafka_id == \".\" || logkafka_id == \"..\") {\n\t\tthrow new IllegalArgumentException(\"Logkafka ID cannot be '.' or '..'.\")\n\t}\n\tif (logkafka_id.length > 255) {\n\t\tthrow new IllegalArgumentException(\"Logkafka ID cannot exceed 255 characters.\")\n\t}\n\tif (!logkafka_id.matches(\"^[a-zA-Z0-9_\\\\-.]+$\")) {\n\t\tthrow new IllegalArgumentException(\"Logkafka ID can only contain alphanumeric characters, underscores, hyphens, and dots.\")\n\t}\n}", "CodeBleu_score": 20.671617594514753}, {"code": "def validateLogkafkaId(logkafka_id: String){\n\t\tif (logkafka_id.isEmpty) {\n\t\tthrow new IllegalArgumentException(\"The Logkafka ID cannot be empty.\")\n\t} else if (logkafka_id == \".\" || logkafka_id == \"..\") {\n\t\tthrow new IllegalArgumentException(\"The Logkafka ID cannot be equal to '.' or '..'.\")\n\t} else if (logkafka_id.length > MAX_LOGKAFKA_ID_LENGTH) {\n\t\tthrow new IllegalArgumentException(s\"The Logkafka ID cannot exceed the maximum allowed length of $MAX_LOGKAFKA_ID_LENGTH characters.\")\n\t} else if (!LOGKAFKA_ID_REGEX.matcher(logkafka_id).matches()) {\n\t\tthrow new IllegalArgumentException(\"The Logkafka ID must contain only valid characters.\")\n\t}\n}", "CodeBleu_score": 24.382899946903517}]}
{"instance_id": "45d5aefd3f6c", "generation_result": [{"code": "  private[this] def tryWithKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => FOutput)\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t\n/**\n * The tryWithKafkaManagerActor function sends a message to the Kafka manager actor and processes the response.", "CodeBleu_score": 6.787148594377509}, {"code": "  private[this] def tryWithKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => FOutput)\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t\n/**\n * The tryWithKafkaManagerActor function sends a message to the Kafka manager actor and processes the response.", "CodeBleu_score": 6.787148594377509}, {"code": "  private[this] def tryWithKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => FOutput)\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t\n/**\n * The tryWithKafkaManagerActor function sends a message to the Kafka manager actor and processes the response.\nIt takes an input message and a function to transform the output, returning a Future containing either an ApiError or the transformed output.\nIf the actor responds with an error, it logs the failure and returns an ApiError.\nIf the response is successful, it applies the transformation function and handles any exceptions, returning either the transformed output or an ApiError.\nThe function also includes error handling for any thrown exceptions during the process.\n */\n  private[this] def tryWithKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => FOutput)\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] = = {\n    val future = kafkaManagerActor! msg\n    future.map {\n      case ApiError(e) =>\n        logger.error(e.getMessage, e)\n        ApiError(e)\n      case output => fn(output)\n    }\n  }\n\n}", "CodeBleu_score": 22.262261652955868}]}
{"instance_id": "a535ce861222", "generation_result": [{"code": "  private[this] def withKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => Future[ApiError \\/ FOutput])\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t\n/**\n * The withKafkaManagerActor function sends a message to the Kafka Manager actor and processes the response.", "CodeBleu_score": 14.030131826741995}, {"code": "  private[this] def withKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => Future[ApiError \\/ FOutput])\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t\n//    import akka.pattern.pipe\n    val response = kafkaManagerActor! msg\n    response.map {\n      case response: Output => fn(response)\n      case error: ActorErrorResponse => ApiError.fromActorErrorResponse(error)\n      case t: Throwable => ApiError.fromThrowable(t)\n    }\n  }", "CodeBleu_score": 50.94579529433104}, {"code": "  private[this] def withKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => Future[ApiError \\/ FOutput])\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t\n//    val response = KafkaManagerActor.send(msg)\n//    response.flatMap(fn)\n    KafkaManagerActor.send(msg).flatMap(fn)\n  }", "CodeBleu_score": 14.672173506528644}]}
{"instance_id": "ad37d3914acc", "generation_result": [{"code": "  def runPreferredLeaderElection(clusterName: String, topics: Set[String]): Future[ApiError \\/ ClusterContext] ={\n\t\n```\n", "CodeBleu_score": 14.222873900293253}, {"code": "  def runPreferredLeaderElection(clusterName: String, topics: Set[String]): Future[ApiError \\/ ClusterContext] ={\n\t\n```\n", "CodeBleu_score": 14.222873900293253}, {"code": "  def runPreferredLeaderElection(clusterName: String, topics: Set[String]): Future[ApiError \\/ ClusterContext] ={\n\t\n}", "CodeBleu_score": 8.140979095809902}]}
{"instance_id": "3ecdb2c1534f", "generation_result": [{"code": "private def runPreferredLeaderElectionWithAllTopics(clusterName: String) ={\n\t\ttry {\n\t\tval topics = getTopicList(clusterName)\n\t\trunPreferredLeaderElection(clusterName, topics)\n\t} catch {\n\t\tcase e: Exception => e\n\t}\n}", "CodeBleu_score": 12.423666939340702}, {"code": "private def runPreferredLeaderElectionWithAllTopics(clusterName: String) ={\n\t\tval topics = getTopicList(clusterName)\n\tif (topics.isDefined) {\n\t\trunPreferredLeaderElection(topics.get)\n\t} else {\n\t\ttopics.get\n\t}\n}", "CodeBleu_score": 13.510941988372371}, {"code": "private def runPreferredLeaderElectionWithAllTopics(clusterName: String) ={\n\t\t// Retrieve the list of topics for the given cluster.\n\tval topics = getTopicsForCluster(clusterName)\n\tif (topics == null) {\n\t\t// Return the error if the topic list retrieval failed.\n\t\treturn error(s\"Failed to retrieve the list of topics for cluster '$clusterName'.\")\n\t}\n\n\t// Run the preferred leader election for the set of topics.\n\trunPreferredLeaderElectionForTopics(topics)\n}", "CodeBleu_score": 14.50103557591481}]}
{"instance_id": "5955ade118b9", "generation_result": [{"code": "def manualPartitionAssignments(clusterName: String,\n                                 assignments: List[(String, List[(Int, List[Int])])]) = {\n\t\tval command = KMClusterCommandRequest(KMClusterCommand.MANUAL_PARTITION_ASSIGNMENTS, clusterName, assignments)\n\tval result = context.sendCommand(command)\n\tresult.map {\n\t\tcase KMClusterCommandResponse(KMClusterCommand.MANUAL_PARTITION_ASSIGNMENTS, clusterName, success, errors) =>\n\t\t\tif (success) {\n\t\t\t\tSuccess\n\t\t\t} else {\n\t\t\t\tFailure(errors)\n\t\t\t}\n\t}\n}", "CodeBleu_score": 16.492302007896743}, {"code": "def manualPartitionAssignments(clusterName: String,\n                                 assignments: List[(String, List[(Int, List[Int])])]) = {\n\t\n}", "CodeBleu_score": 5.183114608858888}, {"code": "def manualPartitionAssignments(clusterName: String,\n                                 assignments: List[(String, List[(Int, List[Int])])]) = {\n\t\n}", "CodeBleu_score": 5.183114608858888}]}
{"instance_id": "26fbc2ba1d28", "generation_result": [{"code": "private Config getKafkaBrokerConfig(AdminClient admin) throws Exception{\n\t\tfinal Map<String, Config> configs = admin.describeConfigs(Collections.singleton(new ConfigResource(ConfigResource.Type.BROKER, \"0\"))).values().stream().findFirst().orElseThrow(() -> new ConnectException(\"Unable to retrieve broker configuration\")).all();\n\treturn configs.get(AdminClientConfig.CONFIGS_CONFIG);\n}", "CodeBleu_score": 28.718094668021067}, {"code": "private Config getKafkaBrokerConfig(AdminClient admin) throws Exception{\n\t\ttry {\n\t\tDescribeTopicsResult describeTopicsResult = admin.describeTopics(Collections.singleton(BROKER_CONFIG_TOPIC)).get();\n\t\tTopicDescription topicDescription = describeTopicsResult.all().get(BROKER_CONFIG_TOPIC);\n\t\tif (topicDescription == null) {\n\t\t\tthrow new ConnectException(\"Failed to describe Kafka broker configuration topic '\" + BROKER_CONFIG_TOPIC + \"'.\");\n\t\t}\n\t\tif (topicDescription.partitions().isEmpty()) {\n\t\t\tthrow new ConnectException(\"Kafka broker configuration topic '\" + BROKER_CONFIG_TOPIC + \"' does not have any partitions.\");\n\t\t}\n\t\tCollection<TopicPartition> partitions = topicDescription.partitions().values();\n\t\tif (partitions.isEmpty()) {\n\t\t\tthrow new ConnectException(\"Kafka broker configuration topic '\" + BROKER_CONFIG_TOPIC + \"' does not have any partitions.\");\n\t\t}\n\t\tTopicPartition topicPartition = partitions.iterator().next();\n\t\tMap<TopicPartition, Long> offsets = admin.listConsumerGroupOffsets(Collections.singleton(topicPartition)).get();\n\t\tif (offsets.isEmpty()) {\n\t\t\tthrow new ConnectException(\"Kafka broker configuration topic '\" + BROKER_CONFIG_TOPIC + \"' does not have any partitions.\");\n\t\t}\n\t\tTopicPartition partition = offsets.keySet().iterator().next();\n\t\tlong offset = offsets.get(partition);\n\t\tif (offset == -1) {\n\t\t\tthrow new ConnectException(\"Kafka broker configuration topic '\" + BROKER_CONFIG_TOPIC + \"' does not have any partitions.\");\n\t\t}\n\t\tConsumerRecords<String, String> records = new KafkaConsumer<>(getKafkaConsumerConfig(admin)).poll(Duration.ofMillis(100));\n\t\tif (records.isEmpty()) {\n\t\t\tthrow new ConnectException(\"Failed to read Kafka broker configuration topic '\" + BROKER_CONFIG_TOPIC + \"'.\");\n\t\t}\n\t\tConsumerRecord<String, String> record = records.iterator().next();\n\t\tif (!topicPartition.equals(record.topicPartition()) || offset!= record.offset()) {\n\t\t\tthrow new ConnectException(\"Kafka broker configuration topic '\" + BROKER_CONFIG_TOPIC + \"' does not have any partitions.\");\n\t\t}\n\t\treturn Config.fromProperties(record.value());\n\t} catch (InterruptedException | ExecutionException e) {\n\t\tthrow new ConnectException(\"Failed to read Kafka broker configuration topic '\" +", "CodeBleu_score": 37.76729346259528}, {"code": "private Config getKafkaBrokerConfig(AdminClient admin) throws Exception{\n\t\ttry {\n\t\tDescribeTopicsResult describeTopicsResult = admin.describeTopics(Collections.singleton(topicName));\n\t\tSet<String> topics = describeTopicsResult.names().get();\n\t\tif (topics.size() == 0) {\n\t\t\tthrow new ConnectException(\"Topic \" + topicName + \" does not exist\");\n\t\t}\n\t\tTopicDescription topicDescription = describeTopicsResult.all().get().get(topicName);\n\t\tif (topicDescription == null) {\n\t\t\tthrow new ConnectException(\"Topic \" + topicName + \" does not exist\");\n\t\t}\n\t\tSet<Node> nodes = topicDescription.partitions().stream().map(TopicPartition::node).collect(Collectors.toSet());\n\t\tif (nodes.size() == 0) {\n\t\t\tthrow new ConnectException(\"No nodes found for topic \" + topicName);\n\t\t}\n\t\tNode node = nodes.iterator().next();\n\t\tMap<String, Config> configs = admin.describeConfigs(Collections.singletonMap(new ConfigResource(ConfigResource.Type.BROKER, node.id().toString()), new ConfigResource(ConfigResource.Type.TOPIC, topicName))).all().get();\n\t\tif (configs.size() == 0) {\n\t\t\tthrow new ConnectException(\"No configurations found for topic \" + topicName);\n\t\t}\n\t\treturn configs.get(new ConfigResource(ConfigResource.Type.BROKER, node.id().toString()));\n\t} catch (Exception e) {\n\t\tthrow new ConnectException(\"Failed to get configuration for topic \" + topicName, e);\n\t}\n}", "CodeBleu_score": 45.407715697906895}]}
{"instance_id": "adf40b68c93e", "generation_result": [{"code": "private static Validator forKafka(final Validator validator){\n\t\treturn (config, context) -> {\n\t\tfinal String schemaHistory = config.getString(SCHEMA_HISTORY);\n\t\tif (KafkaSchemaHistory.SCHEMA_HISTORY_NAME.equals(schemaHistory)) {\n\t\t\treturn validator.validate(config, context);\n\t\t}\n\t\treturn 0;\n\t};\n}", "CodeBleu_score": 37.53016281040047}, {"code": "private static Validator forKafka(final Validator validator){\n\t\treturn (final Configuration config) -> {\n\t\tfinal String history = config.getString(HistorizedRelationalDatabaseConnectorConfig.SCHEMA_HISTORY);\n\t\tif (history.equals(HistorizedRelationalDatabaseConnectorConfig.SCHEMA_HISTORY_KAFKA)) {\n\t\t\treturn validator.validate(config);\n\t\t}\n\t\telse {\n\t\t\treturn 0;\n\t\t}\n\t};\n}", "CodeBleu_score": 45.80058202445041}, {"code": "private static Validator forKafka(final Validator validator){\n\t\treturn (config, context) -> {\n\t\tfinal SchemaHistory schemaHistory = config.get(HistorizedRelationalDatabaseConnectorConfig.SCHEMA_HISTORY);\n\t\tif (schemaHistory instanceof KafkaSchemaHistory) {\n\t\t\treturn validator.validate(config, context);\n\t\t}\n\t\treturn 0;\n\t};\n}", "CodeBleu_score": 42.42274618238928}]}
{"instance_id": "07ff1ca41c93", "generation_result": [{"code": "private synchronized Boolean isTopicCreationEnabled(Map<String, ?> config){\n\tString kafkaConnectVersion = getKafkaConnectVersion();\n\tString topicCreationEnabled = (String) config.get(\"topic.creation.enable\");\n\tif (topicCreationEnabled == null) {\n\t\ttopicCreationEnabled = \"true\";\n\t}\n\treturn Boolean.parseBoolean(topicCreationEnabled);\n}", "CodeBleu_score": 42.73932986631515}, {"code": "private synchronized Boolean isTopicCreationEnabled(Map<String, ?> config){\n\tif (this.kafkaVersion == null) {\n\t\tthis.kafkaVersion = this.getKafkaVersion(config);\n\t}\n\tif (this.topicCreationEnabled == null) {\n\t\tthis.topicCreationEnabled = this.isTopicCreationEnabled(config, this.kafkaVersion);\n\t}\n\treturn this.topicCreationEnabled;\n}", "CodeBleu_score": 24.566072296437113}, {"code": "private synchronized Boolean isTopicCreationEnabled(Map<String, ?> config){\n\tString version = AppInfoParser.getVersion();\n\tString topicCreationEnabled = (String) config.get(\"topic.creation.enable\");\n\tBoolean topicCreationEnabledBoolean = Boolean.parseBoolean(topicCreationEnabled);\n\tif (topicCreationEnabledBoolean) {\n\t\treturn true;\n\t}\n\tif (version.compareTo(\"2.8.0\") < 0) {\n\t\treturn false;\n\t}\n\tif (version.compareTo(\"3.0.0\") < 0) {\n\t\treturn false;\n\t}\n\tif (version.compareTo(\"3.1.0\") < 0) {\n\t\treturn false;\n\t}\n\tif (version.compareTo(\"3.2.0\") < 0) {\n\t\treturn false;\n\t}\n\tif (version.compareTo(\"3.3.0\") < 0) {\n\t\treturn false;\n\t}\n\tif (version.compareTo(\"3.4.0\") < 0) {\n\t\treturn false;\n\t}\n\tif (version.compareTo(\"3.5.0\") < 0) {\n\t\treturn false;\n\t}\n\tif (version.compareTo(\"3.6.0\") < 0) {\n\t\treturn false;\n\t}\n\tif (version.compareTo(\"3.7.0\") < 0) {\n\t\treturn false;\n\t}\n\tif (version.compareTo(\"3.8.0\") < 0) {\n\t\treturn false;\n\t}\n\tif (version.compareTo(\"3.9.0\") < 0) {\n\t\treturn false;\n\t}\n\tif (version.compareTo(\"3.10.0\") < 0) {\n\t\treturn false;\n\t}\n\tif (version.compareTo(\"3.11.0\") < 0) {\n\t\treturn false;\n\t}\n\tif (version.compareTo(\"3.12.0\") < 0) {\n\t\treturn false;\n\t}\n\tif (version.compareTo(\"3.13.0\") < 0) {\n\t\treturn false;\n\t}\n\tif (version.compareTo(\"3.14.0\") < 0) {\n\t\treturn false;\n\t}\n\tif (version.compareTo(\"3.", "CodeBleu_score": 37.58410865590076}]}
{"instance_id": "e2cc420e1e63", "generation_result": [{"code": "public static final KafkaOffsetBackingStore kafkaOffsetBackingStore(Map<String, String> config){\n\t\tfinal Map<String, Object> properties = new HashMap<>();\n\tproperties.put(CLIENT_ID_CONFIG, config.get(\"client.id\"));\n\tproperties.put(DistributedConfig.BOOTSTRAP_SERVERS_CONFIG, config.get(\"bootstrap.servers\"));\n\tproperties.put(DistributedConfig.SECURITY_PROTOCOL_CONFIG, config.get(\"security.protocol\"));\n\tproperties.put(DistributedConfig.SASL_JAAS_CONFIG, config.get(\"sasl.jaas.config\"));\n\tproperties.put(DistributedConfig.SASL_MECHANISM_CONFIG, config.get(\"sasl.mechanism\"));\n\tproperties.put(DistributedConfig.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG, config.get(\"ssl.endpoint.identification.algorithm\"));\n\tproperties.put(DistributedConfig.SSL_KEY_PASSWORD_CONFIG, config.get(\"ssl.key.password\"));\n\tproperties.put(DistributedConfig.SSL_KEYSTORE_LOCATION_CONFIG, config.get(\"ssl.keystore.location\"));\n\tproperties.put(DistributedConfig.SSL_KEYSTORE_PASSWORD_CONFIG, config.get(\"ssl.keystore.password\"));\n\tproperties.put(DistributedConfig.SSL_KEYSTORE_TYPE_CONFIG, config.get(\"ssl.keystore.type\"));\n\tproperties.put(DistributedConfig.SSL_PROTOCOL_CONFIG, config.get(\"ssl.protocol\"));\n\tproperties.put(DistributedConfig.SSL_PROVIDER_CLASS_CONFIG, config.get(\"ssl.provider.class\"));\n\tproperties.put(DistributedConfig.SSL_TRUSTSTORE_LOCATION_CONFIG, config.get(\"ssl.truststore.location\"));\n\tproperties.put(DistributedConfig.SSL_TRUSTSTORE_PASSWORD_CONFIG, config.get(\"ssl.truststore.password\"));\n\tproperties.put(DistributedConfig.SSL_TRUSTSTORE_TYPE_CONFIG, config.get(\"ssl.truststore.type\"));\n\tproperties.put(DistributedConfig.SSL_CIPHER_SUITES_CONFIG, config.get(\"ssl.cipher.suites\"));\n\tproperties.put(DistributedConfig.SSL_ENABLED_PROTOCOLS_CONFIG, config.get(\"ssl.enabled.protocols\"));\n\tproperties.put(DistributedConfig.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG, config.get(\"ssl.endpoint.identification.algorithm\"));", "CodeBleu_score": 25.114446213021523}, {"code": "public static final KafkaOffsetBackingStore kafkaOffsetBackingStore(Map<String, String> config){\n\t\tfinal String clientId = config.get(CLIENT_ID_CONFIG);\n\tif (clientId == null) {\n\t\tthrow new DebeziumException(\"Missing required configuration property: \" + CLIENT_ID_CONFIG);\n\t}\n\tfinal Map<String, Object> adminProperties = new HashMap<>();\n\tadminProperties.put(CLIENT_ID_CONFIG, clientId);\n\tadminProperties.put(DistributedConfig.OFFSET_STORAGE_TOPIC_CONFIG, config.get(DistributedConfig.OFFSET_STORAGE_TOPIC_CONFIG));\n\tadminProperties.put(DistributedConfig.OFFSET_STORAGE_REPLICATION_FACTOR_CONFIG, config.get(DistributedConfig.OFFSET_STORAGE_REPLICATION_FACTOR_CONFIG));\n\tadminProperties.put(DistributedConfig.OFFSET_STORAGE_PARTITIONS_CONFIG, config.get(DistributedConfig.OFFSET_STORAGE_PARTITIONS_CONFIG));\n\tadminProperties.put(DistributedConfig.OFFSET_FLUSH_INTERVAL_MS_CONFIG, config.get(DistributedConfig.OFFSET_FLUSH_INTERVAL_MS_CONFIG));\n\tadminProperties.put(DistributedConfig.OFFSET_FLUSH_TIMEOUT_MS_CONFIG, config.get(DistributedConfig.OFFSET_FLUSH_TIMEOUT_MS_CONFIG));\n\tadminProperties.put(DistributedConfig.OFFSET_STORAGE_FILE_DELETE_DELAY_MS_CONFIG, config.get(DistributedConfig.OFFSET_STORAGE_FILE_DELETE_DELAY_MS_CONFIG));\n\tadminProperties.put(DistributedConfig.OFFSET_STORAGE_FILE_REPLICATION_FACTOR_CONFIG, config.get(DistributedConfig.OFFSET_STORAGE_FILE_REPLICATION_FACTOR_CONFIG));\n\tadminProperties.put(DistributedConfig.OFFSET_STORAGE_FILE_BUFFER_SIZE_BYTES_CONFIG, config.get(DistributedConfig.OFFSET_STORAGE_FILE_BUFFER_SIZE_BYTES_CONFIG));\n\tadminProperties.put(DistributedConfig.OFFSET_STORAGE_FILE_SYNC_INTERVAL_MS_CONFIG, config.get(DistributedConfig.OFFSET_STORAGE_FILE_SYNC_INTERVAL_MS_CONFIG));\n\tadminProperties.put(DistributedConfig.OFFSET_STORAGE_FILE_MIN_SYNC_INTERVAL_MS_CONFIG, config.get(DistributedConfig.OFFSET_STORAGE_FILE_MIN_SYNC_INTERVAL_MS_CONFIG));\n\tadminProperties.put(DistributedConfig.OFFSET_STORAGE_FILE_MAX_SYNC_INTERVAL_MS_", "CodeBleu_score": 29.67018295421618}, {"code": "public static final KafkaOffsetBackingStore kafkaOffsetBackingStore(Map<String, String> config){\n\t\tfinal String clientId = config.get(CLIENT_ID_CONFIG);\n\tif (clientId == null) {\n\t\tthrow new DebeziumException(String.format(\"The %s configuration property is required\", CLIENT_ID_CONFIG));\n\t}\n\tfinal Map<String, Object> adminProperties = new HashMap<>();\n\tadminProperties.put(CLIENT_ID_CONFIG, clientId);\n\tfinal SharedTopicAdmin sharedTopicAdmin = SharedTopicAdmin.create(adminProperties);\n\tfinal Converter<byte[], byte[]> offsetStoreConverter = getOffsetStoreConverter(config);\n\tfinal String storageDir = config.get(DistributedConfig.STORAGE_DIR_CONFIG);\n\tfinal OffsetBackingStore offsetBackingStore;\n\tif (storageDir!= null) {\n\t\tfinal FileOffsetBackingStore fileOffsetBackingStore = new FileOffsetBackingStore(offsetStoreConverter, storageDir);\n\t\toffsetBackingStore = fileOffsetBackingStore;\n\t}\n\telse {\n\t\toffsetBackingStore = new MemoryOffsetBackingStore(offsetStoreConverter);\n\t}\n\treturn new KafkaOffsetBackingStore(sharedTopicAdmin, clientId, offsetBackingStore);\n}", "CodeBleu_score": 39.71721058700234}]}
{"instance_id": "4ecb2279231e", "generation_result": [{"code": "private T readKey(JsonNode node) throws IOException{\n\t\tif (node.isObject()) {\n\t\tif (this.keyFields.isEmpty()) {\n\t\t\treturn (T) this.keyDeserializer.deserialize(null, node);\n\t\t} else {\n\t\t\tObjectReader reader = this.objectReader.with(this.objectReader.getFactory().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false));\n\t\t\treturn (T) reader.readValue(node);\n\t\t}\n\t} else {\n\t\treturn (T) this.keyDeserializer.deserialize(null, node);\n\t}\n}", "CodeBleu_score": 32.40390438900083}, {"code": "private T readKey(JsonNode node) throws IOException{\n\t\tif (node.isObject()) {\n\t\tif (this.keyFields.size() == 1) {\n\t\t\treturn (T) this.keyReader.readValue(node.get(this.keyFields.get(0)).toString());\n\t\t}\n\t\telse {\n\t\t\treturn (T) this.keyReader.readValue(node.toString());\n\t\t}\n\t}\n\tthrow new IOException(\"The key is not an object\");\n}", "CodeBleu_score": 18.800708538134128}, {"code": "private T readKey(JsonNode node) throws IOException{\n\t\tif (node.isObject()) {\n\t\tif (node.has(this.payloadField)) {\n\t\t\treturn this.keyReader.readValue(node.get(this.payloadField).traverse());\n\t\t}\n\t\telse {\n\t\t\treturn this.keyReader.readValue(node.traverse());\n\t\t}\n\t}\n\telse {\n\t\treturn this.keyReader.readValue(node);\n\t}\n}", "CodeBleu_score": 21.98055542559264}]}
{"instance_id": "b8ba1bfc7b5e", "generation_result": [{"code": "public String topicNameFor(I id, String prefix, String delimiter){\n\t\tString topicName = delegate.topicNameFor(id, prefix, delimiter);\n\tif (topicName == null) {\n\t\treturn topicName;\n\t}\n\tStringBuilder topicNameBuilder = new StringBuilder();\n\tfor (int i = 0; i < topicName.length(); i++) {\n\t\tchar c = topicName.charAt(i);\n\t\tif (Character.isLetterOrDigit(c) || c == '_' || c == '-') {\n\t\t\ttopicNameBuilder.append(c);\n\t\t} else {\n\t\t\ttopicNameBuilder.append(replacementCharacter);\n\t\t\tlog.warn(\"Topic name '{}' contains invalid characters, replacing with '{}'\", topicName, replacementCharacter);\n\t\t}\n\t}\n\treturn topicNameBuilder.toString();\n}", "CodeBleu_score": 48.95240427224067}, {"code": "public String topicNameFor(I id, String prefix, String delimiter){\n\t\treturn topicNameFor(id, prefix, delimiter, (String)null);\n}", "CodeBleu_score": 5.6987731998967215}, {"code": "public String topicNameFor(I id, String prefix, String delimiter){\n\t\treturn topicNameFor(id, prefix, delimiter, null);\n}", "CodeBleu_score": 5.6985374538447084}]}
{"instance_id": "9cf0d74c098d", "generation_result": [{"code": "public ErrorHandler(Class<? extends SourceConnector> connectorType, CommonConnectorConfig connectorConfig,\n                        ChangeEventQueue<?> queue, ErrorHandler replacedErrorHandler) {\n\t\tthis.connectorType = connectorType;\n\tthis.connectorConfig = connectorConfig;\n\tthis.queue = queue;\n\tthis.replacedErrorHandler = replacedErrorHandler;\n\tthis.producerThrowable = new AtomicReference<>();\n\tthis.maxRetries = replacedErrorHandler!= null? replacedErrorHandler.maxRetries : connectorConfig.getMaxRetries();\n}", "CodeBleu_score": 52.90148791283789}, {"code": "public ErrorHandler(Class<? extends SourceConnector> connectorType, CommonConnectorConfig connectorConfig,\n                        ChangeEventQueue<?> queue, ErrorHandler replacedErrorHandler) {\n\t\tthis.connectorType = connectorType;\n\tthis.connectorConfig = connectorConfig;\n\tthis.queue = queue;\n\tthis.replacedErrorHandler = replacedErrorHandler;\n\n\tthis.producerThrowableRef = new AtomicReference<>();\n\tthis.maxRetries = getMaxRetries(connectorConfig);\n}", "CodeBleu_score": 47.46751977958885}, {"code": "public ErrorHandler(Class<? extends SourceConnector> connectorType, CommonConnectorConfig connectorConfig,\n                        ChangeEventQueue<?> queue, ErrorHandler replacedErrorHandler) {\n\t\tthis.connectorType = connectorType;\n\tthis.connectorConfig = connectorConfig;\n\tthis.queue = queue;\n\tthis.replacedErrorHandler = replacedErrorHandler;\n\tthis.maxRetries = getMaxRetries(connectorConfig);\n\tthis.producerThrowable = new AtomicReference<Throwable>();\n}", "CodeBleu_score": 44.54483814388504}]}
{"instance_id": "8ab4bf3a4dd8", "generation_result": [{"code": "public void validate(Configuration configuration, Field.Set fields){\n\t\tvalidate(configuration, fields, null);\n}", "CodeBleu_score": 7.216847100701584}, {"code": "public void validate(Configuration configuration, Field.Set fields){\n\t\tfinal Logger logger = LoggerFactory.getLogger(getClass());\n\tMap<String, ConfigValue> configValues = configuration.toConfigValues();\n\tfor (Field field : fields) {\n\t\tif (field.isDeprecated()) {\n\t\t\tlogger.warn(\"Field {} is deprecated and will be removed in a future release\", field.name());\n\t\t}\n\t\tif (field.isHidden()) {\n\t\t\tlogger.debug(\"Field {} is hidden and will not be shown in the configuration UI\", field.name());\n\t\t}\n\t\tif (field.isOptional()) {\n\t\t\tlogger.debug(\"Field {} is optional and will not be shown in the configuration UI\", field.name());\n\t\t}\n\t\tif (field.isSensitive()) {\n\t\t\tlogger.debug(\"Field {} is sensitive and will not be shown in the configuration UI\", field.name());\n\t\t}\n\t\tif (field.isSensitive()) {\n\t\t\tlogger.debug(\"Field {} is sensitive and will not be shown in the configuration UI\", field.name());\n\t\t}\n\t\tif (field.isSensitive()) {\n\t\t\tlogger.debug(\"Field {} is sensitive and will not be shown in the configuration UI\", field.name());\n\t\t}\n\t\tif (field.isSensitive()) {\n\t\t\tlogger.debug(\"Field {} is sensitive and will not be shown in the configuration UI\", field.name());\n\t\t}\n\t\tif (field.isSensitive()) {\n\t\t\tlogger.debug(\"Field {} is sensitive and will not be shown in the configuration UI\", field.name());\n\t\t}\n\t\tif (field.isSensitive()) {\n\t\t\tlogger.debug(\"Field {} is sensitive and will not be shown in the configuration UI\", field.name());\n\t\t}\n\t\tif (field.isSensitive()) {\n\t\t\tlogger.debug(\"Field {} is sensitive and will not be shown in the configuration UI\", field.name());\n\t\t}\n\t\tif (field.isSensitive()) {\n\t\t\tlogger.debug(\"Field {} is sensitive and will not be shown in the configuration UI\", field.name());\n\t\t}\n\t\tif (field.isSensitive()) {\n\t\t\tlogger.debug(\"Field {} is sensitive and will not be shown in the configuration UI\", field.name());\n\t\t}\n\t\tif (field.isSensitive()) {\n\t\t\tlogger.debug(\"Field {} is sensitive and will not be shown in the configuration UI\",", "CodeBleu_score": 29.81355534598247}, {"code": "public void validate(Configuration configuration, Field.Set fields){\n\t\tLogger logger = LoggerFactory.getLogger(getClass());\n\tMap<String, ConfigValue> config = configuration.asMap();\n\tfor (Field field : fields) {\n\t\tif (field.isOptional() &&!config.containsKey(field.name())) {\n\t\t\tcontinue;\n\t\t}\n\t\tString value = config.get(field.name()).toString();\n\t\tif (field.isOptional() && value.isEmpty()) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (field.isDeprecated()) {\n\t\t\tlogger.warn(\"The configuration value '\" + field.name() + \"' is deprecated and will be removed in a future release.\");\n\t\t}\n\t\tif (field.isSensitive()) {\n\t\t\tlogger.warn(\"The configuration value '\" + field.name() + \"' is sensitive and will be redacted in log messages.\");\n\t\t}\n\t\tif (field.isRegex()) {\n\t\t\ttry {\n\t\t\t\tfield.regex().matcher(value).matches();\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new ConfigException(field.name() + \" is not a valid regex\", e);\n\t\t\t}\n\t\t}\n\t\tif (field.isSchema()) {\n\t\t\ttry {\n\t\t\t\tSchemaFactory.fromDefinition(value);\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new ConfigException(field.name() + \" is not a valid schema definition\", e);\n\t\t\t}\n\t\t}\n\t\tif (field.isEnum()) {\n\t\t\tif (!field.values().contains(value)) {\n\t\t\t\tthrow new ConfigException(field.name() + \" is not a valid value, must be one of \" + field.values().toString());\n\t\t\t}\n\t\t}\n\t\tif (field.isType()) {\n\t\t\tif (!field.types().contains(value)) {\n\t\t\t\tthrow new ConfigException(field.name() + \" is not a valid value, must be one of \" + field.types().toString());\n\t\t\t}\n\t\t}\n\t\tif (field.isOperation()) {\n\t\t\tif (!field.operations().contains(value)) {\n\t\t\t\tthrow new ConfigException(field.name() + \" is not a valid value, must be one of \" + field.operations().toString());\n\t\t\t}\n\t\t}\n\t\tif (field.isEnvelope()) {\n\t\t\ttry {\n\t\t\t\tEnvelope.from(value);\n\t\t\t} catch (", "CodeBleu_score": 33.97300883398583}]}
{"instance_id": "860405dc9abb", "generation_result": [{"code": "private Schema buildNewSchema(String fieldName, Schema oldSchema, Map<String, Header> headerToProcess, List<String> nestedFields, int level){\n\t\tfinal String headerName = fieldName;\n\tfinal String headerValue = headerToProcess.get(headerName).value().toString();\n\tfinal Schema headerSchema = SchemaUtil.parseSchema(headerValue);\n\tfinal SchemaBuilder builder = SchemaBuilder.struct();\n\tfinal Map<String, Schema> fields = oldSchema.fields();\n\tfinal List<String> fieldNames = fields.keySet().stream().sorted().collect(Collectors.toList());\n\tfinal List<String> fieldNamesToProcess = fieldNames.subList(0, level);\n\tfinal List<String> fieldNamesToCopy = fieldNames.subList(level, fieldNames.size());\n\tfinal List<String> fieldNamesToCopyAndProcess = Stream.concat(fieldNamesToProcess.stream(), fieldNamesToCopy.stream()).distinct().collect(Collectors.toList());\n\tfinal List<String> fieldNamesToCopyAndProcessAndAdd = Stream.concat(fieldNamesToCopyAndProcess.stream(), Stream.of(headerName)).distinct().collect(Collectors.toList());\n\tfinal List<String> fieldNamesToCopyAndProcessAndAddAndProcess = Stream.concat(fieldNamesToCopyAndProcessAndAdd.stream(), nestedFields.stream()).distinct().collect(Collectors.toList());\n\tfinal List<String> fieldNamesToCopyAndProcessAndAddAndProcessAndProcess = Stream.concat(fieldNamesToCopyAndProcessAndAddAndProcess.stream(), Stream.of(headerName)).distinct().collect(Collectors.toList());\n\tfinal Map<String, Schema> fieldsToCopy = fieldNamesToCopyAndProcessAndAddAndProcess.stream().collect(Collectors.toMap(Function.identity(), fields::get));\n\tfinal Map<String, Schema> fieldsToCopyAndProcess = fieldNamesToCopyAndProcessAndAddAndProcessAndProcess.stream().collect(Collectors.toMap(Function.identity(), fields::get));\n\tfinal Map<String, Schema> fieldsToCopyAndProcessAndAdd = Stream.concat(fieldsToCopyAndProcess.entrySet().stream(), Stream.of(Map.entry(headerName, headerSchema))).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n\tfinal Map<String, Schema> fieldsToCopyAndProcessAndAddAndProcess = Stream.concat(fieldsToCopyAndProcessAndAdd.entrySet().stream(), Stream.of(Map", "CodeBleu_score": 29.761838826149635}, {"code": "private Schema buildNewSchema(String fieldName, Schema oldSchema, Map<String, Header> headerToProcess, List<String> nestedFields, int level){\n\t\tif (oldSchema.is(Schema.Type.STRING) || oldSchema.is(Schema.Type.INT8) || oldSchema.is(Schema.Type.INT16) || oldSchema.is(Schema.Type.INT32) || oldSchema.is(Schema.Type.INT64) || oldSchema.is(Schema.Type.FLOAT32) || oldSchema.is(Schema.Type.FLOAT64) || oldSchema.is(Schema.Type.BOOLEAN) || oldSchema.is(Schema.Type.BYTES)) {\n\t\treturn oldSchema;\n\t}\n\telse if (oldSchema.is(Schema.Type.ARRAY)) {\n\t\treturn SchemaBuilder.array(buildNewSchema(fieldName, oldSchema.valueSchema(), headerToProcess, nestedFields, level + 1));\n\t}\n\telse if (oldSchema.is(Schema.Type.MAP)) {\n\t\treturn SchemaBuilder.map(buildNewSchema(fieldName, oldSchema.valueSchema(), headerToProcess, nestedFields, level + 1), buildNewSchema(fieldName, oldSchema.keySchema(), headerToProcess, nestedFields, level + 1));\n\t}\n\telse if (oldSchema.is(Schema.Type.STRUCT)) {\n\t\tStructBuilder structBuilder = SchemaBuilder.struct();\n\t\tfor (String nestedField : nestedFields) {\n\t\t\tstructBuilder.field(nestedField, buildNewSchema(nestedField, oldSchema.field(nestedField).schema(), headerToProcess, nestedFields, level + 1));\n\t\t}\n\t\tfor (Map.Entry<String, Header> entry : headerToProcess.entrySet()) {\n\t\t\tString headerName = entry.getKey();\n\t\t\tHeader header = entry.getValue();\n\t\t\tif (headerName.startsWith(fieldName + \".\") &&!nestedFields.contains(headerName.substring(fieldName.length() + 1))) {\n\t\t\t\tstructBuilder.field(headerName.substring(fieldName.length() + 1), buildNewSchema(headerName.substring(fieldName.length() + 1), header.schema(), headerToProcess, nestedFields, level + 1));\n\t\t\t}\n\t\t}\n\t\treturn structBuilder.build();\n\t}\n\telse {\n\t\tthrow new RuntimeException(\"Unsupported schema type: \" + oldSchema.type());\n\t}\n}", "CodeBleu_score": 32.38039372454103}, {"code": "private Schema buildNewSchema(String fieldName, Schema oldSchema, Map<String, Header> headerToProcess, List<String> nestedFields, int level){\n\t\tif (oldSchema.is(Schema.Type.STRING)) {\n\t\treturn oldSchema;\n\t}\n\telse if (oldSchema.is(Schema.Type.STRUCT)) {\n\t\tStruct oldStruct = (Struct) oldSchema;\n\t\tSchemaBuilder builder = SchemaBuilder.struct();\n\t\tfor (Schema.Field field : oldStruct.fields()) {\n\t\t\tif (field.schema().is(Schema.Type.STRING)) {\n\t\t\t\tbuilder.field(field.name(), field.schema());\n\t\t\t}\n\t\t\telse if (field.schema().is(Schema.Type.STRUCT)) {\n\t\t\t\tStruct nestedStruct = (Struct) field.schema();\n\t\t\t\tif (nestedStruct.fields().size() == 1 && nestedStruct.fields().get(0).schema().is(Schema.Type.STRING)) {\n\t\t\t\t\tbuilder.field(field.name(), nestedStruct.fields().get(0).schema());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tbuilder.field(field.name(), buildNewSchema(field.name(), nestedStruct, headerToProcess, nestedFields, level + 1));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (String headerName : headerToProcess.keySet()) {\n\t\t\tif (nestedFields.contains(headerName)) {\n\t\t\t\tbuilder.field(headerName, Schema.STRING_SCHEMA);\n\t\t\t}\n\t\t}\n\t\treturn builder.build();\n\t}\n\telse {\n\t\tthrow new ConfigException(format(\"The old schema is not a primitive or struct schema.  Schema: %s\", oldSchema));\n\t}\n}", "CodeBleu_score": 39.098455621192706}]}
{"instance_id": "681a0415df83", "generation_result": [{"code": "public static SnapshotRecord fromSource(Struct source){\n\t\tif (source == null) {\n\t\treturn null;\n\t}\n\tif (source.schema().field(\"snapshotString\") == null) {\n\t\treturn null;\n\t}\n\tString snapshotString = source.getString(\"snapshotString\");\n\tif (snapshotString == null) {\n\t\treturn null;\n\t}\n\tsnapshotString = snapshotString.toUpperCase();\n\tif (snapshotString.equals(\"INITIAL\")) {\n\t\treturn SnapshotRecord.INITIAL;\n\t}\n\tif (snapshotString.equals(\"EARLIER\")) {\n\t\treturn SnapshotRecord.EARLIER;\n\t}\n\tif (snapshotString.equals(\"LATEST\")) {\n\t\treturn SnapshotRecord.LATEST;\n\t}\n\treturn null;\n}", "CodeBleu_score": 39.003427604919146}, {"code": "public static SnapshotRecord fromSource(Struct source){\n\t\tif (source.schema().field(\"SNAPSHOT_KEY\").schema().name().equals(\"SNAPSHOT_KEY\")) {\n\t\tString snapshotKey = source.getString(\"SNAPSHOT_KEY\").toUpperCase();\n\t\tswitch (snapshotKey) {\n\t\t\tcaseodeBleu_score": 22.693102143694112}, {"code": "public static SnapshotRecord fromSource(Struct source){\n\t\tif (source == null) {\n\t\treturn null;\n\t}\n\tString snapshotString = source.getString(SNAPSHOT_KEY);\n\tif (snapshotString!= null) {\n\t\tsnapshotString = snapshotString.toUpperCase();\n\t\treturn SnapshotRecord.valueOf(snapshotString);\n\t}\n\treturn null;\n}", "CodeBleu_score": 33.930927018216025}]}
{"instance_id": "85ef1162e38a", "generation_result": [{"code": "public static Optional<Float> parse(String version) throws NumberFormatException{\n\t\ttry {\n\t\tString[] parts = version.split(\"\\\\.\");\n\t\tif (parts.length > 2) {\n\t\t\tparts = new String[2];\n\t\t}\n\t\tString[] hyphens = version.split(\"-\");\n\t\tparts[0] = hyphens[0];\n\t\treturn Optional.of(Float.parseFloat(parts[0]));\n\t} catch (Exception e) {\n\t\treturn Optional.empty();\n\t}\n}", "CodeBleu_score": 65.1336606606346}, {"code": "public static Optional<Float> parse(String version) throws NumberFormatException{\n\t\ttry {\n\t\tString[] parts = version.split(\"\\\\.\");\n\t\tif (parts.length > 2) {\n\t\t\tparts = new String[] {parts[0], parts[1]};\n\t\t}\n\t\treturn Optional.of(Float.parseFloat(parts[0]));\n\t} catch (NumberFormatException e) {\n\t\treturn Optional.empty();\n\t}\n}", "CodeBleu_score": 60.52403011879706}, {"code": "public static Optional<Float> parse(String version) throws NumberFormatException{\n\t\tString[] parts = version.split(\"\\\\.\");\n\tif (parts.length > 2) {\n\t\tparts = new String[] { parts[0], parts[1] };\n\t}\n\tString[] hyphens = version.split(\"-\");\n\tif (hyphens.length > 1) {\n\t\tparts = new String[] { hyphens[0] };\n\t}\n\ttry {\n\t\treturn Optional.of(Float.parseFloat(parts[0]));\n\t} catch (NumberFormatException e) {\n\t\treturn Optional.empty();\n\t}\n}", "CodeBleu_score": 61.48954583235204}]}
{"instance_id": "64346d69eba0", "generation_result": [{"code": "public Mono<ResponseEntity<ConnectorDTO>> createConnector(String clusterName, String connectName,\n                                                            @Valid Mono<NewConnectorDTO> connector,\n                                                            ServerWebExchange exchange){\n\t\tfinal AccessContext context = new AccessContext(clusterName, connectName, ConnectAction.CREATE_CONNECTOR);\n\treturn Mono.just(context)\n\t\t\t.flatMap(kafkaConnectService::validateAccess)\n\t\t\t.flatMap(kafkaConnectService::createConnector)\n\t\t\t.flatMap(kafkaConnectService::audit)\n\t\t\t.map(ResponseEntity::ok);\n}", "CodeBleu_score": 30.531968272144656}, {"code": "public Mono<ResponseEntity<ConnectorDTO>> createConnector(String clusterName, String connectName,\n                                                            @Valid Mono<NewConnectorDTO> connector,\n                                                            ServerWebExchange exchange){\n\t\tfinal AccessContext context = new AccessContext(clusterName, connectName, Set.of(ConnectAction.CREATE_CONNECTOR));\n\treturn kafkaConnectService.validateAccess(context, exchange)\n\t\t.flatMap(validated -> connector.map(newConnector -> kafkaConnectService.createConnector(clusterName, connectName, newConnector)))\n\t\t.map(ResponseEntity::ok)\n\t\t.doOnNext(responseEntity -> kafkaConnectService.audit(context, responseEntity.getBody(), exchange))\n\t\t.onErrorResume(e -> Mono.just(ResponseEntity.badRequest().body(e.getMessage())));\n}", "CodeBleu_score": 36.683233665540705}, {"code": "public Mono<ResponseEntity<ConnectorDTO>> createConnector(String clusterName, String connectName,\n                                                            @Valid Mono<NewConnectorDTO> connector,\n                                                            ServerWebExchange exchange){\n\t\treturn Mono.zip(\n\t\t\tMono.just(clusterName),\n\t\t\tMono.just(connectName),\n\t\t\tMono.just(connector),\n\t\t\tMono.just(exchange)\n\t).flatMap(tuple -> {\n\t\tfinal AccessContext accessContext = AccessContext.builder()\n\t\t\t\t.clusterName(tuple.getT1())\n\t\t\t\t.connectName(tuple.getT2())\n\t\t\t\t.action(ConnectAction.CREATE_CONNECTOR)\n\t\t\t\t.build();\n\n\t\treturn Mono.zip(\n\t\t\t\tMono.just(accessContext),\n\t\t\t\tMono.just(tuple.getT3()),\n\t\t\t\tMono.just(tuple.getT4())\n\t\t).flatMap(tuple2 -> {\n\t\t\treturn kafkaConnectService.validateAccess(tuple2.getT1(), tuple2.getT2(), tuple2.getT3());\n\t\t}).flatMap(accessResult -> {\n\t\t\tif (accessResult.isAccessGranted()) {\n\t\t\t\treturn kafkaConnectService.createConnector(tuple.getT1(), tuple.getT2(), tuple.getT3())\n\t\t\t\t\t\t.map(connectorResponse -> ResponseEntity.ok(connectorResponse.getConnector()));\n\t\t\t} else {\n\t\t\t\treturn Mono.just(ResponseEntity.status(403).build());\n\t\t\t}\n\t\t}).doOnNext(response -> {\n\t\t\tkafkaConnectService.audit(accessContext, response.getBody(), \"createConnector\");\n\t\t});\n\t});\n}", "CodeBleu_score": 42.59925186443986}]}
{"instance_id": "4c446fd64db6", "generation_result": [{"code": "public Mono<ResponseEntity<Void>> deleteConnector(String clusterName, String connectName,\n                                                    String connectorName,\n                                                    ServerWebExchange exchange){\n\t\tfinal AccessContext accessContext = new AccessContext(clusterName, connectName, DELETE);\n\treturn Mono.just(exchange)\n\t\t.map(ServerWebExchange::getPrincipal)\n\t\t.map(principal -> principal.getName())\n\t\t.map(username -> accessContext.withUser(username))\n\t\t.flatMap(kafkaConnectService::validateAccess)\n\t\t.flatMap(kafkaConnectService::deleteConnector);\n}", "CodeBleu_score": 25.492547014079094}, {"code": "public Mono<ResponseEntity<Void>> deleteConnector(String clusterName, String connectName,\n                                                    String connectorName,\n                                                    ServerWebExchange exchange){\n\t\treturn Mono.defer(() -> {\n\t\tMap<String, String> pathVariables = exchange.getAttribute(\"pathVariables\");\n\t\tString clusterNameFromPath = pathVariables.get(\"clusterName\");\n\t\tString connectNameFromPath = pathVariables.get(\"connectName\");\n\t\tString connectorNameFromPath = pathVariables.get(\"connectorName\");\n\t\tif (clusterNameFromPath == null || connectNameFromPath == null || connectorNameFromPath == null) {\n\t\t\treturn Mono.error(new IllegalArgumentException(\"Missing required path variable(s)\"));\n\t\t}\n\t\tif (!clusterNameFromPath.equals(clusterName)) {\n\t\t\treturn Mono.error(new IllegalArgumentException(\"Path variable clusterName does not match the path variable clusterNameFromPath\"));\n\t\t}\n\t\tif (!connectNameFromPath.equals(connectName)) {\n\t\t\treturn Mono.error(new IllegalArgumentException(\"Path variable connectName does not match the path variable connectNameFromPath\"));\n\t\t}\n\t\tif (!connectorNameFromPath.equals(connectorName)) {\n\t\t\treturn Mono.error(new IllegalArgumentException(\"Path variable connectorName does not match the path variable connectorNameFromPath\"));\n\t\t}\n\t\tAccessContext accessContext = AccessContext.builder()\n\t\t\t.clusterName(clusterName)\n\t\t\t.connectName(connectName)\n\t\t\t.actions(Set.of(ConnectAction.DELETE_CONNECTOR))\n\t\t\t.build();\n\t\treturn kafkaConnectService.validateAccess(accessContext)\n\t\t\t.flatMap(validatedAccessContext -> kafkaConnectService.deleteConnector(clusterName, connectName, connectorName))\n\t\t\t.map(result -> ResponseEntity.ok().build());\n\t});\n}", "CodeBleu_score": 39.28749146888505}, {"code": "public Mono<ResponseEntity<Void>> deleteConnector(String clusterName, String connectName,\n                                                    String connectorName,\n                                                    ServerWebExchange exchange){\n\t\treturn Mono.defer(() -> {\n\t\tfinal AccessContext accessContext = new AccessContext(clusterName, connectName, Set.of(ConnectAction.DELETE_CONNECTOR));\n\t\treturn kafkaConnectService.validateAccess(accessContext, exchange)\n\t\t\t.flatMap(validated -> kafkaConnectService.deleteConnector(clusterName, connectName, connectorName))\n\t\t\t.map(deleted -> ResponseEntity.ok().build())\n\t\t\t.onErrorResume(e -> {\n\t\t\t\tlog.error(\"Failed to delete connector\", e);\n\t\t\t\treturn Mono.just(ResponseEntity.badRequest().build());\n\t\t\t});\n\t});\n}", "CodeBleu_score": 32.86456137789397}]}
{"instance_id": "d34a49f3ca1b", "generation_result": [{"code": "public Mono<ResponseEntity<Void>> updateConnectorState(String clusterName, String connectName,\n                                                         String connectorName,\n                                                         ConnectorActionDTO action,\n                                                         ServerWebExchange exchange) {\n\t\treturn Mono.just(exchange)\n\t\t\t.flatMap(exchange1 -> Mono.just(exchange1.getAttribute(ACCESS_CONTEXT)))\n\t\t\t.flatMap(accessContext -> {\n\t\t\t\tif (accessContext.getActions().contains(ConnectAction.UPDATE_CONNECTOR_STATE)) {\n\t\t\t\t\treturn Mono.just(accessContext);\n\t\t\t\t}\n\t\t\t\treturn Mono.error(new AccessDeniedException(\"Access denied\"));\n\t\t\t})\n\t\t\t.flatMap(accessContext -> {\n\t\t\t\treturn kafkaConnectService.updateConnectorState(clusterName, connectName, connectorName, action, accessContext);\n\t\t\t})\n\t\t\t.flatMap(response -> {\n\t\t\t\treturn Mono.just(response);\n\t\t\t})\n\t\t\t.flatMap(response -> {\n\t\t\t\treturn Mono.just(response);\n\t\t\t})\n\t\t\t.flatMap(response -> {\n\t\t\t\treturn Mono.just(response);\n\t\t\t})\n\t\t\t.flatMap(response -> {\n\t\t\t\treturn Mono.just(response);\n\t\t\t})\n\t\t\t.flatMap(response -> {\n\t\t\t\treturn Mono.just(response);\n\t\t\t})\n\t\t\t.flatMap(response -> {\n\t\t\t\treturn Mono.just(response);\n\t\t\t})\n\t\t\t.flatMap(response -> {\n\t\t\t\treturn Mono.just(response);\n\t\t\t})\n\t\t\t.flatMap(response -> {\n\t\t\t\treturn Mono.just(response);\n\t\t\t})\n\t\t\t.flatMap(response -> {\n\t\t\t\treturn Mono.just(response);\n\t\t\t})\n\t\t\t.flatMap(response -> {\n\t\t\t\treturn Mono.just(response);\n\t\t\t})\n\t\t\t.flatMap(response -> {\n\t\t\t\treturn Mono.just(response);\n\t\t\t})\n\t\t\t.flatMap(response -> {\n\t\t\t\treturn Mono.just(response);\n\t\t\t})\n\t\t\t.flatMap(response -> {\n\t\t\t\treturn Mono.just(response);\n\t\t\t})\n\t\t\t.flatMap(response -> {\n\t\t\t\treturn Mono.just(response);\n\t\t\t})\n\t\t\t.flatMap(response -> {\n\t\t\t\treturn Mono.just(response);\n\t\t\t})\n\t\t\t.flatMap(response -> {\n\t\t\t\treturn Mono.just(response);\n\t\t\t})\n\t\t\t.flatMap(response -> {\n\t\t\t\treturn Mono.just(response);\n\t\t\t})\n\t\t\t.flatMap(response -> {\n\t\t\t\treturn Mono.just(response);\n\t\t\t})\n\t\t\t.flatMap(response -> {\n\t\t\t\treturn Mono.just(response);\n\t\t\t})\n\t\t\t", "CodeBleu_score": 19.42941629167024}, {"code": "public Mono<ResponseEntity<Void>> updateConnectorState(String clusterName, String connectName,\n                                                         String connectorName,\n                                                         ConnectorActionDTO action,\n                                                         ServerWebExchange exchange) {\n\t\treturn Mono.just(exchange)\n\t\t.map(ServerWebExchange::getFormData)\n\t\t.map(formData -> {\n\t\t\tMap<String, String> params = formData.toSingleValueMap();\n\t\t\treturn params;\n\t\t})\n\t\t.map(params -> {\n\t\t\tAccessContext context = AccessContext.builder()\n\t\t\t\t.clusterName(clusterName)\n\t\t\t\t.connectName(connectName)\n\t\t\t\t.connectorName(connectorName)\n\t\t\t\t.action(action)\n\t\t\t\t.operationName(action.name())\n\t\t\t\t.parameters(params)\n\t\t\t\t.build();\n\t\t\treturn context;\n\t\t})\n\t\t.flatMap(accessContext -> {\n\t\t\treturn kafkaConnectService.validateAccess(accessContext)\n\t\t\t\t.switchIfEmpty(Mono.error(new AccessDeniedException(accessContext)))\n\t\t\t\t.flatMap(validated -> kafkaConnectService.updateConnectorState(clusterName, connectName, connectorName, action, params)\n\t\t\t\t\t.doOnNext(connectorState -> auditService.audit(accessContext, connectorState))\n\t\t\t\t\t.doOnError(error -> auditService.audit(accessContext, error))\n\t\t\t\t);\n\t\t})\n\t\t.map(connectorState -> ResponseEntity.ok().build());\n}", "CodeBleu_score": 41.12741417131267}, {"code": "public Mono<ResponseEntity<Void>> updateConnectorState(String clusterName, String connectName,\n                                                         String connectorName,\n                                                         ConnectorActionDTO action,\n                                                         ServerWebExchange exchange) {\n\t\treturn Mono.just(exchange)\n\t\t\t.map(ServerWebExchange::getRequest)\n\t\t\t.map(request -> new AccessContext(clusterName, connectName, connectorName, action.name(), request.getQueryParams()))\n\t\t\t.flatMap(kafkaConnectService::validateAccess)\n\t\t\t.flatMap(kafkaConnectService::updateConnectorState)\n\t\t\t.map(response -> ResponseEntity.ok().build())\n\t\t\t.doOnNext(response -> auditService.log(clusterName, connectName, connectorName, action.name(), request.getQueryParams()))\n\t\t\t.onErrorResume(e -> Mono.just(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build()));\n}", "CodeBleu_score": 25.622101423412435}]}
{"instance_id": "199cfe41b374", "generation_result": [{"code": "public Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig{\n\t\tprivate final KafkaConnectApi kafkaConnectApi;\n\tprivate final KafkaConnectService kafkaConnectService;\n\n\t@RequiredArgsConstructor\n\t@Slf4j\n\t@RestController\n\tpublic class ValidateConnectorPluginConfigController {\n\t\t@PostMapping(value = \"/api/v1/connectors/{clusterName}/validate-plugin-config\", produces = \"application/json\")\n\t\tpublic Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig(\n\t\t\t@PathVariable String clusterName,\n\t\t\t@RequestBody @Valid Map<String, String> requestBody,\n\t\t\tServerWebExchange exchange) {\n\t\t\treturn kafkaConnectApi.validateConnectorPluginConfig(clusterName, requestBody, exchange)\n\t\t\t\t.map(response -> ResponseEntity.ok(response));\n\t\t}\n\t}\n}", "CodeBleu_score": 45.16920659463665}, {"code": "public Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig{\n\t\tprivate final KafkaConnectService kafkaConnectService;\n\n\tpublic validateConnectorPluginConfig(KafkaConnectService kafkaConnectService) {\n\t\tthis.kafkaConnectService = kafkaConnectService;\n\t}\n\n\tpublic Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> invoke(ServerWebExchange exchange, @Valid NewConnectorDTO newConnectorDTO) {\n\t\treturn Mono.just(newConnectorDTO)\n\t\t\t.flatMap(kafkaConnectService::validateConnectorPluginConfig)\n\t\t\t.map(ResponseEntity::ok)\n\t\t\t.onErrorResume(e -> Mono.just(ResponseEntity.badRequest().body(new ConnectorPluginConfigValidationResponseDTO(e.getMessage()))));\n\t}\n}", "CodeBleu_score": 31.767929704833225}, {"code": "public Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig{\n\t\tprivate final KafkaConnectApi kafkaConnectApi;\n\tprivate final KafkaConnectService kafkaConnectService;\n\n\tpublic validateConnectorPluginConfig(KafkaConnectApi kafkaConnectApi, KafkaConnectService kafkaConnectService) {\n\t\tthis.kafkaConnectApi = kafkaConnectApi;\n\t\tthis.kafkaConnectService = kafkaConnectService;\n\t}\n\n\tpublic Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig(ServerWebExchange exchange, String clusterName, String connectName, String pluginName, @Valid ConnectorPluginDTO requestBody) {\n\t\treturn Mono.just(exchange)\n\t\t\t\t.flatMap(e -> Mono.just(e.getAttribute(AccessContext.class.getName())))\n\t\t\t\t.flatMap(accessContext -> Mono.just(accessContext.getPermissions()))\n\t\t\t\t.flatMap(permissions -> Mono.just(permissions.stream().anyMatch(p -> p instanceof ConnectAction && ((ConnectAction) p).getConnectName().equals(connectName))))\n\t\t\t\t.flatMap(hasPermission -> {\n\t\t\t\t\tif (hasPermission) {\n\t\t\t\t\t\treturn kafkaConnectService.validateConnectorPluginConfig(clusterName, connectName, pluginName, requestBody);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn Mono.just(ResponseEntity.status(403).build());\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.map(response -> ResponseEntity.ok(response));\n\t}\n}", "CodeBleu_score": 41.1418450674423}]}
{"instance_id": "88380ae300c4", "generation_result": [{"code": "public static ConfigurableApplicationContext startApplication(String[] args){\n\t\tConfigurableApplicationContext applicationContext = new SpringApplicationBuilder(KafkaUiApplication.class).initializers(new DynamicConfigOperations()).run(args);\n\treturn applicationContext;\n}", "CodeBleu_score": 42.48742851235202}, {"code": "public static ConfigurableApplicationContext startApplication(String[] args){\n\t\treturn new SpringApplicationBuilder(KafkaUiApplication.class)\n\t\t.initializers(new DynamicConfigOperations())\n\t\t.run(args);\n}", "CodeBleu_score": 38.54660028835595}, {"code": "public static ConfigurableApplicationContext startApplication(String[] args){\n\tConfigurableApplicationContext applicationContext = new SpringApplicationBuilder(KafkaUiApplication.class)\n.initializers(new DynamicConfigOperations())\n.run(args);\nreturn applicationContext;\n}", "CodeBleu_score": 43.67062413936891}]}
{"instance_id": "3f022876f737", "generation_result": [{"code": "private Predicate<FullConnectorInfoDTO> matchesSearchTerm(@Nullable final String search){\n\t\treturn search == null? s -> true : s -> s.getConnector().getConnectorClass().toLowerCase().contains(search.toLowerCase()) || s.getConnector().getConnectorClass().toLowerCase().contains(search.toLowerCase()) || s.getConnector().getConnectorClass().toLowerCase().contains(search.toLowerCase()) || s.getConnector().getConnectorClass().toLowerCase().contains(search.toLowerCase()) || s.getConnector().getConnectorClass().toLowerCase().contains(search.toLowerCase()) || s.getConnector().getConnectorClass().toLowerCase().contains(search.toLowerCase()) || s.getConnector().getConnectorClass().toLowerCase().contains(search.toLowerCase()) || s.getConnector().getConnectorClass().toLowerCase().contains(search.toLowerCase()) || s.getConnector().getConnectorClass().toLowerCase().contains(search.toLowerCase()) || s.getConnector().getConnectorClass().toLowerCase().contains(search.toLowerCase()) || s.getConnector().getConnectorClass().toLowerCase().contains(search.toLowerCase()) || s.getConnector().getConnectorClass().toLowerCase().contains(search.toLowerCase()) || s.getConnector().getConnectorClass().toLowerCase().contains(search.toLowerCase()) || s.getConnector().getConnectorClass().toLowerCase().contains(search.toLowerCase()) || s.getConnector().getConnectorClass().toLowerCase().contains(search.toLowerCase()) || s.getConnector().getConnectorClass().toLowerCase().contains(search.toLowerCase()) || s.getConnector().getConnectorClass().toLowerCase().contains(search.toLowerCase()) || s.getConnector().getConnectorClass().toLowerCase().contains(search.toLowerCase()) || s.getConnector().getConnectorClass().toLowerCase().contains(search.toLowerCase()) || s.getConnector().getConnectorClass().toLowerCase().contains(search.toLowerCase()) || s.getConnector().getConnectorClass().toLowerCase().contains(search.toLowerCase()) || s.getConnector().getConnectorClass().toLowerCase().contains(search.toLowerCase()) || s.getConnector().getConnectorClass().toLowerCase().contains(search.toLowerCase()) || s.getConnector().getConnectorClass().toLowerCase().contains(search.toLowerCase()) || s.getConnector().getConnectorClass().toLowerCase().contains(search.toLowerCase()) || s.getConnector().getConnectorClass().toLowerCase().contains(search.toLowerCase()) || s.getConnector().getConnectorClass().toLowerCase().contains(search.toLowerCase()) || s.getConnector().getConnectorClass().toLowerCase().contains(search", "CodeBleu_score": 27.133065520884138}, {"code": "private Predicate<FullConnectorInfoDTO> matchesSearchTerm(@Nullable final String search){\n\t\treturn search == null?\n\t\tconnector -> true :\n\t\tconnector -> Stream.of(connector.getName(), connector.getConnectorClass(), connector.getConnectorType(), connector.getConnectorVersion())\n\t\t\t.anyMatch(s -> StringUtils.containsIgnoreCase(s, search));\n}", "CodeBleu_score": 41.81463547139198}, {"code": "private Predicate<FullConnectorInfoDTO> matchesSearchTerm(@Nullable final String search){\n\t\treturn search == null? null : connector -> {\n\t\tfinal List<String> connectors = Stream.of(connector.getName(), connector.getDescription()).collect(Collectors.toList());\n\t\treturn connectors.stream().anyMatch(connector -> connector.toLowerCase().contains(search.toLowerCase()));\n\t};\n}", "CodeBleu_score": 25.96967775056116}]}
{"instance_id": "9754aa1ec96c", "generation_result": [{"code": "  private Map<String, Object> flattenClusterProperties(@Nullable String prefix,\n                                                       @Nullable Map<String, Object> propertiesMap){\n\t//    Map<String, Object> result = new HashMap<>();\n//    if (propertiesMap == null) {\n//      return result;\n//    }\n//    for (Map.Entry<String, Object> entry : propertiesMap.entrySet()) {\n//      String key = entry.getKey();\n//      Object value = entry.getValue();\n//      if (value instanceof Map) {\n//        Map<String, Object> nestedMap = (Map<String, Object>) value;\n//        Map<String, Object> nestedResult = flattenClusterProperties(key, nestedMap);\n//        result.putAll(nestedResult);\n//      } else {\n//        result.put(prefix + \".\" + key, value);\n//      }\n//    }\n//    return result;\n    return new HashMap<>();\n  }", "CodeBleu_score": 13.107662103540871}, {"code": "  private Map<String, Object> flattenClusterProperties(@Nullable String prefix,\n                                                       @Nullable Map<String, Object> propertiesMap){\n\t\tMap<String, Object> flattenedMap = new HashMap<>();\n\tif (propertiesMap!= null) {\n\t  for (Map.Entry<String, Object> entry : propertiesMap.entrySet()) {\n\t\tString key = entry.getKey();\n\t\tObject value = entry.getValue();\n\t\tif (value instanceof Map) {\n\t\t  flattenedMap.putAll(flattenClusterProperties(StringUtils.hasText(prefix)? prefix + \".\" + key : key, (Map<String, Object>) value));\n\t\t} else {\n\t\t  flattenedMap.put(StringUtils.hasText(prefix)? prefix + \".\" + key : key, value);\n\t\t}\n\t  }\n\t}\n\treturn flattenedMap;\n  }", "CodeBleu_score": 43.70767931775564}, {"code": "  private Map<String, Object> flattenClusterProperties(@Nullable String prefix,\n                                                       @Nullable Map<String, Object> propertiesMap){\n\t\tMap<String, Object> result = new HashMap<>();\n\tif (prefix == null) {\n\t  prefix = \"\";\n\t}\n\tif (propertiesMap == null) {\n\t  propertiesMap = new HashMap<>();\n\t}\n\tfor (Map.Entry<String, Object> entry : propertiesMap.entrySet()) {\n\t  String key = prefix + \".\" + entry.getKey();\n\t  Object value = entry.getValue();\n\t  if (value instanceof Map) {\n\t\tresult.putAll(flattenClusterProperties(key, (Map<String, Object>) value));\n\t  } else {\n\t\tresult.put(key, value);\n\t  }\n\t}\n\treturn result;\n  }", "CodeBleu_score": 48.40480067769937}]}
{"instance_id": "99266677c846", "generation_result": [{"code": " private static Set<String> kafkaConfigKeysToSanitize(){\n\t ConfigDef configDef = new ConfigDef();\n configDef.define(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.HIGH, \"Path to the keystore used for SSL authentication.\");\n configDef.define(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.HIGH, \"Password for the keystore used for SSL authentication.\");\n configDef.define(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.HIGH, \"Path to the keystore used for SSL authentication.\");\n configDef.define(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.HIGH, \"Password for the keystore used for SSL authentication.\");\n configDef.define(SslConfigs.SSL_KEY_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.HIGH, \"Password for the private key in the keystore used for SSL authentication.\");\n configDef.define(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.HIGH, \"The algorithm used to identify the endpoint.\");\n configDef.define(SaslConfigs.SASL_MECHANISM_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.HIGH, \"SASL mechanism used for authentication.\");\n configDef.define(SaslConfigs.SASL_JAAS_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.HIGH, \"SASL JAAS config used for authentication.\");\n configDef.define(SaslConfigs.SASL_KERBEROS_SERVICE_NAME_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.HIGH, \"Kerberos service name used for authentication.\");\n return configDef.configKeys().stream().filter(key -> key.contains(\"password\")).collect(Collectors.toSet());\n }", "CodeBleu_score": 47.67757597624721}, {"code": " private static Set<String> kafkaConfigKeysToSanitize(){\n\t ConfigDef configDef = new ConfigDef();\n configDef.define(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.LOW, \"The location of the truststore file.\");\n configDef.define(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.LOW, \"The password of the truststore file.\");\n configDef.define(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.LOW, \"The location of the keystore file.\");\n configDef.define(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.LOW, \"The password of the keystore file.\");\n configDef.define(SaslConfigs.SASL_JAAS_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.LOW, \"The JAAS configuration used to authenticate with the broker.\");\n configDef.define(SaslConfigs.SASL_MECHANISM, ConfigDef.Type.STRING, null, ConfigDef.Importance.LOW, \"The SASL mechanism used to authenticate with the broker.\");\n return configDef.configKeys().stream().filter(key -> key.startsWith(\"ssl.\") || key.startsWith(\"sasl.\"))\n.collect(Collectors.toSet());\n }", "CodeBleu_score": 49.66756879015747}, {"code": " private static Set<String> kafkaConfigKeysToSanitize(){\n\t ConfigDef configDef = new ConfigDef();\n configDef.define(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.LOW, \"SSL truststore location\", null, null, null, null);\n configDef.define(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.LOW, \"SSL truststore password\", null, null, null, null);\n configDef.define(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.LOW, \"SSL keystore location\", null, null, null, null);\n configDef.define(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.LOW, \"SSL keystore password\", null, null, null, null);\n configDef.define(SslConfigs.SSL_KEY_PASSWORD_CONFIG, ConfigDef.Type.PASSWORD, null, ConfigDef.Importance.LOW, \"SSL key password\", null, null, null, null);\n configDef.define(SslConfigs.SSL_ENDPOINT_IDENTIFICATION_ALGORITHM_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.LOW, \"SSL endpoint identification algorithm\", null, null, null, null);\n configDef.define(SslConfigs.SSL_PROTOCOL_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.LOW, \"SSL protocol\", null, null, null, null);\n configDef.define(SslConfigs.SSL_CIPHER_SUITES_CONFIG, ConfigDef.Type.LIST, null, ConfigDef.Importance.LOW, \"SSL cipher suites\", null, null, null, null);\n configDef.define(SslConfigs.SSL_ENABLED_PROTOCOLS_CONFIG, ConfigDef.Type.LIST, null, ConfigDef.Importance.LOW, \"SSL enabled protocols\", null, null, null, null);\n configDef.define(SslConfigs.SSL_PROVIDER_CLASS_CONFIG, ConfigDef.Type.STRING, null, ConfigDef.Importance.LOW, \"SSL provider class\", null, null, null, null);\n configDef.define(SslConfigs.SSL_KEYMANAGER_ALGORITHM_CONFIG, ConfigDef.", "CodeBleu_score": 42.54827409084396}]}
{"instance_id": "deebb6fcb0a8", "generation_result": [{"code": "private Mono<ClusterFeature> aclEdit(ReactiveAdminClient adminClient, ClusterDescription clusterDescription){\n\t\treturn Mono.just(clusterDescription)\n\t\t.map(ClusterDescription::getAuthorizedOperations)\n\t\t.flatMapMany(Flux::fromIterable)\n\t\t.filter(AclOperation.VIEW_ACL::equals)\n\t\t.flatMap(op -> adminClient.describeCluster(clusterDescription.getClusterName()))\n\t\t.map(ClusterDescription::isAclViewEnabled)\n\t\t.filter(Predicate.isEqual(true))\n\t\t.flatMap(enabled -> {\n\t\t\tif (enabled) {\n\t\t\t\treturn Mono.just(ClusterFeature.KAFKA_ACL_EDIT);\n\t\t\t}\n\t\t\treturn Mono.empty();\n\t\t});\n}", "CodeBleu_score": 31.492572434478287}, {"code": "private Mono<ClusterFeature> aclEdit(ReactiveAdminClient adminClient, ClusterDescription clusterDescription){\n\t\treturn Mono.just(clusterDescription)\n\t\t.map(ClusterDescription::getAuthorizedOperations)\n\t\t.map(Set::stream)\n\t\t.map(stream -> stream.filter(operation -> operation == AclOperation.VIEW))\n\t\t.map(stream -> stream.findAny())\n\t\t.map(Optional::isPresent)\n\t\t.map(isPresent -> isPresent? ClusterFeature.KAFKA_ACL_EDIT : ClusterFeature.EMPTY)\n\t\t.defaultIfEmpty(ClusterFeature.EMPTY);\n}", "CodeBleu_score": 27.222184977481508}, {"code": "private Mono<ClusterFeature> aclEdit(ReactiveAdminClient adminClient, ClusterDescription clusterDescription){\n\t\treturn Mono.just(clusterDescription)\n\t\t.map(ClusterDescription::getAuthorizedOperations)\n\t\t.flatMapMany(Flux::fromIterable)\n\t\t.filter(o -> o.equals(AclOperation.VIEW))\n\t\t.flatMap(o -> adminClient.describeCluster(clusterDescription.getClusterName()))\n\t\t.map(ClusterDescription::getAclEnabled)\n\t\t.map(enabled -> enabled? ClusterFeature.KAFKA_ACL_EDIT : null)\n\t\t.defaultIfEmpty(null);\n}", "CodeBleu_score": 30.800666554993978}]}
{"instance_id": "a5d8cc77955f", "generation_result": [{"code": "protected TreeMap<TopicPartition, FromToOffset> nextPollingRange(TreeMap<TopicPartition, FromToOffset> prevRange,\n                                                                   SeekOperations seekOperations){\n\t\tTreeMap<TopicPartition, FromToOffset> nextRange = new TreeMap<>();\n\tMap<TopicPartition, Long> seekOffsets = seekOperations.seekOffsets();\n\tMap<TopicPartition, Long> prevOffsets = prevRange.entrySet().stream()\n\t\t.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (k, v) -> v));\n\tMap<TopicPartition, Long> currentOffsets = seekOffsets.entrySet().stream()\n\t\t.filter(entry -> prevOffsets.containsKey(entry.getKey()) && entry.getValue() < prevOffsets.get(entry.getKey()))\n\t\t.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n\n\tif (seekOffsets.isEmpty()) {\n\t\tcurrentOffsets = prevOffsets;\n\t}\n\n\tfor (Map.Entry<TopicPartition, Long> entry : currentOffsets.entrySet()) {\n\t\tTopicPartition topicPartition = entry.getKey();\n\t\tlong offset = entry.getValue();\n\t\tlong endOffset = offset + this.messagesToPoll;\n\t\tif (endOffset > prevRange.get(topicPartition).endOffset()) {\n\t\t\tendOffset = prevRange.get(topicPartition).endOffset();\n\t\t}\n\t\tnextRange.put(topicPartition, new FromToOffset(offset, endOffset));\n\t}\n\treturn nextRange;\n}", "CodeBleu_score": 39.23488273101331}, {"code": "protected TreeMap<TopicPartition, FromToOffset> nextPollingRange(TreeMap<TopicPartition, FromToOffset> prevRange,\n                                                                   SeekOperations seekOperations){\n\t\tTreeMap<TopicPartition, FromToOffset> nextRange = new TreeMap<>();\n\tif (prevRange.isEmpty()) {\n\t\tnextRange = seekOperations.getOffsets();\n\t} else {\n\t\tnextRange = prevRange;\n\t}\n\n\tMap<TopicPartition, Long> partitionsToPoll = nextRange.entrySet().stream()\n\t\t.collect(Collectors.toMap(Map.Entry::getKey,\n\t\t\tentry -> entry.getValue().getTo() - entry.getValue().getFrom() + 1));\n\n\tnextRange.entrySet().forEach(entry -> {\n\t\tlong partitionFrom = entry.getValue().getFrom();\n\t\tlong partitionTo = entry.getValue().getTo();\n\t\tlong partitionPoll = partitionsToPoll.get(entry.getKey());\n\t\tlong partitionStart = partitionFrom + partitionPoll;\n\t\tif (partitionStart < partitionFrom) {\n\t\t\tpartitionStart = partitionFrom;\n\t\t}\n\t\tnextRange.put(entry.getKey(), new FromToOffset(partitionStart, partitionTo));\n\t});\n\n\treturn nextRange;\n}", "CodeBleu_score": 40.393456173421214}, {"code": "protected TreeMap<TopicPartition, FromToOffset> nextPollingRange(TreeMap<TopicPartition, FromToOffset> prevRange,\n                                                                   SeekOperations seekOperations){\n\t\tTreeMap<TopicPartition, FromToOffset> nextRange = new TreeMap<>(Comparator.comparing(TopicPartition::topic));\n\tMap<TopicPartition, Long> offsets = seekOperations.offsets();\n\tif (prevRange.isEmpty()) {\n\t\tfor (TopicPartition topicPartition : offsets.keySet()) {\n\t\t\tnextRange.put(topicPartition, new FromToOffset(offsets.get(topicPartition), offsets.get(topicPartition)));\n\t\t}\n\t} else {\n\t\tfor (TopicPartition topicPartition : prevRange.keySet()) {\n\t\t\tFromToOffset fromToOffset = prevRange.get(topicPartition);\n\t\t\tLong startOffset = fromToOffset.from();\n\t\t\tLong endOffset = fromToOffset.to();\n\t\t\tLong numOfMessagesToPoll = (endOffset - startOffset) / partitionPollSize;\n\t\t\tLong nextStartOffset = startOffset + numOfMessagesToPoll * partitionPollSize;\n\t\t\tif (nextStartOffset < startOffset) {\n\t\t\t\tnextStartOffset = startOffset;\n\t\t\t}\n\t\t\tnextRange.put(topicPartition, new FromToOffset(nextStartOffset, endOffset));\n\t\t}\n\t}\n\treturn nextRange;\n}", "CodeBleu_score": 37.10120693777201}]}
{"instance_id": "c4c657caeba5", "generation_result": [{"code": "public void doLaunch(final MessageInput input){\n\t\tfinal Logger logger = LoggerFactory.getLogger(KafkaInput.class);\n\tfinal Lifecycle lifecycle = input.getLifecycle();\n\tfinal Configuration config = input.getConfiguration();\n\tfinal NodeId nodeId = input.getNodeId();\n\tfinal MetricRegistry metricRegistry = LocalMetricRegistry.get();\n\n\tfinal boolean legacyMode = config.getBoolean(\"legacy_mode\");\n\tfinal String bootstrapServers = config.getString(\"bootstrap_servers\");\n\tfinal String zookeeperConnect = config.getString(\"zookeeper_connect\");\n\tfinal String topic = config.getString(\"topic\");\n\tfinal String groupId = config.getString(\"group_id\");\n\tfinal String clientId = config.getString(\"client_id\");\n\tfinal String codec = config.getString(\"codec\");\n\tfinal String codecClass = config.getString(\"codec_class\");\n\tfinal String codecName = config.getString(\"codec_name\");\n\tfinal String codecField = config.getString(\"codec_field\");\n\tfinal String codecFieldClass = config.getString(\"codec_field_class\");\n\tfinal String codecFieldClassname = config.getString(\"codec_field_classname\");\n\tfinal String codecFieldName = config.getString(\"codec_field_name\");\n\tfinal String codecFieldFormat = config.getString(\"codec_field_format\");\n\tfinal String codecFieldFormatClass = config.getString(\"codec_field_format_class\");\n\tfinal String codecFieldFormatClassname = config.getString(\"codec_field_format_classname\");\n\tfinal String codecFieldFormatName = config.getString(\"codec_field_format_name\");\n\tfinal String codecFieldFormatPattern = config.getString(\"codec_field_format_pattern\");\n\tfinal String codecFieldFormatPatternClass = config.getString(\"codec_field_format_pattern_class\");\n\tfinal String codecFieldFormatPatternClassname = config.getString(\"codec_field_format_pattern_classname\");\n\tfinal String codecFieldFormatPatternName = config.getString(\"codec_field_format_pattern_name\");\n\tfinal String codecFieldFormatPatternFlags = config.getString(\"codec_field_format_pattern_flags\");\n\tfinal String codecFieldFormatPatternFlagsClass = config.getString(\"codec_field_format_pattern_flags_class\");\n\tfinal String codecFieldFormatPatternFlagsClassname = config.getString(\"codec_field_format_pattern_flags_", "CodeBleu_score": 22.685341589041652}, {"code": "public void doLaunch(final MessageInput input){\n\t\tfinal Logger logger = LoggerFactory.getLogger(KafkaMessageInput.class);\n\tfinal Lifecycle lifecycle = input.getLifecycle();\n\tfinal ServerStatus serverStatus = input.getServerStatus();\n\tfinal NodeId nodeId = input.getNodeId();\n\tfinal Configuration configuration = input.getConfiguration();\n\tfinal CodecAggregator codecAggregator = input.getCodecAggregator();\n\tfinal Transport transport = input.getTransport();\n\tfinal ThrottleableTransport throttleableTransport = input.getThrottleableTransport();\n\tfinal EventBus eventBus = input.getEventBus();\n\tfinal MetricRegistry metricRegistry = input.getMetricRegistry();\n\tfinal LocalMetricRegistry localMetricRegistry = input.getLocalMetricRegistry();\n\tfinal String inputName = input.getName();\n\n\tfinal ConfigurationField<String> zookeeperConnectionStringField = configuration.getField(ZOOKEEPER_CONNECTION_STRING_FIELD);\n\tfinal ConfigurationField<String> bootstrapServersField = configuration.getField(BOOTSTRAP_SERVERS_FIELD);\n\tfinal ConfigurationField<String> topicField = configuration.getField(TOPIC_FIELD);\n\tfinal ConfigurationField<String> groupIdField = configuration.getField(GROUP_ID_FIELD);\n\tfinal ConfigurationField<String> clientNameField = configuration.getField(CLIENT_NAME_FIELD);\n\tfinal ConfigurationField<String> consumerTimeoutField = configuration.getField(CONSUMER_TIMEOUT_FIELD);\n\tfinal ConfigurationField<String> consumerTimeoutUnitField = configuration.getField(CONSUMER_TIMEOUT_UNIT_FIELD);\n\tfinal ConfigurationField<String> consumerTimeoutDefault = configuration.getField(CONSUMER_TIMEOUT_DEFAULT);\n\tfinal ConfigurationField<String> consumerTimeoutDefaultUnit = configuration.getField(CONSUMER_TIMEOUT_DEFAULT_UNIT);\n\tfinal ConfigurationField<String> consumerTimeoutMax = configuration.getField(CONSUMER_TIMEOUT_MAX);\n\tfinal ConfigurationField<String> consumerTimeoutMaxUnit = configuration.getField(CONSUMER_TIMEOUT_MAX_UNIT);\n\tfinal ConfigurationField<String> consumerTimeoutMin = configuration.getField(CONSUMER_TIMEOUT_MIN);\n\tfinal ConfigurationField<String> consumerTimeoutMinUnit = configuration.getField(CONSUMER_TIMEOUT_MIN_UNIT);\n\tfinal ConfigurationField<String> consumerTimeoutMultiplier = configuration.getField(CONSUMER_TIMEOUT_MULTIPLIER);\n\tfinal ConfigurationField<String> consumer", "CodeBleu_score": 24.48195197876729}, {"code": "public void doLaunch(final MessageInput input){\n\t\tfinal Logger log = LoggerFactory.getLogger(MessageInput.class);\n\tfinal Configuration configuration = input.getConfiguration();\n\tfinal Lifecycle lifecycle = input.getLifecycle();\n\tfinal EventBus eventBus = input.getEventBus();\n\tfinal NodeId nodeId = input.getNodeId();\n\tfinal MetricRegistry metricRegistry = input.getMetricRegistry();\n\tfinal LocalMetricRegistry localMetricRegistry = input.getLocalMetricRegistry();\n\tfinal ServerStatus serverStatus = input.getServerStatus();\n\tfinal CodecAggregator codecAggregator = input.getCodecAggregator();\n\tfinal String inputId = input.getId();\n\tfinal Transport transport = input.getTransport();\n\tfinal Optional<String> groupId = input.getGroupId();\n\tfinal Optional<String> topic = input.getTopic();\n\tfinal Optional<String> consumerId = input.getConsumerId();\n\tfinal Optional<String> consumerName = input.getConsumerName();\n\tfinal Optional<String> consumerDescription = input.getConsumerDescription();\n\tfinal Optional<String> consumerType = input.getConsumerType();\n\tfinal Optional<String> consumerConfiguration = input.getConsumerConfiguration();\n\tfinal Optional<String> consumerConfigurationDescription = input.getConsumerConfigurationDescription();\n\tfinal Optional<String> consumerConfigurationExample = input.getConsumerConfigurationExample();\n\tfinal Optional<String> consumerConfigurationValidation = input.getConsumerConfigurationValidation();\n\tfinal Optional<String> consumerConfigurationValidationErrorMessage = input.getConsumerConfigurationValidationErrorMessage();\n\tfinal Optional<String> consumerConfigurationValidationErrorMessageExample = input.getConsumerConfigurationValidationErrorMessageExample();\n\tfinal Optional<String> consumerConfigurationValidationErrorMessageExample = input.getConsumerConfigurationValidationErrorMessageExample();\n\tfinal Optional<String> consumerConfigurationValidationErrorMessageExample = input.getConsumerConfigurationValidationErrorMessageExample();\n\tfinal Optional<String> consumerConfigurationValidationErrorMessageExample = input.getConsumerConfigurationValidationErrorMessageExample();\n\tfinal Optional<String> consumerConfigurationValidationErrorMessageExample = input.getConsumerConfigurationValidationErrorMessageExample();\n\tfinal Optional<String> consumerConfigurationValidationErrorMessageExample = input.getConsumerConfigurationValidationErrorMessageExample();\n\tfinal Optional<String> consumerConfigurationValidationErrorMessageExample = input.getConsumerConfigurationValidationErrorMessageExample();\n\tfinal Optional<String> consumerConfigurationValidationErrorMessageExample = input.getConsumerConfigurationValidationErrorMessageExample();\n\tfinal Optional<String> consumerConfigurationValidationErrorMessageExample = input.", "CodeBleu_score": 19.340869493713996}]}
{"instance_id": "dffe85dbb47b", "generation_result": [{"code": "private void insertCustomProperties(Properties props){\n\t\tString customProperties = props.getProperty(\"custom.properties\");\n\tif (customProperties!= null) {\n\t\tProperties customProps = new Properties();\n\t\ttry {\n\t\t\tcustomProps.load(new ByteArrayInputStream(customProperties.getBytes(StandardCharsets.UTF_8)));\n\t\t} catch (IOException e) {\n\t\t\tLOGGER.error(\"Could not load custom properties from configuration string.\", e);\n\t\t}\n\t\tprops.putAll(customProps);\n\t}\n}", "CodeBleu_score": 47.34377738957251}, {"code": "private void insertCustomProperties(Properties props){\n\t\ttry {\n\t\tString customProperties = this.configuration.get(CUSTOM_PROPERTIES);\n\t\tif (!Strings.isNullOrEmpty(customProperties)) {\n\t\t\tProperties customPropertiesProperties = new Properties();\n\t\t\tcustomPropertiesProperties.load(new ByteArrayInputStream(customProperties.getBytes(StandardCharsets.UTF_8)));\n\t\t\tprops.putAll(customPropertiesProperties);\n\t\t}\n\t} catch (IOException e) {\n\t\tlogger.error(\"Failed to load custom properties from configuration string\", e);\n\t}\n}", "CodeBleu_score": 50.010824188601454}, {"code": "private void insertCustomProperties(Properties props){\n\t\ttry {\n\t\tif (!Strings.isNullOrEmpty(props.getProperty(\"custom_properties\"))) {\n\t\t\tString customProperties = props.getProperty(\"custom_properties\");\n\t\t\tProperties customPropertiesProperties = new Properties();\n\t\t\tcustomPropertiesProperties.load(new ByteArrayInputStream(customProperties.getBytes(StandardCharsets.UTF_8)));\n\t\t\tprops.putAll(customPropertiesProperties);\n\t\t}\n\t} catch (IOException e) {\n\t\tLOGGER.error(\"Failed to load custom properties from configuration string\", e);\n\t}\n}", "CodeBleu_score": 48.76917358293827}]}
{"instance_id": "ea146a7bc30c", "generation_result": [{"code": "public void write(List<RawMessageEvent> entries) throws MessageQueueException{\n\t\tlong totalBytes = 0;\n\tfor (RawMessageEvent entry : entries) {\n\t\tif (entry == null) {\n\t\t\tcontinue;\n\t\t}\n\t\ttotalBytes += entry.getMessage().length();\n\t\ttry {\n\t\t\tjournal.write(entry);\n\t\t} catch (MessageQueueException e) {\n\t\t\tthrow new MessageQueueException(\"Could not write message to journal\", e);\n\t\t}\n\t}\n\twrittenMessages.addAndGet(entries.size());\n\twrittenBytes.addAndGet(totalBytes);\n}", "CodeBleu_score": 18.440734051338175}, {"code": "public void write(List<RawMessageEvent> entries) throws MessageQueueException{\n\t\tfinal long messageBytes = entries.stream().mapToLong(RawMessageEvent::getMessageBytes).sum();\n\tfinal long messageCount = entries.stream().filter(Objects::nonNull).count();\n\ttry {\n\t\tif (messageCount > 0) {\n\t\t\tfinal Journal.JournalEntry[] journalEntries = entries.stream().filter(Objects::nonNull).map(journalEntryMapper).toArray(Journal.JournalEntry[]::new);\n\t\t\tjournal.write(journalEntries);\n\t\t\tmessagesWritten.addAndGet(messageCount);\n\t\t\tbytesWritten.addAndGet(messageBytes);\n\t\t}\n\t} catch (MessageQueueException e) {\n\t\tif (e.getCause() instanceof ExecutionException && e.getCause().getCause() instanceof RetryException) {\n\t\t\tfinal RetryException retryException = (RetryException) e.getCause().getCause();\n\t\t\tfinal Throwable cause = retryException.getCause();\n\t\t\tif (cause instanceof MessageQueueException) {\n\t\t\t\tthrow (MessageQueueException) cause;\n\t\t\t}\n\t\t}\n\t\tthrow e;\n\t}\n}", "CodeBleu_score": 38.493548819153034}, {"code": "public void write(List<RawMessageEvent> entries) throws MessageQueueException{\n\t\tlong bytes = entries.stream().filter(Objects::nonNull).mapToLong(RawMessageEvent::getMessageBytes).sum();\n\tlong messages = entries.stream().filter(Objects::nonNull).count();\n\ttry {\n\t\tretryer.call(new Callable<Void>() {\n\t\t\t@Override\n\t\t\tpublic Void call() throws Exception {\n\t\t\t\tjournal.write(entries);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t\twrittenMessages.addAndGet(messages);\n\t\twrittenBytes.addAndGet(bytes);\n\t\treturn;\n\t} catch (RetryException e) {\n\t\tthrow new MessageQueueException(\"Failed to write to journal\", e);\n\t}\n}", "CodeBleu_score": 28.368781764631894}]}
{"instance_id": "944e77614042", "generation_result": [{"code": "public void acknowledge(List<Message> messages){\n\t}", "CodeBleu_score": 4.565461993424478}, {"code": "public void acknowledge(List<Message> messages){\n\t\t// TODO: implement\n}", "CodeBleu_score": 4.565461993424478}, {"code": "public void acknowledge(List<Message> messages){\n\t\tOptional<Long> maxAckId = messages.stream()\n\t\t\t.map(Message::getQueueId)\n\t\t\t.filter(id -> id!= null)\n\t\t\t.map(id -> id.longValue())\n\t\t\t.max(Long::compare);\n\n\tif (maxAckId.isPresent()) {\n\t\tjournal.acknowledge(maxAckId.get());\n\t}\n\n\tmetrics.acknowledgedMessages.mark(messages.size());\n}", "CodeBleu_score": 44.05866425692082}]}
{"instance_id": "981280879490", "generation_result": [{"code": "private void registerLegacyMetrics(){\n\t\tMetricFilter filter = new MetricFilter() {\n\t\t@Override\n\t\tpublic boolean matches(MetricName name, Metric metric) {\n\t\t\treturn name.getName().startsWith(LocalKafkaJournal.class.getName());\n\t\t}\n\t};\n\tfor (MetricName name : metricRegistry.getNames()) {\n\t\tMetric metric = metricRegistry.getMetrics().get(name);\n\t\tif (filter.matches(name, metric)) {\n\t\t\tString legacyName = name.getName().replaceFirst(LocalKafkaJournal.class.getName(), \"kafka.server.KafkaServer\");\n\t\t\ttry {\n\t\t\t\tmetricRegistry.register(legacyName, metric);\n\t\t\t} catch (Exception e) {\n\t\t\t\tLOGGER.warn(\"Failed to register legacy metric {} with name {}: {}\", metric, name, e.getMessage());\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 42.20749042432884}, {"code": "private void registerLegacyMetrics(){\n\t}", "CodeBleu_score": 1.0472453922148197}, {"code": "private void registerLegacyMetrics(){\n\t\tfinal MetricFilter filter = new MetricFilter() {\n\t\t@Override\n\t\tpublic boolean matches(final String name, final Metric metric) {\n\t\t\treturn name.startsWith(\"LocalKafkaJournal\");\n\t\t}\n\t};\n\tfinal MetricRegistry registry = this.metricRegistry;\n\tfinal MetricFilter legacyFilter = new MetricFilter() {\n\t\t@Override\n\t\tpublic boolean matches(final String name, final Metric metric) {\n\t\t\treturn name.startsWith(\"kafka.server.KafkaServer\");\n\t\t}\n\t};\n\tfinal MetricRegistry legacyRegistry = this.legacyMetricRegistry;\n\tfinal List<Metric> metrics = registry.getMetrics(filter);\n\tfor (final Metric metric : metrics) {\n\t\tfinal String metricName = metric.name();\n\t\tfinal String legacyMetricName = metricName.replaceFirst(\"LocalKafkaJournal\", \"kafka.server.KafkaServer\");\n\t\ttry {\n\t\t\tlegacyRegistry.register(legacyMetricName, metric);\n\t\t} catch (final Exception e) {\n\t\t\tLOGGER.warn(\"Failed to register metric {} under name {}. This is likely because the metric is already registered. Original metric name: {}. Legacy metric name: {}.\", metricName, legacyMetricName, metricName, legacyMetricName);\n\t\t}\n\t}\n}", "CodeBleu_score": 32.971220188976844}]}
{"instance_id": "3ca34bfd2d64", "generation_result": [{"code": "private Timer registerHdrTimer(MetricRegistry metricRegistry, final String metricName){\n\t\ttry {\n\t\treturn metricRegistry.timer(metricName);\n\t} catch (IllegalArgumentException e) {\n\t\treturn metricRegistry.getTimers().get(metricName);\n\t}\n}", "CodeBleu_score": 19.461983845320084}, {"code": "private Timer registerHdrTimer(MetricRegistry metricRegistry, final String metricName){\n\t\tTimer timer;\n\ttry {\n\t\ttimer = metricRegistry.timer(metricName);\n\t} catch (IllegalArgumentException e) {\n\t\ttimer = metricRegistry.timer(name(metricName, \"hdr\"));\n\t}\n\treturn timer;\n}", "CodeBleu_score": 34.16916063047593}, {"code": "private Timer registerHdrTimer(MetricRegistry metricRegistry, final String metricName){\n\t\ttry {\n\t\treturn metricRegistry.timer(metricName);\n\t} catch (IllegalArgumentException e) {\n\t\treturn metricRegistry.getTimers().get(metricName);\n\t}\n}", "CodeBleu_score": 19.461983845320084}]}
{"instance_id": "e1d07a1fa986", "generation_result": [{"code": "private void registerUncommittedGauge(MetricRegistry metricRegistry, String name){\n\t}", "CodeBleu_score": 6.875720524416663}, {"code": "private void registerUncommittedGauge(MetricRegistry metricRegistry, String name){\n\t\ttry {\n\t\tmetricRegistry.register(name, new Gauge<Long>() {\n\t\t\t@Override\n\t\t\tpublic Long getValue() {\n\t\t\t\tlong logEndOffset = logManager.getLogEndOffset();\n\t\t\t\tlong logStartOffset = logManager.getLogStartOffset();\n\t\t\t\tlong committedOffset = logManager.getCommittedOffset();\n\t\t\t\tif (committedOffset == BrokerState.DEFAULT_OFFSET_VALUE) {\n\t\t\t\t\treturn logEndOffset - logStartOffset;\n\t\t\t\t} else {\n\t\t\t\t\treturn logEndOffset - committedOffset;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t} catch (IllegalArgumentException e) {\n\t\t// Ignore, since this is not critical\n\t}\n}", "CodeBleu_score": 41.16458617128861}, {"code": "private void registerUncommittedGauge(MetricRegistry metricRegistry, String name){\n\ttry {\nmetricRegistry.register(name, new Gauge<Long>() {\n@Override\npublic Long getValue() {\nreturn log.getUncommittedMessages();\n}\n});\n} catch (IllegalArgumentException e) {\n}\n}", "CodeBleu_score": 24.180751924973503}]}
{"instance_id": "8b30a387069f", "generation_result": [{"code": "private long flushMessages(List<Message> messages, long payloadSize){\n\t//    if (messages.isEmpty()) {\n//        LOG.debug(\"Nothing to write.\");\n//        return -1;\n//    }\n//\n//    LOG.debug(\"Writing {} messages with {} bytes of payload.\", messages.size(), payloadSize);\n//    final ByteBufferMessageSet messageSet = new ByteBufferMessageSet(messages);\n//\n//    final long start = System.nanoTime();\n//    final long lastOffset = logManager.appendMessageSet(messageSet);\n//    final long duration = System.nanoTime() - start;\n//\n//    LOG.debug(\"Wrote {} messages with {} bytes of payload in {} ms.\", messages.size(), payloadSize,\n//        MILLISECONDS.convert(duration, NANOSECONDS));\n//\n//    metrics.messagesWritten.mark(messages.size());\n//\n//    return lastOffset;\n    return -1;\n}", "CodeBleu_score": 5.429867208174962}, {"code": "private long flushMessages(List<Message> messages, long payloadSize){\n\t\tif (messages.isEmpty()) {\n\t\tLOG.debug(\"No messages to flush\");\n\t\treturn -1;\n\t}\n\tLOG.debug(\"Flushing {} messages of size {} to {}\", messages.size(), payloadSize, log.getName());\n\tByteBufferMessageSet messageSet = new ByteBufferMessageSet(messages);\n\tLOG.debug(\"Message set size: {}\", messageSet.size());\n\ttry {\n\t\tlong lastOffset = log.append(messageSet);\n\t\tLOG.debug(\"Wrote {} messages to log {} at offset {}\", messages.size(), log.getName(), lastOffset);\n\t\treturn lastOffset;\n\t} catch (KafkaException e) {\n\t\tthrow new UncheckedIOException(e);\n\t}\n}", "CodeBleu_score": 43.28854465321589}, {"code": "private long flushMessages(List<Message> messages, long payloadSize){\n\t\tif (messages.isEmpty()) {\n\t\tLOGGER.debug(\"No messages to flush\");\n\t\treturn -1;\n\t}\n\tLOGGER.debug(\"Writing {} messages to log\", messages.size());\n\tfinal MessageSet messageSet = new ByteBufferMessageSet(messages);\n\tLOGGER.debug(\"Message set size: {}\", messageSet.sizeInBytes());\n\tlong lastOffset = logManager.append(messageSet);\n\tLOGGER.debug(\"Wrote {} messages to log at offset {}\", messages.size(), lastOffset);\n\treturn lastOffset;\n}", "CodeBleu_score": 34.957922079673736}]}
{"instance_id": "ee338b61e75d", "generation_result": [{"code": "private void closeKafkaAdminClient(Long clusterPhyId) {\n\t\tILog log = LogFactory.getLog(this.getClass());\n\tlog.info(\"close kafka admin client start, clusterPhyId:\" + clusterPhyId);\n\tList<AdminClient> adminClientList = this.adminClientMap.get(clusterPhyId);\n\tif (adminClientList == null) {\n\t\tlog.info(\"close kafka admin client end, clusterPhyId:\" + clusterPhyId);\n\t\treturn;\n\t}\n\ttry {\n\t\tfor (AdminClient adminClient : adminClientList) {\n\t\t\tadminClient.close();\n\t\t}\n\t\tlog.info(\"close kafka admin client success, clusterPhyId:\" + clusterPhyId);\n\t} catch (Exception e) {\n\t\tlog.error(\"close kafka admin client error, clusterPhyId:\" + clusterPhyId, e);\n\t} finally {\n\t\tthis.adminClientMap.remove(clusterPhyId);\n\t\tlog.info(\"close kafka admin client end, clusterPhyId:\" + clusterPhyId);\n\t}\n}", "CodeBleu_score": 45.71035335358884}, {"code": "private void closeKafkaAdminClient(Long clusterPhyId) {\n\t\tILog logger = LogFactory.getLog(getClass());\n\tif (this.clusterPhyIdToKafkaAdminClientMap.containsKey(clusterPhyId)) {\n\t\tList<AdminClient> adminClientList = this.clusterPhyIdToKafkaAdminClientMap.get(clusterPhyId);\n\t\tlogger.info(\"Start closing Kafka AdminClient instances for cluster ID \" + clusterPhyId);\n\t\tfor (AdminClient adminClient : adminClientList) {\n\t\t\ttry {\n\t\t\t\tadminClient.close();\n\t\t\t} catch (Exception e) {\n\t\t\t\tlogger.error(\"Error while closing Kafka AdminClient instance for cluster ID \" + clusterPhyId + \". Error: \" + e.getMessage());\n\t\t\t}\n\t\t}\n\t\tlogger.info(\"Successfully closed Kafka AdminClient instances for cluster ID \" + clusterPhyId);\n\t}\n}", "CodeBleu_score": 39.69644575619811}, {"code": "private void closeKafkaAdminClient(Long clusterPhyId) {\n\t\tILog log = LogFactory.getLog(getClass());\n\tsynchronized (this.adminClientMap) {\n\t\tList<AdminClient> adminClients = this.adminClientMap.get(clusterPhyId);\n\t\tif (adminClients!= null) {\n\t\t\tlog.info(\"Closing Kafka AdminClient instances for cluster ID \" + clusterPhyId);\n\t\t\tfor (AdminClient adminClient : adminClients) {\n\t\t\t\ttry {\n\t\t\t\t\tadminClient.close();\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tlog.error(\"Failed to close Kafka AdminClient instance for cluster ID \" + clusterPhyId, e);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.adminClientMap.remove(clusterPhyId);\n\t\t}\n\t}\n}", "CodeBleu_score": 35.112970195060065}]}
{"instance_id": "6f0b935b971c", "generation_result": [{"code": "private boolean closeAdminClientList(Long clusterPhyId, List<AdminClient> adminClientList){\n\t\tboolean success = true;\n\tif (adminClientList!= null) {\n\t\tfor (AdminClient adminClient : adminClientList) {\n\t\t\ttry {\n\t\t\t\tadminClient.close(Duration.ofSeconds(30));\n\t\t\t} catch (Exception e) {\n\t\t\t\tILog log = LogFactory.getLog(getClass());\n\t\t\t\tlog.error(\"close adminClient error, clusterPhyId: {}, adminClient: {}\", clusterPhyId, adminClient, e);\n\t\t\t\tsuccess = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn success;\n}", "CodeBleu_score": 57.31563052912977}, {"code": "private boolean closeAdminClientList(Long clusterPhyId, List<AdminClient> adminClientList){\n\t\tif (adminClientList == null) {\n\t\treturn true;\n\t}\n\tboolean success = true;\n\tfor (AdminClient adminClient : adminClientList) {\n\t\ttry {\n\t\t\tadminClient.close(Duration.ofSeconds(30));\n\t\t} catch (Exception e) {\n\t\t\tILog log = LogFactory.getLog(getClass());\n\t\t\tlog.error(String.format(\"Failed to close admin client for cluster %d\", clusterPhyId), e);\n\t\t\tsuccess = false;\n\t\t}\n\t}\n\treturn success;\n}", "CodeBleu_score": 62.79410227183495}, {"code": "private boolean closeAdminClientList(Long clusterPhyId, List<AdminClient> adminClientList){\n\t\tboolean success = true;\n\tif (adminClientList!= null) {\n\t\tfor (AdminClient adminClient : adminClientList) {\n\t\t\ttry {\n\t\t\t\tadminClient.close(Duration.ofSeconds(30));\n\t\t\t} catch (Exception e) {\n\t\t\t\tILog log = LogFactory.getLog(getClass());\n\t\t\t\tlog.error(\"Failed to close AdminClient for clusterPhyId: {}, error: {}\", clusterPhyId, e.getMessage());\n\t\t\t\tsuccess = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn success;\n}", "CodeBleu_score": 56.10270934180343}]}
{"instance_id": "b5475aa94c1a", "generation_result": [{"code": "public void stop() {\n\t\ttry {\n\t\tif (app!= null) {\n\t\t\tapp.stop();\n\t\t\tint i = 0;\n\t\t\twhile (app!= null && i < 5) {\n\t\t\t\ti++;\n\t\t\t\tThread.sleep(1000);\n\t\t\t}\n\t\t\tif (app!= null) {\n\t\t\t\tthrow new IllegalStateException(\"Application did not stop\");\n\t\t\t}\n\t\t}\n\t}\n\tcatch (InterruptedException e) {\n\t\tthrow new IllegalStateException(\"Thread interrupted while waiting for app to stop\");\n\t}\n}", "CodeBleu_score": 39.2799597406181}, {"code": "public void stop() {\n\t\tif (app!= null) {\n\t\tapp.stop();\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000);\n\t\t\t}\n\t\t\tcatch (InterruptedException e) {\n\t\t\t\tthrow new IllegalStateException(\"Interrupted while waiting for application to stop\", e);\n\t\t\t}\n\t\t\tif (app.isRunning()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tapp = null;\n\t}\n}", "CodeBleu_score": 43.251428302519635}, {"code": "public void stop() {\n\t\t//TODO implement\n}", "CodeBleu_score": 1.3996109054545696}]}
{"instance_id": "5da405de9e3d", "generation_result": [{"code": "static EurekaServerRunner startEurekaServer(Class config){\n\t\treturn startEurekaServer(config, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null", "CodeBleu_score": 7.411266054451837}, {"code": "static EurekaServerRunner startEurekaServer(Class config){\n\t\treturn startEurekaServer(config, null, null, null);\n}", "CodeBleu_score": 7.410840522680531}, {"code": "static EurekaServerRunner startEurekaServer(Class config){\n\t\tEurekaServerRunner eurekaServerRunner = new EurekaServerRunner(config);\n\teurekaServerRunner.enableTLS();\n\teurekaServerRunner.setKeystore(new File(\"src/test/resources/keystore.jks\"), \"password\");\n\teurekaServerRunner.setTruststore(new File(\"src/test/resources/keystore.jks\"), \"password\");\n\teurekaServerRunner.start();\n\treturn eurekaServerRunner;\n}", "CodeBleu_score": 36.024314323683164}]}
{"instance_id": "19cbf70751b2", "generation_result": [{"code": "static EurekaClientRunner startService(EurekaServerRunner server, Class config){\n\t\tEurekaClientRunner runner = new EurekaClientRunner(config, server, \"testservice\");\n\trunner.enableTLS();\n\trunner.start();\n\treturn runner;\n}", "CodeBleu_score": 61.384196950175664}, {"code": "static EurekaClientRunner startService(EurekaServerRunner server, Class config){\n\t\tEurekaClientRunner runner = new EurekaClientRunner(config, server.getEurekaServerConfig(), \"testservice\");\n\trunner.enableTLS();\n\trunner.start();\n\treturn runner;\n}", "CodeBleu_score": 46.679643327998335}, {"code": "static EurekaClientRunner startService(EurekaServerRunner server, Class config){\n\t\treturn startService(server, config, \"testservice\");\n}", "CodeBleu_score": 20.70353119577279}]}
{"instance_id": "d6ccff5c0536", "generation_result": [{"code": "static void createCertificates() throws Exception{\n\t//    final String CA_NAME = \"ca\";", "CodeBleu_score": 1.4031372452271982}, {"code": "static void createCertificates() throws Exception{\n\t//    KeyTool keyTool = new KeyTool();\n    KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n    File keyStoreFile = new File(\"target/keytool.jks\");\n    try (OutputStream outputStream = new FileOutputStream(keyStoreFile)) {\n        keyStore.load(outputStream, \"test\".toCharArray());\n        keyStore.store(outputStream, \"test\".toCharArray());\n    }\n    KeyStore keyStore2 = KeyStore.getInstance(\"JKS\");\n    File keyStoreFile2 = new File(\"target/keytool2.jks\");\n    try (OutputStream outputStream = new FileOutputStream(keyStoreFile2)) {\n        keyStore2.load(outputStream, \"test\".toCharArray());\n        keyStore2.store(outputStream, \"test\".toCharArray());\n    }\n    KeyTool keyTool = new KeyTool(keyStore);\n    KeyTool keyTool2 = new KeyTool(keyStore2);\n    keyTool.createCACertificate(\"CN=Test CA\");\n    keyTool.createServerCertificate(\"CN=Test Server\");\n    keyTool.createClientCertificate(\"CN=Test Client\");\n    keyTool2.createCACertificate(\"CN=Test CA2\");\n    keyTool2.createClientCertificate(\"CN=Test Client2\");\n    keyTool.saveCert(\"target/ca.crt\");\n    keyTool.saveKeyAndCert(\"target/ca.key\", \"target/ca.crt\");\n    keyTool.saveCert(\"target/server.crt\");\n    keyTool.saveKeyAndCert(\"target/server.key\", \"target/server.crt\");\n    keyTool.saveCert(\"target/client.crt\");\n    keyTool.saveKeyAndCert(\"target/client.key\", \"target/client.crt\");\n    keyTool2.saveCert(\"target/ca2.crt\");\n    keyTool2.saveKeyAndCert(\"target/ca2.key\", \"target/ca2.crt\");\n    keyTool2.saveCert(\"target/client2.crt\");\n    keyTool2.saveKeyAndCert(\"target/client2.key\", \"target/client2.crt\");\n}", "CodeBleu_score": 30.882792925828728}, {"code": "static void createCertificates() throws Exception{\n\t\tif (createCertificates.log.isInfoEnabled())\n\t\tcreateCertificates.log.info(\"Creating certificates\");\n\tcreateCertificates.keyTool.createCertificateAuthority(createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates.ca1, createCertificates", "CodeBleu_score": 8.622906678188821}]}
{"instance_id": "d2eeaa6a6bbe", "generation_result": [{"code": "private void assertInSeconds(BooleanSupplier assertion, int seconds){\n\t\tlong startTime = System.currentTimeMillis();\n\tlong timeLimit = startTime + (seconds * 1000);\n\twhile ((System.currentTimeMillis() < timeLimit) && (!assertion.getAsBoolean())) {\n\t\ttry {\n\t\t\tThread.sleep(100);\n\t\t} catch (InterruptedException e) {\n\t\t\tThread.currentThread().interrupt();\n\t\t}\n\t}\n\tif (!assertion.getAsBoolean()) {\n\t\tthrow new RuntimeException(\"Assertion failed after \" + seconds + \" seconds.\");\n\t}\n}", "CodeBleu_score": 35.31767953525495}, {"code": "private void assertInSeconds(BooleanSupplier assertion, int seconds){\n\t\tlong startTime = System.currentTimeMillis();\n\tlong timeLimit = startTime + (seconds * 1000);\n\twhile (true) {\n\t\tif (assertion.getAsBoolean()) {\n\t\t\treturn ;\n\t\t}\n\t\tif (System.currentTimeMillis() >= timeLimit) {\n\t\t\tthrow new RuntimeException(\"Assertion failed after \" + seconds + \" seconds\");\n\t\t}\n\t\ttry {\n\t\t\tThread.sleep(100);\n\t\t}\n\t\tcatch (InterruptedException e) {\n\t\t\tThread.currentThread().interrupt();\n\t\t\tthrow new RuntimeException(\"Assertion failed after \" + seconds + \" seconds\");\n\t\t}\n\t}\n}", "CodeBleu_score": 38.31422021300387}, {"code": "private void assertInSeconds(BooleanSupplier assertion, int seconds){\n\t\tlong startTime = System.currentTimeMillis();\n\tlong timeLimit = startTime + (seconds * 1000);\n\twhile (System.currentTimeMillis() < timeLimit) {\n\t\tif (assertion.getAsBoolean()) {\n\t\t\treturn;\n\t\t}\n\t}\n\tthrow new RuntimeException(\"Assertion failed after \" + seconds + \" seconds\");\n}", "CodeBleu_score": 46.60102181974556}]}
{"instance_id": "6bb261b0e4e1", "generation_result": [{"code": "public X509Certificate createCert(KeyPair keyPair, String ca) throws Exception{\n\t\tX509Certificate cert = null;\n\tKeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"RSA\");\n\tkeyGen.initialize(2048, new SecureRandom());\n\tKeyPair pair = keyGen.generateKeyPair();\n\tX509CertificateHolder holder = null;\n\ttry {\n\t\tholder = createCertHolder(pair, ca);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\tJcaX509CertificateConverter converter = new JcaX509CertificateConverter();\n\tcert = converter.getCertificate(holder);\n\treturn cert;\n}", "CodeBleu_score": 31.555573317530623}, {"code": "public X509Certificate createCert(KeyPair keyPair, String ca) throws Exception{\n\t\tX500Name dn = new X500Name(ca);\n\tX509CertificateHolder holder = new JcaX509CertificateHolder(new JcaX509v3CertificateBuilder(dn, BigInteger.valueOf(System.currentTimeMillis()), new Date(System.currentTimeMillis()), new Date(System.currentTimeMillis() + 365 * 24 * 60 * 60 * 1000), dn, keyPair.getPublic()).addExtension(Extension.basicConstraints, true, new BasicConstraints(true)).addExtension(Extension.keyUsage, true, new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyCertSign | KeyUsage.cRLSign)).addExtension(Extension.subjectAlternativeName, false, new GeneralNames(new GeneralName(GeneralName.rfc822Name, \"\"))).build());\n\tContentSigner signer = new JcaContentSignerBuilder(\"SHA256WithRSAEncryption\").build(keyPair.getPrivate());\n\tX509Certificate cert = new JcaX509CertificateConverter().setProvider(\"BC\").getCertificate(holder);\n\tcert.verify(keyPair.getPublic());\n\treturn cert;\n}", "CodeBleu_score": 35.85266845045284}, {"code": "public X509Certificate createCert(KeyPair keyPair, String ca) throws Exception{\n\t\t// Create a key pair generator\n\tKeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(\"RSA\");\n\n\t// Initialize the key pair generator with a secure random number generator\n\tSecureRandom random = SecureRandom.getInstance(\"SHA1PRNG\");\n\tkeyPairGen.initialize(1024, random);\n\n\t// Generate a key pair\n\tKeyPair keyPair = keyPairGen.generateKeyPair();\n\n\t// Create a certificate builder\n\tX509v3CertificateBuilder certificateBuilder = new JcaX509v3CertificateBuilder(new X500Name(ca), new BigInteger(\"1\"), new Date(), new Date(), new X500Name(\"CN=Example\"), keyPair.getPublic());\n\n\t// Add key usage and basic constraints extensions to the certificate\n\tKeyUsage keyUsage = new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyEncipherment);\n\tcertificateBuilder.addExtension(Extension.keyUsage, false, keyUsage);\n\tBasicConstraints basicConstraints = new BasicConstraints(true);\n\tcertificateBuilder.addExtension(Extension.basicConstraints, true, basicConstraints);\n\n\t// Sign the certificate with the private key\n\tContentSigner contentSigner = new JcaContentSignerBuilder(\"SHA256withRSA\").build(keyPair.getPrivate());\n\tX509CertificateHolder certificateHolder = certificateBuilder.build(contentSigner);\n\n\t// Convert the certificate holder to an X509 certificate\n\tJcaX509CertificateConverter converter = new JcaX509CertificateConverter();\n\tX509Certificate x509Certificate = converter.getCertificate(certificateHolder);\n\n\treturn x509Certificate;\n}", "CodeBleu_score": 36.09950326275477}]}
{"instance_id": "e4f9c32a7c9e", "generation_result": [{"code": "EurekaHttpClient getEurekaHttpClient(){\n\t\treturn null;\n}", "CodeBleu_score": 0.7284935063254198}, {"code": "EurekaHttpClient getEurekaHttpClient(){\n\t\treturn eurekaHttpClient;\n}", "CodeBleu_score": 2.290994103849449}, {"code": "EurekaHttpClient getEurekaHttpClient(){\n\t\treturn eurekaHttpClient;\n}", "CodeBleu_score": 2.290994103849449}]}
{"instance_id": "5c404f04e34c", "generation_result": [{"code": "public List<String> getServices(){\n\t\tList<String> services = new ArrayList<>();\n\tList<Application> applications = eurekaClient.getApplications(false).getRegisteredApplications();\n\tif (applications!= null) {\n\t\tfor (Application application : applications) {\n\t\t\tservices.addAll(application.getInstancesByVipAddress(EurekaClientConfig.DEFAULT_REGION, false).keySet());\n\t\t}\n\t}\n\tCollections.sort(services);\n\treturn services;\n}", "CodeBleu_score": 43.19097957827937}, {"code": "public List<String> getServices(){\n\t\tList<String> services = new ArrayList<String>();\n\tList<Application> applications = eurekaClient.getApplications().getRegisteredApplications();\n\tif (applications == null || applications.size() == 0) {\n\t\treturn services;\n\t}\n\tfor (Application application : applications) {\n\t\tfor (InstanceInfo instanceInfo : application.getInstances()) {\n\t\t\tString serviceName = instanceInfo.getAppName().toLowerCase();\n\t\t\tif (!services.contains(serviceName)) {\n\t\t\t\tservices.add(serviceName);\n\t\t\t}\n\t\t}\n\t}\n\treturn services;\n}", "CodeBleu_score": 41.31406397901915}, {"code": "public List<String> getServices(){\n\t\tList<String> serviceNames = new ArrayList<>();\n\tApplications applications = eurekaClient.getApplications();\n\tif (applications.getRegisteredApplications().isEmpty()) {\n\t\treturn serviceNames;\n\t}\n\tfor (Application application : applications.getRegisteredApplications()) {\n\t\tfor (InstanceInfo instanceInfo : application.getInstances()) {\n\t\t\tserviceNames.add(instanceInfo.getAppName().toLowerCase());\n\t\t}\n\t}\n\tCollections.sort(serviceNames);\n\treturn serviceNames;\n}", "CodeBleu_score": 46.93582217648744}]}
{"instance_id": "a21251337ade", "generation_result": [{"code": "void populateHealthContributors(Map<String, HealthContributor> healthContributors){\n\t\tAssert.notNull(healthContributors, \"Health contributors must not be null\");\n\tfor (Map.Entry<String, HealthContributor> entry : healthContributors.entrySet()) {\n\t\tif (entry.getValue() instanceof DiscoveryCompositeHealthContributor) {\n\t\t\tDiscoveryCompositeHealthContributor composite = (DiscoveryCompositeHealthContributor) entry.getValue();\n\t\t\tfor (HealthIndicator indicator : composite.getHealthIndicators()) {\n\t\t\t\tif (!(indicator instanceof EurekaHealthIndicator)) {\n\t\t\t\t\thealthContributors.put(entry.getKey(), indicator);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\thealthContributors.put(entry.getKey(), entry.getValue());\n\t\t}\n\t}\n}", "CodeBleu_score": 46.19419237363566}, {"code": "void populateHealthContributors(Map<String, HealthContributor> healthContributors){\n\t\tfor (Map.Entry<String, HealthContributor> entry : healthContributors.entrySet()) {\n\t\tif (entry.getValue() instanceof DiscoveryCompositeHealthContributor) {\n\t\t\tDiscoveryCompositeHealthContributor composite = (DiscoveryCompositeHealthContributor) entry.getValue();\n\t\t\tfor (HealthIndicator indicator : composite.getHealthIndicators()) {\n\t\t\t\tif (!(indicator instanceof EurekaHealthIndicator)) {\n\t\t\t\t\thealthContributors.put(entry.getKey(), indicator);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\thealthContributors.put(entry.getKey(), entry.getValue());\n\t\t}\n\t}\n}", "CodeBleu_score": 48.8579300196823}, {"code": "void populateHealthContributors(Map<String, HealthContributor> healthContributors){\n\t\tfor (Map.Entry<String, HealthContributor> entry : healthContributors.entrySet()) {\n\t\tif (entry.getValue() instanceof DiscoveryCompositeHealthContributor) {\n\t\t\tDiscoveryCompositeHealthContributor composite = (DiscoveryCompositeHealthContributor) entry.getValue();\n\t\t\tfor (HealthIndicator indicator : composite.getHealthIndicators()) {\n\t\t\t\tif (!(indicator instanceof EurekaHealthIndicator)) {\n\t\t\t\t\thealthContributors.put(entry.getKey(), indicator);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\thealthContributors.put(entry.getKey(), entry.getValue());\n\t\t}\n\t}\n}", "CodeBleu_score": 48.8579300196823}]}
{"instance_id": "998fee829929", "generation_result": [{"code": "public String hello(){\n\t\ttry {\n\t\tURI uri = discoveryClient.getInstances(\"provider-application\").get(0).getUri();\n\t\treturn restTemplate.postForObject(uri, \"hello\", String.class);\n\t} catch (Exception e) {\n\t\tthrow new RuntimeException(\"Could not locate provider-application\", e);\n\t}\n}", "CodeBleu_score": 26.206533577876513}, {"code": "public String hello(){\n\t\tList<ServiceInstance> instances = discoveryClient.getInstances(\"provider-application\");\n\tif (instances.isEmpty()) {\n\t\tthrow new RuntimeException(\"No instances of provider-application were found\");\n\t}\n\tURI uri = instances.get(0).getUri();\n\treturn restTemplate.postForObject(uri + \"/echo\", \"Hello World\", String.class);\n}", "CodeBleu_score": 39.39250098829557}, {"code": "public String hello(){\n\t\treturn \"Hello World\";\n}", "CodeBleu_score": 3.3033266006254953}]}
{"instance_id": "31166ae7d3dc", "generation_result": [{"code": "public String world(){\n\t\treturn \"Hello World\";\n}", "CodeBleu_score": 4.104580956135614}, {"code": "public String world(){\n\t\ttry {\n\t\tServiceInstance serviceInstance = this.loadBalancerClient.choose(\"provider-application\");\n\t\tURI uri = serviceInstance.getUri();\n\t\tString response = this.restTemplate.postForObject(uri + \"/echo\", \"Hello, world!\", String.class);\n\t\treturn response;\n\t}\n\tcatch (Exception e) {\n\t\tthrow new RuntimeException(\"No service instance found for provider-application\", e);\n\t}\n}", "CodeBleu_score": 61.342975764670925}, {"code": "public String world(){\n\t\treturn \"World\";\n}", "CodeBleu_score": 4.104567144612709}]}
{"instance_id": "d7714f9cf0e9", "generation_result": [{"code": "public boolean register(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t\tif (serverMap.containsKey(serviceName)) {\n\t\tSet<Server> servers = serverMap.get(serviceName);\n\t\tservers.add(new Server(ip, port));\n\t} else {\n\t\tSet<Server> servers = Collections.synchronizedSet(new HashSet<>());\n\t\tservers.add(new Server(ip, port));\n\t\tserverMap.put(serviceName, servers);\n\t}\n\treturn true;\n}", "CodeBleu_score": 54.36879271179531}, {"code": "public boolean register(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t\treturn false;\n}", "CodeBleu_score": 17.89610587167149}, {"code": "public boolean register(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t\tif (serverMap.containsKey(serviceName)) {\n\t\tSet<Server> servers = serverMap.get(serviceName);\n\t\tservers.add(new Server(ip, port));\n\t} else {\n\t\tSet<Server> servers = Collections.synchronizedSet(new HashSet<Server>());\n\t\tservers.add(new Server(ip, port));\n\t\tserverMap.put(serviceName, servers);\n\t}\n\treturn true;\n}", "CodeBleu_score": 51.160487789330176}]}
{"instance_id": "45f91ed1c560", "generation_result": [{"code": "public boolean deregister(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t\tif (serverMap.containsKey(serviceName)) {\n\t\tSet<Server> servers = serverMap.get(serviceName);\n\t\tfor (Server server : servers) {\n\t\t\tif (server.getIp().equals(ip) && server.getPort().equals(port)) {\n\t\t\t\tservers.remove(server);\n\t\t\t\tlogger.info(\"Deregistered server: \" + server);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 39.41558919747585}, {"code": "public boolean deregister(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t\t// TODO: Implement this function\n\treturn true;\n}", "CodeBleu_score": 17.11610163111535}, {"code": "public boolean deregister(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t\tLogger logger = LoggerFactory.getLogger(Server.class);\n\tlogger.info(\"Deregistering server: \" + serviceName + \", \" + ip + \", \" + port);\n\tif (serverMap.containsKey(serviceName)) {\n\t\tSet<Server> serverSet = serverMap.get(serviceName);\n\t\tfor (Server server : serverSet) {\n\t\t\tif (server.getIp().equals(ip) && server.getPort() == port) {\n\t\t\t\tserverSet.remove(server);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 47.17489005684805}]}
{"instance_id": "f671d9564e40", "generation_result": [{"code": "public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry){\n\t\tMap<String, Object> attributes = metadata.getAnnotationAttributes(RibbonClients.class.getName());\n\tif (attributes!= null) {\n\t\tString defaultConfiguration = (String) attributes.get(\"defaultConfiguration\");\n\t\tif (StringUtils.hasText(defaultConfiguration)) {\n\t\t\tString name = \"ribbonClientConfiguration.\" + defaultConfiguration;\n\t\t\tBeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(RibbonClientConfiguration.class);\n\t\t\tbuilder.addConstructorArgValue(defaultConfiguration);\n\t\t\tregistry.registerBeanDefinition(name, builder.getBeanDefinition());\n\t\t}\n\t}\n}", "CodeBleu_score": 47.58588978308494}, {"code": "public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry){\n\t\tMap<String, Object> attributes = metadata.getAnnotationAttributes(RibbonClients.class.getName());\n\tif (attributes!= null) {\n\t\tString defaultConfiguration = (String) attributes.get(\"defaultConfiguration\");\n\t\tif (StringUtils.hasText(defaultConfiguration)) {\n\t\t\tString name = \"ribbonClientConfiguration\" + defaultConfiguration;\n\t\t\tBeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(RibbonClientConfiguration.class);\n\t\t\tbuilder.addConstructorArgValue(defaultConfiguration);\n\t\t\tregistry.registerBeanDefinition(name, builder.getBeanDefinition());\n\t\t}\n\t}\n}", "CodeBleu_score": 46.770186704135455}, {"code": "public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry){\n\t\tMap<String, Object> attributes = metadata.getAnnotationAttributes(RibbonClients.class.getName());\n\tif (attributes!= null) {\n\t\tfor (Map.Entry<String, Object> entry : attributes.entrySet()) {\n\t\t\tif (entry.getKey().equals(\"defaultConfiguration\")) {\n\t\t\t\tregisterDefaultClientConfiguration(registry, entry.getValue());\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 42.645688933498974}]}
{"instance_id": "dbc92d8f146f", "generation_result": [{"code": "public <T> ServiceInstance choose(String serviceId, Request<T> request) {\n\t\tLoadBalancerRequest loadBalancerRequest = new LoadBalancerRequest(request.get().getClass(), serviceId, request.get());\n\treturn choose(serviceId, loadBalancerRequest);\n}", "CodeBleu_score": 34.75358027095676}, {"code": "public <T> ServiceInstance choose(String serviceId, Request<T> request) {\n\t\tILoadBalancer loadBalancer = this.loadBalancerClient.getLoadBalancer(serviceId);\n\tif (loadBalancer == null) {\n\t\treturn null;\n\t}\n\tServer server = loadBalancer.chooseServer(request);\n\tif (server == null) {\n\t\treturn null;\n\t}\n\treturn new TutuServiceInstance(serviceId, server.getHost(), server.getPort());\n}", "CodeBleu_score": 60.1271218638942}, {"code": "public <T> ServiceInstance choose(String serviceId, Request<T> request) {\n\t\tILoadBalancer loadBalancer = loadBalancerClient.getLoadBalancer(serviceId);\n\tif (loadBalancer == null) {\n\t\treturn null;\n\t}\n\tServer server = loadBalancer.chooseServer(request);\n\tif (server == null) {\n\t\treturn null;\n\t}\n\treturn new TutuServiceInstance(server);\n}", "CodeBleu_score": 44.42533203919559}]}
{"instance_id": "362eadbd3c5e", "generation_result": [{"code": "public URI reconstructURI(ServiceInstance server, URI original) {\n\t\tString serviceId = server.getServiceId();\n\tString host = server.getHost();\n\tint port = server.getPort();\n\tString scheme = original.getScheme();\n\tString path = original.getPath();\n\tString query = original.getQuery();\n\tString userInfo = original.getUserInfo();\n\tString newUri = null;\n\ttry {\n\t\tnewUri = new URI(scheme, userInfo, host, port, path, query, null).toString();\n\t}\n\tcatch (URISyntaxException e) {\n\t\tthrow new RuntimeException(e);\n\t}\n\treturn URI.create(newUri);\n}", "CodeBleu_score": 36.62065375800823}, {"code": "public URI reconstructURI(ServiceInstance server, URI original) {\n\t\tString originalHost = original.getHost();\n\tString originalScheme = original.getScheme();\n\tString originalPort = String.valueOf(original.getPort());\n\tString originalPath = original.getPath();\n\tString originalQuery = original.getQuery();\n\tString originalFragment = original.getFragment();\n\n\tString host = server.getHost();\n\tString port = String.valueOf(server.getPort());\n\tString scheme = server.getScheme();\n\tString path = originalPath;\n\tString query = originalQuery;\n\tString fragment = originalFragment;\n\n\tif (StrUtil.isNotBlank(host) && StrUtil.isNotBlank(port)) {\n\t\tif (StrUtil.isNotBlank(originalScheme) && StrUtil.isNotBlank(originalPort)) {\n\t\t\thost = originalScheme + \"://\" + host + \":\" + port;\n\t\t} else {\n\t\t\thost = \"http://\" + host + \":\" + port;\n\t\t}\n\t}\n\n\tif (StrUtil.isNotBlank(originalPath)) {\n\t\tpath = originalPath;\n\t}\n\n\tif (StrUtil.isNotBlank(originalQuery)) {\n\t\tquery = originalQuery;\n\t}\n\n\tif (StrUtil.isNotBlank(originalFragment)) {\n\t\tfragment = originalFragment;\n\t}\n\n\ttry {\n\t\treturn new URI(host, path, query, fragment);\n\t} catch (URISyntaxException e) {\n\t\tthrow new RuntimeException(e);\n\t}\n}", "CodeBleu_score": 41.64677233002345}, {"code": "public URI reconstructURI(ServiceInstance server, URI original) {\n\t\tURI reconstructed;\n\ttry {\n\t\treconstructed = new URI(original.getScheme(), null, server.getHost(), server.getPort(), original.getPath(), original.getQuery(), null);\n\t}\n\tcatch (URISyntaxException e) {\n\t\tthrow new RuntimeException(e);\n\t}\n\treturn reconstructed;\n}", "CodeBleu_score": 34.77598246268603}]}
{"instance_id": "6801d2b2e4c8", "generation_result": [{"code": "private List<TutuServer> getServer(){\n\t\tString url = tutuDiscoveryProperties.getUrl() + \"/list\";\n\tString result = HttpUtil.get(url);\n\tJSONObject jsonObject = JSON.parseObject(result);\n\tString data = jsonObject.getString(\"data\");\n\tList<TutuServer> list = JSON.parseArray(data, TutuServer.class);\n\treturn list;\n}", "CodeBleu_score": 30.42310459326344}, {"code": "private List<TutuServer> getServer(){\n\t\tString discoveryUrl = tutuDiscoveryProperties.getDiscoveryUrl();\n\tString serviceName = tutuDiscoveryProperties.getServiceName();\n\tString url = discoveryUrl + \"/list?service=\" + serviceName;\n\tString response = HttpUtil.get(url);\n\tlogger.info(\"response: {}\", response);\n\tList<TutuServer> tutuServers = new ArrayList<>();\n\tif (StringUtils.isNotBlank(response)) {\n\t\tJSONObject jsonObject = JSON.parseObject(response);\n\t\tif (jsonObject.containsKey(\"servers\")) {\n\t\t\tJSONArray jsonArray = jsonObject.getJSONArray(\"servers\");\n\t\t\tfor (Object obj : jsonArray) {\n\t\t\t\tJSONObject json = (JSONObject) obj;\n\t\t\t\tString host = json.getString(\"host\");\n\t\t\t\tString port = json.getString(\"port\");\n\t\t\t\ttutuServers.add(new TutuServer(host, port));\n\t\t\t}\n\t\t}\n\t}\n\treturn tutuServers;\n}", "CodeBleu_score": 38.30261880725116}, {"code": "private List<TutuServer> getServer(){\n\t\tString url = tutuDiscoveryProperties.getDiscoveryUrl() + \"/list\";\n\tString response = HttpUtil.get(url);\n\tlogger.info(\"response: {}\", response);\n\tif (response.contains(\"404\")) {\n\t\treturn null;\n\t}\n\tJSONObject json = JSON.parseObject(response);\n\tList<Map<String, String>> list = JSON.parseArray(json.getJSONArray(\"data\").toJSONString(), Map.class);\n\treturn list.stream().map(map -> new TutuServer(map.get(\"ip\"), Integer.parseInt(map.get(\"port\")))).collect(Collectors.toList());\n}", "CodeBleu_score": 42.48395465225328}]}
{"instance_id": "ab2fb77484fd", "generation_result": [{"code": "public Route getMatchingRoute(String path){\n\t\tPathMatcher pathMatcher = new AntPathMatcher();\n\tfor (Map.Entry<String, Route> entry : routes.entrySet()) {\n\t\tString routePattern = entry.getKey();\n\t\tif (pathMatcher.match(routePattern, path)) {\n\t\t\tString targetPath = path.replaceFirst(routePattern, entry.getValue().getPrefix());\n\t\t\treturn new Route(targetPath, entry.getValue().getServiceId());\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 45.59699263803761}, {"code": "public Route getMatchingRoute(String path){\n\t\tPathMatcher pathMatcher = new AntPathMatcher();\n\tfor (Route route : this.routes) {\n\t\tif (pathMatcher.match(route.getPattern(), path)) {\n\t\t\treturn new Route(pathMatcher.extractPathWithinPattern(route.getPattern(), path), route.getServiceId());\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 24.908477351922574}, {"code": "public Route getMatchingRoute(String path){\n\t\tif (path == null) {\n\t\treturn null;\n\t}\n\tif (pathMatcher == null) {\n\t\tpathMatcher = new AntPathMatcher();\n\t}\n\tfor (Map.Entry<String, ZuulProperties.ZuulRoute> entry : zuulProperties.getRoutes().entrySet()) {\n\t\tString pattern = entry.getKey();\n\t\tZuulProperties.ZuulRoute route = entry.getValue();\n\t\tif (pathMatcher.match(pattern, path)) {\n\t\t\treturn new Route(path, route.getServiceId());\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 55.680281050553006}]}
{"instance_id": "822071925513", "generation_result": [{"code": "public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry){\n\t\t// 1. \u83b7\u53d6\u5f53\u524d\u7c7b\u6240\u5728\u7684\u5305\u540d\n\tString packageName = ClassUtils.getPackageName(importingClassMetadata.getClassName());\n\t// 2. \u83b7\u53d6\u5f53\u524d\u5305\u540d\u4e0b\u7684\u6240\u6709\u7c7b\n\tSet<Class<?>> classes = ClassUtil.scanPackage(packageName);\n\t// 3. \u904d\u5386\u6240\u6709\u7c7b\n\tfor (Class<?> clazz : classes) {\n\t\t// 4. \u5224\u65ad\u5f53\u524d\u7c7b\u662f\u5426\u6709@FeignClient\u6ce8\u89e3\n\t\tif (ClassUtil.isAnnotationPresent(clazz, FeignClient.class)) {\n\t\t\t// 5. \u83b7\u53d6@FeignClient\u6ce8\u89e3\u7684value\u5c5e\u6027\u503c\n\t\t\tString value = ClassUtil.getAnnotationValue(clazz, FeignClient.class, \"value\");\n\t\t\t// 6. \u83b7\u53d6@FeignClient\u6ce8\u89e3\u7684fallback\u5c5e\u6027\u503c\n\t\t\tClass<?> fallback = ClassUtil.getAnnotationValue(clazz, FeignClient.class, \"fallback\");\n\t\t\t// 7. \u83b7\u53d6@FeignClient\u6ce8\u89e3\u7684fallbackFactory\u5c5e\u6027\u503c\n\t\t\tClass<?> fallbackFactory = ClassUtil.getAnnotationValue(clazz, FeignClient.class, \"fallbackFactory\");\n\t\t\t// 8. \u83b7\u53d6@FeignClient\u6ce8\u89e3\u7684configuration\u5c5e\u6027\u503c\n\t\t\tClass<?> configuration = ClassUtil.getAnnotationValue(clazz, FeignClient.class, \"configuration\");\n\t\t\t// 9. \u83b7\u53d6@FeignClient\u6ce8\u89e3\u7684qualifier\u5c5e\u6027\u503c\n\t\t\tString qualifier = ClassUtil.getAnnotationValue(clazz, FeignClient.class, \"qualifier\");\n\t\t\t// 10. \u83b7\u53d6@FeignClient\u6ce8\u89e3\u7684path\u5c5e\u6027\u503c\n\t\t\tString path = ClassUtil.getAnnotationValue(clazz, FeignClient.class, \"path\");\n\t\t\t// 11. \u83b7\u53d6@FeignClient\u6ce8\u89e3\u7684url\u5c5e\u6027\u503c\n\t\t\tString url = ClassUtil.getAnnotationValue(clazz, FeignClient.class, \"url\");\n\t\t\t// 12. \u83b7\u53d6@FeignClient\u6ce8\u89e3\u7684contextId\u5c5e\u6027\u503c\n\t\t\tString contextId = ClassUtil.getAnnotationValue(clazz, FeignClient.class, \"contextId\");\n\t\t\t// 13. \u83b7\u53d6@FeignClient\u6ce8\u89e3\u7684contextId\u5c5e\u6027\u503c\n\t\t\tString contextId = ClassUtil.getAnnotationValue(clazz, FeignClient.class, \"contextId\");\n\t\t\t// 14. \u83b7\u53d6@FeignClient\u6ce8\u89e3\u7684contextId\u5c5e\u6027\u503c\n\t\t\tString contextId = ClassUtil.getAnnotationValue(clazz, FeignClient", "CodeBleu_score": 42.58391575336029}, {"code": "public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry){\n\t\t//\u83b7\u53d6\u5f53\u524d\u7c7b\u6240\u5728\u7684\u5305\u540d\n\tString packageName = ClassUtils.getPackageName(importingClassMetadata.getClassName());\n\t//\u83b7\u53d6\u5f53\u524d\u5305\u4e0b\u6240\u6709\u7c7b\n\tSet<Class<?>> classes = ClassUtil.scanPackage(packageName);\n\t//\u904d\u5386\u6240\u6709\u7c7b\n\tfor (Class<?> clazz : classes) {\n\t\t//\u5224\u65ad\u662f\u5426\u6709FeignClient\u6ce8\u89e3\n\t\tif (AnnotationUtils.findAnnotation(clazz, FeignClient.class)!= null) {\n\t\t\t//\u521b\u5efaGenericBeanDefinition\u5b9e\u4f8b\n\t\t\tGenericBeanDefinition beanDefinition = new GenericBeanDefinition();\n\t\t\t//\u8bbe\u7f6ebean\u7684\u7c7b\u578b\n\t\t\tbeanDefinition.setBeanClass(FeignClientFactoryBean.class);\n\t\t\t//\u8bbe\u7f6ebean\u7684\u540d\u79f0\n\t\t\tbeanDefinition.setBeanName(clazz.getName());\n\t\t\t//\u8bbe\u7f6ebean\u7684\u5c5e\u6027\n\t\t\tbeanDefinition.getPropertyValues().add(\"type\", clazz);\n\t\t\t//\u6ce8\u518cbean\n\t\t\tregistry.registerBeanDefinition(clazz.getName(), beanDefinition);\n\t\t}\n\t}\n}", "CodeBleu_score": 57.5974259606507}, {"code": "public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry){\n\t\t// 1. \u626b\u63cf\u5305\n\tSet<BeanDefinition> feignClients = findFeignClients(importingClassMetadata);\n\t// 2. \u6ce8\u518cbean\n\tfeignClients.forEach(beanDefinition -> registry.registerBeanDefinition(beanDefinition.getBeanClassName(), beanDefinition));\n}", "CodeBleu_score": 9.055604211645012}]}
{"instance_id": "3d678e3bf3c8", "generation_result": [{"code": "public TutuDiscoveryClient tutuDiscoveryClient(TutuDiscoveryProperties tutuDiscoveryProperties){\n\t\treturn new TutuDiscoveryClient(tutuDiscoveryProperties);\n}", "CodeBleu_score": 72.530822855626}, {"code": "public TutuDiscoveryClient tutuDiscoveryClient(TutuDiscoveryProperties tutuDiscoveryProperties){\n\t\treturn new TutuDiscoveryClient(tutuDiscoveryProperties);\n}", "CodeBleu_score": 72.530822855626}, {"code": "public TutuDiscoveryClient tutuDiscoveryClient(TutuDiscoveryProperties tutuDiscoveryProperties){\n\t\treturn new TutuDiscoveryClient(tutuDiscoveryProperties);\n}", "CodeBleu_score": 72.530822855626}]}
