{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = args.get('attachment_ids')\n    if not attachment_ids:\n        return request.not_found()\n    attachment_ids = [int(x) for x in attachment_ids.split(',')]\n    attachments = request.env['ir.attachment'].browse(attachment_ids)\n    if not attachments:\n        return request.not_found()\n    for attachment in attachments:\n        if not request.env.user.has_group('base.group_system'):\n            if not attachment.check_access_rights('read', raise_exception=False):\n                return request.not_found()\n            if not attachment.check_access_rule('read'):\n                return request.not_found()\n    zip_file = io.BytesIO()\n    zip_file.write(b'PK\\x03\\x04\\x14\\x00\\x06\\x00\\x00\\x00')\n    zip_file.write(b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00')\n    zip_file.write(b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00')\n    zip_file.write(b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00')\n    zip_file.write(b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00')\n    zip_file.write(b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00')\n    zip_file.write(b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00')\n    zip_file.write(b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00')\n    zip_file.write(b'\\x00\\x00\\x00\\", "CodeBleu_score": 36.73986920882386}, {"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = request.httprequest.args.getlist('attachment_ids[]')\n    attachment_ids = [int(attachment_id) for attachment_id in attachment_ids]\n    attachment_ids = request.env['ir.attachment'].browse(attachment_ids)\n    for attachment in attachment_ids:\n        if not request.env.user.has_group('base.group_user'):\n            if not attachment.res_model and not attachment.res_id:\n                raise AccessError(_(\"You are not allowed to access this file.\"))\n            if not request.env.user.has_group('base.group_user') and not request.env.user.has_group('base.group_system'):\n                if not request.env.user.has_group('base.group_system'):\n                    if not request.env.user.has_group('base.group_user'):\n                        raise AccessError(_(\"You are not allowed to access this file.\"))\n                    else:\n                        raise AccessError(_(\"You are not allowed to access this file.\"))\n                else:\n                    raise AccessError(_(\"You are not allowed to access this file.\"))\n            if not request.env.user.has_group('base.group_user'):\n                if not attachment.res_model and not attachment.res_id:\n                    raise AccessError(_(\"You are not allowed to access this file.\"))\n                if not request.env.user.has_group('base.group_user') and not request.env.user.has_group('base.group_system'):\n                    if not request.env.user.has_group('base.group_system'):\n                        if not request.env.user.has_group('base.group_user'):\n                            raise AccessError(_(\"You are not allowed to access this file.\"))\n                        else:\n                            raise AccessError(_(\"You are not allowed to access this file.\"))\n                    else:\n                        raise AccessError(_(\"You are not allowed to access this file.\"))\n                if not request.env.user.has_group('base.group_user'):\n                    if not attachment.res_model and not attachment.res_id:\n                        raise AccessError(_(\"You are not allowed to access this file.\"))\n                    if not request.env.user.has_group('base.group_user') and not request.env.user.has_group('base.group_system'):\n                        if not request.env.user.has_group('base", "CodeBleu_score": 23.00678578889867}, {"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = request.httprequest.args.getlist('attachment_ids[]')\n    attachment_ids = [int(attachment_id) for attachment_id in attachment_ids]\n    attachment_obj = request.env['ir.attachment']\n    attachment_data = attachment_obj.browse(attachment_ids)\n    if not attachment_data:\n        return request.not_found()\n    if not request.env.user.has_group('base.group_system'):\n        for attachment in attachment_data:\n            if not attachment.check_access_rights('read', raise_exception=False):\n                return request.not_found()\n            if not attachment.check_access_rule('read'):\n                return request.not_found()\n    file_content = b''\n    for attachment in attachment_data:\n        file_content += attachment.datas\n    response = request.make_response(file_content,\n                                     headers=[('Content-Type', 'application/zip'),\n                                              ('Content-Disposition', 'attachment; filename=\"%s\"' % 'export.zip')])\n    return response\n\n", "CodeBleu_score": 34.520901196624706}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(CustomerPortal, self)._prepare_home_portal_values(counters)\n    values.update({\n        'invoice_count': self.env['account.move'].sudo().search_count([('partner_id', '=', self.partner_id.id), ('type', 'in', ['out_invoice', 'out_refund'])]) if self.env.user.has_group('account.group_account_invoice') else 0,\n        'bill_count': self.env['account.move'].sudo().search_count([('partner_id', '=', self.partner_id.id), ('type', 'in', ['out_refund'])]) if self.env.user.has_group('account.group_account_invoice') else 0,\n    })\n    return values\n\n", "CodeBleu_score": 26.816381228030384}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(CustomerPortal, self)._prepare_home_portal_values(counters)\n    if self.env.user.has_group('account.group_account_invoice'):\n        invoices = self.env['account.move'].search([('partner_id', '=', self.partner_id.id), ('state', 'in', ('draft', 'proforma', 'open'))])\n        values['invoice_count'] = len(invoices)\n        if self.env.user.has_group('account.group_account_invoice_refund'):\n            invoices = self.env['account.move'].search([('partner_id', '=', self.partner_id.id), ('state', 'in', ('draft', 'proforma', 'open', 'paid'))])\n            values['invoice_refund_count'] = len(invoices)\n        bills = self.env['account.move'].search([('partner_id', '=', self.partner_id.id), ('state', 'in', ('draft', 'proforma', 'open'))])\n        values['bill_count'] = len(bills)\n        if self.env.user.has_group('account.group_account_invoice_refund'):\n            bills = self.env['account.move'].search([('partner_id', '=', self.partner_id.id), ('state', 'in', ('draft', 'proforma', 'open', 'paid'))])\n            values['bill_refund_count'] = len(bills)\n    return values\n\n", "CodeBleu_score": 38.567132382289174}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(CustomerPortal, self)._prepare_home_portal_values(counters)\n    if request.env.user.has_group('account.group_account_invoice'):\n        invoices_count = request.env['account.move'].search_count([\n            '|',\n            ('partner_id', '=', self.partner_id.id),\n            ('partner_id', '=', False),\n            ('state', 'in', ['draft', 'proforma', 'open']),\n        ])\n        values['invoices_count'] = invoices_count\n    if request.env.user.has_group('account.group_account_receivable'):\n        bills_count = request.env['account.move'].search_count([\n            '|',\n            ('partner_id', '=', self.partner_id.id),\n            ('partner_id', '=', False),\n            ('state', 'in', ['draft', 'proforma', 'open']),\n        ])\n        values['bills_count'] = bills_count\n    return values\n\n", "CodeBleu_score": 40.140992647561326}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    if not request.env.user.has_group('account.group_account_invoice'):\n        raise AccessError(_('Only accounts users can access this page.'))\n    domain = [('partner_id', '=', request.env.user.partner_id.id)]\n    if date_begin:\n        domain += [('date_invoice', '>=', date_begin)]\n    if date_end:\n        domain += [('date_invoice', '<=', date_end)]\n    if filterby:\n        domain += [('type', '=', filterby)]\n    if sortby == 'date_invoice':\n        sortby = 'date_invoice desc'\n    elif sortby == 'amount_total':\n        sortby = 'amount_total desc'\n    else:\n        sortby = 'date_invoice desc'\n    invoices = request.env['account.move'].search(domain, order=sortby, limit=20, offset=int(page) * 20)\n    invoices = request.env['account.move'].browse(invoices.ids)\n    pager = portal_pager(\n        url=\"/my/invoices\",\n        url_args={'date_begin': date_begin, 'date_end': date_end,'sortby': sortby, 'filterby': filterby},\n        total=len(invoices),\n        page=page,\n        step=20,\n    )\n    return request.render(\"account.portal_my_invoices\", {\n        'invoices': invoices,\n        'date_begin': date_begin,\n        'date_end': date_end,\n       'sortby': sortby,\n        'filterby': filterby,\n        'pager': pager,\n    })\n\n", "CodeBleu_score": 36.17920326630747}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    # Retrieve the user's invoices\n    domain = [('partner_id', '=', request.env.user.partner_id.id)]\n    if date_begin and date_end:\n        domain += [('date_invoice', '>=', date_begin), ('date_invoice', '<=', date_end)]\n    invoices = request.env['account.invoice'].search(domain, order='date_invoice desc')\n    invoices = invoices.filtered(lambda inv: inv.type in ['out_invoice', 'out_refund'])\n\n    # Update the session history\n    if not request.env.user._is_portal_user():\n        request.env['portal.history'].sudo().create({\n            'partner_id': request.env.user.partner_id.id,\n            'invoice_ids': invoices.ids,\n        })\n\n    # Prepare the values for rendering the invoices page\n    values = {\n        'invoices': invoices,\n        'date_begin': date_begin,\n        'date_end': date_end,\n       'sortby': sortby,\n        'filterby': filterby,\n        'page_name': 'portal_my_invoices',\n        'page_title': _('My Invoices'),\n        'pager': portal_pager(\n            url=\"/my/invoices\",\n            url_args={'date_begin': date_begin, 'date_end': date_end,'sortby': sortby, 'filterby': filterby},\n            total=len(invoices),\n            page=page,\n            step=self._items_per_page\n        ),\n    }\n\n    # Render the invoices page\n    return request.render(\"account.portal_my_invoices\", values)\n\n", "CodeBleu_score": 39.033972208363174}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_portal_layout_values()\n    values.update(self._get_page_view_values(page=page, date_begin=date_begin, date_end=date_end, sortby=sortby, filterby=filterby, **kw))\n    return request.render(\"account.portal_my_invoices\", values)\n\n", "CodeBleu_score": 25.428605055530923}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    invoice = request.env['account.invoice'].sudo().browse(int(invoice_id))\n    if not invoice.access_token_valid(access_token):\n        raise MissingError(_('The link you followed is no longer valid.'))\n    if invoice.state!= 'posted':\n        raise AccessError(_('Invoice must be posted in order to be accessible.'))\n    if not invoice.invoice_line_ids:\n        raise AccessError(_('Invoice must have at least one line.'))\n    if report_type == 'pdf':\n        if invoice.type in ['out_refund', 'in_refund']:\n            raise AccessError(_('You cannot print a refund invoice.'))\n        if invoice.type == 'out_invoice' and invoice.currency_id!= request.env.user.company_id.currency_id:\n            raise AccessError(_('You cannot print a foreign invoice.'))\n        if not invoice.company_id.report_invoice_pdf:\n            raise AccessError(_('You cannot print this invoice.'))\n        if not invoice.company_id.report_invoice_pdf.report_name:\n            raise AccessError(_('You cannot print this invoice.'))\n        if not invoice.company_id.report_invoice_pdf.report_file:\n            raise AccessError(_('You cannot print this invoice.'))\n        if not invoice.company_id.report_invoice_pdf.report_file.exists():\n            raise AccessError(_('You cannot print this invoice.'))\n        if invoice.type == 'out_invoice' and invoice.currency_id!= request.env.user.company_id.currency_id:\n            raise AccessError(_('You cannot print a foreign invoice.'))\n        if not invoice.company_id.report_invoice_pdf:\n            raise AccessError(_('You cannot print this invoice.'))\n        if not invoice.company_id.report_invoice_pdf.report_name:\n            raise AccessError(_('You cannot print this invoice.'))\n        if not invoice.company_id.report_invoice_pdf.report_file:\n            raise AccessError(_('You cannot print this invoice.'))\n        if not invoice.company_id.report_invoice_pdf.report_file.exists():\n            raise AccessError(_('You cannot print this invoice.'))\n        if invoice.type == 'out_invoice' and invoice.currency_id!= request.env.user.company", "CodeBleu_score": 23.61157870511966}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    # check access\n    if not request.env.user.has_group('account.group_account_invoice'):\n        raise AccessError(_(\"You don't have access to this page.\"))\n    invoice = request.env['account.invoice'].sudo().browse(int(invoice_id))\n    if invoice.state not in ['open', 'paid']:\n        raise MissingError(_(\"Invoice must be in Open or Paid state to be accessed.\"))\n    if not invoice.access_token or invoice.access_token!= access_token:\n        raise MissingError(_(\"Invoice must be accessed by the user who created it.\"))\n    if report_type == 'pdf' and invoice.state!= 'paid':\n        raise MissingError(_(\"Invoice must be paid to be accessed.\"))\n    if report_type == 'html':\n        if not request.env.user.has_group('account.group_account_invoice'):\n            raise AccessError(_(\"You don't have access to this page.\"))\n        if not invoice.access_token or invoice.access_token!= access_token:\n            raise MissingError(_(\"Invoice must be accessed by the user who created it.\"))\n        if invoice.state!= 'open':\n            raise MissingError(_(\"Invoice must be in Open state to be accessed.\"))\n    if report_type == 'text':\n        if not request.env.user.has_group('account.group_account_invoice'):\n            raise AccessError(_(\"You don't have access to this page.\"))\n        if not invoice.access_token or invoice.access_token!= access_token:\n            raise MissingError(_(\"Invoice must be accessed by the user who created it.\"))\n        if invoice.state!= 'open':\n            raise MissingError(_(\"Invoice must be in Open state to be accessed.\"))\n    # get report\n    if report_type == 'pdf':\n        if invoice.state == 'paid':\n            report_type = 'qweb-pdf'\n        else:\n            report_type = 'qweb-pdf-invoice'\n    elif report_type == 'html':\n        report_type = 'qweb-html'\n    elif report_type == 'text':\n        report_type = 'qweb-text'\n    # prepare report\n    if report_type == 'qweb-pdf-invoice':\n        report_name = 'account.invoice.report_invoice'\n    else:\n        report_name = 'account.invoice.report_invoice_document'\n    report = request.env['ir.actions", "CodeBleu_score": 30.045440814017255}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    if not request.env.user.has_group('account.group_account_invoice'):\n        return request.redirect('/my/portal')\n    invoice = request.env['account.invoice'].sudo().browse(int(invoice_id))\n    if not invoice.access_token == access_token:\n        return request.redirect('/my/portal')\n    if invoice.state == 'draft':\n        return request.redirect('/my/portal')\n    if invoice.state == 'proforma':\n        return request.redirect('/my/portal')\n    if invoice.state == 'cancel':\n        return request.redirect('/my/portal')\n    if invoice.state == 'paid':\n        return request.redirect('/my/portal')\n    if invoice.type == 'out_invoice':\n        return request.redirect('/my/portal')\n    if invoice.type == 'out_refund':\n        return request.redirect('/my/portal')\n    if invoice.type == 'in_invoice':\n        return request.redirect('/my/portal')\n    if invoice.type == 'in_refund':\n        return request.redirect('/my/portal')\n    if invoice.type == 'out_receipt':\n        return request.redirect('/my/portal')\n    if invoice.type == 'in_receipt':\n        return request.redirect('/my/portal')\n    if invoice.type == 'out_refund':\n        return request.redirect('/my/portal')\n    if invoice.type == 'in_refund':\n        return request.redirect('/my/portal')\n    if invoice.type == 'out_receipt':\n        return request.redirect('/my/portal')\n    if invoice.type == 'in_receipt':\n        return request.redirect('/my/portal')\n    if invoice.type == 'out_receipt':\n        return request.redirect('/my/portal')\n    if invoice.type == 'in_receipt':\n        return request.redirect('/my/portal')\n    if invoice.type == 'out_receipt':\n        return request.redirect('/my/portal')\n    if invoice.type == 'in_receipt':\n        return request.redirect('/my/portal')\n    if invoice.type == 'out_receipt':\n        return request.redirect('/my/portal')\n    if invoice.type == 'in_receipt':\n        return request.redirect('/my/portal')\n    if invoice.type == 'out_receipt':\n        return request.redirect('/my/portal')\n    if invoice", "CodeBleu_score": 24.383763421734887}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t\n    product_ids = self.env['product.template'].search([('company_id', '=', company.id)])\n    for product in product_ids:\n        if product.taxes_id:\n            product.taxes_id.write({'company_id': company.id})\n        if product.purchase_taxes_id:\n            product.purchase_taxes_id.write({'company_id': company.id})\n    return product_ids\n\n", "CodeBleu_score": 16.436667183529472}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    product_obj = self.env['product.template']\n    taxes = self.env['account.tax'].search([])\n    if company:\n        taxes = self.env['account.tax'].search([('company_id', '=', company.id)])\n    if company and company.account_sale_tax_id:\n        product_obj.search([('company_id', '=', company.id)]).write({'sale_tax_id': [(6, 0, taxes.ids)]})\n    if company and company.account_purchase_tax_id:\n        product_obj.search([('company_id', '=', company.id)]).write({'purchase_tax_id': [(6, 0, taxes.ids)]})\n\n", "CodeBleu_score": 26.906695435486377}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    self.ensure_one()\n    # Get the company's domain\n    domain = [('company_id', '=', self.id)]\n    if company:\n        domain.append(('company_id', '=', company.id))\n    # Get the product templates\n    product_templates = self.env['product.template'].search(domain)\n    # Update the sale taxes\n    if self.env.company.account_sale_tax_id:\n        product_templates.write({'taxes_id': [(6, 0, [self.env.company.account_sale_tax_id.id])]})\n    # Update the purchase taxes\n    if self.env.company.account_purchase_tax_id:\n        product_templates.write({'purchase_taxes_id': [(6, 0, [self.env.company.account_purchase_tax_id.id])]})\n    return product_templates\n\n", "CodeBleu_score": 28.553638426082532}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    if not company:\n        company = self.env.user.company_id\n    if xml_id:\n        account = self.env['ir.model.data'].xmlid_to_object(xml_id, company=company)\n        if account:\n            return account\n    if account_type:\n        account = self.env['account.account'].search([('user_type_id.type', '=', account_type), ('company_id', '=', company.id)], limit=1)\n        if account:\n            return account\n    return self.env['account.account'].search([], limit=1)\n\n", "CodeBleu_score": 43.75338408329421}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    demo_account = self.env['account.account'].search([('company_id', '=', company.id), ('code', '=', xml_id)])\n    if not demo_account:\n        demo_account = self.env['account.account'].search(\n            [('company_id', '=', company.id), ('user_type_id.type', '=', account_type)], limit=1)\n    return demo_account\n\n", "CodeBleu_score": 39.58648663046844}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    if account_type == 'other':\n        return self.env['account.account'].search([('code', '=', xml_id)], limit=1)\n    if account_type =='revenue':\n        return self.env['account.account'].search([('code', '=', xml_id), ('user_type_id.type', '=','revenue')], limit=1)\n    if account_type == 'expense':\n        return self.env['account.account'].search([('code', '=', xml_id), ('user_type_id.type', '=', 'expense')], limit=1)\n    if account_type == 'liquidity':\n        return self.env['account.account'].search([('code', '=', xml_id), ('user_type_id.type', '=', 'liquidity')], limit=1)\n    if account_type == 'income':\n        return self.env['account.account'].search([('code', '=', xml_id), ('user_type_id.type', '=', 'income')], limit=1)\n    if account_type == 'equity':\n        return self.env['account.account'].search([('code', '=', xml_id), ('user_type_id.type', '=', 'equity')], limit=1)\n    if account_type == 'asset':\n        return self.env['account.account'].search([('code', '=', xml_id), ('user_type_id.type', '=', 'asset')], limit=1)\n    if account_type == 'bank':\n        return self.env['account.account'].search([('code', '=', xml_id), ('user_type_id.type', '=', 'bank')], limit=1)\n    if account_type == 'cash':\n        return self.env['account.account'].search([('code', '=', xml_id), ('user_type_id.type', '=', 'cash')], limit=1)\n    if account_type == 'payable':\n        return self.env['account.account'].search([('code', '=', xml_id), ('user_type_id.type', '=', 'payable')], limit=1)\n    if account_type =='receivable':\n        return self.env['account.account'].search([('code', '=', xml_id), ('user_type_id.type', '=','receivable')], limit=1)\n    if account_type == '", "CodeBleu_score": 45.36297390941105}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    self.ensure_one()\n    company_ids = self.env['res.company'].search([('id', 'in', self.mapped('company_id').ids)])\n    for company in company_ids:\n        account_ids = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id.name', '=', 'Current Year Earnings')])\n        if len(account_ids) > 1:\n            raise ValidationError(_('There is more than one account with the \"Current Year Earnings\" type for the company %s.') % company.name)\n\n", "CodeBleu_score": 25.08756989981409}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    self.ensure_one()\n    if self.type =='revenue' and self.company_id.type == 'current_year_earning':\n        account_type_ids = self.env['account.account'].search([('type', '=','revenue'), ('company_id', '=', self.company_id.id)])\n        if len(account_type_ids) > 1:\n            raise ValidationError(_('You can only have one account with the \"Current Year Earnings\" type per company.'))\n\n", "CodeBleu_score": 36.774741040980054}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    for account in self:\n        if account.type =='revenue' and account.company_id.earning_account_id and account.company_id.earning_account_id.id == account.id:\n            raise ValidationError(_('You can only have one account with \"Current Year Earnings\" type for each company.'))\n\n", "CodeBleu_score": 22.97907520795468}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name:\n        if self._context.get('active_model') =='res.partner':\n            if self._context.get('active_id'):\n                return self.env['res.partner'].browse(self._context.get('active_id')).name_get()\n            else:\n                return []\n        elif self._context.get('active_model') =='res.partner.bank':\n            if self._context.get('active_id'):\n                return self.env['res.partner.bank'].browse(self._context.get('active_id')).name_get()\n            else:\n                return []\n        elif self._context.get('active_model') =='res.country':\n            if self._context.get('active_id'):\n                return self.env['res.country'].browse(self._context.get('active_id')).name_get()\n            else:\n                return []\n        elif self._context.get('active_model') =='res.country.state':\n            if self._context.get('active_id'):\n                return self.env['res.country.state'].browse(self._context.get('active_id')).name_get()\n            else:\n                return []\n        elif self._context.get('active_model') =='res.country.state.city':\n            if self._context.get('active_id'):\n                return self.env['res.country.state.city'].browse(self._context.get('active_id')).name_get()\n            else:\n                return []\n        elif self._context.get('active_model') =='res.country.state.city.district':\n            if self._context.get('active_id'):\n                return self.env['res.country.state.city.district'].browse(self._context.get('active_id')).name_get()\n            else:\n                return []\n        elif self._context.get('active_model') =='res.country.state.city.district.ward':\n            if self._context.get('active_id'):\n                return self.env['res.country.state.city.district.ward'].browse(self._context.get('active_id')).name_get()\n            else:\n                return []\n        elif self._context.get('active_model') =='res.country.state.city.district.ward.vdc':", "CodeBleu_score": 21.746315941777606}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name:\n        return self._name_search_context(domain, operator, limit, order)\n    else:\n        return self.search(expression.AND([domain, [('name', operator, name)]]), limit=limit, order=order)\n\n", "CodeBleu_score": 14.585013994945875}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name:\n        if self._context.get('partner_id') and self._context.get('partner_ids'):\n            raise UserError(_(\"You can only search for a single partner at a time.\"))\n        if self._context.get('partner_id'):\n            return self.browse(self._context['partner_id'])\n        if self._context.get('partner_ids'):\n            return self.browse(self._context['partner_ids'])\n        return self.search([])\n\n    if operator == 'ilike':\n        operator = 'like'\n\n    if operator == 'like':\n        domain = expression.AND([domain, [('name', operator, name)]])\n    else:\n        domain = expression.AND([domain, [('name', operator, name)]])\n\n    if limit:\n        domain = expression.AND([domain, [('id', 'in', self.search(domain, limit=limit, order=order).ids)]])\n    else:\n        domain = expression.AND([domain, [('id', 'in', self.search(domain, order=order).ids)]])\n\n    return self.search(domain)\n\n", "CodeBleu_score": 45.21221575211076}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t\n    self_name = self.name\n    if self_name:\n        new_name = new.name\n        if new_name and new_name!= self_name and new_name.startswith(self_name):\n            # new name follows the same pattern as the current record, update the name in the cache\n            new.name = new_name\n            self.name = self_name\n\n    # Copy translations from self to new, excluding excluded fields\n    for field_name in self._fields.keys():\n        if field_name in excluded:\n            continue\n        if field_name == 'name':\n            continue\n        field = self._fields[field_name]\n        if field.type in ('many2one', 'one2many'):\n            # Copy translations from self to new\n            if field.type =='many2one':\n                new_field = new._fields[field_name]\n                if new_field.type =='many2one':\n                    new_field.copy_translations(self, new, excluded)\n            else:\n                # Copy translations from self to new\n                for record in self:\n                    record._copy_translations_to_many2one(new, field, excluded)\n        else:\n            # Copy translations from self to new\n            if field.type =='many2many':\n                new_field = new._fields[field_name]\n                if new_field.type =='many2many':\n                    new_field.copy_translations(self, new, excluded)\n            else:\n                new_field = new._fields[field_name]\n                if new_field.type =='many2many':\n                    new_field.copy_translations(self, new, excluded)\n                elif new_field.type =='many2one':\n                    new_field.copy_translations(self, new, excluded)\n                else:\n                    new_field.copy_translations(self, new, excluded)\n\n", "CodeBleu_score": 25.591974749172074}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    new_name = new.name\n    if new.name_get()[0][1].startswith(new_name) and new.name_get()[0][1].replace(new_name, '').replace(' ', '').replace('-', '').replace('_', '').replace('.', '').replace(',', '').replace('(', '').replace(')', '').replace(':', '').replace(';', '').replace('\"', '').replace(\"'\", '').replace('/', '').replace('\\\\', '').replace('[', '').replace(']', '').replace('|', '').replace('!', '').replace('@', '').replace('#', '').replace('$', '').replace('%', '').replace('^', '').replace('&', '').replace('*', '').replace('+', '').replace('=', '').replace('?', '').replace('~', '').replace('`', '').replace('{', '').replace('}', '').replace('<', '').replace('>', '').replace(';', '').replace(':', '').replace('\"', '').replace(\"'\", '').replace('|', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace('`', '').replace", "CodeBleu_score": 16.479791316228493}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    for field in self._fields:\n        if field not in excluded and field!= 'name':\n            # In case of a many2one field, the field is copied as a string, not as an object.\n            if self._fields[field].type =='many2one':\n                new[field] = self[field]\n            else:\n                new[field] = self[field]\n    if new._name == 'ir.translation':\n        new.name = self.name\n    elif new._name == 'ir.module.module':\n        new.name = self.name\n    elif new._name == 'ir.module.category':\n        new.name = self.name\n    elif new._name == 'ir.model':\n        new.model = self.model\n    elif new._name == 'ir.ui.view':\n        new.name = self.name\n    elif new._name == 'ir.ui.menu':\n        new.name = self.name\n    elif new._name == 'ir.ui.view.custom_layout':\n        new.name = self.name\n    elif new._name == 'ir.ui.view.search_view':\n        new.name = self.name\n    elif new._name == 'ir.ui.menu.item':\n        new.name = self.name\n    elif new._name == 'ir.ui.menu.item.action':\n        new.name = self.name\n    elif new._name == 'ir.ui.menu.item.action.custom':\n        new.name = self.name\n    elif new._name == 'ir.ui.menu.item.action.custom.view':\n        new.name = self.name\n    elif new._name == 'ir.ui.menu.item.action.custom.view.search':\n        new.name = self.name\n    elif new._name == 'ir.ui.menu.item.action.custom.view.search.custom':\n        new.name = self.name\n    elif new._name == 'ir.ui.menu.item.action.custom.view.search.custom.view':\n        new.name = self.name\n    elif new._name == 'ir.ui.menu.item.action.custom.view.search.custom.view.search':\n        new.name = self.name\n    elif new._name == 'ir.ui.menu.item.action.custom", "CodeBleu_score": 23.07789061856047}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\t\n    action = self.env.ref('account.action_invoice_tree1').read()[0]\n    action['context'] = {'search_default_type': 'out_invoice','search_default_partner_id': self.partner_id.id,'search_default_state': 'open','search_default_date_from': self.date_order,'search_default_date_to': self.date_order,'search_default_analytic_account_id': self.analytic_account_id.id}\n    action['domain'] = [('id', 'in', self.ids)]\n    return action\n\n", "CodeBleu_score": 24.469572872337725}, {"code": "def action_view_invoice(self)\n\t\n    context = self.env.context.copy()\n    context.update({\n        'default_type': 'out_invoice',\n       'search_default_type': 'out_invoice',\n        'default_partner_id': self.partner_id.id,\n        'default_company_id': self.company_id.id,\n        'default_date_invoice': fields.Date.today(),\n        'default_invoice_line_ids': self.env['account.move.line'].search([\n            ('sale_line_id.order_id', '=', self.id),\n            ('account_id.internal_type', 'in', ['receivable', 'payable']),\n        ]).ids,\n    })\n    return {\n        'name': _('Customer Invoices'),\n        'view_type': 'form',\n        'view_mode': 'tree,form',\n       'res_model': 'account.move',\n        'type': 'ir.actions.act_window',\n        'context': context,\n        'domain': [('id', 'in', self.env['account.move'].search([\n            ('partner_id', '=', self.partner_id.id),\n            ('type', '=', 'out_invoice'),\n            ('state', 'in', ['draft', 'proforma', 'open']),\n            ('date_invoice', '<=', self.date_order),\n        ]).ids)],\n    }", "CodeBleu_score": 29.539654176369268}, {"code": "def action_view_invoice(self)\n\t\n    action = super(AccountInvoice, self).action_view_invoice()\n    action['context'] = {\n       'search_default_type': 2,\n       'search_default_partner_id': self.partner_id.id,\n       'search_default_state': 'paid',\n       'search_default_date_invoice': self.date_invoice,\n       'search_default_date_due': self.date_due,\n       'search_default_date_invoice_end': self.date_invoice,\n       'search_default_date_due_end': self.date_due,\n       'search_default_date_invoice_start': self.date_invoice,\n       'search_default_date_due_start': self.date_due,\n       'search_default_type': 2,\n       'search_default_partner_id': self.partner_id.id,\n       'search_default_state': 'paid',\n       'search_default_date_invoice': self.date_invoice,\n       'search_default_date_due': self.date_due,\n       'search_default_date_invoice_end': self.date_invoice,\n       'search_default_date_due_end': self.date_due,\n       'search_default_date_invoice_start': self.date_invoice,\n       'search_default_date_due_start': self.date_due,\n       'search_default_type': 2,\n       'search_default_partner_id': self.partner_id.id,\n       'search_default_state': 'paid',\n       'search_default_date_invoice': self.date_invoice,\n       'search_default_date_due': self.date_due,\n       'search_default_date_invoice_end': self.date_invoice,\n       'search_default_date_due_end': self.date_due,\n       'search_default_date_invoice_start': self.date_invoice,\n       'search_default_date_due_start': self.date_due,\n       'search_default_type': 2,\n       'search_default_partner_id': self.partner_id.id,\n       'search_default_state': 'paid',\n       'search_default_date_invoice': self.date_invoice,\n       ", "CodeBleu_score": 18.13301387582039}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\t\n    action = self.env.ref('account.action_vendor_bill_tree').read()[0]\n    action['domain'] = [('id', 'in', self.ids)]\n    action['context'] = {'type': 'in_invoice'}\n    return action\n", "CodeBleu_score": 15.715926101570288}, {"code": "def action_view_vendor_bill(self)\n\t\n    action = self.env.ref('account.action_move_line_tree').read()[0]\n    action['domain'] = [('account_move_id.purchase_type', '=','vendor_bill'), ('account_move_id.purchase_type', '=','vendor_bill_purchase_order')]\n    action['context'] = {'default_purchase_type':'vendor_bill', 'default_account_move_id': self.id}\n    return action\n", "CodeBleu_score": 19.69614316193176}, {"code": "def action_view_vendor_bill(self)\n\t\n    action = self.env.ref('account.action_vendor_bill_tree').read()[0]\n    action['domain'] = [('purchase_id', 'in', self.ids)]\n    action['context'] = {'default_purchase_id': self.ids[0]}\n    return action\n\n", "CodeBleu_score": 15.341605090548093}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        with self.env['ir.attachment']._need_context_manager(self):\n            return super(models.Model, self).write(values)\n    else:\n        return super(models.Model, self).write(values)\n\n", "CodeBleu_score": 35.20328515185014}, {"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        with self.env['ir.attachment'].browse(values['attachment_ids']) as attachments:\n            attachments.write({'res_model': self._name,'res_id': self.id})\n        del values['attachment_ids']\n    return super(models.Model, self).write(values)\n\n", "CodeBleu_score": 30.506797027229553}, {"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        with self._context_manager():\n            return super(models.Model, self).write(values)\n    return super(models.Model, self).write(values)\n\n", "CodeBleu_score": 33.96820370632517}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\t\n    if self._context.get('skip_bank_account_creation'):\n        return self.env['res.partner.bank'].browse()\n    else:\n        bank_account = self.env['res.partner.bank'].search([('acc_number', '=', self.acc_number), ('partner_id', '=', self.partner_id.id)], limit=1)\n        if not bank_account:\n            bank_account = self.env['res.partner.bank'].create({\n                'acc_number': self.acc_number,\n                'partner_id': self.partner_id.id,\n                'company_id': self.env.company.id,\n            })\n        return bank_account\n\n", "CodeBleu_score": 55.145279612556294}, {"code": "def _find_or_create_bank_account(self)\n\t\n    if self._context.get('skip_bank_account_creation'):\n        return self.env['res.partner.bank'].browse()\n    bank_account = self.env['res.partner.bank'].search([('partner_id', '=', self.id), ('acc_number', '=', self.bank_acc)])\n    if bank_account:\n        return bank_account\n    return self.env['res.partner.bank'].create({\n        'partner_id': self.id,\n        'acc_number': self.bank_acc,\n        'acc_type': self.bank_acc_type,\n        'bank_id': self.bank_id.id,\n        'company_id': self.company_id.id,\n        'currency_id': self.currency_id.id,\n    })\n\n", "CodeBleu_score": 40.05862186629272}, {"code": "def _find_or_create_bank_account(self)\n\t\n    if self._context.get('skip_bank_account_creation'):\n        return self.env['res.partner.bank'].browse()\n    else:\n        return self.env['res.partner.bank'].search([\n            ('partner_id', '=', self.id),\n            ('acc_number', '=', self.bank_account_number),\n            ('company_id', '=', self.company_id.id)\n        ], limit=1)\n\n", "CodeBleu_score": 23.967503571355977}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    # Ensure a single record context\n    if not self._context.get('force_company'):\n        self._cr.execute('SELECT company_id FROM account_move WHERE id = %s', (self.id,))\n        company_id = self._cr.fetchone()[0]\n        self._context['force_company'] = company_id\n    self.ensure_one()\n    # Retrieve relevant accounting amounts and currencies\n    self._cr.execute(\"\"\"SELECT\n        account_id,\n        account_currency_id,\n        amount_currency,\n        amount_currency_rate,\n        amount_currency_digits,\n        amount_currency_precision,\n        currency_id,\n        currency_rate,\n        currency_digits,\n        currency_precision,\n        currency_exchange_rate\n    FROM account_move_line_st_line_rate\n    WHERE move_id = %s\"\"\", (self.id,))\n    res = self._cr.dictfetchall()\n    # Compute the transaction amount, journal amount, and company amount using various exchange rates\n    company_currency = self.company_id.currency_id\n    company_currency_rate = self.company_id.currency_id.rate\n    company_currency_digits = self.company_id.currency_id.decimal_places\n    company_currency_precision = self.company_id.currency_id.decimal_precision\n    company_currency_exchange_rate = self.company_id.currency_id.exchange_rate\n    transaction_currency = currency\n    transaction_currency_rate = 1.0\n    transaction_currency_digits = currency.decimal_places\n    transaction_currency_precision = currency.decimal_precision\n    transaction_currency_exchange_rate = 1.0\n    journal_currency = currency\n    journal_currency_rate = 1.0\n    journal_currency_digits = currency.decimal_places\n    journal_currency_precision = currency.decimal_precision\n    journal_currency_exchange_rate = 1.0\n    for line in res:\n        if line['account_currency_id'] and line['account_currency_id']!= company_currency:\n            if line['account_currency_rate'] and line['account_currency_rate']!= company_currency_rate:\n                transaction_currency = line['account_currency_id']\n                transaction_currency_rate = line['account_currency_rate']\n                transaction_currency_digits = line['account_", "CodeBleu_score": 25.827878511054582}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    context = self._context.copy()\n    if context.get('default_journal_id'):\n        context['journal_id'] = context.get('default_journal_id')\n    else:\n        context['journal_id'] = self.env.user.company_id.default_journal_id.id\n    company_currency = self.env.user.company_id.currency_id\n    if company_currency.id!= currency.id:\n        amount_currency = currency.with_context(date=self.date).compute(amount_currency, company_currency)\n        balance = currency.with_context(date=self.date).compute(balance, company_currency)\n    return {\n        'amount': amount_currency,\n        'amount_currency': amount_currency!= balance,\n        'balance': balance,\n    }\n\n", "CodeBleu_score": 17.795438010879014}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    currency_obj = self.env['res.currency']\n    company_currency = currency_obj.browse(self.env.company.id).id\n    company_currency_id = company_currency.id\n    company_currency_obj = self.env['res.currency'].browse(company_currency_id)\n    company_currency_rate = company_currency_obj.rate\n    company_currency_name = company_currency_obj.name\n    company_currency_digits = company_currency_obj.decimal_places\n    company_currency_symbol = company_currency_obj.symbol\n    company_currency_position = company_currency_obj.position\n    company_currency_rounding = company_currency_obj.rounding\n    company_currency_decimal_places = company_currency_obj.decimal_places\n\n    if currency.id == company_currency_id:\n        company_currency_rate = 1.0\n        company_currency_name = 'EUR'\n        company_currency_digits = 2\n        company_currency_symbol = '\u20ac'\n        company_currency_position = 'after'\n        company_currency_rounding = 0.01\n        company_currency_decimal_places = 2\n\n    if currency.id == company_currency_id:\n        company_currency_rate = 1.0\n        company_currency_name = 'EUR'\n        company_currency_digits = 2\n        company_currency_symbol = '\u20ac'\n        company_currency_position = 'after'\n        company_currency_rounding = 0.01\n        company_currency_decimal_places = 2\n\n    if currency.id == company_currency_id:\n        company_currency_rate = 1.0\n        company_currency_name = 'EUR'\n        company_currency_digits = 2\n        company_currency_symbol = '\u20ac'\n        company_currency_position = 'after'\n        company_currency_rounding = 0.01\n        company_currency_decimal_places = 2\n\n    if currency.id == company_currency_id:\n        company_currency_rate = 1.0\n        company_currency_name = 'EUR'\n        company_currency_digits = 2\n        company_currency_symbol = '\u20ac'\n        company_currency_position = 'after'\n        company_currency_rounding = 0.01\n        company_currency_decimal_", "CodeBleu_score": 17.42671792180343}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        if journal.type in ('bank', 'cash'):\n            payment_methods = self.env['account.payment.method'].search([('payment_type', '=', 'outbound'), ('company_id', '=', journal.company_id.id), ('active', '=', True)])\n            if payment_methods:\n                for payment_method in payment_methods:\n                    journal.outbound_payment_method_line_ids.unlink()\n                    journal.outbound_payment_method_line_ids.create({'journal_id': journal.id, 'payment_method_id': payment_method.id})\n        else:\n            journal.outbound_payment_method_line_ids.unlink()\n\n", "CodeBleu_score": 43.95637091067396}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids = False\n        if journal.type in ('bank', 'cash'):\n            for method in journal.outbound_payment_method_ids:\n                journal.outbound_payment_method_line_ids |= journal.outbound_payment_method_line_ids.new({\n                    'journal_id': journal.id,\n                    'payment_method_id': method.id,\n                   'sequence': method.sequence,\n                    'amount': method.amount,\n                    'currency_id': method.currency_id.id,\n                    'payment_type': method.payment_type,\n                    'payment_mode': method.payment_mode,\n                })\n    return True\n\n", "CodeBleu_score": 37.58650586680102}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        if journal.type in ('bank', 'cash'):\n            journal.outbound_payment_method_line_ids = self.env['account.payment.method.line'].search([\n                ('payment_method_id.payment_type', '=', 'outbound'),\n                ('payment_method_id.journal_id', '=', journal.id),\n            ])\n        else:\n            journal.outbound_payment_method_line_ids = []\n\n", "CodeBleu_score": 36.455361547659315}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t\n    for move in self:\n        if move.invoice_date and not move.date:\n            if move.invoice_date and not move.invoice_date.year:\n                move.date = move.invoice_date\n            else:\n                if not move.invoice_date.year:\n                    move.date = fields.Date.today()\n                else:\n                    if move.invoice_date.year == move.invoice_date.today().year:\n                        move.date = move.invoice_date\n                    else:\n                        if move.invoice_date.year == move.invoice_date.today().year - 1:\n                            if move.invoice_date.month > 3:\n                                move.date = move.invoice_date\n                            else:\n                                move.date = move.invoice_date.replace(year=move.invoice_date.year - 1)\n                        else:\n                            if move.invoice_date.year == move.invoice_date.today().year - 2:\n                                if move.invoice_date.month > 6:\n                                    move.date = move.invoice_date\n                                else:\n                                    move.date = move.invoice_date.replace(year=move.invoice_date.year - 2)\n                            else:\n                                if move.invoice_date.year == move.invoice_date.today().year - 3:\n                                    if move.invoice_date.month > 9:\n                                        move.date = move.invoice_date\n                                    else:\n                                        move.date = move.invoice_date.replace(year=move.invoice_date.year - 3)\n                                else:\n                                    if move.invoice_date.year == move.invoice_date.today().year - 4:\n                                        if move.invoice_date.month > 12:\n                                            move.date = move.invoice_date\n                                        else:\n                                            move.date = move.invoice_date.replace(year=move.invoice_date.year - 4)\n                                    else:\n                                        if move.invoice_date.year == move.invoice_date.today().year - 5:\n                                            if move.invoice_date.month > 3:\n                                                move.date = move.invoice_date\n                                            else:\n                                                move.date = move.invoice_date.replace(year=move.invoice_date.year - 5)\n                                        else:\n                                            if move.invoice_date.year == move.invoice_", "CodeBleu_score": 21.917850011317476}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if move.date and not move.invoice_date:\n            move.invoice_date = move.date\n        if not move.date and move.invoice_date:\n            if not move.invoice_id.type in ('in_invoice', 'in_refund'):\n                move.date = move.invoice_date + relativedelta(days=1)\n            else:\n                move.date = move.invoice_date\n        if move.date and move.date!= move.invoice_date:\n            move.date = move.invoice_date\n            move.schedule_recompute()\n\n", "CodeBleu_score": 35.27596172705994}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if move.invoice_id:\n            if not move.date:\n                if move.invoice_id.type in ('in_invoice', 'in_refund'):\n                    move.date = move.invoice_id.date_invoice\n                else:\n                    move.date = move.invoice_id.date_due\n        elif not move.date:\n            move.date = fields.Date.today()\n        if move.date and move.date!= move.invoice_id.date_invoice:\n            move.date = move.invoice_id.date_invoice\n        if move.date and move.date!= move.invoice_id.date_due:\n            move.date = move.invoice_id.date_due\n        if move.date and move.date!= move.invoice_id.date_maturity:\n            move.date = move.invoice_id.date_maturity\n        if move.date and move.date!= move.invoice_id.date_due:\n            move.date = move.invoice_id.date_due\n        if move.date and move.date!= move.invoice_id.date_due:\n            move.date = move.invoice_id.date_due\n        if move.date and move.date!= move.invoice_id.date_due:\n            move.date = move.invoice_id.date_due\n        if move.date and move.date!= move.invoice_id.date_due:\n            move.date = move.invoice_id.date_due\n        if move.date and move.date!= move.invoice_id.date_due:\n            move.date = move.invoice_id.date_due\n        if move.date and move.date!= move.invoice_id.date_due:\n            move.date = move.invoice_id.date_due\n        if move.date and move.date!= move.invoice_id.date_due:\n            move.date = move.invoice_id.date_due\n        if move.date and move.date!= move.invoice_id.date_due:\n            move.date = move.invoice_id.date_due\n        if move.date and move.date!= move.invoice_id.date_due:\n            move.date = move.invoice_id.date_due\n        if move.date and move.date!= move.", "CodeBleu_score": 27.56471171318854}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for invoice in self:\n        if invoice.type in (\"in_invoice\", \"in_refund\"):\n            if invoice.partner_id.property_payment_term_id:\n                invoice.payment_term_id = invoice.partner_id.property_payment_term_id.id\n        elif invoice.type in (\"out_invoice\", \"out_refund\"):\n            if invoice.partner_id.property_supplier_payment_term_id:\n                invoice.payment_term_id = invoice.partner_id.property_supplier_payment_term_id.id\n        else:\n            invoice.payment_term_id = False\n\n", "CodeBleu_score": 33.932514711750514}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.move_type == 'out_invoice':\n            move.invoice_payment_term_id = move.partner_id.property_payment_term_id\n        elif move.move_type == 'in_invoice':\n            move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id\n        elif move.move_type == 'out_refund':\n            move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id\n        elif move.move_type == 'in_refund':\n            move.invoice_payment_term_id = move.partner_id.property_payment_term_id\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 43.813245874071995}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.move_type == \"out_invoice\":\n            if move.partner_id.property_payment_term_id:\n                move.payment_term_id = move.partner_id.property_payment_term_id\n        elif move.move_type == \"in_invoice\":\n            if move.partner_id.property_supplier_payment_term_id:\n                move.payment_term_id = move.partner_id.property_supplier_payment_term_id\n        else:\n            move.payment_term_id = False\n\n", "CodeBleu_score": 45.079083065162656}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        tax_group_id = False\n        if tax.country_id:\n            tax_group_id = self.env['account.tax.group'].search([('country_id', '=', tax.country_id.id), ('company_id', '=', tax.company_id.id)], limit=1)\n        if not tax_group_id and tax.company_id:\n            tax_group_id = self.env['account.tax.group'].search([('company_id', '=', tax.company_id.id)], limit=1)\n        tax.tax_group_id = tax_group_id\n\n", "CodeBleu_score": 25.189302750350993}, {"code": " def _compute_tax_group_id(self)\n\t\n    tax_groups = {}\n    for tax in self:\n        tax_groups[tax.id] = tax.tax_group_id.id\n    for tax in self:\n        if not tax.tax_group_id:\n            tax_groups[tax.id] = tax.tax_group_id.id\n            continue\n        for tax_group in tax.tax_group_id.child_ids:\n            if tax.company_id.id == tax_group.company_id.id and tax.country_id.id == tax_group.country_id.id:\n                tax_groups[tax.id] = tax_group.id\n                break\n    for tax in self:\n        tax.tax_group_id = tax_groups[tax.id]\n\n", "CodeBleu_score": 20.47690634869931}, {"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        tax.tax_group_id = False\n        tax_group_id = False\n        for tax_group in tax.tax_group_ids:\n            if tax_group.company_id == tax.company_id and tax_group.country_id == tax.country_id:\n                tax_group_id = tax_group.id\n                break\n        if not tax_group_id:\n            for tax_group in tax.tax_group_ids:\n                if tax_group.company_id == tax.company_id and not tax_group.country_id:\n                    tax_group_id = tax_group.id\n                    break\n        if tax_group_id:\n            tax.tax_group_id = tax_group_id\n\n", "CodeBleu_score": 21.785640595216076}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    session = requests.Session()\n    session.get(url + \"/base_import_module/login_upload\")\n    data = {\"login\": login, \"password\":, \"db\": db, \"force\": force}\n    files = {\"module\": (module_file, open(module_file, \"rb\"))}\n    response = session.post(url + \"/base_import_module/login_upload\", data=data, files=files)\n    return response.text\n\n", "CodeBleu_score": 31.524979039383215}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set the database in the session by accessing the login URL\n    with requests.Session() as session:\n        login_url = url + \"/base_import_module/login_upload\"\n        session.get(login_url)\n\n    # Prepare the POST request data, including login credentials, database name, and an optional force flag\n    data = {\n        \"login\": login,\n        \"password\":,\n        \"db\": db,\n        \"force\": force,\n    }\n\n    # Read the module file and upload it to the server's 'base_import_module/login_upload' endpoint\n    with open(module_file, \"rb\") as f:\n        response = session.post(url + \"/base_import_module/login_upload\", files={\"module_file\": f}, data=data)\n\n    # If the server does not have the required module installed or is outdated, raise an exception\n    if response.status_code!= 200:\n        raise Exception(\"The server does not have the required module installed or is outdated.\")\n\n    # Return the server's response text\n    return response.text\n\n", "CodeBleu_score": 48.30605335570425}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Prepare POST request data\n    post_data = {\n        \"login\": login,\n        \"password\":,\n        \"db\": db,\n        \"force\": force,\n    }\n    # Prepare the POST request\n    post_url = url + \"/base_import_module/login_upload\"\n    post_headers = {\n        \"Content-Type\": \"multipart/form-data\",\n    }\n    post_files = {\"file\": open(module_file, \"rb\")}\n    # Perform POST request\n    response = requests.post(post_url, data=post_data, headers=post_headers, files=post_files)\n    # Return server response\n    return response.text\n\n", "CodeBleu_score": 37.87730628946188}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t\n\n    # Retrieve configuration settings\n    db_name = os.environ['DB_NAME']\n    overwrite = os.environ['OVERWRITE']\n\n    # Create a new database registry\n    registry = odoo.service.db.RegistryManager.new(db_name, update_module=True)\n    with registry.cursor() as cr:\n        # Create a new TranslationImporter\n        importer = odoo.addons.base.ir.translation.ir_translation_import.TranslationImporter(cr)\n        # Load translation files\n        importer.load_translations(overwrite=overwrite)\n\n", "CodeBleu_score": 39.729365176954815}, {"code": "def import_translation()\n\t\n    # Get the database name and overwrite settings from the config file\n    config_file = Path(__file__).parent / \"config.ini\"\n    with open(config_file, \"r\") as config:\n        config_data = config.read()\n        db_name = re.search(r\"^db_name=(.*)\", config_data).group(1)\n        overwrite = re.search(r\"^overwrite=(.*)\", config_data).group(1)\n\n    # Create a new database registry and use a cursor to initialize a TranslationImporter\n    odoo.tools.config.config = odoo.tools.config.load_config(config_file)\n    registry = odoo.service.db.RegistryManager.get(db_name)\n    with registry.cursor() as cr:\n        importer = odoo.addons.base.ir.translation.import_translations(cr, db_name, overwrite)\n\n    # Load translation files and save the translations\n    files = [\n        Path(__file__).parent / \"translations/odoo_translation.csv\",\n        Path(__file__).parent / \"translations/odoo_translation_fr.csv\",\n    ]\n    for file in files:\n        importer.import_file(file)\n    importer.save()\n\n", "CodeBleu_score": 45.467900244337876}, {"code": "def import_translation()\n\t\n    # Get database name and overwrite settings\n    db_name = get_db_name()\n    overwrite = get_overwrite()\n\n    # Create new database registry and initialize a TranslationImporter\n    registry = odoo.service.db.RegistryManager.new(db_name, update_module=True)\n    with registry.cursor() as cr:\n        importer = odoo.tools.translate.TranslationImporter(cr, overwrite=overwrite)\n\n    # Load translation files and save the translations\n    importer.load_translations()\n    importer.save_translations()\n\n", "CodeBleu_score": 33.89377343138257}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\t\n    if name in self.children:\n        return self.children[name]\n    node = Node(name, info, self.depth + 1)\n    if self.parent is not None:\n        node.parent = self.parent\n        node.depth = self.depth + 1\n        node.children = self.children\n        node.ancestors = self.ancestors + [self.name]\n        node.descendants = self.descendants + [self.name]\n    self.children[name] = node\n    self.children = sorted(self.children.items(), key=lambda x: x[0])\n    return node\n\n", "CodeBleu_score": 37.40043645910966}, {"code": "def add_child(self, name, info)\n\t\n    if not self.children:\n        self.children = []\n    new_node = Node(name, info, self.depth + 1)\n    if self.parent:\n        new_node.parent = self.parent\n        new_node.depth = self.depth + 1\n        new_node.children = self.children\n        new_node.attributes = self.attributes\n    self.children.append(new_node)\n    self.children = sorted(self.children, key=lambda x: x.name)\n    return new_node\n\n", "CodeBleu_score": 36.292412258481555}, {"code": "def add_child(self, name, info)\n\t\n    if name in self.children:\n        return self.children[name]\n    node = Node(name, info, self.depth + 1)\n    self.children[name] = node\n    if self.parent:\n        node.parent = self.parent\n        node.depth = self.depth + 1\n        node.parent.children[name] = node\n        node.parent.children = sorted(node.parent.children.values(), key=lambda child: child.name)\n    return node\n\n", "CodeBleu_score": 37.38260363402445}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {date: 0 for date in dates}\n    for gl_entry in gl_entries:\n        if gl_entry.account == account:\n            if gl_entry.account_type == \"Asset\":\n                result[gl_entry.posting_date] += gl_entry.debit - gl_entry.credit\n            elif gl_entry.account_type in [\"Liability\", \"Equity\"]:\n                result[gl_entry.posting_date] -= gl_entry.debit - gl_entry.credit\n            else:\n                result[gl_entry.posting_date] += gl_entry.credit - gl_entry.debit\n\n    return result\n\n", "CodeBleu_score": 19.11237790984271}, {"code": "def build_result(account, dates, gl_entries)\n\t\n\n    result = {\n        \"account\": account.name,\n        \"account_name\": account.account_name,\n        \"account_type\": account.account_type,\n        \"root_type\": account.root_type,\n        \"currency\": account.currency,\n        \"dates\": dates,\n        \"balances\": [0] * len(dates),\n    }\n\n    if result[\"root_type\"] not in [\"Asset\", \"Expense\"]:\n        result[\"balances\"] = [-x for x in result[\"balances\"]]\n\n    for entry in gl_entries:\n        if entry.account == account.name:\n            date = getdate(entry.posting_date)\n            if date in dates:\n                index = dates.index(date)\n                result[\"balances\"][index] += entry.debit - entry.credit\n\n    return result\n\n", "CodeBleu_score": 26.831686940791634}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {}\n    result[\"dates\"] = dates\n    result[\"balances\"] = [0] * len(dates)\n    result[\"root_type\"] = frappe.get_value(\"Account\", account, \"root_type\")\n    for entry in gl_entries:\n        if entry.posting_date in dates:\n            result[\"balances\"][dates.index(entry.posting_date)] += entry.debit - entry.credit\n    if result[\"root_type\"] not in (\"Asset\", \"Expense\"):\n        result[\"balances\"] = [-x for x in result[\"balances\"]]\n    for i in range(1, len(dates)):\n        result[\"balances\"][i] += result[\"balances\"][i - 1]\n    return result\n\n", "CodeBleu_score": 35.10219881166769}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.receivable_account_type!= self.receivable_account_type_old:\n        if self.receivable_account_type not in [\"Receivable\", \"Payable\"]:\n            if self.account_type == \"Receivable\" or self.account_type == \"Payable\":\n                if self.account_type == \"Receivable\":\n                    account_type = \"Payable\"\n                else:\n                    account_type = \"Receivable\"\n                if self.get_account_type_change_warning(account_type):\n                    self.add_comment(\"Account type change from {0} to {1} may cause problems in the Accounts report. Please check the Accounts report.\".format(self.receivable_account_type_old, account_type))\n            else:\n                if self.account_type == \"Receivable\":\n                    account_type = \"Payable\"\n                else:\n                    account_type = \"Receivable\"\n                if self.get_account_type_change_warning(account_type):\n                    self.add_comment(\"Account type change from {0} to {1} may cause problems in the Accounts report. Please check the Accounts report.\".format(self.receivable_account_type_old, account_type))\n\n    if self.payable_account_type!= self.payable_account_type_old:\n        if self.payable_account_type not in [\"Receivable\", \"Payable\"]:\n            if self.account_type == \"Receivable\" or self.account_type == \"Payable\":\n                if self.account_type == \"Receivable\":\n                    account_type = \"Payable\"\n                else:\n                    account_type = \"Receivable\"\n                if self.get_account_type_change_warning(account_type):\n                    self.add_comment(\"Account type change from {0} to {1} may cause problems in the Accounts report. Please check the Accounts report.\".format(self.payable_account_type_old, account_type))\n            else:\n                if self.account_type == \"Receivable\":\n                    account_type = \"Payable\"\n                else:\n                    account_type = \"Receivable\"\n                if self.get_account_type_change_warning(account_type):\n                    self.add_comment(\"Account", "CodeBleu_score": 20.973191178848733}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.get(\"account_type\") in [\"Receivable\", \"Payable\"] and self.get(\"account_type\")!= self.get(\"account_type_before_save\"):\n        if self.account_type_before_save == \"Receivable\" or self.account_type_before_save == \"Payable\":\n            if self.get(\"account_type\")!= \"Receivable\" and self.get(\"account_type\")!= \"Payable\":\n                if self.get(\"account_type\") == \"Bank\":\n                    self.set(\"account_type\", \"Bank\")\n                else:\n                    self.set(\"account_type\", \"Receivable\")\n                    self.set(\"account_type_before_save\", \"Receivable\")\n            if self.account_type_before_save == \"Receivable\" or self.account_type_before_save == \"Payable\":\n                if self.get(\"account_type\") == \"Receivable\" or self.get(\"account_type\") == \"Payable\":\n                    if self.get(\"account_type\")!= \"Receivable\" and self.get(\"account_type\")!= \"Payable\":\n                        self.set(\"account_type\", \"Receivable\")\n                        self.set(\"account_type_before_save\", \"Receivable\")\n                    if self.get(\"account_type\") == \"Receivable\" or self.get(\"account_type\") == \"Payable\":\n                        if self.get(\"account_type\")!= \"Receivable\" and self.get(\"account_type\")!= \"Payable\":\n                            self.set(\"account_type\", \"Receivable\")\n                            self.set(\"account_type_before_save\", \"Receivable\")\n                        if self.get(\"account_type\") == \"Receivable\" or self.get(\"account_type\") == \"Payable\":\n                            if self.get(\"account_type\")!= \"Receivable\" and self.get(\"account_type\")!= \"Payable\":\n                                self.set(\"account_type\", \"Receivable\")\n                                self.set(\"account_type_before_save\", \"Receivable\")\n                            if self.get(\"account_type\") == \"Receivable\" or self.get(\"account_type\") == \"Payable\":\n                                if self.get(\"account_type", "CodeBleu_score": 17.99850306193389}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type!= self.get_old(\"account_type\"):\n        if self.account_type in [\"Receivable\", \"Payable\"]:\n            if self.is_receivable_payable_account():\n                self.validate_receivable_payable_account_type_warning()\n        else:\n            if self.is_receivable_payable_account():\n                self.validate_receivable_payable_account_type_error()\n\n", "CodeBleu_score": 18.21726127544755}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t\n    if self.currency:\n        self.is_currency_explicitly_specified = 1\n        self.is_currency_valid = 1\n        self.currency_is_base_currency = self.currency == self.company_currency\n        self.is_currency_same_as_company_currency = self.currency == self.company_currency\n        self.is_currency_same_as_account_currency = self.currency == self.account_currency\n        self.is_currency_same_as_ledger_entries = self.currency == self.get_ledger_entries_currency()\n    else:\n        self.is_currency_explicitly_specified = 0\n        self.is_currency_valid = 0\n        self.currency_is_base_currency = 0\n        self.is_currency_same_as_company_currency = 0\n        self.is_currency_same_as_account_currency = 0\n        self.is_currency_same_as_ledger_entries = 0\n        self.currency = self.company_currency\n\n", "CodeBleu_score": 23.081571421614065}, {"code": "def validate_account_currency(self)\n\t\n    if self.account_currency and self.account_currency!= self.company_currency:\n        if self.get_account_currency_entries():\n            throw(_(\"Currency mismatch for account {0}. Please change the currency or delete the existing entries.\").format(self.account_name))\n\n    if not self.account_currency:\n        self.account_currency = self.company_currency\n\n", "CodeBleu_score": 24.61252392920276}, {"code": "def validate_account_currency(self)\n\t\n    if self.account_currency == self.company_currency:\n        self.is_currency_explicit = 1\n    else:\n        self.is_currency_explicit = 0\n        self.account_currency = self.company_currency\n\n    if self.account_currency!= self.company_currency:\n        self.validate_account_currency_in_ledger_entries()\n\n", "CodeBleu_score": 17.05552839262644}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    aggregated_entries = {}\n    for entry in entries:\n        key = get_key(entry, accounting_dimensions)\n        if key not in aggregated_entries:\n            aggregated_entries[key] = entry\n        else:\n            aggregated_entries[key].debit += entry.debit\n            aggregated_entries[key].credit += entry.credit\n            aggregated_entries[key].account_currency_debit += entry.account_currency_debit\n            aggregated_entries[key].account_currency_credit += entry.account_currency_credit\n\n    return aggregated_entries\n\n", "CodeBleu_score": 26.18794205372091}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    # initialize dictionary to store aggregated entries\n    aggregated_entries = {}\n\n    # iterate through each entry\n    for entry in entries:\n        # get accounting dimensions for the entry\n        entry_dimensions = get_accounting_dimensions(entry)\n\n        # check if accounting dimensions are specified\n        if accounting_dimensions:\n            # check if entry dimensions match with the specified accounting dimensions\n            if all(\n                dimension in entry_dimensions\n                for dimension in accounting_dimensions\n            ):\n                # get the key for the entry\n                key = tuple(entry_dimensions[dimension] for dimension in accounting_dimensions)\n            else:\n                # skip entry if accounting dimensions do not match\n                continue\n        else:\n            # get the key for the entry\n            key = tuple(entry_dimensions[dimension] for dimension in entry_dimensions)\n\n        # get the account currency for the entry\n        account_currency = entry.get(\"account_currency\")\n\n        # get the debit and credit amounts for the entry\n        debit = entry.get(\"debit\")\n        credit = entry.get(\"credit\")\n\n        # get the aggregated entries for the key\n        aggregated_entry = aggregated_entries.get(key)\n\n        # check if aggregated entries for the key exist\n        if aggregated_entry:\n            # update the debit and credit amounts in account currency\n            aggregated_entry[\"debit\"] = (\n                aggregated_entry[\"debit\"] + debit\n            ) if account_currency == \"default\" else aggregated_entry[\"debit\"] + debit\n            aggregated_entry[\"credit\"] = (\n                aggregated_entry[\"credit\"] + credit\n            ) if account_currency == \"default\" else aggregated_entry[\"credit\"] + credit\n        else:\n            # create an entry for the key\n            aggregated_entry = {\n                \"account_currency\": account_currency,\n                \"debit\": debit,\n                \"credit\": credit,\n            }\n\n        # update the aggregated entries dictionary\n        aggregated_entries[key] = aggregated_entry\n\n    # return the aggregated entries dictionary\n    return aggregated_entries\n\n", "CodeBleu_score": 28.846421548342644}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n\n    if not accounting_dimensions:\n        return entries\n\n    # get the last account closing balance for the accounting dimensions\n    last_account_closing_balance = get_last_account_closing_balance(accounting_dimensions)\n\n    # merge entries with the last account closing balance\n    for entry in entries:\n        key = get_key_for_aggregate(entry, accounting_dimensions)\n        if key not in last_account_closing_balance:\n            last_account_closing_balance[key] = {\n                \"debit\": 0.0,\n                \"credit\": 0.0,\n                \"debit_in_account_currency\": 0.0,\n                \"credit_in_account_currency\": 0.0,\n            }\n\n        entry[\"debit\"] += last_account_closing_balance[key][\"debit\"]\n        entry[\"credit\"] += last_account_closing_balance[key][\"credit\"]\n        entry[\"debit_in_account_currency\"] += last_account_closing_balance[key][\n            \"debit_in_account_currency\"\n        ]\n        entry[\"credit_in_account_currency\"] += last_account_closing_balance[key][\n            \"credit_in_account_currency\"\n        ]\n\n    # remove the last account closing balance from the dictionary\n    for key in last_account_closing_balance:\n        del last_account_closing_balance[key]\n\n    return entries\n\n", "CodeBleu_score": 28.528782660388373}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.get(\"supplier\"):\n        supplier = frappe.get_doc(\"Supplier\", self.get(\"supplier\"))\n        if supplier.is_blocked:\n            if supplier.hold_type == self.doctype:\n                if supplier.release_date:\n                    if getdate(supplier.release_date) < nowdate():\n                        raise frappe.exceptions.ValidationError(\n                            _(\"Supplier {0} is on hold and cannot be used for this transaction.\").format(\n                                supplier.supplier_name\n                            )\n                        )\n                else:\n                    raise frappe.exceptions.ValidationError(\n                        _(\"Supplier {0} is on hold and cannot be used for this transaction.\").format(\n                            supplier.supplier_name\n                        )\n                    )\n\n", "CodeBleu_score": 26.67956607348326}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.is_supplier_payment:\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.is_blocked:\n            if supplier.hold_type == self.doctype:\n                if supplier.release_date:\n                    if getdate(supplier.release_date) < getdate(nowdate()):\n                        frappe.throw(_(\"Supplier {0} is on hold and cannot proceed with this transaction.\").format(supplier.name))\n                else:\n                    frappe.throw(_(\"Supplier {0} is on hold and cannot proceed with this transaction.\").format(supplier.name))\n            else:\n                frappe.throw(_(\"Supplier {0} is on hold and cannot proceed with this transaction.\").format(supplier.name))\n    else:\n        if self.supplier:\n            supplier = frappe.get_doc(\"Supplier\", self.supplier)\n            if supplier.is_blocked:\n                if supplier.hold_type == self.doctype:\n                    if supplier.release_date:\n                        if getdate(supplier.release_date) < getdate(nowdate()):\n                            frappe.throw(_(\"Supplier {0} is on hold and cannot proceed with this transaction.\").format(supplier.name))\n                    else:\n                        frappe.throw(_(\"Supplier {0} is on hold and cannot proceed with this transaction.\").format(supplier.name))\n                else:\n                    frappe.throw(_(\"Supplier {0} is on hold and cannot proceed with this transaction.\").format(supplier.name))\n\n", "CodeBleu_score": 30.405567014568646}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.is_return:\n        if self.supplier_name:\n            supplier_details = frappe.db.get_value(\"Supplier\", self.supplier_name, [\"supplier_type\", \"blocked\", \"release_date\"])\n            if supplier_details:\n                supplier_type, blocked, release_date = supplier_details\n                if blocked == \"Yes\":\n                    if supplier_type == \"Supplier\":\n                        if release_date:\n                            release_date = getdate(release_date)\n                            if release_date > today():\n                                raise frappe.ValidationError(_(\"Supplier {0} is on hold. Please release the hold before proceeding with this transaction.\").format(self.supplier_name))\n                        else:\n                            raise frappe.ValidationError(_(\"Supplier {0} is on hold. Please release the hold before proceeding with this transaction.\").format(self.supplier_name))\n\n    elif self.supplier:\n        supplier_details = frappe.db.get_value(\"Supplier\", self.supplier, [\"supplier_type\", \"blocked\", \"release_date\"])\n        if supplier_details:\n            supplier_type, blocked, release_date = supplier_details\n            if blocked == \"Yes\":\n                if supplier_type == \"Supplier\":\n                    if release_date:\n                        release_date = getdate(release_date)\n                        if release_date > today():\n                            raise frappe.ValidationError(_(\"Supplier {0} is on hold. Please release the hold before proceeding with this transaction.\").format(self.supplier))\n                    else:\n                        raise frappe.ValidationError(_(\"Supplier {0} is on hold. Please release the hold before proceeding with this transaction.\").format(self.supplier))\n\n", "CodeBleu_score": 31.69552192634162}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    # get the doctypes for which the current document is a repost\n    repost_doctypes = frappe.get_all(\"Repost Doctype\", fields=[\"repost_doctype\"], filters={\"parent\": self.doctype})\n    if not repost_doctypes:\n        return\n\n    # get the rows for which the current document is a repost\n    repost_rows = frappe.db.sql(\n        \"\"\"\n            SELECT\n                repost_doctype,\n                parent,\n                repost_voucher_type,\n                repost_voucher_no\n            FROM `tabRepost Doctype`\n            WHERE parent=%s AND repost_doctype IN (%s)\n        \"\"\"\n        % (\n            self.name,\n            \", \".join([\"%s\"] * len(repost_doctypes)),\n        ),\n        tuple(repost_doctypes),\n    )\n    if not repost_rows:\n        return\n\n    # organize the rows by parent\n    repost_rows_by_doctype = defaultdict(list)\n    for row in repost_rows:\n        repost_rows_by_doctype[row[0]].append(row)\n\n    # get the parent documents\n    for doctype, rows in repost_rows_by_doctype.items():\n        for row in rows:\n            parent = frappe.get_doc(doctype, row[1])\n            if not parent:\n                continue\n\n            # remove the relevant rows from either \"repost_vouchers\" or \"vouchers\" fields\n            if row[2] == \"Repost Voucher\":\n                parent.repost_vouchers = [\n                    voucher\n                    for voucher in parent.repost_vouchers\n                    if voucher.repost_voucher_type!= row[2]\n                    or voucher.repost_voucher_no!= row[3]\n                ]\n            else:\n                parent.vouchers = [\n                    voucher\n                    for voucher in parent.vouchers\n                    if voucher.voucher_type!= row[2]\n                    or voucher.voucher_no!= row[3]\n                ]\n\n            # set flags to ignore validation and links\n            parent.ignore_validation = True\n            parent.ignore_links = True\n            parent.save()\n\n", "CodeBleu_score": 23.440349526970582}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    if self.doctype == \"Sales Invoice\":\n        repost_doctypes = [\"Sales Invoice\", \"Sales Order\"]\n    elif self.doctype == \"Purchase Invoice\":\n        repost_doctypes = [\"Purchase Invoice\", \"Purchase Order\"]\n    else:\n        return\n\n    repost_doctypes = [\n        d for d in repost_doctypes if d!= self.doctype\n    ]  # remove the current doctype from the list\n    repost_doctypes = [d for d in repost_doctypes if d]  # remove empty entries\n    if not repost_doctypes:\n        return\n\n    repost_doctypes_map = defaultdict(list)\n    for repost_doctype in repost_doctypes:\n        repost_doctypes_map[repost_doctype] = self.db.sql(\n            \"\"\"\n            SELECT name, parent, parenttype\n            FROM `tab{doctype}`\n            WHERE\n                ifnull(repost_vouchers, '') like '%,{name},%'\n                OR ifnull(vouchers, '') like '%,{name},%'\n                OR ifnull(repost_vouchers, '') like '%,{name},%'\n                OR ifnull(vouchers, '') like '%,{name},%'\n            \"\"\".format(\n                doctype=repost_doctype\n            ),\n            as_dict=True,\n        )\n\n    for repost_doctype in repost_doctypes_map:\n        for row in repost_doctypes_map[repost_doctype]:\n            if row.parenttype == \"Sales Invoice\" or row.parenttype == \"Purchase Invoice\":\n                parent_doctype = \"Sales Invoice\" if row.parenttype == \"Sales Invoice\" else \"Purchase Invoice\"\n                parent_doc = frappe.get_doc(parent_doctype, row.parent)\n                parent_doc.repost_vouchers = parent_doc.repost_vouchers.replace(\n                    f\",{row.name},\", \"\"\n                )\n                parent_doc.vouchers = parent_doc.vouchers.replace(f\",{row.name},\", \"\")\n                parent_doc.ignore_validation = 1\n                parent_doc.flags.ignore_links = 1\n                parent_doc.save()\n            elif row.parenttype == \"Sales Order\" or row.parenttype == \"Purchase Order\":\n                parent_doctype = \"Sales Order\" if row.", "CodeBleu_score": 21.530320455520133}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = [\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Receipt\",\n        \"Sales Order\",\n        \"Purchase Order\",\n        \"Delivery Note\",\n        \"Sales Order\",\n        \"Purchase Order\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Sales Order\",\n        \"Delivery Note\",\n        \"Sales Invoice\",\n        \"Sales Order\",\n        \"Delivery Note\",\n        \"Purchase Order\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Sales Order\",\n        \"Delivery Note\",\n        \"Sales Invoice\",\n        \"Sales Order\",\n        \"Delivery Note\",\n        \"Purchase Order\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Sales Order\",\n        \"Delivery Note\",\n        \"Sales Invoice\",\n        \"Sales Order\",\n        \"Delivery Note\",\n        \"Purchase Order\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Sales Order\",\n        \"Delivery Note\",\n        \"Sales Invoice\",\n        \"Sales Order\",\n        \"Delivery Note\",\n        \"Purchase Order\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Sales Order\",\n        \"Delivery Note\",\n        \"Sales Invoice\",\n        \"Sales Order\",\n        \"Delivery Note\",\n        \"Purchase Order\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Sales Order\",\n        \"Delivery Note\",\n        \"Sales Invoice\",\n        \"Sales Order\",\n        \"Delivery Note\",\n        \"Purchase Order\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Sales Order\",\n        \"Delivery Note\",\n        \"Sales Invoice\",\n        \"Sales Order\",\n        \"Delivery Note\",\n        \"Purchase Order\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Sales Order\",\n        \"Delivery Note\",\n        \"Sales Invoice\",\n        \"Sales Order\",\n        \"Delivery Note\",\n        \"Purchase Order\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Sales Order\",\n        \"Delivery Note\",\n        \"Sales Invoice\",\n        \"Sales Order\",\n        \"Delivery Note\",\n        \"Purchase Order\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Sales Order\",\n        \"Delivery Note\",\n        \"Sales Invoice\",\n        \"Sales Order\",\n        \"Delivery Note\",\n        \"Purchase Order\",\n        \"Purchase Receipt\",\n        \"Purchase Invoice\",\n        \"Sales Order\",\n        \"Delivery Note\",\n        \"Sales Invoice\",\n        \"Sales Order\",\n        \"Delivery Note\",\n        \"Purchase Order\",\n        \"Purchase Receipt\",\n       ", "CodeBleu_score": 3.1455602071724877}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    # Authenticate the client\n    client = plaid.Client(client_id=self.client_id, secret=self.secret, public_key=self.public_key, environment=self.environment)\n    # Construct the query parameters\n    query_params = {\n        \"start_date\": start_date,\n        \"end_date\": end_date,\n        \"count\": 500,\n    }\n    if account_id:\n        query_params[\"account_ids\"] = [account_id]\n    # Fetch the transactions\n    transactions = []\n    while True:\n        try:\n            response = client.Transactions.get(**query_params)\n        except APIError as e:\n            # Handle specific errors\n            if e.code == 400:\n                raise InvalidRequestError(e.message)\n            elif e.code == 429:\n                raise ItemError(e.message)\n            else:\n                raise e\n        except Exception as e:\n            # Handle other exceptions\n            raise e\n        # Handle successful response\n        transactions.extend(response.get(\"transactions\", []))\n        # Check if all transactions have been retrieved\n        if len(transactions) >= response.get(\"total_transactions\"):\n            break\n        # Update the query parameters\n        query_params[\"offset\"] = response.get(\"offset\")\n    return transactions\n\n", "CodeBleu_score": 37.102157448171184}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    client = plaid.Client(client_id=self.client_id, secret=self.secret, public_key=self.public_key, environment=self.environment)\n    try:\n        access_token = client.exchange_public_token(self.public_token)\n    except APIError as e:\n        raise e\n    except Exception as e:\n        raise e\n    transactions = []\n    try:\n        transactions = client.get_transactions(access_token, start_date, end_date, account_id=account_id)\n    except APIError as e:\n        raise e\n    except Exception as e:\n        raise e\n    while len(transactions) < transactions.total_transactions:\n        try:\n            transactions = client.get_transactions(access_token, start_date, end_date, offset=transactions.total_transactions, account_id=account_id)\n        except APIError as e:\n            raise e\n        except Exception as e:\n            raise e\n    return transactions\n\n", "CodeBleu_score": 37.4188179500324}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    client = plaid.Client(client_id=self.client_id, secret=self.secret, public_key=self.public_key)\n    transactions = []\n    while True:\n        try:\n            response = client.Transactions.get(\n                access_token=self.access_token,\n                start_date=start_date,\n                end_date=end_date,\n                count=100,\n                offset=len(transactions),\n                account_ids=[account_id] if account_id else None,\n            )\n        except APIError as e:\n            if e.status_code == 400 and \"item_id\" in e.error_code:\n                raise ItemError(\n                    _(\"Item {0} not found\").format(self.item_id), e.status_code\n                )\n            else:\n                raise\n        except InvalidRequestError as e:\n            if \"item_id\" in e.error_code:\n                raise ItemError(\n                    _(\"Item {0} not found\").format(self.item_id), e.status_code\n                )\n            else:\n                raise\n        except Exception as e:\n            raise\n        else:\n            transactions.extend(response[\"transactions\"])\n            if len(transactions) == response[\"total_transactions\"]:\n                break\n    return transactions\n\n", "CodeBleu_score": 32.708943395652604}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t\n    try:\n        bank_name = response[\"institution\"][\"name\"]\n        bank_id = response[\"institution\"][\"id\"]\n        bank_logo_url = response[\"institution\"][\"logo\"]\n        bank_country = response[\"institution\"][\"country\"]\n        bank_mfa = response[\"institution\"][\"mfa\"]\n        bank_mfa_type = response[\"institution\"][\"mfa_type\"]\n        bank_type = response[\"institution\"][\"type\"]\n        bank_products = response[\"institution\"][\"products\"]\n        bank_status = response[\"institution\"][\"status\"]\n        bank_url = response[\"institution\"][\"url\"]\n        bank_favicon_url = response[\"institution\"][\"favicon\"]\n        bank_primary_color = response[\"institution\"][\"primary\"]\n        bank_secondary_color = response[\"institution\"][\"secondary\"]\n        bank_support_url = response[\"institution\"][\"support_url\"]\n        bank_support_email = response[\"institution\"][\"support_email\"]\n        bank_support_phone_number = response[\"institution\"][\"support_phone_number\"]\n        bank_support_contact_email = response[\"institution\"][\"support_contact_email\"]\n        bank_support_contact_name = response[\"institution\"][\"support_contact_name\"]\n        bank_support_contact_phone_number = response[\"institution\"][\"support_contact_phone_number\"]\n        bank_support_contact_twitter = response[\"institution\"][\"support_contact_twitter\"]\n        bank_support_contact_facebook = response[\"institution\"][\"support_contact_facebook\"]\n        bank_support_contact_linkedin = response[\"institution\"][\"support_contact_linkedin\"]\n        bank_support_contact_instagram = response[\"institution\"][\"support_contact_instagram\"]\n        bank_support_contact_youtube = response[\"institution\"][\"support_contact_youtube\"]\n        bank_support_contact_pinterest = response[\"institution\"][\"support_contact_pinterest\"]\n        bank_support_contact_website = response[\"institution\"][\"support_contact_website\"]\n        bank_support_contact_blog = response[\"institution\"][\"support_contact_blog\"]\n        bank_support_contact_email = response[\"institution\"][\"support_contact_email\"]\n        bank_support_contact_phone_number = response[\"institution\"][\"support_contact_phone_number\"]\n        bank_support_contact_twitter = response[\"institution\"][\"support_contact_twitter\"]\n        bank_support_contact_facebook = response[\"institution\"][\"support_contact_facebook\"]\n        bank_support_contact", "CodeBleu_score": 18.33674322765786}, {"code": "def add_institution(token, response)\n\t\n    try:\n        bank_id = response.get(\"item\").get(\"institution_id\")\n        institution_name = response.get(\"item\").get(\"institution_name\")\n        bank_logo_url = response.get(\"item\").get(\"logo\")\n        bank_type = response.get(\"item\").get(\"type\")\n        bank_subtype = response.get(\"item\").get(\"subtype\")\n        bank_country = response.get(\"item\").get(\"country\")\n        bank_region = response.get(\"item\").get(\"region\")\n        bank_phone_number = response.get(\"item\").get(\"phone_number\")\n        bank_url = response.get(\"item\").get(\"url\")\n        bank_mfa_type = response.get(\"item\").get(\"mfa_type\")\n        bank_mfa_required = response.get(\"item\").get(\"mfa_required\")\n        bank_mfa_config = response.get(\"item\").get(\"mfa_config\")\n        bank_mfa_enabled = response.get(\"item\").get(\"mfa_enabled\")\n        bank_mfa_enabled_for_all = response.get(\"item\").get(\"mfa_enabled_for_all\")\n        bank_mfa_enabled_for_all_accounts = response.get(\"item\").get(\"mfa_enabled_for_all_accounts\")\n        bank_mfa_enabled_for_all_categories = response.get(\"item\").get(\"mfa_enabled_for_all_categories\")\n        bank_mfa_enabled_for_all_transactions = response.get(\"item\").get(\"mfa_enabled_for_all_transactions\")\n        bank_mfa_enabled_for_all_assets = response.get(\"item\").get(\"mfa_enabled_for_all_assets\")\n        bank_mfa_enabled_for_all_liabilities = response.get(\"item\").get(\"mfa_enabled_for_all_liabilities\")\n        bank_mfa_enabled_for_all_payees = response.get(\"item\").get(\"mfa_enabled_for_all_payees\")\n        bank_mfa_enabled_for_all_payees_categories = response.get(\"item\").get(\"mfa_enabled_for_all_payees_categories\")\n        bank_mfa_enabled_for_", "CodeBleu_score": 21.155706668351083}, {"code": "def add_institution(token, response)\n\t\n\n    try:\n        bank_id = response[\"institution\"][\"id\"]\n        bank_name = response[\"institution\"][\"name\"]\n        bank_logo = response[\"institution\"][\"logo\"]\n        bank_url = response[\"institution\"][\"url\"]\n        bank_country = response[\"institution\"][\"country\"]\n        bank_phone = response[\"institution\"][\"phone\"]\n        bank_products = response[\"institution\"][\"products\"]\n        bank_mfa = response[\"institution\"][\"mfa\"]\n        bank_support = response[\"institution\"][\"support\"]\n        bank_products_string = \", \".join(bank_products)\n        bank_mfa_string = \", \".join(bank_mfa)\n        bank_support_string = \", \".join(bank_support)\n\n        if bank_id:\n            bank = frappe.get_doc(\n                {\n                    \"doctype\": \"Plaid Bank\",\n                    \"bank_id\": bank_id,\n                    \"name\": bank_name,\n                    \"logo\": bank_logo,\n                    \"url\": bank_url,\n                    \"country\": bank_country,\n                    \"phone\": bank_phone,\n                    \"products\": bank_products_string,\n                    \"mfa\": bank_mfa_string,\n                    \"support\": bank_support_string,\n                }\n            )\n            bank.save()\n            return bank\n        else:\n            frappe.throw(\n                _(\"Bank ID not found. Please try again.\")\n            )\n    except Exception as e:\n        frappe.log_error(\n            message=_(\n                \"An error occurred while adding the institution. Please try again. Error: {0}\"\n            ).format(e),\n            title=_(\"Error\"),\n        )\n\n", "CodeBleu_score": 34.890054144441265}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t\n\n    try:\n        # Get the last integration date for the bank and bank account\n        last_integration_date = frappe.db.get_value(\n            \"Plaid Account\",\n            {\"bank\": bank, \"bank_account\": bank_account},\n            \"last_integration_date\",\n        )\n\n        # If the last integration date is not set, set it to the current date\n        if not last_integration_date:\n            last_integration_date = today()\n\n        # Get the start and end dates for the transaction retrieval\n        start_date = last_integration_date\n        end_date = today()\n\n        # Fetch the transactions for the bank and bank account\n        transactions = PlaidConnector.get_transactions(\n            bank, bank_account, start_date, end_date\n        )\n\n        # Process the transactions into new bank transactions\n        for transaction in transactions:\n            process_transaction(transaction)\n\n        # Update the last integration date to the date of the oldest transaction\n        frappe.db.set_value(\n            \"Plaid Account\",\n            {\"bank\": bank, \"bank_account\": bank_account},\n            \"last_integration_date\",\n            transactions[0][\"date\"],\n        )\n\n        # Log the number of new transactions added\n        frappe.msgprint(\n            _(\"Added {0} new transactions for {1}\").format(\n                len(transactions), bank_account\n            )\n        )\n\n    except Exception as e:\n        # Log the error message\n        frappe.msgprint(\n            _(\"Error syncing transactions for {0} - {1}\").format(bank, e)\n        )\n\n", "CodeBleu_score": 32.90588337811577}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    plaid_settings = frappe.get_doc(\"Plaid Settings\", \"Plaid Settings\")\n    if not plaid_settings.enabled:\n        frappe.throw(_(\"Plaid is not enabled\"))\n\n    # Get the last integration date for the bank and bank account\n    last_integration_date = frappe.db.get_value(\n        \"Plaid Account\",\n        {\n            \"bank\": bank,\n            \"bank_account\": bank_account,\n        },\n        \"last_integration_date\",\n    )\n\n    # Get the start and end dates for the transaction retrieval\n    start_date = get_start_date(last_integration_date)\n    end_date = get_end_date(last_integration_date)\n\n    # Get the transactions from Plaid\n    try:\n        transactions = plaid_settings.get_transactions(\n            bank, bank_account, start_date, end_date\n        )\n    except ItemError as e:\n        frappe.log_error(\n            f\"Error fetching transactions from Plaid: {e.error_message}\",\n            \"Plaid\",\n            is_stacktrace=True,\n        )\n        return\n\n    # Process the transactions into new bank transactions\n    for transaction in transactions:\n        try:\n            process_transaction(transaction, bank, bank_account)\n        except Exception as e:\n            frappe.log_error(\n                f\"Error processing transaction: {e}\",\n                \"Plaid\",\n                is_stacktrace=True,\n            )\n\n    # Update the last integration date to the date of the oldest transaction\n    if transactions:\n        oldest_transaction_date = min(\n            [\n                transaction.get(\"date\", \"\")\n                for transaction in transactions\n                if transaction.get(\"date\", \"\")\n            ]\n        )\n        frappe.db.set_value(\n            \"Plaid Account\",\n            {\n                \"bank\": bank,\n                \"bank_account\": bank_account,\n            },\n            \"last_integration_date\",\n            oldest_transaction_date,\n        )\n\n    # Log the number of new transactions added\n    frappe.db.commit()\n    frappe.log_event(\n        \"Plaid\",\n        f\"Added {len(transactions)} new transactions for {bank} - {bank_account}\",\n        is_stacktrace=True,\n    )\n\n", "CodeBleu_score": 30.5482318588331}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        start_date = get_start_date(bank, bank_account)\n        end_date = get_end_date(bank, bank_account)\n\n        # Fetch transactions from Plaid\n        transactions = PlaidConnector.get_transactions(bank, bank_account, start_date, end_date)\n\n        # Process transactions into new bank transactions\n        new_transactions = process_transactions(transactions, bank, bank_account)\n\n        # Add new transactions to ERPNext\n        add_transactions(new_transactions)\n\n        # Update last integration date\n        update_last_integration_date(bank, bank_account)\n\n        # Log number of new transactions added\n        if new_transactions:\n            frappe.msgprint(_(\"Added {0} new transactions\").format(len(new_transactions)))\n    except ItemError as e:\n        frappe.msgprint(_(\"Error: {0}\").format(e.message))\n    except Exception as e:\n        frappe.msgprint(_(\"Error: {0}\").format(e))\n\n", "CodeBleu_score": 23.894615321859654}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t\n    try:\n        query_uri = self.get_query_uri(entity)\n        total_entries = self.get_total_entries(query_uri)\n        for i in range(0, total_entries, 1000):\n            entries = self.get_entries(query_uri, i)\n            self.preprocess_entries(entries)\n            self.save_entries(entries)\n    except Exception as e:\n        frappe.log_error(\n            \"Error while migrating entries for entity {0} from QuickBooks: {1}\".format(entity, str(e)),\n            \"QuickBooks Migration\"\n        )\n\n", "CodeBleu_score": 24.42788986670109}, {"code": "def _migrate_entries(self, entity)\n\t\n    try:\n        if entity == \"customer\":\n            query_uri = self.get_query_uri(\"customer\")\n            total_entries = self.get_total_entries(query_uri)\n            self.migrate_entries(entity, query_uri, total_entries)\n        elif entity == \"vendor\":\n            query_uri = self.get_query_uri(\"vendor\")\n            total_entries = self.get_total_entries(query_uri)\n            self.migrate_entries(entity, query_uri, total_entries)\n        elif entity == \"item\":\n            query_uri = self.get_query_uri(\"item\")\n            total_entries = self.get_total_entries(query_uri)\n            self.migrate_entries(entity, query_uri, total_entries)\n        elif entity == \"account\":\n            query_uri = self.get_query_uri(\"account\")\n            total_entries = self.get_total_entries(query_uri)\n            self.migrate_entries(entity, query_uri, total_entries)\n        elif entity == \"sales_order\":\n            query_uri = self.get_query_uri(\"sales_order\")\n            total_entries = self.get_total_entries(query_uri)\n            self.migrate_entries(entity, query_uri, total_entries)\n        elif entity == \"purchase_order\":\n            query_uri = self.get_query_uri(\"purchase_order\")\n            total_entries = self.get_total_entries(query_uri)\n            self.migrate_entries(entity, query_uri, total_entries)\n        elif entity == \"sales_invoice\":\n            query_uri = self.get_query_uri(\"sales_invoice\")\n            total_entries = self.get_total_entries(query_uri)\n            self.migrate_entries(entity, query_uri, total_entries)\n        elif entity == \"purchase_invoice\":\n            query_uri = self.get_query_uri(\"purchase_invoice\")\n            total_entries = self.get_total_entries(query_uri)\n            self.migrate_entries(entity, query_uri, total_entries)\n        elif entity == \"payment\":\n            query_uri = self.get_query_uri(\"payment\")\n            total_entries = self.get_total_entries(query_uri)\n            self.migrate_entries", "CodeBleu_score": 16.093023413935185}, {"code": "def _migrate_entries(self, entity)\n\t\n    # Get the total number of entries for the specified entity\n    query_uri = self.get_query_uri(entity)\n    total_entries = self.get_total_entries(query_uri)\n    # Create a list to store the entries\n    entries = []\n    # Calculate the number of batches\n    batch_size = 1000\n    num_batches = total_entries // batch_size + 1\n    # Iterate over the batches\n    for batch_num in range(1, num_batches + 1):\n        # Construct the query URI for the current batch\n        query_uri = self.get_query_uri(entity, batch_num)\n        # Get the entries for the current batch\n        entries_batch = self.get_entries(query_uri)\n        # Preprocess and save the entries\n        for entry in entries_batch:\n            entries.append(self.preprocess_entry(entry, entity))\n    # Return the list of entries\n    return entries\n\n", "CodeBleu_score": 18.028255084551283}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\t\n    if invoice.is_return:\n        return\n\n    if invoice.is_credit_note:\n        return\n\n    if invoice.is_opening_balance:\n        return\n\n    if invoice.is_opening_balance_against_customer:\n        return\n\n    if invoice.is_opening_balance_against_supplier:\n        return\n\n    if invoice.is_opening_balance_against_account:\n        return\n\n    if invoice.is_opening_balance_against_item:\n        return\n\n    if invoice.is_opening_balance_against_tax:\n        return\n\n    if invoice.is_opening_balance_against_cost_center:\n        return\n\n    if invoice.is_opening_balance_against_department:\n        return\n\n    if invoice.is_opening_balance_against_project:\n        return\n\n    if invoice.is_opening_balance_against_employee:\n        return\n\n    if invoice.is_opening_balance_against_lead:\n        return\n\n    if invoice.is_opening_balance_against_party:\n        return\n\n    if invoice.is_opening_balance_against_item_group:\n        return\n\n    if invoice.is_opening_balance_against_item_category:\n        return\n\n    if invoice.is_opening_balance_against_item_tax_category:\n        return\n\n    if invoice.is_opening_balance_against_item_tax_rate:\n        return\n\n    if invoice.is_opening_balance_against_item_tax_rule:\n        return\n\n    if invoice.is_opening_balance_against_item_tax_template:\n        return\n\n    if invoice.is_opening_balance_against_item_tax_code:\n        return\n\n    if invoice.is_opening_balance_against_item_tax_component:\n        return\n\n    if invoice.is_opening_balance_against_item_tax_rate_group:\n        return\n\n    if invoice.is_opening_balance_against_item_tax_rule_group:\n        return\n\n    if invoice.is_opening_balance_against_item_tax_rule_group_component:\n        return\n\n    if invoice.is_opening_balance_against_item_tax_rule_group_rate:\n        return\n\n    if invoice.is_opening_balance_against_item_tax_rule_group_rate_component:\n        return\n\n    if", "CodeBleu_score": 5.903311618393229}, {"code": "def _save_invoice(self, invoice)\n\t\n    if invoice.get(\"doctype\") == \"Sales Invoice\":\n        if invoice.get(\"linked_transactions\"):\n            for transaction in invoice.get(\"linked_transactions\"):\n                if transaction.get(\"type\") == \"StatementCharge\" or transaction.get(\"type\") == \"ReimburseCharge\":\n                    self.save_journal_entry(invoice)\n                    return\n        self.save_sales_invoice(invoice)\n    elif invoice.get(\"doctype\") == \"Journal Entry\":\n        self.save_journal_entry(invoice)\n    else:\n        frappe.throw(_(\"The invoice is not a Sales Invoice or a Journal Entry\"))\n\n", "CodeBleu_score": 23.622700872757207}, {"code": "def _save_invoice(self, invoice)\n\t\n    if invoice.get(\"type\") == \"Sales Invoice\":\n        self.save_invoice(invoice)\n    elif invoice.get(\"type\") == \"Journal Entry\":\n        self.save_journal_entry(invoice)\n    elif invoice.get(\"type\") == \"Sales Credit Note\":\n        self.save_credit_note(invoice)\n    elif invoice.get(\"type\") == \"Sales Receipt\":\n        self.save_sales_receipt(invoice)\n    elif invoice.get(\"type\") == \"Purchase Invoice\":\n        self.save_purchase_invoice(invoice)\n    elif invoice.get(\"type\") == \"Purchase Credit Note\":\n        self.save_purchase_credit_note(invoice)\n    elif invoice.get(\"type\") == \"Purchase Receipt\":\n        self.save_purchase_receipt(invoice)\n    elif invoice.get(\"type\") == \"Cash Sale\":\n        self.save_cash_sale(invoice)\n    elif invoice.get(\"type\") == \"Cash Receipt\":\n        self.save_cash_receipt(invoice)\n    elif invoice.get(\"type\") == \"Payment Entry\":\n        self.save_payment_entry(invoice)\n    elif invoice.get(\"type\") == \"Journal Entry\":\n        self.save_journal_entry(invoice)\n    elif invoice.get(\"type\") == \"Sales Order\":\n        self.save_sales_order(invoice)\n    elif invoice.get(\"type\") == \"Purchase Order\":\n        self.save_purchase_order(invoice)\n    elif invoice.get(\"type\") == \"Estimate\":\n        self.save_estimate(invoice)\n    elif invoice.get(\"type\") == \"Delivery Note\":\n        self.save_delivery_note(invoice)\n    elif invoice.get(\"type\") == \"Purchase Receipt\":\n        self.save_purchase_receipt(invoice)\n    elif invoice.get(\"type\") == \"Purchase Order\":\n        self.save_purchase_order(invoice)\n    elif invoice.get(\"type\") == \"Purchase Invoice\":\n        self.save_purchase_invoice(invoice)\n    elif invoice.get(\"type\") == \"Purchase Credit Note\":\n        self.save_purchase_credit_note(invoice)\n    elif invoice.get(\"type\") == \"Purchase Receipt\":\n        self.save_purchase_receipt(invoice)\n    elif invoice.get(\"type\") == \"Cash Sale\":\n        self.save_cash_sale(invoice)\n   ", "CodeBleu_score": 21.575683515716893}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    # calculate the interval between visits\n    interval = date_diff(start_date, end_date) / no_of_visit\n    # iterate to create the schedule\n    for i in range(no_of_visit):\n        schedule_list.append(add_days(start_date, cint(interval * i)))\n    # adjust dates to avoid holidays\n    schedule_list = [adjust_date_for_holidays(date, sales_person) for date in schedule_list]\n    return schedule_list\n\n", "CodeBleu_score": 16.55857293859131}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    # get list of holidays\n    holiday_list = get_holiday_list_for_employee(sales_person)\n    # get the interval between visits\n    interval = date_diff(end_date, start_date) / (no_of_visit - 1)\n    # create a list of dates\n    dates = []\n    for i in range(no_of_visit):\n        dates.append(add_days(start_date, i * interval))\n    # adjust the dates to avoid holidays\n    for i in range(len(dates)):\n        dates[i] = get_adjusted_date(dates[i], holiday_list)\n    return dates\n\n", "CodeBleu_score": 22.647116048326687}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    interval = date_diff(end_date, start_date) / (no_of_visit - 1)\n    for i in range(no_of_visit):\n        schedule_list.append(add_days(start_date, i * interval))\n    schedule_list = adjust_schedule_list(schedule_list, sales_person)\n    return schedule_list\n\n", "CodeBleu_score": 15.689119345933793}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\t\t$data['title'] = $this->title;\n\t$data['path'] = $this->path;\n\t$data['handle'] = $this->handle;\n\t$data['bulk_action_url'] = $this->bulk_action_url;\n\t$data['bulk_action_title'] = $this->bulk_action_title;\n\t$data['bulk_action_icon'] = $this->bulk_action_icon;\n\t$data['bulk_action_text'] = $this->bulk_action_text;\n\t$data['bulk_action_data'] = $this->bulk_action_data;\n\t$data['bulk_action_data_text'] = $this->bulk_action_data_text;\n\t$data['bulk_action_data_icon'] = $this->bulk_action_data_icon;\n\t$data['bulk_action_data_title'] = $this->bulk_action_data_title;\n\t$data['bulk_action_data_path'] = $this->bulk_action_data_path;\n\t$data['bulk_action_data_handle'] = $this->bulk_action_data_handle;\n\t$data['bulk_action_data_query'] = $this->bulk_action_data_query;\n\t$data['bulk_action_data_modal_title'] = $this->bulk_action_data_modal_title;\n\t$data['bulk_action_data_modal_icon'] = $this->bulk_action_data_modal_icon;\n\t$data['bulk_action_data_modal_text'] = $this->bulk_action_data_modal_text;\n\t$data['bulk_action_data_modal_path'] = $this->bulk_action_data_modal_path;\n\t$data['bulk_action_data_modal_handle'] = $this->bulk_action_data_modal_handle;\n\t$data['bulk_action_data_modal_query'] = $this->bulk_action_data_modal_query;\n\t$data['bulk_action_data_modal_text_title'] = $this->bulk_action_data_modal_text_title;\n\t$data['bulk_action_data_modal", "CodeBleu_score": 24.870899713561315}, {"code": "<?\n   public function response($view, $data = []){\n\t\t$data['page_title'] = $this->page_title;\n\t$data['page_description'] = $this->page_description;\n\t$data['page_image'] = $this->page_image;\n\t$data['page_url'] = $this->page_url;\n\t$data['page_url_title'] = $this->page_url_title;\n\t$data['page_url_description'] = $this->page_url_description;\n\t$data['page_url_image'] = $this->page_url_image;\n\t$data['page_url_type'] = $this->page_url_type;\n\t$data['page_url_type_title'] = $this->page_url_type_title;\n\t$data['page_url_type_description'] = $this->page_url_type_description;\n\t$data['page_url_type_image'] = $this->page_url_type_image;\n\t$data['page_url_type_title'] = $this->page_url_type_title;\n\t$data['page_url_type_description'] = $this->page_url_type_description;\n\t$data['page_url_type_image'] = $this->page_url_type_image;\n\t$data['page_url_type_title'] = $this->page_url_type_title;\n\t$data['page_url_type_description'] = $this->page_url_type_description;\n\t$data['page_url_type_image'] = $this->page_url_type_image;\n\t$data['page_url_type_title'] = $this->page_url_type_title;\n\t$data['page_url_type_description'] = $this->page_url_type_description;\n\t$data['page_url_type_image'] = $this->page_url_type_image;\n\t$data['page_url_type_title'] = $this->page_url_type_title;\n\t$data['page_url_type_description'] = $this->page_url_type_description;\n\t$data['page_url_type_", "CodeBleu_score": 18.96832406601453}, {"code": "<?\n   public function response($view, $data = []){\n\t\t$data = array_merge($data, [\n\t\t'page' => $view,\n\t\t'path' => $this->path,\n\t\t'handle' => $this->handle,\n\t\t'title' => $this->title,\n\t\t'bulk_action_url' => $this->bulkActionUrl(),\n\t\t'bulk_action_data' => $this->bulkActionData(),\n\t]);\n\treturn response()->json($data);\n   }", "CodeBleu_score": 25.56763146543241}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t\t$selected = $request->get('selected');\n\t$contacts = Contact::whereIn('id', $selected)->get();\n\tforeach ($contacts as $contact) {\n\t\ttry {\n\t\t\tBus::dispatch(new DeleteContact($contact));\n\t\t} catch (Throwable $e) {\n\t\t\treturn redirect()->back()->with('error', $e->getMessage());\n\t\t}\n\t}\n\treturn redirect()->back()->with('success', trans('texts.contactsDeleted'));\n}", "CodeBleu_score": 47.613187015784746}, {"code": "<?\npublic function deleteContacts($request){\n\t\t$contacts = $request->input('contacts');\n\t$errors = [];\n\n\tforeach ($contacts as $contact) {\n\t\ttry {\n\t\t\t$job = (new DeleteContact($contact))->onQueue('low');\n\t\t\tBus::dispatch($job);\n\t\t} catch (Throwable $e) {\n\t\t\t$errors[] = $e->getMessage();\n\t\t}\n\t}\n\n\tif (count($errors) > 0) {\n\t\treturn $this->error(trans('app.error_deleting_contact'), $errors);\n\t}\n\n\treturn $this->success(trans('app.contact_deleted'));\n}", "CodeBleu_score": 47.50443496684319}, {"code": "<?\npublic function deleteContacts($request){\n\t\t$selectedContacts = $request->input('selectedContacts');\n\t$deleteContacts = [];\n\t$errors = [];\n\n\tforeach ($selectedContacts as $contactId) {\n\t\t$contact = Contact::find($contactId);\n\t\tif ($contact) {\n\t\t\t$deleteContacts[] = $contact;\n\t\t} else {\n\t\t\t$errors[] = trans('app.contact_not_found', ['contactId' => $contactId]);\n\t\t}\n\t}\n\n\tif ($deleteContacts) {\n\t\tforeach ($deleteContacts as $contact) {\n\t\t\ttry {\n\t\t\t\tBus::dispatch(new DeleteContact($contact));\n\t\t\t} catch (Throwable $e) {\n\t\t\t\t$errors[] = $e->getMessage();\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $errors;\n}", "CodeBleu_score": 42.46749041149003}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t\t$transactions = $request->input('transactions');\n\tif (empty($transactions)) {\n\t\treturn redirect()->route('banking.transactions.index')->with('error', trans('app.no_records_selected'));\n\t}\n\t$transactionIds = array_keys($transactions);\n\t$transactions = Transaction::whereIn('id', $transactionIds)->get();\n\tforeach ($transactions as $transaction) {\n\t\ttry {\n\t\t\tBus::dispatch(new DeleteTransaction($transaction));\n\t\t} catch (Throwable $e) {\n\t\t\treturn redirect()->route('banking.transactions.index')->with('error', trans('app.error_deleting_transaction'));\n\t\t}\n\t}\n\treturn redirect()->route('banking.transactions.index')->with('success', trans('app.transactions_deleted_successfully'));\n}", "CodeBleu_score": 43.608393309788354}, {"code": "<?\npublic function deleteTransactions($request){\n\t\t$ids = $request->input('ids');\n\t$ids = explode(',', $ids);\n\tforeach ($ids as $id) {\n\t\t$transaction = Transaction::find($id);\n\t\tif ($transaction) {\n\t\t\ttry {\n\t\t\t\tBus::dispatch(new DeleteTransaction($transaction));\n\t\t\t} catch (Throwable $e) {\n\t\t\t\tflash()->error($e->getMessage());\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 43.87255447084964}, {"code": "<?\npublic function deleteTransactions($request){\n\t\t$transactions = $request->get('transactions');\n\t$transactions = Transactions::whereIn('id', $transactions)->get();\n\t$transaction_ids = [];\n\n\tforeach ($transactions as $transaction) {\n\t\t$transaction_ids[] = $transaction->id;\n\t}\n\n\tif (count($transaction_ids) > 0) {\n\t\t$job = new DeleteTransaction($transaction_ids);\n\t\t$job->onQueue('transaction');\n\t\tBus::dispatch($job);\n\t}\n\n\treturn redirect()->route('transactions.index')->with('success', _lang('core.success'));\n}", "CodeBleu_score": 38.298818149502544}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\t\tif (! class_exists($this->requestClass) ||! is_subclass_of($this->requestClass, FormRequest::class)) {\n\t\treturn;\n\t}\n\n\t$request = new $this->requestClass();\n\n\t$validator->after(function ($validator) use ($request) {\n\t\t$rules = $request->rules();\n\t\t$data = $this->getData();\n\n\t\t$validator = Validator::make($data, $rules);\n\n\t\tif ($validator->fails()) {\n\t\t\t$validator->errors()->add('file', $validator->errors());\n\t\t\tthrow new ValidationException($validator);\n\t\t}\n\t});\n}", "CodeBleu_score": 35.3881332304048}, {"code": "<?\npublic function withValidator($validator){\n\t\tif (!class_exists($this->requestClass) ||!is_a($this->requestClass, FormRequest::class)) {\n\t\treturn;\n\t}\n\n\t$request = new $this->requestClass($this->request->all());\n\n\t$validator->after(function ($validator) use ($request) {\n\t\t$validator->validate();\n\t});\n}", "CodeBleu_score": 19.302364200202042}, {"code": "<?\npublic function withValidator($validator){\n\t\tif (!class_exists($this->formRequestClass) ||!is_a($this->formRequestClass, FormRequest::class)) {\n\t\treturn;\n\t}\n\n\t$request = new $this->formRequestClass();\n\n\t$validator->after(function ($validator) use ($request) {\n\t\t$rules = $request->rules();\n\n\t\tif (isset($rules['custom'])) {\n\t\t\t$rules = array_merge($rules, $rules['custom']);\n\t\t}\n\n\t\t$validator->setRules($rules);\n\n\t\t$validator->validate();\n\t});\n}", "CodeBleu_score": 28.075524799186507}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\tif (is_a($arguments[0], Model::class)) {\n\t\t$this->setModel($arguments[0]);\n\t}\n\tif (is_a($arguments[1], Request::class)) {\n\t\t$this->setRequest($arguments[1]);\n\t}\n\tif ($this->shouldUpdate()) {\n\t\t$this->update();\n\t}\n}", "CodeBleu_score": 21.634361381255395}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\tif (count($arguments) === 1) {\n\t\tif ($arguments[0] instanceof ShouldUpdate) {\n\t\t\t$arguments[0]->update(...$arguments);\n\t\t}\n\t} else if (count($arguments) === 2) {\n\t\tif ($arguments[0] instanceof ShouldUpdate) {\n\t\t\t$arguments[0]->update($arguments[1]);\n\t\t}\n\t}\n}", "CodeBleu_score": 23.715368659341692}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\tif ($arguments[0] instanceof Model && $arguments[0] instanceof ShouldUpdate) {\n\t\t$this->setModel($arguments[0]);\n\t}\n\n\tif ($arguments[1] instanceof Request && $arguments[1] instanceof ShouldUpdate) {\n\t\t$this->setRequest($arguments[1]);\n\t}\n\n\tif ($arguments[0] instanceof ShouldDelete) {\n\t\t$this->delete();\n\t}\n}", "CodeBleu_score": 29.599286805060355}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t\t$request = request();\n\t$search = $request->input('search');\n\t$searchString = $request->input('search_string');\n\t$limit = $request->input('limit')?? 15;\n\t$sort = $request->input('sort')?? $sort;\n\t$order = $request->input('order')?? 'asc';\n\t$searchStringApplied = false;\n\n\tif ($searchString) {\n\t\t$searchStringApplied = true;\n\t\t$query->searchString($searchString);\n\t}\n\n\tif ($search) {\n\t\t$query->search($search);\n\t}\n\n\tif ($sort) {\n\t\t$query->sortable($sort, $order);\n\t}\n\n\tif ($request->expectsJson()) {\n\t\treturn $query->get();\n\t}\n\n\treturn $query->paginate($limit);\n}", "CodeBleu_score": 53.88977929518071}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t\t$query->orderBy($sort);\n\treturn $query;\n}", "CodeBleu_score": 12.559209861058196}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t$request = app('request');", "CodeBleu_score": 14.225128398018121}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$openAmount = 0;\n\t$overdueAmount = 0;\n\t$totalAmount = 0;\n\t$totalPaid = 0;\n\t$totalOverdue = 0;\n\t$totalOpen = 0;\n\t$totalPaid = $model->transactions()->sum('amount');\n\t$totalAmount = $model->amount;\n\t$totalOverdue = $totalAmount - $totalPaid;\n\t$totalOpen = $totalAmount - $totalOverdue;\n\tif ($model->status == 'paid') {\n\t\t$totalOpen = 0;\n\t\t$totalOverdue = 0;\n\t}\n\treturn [$totalOpen, $totalOverdue];\n}", "CodeBleu_score": 32.45341075549111}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$openAmount = 0;\n\t$overdueAmount = 0;\n\t$amountPaid = 0;\n\n\tif ($model->status == 'paid') {\n\t\t$openAmount = 0;\n\t\t$overdueAmount = 0;\n\t} else {\n\t\tif ($model->status == 'partial') {\n\t\t\t$amountPaid = $model->transactions()->sum('amount');\n\t\t}\n\n\t\t$openAmount = $model->amount - $amountPaid;\n\n\t\tif ($model->due_date) {\n\t\t\t$overdueAmount = $model->amount - $amountPaid;\n\n\t\t\tif ($model->due_date->isPast()) {\n\t\t\t\t$overdueAmount = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn [$openAmount, $overdueAmount];\n}", "CodeBleu_score": 40.54153089021968}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$open = 0;\n\t$overdue = 0;\n\n\t$status = $model->status;\n\tif ($status == 'paid') {\n\t\treturn [\n\t\t\t'open' => 0,\n\t\t\t'overdue' => 0\n\t\t];\n\t} else if ($status == 'partial') {\n\t\t$payments = $model->payments;\n\t\t$payments = $payments->where('status', 'paid');\n\t\t$payments = $payments->where('transaction_type', 'payment');\n\t\t$payments = $payments->where('transaction_status','success');\n\t\t$payments = $payments->where('transaction_status','success');\n\t\t$payments = $payments->where('transaction_status','success');\n\t\t$payments = $payments->where('transaction_status','success');\n\t\t$payments = $payments->where('transaction_status','success');\n\t\t$payments = $payments->where('transaction_status','success');\n\t\t$payments = $payments->where('transaction_status','success');\n\t\t$payments = $payments->where('transaction_status','success');\n\t\t$payments = $payments->where('transaction_status','success');\n\t\t$payments = $payments->where('transaction_status','success');\n\t\t$payments = $payments->where('transaction_status','success');\n\t\t$payments = $payments->where('transaction_status','success');\n\t\t$payments = $payments->where('transaction_status','success');\n\t\t$payments = $payments->where('transaction_status','success');\n\t\t$payments = $payments->where('transaction_status','success');\n\t\t$payments = $payments->where('transaction_status','success');\n\t\t$payments = $payments->where('transaction_status','success');\n\t\t$payments = $payments->where('transaction_status','success');\n\t\t$payments = $payments->where('transaction_status','success');\n\t\t$payments = $payments->where('transaction_status','success');\n\t\t$payments = $payments->where('transaction_status','success');\n\t\t$payments = $payments->where('transaction_status','success');\n\t\t$payments = $payments->where('transaction_status','success');\n\t\t$payments = $", "CodeBleu_score": 26.047865233619717}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t$this->applyScopes();\n\t$total = $this->toBase()->getCountForPagination();\n\t$paginator = new Paginator($this->forPage($page?: 1, $perPage), $total, $perPage, $page, [\n\t\t'path' => Paginator::resolveCurrentPath(),\n\t\t'pageName' => $pageName,\n\t]);\n\t$paginator->setCollection($this->items = $this->forPage($paginator->currentPage(), $perPage)->get($columns));\n\treturn $paginator;\n}", "CodeBleu_score": 58.91799260405185}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t$page = $page?: (Paginator::resolveCurrentPage($pageName)?: 1);\n\t$perPage = $perPage?: $this->model->getPerPage();\n\n\treturn new Paginator(\n\t\t$this->forPage($page, $perPage)->get($columns),\n\t\t$this->count(),\n\t\t$perPage,\n\t\t$page,\n\t\t[\n\t\t\t'path' => Paginator::resolveCurrentPath(),\n\t\t\t'pageName' => $pageName,\n\t\t]\n\t);\n}", "CodeBleu_score": 53.8184117632467}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t$total = $this->toBase()->getCountForPagination();\n\n\t$paginator = new Paginator($this->items, $total, $perPage, $page, [\n\t\t'path' => Paginator::resolveCurrentPath(),\n\t\t'pageName' => $pageName,\n\t]);\n\n\t$paginator->setPath($paginator->resolveCurrentPath());\n\n\treturn $paginator;\n}", "CodeBleu_score": 49.69289898847349}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t\t$reconciliations = Reconciliation::whereIn('id', $request->reconciliations)->get();\n\tDB::transaction(function () use ($reconciliations) {\n\t\tforeach ($reconciliations as $reconciliation) {\n\t\t\t$reconciliation->status = Reconciliation::STATUS_RECONCILED;\n\t\t\t$reconciliation->save();\n\n\t\t\t$transactions = Transaction::where('reconciliation_id', $reconciliation->id)->get();\n\t\t\tforeach ($transactions as $transaction) {\n\t\t\t\t$transaction->reconciled = true;\n\t\t\t\t$transaction->save();\n\t\t\t}\n\t\t}\n\t});\n}", "CodeBleu_score": 38.624386391179435}, {"code": "<?\npublic function reconcile($request){\n\t\t$reconciliations = Reconciliation::whereIn('id', $request->input('ids'))->get();\n\n\tDB::transaction(function () use ($reconciliations, $request) {\n\t\tforeach ($reconciliations as $reconciliation) {\n\t\t\t$reconciliation->status = Reconciliation::STATUS_RECONCILED;\n\t\t\t$reconciliation->save();\n\n\t\t\t$reconciliation->transactions()->update(['status' => Transaction::STATUS_RECONCILED]);\n\n\t\t\t$reconciliation->account->transactions()->whereBetween('date', [$reconciliation->date_start, $reconciliation->date_end])->where('account_id', $reconciliation->account_id)->update(['status' => Transaction::STATUS_RECONCILED]);\n\t\t}\n\t});\n\n\treturn $this->bulkAction(new BulkAction\\ReconcileAction($reconciliations));\n}", "CodeBleu_score": 39.463927023754614}, {"code": "<?\npublic function reconcile($request){\n\t\t$reconciliations = Reconciliation::whereIn('id', $request->reconciliations)->get();\n\tDB::transaction(function () use ($reconciliations) {\n\t\tforeach ($reconciliations as $reconciliation) {\n\t\t\t$reconciliation->status = Reconciliation::STATUS_RECONCILED;\n\t\t\t$reconciliation->save();\n\t\t}\n\t});\n\tforeach ($reconciliations as $reconciliation) {\n\t\t$reconciliation->transactions()->whereBetween('date', [$reconciliation->date_start, $reconciliation->date_end])->where('account_id', $reconciliation->account_id)->update(['status' => Transaction::STATUS_RECONCILED]);\n\t}\n}", "CodeBleu_score": 41.600822486533765}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t\t$user = $this->user;\n\t$token = Str::random(64);\n\t$email = $user->email;\n\t$invitation = UserInvitation::where('email', $email)->first();\n\tif ($invitation) {\n\t\t$invitation->delete();\n\t}\n\t$invitation = UserInvitation::create([\n\t\t'email' => $email,\n\t\t'token' => $token,\n\t]);\n\ttry {\n\t\t$this->dispatch(new Notification($invitation));\n\t} catch (TransportException $exception) {\n\t\tthrow new Exception('Failed to send invitation email: '. $exception->getMessage());\n\t}\n\treturn $invitation;\n}", "CodeBleu_score": 30.977087433882744}, {"code": "<?\npublic function handle(): UserInvitation{\n\t\t$this->user->load('invitations');\n\n\t$invitations = $this->user->invitations;\n\n\t$this->user->invitations()->delete();\n\n\t$token = Str::random(32);\n\n\t$invitation = $this->user->invitations()->create([\n\t\t'token' => $token,\n\t]);\n\n\ttry {\n\t\t$this->dispatch(new Notification($invitation));\n\t} catch (TransportException $e) {\n\t\tthrow new Exception('Failed to send invitation email: '. $e->getMessage());\n\t}\n\n\treturn $invitation;\n}", "CodeBleu_score": 28.337234415742273}, {"code": "<?\npublic function handle(): UserInvitation{\n\t\t$user = $this->user;\n\t$email = $this->email;\n\n\t$invitation = UserInvitation::where('user_id', $user->id)->where('email', $email)->first();\n\n\tif ($invitation) {\n\t\t$invitation->delete();\n\t}\n\n\t$token = Str::random(60);\n\n\t$invitation = UserInvitation::create([\n\t\t'user_id' => $user->id,\n\t\t'email' => $email,\n\t\t'token' => $token,\n\t]);\n\n\t$job = (new Notification($invitation))->delay(now()->addSeconds(10));\n\n\ttry {\n\t\t$job->dispatch();\n\t} catch (TransportException $e) {\n\t\tthrow new Exception('Failed to send invitation email.');\n\t}\n\n\treturn $invitation;\n}", "CodeBleu_score": 41.57625464055299}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\t\t$this->authorizeTransaction();\n\t$this->authorizeReconciled();\n\t$this->authorizeTransfer();\n}", "CodeBleu_score": 8.386761788335695}, {"code": "<?\npublic function authorize(): void{\n\t\tif ($this->transaction->isReconciled()) {\n\t\tthrow new Unauthorized('This transaction has been reconciled.');\n\t}\n\n\tif ($this->transaction->isTransfer()) {\n\t\tthrow new Unauthorized('Unauthorized transaction.');\n\t}\n}", "CodeBleu_score": 24.93994680562814}, {"code": "<?\npublic function authorize(): void{\n\t\tif ($this->transaction->reconciled_at!== null) {\n\t\tthrow new UnauthorizedException('Transaction already reconciled');\n\t}\n\n\tif ($this->transaction->type === Transaction::TYPE_TRANSFER) {\n\t\tthrow new UnauthorizedException('Unauthorized');\n\t}\n}", "CodeBleu_score": 24.83009703650968}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t\treturn true;\n}", "CodeBleu_score": 1.8407229387938386}, {"code": "public boolean doTableFilter(String tableName){\n\t\treturn tableName.equals(\"user\") || tableName.equals(\"user_role\");\n}", "CodeBleu_score": 7.775931624318005}, {"code": "public boolean doTableFilter(String tableName){\n\t\treturn tableName.equals(\"sys_user\") || tableName.equals(\"sys_role\") || tableName.equals(\"sys_menu\") || tableName.equals(\"sys_dict\") || tableName.equals(\"sys_log\") || tableName.equals(\"sys_config\") || tableName.equals(\"sys_oss\") || tableName.equals(\"sys_file\") || tableName.equals(\"sys_schedule\") || tableName.equals(\"sys_job\") || tableName.equals(\"sys_notice\") || tableName.equals(\"sys_notice_record\") || tableName.equals(\"sys_captcha\") || tableName.equals(\"sys_logininfor\") || tableName.equals(\"sys_oper_log\") || tableName.equals(\"sys_job_log\") || tableName.equals(\"sys_job_run\") || tableName.equals(\"sys_job_error\") || tableName.equals(\"sys_job_listener\") || tableName.equals(\"sys_job_executor\") || tableName.equals(\"sys_job_executor_log\") || tableName.equals(\"sys_job_executor_lock\") || tableName.equals(\"sys_job_executor_lock_log\");\n}", "CodeBleu_score": 14.560020089028502}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 74.32520802003512}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 74.32520802003512}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 74.32520802003512}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t\tlogger.info(\"account/findBySelect\");\n\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tAccountService accountService = new AccountService();\n\t\tList<Account> accountList = accountService.findBySelect();\n\t\tJSONArray jsonArray = new JSONArray();\n\t\tfor (Account account : accountList) {\n\t\t\tJSONObject jsonObject = new JSONObject();\n\t\t\tjsonObject.put(\"id\", account.getId());\n\t\t\tjsonObject.put(\"name\", account.getName());\n\t\t\tjsonArray.add(jsonObject);\n\t\t}\n\t\tresponse.setCode(ErpInfo.SUCCESS);\n\t\tresponse.setMsg(ErpInfo.SUCCESS_MSG);\n\t\tresponse.setObj(jsonArray);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error: \" + e.getMessage());\n\t\tresponse.setCode(ErpInfo.ERROR);\n\t\tresponse.setMsg(ErpInfo.ERROR_MSG);\n\t}\n\treturn returnJson(response);\n}", "CodeBleu_score": 39.8744247295473}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t\t// TODO Auto-generated method stub\n\treturn null;\n}", "CodeBleu_score": 2.828347805118483}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t\tString result = \"\";\n\ttry {\n\t\t// Get the account data from the accountService\n\t\tList<Account> accounts = accountService.findAll();\n\t\t// Convert the account data to JSON format\n\t\tJSONArray jsonArray = new JSONArray();\n\t\tfor (Account account : accounts) {\n\t\t\tJSONObject jsonObject = new JSONObject();\n\t\t\tjsonObject.put(\"id\", account.getId());\n\t\t\tjsonObject.put(\"name\", account.getName());\n\t\t\tjsonArray.add(jsonObject);\n\t\t}\n\t\t// Return the JSON string as the result\n\t\tresult = jsonArray.toJSONString();\n\t} catch (Exception e) {\n\t\t// Log the error message and return a failure message\n\t\tlogger.error(\"Error occurred while retrieving the account list: {}\", e.getMessage());\n\t\tresult = \"Error occurred while retrieving the account list\";\n\t}\n\treturn result;\n}", "CodeBleu_score": 56.56456984315972}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\tAccountService accountService = (AccountService) ErpInfo.getBean(\"accountService\");\n\tSystemConfigService systemConfigService = (SystemConfigService) ErpInfo.getBean(\"systemConfigService\");\n\t//\u83b7\u53d6\u7cfb\u7edf\u914d\u7f6e\n\tMap<String, String> systemConfig = systemConfigService.getSystemConfig();\n\tString companyId = systemConfig.get(\"companyId\");\n\tString companyName = systemConfig.get(\"companyName\");\n\tString companyLogo = systemConfig.get(\"companyLogo\");\n\tString companyAddress = systemConfig.get(\"companyAddress\");\n\tString companyPhone = systemConfig.get(\"companyPhone\");\n\tString companyEmail = systemConfig.get(\"companyEmail\");\n\tString companyWebSite = systemConfig.get(\"companyWebSite\");\n\tString companyTaxNumber = systemConfig.get(\"companyTaxNumber\");\n\tString companyBank = systemConfig.get(\"companyBank\");\n\tString companyBankAccount = systemConfig.get(\"companyBankAccount\");\n\tString companyBankAccountOwner = systemConfig.get(\"companyBankAccountOwner\");\n\tString companyBankAccountNumber = systemConfig.get(\"companyBankAccountNumber\");\n\tString companyBankAccountAddress = systemConfig.get(\"companyBankAccountAddress\");\n\tString companyBankAccountPhone = systemConfig.get(\"companyBankAccountPhone\");\n\tString companyBankAccountEmail = systemConfig.get(\"companyBankAccountEmail\");\n\tString companyBankAccountWebSite = systemConfig.get(\"companyBankAccountWebSite\");\n\tString companyBankAccountTaxNumber = systemConfig.get(\"companyBankAccountTaxNumber\");\n\tString companyBankAccountBank = systemConfig.get(\"companyBankAccountBank\");\n\tString companyBankAccountBankAccount = systemConfig.get(\"companyBankAccountBankAccount\");\n\tString companyBankAccountBankAccountOwner = systemConfig.get(\"companyBankAccountBankAccountOwner\");\n\tString companyBankAccountBankAccountNumber = systemConfig.get(\"companyBankAccountBankAccountNumber\");\n\tString companyBankAccountBankAccountAddress = systemConfig.get(\"companyBankAccountBankAccountAddress\");\n\tString companyBankAccountBankAccountPhone = systemConfig.get(\"companyBankAccountBankAccountPhone\");\n\tString companyBankAccountBankAccountEmail = systemConfig.get(\"companyBankAccountBankAccountEmail\");\n\tString companyBankAccountBankAccountWeb", "CodeBleu_score": 26.01299721851371}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t//    String userName = ErpInfo.getUserName(request);\n    String userName = \"admin\";\n    if(StringUtil.isEmpty(name)){\n        name = \"\";\n    }\n    if(StringUtil.isEmpty(serialNo)){\n        serialNo = \"\";\n    }\n    String url = \"/account/listWithBalance\";\n    String params = \"name:\" + name + \",serialNo:\" + serialNo + \",currentPage:\" + currentPage + \",pageSize:\" + pageSize;\n    BaseResponseInfo responseInfo = new BaseResponseInfo();\n    try {\n        AccountVo4List accountVo4List = accountService.listWithBalance(name, serialNo, currentPage, pageSize);\n        responseInfo.setCode(ErpInfo.SUCCESS);\n        responseInfo.setMessage(ErpInfo.SUCCESS_MSG);\n        responseInfo.setData(accountVo4List);\n        responseInfo.setUrl(url);\n        responseInfo.setParams(params);\n    } catch (Exception e) {\n        responseInfo.setCode(ErpInfo.ERROR);\n        responseInfo.setMessage(ErpInfo.ERROR_MSG);\n        responseInfo.setUrl(url);\n        responseInfo.setParams(params);\n        logger.error(\"listWithBalance error\", e);\n    }\n    return responseInfo;\n}", "CodeBleu_score": 39.69096195824269}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t\tLogger logger = LoggerFactory.getLogger(this.getClass());\n\tAccountService accountService = (AccountService) ErpInfo.getBean(\"accountService\");\n\tSystemConfigService systemConfigService = (SystemConfigService) ErpInfo.getBean(\"systemConfigService\");\n\tString companyId = (String) request.getSession().getAttribute(\"companyId\");\n\tString companyName = (String) request.getSession().getAttribute(\"companyName\");\n\tString companyCode = (String) request.getSession().getAttribute(\"companyCode\");\n\tString companyLogo = (String) request.getSession().getAttribute(\"companyLogo\");\n\tString companyAddress = (String) request.getSession().getAttribute(\"companyAddress\");\n\tString companyTel = (String) request.getSession().getAttribute(\"companyTel\");\n\tString companyFax = (String) request.getSession().getAttribute(\"companyFax\");\n\tString companyEmail = (String) request.getSession().getAttribute(\"companyEmail\");\n\tString companyWebsite = (String) request.getSession().getAttribute(\"companyWebsite\");\n\tString companyBank = (String) request.getSession().getAttribute(\"companyBank\");\n\tString companyBankAccount = (String) request.getSession().getAttribute(\"companyBankAccount\");\n\tString companyBankAccountHolder = (String) request.getSession().getAttribute(\"companyBankAccountHolder\");\n\tString companyBankAccountBank = (String) request.getSession().getAttribute(\"companyBankAccountBank\");\n\tString companyBankAccountBankAddress = (String) request.getSession().getAttribute(\"companyBankAccountBankAddress\");\n\tString companyBankAccountBankAddressCode = (String) request.getSession().getAttribute(\"companyBankAccountBankAddressCode\");\n\tString companyBankAccountBankAddressProvince = (String) request.getSession().getAttribute(\"companyBankAccountBankAddressProvince\");\n\tString companyBankAccountBankAddressCity = (String) request.getSession().getAttribute(\"companyBankAccountBankAddressCity\");\n\tString companyBankAccountBankAddressArea = (String) request.getSession().getAttribute(\"companyBankAccountBankAddressArea\");\n\tString companyBankAccountBankAddressStreet = (String) request.getSession().getAttribute(\"companyBankAccountBankAddressStreet\");\n\tString companyBankAccountBankAddressStreetNumber = (String) request.getSession().getAttribute(\"companyBankAccountBankAddressStreetNumber\");\n\tString companyBankAccountBankAddressZipCode = (String) request.getSession().getAttribute(\"companyBankAccountBankAddressZipCode\");\n\t", "CodeBleu_score": 25.580298175807336}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t//    String token = request.getHeader(\"Authorization\");\n//    if (StringUtil.isEmpty(token)) {\n//        return new BaseResponseInfo(500, \"\u8bf7\u5148\u767b\u5f55\");\n//    }\n//    ErpInfo erpInfo = (ErpInfo) request.getSession().getAttribute(\"erpInfo\");\n//    if (erpInfo == null) {\n//        return new BaseResponseInfo(500, \"\u8bf7\u5148\u767b\u5f55\");\n//    }\n    BaseResponseInfo responseInfo = new BaseResponseInfo();\n    try {\n        AccountVo4List accountVo4List = new AccountVo4List();\n        accountVo4List.setName(name);\n        accountVo4List.setSerialNo(serialNo);\n        List<AccountVo4List> accountVo4Lists = accountService.getStatistics(accountVo4List);\n        if (accountVo4Lists.size() > 0) {\n            responseInfo.setCode(200);\n            responseInfo.setData(accountVo4Lists);\n        } else {\n            responseInfo.setCode(200);\n            responseInfo.setMessage(\"\u65e0\u6570\u636e\");\n        }\n    } catch (Exception e) {\n        logger.error(\"\u83b7\u53d6\u7edf\u8ba1\u4fe1\u606f\u5931\u8d25\", e);\n        responseInfo.setCode(500);\n        responseInfo.setMessage(\"\u83b7\u53d6\u7edf\u8ba1\u4fe1\u606f\u5931\u8d25\");\n    }\n    return responseInfo;\n}", "CodeBleu_score": 37.564339420536285}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t\tLogger logger = LoggerFactory.getLogger(AccountController.class);\n\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tAccountVo4List accountVo4List = new AccountVo4List();\n\t\taccountVo4List.setAccount_name(name);\n\t\taccountVo4List.setSerial_no(serialNo);\n\t\taccountVo4List.setPage_num(1);\n\t\taccountVo4List.setPage_size(10);\n\t\taccountVo4List.setSort_type(1);\n\t\taccountVo4List.setSort_field(\"id\");\n\t\taccountVo4List.setAccount_type(1);\n\t\taccountVo4List.setAccount_status(1);\n\t\taccountVo4List.setAccount_status(1);\n\t\taccountVo4List.setAccount_status(1);\n\t\taccountVo4List.setAccount_status(1);\n\t\taccountVo4List.setAccount_status(1);\n\t\taccountVo4List.setAccount_status(1);\n\t\taccountVo4List.setAccount_status(1);\n\t\taccountVo4List.setAccount_status(1);\n\t\taccountVo4List.setAccount_status(1);\n\t\taccountVo4List.setAccount_status(1);\n\t\taccountVo4List.setAccount_status(1);\n\t\taccountVo4List.setAccount_status(1);\n\t\taccountVo4List.setAccount_status(1);\n\t\taccountVo4List.setAccount_status(1);\n\t\taccountVo4List.setAccount_status(1);\n\t\taccountVo4List.setAccount_status(1);\n\t\taccountVo4List.setAccount_status(1);\n\t\taccountVo4List.setAccount_status(1);\n\t\taccountVo4List.setAccount_status(1);\n\t\taccountVo4List.setAccount_status(1);\n\t\taccountVo4List.setAccount_status(1);\n\t\taccountVo4List.setAccount_status(1);\n\t\taccountVo4List.setAccount_status(1);\n\t\taccountVo4List.setAccount_status(1);\n\t\taccountVo4List.setAccount_status(1);\n\t\taccountVo4List.setAccount_status(1);\n\t\t", "CodeBleu_score": 25.902852886114182}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tMap<String, Object> params = new HashMap<>();\n\t\tparams.put(\"name\", name);\n\t\tparams.put(\"serialNo\", serialNo);\n\t\tAccountVo4List accountVo4List = accountService.getStatistics(params);\n\t\tif (accountVo4List!= null) {\n\t\t\tresponse.setCode(ErpInfo.SUCCESS);\n\t\t\tresponse.setData(accountVo4List);\n\t\t} else {\n\t\t\tresponse.setCode(ErpInfo.FAIL);\n\t\t\tresponse.setMessage(\"\u67e5\u8be2\u5931\u8d25\");\n\t\t}\n\t} catch (Exception e) {\n\t\tresponse.setCode(ErpInfo.FAIL);\n\t\tresponse.setMessage(e.getMessage());\n\t\tlogger.error(\"\u67e5\u8be2\u7edf\u8ba1\u5931\u8d25\", e);\n\t}\n\treturn response;\n}", "CodeBleu_score": 43.134533550306124}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t\tLogger logger = LoggerFactory.getLogger(this.getClass());\n\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\ttry {\n\t\tif (billNo == null || billNo.equals(\"\")) {\n\t\t\tresponseInfo.setCode(ExceptionConstants.ERROR_CODE_PARAM_IS_NULL);\n\t\t\tresponseInfo.setMessage(ExceptionConstants.ERROR_MESSAGE_PARAM_IS_NULL);\n\t\t\treturn responseInfo;\n\t\t}\n\t\tAccountHead accountHead = accountHeadService.getDetailByNumber(billNo);\n\t\tif (accountHead == null) {\n\t\t\tresponseInfo.setCode(ExceptionConstants.ERROR_CODE_PARAM_IS_NULL);\n\t\t\tresponseInfo.setMessage(ExceptionConstants.ERROR_MESSAGE_PARAM_IS_NULL);\n\t\t\treturn responseInfo;\n\t\t}\n\t\tAccountHeadVo4Body accountHeadVo4Body = new AccountHeadVo4Body();\n\t\taccountHeadVo4Body.setBillNo(accountHead.getBillNo());\n\t\taccountHeadVo4Body.setBillDate(accountHead.getBillDate());\n\t\taccountHeadVo4Body.setBillType(accountHead.getBillType());\n\t\taccountHeadVo4Body.setBillNo(accountHead.getBillNo());\n\t\taccountHeadVo4Body.setBillNo(accountHead.getBillNo());\n\t\taccountHeadVo4Body.setBillNo(accountHead.getBillNo());\n\t\taccountHeadVo4Body.setBillNo(accountHead.getBillNo());\n\t\taccountHeadVo4Body.setBillNo(accountHead.getBillNo());\n\t\taccountHeadVo4Body.setBillNo(accountHead.getBillNo());\n\t\taccountHeadVo4Body.setBillNo(accountHead.getBillNo());\n\t\taccountHeadVo4Body.setBillNo(accountHead.getBillNo());\n\t\taccountHeadVo4Body.setBillNo(accountHead.getBillNo());\n\t\taccountHeadVo4Body.setBillNo(accountHead.getBillNo());\n\t\taccountHeadVo4Body.setBillNo(accountHead.getBillNo());\n\t\taccountHeadVo4Body.setBillNo(accountHead.getBillNo());\n\t\taccountHeadVo4Body.setBillNo(accountHead.getBillNo());\n\t\taccountHeadVo4Body.setBillNo(accountHead.", "CodeBleu_score": 28.474777645381486}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t\tLogger logger = LoggerFactory.getLogger(this.getClass());\n\tMap<String, Object> paramMap = new HashMap<String, Object>();\n\tparamMap.put(\"billNo\", billNo);\n\tAccountHeadVo4ListEx accountHeadVo4ListEx = null;\n\tBaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n\ttry {\n\t\taccountHeadVo4ListEx = accountHeadService.getDetailByNumber(paramMap);\n\t\tif (accountHeadVo4ListEx == null) {\n\t\t\tbaseResponseInfo.setResponseCode(ExceptionConstants.NOT_FOUND);\n\t\t\tbaseResponseInfo.setResponseMessage(\"No data found for billNo:\" + billNo);\n\t\t\treturn baseResponseInfo;\n\t\t}\n\t\tbaseResponseInfo.setResponseCode(BusinessConstants.SUCCESS);\n\t\tbaseResponseInfo.setResponseMessage(\"success\");\n\t\tbaseResponseInfo.setData(accountHeadVo4ListEx);\n\t\treturn baseResponseInfo;\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error while fetching details for billNo:\" + billNo, e);\n\t\tbaseResponseInfo.setResponseCode(ExceptionConstants.INTERNAL_SERVER_ERROR);\n\t\tbaseResponseInfo.setResponseMessage(\"Error while fetching details for billNo:\" + billNo);\n\t\treturn baseResponseInfo;\n\t}\n}", "CodeBleu_score": 31.189693603956552}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\tMap<String, Object> responseMap = new HashMap<>();\n\ttry {\n\t\tAccountHeadVo4Body accountHeadVo4Body = accountHeadService.getDetailByNumber(billNo);\n\t\tresponseMap.put(\"billNo\", accountHeadVo4Body.getBillNo());\n\t\tresponseMap.put(\"billDate\", accountHeadVo4Body.getBillDate());\n\t\tresponseMap.put(\"billType\", accountHeadVo4Body.getBillType());\n\t\tresponseMap.put(\"billTypeName\", accountHeadVo4Body.getBillTypeName());\n\t\tresponseMap.put(\"billStatus\", accountHeadVo4Body.getBillStatus());\n\t\tresponseMap.put(\"billStatusName\", accountHeadVo4Body.getBillStatusName());\n\t\tresponseMap.put(\"billAmount\", accountHeadVo4Body.getBillAmount());\n\t\tresponseMap.put(\"billCurrency\", accountHeadVo4Body.getBillCurrency());\n\t\tresponseMap.put(\"billCurrencyName\", accountHeadVo4Body.getBillCurrencyName());\n\t\tresponseMap.put(\"billRemark\", accountHeadVo4Body.getBillRemark());\n\t\tresponseMap.put(\"billRemark1\", accountHeadVo4Body.getBillRemark1());\n\t\tresponseMap.put(\"billRemark2\", accountHeadVo4Body.getBillRemark2());\n\t\tresponseMap.put(\"billRemark3\", accountHeadVo4Body.getBillRemark3());\n\t\tresponseMap.put(\"billRemark4\", accountHeadVo4Body.getBillRemark4());\n\t\tresponseMap.put(\"billRemark5\", accountHeadVo4Body.getBillRemark5());\n\t\tresponseMap.put(\"billRemark6\", accountHeadVo4Body.getBillRemark6());\n\t\tresponseMap.put(\"billRemark7\", accountHeadVo4Body.getBillRemark7());\n\t\tresponseMap.put(\"billRemark8\", accountHeadVo4Body.getBillRemark8());\n\t\tresponseMap.put(\"billRemark9\", accountHeadVo4Body.getBillRemark9());\n\t\tresponseMap.put(\"billRemark10\", accountHeadVo4Body.getBillRemark10());\n\t\tresponseMap.put(\"billRemark11\", accountHeadVo4Body.getBillRemark11());\n\t\tresponseMap.put(\"bill", "CodeBleu_score": 24.054556331999922}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\t// get the current user's id\n\t\tString userId = request.getHeader(\"userId\");\n\t\tif (userId == null || userId.isEmpty()) {\n\t\t\tresponse.setResponseCode(ExceptionConstants.RESPONSE_CODE_INVALID_USER);\n\t\t\tresponse.setResponseMessage(ExceptionConstants.RESPONSE_MESSAGE_INVALID_USER);\n\t\t\treturn response;\n\t\t}\n\t\t// get the current user's business unit\n\t\tString businessUnit = request.getHeader(\"businessUnit\");\n\t\tif (businessUnit == null || businessUnit.isEmpty()) {\n\t\t\tresponse.setResponseCode(ExceptionConstants.RESPONSE_CODE_INVALID_BUSINESS_UNIT);\n\t\t\tresponse.setResponseMessage(ExceptionConstants.RESPONSE_MESSAGE_INVALID_BUSINESS_UNIT);\n\t\t\treturn response;\n\t\t}\n\t\t// get the current user's depot\n\t\tDepot depot = depotService.findDepotByUserIdAndBusinessUnit(userId, businessUnit);\n\t\tif (depot == null) {\n\t\t\tresponse.setResponseCode(ExceptionConstants.RESPONSE_CODE_INVALID_DEPOT);\n\t\t\tresponse.setResponseMessage(ExceptionConstants.RESPONSE_MESSAGE_INVALID_DEPOT);\n\t\t\treturn response;\n\t\t}\n\t\t// set the response code to 200 and the data\n\t\tresponse.setResponseCode(ExceptionConstants.RESPONSE_CODE_SUCCESS);\n\t\tresponse.setResponseMessage(ExceptionConstants.RESPONSE_MESSAGE_SUCCESS);\n\t\tresponse.setData(depot);\n\t} catch (Exception e) {\n\t\tlogger.error(\"findDepotByCurrentUser error: {}\", e.getMessage());\n\t\tresponse.setResponseCode(ExceptionConstants.RESPONSE_CODE_SERVER_ERROR);\n\t\tresponse.setResponseMessage(ExceptionConstants.RESPONSE_MESSAGE_SERVER_ERROR);\n\t}\n\treturn response;\n}", "CodeBleu_score": 35.43593632734772}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tDepot depot = depotService.findDepotByCurrentUser(request);\n\t\tresponse.setCode(BusinessConstants.RESPONSE_CODE_SUCCESS);\n\t\tresponse.setData(depot);\n\t} catch (DataAccessException e) {\n\t\tresponse.setCode(BusinessConstants.RESPONSE_CODE_ERROR);\n\t\tresponse.setMessage(ExceptionConstants.DATA_ACCESS_EXCEPTION);\n\t\tlogger.error(ExceptionConstants.DATA_ACCESS_EXCEPTION, e);\n\t} catch (BusinessRunTimeException e) {\n\t\tresponse.setCode(BusinessConstants.RESPONSE_CODE_ERROR);\n\t\tresponse.setMessage(e.getMessage());\n\t\tlogger.error(e.getMessage(), e);\n\t} catch (Exception e) {\n\t\tresponse.setCode(BusinessConstants.RESPONSE_CODE_ERROR);\n\t\tresponse.setMessage(ExceptionConstants.UNEXPECTED_EXCEPTION);\n\t\tlogger.error(ExceptionConstants.UNEXPECTED_EXCEPTION, e);\n\t}\n\treturn response;\n}", "CodeBleu_score": 40.32320729656701}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\ttry {\n\t\t// Get the current user\n\t\tUser user = (User) request.getSession().getAttribute(\"user\");\n\t\tif (user == null) {\n\t\t\tthrow new BusinessRunTimeException(ExceptionConstants.USER_NOT_FOUND);\n\t\t}\n\t\t// Get the depot service\n\t\tDepotService depotService = (DepotService) SpringContextUtil.getBean(\"depotService\");\n\t\t// Get the depot information\n\t\tList<Depot> depots = depotService.findDepotByCurrentUser(user);\n\t\t// Set the response code to 200 and include the data\n\t\tresponseInfo.setCode(ResponseCode.SUCCESS.getCode());\n\t\tresponseInfo.setData(depots);\n\t} catch (BusinessRunTimeException e) {\n\t\t// Log the error\n\t\tlogger.error(\"Error while retrieving depot information for current user: \" + e.getMessage());\n\t\t// Set the response code to 500 and include an error message\n\t\tresponseInfo.setCode(ResponseCode.ERROR.getCode());\n\t\tresponseInfo.setMessage(e.getMessage());\n\t} catch (DataAccessException e) {\n\t\t// Log the error\n\t\tlogger.error(\"Error while retrieving depot information for current user: \" + e.getMessage());\n\t\t// Set the response code to 500 and include an error message\n\t\tresponseInfo.setCode(ResponseCode.ERROR.getCode());\n\t\tresponseInfo.setMessage(e.getMessage());\n\t} catch (Exception e) {\n\t\t// Log the error\n\t\tlogger.error(\"Error while retrieving depot information for current user: \" + e.getMessage());\n\t\t// Set the response code to 500 and include an error message\n\t\tresponseInfo.setCode(ResponseCode.ERROR.getCode());\n\t\tresponseInfo.setMessage(e.getMessage());\n\t}\n\treturn responseInfo;\n}", "CodeBleu_score": 33.91958876724006}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t//    String type = request.getParameter(\"UBType\");\n//    String keyId = request.getParameter(\"UBKeyId\");\n    JSONArray result = new JSONArray();\n    try {\n        // Get the list of functions\n        List<Function> functions = functionService.findRoleFunction(type, keyId);\n        // Filter out \"\u7cfb\u7edf\u7ba1\u7406\" for non-admin users\n        User user = (User) request.getSession().getAttribute(\"user\");\n        if (user!= null &&!user.getRole().equals(ErpInfo.ADMIN)) {\n            functions = functionService.filterFunctions(functions, user.getTenantId());\n        }\n        // Create the JSON array\n        JSONArray array = new JSONArray();\n        // Create the JSON object\n        JSONObject object = new JSONObject();\n        // Add the filtered functions to the JSON array\n        array.addAll(functions);\n        // Add the JSON array to the JSON object\n        object.put(\"functions\", array);\n        // Add the JSON object to the JSON array\n        result.add(object);\n    } catch (DataAccessException e) {\n        logger.error(ExceptionConstants.ERROR_CODE_10000, e);\n        throw new BusinessRunTimeException(ExceptionConstants.ERROR_CODE_10000, e);\n    }\n    return result;\n}", "CodeBleu_score": 37.2006721643837}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t//    BaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n    JSONArray jsonArray = new JSONArray();\n    JSONObject jsonObject = new JSONObject();\n    String tenantId = request.getHeader(ErpInfo.TENANT_ID);\n    String userId = request.getHeader(ErpInfo.USER_ID);\n    String roleId = request.getHeader(ErpInfo.ROLE_ID);\n    String roleName = request.getHeader(ErpInfo.ROLE_NAME);\n    String userType = request.getHeader(ErpInfo.USER_TYPE);\n    String userName = request.getHeader(ErpInfo.USER_NAME);\n    String token = request.getHeader(ErpInfo.TOKEN);\n    String ip = request.getHeader(ErpInfo.IP);\n    String userAgent = request.getHeader(ErpInfo.USER_AGENT);\n    String systemName = request.getHeader(ErpInfo.SYSTEM_NAME);\n    String systemVersion = request.getHeader(ErpInfo.SYSTEM_VERSION);\n    String systemType = request.getHeader(ErpInfo.SYSTEM_TYPE);\n    String systemLanguage = request.getHeader(ErpInfo.SYSTEM_LANGUAGE);\n    String systemCountry = request.getHeader(ErpInfo.SYSTEM_COUNTRY);\n    String systemTimezone = request.getHeader(ErpInfo.SYSTEM_TIMEZONE);\n    String systemCurrency = request.getHeader(ErpInfo.SYSTEM_CURRENCY);\n    String systemTheme = request.getHeader(ErpInfo.SYSTEM_THEME);\n    String systemThemeColor = request.getHeader(ErpInfo.SYSTEM_THEME_COLOR);\n    String systemThemeColor2 = request.getHeader(ErpInfo.SYSTEM_THEME_COLOR2);\n    String systemThemeColor3 = request.getHeader(ErpInfo.SYSTEM_THEME_COLOR3);\n    String systemThemeColor4 = request.getHeader(ErpInfo.SYSTEM_THEME_COLOR4);\n    String systemThemeColor5 = request.getHeader(ErpInfo.SYSTEM_THEME_COLOR5);\n    String systemThemeColor6 = request.getHeader(ErpInfo.SYSTEM_THEME_COLOR6);\n    String systemThemeColor7 = request.getHeader(ErpInfo.SYSTEM_THEME_COLOR7);\n    String systemThemeColor8 = request.getHeader(ErpInfo.SYSTEM_THEME_COLOR8);\n    String systemThemeColor9 = request.getHeader(ErpInfo.SYSTEM_THEME_COLOR9);\n    String", "CodeBleu_score": 23.158288219437125}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t//    JSONArray jsonArray = new JSONArray();\n//    try {\n//        UserBusiness userBusiness = userBusinessService.findByTypeAndKeyId(type, keyId);\n//        List<Function> functionList = functionService.findByUBId(userBusiness.getId());\n//        JSONArray functionJsonArray = new JSONArray();\n//        for (Function function : functionList) {\n//            JSONObject jsonObject = new JSONObject();\n//            jsonObject.put(\"id\", function.getId());\n//            jsonObject.put(\"name\", function.getName());\n//            jsonObject.put(\"url\", function.getUrl());\n//            jsonObject.put(\"icon\", function.getIcon());\n//            jsonObject.put(\"parentId\", function.getParentId());\n//            jsonObject.put(\"sort\", function.getSort());\n//            jsonObject.put(\"type\", function.getType());\n//            jsonObject.put(\"remark\", function.getRemark());\n//            jsonObject.put(\"status\", function.getStatus());\n//            jsonObject.put(\"isLeaf\", function.getIsLeaf());\n//            functionJsonArray.add(jsonObject);\n//        }\n//        if (functionJsonArray.size() > 0) {\n//            JSONObject jsonObject = new JSONObject();\n//            jsonObject.put(\"functions\", functionJsonArray);\n//            jsonArray.add(jsonObject);\n//        }\n//    } catch (DataAccessException e) {\n//        throw new BusinessRunTimeException(ExceptionConstants.EXCEPTION_CODE_1000001, ExceptionConstants.EXCEPTION_MESSAGE_1000001);\n//    }\n//    return jsonArray;\n    return null;\n}", "CodeBleu_score": 6.819732116816643}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t//    User user = (User) request.getSession().getAttribute(\"user\");\n//    if(user == null){\n//        return returnJson(500,\"\u672a\u767b\u5f55\");\n//    }\n    BaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n    PlatformConfig platformConfig = null;\n    try {\n        platformConfig = platformConfigService.findByPlatformKey(platformKey);\n    } catch (Exception e) {\n        e.printStackTrace();\n        return returnJson(500,\"\u83b7\u53d6\u5e73\u53f0\u914d\u7f6e\u5931\u8d25\");\n    }\n    if (platformConfig!= null) {\n        baseResponseInfo.setCode(200);\n        baseResponseInfo.setData(platformConfig);\n    } else {\n        baseResponseInfo.setCode(404);\n        baseResponseInfo.setMessage(\"\u672a\u627e\u5230\u5e73\u53f0\u914d\u7f6e\");\n    }\n    return baseResponseInfo;\n}", "CodeBleu_score": 34.369504551653364}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t//    BaseResponseInfo responseInfo = new BaseResponseInfo();\n//    try {\n//        PlatformConfig platformConfig = platformConfigService.getPlatformConfigByKey(platformKey);\n//        responseInfo.setCode(200);\n//        responseInfo.setData(platformConfig);\n//    } catch (Exception e) {\n//        responseInfo.setCode(500);\n//        responseInfo.setMessage(e.getMessage());\n//    }\n//    return responseInfo;\n    BaseResponseInfo responseInfo = new BaseResponseInfo();\n    try {\n        PlatformConfig platformConfig = platformConfigService.getPlatformConfigByKey(platformKey);\n        responseInfo.setCode(200);\n        responseInfo.setData(platformConfig);\n    } catch (Exception e) {\n        responseInfo.setCode(500);\n        responseInfo.setMessage(e.getMessage());\n    }\n    return responseInfo;\n}", "CodeBleu_score": 47.08231680192413}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t//    String platformKey = request.getParameter(\"platformKey\");\n    Logger logger = LoggerFactory.getLogger(this.getClass());\n    BaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n    try {\n        PlatformConfig platformConfig = platformConfigService.getPlatformConfigByKey(platformKey);\n        baseResponseInfo.setCode(200);\n        baseResponseInfo.setData(platformConfig);\n    } catch (Exception e) {\n        logger.error(\"Error getting platform config by key: \" + e.getMessage());\n        baseResponseInfo.setCode(500);\n        baseResponseInfo.setMessage(\"Error getting platform config by key: \" + e.getMessage());\n    }\n    return baseResponseInfo;\n}", "CodeBleu_score": 41.455738097257}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tresponse.setCode(200);\n\t\tresponse.setData(systemConfigService.getCurrentInfo());\n\t} catch (Exception e) {\n\t\tresponse.setCode(500);\n\t\tresponse.setMsg(e.getMessage());\n\t\tlogger.error(\"\u83b7\u53d6\u5f53\u524d\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\", e);\n\t}\n\treturn response;\n}", "CodeBleu_score": 27.96529284021504}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n\tbaseResponseInfo.setCode(200);\n\tbaseResponseInfo.setData(systemConfigService.getCurrentInfo());\n\treturn baseResponseInfo;\n}", "CodeBleu_score": 19.442226969525038}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\tresponseInfo.setCode(200);\n\tresponseInfo.setData(systemConfigService.getSysConfigList());\n\treturn responseInfo;\n}", "CodeBleu_score": 19.642133822240254}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tString businessPath = (String) request.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE);\n\tMultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n\tMultipartFile multipartFile = multipartRequest.getFile(\"file\");\n\tString fileName = multipartFile.getOriginalFilename();\n\tString fileExt = fileName.substring(fileName.lastIndexOf(\".\") + 1);\n\tString filePath = FileUtils.getFilePath(businessPath, fileExt);\n\tString fileUrl = FileUtils.getFileUrl(businessPath, fileName);\n\tString fileSavePath = FileUtils.getFileSavePath(businessPath, fileName);\n\tString fileSaveUrl = FileUtils.getFileSaveUrl(businessPath, fileName);\n\tString fileSaveUrl2 = FileUtils.getFileSaveUrl2(businessPath, fileName);\n\tString fileSaveUrl3 = FileUtils.getFileSaveUrl3(businessPath, fileName);\n\tString fileSaveUrl4 = FileUtils.getFileSaveUrl4(businessPath, fileName);\n\tString fileSaveUrl5 = FileUtils.getFileSaveUrl5(businessPath, fileName);\n\tString fileSaveUrl6 = FileUtils.getFileSaveUrl6(businessPath, fileName);\n\tString fileSaveUrl7 = FileUtils.getFileSaveUrl7(businessPath, fileName);\n\tString fileSaveUrl8 = FileUtils.getFileSaveUrl8(businessPath, fileName);\n\tString fileSaveUrl9 = FileUtils.getFileSaveUrl9(businessPath, fileName);\n\tString fileSaveUrl10 = FileUtils.getFileSaveUrl10(businessPath, fileName);\n\tString fileSaveUrl11 = FileUtils.getFileSaveUrl11(businessPath, fileName);\n\tString fileSaveUrl12 = FileUtils.getFileSaveUrl12(businessPath, fileName);\n\tString fileSaveUrl13 = FileUtils.getFileSaveUrl13(businessPath, fileName);\n\tString fileSaveUrl14 = FileUtils.getFileSaveUrl14(businessPath, fileName);\n\tString fileSaveUrl15 = FileUtils.getFileSaveUrl15(businessPath, fileName);\n\tString fileSaveUrl16 = FileUtils.getFileSaveUrl16(businessPath, fileName);\n\tString fileSaveUrl17 = FileUtils.getFileSaveUrl17(businessPath, fileName);\n\tString fileSaveUrl18 = FileUtils.getFileSaveUrl18(businessPath, fileName);\n\tString", "CodeBleu_score": 25.447342094628695}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tString path = request.getParameter(\"path\");\n\tString type = request.getParameter(\"type\");\n\tMultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n\tMultipartFile file = multipartRequest.getFile(\"file\");\n\tString fileName = file.getOriginalFilename();\n\tString fileExtension = fileName.substring(fileName.lastIndexOf(\".\"));\n\tString businessPath = path;\n\tString businessFileName = fileName;\n\tString businessFileExtension = fileExtension;\n\tString businessFilePath = businessPath + \"/\" + businessFileName;\n\tString businessFileUrl = \"\";\n\tString businessFileUrl2 = \"\";\n\tString businessFileUrl3 = \"\";\n\tString businessFileUrl4 = \"\";\n\tString businessFileUrl5 = \"\";\n\tString businessFileUrl6 = \"\";\n\tString businessFileUrl7 = \"\";\n\tString businessFileUrl8 = \"\";\n\tString businessFileUrl9 = \"\";\n\tString businessFileUrl10 = \"\";\n\tString businessFileUrl11 = \"\";\n\tString businessFileUrl12 = \"\";\n\tString businessFileUrl13 = \"\";\n\tString businessFileUrl14 = \"\";\n\tString businessFileUrl15 = \"\";\n\tString businessFileUrl16 = \"\";\n\tString businessFileUrl17 = \"\";\n\tString businessFileUrl18 = \"\";\n\tString businessFileUrl19 = \"\";\n\tString businessFileUrl20 = \"\";\n\tString businessFileUrl21 = \"\";\n\tString businessFileUrl22 = \"\";\n\tString businessFileUrl23 = \"\";\n\tString businessFileUrl24 = \"\";\n\tString businessFileUrl25 = \"\";\n\tString businessFileUrl26 = \"\";\n\tString businessFileUrl27 = \"\";\n\tString businessFileUrl28 = \"\";\n\tString businessFileUrl29 = \"\";\n\tString businessFileUrl30 = \"\";\n\tString businessFileUrl31 = \"\";\n\tString businessFileUrl32 = \"\";\n\tString businessFileUrl33 = \"\";\n\tString businessFileUrl34 = \"\";\n\tString businessFileUrl35 = \"\";\n\tString businessFileUrl36 = \"\";\n\tString businessFileUrl37 = \"\";\n\tString businessFileUrl38 = \"\";\n\tString businessFileUrl39 = \"\";\n\tString businessFileUrl40 = \"\";\n\tString businessFileUrl41 =", "CodeBleu_score": 26.112895765539445}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t//    String uploadPath = request.getParameter(\"uploadPath\");", "CodeBleu_score": 1.8643131832166808}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t\n}", "CodeBleu_score": 4.842893009750053}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t\n}", "CodeBleu_score": 4.842893009750053}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t//        String title = jsonObject.getString(\"title\");", "CodeBleu_score": 4.807288443435734}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tint result = 0;\n\ttry {\n\t\tAccount account = new Account();\n\t\t// Set the account name\n\t\taccount.setName(obj.getString(\"name\"));\n\t\t// Set the account type\n\t\taccount.setType(obj.getString(\"type\"));\n\t\t// Set the account number\n\t\taccount.setNumber(obj.getString(\"number\"));\n\t\t// Set the account status\n\t\taccount.setStatus(obj.getString(\"status\"));\n\t\t// Set the account description\n\t\taccount.setDescription(obj.getString(\"description\"));\n\t\t// Set the account default flag\n\t\taccount.setDefault(obj.getString(\"default\"));\n\t\t// Set the account initial amount\n\t\tif (obj.getString(\"initialAmount\") == null) {\n\t\t\taccount.setInitialAmount(BigDecimal.ZERO);\n\t\t} else {\n\t\t\taccount.setInitialAmount(new BigDecimal(obj.getString(\"initialAmount\")));\n\t\t}\n\t\t// Set the account enabled flag\n\t\taccount.setEnabled(obj.getString(\"enabled\"));\n\t\t// Set the account balance\n\t\taccount.setBalance(account.getInitialAmount());\n\t\t// Set the account currency\n\t\taccount.setCurrency(obj.getString(\"currency\"));\n\t\t// Set the account currency rate\n\t\taccount.setCurrencyRate(obj.getString(\"currencyRate\"));\n\t\t// Set the account currency symbol\n\t\taccount.setCurrencySymbol(obj.getString(\"currencySymbol\"));\n\t\t// Set the account currency code\n\t\taccount.setCurrencyCode(obj.getString(\"currencyCode\"));\n\t\t// Set the account date format\n\t\taccount.setDateFormat(obj.getString(\"dateFormat\"));\n\t\t// Set the account time format\n\t\taccount.setTimeFormat(obj.getString(\"timeFormat\"));\n\t\t// Set the account decimal places\n\t\taccount.setDecimalPlaces(obj.getString(\"decimalPlaces\"));\n\t\t// Set the account decimal separator\n\t\taccount.setDecimalSeparator(obj.getString(\"decimalSeparator\"));\n\t\t// Set the account group separator\n\t\taccount.setGroupSeparator(obj.getString(\"groupSeparator\"));\n\t\t// Set the account decimal places\n\t\taccount.setDecimalPlaces(obj.getString(\"decimalPlaces\"));\n\t\t// Set the account decimal separator\n\t\taccount.setDecimalSeparator(obj.getString(\"decimalSeparator\"));\n\t\t// Set the account group separator\n\t\taccount.setGroupSeparator(obj.getString(\"groupSeparator\"));\n\t\t// Set the account decimal", "CodeBleu_score": 26.09506145773129}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tint result = 0;\n\ttry {\n\t\tAccount account = new Account();\n\t\t//String accountName = obj.getString(\"accountName\");\n\t\tString accountName = obj.getString(\"accountName\");\n\t\tString accountCode = obj.getString(\"accountCode\");\n\t\tString accountType = obj.getString(\"accountType\");\n\t\tString accountClass = obj.getString(\"accountClass\");\n\t\tString accountCategory = obj.getString(\"accountCategory\");\n\t\tString accountClassCode = obj.getString(\"accountClassCode\");\n\t\tString accountCategoryCode = obj.getString(\"accountCategoryCode\");\n\t\tString accountTypeCode = obj.getString(\"accountTypeCode\");\n\t\tString accountTypeCode = obj.getString(\"accountTypeCode\");\n\t\tString accountTypeCode2 = obj.getString(\"accountTypeCode2\");\n\t\tString accountTypeCode3 = obj.getString(\"accountTypeCode3\");\n\t\tString accountTypeCode4 = obj.getString(\"accountTypeCode4\");\n\t\tString accountTypeCode5 = obj.getString(\"accountTypeCode5\");\n\t\tString accountTypeCode6 = obj.getString(\"accountTypeCode6\");\n\t\tString accountTypeCode7 = obj.getString(\"accountTypeCode7\");\n\t\tString accountTypeCode8 = obj.getString(\"accountTypeCode8\");\n\t\tString accountTypeCode9 = obj.getString(\"accountTypeCode9\");\n\t\tString accountTypeCode10 = obj.getString(\"accountTypeCode10\");\n\t\tString accountTypeCode11 = obj.getString(\"accountTypeCode11\");\n\t\tString accountTypeCode12 = obj.getString(\"accountTypeCode12\");\n\t\tString accountTypeCode13 = obj.getString(\"accountTypeCode13\");\n\t\tString accountTypeCode14 = obj.getString(\"accountTypeCode14\");\n\t\tString accountTypeCode15 = obj.getString(\"accountTypeCode15\");\n\t\tString accountTypeCode16 = obj.getString(\"accountTypeCode16\");\n\t\tString accountTypeCode17 = obj.getString(\"accountTypeCode17\");\n\t\tString accountTypeCode18 = obj.getString(\"accountTypeCode18\");\n\t\tString accountTypeCode19 = obj.getString(\"accountTypeCode19\");\n\t\tString accountTypeCode20 = obj.getString(\"accountTypeCode20\");\n\t\tString accountTypeCode21 = obj.getString(\"accountTypeCode21\");\n\t\tString accountTypeCode22 = obj.getString(\"accountTypeCode22\");\n\t\tString accountTypeCode23 = obj.getString(\"accountTypeCode23", "CodeBleu_score": 20.921321272787424}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tint result = 0;\n\ttry {\n\t\t// 1. Get the account name from the JSON object.\n\t\tString name = obj.getString(\"name\");\n\t\t// 2. Get the account type from the JSON object.\n\t\tString type = obj.getString(\"type\");\n\t\t// 3. Get the account number from the JSON object.\n\t\tString number = obj.getString(\"number\");\n\t\t// 4. Get the account description from the JSON object.\n\t\tString description = obj.getString(\"description\");\n\t\t// 5. Get the account parent from the JSON object.\n\t\tString parent = obj.getString(\"parent\");\n\t\t// 6. Get the account initial amount from the JSON object.\n\t\tString initialAmount = obj.getString(\"initialAmount\");\n\t\t// 7. Get the account default flag from the JSON object.\n\t\tString defaultFlag = obj.getString(\"defaultFlag\");\n\t\t// 8. Get the account enabled flag from the JSON object.\n\t\tString enabledFlag = obj.getString(\"enabledFlag\");\n\t\t// 9. Get the account currency from the JSON object.\n\t\tString currency = obj.getString(\"currency\");\n\t\t// 10. Get the account account type from the JSON object.\n\t\tString accountType = obj.getString(\"accountType\");\n\t\t// 11. Get the account account category from the JSON object.\n\t\tString accountCategory = obj.getString(\"accountCategory\");\n\t\t// 12. Get the account account subcategory from the JSON object.\n\t\tString accountSubcategory = obj.getString(\"accountSubcategory\");\n\t\t// 13. Get the account account subcategory from the JSON object.\n\t\tString accountSubsubcategory = obj.getString(\"accountSubsubcategory\");\n\t\t// 14. Get the account account subcategory from the JSON object.\n\t\tString accountSubsubsubcategory = obj.getString(\"accountSubsubsubcategory\");\n\t\t// 15. Get the account account subcategory from the JSON object.\n\t\tString accountSubsubsubsubcategory = obj.getString(\"accountSubsubsubsubcategory\");\n\t\t// 16. Get the account account subcategory from the JSON object.\n\t\tString accountSubsubsubsubsubcategory = obj.getString(\"accountSubsubsubsubsubcategory\");\n\t\t// 17. Get the account account subcategory from the JSON object.\n\t\tString", "CodeBleu_score": 21.140832882002947}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\tLong count = null;\n\ttry {\n\t\tcount = accountMapper.listWithBalanceCount(name, serialNo);\n\t} catch (Exception e) {\n\t\tlog.error(\"listWithBalanceCount error\", e);\n\t}\n\treturn count;\n}", "CodeBleu_score": 44.411532836139585}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\ttry {\n\t\treturn accountMapper.listWithBalanceCount(name, serialNo);\n\t} catch (Exception e) {\n\t\tlog.error(ExceptionConstants.LIST_WITH_BALANCE_COUNT_ERROR, e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 26.755457161134455}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\ttry {\n\t\treturn accountMapper.listWithBalanceCount(name, serialNo);\n\t} catch (Exception e) {\n\t\tlog.error(ExceptionConstants.LIST_WITH_BALANCE_COUNT_ERROR, e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 26.755457161134455}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\treturn depotItemMapper.deleteByPrimaryKey(id);\n}", "CodeBleu_score": 14.422630765718694}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result = 0;\n\ttry {\n\t\tresult = depotItemMapper.deleteByPrimaryKey(id);\n\t} catch (Exception e) {\n\t\tlogService.error(request, \"\u5220\u9664\u51fa\u5e93\u5355\u660e\u7ec6\", e.getMessage());\n\t\tthrow new BusinessRunTimeException(ExceptionConstants.DELETE_DEPOT_ITEM_ERROR);\n\t}\n\treturn result;\n}", "CodeBleu_score": 56.78947919448407}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\ttry {\n\t\treturn depotItemMapper.deleteDepotItem(id);\n\t} catch (Exception e) {\n\t\tthrow new BusinessRunTimeException(ExceptionConstants.DEPOT_ITEM_DELETE_ERROR, e);\n\t}\n}", "CodeBleu_score": 26.245458341683108}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\tString endpoint = String.format(\"https://api.backblaze.com/b2api/v1/b2_get_upload_url\");\n\tString authToken = \"\";\n\tString uploadUrl = \"\";\n\tString uploadAuthToken = \"\";\n\tString uploadBucketId = \"\";\n\tString uploadBucketName = \"\";\n\tString uploadBucketType = \"\";\n\tString uploadBucketType2 = \"\";\n\tString uploadBucketType3 = \"\";\n\tString uploadBucketType4 = \"\";\n\tString uploadBucketType5 = \"\";\n\tString uploadBucketType6 = \"\";\n\tString uploadBucketType7 = \"\";\n\tString uploadBucketType8 = \"\";\n\tString uploadBucketType9 = \"\";\n\tString uploadBucketType10 = \"\";\n\tString uploadBucketType11 = \"\";\n\tString uploadBucketType12 = \"\";\n\tString uploadBucketType13 = \"\";\n\tString uploadBucketType14 = \"\";\n\tString uploadBucketType15 = \"\";\n\tString uploadBucketType16 = \"\";\n\tString uploadBucketType17 = \"\";\n\tString uploadBucketType18 = \"\";\n\tString uploadBucketType19 = \"\";\n\tString uploadBucketType20 = \"\";\n\tString uploadBucketType21 = \"\";\n\tString uploadBucketType22 = \"\";\n\tString uploadBucketType23 = \"\";\n\tString uploadBucketType24 = \"\";\n\tString uploadBucketType25 = \"\";\n\tString uploadBucketType26 = \"\";\n\tString uploadBucketType27 = \"\";\n\tString uploadBucketType28 = \"\";\n\tString uploadBucketType29 = \"\";\n\tString uploadBucketType30 = \"\";\n\tString uploadBucketType31 = \"\";\n\tString uploadBucketType32 = \"\";\n\tString uploadBucketType33 = \"\";\n\tString uploadBucketType34 = \"\";\n\tString uploadBucketType35 = \"\";\n\tString uploadBucketType36 = \"\";\n\tString uploadBucketType37 = \"\";\n\tString uploadBucketType38 = \"\";\n\tString uploadBucketType39 = \"\";\n\tString uploadBucketType40 = \"\";\n\tString uploadBucketType41 = \"\";\n\tString uploadBucketType42 = \"\";\n\tString uploadBucketType43 = \"\";\n\tString uploadBucketType44 = \"\";\n\tString uploadBucketType45 =", "CodeBleu_score": 7.940410202718584}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\ttry {\n\t\tString url = \"http://localhost:8080/api/projects/\" + projectName + \"/nodes/\" + nodeType + \"/\" + nodeKey;\n\t\tCloseableHttpClient client = HttpClients.createDefault();\n\t\tHttpGet request = new HttpGet(url);\n\t\tCloseableHttpResponse response = client.execute(request);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString responseString = EntityUtils.toString(entity);\n\t\tObjectMapper mapper = new ObjectMapper();\n\t\tJsonNode node = mapper.readTree(responseString);\n\t\tJsonNode key = node.get(\"key\");\n\t\tif (key!= null) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\ttry {\n\t\t\tif (client!= null) {\n\t\t\t\tclient.close();\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "CodeBleu_score": 48.97916625843594}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\ttry {\n\t\tString url = \"http://localhost:8080/api/projects/\" + projectName + \"/nodes/\" + nodeType + \"/\" + nodeKey;\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\tHttpGet httpGet = new HttpGet(url);\n\t\tCloseableHttpResponse response = httpClient.execute(httpGet);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString responseString = EntityUtils.toString(entity, Charset.forName(\"UTF-8\"));\n\t\tif (responseString.contains(\"key\")) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\ttry {\n\t\t\thttpClient.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 42.84388202192345}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\ttry {\n\t\t// Construct the URL for the GET request\n\t\tString url = String.format(\"http://localhost:8080/api/projects/%s/edges?edgeType=%s&fromType=%s&toType=%s&from=%s&to=%s\", projectName, edgeType, fromType, toType, from, to);\n\t\tHttpGet httpGet = new HttpGet(url);\n\n\t\t// Execute the GET request and process the response\n\t\tCloseableHttpResponse response = httpClient.execute(httpGet);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString responseContent = EntityUtils.toString(entity);\n\t\tObjectMapper mapper = new ObjectMapper();\n\t\tMap<String, Object> responseMap = mapper.readValue(responseContent, Map.class);\n\t\tboolean success = responseMap.containsKey(\"key\");\n\n\t\t// Close the response and client\n\t\tresponse.close();\n\t\thttpClient.close();\n\n\t\treturn success;\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n\treturn false;\n}", "CodeBleu_score": 47.23359282902367}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\tString url = \"https://graph.microsoft.com/v1.0/projects/\" + projectName + \"/_links/\" + edgeType + \"?fromType=\" + fromType + \"&toType=\" + toType + \"&from=\" + from + \"&to=\" + to;\n\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\tHttpGet httpGet = new HttpGet(url);\n\thttpGet.addHeader(\"Authorization\", \"Bearer \" + \"\");\n\thttpGet.addHeader(\"Content-Type\", \"application/json\");\n\thttpGet.addHeader(\"Accept\", \"application/json\");\n\thttpGet.addHeader(\"Host\", \"graph.microsoft.com\");\n\thttpGet.addHeader(\"Connection\", \"Keep-Alive\");\n\thttpGet.addHeader(\"User-Agent\", \"Apache-HttpClient/4.5.3 (Java/1.8.0_241)\");\n\thttpGet.addHeader(\"Accept-Encoding\", \"gzip,deflate\");\n\thttpGet.addHeader(\"Content-Length\", \"0\");\n\ttry {\n\t\tCloseableHttpResponse response = httpClient.execute(httpGet);\n\t\tHttpEntity entity = response.getEntity();\n\t\tif (entity!= null) {\n\t\t\tString result = EntityUtils.toString(entity);\n\t\t\tObjectMapper mapper = new ObjectMapper();\n\t\t\tMap<String, Object> map = mapper.readValue(result, Map.class);\n\t\t\tif (map.containsKey(\"key\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\ttry {\n\t\t\thttpClient.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 45.56710129311252}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\tboolean result = false;\n\ttry {\n\t\tString url = \"http://localhost:8080/api/projects/\" + projectName + \"/edges\";\n\t\tMap<String, String> parameters = new HashMap<>();\n\t\tparameters.put(\"edgeType\", edgeType);\n\t\tparameters.put(\"fromType\", fromType);\n\t\tparameters.put(\"toType\", toType);\n\t\tparameters.put(\"from\", from);\n\t\tparameters.put(\"to\", to);\n\t\tresult = doGet(url, parameters);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\treturn result;\n}", "CodeBleu_score": 22.495334305179647}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\t\tif (event == null) {\n\t\tthrow new IllegalArgumentException(\"event is null\");\n\t}\n\tif (event.getMessage() == null) {\n\t\tthrow new IllegalArgumentException(\"event.message is null\");\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(new Location(\"test\", \"test\"));\n\t}\n\tevent.setTime(new Date());\n\tString jsonString = null;\n\ttry {\n\t\tjsonString = objectMapper.writeValueAsString(event);\n\t} catch (JsonProcessingException e) {\n\t\tthrow new RuntimeException(\"Failed to convert event to JSON\", e);\n\t}\n\tString topic = \"test\";\n\tif (event.getLocation().getTarget()!= null) {\n\t\ttopic = event.getLocation().getTarget();\n\t}\n\tProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, jsonString);\n\tproducer.send(record);\n\tproducer.flush();\n}", "CodeBleu_score": 55.61070257649986}, {"code": "public void sendEvent(Event event){\n\t\tif (event == null) {\n\t\tthrow new IllegalArgumentException(\"event is null\");\n\t}\n\tif (event.getMessage() == null) {\n\t\tthrow new IllegalArgumentException(\"event.message is null\");\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(new Location(1, \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\",", "CodeBleu_score": 18.273050775931562}, {"code": "public void sendEvent(Event event){\n\t\tif (event == null) {\n\t\tthrow new IllegalArgumentException(\"The event cannot be null\");\n\t}\n\tif (event.getMessage() == null) {\n\t\tthrow new IllegalArgumentException(\"The event's message cannot be null\");\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(new Location(\"localhost\", \"localhost\", new Random().nextInt()));\n\t}\n\tevent.setEventTime(new Date());\n\tString jsonString;\n\ttry {\n\t\tjsonString = new ObjectMapper().writeValueAsString(event);\n\t} catch (JsonProcessingException e) {\n\t\tthrow new RuntimeException(\"Failed to convert the event to JSON string\", e);\n\t}\n\tString topic = event.getTarget() == null? \"test\" : event.getTarget();\n\tProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, jsonString);\n\tproducer.send(record);\n\tproducer.flush();\n}", "CodeBleu_score": 52.42667570031849}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t\t// Set the access key and secret key of the OSS bucket.\n\tString accessKeyId = \"\";\n\tString accessKeySecret = \"\";\n\t// Set the endpoint of the OSS bucket.\n\tString endpoint = \"oss-cn-beijing.aliyuncs.com\";\n\t// Set the name of the OSS bucket.\n\tString bucketName = \"test-123\";\n\t// Set the name of the object to be uploaded.\n\tString objectName = objName;\n\n\t// Initialize the OSSClient.\n\tOSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\n\t// Upload the file content as an object with the specified name.\n\tossClient.putObject(bucketName, objectName, new ByteArrayInputStream(content));\n\n\t// Shut down the OSSClient.\n\tossClient.shutdown();\n\n\t// Return the URL of the uploaded object.\n\treturn \"https://\" + bucketName + \".\" + endpoint + \"/\" + objectName;\n}", "CodeBleu_score": 36.29199997311813}, {"code": "public String upload(String objName, byte[] content){\n\t\t// Create an OSS client to upload a file.\n\t// The following example uses the default region and access credentials.\n\t// You can use the following methods to initialize the OSS client:\n\t// 1. Specify the region and access credentials when creating the OSS client.\n\t// OSSClient client = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\t// 2. Use the default profile.\n\t// OSSClient client = new OSSClient(endpoint, credential);\n\t// 3. Use the default profile and specify the protocol.\n\t// OSSClient client = new OSSClient(endpoint, credential, ProtocolType.HTTP);\n\t// 4. Use the default profile and specify the connection timeout and read timeout.\n\t// OSSClient client = new OSSClient(endpoint, credential, ProtocolType.HTTP, 15000, 15000);\n\t// 5. Use the default profile and specify the connection timeout, read timeout, and socket timeout.\n\t// OSSClient client = new OSSClient(endpoint, credential, ProtocolType.HTTP, 15000, 15000, 15000);\n\t// 6. Use the default profile and specify the connection timeout, read timeout, socket timeout, and proxy host.\n\t// OSSClient client = new OSSClient(endpoint, credential, ProtocolType.HTTP, 15000, 15000, 15000, \"proxyHost\");\n\t// 7. Use the default profile and specify the connection timeout, read timeout, socket timeout, proxy host, and proxy port.\n\t// OSSClient client = new OSSClient(endpoint, credential, ProtocolType.HTTP, 15000, 15000, 15000, \"proxyHost\", 8080);\n\t// 8. Use the default profile and specify the connection timeout, read timeout, socket timeout, proxy host, proxy port, and proxy username and password.\n\t// OSSClient client = new OSSClient(endpoint, credential, ProtocolType.HTTP, 15000, 15000, 15000, \"proxyHost\", 8080, \"", "CodeBleu_score": 4.109031139251467}, {"code": "public String upload(String objName, byte[] content){\n\t\t// Replace the following with your own bucket name.\n\tString bucketName = \"your-bucket-name\";\n\t// Replace the following with your own access key and secret key.\n\tString accessKeyId = \"your-access-key-id\";\n\tString accessKeySecret = \"your-access-key-secret\";\n\t// Replace the following with your own region name.\n\tString region = \"your-region\";\n\t// Replace the following with your own endpoint.\n\tString endpoint = \"your-endpoint\";\n\n\t// Initialize the OSSClient.\n\tOSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\n\t// Upload the file as an object with the specified name.\n\tossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\n\t// Shut down the OSSClient.\n\tossClient.shutdown();\n\n\t// Return the URL of the uploaded object.\n\treturn String.format(\"https://%s.%s/%s\", bucketName, endpoint, objName);\n}", "CodeBleu_score": 34.67323316058876}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\treturn ipToLocation(ipAddress, null);\n}", "CodeBleu_score": 4.4789932043010445}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\treturn ipToLocation(ipAddress, null);\n}", "CodeBleu_score": 4.4789932043010445}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\tif (ipAddress == null) {\n\t\treturn null;\n\t}\n\tif (ipAddress.length() == 0) {\n\t\treturn null;\n\t}\n\tif (ipAddress.indexOf(\".\") < 0) {\n\t\treturn null;\n\t}\n\tif (ipAddress.indexOf(\".\")!= ipAddress.lastIndexOf(\".\")) {\n\t\treturn null;\n\t}\n\tif (ipAddress.indexOf(\".\") > 3) {\n\t\treturn null;\n\t}\n\tif (ipAddress.indexOf(\".\") == 3) {\n\t\tif (ipAddress.indexOf(\".\") == 0) {\n\t\t\treturn null;\n\t\t}\n\t\tif (ipAddress.indexOf(\".\") == 1) {\n\t\t\tif (ipAddress.indexOf(\".\") == ipAddress.length() - 1) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\tif (ipAddress.indexOf(\".\") == 0) {\n\t\tif (ipAddress.indexOf(\".\") == ipAddress.length() - 1) {\n\t\t\treturn null;\n\t\t}\n\t}\n\tif (ipAddress.indexOf(\".\") == ipAddress.length() - 1) {\n\t\treturn null;\n\t}\n\tif (ipAddress.indexOf(\".\") == 0) {\n\t\treturn null;\n\t}\n\tif (ipAddress.indexOf(\".\") == ipAddress.length() - 1) {\n\t\treturn null;\n\t}\n\tif (ipAddress.indexOf(\".\") == 1) {\n\t\tif (ipAddress.indexOf(\".\") == ipAddress.length() - 2) {\n\t\t\treturn null;\n\t\t}\n\t}\n\tif (ipAddress.indexOf(\".\") == ipAddress.length() - 2) {\n\t\tif (ipAddress.indexOf(\".\") == 0) {\n\t\t\treturn null;\n\t\t}\n\t}\n\tif (ipAddress.indexOf(\".\") == 0) {\n\t\tif (ipAddress.indexOf(\".\") == ipAddress.length() - 2) {\n\t\t\treturn null;\n\t\t}\n\t}\n\tif (ipAddress.indexOf(\".\") == ipAddress.length() - 2) {\n\t\tif (ipAddress.indexOf(\".\") == ipAddress.length() - 1) {\n\t\t\treturn null;\n\t\t}\n\t}\n\tif (ipAddress.indexOf(\".\") == 1) {\n\t\tif (ipAddress.indexOf(\".\") == ipAddress.length() - 3) {\n\t\t", "CodeBleu_score": 18.720739537376616}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (esRestClient == null) {\n\t\tsynchronized (this) {\n\t\t\tif (esRestClient == null) {\n\t\t\t\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\t\t\t\tfor (String host : clusterHosts) {\n\t\t\t\t\thosts.add(new HttpHost(host, clusterPort));\n\t\t\t\t}\n\t\t\t\tesRestClient = RestClient.builder(hosts.toArray(new HttpHost[hosts.size()])).build();\n\t\t\t\tesRestHighLevelClient = new RestHighLevelClient(esRestClient);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 44.859993380296224}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (this.esClient!= null && this.esRestHighLevelClient!= null) {\n\t\treturn;\n\t}\n\tsynchronized (this.esClient) {\n\t\tif (this.esClient!= null && this.esRestHighLevelClient!= null) {\n\t\t\treturn;\n\t\t}\n\t\tthis.esClient = new RestClient.Builder(this.esClusterHosts).setHttpClientConfigCallback(new RestClient.HttpClientConfigCallback() {\n\t\t\t@Override\n\t\t\tpublic HttpHost configure(HttpHost httpHost, org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder) {\n\t\t\t\treturn httpHost;\n\t\t\t}\n\t\t}).build();\n\t\tthis.esRestHighLevelClient = new RestHighLevelClient(this.esClient);\n\t}\n}", "CodeBleu_score": 42.52018581763253}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (this.lowLevelClient == null && this.highLevelClient == null) {\n\t\tsynchronized (this) {\n\t\t\tif (this.lowLevelClient == null && this.highLevelClient == null) {\n\t\t\t\tList<HttpHost> httpHosts = new ArrayList<HttpHost>();\n\t\t\t\tfor (String host : this.hosts) {\n\t\t\t\t\tString[] hostAndPort = host.split(\":\");\n\t\t\t\t\tif (hostAndPort.length!= 2) {\n\t\t\t\t\t\tthrow new RuntimeException(\"Invalid host:port format: \" + host);\n\t\t\t\t\t}\n\t\t\t\t\thttpHosts.add(new HttpHost(hostAndPort[0], Integer.parseInt(hostAndPort[1]), \"http\"));\n\t\t\t\t}\n\t\t\t\tthis.lowLevelClient = RestClient.builder(httpHosts.toArray(new HttpHost[httpHosts.size()])).build();\n\t\t\t\tthis.highLevelClient = new RestHighLevelClient(this.lowLevelClient);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 31.879012309022542}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tif (clusterHostList!= null) {\n\t\tString[] hostsArray = clusterHostList.split(\",\");\n\t\tfor (String host : hostsArray) {\n\t\t\tString[] hostAndPort = host.split(\":\");\n\t\t\tif (hostAndPort.length == 1) {\n\t\t\t\thosts.add(new HttpHost(hostAndPort[0], clusterPort));\n\t\t\t} else {\n\t\t\t\thosts.add(new HttpHost(hostAndPort[0], Integer.parseInt(hostAndPort[1])));\n\t\t\t}\n\t\t}\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 47.160905907639815}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<>();\n\tString[] hostArray = clusterHostList.split(\",\");\n\tfor (String host : hostArray) {\n\t\tString[] hostAndPort = host.split(\":\");\n\t\tString hostName = hostAndPort[0];\n\t\tint port = clusterPort;\n\t\tif (hostAndPort.length > 1) {\n\t\t\tport = Integer.parseInt(hostAndPort[1]);\n\t\t}\n\t\thosts.add(new HttpHost(hostName, port));\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 42.04587485877097}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<>();\n\tString[] hostList = clusterHostList.split(\",\");\n\tfor (String host : hostList) {\n\t\tString[] hostParts = host.split(\":\");\n\t\tif (hostParts.length == 1) {\n\t\t\thosts.add(new HttpHost(hostParts[0], clusterPort, \"http\"));\n\t\t} else {\n\t\t\thosts.add(new HttpHost(hostParts[0], Integer.parseInt(hostParts[1]), \"http\"));\n\t\t}\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 43.68224692914783}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\tURIBuilder builder = new URIBuilder(\"http://localhost:8080/api/v1/sms\");\n\tCloseableHttpResponse response = null;\n\tLinkedBlockingQueue<String> taskQueue = new LinkedBlockingQueue<String>();\n\tAtomicBoolean isRunning = new AtomicBoolean(true);\n\tSimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\");\n\twhile (isRunning.get()) {\n\t\tString task = taskQueue.poll(30, TimeUnit.SECONDS);\n\t\tif (task!= null) {\n\t\t\tString taskType = task.substring(0, task.indexOf(\" \"));\n\t\t\tString taskData = task.substring(task.indexOf(\" \") + 1);\n\t\t\tif (taskType.equals(\"TEXT\")) {\n\t\t\t\ttry {\n\t\t\t\t\tString recipient = taskData.substring(0, taskData.indexOf(\" \"));\n\t\t\t\t\tString message = taskData.substring(taskData.indexOf(\" \") + 1);\n\t\t\t\t\tif (recipient.length() == 10 && message.length() <= 160) {\n\t\t\t\t\t\tMap<String, String> params = new HashMap<String, String>();\n\t\t\t\t\t\tparams.put(\"to\", recipient);\n\t\t\t\t\t\tparams.put(\"message\", message);\n\t\t\t\t\t\tURI uri = builder.setParameters(params).build();\n\t\t\t\t\t\tHttpGet request = new HttpGet(uri);\n\t\t\t\t\t\tresponse = httpClient.execute(request);\n\t\t\t\t\t\tHttpEntity entity = response.getEntity();\n\t\t\t\t\t\tif (entity!= null) {\n\t\t\t\t\t\t\tString responseBody = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n\t\t\t\t\t\t\tif (responseBody.contains(\"OK\")) {\n\t\t\t\t\t\t\t\tlog.info(\"Message sent to recipient \" + recipient + \" at \" + sdf.format(new Date()));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tlog.error(\"Error sending message to recipient \" + recipient + \": \" + responseBody);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlog.error(\"Error sending message to recipient \" + recipient + \": \" + response.getStatusLine());\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlog.error(\"Invalid task data: \" + taskData);\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tlog.error(\"Error sending message to recipient \" + taskData + \": \" + e.getMessage());", "CodeBleu_score": 36.7701826549316}, {"code": "protected void pollingWork() throws InterruptedException{\n\t\tCloseableHttpClient httpclient = HttpClients.createDefault();\n\tAtomicBoolean keepRunning = new AtomicBoolean(true);\n\tLinkedBlockingQueue<String> workQueue = new LinkedBlockingQueue<>();\n\tworkQueue.offer(\"1\");\n\tworkQueue.offer(\"2\");\n\tworkQueue.offer(\"3\");\n\tworkQueue.offer(\"4\");\n\tworkQueue.offer(\"5\");\n\tworkQueue.offer(\"6\");\n\tworkQueue.offer(\"7\");\n\tworkQueue.offer(\"8\");\n\tworkQueue.offer(\"9\");\n\tworkQueue.offer(\"10\");\n\tworkQueue.offer(\"11\");\n\tworkQueue.offer(\"12\");\n\tworkQueue.offer(\"13\");\n\tworkQueue.offer(\"14\");\n\tworkQueue.offer(\"15\");\n\tworkQueue.offer(\"16\");\n\tworkQueue.offer(\"17\");\n\tworkQueue.offer(\"18\");\n\tworkQueue.offer(\"19\");\n\tworkQueue.offer(\"20\");\n\tworkQueue.offer(\"21\");\n\tworkQueue.offer(\"22\");\n\tworkQueue.offer(\"23\");\n\tworkQueue.offer(\"24\");\n\tworkQueue.offer(\"25\");\n\tworkQueue.offer(\"26\");\n\tworkQueue.offer(\"27\");\n\tworkQueue.offer(\"28\");\n\tworkQueue.offer(\"29\");\n\tworkQueue.offer(\"30\");\n\tworkQueue.offer(\"31\");\n\tworkQueue.offer(\"32\");\n\tworkQueue.offer(\"33\");\n\tworkQueue.offer(\"34\");\n\tworkQueue.offer(\"35\");\n\tworkQueue.offer(\"36\");\n\tworkQueue.offer(\"37\");\n\tworkQueue.offer(\"38\");\n\tworkQueue.offer(\"39\");\n\tworkQueue.offer(\"40\");\n\tworkQueue.offer(\"41\");\n\tworkQueue.offer(\"42\");\n\tworkQueue.offer(\"43\");\n\tworkQueue.offer(\"44\");\n\tworkQueue.offer(\"45\");\n\tworkQueue.offer(\"46\");\n\tworkQueue.offer(\"47\");\n\tworkQueue.offer(\"48\");\n\t", "CodeBleu_score": 10.673168277794126}, {"code": "protected void pollingWork() throws InterruptedException{\n\t\tCloseableHttpClient client = HttpClients.createDefault();\n\tLinkedBlockingQueue<Task> queue = new LinkedBlockingQueue<Task>();\n\tAtomicBoolean running = new AtomicBoolean(true);\n\tMap<String, String> headers = new HashMap<String, String>();\n\theaders.put(\"Authorization\", \"Bearer \" + accessToken);\n\theaders.put(\"Content-Type\", \"application/json\");\n\theaders.put(\"Accept\", \"application/json\");\n\theaders.put(\"User-Agent\", \"Java\");\n\theaders.put(\"Accept-Charset\", \"UTF-8\");\n\theaders.put(\"Accept-Encoding\", \"gzip, deflate\");\n\theaders.put(\"Cache-Control\", \"no-cache\");\n\theaders.put(\"Connection\", \"keep-alive\");\n\theaders.put(\"X-Mashape-Key\", \"\");\n\theaders.put(\"X-Mashape-Host\", \"spoonacular-recipe-food-nutrition-v1.p.mashape.com\");\n\theaders.put(\"Accept-Language\", \"en-US,en;q=0.8\");\n\theaders.put(\"Host\", \"spoonacular-recipe-food-nutrition-v1.p.mashape.com\");\n\theaders.put(\"Accept-Encoding\", \"gzip, deflate\");\n\theaders.put(\"Connection\", \"keep-alive\");\n\theaders.put(\"X-Mashape-Key\", \"\");\n\theaders.put(\"X-Mashape-Host\", \"spoonacular-recipe-food-nutrition-v1.p.mashape.com\");\n\theaders.put(\"Accept-Language\", \"en-US,en;q=0.8\");\n\theaders.put(\"Host\", \"spoonacular-recipe-food-nutrition-v1.p.mashape.com\");\n\theaders.put(\"Accept-Encoding\", \"gzip, deflate\");\n\theaders.put(\"Connection\", \"keep-alive\");\n\theaders.put(\"X-Mashape-Key\", \"\");\n\theaders.put(\"X-Mashape-Host\", \"spoonacular-recipe-food-nutrition-v1.p.mashape.com\");\n\theaders.put", "CodeBleu_score": 14.735802820269997}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tCloseableHttpClient httpclient = HttpClients.createDefault();\n\tHttpGet httpget = new HttpGet(uri);\n\tCloseableHttpResponse response = httpclient.execute(httpget);\n\tHttpEntity entity = response.getEntity();\n\tString responseContent = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n\treturn responseContent;\n}", "CodeBleu_score": 60.92144676892691}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tCloseableHttpClient httpclient = HttpClients.createDefault();\n\tHttpGet httpGet = new HttpGet(uri);\n\tCloseableHttpResponse response = httpclient.execute(httpGet);\n\tHttpEntity entity = response.getEntity();\n\tString content = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n\tEntityUtils.consume(entity);\n\tresponse.close();\n\thttpclient.close();\n\treturn content;\n}", "CodeBleu_score": 62.17883865937217}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tCloseableHttpClient httpclient = HttpClients.createDefault();\n\tHttpGet httpget = new HttpGet(uri);\n\tCloseableHttpResponse response = httpclient.execute(httpget);\n\ttry {\n\t\tHttpEntity entity = response.getEntity();\n\t\tString responseString = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n\t\tEntityUtils.consume(entity);\n\t\treturn responseString;\n\t} finally {\n\t\tresponse.close();\n\t\thttpclient.close();\n\t}\n}", "CodeBleu_score": 58.485448628520075}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tMap<String, Object> result = new HashMap<>();\n\ttry {\n\t\tDocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\t\tDocument doc = db.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n\t\tNodeList nl = doc.getChildNodes();\n\t\tfor (int i = 0; i < nl.getLength(); i++) {\n\t\t\tNode node = nl.item(i);\n\t\t\tif (node.getNodeType() == Node.ELEMENT_NODE) {\n\t\t\t\tString key = node.getNodeName();\n\t\t\t\tif (doTrim) {\n\t\t\t\t\tkey = key.trim();\n\t\t\t\t}\n\t\t\t\tString value = decodeNode(node, doTrim);\n\t\t\t\tif (value!= null) {\n\t\t\t\t\tresult.put(key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\treturn result;\n}", "CodeBleu_score": 48.1481514416663}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tMap<String, Object> result = null;\n\ttry {\n\t\tDocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\t\tDocument document = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n\t\tNodeList childNodes = document.getChildNodes();\n\t\tif (childNodes.getLength() > 0) {\n\t\t\tresult = decodeNodeToMap(childNodes.item(0), doTrim);\n\t\t}\n\t} catch (Exception e) {\n\t\t// do nothing\n\t}\n\treturn result;\n}", "CodeBleu_score": 49.37553581881446}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tMap<String, Object> result = null;\n\tDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder db = dbf.newDocumentBuilder();\n\tDocument document = db.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n\tNodeList nodes = document.getChildNodes();\n\tif (nodes!= null) {\n\t\tresult = new HashMap<>();\n\t\tfor (int i = 0; i < nodes.getLength(); i++) {\n\t\t\tNode node = nodes.item(i);\n\t\t\tif (node.getNodeType() == Node.ELEMENT_NODE) {\n\t\t\t\tString key = node.getNodeName();\n\t\t\t\tString value = decodeNode(node, doTrim);\n\t\t\t\tif (StringUtils.isNotBlank(key) && StringUtils.isNotBlank(value)) {\n\t\t\t\t\tresult.put(key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}", "CodeBleu_score": 47.31315233912262}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tfinal Logger log = LogManager.getLogger(this.getClass());\n\tfinal boolean debug = log.isDebugEnabled();\n\tfinal String methodName = \"enqueueGenerateSchedulesAfterCommit\";\n\tfinal long start = System.currentTimeMillis();\n\tfinal long orderId = orderRecord.get_ID();\n\tfinal String orderName = orderRecord.get_Value();\n\tfinal long orderType = orderRecord.get_OrderType();\n\tfinal long orderStatus = orderRecord.get_OrderStatus();\n\tfinal long orderAction = orderRecord.get_OrderAction();\n\tfinal long orderActionCategory = orderRecord.get_OrderActionCategory();\n\tfinal long orderActionCategoryValue = orderRecord.get_OrderActionCategoryValue();\n\tfinal long orderActionCategoryValue2 = orderRecord.get_OrderActionCategoryValue2();\n\tfinal long orderActionCategoryValue3 = orderRecord.get_OrderActionCategoryValue3();\n\tfinal long orderActionCategoryValue4 = orderRecord.get_OrderActionCategoryValue4();\n\tfinal long orderActionCategoryValue5 = orderRecord.get_OrderActionCategoryValue5();\n\tfinal long orderActionCategoryValue6 = orderRecord.get_OrderActionCategoryValue6();\n\tfinal long orderActionCategoryValue7 = orderRecord.get_OrderActionCategoryValue7();\n\tfinal long orderActionCategoryValue8 = orderRecord.get_OrderActionCategoryValue8();\n\tfinal long orderActionCategoryValue9 = orderRecord.get_OrderActionCategoryValue9();\n\tfinal long orderActionCategoryValue10 = orderRecord.get_OrderActionCategoryValue10();\n\tfinal long orderActionCategoryValue11 = orderRecord.get_OrderActionCategoryValue11();\n\tfinal long orderActionCategoryValue12 = orderRecord.get_OrderActionCategoryValue12();\n\tfinal long orderActionCategoryValue13 = orderRecord.get_OrderActionCategoryValue13();\n\tfinal long orderActionCategoryValue14 = orderRecord.get_OrderActionCategoryValue14();\n\tfinal long orderActionCategoryValue15 = orderRecord.get_OrderActionCategoryValue15();\n\tfinal long orderActionCategoryValue16 = orderRecord.get_OrderActionCategoryValue16();\n\tfinal long orderActionCategoryValue17 = orderRecord.get_OrderActionCategoryValue17();\n\tfinal long order", "CodeBleu_score": 27.12145062450319}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tfinal Logger logger = LogManager.getLogger();\n\tfinal String methodName = \"enqueueGenerateSchedulesAfterCommit\";\n\tfinal String orderNo = orderRecord.getDocumentNo();\n\tfinal String trxName = orderRecord.get_TrxName();\n\tfinal boolean isPostponed = orderRecord.isPostponed();\n\tfinal boolean isEligible = orderRecord.isEligibleForAutoProcessing();\n\tfinal boolean isCreateMissingShipmentSchedules = isPostponed && isEligible;\n\tfinal boolean isCompleteShipAndInvoice = orderRecord.isCompleteShipAndInvoice();\n\tfinal boolean isCreateMissingShipmentSchedulesWorkpackage = isPostponed &&!isEligible;\n\n\tfinal boolean isCreateMissingShipmentSchedulesWorkpackageEnabled = Services.getService(ISysConfigBL.class).getBoolean(CreateMissingShipmentSchedulesWorkpackageProcessor.CONFIG_KEY_CREATE_MISSING_SHIPMENT_SCHEDULES_WORKPACKAGE_ENABLED, false);\n\n\tif (isCompleteShipAndInvoice) {\n\t\tlogger.info(\"{}: Order {} is complete ship and invoice. No action required.\", methodName, orderNo);\n\t\treturn;\n\t}\n\tif (isCreateMissingShipmentSchedulesWorkpackage) {\n\t\tlogger.info(\"{}: Order {} is postponed and eligible for auto-processing. No action required.\", methodName, orderNo);\n\t\treturn;\n\t}\n\tif (isCreateMissingShipmentSchedules) {\n\t\tlogger.info(\"{}: Order {} is postponed and eligible for auto-processing. Enqueuing {}.\", methodName, orderNo, CreateMissingShipmentSchedulesWorkpackageProcessor.class.getSimpleName());\n\t\tServices.getService(ITrxManager.class).enqueue(CreateMissingShipmentSchedulesWorkpackageProcessor.class, new AsyncBatchId(orderNo, trxName));\n\t\treturn;\n\t}\n\tif (isCreateMissingShipmentSchedulesWorkpackageEnabled) {\n\t\tlogger.info(\"{}: Order {} is postponed and not eligible for auto-processing. Enqueuing {}.\", methodName, orderNo, CreateMissingShipmentSchedulesWorkpackageProcessor.class.getSimpleName());\n\t\tServices.getService(ITrxManager.class).enqueue(CreateMissingShipmentSchedulesWorkpackageProcessor.class, new AsyncBatchId(orderNo, trxName));\n\t\treturn;\n\t}\n\tlogger.info(\"{}: Order {} is not postponed and not eligible for", "CodeBleu_score": 30.655927675688766}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tfinal Logger log = LogManager.getLogger(getClass());\n\tfinal String methodName = \"enqueueGenerateSchedulesAfterCommit\";\n\n\tif (orderRecord == null) {\n\t\tlog.warn(methodName + \": orderRecord is null\");\n\t\treturn;\n\t}\n\n\tfinal boolean isAutoProcessEligible = isAutoProcessEligible(orderRecord);\n\tif (!isAutoProcessEligible) {\n\t\tlog.info(methodName + \": order is not eligible for auto-processing: \" + orderRecord.getDocumentNo());\n\t\tscheduleCreateMissingShipmentSchedules(orderRecord);\n\t\treturn;\n\t}\n\n\tfinal String logMsg = methodName + \": order is eligible for auto-processing: \" + orderRecord.getDocumentNo();\n\tlog.info(logMsg);\n\n\tfinal ITrxManager trxManager = Services.getTrxManager();\n\tfinal ITrx trx = trxManager.getTrx();\n\tfinal String trxName = trxManager.getTrxName();\n\ttry {\n\t\ttrxManager.startTransaction(trxName, trx);\n\t\tfinal CompleteShipAndInvoiceEnqueuer enqueuer = Services.getCompleteShipAndInvoiceEnqueuer();\n\t\tenqueuer.enqueue(orderRecord, trx);\n\t} catch (Exception e) {\n\t\tlog.error(methodName + \": error while enqueuing order for auto-processing: \" + orderRecord.getDocumentNo(), e);\n\t} finally {\n\t\ttrxManager.endTransaction(trxName, trx);\n\t}\n}", "CodeBleu_score": 39.53447730708921}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$user = User::where('email', $request->email)->first();\n\tif ($user) {\n\t\tif ($this->hasTooManyLoginAttempts($request)) {\n\t\t\t$this->fireLockoutEvent($request);\n\t\t\treturn null;\n\t\t}\n\t\tif (! $user->hasVerifiedEmail()) {\n\t\t\tthrow ValidationException::withMessages([\n\t\t\t\t'verify_email' => 'Your email address must be verified before you can sign in.',\n\t\t\t]);\n\t\t}\n\t\tif (\n\t\t\t! $user->hasPassword() &&\n\t\t\t! $user->hasWebAuthnCredential() &&\n\t\t\t! $user->hasTOTPSecret()\n\t\t) {\n\t\t\tthrow ValidationException::withMessages([\n\t\t\t\t'password' => '.',\n\t\t\t]);\n\t\t}\n\t\tif ($this->attemptLogin($request)) {\n\t\t\treturn $user;\n\t\t}\n\t\t$this->incrementLoginAttempts($request);\n\t}\n\treturn null;\n}", "CodeBleu_score": 41.215485513216834}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$user = User::where('email', $request->email)->first();\n\n\tif ($user && $user->is_active) {\n\t\tif ($user->is_locked) {\n\t\t\t$this->failed($request, 'locked');\n\t\t}\n\n\t\tif (Hash::check($request->password, $user->password)) {\n\t\t\t$this->clearLoginAttempts($request);\n\n\t\t\treturn $user;\n\t\t}\n\t}\n\n\t$this->incrementLoginAttempts($request);\n\n\t$this->failed($request);\n\n\treturn null;\n}", "CodeBleu_score": 45.10225047552366}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$user = User::where('email', $request->email)->first();\n\tif ($user && $user->password && $user->password == $request->password) {\n\t\treturn $user;\n\t}\n\treturn null;\n}", "CodeBleu_score": 32.91052517859484}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t\t$this->incrementLoginAttempts($request);\n\tthrow ValidationException::withMessages([\n\t\t$this->username() => [trans('auth.failed')],\n\t]);\n}", "CodeBleu_score": 65.1912759393993}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t\t$this->incrementLoginAttempts($request);\n\n\t$seconds = $this->limiter()->availableIn(\n\t\t$this->throttleKey($request)\n\t);\n\n\tthrow ValidationException::withMessages([\n\t\t$this->username() => [\n\t\t\t__($this->username().'is incorrect.'),\n\t\t],\n\t])->errorBag($this->username())\n\t\t->redirectTo($this->loginPath())\n\t\t->withInput($request->only($this->username(),'remember'))\n\t\t->withErrors([\n\t\t\t$this->username() => [\n\t\t\t\t__($this->username().'is incorrect.'),\n\t\t\t],\n\t\t])\n\t\t->with('seconds', $seconds);\n}", "CodeBleu_score": 42.44854716049675}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t\t$this->incrementLoginAttempts($request);\n\t$seconds = $this->limiter()->availableIn(\n\t\t$this->throttleKey($request)\n\t);\n\n\t$message = $this->getFailedLoginMessage();\n\tthrow ValidationException::withMessages([\n\t\t$this->username() => [\n\t\t\t$message,\n\t\t\t'You have attempted to log in too many times. Please try again in '. $seconds.'seconds.',\n\t\t],\n\t]);\n}", "CodeBleu_score": 44.166355690319584}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t\t$user = User::find(session('user_id'));\n\t$user->load('twoFactor');\n\n\tif ($user->twoFactor->enabled) {\n\t\t$user->load('webauthn');\n\t\t$publicKey = $user->webauthn->publicKey;\n\t\t$response = Webauthn::getAssertionResponse($publicKey, $request);\n\t\treturn Inertia::render('TwoFactorChallenge', [\n\t\t\t'user' => $user,\n\t\t\t'response' => $response,\n\t\t]);\n\t}\n\n\treturn $this->redirector->redirectToIntended($request->input('redirectTo', '/'));\n}", "CodeBleu_score": 36.05162540880658}, {"code": "<?\npublic function toResponse($request){\n\t\t$user = User::findOrFail(session('user_id'));\n\t$publicKey = Webauthn::getPublicKey();\n\t$responseData = [\n\t\t'enabled' => $user->two_factor_enabled,\n\t\t'remember' => $request->remember,\n\t\t'publicKey' => $publicKey\n\t];\n\treturn Inertia::render('TwoFactorChallenge', $responseData);\n}", "CodeBleu_score": 32.832887437692904}, {"code": "<?\npublic function toResponse($request){\n\t\t$user = User::find($request->user()->id);\n\t$data = [\n\t\t'user' => $user,\n\t\t'twoFactorEnabled' => $user->two_factor_enabled,\n\t\t'remember' => $request->session()->get('_previous.url') === url('/login')\n\t];\n\treturn Inertia::render('TwoFactorChallenge', $data);\n}", "CodeBleu_score": 36.31472257564221}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t\t$token = UserToken::where('driver', $driver)->where('socialite_user_id', $socialite->id)->first();\n\tif ($token) {\n\t\t$user = User::where('id', $token->user_id)->first();\n\t\tif ($user) {\n\t\t\tif ($user->isVerified()) {\n\t\t\t\t$this->guard()->login($user);\n\t\t\t\treturn $user;\n\t\t\t} else {\n\t\t\t\t$this->guard()->logout();\n\t\t\t\t$this->clearLoginAttempts($request);\n\t\t\t\tthrow ValidationException::withMessages([\n\t\t\t\t\t'email' => [__('auth.socialite.verification_required')],\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t}\n\n\t$user = User::where('email', $socialite->email)->first();\n\tif ($user) {\n\t\tif ($user->isVerified()) {\n\t\t\t$this->guard()->login($user);\n\t\t\treturn $user;\n\t\t} else {\n\t\t\t$this->guard()->logout();\n\t\t\t$this->clearLoginAttempts($request);\n\t\t\tthrow ValidationException::withMessages([\n\t\t\t\t'email' => [__('auth.socialite.verification_required')],\n\t\t\t]);\n\t\t}\n\t}\n\n\t$user = User::where('email', $socialite->email)->first();\n\tif ($user) {\n\t\t$user->tokens()->create([\n\t\t\t'driver' => $driver,\n\t\t\t'socialite_user_id' => $socialite->id,\n\t\t]);\n\t\t$this->guard()->login($user);\n\t\treturn $user;\n\t}\n\n\t$user = User::create([\n\t\t'name' => $socialite->name,\n\t\t'email' => $socialite->email,\n\t\t'password' => ),\n\t]);\n\t$user->tokens()->create([\n\t\t'driver' => $driver,\n\t\t'socialite_user_id' => $socialite->id,\n\t]);\n\t$this->guard()->login($user);\n\treturn $user;\n}", "CodeBleu_score": 38.233512227096355}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t\t$token = UserToken::where('driver', $driver)\n\t\t->where('socialite_id', $socialite->getId())\n\t\t->first();\n\n\tif ($token) {\n\t\treturn $token->user;\n\t}\n\n\t$user = User::where('email', $socialite->getEmail())\n\t\t->orWhere('username', $socialite->getName())\n\t\t->first();\n\n\tif ($user) {\n\t\t$user->tokens()->create([\n\t\t\t'driver' => $driver,\n\t\t\t'socialite_id' => $socialite->getId(),\n\t\t]);\n\n\t\treturn $user;\n\t}\n\n\t$user = User::create([\n\t\t'username' => $socialite->getName(),\n\t\t'email' => $socialite->getEmail(),\n\t\t'email_verified_at' => now(),\n\t\t'password' => (Str::(16)),\n\t]);\n\n\t$user->tokens()->create([\n\t\t'driver' => $driver,\n\t\t'socialite_id' => $socialite->getId(),\n\t]);\n\n\treturn $user;\n}", "CodeBleu_score": 42.41492025113769}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t\t$token = UserToken::where('driver', $driver)\n\t\t->where('socialite_id', $socialite->getId())\n\t\t->first();\n\n\tif ($token) {\n\t\t$user = User::find($token->user_id);\n\n\t\tif ($user) {\n\t\t\t$user->socialite_id = $socialite->getId();\n\t\t\t$user->save();\n\n\t\t\treturn $user;\n\t\t}\n\t}\n\n\t$user = User::where('email', $socialite->getEmail())->first();\n\n\tif ($user) {\n\t\t$user->socialite_id = $socialite->getId();\n\t\t$user->save();\n\n\t\treturn $user;\n\t}\n\n\t$user = User::create([\n\t\t'name' => $socialite->getName(),\n\t\t'email' => $socialite->getEmail(),\n\t\t'socialite_id' => $socialite->getId(),\n\t\t'socialite_token' => $socialite->token,\n\t\t'socialite_token_expires_at' => $socialite->tokenExpiresAt,\n\t]);\n\n\treturn $user;\n}", "CodeBleu_score": 40.62659359384131}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t\t// Retrieve the user from the request.\n\t$user = $this->retrieveUser($request);\n\n\t// If no user is found, return false.\n\tif (is_null($user)) {\n\t\treturn false;\n\t}\n\n\t// Filter the credentials from the request.\n\t$credentials = $this->credentials($request);\n\n\t// Attempt to validate the assertion.\n\ttry {\n\t\t$validated = $this->validateAssertion($user, $credentials);\n\t} catch (ValidationException $e) {\n\t\t// If validation fails, trigger a failed authentication event.\n\t\t$this->failed($request, $e);\n\n\t\t// Throw an authentication exception.\n\t\tthrow $e;\n\t}\n\n\t// If validation succeeds, return true.\n\treturn $validated;\n}", "CodeBleu_score": 45.231603570023125}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t\t$user = $this->getAuthUser($request);\n\n\tif (!$user) {\n\t\treturn false;\n\t}\n\n\ttry {\n\t\t$this->validateAssertion($request, $user);\n\t} catch (ValidationException $e) {\n\t\t$this->failed($request, $e->getMessage());\n\n\t\treturn false;\n\t} catch (Failed $e) {\n\t\t$this->failed($request, $e->getMessage());\n\n\t\treturn false;\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 43.00470885245116}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t\t$user = $this->webauthn->getUserFromRequest($request);\n\n\tif (! $user) {\n\t\treturn false;\n\t}\n\n\t$credentials = $this->webauthn->filterCredentials($request, $user);\n\n\tif (! $credentials) {\n\t\treturn false;\n\t}\n\n\tif (! $this->webauthn->validateAssertion($credentials, $user)) {\n\t\t$this->loginRateLimiter->increment($request);\n\n\t\treturn false;\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 48.847673074581785}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\ttry {\n\t\t$user = User::where('email', $this->email)->firstOrFail();\n\t} catch (ModelNotFoundException $e) {\n\t\t$this->error('User not found');\n\t\treturn null;\n\t}\n\treturn $user;\n}", "CodeBleu_score": 43.96811294307278}, {"code": "<?\nprivate function user(): ?User{\n\ttry {\n\t\t$user = User::where('email', $this->email)->firstOrFail();\n\t} catch (ModelNotFoundException $e) {\n\t\t$this->error(\"User not found\");\n\t\treturn null;\n\t}\n\treturn $user;\n}", "CodeBleu_score": 38.739759462496224}, {"code": "<?\nprivate function user(): ?User{\n\t$email = $this->argument('email');\n\tif (!$email) {\n\t\t$this->error('Email address is required.');\n\t\treturn null;\n\t}\n\n\ttry {\n\t\treturn User::where('email', $email)->firstOrFail();\n\t} catch (ModelNotFoundException $e) {\n\t\t$this->error('User not found.');\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 64.81971348484169}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\t\t$this->info('Flushing Scout indexes...');\n\t$this->call('scout:flush', [\n\t\t'--force' => true,\n\t]);\n\t$this->info('Scout indexes flushed successfully.');\n}", "CodeBleu_score": 17.62431322615142}, {"code": "<?\nprotected function scoutFlush(): void{\n\t\t$this->info('Flushing Meilisearch indexes...');\n\t$this->info('Flushing Meilisearch indexes...');\n\t$this->info('Flushing Meilisearch indexes...');\n\t$this->info('Flushing Meilisearch indexes...');\n\t$this->info('Flushing Meilisearch indexes...');\n\t$this->info('Flushing Meilisearch indexes...');\n\t$this->info('Flushing Meilisearch indexes...');\n\t$this->info('Flushing Meilisearch indexes...');\n\t$this->info('Flushing Meilisearch indexes...');\n\t$this->info('Flushing Meilisearch indexes...');\n\t$this->info('Flushing Meilisearch indexes...');\n\t$this->info('Flushing Meilisearch indexes...');\n\t$this->info('Flushing Meilisearch indexes...');\n\t$this->info('Flushing Meilisearch indexes...');\n\t$this->info('Flushing Meilisearch indexes...');\n\t$this->info('Flushing Meilisearch indexes...');\n\t$this->info('Flushing Meilisearch indexes...');\n\t$this->info('Flushing Meilisearch indexes...');\n\t$this->info('Flushing Meilisearch indexes...');\n\t$this->info('Flushing Meilisearch indexes...');\n\t$this->info('Flushing Meilisearch indexes...');\n\t$this->info('Flushing Meilisearch indexes...');\n\t$this->info('Flushing Meilisearch indexes...');\n\t$this->info('Flushing Meilisearch indexes...');\n\t$this->info('Flushing Meilisearch indexes...');\n\t$this->info('Flushing Meilisearch indexes...');\n\t$this->info('Flushing Meilisearch indexes...');\n\t$this->info('Flushing Meilisearch indexes...');\n\t$this->info('Flushing Meilisearch indexes...');\n\t$this->info('Flushing Meilisearch indexes...');\n\t$this->info('Flushing Meilisearch indexes...');\n\t$this->info('Flushing Meilisearch indexes...');\n\t$this->info('Flushing Meilisearch indexes...');\n\t$this->info('Flushing Meilisearch indexes...');\n\t$", "CodeBleu_score": 14.421227203821422}, {"code": "<?\nprotected function scoutFlush(): void{\n\t\t$this->info('Flushing Scout indexes...');\n\t$indexes = $this->meilisearch->getIndexes();\n\tforeach ($indexes as $index) {\n\t\t$indexName = $index['name'];\n\t\t$tableName = $this->meilisearch->getTableForIndex($indexName);\n\t\tif ($tableName) {\n\t\t\t$this->call('scout:flush', ['model' => $tableName]);\n\t\t\t$this->info('Flushed Scout index: '. $indexName);\n\t\t}\n\t}\n}", "CodeBleu_score": 48.5282383850714}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t\t$vcard = new VCard();\n\t$vcard->add('n', $resource->name);\n\t$vcard->add('fn', $resource->name);\n\t$vcard->add('email', $resource->email);\n\t$vcard->add('tel', $resource->phone);\n\t$vcard->add('org', $resource->company);\n\t$vcard->add('title', $resource->title);\n\t$vcard->add('url', $resource->website);\n\t$vcard->add('note', $resource->notes);\n\t$vcard->add('adr', $resource->address);\n\t$vcard->add('rev', $resource->revision);\n\t$vcard->add('uid', $resource->uid);\n\t$vcard->add('class', $resource->class);\n\t$vcard->add('sort-string', $resource->sortString);\n\t$vcard->add('version', $resource->version);\n\t$vcard->add('categories', $resource->categories);\n\t$vcard->add('categories', $resource->categories);\n\t$vcard->add('categories', $resource->categories);\n\t$vcard->add('categories', $resource->categories);\n\t$vcard->add('categories', $resource->categories);\n\t$vcard->add('categories', $resource->categories);\n\t$vcard->add('categories', $resource->categories);\n\t$vcard->add('categories', $resource->categories);\n\t$vcard->add('categories', $resource->categories);\n\t$vcard->add('categories', $resource->categories);\n\t$vcard->add('categories', $resource->categories);\n\t$vcard->add('categories', $resource->categories);\n\t$vcard->add('categories', $resource->categories);\n\t$vcard->add('categories', $resource->categories);\n\t$vcard->add('categories', $resource->categories);\n\t$vcard->add('categories', $resource->categories);\n\t$vcard->add('categories', $resource->categories);\n\t$vcard->add('categories', $resource->categories);\n\t$vcard->add('categories', $resource->categories);\n\t$vcard", "CodeBleu_score": 17.236253796927915}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t\t$vcard = new VCard();\n\t$vcard->add('VERSION', '4.0');\n\t$vcard->add('FN', $resource->name);\n\t$vcard->add('N', $resource->name);\n\t$vcard->add('N', $resource->name);\n\t$vcard->add('UID', $resource->uid);\n\t$vcard->add('EMAIL', $resource->email);\n\t$vcard->add('TEL', $resource->phone);\n\t$vcard->add('ORG', $resource->company);\n\t$vcard->add('TITLE', $resource->title);\n\t$vcard->add('URL', $resource->website);\n\t$vcard->add('NOTE', $resource->note);\n\t$vcard->add('BDAY', $resource->birthday);\n\t$vcard->add('REV', $resource->rev);\n\t$vcard->add('X-ABUID', $resource->abuid);\n\t$vcard->add('X-ABLABEL', $resource->ablabel);\n\t$vcard->add('X-ABVERSION', $resource->abversion);\n\t$vcard->add('X-ABRELATEDNAMES', $resource->abrelatednames);\n\t$vcard->add('X-ABRELATEDUIDS', $resource->abrelateduids);\n\t$vcard->add('X-ABRELATEDTYPES', $resource->abrelatedtypes);\n\t$vcard->add('X-ABRELATEDCOMPANIES', $resource->abrelatedcompanies);\n\t$vcard->add('X-ABRELATEDPHONES', $resource->abrelatedphones);\n\t$vcard->add('X-ABRELATEDADDRESSES', $resource->abrelatedaddresses);\n\t$vcard->add('X-ABRELATEDNAMES', $resource->abrelatednames);\n\t$vcard->add('X-ABRELATEDTYPES', $resource->abrelatedtypes);\n\t$vcard->add('X-ABRELATEDPHONES', $resource->abrelatedphones);\n\t$vcard->add('X-ABRELATEDADDRESSES', $resource->abrelatedaddresses);\n\t$vcard->add('X-ABRELATEDCOMPANIES', $resource->abrelatedcompanies);\n\t$vcard->add", "CodeBleu_score": 18.04561263551224}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t\t$vCard = $this->readVCard($resource);\n\tif (!$vCard) {\n\t\t$vCard = $this->createVCard($resource);\n\t}\n\t$this->addName($vCard, $resource);\n\t$this->addEmail($vCard, $resource);\n\t$this->addPhone($vCard, $resource);\n\t$this->addAddress($vCard, $resource);\n\t$this->addUrl($vCard, $resource);\n\t$this->addNote($vCard, $resource);\n\t$this->addCategories($vCard, $resource);\n\t$this->addGroups($vCard, $resource);\n\treturn $vCard;\n}", "CodeBleu_score": 20.601758646976343}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t\t$addressBook = AddressBook::find($addressBookId);\n\tif (is_null($addressBook)) {\n\t\treturn false;\n\t}\n\n\t$card = $addressBook->cards()->where('uri', $cardUri)->first();\n\tif (is_null($card)) {\n\t\treturn false;\n\t}\n\n\tif ($card->type === 'contact') {\n\t\tBus::dispatch(new DestroyContact($card));\n\t} elseif ($card->type === 'group') {\n\t\tBus::dispatch(new DestroyGroup($card));\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 30.891076270227924}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t\t$addressBook = AddressBook::find($addressBookId);\n\tif (!$addressBook) {\n\t\treturn false;\n\t}\n\n\t$user = $addressBook->user;\n\tif ($user->hasPermission(Permission::DELETE_CONTACTS)) {\n\t\t$card = $addressBook->cards()->where('uri', $cardUri)->first();\n\t\tif ($card) {\n\t\t\tif ($card->type === Card::TYPE_CONTACT) {\n\t\t\t\t$this->dispatch(new DestroyContact($card->id));\n\t\t\t} elseif ($card->type === Card::TYPE_GROUP) {\n\t\t\t\t$this->dispatch(new DestroyGroup($card->id));\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 32.94266800242459}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t\t$addressBook = AddressBook::find($addressBookId);\n\tif ($addressBook === null) {\n\t\treturn false;\n\t}\n\t$card = $addressBook->cards()->where('uri', $cardUri)->first();\n\tif ($card === null) {\n\t\treturn false;\n\t}\n\tif ($card->type === 'contact') {\n\t\t$card = Contact::find($card->id);\n\t\tif ($card === null) {\n\t\t\treturn false;\n\t\t}\n\t\tBus::dispatch(new DestroyContact($card));\n\t} else {\n\t\t$card = Group::find($card->id);\n\t\tif ($card === null) {\n\t\t\treturn false;\n\t\t}\n\t\tBus::dispatch(new DestroyGroup($card));\n\t}\n\treturn true;\n}", "CodeBleu_score": 33.019603763918624}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\t\t$leadActivity = LeadActivity::create([\n\t\t'lead_id' => $data['lead_id'],\n\t\t'user_id' => $data['user_id'],\n\t\t'lead_activity_type_id' => $data['lead_activity_type_id'],\n\t\t'content' => $data['content']\n\t]);\n\n\tif (isset($data['file'])) {\n\t\t$file = $data['file'];\n\t\t$path = $file->store('public/lead_activity_files');\n\t\t$file = File::create([\n\t\t\t'name' => $file->getClientOriginalName(),\n\t\t\t'storage_path' => $path,\n\t\t\t'lead_activity_id' => $leadActivity->id\n\t\t]);\n\t}\n\n\treturn $leadActivity;\n}", "CodeBleu_score": 44.614552118047875}, {"code": "<?\npublic function upload(array $data){\n\t\tif ($request->hasFile('file')) {\n\t\t$file = $request->file('file');\n\t\t$name = $file->getClientOriginalName();\n\t\t$extension = $file->getClientOriginalExtension();\n\t\t$mimeType = $file->getMimeType();\n\t\t$size = $file->getSize();\n\t\t$path = $file->store('uploads', 'public');\n\n\t\t$leadActivity = $this->leadActivityRepository->create([\n\t\t\t'lead_id' => $data['lead_id'],\n\t\t\t'user_id' => auth()->id(),\n\t\t\t'name' => $name,\n\t\t\t'extension' => $extension,\n\t\t\t'mime_type' => $mimeType,\n\t\t\t'size' => $size,\n\t\t\t'path' => $path,\n\t\t]);\n\n\t\treturn $leadActivity;\n\t}\n\n\treturn null;\n}", "CodeBleu_score": 44.53750979151569}, {"code": "<?\npublic function upload(array $data){\n\t\t$this->validate($data, [\n\t\t'file' =>'required|file',\n\t\t'lead_id' =>'required',\n\t\t'lead_activity_type_id' =>'required',\n\t]);\n\n\t$lead = $this->leadRepository->find($data['lead_id']);\n\n\tif (! $lead) {\n\t\tthrow new Exception('Lead not found');\n\t}\n\n\t$leadActivity = $this->leadActivityRepository->create([\n\t\t'lead_id' => $data['lead_id'],\n\t\t'lead_activity_type_id' => $data['lead_activity_type_id'],\n\t\t'user_id' => auth()->user()->id,\n\t\t'content' => $data['content'],\n\t\t'created_at' => Carbon::now(),\n\t]);\n\n\t$file = $data['file'];\n\n\t$fileName = $file->getClientOriginalName();\n\n\t$file->storeAs('public/lead_activity_files', $fileName);\n\n\t$this->leadActivityFileRepository->create([\n\t\t'lead_activity_id' => $leadActivity->id,\n\t\t'file_name' => $fileName,\n\t\t'file_path' =>'storage/lead_activity_files/'. $fileName,\n\t]);\n\n\treturn $leadActivity;\n}", "CodeBleu_score": 46.41330393856632}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t\t$exceptionCode = $exception->getCode();\n\t$exceptionType = get_class($exception);\n\t$request = request();\n\t$route = $request->route();\n\t$routeName = $route? $route->getName() : '';\n\t$routeAction = $route? $route->getActionName() : '';\n\t$routeAction = explode('@', $routeAction);\n\t$routeAction = $routeAction[1];\n\t$routeAction = explode('::', $routeAction);\n\t$routeAction = $routeAction[1];\n\t$routeAction = explode('->', $routeAction);\n\t$routeAction = $routeAction[1];\n\n\tif ($exceptionType == 'App\\Exceptions\\Handler') {\n\t\treturn $this->render($exception);\n\t}\n\n\tif ($exceptionType == 'Illuminate\\Auth\\AuthenticationException') {\n\t\treturn response()->json(['message' => 'Unauthenticated.'], 401);\n\t}\n\n\tif ($exceptionType == 'Illuminate\\Database\\Eloquent\\ModelNotFoundException') {\n\t\tif ($exceptionCode == 404) {\n\t\t\treturn response()->json(['message' => 'Resource not found.'], 404);\n\t\t} else {\n\t\t\treturn response()->json(['message' => 'Internal Server Error.'], 500);\n\t\t}\n\t}\n\n\tif ($exceptionType == 'Illuminate\\Database\\QueryException') {\n\t\tif ($exceptionCode == 404) {\n\t\t\treturn response()->json(['message' => 'Resource not found.'], 404);\n\t\t} else {\n\t\t\treturn response()->json(['message' => 'Internal Server Error.'], 500);\n\t\t}\n\t}\n\n\tif ($exceptionType == 'Illuminate\\Http\\Exceptions\\PostTooLargeException') {\n\t\treturn response()->json(['message' => 'Request body is too large.'], 413);\n\t}\n\n\tif ($exceptionType == 'Illuminate\\Validation\\ValidationException') {\n\t\treturn response()->json(['message' => 'Validation error.'], 422);\n\t}\n\n\tif ($exceptionType == 'Illuminate\\Database\\QueryException') {\n\t\treturn response()->json(['message' => 'Internal Server Error.'], 500);\n\t}\n\n\tif ($exceptionType", "CodeBleu_score": 31.137907328386493}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t\t$request = app('request');\n\t$route = $request->route();\n\t$routeName = $route->getName();\n\t$routeName = str_replace('.', '_', $routeName);\n\t$routeName = str_replace('-', '_', $routeName);\n\n\tif ($routeName == 'admin_login') {\n\t\treturn response()->json(['message' => 'You are not logged in. Please login to continue.'], 401);\n\t}\n\n\tif ($routeName == 'admin_logout') {\n\t\treturn response()->json(['message' => 'You have successfully logged out.'], 200);\n\t}\n\n\tif ($routeName == 'admin_create_session') {\n\t\treturn response()->json(['message' => 'You have successfully logged in.'], 200);\n\t}\n\n\tif ($routeName == 'admin_get_session') {\n\t\treturn response()->json(['message' => 'You have successfully logged in.'], 200);\n\t}\n\n\tif ($routeName == 'admin_get_sessions') {\n\t\treturn response()->json(['message' => 'You have successfully logged in.'], 200);\n\t}\n\n\tif ($routeName == 'admin_update_session') {\n\t\treturn response()->json(['message' => 'You have successfully updated the session.'], 200);\n\t}\n\n\tif ($routeName == 'admin_delete_session') {\n\t\treturn response()->json(['message' => 'You have successfully deleted the session.'], 200);\n\t}\n\n\tif ($routeName == 'admin_create_session_user') {\n\t\treturn response()->json(['message' => 'You have successfully created a session user.'], 200);\n\t}\n\n\tif ($routeName == 'admin_get_session_user') {\n\t\treturn response()->json(['message' => 'You have successfully retrieved a session user.'], 200);\n\t}\n\n\tif ($routeName == 'admin_get_session_users') {\n\t\treturn response()->json(['message' => 'You have successfully retrieved session users.'], 200);\n\t}\n\n\tif ($routeName == 'admin_update_session_user') {\n\t\treturn response()->json(['message'", "CodeBleu_score": 26.454106980452714}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t\t$request = request();\n\t$route = $request->route();\n\t$routeName = $route->getName();\n\t$routeAction = $route->getAction();\n\t$routeActionName = $routeAction['controller'];\n\t$routeActionArray = explode('@', $routeActionName);\n\t$routeActionMethod = $routeActionArray[1];\n\t$routeActionController = $routeActionArray[0];\n\n\tif ($exception instanceof AuthenticationException) {\n\t\treturn response()->json([\n\t\t\t'error' => 'Unauthenticated'\n\t\t], 401);\n\t} elseif ($exception instanceof ModelNotFoundException) {\n\t\tif (strpos($routeName, 'admin')!== false) {\n\t\t\treturn response()->json([\n\t\t\t\t'error' => 'Resource not found'\n\t\t\t], 404);\n\t\t} else {\n\t\t\treturn response()->json([\n\t\t\t\t'error' => 'Resource not found'\n\t\t\t], 404);\n\t\t}\n\t} elseif ($exception instanceof PDOException) {\n\t\tif (strpos($routeName, 'admin')!== false) {\n\t\t\treturn response()->json([\n\t\t\t\t'error' => 'Database error'\n\t\t\t], 500);\n\t\t} else {\n\t\t\treturn response()->json([\n\t\t\t\t'error' => 'Database error'\n\t\t\t], 500);\n\t\t}\n\t} elseif ($exception instanceof ParseError) {\n\t\tif (strpos($routeName, 'admin')!== false) {\n\t\t\treturn response()->json([\n\t\t\t\t'error' => 'Invalid JSON'\n\t\t\t], 400);\n\t\t} else {\n\t\t\treturn response()->json([\n\t\t\t\t'error' => 'Invalid JSON'\n\t\t\t], 400);\n\t\t}\n\t} elseif ($exception instanceof HttpException) {\n\t\tif (strpos($routeName, 'admin')!== false) {\n\t\t\treturn response()->json([\n\t\t\t\t'error' => 'Invalid request'\n\t\t\t], $exception->getStatusCode());\n\t\t} else {\n\t\t\treturn response()->json([\n\t\t\t\t'error' => 'Invalid request'\n\t\t\t], $exception->getStatusCode());\n\t\t}\n\t} elseif ($exception instanceof AppExceptionHandler) {\n\t\tif (strpos($routeName, 'admin')!== false) {\n\t\t\treturn response()->json([\n\t\t\t\t'error' => '", "CodeBleu_score": 39.998276069205914}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\t\tswitch ($statusCode) {\n\t\tcase 404:\n\t\t\treturn response()->view($path, [], $statusCode);\n\t\tcase 403:\n\t\t\treturn response()->view($path, [], $statusCode);\n\t\tcase 401:\n\t\t\treturn response()->view($path, [], $statusCode);\n\t\tcase 400:\n\t\t\treturn response()->view($path, [], $statusCode);\n\t\tcase 500:\n\t\t\treturn response()->view($path, [], $statusCode);\n\t\tdefault:\n\t\t\treturn response()->view($path, [], $statusCode);\n\t}\n}", "CodeBleu_score": 46.482802513640436}, {"code": "<?\nprivate function response($path, $statusCode){\n\t\tif ($this->request->expectsJson()) {\n\t\treturn response()->json(['error' => trans($path, [], 'validation')]);\n\t}\n\treturn response()->view($path, [], $statusCode);\n}", "CodeBleu_score": 45.828382501132836}, {"code": "<?\nprivate function response($path, $statusCode){\n\t\tif (request()->expectsJson()) {\n\t\treturn response()->json(['error' => $path], $statusCode);\n\t} else {\n\t\treturn response()->view($path, [], $statusCode);\n\t}\n}", "CodeBleu_score": 40.130259455592274}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t\t$activityIds = request('activity_ids');\n\t$isDone = request('is_done');\n\n\t$count = 0;\n\n\tforeach ($activityIds as $activityId) {\n\t\t$activity = $this->activityRepository->find($activityId);\n\n\t\tif ($activity) {\n\t\t\t$activity->is_done = $isDone;\n\t\t\t$activity->save();\n\n\t\t\t$count++;\n\t\t}\n\t}\n\n\treturn response()->json([\n\t\t'success' => true,\n\t\t'message' => trans('admin::app.activity.mass-update-success', ['count' => $count])\n\t]);\n}", "CodeBleu_score": 36.29493869440268}, {"code": "<?\npublic function massUpdate(){\n\t\t$activityIds = $request->get('activityIds');\n\t$activityRepository = $this->activityRepository;\n\t$updateCount = 0;\n\n\tforeach ($activityIds as $activityId) {\n\t\t$activity = $activityRepository->find($activityId);\n\n\t\tif ($activity) {\n\t\t\t$activity->is_done = true;\n\t\t\t$activity->save();\n\n\t\t\t$updateCount++;\n\t\t}\n\t}\n\n\treturn response()->json([\n\t\t'success' => true,\n\t\t'updateCount' => $updateCount\n\t]);\n}", "CodeBleu_score": 34.16209626618767}, {"code": "<?\npublic function massUpdate(){\n\t\t$ids = request('ids');\n\t$status = request('status');\n\t$activities = $this->activityRepository->findMany($ids);\n\t$count = 0;\n\n\tforeach ($activities as $activity) {\n\t\t$this->activityRepository->update(['is_done' => $status], $activity->id);\n\t\t$count++;\n\t}\n\n\treturn response()->json(['count' => $count]);\n}", "CodeBleu_score": 30.928379290567698}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t $ids = $request->input('ids');\n\n foreach ($ids as $id) {\n $activity = $this->activity->find($id);\n\n if ($activity) {\n Event::dispatch('activity.deleted', $activity);\n }\n }\n\n return response()->json(['message' => trans('admin::app.activity.activity-deleted')]);\n }", "CodeBleu_score": 30.82951429083632}, {"code": "<?\n public function massDestroy(){\n\t $ids = $this->request->input('ids');\n\n if ($ids) {\n $ids = explode(',', $ids);\n\n foreach ($ids as $id) {\n $activity = $this->activityRepository->find($id);\n\n if ($activity) {\n $this->activityRepository->delete($activity);\n }\n }\n\n return $this->response->json([\n'status' => true,\n'message' => 'Successfully deleted'\n ], 200);\n }\n\n return $this->response->json([\n'status' => false,\n'message' => 'No data found'\n ], 400);\n }", "CodeBleu_score": 25.974218771076984}, {"code": "<?\n public function massDestroy(){\n\t$ids = $request->input('ids');\n\nif ($ids) {\nforeach ($ids as $id) {\n$activity = $this->activityRepository->find($id);\n\nEvent::dispatch('activity.deleted', $activity);\n}\n\n$this->activityRepository->deleteByIds($ids);\n\nreturn $this->response->json([\n'success' => true,\n'message' => trans('admin::app.activity.mass-delete.success')\n]);\n}\n}", "CodeBleu_score": 31.3959860475304}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t$cards = DashboardHelper::getCards();\n\t$cards = collect($cards);\n\t$cards = $cards->map(function ($card) {\n\t\t$card['selected'] = false;\n\t\treturn $card;\n\t});\n\t$cards = $cards->map(function ($card) use ($request) {\n\t\t$card['selected'] = $request->has($card['key']);\n\t\treturn $card;\n\t});\n\t$cards = $cards->toArray();\n\tDashboardHelper::setCards($cards);\n\treturn response()->json([\n\t\t'success' => true,\n\t\t'message' => trans('admin::app.dashboard.update-cards-success')\n\t]);\n}", "CodeBleu_score": 35.7319776197943}, {"code": "<?\n public function updateCards(){\n\t$cards = DashboardHelper::getCards();\n\t$cards = collect($cards)->map(function ($card) {\n\t\t$card['selected'] = false;\n\t\treturn $card;\n\t});\n\t$request = request()->all();\n\tforeach ($request['cards'] as $card) {\n\t\t$cards->where('id', $card['id'])->first()['selected'] = true;\n\t}\n\treturn response()->json([\n\t\t'cards' => $cards->toArray(),\n\t]);\n}", "CodeBleu_score": 34.926184553611485}, {"code": "<?\n public function updateCards(){\n\t$cards = DashboardHelper::getCards();\n $requestData = request()->all();\n foreach ($cards as $card) {\n $card->selected = false;\n }\n foreach ($requestData as $cardId => $status) {\n if ($status == 'true') {\n $card = DashboardHelper::getCard($cardId);\n if ($card) {\n $card->selected = true;\n }\n }\n }\n return response()->json($cards);\n }", "CodeBleu_score": 39.61239126314474}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t\t$this->validate($request, [\n\t\t'code' => [\n\t\t\t'required',\n\t\t\t'unique:core_configs,code',\n\t\t\tCode::class\n\t\t],\n\t\t'value' =>'required',\n\t]);\n\n\t$configuration = $this->configurationRepository->create($request->all());\n\n\tEvent::dispatch('core.config.created', new Configuration($configuration));\n\n\t$request->session()->flash('success', trans('admin::app.response.success.created', ['name' => 'Configuration']));\n\n\treturn redirect()->back();\n}", "CodeBleu_score": 28.748310728242615}, {"code": "<?\npublic function store(){\n\t\t$data = $this->validate(request(), [\n\t\t'code' =>'required|unique:core_configs,code',\n\t\t'value' =>'required',\n\t\t'is_system' =>'required|boolean',\n\t\t'is_editable' =>'required|boolean',\n\t\t'is_secure' =>'required|boolean',\n\t\t'is_translatable' =>'required|boolean',\n\t\t'is_filterable' =>'required|boolean',\n\t\t'is_visible' =>'required|boolean',\n\t\t'is_user_defined' =>'required|boolean',\n\t\t'is_unique' =>'required|boolean',\n\t\t'is_unique_per_locale' =>'required|boolean',\n\t\t'is_unique_per_channel' =>'required|boolean',\n\t\t'is_unique_per_customer' =>'required|boolean',\n\t\t'is_unique_per_product' =>'required|boolean',\n\t\t'is_unique_per_product_attribute' =>'required|boolean',\n\t\t'is_unique_per_category' =>'required|boolean',\n\t\t'is_unique_per_category_attribute' =>'required|boolean',\n\t\t'is_unique_per_channel_and_locale' =>'required|boolean',\n\t\t'is_unique_per_channel_and_customer' =>'required|boolean',\n\t\t'is_unique_per_channel_and_product' =>'required|boolean',\n\t\t'is_unique_per_channel_and_product_attribute' =>'required|boolean',\n\t\t'is_unique_per_channel_and_category' =>'required|boolean',\n\t\t'is_unique_per_channel_and_category_attribute' =>'required|boolean',\n\t\t'is_unique_per_channel_and_locale_and_customer' =>'required|boolean',\n\t\t'is_unique_per_channel_and_locale_and_product' =>'required|boolean',\n\t\t'is_unique_per_channel_and_locale_and_product_attribute' =>'required|boolean',\n\t\t'is_unique_per_channel_and_locale_and_category' =>'required|boolean',\n\t\t'is_unique_per_channel_", "CodeBleu_score": 10.34749468177203}, {"code": "<?\npublic function store(){\n\t\t$data = request()->validate([\n\t\t'name' =>'required|unique:core_configs,name',\n\t\t'value' =>'required',\n\t]);\n\n\t$data['code'] = $data['name'];\n\t$data['type'] ='string';\n\n\t$code = app(Code::class);\n\n\t$code->validate($data);\n\n\t$configuration = $this->configurationRepository->create($data);\n\n\t$this->dispatchBrowserEvent('swal:modal', [\n\t\t'title' => trans('admin::app.common.success'),\n\t\t'text' => trans('admin::app.system.configuration.create.success'),\n\t\t'type' =>'success',\n\t]);\n\n\treturn redirect()->back();\n}", "CodeBleu_score": 28.210444887826096}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t\t$file = $this->request->file('file');\n\t$file_name = $file->getClientOriginalName();\n\t$file_path = $file->getPathname();\n\n\t$file_name = $this->configRepository->get('core.system.download.file_name_format', 'file.zip');\n\t$file_name = str_replace(\n\t\t[\n\t\t\t'{file_name}',\n\t\t\t'{file_extension}',\n\t\t\t'{file_size}',\n\t\t\t'{file_path}'\n\t\t],\n\t\t[\n\t\t\t$file_name,\n\t\t\t$file->getClientOriginalExtension(),\n\t\t\t$file->getSize(),\n\t\t\t$file_path\n\t\t],\n\t\t$file_name\n\t);\n\n\treturn response()->download($file_path, $file_name);\n}", "CodeBleu_score": 34.66417687503187}, {"code": "<?\npublic function download(){\n\t\t$filePath = $this->request->get('path');\n\t$fileName = $this->request->get('name');\n\t$file = $this->configurationRepository->get('admin.general.download_file');\n\n\tif ($file && $file->value) {\n\t\t$filePath = $file->value;\n\t}\n\n\t$fullPath = Storage::disk('public')->path($filePath. '/'. $fileName);\n\n\treturn response()->download($fullPath);\n}", "CodeBleu_score": 41.24811919866441}, {"code": "<?\npublic function download(){\n\t\t$file = $this->request->input('file');\n\t$fullFileName = $this->configRepository->get('core::app.files_path'). '/'. $file;\n\t$fileName = basename($fullFileName);\n\t$contentType = Storage::mimeType($fullFileName);\n\n\t$response = response()->download($fullFileName, $fileName, ['Content-Type' => $contentType]);\n\t$response->header('Content-Length', Storage::size($fullFileName));\n\t$response->header('Content-Type', $contentType);\n\t$response->header('Content-Disposition', 'attachment; filename='. $fileName);\n\n\treturn $response;\n}", "CodeBleu_score": 37.861831152392845}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\t// TODO: Implement the function\n\treturn null;\n}", "CodeBleu_score": 4.8605767515403375}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\tList<AdminModelSort> modelSortList = new ArrayList<>();\n\tfor (int i = 0; i < list.size(); i++) {\n\t\tAdminModelSort modelSort = new AdminModelSort();\n\t\tmodelSort.setModuleId(list.get(i));\n\t\tmodelSort.setSort(i);\n\t\tmodelSortList.add(modelSort);\n\t}\n\tIAdminModelSortService adminModelSortService = SpringUtil.getBean(IAdminModelSortService.class);\n\tadminModelSortService.removeByUserId(UserUtil.getUserId());\n\tadminModelSortService.saveBatch(modelSortList);\n\treturn Result.success();\n}", "CodeBleu_score": 60.52866445655479}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\tList<AdminModelSort> list1 = new ArrayList<>();\n\tfor (String s : list) {\n\t\tAdminModelSort adminModelSort = new AdminModelSort();\n\t\tadminModelSort.setModelId(s);\n\t\tadminModelSort.setSort(list.indexOf(s));\n\t\tlist1.add(adminModelSort);\n\t}\n\tIAdminModelSortService iAdminModelSortService = SpringUtil.getBean(IAdminModelSortService.class);\n\tiAdminModelSortService.removeByUserId(UserUtil.getUserId());\n\tiAdminModelSortService.saveBatch(list1);\n\treturn Result.ok();\n}", "CodeBleu_score": 40.80654881336754}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t\ttry {\n\t\tLambdaQueryWrapper<AdminConfig> queryWrapper = new LambdaQueryWrapper<>();\n\t\tqueryWrapper.eq(AdminConfig::getSettingId, moduleSetting.getSettingId());\n\t\tList<AdminConfig> adminConfigs = adminConfigService.list(queryWrapper);\n\t\tif (adminConfigs.size() == 0) {\n\t\t\treturn Result.error(AdminCodeEnum.MODULE_SETTING_NOT_EXIST.getCode(), AdminCodeEnum.MODULE_SETTING_NOT_EXIST.getMessage());\n\t\t}\n\t\tAdminConfig adminConfig = adminConfigs.get(0);\n\t\tif (adminConfig.getModule().equals(AdminModuleEnum.CRM.getCode())) {\n\t\t\treturn Result.error(AdminCodeEnum.MODULE_SETTING_IS_CRM.getCode(), AdminCodeEnum.MODULE_SETTING_IS_CRM.getMessage());\n\t\t}\n\t\tadminConfig.setModule(moduleSetting.getModule());\n\t\tadminConfig.setModuleSetting(moduleSetting.getModuleSetting());\n\t\tadminConfigService.updateById(adminConfig);\n\t\treturn Result.success();\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn Result.error(AdminCodeEnum.MODULE_SETTING_SET_ERROR.getCode(), AdminCodeEnum.MODULE_SETTING_SET_ERROR.getMessage());\n\t}\n}", "CodeBleu_score": 43.67272467354479}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t\t// 1. Check if the module is CRM\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getId());\n\tif (adminConfig.getAdminModuleEnum() == AdminModuleEnum.CRM) {\n\t\treturn Result.fail(AdminCodeEnum.MODULE_SETTING_IS_CRM);\n\t}\n\t// 2. Update the status of the admin configuration\n\tadminConfig.setIsEnable(moduleSetting.getIsEnable());\n\tadminConfigService.updateById(adminConfig);\n\t// 3. Save the updated setting\n\tAdminConfig config = adminConfigService.getById(moduleSetting.getId());\n\tadminConfigService.saveOrUpdate(config);\n\treturn Result.success();\n}", "CodeBleu_score": 56.90878796894124}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t\tAdminUserConfig adminUserConfig = UserUtil.getAdminUserConfig();\n\tAdminConfig adminConfig = adminUserConfig.getAdminConfig();\n\tif (AdminModuleEnum.CRM.getKey().equals(moduleSetting.getModule())) {\n\t\treturn Result.error(AdminCodeEnum.MODULE_SETTING_CRM_ERROR);\n\t}\n\tAdminConfig adminConfig1 = adminConfig.clone();\n\tadminConfig1.setModuleSetting(moduleSetting);\n\tIAdminUserConfigService adminUserConfigService = SpringUtil.getBean(IAdminUserConfigService.class);\n\tadminUserConfigService.updateAdminConfig(adminConfig1);\n\treturn Result.success();\n}", "CodeBleu_score": 49.530932095102656}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t//        AdminUserConfig adminUserConfig = adminUserConfigService.getOne(new LambdaQueryWrapper<AdminUserConfig>().eq(AdminUserConfig::getCustomKey, customKey).eq(AdminUserConfig::getUserId, UserUtil.getUserId()));\n//        if (adminUserConfig!= null) {\n//            JSONObject jsonObject = JSON.parseObject(adminUserConfig.getCustomValue());\n//            jsonObject.putAll(json);\n//            adminUserConfig.setCustomValue(jsonObject.toJSONString());\n//            adminUserConfigService.updateById(adminUserConfig);\n//        } else {\n//            AdminUserConfig adminUserConfig1 = new AdminUserConfig();\n//            adminUserConfig1.setUserId(UserUtil.getUserId());\n//            adminUserConfig1.setCustomKey(customKey);\n//            adminUserConfig1.setCustomValue(json.toJSONString());\n//            adminUserConfigService.save(adminUserConfig1);\n//        }\n//        return Result.ok();\n        return Result.ok();\n    }", "CodeBleu_score": 11.374895517097517}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\tList<AdminUserConfig> list = adminUserConfigService.list(new LambdaQueryWrapper<AdminUserConfig>().eq(AdminUserConfig::getCustomKey, customKey));\n\tif (list.size() > 0) {\n\t\tAdminUserConfig adminUserConfig = list.get(0);\n\t\tadminUserConfig.setCustomValue(json.toString());\n\t\tadminUserConfigService.updateById(adminUserConfig);\n\t} else {\n\t\tAdminUserConfig adminUserConfig = new AdminUserConfig();\n\t\tadminUserConfig.setCustomKey(customKey);\n\t\tadminUserConfig.setCustomValue(json.toString());\n\t\tadminUserConfigService.save(adminUserConfig);\n\t}\n\treturn Result.success();\n}", "CodeBleu_score": 49.47147889790674}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\t// 1. check whether the custom key is empty\n\tif (StringUtils.isEmpty(customKey)) {\n\t\treturn Result.fail(AdminCodeEnum.ADMIN_CUSTOM_SETTING_KEY_IS_EMPTY.getCode(), AdminCodeEnum.ADMIN_CUSTOM_SETTING_KEY_IS_EMPTY.getMessage());\n\t}\n\t// 2. get the user configuration by the custom key\n\tAdminUserConfig adminUserConfig = adminUserConfigService.getOne(new LambdaQueryWrapper<AdminUserConfig>().eq(AdminUserConfig::getCustomKey, customKey));\n\t// 3. if the user configuration exists, update its value with the provided JSON\n\tif (adminUserConfig!= null) {\n\t\tadminUserConfig.setCustomValue(json.toJSONString());\n\t\tadminUserConfigService.updateById(adminUserConfig);\n\t}\n\t// 4. if not, create a new user configuration with the provided JSON and save it\n\telse {\n\t\tAdminUserConfig adminUserConfig1 = new AdminUserConfig();\n\t\tadminUserConfig1.setCustomKey(customKey);\n\t\tadminUserConfig1.setCustomValue(json.toJSONString());\n\t\tadminUserConfigService.save(adminUserConfig1);\n\t}\n\t// 5. return a successful result\n\treturn Result.success();\n}", "CodeBleu_score": 47.563358420101004}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser adminUser = adminUserService.queryUserInfo(userId);\n\treturn Result.success(adminUser);\n}", "CodeBleu_score": 22.85966231718724}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser adminUser = adminUserService.getById(userId);\n\tif (adminUser == null) {\n\t\treturn Result.fail(\"\u7528\u6237\u4e0d\u5b58\u5728\");\n\t}\n\tAdminUserVO adminUserVO = BeanUtil.copyProperties(adminUser, AdminUserVO.class);\n\tif (adminUserVO.getDeptId()!= null) {\n\t\tadminUserVO.setDeptName(adminDeptService.getById(adminUserVO.getDeptId()).getName());\n\t}\n\tadminUserVO.setPassword(null);\n\tadminUserVO.setSalt(null);\n\treturn Result.ok(adminUserVO);\n}", "CodeBleu_score": 49.30585869742762}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser adminUser = adminUserService.queryUserById(userId);\n\tif (adminUser == null) {\n\t\treturn Result.fail(\"\u7528\u6237\u4e0d\u5b58\u5728\");\n\t}\n\tadminUser.setPassword(null);\n\tadminUser.setSalt(null);\n\tadminUser.setDeptName(adminDepartmentService.queryDeptNameById(adminUser.getDeptId()));\n\treturn Result.ok(adminUser);\n}", "CodeBleu_score": 40.59699989046337}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t\tAdminUser adminUser = UserUtil.getUser();\n\tif (adminUser == null) {\n\t\tthrow new NoLoginException();\n\t}\n\tLambdaQueryWrapper<AdminUserConfig> queryWrapper = new LambdaQueryWrapper<>();\n\tqueryWrapper.eq(AdminUserConfig::getUserId, adminUser.getId());\n\tqueryWrapper.eq(AdminUserConfig::getConfigKey, \"readNotice\");\n\tList<AdminUserConfig> adminUserConfigList = adminUserConfigService.list(queryWrapper);\n\tif (adminUserConfigList.size() > 0) {\n\t\tadminUserConfigList.forEach(adminUserConfig -> {\n\t\t\tadminUserConfig.setConfigValue(String.valueOf(1));\n\t\t\tadminUserConfigService.updateById(adminUserConfig);\n\t\t});\n\t} else {\n\t\tAdminUserConfig adminUserConfig = new AdminUserConfig();\n\t\tadminUserConfig.setConfigKey(\"readNotice\");\n\t\tadminUserConfig.setConfigValue(String.valueOf(1));\n\t\tadminUserConfig.setUserId(adminUser.getId());\n\t\tadminUserConfigService.save(adminUserConfig);\n\t}\n\treturn Result.success(\"success\");\n}", "CodeBleu_score": 44.31297617952688}, {"code": " public Result readNotice() {\n\t\n}", "CodeBleu_score": 0.8375966930517764}, {"code": " public Result readNotice() {\n\t\treturn Result.success();\n}", "CodeBleu_score": 5.168662586710375}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\tAdminConfig adminConfig = adminConfigMapper.selectOne(new QueryWrapper<AdminConfig>().eq(\"config_name\", AdminConst.COMPANY_INFO));\n\tif (adminConfig == null) {\n\t\tadminConfig = new AdminConfig();\n\t\tadminConfig.setConfigName(AdminConst.COMPANY_INFO);\n\t\tadminConfig.setConfigValue(JSON.toJSONString(adminCompanyBO));\n\t\tadminConfigMapper.insert(adminConfig);\n\t} else {\n\t\tadminConfig.setConfigValue(JSON.toJSONString(adminCompanyBO));\n\t\tadminConfigMapper.updateById(adminConfig);\n\t}\n}", "CodeBleu_score": 50.58996889209831}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\tAdminConfig adminConfig = adminConfigMapper.selectOne(new QueryWrapper<AdminConfig>().eq(\"config_key\", AdminConst.COMPANY_INFO));\n\tif (Objects.isNull(adminConfig)) {\n\t\tAdminConfig adminConfig1 = new AdminConfig();\n\t\tadminConfig1.setConfigKey(AdminConst.COMPANY_INFO);\n\t\tadminConfig1.setConfigValue(JSON.toJSONString(adminCompanyBO));\n\t\tadminConfigMapper.insert(adminConfig1);\n\t} else {\n\t\tadminConfig.setConfigValue(JSON.toJSONString(adminCompanyBO));\n\t\tadminConfigMapper.updateById(adminConfig);\n\t}\n}", "CodeBleu_score": 40.64455685988096}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\t// 1. \u83b7\u53d6\u914d\u7f6e\u4fe1\u606f\n\tAdminConfig adminConfig = adminConfigMapper.selectOne(new QueryWrapper<AdminConfig>().eq(\"config_name\", AdminConst.COMPANY_INFO));\n\t// 2. \u5982\u679c\u6ca1\u6709\u914d\u7f6e\u4fe1\u606f\uff0c\u5219\u65b0\u589e\n\tif (Objects.isNull(adminConfig)) {\n\t\tadminConfig = new AdminConfig();\n\t\tadminConfig.setConfigName(AdminConst.COMPANY_INFO);\n\t}\n\t// 3. \u8bbe\u7f6e\u914d\u7f6e\u4fe1\u606f\n\tadminConfig.setConfigValue(JSON.toJSONString(adminCompanyBO));\n\tadminConfigMapper.insertOrUpdate(adminConfig);\n}", "CodeBleu_score": 48.2186738288542}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n\tAdminConfig adminConfig = adminConfigMapper.selectOne(new QueryWrapper<AdminConfig>().lambda().eq(AdminConfig::getCompanyId, UserUtil.getUser().getCompanyId()).eq(AdminConfig::getConfigKey, AdminConst.ADMIN_CONFIG_KEY));\n\tif (Objects.nonNull(adminConfig)) {\n\t\tadminCompanyBO = JSON.parseObject(adminConfig.getConfigValue(), AdminCompanyBO.class);\n\t}\n\treturn adminCompanyBO;\n}", "CodeBleu_score": 57.06328092231722}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n\tAdminUser adminUser = UserUtil.getAdminUser();\n\tAdminConfig adminConfig = adminConfigMapper.selectOne(new QueryWrapper<AdminConfig>().eq(\"admin_user_id\", adminUser.getId()).eq(\"config_key\", AdminConst.COMPANY_ID));\n\tif (adminConfig!= null) {\n\t\tadminCompanyBO.setCompanyId(adminConfig.getConfigValue());\n\t}\n\treturn adminCompanyBO;\n}", "CodeBleu_score": 49.39866233512718}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n\tAdminConfig adminConfig = adminConfigMapper.selectOne(new QueryWrapper<AdminConfig>().eq(\"key\", \"admin_config\"));\n\tif (Objects.nonNull(adminConfig)) {\n\t\tadminCompanyBO = JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\n\t}\n\treturn adminCompanyBO;\n}", "CodeBleu_score": 60.00886759481081}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t\t// 1. remove existing configurations with the specified log configuration name\n\tremoveLogWelcomeSpeech();\n\t// 2. create AdminConfig objects for each string\n\tList<AdminConfig> adminConfigList = new ArrayList<>();\n\tfor (String string : stringList) {\n\t\tAdminConfig adminConfig = new AdminConfig();\n\t\tadminConfig.setConfigName(AdminConst.LOG_WELCOME_SPEECH);\n\t\tadminConfig.setConfigValue(string);\n\t\tadminConfigList.add(adminConfig);\n\t}\n\t// 3. save the new list of configurations in batch\n\tadminConfigMapper.saveBatch(adminConfigList);\n}", "CodeBleu_score": 40.708637078958255}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\tList<AdminConfig> list = new ArrayList<>();\nfor (String string : stringList) {\nAdminConfig adminConfig = new AdminConfig();\nadminConfig.setConfigKey(\"logWelcomeSpeech\");\nadminConfig.setConfigValue(string);\nlist.add(adminConfig);\n}\nadminConfigMapper.delete(new QueryWrapper<AdminConfig>().eq(\"config_key\", \"logWelcomeSpeech\"));\nadminConfigMapper.saveBatch(list);\n}", "CodeBleu_score": 41.443272405769804}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t//    List<AdminConfig> adminConfigList = new ArrayList<>();\n//    for (String s : stringList) {\n//        AdminConfig adminConfig = new AdminConfig();\n//        adminConfig.setConfigName(\"LOG_WELCOME_SPEECH\");\n//        adminConfig.setConfigValue(s);\n//        adminConfigList.add(adminConfig);\n//    }\n//    adminConfigMapper.delete(new QueryWrapper<AdminConfig>().eq(\"config_name\", \"LOG_WELCOME_SPEECH\"));\n//    adminConfigMapper.saveBatch(adminConfigList);\n}", "CodeBleu_score": 4.1885263758169895}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tString username = adminInitDataBO.getUsername();\n\tString password = adminInitDataBO.getPassword();\n\tAdminUser adminUser = adminUserService.getOne(new QueryWrapper<AdminUser>().eq(\"username\", username));\n\tif (Objects.isNull(adminUser)) {\n\t\tthrow new CrmException(AdminCodeEnum.USERNAME_ERROR);\n\t}\n\tString salt = adminUser.getSalt();\n\tString passwordHash = AuthPasswordUtil.hash(password, salt);\n\tif (!passwordHash.equals(adminUser.getPassword())) {\n\t\tthrow new CrmException(AdminCodeEnum.PASSWORD_ERROR);\n\t}\n\tString code = RandomUtil.randomString(10);\n\tadminUserService.update(new AdminUser().setCode(code), new QueryWrapper<AdminUser>().eq(\"username\", username));\n\treturn code;\n}", "CodeBleu_score": 41.064891711907784}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\t// 1. \u9a8c\u8bc1\u7528\u6237\u662f\u5426\u5b58\u5728\n\tAdminUser adminUser = adminUserService.getOne(new QueryWrapper<AdminUser>().eq(\"username\", adminInitDataBO.getUsername()));\n\tif (Objects.isNull(adminUser)) {\n\t\tthrow new CrmException(AdminCodeEnum.USER_NOT_EXIST);\n\t}\n\n\t// 2. \u9a8c\u8bc1\u5bc6\u7801\n\tString password = Util.(adminInitDataBO.getPassword());\n\tif (!adminUser.getPassword().equals(password)) {\n\t\tthrow new CrmException(AdminCodeEnum.USER_PASSWORD_ERROR);\n\t}\n\n\t// 3. \u9a8c\u8bc1\u662f\u5426\u662f\u8d85\u7ea7\u7ba1\u7406\u5458\n\tif (!adminUser.getIsSuper()) {\n\t\tthrow new CrmException(AdminCodeEnum.USER_NOT_SUPER);\n\t}\n\n\t// 4. \u751f\u6210\u4e34\u65f6\u767b\u5f55\u7801\n\tString code = RandomUtil.randomString(6);\n\tadminUserService.update(new AdminUser().setCode(code), new QueryWrapper<AdminUser>().eq(\"id\", adminUser.getId()));\n\treturn code;\n}", "CodeBleu_score": 35.074245854364236}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tString password = ();\n\tString salt = adminInitDataBO.getSalt();\n\tString username = adminInitDataBO.getUsername();\n\tString passwordHash = AuthPasswordUtil.generatePasswordHash(password, salt);\n\tif (passwordHash.equals(adminInitDataBO.getPasswordHash())) {\n\t\tString accessToken = RandomUtil.randomString(16);\n\t\tString token = AuthPasswordUtil.generateToken(accessToken, username);\n\t\t// \u7f13\u5b58token\n\t\tUserUtil.setToken(token);\n\t\t// \u7f13\u5b58\u7528\u6237\u4fe1\u606f\n\t\tUserUtil.setAdminUser(adminInitDataBO.getAdminUser());\n\t\treturn accessToken;\n\t} else {\n\t\tthrow new CrmException(SystemCodeEnum.INVALID_PASSWORD);\n\t}\n}", "CodeBleu_score": 37.47768665569481}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\t\t// 1. get current user ID\n\tLong userId = UserUtil.getUserId();\n\t// 2. generate key\n\tString key = AdminCacheKey.AUTH_INIT_KEY.getKey(userId);\n\t// 3. get unauthorized menu URLs from Redis\n\tList<String> unAuthMenuUrls = RedisUtil.getList(key);\n\t// 4. if initial authentication URL is in this list, return true, indicating no authorization\n\treturn unAuthMenuUrls.contains(AdminConst.AUTH_INIT_URL);\n}", "CodeBleu_score": 42.65024980420245}, {"code": "private boolean verifyInitAuth(){\n\t\t// \u83b7\u53d6\u5f53\u524d\u7528\u6237ID\n\tLong userId = UserUtil.getUserId();\n\t// \u6784\u9020key\n\tString key = AdminCacheKey.ADMIN_INIT_AUTH_KEY.getKey(userId);\n\t// \u83b7\u53d6Redis\u4e2d\u672a\u6388\u6743\u7684\u83dc\u5355URL\u5217\u8868\n\tList<String> unAuthUrls = RedisUtil.get(key);\n\t// \u5224\u65ad\u662f\u5426\u6709\u672a\u6388\u6743\u7684\u83dc\u5355URL\n\tif (CollUtil.isNotEmpty(unAuthUrls)) {\n\t\t// \u83b7\u53d6\u5f53\u524d\u8bf7\u6c42URL\n\t\tString requestUrl = RequestUtil.getRequestUrl();\n\t\t// \u5224\u65ad\u8bf7\u6c42URL\u662f\u5426\u5728\u672a\u6388\u6743\u7684\u83dc\u5355URL\u5217\u8868\u4e2d\n\t\tif (unAuthUrls.contains(requestUrl)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 44.42431300616232}, {"code": "private boolean verifyInitAuth(){\n\t\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237ID\n\tLong userId = UserUtil.getUserId();\n\t//\u6784\u9020Redis\u7684key\n\tString key = AdminCacheKey.ADMIN_USER_INIT_AUTH + userId;\n\t//\u83b7\u53d6Redis\u4e2d\u672a\u6388\u6743\u7684\u83dc\u5355URL\n\tList<String> list = (List<String>) RedisUtil.get(key);\n\t//\u5982\u679cRedis\u4e2d\u6ca1\u6709\u672a\u6388\u6743\u7684\u83dc\u5355URL\uff0c\u5219\u76f4\u63a5\u8fd4\u56defalse\n\tif (CollUtil.isEmpty(list)) {\n\t\treturn false;\n\t}\n\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u83dc\u5355URL\n\tList<String> userUrls = UserUtil.getUserUrls();\n\t//\u5982\u679c\u5f53\u524d\u7528\u6237\u7684\u83dc\u5355URL\u5728Redis\u4e2d\u672a\u6388\u6743\u7684\u83dc\u5355URL\u4e2d\uff0c\u5219\u8fd4\u56detrue\uff0c\u8868\u793a\u6709\u6743\u9650\n\tif (CollUtil.containsAny(userUrls, list)) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 42.98210337324087}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\t//1. Delete the role-menu association of the specified role\n\tthis.adminRoleMenuMapper.deleteByRoleId(roleId);\n\t//2. Save the role-menu association of the specified role\n\tList<AdminRoleMenu> list = new ArrayList<AdminRoleMenu>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n\t\tadminRoleMenu.setRoleId(roleId);\n\t\tadminRoleMenu.setMenuId(menuId);\n\t\tlist.add(adminRoleMenu);\n\t}\n\tthis.adminRoleMenuMapper.batchInsert(list);\n}", "CodeBleu_score": 54.73463984242591}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\t// Delete existing associations\n\tAdminRoleMenuExample example = new AdminRoleMenuExample();\n\texample.createCriteria().andRoleIdEqualTo(roleId);\n\tadminRoleMenuMapper.deleteByExample(example);\n\t// Save associations\n\tList<AdminRoleMenu> list = new ArrayList<>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu record = new AdminRoleMenu();\n\t\trecord.setRoleId(roleId);\n\t\trecord.setMenuId(menuId);\n\t\tlist.add(record);\n\t}\n\tadminRoleMenuMapper.insertList(list);\n}", "CodeBleu_score": 48.73631475046842}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\t// Delete all the role-menu associations of the specified role\n\tAdminRoleMenuExample example = new AdminRoleMenuExample();\n\texample.createCriteria().andRoleIdEqualTo(roleId);\n\tadminRoleMenuMapper.deleteByExample(example);\n\t// Create a list of role-menu associations\n\tList<AdminRoleMenu> list = new ArrayList<AdminRoleMenu>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n\t\tadminRoleMenu.setRoleId(roleId);\n\t\tadminRoleMenu.setMenuId(menuId);\n\t\tlist.add(adminRoleMenu);\n\t}\n\t// Save the role-menu associations in batches\n\tif (list.size() > 0) {\n\t\tint batchSize = list.size() / Const.BATCH_COUNT;\n\t\tif (list.size() % Const.BATCH_COUNT!= 0) {\n\t\t\tbatchSize++;\n\t\t}\n\t\tfor (int i = 0; i < batchSize; i++) {\n\t\t\tint size = list.size();\n\t\t\tif (batchSize - 1 == i) {\n\t\t\t\tsize = list.size() % Const.BATCH_COUNT;\n\t\t\t}\n\t\t\tadminRoleMenuMapper.insertBatch(list.subList(i * Const.BATCH_COUNT, i * Const.BATCH_COUNT + size));\n\t\t}\n\t}\n}", "CodeBleu_score": 46.66761724765759}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\t\ttry {\n\t\tif (!indexExists()) {\n\t\t\tcreateIndex();\n\t\t}\n\t\tMap<String, Object> map = BeanUtil.beanToMap(sysLog);\n\t\tmap.remove(\"id\");\n\t\tmap.put(\"createTime\", DateUtil.format(sysLog.getCreateTime(), \"yyyy-MM-dd HH:mm:ss\"));\n\t\tIndexRequest request = new IndexRequest(\"sys_log\");\n\t\trequest.source(map, XContentType.JSON);\n\t\tIndexResponse indexResponse = client.index(request, RequestOptions.DEFAULT);\n\t\tString index = indexResponse.getIndex();\n\t\tString type = indexResponse.getType();\n\t\tString id = indexResponse.getId();\n\t\tString version = indexResponse.getVersion().toString();\n\t\tString result = String.format(\"Index: %s Type: %s Id: %s Version: %s\", index, type, id, version);\n\t\tlog.info(result);\n\t} catch (IOException e) {\n\t\tlog.error(e.getMessage());\n\t}\n}", "CodeBleu_score": 47.38629697329455}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t\ttry {\n\t\t//\u83b7\u53d6\u7d22\u5f15\n\t\tString indexName = getSysLogIndex();\n\t\t//\u83b7\u53d6\u7d22\u5f15\u7c7b\u578b\n\t\tString indexType = getSysLogType();\n\t\t//\u83b7\u53d6\u7d22\u5f15\u6620\u5c04\n\t\tMap<String, Object> indexMap = getSysLogIndexMap();\n\t\t//\u83b7\u53d6\u7d22\u5f15\u6620\u5c04\n\t\tMap<String, Object> indexMapType = getSysLogIndexTypeMap();\n\t\t//\u83b7\u53d6\u7d22\u5f15\u6620\u5c04\n\t\tMap<String, Object> indexMapSetting = getSysLogIndexSetting();\n\t\t//\u83b7\u53d6\u7d22\u5f15\u6620\u5c04\n\t\tMap<String, Object> indexMapSettingType = getSysLogIndexSettingType();\n\t\t//\u83b7\u53d6\u7d22\u5f15\u6620\u5c04\n\t\tMap<String, Object> indexMapMapping = getSysLogIndexMapping();\n\t\t//\u83b7\u53d6\u7d22\u5f15\u6620\u5c04\n\t\tMap<String, Object> indexMapMappingType = getSysLogIndexMappingType();\n\t\t//\u83b7\u53d6\u7d22\u5f15\u6620\u5c04\n\t\tMap<String, Object> indexMapMappingSetting = getSysLogIndexMappingSetting();\n\t\t//\u83b7\u53d6\u7d22\u5f15\u6620\u5c04\n\t\tMap<String, Object> indexMapMappingSettingType = getSysLogIndexMappingSettingType();\n\t\t//\u83b7\u53d6\u7d22\u5f15\u6620\u5c04\n\t\tMap<String, Object> indexMapMappingSettingTypeSetting = getSysLogIndexMappingSettingTypeSetting();\n\t\t//\u83b7\u53d6\u7d22\u5f15\u6620\u5c04\n\t\tMap<String, Object> indexMapMappingSettingTypeSettingType = getSysLogIndexMappingSettingTypeSettingType();\n\t\t//\u83b7\u53d6\u7d22\u5f15\u6620\u5c04\n\t\tMap<String, Object> indexMapMappingSettingTypeSettingTypeSetting = getSysLogIndexMappingSettingTypeSettingTypeSetting();\n\t\t//\u83b7\u53d6\u7d22\u5f15\u6620\u5c04\n\t\tMap<String, Object> indexMapMappingSettingTypeSettingTypeSettingType = getSysLogIndexMappingSettingTypeSettingTypeSettingType();\n\t\t//\u83b7\u53d6\u7d22\u5f15\u6620\u5c04\n\t\tMap<String, Object> indexMapMappingSettingTypeSettingTypeSettingTypeSetting = getSysLogIndexMappingSettingTypeSettingTypeSettingTypeSetting();\n\t\t//\u83b7\u53d6\u7d22\u5f15\u6620\u5c04\n\t\tMap<String, Object> indexMapMappingSettingTypeSettingTypeSettingTypeSettingSetting = getSysLogIndexMappingSettingTypeSettingTypeSettingTypeSettingSetting();\n\t\t//\u83b7\u53d6\u7d22\u5f15\u6620\u5c04\n\t\tMap<String, Object> indexMapMappingSettingTypeSettingTypeSettingTypeSettingSettingSetting = getSysLogIndexMappingSettingTypeSettingTypeSettingTypeSettingSettingSetting();\n\t\t//\u83b7\u53d6\u7d22\u5f15\u6620\u5c04\n\t\tMap<String, Object> indexMapMappingSettingTypeSettingTypeSettingType", "CodeBleu_score": 22.838102202869077}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t\tString index = \"log-\"+sysLog.getCreateTime().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));\n\tif (!isIndexExist(index)) {\n\t\tcreateIndex(index);\n\t}\n\tMap<String, Object> source = BeanUtil.beanToMap(sysLog);\n\tsource.remove(\"id\");\n\tIndexRequest indexRequest = new IndexRequest(index, \"sys_log\", String.valueOf(sysLog.getId()));\n\tindexRequest.source(source, XContentType.JSON);\n\ttry {\n\t\tclient.index(indexRequest, RequestOptions.DEFAULT);\n\t} catch (IOException e) {\n\t\tlog.error(\"saveSysLog error, {}\", e.getMessage());\n\t}\n}", "CodeBleu_score": 55.84136749451236}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t\t// Initialize the search criteria\n\tQueryBuilder queryBuilder = QueryBuilders.boolQuery();\n\n\t// Add query conditions\n\tif (StrUtil.isNotBlank(querySysLogBO.getIp())) {\n\t\tqueryBuilder.must(QueryBuilders.matchQuery(\"ip\", querySysLogBO.getIp()));\n\t}\n\tif (StrUtil.isNotBlank(querySysLogBO.getOperate())) {\n\t\tqueryBuilder.must(QueryBuilders.matchQuery(\"operate\", querySysLogBO.getOperate()));\n\t}\n\tif (StrUtil.isNotBlank(querySysLogBO.getOperateType())) {\n\t\tqueryBuilder.must(QueryBuilders.matchQuery(\"operateType\", querySysLogBO.getOperateType()));\n\t}\n\tif (StrUtil.isNotBlank(querySysLogBO.getOperateObject())) {\n\t\tqueryBuilder.must(QueryBuilders.matchQuery(\"operateObject\", querySysLogBO.getOperateObject()));\n\t}\n\tif (StrUtil.isNotBlank(querySysLogBO.getOperateResult())) {\n\t\tqueryBuilder.must(QueryBuilders.matchQuery(\"operateResult\", querySysLogBO.getOperateResult()));\n\t}\n\tif (StrUtil.isNotBlank(querySysLogBO.getOperateContent())) {\n\t\tqueryBuilder.must(QueryBuilders.matchQuery(\"operateContent\", querySysLogBO.getOperateContent()));\n\t}\n\tif (StrUtil.isNotBlank(querySysLogBO.getOperateTime())) {\n\t\tqueryBuilder.must(QueryBuilders.matchQuery(\"operateTime\", querySysLogBO.getOperateTime()));\n\t}\n\tif (StrUtil.isNotBlank(querySysLogBO.getOperateUser())) {\n\t\tqueryBuilder.must(QueryBuilders.matchQuery(\"operateUser\", querySysLogBO.getOperateUser()));\n\t}\n\tif (StrUtil.isNotBlank(querySysLogBO.getOperateUserId())) {\n\t\tqueryBuilder.must(QueryBuilders.matchQuery(\"operateUserId\", querySysLogBO.getOperateUserId()));\n\t}\n\tif (StrUtil.isNotBlank(querySysLogBO.getOperateUserName())) {\n\t\tqueryBuilder.must(QueryBuilders.matchQuery(\"operateUserName\", querySysLogBO.getOperateUserName()));\n\t}\n\tif (StrUtil", "CodeBleu_score": 19.78734524794884}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t\t// Initialize the search criteria\n\tQueryBuilder queryBuilder = QueryBuilders.boolQuery();\n\tif (querySysLogBO.getStartTime()!= null) {\n\t\tqueryBuilder.must(QueryBuilders.rangeQuery(\"createTime\").gte(querySysLogBO.getStartTime()));\n\t}\n\tif (querySysLogBO.getEndTime()!= null) {\n\t\tqueryBuilder.must(QueryBuilders.rangeQuery(\"createTime\").lte(querySysLogBO.getEndTime()));\n\t}\n\tif (StrUtil.isNotBlank(querySysLogBO.getOperation())) {\n\t\tqueryBuilder.must(QueryBuilders.termQuery(\"operation\", querySysLogBO.getOperation()));\n\t}\n\tif (StrUtil.isNotBlank(querySysLogBO.getOperationType())) {\n\t\tqueryBuilder.must(QueryBuilders.termQuery(\"operationType\", querySysLogBO.getOperationType()));\n\t}\n\tif (StrUtil.isNotBlank(querySysLogBO.getIp())) {\n\t\tqueryBuilder.must(QueryBuilders.termQuery(\"ip\", querySysLogBO.getIp()));\n\t}\n\tif (StrUtil.isNotBlank(querySysLogBO.getBrowser())) {\n\t\tqueryBuilder.must(QueryBuilders.termQuery(\"browser\", querySysLogBO.getBrowser()));\n\t}\n\tif (StrUtil.isNotBlank(querySysLogBO.getOs())) {\n\t\tqueryBuilder.must(QueryBuilders.termQuery(\"os\", querySysLogBO.getOs()));\n\t}\n\tif (StrUtil.isNotBlank(querySysLogBO.getParams())) {\n\t\tqueryBuilder.must(QueryBuilders.termQuery(\"params\", querySysLogBO.getParams()));\n\t}\n\tif (StrUtil.isNotBlank(querySysLogBO.getException())) {\n\t\tqueryBuilder.must(QueryBuilders.termQuery(\"exception\", querySysLogBO.getException()));\n\t}\n\tif (StrUtil.isNotBlank(querySysLogBO.getRemark())) {\n\t\tqueryBuilder.must(QueryBuilders.termQuery(\"remark\", querySysLogBO.getRemark()));\n\t}\n\tif (StrUtil.isNotBlank(querySysLogBO.getUserName())) {\n\t\tqueryBuilder.must(QueryBuilders.termQuery(\"userName\", querySysLogBO.getUserName()));\n\t}\n\tif (Str", "CodeBleu_score": 20.46213937798654}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t\tRestHighLevelClient client = ElasticSearchUtil.getRestHighLevelClient();\n\tBasePage<SysLog> sysLogPage = new BasePage<>();\n\t// 1.\u521d\u59cb\u5316\u67e5\u8be2\u6761\u4ef6\n\tSearchRequest searchRequest = new SearchRequest(\"admin_log\");\n\tSearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n\t// 2.\u6784\u5efa\u67e5\u8be2\u6761\u4ef6\n\tBoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n\t// 2.1 \u6784\u5efa\u67e5\u8be2\u6761\u4ef6\n\tif (StrUtil.isNotBlank(querySysLogBO.getOperation())) {\n\t\tboolQueryBuilder.must(QueryBuilders.matchQuery(\"operation\", querySysLogBO.getOperation()));\n\t}\n\tif (StrUtil.isNotBlank(querySysLogBO.getOperationName())) {\n\t\tboolQueryBuilder.must(QueryBuilders.matchQuery(\"operationName\", querySysLogBO.getOperationName()));\n\t}\n\tif (StrUtil.isNotBlank(querySysLogBO.getOperationType())) {\n\t\tboolQueryBuilder.must(QueryBuilders.matchQuery(\"operationType\", querySysLogBO.getOperationType()));\n\t}\n\tif (StrUtil.isNotBlank(querySysLogBO.getOperationResult())) {\n\t\tboolQueryBuilder.must(QueryBuilders.matchQuery(\"operationResult\", querySysLogBO.getOperationResult()));\n\t}\n\tif (StrUtil.isNotBlank(querySysLogBO.getOperationResultMsg())) {\n\t\tboolQueryBuilder.must(QueryBuilders.matchQuery(\"operationResultMsg\", querySysLogBO.getOperationResultMsg()));\n\t}\n\tif (StrUtil.isNotBlank(querySysLogBO.getOperationUrl())) {\n\t\tboolQueryBuilder.must(QueryBuilders.matchQuery(\"operationUrl\", querySysLogBO.getOperationUrl()));\n\t}\n\tif (StrUtil.isNotBlank(querySysLogBO.getOperationIp())) {\n\t\tboolQueryBuilder.must(QueryBuilders.matchQuery(\"operationIp\", querySysLogBO.getOperationIp()));\n\t}\n\tif (StrUtil.isNotBlank(querySysLogBO.getOperationUserId())) {\n\t\tboolQueryBuilder.must(QueryBuilders.matchQuery(\"operationUserId\", querySysLogBO.getOperationUserId()));\n\t}\n\tif (StrUtil.isNotBlank(querySysLogBO.getOperationUserName())) {\n\t\tboolQueryBuilder.must(QueryBuilders.matchQuery(\"", "CodeBleu_score": 30.34667063901163}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\t\ttry {\n\t\tconst response = await axios.get(url, {\n\t\t\tresponseType:'stream',\n\t\t});\n\n\t\tconst writer = fs.createWriteStream(dest);\n\t\tresponse.data.pipe(writer);\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\twriter.on('finish', resolve);\n\t\t\twriter.on('error', reject);\n\t\t});\n\t} catch (error) {\n\t\tconsole.error('Error downloading file:', error);\n\t\tif (fs.existsSync(dest)) {\n\t\t\tfs.unlinkSync(dest);\n\t\t}\n\t\treturn Promise.reject(error);\n\t}\n}", "CodeBleu_score": 37.645008555772975}, {"code": "async function downloadFile(url, dest){\n\t\ttry {\n\t\tconst file = fs.createWriteStream(dest);\n\t\tconst response = await axios.get(url, { responseType:'stream' });\n\t\tresponse.data.pipe(file);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tfile.on('finish', resolve);\n\t\t\tfile.on('error', reject);\n\t\t});\n\t} catch (error) {\n\t\tif (fs.existsSync(dest)) {\n\t\t\tfs.unlinkSync(dest);\n\t\t}\n\t\tthrow error;\n\t}\n}", "CodeBleu_score": 43.517036210523905}, {"code": "async function downloadFile(url, dest){\n\t\ttry {\n\t\t// Create a writable stream for the destination file\n\t\tconst fileStream = fs.createWriteStream(dest);\n\n\t\t// Make an HTTPS GET request to the URL\n\t\tconst response = await axios.get(url, { responseType:'stream' });\n\n\t\t// Pipe the response to the file\n\t\tresponse.data.pipe(fileStream);\n\n\t\t// Return a promise that resolves when the download is complete\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tfileStream.on('finish', () => {\n\t\t\t\tresolve();\n\t\t\t});\n\n\t\t\tfileStream.on('error', (error) => {\n\t\t\t\t// Delete the file if an error occurs\n\t\t\t\tfs.unlink(dest, () => {});\n\n\t\t\t\treject(error);\n\t\t\t});\n\t\t});\n\t} catch (error) {\n\t\tconsole.error(error);\n\t}\n}", "CodeBleu_score": 47.24550702465349}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t\tSet<String> circularDependencyCheckSet1 = Sets.newHashSet(circularDependencyCheckSet);\n\tcircularDependencyCheckSet1.add(module.getId());\n\treturn getDependentModulesFromDsl(module.getDependentModules(), circularDependencyCheckSet1)\n\t\t.map(dependentModule -> {\n\t\t\tif (circularDependencyCheckSet1.contains(dependentModule.getId())) {\n\t\t\t\tlog.warn(\"Circular dependency detected: {} -> {}\", module.getId(), dependentModule.getId());\n\t\t\t\treturn module;\n\t\t\t}\n\t\t\treturn dependentModule;\n\t\t});\n}", "CodeBleu_score": 37.00951717545338}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t\treturn getDependentModulesFromDsl(module.getDsl())\n\t\t.stream()\n\t\t.filter(dependentModule ->!circularDependencyCheckSet.contains(dependentModule.getId()))\n\t\t.map(dependentModule -> {\n\t\t\tcircularDependencyCheckSet.add(dependentModule.getId());\n\t\t\treturn dependentModule;\n\t\t})\n\t\t.flatMap(dependentModule -> getDependentModules(dependentModule, circularDependencyCheckSet))\n\t\t.collect(Collectors.toList())\n\t\t.stream()\n\t\t.map(dependentModule -> {\n\t\t\tif (dependentModule.getStatus() == ApplicationStatus.DELETED) {\n\t\t\t\tlog.warn(\"Dependent module {} is marked as deleted\", dependentModule.getId());\n\t\t\t}\n\t\t\treturn dependentModule;\n\t\t})\n\t\t.collect(Collectors.toList())\n\t\t.stream()\n\t\t.map(dependentModule -> {\n\t\t\tif (dependentModule.getStatus() == ApplicationStatus.DELETED) {\n\t\t\t\tlog.warn(\"Dependent module {} is marked as deleted\", dependentModule.getId());\n\t\t\t}\n\t\t\treturn dependentModule;\n\t\t})\n\t\t.collect(Collectors.toList())\n\t\t.stream()\n\t\t.map(dependentModule -> {\n\t\t\tif (dependentModule.getStatus() == ApplicationStatus.DELETED) {\n\t\t\t\tlog.warn(\"Dependent module {} is marked as deleted\", dependentModule.getId());\n\t\t\t}\n\t\t\treturn dependentModule;\n\t\t})\n\t\t.collect(Collectors.toList())\n\t\t.stream()\n\t\t.map(dependentModule -> {\n\t\t\tif (dependentModule.getStatus() == ApplicationStatus.DELETED) {\n\t\t\t\tlog.warn(\"Dependent module {} is marked as deleted\", dependentModule.getId());\n\t\t\t}\n\t\t\treturn dependentModule;\n\t\t})\n\t\t.collect(Collectors.toList())\n\t\t.stream()\n\t\t.map(dependentModule -> {\n\t\t\tif (dependentModule.getStatus() == ApplicationStatus.DELETED) {\n\t\t\t\tlog.warn(\"Dependent module {} is marked as deleted\", dependentModule.getId());\n\t\t\t}\n\t\t\treturn dependentModule;\n\t\t})\n\t\t.collect(Collectors.toList())\n\t\t.stream()\n\t\t.map(dependentModule -> {\n\t\t\tif (dependentModule.getStatus() == ApplicationStatus.DELETED) {\n\t\t\t\tlog.warn(\"Dependent module {} is marked as deleted\", dependentModule.getId());\n\t\t\t}\n\t\t\treturn dependentModule;\n\t\t})\n\t", "CodeBleu_score": 39.72676959096329}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t\tSet<String> moduleIds = Sets.newHashSet(module.getId());\n\treturn getDependentModulesFromDsl(module.getDsl(), moduleIds, circularDependencyCheckSet)\n\t\t.flatMap(dependentModule -> {\n\t\t\tif (dependentModule.getId().equals(module.getId())) {\n\t\t\t\treturn Mono.empty();\n\t\t\t}\n\t\t\treturn Mono.just(dependentModule);\n\t\t});\n}", "CodeBleu_score": 44.929857077791894}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tif (map == null) {\n\t\treturn;\n\t}\n\tif (map instanceof Map) {\n\t\tMap<?,?> map1 = (Map<?,?>) map;\n\t\tif (map1.containsKey(\"type\") && map1.get(\"type\").equals(\"module\")) {\n\t\t\tif (map1.containsKey(\"appId\") && StringUtils.isNotBlank(map1.get(\"appId\").toString())) {\n\t\t\t\tdependentModuleIds.add(map1.get(\"appId\").toString());\n\t\t\t}\n\t\t}\n\t\tif (map1.containsKey(\"dependencies\")) {\n\t\t\tList<?> list = (List<?>) map1.get(\"dependencies\");\n\t\t\tfor (Object obj : list) {\n\t\t\t\tif (obj instanceof Map) {\n\t\t\t\t\tdoGetDependentModules((Map<?,?>) obj, dependentModuleIds);\n\t\t\t\t} else if (obj instanceof List) {\n\t\t\t\t\tfor (Object obj1 : (List<?>) obj) {\n\t\t\t\t\t\tif (obj1 instanceof Map) {\n\t\t\t\t\t\t\tdoGetDependentModules((Map<?,?>) obj1, dependentModuleIds);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 35.077135841149065}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tif (map == null) {\n\t\treturn;\n\t}\n\tSet<String> moduleIds = Sets.newHashSet();\n\tfor (Map.Entry<?,?> entry : map.entrySet()) {\n\t\tString key = entry.getKey().toString();\n\t\tif (key.equals(\"type\") && StringUtils.isNotBlank(entry.getValue().toString())) {\n\t\t\tif (entry.getValue().toString().equals(\"module\")) {\n\t\t\t\tmoduleIds.add(entry.getValue().toString());\n\t\t\t}\n\t\t}\n\t\tif (entry.getValue() instanceof Map) {\n\t\t\tdoGetDependentModules((Map<?,?>) entry.getValue(), dependentModuleIds);\n\t\t} else if (entry.getValue() instanceof List) {\n\t\t\tfor (Object value : (List) entry.getValue()) {\n\t\t\t\tif (value instanceof Map) {\n\t\t\t\t\tdoGetDependentModules((Map<?,?>) value, dependentModuleIds);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tdependentModuleIds.addAll(moduleIds);\n}", "CodeBleu_score": 35.397238410779494}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tfor (Map.Entry<?,?> entry : map.entrySet()) {\n\t\tObject value = entry.getValue();\n\t\tif (value instanceof Map) {\n\t\t\tdoGetDependentModules((Map<?,?>) value, dependentModuleIds);\n\t\t} else if (value instanceof List) {\n\t\t\tfor (Object listValue : (List<?>) value) {\n\t\t\t\tif (listValue instanceof Map) {\n\t\t\t\t\tdoGetDependentModules((Map<?,?>) listValue, dependentModuleIds);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (value instanceof String) {\n\t\t\tString valueString = (String) value;\n\t\t\tif (StringUtils.isNotBlank(valueString)) {\n\t\t\t\tif (valueString.startsWith(\"module:\")) {\n\t\t\t\t\tdependentModuleIds.add(valueString.substring(7));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 34.70870575993696}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t\tif (dataBuffer == null) {\n\t\tthrow new BizException(BizError.INVALID_IMAGE);\n\t}\n\t// Read the image data from the DataBuffer.\n\tbyte[] imageData = dataBuffer.asByteBuffer().array();\n\t// Create a new Image object from the image data.\n\tBufferedImage srcImage = ImageIO.read(new ByteArrayInputStream(imageData));\n\t// Get the image width and height.\n\tint srcWidth = srcImage.getWidth();\n\tint srcHeight = srcImage.getHeight();\n\t// If creating a thumbnail, resize the image.\n\tif (createThumbnail) {\n\t\tsrcWidth = srcWidth / 2;\n\t\tsrcHeight = srcHeight / 2;\n\t\tsrcImage = resizeImage(srcImage, srcWidth, srcHeight);\n\t}\n\t// Create a new ByteArrayOutputStream to write the image data to.\n\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t// Write the image data to the ByteArrayOutputStream.\n\tImageIO.write(srcImage, \"jpg\", baos);\n\t// Get the image data from the ByteArrayOutputStream.\n\tbyte[] imageDataThumbnail = baos.toByteArray();\n\t// Create a new Asset object.\n\tAsset asset = new Asset();\n\t// Set the image data and content type.\n\tasset.setImageData(imageDataThumbnail);\n\tasset.setImageContentType(srcContentType);\n\t// Return the new Asset object.\n\treturn asset;\n}", "CodeBleu_score": 38.008537920853996}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t\t// Create a new Asset object\n\tAsset asset = new Asset();\n\n\t// Get the data buffer's content type\n\tMediaType contentType = dataBuffer.contentType();\n\n\t// Get the data buffer's byte array\n\tbyte[] data = new byte[dataBuffer.readableByteCount()];\n\tdataBuffer.read(data);\n\n\t// Release the data buffer\n\tDataBufferUtils.release(dataBuffer);\n\n\t// Set the asset's content type\n\tasset.setContentType(contentType);\n\n\t// If creating a thumbnail, resize the image and set the content type to JPEG\n\tif (createThumbnail) {\n\t\t// Resize the image\n\t\tBufferedImage image = ImageIO.read(new ByteArrayInputStream(data));\n\t\tImage resizedImage = image.getScaledInstance(200, 200, Image.SCALE_SMOOTH);\n\t\tBufferedImage thumbnail = new BufferedImage(resizedImage.getWidth(null), resizedImage.getHeight(null), BufferedImage.TYPE_INT_RGB);\n\t\tthumbnail.getGraphics().drawImage(resizedImage, 0, 0, null);\n\n\t\t// Set the asset's content type to JPEG\n\t\tcontentType = MediaType.IMAGE_JPEG;\n\n\t\t// Convert the thumbnail to a byte array\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tImageIO.write(thumbnail, \"jpg\", baos);\n\t\tbaos.flush();\n\t\tdata = baos.toByteArray();\n\t\tbaos.close();\n\t}\n\n\t// Set the asset's data\n\tasset.setData(data);\n\n\t// Return the new Asset object\n\treturn asset;\n}", "CodeBleu_score": 41.34203361822177}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t\t// Create an empty Asset object\n\tAsset asset = new Asset();\n\t// Set the content type\n\tasset.setContentType(srcContentType);\n\t// Get the data buffer factory\n\tDefaultDataBufferFactory dataBufferFactory = new DefaultDataBufferFactory();\n\t// Get the byte array from the data buffer\n\tbyte[] imageData = DataBufferUtils.copyToByteArray(dataBuffer);\n\t// Set the image data\n\tasset.setData(imageData);\n\t// If creating a thumbnail, resize the image\n\tif (createThumbnail) {\n\t\t// Set the thumbnail flag\n\t\tasset.setThumbnail(true);\n\t\t// Resize the image\n\t\tBufferedImage thumbnail = resizeImage(imageData, srcContentType);\n\t\t// Set the content type to JPEG\n\t\tasset.setContentType(MediaType.IMAGE_JPEG);\n\t\t// Set the image data\n\t\tasset.setData(imageToByte(thumbnail));\n\t}\n\t// Return the Asset\n\treturn asset;\n}", "CodeBleu_score": 43.75833472905705}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn exchange.getResponse().writeWith(Mono.defer(() -> {\n\t\tServerHttpResponse response = exchange.getResponse();\n\t\tresponse.setStatusCode(HttpStatus.OK);\n\t\tresponse.getHeaders().setContentType(MediaType.IMAGE_JPEG);\n\t\treturn Flux.from(assetId)\n\t\t\t\t.flatMap(id -> {\n\t\t\t\t\tAsset asset = ConfigCenter.getAsset(id);\n\t\t\t\t\tif (asset == null) {\n\t\t\t\t\t\treturn Mono.error(new BizException(BizError.ASSET_NOT_FOUND, id));\n\t\t\t\t\t}\n\t\t\t\t\treturn Mono.just(asset);\n\t\t\t\t})\n\t\t\t\t.flatMap(asset -> {\n\t\t\t\t\tif (asset.getThumbnail() == null) {\n\t\t\t\t\t\treturn Mono.error(new BizException(BizError.ASSET_NO_THUMBNAIL, asset.getId()));\n\t\t\t\t\t}\n\t\t\t\t\treturn Mono.just(asset.getThumbnail());\n\t\t\t\t})\n\t\t\t\t.flatMap(thumbnail -> {\n\t\t\t\t\tif (thumbnail == null) {\n\t\t\t\t\t\treturn Mono.error(new BizException(BizError.ASSET_NO_THUMBNAIL, asset.getId()));\n\t\t\t\t\t}\n\t\t\t\t\treturn Mono.just(thumbnail);\n\t\t\t\t})\n\t\t\t\t.flatMap(bytes -> {\n\t\t\t\t\treturn Mono.just(bytes);\n\t\t\t\t})\n\t\t\t\t.map(bytes -> {\n\t\t\t\t\treturn bytes;\n\t\t\t\t})\n\t\t\t\t.map(bytes -> {\n\t\t\t\t\treturn bytes;\n\t\t\t\t})\n\t\t\t\t.map(bytes -> {\n\t\t\t\t\treturn bytes;\n\t\t\t\t})\n\t\t\t\t.map(bytes -> {\n\t\t\t\t\treturn bytes;\n\t\t\t\t})\n\t\t\t\t.map(bytes -> {\n\t\t\t\t\treturn bytes;\n\t\t\t\t})\n\t\t\t\t.map(bytes -> {\n\t\t\t\t\treturn bytes;\n\t\t\t\t})\n\t\t\t\t.map(bytes -> {\n\t\t\t\t\treturn bytes;\n\t\t\t\t})\n\t\t\t\t.map(bytes -> {\n\t\t\t\t\treturn bytes;\n\t\t\t\t})\n\t\t\t\t.map(bytes -> {\n\t\t\t\t\treturn bytes;\n\t\t\t\t})\n\t\t\t\t.map(bytes -> {\n\t\t\t\t\treturn bytes;\n\t\t\t\t})\n\t\t\t\t.map(bytes -> {\n\t\t\t\t\treturn bytes;\n\t\t\t\t})\n\t\t\t\t.map(bytes -> {\n\t\t\t\t\treturn bytes;\n\t\t\t\t})\n\t\t\t\t.map(bytes -> {\n\t\t\t\t\treturn bytes;\n\t\t\t\t})\n\t\t\t\t.map(bytes -> {\n\t\t\t\t\treturn bytes;\n\t\t\t\t})\n\t\t\t\t.map(bytes -> {\n\t\t\t\t", "CodeBleu_score": 41.38301528965365}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn Mono.from(exchange)\n\t\t.flatMap(e -> Mono.just(e.getResponse()))\n\t\t.flatMap(response -> {\n\t\t\ttry {\n\t\t\t\tAsset asset = getAsset(assetId);\n\t\t\t\treturn setResponseHeaders(asset, response);\n\t\t\t} catch (Exception e) {\n\t\t\t\treturn Mono.error(e);\n\t\t\t}\n\t\t})\n\t\t.then();\n}", "CodeBleu_score": 28.8775216490913}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn Mono.defer(() -> {\n\t\t// Get the asset from the database.\n\t\tAsset asset = assetService.getAsset(assetId);\n\t\tif (asset == null) {\n\t\t\tthrow new BizException(BizError.ASSET_NOT_FOUND);\n\t\t}\n\t\t// Set the response status to OK.\n\t\texchange.getResponse().setStatusCode(HttpStatus.OK);\n\t\t// Set the content type header if available.\n\t\tif (asset.getContentType()!= null) {\n\t\t\texchange.getResponse().getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n\t\t}\n\t\t// Write the asset data to the response using a data buffer.\n\t\treturn exchange.getResponse().writeWith(Flux.just(asset.getData()));\n\t});\n}", "CodeBleu_score": 38.57641019161908}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\treturn getAuthConfigsForEnterpriseMode()\n\t\t.flatMap(authConfig -> {\n\t\t\tif (authConfig.getWorkspaceMode() == WorkspaceMode.SAAS) {\n\t\t\t\treturn Flux.empty();\n\t\t\t}\n\t\t\treturn Flux.fromIterable(authConfig.getOrganizations())\n\t\t\t\t.map(organization -> {\n\t\t\t\t\tFindAuthConfig findAuthConfig = new FindAuthConfig();\n\t\t\t\t\tfindAuthConfig.setOrganizationId(organization.getId());\n\t\t\t\t\tfindAuthConfig.setAuthConfig(authConfig);\n\t\t\t\t\treturn findAuthConfig;\n\t\t\t\t});\n\t\t});\n}", "CodeBleu_score": 33.530824664091405}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\treturn Flux.fromIterable(commonConfig.getOrganizations())\n\t\t.flatMap(organization -> {\n\t\t\ttry {\n\t\t\t\treturn organizationService.getAuthConfigs(organization.getOrganizationId(), commonConfig.getWorkspaceMode())\n\t\t\t\t\t.map(authConfig -> new FindAuthConfig(authConfig, organization.getOrganizationId()));\n\t\t\t} catch (Exception e) {\n\t\t\t\treturn Mono.error(ofError(e, LOG_IN_SOURCE_NOT_SUPPORTED, organization.getOrganizationId()));\n\t\t\t}\n\t\t})\n\t\t.onErrorResume(Function.identity())\n\t\t.collect(Collectors.toList())\n\t\t.flatMap(Flux::fromIterable);\n}", "CodeBleu_score": 23.971893929802825}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\treturn getAuthConfigs().map(authConfig -> {\n\t\tif (authConfig.getWorkspaceMode() == WorkspaceMode.SAAS) {\n\t\t\treturn new FindAuthConfig(authConfig.getId(), authConfig.getWorkspaceMode(), authConfig.getAuthType(), authConfig.getAuthProperties());\n\t\t}\n\t\treturn new FindAuthConfig(authConfig.getId(), authConfig.getWorkspaceMode(), authConfig.getAuthType(), authConfig.getAuthProperties(), authConfig.getOrganizationId());\n\t});\n}", "CodeBleu_score": 24.56293080702247}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\treturn MongockSpring5.builder().withApplicationContext(springContext).withDriver(new SpringDataMongoV3Driver(mongoTemplate)).withChangeLogsScanPackage(\"com.openblocks.domain\").build();\n}", "CodeBleu_score": 17.835171254547785}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\treturn MongockSpring5.springDataMongoV3(springContext, mongoTemplate).withLock(true).withLockTimeout(5000).withDriver(new SpringDataMongoV3Driver());\n}", "CodeBleu_score": 14.877974448060938}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\treturn MongockSpring5.builder()\n\t\t\t.setDriver(new SpringDataMongoV3Driver(mongoTemplate))\n\t\t\t.setApplicationContext(springContext)\n\t\t\t.setChangeLogsScanPackage(springContext.getEnvironment().getProperty(\"spring.data.mongodb.changelogs.scan.package\"))\n\t\t\t.build();\n}", "CodeBleu_score": 20.46225824385517}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\tlog.info(\"ReactiveMongoTemplate\");\n\tmappingMongoConverter.setCustomConversions(new Converters());\n\tmappingMongoConverter.setDateTimeProvider(new Java8DateTimeProvider());\n\tReactiveMongoTemplate template = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\ttemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\treturn template;\n}", "CodeBleu_score": 58.54478766966844}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\treturn new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n}", "CodeBleu_score": 26.11799355653882}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\tReactiveMongoTemplate template = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\ttemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\treturn template;\n}", "CodeBleu_score": 76.62547287398485}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t\treturn getLatestLibraryQueryRecordByLibraryQueryId(libraryQueryId)\n\t\t\t.flatMap(libraryQueryRecord -> {\n\t\t\t\tif (libraryQueryRecord!= null) {\n\t\t\t\t\treturn Mono.just(libraryQueryRecord.getDsl());\n\t\t\t\t} else {\n\t\t\t\t\treturn getLibraryQueryById(libraryQueryId)\n\t\t\t\t\t\t\t.map(libraryQuery -> libraryQuery.getDsl());\n\t\t\t\t}\n\t\t\t});\n}", "CodeBleu_score": 42.644874455945306}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t\treturn getLibraryQueryRecordByLibraryQueryId(libraryQueryId)\n\t\t.flatMap(libraryQueryRecord -> getLibraryQueryByLibraryQueryId(libraryQueryId)\n\t\t\t.map(libraryQuery -> libraryQueryRecord.getDsl(libraryQuery))\n\t\t\t.switchIfEmpty(libraryQuery -> libraryQuery.getDsl())\n\t\t);\n}", "CodeBleu_score": 51.47853499094106}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t\treturn getLibraryQueryRecord(libraryQueryId)\n\t\t.map(LibraryQueryRecord::getDsl)\n\t\t.switchIfEmpty(getLibraryQuery(libraryQueryId).map(LibraryQuery::getDsl))\n\t\t.onErrorResume(deferredError(LIBRARY_QUERY_NOT_FOUND));\n}", "CodeBleu_score": 53.2851815087388}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t return Mono.defer(() -> {\n try {\n final DatasourceConnectionHolder datasourceConnectionHolder =\n DatasourceConnectionPool.getInstance().getDatasourceConnectionHolder(datasource.getId());\n final DatasourcePluginClient datasourcePluginClient =\n datasourceConnectionHolder.getDatasourcePluginClient();\n final String timeout = timeoutStr!= null? timeoutStr : \"0\";\n final Duration timeoutDuration = Duration.ofMillis(QueryTimeoutUtils.getTimeout(timeout));\n final QueryExecutionContext queryExecutionContext = new QueryExecutionContext(datasource, queryConfig, requestParams, timeoutDuration,\n datasourceConnectionHolder, datasourcePluginClient);\n final QueryExecutionResult queryExecutionResult = queryVisitorContext.execute(queryExecutionContext);\n return Mono.just(queryExecutionResult);\n } catch (TimeoutException e) {\n log.error(\"Query execution timed out\", e);\n throw ofException(QUERY_EXECUTION_TIMEOUT, e);\n } catch (PluginException e) {\n log.error(\"Error while executing query on datasource\", e);\n throw ofException(QUERY_EXECUTION_ERROR, e);\n } catch (BizException e) {\n log.error(\"Error while executing query on datasource\", e);\n throw ofException(QUERY_EXECUTION_ERROR, e);\n } catch (Exception e) {\n log.error(\"Error while executing query on datasource\", e);\n throw ofException(QUERY_EXECUTION_ERROR, e);\n }\n });\n }", "CodeBleu_score": 40.238979847861664}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t return Mono.defer(() -> {\n try {\n DatasourceConnectionHolder datasourceConnectionHolder = datasourceConnectionPool.getConnection(datasource);\n if (datasourceConnectionHolder == null) {\n return Mono.error(new BizException(QUERY_EXECUTION_ERROR, \"Datasource is not available\"));\n }\n return Mono.fromCallable(() -> {\n DatasourceMetaInfoService datasourceMetaInfoService = datasourceConnectionHolder.getDatasourceMetaInfoService();\n DatasourcePluginClient datasourcePluginClient = datasourceConnectionHolder.getDatasourcePluginClient();\n Datasource datasourceModel = datasourceConnectionHolder.getDatasource();\n String datasourceType = datasourceModel.getDatasourceType();\n String datasourceName = datasourceModel.getDatasourceName();\n String datasourceId = datasourceModel.getDatasourceId();\n if (datasourceType == null) {\n throw new BizException(QUERY_EXECUTION_ERROR, \"Datasource type is not available\");\n }\n if (datasourceName == null) {\n throw new BizException(QUERY_EXECUTION_ERROR, \"Datasource name is not available\");\n }\n if (datasourceId == null) {\n throw new BizException(QUERY_EXECUTION_ERROR, \"Datasource id is not available\");\n }\n long timeout = QueryTimeoutUtils.getTimeout(timeoutStr, datasourceMetaInfoService);\n return datasourcePluginClient.executeQuery(datasourceId, datasourceType, queryConfig, requestParams, timeout, queryVisitorContext);\n }).timeout(Duration.ofMillis(timeout)).onErrorResume(TimeoutException.class, ex -> {\n log.warn(\"Query execution timeout for datasource: {}, datasource type: {}\", datasourceName, datasourceType, ex);\n return Mono.error(new PluginException(QUERY_EXECUTION_TIMEOUT, \"Query execution timeout\"));\n }).onErrorResume(PluginException.class, ex -> {\n log.error(\"Plugin exception occurred for datasource: {}, datasource type: {}\", datasourceName, datasourceType, ex);\n return Mono.error(new BizException(QUERY_EXECUTION_ERROR, \"Query execution error\"));\n }).onErrorResume(BizException.class, ex -> {\n log.error(\"Biz exception occurred for datasource: {}, datasource type: {}\", datasourceName, datasourceType, ex);\n return Mono.error(new BizException(QUERY_EXECUTION_ERROR, \"Query execution error\"));\n }).onErrorResume(Exception.class, ex -> {\n log.error(\"Unexpected exception occurred", "CodeBleu_score": 39.426681535808804}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t+    return executeQuery(datasource, queryConfig, requestParams, timeoutStr, queryVisitorContext, false);\n+}", "CodeBleu_score": 13.911162378945635}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\treturn Mono.defer(() -> {\n\t\tDatasourceConnectionHolder datasourceConnectionHolder = null;\n\t\tDatasourceMetaInfoService datasourceMetaInfoService = datasource.getDatasourceMetaInfoService();\n\t\tDatasourcePluginClient datasourcePluginClient = datasource.getDatasourcePluginClient();\n\t\tDatasourceConnectionPool datasourceConnectionPool = datasource.getDatasourceConnectionPool();\n\t\tDatasourceConnectionHolder datasourceConnectionHolder1 = null;\n\t\ttry {\n\t\t\tDatasourceConnectionHolder datasourceConnectionHolder2 = datasourceConnectionPool.getConnection(datasource);\n\t\t\tdatasourceConnectionHolder = datasourceConnectionHolder2;\n\t\t\tDatasourceConnectionHolder datasourceConnectionHolder3 = datasourceConnectionHolder1;\n\t\t\tDatasourceConnectionHolder datasourceConnectionHolder4 = datasourceConnectionHolder3;\n\t\t\tDatasourceConnectionHolder datasourceConnectionHolder5 = datasourceConnectionHolder4;\n\t\t\tDatasourceConnectionHolder datasourceConnectionHolder6 = datasourceConnectionHolder5;\n\t\t\tDatasourceConnectionHolder datasourceConnectionHolder7 = datasourceConnectionHolder6;\n\t\t\tDatasourceConnectionHolder datasourceConnectionHolder8 = datasourceConnectionHolder7;\n\t\t\tDatasourceConnectionHolder datasourceConnectionHolder9 = datasourceConnectionHolder8;\n\t\t\tDatasourceConnectionHolder datasourceConnectionHolder10 = datasourceConnectionHolder9;\n\t\t\tDatasourceConnectionHolder datasourceConnectionHolder11 = datasourceConnectionHolder10;\n\t\t\tDatasourceConnectionHolder datasourceConnectionHolder12 = datasourceConnectionHolder11;\n\t\t\tDatasourceConnectionHolder datasourceConnectionHolder13 = datasourceConnectionHolder12;\n\t\t\tDatasourceConnectionHolder datasourceConnectionHolder14 = datasourceConnectionHolder13;\n\t\t\tDatasourceConnectionHolder datasourceConnectionHolder15 = datasourceConnectionHolder14;\n\t\t\tDatasourceConnectionHolder datasourceConnectionHolder16 = datasourceConnectionHolder15;\n\t\t\tDatasourceConnectionHolder datasourceConnectionHolder17 = datasourceConnectionHolder16;\n\t\t\tDatasourceConnectionHolder datasourceConnectionHolder18 = datasourceConnectionHolder17;\n\t\t\tDatasourceConnectionHolder datasourceConnectionHolder19 = datasourceConnectionHolder18;\n\t\t\tDatasourceConnectionHolder datasourceConnectionHolder20 = datasourceConnectionHolder19;\n\t\t\tDatasourceConnectionHolder datasourceConnectionHolder21 = datasourceConnectionHolder20;\n\t\t\tDatasourceConnectionHolder datasourceConnectionHolder22 = datasourceConnectionHolder21;\n\t\t\tDatasourceConnectionHolder datasourceConnectionHolder23 = datasourceConnectionHolder22;\n\t\t\tDatasourceConnectionHolder datasourceConnectionHolder24 = datasourceConnectionHolder23;\n\t\t\tDatasourceConnectionHolder datasourceConnectionHolder25 = datasourceConnectionHolder24;\n\t\t\tDatasourceConnectionHolder datasourceConnectionHolder26 = datasourceConnectionHolder25;\n\t\t\tDatasourceConnection", "CodeBleu_score": 30.389689921535947}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\tDatasourceConnectionHolder datasourceConnectionHolder = null;\n\tDatasourceMetaInfoService datasourceMetaInfoService = queryVisitorContext.getDatasourceMetaInfoService();\n\tDatasourcePluginClient datasourcePluginClient = queryVisitorContext.getDatasourcePluginClient();\n\tDatasourceConnectionPool datasourceConnectionPool = queryVisitorContext.getDatasourceConnectionPool();\n\ttry {\n\t\tDatasourceConnectionHolder datasourceConnectionHolder = datasourceConnectionPool.getConnection(datasource);\n\t\tif (datasourceConnectionHolder == null) {\n\t\t\tthrow ofException(QUERY_EXECUTION_ERROR, \"Failed to acquire datasource connection.\");\n\t\t}\n\t\tDatasourceMetaInfo datasourceMetaInfo = datasourceMetaInfoService.getDatasourceMetaInfo(datasource);\n\t\tQueryExecutionContext queryExecutionContext = datasourceMetaInfo.getDatasourceExecutor().buildExecutionContext(datasource, queryConfig, requestParams);\n\t\treturn datasourceMetaInfo.getDatasourceExecutor().execute(datasourceConnectionHolder, queryExecutionContext, queryVisitorContext);\n\t} catch (TimeoutException e) {\n\t\tthrow ofException(QUERY_EXECUTION_TIMEOUT, \"Failed to acquire datasource connection.\");\n\t} catch (Exception e) {\n\t\tthrow ofException(QUERY_EXECUTION_ERROR, \"Failed to execute query locally.\");\n\t} finally {\n\t\tif (datasourceConnectionHolder!= null) {\n\t\t\tdatasourceConnectionPool.releaseConnection(datasourceConnectionHolder);\n\t\t}\n\t}\n}", "CodeBleu_score": 37.63596630416411}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\tDatasourceConnectionPool connectionPool = datasourceConnectionPool.getConnectionPool(datasource);\n\tDatasourceConnectionHolder connectionHolder = connectionPool.acquireConnection(datasource, queryConfig);\n\ttry {\n\t\tDatasourcePluginClient datasourcePluginClient = datasourcePluginClientFactory.create(datasource);\n\t\treturn datasourcePluginClient.execute(connectionHolder, queryConfig, requestParams, queryVisitorContext)\n\t\t\t\t.onErrorResume(e -> {\n\t\t\t\t\tif (e instanceof TimeoutException) {\n\t\t\t\t\t\tthrow ofException(QUERY_EXECUTION_TIMEOUT, datasource.getId(), e);\n\t\t\t\t\t}\n\t\t\t\t\tthrow ofException(QUERY_EXECUTION_ERROR, datasource.getId(), e);\n\t\t\t\t});\n\t} catch (PluginException e) {\n\t\tthrow ofException(QUERY_EXECUTION_ERROR, datasource.getId(), e);\n\t} finally {\n\t\tconnectionPool.releaseConnection(datasource, connectionHolder);\n\t}\n}", "CodeBleu_score": 42.14770541104505}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t\tif (StringUtils.isBlank(timeoutStr)) {\n\t\treturn DEFAULT_QUERY_TIMEOUT_MS;\n\t}\n\tPair<Integer, String> parsedTimeout = parseTimeout(timeoutStr);\n\tint timeoutMs = parsedTimeout.getLeft() * parsedTimeout.getRight();\n\tif (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n\t\tthrow new PluginException(EXCEED_MAX_QUERY_TIMEOUT, Map.of(\"timeout\", timeoutMs, \"maxTimeout\", MAX_QUERY_TIMEOUT_MS));\n\t}\n\treturn timeoutMs;\n}", "CodeBleu_score": 26.32274714422215}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t\tif (StringUtils.isBlank(timeoutStr)) {\n\t\treturn QUERY_TIMEOUT_MS_DEFAULT;\n\t}\n\n\tPair<Integer, String> parsedTimeout = parseTimeout(timeoutStr);\n\tif (parsedTimeout == null) {\n\t\tthrow new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout string: \" + timeoutStr);\n\t}\n\n\tint timeoutMs = parsedTimeout.getLeft() * parsedTimeout.getRight();\n\tif (timeoutMs > QUERY_TIMEOUT_MS_MAX) {\n\t\tthrow new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"Query timeout \" + timeoutStr + \" exceeds maximum allowed value of \" + QUERY_TIMEOUT_MS_MAX + \" milliseconds\");\n\t}\n\n\treturn timeoutMs;\n}", "CodeBleu_score": 31.76579138654507}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t\tif (StringUtils.isBlank(timeoutStr)) {\n\t\treturn DEFAULT_QUERY_TIMEOUT_MS;\n\t}\n\tif (timeoutStr.equals(TIMEOUT_INFINITE)) {\n\t\treturn INFINITE_QUERY_TIMEOUT_MS;\n\t}\n\tPair<Integer, String> pair = parseTimeoutString(timeoutStr);\n\tint timeoutMs = pair.getLeft();\n\tif (timeoutMs < 0) {\n\t\tthrow new PluginException(QUERY_ARGUMENT_ERROR, EXCEED_MAX_QUERY_TIMEOUT);\n\t}\n\treturn timeoutMs;\n}", "CodeBleu_score": 27.03438211297352}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t\treturn Flux.fromIterable(application.getQueries())\n\t\t\t.flatMap(query -> this.templateService.getDatasourceIdsFromQuery(currentOrganizationId, query))\n\t\t\t.collectList()\n\t\t\t.flatMap(ids -> {\n\t\t\t\tif (ids.isEmpty()) {\n\t\t\t\t\treturn deferredError(TEMPLATE_NOT_CORRECT, \"No datasource found in template\", visitorId);\n\t\t\t\t}\n\t\t\t\treturn Flux.fromIterable(ids)\n\t\t\t\t\t\t.flatMap(id -> this.datasourceService.copyDatasourceToCurrentOrganization(currentOrganizationId, id, visitorId))\n\t\t\t\t\t\t.collectList()\n\t\t\t\t\t\t.map(TupleUtils.pairList(ids));\n\t\t\t});\n}", "CodeBleu_score": 31.573799546164004}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t\treturn this.templateService.getTemplate(application.getTemplateId())\n           .flatMap(template -> {\n                if (isNull(template)) {\n                    return deferredError(TEMPLATE_NOT_EXIST);\n                }\n\n                if (template.getOrganizationId().equals(currentOrganizationId)) {\n                    return deferredError(TEMPLATE_NOT_CORRECT);\n                }\n\n                return this.applicationService.getApplicationQueries(application.getId())\n                       .flatMap(queries -> {\n                            if (isNull(queries) || queries.isEmpty()) {\n                                return deferredError(QUERY_NOT_FOUND);\n                            }\n\n                            return Flux.fromIterable(queries)\n                                   .flatMap(query -> this.datasourceService.createDatasourceFromTemplate(template.getId(),\n                                            query.getDatasourceId(), visitorId))\n                                   .collectList()\n                                   .map(datasources -> datasources.stream().map(datasource -> Pair.of(query.getDatasourceId(), datasource.getId()))\n                                           .collect(Collectors.toList()));\n                        });\n            });\n}", "CodeBleu_score": 28.82396078094345}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t\treturn templateService.getTemplate(application.getTemplateId())\n\t\t\t.flatMap(template -> {\n\t\t\t\tif (isNull(template)) {\n\t\t\t\t\treturn deferredError(TEMPLATE_NOT_EXIST);\n\t\t\t\t}\n\t\t\t\treturn templateService.getTemplateQueries(template.getId())\n\t\t\t\t\t\t.flatMapMany(queries -> {\n\t\t\t\t\t\t\tif (queries.isEmpty()) {\n\t\t\t\t\t\t\t\treturn deferredError(TEMPLATE_NOT_CORRECT);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn Flux.fromIterable(queries)\n\t\t\t\t\t\t\t\t\t.flatMap(query -> {\n\t\t\t\t\t\t\t\t\t\tif (query.getDatasourceId() == null) {\n\t\t\t\t\t\t\t\t\t\t\treturn deferredError(TEMPLATE_NOT_CORRECT);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\treturn datasourceService.getDatasource(query.getDatasourceId())\n\t\t\t\t\t\t\t\t\t\t\t\t.flatMap(datasource -> {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (isNull(datasource)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn deferredError(TEMPLATE_NOT_CORRECT);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (!datasource.getOrganizationId().equals(currentOrganizationId)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn deferredError(TEMPLATE_NOT_CORRECT);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn datasourceService.copyDatasource(datasource,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tDatasourceCreationSource.APPLICATION, visitorId);\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.collectList();\n\t\t\t})\n\t\t\t.map(datasources -> datasources.stream()\n\t\t\t\t\t.map(TupleUtils::tuple)\n\t\t\t\t\t.collect(Collectors.toList()));\n}", "CodeBleu_score": 27.622107693966118}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t\treturn this.datasourceService.findById(datasourceId)\n\t\t.flatMap(datasource -> {\n\t\t\tif (datasource.isSystemStatic()) {\n\t\t\t\treturn Mono.just(datasource.getId());\n\t\t\t} else if (datasource.getCreationSource() == DatasourceCreationSource.QUICK_REST_API || datasource.getCreationSource() == DatasourceCreationSource.OPENBLOCKS_API) {\n\t\t\t\treturn Mono.just(datasource.getId());\n\t\t\t} else {\n\t\t\t\treturn this.datasourceService.createDatasource(organizationId, visitorId, datasource.getDatasourceType(), datasource.getDatasourceName(), datasource.getDatasourceDescription(), datasource.getDatasourceUrl(), datasource.getDatasourceUsername(), datasource.getDatasourcePassword(), datasource.getDatasourceAdditionalParameters());\n\t\t\t}\n\t\t});\n}", "CodeBleu_score": 51.76243359857138}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t\treturn Mono.zip(Mono.just(organizationId), Mono.just(datasourceId), Mono.just(visitorId))\n\t\t\t.flatMap(tuple -> {\n\t\t\t\tfinal String orgId = tuple.getT1();\n\t\t\t\tfinal String dsId = tuple.getT2();\n\t\t\t\tfinal String visitor = tuple.getT3();\n\t\t\t\treturn getDatasource(orgId, dsId, visitor).flatMap(datasource -> {\n\t\t\t\t\tif (datasource.isSystemStatic()) {\n\t\t\t\t\t\treturn Mono.just(datasource.getId());\n\t\t\t\t\t}\n\t\t\t\t\tfinal Datasource newDs = new Datasource();\n\t\t\t\t\tnewDs.setId(RandomStringUtils.randomAlphanumeric(10));\n\t\t\t\t\tnewDs.setOrganizationId(orgId);\n\t\t\t\t\tnewDs.setVisitorId(visitor);\n\t\t\t\t\tnewDs.setCreationSource(DatasourceCreationSource.COPY);\n\t\t\t\t\tnewDs.setCreationDate(System.currentTimeMillis());\n\t\t\t\t\tnewDs.setLastModificationDate(System.currentTimeMillis());\n\t\t\t\t\tnewDs.setLastModifierId(visitor);\n\t\t\t\t\tnewDs.setLastModifierName(visitor);\n\t\t\t\t\tnewDs.setCreationDate(System.currentTimeMillis());\n\t\t\t\t\tnewDs.setCreationSource(DatasourceCreationSource.COPY);\n\t\t\t\t\tnewDs.setCreationDate(System.currentTimeMillis());\n\t\t\t\t\tnewDs.setCreationSource(DatasourceCreationSource.COPY);\n\t\t\t\t\tnewDs.setCreationDate(System.currentTimeMillis());\n\t\t\t\t\tnewDs.setCreationSource(DatasourceCreationSource.COPY);\n\t\t\t\t\tnewDs.setCreationDate(System.currentTimeMillis());\n\t\t\t\t\tnewDs.setCreationSource(DatasourceCreationSource.COPY);\n\t\t\t\t\tnewDs.setCreationDate(System.currentTimeMillis());\n\t\t\t\t\tnewDs.setCreationSource(DatasourceCreationSource.COPY);\n\t\t\t\t\tnewDs.setCreationDate(System.currentTimeMillis());\n\t\t\t\t\tnewDs.setCreationSource(DatasourceCreationSource.COPY);\n\t\t\t\t\tnewDs.setCreationDate(System.currentTimeMillis());\n\t\t\t\t\tnewDs.setCreationSource(DatasourceCreationSource.COPY);\n\t\t\t\t\tnewDs.setCreationDate(System.currentTimeMillis());\n\t\t\t\t\tnewDs.setCreationSource(DatasourceCreationSource.COPY);\n\t\t\t\t\tnewDs.setCreationDate(System.currentTimeMillis());\n\t\t\t\t\tnewDs.setCreationSource(DatasourceCreationSource.COPY);\n\t\t\t\t\tnewDs.setCreationDate(System.currentTimeMillis());\n\t\t\t\t\tnewDs.setCreationSource(DatasourceCreationSource.", "CodeBleu_score": 42.02782249619638}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t\treturn datasourceService.getDatasource(datasourceId)\n\t\t.flatMap(datasource -> {\n\t\t\tif (datasource.isSystemStatic()) {\n\t\t\t\treturn Mono.just(datasourceId);\n\t\t\t}\n\t\t\tif (datasource.isLegacyDatasource()) {\n\t\t\t\treturn datasourceService.getDatasource(datasource.getVisitorId())\n\t\t\t\t\t.map(visitorDatasource -> visitorDatasource.getId());\n\t\t\t}\n\t\t\treturn datasourceService.getDatasourceByVisitorId(visitorId)\n\t\t\t\t.flatMap(visitorDatasource -> {\n\t\t\t\t\tif (isNull(visitorDatasource)) {\n\t\t\t\t\t\treturn datasourceService.createDatasource(visitorId, DatasourceCreationSource.API);\n\t\t\t\t\t}\n\t\t\t\t\treturn Mono.just(visitorDatasource.getId());\n\t\t\t\t});\n\t\t});\n}", "CodeBleu_score": 52.92246680324006}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t\treturn Mono.just(user)\n\t\t\t.flatMap(u -> {\n\t\t\t\tif (u.getAvatar() == null) {\n\t\t\t\t\treturn Mono.just(u);\n\t\t\t\t}\n\t\t\t\treturn assetService.deleteAsset(u.getAvatar());\n\t\t\t})\n\t\t\t.flatMap(u -> {\n\t\t\t\tif (filePart == null) {\n\t\t\t\t\treturn Mono.just(u);\n\t\t\t\t}\n\t\t\t\treturn assetService.uploadAsset(filePart.content())\n\t\t\t\t\t\t.flatMap(asset -> {\n\t\t\t\t\t\t\tu.setAvatar(asset);\n\t\t\t\t\t\t\treturn userRepository.save(u);\n\t\t\t\t\t\t});\n\t\t\t});\n}", "CodeBleu_score": 24.61571039119504}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t\treturn Mono.just(true);\n}", "CodeBleu_score": 6.609969039521932}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t\treturn Mono.just(user)\n\t\t.flatMap(u -> {\n\t\t\tif (u.getProfile().getPhoto()!= null) {\n\t\t\t\treturn Mono.just(u)\n\t\t\t\t\t.flatMap(user1 -> {\n\t\t\t\t\t\treturn this.assetService.deleteAsset(user1.getProfile().getPhoto())\n\t\t\t\t\t\t\t.then(Mono.just(user1));\n\t\t\t\t\t})\n\t\t\t\t\t.flatMap(user2 -> {\n\t\t\t\t\t\treturn this.assetService.saveAsset(filePart)\n\t\t\t\t\t\t\t.map(asset -> {\n\t\t\t\t\t\t\t\tuser2.getProfile().setPhoto(asset);\n\t\t\t\t\t\t\t\treturn user2;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn Mono.just(u)\n\t\t\t\t\t.flatMap(user1 -> {\n\t\t\t\t\t\treturn this.assetService.saveAsset(filePart)\n\t\t\t\t\t\t\t.map(asset -> {\n\t\t\t\t\t\t\t\tuser1.getProfile().setPhoto(asset);\n\t\t\t\t\t\t\t\treturn user1;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t}\n\t\t})\n\t\t.flatMap(this.userRepository::save)\n\t\t.map(user -> true);\n}", "CodeBleu_score": 24.541799319830286}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t\treturn Mono.just(authUser)\n\t\t\t.map(au -> new User(au.getAuthSource(), au.getAuthUserId(), au.getAuthUserName(), UserState.NEW, false, null, null, null, null, null, null, null, null, null, null))\n\t\t\t.flatMap(user -> {\n\t\t\t\tif (StringUtils.isNotBlank(authUser.getPassword())) {\n\t\t\t\t\treturn EncryptionService.encrypt(authUser.getPassword())\n\t\t\t\t\t\t\t.map(encryptedPassword -> user.setPassword(encryptedPassword));\n\t\t\t\t}\n\t\t\t\treturn Mono.just(user);\n\t\t\t})\n\t\t\t.flatMap(user -> {\n\t\t\t\tif (StringUtils.isNotBlank(authUser.getAvatarLink())) {\n\t\t\t\t\treturn Mono.just(user.setAvatarLink(authUser.getAvatarLink()));\n\t\t\t\t}\n\t\t\t\treturn Mono.just(user);\n\t\t\t})\n\t\t\t.flatMap(user -> {\n\t\t\t\tif (StringUtils.isNotBlank(authUser.getFirstName())) {\n\t\t\t\t\treturn Mono.just(user.setFirstName(authUser.getFirstName()));\n\t\t\t\t}\n\t\t\t\treturn Mono.just(user);\n\t\t\t})\n\t\t\t.flatMap(user -> {\n\t\t\t\tif (StringUtils.isNotBlank(authUser.getLastName())) {\n\t\t\t\t\treturn Mono.just(user.setLastName(authUser.getLastName()));\n\t\t\t\t}\n\t\t\t\treturn Mono.just(user);\n\t\t\t})\n\t\t\t.flatMap(user -> {\n\t\t\t\tif (StringUtils.isNotBlank(authUser.getDisplayName())) {\n\t\t\t\t\treturn Mono.just(user.setDisplayName(authUser.getDisplayName()));\n\t\t\t\t}\n\t\t\t\treturn Mono.just(user);\n\t\t\t})\n\t\t\t.flatMap(user -> {\n\t\t\t\tif (StringUtils.isNotBlank(authUser.getEmail())) {\n\t\t\t\t\treturn Mono.just(user.setEmail(authUser.getEmail()));\n\t\t\t\t}\n\t\t\t\treturn Mono.just(user);\n\t\t\t})\n\t\t\t.flatMap(user -> {\n\t\t\t\tif (StringUtils.isNotBlank(authUser.getPhone())) {\n\t\t\t\t\treturn Mono.just(user.setPhone(authUser.getPhone()));\n\t\t\t\t}\n\t\t\t\treturn Mono.just(user);\n\t\t\t})\n\t\t\t.flatMap(user -> {\n\t\t\t\tif (StringUtils.isNotBlank(authUser.getLanguage())) {\n\t\t\t\t\treturn Mono.just(user.setLanguage(authUser.getLanguage()));\n\t\t\t\t}\n\t\t\t", "CodeBleu_score": 39.0720168176142}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t\treturn createNewUserByAuthUser(authUser, null);\n}", "CodeBleu_score": 4.426370473688131}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t\treturn createNewUserByAuthUser(authUser, false);\n}", "CodeBleu_score": 4.4263912655505315}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\treturn bindEmail(user, email, null);\n}", "CodeBleu_score": 6.966588071734925}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\treturn Mono.just(user)\n\t\t\t.flatMap(u -> {\n\t\t\t\tif (StringUtils.isBlank(email)) {\n\t\t\t\t\treturn Mono.error(ofError(BizError.EMAIL_REQUIRED));\n\t\t\t\t}\n\t\t\t\tif (user.getConnections().stream().anyMatch(c -> c.getAuthSource().equals(AuthSourceConstants.EMAIL))) {\n\t\t\t\t\treturn Mono.error(ofError(BizError.EMAIL_ALREADY_BOUND));\n\t\t\t\t}\n\t\t\t\treturn userRepository.save(user);\n\t\t\t})\n\t\t\t.then(Mono.just(true));\n}", "CodeBleu_score": 27.86995607397123}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\treturn Mono.just(user)\n\t\t.flatMap(u -> Mono.just(u.getConnections())\n\t\t\t.map(c -> new HashSet<>(c))\n\t\t\t.flatMap(cc -> Mono.just(cc)\n\t\t\t\t.map(c -> c.add(new Connection(AuthSourceConstants.EMAIL, email)))\n\t\t\t\t.map(c -> new HashSet<>(c))\n\t\t\t\t.map(c -> user.setConnections(c))\n\t\t\t\t.flatMap(u -> userRepository.save(u))\n\t\t\t\t.then(Mono.just(true))\n\t\t\t)\n\t\t);\n}", "CodeBleu_score": 24.231492740899583}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t\treturn userRepository.findById(userId)\n\t\t\t.flatMap(user -> authenticationService.validatePassword(user, oldPassword))\n\t\t\t.flatMap(isValid -> {\n\t\t\t\tif (isValid) {\n\t\t\t\t\tString encryptedNewPassword = encryptionService.encrypt(newPassword);\n\t\t\t\t\treturn userRepository.update(userId,\n\t\t\t\t\t\t\tMap.of(FieldName.PASSWORD, encryptedNewPassword));\n\t\t\t\t}\n\t\t\t\treturn Mono.just(false);\n\t\t\t});\n}", "CodeBleu_score": 22.667515405511395}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t\treturn Mono.just(userId)\n\t\t.flatMap(id -> getUser(id))\n\t\t.flatMap(user -> checkPassword(user, oldPassword))\n\t\t.flatMap(isPasswordValid -> {\n\t\t\tif (!isPasswordValid) {\n\t\t\t\treturn Mono.error(ofError(BizError.PASSWORD_NOT_MATCH));\n\t\t\t}\n\n\t\t\treturn updatePassword(userId, newPassword);\n\t\t});\n}", "CodeBleu_score": 18.11034841342022}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t\treturn Mono.just(userId)\n\t\t\t.flatMap(id -> findUserById(id))\n\t\t\t.flatMap(user -> validatePassword(user, oldPassword))\n\t\t\t.flatMap(valid -> {\n\t\t\t\tif (valid) {\n\t\t\t\t\treturn encryptPassword(newPassword)\n\t\t\t\t\t\t\t.flatMap(encrypted -> updateUserPassword(userId, encrypted));\n\t\t\t\t} else {\n\t\t\t\t\treturn Mono.error(ofError(BizError.PASSWORD_MISMATCH));\n\t\t\t\t}\n\t\t\t});\n}", "CodeBleu_score": 18.719401660125534}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t\treturn this.groupService.findGroupsByMember(orgMember.getMemberId())\n\t\t\t.filter(group -> group.getWorkspaceMode() == WorkspaceMode.ORG)\n\t\t\t.filter(group ->!group.isDynamic())\n\t\t\t.filter(group ->!withoutDynamicGroups ||!group.isDynamic())\n\t\t\t.filter(group ->!group.isAllUsers())\n\t\t\t.map(group -> {\n\t\t\t\tMap<String, String> groupMap = new HashMap<>();\n\t\t\t\tgroupMap.put(FieldName.GROUP_ID, group.getGroupId());\n\t\t\t\tgroupMap.put(FieldName.GROUP_NAME, group.getGroupName(locale));\n\t\t\t\treturn groupMap;\n\t\t\t}).collect(Collectors.toList());\n}", "CodeBleu_score": 27.7865909761165}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t\treturn Mono.just(orgMember.getGroups())\n           .filter(Collection::isEmpty)\n           .switchIfEmpty(Mono.just(orgMember.getGroups()))\n           .map(groups -> groups.stream()\n                   .filter(group ->!group.isDynamic() ||!withoutDynamicGroups)\n                   .filter(group ->!group.isAllUsers())\n                   .map(group -> Map.of(FieldName.GROUP_ID, group.getId(), FieldName.GROUP_NAME, group.getName(locale)))\n                   .collect(Collectors.toList()))\n           .doOnError(e -> log.error(\"Error building user detail groups\", e));\n}", "CodeBleu_score": 29.00151081414179}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t\treturn this.groupService.listUserGroups(userId, orgMember, withoutDynamicGroups)\n           .map(group -> {\n                Map<String, String> groupMap = new HashMap<>();\n                groupMap.put(\"id\", group.getId());\n                groupMap.put(\"name\", group.getName(locale));\n                return groupMap;\n            })\n           .collect(Collectors.toList());\n}", "CodeBleu_score": 24.625483766276965}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\treturn userStatusRepository.findOne(userId).flatMap(userStatus -> {\n\t\tif (userStatus == null) {\n\t\t\treturn Mono.just(false);\n\t\t}\n\t\tuserStatus.setHasShowNewUserGuidance(true);\n\t\treturn userStatusRepository.save(userStatus).flatMap(savedUserStatus -> {\n\t\t\tif (savedUserStatus == null) {\n\t\t\t\treturn Mono.just(false);\n\t\t\t}\n\t\t\treturn Mono.just(true);\n\t\t});\n\t});\n}", "CodeBleu_score": 22.96713058058199}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\treturn this.userStatusRepository.findById(userId)\n\t\t.switchIfEmpty(Mono.just(new UserStatus(userId, false)))\n\t\t.map(userStatus -> {\n\t\t\tuserStatus.setHasShowNewUserGuidance(true);\n\t\t\treturn userStatus;\n\t\t})\n\t\t.flatMap(userStatus -> this.mongoUpsertHelper.upsert(userStatus, UserStatus.class, \"userId\"));\n}", "CodeBleu_score": 24.076852507706384}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\treturn Mono.defer(() -> {\n\t\tUserStatus userStatus = new UserStatus(userId, UserStatusType.NEW_USER_GUIDANCE_SHOWN);\n\t\treturn mongoUpsertHelper.upsert(userStatus, UserStatus.class);\n\t});\n}", "CodeBleu_score": 32.934446575655365}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\tif c.partitionManager == nil {\n\t\tpanic(\"partitionManager cannot be nil\")\n\t}\n\tif c.valueManager == nil {\n\t\tpanic(\"valueManager cannot be nil\")\n\t}\n\n\tvar wg sync.WaitGroup\n\tvar runGroup rungroup.Group\n\n\tfor _, p := range c.partitionManager.Partitions() {\n\t\tif predicatePartition(p.Name(), p) {\n\t\t\trunGroup.Add(1)\n\t\t\tgo func(p PartitionManager) {\n\t\t\t\tdefer runGroup.Done()\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t}(p)\n\t\t}\n\t}\n\n\trunGroup.Wait()\n}", "CodeBleu_score": 39.10280931803624}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition is nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue is nil\")\n\t}\n\n\tc.lock.Lock()\n\tdefer c.lock.Unlock()\n\n\t// Create a run group to handle clearing entries concurrently.\n\tvar wg sync.WaitGroup\n\trunGroup := rungroup.New(&wg)\n\n\t// For each partition, enqueue a task to clear matching entries.\n\tfor k, p := range c.partitions {\n\t\tif predicatePartition(k, p) {\n\t\t\trunGroup.Add(1)\n\t\t\tgo func(k string, p PartitionManager) {\n\t\t\t\tdefer runGroup.Done()\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t}(k, p)\n\t\t}\n\t}\n\n\t// Wait for all tasks to complete.\n\trunGroup.Wait()\n}", "CodeBleu_score": 43.804836934829325}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition is nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue is nil\")\n\t}\n\n\tvar wg sync.WaitGroup\n\trungroup.RunGroup(&wg, func(ctx context.Context) error {\n\t\tc.partitions.Range(func(k, v any) bool {\n\t\t\tp := v.(PartitionManager)\n\t\t\tif predicatePartition(k, p) {\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t}\n\t\t\treturn true\n\t\t})\n\t\treturn nil\n\t})\n\twg.Wait()\n}", "CodeBleu_score": 39.40384218748067}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif maxItemsTotal <= 0 || totalWeightQuantity <= 0 || numPartitions <= 0 {\n\t\treturn 0\n\t}\n\n\taverageWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\n\treturn int(math.Ceil(averageWeightPerPartition))\n}", "CodeBleu_score": 40.00227858186097}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\taverageWeightPerPartition := totalWeightQuantity / numPartitions\n\tmaxItemsPerPartition := int(math.Floor(float64(maxItemsTotal) / float64(averageWeightPerPartition)))\n\treturn maxItemsPerPartition\n}", "CodeBleu_score": 42.213079391849746}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\taverageWeightPerPartition := totalWeightQuantity / numPartitions\n\treturn int(math.Ceil(float64(maxItemsTotal) / float64(averageWeightPerPartition)))\n}", "CodeBleu_score": 40.61966621192779}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> map = new HashMap<>();\n\tConnectionMetadata connectionMetadata = connectionFactory.getMetadata();\n\tif (connectionMetadata!= null) {\n\t\tmap.put(\"product\", connectionMetadata.getProductName());\n\t\tmap.put(\"version\", connectionMetadata.getProductVersion());\n\t}\n\treturn map;\n}", "CodeBleu_score": 43.899932764432805}, {"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> map = new HashMap<>();\n\tConnectionMetadata metadata = ConnectionFactory.get().getMetadata();\n\tif (metadata!= null) {\n\t\tmap.put(\"databaseProductName\", metadata.getDatabaseProductName());\n\t\tmap.put(\"databaseProductVersion\", metadata.getDatabaseProductVersion());\n\t}\n\treturn map;\n}", "CodeBleu_score": 47.894096145855556}, {"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> map = new HashMap<>();\n\tMono<ConnectionMetadata> metadata = Mono.just(ConnectionFactory.class).flatMap(connectionFactory -> ((ConnectionFactory) connectionFactory).getMetadata());\n\tmetadata.subscribe(connectionMetadata -> {\n\t\tif (Objects.nonNull(connectionMetadata)) {\n\t\t\tmap.put(\"product\", connectionMetadata.getDatabaseProductName());\n\t\t\tmap.put(\"version\", connectionMetadata.getDatabaseProductVersion());\n\t\t}\n\t});\n\treturn map;\n}", "CodeBleu_score": 47.849718832303125}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\t// If the user settings are null, it disables registration and email verification on registration in the GlobalInfo object.\n\tif (configMap == null) {\n\t\tinfo.setRegistrationEnabled(false);\n\t\tinfo.setEmailVerificationEnabled(false);\n\t\treturn;\n\t}\n\t// If the user settings are not null, it updates the GlobalInfo object with the retrieved settings for registration and email verification.\n\tinfo.setRegistrationEnabled(configMap.getBoolean(\"registration.enabled\"));\n\tinfo.setEmailVerificationEnabled(configMap.getBoolean(\"email.verification.enabled\"));\n}", "CodeBleu_score": 24.45478692451124}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tif (configMap == null) {\n\t\tinfo.setRegistrationEnabled(false);\n\t\tinfo.setEmailVerificationEnabled(false);\n\t\treturn;\n\t}\n\tinfo.setRegistrationEnabled(configMap.getBoolean(\"registration.enabled\", false));\n\tinfo.setEmailVerificationEnabled(configMap.getBoolean(\"emailVerification.enabled\", false));\n}", "CodeBleu_score": 24.825100010684448}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tif (configMap == null) {\n\t\treturn;\n\t}\n\tinfo.setRegistrationEnabled(configMap.getOrDefault(REGISTRATION_ENABLED, false));\n\tinfo.setEmailVerificationEnabled(configMap.getOrDefault(EMAIL_VERIFICATION_ENABLED, false));\n\tinfo.setRegistrationEmailVerificationEnabled(configMap.getOrDefault(REGISTRATION_EMAIL_VERIFICATION_ENABLED, false));\n\tinfo.setRegistrationEmailVerificationRequired(configMap.getOrDefault(REGISTRATION_EMAIL_VERIFICATION_REQUIRED, false));\n\tinfo.setRegistrationEmailVerificationRequired(configMap.getOrDefault(REGISTRATION_EMAIL_VERIFICATION_REQUIRED, false));\n\tinfo.setRegistrationEmailVerificationRequired(configMap.getOrDefault(REGISTRATION_EMAIL_VERIFICATION_REQUIRED, false));\n\tinfo.setRegistrationEmailVerificationRequired(configMap.getOrDefault(REGISTRATION_EMAIL_VERIFICATION_REQUIRED, false));\n\tinfo.setRegistrationEmailVerificationRequired(configMap.getOrDefault(REGISTRATION_EMAIL_VERIFICATION_REQUIRED, false));\n\tinfo.setRegistrationEmailVerificationRequired(configMap.getOrDefault(REGISTRATION_EMAIL_VERIFICATION_REQUIRED, false));\n\tinfo.setRegistrationEmailVerificationRequired(configMap.getOrDefault(REGISTRATION_EMAIL_VERIFICATION_REQUIRED, false));\n\tinfo.setRegistrationEmailVerificationRequired(configMap.getOrDefault(REGISTRATION_EMAIL_VERIFICATION_REQUIRED, false));\n\tinfo.setRegistrationEmailVerificationRequired(configMap.getOrDefault(REGISTRATION_EMAIL_VERIFICATION_REQUIRED, false));\n\tinfo.setRegistrationEmailVerificationRequired(configMap.getOrDefault(REGISTRATION_EMAIL_VERIFICATION_REQUIRED, false));\n\tinfo.setRegistrationEmailVerificationRequired(configMap.getOrDefault(REGISTRATION_EMAIL_VERIFICATION_REQUIRED, false));\n\tinfo.setRegistrationEmailVerificationRequired(configMap.getOrDefault(REGISTRATION_EMAIL_VERIFICATION_REQUIRED, false));\n\tinfo.setRegistrationEmailVerificationRequired(configMap.getOrDefault(REGISTRATION_EMAIL_VERIFICATION_REQUIRED, false));\n\tinfo.setRegistrationEmailVerificationRequired(configMap.getOrDefault(REGISTRATION_EMAIL_VERIFICATION_REQUIRED, false));\n\tinfo.setRegistrationEmailVerificationRequired(configMap.getOrDefault(REGISTRATION_EMAIL_VERIFICATION_REQUIRED, false));\n\tinfo", "CodeBleu_score": 16.71064208419567}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\t\tThreadGroup group = new ThreadGroup(\"restart\");\n\tThread thread = new Thread(group, () -> {\n\t\ttry {\n\t\t\tThread.sleep(500);\n\t\t}\n\t\tcatch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\ttry {\n\t\t\tnew Application().restart();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t});\n\tthread.setDaemon(false);\n\tthread.setContextClassLoader(Application.class.getClassLoader());\n\tthread.start();\n\treturn \"Restart initiated\";\n}", "CodeBleu_score": 52.51329429278984}, {"code": "public Object restart(){\n\t\tThreadGroup group = new ThreadGroup(\"restart\");\n\tThread thread = new Thread(group, () -> {\n\t\ttry {\n\t\t\tThread.sleep(1000);\n\t\t\tlog.info(\"Restarting application...\");\n\t\t\tSpringApplication.run(Application.class, new String[0]);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tlog.error(\"Failed to restart application\", e);\n\t\t}\n\t});\n\tthread.setContextClassLoader(Application.class.getClassLoader());\n\tthread.setDaemon(true);\n\tthread.start();\n\treturn \"Restarting application...\";\n}", "CodeBleu_score": 45.3486569824105}, {"code": "public Object restart(){\n\t\tfinal ThreadGroup threadGroup = new ThreadGroup(\"restart\");\n\tfinal Thread thread = new Thread(threadGroup, new Runnable() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tSystem.setProperty(\"spring.devtools.restart.enabled\", \"false\");\n\t\t\t\tSystem.setProperty(\"spring.devtools.restart.exclude\", \".*\");\n\t\t\t\tSystem.setProperty(\"spring.devtools.restart.additional-exclude\", \".*\");\n\t\t\t\tSystem.setProperty(\"spring.devtools.restart.additional-include\", \".*\");\n\t\t\t\tSystem.setProperty(\"spring.devtools.restart.additional-exclude-patterns\", \".*\");\n\t\t\t\tSystem.setProperty(\"spring.devtools.restart.additional-include-patterns\", \".*\");\n\t\t\t\tSystem.setProperty(\"spring.devtools.restart.additional-exclude-patterns-file\", \".*\");\n\t\t\t\tSystem.setProperty(\"spring.devtools.restart.additional-include-patterns-file\", \".*\");\n\t\t\t\tSystem.setProperty(\"spring.devtools.restart.exclude-patterns-file\", \".*\");\n\t\t\t\tSystem.setProperty(\"spring.devtools.restart.include-patterns-file\", \".*\");\n\t\t\t\tSystem.setProperty(\"spring.devtools.restart.exclude-patterns\", \".*\");\n\t\t\t\tSystem.setProperty(\"spring.devtools.restart.include-patterns\", \".*\");\n\t\t\t\tSystem.setProperty(\"spring.devtools.restart.exclude-patterns-file\", \".*\");\n\t\t\t\tSystem.setProperty(\"spring.devtools.restart.include-patterns-file\", \".*\");\n\t\t\t\tSystem.setProperty(\"spring.devtools.restart.exclude-patterns\", \".*\");\n\t\t\t\tSystem.setProperty(\"spring.devtools.restart.include-patterns\", \".*\");\n\t\t\t\tSystem.setProperty(\"spring.devtools.restart.exclude-patterns-file\", \".*\");\n\t\t\t\tSystem.setProperty(\"spring.devtools.restart.include-patterns-file\", \".*\");\n\t\t\t\tSystem.setProperty(\"spring.devtools.restart.exclude-patterns\", \".*\");\n\t\t\t\tSystem.setProperty(\"spring.devtools.restart.include-patterns\", \".*\");\n\t\t\t\tSystem.setProperty(\"spring.devtools.restart.exclude-patterns-file\", \".*\");\n\t\t\t\tSystem.setProperty(\"spring.devtools.restart.include-patterns-file\", \".*\");\n\t\t\t\tSystem.setProperty(\"spring.devtools.restart.exclude-patterns\", \".*\");\n\t\t\t\tSystem.setProperty(\"spring", "CodeBleu_score": 25.78728755031005}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t\tconfigurer.defaultCodecs().jackson2JsonEncoder(this.objectMapper);\n\tconfigurer.defaultCodecs().jackson2JsonDecoder(this.objectMapper);\n }", "CodeBleu_score": 44.289950809976865}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t\tconfigurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(new ObjectMapper()));\n\tconfigurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(new ObjectMapper()));\n}", "CodeBleu_score": 44.35357949327503}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t\tconfigurer.defaultCodecs().jackson2JsonEncoder(this.objectMapper);\n\tconfigurer.defaultCodecs().jackson2JsonDecoder(this.objectMapper);\n}", "CodeBleu_score": 44.22610108169189}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t\treturn route(path(\"/console/**\").and(method(HttpMethod.GET)).and(WebSocketRequestPredicate.not()),\n\t\t\trequest -> ServerResponse.ok().contentType(MediaType.TEXT_HTML).body(BodyInserters.fromResource(ResourceUtils.getFile(\"classpath:static/console/index.html\"))));\n}", "CodeBleu_score": 25.36426977113485}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t\treturn route(path(\"/console/**\").and(accept(MediaType.TEXT_HTML)),\n\t\trequest -> ServerResponse.ok().contentType(MediaType.TEXT_HTML)\n\t\t\t.body(BodyInserters.fromResource(new PathResourceResolver(), ResourceUtils.getURL(\"classpath:static/console/index.html\"))));\n}", "CodeBleu_score": 24.264905140851194}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t\treturn route(path(\"/console/**\").and(accept(MediaType.TEXT_HTML)).and(not(WebSocketRequestPredicate.INSTANCE)),\n\t\trequest -> ServerResponse.temporaryRedirect(URI.create(\"/console\")).build());\n}", "CodeBleu_score": 21.058462668913986}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t\treturn route(method(HttpMethod.GET), \"/uc/**\").and(accept(MediaType.TEXT_HTML)).and(WebSocketRequestPredicate.not()).filter(AdditionalWebFilterChainProxy.UC_INDEX_REDIRECT_FILTER).and(path(\"/uc/**\")).handle((request) -> {\n\t\tString ucLocation = HaloProperties.getUcLocation();\n\t\tString ucIndexLocation = ucLocation + \"/index.html\";\n\t\treturn ServerResponse.ok().contentType(MediaType.TEXT_HTML).body(BodyInserters.fromResource(ResourceUtils.get(ucIndexLocation)));\n\t});\n}", "CodeBleu_score": 28.169588618386683}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t\treturn route(method(HttpMethod.GET), \"/uc/**\").and(accept(MediaType.TEXT_HTML)).and(not(WebSocketRequestPredicate.WEB_SOCKET_REQUEST_PREDICATE)).filter(AdditionalWebFilterChainProxy.FILTER_NAME).render(BodyInserters.fromObject(Index.class).with(new IndexViewResolver()));\n}", "CodeBleu_score": 21.630698762511564}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t\treturn route(method(HttpMethod.GET), \"/uc/**\")\n\t\t.and(path(\"/uc/assets/**\").negate())\n\t\t.and(accept(MediaType.TEXT_HTML))\n\t\t.and(WebSocketRequestPredicate.not())\n\t\t.and(path(\"/uc/assets/**\").negate())\n\t\t.and(accept(MediaType.TEXT_HTML))\n\t\t.and(WebSocketRequestPredicate.not())\n\t\t.and(path(\"/uc/assets/**\").negate())\n\t\t.and(accept(MediaType.TEXT_HTML))\n\t\t.and(WebSocketRequestPredicate.not())\n\t\t.and(path(\"/uc/assets/**\").negate())\n\t\t.and(accept(MediaType.TEXT_HTML))\n\t\t.and(WebSocketRequestPredicate.not())\n\t\t.and(path(\"/uc/assets/**\").negate())\n\t\t.and(accept(MediaType.TEXT_HTML))\n\t\t.and(WebSocketRequestPredicate.not())\n\t\t.and(path(\"/uc/assets/**\").negate())\n\t\t.and(accept(MediaType.TEXT_HTML))\n\t\t.and(WebSocketRequestPredicate.not())\n\t\t.and(path(\"/uc/assets/**\").negate())\n\t\t.and(accept(MediaType.TEXT_HTML))\n\t\t.and(WebSocketRequestPredicate.not())\n\t\t.and(path(\"/uc/assets/**\").negate())\n\t\t.and(accept(MediaType.TEXT_HTML))\n\t\t.and(WebSocketRequestPredicate.not())\n\t\t.and(path(\"/uc/assets/**\").negate())\n\t\t.and(accept(MediaType.TEXT_HTML))\n\t\t.and(WebSocketRequestPredicate.not())\n\t\t.and(path(\"/uc/assets/**\").negate())\n\t\t.and(accept(MediaType.TEXT_HTML))\n\t\t.and(WebSocketRequestPredicate.not())\n\t\t.and(path(\"/uc/assets/**\").negate())\n\t\t.and(accept(MediaType.TEXT_HTML))\n\t\t.and(WebSocketRequestPredicate.not())\n\t\t.and(path(\"/uc/assets/**\").negate())\n\t\t.and(accept(MediaType.TEXT_HTML))\n\t\t.and(WebSocketRequestPredicate.not())\n\t\t.and(path(\"/uc/assets/**\").negate())\n\t\t.and(accept(MediaType.TEXT_HTML))\n\t\t", "CodeBleu_score": 21.381012733858416}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\tpublic static final String REACTIVE_SESSION_REPOSITORY_BEAN_NAME = \"reactiveSessionRepository\";\n\n\t@Bean(name = REACTIVE_SESSION_REPOSITORY_BEAN_NAME)\n\tpublic ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository(\n\t\t\tObjectProvider<SessionProperties> sessionProperties,\n\t\t\tObjectProvider<ServerProperties> serverProperties) {\n\t\tSessionProperties sessionProperties1 = sessionProperties.getIfAvailable();\n\t\tServerProperties serverProperties1 = serverProperties.getIfAvailable();\n\t\tif (sessionProperties1 == null) {\n\t\t\tsessionProperties1 = new SessionProperties();\n\t\t}\n\t\tif (serverProperties1 == null) {\n\t\t\tserverProperties1 = new ServerProperties();\n\t\t}\n\t\treturn new InMemoryReactiveIndexedSessionRepository<>(new ConcurrentHashMap<>(),\n\t\t\t\tsessionProperties1.getMaxInactiveIntervalInSeconds(),\n\t\t\t\tserverProperties1.getServlet().getMultipartConfig().getMaxFileSize());\n\t}\n}", "CodeBleu_score": 29.54798385008932}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\t@Bean\n\tpublic ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository() {\n\t\treturn new InMemoryReactiveIndexedSessionRepository<>(new ConcurrentHashMap<>(), sessionProperties().getSessionTimeout());\n\t}\n}", "CodeBleu_score": 20.10989420053209}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\tpublic static final String SESSION_ID_HEADER = \"X-Session-Id\";\n\tpublic static final String SESSION_ID_PARAM = \"sessionId\";\n\tpublic static final String SESSION_ID_QUERY = \"sessionId\";\n\tpublic static final String SESSION_ID_COOKIE = \"JSESSIONID\";\n\tpublic static final String SESSION_ID_PATH = \"/\";\n\tpublic static final String SESSION_ID_PATH_PARAM = \"/{sessionId}\";\n\tpublic static final String SESSION_ID_PATH_QUERY = \"?sessionId={sessionId}\";\n\tpublic static final String SESSION_ID_PATH_HEADER = \"X-Session-Id\";\n\tpublic static final String SESSION_ID_PATH_QUERY_HEADER = \"X-Session-Id\";\n\tpublic static final String SESSION_ID_PATH_QUERY_PARAM = \"sessionId\";\n\tpublic static final String SESSION_ID_PATH_QUERY_PARAM_HEADER = \"X-Session-Id\";\n\tpublic static final String SESSION_ID_PATH_QUERY_PARAM_COOKIE = \"JSESSIONID\";\n\tpublic static final String SESSION_ID_PATH_QUERY_PARAM_HEADER_COOKIE = \"X-Session-Id\";\n\tpublic static final String SESSION_ID_PATH_QUERY_PARAM_COOKIE_HEADER = \"JSESSIONID\";\n\tpublic static final String SESSION_ID_PATH_QUERY_PARAM_COOKIE_HEADER_COOKIE = \"X-Session-Id\";\n\tpublic static final String SESSION_ID_PATH_QUERY_PARAM_HEADER_COOKIE_HEADER = \"X-Session-Id\";\n\tpublic static final String SESSION_ID_PATH_QUERY_PARAM_HEADER_COOKIE_HEADER_COOKIE = \"JSESSIONID\";\n\tpublic static final String SESSION_ID_PATH_QUERY_PARAM_HEADER_COOKIE_HEADER_COOKIE_HEADER = \"X-Session-Id\";\n\n\tpublic static final String SESSION_ID_PATH_QUERY_PARAM_HEADER_COOKIE_HEADER_COOKIE_HEADER_COOKIE = \"JSESSIONID\";\n\tpublic static final String SESSION_ID_PATH_QUERY_PARAM_HEADER_COOKIE_HEADER_COOKIE_HEADER_COOKIE_HEADER = \"X-Session-Id\";\n\tpublic static final String SESSION_ID_PATH_QUERY_PARAM_HEADER_COOKIE_HEADER_COOKIE_HEADER_COOKIE_HEADER_COOKIE = \"JSESSIONID\";\n\tpublic static final String", "CodeBleu_score": 8.458978477190323}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\treturn new DefaultUserDetailService(userService, roleService, haloProperties);\n}", "CodeBleu_score": 13.733270766072927}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\treturn new DefaultUserDetailService(userService, roleService, haloProperties);\n}", "CodeBleu_score": 13.733270766072927}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\tDefaultUserDetailService service = new DefaultUserDetailService(userService, roleService);\n\tservice.setEnableTwoFactorAuthentication(haloProperties.getSecurity().getTwoFactor().isEnabled());\n\tservice.setEnablePatAuthentication(haloProperties.getSecurity().getPat().isEnabled());\n\treturn service;\n}", "CodeBleu_score": 48.1339763512984}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\t\tAssert.notNull(this.email, \"Email must not be null\");\n\tAssert.notNull(this.displayName, \"DisplayName must not be null\");\n\tMap<String, String> annotations = new LinkedHashMap<>();\n\tif (StringUtils.isNotBlank(this.avatar)) {\n\t\tannotations.put(\"avatar\", this.avatar);\n\t}\n\tif (StringUtils.isNotBlank(this.website)) {\n\t\tannotations.put(\"website\", this.website);\n\t}\n\treturn new Comment.CommentOwner(this.email, this.displayName, annotations);\n}", "CodeBleu_score": 36.59141734291078}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t\tAssert.notNull(this, \"Cannot convert null to CommentOwner\");\n\tAssert.isTrue(StringUtils.isNotBlank(this.email), \"Cannot convert CommentOwner with null or empty email to CommentOwner\");\n\tAssert.isTrue(StringUtils.isNotBlank(this.displayName), \"Cannot convert CommentOwner with null or empty displayName to CommentOwner\");\n\tComment.CommentOwner commentOwner = new Comment.CommentOwner();\n\tcommentOwner.setKind(\"email\");\n\tcommentOwner.setEmail(this.email);\n\tcommentOwner.setDisplayName(this.displayName);\n\tcommentOwner.setAvatar(this.avatar);\n\tcommentOwner.setWebsite(this.website);\n\tcommentOwner.setAnnotations(this.annotations);\n\treturn commentOwner;\n}", "CodeBleu_score": 32.76508533735215}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t\tMap<String, Object> map = new LinkedHashMap<String, Object>();\n\tmap.put(\"kind\", \"email\");\n\tif (this.email!= null) {\n\t\tmap.put(\"email\", this.email);\n\t} else {\n\t\tmap.put(\"email\", \"\");\n\t}\n\tmap.put(\"displayName\", this.displayName);\n\tif (this.avatar!= null) {\n\t\tmap.put(\"avatar\", this.avatar);\n\t} else {\n\t\tmap.put(\"avatar\", \"\");\n\t}\n\tif (this.website!= null) {\n\t\tmap.put(\"website\", this.website);\n\t} else {\n\t\tmap.put(\"website\", \"\");\n\t}\n\treturn new Comment.CommentOwner(map);\n}", "CodeBleu_score": 20.972924426261088}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (commentOwner.getKind().equals(Comment.CommentOwner.Kind.EMAIL)) {\n\t\tUser user = ExtensionClient.getInstance().get(new GroupVersionKind(User.GROUP, User.VERSION, User.KIND), commentOwner.getName()).orElse(null);\n\t\tif (user == null) {\n\t\t\treturn false;\n\t\t}\n\t\treturn user.getEmail().equals(commentOwner.getEmail());\n\t}\n\treturn commentOwner.getName().equals(post.getOwner().getName());\n}", "CodeBleu_score": 42.20807654574222}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (commentOwner.getKind().equals(Comment.CommentOwner.Kind.EMAIL)) {\n\t\tString email = commentOwner.getName();\n\t\tUser user = ExtensionClient.getInstance().get(new Ref(User.class, email));\n\t\treturn user!= null && user.getEmail().equals(email);\n\t} else {\n\t\treturn commentOwner.getName().equals(post.getOwner().getName());\n\t}\n}", "CodeBleu_score": 47.81530766397943}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tAssert.notNull(post, \"Post cannot be null.\");\n\tAssert.notNull(commentOwner, \"Comment owner cannot be null.\");\n\n\tif (commentOwner.getKind().equals(Comment.CommentOwner.Kind.EMAIL)) {\n\t\tOptional<User> user = ExtensionClient.get().get(GroupVersionKind.USER, Ref.of(commentOwner.getName()));\n\t\tif (user.isPresent()) {\n\t\t\treturn user.get().getEmail().equals(post.getOwner().getEmail());\n\t\t}\n\t\treturn false;\n\t} else {\n\t\treturn commentOwner.getName().equals(post.getOwner().getName());\n\t}\n}", "CodeBleu_score": 39.60994893614703}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\t\treturn (ListOptions) (ListOptions listOptions) -> {\n\t\tlistOptions.setSort(SortResolver.resolve(listOptions.getSort()));\n\t\tlistOptions.setPageRequest(PageRequestImpl.of(listOptions.getPageRequest()));\n\t\tlistOptions.setQuery(getQuery(listOptions));\n\t\tlistOptions.setListOptions(listOptions);\n\t\treturn listOptions;\n\t};\n}", "CodeBleu_score": 11.095917640491297}, {"code": "public ListOptions toListOptions(){\n\t\treturn toListOptions(null);\n}", "CodeBleu_score": 1.204546282278492}, {"code": "public ListOptions toListOptions(){\n\t\treturn (request, listOptions) -> {\n\t\tif (listOptions.getSort() == null) {\n\t\t\tlistOptions.setSort(Sort.unsorted());\n\t\t}\n\t\treturn listOptions;\n\t};\n}", "CodeBleu_score": 5.373855448015749}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\tAssert.notNull(commentName, \"commentName cannot be null\");\n\treturn Mono.just(commentName)\n\t\t.flatMap(commentName -> extensionClient.getCounter(commentName).flatMap(counter -> Mono.just(new CommentStats(counter.getUpvotes()))))\n\t\t.switchIfEmpty(Mono.just(new CommentStats(0)));\n}", "CodeBleu_score": 43.00494973510618}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\treturn Extension.of(ReactiveExtensionClient.class)\n\t\t.getCounter(commentName)\n\t\t.map(counter -> CommentStats.of(counter.getUpvoteCount()));\n}", "CodeBleu_score": 32.98283973269516}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\treturn ReactiveExtensionClient.fetch(Comment.class, commentName).map(CommentStats::new);\n}", "CodeBleu_score": 23.87712760262708}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\t\tvar user = identity.getUser();\n\tvar subscriber = new Subscription.Subscriber(user);\n\tvar reason = new Subscription.Reason(NotificationReasonConst.REPLY, NotificationReasonConst.REPLY_CONDITION, user.getName());\n\tvar subscription = new Subscription(subscriber, reason);\n\tvar result = NotificationCenter.subscribe(subscription);\n\tif (result.isSuccess()) {\n\t\tlog.info(\"Subscribed to replies to {}\", user.getName());\n\t} else {\n\t\tlog.error(\"Failed to subscribe to replies to {}\", user.getName(), result.getError());\n\t}\n}", "CodeBleu_score": 36.474651380465396}, {"code": "void subscribeReply(UserIdentity identity){\n\t\tSubscription subscription = new Subscription(identity, NotificationReasonConst.REPLY_NOTIFICATION_REASON);\n\tsubscription.setCondition(Subscription.Condition.of(Comment.OWNER, identity.getName()));\n\tNotificationCenter.subscribe(subscription);\n}", "CodeBleu_score": 25.606171417005164}, {"code": "void subscribeReply(UserIdentity identity){\n\t\t// Create a subscriber from the given user identity.\n\tSubscription subscriber = NotificationCenter.createSubscriber(identity);\n\t// If the subscriber is not null, set up an interest reason for the subscription.\n\tif (subscriber!= null) {\n\t\tsubscriber.setInterestReason(NotificationReasonConst.REPLY_TO_YOU);\n\t}\n\t// Subscribe the user to the notification center and block until the subscription is completed.\n\tNotificationCenter.subscribe(identity);\n}", "CodeBleu_score": 23.632970764970796}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\t\treturn ReactiveExtensionClient.of(Comment.class)\n\t\t.update(comment)\n\t\t.retryWhen(Retry.backoff(5, Duration.ofSeconds(1))\n\t\t\t.filter(e -> e instanceof OptimisticLockingFailureException))\n\t\t.onErrorResume(e -> {\n\t\t\tif (e instanceof OptimisticLockingFailureException) {\n\t\t\t\treturn Mono.just(comment);\n\t\t\t}\n\t\t\treturn Mono.error(e);\n\t\t});\n}", "CodeBleu_score": 17.89211723699641}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t\treturn ReactiveExtensionClient.getCommentClient().update(comment.getId(), comment -> comment.setApproved(true).setApprovedAt(Instant.now())).retryWhen(Retry.backoff(10, Duration.ofSeconds(1)).filter(e -> e instanceof OptimisticLockingFailureException));\n}", "CodeBleu_score": 19.13237359240167}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t\treturn this.reactiveExtensionClient.update(comment, comment.getId(), Comment.class)\n\t\t.onErrorResume(OptimisticLockingFailureException.class, e -> {\n\t\t\tthis.logger.debug(\"Optimistic locking failure occurred when updating comment {}. Retrying...\", comment.getId());\n\t\t\treturn this.reactiveExtensionClient.update(comment, comment.getId(), Comment.class);\n\t\t});\n}", "CodeBleu_score": 27.23733992171389}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\tif ($action instanceof MountableAction) {\n\t\t$action->setComponent($this);\n\t}\n\n\tif ($action instanceof HasRecord) {\n\t\t$action->setRecord($this->record);\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 45.71195606489493}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\tif ($action instanceof MountableAction) {\n\t\t$action->setComponent($this);\n\t}\n\n\tif ($action instanceof HasRecord) {\n\t\t$action->setRecord($this->getRecord());\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 53.31128590059231}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\t$action->setModal(Modal::make($action->getModalTitle(), $action->getModalBody()));\n\tif ($action instanceof MountableAction && $action->getMountedComponent() instanceof HasRecord) {\n\t\t$action->setRecord($action->getMountedComponent()->getRecord());\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 51.92235036984274}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t\tif (is_app_url($this->successRedirectUrl)) {\n\t\t$this->successRedirectUrl = app(Redirector::class)->to($this->successRedirectUrl);\n\t}\n\n\treturn $this;\n}", "CodeBleu_score": 49.09700832918201}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t\t$redirect = $this->getSuccessRedirect();\n\n\tif (!empty($redirect)) {\n\t\t$this->redirect($redirect);\n\t}\n\n\treturn $this;\n}", "CodeBleu_score": 46.02262402927354}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t\tif ($this->successRedirectUrl) {\n\t\t$this->redirect(\n\t\t\t$this->successRedirectUrl,\n\t\t\t$this->successRedirectMethod,\n\t\t\t$this->successRedirectStatusCode,\n\t\t\t$this->successRedirectHeaders,\n\t\t);\n\t}\n\n\treturn $this;\n}", "CodeBleu_score": 25.507666778132098}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tif (!$record ||!method_exists($record, 'tags')) {\nreturn;\n}\n\n$tagModelClass = $this->getTagModelClass();\n\n$tagNames = $this->getTagNames($state);\n\n$tags = $tagModelClass::whereIn('name', $tagNames)->get();\n\n$tagIds = $tags->pluck('id');\n\n$record->tags()->sync($tagIds);\n}", "CodeBleu_score": 27.315205300058054}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t$tagModelClass = AllTagTypes::class;\nif ($record instanceof Model && method_exists($record, 'tags')) {\n$tagModelClass = $record->tags()->getMorphClass();\n}\n$tagModelClass::sync($this->parseTags($state), $record);\n}", "CodeBleu_score": 19.864728200113866}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t\tif ($record && method_exists($record, 'tags')) {\n\t\t$tagModel = AllTagTypes::getTagModel();\n\n\t\t$tagNames = $this->getTagNames($state);\n\n\t\t$existingTags = $record->tags()->get();\n\t\t$existingTagIds = $existingTags->pluck('id')->toArray();\n\n\t\t$tags = $this->findOrCreateTags($tagModel, $tagNames);\n\n\t\t$tagIds = $tags->pluck('id')->toArray();\n\n\t\t$syncedTagIds = array_intersect($tagIds, $existingTagIds);\n\n\t\t$record->tags()->sync($syncedTagIds);\n\t}\n}", "CodeBleu_score": 36.02321913247701}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// Dissect the repository path to obtain the space path and repository name.\n\tspacePath, repoName, err := paths.DissectRepositoryPath(repoPath)\n\tif err!= nil {\n\t\treturn fmt.Errorf(\"failed to dissect repository path: %w\", err)\n\t}\n\n\t// Create a scope and resource for the pipeline.\n\tscope := types.NewScope(spacePath, repoName, pipelineIdentifier)\n\tresource := types.NewResource(enum.ResourceTypePipeline, scope)\n\n\t// Call the Check function with the context, authorizer, session, scope, resource, and permission to perform the authorization check.\n\terr = authorizer.Check(ctx, session, resource, permission)\n\tif err!= nil {\n\t\treturn fmt.Errorf(\"failed to check pipeline authorization: %w\", err)\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 52.752375287336164}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// Dissect the repository path to obtain the space path and repository name\n\tspacePath, repoName, err := paths.DissectRepositoryPath(repoPath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource for the pipeline\n\tscope := types.Scope{\n\t\tSpacePath: spacePath,\n\t\tRepoName: repoName,\n\t\tPipelineIdentifier: pipelineIdentifier,\n\t}\n\tresource := types.Resource{\n\t\tType: enum.ResourceTypePipeline,\n\t\tScope: scope,\n\t}\n\n\t// Perform the authorization check\n\terr = authorizer.Check(ctx, session, resource, permission)\n\tif err!= nil {\n\t\treturn fmt.Errorf(\"failed to authorize the pipeline check: %w\", err)\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 63.661166933713766}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// Dissect the repository path to obtain the space path and repository name.\n\tspacePath, repoName, err := paths.DissectRepositoryPath(repoPath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource for the pipeline.\n\tscope := types.NewScope(spacePath, repoName, pipelineIdentifier)\n\tresource := types.NewResource(scope, enum.ResourceTypePipeline)\n\n\t// Call the Check function with the context, authorizer, session, scope, resource, and permission to perform the authorization check.\n\treturn authorizer.Check(ctx, session, resource, permission)\n}", "CodeBleu_score": 43.93020462818579}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparentSpace, parentName, err := paths.DissectSpace(space.Path)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\tscope, resource, err := authz.CreateScopeAndResource(parentSpace, parentName)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 55.69395750094617}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\t// Get the parent space and name\n\tparentSpace, parentSpaceName := paths.GetParentSpaceAndName(space.Path)\n\n\t// Create a scope and resource based on the parent space and name\n\tscope := authz.Scope{\n\t\tType:      enum.ScopeTypeSpace,\n\t\tParent:    parentSpace,\n\t\tName:      parentSpaceName,\n\t\tParentKey: enum.SpaceParentKey,\n\t}\n\tresource := authz.Resource{\n\t\tType:  enum.ResourceTypeSpace,\n\t\tScope: scope,\n\t\tName:  space.Name,\n\t}\n\n\t// Call the Check function with the context, authorizer, session, scope, resource, and permission\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 60.58340866265366}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tscope, resource, err := getSpaceScopeAndResource(space)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 35.25646769973476}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource, err := json.Marshal(data)\n\t\tif err!= nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn source, nil\n\t}\n\n\tvar sourceData map[string]any\n\tif err := json.Unmarshal(source, &sourceData); err!= nil {\n\t\treturn nil, err\n\t}\n\n\tvar targetData map[string]any\n\tif err := json.Unmarshal(source, &targetData); err!= nil {\n\t\treturn nil, err\n\t}\n\n\tif err := json.Unmarshal(source, &targetData); err!= nil {\n\t\treturn nil, err\n\t}\n\n\tif err := json.Unmarshal(source, &targetData); err!= nil {\n\t\treturn nil, err\n\t}\n\n\tif err := json.Unmarshal(source, &targetData); err!= nil {\n\t\treturn nil, err\n\t}\n\n\tif err := json.Unmarshal(source, &targetData); err!= nil {\n\t\treturn nil, err\n\t}\n\n\tif err := json.Unmarshal(source, &targetData); err!= nil {\n\t\treturn nil, err\n\t}\n\n\tif err := json.Unmarshal(source, &targetData); err!= nil {\n\t\treturn nil, err\n\t}\n\n\tif err := json.Unmarshal(source, &targetData); err!= nil {\n\t\treturn nil, err\n\t}\n\n\tif err := json.Unmarshal(source, &targetData); err!= nil {\n\t\treturn nil, err\n\t}\n\n\tif err := json.Unmarshal(source, &targetData); err!= nil {\n\t\treturn nil, err\n\t}\n\n\tif err := json.Unmarshal(source, &targetData); err!= nil {\n\t\treturn nil, err\n\t}\n\n\tif err := json.Unmarshal(source, &targetData); err!= nil {\n\t\treturn nil, err\n\t}\n\n\tif err := json.Unmarshal(source, &targetData); err!= nil {\n\t\treturn nil, err\n\t}\n\n\tif err := json.Unmarshal(source, &targetData); err!= nil {\n\t\treturn nil, err\n\t}\n\n\tif err := json.Unmarshal(source, &targetData); err!= nil {\n\t\treturn nil, err", "CodeBleu_score": 35.99921436185509}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tdataBytes, err := json.Marshal(data)\n\t\tif err!= nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn dataBytes, nil\n\t}\n\tvar payload any\n\terr := json.Unmarshal(source, &payload)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\treturn json.Marshal(payload)\n}", "CodeBleu_score": 29.2560283412297}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tdata, err := json.Marshal(data)\n\t\tif err!= nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn data, nil\n\t}\n\n\tvar payload map[string]any\n\terr := json.Unmarshal(source, &payload)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Validate the payload against the expected schema\n\tschema, err := types.GetJSONSchema(data)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\terr = schema.Validate(payload)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Encode the payload to ensure it conforms to the required format\n\tdata, err = json.Marshal(payload)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Remove any trailing newline from the result\n\tdata = bytes.TrimRight(data, \"\n\")\n\n\treturn data, nil\n}", "CodeBleu_score": 47.049715076503965}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.getRepo(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\tif err := authz.CheckPermission(ctx, session, repo, reqPermission); err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 32.75156443573116}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.getRepo(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\tif err := c.checkRepoAccess(ctx, session, repo, reqPermission); err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 34.23665298987297}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.getRepo(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\tif err := c.checkAccess(ctx, session, repo, reqPermission); err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 33.94753531475071}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tm := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\tm[enum.CheckPayloadKind_Empty] = func(in *ReportInput, s *auth.Session) error {\n\t\tif in.Content == nil {\n\t\t\treturn nil\n\t\t}\n\t\treturn usererror.New(\"report.content.empty\")\n\t}\n\tm[enum.CheckPayloadKind_Raw] = func(in *ReportInput, s *auth.Session) error {\n\t\tif in.Content == nil {\n\t\t\treturn nil\n\t\t}\n\t\treturn usererror.New(\"report.content.empty\")\n\t}\n\tm[enum.CheckPayloadKind_Markdown] = func(in *ReportInput, s *auth.Session) error {\n\t\tif in.Content == nil {\n\t\t\treturn nil\n\t\t}\n\t\treturn usererror.New(\"report.content.empty\")\n\t}\n\tm[enum.CheckPayloadKind_Pipeline] = func(in *ReportInput, s *auth.Session) error {\n\t\tif in.Content == nil {\n\t\t\treturn nil\n\t\t}\n\t\treturn usererror.New(\"report.content.empty\")\n\t}\n\treturn m\n}", "CodeBleu_score": 38.77010665586265}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tsanitizerMap := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\n\tsanitizerMap[enum.CheckPayloadKindEmpty] = func(in *ReportInput, s *auth.Session) error {\n\t\treturn nil\n\t}\n\n\tsanitizerMap[enum.CheckPayloadKindRaw] = func(in *ReportInput, s *auth.Session) error {\n\t\tif in.Raw == nil {\n\t\t\treturn usererror.New(usererror.ErrInvalidCheckPayload)\n\t\t}\n\t\treturn nil\n\t}\n\n\tsanitizerMap[enum.CheckPayloadKindMarkdown] = func(in *ReportInput, s *auth.Session) error {\n\t\tif in.Raw == nil {\n\t\t\treturn usererror.New(usererror.ErrInvalidCheckPayload)\n\t\t}\n\t\treturn nil\n\t}\n\n\tsanitizerMap[enum.CheckPayloadKindPipeline] = func(in *ReportInput, s *auth.Session) error {\n\t\tif in.Pipeline == nil {\n\t\t\treturn usererror.New(usererror.ErrInvalidCheckPayload)\n\t\t}\n\t\treturn nil\n\t}\n\n\treturn sanitizerMap\n}", "CodeBleu_score": 39.730167710712905}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tsanitizerMap := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\tsanitizerMap[enum.CheckPayloadKindEmpty] = func(in *ReportInput, s *auth.Session) error {\n\t\treturn nil\n\t}\n\tsanitizerMap[enum.CheckPayloadKindRaw] = func(in *ReportInput, s *auth.Session) error {\n\t\treturn nil\n\t}\n\tsanitizerMap[enum.CheckPayloadKindMarkdown] = func(in *ReportInput, s *auth.Session) error {\n\t\treturn nil\n\t}\n\tsanitizerMap[enum.CheckPayloadKindPipeline] = func(in *ReportInput, s *auth.Session) error {\n\t\treturn nil\n\t}\n\treturn sanitizerMap\n}", "CodeBleu_score": 42.234604702072744}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\t\tlocal renderer = self.state.renderer\n\tif renderer then\n\t\tif renderer.buffers[self.id] then\n\t\t\trenderer.buffers[self.id].on_render = on_render\n\t\t\treturn self\n\t\telse\n\t\t\trenderer:attach_buffer(self, on_render)\n\t\t\treturn self\n\t\tend\n\telse\n\t\terror('Cannot attach a buffer to a renderer without a renderer')\n\tend", "CodeBleu_score": 44.9272967467749}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tlocal renderer = self.renderer\n\tif renderer then\n\t\trenderer.buffers[self.id] = self\n\t\tself.state.on_render = on_render\n\t\tif self.state.attached_to_screen then\n\t\t\trenderer:update_buffer(self)\n\t\tend\n\tend\n\treturn self", "CodeBleu_score": 53.79823671652753}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tlocal renderer = self.renderer\n\tif not renderer then\n\t\treturn\n\tend\n\n\tif self.state.attached_to_renderer then\n\t\treturn\n\tend\n\n\tself.state.attached_to_renderer = true\n\tself.state.on_render = on_render\n\tself:attach_to_screen()\n\tself:update_state()", "CodeBleu_score": 47.491632890925636}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\t\tif not self:valid() then \n\t\treturn\n\tend\n\n\tlocal filename = self:filename()\n\tif not filename then \n\t\treturn\n\tend\n\n\tlocal watcher = self._watcher\n\tif not watcher then\n\t\twatcher = self._watcher = vgit.core.Watcher()\n\tend\n\n\twatcher:watch(filename, function(event, filename)\n\t\tif event == 'changed' then \n\t\t\tcallback()\n\t\tend\n\tend)", "CodeBleu_score": 40.84792734323584}, {"code": "function Buffer:watch(callback)\n\t\tif not self.valid then return end\n\tlocal filename = self.filename\n\tif not filename then return end\n\tlocal watcher = self.watcher\n\tif not watcher then\n\t\twatcher = vgit.core.Watcher.new()\n\t\tself.watcher = watcher\n\tend\n\twatcher:watch(filename, function(err)\n\t\tif err then\n\t\t\tvgit.core.console.error(err)\n\t\telse\n\t\t\tif callback then\n\t\t\t\tcallback(self)\n\t\t\tend\n\t\tend\n\tend)", "CodeBleu_score": 40.47513228560701}, {"code": "function Buffer:watch(callback)\n\t\tlocal filename = self:filename()\n\tif filename == nil then return end\n\tlocal watcher = self:get_watcher()\n\tif watcher == nil then return end\n\twatcher:watch(filename, callback)", "CodeBleu_score": 27.2258577083486}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\t\tif self.hex then return self.hex end\n\tlocal rgb = self.rgb\n\tlocal hex = string.format('%02x%02x%02x', rgb.r, rgb.g, rgb.b)\n\tif self.foreground then\n\t\tlocal highlight = vim.api.nvim_get_hl_by_id(vim.api.nvim_get_hl_id_by_name('Normal'))\n\t\tif highlight then\n\t\t\tlocal fg = highlight.foreground\n\t\t\tif fg and fg:match('^#') then\n\t\t\t\thex = fg:gsub('#', '')\n\t\t\tend\n\t\tend\n\telseif self.background then\n\t\tlocal highlight = vim.api.nvim_get_hl_by_id(vim.api.nvim_get_hl_id_by_name('Normal'))\n\t\tif highlight then\n\t\t\tlocal bg = highlight.background\n\t\t\tif bg and bg:match('^#') then\n\t\t\t\thex = bg:gsub('#', '')\n\t\t\tend\n\t\tend\n\tend\n\tself.hex = hex\n\treturn hex", "CodeBleu_score": 47.406937864511924}, {"code": "function Color:to_hex()\n\t\tif self.hex then return self.hex end\n\n\tlocal hex = self:get_hex()\n\tif not hex then return end\n\n\tself.hex = hex\n\treturn hex", "CodeBleu_score": 24.93405956705913}, {"code": "function Color:to_hex()\n\t\tif self.hex then\n\t\treturn self.hex\n\tend\n\n\tlocal rgb = self.rgb\n\tlocal hex = bit.tohex(rgb.r, 2).. bit.tohex(rgb.g, 2).. bit.tohex(rgb.b, 2)\n\tself.hex = hex\n\treturn hex", "CodeBleu_score": 37.90237697164876}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal ns = self\n\tlocal lines = buffer:get_lines()\n\tlocal hl_id = hl:get_id()\n\n\tfor _, line in ipairs(lines) do\n\t\tlocal matches = vim.regex(pattern):match_iter(line)\n\t\twhile true do\n\t\t\tlocal match = matches:next()\n\t\t\tif match == nil then break end\n\t\t\tns:add_highlight(buffer, match[1], match[2], hl_id)\n\t\tend\n\tend\n\treturn ns", "CodeBleu_score": 47.82583094048536}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal ns = self:get_namespace()\n\tlocal lines = vim.api.nvim_buf_get_lines(buffer, 0, -1, false)\n\tfor _, line in ipairs(lines) do\n\t\tlocal matches = vim.regex(pattern):match_iter(line)\n\t\twhile matches:next() do\n\t\t\tlocal match = matches:get()\n\t\t\tlocal start = match[1]\n\t\t\tlocal end_ = match[2]\n\t\t\tlocal length = end_ - start\n\t\t\tvim.api.nvim_buf_add_highlight(buffer, ns, hl, start, end_, length)\n\t\tend\n\tend\n\treturn self", "CodeBleu_score": 41.06872990945054}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = vim.api.nvim_buf_get_lines(buffer, 0, -1, false)\n\tfor _, line in ipairs(lines) do\n\t\tlocal matches = vim.regex.match_iter(pattern, line)\n\t\tfor match in matches do\n\t\t\tvim.api.nvim_buf_add_highlight(buffer, -1, hl, match[1], match[2], match[3])\n\t\tend\n\tend\n\treturn self", "CodeBleu_score": 36.38014788286485}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = vim.api.nvim_buf_get_extmark_id(buffer, self.ns_id, row, col, {\n\t\tid = self.id,\n\t\tns = self.ns_id,\n\t\trow = row,\n\t\tcol = col,\n\t\tend_row = row,\n\t\tend_col = col,\n\t\tvirt_text = text,\n\t\tvirt_text_pos = pos,\n\t\tvirt_text_hl_group = hl,\n\t\tpriority = priority\n\t})\n\treturn id", "CodeBleu_score": 52.24256607691877}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = row.. ':'.. col.. ':'.. pos\n\tlocal opts = {\n\t\tid = id,\n\t\tvirt_text = { { text, hl } },\n\t\tvirt_text_pos = pos,\n\t\tpriority = priority,\n\t}\n\tvim.api.nvim_buf_set_extmark(buffer, self.ns, row, col, opts)\n\treturn id", "CodeBleu_score": 64.79649168571066}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = string.format('%s:%s:%s:%s:%s:%s', buffer, row, col, pos, hl, priority)\n\tlocal extmark = vim.api.nvim_buf_set_extmark(buffer, self.ns, row, col, {\n\t\tvirt_text = { {text, hl} },\n\t\tvirt_text_pos = pos,\n\t\tpriority = priority\n\t})\n\tself.virtual_text_ids[id] = extmark\n\treturn id", "CodeBleu_score": 53.642230640664664}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = \"\"\n\tfor i = 1, #output do\n\t\tif output:sub(i, i) == \"", "CodeBleu_score": 14.56669040233572}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = \"\"\n\tlocal callback_called = false\n\n\tlocal function callback_line(line)\n\t\tcallback_called = true\n\t\tcallback(line)\n\tend\n\n\tfor i = 1, #output do\n\t\tlocal char = output:sub(i, i)\n\t\tif char == \"", "CodeBleu_score": 36.41186184022247}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = \"\"\n\tfor i = 1, #output do\n\t\tlocal c = output:sub(i, i)\n\t\tif c == \"", "CodeBleu_score": 19.46243135253033}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t\tlocal watcher = self.watchers[path]\n\tif not watcher then\n\t\twatcher = self:create_watcher(path, handler)\n\t\tself.watchers[path] = watcher\n\tend\n\treturn watcher", "CodeBleu_score": 37.068367724934845}, {"code": "function Watcher:watch_file(path, handler)\n\t\tlocal watcher = self.watchers[path]\n\tif watcher == nil then\n\t\twatcher = Watcher.new(path, handler)\n\t\tself.watchers[path] = watcher\n\tend\n\twatcher:start()\n\treturn watcher", "CodeBleu_score": 38.54517140960401}, {"code": "function Watcher:watch_file(path, handler)\n\t\tlocal watcher = self.watchers[path]\n\n\tif watcher == nil then\n\t\twatcher = self.loop:watch_file(path, handler)\n\t\tself.watchers[path] = watcher\n\tend\n\n\treturn watcher", "CodeBleu_score": 37.55925219585637}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t\tlocal git_object = self.git_object\n\tlocal buffer = self.buffer\n\tlocal hunks = {}\n\tlocal hunk = {}\n\tlocal lines = buffer:lines()\n\tlocal line_number = 1\n\tlocal line_index = 1\n\tlocal line_text = lines[line_number]\n\tlocal line_length = #line_text\n\tlocal line_start = 1\n\tlocal line_end = line_length\n\tlocal line_hunk = {}\n\tlocal line_hunk_start = 1\n\tlocal line_hunk_end = line_length\n\tlocal line_hunk_type = nil\n\tlocal line_hunk_priority = nil\n\tlocal line_hunk_text = nil\n\tlocal line_hunk_text_length = nil\n\tlocal line_hunk_text_start = nil\n\tlocal line_hunk_text_end = nil\n\tlocal line_hunk_text_type = nil\n\tlocal line_hunk_text_priority = nil\n\tlocal line_hunk_text_sign_id = nil\n\tlocal line_hunk_text_sign_type = nil\n\tlocal line_hunk_text_sign_priority = nil\n\tlocal line_hunk_text_sign_text = nil\n\tlocal line_hunk_text_sign_text_length = nil\n\tlocal line_hunk_text_sign_text_start = nil\n\tlocal line_hunk_text_sign_text_end = nil\n\tlocal line_hunk_text_sign_text_type = nil\n\tlocal line_hunk_text_sign_text_priority = nil\n\tlocal line_hunk_text_sign_text_sign_id = nil\n\tlocal line_hunk_text_sign_text_sign_type = nil\n\tlocal line_hunk_text_sign_text_sign_priority = nil\n\tlocal line_hunk_text_sign_text_sign_text = nil\n\tlocal line_hunk_text_sign_text_sign_text_length = nil\n\tlocal line_hunk_text_sign_text_sign_text_start = nil\n\tlocal line_hunk_text_sign_text", "CodeBleu_score": 23.8158232751368}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal hunks = {}\n\tlocal buffer = self.buffer\n\tlocal git = self.git\n\n\tlocal lines = buffer:get_lines()\n\tlocal hunks = git:live_hunks(lines)\n\n\tif hunks == nil then\n\t\treturn nil\n\tend\n\n\tlocal signs = {}\n\tfor i, hunk in ipairs(hunks) do\n\t\tlocal sign = signs[i]\n\t\tif sign == nil then\n\t\t\tsign = {}\n\t\t\tsigns[i] = sign\n\t\tend\n\n\t\tsign.priority = hunk.priority\n\t\tsign.text = hunk.text\n\n\t\tif hunk.type == 'added' then\n\t\t\tsign.hl_group = 'GitHunkAdded'\n\t\telseif hunk.type =='removed' then\n\t\t\tsign.hl_group = 'GitHunkRemoved'\n\t\telseif hunk.type == 'changed' then\n\t\t\tsign.hl_group = 'GitHunkChanged'\n\t\telse\n\t\t\tsign.hl_group = 'GitHunkUnchanged'\n\t\tend\n\tend\n\n\tbuffer:set_signs(signs)\n\n\treturn hunks", "CodeBleu_score": 40.97395978329106}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal buffer = self.buffer\n\tlocal git_object = self.git_object\n\tlocal hunks = {}\n\tlocal lines = buffer:lines()\n\n\t-- Get the hunks\n\tlocal hunk_index = 1\n\tlocal hunk_lines = {}\n\tfor i = 1, #lines do\n\t\tlocal line = lines[i]\n\t\tlocal is_hunk = git_object:is_hunk_line(line)\n\t\tif is_hunk then\n\t\t\t-- Add the hunk to the hunks array\n\t\t\thunks[hunk_index] = hunk_lines\n\t\t\thunk_index = hunk_index + 1\n\t\t\thunk_lines = {}\n\t\tend\n\t\ttable.insert(hunk_lines, line)\n\tend\n\t-- Add the last hunk\n\thunks[hunk_index] = hunk_lines\n\n\t-- Set up signs\n\tfor hunk_index, hunk in pairs(hunks) do\n\t\t-- Get the hunk type\n\t\tlocal hunk_type = git_object:hunk_type(hunk)\n\t\t-- Get the hunk priority\n\t\tlocal hunk_priority = git_object:hunk_priority(hunk)\n\t\t-- Set up signs\n\t\tlocal hunk_signs = signs[hunk_type]\n\t\tfor line_index, line in pairs(hunk) do\n\t\t\tlocal sign = hunk_signs[line_index]\n\t\t\t-- Set the sign\n\t\t\tif sign then\n\t\t\t\tbuffer:set_sign(sign, line_index, hunk_priority)\n\t\t\tend\n\t\tend\n\tend\n\n\t-- Update the buffer signs\n\tbuffer:update_signs()\n\n\t-- Return the hunks\n\treturn hunks", "CodeBleu_score": 43.82948998627815}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal patch_file = os.tmpname()\n\tlocal patch_file_handle = io.open(patch_file, 'w')\n\tpatch_file_handle:write(patch)\n\tpatch_file_handle:close()\n\tlocal result, error = self.git_object:stage_hunk_from_patch(patch_file)\n\tos.remove(patch_file)\n\treturn result, error", "CodeBleu_score": 55.86080444344746}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal patch_file = self:create_temp_file()\n\tlocal patch_content = patch:get_content()\n\tlocal success, err = io.write(patch_file, patch_content)\n\tif not success then\n\t\treturn nil, err\n\tend\n\tlocal success, err = self:git_command(\"add\", patch_file)\n\tif not success then\n\t\treturn nil, err\n\tend\n\tlocal success, err = io.remove(patch_file)\n\tif not success then\n\t\treturn nil, err\n\tend\n\treturn true", "CodeBleu_score": 43.62661736444598}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal patch_content = patch:get_content()\n\tlocal temp_file_path = os.tmpname()\n\tlocal file = io.open(temp_file_path, 'w')\n\tfile:write(patch_content)\n\tfile:close()\n\tlocal command = Git:get_command('add', temp_file_path)\n\tlocal status, output = self:execute_command(command)\n\tos.remove(temp_file_path)\n\treturn status, output", "CodeBleu_score": 48.20717149808412}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\tOAuth20ServiceImpl service = new OAuth20ServiceImpl();\n\tOAuthConfig config = new OAuthConfig(\n\t\t\"https://api.github.com/applications/21336/access_token\",\n\t\t\"\",\n\t\t\"\",\n\t\t\"\",\n\t\t\"\"\n\t);\n\tToken accessToken = service.getAccessToken(config, requestToken, verifier);\n\treturn accessToken;\n}", "CodeBleu_score": 31.38123974167644}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\tOAuth20ServiceImpl oAuth20Service = new OAuth20ServiceImpl();\n\tOAuthConfig oAuthConfig = new OAuthConfig(requestToken.getToken(), requestToken.getSecret(), null, null, null, null, null, null, null, null, null, null, null, null, null, null);\n\tDefaultApi20 api = new DefaultApi20(oAuthConfig);\n\tOAuthRequest oAuthRequest = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());\n\toAuth20Service.signRequest(oAuthConfig, requestToken, oAuthRequest);\n\toAuthRequest.addBodyParameter(OAuthConstants.TOKEN, requestToken.getToken());\n\toAuthRequest.addBodyParameter(OAuthConstants.VERIFIER, verifier.getValue());\n\tResponse response = oAuthRequest.send();\n\treturn api.getAccessTokenExtractor().extract(response);\n}", "CodeBleu_score": 47.84067013572162}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\tOAuth20ServiceImpl oauth20Service = new OAuth20ServiceImpl();\n\tOAuthConfig config = new OAuthConfig(requestToken.getToken(), requestToken.getSecret(), \"https://github.com/login/oauth/access_token\", \"https://api.github.com/user\", \"https://api.github.com/user/keys\", \"https://api.github.com/user/keys\", \"https://api.github.com/user/keys\", \"https://api.github.com/user/keys\", \"https://api.github.com/user/keys\", \"https://api.github.com/user/keys\", \"https://api.github.com/user/keys\", \"https://api.github.com/user/keys\", \"https://api.github.com/user/keys\", \"https://api.github.com/user/keys\", \"https://api.github.com/user/keys\", \"https://api.github.com/user/keys\", \"https://api.github.com/user/keys\", \"https://api.github.com/user/keys\", \"https://api.github.com/user/keys\", \"https://api.github.com/user/keys\", \"https://api.github.com/user/keys\", \"https://api.github.com/user/keys\", \"https://api.github.com/user/keys\", \"https://api.github.com/user/keys\", \"https://api.github.com/user/keys\", \"https://api.github.com/user/keys\", \"https://api.github.com/user/keys\", \"https://api.github.com/user/keys\", \"https://api.github.com/user/keys\", \"https://api.github.com/user/keys\", \"https://api.github.com/user/keys\", \"https://api.github.com/user/keys\", \"https://api.github.com/user/keys\", \"https://api.github.com/user/keys\", \"https://api.github.com/user/keys\", \"https://api.github.com/user/keys\", \"https://api.github.com/user/keys\", \"https://api.github.com/user/keys\", \"https://api.github.", "CodeBleu_score": 17.581804560315657}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\tLogger.getLogger(BitbucketAuthenticator.class.getName()).log(Level.INFO, \"Configuring context for host: {0}\", host.getHostName());\n\tif (host.getHostName() == null || host.getHostName().isEmpty()) {\n\t\tLogger.getLogger(BitbucketAuthenticator.class.getName()).log(Level.WARNING, \"Host name is empty for host: {0}\", host.getHostName());\n\t\treturn;\n\t}\n\n\tCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n\tcredentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(username, password));\n\n\tAuthCache authCache = new BasicAuthCache();\n\tauthCache.put(host, new BasicScheme());\n\n\tcontext.setCredentialsProvider(credentialsProvider);\n\tcontext.setAuthCache(authCache);\n}", "CodeBleu_score": 57.18516068475559}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\ttry {\n\t\t// Get the credentials\n\t\tBitbucketAuthenticator authenticator = BitbucketAuthenticator.get();\n\t\tStandardUsernamePasswordCredentials credentials = authenticator.getCredentials(host);\n\n\t\t// Set up the credentials provider\n\t\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n\t\tcredsProvider.setCredentials(AuthScope.ANY, credentials);\n\n\t\t// Set up the authentication cache\n\t\tAuthCache authCache = new BasicAuthCache();\n\t\tauthCache.put(host, new BasicScheme());\n\n\t\t// Set the credentials provider and the authentication cache on the context\n\t\tcontext.setCredentialsProvider(credsProvider);\n\t\tcontext.setAuthCache(authCache);\n\n\t\t// Log the action\n\t\tLogger.getLogger(BitbucketApi.class.getName()).log(Level.FINE, \"Added host \" + host.getHostName() + \" to the authentication cache.\");\n\t} catch (Exception e) {\n\t\tLogger.getLogger(BitbucketApi.class.getName()).log(Level.WARNING, \"Failed to add host \" + host.getHostName() + \" to the authentication cache.\", e);\n\t}\n}", "CodeBleu_score": 52.41941305593559}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\tif (host == null) {\n\t\treturn;\n\t}\n\tfinal CredentialsProvider credsProvider = new BasicCredentialsProvider();\n\tfinal AuthCache authCache = new BasicAuthCache();\n\tfinal AuthScope authScope = new AuthScope(host.getHostName(), host.getPort());\n\tfinal UsernamePasswordCredentials creds = getCredentials(host);\n\tif (creds!= null) {\n\t\tcredsProvider.setCredentials(authScope, creds);\n\t\tauthCache.put(host, new BasicScheme());\n\t\tcontext.setCredentialsProvider(credsProvider);\n\t\tcontext.setAuthCache(authCache);\n\t\tlogger.log(Level.FINE, \"Added host {0} to authentication cache\", host);\n\t}\n}", "CodeBleu_score": 61.88101434064629}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t\ttry {\n\t\tJenkins instance = Jenkins.getInstance();\n\t\tif (instance == null) {\n\t\t\tthrow new IllegalStateException(\"Jenkins instance is null\");\n\t\t}\n\t\tAvatarCache cache = instance.getExtensionList(AvatarCache.class).get(0);\n\t\tif (cache == null) {\n\t\t\tthrow new IllegalStateException(\"Avatar cache is null\");\n\t\t}\n\t\tString key = generateCacheKey(source, size);\n\t\tFuture<AvatarImage> future = cache.get(key);\n\t\tAvatarImage image = future.get();\n\t\tif (image == null) {\n\t\t\tthrow new IllegalStateException(\"Avatar image is null\");\n\t\t}\n\t\treturn instance.getRootUrl() + \"plugin/bitbucket-avatar-cache/avatar?key=\" + URLEncoder.encode(key, StandardCharsets.UTF_8.name());\n\t} catch (UnsupportedEncodingException e) {\n\t\tthrow new IllegalStateException(\"UTF-8 encoding is unsupported\", e);\n\t} catch (InterruptedException e) {\n\t\tthrow new IllegalStateException(\"Interrupted\", e);\n\t} catch (ExecutionException e) {\n\t\tthrow new IllegalStateException(\"Error retrieving avatar image\", e);\n\t}\n}", "CodeBleu_score": 52.75108105172015}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t\tJenkins instance = Jenkins.getInstanceOrNull();\n\tif (instance == null) {\n\t\tthrow new IllegalStateException(\"Jenkins instance is null\");\n\t}\n\tAvatarCache cache = instance.getExtensionList(AvatarCache.class).get(0);\n\tif (cache == null) {\n\t\tthrow new IllegalStateException(\"AvatarCache is null\");\n\t}\n\tString key = cache.generateKey(source, size);\n\tString url = instance.getRootUrl() + \"/plugin/bitbucket-avatar-cache/avatar?key=\" + URLEncoder.encode(key, StandardCharsets.UTF_8.name());\n\treturn url;\n}", "CodeBleu_score": 48.75614045819068}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t\tJenkins jenkins = Jenkins.get();\n\tAvatarCache cache = AvatarCache.get();\n\tif (cache == null) {\n\t\tthrow new IllegalStateException(\"Avatar cache is not initialized\");\n\t}\n\tString key = cache.getKey(source, size);\n\tString url = jenkins.getRootUrl() + \"plugin/bitbucket-avatar-cache/avatar?key=\" + URLEncoder.encode(key, StandardCharsets.UTF_8.name());\n\treturn url;\n}", "CodeBleu_score": 41.24388005260665}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t\tthis.source = source;\n\tthis.image = image;\n\tthis.lastModified = lastModified;\n\tif (lastModified < 0) {\n\t\tthis.lastModified = System.currentTimeMillis();\n\t}\n\tif (image.getWidth() > 128 || image.getHeight() > 128) {\n\t\tBufferedImage scaled = new BufferedImage(128, 128, image.getType());\n\t\tGraphics2D g = scaled.createGraphics();\n\t\tg.setRenderingHint(KEY_INTERPOLATION, VALUE_INTERPOLATION_BICUBIC);\n\t\tg.setRenderingHint(KEY_ALPHA_INTERPOLATION, VALUE_ALPHA_INTERPOLATION_QUALITY);\n\t\tg.drawImage(image, 0, 0, 128, 128, null);\n\t\tg.dispose();\n\t\tthis.image = scaled;\n\t}\n}", "CodeBleu_score": 41.95333970805866}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t\tthis.source = source;\n\tthis.image = image;\n\tif (image!= null) {\n\t\tthis.width = image.getWidth();\n\t\tthis.height = image.getHeight();\n\t}\n\tif (lastModified < 0) {\n\t\tthis.lastModified = System.currentTimeMillis();\n\t} else {\n\t\tthis.lastModified = lastModified;\n\t}\n}", "CodeBleu_score": 42.600052427150466}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t\tthis.source = source;\n\tthis.image = image;\n\tthis.lastModified = lastModified;\n}", "CodeBleu_score": 17.59737390528727}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\tif (future == null) {\nreturn false;\n}\ntry {\nAvatarImage image = future.get();\nif (image!= null) {\nthis.image = image;\nthis.lastModification = image.lastModification;\nfuture = null;\n}\n} catch (InterruptedException e) {\nfuture = null;\n} catch (ExecutionException e) {\nfuture = null;\n}\nreturn true;\n}", "CodeBleu_score": 34.60697398640943}, {"code": "private synchronized boolean pending(){\n\t\tif (future!= null && future.isDone()) {\n\t\ttry {\n\t\t\tAvatarImage image = future.get();\n\t\t\tif (image!= null) {\n\t\t\t\tthis.image = image;\n\t\t\t\tthis.lastModified = image.getLastModified();\n\t\t\t\tfuture = null;\n\t\t\t}\n\t\t} catch (InterruptedException | ExecutionException e) {\n\t\t\tfuture = null;\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn future!= null;\n}", "CodeBleu_score": 38.13785578029948}, {"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false;\n\t}\n\ttry {\n\t\tfinal AvatarImage result = future.get();\n\t\tif (result!= null) {\n\t\t\timage = result.image;\n\t\t\tlastModified = result.lastModified;\n\t\t\tfuture = null;\n\t\t}\n\t\treturn true;\n\t} catch (InterruptedException | ExecutionException e) {\n\t\tfuture = null;\n\t\treturn true;\n\t}\n}", "CodeBleu_score": 43.31720174699213}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\n//    rsp.setContentType(\"image/png\");", "CodeBleu_score": 9.47834350695702}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\n}", "CodeBleu_score": 9.566626017162672}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\n//        if (node instanceof AbstractProject) {\n//            rsp.setContentType(\"image/png\");\n//            rsp.addHeader(\"Cache-Control\", \"max-age=31536000, public\");\n//            rsp.addHeader(\"Pragma\", \"public\");\n//            rsp.addHeader(\"Expires\", \"0\");\n//            rsp.addHeader(\"Last-Modified\", Long.toString(System.currentTimeMillis()));\n//            rsp.addHeader(\"Content-Type\", \"image/png\");\n//\n//            BufferedImage img = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB);\n//            Graphics2D g = img.createGraphics();\n//            g.setColor(Color.WHITE);\n//            g.fillRect(0, 0, 1, 1);\n//            g.dispose();\n//\n//            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n//            ImageIO.write(img, \"png\", baos);\n//            baos.flush();\n//            byte[] image = baos.toByteArray();\n//            baos.close();\n//            rsp.getOutputStream().write(image);\n//        }\n//        else {\n//            rsp.sendError(HttpServletResponse.SC_NOT_FOUND);\n//        }\n}", "CodeBleu_score": 9.566626017162672}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t\tthis.enableCache = enableCache;\n\tthis.teamCacheDuration = teamCacheDuration;\n\tthis.repositoriesCacheDuration = repositoriesCacheDuration;\n\tthis.owner = owner;\n\tthis.projectKey = projectKey;\n\tthis.repositoryName = repositoryName;\n\tthis.authenticator = authenticator;\n\tif (enableCache) {\n\t\tthis.teamCache = new ExpiringCache<String, BitbucketTeam>(teamCacheDuration, SECONDS);\n\t\tthis.repositoriesCache = new ExpiringCache<String, BitbucketRepository>(repositoriesCacheDuration, SECONDS);\n\t}\n\tif (authenticator!= null) {\n\t\tthis.authenticator.setApiClient(this);\n\t}\n\tif (authenticator instanceof BitbucketUsernamePasswordAuthenticator) {\n\t\tthis.authenticator.setApiClient(this);\n\t}\n\tthis.httpClient = createHttpClient();\n\tthis.context = HttpClientContext.create();\n\tthis.context.setAuthCache(new BasicAuthCache());\n\tthis.context.setCredentialsProvider(new BasicCredentialsProvider());\n\tif (authenticator!= null) {\n\t\tthis.context.getCredentialsProvider().setCredentials(AuthScope.ANY, authenticator.createCredentials());\n\t}\n\tif (authenticator instanceof BitbucketUsernamePasswordAuthenticator) {\n\t\tthis.context.getCredentialsProvider().setCredentials(AuthScope.ANY, authenticator.createCredentials());\n\t}\n}", "CodeBleu_score": 40.49738982749972}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t\tthis.owner = owner;\n\tthis.projectKey = projectKey;\n\tthis.repositoryName = repositoryName;\n\tthis.enableCache = enableCache;\n\tthis.teamCacheDuration = teamCacheDuration;\n\tthis.repositoriesCacheDuration = repositoriesCacheDuration;\n\tthis.authenticator = authenticator;\n\tif (enableCache) {\n\t\tthis.teamCache = new CacheBuilder<String, BitbucketTeam>(teamCacheDuration, HOURS, MINUTES, SECONDS)\n\t\t\t\t.build();\n\t\tthis.repositoriesCache = new CacheBuilder<String, PaginatedBitbucketRepository>(repositoriesCacheDuration, HOURS, MINUTES, SECONDS)\n\t\t\t\t.build();\n\t}\n\tif (authenticator!= null) {\n\t\tthis.httpClient = createHttpClient(authenticator);\n\t\tthis.context = HttpClientContext.create();\n\t}\n\tif (authenticator instanceof BitbucketUsernamePasswordAuthenticator) {\n\t\tthis.proxy = ((BitbucketUsernamePasswordAuthenticator) authenticator).getProxy();\n\t}\n}", "CodeBleu_score": 50.55503640717858}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t\tthis.enableCache = enableCache;\n\tthis.teamCacheDuration = teamCacheDuration;\n\tthis.repositoriesCacheDuration = repositoriesCacheDuration;\n\tthis.owner = owner;\n\tthis.projectKey = projectKey;\n\tthis.repositoryName = repositoryName;\n\tthis.authenticator = authenticator;\n\tif (enableCache) {\n\t\tteamCache = new Cache<String, BitbucketTeam>(teamCacheDuration, HOURS, MINUTES, SECONDS);\n\t\trepositoriesCache = new Cache<String, List<BitbucketRepository>>(repositoriesCacheDuration, HOURS, MINUTES, SECONDS);\n\t}\n\tif (authenticator!= null) {\n\t\tif (authenticator instanceof BitbucketUsernamePasswordAuthenticator) {\n\t\t\tthis.authenticator = new BitbucketUsernamePasswordAuthenticator(\n\t\t\t\t\t((BitbucketUsernamePasswordAuthenticator) authenticator).getUsername(),\n\t\t\t\t\t((BitbucketUsernamePasswordAuthenticator) authenticator).getPassword());\n\t\t}\n\t\tif (authenticator instanceof BitbucketApi) {\n\t\t\tthis.authenticator = new BitbucketApi(\n\t\t\t\t\t((BitbucketApi) authenticator).getApiUrl(),\n\t\t\t\t\t((BitbucketApi) authenticator).getApiToken());\n\t\t}\n\t}\n\tif (authenticator!= null) {\n\t\tif (authenticator instanceof BitbucketApi) {\n\t\t\tthis.apiUrl = ((BitbucketApi) authenticator).getApiUrl();\n\t\t\tthis.apiToken = ((BitbucketApi) authenticator).getApiToken();\n\t\t} else if (authenticator instanceof BitbucketUsernamePasswordAuthenticator) {\n\t\t\tthis.username = ((BitbucketUsernamePasswordAuthenticator) authenticator).getUsername();\n\t\t\tthis.password = ((BitbucketUsernamePasswordAuthenticator) authenticator).getPassword();\n\t\t}\n\t\ttry {\n\t\t\tthis.client = buildClient();\n\t\t\tthis.context = HttpClientContext.create();\n\t\t} catch (IOException e) {\n\t\t\tLOGGER.log(Level.SEVERE, \"Unable to build HTTP client\", e);\n\t\t}\n\t}\n}", "CodeBleu_score": 44.41547069864688}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\ttry {\n\t\t// Get the source branch\n\t\tBitbucketCloudBranch sourceBranch = bitbucket.getBranch(pullRequest.getSource().getRepository().getUuid(), pullRequest.getSource().getBranch().getName());\n\t\tif (sourceBranch!= null) {\n\t\t\t// If the source branch exists, assign a new CommitClosure based on the branch's raw node\n\t\t\tcommitClosure = new CommitClosure(sourceBranch.getCommit().getHash(), sourceBranch.getCommit().getAuthor().getDisplayName(), sourceBranch.getCommit().getAuthor().getEmailAddress(), sourceBranch.getCommit().getCommitMessage());\n\t\t}\n\n\t\t// Get the destination branch\n\t\tBitbucketCloudBranch destinationBranch = bitbucket.getBranch(pullRequest.getDestination().getRepository().getUuid(), pullRequest.getDestination().getBranch().getName());\n\t\tif (destinationBranch!= null) {\n\t\t\t// If the destination branch exists, assign a new CommitClosure based on the branch's raw node\n\t\t\tcommitClosure = new CommitClosure(destinationBranch.getCommit().getHash(), destinationBranch.getCommit().getAuthor().getDisplayName(), destinationBranch.getCommit().getAuthor().getEmailAddress(), destinationBranch.getCommit().getCommitMessage());\n\t\t}\n\t} catch (BitbucketException e) {\n\t\tLOGGER.log(Level.WARNING, \"Error retrieving branch for pull request \" + pullRequest.getUuid(), e);\n\t}\n}", "CodeBleu_score": 34.09590458885703}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\tBitbucketCloudBranch sourceBranch = getBranch(pullRequest.getSource().getBranch().getName());\n\tif (sourceBranch!= null) {\n\t\ttry {\n\t\t\tBitbucketCloudCommit sourceCommit = sourceBranch.getCommit();\n\t\t\tif (sourceCommit!= null) {\n\t\t\t\tpullRequest.getSource().setCommit(new BitbucketPullRequestCommit(sourceCommit));\n\t\t\t}\n\t\t} catch (BitbucketException e) {\n\t\t\tLOGGER.log(Level.WARNING, \"Unable to get source branch for pull request \" + pullRequest.getId() + \": \" + e.getMessage(), e);\n\t\t}\n\t}\n\tBitbucketCloudBranch destinationBranch = getBranch(pullRequest.getDestination().getBranch().getName());\n\tif (destinationBranch!= null) {\n\t\ttry {\n\t\t\tBitbucketCloudCommit destinationCommit = destinationBranch.getCommit();\n\t\t\tif (destinationCommit!= null) {\n\t\t\t\tpullRequest.getDestination().setCommit(new BitbucketPullRequestCommit(destinationCommit));\n\t\t\t}\n\t\t} catch (BitbucketException e) {\n\t\t\tLOGGER.log(Level.WARNING, \"Unable to get destination branch for pull request \" + pullRequest.getId() + \": \" + e.getMessage(), e);\n\t\t}\n\t}\n}", "CodeBleu_score": 35.33035961898447}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\tString sourceBranch = pullRequest.getSource().getBranch().getName();\n\tString destinationBranch = pullRequest.getDestination().getBranch().getName();\n\tString sourceRepository = pullRequest.getSource().getRepository().getSlug();\n\tString destinationRepository = pullRequest.getDestination().getRepository().getSlug();\n\tBitbucketCloudWorkspace sourceWorkspace = new BitbucketCloudWorkspace(sourceRepository, sourceBranch);\n\tBitbucketCloudWorkspace destinationWorkspace = new BitbucketCloudWorkspace(destinationRepository, destinationBranch);\n\ttry {\n\t\tBitbucketCloudBranch sourceBranchNode = bitbucket.getBranch(sourceWorkspace);\n\t\tBitbucketCloudCommit sourceBranchRawNode = bitbucket.getCommit(sourceBranchNode);\n\t\tBitbucketCloudCommit sourceBranchCommit = sourceBranchRawNode.getCommit();\n\t\tBitbucketCloudBranch destinationBranchNode = bitbucket.getBranch(destinationWorkspace);\n\t\tBitbucketCloudCommit destinationBranchRawNode = bitbucket.getCommit(destinationBranchNode);\n\t\tBitbucketCloudCommit destinationBranchCommit = destinationBranchRawNode.getCommit();\n\t\tcommitClosure = new CommitClosure(sourceBranchCommit, destinationBranchCommit);\n\t} catch (BitbucketException e) {\n\t\tLOGGER.log(Level.FINE, \"Failed to retrieve source and destination branches for pull request \" + pullRequest.getId(), e);\n\t}\n}", "CodeBleu_score": 30.422232019754325}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration jlc = JenkinsLocationConfiguration.get();\n\tif (jlc == null) {\n\t\tthrow new IllegalStateException(\"Jenkins Location Configuration is null\");\n\t}\n\tif (jlc.getUrl() == null) {\n\t\tthrow new IllegalStateException(\"Jenkins Location Configuration URL is null\");\n\t}\n\tDisplayURLProvider durl = DisplayURLProvider.all().get(build.getClass());\n\tif (durl == null) {\n\t\tthrow new IllegalStateException(\"DisplayURLProvider is null\");\n\t}\n\ttry {\n\t\treturn durl.getURL(build).toExternalForm();\n\t} catch (MalformedURLException e) {\n\t\tthrow new IllegalStateException(\"DisplayURLProvider URL is not a valid URL\", e);\n\t}\n}", "CodeBleu_score": 46.77835811122057}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tenkinsLocationConfiguration jenkinsLocationConfiguration = JenkinsLocationConfiguration.get();\nif (jenkinsLocationConfiguration == null) {\nthrow new IllegalStateException(\"Jenkins location configuration is null\");\n}\nDisplayURLProvider displayURLProvider = jenkinsLocationConfiguration.getProvider();\nif (displayURLProvider == null) {\nthrow new IllegalStateException(\"Display URL Provider is null\");\n}\nURL url = displayURLProvider.getURL(build);\nif (url == null) {\nthrow new IllegalStateException(\"URL is null\");\n}\nreturn url.toString();\n}", "CodeBleu_score": 46.64447355356195}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration config = JenkinsLocationConfiguration.get();\n\tif (config == null) {\n\t\tthrow new IllegalStateException(\"Jenkins location configuration is null\");\n\t}\n\tif (config.getUrl() == null) {\n\t\tthrow new IllegalStateException(\"Jenkins location URL is null\");\n\t}\n\tDisplayURLProvider provider = DisplayURLProvider.all().get(build.getParent());\n\tif (provider == null) {\n\t\tthrow new IllegalStateException(\"Display URL provider is null\");\n\t}\n\treturn provider.getURL(build.getParent()).toString();\n}", "CodeBleu_score": 47.94051229868951}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\tif (StringUtils.isBlank(url)) {\n\t\tthrow new IllegalStateException(\"Bitbucket URL cannot be blank\");\n\t}\n\n\ttry {\n\t\tnew URL(url);\n\t} catch (MalformedURLException e) {\n\t\tthrow new IllegalStateException(\"Bitbucket URL is malformed: \" + url, e);\n\t}\n\n\tif (url.contains(\"localhost\") || url.contains(\"unconfigured-jenkins-location\")) {\n\t\tthrow new IllegalStateException(\"Bitbucket URL cannot contain 'localhost' or 'unconfigured-jenkins-location'\");\n\t}\n\n\tif (bitbucket instanceof BitbucketCloudApiClient) {\n\t\tString host = JenkinsLocationConfiguration.get().getUrl();\n\t\tif (!url.contains(host)) {\n\t\t\tthrow new IllegalStateException(\"Bitbucket URL must be fully qualified: \" + url);\n\t\t}\n\t}\n\n\treturn url;\n}", "CodeBleu_score": 52.65600073083645}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\tif (StringUtils.isBlank(url)) {\n\t\treturn url;\n\t}\n\ttry {\n\t\tURL u = new URL(url);\n\t\tif (u.getHost().equals(\"localhost\") || u.getHost().equals(\"unconfigured-jenkins-location\")) {\n\t\t\tthrow new IllegalStateException(\"Jenkins URL cannot be localhost or unconfigured-jenkins-location\");\n\t\t}\n\t\tif (bitbucket instanceof BitbucketCloudApiClient) {\n\t\t\tif (!u.getHost().contains(\".\")) {\n\t\t\t\tthrow new IllegalStateException(\"Jenkins URL must be fully qualified\");\n\t\t\t}\n\t\t}\n\t} catch (MalformedURLException e) {\n\t\tthrow new IllegalStateException(\"Malformed Jenkins URL\", e);\n\t}\n\treturn url;\n}", "CodeBleu_score": 56.377501923320764}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\ttry {\n\t\tURL u = new URL(url);\n\t\tif (u.getHost().equals(\"localhost\") || u.getHost().equals(JenkinsLocationConfiguration.get().getUrl().replace(\"http://\", \"\").replace(\"https://\", \"\"))) {\n\t\t\tthrow new IllegalStateException(\"Jenkins URL cannot be localhost or the configured Jenkins URL\");\n\t\t}\n\t\tif (bitbucket instanceof BitbucketCloudApiClient &&!u.getHost().contains(\".\")) {\n\t\t\tthrow new IllegalStateException(\"Jenkins URL must be fully qualified\");\n\t\t}\n\t\treturn u.toString();\n\t} catch (MalformedURLException e) {\n\t\tthrow new IllegalStateException(\"Jenkins URL is malformed\", e);\n\t}\n}", "CodeBleu_score": 63.78266400339518}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\tif (source.getBitbucketContext() == null) {\n    listener.getLogger().println(\"Bitbucket context is null. Skipping notifications.\");\n    return;\n}\n\nif (source.getBitbucketContext().isNotificationsDisabled()) {\n    listener.getLogger().println(\"Notifications are disabled. Skipping notifications.\");\n    return;\n}\n\nSCMRevision revision = build.getRevision();\n\nif (revision == null) {\n    listener.getLogger().println(\"Revision is null. Skipping notifications.\");\n    return;\n}\n\nString revisionType = revision.getDisplayName();\n\nif (StringUtils.isEmpty(revisionType)) {\n    listener.getLogger().println(\"Revision type is empty. Skipping notifications.\");\n    return;\n}\n\nString buildKey = getBuildKey(source, build, revisionType);\n\nif (StringUtils.isEmpty(buildKey)) {\n    listener.getLogger().println(\"Build key is empty. Skipping notifications.\");\n    return;\n}\n\nBitbucketApi bitbucketApi = getBitbucketApi(source);\n\nif (bitbucketApi == null) {\n    listener.getLogger().println(\"Bitbucket API is null. Skipping notifications.\");\n    return;\n}\n\nString branch = null;\nString pr = null;\n\nif (revisionType.equals(BitbucketSCMSource.PR_REVISION_TYPE)) {\n    pr = revisionType;\n} else {\n    branch = revisionType;\n}\n\nBitbucketBuildStatus buildStatus = BitbucketBuildStatus.fromResult(build.getResult());\n\nif (buildStatus == null) {\n    listener.getLogger().println(\"Build status is null. Skipping notifications.\");\n    return;\n}\n\nBitbucketCloudApiClient client = getBitbucketClient(source, bitbucketApi, buildStatus);\n\nif (client == null) {\n    listener.getLogger().println(\"Bitbucket client is null. Skipping notifications.\");\n    return;\n}\n\nif (branch!= null) {\n    client.createBranchStatus(buildKey, branch, buildStatus);\n}\n\nif (pr!= null) {\n    client.createPullRequestStatus(buildKey, pr, buildStatus);\n}\n}", "CodeBleu_score": 34.935702785724246}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t//        BitbucketSCMSource source = (BitbucketSCMSource) scm;\n        BitbucketApi api = source.getBitbucketApi();\n        if (api == null) {\n            listener.getLogger().println(\"Bitbucket API is not initialized. Skipping notifications.\");\n            return;\n        }\n\n        BitbucketCloudApiClient client = api.getClient();\n        if (client == null) {\n            listener.getLogger().println(\"Bitbucket client is not initialized. Skipping notifications.\");\n            return;\n        }\n\n        BitbucketBuildStatus status = BitbucketBuildStatus.valueOf(build.getResult().toString());\n\n        // Check if the notification is disabled\n        if (source.getBitbucketBuildStatus() == null ||!source.getBitbucketBuildStatus().isEnabled()) {\n            listener.getLogger().println(\"Bitbucket notifications are disabled. Skipping notifications.\");\n            return;\n        }\n\n        // Retrieve the SCM revision\n        SCMRevision scmRevision = build.getRevision();\n        if (scmRevision == null) {\n            listener.getLogger().println(\"SCM revision is not available. Skipping notifications.\");\n            return;\n        }\n\n        // Determine if the build key is shared between branch and PR\n        boolean shareBuildKey = source.getBitbucketBuildStatus().isShareBuildKey();\n\n        // Get the SCM head\n        SCMHead head = scmRevision.getHead();\n        if (head == null) {\n            listener.getLogger().println(\"SCM head is not available. Skipping notifications.\");\n            return;\n        }\n\n        // Get the SCM head name\n        String headName = head.getName();\n        if (StringUtils.isEmpty(headName)) {\n            listener.getLogger().println(\"SCM head name is not available. Skipping notifications.\");\n            return;\n        }\n\n        // Get the SCM head URL\n        String headUrl = head.getUrl();\n        if (StringUtils.isEmpty(headUrl)) {\n            listener.getLogger().println(\"SCM head URL is not available. Skipping notifications.\");\n            return;\n        }\n\n        // Get the SCM head revision\n        SCMRevision scmHeadRevision = scmRevision.getHeadRevision();\n        if (scmHeadRevision == null) {\n            listener.getLogger().println(\"SCM head revision is not available. Skipping notifications.\");\n            return;\n        }\n\n        // Get the SCM head revision hash\n        String scmHeadRevisionHash = scmHeadRevision.getHash();\n        if (StringUtils.isEmpty(scmHeadRevisionHash)) {\n           ", "CodeBleu_score": 34.12695811748907}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\tCMRevision revision = build.getRevision();\nif (revision == null) {\n    return;\n}\nBitbucketApi bitbucketApi = source.getBitbucketApi();\nif (bitbucketApi == null) {\n    return;\n}\nBitbucketCloudApiClient bitbucketClient = bitbucketApi.getClient();\nif (bitbucketClient == null) {\n    return;\n}\nBitbucketSCMHead head = source.getHead(revision);\nif (head == null) {\n    return;\n}\nBitbucketBuildStatus.Type notificationType = BitbucketBuildStatus.Type.SUCCESS;\nif (head.isPullRequest()) {\n    notificationType = BitbucketBuildStatus.Type.PULLREQUEST_SUCCESS;\n} else if (head.isBranch()) {\n    notificationType = BitbucketBuildStatus.Type.BRANCH_SUCCESS;\n} else {\n    return;\n}\nString buildKey = getBuildKey(source, head, revision, build, listener);\nif (StringUtils.isEmpty(buildKey)) {\n    return;\n}\nBitbucketBuildStatus buildStatus = new BitbucketBuildStatus(notificationType, buildKey, revision.getSha1(),\n        revision.getDisplayName(), build.getDisplayName(), build.getUrl(),\n        build.getEnvironment(TaskListener.NULL).getDisplayName(), build.getResult().toString(),\n        build.getDurationString(), build.getStartTimeInMillis(), build.getEndTimeInMillis());\ntry {\n    bitbucketClient.createBuildStatus(buildStatus);\n} catch (IOException e) {\n    listener.error(\"Failed to send notification to Bitbucket: \" + e.getMessage());\n}\n}", "CodeBleu_score": 45.04967360199903}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\tString key = \"\";\n if (shareBuildKeyBetweenBranchAndPR) {\n key = build.getParent().getFullName() + \"-\" + branch;\n } else {\n key = build.getParent().getFullName();\n }\n return key;\n }", "CodeBleu_score": 53.041485335781914}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String buildKey;\n-    if (shareBuildKeyBetweenBranchAndPR) {\n-        String folderName = build.getParent().getFullName();\n-        buildKey = folderName + branch;\n-    } else {\n-        buildKey = build.getParent().getFullName();\n-    }\n-    return buildKey;\n+    return shareBuildKeyBetweenBranchAndPR? build.getParent().getFullName() + branch : build.getParent().getFullName();\n }", "CodeBleu_score": 46.72485905072443}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String buildKey;\n+    String buildKey = null;\n     if (shareBuildKeyBetweenBranchAndPR) {\n-        buildKey = build.getParent().getFullName() + \"/\" + branch;\n+        buildKey = build.getParent().getFullName() + \"/\" + branch;\n     } else {\n-        buildKey = build.getParent().getFullName();\n+        buildKey = build.getParent().getFullName();\n     }\n     return buildKey;\n }", "CodeBleu_score": 52.57004361183638}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\tif (this.serverUrl == null) {\nthis.serverUrl = BitbucketSCMSource.DEFAULT_SERVER_URL;\n}\nif (this.traits == null) {\nthis.traits = new ArrayList<>();\n}\nif (this.traits.isEmpty()) {\nthis.traits.add(new RegexSCMSourceFilterTrait(BitbucketSCMSource.DEFAULT_FILTER_REGEX));\nthis.traits.add(new WildcardSCMHeadFilterTrait(BitbucketSCMSource.DEFAULT_FILTER_WILDCARD));\n}\nreturn this;\n}", "CodeBleu_score": 11.285885371306174}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t\tif (server == null) {\n\t\tserver = BitbucketEndpointConfiguration.get().getServer();\n\t\tif (server == null) {\n\t\t\t// TODO: remove this once we've migrated to the new endpoint model\n\t\t\tLogger.getLogger(getClass().getName()).log(Level.WARNING, \"BitbucketSCMNavigator is using the old endpoint model and will be migrated to the new endpoint model in a future release. Please migrate to the new endpoint model to avoid this warning.\");\n\t\t}\n\t}\n\tif (traits == null) {\n\t\ttraits = new ArrayList<>();\n\t\tif (legacyFilter!= null) {\n\t\t\ttraits.add(new RegexSCMSourceFilterTrait(legacyFilter));\n\t\t}\n\t\tif (legacyWildcardFilter!= null) {\n\t\t\ttraits.add(new WildcardSCMHeadFilterTrait(legacyWildcardFilter));\n\t\t}\n\t\tif (legacySelection!= null) {\n\t\t\ttraits.add(new Selection(legacySelection));\n\t\t}\n\t}\n\treturn this;\n}", "CodeBleu_score": 25.27732988015331}, {"code": "private Object readResolve() throws ObjectStreamException{\n\tif (server == null) {\nserver = BitbucketEndpointConfiguration.get().getServerUrl();\n}\nif (server == null) {\nLOGGER.log(Level.WARNING, \"BitbucketSCMNavigator was deserialized without server URL set, using default server URL\");\n}\nif (traits == null) {\ntraits = new ArrayList<>();\n}\nif (traits.isEmpty()) {\ntraits.add(new RegexSCMSourceFilterTrait(null));\ntraits.add(new WildcardSCMHeadFilterTrait(null));\n}\nreturn this;\n}", "CodeBleu_score": 20.558124122260104}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\t}", "CodeBleu_score": 7.55486870172907}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t}", "CodeBleu_score": 7.55486870172907}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t}", "CodeBleu_score": 7.55486870172907}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tList<RefSpec> refSpecs = scm.getExtensionsList(GitSCMExtension.class)\n\t\t.stream()\n\t\t.filter(GitSCMExtension::hasBranchHashes)\n\t\t.map(GitSCMExtension::getBranchHashes)\n\t\t.flatMap(List::stream)\n\t\t.map(branchHash -> new RefSpec(branchHash))\n\t\t.collect(Collectors.toList());\n\n\tif (!refSpecs.isEmpty()) {\n\t\ttry {\n\t\t\tgit.withCredentials(() -> {\n\t\t\t\tURIish uri = URIish.fromUri(scm.getBrowser().getCloneUrl());\n\t\t\t\tFetchCommand fetch = new FetchCommand(git);\n\t\t\t\tfetch.setRemote(uri.getSchemeSpecificPart());\n\t\t\t\tfetch.setRefSpecs(refSpecs);\n\t\t\t\tfetch.setRefSpecs(refSpecs);\n\t\t\t\tfetch.call();\n\t\t\t});\n\t\t} catch (GitException e) {\n\t\t\tlistener.error(\"Failed to fetch missing commits from remote repository: \" + e.getMessage());\n\t\t}\n\t}\n\n\treturn rev;\n}", "CodeBleu_score": 46.20382918985943}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tif (rev.getSha1String() == null) {\n\t\treturn rev;\n\t}\n\n\tList<String> branchesWithHashes = scm.getBranchesWithHashes();\n\tif (branchesWithHashes == null || branchesWithHashes.isEmpty()) {\n\t\treturn rev;\n\t}\n\n\tList<RefSpec> refSpecs = branchesWithHashes.stream()\n\t\t.map(branch -> {\n\t\t\ttry {\n\t\t\t\treturn new RefSpec(branch, branch);\n\t\t\t} catch (URISyntaxException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t})\n\t\t.collect(Collectors.toList());\n\n\tif (refSpecs.isEmpty()) {\n\t\treturn rev;\n\t}\n\n\tFetchCommand fetchCommand = git.fetch()\n\t\t.setRefSpecs(refSpecs)\n\t\t.setRemote(scm.getRemote())\n\t\t.setURI(scm.getURIs().get(0))\n\t\t.setCredentialsId(scm.getCredentialsId())\n\t\t.setTransportConfigCallback(scm.getTransportConfigCallback());\n\n\ttry {\n\t\tfetchCommand.call();\n\t} catch (GitException e) {\n\t\tlistener.getLogger().println(\"Failed to fetch missing commits from remote repository.\");\n\t\tlistener.getLogger().println(e.getMessage());\n\t\treturn rev;\n\t}\n\n\tURIish uri = scm.getURIs().get(0);\n\tif (uri.toString().endsWith(\".git\")) {\n\t\turi = URIish.fromUri(uri.toString().replace(\".git\", \"\"));\n\t}\n\n\treturn new Revision(rev.getSha1String(), uri.toString());\n}", "CodeBleu_score": 46.64605903048128}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tString cloneLink = scm.getCloneUrl();\n\tList<GitSCMExtension> extensions = scm.getExtensions();\n\tList<RefSpec> refSpecs = extensions.stream()\n\t\t.filter(GitSCMExtension.class::isInstance)\n\t\t.map(GitSCMExtension.class::cast)\n\t\t.flatMap(ext -> ext.getRefSpecs().stream())\n\t\t.collect(Collectors.toList());\n\tif (refSpecs.isEmpty()) {\n\t\treturn rev;\n\t}\n\tString branch = rev.getSha1String();\n\ttry {\n\t\tURIish uriish = new URIish(cloneLink);\n\t\tif (!uriish.isRemote()) {\n\t\t\treturn rev;\n\t\t}\n\t\tFetchCommand fetchCommand = git.fetch();\n\t\tfetchCommand.setRefSpecs(refSpecs);\n\t\tfetchCommand.setURI(uriish);\n\t\tfetchCommand.setCredentialsId(scm.getCredentialsId());\n\t\tfetchCommand.setRefSpecs(refSpecs);\n\t\tfetchCommand.setRefSpecs(refSpecs);\n\t\tfetchCommand.call();\n\t\treturn rev;\n\t} catch (GitException | URISyntaxException e) {\n\t\tthrow new RuntimeException(e);\n\t}\n}", "CodeBleu_score": 46.35820610602143}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tMap<String, BitbucketHref> links = new HashMap<>();\n\tif (linksMap == null) {\n\t\treturn null;\n\t}\n\tfor (Map.Entry<String, List<BitbucketHref>> entry : linksMap.entrySet()) {\n\t\tif (entry.getValue()!= null &&!entry.getValue().isEmpty()) {\n\t\t\tlinks.put(entry.getKey(), entry.getValue().get(0));\n\t\t}\n\t}\n\treturn links;\n}", "CodeBleu_score": 66.55249062076304}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tif (links == null) {\n\t\treturn null;\n\t}\n\tMap<String, BitbucketHref> result = new HashMap<>();\n\tfor (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n\t\tresult.put(entry.getKey(), entry.getValue().get(0));\n\t}\n\treturn result;\n}", "CodeBleu_score": 69.97781870798102}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tif (links == null) {\n\t\treturn null;\n\t}\n\tMap<String, BitbucketHref> result = new HashMap<>();\n\tfor (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n\t\tif (entry.getValue()!= null &&!entry.getValue().isEmpty()) {\n\t\t\tresult.put(entry.getKey(), entry.getValue().get(0));\n\t\t}\n\t}\n\treturn result;\n}", "CodeBleu_score": 78.51775934771973}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tconst resources = resourceStates.map((resourceState) => resourceState.resource);\n\tconst resourceUris = resources.map((resource) => Uri.file(resource.fsPath));\n\tconst repositories = await SourceControl.getRepositories(resourceUris);\n\tfor (const repository of repositories) {\n\t\tconst repositoryPath = repository.root.fsPath;\n\t\tconst repositoryResourceStates = resourceStates.filter((resourceState) => resourceState.resource.fsPath.startsWith(repositoryPath));\n\t\tfor (const resourceState of repositoryResourceStates) {\n\t\t\tconst resource = resourceState.resource;\n\t\t\tconst filePath = path.join(repositoryPath, resource.fsPath.substring(repositoryPath.length));\n\t\t\ttry {\n\t\t\t\tawait repository.createResource(filePath);\n\t\t\t} catch (error) {\n\t\t\t\tconst message = `Error adding file ${filePath}: ${error}`;\n\t\t\t\tconsole.error(message);\n\t\t\t\twindow.showErrorMessage(message);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 37.57826710250589}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\tconst resources = this.getSelectedResources(resourceStates);\nif (!resources.length) {\nreturn;\n}\nconst filePaths = resources.map((resource) => resource.resourceUri.fsPath);\nconst repository = await this.getRepository(resources[0]);\nif (!repository) {\nreturn;\n}\ntry {\nawait repository.createFiles(filePaths);\n} catch (error) {\nthis.logger.error(error);\nwindow.showErrorMessage(error.message);\n}\n}", "CodeBleu_score": 48.1873696014646}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\tresourceStates", "CodeBleu_score": 2.3138270637252045}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\tprotected async getResourceStates", "CodeBleu_score": 2.87489052844018}, {"code": "protected async getResourceStates{\n\tprotected async getResourceStates", "CodeBleu_score": 2.87489052844018}, {"code": "protected async getResourceStates{\n\tprotected async getResourceStates {", "CodeBleu_score": 2.893812714621218}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t* protected async getSCMResource(uri?: Uri): Promise<Resource | undefined> {", "CodeBleu_score": 8.040802651231047}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t* async getSCMResource(uri?: Uri): Promise<Resource | undefined> {", "CodeBleu_score": 8.02916768646275}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\tif (uri) {\n  const repository = await Repository.getRepository(uri);\n  if (repository) {\n    return repository.getResource(uri);\n  }\n}\nreturn undefined;\n}", "CodeBleu_score": 15.673837389898763}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\t\tconst { repository } = element;\n\tconst { path, status, revision } = element;\n\tconst remoteRepository = await repository.getRemoteRepository();\n\tif (status === Status.Modified) {\n\t\tawait openDiff(path, remoteRepository, revision.oldRevision, revision.newRevision);\n\t} else if (status === Status.Added) {\n\t\tawait openFileRemote(remoteRepository, path, revision.newRevision);\n\t}\n}", "CodeBleu_score": 34.873080175111326}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t\tif (!element) {\n\t\treturn;\n\t}\n\tlet remote = await this.sourceControlManager.getRemoteRepository(element.path);\n\tif (!remote) {\n\t\treturn;\n\t}\n\tif (element.status === Status.Modified) {\n\t\tlet oldRevision = element.revision - 1;\n\t\tlet newRevision = element.revision;\n\t\tlet oldPath = element.path + \"@\" + oldRevision;\n\t\tlet newPath = element.path + \"@\" + newRevision;\n\t\tlet oldUrl = remote.getUrl(oldPath);\n\t\tlet newUrl = remote.getUrl(newPath);\n\t\tif (oldUrl && newUrl) {\n\t\t\tawait openDiff(oldUrl, newUrl);\n\t\t}\n\t} else if (element.status === Status.Added) {\n\t\tlet newPath = element.path + \"@\" + element.revision;\n\t\tlet newUrl = remote.getUrl(newPath);\n\t\tif (newUrl) {\n\t\t\tawait openFileRemote(newUrl);\n\t\t}\n\t}\n}", "CodeBleu_score": 38.853892735131964}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t\tconst remote = await this.sourceControlManager.getRemoteRepository(element);\n\tif (element.status === Status.MODIFIED) {\n\t\tconst remotePath = element.path.replace(remote.localPath, remote.remotePath);\n\t\tconst remotePathWithRevision = `${remotePath}@${element.revision}`;\n\t\tconst oldRevision = element.oldRevision;\n\t\tconst newRevision = element.newRevision;\n\t\tconst oldRevisionWithRevision = `${remotePathWithRevision}@${oldRevision}`;\n\t\tconst newRevisionWithRevision = `${remotePathWithRevision}@${newRevision}`;\n\t\treturn await openDiff(remote.remotePath, oldRevisionWithRevision, newRevisionWithRevision);\n\t} else if (element.status === Status.ADDED) {\n\t\treturn await openFileRemote(element.path, element.revision, remote.remotePath);\n\t}\n}", "CodeBleu_score": 39.23619583077604}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t{ copyCommitToClipboard }", "CodeBleu_score": 7.252896591601103}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!env.clipboard.writeText) {\n\t\twindow.showErrorMessage(`Cannot copy ${what} to clipboard.`);\n\t\treturn;\n\t}\n\n\tif (item.type === \"commit\") {\n\t\tconst commit = item as ICommitTreeItem;\n\t\tconst commitMessage = commit.commit.message;\n\t\tconst commitRevision = commit.commit.revision;\n\t\tconst commitRevisionUrl = commit.commit.revisionUrl;\n\t\tconst commitRevisionAuthor = commit.commit.revisionAuthor;\n\t\tconst commitRevisionDate = commit.commit.revisionDate;\n\t\tconst commitRevisionDateRelative = commit.commit.revisionDateRelative;\n\n\t\tconst message = `${commitRevision} ${commitRevisionUrl}\n${commitRevisionAuthor} ${commitRevisionDate} ${commitRevisionDateRelative}\n\n${commitMessage}`;\n\n\t\tawait env.clipboard.writeText(message);\n\t} else if (item.type === \"path\") {\n\t\tconst path = item as IPathTreeItem;\n\t\tconst pathRevision = path.path.revision;\n\t\tconst pathRevisionUrl = path.path.revisionUrl;\n\t\tconst pathRevisionAuthor = path.path.revisionAuthor;\n\t\tconst pathRevisionDate = path.path.revisionDate;\n\t\tconst pathRevisionDateRelative = path.path.revisionDateRelative;\n\n\t\tconst message = `${pathRevision} ${pathRevisionUrl}\n${pathRevisionAuthor} ${pathRevisionDate} ${pathRevisionDateRelative}\n\n${path.path.path}`;\n\n\t\tawait env.clipboard.writeText(message);\n\t}\n}", "CodeBleu_score": 30.759171973848463}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\tasync function copyCommitToClipboard(what: string, item: ILogTreeItem) {", "CodeBleu_score": 11.007628408018169}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t\tfor (GiteaConnectionFactory factory : ServiceLoader.load(GiteaConnectionFactory.class)) {\n\t\ttry {\n\t\t\treturn factory.open();\n\t\t} catch (IOException e) {\n\t\t\t// Ignore this exception, try the next factory\n\t\t}\n\t}\n\tthrow new IOException(\"No suitable GiteaConnectionFactory found\");\n}", "CodeBleu_score": 12.56897625821275}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t\tGiteaConnectionFactory factory = null;\n\tfor (GiteaConnectionFactory f : ServiceLoader.load(GiteaConnectionFactory.class)) {\n\t\tif (f.isAvailable()) {\n\t\t\tfactory = f;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (factory == null) {\n\t\tthrow new IOException(\"No GiteaConnectionFactory available\");\n\t}\n\treturn factory.open();\n}", "CodeBleu_score": 20.622878331968288}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t\tfor (GiteaConnectionFactory factory : ServiceLoader.load(GiteaConnectionFactory.class)) {\n\t\ttry {\n\t\t\treturn factory.open();\n\t\t} catch (IOException e) {\n\t\t\t// ignore\n\t\t}\n\t}\n\tthrow new IOException(\"No suitable GiteaConnectionFactory found\");\n}", "CodeBleu_score": 12.56897625821275}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tfinal Jenkins jenkins = Jenkins.get();\n\tif (jenkins!= null) {\n\t\treturn jenkins.getPluginManager().uberClassLoader;\n\t}\n\treturn Gitea.class.getClassLoader();\n}", "CodeBleu_score": 33.38708292836744}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tfinal Jenkins jenkins = Jenkins.get();\n\tif (jenkins!= null) {\n\t\treturn jenkins.getPluginManager().uberClassLoader;\n\t}\n\treturn new Gitea(new GiteaConnectionFactory() {\n\t\t@NonNull\n\t\t@Override\n\t\tpublic GiteaConnection createConnection(@NonNull String url, @NonNull String username, @NonNull String password) throws IOException {\n\t\t\treturn new GiteaConnection(url, username, password);\n\t\t}\n\t});\n}", "CodeBleu_score": 29.401525995207027}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tfinal Jenkins jenkins = Jenkins.get();\n\tClassLoader classLoader = jenkins == null? Thread.currentThread().getContextClassLoader() : jenkins.pluginManager.uberClassLoader;\n\treturn new Gitea(classLoader);\n}", "CodeBleu_score": 46.9602850974995}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\tthis.displayName = Util.fixEmptyAndTrim(displayName);\n\tthis.serverUrl = normalizeUrl(serverUrl);\n\tthis.manageHooks = manageHooks;\n\tthis.aliasUrl = normalizeUrl(aliasUrl);\n\tthis.credentialsId = credentialsId;\n}", "CodeBleu_score": 32.20644434711711}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\tthis.displayName = displayName;\n\tthis.serverUrl = normalizeUrl(serverUrl);\n\tthis.manageHooks = manageHooks;\n\tthis.aliasUrl = normalizeUrl(aliasUrl);\n\tif (credentialsId!= null) {\n\t\tthis.credentialsId = credentialsId;\n\t}\n}", "CodeBleu_score": 28.269704445895695}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\tif (StringUtils.isBlank(displayName)) {\n\t\tdisplayName = deriveDisplayName(serverUrl);\n\t}\n\tif (StringUtils.isBlank(aliasUrl)) {\n\t\taliasUrl = deriveAliasUrl(serverUrl);\n\t}\n\tif (StringUtils.isBlank(displayName)) {\n\t\tdisplayName = \"Gitea server\";\n\t}\n\tthis.displayName = displayName;\n\tthis.serverUrl = normalizeServerUrl(serverUrl);\n\tthis.manageHooks = manageHooks;\n\tthis.credentialsId = credentialsId;\n\tthis.aliasUrl = normalizeAliasUrl(aliasUrl);\n}", "CodeBleu_score": 41.41692101112454}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tif (StringUtils.isEmpty(serverUrl)) {\n\t\treturn new StandardListBoxModel().includeEmptyValue();\n\t}\n\ttry {\n\t\tURI serverUri = new URI(serverUrl);\n\t\tif (serverUri.getScheme() == null) {\n\t\t\tserverUri = new URI(Gitea.SCHEME, serverUri.getPath(), serverUri.getQuery(), serverUri.getFragment());\n\t\t}\n\t\tif (!serverUri.isAbsolute()) {\n\t\t\tserverUri = new URI(Jenkins.get().getRootUrl(), serverUri.getPath(), serverUri.getQuery(), serverUri.getFragment());\n\t\t}\n\t\tserverUrl = serverUri.toString();\n\t} catch (URISyntaxException e) {\n\t\treturn new StandardListBoxModel().includeEmptyValue();\n\t}\n\tif (serverUrl.endsWith(\"/\")) {\n\t\tserverUrl = serverUrl.substring(0, serverUrl.length() - 1);\n\t}\n\tif (serverUrl.endsWith(\"api/v1\")) {\n\t\tserverUrl = serverUrl.substring(0, serverUrl.length() - 4);\n\t}\n\tif (serverUrl.endsWith(\"/api/v1\")) {\n\t\tserverUrl = serverUrl.substring(0, serverUrl.length() - 5);\n\t}\n\tif (serverUrl.endsWith(\"/api/v1/\")) {\n\t\tserverUrl = serverUrl.substring(0, serverUrl.length() - 6);\n\t}\n\tif (serverUrl.endsWith(\"api/v1/\")) {\n\t\tserverUrl = serverUrl.substring(0, serverUrl.length() - 7);\n\t}\n\tif (serverUrl.endsWith(\"/\")) {\n\t\tserverUrl = serverUrl.substring(0, serverUrl.length() - 1);\n\t}\n\tif (serverUrl.endsWith(\"/api/v1\")) {\n\t\tserverUrl = serverUrl.substring(0, serverUrl.length() - 4);\n\t}\n\tif (serverUrl.endsWith(\"/api/v1/\")) {\n\t\tserverUrl = serverUrl.substring(0, serverUrl.length() - 5);\n\t}\n\tif (serverUrl.endsWith(\"api/v1/\")) {\n\t\tserverUrl = serverUrl.substring(0, serverUrl.length() - ", "CodeBleu_score": 32.530019827177185}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tif (StringUtils.isEmpty(serverUrl)) {\n\t\treturn new StandardListBoxModel();\n\t}\n\ttry {\n\t\tURI serverUri = new URI(serverUrl);\n\t\tif (serverUri.isAbsolute()) {\n\t\t\tserverUrl = serverUri.normalize().toString();\n\t\t} else {\n\t\t\tserverUrl = new URI(Jenkins.getInstance().getRootUrl(), serverUrl).normalize().toString();\n\t\t}\n\t} catch (URISyntaxException e) {\n\t\treturn new StandardListBoxModel();\n\t}\n\tif (Jenkins.getAuthentication() == null) {\n\t\treturn new StandardListBoxModel();\n\t}\n\tif (Jenkins.getAuthentication().hasPermission(Jenkins.ADMINISTER)) {\n\t\treturn new StandardListBoxModel()\n\t\t\t\t.withEmptySelection()\n\t\t\t\t.withAll(CredentialsProvider.lookupCredentials(StandardCredentials.class, Jenkins.getInstance(), ACL.SYSTEM, URIRequirementBuilder.fromUri(serverUrl).build()));\n\t} else {\n\t\treturn new StandardListBoxModel()\n\t\t\t\t.withEmptySelection()\n\t\t\t\t.withAll(CredentialsProvider.lookupCredentials(StandardCredentials.class, Jenkins.getInstance(), ACL.SYSTEM, URIRequirementBuilder.fromUri(serverUrl).build()))\n\t\t\t\t.withMatching(CredentialsMatchers.withId(GiteaAuth.AUTH_TOKEN_ID), AuthenticationTokens.getDefaultAuthenticationTokens(GiteaAuth.AUTH_TOKEN_ID));\n\t}\n}", "CodeBleu_score": 39.48301523505211}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\ttry {\n\t\tif (serverUrl!= null && serverUrl.length() > 0) {\n\t\t\tserverUrl = Util.fixEmptyAndTrim(serverUrl);\n\t\t\tif (serverUrl.startsWith(\"http\")) {\n\t\t\t\tserverUrl = serverUrl.substring(serverUrl.indexOf(\"//\") + 2);\n\t\t\t}\n\t\t\tif (serverUrl.endsWith(\"/\")) {\n\t\t\t\tserverUrl = serverUrl.substring(0, serverUrl.length() - 1);\n\t\t\t}\n\t\t\tserverUrl = serverUrl.replaceAll(\"/$\", \"\");\n\t\t\tserverUrl = serverUrl.replaceAll(\"^https?://\", \"\");\n\t\t\tserverUrl = serverUrl.replaceAll(\"^www\\\\.\", \"\");\n\t\t\tserverUrl = serverUrl.replaceAll(\"^gitea\\\\.\", \"\");\n\t\t\tserverUrl = serverUrl.replaceAll(\"^git\\\\.\", \"\");\n\t\t\tserverUrl = serverUrl.replaceAll(\"^git@\", \"\");\n\t\t\tserverUrl = serverUrl.replaceAll(\"^git:\", \"\");\n\t\t\tserverUrl = serverUrl.replaceAll(\"^git://\", \"\");\n\t\t\tserverUrl = serverUrl.replaceAll(\"^git://\", \"\");\n\t\t\tserverUrl = serverUrl.replaceAll(\"^git+ssh\", \"\");\n\t\t\tserverUrl = serverUrl.replaceAll(\"^git+ssh:\", \"\");\n\t\t\tserverUrl = serverUrl.replaceAll(\"^ssh\\\\:\", \"\");\n\t\t\tserverUrl = serverUrl.replaceAll(\"^ssh:\", \"\");\n\t\t\tserverUrl = serverUrl.replaceAll(\"^ssh://\", \"\");\n\t\t\tserverUrl = serverUrl.replaceAll(\"^ssh://\", \"\");\n\t\t\tserverUrl = serverUrl.replaceAll(\"^ssh+git\", \"\");\n\t\t\tserverUrl = serverUrl.replaceAll(\"^ssh+git:\", \"\");\n\t\t\tserverUrl = serverUrl.replaceAll(\"^git+ssh\", \"\");\n\t\t\tserverUrl = serverUrl.replaceAll(\"^git+ssh:\", \"\");\n\t\t\tserverUrl = serverUrl.replaceAll(\"^git+ssh\", \"\");\n\t\t\tserverUrl = serverUrl.replaceAll(\"^git+ssh:\", \"\");\n\t\t\tserverUrl = serverUrl.replaceAll(\"^ssh+git\", \"\");\n\t\t\tserverUrl = serverUrl.replaceAll(\"^ssh+git:\", \"\");\n\t\t\tserverUrl = serverUrl.replaceAll(\"^git+ssh\", \"\");\n\t\t\tserverUrl = serverUrl.replaceAll(\"^git+ssh:\", \"\");\n\t\t\tserverUrl = serverUrl.replaceAll(\"^git+ssh\", \"\");\n\t\t\tserverUrl = serverUrl.replaceAll(\"^git+ssh:\", \"\");\n\t\t\tserverUrl = serverUrl.replaceAll(\"^ssh+git\",", "CodeBleu_score": 30.833843278609603}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tURI uri = new URI(serverUrl);\n\t\tString scheme = uri.getScheme();\n\t\tString host = uri.getHost();\n\t\tint port = uri.getPort();\n\t\tif (scheme == null) {\n\t\t\tscheme = \"http\";\n\t\t}\n\t\tif (host == null) {\n\t\t\thost = \"localhost\";\n\t\t}\n\t\tif (port == -1) {\n\t\t\tif (\"http\".equals(scheme)) {\n\t\t\t\tport = 80;\n\t\t\t} else if (\"https\".equals(scheme)) {\n\t\t\t\tport = 443;\n\t\t\t}\n\t\t}\n\t\treturn scheme + \"://\" + host + \":\" + port;\n\t} catch (URISyntaxException e) {\n\t\treturn serverUrl;\n\t}\n}", "CodeBleu_score": 30.363375248654194}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\n\ttry {\n\t\tURI uri = new URI(serverUrl);\n\t\turi = new URI(uri.getScheme().toLowerCase(Locale.ENGLISH), uri.getUserInfo(), uri.getHost(), uri.getPort() == -1? uri.getScheme().equals(\"http\")? 80 : 443 : uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment());\n\t\treturn uri.toString();\n\t} catch (URISyntaxException e) {\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 30.61515966454525}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tURI uri = new URI(serverUrl);\n\t\tif (uri.getPort() == -1) {\n\t\t\tif (uri.getScheme().equals(\"http\")) {\n\t\t\t\turi = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), 80, uri.getPath(), uri.getQuery(), uri.getFragment());\n\t\t\t} else if (uri.getScheme().equals(\"https\")) {\n\t\t\t\turi = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), 443, uri.getPath(), uri.getQuery(), uri.getFragment());\n\t\t\t}\n\t\t}\n\t\treturn uri.toString();\n\t} catch (URISyntaxException e) {\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 29.493462547309175}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\t\tListBoxModel items = new ListBoxModel();\n\tSet<String> giteaServers = new HashSet<>();\n\tfor (GiteaServer giteaServer : GiteaServer.all()) {\n\t\tgiteaServers.add(giteaServer.getUrl());\n\t}\n\tfor (String giteaServer : giteaServers) {\n\t\tString displayName = giteaServer;\n\t\ttry {\n\t\t\tURI uri = new URI(giteaServer);\n\t\t\tif (uri.getHost()!= null) {\n\t\t\t\tdisplayName = uri.getHost();\n\t\t\t}\n\t\t} catch (URISyntaxException e) {\n\t\t\t// Ignore\n\t\t}\n\t\titems.add(displayName, giteaServer);\n\t}\n\treturn items;\n}", "CodeBleu_score": 34.54071931651869}, {"code": "public ListBoxModel getServerItems(){\n\t\tListBoxModel model = new ListBoxModel();\n\tExtensionList<GiteaServer> servers = ExtensionList.lookup(GiteaServer.class);\n\tfor (GiteaServer server : servers) {\n\t\tif (server!= null) {\n\t\t\tString displayName = server.getDisplayName();\n\t\t\tif (StringUtils.isBlank(displayName)) {\n\t\t\t\tmodel.add(server.getUrl(), server.getUrl());\n\t\t\t} else {\n\t\t\t\tmodel.add(displayName, server.getUrl());\n\t\t\t}\n\t\t}\n\t}\n\treturn model;\n}", "CodeBleu_score": 39.825258896673844}, {"code": "public ListBoxModel getServerItems(){\n\t\tfinal ListBoxModel m = new ListBoxModel();\n\tfinal ExtensionList<GiteaServer> servers = ExtensionList.lookup(GiteaServer.class);\n\tfor (GiteaServer server : servers) {\n\t\tm.add(server.getDisplayName(), server.getUrl());\n\t}\n\treturn m;\n}", "CodeBleu_score": 30.563178857764385}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tif (servers == null) {\n\t\tservers = Collections.emptyList();\n\t}\n\tList<GiteaServer> newServers = new ArrayList<>();\n\tfor (GiteaServer server : servers) {\n\t\tif (server!= null) {\n\t\t\tif (server.getUrl()!= null &&!server.getUrl().isEmpty()) {\n\t\t\t\ttry {\n\t\t\t\t\tnewServers.add(server);\n\t\t\t\t} catch (URISyntaxException e) {\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tthis.servers = newServers;\n\tsave();\n}", "CodeBleu_score": 29.814989743608262}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tif (servers == null) {\n\t\tservers = new ArrayList<GiteaServer>();\n\t}\n\tList<GiteaServer> newServers = new ArrayList<GiteaServer>();\n\tfor (GiteaServer server : servers) {\n\t\tif (server!= null) {\n\t\t\tif (server.getUri()!= null) {\n\t\t\t\tif (server.getUri().length() > 0) {\n\t\t\t\t\tif (server.getUri().endsWith(\"/\")) {\n\t\t\t\t\t\tserver.setUri(server.getUri().substring(0, server.getUri().length() - 1));\n\t\t\t\t\t}\n\t\t\t\t\ttry {\n\t\t\t\t\t\tnew URI(server.getUri());\n\t\t\t\t\t} catch (URISyntaxException e) {\n\t\t\t\t\t\t// ignore\n\t\t\t\t\t}\n\t\t\t\t\tnewServers.add(server);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tservers = newServers;\n\tCollections.sort(servers);\n\tfor (GiteaServer server : servers) {\n\t\tif (server.getUri() == null) {\n\t\t\tserver.setUri(\"\");\n\t\t}\n\t}\n\tservers.trimToSize();\n\tif (servers.size() == 0) {\n\t\tservers.add(new GiteaServer(\"http://localhost:3000\"));\n\t}\n\tif (servers.size() > 1) {\n\t\tfor (int i = 0; i < servers.size() - 1; i++) {\n\t\t\tif (servers.get(i).getUri().equals(servers.get(i + 1).getUri())) {\n\t\t\t\tservers.remove(i + 1);\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\t}\n\tif (servers.size() > 0) {\n\t\tfor (GiteaServer server : servers) {\n\t\t\tif (server.getUri() == null) {\n\t\t\t\tserver.setUri(\"\");\n\t\t\t}\n\t\t}\n\t}\n\tif (servers.size() > 0) {\n\t\tfor (GiteaServer server : servers) {\n\t\t\tif (server.getUri().length() == 0) {\n\t\t\t\tserver.setUri(\"\");\n\t\t\t}\n\t\t}\n\t}\n\tthis.servers = servers;\n\tsave();\n}", "CodeBleu_score": 28.733186324084077}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tif (servers == null) {\n\t\tservers = Collections.emptyList();\n\t}\n\tSet<GiteaServer> newServers = new HashSet<GiteaServer>(servers);\n\tfor (Iterator<GiteaServer> it = newServers.iterator(); it.hasNext(); ) {\n\t\tGiteaServer server = it.next();\n\t\tif (server.getUrl() == null || server.getUrl().isEmpty()) {\n\t\t\tit.remove();\n\t\t}\n\t}\n\tif (servers.size()!= newServers.size()) {\n\t\tsave();\n\t}\n\tservers = newServers;\n\n\tif (servers.isEmpty()) {\n\t\tservers = Collections.emptyList();\n\t}\n\tthis.servers = servers;\n\tsave();\n}", "CodeBleu_score": 37.161214524040496}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn false;\n\t}\n\tserverUrl = normalizeServerUrl(serverUrl);\n\tList<GiteaServer> servers = getServers();\n\tIterator<GiteaServer> serverIterator = servers.iterator();\n\twhile (serverIterator.hasNext()) {\n\t\tGiteaServer server = serverIterator.next();\n\t\tif (server.getUrl().equals(serverUrl)) {\n\t\t\tserverIterator.remove();\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 36.15386400748093}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn false;\n\t}\n\n\tserverUrl = normalizeServerUrl(serverUrl);\n\n\tboolean removed = false;\n\tList<GiteaServer> servers = getServers();\n\tIterator<GiteaServer> it = servers.iterator();\n\twhile (it.hasNext()) {\n\t\tGiteaServer server = it.next();\n\t\tif (server.getUrl().equals(serverUrl)) {\n\t\t\tit.remove();\n\t\t\tremoved = true;\n\t\t}\n\t}\n\n\tsetServers(servers);\n\treturn removed;\n}", "CodeBleu_score": 47.14835808042659}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn false;\n\t}\n\n\tURI uri;\n\ttry {\n\t\turi = new URI(serverUrl);\n\t} catch (URISyntaxException e) {\n\t\treturn false;\n\t}\n\n\tGiteaServer server = getServer(uri);\n\tif (server == null) {\n\t\treturn false;\n\t}\n\n\tservers.remove(server);\n\treturn true;\n}", "CodeBleu_score": 17.98243080745962}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t\n}", "CodeBleu_score": 7.826411051197965}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t\tfor (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {\n\t\tif (element.getKind() == ElementKind.METHOD) {\n\t\t\tExecutableElement executableElement = (ExecutableElement) element;\n\t\t\tString type = executableElement.getReturnType().toString();\n\t\t\tString name = executableElement.getSimpleName().toString();\n\t\t\tString description = executableElement.getAnnotation(ConfigValue.class).description();\n\t\t\tString value = executableElement.getAnnotation(ConfigValue.class).value();\n\t\t\tString group = executableElement.getAnnotation(ConfigValue.class).group();\n\t\t\tString key = executableElement.getAnnotation(ConfigValue.class).key();\n\t\t\tString defaultValue = executableElement.getAnnotation(ConfigValue.class).defaultValue();\n\t\t\tString typeConverter = executableElement.getAnnotation(ConfigValue.class).typeConverter();\n\t\t\tString typeConverterFactory = executableElement.getAnnotation(ConfigValue.class).typeConverterFactory();\n\t\t\tString typeConverterFactoryClass = executableElement.getAnnotation(ConfigValue.class).typeConverterFactoryClass();\n\t\t\tString typeConverterFactoryMethod = executableElement.getAnnotation(ConfigValue.class).typeConverterFactoryMethod();\n\t\t\tString typeConverterClass = executableElement.getAnnotation(ConfigValue.class).typeConverterClass();\n\t\t\tString typeConverterMethod = executableElement.getAnnotation(ConfigValue.class).typeConverterMethod();\n\t\t\tString typeConverterMethodClass = executableElement.getAnnotation(ConfigValue.class).typeConverterMethodClass();\n\t\t\tString typeConverterMethodMethod = executableElement.getAnnotation(ConfigValue.class).typeConverterMethodMethod();\n\t\t\tString typeConverterMethodMethodClass = executableElement.getAnnotation(ConfigValue.class).typeConverterMethodMethodClass();\n\t\t\tString typeConverterMethodMethodMethod = executableElement.getAnnotation(ConfigValue.class).typeConverterMethodMethodMethod();\n\t\t\tString typeConverterMethodMethodMethodClass = executableElement.getAnnotation(ConfigValue.class).typeConverterMethodMethodMethodClass();\n\t\t\tString typeConverterMethodMethodMethodMethod = executableElement.getAnnotation(ConfigValue.class).typeConverterMethodMethodMethodMethod();\n\t\t\tString typeConverterMethodMethodMethodMethodClass = executableElement.getAnnotation(ConfigValue.class).typeConverterMethodMethodMethodMethodClass();\n\t\t\tString typeConverterMethodMethodMethodMethodMethod = executableElement.getAnnotation(ConfigValue.class).typeConverterMethodMethodMethodMethodMethod();\n\t\t\tString typeConverterMethodMethodMethodMethodMethodClass = executableElement.getAnnotation(ConfigValue.", "CodeBleu_score": 30.8554108332824}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t\tSet<? extends Element> annotatedElements = roundEnv.getElementsAnnotatedWith(annotation);\n\tfor (Element annotatedElement : annotatedElements) {\n\t\tif (annotatedElement.getKind() == ElementKind.METHOD) {\n\t\t\tExecutableElement method = (ExecutableElement) annotatedElement;\n\t\t\tString name = method.getSimpleName().toString();\n\t\t\tTypeElement returnType = (TypeElement) method.getReturnType();\n\t\t\tString type = returnType.getQualifiedName().toString();\n\t\t\tList<? extends VariableElement> parameters = method.getParameters();\n\t\t\tMap<String, String> attributes = Maps.newHashMap();\n\t\t\tfor (VariableElement parameter : parameters) {\n\t\t\t\tString key = parameter.getSimpleName().toString();\n\t\t\t\tString value = parameter.asType().toString();\n\t\t\t\tattributes.put(key, value);\n\t\t\t}\n\t\t\tdescriptorElements.add(new DescriptorElement(name, type, attributes));\n\t\t}\n\t}\n}", "CodeBleu_score": 43.754416432814494}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\tfor (TypeElement annotation : annotations) {\n\t\tif (annotationClass.getName().equals(annotation.getQualifiedName().toString().replaceAll(\"\\\\$\", \".\"))) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 47.72579190385191}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\tfor (TypeElement annotation : annotations) {\n\t\tif (annotation.getQualifiedName().toString().equals(annotationClass.getName().replace(\"$\", \".\"))) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 51.29977685274749}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\tfor (TypeElement annotation : annotations) {\n\t\tString qualifiedName = annotation.getQualifiedName().toString();\n\t\tString targetQualifiedName = annotationClass.getName().replace(\"$\", \".\");\n\t\tif (qualifiedName.equals(targetQualifiedName)) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 42.56566116259772}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n        \"status\": \"Open\",\n        \"is_group\": 0,\n    }\n\n    if approver_id:\n        filters.update({\"approver\": approver_id})\n\n    if for_approval:\n        filters.update({\"docstatus\": 1, \"status\": [\"not in\", [\"Approved\", \"Rejected\", \"Cancelled\"]]})\n    else:\n        filters.update({\"docstatus\": 1, \"status\": [\"not in\", [\"Cancelled\"]]})\n\n    return filters\n\n", "CodeBleu_score": 26.370897863186293}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\"employee\": employee}\n    if approver_id:\n        filters[\"approver\"] = approver_id\n\n    if for_approval:\n        filters[\"status\"] = [\"!=\", \"Cancelled\"]\n        filters[\"status\"] = [\"!=\", \"Rejected\"]\n        filters[\"status\"] = [\"!=\", \"Approved\"]\n        filters[\"status\"] = [\"!=\", \"Rejected\"]\n        filters[\"status\"] = [\"!=\", \"Cancelled\"]\n        filters[\"status\"] = [\"!=\", \"Draft\"]\n        filters[\"status\"] = [\"!=\", \"Open\"]\n\n        if approver_id:\n            filters[\"status\"] = [\"!=\", \"Approved\"]\n            filters[\"status\"] = [\"!=\", \"Rejected\"]\n            filters[\"status\"] = [\"!=\", \"Cancelled\"]\n            filters[\"status\"] = [\"!=\", \"Draft\"]\n            filters[\"status\"] = [\"!=\", \"Open\"]\n\n    else:\n        filters[\"status\"] = [\"!=\", \"Cancelled\"]\n\n    return filters\n\n", "CodeBleu_score": 23.19949730405506}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\"employee\": employee}\n    if approver_id:\n        filters[\"approver\"] = approver_id\n\n    if for_approval:\n        filters[\"status\"] = [\"in\", [\"Pending Approval\", \"Approved\", \"Rejected\"]]\n        filters[\"name\"] = [\"!=\", employee]\n    else:\n        filters[\"status\"] = [\"in\", [\"Open\", \"Approved\", \"Rejected\"]]\n        filters[\"name\"] = [\"!=\", employee]\n\n    return filters\n\n", "CodeBleu_score": 26.579799968604778}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = getdate()\n    leave_details = get_leave_details(employee, current_date)\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {\"allocated\": 0, \"balance\": 0}\n        for leave_detail in leave_details[leave_type]:\n            leave_balance_map[leave_type][\"allocated\"] += leave_detail.allocated\n            leave_balance_map[leave_type][\"balance\"] += leave_detail.balance\n    return leave_balance_map\n\n", "CodeBleu_score": 40.62866524448558}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    from erpnext.hr.leave_management.leave_management import get_leave_details\n\n    current_date = getdate()\n    leave_details = get_leave_details(employee, current_date)\n    leave_balance_map = {}\n\n    for leave_type in leave_details:\n        leave_details[leave_type][\"allocated\"] = leave_details[leave_type].get(\"allocated\") or 0\n        leave_details[leave_type][\"balance\"] = leave_details[leave_type].get(\"balance\") or 0\n        leave_balance_map[leave_type] = leave_details[leave_type]\n\n    return leave_balance_map\n\n", "CodeBleu_score": 39.277095878692535}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = getdate()\n    leave_details = get_leave_details(employee, current_date)\n    leave_balance_map = {}\n    for leave_type, leave_details_for_type in leave_details.items():\n        leave_balance_map[leave_type] = {}\n        for leave_status, details in leave_details_for_type.items():\n            leave_balance_map[leave_type][leave_status] = details[\"balance\"]\n    return leave_balance_map\n\n", "CodeBleu_score": 41.95830157360969}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n\n    holiday_list = frappe.db.sql(\n        \"\"\"\n        SELECT\n            holiday_list.name,\n            holiday_list.holiday_date,\n            holiday_list.holiday_type,\n            holiday_list.holiday_status,\n            holiday_list.holiday_description\n        FROM\n            `tabHoliday List` AS holiday_list\n        WHERE\n            holiday_list.employee = %s AND\n            holiday_list.holiday_type!= 'Weekly Off'\n        ORDER BY\n            holiday_list.holiday_date ASC\n        \"\"\",\n        employee,\n        as_dict=True,\n    )\n\n    holiday_list = [\n        {\n            \"name\": holiday.name,\n            \"holiday_date\": getdate(holiday.holiday_date),\n            \"holiday_type\": holiday.holiday_type,\n            \"holiday_status\": holiday.holiday_status,\n            \"holiday_description\": strip_html(holiday.holiday_description),\n        }\n        for holiday in holiday_list\n    ]\n\n    return holiday_list\n\n", "CodeBleu_score": 26.712661979578062}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.get_all(\n        \"Holiday List\",\n        filters={\n            \"employee\": employee,\n            \"status\": \"Open\",\n            \"holiday_date\": [\"<=\", getdate()],\n            \"exclude_weekly_off\": 0,\n        },\n        order_by=\"holiday_date\",\n        as_dict=True,\n    )\n    holidays = [\n        {\n            \"holiday_name\": holiday.holiday_name,\n            \"holiday_date\": holiday.holiday_date,\n            \"holiday_type\": holiday.holiday_type,\n            \"holiday_description\": strip_html(holiday.holiday_description),\n        }\n        for holiday in holiday_list\n    ]\n    return holidays\n\n", "CodeBleu_score": 32.025488573843205}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.db.sql(\n        \"\"\"\n        SELECT\n            holiday_date, holiday_type, holiday_name, description\n        FROM\n            `tabHoliday`\n        WHERE\n            employee = %s\n            AND holiday_date >= %s\n            AND holiday_date <= %s\n            AND holiday_type NOT IN ('Weekly Off')\n        ORDER BY\n            holiday_date\n        \"\"\",\n        (employee, getdate(frappe.utils.add_months(getdate(), -12)), getdate()),\n        as_dict=True,\n    )\n\n    holiday_list = [\n        {\n            \"holiday_date\": holiday.get(\"holiday_date\"),\n            \"holiday_type\": holiday.get(\"holiday_type\"),\n            \"holiday_name\": holiday.get(\"holiday_name\"),\n            \"description\": strip_html(holiday.get(\"description\")),\n        }\n        for holiday in holiday_list\n    ]\n\n    return holiday_list\n\n", "CodeBleu_score": 30.158978620317463}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t\n    if not frappe.db.exists(\"HR Settings\", \"HR Settings\"):\n        return\n\n    holiday_reminder_settings = frappe.get_doc(\"HR Settings\", \"HR Settings\").holiday_reminder_settings\n    if not holiday_reminder_settings.send_reminders_in_advance:\n        return\n\n    if holiday_reminder_settings.reminder_frequency!= \"Weekly\":\n        return\n\n    send_reminders_in_advance_weekly_reminders(holiday_reminder_settings)\n\n", "CodeBleu_score": 33.693414824124716}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    from frappe.utils import get_datetime\n    from frappe.utils.date_utils import get_first_day_of_week, get_last_day_of_week\n    from frappe.utils.user import get_system_user\n\n    if frappe.db.get_value(\"HR Settings\", None, \"send_reminders_in_advance\"):\n        if frappe.db.get_value(\"HR Settings\", None, \"send_reminders_in_advance_weekly\"):\n            if frappe.db.get_value(\"HR Settings\", None, \"send_reminders_in_advance_weekly_frequency\") == \"Weekly\":\n                reminders = frappe.db.sql(\"\"\"select name, employee, employee_name, holiday_list, holiday_list_name, holiday_type, holiday_date, holiday_date_formatted, holiday_status, holiday_status_formatted, holiday_status_formatted_for_employee, holiday_status_formatted_for_employee_list, holiday_status_formatted_for_employee_list_list, holiday_status_formatted_for_employee_list_list_list, holiday_status_formatted_for_employee_list_list_list_list, holiday_status_formatted_for_employee_list_list_list_list_list, holiday_status_formatted_for_employee_list_list_list_list_list_list, holiday_status_formatted_for_employee_list_list_list_list_list_list_list, holiday_status_formatted_for_employee_list_list_list_list_list_list_list_list, holiday_status_formatted_for_employee_list_list_list_list_list_list_list_list_list, holiday_status_formatted_for_employee_list_list_list_list_list_list_list_list_list_list, holiday_status_formatted_for_employee_list_list_list_list_list_list_list_list_list_list_list, holiday_status_formatted_for_employee_list_list_list_list_list_list_list_list_list_list_list_list, holiday_status_formatted_for_", "CodeBleu_score": 29.77134723007503}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    settings = frappe.get_doc(\"HR Settings\")\n    if settings.send_reminders_in_advance == 1 and settings.send_reminders_in_advance_frequency == \"Weekly\":\n        send_reminders_in_advance_weekly_function()\n\n", "CodeBleu_score": 18.91400285797868}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t\n    self_appraisal_score = 0\n    for self_rating in self.self_ratings:\n        self_appraisal_score += flt(self_rating.rating) * flt(self_rating.weightage) * 5\n    self.self_appraisal_score = flt(self_appraisal_score / 100)\n\n", "CodeBleu_score": 24.92319937844972}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self_appraisal_score = 0\n    for self_rating in self.self_ratings:\n        self_appraisal_score += flt(self_rating.rating) * flt(self_rating.percentage_weightage) * 5\n    self.self_appraisal_score = flt(self_appraisal_score, 2)\n\n", "CodeBleu_score": 24.840921593314526}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self_appraisal_score = 0\n    for self_rating in self.self_ratings:\n        self_appraisal_score += flt(self_rating.rating) * 5 * flt(self_rating.percentage_weightage)\n    self_appraisal_score = flt(self_appraisal_score, 2)\n    self.self_appraisal_score = self_appraisal_score\n\n", "CodeBleu_score": 24.385058821815203}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle.formula:\n        self.final_score = self.calculate_score_from_formula(appraisal_cycle.formula)\n    else:\n        self.final_score = self.calculate_score()\n    self.final_score = flt(self.final_score)\n    self.final_score = self.final_score.quantize(self.precision_as_float)\n\n", "CodeBleu_score": 19.490882227193616}, {"code": "def calculate_final_score(self)\n\t\n    validate_active_appraisal_cycle(self.appraisal_cycle)\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle.final_score_formula:\n        self.final_score = self.calculate_final_score_based_on_formula(appraisal_cycle.final_score_formula)\n    else:\n        self.final_score = self.calculate_final_score_based_on_averages()\n\n    self.final_score = flt(self.final_score, appraisal_cycle.final_score_precision)\n\n", "CodeBleu_score": 18.129583811402263}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle.final_score_formula:\n        self.final_score = calculate_final_score_with_formula(self, appraisal_cycle)\n    else:\n        self.final_score = calculate_final_score_with_averages(self)\n\n", "CodeBleu_score": 10.502466658689098}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\t\n    employee = frappe.get_doc(\"Employee\", self.employee)\n    if employee.status == \"Active\":\n        if self.attendance_date < employee.date_of_joining:\n            frappe.throw(\n                _(\"Attendance date cannot be earlier than the employee's date of joining\")\n            )\n    elif self.status == \"On Leave\":\n        if self.attendance_date < nowdate():\n            frappe.throw(\n                _(\"Attendance date cannot be earlier than today's date\")\n            )\n\n", "CodeBleu_score": 24.561922552784836}, {"code": "def validate_attendance_date(self)\n\t\n    if self.status == \"On Leave\":\n        leave_applications = frappe.get_all(\n            \"Leave Application\",\n            filters={\n                \"employee\": self.employee,\n                \"status\": \"Approved\",\n                \"from_date\": (\"<=\", self.attendance_date),\n                \"to_date\": (\"<=\", self.attendance_date),\n            },\n        )\n        if not leave_applications:\n            frappe.throw(\n                _(\"No leave application found for employee {0} for the date {1}\").format(\n                    self.employee, self.attendance_date\n                )\n            )\n    if self.attendance_date < getdate(self.employee_details.date_of_joining):\n        frappe.throw(\n            _(\"Attendance date cannot be earlier than employee's date of joining\")\n        )\n\n", "CodeBleu_score": 37.1577268296763}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date < getdate(self.employee.date_of_joining):\n        frappe.throw(_(\"Attendance Date cannot be earlier than employee's date of joining.\"))\n    if self.attendance_date > nowdate():\n        frappe.throw(_(\"Attendance Date cannot be in future.\"))\n    if self.attendance_date < nowdate():\n        if self.employee.status!= \"On Leave\":\n            frappe.throw(_(\"Attendance Date cannot be earlier than current date.\"))\n        else:\n            if self.employee.status == \"On Leave\":\n                if self.employee.leave_applications:\n                    for leave_application in self.employee.leave_applications:\n                        if leave_application.status == \"Approved\":\n                            if leave_application.from_date <= self.attendance_date <= leave_application.to_date:\n                                frappe.throw(\n                                    _(\n                                        \"Attendance Date cannot be earlier than Leave Application From Date or later than Leave Application To Date.\"\n                                    )\n                                )\n\n", "CodeBleu_score": 30.53509182317873}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\t\n    if self.employee and self.date:\n        if (\n            self.employee in self.get_duplicate_records()\n            and self.date in self.get_duplicate_records()\n        ):\n            frappe.throw(\n                _(\"Attendance record for {0} on {1} already exists.\").format(\n                    self.employee, format_date(self.date)\n                ),\n                title=_(\"Duplicate Attendance Record\"),\n                raise_exception=True,\n            )\n\n", "CodeBleu_score": 31.20520998630433}, {"code": "def validate_duplicate_record(self)\n\t\n    if self.employee and self.date:\n        duplicate_attendance = frappe.db.exists(\n            \"Attendance\",\n            {\n                \"employee\": self.employee,\n                \"date\": self.date,\n                \"docstatus\": 1,\n            },\n        )\n        if duplicate_attendance:\n            frappe.throw(\n                _(\n                    \"Attendance already exists for {0} on {1}.\n", "CodeBleu_score": 31.482070377944847}, {"code": "def validate_duplicate_record(self)\n\t\n    if self.employee and self.employee!= self.get(\"employee\"):\n        self.employee = self.get(\"employee\")\n\n    if self.employee and self.date and self.employee!= self.get(\"employee\"):\n        self.employee = self.get(\"employee\")\n\n    if self.employee and self.date and self.employee!= self.get(\"employee\"):\n        self.employee = self.get(\"employee\")\n\n    if self.employee and self.date and self.employee!= self.get(\"employee\"):\n        self.employee = self.get(\"employee\")\n\n    if self.employee and self.date and self.employee!= self.get(\"employee\"):\n        self.employee = self.get(\"employee\")\n\n    if self.employee and self.date and self.employee!= self.get(\"employee\"):\n        self.employee = self.get(\"employee\")\n\n    if self.employee and self.date and self.employee!= self.get(\"employee\"):\n        self.employee = self.get(\"employee\")\n\n    if self.employee and self.date and self.employee!= self.get(\"employee\"):\n        self.employee = self.get(\"employee\")\n\n    if self.employee and self.date and self.employee!= self.get(\"employee\"):\n        self.employee = self.get(\"employee\")\n\n    if self.employee and self.date and self.employee!= self.get(\"employee\"):\n        self.employee = self.get(\"employee\")\n\n    if self.employee and self.date and self.employee!= self.get(\"employee\"):\n        self.employee = self.get(\"employee\")\n\n    if self.employee and self.date and self.employee!= self.get(\"employee\"):\n        self.employee = self.get(\"employee\")\n\n    if self.employee and self.date and self.employee!= self.get(\"employee\"):\n        self.employee = self.get(\"employee\")\n\n    if self.employee and self.date and self.employee!= self.get(\"employee\"):\n        self.employee = self.get(\"employee\")\n\n    if self.employee and self.date and self.employee!= self.get(\"employee\"):\n        self.employee = self.get(\"employee\")\n\n    if self.employee and self.date and self.employee!= self.get(\"employee\"):\n        self.employee = self.get(\"employee\")\n\n    if self.employee and self.date and self.employee!= self.get(\"employee\"):", "CodeBleu_score": 27.609633018219338}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t\n    from frappe.utils import get_datetime, add_to_date, getdate\n    from frappe.email.doctype.email_group.email_group import get_email_addresses\n\n    # Get the date of midnight\n    midnight = get_datetime(getdate(get_datetime()), \"00:00:00\")\n\n    # Get the date of yesterday's midnight\n    yesterday = add_to_date(midnight, days=-1)\n\n    # Get the last midnight\n    last_midnight = get_datetime(getdate(get_datetime()), \"00:00:00\")\n    last_midnight = add_to_date(last_midnight, days=-1)\n\n    # Get all the replies that were sent yesterday\n    replies = self.get_replies_sent_yesterday()\n\n    # Get all the email addresses of users in the specified group\n    email_addresses = get_email_addresses(self.email_group)\n\n    # Get the email addresses of users who have replied to the specified group\n    reply_email_addresses = self.get_reply_email_addresses(replies)\n\n    # Get the email addresses of users who have replied to the specified group on a previous day\n    previous_reply_email_addresses = self.get_reply_email_addresses(replies, last_midnight)\n\n    # Get the email addresses of users who have replied to the specified group on a previous day\n    previous_reply_email_addresses = self.get_reply_email_addresses(replies, last_midnight)\n\n    # Get the email addresses of users who have replied to the specified group on a previous day\n    previous_reply_email_addresses = self.get_reply_email_addresses(replies, last_midnight)\n\n    # Get the email addresses of users who have replied to the specified group on a previous day\n    previous_reply_email_addresses = self.get_reply_email_addresses(replies, last_midnight)\n\n    # Get the email addresses of users who have replied to the specified group on a previous day\n    previous_reply_email_addresses = self.get_reply_email_addresses(replies, last_midnight)\n\n    # Get the email addresses of users who have replied to the specified group on a previous day\n    previous_reply_email_addresses = self.get_reply_email_addresses", "CodeBleu_score": 36.233755904506175}, {"code": "def send_summary(self)\n\t\n\n    # Get the group name\n    group_name = self.group\n\n    # Get the group\n    group = frappe.get_doc('Group', group_name)\n\n    # Get the email addresses of users in the group\n    email_addresses = []\n    for user in group.users:\n        email_addresses.append(user.email)\n\n    # Get the messages\n    messages = frappe.get_all(\n        'Email Message',\n        filters={\n            'group': group_name,\n           'status': 'Not Sent'\n        },\n        fields=['subject','message', 'date','recipients']\n    )\n\n    # Get the template\n    template = frappe.get_doc('Email Template', 'Daily Summary')\n\n    # Send the email\n    for email_address in email_addresses:\n        template.send(\n            recipients=email_address,\n            subject='Daily Summary of Email Messages',\n            message=template.message.format(\n                messages=messages,\n                global_date_format=global_date_format\n            )\n        )\n\n        # Update the status of the message to \"Sent\"\n        for message in messages:\n            message.update({\n               'status': 'Sent'\n            })\n            message.save()\n\n", "CodeBleu_score": 30.03480875231092}, {"code": "def send_summary(self)\n\t\n\n    # Get all messages in the specified group\n    messages = frappe.db.sql(\"\"\"SELECT name FROM `tabMessage` WHERE `parent` = %s AND `status` = 'Draft' ORDER BY modified DESC\"\"\", (self.name), as_dict=True)\n\n    # If there are no messages, return\n    if not messages:\n        return\n\n    # Get the email addresses of users in the specified group\n    email_addresses = frappe.db.sql(\"\"\"SELECT email FROM `tabUser` WHERE `roles` LIKE %s\"\"\", (\"%\"+self.name+\"%\"), as_list=True)\n\n    # If there are no users in the specified group, return\n    if not email_addresses:\n        return\n\n    # Get the subject of the email\n    subject = \"Daily summary of replies to messages in the \" + self.name + \" group\"\n\n    # Get the message details\n    message_details = \"\"\n    for message in messages:\n        message_details += \"<p><strong>\" + message.name + \"</strong></p>\"\n\n    # Send the email\n    frappe.sendmail(recipients=email_addresses, subject=subject, message=message_details)\n\n    # Update the status to \"Sent\"\n    frappe.db.sql(\"\"\"UPDATE `tabMessage` SET `status` = 'Sent' WHERE `parent` = %s\"\"\", (self.name))\n\n", "CodeBleu_score": 32.627872659041444}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t\n    if self.interview_round:\n        applicant = frappe.get_doc(\"Job Applicant\", self.job_applicant)\n        existing_interview = frappe.db.get_value(\"Interview\", {\"job_applicant\": self.job_applicant, \"interview_round\": self.interview_round}, \"name\")\n        if existing_interview:\n            frappe.throw(_(\"This job applicant has already been interviewed for this interview round. <a href='{0}'>Click here</a> to view the existing interview record.\").format(get_link_to_form(\"Interview\", existing_interview)), frappe.DuplicateEntryError)\n\n", "CodeBleu_score": 49.48881126677821}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.interview_round:\n        interview_round = frappe.get_doc(\"Interview Round\", self.interview_round)\n        if interview_round.interview_type == \"Job Application\":\n            job_applicant = frappe.get_doc(\"Job Applicant\", self.name)\n            existing_interview = frappe.get_list(\"Interview\", {\n                \"interview_round\": self.interview_round,\n                \"job_applicant\": job_applicant.name\n            })\n            if existing_interview:\n                existing_interview = frappe.get_doc(\"Interview\", existing_interview[0].name)\n                interview_round_link = get_link_to_form(\"Interview Round\", interview_round.name)\n                job_applicant_link = get_link_to_form(\"Job Applicant\", job_applicant.name)\n                raise frappe.ValidationError(_(\"Duplicate Interview Record Found. Job Applicant {0} has already been interviewed for Interview Round {1}. Please use the Interview record {2} to update their interview.\").format(job_applicant_link, interview_round_link, existing_interview.name))\n\n", "CodeBleu_score": 39.505732088552215}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.job_applicant and self.job_applicant.name:\n        job_applicant = frappe.get_doc(\"Job Applicant\", self.job_applicant)\n        interview_round = frappe.get_doc(\"Interview Round\", self.interview_round)\n        interview_record = frappe.get_doc(\"Interview Record\", {\"job_applicant\": job_applicant.name, \"interview_round\": interview_round.name})\n        if interview_record and interview_record.name!= self.name:\n            frappe.throw(_(\"Job applicant {0} is already scheduled for the interview round {1}. <a href='{2}'>Click here</a> to view the existing interview record.\").format(job_applicant.name, interview_round.name, get_link_to_form(\"Interview Record\", interview_record.name)))\n\n", "CodeBleu_score": 43.59619562344056}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\t\n    ratings = [\n        flt(assessment.rating) for assessment in self.assessments if assessment.rating\n    ]\n    if not ratings:\n        self.average_rating = 0\n    else:\n        self.average_rating = round(sum(ratings) / len(ratings), 2)\n\n", "CodeBleu_score": 27.765788531152317}, {"code": "def calculate_average_rating(self)\n\t\n    self.average_rating = 0\n    if not self.skill_assessments:\n        return\n\n    ratings = [\n        flt(assessment.rating)\n        for assessment in self.skill_assessments\n        if assessment.rating\n    ]\n    self.average_rating = flt(sum(ratings) / len(ratings))\n\n", "CodeBleu_score": 31.11445484586176}, {"code": "def calculate_average_rating(self)\n\t\n    self.average_rating = 0\n    if self.get(\"assessments\"):\n        self.average_rating = flt(\n            Avg(self.assessments, \"rating\").select(self.name)\n        )\n\n", "CodeBleu_score": 26.220273516916016}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc('Interview')\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    interview.interview_date = doc.interview_date\n    interview.interview_time = doc.interview_time\n    interview.interview_location = doc.interview_location\n    interview.interview_venue = doc.interview_venue\n    interview.interview_status = 'Scheduled'\n    interview.interviewer = doc.interviewer\n    interview.interviewee = doc.interviewee\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 35.093181231915594}, {"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    elif isinstance(doc, dict):\n        doc = doc\n    else:\n        raise Exception(\"Invalid input type\")\n    doc = frappe._dict(doc)\n    interview_round = doc.get(\"interview_round\")\n    designation = doc.get(\"designation\")\n    interviewers = doc.get(\"interviewers\")\n    interview = frappe.get_doc({\n        \"doctype\": \"Interview\",\n        \"interview_round\": interview_round,\n        \"designation\": designation\n    })\n    interview.insert()\n    if interviewers:\n        for interviewer in interviewers:\n            interview.append(\"interviewers\", {\n                \"interviewer\": interviewer\n            })\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 45.8836672713373}, {"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    interview.interview_date = doc.interview_date\n    interview.interview_time = doc.interview_time\n    interview.interview_venue = doc.interview_venue\n    interview.interview_type = doc.interview_type\n    interview.interview_status = doc.interview_status\n    interview.interview_note = doc.interview_note\n    interview.interview_round = doc.interview_round\n    interview.interview_date = doc.interview_date\n    interview.interview_time = doc.interview_time\n    interview.interview_venue = doc.interview_venue\n    interview.interview_type = doc.interview_type\n    interview.interview_status = doc.interview_status\n    interview.interview_note = doc.interview_note\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 35.56844482503375}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\t\n\n    job_offers = frappe.get_list(\"Job Offer\",\n        fields=[\"name\", \"designation\", \"company\"],\n        filters={\n            \"docstatus\": 1,\n            \"designation\": self.designation,\n            \"company\": self.company,\n            \"valid_from\": [\"<=\", to_date],\n            \"valid_till\": [\">=\", from_date]\n        }\n    )\n\n    return job_offers\n\n", "CodeBleu_score": 51.18614004529189}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    return frappe.db.sql(\"\"\"\n        SELECT name\n        FROM `tabJob Offer`\n        WHERE\n            docstatus = 1 AND\n            designation = %s AND\n            company = %s AND\n            (posting_date BETWEEN %s AND %s OR\n                (posting_date <= %s AND valid_till >= %s))\n        ORDER BY posting_date DESC\n    \"\"\", (self.designation, self.company, from_date, to_date, from_date, to_date), as_list=1)\n\n", "CodeBleu_score": 31.101986851493763}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offer_list = frappe.db.sql(\"\"\"\n        SELECT name\n        FROM `tabJob Offer`\n        WHERE\n            docstatus = 1\n            AND designation = %s\n            AND company = %s\n            AND (\n                (from_date >= %s AND from_date <= %s)\n                OR (to_date >= %s AND to_date <= %s)\n                OR (from_date <= %s AND to_date >= %s)\n            )\n        \"\"\", (self.designation, self.company, from_date, to_date, from_date, to_date, from_date, to_date))\n    return job_offer_list\n\n", "CodeBleu_score": 30.631148933219098}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if not company and not department:\n        return 0, \"Percent\"\n    else:\n        return get_offer_acceptance_rate_for_company_and_department(company, department)\n\n", "CodeBleu_score": 11.873454207992337}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if company:\n        job_offers = frappe.db.sql(\"\"\"select name from `tabJob Offer` where docstatus=1 and company=%s\"\"\", (company))\n    elif department:\n        job_offers = frappe.db.sql(\"\"\"select name from `tabJob Offer` where docstatus=1 and department=%s\"\"\", (department))\n    else:\n        job_offers = frappe.db.sql(\"\"\"select name from `tabJob Offer` where docstatus=1\"\"\")\n\n    if job_offers:\n        total_job_offers = len(job_offers)\n        accepted_job_offers = frappe.db.sql(\"\"\"select name from `tabJob Offer` where docstatus=2 and company=%s\"\"\", (company))\n        if accepted_job_offers:\n            accepted_job_offers = len(accepted_job_offers)\n        else:\n            accepted_job_offers = 0\n    else:\n        total_job_offers = 0\n        accepted_job_offers = 0\n\n    return {\n        \"value\": flt(accepted_job_offers / total_job_offers * 100),\n        \"label\": _(\"Offer Acceptance Rate\"),\n        \"fieldname\": \"offer_acceptance_rate\",\n        \"fieldtype\": \"Percent\",\n    }\n\n", "CodeBleu_score": 29.085759282712587}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n\n    if company:\n        company = frappe.get_doc(\"Company\", company)\n        company = company.name\n    else:\n        company = None\n\n    if department:\n        department = frappe.get_doc(\"Department\", department)\n        department = department.name\n    else:\n        department = None\n\n    job_offers = frappe.db.sql(\"\"\"select name, docstatus from `tabJob Offer` where docstatus = 1\"\"\", as_dict=True)\n    accepted_job_offers = frappe.db.sql(\"\"\"select name from `tabJob Offer` where docstatus = 1 and accepted = 1\"\"\", as_dict=True)\n\n    if company:\n        job_offers = [job_offer for job_offer in job_offers if job_offer.company == company]\n        accepted_job_offers = [job_offer for job_offer in accepted_job_offers if job_offer.company == company]\n\n    if department:\n        job_offers = [job_offer for job_offer in job_offers if job_offer.department == department]\n        accepted_job_offers = [job_offer for job_offer in accepted_job_offers if job_offer.department == department]\n\n    total_job_offers = len(job_offers)\n    accepted_job_offers = len(accepted_job_offers)\n\n    if total_job_offers > 0:\n        acceptance_rate = flt(accepted_job_offers) / flt(total_job_offers) * 100\n    else:\n        acceptance_rate = 0\n\n    return {\n        \"label\": _(\"Offer Acceptance Rate\"),\n        \"value\": acceptance_rate,\n        \"fieldtype\": \"Percent\",\n        \"fieldname\": \"offer_acceptance_rate\",\n        \"options\": \"Offer Acceptance Rate\"\n    }\n\n", "CodeBleu_score": 29.078766422903175}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\treturn ResponseEntity.ok(this.employerService.register(employerForRegisterDto));\n}", "CodeBleu_score": 15.410726276123283}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\treturn ResponseEntity.ok(this.employerService.register(employerForRegisterDto));\n}", "CodeBleu_score": 15.410726276123283}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\treturn new ResponseEntity<>(this.employerService.register(employerForRegisterDto), HttpStatus.OK);\n}", "CodeBleu_score": 21.069321385744804}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\tfinal CompanyStaff companyStaff = this.getCompanyStaffById(companyStaffForUpdateDto.getId());\n\tif (companyStaff == null) {\n\t\treturn new ErrorResult(Messages.NOT_FOUND);\n\t}\n\tif (!companyStaffForUpdateDto.getPassword().equals(companyStaff.getPassword())) {\n\t\treturn new ErrorResult(Messages.PASSWORD_DOES_NOT_MATCH);\n\t}\n\tthis.companyStaffDao.save(companyStaff);\n\treturn new SuccessResult(Messages.UPDATED);\n}", "CodeBleu_score": 30.84089029976727}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\tOptional<CompanyStaff> companyStaff = companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\tif (!companyStaff.isPresent()) {\n\t\treturn new ErrorResult(Messages.COMPANY_STAFF_NOT_FOUND);\n\t}\n\tCompanyStaff companyStaffToUpdate = companyStaff.get();\n\tif (!companyStaffForUpdateDto.getPassword().equals(companyStaffToUpdate.getPassword())) {\n\t\treturn new ErrorResult(Messages.PASSWORD_NOT_MATCH);\n\t}\n\tcompanyStaffToUpdate.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaffToUpdate.setLastName(companyStaffForUpdateDto.getLastName());\n\tcompanyStaffToUpdate.setPassword(companyStaffForUpdateDto.getPassword());\n\tcompanyStaffToUpdate.setEmail(companyStaffForUpdateDto.getEmail());\n\tcompanyStaffToUpdate.setPhoneNumber(companyStaffForUpdateDto.getPhoneNumber());\n\tcompanyStaffToUpdate.setCompany(companyStaffForUpdateDto.getCompany());\n\tcompanyStaffToUpdate.setJobTitle(companyStaffForUpdateDto.getJobTitle());\n\tcompanyStaffToUpdate.setCompanyStaffImage(companyStaffForUpdateDto.getCompanyStaffImage());\n\tcompanyStaffToUpdate.setCompanyStaffCv(companyStaffForUpdateDto.getCompanyStaffCv());\n\tcompanyStaffToUpdate.setCompanyStaffLinkedin(companyStaffForUpdateDto.getCompanyStaffLinkedin());\n\tcompanyStaffToUpdate.setCompanyStaffGithub(companyStaffForUpdateDto.getCompanyStaffGithub());\n\tcompanyStaffToUpdate.setCompanyStaffWebsite(companyStaffForUpdateDto.getCompanyStaffWebsite());\n\tcompanyStaffToUpdate.setCompanyStaffFacebook(companyStaffForUpdateDto.getCompanyStaffFacebook());\n\tcompanyStaffToUpdate.setCompanyStaffTwitter(companyStaffForUpdateDto.getCompanyStaffTwitter());\n\tcompanyStaffToUpdate.setCompanyStaffInstagram(companyStaffForUpdateDto.getCompanyStaffInstagram());\n\tcompanyStaffToUpdate.setCompanyStaffAbout(companyStaffForUpdateDto.getCompanyStaffAbout());\n\tcompanyStaffToUpdate.setCompanyStaffExperience(companyStaffForUpdateDto.getCompanyStaffExperience());\n\tcompanyStaffToUpdate.setCompanyStaffEducation(companyStaffForUpdateDto.getCompanyStaffEducation());\n\tcompanyStaffToUpdate.setCompanyStaffSkills(companyStaffForUpdateDto.getCompanyStaffSkills());\n\tcompanyStaffToUpdate.setCompanyStaffLanguages(", "CodeBleu_score": 36.28611565135355}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\tfinal CompanyStaff companyStaff = companyStaffDao.findById(companyStaffForUpdateDto.getId()).orElse(null);\n\tif (companyStaff == null) {\n\t\treturn new ErrorResult(Messages.COMPANYSTAFF_NOT_FOUND);\n\t}\n\tif (!companyStaffForUpdateDto.getPassword().equals(companyStaff.getPassword())) {\n\t\treturn new ErrorResult(Messages.COMPANYSTAFF_PASSWORD_NOT_MATCH);\n\t}\n\tif (!BusinessRules.run(checkIfCompanyStaffExists(companyStaffForUpdateDto.getEmail()),\n\t\t\tcheckIfCompanyStaffEmailExists(companyStaffForUpdateDto.getEmail(), companyStaff.getId()))) {\n\t\treturn new ErrorResult(Messages.COMPANYSTAFF_EMAIL_ALREADY_EXISTS);\n\t}\n\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\tcompanyStaff.setEmail(companyStaffForUpdateDto.getEmail());\n\tcompanyStaff.setPassword(companyStaffForUpdateDto.getPassword());\n\tcompanyStaff.setPhoneNumber(companyStaffForUpdateDto.getPhoneNumber());\n\tcompanyStaff.setJobTitle(companyStaffForUpdateDto.getJobTitle());\n\tcompanyStaff.setCompanyId(companyStaffForUpdateDto.getCompanyId());\n\tcompanyStaff.setDepartmentId(companyStaffForUpdateDto.getDepartmentId());\n\tcompanyStaffDao.save(companyStaff);\n\treturn new SuccessResult(Messages.COMPANYSTAFF_UPDATED);\n}", "CodeBleu_score": 35.20275689526618}]}
