{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t\n    zip_data = self.env['ir.attachment']._get_attachment_data(\n        request.env.context.get('active_model'),\n        request.env.context.get('active_ids'),\n        args.get('attachment_ids', []),\n        args.get('download', False),\n        args.get('filename', False),\n        args.get('compress', False),\n        args.get('zip_filename', False),\n    )\n    if not zip_data:\n        return request.not_found()\n    headers = [\n        ('Content-Type', 'application/zip'),\n        ('Content-Length', len(zip_data)),\n        ('Content-Disposition', content_disposition(args.get('filename', _('attachments.zip'))))\n    ]\n    return request.make_response(zip_data, headers=headers)\n\n", "CodeBleu_score": 32.547788820741296}, {"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = request.httprequest.args.getlist('attachment_ids')\n    attachments = request.env['ir.attachment'].browse(attachment_ids)\n    if not attachments.check_access_rights('read', raise_exception=False):\n        raise Exception(_('You do not have access to read the attachments.'))\n    if not attachments.check_access_rule(raise_exception=False):\n        raise Exception(_('You do not have access to read the attachments.'))\n    zip_file = attachments.generate_zip_file()\n    headers = [\n        ('Content-Type', 'application/zip'),\n        ('Content-Disposition', content_disposition('export.zip')),\n        ('Content-Length', len(zip_file)),\n    ]\n    return request.make_response(zip_file, headers=headers)\n\n", "CodeBleu_score": 37.943578391799036}, {"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = request.httprequest.args.getlist(\"attachment_ids\")\n    attachments = request.env[\"ir.attachment\"].browse(attachment_ids)\n    if not attachments.check_access_rights(\"read\", raise_exception=False):\n        return request.not_found()\n    if not attachments.check_access_rule(\"read\"):\n        return request.not_found()\n    zip_file = attachments.generate_zip_file()\n    headers = [\n        (\"Content-Type\", \"application/zip\"),\n        (\"Content-Disposition\", content_disposition(\"export_attachments.zip\")),\n    ]\n    return request.make_response(zip_file, headers=headers, cookies={})\n\n", "CodeBleu_score": 39.22524361095188}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(CustomerPortal, self)._prepare_home_portal_values(counters)\n    if request.env.user.has_group('account.group_account_invoice'):\n        invoice_count = counters.get('invoice', 0)\n        if invoice_count > 0:\n            values['invoice_count'] = invoice_count\n    if request.env.user.has_group('account.group_account_invoice'):\n        bill_count = counters.get('bill', 0)\n        if bill_count > 0:\n            values['bill_count'] = bill_count\n    return values\n\n", "CodeBleu_score": 32.791019503786316}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(CustomerPortal, self)._prepare_home_portal_values(counters)\n    if request.env.user.has_group('account.group_account_invoice'):\n        values['invoice_count'] = counters['invoice']\n    if request.env.user.has_group('account.group_account_invoice'):\n        values['bill_count'] = counters['bill']\n    return values\n\n", "CodeBleu_score": 19.444664654709356}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(CustomerPortal, self)._prepare_home_portal_values(counters)\n    # Check read access rights for 'account.move' before counting invoices and bills\n    if request.env.user.has_group('account.group_account_invoice'):\n        values['invoice_count'] = counters.get('invoice', 0)\n        values['bill_count'] = counters.get('bill', 0)\n    return values\n\n", "CodeBleu_score": 15.924232926373975}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_portal_layout_values()\n    partner = request.env.user.partner_id\n    domain = [\n        ('message_partner_ids', 'child_of', [partner.commercial_partner_id.id]),\n        ('state', 'not in', ('draft', 'cancel')),\n    ]\n    searchbar_filters = {\n        'all': {'label': _('All'), 'domain': []},\n        'open': {'label': _('Open'), 'domain': [('state', '=', 'posted')]},\n        'unpaid': {'label': _('Unpaid'), 'domain': [('state', '=', 'posted'), ('amount_residual', '>', 0)]},\n        'paid': {'label': _('Paid'), 'domain': [('state', '=', 'posted'), ('amount_residual', '=', 0)]},\n    }\n    searchbar_filters = self._update_searchbar_filters(\n        searchbar_filters, domain, kw, 'invoice', 'invoice_filter'\n    )\n    if filterby:\n        domain = expression.AND([domain, searchbar_filters[filterby]['domain']])\n    if date_begin and date_end:\n        domain += [('date_invoice', '>=', date_begin), ('date_invoice', '<=', date_end)]\n    if sortby == \"due_date\":\n        domain += [('date_due', '>=', date_begin), ('date_due', '<=', date_end)]\n    if sortby == \"due_date_desc\":\n        domain += [('date_due', '<=', date_begin), ('date_due', '>=', date_end)]\n    if sortby == \"date\":\n        domain += [('date_invoice', '>=', date_begin), ('date_invoice', '<=', date_end)]\n    if sortby == \"date_desc\":\n        domain += [('date_invoice', '<=', date_begin), ('date_invoice', '>=', date_end)]\n    if sortby ==", "CodeBleu_score": 31.150542359601925}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    # Fetch the logged-in user's invoices\n    invoices = self._get_invoices(page, date_begin, date_end, sortby, filterby, **kw)\n\n    # Update the session history with the latest invoice IDs\n    self._update_session_history(invoices)\n\n    # Render the invoices page with the prepared values\n    values = self._prepare_portal_layout_values()\n    values.update({\n        'invoices': invoices,\n        'page_name': 'invoices',\n        'default_url': '/my/invoices',\n        'searchbar_sortings': self._get_invoice_searchbar_sortings(),\n        'searchbar_filters': self._get_invoice_searchbar_filters(),\n    })\n    return request.render(\"account.portal_my_invoices\", values)\n\n", "CodeBleu_score": 38.98643503709704}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_portal_layout_values()\n    invoices = request.env['account.move'].search([])\n    domain = []\n    if date_begin and date_end:\n        domain += [('date_invoice', '>=', date_begin), ('date_invoice', '<=', date_end)]\n    if filterby == 'posted':\n        domain += [('state', '=', 'posted')]\n    elif filterby == 'draft':\n        domain += [('state', '=', 'draft')]\n    elif filterby == 'cancel':\n        domain += [('state', '=', 'cancel')]\n    if sortby == 'date':\n        domain += [('date_invoice', 'desc')]\n    elif sortby == 'ref':\n        domain += [('name', 'asc')]\n    elif sortby == 'due':\n        domain += [('invoice_date_due', 'desc')]\n    elif sortby == 'amount':\n        domain += [('amount_total', 'desc')]\n    invoices = invoices.search(domain, order='date_invoice desc')\n    request.session['my_invoices_history'] = invoices.ids[:100]\n    pager = portal_pager(\n        url=\"/my/invoices\",\n        url_args={'date_begin': date_begin, 'date_end': date_end, 'sortby': sortby, 'filterby': filterby},\n        total=len(invoices),\n        page=page,\n        step=self._items_per_page\n    )\n    values.update({\n        'date': date_begin,\n        'invoices': invoices,\n        'page_name': 'invoices',\n        'pager': pager,\n        'default_url': '/my/invoices',\n        'searchbar_sortings': {\n            'date': {'label': _('Newest'), 'order': 'date desc'},\n            'ref': {'label': _('Reference'), 'order': 'ref'},\n            'due': {'label': _('Due Date'), 'order", "CodeBleu_score": 36.01976677132376}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    invoice = self._document_check_access('account.move', invoice_id, access_token)\n    if not invoice:\n        raise MissingError(_(\"The invoice you are trying to access no longer exists.\"))\n    if invoice.state == 'draft':\n        raise AccessError(_(\"You can not access the invoice as it is still in draft state.\"))\n    if report_type in ('html', 'pdf', 'text'):\n        report_types = invoice.get_portal_report_types()\n        if report_type not in report_types:\n            raise AccessError(_(\"You can not access the document in the portal as the format %s is not allowed.\", report_type))\n        return self._show_report(model=invoice._name, report_type=report_type, report_ref=invoice.get_portal_report_name(), download=download)\n    if report_type == 'zip':\n        legal_docs = invoice.get_portal_legal_docs()\n        if not legal_docs:\n            raise AccessError(_(\"You can not access the document in the portal as there are no legal documents.\"))\n        if len(legal_docs) == 1:\n            return self._show_report(model=invoice._name, report_type='pdf', report_ref=legal_docs[0].get_portal_report_name(), download=download)\n        zip_file = invoice._create_portal_zip(legal_docs)\n        if not zip_file:\n            raise AccessError(_(\"You can not access the document in the portal as there are no legal documents.\"))\n        headers = _get_zip_headers(zip_file)\n        return request.make_response(zip_file.getvalue(), headers=headers)\n\n", "CodeBleu_score": 38.79852813923731}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    invoice = request.env['account.move'].browse(invoice_id)\n    try:\n        invoice.check_access_rights('read')\n        invoice.check_access_rule('read')\n    except AccessError:\n        return request.redirect('/my')\n    if report_type == 'html' or report_type == 'text':\n        return self._show_report(model=invoice._name, report_type=report_type, report_ref=invoice.html_url, download=download)\n    if report_type == 'pdf':\n        if invoice.state == 'draft':\n            raise MissingError(_('You cannot print a draft invoice.'))\n        if invoice.state == 'cancel':\n            raise MissingError(_('You cannot print an invoice that has been cancelled.'))\n        if invoice.move_type == 'out_refund':\n            raise MissingError(_('You cannot print a refund invoice.'))\n        if invoice.move_type == 'in_refund':\n            raise MissingError(_('You cannot print a vendor bill.'))\n        if invoice.move_type == 'in_invoice':\n            raise MissingError(_('You cannot print a customer invoice.'))\n        if invoice.move_type == 'out_invoice':\n            raise MissingError(_('You cannot print a vendor bill.'))\n        if invoice.move_type == 'in_receipt':\n            raise MissingError(_('You cannot print a customer invoice.'))\n        if invoice.move_type == 'out_receipt':\n            raise MissingError(_('You cannot print a vendor bill.'))\n        if invoice.move_type == 'entry':\n            raise MissingError(_('You cannot print an entry.'))\n        if invoice.move_type == 'entry_refund':\n            raise MissingError(_('You cannot print an entry refund.'))\n        if invoice.move_type == 'entry_invoice':\n            raise MissingError(_('You cannot print an entry invoice.'))\n        if invoice.move_type == 'entry_receipt':\n            raise MissingError(_('You", "CodeBleu_score": 24.855373965537602}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    try:\n        invoice = self._document_check_access('account.move', invoice_id, access_token)\n    except (AccessError, MissingError):\n        return request.redirect('/my')\n\n    if report_type in ('html', 'qweb-html', 'pdf', 'text'):\n        return self._show_report(model=invoice._name, report_type=report_type, report_ref=invoice.get_portal_last_report_id(), download=download)\n\n    if report_type == 'account_invoice_report_templates.account_invoice_report_templates':\n        return self._show_report(model=invoice._name, report_type=report_type, report_ref=invoice.get_portal_last_report_id(), download=download)\n\n    if report_type == 'account_invoice_report_templates.account_invoice_report_templates_pdf':\n        return self._show_report(model=invoice._name, report_type=report_type, report_ref=invoice.get_portal_last_report_id(), download=download)\n\n    if report_type == 'account_invoice_report_templates.account_invoice_report_templates_text':\n        return self._show_report(model=invoice._name, report_type=report_type, report_ref=invoice.get_portal_last_report_id(), download=download)\n\n    if report_type == 'account_invoice_report_templates.account_invoice_report_templates_html':\n        return self._show_report(model=invoice._name, report_type=report_type, report_ref=invoice.get_portal_last_report_id(), download=download)\n\n    if report_type == 'account_invoice_report_templates.account_invoice_report_templates_qweb-html':\n        return self._show_report(model=invoice._name, report_type=report_type, report_ref=invoice.get_portal_last_report_id(), download=download)\n\n    if report", "CodeBleu_score": 37.94034836546322}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t\n    if not company:\n        company = self.env.company\n    if not company.account_sale_tax_id:\n        return\n    products = self.env[\"product.template\"].search(\n        [\n            (\"company_id\", \"=\", company.id),\n            (\"sale_ok\", \"=\", True),\n            (\"type\", \"=\", \"product\"),\n            (\"taxes_id\", \"=\", False),\n        ]\n    )\n    if products:\n        products.write({\"taxes_id\": [Command.set(company.account_sale_tax_id.ids)]})\n    if not company.account_purchase_tax_id:\n        return\n    products = self.env[\"product.template\"].search(\n        [\n            (\"company_id\", \"=\", company.id),\n            (\"purchase_ok\", \"=\", True),\n            (\"type\", \"=\", \"product\"),\n            (\"taxes_id\", \"=\", False),\n        ]\n    )\n    if products:\n        products.write({\"taxes_id\": [Command.set(company.account_purchase_tax_id.ids)]})\n\n", "CodeBleu_score": 36.499527573041114}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    company = company or self.env.company\n    product_tmpls = self.env['product.template'].search([('company_id', '=', company.id)])\n    if company.account_sale_tax_id:\n        product_tmpls.write({'taxes_id': [Command.set(company.account_sale_tax_id.ids)]})\n    if company.account_purchase_tax_id:\n        product_tmpls.write({'supplier_taxes_id': [Command.set(company.account_purchase_tax_id.ids)]})\n    return product_tmpls\n\n", "CodeBleu_score": 22.328694613051066}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    company = company or self.env.company\n    domain = [('company_id', '=', company.id)]\n    if company.account_sale_tax_id:\n        domain += [('taxes_id', 'in', company.account_sale_tax_id.ids)]\n    if company.account_purchase_tax_id:\n        domain += [('supplier_taxes_id', 'in', company.account_purchase_tax_id.ids)]\n    products = self.search(domain)\n    return products\n\n", "CodeBleu_score": 22.814880933550718}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env.ref(xml_id, raise_if_not_found=False)\n    if account:\n        return account\n    domain = [\n        (\"company_id\", \"=\", company.id),\n        (\"user_type_id.type\", \"=\", account_type),\n    ]\n    account = self.env[\"account.account\"].search(domain, limit=1)\n    if account:\n        return account\n    return self.env[\"account.account\"].search(domain, limit=1)\n\n", "CodeBleu_score": 38.210597899056445}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env.ref(xml_id, raise_if_not_found=False)\n    if not account:\n        account = self.search(\n            [(\"type\", \"=\", account_type), (\"company_id\", \"=\", company.id)],\n            limit=1,\n        )\n    if not account:\n        account = self.search(\n            [(\"type\", \"=\", account_type)], limit=1, order=\"id asc\"\n        )\n    return account\n\n", "CodeBleu_score": 33.33822142746053}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env.ref(xml_id, raise_if_not_found=False)\n    if not account:\n        account = self.env['account.account'].search([\n            ('company_id', '=', company.id),\n            ('user_type_id', '=', account_type.id),\n        ], limit=1)\n    if not account:\n        account = self.env['account.account'].search([\n            ('company_id', '=', company.id),\n        ], limit=1)\n    return account\n\n", "CodeBleu_score": 41.201478507079514}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    accounts = self.env[\"account.account\"].search([(\"account_type\", \"=\", \"current_year_earning\")])\n    accounts_by_company = defaultdict(list)\n    for account in accounts:\n        accounts_by_company[account.company_id].append(account)\n    for company, accounts in accounts_by_company.items():\n        if len(accounts) > 1:\n            raise ValidationError(_(\"There can be only one account with the 'Current Year Earnings' type for each company.\"))\n\n", "CodeBleu_score": 24.31440294617888}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    accounts = self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_current_year_earnings').id)])\n    accounts_by_company = defaultdict(list)\n    for account in accounts:\n        accounts_by_company[account.company_id].append(account)\n    for company, accounts in accounts_by_company.items():\n        if len(accounts) > 1:\n            raise ValidationError(_('There can only be one account with the \"Current Year Earnings\" type for each company.'))\n\n", "CodeBleu_score": 24.451829165528324}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    accounts = self.env['account.account'].search([('account_type', '=', 'current_year_earning')])\n    accounts_by_company = defaultdict(list)\n    for account in accounts:\n        accounts_by_company[account.company_id].append(account)\n    for company, company_accounts in accounts_by_company.items():\n        if len(company_accounts) > 1:\n            raise ValidationError(_('There can only be one account with the \"Current Year Earnings\" type for each company.'))\n\n", "CodeBleu_score": 25.251067330277916}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name:\n        if self._context.get('partner_id'):\n            domain = expression.AND([domain or [], [('partner_id', '=', self._context['partner_id'])]])\n            order = 'frequency desc'\n            limit = limit or 50\n        else:\n            return []\n    if order is None:\n        order = 'name'\n    if limit is None:\n        limit = 100\n    if operator in expression.NEGATIVE_TERM_OPERATORS:\n        domain = expression.AND([domain or [], [(operator, name), ('active', '=', True)]])\n        order = 'name'\n    else:\n        domain = expression.AND([domain or [], [(operator, name), ('active', '=', True)]])\n        order = 'frequency desc'\n    return self.search(domain, limit=limit, order=order)\n\n", "CodeBleu_score": 46.21855887831817}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name:\n        if self._context.get('partner_id'):\n            partner_id = self._context['partner_id']\n            partner = self.env['res.partner'].browse(partner_id)\n            if partner.account_frequency:\n                domain = expression.OR([domain, [('id', 'in', partner.account_frequency)]])\n        return self.search(domain, limit=limit, order=order)\n    else:\n        domain = expression.OR([domain, [('name', operator, name)]])\n        return self.search(domain, limit=limit, order=order)\n\n", "CodeBleu_score": 38.4741503380337}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name:\n        if self._context.get('search_partner_account'):\n            return self._search_partner_account(domain=domain, limit=limit, order=order)\n        return []\n\n    if not operator:\n        operator = 'ilike'\n    if not order:\n        order = 'name'\n\n    if operator in expression.NEGATIVE_TERM_OPERATORS:\n        domain = expression.NEGATIVE_TERM_OPERATORS[operator](domain)\n        name = '%s%s%s' % ('%', escape_like(name), '%')\n        if operator == 'not ilike':\n            operator = 'ilike'\n    elif operator == '=':\n        domain = expression.normalize_domain(domain)\n        for term in domain:\n            if term[0] == 'name' and term[2] == name:\n                return self.browse([term[2]])\n        return []\n    else:\n        name = escape_like(name)\n    if operator in ('like', 'ilike'):\n        name = '%s%s%s' % ('%', name, '%')\n    elif operator == '=like':\n        name = '%s%s' % (name, '%')\n    elif operator == '=ilike':\n        name = '%s%s' % (name, '%')\n    elif operator == 'like':\n        name = '%s%s%s' % ('%', name, '%')\n    elif operator == '=like':\n        name = '%s%s' % (name, '%')\n    elif operator == '=ilike':\n        name = '%s%s' % (name, '%')\n    elif operator == '=like':\n        name = '%s%s' % (name, '%')\n    elif operator == '=ilike':\n        name = '%s%s' % (name, '%')\n    elif operator == '=like':\n        name = '%s%s' % (name, '%')\n    elif operator == '=ilike':\n        name = '%s%s' % (name, '%')\n    elif operator == '=like':\n        name = '%s", "CodeBleu_score": 37.56885834350244}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t\n    self.ensure_one()\n    if not new:\n        return\n    if not excluded:\n        excluded = ('name',)\n    if new.name and new.name.startswith('New '):\n        new_name = new.name[4:]\n        if new_name.startswith('%s ' % self._description):\n            new_name = new_name[len(self._description) + 1:]\n        if new_name.startswith('%s ' % self._description):\n            new_name = new_name[len(self._description) + 1:]\n        if new_name.startswith('%s ' % self._description):\n            new_name = new_name[len(self._description) + 1:]\n        if new_name.startswith('%s ' % self._description):\n            new_name = new_name[len(self._description) + 1:]\n        if new_name.startswith('%s ' % self._description):\n            new_name = new_name[len(self._description) + 1:]\n        if new_name.startswith('%s ' % self._description):\n            new_name = new_name[len(self._description) + 1:]\n        if new_name.startswith('%s ' % self._description):\n            new_name = new_name[len(self._description) + 1:]\n        if new_name.startswith('%s ' % self._description):\n            new_name = new_name[len(self._description) + 1:]\n        if new_name.startswith('%s ' % self._description):\n            new_name = new_name[len(self._description) + 1:]\n        if new_name.startswith('%s ' % self._description):\n            new_name = new_name[len(self._description) + 1:]\n        if new_name.startswith('%s ' % self._description):\n            new_name = new_name[len(self._description) + 1:]\n        if new_name.startswith('%s ' % self._description):\n            new_name = new_name[len(self._", "CodeBleu_score": 27.399895836145888}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    new.ensure_one()\n    self.ensure_one()\n    if new.id == self.id:\n        return\n    if 'name' in excluded:\n        excluded = ('name',) + excluded\n    translations = self.with_context(active_test=False).read(['name'] + [field.name for field in self._fields.values() if field.translate and field.name not in excluded])[0]\n    if translations['name'] and new._fields['name'].name_get_pattern and not re.match(new._fields['name'].name_get_pattern, translations['name']):\n        translations['name'] = new._fields['name'].name_get_pattern % new._fields['name'].convert_to_export(new, translations['name'])\n    translations.pop('id')\n    new.with_context(active_test=False).write(translations)\n\n", "CodeBleu_score": 37.490054626007904}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    new.ensure_one()\n    if new._name == 'res.lang':\n        return\n    excluded = set(excluded)\n    excluded.add('name')\n    # Ensure that the new record is not a translation of the current one\n    if new.id == self.id:\n        return\n    # Copy translations\n    self.with_context(active_test=False).copy_translations(new, excluded=excluded)\n    # Update translations for the new name format\n    if new._name == 'product.template' and new.name.startswith('%s - ' % self.name):\n        new.name = new.name.replace(self.name, new.name)\n\n", "CodeBleu_score": 36.905883330801984}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\t\n    action = self.env[\"ir.actions.act_window\"]._for_xml_id(\"account.action_move_in_invoice_type\")\n    action['context'] = {'default_type': 'out_invoice'}\n    action['domain'] = [('id', 'in', self.env.cr.fetchall())]\n    return action\n\n", "CodeBleu_score": 18.05121909099128}, {"code": "def action_view_invoice(self)\n\t\n    res = self.env.ref('account.action_move_in_invoice_type')\n    if len(self) == 1:\n        res = res.read()[0]\n        res['views'] = [(res['view_mode'], 'tree,form')]\n        res['domain'] = [('id', 'in', self._get_invoice_ids())]\n    return res\n\n", "CodeBleu_score": 18.518104580370824}, {"code": "def action_view_invoice(self)\n\t\n    if self.env.context.get('active_model') == 'account.move':\n        return self.env.context.get('active_id')\n    self = self.with_context(active_model='account.move', active_ids=self.ids)\n    sale_types = self.env.ref('sale.action_invoice_tree1').id, self.env.ref('sale.action_invoice_tree2').id\n    query = \"\"\"\n        SELECT DISTINCT aml.move_id\n        FROM account_move_line aml\n        INNER JOIN account_move am ON am.id = aml.move_id\n        WHERE am.id IN %s AND am.state IN ('posted', 'cancel')\n        AND aml.analytic_account_id IN %s\n    \"\"\"\n    self.env.cr.execute(query, (tuple(sale_types), tuple(self.analytic_account_ids.ids)))\n    invoices = self.env.cr.dictfetchall()\n    if not invoices:\n        return False\n    invoices = [x['move_id'] for x in invoices]\n    return {\n        'name': _('Customer Invoices'),\n        'view_mode': 'tree,form',\n        'res_model': 'account.move',\n        'type': 'ir.actions.act_window',\n        'domain': [('id', 'in', invoices)],\n        'context': self.env.context,\n    }\n\n", "CodeBleu_score": 37.30581090563743}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\t\n    action = self.env[\"ir.actions.act_window\"]._for_xml_id(\"account.action_move_in_invoice_type\")\n    action['context'] = {'search_default_purchase_type': 1, 'search_default_vendor_bill': 1, 'default_move_type': 'in_invoice'}\n    action['domain'] = [('id', 'in', self.env.context.get('active_ids'))]\n    return action\n\n", "CodeBleu_score": 20.647155412020428}, {"code": "def action_view_vendor_bill(self)\n\t\n    move_ids = self.env['account.move'].search([('purchase_id', '=', self.id), ('move_type', 'in', ('in_invoice', 'in_refund')), ('id', 'in', self.mapped('invoice_ids').ids)])\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['context'] = {'default_move_type': 'in_invoice', 'default_purchase_id': self.id}\n    if len(move_ids) == 1:\n        action['views'] = [(self.env.ref('account.view_move_form').id, 'form')]\n        action['res_id'] = move_ids.id\n    return action", "CodeBleu_score": 28.279907087163718}, {"code": "def action_view_vendor_bill(self)\n\t\n    action = self.env[\"ir.actions.act_window\"]._for_xml_id(\"account.action_move_in_invoice_type\")\n    action[\"context\"] = {'create': False}\n    action['domain'] = [('id', 'in', self.env.context.get('active_ids', []))]\n    action['views'] = [(self.env.ref('account.view_move_form').id, 'form')]\n    return action\n\n", "CodeBleu_score": 21.480933083906216}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        del values['attachment_ids']\n    with self._attachment_ids_removed():\n        return super(Base, self).write(values)\n\n", "CodeBleu_score": 25.95625586232913}, {"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        values.pop('attachment_ids')\n    with self.env.cr.savepoint():\n        attachments = self.env['ir.attachment'].search([('res_model', '=', self._name), ('res_id', 'in', self.ids)])\n        if attachments:\n            raise UserError(_('You cannot modify the attachments of a %s while it is being processed.') % self._description)\n        result = super(models.Base, self).write(values)\n    return result\n\n", "CodeBleu_score": 43.3883954906304}, {"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values and len(values['attachment_ids']) > 0:\n        values.pop('attachment_ids')\n        attachments = self.env['ir.attachment'].browse(values['attachment_ids'])\n        with self._check_attachments(attachments):\n            return super(IrAttachment, self).write(values)\n    else:\n        return super(IrAttachment, self).write(values)\n\n", "CodeBleu_score": 40.81633482580284}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_one()\n    if self.env.company.account_creation_skip:\n        return self.env['res.partner.bank'].new()\n    return self.env['res.partner.bank'].search([\n        ('partner_id', '=', self.id),\n        ('acc_number', '=', sanitize_account_number(self.acc_number)),\n    ], limit=1)\n\n", "CodeBleu_score": 19.862193900351066}, {"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_one()\n    if self.env.context.get(\"no_create_bank_account\"):\n        return self.env[\"res.partner.bank\"].new({})\n    if self.env.company.create_bank_account_on_partner_create:\n        bank_account = self.env[\"res.partner.bank\"].search(\n            [\n                (\"partner_id\", \"=\", self.id),\n                (\"acc_number\", \"=\", self.bank_account_id),\n            ],\n            limit=1,\n        )\n        if not bank_account:\n            bank_account = self.env[\"res.partner.bank\"].create(\n                {\n                    \"partner_id\": self.id,\n                    \"acc_number\": self.bank_account_id,\n                    \"company_id\": self.env.company.id,\n                }\n            )\n        return bank_account.with_company(self.env.company)\n    return self.env[\"res.partner.bank\"].new({})\n\n", "CodeBleu_score": 46.58627629374181}, {"code": "def _find_or_create_bank_account(self)\n\t\n    if self.env.context.get(\"skip_bank_account_create\"):\n        return self.env[\"res.partner.bank\"].new({})\n    return self.env[\"res.partner.bank\"].search_or_create(\n        {\n            \"acc_number\": self.acc_number,\n            \"partner_id\": self.partner_id.id,\n            \"company_id\": self.company_id.id,\n        }\n    )\n\n", "CodeBleu_score": 21.022682775499653}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    if self.currency_id == currency:\n        return {\n            'transaction_amount': amount_currency,\n            'journal_amount': balance,\n            'company_amount': amount_currency,\n        }\n    if self.currency_id.is_zero(amount_currency):\n        return {\n            'transaction_amount': 0.0,\n            'journal_amount': 0.0,\n            'company_amount': 0.0,\n        }\n    # We use the rate of the transaction line, which is the rate of the\n    # first line of the transaction.\n    # If the rate is not set, we use the rate of the first line of the\n    # transaction.\n    rate = self.st_line_ids[0].rate or self.st_line_ids[0].rate_from_st_line\n    if not rate:\n        return {\n            'transaction_amount': 0.0,\n            'journal_amount': 0.0,\n            'company_amount': 0.0,\n        }\n    if self.currency_id.is_zero(rate):\n        return {\n            'transaction_amount': 0.0,\n            'journal_amount': 0.0,\n            'company_amount': 0.0,\n        }\n    transaction_amount = amount_currency / rate\n    if self.currency_id.is_zero(transaction_amount):\n        return {\n            'transaction_amount': 0.0,\n            'journal_amount': 0.0,\n            'company_amount': 0.0,\n        }\n    journal_amount = balance / rate\n    if self.currency_id.is_zero(journal_amount):\n        return {\n            'transaction_amount': 0.0,\n            'journal_amount': 0.0,\n            'company_amount': 0.0,\n        }\n    company_amount = transaction_amount\n    return {\n        'transaction_amount': transaction_amount,\n        'journal_amount': journal_amount,\n        'company_amount': company_amount,\n    }", "CodeBleu_score": 24.125214374302473}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    res = {}\n    currency_type = currency.get_type_in_context(self.env.context)\n    if currency_type == 'base':\n        res['transaction_amount'] = amount_currency\n        res['journal_amount'] = balance\n        res['company_amount'] = amount_currency\n    elif currency_type == 'secondary':\n        res['transaction_amount'] = balance\n        res['journal_amount'] = amount_currency\n        res['company_amount'] = amount_currency\n    elif currency_type == 'default_secondary':\n        res['transaction_amount'] = balance\n        res['journal_amount'] = balance\n        res['company_amount'] = amount_currency\n    elif currency_type == 'default_base':\n        res['transaction_amount'] = amount_currency\n        res['journal_amount'] = amount_currency\n        res['company_amount'] = amount_currency\n    return res\n\n", "CodeBleu_score": 14.179597649788928}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    res = {}\n    # Ensure a single record context\n    self.ensure_one()\n    # Retrieve relevant accounting amounts and currencies\n    amount = self.amount_residual\n    amount_currency = self.amount_residual_currency\n    currency_id = self.currency_id\n    company_currency_id = self.company_id.currency_id\n    # Compute transaction amount, journal amount, and company amount using various exchange rates\n    transaction_amount = currency_id._convert(amount, company_currency_id, self.company_id, self.date, round=False)\n    journal_amount = currency_id._convert(amount, currency, self.company_id, self.date, round=False)\n    company_amount = currency_id._convert(amount, currency, self.company_id, self.date, round=False)\n    # Adjust transaction amount and balance accordingly depending on the currency type\n    if currency_id.is_zero(transaction_amount):\n        transaction_amount = amount\n        balance = amount_currency\n    elif currency_id.is_zero(balance):\n        balance = amount_currency\n    # Return the computed values in a dictionary\n    res = {\n        'transaction_amount': transaction_amount,\n        'journal_amount': journal_amount,\n        'company_amount': company_amount,\n        'balance': balance,\n    }\n    return res\n\n", "CodeBleu_score": 23.452724793649278}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids = Command.unlink()\n        if journal.type in ('bank', 'cash'):\n            journal.outbound_payment_method_line_ids = [\n                Command.create({\n                    'payment_method_id': method.id,\n                    'sequence': method.sequence,\n                    'is_custom': method.is_custom,\n                }) for method in journal.default_outbound_payment_methods()\n            ]\n\n", "CodeBleu_score": 44.405942813925655}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    outbound_payment_method_line_ids = []\n    for journal in self:\n        outbound_payment_method_line_ids = []\n        if journal.type in ('bank', 'cash'):\n            for payment_method in journal.default_outbound_payment_method_ids:\n                outbound_payment_method_line_ids.append((0, 0, {\n                    'payment_method_id': payment_method.id,\n                    'payment_type': payment_method.payment_type,\n                    'is_default': payment_method.is_default,\n                    'sequence': payment_method.sequence,\n                }))\n        journal.outbound_payment_method_line_ids = outbound_payment_method_line_ids\n\n", "CodeBleu_score": 33.59911613406324}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids = [Command.unlink()]\n        if journal.type in ('bank', 'cash'):\n            journal.outbound_payment_method_line_ids = [\n                Command.create({\n                    'payment_method_id': method.id,\n                    'sequence': method.sequence,\n                    'is_custom': True,\n                }) for method in journal.default_outbound_payment_method_ids\n            ]\n\n", "CodeBleu_score": 46.44164526797909}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t\n    if not self.date and self.invoice_date:\n        if self.is_sale_document():\n            self.date = self.invoice_date\n        else:\n            self.date = self.invoice_date + relativedelta(\n                months=+self.tax_report_impact_months\n            )\n    if self.date != fields.Date.context_today(self):\n        self.date = fields.Date.context_today(self)\n        self.with_delay()._compute_date()", "CodeBleu_score": 27.566626818388727}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if move.date and move.date != fields.Date.context_today(move):\n            move.date = fields.Date.context_today(move)\n        if move.invoice_date and not move.date:\n            move.date = move._get_date_from_invoice_date()\n        if move.date != fields.Date.context_today(move):\n            move.date = fields.Date.context_today(move)\n            move.with_delay()._recompute_fields()\n\n", "CodeBleu_score": 33.86100853272882}, {"code": "def _compute_date(self)\n\t\n    if self.invoice_date and not self.date:\n        if self.move_type in (\"out_invoice\", \"out_refund\"):\n            self.date = self.invoice_date\n        elif self.move_type in (\"in_invoice\", \"in_refund\"):\n            self.date = self.invoice_date\n        else:\n            self.date = self.invoice_date\n    if not self.date:\n        self.date = fields.Date.today()\n\n", "CodeBleu_score": 21.65052357837242}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document():\n            move.invoice_payment_term_id = move.partner_id.property_payment_term_id\n        elif move.is_purchase_document():\n            move.invoice_payment_term_id = move.partner_id.supplier_payment_term_id\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 42.1297530711378}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.move_type in (\"out_invoice\", \"out_refund\"):\n            move.invoice_payment_term_id = move.partner_id.property_payment_term_id\n        elif move.move_type in (\"in_invoice\", \"in_refund\"):\n            move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 45.86322343125669}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.move_type in [\"out_invoice\", \"out_refund\"]:\n            if move.partner_id.property_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_payment_term_id\n            else:\n                move.invoice_payment_term_id = False\n        elif move.move_type in [\"in_invoice\", \"in_refund\"]:\n            if move.partner_id.property_supplier_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id\n            else:\n                move.invoice_payment_term_id = False\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 48.206568210420116}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        if tax.company_id:\n            company_id = tax.company_id.id\n        else:\n            company_id = self.env.company.id\n        tax_group = self.env['account.tax.group'].search([\n            ('country_id', '=', tax.country_id.id),\n            ('company_id', '=', company_id)\n        ], limit=1)\n        if not tax_group:\n            tax_group = self.env['account.tax.group'].search([\n                ('country_id', '=', False),\n                ('company_id', '=', company_id)\n            ], limit=1)\n        tax.tax_group_id = tax_group.id\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 33.898716297866876}, {"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        tax_group_ids = self.env['account.tax.group'].search([\n            ('country_id', '=', tax.country_id.id),\n            ('company_id', '=', tax.company_id.id),\n        ])\n        if not tax_group_ids:\n            tax_group_ids = self.env['account.tax.group'].search([\n                ('country_id', '=', False),\n                ('company_id', '=', tax.company_id.id),\n            ])\n        if tax_group_ids:\n            tax.tax_group_id = tax_group_ids[0]\n\n\n def _compute_tax_group_id(self):\n    \"\"\"This function assigns the appropriate tax group to each tax based on the tax's country and company. It first categorizes taxes by their country and company. For each group, it searches for a matching tax group with the same country and company. If no exact match is found, it searches for a tax group without a specified country but within the same company.\"\"\"\n    for tax in self:\n        tax_group_ids = self.env['account.tax.group'].search([\n            ('country_id', '=', tax.country_id.id),\n            ('company_id', '=', tax.company_id.id),\n        ])\n        if not tax_group_ids:\n            tax_group_ids = self.env['account.tax.group'].search([\n                ('country_id', '=', False),\n                ('company_id', '=', tax.company_id.id),\n            ])\n        if tax_group_ids:\n            tax.tax_group_id = tax_group_ids[0]\n\n\n def _compute_tax_group_id(self):\n    \"\"\"This function assigns the appropriate tax group to each tax based on the tax's country and company. It first categorizes taxes by their country and company. For each group, it searches for a matching tax group with the same country and company. If no exact match is found, it searches for a tax group without a specified country but within the same company.\"\"\"\n    for tax in self:\n        tax_group_ids", "CodeBleu_score": 29.318208204914377}, {"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        tax_group_id = False\n        tax_group_ids = self.env['account.tax.group'].search([('country_id', '=', tax.country_id.id), ('company_id', '=', tax.company_id.id)])\n        if not tax_group_ids:\n            tax_group_ids = self.env['account.tax.group'].search([('country_id', '=', False), ('company_id', '=', tax.company_id.id)])\n        if tax_group_ids:\n            for tax_group in tax_group_ids:\n                if tax_group.country_id.id == tax.country_id.id:\n                    tax_group_id = tax_group.id\n                    break\n            if not tax_group_id:\n                for tax_group in tax_group_ids:\n                    if not tax_group.country_id:\n                        tax_group_id = tax_group.id\n                        break\n        tax.tax_group_id = tax_group_id\n\n", "CodeBleu_score": 31.769550353833004}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set the database in the session\n    session = requests.Session()\n    login_url = url + '/login'\n    login_data = {'login': login, 'password': password, 'db': db}\n    session.post(login_url, data=login_data)\n\n    # Prepare the POST request data\n    upload_url = url + '/base_import_module/login_upload'\n    upload_data = {'force': force}\n\n    # Read the module file and upload it to the server\n    with open(module_file, 'rb') as f:\n        upload_data['module_file'] = f\n        response = session.post(upload_url, files=upload_data)\n\n    return response.text\n\n", "CodeBleu_score": 38.6573221630885}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n\n    # Set the database in the session\n    session = requests.Session()\n    session.get(url + \"/login\")\n    session.cookies.set(\"database\", db)\n\n    # Prepare the POST request data\n    data = {\"login\": login, \"password\": password, \"force\": force}\n\n    # Read the module file and upload it to the server\n    with open(module_file, \"rb\") as f:\n        data[\"file\"] = (\"module.zip\", f)\n        response = session.post(\n            url + \"/base_import_module/login_upload\", data=data\n        )\n\n    # Check if the server has the required module installed or is outdated\n    if \"Module already installed\" in response.text:\n        raise Exception(\"Module already installed\")\n    elif \"Outdated module\" in response.text:\n        raise Exception(\"Outdated module\")\n\n    # Return the server's response text\n    return response.text\n\n", "CodeBleu_score": 39.11266868577706}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n\n    # Set the database in the session by accessing the login URL\n    session = requests.Session()\n    session.post(url + '/base_import_module/login', data={'login': login, 'password': password, 'db': db})\n\n    # Prepare the POST request data\n    data = {'force': force}\n\n    # Read the module file and upload it to the server\n    with open(module_file, 'rb') as f:\n        data['module_file'] = f.read()\n    response = session.post(url + '/base_import_module/login_upload', data=data)\n\n    # Check if the server has the required module installed or is outdated\n    if response.status_code == 400:\n        raise Exception('Module not installed or outdated')\n\n    # Return the server's response text\n    return response.text\n\n", "CodeBleu_score": 41.22415368252547}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t\n    # Retrieve configuration settings for the database name and whether to overwrite existing translations\n    db_name = os.environ.get('ODOO_DB_NAME')\n    overwrite = os.environ.get('ODOO_OVERWRITE')\n\n    # Create a new database registry and use a cursor to initialize a TranslationImporter\n    registry = odoo.modules.registry.Registry(db_name)\n    with registry.cursor() as cr:\n        importer = odoo.addons.base.models.res_lang.TranslationImporter(cr, registry.get('base.partner.lang'))\n\n        # Load translation files based on the specified configuration\n        path = Path(os.environ.get('ODOO_TRANSLATION_PATH'))\n        for lang_code in os.listdir(path):\n            if not os.path.isdir(path / lang_code):\n                continue\n            for filename in os.listdir(path / lang_code):\n                if not filename.endswith('.csv'):\n                    continue\n                with open(path / lang_code / filename, 'r', encoding='utf-8') as f:\n                    reader = csv.reader(f)\n                    for row in reader:\n                        if len(row) != 2:\n                            logging.warning(f'Skipping invalid row: {row}')\n                            continue\n                        importer.import_lang(lang_code, row[0], row[1])\n\n        # Save the translations, with the option to overwrite existing ones\n        importer.save(overwrite=overwrite)\n\n", "CodeBleu_score": 44.231265270433404}, {"code": "def import_translation()\n\t\n    logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s: %(message)s')\n    config = odoo.tools.config\n    db_name = config.get('db_name')\n    overwrite = config.get('overwrite')\n    registry = odoo.modules.registry.Registry(db_name)\n    registry.init(db_name, update_module=True)\n    with registry.cursor() as cr:\n        importer = odoo.tools.translation.TranslationImporter(cr, db_name, overwrite=overwrite)\n        importer.load_translations()\n        importer.save_translations()\n    registry.release_all_cnxns()\n\n", "CodeBleu_score": 51.59110442240481}, {"code": "def import_translation()\n\t\n    config = odoo.tools.config\n    db_name = config.get('db_name')\n    overwrite = config.get('overwrite')\n    registry = odoo.registry(db_name)\n    cursor = registry.cursor()\n    importer = TranslationImporter(cursor, overwrite)\n    importer.load_translation_files(config.get('translation_files'))\n    importer.save_translations()\n    cursor.close()\n\n", "CodeBleu_score": 35.57125042846279}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\t\n    child = odoo.osv.orm.Model.new(self, name, info)\n    child.depth = self.depth + 1\n    if self.parent:\n        child.parent_id = self.parent.id\n        child.parent_path = self.parent_path + \",\" + str(self.id)\n    child.parent = self\n    child.parent_id = self.id\n    child.parent_path = self.parent_path + \",\" + str(self.id)\n    if self.company_id:\n        child.company_id = self.company_id\n    if self.company_ids:\n        child.company_ids = self.company_ids\n    if self.user_id:\n        child.user_id = self.user_id\n    if self.user_ids:\n        child.user_ids = self.user_ids\n    if self.manager_id:\n        child.manager_id = self.manager_id\n    if self.manager_ids:\n        child.manager_ids = self.manager_ids\n    if self.child_ids:\n        child.child_ids = self.child_ids\n    child.child_ids.append(child.id)\n    child.child_ids.sort()\n    return child\n\n", "CodeBleu_score": 29.030399975306082}, {"code": "def add_child(self, name, info)\n\t\n    child = self.add_child_node(name, info)\n    child.depth = self.depth + 1\n    if self.parent:\n        child.parent = self.parent\n        child.parent_id = self.parent_id\n    if self.model:\n        child.model = self.model\n    if self.res_id:\n        child.res_id = self.res_id\n    if self.view_id:\n        child.view_id = self.view_id\n    if self.view_mode:\n        child.view_mode = self.view_mode\n    if self.view_type:\n        child.view_type = self.view_type\n    if self.view_arch:\n        child.view_arch = self.view_arch\n    if self.view_inherit_arch:\n        child.view_inherit_arch = self.view_inherit_arch\n    if self.view_inherit_id:\n        child.view_inherit_id = self.view_inherit_id\n    if self.view_inherit_left:\n        child.view_inherit_left = self.view_inherit_left\n    if self.view_inherit_right:\n        child.view_inherit_right = self.view_inherit_right\n    if self.view_inherit_up:\n        child.view_inherit_up = self.view_inherit_up\n    if self.view_inherit_down:\n        child.view_inherit_down = self.view_inherit_down\n    if self.view_inherit_behaviour:\n        child.view_inherit_behaviour = self.view_inherit_behaviour\n    if self.view_inherit_domain:\n        child.view_inherit_domain = self.view_inherit_domain\n    if self.view_inherit_context:\n        child.view_inherit_context = self.view_inherit_context\n    if self.view_inherit_readonly:\n        child.view_inherit_readonly = self.view_inherit_readonly\n    if self.view_inherit_no_create:\n        child.view_inherit_no_create = self.view_inherit_no_create\n    if self.view_", "CodeBleu_score": 20.814591189775378}, {"code": "def add_child(self, name, info)\n\t\n    child = Node(name, info)\n    child.depth = self.depth + 1\n    if \"parent\" in info:\n        child.parent = info[\"parent\"]\n    if \"child_of\" in info:\n        child.child_of = info[\"child_of\"]\n    if \"child_of_id\" in info:\n        child.child_of_id = info[\"child_of_id\"]\n    if \"child_of_type\" in info:\n        child.child_of_type = info[\"child_of_type\"]\n    if \"child_of_name\" in info:\n        child.child_of_name = info[\"child_of_name\"]\n    if \"child_of_ref\" in info:\n        child.child_of_ref = info[\"child_of_ref\"]\n    if \"child_of_ref_id\" in info:\n        child.child_of_ref_id = info[\"child_of_ref_id\"]\n    if \"child_of_ref_type\" in info:\n        child.child_of_ref_type = info[\"child_of_ref_type\"]\n    if \"child_of_ref_name\" in info:\n        child.child_of_ref_name = info[\"child_of_ref_name\"]\n    if \"child_of_ref_ref\" in info:\n        child.child_of_ref_ref = info[\"child_of_ref_ref\"]\n    if \"child_of_ref_ref_id\" in info:\n        child.child_of_ref_ref_id = info[\"child_of_ref_ref_id\"]\n    if \"child_of_ref_ref_type\" in info:\n        child.child_of_ref_ref_type = info[\"child_of_ref_ref_type\"]\n    if \"child_of_ref_ref_name\" in info:\n        child.child_of_ref_ref_name = info[\"child_of_ref_ref_name\"]\n    if \"child_of_ref_ref_ref\" in info:\n        child.child_of_ref_ref_ref = info[\"child_of_ref_ref_ref\"]\n    if", "CodeBleu_score": 20.95540339919666}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\n        \"dates\": dates,\n        \"balances\": [0] * len(dates),\n        \"root_type\": frappe.get_cached_value(\"Account\", account, \"root_type\"),\n    }\n\n    if result[\"root_type\"] not in (\"Asset\", \"Expense\"):\n        result[\"balances\"] = [-b for b in result[\"balances\"]]\n\n    if result[\"root_type\"] in (\"Asset\", \"Liability\", \"Equity\"):\n        for entry in gl_entries:\n            if entry.posting_date < dates[0]:\n                continue\n\n            for i, date in enumerate(dates):\n                if entry.posting_date <= date:\n                    result[\"balances\"][i] += entry.debit - entry.credit\n                    break\n\n    return result\n\n", "CodeBleu_score": 32.714469376730406}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\n        \"dates\": dates,\n        \"balances\": [0] * len(dates),\n        \"account_name\": account.account_name,\n        \"root_type\": account.root_type,\n    }\n\n    if result[\"root_type\"] not in [\"Asset\", \"Expense\"]:\n        result[\"balances\"] = [-x for x in result[\"balances\"]]\n\n    if result[\"root_type\"] in [\"Asset\", \"Liability\", \"Equity\"]:\n        for entry in gl_entries:\n            date_index = dates.index(getdate(entry.posting_date))\n            result[\"balances\"][date_index] += entry.debit - entry.credit\n\n    return result\n\n", "CodeBleu_score": 29.285000577965683}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\"dates\": dates, \"balances\": {}}\n    root_type = get_root_type(account)\n\n    for date in dates:\n        result[\"balances\"][date] = 0\n\n    if root_type not in (\"Asset\", \"Expense\"):\n        for date, balance in result[\"balances\"].items():\n            result[\"balances\"][date] = -balance\n\n    if root_type in (\"Asset\", \"Liability\", \"Equity\"):\n        for entry in gl_entries:\n            if entry.posting_date <= get_period_ending(dates[-1]):\n                result[\"balances\"][entry.posting_date] += entry.debit - entry.credit\n\n    return result\n\n", "CodeBleu_score": 36.83584391191399}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t\n\n    if not self.is_new():\n        if self.get_doc_before_save():\n            if (\n                self.get_doc_before_save().account_type\n                in (\"Receivable\", \"Payable\")\n                and self.account_type not in (\"Receivable\", \"Payable\")\n            ):\n                if self.account_type in (\"Bank\", \"Cash\"):\n                    return\n                if (\n                    self.account_type in (\"Credit\", \"Debit\")\n                    and self.account_type != self.get_doc_before_save().account_type\n                ):\n                    return\n                if (\n                    self.account_type in (\"Income\", \"Expense\")\n                    and self.account_type != self.get_doc_before_save().account_type\n                ):\n                    return\n                if (\n                    self.account_type == \"Stock\"\n                    and self.account_type != self.get_doc_before_save().account_type\n                ):\n                    return\n                if (\n                    self.account_type == \"Other Current Asset\"\n                    and self.account_type != self.get_doc_before_save().account_type\n                ):\n                    return\n                if (\n                    self.account_type == \"Other Current Liability\"\n                    and self.account_type != self.get_doc_before_save().account_type\n                ):\n                    return\n\n                if (\n                    self.account_type == \"Other Current Asset\"\n                    and self.account_type != self.get_doc_before_save().account_type\n                ):\n                    return\n\n                if (\n                    self.account_type == \"Other Current Liability\"\n                    and self.account_type != self.get_doc_before_save().account_type\n                ):\n                    return\n\n                if (\n                    self.account_type == \"Other Current Asset\"\n                    and self.account_type != self.get_doc_before_save().account_type\n                ):\n                    return\n\n                if (\n                    self.account_type == \"Other Current Liability\"\n                    and", "CodeBleu_score": 16.894618130943407}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if not erpnext.get_default(\"company\", self.company) and self.company:\n        erpnext.set_default(\"company\", self.company)\n\n    if not self.is_new():\n        old_account = frappe.get_doc(\"Account\", self.name)\n\n        if cstr(old_account.account_type) != cstr(self.account_type):\n            if self.account_type in (\"Receivable\", \"Payable\"):\n                if self.has_permission(\"read\") and self.has_permission(\"write\"):\n                    if self.get_account_type() in (\"Receivable\", \"Payable\"):\n                        if self.has_general_ledger_entries():\n                            if self.is_group:\n                                accounts = get_descendants_of(\"Account\", self.name)\n                            else:\n                                accounts = [self.name]\n\n                            for account in accounts:\n                                frappe.get_doc(\"Account\", account).add_comment(\n                                    \"Comment\",\n                                    _(\n                                        \"The account type has been changed to a non-receivable/payable type. Please check the Accounts report for potential issues.\"\n                                    ),\n                                )\n\n                            frappe.msgprint(\n                                _(\n                                    \"The account type has been changed to a non-receivable/payable type. Please check the Accounts report for potential issues.\"\n                                ),\n                                title=_(\"Warning\"),\n                                indicator=\"orange\",\n                            )\n\n", "CodeBleu_score": 29.92016098344239}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if not self.is_new():\n        account_type_changed = self.get_doc_before_save().account_type != self.account_type\n        if account_type_changed:\n            if self.account_type in [\"Receivable\", \"Payable\"]:\n                if self.is_group:\n                    throw(_(\"Cannot change account type of a group account\"))\n                if self.account_type == \"Receivable\" and self.receivable_accounts:\n                    throw(_(\"Cannot change account type of a receivable account\"))\n                if self.account_type == \"Payable\" and self.payable_accounts:\n                    throw(_(\"Cannot change account type of a payable account\"))\n\n                if not erpnext.get_default(\n                    \"Accounts Settings\", \"accounts_report_settings\"\n                ).get(\"accounts_report\"):\n                    return\n\n                if (\n                    get_descendants_of(self.name, doctype=\"Account\")\n                    or get_ancestors_of(self.name, doctype=\"Account\")\n                ) and self.account_type in [\"Receivable\", \"Payable\"]:\n                    frappe.throw(\n                        _(\n                            \"The account type cannot be changed to 'Receivable' or 'Payable' as it is used in the 'Accounts' report.\"\n                        )\n                    )\n\n                if self.account_type == \"Receivable\":\n                    warning = _(\n                        \"The account type has been changed to 'Receivable' which is used in the 'Accounts' report. Please ensure that the account is a receivable account before changing the account type.\"\n                    )\n                else:\n                    warning = _(\n                        \"The account type has been changed to 'Payable' which is used in the 'Accounts' report. Please ensure that the account is a payable account before changing the account type.\"\n                    )\n\n                self.add_comment(\"Comment\", warning)\n\n", "CodeBleu_score": 30.049324411738016}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t\n\n    if self.account_type == \"Income\" or self.account_type == \"Expense\":\n        return\n\n    if not self.account_currency:\n        self.account_currency = frappe.db.get_value(\n            \"Company\", self.company, \"default_currency\"\n        )\n        self.account_currency_explicit = 1\n\n    if self.account_currency != frappe.defaults.get_user_default(\n        \"currency\"\n    ) and cint(erpnext.get_defaults().allow_stale_accounts):\n        if self.is_group:\n            ledger_entries = frappe.get_all(\n                \"Ledger Entry\",\n                filters=[\n                    [\"account\", \"in\", get_descendants_of(self.name)],\n                    [\"is_cancelled\", \"=\", 0],\n                ],\n                fields=[\"account\", \"account_currency\"],\n            )\n        else:\n            ledger_entries = frappe.get_all(\n                \"Ledger Entry\",\n                filters=[[\"account\", \"=\", self.name], [\"is_cancelled\", \"=\", 0]],\n                fields=[\"account\", \"account_currency\"],\n            )\n\n        if ledger_entries:\n            if len(set([x.account_currency for x in ledger_entries])) > 1:\n                frappe.throw(\n                    _(\"Currency of ledger entries must be same for all accounts\")\n                )\n            else:\n                self.account_currency = ledger_entries[0].account_currency\n                self.account_currency_explicit = 1\n\n", "CodeBleu_score": 36.61958178148835}, {"code": "def validate_account_currency(self)\n\t\n    if not self.account_currency:\n        self.account_currency = frappe.db.get_value(\"Company\", self.company, \"default_currency\")\n        self.account_currency_explicitly_specified = 1\n\n    if self.account_currency != frappe.defaults.get_user_default(\"currency\"):\n        frappe.throw(\n            _(\"Account Currency must be set to {0}\").format(frappe.defaults.get_user_default(\"currency\"))\n        )\n\n    # check if there are any ledger entries with a different currency\n    if self.is_group:\n        return\n\n    if not erpnext.get_default(\"accounts_in_multiple_currency\"):\n        return\n\n    if not self.account_currency:\n        return\n\n    if self.account_currency != self.get_doc_before_save().account_currency:\n        # check if there are any ledger entries with a different currency\n        ledger_entries = frappe.get_all(\n            \"GL Entry\",\n            filters={\n                \"account\": self.name,\n                \"company\": self.company,\n                \"account_currency\": [\"not in\", [self.account_currency, None]],\n            },\n            fields=[\"name\", \"account_currency\"],\n        )\n\n        if ledger_entries:\n            frappe.throw(\n                _(\n                    \"Account {0} cannot be changed to {1} as it has existing ledger entries with a different currency\"\n                ).format(self.account, self.account_currency)\n            )\n\n", "CodeBleu_score": 38.58411299910066}, {"code": "def validate_account_currency(self)\n\t\n    if not self.account_currency:\n        self.account_currency = frappe.db.get_value(\n            \"Company\", self.company, \"default_currency\"\n        )\n        self.account_currency_explicit = 1\n    else:\n        self.account_currency_explicit = 1\n\n    if self.is_group:\n        return\n\n    # check if there are any ledger entries with a different currency\n    ledger_entries = frappe.db.sql(\n        \"\"\"\n        SELECT COUNT(*)\n        FROM `tabGL Entry`\n        WHERE account = %s\n        AND docstatus < 2\n        AND account_currency != %s\n        \"\"\",\n        (self.name, self.account_currency),\n    )\n\n    if ledger_entries[0][0]:\n        frappe.throw(\n            _(\"Cannot change currency of account {0}. Currency of GL Entry(s) is different.\").format(\n                self.name\n            )\n        )\n\n", "CodeBleu_score": 37.29506014831753}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n\n    # Initialize a dictionary to merge entries\n    merged_entries = {}\n\n    # Iterate through each entry\n    for entry in entries:\n        # Generate a unique key for the entry based on the specified accounting dimensions\n        key = generate_key(entry, accounting_dimensions)\n\n        # If the key already exists in the dictionary, update the debit, credit, and their respective amounts in account currency\n        if key in merged_entries:\n            merged_entries[key][\"debit\"] += entry.debit\n            merged_entries[key][\"credit\"] += entry.credit\n            merged_entries[key][\"debit_in_account_currency\"] += entry.debit_in_account_currency\n            merged_entries[key][\"credit_in_account_currency\"] += entry.credit_in_account_currency\n        # Otherwise, add the entry to the dictionary with the key and corresponding values\n        else:\n            merged_entries[key] = {\n                \"account\": entry.account,\n                \"debit\": entry.debit,\n                \"credit\": entry.credit,\n                \"debit_in_account_currency\": entry.debit_in_account_currency,\n                \"credit_in_account_currency\": entry.credit_in_account_currency,\n            }\n\n    # Return the dictionary containing the aggregated entries\n    return merged_entries\n\n", "CodeBleu_score": 39.20112954763532}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key = \"\"\n        for dimension in accounting_dimensions:\n            key += cstr(entry.get(dimension)) + \":\"\n        key += cstr(entry.account)\n\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \"account\": entry.account,\n                \"account_name\": entry.account_name,\n                \"account_type\": entry.account_type,\n                \"debit\": 0,\n                \"debit_in_account_currency\": 0,\n                \"credit\": 0,\n                \"credit_in_account_currency\": 0,\n                \"is_closing_entry\": cint(entry.is_closing_entry),\n            }\n\n        if entry.debit > 0:\n            merged_entries[key][\"debit\"] += entry.debit\n            merged_entries[key][\"debit_in_account_currency\"] += entry.debit_in_account_currency\n\n        if entry.credit > 0:\n            merged_entries[key][\"credit\"] += entry.credit\n            merged_entries[key][\"credit_in_account_currency\"] += entry.credit_in_account_currency\n\n    return merged_entries\n\n", "CodeBleu_score": 36.15832740080975}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n\n    for entry in entries:\n        key = generate_key(entry, accounting_dimensions)\n        if not merged_entries.get(key):\n            merged_entries[key] = {\n                \"account\": entry.account,\n                \"account_currency\": entry.account_currency,\n                \"account_name\": entry.account_name,\n                \"account_type\": entry.account_type,\n                \"debit\": 0,\n                \"credit\": 0,\n                \"debit_in_account_currency\": 0,\n                \"credit_in_account_currency\": 0,\n                \"account_currency_difference\": 0,\n                \"account_currency_difference_in_account_currency\": 0,\n            }\n\n        merged_entries[key][\"debit\"] += cint(entry.debit)\n        merged_entries[key][\"credit\"] += cint(entry.credit)\n        merged_entries[key][\"debit_in_account_currency\"] += cint(entry.debit_in_account_currency)\n        merged_entries[key][\"credit_in_account_currency\"] += cint(entry.credit_in_account_currency)\n        merged_entries[key][\"account_currency_difference\"] += cint(entry.account_currency_difference)\n        merged_entries[key][\"account_currency_difference_in_account_currency\"] += cint(\n            entry.account_currency_difference_in_account_currency\n        )\n\n    return merged_entries\n\n", "CodeBleu_score": 39.29277686638733}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.get(\"is_supplier_hold\"):\n        if self.get(\"hold_type\") == \"Supplier Payment\":\n            if self.get(\"hold_amount\") > self.get(\"outstanding_amount\"):\n                frappe.throw(\n                    _(\n                        \"Supplier {0} is on hold. Please release the hold before proceeding with this transaction.\"\n                    ).format(self.get(\"supplier\"))\n                )\n        elif self.get(\"hold_type\") == \"Supplier Invoice\":\n            if self.get(\"hold_amount\") > self.get(\"outstanding_amount\"):\n                frappe.throw(\n                    _(\n                        \"Supplier {0} is on hold. Please release the hold before proceeding with this transaction.\"\n                    ).format(self.get(\"supplier\"))\n                )\n        elif self.get(\"hold_type\") == \"Supplier Invoice Payment\":\n            if self.get(\"hold_amount\") > self.get(\"outstanding_amount\"):\n                frappe.throw(\n                    _(\n                        \"Supplier {0} is on hold. Please release the hold before proceeding with this transaction.\"\n                    ).format(self.get(\"supplier\"))\n                )\n        elif self.get(\"hold_type\") == \"Supplier Credit Note\":\n            if self.get(\"hold_amount\") > self.get(\"outstanding_amount\"):\n                frappe.throw(\n                    _(\n                        \"Supplier {0} is on hold. Please release the hold before proceeding with this transaction.\"\n                    ).format(self.get(\"supplier\"))\n                )\n        elif self.get(\"hold_type\") == \"Supplier Credit Note Payment\":\n            if self.get(\"hold_amount\") > self.get(\"outstanding_amount\"):\n                frappe.throw(\n                    _(\n                        \"Supplier {0} is on hold. Please release the hold before proceeding with this transaction.\"\n                    ).format(self.get(\"supplier\"))\n                )\n        elif self.get(\"hold_type\") == \"Supplier Debit Note\":\n            if self.get(\"hold_amount\") > self.get(\"outstanding_amount\"):\n                frappe.throw", "CodeBleu_score": 16.854699898903057}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if (self.doctype == \"Supplier Payment\" or self.doctype == \"Purchase Invoice\") and self.supplier:\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.hold_reason and supplier.hold_reason == self.doctype:\n            if supplier.hold_type == \"Payment\":\n                if not supplier.release_date or supplier.release_date > getdate():\n                    frappe.throw(\n                        _(\"Supplier {0} is on hold. Please update the release date.\").format(\n                            bold(supplier.supplier_name)\n                        )\n                    )\n            elif supplier.hold_type == \"Invoice\":\n                if not supplier.release_date or supplier.release_date > getdate():\n                    frappe.throw(\n                        _(\"Supplier {0} is on hold. Please update the release date.\").format(\n                            bold(supplier.supplier_name)\n                        )\n                    )\n\n", "CodeBleu_score": 28.913442017413004}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype in [\"Supplier Payment\", \"Buying Invoice\"]:\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.hold_reason and supplier.hold_reason == self.doctype:\n            if supplier.hold_type == \"Payment\" and self.doctype == \"Supplier Payment\":\n                if supplier.hold_until and supplier.hold_until < getdate():\n                    supplier.hold_reason = None\n                    supplier.save()\n                else:\n                    frappe.throw(\n                        _(\"Supplier {0} is on hold until {1}. Please update the hold date.\").format(\n                            supplier.supplier_name, supplier.hold_until\n                        )\n                    )\n            elif supplier.hold_type == \"Invoice\" and self.doctype == \"Buying Invoice\":\n                if supplier.hold_until and supplier.hold_until < getdate():\n                    supplier.hold_reason = None\n                    supplier.save()\n                else:\n                    frappe.throw(\n                        _(\"Supplier {0} is on hold until {1}. Please update the hold date.\").format(\n                            supplier.supplier_name, supplier.hold_until\n                        )\n                    )\n            else:\n                frappe.throw(\n                    _(\"Supplier {0} is on hold. Please update the hold date.\").format(\n                        supplier.supplier_name\n                    )\n                )\n\n", "CodeBleu_score": 22.18889503524454}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = [\n        \"Journal Entry\",\n        \"Payment Entry\",\n        \"Sales Invoice\",\n        \"Purchase Invoice\",\n        \"Sales Order\",\n        \"Purchase Order\",\n        \"Quotation\",\n        \"Delivery Note\",\n        \"Sales Order Item\",\n        \"Purchase Order Item\",\n        \"Quotation Item\",\n        \"Delivery Note Item\",\n        \"Sales Invoice Item\",\n        \"Purchase Invoice Item\",\n        \"Payment Entry Reference\",\n        \"Journal Entry Account\",\n        \"Journal Entry Tax\",\n        \"Journal Entry Detail\",\n        \"Purchase Receipt\",\n        \"Purchase Receipt Item\",\n        \"Purchase Invoice Payment\",\n        \"Payment Entry Reference\",\n        \"Payment Entry Cheque\",\n        \"Payment Entry Bank\",\n        \"Payment Entry Cash\",\n        \"Payment Entry Other\",\n        \"Payment Entry Cash\",\n        \"Payment Entry Cheque\",\n        \"Payment Entry Bank\",\n        \"Payment Entry Other\",\n        \"Payment Entry Cash\",\n        \"Payment Entry Cheque\",\n        \"Payment Entry Bank\",\n        \"Payment Entry Other\",\n        \"Payment Entry Cash\",\n        \"Payment Entry Cheque\",\n        \"Payment Entry Bank\",\n        \"Payment Entry Other\",\n        \"Payment Entry Cash\",\n        \"Payment Entry Cheque\",\n        \"Payment Entry Bank\",\n        \"Payment Entry Other\",\n        \"Payment Entry Cash\",\n        \"Payment Entry Cheque\",\n        \"Payment Entry Bank\",\n        \"Payment Entry Other\",\n        \"Payment Entry Cash\",\n        \"Payment Entry Cheque\",\n        \"Payment Entry Bank\",\n        \"Payment Entry Other\",\n        \"Payment Entry Cash\",\n        \"Payment Entry Cheque\",\n        \"Payment Entry Bank\",\n        \"Payment Entry Other\",\n        \"Payment Entry Cash\",\n        \"Payment Entry Cheque\",\n        \"Payment Entry Bank\",\n        \"Payment Entry Other\",\n        \"Payment Entry Cash\",\n        \"Payment Entry Cheque\",\n        \"Payment Entry Bank\",\n       ", "CodeBleu_score": 4.460607184992854}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = [\"Purchase Invoice\", \"Sales Invoice\", \"Journal Entry\", \"Payment Entry\"]\n    repost_voucher_doctypes = [\"Purchase Invoice\", \"Sales Invoice\", \"Journal Entry\"]\n    repost_voucher_links = [\"Purchase Invoice\", \"Sales Invoice\", \"Journal Entry\"]\n\n    for doctype in repost_doctypes:\n        repost_voucher_map = {}\n        repost_voucher_links_map = {}\n        repost_voucher_doctypes_map = {}\n\n        repost_voucher_map = frappe.get_all(\n            doctype,\n            filters={\"voucher_type\": self.voucher_type, \"voucher_no\": self.voucher_no},\n            fields=[\"name\", \"parent\", \"parenttype\"],\n        )\n\n        for row in repost_voucher_map:\n            if row.parenttype not in repost_voucher_doctypes_map:\n                repost_voucher_doctypes_map[row.parenttype] = []\n            repost_voucher_doctypes_map[row.parenttype].append(row.parent)\n\n        repost_voucher_links_map = frappe.get_all(\n            doctype,\n            filters={\"voucher_type\": self.voucher_type, \"voucher_no\": self.voucher_no},\n            fields=[\"name\", \"parent\", \"parenttype\"],\n        )\n\n        for row in repost_voucher_links_map:\n            if row.parenttype not in repost_voucher_links_map:\n                repost_voucher_links_map[row.parenttype] = []\n            repost_voucher_links_map[row.parenttype].append(row.parent)\n\n        for parenttype, parents in repost_voucher_doctypes_map.items():\n            for parent in parents:\n                parent_doc = frappe.get_doc", "CodeBleu_score": 23.249109779691274}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = [\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Receipt\",\n        \"Sales Order\",\n        \"Purchase Order\",\n    ]\n\n    for repost_doctype in repost_doctypes:\n        repost_vouchers = frappe.db.get_all(\n            repost_doctype,\n            filters={\n                \"voucher_type\": self.doctype,\n                \"voucher_no\": self.name,\n            },\n            fields=[\"name\", \"parent\", \"parenttype\"],\n        )\n\n        repost_vouchers_map = {}\n        for row in repost_vouchers:\n            repost_vouchers_map.setdefault(row.parenttype, []).append(row.name)\n\n        for parenttype, repost_voucher_names in repost_vouchers_map.items():\n            parent = frappe.get_doc(parenttype, row.parent)\n            parent.set(\"ignore_validate\", True)\n            parent.set(\"ignore_links\", True)\n\n            if repost_doctype == \"Purchase Invoice\":\n                parent.set(\"repost_vouchers\", [])\n            elif repost_doctype == \"Sales Invoice\":\n                parent.set(\"repost_vouchers\", [])\n            elif repost_doctype == \"Purchase Receipt\":\n                parent.set(\"repost_vouchers\", [])\n            elif repost_doctype == \"Sales Order\":\n                parent.set(\"repost_vouchers\", [])\n            elif repost_doctype == \"Purchase Order\":\n                parent.set(\"repost_vouchers\", [])\n\n            parent.save()\n\n", "CodeBleu_score": 21.930600969259597}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        client = plaid.Client(\n            client_id=self.plaid_client_id,\n            secret=self.plaid_secret,\n            public_key=self.plaid_public_key,\n            environment=self.plaid_environment,\n        )\n\n        cursor = None\n        transactions = []\n        while True:\n            response = client.Transactions.get(\n                self.plaid_access_token,\n                start_date,\n                end_date,\n                account_ids=[account_id] if account_id else None,\n                count=500,\n                offset=cursor,\n            )\n\n            transactions.extend(response[\"transactions\"])\n            cursor = response.get(\"next_cursor\")\n\n            if not cursor:\n                break\n\n        return transactions\n\n    except APIError as e:\n        if e.code == \"PRODUCT_NOT_READY\":\n            frappe.throw(\n                _(\"Plaid product is not yet ready. Please try again later.\")\n            )\n        elif e.code == \"INVALID_CREDENTIALS\":\n            frappe.throw(_(\"Invalid Plaid credentials.\"))\n        elif e.code == \"INVALID_REQUEST\":\n            frappe.throw(_(\"Invalid request.\"))\n        elif e.code == \"INVALID_ACCESS_TOKEN\":\n            frappe.throw(_(\"Invalid access token.\"))\n        elif e.code == \"ITEM_ERROR\":\n            frappe.throw(_(\"Item error.\"))\n        elif e.code == \"ITEM_LOGIN_REQUIRED\":\n            frappe.throw(_(\"Item login required.\"))\n        elif e.code == \"ITEM_LOCKED\":\n            frappe.throw(_(\"Item locked.\"))\n        elif e.code == \"ITEM_NOT_FOUND\":\n            frappe.throw(_(\"Item not found.\"))\n        elif e.code == \"ITEM_NO_LONGER_SUPPORTED\":\n            frappe.throw(_(\"Item no longer supported.\"))\n        elif e.code == \"ITEM_PRODUCT_NOT_SUPPORTED\":\n           ", "CodeBleu_score": 29.33365429869396}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        client = plaid.Client(\n            client_id=self.client_id,\n            secret=self.secret,\n            public_key=self.public_key,\n            environment=self.environment,\n        )\n\n        query_params = {\n            \"start_date\": start_date,\n            \"end_date\": end_date,\n            \"options\": {\"count\": 250},\n        }\n        if account_id:\n            query_params[\"account_ids\"] = [account_id]\n\n        response = client.Transactions.get(self.access_token, query_params)\n        transactions = response[\"transactions\"]\n        total_transactions = response[\"total_transactions\"]\n\n        while len(transactions) < total_transactions:\n            offset = len(transactions)\n            query_params[\"offset\"] = offset\n            response = client.Transactions.get(self.access_token, query_params)\n            transactions.extend(response[\"transactions\"])\n\n        return transactions\n\n    except APIError as e:\n        if e.code == \"PRODUCT_NOT_READY\":\n            frappe.throw(\n                _(\"Please wait for the product to be ready before fetching transactions\")\n            )\n        elif e.code == \"INVALID_CREDENTIALS\":\n            frappe.throw(\n                _(\n                    \"Invalid credentials. Please check your Plaid Client ID, Secret, and Public Key.\"\n                )\n            )\n        elif e.code == \"INVALID_REQUEST\":\n            frappe.throw(\n                _(\"Invalid request. Please check your request parameters and try again.\")\n            )\n        elif e.code == \"ITEM_ERROR\":\n            frappe.throw(\n                _(\n                    \"Item error. Please check your Plaid access token and try again.\"\n                )\n            )\n        elif e.code == \"ITEM_LOGIN_REQUIRED\":\n            frappe.throw(\n                _(\n                    \"Item login required. Please log in to your bank account and try again.\"\n                )\n            )\n        elif e.code == \"INVALID_INPUT\":\n            frappe", "CodeBleu_score": 34.61876014336752}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        client = self.get_client()\n        if account_id:\n            query_params = {\"start_date\": start_date, \"end_date\": end_date, \"account_ids\": [account_id]}\n        else:\n            query_params = {\"start_date\": start_date, \"end_date\": end_date}\n        response = client.Transactions.get(self.access_token, query_params)\n        transactions = response[\"transactions\"]\n        total_transactions = response[\"total_transactions\"]\n        if total_transactions > len(transactions):\n            cursor = response[\"next_cursor\"]\n            while cursor:\n                response = client.Transactions.get(self.access_token, query_params, cursor)\n                transactions.extend(response[\"transactions\"])\n                cursor = response[\"next_cursor\"]\n        return transactions\n    except APIError as e:\n        if e.code == \"PRODUCT_NOT_READY\":\n            frappe.throw(_(\"Plaid product not ready. Please try again later.\"))\n        elif e.code == \"INVALID_CREDENTIALS\":\n            frappe.throw(_(\"Invalid credentials. Please check your Plaid credentials.\"))\n        elif e.code == \"INVALID_REQUEST\":\n            frappe.throw(_(\"Invalid request. Please check your request parameters.\"))\n        elif e.code == \"INVALID_INPUT\":\n            frappe.throw(_(\"Invalid input. Please check your input parameters.\"))\n        elif e.code == \"ITEM_ERROR\":\n            frappe.throw(_(\"Item error. Please check your item.\"))\n        elif e.code == \"ITEM_NOT_FOUND\":\n            frappe.throw(_(\"Item not found. Please check your item.\"))\n        elif e.code == \"ITEM_LOGIN_REQUIRED\":\n            frappe.throw(_(\"Item login required. Please login to your item.\"))\n        elif e.code == \"ITEM_LOCKED\":\n            frappe.throw(_(\"Item locked. Please unlock your item.\"))\n        elif e.code == \"ITEM_LOCKED\":\n            frappe.throw(_(\"", "CodeBleu_score": 37.75742324512517}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t\n    try:\n        institution_id = response.get('institution_id')\n        institution_name = response.get('institution_name')\n        institution_type = response.get('institution_type')\n        institution_logo = response.get('institution_logo')\n\n        # Get access token\n        connector = PlaidConnector()\n        access_token = connector.get_access_token(token)\n\n        # Check if bank already exists\n        bank = frappe.get_doc('Bank', {'institution_id': institution_id})\n        if bank:\n            bank.access_token = access_token\n            bank.save()\n            return\n\n        # Create new bank record\n        bank = frappe.new_doc('Bank')\n        bank.institution_id = institution_id\n        bank.institution_name = institution_name\n        bank.institution_type = institution_type\n        bank.institution_logo = institution_logo\n        bank.access_token = access_token\n        bank.insert()\n    except Exception as e:\n        frappe.log_error(title='Error adding bank', message=str(e))\n\n", "CodeBleu_score": 41.882263673825356}, {"code": "def add_institution(token, response)\n\t\n    try:\n        institution = response['institution']\n        institution_name = institution['name']\n        institution_id = institution['institution_id']\n        institution_type = institution['type']\n        institution_logo = institution['logo']\n        institution_url = institution['url']\n\n        plaid_connector = PlaidConnector()\n        access_token = plaid_connector.get_access_token(token)\n\n        bank = frappe.get_doc('Bank', {'institution_id': institution_id})\n\n        if not bank:\n            bank = frappe.new_doc('Bank')\n            bank.institution_id = institution_id\n            bank.institution_name = institution_name\n            bank.institution_type = institution_type\n            bank.institution_logo = institution_logo\n            bank.institution_url = institution_url\n\n        bank.access_token = access_token\n        bank.save()\n\n        return bank\n    except Exception as e:\n        frappe.log_error(e, \"Error while adding bank\")\n\n", "CodeBleu_score": 41.60790557096067}, {"code": "def add_institution(token, response)\n\t\n    try:\n        institution = response[\"institution\"]\n        institution_name = institution[\"name\"]\n        institution_id = institution[\"institution_id\"]\n        institution_type = institution[\"type\"]\n        institution_status = institution[\"status\"]\n        institution_products = institution[\"products\"]\n        institution_country_codes = institution[\"country_codes\"]\n        institution_primary_color = institution[\"primary_color\"]\n        institution_logo = institution[\"logo\"]\n        institution_url = institution[\"url\"]\n        institution_official_name = institution[\"official_name\"]\n\n        # Check if the bank already exists in the database\n        bank = frappe.db.get_value(\"Bank\", {\"institution_id\": institution_id})\n        if bank:\n            # Update the access token for the existing bank record\n            frappe.db.set_value(\"Bank\", bank, \"access_token\", token)\n            frappe.db.commit()\n            frappe.log_error(\"Bank already exists in the database\")\n            return\n\n        # Create a new bank record\n        bank = frappe.new_doc(\"Bank\")\n        bank.update({\n            \"bank_name\": institution_name,\n            \"institution_id\": institution_id,\n            \"institution_type\": institution_type,\n            \"institution_status\": institution_status,\n            \"institution_products\": institution_products,\n            \"institution_country_codes\": institution_country_codes,\n            \"institution_primary_color\": institution_primary_color,\n            \"institution_logo\": institution_logo,\n            \"institution_url\": institution_url,\n            \"institution_official_name\": institution_official_name,\n            \"access_token\": token\n        })\n        bank.insert()\n    except Exception as e:\n        frappe.log_error(e, \"Error adding institution\")\n\n", "CodeBleu_score": 29.252566355180313}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t\n\n    # Get the last integration date\n    last_integration_date = bank_account.get_last_integration_date()\n\n    # Determine the start and end dates for the transaction retrieval\n    start_date = last_integration_date or add_months(today(), -1)\n    end_date = today()\n\n    # Attempt to fetch the transactions\n    try:\n        transactions = get_transactions(bank, bank_account, start_date, end_date)\n    except ItemError as e:\n        frappe.log_error(\n            \"Error while fetching transactions for bank account {}: {}\".format(\n                bank_account.name, e\n            )\n        )\n        return\n\n    # Process the transactions into new bank transactions\n    for transaction in transactions:\n        bank_transaction = bank_account.add_transaction(transaction)\n        if bank_transaction:\n            bank_transaction.post_process()\n\n    # Update the last integration date to the date of the oldest transaction\n    if transactions:\n        bank_account.update_last_integration_date(getdate(transactions[-1][\"date\"]))\n\n    # Log the number of new transactions added\n    frappe.log_info(\n        \"Synced {} new transactions for bank account {}\".format(\n            len(transactions), bank_account.name\n        )\n    )\n\n", "CodeBleu_score": 29.62370639058538}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        connector = PlaidConnector(bank, bank_account)\n        last_integration_date = get_last_integration_date(bank_account)\n        start_date = last_integration_date or getdate(add_months(today(), -1))\n        end_date = getdate(add_months(today(), 1))\n        transactions = connector.get_transactions(start_date, end_date)\n        new_transactions = process_transactions(transactions, bank_account)\n        update_last_integration_date(bank_account, new_transactions)\n        frappe.db.commit()\n        frappe.msgprint(\n            _(\"Added {0} new transactions for {1}\").format(\n                len(new_transactions), bank_account.name\n            )\n        )\n    except Exception as e:\n        frappe.log_error(\n            title=_(\"Error while syncing transactions for {0}\").format(bank_account.name),\n            message=str(e),\n        )\n\n", "CodeBleu_score": 32.38401200658051}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    last_integration_date = bank_account.get(\"last_integration_date\")\n    start_date = last_integration_date or add_months(today(), -1)\n    end_date = today()\n    if start_date == end_date:\n        return\n\n    try:\n        plaid_connector = PlaidConnector(bank.plaid_settings)\n        transactions = plaid_connector.get_transactions(\n            bank_account.plaid_access_token, start_date, end_date\n        )\n        new_transactions = []\n        for transaction in transactions:\n            if transaction.date > last_integration_date:\n                new_transactions.append(transaction)\n\n        if new_transactions:\n            new_transactions = create_bank_transactions(\n                bank_account, new_transactions\n            )\n\n        if new_transactions:\n            bank_account.last_integration_date = min(\n                getdate(transaction.date)\n                for transaction in new_transactions\n            )\n            bank_account.save()\n            frappe.db.commit()\n\n        frappe.log_error(\n            \"New transactions synced for Bank Account {0}: {1}\".format(\n                bank_account.name, len(new_transactions)\n            ),\n            \"Plaid Sync\",\n        )\n    except ItemError as e:\n        frappe.log_error(\n            \"Error syncing transactions for Bank Account {0}: {1}\".format(\n                bank_account.name, e.error_message\n            ),\n            \"Plaid Sync\",\n        )\n\n", "CodeBleu_score": 32.904824534732825}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t\n    try:\n        uri = f\"{entity}?maxResults=1000\"\n        response = self.get(uri)\n        response = response.json()\n        total_entries = response.get(\"totalCount\")\n        if total_entries:\n            offset = 0\n            while offset < total_entries:\n                uri = f\"{entity}?maxResults=1000&offset={offset}\"\n                response = self.get(uri)\n                response = response.json()\n                if response.get(\"entries\"):\n                    for entry in response.get(\"entries\"):\n                        self.preprocess_and_save_entry(entry, entity)\n                offset += 1000\n    except Exception:\n        frappe.log_error(traceback.format_exc(), \"QuickBooks Migration\")\n        frappe.log_error(response.text, \"QuickBooks Migration\")\n\n", "CodeBleu_score": 28.769743086213794}, {"code": "def _migrate_entries(self, entity)\n\t\n\n    # Construct the query URI\n    query_uri = f\"https://api.intuit.com/quickbooks/v4/company/{self.quickbooks_company_id}/query?query=SELECT * FROM {entity}\"\n\n    # Get the total number of entries\n    response = self._get_response(query_uri)\n    total_entries = response.json()[\"totalCount\"]\n\n    # Fetch the entries in batches of 1000\n    for i in range(0, total_entries, 1000):\n        try:\n            query_uri = f\"{query_uri}&startPosition={i}&maxResults=1000\"\n            response = self._get_response(query_uri)\n            response_json = response.json()\n\n            # Preprocess and save the entries\n            entries = response_json[\"QueryResponse\"][\"ItemQueryResponse\"][\"Item\"]\n            self._preprocess_and_save_entries(entries, entity)\n\n        except Exception as e:\n            frappe.log_error(\n                \"Error migrating entries for {0}: {1}\".format(entity, str(e)),\n                traceback=traceback.format_exc(),\n            )\n            frappe.log_error(\n                \"Response: {0}\".format(response.text),\n                traceback=traceback.format_exc(),\n            )\n\n", "CodeBleu_score": 30.832282398059856}, {"code": "def _migrate_entries(self, entity)\n\t\n    try:\n        query_uri = f\"https://sandbox-quickbooks.api.intuit.com/v3/company/{self.quickbooks_company_id}/{entity}\"\n        response = self.oauth2_session.get(query_uri)\n        response_json = response.json()\n        total_entries = response_json[\"totalCount\"]\n        total_pages = (total_entries // 1000) + 1\n        for page in range(total_pages):\n            response = self.oauth2_session.get(query_uri, params={\"startPosition\": page * 1000})\n            response_json = response.json()\n            for entry in response_json[\"QueryResponse\"][\"Account\"]:\n                self._preprocess_and_save_entry(entry, entity)\n    except Exception as e:\n        frappe.log_error(\n            title=f\"Error while migrating {entity} from QuickBooks\",\n            message=f\"Error: {e}", "CodeBleu_score": 37.41158599951}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\t\n    if self.type == \"Statement Charge\" or self.type == \"Reimburse Charge\":\n        self.save_as_journal_entry(invoice)\n    else:\n        self.save_as_sales_invoice(invoice)\n\n", "CodeBleu_score": 20.165547609110618}, {"code": "def _save_invoice(self, invoice)\n\t\n    if self.type == \"Statement Charge\":\n        self.save_as_journal_entry(invoice)\n    elif self.type == \"Reimburse Charge\":\n        self.save_as_journal_entry(invoice)\n    else:\n        self.save_as_sales_invoice(invoice)\n\n", "CodeBleu_score": 23.359284145854065}, {"code": "def _save_invoice(self, invoice)\n\t\n    if invoice.get(\"type\") == \"StatementCharge\":\n        self._save_statement_invoice(invoice)\n    elif invoice.get(\"type\") == \"ReimburseCharge\":\n        self._save_reimburse_invoice(invoice)\n    else:\n        self._save_sales_invoice(invoice)\n\n", "CodeBleu_score": 25.010717584172554}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    interval = (end_date - start_date) / no_of_visit\n    if interval < 1:\n        frappe.throw(_(\"Interval between visits cannot be less than 1 day\"))\n    for i in range(no_of_visit):\n        schedule_date = add_days(start_date, interval * i)\n        schedule_list.append(schedule_date)\n    schedule_list = adjust_schedule_dates(schedule_list, sales_person)\n    return schedule_list\n\n", "CodeBleu_score": 28.182542759370545}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    if not sales_person:\n        sales_person = self.sales_person\n\n    if not sales_person:\n        throw(_(\"Sales Person is required\"))\n\n    if not start_date:\n        throw(_(\"Start Date is required\"))\n\n    if not end_date:\n        throw(_(\"End Date is required\"))\n\n    if not no_of_visit:\n        throw(_(\"No of Visit is required\"))\n\n    start_date = getdate(start_date)\n    end_date = getdate(end_date)\n\n    if start_date > end_date:\n        throw(_(\"Start Date should be less than End Date\"))\n\n    if date_diff(start_date, end_date) < 0:\n        throw(_(\"Date Difference should be greater than 0\"))\n\n    if date_diff(start_date, end_date) < no_of_visit:\n        throw(_(\"Date Difference should be greater than No of Visit\"))\n\n    interval = date_diff(start_date, end_date) / no_of_visit\n\n    schedule_list = []\n    for i in range(no_of_visit):\n        schedule_list.append(add_days(start_date, interval * i))\n\n    holiday_list = get_holiday_list_for_employee(sales_person)\n    if holiday_list:\n        schedule_list = adjust_dates_for_holidays(schedule_list, holiday_list)\n\n    return schedule_list\n\n", "CodeBleu_score": 38.30110511234453}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\n    schedule_list = []\n    interval = cint(self.visit_interval)\n    if not interval:\n        throw(_(\"Please set Visit Interval\"))\n    start_date = getdate(start_date)\n    end_date = getdate(end_date)\n\n    if date_diff(start_date, end_date) < interval:\n        throw(_(\"Start Date and End Date should be atleast {} days apart\").format(interval))\n\n    for i in range(no_of_visit):\n        schedule_date = add_days(start_date, interval * i)\n        schedule_list.append(schedule_date)\n\n    schedule_list = adjust_dates(schedule_list, sales_person)\n\n    return schedule_list\n\n", "CodeBleu_score": 37.458377995278354}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\t        $method = request()->method();\n\n        $bulk_actions = [\n            'POST' => 'create',\n            'PUT'  => 'update',\n            'DELETE' => 'destroy',\n        ];\n\n        $title = trans_choice('general.payments', 2);\n\n        $path = route('banking.transactions.index');\n\n        $handle = 'banking.transactions';\n\n        $html = view($view, $data)->render();\n\n        return response()->json([\n            'success' => true,\n            'error' => false,\n            'message' => '',\n            'data' => [\n                'title' => $title,\n                'path' => $path,\n                'handle' => $handle,\n                'html' => $html,\n            ],\n        ]);\n    }", "CodeBleu_score": 51.785098643889086}, {"code": "<?\n   public function response($view, $data = []){\n\t\n    $method = request()->method();\n\n    $bulk_actions = [];\n\n    if ($method == 'POST') {\n        $bulk_actions = [\n            'delete' => [\n                'action' => 'delete',\n                'text' => trans_choice('general.delete', 2),\n                'icon' => 'fa fa-fw fa-trash',\n                'style' => 'danger',\n                'confirm' => true,\n            ],\n        ];\n    }\n\n    // Check if the request method is POST and the action is delete\n    if ($method == 'POST' && request()->get('action') == 'delete') {\n        // Dispatch the DeleteContact job with the selected ids\n        Bus::dispatch(new DeleteContact(request()->get('ids')));\n    }\n\n    // Check if the request method is POST and the action is update\n    if ($method == 'POST' && request()->get('action') == 'update') {\n        // Dispatch the UpdateContact job with the selected ids and the updated data\n        Bus::dispatch(new UpdateContact(request()->get('ids'), request()->all()));\n    }\n\n    // Check if the request method is POST and the action is create_zip\n    if ($method == 'POST' && request()->get('action') == 'create_zip') {\n        // Dispatch the CreateZipForDownload job with the selected ids\n        Bus::dispatch(new CreateZipForDownload(request()->get('ids')));\n    }\n\n    // Check if the request method is POST and the action is create_media\n    if ($method == 'POST' && request()->get('action') == 'create_media') {\n        // Dispatch the CreateMediableForDownload job with the selected ids\n        Bus::dispatch(new CreateMediableForDownload(request()->get('ids')));\n    }\n\n    // Check if the request method is POST and the action is delete_transaction\n    if ($method == 'POST' && request()->get('action') == 'delete_transaction') {\n        // Dispatch the DeleteTransaction job with the selected ids\n        Bus::dispatch(new DeleteTransaction(request()->get('ids'))", "CodeBleu_score": 28.159996805824548}, {"code": "<?\n   public function response($view, $data = []){\n\t        return response()->json([\n            'success' => true,\n            'message' => __('common.success'),\n            'data' => [\n                'title' => __('common.success'),\n                'path' => request()->path(),\n                'handle' => $this->getHandle(),\n                'html' => view($view, $data)->render(),\n            ],\n        ]);\n    }", "CodeBleu_score": 29.555544810541818}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t    $contacts = $request->input('contacts', []);\n\n    try {\n        Bus::chain([\n            function ($job) use ($contacts) {\n                foreach ($contacts as $contact) {\n                    $job->dispatch(new DeleteContact($contact));\n                }\n            },\n        ])->dispatch();\n\n        flash(trans('messages.deleted', ['type' => trans_choice('general.contacts', 2)]))->success();\n    } catch (Throwable $e) {\n        flash($e->getMessage())->error();\n    }\n}", "CodeBleu_score": 55.96888300110404}, {"code": "<?\npublic function deleteContacts($request){\n\t    $contacts = collect($request->input('contacts'));\n\n    try {\n        Bus::chain([\n            function () use ($contacts) {\n                foreach ($contacts as $contact) {\n                    DeleteContact::dispatch($contact);\n                }\n            },\n        ])->dispatch();\n    } catch (Throwable $e) {\n        flash($e->getMessage())->error();\n    }\n}", "CodeBleu_score": 57.149224628740214}, {"code": "<?\npublic function deleteContacts($request){\n\t    // Retrieve the selected contacts from the request\n    $contacts = $request->input('contacts');\n\n    // Dispatch a delete operation for each contact\n    try {\n        Bus::chain([\n            function () use ($contacts) {\n                foreach ($contacts as $contact) {\n                    DeleteContact::dispatch($contact);\n                }\n            },\n        ])->dispatch();\n    } catch (Throwable $e) {\n        // Display an error message if necessary\n        flash($e->getMessage())->error();\n    }\n}", "CodeBleu_score": 47.68968462709305}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getTransactions($request);\n\n    try {\n        foreach ($transactions as $transaction) {\n            Jobs::dispatch(new DeleteTransaction($transaction));\n        }\n    } catch (Throwable $e) {\n        flash($e->getMessage())->error();\n    }\n}", "CodeBleu_score": 53.641560392389934}, {"code": "<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getTransactions($request);\n\n    foreach ($transactions as $transaction) {\n        try {\n            Jobs::dispatch(new DeleteTransaction($transaction));\n        } catch (Throwable $e) {\n            flash($e->getMessage())->error();\n        }\n    }\n}", "CodeBleu_score": 57.70976115090052}, {"code": "<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->transactions()->whereIn('id', $request->get('ids'))->get();\n\n    try {\n        Bus::chain([\n            Jobs::deleteTransactions($transactions),\n        ])->dispatch();\n\n        flash(trans('messages.deleted', ['type' => trans_choice('general.transactions', 2)]))->success();\n    } catch (Throwable $e) {\n        flash($e->getMessage())->error();\n    }\n}", "CodeBleu_score": 44.3353990640061}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\t    if ($request instanceof FormRequest) {\n        $request->withValidator($validator);\n    }\n}", "CodeBleu_score": 12.06718706384329}, {"code": "<?\npublic function withValidator($validator){\n\t    $request = app(FormRequest::class);\n\n    if ($request instanceof FormRequest && method_exists($request, 'rules')) {\n        $rules = $request->rules();\n\n        if ($rules) {\n            foreach ($this->rows as $index => $row) {\n                $data = Arr::only($row, array_keys($rules));\n\n                $request->replace($data);\n\n                try {\n                    $validator->setRules($rules);\n                    $validator->setData($data);\n\n                    $validator->after(function ($validator) use ($request) {\n                        if (method_exists($request, 'withValidator')) {\n                            $request->withValidator($validator);\n                        }\n                    });\n\n                    $validator->validate();\n                } catch (ValidationException $e) {\n                    $validator->errors()->merge($e->errors());\n\n                    throw $e;\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 43.73598660325766}, {"code": "<?\npublic function withValidator($validator){\n\t    $request = $this->request;\n\n    if (!$request instanceof FormRequest || !$request instanceof HasLocalePreference) {\n        return;\n    }\n\n    $validator->after(function ($validator) use ($request) {\n        foreach ($this->rows as $row) {\n            $request->prepareForValidation();\n            $request->setValidator($validator);\n\n            try {\n                $request->validateResolved();\n            } catch (ValidationException $e) {\n                $validator->errors()->merge($e->errors());\n            }\n        }\n    });\n}", "CodeBleu_score": 31.22405753587626}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    if ($this instanceof ShouldUpdate) {\n        $model = $arguments[0] ?? null;\n        $request = $arguments[1] ?? null;\n\n        if ($model instanceof Model) {\n            $this->model = $model;\n        }\n\n        if ($request instanceof Request) {\n            $this->request = $request;\n        }\n    }\n}", "CodeBleu_score": 53.23300019810815}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    if ($this instanceof ShouldUpdate) {\n        if ($arguments[0] instanceof Model) {\n            $this->setModel($arguments[0]);\n        }\n        if ($arguments[1] instanceof Request) {\n            $this->setRequest($arguments[1]);\n        }\n    }\n}", "CodeBleu_score": 38.15369871740594}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    if ($this instanceof ShouldUpdate) {\n        $this->model = $arguments[0] instanceof Model ? $arguments[0] : $this->model;\n        $this->request = $arguments[1] instanceof Request ? $arguments[1] : $this->request;\n    }\n}", "CodeBleu_score": 41.76232996297305}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t    if (request()->has('sort')) {\n        $sort = request()->get('sort');\n    }\n\n    return $query->searchString()\n        ->orderBy($sort, request()->get('order', 'asc'))\n        ->get()\n        ->when(request()->expectsJson() && !request()->is('api/*'), function ($collection) {\n            return $collection->map(function ($item) {\n                return $item->only($item->getFillable());\n            });\n        })\n        ->when(request()->has('limit'), function ($collection) {\n            return $collection->paginate(request()->get('limit'));\n        }, function ($collection) {\n            return $collection->paginate(setting('default.list_limit', '25'));\n        });\n}", "CodeBleu_score": 32.90062496623306}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t    if (request()->has('sort')) {\n        $sort = request()->get('sort');\n    }\n\n    $query = $query->orderBy($sort, 'asc');\n\n    if (request()->has('search')) {\n        event(new SearchStringApplying($query, request()->get('search')));\n        $query = $query->search(request()->get('search'));\n        event(new SearchStringApplied($query, request()->get('search')));\n    }\n\n    if (request()->has('limit')) {\n        $limit = request()->get('limit');\n    } else {\n        $limit = config('app.pagination_limit');\n    }\n\n    if (request()->wantsJson() && !request()->is('api/*')) {\n        return $query->get();\n    } else {\n        return $query->paginate($limit);\n    }\n}", "CodeBleu_score": 45.387030506264395}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t    return $this->scopeSort($query, $sort)->search()->apply()->paginate(request('limit', 50));\n}", "CodeBleu_score": 14.82759458442881}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t    $openAmount = 0;\n    $overdueAmount = 0;\n\n    if ($model->status == 'paid') {\n        return [0, 0];\n    }\n\n    if ($model->status == 'partial') {\n        $openAmount = Reports::getPaymentTotal($model);\n    }\n\n    if ($model->status == 'open') {\n        $openAmount = $model->amount;\n    }\n\n    if ($model->status == 'overdue') {\n        $overdueAmount = $model->amount;\n    }\n\n    if ($model->status == 'overdue') {\n        $overdueAmount = $model->amount;\n    }\n\n    if ($model->due_at && $model->due_at->isPast()) {\n        $overdueAmount = $model->amount;\n    }\n\n    return [$openAmount, $overdueAmount];\n}", "CodeBleu_score": 43.04011480994333}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t    $open_amount = $model->amount;\n    $overdue_amount = 0;\n\n    if ($model->status == 'paid') {\n        $open_amount = 0;\n        $overdue_amount = 0;\n    } elseif ($model->status == 'partial') {\n        $open_amount = $model->amount - $model->transactions->sum('amount');\n        $overdue_amount = 0;\n    }\n\n    if ($model->due_at && $model->due_at->isFuture()) {\n        $overdue_amount = $open_amount;\n        $open_amount = 0;\n    }\n\n    return [$open_amount, $overdue_amount];\n}", "CodeBleu_score": 41.09334872569189}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t    $openAmount = 0;\n    $overdueAmount = 0;\n\n    if ($model->status == 'paid') {\n        return [\n            'open' => 0,\n            'overdue' => 0,\n        ];\n    }\n\n    if ($model->status == 'partial') {\n        $openAmount = $model->transactions->sum('amount');\n    }\n\n    $dueDate = Date::parse($model->due_date);\n\n    if ($dueDate->isPast()) {\n        $overdueAmount = $openAmount;\n        $openAmount = 0;\n    }\n\n    return [\n        'open' => $openAmount,\n        'overdue' => $overdueAmount,\n    ];\n}", "CodeBleu_score": 42.637446289460875}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $total = $this->toBase()->getCountForPagination();\n\n    $results = $total ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 85.79727650177529}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $total = $this->toBase()->getCountForPagination();\n\n    $results = $total ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 85.79727650177529}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $total = $this->toBase()->getCountForPagination();\n\n    $results = $total ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n\n    return new Paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 82.76149165165583}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t    // Retrieve the selected reconciliations from the request\n    $reconciliations = Reconciliation::whereIn('id', $request->get('selected'))->get();\n\n    // Process each reconciliation within a database transaction\n    foreach ($reconciliations as $reconciliation) {\n        // Begin a database transaction\n        \\DB::beginTransaction();\n\n        // Set the reconciliation's status to reconciled\n        $reconciliation->status = 'reconciled';\n        $reconciliation->save();\n\n        // Mark all related transactions within the reconciliation's date range and account ID as reconciled\n        $transactions = Transaction::where('account_id', $reconciliation->account_id)\n            ->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])\n            ->get();\n\n        foreach ($transactions as $transaction) {\n            $transaction->reconciled = true;\n            $transaction->save();\n        }\n\n        // Commit the database transaction\n        \\DB::commit();\n    }\n}", "CodeBleu_score": 46.422532603993574}, {"code": "<?\npublic function reconcile($request){\n\t    $reconciliations = Reconciliation::whereIn('id', $request->input('ids'))->get();\n\n    foreach ($reconciliations as $reconciliation) {\n        \\DB::transaction(function () use ($reconciliation) {\n            $reconciliation->status = 'reconciled';\n            $reconciliation->save();\n\n            $transactions = Transaction::where('account_id', $reconciliation->account_id)\n                ->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])\n                ->get();\n\n            foreach ($transactions as $transaction) {\n                $transaction->reconciled = 1;\n                $transaction->save();\n            }\n        });\n    }\n}", "CodeBleu_score": 54.07114065600239}, {"code": "<?\npublic function reconcile($request){\n\t    // Retrieve the selected reconciliations from the request\n    $reconciliations = Reconciliation::whereIn('id', $request->get('selected'))->get();\n\n    // Process each reconciliation within a database transaction\n    foreach ($reconciliations as $reconciliation) {\n        DB::transaction(function () use ($reconciliation) {\n            // Set the reconciliation's status to reconciled\n            $reconciliation->status = 'reconciled';\n            $reconciliation->save();\n\n            // Mark all related transactions within the reconciliation's date range and account ID as reconciled\n            $transactions = Transaction::where('account_id', $reconciliation->account_id)\n                ->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])\n                ->get();\n\n            foreach ($transactions as $transaction) {\n                $transaction->reconciled = true;\n                $transaction->save();\n            }\n        });\n    }\n}", "CodeBleu_score": 49.36047916602476}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t    try {\n        // Get existing invitations for the user\n        $invitations = UserInvitation::where('email', $this->email)->get();\n\n        // Delete existing invitations for the user\n        foreach ($invitations as $invitation) {\n            $invitation->delete();\n        }\n\n        // Create a new invitation with a unique token\n        $invitation = UserInvitation::create([\n            'email' => $this->email,\n            'token' => Str::random(40),\n            'company_id' => $this->company_id,\n        ]);\n\n        // Dispatch a notification job to notify the user\n        $this->dispatch(new Notification($invitation));\n\n        return $invitation;\n    } catch (TransportException $e) {\n        throw new Exception('Error sending email: ' . $e->getMessage());\n    }\n}", "CodeBleu_score": 43.03604078233067}, {"code": "<?\npublic function handle(): UserInvitation{\n\t    // Retrieve and delete existing invitations for the user\n    $invitations = UserInvitation::where('user_id', $this->user->id)->get();\n\n    foreach ($invitations as $invitation) {\n        $invitation->delete();\n    }\n\n    // Create a new invitation with a unique token\n    $invitation = UserInvitation::create([\n        'user_id' => $this->user->id,\n        'email' => $this->email,\n        'token' => Str::random(40),\n        'expires_at' => now()->addDays(config('type.invitations.lifetime')),\n    ]);\n\n    // Send the invitation notification\n    try {\n        dispatch(new Notification($invitation));\n    } catch (TransportException $e) {\n        throw new Exception('Unable to send email.');\n    }\n\n    return $invitation;\n}", "CodeBleu_score": 55.016482038161165}, {"code": "<?\npublic function handle(): UserInvitation{\n\t    // Delete existing invitations\n    UserInvitation::where('email', $this->email)->delete();\n\n    // Create new invitation\n    $invitation = UserInvitation::create([\n        'company_id' => $this->company_id,\n        'email' => $this->email,\n        'invited_by' => $this->invited_by,\n        'token' => Str::random(40),\n        'created_from' => Sources::getSource(),\n    ]);\n\n    // Dispatch notification job\n    try {\n        dispatch(new Notification($invitation));\n    } catch (Exception $e) {\n        throw new Exception('Unable to send invitation.');\n    }\n\n    return $invitation;\n}", "CodeBleu_score": 32.01343585999242}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\t    if ($this->transaction->reconciled) {\n        throw new \\Exception('This transaction has already been reconciled.');\n    }\n\n    if ($this->transaction->type == 'transfer') {\n        throw new \\Exception('Transfer transactions cannot be reconciled.');\n    }\n}", "CodeBleu_score": 33.208444144038864}, {"code": "<?\npublic function authorize(): void{\n\t    if ($this->transaction->reconciled) {\n        throw new \\Exception('This transaction has already been reconciled.');\n    }\n\n    if ($this->transaction->type == 'transfer') {\n        throw new \\Exception('Unauthorized');\n    }\n}", "CodeBleu_score": 40.934784925427685}, {"code": "<?\npublic function authorize(): void{\n\t    if ($this->transaction->reconciled) {\n        throw new \\Exception('Cannot update a reconciled transaction.');\n    }\n\n    if ($this->transaction->type == 'transfer') {\n        throw new \\Exception('Cannot update a transfer transaction.');\n    }\n}", "CodeBleu_score": 33.6219613933024}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t    // Get the tenant ID from the request's access token\n    HttpServletRequest request = Tools.getRequest();\n    String tenantId = request.getHeader(\"tenantId\");\n\n    // Check if the tenant ID is not zero\n    if (tenantId != null && !tenantId.equals(\"0\")) {\n        // Allow access to specific tables\n        List<String> allowedTables = new ArrayList<>();\n        allowedTables.add(\"sys_user\");\n        allowedTables.add(\"sys_role\");\n        allowedTables.add(\"sys_menu\");\n        allowedTables.add(\"sys_role_menu\");\n        allowedTables.add(\"sys_user_role\");\n        allowedTables.add(\"sys_user_data_auth\");\n        allowedTables.add(\"sys_data_auth\");\n        allowedTables.add(\"sys_data_auth_role\");\n        allowedTables.add(\"sys_data_auth_menu\");\n        allowedTables.add(\"sys_data_auth_user\");\n        allowedTables.add(\"sys_data_auth_user_role\");\n        allowedTables.add(\"sys_data_auth_user_menu\");\n        allowedTables.add(\"sys_data_auth_user_dept\");\n        allowedTables.add(\"sys_data_auth_user_post\");\n        allowedTables.add(\"sys_data_auth_user_org\");\n        allowedTables.add(\"sys_data_auth_user_shop\");\n        allowedTables.add(\"sys_data_auth_user_shop_type\");\n        allowedTables.add(\"sys_data_auth_user_shop_type_brand\");\n        allowedTables.add(\"sys_data_auth_user_shop_type_brand_product\");\n        allowedTables.add(\"sys_data_auth_user_shop_type_brand_product_category\");\n        allowedTables.add(\"sys_data_auth_user_shop_type_brand_product_category_product\");\n        allowedTables.add(\"sys_data_auth_user_shop_type_brand_product_category_product_sku\");\n        allowedTables.add(\"sys_data_auth_user", "CodeBleu_score": 22.353539532262705}, {"code": "public boolean doTableFilter(String tableName){\n\t    // Get the tenant ID from the request's access token\n    HttpServletRequest request = Tools.getRequest();\n    String tenantId = request.getHeader(\"tenantId\");\n\n    // If the tenant ID is not zero, allow access to the following tables\n    if (!tenantId.equals(\"0\")) {\n        List<String> allowedTables = new ArrayList<>();\n        allowedTables.add(\"sys_user\");\n        allowedTables.add(\"sys_role\");\n        allowedTables.add(\"sys_menu\");\n        allowedTables.add(\"sys_dept\");\n        allowedTables.add(\"sys_dict\");\n        allowedTables.add(\"sys_config\");\n        allowedTables.add(\"sys_log\");\n        allowedTables.add(\"sys_file\");\n        allowedTables.add(\"sys_tenant\");\n        allowedTables.add(\"sys_tenant_user\");\n        allowedTables.add(\"sys_tenant_menu\");\n        allowedTables.add(\"sys_tenant_role\");\n        allowedTables.add(\"sys_tenant_dept\");\n        allowedTables.add(\"sys_tenant_dict\");\n        allowedTables.add(\"sys_tenant_config\");\n        allowedTables.add(\"sys_tenant_file\");\n        allowedTables.add(\"sys_tenant_log\");\n        allowedTables.add(\"sys_tenant_api\");\n        allowedTables.add(\"sys_tenant_api_log\");\n        allowedTables.add(\"sys_tenant_api_user\");\n        allowedTables.add(\"sys_tenant_api_role\");\n        allowedTables.add(\"sys_tenant_api_menu\");\n        allowedTables.add(\"sys_tenant_api_dept\");\n        allowedTables.add(\"sys_tenant_api_dict\");\n        allowedTables.add(\"sys_tenant_api_config\");\n        allowedTables.add(\"sys_tenant_api_file\");\n        allowedTables.add(\"sys_tenant_api_log\");\n        allowedTables.add(\"sys_tenant_api_user\");\n        allowedTables.add(\"sys_", "CodeBleu_score": 22.34131241153899}, {"code": "public boolean doTableFilter(String tableName){\n\t    // Get the tenant ID from the request's access token\n    HttpServletRequest request = Tools.getRequest();\n    String tenantId = request.getHeader(\"tenantId\");\n\n    // If the tenant ID is not zero, allow access to certain predefined tables\n    if (tenantId != null && !tenantId.equals(\"0\")) {\n        return true;\n    }\n\n    // Otherwise, deny access to all tables\n    return false;\n}", "CodeBleu_score": 16.366839282404356}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 75.2955715722213}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 75.08759747992765}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 75.2955715722213}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    try {\n        AccountVo4List accountVo4List = new AccountVo4List();\n        accountVo4List.setPage(Integer.parseInt(request.getParameter(\"page\")));\n        accountVo4List.setRows(Integer.parseInt(request.getParameter(\"rows\")));\n        accountVo4List.setSort(request.getParameter(\"sort\"));\n        accountVo4List.setOrder(request.getParameter(\"order\"));\n        accountVo4List.setName(request.getParameter(\"name\"));\n        accountVo4List.setType(request.getParameter(\"type\"));\n        accountVo4List.setStatus(request.getParameter(\"status\"));\n        accountVo4List.setDepartmentId(request.getParameter(\"departmentId\"));\n        accountVo4List.setParentId(request.getParameter(\"parentId\"));\n        accountVo4List.setStart(request.getParameter(\"start\"));\n        accountVo4List.setEnd(request.getParameter(\"end\"));\n        accountVo4List.setDepartmentName(request.getParameter(\"departmentName\"));\n        accountVo4List.setParentName(request.getParameter(\"parentName\"));\n        List<Account> accountList = accountService.findBySelect(accountVo4List);\n        int total = accountService.getTotal(accountVo4List);\n        JSONObject result = new JSONObject();\n        JSONArray jsonArray = JSONArray.parseArray(JSONArray.toJSONString(accountList));\n        result.put(\"rows\", jsonArray);\n        result.put(\"total\", total);\n        return returnJson(result);\n    } catch (Exception e) {\n        logger.error(e.getMessage());\n        return returnJson(new BaseResponseInfo(ErpInfo.FAILURE, e.getMessage()));\n    }\n}", "CodeBleu_score": 31.8741380509383}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    try {\n        List<Account> accountList = accountService.findBySelect(request);\n        JSONArray jsonArray = new JSONArray();\n        for (Account account : accountList) {\n            JSONObject jsonObject = new JSONObject();\n            jsonObject.put(\"value\", account.getId());\n            jsonObject.put(\"label\", account.getName());\n            jsonArray.add(jsonObject);\n        }\n        return jsonArray.toJSONString();\n    } catch (Exception e) {\n        logger.error(e.getMessage());\n        return returnJson(ErpInfo.FAILURE, \"\u83b7\u53d6\u5931\u8d25\");\n    }\n}", "CodeBleu_score": 49.2753904306098}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    try {\n        String accountIds = request.getParameter(\"accountIds\");\n        String accountNames = request.getParameter(\"accountNames\");\n        List<Account> accounts = accountService.findBySelect(accountIds, accountNames);\n        JSONArray jsonArray = new JSONArray();\n        for (Account account : accounts) {\n            JSONObject jsonObject = new JSONObject();\n            jsonObject.put(\"accountId\", account.getAccountId());\n            jsonObject.put(\"accountName\", account.getAccountName());\n            jsonArray.add(jsonObject);\n        }\n        return returnJson(jsonArray.toString());\n    } catch (Exception e) {\n        logger.error(e.getMessage());\n        return returnJson(ErpInfo.FAILURE);\n    }\n}", "CodeBleu_score": 44.01711133699523}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        Map<String, Object> map = new HashMap<>();\n        map.put(\"name\", name);\n        map.put(\"serialNo\", serialNo);\n        map.put(\"currentPage\", currentPage);\n        map.put(\"pageSize\", pageSize);\n        List<AccountVo4List> list = accountService.listWithBalance(map);\n        int count = accountService.countListWithBalance(map);\n        response.setData(list);\n        response.setTotal(count);\n        response.setCode(ErpInfo.SUCCESS);\n        response.setMsg(ErpInfo.SUCCESS_MSG);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        response.setCode(ErpInfo.FAIL);\n        response.setMsg(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 53.24653269585124}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        Map<String, Object> map = new HashMap<>();\n        map.put(\"name\", name);\n        map.put(\"serialNo\", serialNo);\n        map.put(\"currentPage\", currentPage);\n        map.put(\"pageSize\", pageSize);\n        List<AccountVo4List> list = accountService.listWithBalance(map);\n        Integer count = accountService.countWithBalance(map);\n        response.setData(list);\n        response.setTotal(count);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        response.setCode(ErpInfo.FAIL);\n        response.setMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 53.80343255984889}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        // \u67e5\u8be2\u603b\u6570\n        int total = accountService.countWithBalance(name, serialNo);\n        // \u67e5\u8be2\u6570\u636e\n        List<AccountVo4List> list = accountService.listWithBalance(name, serialNo, (currentPage - 1) * pageSize, pageSize);\n        // \u5c01\u88c5\u8fd4\u56de\u6570\u636e\n        Map<String, Object> data = new HashMap<String, Object>();\n        data.put(\"total\", total);\n        data.put(\"rows\", list);\n        response.setCode(ErpInfo.SUCCESS);\n        response.setMessage(ErpInfo.SUCCESS_MESSAGE);\n        response.setData(data);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        response.setCode(ErpInfo.FAIL);\n        response.setMessage(ErpInfo.FAIL_MESSAGE);\n    }\n    return response;\n}", "CodeBleu_score": 47.91530442186666}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response.setCode(200);\n        response.setData(accountService.getStatistics(name, serialNo));\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        response.setCode(500);\n        response.setMsg(ErpInfo.ERROR);\n    }\n    return response;\n}", "CodeBleu_score": 41.968642078035536}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response.setData(accountService.getStatistics(name, serialNo));\n        response.setCode(ErpInfo.SUCCESS);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        response.setCode(ErpInfo.FAIL);\n        response.setMsg(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 43.38680853722376}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        AccountService accountService = (AccountService) SpringContextUtil.getBean(\"accountService\");\n        AccountVo4List accountVo4List = accountService.getStatistics(name, serialNo);\n        response.setCode(200);\n        response.setData(accountVo4List);\n    } catch (Exception e) {\n        logger.error(\"getStatistics error\", e);\n        response.setCode(500);\n        response.setMsg(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 43.176662846277466}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t    BaseResponseInfo responseInfo = new BaseResponseInfo();\n    try {\n        AccountHeadVo4Body body = accountHeadService.getDetailByNumber(billNo);\n        if (body != null) {\n            responseInfo.setData(body);\n            responseInfo.setCode(200);\n        } else {\n            responseInfo.setCode(500);\n            responseInfo.setMsg(ExceptionConstants.EXCEPTION_500);\n        }\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        responseInfo.setCode(500);\n        responseInfo.setMsg(ExceptionConstants.EXCEPTION_500);\n    }\n    return responseInfo;\n}", "CodeBleu_score": 39.59364626893975}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t        BaseResponseInfo response = new BaseResponseInfo();\n        try {\n            AccountHeadVo4ListEx accountHeadVo4ListEx = accountHeadService.getDetailByNumber(billNo);\n            response.setItem(accountHeadVo4ListEx);\n            response.setCode(BusinessConstants.SUCCESS_CODE);\n        } catch (Exception e) {\n            logger.error(e.getMessage());\n            response.setCode(ExceptionConstants.ERROR_CODE);\n            response.setMessage(e.getMessage());\n        }\n        return response;\n    }", "CodeBleu_score": 39.87897438982439}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        AccountHeadVo4ListEx accountHeadVo4ListEx = accountHeadService.getDetailByNumber(billNo);\n        if (accountHeadVo4ListEx != null) {\n            response.setCode(200);\n            response.setMsg(BusinessConstants.SUCCESS);\n            response.setData(accountHeadVo4ListEx);\n        } else {\n            response.setCode(500);\n            response.setMsg(BusinessConstants.FAIL);\n        }\n    } catch (Exception e) {\n        log.error(e.getMessage(), e);\n        response.setCode(500);\n        response.setMsg(ExceptionConstants.EXCEPTION_MESSAGE);\n    }\n    return response;\n}", "CodeBleu_score": 38.50699620417275}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        // Get the user ID from the request\n        String userId = request.getParameter(\"userId\");\n        // Call the depot service to get the depot information for the user\n        Depot depot = depotService.findDepotByCurrentUser(userId);\n        // Set the response data\n        response.setCode(BusinessConstants.SUCCESS);\n        response.setMsg(BusinessConstants.SUCCESS_MSG);\n        response.setData(depot);\n    } catch (BusinessRunTimeException e) {\n        // Handle the exception and set the response data\n        response.setCode(e.getCode());\n        response.setMsg(e.getMessage());\n        response.setData(null);\n    } catch (Exception e) {\n        // Log the error and set the response data\n        logger.error(e.getMessage(), e);\n        response.setCode(BusinessConstants.FAIL);\n        response.setMsg(BusinessConstants.FAIL_MSG);\n        response.setData(null);\n    }\n    return response;\n}", "CodeBleu_score": 43.24534381248334}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response.setData(depotService.findDepotByCurrentUser(request));\n        response.setCode(200);\n    } catch (Exception e) {\n        log.error(e.getMessage());\n        response.setCode(500);\n        response.setMsg(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 41.17185358195828}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo responseInfo = new BaseResponseInfo();\n    try {\n        // Retrieve the current user from the request\n        User currentUser = (User) request.getSession().getAttribute(\"user\");\n\n        // Call the depot service to retrieve the depot for the current user\n        Depot depot = depotService.findDepotByCurrentUser(currentUser);\n\n        // Set the response code and data\n        responseInfo.setCode(200);\n        responseInfo.setData(depot);\n    } catch (Exception e) {\n        // Log the error\n        logger.error(\"Failed to retrieve depot for current user\", e);\n\n        // Set the response code and error message\n        responseInfo.setCode(500);\n        responseInfo.setMsg(e.getMessage());\n    }\n    return responseInfo;\n}", "CodeBleu_score": 40.27125017883763}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    JSONArray jsonArray = new JSONArray();\n    List<Function> functionList = functionService.findRoleFunction(type, keyId);\n    JSONObject jsonObject = new JSONObject();\n    jsonObject.put(\"functions\", functionList);\n    if (request.getAttribute(\"tenantId\") != null) {\n        String tenantId = (String) request.getAttribute(\"tenantId\");\n        if (!tenantId.equals(\"admin\")) {\n            List<Function> newFunctionList = new ArrayList<>();\n            for (Function function : functionList) {\n                if (!function.getFunctionName().equals(\"\u7cfb\u7edf\u7ba1\u7406\")) {\n                    newFunctionList.add(function);\n                }\n            }\n            jsonObject.put(\"functions\", newFunctionList);\n        }\n    }\n    jsonArray.add(jsonObject);\n    return jsonArray;\n}", "CodeBleu_score": 37.47842833171473}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    JSONArray jsonArray = new JSONArray();\n    List<Function> list = functionService.findRoleFunction(type, keyId);\n    JSONObject jsonObject = new JSONObject();\n    jsonObject.put(\"functions\", list);\n    if (!Tools.isAdmin(request)) {\n        List<Function> functions = new ArrayList<>();\n        for (Function function : list) {\n            if (!function.getFunctionName().equals(\"\u7cfb\u7edf\u7ba1\u7406\")) {\n                functions.add(function);\n            }\n        }\n        jsonObject.put(\"functions\", functions);\n    }\n    jsonArray.add(jsonObject);\n    return jsonArray;\n}", "CodeBleu_score": 31.068586213219284}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    JSONArray jsonArray = new JSONArray();\n    List<Function> list = functionService.findRoleFunction(type, keyId);\n    JSONObject jsonObject = new JSONObject();\n    jsonObject.put(\"functionList\", list);\n    if (!Tools.isAdmin(request)) {\n        String tenantId = Tools.getTenantId(request);\n        List<Function> functionList = new ArrayList<>();\n        for (Function function : list) {\n            if (!function.getFunctionName().equals(\"\u7cfb\u7edf\u7ba1\u7406\")) {\n                functionList.add(function);\n            }\n        }\n        jsonObject.put(\"functionList\", functionList);\n    }\n    jsonArray.add(jsonObject);\n    return jsonArray;\n}", "CodeBleu_score": 33.637091736007626}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n        response.setCode(ErpInfo.SUCCESS);\n        response.setMsg(\"\u6210\u529f\");\n        response.setData(platformConfig);\n    } catch (Exception e) {\n        logger.error(e.getMessage());\n        response.setCode(ErpInfo.FAIL);\n        response.setMsg(\"\u5931\u8d25\");\n        response.setData(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 51.925823654373104}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response.setCode(ErpInfo.SUCCESS);\n        response.setMsg(ErpInfo.SUCCESS_MSG);\n        response.setData(platformConfigService.getInfoByKey(platformKey));\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        response.setCode(ErpInfo.FAIL);\n        response.setMsg(ErpInfo.FAIL_MSG);\n        response.setData(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 43.58396978846083}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response = platformConfigService.getInfoByKey(platformKey);\n        response.setCode(ErpInfo.SUCCESS);\n    } catch (Exception e) {\n        log.error(e.getMessage());\n        response.setCode(ErpInfo.FAIL);\n        response.setMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 46.28207305272367}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> systemConfigList = systemConfigService.getSystemConfigList();\n        response.setCode(200);\n        response.setData(systemConfigList.get(0));\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        response.setCode(500);\n        response.setMsg(\"\u83b7\u53d6\u5f53\u524d\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\");\n    }\n    return response;\n}", "CodeBleu_score": 40.49263286387815}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> systemConfigList = systemConfigService.getSystemConfigList();\n        if (systemConfigList != null && systemConfigList.size() > 0) {\n            response.setCode(200);\n            response.setData(systemConfigList.get(0));\n        } else {\n            response.setCode(500);\n            response.setMsg(\"\u83b7\u53d6\u5f53\u524d\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\");\n        }\n    } catch (Exception e) {\n        logger.error(\"\u83b7\u53d6\u5f53\u524d\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\", e);\n        response.setCode(500);\n        response.setMsg(\"\u83b7\u53d6\u5f53\u524d\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\");\n    }\n    return response;\n}", "CodeBleu_score": 36.26112880121678}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo responseInfo = new BaseResponseInfo();\n    try {\n        List<SystemConfig> systemConfigList = systemConfigService.getSystemConfigList();\n        if (systemConfigList != null && systemConfigList.size() > 0) {\n            responseInfo.setCode(200);\n            responseInfo.setData(systemConfigList.get(0));\n        }\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        responseInfo.setCode(500);\n        responseInfo.setMsg(e.getMessage());\n    }\n    return responseInfo;\n}", "CodeBleu_score": 39.452097098698744}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    try {\n        // Retrieve the business path from the request URL\n        String businessPath = (String) request.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE);\n        // Retrieve the uploaded file from the request\n        MultipartFile file = ((MultipartHttpServletRequest) request).getFile(\"file\");\n        // Determine the upload type based on the business path\n        String uploadType = \"\";\n        if (businessPath.contains(\"upload\")) {\n            uploadType = \"upload\";\n        } else if (businessPath.contains(\"uploadImg\")) {\n            uploadType = \"uploadImg\";\n        }\n        // Save the file to the appropriate location based on the upload type\n        if (uploadType.equals(\"upload\")) {\n            // Save the file to the local file system\n            String filePath = saveFile(file, \"upload\");\n            // Set the response code and data based on the success or failure of the upload\n            if (filePath != null) {\n                JSONObject data = new JSONObject();\n                data.put(\"filePath\", filePath);\n                return new BaseResponseInfo(BaseResponseInfo.SUCCESS, \"\u4e0a\u4f20\u6210\u529f\", data);\n            } else {\n                return new BaseResponseInfo(BaseResponseInfo.FAIL, \"\u4e0a\u4f20\u5931\u8d25\");\n            }\n        } else if (uploadType.equals(\"uploadImg\")) {\n            // Save the file to AliOss\n            String filePath = saveFile(file, \"uploadImg\");\n            // Set the response code and data based on the success or failure of the upload\n            if (filePath != null) {\n                JSONObject data = new JSONObject();\n                data.put(\"filePath\", filePath);\n                return new BaseResponseInfo(BaseResponseInfo.SUCCESS, \"\u4e0a\u4f20\u6210\u529f\", data);\n            } else {\n                return new BaseResponseInfo(BaseResponseInfo.FAIL, \"\u4e0a\u4f20\u5931\u8d25\");\n            }\n        } else {\n            return new BaseResponseInfo(BaseResponseInfo.FAIL, \"\u4e0a\u4f20\u5931\u8d25\");\n        }\n    } catch (Exception e) {\n        // Log the exception\n        logger.error(\"\u4e0a\u4f20\u5931\u8d25\", e);\n        // Set the response code and", "CodeBleu_score": 32.99749526316076}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    try {\n        // Get the business path from the request\n        String businessPath = (String) request.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE);\n        // Get the uploaded file from the request\n        MultipartFile file = ((MultipartHttpServletRequest) request).getFile(\"file\");\n        // Get the file upload type from the request\n        String uploadType = request.getParameter(\"uploadType\");\n        // Get the file upload type from the request\n        String uploadType = request.getParameter(\"uploadType\");\n        // Get the file upload type from the request\n        String uploadType = request.getParameter(\"uploadType\");\n        // Get the file upload type from the request\n        String uploadType = request.getParameter(\"uploadType\");\n        // Get the file upload type from the request\n        String uploadType = request.getParameter(\"uploadType\");\n        // Get the file upload type from the request\n        String uploadType = request.getParameter(\"uploadType\");\n        // Get the file upload type from the request\n        String uploadType = request.getParameter(\"uploadType\");\n        // Get the file upload type from the request\n        String uploadType = request.getParameter(\"uploadType\");\n        // Get the file upload type from the request\n        String uploadType = request.getParameter(\"uploadType\");\n        // Get the file upload type from the request\n        String uploadType = request.getParameter(\"uploadType\");\n        // Get the file upload type from the request\n        String uploadType = request.getParameter(\"uploadType\");\n        // Get the file upload type from the request\n        String uploadType = request.getParameter(\"uploadType\");\n        // Get the file upload type from the request\n        String uploadType = request.getParameter(\"uploadType\");\n        // Get the file upload type from the request\n        String uploadType = request.getParameter(\"uploadType\");\n        // Get the file upload type from the request\n        String uploadType = request.getParameter(\"uploadType\");\n        // Get the file upload type from the request\n        String uploadType = request.getParameter(\"uploadType\");\n        // Get the file upload type from the request\n        String uploadType = request.getParameter(\"uploadType\");\n        // Get the file upload type", "CodeBleu_score": 24.255127749809024}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    // Get the business path from the request URL\n    String businessPath = (String) request.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE);\n\n    // Get the uploaded file from the request\n    MultipartFile file = ((MultipartHttpServletRequest) request).getFile(\"file\");\n\n    // Get the file upload type from the request\n    String uploadType = request.getParameter(\"uploadType\");\n\n    // Initialize the response object\n    BaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n\n    try {\n        // Call the uploadFile method to save the file\n        String filePath = uploadFile(businessPath, file, uploadType);\n\n        // Set the response code and data based on the success of the upload\n        baseResponseInfo.setCode(BaseResponseInfo.SUCCESS);\n        baseResponseInfo.setData(filePath);\n    } catch (Exception e) {\n        // Log any exceptions that occur during the upload\n        logger.error(\"Upload file error\", e);\n\n        // Set the response code and data based on the failure of the upload\n        baseResponseInfo.setCode(BaseResponseInfo.FAIL);\n        baseResponseInfo.setData(e.getMessage());\n    }\n\n    // Return the response\n    return baseResponseInfo;\n}", "CodeBleu_score": 37.20769316403457}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t    try {\n        String title = jsonObject.getString(\"title\");\n        String head = jsonObject.getString(\"head\");\n        String tip = jsonObject.getString(\"tip\");\n        JSONArray data = jsonObject.getJSONArray(\"data\");\n        exportExcel(title, head, tip, data, response);\n    } catch (Exception e) {\n        log.error(\"\u5bfc\u51fa\u5931\u8d25\", e);\n    }\n}", "CodeBleu_score": 77.99853326384871}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t    try {\n        String title = jsonObject.getString(\"title\");\n        String head = jsonObject.getString(\"head\");\n        String tip = jsonObject.getString(\"tip\");\n        List<String> dataList = jsonObject.getJSONArray(\"dataList\").toJavaList(String.class);\n        exportExcel(title, head, tip, dataList, response);\n    } catch (Exception e) {\n        e.printStackTrace();\n        logger.error(e.getMessage());\n    }\n}", "CodeBleu_score": 72.84740516671518}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t    try {\n        // Extract the title, head, tip, and data list from the JSON object\n        String title = jsonObject.getString(\"title\");\n        JSONArray head = jsonObject.getJSONArray(\"head\");\n        JSONArray tip = jsonObject.getJSONArray(\"tip\");\n        JSONArray data = jsonObject.getJSONArray(\"data\");\n\n        // Call the service to perform the export\n        exportExcel(title, head, tip, data, response);\n    } catch (Exception e) {\n        // Handle and log any exceptions that occur during the process\n        log.error(\"Export excel by param error\", e);\n    }\n}", "CodeBleu_score": 63.64604920564361}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t    Account account = new Account();\n    try {\n        // \u521d\u59cb\u5316\u8d26\u6237\n        account.setId(Tools.getUUID());\n        account.setName(obj.getString(\"name\"));\n        account.setType(obj.getInteger(\"type\"));\n        account.setParentId(obj.getString(\"parentId\"));\n        account.setAccounting(obj.getInteger(\"accounting\"));\n        account.setRemark(obj.getString(\"remark\"));\n        account.setCreateTime(new Date());\n        account.setCreator(UserService.getUserId(request));\n        account.setStatus(BusinessConstants.Status.ENABLE);\n        // \u8bbe\u7f6e\u521d\u59cb\u91d1\u989d\u4e3a0\n        if (obj.getString(\"initialAmount\") == null) {\n            account.setInitialAmount(new BigDecimal(0));\n        } else {\n            account.setInitialAmount(new BigDecimal(obj.getString(\"initialAmount\")));\n        }\n        // \u8bbe\u7f6e\u9ed8\u8ba4\u8d26\u6237\n        if (obj.getBoolean(\"default\")) {\n            List<Account> accounts = accountMapper.selectAll();\n            for (Account acc : accounts) {\n                if (acc.getDefault()) {\n                    acc.setDefault(false);\n                    accountMapper.updateByPrimaryKeySelective(acc);\n                }\n            }\n            account.setDefault(true);\n        }\n        account.setEnable(true);\n        // \u63d2\u5165\u6570\u636e\u5e93\n        accountMapper.insertSelective(account);\n        // \u8bb0\u5f55\u65e5\u5fd7\n        LogService.log(request, ExceptionConstants.LOG_TYPE_ACCOUNT, ExceptionConstants.LOG_ACTION_ADD, ExceptionConstants.LOG_RESULT_SUCCESS, account.getId(), account.getName());\n        return 1;\n    } catch (Exception e) {\n        LogService.log(request, ExceptionConstants.LOG_TYPE_ACCOUNT, ExceptionConstants.LOG_ACTION_ADD, ExceptionConstants.LOG_RESULT_FAILURE, account.getId(), account.getName());\n        throw new BusinessRunTimeException(e);\n    }\n}", "CodeBleu_score": 34.29646601721225}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t    Account account = new Account();\n    try {\n        account.setName(obj.getString(\"name\"));\n        account.setType(obj.getInteger(\"type\"));\n        account.setAmount(obj.getBigDecimal(\"amount\"));\n        account.setRemark(obj.getString(\"remark\"));\n        account.setEnable(obj.getInteger(\"enable\"));\n        account.setCreateTime(Tools.getTimestamp());\n        account.setCreateUser(Tools.getUserId(request));\n        if (account.getAmount() == null) {\n            account.setAmount(new BigDecimal(0));\n        }\n        if (account.getEnable() == null) {\n            account.setEnable(BusinessConstants.ENABLE_TRUE);\n        }\n        if (account.getType() == null) {\n            account.setType(BusinessConstants.ACCOUNT_TYPE_INCOME);\n        }\n        if (account.getEnable() == BusinessConstants.ENABLE_TRUE) {\n            List<Account> accounts = accountMapper.selectAll();\n            if (accounts.size() == 0) {\n                account.setDefault(BusinessConstants.DEFAULT_TRUE);\n            } else {\n                for (Account account1 : accounts) {\n                    if (account1.getDefault() == BusinessConstants.DEFAULT_TRUE) {\n                        account.setDefault(BusinessConstants.DEFAULT_FALSE);\n                        break;\n                    }\n                }\n            }\n        } else {\n            account.setDefault(BusinessConstants.DEFAULT_FALSE);\n        }\n        int result = accountMapper.insertSelective(account);\n        logService.insertLog(BusinessConstants.LOG_TYPE_INSERT, BusinessConstants.LOG_TYPE_ACCOUNT, account.getId(), Tools.getUserId(request), Tools.getTimestamp());\n        return result;\n    } catch (Exception e) {\n        logService.insertLog(BusinessConstants.LOG_TYPE_FAILURE, BusinessConstants.LOG_TYPE_ACCOUNT, 0, Tools.getUserId(request), Tools.getTimestamp());\n        throw e;\n    }\n}", "CodeBleu_score": 38.62857315499336}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t    // Initialize the logger\n    Logger logger = LoggerFactory.getLogger(AccountService.class);\n    // Initialize the account\n    Account account = new Account();\n    // Set the account's name\n    account.setName(obj.getString(\"name\"));\n    // Set the account's type\n    account.setType(obj.getInteger(\"type\"));\n    // Set the account's parent ID\n    account.setParentId(obj.getInteger(\"parentId\"));\n    // Set the account's initial amount to zero if not specified\n    account.setAmount(obj.getBigDecimal(\"amount\") == null ? new BigDecimal(0) : obj.getBigDecimal(\"amount\"));\n    // Set the account's remark\n    account.setRemark(obj.getString(\"remark\"));\n    // Set the account's isDefault field to false\n    account.setIsDefault(false);\n    // Set the account's isEnabled field to true\n    account.setIsEnabled(true);\n    // Set the account's createTime field to the current date and time\n    account.setCreateTime(new Date());\n    // Set the account's createUser field to the user ID of the current user\n    account.setCreateUser(getUserId(request));\n    // Set the account's updateTime field to the current date and time\n    account.setUpdateTime(new Date());\n    // Set the account's updateUser field to the user ID of the current user\n    account.setUpdateUser(getUserId(request));\n    // Set the account's isDelete field to false\n    account.setIsDelete(false);\n    // Check if the account's parent ID is the same as the ID of the current account\n    if (account.getParentId() == account.getId()) {\n        // If so, throw an exception\n        throw new BusinessRunTimeException(ExceptionConstants.ACCOUNT_PARENT_ID_IS_SELF);\n    }\n    // Check if the account's parent ID is the same as the ID of the current account\n    if (account.getParentId() == account.getId()) {\n        // If so, throw an exception\n        throw new BusinessRunTimeException(ExceptionConstants.ACCOUNT_PA", "CodeBleu_score": 36.358893827461586}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    try {\n        return accountMapper.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        log.error(e.getMessage());\n        return null;\n    }\n}", "CodeBleu_score": 30.500084272328877}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    try {\n        return accountMapper.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        return null;\n    }\n}", "CodeBleu_score": 31.193157544109674}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    try {\n        return accountMapper.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        return null;\n    }\n}", "CodeBleu_score": 31.193157544109674}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    try {\n        // Delete the depot item using the depot item mapper\n        depotItemMapper.deleteByPrimaryKey(id);\n        // Return the result of the deletion operation\n        return 1;\n    } catch (Exception e) {\n        // Log the error\n        logger.error(\"depotItemService.deleteDepotItem error:\", e);\n        // Return the result of the deletion operation\n        return 0;\n    }\n}", "CodeBleu_score": 31.450491884143055}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    try {\n        DepotItemMapper depotItemMapper = (DepotItemMapper)request.getAttribute(\"depotItemMapper\");\n        return depotItemMapper.deleteByPrimaryKey(id);\n    } catch (Exception e) {\n        Logger logger = LoggerFactory.getLogger(DepotItemService.class);\n        logger.error(\"Error deleting depot item with ID \" + id, e);\n        throw new Exception(\"Error deleting depot item with ID \" + id, e);\n    }\n}", "CodeBleu_score": 37.75523965932829}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    try {\n        return depotItemMapper.deleteDepotItem(id);\n    } catch (Exception e) {\n        logger.error(e.getMessage());\n        throw new JshException(e.getMessage());\n    }\n}", "CodeBleu_score": 32.98541353795382}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t    CloseableHttpClient httpClient = HttpClients.createDefault();\n    try {\n        String url = \"http://localhost:8080/graph/projects/\" + projectName + \"/nodes/\" + nodeType + \"/\" + nodeKey;\n        HttpGet httpGet = new HttpGet(url);\n        CloseableHttpResponse response = httpClient.execute(httpGet);\n        HttpEntity entity = response.getEntity();\n        String responseString = EntityUtils.toString(entity, \"UTF-8\");\n        JSONObject jsonObject = new JSONObject(responseString);\n        if (jsonObject.has(\"key\")) {\n            return true;\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        try {\n            httpClient.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return false;\n}", "CodeBleu_score": 44.98318641758213}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t    CloseableHttpClient httpClient = HttpClients.createDefault();\n    try {\n        String url = \"http://localhost:8080/graphql?query=mutation%20%7B%0A%20%20createNode(input:%20%7B%0A%20%20%20%20projectName:%20%22\" + projectName + \"%22%0A%20%20%20%20nodeType:%20%22\" + nodeType + \"%22%0A%20%20%20%20nodeKey:%20%22\" + nodeKey + \"%22%0A%20%20%7D)%20%7B%0A%20%20%20%20key%0A%20%20%7D%0A%7D\";\n        HttpGet httpGet = new HttpGet(url);\n        CloseableHttpResponse response = httpClient.execute(httpGet);\n        HttpEntity entity = response.getEntity();\n        String responseString = EntityUtils.toString(entity, Charset.forName(\"UTF-8\"));\n        System.out.println(responseString);\n        if (responseString.contains(\"key\")) {\n            return true;\n        } else {\n            return false;\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        try {\n            httpClient.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return false;\n}", "CodeBleu_score": 40.198859803053935}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t    String endpoint = \"http://localhost:7474/db/data/node\";\n    String url = endpoint + \"?project=\" + projectName + \"&nodeType=\" + nodeType + \"&nodeKey=\" + nodeKey;\n    CloseableHttpClient httpClient = HttpClients.createDefault();\n    HttpGet request = new HttpGet(url);\n    try (CloseableHttpResponse response = httpClient.execute(request)) {\n        HttpEntity entity = response.getEntity();\n        String responseString = EntityUtils.toString(entity, Charset.forName(\"UTF-8\"));\n        if (responseString.contains(\"key\")) {\n            return true;\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        request.releaseConnection();\n    }\n    return false;\n}", "CodeBleu_score": 40.091464400400525}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t    CloseableHttpClient httpClient = HttpClients.createDefault();\n    try {\n        String url = \"http://localhost:7474/db/data/transaction/commit\";\n        HttpGet httpGet = new HttpGet(url);\n        httpGet.addHeader(\"Content-Type\", \"application/json\");\n        httpGet.addHeader(\"Authorization\", \"Basic YWRtaW46YWRtaW4=\");\n        httpGet.setEntity(new StringEntity(\"{\\\"statements\\\":[{\\\"statement\\\":\\\"MATCH (n:`\" + fromType + \"`{id:'\" + from + \"'}), (m:`\" + toType + \"`{id:'\" + to + \"'}) CREATE (n)-[r:`\" + edgeType + \"`]->(m)\\\",\\\"resultDataContents\\\":[\\\"row\\\"]}]}\", Charset.forName(\"UTF-8\")));\n        CloseableHttpResponse response = httpClient.execute(httpGet);\n        try {\n            HttpEntity entity = response.getEntity();\n            if (entity != null) {\n                String result = EntityUtils.toString(entity);\n                ObjectMapper mapper = new ObjectMapper();\n                Map<String, Object> map = mapper.readValue(result, Map.class);\n                List<Map<String, Object>> rows = (List<Map<String, Object>>) map.get(\"results\");\n                if (rows != null && rows.size() > 0) {\n                    Map<String, Object> row = rows.get(0);\n                    if (row.containsKey(\"key\")) {\n                        return true;\n                    }\n                }\n            }\n        } finally {\n            response.close();\n        }\n    } catch (IOException ex) {\n        ex.printStackTrace();\n    } finally {\n        try {\n            httpClient.close();\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n    }\n    return false;\n}", "CodeBleu_score": 47.39495004649969}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t    String url = \"http://localhost:7474/db/data/transaction/commit\";\n    String body = \"{\\\"statements\\\":[{\\\"statement\\\":\\\"MATCH (from:`\" + fromType + \"` {id: '\" + from + \"'}), (to:`\" + toType + \"` {id: '\" + to + \"'}) CREATE (from)-[:\" + edgeType + \"]->(to)\\\",\\\"resultDataContents\\\":[\\\"row\\\"]}]}\";\n    String key = \"key\";\n    boolean success = false;\n    try (CloseableHttpClient httpClient = HttpClients.createDefault()) {\n        HttpPost httpPost = new HttpPost(url);\n        httpPost.setHeader(\"Content-Type\", \"application/json\");\n        httpPost.setEntity(new StringEntity(body, Charset.forName(\"UTF-8\")));\n        try (CloseableHttpResponse response = httpClient.execute(httpPost)) {\n            HttpEntity entity = response.getEntity();\n            String json = EntityUtils.toString(entity, Charset.forName(\"UTF-8\"));\n            ObjectMapper mapper = new ObjectMapper();\n            Map<String, Object> result = mapper.readValue(json, Map.class);\n            List<Map<String, Object>> rows = (List<Map<String, Object>>) result.get(\"results\");\n            if (rows != null && !rows.isEmpty()) {\n                Map<String, Object> row = rows.get(0);\n                Map<String, Object> data = (Map<String, Object>) row.get(\"data\");\n                if (data != null && data.containsKey(key)) {\n                    success = true;\n                }\n            }\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return success;\n}", "CodeBleu_score": 39.8426612254317}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t    CloseableHttpClient httpClient = HttpClients.createDefault();\n    try {\n        HttpGet httpGet = new HttpGet(\"http://localhost:8080/graph/projects/\" + projectName + \"/edges?edgeType=\" + edgeType + \"&fromType=\" + fromType + \"&toType=\" + toType + \"&from=\" + from + \"&to=\" + to);\n        CloseableHttpResponse response = httpClient.execute(httpGet);\n        HttpEntity entity = response.getEntity();\n        String responseString = EntityUtils.toString(entity, Charset.forName(\"UTF-8\"));\n        ObjectMapper mapper = new ObjectMapper();\n        Map<String, Object> responseMap = mapper.readValue(responseString, Map.class);\n        if (responseMap.containsKey(\"key\")) {\n            return true;\n        } else {\n            return false;\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    } finally {\n        try {\n            httpClient.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}", "CodeBleu_score": 52.32704719611954}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\t    if (event == null || event.getMessage() == null) {\n        return;\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(new Location(\"Testing\", \"Testing\", \"Testing\"));\n    }\n    event.setTime(new Date());\n    ObjectMapper mapper = new ObjectMapper();\n    String jsonString = null;\n    try {\n        jsonString = mapper.writeValueAsString(event);\n    } catch (JsonProcessingException e) {\n        e.printStackTrace();\n    }\n    String topic = event.getTarget() == null ? \"test\" : event.getTarget();\n    ProducerRecord<String, String> record = new ProducerRecord<>(topic, jsonString);\n    producer.send(record);\n    producer.flush();\n}", "CodeBleu_score": 53.93086878708583}, {"code": "public void sendEvent(Event event){\n\t    if (event == null || event.getMessage() == null) {\n        return;\n    }\n    if (event.getLocation() == null) {\n        Location location = new Location();\n        location.setLatitude(100);\n        location.setLongitude(100);\n        location.setAltitude(100);\n        location.setAccuracy(100);\n        location.setSpeed(100);\n        location.setHeading(100);\n        location.setTimestamp(new Date());\n        event.setLocation(location);\n    }\n    event.setTime(new Date());\n    ObjectMapper mapper = new ObjectMapper();\n    String json = \"\";\n    try {\n        json = mapper.writeValueAsString(event);\n    } catch (JsonProcessingException e) {\n        e.printStackTrace();\n    }\n    String topic = \"test\";\n    if (event.getTarget() != null) {\n        topic = event.getTarget();\n    }\n    ProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, json);\n    producer.send(record);\n    producer.flush();\n}", "CodeBleu_score": 61.043121014984514}, {"code": "public void sendEvent(Event event){\n\t    if (event == null || event.getMessage() == null) {\n        return;\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(new Location(1, \"Testing Location\"));\n    }\n    event.setTime(new Date());\n    ObjectMapper mapper = new ObjectMapper();\n    String jsonString = null;\n    try {\n        jsonString = mapper.writeValueAsString(event);\n    } catch (JsonProcessingException e) {\n        e.printStackTrace();\n    }\n    if (event.getTarget() != null) {\n        producer.send(new ProducerRecord<String, String>(event.getTarget(), jsonString));\n    } else {\n        producer.send(new ProducerRecord<String, String>(\"test\", jsonString));\n    }\n    producer.flush();\n}", "CodeBleu_score": 48.96947844592018}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t  // Initialize the OSS client with access credentials\n  OSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\n  // Upload the file content as an object with the specified name\n  ossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\n  // Shut down the OSS client\n  ossClient.shutdown();\n\n  // Return the URL of the uploaded object\n  return \"https://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}", "CodeBleu_score": 31.675272202128273}, {"code": "public String upload(String objName, byte[] content){\n\t    // Initialize the OSS client with access credentials\n    String endpoint = \"oss-cn-beijing.aliyuncs.com\";\n    String accessKeyId = \"<your-access-key-id>\";\n    String accessKeySecret = \"<your-access-key-secret>\";\n    String bucketName = \"<your-bucket-name>\";\n\n    OSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\n    // Upload the file content as an object with the specified name\n    ossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\n    // Shut down the OSS client\n    ossClient.shutdown();\n\n    // Return the URL of the uploaded object\n    return \"https://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}", "CodeBleu_score": 39.90983454006788}, {"code": "public String upload(String objName, byte[] content){\n\t    // Initialize the OSS client with the access credentials\n    OSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\n    // Upload the file content as an object with the specified name\n    ossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\n    // Shut down the OSS client\n    ossClient.shutdown();\n\n    // Return the URL of the uploaded object\n    return \"https://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}", "CodeBleu_score": 32.000639651622265}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t    IpToLocationWorker worker = IpToLocationWorker.getInstance();\n    if (worker == null) {\n        return new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\");\n    }\n    return worker.getLocation(ipAddress);\n}", "CodeBleu_score": 24.081265158101434}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t    IpToLocationWorker worker = IpToLocationWorker.getInstance();\n    if (worker == null) {\n        return new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\");\n    }\n    return worker.getLocation(ipAddress);\n}", "CodeBleu_score": 24.430884997459753}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t    IpToLocationWorker worker = IpToLocationWorker.getInstance();\n    if (worker == null) {\n        return new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\");\n    }\n    return worker.getLocationInfo(ipAddress);\n}", "CodeBleu_score": 25.324774703319353}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\t    if (esClient != null && esClient.isInitialized()) {\n        return;\n    }\n    if (esClient == null) {\n        esClient = new ElasticsearchClient();\n    }\n    if (!esClient.isInitialized()) {\n        esClient.initialize();\n    }\n}", "CodeBleu_score": 20.62806154541731}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t    if (this.restClient != null && this.restHighLevelClient != null) {\n        return;\n    }\n    synchronized (this) {\n        if (this.restClient != null && this.restHighLevelClient != null) {\n            return;\n        }\n        List<HttpHost> hosts = new ArrayList<>();\n        for (String host : this.clusterHosts.split(\",\")) {\n            String[] hostParts = host.split(\":\");\n            if (hostParts.length != 2) {\n                throw new Exception(\"Invalid host format: \" + host);\n            }\n            hosts.add(new HttpHost(hostParts[0], Integer.parseInt(hostParts[1])));\n        }\n        this.restClient = RestClient.builder(hosts.toArray(new HttpHost[0])).build();\n        this.restHighLevelClient = new RestHighLevelClient(this.restClient);\n    }\n}", "CodeBleu_score": 47.31918572732576}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t    if (this.esClient == null) {\n        synchronized (this) {\n            if (this.esClient == null) {\n                String[] clusterHosts = this.esClusterHosts.split(\",\");\n                List<HttpHost> httpHosts = new ArrayList<HttpHost>();\n                for (String clusterHost : clusterHosts) {\n                    String[] hostAndPort = clusterHost.split(\":\");\n                    httpHosts.add(new HttpHost(hostAndPort[0], Integer.parseInt(hostAndPort[1]), \"http\"));\n                }\n                this.esClient = new RestHighLevelClient(RestClient.builder(httpHosts.toArray(new HttpHost[0])));\n            }\n        }\n    }\n}", "CodeBleu_score": 35.162328959676174}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> httpHosts = new ArrayList<>();\n    String[] hosts = clusterHostList.split(\",\");\n    for (String host : hosts) {\n        String[] hostParts = host.split(\":\");\n        if (hostParts.length == 1) {\n            httpHosts.add(new HttpHost(hostParts[0], clusterPort));\n        } else {\n            httpHosts.add(new HttpHost(hostParts[0], Integer.parseInt(hostParts[1])));\n        }\n    }\n    return httpHosts;\n}", "CodeBleu_score": 47.82887937924212}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<>();\n    String[] hostList = clusterHostList.split(\",\");\n    for (String host : hostList) {\n        if (host.contains(\":\")) {\n            String[] hostParts = host.split(\":\");\n            hosts.add(new HttpHost(hostParts[0], Integer.parseInt(hostParts[1])));\n        } else {\n            hosts.add(new HttpHost(host, clusterPort));\n        }\n    }\n    return hosts;\n}", "CodeBleu_score": 48.31072544997463}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<>();\n    String[] hostArray = clusterHostList.split(\",\");\n    for (String host : hostArray) {\n        if (host.contains(\":\")) {\n            String[] hostPort = host.split(\":\");\n            hosts.add(new HttpHost(hostPort[0], Integer.parseInt(hostPort[1]), \"http\"));\n        } else {\n            hosts.add(new HttpHost(host, clusterPort, \"http\"));\n        }\n    }\n    return hosts;\n}", "CodeBleu_score": 42.62079786780958}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\t    AtomicBoolean isRunning = new AtomicBoolean(true);\n    new Thread(() -> {\n        while (isRunning.get()) {\n            try {\n                // Poll for tasks with a 30-second timeout\n                Task task = taskQueue.poll(30, TimeUnit.SECONDS);\n                if (task != null) {\n                    // Check the task type\n                    if (task.getType() == TaskType.SEND_MESSAGE) {\n                        // Extract the recipient number and message data\n                        String recipient = task.getRecipient();\n                        String message = task.getMessage();\n                        // Validate the data\n                        if (StringUtils.isNotBlank(recipient) && StringUtils.isNotBlank(message)) {\n                            // Send the message\n                            sendMessage(recipient, message);\n                        } else {\n                            // Log an error message\n                            log.error(\"Invalid data for task: \" + task);\n                        }\n                    } else {\n                        // Log an error message\n                        log.error(\"Unknown task type: \" + task);\n                    }\n                }\n            } catch (Exception e) {\n                // Log an error message\n                log.error(\"Error processing task\", e);\n            }\n        }\n    }).start();\n}", "CodeBleu_score": 27.682025252519665}, {"code": "protected void pollingWork() throws InterruptedException{\n\t    while (true) {\n        try {\n            // Get the next task from the queue with a 30-second timeout\n            Task task = taskQueue.poll(30, TimeUnit.SECONDS);\n            if (task == null) {\n                // No task was available within the timeout\n                continue;\n            }\n            // Check the task type and process accordingly\n            if (task instanceof PlainTextMessageTask) {\n                // Extract the recipient number and message data\n                PlainTextMessageTask plainTextMessageTask = (PlainTextMessageTask) task;\n                String recipientNumber = plainTextMessageTask.getRecipientNumber();\n                String messageData = plainTextMessageTask.getMessageData();\n                // Validate the data\n                if (StringUtils.isBlank(recipientNumber) || StringUtils.isBlank(messageData)) {\n                    // Invalid data, log an error message\n                    log.error(\"Invalid recipient number or message data\");\n                    continue;\n                }\n                // Send the message\n                sendMessage(recipientNumber, messageData);\n            } else if (task instanceof TemplateMessageTask) {\n                // Extract the recipient number and template data\n                TemplateMessageTask templateMessageTask = (TemplateMessageTask) task;\n                String recipientNumber = templateMessageTask.getRecipientNumber();\n                Map<String, String> templateData = templateMessageTask.getTemplateData();\n                // Validate the data\n                if (StringUtils.isBlank(recipientNumber) || templateData == null || templateData.isEmpty()) {\n                    // Invalid data, log an error message\n                    log.error(\"Invalid recipient number or template data\");\n                    continue;\n                }\n                // Send the message\n                sendTemplateMessage(recipientNumber, templateData);\n            } else {\n                // Unsupported task type, log an error message\n                log.error(\"Unsupported task type: {}\", task.getClass().getSimpleName());\n            }\n        } catch (Exception e) {\n            // Log an error message\n            log.error(\"Error processing task\", e);\n        }\n    }\n}", "CodeBleu_score": 31.33018841118682}, {"code": "protected void pollingWork() throws InterruptedException{\n\t    // Create a queue for the tasks\n    LinkedBlockingQueue<Task> taskQueue = new LinkedBlockingQueue<>();\n    // Create a flag to indicate whether the worker is running\n    AtomicBoolean running = new AtomicBoolean(true);\n    // Create a thread to process the tasks\n    Thread thread = new Thread(() -> {\n        while (running.get()) {\n            // Try to retrieve a task from the queue with a 30-second timeout\n            Task task = taskQueue.poll(30, TimeUnit.SECONDS);\n            if (task != null) {\n                // Process the task based on its type\n                if (task.getType().equals(\"plaintext\")) {\n                    // Extract the recipient number and message data from the task\n                    String recipient = task.getRecipient();\n                    String message = task.getMessage();\n                    // Validate the message data\n                    if (StringUtils.isBlank(recipient) || StringUtils.isBlank(message)) {\n                        // Log an error message if the message data is invalid\n                        log.error(\"Invalid message data for recipient: {}\", recipient);\n                        continue;\n                    }\n                    // Send the message\n                    sendMessage(recipient, message);\n                } else {\n                    // Log an error message if the task type is not recognized\n                    log.error(\"Unknown task type: {}\", task.getType());\n                }\n            }\n        }\n    });\n    // Start the thread\n    thread.start();\n    // Wait for the thread to finish\n    thread.join();\n}", "CodeBleu_score": 32.85472148765239}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t    try (CloseableHttpClient httpclient = HttpClients.createDefault()) {\n        HttpGet httpget = new HttpGet(uri);\n        try (CloseableHttpResponse response = httpclient.execute(httpget)) {\n            HttpEntity entity = response.getEntity();\n            String content = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n            log.info(\"Response content: {}\", content);\n            return content;\n        }\n    }\n}", "CodeBleu_score": 54.57166549861395}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t    try (CloseableHttpClient httpClient = HttpClients.createDefault()) {\n        HttpGet httpGet = new HttpGet(uri);\n        try (CloseableHttpResponse response = httpClient.execute(httpGet)) {\n            HttpEntity entity = response.getEntity();\n            if (entity != null) {\n                return EntityUtils.toString(entity, StandardCharsets.UTF_8);\n            }\n        }\n    }\n    return null;\n}", "CodeBleu_score": 36.84472456820065}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t    CloseableHttpClient httpClient = HttpClients.createDefault();\n    HttpGet httpGet = new HttpGet(uri);\n    try (CloseableHttpResponse response = httpClient.execute(httpGet)) {\n        HttpEntity entity = response.getEntity();\n        String content = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        log.info(\"Response content: \" + content);\n        return content;\n    }\n}", "CodeBleu_score": 60.09196768770424}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    factory.setNamespaceAware(true);\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document doc = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n    doc.getDocumentElement().normalize();\n    NodeList nodeList = doc.getChildNodes();\n    if (nodeList.getLength() != 1) {\n        return null;\n    }\n    Node root = nodeList.item(0);\n    if (root.getNodeType() != Node.ELEMENT_NODE) {\n        return null;\n    }\n    Object[] decoded = decodeElement(root, doTrim);\n    if (decoded == null) {\n        return null;\n    }\n    if (decoded.length % 2 != 0) {\n        return null;\n    }\n    Map<String, Object> map = new HashMap<>();\n    for (int i = 0; i < decoded.length; i += 2) {\n        map.put((String) decoded[i], decoded[i + 1]);\n    }\n    return map;\n}", "CodeBleu_score": 59.156881638710665}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t    if (StringUtils.isBlank(messageXmlStr)) {\n        return null;\n    }\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    Document doc = db.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n    NodeList rootNode = doc.getChildNodes();\n    if (rootNode.getLength() != 1) {\n        return null;\n    }\n    Node root = rootNode.item(0);\n    if (root.getNodeType() != Node.ELEMENT_NODE) {\n        return null;\n    }\n    return decodeElement(root, doTrim);\n}", "CodeBleu_score": 47.64043451111255}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document doc = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n    NodeList children = doc.getChildNodes();\n    if (children.getLength() == 1) {\n        Node root = children.item(0);\n        if (root.getNodeName().equals(\"root\")) {\n            return decodeRootElement(root, doTrim);\n        }\n    }\n    return null;\n}", "CodeBleu_score": 55.53692371664947}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t    final OrderId orderId = OrderId.ofRepoId(orderRecord.getC_Order_ID());\n    final DeliveryRule deliveryRule = DeliveryRule.ofNullable(orderRecord.getDeliveryRule());\n    final boolean isEligibleForAutoProcessing = deliveryRule.isEligibleForAutoProcessing();\n    final boolean isEligibleForAutoScheduling = deliveryRule.isEligibleForAutoScheduling();\n    if (isEligibleForAutoProcessing) {\n        final ITrxManager trxManager = Services.get(ITrxManager.class);\n        final String transactionName = trxManager.getTransactionName();\n        final String transactionNameWithOrderId = transactionName + \" - \" + orderId;\n        log.info(\"Enqueueing shipment and invoice processing for order {} ({})\", orderId, transactionNameWithOrderId);\n        final AsyncBatchId asyncBatchId = Services.get(AsyncBatchObserver.class).enqueue(new CompleteShipAndInvoiceEnqueuer(orderId, transactionNameWithOrderId));\n        log.info(\"Enqueued shipment and invoice processing for order {} ({}): {}\", orderId, transactionNameWithOrderId, asyncBatchId);\n    } else if (isEligibleForAutoScheduling) {\n        log.info(\"Enqueueing creation of missing shipment schedules for order {}\", orderId);\n        final AsyncBatchId asyncBatchId = Services.get(AsyncBatchObserver.class).enqueue(new CreateMissingShipmentSchedulesWorkpackageProcessor(orderId));\n        log.info(\"Enqueued creation of missing shipment schedules for order {}: {}\", orderId, asyncBatchId);\n    } else {\n        log.info(\"Not eligible for auto-processing or auto-scheduling for order {}\", orderId);\n    }\n}", "CodeBleu_score": 42.81295573683771}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t    final OrderId orderId = OrderId.ofRepoId(orderRecord.getC_Order_ID());\n    final DeliveryRule deliveryRule = DeliveryRule.ofNullable(orderRecord.getDeliveryRule());\n    if (deliveryRule == null) {\n        LOGGER.info(\"Order {} does not have a delivery rule -> will not enqueue for auto-shipping and invoicing\", orderId);\n        return;\n    }\n\n    final ITrxManager trxManager = Services.get(ITrxManager.class);\n    final String transactionName = trxManager.getCurrentTransactionName();\n\n    if (deliveryRule.isAutoShipAndInvoice()) {\n        LOGGER.info(\"Order {} has a delivery rule for auto-shipping and invoicing -> will enqueue for auto-shipping and invoicing\", orderId);\n        Services.get(CompleteShipAndInvoiceEnqueuer.class).enqueue(orderId, transactionName);\n    } else {\n        LOGGER.info(\"Order {} has a delivery rule for manual shipment -> will schedule creation of missing shipment schedules\", orderId);\n        Services.get(CreateMissingShipmentSchedulesWorkpackageProcessor.class).scheduleCreateMissingShipmentSchedules(orderId, transactionName);\n    }\n}", "CodeBleu_score": 43.39746446716967}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t    final OrderId orderId = OrderId.ofRepoId(orderRecord.getC_Order_ID());\n    final DeliveryRule deliveryRule = DeliveryRule.of(orderRecord);\n    if (deliveryRule.isAutoProcessingEligible()) {\n        final String transactionName = getTransactionName(orderId);\n        final AsyncBatchId batchId = AsyncBatchId.of(transactionName);\n        final AsyncBatchObserver batchObserver = Services.getAsyncBatchObserver();\n        batchObserver.onBeforeCommit(batchId, orderId);\n        log.info(\"Enqueuing order {} for automatic shipping and invoicing using transaction name {}\", orderId, transactionName);\n        Services.get(CompleteShipAndInvoiceEnqueuer.class).enqueue(orderId);\n    } else {\n        log.info(\"Order {} is not eligible for automatic shipping and invoicing\", orderId);\n        log.info(\"Enqueuing creation of missing shipment schedules for order {}\", orderId);\n        Services.get(CreateMissingShipmentSchedulesWorkpackageProcessor.class).enqueue(orderId);\n    }\n}", "CodeBleu_score": 48.95661922592609}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = User::where('email', $request->email)->first();\n\n    if (!$user || !Hash::check($request->password, $user->password)) {\n        event(new Failed('webauthn', $user, [\n            'email' => $request->email,\n            'password' => $request->password,\n        ]));\n\n        throw ValidationException::withMessages([\n            'email' => [trans('auth.failed')],\n        ]);\n    }\n\n    return $user;\n}", "CodeBleu_score": 43.78633310906061}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = User::where('email', $request->email)->first();\n\n    if (!$user || !Hash::check($request->password, $user->password)) {\n        event(new Failed('webauthn', $user, ['password' => true]));\n\n        throw ValidationException::withMessages([\n            'email' => __('auth.failed'),\n        ]);\n    }\n\n    return $user;\n}", "CodeBleu_score": 42.29710167643598}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = User::where('email', $request->email)->first();\n\n    if (!$user || !Hash::check($request->password, $user->password)) {\n        event(new Failed('auth', $user, [\n            'password' => [trans('auth.failed')],\n        ]));\n\n        throw ValidationException::withMessages([\n            'email' => [trans('auth.failed')],\n        ]);\n    }\n\n    return $user;\n}", "CodeBleu_score": 41.453299257619506}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter()->increment($request);\n\n    throw ValidationException::withMessages([\n        Fortify::username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 68.40137477109548}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter()->increment($request);\n\n    throw ValidationException::withMessages([\n        Fortify::username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 68.40137477109548}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter()->increment($request);\n\n    throw ValidationException::withMessages([\n        Fortify::username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 68.40137477109548}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t    $userId = session('two_factor.user_id');\n    $user = User::find($userId);\n\n    if ($user) {\n        $assertion = Webauthn::getAssertion($user);\n\n        return Inertia::render('TwoFactorChallenge', [\n            'two_factor_enabled' => !is_null($user->two_factor_secret),\n            'remember_me' => $request->session()->get('remember_me', false),\n            'public_key' => $assertion->publicKey,\n        ]);\n    }\n\n    return redirect()->route('login');\n}", "CodeBleu_score": 42.594293928194446}, {"code": "<?\npublic function toResponse($request){\n\t    $userId = session('two_factor.user_id');\n    $user = User::find($userId);\n\n    if ($user) {\n        $assertion = Webauthn::getAssertion($user);\n        $data = [\n            'two_factor_enabled' => !is_null($user->two_factor_secret),\n            'remember' => $request->session()->get('auth.password_confirmed_at') ? true : false,\n            'public_key' => $assertion->getPublicKeyCredentialDescriptor(),\n        ];\n\n        return Inertia::render('TwoFactorChallenge', $data);\n    }\n\n    return redirect()->route('login');\n}", "CodeBleu_score": 47.701777275716346}, {"code": "<?\npublic function toResponse($request){\n\t    $userId = session('two_factor.user_id');\n\n    $user = User::findOrFail($userId);\n\n    $assertion = Webauthn::getAssertion($user);\n\n    return Inertia::render('TwoFactorChallenge', [\n        'twoFactorEnabled' => !is_null($user->two_factor_secret),\n        'remember' => $request->session()->get('auth.password_confirmed_at') ? true : false,\n        'publicKey' => $assertion->getPublicKeyCredentialDescriptor(),\n    ]);\n}", "CodeBleu_score": 41.56584331096126}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    $userToken = UserToken::where('driver', $driver)\n        ->where('socialite_user_id', $socialite->getId())\n        ->first();\n\n    if ($userToken) {\n        $user = $userToken->user;\n\n        if ($user->isNot(Auth::user())) {\n            $user->update(['email' => $socialite->getEmail()]);\n\n            $userToken->update(['user_id' => $user->id]);\n        }\n\n        return $user;\n    }\n\n    if ($socialite instanceof OAuth1User) {\n        throw ValidationException::withMessages([\n            'email' => [trans('auth.failed')],\n        ]);\n    }\n\n    $user = User::where('email', $socialite->getEmail())->first();\n\n    if ($user) {\n        $userToken = UserToken::create([\n            'user_id' => $user->id,\n            'driver' => $driver,\n            'socialite_user_id' => $socialite->getId(),\n        ]);\n\n        return $user;\n    }\n\n    $user = (new CreateNewUser())->create([\n        'name' => $socialite->getName(),\n        'email' => $socialite->getEmail(),\n        'password' => Str::random(16),\n    ]);\n\n    UserToken::create([\n        'user_id' => $user->id,\n        'driver' => $driver,\n        'socialite_user_id' => $socialite->getId(),\n    ]);\n\n    return $user;\n}", "CodeBleu_score": 44.549000508777404}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    $token = UserToken::where('driver', $driver)\n        ->where('socialite_user_id', $socialite->getId())\n        ->first();\n\n    if ($token) {\n        if (! $token->user->hasVerifiedEmail()) {\n            event(new Failed($request, $token->user, [\n                'email' => [trans('auth.failed')],\n            ]));\n\n            throw ValidationException::withMessages([\n                'email' => [trans('auth.failed')],\n            ]);\n        }\n\n        if ($token->user->wasRecentlyCreated) {\n            event(new Registered($token->user));\n        }\n\n        return $token->user;\n    }\n\n    $user = User::where('email', $socialite->getEmail())->first();\n\n    if (! $user) {\n        $user = (new CreateNewUser())->create($socialite->toArray());\n    }\n\n    $token = $user->tokens()->create([\n        'driver' => $driver,\n        'socialite_user_id' => $socialite->getId(),\n        'socialite_user_token' => $socialite->token,\n        'socialite_refresh_token' => $socialite->refreshToken ?? null,\n        'socialite_expires_in' => $socialite->expiresIn ?? null,\n    ]);\n\n    return $user;\n}", "CodeBleu_score": 42.07631437804806}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    $userToken = UserToken::where('driver', $driver)\n        ->where('socialite_id', $socialite->getId())\n        ->first();\n\n    if ($userToken) {\n        $user = $userToken->user;\n        $user->update([\n            'socialite_id' => $socialite->getId(),\n            'socialite_token' => $socialite->token,\n            'socialite_refresh_token' => $socialite->refreshToken,\n            'socialite_expires_in' => $socialite->expiresIn,\n        ]);\n\n        if (!$user->hasVerifiedEmail()) {\n            $user->markEmailAsVerified();\n        }\n\n        return $user;\n    }\n\n    $user = User::where('socialite_id', $socialite->getId())->first();\n\n    if ($user) {\n        $user->update([\n            'socialite_id' => $socialite->getId(),\n            'socialite_token' => $socialite->token,\n            'socialite_refresh_token' => $socialite->refreshToken,\n            'socialite_expires_in' => $socialite->expiresIn,\n        ]);\n\n        return $user;\n    }\n\n    $user = (new CreateNewUser())->create([\n        'name' => $socialite->getName(),\n        'email' => $socialite->getEmail(),\n        'password' => null,\n        'socialite_id' => $socialite->getId(),\n        'socialite_token' => $socialite->token,\n        'socialite_refresh_token' => $socialite->refreshToken,\n        'socialite_expires_in' => $socialite->expiresIn,\n    ]);\n\n    event(new Registered($user));\n\n    return $user;\n}", "CodeBleu_score": 43.87775478856691}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    if (!$user = $request->user()) {\n        return false;\n    }\n\n    if (!$filteredCredentials = WebauthnFacade::filter($request->all())) {\n        return false;\n    }\n\n    if (!WebauthnFacade::validateAssertion($user, $filteredCredentials)) {\n        event(new Failed('webauthn', $user, [\n            'message' => 'WebAuthn login failed.',\n        ]));\n\n        throw ValidationException::withMessages([\n            Webauthn::$usernameField => __('auth.failed'),\n        ]);\n    }\n\n    return true;\n}", "CodeBleu_score": 48.07452740183543}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $user = $this->getUser($request);\n    if (!$user) {\n        return false;\n    }\n\n    $credentials = collect($request->only('credentials'));\n\n    if (!WebauthnFacade::validateAssertion($user, $credentials)) {\n        event(new Failed('webauthn', $user, [\n            'credentials' => $credentials,\n        ]));\n\n        throw ValidationException::withMessages([\n            'credentials' => [trans('auth.failed')],\n        ]);\n    }\n\n    return true;\n}", "CodeBleu_score": 49.64550780684397}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $user = $this->getUser($request);\n\n    if (! $user) {\n        return false;\n    }\n\n    $credentials = $this->filter($request->all());\n\n    if ($this->guard()->validate($credentials)) {\n        $this->ensureIsNotRateLimited($request);\n\n        return $this->attemptLogin($request);\n    }\n\n    event(new Failed($user, $request));\n\n    throw ValidationException::withMessages([\n        $this->username() => [trans('auth.failed')],\n    ]);\n\n    return false;\n}", "CodeBleu_score": 52.614528197330024}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\t    try {\n        return User::where('email', $this->option('email'))->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error('User not found');\n\n        return null;\n    }\n}", "CodeBleu_score": 33.53645035981231}, {"code": "<?\nprivate function user(): ?User{\n\t    try {\n        return User::where('email', $this->argument('email'))->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error($e->getMessage());\n        return null;\n    }\n}", "CodeBleu_score": 30.826847073852914}, {"code": "<?\nprivate function user(): ?User{\n\t    try {\n        return User::where('email', $this->argument('email'))->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error('User not found');\n        return null;\n    }\n}", "CodeBleu_score": 33.20181334313587}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\t    if (config('scout.driver') === 'meilisearch' && config('scout.flush')) {\n        foreach (config('scout.meilisearch.indexes') as $index) {\n            $table = explode('.', $index)[1];\n            $this->call('scout:flush', ['model' => $table]);\n        }\n        $this->info('Meilisearch indexes flushed');\n    }\n}", "CodeBleu_score": 50.654363595914795}, {"code": "<?\nprotected function scoutFlush(): void{\n\t    if (config('scout.driver') !== 'meilisearch') {\n        return;\n    }\n\n    if (!config('scout.flush')) {\n        return;\n    }\n\n    foreach (config('scout.meilisearch.indexes') as $index) {\n        $table = (string) $index['model']::query()->getModel()->getTable();\n\n        $this->callSilent('scout:flush', ['model' => $index['model']]);\n\n        $this->getOutput()->writeln(sprintf('<info>Flushed index for table [%s]</info>', $table), OutputInterface::VERBOSITY_VERBOSE);\n    }\n}", "CodeBleu_score": 46.65244708053464}, {"code": "<?\nprotected function scoutFlush(): void{\n\t    if (!config('scout.driver') || !config('scout.flush')) {\n        return;\n    }\n\n    foreach (config('scout.settings') as $index => $settings) {\n        $table = $settings['model']::searchableAs();\n\n        $this->call('scout:flush', ['model' => $settings['model']]);\n\n        $this->getOutput()->writeln(sprintf('Flushed \"%s\" index for \"%s\" table', $index, $table), OutputInterface::VERBOSITY_VERBOSE);\n    }\n}", "CodeBleu_score": 50.502464060425766}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    $vcard = new VCard();\n\n    // Attempt to read an existing VCard from the resource\n    try {\n        $vcard = Reader::read($resource->getVCard());\n    } catch (ParseException $e) {\n        // If the VCard is invalid, create a new one\n        $vcard = new VCard();\n    }\n\n    // Set a UID if it doesn't exist\n    if (!$vcard->UID) {\n        $vcard->UID = uniqid();\n    }\n\n    // Apply exporters to add more details to the VCard\n    foreach ($resource->getExporters() as $exporter) {\n        $exporter->export($vcard, $resource);\n    }\n\n    return $vcard;\n}", "CodeBleu_score": 30.44839033883337}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    // Read existing VCard from resource, setting UID if missing\n    $vcard = null;\n    try {\n        $vcard = Reader::read($resource->getContent());\n    } catch (ParseException $e) {\n        // Ignore parse errors\n    }\n\n    if (!$vcard) {\n        $vcard = new VCard();\n    }\n\n    // Set UID if missing\n    if (!$vcard->UID) {\n        $vcard->UID = $resource->getUid();\n    }\n\n    // Apply exporters\n    $exporters = $this->getExporters();\n    foreach ($exporters as $exporter) {\n        $exporter->export($vcard, $resource);\n    }\n\n    return $vcard;\n}", "CodeBleu_score": 37.89686231591555}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    $vcard = null;\n    try {\n        $vcard = Reader::read($resource->getContent());\n    } catch (ParseException $e) {\n        // If the VCard is invalid, create a new one with a UID.\n        $vcard = new VCard();\n        $vcard->add('UID', $resource->getUid());\n    }\n\n    // Apply exporters to populate the VCard with more details.\n    foreach ($this->exporters as $exporter) {\n        $exporter->export($resource, $vcard);\n    }\n\n    return $vcard;\n}", "CodeBleu_score": 30.0550023167042}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $object = $this->getCard($addressBookId, $cardUri);\n\n    if ($object instanceof Contact) {\n        Bus::dispatch(new DestroyContact($object));\n    } elseif ($object instanceof Group) {\n        Bus::dispatch(new DestroyGroup($object));\n    } else {\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 31.73608949623826}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $object = Vault::find($addressBookId)->objects()->where('uri', $cardUri)->first();\n\n    if (!$object) {\n        return false;\n    }\n\n    if ($object->type === 'contact') {\n        Bus::chain([\n            new DestroyContact($object->id),\n        ])->dispatch();\n    } elseif ($object->type === 'group') {\n        Bus::chain([\n            new DestroyGroup($object->id),\n        ])->dispatch();\n    } else {\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 36.82811674276939}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $object = $this->getCard($addressBookId, $cardUri);\n\n    if ($object instanceof Contact) {\n        Bus::chain([\n            new DestroyContact($object),\n        ])->dispatch();\n    } elseif ($object instanceof Group) {\n        Bus::chain([\n            new DestroyGroup($object),\n        ])->dispatch();\n    } else {\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 34.456750021069645}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\t    if (! request()->hasFile('file')) {\n        return;\n    }\n\n    $leadActivity = app(Repository::class)->create([\n        'type' => 'file',\n        'description' => $data['description'],\n        'user_id' => auth()->guard('api')->user()->id,\n        'lead_id' => $data['lead_id'],\n    ]);\n\n    $file = request()->file('file');\n\n    $fileName = $file->getClientOriginalName();\n\n    $path = $file->storeAs('leads/files', $fileName);\n\n    return $leadActivity->files()->create([\n        'name' => $fileName,\n        'path' => $path,\n    ]);\n}", "CodeBleu_score": 62.28485588672095}, {"code": "<?\npublic function upload(array $data){\n\t    $file = $data['file'] ?? null;\n\n    if (! $file) {\n        return;\n    }\n\n    $leadActivity = $this->create([\n        'type' => 'file',\n        'description' => $data['description'] ?? null,\n        'user_id' => auth()->id(),\n        'lead_id' => $data['lead_id'],\n    ]);\n\n    $fileName = $file->getClientOriginalName();\n\n    $path = $file->storeAs('leads/files', $fileName, 'public');\n\n    return $this->create([\n        'name' => $fileName,\n        'path' => $path,\n        'lead_activity_id' => $leadActivity->id,\n    ]);\n}", "CodeBleu_score": 57.29418532647145}, {"code": "<?\npublic function upload(array $data){\n\t    if (request()->hasFile('file')) {\n        $file = request()->file('file');\n        $fileName = time() . '.' . $file->getClientOriginalExtension();\n        $filePath = 'uploads/files/' . $fileName;\n        $file->storeAs('uploads/files', $fileName, 'public');\n\n        $leadActivity = app()->make(Repository::class)->create([\n            'lead_id' => $data['lead_id'],\n            'type' => 'file',\n            'description' => 'File uploaded',\n            'created_by_type' => get_class(auth()->guard('admin')->user() ?: auth()->guard('user')->user()),\n            'created_by_id' => auth()->guard('admin')->user() ? auth()->guard('admin')->user()->id : auth()->guard('user')->user()->id,\n        ]);\n\n        $fileRecord = app()->make(Repository::class)->create([\n            'name' => $fileName,\n            'path' => $filePath,\n            'lead_activity_id' => $leadActivity->id,\n        ]);\n\n        return $fileRecord;\n    }\n}", "CodeBleu_score": 46.931789267643396}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    if ($this->isAdminRoute()) {\n        if ($exception instanceof ModelNotFoundException) {\n            return response()->view('admin.errors.404', [], 404);\n        }\n\n        if ($exception instanceof PDOException) {\n            return response()->view('admin.errors.500', [], 500);\n        }\n\n        if ($exception instanceof ParseError) {\n            return response()->view('admin.errors.500', [], 500);\n        }\n    } else {\n        if ($exception instanceof ModelNotFoundException) {\n            return response()->view('errors.404', [], 404);\n        }\n\n        if ($exception instanceof PDOException) {\n            return response()->view('errors.500', [], 500);\n        }\n\n        if ($exception instanceof ParseError) {\n            return response()->view('errors.500', [], 500);\n        }\n    }\n}", "CodeBleu_score": 34.1709662423297}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    if ($this->isAdminRoute()) {\n        if ($exception instanceof AuthenticationException) {\n            return redirect()->route('admin.login');\n        }\n    } else {\n        if ($exception instanceof AuthenticationException) {\n            return redirect()->route('login');\n        }\n    }\n\n    if ($exception instanceof HttpException) {\n        $statusCode = $exception->getStatusCode();\n    } elseif ($exception instanceof ModelNotFoundException) {\n        $statusCode = 404;\n    } elseif ($exception instanceof PDOException) {\n        $statusCode = 500;\n    } elseif ($exception instanceof ParseError) {\n        $statusCode = 500;\n    } else {\n        $statusCode = 500;\n    }\n\n    if ($exception instanceof ModelNotFoundException) {\n        return response()->view('errors.404', [], 404);\n    }\n\n    if ($exception instanceof PDOException) {\n        return response()->view('errors.500', [], 500);\n    }\n\n    if ($exception instanceof ParseError) {\n        return response()->view('errors.500', [], 500);\n    }\n\n    return response()->view('errors.500', [], 500);\n}", "CodeBleu_score": 39.838436022555804}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    // Check if the route is for admin or front\n    $route = request()->route();\n    $isAdminRoute = strpos($route->uri, 'admin') !== false;\n\n    // Redirect front routes to the admin session creation\n    if (!$isAdminRoute && $exception instanceof AuthenticationException) {\n        return redirect()->route('admin.login');\n    }\n\n    // Set the status code for HTTP exceptions\n    if ($exception instanceof HttpException) {\n        $statusCode = $exception->getStatusCode();\n    } else {\n        $statusCode = 500;\n    }\n\n    // Return appropriate responses for ModelNotFoundException, PDOException, and ParseError\n    if ($exception instanceof ModelNotFoundException) {\n        return response()->json(['message' => 'Resource not found'], 404);\n    } elseif ($exception instanceof PDOException) {\n        return response()->json(['message' => 'Database error'], 500);\n    } elseif ($exception instanceof ParseError) {\n        return response()->json(['message' => 'Parse error'], 500);\n    }\n\n    // Return the default exception response\n    return parent::render($request, $exception);\n}", "CodeBleu_score": 52.70204106785235}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->wantsJson()) {\n        return response()->json([\n            'message' => 'Not Found'\n        ], $statusCode);\n    }\n\n    return response()->view($path, [], $statusCode);\n}", "CodeBleu_score": 47.35942188182493}, {"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json(['error' => 'Resource not found'], $statusCode);\n    }\n\n    return response()->view('errors.' . $statusCode, [], $statusCode);\n}", "CodeBleu_score": 52.24348709721194}, {"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json(['error' => 'Not Found'], $statusCode);\n    }\n\n    return response()->view($path, [], $statusCode);\n}", "CodeBleu_score": 42.113401714968056}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t    $activityIds = request('activity_ids');\n    $isDone = request('is_done');\n    $updatedCount = 0;\n\n    foreach ($activityIds as $activityId) {\n        $activity = $this->activityRepository->findOrFail($activityId);\n\n        if ($activity->is_done != $isDone) {\n            Event::dispatch('activity.update.before', $activity);\n\n            $activity->update([\n                'is_done' => $isDone,\n            ]);\n\n            Event::dispatch('activity.update.after', $activity);\n\n            $updatedCount++;\n        }\n    }\n\n    if ($updatedCount > 0) {\n        session()->flash('success', trans('admin::app.response.update-success', ['name' => 'Activity']));\n    } else {\n        session()->flash('info', trans('admin::app.response.update-fail', ['name' => 'Activity']));\n    }\n\n    return response()->json([\n        'message' => true,\n    ]);\n}", "CodeBleu_score": 45.26792990698304}, {"code": "<?\npublic function massUpdate(){\n\t    $data = request()->all();\n    $ids = explode(',', $data['ids']);\n    $is_done = $data['is_done'];\n    $count = 0;\n    foreach ($ids as $id) {\n        $activity = $this->activityRepository->findOrFail($id);\n        Event::dispatch('activity.update.before', $activity);\n        $activity->update(['is_done' => $is_done]);\n        Event::dispatch('activity.update.after', $activity);\n        $count++;\n    }\n    return response()->json([\n        'success' => true,\n        'message' => trans('admin::app.response.update-success', ['name' => 'Activity']),\n        'count' => $count,\n    ]);\n}", "CodeBleu_score": 48.84400556741243}, {"code": "<?\npublic function massUpdate(){\n\t    $data = request()->all();\n    $ids = $data['ids'];\n    $isDone = $data['is_done'];\n    $count = 0;\n    foreach ($ids as $id) {\n        $activity = $this->activityRepository->findOrFail($id);\n        Event::dispatch('activity.update.before', $activity);\n        $activity->update(['is_done' => $isDone]);\n        Event::dispatch('activity.update.after', $activity);\n        $count++;\n    }\n    return response()->json([\n        'message' => 'Successfully updated activities.',\n        'count' => $count,\n    ]);\n}", "CodeBleu_score": 48.438534268219904}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t    $ids = explode(',', request('ids'));\n\n    foreach ($ids as $id) {\n        Event::dispatch('activity.delete.before', $id);\n\n        $this->activityRepository->delete($id);\n\n        Event::dispatch('activity.delete.after', $id);\n    }\n\n    return response()->json([\n        'message' => trans('admin::app.response.destroy-success', ['name' => trans('admin::app.activity.activity')]),\n    ]);\n}", "CodeBleu_score": 54.42251416384688}, {"code": "<?\n public function massDestroy(){\n\t    $ids = explode(',', request()->input('ids'));\n\n    foreach ($ids as $id) {\n        Event::dispatch('activity.activity.delete.before', $id);\n\n        $this->activityRepository->delete($id);\n\n        Event::dispatch('activity.activity.delete.after', $id);\n    }\n\n    return response()->json([\n        'message' => trans('admin::app.response.destroy-success', ['name' => trans('admin::app.activity.title')]),\n    ]);\n}", "CodeBleu_score": 53.40073600756136}, {"code": "<?\n public function massDestroy(){\n\t    $ids = explode(',', request()->input('ids'));\n\n    foreach ($ids as $id) {\n        Event::dispatch('activity.destroy.before', $id);\n\n        $this->activityRepository->delete($id);\n\n        Event::dispatch('activity.destroy.after', $id);\n    }\n\n    return response()->json([\n        'success' => true,\n        'message' => trans('admin::app.response.destroy-success', ['name' => trans('activity::app.activity.title')]),\n    ]);\n}", "CodeBleu_score": 46.53691748006024}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t    $cards = DashboardHelper::getCards();\n\n    foreach (request()->all() as $cardId => $status) {\n        foreach ($cards as $card) {\n            if ($card['id'] == $cardId) {\n                $card['selected'] = $status;\n            }\n        }\n    }\n\n    return response()->json($cards);\n}", "CodeBleu_score": 37.01287257616727}, {"code": "<?\n public function updateCards(){\n\t    $cards = DashboardHelper::getCards();\n    $cards = collect($cards)->map(function ($card) {\n        $card['selected'] = request()->get('cards', []) ? in_array($card['id'], request()->get('cards')) : false;\n        return $card;\n    })->toArray();\n    session()->put('dashboard.cards', $cards);\n    return response()->json(['success' => true, 'message' => __('admin::app.dashboard.success-update-cards')]);\n}", "CodeBleu_score": 37.04107871433201}, {"code": "<?\n public function updateCards(){\n\t    $cards = DashboardHelper::getCards();\n\n    foreach (request('cards', []) as $card) {\n        foreach ($cards as $key => $cardItem) {\n            if ($cardItem['key'] == $card['key']) {\n                $cards[$key]['selected'] = $card['selected'];\n            }\n        }\n    }\n\n    DashboardHelper::setCards($cards);\n\n    return response()->json([\n        'success' => true,\n    ]);\n}", "CodeBleu_score": 38.70050497841932}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t    $this->validate(request(), [\n        'key' => 'required',\n        'value' => 'required',\n    ]);\n\n    Event::dispatch('core.configuration.create.before');\n\n    $configuration = $this->configurationRepository->create(request()->all());\n\n    Event::dispatch('core.configuration.create.after', $configuration);\n\n    session()->flash('success', trans('admin::app.settings.configurations.create-success'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 40.96225454079413}, {"code": "<?\npublic function store(){\n\t    Event::dispatch('core.configuration.create.before');\n\n    $this->validate(request(), [\n        'code' => ['required', new Code],\n    ]);\n\n    $data = request()->all();\n\n    $configuration = $this->configurationRepository->create($data);\n\n    Event::dispatch('core.configuration.create.after', $configuration);\n\n    session()->flash('success', trans('admin::app.configuration.create-success'));\n\n    return redirect()->route('admin.configuration.index');\n}", "CodeBleu_score": 35.38716191004894}, {"code": "<?\npublic function store(){\n\t    $this->validate(request(), [\n        'code' => ['required', new Code],\n        'value' => 'required',\n        'channel_code' => 'required',\n        'locale_code' => 'required'\n    ]);\n\n    Event::dispatch('core.configuration.create.before');\n\n    $configuration = $this->configurationRepository->create(request()->all());\n\n    Event::dispatch('core.configuration.create.after', $configuration);\n\n    session()->flash('success', trans('admin::app.configuration.create-success'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 38.7661557809151}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t    $fileName = request()->get('file');\n    $config = request()->get('config');\n\n    $repository = app(ConfigurationRepository::class);\n    $config = $repository->findOneWhere([\n        'code' => $config,\n        'value' => $fileName\n    ]);\n\n    if ($config) {\n        $file = Storage::disk('public')->get($fileName);\n\n        return response($file, 200)\n            ->header('Content-Type', 'application/octet-stream')\n            ->header('Content-Disposition', 'attachment; filename=\"' . basename($fileName) . '\"');\n    }\n\n    return response()->json([\n        'message' => 'File not found.'\n    ], 404);\n}", "CodeBleu_score": 38.03646488565757}, {"code": "<?\npublic function download(){\n\t    $fileName = request()->get('file');\n    $filePath = storage_path('app/public/' . $fileName);\n    $config = $this->configurationRepository->findOneWhere(['value' => $fileName]);\n    if ($config) {\n        $config->value = $filePath;\n    }\n    return $config;\n}", "CodeBleu_score": 45.52872219592733}, {"code": "<?\npublic function download(){\n\t    $fileName = request()->get('file');\n\n    $config = app(ConfigurationRepository::class)->findOneWhere([\n        'code' => 'general.locale_options',\n    ]);\n\n    $configValue = $config->value;\n\n    $filePath = storage_path('app/public/' . $configValue . '/' . $fileName);\n\n    return response()->download($filePath);\n}", "CodeBleu_score": 43.77022445512859}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    List<AdminModelSort> adminModelSorts = new ArrayList<>();\n    for (String s : list) {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setModel(s);\n        adminModelSort.setSort(list.indexOf(s) + 1);\n        adminModelSort.setUserId(UserUtil.getUserId());\n        adminModelSorts.add(adminModelSort);\n    }\n    adminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, UserUtil.getUserId()));\n    adminModelSortService.saveBatch(adminModelSorts);\n    return Result.ok();\n}", "CodeBleu_score": 48.84326395059502}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    List<AdminModelSort> adminModelSorts = new ArrayList<>();\n    for (int i = 0; i < list.size(); i++) {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setModelCode(list.get(i));\n        adminModelSort.setSort(i);\n        adminModelSort.setUserId(UserUtil.getUserId());\n        adminModelSorts.add(adminModelSort);\n    }\n    adminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, UserUtil.getUserId()));\n    adminModelSortService.saveBatch(adminModelSorts);\n    return Result.ok();\n}", "CodeBleu_score": 66.97511827613044}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    List<AdminModelSort> adminModelSorts = new ArrayList<>();\n    for (int i = 0; i < list.size(); i++) {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setModel(list.get(i));\n        adminModelSort.setSort(i + 1);\n        adminModelSort.setUserId(UserUtil.getUserId());\n        adminModelSorts.add(adminModelSort);\n    }\n    adminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, UserUtil.getUserId()));\n    adminModelSortService.saveBatch(adminModelSorts);\n    return Result.ok();\n}", "CodeBleu_score": 67.53909078834582}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n    if (AdminModuleEnum.CRM.getCode().equals(adminConfig.getModuleCode())) {\n        return Result.error(AdminCodeEnum.ADMIN_CONFIG_CRM_ERROR);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.updateById(adminConfig);\n    return Result.ok();\n}", "CodeBleu_score": 75.55212157472536}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n    if (AdminModuleEnum.CRM.getCode().equals(adminConfig.getModuleCode())) {\n        return Result.error(AdminCodeEnum.CRM_MODULE_ERROR);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.updateById(adminConfig);\n    return Result.ok();\n}", "CodeBleu_score": 75.67613673367933}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    AdminConfig config = adminConfigService.getById(moduleSetting.getSettingId());\n    if (config == null) {\n        return Result.error(AdminCodeEnum.SETTING_NOT_EXIST);\n    }\n    if (AdminModuleEnum.CRM.getCode().equals(config.getModule())) {\n        return Result.error(AdminCodeEnum.CRM_MODULE_CANT_SETTING);\n    }\n    config.setStatus(moduleSetting.getStatus());\n    adminConfigService.updateById(config);\n    return Result.ok(AdminCodeEnum.SUCCESS);\n}", "CodeBleu_score": 58.636195426100045}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t    AdminUserConfig adminUserConfig = adminUserConfigService.getOne(new LambdaQueryWrapper<AdminUserConfig>().eq(AdminUserConfig::getCustomKey, customKey).eq(AdminUserConfig::getUserId, UserUtil.getUserId()));\n    if (adminUserConfig != null) {\n        adminUserConfig.setCustomValue(json.toJSONString());\n        adminUserConfigService.updateById(adminUserConfig);\n    } else {\n        adminUserConfig = new AdminUserConfig();\n        adminUserConfig.setUserId(UserUtil.getUserId());\n        adminUserConfig.setCustomKey(customKey);\n        adminUserConfig.setCustomValue(json.toJSONString());\n        adminUserConfigService.save(adminUserConfig);\n    }\n    return Result.ok();\n}", "CodeBleu_score": 54.98934656153595}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t    AdminUserConfig config = adminUserConfigService.getOne(new LambdaQueryWrapper<AdminUserConfig>().eq(AdminUserConfig::getCustomKey, customKey).eq(AdminUserConfig::getUserId, UserUtil.getUserId()));\n    if (config != null) {\n        config.setCustomValue(json.toJSONString());\n        adminUserConfigService.updateById(config);\n    } else {\n        config = new AdminUserConfig();\n        config.setCustomKey(customKey);\n        config.setCustomValue(json.toJSONString());\n        config.setUserId(UserUtil.getUserId());\n        adminUserConfigService.save(config);\n    }\n    return Result.ok();\n}", "CodeBleu_score": 56.154707154955844}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t    AdminUserConfig userConfig = adminUserConfigService.getOne(new LambdaQueryWrapper<AdminUserConfig>().eq(AdminUserConfig::getCustomKey, customKey).eq(AdminUserConfig::getUserId, UserUtil.getUserId()));\n    if (userConfig == null) {\n        userConfig = new AdminUserConfig();\n        userConfig.setCustomKey(customKey);\n        userConfig.setUserId(UserUtil.getUserId());\n    }\n    userConfig.setCustomValue(json.toJSONString());\n    adminUserConfigService.saveOrUpdate(userConfig);\n    return Result.ok();\n}", "CodeBleu_score": 57.113348752016414}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    // Retrieve the user details from the database\n    AdminUser user = adminUserService.getById(userId);\n\n    // Retrieve the department name based on the user's department ID\n    String departmentName = adminDepartmentService.getDepartmentName(user.getDepartmentId());\n\n    // Set the department name in the user object\n    user.setDepartmentName(departmentName);\n\n    // Nullify the salt and password fields\n    user.setSalt(null);\n    user.setPassword(null);\n\n    // Wrap the user information in a result object\n    return Result.ok(user);\n}", "CodeBleu_score": 53.5585737819255}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser user = adminUserService.getById(userId);\n    if (user == null) {\n        return Result.error(AdminCodeEnum.USER_NOT_EXIST);\n    }\n    // \u83b7\u53d6\u90e8\u95e8\u540d\u79f0\n    String deptName = adminDeptService.getById(user.getDeptId()).getName();\n    user.setDeptName(deptName);\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.ok(user);\n}", "CodeBleu_score": 53.55441629954776}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser adminUser = adminUserService.getById(userId);\n    if (adminUser == null) {\n        return Result.error(AdminCodeEnum.ADMIN_USER_NOT_EXIST);\n    }\n    AdminUserVO adminUserVO = new AdminUserVO();\n    BeanUtil.copyProperties(adminUser, adminUserVO);\n    adminUserVO.setDepartmentName(adminDepartmentService.getById(adminUser.getDepartmentId()).getName());\n    adminUserVO.setSalt(null);\n    adminUserVO.setPassword(null);\n    return Result.ok(adminUserVO);\n}", "CodeBleu_score": 40.963387555497654}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t        AdminUser user = UserUtil.getUser();\n        if (user == null) {\n            return Result.ok();\n        }\n        Long userId = user.getUserId();\n        List<AdminUserConfig> list = adminUserConfigService.list(new LambdaQueryWrapper<AdminUserConfig>().eq(AdminUserConfig::getUserId, userId).eq(AdminUserConfig::getConfigKey, AdminConfigEnum.READ_NOTICE.getKey()));\n        if (list.size() > 1) {\n            adminUserConfigService.update(new AdminUserConfig().setConfigValue(1), new LambdaQueryWrapper<AdminUserConfig>().eq(AdminUserConfig::getUserId, userId).eq(AdminUserConfig::getConfigKey, AdminConfigEnum.READ_NOTICE.getKey()));\n        } else if (list.size() == 0) {\n            adminUserConfigService.save(new AdminUserConfig().setUserId(userId).setConfigKey(AdminConfigEnum.READ_NOTICE.getKey()).setConfigValue(1));\n        }\n        return Result.ok();\n    }", "CodeBleu_score": 43.06716780685158}, {"code": " public Result readNotice() {\n\t\n     return Result.ok();\n }", "CodeBleu_score": 5.168662586640522}, {"code": " public Result readNotice() {\n\t    Long userId = UserUtil.getUserId();\n    List<AdminUserConfig> adminUserConfigs = adminUserConfigService.list(new LambdaQueryWrapper<AdminUserConfig>().eq(AdminUserConfig::getUserId, userId).eq(AdminUserConfig::getConfigKey, AdminConfigEnum.READ_NOTICE.getKey()));\n    if (adminUserConfigs.size() > 1) {\n        adminUserConfigService.update(new LambdaQueryWrapper<AdminUserConfig>().eq(AdminUserConfig::getUserId, userId).eq(AdminUserConfig::getConfigKey, AdminConfigEnum.READ_NOTICE.getKey()), AdminUserConfig.builder().status(1).build());\n    } else {\n        adminUserConfigService.save(AdminUserConfig.builder().userId(userId).configKey(AdminConfigEnum.READ_NOTICE.getKey()).status(1).build());\n    }\n    return Result.ok();\n}", "CodeBleu_score": 46.74519077937044}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    AdminConfig adminConfig = adminConfigMapper.selectOne(new QueryWrapper<AdminConfig>().eq(\"name\", AdminConst.COMPANY_INFO));\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(AdminConst.COMPANY_INFO);\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        adminConfig.setCreateUserId(UserUtil.getUserId());\n        adminConfigMapper.insert(adminConfig);\n    } else {\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        adminConfigMapper.updateById(adminConfig);\n    }\n}", "CodeBleu_score": 52.87755126790115}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    AdminConfig adminConfig = adminConfigMapper.selectOne(new QueryWrapper<AdminConfig>().eq(\"name\", AdminConst.ADMIN_COMPANY_INFO));\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(AdminConst.ADMIN_COMPANY_INFO);\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        adminConfigMapper.insert(adminConfig);\n    } else {\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        adminConfigMapper.updateById(adminConfig);\n    }\n}", "CodeBleu_score": 53.18231558412222}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    // \u67e5\u8be2\u914d\u7f6e\u4fe1\u606f\n    QueryWrapper<AdminConfig> wrapper = new QueryWrapper<>();\n    wrapper.eq(\"name\", AdminConst.COMPANY_INFO);\n    AdminConfig adminConfig = adminConfigMapper.selectOne(wrapper);\n    // \u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\n    if (Objects.isNull(adminConfig)) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(AdminConst.COMPANY_INFO);\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        adminConfigMapper.insert(adminConfig);\n    } else {\n        // \u5982\u679c\u5b58\u5728\uff0c\u5219\u66f4\u65b0\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        adminConfigMapper.updateById(adminConfig);\n    }\n}", "CodeBleu_score": 39.256839177036035}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\t    AdminConfig adminConfig = adminConfigMapper.selectOne(new QueryWrapper<AdminConfig>().eq(\"config_key\", AdminConst.ADMIN_CONFIG_KEY));\n    if (Objects.isNull(adminConfig)) {\n        return new AdminCompanyBO();\n    }\n    return JSON.parseObject(adminConfig.getConfigValue(), AdminCompanyBO.class);\n}", "CodeBleu_score": 35.927671817613046}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t    AdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n    AdminConfig adminConfig = adminConfigMapper.selectOne(new QueryWrapper<AdminConfig>().eq(\"key_name\", AdminConst.ADMIN_CONFIG));\n    if (adminConfig != null) {\n        adminCompanyBO = JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\n    }\n    return adminCompanyBO;\n}", "CodeBleu_score": 69.16321151621771}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t    AdminConfig config = adminConfigMapper.selectOne(new QueryWrapper<AdminConfig>().eq(\"config_key\", AdminConst.ADMIN_CONFIG_KEY));\n    if (Objects.nonNull(config)) {\n        return JSON.parseObject(config.getConfigValue(), AdminCompanyBO.class);\n    }\n    return new AdminCompanyBO();\n}", "CodeBleu_score": 34.33484306190102}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t     List<AdminConfig> list = new ArrayList<>();\n     for (String string : stringList) {\n         AdminConfig adminConfig = new AdminConfig();\n         adminConfig.setName(AdminConst.LOG_WELCOME_SPEECH);\n         adminConfig.setValue(string);\n         list.add(adminConfig);\n     }\n     this.removeConfig(AdminConst.LOG_WELCOME_SPEECH);\n     this.saveBatch(list);\n }", "CodeBleu_score": 42.87678790744498}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t     List<AdminConfig> list = new ArrayList<>();\n     stringList.forEach(s -> {\n         AdminConfig adminConfig = new AdminConfig();\n         adminConfig.setName(AdminCacheKey.LOG_WELCOME_SPEECH);\n         adminConfig.setValue(s);\n         adminConfig.setType(AdminModuleEnum.SYSTEM.getCode());\n         list.add(adminConfig);\n     });\n     removeConfig(AdminCacheKey.LOG_WELCOME_SPEECH);\n     saveBatch(list);\n }", "CodeBleu_score": 43.429287143053855}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t    List<AdminConfig> adminConfigList = new ArrayList<>();\n    for (String str : stringList) {\n        AdminConfig adminConfig = new AdminConfig();\n        adminConfig.setConfigName(AdminConst.LOG_WELCOME_SPEECH);\n        adminConfig.setConfigValue(str);\n        adminConfigList.add(adminConfig);\n    }\n    QueryWrapper<AdminConfig> queryWrapper = new QueryWrapper<>();\n    queryWrapper.eq(\"config_name\", AdminConst.LOG_WELCOME_SPEECH);\n    adminConfigMapper.delete(queryWrapper);\n    adminConfigMapper.insertBatch(adminConfigList);\n}", "CodeBleu_score": 54.80434887991471}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    // \u83b7\u53d6\u5f53\u524d\u7528\u6237ID\n    Integer userId = UserUtil.getUserId();\n    // \u83b7\u53d6\u5f53\u524d\u7528\u6237\u4fe1\u606f\n    AdminUser user = adminUserService.getById(userId);\n    if (user == null) {\n        throw new CrmException(AdminCodeEnum.ADMIN_USER_NOT_EXIST);\n    }\n    // \u6821\u9a8c\u5bc6\u7801\n    String password = AuthPasswordUtil.verifyPassword(adminInitDataBO.getPassword(), user.getUsername(), user.getSalt());\n    if (password == null) {\n        throw new CrmException(AdminCodeEnum.ADMIN_PASSWORD_ERROR);\n    }\n    // \u751f\u6210\u4e34\u65f6\u8bbf\u95ee\u7801\n    String accessCode = RandomUtil.randomString(16);\n    // \u5b58\u5165redis\n    adminCacheService.set(AdminCacheKey.ADMIN_ACCESS_CODE + userId, accessCode, 600);\n    return accessCode;\n}", "CodeBleu_score": 46.84858224177063}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    Long userId = UserUtil.getUserId();\n    AdminUser user = this.getById(userId);\n    if (user == null) {\n        throw new CrmException(AdminCodeEnum.USER_NOT_EXIST);\n    }\n    String username = user.getUsername();\n    String salt = user.getSalt();\n    String password = adminInitDataBO.getPassword();\n    String newPassword = AuthPasswordUtil.getEncryptPassword(password, salt);\n    if (!Objects.equals(user.getPassword(), newPassword)) {\n        throw new CrmException(AdminCodeEnum.PASSWORD_ERROR);\n    }\n    String code = RandomUtil.randomString(6);\n    // \u8bbe\u7f6e10\u5206\u949f\u8fc7\u671f\n    this.redisUtil.set(AdminCacheKey.ADMIN_INIT_CODE + userId, code, 600);\n    return code;\n}", "CodeBleu_score": 47.98254952380201}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    // \u83b7\u53d6\u5f53\u524d\u7528\u6237ID\n    Long userId = UserUtil.getUserId();\n    // \u83b7\u53d6\u5f53\u524d\u7528\u6237\u4fe1\u606f\n    AdminUserVO adminUserVO = this.getUserInfo(userId);\n    // \u83b7\u53d6\u7528\u6237\u540d\n    String username = adminUserVO.getUsername();\n    // \u83b7\u53d6\u7528\u6237\u8f93\u5165\u7684\u5bc6\u7801\n    String password = adminInitDataBO.getPassword();\n    // \u68c0\u67e5\u7528\u6237\u8f93\u5165\u7684\u5bc6\u7801\u662f\u5426\u6b63\u786e\n    if (!AuthPasswordUtil.verify(password, username, adminUserVO.getSalt())) {\n        throw new CrmException(AdminCodeEnum.PASSWORD_ERROR);\n    }\n    // \u751f\u6210\u4e34\u65f6\u8bbf\u95ee\u7801\n    String code = RandomUtil.randomString(16);\n    // \u5c06\u4e34\u65f6\u8bbf\u95ee\u7801\u5b58\u5165Redis\uff0c\u6709\u6548\u671f\u4e3a10\u5206\u949f\n    redisTemplate.opsForValue().set(AdminCacheKey.ADMIN_INIT_DATA_CODE + userId, code, 10, TimeUnit.MINUTES);\n    return code;\n}", "CodeBleu_score": 38.45896538247143}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\t    Long userId = UserUtil.getUserId();\n    if (userId == null) {\n        return false;\n    }\n    String key = AdminCacheKey.INIT_AUTH + userId;\n    List<String> list = BaseUtil.getList(key);\n    if (CollUtil.isNotEmpty(list)) {\n        return list.contains(AdminConst.INIT_AUTH_URL);\n    }\n    return false;\n}", "CodeBleu_score": 43.23144229427681}, {"code": "private boolean verifyInitAuth(){\n\t    Long userId = UserUtil.getUserId();\n    String key = AdminCacheKey.INIT_AUTH_URL + userId;\n    List<String> list = BaseUtil.getList(key);\n    if (CollUtil.isNotEmpty(list)) {\n        return list.contains(AdminConst.INIT_AUTH_URL);\n    }\n    return false;\n}", "CodeBleu_score": 43.97308319788378}, {"code": "private boolean verifyInitAuth(){\n\t    // \u83b7\u53d6\u5f53\u524d\u7528\u6237ID\n    Long userId = UserUtil.getUserId();\n    // \u6784\u9020Redis Key\n    String key = AdminCacheKey.INIT_AUTH_KEY + userId;\n    // \u83b7\u53d6Redis\u4e2d\u5b58\u50a8\u7684\u672a\u6388\u6743\u83dc\u5355URL\u5217\u8868\n    List<String> list = BaseUtil.getList(key);\n    // \u5224\u65ad\u5f53\u524d\u521d\u59cb\u5316URL\u662f\u5426\u5728\u672a\u6388\u6743\u83dc\u5355URL\u5217\u8868\u4e2d\n    return list.contains(AdminConst.INIT_AUTH_URL);\n}", "CodeBleu_score": 39.02887486237008}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    // \u5148\u5220\u9664\u89d2\u8272\u4e0e\u83dc\u5355\u5173\u7cfb\n    removeByMap(new AdminRoleMenu().setRoleId(roleId));\n\n    if (menuIdList == null || menuIdList.size() == 0) {\n        return;\n    }\n\n    // \u4fdd\u5b58\u89d2\u8272\u4e0e\u83dc\u5355\u5173\u7cfb\n    List<AdminRoleMenu> list = new ArrayList<>(menuIdList.size());\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n        adminRoleMenu.setMenuId(menuId);\n        adminRoleMenu.setRoleId(roleId);\n        list.add(adminRoleMenu);\n    }\n    saveBatch(list);\n}", "CodeBleu_score": 57.37959647890571}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    // Delete all role-menu associations for the role\n    this.removeByRoleId(roleId);\n\n    // If no menu IDs were specified, return\n    if (menuIdList.size() == 0) {\n        return;\n    }\n\n    // Create a list of AdminRoleMenu objects, each containing a role ID and a menu ID\n    List<AdminRoleMenu> list = new ArrayList<>(menuIdList.size());\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n        adminRoleMenu.setRoleId(roleId);\n        adminRoleMenu.setMenuId(menuId);\n        list.add(adminRoleMenu);\n    }\n\n    // Save the list of role-menu associations in batches\n    this.saveBatch(list);\n}", "CodeBleu_score": 57.968807365993854}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    // \u5220\u9664\u89d2\u8272\u83dc\u5355\u5173\u7cfb\n    deleteBatch(new QueryWrapper<AdminRoleMenu>().eq(\"role_id\", roleId));\n\n    if (menuIdList.size() == 0) {\n        return;\n    }\n\n    // \u4fdd\u5b58\u89d2\u8272\u4e0e\u83dc\u5355\u5173\u7cfb\n    List<AdminRoleMenu> list = new ArrayList<>(menuIdList.size());\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n        adminRoleMenu.setRoleId(roleId);\n        adminRoleMenu.setMenuId(menuId);\n        list.add(adminRoleMenu);\n    }\n    saveBatch(list);\n}", "CodeBleu_score": 55.07234838254922}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\t    String index = getSysLogIndex();\n    Map<String, Object> map = BeanUtil.beanToMap(sysLog);\n    map.remove(\"id\");\n    map.put(\"createTime\", DateUtil.format(sysLog.getCreateTime(), \"yyyy-MM-dd HH:mm:ss\"));\n    IndexRequest request = new IndexRequest(index).source(map, XContentType.JSON);\n    try {\n        IndexResponse response = client.index(request, RequestOptions.DEFAULT);\n    } catch (IOException e) {\n        log.error(\"\u4fdd\u5b58\u65e5\u5fd7\u5931\u8d25\", e);\n    }\n}", "CodeBleu_score": 51.64135462147905}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t    String indexName = getSysLogIndex();\n    Map<String, Object> map = BeanUtil.beanToMap(sysLog);\n    map.put(\"createTime\", DateUtil.format(sysLog.getCreateTime(), \"yyyy-MM-dd HH:mm:ss\"));\n    map.remove(\"id\");\n    IndexRequest request = new IndexRequest(indexName);\n    request.source(map, XContentType.JSON);\n    try {\n        IndexResponse response = restHighLevelClient.index(request, RequestOptions.DEFAULT);\n        log.info(\"\u4fdd\u5b58\u65e5\u5fd7\u6210\u529f,id:{}\", response.getId());\n    } catch (IOException e) {\n        log.error(\"\u4fdd\u5b58\u65e5\u5fd7\u5931\u8d25\", e);\n    }\n}", "CodeBleu_score": 53.36964329325773}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t    if (restHighLevelClient == null) {\n        return;\n    }\n    String indexName = \"syslog-\" + LocalDate.now().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));\n    Map<String, Object> map = BeanUtil.beanToMap(sysLog);\n    map.put(\"createTime\", DateUtil.format(sysLog.getCreateTime(), \"yyyy-MM-dd HH:mm:ss\"));\n    map.remove(\"id\");\n    IndexRequest indexRequest = new IndexRequest(indexName);\n    indexRequest.source(map, XContentType.JSON);\n    try {\n        IndexResponse indexResponse = restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n        log.info(\"ES\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u6210\u529f,id:{}\", indexResponse.getId());\n    } catch (IOException e) {\n        log.error(\"ES\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5931\u8d25\", e);\n    }\n}", "CodeBleu_score": 52.88073077999823}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t    //\u521d\u59cb\u5316\u67e5\u8be2\u6761\u4ef6\n    BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n    if (StrUtil.isNotBlank(querySysLogBO.getKeyword())) {\n        boolQueryBuilder.must(QueryBuilders.matchQuery(\"keyword\", querySysLogBO.getKeyword()));\n    }\n    if (querySysLogBO.getStartTime() != null) {\n        boolQueryBuilder.must(QueryBuilders.rangeQuery(\"createTime\").gte(querySysLogBO.getStartTime()));\n    }\n    if (querySysLogBO.getEndTime() != null) {\n        boolQueryBuilder.must(QueryBuilders.rangeQuery(\"createTime\").lte(querySysLogBO.getEndTime()));\n    }\n    if (querySysLogBO.getUserId() != null) {\n        boolQueryBuilder.must(QueryBuilders.termQuery(\"userId\", querySysLogBO.getUserId()));\n    }\n    if (querySysLogBO.getStatus() != null) {\n        boolQueryBuilder.must(QueryBuilders.termQuery(\"status\", querySysLogBO.getStatus()));\n    }\n    if (querySysLogBO.getType() != null) {\n        boolQueryBuilder.must(QueryBuilders.termQuery(\"type\", querySysLogBO.getType()));\n    }\n    if (querySysLogBO.getModule() != null) {\n        boolQueryBuilder.must(QueryBuilders.termQuery(\"module\", querySysLogBO.getModule()));\n    }\n    if (querySysLogBO.getModuleId() != null) {\n        boolQueryBuilder.must(QueryBuilders.termQuery(\"moduleId\", querySysLogBO.getModuleId()));\n    }\n    //\u6392\u5e8f\n    SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n    searchSourceBuilder.sort(\"createTime\", SortOrder.DESC);\n    searchSourceBuilder.query(boolQueryBuilder);\n    //\u6392\u9664\u5b57\u6bb5\n    searchSourceBuilder.fetchSource(new String[]{\"id\", \"createTime\", \"userId\", \"status\", \"type\", \"module\",", "CodeBleu_score": 28.308316824488706}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t    SearchRequest searchRequest = new SearchRequest();\n    SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n    //\u521d\u59cb\u5316\u67e5\u8be2\u6761\u4ef6\n    BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n    if (StrUtil.isNotBlank(querySysLogBO.getUserName())) {\n        boolQueryBuilder.must(QueryBuilders.termQuery(\"userName\", querySysLogBO.getUserName()));\n    }\n    if (StrUtil.isNotBlank(querySysLogBO.getModule())) {\n        boolQueryBuilder.must(QueryBuilders.termQuery(\"module\", querySysLogBO.getModule()));\n    }\n    if (StrUtil.isNotBlank(querySysLogBO.getOperation())) {\n        boolQueryBuilder.must(QueryBuilders.termQuery(\"operation\", querySysLogBO.getOperation()));\n    }\n    if (StrUtil.isNotBlank(querySysLogBO.getContent())) {\n        boolQueryBuilder.must(QueryBuilders.matchQuery(\"content\", querySysLogBO.getContent()));\n    }\n    if (StrUtil.isNotBlank(querySysLogBO.getStartTime())) {\n        boolQueryBuilder.must(QueryBuilders.rangeQuery(\"createTime\").gte(querySysLogBO.getStartTime()));\n    }\n    if (StrUtil.isNotBlank(querySysLogBO.getEndTime())) {\n        boolQueryBuilder.must(QueryBuilders.rangeQuery(\"createTime\").lte(querySysLogBO.getEndTime()));\n    }\n    searchSourceBuilder.query(boolQueryBuilder);\n    //\u6392\u5e8f\n    searchSourceBuilder.sort(\"createTime\", SortOrder.DESC);\n    //\u6392\u9664\u5b57\u6bb5\n    searchSourceBuilder.fetchSource(new String[]{\"userName\", \"module\", \"operation\", \"content\", \"createTime\"}, new String[]{});\n    searchRequest.source(searchSourceBuilder);\n    //\u6267\u884c\u67e5\u8be2\n    SearchResponse searchResponse = null;\n    try {\n        searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n    } catch (IOException e) {\n        log.error(\"\u67e5\u8be2", "CodeBleu_score": 40.895010517287965}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t    SearchRequest searchRequest = new SearchRequest();\n    SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n    searchSourceBuilder.query(QueryBuilders.boolQuery()\n            .must(QueryBuilders.termQuery(\"type\", querySysLogBO.getType()))\n            .must(QueryBuilders.termQuery(\"module\", querySysLogBO.getModule())));\n    if (querySysLogBO.getStartTime() != null && querySysLogBO.getEndTime() != null) {\n        searchSourceBuilder.query(QueryBuilders.rangeQuery(\"createTime\")\n                .gte(querySysLogBO.getStartTime())\n                .lte(querySysLogBO.getEndTime()));\n    }\n    searchSourceBuilder.sort(\"createTime\", SortOrder.DESC);\n    searchSourceBuilder.fetchSource(new String[]{\"id\", \"createTime\", \"createUser\", \"content\", \"ip\"}, null);\n    searchRequest.source(searchSourceBuilder);\n    SearchResponse searchResponse;\n    try {\n        searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n    } catch (IOException e) {\n        log.error(\"ES\u67e5\u8be2\u65e5\u5fd7\u5f02\u5e38\", e);\n        return new BasePage<>();\n    }\n    SearchHits hits = searchResponse.getHits();\n    List<SysLog> sysLogs = new ArrayList<>();\n    for (SearchHit hit : hits) {\n        Map<String, Object> sourceAsMap = hit.getSourceAsMap();\n        SysLog sysLog = new SysLog();\n        sysLog.setId(Long.parseLong(hit.getId()));\n        sysLog.setCreateTime(DateUtil.parse(sourceAsMap.get(\"createTime\").toString()));\n        sysLog.setContent(sourceAsMap.get(\"content\").toString());\n        sysLog.setIp(sourceAsMap.get(\"ip\").toString());\n        sysLog.setCreateUser(Long.parseLong(sourceAsMap.get(\"createUser\").toString()));\n        sysLogs.add(sysLog);\n    }\n    BasePage<SysLog> basePage = new BasePage<>();\n    basePage.set", "CodeBleu_score": 53.01994261194151}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\t  const file = fs.createWriteStream(dest);\n  const response = await axios({\n    url,\n    method: 'GET',\n    responseType: 'stream',\n  });\n  response.data.pipe(file);\n\n  return new Promise((resolve, reject) => {\n    file.on('finish', () => {\n      file.close();\n      resolve();\n    });\n    file.on('error', (err) => {\n      fs.unlinkSync(dest);\n      reject(err);\n    });\n  });\n}", "CodeBleu_score": 51.19508717011287}, {"code": "async function downloadFile(url, dest){\n\t  const file = fs.createWriteStream(dest);\n  const response = await axios({\n    url,\n    method: 'GET',\n    responseType: 'stream',\n  });\n  response.data.pipe(file);\n  return new Promise((resolve, reject) => {\n    file.on('finish', () => {\n      file.close();\n      resolve();\n    });\n    file.on('error', (err) => {\n      fs.unlinkSync(dest);\n      reject(err);\n    });\n  });\n}", "CodeBleu_score": 51.19508717011287}, {"code": "async function downloadFile(url, dest){\n\t  const file = fs.createWriteStream(dest);\n  const response = await axios({\n    url,\n    method: 'GET',\n    responseType: 'stream',\n  });\n\n  response.data.pipe(file);\n\n  return new Promise((resolve, reject) => {\n    file.on('finish', () => {\n      file.close();\n      resolve();\n    });\n    file.on('error', (err) => {\n      // Delete the file if it exists and reject the promise\n      fs.unlink(dest, () => {\n        reject(err);\n      });\n    });\n  });\n}", "CodeBleu_score": 50.34490196039656}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t    Set<String> processedModuleIds = Sets.newHashSet();\n    return getDependentModulesFromDsl(module.getDsl())\n            .stream()\n            .filter(dependentModuleId -> !circularDependencyCheckSet.contains(dependentModuleId))\n            .map(dependentModuleId -> {\n                if (processedModuleIds.contains(dependentModuleId)) {\n                    log.warn(\"Circular dependency found for module {}\", module.getId());\n                    return Mono.empty();\n                }\n                processedModuleIds.add(dependentModuleId);\n                circularDependencyCheckSet.add(dependentModuleId);\n                return applicationRepository.findById(dependentModuleId);\n            })\n            .flatMap(moduleMono -> moduleMono.flatMap(dependentModule -> getDependentModules(dependentModule, circularDependencyCheckSet)));\n}", "CodeBleu_score": 47.45668537412726}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t    return Flux.fromIterable(getDependentModulesFromDsl(module.getDsl()))\n            .flatMap(moduleId -> {\n                if (circularDependencyCheckSet.contains(moduleId)) {\n                    log.warn(\"Circular dependency detected for module: {}\", moduleId);\n                    return Mono.empty();\n                }\n                circularDependencyCheckSet.add(moduleId);\n                return applicationRepository.findById(moduleId)\n                        .flatMap(dependentModule -> getDependentModules(dependentModule, circularDependencyCheckSet));\n            });\n}", "CodeBleu_score": 48.035927512867474}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t    List<String> dependentModules = getDependentModulesFromDsl(module.getDsl());\n    return Flux.fromIterable(dependentModules).filter(id -> !circularDependencyCheckSet.contains(id)).flatMap(id -> applicationRepository.findById(id).switchIfEmpty(Mono.error(new BizException(BizError.APPLICATION_NOT_FOUND, id))).flatMap(m -> getDependentModules(m, circularDependencyCheckSet)));\n}", "CodeBleu_score": 50.36688236958038}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    if (map == null) {\n        return;\n    }\n    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        if (entry.getValue() instanceof Map) {\n            doGetDependentModules((Map<?, ?>) entry.getValue(), dependentModuleIds);\n        } else if (entry.getValue() instanceof List) {\n            for (Object value : (List<?>) entry.getValue()) {\n                if (value instanceof Map) {\n                    doGetDependentModules((Map<?, ?>) value, dependentModuleIds);\n                }\n            }\n        } else if (entry.getKey().equals(\"type\") && entry.getValue().equals(\"module\")) {\n            String appId = getAppId(map);\n            if (StringUtils.isNotBlank(appId)) {\n                dependentModuleIds.add(appId);\n            }\n        }\n    }\n}", "CodeBleu_score": 45.64890698057106}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    if (map == null) {\n        return;\n    }\n    if (map.containsKey(\"componentType\") && StringUtils.equals(map.get(\"componentType\"), \"module\")) {\n        String appId = (String) map.get(\"appId\");\n        if (StringUtils.isNotBlank(appId)) {\n            dependentModuleIds.add(appId);\n        }\n    }\n    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        if (entry.getValue() instanceof Map) {\n            doGetDependentModules((Map<?, ?>) entry.getValue(), dependentModuleIds);\n        } else if (entry.getValue() instanceof List) {\n            for (Object value : (List<?>) entry.getValue()) {\n                if (value instanceof Map) {\n                    doGetDependentModules((Map<?, ?>) value, dependentModuleIds);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 49.716772675371914}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    if (map != null) {\n        for (Map.Entry<?, ?> entry : map.entrySet()) {\n            if (entry.getValue() instanceof Map) {\n                doGetDependentModules((Map<?, ?>) entry.getValue(), dependentModuleIds);\n            } else if (entry.getValue() instanceof List) {\n                for (Object obj : (List<?>) entry.getValue()) {\n                    if (obj instanceof Map) {\n                        doGetDependentModules((Map<?, ?>) obj, dependentModuleIds);\n                    }\n                }\n            } else if (entry.getKey().equals(\"componentType\") && entry.getValue().equals(\"module\")) {\n                if (map.get(\"appId\") instanceof String) {\n                    String appId = (String) map.get(\"appId\");\n                    if (StringUtils.isNotBlank(appId)) {\n                        dependentModuleIds.add(appId);\n                    }\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 48.49046285989338}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t    // Read image data\n    BufferedImage image = ImageIO.read(new ByteArrayInputStream(dataBuffer.asByteBuffer().array()));\n\n    // Resize image if createThumbnail flag is true\n    if (createThumbnail) {\n        int width = Conf.get().getAsset().getThumbnailWidth();\n        int height = Conf.get().getAsset().getThumbnailHeight();\n        Image thumbnail = image.getScaledInstance(width, height, Image.SCALE_SMOOTH);\n        BufferedImage resizedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n        Graphics2D graphics = resizedImage.createGraphics();\n        graphics.drawImage(thumbnail, 0, 0, null);\n        graphics.dispose();\n        image = resizedImage;\n    }\n\n    // Convert image to byte array\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    ImageIO.write(image, \"jpeg\", outputStream);\n    byte[] imageData = outputStream.toByteArray();\n\n    // Set content type to JPEG if creating a thumbnail, otherwise retain original content type\n    MediaType contentType = createThumbnail ? MediaType.IMAGE_JPEG : srcContentType;\n\n    // Release DataBuffer after processing\n    DataBufferUtils.release(dataBuffer);\n\n    // Return new Asset with processed image data and content type\n    return new Asset(imageData, contentType);\n}", "CodeBleu_score": 41.651507876559535}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t    Image image = ImageIO.read(dataBuffer.asInputStream());\n    int width = image.getWidth(null);\n    int height = image.getHeight(null);\n    if (createThumbnail) {\n        int thumbnailSize = ConfigCenter.getInt(Conf.ASSET_THUMBNAIL_SIZE);\n        if (width > thumbnailSize || height > thumbnailSize) {\n            image = image.getScaledInstance(thumbnailSize, thumbnailSize, Image.SCALE_SMOOTH);\n        }\n    }\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\n    ImageIO.write(image, \"JPEG\", out);\n    return new Asset(out.toByteArray(), createThumbnail ? MediaType.IMAGE_JPEG : srcContentType);\n}", "CodeBleu_score": 36.62374567005299}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t    try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\n        ImageIO.write(ImageIO.read(dataBuffer.asInputStream()), \"jpeg\", out);\n        Image image = ImageIO.read(new ByteArrayInputStream(out.toByteArray()));\n        if (createThumbnail) {\n            image = resizeImage(image, 100, 100);\n        }\n        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n        ImageIO.write(image, \"jpeg\", outputStream);\n        return Asset.builder()\n                .content(outputStream.toByteArray())\n                .contentType(createThumbnail ? MediaType.IMAGE_JPEG : srcContentType)\n                .build();\n    } finally {\n        DataBufferUtils.release(dataBuffer);\n    }\n}", "CodeBleu_score": 41.277569240788054}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return assetService.getAsset(assetId).flatMap(asset -> {\n        exchange.getResponse().setStatusCode(HttpStatus.OK);\n        if (asset.getContentType() != null) {\n            exchange.getResponse().getHeaders().setContentType(MediaType.valueOf(asset.getContentType()));\n        }\n        exchange.getResponse().getHeaders().setCacheControl(\"max-age=31536000\");\n        return exchange.getResponse().writeWith(Flux.just(exchange.getResponse().bufferFactory().wrap(asset.getData())));\n    });\n}", "CodeBleu_score": 38.91033473626924}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return getAssetById(assetId).flatMap(asset -> {\n        ServerHttpResponse response = exchange.getResponse();\n        response.setStatusCode(HttpStatus.OK);\n        if (asset.getContentType() != null) {\n            response.getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n        }\n        return response.writeWith(Flux.just(asset.getDataBuffer()));\n    });\n}", "CodeBleu_score": 51.31690586721401}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return assetService.getAssetById(assetId).flatMap(asset -> {\n        exchange.getResponse().setStatusCode(HttpStatus.OK);\n        if (asset.getContentType() != null) {\n            exchange.getResponse().getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n        }\n        return exchange.getResponse().writeWith(Flux.just(asset.getDataBuffer()));\n    });\n}", "CodeBleu_score": 35.49628609119022}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    return workspaceMode.isSaas() ? Flux.empty() : organizationService.findAllByMode(WorkspaceMode.ENTERPRISE).map(FindAuthConfig::of);\n}", "CodeBleu_score": 13.082545513179285}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    return workspaceMode.isEnterpriseMode() ? findAllAuthConfigs() : Flux.empty();\n}", "CodeBleu_score": 11.367228152862307}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    if (commonConfig.getWorkspaceMode() == WorkspaceMode.SAAS) {\n        return Flux.empty();\n    }\n    return organizationService.findAllByMode(WorkspaceMode.ENTERPRISE).map(organization -> {\n        return organization.getAuthConfigs().stream().map(authConfig -> {\n            return new FindAuthConfig(authConfig.getAuthSource(), authConfig.getAuthSourceName(), authConfig.getAuthSourceIconUrl());\n        }).collect(Collectors.toList());\n    }).flatMapMany(Flux::fromIterable);\n}", "CodeBleu_score": 39.1656631385567}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    return MongockSpring5.builder()\n        .setDriver(SpringDataMongoV3Driver.withDefaultLock(mongoTemplate))\n        .setApplicationContext(springContext)\n        .setLockQuickConfig(true)\n        .setMigrationScanPackage(\"com.openblocks.domain.migration\")\n        .build();\n}", "CodeBleu_score": 23.588379582910115}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    return MongockSpring5.builder()\n            .setDriver(SpringDataMongoV3Driver.withDefaultLock(mongoTemplate))\n            .setLockQuickConfig()\n            .setContext(springContext)\n            .setChangeLogsScanPackage(HasIdAndAuditing.class.getPackageName())\n            .build();\n}", "CodeBleu_score": 22.448265056651216}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    return MongockSpring5.builder()\n        .setDriver(SpringDataMongoV3Driver.withDefaultLock(mongoTemplate))\n        .setLockQuickConfig()\n        .setApplicationContext(springContext)\n        .setMigrationScanPackage(\"com.openblocks.domain\")\n        .build();\n}", "CodeBleu_score": 22.98490052374923}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t        ReactiveMongoTemplate mongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        mongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n        return mongoTemplate;\n    }", "CodeBleu_score": 95.78632722296167}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t        ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n        return reactiveMongoTemplate;\n    }", "CodeBleu_score": 75.7466843048766}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t        ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n        return reactiveMongoTemplate;\n    }", "CodeBleu_score": 75.7466843048766}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return libraryQueryRepository.findLatestRecordByLibraryQueryId(libraryQueryId).flatMap(libraryQueryRecord -> {\n        if (libraryQueryRecord.getDsl() != null) {\n            return Mono.just(libraryQueryRecord.getDsl());\n        }\n        return libraryQueryRepository.findById(libraryQueryId).flatMap(libraryQuery -> {\n            if (libraryQuery.getDsl() != null) {\n                return Mono.just(libraryQuery.getDsl());\n            }\n            return deferredError(LIBRARY_QUERY_NOT_FOUND, \"Library query not found\");\n        });\n    });\n}", "CodeBleu_score": 41.91449454993871}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return libraryQueryRepository.findLatestRecordByLibraryQueryId(libraryQueryId).switchIfEmpty(getDSLFromLibraryQuery(libraryQueryId)).map(LibraryQueryRecord::getDsl);\n}", "CodeBleu_score": 36.13847103837162}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return libraryQueryRepository.findLatestByLibraryQueryId(libraryQueryId).switchIfEmpty(libraryQueryRepository.findById(libraryQueryId)).map(LibraryQueryRecord::getDsl).switchIfEmpty(Mono.error(deferredError(LIBRARY_QUERY_NOT_FOUND)));\n}", "CodeBleu_score": 42.20815554448455}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        QueryExecutionContext queryExecutionContext = new QueryExecutionContext(queryConfig, requestParams, queryVisitorContext);\n        Duration timeout = QueryTimeoutUtils.getTimeout(timeoutStr);\n        if (datasource.isNode()) {\n            return executeQueryOnNode(datasource, queryExecutionContext, timeout);\n        } else {\n            return executeQueryLocally(datasource, queryExecutionContext, timeout);\n        }\n    }", "CodeBleu_score": 28.417777734715294}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        Duration timeout = QueryTimeoutUtils.getTimeout(timeoutStr);\n        DatasourceConnectionHolder connectionHolder = DatasourceConnectionPool.getConnection(datasource.getId());\n        if (connectionHolder == null) {\n            return Mono.error(ofException(QUERY_EXECUTION_ERROR, \"Datasource connection not found: \" + datasource.getId()));\n        }\n        DatasourcePluginClient datasourcePluginClient = connectionHolder.getDatasourcePluginClient();\n        if (datasourcePluginClient == null) {\n            return Mono.error(ofException(QUERY_EXECUTION_ERROR, \"Datasource plugin client not found: \" + datasource.getId()));\n        }\n        Mono<QueryExecutionResult> queryExecutionResultMono = datasourcePluginClient.executeQuery(queryConfig, requestParams, timeout);\n        if (QueryTimeoutUtils.isTimeout(timeout)) {\n            return queryExecutionResultMono.timeout(timeout)\n                    .onErrorMap(TimeoutException.class, e -> ofException(QUERY_EXECUTION_TIMEOUT, \"Query execution timeout: \" + timeout));\n        }\n        return queryExecutionResultMono.onErrorResume(PluginException.class, e -> {\n            log.error(\"Query execution error: {}\", e.getMessage(), e);\n            return Mono.just(QueryExecutionResult.error(e.getError()));\n        }).onErrorResume(e -> {\n            log.error(\"Query execution error: {}\", e.getMessage(), e);\n            return Mono.just(QueryExecutionResult.error(QUERY_EXECUTION_ERROR));\n        });\n    }", "CodeBleu_score": 40.106468333892366}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        var timeout = QueryTimeoutUtils.parseTimeout(timeoutStr);\n        var datasourceType = datasource.getDatasourceType();\n        if (DatasourceConnectionPool.isNodeJsDatasource(datasourceType)) {\n            return executeQueryOnNodeJs(datasource, queryConfig, requestParams, timeout, queryVisitorContext);\n        } else {\n            return executeQueryLocally(datasource, queryConfig, requestParams, timeout, queryVisitorContext);\n        }\n    }", "CodeBleu_score": 30.738370207427028}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t    return Mono.fromCallable(() -> {\n        DatasourcePluginClient pluginClient = DatasourceMetaInfoService.getPluginClient(datasource.getType());\n        QueryExecutionContext queryExecutionContext = pluginClient.buildQueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n        DatasourceConnectionHolder connectionHolder = DatasourceConnectionPool.getConnection(datasource.getId());\n        try {\n            return pluginClient.executeQuery(connectionHolder.getConnection(), queryExecutionContext);\n        } catch (Exception e) {\n            log.error(\"query execution failed, datasourceId: {}, query: {}\", datasource.getId(), queryExecutionContext.getQuery(), e);\n            throw ofException(e);\n        } finally {\n            DatasourceConnectionPool.releaseConnection(connectionHolder);\n        }\n    }).onErrorResume(e -> {\n        if (e instanceof BizException) {\n            return Mono.error(e);\n        }\n        if (e instanceof PluginException) {\n            return Mono.error(QUERY_EXECUTION_ERROR.formatErrorMessage(e.getMessage()));\n        }\n        if (e instanceof TimeoutException) {\n            return Mono.error(QUERY_EXECUTION_TIMEOUT.formatErrorMessage());\n        }\n        return Mono.error(ofException(e));\n    });\n}", "CodeBleu_score": 45.93243181583868}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t    DatasourcePluginClient pluginClient = getPluginClient(datasource);\n    QueryExecutionContext queryExecutionContext = QueryExecutionContext.builder().queryConfig(queryConfig).requestParams(requestParams).queryVisitorContext(queryVisitorContext).build();\n    return pluginClient.executeQueryLocally(queryExecutionContext).onErrorMap(ofException(QUERY_EXECUTION_ERROR, \"query execution error\", \"query execution error\"));\n}", "CodeBleu_score": 35.57205026128495}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t    String datasourceType = datasource.getDatasourceType();\n    DatasourcePluginClient queryExecutor = datasourceMetaInfoService.getDatasourcePluginClient(datasourceType);\n    QueryExecutionContext executionContext = new QueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n    Mono<DatasourceConnectionHolder> connectionHolder = datasourceConnectionPool.getConnection(datasource.getId());\n    return connectionHolder.flatMap(holder -> queryExecutor.executeQuery(executionContext, holder.getConnection())).onErrorResume(error -> {\n        log.error(\"Failed to execute query locally for datasource {}, query: {}\", datasource.getId(), queryConfig, error);\n        return Mono.error(ofException(QUERY_EXECUTION_ERROR, error));\n    });\n}", "CodeBleu_score": 49.19607562986416}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t    if (StringUtils.isBlank(timeoutStr)) {\n        return 10000;\n    }\n    Pair<Long, String> pair = parseTimeoutStr(timeoutStr);\n    if (pair.getLeft() == null) {\n        throw new PluginException(QUERY_ARGUMENT_ERROR, renderMustacheString(\"Invalid timeout value: {{timeoutStr}}\", Map.of(\"timeoutStr\", timeoutStr)));\n    }\n    long timeoutMs = pair.getLeft();\n    if (timeoutMs > Duration.ofHours(1).toMillis()) {\n        throw new PluginException(QUERY_ARGUMENT_ERROR, renderMustacheString(\"Timeout value exceeds maximum allowed: {{timeoutStr}}\", Map.of(\"timeoutStr\", timeoutStr)));\n    }\n    return (int) timeoutMs;\n}", "CodeBleu_score": 30.298684418644967}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t    if (StringUtils.isBlank(timeoutStr)) {\n        return 30000;\n    }\n    Pair<Integer, String> pair = extractQueryTimeout(timeoutStr);\n    int value = pair.getLeft();\n    String unit = pair.getRight();\n    if (value == null) {\n        throw new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout: \" + timeoutStr);\n    }\n    if (value < 0) {\n        throw new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout: \" + timeoutStr);\n    }\n    if (value == 0) {\n        return 0;\n    }\n    if (\"ms\".equals(unit)) {\n        return value;\n    }\n    if (\"s\".equals(unit)) {\n        return value * 1000;\n    }\n    if (\"m\".equals(unit)) {\n        return value * 60 * 1000;\n    }\n    if (\"h\".equals(unit)) {\n        return value * 60 * 60 * 1000;\n    }\n    throw new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout: \" + timeoutStr);\n}", "CodeBleu_score": 39.643059066876404}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t    if (StringUtils.isBlank(timeoutStr)) {\n        return 0;\n    }\n    Pair<Long, String> pair = parseQueryTimeout(timeoutStr);\n    long timeout = pair.getLeft();\n    if (timeout > Duration.ofHours(1).toMillis()) {\n        throw new PluginException(EXCEED_MAX_QUERY_TIMEOUT);\n    }\n    return pair.getLeft().intValue();\n}", "CodeBleu_score": 18.80288982044174}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t    return application.getLiveQueries().stream().map(query -> {\n        Set<String> datasourceIds = query.getDatasourceIds();\n        if (datasourceIds.isEmpty()) {\n            return deferredError(TEMPLATE_NOT_CORRECT);\n        }\n        return Flux.fromIterable(datasourceIds).flatMap(datasourceId -> {\n            Datasource datasource = application.getDatasourceMap().get(datasourceId);\n            if (isNull(datasource)) {\n                return deferredError(TEMPLATE_NOT_CORRECT);\n            }\n            return datasourceService.copyDatasourceToCurrentOrganization(currentOrganizationId, datasource, visitorId);\n        }).collectList().map(datasourceIds::containsAll).flatMap(containsAll -> {\n            if (!containsAll) {\n                return deferredError(TEMPLATE_NOT_CORRECT);\n            }\n            return Mono.just(TupleUtils.toPairs(datasourceIds, datasourceIds));\n        });\n    }).reduce(Mono.just(List.of()), (mono1, mono2) -> mono1.zipWith(mono2, (list1, list2) -> {\n        list1.addAll(list2);\n        return list1;\n    })).flatMap(list -> {\n        if (list.isEmpty()) {\n            return deferredError(TEMPLATE_NOT_CORRECT);\n        }\n        return Mono.just(list);\n    });\n}", "CodeBleu_score": 43.5805962448632}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t    return Mono.just(application.getLiveQueries())\n            .filter(queries -> !queries.isEmpty())\n            .switchIfEmpty(deferredError(TEMPLATE_NOT_CORRECT, \"template has no queries\"))\n            .map(queries -> queries.stream()\n                    .map(query -> JsonUtils.parseObject(query.getDatasourceId(), String.class))\n                    .collect(Collectors.toSet()))\n            .flatMap(datasourceIds -> Flux.fromIterable(datasourceIds)\n                    .flatMap(datasourceId -> datasourceService.copyDatasource(currentOrganizationId, datasourceId, visitorId))\n                    .collectList()\n                    .map(copiedDatasources -> copiedDatasources.stream()\n                            .map(copiedDatasource -> TupleUtils.of(copiedDatasource.getOriginalDatasourceId(), copiedDatasource.getId()))\n                            .collect(Collectors.toList())))\n            .map(copiedDatasources -> copiedDatasources.stream()\n                    .map(copiedDatasource -> Pair.of(copiedDatasource.getLeft(), copiedDatasource.getRight()))\n                    .collect(Collectors.toList()));\n}", "CodeBleu_score": 34.2307470908711}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t    return Flux.fromIterable(application.getLiveQueries())\n        .flatMap(query -> {\n            List<String> datasourceIds = JsonUtils.parseArray(query.getDatasourceIds(), String.class);\n            return Flux.fromIterable(datasourceIds)\n                .flatMap(datasourceId -> datasourceService.copyDatasource(currentOrganizationId, datasourceId, visitorId))\n                .collectList()\n                .map(copiedDatasources -> TupleUtils.toPairList(datasourceIds, copiedDatasources.stream().map(Datasource::getId).collect(Collectors.toList())));\n        })\n        .collectList()\n        .flatMap(list -> {\n            if (list.isEmpty()) {\n                return Mono.error(ofError(TEMPLATE_NOT_CORRECT));\n            }\n            return Mono.just(list.stream().flatMap(Collection::stream).collect(Collectors.toList()));\n        });\n}", "CodeBleu_score": 47.306580116692}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return Mono.defer(() -> datasourceService.getDatasource(datasourceId)).flatMap(datasource -> {\n        if (datasource.getCreationSource() == DatasourceCreationSource.SYSTEM_STATIC) {\n            return Mono.just(datasource.getId());\n        } else if (datasource.getCreationSource() == DatasourceCreationSource.LEGACY_REST_API\n                || datasource.getCreationSource() == DatasourceCreationSource.LEGACY_OPENBLOCKS_API) {\n            return Mono.just(datasource.getNewId());\n        } else {\n            return datasourceService.createDatasource(organizationId, visitorId, datasource.getDatasourceType(), datasource.getDatasourceConfig(), datasource.getDatasourceMeta(), datasource.getDatasourceName(), datasource.getDatasourceDescription(), datasource.getDatasourceVersion(), datasource.getDatasourceSource(), datasource.getDatasourceStatus(), datasource.getDatasourceCreationSource());\n        }\n    });\n}", "CodeBleu_score": 47.84785158255226}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return Mono.just(datasourceId).flatMap(id -> datasourceService.getDatasourceById(id).cast(Datasource.class).switchIfEmpty(Mono.error(ofError(TEMPLATE_NOT_EXIST, \"datasourceId\", datasourceId))).flatMap(datasource -> {\n        if (datasource.getCreationSource() == DatasourceCreationSource.SYSTEM_STATIC) {\n            return Mono.just(datasource.getId());\n        }\n        if (datasource.getCreationSource() == DatasourceCreationSource.LEGACY_QUICK_REST_API) {\n            return Mono.just(datasource.getNewId());\n        }\n        if (datasource.getCreationSource() == DatasourceCreationSource.LEGACY_OPENBLOCKS_API) {\n            return Mono.just(datasource.getNewId());\n        }\n        return datasourceService.createDatasource(organizationId, datasource.getType(), datasource.getConfig(), visitorId).cast(Datasource.class).map(Datasource::getId);\n    }));\n}", "CodeBleu_score": 53.05628192588274}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceService.findById(datasourceId).flatMap(datasource -> {\n        if (datasource.getCreationSource() == DatasourceCreationSource.SYSTEM_STATIC) {\n            return Mono.just(datasourceId);\n        }\n        if (datasource.getCreationSource() == DatasourceCreationSource.LEGACY_REST_API) {\n            return Mono.just(datasource.getNewDatasourceId());\n        }\n        if (datasource.getCreationSource() == DatasourceCreationSource.LEGACY_OPENBLOCKS_API) {\n            return Mono.just(datasource.getNewDatasourceId());\n        }\n        return datasourceService.createDatasource(organizationId, visitorId, datasource);\n    });\n}", "CodeBleu_score": 57.06660314326086}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t    return assetService.upload(filePart, user.getUserId(), Asset.Type.USER_AVATAR)\n        .flatMap(asset -> {\n            if (user.getAvatar() != null) {\n                return assetService.delete(user.getAvatar().getAssetId())\n                    .then(Mono.just(asset));\n            }\n            return Mono.just(asset);\n        })\n        .map(asset -> {\n            user.setAvatar(new Asset(asset.getAssetId(), asset.getUrl()));\n            return true;\n        });\n}", "CodeBleu_score": 31.900036780536233}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t        return assetService.uploadFile(filePart, user.getUserId(), \"avatar\")\n                .flatMap(asset -> {\n                    if (user.getAvatar() != null) {\n                        return assetService.deleteAsset(user.getAvatar(), user.getUserId())\n                                .thenReturn(asset);\n                    }\n                    return Mono.just(asset);\n                })\n                .flatMap(asset -> {\n                    user.setAvatar(asset.getAssetId());\n                    return userRepository.save(user);\n                })\n                .thenReturn(true);\n    }", "CodeBleu_score": 31.35503437254957}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t    return assetService.upload(filePart, user.getUserId())\n        .flatMap(asset -> {\n            if (user.getAvatar() != null) {\n                return assetService.delete(user.getAvatar())\n                    .then(userRepository.updateAvatar(user.getUserId(), asset.getAssetId()));\n            } else {\n                return userRepository.updateAvatar(user.getUserId(), asset.getAssetId());\n            }\n        });\n}", "CodeBleu_score": 26.74736329933443}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    User user = new User();\n    user.setName(authUser.getName());\n    user.setState(UserState.NEW);\n    user.setEnabled(true);\n    if (AuthSourceConstants.EMAIL.equals(authUser.getAuthSource())) {\n        if (authUser.getAuthContext().containsKey(FieldName.PASSWORD)) {\n            user.setPassword(authUser.getAuthContext().get(FieldName.PASSWORD));\n        }\n    }\n    if (authUser.getAvatarUrl() != null) {\n        user.setAvatarUrl(authUser.getAvatarUrl());\n    }\n    user.setConnections(authUser.getConnections());\n    user.setNew(true);\n    return Mono.just(user);\n}", "CodeBleu_score": 46.58001845727621}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    return Mono.just(authUser)\n        .flatMap(user -> {\n            User newUser = new User();\n            newUser.setName(user.getName());\n            newUser.setState(UserState.NEW);\n            newUser.setEnabled(true);\n            newUser.setAvatarLink(user.getAvatarLink());\n            if (AuthSourceConstants.EMAIL.equals(user.getAuthSource()) && user.getAuthContext().containsKey(FieldName.PASSWORD)) {\n                newUser.setEncryptedPassword(EncryptionService.encrypt(user.getAuthContext().get(FieldName.PASSWORD)));\n            }\n            newUser.setConnections(user.getConnections());\n            newUser.setNew(true);\n            return Mono.just(newUser);\n        });\n}", "CodeBleu_score": 47.687104588575515}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    return Mono.just(authUser)\n            .map(user -> {\n                User newUser = new User();\n                newUser.setName(user.getName());\n                newUser.setState(UserState.NEW);\n                newUser.setEnabled(true);\n                newUser.setAvatarLink(user.getAvatarLink());\n                if (AuthSourceConstants.EMAIL.equals(user.getAuthSource()) && Objects.nonNull(user.getAuthContext().get(FieldName.PASSWORD))) {\n                    String encryptedPassword = EncryptionService.encrypt(user.getAuthContext().get(FieldName.PASSWORD).toString());\n                    newUser.setPassword(encryptedPassword);\n                }\n                newUser.setConnections(user.getConnections());\n                newUser.setNew(true);\n                return newUser;\n            });\n}", "CodeBleu_score": 59.31617876680255}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return Mono.just(user).flatMap(u -> {\n        if (u.getConnections().stream().anyMatch(c -> c.getSource().equals(AuthSourceConstants.EMAIL))) {\n            return Mono.error(ofException(BizError.USER_EMAIL_EXIST));\n        }\n        Connection connection = new Connection();\n        connection.setSource(AuthSourceConstants.EMAIL);\n        connection.setSourceId(email);\n        connection.setUserId(u.getId());\n        connection.setVerified(true);\n        u.getConnections().add(connection);\n        return userRepository.save(u).map(u1 -> true);\n    }).onErrorResume(DuplicateKeyException.class, e -> Mono.error(ofException(BizError.USER_EMAIL_EXIST)));\n}", "CodeBleu_score": 39.453925700122774}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return Mono.just(user).flatMap(u -> {\n        Connection connection = new Connection();\n        connection.setSource(AuthSourceConstants.EMAIL);\n        connection.setEmail(email);\n        u.getConnections().add(connection);\n        return userRepository.save(u);\n    }).then(Mono.just(true)).onErrorResume(DuplicateKeyException.class, e -> Mono.just(false)).onErrorResume(e -> Mono.error(e));\n}", "CodeBleu_score": 34.25151360106222}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return Mono.fromCallable(() -> {\n        if (StringUtils.isBlank(email)) {\n            return true;\n        }\n        Connection connection = Connection.builder().source(AuthSourceConstants.EMAIL).identity(email).build();\n        user.getConnections().add(connection);\n        userRepository.save(user);\n        return true;\n    })\n            .onErrorResume(DuplicateKeyException.class, e -> Mono.just(false))\n            .onErrorResume(e -> Mono.error(ofException(BizError.USER_BIND_EMAIL_FAILED, e)));\n}", "CodeBleu_score": 47.351536996442746}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    // TODO: Implement updatePassword function\n    return Mono.just(true);\n}", "CodeBleu_score": 6.726345812823778}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return Mono.fromSupplier(() -> {\n        User user = userRepository.findById(userId).orElseThrow(() -> ofException(BizError.USER_NOT_EXISTS));\n        if (!encryptionService.validatePassword(oldPassword, user.getPassword())) {\n            throw ofError(BizError.INVALID_PASSWORD);\n        }\n        user.setPassword(encryptionService.encryptPassword(newPassword));\n        userRepository.save(user);\n        return true;\n    });\n}", "CodeBleu_score": 30.110117801552967}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return userRepository.findById(userId)\n            .flatMap(user -> {\n                if (user.getState() == UserState.DELETED) {\n                    return Mono.error(ofException(BizError.USER_DELETED));\n                }\n                if (!user.getPassword().equals(encryptionService.encrypt(oldPassword))) {\n                    return Mono.error(ofException(BizError.INVALID_PASSWORD));\n                }\n                user.setPassword(encryptionService.encrypt(newPassword));\n                return userRepository.save(user);\n            })\n            .map(user -> true)\n            .onErrorMap(error -> {\n                if (error instanceof BizException) {\n                    return error;\n                }\n                return ofException(BizError.UNKNOWN_ERROR);\n            });\n}", "CodeBleu_score": 42.56486498030048}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t    if (orgMember.isAdmin()) {\n        return groupService.findAllGroups(orgMember.getOrgId()).map(group -> {\n            Map<String, String> groupMap = new HashMap<>();\n            groupMap.put(FieldName.ID, group.getId());\n            groupMap.put(FieldName.NAME, group.getName());\n            return groupMap;\n        }).collectList();\n    }\n    if (withoutDynamicGroups) {\n        return groupService.findAllGroups(orgMember.getOrgId()).filter(group -> !group.isDynamic()).map(group -> {\n            Map<String, String> groupMap = new HashMap<>();\n            groupMap.put(FieldName.ID, group.getId());\n            groupMap.put(FieldName.NAME, group.getName());\n            return groupMap;\n        }).collectList();\n    }\n    return groupMemberService.findAllGroups(userId, orgMember.getOrgId()).filter(group -> !group.isDynamic()).map(group -> {\n        Map<String, String> groupMap = new HashMap<>();\n        groupMap.put(FieldName.ID, group.getId());\n        groupMap.put(FieldName.NAME, group.getName());\n        return groupMap;\n    }).collectList();\n}", "CodeBleu_score": 31.580789991081282}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t    if (orgMember.isAdmin()) {\n        return groupService.listGroups(orgMember.getOrgId()).map(groups -> groups.stream().filter(group -> !group.isAllUsers()).map(group -> {\n            Map<String, String> groupMap = new HashMap<>();\n            groupMap.put(FieldName.ID, group.getId());\n            groupMap.put(FieldName.NAME, group.getLocalizedName(locale));\n            return groupMap;\n        }).collect(Collectors.toList()));\n    }\n    if (withoutDynamicGroups) {\n        return groupService.listGroups(orgMember.getOrgId()).map(groups -> groups.stream().filter(group -> !group.isAllUsers() && !group.isDynamic()).map(group -> {\n            Map<String, String> groupMap = new HashMap<>();\n            groupMap.put(FieldName.ID, group.getId());\n            groupMap.put(FieldName.NAME, group.getLocalizedName(locale));\n            return groupMap;\n        }).collect(Collectors.toList()));\n    }\n    return groupService.listGroups(orgMember.getOrgId()).map(groups -> groups.stream().filter(group -> !group.isAllUsers()).map(group -> {\n        Map<String, String> groupMap = new HashMap<>();\n        groupMap.put(FieldName.ID, group.getId());\n        groupMap.put(FieldName.NAME, group.getLocalizedName(locale));\n        return groupMap;\n    }).collect(Collectors.toList()));\n}", "CodeBleu_score": 35.31440615856373}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t    return groupMemberService.getGroupsByUserId(userId, orgMember.getOrgId(), withoutDynamicGroups).map(groups -> groups.stream()\n            .filter(group -> !group.isAllUsersGroup()).map(group -> Map.of(FieldName.ID, group.getId(), FieldName.NAME, group.getName(locale)))\n            .collect(Collectors.toList()));\n}", "CodeBleu_score": 20.625786141268605}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    UserStatus userStatus = UserStatus.builder()\n            .userId(userId)\n            .hasShowNewUserGuidance(true)\n            .build();\n    return mongoUpsertHelper.upsert(userStatus, UserStatus.class, UserStatus::getUserId, userId);\n}", "CodeBleu_score": 74.21042290027005}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    return Mono.just(UserStatus.builder()\n            .userId(userId)\n            .hasShowNewUserGuidance(true)\n            .build())\n        .flatMap(userStatus -> mongoUpsertHelper.upsert(userStatus, UserStatus.class, UserStatus::getUserId, UserStatus::getUserId, Update::set));\n}", "CodeBleu_score": 35.698246757395026}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    return Mono.fromCallable(() -> {\n        UserStatus userStatus = new UserStatus();\n        userStatus.setUserId(userId);\n        userStatus.setHasShowNewUserGuidance(true);\n        return userStatus;\n    })\n        .flatMap(userStatus -> mongoUpsertHelper.upsert(userStatus, UserStatus.class, Update.update(\"userId\", userId), UserStatus.class));\n}", "CodeBleu_score": 37.137418246489986}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition must not be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue must not be nil\")\n\t}\n\n\twg := rungroup.New(context.Background(), rungroup.NoCancel)\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.Name(), p) {\n\t\t\twg.Go(func(ctx context.Context) error {\n\t\t\t\tloggers.From(ctx).WithPrefix(\"cache\").Infof(\"clearing partition %q\", p.Name())\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t\treturn nil\n\t\t\t})\n\t\t}\n\t}\n\twg.Wait()\n}", "CodeBleu_score": 43.7060194104144}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition is nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue is nil\")\n\t}\n\n\tr := rungroup.New(context.Background())\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.Name(), p) {\n\t\t\tr.Go(func() error {\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t\treturn nil\n\t\t\t})\n\t\t}\n\t}\n\tr.Wait()\n}", "CodeBleu_score": 37.6514650304051}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition must not be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue must not be nil\")\n\t}\n\n\trungroup.New(context.Background(), rungroup.Options{\n\t\tConcurrency: runtime.NumCPU(),\n\t\tLogger:      loggers.NewDefaultLogger(),\n\t}).Go(func(ctx context.Context) error {\n\t\tfor _, p := range c.partitions {\n\t\t\tif predicatePartition(p.Name(), p) {\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t})\n}", "CodeBleu_score": 42.69927311779652}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\tavgWeightPerPartition := totalWeightQuantity / numPartitions\n\n\treturn int(math.Ceil(float64(maxItemsTotal) / float64(avgWeightPerPartition)))\n}", "CodeBleu_score": 40.73474307869124}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\tavgWeightPerPartition := totalWeightQuantity / numPartitions\n\n\treturn int(math.Ceil(float64(maxItemsTotal) / float64(avgWeightPerPartition)))\n}", "CodeBleu_score": 40.73474307869124}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\tavgWeightPerPartition := totalWeightQuantity / numPartitions\n\treturn int(math.Ceil(float64(maxItemsTotal) / float64(avgWeightPerPartition)))\n}", "CodeBleu_score": 40.73474307869124}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\t    ConnectionFactory connectionFactory = null;\n    Connection connection = null;\n    ConnectionMetadata connectionMetadata = null;\n    Map<String, Object> map = new HashMap<String, Object>();\n    try {\n        connection = connectionFactory.create().block();\n        connectionMetadata = connection.getMetadata();\n        if (Objects.nonNull(connectionMetadata)) {\n            map.put(\"databaseProductName\", connectionMetadata.getDatabaseProductName());\n            map.put(\"databaseProductVersion\", connectionMetadata.getDatabaseProductVersion());\n        }\n    } finally {\n        if (Objects.nonNull(connection)) {\n            connection.close().block();\n        }\n    }\n    return map;\n}", "CodeBleu_score": 47.35985638516341}, {"code": "public Map<String, Object> contributorMap(){\n\t    ConnectionFactory connectionFactory = ConnectionFactory.from(ConnectionFactory.ConnectionFactoryOptions.builder().build());\n    Connection connection = connectionFactory.create().block();\n    ConnectionMetadata metadata = connection.getMetadata();\n    if (metadata != null) {\n        Map<String, Object> map = new HashMap<>();\n        map.put(\"database.product.name\", metadata.getProductName());\n        map.put(\"database.product.version\", metadata.getProductVersion());\n        return map;\n    }\n    return new HashMap<>();\n}", "CodeBleu_score": 46.89443804620594}, {"code": "public Map<String, Object> contributorMap(){\n\t    ConnectionFactory connectionFactory = null;\n    Connection connection = null;\n    ConnectionMetadata metadata = null;\n    Map<String, Object> map = new HashMap<>();\n    if (Objects.nonNull(connectionFactory)) {\n        connection = connectionFactory.create().block();\n        metadata = connection.getMetadata();\n    }\n    if (Objects.nonNull(metadata)) {\n        map.put(\"product\", metadata.getProduct());\n        map.put(\"version\", metadata.getVersion());\n    }\n    return map;\n}", "CodeBleu_score": 45.108053836851056}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    User user = configMap.getOrDefault(User.KEY, User.DEFAULT);\n    if (user.isNull()) {\n        info.setDisableRegistration(true);\n        info.setDisableEmailVerification(true);\n        return;\n    }\n    info.setDisableRegistration(user.isDisableRegistration());\n    info.setDisableEmailVerification(user.isDisableEmailVerification());\n}", "CodeBleu_score": 39.69535548453564}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    User user = configMap.getData().getUser();\n    if (user == null) {\n        info.setDisableRegistration(true);\n        info.setDisableEmailVerification(true);\n        return;\n    }\n    info.setDisableRegistration(!isTrue(user.getEnable()));\n    info.setDisableEmailVerification(!isTrue(user.getEnableEmailVerification()));\n}", "CodeBleu_score": 35.81295078265532}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    User user = configMap.getUser();\n    if (user == null) {\n        info.setDisableRegistration(true);\n        info.setDisableEmailVerification(true);\n        return;\n    }\n    info.setDisableRegistration(user.getDisableRegistration());\n    info.setDisableEmailVerification(user.getDisableEmailVerification());\n}", "CodeBleu_score": 32.76456862498001}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\t    ThreadGroup threadGroup = new ThreadGroup(\"restart\");\n    Thread thread = new Thread(threadGroup, () -> {\n        try {\n            ApplicationContext context = Application.getApplicationContext();\n            ConfigurableApplicationContext configurableApplicationContext = (ConfigurableApplicationContext) context;\n            configurableApplicationContext.close();\n            configurableApplicationContext.start();\n        } catch (Exception e) {\n            log.error(\"Restart failed\", e);\n        }\n    }, \"restart\");\n    thread.setContextClassLoader(Application.class.getClassLoader());\n    thread.setDaemon(false);\n    thread.start();\n    return Collections.singletonMap(\"message\", \"restart has begun\");\n}", "CodeBleu_score": 52.06045300667117}, {"code": "public Object restart(){\n\t    ApplicationContext applicationContext = Application.getApplicationContext();\n    ConfigurableApplicationContext configurableApplicationContext = (ConfigurableApplicationContext) applicationContext;\n    ThreadGroup threadGroup = new ThreadGroup(\"restart\");\n    Thread thread = new Thread(threadGroup, () -> {\n        try {\n            configurableApplicationContext.close();\n            configurableApplicationContext.start();\n        } catch (Exception e) {\n            log.error(\"Restart failed\", e);\n        }\n    });\n    thread.setContextClassLoader(applicationContext.getClassLoader());\n    thread.setDaemon(false);\n    thread.start();\n    return \"Restarting...\";\n}", "CodeBleu_score": 43.33162578320462}, {"code": "public Object restart(){\n\t    ThreadGroup threadGroup = new ThreadGroup(\"restart-thread-group\");\n    Thread thread = new Thread(threadGroup, () -> {\n        try {\n            ApplicationContext context = Application.getApplicationContext();\n            ConfigurableApplicationContext configurableApplicationContext = (ConfigurableApplicationContext) context;\n            configurableApplicationContext.close();\n            configurableApplicationContext.start();\n        } catch (Exception e) {\n            log.error(\"Failed to restart application\", e);\n        }\n    }, \"restart-thread\");\n    thread.setContextClassLoader(Application.class.getClassLoader());\n    thread.setDaemon(false);\n    thread.start();\n    return \"Restart has begun\";\n}", "CodeBleu_score": 48.26464475140463}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t    List<HttpMessageWriter<?>> messageWriters = configurer.getWriters();\n    List<HttpMessageWriter<?>> messageReaders = configurer.getReaders();\n    ObjectMapper objectMapper = configurer.getDefaultCodecs().getJackson2JsonEncoder().getObjectMapper();\n    messageWriters.add(new Jackson2JsonEncoder(objectMapper));\n    messageReaders.add(new Jackson2JsonDecoder(objectMapper));\n}", "CodeBleu_score": 40.041342399148114}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t    List<HttpMessageWriter<?>> messageWriters = configurer.getWriters();\n    List<HttpMessageWriter<?>> messageReaders = configurer.getReaders();\n    messageWriters.add(new Jackson2JsonEncoder(objectMapper));\n    messageReaders.add(new Jackson2JsonDecoder(objectMapper));\n }", "CodeBleu_score": 40.89720921297546}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t        ObjectMapper objectMapper = new ObjectMapper();\n        configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n        configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n    }", "CodeBleu_score": 52.04673197988888}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t    return route(method(HttpMethod.GET).and(accept(MediaType.TEXT_HTML)).and(path(\"/console/**\").and(path(WebSocketRequestPredicate.WEBSOCKET_PATH).negate())), request -> {\n        // Get the console index file location from the properties\n        String consoleIndexFileLocation = \"/console/index.html\";\n        // Create a ResourceHandlerRegistry to register the console index file location as a resource handler\n        ResourceHandlerRegistry registry = new ResourceHandlerRegistry();\n        // Register the console index file location as a resource handler with a resource handler registration\n        ResourceHandlerRegistration registration = registry.addResourceHandler(consoleIndexFileLocation);\n        // Set the resource location to the console index file location\n        registration.addResourceLocations(consoleIndexFileLocation);\n        // Create a PathResourceResolver to resolve the console index file location\n        PathResourceResolver resolver = new PathResourceResolver();\n        // Resolve the console index file location and get the encoded resource\n        return resolver.resolveResource(request, consoleIndexFileLocation).map(resource -> {\n            // Create an EncodedResourceResolver to resolve the encoded resource\n            EncodedResourceResolver encodedResolver = new EncodedResourceResolver(resolver);\n            // Resolve the encoded resource and get the encoded resource\n            return encodedResolver.resolveResource(request, resource);\n        }).flatMap(encodedResource -> {\n            // Create a ServerResponse with the encoded resource as the body\n            return ServerResponse.ok().contentType(encodedResource.getMediaType()).body(BodyInserters.fromResource(encodedResource));\n        });\n    });\n}", "CodeBleu_score": 30.712527769608567}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t    return route(path(\"/console\").and(accept(MediaType.TEXT_HTML)), request -> {\n        String consoleIndexPath = \"classpath:static/console/index.html\";\n        return ServerResponse.ok().contentType(MediaType.TEXT_HTML).body(BodyInserters.fromResource(consoleIndexPath));\n    });\n}", "CodeBleu_score": 26.622283310056034}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t    return route(path(\"/console\").and(method(HttpMethod.GET)).and(accept(MediaType.TEXT_HTML)), request -> ServerResponse.temporaryRedirect(request.uri().toUri().resolve(\"/console/index.html\")).build());\n}", "CodeBleu_score": 23.275765584748566}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t    return route(path(\"/uc\").and(method(HttpMethod.GET)).and(accept(MediaType.TEXT_HTML)).and(WebSocketRequestPredicate.not()).and(path(\"/**\").negate()), request -> ServerResponse.temporaryRedirect(request.uri().toBuilder().path(\"/uc/index.html\").build()).build());\n}", "CodeBleu_score": 29.680685973705028}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t    return route(method(HttpMethod.GET), request -> {\n        String path = request.path();\n        if (path.startsWith(\"/uc/assets/\") || path.startsWith(\"/uc/api/\")) {\n            return ServerResponse.notFound().build();\n        }\n        return ServerResponse.temporaryRedirect(request.uri().withPath(\"/uc/index.html\")).build();\n    });\n}", "CodeBleu_score": 28.235562778629813}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t    return route(method(HttpMethod.GET).and(path(\"/uc/**\")).and(accept(MediaType.TEXT_HTML)).and(WebSocketRequestPredicate.not()), request -> {\n        String path = request.path().substring(4);\n        if (path.startsWith(\"/assets/\")) {\n            return ServerResponse.notFound().build();\n        }\n        return ServerResponse.ok().contentType(MediaType.TEXT_HTML).body(BodyInserters.fromResource(new ClassPathResource(\"static/index.html\")));\n    });\n}", "CodeBleu_score": 33.61304805464572}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    MapSession mapSession = new MapSession();\n    mapSession.setTimeout(sessionProperties.getTimeout());\n    return new InMemoryReactiveIndexedSessionRepository(mapSession);\n}", "CodeBleu_score": 16.107337942871975}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    return new InMemoryReactiveIndexedSessionRepository(new ConcurrentHashMap<>(),\n        sessionProperties.getTimeout().toMillis());\n}", "CodeBleu_score": 14.895796716769372}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    ConcurrentHashMap<String, MapSession> sessionStore = new ConcurrentHashMap<>();\n    return new InMemoryReactiveIndexedSessionRepository(sessionStore, 60 * 60 * 24 * 14);\n}", "CodeBleu_score": 17.281685364871286}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    DefaultUserDetailService userDetailService = new DefaultUserDetailService(userService, roleService);\n    userDetailService.setTwoFactorEnabled(haloProperties.getSecurity().isTwoFactorEnabled());\n    return userDetailService;\n}", "CodeBleu_score": 50.10731154961741}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    DefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService);\n    userDetailsService.setEnableTwoFactorAuthentication(haloProperties.getSecurity().isEnableTwoFactorAuthentication());\n    return userDetailsService;\n}", "CodeBleu_score": 46.50701597993612}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    DefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService,\n            roleService, haloProperties);\n    userDetailsService.setEnableTwoFactorAuthentication(haloProperties.getSecurity().isEnableTwoFactorAuthentication());\n    return userDetailsService;\n}", "CodeBleu_score": 39.90407103453697}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\t    Assert.notNull(this.email, \"Email cannot be null\");\n    Assert.notNull(this.displayName, \"Display name cannot be null\");\n    Comment.CommentOwner commentOwner = new Comment.CommentOwner();\n    commentOwner.setKind(\"email\");\n    commentOwner.setName(this.email);\n    commentOwner.setDisplayName(this.displayName);\n    Map<String, String> annotations = new LinkedHashMap<>();\n    if (StringUtils.isNotBlank(this.avatar)) {\n        annotations.put(\"avatar\", this.avatar);\n    }\n    if (StringUtils.isNotBlank(this.website)) {\n        annotations.put(\"website\", this.website);\n    }\n    commentOwner.setAnnotations(annotations);\n    return commentOwner;\n}", "CodeBleu_score": 54.499065528457194}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t    Assert.notNull(this, \"CommentOwner must not be null\");\n    Assert.notNull(this.getEmail(), \"Email must not be null\");\n    Comment.CommentOwner commentOwner = new Comment.CommentOwner();\n    commentOwner.setKind(\"email\");\n    commentOwner.setEmail(this.getEmail());\n    commentOwner.setDisplayName(this.getDisplayName());\n    commentOwner.setAnnotations(new LinkedHashMap<>());\n    commentOwner.getAnnotations().put(\"avatar\", StringUtils.defaultIfBlank(this.getAvatar(), \"\"));\n    commentOwner.getAnnotations().put(\"website\", StringUtils.defaultIfBlank(this.getWebsite(), \"\"));\n    return commentOwner;\n}", "CodeBleu_score": 38.8893779911178}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t    Assert.notNull(this.getEmail(), \"Email cannot be null\");\n    Assert.notNull(this.getDisplayName(), \"Display name cannot be null\");\n    Comment.CommentOwner commentOwner = new Comment.CommentOwner();\n    commentOwner.setKind(\"email\");\n    commentOwner.setName(this.getEmail());\n    commentOwner.setDisplayName(this.getDisplayName());\n    Map<String, String> annotations = new LinkedHashMap<>();\n    if (StringUtils.isNotBlank(this.getAvatar())) {\n        annotations.put(\"avatar\", this.getAvatar());\n    }\n    if (StringUtils.isNotBlank(this.getWebsite())) {\n        annotations.put(\"website\", this.getWebsite());\n    }\n    commentOwner.setAnnotations(annotations);\n    return commentOwner;\n}", "CodeBleu_score": 48.92079857151819}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    return post.getOwner().getKind().equals(commentOwner.getKind()) && post.getOwner().getName().equals(commentOwner.getName());\n}", "CodeBleu_score": 20.25268052033565}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    if (commentOwner.getKind().equals(User.USER_KIND)) {\n        return post.getOwner().getName().equals(commentOwner.getName());\n    } else {\n        return post.getOwner().getEmail().equals(commentOwner.getEmail());\n    }\n}", "CodeBleu_score": 25.909361363415783}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    if (commentOwner.getKind().equals(User.KIND)) {\n        return post.getOwner().getName().equals(commentOwner.getName());\n    }\n    return post.getOwner().getEmail().equals(commentOwner.getEmail());\n}", "CodeBleu_score": 27.01992046631124}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\t    ListOptions listOptions = new ListOptions();\n    // Get the field selector from the request\n    FieldSelector fieldSelector = getFieldSelector(request);\n    // Build a field query from the selectors\n    String fieldQuery = QueryParamBuildUtil.buildFieldQuery(fieldSelector);\n    // Add conditions based on keyword and owner name, if provided\n    if (StringUtils.isNotBlank(fieldQuery)) {\n        listOptions.setFieldSelector(fieldQuery);\n    }\n    return listOptions;\n}", "CodeBleu_score": 18.346512572056444}, {"code": "public ListOptions toListOptions(){\n\t    // Build field query from selectors\n    String fieldQuery = QueryParamBuildUtil.buildFieldQuery(this.getSelectors());\n    // Initialize ListOptions\n    ListOptions listOptions = new ListOptions();\n    // Set field query\n    listOptions.setFieldSelector(fieldQuery);\n    // Set label selector\n    listOptions.setLabelSelector(this.getLabelSelector());\n    // Set keyword\n    listOptions.setKeyword(this.getKeyword());\n    // Set owner name\n    listOptions.setOwner(this.getOwner());\n    // Set page request\n    listOptions.setPageRequest(this.getPageRequest());\n    // Set sort\n    listOptions.setSort(this.getSort());\n    // Return ListOptions\n    return listOptions;\n}", "CodeBleu_score": 20.42505328932269}, {"code": "public ListOptions toListOptions(){\n\t    // Get the label and field selectors from the request\n    FieldSelector fieldSelector = QueryParamBuildUtil.getFieldSelector(this.request);\n    // Build a field query from the selectors\n    String fieldQuery = fieldSelector.buildFieldQuery();\n    // Initialize a ListOptions object\n    ListOptions listOptions = new ListOptions();\n    // Set the constructed field selector in the ListOptions object\n    listOptions.setFieldSelector(fieldQuery);\n    // Get the sorting options from the request\n    SortResolver sortResolver = QueryParamBuildUtil.getSortResolver(this.request);\n    // Get the sorting options from the sortResolver\n    Sort sort = sortResolver.getSort();\n    // Set the sorting options in the ListOptions object\n    listOptions.setSort(sort);\n    // Get the page number and page size from the request\n    PageRequest pageRequest = QueryParamBuildUtil.getPageRequest(this.request);\n    // Set the page number and page size in the ListOptions object\n    listOptions.setPageRequest(pageRequest);\n    // Get the keyword from the request\n    String keyword = QueryParamBuildUtil.getKeyword(this.request);\n    // Get the owner name from the request\n    String ownerName = QueryParamBuildUtil.getOwnerName(this.request);\n    // Check if the keyword is not empty\n    if (StringUtils.isNotEmpty(keyword)) {\n        // Build a query for the keyword\n        String keywordQuery = contains(\"content\").build();\n        // Add the keyword query to the ListOptions object\n        listOptions.setQuery(keywordQuery);\n    }\n    // Check if the owner name is not empty\n    if (StringUtils.isNotEmpty(ownerName)) {\n        // Build a query for the owner name\n        String ownerNameQuery = equal(\"owner\", ownerName).build();\n        // Add the owner name query to the ListOptions object\n        listOptions.setQuery(ownerNameQuery);\n    }\n    // Return the ListOptions object\n    return listOptions;\n}", "CodeBleu_score": 37.14575443524169}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    return counterService.getCounter(MeterUtils.COMMENT_STATS_COUNTER_NAME, commentName).map(counter -> new CommentStats(counter.getCount(), commentName));\n}", "CodeBleu_score": 40.258995316448086}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    return counterService.getCounter(commentName).map(counter -> new CommentStats(counter.getUpvoteCount()));\n}", "CodeBleu_score": 13.8330910009207}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    return commentCounter.get(commentName).map(counter -> {\n        return new CommentStats(commentName, counter.getUpvoteCount());\n    }).defaultIfEmpty(new CommentStats(commentName, 0));\n}", "CodeBleu_score": 35.54677478083343}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\t    Subscription subscription = Subscription.builder()\n        .build();\n    subscription.setSubscriber(identity);\n    subscription.setInterestReason(NotificationReasonConst.SOMEONE_REPLIED_TO_YOU);\n    subscription.setCondition(String.format(\"reply.owner == '%s'\", identity.getName()));\n    NotificationCenter.subscribe(subscription);\n}", "CodeBleu_score": 36.240572232620515}, {"code": "void subscribeReply(UserIdentity identity){\n\t    Subscription subscription = Subscription.builder()\n        .build();\n    subscription.setSubscriber(identity);\n    subscription.setReason(NotificationReasonConst.SOMEONE_REPLIED_TO_YOU);\n    subscription.setCondition(String.format(\"reply.owner == '%s'\", identity.getName()));\n    NotificationCenter.subscribe(subscription);\n}", "CodeBleu_score": 35.78353767875807}, {"code": "void subscribeReply(UserIdentity identity){\n\t    Subscription subscription = Subscription.builder().userIdentity(identity).build();\n    subscription.setReason(NotificationReasonConst.SOMEONE_REPLIED_TO_YOU);\n    subscription.setCondition(\"reply.owner == '\" + identity.getName() + \"'\");\n    NotificationCenter.subscribe(subscription);\n    NotificationCenter.blockUntilSubscribed(subscription);\n}", "CodeBleu_score": 40.29142266571072}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\t    // Set the approved status to true and record the current time\n    comment.setApproved(true);\n    comment.setApprovedAt(Instant.now());\n    // Update the comment using the client and handle optimistic locking failures by retrying the update operation\n    return client.update(comment).retryWhen(Retry.backoff(3, Duration.ofSeconds(1))).onErrorMap(OptimisticLockingFailureException.class, e -> e);\n}", "CodeBleu_score": 22.361566032614377}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t    comment.setApproved(true);\n    comment.setApprovedAt(Instant.now());\n    return client.update(comment).retryWhen(Retry.backoff(3, Duration.ofMillis(100)));\n}", "CodeBleu_score": 17.49782963245961}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t    comment.setApproved(true);\n    comment.setApprovedAt(Instant.now());\n    return client.update(comment).retryWhen(Retry.fixedDelay(3, Duration.ofMillis(100)));\n}", "CodeBleu_score": 17.637067235090182}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->mountUsing(fn (array $parameters) => $parameters['record'] ?? $parameters['record'] ?? $this);\n    }\n\n    if ($this instanceof HasRecord && $action instanceof HasRecord) {\n        $action->record($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 66.64114946407355}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->component($this);\n    }\n\n    if ($this instanceof HasRecord && $action instanceof HasRecord) {\n        $action->record($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 66.44894791551677}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->component($this);\n    }\n\n    if ($this instanceof HasRecord && $action instanceof HasRecord) {\n        $action->record($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 66.44894791551677}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    if ($this->successRedirectUrl !== null) {\n        if (is_app_url($this->successRedirectUrl)) {\n            return redirect($this->successRedirectUrl);\n        }\n\n        $this->successRedirectUrl = FilamentView::url($this->successRedirectUrl);\n    }\n\n    return $this;\n}", "CodeBleu_score": 49.29352748523841}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    if ($this->successRedirectUrl) {\n        if (is_app_url($this->successRedirectUrl)) {\n            return redirect($this->successRedirectUrl);\n        }\n\n        return redirect()->to($this->successRedirectUrl);\n    }\n\n    return $this;\n}", "CodeBleu_score": 29.188174593519424}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    if (!$this->successRedirectUrl) {\n        return $this;\n    }\n\n    if (is_app_url($this->successRedirectUrl)) {\n        return $this->redirect($this->successRedirectUrl);\n    }\n\n    if ($this->successRedirectUrl === 'back') {\n        return $this->redirect(FilamentView::getUrl());\n    }\n\n    return $this;\n}", "CodeBleu_score": 27.962911605183415}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if (!$record || !method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagModelClass = Tag::class;\n\n    $tagNames = collect($state)->map(function ($tag) use ($tagModelClass) {\n        if ($tag instanceof $tagModelClass) {\n            return $tag->name;\n        }\n\n        return $tag;\n    });\n\n    $tags = $tagModelClass::findOrCreateInAnyType($tagNames);\n\n    $record->tags()->sync($tags->pluck('id'));\n}", "CodeBleu_score": 40.3501614550868}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if (!$record || !method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagModelClass = app(AllTagTypes::class)->getTagModelClass($record);\n\n    $tagNames = array_filter(\n        array_unique(\n            array_map(\n                fn (string $value) => trim($value),\n                $state\n            )\n        )\n    );\n\n    $tags = $tagModelClass::findOrCreate(\n        $tagNames,\n        $record->getTable() . '_tags',\n        'name',\n        fn (string $tagName) => ['color' => '#' . substr(md5($tagName), 0, 6)]\n    );\n\n    $record->tags()->sync($tags->pluck('id'));\n}", "CodeBleu_score": 45.40888849563546}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if ($record === null) {\n        return;\n    }\n\n    $tagModelClass = $record->tags()->getRelated()->getMorphClass();\n\n    $tags = collect($state)\n        ->map(function ($tag) use ($tagModelClass) {\n            return Tag::findFromString($tag, $tagModelClass);\n        })\n        ->filter()\n        ->map(fn (Tag $tag) => $tag->id)\n        ->toArray();\n\n    $record->tags()->sync($tags);\n}", "CodeBleu_score": 36.345469983529604}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, repoName, err := paths.DissectRepoPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tscope := types.Scope{\n\t\tSpacePath: spacePath,\n\t\tRepoName: repoName,\n\t\tPipelineName: pipelineIdentifier,\n\t}\n\n\tresource := types.Resource{\n\t\tType: enum.Pipeline,\n\t\tScope: scope,\n\t}\n\n\treturn authorizer.Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 67.78888707098177}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\n\tspacePath, repoName, err := paths.DissectRepoPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tscope := types.Scope{\n\t\tSpacePath: spacePath,\n\t\tRepoName: repoName,\n\t}\n\n\tresource := types.Resource{\n\t\tType: enum.Pipeline,\n\t\tIdentifier: pipelineIdentifier,\n\t}\n\n\treturn authorizer.Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 69.63438809764142}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\n\tspacePath, repositoryName, err := paths.DissectRepositoryPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tscope := &types.Scope{\n\t\tType: enum.PipelineScope,\n\t\tPath: spacePath,\n\t}\n\n\tresource := &types.Resource{\n\t\tType: enum.PipelineResource,\n\t\tPath: fmt.Sprintf(\"%s/%s\", repositoryName, pipelineIdentifier),\n\t}\n\n\treturn authorizer.Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 67.83313671554512}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\n\tscope, resource, err := paths.DissectSpace(space.Path)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn authorizer.Check(\n\t\tctx,\n\t\tsession,\n\t\tscope,\n\t\tresource,\n\t\tpermission,\n\t)\n}", "CodeBleu_score": 42.73398802489717}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparent, name := paths.Split(space.Path)\n\tscope := authz.NewScope(parent, name)\n\tresource := authz.NewResource(enum.SpaceResource, parent, name)\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 38.29781203367154}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tscope, resource, err := paths.DissectSpacePath(space.Path)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"dissecting space path: %w\", err)\n\t}\n\treturn authorizer.Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 45.099941929844114}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn source, nil\n\t}\n\n\tvar v any\n\tif err := json.Unmarshal(source, &v); err != nil {\n\t\treturn nil, err\n\t}\n\n\tbuf := new(bytes.Buffer)\n\tif err := json.NewEncoder(buf).Encode(v); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn bytes.TrimSpace(buf.Bytes()), nil\n}", "CodeBleu_score": 33.469751124358545}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn source, nil\n\t}\n\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\n\tif err := decoder.Decode(&data); err != nil {\n\t\treturn nil, err\n\t}\n\n\tbuf := &bytes.Buffer{}\n\tencoder := json.NewEncoder(buf)\n\tencoder.SetEscapeHTML(false)\n\n\tif err := encoder.Encode(data); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn bytes.TrimSuffix(buf.Bytes(), []byte(\"\n\")), nil\n}", "CodeBleu_score": 53.458140394969924}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn source, nil\n\t}\n\n\tvar buf bytes.Buffer\n\tif err := json.Compact(&buf, source); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := json.Unmarshal(buf.Bytes(), data); err != nil {\n\t\treturn nil, err\n\t}\n\n\tbuf.Reset()\n\tif err := json.NewEncoder(&buf).Encode(data); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn bytes.TrimSuffix(buf.Bytes(), []byte(\"\n\")), nil\n}", "CodeBleu_score": 40.931651703696126}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.validateRepoRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\terr = authz.CheckPermission(session, repo, reqPermission)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 38.48363708022588}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.getRepo(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check permissions\n\tif err := authz.CheckPermission(session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 33.51936042308081}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := git.ValidateRepoRef(repoRef)\n\tif err != nil {\n\t\treturn nil, usererror.New(err)\n\t}\n\n\trepo, err = c.getRepo(ctx, repo)\n\tif err != nil {\n\t\treturn nil, usererror.New(err)\n\t}\n\n\tpermissions, err := c.getRepoPermissions(ctx, session, repo)\n\tif err != nil {\n\t\treturn nil, usererror.New(err)\n\t}\n\n\tif !permissions.HasPermission(reqPermission) {\n\t\treturn nil, usererror.New(\n\t\t\tauthz.ErrNoPermission{\n\t\t\t\tSession:      session,\n\t\t\t\tRequired:     reqPermission,\n\t\t\t\tRequirements: permissions,\n\t\t\t},\n\t\t)\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 52.26467195915851}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindRaw: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn in.SanitizeRawPayload(s)\n\t\t},\n\t\tenum.CheckPayloadKindMarkdown: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn in.SanitizeMarkdownPayload(s)\n\t\t},\n\t\tenum.CheckPayloadKindPipeline: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn in.SanitizePipelinePayload(s)\n\t\t},\n\t}\n}", "CodeBleu_score": 27.789194853746423}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindRaw: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindMarkdown: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindPipeline: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t}\n}", "CodeBleu_score": 24.85861142804076}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty:    emptySanitizer,\n\t\tenum.CheckPayloadKindRaw:      rawSanitizer,\n\t\tenum.CheckPayloadKindMarkdown: rawSanitizer,\n\t\tenum.CheckPayloadKindPipeline: pipelineSanitizer,\n\t}\n}", "CodeBleu_score": 24.96187915871616}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\t    self.state.on_render = on_render\n    if not self.state.renderer then\n        self.state.renderer = self.renderer\n        self.renderer:attach_buffer(self)\n    end\n    return self", "CodeBleu_score": 56.2302316718129}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t    local renderer = self.renderer\n    local state = self.state\n    state.on_render = on_render\n    if state.renderer == nil then\n        renderer:attach_buffer(self)\n        state.renderer = renderer\n    end\n    return self", "CodeBleu_score": 67.68038882710653}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t    local renderer = self.state.renderer\n    if not renderer then\n        return\n    end\n    if not on_render then\n        on_render = renderer.on_render\n    end\n    self.state.on_render = on_render\n    if not self.state.attached then\n        renderer:attach_buffer(self)\n    end\n    return self", "CodeBleu_score": 54.666398065088394}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\t    if not self:isValid() then return end\n    if not callback then return end\n    local filename = self:filename()\n    if not filename then return end\n    local watcher = Watcher(filename)\n    watcher:on('change', function()\n        callback(self)\n    end)\n    watcher:start()", "CodeBleu_score": 35.15521620579579}, {"code": "function Buffer:watch(callback)\n\t    if not self.filename then\n        return\n    end\n    if not callback then\n        return\n    end\n    if not self.watcher then\n        self.watcher = Watcher.new()\n    end\n    local watcher = self.watcher\n    watcher:watch(self.filename, function(filename)\n        if not filename then\n            return\n        end\n        if self.filename == filename then\n            callback()\n        end\n    end)", "CodeBleu_score": 46.407344846153485}, {"code": "function Buffer:watch(callback)\n\t  if not self.filename then\n    return\n  end\n  if self.watcher then\n    self.watcher:close()\n    self.watcher = nil\n  end\n  if callback then\n    self.watcher = Watcher(self.filename, function(filename)\n      if self.filename == filename then\n        self:reload()\n      end\n    end)\n  end", "CodeBleu_score": 43.672342706082844}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\t  local hex = self.cache:get(self.id)\n  if hex then return hex end\n\n  local spec = self.spec\n  local attr = spec.attr\n  local color = spec.color\n\n  local rgb = self.rgb:from_color(color, attr)\n  if not rgb then return nil end\n\n  local hex = rgb:to_hex()\n  self.cache:set(self.id, hex)\n\n  return hex", "CodeBleu_score": 42.139576652626175}, {"code": "function Color:to_hex()\n\t  if self.hex then\n    return self.hex\n  end\n  local color = self.color\n  local attr = self.attr\n  local hl_color = vim.api.nvim_get_hl_by_name(color, true)\n  if hl_color then\n    local rgb = hl_color.foreground or hl_color.background\n    if rgb then\n      self.hex = vgit.core.Rgb.to_hex(rgb)\n      return self.hex\n    end\n  end\n  return nil", "CodeBleu_score": 53.06531408996666}, {"code": "function Color:to_hex()\n\t    if self.hex then\n        return self.hex\n    end\n\n    local color_spec = self.foreground and self.foreground or self.background\n    if color_spec then\n        local attribute = self.foreground and 'foreground' or 'background'\n        local color = vim.api.nvim_get_hl_by_name(color_spec, true)[attribute]\n        if color then\n            local hex = vim.api.nvim_get_hl_by_name(color_spec, true)[attribute]\n            if hex then\n                self.hex = hex\n            else\n                local rgb = Rgb.new(color)\n                self.hex = rgb:to_hex()\n            end\n        end\n    end\n\n    return self.hex", "CodeBleu_score": 50.729540597598735}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t  local lines = buffer:get_lines()\n  for line, text in ipairs(lines) do\n    local matches = text:find_all(pattern)\n    if matches then\n      for _, match in ipairs(matches) do\n        buffer:add_highlight(line, match.start, match.end, hl)\n      end\n    end\n  end\n  return self", "CodeBleu_score": 44.784550203805004}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t  local lines = buffer:get_lines()\n  for _, line in ipairs(lines) do\n    local matches = vim.fn.matchstr(line, pattern)\n    for _, match in ipairs(matches) do\n      buffer:highlight(line, match, hl)\n    end\n  end\n  return self", "CodeBleu_score": 40.48705867896538}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t    local lines = buffer:get_lines()\n    local ns = self\n    local signs = vgit.settings.signs\n\n    for _, line in ipairs(lines) do\n        local start, stop = line:find(pattern)\n        if start then\n            buffer:add_highlight(start, stop, hl)\n        end\n    end\n\n    return ns", "CodeBleu_score": 46.603725650435365}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t    local id = buffer:get_id() .. ':' .. row .. ':' .. col\n    vim.api.nvim_buf_set_extmark(buffer.id, id, {\n        start = { row, col },\n        end_ = { row, col },\n        hl_group = hl,\n        priority = priority or 0,\n    })\n    vim.api.nvim_buf_set_extmark_text(buffer.id, id, text, {})\n    return id", "CodeBleu_score": 50.69758359009954}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t    local id = buffer.id .. ':' .. row .. ':' .. col\n    vim.api.nvim_buf_set_extmark(buffer.id, id, {\n        end_row = row,\n        end_col = col,\n        start_row = row,\n        start_col = col,\n        hl_group = hl,\n        text = text,\n        priority = priority or 1000,\n        virtual_text = true\n    })\n    return id", "CodeBleu_score": 45.28483442355204}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t  local id = vgit.core.utils.get_unique_id(row, col)\n  vim.api.nvim_buf_set_extmark(buffer, priority, {\n    id = id,\n    end_row = row,\n    end_col = col,\n    start_row = row,\n    start_col = col,\n    hl_group = hl,\n    text = text,\n    line_only = true,\n    virt_pos = pos,\n  })\n  return id", "CodeBleu_score": 49.697218944991114}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\t    local result = {}\n    local line = \"\"\n    for i = 1, #output do\n        local c = string.sub(output, i, i)\n        if c == \"", "CodeBleu_score": 23.83978569123849}, {"code": "function Spawn:parse_result(output, callback)\n\t  local line = \"\"\n  for i = 1, #output do\n    local c = string.sub(output, i, i)\n    if c == \"", "CodeBleu_score": 18.56758477362775}, {"code": "function Spawn:parse_result(output, callback)\n\t    local result = \"\"\n    local line = \"\"\n    local line_start = 1\n    local line_end\n    local line_len\n\n    -- Concatenate the output into a single string\n    result = result .. output\n\n    -- Iterate through each character in the string\n    for i = 1, #result do\n        -- Get the character at the current index\n        local char = result:sub(i, i)\n\n        -- If the character is a newline, trigger the callback with the current line\n        if char == \"", "CodeBleu_score": 30.12098788376799}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t    if self.watchers[path] then\n        return self.watchers[path]\n    end\n\n    local watcher = vim.loop.new_fs_event_watcher()\n    watcher:start(path, {\n        recursive = true\n    }, handler)\n\n    self.watchers[path] = watcher\n    return watcher", "CodeBleu_score": 48.12068283224901}, {"code": "function Watcher:watch_file(path, handler)\n\t  if not self.watchers[path] then\n    self.watchers[path] = vim.loop.new_fs_event_watcher()\n    self.watchers[path]:start(path, { recursive = true }, handler)\n  end\n  return self.watchers[path]", "CodeBleu_score": 43.804507927548364}, {"code": "function Watcher:watch_file(path, handler)\n\t    local watcher = vim.loop.new_fs_event_watcher()\n    watcher:start(path, {\n        recursive = true,\n        edge = true,\n        persistent = true,\n    }, handler)\n    return watcher", "CodeBleu_score": 37.340864378692295}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t  local hunks = {}\n  local lines = self.buffer:get_lines()\n  local git_object = GitObject(self.buffer)\n  local git_hunks, err = git_object:hunks()\n  if err then\n    return err\n  end\n  for _, hunk in ipairs(git_hunks) do\n    local hunk_lines = {}\n    local start_line = hunk.start_line\n    local end_line = hunk.end_line\n    local line_count = end_line - start_line + 1\n    for i = 1, line_count do\n      local line_number = start_line + i - 1\n      local line = lines[line_number]\n      table.insert(hunk_lines, {\n        line = line,\n        line_number = line_number,\n        type = hunk.type,\n        priority = hunk.priority\n      })\n    end\n    table.insert(hunks, {\n      lines = hunk_lines,\n      start_line = start_line,\n      end_line = end_line\n    })\n  end\n  self:setup_signs(hunks)\n  self.buffer:update_signs()\n  return hunks", "CodeBleu_score": 47.433264362826954}, {"code": "function GitBuffer:live_hunks()\n\t  local hunks = {}\n  local buffer_lines = self:buffer():lines()\n  local git_object = self:git_object()\n  local git_object_type = git_object:type()\n  local git_object_lines = git_object:lines()\n  local git_object_line_count = git_object:line_count()\n  local buffer_line_count = #buffer_lines\n  local buffer_line_index = 1\n  local git_object_line_index = 1\n  local buffer_line_number = 1\n  local git_object_line_number = 1\n  local buffer_line\n  local git_object_line\n  local hunk_line_count\n  local hunk_line_number\n  local hunk_line_index\n  local hunk_line\n  local hunk_type\n  local hunk_priority\n  local hunk\n  local line_index\n  local line\n  local line_number\n  local line_count\n  local line_type\n  local line_priority\n  local line_sign\n  local line_sign_name\n  local line_sign_priority\n  local line_sign_text\n  local line_sign_text_priority\n  local line_sign_text_type\n  local line_sign_text_priority_type\n  local line_sign_text_priority_type_name\n  local line_sign_text_priority_type_name_priority\n  local line_sign_text_priority_type_name_priority_text\n  local line_sign_text_priority_type_name_priority_text_priority\n  local line_sign_text_priority_type_name_priority_text_priority_type\n  local line_sign_text_priority_type_name_priority_text_priority_type_name\n  local line_sign_text_priority_type_name_priority_text_priority_type_name_priority\n  local line_sign_text_priority_type_name_priority_text_priority_type_name_priority_text\n  local line_sign_text_priority_type_name_", "CodeBleu_score": 16.223943557012095}, {"code": "function GitBuffer:live_hunks()\n\t  local hunks = {}\n  local lines = self:buffer_lines()\n  local git_object = self:git_object()\n  if not git_object then\n    return git_object\n  end\n  local hunks_raw = git_object:hunks(lines)\n  if not hunks_raw then\n    return hunks_raw\n  end\n  for _, hunk in ipairs(hunks_raw) do\n    local hunk_lines = {}\n    local hunk_lines_count = 0\n    for _, line in ipairs(hunk.lines) do\n      if line.type ~= 'context' then\n        hunk_lines_count = hunk_lines_count + 1\n      end\n      table.insert(hunk_lines, line)\n    end\n    table.insert(hunks, {\n      lines = hunk_lines,\n      lines_count = hunk_lines_count,\n      type = hunk.type,\n      priority = hunk.priority,\n      hunk = hunk,\n    })\n  end\n  self:set_signs(hunks)\n  return hunks", "CodeBleu_score": 43.528517809624304}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\t    local tmp_file = vgit.fs.create_temp_file()\n    local patch_content = patch:get_patch_content()\n    vgit.fs.write_file(tmp_file, patch_content)\n\n    local _, err = vgit.git.cli.Git:run(\"add\", tmp_file)\n    if err then\n        vgit.fs.remove_file(tmp_file)\n        return err\n    end\n\n    vgit.fs.remove_file(tmp_file)", "CodeBleu_score": 50.64105874696446}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t    local hunk = patch:get_hunks()[1]\n    local temp_file = vgit.fs.create_temp_file()\n    local file_name = hunk:get_file_name()\n    local file_content = patch:get_content()\n    local start_line = hunk:get_start_line()\n    local end_line = hunk:get_end_line()\n    local start_line_index = start_line - 1\n    local end_line_index = end_line - 1\n    local file_content = vgit.utils.split_string(file_content, \"", "CodeBleu_score": 34.584924369325684}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t    local temp_file_path = vgit.core.fs.create_temp_file()\n    local patch_content = patch:get_patch_content()\n    local file = io.open(temp_file_path, \"w\")\n    file:write(patch_content)\n    file:close()\n\n    local git_command = \"git add \" .. temp_file_path\n    local result, error = vgit.git.cli.Git.execute_command(git_command)\n    vgit.core.fs.remove_file(temp_file_path)\n\n    if error then\n        return nil, error\n    end\n\n    return result", "CodeBleu_score": 41.38666085919919}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    OAuthRequest request = new OAuthRequest(Verb.POST, this.accessTokenEndpoint);\n    this.service.signRequest(accessTokenCredentials, request);\n    request.addHeader(OAuthConstants.HEADER, \"application/x-www-form-urlencoded\");\n    request.addBodyParameter(OAuthConstants.CLIENT_ID, this.apiKey);\n    request.addBodyParameter(OAuthConstants.CLIENT_SECRET, this.apiSecret);\n    request.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n    request.addBodyParameter(OAuthConstants.REDIRECT_URI, this.callback);\n    request.addBodyParameter(OAuthConstants.GRANT_TYPE, OAuthConstants.AUTHORIZATION_CODE);\n    Response response = request.send();\n    return this.service.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 51.80872465710621}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    OAuthRequest request = new OAuthRequest(Verb.POST, this.accessTokenEndpoint);\n    this.service.signRequest(accessTokenCredentials, request);\n    request.addBodyParameter(OAuthConstants.VERIFIER, verifier.getValue());\n    Response response = request.send();\n    return this.service.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 57.066054682746994}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    OAuthRequest request = new OAuthRequest(Verb.POST, this.getAccessTokenEndpoint());\n    request.addBodyParameter(OAuthConstants.CLIENT_ID, config.getApiKey());\n    request.addBodyParameter(OAuthConstants.CLIENT_SECRET, config.getApiSecret());\n    request.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n    request.addBodyParameter(OAuthConstants.REDIRECT_URI, config.getCallback());\n    request.addBodyParameter(OAuthConstants.GRANT_TYPE, OAuthConstants.AUTHORIZATION_CODE);\n    if (config.hasScope()) {\n        request.addBodyParameter(OAuthConstants.SCOPE, config.getScope());\n    }\n    Response response = request.send();\n    return api.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 60.47833952895558}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    CredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), new UsernamePasswordCredentials(username, password));\n    context.setCredentialsProvider(credsProvider);\n    AuthCache authCache = new BasicAuthCache();\n    authCache.put(host, new BasicScheme());\n    context.setAuthCache(authCache);\n    Logger.getLogger(BitbucketAuthenticator.class.getName()).log(Level.FINE, \"Added host {0} to auth cache\", host);\n}", "CodeBleu_score": 61.947193800546216}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    CredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(new AuthScope(host), new UsernamePasswordCredentials(username, password));\n    AuthCache authCache = new BasicAuthCache();\n    authCache.put(host, new BasicScheme());\n    context.setCredentialsProvider(credsProvider);\n    context.setAuthCache(authCache);\n    Logger.getLogger(BitbucketAuthenticator.class.getName()).log(Level.FINE, \"Added host to auth cache: {0}\", host);\n}", "CodeBleu_score": 68.74642128746137}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n    credentialsProvider.setCredentials(new AuthScope(host), new UsernamePasswordCredentials(username, password));\n    AuthCache authCache = new BasicAuthCache();\n    authCache.put(host, new BasicScheme());\n    context.setCredentialsProvider(credentialsProvider);\n    context.setAuthCache(authCache);\n    Logger.getLogger(BitbucketAuthenticator.class.getName()).log(Level.FINE, \"Adding host {0} to auth cache\", host);\n}", "CodeBleu_score": 76.69565077464608}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins jenkins = Jenkins.getInstance();\n    if (jenkins == null) {\n        throw new IllegalStateException(\"Jenkins instance is not available\");\n    }\n    AvatarCacheExtension cache = jenkins.getExtensionList(AvatarCacheExtension.class).get(AvatarCacheExtension.class);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache extension is not available\");\n    }\n    String cacheKey = generateCacheKey(source);\n    seedCache(cache, cacheKey, source);\n    try {\n        return String.format(\"%s/avatarCache/%s/%s\", jenkins.getRootUrl(), URLEncoder.encode(cacheKey, \"UTF-8\"), size);\n    } catch (UnsupportedEncodingException e) {\n        throw new RuntimeException(\"UTF-8 encoding is not supported\", e);\n    }\n}", "CodeBleu_score": 50.80144588135946}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins jenkins = Jenkins.getInstance();\n    if (jenkins == null) {\n        throw new IllegalStateException(\"Jenkins instance is not available\");\n    }\n    AvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(AvatarCache.class);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache extension is not available\");\n    }\n    String cacheKey = generateCacheKey(source);\n    cache.seed(cacheKey);\n    try {\n        return String.format(\"%s%s/avatar/%s\", jenkins.getRootUrl(), URLEncoder.encode(cacheKey, \"UTF-8\"), size);\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding is not supported\", e);\n    }\n}", "CodeBleu_score": 50.8333554062409}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    final Jenkins jenkins = Jenkins.getInstanceOrNull();\n    if (jenkins == null) {\n        throw new IllegalStateException(\"Jenkins instance is not available\");\n    }\n    final AvatarCacheExtension cache = jenkins.getExtensionList(AvatarCacheExtension.class).get(AvatarCacheExtension.class);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache extension is not available\");\n    }\n    final String cacheKey = generateCacheKey(source);\n    cache.seed(cacheKey, source);\n    try {\n        return String.format(\"%s/avatar-cache/%s/%s\", jenkins.getRootUrl(), URLEncoder.encode(cacheKey, \"UTF-8\"), size);\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding is not supported\", e);\n    }\n}", "CodeBleu_score": 50.384236791208345}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    if (image.getWidth() > 128 || image.getHeight() > 128) {\n        BufferedImage scaled = new BufferedImage(128, 128, BufferedImage.TYPE_INT_ARGB);\n        Graphics2D g = scaled.createGraphics();\n        g.setRenderingHint(KEY_INTERPOLATION, VALUE_INTERPOLATION_BICUBIC);\n        g.setRenderingHint(KEY_ALPHA_INTERPOLATION, VALUE_ALPHA_INTERPOLATION_QUALITY);\n        g.drawImage(image, 0, 0, 128, 128, null);\n        g.dispose();\n        image = scaled;\n    }\n    this.image = image;\n    if (lastModified < 0) {\n        lastModified = System.currentTimeMillis();\n    }\n    this.lastModified = lastModified;\n}", "CodeBleu_score": 46.85256640424185}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    this.image = image;\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n    if (image.getWidth() > 128 || image.getHeight() > 128) {\n        BufferedImage scaled = new BufferedImage(128, 128, BufferedImage.TYPE_INT_ARGB);\n        Graphics2D g = scaled.createGraphics();\n        g.setRenderingHint(KEY_INTERPOLATION, VALUE_INTERPOLATION_BICUBIC);\n        g.setRenderingHint(KEY_ALPHA_INTERPOLATION, VALUE_ALPHA_INTERPOLATION_QUALITY);\n        g.drawImage(image, 0, 0, 128, 128, null);\n        g.dispose();\n        this.image = scaled;\n    }\n}", "CodeBleu_score": 51.34082108217943}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    this.lastModified = lastModified;\n    if (image.getWidth() > 128 || image.getHeight() > 128) {\n        BufferedImage scaledImage = new BufferedImage(128, 128, BufferedImage.TYPE_INT_ARGB);\n        Graphics2D g = scaledImage.createGraphics();\n        g.setRenderingHint(KEY_INTERPOLATION, VALUE_INTERPOLATION_BICUBIC);\n        g.setRenderingHint(KEY_ALPHA_INTERPOLATION, VALUE_ALPHA_INTERPOLATION_QUALITY);\n        g.drawImage(image, 0, 0, 128, 128, null);\n        g.dispose();\n        this.image = scaledImage;\n    } else {\n        this.image = image;\n    }\n}", "CodeBleu_score": 46.78841606112411}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    if (future.isDone()) {\n        try {\n            image = future.get();\n            lastModified = System.currentTimeMillis();\n            future = null;\n        } catch (InterruptedException | ExecutionException e) {\n            // ignore\n        }\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 48.18697619953237}, {"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    if (future.isDone()) {\n        try {\n            image = future.get();\n        } catch (InterruptedException | ExecutionException e) {\n            // ignore\n        }\n        future = null;\n        return false;\n    } else {\n        return true;\n    }\n}", "CodeBleu_score": 44.34827798884286}, {"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    if (future.isDone()) {\n        try {\n            AvatarImage image = future.get();\n            if (image != null) {\n                this.image = image;\n                this.lastModified = image.lastModified;\n            }\n            future = null;\n        } catch (InterruptedException | ExecutionException e) {\n            LOGGER.log(Level.WARNING, \"Failed to retrieve avatar image\", e);\n        }\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 61.544757428104624}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t    if (node instanceof AvatarImage) {\n        AvatarImage image = (AvatarImage) node;\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        ImageIO.write(image.image, \"png\", baos);\n        if (image.flush) {\n            baos.flush();\n        }\n        rsp.setContentType(\"image/png\");\n        rsp.setHeader(\"Cache-Control\", \"max-age=\" + (60 * 60 * 24 * 365));\n        rsp.write(baos.toByteArray());\n    } else {\n        rsp.sendError(HttpServletResponse.SC_NOT_FOUND);\n    }\n}", "CodeBleu_score": 46.44620280726511}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t    // Write the image to a byte array output stream\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    ImageIO.write(image, \"png\", baos);\n    // Flush the image if required\n    baos.flush();\n    // Set appropriate headers for caching and content type\n    rsp.setHeader(\"Cache-Control\", \"max-age=\" + (60 * 60 * 24 * 365));\n    rsp.setContentType(\"image/png\");\n    // Write the byte array to the response output stream\n    rsp.getOutputStream().write(baos.toByteArray());\n}", "CodeBleu_score": 36.41142074679494}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    generateImage(req, baos, node);\n    rsp.setContentType(\"image/png\");\n    rsp.setHeader(\"Cache-Control\", \"max-age=604800\");\n    rsp.setHeader(\"Pragma\", \"public\");\n    rsp.setHeader(\"Expires\", \"Thu, 19 Nov 1981 08:52:00 GMT\");\n    baos.writeTo(rsp.getOutputStream());\n    if (baos.size() > 0) {\n        baos.flush();\n    }\n}", "CodeBleu_score": 41.017289424601586}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t        this.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n\n        if (enableCache) {\n            this.teamCacheExpiration = System.currentTimeMillis() + teamCacheDuration * HOURS.toMillis(1);\n            this.repositoriesCacheExpiration = System.currentTimeMillis() + repositoriesCacheDuration * HOURS.toMillis(1);\n        }\n\n        // Setup keep-alive strategy\n        SocketConfig socketConfig = SocketConfig.custom()\n                .setSoKeepAlive(true)\n                .setSoTimeout(3000)\n                .build();\n        connectionManager = new PoolingHttpClientConnectionManager();\n        connectionManager.setDefaultSocketConfig(socketConfig);\n        connectionManager.setDefaultMaxPerRoute(20);\n\n        // Setup retry handler\n        retryHandler = new StandardHttpRequestRetryHandler(3, true);\n\n        // Setup HTTP client\n        httpClient = HttpClientBuilder.create()\n                .setConnectionManager(connectionManager)\n                .setRetryHandler(retryHandler)\n                .build();\n\n        // Setup HTTP client context\n        httpClientContext = HttpClientContext.create();\n\n        // Setup proxy\n        ProxyConfiguration proxyConfiguration = Jenkins.get().proxy;\n        if (proxyConfiguration != null) {\n            HttpHost proxy = new HttpHost(proxyConfiguration.name, proxyConfiguration.port);\n            httpClientContext.setAttribute(HttpClientContext.HTTP_PROXY, proxy);\n        }\n\n        // Setup authentication\n        if (authenticator != null) {\n            CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n            credentialsProvider.setCredentials(\n                    new AuthScope(authenticator.getHost(), authenticator.getPort()),\n                    new UsernamePasswordCredentials(authenticator.getUsername(), authenticator.getPassword()));\n            httpClientContext.setCredentialsProvider(cred", "CodeBleu_score": 40.64074703290932}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t    this.enableCache = enableCache;\n    this.teamCacheDuration = teamCacheDuration;\n    this.repositoriesCacheDuration = repositoriesCacheDuration;\n    this.owner = owner;\n    this.projectKey = projectKey;\n    this.repositoryName = repositoryName;\n    this.authenticator = authenticator;\n\n    if (enableCache) {\n        cache = new BitbucketCloudApiClientCache();\n    }\n\n    if (authenticator != null) {\n        configureHttpClient();\n    }\n}", "CodeBleu_score": 30.254819572578267}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t    this.enableCache = enableCache;\n    this.teamCacheDuration = teamCacheDuration;\n    this.repositoriesCacheDuration = repositoriesCacheDuration;\n    this.owner = owner;\n    this.projectKey = projectKey;\n    this.repositoryName = repositoryName;\n    this.authenticator = authenticator;\n    this.client = buildHttpClient();\n    this.context = buildHttpContext();\n    this.cache = new BitbucketCloudApiCache(enableCache, teamCacheDuration, repositoriesCacheDuration);\n}", "CodeBleu_score": 28.877562181245082}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    BitbucketCloudBranch sourceBranch = pullRequest.getSource();\n    if (sourceBranch != null) {\n        BitbucketCloudCommit sourceCommit = sourceBranch.getCommit();\n        if (sourceCommit != null) {\n            BitbucketSCMFile sourceFile = new BitbucketSCMFile(sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.getHash(), sourceCommit.get", "CodeBleu_score": 26.813535860580558}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    BitbucketCloudBranch sourceBranch = pullRequest.getSource().getBranch();\n    if (sourceBranch != null) {\n        BitbucketCloudCommit sourceCommit = sourceBranch.getCommit();\n        if (sourceCommit != null) {\n            BitbucketCloudCommit sourceCommitNode = sourceCommit.getNode();\n            if (sourceCommitNode != null) {\n                pullRequest.setSourceClosure(new CommitClosure(sourceCommitNode));\n            }\n        }\n    }\n    BitbucketCloudBranch destinationBranch = pullRequest.getDestination().getBranch();\n    if (destinationBranch != null) {\n        BitbucketCloudCommit destinationCommit = destinationBranch.getCommit();\n        if (destinationCommit != null) {\n            BitbucketCloudCommit destinationCommitNode = destinationCommit.getNode();\n            if (destinationCommitNode != null) {\n                pullRequest.setDestinationClosure(new CommitClosure(destinationCommitNode));\n            }\n        }\n    }\n}", "CodeBleu_score": 37.7803605311139}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    BitbucketPullRequestCommit sourceBranch = pullRequest.getSource();\n    if (sourceBranch != null) {\n        BitbucketPullRequestCommit destinationBranch = pullRequest.getDestination();\n        if (destinationBranch != null) {\n            BitbucketPullRequestCommit sourceBranchCommit = sourceBranch.getCommit();\n            if (sourceBranchCommit != null) {\n                BitbucketPullRequestCommit destinationBranchCommit = destinationBranch.getCommit();\n                if (destinationBranchCommit != null) {\n                    String sourceBranchCommitId = sourceBranchCommit.getId();\n                    String destinationBranchCommitId = destinationBranchCommit.getId();\n                    if (StringUtils.isNotEmpty(sourceBranchCommitId)) {\n                        if (StringUtils.isNotEmpty(destinationBranchCommitId)) {\n                            BitbucketPullRequestCommit sourceBranchCommit = sourceBranch.getCommit();\n                            if (sourceBranchCommit != null) {\n                                BitbucketPullRequestCommit destinationBranchCommit = destinationBranch.getCommit();\n                                if (destinationBranchCommit != null) {\n                                    String sourceBranchCommitId = sourceBranchCommit.getId();\n                                    String destinationBranchCommitId = destinationBranchCommit.getId();\n                                    if (StringUtils.isNotEmpty(sourceBranchCommitId)) {\n                                        if (StringUtils.isNotEmpty(destinationBranchCommitId)) {\n                                            BitbucketPullRequestCommit sourceBranchCommit = sourceBranch.getCommit();\n                                            if (sourceBranchCommit != null) {\n                                                BitbucketPullRequestCommit destinationBranchCommit = destinationBranch.getCommit();\n                                                if (destinationBranchCommit != null) {\n                                                    String sourceBranchCommitId = sourceBranchCommit.getId();\n                                                    String destinationBranchCommitId = destinationBranchCommit.getId();\n                                                    if (StringUtils.isNotEmpty(sourceBranchCommitId)) {\n                                                        if (StringUtils.", "CodeBleu_score": 28.766632640342777}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration config = JenkinsLocationConfiguration.get();\n    if (config == null || config.getUrl() == null) {\n        throw new IllegalStateException(\"Jenkins location configuration is not set\");\n    }\n    return DisplayURLProvider.get().getDisplayURL(build);\n}", "CodeBleu_score": 66.04136837423728}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration location = JenkinsLocationConfiguration.get();\n    if (location == null || location.getUrl() == null) {\n        throw new IllegalStateException(\"Jenkins location configuration is not set\");\n    }\n    DisplayURLProvider provider = location.getDisplayURLProvider();\n    if (provider == null) {\n        throw new IllegalStateException(\"Display URL provider is not set\");\n    }\n    return provider.getDisplayURL(build);\n}", "CodeBleu_score": 54.737855326266896}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration location = JenkinsLocationConfiguration.get();\n    if (location == null) {\n        throw new IllegalStateException(\"Jenkins location configuration is not available\");\n    }\n    URL url = location.getUrl();\n    if (url == null) {\n        throw new IllegalStateException(\"Jenkins URL is not available\");\n    }\n    DisplayURLProvider displayURLProvider = DisplayURLProvider.get();\n    if (displayURLProvider == null) {\n        throw new IllegalStateException(\"Display URL provider is not available\");\n    }\n    return displayURLProvider.getDisplayURL(build);\n}", "CodeBleu_score": 47.816886633467874}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    try {\n        URL urlObj = new URL(url);\n        String host = urlObj.getHost();\n        if (host.equals(\"localhost\") || host.equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"The Jenkins URL cannot use 'localhost' or 'unconfigured-jenkins-location' as the host.\");\n        }\n        if (bitbucket.isBitbucketCloud() && !urlObj.getHost().contains(\".\")) {\n            throw new IllegalStateException(\"The Bitbucket Cloud API client requires a fully qualified hostname.\");\n        }\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"The Jenkins URL is malformed.\");\n    }\n    return url;\n}", "CodeBleu_score": 59.999931100368755}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    try {\n        URL urlObj = new URL(url);\n        if (urlObj.getHost().equals(\"localhost\") || urlObj.getHost().equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"Jenkins URL cannot be localhost or unconfigured-jenkins-location\");\n        }\n        if (bitbucket == BitbucketApi.BITBUCKET_CLOUD && !urlObj.getHost().contains(\".\")) {\n            throw new IllegalStateException(\"Bitbucket Cloud URL must be fully qualified\");\n        }\n        return url;\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"Invalid Jenkins URL\", e);\n    }\n}", "CodeBleu_score": 62.73493581742057}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    try {\n        URL urlObj = new URL(url);\n        if (urlObj.getHost().equalsIgnoreCase(\"localhost\")) {\n            throw new IllegalStateException(\"The URL cannot contain localhost as the host\");\n        }\n        if (urlObj.getHost().equalsIgnoreCase(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"The URL cannot contain unconfigured-jenkins-location as the host\");\n        }\n        if (bitbucket.getApiClient() instanceof BitbucketCloudApiClient) {\n            if (urlObj.getHost().equalsIgnoreCase(\"bitbucket.org\")) {\n                throw new IllegalStateException(\"The URL cannot contain bitbucket.org as the host\");\n            }\n        }\n        return url;\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"The URL is malformed\");\n    }\n}", "CodeBleu_score": 68.03451470836656}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t        // Initialize Bitbucket context and check if notifications are disabled\n        BitbucketApi bitbucketApi = source.getBitbucketApi();\n        if (bitbucketApi == null || bitbucketApi.isNotificationsDisabled()) {\n            return;\n        }\n\n        // Retrieve SCM revision and its hash\n        SCMRevision revision = build.getSCM().getLastBuiltRevision();\n        if (revision == null) {\n            return;\n        }\n        String hash = revision.getHash();\n\n        // Determine whether to share the build key between branch and PR\n        boolean shareBuildKey = source.getShareBuildKey();\n        if (revision instanceof BitbucketSCMRevision) {\n            shareBuildKey = ((BitbucketSCMRevision) revision).getShareBuildKey();\n        }\n\n        // Log notification type\n        String notificationType = shareBuildKey ? \"branch\" : \"PR\";\n        listener.getLogger().println(\"Sending Bitbucket build notifications for \" + notificationType + \": \" + hash);\n\n        // Construct build key\n        String buildKey = source.getBuildKey(build, hash);\n\n        // Initialize Bitbucket client\n        BitbucketCloudApiClient client = bitbucketApi.getClient();\n\n        // Create and send build status notification\n        BitbucketBuildStatus status = new BitbucketBuildStatus(build, buildKey, hash);\n        client.sendBuildStatus(status);\n    }", "CodeBleu_score": 40.27180274436252}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t    if (source.isNotificationsDisabled()) {\n        return;\n    }\n    SCMRevision rev = build.getLastBuiltRevision();\n    if (rev == null) {\n        return;\n    }\n    String hash = rev.getHash();\n    if (hash == null) {\n        return;\n    }\n    boolean shareBuildKey = source.isShareBuildKeyBetweenBranchAndPR();\n    if (rev instanceof SCMRevisionAction) {\n        SCMRevisionAction action = (SCMRevisionAction) rev;\n        if (action.getType().equals(SCMRevisionAction.Type.BRANCH)) {\n            if (shareBuildKey) {\n                source.setBuildKey(hash);\n            }\n            BitbucketBuildStatus.Type type = BitbucketBuildStatus.Type.fromBuildResult(build.getResult());\n            BitbucketBuildStatus status = new BitbucketBuildStatus(type, build.getUrl(), source.getBuildKey(), source.getBuildDescription());\n            BitbucketApi api = source.getApi();\n            if (api instanceof BitbucketCloudApiClient) {\n                BitbucketCloudApiClient client = (BitbucketCloudApiClient) api;\n                client.createBuildStatus(source.getRepository(), hash, status);\n            }\n        }\n    } else if (rev instanceof SCMRevisionState) {\n        SCMRevisionState state = (SCMRevisionState) rev;\n        if (state.getType().equals(SCMRevisionState.Type.PULL_REQUEST)) {\n            if (!shareBuildKey) {\n                source.setBuildKey(hash);\n            }\n            BitbucketBuildStatus.Type type = BitbucketBuildStatus.Type.fromBuildResult(build.getResult());\n            BitbucketBuildStatus status = new BitbucketBuildStatus(type, build.getUrl(), source.getBuildKey(), source.getBuildDescription());\n            BitbucketApi api = source.getApi();\n            if (api instanceof BitbucketCloudApiClient) {\n                BitbucketCloudApiClient client = (BitbucketCloudApiClient) api;\n                client.createBuildStatus(source.getRepository(), hash", "CodeBleu_score": 42.89413721680463}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t        if (source.isNotificationsDisabled()) {\n            return;\n        }\n        SCMRevisionState scmRevisionState = build.getAction(SCMRevisionAction.class).getRevisionState();\n        if (scmRevisionState == null) {\n            return;\n        }\n        SCMRevision revision = scmRevisionState.getRevision();\n        if (revision == null) {\n            return;\n        }\n        boolean shareBuildKey = source.isShareBuildKeyBetweenBranchAndPR();\n        BitbucketBuildStatus.Type type = getBuildStatusType(build);\n        String buildKey = getBuildKey(build, revision, shareBuildKey);\n        BitbucketApi client = getBitbucketClient(source, build, buildKey, listener);\n        if (client == null) {\n            return;\n        }\n        BitbucketBuildStatus buildStatus = new BitbucketBuildStatus(type, buildKey, build.getDisplayName());\n        client.createBuildStatus(buildStatus);\n    }", "CodeBleu_score": 37.79803234766918}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    if (shareBuildKeyBetweenBranchAndPR) {\n        return build.getParent().getFullName() + \"-\" + branch;\n    } else {\n        return build.getFullName();\n    }\n}", "CodeBleu_score": 28.61628889398119}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String folderName = build.getParent().getFullName();\n    if (shareBuildKeyBetweenBranchAndPR) {\n        return String.format(\"%s-%s\", folderName, branch);\n    } else {\n        return build.getFullDisplayName();\n    }\n}", "CodeBleu_score": 46.80849693284731}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    if (shareBuildKeyBetweenBranchAndPR && !StringUtils.isEmpty(branch)) {\n        return build.getParent().getFullName() + \":\" + branch;\n    }\n    return build.getParent().getFullName();\n}", "CodeBleu_score": 29.098578267886182}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        serverUrl = getFromBitbucket(BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpointConfiguration.class, BitbucketEndpoint", "CodeBleu_score": 6.36980752465543}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        serverUrl = BitbucketEndpointConfiguration.get().getServerUrl();\n        LOGGER.log(Level.WARNING, \"BitbucketSCMNavigator deserialized without a server URL. Using default server URL: \" + serverUrl);\n    }\n    if (traits == null) {\n        traits = new ArrayList<>();\n        if (useLegacyTraits) {\n            traits.add(new Selection());\n            traits.add(new Discovery());\n        }\n        LOGGER.log(Level.WARNING, \"BitbucketSCMNavigator deserialized without traits. Using default traits: \" + traits);\n    }\n    return this;\n}", "CodeBleu_score": 22.41973042633583}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (server == null) {\n        server = getServer();\n        LOGGER.log(Level.WARNING, \"BitbucketSCMNavigator.server is null. Using BitbucketSCMNavigator.getServer() instead.\");\n    }\n    if (traits == null) {\n        traits = reconstructLegacyTraits();\n    }\n    return this;\n}", "CodeBleu_score": 10.839928132235563}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\t    BitbucketRepository repository = getFromBitbucket(BitbucketRepository.class, name);\n    if (isMatch) {\n        proposed.add(repository);\n    } else {\n        ignored.add(repository);\n    }\n    count++;\n}", "CodeBleu_score": 49.29716034588054}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t    BitbucketRepository repository = BitbucketApi.getRepository(name);\n    if (repository != null) {\n        if (isMatch) {\n            count++;\n        } else {\n            LOGGER.log(Level.FINE, \"Ignored repository: {0}\", name);\n        }\n    } else {\n        LOGGER.log(Level.FINE, \"Proposed repository: {0}\", name);\n    }\n}", "CodeBleu_score": 46.479915747152255}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t    BitbucketRepository repository = getFromBitbucket(name);\n    if (isMatch) {\n        LOGGER.log(Level.FINE, \"Proposed repository: {0}\", name);\n        proposed.add(repository);\n    } else {\n        LOGGER.log(Level.FINE, \"Ignored repository: {0}\", name);\n        ignored.add(repository);\n    }\n}", "CodeBleu_score": 40.324350313272}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t        try {\n            if (marked.getHash().equals(rev.getHash())) {\n                return rev;\n            }\n            List<RefSpec> refSpecs = scm.getRefSpecs().stream().filter(refSpec -> {\n                try {\n                    URIish uri = refSpec.getSrc();\n                    return uri.getPath().equals(rev.getHash());\n                } catch (URISyntaxException e) {\n                    return false;\n                }\n            }).collect(Collectors.toList());\n            if (refSpecs.isEmpty()) {\n                return rev;\n            }\n            String remote = scm.getUserRemoteConfigs().get(0).getUrl();\n            FetchCommand fetchCommand = new FetchCommand(git, remote, refSpecs);\n            fetchCommand.setGitClient(git);\n            fetchCommand.setBuild(build);\n            fetchCommand.setListener(listener);\n            fetchCommand.call();\n            return rev;\n        } catch (GitException e) {\n            throw new RuntimeException(e);\n        }\n    }", "CodeBleu_score": 49.05933359093875}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t        List<RefSpec> refSpecs = scm.getRefSpecs().stream().map(RefSpec::toString).filter(refSpec -> refSpec.contains(\"#\")).map(refSpec -> {\n            try {\n                return new RefSpec(new URIish(refSpec));\n            } catch (URISyntaxException e) {\n                throw new RuntimeException(e);\n            }\n        }).collect(Collectors.toList());\n        if (refSpecs.isEmpty()) {\n            return rev;\n        }\n        FetchCommand fetchCommand = git.fetch(scm.getRemoteConfigs().get(0).getUrl(), refSpecs);\n        fetchCommand.setBuild(build);\n        fetchCommand.setErrorStream(listener.getLogger());\n        fetchCommand.setOutputStream(listener.getLogger());\n        fetchCommand.setDryRun(false);\n        fetchCommand.call();\n        return rev;\n    }", "CodeBleu_score": 52.20593475894905}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t        List<RefSpec> refSpecs = getRefSpecs(scm, git, marked, rev);\n        if (refSpecs.isEmpty()) {\n            return rev;\n        }\n        String cloneLink = getCloneLink(scm);\n        fetchMissingCommits(git, cloneLink, refSpecs);\n        return rev;\n    }", "CodeBleu_score": 20.279236361529467}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue().get(0));\n    }\n    return result;\n}", "CodeBleu_score": 69.81598344779034}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t  if (links == null) {\n    return null;\n  }\n  Map<String, BitbucketHref> result = new HashMap<>();\n  for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n    result.put(entry.getKey(), entry.getValue().get(0));\n  }\n  return result;\n}", "CodeBleu_score": 70.33736886378779}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue().get(0));\n    }\n    return result;\n}", "CodeBleu_score": 72.25196065151466}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t  const selectedResourceStates = await this.getSelectedResourceStates(resourceStates);\n  if (!selectedResourceStates) {\n    return;\n  }\n\n  const groupedResources = this.groupResourcesByRepository(selectedResourceStates);\n  for (const [repository, resources] of groupedResources) {\n    const filePaths = resources.map(resource => resource.resourceUri.fsPath);\n    try {\n      await this.sourceControl.add(repository, filePaths);\n    } catch (error) {\n      this.logError(error);\n      this.showErrorMessage(`Failed to add files to repository: ${error.message}`);\n    }\n  }\n}", "CodeBleu_score": 49.751661873601684}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t  const selectedResourceStates = await this.getSelectedResourceStates(resourceStates);\n  if (!selectedResourceStates) {\n    return;\n  }\n\n  const repositoryMap = this.groupResourcesByRepository(selectedResourceStates);\n  const repositories = Object.keys(repositoryMap);\n  for (const repository of repositories) {\n    const resourcePaths = repositoryMap[repository].map(resource => resource.resourceUri.fsPath);\n    try {\n      await this.addFilesToRepository(repository, resourcePaths);\n    } catch (error) {\n      this.logError(error);\n      this.showErrorMessage(`Failed to add files to repository ${repository}`);\n    }\n  }\n}", "CodeBleu_score": 48.25430376037018}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t  const selectedResourceStates = resourceStates.length > 0 ? resourceStates : await window.showSourceControlResourceStates();\n  if (selectedResourceStates.length === 0) {\n    return;\n  }\n\n  const resourcesByRepository = groupBy(selectedResourceStates, (resource) => resource.repository.name);\n  for (const repositoryName in resourcesByRepository) {\n    const resources = resourcesByRepository[repositoryName];\n    const filePaths = resources.map((resource) => resource.uri.fsPath);\n    try {\n      await this.repositoryManager.add(repositoryName, ...filePaths);\n    } catch (error) {\n      console.error(error);\n      window.showErrorMessage(`Failed to add files to repository '${repositoryName}': ${error.message}`);\n    }\n  }\n}", "CodeBleu_score": 45.99706774160083}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\t  if (resourceStates.length === 0 || !resourceStates[0] instanceof Uri) {\n    const scm = await SourceControlManager.getSCM(resourceStates[0]);\n    if (scm) {\n      const scmResourceStates = await scm.getResourceStates(resourceStates);\n      resourceStates = scmResourceStates.filter(\n        (resourceState) => resourceState instanceof Resource\n      );\n    }\n  }\n  return resourceStates;\n}", "CodeBleu_score": 38.08365862449773}, {"code": "protected async getResourceStates{\n\t  if (this.resourceStates.length === 0 || !this.resourceStates[0].resourceUri) {\n    const scm = await this.getSCM();\n    if (scm) {\n      this.resourceStates = await scm.getResourceStates(this.resourceStates);\n    }\n  }\n  return this.resourceStates.filter(r => r instanceof Resource);\n}", "CodeBleu_score": 31.90476133959671}, {"code": "protected async getResourceStates{\n\t  if (this.resourceStates.length === 0 || !this.resourceStates[0].uri) {\n    const resource = await workspace.getConfiguration().get<string>(\"svn.resource\");\n    if (resource) {\n      const resourceUri = Uri.parse(resource);\n      const scm = await SourceControlManager.getSCM(resourceUri);\n      if (scm) {\n        this.resourceStates = await scm.getResourceStates();\n      }\n    }\n  }\n  return this.resourceStates.filter(state => state instanceof Resource);\n}", "CodeBleu_score": 40.689817190972896}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    if (!uri) {\n      uri = window.activeTextEditor?.document.uri;\n    }\n    if (!uri) {\n      return undefined;\n    }\n    if (uri.scheme === \"svn\") {\n      uri = toSvnUri(uri);\n    }\n    if (uri.scheme !== \"file\") {\n      return undefined;\n    }\n    const scm = SourceControlManager.getInstance();\n    const repo = await scm.getRepository(uri);\n    if (!repo) {\n      return undefined;\n    }\n    return repo.getResource(uri);\n  }", "CodeBleu_score": 47.23266730583692}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    if (!uri) {\n      const editor = window.activeTextEditor;\n      if (!editor) {\n        return;\n      }\n      uri = editor.document.uri;\n    }\n\n    if (uri.scheme === \"svn\") {\n      uri = toSvnUri(uri);\n    }\n\n    if (uri.scheme !== \"file\") {\n      return;\n    }\n\n    const scm = await SourceControlManager.getSCM(uri);\n    if (!scm) {\n      return;\n    }\n\n    const repo = await scm.getRepository(uri);\n    if (!repo) {\n      return;\n    }\n\n    return repo.getResource(uri);\n  }", "CodeBleu_score": 42.94856118503828}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    if (!uri) {\n      const editor = window.activeTextEditor;\n      if (!editor) {\n        return;\n      }\n      uri = editor.document.uri;\n    }\n\n    if (uri.scheme === \"svn\") {\n      uri = toSvnUri(uri);\n    }\n\n    if (uri.scheme !== \"file\") {\n      return;\n    }\n\n    const scm = SourceControlManager.getInstance();\n    const repo = scm.getRepository(uri.fsPath);\n    if (!repo) {\n      return;\n    }\n\n    return repo.getResource(uri);\n  }", "CodeBleu_score": 43.099428295307874}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\t  const remote = await this.svnManager.getRemoteForPath(element.path);\n  if (!remote) {\n    return;\n  }\n  if (element.status === Status.Modified) {\n    openDiff(remote, element.path, element.oldRevision, element.newRevision);\n  } else if (element.status === Status.Added) {\n    openFileRemote(remote, element.path, element.newRevision);\n  }\n}", "CodeBleu_score": 48.246474374283785}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t  const remote = await this.sourceControlManager.getRemoteRepository(element.path);\n  if (element.status === Status.Modified) {\n    await openDiff(this.sourceControlManager, remote, element.path, element.oldRevision, element.newRevision);\n  } else if (element.status === Status.Added) {\n    await openFileRemote(this.sourceControlManager, remote, element.path, element.newRevision);\n  }\n}", "CodeBleu_score": 47.62605932906787}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t  const remote = await this.sourceControlManager.getRemote(element.remoteName);\n  if (remote) {\n    if (element.status === Status.MODIFIED) {\n      openDiff(\n        this.sourceControlManager,\n        remote,\n        element.path,\n        element.oldRevision,\n        element.newRevision\n      );\n    } else if (element.status === Status.ADDED) {\n      openFileRemote(\n        this.sourceControlManager,\n        remote,\n        element.path,\n        element.newRevision\n      );\n    }\n  }\n}", "CodeBleu_score": 50.95983039704599}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t  if (!window.activeTerminal) {\n    window.showErrorMessage(\"No active terminal\");\n    return;\n  }\n\n  if (what === \"message\") {\n    await window.activeTerminal.sendText(`echo ${item.commit.message} | clip`);\n  } else if (what === \"revision\") {\n    await window.activeTerminal.sendText(`echo ${item.commit.revision} | clip`);\n  } else {\n    await window.activeTerminal.sendText(`echo ${item.commit.revision} | clip`);\n  }\n}", "CodeBleu_score": 30.863799145392523}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t  if (!env.clipboard.has(what)) {\n    window.showErrorMessage(`Clipboard does not support ${what}`);\n    return;\n  }\n  if (what === \"message\") {\n    env.clipboard.writeText(item.commitMessage);\n  } else if (what === \"revision\") {\n    env.clipboard.writeText(item.revision);\n  }\n  window.showInformationMessage(`${what} copied to clipboard`);\n}", "CodeBleu_score": 32.5061903928753}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t  if (env.clipboard.hasText()) {\n    await env.clipboard.writeText(item.commitMessage);\n  } else {\n    const message = what === \"message\" ? item.commitMessage : item.commitRevision;\n    await env.clipboard.writeText(message);\n  }\n}", "CodeBleu_score": 29.940684713464748}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    GiteaConnectionFactory connectionFactory = ServiceLoader.load(GiteaConnectionFactory.class).iterator().next();\n    return connectionFactory.open(getJenkins(), getGiteaUrl(), getGiteaToken());\n}", "CodeBleu_score": 12.290805239891316}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    ServiceLoader<GiteaConnectionFactory> serviceLoader = ServiceLoader.load(GiteaConnectionFactory.class);\n    GiteaConnectionFactory factory = null;\n    for (GiteaConnectionFactory f : serviceLoader) {\n        if (f.isAvailable()) {\n            if (factory == null || f.getPriority() > factory.getPriority()) {\n                factory = f;\n            }\n        }\n    }\n    if (factory == null) {\n        throw new IOException(\"No GiteaConnectionFactory found\");\n    }\n    return factory.open(Jenkins.getInstance());\n}", "CodeBleu_score": 36.16622512021622}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    Jenkins jenkins = Jenkins.get();\n    ServiceLoader<GiteaConnectionFactory> factories = ServiceLoader.load(GiteaConnectionFactory.class);\n    GiteaConnectionFactory connectionFactory = null;\n    for (GiteaConnectionFactory factory : factories) {\n        if (factory.canOpen(jenkins)) {\n            if (connectionFactory == null || factory.getPriority() > connectionFactory.getPriority()) {\n                connectionFactory = factory;\n            }\n        }\n    }\n    if (connectionFactory == null) {\n        throw new IOException(\"No suitable GiteaConnectionFactory found\");\n    }\n    return connectionFactory.open(jenkins);\n}", "CodeBleu_score": 40.18256756688146}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\t    Jenkins jenkins = Jenkins.getInstance();\n    if (jenkins != null) {\n        return jenkins.getPluginManager().uberClassLoader;\n    }\n    return Gitea.class.getClassLoader();\n}", "CodeBleu_score": 38.19942536754304}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t    Jenkins jenkins = Jenkins.getInstance();\n    if (jenkins != null) {\n        return Gitea.create(jenkins.pluginManager.getClassLoader());\n    }\n    return Gitea.create(Gitea.class.getClassLoader());\n}", "CodeBleu_score": 37.62735082909065}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t    Gitea gitea = Gitea.get();\n    if (gitea == null) {\n        return null;\n    }\n    ClassLoader classLoader = Jenkins.get().pluginManager.getClassLoader();\n    if (classLoader == null) {\n        classLoader = Gitea.class.getClassLoader();\n    }\n    gitea.setClassLoader(classLoader);\n    return gitea;\n}", "CodeBleu_score": 40.83336064079156}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\n    this.displayName = StringUtils.isBlank(displayName) ? serverUrl : displayName;\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    this.manageHooks = manageHooks || StringUtils.isNotBlank(credentialsId);\n    this.credentialsId = credentialsId;\n    this.aliasUrl = normalizeAndTrimAliasUrl(aliasUrl);\n}", "CodeBleu_score": 47.334694015621004}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = displayName;\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    this.manageHooks = manageHooks;\n    this.credentialsId = manageHooks ? credentialsId : null;\n    this.aliasUrl = normalizeAliasUrl(aliasUrl);\n}", "CodeBleu_score": 39.70952436316413}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = StringUtils.defaultIfBlank(displayName, \"Gitea Server\");\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    this.manageHooks = manageHooks || !StringUtils.isBlank(credentialsId);\n    this.credentialsId = credentialsId;\n    this.aliasUrl = normalizeAliasUrl(aliasUrl);\n}", "CodeBleu_score": 40.653883247396294}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    ListBoxModel items = new ListBoxModel();\n    if (Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n        try {\n            serverUrl = normalizeServerUrl(serverUrl);\n            if (StringUtils.isNotBlank(serverUrl)) {\n                URI uri = new URI(serverUrl);\n                StandardListBoxModel standardListBoxModel = new StandardListBoxModel();\n                standardListBoxModel.includeMatching(ACL.SYSTEM, CredentialsProvider.lookupCredentials(StandardCredentials.class, Jenkins.get(), ACL.SYSTEM, URIRequirementBuilder.fromUri(uri).build()), CredentialsMatchers.always(), StandardUsernamePasswordCredentials.class);\n                items = standardListBoxModel.buildWithCurrentValue(credentialsId);\n            }\n        } catch (URISyntaxException | MalformedURLException e) {\n            items.add(e.getMessage());\n        }\n    }\n    return items;\n}", "CodeBleu_score": 45.252837905183014}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    final StandardListBoxModel result = new StandardListBoxModel();\n    if (Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n        serverUrl = Util.fixEmpty(serverUrl);\n        if (StringUtils.isNotBlank(serverUrl)) {\n            try {\n                final URI uri = new URI(serverUrl);\n                final String scheme = uri.getScheme();\n                if (StringUtils.isNotBlank(scheme)) {\n                    final URIRequirementBuilder builder = new URIRequirementBuilder(scheme);\n                    final StandardCredentials credentials = CredentialsProvider.findCredentialById(StandardUsernamePasswordCredentials.class, builder.getCredentialId(), ACL.SYSTEM, CredentialsMatchers.always());\n                    if (credentials != null) {\n                        final GiteaAuth auth = new GiteaAuth(((StandardUsernamePasswordCredentials) credentials).getUsername(), ((StandardUsernamePasswordCredentials) credentials).getPassword().getPlainText());\n                        final GiteaConnection connection = new GiteaConnection(uri, auth);\n                        final Gitea gitea = connection.getGitea();\n                        final GiteaUser user = gitea.getUser();\n                        if (user != null) {\n                            final String username = user.getUsername();\n                            if (StringUtils.isNotBlank(username)) {\n                                final AuthenticationTokens tokens = AuthenticationTokens.get(Jenkins.get());\n                                if (tokens != null) {\n                                    final GiteaAuth token = tokens.get(GiteaAuth.class, uri);\n                                    if (token != null) {\n                                        final GiteaConnection connection = new GiteaConnection(uri, token);\n                                        final Gitea gitea = connection.getGitea();\n                                        final GiteaUser user = gitea.getUser();\n                                        if (user != null) {\n                                            final String username = user.getUsername();\n                                            if (StringUtils.isNotBlank(username)) {\n                                                result.add(username, username);\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }", "CodeBleu_score": 41.191037663033306}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    if (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n        return new StandardListBoxModel().includeCurrentValue(serverUrl);\n    }\n    if (StringUtils.isEmpty(serverUrl)) {\n        return new StandardListBoxModel().includeCurrentValue(serverUrl);\n    }\n    try {\n        serverUrl = normalizeServerUrl(serverUrl);\n    } catch (MalformedURLException e) {\n        return new StandardListBoxModel().includeCurrentValue(serverUrl);\n    }\n    return new StandardListBoxModel().includeCurrentValue(serverUrl).includeMatchingAs(ACL.SYSTEM, CredentialsProvider.lookupCredentials(StandardUsernamePasswordCredentials.class, Jenkins.get(), URIRequirementBuilder.fromUri(serverUrl).build(), CredentialsMatchers.always()), StandardUsernamePasswordCredentials.class, StandardCredentials.class);\n}", "CodeBleu_score": 37.461474469842734}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (StringUtils.isEmpty(serverUrl)) {\n        return serverUrl;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        String host = uri.getHost();\n        int port = uri.getPort();\n        if (port != -1) {\n            if ((scheme.equalsIgnoreCase(\"http\") && port == 80) || (scheme.equalsIgnoreCase(\"https\") && port == 443)) {\n                port = -1;\n            }\n        }\n        String path = uri.getPath();\n        if (StringUtils.isNotEmpty(path) && path.endsWith(\"/\")) {\n            path = path.substring(0, path.length() - 1);\n        }\n        String query = uri.getQuery();\n        String fragment = uri.getFragment();\n        return new URI(scheme, null, host, port, path, query, fragment).toString().toLowerCase(Locale.ENGLISH);\n    } catch (URISyntaxException e) {\n        return serverUrl;\n    }\n}", "CodeBleu_score": 51.44806260261938}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (StringUtils.isBlank(serverUrl)) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        String host = uri.getHost();\n        int port = uri.getPort();\n        String path = uri.getPath();\n        String query = uri.getQuery();\n        String fragment = uri.getFragment();\n        StringBuilder builder = new StringBuilder();\n        builder.append(scheme).append(\"://\").append(host.toLowerCase(Locale.ENGLISH));\n        if (port != -1) {\n            if ((scheme.equalsIgnoreCase(\"http\") && port != 80) || (scheme.equalsIgnoreCase(\"https\") && port != 443)) {\n                builder.append(\":\").append(port);\n            }\n        }\n        if (StringUtils.isNotBlank(path)) {\n            builder.append(path);\n        }\n        if (StringUtils.isNotBlank(query)) {\n            builder.append(\"?\").append(query);\n        }\n        if (StringUtils.isNotBlank(fragment)) {\n            builder.append(\"#\").append(fragment);\n        }\n        String normalizedUrl = builder.toString();\n        if (normalizedUrl.endsWith(\"/\")) {\n            normalizedUrl = normalizedUrl.substring(0, normalizedUrl.length() - 1);\n        }\n        return normalizedUrl;\n    } catch (URISyntaxException e) {\n        // Ignore exception and return original URL\n        return serverUrl;\n    }\n}", "CodeBleu_score": 44.06929933703723}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (StringUtils.isEmpty(serverUrl)) {\n        return \"\";\n    }\n    serverUrl = serverUrl.toLowerCase(Locale.ENGLISH);\n    if (serverUrl.startsWith(\"http://\")) {\n        serverUrl = serverUrl.replace(\"http://\", \"\");\n    } else if (serverUrl.startsWith(\"https://\")) {\n        serverUrl = serverUrl.replace(\"https://\", \"\");\n    }\n    if (serverUrl.endsWith(\"/\")) {\n        serverUrl = serverUrl.substring(0, serverUrl.length() - 1);\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        if (uri.getPort() == -1) {\n            return uri.getScheme() + \"://\" + uri.getHost();\n        } else {\n            return uri.toString();\n        }\n    } catch (URISyntaxException e) {\n        return serverUrl;\n    }\n}", "CodeBleu_score": 36.24480811073513}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : GiteaServer.getServers()) {\n        if (StringUtils.isBlank(server.getDisplayName())) {\n            items.add(server.getUrl(), server.getUrl());\n        } else {\n            items.add(server.getUrl(), server.getDisplayName());\n        }\n    }\n    return items;\n}", "CodeBleu_score": 38.70825486261318}, {"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        if (StringUtils.isBlank(server.getDisplayName())) {\n            items.add(server.getUrl());\n        } else {\n            items.add(server.getDisplayName(), server.getUrl());\n        }\n    }\n    return items;\n}", "CodeBleu_score": 41.37272504365516}, {"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : GiteaServer.getAll()) {\n        String displayName = server.getDisplayName();\n        if (StringUtils.isEmpty(displayName)) {\n            displayName = server.getUrl();\n        }\n        items.add(displayName, server.getUrl());\n    }\n    return items;\n}", "CodeBleu_score": 49.69092796657364}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    if (servers == null) {\n        servers = Collections.emptyList();\n    }\n    Set<URI> uniqueServers = new HashSet<>();\n    List<GiteaServer> validServers = new ArrayList<>();\n    for (GiteaServer server : servers) {\n        try {\n            URI uri = new URI(server.getUrl());\n            if (!uniqueServers.contains(uri)) {\n                uniqueServers.add(uri);\n                validServers.add(server);\n            }\n        } catch (URISyntaxException e) {\n            // Ignore invalid URLs\n        }\n    }\n    this.servers = Collections.unmodifiableList(validServers);\n    save();\n}", "CodeBleu_score": 40.55987767922926}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    if (servers == null) {\n        this.servers.clear();\n    } else {\n        Set<URI> uris = new HashSet<>();\n        for (GiteaServer server : servers) {\n            if (server.getUrl() == null) {\n                continue;\n            }\n            URI uri;\n            try {\n                uri = new URI(server.getUrl());\n            } catch (URISyntaxException e) {\n                continue;\n            }\n            if (uris.contains(uri)) {\n                continue;\n            }\n            uris.add(uri);\n            this.servers.add(server);\n        }\n    }\n    save();\n}", "CodeBleu_score": 38.7138107841137}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    this.servers.clear();\n    if (servers != null) {\n        for (GiteaServer server : servers) {\n            if (server.getUrl() != null && !server.getUrl().isEmpty()) {\n                this.servers.add(server);\n            }\n        }\n    }\n    save();\n}", "CodeBleu_score": 16.513771397317186}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return false;\n    }\n    serverUrl = normalizeServerUrl(serverUrl);\n    List<GiteaServer> servers = getServers();\n    Iterator<GiteaServer> iter = servers.iterator();\n    while (iter.hasNext()) {\n        GiteaServer server = iter.next();\n        if (serverUrl.equals(server.getUrl())) {\n            iter.remove();\n            save();\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 45.397152662859774}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return false;\n    }\n    String normalizedUrl = normalizeUrl(serverUrl);\n    if (normalizedUrl == null) {\n        return false;\n    }\n    List<GiteaServer> servers = getServers();\n    ListIterator<GiteaServer> iterator = servers.listIterator();\n    while (iterator.hasNext()) {\n        GiteaServer server = iterator.next();\n        if (normalizedUrl.equals(server.getUrl())) {\n            iterator.remove();\n            updateServers(servers);\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 40.636429619621374}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return false;\n    }\n    final List<GiteaServer> servers = getServers();\n    final GiteaServer server = getServer(serverUrl);\n    if (server == null) {\n        return false;\n    }\n    servers.remove(server);\n    updateServerList(servers);\n    return true;\n}", "CodeBleu_score": 25.630333516384514}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element annotatedElement : roundEnv.getElementsAnnotatedWith(annotation)) {\n        if (annotatedElement.getKind() != ElementKind.CLASS) {\n            processingEnv.getMessager().printMessage(Kind.ERROR, \"@ConfigValue annotation can only be used on classes\", annotatedElement);\n            return;\n        }\n        TypeElement classElement = (TypeElement) annotatedElement;\n        Map<String, String> attributes = Maps.newHashMap();\n        for (Map.Entry<? extends AnnotationMirror, ? extends AnnotationValue> entry : classElement.getAnnotationMirrors().get(annotation.getAnnotationType()).entrySet()) {\n            attributes.put(entry.getKey().getAnnotationType().getSimpleName().toString(), entry.getValue().getValue().toString());\n        }\n        String type = classElement.asType().toString();\n        descriptorElements.add(new DescriptorElement(attributes, type));\n    }\n}", "CodeBleu_score": 38.12563599395951}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {\n        if (element.getKind() == ElementKind.CLASS) {\n            TypeElement typeElement = (TypeElement) element;\n            List<? extends AnnotationMirror> annotationMirrors = element.getAnnotationMirrors();\n            for (AnnotationMirror annotationMirror : annotationMirrors) {\n                if (annotationMirror.getAnnotationType().asElement().getSimpleName().contentEquals(annotation.getSimpleName())) {\n                    Map<String, String> attributes = Maps.newHashMap();\n                    for (Map.Entry<? extends ExecutableElement, ? extends AnnotationValue> entry : annotationMirror.getElementValues().entrySet()) {\n                        ExecutableElement executableElement = entry.getKey();\n                        AnnotationValue annotationValue = entry.getValue();\n                        String attributeName = executableElement.getSimpleName().toString();\n                        String attributeValue = annotationValue.getValue().toString();\n                        attributes.put(attributeName, attributeValue);\n                    }\n                    String type = typeElement.getQualifiedName().toString();\n                    descriptorElements.add(new DescriptorElement(type, attributes));\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 41.19011902633352}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element annotatedElement : roundEnv.getElementsAnnotatedWith(annotation)) {\n        if (annotatedElement.getKind() != ElementKind.METHOD) {\n            processingEnv.getMessager().printMessage(Kind.ERROR, \"Only methods can be annotated with @Config\", annotatedElement);\n            continue;\n        }\n        ExecutableElement executableElement = (ExecutableElement) annotatedElement;\n        List<? extends VariableElement> parameters = executableElement.getParameters();\n        if (parameters.size() != 1) {\n            processingEnv.getMessager().printMessage(Kind.ERROR, \"Method must have exactly one parameter\", annotatedElement);\n            continue;\n        }\n        VariableElement parameter = parameters.get(0);\n        if (parameter.asType().getKind() != javax.lang.model.type.TypeKind.DECLARED) {\n            processingEnv.getMessager().printMessage(Kind.ERROR, \"Parameter must be a declared type\", annotatedElement);\n            continue;\n        }\n        TypeElement parameterType = (TypeElement) parameter.asType();\n        String type = parameterType.getQualifiedName().toString();\n        AnnotationMirror annotationMirror = annotatedElement.getAnnotationMirror();\n        Map<String, Object> attributes = Maps.newHashMap();\n        for (Map.Entry<? extends AnnotationValue, ? extends AnnotationValue> entry : annotationMirror.getElementValues().entrySet()) {\n            String key = entry.getKey().getValue().toString();\n            Object value = entry.getValue().getValue();\n            if (value instanceof ConfigValue) {\n                value = ((ConfigValue) value).value();\n            }\n            attributes.put(key, value);\n        }\n        descriptorElements.add(new DescriptorElement(type, attributes));\n    }\n}", "CodeBleu_score": 33.86063557318851}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    String annotationName = annotationClass.getCanonicalName().replace(\"$\", \".\");\n    for (TypeElement annotation : annotations) {\n        if (annotation.getQualifiedName().toString().equals(annotationName)) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 44.608880515314056}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    for (TypeElement annotation : annotations) {\n        String annotationQualifiedName = annotation.getQualifiedName().toString();\n        String targetAnnotationQualifiedName = annotationClass.getCanonicalName().replace(\"$\", \".\");\n        if (annotationQualifiedName.equals(targetAnnotationQualifiedName)) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 41.03482135808335}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    for (TypeElement annotation : annotations) {\n        String annotationName = annotation.getQualifiedName().toString().replace(\"$\", \".\");\n        if (annotationName.equals(annotationClass.getName())) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 43.992912386235375}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\"employee\": employee}\n\n    if approver_id:\n        filters.update({\"approver\": approver_id})\n\n    if for_approval:\n        filters.update(\n            {\n                \"docstatus\": 1,\n                \"status\": (\"in\", [\"Applied\", \"Approved\", \"Rejected\"]),\n                \"docstatus\": 1,\n                \"employee\": (\"<>\", employee),\n            }\n        )\n    else:\n        filters.update(\n            {\n                \"docstatus\": 1,\n                \"status\": (\"in\", [\"Applied\", \"Approved\", \"Rejected\"]),\n                \"docstatus\": 1,\n                \"cancel_reason\": (\"is\", \"None\"),\n            }\n        )\n\n    workflow_name = get_workflow_name(\n        doctype=\"Leave Application\", filters=filters\n    )\n    if workflow_name:\n        filters.update(\n            {\n                \"workflow_state\": (\n                    \"in\",\n                    frappe.get_value(\n                        \"Workflow\",\n                        workflow_name,\n                        \"states\",\n                        as_dict=True,\n                    ),\n                )\n            }\n        )\n    else:\n        filters.update({\"workflow_state\": \"Open\"})\n\n    return filters\n\n", "CodeBleu_score": 25.660112688634072}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"docstatus\": (\"=\", 1),\n        \"employee\": employee,\n        \"leave_application_status\": (\"in\", [\"Open\", \"Approved\", \"Rejected\"]),\n        \"workflow_state\": (\"not in\", [\"Cancelled\", \"Allocation Pending\"]),\n    }\n\n    if for_approval:\n        filters[\"leave_application_status\"] = (\"in\", [\"Open\", \"Approved\", \"Rejected\"])\n        filters[\"workflow_state\"] = (\"not in\", [\"Cancelled\", \"Allocation Pending\"])\n        filters[\"owner\"] = (\"not in\", [employee])\n\n    if approver_id:\n        filters[\"approver\"] = approver_id\n\n    return filters\n\n", "CodeBleu_score": 27.546833520637932}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"docstatus\": 1,\n        \"employee\": employee,\n        \"leave_application_status\": [\"in\", [\"Open\", \"Approved\", \"Rejected\"]],\n    }\n\n    if for_approval:\n        filters[\"leave_application_status\"] = \"Open\"\n        filters[\"owner\"] = [\"not in\", employee]\n        if approver_id:\n            filters[\"leave_approver\"] = approver_id\n\n    return filters\n\n", "CodeBleu_score": 23.845830775490548}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = getdate()\n    leave_details = get_leave_details(employee, current_date)\n    leave_balance_map = {}\n    for leave_type, leave_detail in leave_details.items():\n        allocated_leaves = leave_detail.get(\"allocated_leaves\")\n        balance_leaves = leave_detail.get(\"balance_leaves\")\n        leave_balance_map[leave_type] = {\n            \"allocated_leaves\": allocated_leaves,\n            \"balance_leaves\": balance_leaves,\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 46.59658157744732}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = getdate()\n    leave_details = get_leave_details(employee, current_date)\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_details[leave_type][\"allocated\"],\n            \"balance\": leave_details[leave_type][\"balance\"],\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 38.418420201082746}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    today = getdate()\n    leave_details = get_leave_details(employee, today)\n\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        leave_balance_map[leave_type.leave_type] = {\n            \"allocated\": leave_type.allocated_leaves,\n            \"balance\": leave_type.balance_leaves,\n        }\n\n    return leave_balance_map\n\n", "CodeBleu_score": 37.088090288693174}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.get_value(\"Employee\", employee, \"holiday_list\")\n    if not holiday_list:\n        return []\n    holidays = frappe.get_all(\n        \"Holiday\",\n        filters={\n            \"parent\": holiday_list,\n            \"parenttype\": \"Holiday List\",\n            \"weekly_off\": 0,\n        },\n        fields=[\"holiday_date\", \"description\"],\n        order_by=Order(\"holiday_date\"),\n    )\n    for holiday in holidays:\n        holiday.description = strip_html(holiday.description)\n    return holidays\n\n", "CodeBleu_score": 34.93758863107895}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.get_list(\n        \"Holiday List\",\n        filters={\"parent\": employee},\n        fields=[\"parent\", \"parentfield\", \"holiday_list_name\"],\n    )\n    if not holiday_list:\n        return []\n\n    holiday_list = holiday_list[0]\n    holidays = frappe.get_list(\n        \"Holiday\",\n        filters={\n            \"parenttype\": \"Holiday List\",\n            \"parent\": holiday_list.holiday_list_name,\n            \"holiday_type\": [\"in\", [\"Weekly Off\", \"Working Holiday\"]],\n        },\n        fields=[\"holiday_date\", \"description\"],\n        order_by=Order(\"holiday_date\", \"asc\"),\n    )\n\n    for holiday in holidays:\n        holiday.description = strip_html(holiday.description)\n\n    return holidays\n\n", "CodeBleu_score": 36.88498735445761}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.get_value(\"Employee\", employee, \"holiday_list\")\n    if not holiday_list:\n        return []\n\n    holidays = frappe.db.get_all(\n        \"Holiday\",\n        filters={\"parent\": holiday_list, \"holiday_type\": [\"in\", [\"Working Day\", \"Working Holiday\"]]},\n        fields=[\"holiday_date\", \"description\"],\n        order_by=Order(\"holiday_date\"),\n    )\n\n    for holiday in holidays:\n        holiday.description = strip_html(holiday.description)\n\n    return holidays\n\n", "CodeBleu_score": 36.34732702958489}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t\n    send_reminders_in_advance_for_employee()\n\n", "CodeBleu_score": 0.841286279281065}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    if not frappe.db.get_single_value(\"HR Settings\", \"send_reminders_in_advance\"):\n        return\n\n    frequency = frappe.db.get_single_value(\"HR Settings\", \"remind_in_advance_frequency\")\n\n    if frequency == \"Weekly\":\n        send_reminders_in_advance_weekly_func()\n\n", "CodeBleu_score": 47.59274782026596}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    send_reminders = frappe.db.get_single_value(\"HR Settings\", \"send_reminders_in_advance\")\n    frequency = frappe.db.get_single_value(\"HR Settings\", \"reminder_frequency\")\n\n    if send_reminders and frequency == \"Weekly\":\n        send_weekly_reminders()\n\n", "CodeBleu_score": 45.79849950576121}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t\n    total_score = 0\n    for rating in self.self_ratings:\n        if rating.rating:\n            total_score += flt(rating.rating) * flt(rating.percentage_weightage) / 100\n\n    self.self_appraisal_score = flt(total_score, 2)\n\n", "CodeBleu_score": 28.023863280364598}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    if self.self_appraisal_score:\n        return\n\n    total_score = 0\n    for entry in self.self_ratings:\n        entry.score = flt(entry.rating) * flt(entry.weightage) / 100\n        total_score += entry.score\n\n    self.self_appraisal_score = flt(total_score, self.precision(\"self_appraisal_score\"))\n\n", "CodeBleu_score": 42.89403747756518}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self_appraisal_score = 0\n    for entry in self.self_ratings:\n        self_appraisal_score += flt(entry.rating) * flt(entry.percentage_weightage)\n\n    self.self_appraisal_score = flt(self_appraisal_score, self.precision(\"self_appraisal_score\"))\n\n", "CodeBleu_score": 38.41177933278414}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle.final_score_formula:\n        data = self.get_data_for_final_score_formula()\n        formula = sanitize_expression(appraisal_cycle.final_score_formula)\n        final_score = frappe.safe_eval(formula, data, {}, \"Final Score\")\n    else:\n        final_score = flt(\n            (flt(self.total_score) + flt(self.average_feedback_score) + flt(self.self_appraisal_score)) / 3,\n            precision=self.precision,\n        )\n    self.final_score = final_score\n\n", "CodeBleu_score": 32.1094273112198}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle.final_score_formula:\n        data = self.get_data_for_final_score_formula()\n        formula = sanitize_expression(appraisal_cycle.final_score_formula)\n        self.final_score = flt(frappe.safe_eval(formula, data), precision=\"Float\")\n    else:\n        self.final_score = flt(\n            (self.total_score + self.average_feedback_score + self.self_appraisal_score)\n            / 3,\n            precision=\"Float\",\n        )\n\n", "CodeBleu_score": 28.732172740206884}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle.final_score_formula:\n        self.final_score = sanitize_expression(\n            appraisal_cycle.final_score_formula,\n            self.get_template_data(),\n        )\n    else:\n        self.final_score = flt(\n            (\n                self.total_score\n                + self.average_feedback_score\n                + self.self_appraisal_score\n            )\n            / 3,\n            self.precision(\"final_score\"),\n        )\n\n", "CodeBleu_score": 21.447801883791552}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > nowdate():\n        if self.status != \"On Leave\":\n            leave_applications = frappe.get_all(\n                \"Leave Application\",\n                filters={\n                    \"employee\": self.employee,\n                    \"docstatus\": 1,\n                    \"from_date\": [\"<=\", self.attendance_date],\n                    \"to_date\": [\">=\", self.attendance_date],\n                    \"status\": [\"in\", [\"Approved\", \"Cancelled\"]],\n                },\n                pluck=\"name\",\n            )\n            if leave_applications:\n                frappe.throw(\n                    _(\n                        \"Attendance cannot be marked for future dates unless the status is 'On Leave' and there is no leave application for the given date.\"\n                    )\n                )\n        elif self.status == \"On Leave\":\n            frappe.throw(_(\"Attendance cannot be marked for future dates if the status is 'On Leave'.\"))\n    if self.attendance_date < getdate(self.employee_details.date_of_joining):\n        frappe.throw(\n            _(\n                \"Attendance cannot be marked for dates earlier than the employee's date of joining.\"\n            )\n        )\n\n", "CodeBleu_score": 35.652327351045635}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > nowdate():\n        if self.status != \"On Leave\" and not frappe.db.exists(\n            \"Leave Application\",\n            {\"employee\": self.employee, \"from_date\": self.attendance_date},\n        ):\n            frappe.throw(\n                _(\n                    \"Attendance cannot be marked for future dates unless the status is 'On Leave' and there is no leave application\"\n                )\n            )\n\n    if self.attendance_date < getdate(self.employee_name):\n        frappe.throw(\n            _(\"Attendance Date cannot be earlier than the date of joining of the employee\")\n        )\n\n", "CodeBleu_score": 33.78986768080941}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > nowdate():\n        if self.status != \"On Leave\" or not self.leave_application:\n            frappe.throw(\n                _(\n                    \"Attendance cannot be marked for future dates unless the status is 'On Leave' and there is no leave application.\"\n                )\n            )\n    if self.attendance_date < getdate(self.employee_name.date_of_joining):\n        frappe.throw(\n            _(\n                \"Attendance cannot be marked for dates earlier than the employee's date of joining.\"\n            )\n        )\n\n", "CodeBleu_score": 28.2225252685769}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\t\n    if self.docstatus == 0:\n        existing_record = frappe.db.get_all(\n            \"Attendance\",\n            filters={\n                \"employee\": self.employee,\n                \"attendance_date\": self.attendance_date,\n                \"docstatus\": 1,\n            },\n            fields=[\"name\"],\n        )\n        if existing_record:\n            raise frappe.exceptions.ValidationError(\n                _(\n                    \"Attendance record already exists for employee {0} on {1}. {2}\"\n                ).format(\n                    get_link_to_form(\"Employee\", self.employee),\n                    format_date(self.attendance_date),\n                    get_link_to_form(\"Attendance\", existing_record[0].name),\n                )\n            )\n\n", "CodeBleu_score": 36.266830239636064}, {"code": "def validate_duplicate_record(self)\n\t\n    if frappe.db.exists(\n        \"Attendance\",\n        {\n            \"employee\": self.employee,\n            \"attendance_date\": self.attendance_date,\n            \"docstatus\": 1,\n        },\n    ):\n        link = get_link_to_form(\"Attendance\", frappe.db.get_value(\"Attendance\", {\"employee\": self.employee, \"attendance_date\": self.attendance_date, \"docstatus\": 1}, \"name\"))\n        frappe.throw(\n            _(\"Attendance already marked for employee {0} on {1}. {2}\").format(\n                self.employee_name,\n                format_date(self.attendance_date),\n                link,\n            )\n        )\n\n", "CodeBleu_score": 39.13945119307297}, {"code": "def validate_duplicate_record(self)\n\t\n    if self.docstatus == 1:\n        attendance_records = frappe.db.get_all(\n            \"Attendance\",\n            filters={\n                \"employee\": self.employee,\n                \"attendance_date\": self.attendance_date,\n                \"docstatus\": 1,\n            },\n            fields=[\"name\"],\n        )\n        if len(attendance_records) > 1:\n            link = get_link_to_form(\"Attendance\", attendance_records[1].name)\n            frappe.throw(\n                _(\n                    \"Attendance record already exists for {0} on {1}. {2}\"\n                ).format(self.employee, self.attendance_date, link),\n                title=_(\"Duplicate Record\"),\n            )\n\n", "CodeBleu_score": 35.126622512379456}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t\n    # get all messages\n    messages = frappe.get_all(\n        \"Message\",\n        filters=[\n            [\"reply_of\", \"=\", self.name],\n            [\"status\", \"=\", \"Draft\"],\n        ],\n        fields=[\"sender\", \"subject\", \"creation\", \"message_id\"],\n    )\n    if not messages:\n        return\n    # get the email addresses of users in the specified group\n    group_users = frappe.get_all(\n        \"User Group Member\",\n        filters=[[\"parent\", \"=\", self.group]],\n        fields=[\"user\"],\n    )\n    email_ids = [d.user for d in group_users]\n    # send the email\n    subject = _(\"Daily Summary for {0}\").format(self.group)\n    message_ids = [d.message_id for d in messages]\n    content = get_summary_content(messages)\n    frappe.sendmail(\n        recipients=email_ids,\n        subject=subject,\n        message=content,\n        reference_doctype=\"Message\",\n        reference_name=message_ids,\n    )\n    # update the status\n    self.status = \"Sent\"\n    self.save()\n\n", "CodeBleu_score": 37.38565604687915}, {"code": "def send_summary(self)\n\t\n    message = frappe.get_doc(\"Communication\", self.message)\n    email_ids = frappe.get_all(\n        \"User\",\n        filters={\"name\": (\"in\", message.recipients)},\n        fields=[\"email\"],\n    )\n    email_ids = [x.email for x in email_ids]\n    if not email_ids:\n        return\n    content = get_content(message)\n    email_args = {\n        \"recipients\": email_ids,\n        \"subject\": _(\"Daily Summary\"),\n        \"content\": content,\n        \"reference_doctype\": message.reference_doctype,\n        \"reference_name\": message.reference_name,\n        \"communication_medium\": \"Email\",\n        \"send_email\": True,\n    }\n    frappe.enqueue(\n        \"frappe.email.doctype.email_queue.email_queue.send_email_queue\",\n        email_args=email_args,\n    )\n    self.status = \"Sent\"\n    self.save()\n\n", "CodeBleu_score": 30.84695007004441}, {"code": "def send_summary(self)\n\t\n    from_address = frappe.db.get_single_value(\"System Settings\", \"outgoing_email_id\")\n    if not from_address:\n        from_address = \"support@erpnext.com\"\n\n    email_list = get_email_list(self.group_name)\n    if not email_list:\n        return\n\n    message_details = get_message_details(self.message_name)\n    if not message_details:\n        return\n\n    # get the email addresses of users in the specified group\n    email_list = get_email_list(self.group_name)\n    if not email_list:\n        return\n\n    # send an email with the summary using a template\n    email_args = {\n        \"recipients\": email_list,\n        \"subject\": _(\"Daily Summary of {0}\").format(message_details.subject),\n        \"reference_doctype\": message_details.doctype,\n        \"reference_name\": message_details.name,\n        \"from_address\": from_address,\n        \"template\": \"daily_summary\",\n        \"args\": {\"message_details\": message_details},\n    }\n    frappe.sendmail(**email_args)\n\n    # update the status to \"Sent\"\n    self.status = \"Sent\"\n    self.save()\n\n", "CodeBleu_score": 36.818236268612026}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t\n    if not self.job_applicant:\n        return\n\n    duplicate_interview = frappe.db.exists(\n        \"Interview\",\n        {\n            \"job_applicant\": self.job_applicant,\n            \"interview_round\": self.interview_round,\n            \"name\": [\"<>\", self.name],\n        },\n    )\n    if duplicate_interview:\n        interview = frappe.get_doc(\"Interview\", duplicate_interview)\n        job_applicant_link = get_link_to_form(\"Job Applicant\", interview.job_applicant)\n        raise frappe.exceptions.ValidationError(\n            _(\n                \"Job Applicant {0} is already scheduled for interview in {1}.<br>\"\n                \"Please check the existing interview record: {2}\"\n            ).format(\n                interview.job_applicant_name,\n                interview.interview_round_name,\n                job_applicant_link,\n            )\n        )\n\n", "CodeBleu_score": 44.44801189498307}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.interview_round:\n        interview_round = frappe.get_doc(\"Interview Round\", self.interview_round)\n        if interview_round.interview_type == \"Round Robin\":\n            if self.job_applicant:\n                job_applicant = frappe.get_doc(\"Job Applicant\", self.job_applicant)\n                if job_applicant.status != \"Open\":\n                    frappe.throw(\n                        _(\"Job Applicant {0} is not allowed to appear twice for the same interview round\").format(\n                            get_link_to_form(\"Job Applicant\", self.job_applicant)\n                        )\n                    )\n                else:\n                    job_applicant.status = \"Interviewed\"\n                    job_applicant.save()\n\n            interview_round.append(\"job_applicants\", {\"job_applicant\": self.job_applicant})\n            interview_round.save()\n\n", "CodeBleu_score": 41.728138223590975}, {"code": "def validate_duplicate_interview(self)\n\t\n    duplicate_interview = frappe.db.exists(\n        \"Interview\",\n        {\n            \"job_applicant\": self.job_applicant,\n            \"interview_round\": self.interview_round,\n            \"docstatus\": 1,\n            \"name\": [\"<>\", self.name],\n        },\n    )\n    if duplicate_interview:\n        frappe.throw(\n            _(\n                \"Job Applicant {0} already appeared for this Interview Round. Please check the Interview record: {1}\"\n            ).format(\n                get_link_to_form(\"Job Applicant\", self.job_applicant),\n                get_link_to_form(\"Interview\", duplicate_interview),\n            ),\n            title=_(\"Duplicate Interview\"),\n        )\n\n", "CodeBleu_score": 37.44928171882727}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\t\n    total_rating = 0\n    total_assessments = 0\n    for assessment in self.assessments:\n        if assessment.rating:\n            total_rating += assessment.rating\n            total_assessments += 1\n    if total_assessments > 0:\n        self.average_rating = flt(total_rating / total_assessments, 1)\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 31.44900735453524}, {"code": "def calculate_average_rating(self)\n\t\n    total_rating = 0\n    count = 0\n\n    for skill_assessment in self.skill_assessments:\n        if skill_assessment.rating:\n            total_rating += skill_assessment.rating\n            count += 1\n\n    if count > 0:\n        self.average_rating = total_rating / count\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 29.767490513765278}, {"code": "def calculate_average_rating(self)\n\t\n    total_rating = 0\n    total_assessments = 0\n\n    for assessment in self.skill_assessment:\n        if assessment.rating:\n            total_rating += assessment.rating\n            total_assessments += 1\n\n    if total_assessments > 0:\n        self.average_rating = flt(total_rating / total_assessments, 2)\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 32.2931455221161}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc('Interview')\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    interview.interview_details = []\n\n    if doc.get('interviewers'):\n        for interviewer in doc.get('interviewers'):\n            interview_detail = frappe.new_doc('Interview Detail')\n            interview_detail.interviewer = interviewer\n            interview.append('interview_details', interview_detail)\n\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 38.763272503549906}, {"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    interview.interview_details = []\n    if doc.interviewers:\n        for interviewer in doc.interviewers:\n            interview_detail = frappe.new_doc(\"Interview Details\")\n            interview_detail.interviewer = interviewer\n            interview.append(\"interview_details\", interview_detail)\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 44.20486569942096}, {"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    if doc.interviewers:\n        for interviewer in doc.interviewers:\n            interview.append(\"interview_details\", {\n                \"interviewer\": interviewer.interviewer,\n                \"interviewer_name\": interviewer.interviewer_name\n            })\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 42.481385897734796}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offer = frappe.db.sql(\n        \"\"\"\n        SELECT name\n        FROM `tabJob Offer`\n        WHERE designation = %s AND company = %s AND status = 1 AND\n        (from_date BETWEEN %s AND %s) OR (to_date BETWEEN %s AND %s)\n        \"\"\",\n        (self.designation, self.company, from_date, to_date, from_date, to_date),\n    )\n    return [x[0] for x in job_offer]\n\n", "CodeBleu_score": 32.66246987536497}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offer = frappe.db.sql(\n        \"\"\"\n        SELECT name\n        FROM `tabJob Offer`\n        WHERE designation = %(designation)s\n        AND company = %(company)s\n        AND docstatus = 1\n        AND posting_date BETWEEN %(from_date)s AND %(to_date)s\n    \"\"\",\n        {\"designation\": self.designation, \"company\": self.company, \"from_date\": from_date, \"to_date\": to_date},\n        as_dict=1,\n    )\n    return [x.name for x in job_offer]\n\n", "CodeBleu_score": 45.82494946639071}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    return frappe.db.sql(\n        \"\"\"\n        SELECT\n            name\n        FROM\n            `tabJob Offer`\n        WHERE\n            designation = %s\n            AND company = %s\n            AND docstatus = 1\n            AND (from_date BETWEEN %s AND %s\n                OR to_date BETWEEN %s AND %s)\n        \"\"\",\n        (\n            self.designation,\n            self.company,\n            from_date,\n            to_date,\n            from_date,\n            to_date,\n        ),\n    )\n\n", "CodeBleu_score": 31.104451431105694}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    filters = {}\n    if company:\n        filters[\"company\"] = company\n    if department:\n        filters[\"department\"] = department\n\n    total_job_offers = frappe.db.count(\n        \"Job Offer\",\n        filters=filters,\n        filters=[[\"docstatus\", \"=\", 1]],\n    )\n    accepted_job_offers = frappe.db.count(\n        \"Job Offer\",\n        filters=filters,\n        filters=[[\"docstatus\", \"=\", 1], [\"status\", \"=\", \"Accepted\"]],\n    )\n    if not total_job_offers:\n        return 0.0, \"Percent\"\n    return flt(accepted_job_offers / total_job_offers, 3) * 100, \"Percent\"\n\n", "CodeBleu_score": 45.12420343915913}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    filters = {}\n    if company:\n        filters[\"company\"] = company\n    if department:\n        filters[\"department\"] = department\n\n    total_offers = frappe.db.count(\"Job Offer\", filters=filters)\n    accepted_offers = frappe.db.count(\n        \"Job Offer\",\n        filters={\"status\": \"Accepted\", \"docstatus\": 1, **filters},\n    )\n\n    if total_offers:\n        acceptance_rate = flt(accepted_offers) / flt(total_offers) * 100\n        return acceptance_rate, \"Percent\"\n    else:\n        return 0, \"Percent\"\n\n", "CodeBleu_score": 56.63971533086157}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    filters = {}\n    if company:\n        filters[\"company\"] = company\n    if department:\n        filters[\"department\"] = department\n\n    total_offers = frappe.db.count(\"Job Offer\", filters=filters)\n    accepted_offers = frappe.db.count(\n        \"Job Offer\",\n        filters={\n            \"docstatus\": 1,\n            \"status\": \"Accepted\",\n            \"company\": company,\n            \"department\": department,\n        },\n    )\n    if total_offers:\n        acceptance_rate = (accepted_offers / total_offers) * 100\n    else:\n        acceptance_rate = 0\n\n    return acceptance_rate\n\n", "CodeBleu_score": 50.24086928690507}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t    Result result = this.employerService.register(employerForRegisterDto);\n    if (!result.isSuccess()) {\n        return new ResponseEntity<Result>(result, HttpStatus.BAD_REQUEST);\n    }\n    return new ResponseEntity<Result>(result, HttpStatus.OK);\n}", "CodeBleu_score": 54.31302123384253}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t    final Result result = employerService.register(employerForRegisterDto);\n    if (!result.isSuccess()) {\n        return new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n    }\n    return new ResponseEntity<>(result, HttpStatus.OK);\n}", "CodeBleu_score": 74.12127052828261}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t    final Result result = this.employerService.register(employerForRegisterDto);\n    if (!result.isSuccess()) {\n        return new ResponseEntity<Result>(result, HttpStatus.BAD_REQUEST);\n    }\n    return new ResponseEntity<Result>(result, HttpStatus.OK);\n}", "CodeBleu_score": 60.399511148655805}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t    Optional<CompanyStaff> companyStaff = this.companyStaffDao.findById(companyStaffForUpdateDto.getId());\n    if (companyStaff.isEmpty()) {\n        return new ErrorResult(Messages.CompanyStaffNotFound);\n    }\n    if (!companyStaff.get().getPassword().equals(companyStaffForUpdateDto.getPassword())) {\n        return new ErrorResult(Messages.CompanyStaffPasswordNotMatch);\n    }\n    companyStaff.get().setFirstName(companyStaffForUpdateDto.getFirstName());\n    companyStaff.get().setLastName(companyStaffForUpdateDto.getLastName());\n    this.companyStaffDao.save(companyStaff.get());\n    return new SuccessResult(Messages.CompanyStaffUpdated);\n}", "CodeBleu_score": 44.31964552778349}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t    Optional<CompanyStaff> companyStaff = this.companyStaffDao.findById(companyStaffForUpdateDto.getId());\n    if (!companyStaff.isPresent()) {\n        return new ErrorResult(Messages.CompanyStaffNotFound);\n    }\n    if (!companyStaffForUpdateDto.getPassword().equals(companyStaff.get().getPassword())) {\n        return new ErrorResult(Messages.PasswordNotMatch);\n    }\n    companyStaff.get().setFirstName(companyStaffForUpdateDto.getFirstName());\n    companyStaff.get().setLastName(companyStaffForUpdateDto.getLastName());\n    this.companyStaffDao.save(companyStaff.get());\n    return new SuccessResult(Messages.CompanyStaffUpdated);\n}", "CodeBleu_score": 44.31512506895523}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t    final Optional<CompanyStaff> staff = companyStaffDao.findById(companyStaffForUpdateDto.getId());\n    if (!staff.isPresent()) {\n        return new ErrorResult(Messages.staffNotFound);\n    }\n    final CompanyStaff staffToUpdate = staff.get();\n    final Result result = BusinessRules.run(checkIfPasswordMatches(companyStaffForUpdateDto.getPassword(), staffToUpdate.getPassword()));\n    if (!result.isSuccess()) {\n        return result;\n    }\n    staffToUpdate.setFirstName(companyStaffForUpdateDto.getFirstName());\n    staffToUpdate.setLastName(companyStaffForUpdateDto.getLastName());\n    companyStaffDao.save(staffToUpdate);\n    return new SuccessResult(Messages.staffUpdated);\n}", "CodeBleu_score": 55.22769969822057}]}
