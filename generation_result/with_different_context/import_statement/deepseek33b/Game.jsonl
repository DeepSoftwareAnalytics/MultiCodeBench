{"instance_id": "47ee1dae200b", "generation_result": [{"code": "public static void PreloadDll(string dllName){\n\t    string dllDirectory = Path.GetDirectoryName(typeof(PreloadDll).Assembly.Location);\n\n    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n        // Windows\n        LoadLibrary(Path.Combine(dllDirectory, dllName));\n    } else {\n        // Linux or macOS\n        dlopen(Path.Combine(dllDirectory, dllName), RTLD_NOW | RTLD_GLOBAL);\n    }\n}", "CodeBleu_score": 48.95712468538918}, {"code": "public static void PreloadDll(string dllName){\n\t    string dllDirectory = Path.GetDirectoryName(dllName);\n\n    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n        // Windows\n        LoadLibrary(dllName);\n    } else {\n        // Posix\n        dlopen(dllName, RTLD_NOW | RTLD_GLOBAL);\n    }\n}", "CodeBleu_score": 30.837398638377834}, {"code": "public static void PreloadDll(string dllName){\n\t    string dllDirectory = Path.Combine(Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().Location), \"dlls\");\n\n    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n        LoadLibrary(Path.Combine(dllDirectory, dllName + \".dll\"));\n    } else {\n        dlopen(Path.Combine(dllDirectory, \"lib\" + dllName + \".so\"), RTLD_NOW | RTLD_GLOBAL);\n    }\n}", "CodeBleu_score": 25.362228847138056}]}
{"instance_id": "2073a8291d05", "generation_result": [{"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t    if (originalPath is null) {\n        throw new ArgumentNullException(nameof(originalPath))\n    }\n    if (originalPath.EndsWith(\".assets.resS\", StringComparison.Ordinal)) {\n        originalPath = originalPath[..^5]\n    }\n    if (originalPath.EndsWith(\".assets\", StringComparison.Ordinal)) {\n        originalPath = originalPath[..^7]\n    }\n    var fileName = Path.GetFileName(originalPath)\n    if (m_assetsFileList.Any(x => x.OriginalPath == originalPath)) {\n        return\n    }\n    if (originalPath.EndsWith(\".assets\", StringComparison.Ordinal)) {\n        var file = new SerializedFile()\n        try {\n            file.Read(reader, originalPath, fileName, unityVersion)\n        } catch (Exception ex) {\n            Logger.Error($\"Failed to load {fileName}: {ex.Message}\")\n            return\n        }\n        m_assetsFileList.Add(file)\n    } else if (originalPath.EndsWith(\".assets.resS\", StringComparison.Ordinal)) {\n        var file = new SerializedFile()\n        try {\n            file.Read(reader, originalPath, fileName, unityVersion)\n        } catch (Exception ex) {\n            Logger.Error($\"Failed to load {fileName}: {ex.Message}\")\n            return\n        }\n        m_assetsFileList.Add(file)\n    } else {\n        Logger.Warning($\"Skipped {fileName} because it is not an asset file\")\n    }\n}", "CodeBleu_score": 40.311785189011566}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t    if (originalPath == null) {\n        return\n    }\n\n    var file = new SerializedFile()\n    file.m_Reader = reader\n    file.m_PathName = originalPath\n    file.m_SourcePath = originalPath\n    file.m_EndianType = reader.m_EndianType\n    file.m_Generation = reader.m_Generation\n    file.m_FileSize = reader.m_FileSize\n    file.m_TargetPlatform = reader.m_TargetPlatform\n    file.m_SerializedFileFormatVersion = reader.m_SerializedFileFormatVersion\n    file.m_EnableTypeTree = reader.m_EnableTypeTree\n    file.m_HasTypeTree = reader.m_HasTypeTree\n    file.m_TypeTree = reader.m_TypeTree\n    file.m_Version = reader.m_Version\n    file.m_MetadataSize = reader.m_MetadataSize\n    file.m_AssetCount = reader.m_AssetCount\n    file.m_BaseFieldCount = reader.m_BaseFieldCount\n    file.m_Size = reader.m_Size\n    file.m_ScriptFormats = reader.m_ScriptFormats\n    file.m_ObjectInfo = reader.m_ObjectInfo\n    file.m_AssetInfo = reader.m_AssetInfo\n    file.m_TypeTree = reader.m_TypeTree\n    file.m_TypeTree = reader.m_TypeTree\n    file.m_Externals = reader.m_Externals\n    file.m_RefTypes = reader.m_RefTypes\n    file.m_PathIDs = reader.m_PathIDs\n    file.m_Unknown = reader.m_Unknown\n    file.m_EnableTypeTree = reader.m_EnableTypeTree\n    file.m_Unknown = reader.m_Unknown\n    file.m_Unknown = reader.m_Unknown\n    file.m_Unknown = reader.m_Unknown\n    file.m_Unknown = reader.m_Unknown\n    file.m_Unknown = reader.m_Unknown\n    file.m_Unknown = reader.m_Unknown\n    file.m_Unknown = reader.m_", "CodeBleu_score": 28.35241828726891}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t    if (!reader.CheckFileType()) {\n        Log(LogLevel.Warning, $\"File {originalPath} is not an asset file\");\n        return;\n    }\n\n    if (AssetFiles.Any(x => x.OriginalPath == originalPath)) {\n        Log(LogLevel.Warning, $\"File {originalPath} is already loaded\");\n        return;\n    }\n\n    var file = new SerializedFile();\n    file.OriginalPath = originalPath;\n    file.UnityVersion = unityVersion;\n    file.File = reader;\n\n    if (file.File.BundleType == BundleFileType.Web) {\n        file.File.ByteStart = 0;\n        file.File.ByteSize = (int)file.File.Reader.BaseStream.Length;\n    }\n\n    file.Read();\n\n    if (file.Metadata == null) {\n        Log(LogLevel.Warning, $\"File {originalPath} is not a valid asset file\");\n        return;\n    }\n\n    if (file.Metadata.ScriptType != ScriptType.MonoBehaviour) {\n        Log(LogLevel.Warning, $\"File {originalPath} is not a MonoBehaviour asset file\");\n        return;\n    }\n\n    AssetFiles.Add(file);\n}", "CodeBleu_score": 39.44034270371497}]}
{"instance_id": "5dacc6a26301", "generation_result": [{"code": "public ImportedFrame FindFrameByPath(string path){\n\t    string name = Path.GetFileNameWithoutExtension(path);\n    List<ImportedFrame> frames = this.FindChildFramesByName(name);\n    foreach (ImportedFrame frame in frames) {\n        if (frame.Path == path) {\n            return frame;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 58.02460821338955}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\t    string frameName = Path.GetFileName(path);\n    foreach (ImportedFrame frame in ChildFrames) {\n        if (frame.Name == frameName) {\n            if (frame.Path == path) {\n                return frame;\n            }\n        }\n    }\n    return null;\n}", "CodeBleu_score": 57.364420586187606}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\t    string[] pathParts = path.Split('/');\n    string frameName = pathParts[pathParts.Length - 1];\n\n    foreach (ImportedFrame child in childFrames) {\n        if (child.name == frameName && child.path == path) {\n            return child;\n        }\n    }\n\n    return null;\n}", "CodeBleu_score": 53.33193291892546}]}
{"instance_id": "c20b04c4ad37", "generation_result": [{"code": "public static FileReader DecompressGZip(FileReader reader){\n\t    using var memoryStream = new MemoryStream();\n    using var gzipStream = new GZipStream(reader.BaseStream, CompressionMode.Decompress);\n    gzipStream.CopyTo(memoryStream);\n    memoryStream.Position = 0;\n    return new FileReader(memoryStream);\n}", "CodeBleu_score": 61.91848977484034}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\t    using (var memoryStream = new MemoryStream()) {\n        using (var gzipStream = new GZipStream(reader.BaseStream, CompressionMode.Decompress)) {\n            gzipStream.CopyTo(memoryStream);\n        }\n        memoryStream.Position = 0;\n        return new FileReader(memoryStream);\n    }\n}", "CodeBleu_score": 67.25482998036955}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\t    using (var memoryStream = new MemoryStream()) {\n        using (var gZipStream = new GZipStream(reader.BaseStream, CompressionMode.Decompress)) {\n            gZipStream.CopyTo(memoryStream);\n        }\n        memoryStream.Position = 0;\n        return new FileReader(memoryStream);\n    }\n}", "CodeBleu_score": 67.25482998036955}]}
{"instance_id": "11ce5c7b009d", "generation_result": [{"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t    // Create a collection to hold non-switch strings\n    ArrayList nonSwitchStrings = new ArrayList();\n\n    // Iterate through the command strings\n    foreach (string commandString in commandStrings) {\n        // Check if the command string is the stop token\n        if (commandString == \"--\") {\n            // Stop parsing switches\n            break;\n        }\n\n        // Check if the command string matches a switch form\n        bool isSwitch = false;\n        foreach (SwitchForm switchForm in switchForms) {\n            if (commandString.StartsWith(switchForm.Switch)) {\n                // Parse the switch and add it to the collection of switches\n                ParseSwitch(switchForm, commandString);\n                isSwitch = true;\n                break;\n            }\n        }\n\n        // If the command string is not a switch, add it to the collection of non-switch strings\n        if (!isSwitch) {\n            nonSwitchStrings.Add(commandString);\n        }\n    }\n\n    // Print the collection of non-switch strings\n    Console.WriteLine(\"Non-switch strings:\");\n    foreach (string nonSwitchString in nonSwitchStrings) {\n        Console.WriteLine(nonSwitchString);\n    }\n}", "CodeBleu_score": 42.5492126931022}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t    // Iterate through the command strings\n    for (int i = 0; i < commandStrings.Length; i++) {\n        // Get the current command string\n        string commandString = commandStrings[i];\n\n        // Check if the command string is the stop token\n        if (commandString == \"--\") {\n            // Stop parsing switches\n            break;\n        }\n\n        // Check if the command string matches a switch\n        bool isSwitch = false;\n        foreach (SwitchForm switchForm in switchForms) {\n            if (commandString.StartsWith(switchForm.Switch)) {\n                // Parse the switch\n                string switchValue = commandString.Substring(switchForm.Switch.Length);\n                switchForm.Parse(switchValue);\n                isSwitch = true;\n                break;\n            }\n        }\n\n        // If the command string is not a switch, add it to the collection of non-switch strings\n        if (!isSwitch) {\n            nonSwitchStrings.Add(commandString);\n        }\n    }\n}", "CodeBleu_score": 42.2611924515426}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t    // Create a collection of non-switch strings\n    ArrayList nonSwitchStrings = new ArrayList();\n\n    // Iterate through the command strings\n    foreach (string commandString in commandStrings) {\n        // Check if the command string is a switch\n        bool isSwitch = false;\n        foreach (SwitchForm switchForm in switchForms) {\n            if (commandString.StartsWith(switchForm.Switch)) {\n                // If the command string is a switch, set the isSwitch flag to true\n                isSwitch = true;\n\n                // Check if the command string is a stop token\n                if (switchForm.IsStopToken) {\n                    // If the command string is a stop token, stop parsing switches\n                    break;\n                }\n\n                // Process the switch\n                ProcessSwitch(switchForm, commandString);\n            }\n        }\n\n        // If the command string is not a switch, add it to the collection of non-switch strings\n        if (!isSwitch) {\n            nonSwitchStrings.Add(commandString);\n        }\n    }\n\n    // Process the non-switch strings\n    ProcessNonSwitchStrings(nonSwitchStrings);\n}", "CodeBleu_score": 38.361358352574925}]}
{"instance_id": "b8da2d0a3f76", "generation_result": [{"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t    imageData = m_Texture2D.GetRawTextureData();\n    width = m_Texture2D.width;\n    height = m_Texture2D.height;\n    textureFormat = m_Texture2D.format;\n    version = m_Texture2D.imageContentsHash.ToString();\n    platform = Application.platform.ToString();\n    outputSize = m_Texture2D.GetRawTextureData().Length;\n}", "CodeBleu_score": 45.932776321964056}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t    this.m_Texture2D = m_Texture2D;\n    this.imageData = m_Texture2D.GetRawTextureData();\n    this.width = m_Texture2D.width;\n    this.height = m_Texture2D.height;\n    this.textureFormat = m_Texture2D.format;\n    this.version = m_Texture2D.version;\n    this.platform = m_Texture2D.platform;\n    this.outputSize = new Vector2Int(this.width, this.height);\n}", "CodeBleu_score": 33.865026584171595}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t    // Extract image data from the Texture2D object\n    imageData = m_Texture2D.GetRawTextureData();\n\n    // Extract width and height from the Texture2D object\n    width = m_Texture2D.width;\n    height = m_Texture2D.height;\n\n    // Extract texture format from the Texture2D object\n    textureFormat = m_Texture2D.format;\n\n    // Extract version from the Texture2D object\n    version = m_Texture2D.version;\n\n    // Extract platform from the Texture2D object\n    platform = m_Texture2D.platform;\n\n    // Extract output size from the Texture2D object\n    outputSize = m_Texture2D.outputSize;\n}", "CodeBleu_score": 52.98450542846594}]}
{"instance_id": "4d1412b550a3", "generation_result": [{"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t    result.Clear();\n    for (int i = 0; i < sp.arraySize; i++) {\n        var prop = sp.GetArrayElementAtIndex(i);\n        var name = prop.FindPropertyRelative(\"name\").stringValue;\n        if (!string.IsNullOrEmpty(name)) {\n            result.Add(name);\n        }\n    }\n    if (result.Count == 0) {\n        return \"Nothing\";\n    }\n    return string.Join(\", \", result.ToArray());\n}", "CodeBleu_score": 40.410310146436665}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t    result.Clear();\n    for (int i = 0; i < sp.arraySize; i++) {\n        var prop = sp.GetArrayElementAtIndex(i);\n        if (prop.boolValue) {\n            result.Add(prop.displayName);\n        }\n    }\n    if (result.Count == 0) {\n        return \"Nothing\";\n    }\n    return string.Join(\", \", result);\n}", "CodeBleu_score": 40.84495316769024}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t    result.Clear();\n    for (int i = 0; i < sp.arraySize; i++) {\n        var p = sp.GetArrayElementAtIndex(i);\n        if (p.boolValue) {\n            result.Add(p.name);\n        }\n    }\n    if (result.Count == 0) {\n        return \"Nothing\";\n    }\n    return string.Join(\", \", result);\n}", "CodeBleu_score": 40.24991765411422}]}
{"instance_id": "5014bde74f8b", "generation_result": [{"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t    if (add == sp.Contains(new GUIContent(prop.name))) return;\n    var name = new GUIContent(prop.name);\n    var type = new GUIContent(prop.type.ToString());\n    menu.AddItem(name, add, () => {\n        var newProps = new List<GUIContent>();\n        if (add) {\n            newProps.Add(name);\n            newProps.Add(type);\n        }\n        newProps.AddRange(sp.GetArrayElementContents().Select(x => x.FindPropertyRelative(\"name\").FindPropertyRelative(\"_text\").stringValue));\n        sp.arraySize = newProps.Count;\n        for (var i = 0; i < newProps.Count; i++) {\n            var element = sp.GetArrayElementAtIndex(i);\n            element.FindPropertyRelative(\"name\").FindPropertyRelative(\"_text\").stringValue = newProps[i].text;\n        }\n        sp.serializedObject.ApplyModifiedProperties();\n    });\n}", "CodeBleu_score": 46.09912726653807}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t    if (!add && !sp.GetArrayElementNames().Contains(prop.name))\n        return;\n\n    var str = new StringBuilder();\n    str.Append(prop.name);\n    str.Append(\" (\");\n    str.Append(prop.type);\n    str.Append(\")\");\n\n    menu.AddItem(new GUIContent(str.ToString()), add, () => {\n        var array = sp.FindPropertyRelative(\"m_SavedProperties\");\n        var names = array.GetArrayElementNames();\n        var index = array.arraySize;\n\n        if (add) {\n            array.InsertArrayElementAtIndex(index);\n            var element = array.GetArrayElementAtIndex(index);\n            element.FindPropertyRelative(\"m_Name\").stringValue = prop.name;\n            element.FindPropertyRelative(\"m_Type\").intValue = (int)prop.type;\n        } else {\n            var index = names.ToList().IndexOf(prop.name);\n            array.DeleteArrayElementAtIndex(index);\n        }\n\n        sp.serializedObject.ApplyModifiedProperties();\n    });\n}", "CodeBleu_score": 52.72282766382192}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t    if (add) {\n        if (!IsActive(sp, prop.name)) {\n            menu.AddItem(new GUIContent(prop.name), false, (item) => {\n                sp.arraySize++;\n                sp.GetArrayElementAtIndex(sp.arraySize - 1).FindPropertyRelative(\"name\").stringValue = prop.name;\n                sp.GetArrayElementAtIndex(sp.arraySize - 1).FindPropertyRelative(\"type\").stringValue = prop.type.ToString();\n                sp.serializedObject.ApplyModifiedProperties();\n            });\n        }\n    } else {\n        if (IsActive(sp, prop.name)) {\n            menu.AddItem(new GUIContent(prop.name), false, (item) => {\n                RemoveProperty(sp, prop.name);\n            });\n        }\n    }\n}", "CodeBleu_score": 39.547311350008044}]}
{"instance_id": "20e390481814", "generation_result": [{"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t    bool changed = false;\n    if (showXyz) {\n        EditorGUI.BeginChangeCheck();\n        EditorGUI.PropertyField(position, sp, label);\n        if (EditorGUI.EndChangeCheck()) {\n            changed = true;\n        }\n    } else {\n        EditorGUI.BeginChangeCheck();\n        float newX = EditorGUI.FloatField(position, sp.displayName, sp.vector3Value.x);\n        if (EditorGUI.EndChangeCheck()) {\n            sp.vector3Value = new Vector3(newX, newX, newX);\n            changed = true;\n        }\n    }\n    return changed;\n}", "CodeBleu_score": 24.909227185038425}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t    var changed = false;\n    var x = sp.vector3Value.x;\n    var y = sp.vector3Value.y;\n    var z = sp.vector3Value.z;\n\n    var xyz = x.Approximately(y) && y.Approximately(z);\n    if (xyz) {\n        EditorGUI.BeginChangeCheck();\n        x = EditorGUILayout.FloatField(\"Value\", x);\n        if (EditorGUI.EndChangeCheck()) {\n            sp.vector3Value = new Vector3(x, x, x);\n            changed = true;\n        }\n    } else {\n        EditorGUI.BeginChangeCheck();\n        if (showXyz) {\n            var newVec = EditorGUILayout.Vector3Field(\"\", sp.vector3Value);\n            if (EditorGUI.EndChangeCheck()) {\n                sp.vector3Value = newVec;\n                changed = true;\n            }\n        } else {\n            x = EditorGUILayout.FloatField(\"X\", x);\n            y = EditorGUILayout.FloatField(\"Y\", y);\n            z = EditorGUILayout.FloatField(\"Z\", z);\n            if (EditorGUI.EndChangeCheck()) {\n                sp.vector3Value = new Vector3(x, x, x);\n                changed = true;\n            }\n        }\n    }\n\n    if (showXyz) {\n        if (GUILayout.Button(xyz ? \"Single\" : \"Vector3\", EditorStyles.miniButton)) {\n            sp.vector3Value = xyz ? new Vector3(x, x, x) : sp.vector3Value;\n            changed = true;\n        }\n    }\n\n    return changed;\n}", "CodeBleu_score": 39.18366726899897}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t    var isVector3 = sp.isArray;\n    var value = sp.vector3Value;\n    var xyz = new float[3] { value.x, value.y, value.z };\n    var isSingle = xyz.All(v => Mathf.Approximately(v, xyz[0]));\n    var isMulti = !isSingle && xyz.Any(v => !Mathf.Approximately(v, xyz[0]));\n\n    if (showXyz) {\n        EditorGUI.BeginChangeCheck();\n        value = EditorGUILayout.Vector3Field(sp.displayName, value);\n        if (EditorGUI.EndChangeCheck()) {\n            sp.vector3Value = value;\n            return true;\n        }\n    } else {\n        if (isVector3) {\n            EditorGUI.BeginChangeCheck();\n            xyz[0] = EditorGUILayout.FloatField(sp.displayName, xyz[0]);\n            if (EditorGUI.EndChangeCheck()) {\n                sp.vector3Value = new Vector3(xyz[0], xyz[0], xyz[0]);\n                return true;\n            }\n        } else {\n            EditorGUI.BeginChangeCheck();\n            xyz[0] = EditorGUILayout.FloatField(sp.displayName, xyz[0]);\n            if (EditorGUI.EndChangeCheck()) {\n                sp.floatValue = xyz[0];\n                return true;\n            }\n        }\n    }\n\n    if (isSingle) {\n        if (GUILayout.Button(\"Single\", EditorStyles.miniButtonLeft)) {\n            sp.vector3Value = new Vector3(xyz[0], xyz[0], xyz[0]);\n            return true;\n        }\n    } else if (isMulti) {\n        if (GUILayout.Button(\"Vector3\", EditorStyles.miniButtonRight)) {\n            sp.floatValue = xyz[0];\n            return true;\n        }\n    }\n\n    return false;", "CodeBleu_score": 35.66165729564203}]}
{"instance_id": "c3587cbcda7e", "generation_result": [{"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t    // Create a new material entry with the given parameters\n    MaterialEntry entry = new MaterialEntry(baseMat, texture, id, props);\n\n    // Check if the entry already exists in the list\n    MaterialEntry existingEntry = null;\n    foreach (MaterialEntry e in entries) {\n        if (e.Equals(entry)) {\n            existingEntry = e;\n            break;\n        }\n    }\n\n    // If the entry already exists, increment its count and return the custom material\n    if (existingEntry != null) {\n        existingEntry.count++;\n        return existingEntry.customMaterial;\n    }\n\n    // If the entry doesn't exist, create a new material and add it to the list\n    Material customMat = new Material(baseMat);\n    customMat.mainTexture = texture;\n    customMat.SetInt(\"_Id\", id);\n    customMat.SetInt(\"_Properties\", props);\n    entry.customMaterial = customMat;\n    entries.Add(entry);\n\n    // Return the new custom material\n    return customMat;\n}", "CodeBleu_score": 29.926408521535542}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t    for (int i = 0; i < materials.Count; i++) {\n        if (materials[i].baseMat == baseMat && materials[i].texture == texture && materials[i].id == id && materials[i].props == props) {\n            materials[i].count++;\n            return materials[i].customMat;\n        }\n    }\n\n    MaterialEntry newEntry = new MaterialEntry();\n    newEntry.baseMat = baseMat;\n    newEntry.texture = texture;\n    newEntry.id = id;\n    newEntry.props = props;\n    newEntry.customMat = new Material(baseMat);\n    newEntry.customMat.mainTexture = texture;\n    newEntry.customMat.SetInt(\"_ID\", id);\n    newEntry.customMat.SetInt(\"_Props\", props);\n    newEntry.count = 1;\n    materials.Add(newEntry);\n    return newEntry.customMat;\n}", "CodeBleu_score": 33.59328696543075}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t    // Check if the list of materials is null\n    if (materials == null) {\n        // Initialize the list of materials\n        materials = new List<MaterialEntry>();\n    }\n\n    // Iterate over the list of materials\n    for (int i = 0; i < materials.Count; i++) {\n        // Check if the base material, texture, id, and properties match the current material entry\n        if (materials[i].baseMat == baseMat && materials[i].texture == texture && materials[i].id == id && materials[i].props == props) {\n            // Increment the count of the current material entry\n            materials[i].count++;\n            // Return the custom material of the current material entry\n            return materials[i].customMat;\n        }\n    }\n\n    // Create a new material entry\n    MaterialEntry newEntry = new MaterialEntry();\n    // Set the base material, texture, id, and properties of the new material entry\n    newEntry.baseMat = baseMat;\n    newEntry.texture = texture;\n    newEntry.id = id;\n    newEntry.props = props;\n    // Create a new custom material using the base material\n    newEntry.customMat = new Material(baseMat);\n    // Set the texture of the custom material\n    newEntry.customMat.mainTexture = texture;\n    // Set the name of the custom material\n    newEntry.customMat.name = \"CustomMat (\" + (materials.Count + 1) + \")\";\n    // Set the count of the new material entry to 1\n    newEntry.count = 1;\n    // Add the new material entry to the list of materials\n    materials.Add(newEntry);\n    // Return the custom material of the new material entry\n    return newEntry.customMat;\n}", "CodeBleu_score": 34.715350020548975}]}
{"instance_id": "a35149bc8b8b", "generation_result": [{"code": "public static void Remove(Material customMat){\n\t    if (customMat == null) {\n        Debug.LogError(\"Custom material is null.\");\n        return;\n    }\n\n    for (int i = 0; i < customMaterials.Count; i++) {\n        if (customMaterials[i].material == customMat) {\n            customMaterials[i].count--;\n\n            if (customMaterials[i].count <= 0) {\n                Destroy(customMaterials[i].material);\n                customMaterials[i].material = null;\n                customMaterials.RemoveAt(i);\n            }\n\n            return;\n        }\n    }\n}", "CodeBleu_score": 35.53885765456733}, {"code": "public static void Remove(Material customMat){\n\t    if (customMat == null) return;\n\n    for (int i = 0; i < entries.Count; i++) {\n        if (entries[i].material == customMat) {\n            entries[i].count--;\n\n            if (entries[i].count <= 0) {\n                entries.RemoveAt(i);\n                Destroy(customMat);\n                return;\n            }\n        }\n    }\n}", "CodeBleu_score": 37.184581967962686}, {"code": "public static void Remove(Material customMat){\n\t    if (!customMat) return;\n\n    for (int i = 0; i < entries.Count; i++) {\n        if (entries[i].mat == customMat) {\n            entries[i].count--;\n\n            if (entries[i].count <= 0) {\n                entries[i].mat.Destroy();\n                entries[i].mat = null;\n                entries.RemoveAt(i);\n            }\n\n            return;\n        }\n    }\n}", "CodeBleu_score": 42.42003147739392}]}
{"instance_id": "892bbee52ab9", "generation_result": [{"code": "private void RefreshParticles(GameObject root){\n\t    // Collect all child particle systems\n    List<ParticleSystem> particleSystems = new List<ParticleSystem>();\n    foreach (ParticleSystem ps in root.GetComponentsInChildren<ParticleSystem>()) {\n        particleSystems.Add(ps);\n    }\n\n    // Remove particle systems not associated with this instance\n    List<ParticleSystem> toRemove = new List<ParticleSystem>();\n    foreach (ParticleSystem ps in particleSystems) {\n        UIParticle uip = ps.GetComponent<UIParticle>();\n        if (uip != null && uip != this) {\n            toRemove.Add(ps);\n        }\n    }\n    foreach (ParticleSystem ps in toRemove) {\n        particleSystems.Remove(ps);\n    }\n\n    // Adjust texture sheet animation settings if necessary\n    foreach (ParticleSystem ps in particleSystems) {\n        ParticleSystemRenderer psr = ps.GetComponent<ParticleSystemRenderer>();\n        if (psr != null && psr.enabled && psr.textureSheetAnimation.enabled) {\n            if (psr.textureSheetAnimation.numTilesX != numTilesX || psr.textureSheetAnimation.numTilesY != numTilesY) {\n                psr.textureSheetAnimation.numTilesX = numTilesX;\n                psr.textureSheetAnimation.numTilesY = numTilesY;\n            }\n            if (psr.textureSheetAnimation.startFrame != startFrame || psr.textureSheetAnimation.cycleFrame != cycleFrame) {\n                psr.textureSheetAnimation.startFrame = startFrame;\n                psr.textureSheetAnimation.cycleFrame = cycleFrame;\n            }\n        }\n    }\n\n    // Call RefreshParticles on the updated list of particle systems\n    foreach (ParticleSystem ps in particleSystems) {\n        ps.GetComponent<UIParticle>().RefreshParticles(root);\n    }\n}", "CodeBleu_score": 32.347432742090575}, {"code": "private void RefreshParticles(GameObject root){\n\t    List<ParticleSystem> particleSystems = new List<ParticleSystem>();\n    ParticleSystem[] childParticleSystems = root.GetComponentsInChildren<ParticleSystem>(true);\n    foreach (ParticleSystem childParticleSystem in childParticleSystems) {\n        if (childParticleSystem.GetComponent<UIParticle>() == this) {\n            particleSystems.Add(childParticleSystem);\n        }\n    }\n    if (m_AnimationMode == AnimationMode.Sheet) {\n        foreach (ParticleSystem particleSystem in particleSystems) {\n            ParticleSystemRenderer renderer = particleSystem.GetComponent<ParticleSystemRenderer>();\n            renderer.material.mainTexture = m_TextureSheet;\n            renderer.material.SetTextureScale(\"_MainTex\", new Vector2(1f / m_Columns, 1f / m_Rows));\n            renderer.material.SetTextureOffset(\"_MainTex\", new Vector2(m_CurrentColumn / (float) m_Columns, m_CurrentRow / (float) m_Rows));\n        }\n    }\n    m_ParticleSystems = particleSystems;\n    RefreshParticles();\n}", "CodeBleu_score": 33.06846914223915}, {"code": "private void RefreshParticles(GameObject root){\n\t    List<ParticleSystem> particleSystems = new List<ParticleSystem>();\n    particleSystems.AddRange(root.GetComponentsInChildren<ParticleSystem>());\n    particleSystems.RemoveAll((ParticleSystem particleSystem) => !particleSystem.GetComponent<UIParticle>().Equals(this));\n    if (m_TextureSheetAnimation) {\n        foreach (ParticleSystem particleSystem in particleSystems) {\n            ParticleSystemRenderer particleSystemRenderer = particleSystem.GetComponent<ParticleSystemRenderer>();\n            particleSystemRenderer.uvMode = ParticleSystemRenderMode.SpriteSheet;\n            particleSystemRenderer.spriteSheetAnimationSettings.spriteSheet = m_TextureSheetAnimation;\n            particleSystemRenderer.spriteSheetAnimationSettings.animation = m_TextureSheetAnimation.animation;\n        }\n    }\n    RefreshParticles(particleSystems);\n}", "CodeBleu_score": 28.981706944558344}]}
{"instance_id": "d6b082e37770", "generation_result": [{"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t    // Get all types in the current assembly that implement the IColorSwapManager interface\n    Type[] colorSwapManagerTypes = Assembly.GetExecutingAssembly().GetTypes().Where(type => type.GetInterfaces().Contains(typeof(IColorSwapManager))).ToArray();\n\n    // Register each type with the container builder as a single-instance component\n    foreach (Type colorSwapManagerType in colorSwapManagerTypes) {\n        containerBuilder.RegisterType(colorSwapManagerType).As<IColorSwapManager>().SingleInstance();\n    }\n}", "CodeBleu_score": 38.65349595619591}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t    containerBuilder.RegisterAssemblyTypes(Assembly.GetExecutingAssembly())\n        .Where(t => typeof(IColorSwapManager).IsAssignableFrom(t))\n        .As<IColorSwapManager>()\n        .SingleInstance();\n}", "CodeBleu_score": 35.082532958659826}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t    // Get all types in the current assembly that implement the IColorSwapManager interface\n    IEnumerable<Type> colorSwapManagerTypes = Assembly.GetExecutingAssembly().GetTypes().Where(t => t.GetInterfaces().Contains(typeof(IColorSwapManager)));\n\n    // Register each type with the container builder as a single-instance component\n    foreach (Type colorSwapManagerType in colorSwapManagerTypes) {\n        containerBuilder.RegisterType(colorSwapManagerType).As<IColorSwapManager>().SingleInstance();\n    }\n}", "CodeBleu_score": 38.88906083423073}]}
{"instance_id": "2359d72977a4", "generation_result": [{"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t    this.ipAddress = ipAddress;\n    this.port = port;\n    serializer = new ProtobufSerializer();\n    await serializer.InitializeAsync();\n    await ReservationNegotiationAsync();\n}", "CodeBleu_score": 30.95298012812987}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t    if (ipAddress == null) {\n        throw new ArgumentNullException(nameof(ipAddress));\n    }\n    if (port < 0) {\n        throw new ArgumentOutOfRangeException(nameof(port));\n    }\n    if (State == ConnectionState.CONNECTING) {\n        throw new InvalidOperationException(\"Already connecting\");\n    }\n    if (State == ConnectionState.CONNECTED) {\n        throw new InvalidOperationException(\"Already connected\");\n    }\n\n    this.ipAddress = ipAddress;\n    this.port = port;\n\n    if (State == ConnectionState.DISCONNECTED) {\n        await InitializeSerializerAsync();\n    }\n\n    if (State == ConnectionState.DISCONNECTED) {\n        await NegotiateReservationAsync();\n    }\n}", "CodeBleu_score": 29.45294524683656}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t    this.ipAddress = ipAddress;\n    this.port = port;\n\n    serializer = await Serializer.CreateSerializerAsync();\n\n    await NegotiateReservationAsync();\n}", "CodeBleu_score": 33.58388271702555}]}
{"instance_id": "151a27d718b1", "generation_result": [{"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t    Validate.NotNull(sessionConnectionState);\n\n    Log.Info($\"Changing connection state from {_connectionState} to {sessionConnectionState}\");\n\n    if (sessionConnectionState is SessionReserved) {\n        Log.Info($\"Player name: {_playerContext.PlayerName}\");\n    }\n\n    _connectionState = sessionConnectionState;\n    ConnectionStateChanged?.Invoke(this, sessionConnectionState);\n}", "CodeBleu_score": 37.34637159352656}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t    Validate.NotNull(sessionConnectionState);\n    Log.Info($\"Transitioning from {_connectionState} to {sessionConnectionState}\");\n    _connectionState = sessionConnectionState;\n    _connectionState.ConnectionStateChanged += OnConnectionStateChanged;\n\n    if (_connectionState is SessionReserved) {\n        Log.Info($\"Reserved session with name {_playerContext.PlayerName}\");\n    }\n}", "CodeBleu_score": 31.86654037181914}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t    Validate.NotNull(sessionConnectionState);\n\n    lock (connectionStateLock) {\n        Log.Info($\"Transitioning from {currentConnectionState} to {sessionConnectionState}\");\n\n        if (currentConnectionState == MultiplayerSessionConnectionState.SESSION_RESERVED) {\n            Log.Info($\"Updating player name to {sessionConnectionState.PlayerName}\");\n        }\n\n        currentConnectionState = sessionConnectionState;\n\n        if (currentConnectionState is MultiplayerSessionConnectionState.CONNECTED) {\n            Log.Info($\"Updating player name to {sessionConnectionState.PlayerName}\");\n        }\n\n        if (currentConnectionState is MultiplayerSessionConnectionState.DISCONNECTED) {\n            Log.Info($\"Updating player name to {sessionConnectionState.PlayerName}\");\n        }\n\n        if (currentConnectionState is MultiplayerSessionConnectionState.SESSION_RESERVED) {\n            Log.Info($\"Updating player name to {sessionConnectionState.PlayerName}\");\n        }\n\n        if (currentConnectionState is MultiplayerSessionConnectionState.SESSION_UNKNOWN) {\n            Log.Info($\"Updating player name to {sessionConnectionState.PlayerName}\");\n        }\n\n        if (currentConnectionState is MultiplayerSessionConnectionState.SESSION_ENDED) {\n            Log.Info($\"Updating player name to {sessionConnectionState.PlayerName}\");\n        }\n\n        if (currentConnectionState is MultiplayerSessionConnectionState.SESSION_ENDED_SERVER) {\n            Log.Info($\"Updating player name to {sessionConnectionState.PlayerName}\");\n        }\n\n        if (currentConnectionState is MultiplayerSessionConnectionState.SESSION_ENDED_CLIENT) {\n            Log.Info($\"Updating player name to {sessionConnectionState.PlayerName}\");\n        }\n\n        if (currentConnectionState is MultiplayerSessionConnectionState.SESSION_ENDED_UNKNOWN) {\n            Log.Info($\"Updating player name to {sessionConnectionState.PlayerName}\");\n        }\n\n        if (currentConnectionState is MultiplayerSessionConnectionState.SESSION_", "CodeBleu_score": 30.379829230873558}]}
{"instance_id": "7f7717307d6a", "generation_result": [{"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t    // Initializes the client and starts it.\n    client = new LiteNetLibClient();\n    client.Start();\n\n    // Attempts to connect to the server.\n    client.Connect(ipAddress, serverPort, \"\");\n\n    // Waits for a connection event for up to 2000 milliseconds.\n    if (!await client.WaitEventAsync(LiteNetLib.EventType.Connected, 2000)) {\n        // If no connection event is received within the specified time, resets the event and returns.\n        client.ResetEvent(LiteNetLib.EventType.Connected);\n        return;\n    }\n\n    // If a connection event is received, sends a packet to the server indicating that the client is ready to receive packets.\n    SendPacket(new PlayerJoiningMultiplayerSession(client.LocalEndPoint.ToString(), client.LocalEndPoint.Port));\n\n    // Starts the packet receiving loop.\n    await ReceivePacketsAsync();\n}", "CodeBleu_score": 37.17306521270402}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t    // Create a new LiteNetLibClient instance\n    client = new LiteNetLibClient();\n\n    // Start the client\n    client.Start();\n\n    // Connect the client to the server using the specified IP address and port\n    client.Connect(ipAddress, serverPort, \"Nitrox\");\n\n    // Wait for the client to connect to the server\n    await Task.Delay(2000);\n\n    // Reset the connection event\n    client.Reset();\n}", "CodeBleu_score": 42.01019979473949}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t    // Initialize the client and set its log level\n    client = new LiteNetLibClient();\n    client.LogLevel = LiteNetLibLogLevel.Info;\n\n    // Set the client's packet processor\n    client.PacketProcessor = new PacketProcessor(client);\n\n    // Set the client's event handler\n    client.RegisterReceiveHandler(PacketReceiveEventHandler);\n\n    // Set the client's disconnect handler\n    client.Disconnected += DisconnectEventHandler;\n\n    // Set the client's network error handler\n    client.NetworkError += NetworkErrorEventHandler;\n\n    // Start the client and connect it to the server\n    client.Start();\n    client.Connect(ipAddress, serverPort, \"Nitrox\");\n\n    // Wait for a connection event for up to 2000 milliseconds\n    bool connected = await WaitForEvent(client.ConnectionRequestEvent, 2000);\n\n    // Reset the connection event\n    client.ConnectionRequestEvent.Reset();\n\n    // If the client is connected, send a PlayerJoiningMultiplayerSession packet to the server\n    if (connected) {\n        SendPacket(new PlayerJoiningMultiplayerSession());\n    }\n}", "CodeBleu_score": 37.441709230289014}]}
{"instance_id": "eeb95434f1eb", "generation_result": [{"code": "public void StartFireSuppression(NitroxId id){\n\t    Cyclops cyclops = id.GetComponent<Cyclops>();\n    SubFireButton fireButton = cyclops.GetComponentInChildren<SubFireButton>();\n    fireButton.StartCoroutine(fireButton.SuppressFire(cyclops));\n    fireButton.StartCoroutine(fireButton.Cooldown());\n}", "CodeBleu_score": 49.279847249818324}, {"code": "public void StartFireSuppression(NitroxId id){\n\t    Cyclops cyclops = (Cyclops)GetObjectFrom(id);\n    CyclopsFireSuppressionButton fireSuppressionButton = cyclops.GetComponentInChildren<CyclopsFireSuppressionButton>(true);\n    fireSuppressionButton.StartFireSuppression();\n    StartCoroutine(fireSuppressionButton.BeginCooldown());\n}", "CodeBleu_score": 25.567416263924414}, {"code": "public void StartFireSuppression(NitroxId id){\n\t    GameObject cyclops = GuidHelper.RequireObjectFrom(id);\n    CyclopsFireSuppressionButton cyclopsFireSuppressionButton = cyclops.GetComponentInChildren<CyclopsFireSuppressionButton>();\n    cyclopsFireSuppressionButton.StartCoroutine(cyclopsFireSuppressionButton.StartFireSuppression());\n    cyclopsFireSuppressionButton.StartCoroutine(cyclopsFireSuppressionButton.BeginCooldown());\n}", "CodeBleu_score": 61.501929483527064}]}
{"instance_id": "a23a043559c6", "generation_result": [{"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t    if (!subRoot) {\n        return\n    }\n\n    if (subRoot.id == -1) {\n        return\n    }\n\n    if (!subRoot.gameObject.activeSelf) {\n        return\n    }\n\n    if (damagePoint.id == -1) {\n        return\n    }\n\n    if (repairAmount <= 0) {\n        return\n    }\n\n    // This is the repair packet.\n    CyclopsDamagePointRepaired damagePointRepaired = new CyclopsDamagePointRepaired(subRoot.id, damagePoint.id, repairAmount)\n\n    // This is the packet sender.\n    SendPacket(damagePointRepaired)\n}", "CodeBleu_score": 34.83379604674017}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t    if (subRoot.gameObject.TryGetComponent(out SubRootIdentifier identifier)) {\n        int subRootId = identifier.Id;\n        int damagePointId = damagePoint.id;\n        RepairPoint repairPoint = new RepairPoint(subRootId, damagePointId, repairAmount);\n        RepairPointPacket repairPointPacket = new RepairPointPacket(repairPoint);\n        packetSender.Send(repairPointPacket);\n    }\n}", "CodeBleu_score": 32.60387491271482}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t    if (subRoot.gameObject.TryGetComponentInParent(out SubRoot subRootParent)) {\n        subRoot = subRootParent;\n    }\n\n    if (subRoot.TryGetMetadata(out CyclopsMetadata cyclopsMetadata)) {\n        CyclopsDamagePointMetadata damagePointMetadata = cyclopsMetadata.DamagePoints.FirstOrDefault(damagePointMetadata => damagePointMetadata.DamagePoint == damagePoint);\n        if (damagePointMetadata != null) {\n            RepairCyclopsDamagePoint repairCyclopsDamagePoint = new RepairCyclopsDamagePoint(subRoot.gameObject.GetId(), damagePointMetadata.DamagePoint.Id, repairAmount);\n            packetSender.Send(repairCyclopsDamagePoint);\n        }\n    }\n}", "CodeBleu_score": 37.28491314400216}]}
{"instance_id": "dfb3586de856", "generation_result": [{"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t    if (subRoot.TryGetId(out NitroxId subRootId) && subRoot.liveMixin.health > 0f) {\n        CyclopsDamageInfoData damageInfo = null;\n        if (info.IsPresent()) {\n            damageInfo = new CyclopsDamageInfoData(info.Get().damage, info.Get().type, info.Get().damageType, info.Get().cellIndex, info.Get().fireExtinguished);\n        }\n\n        List<CyclopsDamagePointData> damagePoints = subRoot.liveMixin.GetDamagePoints()\n                                                         .Where(damagePoint => damagePoint.isActive)\n                                                         .Select(damagePoint => new CyclopsDamagePointData(damagePoint.point, damagePoint.damage, damagePoint.type, damagePoint.damageType, damagePoint.index, damagePoint.fireExtinguished))\n                                                         .ToList();\n\n        List<CyclopsFireData> fires = subRoot.liveMixin.GetFires()\n                                                  .Where(fire => fire.isActive)\n                                                  .Select(fire => new CyclopsFireData(fire.fireID, fire.position, fire.rotation, fire.time))\n                                                  .ToList();\n\n        CyclopsDamage cyclopsDamage = new CyclopsDamage(subRootId, damageInfo, damagePoints, fires);\n        cyclopsDamage.Send();\n    }\n}", "CodeBleu_score": 45.76114875446472}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t    if (subRoot.id.IsEmpty()) {\n        return\n    }\n\n    if (subRoot.liveMixin.health > 0) {\n        return\n    }\n\n    CyclopsDamageInfoData damageInfoData = null\n\n    if (info.IsPresent()) {\n        damageInfoData = new CyclopsDamageInfoData(\n            info.Get().damage,\n            info.Get().type,\n            info.Get().damageType,\n            info.Get().victimId,\n            info.Get().attackerId,\n            info.Get().cellIndex,\n            info.Get().fireExtinguished\n        )\n    }\n\n    CyclopsDamagePoint[] activeDamagePoints = GetActiveDamagePoints(subRoot)\n    CyclopsFireData[] fireData = GetFireData(subRoot)\n\n    CyclopsDamage cyclopsDamage = new CyclopsDamage(\n        subRoot.id,\n        subRoot.liveMixin.health,\n        activeDamagePoints,\n        fireData,\n        damageInfoData\n    )\n\n    cyclopsDamagePacketSender.Send(cyclopsDamage)\n}", "CodeBleu_score": 44.89233557377631}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t    if (subRoot.TryGetId(out NitroxId subRootId) && subRoot.liveMixin.health > 10f) {\n        CyclopsDamageInfoData? damageInfoData = null;\n        if (info.HasValue) {\n            damageInfoData = new(\n                info.Value.damage,\n                info.Value.type,\n                info.Value.damagedBy,\n                info.Value.attackerId,\n                info.Value.techType,\n                info.Value.collisionNormal,\n                info.Value.collisionPoint,\n                info.Value.damagePoint,\n                info.Value.invulnerable,\n                info.Value.damageEffectType,\n                info.Value.damageEffectColor,\n                info.Value.damageEffectDuration,\n                info.Value.damageEffectTime\n            );\n        }\n\n        List<CyclopsFireData> activeFirePoints = subRoot.fireData.Where(fireData => fireData.isActive).Select(fireData => new CyclopsFireData(fireData.damage, fireData.firePoint)).ToList();\n\n        CyclopsDamage cyclopsDamage = new(subRootId, damageInfoData, activeFirePoints);\n        cyclopsDamage.SendPacket(packetSender);\n    }\n}", "CodeBleu_score": 46.905510265166875}]}
{"instance_id": "03223c10109f", "generation_result": [{"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t    foreach (Entity entity in dirtyEntities) {\n        if (entity.ParentId != null) {\n            RemoveEntityHierarchy(entity.ParentId.Value);\n        }\n\n        GameObject gameObject = uGUI.main.GetExistingEntityGameObject(entity.Id);\n        if (gameObject != null) {\n            UnityEngine.Object.Destroy(gameObject);\n        }\n    }\n}", "CodeBleu_score": 64.24783227982243}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t    foreach (Entity entity in dirtyEntities) {\n        if (entity.ParentId != null) {\n            Entity parent = Entities.GetObjectById(entity.ParentId);\n            if (parent != null) {\n                parent.ChildrenIds.Remove(entity.Id);\n            }\n        }\n        GameObject gameObject = GuidHelper.RequireObjectFrom(entity.Id);\n        if (gameObject) {\n            UnityEngine.Object.Destroy(gameObject);\n        }\n    }\n}", "CodeBleu_score": 62.659527403858206}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t    foreach (Entity dirtyEntity in dirtyEntities) {\n        EntityBase entityBase = EntityBase.FindEntityBase(dirtyEntity.Id);\n        if (entityBase) {\n            entityBase.Destroy();\n        }\n        GameObject gameObject = NitroxEntity.RequireObjectFrom(dirtyEntity.Id);\n        if (gameObject) {\n            UnityEngine.Object.Destroy(gameObject);\n        }\n    }\n}", "CodeBleu_score": 54.97160488531758}]}
{"instance_id": "990abe8e473e", "generation_result": [{"code": "private void AddPendingParentEntity(Entity entity){\n\t    if (pendingParentEntities.TryGetValue(entity.ParentId, out List<Entity> entities)) {\n        entities.Add(entity);\n    } else {\n        pendingParentEntities.Add(entity.ParentId, new List<Entity> { entity });\n    }\n}", "CodeBleu_score": 32.17834752792237}, {"code": "private void AddPendingParentEntity(Entity entity){\n\t    if (pendingParentEntities.TryGetValue(entity.ParentId, out List<Entity> entities)) {\n        entities.Add(entity);\n    } else {\n        pendingParentEntities[entity.ParentId] = new List<Entity> { entity };\n    }\n}", "CodeBleu_score": 40.604895144504724}, {"code": "private void AddPendingParentEntity(Entity entity){\n\t    if (pendingParentEntities.TryGetValue(entity.ParentId, out List<Entity> list)) {\n        list.Add(entity);\n    }\n    else {\n        pendingParentEntities[entity.ParentId] = new List<Entity> { entity };\n    }\n}", "CodeBleu_score": 39.686064076635944}]}
{"instance_id": "a885fbb1f085", "generation_result": [{"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t    float pickupTime = 0.4f;\n    float punchTime = 0.7f;\n    ExosuitArmAction action;\n    if (cooldown == pickupTime) {\n        action = ExosuitArmAction.START_USE_TOOL;\n    } else if (cooldown == punchTime) {\n        action = ExosuitArmAction.ALT_HIT;\n    } else {\n        Log.Error(\"Unknown claw use\");\n        return;\n    }\n    BroadcastArmAction(clawArm, action);\n}", "CodeBleu_score": 61.957228113121786}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t    float pickupTime = clawArm.pickupTime;\n    float punchTime = clawArm.punchTime;\n\n    ClawArmAction action = ClawArmAction.NONE;\n    if (cooldown == pickupTime) {\n        action = ClawArmAction.START_USE_TOOL;\n    } else if (cooldown == punchTime) {\n        action = ClawArmAction.ALT_HIT;\n    } else {\n        Log.Error(\"Unknown claw action.\");\n    }\n\n    BroadcastArmAction(clawArm, action);\n}", "CodeBleu_score": 45.38081184172289}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t    float pickupTime = clawArm.pickupTime;\n    float punchTime = clawArm.punchTime;\n\n    ExosuitArmAction action = ExosuitArmAction.NONE;\n\n    if (cooldown == pickupTime) {\n        action = ExosuitArmAction.START_USE_TOOL;\n    } else if (cooldown == punchTime) {\n        action = ExosuitArmAction.ALT_HIT;\n    } else {\n        Log.Error($\"Claw use with cooldown {cooldown} does not match pickup time {pickupTime} or punch time {punchTime}\");\n    }\n\n    BroadcastArmAction(action);\n}", "CodeBleu_score": 50.37781016521482}]}
{"instance_id": "e390441c8dc2", "generation_result": [{"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t    if (gameObject == null) {\n        Log.Error(\"BroadcastBatteryAdd: GameObject is null\");\n        return;\n    }\n    if (parent == null) {\n        Log.Error(\"BroadcastBatteryAdd: Parent is null\");\n        return;\n    }\n    if (techType == null) {\n        Log.Error(\"BroadcastBatteryAdd: TechType is null\");\n        return;\n    }\n\n    NitroxId id = NitroxEntity.GetId(gameObject);\n    NitroxId parentId = NitroxEntity.GetId(parent);\n    if (id == null) {\n        Log.Error(\"BroadcastBatteryAdd: GameObject has no id\");\n        return;\n    }\n    if (parentId == null) {\n        Log.Error(\"BroadcastBatteryAdd: Parent has no id\");\n        return;\n    }\n\n    InstalledBatteryEntity entity = new InstalledBatteryEntity(id, parentId, techType);\n\n    Optional<AbsoluteEntityCell> cell = parent.GetAbsoluteEntityCell();\n    if (!cell.IsPresent()) {\n        Log.Error(\"BroadcastBatteryAdd: Parent has no cell\");\n        return;\n    }\n\n    EntitySpawnedByClient packet = new EntitySpawnedByClient(entity, cell.Get());\n    SendPacket(packet);\n}", "CodeBleu_score": 47.583734133442505}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t    if (gameObject == null || parent == null) {\n        Log.Error($\"{nameof(BroadcastBatteryAdd)}: gameObject or parent is null\");\n        return;\n    }\n\n    NitroxId id = NitroxEntity.GetId(gameObject);\n    NitroxId parentId = NitroxEntity.GetId(parent);\n\n    if (id.IsEmpty || parentId.IsEmpty) {\n        Log.Error($\"{nameof(BroadcastBatteryAdd)}: Could not extract id from gameObject or parent\");\n        return;\n    }\n\n    EntityMetadata metadata = new EntityMetadata(gameObject);\n\n    InstalledBatteryEntity installedBatteryEntity = new InstalledBatteryEntity(id, parentId, techType, metadata);\n\n    SendEntitySpawnedPacket(installedBatteryEntity);\n}", "CodeBleu_score": 49.90867900568087}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t    if (gameObject.TryGetComponent(out EntitySlot entitySlot)) {\n        if (entitySlot.occupied) {\n            return;\n        }\n    }\n\n    if (parent.TryGetComponent(out EntitySlot parentSlot)) {\n        if (parentSlot.occupied) {\n            return;\n        }\n    }\n\n    if (gameObject.TryGetComponent(out Base baseComponent)) {\n        if (baseComponent.isBasePiece) {\n            return;\n        }\n    }\n\n    if (parent.TryGetComponent(out Base parentBase)) {\n        if (parentBase.isBasePiece) {\n            return;\n        }\n    }\n\n    if (parent.TryGetComponent(out Vehicle vehicle)) {\n        if (vehicle.HasAnySlotsFree(EntitySlot.Type.Battery)) {\n            return;\n        }\n    }\n\n    if (parent.TryGetComponent(out SubRoot subRoot)) {\n        if (subRoot.HasAnySlotsFree(EntitySlot.Type.Battery)) {\n            return;\n        }\n    }\n\n    if (parent.TryGetComponent(out Seamoth seamoth)) {\n        if (seamoth.HasAnySlotsFree(EntitySlot.Type.Battery)) {\n            return;\n        }\n    }\n\n    if (parent.TryGetComponent(out Exosuit exosuit)) {\n        if (exosuit.HasAnySlotsFree(EntitySlot.Type.Battery)) {\n            return;\n        }\n    }\n\n    if (parent.TryGetComponent(out Cyclops cyclops)) {\n        if (cyclops.HasAnySlotsFree(EntitySlot.Type.Battery)) {\n            return;\n        }\n    }\n\n    if (parent.TryGetComponent(out Player player)) {\n        if (player.HasAnySlotsFree(EntitySlot.Type.Battery)) {\n            return;\n        }\n    }\n\n    if (parent.TryGetComponent(out Seaglide seaglide)) {\n        if (seaglide.HasAnySlots", "CodeBleu_score": 39.27851486702711}]}
{"instance_id": "a87b772a8e5a", "generation_result": [{"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t    PickingUpObject = gameObject;\n    RemoveRemoteControl();\n    if (!gameObject.TryGetComponent(out NitroxId id)) {\n        id = gameObject.AddComponent<NitroxId>();\n        id.Id = GuidHelper.GetGuid();\n    }\n\n    StopEntityPositionBroadcasting();\n    GameObject item = ConvertToItem(gameObject, techType);\n    item.SetActive(false);\n    MarkAsSpawned(item);\n    LogPickup(item);\n    Packet pickupItem = new PickupItem(item.GetComponent<NitroxId>().Id, item.GetTechType(), Optional.OfNullable(item.GetComponent<ItemContainer>()?.container.GetStoredItemType()));\n    item.SetActive(true);\n    SendPacket(pickupItem);\n    PickingUpObject = null;\n}", "CodeBleu_score": 47.90157384466772}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t    PickingUpObject = gameObject;\n    RemoveRemoteControl(gameObject);\n\n    NitroxId id = NitroxEntity.GetId(gameObject);\n    if (id == null) {\n        id = new NitroxId();\n        NitroxEntity.SetNewId(gameObject, id);\n    }\n\n    StopEntityPositionBroadcasting();\n    InventoryItem item = InventoryContainer.AddItem(techType, gameObject);\n\n    if (item == null) {\n        return;\n    }\n\n    LogPickup(item);\n    PickupItem pickupItem = new PickupItem(item.item, item.container, id);\n    SendPacket(pickupItem);\n\n    PickingUpObject = null;\n}", "CodeBleu_score": 39.644424591825114}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t    if (PickingUpObject != null) {\n        return;\n    }\n\n    PickingUpObject = gameObject;\n    Player.main.GetComponent<RemotePlayerMovement>().StopUsing();\n    NitroxId id = gameObject.GetComponent<NitroxEntity>()?.Id ?? new NitroxId();\n    gameObject.SetActive(false);\n    Player.main.BroadcastPickup(gameObject);\n    InventoryItem item = new InventoryItem(techType, id);\n    item.SetSlot(0);\n    item.SetItem(techType);\n    item.SetTechType(techType);\n    item.SetOwnedBy(Player.main.gameObject);\n    item.SetPosition(gameObject.transform.position);\n    item.SetRotation(gameObject.transform.rotation);\n    item.SetScale(gameObject.transform.localScale);\n    item.SetParent(gameObject.transform.parent);\n    item.SetRigidbodyVelocity(gameObject.GetComponent<Rigidbody>()?.velocity ?? Vector3.zero);\n    item.SetRigidbodyAngularVelocity(gameObject.GetComponent<Rigidbody>()?.angularVelocity ?? Vector3.zero);\n    item.SetRigidbodySleeping(gameObject.GetComponent<Rigidbody>()?.IsSleeping() ?? true);\n    item.SetRigidbodyKinematic(gameObject.GetComponent<Rigidbody>()?.isKinematic ?? true);\n    item.SetRigidbodyInterpolation(gameObject.GetComponent<Rigidbody>()?.interpolation ?? RigidbodyInterpolation.None);\n    item.SetRigidbodyCollisionDetection(gameObject.GetComponent<Rigidbody>()?.collisionDetectionMode ?? CollisionDetectionMode.Discrete);\n    item.SetRigidbodyConstraints(gameObject.GetComponent<Rigidbody>()?.constraints ?? RigidbodyConstraints.None);\n    item.SetRigidbodyMass(game", "CodeBleu_score": 38.85363901783435}]}
{"instance_id": "b6d1e68114e1", "generation_result": [{"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t    NitroxId id = NitroxIdRegistry.GetId(gameObject);\n    TechType techType = CraftData.GetTechType(gameObject);\n    ushort classId = CraftData.GetClassId(techType);\n    EntityMetadata metadata = entityMetadataManager.CreateEntityMetadata(gameObject);\n    List<Entity> childEntities = new List<Entity>();\n    Transform transform = gameObject.transform;\n    for (int i = 0; i < transform.childCount; i++) {\n        GameObject child = transform.GetChild(i).gameObject;\n        if (child.TryGetComponent(out SubRoot subRoot)) {\n            continue;\n        }\n        childEntities.Add(ConvertToEntity(child, entityMetadataManager));\n    }\n    PlayerManager playerManager = PlayerManager.main;\n    ushort playerId = playerManager.GetPlayerId(playerManager.GetCurrentPlayer());\n    InventoryItemEntity inventoryItemEntity = new InventoryItemEntity(id, techType, classId, metadata, childEntities, playerId);\n    if (gameObject.TryGetComponent(out Battery battery)) {\n        inventoryItemEntity.BatteryCharge = battery.charge;\n    }\n    return inventoryItemEntity;\n}", "CodeBleu_score": 47.97631157742007}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t    NitroxId id = NitroxEntity.GetId(gameObject);\n    TechType techType = CraftData.GetTechType(gameObject);\n    string classId = gameObject.GetClassId();\n    EntityMetadata entityMetadata = entityMetadataManager.GetEntityMetadata(gameObject);\n    IEntityMetadata[] childEntities = entityMetadata.GetChildEntities();\n\n    string playerId = NitroxServiceLocator.LocateService<LocalPlayer>().PlayerId;\n\n    InventoryItemEntity inventoryItemEntity = new InventoryItemEntity(id, techType, classId, playerId, entityMetadata, childEntities);\n\n    if (techType == TechType.Battery) {\n        Battery battery = gameObject.GetComponent<Battery>();\n        inventoryItemEntity.BatteryCharge = battery.charge;\n    }\n\n    return inventoryItemEntity;\n}", "CodeBleu_score": 46.66350928474496}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t    NitroxId id = NitroxEntity.GetId(gameObject);\n    TechType techType = gameObject.GetComponent<TechType>();\n    string classId = techType.ToString();\n    EntityMetadata entityMetadata = entityMetadataManager.GetEntityMetadata(gameObject);\n    List<Entity> childEntities = new List<Entity>();\n\n    foreach (GameObject childGameObject in gameObject.GetChildren()) {\n        childEntities.Add(ConvertToEntity(childGameObject, entityMetadataManager));\n    }\n\n    if (entityMetadata is PlayerMetadata playerMetadata) {\n        id = playerMetadata.PlayerId;\n    }\n\n    InventoryItemEntity inventoryItemEntity = new InventoryItemEntity(id, classId, childEntities, entityMetadata);\n\n    if (entityMetadata is BatteryMetadata batteryMetadata) {\n        inventoryItemEntity.BatteryLevel = batteryMetadata.BatteryLevel;\n    }\n\n    return inventoryItemEntity;\n}", "CodeBleu_score": 57.229311536417896}]}
{"instance_id": "e416d51a7af7", "generation_result": [{"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t    this.multiplayerSession = multiplayerSession\n    this.packetSender = packetSender\n    this.throttledPacketSender = throttledPacketSender\n    this.playerModel = new PlayerModel(this)\n    this.playerModel.SetPermissions(PlayerPermissions.PLAYER)\n    this.playerModel.SetPlayerContext(PlayerContext.PLAYER)\n}", "CodeBleu_score": 24.177443051676402}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t    this.multiplayerSession = multiplayerSession\n    this.packetSender = packetSender\n    this.throttledPacketSender = throttledPacketSender\n    this.playerModel = new PlayerModel()\n    this.playerPermissions = PlayerPermissions.PLAYER\n}", "CodeBleu_score": 18.57609855698696}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t    MultiplayerSession = multiplayerSession\n    PacketSender = packetSender\n    ThrottledPacketSender = throttledPacketSender\n    PlayerModel = new PlayerModel(PlayerType.PLAYER)\n    Permissions = PlayerPermissions.PLAYER\n    Permissions = PlayerPermissions.PLAYER\n}", "CodeBleu_score": 16.580520605046786}]}
{"instance_id": "def56af985df", "generation_result": [{"code": "private GameObject CreateBodyPrototype{\n\t    get {\n        // Ensure head is visible\n        player.GetComponent<Renderer>().shadowCastingMode = ShadowCastingMode.On;\n        // Instantiate clone of body prototype\n        GameObject clone = Object.Instantiate(player);\n        // Reset shadow casting mode\n        clone.GetComponent<Renderer>().shadowCastingMode = ShadowCastingMode.Off;\n        // Deactivate clone and rename to \"RemotePlayerPrototype\"\n        clone.SetActive(false);\n        clone.name = \"RemotePlayerPrototype\";\n        // Remove items held in hand\n        clone.GetComponentInChildren<PlayerHeldItem>().UnEquipAll();\n        // Return clone\n        return clone;\n    }\n}", "CodeBleu_score": 33.18449646868579}, {"code": "private GameObject CreateBodyPrototype{\n\t    get {\n        // Ensure the player's head is visible\n        Player.main.head.SetActive(true);\n\n        // Instantiate a clone of the body prototype\n        GameObject bodyPrototype = Object.Instantiate(Player.main.bodyPrototype);\n\n        // Reset the head's shadow casting mode\n        Player.main.head.GetComponent<Light>().shadows = LightShadows.Soft;\n\n        // Deactivate and rename the clone\n        bodyPrototype.SetActive(false);\n        bodyPrototype.name = \"RemotePlayerPrototype\";\n\n        // Remove items held in hand from the clone\n        bodyPrototype.GetComponentInChildren<HandReticle>().Destroy();\n        bodyPrototype.GetComponentInChildren<Hand>().Destroy();\n\n        return bodyPrototype;\n    }\n}", "CodeBleu_score": 28.028517501051546}, {"code": "private GameObject CreateBodyPrototype{\n\t    get {\n        // Ensure the player's head is visible\n        player.GetComponent<Renderer>().enabled = true\n        player.GetComponent<Renderer>().shadowCastingMode = ShadowCastingMode.On\n\n        // Instantiate a clone of the body prototype\n        GameObject clone = Object.Instantiate(player)\n\n        // Reset the head's shadow casting mode\n        clone.GetComponent<Renderer>().shadowCastingMode = ShadowCastingMode.Off\n\n        // Deactivate and rename the clone\n        clone.SetActive(false)\n        clone.name = \"RemotePlayerPrototype\"\n\n        // Remove items held in hand\n        clone.GetComponent<Player>().RemoveItemsInHand()\n\n        return clone\n    }\n}", "CodeBleu_score": 21.528424852290467}]}
{"instance_id": "e9bd7f669aed", "generation_result": [{"code": "void ICacheable.Save(BinaryWriter bw){\n\t    bw.Write(this.GetType().Name);\n    bw.Write(this.Location);\n    bw.Write(this.Metadata);\n    bw.Write(this.Processes.Count);\n    foreach (var process in this.Processes) {\n        bw.Write(process.GetType().Name);\n        process.Save(bw);\n    }\n    bw.Write(this.Dependencies.Count);\n    foreach (var dependency in this.Dependencies) {\n        dependency.Save(bw);\n    }\n    bw.Write(this.Incompatibilities.Count);\n    foreach (var incompatibility in this.Incompatibilities) {\n        incompatibility.Save(bw);\n    }\n    bw.Write(this.TargetVersion);\n}", "CodeBleu_score": 39.19442370904704}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\t    bw.Write(this.GetType().Name);\n    bw.Write(this.Location);\n    bw.Write(this.Metadata);\n    bw.Write(this.Processes.Count);\n    foreach (Process process in this.Processes) {\n        bw.Write(process.Name);\n        bw.Write(process.Path);\n    }\n    bw.Write(this.Dependencies.Count);\n    foreach (ICacheable dependency in this.Dependencies) {\n        dependency.Save(bw);\n    }\n    bw.Write(this.Incompatibilities.Count);\n    foreach (ICacheable incompatibility in this.Incompatibilities) {\n        incompatibility.Save(bw);\n    }\n    bw.Write(this.TargetVersion);\n}", "CodeBleu_score": 45.070242633085286}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\t    bw.Write(this.GetType().FullName);\n    bw.Write(this.Location);\n    bw.Write(this.Metadata);\n    bw.Write(this.Processes);\n    bw.Write(this.Dependencies.Count);\n    foreach (var dependency in this.Dependencies) {\n        bw.Write(dependency.Key);\n        dependency.Value.Save(bw);\n    }\n    bw.Write(this.Incompatibilities.Count);\n    foreach (var incompatibility in this.Incompatibilities) {\n        bw.Write(incompatibility.Key);\n        incompatibility.Value.Save(bw);\n    }\n    bw.Write(this.TargetVersion);\n}", "CodeBleu_score": 41.287176441927166}]}
{"instance_id": "a7e51620987d", "generation_result": [{"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t    var pluginType = pluginAssembly.GetType(pluginInfo.TypeName);\n    if (pluginType is null) {\n        Logger.Log(LogLevel.Error, \"Could not find type \" + pluginInfo.TypeName);\n        return null;\n    }\n\n    var pluginInstance = (BasePlugin)Activator.CreateInstance(pluginType);\n\n    if (pluginInstance is null) {\n        Logger.Log(LogLevel.Error, \"Could not create instance of type \" + pluginInfo.TypeName);\n        return null;\n    }\n\n    pluginInstance.PluginInfo = pluginInfo;\n    pluginInstance.LoadedAssembly = pluginAssembly;\n\n    Logger.Log(LogLevel.Debug, \"Invoking PluginLoad event\");\n    PluginLoad?.Invoke(this, new PluginLoadEventArgs(pluginInstance));\n\n    Logger.Log(LogLevel.Debug, \"Loading plugin\");\n    pluginInstance.Load();\n\n    return pluginInstance;\n}", "CodeBleu_score": 57.50183313898103}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t    var pluginType = pluginAssembly.GetType(pluginInfo.TypeName);\n    if (pluginType == null) {\n        Log.LogError($\"Could not find type {pluginInfo.TypeName} in assembly {pluginAssembly.FullName}\");\n        return null;\n    }\n\n    var pluginInstance = (BasePlugin)Activator.CreateInstance(pluginType);\n\n    PluginLoad?.Invoke(this, new PluginLoadEventArgs(pluginInstance, pluginInfo));\n\n    pluginInstance.Load(this);\n\n    return pluginInstance;\n}", "CodeBleu_score": 46.63909726722428}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t    // Get the plugin type from the assembly\n    var pluginType = pluginAssembly.GetType(pluginInfo.TypeName);\n\n    // Create an instance of the plugin\n    var pluginInstance = (BasePlugin)Activator.CreateInstance(pluginType);\n\n    // Invoke the PluginLoad event\n    PluginLoad?.Invoke(this, new PluginLoadEventArgs(pluginInstance, pluginInfo));\n\n    // Call the Load method on the plugin instance\n    pluginInstance.Load();\n\n    // Return the plugin instance\n    return pluginInstance;\n}", "CodeBleu_score": 63.00997075502697}]}
{"instance_id": "0925dc086c01", "generation_result": [{"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t    if (TrampolineMethod != null) {\n        return TrampolineMethod;\n    }\n\n    Prepare();\n\n    if (signature == null) {\n        signature = Method;\n    }\n\n    var trampoline = TrampolinePtr.GenerateTrampoline(signature);\n    if (trampoline == null) {\n        return null;\n    }\n\n    TrampolineMethod = trampoline;\n    return TrampolineMethod;\n}", "CodeBleu_score": 35.57787086556823}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t    if (TrampolineMethod == null) {\n        Prepare();\n        TrampolineMethod = TrampolinePtr(signature);\n    }\n    return TrampolineMethod;\n}", "CodeBleu_score": 59.905339774294575}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t    if (TrampolineMethod != null)\n        return TrampolineMethod;\n\n    Prepare(signature);\n    TrampolineMethod = TrampolinePtr.GenerateTrampoline(signature);\n    return TrampolineMethod;\n}", "CodeBleu_score": 47.126171046695845}]}
{"instance_id": "cfab5c23610e", "generation_result": [{"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t    using var stream = Assembly.GetExecutingAssembly().GetManifestResourceStream($\"{Assembly.GetExecutingAssembly().GetName().Name}.Languages.{code}.json\");\n    if (stream == null) {\n        throw new NullReferenceException($\"Language file for {code} not found.\");\n    }\n    using var reader = new StreamReader(stream);\n    var json = reader.ReadToEnd();\n    try {\n        return JsonSerializer.Deserialize<Dictionary<string, string>>(json);\n    }\n    catch (JsonException) {\n        throw new JsonException($\"Language file for {code} is not in valid JSON format.\");\n    }\n}", "CodeBleu_score": 47.89283598092139}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t    var assembly = typeof(Language).Assembly;\n    var resourceName = $\"{assembly.GetName().Name}.Resources.{code}.json\";\n    using var stream = assembly.GetManifestResourceStream(resourceName);\n    if (stream is null) {\n        throw new NullReferenceException($\"Language file for {code} not found.\");\n    }\n    using var reader = new StreamReader(stream);\n    var json = reader.ReadToEnd();\n    var dictionary = JsonSerializer.Deserialize<Dictionary<string, string>>(json);\n    if (dictionary is null) {\n        throw new JsonException($\"Failed to deserialize language file for {code}.\");\n    }\n    return dictionary;\n}", "CodeBleu_score": 48.935970232155455}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t    // Get the language file as a stream from the assembly's resources\n    using Stream? stream = Assembly.GetExecutingAssembly().GetManifestResourceStream($\"{typeof(Language).Namespace}.{code}.json\");\n\n    // If the file is not found, throw a NullReferenceException\n    if (stream == null) {\n        throw new NullReferenceException($\"Language file for language code '{code}' not found.\");\n    }\n\n    // Deserialize the stream into a dictionary\n    Dictionary<string, string>? language = JsonSerializer.Deserialize<Dictionary<string, string>>(stream);\n\n    // If deserialization fails, throw a JsonException\n    if (language == null) {\n        throw new JsonException($\"Failed to deserialize language file for language code '{code}'.\");\n    }\n\n    // Return the dictionary\n    return language;\n}", "CodeBleu_score": 50.769921032588506}]}
{"instance_id": "9978bd31d199", "generation_result": [{"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t    int expressionCount = 0;\n    foreach (IParseTree node in nodes) {\n        if (node is ParserRuleContext) {\n            Visit(node);\n            expressionCount++;\n        }\n    }\n    return expressionCount;\n}", "CodeBleu_score": 46.7074188281185}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t    int expressionCount = 0;\n    foreach (IParseTree node in nodes) {\n        if (node is ParserRuleContext) {\n            Visit(node as ParserRuleContext);\n            expressionCount++;\n        }\n    }\n    return expressionCount;\n}", "CodeBleu_score": 53.93881175238684}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t    int expressionCount = 0;\n    foreach (IParseTree node in nodes) {\n        if (node is ParserRuleContext) {\n            expressionCount += Visit(node);\n        }\n    }\n    return expressionCount;\n}", "CodeBleu_score": 52.20700309251778}]}
{"instance_id": "8f9bf9ee575a", "generation_result": [{"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t    var lineID = context.LINE_ID().GetText();\n    var text = context.FORMATTED_TEXT().GetText();\n    var expressions = text.Split('{', '}');\n    var expressionCount = expressions.Length - 1;\n    if (expressionCount < 0) {\n        expressionCount = 0;\n    }\n    if (string.IsNullOrEmpty(lineID)) {\n        throw new InvalidOperationException(\"Line is missing line ID\");\n    }\n    Emit(OpCode.RunLine, lineID, expressionCount);\n    return 0;\n}", "CodeBleu_score": 33.81389519721527}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t    var lineID = context.line_id().GetText();\n    if (string.IsNullOrEmpty(lineID)) {\n        throw new InvalidOperationException(\"Line is missing line ID\");\n    }\n\n    var format = context.formatted_text();\n    if (format != null) {\n        Visit(format);\n    }\n\n    var expressionCount = context.expression().Length;\n    Emit(OpCode.RunLine, expressionCount);\n    Emit(lineID);\n\n    return 0;\n}", "CodeBleu_score": 53.02010254210374}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t    if (context.formatted_text() != null) {\n        foreach (var expression in context.formatted_text().expression()) {\n            VisitExpression(expression);\n        }\n    }\n\n    var lineID = context.LINE_TAG().GetText();\n    var expressionCount = context.formatted_text().expression().Length;\n    EmitOpcode(Opcode.RunLine, lineID, expressionCount);\n\n    return 0;\n}", "CodeBleu_score": 48.64229587713553}]}
{"instance_id": "b70d033fed9c", "generation_result": [{"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t    var knownCommands = yarnFile.GetAllCommands();\n\n    var unknownCommands = yarnFile.Commands\n        .Where(cmd => !knownCommands.Contains(cmd.Key))\n        .Select(cmd => {\n            var range = new Range(\n                new Position(cmd.Value.LineNumber, 0),\n                new Position(cmd.Value.LineNumber, 0)\n            );\n\n            var data = new Dictionary<string, object> {\n                { \"command\", cmd.Key }\n            };\n\n            return new Diagnostic {\n                Range = range,\n                Message = \"Unknown command\",\n                Severity = DiagnosticSeverity.Warning,\n                Code = \"Yarn.UnknownCommand\",\n                Data = JObject.FromObject(data)\n            };\n        });\n\n    return unknownCommands;\n}", "CodeBleu_score": 29.666185880364417}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t    var unknownCommands = yarnFile.CommandReferences.Except(yarnFile.CommandDefinitions);\n    return unknownCommands.Select(command => {\n        var diagnostic = new Diagnostic {\n            Message = $\"Unknown command '{command.Key}'\",\n            Severity = DiagnosticSeverity.Warning,\n            Code = \"yarn.unknownCommand\",\n            Data = JObject.FromObject(new {\n                command = command.Key,\n                line = command.Value.Line,\n                column = command.Value.Column\n            })\n        };\n        diagnostic.Range = new Range {\n            Start = new Position { Line = command.Value.Line, Character = command.Value.Column },\n            End = new Position { Line = command.Value.Line, Character = command.Value.Column + command.Key.Length }\n        };\n        return diagnostic;\n    });\n}", "CodeBleu_score": 34.12512005697771}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t    // Get all the command references in the YarnFileData object\n    var commandReferences = yarnFile.CommandReferences;\n\n    // Get all the known commands in the project\n    var knownCommands = yarnFile.Project.KnownCommands;\n\n    // Iterate through each command reference and check if it is a known command\n    foreach (var commandReference in commandReferences) {\n        var commandName = commandReference.Name;\n\n        // If the command is not a known command, generate a diagnostic with a warning message\n        if (!knownCommands.ContainsKey(commandName)) {\n            var diagnostic = new Diagnostic {\n                Severity = DiagnosticSeverity.Warning,\n                Code = \"unknown-command\",\n                Message = $\"Unknown command '{commandName}'\",\n                Range = new Range {\n                    Start = new Position {\n                        Line = commandReference.StartLine,\n                        Character = commandReference.StartCharacter\n                    },\n                    End = new Position {\n                        Line = commandReference.EndLine,\n                        Character = commandReference.EndCharacter\n                    }\n                },\n                Data = new Dictionary<string, object> {\n                    { \"commandName\", commandName }\n                }\n            };\n\n            // Yield the diagnostic to the caller\n            yield return diagnostic;\n        }\n    }\n}", "CodeBleu_score": 29.04524170636839}]}
{"instance_id": "9a072876f358", "generation_result": [{"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t    return new CodeActionRegistrationOptions {\n        DocumentSelector = DocumentSelector.ForLanguage(\"yarn\"),\n        ResolveProvider = false,\n        CodeActionKinds = new Container<CodeActionKind>(CodeActionKind.QuickFix)\n    };\n}", "CodeBleu_score": 74.39302608552325}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t    return new CodeActionRegistrationOptions {\n        DocumentSelector = DocumentSelector.ForLanguage(\"yarn\"),\n        ResolveProvider = false,\n        CodeActionKinds = capability.CodeActionKinds.ToArray()\n    };\n}", "CodeBleu_score": 61.792753339840644}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t    return new CodeActionRegistrationOptions {\n        DocumentSelector = YarnDocumentSelector.Instance,\n        ResolveProvider = false,\n        CodeActionKinds = new List<CodeActionKind> { CodeActionKind.QuickFix }\n    };\n}", "CodeBleu_score": 67.07731884568305}]}
{"instance_id": "7b61df32aee3", "generation_result": [{"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t    if (variables.TryGetValue(variableName, out object value)) {\n        if (value is T typedValue) {\n            result = typedValue;\n            return true;\n        } else {\n            throw new ArgumentException($\"Variable '{variableName}' is not of type '{typeof(T).Name}'.\");\n        }\n    } else {\n        result = default(T);\n        return false;\n    }\n}", "CodeBleu_score": 52.59996494169369}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t    if (this.TryGetValue(variableName, out object value)) {\n        if (value is T tValue) {\n            result = tValue;\n            return true;\n        } else {\n            throw new ArgumentException($\"Variable '{variableName}' is not of type '{typeof(T).Name}'.\");\n        }\n    } else {\n        result = default(T);\n        return false;\n    }\n}", "CodeBleu_score": 51.50335119062175}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t    if (variables.TryGetValue(variableName, out object value)) {\n        if (value is T typedValue) {\n            result = typedValue;\n            return true;\n        } else {\n            throw new ArgumentException($\"Variable '{variableName}' is not of type '{typeof(T)}'.\");\n        }\n    } else {\n        result = default(T);\n        return false;\n    }\n}", "CodeBleu_score": 52.50434169611224}]}
{"instance_id": "7201488347ef", "generation_result": [{"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t    // Create a new Library and VirtualMachine\n    library = new Library();\n    vm = new VirtualMachine(library);\n\n    // Import the StandardLibrary into the library\n    StandardLibrary.RegisterToLibrary(library);\n\n    // Set up the variable storage\n    vm.VariableStorage = variableStorage;\n\n    // Register functions for node visit tracking\n    vm.RegisterFunction(\"visited\", 1, (vm, parameters) => {\n        // Get the node name from the parameter\n        var nodeName = parameters[0].AsString;\n\n        // Check if the node has been visited\n        if (visitedNodes.Contains(nodeName)) {\n            // Return true if the node has been visited\n            return Yarn.Value.True;\n        } else {\n            // Return false if the node has not been visited\n            return Yarn.Value.False;\n        }\n    });\n    vm.RegisterFunction(\"visit\", 1, (vm, parameters) => {\n        // Get the node name from the parameter\n        var nodeName = parameters[0].AsString;\n\n        // Add the node to the visited nodes list\n        visitedNodes.Add(nodeName);\n\n        // Return null\n        return Yarn.Value.Null;\n    });\n\n    // Create a new LineParser\n    lineParser = new LineParser();\n\n    // Register marker processors for select, plural, and ordinal markers\n    lineParser.RegisterMarkerProcessor<SelectMarkerProcessor>();\n    lineParser.RegisterMarkerProcessor<PluralMarkerProcessor>();\n    lineParser.RegisterMarkerProcessor<OrdinalMarkerProcessor>();\n}", "CodeBleu_score": 38.33379203026334}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t    this.variableStorage = variableStorage;\n    this.library = new Yarn.Library();\n    this.virtualMachine = new Yarn.VirtualMachine(library);\n    this.lineParser = new Yarn.LineParser();\n    this.library.ImportStandardLibrary();\n    this.virtualMachine.RegisterFunction(\"select\", 1, (args) => {\n        return this.select(args[0]);\n    });\n    this.virtualMachine.RegisterFunction(\"plural\", 1, (args) => {\n        return this.plural(args[0]);\n    });\n    this.virtualMachine.RegisterFunction(\"ordinal\", 1, (args) => {\n        return this.ordinal(args[0]);\n    });\n    this.lineParser.RegisterMarkerProcessor(\"select\", (line) => {\n        return this.processSelectMarker(line);\n    });\n    this.lineParser.RegisterMarkerProcessor(\"plural\", (line) => {\n        return this.processPluralMarker(line);\n    });\n    this.lineParser.RegisterMarkerProcessor(\"ordinal\", (line) => {\n        return this.processOrdinalMarker(line);\n    });\n}", "CodeBleu_score": 34.560658929423994}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t    this.variableStorage = variableStorage;\n\n    this.library = new Library();\n    this.library.RegisterFunctions<StandardLibrary>();\n\n    this.virtualMachine = new VirtualMachine(library, variableStorage);\n\n    this.lineParser = new LineParser();\n    this.lineParser.AddMarkupProcessor(new SelectMarkupProcessor());\n    this.lineParser.AddMarkupProcessor(new PluralMarkupProcessor());\n    this.lineParser.AddMarkupProcessor(new OrdinalMarkupProcessor());\n\n    this.virtualMachine.RegisterFunction(\"visit\", new Action<string>(VisitNode));\n    this.virtualMachine.RegisterFunction(\"visited\", new Func<string, bool>(HasVisitedNode));\n}", "CodeBleu_score": 34.0021682856815}]}
{"instance_id": "59b7b5a9c34a", "generation_result": [{"code": "public int FindUniqueID(string UniqueID){\n\t    if (string.IsNullOrEmpty(UniqueID)) {\n        return -1;\n    }\n\n    for (int i = 0; i < List.Count; i++) {\n        if (List[i].UniqueID == UniqueID) {\n            return i;\n        }\n    }\n\n    return -1;\n}", "CodeBleu_score": 74.14163275649234}, {"code": "public int FindUniqueID(string UniqueID){\n\t    if (string.IsNullOrEmpty(UniqueID)) {\n        return -1;\n    }\n\n    for (int i = 0; i < LoopListBankData.Count; i++) {\n        if (LoopListBankData[i].UniqueID == UniqueID) {\n            return i;\n        }\n    }\n\n    return -1;\n}", "CodeBleu_score": 76.47859416392919}, {"code": "public int FindUniqueID(string UniqueID){\n\t    if (string.IsNullOrEmpty(UniqueID)) {\n        return -1;\n    }\n\n    for (int i = 0; i < LoopListBankData.Count; i++) {\n        if (LoopListBankData[i].UniqueID == UniqueID) {\n            return i;\n        }\n    }\n\n    return -1;\n}", "CodeBleu_score": 76.47859416392919}]}
{"instance_id": "2b85606238aa", "generation_result": [{"code": "public void AddContent(object newContent){\n\t    LoopListBankData newData = new LoopListBankData();\n    newData.m_Content = newContent;\n    newData.m_ID = GenerateUniqueID();\n    m_LoopListBankDataList.Add(newData);\n}", "CodeBleu_score": 39.680813005842595}, {"code": "public void AddContent(object newContent){\n\t    LoopListBankData newLoopListBankData = new LoopListBankData();\n    newLoopListBankData.Content = newContent;\n    newLoopListBankData.ID = m_LoopListBankDataList.Count;\n    m_LoopListBankDataList.Add(newLoopListBankData);\n}", "CodeBleu_score": 39.310974799777284}, {"code": "public void AddContent(object newContent){\n\t    LoopListBankData newLoopListBankData = new LoopListBankData();\n    newLoopListBankData.m_Content = newContent;\n    newLoopListBankData.m_ID = GenerateUniqueID();\n    m_LoopListBankDataList.Add(newLoopListBankData);\n}", "CodeBleu_score": 40.364768926606295}]}
{"instance_id": "34e593106991", "generation_result": [{"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t    m_IndexID = idx;\n    m_Content = content;\n    if (m_IsUpdateGameObjectName) {\n        gameObject.name = m_PrefabName + \"_\" + idx;\n    }\n}", "CodeBleu_score": 56.45334660063257}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t    m_IndexID = idx;\n    m_Content = content;\n    if (m_IsUpdateGameObjectName) {\n        gameObject.name = \"Cell(\" + idx + \"):\" + m_Content.ToString();\n    }\n}", "CodeBleu_score": 64.68523771209144}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t    m_IndexID = idx;\n    m_Content = content;\n    if (m_IsUpdateGameObjectName) {\n        gameObject.name = m_PrefabName + \"_\" + idx.ToString();\n    }\n}", "CodeBleu_score": 64.57189319613586}]}
{"instance_id": "6b6a6cc329cc", "generation_result": [{"code": "private void OnButtonAddDataClickk(){\n\t    int count = int.Parse(inputFieldCount.text);\n    if (count <= 0) {\n        count = 1;\n    }\n    for (int i = 0; i < count; i++) {\n        bank.Add(Random.Range(0, 10));\n    }\n    scrollRect.totalCount = bank.Count;\n    scrollRect.Refresh();\n}", "CodeBleu_score": 33.80285236545739}, {"code": "private void OnButtonAddDataClickk(){\n\t    int count = int.Parse(inputField.text);\n    if (count < 1) count = 1;\n    for (int i = 0; i < count; i++) {\n        bank.Add(Random.Range(0, 10));\n    }\n    scrollRect.totalCount = bank.Count;\n    scrollRect.Refresh();\n}", "CodeBleu_score": 32.30534070809356}, {"code": "private void OnButtonAddDataClickk(){\n\t    int count = int.Parse(m_InputField.text);\n    if (count < 1) {\n        count = 1;\n    }\n    for (int i = 0; i < count; i++) {\n        m_Bank.Add(Random.Range(0, 10));\n    }\n    m_ScrollRect.totalCount = m_Bank.Count;\n    m_ScrollRect.Refresh();\n}", "CodeBleu_score": 34.34786597380259}]}
{"instance_id": "209961c9eb8e", "generation_result": [{"code": "protected override void ClearTempPool(){\n\t    // Clear temporary objects from the content pool\n    if (content == null) {\n        return;\n    }\n    // Check if the content has the expected number of child elements\n    int numChildren = content.childCount;\n    if (numChildren != numElements) {\n        // If not, return the temporary objects to the prefab source\n        for (int i = 0; i < numChildren; i++) {\n            Transform child = content.GetChild(i);\n            child.SetParent(prefabSource);\n        }\n        // Reset the start and end indices\n        startIndex = 0;\n        endIndex = 0;\n    }\n}", "CodeBleu_score": 26.351075375055604}, {"code": "protected override void ClearTempPool(){\n\t  int numChildren = content.childCount;\n  int numItems = endIndex - startIndex;\n  if (numItems != numChildren) {\n    Debug.LogWarning(\"Expected \" + numItems + \" items but found \" + numChildren + \" instead.\", content);\n  }\n  if (startIndex > 0) {\n    for (int i = 0; i < startIndex; i++) {\n      Transform child = content.GetChild(0);\n      child.SetParent(prefabSource);\n      child.gameObject.SetActive(false);\n    }\n    startIndex = 0;\n  }\n  if (endIndex < numChildren) {\n    for (int i = endIndex; i < numChildren; i++) {\n      Transform child = content.GetChild(i);\n      child.SetParent(prefabSource);\n      child.gameObject.SetActive(false);\n    }\n    endIndex = numChildren;\n  }\n}", "CodeBleu_score": 39.4237735759822}, {"code": "protected override void ClearTempPool(){\n\t  // Check if there are items marked for deletion at the start.\n  if (startIndex > 0) {\n    // If there are, return them to the prefab source and reset the start index.\n    for (int i = 0; i < startIndex; i++) {\n      pooledItems[i].transform.SetParent(prefabSource.transform);\n      pooledItems[i].SetActive(false);\n    }\n    startIndex = 0;\n  }\n\n  // Check if there are items marked for deletion at the end.\n  if (endIndex < pooledItems.Count) {\n    // If there are, return them to the prefab source and reset the end index.\n    for (int i = endIndex; i < pooledItems.Count; i++) {\n      pooledItems[i].transform.SetParent(prefabSource.transform);\n      pooledItems[i].SetActive(false);\n    }\n    endIndex = pooledItems.Count;\n  }\n\n  // Verify that the content has the expected number of child elements.\n  if (content.childCount != (endIndex - startIndex)) {\n    // If not, log an error message.\n    Debug.LogError(\"Content has unexpected number of child elements.\");\n  }\n}", "CodeBleu_score": 47.33094078407996}]}
{"instance_id": "c6bb290de2b3", "generation_result": [{"code": "public void AnticipateScale(Vector3 newScale){\n\t    // Check if the network is active and listening\n    if (NetworkManager.Singleton.IsActiveAndListening()) {\n        // Set the local and anticipated scales to the new value\n        localScale = newScale;\n        anticipatedScale = newScale;\n\n        // If allowed, update the authoritative scale\n        if (isAuthoritative) {\n            UpdateAuthoritativeScale(newScale);\n        }\n\n        // Record the anticipated transform and update the anticipation counters and times\n        RecordAnticipation(newScale);\n\n        // Reset the smooth transition duration and current smooth time\n        smoothTransitionDuration = 0;\n        currentSmoothTime = 0;\n    }\n}", "CodeBleu_score": 24.093794453849835}, {"code": "public void AnticipateScale(Vector3 newScale){\n\t    if (NetworkManager.Singleton.IsActiveAndListening) {\n        // Set the local and anticipated scales to the new value\n        localScale = newScale;\n        anticipatedScale = newScale;\n\n        // Update the authoritative scale if allowed\n        if (allowAuthoritativeUpdate) {\n            authoritativeScale = newScale;\n        }\n    }\n\n    // Record the anticipated transform and update the anticipation counters and times\n    RecordAnticipatedTransform(newScale, transform.rotation);\n    anticipationCounter++;\n    anticipationTime = Time.time;\n\n    // Reset the smooth transition duration and current smooth time\n    smoothTransitionDuration = 0f;\n    currentSmoothTime = 0f;\n}", "CodeBleu_score": 26.92734974341325}, {"code": "public void AnticipateScale(Vector3 newScale){\n\t    // Check if the network is active and listening\n    if (NetworkManager.Singleton.IsListening) {\n        // Set the local and anticipated scales to the new value\n        localScale = newScale;\n        anticipatedScale = newScale;\n    }\n\n    // Check if the network is allowed to update the authoritative scale\n    if (NetworkManager.Singleton.IsServer && NetworkManager.Singleton.IsConnectedClient) {\n        // Update the authoritative scale\n        transform.localScale = newScale;\n    }\n\n    // Record the anticipated transform\n    RecordAnticipation(newScale);\n\n    // Update the anticipation counters and times\n    anticipationCounters[0]++;\n    anticipationCounters[1]++;\n    anticipationCounters[2]++;\n    anticipationTimes[0] = Time.time;\n    anticipationTimes[1] = Time.time;\n    anticipationTimes[2] = Time.time;\n\n    // Reset the smooth transition duration and current smooth time\n    smoothTransitionDuration = 0.0f;\n    currentSmoothTime = 0.0f;\n}", "CodeBleu_score": 36.347656193424484}]}
{"instance_id": "d67d3c80dd00", "generation_result": [{"code": "private void FlushMessages(){\n\t    for (int i = 0; i < animations.Count; i++) {\n        if (isServer) {\n            RpcSendAnimation(animations[i].name, animations[i].value);\n        } else {\n            CmdSendAnimation(animations[i].name, animations[i].value);\n        }\n    }\n    for (int i = 0; i < parameters.Count; i++) {\n        if (isServer) {\n            RpcSendParameter(parameters[i].name, parameters[i].value);\n        } else {\n            CmdSendParameter(parameters[i].name, parameters[i].value);\n        }\n    }\n    for (int i = 0; i < triggers.Count; i++) {\n        if (isServer) {\n            RpcSendTrigger(triggers[i]);\n        } else {\n            CmdSendTrigger(triggers[i]);\n        }\n    }\n    animations.Clear();\n    parameters.Clear();\n    triggers.Clear();\n}", "CodeBleu_score": 40.87445494693667}, {"code": "private void FlushMessages(){\n\t    if (m_Animator == null) {\n        return;\n    }\n\n    for (int i = 0; i < m_Animator.parameterCount; ++i) {\n        if (m_Animator.parameters[i].type != AnimatorControllerParameterType.Trigger) {\n            var param = m_Animator.parameters[i];\n            var paramHash = param.nameHash;\n            if (m_ParameterUpdates.ContainsKey(paramHash)) {\n                var value = m_ParameterUpdates[paramHash];\n                m_Animator.SetFloat(paramHash, value);\n            }\n        }\n    }\n\n    foreach (var trigger in m_TriggerUpdates) {\n        m_Animator.SetTrigger(trigger);\n    }\n\n    m_TriggerUpdates.Clear();\n    m_ParameterUpdates.Clear();\n}", "CodeBleu_score": 35.79553576211233}, {"code": "private void FlushMessages(){\n\t    foreach (var animUpdate in m_AnimUpdates) {\n        if (m_IsServer) {\n            m_NetworkAnimator.SetTrigger(animUpdate.name, animUpdate.value);\n        }\n        else {\n            m_NetworkAnimator.SetTrigger(animUpdate.name, animUpdate.value);\n        }\n    }\n    m_AnimUpdates.Clear();\n\n    foreach (var paramUpdate in m_ParamUpdates) {\n        if (m_IsServer) {\n            m_NetworkAnimator.SetParameter(paramUpdate.name, paramUpdate.value);\n        }\n        else {\n            m_NetworkAnimator.SetParameter(paramUpdate.name, paramUpdate.value);\n        }\n    }\n    m_ParamUpdates.Clear();\n\n    foreach (var triggerUpdate in m_TriggerUpdates) {\n        if (m_IsServer) {\n            m_NetworkAnimator.SetTrigger(triggerUpdate.name, triggerUpdate.value);\n        }\n        else {\n            m_NetworkAnimator.SetTrigger(triggerUpdate.name, triggerUpdate.value);\n        }\n    }\n    m_TriggerUpdates.Clear();\n}", "CodeBleu_score": 59.65510701682204}]}
{"instance_id": "0632b2f27d22", "generation_result": [{"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t    if (updateStage == NetworkUpdateStage.PreUpdate) {\n        if (isServer || isOwner) {\n            FlushPendingMessages();\n        }\n        ProcessParameterUpdates();\n        CheckForAnimatorChanges();\n    }\n}", "CodeBleu_score": 12.76483506118142}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t    if (updateStage == NetworkUpdateStage.PreUpdate) {\n        if (isServer || isOwner) {\n            FlushPendingMessages();\n        }\n        ProcessParameterUpdates();\n        CheckForAnimatorChanges();\n    }\n}", "CodeBleu_score": 12.76483506118142}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t    if (updateStage == NetworkUpdateStage.PreUpdate) {\n        if (isServer || isOwner) {\n            FlushPendingMessages();\n        }\n    }\n    if (updateStage == NetworkUpdateStage.PostUpdate) {\n        if (isServer || isOwner) {\n            ProcessParameterUpdates();\n            if (isServer || isOwner) {\n                CheckForAnimatorChanges();\n            }\n        }\n    }\n}", "CodeBleu_score": 29.442785066549813}]}
{"instance_id": "d78874b65b32", "generation_result": [{"code": "private void UpdateOwnershipAuthority(){\n\t    // Check if the object has server authority\n    if (photonView.IsMine) {\n        // Set the object's authority state to Server Authority\n        authorityState = AuthorityState.ServerAuthority;\n\n        // Set the Rigidbody's kinematic property to true\n        rb.isKinematic = true;\n\n        // Set the Rigidbody's interpolation property to None\n        rb.interpolation = RigidbodyInterpolation.None;\n    } else {\n        // Set the object's authority state to Client Authority\n        authorityState = AuthorityState.ClientAuthority;\n\n        // Set the Rigidbody's kinematic property to false\n        rb.isKinematic = false;\n\n        // Set the Rigidbody's interpolation property to Interpolate\n        rb.interpolation = RigidbodyInterpolation.Interpolate;\n    }\n}", "CodeBleu_score": 33.21578244941949}, {"code": "private void UpdateOwnershipAuthority(){\n\t    // Check if the object has server authority\n    if (photonView.IsMine) {\n        // The object has server authority\n        // Set the authority state to true\n        authorityState = true;\n\n        // Disable kinematic and interpolation properties of the Rigidbody\n        rb.isKinematic = true;\n        rb.interpolation = RigidbodyInterpolation.None;\n    } else {\n        // The object does not have server authority\n        // Set the authority state to false\n        authorityState = false;\n\n        // Enable kinematic and interpolation properties of the Rigidbody\n        rb.isKinematic = false;\n        rb.interpolation = RigidbodyInterpolation.Interpolate;\n    }\n}", "CodeBleu_score": 29.69460494652133}, {"code": "private void UpdateOwnershipAuthority(){\n\t    // If the object is owned by the server, set the authority state to true and set the Rigidbody's kinematic and interpolation properties.\n    if (Ownership.IsAuthority(this.gameObject)) {\n        this.hasAuthority = true;\n        this.rigidbody.isKinematic = false;\n        this.rigidbody.interpolation = RigidbodyInterpolation.None;\n    }\n    // If the object is not owned by the server, set the authority state to false and set the Rigidbody's kinematic and interpolation properties.\n    else {\n        this.hasAuthority = false;\n        this.rigidbody.isKinematic = true;\n        this.rigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n    }\n}", "CodeBleu_score": 27.93475957899189}]}
{"instance_id": "304fe1278db9", "generation_result": [{"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t    int skip = (int)(compressed >> 62);\n    float sum = 0;\n    for (int i = 0; i < 4; i++) {\n        if (i == skip)\n            continue;\n        float component = (compressed >> (i * 16)) & 0xFFFF;\n        component = (component - 0x8000) / 0x8000;\n        quaternion[i] = component;\n        sum += component * component;\n    }\n    float magnitude = Mathf.Sqrt(1 - sum);\n    quaternion[skip] = magnitude;\n}", "CodeBleu_score": 31.064710297009984}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t    // Determine which component to skip based on the compressed value's highest two bits\n    int skipComponent = (int)(compressed >> 30) & 3;\n\n    // Decompress the remaining components\n    float x = ((compressed >> 15) & 0x7FFF) / 0x7FFF;\n    float y = ((compressed >> 0) & 0x7FFF) / 0x7FFF;\n\n    // Calculate the sum of squared magnitudes\n    float sumOfSquaredMagnitudes = x * x + y * y;\n\n    // Compute the skipped component\n    float skippedComponent = 1.0f - sumOfSquaredMagnitudes;\n\n    // Assign the decompressed values to the quaternion\n    switch (skipComponent) {\n        case 0:\n            quaternion.x = x;\n            quaternion.y = y;\n            quaternion.z = Mathf.Sqrt(skippedComponent);\n            quaternion.w = Mathf.Sqrt(sumOfSquaredMagnitudes);\n            break;\n        case 1:\n            quaternion.x = x;\n            quaternion.y = Mathf.Sqrt(skippedComponent);\n            quaternion.z = y;\n            quaternion.w = Mathf.Sqrt(sumOfSquaredMagnitudes);\n            break;\n        case 2:\n            quaternion.x = Mathf.Sqrt(skippedComponent);\n            quaternion.y = x;\n            quaternion.z = y;\n            quaternion.w = Mathf.Sqrt(sumOfSquaredMagnitudes);\n            break;\n        case 3:\n            quaternion.x = Mathf.Sqrt(skippedComponent);\n            quaternion.y = y;\n            quaternion.z = x;\n            quaternion.w = Mathf.Sqrt(sumOfSquaredMagnitudes);\n            break;\n    }\n}", "CodeBleu_score": 21.117493040579944}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t    float sumSquared = quaternion.x * quaternion.x + quaternion.y * quaternion.y + quaternion.z * quaternion.z;\n    float magnitude = Mathf.Sqrt(1.0f - sumSquared);\n    switch (compressed >> 30) {\n        case 1:\n            quaternion.x = (compressed & 0x3FFFFFFF) * 0.000000059604644775390625f;\n            quaternion.y = magnitude;\n            quaternion.z = 0.0f;\n            quaternion.w = 0.0f;\n            break;\n        case 2:\n            quaternion.x = 0.0f;\n            quaternion.y = (compressed & 0x3FFFFFFF) * 0.000000059604644775390625f;\n            quaternion.z = magnitude;\n            quaternion.w = 0.0f;\n            break;\n        case 3:\n            quaternion.x = magnitude;\n            quaternion.y = 0.0f;\n            quaternion.z = (compressed & 0x3FFFFFFF) * 0.000000059604644775390625f;\n            quaternion.w = 0.0f;\n            break;\n        default:\n            quaternion.x = (compressed & 0x3FFFFFFF) * 0.000000059604644775390625f;\n            quaternion.y = (compressed >> 29) * 0.000000059604644775390625f;\n            quaternion.z = (compressed >> 30) * 0.000000059604644775390625f;\n", "CodeBleu_score": 16.568838991399517}]}
{"instance_id": "452b860a7dde", "generation_result": [{"code": "static void GenerateCLRBindingByAnalysis(){\n\t    // Create a new AppDomain\n    AppDomain domain = AppDomain.CreateDomain(\"MyDomain\");\n\n    // Load an assembly from a specified file\n    Assembly assembly = domain.Load(Assembly.GetExecutingAssembly().Location);\n\n    // Initialize ILRuntime with the domain\n    InitILRuntime(domain);\n\n    // Generate binding code\n    ILRuntime.Runtime.CLRBinding.BindingCodeGenerator.GenerateBindingCode(assembly);\n\n    // Refresh the AssetDatabase\n    AssetDatabase.Refresh();\n}", "CodeBleu_score": 23.910126116413753}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\t    string dllPath = Path.Combine(Application.dataPath, \"Managed/Assembly-CSharp.dll\");\n    AppDomain domain = AppDomain.CreateDomain(\"Hotfix\");\n    ILRuntime.Runtime.Enviorment.AppDomain appDomain = new ILRuntime.Runtime.Enviorment.AppDomain();\n    Assembly ass = Assembly.LoadFile(dllPath);\n    appDomain.LoadAssembly(ass, new ILRuntime.CLRBinding.ILRuntimeAssemblyLoader());\n    ILRuntime.Runtime.CLRBinding.BindingCodeGenerator.BindingCodeGenerator.GenerateBindingCode(appDomain, \"Hotfix\");\n    AssetDatabase.Refresh();\n}", "CodeBleu_score": 25.445596987381116}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\t    string dllPath = EditorUtility.OpenFilePanel(\"Select DLL\", Application.dataPath, \"dll\");\n    if (string.IsNullOrEmpty(dllPath)) {\n        return;\n    }\n    string outputPath = EditorUtility.SaveFilePanel(\"Save Binding Code\", Application.dataPath, \"GeneratedCLRBinding\", \"cs\");\n    if (string.IsNullOrEmpty(outputPath)) {\n        return;\n    }\n\n    AppDomain domain = AppDomain.CreateDomain(\"ILRuntime\");\n    Assembly assembly = domain.Load(dllPath);\n    using (ILRuntime.Runtime.Enviorment.AppDomain appDomain = new ILRuntime.Runtime.Enviorment.AppDomain()) {\n        ILRuntime.Runtime.CLRBinding.BindingCodeGenerator.GenerateBindingCode(assembly, outputPath);\n    }\n    AppDomain.Unload(domain);\n    AssetDatabase.Refresh();\n}", "CodeBleu_score": 24.13107959952044}]}
{"instance_id": "b8990031b636", "generation_result": [{"code": "public override void OnInspectorGUI(){\n\t    base.OnInspectorGUI();\n\n    serializedObject.Update();\n\n    ConfigComponent t = (ConfigComponent)target;\n\n    EditorGUI.BeginDisabledGroup(EditorApplication.isPlaying && PrefabUtility.GetPrefabParent(t) != null);\n    {\n        EditorGUILayout.PropertyField(m_ConfigStringProperty, true);\n        EditorGUILayout.PropertyField(m_LoadTypeProperty, true);\n    }\n    EditorGUI.EndDisabledGroup();\n\n    serializedObject.ApplyModifiedProperties();\n\n    if (EditorApplication.isPlaying && PrefabUtility.GetPrefabParent(t) != null) {\n        EditorGUILayout.LabelField(\"Config Count\", t.ConfigCount.ToString());\n        EditorGUILayout.LabelField(\"Cached Bytes Size\", t.CachedBytesSize.ToString());\n    }\n\n    Repaint();\n}", "CodeBleu_score": 70.02263821843304}, {"code": "public override void OnInspectorGUI(){\n\t    base.OnInspectorGUI();\n\n    serializedObject.Update();\n\n    ConfigComponent t = (ConfigComponent)target;\n\n    EditorGUI.BeginDisabledGroup(Application.isPlaying && PrefabUtility.GetPrefabParent(t) != null);\n    {\n        EditorGUILayout.PropertyField(m_ConfigStringProperty);\n    }\n    EditorGUI.EndDisabledGroup();\n\n    serializedObject.ApplyModifiedProperties();\n\n    if (Application.isPlaying && t.Target is GameObject) {\n        EditorGUILayout.LabelField(\"Config Count\", t.ConfigCount.ToString());\n        EditorGUILayout.LabelField(\"Cached Bytes Size\", t.CachedBytesSize.ToString());\n    }\n\n    Repaint();\n}", "CodeBleu_score": 69.03895814211587}, {"code": "public override void OnInspectorGUI(){\n\t    base.OnInspectorGUI();\n\n    serializedObject.Update();\n\n    ConfigComponent t = (ConfigComponent)target;\n\n    EditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_ConfigName\"), true);\n    EditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_LoadType\"), true);\n    EditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_ReleaseStreamingAssets\"), true);\n    EditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_Encrypted\"), true);\n    EditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_LoadFromBinary\"), true);\n    EditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_LoadFromJson\"), true);\n\n    serializedObject.ApplyModifiedProperties();\n\n    if (EditorApplication.isPlaying && PrefabUtility.GetPrefabInstanceStatus(t.gameObject) == PrefabInstanceStatus.Connected) {\n        EditorGUILayout.LabelField(\"Config Count\", t.ConfigCount.ToString());\n        EditorGUILayout.LabelField(\"Cached Bytes Size\", t.CachedBytesSize.ToString());\n    }\n\n    Repaint();\n}", "CodeBleu_score": 68.96446708057381}]}
{"instance_id": "6453adc2daa8", "generation_result": [{"code": "public static void DefaultScenes(){\n\t    HashSet<string> defaultScenes = new HashSet<string> {\n        \"Assets/Scenes/MainMenu.unity\",\n        \"Assets/Scenes/Gameplay.unity\",\n        \"Assets/Scenes/Loading.unity\"\n    };\n\n    List<EditorBuildSettingsScene> buildScenes = new List<EditorBuildSettingsScene>();\n    foreach (string scene in defaultScenes) {\n        buildScenes.Add(new EditorBuildSettingsScene(scene, true));\n    }\n\n    EditorBuildSettings.scenes = buildScenes.ToArray();\n    Debug.Log(\"Scenes have been set to the default.\");\n}", "CodeBleu_score": 53.722186903256144}, {"code": "public static void DefaultScenes(){\n\t    // Create a HashSet of default scene names\n    HashSet<string> defaultScenes = new HashSet<string> {\n        \"Assets/Scenes/MainMenu.unity\",\n        \"Assets/Scenes/Game.unity\",\n        \"Assets/Scenes/GameOver.unity\"\n    };\n\n    // Convert the HashSet to a list of EditorBuildSettingsScene objects\n    List<EditorBuildSettingsScene> buildScenes = new List<EditorBuildSettingsScene>();\n    foreach (string scene in defaultScenes) {\n        buildScenes.Add(new EditorBuildSettingsScene(scene, true));\n    }\n\n    // Update the EditorBuildSettings with the new list of scenes\n    EditorBuildSettings.scenes = buildScenes.ToArray();\n\n    // Log that the scenes have been set to the default\n    Debug.Log(\"Scenes set to default\");\n}", "CodeBleu_score": 54.37954988657449}, {"code": "public static void DefaultScenes(){\n\t    HashSet<string> defaultSceneNames = new HashSet<string> {\n        \"Assets/Scenes/Splash.unity\",\n        \"Assets/Scenes/MainMenu.unity\",\n        \"Assets/Scenes/Gameplay.unity\"\n    };\n    List<EditorBuildSettingsScene> defaultScenes = new List<EditorBuildSettingsScene>();\n    foreach (string sceneName in defaultSceneNames) {\n        defaultScenes.Add(new EditorBuildSettingsScene(sceneName, true));\n    }\n    EditorBuildSettings.scenes = defaultScenes.ToArray();\n    Debug.Log(\"Scenes have been set to default\");\n}", "CodeBleu_score": 56.024603926374496}]}
{"instance_id": "e199f1a42526", "generation_result": [{"code": "public void Draw(){\n\t    // Get the selected index from the property\n    int selectedIndex = property.intValue;\n\n    // Draw the popup menu for selecting a helper type\n    selectedIndex = EditorGUILayout.Popup(\"Helper Type\", selectedIndex, HelperTypeNames.ToArray());\n\n    // Update the selected index in the property\n    property.intValue = selectedIndex;\n\n    // If no helper type is selected, show a field for a custom helper\n    if (selectedIndex == 0) {\n        // Get the custom helper from the property\n        string customHelper = property.FindPropertyRelative(\"customHelper\").stringValue;\n\n        // Show a field for entering a custom helper\n        customHelper = EditorGUILayout.TextField(\"Custom Helper\", customHelper);\n\n        // Update the custom helper in the property\n        property.FindPropertyRelative(\"customHelper\").stringValue = customHelper;\n\n        // If the custom helper is not set, show an error message\n        if (string.IsNullOrEmpty(customHelper)) {\n            EditorGUILayout.HelpBox(\"Custom helper is not set.\", MessageType.Error);\n        }\n    }\n}", "CodeBleu_score": 40.128136558244606}, {"code": "public void Draw(){\n\t    // Get the current selected index\n    int selectedIndex = serializedObject.FindProperty(\"selectedIndex\").intValue;\n\n    // Get the current selected helper type\n    HelperType selectedHelperType = (HelperType)selectedIndex;\n\n    // Get the list of helper types\n    List<HelperType> helperTypes = new List<HelperType>();\n    foreach (HelperType type in System.Enum.GetValues(typeof(HelperType))) {\n        helperTypes.Add(type);\n    }\n\n    // Display a popup menu for selecting a helper type\n    selectedIndex = EditorGUILayout.Popup(\"Helper Type\", selectedIndex, helperTypes.Select(x => x.ToString()).ToArray());\n\n    // Update the selected index\n    serializedObject.FindProperty(\"selectedIndex\").intValue = selectedIndex;\n\n    // If no helper type is selected, display a field for a custom helper\n    if (selectedIndex == 0) {\n        // Get the custom helper\n        string customHelper = serializedObject.FindProperty(\"customHelper\").stringValue;\n\n        // Display a field for a custom helper\n        customHelper = EditorGUILayout.TextField(\"Custom Helper\", customHelper);\n\n        // Update the custom helper\n        serializedObject.FindProperty(\"customHelper\").stringValue = customHelper;\n\n        // Show an error message if the custom helper is not set\n        if (string.IsNullOrEmpty(customHelper)) {\n            EditorGUILayout.HelpBox(\"Please set a custom helper.\", MessageType.Error);\n        }\n    }\n}", "CodeBleu_score": 42.46893384571399}, {"code": "public void Draw(){\n\t    // Get the list of helper types from the helper type list.\n    List<string> helperTypeList = HelperTypeList.GetHelperTypeList();\n\n    // Draw the popup menu for selecting a helper type.\n    selectedIndex = EditorGUILayout.Popup(\"Helper Type\", selectedIndex, helperTypeList.ToArray());\n\n    // If a helper type is selected, update the selected helper type.\n    if (selectedIndex >= 0) {\n        selectedHelperType = helperTypeList[selectedIndex];\n    }\n\n    // If no helper type is selected, display a field for a custom helper.\n    if (selectedHelperType == \"Custom\") {\n        // Display a field for the custom helper.\n        customHelper = EditorGUILayout.TextField(\"Custom Helper\", customHelper);\n\n        // If the custom helper is not set, show an error message.\n        if (string.IsNullOrEmpty(customHelper)) {\n            EditorGUILayout.HelpBox(\"Custom helper is not set.\", MessageType.Error);\n        }\n    }\n}", "CodeBleu_score": 40.80878745176476}]}
{"instance_id": "957e0aaa6f72", "generation_result": [{"code": "public static void DisableAllLogs(){\n\t    // Remove the general logging symbol\n    string symbols = PlayerSettings.GetScriptingDefineSymbolsForGroup(EditorUserBuildSettings.selectedBuildTargetGroup);\n    if (symbols.Contains(\"LOG\")) {\n        symbols = symbols.Replace(\"LOG;\", \"\");\n        PlayerSettings.SetScriptingDefineSymbolsForGroup(EditorUserBuildSettings.selectedBuildTargetGroup, symbols);\n    }\n\n    // Remove symbols for specific logs and logs above a certain level\n    foreach (string logLevel in new string[] { \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\", \"FATAL\" }) {\n        if (symbols.Contains(logLevel)) {\n            symbols = symbols.Replace(logLevel + \";\", \"\");\n            PlayerSettings.SetScriptingDefineSymbolsForGroup(EditorUserBuildSettings.selectedBuildTargetGroup, symbols);\n        }\n    }\n}", "CodeBleu_score": 39.97811682675283}, {"code": "public static void DisableAllLogs(){\n\t    string[] symbols = PlayerSettings.GetScriptingDefineSymbolsForGroup(EditorUserBuildSettings.selectedBuildTargetGroup).Split(';');\n    List<string> newSymbols = new List<string>(symbols);\n    newSymbols.Remove(\"ENABLE_LOGS\");\n    newSymbols.Remove(\"ENABLE_DEBUG_LOGS\");\n    newSymbols.Remove(\"ENABLE_INFO_LOGS\");\n    newSymbols.Remove(\"ENABLE_WARNING_LOGS\");\n    newSymbols.Remove(\"ENABLE_ERROR_LOGS\");\n    newSymbols.Remove(\"ENABLE_FATAL_LOGS\");\n    newSymbols.Remove(\"ENABLE_EXCEPTION_LOGS\");\n    newSymbols.Remove(\"ENABLE_ASSERT_LOGS\");\n    PlayerSettings.SetScriptingDefineSymbolsForGroup(EditorUserBuildSettings.selectedBuildTargetGroup, string.Join(\";\", newSymbols.ToArray()));\n}", "CodeBleu_score": 34.32914195396931}, {"code": "public static void DisableAllLogs(){\n\t    // Remove the general logging symbol\n    string[] symbols = PlayerSettings.GetScriptingDefineSymbolsForGroup(EditorUserBuildSettings.selectedBuildTargetGroup).Split(';');\n    List<string> newSymbols = new List<string>(symbols);\n    newSymbols.Remove(\"LOG_ALL\");\n\n    // Remove symbols for specific logs and logs above a certain level\n    foreach (string symbol in symbols) {\n        if (symbol.StartsWith(\"LOG_\") && symbol != \"LOG_ALL\") {\n            newSymbols.Remove(symbol);\n        }\n    }\n\n    PlayerSettings.SetScriptingDefineSymbolsForGroup(EditorUserBuildSettings.selectedBuildTargetGroup, string.Join(\";\", newSymbols.ToArray()));\n}", "CodeBleu_score": 53.21120453386271}]}
{"instance_id": "8a544c3d9513", "generation_result": [{"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t    GameFrameworkComponent current = GameFramework.components.head;\n    while (current != null) {\n        if (current.GetType() == type) {\n            return current;\n        }\n        current = current.next;\n    }\n    return null;\n}", "CodeBleu_score": 57.80567922597469}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t    GameFrameworkComponent component = null;\n    for (GameFrameworkComponent current = _components; current != null; current = current._next) {\n        if (current.GetType() == type) {\n            component = current;\n            break;\n        }\n    }\n    return component;\n}", "CodeBleu_score": 40.298082660493776}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t    LinkedListNode<GameFrameworkComponent> current = components.First;\n    while (current != null) {\n        if (current.Value.GetType() == type) {\n            return current.Value;\n        }\n        current = current.Next;\n    }\n    return null;\n}", "CodeBleu_score": 92.51356856898579}]}
{"instance_id": "ec304512c0e4", "generation_result": [{"code": "public static void Shutdown(ShutdownType shutdownType){\n\t    Log.Info(\"Shutdown game framework.\");\n\n    // Shutdown BaseComponent\n    if (s_BaseComponent != null) {\n        s_BaseComponent.Shutdown();\n    }\n\n    // Clear game framework components\n    s_BaseComponent = null;\n    s_ComponentManager = null;\n    s_EventManager = null;\n    s_FsmManager = null;\n    s_ProcedureManager = null;\n    s_ReferencePool = null;\n    s_ResourceManager = null;\n    s_SceneManager = null;\n    s_SoundManager = null;\n    s_UIComponent = null;\n    s_WebRequestManager = null;\n\n    // Shutdown game scene\n    if (shutdownType == ShutdownType.Restart) {\n        SceneManager.LoadScene(SceneManager.GetActiveScene().name);\n    }\n    // Quit game\n    else if (shutdownType == ShutdownType.Quit) {\n        Application.Quit();\n    }\n}", "CodeBleu_score": 33.67007825553198}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\t    Log.Info(\"Shutdown game framework.\");\n    BaseComponent baseComponent = GameEntry.GetComponent<BaseComponent>();\n    if (baseComponent != null) {\n        baseComponent.Shutdown();\n    }\n    ClearComponents();\n    switch (shutdownType) {\n        case ShutdownType.None:\n            break;\n        case ShutdownType.Restart:\n            SceneManager.LoadScene(SceneManager.GetActiveScene().name);\n            break;\n        case ShutdownType.Quit:\n            Application.Quit();\n            break;\n        default:\n            throw new GameFrameworkException(string.Format(\"Shutdown type '{0}' is invalid.\", shutdownType.ToString()));\n    }\n}", "CodeBleu_score": 35.80578968228071}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\t    Log.Info(\"Shutdown game framework.\");\n    BaseComponent baseComponent = GameEntry.GetComponent<BaseComponent>();\n    if (baseComponent != null) {\n        baseComponent.Shutdown();\n    }\n\n    ClearComponents();\n\n    switch (shutdownType) {\n        case ShutdownType.Restart:\n            SceneManager.LoadScene(SceneManager.GetActiveScene().name);\n            break;\n\n        case ShutdownType.Quit:\n            Application.Quit();\n            break;\n\n        default:\n            break;\n    }\n}", "CodeBleu_score": 32.59172803415412}]}
{"instance_id": "5c78a1d4f59d", "generation_result": [{"code": "protected override void Awake(){\n\t    base.Awake();\n    ConfigManager = GameFrameworkEntry.GetModule<IConfigManager>();\n    if (ConfigManager == null) {\n        Log.Fatal(\"Config manager is invalid.\");\n        return;\n    }\n    ConfigManager.ReadDataSuccess += OnReadDataSuccess;\n    ConfigManager.ReadDataFailure += OnReadDataFailure;\n    if (UpdateAssetOnStart) {\n        ConfigManager.UpdateAsset += OnUpdateAsset;\n    }\n    if (CheckDependencyAssetOnStart) {\n        ConfigManager.CheckDependencyAsset += OnCheckDependencyAsset;\n    }\n}", "CodeBleu_score": 78.23124064921669}, {"code": "protected override void Awake(){\n\t    base.Awake();\n    IConfigManager configManager = GameFrameworkEntry.GetModule<IConfigManager>();\n    if (configManager == null) {\n        Log.Fatal(\"Config manager is invalid.\");\n        return;\n    }\n    configManager.ReadDataSuccess += OnReadDataSuccess;\n    configManager.ReadDataFailure += OnReadDataFailure;\n    if (m_UpdateAsset) {\n        configManager.UpdateAssetSuccess += OnUpdateAssetSuccess;\n        configManager.UpdateAssetFailure += OnUpdateAssetFailure;\n    }\n    if (m_DependencyAsset) {\n        configManager.DependencyAssetSuccess += OnDependencyAssetSuccess;\n        configManager.DependencyAssetFailure += OnDependencyAssetFailure;\n    }\n}", "CodeBleu_score": 54.92256345989185}, {"code": "protected override void Awake(){\n\t    base.Awake();\n    IConfigManager configManager = GameFrameworkEntry.GetModule<IConfigManager>();\n    if (configManager == null) {\n        Log.Fatal(\"Config manager is invalid.\");\n        return;\n    }\n\n    configManager.LoadConfig(ConfigName, AssetUtility.GetConfigAsset(ConfigName, LoadType.Text), LoadType.Text);\n    configManager.ParseConfig(ConfigName, this.OnParseData);\n}", "CodeBleu_score": 36.11690247817314}]}
{"instance_id": "fbb36ff9d552", "generation_result": [{"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t    TextAsset textAsset = configAsset as TextAsset;\n    if (textAsset == null) {\n        Log.Warning(\"Config asset '{0}' is invalid.\", configAssetName);\n        return false;\n    }\n\n    if (configAssetName.EndsWith(BytesExtension, System.StringComparison.Ordinal)) {\n        return ParseBytes(textAsset, configManager, userData);\n    }\n\n    return ParseText(textAsset, configManager, userData);\n}", "CodeBleu_score": 65.6383286418831}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t    TextAsset textAsset = configAsset as TextAsset;\n    if (textAsset == null) {\n        Log.Warning(\"Config asset '{0}' is invalid.\", configAssetName);\n        return false;\n    }\n\n    if (configAssetName.EndsWith(\".bytes\")) {\n        ParseBytes(configManager, textAsset, userData);\n        return true;\n    }\n\n    ParseText(configManager, textAsset, userData);\n    return true;\n}", "CodeBleu_score": 63.9717553466828}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t    TextAsset configTextAsset = configAsset as TextAsset;\n    if (configTextAsset == null) {\n        Log.Warning(\"Config asset '{0}' is invalid.\", configAssetName);\n        return false;\n    }\n\n    string configText = configTextAsset.text;\n    if (configText[0] == '\\x01') {\n        byte[] configBytes = configTextAsset.bytes;\n        configManager.ParseBytes(Utility.Text.Format(\"{0}.bytes\", configAssetName), configBytes, 1, configBytes.Length - 1, userData);\n    } else {\n        configManager.ParseText(configAssetName, configText, Encoding.UTF8, userData);\n    }\n\n    return true;\n}", "CodeBleu_score": 69.68045303340672}]}
{"instance_id": "84d744c480ca", "generation_result": [{"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t    if (configBytes == null) {\n        Log.Warning(\"Config bytes is invalid.\");\n        return false;\n    }\n\n    try {\n        using (MemoryStream memoryStream = new MemoryStream(configBytes, startIndex, length, false)) {\n            using (BinaryReader binaryReader = new BinaryReader(memoryStream, Encoding.UTF8)) {\n                string configName = null;\n                string configValue = null;\n                while (binaryReader.BaseStream.Position < binaryReader.BaseStream.Length) {\n                    configName = binaryReader.ReadString();\n                    configValue = binaryReader.ReadString();\n                    if (string.IsNullOrEmpty(configName)) {\n                        Log.Warning(\"Config name is invalid.\");\n                        return false;\n                    }\n\n                    if (!configManager.AddConfig(configName, configValue)) {\n                        Log.Warning(\"Can not add config with config name '{0}' to config manager.\", configName);\n                        return false;\n                    }\n                }\n            }\n        }\n\n        return true;\n    }\n    catch (Exception exception) {\n        if (exception is GameFrameworkException) {\n            Log.Error(\"Load config failure with exception '{0}'.\", Text.Format(\"{0}\n{1}\", exception.ToString(), exception.StackTrace));\n        }\n        else {\n            Log.Error(\"Load config failure with exception '{0}'.\", exception.ToString());\n        }\n\n        return false;\n    }\n}", "CodeBleu_score": 69.2188473504746}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t    try {\n        using (MemoryStream memoryStream = new MemoryStream(configBytes, startIndex, length, false)) {\n            using (BinaryReader binaryReader = new BinaryReader(memoryStream, Encoding.UTF8)) {\n                string configName = null;\n                string configValue = null;\n                while (binaryReader.BaseStream.Position < binaryReader.BaseStream.Length) {\n                    configName = binaryReader.ReadString();\n                    configValue = binaryReader.ReadString();\n                    if (string.IsNullOrEmpty(configName)) {\n                        Log.Warning(\"Config name is invalid.\");\n                        return false;\n                    }\n\n                    if (!configManager.AddConfig(configName, configValue)) {\n                        Log.Warning(\"Can not add config with config name '{0}' which may be invalid or duplicate.\", configName);\n                        return false;\n                    }\n                }\n            }\n        }\n\n        return true;\n    }\n    catch (Exception exception) {\n        Log.Error(\"Can not parse config bytes with exception '{0}'.\", exception.ToString());\n        return false;\n    }\n}", "CodeBleu_score": 77.64838814486392}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t    try {\n        using (MemoryStream memoryStream = new MemoryStream(configBytes, startIndex, length, false)) {\n            using (BinaryReader binaryReader = new BinaryReader(memoryStream, Encoding.UTF8)) {\n                string name = null;\n                string value = null;\n                int configCount = binaryReader.Read7BitEncodedInt32();\n                for (int i = 0; i < configCount; i++) {\n                    name = binaryReader.ReadString();\n                    value = binaryReader.ReadString();\n                    if (string.IsNullOrEmpty(name)) {\n                        Log.Warning(\"Config name is invalid.\");\n                        return false;\n                    }\n\n                    if (!configManager.AddConfig(name, value)) {\n                        Log.Warning(\"Config name '{0}' is invalid or duplicate.\", name);\n                        return false;\n                    }\n                }\n            }\n        }\n\n        return true;\n    }\n    catch (Exception exception) {\n        Log.Warning(\"Can not parse config '{0}' with exception '{1}'.\", Text, exception.ToString());\n        return false;\n    }\n}", "CodeBleu_score": 69.40962977738945}]}
{"instance_id": "298bb6fa19a4", "generation_result": [{"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t    configManager.GetResourceComponent().UnloadAsset(configAsset);\n}", "CodeBleu_score": 45.96975913837101}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t    configManager.UnloadAsset(configAsset);\n}", "CodeBleu_score": 55.21857455682082}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t    configManager.GetResourceComponent().UnloadAsset(configAsset);\n}", "CodeBleu_score": 45.96975913837101}]}
{"instance_id": "fa2003d95e36", "generation_result": [{"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t    ActiveSceneChangedEventArgs activeSceneChangedEventArgs = ReferencePool.Acquire<ActiveSceneChangedEventArgs>();\n    activeSceneChangedEventArgs.LastActiveScene = lastActiveScene;\n    activeSceneChangedEventArgs.ActiveScene = activeScene;\n    return activeSceneChangedEventArgs;\n}", "CodeBleu_score": 83.13523625026366}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t    var activeSceneChangedEventArgs = ReferencePool.Acquire<ActiveSceneChangedEventArgs>();\n    activeSceneChangedEventArgs.LastActiveScene = lastActiveScene;\n    activeSceneChangedEventArgs.ActiveScene = activeScene;\n    return activeSceneChangedEventArgs;\n }", "CodeBleu_score": 68.1154674638335}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t    ActiveSceneChangedEventArgs activeSceneChangedEventArgs = ReferencePool.Acquire<ActiveSceneChangedEventArgs>();\n    activeSceneChangedEventArgs.LastActiveScene = lastActiveScene;\n    activeSceneChangedEventArgs.ActiveScene = activeScene;\n    return activeSceneChangedEventArgs;\n}", "CodeBleu_score": 83.13523625026366}]}
{"instance_id": "aba13f34251c", "generation_result": [{"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t    if (string.IsNullOrEmpty(sceneAssetName)) {\n        Log.Error(\"Scene asset name is invalid.\");\n        return;\n    }\n\n    if (!sceneAssetName.StartsWith(\"Assets/\") || !sceneAssetName.EndsWith(\".unity\")) {\n        Log.Error(\"Scene asset name is not start with 'Assets/' or end with '.unity'.\");\n        return;\n    }\n\n    SceneManager.LoadScene(sceneAssetName, (LoadSceneMode)priority);\n}", "CodeBleu_score": 60.686129511330414}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t    if (string.IsNullOrEmpty(sceneAssetName)) {\n        Log.Error(\"Scene asset name is invalid.\");\n        return;\n    }\n\n    if (!sceneAssetName.StartsWith(\"Assets/\") || !sceneAssetName.EndsWith(\".unity\")) {\n        Log.Error(\"Scene asset name is not start with 'Assets/' or end with '.unity'.\");\n        return;\n    }\n\n    SceneManager.LoadScene(sceneAssetName, (LoadSceneMode)priority);\n}", "CodeBleu_score": 60.686129511330414}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t    if (string.IsNullOrEmpty(sceneAssetName)) {\n        Log.Error(\"Scene asset name is invalid.\");\n        return;\n    }\n\n    if (!sceneAssetName.StartsWith(\"Assets/\") || !sceneAssetName.EndsWith(\".unity\")) {\n        Log.Error(\"Scene asset name is not start with 'Assets/' or end with '.unity'.\");\n        return;\n    }\n\n    SceneManager.LoadScene(sceneAssetName, (LoadSceneMode)priority);\n}", "CodeBleu_score": 60.686129511330414}]}
{"instance_id": "3fe99fba3ce8", "generation_result": [{"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t    for (EBinariesPatchFeature feature : TEnumRange<EBinariesPatchFeature>()) {\n        if (FHotPatcherTemplateHelper::IsRegistered<IBinariesPatchFeature>(feature)) {\n            FHotPatcherTemplateHelper::AppendEnumeration(feature);\n        }\n    }\n\n    OnHotPatcherFeatureRegisteredHandle = IModularFeatures::Get().OnModularFeatureRegistered().AddRaw(\n        this, &FBinariesPatchFeatureModule::OnHotPatcherFeatureRegistered);\n    OnHotPatcherFeatureUnregisteredHandle = IModularFeatures::Get().OnModularFeatureUnregistered().AddRaw(\n        this, &FBinariesPatchFeatureModule::OnHotPatcherFeatureUnregistered);\n}", "CodeBleu_score": 41.38540427531728}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t    for (EBinariesPatchFeature Feature : TEnumRange<EBinariesPatchFeature>()) {\n        FName FeatureName = FName(FHotPatcherTemplateHelper::GetEnumNameByValue(TEXT(\"EBinariesPatchFeature\"), Feature));\n        if (FName(*UEnum::GetValueAsString(FeatureName)) != FName(TEXT(\"NONE\"))) {\n            FHotPatcherTemplateHelper::AppendEnumeration(FeatureName, TEXT(\"EBinariesPatchFeature\"));\n        }\n    }\n    OnHotPatcherFeatureRegisteredHandle = IModularFeatures::Get().OnModularFeatureRegistered().AddRaw(\n        this, &FBinariesPatchFeatureModule::OnHotPatcherFeatureRegistered);\n    OnHotPatcherFeatureUnregisteredHandle = IModularFeatures::Get().OnModularFeatureUnregistered().AddRaw(\n        this, &FBinariesPatchFeatureModule::OnHotPatcherFeatureUnregistered);\n}", "CodeBleu_score": 49.26343690725605}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\tfor (EHotPatcherBinariesPatchFeature Feature : TEnumRange<EHotPatcherBinariesPatchFeature>()) {\n\t\tFName FeatureName = FHotPatcherTemplateHelper::GetEnumNameByValue(\n\t\t\tTEXT(\"EHotPatcherBinariesPatchFeature\"), Feature);\n\t\tFName ClassName = FName(FString::Printf(TEXT(\"%s.%s_%s\"), *FName(TEXT(\"HotPatcherBinariesPatchFeature\")).ToString(), *FeatureName.ToString(), *FName(TEXT(\"Factory\")).ToString()));\n\t\tif (UClass* FactoryClass = FindObject<UClass>(ANY_PACKAGE, *ClassName.ToString())) {\n\t\t\tFHotPatcherTemplateHelper::AppendEnumeration(FactoryClass, TEXT(\"EHotPatcherBinariesPatchFeature\"));\n\t\t}\n\t}\n\n\tIModularFeatures::Get().OnModularFeatureRegistered().AddRaw(\n\t\tthis, &FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n\tIModularFeatures::Get().OnModularFeatureUnregistered().AddRaw(\n\t\tthis, &FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n}", "CodeBleu_score": 44.633198163162966}]}
{"instance_id": "c702cc0f74b5", "generation_result": [{"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTMap<FString, FString> KeyValues = UFlibPatchParserHelper::GetCommandLineParamsMap(Commandline);\n\tTArray<FString> PatchConfigList;\n\tif (KeyValues.Contains(Token))\n\t{\n\t\tFString TmpPatchConfig = KeyValues[Token];\n\t\tTmpPatchConfig.ParseIntoArray(PatchConfigList,TEXT(\",\"),true);\n\t}\n\treturn PatchConfigList;\n}", "CodeBleu_score": 63.99752849260303}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTMap<FString, FString> KeyValues;\n\tTArray<FString> OutArray;\n\tif (FParse::Value(*Commandline, *Token, OutArray)) {\n\t\treturn OutArray;\n\t}\n\treturn OutArray;\n}", "CodeBleu_score": 32.39186998748218}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTMap<FString,FString> CommandlineMap;\n\tTArray<FString> CommandlineArray;\n\tCommandline.ParseIntoArray(CommandlineArray,TEXT(\" \"),true);\n\tfor(const auto& CommandlineItem:CommandlineArray)\n\t{\n\t\tFString CommandlineItemKey;\n\t\tFString CommandlineItemValue;\n\t\tif(CommandlineItem.Split(TEXT(\"=\"),&CommandlineItemKey,&CommandlineItemValue))\n\t\t{\n\t\t\tCommandlineMap.Add(CommandlineItemKey,CommandlineItemValue);\n\t\t}\n\t}\n\tTArray<FString> CommandlineConfigArray;\n\tif(CommandlineMap.Contains(Token))\n\t{\n\t\tCommandlineMap[Token].ParseIntoArray(CommandlineConfigArray,TEXT(\",\"),true);\n\t}\n\treturn CommandlineConfigArray;\n}", "CodeBleu_score": 49.41893491172048}]}
{"instance_id": "6a6382275b1d", "generation_result": [{"code": "bool CommandletHelper::IsCookCommandlet(){\n\t    if (GEngine == nullptr) {\n        return false;\n    }\n    FString CommandletName = GEngine->GetEngineSubsystem<UFlibAssetManageHelper>()\n        ->GetCookCommandletName();\n    return !CommandletName.IsEmpty() && CommandletName.Equals(TEXT(\"cook\"), ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 33.713483255733436}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\t    if (GIsRunningCommandlet) {\n        FString CommandletName = FPlatformProcess::GetCurrentProcessExecutableName();\n        if (!CommandletName.IsEmpty()) {\n            if (CommandletName.Contains(TEXT(\"cook\"), ESearchCase::IgnoreCase)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}", "CodeBleu_score": 32.75235466486471}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\t\tFString CommandletName = FPlatformProcess::GetEnvironmentVar(TEXT(\"CURRENT_COMMANDLET_NAME\"));\n\tif (!CommandletName.IsEmpty() && CommandletName.Contains(TEXT(\"cook\"), ESearchCase::IgnoreCase)) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 30.04661689997211}]}
{"instance_id": "6888ed47b6be", "generation_result": [{"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t\tFString CommandletName = FPaths::GetBaseFilename(FCommandLine::Get());\n\n\tFExportReleaseSettings* ExportReleaseSettings = GetExportReleaseSettings();\n\n\tif (ExportReleaseSettings->bServerlessCounter) {\n\t\tFReleaseProxy* ReleaseProxy = FReleaseProxy::Get();\n\t\tReleaseProxy->Init(ExportReleaseSettings->ServerUrl, ExportReleaseSettings->ProjectID, ExportReleaseSettings->ProjectName);\n\t\tReleaseProxy->ModifyProjectName(CommandletName);\n\t\tReleaseProxy->ProcessCounter();\n\t}\n}", "CodeBleu_score": 28.462400469594023}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t    // Extract the commandlet name from the command line\n    FString CommandletName = FCommandLine::Get();\n    int32 Index = CommandletName.Find(TEXT(\" \"));\n    if (Index != INDEX_NONE) {\n        CommandletName = CommandletName.Left(Index);\n    }\n\n    // Check if serverless counting is enabled in the settings\n    FExportReleaseSettings* ExportReleaseSettings = GetMutableDefault<FExportReleaseSettings>();\n    if (ExportReleaseSettings->bEnableServerlessCounter) {\n        // Initialize the counter with server request and project information\n        FReleaseProxy::Get().InitCounter(ExportReleaseSettings->CounterServer, ExportReleaseSettings->ProjectID, ExportReleaseSettings->ProjectSecret);\n\n        // Modify the project name to include the commandlet name if applicable\n        FString ProjectName = ExportReleaseSettings->ProjectName;\n        if (ExportReleaseSettings->bProjectNameAsCommandletName) {\n            ProjectName += TEXT(\"_\") + CommandletName;\n        }\n\n        // Process the counter\n        FReleaseProxy::Get().ProcessCounter(ProjectName);\n    }\n}", "CodeBleu_score": 44.75406891162265}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t\tFString CommandletName = FCommandLine::Get();\n\n\tTArray<FString> Tokens;\n\tCommandletName.ParseIntoArray(Tokens, TEXT(\" \"));\n\n\tif (Tokens.Num() > 0) {\n\t\tCommandletName = Tokens[0];\n\t}\n\n\tFString ProjectName = FPaths::ProjectDir();\n\n\tif (CommandletName.Contains(\"-server\")) {\n\t\tFString ServerAddress = FCommandLine::Get();\n\n\t\tif (ServerAddress.Contains(\"-server=\")) {\n\t\t\tServerAddress.ReplaceInline(TEXT(\"-server=\"), TEXT(\"\"));\n\t\t}\n\n\t\tif (ServerAddress.Contains(\"-project=\")) {\n\t\t\tServerAddress.ReplaceInline(TEXT(\"-project=\"), TEXT(\"\"));\n\t\t}\n\n\t\tFString ProjectID = FCommandLine::Get();\n\n\t\tif (ProjectID.Contains(\"-project=\")) {\n\t\t\tProjectID.ReplaceInline(TEXT(\"-project=\"), TEXT(\"\"));\n\t\t}\n\n\t\tFString FinalProjectName = ProjectName;\n\n\t\tif (ProjectID.IsEmpty()) {\n\t\t\tProjectID = FPaths::ProjectDir();\n\t\t}\n\n\t\tif (CommandletName.Contains(\"Cook\")) {\n\t\t\tFinalProjectName += \"Cook\";\n\t\t}\n\t\telse if (CommandletName.Contains(\"Package\")) {\n\t\t\tFinalProjectName += \"Package\";\n\t\t}\n\t\telse if (CommandletName.Contains(\"Shader\")) {\n\t\t\tFinalProjectName += \"Shader\";\n\t\t}\n\n\t\tFHotPatcherCommandletHelper::CreateCounter(ServerAddress, ProjectID, FinalProjectName);\n\t}\n}", "CodeBleu_score": 42.198736669549}]}
{"instance_id": "c467af995f29", "generation_result": [{"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\tFString PlatformName = TargetPlatform->PlatformName();\n\treturn PlatformName.StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase) ||\n\t\tPlatformName.StartsWith(TEXT(\"MAC\"), ESearchCase::IgnoreCase) ||\n\t\tPlatformName.StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 36.49587190672232}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\tFString PlatformName = TargetPlatform->PlatformName();\n\tPlatformName.ToLowerInline();\n\treturn PlatformName.StartsWith(TEXT(\"IOS\")) || PlatformName.StartsWith(TEXT(\"Mac\")) ||\n\t\tPlatformName.StartsWith(TEXT(\"TVOS\"));\n}", "CodeBleu_score": 30.87774213447041}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\tFString PlatformName = TargetPlatform->PlatformName();\n\treturn PlatformName.StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase) ||\n\t\tPlatformName.StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase) ||\n\t\tPlatformName.StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 36.738306965785085}]}
{"instance_id": "3df342b1c6f8", "generation_result": [{"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t\tcheck(Object);\n\tcheck(Object->IsInOuter(Object->GetPackage()));\n\tUPackage* Package = Object->GetPackage();\n\tif (!Package)\n\t\treturn;\n\t\n\tbool bShouldFreeze = false;\n\t\n\tif (CookerAssetsSet.Contains(Package))\n\t\treturn;\n\t\n\tif (AllAssetsSet.Contains(Package))\n\t{\n\t\tbShouldFreeze = !Object->ShouldDelayPostLoadSubobjects();\n\t}\n\t\n\tif (bShouldFreeze)\n\t{\n\t\tTArray<UObject*>& Objects = PackageObjectsMap.FindOrAdd(Package);\n\t\tObjects.Add((UObject*)Object);\n\t\tFreezeObjects.Add((UObject*)Object);\n\t\tObject->ClearFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects);\n\t}\n}", "CodeBleu_score": 42.400418257829855}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t\tUObject* Obj = (UObject*)Object;\n\tif (Obj->GetOutermost()) {\n\t\tUObject* Package = Obj->GetOutermost();\n\t\tif (Package->IsAsset()) {\n\t\t\tFName PackageName = Package->GetFName();\n\t\t\tif (CookerAssetsSet.Contains(PackageName)) {\n\t\t\t\tPackageObjectsMap.Add(PackageName, Obj);\n\t\t\t\tif (!Obj->ShouldDelayPostLoadSubobjects()) {\n\t\t\t\t\tFreezeObjects.Add(Obj);\n\t\t\t\t}\n\t\t\t\tObj->ClearFlags(RF_NeedPostLoad);\n\t\t\t\tObj->ClearFlags(RF_NeedPostLoadSubobjects);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 48.74087341679254}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t\tif (!Object) {\n\t\treturn;\n\t}\n\n\tUObject* Obj = const_cast<UObject*>(Object);\n\tUPackage* Package = Obj->GetOutermost();\n\n\tif (!Package) {\n\t\treturn;\n\t}\n\n\tif (PackageObjectsMap.Contains(Package)) {\n\t\treturn;\n\t}\n\n\tbool bShouldFreeze = false;\n\n\tif (AllAssetsSet.Contains(Package)) {\n\t\tif (Package->GetCookedAssetData()->bNeverLoaded) {\n\t\t\tbShouldFreeze = true;\n\t\t}\n\t}\n\n\tif (bShouldFreeze) {\n\t\tPackageObjectsMap.Add(Package, {});\n\t\tFreezeObjects.Add(Obj);\n\n\t\tObj->ClearFlags(RF_NeedPostLoad);\n\t\tObj->ClearFlags(RF_NeedPostLoadSubobjects);\n\t}\n}", "CodeBleu_score": 46.05111200851623}]}
{"instance_id": "fac8b2878c3c", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\tFBulkDataExportRecord* BulkDataRecord = CastFieldChecked<FBulkDataExportRecord>(Record.GetRecord());\n\tFBulkDataExportContext* BulkDataContext = CastFieldChecked<FBulkDataExportContext>(Context.GetContext());\n\n\tif (BulkDataRecord->Data)\n\t{\n\t\tFString Filename = BulkDataRecord->Filename;\n\t\tFString Path = FPaths::GetPath(Filename);\n\t\tFString Name = FPaths::GetBaseFilename(Filename);\n\t\tFString Extension = FPaths::GetExtension(Filename);\n\n\t\tFString NewName = Name;\n\t\tFString NewExtension = Extension;\n\n\t\tFString NewFilename = FPaths::Combine(Path, NewName + NewExtension);\n\n\t\tFOutputFile* OutputFile = &Context.GetOutputFiles().Add_GetRef(FOutputFile(NewFilename));\n\t\tOutputFile->SetBulkData(BulkDataRecord->Data);\n\t\tOutputFile->SetBulkDataOffsetInFile(BulkDataRecord->Offset);\n\t\tOutputFile->SetBulkDataSizeOnDisk(BulkDataRecord->SizeOnDisk);\n\t\tOutputFile->SetBulkDataFlags(BulkDataRecord->Flags);\n\t\tOutputFile->SetBulkDataHash(BulkDataRecord->Hash);\n\t\tOutputFile->SetBulkDataHashContext(BulkDataRecord->HashContext);\n\t\tOutputFile->SetBulkDataHashType(BulkDataRecord->HashType);\n\t\tOutputFile->SetBulkDataHashString(BulkDataRecord->HashString);\n\t\tOutputFile->SetBulkDataHashStringSize(BulkDataRecord->HashStringSize);\n\t\tOutputFile->SetBulkDataHashStringSizeOnDisk(BulkDataRecord->HashStringSizeOnDisk);\n\t\tOutputFile->SetBulkDataHashStringHash(BulkDataRecord->HashStringHash);\n\t\tOutputFile->SetBulkDataHashStringHashContext(BulkDataRecord->HashStringHashContext);\n\t\t", "CodeBleu_score": 39.288693457143545}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\tFBulkData& BulkData = Record.GetBulkData();\n\tFBulkDataExport& BulkDataExport = Record.GetBulkDataExport();\n\n\tFString Filename = BulkDataExport.Filename;\n\tFString ExportName = BulkDataExport.ExportName;\n\n\tFExportBulkData& ExportBulkData = BulkDataExport.ExportBulkData;\n\n\tFExportBundleBase* ExportBundle = Context.GetExportBundle(ExportName);\n\n\tif (ExportBundle == nullptr)\n\t{\n\t\tExportBundle = new FExportBundleBase();\n\t\tContext.AddExportBundle(ExportName, ExportBundle);\n\t}\n\n\tFExportBundleEntry& ExportBundleEntry = ExportBundle->ExportBundleEntries.Add_GetRef(FExportBundleEntry());\n\tExportBundleEntry.SerialOffset = BulkDataExport.SerialOffset;\n\tExportBundleEntry.SerialSize = BulkDataExport.SerialSize;\n\tExportBundleEntry.bIsBulkDataInSeparateFile = BulkDataExport.bIsBulkDataInSeparateFile;\n\tExportBundleEntry.bIsMemoryMappedBulkData = BulkDataExport.bIsMemoryMappedBulkData;\n\tExportBundleEntry.bForceLoadPackage = BulkDataExport.bForceLoadPackage;\n\tExportBundleEntry.bHasLoadFailed = BulkDataExport.bHasLoadFailed;\n\tExportBundleEntry.bHasSerializedCompressed = BulkDataExport.bHasSerializedCompressed;\n\tExportBundleEntry.bHasSerializedCompressedChunks = BulkDataExport.bHasSerializedCompressedChunks;\n\tExportBundleEntry.bHasSerializedCompressedChunkIndex = BulkDataExport.bHasSerializedCompressedChunkIndex;\n\tExportBundleEntry.bHasSerializedCompressedChunkOffsets = BulkDataExport.bHasSerializedCompressedChunkOffsets;\n\tExportBundleEntry.bHasSerializedCompressedChunkLengths = BulkDataExport.bHasSerializedCompressedChunkLengths;\n\tExportBundleEntry.bHasSerializedCompressedChunkSha1s = BulkDataExport.bHasSerializedCompressedChunkSha1", "CodeBleu_score": 37.72649360629414}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\tFBulkData& BulkData = Record.GetBulkData();\n\tFBulkDataBuffer& BulkDataBuffer = BulkData.GetBulkDataBuffer();\n\tFPackageFileSummary& PackageFileSummary = Context.GetPackageFileSummary();\n\tFPackageFileSummary::EBulkDataFlags BulkDataFlags = BulkData.GetBulkDataFlags();\n\tFBulkDataBuffer::EBulkDataType BulkDataType = BulkDataBuffer.GetBulkDataType();\n\n\tif (BulkDataType == FBulkDataBuffer::BULKDATA_Export)\n\t{\n\t\tFName ExportName = BulkData.GetExportName();\n\t\tFExportBuffer& ExportBuffer = PackageFileSummary.GetExportBuffer(ExportName);\n\t\tExportBuffer.Data.Append(BulkDataBuffer.GetBulkData());\n\t\tExportBuffer.Regions.Append(BulkDataBuffer.GetBulkDataRegions());\n\t}\n\telse\n\t{\n\t\tFOutputFileEntry& OutputFileEntry = Context.GetOutputFileEntry(BulkData.GetFilename());\n\t\tOutputFileEntry.Buffer.Append(BulkDataBuffer.GetBulkData());\n\t\tOutputFileEntry.Regions.Append(BulkDataBuffer.GetBulkDataRegions());\n\t\tOutputFileEntry.bIsSidecar = (BulkDataFlags & FPackageFileSummary::BULKDATA_InsidePayload) == 0;\n\t\tOutputFileEntry.bShouldHash = (BulkDataFlags & FPackageFileSummary::BULKDATA_ShouldHash) != 0;\n\t}\n}", "CodeBleu_score": 34.940472939473146}]}
{"instance_id": "bf46051105c9", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t\tFExportContext& ExportContext = Context.GetExportContext();\n\tFExportMappings* ExportMappings = ExportContext.GetExportMappings();\n\tFExportMappings::FExportInfo* ExportInfo = ExportMappings->GetExportInfo(Record.Key);\n\tif (ExportInfo == nullptr)\n\t{\n\t\treturn;\n\t}\n\n\tFBufferArchive* ExportBuffer = ExportInfo->GetExportBuffer();\n\tif (ExportBuffer == nullptr)\n\t{\n\t\treturn;\n\t}\n\n\tif (ExportBuffer->Tell() == 0)\n\t{\n\t\treturn;\n\t}\n\n\tif (ExportBuffer->Tell() == ExportBuffer->TotalSize())\n\t{\n\t\treturn;\n\t}\n\n\tFBufferArchive FooterBuffer;\n\tFooterBuffer.Serialize(const_cast<TCHAR*>(TEXT(\"UEXP\")), 4);\n\tExportBuffer->Serialize(FooterBuffer.GetData(), FooterBuffer.Num());\n}", "CodeBleu_score": 36.49974954626137}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t\tif (Context.GetDiffFlag() == EDiffFlag::NONE)\n\t\treturn;\n\n\tTArray<FExportContext>& Exports = Context.GetExportContexts();\n\tfor (int i = 0; i < Exports.Num(); ++i)\n\t{\n\t\tFExportContext& ExportContext = Exports[i];\n\t\tif (!ExportContext.bIsFooterAdded)\n\t\t{\n\t\t\tFBufferWriter& ExportBuffer = ExportContext.ExportBuffer;\n\t\t\tFBufferWriter& ExportDiffBuffer = ExportContext.ExportDiffBuffer;\n\t\t\tFBufferWriter& ExportTagBuffer = ExportContext.ExportTagBuffer;\n\t\t\tFBufferWriter& ExportFooterBuffer = ExportContext.ExportFooterBuffer;\n\n\t\t\tFBufferWriter& ExportFooterBufferFooter = ExportContext.ExportFooterBufferFooter;\n\t\t\tFBufferWriter& ExportTagBufferFooter = ExportContext.ExportTagBufferFooter;\n\t\t\tFBufferWriter& ExportDiffBufferFooter = ExportContext.ExportDiffBufferFooter;\n\t\t\tFBufferWriter& ExportBufferFooter = ExportContext.ExportBufferFooter;\n\n\t\t\tFPackageFileTag* ExportFooterTag = new FPackageFileTag();\n\t\t\tExportFooterTag->Tag = PACKAGE_FILE_TAG;\n\t\t\tExportFooterTag->Ver = PACKAGE_FILE_TAG_SERIALIZATION_OPTIONS;\n\t\t\tExportFooterTag->Len = ExportFooterBuffer.TotalSize();\n\t\t\tExportFooterTag->Index = 0;\n\t\t\tExportFooterBuffer.Serialize(ExportFooterTag, ExportFooterBuffer.TotalSize());\n\n\t\t\tExportFooterBufferFooter.Serialize(ExportFooterTag, sizeof(FPackageFileTag));\n\t\t\tdelete ExportFooterTag;\n\n\t\t\tExportTagBufferFooter.Serialize(ExportFooterBufferFooter.GetBuffer(), ExportFooterBufferFooter.TotalSize());\n\t\t\tExportDiffBufferFooter.Serialize(ExportTagBufferFooter.GetBuffer(), ExportTagBufferFooter.TotalSize());\n\t\t\tExportBufferFooter.Serialize(ExportDiffBufferFooter", "CodeBleu_score": 39.03621901806806}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t\tFExportContext* ExportContext = Context.GetExportContext();\n\tFExportContext::FExportInfo* ExportInfo = ExportContext->GetExportInfo(Record.Key);\n\tif (!ExportInfo || !ExportInfo->IsExported)\n\t{\n\t\treturn;\n\t}\n\n\tTArray<FExportRecord>& ExportRecords = ExportContext->GetExportRecords(Record.Key);\n\t\n\tif (ExportRecords.Num() == 0)\n\t{\n\t\treturn;\n\t}\n\t\n\tFExportRecord& LastExportRecord = ExportRecords.Last();\n\tif (LastExportRecord.ExportType == EExportRecordType::Footer)\n\t{\n\t\treturn;\n\t}\n\t\n\tFExportRecord FooterRecord;\n\tFooterRecord.ExportType = EExportRecordType::Footer;\n\tFooterRecord.ExportData = FPackageWriterHelper::GetPackageFileTag();\n\tExportRecords.Add(FooterRecord);\n}", "CodeBleu_score": 41.89488278703735}]}
{"instance_id": "c0966eddf1ee", "generation_result": [{"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\n\tUGDCharacterMovementComponent* CharacterMovement = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\tif (CharacterMovement) {\n\t\tCharacterMovement->SavedRequestToStartSprinting = SavedRequestToStartSprinting;\n\t\tCharacterMovement->SavedRequestToStartADS = SavedRequestToStartADS;\n\t}\n}", "CodeBleu_score": 82.63791173666584}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\n\tUGDCharacterMovementComponent* CharacterMovement = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\tif (CharacterMovement) {\n\t\tbSavedSprinting = CharacterMovement->bWantsToSprint;\n\t\tbSavedADS = CharacterMovement->bWantsToAimDownSights;\n\t}\n}", "CodeBleu_score": 84.7710391356104}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\n\tif (UGDCharacterMovementComponent* CharacterMovement = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement())) {\n\t\tbSprinting = CharacterMovement->bWantsToSprint;\n\t\tbADS = CharacterMovement->bWantsToAimDownSights;\n\t}\n}", "CodeBleu_score": 67.37502171558238}]}
{"instance_id": "f73106356e9d", "generation_result": [{"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t    return NULL;\n}", "CodeBleu_score": 5.671458607142626}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t    return NULL;\n}", "CodeBleu_score": 5.671458607142626}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t    return NULL;\n}", "CodeBleu_score": 5.671458607142626}]}
{"instance_id": "a581424c2b31", "generation_result": [{"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tSuper::EndTask();\n\n\tif (IsValid(ASC)) {\n\t\tASC->OnGameplayEffectAddedDelegateToSelf.RemoveAll(this);\n\t\tASC->OnGameplayTagCountChangedDelegate(CooldownTag, EGameplayTagEventType::NewOrRemoved).RemoveAll(this);\n\t}\n\n\tSetReadyToDestroy();\n\tMarkAsGarbage();\n}", "CodeBleu_score": 48.491223583953}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tSuper::EndTask();\n\n\tif (IsValid(ASC)) {\n\t\tASC->OnGameplayEffectAddedDelegateToSelf.RemoveAll(this);\n\t\tASC->OnGameplayTagEventToSelf.RemoveAll(this);\n\t}\n\n\tSetReadyToDestroy();\n\tMarkAsGarbage();\n}", "CodeBleu_score": 40.807118018031936}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (IsValid(ASC)) {\n\t\tASC->OnGameplayEffectAddedDelegateToSelf.RemoveAll(this);\n\t\tASC->OnGameplayTagCountChangedDelegate.RemoveAll(this);\n\t}\n\n\tSetReadyToDestroy();\n\tMarkAsGarbage();\n}", "CodeBleu_score": 35.3312854165006}]}
{"instance_id": "5029df3a2033", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n\tif (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\tOnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, -1, EffectRemoved.Spec.StackCount);\n\t}\n}", "CodeBleu_score": 86.00622847447214}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\n\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n\tif (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\tOnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, -1, EffectRemoved.Spec.StackCount);\n\t}\n}", "CodeBleu_score": 86.06194798696953}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n\tif (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\tOnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, -1, EffectRemoved.Spec.StackCount);\n\t}\n}", "CodeBleu_score": 86.00622847447214}]}
{"instance_id": "cb1d2823d203", "generation_result": [{"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t    return NULL;\n}", "CodeBleu_score": 5.431334758320042}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t    return NULL;\n}", "CodeBleu_score": 5.431334758320042}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t\tif (!AbilitySystemComponent || !InEffectGameplayTag.IsValid()) {\n\t\treturn nullptr;\n\t}\n\n\tUAsyncTaskEffectStackChanged * ListenForGameplayEffectStackChange = NewObject<UAsyncTaskEffectStackChanged>();\n\tListenForGameplayEffectStackChange->ASC = AbilitySystemComponent;\n\tListenForGameplayEffectStackChange->EffectGameplayTag = InEffectGameplayTag;\n\n\tif (!IsValid(ListenForGameplayEffectStackChange->ASC) || !ListenForGameplayEffectStackChange->EffectGameplayTag.IsValid()) {\n\t\tListenForGameplayEffectStackChange->EndTask();\n\t\treturn nullptr;\n\t}\n\n\tAbilitySystemComponent->OnActiveGameplayEffectAddedDelegateToSelf.AddUObject(ListenForGameplayEffectStackChange, &UAsyncTaskEffectStackChanged::OnActiveGameplayEffectAddedCallback);\n\tAbilitySystemComponent->OnAnyGameplayEffectRemovedDelegate().AddUObject(ListenForGameplayEffectStackChange, &UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback);\n\n\treturn ListenForGameplayEffectStackChange;\n}", "CodeBleu_score": 86.55691533932503}]}
{"instance_id": "6659c2592e93", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n\tif (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag))\n\t{\n\t\tASC->OnGameplayEffectStackChangeDelegate(EffectGameplayTag, EffectRemoved.Handle, -1, EffectRemoved.Spec.StackCount);\n\t}\n}", "CodeBleu_score": 82.43105623688656}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n\tif (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\tOnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, -1, EffectRemoved.Spec.StackCount);\n\t}\n}", "CodeBleu_score": 86.00622847447214}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\n\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n\tif (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\tOnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, -1, EffectRemoved.Spec.StackCount);\n\t}\n}", "CodeBleu_score": 86.06194798696953}]}
{"instance_id": "a8f7dcc3f1fa", "generation_result": [{"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\n\tif (ActivateAbilityOnGranted)\n\t{\n\t\tActorInfo->AbilitySystemComponent->TryActivateAbility(Spec.Handle, false);\n\t}\n}", "CodeBleu_score": 97.5690140104299}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\n\tif (ActivateAbilityOnGranted) {\n\t\tActorInfo->AbilitySystemComponent->TryActivateAbility(Spec.Handle, false);\n\t}\n}", "CodeBleu_score": 97.5264912343054}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t    Super::OnAvatarSet(ActorInfo, Spec);\n\n    if (ActivateAbilityOnGranted) {\n        ActorInfo->AbilitySystemComponent->TryActivateAbility(Spec.Handle, false);\n    }\n}", "CodeBleu_score": 97.17139011896457}]}
{"instance_id": "72a7ce4b848c", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\tif (!bInterrupted) {\n\t\tif (ShouldBroadcastAbilityTaskDelegates()) {\n\t\t\tOnCompleted.Broadcast(FGameplayTag(), FGameplayEventData());\n\t\t}\n\t}\n\n\tEndTask();\n}", "CodeBleu_score": 95.80947584184304}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t    if (!bInterrupted) {\n        if (ShouldBroadcastAbilityTaskDelegates()) {\n            OnCompleted.Broadcast(FGameplayTag(), FGameplayEventData());\n        }\n    }\n\n    EndTask();\n}", "CodeBleu_score": 95.23936212453167}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\tGD_LOG(\n\t\tUE_LOG, Log, TEXT(\"%s - OnMontageEnded, Montage: %s, bInterrupted: %d\"),\n\t\t*FString(__FUNCTION__),\n\t\t*GetNameSafe(Montage),\n\t\tbInterrupted\n\t);\n\n\tif (!bInterrupted) {\n\t\tif (ShouldBroadcastAbilityTaskDelegates()) {\n\t\t\tOnCompleted.Broadcast(FGameplayTag(), FGameplayEventData());\n\t\t}\n\t}\n\n\tEndTask();\n}", "CodeBleu_score": 81.60961064844963}]}
{"instance_id": "cc1cdd579bd4", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tUGDAbilitySystemComponent* GDASC = GetTargetASC();\n\n\tif (GDASC) {\n\t\tGDASC->RemoveGameplayEventTagContainerDelegate(EventTags, EventHandle);\n\t}\n\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 41.432423332758646}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\t\n\tif (Ability) {\n\t\tAbility->OnGameplayAbilityEnded.Remove(FDelegateHandle(DelegateHandle));\n\t}\n\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 34.557812154527554}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tSuper::OnDestroy(AbilityEnded);\n\n\tUGDAbilitySystemComponent* GDASC = Cast<UGDAbilitySystemComponent>(AbilitySystemComponent);\n\tif (GDASC) {\n\t\tGDASC->GetGameplayEventTagContainer().RemoveAll(EventTags);\n\t}\n}", "CodeBleu_score": 37.20223429827823}]}
{"instance_id": "5932070df16f", "generation_result": [{"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t    const FGameplayAbilityActorInfo* ActorInfo = Ability->GetCurrentActorInfo();\n    if (!ActorInfo) {\n        return false;\n    }\n\n    UAnimInstance* AnimInstance = ActorInfo->GetAnimInstance();\n    if (AnimInstance) {\n        FAnimMontageInstance* MontageInstance = AnimInstance->GetActiveInstanceForMontage(AbilitySystemComponent->GetCurrentMontage());\n        if (MontageInstance) {\n            FOnMontageBlendingOutStarted BlendingOutDelegate;\n            FOnMontageEnded MontageEndedDelegate;\n            MontageInstance->UnbindDelegates();\n            AbilitySystemComponent->CurrentMontageStop();\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 59.406425247397785}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t\tAActor* AbilityActorInfo = Ability->GetActorInfo().AvatarActor.Get();\n\n\tif (!AbilitySystemComponent.IsValid() || !AbilityActorInfo) {\n\t\treturn false;\n\t}\n\n\tif (AbilitySystemComponent->GetAnimatingAbility() != Ability\n\t\t|| AbilitySystemComponent->GetCurrentMontage() != MontageToPlay)\n\t{\n\t\treturn false;\n\t}\n\n\t// Unbind delegates so they get called no longer\n\tFAnimMontageInstance* MontageInstance = AbilitySystemComponent->GetActiveMontageInstance();\n\tif (MontageInstance) {\n\t\tMontageInstance->OnMontageBlendingOutStarted.Unbind();\n\t\tMontageInstance->OnMontageEnded.Unbind();\n\t}\n\n\t// Stop an montage that was already playing\n\tAbilitySystemComponent->CurrentMontageStop();\n\treturn true;\n}", "CodeBleu_score": 56.484802035261716}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t\tAActor* Actor = Ability->GetActorInfo().AvatarActor.Get();\n\tif (!Actor) {\n\t\treturn false;\n\t}\n\n\tUAnimInstance* AnimInstance = Actor->GetAnimInstance();\n\tif (AnimInstance && AbilitySystemComponent.IsValid() && AbilitySystemComponent->GetAnimatingAbility() == Ability\n\t\t&& AbilitySystemComponent->GetCurrentMontage() == MontageToPlay) {\n\t\tFAnimMontageInstance* MontageInstance = AnimInstance->GetActiveInstanceForMontage(MontageToPlay);\n\t\tif (MontageInstance) {\n\t\t\tMontageInstance->OnMontageBlendingOutStarted.Unbind();\n\t\t\tMontageInstance->OnMontageEnded.Unbind();\n\t\t}\n\n\t\tAbilitySystemComponent->CurrentMontageStop();\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 75.35125379740992}]}
{"instance_id": "7049be7f0c75", "generation_result": [{"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n\t// Check if AI pawn is in attack range of target actor\n\tUBlackboardComponent* BlackboardComp = OwnerComp.GetBlackboardComponent();\n\tif (ensure(BlackboardComp)) {\n\t\tAActor* TargetActor = Cast<AActor>(BlackboardComp->GetValueAsObject(\"TargetActor\"));\n\t\tif (TargetActor) {\n\t\t\tAAIController* MyController = OwnerComp.GetAIOwner();\n\t\t\tif (ensure(MyController)) {\n\t\t\t\tAPawn* AIPawn = MyController->GetPawn();\n\t\t\t\tif (ensure(AIPawn)) {\n\t\t\t\t\tfloat DistanceTo = FVector::Distance(TargetActor->GetActorLocation(), AIPawn->GetActorLocation());\n\n\t\t\t\t\tbool bWithinRange = DistanceTo < 2000.f;\n\n\t\t\t\t\tbool bHasLOS = false;\n\t\t\t\t\tif (bWithinRange) {\n\t\t\t\t\t\tbHasLOS = MyController->LineOfSightTo(TargetActor);\n\t\t\t\t\t}\n\n\t\t\t\t\tBlackboardComp->SetValueAsBool(AttackRangeKey.SelectedKeyName, (bWithinRange && bHasLOS));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 76.02178842704807}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n\t// Check if AI has a target\n\tUBlackboardComponent* BlackboardComp = OwnerComp.GetBlackboardComponent();\n\tif (ensure(BlackboardComp)) {\n\t\tAActor* TargetActor = Cast<AActor>(BlackboardComp->GetValueAsObject(\"TargetActor\"));\n\t\tif (TargetActor) {\n\t\t\tAAIController* MyController = OwnerComp.GetAIOwner();\n\t\t\tif (ensure(MyController)) {\n\t\t\t\tAPawn* AIPawn = MyController->GetPawn();\n\t\t\t\tif (ensure(AIPawn)) {\n\t\t\t\t\tfloat DistanceTo = FVector::Distance(TargetActor->GetActorLocation(), AIPawn->GetActorLocation());\n\n\t\t\t\t\tbool bWithinRange = DistanceTo < 2000.f;\n\n\t\t\t\t\tbool bHasLOS = false;\n\t\t\t\t\tif (bWithinRange) {\n\t\t\t\t\t\tbHasLOS = MyController->LineOfSightTo(TargetActor);\n\t\t\t\t\t}\n\n\t\t\t\t\tBlackboardComp->SetValueAsBool(AttackRangeKey.SelectedKeyName, (bWithinRange && bHasLOS));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 76.02178842704807}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n\t// Check if AI has a target\n\tAAIController* AIController = OwnerComp.GetAIOwner();\n\tif (!ensure(AIController)) { return; }\n\n\tAPawn* AIPawn = AIController->GetPawn();\n\tif (!ensure(AIPawn)) { return; }\n\n\tAPawn* TargetActor = Cast<APawn>(OwnerComp.GetBlackboardComponent()->GetValueAsObject(\"TargetActor\"));\n\tif (!TargetActor) {\n\t\treturn;\n\t}\n\n\t// Check if target is within range\n\tfloat DistanceTo = FVector::Distance(TargetActor->GetActorLocation(), AIPawn->GetActorLocation());\n\tbool bWithinRange = DistanceTo < 2000.f;\n\n\t// Check if target is within line of sight\n\tbool bHasLOS = false;\n\tif (bWithinRange) {\n\t\tbHasLOS = AIController->LineOfSightTo(TargetActor);\n\t}\n\n\tFVector Direction = TargetActor->GetActorLocation() - AIPawn->GetActorLocation();\n\tDirection.Normalize();\n\n\tfloat DotProduct = FVector::DotProduct(Direction, AIPawn->GetActorForwardVector());\n\tbool bTargetInFront = DotProduct > 0.707f; // 0.707 is cos(45 degrees)\n\n\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(AttackRangeKey.SelectedKeyName, (bWithinRange && bHasLOS && bTargetInFront));\n}", "CodeBleu_score": 65.85143523186635}]}
{"instance_id": "031bd0ec3e3c", "generation_result": [{"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tAAIController* MyController = OwnerComp.GetAIOwner();\n\tif (ensure(MyController)) {\n\t\tAPawn* AIPawn = MyController->GetPawn();\n\t\tif (ensure(AIPawn)) {\n\t\t\tUSAttributeComponent* AttributeComp = USAttributeComponent::GetAttributes(AIPawn);\n\t\t\tif (ensure(AttributeComp)) {\n\t\t\t\tAttributeComp->ApplyHealthChange(AttributeComp->GetHealthMax());\n\t\t\t}\n\t\t}\n\t}\n\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 63.145058210441306}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tAPawn* MyPawn = Cast<APawn>(OwnerComp.GetAIOwner()->GetPawn());\n\tif (MyPawn == nullptr) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\n\tUSAttributeComponent* AttributeComp = USAttributeComponent::GetAttributes(MyPawn);\n\tif (ensure(AttributeComp)) {\n\t\tAttributeComp->ApplyHealthChange(AttributeComp->GetHealthMax());\n\t}\n\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 77.62333684423149}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tSuper::ExecuteTask(OwnerComp, NodeMemory);\n\n\tAPawn* MyPawn = Cast<APawn>(OwnerComp.GetAIOwner()->GetPawn());\n\tif (MyPawn == nullptr) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\n\tUSAttributeComponent* AttributeComp = USAttributeComponent::GetAttributes(MyPawn);\n\tif (ensure(AttributeComp)) {\n\t\tAttributeComp->ApplyHealthChange(AttributeComp->GetHealthMax());\n\t}\n\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 68.60896127767458}]}
{"instance_id": "6cd6e778e91b", "generation_result": [{"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\tUSTickablesSubsystem::RegisterTickable(this);\n}", "CodeBleu_score": 28.08603368546488}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\tUSTickablesSubsystem* TickablesSubsystem = GetWorld()->GetSubsystem<USTickablesSubsystem>();\n\tif (TickablesSubsystem) {\n\t\tTickablesSubsystem->RegisterTickable(this);\n\t}\n}", "CodeBleu_score": 63.74350737901756}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\tUSTickablesSubsystem* TickablesSubsystem = GetWorld()->GetSubsystem<USTickablesSubsystem>();\n\tif (TickablesSubsystem) {\n\t\tTickablesSubsystem->RegisterPrimaryTick(this);\n\t}\n}", "CodeBleu_score": 64.08114924398078}]}
{"instance_id": "e90ff27c7f16", "generation_result": [{"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t\tSuper::EndPlay(EndPlayReason);\n\n\tUSTickablesSubsystem* TickablesSubsystem = GetWorld()->GetSubsystem<USTickablesSubsystem>();\n\tif (TickablesSubsystem) {\n\t\tTickablesSubsystem->DeregisterTickable(this);\n\t}\n}", "CodeBleu_score": 64.7255010085032}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t\tSuper::EndPlay(EndPlayReason);\n\n\tUSTickablesSubsystem* TickablesSubsystem = GetWorld()->GetSubsystem<USTickablesSubsystem>();\n\tTickablesSubsystem->DeregisterTickable(this);\n}", "CodeBleu_score": 67.33667812572021}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t    Super::EndPlay(EndPlayReason);\n\n    if (UWorld* World = GetWorld()) {\n        if (USTickablesSubsystem* TickablesSubsystem = World->GetSubsystem<USTickablesSubsystem>()) {\n            TickablesSubsystem->DeregisterTickable(this);\n        }\n    }\n}", "CodeBleu_score": 55.904490976497826}]}
{"instance_id": "be3e542c07ea", "generation_result": [{"code": "void USSignificanceComponent::BeginPlay(){\n\t    Super::BeginPlay();\n\n    if (bManageSignificance) {\n        if (GetOwner()->Implements<USSignificanceInterface>()) {\n            if (bWaitOneFrame) {\n                FTimerHandle handle;\n                GetWorld()->GetTimerManager().SetTimer(handle, this, &USSignificanceComponent::RegisterComponent, 0.033f, false);\n            } else {\n                RegisterComponent();\n            }\n        } else {\n            UE_LOG(LogActionRoguelike, Warning, TEXT(\"SSignificanceComponent: Owner doesn't implement USSignificanceInterface, but bManageSignificance is set to true.\"));\n        }\n    }\n\n    // Manage particle significance\n    TArray<UParticleSystemComponent*> particleComponents;\n    GetOwner()->GetComponents(particleComponents);\n\n    for (UParticleSystemComponent* particleComponent : particleComponents) {\n        if (particleComponent->bOverrideSignificance) {\n            FSignificanceManager::Get()->RegisterParticleComponent(particleComponent);\n        }\n    }\n}", "CodeBleu_score": 58.449948834603106}, {"code": "void USSignificanceComponent::BeginPlay(){\n\t    Super::BeginPlay();\n\n    if (GetOwner()->GetWorld()->GetNetMode() != NM_Client) {\n        return;\n    }\n\n    if (bManageSignificance) {\n        if (!GetOwner()->Implements<USSignificanceInterface>()) {\n            UE_LOG(LogTemp, Error, TEXT(\"Actor %s does not implement the SSignificanceInterface.\"), *GetOwner()->GetName());\n        }\n\n        if (bWaitOneFrame) {\n            GetOwner()->GetWorld()->GetTimerManager().SetTimerForNextTick(this, &USSignificanceComponent::Register);\n        } else {\n            Register();\n        }\n    }\n\n    TArray<UParticleSystemComponent*> ParticleSystemComponents;\n    GetOwner()->GetComponents<UParticleSystemComponent>(ParticleSystemComponents);\n\n    for (UParticleSystemComponent* ParticleSystemComponent : ParticleSystemComponents) {\n        if (ParticleSystemComponent->Template && ParticleSystemComponent->Template->SignificanceLevel != ESigLevel::SigLevel_Off) {\n            ParticleSystemComponent->bManageSignificance = true;\n        }\n    }\n}", "CodeBleu_score": 56.30789513826458}, {"code": "void USSignificanceComponent::BeginPlay(){\n\t    Super::BeginPlay();\n\n    if (bManageSignificance) {\n        if (GetOwner()->Implements<USSignificanceInterface>()) {\n            if (bWaitOneFrame) {\n                FTimerHandle handle;\n                GetWorld()->GetTimerManager().SetTimer(handle, this, &USSignificanceComponent::RegisterComponent, 0.001f, false);\n            } else {\n                RegisterComponent();\n            }\n        }\n    }\n\n    TArray<UParticleSystemComponent*> particleComponents;\n    GetOwner()->GetComponents<UParticleSystemComponent>(particleComponents);\n\n    for (UParticleSystemComponent* particleComponent : particleComponents) {\n        if (particleComponent->Template != nullptr) {\n            if (particleComponent->Template->SignificanceType != ESignificanceLevel::SIGNIFICANCE_TYPE_SIGNIFICANT) {\n                particleComponent->SetSignificanceRange(5000.0f);\n            }\n        }\n    }\n}", "CodeBleu_score": 60.47782624751895}]}
{"instance_id": "77824b6415d0", "generation_result": [{"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\tif (USSignificanceManager* Manager = USSignificanceManager::Get(GetWorld())) {\n\t\tauto CalculateSignificanceFunc = [this]() {\n\t\t\treturn CalculateSignificance();\n\t\t};\n\n\t\tauto PostSignificanceUpdateFunc = [this](const FVector& Location, float Significance) {\n\t\t\tOnPostSignificanceUpdate(Location, Significance);\n\t\t};\n\n\t\tManager->RegisterComponent(GetOwner()->GetClass()->GetName(), this, CalculateSignificanceFunc, PostSignificanceUpdateFunc);\n\t}\n}", "CodeBleu_score": 34.74807366382194}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\t    if (USSignificanceManager* SignificanceManager = USSignificanceManager::Get(GetWorld())) {\n        SignificanceManager->RegisterComponent(this, GetOwner()->GetClass()->GetName(), [this]() {\n            return CalculateSignificance();\n        }, [this](bool bSignificant) {\n            OnPostSignificanceUpdate(bSignificant);\n        });\n    }\n}", "CodeBleu_score": 21.588767346723227}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\n\tUSSignificanceManager* SignificanceManager = USSignificanceManager::Get(GetWorld());\n\n\tif (SignificanceManager) {\n\n\t\tauto CalculateSignificance = [this]() -> float {\n\t\t\treturn CalculateSignificanceForComponent();\n\t\t};\n\n\t\tauto HandlePostSignificanceUpdate = [this](bool bSignificant) {\n\t\t\tHandlePostSignificanceUpdateForComponent(bSignificant);\n\t\t};\n\n\t\tSignificanceManager->RegisterComponent(this, GetOwner()->GetClass()->GetName(), CalculateSignificance, HandlePostSignificanceUpdate);\n\t}\n}", "CodeBleu_score": 33.22677924050457}]}
{"instance_id": "dca342410d64", "generation_result": [{"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tif (const auto PoolingInterface = Cast<ISActorPoolingInterface>(Actor)) {\n\t\tif (PoolingInterface->IsPoolingEnabled()) {\n\t\t\tconst auto PoolingSubsystem = Actor->GetWorld()->GetSubsystem<USActorPoolingSubsystem>();\n\t\t\tif (PoolingSubsystem) {\n\t\t\t\tPoolingSubsystem->Internal_ReleaseToPool(Actor);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\tActor->Destroy();\n\treturn false;\n}", "CodeBleu_score": 62.89667880714567}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tif (Actor == nullptr) {\n\t\treturn false;\n\t}\n\n\tif (const auto PoolingActor = Cast<ISActorPoolingInterface>(Actor)) {\n\t\tif (PoolingActor->IsPoolingEnabled()) {\n\t\t\tif (const auto World = Actor->GetWorld()) {\n\t\t\t\tif (const auto PoolingSubsystem = World->GetSubsystem<USActorPoolingSubsystem>()) {\n\t\t\t\t\tPoolingSubsystem->Internal_ReleaseToPool(Actor);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tActor->Destroy();\n\treturn false;\n}", "CodeBleu_score": 58.09221773747838}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tif (Actor == nullptr) {\n\t\tUE_LOG(LogActionRoguelike, Warning, TEXT(\"Tried to release null actor to pool.\"));\n\t\treturn false;\n\t}\n\n\tif (const auto PoolingInterface = Cast<ISActorPoolingInterface>(Actor)) {\n\t\tif (PoolingInterface->IsPoolingEnabled()) {\n\t\t\tif (const auto World = Actor->GetWorld()) {\n\t\t\t\tif (const auto PoolingSubsystem = World->GetSubsystem<USActorPoolingSubsystem>()) {\n\t\t\t\t\treturn PoolingSubsystem->ReleaseToPoolInternal(Actor);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tActor->Destroy();\n\treturn false;\n}", "CodeBleu_score": 57.04770321120749}]}
{"instance_id": "5c285130f782", "generation_result": [{"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\t\n\tQUICK_SCOPE_CYCLE_COUNTER(USActorPoolingSubsystem_PrimeActorPool);\n\t\n\tUE_LOG(LogActionRoguelike, Log, TEXT(\"[%s] PrimeActorPool(%s, %d)\"), *GetName(), *ActorClass->GetName(), Amount);\n\n\t\n\tFScopedEvent PoolingEvent(FColor::Purple);\n\t\n\tfor (int32 i = 0; i < Amount; i++) {\n\t\tAActor* Actor = GetWorld()->SpawnActor(ActorClass, &FTransform::Identity);\n\t\tISActorPoolingInterface::Execute_ReleaseActorToPool(Actor);\n\t}\n}", "CodeBleu_score": 49.28356914844162}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tUE_LOG(LogActionRoguelike, Log, TEXT(\"Starting actor pooling for %s\"), *ActorClass->GetName());\n\t\n\tFScopedDurationTimer LogTimer(FStructuredLog::NewLog(FLogCategoryName(TEXT(\"ActorPooling\")))\n\t\t.SetBaseFields(FStructuredLog::Fields().Set(TEXT(\"ClassName\"), ActorClass->GetName())));\n\t\n\tUWorld* World = GetWorld();\n\tif (!World) {\n\t\tUE_LOG(LogActionRoguelike, Error, TEXT(\"World is not valid\"));\n\t\treturn;\n\t}\n\n\tFActorSpawnParameters SpawnParams;\n\tSpawnParams.SpawnCollisionHandlingOverride = ESpawnActorCollisionHandlingMethod::AlwaysSpawn;\n\t\n\tfor (int32 i = 0; i < Amount; i++) {\n\t\tAActor* Actor = World->SpawnActor<AActor>(ActorClass, FVector::ZeroVector, FRotator::ZeroRotator, SpawnParams);\n\t\tif (!Actor) {\n\t\t\tUE_LOG(LogActionRoguelike, Error, TEXT(\"Failed to spawn actor for pooling\"));\n\t\t\tcontinue;\n\t\t}\n\t\tActor->SetActorHiddenInGame(true);\n\t\tActor->SetActorEnableCollision(false);\n\t\tActor->SetActorTickEnabled(false);\n\t\tActor->GetRootComponent()->SetMobility(EComponentMobility::Movable);\n\t\tActor->GetRootComponent()->SetVisibility(false, true);\n\t\tActor->GetRootComponent()->SetSimulatePhysics(false);\n\t\tActor->GetRootComponent()->SetCollisionEnabled(ECollisionEnabled::NoCollision);\n\t\tActor->GetRootComponent()->SetCollisionResponseToAllChannels(ECR_Ignore);\n\t\tActor->GetRootComponent()->SetCollisionResponseToChannel(ECC_WorldStatic, ECR_Block);\n\t\tActor->GetRootComponent()->SetCollision", "CodeBleu_score": 47.945892227699794}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t    // Log the start of the pooling process\n    UE_LOG(LogActionRoguelike, Log, TEXT(\"PrimeActorPool: Starting pooling process for %s\"), *ActorClass->GetName());\n\n    // Create a scoped event for profiling\n    TRACE_CPUPROFILER_EVENT_SCOPE(PrimeActorPool);\n\n    // Spawn the specified number of actors and immediately release them to the pool\n    for (int32 i = 0; i < Amount; i++) {\n        AActor* Actor = GetWorld()->SpawnActor<AActor>(ActorClass);\n        ReleaseActorToPool(Actor);\n    }\n}", "CodeBleu_score": 49.23081693573527}]}
{"instance_id": "43c013653d6d", "generation_result": [{"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t\tFLoadingScreenAttributes LoadingScreen;\n\tLoadingScreen.bAutoCompleteWhenLoadingCompletes = true;\n\tLoadingScreen.bMoviesAreSkippable = true;\n\tLoadingScreen.bWaitForManualStop = false;\n\tLoadingScreen.bAllowInEarlyStartup = true;\n\tLoadingScreen.bAllowEngineTick = false;\n\tLoadingScreen.MinimumLoadingScreenDisplayTime = 3.f;\n\tLoadingScreen.WidgetLoadingScreen = FLoadingScreenAttributes::NewTestLoadingScreenWidget();\n\tGetMoviePlayer()->SetupLoadingScreen(LoadingScreen);\n}", "CodeBleu_score": 73.58081089858706}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t\tFLoadingScreenAttributes LoadingScreen;\n\tLoadingScreen.bAutoCompleteWhenLoadingCompletes = true;\n\tLoadingScreen.bMoviesAreSkippable = true;\n\tLoadingScreen.bWaitForManualStop = true;\n\tLoadingScreen.MoviePaths.Add(MapName);\n\tGetMoviePlayer()->SetupLoadingScreen(LoadingScreen);\n}", "CodeBleu_score": 52.82676086352739}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t    FLoadingScreenAttributes LoadingScreen;\n    LoadingScreen.bAutoCompleteWhenLoadingCompletes = true;\n    LoadingScreen.bMoviesAreSkippable = true;\n    LoadingScreen.bWaitForManualStop = false;\n    LoadingScreen.MoviePaths.Add(MapName);\n    LoadingScreen.WidgetLoadingScreen = FLoadingScreenAttributes::NewTestLoadingScreenWidget();\n    GetMoviePlayer()->SetupLoadingScreen(LoadingScreen);\n}", "CodeBleu_score": 67.50295660822566}]}
{"instance_id": "a6979eb925a5", "generation_result": [{"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tUE_LOG(LogTemp, Log, TEXT(\"Started: %s\"), *GetNameSafe(this));\n\n\t// Grants tags\n\tUSActionComponent* Comp = GetOwningComponent();\n\tComp->ActiveGameplayTags.AppendTags(GrantsTags);\n\n\t// Tell the server to update the replication data\n\tComp->OnRep_RepData();\n\n\tif (GetOwningComponent()->GetOwnerRole() == ROLE_Authority) {\n\t\tTimeStarted = GetWorld()->TimeSeconds;\n\t}\n\n\tGetOwningComponent()->GetOwner()->OnActionStarted.Broadcast(GetOwningComponent(), this);\n}", "CodeBleu_score": 59.553049952612135}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tUE_LOG(LogTemp, Log, TEXT(\"Started: %s\"), *GetNameSafe(this));\n\n\t// Grants tags\n\tUSActionComponent* Comp = GetOwningComponent();\n\tComp->ActiveGameplayTags.AppendTags(GrantsTags);\n\n\tRepData.bIsRunning = true;\n\tRepData.Instigator = Instigator;\n\n\tif (GetOwningComponent()->GetOwnerRole() == ROLE_Authority) {\n\t\tTimeStarted = GetWorld()->TimeSeconds;\n\t}\n\n\tGetOwningComponent()->OnActionStarted.Broadcast(GetOwningComponent(), this);\n}", "CodeBleu_score": 88.5469492853852}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tUE_LOG(LogTemp, Log, TEXT(\"Started: %s\"), *GetNameSafe(this));\n\n\t// Grants tags\n\tUSActionComponent* Comp = GetOwningComponent();\n\tComp->ActiveGameplayTags.AppendTags(GrantsTags);\n\n\tRepData.bIsRunning = true;\n\tRepData.Instigator = Instigator;\n\n\tif (GetOwningComponent()->GetOwnerRole() == ROLE_Authority) {\n\t\tTimeStarted = GetWorld()->TimeSeconds;\n\t}\n\n\tGetOwningComponent()->OnActionStarted.Broadcast(GetOwningComponent(), this);\n}", "CodeBleu_score": 88.5469492853852}]}
{"instance_id": "bdec7bf3e2d7", "generation_result": [{"code": "float USActionEffect::GetTimeRemaining() const{\n\t    // Check if the game state is available\n    AGameStateBase* GameState = GetWorld()->GetGameState();\n    if (ensure(GameState)) {\n        // Get the server's world time\n        float EndTime = TimeStarted + Duration;\n        // Calculate the remaining time\n        return EndTime - GameState->GetServerWorldTimeSeconds();\n    }\n    // If the game state is not available, return the full duration of the effect\n    return Duration;\n}", "CodeBleu_score": 73.85659688376141}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\t\tif (GetWorld()->GetGameState()) {\n\t\treturn Duration - GetWorld()->GetGameState()->GetServerWorldTimeSeconds() + StartTime;\n\t}\n\treturn Duration;\n}", "CodeBleu_score": 41.80079150967517}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\t\tif (GetWorld() && GetWorld()->GetGameState()) {\n\t\tfloat EndTime = TimeStarted + Duration;\n\t\treturn EndTime - GetWorld()->GetGameState()->GetServerWorldTimeSeconds();\n\t}\n\treturn Duration;\n}", "CodeBleu_score": 68.73997306707062}]}
{"instance_id": "db3a7508643b", "generation_result": [{"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t\tif (InFocus == nullptr) {\n\t\tGEngine->AddOnScreenDebugMessage(-1, 1.0f, FColor::Red, \"No Focus Actor to interact.\");\n\t\treturn;\n\t}\n\n\tAPawn* MyPawn = Cast<APawn>(GetOwner());\n\tISGameplayInterface::Execute_Interact(InFocus, MyPawn);\n}", "CodeBleu_score": 93.90676674574935}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t\tif (InFocus == nullptr) {\n\t\tGEngine->AddOnScreenDebugMessage(-1, 1.0f, FColor::Red, \"No Focus Actor to interact.\");\n\t\treturn;\n\t}\n\n\tAPawn* MyPawn = Cast<APawn>(GetOwner());\n\tISGameplayInterface::Execute_Interact(InFocus, MyPawn);\n}", "CodeBleu_score": 93.90676674574935}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t    if (InFocus == nullptr) {\n        GEngine->AddOnScreenDebugMessage(-1, 1.0f, FColor::Red, \"No Focus Actor to interact.\");\n        return;\n    }\n\n    APawn* MyPawn = Cast<APawn>(GetOwner());\n    ISGameplayInterface::Execute_Interact(InFocus, MyPawn);\n}", "CodeBleu_score": 94.01122774936123}]}
{"instance_id": "e6a5224079e6", "generation_result": [{"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\n\tif (!TargetActor) {\n\t\treturn false;\n\t}\n\n\tUSAttributeComponent* AttributeComponent = USAttributeComponent::GetAttributes(TargetActor);\n\tif (!AttributeComponent) {\n\t\treturn false;\n\t}\n\n\treturn AttributeComponent->ApplyHealthChange(DamageCauser, -DamageAmount);\n}", "CodeBleu_score": 65.82042490994391}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\tif (TargetActor == nullptr) {\n\t\treturn false;\n\t}\n\n\tUSAttributeComponent* AttributeComp = USAttributeComponent::GetAttributes(TargetActor);\n\tif (AttributeComp == nullptr) {\n\t\treturn false;\n\t}\n\n\treturn AttributeComp->ApplyHealthChange(DamageCauser, -DamageAmount);\n}", "CodeBleu_score": 75.65528349643144}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\tif (USAttributeComponent* AttributeComponent = USAttributeComponent::GetAttributes(TargetActor)) {\n\t\treturn AttributeComponent->ApplyHealthChange(DamageCauser, -DamageAmount);\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 69.38458362293827}]}
{"instance_id": "084a7501fc08", "generation_result": [{"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t    if (NewTime > PersonalRecordTime) {\n        float OldRecord = PersonalRecordTime;\n\n        PersonalRecordTime = NewTime;\n\n        OnRecordTimeChanged.Broadcast(this, PersonalRecordTime, OldRecord);\n\n        return true;\n    }\n\n    return false;\n}", "CodeBleu_score": 96.56106727637126}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\tif (NewTime > PersonalRecordTime) {\n\t\tfloat OldRecord = PersonalRecordTime;\n\n\t\tPersonalRecordTime = NewTime;\n\n\t\tOnRecordTimeChanged.Broadcast(this, PersonalRecordTime, OldRecord);\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 96.72567043131572}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\tif (NewTime > PersonalRecordTime) {\n\t\tfloat OldRecord = PersonalRecordTime;\n\n\t\tPersonalRecordTime = NewTime;\n\n\t\tOnRecordTimeUpdated.Broadcast(this, PersonalRecordTime, OldRecord);\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 92.92528663651319}]}
{"instance_id": "8e0ccc856566", "generation_result": [{"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tif (!ensure(InstigatorPawn)) {\n\t\treturn;\n\t}\n\n\tUSAttributeComponent* AttributeComp = USAttributeComponent::GetAttributes(InstigatorPawn);\n\tif (ensure(AttributeComp) && !AttributeComp->IsFullHealth()) {\n\t\tif (ASPlayerState* PS = InstigatorPawn->GetPlayerState<ASPlayerState>()) {\n\t\t\tif (PS->RemoveCredits(CreditCost) && AttributeComp->ApplyHealthChange(this, AttributeComp->GetHealthMax())) {\n\t\t\t\tHideAndCooldownPowerup();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 97.07502623706486}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tSuper::Interact_Implementation(InstigatorPawn);\n\n\tif (!ensure(InstigatorPawn)) {\n\t\treturn;\n\t}\n\n\tUSAttributeComponent* AttributeComp = USAttributeComponent::GetAttributes(InstigatorPawn);\n\tif (ensure(AttributeComp) && !AttributeComp->IsFullHealth()) {\n\t\tif (ASPlayerState* PS = InstigatorPawn->GetPlayerState<ASPlayerState>()) {\n\t\t\tif (PS->RemoveCredits(CreditCost) && AttributeComp->ApplyHealthChange(this, AttributeComp->GetHealthMax())) {\n\t\t\t\tHideAndCooldownPowerup();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 83.68460409249526}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tSuper::Interact_Implementation(InstigatorPawn);\n\n\tif (!ensure(InstigatorPawn)) {\n\t\treturn;\n\t}\n\n\tUSAttributeComponent* AttributeComp = USAttributeComponent::GetAttributes(InstigatorPawn);\n\tif (ensure(AttributeComp) && !AttributeComp->IsFullHealth()) {\n\t\tif (ASPlayerState* PS = InstigatorPawn->GetPlayerState<ASPlayerState>()) {\n\t\t\tif (PS->RemoveCredits(CreditCost) && AttributeComp->ApplyHealthChange(this, AttributeComp->GetHealthMax())) {\n\t\t\t\tHideAndCooldownPowerup();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 83.68460409249526}]}
{"instance_id": "39a680859a89", "generation_result": [{"code": "void ASProjectileBase::Explode_Implementation(){\n\t\n\tSpawnImpactEffect();\n\n\tPlayImpactSound();\n\n\tTriggerCameraShake();\n\n\tReleaseProjectile();\n}", "CodeBleu_score": 12.379612499931058}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t\tSpawnImpactVFX();\n\tPlayImpactSound();\n\tTriggerCameraShake();\n\n\tReleaseProjectile();\n}", "CodeBleu_score": 12.371590331038322}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t    if (IsValid(this->ImpactVFX)) {\n        UNiagaraFunctionLibrary::SpawnSystemAtLocation(this, this->ImpactVFX, GetActorLocation(), GetActorRotation());\n    }\n    if (IsValid(this->ImpactSound)) {\n        UGameplayStatics::PlaySoundAtLocation(this, this->ImpactSound, GetActorLocation());\n    }\n    if (this->bCameraShake) {\n        UGameplayStatics::PlayWorldCameraShake(this, this->CameraShake, GetActorLocation(), this->CameraShakeInnerRadius, this->CameraShakeOuterRadius);\n    }\n    ReleaseToPool();\n}", "CodeBleu_score": 47.57719370492501}]}
{"instance_id": "a95c41c6d7b5", "generation_result": [{"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t    if (PlayerState == nullptr) {\n        return nullptr;\n    }\n\n    if (PIE_Key == \"PIE\") {\n        if (SavedPlayers.IsValidIndex(0)) {\n            return &SavedPlayers[0];\n        }\n    }\n\n    return SavedPlayers.FindByPredicate([&](const FPlayerSaveData& Data) { return Data.PlayerID == PlayerState->GetUniqueId().ToString(); });\n}", "CodeBleu_score": 57.16736527734384}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t    if (PlayerState == nullptr) {\n        return nullptr;\n    }\n\n    // In PIE mode, always use the first entry\n    if (bIsPlayInEditor) {\n        if (SavedPlayers.IsValidIndex(0)) {\n            return &SavedPlayers[0];\n        }\n    }\n\n    // Try to find the player's data using their unique ID\n    for (auto& PlayerData : SavedPlayers) {\n        if (PlayerData.PlayerId == PlayerState->GetUniqueId().ToString()) {\n            return &PlayerData;\n        }\n    }\n\n    // If the player's data is not found, return null\n    return nullptr;\n}", "CodeBleu_score": 54.743743200080196}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tif (PlayerState == nullptr) {\n\t\treturn nullptr;\n\t}\n\n\tif (PlayerState->GetUniqueId().IsValid()) {\n\t\treturn PlayerData.Find(PlayerState->GetUniqueId().ToString());\n\t}\n\n\tUE_LOG(LogTemp, Warning, TEXT(\"SavingPlayer: PlayerId not valid. Saving as PIE.\"));\n\treturn GetPlayerData(PlayerData.begin()->Key);\n}", "CodeBleu_score": 39.95360046733624}]}
{"instance_id": "58a03c087c47", "generation_result": [{"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t\tASPlayerState* PlayerState = Cast<ASPlayerState>(NewPlayer->PlayerState);\n\tif (ensure(PlayerState)) {\n\t\tPlayerState->LoadPlayerState(CurrentSaveGame);\n\t}\n}", "CodeBleu_score": 59.047224371972526}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t    if (NewPlayer) {\n        ASPlayerState* PlayerState = Cast<ASPlayerState>(NewPlayer->PlayerState);\n        if (ensure(PlayerState)) {\n            USSaveGame* CurrentSaveGame = GetCurrentSaveGame();\n            if (CurrentSaveGame) {\n                if (PlayerState->GetPlayerId() == CurrentSaveGame->SavedPlayerState.PlayerId) {\n                    CurrentSaveGame->SavedPlayerState.PlayerTransform = PlayerState->GetTransform();\n                    CurrentSaveGame->SavedPlayerState.Credits = PlayerState->GetCredits();\n                    CurrentSaveGame->SavedPlayerState.PlayerAction = PlayerState->GetPlayerAction();\n                    CurrentSaveGame->SavedPlayerState.SelectedAttributeSet = PlayerState->GetSelectedAttributeSet();\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 43.54483515029594}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t    Super::HandleStartingNewPlayer(NewPlayer);\n\n    ASPlayerState* PlayerState = NewPlayer->GetPlayerState<ASPlayerState>();\n    if (ensure(PlayerState)) {\n        PlayerState->LoadPlayerState(CurrentSaveGame);\n    }\n}", "CodeBleu_score": 63.951930024313896}]}
{"instance_id": "c5bd4c059b71", "generation_result": [{"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t\tCurrentSaveGame = NewObject<USSaveGame>();\n\n\tAActor* Player = GetWorld()->GetFirstPlayerController()->GetPawn();\n\n\tCurrentSaveGame->SavedPlayerState.PlayerID = Player->GetUniqueID();\n\tCurrentSaveGame->SavedPlayerState.PlayerTransform = Player->GetActorTransform();\n\tCurrentSaveGame->SavedPlayerState.Credits = Cast<ASPlayerState>(Player->GetPlayerState())->GetCredits();\n\n\tCurrentSaveGame->SavedPlayerState.ItemsArray.Empty();\n\tfor (auto Item : Cast<ASPlayerState>(Player->GetPlayerState())->GetInventory()) {\n\t\tCurrentSaveGame->SavedPlayerState.ItemsArray.Add(Item->GetClass());\n\t}\n\n\tCurrentSaveGame->SavedPlayerState.SelectedPowerup = Cast<ASPlayerState>(Player->GetPlayerState())->GetSelectedPowerup();\n\n\tCurrentSaveGame->SavedPlayerState.SelectedPowerupIndex = Cast<ASPlayerState>(Player->GetPlayerState())->GetSelectedPowerupIndex();\n\n\tCurrentSaveGame->SavedPlayerState.SelectedPowerupDuration = Cast<ASPlayerState>(Player->GetPlayerState())->GetSelectedPowerupDuration();\n\n\tCurrentSaveGame->SavedPlayerState.SelectedPowerupDurationRemaining = Cast<ASPlayerState>(Player->GetPlayerState())->GetSelectedPowerupDurationRemaining();\n\n\tCurrentSaveGame->SavedPlayerState.SelectedPowerupDurationRemaining = Cast<ASPlayerState>(Player->GetPlayerState())->GetSelectedPowerupDurationRemaining();\n\n\tCurrentSaveGame->SavedPlayerState.SelectedPowerupDurationRemaining = Cast<ASPlayerState>(Player->GetPlayerState())->GetSelectedPowerupDurationRemaining();\n\n\tCurrentSaveGame->SavedPlayerState.SelectedPowerupDurationRemaining = Cast<ASPlayerState>(Player->GetPlayerState())->GetSelectedPowerupDurationRemaining();\n\n\tCurrentSaveGame->SavedPlayerState.SelectedPowerupDurationRemaining = Cast<ASPlayerState>(Player-", "CodeBleu_score": 24.451538934858622}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t    // Clear data in current slot, if it exists\n    CurrentSaveGame = MakeShareable(new FSSaveGame());\n\n    // Iterate over all player controllers, we don't persist them in this sample game\n    APlayerController* PlayerController = UGameplayStatics::GetPlayerController(GetWorld(), 0);\n    ASPlayerState* PlayerState = PlayerController->GetPlayerState<ASPlayerState>();\n    if (PlayerState) {\n        PlayerState->SavePlayerState(CurrentSaveGame);\n    }\n\n    // Iterate over all actor instances in the world\n    for (AActor* Actor : TActorRange<AActor>(GetWorld())) {\n        // Only actors that implement the gameplay interface should be saved\n        if (!Actor->Implements<USGameplayInterface>()) {\n            continue;\n        }\n\n        // Store the name of the actor\n        FString ActorName = Actor->GetFName().ToString();\n        CurrentSaveGame->SavedActors.Add(ActorName);\n\n        // Store the transform of the actor\n        FTransform& ActorTransform = CurrentSaveGame->SavedActorsTransform.Add(ActorName);\n        ActorTransform = Actor->GetActorTransform();\n\n        // Store the serialized data of the actor\n        FMemoryWriter MemoryWriter(CurrentSaveGame->SavedActorsData.Add(ActorName));\n        FObjectAndNameAsStringProxyArchive Ar(MemoryWriter, true);\n        // Save the object\n        Actor->Serialize(Ar);\n    }\n\n    // Write the save game to disk\n    UGameplayStatics::SaveGameToSlot(CurrentSaveGame.Get(), CurrentSlotName, 0);\n\n    // Broadcast the event to update UI\n    OnSaveGameWritten.Broadcast(CurrentSaveGame);\n}", "CodeBleu_score": 49.46837868058287}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t    // Clear data from previous save game\n    CurrentSaveGame->SavedPlayers.Empty();\n    CurrentSaveGame->SavedActors.Empty();\n\n    // Iterate over all player controllers, we don't have proper ID to match yet\n    APlayerController* PC = GEngine->GetFirstLocalPlayerController(GetWorld());\n    ASPlayerState* PS = PC ? PC->GetPlayerState<ASPlayerState>() : nullptr;\n    if (PS) {\n        PS->SavePlayerState(CurrentSaveGame);\n    }\n\n    for (int32 i = 0; i < GameState->PlayerArray.Num(); ++i) {\n        ASPlayerState* PS = Cast<ASPlayerState>(GameState->PlayerArray[i]);\n        if (PS) {\n            PS->SavePlayerState(CurrentSaveGame);\n            break; // Single player only\n        }\n    }\n\n    // Iterate over all actors, storing those with SaveGame implemented\n    for (FActorIterator It(GetWorld()); It; ++It) {\n        AActor* Actor = *It;\n\n        if (!IsValid(Actor)) {\n            continue;\n        }\n\n        if (!Actor->Implements<USGameplayInterface>()) {\n            continue;\n        }\n\n        FActorSaveData ActorData;\n        ActorData.ActorName = Actor->GetFName();\n        ActorData.Transform = Actor->GetActorTransform();\n\n        FMemoryWriter MemoryWriter(ActorData.ByteData);\n\n        FObjectAndNameAsStringProxyArchive Ar(MemoryWriter, true);\n        // Save any object referenced by this actor\n        Actor->Serialize(Ar);\n\n        CurrentSaveGame->SavedActors.Add(ActorData);\n    }\n\n    UGameplayStatics::SaveGameToSlot(CurrentSaveGame, CurrentSlotName, 0);\n\n    OnSaveGameWritten.Broadcast(CurrentSaveGame);\n}", "CodeBleu_score": 76.52977571310882}]}
{"instance_id": "0d7043a0bff0", "generation_result": [{"code": "void FrameworkConfig::draw_themes(){\n\t    ImGui::Begin(\"Themes\", nullptr, ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoCollapse);\n    ImGui::SetWindowSize({ 0, 0 });\n    ImGui::SetWindowPos({ 0, 0 });\n\n    ImGui::Text(\"Themes\");\n    ImGui::Separator();\n    ImGui::Indent();\n\n    for (const auto& theme : m_themes) {\n        if (ImGui::MenuItem(theme.first.c_str())) {\n            m_theme = theme.first;\n            ImGui::GetStyle().FrameRounding = 3.3f;\n            ImGui::GetStyle().GrabRounding = 3.3f;\n        }\n    }\n\n    ImGui::Unindent();\n    ImGui::End();\n\n    if (m_font_size != m_font_size_before) {\n        ImGui::GetIO().FontGlobalScale = m_font_size / 100.0f;\n        m_font_size_before = m_font_size;\n    }\n}", "CodeBleu_score": 40.97997997209471}, {"code": "void FrameworkConfig::draw_themes(){\n\t    // Draw the theme selection UI\n    ImGui::Begin(\"Theme Selection\", &m_show_themes);\n    ImGui::Text(\"Select Theme:\");\n    ImGui::RadioButton(\"Dark\", &m_theme, 0);\n    ImGui::RadioButton(\"Light\", &m_theme, 1);\n    ImGui::RadioButton(\"Classic\", &m_theme, 2);\n    ImGui::Text(\"Font Size:\");\n    ImGui::SliderInt(\"##Font Size\", &m_font_size, 12, 30);\n    ImGui::End();\n\n    // Update the font size in the framework if it has been changed\n    if (m_font_size != m_framework->get_font_size()) {\n        m_framework->set_font_size(m_font_size);\n    }\n}", "CodeBleu_score": 45.08669515574122}, {"code": "void FrameworkConfig::draw_themes(){\n\t    if (ImGui::BeginTabItem(\"Themes\")) {\n        if (ImGui::BeginTabBar(\"Themes Tab Bar\")) {\n            if (ImGui::BeginTabItem(\"Theme Selection\")) {\n                ImGui::Text(\"Select a theme:\");\n                ImGui::RadioButton(\"Classic\", &selected_theme, 0);\n                ImGui::RadioButton(\"Dark\", &selected_theme, 1);\n                ImGui::RadioButton(\"Light\", &selected_theme, 2);\n                ImGui::EndTabItem();\n            }\n            if (ImGui::BeginTabItem(\"Font Size\")) {\n                ImGui::Text(\"Adjust the font size:\");\n                ImGui::SliderInt(\"Font Size\", &font_size, 10, 30);\n                ImGui::EndTabItem();\n            }\n            ImGui::EndTabBar();\n        }\n        ImGui::EndTabItem();\n    }\n\n    if (font_size != framework->getFontSize()) {\n        framework->setFontSize(font_size);\n    }\n}", "CodeBleu_score": 41.920657695930615}]}
{"instance_id": "e7f81d1dee95", "generation_result": [{"code": "void FrameworkConfig::draw_main() {\n\t    ImGui::Checkbox(\"Menu Key\", &menu_key);\n    ImGui::Checkbox(\"Show Cursor\", &show_cursor);\n    ImGui::Checkbox(\"Remember Menu State\", &remember_menu_state);\n    ImGui::Checkbox(\"Enable L3 + R3 Toggle\", &enable_l3_r3_toggle);\n    ImGui::Checkbox(\"Always Show Cursor\", &always_show_cursor);\n\n    ImGui::SliderInt(\"Log Level\", &log_level, 0, 6);\n    if (log_level >= 0 && log_level <= 6) {\n        spdlog::set_level(static_cast<spdlog::level::level_enum>(log_level));\n    }\n}", "CodeBleu_score": 44.37816351420593}, {"code": "void FrameworkConfig::draw_main() {\n\t    if (ImGui::BeginTabItem(\"Main\")) {\n        ImGui::Text(\"Menu Key: %s\", menu_key.c_str());\n        if (ImGui::IsItemHovered()) {\n            ImGui::SetTooltip(\"This is the key that will be used to open the menu.\");\n        }\n        ImGui::SameLine();\n        if (ImGui::Button(\"Change##MenuKey\")) {\n            menu_key = \"\";\n            menu_key_set = false;\n        }\n        ImGui::SameLine();\n        if (ImGui::Button(\"Reset##MenuKey\")) {\n            menu_key = \"INSERT\";\n            menu_key_set = true;\n        }\n        ImGui::Checkbox(\"Show Cursor\", &show_cursor);\n        ImGui::Checkbox(\"Remember Menu State\", &remember_menu_state);\n        ImGui::Checkbox(\"Enable L3 + R3 Toggle\", &enable_l3_r3_toggle);\n        ImGui::Checkbox(\"Always Show Cursor\", &always_show_cursor);\n        ImGui::Text(\"Log Level: %d\", log_level);\n        if (ImGui::IsItemHovered()) {\n            ImGui::SetTooltip(\"This is the level of logging that will be displayed.\n0 = Trace, 1 = Debug, 2 = Info, 3 = Warn, 4 = Error, 5 = Critical, 6 = Off\");\n        }\n        if (ImGui::SliderInt(\"##LogLevel\", &log_level, 0, 6)) {\n            if (log_level >= 0 && log_level <= 6) {\n                spdlog::set_level(static_cast<spdlog::level::level_enum>(log_level));\n            }\n        }\n        ImGui::EndTabItem();\n    }\n}", "CodeBleu_score": 37.202579018263805}, {"code": "void FrameworkConfig::draw_main() {\n\t    ImGui::Text(\"Menu Key: %s\", m_menu_key.c_str());\n    ImGui::Checkbox(\"Show Cursor\", &m_show_cursor);\n    ImGui::Checkbox(\"Remember Menu State\", &m_remember_menu_state);\n    ImGui::Checkbox(\"Enable L3 + R3 Toggle\", &m_enable_l3_r3_toggle);\n    ImGui::Checkbox(\"Always Show Cursor\", &m_always_show_cursor);\n\n    ImGui::Text(\"Log Level: %d\", m_log_level);\n    ImGui::SliderInt(\"##Log Level\", &m_log_level, 0, 6);\n\n    if (m_log_level >= 0 && m_log_level <= 6) {\n        spdlog::set_level(static_cast<spdlog::level::level_enum>(m_log_level));\n    }\n}", "CodeBleu_score": 39.93621266802439}]}
{"instance_id": "83fa7f401579", "generation_result": [{"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t\n\t// Check if the file path is actually a text buffer\n\tif ( bIsFilePathActuallyTextBuffer ) {\n\n\t\t// Parse the text buffer using FFastXml\n\t\tFFastXml::ParseXmlFile( OSMFilePath, false, true );\n\t}\n\telse {\n\n\t\t// Parse the file using FFastXml\n\t\tFFastXml::ParseXmlFile( OSMFilePath, true, true );\n\t}\n\n\t// Check if the parsing was successful\n\tif ( !FFastXml::Success() ) {\n\n\t\t// Log an error message with the error details\n\t\tUE_LOG( LogTemp, Error, TEXT( \"Error parsing XML file: %s\" ), *FFastXml::ErrorMsg() );\n\n\t\t// Return false to indicate failure\n\t\treturn false;\n\t}\n\n\t// Get the root node of the XML document\n\tFFastXmlNode* RootNode = FFastXml::GetRootNode();\n\n\t// Check if the root node is valid\n\tif ( RootNode ) {\n\n\t\t// Get the first child node of the root node\n\t\tFFastXmlNode* FirstChildNode = RootNode->GetFirstChildNode();\n\n\t\t// Check if the first child node is valid\n\t\tif ( FirstChildNode ) {\n\n\t\t\t// Get the next sibling node of the first child node\n\t\t\tFFastXmlNode* NextSiblingNode = FirstChildNode->GetNextSiblingNode();\n\n\t\t\t// Check if the next sibling node is valid\n\t\t\tif ( NextSiblingNode ) {\n\n\t\t\t\t// Get the first child node of the next sibling node\n\t\t\t\tFFastXmlNode* FirstChildNodeOfNextSibling = NextSiblingNode->GetFirstChildNode();\n\n\t\t\t\t// Check if the first child node of the next sibling node is valid\n\t\t\t\tif ( FirstChildNodeOfNextSibling ) {\n\n\t\t\t\t\t// Get the first child node of the first child node of the next sibling node\n\t\t\t\t\tFFastXmlNode* FirstChildNodeOfFirstChildNodeOfNextSibling = FirstChildNodeOfNextSibling->GetFirstChildNode();\n\n\t\t\t\t\t// Check if the first child node of the first child node of the next sibling node is valid\n\t\t\t\t\tif ( FirstChildNodeOfFirst", "CodeBleu_score": 37.78483646036843}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t\n\tFFastXml::FXmlFile XmlFile;\n\tconst FString XmlFilePath = FPaths::ProjectDir() / OSMFilePath;\n\tconst bool bAllowNonExistentXmlFile = true;\n\n\tif ( !bIsFilePathActuallyTextBuffer ) {\n\n\t\tif ( !XmlFile.LoadFile( XmlFilePath, bAllowNonExistentXmlFile ) ) {\n\n\t\t\tFeedbackContext->Logf( ELogVerbosity::Error, TEXT( \"Failed to load OpenStreetMap XML file '%s'.\" ), *XmlFilePath );\n\t\t\treturn false;\n\t\t}\n\t}\n\telse {\n\n\t\tif ( !XmlFile.LoadFileContents( OSMFilePath, bAllowNonExistentXmlFile ) ) {\n\n\t\t\tFeedbackContext->Logf( ELogVerbosity::Error, TEXT( \"Failed to load OpenStreetMap XML text buffer.\" ) );\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tFFastXml::FXmlNode* RootNode = XmlFile.GetRootNode();\n\n\tif ( RootNode ) {\n\n\t\tFFastXml::FXmlNode* BoundsNode = RootNode->GetChildNode( \"bounds\" );\n\n\t\tif ( BoundsNode ) {\n\n\t\t\tdouble MinLatitude = BoundsNode->GetAttributeDoubleValue( \"minlat\" );\n\t\t\tdouble MinLongitude = BoundsNode->GetAttributeDoubleValue( \"minlon\" );\n\t\t\tdouble MaxLatitude = BoundsNode->GetAttributeDoubleValue( \"maxlat\" );\n\t\t\tdouble MaxLongitude = BoundsNode->GetAttributeDoubleValue( \"maxlon\" );\n\n\t\t\tdouble AverageLatitude = ( MinLatitude + MaxLatitude ) / 2.0;\n\t\t\tdouble AverageLongitude = ( MinLongitude + MaxLongitude ) / 2.0;\n\n\t\t\tFeedbackContext->Logf( ELogVerbosity::Display, TEXT( \"Average latitude: %f\" ), AverageLatitude );\n\t\t\tFeedbackContext->Logf( ELogVerbosity::Display, TEXT( \"Average longitude: %f\" ), AverageLongitude );\n\n\t\t\treturn true;\n\t\t}", "CodeBleu_score": 48.98302516979853}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t\t\n\tFFastXml::FXmlFile XmlFile;\n\tFXmlNode* RootNode = nullptr;\n\t\n\t// Load the OSM XML file\n\tif ( bIsFilePathActuallyTextBuffer ) {\n\t\tif ( !XmlFile.LoadFile( OSMFilePath, EConstructMethod::ConstructFromBuffer ) ) {\n\t\t\tFeedbackContext->Logf( ELogVerbosity::Error, TEXT( \"Failed to load OSM XML file from text buffer. Error: %s\" ), *XmlFile.GetError() );\n\t\t\treturn false;\n\t\t}\n\t} else {\n\t\tif ( !XmlFile.LoadFile( OSMFilePath, EConstructMethod::ConstructFromFile ) ) {\n\t\t\tFeedbackContext->Logf( ELogVerbosity::Error, TEXT( \"Failed to load OSM XML file. Error: %s\" ), *XmlFile.GetError() );\n\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t// Get the root node of the XML document\n\tRootNode = XmlFile.GetRootNode();\n\t\n\t// Check if the root node is valid\n\tif ( !RootNode ) {\n\t\tFeedbackContext->Logf( ELogVerbosity::Error, TEXT( \"Failed to get root node of OSM XML file.\" ) );\n\t\treturn false;\n\t}\n\t\n\t// Iterate through all child nodes of the root node\n\tfor ( FXmlNode* ChildNode : RootNode->GetChildrenNodes() ) {\n\t\t// Check if the child node is a \"node\" element\n\t\tif ( ChildNode->GetTag() == TEXT( \"node\" ) ) {\n\t\t\t// Get the latitude and longitude attributes of the \"node\" element\n\t\t\tFString LatitudeStr = ChildNode->GetAttribute( TEXT( \"lat\" ) );\n\t\t\tFString LongitudeStr = ChildNode->GetAttribute( TEXT( \"lon\" ) );\n\t\t\t\n\t\t\t// Convert the latitude and longitude strings to floats\n\t\t\tfloat Latitude = FCString::Atof( *LatitudeStr );\n\t\t\tfloat Longitude = FCString::Atof( *LongitudeStr );\n\t\t\t\n\t\t\t// Add the latitude and longitude to the average calculation\n\t\t\tAverageLatitude += Lat", "CodeBleu_score": 50.66778852934011}]}
{"instance_id": "7349d775edf6", "generation_result": [{"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t    Super::PostSpawnActor(Asset, NewActor);\n\n    if (UStreetMap* StreetMap = Cast<UStreetMap>(Asset)) {\n        AStreetMapActor* StreetMapActor = CastChecked<AStreetMapActor>(NewActor);\n        UStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n        StreetMapComponent->SetStreetMap(StreetMap);\n    }\n}", "CodeBleu_score": 84.23588476247356}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\n\tif (UStreetMap* StreetMap = Cast<UStreetMap>(Asset)) {\n\t\tif (AStreetMapActor* StreetMapActor = Cast<AStreetMapActor>(NewActor)) {\n\t\t\tUStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n\t\t\tif (StreetMapComponent) {\n\t\t\t\tStreetMapComponent->SetStreetMap(StreetMap);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 73.3765657865396}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\n\tif (UStreetMap* StreetMap = Cast<UStreetMap>(Asset)) {\n\t\tif (AStreetMapActor* StreetMapActor = Cast<AStreetMapActor>(NewActor)) {\n\t\t\tUStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n\t\t\tif (StreetMapComponent) {\n\t\t\t\tStreetMapComponent->SetStreetMap(StreetMap);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 73.3765657865396}]}
{"instance_id": "f160ac6d0353", "generation_result": [{"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t    if (StreetMapComponent.IsValid()) {\n        StreetMapComponent->BuildMesh();\n        DetailLayoutBuilder->ForceRefreshDetails();\n    }\n    return FReply::Handled();\n}", "CodeBleu_score": 61.304846580740914}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\tUStreetMapComponent* streetMapComponent = GetStreetMapComponent();\n\tif (streetMapComponent) {\n\t\tstreetMapComponent->BuildMesh();\n\t\tDetailsView->ForceRefresh();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 58.963106560638664}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\tStreetMapComponent->BuildMesh();\n\tDetailsView->ForceRefresh();\n\treturn FReply::Handled();\n}", "CodeBleu_score": 27.809552466799992}]}
{"instance_id": "b23f1f2b29fa", "generation_result": [{"code": "void FStreetMapImportingModule::StartupModule(){\n\t    // Register the StreetMap asset type with the asset tools\n    IAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n    AssetTools.RegisterAssetTypeActions(MakeShareable(new FStreetMapAssetTypeActions()));\n\n    // Initialize the StreetMap style\n    FStreetMapStyle::Initialize();\n\n    // Register a custom class layout for the StreetMapComponent in the property editor module\n    FPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n    PropertyModule.RegisterCustomClassLayout(\"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance));\n    PropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 74.71240448599919}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t\n\tFStreetMapStyle::Initialize();\n\tFStreetMapStyle::ReloadTextures();\n\n\tIAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n\tEAssetTypeCategories::Type StreetMapAssetCategoryBit = AssetTools.RegisterAdvancedAssetCategory(FName(TEXT(\"StreetMap\")), LOCTEXT(\"StreetMapAssetCategory\", \"StreetMap\"));\n\n\tTSharedRef<IAssetTypeActions> StreetMapAssetTypeActions = MakeShareable(new FStreetMapAssetTypeActions(StreetMapAssetCategoryBit));\n\tAssetTools.RegisterAssetTypeActions(StreetMapAssetTypeActions);\n\tCreatedAssetTypeActions.Add(StreetMapAssetTypeActions);\n\n\tFPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\tPropertyModule.RegisterCustomClassLayout(\"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance));\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 62.88618188799734}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t\n\tIAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n\n\tStreetMapAssetTypeActions = MakeShareable(new FStreetMapAssetTypeActions());\n\tAssetTools.RegisterAssetTypeActions(StreetMapAssetTypeActions.ToSharedRef());\n\n\tFStreetMapStyle::Initialize();\n\n\tFPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\tPropertyModule.RegisterCustomClassLayout(\"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance));\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 77.62271348106455}]}
{"instance_id": "1da549fe84e3", "generation_result": [{"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\tFStreetMapSceneProxy* Proxy = nullptr;\n\n\tif (IsValid(Mesh)) {\n\t\tProxy = new FStreetMapSceneProxy(this);\n\t\tProxy->Initialize(Mesh->GetVertices(), Mesh->GetIndices());\n\t}\n\n\treturn Proxy;\n}", "CodeBleu_score": 53.7728247892447}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t    if (GetStaticMesh() != nullptr) {\n        FStreetMapSceneProxy* Proxy = new FStreetMapSceneProxy(this);\n        if (Proxy) {\n            FNavigationSystem::UpdateComponentData(*this);\n        }\n        return Proxy;\n    }\n    return nullptr;\n}", "CodeBleu_score": 42.70696794188403}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\n\tFPrimitiveSceneProxy* Proxy = nullptr;\n\n\tif (Mesh != nullptr) {\n\n\t\tProxy = new FStreetMapSceneProxy(this);\n\n\t}\n\n\treturn Proxy;\n\n}", "CodeBleu_score": 39.86661569286263}]}
{"instance_id": "d0ee3b2e023e", "generation_result": [{"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t    TestAbility01Handle = ServerHandle;\n    TArray<int32> InputIDs;\n    InputIDs.Add(AbilityInputID::Ability01);\n    BindAbility(TestAbility01Handle, InputIDs);\n}", "CodeBleu_score": 56.50616576730746}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t\tTestAbility01Handle = ServerHandle;\n\n\tTArray<int32> InputIDs;\n\tInputIDs.Add(AbilityInputID::Ability01);\n\n\tBindAbilityInput(TestAbility01Handle, InputIDs);\n}", "CodeBleu_score": 55.88870765443429}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t    TestAbility01Handle = ServerHandle;\n    TArray<int32> InputIDs;\n    InputIDs.Add(AbilityInputID::Ability01);\n    BindAbilityToInput(ServerHandle, InputIDs);\n}", "CodeBleu_score": 65.9366257471395}]}
{"instance_id": "e62f1b2cd4bd", "generation_result": [{"code": "void AARCharacter::MoveForward(float Value){\n\t    if (Controller && Value != 0.0f) {\n        const FRotator YawRotation(0, Controller->GetControlRotation().Yaw, 0);\n        const FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n        AddMovementInput(Direction, Value);\n    }\n}", "CodeBleu_score": 65.4192702397408}, {"code": "void AARCharacter::MoveForward(float Value){\n\t\tif (Controller && Value != 0.0f) {\n\t\t// find out which way is forward\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\t// get forward vector\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 83.42973602512632}, {"code": "void AARCharacter::MoveForward(float Value){\n\t    if (Controller && Value != 0.0f) {\n        const FRotator YawRotation(0, Controller->GetControlRotation().Yaw, 0);\n        const FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n        AddMovementInput(Direction, Value);\n    }\n}", "CodeBleu_score": 65.4192702397408}]}
{"instance_id": "a77cdc67ee00", "generation_result": [{"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tif (!MainWeaponMeshComponent) {\n\t\treturn GetMesh()->GetSocketLocation(Socket);\n\t}\n\treturn MainWeaponMeshComponent->GetSocketLocation(Socket);\n}", "CodeBleu_score": 50.56679114336908}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t    if (MainWeaponMeshComponent) {\n        return MainWeaponMeshComponent->GetSocketLocation(Socket);\n    }\n    return GetMesh()->GetSocketLocation(TEXT(\"headSocket\"));\n}", "CodeBleu_score": 57.72983448793176}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tif (MainWeaponMesh) {\n\t\treturn MainWeaponMesh->GetSocketLocation(Socket);\n\t}\n\treturn GetMesh()->GetSocketLocation(\"headSocket\");\n}", "CodeBleu_score": 48.49267503412473}]}
{"instance_id": "f021203f736a", "generation_result": [{"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tSpawnedEnemies.Remove(InEnemy);\n\n\tif (SpawnedEnemies.Num() < MinEnemies) {\n\t\tGetWorldTimerManager().SetTimer(RespawnTimerHandle, this, &AAREnemySpawner::SpawnEnemies, RespawnTime, false);\n\t}\n}", "CodeBleu_score": 50.28029619213081}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tif (InEnemy) {\n\t\tSpawnedEnemies.Remove(InEnemy);\n\n\t\tif (SpawnedEnemies.Num() < MinEnemies) {\n\t\t\tbIsSpawning = true;\n\t\t}\n\t}\n}", "CodeBleu_score": 52.65928565395197}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tEnemies.Remove(InEnemy);\n\n\tif (Enemies.Num() < MinEnemies) {\n\t\tGetWorld()->GetTimerManager().SetTimer(SpawnTimerHandle, this, &AAREnemySpawner::SpawnEnemy, SpawnRate, true);\n\t}\n}", "CodeBleu_score": 48.26422660819317}]}
{"instance_id": "dbab72cb539f", "generation_result": [{"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\n    FString Result = Super::ApproveLogin(Options);\n\n    TArray<FString> Params;\n    Options.ParseIntoArray(Params, TEXT(\"&\"));\n    for (const FString& Param : Params) {\n        TArray<FString> KeyValue;\n        Param.ParseIntoArray(KeyValue, TEXT(\"=\"));\n        if (KeyValue.Num() == 2 && KeyValue[0] == TEXT(\"PlayerId\")) {\n            PlayerId = KeyValue[1];\n            break;\n        }\n    }\n\n    return Result;\n}", "CodeBleu_score": 58.4552178973599}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\tFString Result = Super::ApproveLogin(Options);\n\n\tTArray<FString> Params;\n\tOptions.ParseIntoArray(Params, TEXT(\"&\"));\n\n\tfor (FString Param : Params) {\n\t\tFString Key, Value;\n\t\tParam.Split(TEXT(\"=\"), &Key, &Value);\n\n\t\tif (Key == TEXT(\"PlayerId\")) {\n\t\t\tPlayerId = Value;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn Result;\n}", "CodeBleu_score": 60.863822759178795}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t    FString result = Super::ApproveLogin(Options);\n\n    TArray<FString> parameters;\n    Options.ParseIntoArray(parameters, TEXT(\"&\"));\n\n    for (FString parameter : parameters) {\n        if (parameter.StartsWith(TEXT(\"PlayerId=\"))) {\n            FString playerId = parameter.RightChop(9);\n\n            // Here you can add your own logic to approve the login based on the player ID\n            // For example, you can check if the player is allowed to join the game\n\n            // If the login is approved, return the result from the parent method\n            return result;\n        }\n    }\n\n    // If the player ID is not found or the login is not approved, return an empty string\n    return TEXT(\"\");\n}", "CodeBleu_score": 53.58492730857457}]}
{"instance_id": "85ea02df92a5", "generation_result": [{"code": "void UARRegisterView::OnRegisterClicked(){\n\t\t\n\tFString Username = UsernameInput->GetText().ToString();\n\tFString DisplayName = DisplayNameInput->GetText().ToString();\n\tFString Password = PasswordInput->GetText().ToString();\n\n\tif (Username.IsEmpty() || DisplayName.IsEmpty() || Password.IsEmpty()) {\n\t\tWarningMessage->SetText(FText::FromString(\"Please fill all the fields.\"));\n\t\treturn;\n\t}\n\n\tUARGameInstance* GameInstance = Cast<UARGameInstance>(GetGameInstance());\n\tif (GameInstance) {\n\t\tGameInstance->RegisterNewPlayer(Username, DisplayName, Password);\n\t}\n\n\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n}", "CodeBleu_score": 53.0598859324817}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t    UARGameInstance* GameInstance = Cast<UARGameInstance>(GetGameInstance());\n    if (GameInstance) {\n        FString Username = UsernameField->GetText().ToString();\n        FString DisplayName = DisplayNameField->GetText().ToString();\n        FString Password = PasswordField->GetText().ToString();\n\n        if (Username.IsEmpty() || DisplayName.IsEmpty() || Password.IsEmpty()) {\n            WarningText->SetVisibility(ESlateVisibility::Visible);\n            WarningText->SetText(FText::FromString(\"Please fill in all fields\"));\n        }\n        else {\n            RegisterButton->SetVisibility(ESlateVisibility::Hidden);\n            GameInstance->RegisterNewPlayer(Username, DisplayName, Password);\n        }\n    }\n}", "CodeBleu_score": 58.54763332989168}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t\tUARGameInstance* GameInstance = Cast<UARGameInstance>(GetWorld()->GetGameInstance());\n\tif (GameInstance) {\n\t\tFString Username = UsernameInputField->GetText().ToString();\n\t\tFString DisplayName = DisplayNameInputField->GetText().ToString();\n\t\tFString Password = PasswordInputField->GetText().ToString();\n\t\tif (Username.IsEmpty() || DisplayName.IsEmpty() || Password.IsEmpty()) {\n\t\t\tDisplayWarning(\"Please fill in all fields.\");\n\t\t}\n\t\telse {\n\t\t\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\t\t\tGameInstance->RegisterNewPlayer(Username, DisplayName, Password);\n\t\t}\n\t}\n}", "CodeBleu_score": 50.482194607520924}]}
{"instance_id": "b33bb5886dd9", "generation_result": [{"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\t\n\tif (InMod.Attribute.IsValid() && InMod.Attribute.Get() == UARCharacterAttributes::GetDamageAttribute()) {\n\t\tif (InMod.AffectedActor.IsValid()) {\n\t\t\tFVector2D ScreenLocation;\n\t\t\tUGameplayStatics::ProjectWorldToScreen(InMod.AffectedActor.Get(), InMod.ModifierValue.GetValue<float>() * 100.0f, ScreenLocation);\n\t\t\tFloatingCombatText->SetText(FString::FromInt(InMod.ModifierValue.GetValue<float>()));\n\t\t\tFloatingCombatText->SetPositionInViewport(ScreenLocation);\n\t\t}\n\t}\n}", "CodeBleu_score": 32.63797173772098}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\tif (InMod.TargetActor.IsValid()) {\n\t\tFVector2D ScreenLocation;\n\t\tUGameplayStatics::ProjectWorldToScreen(GetOwningPlayerController(), InMod.TargetActor->GetActorLocation(), ScreenLocation);\n\n\t\tAddFloatingCombatText(InMod.NewValue, ScreenLocation);\n\t}\n}", "CodeBleu_score": 28.0807183510283}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\t\n\tauto PlayerController = Cast<AARPlayerController>(UGameplayStatics::GetPlayerController(GetWorld(), 0));\n\tif (PlayerController) {\n\t\tauto Enemy = PlayerController->GetEnemy();\n\t\tif (Enemy) {\n\t\t\tauto EnemyHealthBar = EnemyHealthBars.Find(Enemy);\n\t\t\tif (EnemyHealthBar) {\n\t\t\t\t(*EnemyHealthBar)->UpdateHealthBar(InMod.NewValue);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 26.957640295451952}]}
{"instance_id": "177d36e7e076", "generation_result": [{"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (AbilityInstance) {\n\t\tUARWeaponInventoryComponent* WeaponComponent = Cast<UARWeaponInventoryComponent>(AbilityInstance->GetComponentByClass(UARWeaponInventoryComponent::StaticClass()));\n\t\tAARCharacter* OwningCharacter = Cast<AARCharacter>(AbilityInstance->GetOwnerActor());\n\t\tif (WeaponComponent && OwningCharacter) {\n\t\t\tUARMagazineUpgradeItem* NewMagazineUpgrade = DuplicateObject<UARMagazineUpgradeItem>(InMagazineUpgrade, WeaponComponent);\n\t\t\tif (OwningCharacter->HasAuthority()) {\n\t\t\t\tWeaponComponent->SetMagazineUpgrade(NewMagazineUpgrade);\n\t\t\t\tWeaponComponent->ApplyMagazineUpgradeEffect(NewMagazineUpgrade);\n\t\t\t}\n\t\t\tOnMagazineUpdateAdded(NewMagazineUpgrade);\n\t\t}\n\t}\n}", "CodeBleu_score": 47.448417159235134}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (ensure(InMagazineUpgrade)) {\n\t\tUARWeaponAbilityBase* AbilityInstance = GetAbilityInstance();\n\t\tif (AbilityInstance) {\n\t\t\tUARWeaponInventoryComponent* WeaponComponent = AbilityInstance->GetWeaponComponent();\n\t\t\tAARCharacter* Character = WeaponComponent->GetOwningCharacter();\n\t\t\tif (ensure(WeaponComponent && Character)) {\n\t\t\t\tUARMagazineUpgradeItem* DuplicatedMagazineUpgrade = DuplicateObject(InMagazineUpgrade, this);\n\t\t\t\tDuplicatedMagazineUpgrade->SetMagazineUpgrade(InMagazineUpgrade->GetMagazineUpgrade());\n\t\t\t\tif (Character->HasAuthority()) {\n\t\t\t\t\tDuplicatedMagazineUpgrade->SetMagazineUpgradeValue(InMagazineUpgrade->GetMagazineUpgradeValue());\n\t\t\t\t\tDuplicatedMagazineUpgrade->ApplyUpgradeEffect(AbilityInstance);\n\t\t\t\t}\n\t\t\t\tOnMagazineUpdateAdded(DuplicatedMagazineUpgrade);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 42.10396119540333}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\n\tif (AbilityInstance) {\n\n\t\tUARWeaponInventoryComponent* WeaponComponent = Cast<UARWeaponInventoryComponent>(GetAbilitySystemComponentFromActorInfo());\n\n\t\tAARCharacter* Character = Cast<AARCharacter>(GetActorInfo().AvatarActor.Get());\n\n\t\tif (WeaponComponent && Character) {\n\n\t\t\tUARMagazineUpgradeItem* NewMagazineUpgrade = DuplicateObject<UARMagazineUpgradeItem>(InMagazineUpgrade, Character);\n\n\t\t\tif (Character->HasAuthority()) {\n\n\t\t\t\tNewMagazineUpgrade->UpdateValue(WeaponComponent->GetCurrentMagazineUpgrade(AbilityInstance));\n\n\t\t\t\tUARMagazineUpgradeEffect* Effect = NewObject<UARMagazineUpgradeEffect>(Character);\n\n\t\t\t\tEffect->SetupEffect(NewMagazineUpgrade, WeaponComponent, AbilityInstance);\n\n\t\t\t\tEffect->ApplyEffect();\n\n\t\t\t\tOnMagazineUpdateAdded(NewMagazineUpgrade);\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}", "CodeBleu_score": 50.96116368484584}]}
{"instance_id": "404276da398b", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tAARCharacter* Owner = Cast<AARCharacter>(GetOwner());\n\tif (!Owner) {\n\t\treturn;\n\t}\n\n\tUAFAbilityComponent* AbilityComponent = Owner->GetAbilityComponent();\n\tif (!AbilityComponent) {\n\t\treturn;\n\t}\n\n\tUGAAbilityBase* Ability = AbilityComponent->GetAbilityByHandle(InAbilityTag);\n\tif (!Ability) {\n\t\treturn;\n\t}\n\n\tUARItemWeapon* Item = GetItemByLocalIndex(LocalIndex);\n\tif (!Item) {\n\t\treturn;\n\t}\n\n\tItem->SetAbilityToItem(Cast<UARWeaponAbilityBase>(Ability));\n}", "CodeBleu_score": 51.425785508711016}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tAARCharacter* Character = Cast<AARCharacter>(GetOwner());\n\n\tif (Character) {\n\t\tUGAAbilityComponent* AbilityComponent = Character->GetAbilityComponent();\n\n\t\tif (AbilityComponent) {\n\t\t\tUGAAbilityBase* Ability = AbilityComponent->GetAbilityByHandle(InAbilityTag.Get());\n\n\t\t\tif (Ability) {\n\t\t\t\tUARItemWeapon* Weapon = Cast<UARItemWeapon>(Items[LocalIndex]);\n\n\t\t\t\tif (Weapon) {\n\t\t\t\t\tWeapon->SetAbilityToItem(Ability);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 55.03082523745202}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t    AARCharacter* Character = Cast<AARCharacter>(GetOwner());\n    if (Character) {\n        UAFAbilityComponent* AbilityComponent = Character->GetAbilityComponent();\n        if (AbilityComponent) {\n            UGAAbilityBase* Ability = AbilityComponent->GetAbilityByHandle(InAbilityTag);\n            if (Ability) {\n                UARItemWeapon* Item = Cast<UARItemWeapon>(GetItemByLocalIndex(LocalIndex));\n                if (Item) {\n                    Item->SetAbilityToItem(Cast<UARWeaponAbilityBase>(Ability));\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 51.55595321423012}]}
{"instance_id": "2e97aab98981", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\tAARCharacter* OwnerCharacter = Cast<AARCharacter>(GetOwner());\n\n\tFARWeaponRPC WeaponData;\n\tWeaponData.WeaponIndex = LocalIndex;\n\n\tswitch (LocalIndex) {\n\t\tcase 0:\n\t\t\tOwnerCharacter->GetWeaponComponent()->SetWeaponData(WeaponData);\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tOwnerCharacter->GetSecondaryWeaponComponent()->SetWeaponData(WeaponData);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\n\tif (LocalIndex == CurrentWeaponIndex) {\n\t\tUARWeaponAbilityBase* UnequipAbility = Cast<UARWeaponAbilityBase>(OwnerCharacter->GetAbilityComponent()->FindAbilityByClass(UARWeaponAbilityBase::StaticClass()));\n\t\tif (UnequipAbility) {\n\t\t\tUnequipAbility->TriggerAbility();\n\t\t}\n\t}\n}", "CodeBleu_score": 43.28607074029363}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\tAARCharacter* Character = Cast<AARCharacter>(GetOwner());\n\tif (Character) {\n\t\tFARWeaponRPC WeaponData;\n\t\tWeaponData.Weapon = nullptr;\n\t\tWeaponData.LocalIndex = LocalIndex;\n\t\tCharacter->SetWeaponData(WeaponData);\n\t\tCharacter->UpdateWeaponComponent(LocalIndex);\n\t\tif (LocalIndex == Character->GetCurrentWeaponIndex()) {\n\t\t\tCharacter->UnEquipWeapon();\n\t\t}\n\t}\n}", "CodeBleu_score": 53.77415778064565}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\tSuper::OnItemRemoved(LocalIndex);\n\n\tAARCharacter* Character = Cast<AARCharacter>(GetOwner());\n\n\tif (!Character) {\n\t\treturn;\n\t}\n\n\tFARWeaponRPC WeaponRPC;\n\n\tWeaponRPC.WeaponData = FARWeaponData();\n\n\tCharacter->GetWeaponComponent()->SetWeaponData(LocalIndex, WeaponRPC.WeaponData);\n\n\tCharacter->GetWeaponComponent()->UpdateWeaponComponent(LocalIndex, WeaponRPC.WeaponData);\n\n\tif (Character->GetWeaponComponent()->GetCurrentWeapon() == LocalIndex) {\n\t\tCharacter->GetWeaponComponent()->UnequipWeapon();\n\t}\n}", "CodeBleu_score": 38.35978643841118}]}
{"instance_id": "13cc35e5ecac", "generation_result": [{"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\t\n\tFLoadingScreenAttributes::Shutdown();\n\t\n}", "CodeBleu_score": 10.310373064206855}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\t\n\tif (!IsRunningDedicatedServer()) {\n\t\t\n\t\tGetMoviePlayer()->OnPrepareLoadingScreen().RemoveAll(this);\n\t\t\n\t}\n\t\n}", "CodeBleu_score": 72.15676266996132}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\n\t// If the application is not running as a dedicated server, remove all loading screen preparation handlers associated with the module from the movie player.\n\tif (!IsRunningDedicatedServer()) {\n\t\tGetMoviePlayer()->OnPrepareLoadingScreen().RemoveAll(this);\n\t}\n}", "CodeBleu_score": 72.15676266996132}]}
{"instance_id": "2ee3ac60a8f3", "generation_result": [{"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t    UE_LOG(LogTemp, Warning, TEXT(\"FAsyncLoadingScreenModule::PreSetupLoadingScreen()\"));\n\n    if (IsMoviePlayerEnabled()) {\n        FLoadingScreenAttributes LoadingScreen;\n        GetDefault<ULoadingScreenSettings>()->GetStartupLoadingScreen(LoadingScreen);\n        LoadingScreen.bAutoCompleteWhenLoadingCompletes = false;\n        GetMoviePlayer()->SetupLoadingScreen(LoadingScreen);\n    }\n}", "CodeBleu_score": 37.70400108939884}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\n\tUE_LOG(LogTemp, Log, TEXT(\"PreSetupLoadingScreen\"));\n\n\tif (IsMoviePlayerEnabled()) {\n\n\t\tUE_LOG(LogTemp, Log, TEXT(\"MoviePlayer is enabled\"));\n\n\t\tFLoadingScreenAttributes DefaultLoadingScreen;\n\n\t\tGetDefault<ULoadingScreenSettings>()->GetDefaultSettings(DefaultLoadingScreen);\n\n\t\tDefaultLoadingScreen.bAutoCompleteWhenLoadingCompletes = false;\n\n\t\tSetupLoadingScreen(DefaultLoadingScreen);\n\n\t}\n\n}", "CodeBleu_score": 52.03539883239841}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\n\tUE_LOG(LogTemp, Warning, TEXT(\"PreSetupLoadingScreen\"));\n\n\tif (IsMoviePlayerEnabled()) {\n\n\t\tFLoadingScreenAttributes LoadingScreen;\n\n\t\tGetDefault<ULoadingScreenSettings>()->GetStartupLoadingScreen(LoadingScreen);\n\n\t\tGetMoviePlayer()->SetupLoadingScreen(LoadingScreen);\n\n\t}\n\n}", "CodeBleu_score": 44.19656976613119}]}
{"instance_id": "c095588f550c", "generation_result": [{"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\n\t// Remove existing background images\n\tStartupBackgroundImages.Empty();\n\tDefaultBackgroundImages.Empty();\n\n\t// Get the loading screen settings\n\tULoadingScreenSettings* LoadingScreenSettings = GetMutableDefault<ULoadingScreenSettings>();\n\n\t// Load and add images for the startup loading screen\n\tfor (const FString& BackgroundImagePath : LoadingScreenSettings->StartupBackgroundImages) {\n\t\tUTexture2D* BackgroundImage = Cast<UTexture2D>(StaticLoadObject(UTexture2D::StaticClass(), nullptr, *BackgroundImagePath));\n\t\tif (BackgroundImage) {\n\t\t\tStartupBackgroundImages.Add(BackgroundImage);\n\t\t}\n\t}\n\n\t// Load and add images for the default loading screen\n\tfor (const FString& BackgroundImagePath : LoadingScreenSettings->DefaultBackgroundImages) {\n\t\tUTexture2D* BackgroundImage = Cast<UTexture2D>(StaticLoadObject(UTexture2D::StaticClass(), nullptr, *BackgroundImagePath));\n\t\tif (BackgroundImage) {\n\t\t\tDefaultBackgroundImages.Add(BackgroundImage);\n\t\t}\n\t}\n}", "CodeBleu_score": 48.58048377419538}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"FAsyncLoadingScreenModule::LoadBackgroundImages\"));\n\n\t// Remove all existing background images\n\tStartupBackgroundImages.Empty();\n\tDefaultBackgroundImages.Empty();\n\n\t// Get the loading screen settings\n\tULoadingScreenSettings* LoadingScreenSettings = GetDefault<ULoadingScreenSettings>();\n\n\t// Load and add images for the startup loading screen\n\tfor (FString ImagePath : LoadingScreenSettings->StartupLoadingScreen.Images) {\n\t\tUTexture2D* Texture = Cast<UTexture2D>(StaticLoadObject(UTexture2D::StaticClass(), NULL, *ImagePath));\n\t\tif (Texture) {\n\t\t\tStartupBackgroundImages.Add(Texture);\n\t\t}\n\t}\n\n\t// Load and add images for the default loading screen\n\tfor (FString ImagePath : LoadingScreenSettings->DefaultLoadingScreen.Images) {\n\t\tUTexture2D* Texture = Cast<UTexture2D>(StaticLoadObject(UTexture2D::StaticClass(), NULL, *ImagePath));\n\t\tif (Texture) {\n\t\t\tDefaultBackgroundImages.Add(Texture);\n\t\t}\n\t}\n}", "CodeBleu_score": 45.34481711172632}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\n\t//Remove all existing background images\n\tStartupScreen.Images.Empty();\n\tDefaultScreen.Images.Empty();\n\n\t//Get the loading screen settings\n\tFLoadingScreenSettings Settings;\n\tGetLoadingScreenSettings(Settings);\n\n\t//Load and add images for the startup screen\n\tfor (auto Image : Settings.StartupScreen.Images) {\n\t\tUTexture2D* Texture = Cast<UTexture2D>(Image.Get());\n\t\tif (Texture) {\n\t\t\tStartupScreen.Images.Add(Texture);\n\t\t}\n\t}\n\n\t//Load and add images for the default loading screen\n\tfor (auto Image : Settings.DefaultScreen.Images) {\n\t\tUTexture2D* Texture = Cast<UTexture2D>(Image.Get());\n\t\tif (Texture) {\n\t\t\tDefaultScreen.Images.Add(Texture);\n\t\t}\n\t}\n}", "CodeBleu_score": 50.47461247380569}]}
{"instance_id": "4ffd56e2a326", "generation_result": [{"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\tFLoadingScreenSettings* Settings = GetDefault<FLoadingScreenSettings>();\n\n\tconst double ElapsedTime = InCurrentTime - Settings->FadeOutDuration;\n\tconst float MinAlpha = 0.0f;\n\tconst float MaxAlpha = 1.0f;\n\tconst float AnimationSpeed = Settings->FadeOutDuration;\n\n\tconst float CurrentAlpha = FMath::FInterpSinInOut(MinAlpha, MaxAlpha, FMath::Clamp(ElapsedTime / AnimationSpeed, 0.0f, 1.0f));\n\n\tLoadingCompleteText->SetColorAndOpacity(FLinearColor(FLinearColor::White, CurrentAlpha));\n\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 41.87486040806766}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t    // Get the loading screen settings.\n    const ULoadingScreenSettings* LoadingScreenSettings = GetDefault<ULoadingScreenSettings>();\n\n    // Get the minimum and maximum alpha values from the loading screen settings.\n    const float MinAlpha = LoadingScreenSettings->GetMinimumLoadingCompleteTextAlpha();\n    const float MaxAlpha = LoadingScreenSettings->GetMaximumLoadingCompleteTextAlpha();\n\n    // Calculate the alpha value based on the elapsed time and animation speed.\n    const float Alpha = MinAlpha + FMath::PingPong(InCurrentTime, LoadingScreenSettings->GetLoadingCompleteTextAnimationSpeed()) * (MaxAlpha - MinAlpha);\n\n    // Set the text's alpha value.\n    Text->SetColorAndOpacity(FLinearColor(1.0f, 1.0f, 1.0f, Alpha));\n\n    // Return the status indicating the animation should continue.\n    return EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 34.76343702844197}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\tstatic float Alpha = MinimumAlpha;\n\tstatic bool Reverse = false;\n\n\tAlpha += InDeltaTime * (Reverse ? -1 : 1) * AnimationSpeed;\n\n\tif (Alpha >= MaximumAlpha) {\n\t\tAlpha = MaximumAlpha;\n\t\tReverse = true;\n\t}\n\telse if (Alpha <= MinimumAlpha) {\n\t\tAlpha = MinimumAlpha;\n\t\tReverse = false;\n\t}\n\n\tLoadingCompleteText->SetColorAndOpacity(FLinearColor(1.0f, 1.0f, 1.0f, Alpha));\n\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 40.371527797400994}]}
{"instance_id": "7420af124c78", "generation_result": [{"code": "bool FRaceAwaiter::await_ready(){\n\t\tbool result = false;\n\tmutex.lock();\n\tif (index != -1) {\n\t\tresult = true;\n\t}\n\tmutex.unlock();\n\treturn result;\n}", "CodeBleu_score": 44.54236779927302}, {"code": "bool FRaceAwaiter::await_ready(){\n\t\tstd::unique_lock<std::mutex> lock(data->mutex);\n\tif (data->index != -1) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 39.99943255528289}, {"code": "bool FRaceAwaiter::await_ready(){\n\t\tstd::lock_guard<std::mutex> lock(data->mutex);\n\tif (data->index != -1) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 39.93940115250314}]}
{"instance_id": "fab9fe81573a", "generation_result": [{"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tif (bCleanup) {\n\t\tFPathFindingQuery* Query = (FPathFindingQuery*)State;\n\t\tif (Query->RequestID.IsValid()) {\n\t\t\tUNavigationSystemV1* NavSys = FNavigationSystem::GetCurrent<UNavigationSystemV1>(Query->Controller->GetWorld());\n\t\t\tNavSys->AbortAsyncRequest(Query->RequestID);\n\t\t\tdelete Query;\n\t\t}\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 30.977101195671892}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tif (State == nullptr) {\n\t\treturn false;\n\t}\n\n\tFPathFindingQuery* Query = (FPathFindingQuery*)State;\n\tif (Query->RequestID.IsValid()) {\n\t\tif (bCleanup) {\n\t\t\tQuery->QueryState = EPathFindingQueryState::Aborted;\n\t\t\tQuery->NavMeshQuery->AbortQuery(Query->RequestID);\n\t\t\tdelete Query;\n\t\t}\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 29.189296863052505}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t    if (!State) {\n        return false;\n    }\n\n    FPathFollowingResult* PathResult = static_cast<FPathFollowingResult*>(State);\n    if (PathResult->IsSuccessful() || !bCleanup) {\n        return true;\n    }\n\n    UNavigationSystemV1* NavSys = UNavigationSystemV1::GetCurrent(PathResult->GetOwner());\n    if (PathResult->MoveId.IsSet() && NavSys) {\n        NavSys->AbortMove(*PathResult, FPathFollowingResultFlags::ForcedScript | FPathFollowingResultFlags::NewRequest);\n    }\n\n    delete PathResult;\n    return false;\n}", "CodeBleu_score": 37.39790048456449}]}
{"instance_id": "0656af2cb3eb", "generation_result": [{"code": "void AudioListener2D::_notification(int p_what){\n\t\n\tswitch (p_what) {\n\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\n\t\t\tif (get_tree()->get_edited_scene_root() != this && AudioServer::get_singleton()->is_listener_enabled(listener_id)) {\n\t\t\t\tmake_current();\n\t\t\t}\n\t\t} break;\n\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\n\t\t\tif (get_tree()->get_edited_scene_root() != this && is_current()) {\n\t\t\t\tclear_current();\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 50.13163241384577}, {"code": "void AudioListener2D::_notification(int p_what){\n\t\n\tif (p_what == NOTIFICATION_ENTER_TREE) {\n\n\t\tif (get_tree()->get_edited_scene_root() != this) {\n\n\t\t\tif (is_current()) {\n\t\t\t\tmake_current();\n\t\t\t}\n\t\t}\n\t}\n\n\tif (p_what == NOTIFICATION_EXIT_TREE) {\n\n\t\tif (get_tree()->get_edited_scene_root() != this) {\n\n\t\t\tif (is_current()) {\n\t\t\t\tclear_current();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 47.73771376104183}, {"code": "void AudioListener2D::_notification(int p_what){\n\t\n\tswitch (p_what) {\n\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\n\t\t\tset_current(is_inside_tree() && (!get_tree()->is_editor_hint() || get_tree()->is_node_being_edited(this)));\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\n\t\t\tif (!get_tree()->is_editor_hint() || get_tree()->is_node_being_edited(this))\n\t\t\t\tset_current(false);\n\t\t} break;\n\t}\n}", "CodeBleu_score": 53.26621894056247}]}
{"instance_id": "9aadd2c91e67", "generation_result": [{"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\n\tERR_FAIL_COND(active);\n\n\tint todo = p_frames;\n\twhile (todo) {\n\n\t\tint to_mix = MIN(todo, buffer_frames);\n\n\t\tlock();\n\t\tAudioFrame *src = ring_buffer->data;\n\t\tfor (int i=0;i<to_mix;i++) {\n\t\t\tp_buffer[i]=src[i].l;\n\t\t\tp_buffer[i+to_mix]=src[i].r;\n\t\t}\n\n\t\tring_buffer->read_advance(to_mix);\n\t\tunlock();\n\n\t\ttodo-=to_mix;\n\t\tp_buffer+=to_mix*2;\n\t}\n\n}", "CodeBleu_score": 46.077556846608545}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\n\taudio_server_process(p_frames, p_buffer);\n}", "CodeBleu_score": 8.932982755483321}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\n\taudio_server_process(p_frames, p_buffer);\n}", "CodeBleu_score": 8.932982755483321}]}
{"instance_id": "56df08c77b69", "generation_result": [{"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\n\tif (get_space_override_mode() != SPACE_OVERRIDE_DISABLED) {\n\t\tr_gravity = Vector2();\n\t\treturn;\n\t}\n\n\tswitch (get_gravity_mode()) {\n\t\tcase GRAVITY_MODE_POINT: {\n\t\t\tVector2 diff = p_position - get_gravity_vector();\n\t\t\tfloat dist_sq = diff.length_squared();\n\t\t\tif (dist_sq == 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfloat dist_mul = 1.0f / dist_sq;\n\t\t\tif (dist_sq < get_gravity_distance_scale() * get_gravity_distance_scale()) {\n\t\t\t\tdist_mul *= dist_sq;\n\t\t\t}\n\t\t\tr_gravity += diff.normalized() * get_gravity() * dist_mul;\n\t\t} break;\n\t\tcase GRAVITY_MODE_VECTOR: {\n\t\t\tr_gravity += get_gravity_vector() * get_gravity();\n\t\t} break;\n\t\tcase GRAVITY_MODE_LINEAR: {\n\t\t\tr_gravity += get_gravity_vector() * get_gravity();\n\t\t} break;\n\t}\n}", "CodeBleu_score": 51.16948104645158}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\n\tif (is_gravity_point()) {\n\t\tVector2 diff = p_position - get_gravity_vector();\n\t\tfloat dist = diff.length();\n\t\tif (dist > 0) {\n\t\t\tfloat g = get_gravity();\n\t\t\tr_gravity += diff * g / (dist * dist);\n\t\t}\n\t} else {\n\t\tr_gravity += get_gravity_vector() * get_gravity();\n\t}\n}", "CodeBleu_score": 40.481609354635964}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\n\tif (is_gravity_point()) {\n\t\tVector2 diff = p_position - get_gravity_vector();\n\t\tr_gravity = diff.normalized() * get_gravity_distance_scale();\n\t} else {\n\t\tr_gravity = get_gravity_vector();\n\t}\n\n\tr_gravity *= get_gravity_strength();\n}", "CodeBleu_score": 30.696489626746736}]}
{"instance_id": "f8c60f8d0caa", "generation_result": [{"code": "void GodotBody2D::wakeup_neighbours(){\n\t\n\n}", "CodeBleu_score": 1.5759908941150158}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\t\n}", "CodeBleu_score": 1.5759908941150158}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\t\n\n}", "CodeBleu_score": 1.5759908941150158}]}
{"instance_id": "0c6f6c00da9a", "generation_result": [{"code": "void GodotArea3D::_queue_monitor_update() {\n\t\n\tERR_FAIL_COND(!get_space());\n\n\tif (monitor_query_list.in_list()) {\n\n\t\treturn;\n\t}\n\n\tget_space()->area_add_to_monitor_query_list(&monitor_query_list);\n}", "CodeBleu_score": 62.21752518398949}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\t\n\tif (!get_space())\n\t\treturn;\n\n\tERR_FAIL_COND(!monitor_query_list.in_list());\n\n\tget_space()->area_add_to_monitor_query(this, get_global_transform().get_origin());\n}", "CodeBleu_score": 40.708737423059475}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\t\n    if (!get_space())\n        return;\n\n    ERR_FAIL_COND(!monitor_query_list.in_list());\n\n    get_space()->area_add_to_monitor_query(this, monitor_query_list.prev());\n}", "CodeBleu_score": 55.77989674730476}]}
{"instance_id": "efc39df0e3a3", "generation_result": [{"code": "void GodotBody3D::_update_transform_dependent(){\n\t\n}", "CodeBleu_score": 2.283015242142766}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\t\tERR_FAIL_COND_MSG(get_space() == nullptr, \"The body must be added to a space before calling this method.\");\n\n\t// Update center of mass.\n\treal_t mass = get_mass();\n\n\tVector3 center_of_mass;\n\n\tif (mass == 0) {\n\t\tcenter_of_mass = Vector3();\n\t} else {\n\t\tcenter_of_mass = get_center_of_mass();\n\t}\n\n\tcenter_of_mass = get_transform().basis.xform(center_of_mass);\n\n\t// Update inertia.\n\tBasis inertia_tensor_body_space = get_inertia_tensor();\n\n\tif (mass != 0) {\n\t\tinertia_tensor_body_space *= mass;\n\t}\n\n\tBasis inertia_tensor = get_transform().basis.transposed() * inertia_tensor_body_space * get_transform().basis;\n\n\treal_t inertia_tensor_determinant = inertia_tensor.determinant();\n\n\tif (inertia_tensor_determinant == 0) {\n\t\tinertia_tensor = Basis();\n\t} else {\n\t\tinertia_tensor = inertia_tensor.inverse().transposed();\n\t}\n\n\t// Update principal inertia axes.\n\tVector3 principal_inertia_axes[3];\n\n\tprincipal_inertia_axes[0] = Vector3(inertia_tensor[0][0], inertia_tensor[1][0], inertia_tensor[2][0]);\n\tprincipal_inertia_axes[1] = Vector3(inertia_tensor[0][1], inertia_tensor[1][1], inertia_tensor[2][1]);\n\tprincipal_inertia_axes[2] = Vector3(inertia_tensor[0][2], inertia_tensor[1][2], inertia_tensor[2][2]);\n\n\t// Update inertia tensor.\n\tset_inertia_tensor(inertia_tensor);\n\n\t// Update center", "CodeBleu_score": 46.29249518343497}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\t\tVector3 center_of_mass;\n\tBasis principal_inertia_axes;\n\tVector3 inertia;\n\t\n\tget_center_of_mass(center_of_mass);\n\tget_principal_inertia_axes(principal_inertia_axes);\n\tget_inertia(inertia);\n\t\n\tcenter_of_mass = get_transform().basis.xform(center_of_mass);\n\tprincipal_inertia_axes = get_transform().basis * principal_inertia_axes;\n\tinertia = principal_inertia_axes.transpose().basis_xform(inertia);\n\t\n\tset_center_of_mass(center_of_mass);\n\tset_principal_inertia_axes(principal_inertia_axes);\n\tset_inertia(inertia);\n}", "CodeBleu_score": 47.9073591641565}]}
{"instance_id": "aebafb4094a1", "generation_result": [{"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\n\tif (p_update_mix_time) {\n\t\tmix_time += p_frames / mix_rate;\n\t}\n\n\tAudioServer *audio_server = AudioServer::get_singleton();\n\n\tif (!audio_server) {\n\t\treturn; // No audio server, no need to process.\n\t}\n\n\taudio_server->process(p_frames, p_buffer);\n}", "CodeBleu_score": 56.817671139238946}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\n\n\tAudioServer *server = AudioServer::get_singleton();\n\tERR_FAIL_COND(!server);\n\n\tAudioDriver *driver = server->get_driver();\n\n\tERR_FAIL_COND(!driver);\n\n\tif (p_update_mix_time) {\n\t\tserver->mix_time += p_frames / server->get_mix_rate();\n\t}\n\n\tdriver->process(p_frames, p_buffer);\n}", "CodeBleu_score": 51.5853049285755}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\n\tif (p_update_mix_time) {\n\t\tmix_time += p_frames / mix_rate;\n\t}\n\n\tAudioServer *as = AudioServer::get_singleton();\n\n\tERR_FAIL_COND(!as);\n\n\tas->process(p_frames, p_buffer);\n}", "CodeBleu_score": 60.09156384512402}]}
{"instance_id": "160bb23e8010", "generation_result": [{"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\n    feeds.erase(p_feed);\n\n    RenderingServer::get_singleton()->camera_feed_set_active(p_feed->get_id(), false);\n\n    emit_signal(SNAME(\"remove_feed\"), p_feed->get_id());\n}", "CodeBleu_score": 26.403810902719254}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\n\tERR_FAIL_COND(!p_feed.is_valid());\n\n\tdata.camera_feed_remove(p_feed);\n\n\tp_feed->emit_signal(SNAME(\"removed\"));\n}", "CodeBleu_score": 19.38948345415482}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\tERR_FAIL_NULL(p_feed);\n\n\tdata.camera_feeds.erase(p_feed);\n\n\tRenderingServer::get_singleton()->camera_feed_remove(p_feed->get_rid());\n\n\temit_signal(\"camera_feed_removed\", p_feed->get_name());\n}", "CodeBleu_score": 24.841556130944145}]}
{"instance_id": "bef3cf110c45", "generation_result": [{"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t    EaseRateAction* pRet = new EaseRateAction();\n    if (pRet && pRet->initWithAction(action, rate)) {\n        pRet->autorelease();\n        return pRet;\n    }\n    CC_SAFE_DELETE(pRet);\n    return nullptr;\n}", "CodeBleu_score": 52.38952337332918}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t    EaseRateAction* ret = new EaseRateAction();\n    if (ret && ret->initWithAction(action, rate)) {\n        ret->autorelease();\n        return ret;\n    }\n    CC_SAFE_DELETE(ret);\n    return nullptr;\n}", "CodeBleu_score": 52.11305525899165}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t    EaseRateAction* ret = new EaseRateAction();\n\n    if (ret && ret->initWithAction(action, rate)) {\n        ret->autorelease();\n    } else {\n        CC_SAFE_DELETE(ret);\n    }\n\n    return ret;\n}", "CodeBleu_score": 47.196571074387876}]}
{"instance_id": "97fc6f86ad54", "generation_result": [{"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t    if (node->getName() == childName) {\n        return node;\n    }\n    for (auto child : node->getChildren()) {\n        Node* childNode = findChildByNameRecursively(child, childName);\n        if (childNode != nullptr) {\n            return childNode;\n        }\n    }\n    return nullptr;\n}", "CodeBleu_score": 56.04919794724874}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t    if (node->getName() == childName) {\n        return node;\n    }\n\n    for (auto child : node->getChildren()) {\n        Node* found = findChildByNameRecursively(child, childName);\n        if (found) {\n            return found;\n        }\n    }\n\n    return nullptr;\n}", "CodeBleu_score": 54.866928970431836}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t    if (node->getName() == childName)\n        return node;\n    auto children = node->getChildren();\n    for (auto child : children) {\n        auto childNode = findChildByNameRecursively(child, childName);\n        if (childNode)\n            return childNode;\n    }\n    return nullptr;\n}", "CodeBleu_score": 62.80630036381327}]}
{"instance_id": "5fcbe1fedcd2", "generation_result": [{"code": "void Animate3D::removeFromMap(){\n\t    if (_target) {\n        if (_runningAnimations) {\n            _runningAnimations->erase(_name);\n        }\n        if (_fadingInAnimations) {\n            _fadingInAnimations->erase(_name);\n        }\n        if (_fadingOutAnimations) {\n            _fadingOutAnimations->erase(_name);\n        }\n    }\n}", "CodeBleu_score": 32.16213338962272}, {"code": "void Animate3D::removeFromMap(){\n\t\n    if (m_pTarget) {\n        if (m_pTarget->getNumberOfRunningActions() > 0) {\n            m_pTarget->stopAction(this);\n        }\n    }\n}", "CodeBleu_score": 13.028748733447346}, {"code": "void Animate3D::removeFromMap(){\n\t    auto target = getTarget();\n    if (target) {\n        if (_runningAnimations) {\n            target->getRunningAnimations().erase(this);\n        }\n        else if (_fadingIn) {\n            target->getFadingInAnimations().erase(this);\n        }\n        else if (_fadingOut) {\n            target->getFadingOutAnimations().erase(this);\n        }\n    }\n}", "CodeBleu_score": 24.237097880754106}]}
{"instance_id": "db8d394f7bc4", "generation_result": [{"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t    // Create the key from the file name and animation name\n    std::string key = fileName + \"#\" + animationName;\n\n    // Check if the animation is already in the cache\n    auto it = _animationCache.find(key);\n    if (it != _animationCache.end()) {\n        return it->second;\n    }\n\n    // Create a new Animation3D object\n    Animation3D* animation = new (std::nothrow) Animation3D();\n    if (animation && animation->initWithFile(fileName, animationName)) {\n        // Store the animation in the cache\n        _animationCache[key] = animation;\n        return animation;\n    }\n\n    // If initialization fails, delete the new Animation3D object\n    delete animation;\n    return nullptr;\n}", "CodeBleu_score": 61.22077516504907}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t    // Create an unique key for the animation\n    std::string key = fileName + \"#\" + animationName;\n    // Search the cache for an existing animation\n    auto it = _animationCache.find(key);\n    if (it != _animationCache.end()) {\n        // Found, return the cached animation\n        return it->second;\n    }\n\n    // Not found, create a new animation\n    Animation3D* animation = new (std::nothrow) Animation3D();\n    if (animation->initWithFile(fileName, animationName)) {\n        // Cache the animation\n        _animationCache.emplace(key, animation);\n        return animation;\n    }\n\n    // Initialization failed, delete the animation\n    delete animation;\n    return nullptr;\n}", "CodeBleu_score": 59.85633123177138}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t    if (fileName.empty() || animationName.empty()) {\n        return nullptr;\n    }\n\n    // Generate a unique key based on the file name and animation name\n    std::string key = fileName + \"#\" + animationName;\n\n    // Check if the Animation3D object already exists in the cache\n    auto it = _animationCache.find(key);\n    if (it != _animationCache.end()) {\n        // If found, return the existing object\n        return it->second;\n    }\n\n    // If not found, create a new Animation3D object and initialize it with the given file and animation name\n    Animation3D* animation = new Animation3D();\n    if (animation->initWithFile(fileName, animationName)) {\n        // If initialization is successful, add the new object to the cache and return it\n        _animationCache[key] = animation;\n        return animation;\n    }\n\n    // If initialization fails, delete the new object and return nullptr\n    delete animation;\n    return nullptr;\n}", "CodeBleu_score": 58.20049265712524}]}
{"instance_id": "cdf28d98d3ff", "generation_result": [{"code": "void Animation3DCache::removeUnusedAnimation(){\n\t    for (auto it = _animations.begin(); it != _animations.end();) {\n        if (it->second->getReferenceCount() == 1) {\n            it = _animations.erase(it);\n        } else {\n            ++it;\n        }\n    }\n}", "CodeBleu_score": 61.86083497364193}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\t\n    for (auto iter = _animations.begin(); iter != _animations.end();) {\n        auto animation = iter->second;\n        if (animation->getReferenceCount() == 1) {\n            animation->release();\n            _animations.erase(iter++);\n        } else {\n            ++iter;\n        }\n    }\n}", "CodeBleu_score": 54.800699737304484}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\t    for (auto it = _animations.cbegin(); it != _animations.cend();) {\n        auto animation = it->second;\n        if (animation && animation->getReferenceCount() == 1) {\n            // Remove unused animation\n            it = _animations.erase(it);\n        } else {\n            ++it;\n        }\n    }\n}", "CodeBleu_score": 58.87227351935182}]}
{"instance_id": "de7926871eb8", "generation_result": [{"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t    BillBoard *billboard = new (std::nothrow) BillBoard();\n    if (billboard && billboard->initWithTexture(texture, mode)) {\n        billboard->autorelease();\n        return billboard;\n    }\n\n    CC_SAFE_DELETE(billboard);\n    return nullptr;\n}", "CodeBleu_score": 80.24537907297173}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t    BillBoard *billboard = new (std::nothrow) BillBoard();\n    if (billboard && billboard->initWithTexture(texture, mode))\n    {\n        billboard->autorelease();\n        return billboard;\n    }\n    \n    CC_SAFE_DELETE(billboard);\n    return nullptr;\n}", "CodeBleu_score": 80.7822901369182}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t    BillBoard *billboard = new (std::nothrow) BillBoard();\n    if (billboard && billboard->initWithTexture(texture, mode)) {\n        billboard->autorelease();\n        return billboard;\n    }\n    CC_SAFE_DELETE(billboard);\n    return nullptr;\n}", "CodeBleu_score": 80.24537907297173}]}
{"instance_id": "eef1c2206d68", "generation_result": [{"code": "bool Bundle3D::load(const std::string& path){\n\t    if (path.empty() || _path == path) {\n        return false;\n    }\n\n    _path = path;\n\n    auto ext = FileUtils::getInstance()->getFileExtension(_path);\n    if (ext == \".c3t\") {\n        return loadJson();\n    }\n    else if (ext == \".c3b\") {\n        return loadBinary();\n    }\n\n    CCLOGWARN(\"Unsupported file extension for bundle: %s\", ext.c_str());\n    _path.clear();\n    return false;\n}", "CodeBleu_score": 43.2150738528145}, {"code": "bool Bundle3D::load(const std::string& path){\n\t    if (path.empty()) {\n        return false;\n    }\n\n    if (_path == path) {\n        return true;\n    }\n\n    _path = path;\n    _nodes.clear();\n    _animations.clear();\n    _skins.clear();\n    _materials.clear();\n    _cameras.clear();\n    _lights.clear();\n\n    auto ext = FileUtils::getInstance()->getFileExtension(_path);\n    if (ext == \".c3t\") {\n        return loadJson();\n    } else if (ext == \".c3b\") {\n        return loadBinary();\n    } else {\n        CCLOGWARN(\"Unsupported file extension: %s\", ext.c_str());\n        _path.clear();\n        return false;\n    }\n}", "CodeBleu_score": 50.275245375130815}, {"code": "bool Bundle3D::load(const std::string& path){\n\t    if (path.empty() || _path == path) {\n        return false;\n    }\n\n    _path = path;\n    std::string extension = FileUtils::getInstance()->getFileExtension(_path);\n    if (extension == \".c3t\") {\n        return loadJson();\n    }\n    else if (extension == \".c3b\") {\n        return loadBinary();\n    }\n    else {\n        CCLOGWARN(\"3D bundle format '%s' not recognized for file: %s\", extension.c_str(), path.c_str());\n    }\n\n    _path.clear();\n    return false;\n}", "CodeBleu_score": 42.474621687040155}]}
{"instance_id": "37b6acea681e", "generation_result": [{"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t    if (!skindata) {\n        return false;\n    }\n\n    skindata->reset();\n\n    // Load skin data binary\n    return loadSkinDataBinary(skindata);\n}", "CodeBleu_score": 59.01083511006484}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t    // Reset the skin data\n    skindata->reset();\n\n    // Load the skin data\n    // TODO: Load skin data from file\n\n    return true;\n}", "CodeBleu_score": 26.06466209220014}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t    // Reset the skin data\n    skindata->reset();\n\n    // Load skin data\n    //loadSkinDataBinary(skindata);\n    loadSkinDataJson(skindata);\n\n    return true;\n}", "CodeBleu_score": 41.171270133889166}]}
{"instance_id": "97449825e4ef", "generation_result": [{"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t    size_t nbytes = size * nmemb;\n    size_t cur_bytes = 0;\n    AudioDecoder* decoder = static_cast<AudioDecoder*>(datasource);\n    if (decoder->remaining_data_size_ > 0) {\n        cur_bytes = std::min(nbytes, decoder->remaining_data_size_);\n        memcpy(ptr, decoder->current_position_, cur_bytes);\n        decoder->current_position_ += cur_bytes;\n        decoder->remaining_data_size_ -= cur_bytes;\n    }\n    return cur_bytes;\n}", "CodeBleu_score": 42.29028152711154}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t    AudioDecoder* decoder = static_cast<AudioDecoder*>(datasource);\n    size_t bytesToRead = decoder->dataSize - decoder->currentPos;\n    if (bytesToRead > 0) {\n        size_t bytesToCopy = bytesToRead > size * nmemb ? size * nmemb : bytesToRead;\n        memcpy(ptr, decoder->data + decoder->currentPos, bytesToCopy);\n        decoder->currentPos += bytesToCopy;\n        return bytesToCopy;\n    } else {\n        return 0;\n    }\n}", "CodeBleu_score": 47.24613891657855}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t    size_t nb_read = 0;\n    if (size > 0 && nmemb > 0) {\n        size_t buf_size = size * nmemb;\n        AudioDecoder* decoder = reinterpret_cast<AudioDecoder*>(datasource);\n        size_t data_size = decoder->data_size;\n        size_t read_size = decoder->data_offset < data_size ? data_size - decoder->data_offset : 0;\n        read_size = read_size > buf_size ? buf_size : read_size;\n        if (read_size > 0) {\n            memcpy(ptr, decoder->data + decoder->data_offset, read_size);\n            decoder->data_offset += read_size;\n            nb_read = read_size;\n        }\n    }\n    return nb_read;\n}", "CodeBleu_score": 39.512481419668475}]}
{"instance_id": "0f4db164ba5d", "generation_result": [{"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t    _pcmBuffer = std::make_shared<std::vector<uint8_t>>();\n    _pcmBuffer->reserve(4096);\n}", "CodeBleu_score": 46.20981144348684}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t    _result.pcmBuffer = std::make_shared<std::vector<char>>();\n    _result.pcmBuffer->reserve(4096);\n}", "CodeBleu_score": 48.72432162757106}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t    _pcmBuffer = std::make_shared<std::vector<uint8_t>>();\n    _pcmBuffer->reserve(4096);\n}", "CodeBleu_score": 46.20981144348684}]}
{"instance_id": "0f88663615c6", "generation_result": [{"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t    static std::mutex mutex;\n    std::lock_guard<std::mutex> lock(mutex);\n    auto it = cocos2d::network::DownloaderAndroid::_map.find(id);\n    if (it == cocos2d::network::DownloaderAndroid::_map.end()) {\n        return nullptr;\n    }\n    return it->second;\n}", "CodeBleu_score": 57.66198141249894}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t    static std::map<int, cocos2d::network::DownloaderAndroid*> s_downloaderAndroidMap;\n    static std::mutex s_mutex;\n    std::lock_guard<std::mutex> lock(s_mutex);\n    auto iter = s_downloaderAndroidMap.find(id);\n    if (iter == s_downloaderAndroidMap.end()) {\n        return nullptr;\n    }\n    return iter->second;\n}", "CodeBleu_score": 64.4859452167535}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t    static std::mutex s_mutex;\n    std::lock_guard<std::mutex> lock(s_mutex);\n    auto it = cocos2d::network::DownloaderAndroid::s_downloaderMap.find(id);\n    if (it != cocos2d::network::DownloaderAndroid::s_downloaderMap.end()) {\n        return it->second;\n    }\n    return nullptr;\n}", "CodeBleu_score": 58.703787095009275}]}
{"instance_id": "a5aafaaa944c", "generation_result": [{"code": "function M.playMusic(filename, isLoop)\n\t\tlocal loop = false\n\tif isLoop then\n\t\tloop = true\n\tend\n\n\tSimpleAudioEngine:sharedEngine():playBackgroundMusic(filename, loop)", "CodeBleu_score": 43.147722152998554}, {"code": "function M.playMusic(filename, isLoop)\n\t    local loop = isLoop or false\n    audio.playMusic(filename, loop)", "CodeBleu_score": 33.04956416666659}, {"code": "function M.playMusic(filename, isLoop)\n\t    local loop = isLoop or false\n    audio.playMusic(filename, loop)", "CodeBleu_score": 33.04956416666659}]}
{"instance_id": "16f2ad4bb4e8", "generation_result": [{"code": "function ccs.TriggerObj:detect()\n\t\tlocal result = true\n\tif self.enabled then\n\t\tresult = false\n\t\tfor _, cond in ipairs(self.conditions) do\n\t\t\tresult = result or cond:detect()\n\t\tend\n\tend\n\treturn result", "CodeBleu_score": 28.251068339372782}, {"code": "function ccs.TriggerObj:detect()\n\t    if not self.enabled then\n        return true\n    end\n    if self.conditions == nil then\n        return true\n    end\n    for _, condition in pairs(self.conditions) do\n        if not condition:detect() then\n            return false\n        end\n    end\n    return true", "CodeBleu_score": 33.85343823602476}, {"code": "function ccs.TriggerObj:detect()\n\t    if not self.enabled then\n        return true\n    end\n    if self.conditions == nil then\n        return true\n    end\n    local result = true\n    for _, condition in ipairs(self.conditions) do\n        result = result and condition:detect()\n    end\n    return result", "CodeBleu_score": 42.511284263931906}]}
{"instance_id": "e73b10418cb6", "generation_result": [{"code": "function ccs.TriggerObj:removeAll()\n\tend\n\n", "CodeBleu_score": 4.959221278886332}, {"code": "function ccs.TriggerObj:removeAll()\n\t    for i = 1, #self.conditions do\n        local condition = self.conditions[i]\n        if condition.removeAll then\n            condition:removeAll()\n        end\n    end\n    for i = 1, #self.actions do\n        local action = self.actions[i]\n        if action.removeAll then\n            action:removeAll()\n        end\n    end\n    self.conditions = {}\n    self.actions = {}", "CodeBleu_score": 50.43773235869339}, {"code": "function ccs.TriggerObj:removeAll()\n\t\t--[[\n\tThis function, removeAll, clears all conditions and actions of a TriggerObj.", "CodeBleu_score": 8.529140003522285}]}
{"instance_id": "d5a1333d794d", "generation_result": [{"code": "function BasicCollider:hurtEffect(target)\n\t\tlocal effect = self.hurtAnimation:clone()\n\teffect.billboard = true\n\teffect.xScale = 0.01\n\teffect.yScale = 0.01\n\teffect.x = target.x\n\teffect.y = target.y\n\teffect.z = target.z\n\teffect.cameraMask = cameraMask\n\teffect:play()\n\teffect:addEventListener(\"complete\", function()\n\t\teffect:removeSelf()\n\tend)\n\ttarget:addChild(effect)", "CodeBleu_score": 39.942912789804176}, {"code": "function BasicCollider:hurtEffect(target)\n\t\tlocal effect = self.hurtAnimation:clone()\n\teffect.scale = {x=0.75, y=0.75, z=0.75}\n\teffect.position = target.position\n\teffect.cameraMask = 2\n\teffect:runAnimation(\"hurt\")\n\teffect.onComplete = function()\n\t\teffect:removeSelf()\n\tend\n\ttarget:addChild(effect)", "CodeBleu_score": 33.43438861213471}, {"code": "function BasicCollider:hurtEffect(target)\n\t\tlocal effect = BasicCollider.hurtAnimation:clone()\n\tlocal billboard = Billboard.new()\n\tbillboard.size = Vector2.new(100, 100)\n\tbillboard.addChild(effect)\n\tbillboard.scale = Vector3.new(0.01, 0.01, 0.01)\n\tbillboard.position = Vector3.new(0, 0, 0)\n\tbillboard.cameraMask = 1\n\teffect:play()\n\ttarget:addChild(billboard)\n\teffect:connect(\"animationEnd\", function()\n\t\tbillboard:remove()\n\tend)", "CodeBleu_score": 43.63182665221064}]}
{"instance_id": "f478d7e70ea6", "generation_result": [{"code": "function MageNormalAttack:onTimeOut()\n\t    self.particleSystem:stop()\n    self.particleSystem2:stop()\n    self.particleSystem3:stop()\n    self.particleSystem4:stop()\n    self.particleSystem5:stop()\n    self.particleSystem6:stop()\n    self.particleSystem7:stop()\n    self.particleSystem8:stop()\n    self.particleSystem9:stop()\n    self.particleSystem10:stop()\n    self.particleSystem11:stop()\n    self.particleSystem12:stop()\n    self.particleSystem13:stop()\n    self.particleSystem14:stop()\n    self.particleSystem15:stop()\n    self.particleSystem16:stop()\n    self.particleSystem17:stop()\n    self.particleSystem18:stop()\n    self.particleSystem19:stop()\n    self.particleSystem20:stop()\n    self.particleSystem21:stop()\n    self.particleSystem22:stop()\n    self.particleSystem23:stop()\n    self.particleSystem24:stop()\n    self.particleSystem25:stop()\n    self.particleSystem26:stop()\n    self.particleSystem27:stop()\n    self.particleSystem28:stop()\n    self.particleSystem29:stop()\n    self.particleSystem30:stop()\n    self.particleSystem31:stop()\n    self.particleSystem32:stop()\n    self.particleSystem33:stop()\n    self.particleSystem34:stop()\n    self.particleSystem35:stop()\n    self.particleSystem36:stop()\n    self.particleSystem37:stop()\n    self.particleSystem38:stop()\n    self.particleSystem39:stop()\n    self.particleSystem40:stop()\n    self.particleSystem41:stop()\n    self.particleSystem42:stop()\n    self.particleSystem43:stop()\n    self.particleSystem44:stop()\n    self.particleSystem45:stop()\n    self.particleSystem46:stop()\n    self.particleSystem47:stop()\n    self.particleSystem", "CodeBleu_score": 22.413899792134295}, {"code": "function MageNormalAttack:onTimeOut()\n\t\tself.particle_system:stop()\n\tself.particle_system2:stop()\n\tself.timer:stop()\n\tself.timer = nil\n\tself.timer_particle = nil\n\tself.timer_particle2 = nil\n\tself.timer_particle3 = nil\n\tself.timer_particle4 = nil\n\tself.timer_particle5 = nil\n\tself.timer_particle6 = nil\n\tself.timer_particle7 = nil\n\tself.timer_particle8 = nil\n\tself.timer_particle9 = nil\n\tself.timer_particle10 = nil\n\tself.timer_particle11 = nil\n\tself.timer_particle12 = nil\n\tself.timer_particle13 = nil\n\tself.timer_particle14 = nil\n\tself.timer_particle15 = nil\n\tself.timer_particle16 = nil\n\tself.timer_particle17 = nil\n\tself.timer_particle18 = nil\n\tself.timer_particle19 = nil\n\tself.timer_particle20 = nil\n\tself.timer_particle21 = nil\n\tself.timer_particle22 = nil\n\tself.timer_particle23 = nil\n\tself.timer_particle24 = nil\n\tself.timer_particle25 = nil\n\tself.timer_particle26 = nil\n\tself.timer_particle27 = nil\n\tself.timer_particle28 = nil\n\tself.timer_particle29 = nil\n\tself.timer_particle30 = nil\n\tself.timer_particle31 = nil\n\tself.timer_particle32 = nil\n\tself.timer_particle33 = nil\n\tself.timer_particle34 = nil\n\tself.timer_particle35 = nil\n\tself.timer_particle36 = nil\n\tself.timer_particle37 = nil\n\tself.timer_particle38 = nil\n\tself.timer_particle39 = nil\n\tself.timer_particle40 = nil\n\tself.timer_particle41 = nil\n\tself.timer_particle42 = nil\n\tself.timer_particle43 = nil\n\tself.timer_particle44 = nil\n\tself", "CodeBleu_score": 21.079310432599147}, {"code": "function MageNormalAttack:onTimeOut()\n\t\tself.particleSystem:stop()\n\tself.particleSystem2:stop()\n\tlocal seq = cc.Sequence:create(\n\t\tcc.DelayTime:create(0.1),\n\t\tcc.CallFunc:create(function()\n\t\t\tself:removeFromParent()\n\t\tend)\n\t)\n\tself:runAction(seq)\n\tlocal particleSystem = cc.ParticleSystemQuad:create(\"particles/mage_normal_attack.plist\")\n\tparticleSystem:setPosition(self:getContentSize().width/2,self:getContentSize().height/2)\n\tself:addChild(particleSystem)\n\tparticleSystem:setAutoRemoveOnFinish(true)\n\tself.sprite:setTexture(\"images/mage_normal_attack.png\")\n\tself.sprite:runAction(cc.FadeOut:create(0.1))\n\tself.sprite:setScale(0.5)", "CodeBleu_score": 47.24999647942963}]}
{"instance_id": "d735c4ea6358", "generation_result": [{"code": "function BattlefieldUI:heroDead(hero)\n\t    if hero == \"Knight\" then\n        self.knightDead = true\n        self.knightFrame.image:setShader(self.greyShader)\n        self.knightAngerFullSignal.isVisible = false\n        self.knightAngerClone.isVisible = false\n    elseif hero == \"Mage\" then\n        self.mageDead = true\n        self.mageFrame.image:setShader(self.greyShader)\n        self.mageAngerFullSignal.isVisible = false\n        self.mageAngerClone.isVisible = false\n    elseif hero == \"Archer\" then\n        self.archerDead = true\n        self.archerFrame.image:setShader(self.greyShader)\n        self.archerAngerFullSignal.isVisible = false\n        self.archerAngerClone.isVisible = false\n    end", "CodeBleu_score": 38.6225382972903}, {"code": "function BattlefieldUI:heroDead(hero)\n\t    if hero.name == \"Knight\" then\n        self.knight_frame:setShader(self.grey_shader)\n        self.knight_image:setShader(self.grey_shader)\n        self.knight_anger_full:setVisible(false)\n        self.knight_anger_clone:setVisible(false)\n    elseif hero.name == \"Mage\" then\n        self.mage_frame:setShader(self.grey_shader)\n        self.mage_image:setShader(self.grey_shader)\n        self.mage_anger_full:setVisible(false)\n        self.mage_anger_clone:setVisible(false)\n    elseif hero.name == \"Archer\" then\n        self.archer_frame:setShader(self.grey_shader)\n        self.archer_image:setShader(self.grey_shader)\n        self.archer_anger_full:setVisible(false)\n        self.archer_anger_clone:setVisible(false)\n    end", "CodeBleu_score": 59.36331725090399}, {"code": "function BattlefieldUI:heroDead(hero)\n\t    local heroName = hero:getName()\n    local heroImage = self.heroes[heroName]:getChildByName(\"heroImage\")\n    local heroFrame = self.heroes[heroName]:getChildByName(\"heroFrame\")\n    local heroAngerFull = self.heroes[heroName]:getChildByName(\"heroAngerFull\")\n    local heroAngerClone = self.heroes[heroName]:getChildByName(\"heroAngerClone\")\n\n    heroImage:setShaderProgram(self.greyShader)\n    heroFrame:setShaderProgram(self.greyShader)\n    heroAngerFull:setVisible(false)\n    heroAngerClone:setVisible(false)", "CodeBleu_score": 34.119764141929586}]}
{"instance_id": "009f167d3ab2", "generation_result": [{"code": "local function moveCamera(dt)\n\t    if specialCamera then\n        local position = camera:getPosition()\n        local target = specialTarget\n        local distance = position - target\n        local distanceLength = distance:length()\n        local speed = 10\n        local maxDistance = speed * dt\n        if distanceLength <= maxDistance then\n            camera:setPosition(target)\n            camera:lookAt(specialLookAt)\n            specialCamera = false\n        else\n            distance:normalize()\n            local newPosition = position - distance * maxDistance\n            camera:setPosition(newPosition)\n            camera:lookAt(specialLookAt)\n        end\n    end\n\n    if #heroes > 0 then\n        local position = camera:getPosition()\n        local target = getFocusPoint()\n        local distance = position - target\n        local distanceLength = distance:length()\n        local speed = 10\n        local maxDistance = speed * dt\n        if distanceLength <= maxDistance then\n            camera:setPosition(target)\n            camera:lookAt(getFocusPoint())\n        else\n            distance:normalize()\n            local newPosition = position - distance * maxDistance\n            camera:setPosition(newPosition)\n            camera:lookAt(getFocusPoint())\n        end\n    end", "CodeBleu_score": 36.97708679503127}, {"code": "local function moveCamera(dt)\n\t    local camera = getCamera()\n    if specialCamera then\n        local cameraPos = camera:getPosition()\n        local cameraTargetPos = specialCameraTarget\n        local cameraTargetLookAt = specialCameraLookAt\n        local cameraPosX = cameraPos.x\n        local cameraPosY = cameraPos.y\n        local cameraPosZ = cameraPos.z\n        local cameraTargetPosX = cameraTargetPos.x\n        local cameraTargetPosY = cameraTargetPos.y\n        local cameraTargetPosZ = cameraTargetPos.z\n        local cameraTargetLookAtX = cameraTargetLookAt.x\n        local cameraTargetLookAtY = cameraTargetLookAt.y\n        local cameraTargetLookAtZ = cameraTargetLookAt.z\n        local cameraPosX = cameraPosX + (cameraTargetPosX - cameraPosX) * dt * 5\n        local cameraPosY = cameraPosY + (cameraTargetPosY - cameraPosY) * dt * 5\n        local cameraPosZ = cameraPosZ + (cameraTargetPosZ - cameraPosZ) * dt * 5\n        camera:setPosition(cameraPosX, cameraPosY, cameraPosZ)\n        camera:lookAt(cameraTargetLookAtX, cameraTargetLookAtY, cameraTargetLookAtZ)\n    elseif #activeHeroes > 0 then\n        local cameraPos = camera:getPosition()\n        local cameraTargetPos = activeHeroes[1]:getFocusPoint()\n        local cameraTargetLookAt = activeHeroes[1]:getFocusPoint()\n        local cameraPosX = cameraPos.x\n        local cameraPosY = cameraPos.y\n        local cameraPosZ = cameraPos.z\n        local cameraTargetPosX = cameraTargetPos.x\n        local cameraTargetPosY = cameraTargetPos.y\n        local cameraTargetPosZ = cameraTargetPos.z\n        local cameraTargetLookAtX = cameraTargetLookAt.x\n        local cameraTargetLookAtY = cameraTargetLookAt.y\n        local cameraTargetLookAtZ = cameraTargetLookAt.z\n        local cameraPosX = cameraPosX + (cameraTargetPosX - cameraPosX) * dt * 5\n        local cameraPosY = cameraPosY + (camera", "CodeBleu_score": 39.251159971971816}, {"code": "local function moveCamera(dt)\n\t    if specialCamera then\n        local target = specialCamera.target\n        local cameraPos = specialCamera.camera:getPosition()\n        local cameraFocus = specialCamera.camera:getFocus()\n        local newCameraPos = cameraPos + (target - cameraPos) * dt * 5\n        specialCamera.camera:setPosition(newCameraPos)\n        specialCamera.camera:setFocus(target)\n    else\n        if #heroes > 0 then\n            local focus = {x = 0, y = 0}\n            for _, hero in ipairs(heroes) do\n                focus.x = focus.x + hero.x\n                focus.y = focus.y + hero.y\n            end\n            focus.x = focus.x / #heroes\n            focus.y = focus.y / #heroes\n            local cameraPos = camera:getPosition()\n            local newCameraPos = cameraPos + (focus - cameraPos) * dt * 5\n            camera:setPosition(newCameraPos)\n            camera:setFocus(focus)\n        end\n    end", "CodeBleu_score": 40.600898769844136}]}
{"instance_id": "f7f5e7fe1dc2", "generation_result": [{"code": "local function updateParticlePos()\n\t\tlocal heroes = HeroManager:getHeroes()\n\tfor i, hero in ipairs(heroes) do\n\t\tlocal node = hero:getParticleNode()\n\t\tif node then\n\t\t\tnode:setPosition(hero:getPosition())\n\t\tend\n\tend", "CodeBleu_score": 30.86533354708233}, {"code": "local function updateParticlePos()\n\t\tlocal heroMgr = HeroManager.getInstance()\n\tlocal heroes = heroMgr:getHeroes()\n\tfor _, hero in ipairs(heroes) do\n\t\tlocal particleNode = hero:getParticleNode()\n\t\tif particleNode then\n\t\t\tparticleNode:setPosition(hero:getPosition())\n\t\tend\n\tend", "CodeBleu_score": 38.0291799167499}, {"code": "local function updateParticlePos()\n\t    for _, hero in ipairs(HeroManager.getHeroes()) do\n        if hero.effectNode then\n            hero.effectNode:setPosition(hero:getPosition())\n        end\n    end", "CodeBleu_score": 27.818812142381088}]}
{"instance_id": "77829ef7341e", "generation_result": [{"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t    local hero = self.heroes[self.currentHero]\n    local race = hero:getRaceType()\n\n    if race == \"Knight\" then\n        audio.play(audio.knightSelect)\n    elseif race == \"Archer\" then\n        audio.play(audio.archerSelect)\n    elseif race == \"Mage\" then\n        audio.play(audio.mageSelect)\n    end", "CodeBleu_score": 44.8235352298183}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t    local hero = self:getChildByTag(1)\n    local race = hero:getRace()\n    if race == \"Knight\" then\n        audio.play(audio.knightSelect, {channel = 2})\n    elseif race == \"Archer\" then\n        audio.play(audio.archerSelect, {channel = 2})\n    elseif race == \"Mage\" then\n        audio.play(audio.mageSelect, {channel = 2})\n    end", "CodeBleu_score": 46.93087280326962}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t    local hero = self.heroes[self.currentHeroIndex]\n    local raceType = hero.raceType\n    if raceType == \"Knight\" then\n        audio.play(audio.knight_rotate, {channel = 1})\n    elseif raceType == \"Archer\" then\n        audio.play(audio.archer_rotate, {channel = 1})\n    elseif raceType == \"Mage\" then\n        audio.play(audio.mage_rotate, {channel = 1})\n    end", "CodeBleu_score": 42.92584951972945}]}
{"instance_id": "2b35fdb15a13", "generation_result": [{"code": "function GameMaster:AddHeros()\n\t\t-- Create the Knight character\n\tlocal Knight = Knight:new()\n\tKnight:setPosition(200, 300)\n\tKnight:setScale(1.5)\n\tKnight:setAnimation(\"idle\")\n\tKnight.isFacingRight = true\n\tKnight.isIdle = true\n\tKnight.isDead = false\n\tKnight.isAttacking = false\n\tKnight.isMoving = false\n\tKnight.isJumping = false\n\tKnight.isFalling = false\n\tKnight.isClimbing = false\n\tKnight.isDashing = false\n\tKnight.isOnGround = true\n\tKnight.isOnLadder = false\n\tKnight.isOnLedge = false\n\tKnight.isOnPlatform = false\n\tKnight.isOnWall = false\n\tKnight.isOnWater = false\n\tKnight.isOnLava = false\n\tKnight.isOnIce = false\n\tKnight.isOnGrass = false\n\tKnight.isOnSand = false\n\tKnight.isOnSnow = false\n\tKnight.isOnStone = false\n\tKnight.isOnWood = false\n\tKnight.isOnMetal = false\n\tKnight.isOnGlass = false\n\tKnight.isOnConcrete = false\n\tKnight.isOnSnow = false\n\tKnight.isOnSnow = false\n\tKnight.isOnSnow = false\n\tKnight.isOnSnow = false\n\tKnight.isOnSnow = false\n\tKnight.isOnSnow = false\n\tKnight.isOnSnow = false\n\tKnight.isOnSnow = false\n\tKnight.isOnSnow = false\n\tKnight.isOnSnow = false\n\tKnight.isOnSnow = false\n\tKnight.isOnSnow = false\n\tKnight.isOnSnow = false\n\tKnight.isOnSnow = false\n\tKnight.isOnSnow = false\n\tKnight.isOnSnow = false\n\tKnight.isOnSnow = false\n\tK", "CodeBleu_score": 22.88571248138516}, {"code": "function GameMaster:AddHeros()\n\t\t-- Knight\n\tlocal knight = Knight:new()\n\tknight.x = 400\n\tknight.y = 300\n\tknight:setMode(\"idle\")\n\tknight.name = \"Knight\"\n\tknight.speed = 100\n\tknight.health = 100\n\tknight.maxHealth = 100\n\tknight.damage = 20\n\tknight.defense = 10\n\tknight.range = 100\n\tknight.attackSpeed = 1\n\tknight.attackTime = 0\n\tknight.attackRange = 100\n\tknight.attackTarget = nil\n\tknight.attackTargetType = nil\n\tknight.attackTargetDistance = nil\n\tknight.attackTargetHealth = nil\n\tknight.attackTargetMaxHealth = nil\n\tknight.attackTargetDefense = nil\n\tknight.attackTargetDamage = nil\n\tknight.attackTargetRange = nil\n\tknight.attackTargetAttackSpeed = nil\n\tknight.attackTargetAttackTime = nil\n\tknight.attackTargetAttackRange = nil\n\tknight.attackTargetAttackTarget = nil\n\tknight.attackTargetAttackTargetType = nil\n\tknight.attackTargetAttackTargetDistance = nil\n\tknight.attackTargetAttackTargetHealth = nil\n\tknight.attackTargetAttackTargetMaxHealth = nil\n\tknight.attackTargetAttackTargetDefense = nil\n\tknight.attackTargetAttackTargetDamage = nil\n\tknight.attackTargetAttackTargetRange = nil\n\tknight.attackTargetAttackTargetAttackSpeed = nil\n\tknight.attackTargetAttackTargetAttackTime = nil\n\tknight.attackTargetAttackTargetAttackRange = nil\n\tknight.attackTargetAttackTargetAttackTarget = nil\n\tknight.attackTargetAttackTargetAttackTargetType = nil\n\tknight.attackTargetAttackTargetAttackTargetDistance = nil\n\tknight.attackTargetAttackTargetAttackTargetHealth = nil\n\tknight.", "CodeBleu_score": 22.550553311955188}, {"code": "function GameMaster:AddHeros()\n\t\t-- Create the Knight character\n\tlocal knight = Knight()\n\tknight:SetPosition(32, 32)\n\tknight:SetLayer(self.currentLayer)\n\tknight:SetMode(\"idle\")\n\tknight:SetDirection(\"down\")\n\tself.HeroManager:Add(knight)\n\t\n\t-- Create the Mage character\n\tlocal mage = Mage()\n\tmage:SetPosition(128, 128)\n\tmage:SetLayer(self.currentLayer)\n\tmage:SetMode(\"idle\")\n\tmage:SetDirection(\"down\")\n\tself.HeroManager:Add(mage)\n\t\n\t-- Create the Archer character\n\tlocal archer = Archer()\n\tarcher:SetPosition(224, 224)\n\tarcher:SetLayer(self.currentLayer)\n\tarcher:SetMode(\"idle\")\n\tarcher:SetDirection(\"down\")\n\tself.HeroManager:Add(archer)", "CodeBleu_score": 47.50655329871507}]}
{"instance_id": "cdfbc82ff3cd", "generation_result": [{"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat:new()\n\tboss.cameraMask = {0}\n\tboss:addToCurrentLayer()\n\tboss.x = 1000\n\tboss.y = 250\n\tboss.facingDirection = \"left\"\n\tboss.aiEnabled = false\n\tboss:bounceOut(0.3)\n\tboss.aiEnabled = true\n\tself.monsterManager:add(boss)", "CodeBleu_score": 28.185053783321617}, {"code": "function GameMaster:showBoss()\n\t    local boss = Rat(self.world)\n    boss.cameraMask = self.cameraMask\n    self.world:addChild(boss)\n    boss:setPosition(self.bossPosition)\n    boss:setFacingDirection(self.bossFacingDirection)\n    boss.aiEnabled = false\n    boss:bounceOut(0.5, function() boss.aiEnabled = true end)\n    self.monsterManager:add(boss)", "CodeBleu_score": 35.47688435584788}, {"code": "function GameMaster:showBoss()\n\t    local boss = Rat(self.layer)\n    boss:setCameraMask(self.camera:getCameraMask())\n    self.layer:addChild(boss)\n    boss:setPosition(self.bossPos)\n    boss:setFacingDirection(1)\n    boss:setAIEnabled(false)\n    boss:bounceOut()\n    boss:setAIEnabled(true)\n    self.monsterManager:add(boss)", "CodeBleu_score": 34.936270835133804}]}
{"instance_id": "fa7b402853bb", "generation_result": [{"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal animation = Animation3D(file)\n\tlocal animate = Animate3D(animation, begin, finish)\n\tanimate.speed = speed\n\tanimate:retain()\n\treturn animate", "CodeBleu_score": 38.50478763018486}, {"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal animation = Animation3D.new(file)\n\tlocal animate = Animate3D.new(animation, begin, finish)\n\tanimate:setSpeed(speed)\n\tanimate:retain()\n\treturn animate", "CodeBleu_score": 43.23629463963983}, {"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal anim = Animation3D(file)\n\tlocal ani = Animate3D(anim, begin, finish)\n\tani:setSpeed(speed)\n\tani:retain()\n\treturn ani", "CodeBleu_score": 34.73571836696934}]}
{"instance_id": "0725f2413b6b", "generation_result": [{"code": "function removeAll(table)\n\t    for i = 1, #table do \n        table[i] = nil\n    end\n    return table", "CodeBleu_score": 39.54497517028204}, {"code": "function removeAll(table)\n\t    for i = #table, 1, -1 do\n        table.remove(table, i)\n    end", "CodeBleu_score": 30.585023681991153}, {"code": "function removeAll(table)\n\t    for i=#table,1,-1 do\n        table.remove(table,i)\n    end", "CodeBleu_score": 29.9508084451917}]}
{"instance_id": "526d10bb37bb", "generation_result": [{"code": "function delayExecute(target, func, delay)\n\t    local action = cc.DelayTime:create(delay)\n    local sequence = cc.Sequence:create(action, cc.CallFunc:create(func))\n    target:runAction(sequence)", "CodeBleu_score": 63.97197892319243}, {"code": "function delayExecute(target, func, delay)\n\t    local delayAction = cc.DelayTime:create(delay)\n    local sequence = cc.Sequence:create(delayAction, func)\n    target:runAction(sequence)", "CodeBleu_score": 56.27935469057357}, {"code": "function delayExecute(target, func, delay)\n\t    local seq = Sequence.new({\n        DelayTime.new(delay),\n        CallFunc.new(function()\n            func()\n        end)\n    })\n    target:runAction(seq)", "CodeBleu_score": 39.99848888006381}]}
{"instance_id": "3b277bd3d0d0", "generation_result": [{"code": "function LoadingScene:addLoadingText(layer)\n\t\tlocal loading = {}\n\tlocal font = \"fonts/Marker Felt.ttf\"\n\tlocal fontSize = 20\n\tlocal text = \"Loading\"\n\tlocal textColor = { 255, 255, 255 }\n\tlocal textX = 200\n\tlocal textY = 100\n\tlocal textWidth = 100\n\tlocal textHeight = 20\n\tlocal textAlign = \"center\"\n\tlocal textVerticalAlign = \"center\"\n\tlocal textFont = font\n\tlocal textSize = fontSize\n\tlocal textColor = textColor\n\tlocal textX = textX\n\tlocal textY = textY\n\tlocal textWidth = textWidth\n\tlocal textHeight = textHeight\n\tlocal textAlign = textAlign\n\tlocal textVerticalAlign = textVerticalAlign\n\tlocal textFont = textFont\n\tlocal textSize = textSize\n\tlocal textColor = textColor\n\tlocal textX = textX\n\tlocal textY = textY\n\tlocal textWidth = textWidth\n\tlocal textHeight = textHeight\n\tlocal textAlign = textAlign\n\tlocal textVerticalAlign = textVerticalAlign\n\tlocal textFont = textFont\n\tlocal textSize = textSize\n\tlocal textColor = textColor\n\tlocal textX = textX\n\tlocal textY = textY\n\tlocal textWidth = textWidth\n\tlocal textHeight = textHeight\n\tlocal textAlign = textAlign\n\tlocal textVerticalAlign = textVerticalAlign\n\tlocal textFont = textFont\n\tlocal textSize = textSize\n\tlocal textColor = textColor\n\tlocal textX = textX\n\tlocal textY = textY\n\tlocal textWidth = textWidth\n\tlocal textHeight = textHeight\n\tlocal textAlign = textAlign\n\tlocal textVerticalAlign = textVerticalAlign\n\tlocal textFont = textFont\n\tlocal textSize = textSize\n\tlocal textColor = textColor\n\tlocal textX = textX\n\tlocal textY = textY\n\tlocal textWidth = textWidth\n\tlocal textHeight = textHeight\n\tlocal textAlign = textAlign\n\tlocal textVerticalAlign = textVertical", "CodeBleu_score": 35.06359353980368}, {"code": "function LoadingScene:addLoadingText(layer)\n\t    local loading = {}\n    local font = \"fonts/Marker Felt.ttf\"\n    local fontSize = 24\n    local text = \"Loading\"\n    local x = display.contentWidth * 0.5\n    local y = display.contentHeight * 0.5\n    local textOptions = {\n        text = text,\n        x = x,\n        y = y,\n        font = font,\n        fontSize = fontSize,\n        align = \"center\"\n    }\n    local loadingText = display.newText(textOptions)\n    loadingText:setFillColor(1, 1, 1)\n    layer:insert(loadingText)\n    loading[1] = loadingText\n    for i = 2, 4 do\n        loadingText = display.newText(textOptions)\n        loadingText:setFillColor(1, 1, 1)\n        transition.to(loadingText, { time = 200, alpha = 0 })\n        layer:insert(loadingText)\n        loading[i] = loadingText\n    end\n    self._loading = loading", "CodeBleu_score": 43.32360512498422}, {"code": "function LoadingScene:addLoadingText(layer)\n\t\tlocal loading = {}\n\tlocal font = \"fonts/Marker Felt.ttf\"\n\tlocal size = 32\n\tlocal x = display.contentCenterX\n\tlocal y = display.contentCenterY\n\tlocal text = display.newText(\"loading\", x, y, font, size)\n\ttext.x = text.x - text.contentWidth * 0.5\n\ttext.y = text.y - text.contentHeight * 0.5\n\tlayer:insert(text)\n\tloading[1] = text\n\ttext = display.newText(\"loading.\", x, y, font, size)\n\ttext.x = text.x - text.contentWidth * 0.5\n\ttext.y = text.y - text.contentHeight * 0.5\n\tlayer:insert(text)\n\tloading[2] = text\n\ttext = display.newText(\"loading..\", x, y, font, size)\n\ttext.x = text.x - text.contentWidth * 0.5\n\ttext.y = text.y - text.contentHeight * 0.5\n\tlayer:insert(text)\n\tloading[3] = text\n\ttext = display.newText(\"loading...\", x, y, font, size)\n\ttext.x = text.x - text.contentWidth * 0.5\n\ttext.y = text.y - text.contentHeight * 0.5\n\tlayer:insert(text)\n\tloading[4] = text\n\tself._loading = loading", "CodeBleu_score": 38.63054239668645}]}
{"instance_id": "68250ae97644", "generation_result": [{"code": "function MainMenuScene.create()\n\t    local scene = Scene.new()\n    local layer = MainMenuScene.createLayer()\n    scene:addChild(layer)\n    return scene", "CodeBleu_score": 66.43185885622435}, {"code": "function MainMenuScene.create()\n\t\tlocal scene = display.newScene()\n\tlocal layer = MainMenuScene.new()\n\tscene:addChild(layer)\n\treturn scene", "CodeBleu_score": 60.5036919168397}, {"code": "function MainMenuScene.create()\n\t\tlocal scene = CCScene:create()\n\tlocal layer = MainMenuScene.new()\n\tscene:addChild(layer)\n\treturn scene", "CodeBleu_score": 62.55117527686159}]}
{"instance_id": "81470efbb6ff", "generation_result": [{"code": "local function collision(object)\n\n\t    local heroManager = require(\"HeroManager\")\n    local monsterManager = require(\"MonsterManager\")\n\n    local heroList = heroManager.getHeroList()\n    local monsterList = monsterManager.getMonsterList()\n\n    for i, hero in ipairs(heroList) do\n        if object:collidesWith(hero) then\n            solveCollision(object, hero)\n        end\n    end\n\n    for i, monster in ipairs(monsterList) do\n        if object:collidesWith(monster) then\n            solveCollision(object, monster)\n        end\n    end", "CodeBleu_score": 41.93955465304943}, {"code": "local function collision(object)\n\n\t  local hero = HeroManager.getAliveHero()\n  if hero ~= nil then\n    if object:collidesWith(hero) then\n      solveCollision(object, hero)\n    end\n  end\n \n  for _, monster in ipairs(MonsterManager.getAliveMonsters()) do\n    if object:collidesWith(monster) then\n      solveCollision(object, monster)\n    end\n  end", "CodeBleu_score": 32.143315798020595}, {"code": "local function collision(object)\n\n\t    local objects = {}\n    local hero = HeroManager:getHero()\n    local monsters = MonsterManager:getMonsters()\n    for _, monster in ipairs(monsters) do\n        if monster:isAlive() then\n            table.insert(objects, monster)\n        end\n    end\n    table.insert(objects, hero)\n\n    for _, obj in ipairs(objects) do\n        if obj ~= object and obj:isAlive() then\n            local distance = math.sqrt(math.pow(object.x - obj.x, 2) + math.pow(object.y - obj.y, 2))\n            local radiusSum = object.radius + obj.radius\n            if distance < radiusSum then\n                solveCollision(object, obj)\n            end\n        end\n    end", "CodeBleu_score": 42.75165862132966}]}
{"instance_id": "f8915bebdc0e", "generation_result": [{"code": "function collisionDetect(dt)\n\t    -- HeroManager\n    for i = #HeroManager, 1, -1 do\n        local hero = HeroManager[i]\n        if hero.alive then\n            -- Collision detection with monsters\n            for j = #MonsterManager, 1, -1 do\n                local monster = MonsterManager[j]\n                if monster.alive and hero:collides(monster) then\n                    hero.alive = false\n                    monster.alive = false\n                    hero.health = hero.health - monster.damage\n                    if hero.health <= 0 then\n                        hero.health = 0\n                    end\n                    break\n                end\n            end\n\n            -- Collision detection with obstacles\n            for k = #ObstacleManager, 1, -1 do\n                local obstacle = ObstacleManager[k]\n                if obstacle.alive and hero:collides(obstacle) then\n                    hero.alive = false\n                    break\n                end\n            end\n\n            -- Boundary checks\n            if hero.x < 0 then\n                hero.x = 0\n            elseif hero.x > screenWidth - hero.width then\n                hero.x = screenWidth - hero.width\n            end\n\n            if hero.y < 0 then\n                hero.y = 0\n            elseif hero.y > screenHeight - hero.height then\n                hero.y = screenHeight - hero.height\n            end\n\n            -- Update hero position\n            hero:update(dt)\n        else\n            -- Remove dead hero from HeroManager\n            table.remove(HeroManager, i)\n        end\n    end\n\n    -- MonsterManager\n    for i = #MonsterManager, 1, -1 do\n        local monster = MonsterManager[i]\n        if monster.alive then\n            -- Collision detection with obstacles\n            for j = #ObstacleManager, 1, -1 do\n                local obstacle = ObstacleManager[j]\n                if obstacle.alive and monster:collides(obstacle) then\n                    monster.alive = false\n                    break\n                end\n            end\n\n            -- Boundary checks\n            if monster.x < 0 then\n                monster.x = 0\n           ", "CodeBleu_score": 43.622454931509175}, {"code": "function collisionDetect(dt)\n\t\n\t-- HeroManager\n\tfor i = #HeroManager, 1, -1 do\n\t\tlocal hero = HeroManager[i]\n\t\tif hero.isAlive then\n\t\t\t-- Boundary check\n\t\t\tif hero.x > display.contentWidth - hero.width/2 then\n\t\t\t\thero.x = display.contentWidth - hero.width/2\n\t\t\telseif hero.x < hero.width/2 then\n\t\t\t\thero.x = hero.width/2\n\t\t\tend\n\n\t\t\tif hero.y > display.contentHeight - hero.height/2 then\n\t\t\t\thero.y = display.contentHeight - hero.height/2\n\t\t\telseif hero.y < hero.height/2 then\n\t\t\t\thero.y = hero.height/2\n\t\t\tend\n\n\t\t\t-- Collision detection with MonsterManager\n\t\t\tfor j = #MonsterManager, 1, -1 do\n\t\t\t\tlocal monster = MonsterManager[j]\n\t\t\t\tif monster.isAlive then\n\t\t\t\t\tif checkCollision(hero, monster) then\n\t\t\t\t\t\thero:hit(monster.damage)\n\t\t\t\t\t\tmonster:hit(hero.damage)\n\t\t\t\t\t\t-- Check if monster is dead\n\t\t\t\t\t\tif monster.health <= 0 then\n\t\t\t\t\t\t\tmonster:die()\n\t\t\t\t\t\t\tscore = score + 1\n\t\t\t\t\t\t\tscoreText.text = \"Score: \" .. score\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\telse\n\t\t\t-- Remove dead hero from HeroManager\n\t\t\ttable.remove(HeroManager, i)\n\t\tend\n\tend\n\n\t-- MonsterManager\n\tfor i = #MonsterManager, 1, -1 do\n\t\tlocal monster = MonsterManager[i]\n\t\tif monster.isAlive then\n\t\t\t-- Boundary check\n\t\t\tif monster.x > display.contentWidth - monster.width/2 then\n\t\t\t\tmonster.x = display.contentWidth - monster.width/2\n\t\t\telseif monster.x < monster.width/2 then\n\t\t\t\tmonster.x = monster.width/2\n\t\t\tend\n\n\t\t\tif monster.y > display.contentHeight - monster.height/2 then\n\t\t\t\tmonster.y = display.", "CodeBleu_score": 42.932320191646724}, {"code": "function collisionDetect(dt)\n\t    for i = #HeroManager, 1, -1 do\n        local hero = HeroManager[i]\n        if hero.isAlive then\n            -- Check for collision with monsters\n            for j = #MonsterManager, 1, -1 do\n                local monster = MonsterManager[j]\n                if monster.isAlive and checkCollision(hero, monster) then\n                    hero:loseLife()\n                    monster:die()\n                    break\n                end\n            end\n\n            -- Check for collision with boundaries\n            if hero.x < hero.width / 2 then\n                hero.x = hero.width / 2\n            elseif hero.x > screenWidth - hero.width / 2 then\n                hero.x = screenWidth - hero.width / 2\n            end\n\n            if hero.y < hero.height / 2 then\n                hero.y = hero.height / 2\n            elseif hero.y > screenHeight - hero.height / 2 then\n                hero.y = screenHeight - hero.height / 2\n            end\n        else\n            table.remove(HeroManager, i)\n        end\n    end", "CodeBleu_score": 42.965968362344334}]}
{"instance_id": "fc081bb122f5", "generation_result": [{"code": "function Actor:specialAttack()\n\t\tlocal collider = self:createCollider(self.pos, self.facingDir, self.specialAttackProperties)\n\tcollider:setOnCollision(self.onSpecialAttackCollision)\n\tself.specialAttackCollider = collider\n\tself.specialAttackCollider:setOnCollision(self.onSpecialAttackCollision)\n\tself.specialAttackCollider:setOnCollisionEnd(self.onSpecialAttackCollisionEnd)\n\tself.specialAttackCollider:setOnCollisionEnd(self.onSpecialAttackCollisionEnd)\n\tself.specialAttackCollider:setOnDestroy(self.onSpecialAttackColliderDestroy)\n\tself.specialAttackCollider:setOnDestroy(self.onSpecialAttackColliderDestroy)\n\tself.specialAttackCollider:setOnUpdate(self.onSpecialAttackColliderUpdate)\n\tself.specialAttackCollider:setOnUpdate(self.onSpecialAttackColliderUpdate)\n\tself.specialAttackCollider:setOnUpdate(self.onSpecialAttackColliderUpdate)\n\tself.specialAttackCollider:setOnUpdate(self.onSpecialAttackColliderUpdate)\n\tself.specialAttackCollider:setOnUpdate(self.onSpecialAttackColliderUpdate)\n\tself.specialAttackCollider:setOnUpdate(self.onSpecialAttackColliderUpdate)\n\tself.specialAttackCollider:setOnUpdate(self.onSpecialAttackColliderUpdate)\n\tself.specialAttackCollider:setOnUpdate(self.onSpecialAttackColliderUpdate)\n\tself.specialAttackCollider:setOnUpdate(self.onSpecialAttackColliderUpdate)\n\tself.specialAttackCollider:setOnUpdate(self.onSpecialAttackColliderUpdate)\n\tself.specialAttackCollider:setOnUpdate(self.onSpecialAttackColliderUpdate)\n\tself.specialAttackCollider:setOnUpdate(self.onSpecialAttackColliderUpdate)\n\tself.specialAttackCollider:setOnUpdate(self.onSpecialAttackColliderUpdate)\n\tself.specialAttackCollider:setOnUpdate", "CodeBleu_score": 34.09310796082161}, {"code": "function Actor:specialAttack()\n\t    local collider = Collider(self.position, self.direction, self.specialAttackProperties.colliderProperties)\n    collider.parent = self\n    collider.onCollision = function(collider, other)\n        if other.type == \"enemy\" then\n            if self.specialAttackProperties.damage > 0 then\n                other:takeDamage(self.specialAttackProperties.damage)\n            end\n            if self.specialAttackProperties.knockback > 0 then\n                other:knockback(self.specialAttackProperties.knockback, self.direction)\n            end\n            if self.specialAttackProperties.stun > 0 then\n                other:stun(self.specialAttackProperties.stun)\n            end\n            if self.specialAttackProperties.heal > 0 then\n                other:heal(self.specialAttackProperties.heal)\n            end\n            if self.specialAttackProperties.slow > 0 then\n                other:slow(self.specialAttackProperties.slow)\n            end\n            if self.specialAttackProperties.hitStop > 0 then\n                other:hitStop(self.specialAttackProperties.hitStop)\n            end\n            if self.specialAttackProperties.freeze > 0 then\n                other:freeze(self.specialAttackProperties.freeze)\n            end\n            if self.specialAttackProperties.shock > 0 then\n                other:shock(self.specialAttackProperties.shock)\n            end\n            if self.specialAttackProperties.poison > 0 then\n                other:poison(self.specialAttackProperties.poison)\n            end\n            if self.specialAttackProperties.confuse > 0 then\n                other:confuse(self.specialAttackProperties.confuse)\n            end\n            if self.specialAttackProperties.burn > 0 then\n                other:burn(self.specialAttackProperties.burn)\n            end\n            if self.specialAttackProperties.paralyze > 0 then\n                other:paralyze(self.specialAttackProperties.paralyze)\n            end\n            if self.specialAttackProperties.explosion > 0 then\n                other", "CodeBleu_score": 40.10038421636531}, {"code": "function Actor:specialAttack()\n\t    local attackCollider = self:createAttackCollider(self.specialAttackProperties)\n    self.specialAttackProperties.sound:play()", "CodeBleu_score": 45.005827517349736}]}
{"instance_id": "bfc98809aacb", "generation_result": [{"code": "function Slime:angryFace(trueFalse)\n\t    if trueFalse then\n        if self.state ~= \"angry\" then\n            self.state = \"angry\"\n            self.sprite:setTexture(self.textures[self.state])\n        end\n    else\n        if self.state ~= \"normal\" then\n            self.state = \"normal\"\n            self.sprite:setTexture(self.textures[self.state])\n        end\n    end", "CodeBleu_score": 47.36655434306052}, {"code": "function Slime:angryFace(trueFalse)\n\t    if trueFalse == true then\n        if self.currentState ~= \"angry\" then\n            self.currentState = \"angry\"\n            self.sprite:setTexture(self.angryTexture)\n        end\n    else\n        if self.currentState ~= \"normal\" then\n            self.currentState = \"normal\"\n            self.sprite:setTexture(self.normalTexture)\n        end\n    end", "CodeBleu_score": 45.667854542572485}, {"code": "function Slime:angryFace(trueFalse)\n\t    if trueFalse then\n        if self.state ~= \"angry\" then\n            self.state = \"angry\"\n            self.sprite:setTexture(\"slime_angry.png\")\n        end\n    else\n        if self.state ~= \"normal\" then\n            self.state = \"normal\"\n            self.sprite:setTexture(\"slime.png\")\n        end\n    end", "CodeBleu_score": 52.973053300466454}]}
{"instance_id": "546a0b8fb77b", "generation_result": [{"code": "override fun getCharPixmap(char: Char): Pixmap{\n\t    val text = char.toString()\n    val textPaint = Paint()\n    textPaint.textSize = size\n    textPaint.textAlign = Paint.Align.LEFT\n    textPaint.typeface = font\n    textPaint.isAntiAlias = true\n    textPaint.isSubpixelText = true\n    textPaint.isLinearText = true\n    textPaint.isUnderlineText = false\n    textPaint.isStrikeThruText = false\n    textPaint.color = color\n\n    val textWidth = textPaint.measureText(text)\n    val textHeight = textPaint.descent() - textPaint.ascent()\n    val bitmap = Bitmap.createBitmap(ceil(textWidth).toInt(), ceil(textHeight).toInt(), Bitmap.Config.ARGB_8888)\n    val canvas = Canvas(bitmap)\n    canvas.drawText(text, 0f, abs(textPaint.ascent()), textPaint)\n\n    val pixmap = Pixmap(bitmap.width, bitmap.height, Pixmap.Format.RGBA8888)\n    pixmap.setBlendFunction(Pixmap.BlendFunction.srcOver)\n    bitmap.copyPixelsToBuffer(pixmap.pixels)\n\n    bitmap.recycle()\n\n    return pixmap\n}", "CodeBleu_score": 36.3143389435667}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\t    val fontMetrics = FontMetricsCommon(this)\n    val width = fontMetrics.getCharWidth(char)\n    val height = fontMetrics.getCharHeight(char)\n    val bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)\n    val canvas = Canvas(bitmap)\n    val paint = Paint()\n    paint.textSize = fontSize\n    paint.typeface = fontTypeface\n    paint.color = fontColor\n    paint.textAlign = Paint.Align.LEFT\n    canvas.drawText(char.toString(), 0f, fontMetrics.getCharHeight(char) - fontMetrics.getCharDescent(char), paint)\n    val pixels = IntArray(bitmap.width * bitmap.height)\n    bitmap.getPixels(pixels, 0, bitmap.width, 0, 0, bitmap.width, bitmap.height)\n    val pixmap = Pixmap(bitmap.width, bitmap.height, Pixmap.Format.RGBA8888)\n    pixmap.setPixels(pixels, 0, bitmap.width, 0, 0, bitmap.width, bitmap.height)\n    bitmap.recycle()\n    return pixmap\n}", "CodeBleu_score": 47.00849812167648}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\t    val text = char.toString()\n    val textDimensions = getTextDimensions(text)\n    val bitmap = Bitmap.createBitmap(textDimensions.width, textDimensions.height, Bitmap.Config.ARGB_8888)\n    val canvas = Canvas(bitmap)\n    val paint = Paint().apply {\n        textSize = textDimensions.height.toFloat()\n        color = android.graphics.Color.WHITE\n        typeface = font\n    }\n    canvas.drawText(text, 0f, textDimensions.height.toFloat(), paint)\n\n    val width = bitmap.width\n    val height = bitmap.height\n    val pixels = IntArray(width * height)\n    bitmap.getPixels(pixels, 0, width, 0, 0, width, height)\n    val pixmap = Pixmap(width, height, Pixmap.Format.RGBA8888)\n    pixmap.pixels = pixels\n    bitmap.recycle()\n    return pixmap\n}", "CodeBleu_score": 48.05048004703721}]}
{"instance_id": "9c1ce2567ce1", "generation_result": [{"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t        val uri = Uri.parse(suggestedLocation)\n        val fileName = uri.lastPathSegment!!\n\n        val callback = { uri: Uri ->\n            try {\n                activity.contentResolver.openOutputStream(uri).use { outputStream ->\n                    outputStream?.write(data.toByteArray())\n                }\n                onSaved(uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            }\n        }\n\n        selectFile(fileName, callback)\n    }", "CodeBleu_score": 55.24227413497735}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t        val uri = Uri.parse(suggestedLocation)\n        val filename = uri.lastPathSegment\n        val callback = object : ActivityResultCallback<Uri> {\n            override fun onActivityResult(result: Uri?) {\n                try {\n                    result?.let {\n                        PlatformSaverLoader.saveToUri(data, it, onSaved, onError)\n                    }\n                } catch (ex: Exception) {\n                    onError(ex)\n                }\n            }\n        }\n\n        activity.openFileChooser(callback, filename)\n    }", "CodeBleu_score": 51.906602913133405}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t        val fileName = \"${PlatformSaverLoader.getGameName()}.CivSaver\"\n        val uri = Uri.parse(suggestedLocation)\n        val callback = ActivityResultCallback<Uri?> { uri ->\n            if (uri == null) {\n                onError(Exception(\"No file selected\"))\n                return@ActivityResultCallback\n            }\n            try {\n                activity.contentResolver.openOutputStream(uri)?.use {\n                    it.write(data.toByteArray())\n                    onSaved(uri.toString())\n                }\n            } catch (ex: Exception) {\n                onError(ex)\n            }\n        }\n        val intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n            addCategory(Intent.CATEGORY_OPENABLE)\n            type = \"application/json\"\n            putExtra(Intent.EXTRA_TITLE, fileName)\n            putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n        }\n        activity.startActivityForResult(intent, 123, callback)\n    }", "CodeBleu_score": 56.85257924237679}]}
{"instance_id": "ea556fe12030", "generation_result": [{"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t        val intent = Intent(Intent.ACTION_OPEN_DOCUMENT).apply {\n            addCategory(Intent.CATEGORY_OPENABLE)\n            type = \"*/*\"\n        }\n        activity.startActivityForResult(intent, 42)\n    }", "CodeBleu_score": 31.59020195373602}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t        val intent = Intent(Intent.ACTION_OPEN_DOCUMENT).apply {\n            addCategory(Intent.CATEGORY_OPENABLE)\n            type = \"*/*\"\n        }\n        activity.startActivityForResult(intent, 42)\n        onLoaded(\"\", \"\")\n    }", "CodeBleu_score": 32.71115570899974}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t    // Define a callback to handle file selection\n    val callback = object : ActivityResultCallback<ActivityResult> {\n        override fun onActivityResult(result: ActivityResult?) {\n            // Get the selected file URI\n            val uri = result?.data?.data\n\n            // Attempt to read the file's content\n            try {\n                // Open the file for reading\n                val inputStream = contentResolver.openInputStream(uri!!)\n\n                // Read the file's content\n                val data = inputStream?.bufferedReader()?.use { it.readText() } ?: \"\"\n\n                // Invoke the onLoaded callback with the data and file location\n                onLoaded(data, uri.toString())\n            } catch (ex: Exception) {\n                // Invoke the onError callback with the exception\n                onError(ex)\n            }\n        }\n    }\n\n    // Open a file chooser for the user to select the file to load\n    val intent = Intent(Intent.ACTION_OPEN_DOCUMENT).apply {\n        addCategory(Intent.CATEGORY_OPENABLE)\n        type = \"*/*\"\n    }\n    startActivityForResult(intent, callback)\n}", "CodeBleu_score": 61.72157873288599}]}
{"instance_id": "813990d9bb4d", "generation_result": [{"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\t    val intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n        addCategory(Intent.CATEGORY_OPENABLE)\n        type = \"application/json\"\n        putExtra(Intent.EXTRA_TITLE, fileName)\n        if (uri.scheme == \"content\") putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n    }\n    activity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 71.32405023330806}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\t    val intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n        addCategory(Intent.CATEGORY_OPENABLE)\n        type = \"application/json\"\n        putExtra(Intent.EXTRA_TITLE, fileName)\n        if (uri.scheme == \"content\") {\n            putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n        }\n    }\n    activity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 70.00214336625639}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\t    val intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n        addCategory(Intent.CATEGORY_OPENABLE)\n        type = \"application/json\"\n        putExtra(Intent.EXTRA_TITLE, fileName)\n        if (uri.scheme == \"content\") {\n            putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n        }\n    }\n    activity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 70.00214336625639}]}
{"instance_id": "a423b39ba6fe", "generation_result": [{"code": "fun createNotificationChannelInfo(appContext: Context){\n\t    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) return\n    val channel = NotificationChannel(\n        \"Info\",\n        \"Info\",\n        NotificationManager.IMPORTANCE_LOW\n    ).apply {\n        description = \"Info about your game\"\n        enableLights(true)\n        lightColor = Color.BLUE\n        enableVibration(true)\n    }\n    val notificationManager = appContext.getSystemService(NotificationManager::class.java)\n    notificationManager.createNotificationChannel(channel)\n}", "CodeBleu_score": 35.890943426331354}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\t    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n        val notificationManager = appContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n        val notificationChannel = NotificationChannel(\n            \"info\",\n            \"Info\",\n            NotificationManager.IMPORTANCE_DEFAULT\n        ).apply {\n            description = \"Info about the game\"\n        }\n        notificationManager.createNotificationChannel(notificationChannel)\n    }\n}", "CodeBleu_score": 32.34067444913736}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\t    // Create the NotificationChannel, but only on API 26+ because\n    // the NotificationChannel class is new and not in the support library\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n        val name = \"Info\"\n        val descriptionText = \"Info\"\n        val importance = NotificationManager.IMPORTANCE_DEFAULT\n        val channel = NotificationChannel(\"info\", name, importance).apply {\n            description = descriptionText\n        }\n        // Register the channel with the system\n        val notificationManager: NotificationManager =\n            appContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n        notificationManager.createNotificationChannel(channel)\n    }\n}", "CodeBleu_score": 42.16099691594402}]}
{"instance_id": "4f3e7f77a567", "generation_result": [{"code": "fun packImages(workingPath: String){\n\t    try {\n        packImagesForDirectory(workingPath)\n        val modsFolder = File(workingPath + \"/mods\")\n        if (modsFolder.exists()) {\n            for (mod in modsFolder.listFiles()!!) {\n                if (mod.isDirectory && !mod.name.startsWith(\".\")) {\n                    packImagesForDirectory(mod.absolutePath)\n                }\n            }\n        }\n    } catch (ex: Exception) {\n        ex.printStackTrace()\n    }\n}", "CodeBleu_score": 44.03182100867398}, {"code": "fun packImages(workingPath: String){\n\t    packImages(workingPath, \"assets\")\n    val modsDirectory = File(\"$workingPath/mods\")\n    if (modsDirectory.exists()) {\n        for (mod in modsDirectory.listFiles()!!) {\n            if (mod.isHidden) continue\n            packImages(workingPath, \"mods/${mod.name}\")\n        }\n    }\n}", "CodeBleu_score": 42.915278352151084}, {"code": "fun packImages(workingPath: String){\n\t    try {\n        val mainAssetsPath = \"$workingPath/main/assets\"\n        val mainAssetsAtlasPath = \"$mainAssetsPath/atlas\"\n\n        // Pack images for the main assets folder\n        packImages(mainAssetsPath, mainAssetsAtlasPath)\n\n        // Pack images for each mod in the \"mods\" directory\n        val modsPath = \"$workingPath/main/mods\"\n        val modsDirectory = File(modsPath)\n        if (modsDirectory.exists() && modsDirectory.isDirectory) {\n            val mods = modsDirectory.listFiles()\n            if (mods != null) {\n                for (mod in mods) {\n                    if (!mod.isHidden) {\n                        val modAssetsPath = \"${mod.absolutePath}/assets\"\n                        val modAssetsAtlasPath = \"$modAssetsPath/atlas\"\n\n                        packImages(modAssetsPath, modAssetsAtlasPath)\n                    }\n                }\n            }\n        }\n    } catch (e: Exception) {\n        e.printStackTrace()\n    }\n}", "CodeBleu_score": 45.824820080315874}]}
{"instance_id": "206dbb3c21eb", "generation_result": [{"code": "suspend fun reloadWorldscreen(){\n\t    val game = UncivGame.Current.gameInfo\n    UncivGame.Current.setScreen(WorldScreen(game))\n}", "CodeBleu_score": 31.56975091949304}, {"code": "suspend fun reloadWorldscreen(){\n\t    // TODO: this is a hack, because we don't have a way to know when the world screen is fully loaded\n    // and so we need to wait a bit for the world screen to be fully loaded\n    delay(500)\n    worldScreen.loadTiles()\n}", "CodeBleu_score": 4.643530522509117}, {"code": "suspend fun reloadWorldscreen(){\n\t    val game = UncivGame.Current.gameInfo\n    if (game != null) {\n        val worldScreen = UncivGame.Current.getWorldScreenIfActive()\n        if (worldScreen != null) {\n            worldScreen.dispose()\n            UncivGame.Current.setScreen(worldScreen)\n        }\n    }\n}", "CodeBleu_score": 35.16314337761388}]}
{"instance_id": "2d8fdcb5ad6f", "generation_result": [{"code": "fun goToMainMenu(): MainMenuScreen{\n\t    val game = UncivGame()\n    game.setScreen(MainMenuScreen())\n    return game.screen as MainMenuScreen\n}", "CodeBleu_score": 25.875831617172796}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\t    val game = UncivGame.Current\n    val mainMenuScreen = MainMenuScreen(game)\n    game.setScreen(mainMenuScreen)\n    return mainMenuScreen\n}", "CodeBleu_score": 46.63127954920259}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\t    val game = Gdx.app.getApplicationListener() as UncivGame\n    game.setScreen(MainMenuScreen())\n    return game.screen as MainMenuScreen\n}", "CodeBleu_score": 27.426860093113003}]}
{"instance_id": "df60142d384c", "generation_result": [{"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t    val graphicsConfiguration = getGraphicsConfiguration()\n    val graphicsDevice = graphicsConfiguration.device\n    val graphicsEnvironment = GraphicsEnvironment.getLocalGraphicsEnvironment()\n    val maxWindowBounds = graphicsEnvironment.maximumWindowBounds\n\n    // Adjust the window size within the maximum bounds\n    val adjustedWindowWidth = settings.windowSize.width.coerceAtMost(maxWindowBounds.width).coerceAtLeast(1)\n    val adjustedWindowHeight = settings.windowSize.height.coerceAtMost(maxWindowBounds.height).coerceAtLeast(1)\n\n    // Update the window configuration\n    graphicsConfiguration.bounds = maxWindowBounds\n    graphicsDevice.defaultConfiguration = graphicsConfiguration\n\n    // Update the graphics mode\n    val graphicsMode = graphicsDevice.displayMode\n    graphicsMode.width = adjustedWindowWidth\n    graphicsMode.height = adjustedWindowHeight\n    graphicsDevice.displayMode = graphicsMode\n\n    // Return true if the window size matches the maximum bounds\n    return adjustedWindowWidth == maxWindowBounds.width && adjustedWindowHeight == maxWindowBounds.height\n}", "CodeBleu_score": 36.68143208584694}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t    val maxWindowBounds = getMaxWindowBounds()\n    val windowSize = settings.windowSize\n    val windowWidth = windowSize.x\n    val windowHeight = windowSize.y\n    val adjustedWindowWidth = if (windowWidth > maxWindowBounds.x) maxWindowBounds.x else windowWidth\n    val adjustedWindowHeight = if (windowHeight > maxWindowBounds.y) maxWindowBounds.y else windowHeight\n    settings.windowSize.x = adjustedWindowWidth\n    settings.windowSize.y = adjustedWindowHeight\n    settings.screenMode = ScreenMode.Windowed\n    return adjustedWindowWidth == maxWindowBounds.x && adjustedWindowHeight == maxWindowBounds.y\n}", "CodeBleu_score": 38.557569123649}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t    // Get the maximum window bounds\n    val maxBounds = getMaxWindowBounds()\n\n    // Adjust the window size within the maximum bounds\n    val width = settings.windowSize.width.coerceAtMost(maxBounds.width).coerceAtLeast(1)\n    val height = settings.windowSize.height.coerceAtMost(maxBounds.height).coerceAtLeast(1)\n\n    // Update the window configuration and graphics mode\n    val config = Lwjgl3ApplicationConfiguration()\n    config.setWindowedMode(width, height)\n    config.setWindowIcon(*(Gdx.files.internal(\"icon.png\").readBytes()))\n    config.setTitle(tr(\"Unciv\"))\n    config.useVsync(settings.vsync)\n    config.setForegroundFPS(settings.targetFPS)\n    config.setIdleFPS(settings.idleFPS)\n    config.setResizable(true)\n    config.setWindowSizeLimits(1, 1, maxBounds.width, maxBounds.height)\n    config.setWindowPosition(0, 0)\n\n    val graphics = Lwjgl3Graphics.getGL30()\n    graphics.setWindowedMode(width, height)\n    graphics.setWindowIcon(*(Gdx.files.internal(\"icon.png\").readBytes()))\n    graphics.setTitle(tr(\"Unciv\"))\n    graphics.setVSync(settings.vsync)\n    graphics.setForegroundFPS(settings.targetFPS)\n    graphics.setIdleFPS(settings.idleFPS)\n    graphics.setWindowSizeLimits(1, 1, maxBounds.width, maxBounds.height)\n    graphics.setWindowPosition(0, 0)\n\n    // Check if the window size matches the maximum bounds\n    return width == maxBounds.width && height == maxBounds.height\n}", "CodeBleu_score": 44.585862304301514}]}
{"instance_id": "a8b17234c4e5", "generation_result": [{"code": "private fun getLinuxDistro(): String{\n\t    val osReleaseFile = FileHandle(\"/etc/os-release\")\n    val osReleaseProperties = osReleaseFile.readString(Charset.defaultCharset()).split(\"\n\").map { it.split(\"=\") }.associate { it[0] to it[1] }\n    return if (osReleaseProperties.containsKey(\"NAME\")) {\n        if (osReleaseProperties.containsKey(\"PRETTY_NAME\")) {\n            osReleaseProperties[\"PRETTY_NAME\"]!!.trim('\"')\n        } else {\n            if (osReleaseProperties.containsKey(\"VERSION\")) {\n                \"${osReleaseProperties[\"NAME\"]!!.trim('\"')} ${osReleaseProperties[\"VERSION\"]!!.trim('\"')}\"\n            } else {\n                osReleaseProperties[\"NAME\"]!!.trim('\"')\n            }\n        }\n    } else {\n        \"\"\n    }\n}", "CodeBleu_score": 49.580465410879896}, {"code": "private fun getLinuxDistro(): String{\n\t    val osRelease = FileHandle(\"/etc/os-release\").readString(Charset.defaultCharset().name())\n    val osReleaseMap = osRelease.split(\"\n\").map { it.split(\"=\") }.associate { it[0] to it[1].removeSurrounding(\"\\\"\") }\n    return if (osReleaseMap[\"NAME\"] == null) {\n        \"\"\n    } else {\n        if (osReleaseMap[\"PRETTY_NAME\"] != null) {\n            osReleaseMap[\"PRETTY_NAME\"]!!\n        } else {\n            osReleaseMap[\"NAME\"]!! + \" \" + osReleaseMap[\"VERSION\"]!!\n        }\n    }\n}", "CodeBleu_score": 42.554935477310984}, {"code": "private fun getLinuxDistro(): String{\n\t    val osReleaseFile = FileHandle(\"/etc/os-release\")\n    val osReleaseContent = osReleaseFile.readString(Charset.defaultCharset().name())\n    val osReleaseMap = mutableMapOf<String, String>()\n    osReleaseContent.lines().forEach { line ->\n        val parts = line.split(\"=\")\n        if (parts.size == 2) {\n            val key = parts[0].trim()\n            val value = parts[1].trim().removeSurrounding(\"\\\"\")\n            osReleaseMap[key] = value\n        }\n    }\n    val distroName = osReleaseMap[\"NAME\"] ?: return \"\"\n    val distroVersion = osReleaseMap[\"VERSION\"] ?: return distroName\n    return \"$distroName $distroVersion\"\n}", "CodeBleu_score": 37.246680212785925}]}
{"instance_id": "36a1d2e56540", "generation_result": [{"code": "private fun flashWindow(){\n\t    try {\n        val windowHandle = GLFWNativeWin32.glfwGetWin32Window(Lwjgl3Window.getX11WindowHandle())\n        if (windowHandle == null) {\n            Log.error(\"Could not get window handle for window\")\n            return\n        }\n        val flashInfo = WinUser.FLASHWINFO(windowHandle, WinUser.FLASHW_CAPTION, 0, 0)\n        User32.INSTANCE.FlashWindowEx(flashInfo)\n    } catch (e: Exception) {\n        Log.error(\"Could not flash window\", e)\n    }\n}", "CodeBleu_score": 51.52413005022788}, {"code": "private fun flashWindow(){\n\t    try {\n        if (GLFWNativeWin32.glfwInitWin32()) {\n            val hwnd = GLFWNativeWin32.glfwGetWin32Window(Lwjgl3WindowAdapter.getWindowHandle(Lwjgl3Window.getX11Display(), Lwjgl3Window.getX11Window()))\n            val flash = User32.INSTANCE.FLASHWINFO()\n            flash.dwFlags = WinUser.FLASHW_ALL or WinUser.FLASHW_TIMERNOFG\n            flash.dwTimeout = 0\n            flash.hwnd = hwnd\n            flash.cbSize = WinUser.FLASHWINFO.size()\n            flash.uCount = 3\n            User32.INSTANCE.FlashWindowEx(flash)\n        } else {\n            val hwnd = Native.getWindowPointer(Lwjgl3Window.getX11Window())\n            val flash = User32.INSTANCE.FLASHWINFO()\n            flash.dwFlags = WinUser.FLASHW_ALL or WinUser.FLASHW_TIMERNOFG\n            flash.dwTimeout = 0\n            flash.hwnd = hwnd\n            flash.cbSize = WinUser.FLASHWINFO.size()\n            flash.uCount = 3\n            User32.INSTANCE.FlashWindowEx(flash)\n        }\n    } catch (e: Exception) {\n        Log.error(\"Flashing window failed\", e)\n    }\n}", "CodeBleu_score": 44.91449192841518}, {"code": "private fun flashWindow(){\n\t    try {\n        val hwnd = GLFWNativeWin32.glfwGetWin32Window(Lwjgl3Window.getX11().window)\n        val FLASHW_ALL = 3\n        val FLASHW_TIMERNOFG = 12\n        val flashInfo = WinUser.FLASHWINFO(hwnd, FLASHW_ALL, FLASHW_TIMERNOFG, 0)\n        User32.INSTANCE.FlashWindowEx(flashInfo)\n    } catch (e: Exception) {\n        Log.error(\"FlashWindow failed\", e)\n    }\n}", "CodeBleu_score": 46.68233499216156}]}
{"instance_id": "8e3c7096415a", "generation_result": [{"code": "public void onFullBackup(FullBackupDataOutput data){\n\t    super.onFullBackup(data);\n    File sharedPrefs = new File(getFilesDir(), \"../shared_prefs/com.shatteredpixel.shatteredpixeldungeon_preferences.xml\");\n    if (sharedPrefs.exists()) {\n        addFileToBackup(data, sharedPrefs);\n    }\n    File rankingsFile = new File(getFilesDir(), \"rankings.dat\");\n    if (rankingsFile.exists()) {\n        addFileToBackup(data, rankingsFile);\n    }\n    File badgesFile = new File(getFilesDir(), \"badges.dat\");\n    if (badgesFile.exists()) {\n        addFileToBackup(data, badgesFile);\n    }\n    File journalFile = new File(getFilesDir(), \"journal.dat\");\n    if (journalFile.exists()) {\n        addFileToBackup(data, journalFile);\n    }\n}", "CodeBleu_score": 33.085637132194066}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\t    super.onFullBackup(data);\n    File prefs = getDatabasePath(\"prefs.xml\");\n    if (prefs.exists()) {\n        backupFile(prefs, data);\n    }\n\n    File badges = getDatabasePath(\"badges.dat\");\n    if (badges.exists()) {\n        backupFile(badges, data);\n    }\n\n    File rankings = getDatabasePath(\"rankings.dat\");\n    if (rankings.exists()) {\n        backupFile(rankings, data);\n    }\n\n    File journal = getDatabasePath(\"journal.dat\");\n    if (journal.exists()) {\n        backupFile(journal, data);\n    }\n}", "CodeBleu_score": 26.17124625740782}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\t    super.onFullBackup(data);\n    File sharedPrefs = new File(getFilesDir(), \"../shared_prefs/\" + PREFS_NAME);\n    if (sharedPrefs.exists()) {\n        backupAgent.backupFile(data, sharedPrefs);\n    }\n\n    File rankingsFile = new File(getFilesDir(), \"rankings.dat\");\n    if (rankingsFile.exists()) {\n        backupAgent.backupFile(data, rankingsFile);\n    }\n\n    File badgesFile = new File(getFilesDir(), \"badges.dat\");\n    if (badgesFile.exists()) {\n        backupAgent.backupFile(data, badgesFile);\n    }\n\n    File journalFile = new File(getFilesDir(), \"journal.dat\");\n    if (journalFile.exists()) {\n        backupAgent.backupFile(data, journalFile);\n    }\n}", "CodeBleu_score": 26.66509569168542}]}
{"instance_id": "583999724a15", "generation_result": [{"code": "public boolean connectedToUnmeteredNetwork(){\n\t    ConnectivityManager connectivityManager = (ConnectivityManager) Gdx.app.getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        return connectivityManager.isActiveNetworkMetered();\n    } else {\n        NetworkInfo activeNetwork = connectivityManager.getActiveNetworkInfo();\n        return activeNetwork != null && activeNetwork.isConnected() && (activeNetwork.getType() == ConnectivityManager.TYPE_WIFI || activeNetwork.getType() == ConnectivityManager.TYPE_WIMAX || activeNetwork.getType() == ConnectivityManager.TYPE_BLUETOOTH || activeNetwork.getType() == ConnectivityManager.TYPE_ETHERNET);\n    }\n}", "CodeBleu_score": 72.56660609075166}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\t    ConnectivityManager connectivityManager = (ConnectivityManager) Gdx.app.getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);\n    if (connectivityManager == null) {\n        return false;\n    }\n\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        return !connectivityManager.isActiveNetworkMetered();\n    } else {\n        NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();\n        return networkInfo != null && networkInfo.isConnected() && (networkInfo.getType() == ConnectivityManager.TYPE_WIFI || networkInfo.getType() == ConnectivityManager.TYPE_WIMAX || networkInfo.getType() == ConnectivityManager.TYPE_BLUETOOTH || networkInfo.getType() == ConnectivityManager.TYPE_ETHERNET);\n    }\n}", "CodeBleu_score": 60.82491156758868}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\t    ConnectivityManager connectivityManager = (ConnectivityManager) Game.instance().getContext().getSystemService(Context.CONNECTIVITY_SERVICE);\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        return !connectivityManager.isActiveNetworkMetered();\n    } else {\n        NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();\n        return networkInfo != null && networkInfo.isConnected() && (networkInfo.getType() == ConnectivityManager.TYPE_WIFI || networkInfo.getType() == ConnectivityManager.TYPE_WIMAX || networkInfo.getType() == ConnectivityManager.TYPE_BLUETOOTH || networkInfo.getType() == ConnectivityManager.TYPE_ETHERNET);\n    }\n}", "CodeBleu_score": 62.6363789295651}]}
{"instance_id": "f8bd6cd4826b", "generation_result": [{"code": "protected boolean affectHero( Hero hero ){\n\t    // Play a sound\n    Sample.INSTANCE.play( Assets.SND_BENEFIT );\n\n    // Cure any ailments\n    hero.setBlindness( 0 );\n    hero.setPoison( null );\n    hero.setConfusion( null );\n    hero.setCurse( null );\n    hero.setWeakness( null );\n    hero.setTerror( null );\n    hero.setAmok( null );\n    hero.setParalysis( null );\n    hero.setSleeping( null );\n    hero.setSick( null );\n    hero.setStunned( 0 );\n    hero.setBurning( null );\n    hero.setHunger( 0 );\n    hero.setMindVision( null );\n    hero.setDrunk( null );\n    hero.setOoze( null );\n    hero.setParalytic( null );\n    hero.setSlow( null );\n    hero.setWeak( null );\n    hero.setCharm( null );\n    hero.setFear( null );\n    hero.setGhost( null );\n    hero.setPetrified( null );\n    hero.setRage( null );\n    hero.setSleep( null );\n    hero.setStench( null );\n    hero.setVenom( null );\n    hero.setVenomCurse( null );\n    hero.setVenomImmunity( null );\n    hero.setVenomKnockback( null );\n    hero.setVenomSlow( null );\n    hero.setVenomWeak( null );\n    hero.setVenomWeakness( null );\n    hero.setVenomWound( null );\n    hero.setVenomWoundCurse( null );\n    hero.setVenomWoundImmunity( null );\n    hero.setVenomWoundKnockback( null );\n    hero.setVenomWoundSlow( null );\n    hero.setVenomWoundWeak( null );\n    hero.setVenomWoundWeakness( null );\n    hero.", "CodeBleu_score": 16.058411691993385}, {"code": "protected boolean affectHero( Hero hero ){\n\t    hero.interrupt();\n\n    if (Dungeon.hero.isAlive()) {\n\n        // play a satisfying sound\n        Sample.INSTANCE.play( Assets.SND_BENEFIT );\n\n        // cure ailments\n        hero.belongings.uncurseEquipped();\n\n        // remove curses from equipped items\n        hero.belongings.detachAllCurses();\n\n        // satisfy hunger\n        hero.satisfyHunger( Hunger.STARVING );\n\n        // fully restore health\n        hero.HP = hero.HT;\n        hero.sprite.emitter().burst( Speck.factory( Speck.HEALING ), 10 );\n\n        // visual effects\n        CellEmitter.get( hero.pos ).burst( ShadowParticle.UP, 5 );\n        BlobEmitter.center( hero.pos, 5, ShaftParticle.FACTORY );\n        CellEmitter.center( hero.pos ).start( CharSprite.emitter(), 0.2f, 0.1f );\n\n        // log a message\n        GLog.i( Messages.get(this, \"curse_cleared\") );\n\n        return true;\n    } else {\n        return false;\n    }\n}", "CodeBleu_score": 54.148960153109286}, {"code": "protected boolean affectHero( Hero hero ){\n\t\n    hero.interrupt();\n\n    // plays a sound\n    Sample.INSTANCE.play( Assets.SND_BENEFIT );\n\n    // cures any ailments\n    hero.cure();\n\n    // removes curses from equipped items\n    for (Item item : hero.belongings.backpack.items) {\n        if (item instanceof Waterskin && ((Waterskin) item).cursed) {\n            ((Waterskin) item).cursed = false;\n            ((Waterskin) item).detect();\n        }\n    }\n\n    // satisfies the hero's hunger\n    hero.satisfyHunger(Hunger.STARVING);\n\n    // fully restores health\n    hero.HP = hero.HT;\n    hero.MP = hero.MPmax();\n\n    // displays visual effects\n    CellEmitter.get( pos ).burst( ShadowParticle.UP, 5 );\n    CellEmitter.get( pos ).burst( ShaftParticle.FACTORY, 6 );\n    BlobEmitter.center( pos, 10, PotionOfHealing.class );\n    CellEmitter.get( pos ).start( CharSprite.emitter(), 0.2f, 0.5f );\n    CharSprite.emitter().burst( ShadowParticle.UP, 5 );\n\n    // logs a message\n    GLog.i( Messages.get(this, \"curse_cleared\") );\n\n    // returns true if successful\n    return true;\n}", "CodeBleu_score": 38.44623486617543}]}
{"instance_id": "3a94f2e84c83", "generation_result": [{"code": "protected Item affectItem( Item item, int pos ){\n\t    if (item instanceof Waterskin && !((Waterskin)item).isFull()) {\n        Waterskin waterskin = (Waterskin)item;\n        waterskin.fill();\n        hero.sprite.operate(pos);\n        hero.spend(TIME_TO_DRINK);\n        hero.busy();\n        hero.sprite.showStatus(CharSprite.NEUTRAL, Messages.get(this, \"waterskin\"));\n        Sample.INSTANCE.play(Assets.SND_DRINK);\n        return item;\n    } else if (item instanceof Ankh && !((Ankh)item).isBlessed()) {\n        Ankh ankh = (Ankh)item;\n        ankh.bless();\n        hero.sprite.operate(pos);\n        hero.spend(TIME_TO_BLESS);\n        hero.busy();\n        hero.sprite.showStatus(CharSprite.NEUTRAL, Messages.get(this, \"ankh\"));\n        Sample.INSTANCE.play(Assets.SND_BLESS);\n        return item;\n    } else if (item instanceof ScrollOfRemoveCurse && item.cursed()) {\n        ScrollOfRemoveCurse scroll = (ScrollOfRemoveCurse)item;\n        scroll.removeCurse();\n        hero.sprite.operate(pos);\n        hero.spend(TIME_TO_REMOVE_CURSE);\n        hero.busy();\n        hero.sprite.showStatus(CharSprite.NEUTRAL, Messages.get(this, \"remove_curse\"));\n        Sample.INSTANCE.play(Assets.SND_REMOVE_CURSE);\n        return item;\n    } else {\n        return null;\n    }\n}", "CodeBleu_score": 42.08676381740016}, {"code": "protected Item affectItem( Item item, int pos ){\n\t\n    if (item instanceof Waterskin) {\n        if (((Waterskin) item).isFull()) {\n            GLog.w( Messages.get(this, \"full_waterskin\") );\n        } else {\n            ((Waterskin) item).fill();\n            CellEmitter.get( pos ).burst( ShadowParticle.UP, 4 );\n            Sample.INSTANCE.play( Assets.SND_DRINK );\n            return item;\n        }\n\n    } else if (item instanceof Ankh) {\n        if (((Ankh) item).isBlessed()) {\n            GLog.w( Messages.get(this, \"blessed_ankh\") );\n        } else {\n            ((Ankh) item).bless();\n            CellEmitter.get( pos ).burst( ShadowParticle.UP, 4 );\n            Sample.INSTANCE.play( Assets.SND_BLESS );\n            return item;\n        }\n\n    } else if (item instanceof PotionOfHealing) {\n        ((PotionOfHealing) item).heal();\n        CellEmitter.get( pos ).burst( ShadowParticle.UP, 4 );\n        Sample.INSTANCE.play( Assets.SND_BLESS );\n        return item;\n\n    } else if (item instanceof ScrollOfRemoveCurse) {\n        if (item.cursed) {\n            ((ScrollOfRemoveCurse) item).removeCurse();\n            CellEmitter.get( pos ).burst( ShadowParticle.UP, 4 );\n            Sample.INSTANCE.play( Assets.SND_BLESS );\n            return item;\n        } else {\n            GLog.w( Messages.get(this, \"uncursed_scroll\") );\n        }\n\n    } else {\n        GLog.w( Messages.get(this, \"nothing_happens\") );\n    }\n\n    return null;\n}", "CodeBleu_score": 43.53190228138645}, {"code": "protected Item affectItem( Item item, int pos ){\n\t    if (item instanceof Waterskin) {\n        Waterskin waterskin = (Waterskin) item;\n        if (!waterskin.isFull()) {\n            waterskin.fill();\n            return item;\n        }\n    } else if (item instanceof Ankh) {\n        Ankh ankh = (Ankh) item;\n        if (!ankh.isBlessed()) {\n            ankh.bless();\n            return item;\n        }\n    } else if (item instanceof ScrollOfRemoveCurse) {\n        ScrollOfRemoveCurse scroll = (ScrollOfRemoveCurse) item;\n        if (scroll.isCursed()) {\n            scroll.removeCurse();\n            return item;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 31.56992038943287}]}
{"instance_id": "d322228d1a3e", "generation_result": [{"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t    if (enemy instanceof Mimic) {\n        ((Mimic) enemy).setAligned(true);\n    }\n\n    if (enemy.isAlive()) {\n        enemy.add(buffCls.getDeclaredConstructor().newInstance());\n\n        if (enemy instanceof Mimic && ((Mimic) enemy).isAligned()) {\n            hero.spendAndNext(Statistics.TIME_TAKEN);\n            hero.spendAndNext(Statistics.TIME_TAKEN);\n            hero.spendAndNext(Statistics.TIME_TAKEN);\n            hero.spendAndNext(Statistics.TIME_TAKEN);\n            hero.spendAndNext(Statistics.TIME_TAKEN);\n            hero.spendAndNext(Statistics.TIME_TAKEN);\n            hero.spendAndNext(Statistics.TIME_TAKEN);\n            hero.spendAndNext(Statistics.TIME_TAKEN);\n            hero.spendAndNext(Statistics.TIME_TAKEN);\n            hero.spendAndNext(Statistics.TIME_TAKEN);\n            hero.spendAndNext(Statistics.TIME_TAKEN);\n            hero.spendAndNext(Statistics.TIME_TAKEN);\n            hero.spendAndNext(Statistics.TIME_TAKEN);\n            hero.spendAndNext(Statistics.TIME_TAKEN);\n            hero.spendAndNext(Statistics.TIME_TAKEN);\n            hero.spendAndNext(Statistics.TIME_TAKEN);\n            hero.spendAndNext(Statistics.TIME_TAKEN);\n            hero.spendAndNext(Statistics.TIME_TAKEN);\n            hero.spendAndNext(Statistics.TIME_TAKEN);\n            hero.spendAndNext(Statistics.TIME_TAKEN);\n            hero.spendAndNext(Statistics.TIME_TAKEN);\n            hero.spendAndNext(Statistics.TIME_TAKEN);\n            hero.spendAndNext(Statistics.TIME_TAKEN);\n            hero.spendAndNext(Statistics", "CodeBleu_score": 17.943002558400188}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t\n    // Apply the specified buff to the enemy\n    enemy.buff(buffCls);\n\n    // Check if the enemy was aligned as an enemy\n    if (enemy.alignment == Char.Alignment.ENEMY) {\n\n        // Roll for loot\n        enemy.die(hero);\n\n        // Update kill statistics\n        Statistics.add(Statistics.Kills.class, 1);\n\n        // Process ascension challenges\n        if (Statistics.Ascension.process()) {\n            Badges.validateAscension();\n        }\n\n    } else {\n\n        // If the enemy was not aligned as an enemy, grant experience based on level comparison\n        hero.spend(enemy.EXP());\n\n        // If the hero is a Monk subclass, buff them with additional energy\n        if (hero.subClass == HeroSubClass.MONK) {\n            hero.spend(hero.energy());\n        }\n\n    }\n\n}", "CodeBleu_score": 26.255580267194894}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t    // Apply the buff to the enemy\n    enemy.buff(buffCls);\n\n    // Check if the enemy was aligned as an enemy\n    if (enemy.alignment == Char.Alignment.ENEMY) {\n        // Roll for loot\n        enemy.rollForLoot();\n\n        // Update kill statistics\n        Statistics.enemiesKilled++;\n\n        // Process ascension challenges\n        hero.processAscensionChallenges();\n    }\n\n    // Grant experience to the hero based on level comparison\n    hero.spend(Math.max(0, enemy.lvl - hero.lvl + 1));\n\n    // Buff the hero with additional energy if they are a Monk subclass\n    if (hero.subClass == HeroSubClass.MONK) {\n        hero.buff(Monk.Energy.class);\n    }\n}", "CodeBleu_score": 26.328306412838458}]}
{"instance_id": "9ee21c0149f3", "generation_result": [{"code": "public static void processEnemyKill(Char enemy){\n\t    if (Dungeon.hero.buff(AscensionChallenge.class) == null) {\n        return;\n    }\n\n    if (enemy instanceof Rat) {\n        enemy.revert();\n    }\n    if (enemy instanceof Mob && ((Mob) enemy).isBoosted()) {\n        return;\n    }\n\n    if (enemy instanceof Rat) {\n        AscensionChallenge.stacks -= 1;\n    } else if (enemy instanceof Bat) {\n        AscensionChallenge.stacks -= 2;\n    } else if (enemy instanceof Brute) {\n        AscensionChallenge.stacks -= 3;\n    } else if (enemy instanceof Crab) {\n        AscensionChallenge.stacks -= 4;\n    } else if (enemy instanceof DM100) {\n        AscensionChallenge.stacks -= 5;\n    } else if (enemy instanceof DM200) {\n        AscensionChallenge.stacks -= 6;\n    } else if (enemy instanceof Elemental) {\n        AscensionChallenge.stacks -= 7;\n    } else if (enemy instanceof Eye) {\n        AscensionChallenge.stacks -= 8;\n    } else if (enemy instanceof Ghoul) {\n        AscensionChallenge.stacks -= 9;\n    } else if (enemy instanceof Gnoll) {\n        AscensionChallenge.stacks -= 10;\n    } else if (enemy instanceof Golem) {\n        AscensionChallenge.stacks -= 11;\n    } else if (enemy instanceof Guard) {\n        AscensionChallenge.stacks -= 12;\n    } else if (enemy instanceof Monk) {\n        AscensionChallenge.stacks -= 13;\n    } else if (enemy instanceof Necromancer) {\n        AscensionChallenge.stacks -= 14;\n    } else if (enemy instanceof Rat) {\n       ", "CodeBleu_score": 21.721903056691495}, {"code": "public static void processEnemyKill(Char enemy){\n\t    if (Dungeon.hero.buff(AscensionChallenge.class) != null) {\n        if (enemy instanceof Rat) {\n            ((Rat) enemy).revert();\n        }\n        if (enemy instanceof Gnoll) {\n            ((Gnoll) enemy).revert();\n        }\n        if (enemy instanceof Slime) {\n            ((Slime) enemy).revert();\n        }\n        if (enemy instanceof Guard) {\n            ((Guard) enemy).revert();\n        }\n        if (enemy instanceof Thief) {\n            ((Thief) enemy).revert();\n        }\n        if (enemy instanceof Monk) {\n            ((Monk) enemy).revert();\n        }\n        if (enemy instanceof Warlock) {\n            ((Warlock) enemy).revert();\n        }\n        if (enemy instanceof Shaman) {\n            ((Shaman) enemy).revert();\n        }\n        if (enemy instanceof Necromancer) {\n            ((Necromancer) enemy).revert();\n        }\n        if (enemy instanceof Succubus) {\n            ((Succubus) enemy).revert();\n        }\n        if (enemy instanceof Golem) {\n            ((Golem) enemy).revert();\n        }\n        if (enemy instanceof Brute) {\n            ((Brute) enemy).revert();\n        }\n        if (enemy instanceof Goblin) {\n            ((Goblin) enemy).revert();\n        }\n        if (enemy instanceof DM100) {\n            ((DM100) enemy).revert();\n        }\n        if (enemy instanceof DM200) {\n            ((DM200) enemy).revert();\n        }\n        if (enemy instanceof Ratmogrify) {\n            ((Ratmogrify) enemy).revert();\n        }\n        if (enemy instanceof Spinner) {\n            ((Spinner) enemy).revert();\n        }\n        if (enemy instanceof Swarm) {\n            ((Swarm)", "CodeBleu_score": 12.731885474374385}, {"code": "public static void processEnemyKill(Char enemy){\n\t    if (Dungeon.hero.hasBuff(AscensionChallenge.class)) {\n        if (enemy instanceof Rat) {\n            ((Rat) enemy).transform(false);\n        } else if (enemy instanceof Golem) {\n            ((Golem) enemy).transform(false);\n        } else if (enemy instanceof Gnoll) {\n            ((Gnoll) enemy).transform(false);\n        } else if (enemy instanceof Bat) {\n            ((Bat) enemy).transform(false);\n        } else if (enemy instanceof Brute) {\n            ((Brute) enemy).transform(false);\n        } else if (enemy instanceof Eye) {\n            ((Eye) enemy).transform(false);\n        } else if (enemy instanceof Guard) {\n            ((Guard) enemy).transform(false);\n        } else if (enemy instanceof Monk) {\n            ((Monk) enemy).transform(false);\n        } else if (enemy instanceof Shaman) {\n            ((Shaman) enemy).transform(false);\n        } else if (enemy instanceof Succubus) {\n            ((Succubus) enemy).transform(false);\n        } else if (enemy instanceof Warlock) {\n            ((Warlock) enemy).transform(false);\n        } else if (enemy instanceof Necromancer) {\n            ((Necromancer) enemy).transform(false);\n        } else if (enemy instanceof Crab) {\n            ((Crab) enemy).transform(false);\n        } else if (enemy instanceof Elemental) {\n            ((Elemental) enemy).transform(false);\n        } else if (enemy instanceof Slime) {\n            ((Slime) enemy).transform(false);\n        } else if (enemy instanceof Spinner) {\n            ((Spinner) enemy).transform(false);\n        } else if (enemy instanceof Swarm) {\n            ((Swarm) enemy).transform(false);\n        } else if (enemy instanceof Thief) {\n            ((Thief) enemy).transform(false);\n        } else if (enemy instanceof Ghoul) {\n", "CodeBleu_score": 11.160911804551008}]}
{"instance_id": "4fc9c3c1fcce", "generation_result": [{"code": "public static int AscensionCorruptResist(Mob m){\n\t    if (m.buff(Buff.Ascension) != null) {\n        if (m instanceof RipperDemon) {\n            return 10;\n        }\n        if (m instanceof Ghouls) {\n            return 7;\n        }\n        if (m instanceof Eye) {\n            return 10;\n        }\n        if (m instanceof Rat) {\n            return 10;\n        }\n        if (m instanceof DM100) {\n            return 10;\n        }\n        if (m instanceof DM200) {\n            return 10;\n        }\n        if (m instanceof Monk) {\n            return 10;\n        }\n        if (m instanceof Slime) {\n            return 10;\n        }\n        if (m instanceof Bat) {\n            return 10;\n        }\n        if (m instanceof Brute) {\n            return 10;\n        }\n        if (m instanceof Crab) {\n            return 10;\n        }\n        if (m instanceof Elemental) {\n            return 10;\n        }\n        if (m instanceof Golem) {\n            return 10;\n        }\n        if (m instanceof Guard) {\n            return 10;\n        }\n        if (m instanceof Gnoll) {\n            return 10;\n        }\n        if (m instanceof Necromancer) {\n            return 10;\n        }\n        if (m instanceof Shaman) {\n            return 10;\n        }\n        if (m instanceof Skeleton) {\n            return 10;\n        }\n        if (m instanceof Snake) {\n            return 10;\n        }\n        if (m instanceof Spinner) {\n            return 10;\n        }\n        if (m instanceof Succubus) {\n            return 10;\n        }\n        if (m instanceof Swarm) {\n            return 10;\n        }\n        if (m instanceof Thief) {\n            return 10;\n        }\n        if (m instanceof Warlock) {\n            return 10;\n        }\n        if (m", "CodeBleu_score": 16.3338973273876}, {"code": "public static int AscensionCorruptResist(Mob m){\n\t    if (Dungeon.isChallenged(Challenges.ASCENSION)) {\n        if (m.buff(Buff.CORRUPT_IMMUNE) != null) {\n            return m.EXP;\n        }\n        if (m.buff(Buff.CORRUPT_RESISTANT) != null) {\n            return 10;\n        }\n        if (m instanceof RipperDemon) {\n            return 10;\n        }\n        if (m instanceof Ghouls) {\n            return 7;\n        }\n        if (m instanceof DM100) {\n            return 13;\n        }\n        if (m instanceof DM200) {\n            return 13;\n        }\n        if (m instanceof Rat) {\n            return 13;\n        }\n        if (m instanceof Thief) {\n            return 13;\n        }\n        if (m instanceof Slime) {\n            return 13;\n        }\n        if (m instanceof Bat) {\n            return 13;\n        }\n        if (m instanceof Crab) {\n            return 13;\n        }\n        if (m instanceof Snake) {\n            return 13;\n        }\n        if (m instanceof Spinner) {\n            return 13;\n        }\n        if (m instanceof Eye) {\n            return 13;\n        }\n        if (m instanceof Succubus) {\n            return 13;\n        }\n        if (m instanceof Golem) {\n            return 13;\n        }\n        if (m instanceof Shaman) {\n            return 13;\n        }\n        if (m instanceof Gnoll) {\n            return 13;\n        }\n        if (m instanceof Monk) {\n            return 13;\n        }\n        if (m instanceof Brute) {\n            return 13;\n        }\n        if (m instanceof Guard) {\n            return 13;\n        }\n        if (m instanceof Necromancer) {\n            return 13;\n        }\n        if (m instanceof Warlock", "CodeBleu_score": 23.76706472431402}, {"code": "public static int AscensionCorruptResist(Mob m){\n\t    if (Dungeon.isChallenged(Challenges.ASCENSION)) {\n        if (m.hasBuff(Buff.CORRUPT)) {\n            return 0;\n        }\n        if (m.hasBuff(Buff.CORRUPT_IMMUNE)) {\n            return m.EXP;\n        }\n        if (m.hasBuff(Buff.CORRUPT_WEAK)) {\n            return m.EXP / 2;\n        }\n        if (m.hasBuff(Buff.CORRUPT_RESISTANT)) {\n            return m.EXP * 2;\n        }\n        if (m.hasBuff(Buff.CORRUPT_IMMUNE_ENEMY)) {\n            return m.EXP;\n        }\n        if (m.hasBuff(Buff.CORRUPT_WEAK_ENEMY)) {\n            return m.EXP / 2;\n        }\n        if (m.hasBuff(Buff.CORRUPT_RESISTANT_ENEMY)) {\n            return m.EXP * 2;\n        }\n        if (m.hasBuff(Buff.CORRUPT_IMMUNE_ALLY)) {\n            return m.EXP;\n        }\n        if (m.hasBuff(Buff.CORRUPT_WEAK_ALLY)) {\n            return m.EXP / 2;\n        }\n        if (m.hasBuff(Buff.CORRUPT_RESISTANT_ALLY)) {\n            return m.EXP * 2;\n        }\n        if (m.hasBuff(Buff.CORRUPT_IMMUNE_ENEMY_ALLY)) {\n            return m.EXP;\n        }\n        if (m.hasBuff(Buff.CORRUPT_WEAK_ENEMY_ALLY)) {\n            return m.EXP / 2;\n        }\n        if (m.hasBuff(Buff.CORRUPT_RESISTANT_ENEMY_ALLY)) {\n            return m.EXP * 2;\n       ", "CodeBleu_score": 24.902828465554748}]}
{"instance_id": "bdc8df5952c7", "generation_result": [{"code": "public void hit( Char enemy ){\n\t    if (enemy.isAlive() || enemy.hasBuff( Corruption.class )) {\n        comboTime += talentPoints(Cleave.class);\n        if (comboTime > comboTimeMax) {\n            comboTime = comboTimeMax;\n        }\n    }\n    comboCount++;\n\n    if (comboCount > 1) {\n        if (enemy.isAlive() || enemy.hasBuff( Corruption.class )) {\n            ActionIndicator.instance.action( enemy.sprite, ActionIndicator.BLAST );\n        }\n    }\n\n    if (comboCount == 3) {\n        if (enemy.isAlive() || enemy.hasBuff( Corruption.class )) {\n            ActionIndicator.instance.action( enemy.sprite, ActionIndicator.BLAST );\n        }\n    }\n\n    if (comboCount == 4) {\n        if (enemy.isAlive() || enemy.hasBuff( Corruption.class )) {\n            ActionIndicator.instance.action( enemy.sprite, ActionIndicator.BLAST );\n        }\n    }\n\n    if (comboCount == 5) {\n        if (enemy.isAlive() || enemy.hasBuff( Corruption.class )) {\n            ActionIndicator.instance.action( enemy.sprite, ActionIndicator.BLAST );\n        }\n    }\n\n    if (comboCount == 6) {\n        if (enemy.isAlive() || enemy.hasBuff( Corruption.class )) {\n            ActionIndicator.instance.action( enemy.sprite, ActionIndicator.BLAST );\n        }\n    }\n\n    if (comboCount == 7) {\n        if (enemy.isAlive() || enemy.hasBuff( Corruption.class )) {\n            ActionIndicator.instance.action( enemy.sprite, ActionIndicator.BLAST );\n        }\n    }\n\n    if (comboCount == 8) {\n        if (enemy.isAlive() || enemy", "CodeBleu_score": 25.9723804125752}, {"code": "public void hit( Char enemy ){\n\t    if (enemy.isAlive() || enemy.hasBuff(Corruption.class)) {\n        comboTime = Math.max(comboTime, 1f + (cleave * 0.2f));\n    }\n\n    if (enemy.isAlive() && !enemy.hasBuff(Corruption.class)) {\n        comboCount = 0;\n    }\n\n    comboCount++;\n    comboTime = 1f;\n\n    if (comboCount > 1) {\n        if (actionIndicator != null) {\n            actionIndicator.setAction(this, ActionIndicator.Action.COMBO);\n        }\n    }\n\n    if (comboCount >= 3) {\n        if (actionIndicator != null) {\n            actionIndicator.setAction(this, ActionIndicator.Action.MASTERY);\n        }\n    }\n\n    if (comboCount >= 5) {\n        if (actionIndicator != null) {\n            actionIndicator.setAction(this, ActionIndicator.Action.ULTIMATE);\n        }\n    }\n\n    if (comboCount >= 7) {\n        if (actionIndicator != null) {\n            actionIndicator.setAction(this, ActionIndicator.Action.ULTIMATE);\n        }\n    }\n\n    if (comboCount >= 9) {\n        if (actionIndicator != null) {\n            actionIndicator.setAction(this, ActionIndicator.Action.ULTIMATE);\n        }\n    }\n\n    if (comboCount >= 11) {\n        if (actionIndicator != null) {\n            actionIndicator.setAction(this, ActionIndicator.Action.ULTIMATE);\n        }\n    }\n\n    if (comboCount >= 13) {\n        if (actionIndicator != null) {\n            actionIndicator.setAction(this, ActionIndicator.Action.ULTIMATE);\n        }\n    }\n\n    if (comboCount >= 15) {\n        if (actionIndicator != null)", "CodeBleu_score": 28.83920142554527}, {"code": "public void hit( Char enemy ){\n\t    if (enemy.isAlive() || enemy.hasBuff(Corruption.class) && enemy.HP == enemy.HT) {\n        comboTime = Math.max(comboTime, 1.5f + (cleaveTalent * 0.5f));\n    }\n    if (comboTime > 0) {\n        comboTime -= enemy.attackDelay();\n        if (comboTime <= 0) {\n            comboTime = 0;\n            combo = 0;\n        }\n    }\n    if (comboTime == 0) {\n        combo++;\n        comboTime = initialComboTime;\n        if (combo > 1) {\n            ActionIndicator.instance.target(enemy.sprite);\n            ActionIndicator.instance.light(enemy.sprite);\n        }\n        if (combo > 2) {\n            ActionIndicator.instance.target(enemy.sprite);\n            ActionIndicator.instance.light(enemy.sprite);\n        }\n        if (combo > 3) {\n            ActionIndicator.instance.target(enemy.sprite);\n            ActionIndicator.instance.light(enemy.sprite);\n        }\n        if (combo > 4) {\n            ActionIndicator.instance.target(enemy.sprite);\n            ActionIndicator.instance.light(enemy.sprite);\n        }\n        if (combo > 5) {\n            ActionIndicator.instance.target(enemy.sprite);\n            ActionIndicator.instance.light(enemy.sprite);\n        }\n        if (combo > 6) {\n            ActionIndicator.instance.target(enemy.sprite);\n            ActionIndicator.instance.light(enemy.sprite);\n        }\n        if (combo > 7) {\n            ActionIndicator.instance.target(enemy.sprite);\n            ActionIndicator.instance.light(enemy.sprite);\n        }\n        if (combo > 8) {\n            ActionIndicator.instance.target(en", "CodeBleu_score": 31.852673675161462}]}
{"instance_id": "abf7c664b4dd", "generation_result": [{"code": "public int capacity(){\n\t    int cap = baseCapacity();\n\n    for (Item item : items) {\n        if (item instanceof Bag) {\n            cap += ((Bag) item).capacity();\n        }\n    }\n\n    if (secondaryWeapon() != null) {\n        cap--;\n    }\n\n    return cap;\n}", "CodeBleu_score": 43.51837092024373}, {"code": "public int capacity(){\n\t    int cap = BASE_CAPACITY;\n    for (Item item : items) {\n        if (item instanceof Bag) {\n            cap += ((Bag) item).capacity();\n        }\n    }\n    if (secondaryWeapon() != null) {\n        cap--;\n    }\n    return cap;\n}", "CodeBleu_score": 38.80408203399824}, {"code": "public int capacity(){\n\t    int cap = BASE_CAPACITY;\n    for (Item item : items) {\n        if (item instanceof Bag) {\n            cap += ((Bag) item).capacity();\n        }\n    }\n    if (secondaryWeapon() != null) {\n        cap -= 1;\n    }\n    return cap;\n}", "CodeBleu_score": 32.46759025591327}]}
{"instance_id": "b97e41e092d2", "generation_result": [{"code": "public void updateHT( boolean boostHP ){\n\t    HT = (int) Math.round( HT_BASE + HT_PER_LEVEL * level() );\n\n    if (buff( RingOfMight.class ) != null) {\n        HT += (int) Math.round( HT * RingOfMight.MIGHT_BONUS );\n    }\n\n    if (buff( ElixirOfMight.class ) != null) {\n        HT += (int) Math.round( HT * ElixirOfMight.MIGHT_BONUS );\n    }\n\n    if (boostHP) {\n        HP = Math.min( HT, HP );\n    }\n}", "CodeBleu_score": 25.937011317319854}, {"code": "public void updateHT( boolean boostHP ){\n\t    float multiplier = 1;\n    if (buff( RingOfMight.class ) != null) {\n        multiplier += 0.1f;\n    }\n    if (buff( ElixirOfMight.class ) != null) {\n        multiplier += 0.1f;\n    }\n    HT = (int) Math.ceil( 10 + (level() - 1) * multiplier );\n    if (boostHP) {\n        HP = Math.min( HT, HP );\n    }\n}", "CodeBleu_score": 28.629099590340935}, {"code": "public void updateHT( boolean boostHP ){\n\t    HT = HTBASE + level();\n\n    if (buff( RingOfMight.class ) != null) {\n        HT += (HT * RingOfMight.MIGHT_BONUS);\n    }\n\n    if (buff( ElixirOfMight.class ) != null) {\n        HT += (HT * ElixirOfMight.MIGHT_BONUS);\n    }\n\n    if (boostHP) {\n        HP = Math.min( HT, HP );\n    }\n}", "CodeBleu_score": 23.475615060146996}]}
{"instance_id": "b72bd91544e7", "generation_result": [{"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t    if (enemy instanceof Mimic && !((Mimic) enemy).alignment.equals(hero.alignment)) {\n        return false;\n    }\n\n    boolean success = attack(enemy, wep);\n    if (success) {\n        hero.sprite.operate(hero.pos);\n        hero.sprite.attack(enemy.pos);\n        if (hero.isAlive()) {\n            hero.spendAndNext(Time.ATTACK);\n        }\n\n        if (hero.buff(Barrier.class) != null) {\n            hero.buff(Barrier.class).absorb(wep.damageRoll());\n        }\n\n        if (hero.buff(Berserk.class) != null) {\n            hero.buff(Berserk.class).absorb(wep.damageRoll());\n        }\n\n        if (hero.buff(Charm.class) != null) {\n            hero.buff(Charm.class).absorb(wep.damageRoll());\n        }\n\n        if (hero.buff(Combo.class) != null) {\n            hero.buff(Combo.class).absorb(wep.damageRoll());\n        }\n\n        if (hero.buff(MonkEnergy.class) != null) {\n            hero.buff(MonkEnergy.class).absorb(wep.damageRoll());\n        }\n\n        if (hero.buff(NaturesPower.class) != null) {\n            hero.buff(NaturesPower.class).absorb(wep.damageRoll());\n        }\n\n        if (hero.buff(SnipersMark.class) != null) {\n            hero.buff(SnipersMark.class).absorb(wep.damageRoll());\n        }\n\n        if (hero.buff(ElementalStrike.class) != null) {\n            hero.buff(ElementalStrike.class).absorb(wep.damageRoll());\n        }\n\n        if (hero.buff(Challenge.class) != null) {\n            hero", "CodeBleu_score": 18.993845504487133}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t\n    boolean success = false;\n    boolean enemyAligned = enemy instanceof Mob && !((Mob) enemy).alignment.equals( Alignment.ENEMY ) || enemy instanceof Mimic && !((Mimic) enemy).alignment.equals( Alignment.ENEMY );\n\n    if ( enemyAligned ) {\n\n        int base = wep.accuracyFactor( attacker );\n        int roll = Random.Int( base, base * 2 );\n\n        if ( roll >= enemy.defenseSkill( attacker ) ) {\n\n            if ( attacker.hero() ) {\n                attacker.spendAndNext( Time.ATTACK );\n                attacker.busy();\n            }\n\n            wep.setThrown( true );\n\n            success = true;\n\n            if ( attacker.hero() ) {\n                if ( attacker.heroClass == HeroClass.GLADIATOR ) {\n                    Buff.affect( attacker, Combo.class );\n                } else if ( attacker.heroClass == HeroClass.DUELIST ) {\n                    Buff.affect( attacker, Combo.class );\n                    Buff.affect( attacker, Combo.class );\n                }\n            }\n\n            if ( attacker.hero() && attacker.heroClass == HeroClass.DUELIST ) {\n                Buff.affect( attacker, Challenge.class );\n            }\n\n            if ( attacker.hero() && attacker.heroClass == HeroClass.GLADIATOR ) {\n                Buff.affect( attacker, ElementalStrike.class );\n            }\n\n            if ( attacker.hero() && attacker.heroClass == HeroClass.HUNTRESS ) {\n                Buff.affect( attacker, NaturesPower.class );\n            }\n\n            if ( attacker.hero() && attacker.heroClass == HeroClass.WARRIOR ) {\n                Buff.affect( attacker, Endure.class );\n            }\n\n            if ( attacker.hero() && attacker.heroClass == HeroClass.MONK ) {\n                Buff.affect( attacker, MonkEnergy.class );\n            }\n\n            if", "CodeBleu_score": 26.610090666300067}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t\n    if (enemy.alignment == Char.Alignment.ENEMY || enemy.alignment == Char.Alignment.NEUTRAL_MIMIC) {\n\n        int dmg = wep.damageRoll();\n        wep.setThrown( true );\n\n        if (attack( enemy, dmg )) {\n\n            if (hero.heroClass == Hero.HeroClass.GLADIATOR) {\n                hero.buff( Combo.class ).combo();\n            }\n\n            if (hero.heroClass == Hero.HeroClass.DUELIST) {\n                hero.buff( Combo.class ).combo();\n            }\n\n            return true;\n\n        } else {\n            wep.setThrown( false );\n            return false;\n        }\n\n    } else {\n        return false;\n    }\n}", "CodeBleu_score": 25.21981022255896}]}
{"instance_id": "f265b39b6677", "generation_result": [{"code": "public int attackSkill( Char target ){\n\t    int skill = Math.max( 0, level() + dex() );\n\n    if (weapon instanceof Weapon) {\n        skill += ((Weapon) weapon).accuracyFactor( target );\n    }\n\n    if (target.buff(Barrier.class) != null) {\n        skill = Math.round(skill * 0.75f);\n    }\n\n    if (target.buff(SnipersMark.class) != null) {\n        skill = Math.round(skill * 0.8f);\n    }\n\n    if (target.buff(Burning.class) != null) {\n        skill = Math.round(skill * 0.7f);\n    }\n\n    if (target.buff(Paralysis.class) != null) {\n        skill = Math.round(skill * 0.7f);\n    }\n\n    if (target.buff(Vertigo.class) != null) {\n        skill = Math.round(skill * 0.7f);\n    }\n\n    if (target.buff(Drowsy.class) != null) {\n        skill = Math.round(skill * 0.7f);\n    }\n\n    if (target.buff(Charm.class) != null) {\n        skill = Math.round(skill * 0.7f);\n    }\n\n    if (target.buff(Foresight.class) != null) {\n        skill = Math.round(skill * 0.7f);\n    }\n\n    if (target.buff(Awareness.class) != null) {\n        skill = Math.round(skill * 0.7f);\n    }\n\n    if (target.buff(AscensionChallenge.class) != null) {\n        skill = Math.round(skill * 0.7f);\n    }\n\n    if (target.buff(Burning.class) != null) {\n        skill = Math.round(skill * 0.7f);\n    }\n\n    if (target.buff(MindVision.class) !=", "CodeBleu_score": 25.1936964575769}, {"code": "public int attackSkill( Char target ){\n\t    int skill = Math.max( 0, level() + attackSkillBonus() );\n\n    //weapon\n    Weapon weapon = weapon();\n    if (weapon != null) {\n        if (weapon.kind() == KindOfWeapon.BOW) {\n            skill += weapon.accuracyFactor() * Ballistica.BOW_ACCURACY_FACTOR;\n        } else {\n            skill += weapon.accuracyFactor();\n        }\n    }\n\n    //accuracy multipliers\n    skill *= accuracyMultiplier();\n    skill *= target.defenseMultiplier();\n\n    //buffs\n    if (buff(Barkskin.class) != null) {\n        skill += Barkskin.ACCURACY_BONUS;\n    }\n    if (buff(Berserk.class) != null) {\n        skill += Berserk.ACCURACY_BONUS;\n    }\n    if (buff(Invisibility.class) != null) {\n        skill += Invisibility.ACCURACY_BONUS;\n    }\n    if (buff(Levitation.class) != null) {\n        skill += Levitation.ACCURACY_BONUS;\n    }\n    if (buff(Paralysis.class) != null) {\n        skill += Paralysis.ACCURACY_BONUS;\n    }\n    if (buff(Vertigo.class) != null) {\n        skill += Vertigo.ACCURACY_BONUS;\n    }\n\n    return skill;\n}", "CodeBleu_score": 27.79079693134237}, {"code": "public int attackSkill( Char target ){\n\t\n    int skill = Math.round( attackSkill() * ( 1 + buffedAttackSkill() ) );\n\n    //weapon type\n    if (weapon instanceof MagesStaff) {\n        skill *= 1.5f;\n    } else if (weapon instanceof Quarterstaff) {\n        skill *= 1.25f;\n    } else if (weapon instanceof Sai) {\n        skill *= 1.1f;\n    } else if (weapon instanceof Flail) {\n        skill *= 0.8f;\n    } else if (weapon instanceof Scimitar) {\n        skill *= 0.75f;\n    } else if (weapon instanceof SpiritBow) {\n        skill *= 1.25f;\n    } else if (weapon instanceof RoundShield) {\n        skill *= 1.5f;\n    }\n\n    //proximity\n    if (Ballistica.distance( this, target ) > weapon.range() ) {\n        skill *= 0.5f;\n    }\n\n    //buffs\n    if (isAlive()) {\n        if (isBuffActive(Barrier.class)) {\n            skill *= 1.5f;\n        }\n\n        if (isBuffActive(Berserk.class)) {\n            skill *= 1.25f;\n        }\n\n        if (isBuffActive(Bless.class)) {\n            skill *= 1.25f;\n        }\n\n        if (isBuffActive(Charm.class)) {\n            skill *= 1.25f;\n        }\n\n        if (isBuffActive(Foresight.class)) {\n            skill *= 1.25f;\n        }\n\n        if (isBuffActive(Momentum.class)) {\n            skill *= 1.25f;\n        }\n\n        if (isBuffActive(SnipersMark.class)) {\n            skill *= 1.25f;\n        }\n\n        if (isBuffActive(Vertigo.class)) {\n            skill *= 1.25f;\n        }\n    }\n\n", "CodeBleu_score": 24.268840284232407}]}
{"instance_id": "9e50c198348d", "generation_result": [{"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\t  start()\n  repeat(repeats) { operation() }\n  stop()\n  if (printResults) {\n    println(\"${this.name} took ${time.mean}ms (${time.mean / 1000}s)\")\n  }\n}", "CodeBleu_score": 59.57631513898385}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\t  val time = time\n  time.start()\n  repeat(repeats) { operation() }\n  time.stop()\n  if (printResults) {\n    val mean = time.mean\n    val windowSize = mean.windowSize\n    val windowAverage = mean.windowAverage\n    val windowFps = mean.windowFps\n    val windowAverageFps = mean.windowAverageFps\n    val windowMax = mean.windowMax\n    val windowAverageMax = mean.windowAverageMax\n    val windowMin = mean.windowMin\n    val windowAverageMin = mean.windowAverageMin\n    val windowMaxDelta = mean.windowMaxDelta\n    val windowAverageMaxDelta = mean.windowAverageMaxDelta\n    val windowMinDelta = mean.windowMinDelta\n    val windowAverageMinDelta = mean.windowAverageMinDelta\n    val windowTotal = mean.windowTotal\n    val windowAverageTotal = mean.windowAverageTotal\n    val windowAverageDelta = mean.windowAverageDelta\n    val windowDelta = mean.windowDelta\n    val windowAverageDelta = mean.windowAverageDelta\n    val windowAverageDeltaPercent = mean.windowAverageDeltaPercent\n    val windowAverageDeltaPercentPercent = mean.windowAverageDeltaPercentPercent\n    val windowAverageDeltaPercentPercentPercent = mean.windowAverageDeltaPercentPercentPercent\n    val windowAverageDeltaPercentPercentPercentPercent = mean.windowAverageDeltaPercentPercentPercentPercent\n    val windowAverageDeltaPercentPercentPercentPercentPercent = mean.windowAverageDeltaPercentPercentPercentPercentPercent\n    val windowAverageDeltaPercentPercentPercentPercentPercentPercent = mean.windowAverageDeltaPercentPercentPercentPercentPercentPercent\n    val windowAverageDeltaPercentPercentPercentPercentPercentPercentPercent = mean.windowAverageDeltaPercentPercentPercentPercentPercentPercentPercent\n    val windowAverageDeltaPercentPercentPercentPercentPercentPercentPercentPercent = mean.windowAverageDeltaPercentPercentPercentPercentPercentPer", "CodeBleu_score": 44.452806860884145}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\t  val startTime = System.currentTimeMillis()\n  val startNano = System.nanoTime()\n\n  for (i in 0 until repeats) {\n    operation()\n  }\n\n  val endTime = System.currentTimeMillis()\n  val endNano = System.nanoTime()\n\n  if (printResults) {\n    val time = endTime - startTime\n    val nano = endNano - startNano\n    val timePer = time.toDouble() / repeats.toDouble()\n    val nanoPer = nano.toDouble() / repeats.toDouble()\n\n    Gdx.app.log(\n      \"PerformanceCounter\",\n      \"$repeats repeats took $time ms ($nano ns) - $timePer ms/repeat ($nanoPer ns/repeat)\"\n    )\n  }\n}", "CodeBleu_score": 47.13746683296186}]}
{"instance_id": "5f6e11998a1f", "generation_result": [{"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t  contract {\n    callsInPlace(init, InvocationKind.EXACTLY_ONCE)\n  }\n  return BehaviorTree<E>(rootTask, blackboard).apply(init)\n}", "CodeBleu_score": 61.137184069834404}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t  contract {\n    callsInPlace(init, InvocationKind.EXACTLY_ONCE)\n  }\n  return BehaviorTree<E>(rootTask, blackboard).apply(init)\n}", "CodeBleu_score": 61.137184069834404}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t  contract { callsInPlace(init, InvocationKind.EXACTLY_ONCE) }\n  val behaviorTree = BehaviorTree<E>(rootTask, blackboard)\n  behaviorTree.init()\n  return behaviorTree\n}", "CodeBleu_score": 91.18026714954756}]}
{"instance_id": "cdda12e45fb9", "generation_result": [{"code": "onPointerOver (){\n\t  this.map.selectedCell = this.position\n\n  this.map.cells.forEach(cell => {\n    if (this.related(cell)) {\n      cell.setTint(0x00ff00)\n      cell.setAlpha(0.5)\n    } else {\n      cell.clearTint()\n      cell.setAlpha(1)\n    }\n  })\n}", "CodeBleu_score": 23.727437492701487}, {"code": "onPointerOver (){\n\t  const { x, y } = this.getCoordinates(this.pointer)\n  const { map } = this\n\n  map.selectedCell = { x, y }\n\n  const cell = map.getCell(x, y)\n  const heightmap = cell.getHeightmap()\n  if (heightmap) {\n    heightmap.setAlpha(0.2)\n  }\n\n  const related = map.getRelatedCells(x, y)\n  const cells = [cell, ...related]\n\n  cells.forEach(cell => {\n    const heightmap = cell.getHeightmap()\n    if (heightmap) {\n      heightmap.setAlpha(0.4)\n    }\n  })\n}", "CodeBleu_score": 28.268850166775746}, {"code": "onPointerOver (){\n\t  const { x, y } = this.getCoordinates()\n  this.map.selectedCell = { x, y }\n\n  this.map.cells.forEach(cell => {\n    const { x: cellX, y: cellY } = cell.getCoordinates()\n    const isRelated = this.map.isRelated(x, y, cellX, cellY)\n    const isSelected = x === cellX && y === cellY\n\n    if (isRelated || isSelected) {\n      cell.setTint(0xffff00)\n      cell.setAlpha(0.7)\n    } else {\n      cell.clearTint()\n      cell.setAlpha(1)\n    }\n  })\n}", "CodeBleu_score": 31.99006264544516}]}
{"instance_id": "850931ce3401", "generation_result": [{"code": "getTrafficDensity (){\n\t    if (this.currentValue < this.lightThreshold) {\n        return null;\n    }\n    if (this.currentValue < this.heavyThreshold) {\n        return 'light';\n    }\n    return 'heavy';\n}", "CodeBleu_score": 36.352832453184384}, {"code": "getTrafficDensity (){\n\t    const currentValue = this.getCurrentValue();\n    if (currentValue < this.lightThreshold) {\n        return null;\n    } else if (currentValue < this.heavyThreshold) {\n        return 'light';\n    } else {\n        return 'heavy';\n    }\n}", "CodeBleu_score": 30.913849501664348}, {"code": "getTrafficDensity (){\n\t    const currentValue = this.getCurrentValue()\n    const lightThreshold = this.getLightThreshold()\n    const heavyThreshold = this.getHeavyThreshold()\n    if (currentValue < lightThreshold) {\n        return null\n    } else if (currentValue < heavyThreshold) {\n        return 'light'\n    } else {\n        return 'heavy'\n    }\n}", "CodeBleu_score": 26.511737775536393}]}
{"instance_id": "5958478bf873", "generation_result": [{"code": "restart: function (){\n\t    // Reset the current value to the initial value\n    this.currentValue = this.initialValue;\n\n    // Update the traffic density based on the current value\n    this.trafficDensity = this.getTrafficDensity();\n\n    // Call the update() method to update the traffic density\n    this.update();\n}", "CodeBleu_score": 8.78500410821528}, {"code": "restart: function (){\n\t    this.currentValue = 0;\n    this.currentDensity = null;\n    this.lightThreshold = 0.2;\n    this.heavyThreshold = 0.7;\n    this.lastUpdate = null;\n}", "CodeBleu_score": 11.249546567513427}, {"code": "restart: function (){\n\t    this.currentValue = 0;\n    this.lastUpdate = Date.now();\n    this.trafficDensity = 'light';\n  }", "CodeBleu_score": 10.22928383742315}]}
{"instance_id": "d2441e586d58", "generation_result": [{"code": "flash: function (color, duration, force, alpha){\n\t    // Set default values for parameters if undefined\n    color = color || \"white\";\n    duration = duration || 1000;\n    force = force || 1;\n    alpha = alpha || 1;\n\n    // Clear any existing effect\n    this.clearEffects();\n\n    // Draw a rectangle with the given color and alpha\n    this.drawRect({\n        fillStyle: color,\n        globalAlpha: alpha\n    });\n\n    // Set the effect duration\n    this.effects.duration = duration;\n\n    // Return false if certain conditions are not met\n    if (!this.visible || this.alpha === 0 || this.dead || duration === 0) {\n        return false;\n    }\n\n    // Return true if all conditions are met\n    return true;\n}", "CodeBleu_score": 45.59214331741686}, {"code": "flash: function (color, duration, force, alpha){\n\t    var self = this;\n    if (typeof color === 'undefined') {\n        color = '#ffffff';\n    }\n    if (typeof duration === 'undefined') {\n        duration = 1000;\n    }\n    if (typeof force === 'undefined') {\n        force = true;\n    }\n    if (typeof alpha === 'undefined') {\n        alpha = 1;\n    }\n    if (duration === 0) {\n        return false;\n    }\n    if (force === false && this.flashEffect) {\n        return false;\n    }\n    this.clearEffects();\n    this.flashEffect = this.scene.add.graphics();\n    this.flashEffect.fillStyle(color, alpha);\n    this.flashEffect.fillRect(-this.width / 2, -this.height / 2, this.width, this.height);\n    this.flashEffect.setDepth(this.depth + 0.1);\n    this.flashEffect.setScrollFactor(0);\n    if (this.body) {\n        this.flashEffect.setPosition(this.body.position.x, this.body.position.y);\n    } else {\n        this.flashEffect.setPosition(this.x, this.y);\n    }\n    this.scene.time.addEvent({\n        delay: duration,\n        callback: function () {\n            self.flashEffect.destroy();\n            self.flashEffect = undefined;\n        }\n    });\n    return true;\n}", "CodeBleu_score": 45.438851985131926}, {"code": "flash: function (color, duration, force, alpha){\n\t    var self = this;\n    if (typeof color === 'undefined') {\n        color = '#ffffff';\n    }\n    if (typeof duration === 'undefined') {\n        duration = 1000;\n    }\n    if (typeof force === 'undefined') {\n        force = true;\n    }\n    if (typeof alpha === 'undefined') {\n        alpha = 1;\n    }\n    if (!force && self.alpha > 0) {\n        return false;\n    }\n    self.clearEffects();\n    self.game.debug.geom(self.body, color);\n    self.alpha = alpha;\n    self.tint = Phaser.Color.hexToRGB(color);\n    self.effect = self.game.add.tween(self).to({\n        alpha: 0\n    }, duration, Phaser.Easing.Linear.None, true, 0, 0, true);\n    return true;\n}", "CodeBleu_score": 40.27509030082614}]}
{"instance_id": "48b26381d975", "generation_result": [{"code": "createFluidLayer: function (children, addToWorld){\n\t    var layer = new FlexLayer({\n        name: 'fluid',\n        type: 'fluid',\n        isStatic: false,\n        isSleeping: false,\n        isKinematic: true,\n        isSensor: false,\n        isBullet: false,\n        isActive: true,\n        isVisible: true,\n        isAwake: true,\n        isFixedRotation: false,\n        isGravityScale: false,\n        isAllowSleep: true,\n        isBounce: false,\n        isFriction: false,\n        isFrictionStatic: false,\n        isFrictionAir: false,\n        isFrictionGround: false,\n        isFrictionWater: false,\n        isFrictionIce: false,\n        isFrictionGrass: false,\n        isFrictionSand: false,\n        isFrictionWood: false,\n        isFrictionMetal: false,\n        isFrictionRubber: false,\n        isFrictionCushion: false,\n        isFrictionPillow: false,\n        isFrictionStone: false,\n        isFrictionWoodPlank: false,\n        isFrictionMetalPlank: false,\n        isFrictionRubberPlank: false,\n        isFrictionCushionPlank: false,\n        isFrictionPillowPlank: false,\n        isFrictionStonePlank: false,\n        isFrictionWoodPlank: false,\n        isFrictionMetalPlank: false,\n        isFrictionRubberPlank: false,\n        isFrictionCushionPlank: false,\n        isFrictionPillowPlank: false,\n        isFrictionStonePlank: false,\n        isFrictionWoodPlank: false,\n        isFrictionMetalPlank: false,\n        isFrictionRubberPlank: false,\n        isFrictionCushionPlank: false,\n        isFrictionPillowPlank: false,\n        isFrictionStonePlank: false,\n        isFrictionWoodPlank: false,\n        isFrictionMetalPlank: false,", "CodeBleu_score": 6.290234376708027}, {"code": "createFluidLayer: function (children, addToWorld){\n\t    var layer = new FlexLayer();\n    layer.setFluid(true);\n    layer.setFluidDensity(this.fluidDensity);\n    layer.setFluidViscosity(this.fluidViscosity);\n    layer.setFluidFriction(this.fluidFriction);\n    layer.setFluidElasticity(this.fluidElasticity);\n    layer.setFluidPressure(this.fluidPressure);\n    layer.setFluidColor(this.fluidColor);\n    layer.setFluidSurfaceTension(this.fluidSurfaceTension);\n    layer.setFluidDrag(this.fluidDrag);\n    layer.setFluidAngularDrag(this.fluidAngularDrag);\n    layer.setFluidFlow(this.fluidFlow);\n    layer.setFluidFlowSpeed(this.fluidFlowSpeed);\n    layer.setFluidFlowDirection(this.fluidFlowDirection);\n    layer.setFluidFlowNoise(this.fluidFlowNoise);\n    layer.setFluidFlowNoiseFrequency(this.fluidFlowNoiseFrequency);\n    layer.setFluidFlowNoiseAmplitude(this.fluidFlowNoiseAmplitude);\n    layer.setFluidFlowNoiseSpeed(this.fluidFlowNoiseSpeed);\n    layer.setFluidFlowNoiseOffset(this.fluidFlowNoiseOffset);\n    layer.setFluidFlowNoiseScale(this.fluidFlowNoiseScale);\n    layer.setFluidFlowNoiseSeed(this.fluidFlowNoiseSeed);\n    layer.setFluidFlowNoiseType(this.fluidFlowNoiseType);\n    layer.setFluidFlowNoiseQuality(this.fluidFlowNoiseQuality);\n    layer.setFluidFlowNoiseFractalType(this.fluidFlowNoiseFractalType);\n    layer.setFluidFlowNoiseFractalOctaves(this.fluidFlowNoiseFractalOctaves);\n    layer.setFluidFlowNoiseFractalLacunarity(this.fluidFlowNoiseFractalLacun", "CodeBleu_score": 14.73833548543199}, {"code": "createFluidLayer: function (children, addToWorld){\n\t    var layer = new FlexLayer();\n    layer.setFluid(true);\n    layer.setFluidDensity(this.fluidDensity);\n    layer.setFluidFriction(this.fluidFriction);\n    layer.setFluidRestitution(this.fluidRestitution);\n    layer.setFluidLinearDamping(this.fluidLinearDamping);\n    layer.setFluidAngularDamping(this.fluidAngularDamping);\n    layer.setFluidGravityScale(this.fluidGravityScale);\n    layer.setFluidSurfaceLayer(this.fluidSurfaceLayer);\n    layer.setFluidTopSpeed(this.fluidTopSpeed);\n    layer.setFluidWind(this.fluidWind);\n    layer.setFluidWindChange(this.fluidWindChange);\n    layer.setFluidWindChangeInterval(this.fluidWindChangeInterval);\n    layer.setFluidWindChangeRandom(this.fluidWindChangeRandom);\n    layer.setFluidWindChangeRandomInterval(this.fluidWindChangeRandomInterval);\n    layer.setFluidWindChangeRandomMax(this.fluidWindChangeRandomMax);\n    layer.setFluidWindChangeRandomMin(this.fluidWindChangeRandomMin);\n    layer.setFluidWindChangeRandomMaxInterval(this.fluidWindChangeRandomMaxInterval);\n    layer.setFluidWindChangeRandomMinInterval(this.fluidWindChangeRandomMinInterval);\n    layer.setFluidWindChangeRandomMaxInterval(this.fluidWindChangeRandomMaxInterval);\n    layer.setFluidWindChangeRandomMinInterval(this.fluidWindChangeRandomMinInterval);\n    layer.setFluidWindChangeRandomMaxInterval(this.fluidWindChangeRandomMaxInterval);\n    layer.setFluidWindChangeRandomMinInterval(this.fluidWindChangeRandomMinInterval);\n    layer.setFluidWindChangeRandomMaxInterval(this.fluidWindChangeRandomMaxInterval);\n    layer.setFluidWindChangeRandomMinInterval(this.fluid", "CodeBleu_score": 14.43528211204288}]}
{"instance_id": "624c9e2eb19f", "generation_result": [{"code": "createFullLayer: function (children){\n\t    var layer = this.createLayer(0, 0, this.game.width, this.game.height, 1, 1);\n    if (children) {\n        layer.addChildren(children);\n    }\n    return layer;\n}", "CodeBleu_score": 42.827355908566275}, {"code": "createFullLayer: function (children){\n\t  var layer = this.game.add.group();\n  this.layers.push(layer);\n\n  if (children) {\n    children.forEach(function (child) {\n      layer.add(child);\n    });\n  }\n\n  return layer;\n}", "CodeBleu_score": 41.3831480351194}, {"code": "createFullLayer: function (children){\n\t  var layer = this.add.layer();\n  layer.setPosition(0, 0);\n  layer.setBounds(0, 0, this.game.width, this.game.height);\n  layer.setScale(1, 1);\n  this.layers.push(layer);\n  if (children) {\n    layer.addMultiple(children);\n  }\n  return layer;\n}", "CodeBleu_score": 45.82681199811779}]}
{"instance_id": "1c7529bca3ce", "generation_result": [{"code": "crop: function (rect, copy){\n\t    if (rect) {\n        this.cropRect = rect;\n        this.updateCrop(copy);\n    } else {\n        this.cropRect = null;\n        this.resetFrame();\n    }\n}", "CodeBleu_score": 17.061172632441686}, {"code": "crop: function (rect, copy){\n\t    if (rect) {\n        if (copy) {\n            this.cropRect = rect.clone();\n        } else {\n            this.cropRect = rect;\n        }\n        this.updateCrop();\n    } else {\n        this.resetFrame();\n    }\n}", "CodeBleu_score": 27.084236389999738}, {"code": "crop: function (rect, copy){\n\t    var frame = this.getFrame();\n    var crop = this.getCrop();\n    var cropped = this.getCropped();\n    var croppedRect = this.getCroppedRect();\n    var croppedRectRatio = this.getCroppedRectRatio();\n    var croppedRectRatioInverted = this.getCroppedRectRatioInverted();\n    var croppedRectRatioInvertedRatio = this.getCroppedRectRatioInvertedRatio();\n    var croppedRectRatioInvertedRatioInverted = this.getCroppedRectRatioInvertedRatioInverted();\n    var croppedRectRatioInvertedRatioInvertedRatio = this.getCroppedRectRatioInvertedRatioInvertedRatio();\n    var croppedRectRatioInvertedRatioInvertedRatioInverted = this.getCroppedRectRatioInvertedRatioInvertedRatioInverted();\n    var croppedRectRatioInvertedRatioInvertedRatioInvertedRatio = this.getCroppedRectRatioInvertedRatioInvertedRatioInvertedRatio();\n    var croppedRectRatioInvertedRatioInvertedRatioInvertedRatioInverted = this.getCroppedRectRatioInvertedRatioInvertedRatioInvertedRatioInverted();\n    var croppedRectRatioInvertedRatioInvertedRatioInvertedRatioInvertedRatio = this.getCroppedRectRatioInvertedRatioInvertedRatioInvertedRatioInvertedRatio();\n    var croppedRectRatioInvertedRatioInvertedRatioInvertedRatioInvertedRatioInverted = this.getCroppedRectRatioInvertedRatioInvertedRatioInvertedRatioInvertedRatioInverted();\n    var croppedRectRatioInvertedRatioInvertedRatioInvertedRatioInvertedRatioInvertedRatio = this.getCroppedRectRatioInvertedRatioInvertedRatioInvertedRatioInvertedRatioInvertedRatioInverted();\n    var croppedRectRatioInvertedRatioInvertedRatioInvertedRatioInvertedRatioInvertedRatioInverted = this.", "CodeBleu_score": 17.60147681616354}]}
{"instance_id": "d767b9ea9212", "generation_result": [{"code": "move: function (x, y, wrap){\n\t    if (x !== 0) {\n        this.moveH(x, wrap);\n    }\n    if (y !== 0) {\n        this.moveV(y, wrap);\n    }\n    return this;\n}", "CodeBleu_score": 84.73897543219616}, {"code": "move: function (x, y, wrap){\n\t  if (x !== 0) {\n    this.moveH(x, wrap);\n  }\n  if (y !== 0) {\n    this.moveV(y, wrap);\n  }\n  return this;\n}", "CodeBleu_score": 80.85287394581098}, {"code": "move: function (x, y, wrap){\n\t  if (x !== 0) this.moveH(x, wrap);\n  if (y !== 0) this.moveV(y, wrap);\n  return this;\n}", "CodeBleu_score": 55.44365807702515}]}
{"instance_id": "c7cf015114f3", "generation_result": [{"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\n    if (this.frozenFrames)\n    {\n        return false;\n    }\n\n    var frame = this.frames[state];\n\n    if (frame !== undefined)\n    {\n        this.frame = frame;\n\n        return true;\n    }\n\n    return false;\n\n}", "CodeBleu_score": 35.118319402940884}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\n    if (this.frozenFrames)\n    {\n        return false;\n    }\n\n    var frame = this.frames[state];\n\n    if (frame !== undefined)\n    {\n        this.frame = frame;\n\n        return true;\n    }\n\n    return false;\n\n}", "CodeBleu_score": 35.118319402940884}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t    if (this.frozenFrames) {\n        return false;\n    }\n\n    var key = this.key + '_' + state;\n\n    if (this.frames.hasOwnProperty(key)) {\n        var frame = this.frames[key];\n\n        if (typeof frame === 'string') {\n            this.frameName = frame;\n        } else if (typeof frame === 'number') {\n            this.frame = frame;\n        } else {\n            return false;\n        }\n\n        return true;\n    }\n\n    return false;\n}", "CodeBleu_score": 62.00171442620732}]}
{"instance_id": "e0294cb83ca3", "generation_result": [{"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\n    var weapon = new Phaser.Weapon(this.game, this);\n\n    if (bulletClass) {\n        weapon.bulletClass = bulletClass;\n    }\n\n    weapon.createBullets(quantity, key, frame, group);\n\n    return weapon;\n\n}", "CodeBleu_score": 74.20674729469421}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\n    //  Create a new weapon\n    var weapon = new Phaser.Weapon(this.game, this);\n\n    //  If a custom bullet class was specified, use it\n    if (bulletClass)\n    {\n        weapon.bulletClass = bulletClass;\n    }\n\n    //  Create the bullets\n    weapon.createBullets(quantity, key, frame, group);\n\n    return weapon;\n\n}", "CodeBleu_score": 74.82729927518245}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\n    var weapon = new Phaser.Weapon(this.game, this.game.plugins);\n\n    weapon.bulletClass = bulletClass || Phaser.Bullet;\n\n    weapon.createBullets(quantity, key, frame, group);\n\n    return weapon;\n\n}", "CodeBleu_score": 59.43704610092526}]}
{"instance_id": "2fca91787d6c", "generation_result": [{"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t    if (cull) {\n        var normal = new Phaser.Point(0, 0);\n        Phaser.Point.normalize(points[1].x - points[0].x, points[1].y - points[0].y, normal);\n        var dot = Phaser.Point.dot(normal.x, normal.y, this.game.camera.position.x, this.game.camera.position.y);\n        if (dot <= 0) {\n            return;\n        }\n    }\n\n    this.moveTo(points[0].x, points[0].y);\n    this.lineTo(points[1].x, points[1].y);\n    this.lineTo(points[2].x, points[2].y);\n    this.lineTo(points[0].x, points[0].y);\n}", "CodeBleu_score": 37.360518462525626}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\n    if (cull) {\n        var v1 = points[1].clone().subtract(points[0]);\n        var v2 = points[2].clone().subtract(points[0]);\n        var normal = v1.crossProduct(v2);\n        var dot = normal.dotProduct(this.game.camera.position.clone().subtract(points[0]));\n        if (dot > 0)\n            return;\n    }\n\n    this.lineStyle(0);\n    this.beginFill(this.fillColor, this.fillAlpha);\n    this.moveTo(points[0].x, points[0].y);\n    this.lineTo(points[1].x, points[1].y);\n    this.lineTo(points[2].x, points[2].y);\n    this.endFill();\n}", "CodeBleu_score": 36.58979185101098}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\n    // If culling is enabled, calculate the face normal\n    if (cull) {\n        var v1 = new Phaser.Point(points[1].x - points[0].x, points[1].y - points[0].y);\n        var v2 = new Phaser.Point(points[2].x - points[0].x, points[2].y - points[0].y);\n        var normal = new Phaser.Point(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n\n        // Check if the triangle is facing the camera\n        if (normal.z > 0) {\n            // Draw the triangle\n            this.beginFill(this.fillColor, this.fillAlpha);\n            this.moveTo(points[0].x, points[0].y);\n            this.lineTo(points[1].x, points[1].y);\n            this.lineTo(points[2].x, points[2].y);\n            this.endFill();\n        }\n    } else {\n        // Draw the triangle without culling\n        this.beginFill(this.fillColor, this.fillAlpha);\n        this.moveTo(points[0].x, points[0].y);\n        this.lineTo(points[1].x, points[1].y);\n        this.lineTo(points[2].x, points[2].y);\n        this.endFill();\n    }\n}", "CodeBleu_score": 44.458209778059896}]}
{"instance_id": "5d227ea7f97b", "generation_result": [{"code": "checkVideoProgress: function (){\n\t  if (this.video.readyState === this.video.HAVE_ENOUGH_DATA) {\n    this.stopPendingSourceChange();\n    this.updateTexture();\n  } else {\n    this.retryCount--;\n    if (this.retryCount > 0) {\n      setTimeout(this.checkVideoProgress.bind(this), 1000);\n    } else {\n      console.warn(\"Video failed to start downloading after \" + this.maxRetries + \" retries.\");\n    }\n  }\n}", "CodeBleu_score": 33.084699441681444}, {"code": "checkVideoProgress: function (){\n\t    if (this.video.readyState === this.video.HAVE_ENOUGH_DATA) {\n        this.stopPendingSourceChange();\n        this.updateTexture();\n    } else {\n        if (this.videoRetries > 0) {\n            this.videoRetries--;\n            setTimeout(this.checkVideoProgress, this.videoRetryTimeout);\n        } else {\n            console.warn('Video failed to start downloading within the allowed retries.');\n        }\n    }\n}", "CodeBleu_score": 34.26542215784353}, {"code": "checkVideoProgress: function (){\n\t    if (this.video.readyState === this.video.HAVE_ENOUGH_DATA) {\n        this.cancelPendingDownload();\n        this.updateTexture();\n    } else {\n        if (this.videoRetries > 0) {\n            this.videoRetries--;\n            setTimeout(this.checkVideoProgress.bind(this), 100);\n        } else {\n            console.warn(\"Video failed to start downloading within \" + this.maxVideoRetries + \" retries.\");\n        }\n    }\n}", "CodeBleu_score": 35.30014646181932}]}
{"instance_id": "e48c3c53f00a", "generation_result": [{"code": "start: function (event, value){\n\t  if (this.state !== \"down\") {\n    this.state = \"down\";\n    this.timing = 0;\n    this.repeat = 0;\n    if (event) {\n      this.altKey = event.altKey;\n      this.shiftKey = event.shiftKey;\n      this.ctrlKey = event.ctrlKey;\n    }\n    this.dispatch(\"onDown\", this.state, value);\n  }\n}", "CodeBleu_score": 46.92368825059868}, {"code": "start: function (event, value){\n\t    if (this.state !== 'down') {\n        this.state = 'down';\n        this.initTiming();\n        this.initRepeat();\n        this.event = event;\n        this.value = value;\n        if (event) {\n            this.captureModifierKeys(event);\n        }\n        this.dispatch('onDown', this.state, this.value);\n    }\n}", "CodeBleu_score": 41.18007726872078}, {"code": "start: function (event, value){\n\t  if (this.state !== 'down') {\n    this.state = 'down';\n    this.time = 0;\n    this.repeat = 0;\n    this.event = event;\n    this.value = value;\n    if (event) {\n      this.modifiers = {\n        alt: event.altKey,\n        shift: event.shiftKey,\n        ctrl: event.ctrlKey\n      };\n    }\n    this.dispatch('onDown', this.state, this.value);\n  }\n}", "CodeBleu_score": 48.063267355816784}]}
{"instance_id": "a2cb3bdacb1e", "generation_result": [{"code": "onMouseDown: function (event){\n\t    this.mouseDownEvent = event;\n    if (this.options.preventDefault) {\n        event.preventDefault();\n    }\n    if (this.options.onMouseDown) {\n        this.options.onMouseDown(event);\n    }\n    if (this.options.enableInput) {\n        this.initMouse(event);\n    }\n}", "CodeBleu_score": 41.91304461402865}, {"code": "onMouseDown: function (event){\n\t    if (this.options.inputEnabled) {\n        this.mouse = {\n            x: event.pageX,\n            y: event.pageY\n        };\n    }\n\n    if (this.options.preventDefault) {\n        event.preventDefault();\n    }\n\n    if (this.options.onMouseDown) {\n        this.options.onMouseDown(event);\n    }\n}", "CodeBleu_score": 40.48982553659541}, {"code": "onMouseDown: function (event){\n\t    var self = this;\n    self.mouseEvent = event;\n    if (self.options.preventDefault) {\n        event.preventDefault();\n    }\n    if (self.options.enableInput) {\n        self.initMouse(event);\n    }\n    if (self.options.onMouseDown) {\n        self.options.onMouseDown(event);\n    }\n}", "CodeBleu_score": 36.89875333770976}]}
{"instance_id": "88538a5b66e8", "generation_result": [{"code": "onMouseUpGlobal: function (event){\n\t    // Store the event\n    this.mouseUpEvent = event;\n\n    // Prevent default behavior if specified\n    if (this.preventDefaultOnMouseUp) {\n        event.preventDefault();\n    }\n\n    // Call the mouse down callback if defined\n    if (this.mouseUpCallback) {\n        this.mouseUpCallback(event);\n    }\n\n    // If input is enabled, assign an identifier to the event and start the mouse pointer input process\n    if (this.inputEnabled) {\n        this.mouseUpEvent.identifier = this.mousePointer.identifier;\n        this.mousePointer.processMouseUp(this.mouseUpEvent);\n    }\n}", "CodeBleu_score": 51.01603857976558}, {"code": "onMouseUpGlobal: function (event){\n\t    if (this.inputEnabled) {\n        this.input.mouse.end(event);\n    }\n}", "CodeBleu_score": 27.249681047248465}, {"code": "onMouseUpGlobal: function (event){\n\t    this.mouseDownEvent = event;\n\n    if (this.preventDefault) {\n        event.preventDefault();\n    }\n\n    if (this.mouseUpCallback) {\n        this.mouseUpCallback(event);\n    }\n\n    if (this.inputEnabled) {\n        this.startMousePointerInput(event);\n    }\n}", "CodeBleu_score": 51.228655472674504}]}
{"instance_id": "bf8b43ab3487", "generation_result": [{"code": "onTouchEnter: function (event){\n\t    if (!this.gameInputEnabled || !this.enabled) {\n        return;\n    }\n\n    this.touchEnterEvent = event;\n\n    if (this.touchEnterCallback) {\n        this.touchEnterCallback(event);\n    }\n\n    if (this.preventDefaultTouchEnter) {\n        event.preventDefault();\n    }\n}", "CodeBleu_score": 69.48795057453448}, {"code": "onTouchEnter: function (event){\n\t    if (!this.gameInput || !this.enabled) return;\n\n    this.touchEnterEvent = event;\n    if (this.touchEnterCallback) this.touchEnterCallback(event);\n    if (this.preventDefaultOnTouchEnter) event.preventDefault();\n}", "CodeBleu_score": 56.07642370347461}, {"code": "onTouchEnter: function (event){\n\t    if (this.gameInputEnabled && this.enabled) {\n        this.touchEvent = event;\n        if (this.touchEnterCallback) {\n            this.touchEnterCallback(event);\n        }\n        if (this.preventDefault) {\n            event.preventDefault();\n        }\n    }\n}", "CodeBleu_score": 66.3623502238795}]}
