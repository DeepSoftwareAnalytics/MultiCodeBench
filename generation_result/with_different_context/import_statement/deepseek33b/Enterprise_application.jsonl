{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t\n\n    attachment_ids = args.get(\"attachment_ids\")\n    if attachment_ids:\n        attachment_ids = [int(attachment_id) for attachment_id in attachment_ids]\n\n        # Check if the user has read access to the attachments\n        attachments = request.env[\"ir.attachment\"].browse(attachment_ids)\n        attachments.check_access_rights(\"read\")\n\n        # Check if the user has access to the attachments' rules\n        attachments.check_access_rule(\"read\")\n\n        # Build the zip file\n        zip_file = request.env[\"ir.attachment\"].export_zip(attachments)\n\n        # Prepare the HTTP headers for the zip file\n        headers = [\n            (\"Content-Type\", \"application/zip\"),\n            (\"Content-Disposition\", content_disposition(\"attachments.zip\")),\n        ]\n\n        # Return the zip file as an HTTP response\n        return request.make_response(zip_file, headers=headers)", "CodeBleu_score": 38.55289098405862}, {"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = args.get('attachment_ids')\n    if attachment_ids:\n        attachment_ids = [int(attachment_id) for attachment_id in attachment_ids]\n        attachment_ids = self.env['ir.attachment'].browse(attachment_ids)\n        attachment_ids.check_access_rights('read')\n        attachment_ids.check_access_rule('read')\n        zip_filename = args.get('zip_filename', 'attachments.zip')\n        zip_file = self.env['ir.attachment'].export_zip(attachment_ids, zip_filename)\n        headers = {\n            'Content-Type': 'application/zip',\n            'Content-Disposition': content_disposition(zip_filename),\n        }\n        return request.make_response(zip_file, headers=headers)\n    else:\n        return request.not_found()", "CodeBleu_score": 41.16931139340741}, {"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = args.get('attachment_ids')\n    if attachment_ids:\n        attachment_ids = [int(attachment_id) for attachment_id in attachment_ids]\n        attachments = request.env['ir.attachment'].browse(attachment_ids)\n        for attachment in attachments:\n            attachment.check_access_rights('read')\n            attachment.check_access_rule('read')\n        zip_filename = _('Documents')\n        zip_content = attachments.export_zip()\n        headers = [\n            ('Content-Type', 'application/zip'),\n            ('Content-Length', len(zip_content)),\n            ('Content-Disposition', content_disposition(zip_filename)),\n        ]\n        return request.make_response(zip_content, headers)\n\n", "CodeBleu_score": 41.18739225716547}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(CustomerPortal, self)._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        if not request.env['account.move'].check_access_rights('read', raise_exception=False):\n            counters['invoice_count'] = 0\n        else:\n            invoices = request.env['account.move'].search_count([\n                ('move_type', 'in', ('out_invoice', 'out_refund')),\n                ('partner_id', 'child_of', request.env.user.partner_id.commercial_partner_id.id),\n            ])\n            counters['invoice_count'] = invoices\n    if 'bill_count' in counters:\n        if not request.env['account.move'].check_access_rights('read', raise_exception=False):\n            counters['bill_count'] = 0\n        else:\n            bills = request.env['account.move'].search_count([\n                ('move_type', 'in', ('in_invoice', 'in_refund')),\n                ('partner_id', 'child_of', request.env.user.partner_id.commercial_partner_id.id),\n            ])\n            counters['bill_count'] = bills\n    return values\n\n", "CodeBleu_score": 46.02817030884444}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(CustomerPortal, self)._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        if not request.env['account.move'].check_access_rights('read', raise_exception=False):\n            raise AccessError(_(\"Sorry, you are not allowed to access this document.\"))\n        invoices = request.env['account.move'].search_count([\n            ('state', 'not in', ['draft', 'cancel']),\n            ('partner_id', 'child_of', request.env.user.partner_id.commercial_partner_id.id)\n        ])\n        values['invoice_count'] = invoices\n    if 'bill_count' in counters:\n        if not request.env['account.move'].check_access_rights('read', raise_exception=False):\n            raise AccessError(_(\"Sorry, you are not allowed to access this document.\"))\n        bills = request.env['account.move'].search_count([\n            ('state', 'not in', ['draft', 'cancel']),\n            ('move_type', '=', 'in_invoice'),\n            ('partner_id', 'child_of', request.env.user.partner_id.commercial_partner_id.id)\n        ])\n        values['bill_count'] = bills\n    return values\n\n", "CodeBleu_score": 47.70821439143842}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        if not request.env['account.move'].check_access_rights('read', raise_exception=False):\n            raise AccessError(_(\"Sorry, you are not allowed to access this document.\"))\n        invoices_count = request.env['account.move'].search_count([\n            ('move_type', 'in', ('out_invoice', 'out_refund')),\n            ('partner_id', 'child_of', request.env.user.partner_id.commercial_partner_id.id)\n        ])\n        values['invoice_count'] = invoices_count\n    if 'bill_count' in counters:\n        if not request.env['account.move'].check_access_rights('read', raise_exception=False):\n            raise AccessError(_(\"Sorry, you are not allowed to access this document.\"))\n        bills_count = request.env['account.move'].search_count([\n            ('move_type', 'in', ('in_invoice', 'in_refund')),\n            ('partner_id', 'child_of', request.env.user.partner_id.commercial_partner_id.id)\n        ])\n        values['bill_count'] = bills_count\n    return values\n\n", "CodeBleu_score": 47.9210586603913}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_portal_layout_values()\n    Invoice = request.env['account.move']\n    domain = [\n        ('state', 'not in', ['draft', 'cancel']),\n        ('move_type', 'in', ['out_invoice', 'out_refund']),\n        ('partner_id', '=', request.env.user.partner_id.id)\n    ]\n\n    searchbar_sortings = {\n        'date': {'label': _('Invoice Date'), 'order': 'invoice_date desc'},\n        'duedate': {'label': _('Due Date'), 'order': 'invoice_date_due desc'},\n        'name': {'label': _('Reference'), 'order': 'name desc'},\n        'state': {'label': _('Status'), 'order': 'state'},\n    }\n    # default sort by order\n    if not sortby:\n        sortby = 'date'\n    order = searchbar_sortings[sortby]['order']\n\n    domain = expression.AND([domain, [('state', 'not in', ('cancel', 'draft'))]])\n\n    # count for pager\n    invoice_count = Invoice.search_count(domain)\n    # pager\n    pager = portal_pager(\n        url=\"/my/invoices\",\n        url_args={'sortby': sortby},\n        total=invoice_count,\n        page=page,\n        step=self._items_per_page\n    )\n\n    # content according to pager and archive selected\n    invoices = Invoice.search(domain, order=order, limit=self._items_per_page, offset=pager['offset'])\n    request.session['my_invoices_history'] = invoices.ids[:100]\n\n    values.update({\n        'invoices': invoices,\n        'page_name': 'invoice',\n        'pager': pager,\n        'default_url': '/my/invoices',\n        'searchbar_sortings': searchbar_sortings,\n        'sortby': sortby\n    })\n    return request", "CodeBleu_score": 43.73748461685224}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_portal_layout_values()\n    Invoice = request.env['account.move']\n    domain = [('state', 'not in', ('draft', 'cancel')), ('move_type', 'in', ('out_invoice', 'out_refund'))]\n    if date_begin and date_end:\n        domain += [('invoice_date', '>', date_begin), ('invoice_date', '<=', date_end)]\n    if filterby == 'open':\n        domain += [('payment_state', '=', 'not_paid')]\n    elif filterby == 'paid':\n        domain += [('payment_state', '=', 'paid')]\n    elif filterby == 'overdue':\n        domain += [('payment_state', '=', 'not_paid'), ('invoice_date_due', '<', fields.Date.today())]\n    if sortby == 'date':\n        order = 'invoice_date desc, name desc'\n    elif sortby == 'duedate':\n        order = 'invoice_date_due asc, name desc'\n    elif sortby == 'amount':\n        order = 'amount_total_signed desc, name desc'\n    else:\n        order = 'name desc'\n    # count for pager\n    invoice_count = Invoice.search_count(domain)\n    # pager\n    pager = portal_pager(\n        url=\"/my/invoices\",\n        url_args={'sortby': sortby, 'filterby': filterby},\n        total=invoice_count,\n        page=page,\n        step=self._items_per_page\n    )\n    # content according to pager and archive selected\n    invoices = Invoice.search(domain, order=order, limit=self._items_per_page, offset=pager['offset'])\n    request.session['my_invoices_history'] = invoices.ids[:100]\n    values.update({\n        'invoices': invoices,\n        'page_name': 'invoice',\n        'pager': pager,\n        'default", "CodeBleu_score": 44.6702873896392}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_portal_layout_values()\n    Invoice = request.env['account.move']\n    domain = [\n        ('state', 'not in', ['draft', 'cancel']),\n        ('move_type', 'in', ['out_invoice', 'out_refund']),\n        ('partner_id', '=', request.env.user.partner_id.id)\n    ]\n\n    searchbar_sortings = {\n        'date': {'label': _('Invoice Date'), 'order': 'invoice_date desc'},\n        'duedate': {'label': _('Due Date'), 'order': 'invoice_date_due desc'},\n        'name': {'label': _('Reference'), 'order': 'name desc'},\n        'state': {'label': _('Status'), 'order': 'state'},\n    }\n\n    # default sort by order\n    if not sortby:\n        sortby = 'date'\n    sort_order = searchbar_sortings[sortby]['order']\n\n    archive_groups = self._get_archive_groups('account.move', domain)\n    if date_begin and date_end:\n        domain += [('invoice_date', '>', date_begin), ('invoice_date', '<=', date_end)]\n\n    # count for pager\n    invoice_count = Invoice.search_count(domain)\n    # make pager\n    pager = portal_pager(\n        url=\"/my/invoices\",\n        url_args={'sortby': sortby},\n        total=invoice_count,\n        page=page,\n        step=self._items_per_page\n    )\n\n    # content according to pager and archive selected\n    invoices = Invoice.search(domain, order=sort_order, limit=self._items_per_page, offset=pager['offset'])\n    request.session['my_invoices_history'] = invoices.ids[:100]\n\n    values.update({\n        'date': date_begin,\n        'invoices': invoices,\n        'page_name': 'invoice',\n       ", "CodeBleu_score": 41.04615182303844}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    try:\n        invoice_sudo = self._document_check_access('account.move', invoice_id, access_token=access_token)\n    except (AccessError, MissingError):\n        return request.redirect('/my')\n\n    if report_type in ('html', 'pdf', 'text'):\n        return self._show_report(model=invoice_sudo, report_type=report_type, report_ref='account.account_invoices', download=download)\n\n    if download:\n        legal_documents = request.env['account.move.legal.document'].search([('invoice_id', '=', invoice_id)])\n        if len(legal_documents) == 1:\n            return request.redirect(legal_documents.attachment_id.local_url)\n        elif len(legal_documents) > 1:\n            zip_file = request.env['ir.attachment'].zip_create(legal_documents.mapped('attachment_id'))\n            return request.make_response(zip_file, headers=_get_zip_headers(legal_documents.mapped('attachment_id')[0].name))\n\n    values = self._invoice_get_page_view_values(invoice_sudo, access_token, **kw)\n    if not access_token:\n        try:\n            self._invoice_check_access('account.move', invoice_id, access_token=access_token)\n        except AccessError:\n            return request.redirect('/my')\n        values['manage_portal'] = True\n        values['total'] = invoice_sudo.amount_total\n        values['currency'] = invoice_sudo.currency_id\n    return request.render(\"account.portal_invoice_page\", values)\n\n", "CodeBleu_score": 55.62998410425051}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    try:\n        invoice_sudo = self._document_check_access('account.move', invoice_id, access_token=access_token)\n    except (AccessError, MissingError):\n        return request.redirect('/my')\n\n    if report_type in ('html', 'pdf', 'text'):\n        return self._show_report(model=invoice_sudo, report_type=report_type, report_ref='account.account_invoices', download=download)\n\n    if download:\n        legal_documents = request.env['account.move.legal.document'].sudo().search([('invoice_id', '=', invoice_id)])\n        if len(legal_documents) == 1:\n            return request.redirect(legal_documents.download_url)\n        else:\n            zip_filename, zip_data = legal_documents._create_zip(legal_documents)\n            return request.make_response(zip_data, headers=_get_zip_headers(zip_filename))\n\n    values = self._invoice_get_page_view_values(invoice_sudo, access_token, **kw)\n    if report_type == 'xlsx':\n        return self._show_report(model=invoice_sudo, report_type=report_type, report_ref='account.action_invoice_xlsx', download=download)\n\n    return request.render(\"account.portal_invoice_page\", values)", "CodeBleu_score": 53.75807078044473}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    try:\n        invoice_sudo = self._document_check_access('account.move', invoice_id, access_token=access_token)\n    except (AccessError, MissingError):\n        return request.redirect('/my')\n\n    if report_type in ('html', 'pdf', 'text'):\n        return self._show_report(model=invoice_sudo, report_type=report_type, report_ref='account.account_invoices', download=download)\n\n    if download:\n        legal_docs = request.env['account.move']._get_legal_documents_to_zip(invoice_sudo)\n        if legal_docs:\n            zip_filename, zip_content = legal_docs.get_zip()\n            return request.make_response(zip_content, headers=[\n                ('Content-Type', 'application/octet-stream'),\n                ('Content-Disposition', 'attachment; filename=%s;' % zip_filename)\n            ])\n\n    return request.render(\"account.portal_invoice_page\", {\n        'invoice': invoice_sudo,\n        'show_address': request.env['res.users'].has_group('base.group_user'),\n        'redirect_url': '/my/invoices',\n    })\n\n", "CodeBleu_score": 42.14058376462748}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t\n    domain = [('company_id', '=', company.id)] if company else []\n    product_templates = self.env['product.template'].search(domain)\n    if company.account_sale_tax_id:\n        product_templates.write({\n            'taxes_id': [(4, company.account_sale_tax_id.id, 0)],\n            'supplier_taxes_id': [(5,)]\n        })\n    if company.account_purchase_tax_id:\n        product_templates.write({\n            'supplier_taxes_id': [(4, company.account_purchase_tax_id.id, 0)]\n        })\n\n", "CodeBleu_score": 24.397535061750013}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    if not company:\n        company = self.env.company\n    domain = [('company_id', '=', False)]\n    if company.account_sale_tax_id:\n        domain.append(('taxes_id.company_id', '=', company.id))\n    if company.account_purchase_tax_id:\n        domain.append(('supplier_taxes_id.company_id', '=', company.id))\n    products = self.env['product.template'].search(domain)\n    if company.account_sale_tax_id:\n        products.write({'taxes_id': [(6, 0, company.account_sale_tax_id.ids)]})\n    if company.account_purchase_tax_id:\n        products.write({'supplier_taxes_id': [(6, 0, company.account_purchase_tax_id.ids)]})\n\n", "CodeBleu_score": 35.32873949791199}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    domain = [('company_id', '=', company.id)]\n    products = self.env['product.product'].search(domain)\n    if company.account_sale_tax_id:\n        products.write({'taxes_id': [(6, 0, company.account_sale_tax_id.ids)]})\n    if company.account_purchase_tax_id:\n        products.write({'supplier_taxes_id': [(6, 0, company.account_purchase_tax_id.ids)]})\n    return products\n\n", "CodeBleu_score": 18.768763434143448}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env['ir.model.data'].xmlid_to_res_id_and_model(xml_id, raise_if_not_found=False)\n    if account:\n        return self.env['account.account'].browse(account[0])\n    return self.env['account.account'].search([\n        ('company_id', '=', company.id),\n        ('user_type_id.type', '=', account_type),\n    ], limit=1)\n\n", "CodeBleu_score": 39.35402749801009}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env.ref(xml_id, False)\n    if not account:\n        domain = [('company_id', '=', company.id)]\n        if account_type:\n            domain.append(('user_type_id.type', '=', account_type))\n        account = self.search(domain, limit=1)\n    return account\n\n", "CodeBleu_score": 30.017744506924426}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env.ref(xml_id, False)\n    if not account or account.company_id.id != company.id:\n        account = self.env['account.account'].search([\n            ('company_id', '=', company.id),\n            ('user_type_id.type', '=', account_type),\n        ], limit=1)\n    return account\n\n", "CodeBleu_score": 39.88055326883768}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    for company_id, accounts in self.filtered(lambda account: account.account_type == 'current_year_earnings').groupby(lambda account: account.company_id.id):\n        if len(accounts) > 1:\n            raise ValidationError(_(\"There can only be one account with 'Current Year Earnings' type for each company.\"))\n\n", "CodeBleu_score": 20.75381959082941}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    # Get the current year\n    current_year = fields.Date.today().year\n    # Get the account type \"Current Year Earnings\"\n    account_type_id = self.env.ref('account.data_account_type_current_year_earnings')\n    # Get all accounts of type \"Current Year Earnings\"\n    accounts = self.env['account.account'].search([('user_type_id', '=', account_type_id.id)])\n    # Group accounts by company\n    accounts_by_company = defaultdict(list)\n    for account in accounts:\n        accounts_by_company[account.company_id].append(account)\n    # Check that there is only one account of type \"Current Year Earnings\" for each company\n    for company, company_accounts in accounts_by_company.items():\n        if len(company_accounts) > 1:\n            raise ValidationError(_(\"There can only be one account of type 'Current Year Earnings' for each company.\"))\n\n", "CodeBleu_score": 31.756060264764386}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    for company_id, accounts in self.env['account.account'].read_group([('user_type_id.type', '=', 'other'), ('company_id', 'in', self.env.companies.ids)], ['company_id'], ['company_id']):\n        if len(accounts) > 1:\n            raise ValidationError(_(\"There can only be one account with 'Current Year Earnings' type.\"))\n\n", "CodeBleu_score": 21.02052036820485}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self._context.get('partner_frequency_account_search'):\n        return self._search_by_frequency(domain, limit=limit, order=order)\n    return super(AccountAccount, self)._name_search(name, domain, operator, limit=limit, order=order)\n\n", "CodeBleu_score": 21.153999475582324}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name:\n        if self._context.get('partner_frequency_filter'):\n            domain = [('partner_id', '=', self._context.get('partner_frequency_filter'))]\n        if self._context.get('partner_id'):\n            domain = [('partner_id', '=', self._context.get('partner_id'))]\n        if self._context.get('account_id'):\n            domain = [('account_id', '=', self._context.get('account_id'))]\n        if self._context.get('journal_id'):\n            domain = [('journal_id', '=', self._context.get('journal_id'))]\n        if self._context.get('move_id'):\n            domain = [('move_id', '=', self._context.get('move_id'))]\n        if self._context.get('move_line_id'):\n            domain = [('move_line_id', '=', self._context.get('move_line_id'))]\n        if self._context.get('payment_id'):\n            domain = [('payment_id', '=', self._context.get('payment_id'))]\n        if self._context.get('reconcile_id'):\n            domain = [('reconcile_id', '=', self._context.get('reconcile_id'))]\n        if self._context.get('reconcile_line_id'):\n            domain = [('reconcile_line_id', '=', self._context.get('reconcile_line_id'))]\n        if self._context.get('invoice_id'):\n            domain = [('invoice_id', '=', self._context.get('invoice_id'))]\n        if self._context.get('invoice_line_id'):\n            domain = [('invoice_line_id', '=', self._context.get('invoice_line_id'))]\n        if self._context.get('move_type'):\n            domain = [('move_type', '=', self._context.get('move_type", "CodeBleu_score": 34.141452894665}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self.env.context.get('partner_frequency_search'):\n        return self._search_frequency(self.env.context.get('partner_frequency_partner_id'), domain, limit, order)\n    return super()._name_search(name, domain, operator, limit, order)\n\n", "CodeBleu_score": 19.798463057781586}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t\n    # Exclude the 'name' field by default\n    excluded = list(excluded) + ['name']\n    # Copy translations from the current record to the new one\n    self.copy_translation(new, excluded=excluded)\n    # Get the name of the new record\n    name = new.name\n    # Check if the new name follows a specific pattern\n    if re.match(r'^\\[[A-Z]{2}\\]', name):\n        # Update the translations for the name field in the cache to reflect the new name format\n        self.env['ir.translation'].search([\n            ('name', '=', 'model,name'),\n            ('lang', '=', self.env.lang),\n            ('type', '=', 'model'),\n            ('res_id', '=', self.id)\n        ]).write({'value': name})\n\n", "CodeBleu_score": 26.201595619311348}, {"code": "def copy_translations(self, new, excluded=())\n\t\n\n    # Get the list of fields to exclude, including the 'name' field and any additional fields specified in the excluded parameter\n    excluded = list(excluded) + ['name']\n\n    # Get the current record's translations\n    translations = self.env['ir.translation'].search(\n        [('res_id', '=', self.id), ('name', 'not in', excluded)])\n\n    # Create a dictionary to store the new translations\n    new_translations = {}\n\n    # Loop through the current record's translations\n    for translation in translations:\n        # Get the field name and value\n        name = translation.name\n        value = translation.value\n\n        # If the field name is not in the excluded list, add it to the new translations dictionary\n        if name not in excluded:\n            new_translations[name] = value\n\n    # Update the translations for the new record\n    new.write(new_translations)\n\n    # Get the name field for the new record\n    name_field = new._fields.get('name')\n\n    # If the name field exists and its type is 'char', update the translations for the name field in the cache\n    if name_field and name_field.type == 'char':\n        # Get the new record's name\n        name = new.name\n\n        # Check if the name follows a specific pattern\n        if re.match(r'^New [A-Za-z]+$', name):\n            # Update the translations for the name field in the cache\n            self.env['ir.translation'].update_translations(\n                name_field.comodel_name, name_field.name, name)", "CodeBleu_score": 30.548032633194783}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    if not new:\n        return\n    for field in self._fields:\n        if field not in excluded and field != 'name':\n            value = self[field]\n            if field == 'name':\n                value = self.with_context(lang=self.env.user.lang).name\n            new[field] = value\n    if new._name == 'res.lang':\n        return\n    # name field is copied after having the context lang, so we need to update the cache\n    # Note: this is a core change, this method is overridden in mail.template\n    if re.match(r'^res\\.lang\\(\\d+,\\s*|\\d+\\)$', new.name):\n        self.env['ir.translation'].clear_caches()\n\n", "CodeBleu_score": 31.076962523709945}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\t\n    query = \"\"\"\n            SELECT DISTINCT am.id\n            FROM account_move_line aml\n            INNER JOIN account_move am ON am.id = aml.move_id\n            WHERE aml.sale_line_ids IS NOT NULL\n            AND am.state = 'posted'\n            AND aml.analytic_account_id IN %s\n            AND aml.sale_line_ids IN %s\n            \"\"\"\n    self.env.cr.execute(query, (tuple(self.analytic_account_id.ids), tuple(self.ids),))\n    query_res = self.env.cr.dictfetchall()\n    domain = [('id', 'in', [x.get('id') for x in query_res])]\n    action = {\n        'name': _('Customer Invoices'),\n        'view_mode': 'tree,form',\n        'res_model': 'account.move',\n        'type': 'ir.actions.act_window',\n        'context': self._context,\n        'domain': domain\n    }\n    return action", "CodeBleu_score": 27.587128032691272}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    query = \"\"\"\n        SELECT DISTINCT am.id\n        FROM account_move_line aml\n        JOIN account_move am ON am.id = aml.move_id\n        JOIN account_account aa ON aa.id = aml.account_id\n        WHERE aa.internal_type IN ('receivable', 'payable')\n            AND aml.sale_line_ids IS NOT NULL\n            AND aml.sale_line_ids.order_id = %s\n            AND aml.analytic_account_id IS NOT NULL\n            AND aml.analytic_account_id.id IN %s\n    \"\"\"\n    self._cr.execute(query, (self.id, tuple(self.analytic_account_ids.ids)))\n    move_ids = [res[0] for res in self._cr.fetchall()]\n    return {\n        'name': _('Customer Invoices'),\n        'view_mode': 'tree,form',\n        'res_model': 'account.move',\n        'type': 'ir.actions.act_window',\n        'context': {\n            'search_default_sale_id': self.id,\n            'search_default_customer': True,\n            'search_default_posted': True,\n            'default_move_type': 'out_invoice',\n        },\n        'domain': [('id', 'in', move_ids)],\n    }\n\n", "CodeBleu_score": 27.644928012672903}, {"code": "def action_view_invoice(self)\n\t\n    action = self.env[\"ir.actions.actions\"]._for_xml_id(\"account.action_move_in_invoice_type\")\n    action['context'] = {}\n    if not self.user_has_groups('account.group_account_invoice'):\n        return action\n    action['domain'] = [('id', 'in', self.get_invoice_ids())]\n    action['context'] = {'create': False}\n    return action\n\n", "CodeBleu_score": 19.852896194250718}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\t\n    action = self.env[\"ir.actions.actions\"]._for_xml_id(\"account.action_move_in_invoice_type\")\n    action['context'] = {\n        'default_move_type': 'in_invoice',\n        'default_company_id': self.env.company.id,\n        'default_invoice_date': fields.Date.context_today(self),\n        'default_currency_id': self.env.company.currency_id.id,\n        'default_partner_id': self.partner_id.id,\n        'default_purchase_id': self.id,\n        'default_narration': _('Purchase Invoice'),\n        'search_default_purchase_id': self.id,\n        'search_default_invoice': 1,\n        'search_default_group_by_account_id': 1,\n        'search_default_group_by_partner_id': 1,\n        'search_default_journal_id': self.env.company.account_default_journal_purchase_id.id,\n    }\n    action['context'].update(\n        (self.env.context or {}).copy_with({'default_move_type': 'in_invoice'})\n    )\n    if len(self) == 1:\n        action['context'].update({'default_partner_id': self.partner_id.id, 'default_purchase_id': self.id})\n        action['context'].pop('search_default_purchase_id', None)\n    else:\n        action['domain'] = [('id', 'in', self.env['account.move.line'].search([\n            ('purchase_id', 'in', self.ids),\n            ('move_id.move_type', '=', 'in_invoice'),\n        ]).move_id.ids)]\n    return action\n\n", "CodeBleu_score": 40.557429498557326}, {"code": "def action_view_vendor_bill(self)\n\t\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['context'] = {'default_move_type': 'in_invoice'}\n    action['domain'] = [('id', 'in', self.env['account.move.line'].search([\n        ('purchase_id', 'in', self.ids)\n    ]).mapped('move_id').ids)]\n    return action\n\n", "CodeBleu_score": 24.31082049443064}, {"code": "def action_view_vendor_bill(self)\n\t\n    action = self.env[\"ir.actions.actions\"]._for_xml_id(\"account.action_move_in_invoice_type\")\n    action['context'] = {\n        'default_move_type': 'in_invoice',\n        'create': False,\n    }\n    action['domain'] = [('id', 'in', self.env['account.move.line'].search([\n        ('purchase_id', 'in', self.ids),\n        ('display_type', '=', False),\n    ]).move_id.ids)]\n    return action\n\n", "CodeBleu_score": 25.738515819843656}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        values.pop('attachment_ids')\n    with self.env.norecompute():\n        res = super(models.Model, self).write(values)\n    return res\n\n", "CodeBleu_score": 48.44083856065692}, {"code": "def write(self, values)\n\t\n    if len(self) == 1 and 'attachment_ids' in values:\n        del values['attachment_ids']\n    with self.check_attachments():\n        return super(models.Model, self).write(values)\n\n", "CodeBleu_score": 32.897891689554356}, {"code": "def write(self, values)\n\t\n    if len(self) == 1 and 'attachment_ids' in values:\n        del values['attachment_ids']\n    with self.env.norecompute():\n        result = super(models.Model, self).write(values)\n    return result\n\n", "CodeBleu_score": 51.321937599012344}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_one()\n    if str2bool(self.env[\"ir.config_parameter\"].sudo().get_param(\"account_auto_create_bank_account\", \"False\")):\n        return self.env[\"res.partner.bank\"]\n    company_id = self.env.company.id\n    sanitized_acc_number = sanitize_account_number(self.acc_number)\n    bank_account = self.env[\"res.partner.bank\"].search([\n        (\"sanitized_acc_number\", \"=\", sanitized_acc_number),\n        (\"partner_id\", \"=\", self.partner_id.id),\n        (\"company_id\", \"=\", company_id)\n    ], limit=1)\n    if not bank_account:\n        bank_account = self.env[\"res.partner.bank\"].create({\n            \"acc_number\": self.acc_number,\n            \"partner_id\": self.partner_id.id,\n            \"company_id\": company_id,\n            \"currency_id\": self.currency_id.id,\n        })\n    return bank_account\n\n", "CodeBleu_score": 50.96289885678162}, {"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_one()\n    if str2bool(self.env[\"ir.config_parameter\"].sudo().get_param(\"account_reconciliation.skip_bank_account_creation\")):\n        return self.env[\"res.partner.bank\"].browse()\n    return (\n        self.env[\"res.partner.bank\"]\n        .with_company(self.company_id)\n        .search(\n            [\n                (\"sanitized_acc_number\", \"=\", sanitize_account_number(self.acc_number)),\n                (\"partner_id\", \"=\", self.partner_id.id),\n            ],\n            limit=1,\n        )\n    )\n\n", "CodeBleu_score": 28.913482851008375}, {"code": "def _find_or_create_bank_account(self)\n\t\n    if not self.env['res.company']._check_create_bank_account():\n        return self.env['res.partner.bank'].browse()\n    bank_account = self.env['res.partner.bank'].search([\n        ('acc_number', '=', sanitize_account_number(self.acc_number)),\n        ('partner_id', '=', self.partner_id.id),\n        ('company_id', 'in', (self.company_id.id, False)),\n    ], limit=1)\n    if bank_account:\n        return bank_account\n    return self.env['res.partner.bank'].create({\n        'acc_number': sanitize_account_number(self.acc_number),\n        'partner_id': self.partner_id.id,\n        'acc_type': self.acc_type.name,\n        'company_id': self.company_id.id,\n    })\n\n", "CodeBleu_score": 48.475622905028146}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    if self.currency_id and self.currency_id == currency:\n        amount_currency = balance\n    elif self.currency_id:\n        amount_currency = self.currency_id._convert(balance, currency, self.company_id, self.date)\n    else:\n        amount_currency = balance\n    amount = self.currency_id and self.currency_id.round(amount_currency) or amount_currency\n    if self.is_internal_transfer:\n        balance = -balance\n    if self.currency_id and self.currency_id != currency:\n        balance = currency.round(self.currency_id._convert(balance, currency, self.company_id, self.date))\n    return {\n        'amount': amount,\n        'amount_currency': amount_currency,\n        'balance': balance,\n    }\n\n", "CodeBleu_score": 17.637885159386276}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    context = dict(self._context or {})\n    if currency:\n        context['date'] = self.date\n        if self.currency_id and self.currency_id != currency:\n            balance = self.currency_id._convert(balance, currency, self.company_id, context['date'])\n            amount_currency = self.currency_id._convert(amount_currency, currency, self.company_id, context['date'])\n        else:\n            amount_currency = balance\n    else:\n        if self.currency_id:\n            balance = self.currency_id._convert(balance, self.currency_id, self.company_id, context['date'])\n            amount_currency = self.currency_id._convert(amount_currency, self.currency_id, self.company_id, context['date'])\n        else:\n            balance = amount_currency = 0.0\n    debit, credit, amount_currency = self._get_balances(balance, amount_currency)\n    return {\n        'amount_currency': amount_currency,\n        'debit': debit,\n        'credit': credit,\n    }\n\n", "CodeBleu_score": 22.087213073724264}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    context = self.env.context\n    if context.get('force_rate') and context.get('force_rate') != 1.0:\n        force_rate = context.get('force_rate')\n    else:\n        force_rate = self.currency_rate if self.currency_rate else 1.0\n    if currency == self.currency_id:\n        amount_currency = amount_currency or 0.0\n        amount = balance / force_rate\n        amount_journal_currency = amount * self.currency_rate\n        amount_company_currency = amount * self.company_currency_id.rate\n    else:\n        amount = balance * force_rate\n        amount_currency = amount\n        amount_journal_currency = amount\n        amount_company_currency = amount * self.currency_rate\n    return {\n        'amount': amount,\n        'amount_currency': amount_currency,\n        'amount_journal_currency': amount_journal_currency,\n        'amount_company_currency': amount_company_currency,\n    }\n\n", "CodeBleu_score": 20.936036285215696}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids = [(5, 0, 0)]\n        if journal.type in ('bank', 'cash'):\n            methods = journal._get_outbound_payment_methods()\n            for company, account_id in methods:\n                journal.outbound_payment_method_line_ids = [\n                    (0, 0, {\n                        'payment_method_id': account_id.payment_method_id.id,\n                        'journal_id': journal.id,\n                        'company_id': company.id,\n                    })\n                ]\n\n", "CodeBleu_score": 43.7706409478491}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        if journal.type in ('bank', 'cash'):\n            journal.outbound_payment_method_line_ids = [Command.create(data) for data in self.env['account.journal']._get_outbound_payment_method_line(journal)]\n        else:\n            journal.outbound_payment_method_line_ids = [Command.clear()]\n\n", "CodeBleu_score": 37.457819020586705}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids = False\n        if journal.type in ('bank', 'cash'):\n            outbound_payment_methods = self.env['account.payment.method'].search([('payment_type', '=', 'outbound')])\n            for method in outbound_payment_methods:\n                journal.outbound_payment_method_line_ids = [Command.create({\n                    'payment_method_id': method.id,\n                    'journal_id': journal.id,\n                })]\n\n", "CodeBleu_score": 46.05396301529393}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t\n    today = date.today()\n    for move in self:\n        if not move.date:\n            if not move.invoice_date:\n                move.date = today\n            else:\n                if move.move_type not in (\"out_invoice\", \"out_refund\"):\n                    move.date = move._calculate_accounting_date(move.invoice_date)\n                if move.date != today:\n                    move.date = today\n                    move._recompute_dynamic_lines(recompute_all_taxes=True)\n\n", "CodeBleu_score": 32.95714520632197}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if move.invoice_date:\n            if move.is_sale_document():\n                move.date = move.invoice_date\n            else:\n                move.date = move.invoice_date + relativedelta(days=move.tax_report_impact)\n        elif not move.date:\n            move.date = fields.Date.context_today(move)\n        if move.date != fields.Date.context_today(move):\n            move.with_context(check_move_validity=False).write({\"date\": move.date})\n            move.line_ids.filtered(lambda line: line.account_id.user_type_id.type in (\"receivable\", \"payable\")).recompute_dynamic_lines(move.date)\n\n", "CodeBleu_score": 40.904284826538664}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if move.date and move.move_type not in (\"out_invoice\", \"out_refund\", \"in_invoice\", \"in_refund\"):\n            continue\n        if not move.invoice_date:\n            move.date = move.date or fields.Date.context_today(move)\n        else:\n            if move.move_type not in (\"out_invoice\", \"out_refund\"):\n                move.date = move.invoice_date\n            else:\n                if move.company_id.tax_report_country_id.code == \"IN\":\n                    move.date = move.invoice_date\n                else:\n                    move.date = move.invoice_date + relativedelta(days=1)\n        if move.date != move.date:\n            move.with_context(check_move_validity=False).write({\"date\": move.date})\n            move._recompute_dynamic_lines(\n                recompute_all_taxes=True,\n                recompute_tax_base_amount=True,\n            )\n\n", "CodeBleu_score": 32.57463701505224}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.move_type in (\"out_invoice\", \"out_refund\"):\n            move.invoice_payment_term_id = move.partner_id.property_payment_term_id\n        elif move.move_type in (\"in_invoice\", \"in_refund\"):\n            move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 45.86322343125669}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.move_type in (\"out_invoice\", \"out_refund\"):\n            move.invoice_payment_term_id = move.partner_id.property_payment_term_id\n        elif move.move_type in (\"in_invoice\", \"in_refund\"):\n            move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 45.86322343125669}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_invoice():\n            if move.type in (\"out_invoice\", \"out_refund\"):\n                move.invoice_payment_term_id = move.partner_id.property_payment_term_id\n            elif move.type in (\"in_invoice\", \"in_refund\"):\n                move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id\n            else:\n                move.invoice_payment_term_id = False\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 47.40710053051498}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t\n    tax_groups = self.env['account.tax.group'].search([])\n    tax_groups_by_country_and_company = defaultdict(list)\n    for tax_group in tax_groups:\n        tax_groups_by_country_and_company[(tax_group.country_id, tax_group.company_id)].append(tax_group)\n    for tax in self:\n        matching_tax_groups = tax_groups_by_country_and_company.get((tax.country_id, tax.company_id), [])\n        if matching_tax_groups:\n            tax.tax_group_id = matching_tax_groups[0]\n        else:\n            matching_tax_groups = tax_groups_by_country_and_company.get((False, tax.company_id), [])\n            if matching_tax_groups:\n                tax.tax_group_id = matching_tax_groups[0]\n            else:\n                tax.tax_group_id = False", "CodeBleu_score": 27.165803586175002}, {"code": " def _compute_tax_group_id(self)\n\t\n    tax_groups = self.env['account.tax.group'].search([])\n    for tax in self:\n        # Categorize taxes by country and company\n        tax_country_groups = defaultdict(list)\n        for tax_group in tax_groups:\n            tax_country_groups[(tax_group.country_id, tax_group.company_id)].append(tax_group)\n        # Search for a matching tax group\n        for key, tax_group_list in tax_country_groups.items():\n            for tax_group in tax_group_list:\n                if tax.country_id == tax_group.country_id and tax.company_id == tax_group.company_id:\n                    tax.tax_group_id = tax_group\n                    break\n            else:\n                # Search for a tax group without a specified country but within the same company\n                for tax_group in tax_group_list:\n                    if not tax_group.country_id and tax.company_id == tax_group.company_id:\n                        tax.tax_group_id = tax_group\n                        break\n                else:\n                    # If no matching tax group is found, assign the first tax group in the list\n                    tax.tax_group_id = tax_group_list[0]\n            break\n\n", "CodeBleu_score": 27.796901056744943}, {"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        tax_group_id = False\n        if tax.country_id and tax.company_id:\n            tax_group_id = self.env['account.tax.group'].search(\n                [('country_id', '=', tax.country_id.id), ('company_id', '=', tax.company_id.id)], limit=1).id\n        if not tax_group_id and tax.country_id:\n            tax_group_id = self.env['account.tax.group'].search(\n                [('country_id', '=', tax.country_id.id), ('company_id', '=', False)], limit=1).id\n        if not tax_group_id:\n            tax_group_id = self.env['account.tax.group'].search(\n                [('country_id', '=', False), ('company_id', '=', tax.company_id.id)], limit=1).id\n        if not tax_group_id:\n            tax_group_id = self.env['account.tax.group'].search(\n                [('country_id', '=', False), ('company_id', '=', False)], limit=1).id\n        tax.tax_group_id = tax_group_id\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 33.783695543100976}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    session = requests.Session()\n    session.get(url + '/web/database/selector', allow_redirects=False)\n    session.post(url + '/web/database/selector', data={\n        'db': db,\n    })\n    with open(module_file, 'rb') as f:\n        data = f.read()\n    payload = {\n        'login': login,\n        'password': password,\n        'db': db,\n    }\n    if force:\n        payload['force'] = '1'\n    response = session.post(\n        url + '/base_import_module/login_upload',\n        data=payload,\n        files={\n            'file': ('file.zip', data),\n        },\n        verify=False,\n    )\n    if response.status_code != 200:\n        raise Exception(response.text)\n    return response.text\n\n", "CodeBleu_score": 51.99337419435199}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    self.session.get(url)\n    self.session.get(url + \"/web/database/selector\")\n    module_content = module_file.read()\n    data = {\n        \"login\": login,\n        \"password\": password,\n        \"db\": db,\n        \"force\": force,\n    }\n    res = self.session.post(\n        url + \"/base_import_module/login_upload\",\n        data=data,\n        files={\"mod_file\": module_content},\n    )\n    if \"Module not found\" in res.text:\n        raise Exception(\"Module not found on server\")\n    if \"Outdated module\" in res.text:\n        raise Exception(\"Server has an outdated module\")\n    return res.text\n\n", "CodeBleu_score": 43.17636421387816}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n\n    self.session.get(url + '/web/database/selector')\n    self.session.post(url + '/web/database/selector', data={'db': db})\n    self.session.post(url + '/web/login', data={'login': login, 'password': password})\n    module_content = module_file.read()\n    data = {'login': login, 'password': password, 'db': db, 'force': force, 'module_file': module_content}\n    response = self.session.post(url + '/base_import_module/login_upload', data=data)\n    if 'WARNING' in response.text:\n        raise Exception('The server does not have the required module installed or is outdated.')\n    return response.text\n\n", "CodeBleu_score": 44.369462663594476}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t\n\n    # Get configuration settings\n    config = odoo.tools.config\n    db_name = config.get('db_name')\n    overwrite = config.get('overwrite', False)\n\n    # Create a new database registry\n    registry = odoo.registry(db_name)\n\n    # Use a cursor to initialize a TranslationImporter\n    with odoo.api.Environment.manage(), registry.cursor() as cr:\n        importer = odoo.addons.base.models.ir_translation.TranslationImporter(cr)\n\n        # Load translation files\n        path = Path(__file__).parent / 'i18n'\n        for file in os.listdir(path):\n            if file.endswith('.csv'):\n                module, lang = re.match(r'(.+).(..)\\.csv', file).groups()\n                with open(path / file, 'r', encoding='utf-8-sig') as fp:\n                    importer.load(fp, lang, module, overwrite)\n\n", "CodeBleu_score": 43.03481413276062}, {"code": "def import_translation()\n\t\n\n    # Get the database name and overwrite flag from the configuration settings\n    db_name = odoo.tools.config.get(\"db_name\")\n    overwrite = odoo.tools.config.get(\"overwrite_translations\")\n\n    # Create a new database registry and use a cursor to initialize a TranslationImporter\n    registry = odoo.registry(db_name)\n    with registry.cursor() as cr:\n        importer = odoo.tools.TranslationImporter(cr)\n\n        # Load translation files based on the configuration settings\n        importer.load_module_terms([\"all\"], [\"en_US\"])\n\n        # Save the translations, with the option to overwrite existing ones\n        importer.save_translations(overwrite=overwrite)\n\n", "CodeBleu_score": 46.11457755474297}, {"code": "def import_translation()\n\t\n\n    # Get the database name and overwrite flag from the configuration settings\n    db_name = odoo.tools.config.get(\"db_name\")\n    overwrite = odoo.tools.config.get(\"overwrite_translations\")\n\n    # Create a new database registry\n    registry = odoo.registry(db_name)\n\n    # Use a cursor to initialize a TranslationImporter\n    with registry.cursor() as cr:\n        importer = odoo.tools.TranslationImporter(cr)\n\n        # Load translation files based on the configuration\n        for module in odoo.modules.load_information_from_description_file(\"__openerp__.py\")[\n            \"data\"\n        ]:\n            importer.load_module_terms(\n                [module], [\"en_US\"], overwrite=overwrite, module_name=module\n            )\n\n        # Save the translations\n        importer.save(overwrite=overwrite)\n\n", "CodeBleu_score": 47.99328639745851}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\t\n    if not self.children:\n        self.children = []\n    child = self.get_child(name)\n    if not child:\n        child = Node(name, info)\n        child.depth = self.depth + 1\n        child.parent = self\n        self.children.append(child)\n        child.inherited_attributes = self.inherited_attributes.copy()\n        if self.inherited_attributes.get(\"inherited_name\"):\n            child.inherited_attributes[\"inherited_name\"] = self.inherited_attributes[\"inherited_name\"] + \".\" + child.name\n        else:\n            child.inherited_attributes[\"inherited_name\"] = child.name\n        child.inherited_attributes[\"inherited_depth\"] = child.depth\n        child.inherited_attributes[\"inherited_parent\"] = child.parent\n        child.inherited_attributes[\"inherited_children\"] = child.children\n        child.inherited_attributes[\"inherited_info\"] = child.info\n        child.inherited_attributes[\"inherited_parent_name\"] = child.parent.name if child.parent else None\n        child.inherited_attributes[\"inherited_parent_info\"] = child.parent.info if child.parent else None\n        child.inherited_attributes[\"inherited_parent_children\"] = child.parent.children if child.parent else None\n        child.inherited_attributes[\"inherited_parent_depth\"] = child.parent.depth if child.parent else None\n        child.inherited_attributes[\"inherited_parent_parent\"] = child.parent.parent if child.parent else None\n        child.inherited_attributes[\"inherited_parent_parent_name\"] = child.parent.parent.name if child.parent and child.parent.parent else None\n        child.inherited_attributes[\"inherited_parent_parent_info\"] = child.parent.parent.info if child.parent and child.parent.parent else None\n        child.inherited_attributes[\"inherited_parent_parent_children\"] = child.parent.parent.children if child.parent and child.parent.parent else None\n        child.inherited_attributes[\"inherited_parent_parent_depth\"] = child.parent.", "CodeBleu_score": 26.326037524639496}, {"code": "def add_child(self, name, info)\n\t\n    new_node = self.env['ir.model.data'].create({'name': name, 'info': info})\n    new_node.depth = self.depth + 1\n    if new_node not in self.children:\n        self.children.append(new_node)\n    if self.name:\n        new_node.name = self.name + '.' + new_node.name\n    if self.info:\n        new_node.info = self.info + '.' + new_node.info\n    self.children = sorted(self.children, key=lambda x: x.name)\n    return new_node\n\n", "CodeBleu_score": 45.790985395827825}, {"code": "def add_child(self, name, info)\n\t\n    if name not in self.children:\n        child = Node(name, info)\n        child.depth = self.depth + 1\n        if hasattr(self, 'add_child'):\n            child.add_child = self.add_child\n        if hasattr(self, 'add_parent'):\n            child.add_parent = self.add_parent\n        if hasattr(self, 'add_sibling'):\n            child.add_sibling = self.add_sibling\n        if hasattr(self, 'add_siblings'):\n            child.add_siblings = self.add_siblings\n        self.children.append(child)\n        self.children.sort(key=lambda x: x.name)\n    else:\n        child = self.children[self.children.index(name)]\n    return child\n\n", "CodeBleu_score": 41.914499780780055}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\n        \"account\": account,\n        \"account_name\": frappe.db.get_value(\"Account\", account, \"account_name\"),\n        \"parent_account\": frappe.db.get_value(\"Account\", account, \"parent_account\"),\n        \"indent\": frappe.db.get_value(\"Account\", account, \"indent\"),\n        \"from_date\": formatdate(dates[0]),\n        \"to_date\": formatdate(dates[1]),\n    }\n\n    for i in range(len(dates)):\n        result[formatdate(dates[i])] = 0.0\n\n    root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n\n    for entry in gl_entries:\n        if entry.get(\"is_cancelled\"):\n            continue\n\n        result[formatdate(entry.posting_date)] += entry.get(\n            \"debit_in_account_currency\", 0\n        ) - entry.get(\"credit_in_account_currency\", 0)\n\n    if root_type not in [\"Asset\", \"Expense\"]:\n        for key, value in result.items():\n            result[key] = -1 * value\n\n    if root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n        for i in range(1, len(dates)):\n            result[formatdate(dates[i])] += result[formatdate(dates[i - 1])]\n\n    return result\n\n", "CodeBleu_score": 28.406864665488918}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\n        \"account\": account,\n        \"account_currency\": frappe.db.get_value(\"Account\", account, \"account_currency\"),\n        \"company\": frappe.get_cached_value(\"Account\", account, \"company\"),\n        \"dates\": dates,\n        \"balance\": [0.0] * len(dates),\n        \"debit\": [0.0] * len(dates),\n        \"credit\": [0.0] * len(dates),\n    }\n\n    root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n    if root_type not in (\"Asset\", \"Expense\"):\n        result[\"balance\"] = [x * -1 for x in result[\"balance\"]]\n        result[\"debit\"] = [x * -1 for x in result[\"debit\"]]\n        result[\"credit\"] = [x * -1 for x in result[\"credit\"]]\n\n    for entry in gl_entries:\n        if entry.account == account:\n            if root_type in (\"Asset\", \"Liability\", \"Equity\"):\n                result[\"balance\"][dates.index(entry.posting_date)] += entry.balance\n            else:\n                result[\"debit\"][dates.index(entry.posting_date)] += entry.debit\n                result[\"credit\"][dates.index(entry.posting_date)] += entry.credit\n\n    if root_type in (\"Asset\", \"Liability\", \"Equity\"):\n        for i in range(1, len(result[\"balance\"])):\n            result[\"balance\"][i] += result[\"balance\"][i - 1]\n\n    return result\n\n", "CodeBleu_score": 30.171723764078568}, {"code": "def build_result(account, dates, gl_entries)\n\t\n\n    result = {\n        \"account\": account,\n        \"account_currency\": frappe.db.get_value(\"Account\", account, \"account_currency\"),\n        \"company\": frappe.db.get_value(\"Account\", account, \"company\"),\n    }\n\n    for date in dates:\n        result[date] = 0\n\n    root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n\n    for entry in gl_entries:\n        if entry.account_currency == result[\"account_currency\"]:\n            result[entry.posting_date] += entry.balance\n\n    if root_type not in [\"Asset\", \"Expense\"]:\n        for date in dates:\n            result[date] *= -1\n\n    if root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n        for i in range(1, len(dates)):\n            result[dates[i]] += result[dates[i - 1]]\n\n    return result\n\n", "CodeBleu_score": 30.34240772766682}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t\n    if not erpnext.is_perpetual_inventory_enabled(self.company):\n        return\n\n    if self.is_group:\n        return\n\n    account_type_before_save = frappe.db.get_value(\n        \"Account\", self.name, \"account_type\"\n    )\n    account_type_after_save = self.account_type\n\n    if (\n        account_type_before_save in [\"Receivable\", \"Payable\"]\n        and account_type_after_save not in [\"Receivable\", \"Payable\"]\n        and cint(frappe.db.get_value(\"Account\", self.name, \"count_ledger_entries\"))\n    ):\n        message = _(\n            \"Account type for {0} has been changed from {1} to {2}. \"\n            \"This change may cause issues in the Accounts report.\"\n        ).format(self.name, account_type_before_save, account_type_after_save)\n        frappe.msgprint(message, alert=True, indicator=\"orange\")\n        self.add_comment(text=message)\n\n", "CodeBleu_score": 35.82426347076754}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    old_account_type = self.get_doc_before_save().account_type\n    new_account_type = self.account_type\n\n    if (\n        old_account_type in (\"Receivable\", \"Payable\")\n        and new_account_type not in (\"Receivable\", \"Payable\")\n        and frappe.db.get_value(\n            \"GL Entry\",\n            {\"account\": self.name},\n            \"name\",\n            order_by=\"creation desc\",\n            limit=1,\n        )\n    ):\n        frappe.msgprint(\n            _(\n                \"Account Type changed from Receivable/Payable to {0}. Please check Accounts Report for potential issues.\"\n            ).format(new_account_type),\n            alert=True,\n        )\n\n        self.add_comment(\n            text=_(\"Account Type changed from Receivable/Payable to {0}\").format(\n                new_account_type\n            )\n        )\n\n", "CodeBleu_score": 27.907467407404003}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.is_new():\n        return\n\n    before_save = self.get_doc_before_save()\n    if not before_save:\n        return\n\n    # Check if the account type has changed\n    if before_save.account_type in [\"Receivable\", \"Payable\"] and self.account_type not in [\"Receivable\", \"Payable\"]:\n        # Check if there are existing general ledger entries for the account\n        gl_entries = frappe.db.get_all(\"GL Entry\", filters={\"account\": self.name}, limit_page_length=1)\n        if gl_entries:\n            # Add a comment to the account record\n            comment = _(\"Account type changed from {0} to {1}. Please check the Accounts report for potential issues.\").format(before_save.account_type, self.account_type)\n            self.add_comment(\"Comment\", text=comment)\n\n", "CodeBleu_score": 45.127492465499444}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t\n    if not self.currency:\n        self.currency = frappe.get_cached_value(\"Company\", self.company, \"default_currency\")\n        self.explicitly_specified_currency = True\n\n    if self.account_type != \"Bank\" and self.account_type != \"Cash\":\n        return\n\n    if self.explicitly_specified_currency:\n        existing_entries = frappe.db.get_all(\n            \"GL Entry\",\n            filters={\n                \"account\": self.name,\n                \"docstatus\": [\"<\", 2],\n                \"currency\": [\"<>\", self.currency],\n            },\n            fields=[\"currency\"],\n            as_list=True,\n            limit=1,\n        )\n\n        if existing_entries:\n            frappe.throw(\n                _(\n                    \"Cannot change the currency of an account with existing transactions. Please create a new account and transfer the transactions.\"\n                )\n            )\n\n", "CodeBleu_score": 42.943824216313374}, {"code": "def validate_account_currency(self)\n\t\n\n    if not self.currency:\n        self.currency = erpnext.get_company_currency(self.company)\n        self.explicitly_specified_currency = False\n    else:\n        self.explicitly_specified_currency = True\n\n    if not self.name:\n        return\n\n    existing_gl_entries = frappe.db.sql_list(\n        \"\"\"\n        SELECT DISTINCT currency\n        FROM `tabGL Entry`\n        WHERE account=%s\n        AND currency != %s\n    \"\"\",\n        (self.name, self.currency),\n    )\n\n    if existing_gl_entries:\n        if len(existing_gl_entries) > 1:\n            existing_gl_entries = \", \".join(existing_gl_entries[:-1]) + \" and \" + existing_gl_entries[-1]\n        else:\n            existing_gl_entries = existing_gl_entries[0]\n\n        throw(\n            _(\"The account {} has transactions in {} currency. Please delete the transactions before changing the currency.\").format(\n                self.name, existing_gl_entries\n            ),\n            title=_(\"Currency Mismatch\"),\n        )\n\n", "CodeBleu_score": 34.00365341767735}, {"code": "def validate_account_currency(self)\n\t\n\n    if not self.currency:\n        self.currency = erpnext.get_company_currency(self.company)\n        self.explicitly_specified = 0\n        return\n\n    if not self.explicitly_specified:\n        self.explicitly_specified = 1\n\n    if self.currency != erpnext.get_company_currency(self.company):\n        frappe.throw(\n            _(\n                \"Currency {0} for {1} does not match with the company's currency {2}\"\n            ).format(\n                frappe.bold(self.currency),\n                frappe.bold(self.name),\n                frappe.bold(erpnext.get_company_currency(self.company)),\n            )\n        )\n\n    if self.general_ledger:\n        for gle in self.general_ledger:\n            if gle.currency != self.currency:\n                frappe.throw(\n                    _(\n                        \"Currency {0} for {1} does not match with the account's currency {2}\"\n                    ).format(\n                        frappe.bold(gle.currency),\n                        frappe.bold(self.name),\n                        frappe.bold(self.currency),\n                    )\n                )\n\n", "CodeBleu_score": 26.70790508502259}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n\n    # Initialize a dictionary to merge entries\n    merged_entries = {}\n\n    # Iterate through each entry\n    for entry in entries:\n        # Generate a unique key based on the specified accounting dimensions\n        key = tuple(entry.get(dimension) for dimension in accounting_dimensions)\n\n        # Initialize the merged entry if it doesn't exist\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \"debit\": 0,\n                \"credit\": 0,\n                \"debit_in_account_currency\": 0,\n                \"credit_in_account_currency\": 0,\n            }\n\n        # Update the debit and credit amounts\n        merged_entries[key][\"debit\"] += entry.debit\n        merged_entries[key][\"credit\"] += entry.credit\n\n        # Update the debit and credit amounts in account currency\n        merged_entries[key][\"debit_in_account_currency\"] += entry.debit_in_account_currency\n        merged_entries[key][\"credit_in_account_currency\"] += entry.credit_in_account_currency\n\n    # Return the merged entries\n    return merged_entries\n\n", "CodeBleu_score": 45.51050901184748}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n\n    merged_entries = {}\n\n    for entry in entries:\n        key = tuple(entry.get(dimension) for dimension in accounting_dimensions)\n\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \"debit\": 0,\n                \"credit\": 0,\n                \"debit_in_account_currency\": 0,\n                \"credit_in_account_currency\": 0,\n            }\n\n        merged_entries[key][\"debit\"] += entry.debit\n        merged_entries[key][\"credit\"] += entry.credit\n        merged_entries[key][\"debit_in_account_currency\"] += entry.debit_in_account_currency\n        merged_entries[key][\"credit_in_account_currency\"] += entry.credit_in_account_currency\n\n    return merged_entries\n\n", "CodeBleu_score": 45.51050901184748}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n\n    merged_entries = {}\n    for entry in entries:\n        key = tuple(entry.get(dimension) for dimension in accounting_dimensions)\n        merged_entries.setdefault(key, {\n            \"debit\": 0,\n            \"credit\": 0,\n            \"debit_in_account_currency\": 0,\n            \"credit_in_account_currency\": 0,\n            \"opening_debit\": 0,\n            \"opening_credit\": 0,\n            \"opening_debit_in_account_currency\": 0,\n            \"opening_credit_in_account_currency\": 0,\n            \"against_account\": \"\",\n            \"account_currency\": \"\"\n        })\n        merged_entries[key][\"debit\"] += flt(entry.debit)\n        merged_entries[key][\"credit\"] += flt(entry.credit)\n        merged_entries[key][\"debit_in_account_currency\"] += flt(entry.debit_in_account_currency)\n        merged_entries[key][\"credit_in_account_currency\"] += flt(entry.credit_in_account_currency)\n        merged_entries[key][\"opening_debit\"] += flt(entry.opening_debit)\n        merged_entries[key][\"opening_credit\"] += flt(entry.opening_credit)\n        merged_entries[key][\"opening_debit_in_account_currency\"] += flt(entry.opening_debit_in_account_currency)\n        merged_entries[key][\"opening_credit_in_account_currency\"] += flt(entry.opening_credit_in_account_currency)\n        merged_entries[key][\"against_account\"] = entry.against_account\n        merged_entries[key][\"account_currency\"] = entry.account_currency\n\n    return merged_entries\n", "CodeBleu_score": 36.0091113826749}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t\n\n    if self.doctype == \"Supplier Payment\":\n        supplier = self.supplier\n    elif self.doctype == \"Buying Invoice\":\n        supplier = self.supplier\n    else:\n        return\n\n    supplier_details = frappe.get_doc(\"Supplier\", supplier)\n    if supplier_details.on_hold:\n        if supplier_details.hold_type == \"Non Payment\":\n            frappe.throw(\n                _(\n                    \"Transactions cannot be processed as Supplier {0} is on hold since {1} till {2} as per Supplier On Hold record. Please contact your Accounts Manager for more information.\"\n                ).format(\n                    supplier_details.name,\n                    formatdate(supplier_details.on_hold_since),\n                    formatdate(supplier_details.release_date),\n                )\n            )\n        elif supplier_details.hold_type == \"Temporary\":\n            if (\n                getdate(supplier_details.release_date)\n                < getdate(nowdate())\n                < getdate(supplier_details.on_hold_since)\n            ):\n                frappe.throw(\n                    _(\n                        \"Transactions cannot be processed as Supplier {0} is on hold since {1} till {2} as per Supplier On Hold record. Please contact your Accounts Manager for more information.\"\n                    ).format(\n                        supplier_details.name,\n                        formatdate(supplier_details.on_hold_since),\n                        formatdate(supplier_details.release_date),\n                    )\n                )\n\n", "CodeBleu_score": 25.07106015041328}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype == \"Purchase Invoice\":\n        supplier = self.supplier\n    else:\n        supplier = self.party\n\n    supplier_doc = frappe.get_doc(\"Supplier\", supplier)\n    if supplier_doc.on_hold and supplier_doc.on_hold_since:\n        if supplier_doc.on_hold_reason == \"Hold\":\n            frappe.throw(\n                _(\"Transaction cannot be processed as supplier {0} is on hold\").format(\n                    get_link_to_form(\"Supplier\", supplier)\n                )\n            )\n\n        if supplier_doc.on_hold_reason == \"Hold Till\":\n            if getdate(supplier_doc.on_hold_till) >= getdate(nowdate()):\n                frappe.throw(\n                    _(\"Transaction cannot be processed as supplier {0} is on hold\").format(\n                        get_link_to_form(\"Supplier\", supplier)\n                    )\n                )\n\n", "CodeBleu_score": 32.724007166536325}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype in (\"Supplier Payment\", \"Buying Invoice\"):\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.on_hold and supplier.on_hold_type == self.doctype:\n            if supplier.release_date and getdate(supplier.release_date) > getdate(today()):\n                frappe.throw(\n                    _(\n                        \"{0} {1} is on hold till {2}, hence cannot make {3}!\"\n                    ).format(\n                        self.doctype,\n                        self.name,\n                        supplier.release_date,\n                        self.doctype,\n                    )\n                )\n            else:\n                supplier.on_hold = 0\n                supplier.on_hold_type = \"\"\n                supplier.release_date = \"\"\n                supplier.save()\n\n", "CodeBleu_score": 28.61511969321907}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t\n\n    repost_doctypes = [\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Delivery Note\",\n        \"Sales Invoice\",\n        \"Sales Order\",\n        \"Quotation\",\n        \"Stock Entry\",\n        \"Stock Reconciliation\",\n        \"Journal Entry\",\n        \"Payment Entry\",\n        \"Purchase Taxes and Charges\",\n        \"Sales Taxes and Charges\",\n    ]\n\n    repost_doctypes = [d for d in repost_doctypes if frappe.db.exists(\"DocType\", d)]\n\n    if not repost_doctypes:\n        return\n\n    # Get all rows where voucher type and number match the current document\n    rows = frappe.qb.from_(self.doctype).select(\n        self.doctype + \".name\",\n        self.doctype + \".voucher_type\",\n        self.doctype + \".voucher_no\",\n        self.doctype + \".parent\",\n        self.doctype + \".parenttype\",\n    ).where(\n        (self.doctype + \".voucher_type\").as_(\"voucher_type\") == self.voucher_type\n    ).where(\n        (self.doctype + \".voucher_no\").as_(\"voucher_no\") == self.voucher_no\n    ).run(as_dict=True)\n\n    if not rows:\n        return\n\n    # Organize rows by parent document type and parent\n    row_map = defaultdict(lambda: defaultdict(list))\n    for row in rows:\n        row_map[row[\"parenttype\"]][row[\"parent\"]].append(row[\"name\"])\n\n    # Loop through each parent document type\n    for parenttype, parents in row_map.items():\n        # Get all parent documents\n        parent_docs = frappe.get_all(\n            parenttype,\n            filters={\"name\": (\"in\", list(parents.keys()))},\n            fields=[\"name\", \"repost_vouchers\", \"vouchers\"],", "CodeBleu_score": 28.42385535681767}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n\n    # Identify repost doctypes\n    repost_doctypes = [\"Sales Invoice\", \"Purchase Invoice\"]\n\n    # Query for rows where voucher type and number match the current document\n    repost_rows = frappe.qb.from_(self.doctype).select(\n        self.doctype + \".name\",\n        self.doctype + \".parent\",\n        self.doctype + \".parenttype\",\n    ).where(\n        (self.doctype + \".voucher_type == %s\")\n        & (self.doctype + \".voucher_no == %s\")\n    ).run(as_dict=True)\n\n    # Organize rows by parent document type and parent\n    repost_rows_by_parent = defaultdict(list)\n    for row in repost_rows:\n        repost_rows_by_parent[row.parenttype].append(row)\n\n    # Remove references from each parent document\n    for parenttype, rows in repost_rows_by_parent.items():\n        parent_docs = frappe.qb.from_(parenttype).select(parenttype + \".name\").where(\n            parenttype + \".name in %s\" % (frappe.db.escape(tuple([row.parent for row in rows])))\n        ).run(as_dict=True)\n\n        for parent_doc in parent_docs:\n            doc = frappe.get_doc(parenttype, parent_doc.name)\n            if doc.doctype in repost_doctypes:\n                if doc.doctype == \"Sales Invoice\":\n                    doc.set(\"repost_vouchers\", [])\n                else:\n                    doc.set(\"vouchers\", [])\n                doc.ignore_validate = True\n                doc.flags.ignore_links = True\n                doc.save()\n\n", "CodeBleu_score": 33.56089707200674}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = self.get_repost_doctypes()\n    if not repost_doctypes:\n        return\n\n    repost_doctypes_with_voucher_fields = [\n        dt for dt in repost_doctypes if self.meta.get_field(f\"{dt}_vouchers\")\n    ]\n    if not repost_doctypes_with_voucher_fields:\n        return\n\n    voucher_fields = [\n        f\"{dt}_vouchers\" for dt in repost_doctypes_with_voucher_fields\n    ]\n    voucher_field_doctypes = [\n        self.meta.get_field(f\"{dt}_vouchers\").options\n        for dt in repost_doctypes_with_voucher_fields\n    ]\n\n    voucher_field_values = self.get_voucher_field_values()\n    voucher_field_values_json = json.dumps(voucher_field_values)\n\n    # Query for rows where the voucher type and number match the current document\n    query = (\n        qb.from_(self.doctype)\n        .select(\n            self.doctype,\n            self.name,\n            *voucher_fields,\n            self.voucher_type,\n            self.voucher_no,\n        )\n        .where(\n            (self.voucher_type == self.voucher_type)\n            & (self.voucher_no == self.voucher_no)\n        )\n        .get_sql()\n    )\n    rows = frappe.db.sql(query, as_dict=True)\n\n    # Organize rows into a map by parent document type and parent\n    repost_doctype_map = defaultdict(lambda: defaultdict(list))\n    for row in rows:\n        for dt in repost_doctypes_with_voucher_fields:\n            voucher_field_value = row.get(f\"{dt}_vouchers\")\n            if voucher_field", "CodeBleu_score": 29.74494570149594}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n\n    try:\n        client = authenticate_client()\n        query_params = {\n            \"start_date\": start_date,\n            \"end_date\": end_date,\n            \"options\": {\"account_ids\": [account_id]} if account_id else {},\n        }\n        response = client.Transactions.get(**query_params)\n        transactions = response[\"transactions\"]\n        total_transactions = response[\"total_transactions\"]\n        while len(transactions) < total_transactions:\n            query_params[\"offset\"] = len(transactions)\n            response = client.Transactions.get(**query_params)\n            transactions.extend(response[\"transactions\"])\n        return transactions\n    except APIError as e:\n        if e.code == \"PRODUCT_NOT_READY\":\n            frappe.throw(_(\"Plaid account is not ready for transactions.\"))\n        elif e.code == \"ITEM_LOGIN_REQUIRED\":\n            frappe.throw(_(\"Plaid account login is required.\"))\n        elif e.code == \"INVALID_CREDENTIALS\":\n            frappe.throw(_(\"Invalid credentials for Plaid account.\"))\n        elif e.code == \"INVALID_MFA\":\n            frappe.throw(_(\"Invalid MFA for Plaid account.\"))\n        elif e.code == \"INVALID_INPUT\":\n            frappe.throw(_(\"Invalid input for Plaid account.\"))\n        elif e.code == \"RATE_LIMIT_EXCEEDED\":\n            frappe.throw(_(\"Rate limit exceeded for Plaid account.\"))\n        elif e.code == \"API_ERROR\":\n            frappe.throw(_(\"API error for Plaid account.\"))\n        elif e.code == \"ITEM_ERROR\":\n            frappe.throw(_(\"Item error for Plaid account.\"))\n        elif e.code == \"INVALID_RESULT\":\n            frappe.throw(_(\"Invalid result for Plaid account.\"))\n        elif e.code == \"INVALID_PARAMETERS\":\n            frappe.throw(_(\"Invalid parameters for Plaid account.\"))\n        elif e.code == \"IN", "CodeBleu_score": 33.393922395888}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n\n    try:\n        client = self.get_client()\n\n        account_ids = [account_id] if account_id else None\n        count = 50\n        offset = 0\n\n        while True:\n            try:\n                response = client.Transactions.get(\n                    self.access_token,\n                    start_date,\n                    end_date,\n                    account_ids=account_ids,\n                    count=count,\n                    offset=offset,\n                )\n                frappe.log_error(frappe.as_json(response))\n                transactions = response[\"transactions\"]\n                self.extend(\"transactions\", transactions)\n                total_transactions = len(transactions)\n\n                if total_transactions < response[\"total_transactions\"]:\n                    offset += total_transactions\n                else:\n                    break\n\n            except plaid.errors.PlaidError as e:\n                if e.code == \"PRODUCT_NOT_READY\":\n                    raise e\n                else:\n                    frappe.log_error(frappe.get_traceback(), str(e))\n\n    except Exception as e:\n        frappe.log_error(frappe.get_traceback(), str(e))\n\n", "CodeBleu_score": 34.86080906427682}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        client = self.get_client()\n        account_ids = (\n            [account_id] if account_id else [item.account_id for item in self.accounts]\n        )\n        transactions = []\n        for id in account_ids:\n            try:\n                response = client.Transactions.get(\n                    id, start_date, end_date, count=500, offset=len(transactions)\n                )\n                transactions.extend(response[\"transactions\"])\n\n                while len(transactions) < response[\"total_transactions\"]:\n                    response = client.Transactions.get(\n                        id, start_date, end_date, count=500, offset=len(transactions)\n                    )\n                    transactions.extend(response[\"transactions\"])\n            except plaid.errors.PlaidError as e:\n                if e.code == \"PRODUCT_NOT_READY\":\n                    frappe.throw(_(\"Please try again. Our team is working on the issue.\"))\n                else:\n                    frappe.throw(e.code + \": \" + e.message)\n            except requests.exceptions.ConnectionError:\n                frappe.throw(_(\"Please try again. Our team is working on the issue.\"))\n            except requests.exceptions.Timeout:\n                frappe.throw(_(\"Please try again. Our team is working on the issue.\"))\n            except Exception as e:\n                frappe.log_error(frappe.get_traceback(), \"Plaid Connection Error\")\n                frappe.throw(str(e))\n        return transactions\n\n    except APIError as e:\n        frappe.throw(e.code + \": \" + e.message)\n    except InvalidRequestError as e:\n        frappe.throw(e.code + \": \" + e.message)\n    except ItemError as e:\n        frappe.throw(e.code + \": \" + e.message)\n    except Exception as e:\n        frappe.log_error(frappe.get_traceback(), \"Plaid Connection Error\")\n        frappe.throw(str(e))", "CodeBleu_score": 35.182662864098205}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t\n    try:\n        plaid_settings = frappe.get_single(\"Plaid Settings\")\n        public_token = json.loads(response)[\"public_token\"]\n        access_token = PlaidConnector(\n            client_name=plaid_settings.client_name,\n            client_id=plaid_settings.client_id,\n            secret=plaid_settings.secret,\n            public_key=plaid_settings.public_key,\n            environment=plaid_settings.environment,\n        ).Item.public_token.exchange(public_token)[\"access_token\"]\n        frappe.db.commit()\n        bank = frappe.db.get_value(\n            \"Bank\",\n            filters={\"access_token\": access_token},\n            fieldname=[\"name\"],\n            as_dict=1,\n        )\n        if bank:\n            bank = frappe.get_doc(\"Bank\", bank.name)\n            bank.access_token = access_token\n            bank.save()\n        else:\n            bank = frappe.new_doc(\"Bank\")\n            bank.bank_name = response[\"metadata\"][\"institution\"][\"name\"]\n            bank.access_token = access_token\n            bank.save()\n            add_tag(bank.name, \"Bank\")\n        frappe.local.flags.redirect_location = \"bank\"\n        raise frappe.Redirect\n    except ItemError as e:\n        frappe.throw(_(e.code))\n    except Exception as e:\n        frappe.log_error(e, \"Plaid\")", "CodeBleu_score": 38.68228459564412}, {"code": "def add_institution(token, response)\n\t\n    try:\n        plaid_connector = PlaidConnector(token)\n        access_token = plaid_connector.get_access_token(response)\n        bank_name = response.get(\"institution\", {}).get(\"name\")\n\n        bank = frappe.get_doc(\"Bank\", {\"bank_name\": bank_name})\n        if bank.name:\n            bank.access_token = access_token\n            bank.save()\n        else:\n            bank = frappe.new_doc(\"Bank\")\n            bank.bank_name = bank_name\n            bank.access_token = access_token\n            bank.insert()\n    except ItemError as e:\n        frappe.log_error(e, \"Plaid Item Error\")\n    except Exception as e:\n        frappe.log_error(e, \"Plaid Error\")\n\n", "CodeBleu_score": 42.65953260741782}, {"code": "def add_institution(token, response)\n\t\n    try:\n        plaid_settings = frappe.get_single(\"Plaid Settings\")\n        if not plaid_settings.enabled:\n            frappe.throw(_(\"Please enable Plaid Settings to add bank institution.\"))\n\n        response = json.loads(response)\n        access_token = response[\"access_token\"]\n        item_id = response[\"item_id\"]\n        institution_id = response[\"institution_id\"]\n        institution_name = response[\"institution_name\"]\n        plaid_connector = PlaidConnector(access_token=access_token)\n        plaid_connector.get_access_token(public_token=access_token)\n        bank_exists = frappe.db.exists(\n            \"Bank\", {\"plaid_item_id\": item_id, \"plaid_institution_id\": institution_id}\n        )\n        if not bank_exists:\n            bank = frappe.new_doc(\"Bank\")\n            bank.bank_name = institution_name\n            bank.plaid_item_id = item_id\n            bank.plaid_access_token = access_token\n            bank.plaid_institution_id = institution_id\n            bank.flags.ignore_mandatory = True\n            bank.insert()\n            add_tag(bank, \"Bank\")\n        else:\n            bank = frappe.get_doc(\"Bank\", {\"plaid_item_id\": item_id})\n            bank.plaid_access_token = access_token\n            bank.save()\n    except ItemError as e:\n        frappe.log_error(e.code + e.message)\n        frappe.throw(e.code + \":\" + e.message)\n    except Exception as e:\n        frappe.log_error(frappe.get_traceback())\n        frappe.throw(e)\n\n", "CodeBleu_score": 39.69032359343332}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t\n    start_date = bank.last_integration\n    end_date = add_months(start_date, months=1)\n\n    if end_date > today():\n        end_date = today()\n\n    if start_date >= end_date:\n        return\n\n    try:\n        transactions = PlaidConnector(bank.plaid_settings).get_transactions(\n            bank_account.plaid_account, start_date, end_date\n        )\n    except ItemError:\n        frappe.log_error(\n            \"Could not fetch transactions for account {}\".format(bank_account.name)\n        )\n        return\n\n    new_transactions = []\n    for transaction in transactions:\n        if transaction.pending:\n            continue\n\n        if not sbool(bank_account.import_unverified_transactions) and not transaction.verified:\n            continue\n\n        if transaction.date > today():\n            continue\n\n        new_transactions.append(\n            create_new_transaction(bank, bank_account, transaction)\n        )\n\n    if new_transactions:\n        frappe.db.bulk_insert(\"Bank Transaction\", new_transactions)\n        frappe.db.commit()\n\n        frappe.log_error(\n            \"{} new transactions added for account {}\".format(\n                len(new_transactions), bank_account.name\n            )\n        )\n\n        bank.last_integration = min(transaction.date for transaction in transactions)\n        bank.save()\n\n    else:\n        frappe.log_error(\n            \"No new transactions added for account {}\".format(bank_account.name)\n        )\n\n", "CodeBleu_score": 30.53668828592608}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        start_date = bank_account.last_integration_date or formatdate(add_months(today(), -3))\n        end_date = today()\n\n        bank_transactions = get_transactions(bank, bank_account, start_date, end_date)\n\n        if bank_transactions:\n            new_transactions = add_transactions(bank_transactions, bank_account)\n\n            if new_transactions:\n                bank_account.last_integration_date = formatdate(getdate(bank_transactions[-1].date))\n                bank_account.save()\n\n            frappe.log_error(\n                _(\"{0} new transactions added for account {1}\").format(\n                    len(new_transactions), bank_account.account\n                ),\n                _(\"Bank {0} Integration\").format(bank.name),\n            )\n\n    except ItemError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            frappe.log_error(\n                _(\"Plaid Item for account {0} requires re-authentication.\").format(\n                    bank_account.account\n                ),\n                _(\"Bank {0} Integration\").format(bank.name),\n            )\n        else:\n            frappe.log_error(\n                _(\"Error while syncing transactions for account {0}\").format(\n                    bank_account.account\n                ),\n                _(\"Bank {0} Integration\").format(bank.name),\n            )\n\n", "CodeBleu_score": 32.05931816508972}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        start_date = bank.last_integration_date\n        end_date = add_months(start_date, months=1)\n        today_date = getdate(today())\n\n        if end_date > today_date:\n            end_date = today_date\n\n        new_transactions = []\n        transactions = PlaidConnector.get_transactions(\n            bank.access_token, start_date, end_date, account_id=bank_account.plaid_account_id\n        )\n\n        for transaction in transactions:\n            if transaction.pending:\n                continue\n\n            if bank.last_integration_date and transaction.date <= bank.last_integration_date:\n                continue\n\n            new_transactions.append(transaction)\n\n        if new_transactions:\n            bank_transactions = []\n\n            for transaction in new_transactions:\n                bank_transaction = frappe.new_doc(\"Bank Transaction\")\n                bank_transaction.update(\n                    {\n                        \"doctype\": \"Bank Transaction\",\n                        \"date\": transaction.date,\n                        \"amount\": transaction.amount,\n                        \"description\": transaction.name,\n                        \"account\": bank_account.account,\n                        \"against_account\": bank_account.account,\n                        \"plaid_transaction_id\": transaction.transaction_id,\n                    }\n                )\n                bank_transactions.append(bank_transaction)\n\n            for dt in bank_transactions:\n                dt.insert()\n                dt.submit()\n\n            frappe.db.set_value(\n                \"Bank\",\n                bank.name,\n                \"last_integration_date\",\n                formatdate(new_transactions[-1].date, \"YYYY-mm-dd\"),\n            )\n\n            frappe.log_error(\n                title=\"Bank Integration Completed\",\n                message=f\"{len(new_transactions)} transactions added for {bank.bank_name}\",\n            )\n\n    except Exception:\n        frappe.log_error(\n            title=\"Bank Integration Failed\",\n            message=f\"Integration failed", "CodeBleu_score": 30.28128219962666}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t\n    try:\n        qbo_company = frappe.get_doc(\"Quickbooks Company\", self.quickbooks_company)\n        access_token = qbo_company.get_access_token()\n        company_abbr = encode_company_abbr(self.company)\n        query_uri = f\"https://quickbooks.api.intuit.com/v3/company/{company_abbr}/query?query=SELECT * FROM {entity} STARTPOSITION {self.start_position} MAXRESULTS 1000\"\n        total_count = self.get_count(query_uri, access_token)\n        if self.start_position >= total_count:\n            self.db_set(\"status\", \"Completed\")\n            return\n        self.start_position += 1000\n        self.db_set(\"status\", \"In Progress\")\n        self.db_set(\"start_position\", self.start_position)\n        self.db_set(\"total_count\", total_count)\n        self.db_set(\"total_processed\", self.start_position)\n        self.db_set(\"total_skipped\", 0)\n        self.db_set(\"total_failed\", 0)\n        self.db_set(\"total_success\", 0)\n        self.db_set(\"total_remaining\", total_count - self.start_position)\n        self.retry_count = 0\n        self.db_commit()\n        self.get_and_preprocess_entries(query_uri, access_token)\n    except Exception:\n        frappe.log_error(frappe.get_traceback())\n\n", "CodeBleu_score": 26.888019949428443}, {"code": "def _migrate_entries(self, entity)\n\t\n    try:\n        company = frappe.get_doc(\"Company\", self.company)\n        quickbooks_company = frappe.get_doc(\"QuickBooks Company\", self.quickbooks_company)\n        quickbooks_auth_token = frappe.get_doc(\"QuickBooks Authorization\", quickbooks_company.quickbooks_authorization)\n        query_uri = f\"https://quickbooks.api.intuit.com/v3/company/{company.quickbooks_company_id}/query?query=select * from {entity} maxresults 1000 startposition {self.start_position}\"\n        total_entries = requests.get(query_uri, headers={\"Authorization\": f\"Bearer {quickbooks_auth_token.access_token}\"}).json().get(\"QueryResponse\").get(\"totalCount\")\n        while self.start_position < total_entries:\n            response = requests.get(query_uri, headers={\"Authorization\": f\"Bearer {quickbooks_auth_token.access_token}\"}).json()\n            self.preprocess_and_save_entries(response, entity)\n            self.start_position += 1000\n        frappe.db.commit()\n    except Exception:\n        frappe.log_error(traceback.format_exc())\n        frappe.log_error(response.text)\n\n", "CodeBleu_score": 31.132559697901108}, {"code": "def _migrate_entries(self, entity)\n\t\n    try:\n        # Construct the query URI\n        query_uri = \"https://quickbooks.api.intuit.com/v3/company/{0}/query?query=SELECT * FROM {1}\".format(\n            self.company_id, entity\n        )\n\n        # Get the total number of entries\n        total_entries = self.get_total_entries(query_uri)\n\n        # Retrieve entries in batches of 1000\n        for start_position in range(1, total_entries, 1000):\n            # Construct the query URI with pagination\n            query_uri_with_pagination = \"{0}&minorversion=63&startPosition={1}\".format(\n                query_uri, start_position\n            )\n\n            # Get the entries for the current batch\n            entries = self.get_entries(query_uri_with_pagination)\n\n            # Preprocess and save the entries\n            self.preprocess_and_save_entries(entries, entity)\n\n    except Exception:\n        # Log any exceptions encountered and the response text\n        frappe.log_error(traceback.format_exc())\n        frappe.log_error(frappe.get_traceback())\n\n", "CodeBleu_score": 30.21377189968481}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\t\n    if invoice.get(\"type\") == \"JournalEntry\":\n        return self._save_journal_entry(invoice)\n\n    if invoice.get(\"type\") == \"SalesInvoice\":\n        return self._save_sales_invoice(invoice)\n\n    if invoice.get(\"type\") == \"PurchaseInvoice\":\n        return self._save_purchase_invoice(invoice)\n\n    if invoice.get(\"type\") == \"Estimate\":\n        return self._save_estimate(invoice)\n\n    if invoice.get(\"type\") == \"CreditNote\":\n        return self._save_credit_note(invoice)\n\n    if invoice.get(\"type\") == \"Bill\":\n        return self._save_bill(invoice)\n\n    if invoice.get(\"type\") == \"PurchaseOrder\":\n        return self._save_purchase_order(invoice)\n\n    if invoice.get(\"type\") == \"SalesReceipt\":\n        return self._save_sales_receipt(invoice)\n\n    if invoice.get(\"type\") == \"RefundReceipt\":\n        return self._save_refund_receipt(invoice)\n\n    if invoice.get(\"type\") == \"Deposit\":\n        return self._save_deposit(invoice)\n\n    if invoice.get(\"type\") == \"Payment\":\n        return self._save_payment(invoice)\n\n    if invoice.get(\"type\") == \"TimeActivity\":\n        return self._save_time_activity(invoice)\n\n    if invoice.get(\"type\") == \"VendorCredit\":\n        return self._save_vendor_credit(invoice)\n\n    if invoice.get(\"type\") == \"Invoice\":\n        return self._save_invoice(invoice)\n\n    if invoice.get(\"type\") == \"SalesReceipt\":\n        return self._save_sales_receipt(invoice)\n\n    if invoice.get(\"type\") == \"RefundReceipt\":\n        return self._save_refund_rece", "CodeBleu_score": 16.32587958166738}, {"code": "def _save_invoice(self, invoice)\n\t\n    if invoice.get(\"type\") == \"JournalEntry\":\n        return self._save_journal_entry(invoice)\n    else:\n        return self._save_sales_invoice(invoice)\n\n", "CodeBleu_score": 17.171682052480797}, {"code": "def _save_invoice(self, invoice)\n\t\n\n    self.set_missing_values(invoice)\n    invoice.flags.ignore_validate_update_after_submit = True\n    invoice.save()\n\n    if invoice.is_return:\n        return\n\n    if invoice.get(\"quickbooks_id\"):\n        return\n\n    if invoice.get(\"quickbooks_journal_entry_id\"):\n        return\n\n    if invoice.get(\"quickbooks_bill_id\"):\n        return\n\n    if invoice.get(\"quickbooks_sales_receipt_id\"):\n        return\n\n    if invoice.get(\"quickbooks_purchase_receipt_id\"):\n        return\n\n    if invoice.get(\"quickbooks_refund_receipt_id\"):\n        return\n\n    if invoice.get(\"quickbooks_estimate_id\"):\n        return\n\n    if invoice.get(\"quickbooks_credit_note_id\"):\n        return\n\n    if invoice.get(\"quickbooks_debit_note_id\"):\n        return\n\n    if invoice.get(\"quickbooks_payment_id\"):\n        return\n\n    if invoice.get(\"quickbooks_vendor_credit_id\"):\n        return\n\n    if invoice.get(\"quickbooks_sales_invoice_id\"):\n        return\n\n    if invoice.get(\"quickbooks_purchase_invoice_id\"):\n        return\n\n    if invoice.get(\"quickbooks_expense_receipt_id\"):\n        return\n\n    if invoice.get(\"quickbooks_time_activity_id\"):\n        return\n\n    if invoice.get(\"quickbooks_credit_memo_id\"):\n        return\n\n    if invoice.get(\"quickbooks_deposit_id\"):\n        return\n\n    if invoice.get(\"quickbooks_transfer_id\"):\n        return\n\n    if invoice.get(\"quickbooks_bill_payment_id\"):\n        return\n\n    if invoice.get(\"quickbooks_vendor_payment_id\"):\n        return\n", "CodeBleu_score": 12.873197332791564}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\n    # Calculate the interval between visits\n    interval = cint((date_diff(end_date, start_date) / (no_of_visit - 1)))\n\n    # Iterate to create the schedule\n    schedule_list = []\n    for i in range(no_of_visit):\n        schedule_date = add_days(start_date, i * interval)\n\n        # Adjust the date to avoid holidays\n        schedule_date = adjust_date_to_avoid_holidays(schedule_date, sales_person)\n\n        # Add the schedule date to the list\n        schedule_list.append(schedule_date)\n\n    return schedule_list\n\n", "CodeBleu_score": 24.093327400244014}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\n    if not start_date:\n        throw(_(\"Please select start date\"))\n    if not end_date:\n        throw(_(\"Please select end date\"))\n    if not no_of_visit:\n        throw(_(\"Please select number of visits\"))\n    if not sales_person:\n        throw(_(\"Please select sales person\"))\n\n    # Get the holiday list for the salesperson\n    holiday_list = get_holiday_list_for_employee(sales_person)\n\n    # Calculate the interval between visits\n    interval = date_diff(end_date, start_date) / no_of_visit\n\n    # Create the schedule list\n    schedule_list = []\n    for i in range(no_of_visit):\n        schedule_date = add_days(start_date, i * interval)\n        # Adjust the date to avoid holidays\n        while schedule_date in holiday_list:\n            schedule_date = add_days(schedule_date, 1)\n        schedule_list.append(schedule_date)\n\n    return schedule_list\n\n", "CodeBleu_score": 38.89304816664646}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\n    start_date = getdate(start_date)\n    end_date = getdate(end_date)\n    no_of_visit = cint(no_of_visit)\n\n    # Calculate the interval between visits\n    interval = date_diff(end_date, start_date) / (no_of_visit - 1)\n\n    # Create the schedule list\n    schedule_list = []\n    for i in range(no_of_visit):\n        visit_date = add_days(start_date, i * interval)\n        holiday_list = get_holiday_list_for_employee(sales_person, visit_date)\n        if holiday_list:\n            visit_date = get_next_working_day(visit_date, holiday_list)\n        schedule_list.append(visit_date)\n\n    return schedule_list\n\n", "CodeBleu_score": 32.008519427741426}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\t        $method = request()->getMethod();\n\n        $url = '';\n\n        if ($method == 'POST') {\n            $url = url('common/import/import');\n        } elseif ($method == 'DELETE') {\n            $url = url('common/import/destroy');\n        }\n\n        $html = view($view, compact('url'))->render();\n\n        return response()->json([\n            'success' => true,\n            'message' => trans('messages.success.added', ['type' => trans_choice('general.import', 2)]),\n            'data' => [\n                'title' => trans('general.import'),\n                'path' => 'common/import/index',\n                'handler' => 'onImport',\n                'content' => $html,\n            ],\n        ]);\n    }", "CodeBleu_score": 41.27054724244975}, {"code": "<?\n   public function response($view, $data = []){\n\t        $method = 'GET';\n        $bulk_action_url = route('modals.bulk.actions.accounts', ['account_id' => $this->account->id]);\n\n        // Get HTML\n        $html = view($view, compact('data', 'bulk_action_url'))->render();\n\n        return response()->json([\n            'success' => true,\n            'message' => 'null',\n            'data' => [\n                'title' => trans_choice('general.accounts', 1),\n                'path' => route('accounts.show', ['account' => $this->account->id]),\n                'handle' => 'account-modal',\n                'html' => $html\n            ]\n        ]);\n    }", "CodeBleu_score": 42.80954710530789}, {"code": "<?\n   public function response($view, $data = []){\n\t        $method = request()->getMethod();\n\n        // Bulk actions\n        $bulk_actions = [\n            'enable' => 'bulk-enable',\n            'disable' => 'bulk-disable',\n            'delete' => 'bulk-delete',\n        ];\n\n        foreach ($bulk_actions as $key => $value) {\n            $data[$key.'_url'] = route('modals.'.$value, ['company_id' => company_id(), 'type' => $this->translation_type]);\n        }\n\n        // Get HTML content for the modal\n        $html = view($view, $data)->render();\n\n        // Json response\n        if ($this->ajax) {\n            $response = [\n                'success' => true,\n                'error' => false,\n                'data' => $data,\n                'message' => '',\n                'html' => $html,\n            ];\n\n            return response()->json($response);\n        }\n\n        return $html;\n    }", "CodeBleu_score": 49.641870543787626}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t    $selected_contacts = $request->get('selected_contacts');\n\n    foreach ($selected_contacts as $contact_id) {\n        try {\n            Bus::dispatch(new DeleteContact($contact_id));\n        } catch (Throwable $e) {\n            report($e);\n\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 51.60245092138218}, {"code": "<?\npublic function deleteContacts($request){\n\t    $selected_contacts = array_keys($request->get('contacts'));\n\n    foreach ($selected_contacts as $contact_id) {\n        try {\n            Bus::dispatch(new DeleteContact($contact_id));\n        } catch (Throwable $e) {\n            report($e);\n\n            $message = trans('messages.warning.deleted', ['name' => $contact->name, 'text' => $e->getMessage()]);\n\n            flash($message)->warning();\n        }\n    }\n}", "CodeBleu_score": 53.65188525043665}, {"code": "<?\npublic function deleteContacts($request){\n\t    try {\n        // Get selected contacts\n        $selected_contacts = $request->get('selected_contacts');\n\n        // Dispatch delete operation for each contact\n        foreach ($selected_contacts as $contact_id) {\n            Bus::dispatch(new DeleteContact($contact_id));\n        }\n    } catch (Throwable $e) {\n        // Display error message if necessary\n        report($e);\n\n        $message = trans('messages.warning.deleted', ['type' => trans_choice('general.contacts', 2)]);\n\n        flash($message)->error()->important();\n    }\n}", "CodeBleu_score": 41.357369783473224}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getTransactions($request);\n\n    foreach ($transactions as $transaction) {\n        try {\n            Bus::dispatch(new DeleteTransaction($transaction));\n        } catch (Throwable $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 63.422690587961704}, {"code": "<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getSelectedRecords($request);\n\n    foreach ($transactions as $transaction) {\n        try {\n            Bus::dispatch(new DeleteTransaction($transaction));\n        } catch (Throwable $e) {\n            flash($e->getMessage())->error();\n        }\n    }\n}", "CodeBleu_score": 58.605322926595626}, {"code": "<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getTransactions($request);\n\n    foreach ($transactions as $transaction) {\n        try {\n            dispatch(new DeleteTransaction($transaction));\n        } catch (Throwable $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 63.398936280081955}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\t    $request_class = 'App\\\\Http\\\\Requests\\\\' . $this->import_class . 'Request';\n\n    if (!class_exists($request_class) || !is_subclass_of($request_class, FormRequest::class)) {\n        return;\n    }\n\n    foreach ($this->data as $row) {\n        try {\n            $request = new $request_class();\n            $rules = $request->rules();\n            $validator = Validator::make($row, $rules);\n            $validator->validate();\n        } catch (ValidationException $e) {\n            $validator->errors()->add($e->errors());\n            throw $e;\n        }\n    }\n}", "CodeBleu_score": 39.07530567585751}, {"code": "<?\npublic function withValidator($validator){\n\t    if ($this->requestClass && class_exists($this->requestClass) && ($request = new $this->requestClass()) instanceof FormRequest) {\n        foreach ($this->data as $row) {\n            $request->merge($row);\n            $rules = $request->rules();\n\n            try {\n                $validator->make($row, $rules)->validate();\n            } catch (ValidationException $e) {\n                $validator->errors()->merge($e->validator->errors());\n\n                throw $e;\n            }\n        }\n    }\n}", "CodeBleu_score": 33.183429227022856}, {"code": "<?\npublic function withValidator($validator){\n\t    $validator->after(function ($validator) {\n        foreach ($this->data as $row) {\n            try {\n                $request = new $this->request_class();\n\n                if (!$request instanceof FormRequest) {\n                    return;\n                }\n\n                $rules = $request->rules();\n\n                $this->prepareRules($rules);\n\n                $validator->setRules($rules);\n\n                $validator->validate($row, $rules);\n            } catch (ValidationException $e) {\n                $validator->errors()->merge($e->errors());\n\n                throw $e;\n            }\n        }\n    });\n}", "CodeBleu_score": 36.26118627371195}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    if (!$this instanceof ShouldUpdate) {\n        return;\n    }\n\n    foreach ($arguments as $argument) {\n        if ($argument instanceof Model) {\n            $this->model = $argument;\n            continue;\n        }\n\n        if ($argument instanceof Request) {\n            $this->request = $argument;\n            continue;\n        }\n    }\n}", "CodeBleu_score": 43.92792982321958}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    if ($this instanceof ShouldUpdate) {\n        foreach ($arguments as $argument) {\n            if ($argument instanceof Model) {\n                $this->model = $argument;\n            }\n\n            if ($argument instanceof Request) {\n                $this->request = $argument;\n            }\n        }\n    }\n}", "CodeBleu_score": 40.98314298969997}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    if ($this instanceof ShouldUpdate) {\n        $this->bootUpdateJob(...$arguments);\n    }\n}", "CodeBleu_score": 13.772225345354727}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t    event(new SearchStringApplying($query));\n\n    $sort = request('sort', $sort);\n\n    $search = request('search', '');\n\n    // Apply search\n    if (!empty($search)) {\n        $query->search($search);\n    }\n\n    // Apply sorting\n    $query->sortable($sort);\n\n    // Apply date filters\n    foreach (['date_field1', 'date_field2'] as $field) {\n        $this->applyDateFilter($query, $field);\n    }\n\n    // Check if request expects JSON response and is not an API request\n    if (request()->expectsJson() && !request()->isApi()) {\n        return $query->get();\n    }\n\n    // Apply limit and paginate the results\n    $limit = request('limit', setting('default.list_limit', '25'));\n\n    return $query->paginate($limit);\n}", "CodeBleu_score": 48.6422262395624}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t    event(new SearchStringApplying($query));\n    event(new SearchStringApplied($query));\n\n    if (request()->expectsJson() && !request()->isApi()) {\n        return $query->get();\n    }\n\n    return $query->paginate(request('limit', setting('default.list_limit', '25')));\n}", "CodeBleu_score": 32.57089448963306}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t    event(new SearchStringApplying($query));\n\n    if (request()->expectsJson() && !request()->isApi()) {\n        return $query->get();\n    }\n\n    $limit = request('limit', setting('default.list_limit', '25'));\n\n    return $query->paginate($limit)->appends(request()->except(['page', 'limit']));\n}", "CodeBleu_score": 40.90135309902908}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t    $open_amount = 0;\n    $overdue_amount = 0;\n\n    if ($model->status == 'paid') {\n        return [$open_amount, $overdue_amount];\n    }\n\n    if ($model->status == 'partial') {\n        $open_amount = $model->transactions->sum('amount');\n    }\n\n    $today = Date::today()->toDateString();\n\n    if ($model->due_at > $today) {\n        $open_amount += $model->amount;\n    } else {\n        $overdue_amount += $model->amount;\n    }\n\n    return [$open_amount, $overdue_amount];\n}", "CodeBleu_score": 53.34983813870171}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t    // Initialize the amounts\n    $open_amount = 0;\n    $overdue_amount = 0;\n\n    // Check if the document status is 'paid'\n    if ($model->status == 'paid') {\n        return [\n            'open_amount' => 0,\n            'overdue_amount' => 0,\n        ];\n    }\n\n    // Check if the document status is 'partial'\n    if ($model->status == 'partial') {\n        // Sum the payments from transactions\n        $transactions = $model->transactions;\n        foreach ($transactions as $transaction) {\n            $open_amount += $transaction->amount;\n        }\n    }\n\n    // Determine if the document is open or overdue\n    if ($model->due_at > now()->format('Y-m-d')) {\n        $open_amount = $model->amount - $open_amount;\n    } else {\n        $overdue_amount = $model->amount - $open_amount;\n    }\n\n    // Return the calculated open and overdue amounts\n    return [\n        'open_amount' => $open_amount,\n        'overdue_amount' => $overdue_amount,\n    ];\n}", "CodeBleu_score": 43.22870016074611}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t    $open_amount = 0;\n    $overdue_amount = 0;\n\n    if ($model->status == 'paid') {\n        return [\n            'open_amount' => 0,\n            'overdue_amount' => 0,\n        ];\n    }\n\n    if ($model->status == 'partial') {\n        $open_amount = $model->transactions->sum('amount');\n    }\n\n    $today = Date::today()->toDateString();\n\n    if ($model->due_at > $today) {\n        $open_amount += $model->amount;\n    } else {\n        $overdue_amount += $model->amount;\n    }\n\n    return [\n        'open_amount' => $open_amount,\n        'overdue_amount' => $overdue_amount,\n    ];\n}", "CodeBleu_score": 51.4468587051675}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n    $results = ($total = $this->toBase()->getCountForPagination())\n                ? $this->forPage($page, $perPage)->get($columns)\n                : $this->model->newCollection();\n\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 93.4093755013957}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $results = ($total = $this->toBase()->getCountForPagination())\n                ? $this->forPage($page, $perPage)->get($columns)\n                : $this->model->newCollection();\n\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 93.4093755013957}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n    $results = ($total = $this->toBase()->getCountForPagination())\n                ? $this->forPage($page, $perPage)->get($columns)\n                : $this->model->newCollection();\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 93.4093755013957}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t    $reconciliations = $this->getSelectedRecords($request);\n\n    \\DB::transaction(function () use ($reconciliations) {\n        foreach ($reconciliations as $reconciliation) {\n            $reconciliation->status = 'reconciled';\n            $reconciliation->save();\n\n            $transactions = Transaction::accountId($reconciliation->account_id)\n                ->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])\n                ->where('reconciled', 0)\n                ->get();\n\n            foreach ($transactions as $transaction) {\n                $transaction->reconciled = 1;\n                $transaction->save();\n            }\n        }\n    });\n}", "CodeBleu_score": 63.252567629168155}, {"code": "<?\npublic function reconcile($request){\n\t    $reconciliations = Reconciliation::find($request->input('ids'));\n\n    \\DB::transaction(function () use ($reconciliations) {\n        foreach ($reconciliations as $reconciliation) {\n            $reconciliation->status = 'reconciled';\n            $reconciliation->save();\n\n            $transactions = Transaction::accountId($reconciliation->account_id)\n                                        ->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])\n                                        ->each(function ($transaction) {\n                                            $transaction->reconciled = 1;\n                                            $transaction->save();\n                                        });\n        }\n    });\n}", "CodeBleu_score": 48.25573740955103}, {"code": "<?\npublic function reconcile($request){\n\t    $reconciliations = Reconciliation::with('account')->find($request->get('ids'));\n\n    \\DB::transaction(function () use ($reconciliations) {\n        foreach ($reconciliations as $reconciliation) {\n            $reconciliation->status = 'reconciled';\n            $reconciliation->save();\n\n            $transactions = Transaction::accountId($reconciliation->account_id)\n                ->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])\n                ->each(function ($transaction) {\n                    $transaction->reconciled = 1;\n                    $transaction->save();\n                });\n        }\n    });\n}", "CodeBleu_score": 52.059555369857456}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t    $this->authorize();\n\n    \\DB::transaction(function () {\n        $this->deleteInvitations();\n\n        $this->invitation = $this->dispatch(new CreateInvitation($this->request));\n    });\n\n    try {\n        $this->dispatch(new Notification($this->invitation, $this->current_source));\n    } catch (TransportException $e) {\n        throw new Exception(trans('auth.error.invitation_email_send'));\n    }\n\n    return $this->invitation;\n}", "CodeBleu_score": 28.327345844100293}, {"code": "<?\npublic function handle(): UserInvitation{\n\t    \\DB::transaction(function () {\n        $this->deleteInvitations();\n\n        $this->invitation = $this->createInvitation();\n\n        try {\n            $this->dispatchNotification();\n        } catch (TransportException $e) {\n            throw new Exception($e->getMessage());\n        }\n    });\n\n    return $this->invitation;\n}", "CodeBleu_score": 20.949286454416328}, {"code": "<?\npublic function handle(): UserInvitation{\n\t    try {\n        // Get and delete existing invitations\n        $invitations = $this->getUserInvitations();\n        $invitations->each(function ($invitation) {\n            $invitation->delete();\n        });\n\n        // Create new invitation\n        $invitation = $this->createInvitation();\n\n        // Send invitation by email\n        if (Sources::shouldQueue()) {\n            $invitation->notify(new Notification($invitation));\n        } else {\n            $invitation->notifyNow(new Notification($invitation));\n        }\n\n        return $invitation;\n    } catch (Exception $e) {\n        throw new Exception($e->getMessage());\n    }\n}", "CodeBleu_score": 25.58694514740066}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\t    if ($this->transaction->reconciled) {\n        throw new \\Exception('Unauthorized');\n    }\n\n    if ($this->transaction->type == 'income' || $this->transaction->type == 'expense') {\n        throw new \\Exception('Unauthorized');\n    }\n}", "CodeBleu_score": 39.86635904076311}, {"code": "<?\npublic function authorize(): void{\n\t    if ($this->transaction->reconciled) {\n        throw new \\Exception('Unauthorized :: Reconciled transaction cannot be updated.');\n    }\n\n    if ($this->transaction->type == 'income' || $this->transaction->type == 'expense') {\n        throw new \\Exception('Unauthorized :: Transfer transaction cannot be updated.');\n    }\n}", "CodeBleu_score": 30.94486111167863}, {"code": "<?\npublic function authorize(): void{\n\t    if ($this->request->get('reconciled')) {\n        throw new \\Exception('Unauthorized');\n    }\n\n    if ($this->transaction->type == 'income' || $this->transaction->type == 'expense') {\n        throw new \\Exception('Unauthorized');\n    }\n}", "CodeBleu_score": 39.14918576948677}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t    // \u5224\u65ad\u662f\u5426\u8fc7\u6ee4\n    if (Tools.isNotEmpty(tableName)) {\n        // \u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u79df\u6237ID\n        Long tenantId = getCurrentTenantId();\n        if (tenantId == null) {\n            return true;\n        }\n        // \u5982\u679c\u79df\u6237ID\u4e3a0\uff0c\u5219\u4e0d\u8fdb\u884c\u8fc7\u6ee4\uff0c\u9ed8\u8ba4\u6240\u6709\u8868\u90fd\u53ef\u67e5\u8be2\n        if (tenantId.equals(0L)) {\n            return true;\n        }\n        // \u5b9a\u4e49\u9700\u8981\u8fc7\u6ee4\u7684\u8868\u540d\n        String[] tableNames = new String[]{\"t_serial_number\", \"t_depot\", \"t_depot_head\", \"t_depot_item\", \"t_account\", \"t_account_head\", \"t_account_item\", \"t_material\", \"t_material_category\", \"t_material_property\", \"t_org\", \"t_role\", \"t_user\", \"t_user_business\", \"t_user_role\", \"t_msg\", \"t_msg_receive\", \"t_material_stock\", \"t_material_stock_log\", \"t_material_stock_warn\", \"t_material_stock_warn_log\", \"t_material_stock_check\", \"t_material_stock_check_log\", \"t_material_stock_check_item\", \"t_material_stock_check_item_log\", \"t_material_stock_check_item_log\", \"t_material_stock_check_item_log\", \"t_material_stock_check_item_log\", \"t_material_stock_check_item_log\", \"t_material_stock_check_item_log\", \"t_material_stock_check_item_log\", \"t_material_stock_check_item_log\", \"t_material_stock_check_item_log\", \"t_material_stock_check_item_log\", \"t_material_stock_check_item_log\", \"t_material_stock_check_item_log\", \"t_material_stock_check_item_log\", \"t_material_stock_check_item_log\", \"t_material_stock_check_item_log\", \"t_material_stock_check_", "CodeBleu_score": 17.20360851323789}, {"code": "public boolean doTableFilter(String tableName){\n\t    if (tableName.equals(\"tenant\")) {\n        return false;\n    }\n    if (tableName.equals(\"user\")) {\n        return false;\n    }\n    if (tableName.equals(\"log\")) {\n        return false;\n    }\n    if (tableName.equals(\"serial_number\")) {\n        return false;\n    }\n    if (tableName.equals(\"material_category\")) {\n        return false;\n    }\n    if (tableName.equals(\"material_property\")) {\n        return false;\n    }\n    if (tableName.equals(\"material_extend\")) {\n        return false;\n    }\n    if (tableName.equals(\"depot_head\")) {\n        return false;\n    }\n    if (tableName.equals(\"depot_item\")) {\n        return false;\n    }\n    if (tableName.equals(\"account_head\")) {\n        return false;\n    }\n    if (tableName.equals(\"account_item\")) {\n        return false;\n    }\n    if (tableName.equals(\"in_out_item\")) {\n        return false;\n    }\n    if (tableName.equals(\"material_stock\")) {\n        return false;\n    }\n    if (tableName.equals(\"material_stock_log\")) {\n        return false;\n    }\n    if (tableName.equals(\"material_stock_warn\")) {\n        return false;\n    }\n    if (tableName.equals(\"material_stock_check\")) {\n        return false;\n    }\n    if (tableName.equals(\"material_stock_check_item\")) {\n        return false;\n    }\n    if (tableName.equals(\"material_stock_check_item_log\")) {\n        return false;\n    }\n    if (tableName.equals(\"material_stock_check_item_log_batch\")) {\n        return false;\n    }\n    if (tableName.equals(\"material_stock_check_item_log_batch_detail\")) {\n        return false;\n    }\n    if (tableName.equals(\"material_stock_check_item_log_detail\")) {\n        return false;\n    }\n    if (tableName.equals(\"material", "CodeBleu_score": 16.13559274188591}, {"code": "public boolean doTableFilter(String tableName){\n\t    if (tableName.equals(\"tenant_info\")) {\n        return false;\n    }\n    if (tableName.equals(\"tenant_user\")) {\n        return false;\n    }\n    if (tableName.equals(\"tenant_role\")) {\n        return false;\n    }\n    if (tableName.equals(\"tenant_user_role\")) {\n        return false;\n    }\n    if (tableName.equals(\"tenant_role_menu\")) {\n        return false;\n    }\n    if (tableName.equals(\"tenant_menu\")) {\n        return false;\n    }\n    if (tableName.equals(\"tenant_user_platform_roles\")) {\n        return false;\n    }\n    if (tableName.equals(\"tenant_platform_roles\")) {\n        return false;\n    }\n    if (tableName.equals(\"tenant_platform_roles_menu\")) {\n        return false;\n    }\n    if (tableName.equals(\"tenant_platform_roles_user\")) {\n        return false;\n    }\n    if (tableName.equals(\"tenant_sequence\")) {\n        return false;\n    }\n    if (tableName.equals(\"tenant_sequence_incr\")) {\n        return false;\n    }\n    if (tableName.equals(\"tenant_sequence_current_value\")) {\n        return false;\n    }\n    if (tableName.equals(\"tenant_sequence_max_value\")) {\n        return false;\n    }\n    if (tableName.equals(\"tenant_sequence_step\")) {\n        return false;\n    }\n    if (tableName.equals(\"tenant_sequence_cache\")) {\n        return false;\n    }\n    if (tableName.equals(\"tenant_sequence_cache_value\")) {\n        return false;\n    }\n    if (tableName.equals(\"tenant_sequence_cache_step\")) {\n        return false;\n    }\n    if (tableName.equals(\"tenant_sequence_cache_max_value\")) {\n        return false;\n    }\n    if (tableName.equals(\"tenant_sequence_cache_current_value\")) {\n        return false", "CodeBleu_score": 16.377050776764246}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 75.2955715722213}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 75.2955715722213}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 75.2955715722213}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    Map<String, Object> params = new HashMap<String, Object>();\n    try {\n        params.put(\"isInOutItem\", true);\n        List<Account> accountList = accountService.getAccountList(params);\n        JSONArray arr = new JSONArray();\n        for (Account account : accountList) {\n            JSONObject obj = new JSONObject();\n            obj.put(\"id\", account.getId());\n            obj.put(\"name\", account.getName());\n            arr.add(obj);\n        }\n        return returnJson(new BaseResponseInfo(arr).toString(), null);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        return returnJson(new BaseResponseInfo(false, ErpInfo.ERROR.getErrorCode(), ErpInfo.ERROR.getErrorMsg()).toString(), null);\n    }\n}", "CodeBleu_score": 42.894808846493184}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    Map<String, Object> params = new HashMap<String, Object>();\n    String accountName = request.getParameter(\"accountName\");\n    String offset = request.getParameter(\"offset\");\n    String rows = request.getParameter(\"rows\");\n    if (StringUtil.isNotEmpty(accountName)) {\n        params.put(\"accountName\", accountName);\n    }\n    if (StringUtil.isNotEmpty(offset)) {\n        params.put(\"offset\", offset);\n    }\n    if (StringUtil.isNotEmpty(rows)) {\n        params.put(\"rows\", rows);\n    }\n    List<Account> accountList = accountService.selectByCondition(params);\n    JSONArray jsonArray = new JSONArray();\n    for (Account account : accountList) {\n        JSONObject obj = new JSONObject();\n        obj.put(\"id\", account.getId());\n        obj.put(\"text\", account.getAccountName());\n        jsonArray.add(obj);\n    }\n    return returnJson(jsonArray.toJSONString(), \"\u67e5\u8be2\u6210\u529f\", 200);\n}", "CodeBleu_score": 42.01261277650557}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    Map<String, Object> map = new HashMap<String, Object>();\n    try {\n        List<Account> accountList = accountService.findBySelect();\n        JSONArray arr = new JSONArray();\n        for (Account account : accountList) {\n            JSONObject obj = new JSONObject();\n            obj.put(\"id\", account.getId());\n            obj.put(\"name\", account.getName());\n            arr.add(obj);\n        }\n        map.put(\"rows\", arr);\n        map.put(\"total\", accountList.size());\n        return returnJson(new BaseResponseInfo(map).code(200));\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        return returnJson(new BaseResponseInfo(new ErpInfo(e.getMessage())).code(500));\n    }\n}", "CodeBleu_score": 45.603332301349205}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo response = new BaseResponseInfo();\n        try {\n            Map<String, Object> params = new HashMap<>();\n            params.put(\"name\", name);\n            params.put(\"serialNo\", serialNo);\n            params.put(\"currentPage\", currentPage);\n            params.put(\"pageSize\", pageSize);\n            List<AccountVo4List> accountList = accountService.getAccountList(params);\n            Long totalCount = accountService.getAccountCount(params);\n            response.code = ErpInfo.OK.code;\n            response.data = new JSONObject();\n            response.data.put(\"accountList\", accountList);\n            response.data.put(\"totalCount\", totalCount);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n            response.code = ErpInfo.ERROR.code;\n            response.msg = e.getMessage();\n        }\n        return response;\n    }", "CodeBleu_score": 48.66737563710023}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> params = new HashMap<String, Object>();\n            params.put(\"name\", name);\n            params.put(\"serialNo\", serialNo);\n            params.put(\"offset\", (currentPage - 1) * pageSize);\n            params.put(\"rows\", pageSize);\n            List<AccountVo4List> accountList = accountService.getAccountList(params);\n            Long total = accountService.getAccountCount(params);\n            res.setCode(ErpInfo.OK.getCode());\n            res.setData(accountList);\n            res.setCount(total);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n            res.setCode(ErpInfo.ERROR.getCode());\n            res.setMsg(ErpInfo.ERROR.getMsg());\n        }\n        return res;\n    }", "CodeBleu_score": 49.587422786469205}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t     BaseResponseInfo res = new BaseResponseInfo();\n     try {\n         Map<String, Object> params = new HashMap<String, Object>();\n         params.put(\"name\", name);\n         params.put(\"serialNo\", serialNo);\n         params.put(\"offset\", (currentPage - 1) * pageSize);\n         params.put(\"rows\", pageSize);\n         List<AccountVo4List> accountList = accountService.getAccountList(params);\n         Long total = accountService.getAccountCount(params);\n         res.code = ErpInfo.OK.code;\n         res.data = JSONObject.toJSON(new JSONArray(accountList));\n         res.msg = \"\u67e5\u8be2\u6210\u529f\";\n         res.setTotal(total);\n     } catch (Exception e) {\n         LOGGER.error(e.getMessage(), e);\n         res.code = ErpInfo.ERROR.code;\n         res.msg = \"\u67e5\u8be2\u5931\u8d25\";\n     }\n     return res;\n }", "CodeBleu_score": 54.69377806173015}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        String companyName = request.getAttribute(ErpInfo.USERINFO.getDes()).toString();\n        JSONObject result = accountService.getStatistics(name, serialNo, companyName);\n        res.code = 200;\n        res.data = result;\n    } catch (Exception e) {\n        Logger logger = LoggerFactory.getLogger(AccountController.class);\n        logger.error(e.toString());\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 56.479051031713645}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        Map<String, Object> map = new HashMap<String, Object>();\n        map.put(\"name\", name);\n        map.put(\"serialNo\", serialNo);\n        List<Map<String, Object>> list = accountService.getStatistics(map);\n        res.code = 200;\n        res.data = list;\n    } catch (Exception e) {\n        logger.error(e.toString());\n        res.code = 500;\n        res.msg = \"\u83b7\u53d6\u7edf\u8ba1\u4fe1\u606f\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 69.0265380816391}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        Map<String, Object> map = accountService.getStatistics(name, serialNo);\n        response.code = 200;\n        response.data = map;\n    } catch (Exception e) {\n        response.code = 500;\n        response.data = \"\u83b7\u53d6\u5931\u8d25\";\n        logger.error(e.getMessage(), e);\n    }\n    return response;\n}", "CodeBleu_score": 59.68462817100575}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            AccountHead accountHead = accountHeadService.getAccountHeadByBillNo(billNo);\n            if (accountHead != null) {\n                res.setCode(200);\n                res.setData(accountHead);\n            }\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n            res.setCode(500);\n            res.setError(e.getMessage());\n        }\n        return res;\n    }", "CodeBleu_score": 44.263546319732846}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try{\n            AccountHead accountHead = accountHeadService.getAccountHeadByNumber(billNo);\n            if(accountHead == null){\n                return res;\n            }\n            List<AccountHeadVo4ListEx> list = accountHeadService.getDetailListByHeadId(accountHead.getId());\n            res.getMap().put(\"accountHead\", accountHead);\n            res.getMap().put(\"accountList\", list);\n            res.setCode(ExceptionConstants.RESULT_CODE_SUCCESS);\n            res.setType(ExceptionConstants.RESULT_NAME_SUCCESS);\n            res.setMessage(ExceptionConstants.RESULT_MSG_SUCCESS);\n            return res;\n        }catch(Exception e){\n            logger.error(e.toString());\n            res.setCode(ExceptionConstants.RESULT_CODE_ERROR);\n            res.setType(ExceptionConstants.RESULT_NAME_ERROR);\n            res.setMessage(ExceptionConstants.RESULT_MSG_ERROR);\n            return res;\n        }\n    }", "CodeBleu_score": 40.89831042179049}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try{\n            AccountHead accountHead = accountHeadService.getAccountHeadByNumber(billNo);\n            res.getMap().put(\"accountHead\", accountHead);\n            res.setCode(ExceptionConstants.SUCCESS_CODE);\n            res.setType(ExceptionConstants.SUCCESS_TYPE);\n            res.setMessage(ExceptionConstants.SUCCESS_MESS);\n        }catch(Exception e){\n            ErpInfo.setErrorMessage(e, res);\n            logger.error(e.getMessage(), e);\n        }\n        return res;\n    }", "CodeBleu_score": 41.000399350544505}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo responseInfo = new BaseResponseInfo();\n    try {\n        String currentUserName = request.getSession().getAttribute(BusinessConstants.CURRENT_USER).toString();\n        UserService userService = ApplicationContextUtil.getBean(UserService.class);\n        UserBusinessService userBusinessService = ApplicationContextUtil.getBean(UserBusinessService.class);\n        Long currentUserId = userService.getUserIdByUserName(currentUserName);\n        Long depotId = userBusinessService.getDepotIdByUserId(currentUserId);\n        DepotService depotService = ApplicationContextUtil.getBean(DepotService.class);\n        Depot depot = depotService.getDepotById(depotId);\n        responseInfo.code = 200;\n        responseInfo.data = depot;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        responseInfo.code = 500;\n        responseInfo.data = \"\u83b7\u53d6\u4ed3\u5e93\u4fe1\u606f\u5931\u8d25\";\n    }\n    return responseInfo;\n}", "CodeBleu_score": 48.718970299054206}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        String userId = request.getAttribute(BusinessConstants.USER_ID_KEY).toString();\n        List<Depot> depotList = depotService.findDepotByUserId(userId);\n        response.code = 200;\n        response.data = depotList;\n    } catch (Exception e) {\n        e.printStackTrace();\n        logger.error(e.getMessage());\n        response.code = 500;\n        response.msg = \"\u67e5\u8be2\u5931\u8d25\";\n    }\n    return response;\n}", "CodeBleu_score": 51.200430159534335}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo responseInfo = new BaseResponseInfo();\n    try {\n        // \u83b7\u53d6\u5f53\u524d\u7528\u6237\u4fe1\u606f\n        UserService userService = ApplicationContextUtil.getBean(UserService.class);\n        UserBusinessService userBusinessService = ApplicationContextUtil.getBean(UserBusinessService.class);\n        String userId = userService.getCurrentUserId();\n        String businessId = userBusinessService.getUserBusinessByUserId(userId).getBusinessId();\n        // \u83b7\u53d6\u4ed3\u5e93\u4fe1\u606f\n        DepotService depotService = ApplicationContextUtil.getBean(DepotService.class);\n        List<Depot> depotList = depotService.findDepotByBusinessId(businessId);\n        responseInfo.code = 200;\n        responseInfo.data = depotList;\n    } catch (Exception e) {\n        logger.error(ExceptionUtil.getStackTrace(e));\n        responseInfo.code = 500;\n        responseInfo.data = \"\u83b7\u53d6\u4ed3\u5e93\u4fe1\u606f\u5931\u8d25\";\n    }\n    return responseInfo;\n}", "CodeBleu_score": 45.00836736964837}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    JSONArray array = new JSONArray();\n    List<Function> functions = functionService.findRoleFunction(type, keyId);\n    JSONObject obj = new JSONObject();\n    obj.put(\"functions\", functions);\n    if (!\"admin\".equals(Tools.getCurrentUserName())) {\n        List<Function> functionList = obj.getJSONArray(\"functions\").toJavaList(Function.class);\n        List<Function> newFunctionList = new ArrayList<Function>();\n        for (Function function : functionList) {\n            if (function.getMenu().equals(\"\u7cfb\u7edf\u7ba1\u7406\")) {\n                if (!function.getUrl().contains(\"tenant\")) {\n                    newFunctionList.add(function);\n                }\n            } else {\n                newFunctionList.add(function);\n            }\n        }\n        obj.put(\"functions\", newFunctionList);\n    }\n    array.add(obj);\n    return array;\n}", "CodeBleu_score": 37.8469269048734}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    JSONArray jsonArray = new JSONArray();\n    List<Function> functions = functionService.findRoleFunction(type, keyId);\n    JSONObject jsonObject = new JSONObject();\n    jsonObject.put(\"functions\", functions);\n    if (!\"admin\".equals(Tools.getCurrentUserName())) {\n        jsonObject.put(\"functions\", filterFunction(jsonObject.getJSONArray(\"functions\"), Tools.getToken(request).getTenantId()));\n    }\n    jsonArray.add(jsonObject);\n    return jsonArray;\n}", "CodeBleu_score": 23.284420823913727}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    JSONArray array = new JSONArray();\n    List<Function> functionList = functionService.findRoleFunction(type, keyId);\n    JSONObject obj = new JSONObject();\n    obj.put(\"functions\", functionList);\n    if (!\"admin\".equals(request.getAttribute(ErpInfo.USER_TYPE))) {\n        List<Function> functions = obj.getJSONArray(\"functions\").toJavaList(Function.class);\n        List<Function> list = new ArrayList<>();\n        for (Function function : functions) {\n            if (!function.getMenu().equals(\"\u7cfb\u7edf\u7ba1\u7406\")) {\n                list.add(function);\n            }\n        }\n        obj.put(\"functions\", list);\n    }\n    array.add(obj);\n    return array;\n}", "CodeBleu_score": 35.78266783931977}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try{\n            PlatformConfig platformConfig = platformConfigService.getPlatformConfigByPlatformKey(platformKey);\n            res.code = 200;\n            res.data = platformConfig;\n        } catch(Exception e) {\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.error = \"\u83b7\u53d6\u5e73\u53f0\u914d\u7f6e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 80.28509886069104}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try{\n        PlatformConfig platformConfig = platformConfigService.getPlatformConfigByPlatformKey(platformKey);\n        res.code = 200;\n        res.data = platformConfig;\n    } catch(Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.error(\"\u83b7\u53d6\u5e73\u53f0\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\");\n    }\n    return res;\n}", "CodeBleu_score": 77.23937212483362}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        PlatformConfig config = platformConfigService.getPlatformConfigByPlatformKey(platformKey);\n        res.code = 200;\n        res.data = config;\n    } catch (Exception e) {\n        log.error(e.getMessage(), e);\n        res.code = 500;\n        res.error(\"\u83b7\u53d6\u5e73\u53f0\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\");\n    }\n    return res;\n}", "CodeBleu_score": 76.17326701580926}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo responseInfo = new BaseResponseInfo();\n    try {\n        List<SystemConfig> list = systemConfigService.getSystemConfigList();\n        responseInfo.code = 200;\n        responseInfo.data = list.get(0);\n    } catch (Exception e) {\n        e.printStackTrace();\n        responseInfo.code = 500;\n        responseInfo.data = \"\u83b7\u53d6\u7cfb\u7edf\u914d\u7f6e\u5931\u8d25\";\n    }\n    return responseInfo;\n}", "CodeBleu_score": 63.40951348096853}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> list = systemConfigService.getAllList();\n        if (list != null && list.size() > 0) {\n            response.setCode(200);\n            response.setData(list.get(0));\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n        response.setCode(500);\n        response.setMessage(\"\u83b7\u53d6\u7cfb\u7edf\u914d\u7f6e\u5931\u8d25\");\n    }\n    return response;\n}", "CodeBleu_score": 39.58268970947433}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        List<SystemConfig> systemConfigList = systemConfigService.getAllList();\n        res.code = 200;\n        res.data = systemConfigList.get(0);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 76.99417714621282}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        // \u83b7\u53d6\u4e1a\u52a1\u8def\u5f84\n        String businessPath = getBusinessPath(request);\n        // \u83b7\u53d6\u4e0a\u4f20\u7684\u6587\u4ef6\n        MultipartFile file = ((MultipartHttpServletRequest) request).getFile(\"file\");\n        // \u83b7\u53d6\u4e0a\u4f20\u7c7b\u578b\n        String uploadType = request.getParameter(\"uploadType\");\n        // \u4e0a\u4f20\u6587\u4ef6\n        String fileName = uploadFile(file, businessPath, uploadType);\n        // \u8bbe\u7f6e\u54cd\u5e94\u7801\u548c\u6570\u636e\n        res.setCode(200);\n        res.setData(fileName);\n    } catch (Exception e) {\n        logger.error(\"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\", e);\n        res.setCode(500);\n        res.setData(\"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\");\n    }\n    return res;\n}", "CodeBleu_score": 37.444819733078305}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    // Get the business path from the request\n    String businessPath = request.getParameter(\"businessPath\");\n    // Get the uploaded file from the request\n    MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n    MultipartFile multipartFile = multipartRequest.getFile(\"file\");\n    // Get the file upload type from the request\n    String fileUploadType = request.getParameter(\"fileUploadType\");\n    // Set the response code and data\n    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        // If the file upload type is local, save the file locally\n        if (\"local\".equals(fileUploadType)) {\n            // Get the file name from the uploaded file\n            String fileName = multipartFile.getOriginalFilename();\n            // Get the file path from the business path and the file name\n            String filePath = businessPath + \"/\" + fileName;\n            // Save the file to the file path\n            FileUtils.uploadFile(multipartFile.getBytes(), filePath);\n            // Set the response data to the file path\n            res.setCode(0);\n            res.setData(filePath);\n        } else if (\"alioss\".equals(fileUploadType)) {\n            // If the file upload type is alioss, save the file to AliOss\n            // Get the file name from the uploaded file\n            String fileName = multipartFile.getOriginalFilename();\n            // Get the file path from the business path and the file name\n            String filePath = businessPath + \"/\" + fileName;\n            // Save the file to AliOss\n            String url = FileUtils.uploadFile2AliOss(multipartFile.getBytes(), filePath);\n            // Set the response data to the file path\n            res.setCode(0);\n            res.setData(url);\n        } else {\n            // If the file upload type is not local or alioss, set the response code to 1\n            res.setCode(1);\n        }\n    } catch (Exception e) {\n        // Log any exceptions\n        logger.error(e.getMessage(), e);\n        // Set the response code to 1\n        res.setCode(1);\n    }\n    // Return", "CodeBleu_score": 42.852399238051696}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    BaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n    try {\n        String businessPath = request.getParameter(\"businessPath\");\n        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n        List<MultipartFile> files = multipartRequest.getFiles(\"file\");\n        MultipartFile file = files.get(0);\n        String fileName = file.getOriginalFilename();\n        String uploadType = request.getParameter(\"uploadType\");\n        if (StringUtil.isBlank(uploadType)) {\n            uploadType = \"local\";\n        }\n        if (\"local\".equals(uploadType)) {\n            FileUtils.uploadFile(file.getBytes(), businessPath, fileName);\n        } else if (\"oss\".equals(uploadType)) {\n            FileUtils.uploadFileToAliOss(file.getBytes(), businessPath, fileName);\n        }\n        baseResponseInfo.setCode(200);\n        baseResponseInfo.setData(businessPath + fileName);\n    } catch (Exception e) {\n        LOGGER.error(e.getMessage(), e);\n        baseResponseInfo.setCode(500);\n        baseResponseInfo.setMessage(\"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\");\n    }\n    return baseResponseInfo;\n}", "CodeBleu_score": 39.176746325495216}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t        try {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            List<JSONObject> dataList = (List<JSONObject>) jsonObject.get(\"dataList\");\n            exportExcel(title, head, tip, dataList, response);\n        } catch (Exception e) {\n            logger.error(\"\u5bfc\u51fa\u5931\u8d25\", e);\n        }\n    }", "CodeBleu_score": 71.85059595225901}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t        try {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            List<JSONObject> dataList = jsonObject.getJSONArray(\"dataList\").toJavaList(JSONObject.class);\n            service.exportExcelByParam(title, head, tip, dataList, response);\n        } catch (Exception e) {\n            logger.error(\"\u5bfc\u51faExcel\u5f02\u5e38\", e);\n        }\n    }", "CodeBleu_score": 72.19819808771548}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t     String title = jsonObject.getString(\"title\");\n     String head = jsonObject.getString(\"head\");\n     String tip = jsonObject.getString(\"tip\");\n     JSONArray data = jsonObject.getJSONArray(\"data\");\n     try {\n         exportExcel(title, head, tip, data, response);\n     } catch (Exception e) {\n         logger.error(\"\u5bfc\u51faExcel\u5931\u8d25\", e);\n     }\n }", "CodeBleu_score": 77.47457145665417}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t    logger.debug(\"\u5f00\u59cb\u65b0\u589e\u8d26\u6237\u4fe1\u606f\");\n    Account account = new Account();\n    account.setName(obj.getString(\"name\"));\n    account.setSerialNo(obj.getString(\"serialNo\"));\n    account.setInitialAmount(obj.getBigDecimal(\"initialAmount\"));\n    account.setCurrentAmount(obj.getBigDecimal(\"initialAmount\"));\n    account.setRemark(obj.getString(\"remark\"));\n    account.setIsDefault(obj.getBoolean(\"isDefault\"));\n    // \u5982\u679c\u6ca1\u6709\u6307\u5b9a\u662f\u5426\u9ed8\u8ba4\uff0c\u5219\u5224\u65ad\u662f\u5426\u6709\u9ed8\u8ba4\u8d26\u6237\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5219\u8bbe\u7f6e\u5f53\u524d\u8d26\u6237\u4e3a\u9ed8\u8ba4\u8d26\u6237\n    if (!obj.getBoolean(\"isDefault\")) {\n        Account defaultAccount = accountMapper.getDefaultAccount();\n        if (defaultAccount == null) {\n            account.setIsDefault(true);\n        }\n    }\n    account.setEnabled(true);\n    int result = accountMapper.insertAccount(account);\n    if (result != 1) {\n        throw new JshException(ExceptionConstants.INSERT_FAILED);\n    }\n    // \u83b7\u53d6\u64cd\u4f5c\u7528\u6237\n    User user = userService.getUserByToken(request);\n    // \u8bb0\u5f55\u65e5\u5fd7\n    logService.insertLog(\"\u65b0\u589e\u8d26\u6237\", \"id\u4e3a\" + account.getId() + \"\u7684\u8d26\u6237\", request);\n    return result;\n}", "CodeBleu_score": 39.03914264097942}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t    Account account = new Account();\n    account.setName(obj.getString(\"name\"));\n    account.setSerialNo(obj.getString(\"serialNo\"));\n    account.setInitialAmount(obj.getBigDecimal(\"initialAmount\"));\n    account.setCurrentAmount(new BigDecimal(0));\n    account.setRemark(obj.getString(\"remark\"));\n    account.setIsDefault(false);\n    account.setEnable(true);\n    List<Account> accountList = accountMapper.selectByCondition(new Account());\n    if(accountList==null||accountList.size()==0){\n        account.setIsDefault(true);\n    }\n    int num = accountMapper.insert(account);\n    if(num != 0){\n        logService.insert(new LogObject(\"insert\", new Gson().toJson(account), null, account.getId(), request));\n    }\n    return num;\n}", "CodeBleu_score": 41.84874250419037}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t    // Initialize the account\n    Account account = new Account();\n    // Set the account name and type\n    account.setName(obj.getString(\"name\"));\n    account.setType(obj.getString(\"type\"));\n    // Set the initial amount to zero if not specified\n    account.setInitialAmount(obj.getBigDecimal(\"initialAmount\") == null ? new BigDecimal(0) : obj.getBigDecimal(\"initialAmount\"));\n    // Determine if the account should be set as the default based on existing accounts\n    if (obj.getBoolean(\"isDefault\") == null) {\n        List<Account> accountList = accountMapper.getAccountList(new Account());\n        if (accountList.size() == 0) {\n            account.setIsDefault(true);\n        } else {\n            account.setIsDefault(false);\n        }\n    } else {\n        account.setIsDefault(obj.getBoolean(\"isDefault\"));\n    }\n    // Enable the account\n    account.setEnabled(true);\n    // Insert the account into the database\n    int result = accountMapper.insertAccount(account);\n    // Log the operation\n    logService.insertLog(new Log(\"\u6dfb\u52a0\u8d26\u6237\", new Date(), \"\u6dfb\u52a0\u8d26\u6237\uff1a\" + account.getName(), getCurrentUserName()));\n    // Return the result of the insert operation\n    return result;\n}", "CodeBleu_score": 48.51851323400701}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    try {\n        return accountMapper.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        log.error(e.getMessage(), e);\n        return null;\n    }\n}", "CodeBleu_score": 30.906611526741912}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    try {\n        return accountMapper.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        log.error(e.getMessage());\n        return null;\n    }\n}", "CodeBleu_score": 30.500084272328877}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    try {\n        return accountMapper.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        return null;\n    }\n}", "CodeBleu_score": 31.193157544109674}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    try {\n        depotItemMapper.deleteByPrimaryKey(id);\n        return 1;\n    } catch (Exception e) {\n        LOGGER.error(e.getMessage(), e);\n        throw new JshException(ExceptionConstants.DELETE_FAILED);\n    }\n}", "CodeBleu_score": 30.561803260485743}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    try{\n        return depotItemMapper.deleteByPrimaryKey(id);\n    }catch(Exception e){\n        logger.error(e.getMessage(), e);\n        throw e;\n    }\n}", "CodeBleu_score": 33.512392540868}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    try{\n        DepotItem depotItem = depotItemMapper.selectByPrimaryKey(id);\n        if(depotItem == null)\n            throw new BusinessRunTimeException(ExceptionConstants.DEPOT_ITEM_IS_NULL);\n        return depotItemMapper.deleteByPrimaryKey(id);\n    }catch(Exception e){\n        logger.error(e.getMessage(), e);\n        throw new BusinessRunTimeException(e.getMessage());\n    }\n}", "CodeBleu_score": 37.21084942362731}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t    CloseableHttpClient httpclient = HttpClients.createDefault();\n    String requestUrl = String.format(\"http://localhost:8080/api/%s/%s/%s\", projectName, nodeType, nodeKey);\n    HttpGet httpGet = new HttpGet(requestUrl);\n    CloseableHttpResponse response = null;\n    try {\n        response = httpclient.execute(httpGet);\n        HttpEntity entity = response.getEntity();\n        String responseString = EntityUtils.toString(entity);\n        ObjectMapper mapper = new ObjectMapper();\n        Map<String, Object> responseMap = mapper.readValue(responseString, Map.class);\n        return responseMap.containsKey(\"key\");\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        if (response != null) {\n            try {\n                response.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        if (httpclient != null) {\n            try {\n                httpclient.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return false;\n}", "CodeBleu_score": 46.518613069388906}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t    String url = \"http://localhost:8080/addNode?projectName=\" + projectName + \"&nodeType=\" + nodeType + \"&nodeKey=\" + nodeKey;\n    CloseableHttpClient httpClient = HttpClients.createDefault();\n    HttpGet httpGet = new HttpGet(url);\n    try {\n        CloseableHttpResponse response = httpClient.execute(httpGet);\n        HttpEntity entity = response.getEntity();\n        String responseString = EntityUtils.toString(entity, Charset.forName(\"UTF-8\"));\n        if (responseString.contains(\"key\")) {\n            return true;\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        try {\n            httpClient.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return false;\n}", "CodeBleu_score": 43.34080978949949}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t    CloseableHttpClient httpclient = HttpClients.createDefault();\n    String url = \"http://localhost:8080/api/project/\" + projectName + \"/node/\" + nodeType + \"/\" + nodeKey;\n    HttpGet httpGet = new HttpGet(url);\n    CloseableHttpResponse response = null;\n    try {\n        response = httpclient.execute(httpGet);\n        HttpEntity entity = response.getEntity();\n        String responseString = EntityUtils.toString(entity);\n        if (responseString.contains(\"key\")) {\n            return true;\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        try {\n            if (response != null) {\n                response.close();\n            }\n            httpclient.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return false;\n}", "CodeBleu_score": 43.77547715519496}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t    String url = \"http://localhost:8080/addEdge\";\n    String params = \"?projectName=\" + projectName + \"&edgeType=\" + edgeType + \"&fromType=\" + fromType + \"&toType=\" + toType + \"&from=\" + from + \"&to=\" + to;\n    CloseableHttpClient httpClient = HttpClients.createDefault();\n    HttpGet httpGet = new HttpGet(url + params);\n    CloseableHttpResponse response = null;\n    try {\n        response = httpClient.execute(httpGet);\n        HttpEntity entity = response.getEntity();\n        String responseString = EntityUtils.toString(entity, Charset.forName(\"UTF-8\"));\n        ObjectMapper objectMapper = new ObjectMapper();\n        Map<String, Object> responseMap = objectMapper.readValue(responseString, Map.class);\n        if (responseMap.containsKey(\"key\")) {\n            return true;\n        } else {\n            return false;\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    } finally {\n        if (response != null) {\n            try {\n                response.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        if (httpClient != null) {\n            try {\n                httpClient.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}", "CodeBleu_score": 49.9871116747143}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t    boolean success = false;\n    CloseableHttpClient httpClient = HttpClients.createDefault();\n    try {\n        HttpGet httpGet = new HttpGet(graphService.getEndpoint() + \"/\" + projectName + \"/\" + edgeType + \"?fromType=\" + fromType + \"&toType=\" + toType + \"&from=\" + from + \"&to=\" + to);\n        CloseableHttpResponse response = httpClient.execute(httpGet);\n        HttpEntity entity = response.getEntity();\n        String json = EntityUtils.toString(entity);\n        if (json.contains(\"\\\"key\\\"\")) {\n            success = true;\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        try {\n            httpClient.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return success;\n}", "CodeBleu_score": 41.79800566143101}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t    try (CloseableHttpClient httpClient = HttpClients.createDefault()) {\n        HttpGet httpGet = new HttpGet(\"http://localhost:8080/addEdge?projectName=\" + projectName + \"&edgeType=\" + edgeType + \"&fromType=\" + fromType + \"&toType=\" + toType + \"&from=\" + from + \"&to=\" + to);\n        CloseableHttpResponse response = httpClient.execute(httpGet);\n        HttpEntity entity = response.getEntity();\n        String json = EntityUtils.toString(entity, Charset.forName(\"UTF-8\"));\n        Map<String, Object> jsonMap = new ObjectMapper().readValue(json, Map.class);\n        if (jsonMap.containsKey(\"key\")) {\n            return true;\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return false;\n}", "CodeBleu_score": 46.62789552789089}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\t    if (event == null) {\n        return;\n    }\n    if (event.getMessage() == null) {\n        return;\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(new Location());\n        event.getLocation().setLatitude(new Random().nextDouble());\n        event.getLocation().setLongitude(new Random().nextDouble());\n    }\n    event.setEventTime(new Date());\n    String jsonString = null;\n    try {\n        jsonString = new ObjectMapper().writeValueAsString(event);\n    } catch (JsonProcessingException e) {\n        e.printStackTrace();\n    }\n    String topic = event.getTarget() != null ? event.getTarget() : \"test\";\n    Producer<String, String> producer = new KafkaProducer<>(props);\n    producer.send(new ProducerRecord<>(topic, jsonString));\n    producer.flush();\n}", "CodeBleu_score": 57.86486697638953}, {"code": "public void sendEvent(Event event){\n\t    if (event == null) {\n        return;\n    }\n    if (event.getMessage() == null) {\n        return;\n    }\n    if (event.getLocation() == null) {\n        Location location = new Location();\n        location.setLatitude(new Random().nextDouble());\n        location.setLongitude(new Random().nextDouble());\n        event.setLocation(location);\n    }\n    event.setEventTime(new Date());\n    String jsonString = \"\";\n    try {\n        jsonString = new ObjectMapper().writeValueAsString(event);\n    } catch (JsonProcessingException e) {\n        e.printStackTrace();\n    }\n    String topic = event.getTarget();\n    if (topic == null) {\n        topic = \"test\";\n    }\n    ProducerRecord<String, String> record = new ProducerRecord<>(topic, jsonString);\n    producer.send(record);\n    producer.flush();\n}", "CodeBleu_score": 64.93505710897422}, {"code": "public void sendEvent(Event event){\n\t    if (event == null) {\n        return;\n    }\n    if (event.getMessage() == null) {\n        return;\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(new Location(\"127.0.0.1\", \"test\", \"test\"));\n    }\n    event.setTime(new Date());\n    String json = null;\n    try {\n        json = new ObjectMapper().writeValueAsString(event);\n    } catch (JsonProcessingException e) {\n        e.printStackTrace();\n    }\n    String target = event.getTarget();\n    if (target == null) {\n        target = \"test\";\n    }\n    ProducerRecord<String, String> record = new ProducerRecord<>(target, json);\n    producer.send(record);\n    producer.flush();\n}", "CodeBleu_score": 60.04174981338117}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t    OSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n    ossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n    ossClient.shutdown();\n    return \"https://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}", "CodeBleu_score": 31.474674994091888}, {"code": "public String upload(String objName, byte[] content){\n\t    // \u521d\u59cb\u5316OSS\u5ba2\u6237\u7aef\n    OSSClient client = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\n    // \u4e0a\u4f20\u6587\u4ef6\n    client.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\n    // \u5173\u95edOSS\u5ba2\u6237\u7aef\n    client.shutdown();\n\n    // \u8fd4\u56de\u6587\u4ef6URL\n    return \"https://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}", "CodeBleu_score": 30.949492856744744}, {"code": "public String upload(String objName, byte[] content){\n\t    OSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n    ossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n    ossClient.shutdown();\n    return \"https://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}", "CodeBleu_score": 31.474674994091888}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t    IpToLocationWorker worker = IpToLocationWorker.getInstance();\n    if (worker == null) {\n        return new LocationInfo(\"unknown\", \"unknown\", \"unknown\");\n    }\n    return worker.getLocation(ipAddress);\n}", "CodeBleu_score": 23.681855553010518}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t    IpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\");\n    }\n\n    IPZone ipZone = worker.getIpZone(ipAddress);\n    if (ipZone == null) {\n        return new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\");\n    }\n\n    String country = ipZone.getMainInfo().getCountry();\n    String province = ipZone.getSubInfo().getProvince();\n    String city = ipZone.getSubInfo().getCity();\n    String district = ipZone.getSubInfo().getDistrict();\n\n    return new LocationInfo(country, province, city, district);\n}", "CodeBleu_score": 47.334539201106864}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t    IpToLocationWorker worker = IpToLocationWorker.getInstance();\n    if (worker == null) {\n        return new LocationInfo();\n    }\n    return worker.getLocation(ipAddress);\n}", "CodeBleu_score": 22.11469201541728}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\t    synchronized (this) {\n        if (lowLevelClient == null) {\n            List<HttpHost> hosts = new ArrayList<>();\n            String[] clusterHosts = clusterHost.split(\",\");\n            for (String host : clusterHosts) {\n                String[] hostAndPort = host.split(\":\");\n                String hostName = hostAndPort[0];\n                int port = Integer.parseInt(hostAndPort[1]);\n                hosts.add(new HttpHost(hostName, port, \"http\"));\n            }\n            lowLevelClient = new RestClient.Builder(hosts.toArray(new HttpHost[0])).build();\n            highLevelClient = new RestHighLevelClient(lowLevelClient);\n        }\n    }\n}", "CodeBleu_score": 38.31069582208373}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t    synchronized (this) {\n        if (lowLevelClient == null) {\n            List<HttpHost> hostList = new ArrayList<>();\n            for (String host : clusterHosts.split(\",\")) {\n                String[] hostAndPort = host.split(\":\");\n                hostList.add(new HttpHost(hostAndPort[0], Integer.parseInt(hostAndPort[1]), \"http\"));\n            }\n            lowLevelClient = new RestClient.Builder(hostList.toArray(new HttpHost[0])).build();\n            highLevelClient = new RestHighLevelClient(lowLevelClient);\n        }\n    }\n}", "CodeBleu_score": 40.89659653513414}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t  synchronized (this) {\n    if (lowLevelRestClient == null) {\n      List<HttpHost> esHosts = new ArrayList<>();\n      for (String hostPort : clusterHosts.split(\",\")) {\n        String[] hostPortArr = hostPort.split(\":\");\n        esHosts.add(new HttpHost(hostPortArr[0], Integer.parseInt(hostPortArr[1]), \"http\"));\n      }\n      lowLevelRestClient = RestClient.builder(esHosts.toArray(new HttpHost[0])).build();\n      highLevelRestClient = new RestHighLevelClient(lowLevelRestClient);\n    }\n  }\n}", "CodeBleu_score": 49.76654175026256}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<>();\n    String[] hostList = clusterHostList.split(\",\");\n    for (String host : hostList) {\n        String[] hostAndPort = host.split(\":\");\n        if (hostAndPort.length == 2) {\n            hosts.add(new HttpHost(hostAndPort[0], Integer.parseInt(hostAndPort[1]), \"http\"));\n        } else {\n            hosts.add(new HttpHost(host, clusterPort, \"http\"));\n        }\n    }\n    return hosts;\n}", "CodeBleu_score": 42.686288472845305}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<>();\n    String[] hostList = clusterHostList.split(\",\");\n    for (String host : hostList) {\n        String[] hostAndPort = host.split(\":\");\n        String hostName = hostAndPort[0];\n        int port = (hostAndPort.length > 1) ? Integer.parseInt(hostAndPort[1]) : clusterPort;\n        hosts.add(new HttpHost(hostName, port, \"http\"));\n    }\n    return hosts;\n}", "CodeBleu_score": 40.99207457791451}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<>();\n    String[] hostList = clusterHostList.split(\",\");\n    for (String host : hostList) {\n        String[] hostParts = host.split(\":\");\n        String hostName = hostParts[0];\n        int port = clusterPort;\n        if (hostParts.length == 2) {\n            port = Integer.parseInt(hostParts[1]);\n        }\n        hosts.add(new HttpHost(hostName, port, \"http\"));\n    }\n    return hosts;\n}", "CodeBleu_score": 39.849377711803825}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\t    while (true) {\n        // Poll for a task with a 30-second timeout\n        Task task = queue.poll(30, TimeUnit.SECONDS);\n        if (task != null) {\n            // Check the task type\n            if (task.getType() == TaskType.PLAIN_TEXT_MESSAGE) {\n                // Extract the recipient number and message data from the task\n                String recipient = task.getRecipient();\n                String message = task.getMessage();\n\n                // Validate the message data\n                if (StringUtils.isBlank(recipient) || StringUtils.isBlank(message)) {\n                    // Log an error message if the message data is invalid\n                    logger.error(\"Invalid message data: recipient={}, message={}\", recipient, message);\n                } else {\n                    try {\n                        // Send the message\n                        sendMessage(recipient, message);\n                    } catch (Exception e) {\n                        // Log an error message if an exception occurs\n                        logger.error(\"Failed to send message: recipient={}, message={}\", recipient, message, e);\n                    }\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 28.338191986393273}, {"code": "protected void pollingWork() throws InterruptedException{\n\t    while (true) {\n        Task task = queue.poll(30, TimeUnit.SECONDS);\n        if (task != null) {\n            if (task.getType() == TaskType.PLAIN_TEXT_MESSAGE) {\n                String recipientNumber = task.getRecipientNumber();\n                String messageData = task.getMessageData();\n                try {\n                    validateMessageData(messageData);\n                    sendMessage(recipientNumber, messageData);\n                } catch (IllegalArgumentException e) {\n                    log.error(\"Invalid message data: \" + messageData, e);\n                } catch (Exception e) {\n                    log.error(\"Error sending message to \" + recipientNumber, e);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 29.27942640484585}, {"code": "protected void pollingWork() throws InterruptedException{\n\t    while (true) {\n        String task = taskQueue.poll(30, TimeUnit.SECONDS);\n        if (task != null) {\n            if (task.startsWith(\"plain\")) {\n                String[] parts = task.split(\":\");\n                if (parts.length != 3) {\n                    logger.error(\"Invalid task format: \" + task);\n                    continue;\n                }\n                String recipient = parts[1];\n                String message = parts[2];\n                if (StringUtils.isBlank(recipient) || StringUtils.isBlank(message)) {\n                    logger.error(\"Invalid task format: \" + task);\n                    continue;\n                }\n                try {\n                    sendPlainTextMessage(recipient, message);\n                } catch (Exception e) {\n                    logger.error(\"Error sending message: \" + e.getMessage());\n                }\n            } else {\n                logger.error(\"Unknown task type: \" + task);\n            }\n        }\n    }\n}", "CodeBleu_score": 29.888369385592007}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t    CloseableHttpClient httpClient = HttpClients.createDefault();\n    HttpGet httpGet = new HttpGet(uri);\n    CloseableHttpResponse response = httpClient.execute(httpGet);\n    HttpEntity entity = response.getEntity();\n    String content = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n    logger.info(\"Response content: \" + content);\n    return content;\n}", "CodeBleu_score": 66.72852666744265}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t    CloseableHttpClient httpclient = HttpClients.createDefault();\n    HttpGet httpget = new HttpGet(uri);\n    CloseableHttpResponse response = httpclient.execute(httpget);\n    try {\n        HttpEntity entity = response.getEntity();\n        String content = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        System.out.println(content);\n        return content;\n    } finally {\n        response.close();\n    }\n}", "CodeBleu_score": 63.54027653452723}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t    CloseableHttpClient httpClient = HttpClients.createDefault();\n    HttpGet httpGet = new HttpGet(uri);\n    CloseableHttpResponse response = httpClient.execute(httpGet);\n    HttpEntity entity = response.getEntity();\n    String content = new String(EntityUtils.toByteArray(entity), StandardCharsets.UTF_8);\n    logger.info(\"Response content: {}\", content);\n    return content;\n}", "CodeBleu_score": 59.81897530906792}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t    if (StringUtils.isBlank(messageXmlStr)) {\n        return null;\n    }\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document doc = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n    doc.getDocumentElement().normalize();\n    Node root = doc.getDocumentElement();\n    String[] rootArray = decodeRoot(root, doTrim);\n    if (rootArray == null) {\n        return null;\n    }\n    Map<String, Object> result = new HashMap<>();\n    result.put(rootArray[0], rootArray[1]);\n    return result;\n}", "CodeBleu_score": 65.06919398424186}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t    if (StringUtils.isBlank(messageXmlStr)) {\n        return null;\n    }\n\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document doc = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n\n    Node root = doc.getFirstChild();\n    if (root == null) {\n        return null;\n    }\n\n    String[] rootDecoded = decodeRoot(root, doTrim);\n    if (rootDecoded == null) {\n        return null;\n    }\n\n    Map<String, Object> result = new HashMap<>();\n    result.put(rootDecoded[0], rootDecoded[1]);\n    return result;\n}", "CodeBleu_score": 63.02387455966145}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t    if (StringUtils.isBlank(messageXmlStr)) {\n        return null;\n    }\n\n    DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8));\n    Document document = documentBuilder.parse(byteArrayInputStream);\n    Node rootNode = document.getFirstChild();\n    String[] decodedRoot = decodeRootElement(rootNode, doTrim);\n    if (decodedRoot == null) {\n        return null;\n    }\n\n    Map<String, Object> resultMap = new HashMap<>();\n    resultMap.put(decodedRoot[0], decodedRoot[1]);\n    return resultMap;\n}", "CodeBleu_score": 49.65330915775732}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t    final OrderId orderId = OrderId.ofRepoId(orderRecord.getC_Order_ID());\n    final boolean isAutoProcess = Services.get(ISysConfigBL.class).getBooleanValue(CreateMissingShipmentSchedulesWorkpackageProcessor.SYSCONFIG_AUTO_PROCESS_SHIPMENT_SCHEDULES, false);\n    if (isAutoProcess) {\n        log.debug(\"Auto-processing shipment schedules for order {}\", orderId);\n        Services.get(CompleteShipAndInvoiceEnqueuer.class).enqueue(orderId);\n    } else {\n        log.debug(\"Scheduling missing shipment schedules for order {}\", orderId);\n        Services.get(CreateMissingShipmentSchedulesWorkpackageProcessor.class).schedule(orderId);\n    }\n}", "CodeBleu_score": 49.85139967573763}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t    final OrderId orderId = OrderId.ofRepoId(orderRecord.getC_Order_ID());\n\n    if (isOrderEligibleForAutoProcessing(orderRecord)) {\n        log.info(\"Order {} is eligible for auto-processing. Enqueueing the order for automatic shipping and invoicing.\", orderId);\n        Services.get(CompleteShipAndInvoiceEnqueuer.class).enqueue(orderId);\n    } else {\n        log.info(\"Order {} is not eligible for auto-processing. Scheduling the creation of missing shipment schedules.\", orderId);\n        Services.get(CreateMissingShipmentSchedulesWorkpackageProcessor.class).schedule(orderId);\n    }\n}", "CodeBleu_score": 45.0783525614419}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t    final OrderId orderId = OrderId.ofRepoId(orderRecord.getC_Order_ID());\n    final DeliveryRule deliveryRule = DeliveryRule.ofCode(orderRecord.getDeliveryRule());\n    final boolean isAutoProcess = deliveryRule.isAutoProcess();\n    if (isAutoProcess) {\n        // Enqueue the order for automatic shipping and invoicing using the transaction name\n        final String transactionName = Services.get(ITrxManager.class).getTransactionName();\n        Services.get(CompleteShipAndInvoiceEnqueuer.class).enqueue(orderId, transactionName);\n        log.info(\"Order {} will be shipped and invoiced automatically. Enqueued for CompleteShipAndInvoiceWorkpackageProcessor with transaction name {}\", orderId, transactionName);\n    } else {\n        // Schedule the creation of missing shipment schedules if they are not postponed\n        if (!isPostponed(orderRecord)) {\n            Services.get(CreateMissingShipmentSchedulesWorkpackageProcessor.class).schedule(orderId);\n            log.info(\"Order {} will be shipped automatically. Scheduled for CreateMissingShipmentSchedulesWorkpackageProcessor\", orderId);\n        }\n    }\n}", "CodeBleu_score": 47.20494079699989}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $model = $this->guard->getProvider()->getModel();\n    $user = $model->where('email', $request->input($this->username()))->first();\n    if (!$user || !$this->hasher->check($request->input('password'), $user->password)) {\n        event(new Failed(config('fortify.guard'), null, [\n            $this->username() => $request->input($this->username()),\n            'password' => $request->input('password'),\n        ]));\n        $this->throwFailedAuthenticationException($request);\n    }\n    return $user;\n}", "CodeBleu_score": 46.10322663485241}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $model = Webauthn::model();\n\n    $user = $model->where('email', $request->get(Fortify::username()))->first();\n\n    if (! $user || ! $this->provider->validateCredentials($user, ['password' => $request->get('password')])) {\n        $this->fireFailedEvent($request, $user);\n\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    return $user;\n}", "CodeBleu_score": 59.55634240657033}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = User::where('email', $request->get('email'))->first();\n\n    if (!$user || !$user->validateCredentials($request->get('password'))) {\n        event(new Failed(config('fortify.guard'), null, [\n            'email' => $request->get('email'),\n            'password' => $request->get('password'),\n        ]));\n\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    return $user;\n}", "CodeBleu_score": 47.572713043164256}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    // Increment the request limit for rate limiting\n    LoginRateLimiter::hit($request);\n\n    // Throw a ValidationException with an error message indicating the authentication failure\n    throw ValidationException::withMessages([\n        Fortify::username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 66.81824028093214}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    // Increment the request limit for rate limiting\n    LoginRateLimiter::increment($request);\n\n    // Throw a ValidationException with an error message indicating the authentication failure\n    throw ValidationException::withMessages([\n        Fortify::username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 67.00045511907608}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->fireFailedEvent($request);\n    $this->limiter->increment($request);\n    throw ValidationException::withMessages([\n        $this->username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 69.22090526366952}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t    $userId = session('login.id');\n    $user = User::find($userId);\n\n    if ($user) {\n        $publicKey = Webauthn::prepareAssertion($user);\n\n        return Inertia::render('TwoFactorChallenge', [\n            'two_factor_enabled' => !is_null($user->two_factor_secret),\n            'remember' => $request->remember,\n            'publicKey' => $publicKey,\n        ]);\n    }\n}", "CodeBleu_score": 39.35685851582021}, {"code": "<?\npublic function toResponse($request){\n\t    $userId = session('webauthn.user_id');\n    $user = User::find($userId);\n\n    if ($user) {\n        $publicKey = Webauthn::prepareAssertion($user);\n\n        return Inertia::render('TwoFactorChallenge', [\n            'two_factor_enabled' => true,\n            'remember' => $request->remember,\n            'publicKey' => $publicKey,\n        ]);\n    }\n\n    return redirect()->route('login');\n}", "CodeBleu_score": 39.46340364575625}, {"code": "<?\npublic function toResponse($request){\n\t    $userId = $request->session()->get('login.id');\n    $user = User::findOrFail($userId);\n\n    Webauthn::prepareAssertion($user);\n\n    return Inertia::render('Auth/TwoFactorChallenge', [\n        'two_factor_enabled' => !is_null($user->two_factor_secret),\n        'remember' => $request->session()->get('login.remember'),\n    ]);\n}", "CodeBleu_score": 44.414348433777974}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    $userToken = UserToken::query()\n        ->where('driver', $driver)\n        ->where('socialite_id', $socialite->getId())\n        ->first();\n\n    if ($userToken) {\n        $user = $userToken->user;\n\n        if (!$user) {\n            throw ValidationException::withMessages([\n                'socialite_id' => __('The socialite ID is invalid.'),\n            ]);\n        }\n\n        $this->verifyUserAssociation($user, $socialite);\n    } else {\n        $user = User::query()\n            ->where('email', $socialite->getEmail())\n            ->first();\n\n        if (!$user) {\n            $user = $this->createUser($request, $socialite);\n        }\n\n        $this->associateSocialiteToken($user, $driver, $socialite);\n    }\n\n    return $user;\n}", "CodeBleu_score": 51.9790405048439}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    $userToken = UserToken::firstWhere([\n        'driver' => $driver,\n        'socialite_id' => $socialite->getId(),\n    ]);\n\n    if ($userToken) {\n        $user = $userToken->user;\n\n        if (!$user) {\n            throw ValidationException::withMessages([\n                'email' => [__('auth.failed')],\n            ]);\n        }\n\n        if ($userToken->socialite_email !== $socialite->getEmail()) {\n            throw ValidationException::withMessages([\n                'email' => [__('auth.failed')],\n            ]);\n        }\n    } else {\n        $user = User::firstWhere('email', $socialite->getEmail());\n\n        if (!$user) {\n            $user = $this->createUser($request, $socialite);\n        }\n\n        $userToken = $this->createUserToken($user, $driver, $socialite);\n    }\n\n    return $user;\n}", "CodeBleu_score": 53.288889378684665}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    $userToken = UserToken::where('driver', $driver)\n        ->where('socialite_id', $socialite->getId())\n        ->first();\n\n    if ($userToken) {\n        $user = $userToken->user;\n\n        if (!$user) {\n            throw ValidationException::withMessages([\n                'email' => [trans('auth.failed')],\n            ]);\n        }\n\n        if ($user->email !== $socialite->getEmail()) {\n            throw ValidationException::withMessages([\n                'email' => [trans('auth.failed')],\n            ]);\n        }\n    } else {\n        $user = User::where('email', $socialite->getEmail())->first();\n\n        if (!$user) {\n            $user = App::make(CreateNewUser::class)->create([\n                'name' => $socialite->getName(),\n                'email' => $socialite->getEmail(),\n                'password' => Str::random(16),\n            ]);\n        }\n\n        $userToken = $user->tokens()->create([\n            'driver' => $driver,\n            'socialite_id' => $socialite->getId(),\n        ]);\n    }\n\n    $this->guard()->login($user, $request->boolean('remember'));\n\n    return $user;\n}", "CodeBleu_score": 47.13637611966545}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $user = $request->user();\n    if (!$user) {\n        return false;\n    }\n\n    $credentials = $request->only([\n        'id',\n        'rawId',\n        'response',\n        'type',\n    ]);\n\n    $assertionResponse = WebauthnFacade::validateAssertion($credentials);\n\n    if (!$assertionResponse) {\n        event(new Failed(config('webauthn.guard'), null, [\n            'errors' => [trans('webauthn::errors.invalid_credentials')],\n        ]));\n\n        throw ValidationException::withMessages([\n            'email' => [trans('webauthn::errors.invalid_credentials')],\n        ]);\n    }\n\n    return true;\n}", "CodeBleu_score": 50.87344056490114}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $user = $request->user();\n\n    if (!$user) {\n        return false;\n    }\n\n    $credential = $request->only(['id', 'rawId', 'response', 'type']);\n\n    if (!WebauthnFacade::validateAssertion($credential, $user)) {\n        event(new Failed(config('webauthn.guard'), $user, [\n            'id' => $credential['id'],\n        ]));\n\n        $this->throwFailedAuthenticationException($request);\n\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 64.22911052633775}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    if (!$user = $request->user()) {\n        return false;\n    }\n\n    $credentials = $this->getCredentials($request);\n\n    try {\n        WebauthnFacade::validateAssertion(\n            $credentials['assertion'],\n            $this->getFilteredCredentials($credentials)\n        );\n    } catch (ValidationException $e) {\n        event(new Failed(config('webauthn.guard'), $user, [\n            'errors' => $e->errors(),\n            'credentials' => $credentials,\n        ]));\n\n        throw $e;\n    }\n\n    return true;\n}", "CodeBleu_score": 48.05023272065545}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\t    try {\n        return User::where('email', $this->email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error(\"No user with email '{$this->email}'\");\n\n        return null;\n    }\n}", "CodeBleu_score": 28.831515330786488}, {"code": "<?\nprivate function user(): ?User{\n\t    if (empty($this->email)) {\n        $this->error('No email provided');\n        return null;\n    }\n\n    try {\n        return User::where('email', $this->email)->firstOrFail();\n    } catch (ModelNotFoundException) {\n        $this->error('No user with this email in the application');\n        return null;\n    }\n}", "CodeBleu_score": 46.12472546848979}, {"code": "<?\nprivate function user(): ?User{\n\t    if (is_null($this->email)) {\n        $this->error('No email provided');\n        return null;\n    }\n\n    try {\n        return User::where('email', $this->email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error('No user with this email in the application');\n        return null;\n    }\n}", "CodeBleu_score": 44.49082487681667}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\t    if (config('scout.driver') && config('scout.flush_on_seed')) {\n        $indexSettings = config('scout.meilisearch.settings.indexes');\n        foreach ($indexSettings as $indexName => $indexSetting) {\n            $model = app($indexSetting['model']);\n            $modelClass = get_class($model);\n            $tableName = $model->getTable();\n            $this->call('scout:flush', ['model' => $modelClass]);\n            $this->info(\"Index '{$indexName}' ({$tableName}) flushed.\");\n        }\n    }\n}", "CodeBleu_score": 44.56564731883299}, {"code": "<?\nprotected function scoutFlush(): void{\n\t    if (! config('scout.driver')) {\n        return;\n    }\n\n    if (! config('scout.flush')) {\n        return;\n    }\n\n    foreach (config('scout.indexes') as $index => $settings) {\n        $table = $settings['table'] ?? Str::snake(Str::pluralStudly($index));\n\n        $this->call('scout:flush', [\n            'index-name' => $table,\n        ]);\n    }\n\n    $this->info('Scout indexes flushed successfully.');\n}", "CodeBleu_score": 52.13895150038075}, {"code": "<?\nprotected function scoutFlush(): void{\n\t    if (config('scout.driver') && config('scout.flush')) {\n        foreach (config('scout.indexes') as $index => $settings) {\n            $tableName = Arr::get($settings, 'table');\n\n            if (!$tableName) {\n                continue;\n            }\n\n            $this->call('scout:flush', [\n                'model' => $tableName,\n            ]);\n        }\n\n        $this->info('All indexes have been flushed.');\n    }\n}", "CodeBleu_score": 52.245619754008196}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    $vcard = $this->read($resource);\n\n    if (! $vcard) {\n        $vcard = $this->create($resource);\n    }\n\n    $this->export($resource, $vcard);\n\n    return $vcard;\n}", "CodeBleu_score": 15.104452395663431}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    try {\n        $vcard = Reader::read($resource->get());\n    } catch (ParseException $e) {\n        $vcard = new VCard();\n    }\n\n    if (!$vcard->UID) {\n        $vcard->UID = $resource->getUid();\n    }\n\n    $vcard->VERSION = '4.0';\n    $vcard->PRODID = '-//Sabre//Sabre VObject ' . Version::VERSION . '//EN';\n\n    $this->exportVCard($vcard, $resource);\n\n    return $vcard;\n}", "CodeBleu_score": 32.5287569116354}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    $vcard = $this->read($resource);\n    if (!$vcard) {\n        $vcard = $this->create($resource);\n    }\n\n    foreach ($this->exporters as $exporter) {\n        $exporter->export($resource, $vcard);\n    }\n\n    return $vcard;\n}", "CodeBleu_score": 22.32991397897469}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $object = $this->getObjectByUri($cardUri);\n\n    if ($object instanceof Contact) {\n        DestroyContact::dispatch($object, true)->onQueue('high');\n    } elseif ($object instanceof Group) {\n        DestroyGroup::dispatch($object, true)->onQueue('high');\n    } else {\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 27.9876157232145}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $object = $this->getObjectByUri($addressBookId, $cardUri);\n    if ($object instanceof Contact) {\n        DestroyContact::dispatch($object, true);\n    } elseif ($object instanceof Group) {\n        DestroyGroup::dispatch($object, true);\n    } else {\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 31.957696964660197}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $object = VCardResource::find($cardUri);\n\n    if ($object instanceof Contact) {\n        Bus::dispatch((new DestroyContact())->onQueue('high')->execute($object));\n    } elseif ($object instanceof Group) {\n        Bus::dispatch((new DestroyGroup())->onQueue('high')->execute($object));\n    } else {\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 27.301517375429263}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\t    if (! isset($data['file'])) {\n        return;\n    }\n\n    $leadActivity = $this->leadActivityRepository->create([\n        'type'        => 'file',\n        'comment'     => $data['comment'],\n        'is_done'     => 1,\n        'lead_id'     => $data['lead_id'],\n        'user_id'     => auth()->user()->id,\n        'customer_id' => $data['customer_id'],\n    ]);\n\n    $file = $data['file'];\n\n    $path = $file->store('activities/' . $leadActivity->id);\n\n    return $this->create([\n        'file'           => $file->getClientOriginalName(),\n        'path'           => $path,\n        'activity_id'    => $leadActivity->id,\n        'activity_type'  => get_class($leadActivity),\n    ]);\n}", "CodeBleu_score": 60.31563410449683}, {"code": "<?\npublic function upload(array $data){\n\t    if (! isset($data['file'])) {\n        return;\n    }\n\n    $leadActivity = $this->leadActivityRepository->create([\n        'type' => $data['type'],\n        'comment' => $data['comment'],\n        'is_done' => 1,\n        'lead_id' => $data['lead_id'],\n        'user_id' => auth()->user()->id,\n    ]);\n\n    $file = $data['file'];\n\n    $fileName = md5(uniqid(rand(), true));\n    $fileNameWithExtension = strtolower($fileName) . '.' . $file->getClientOriginalExtension();\n    $filePath = 'lead/' . $fileNameWithExtension;\n\n    Storage::put($filePath, file_get_contents($file), 'public');\n\n    return $this->create([\n        'name' => $fileNameWithExtension,\n        'path' => $filePath,\n        'activity_id' => $leadActivity->id,\n    ]);\n}", "CodeBleu_score": 57.879800515225696}, {"code": "<?\npublic function upload(array $data){\n\t    if (! isset($data['file'])) {\n        return;\n    }\n\n    $leadActivity = $this->leadActivityRepository->create([\n        'type' => $data['type'],\n        'comment' => $data['comment'],\n        'is_done' => 1,\n        'lead_id' => $data['lead_id'],\n        'user_id' => auth()->user()->id,\n    ]);\n\n    return $this->create([\n        'name' => $data['file']->getClientOriginalName(),\n        'path' => $data['file']->store($this->leadActivity->id . '/' . 'files'),\n        'activity_id' => $leadActivity->id,\n    ]);\n}", "CodeBleu_score": 61.77937886815468}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    $request = Container::getInstance()->make('request');\n    $isAdminRoute = strpos($request->route()->getPrefix(), 'admin') !== false;\n    $isFrontRoute = strpos($request->route()->getPrefix(), 'front') !== false;\n\n    if ($isFrontRoute) {\n        return redirect()->route('admin.login');\n    }\n\n    if ($exception instanceof HttpException) {\n        $statusCode = $exception->getStatusCode();\n        if ($statusCode == 404) {\n            return response()->view('errors.404', [], $statusCode);\n        } else {\n            return response()->view('errors.500', [], $statusCode);\n        }\n    }\n\n    if ($exception instanceof ModelNotFoundException) {\n        return response()->view('errors.404', [], 404);\n    }\n\n    if ($exception instanceof PDOException) {\n        return response()->view('errors.500', [], 500);\n    }\n\n    if ($exception instanceof ParseError) {\n        return response()->view('errors.500', [], 500);\n    }\n\n    return parent::render($request, $exception);\n}", "CodeBleu_score": 53.830898681326154}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    if ($exception instanceof ModelNotFoundException) {\n        $message = 'Record not found';\n        return response()->json(['error' => $message], 404);\n    }\n    if ($exception instanceof PDOException) {\n        $message = 'Database error';\n        return response()->json(['error' => $message], 500);\n    }\n    if ($exception instanceof ParseError) {\n        $message = 'Syntax error';\n        return response()->json(['error' => $message], 500);\n    }\n\n    if ($exception instanceof AuthenticationException) {\n        if ($this->isAdminRoute($this->request)) {\n            return redirect()->route('admin.session.create');\n        }\n    }\n\n    if ($exception instanceof HttpException) {\n        $statusCode = $exception->getStatusCode();\n        if ($statusCode == 404) {\n            return response()->view('errors.404', [], $statusCode);\n        }\n        return response()->view('errors.500', [], 500);\n    }\n\n    return parent::render($request, $exception);\n}", "CodeBleu_score": 43.43388736605612}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    if ($exception instanceof ModelNotFoundException) {\n        return response()->view('errors.404', [], 404);\n    }\n\n    if ($exception instanceof PDOException) {\n        return response()->view('errors.500', [], 500);\n    }\n\n    if ($exception instanceof ParseError) {\n        return response()->view('errors.500', [], 500);\n    }\n\n    if ($exception instanceof AuthenticationException) {\n        if (request()->is('admin/*')) {\n            return redirect()->route('admin.login');\n        } else {\n            return redirect()->route('login');\n        }\n    }\n\n    if ($exception instanceof HttpException) {\n        $statusCode = $exception->getStatusCode();\n        if ($statusCode == 404) {\n            return response()->view('errors.404', [], 404);\n        }\n        return response()->view('errors.500', [], 500);\n    }\n\n    return parent::render($request, $exception);\n}", "CodeBleu_score": 42.6941051663334}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json(['error' => \"$statusCode\"], $statusCode);\n    }\n    return response()->view(\"errors.$statusCode\", ['path' => $path], $statusCode);\n}", "CodeBleu_score": 51.45352322202692}, {"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json(['error' => 'Error message'], $statusCode);\n    }\n\n    return response()->view($path, [], $statusCode);\n}", "CodeBleu_score": 42.67152171379098}, {"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json([\n            'message' => 'Error: ' . $statusCode,\n        ], $statusCode);\n    }\n\n    return response()->view('errors.' . $statusCode, [\n        'path' => $path,\n    ], $statusCode);\n}", "CodeBleu_score": 57.10430578891943}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t    $successCount = 0;\n    $activityIds = explode(',', request('indexes'));\n\n    foreach ($activityIds as $activityId) {\n        Event::dispatch('activity.update.before', $activityId);\n\n        $activity = $this->activityRepository->update([\n            'is_done' => request('update-data')\n        ], $activityId);\n\n        if ($activity) {\n            Event::dispatch('activity.update.after', $activity);\n\n            $successCount++;\n        }\n    }\n\n    if (! $successCount) {\n        return response()->json(['message' => trans('admin::app.activity.mass-update-failed')], 400);\n    }\n\n    return response()->json([\n        'message' => trans('admin::app.activity.total-activities-done', ['count' => $successCount])\n    ]);\n}", "CodeBleu_score": 68.1640495414575}, {"code": "<?\npublic function massUpdate(){\n\t    $activities = $this->activityRepository->getAll(request('ids'));\n\n    if (count($activities)) {\n        $count = 0;\n        foreach ($activities as $activity) {\n            Event::dispatch('activity.update.before', $activity);\n\n            $activity->is_done = request('is_done');\n            $activity->save();\n\n            Event::dispatch('activity.update.after', $activity);\n\n            $count++;\n        }\n\n        if (!$count) {\n            return response()->json(['message' => trans('admin::app.activities.mass-update-failed')], 400);\n        }\n\n        return response()->json(['message' => trans('admin::app.activities.mass-update-success')]);\n    } else {\n        return response()->json(['message' => trans('admin::app.activities.mass-update-no-activities')], 400);\n    }\n}", "CodeBleu_score": 55.125926619020916}, {"code": "<?\npublic function massUpdate(){\n\t    $activities = $this->activityRepository->getAll()->whereIn('id', request('ids'))->get();\n\n    $count = 0;\n\n    foreach ($activities as $activity) {\n        Event::dispatch('activity.update.before', $activity);\n\n        $activity->update([\n            'is_done' => request('value'),\n        ]);\n\n        Event::dispatch('activity.update.after', $activity);\n\n        $count++;\n    }\n\n    if (! $count) {\n        return response()->json([\n            'message' => __('admin::app.activities.mass-update-failed'),\n        ], 400);\n    }\n\n    return response()->json([\n        'message' => __('admin::app.activities.mass-update-success'),\n    ]);\n}", "CodeBleu_score": 69.73063551030836}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t    $suppressFlash = false;\n\n    $indexes = request()->input('indexes');\n\n    foreach ($indexes as $activityId) {\n        Event::dispatch('activity.delete.before', $activityId);\n\n        $this->activityRepository->delete($activityId);\n\n        Event::dispatch('activity.delete.after', $activityId);\n    }\n\n    session()->flash('success', trans('admin::app.response.destroy-success', ['name' => 'Activity']));\n\n    return response()->json([\n        'redirectUrl' => route('admin.activities.index')\n    ]);\n}", "CodeBleu_score": 49.41321734378303}, {"code": "<?\n public function massDestroy(){\n\t    $suppressFlash = false;\n\n    if (request()->is('activities/mass-delete')) {\n        $indexes = explode(',', request()->input('indexes'));\n        foreach ($indexes as $key => $value) {\n            $activity = $this->activityRepository->find($value);\n\n            try {\n                Event::dispatch('activity.delete.before', $value);\n\n                $this->activityRepository->delete($value);\n\n                Event::dispatch('activity.delete.after', $activity);\n            } catch (\\Exception $e) {\n                report($e);\n\n                return response()->json([\n                    'message' => trans('admin::app.response.destroy-failed', ['name' => 'Activity']),\n                ], 400);\n            }\n        }\n\n        if (count($indexes)) {\n            return response()->json([\n                'message' => trans('admin::app.datagrid.mass-ops.delete-success', [\n                    'resource' => 'Activities',\n                ]),\n            ]);\n        } else {\n            session()->flash('warning', trans('admin::app.datagrid.mass-ops.no-resource'));\n\n            return redirect()->route('admin.customers.activities.index');\n        }\n    } else {\n        $activities = request()->input('rows', []);\n\n        foreach ($activities as $activityId) {\n            $activity = $this->activityRepository->find($activityId);\n\n            if (isset($activity)) {\n                try {\n                    Event::dispatch('activity.delete.before', $activityId);\n\n                    $this->activityRepository->delete($activityId);\n\n                    Event::dispatch('activity.delete.after', $activity);\n                } catch (\\Exception $exception) {\n                    if ($suppressFlash) {\n                        $suppressFlash = false;\n                    } else {\n                        session()->flash('error', trans($exception->getMessage()));\n                    }\n\n                    return redirect()->back();\n                }\n            }\n        }\n\n        if (! $suppressFlash) {\n            session()->", "CodeBleu_score": 32.27435132698491}, {"code": "<?\n public function massDestroy(){\n\t    foreach (request('rows') as $activityId) {\n        Event::dispatch('activity.delete.before', $activityId);\n\n        $this->activityRepository->delete($activityId);\n\n        Event::dispatch('activity.delete.after', $activityId);\n    }\n\n    return response()->json([\n        'message' => __('admin::app.response.destroy-success', ['name' => 'Activity']),\n    ]);\n}", "CodeBleu_score": 58.29292371923023}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t    $cards = DashboardHelper::getCards();\n\n    $requestData = request()->all();\n\n    foreach ($cards as $key => $card) {\n        if (isset($requestData[$card['key']])) {\n            $cards[$key]['selected'] = true;\n        } else {\n            $cards[$key]['selected'] = false;\n        }\n    }\n\n    return response()->json([\n        'cards' => $cards\n    ]);\n}", "CodeBleu_score": 39.55974071683859}, {"code": "<?\n public function updateCards(){\n\t    $cards = DashboardHelper::getCards();\n\n    foreach ($cards as $key => $card) {\n        $cards[$key]['selected'] = request($card['key']);\n    }\n\n    return response()->json([\n        'cards' => $cards,\n    ]);\n}", "CodeBleu_score": 30.753151070960122}, {"code": "<?\n public function updateCards(){\n\t    $cards = DashboardHelper::getCards();\n\n    foreach ($cards as $key => $card) {\n        if (request()->has($card['name'])) {\n            $cards[$key]['selected'] = true;\n        } else {\n            $cards[$key]['selected'] = false;\n        }\n    }\n\n    return response()->json([\n        'cards' => $cards\n    ]);\n}", "CodeBleu_score": 33.4262405331797}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t    Event::dispatch('core.configuration.create.before');\n\n    $this->configurationRepository->create(request()->all());\n\n    Event::dispatch('core.configuration.create.after');\n\n    session()->flash('success', trans('admin::app.configuration.create-success'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 50.702925193819226}, {"code": "<?\npublic function store(){\n\t    $this->validate(request(), [\n        'code' => ['required', 'unique:core_config,code', new Code],\n        'value' => 'required',\n        'channel' => 'required|exists:channels,code',\n        'locale' => 'required|exists:locales,code',\n    ]);\n\n    Event::dispatch('core.configuration.create.before');\n\n    $configuration = $this->configurationRepository->create(array_merge(request()->all(), [\n        'created_at' => date('Y-m-d H:i:s'),\n        'updated_at' => date('Y-m-d H:i:s'),\n    ]));\n\n    Event::dispatch('core.configuration.create.after', $configuration);\n\n    session()->flash('success', trans('admin::app.configuration.create-success'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 34.30591782011959}, {"code": "<?\npublic function store(){\n\t    Event::dispatch('core.configuration.create.before');\n\n    $this->configurationRepository->create(request()->all());\n\n    Event::dispatch('core.configuration.create.after');\n\n    session()->flash('success', trans('admin::app.configuration.create-success'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 50.702925193819226}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t    $path = request()->get('path');\n\n    if ($path) {\n        $fileName = 'configuration/'. $path;\n\n        $config = $this->configurationRepository->findOneByField('value', $fileName);\n\n        return isset($config['value']) ? Storage::download($config['value']) : '';\n    }\n}", "CodeBleu_score": 66.45323404820476}, {"code": "<?\npublic function download(){\n\t    $path = request()->input('path');\n    $name = request()->input('name');\n    $fileName = $name ? $name . '.' . pathinfo($path, PATHINFO_EXTENSION) : pathinfo($path, PATHINFO_BASENAME);\n    $config = $this->configurationRepository->findOneByField('value', $path);\n    return Storage::download($path, $fileName, [\n        'Content-Type' => $config ? $config->content_type : 'image/' . pathinfo($path, PATHINFO_EXTENSION),\n    ]);\n}", "CodeBleu_score": 43.000566767410675}, {"code": "<?\npublic function download(){\n\t    $path = request()->input('path');\n\n    $fileName = 'configuration/'. $path;\n\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n\n    return isset($config['value']) ? Storage::download($config['value']) : '';\n}", "CodeBleu_score": 68.53187429052076}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    List<AdminModelSort> sortList = new ArrayList<>();\n    for (int i = 0; i < list.size(); i++) {\n        AdminModelSort sort = new AdminModelSort();\n        sort.setUserId(UserUtil.getUserId());\n        sort.setModelId(list.get(i));\n        sort.setSort(i);\n        sortList.add(sort);\n    }\n    adminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, UserUtil.getUserId()));\n    adminModelSortService.saveBatch(sortList);\n    return Result.ok();\n}", "CodeBleu_score": 62.53901905595064}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    List<AdminModelSort> modelSorts = new ArrayList<>();\n    list.forEach(model -> {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setUserId(UserUtil.getUserId());\n        adminModelSort.setModel(model);\n        adminModelSort.setSort(list.indexOf(model));\n        modelSorts.add(adminModelSort);\n    });\n    modelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, UserUtil.getUserId()));\n    modelSortService.saveBatch(modelSorts);\n    return Result.ok();\n}", "CodeBleu_score": 45.136462950619105}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    List<AdminModelSort> sortList = new ArrayList<>();\n    for (int i = 0; i < list.size(); i++) {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setUserId(UserUtil.getUserId());\n        adminModelSort.setModelId(list.get(i));\n        adminModelSort.setSort(i);\n        adminModelSort.setType(AdminConst.MODEL_TYPE_HEADER);\n        sortList.add(adminModelSort);\n    }\n    iAdminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, UserUtil.getUserId()).eq(AdminModelSort::getType, AdminConst.MODEL_TYPE_HEADER));\n    iAdminModelSortService.saveBatch(sortList);\n    return Result.ok();\n}", "CodeBleu_score": 70.43719384408264}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getId());\n    if (AdminModuleEnum.CRM.equals(adminConfig.getModule())) {\n        return Result.error(\"CRM\u6a21\u5757\u65e0\u6cd5\u5173\u95ed\");\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.updateById(adminConfig);\n    return Result.ok();\n}", "CodeBleu_score": 63.17302703994139}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n    if (adminConfig == null) {\n        return Result.error(AdminCodeEnum.ADMIN_CONFIG_NOT_EXIST);\n    }\n    if (adminConfig.getModule() == AdminModuleEnum.CRM.getModule()) {\n        return Result.error(AdminCodeEnum.ADMIN_CONFIG_NOT_ALLOW_UPDATE);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.updateById(adminConfig);\n    return Result.ok();\n}", "CodeBleu_score": 66.44176093289732}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getId());\n    if (adminConfig == null) {\n        return Result.error(AdminCodeEnum.ADMIN_CONFIG_NOT_EXIST);\n    }\n    if (AdminModuleEnum.CRM.equals(adminConfig.getModule())) {\n        return Result.error(AdminCodeEnum.ADMIN_CONFIG_CANNOT_UPDATE);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.updateById(adminConfig);\n    return Result.ok();\n}", "CodeBleu_score": 63.55590135979874}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t    // \u83b7\u53d6\u7528\u6237\u914d\u7f6e\n    AdminUserConfig userConfig = adminUserConfigService.getOne(new LambdaQueryWrapper<AdminUserConfig>().eq(AdminUserConfig::getCustomKey, customKey).eq(AdminUserConfig::getUserId, UserUtil.getUserId()));\n    if (userConfig == null) {\n        // \u5982\u679c\u7528\u6237\u914d\u7f6e\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7528\u6237\u914d\u7f6e\n        userConfig = new AdminUserConfig();\n        userConfig.setCustomKey(customKey);\n        userConfig.setUserId(UserUtil.getUserId());\n    }\n    // \u66f4\u65b0\u7528\u6237\u914d\u7f6e\u7684\u503c\n    userConfig.setValue(json.toJSONString());\n    // \u4fdd\u5b58\u7528\u6237\u914d\u7f6e\n    adminUserConfigService.saveOrUpdate(userConfig);\n    // \u8fd4\u56de\u6210\u529f\u7684\u7ed3\u679c\n    return Result.ok();\n}", "CodeBleu_score": 55.85357313263645}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t    AdminUserConfig userConfig = adminUserConfigService.queryByCustomKey(customKey);\n    if (userConfig != null) {\n        userConfig.setValue(json.toJSONString());\n        adminUserConfigService.updateById(userConfig);\n    } else {\n        userConfig = new AdminUserConfig();\n        userConfig.setCustomKey(customKey);\n        userConfig.setValue(json.toJSONString());\n        userConfig.setUserId(UserUtil.getUserId());\n        adminUserConfigService.save(userConfig);\n    }\n    return Result.ok();\n}", "CodeBleu_score": 78.7957096771813}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t     AdminUserConfig userConfig = adminUserConfigService.getOne(new LambdaQueryWrapper<AdminUserConfig>().eq(AdminUserConfig::getCustomKey, customKey));\n     if (userConfig == null) {\n         userConfig = new AdminUserConfig();\n         userConfig.setCustomKey(customKey);\n     }\n     userConfig.setCustomValue(json.toString());\n     adminUserConfigService.saveOrUpdate(userConfig);\n     return Result.ok();\n }", "CodeBleu_score": 52.35172551063286}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser user = adminUserService.getById(userId);\n    if (user == null) {\n        return Result.ok();\n    }\n    String deptName = adminDeptService.getById(user.getDeptId()).getDeptName();\n    user.setDeptName(deptName);\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.ok(user);\n}", "CodeBleu_score": 56.48603880995754}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser user = userService.getById(userId);\n    if (user == null) {\n        return Result.error(AdminCodeEnum.USER_NOT_EXIST);\n    }\n    user.setDeptName(deptService.getById(user.getDeptId()).getName());\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.ok(user);\n}", "CodeBleu_score": 43.009100412113646}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser user = adminUserService.getById(userId);\n    if (user == null) {\n        return Result.ok();\n    }\n    user.setDeptName(deptService.getById(user.getDeptId()).getName());\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.ok(user);\n}", "CodeBleu_score": 44.504316045777095}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t        Integer userId = UserUtil.getUserId();\n        AdminUserConfig adminUserConfig = adminUserConfigService.getOne(new LambdaQueryWrapper<AdminUserConfig>().eq(AdminUserConfig::getUserId, userId).eq(AdminUserConfig::getName, \"readNotice\"));\n        if (adminUserConfig != null) {\n            adminUserConfig.setValue(\"1\");\n            adminUserConfigService.updateById(adminUserConfig);\n        } else {\n            adminUserConfig = new AdminUserConfig();\n            adminUserConfig.setUserId(userId);\n            adminUserConfig.setName(\"readNotice\");\n            adminUserConfig.setValue(\"1\");\n            adminUserConfigService.save(adminUserConfig);\n        }\n        return Result.ok();\n    }", "CodeBleu_score": 51.706747017835575}, {"code": " public Result readNotice() {\n\t    Integer userId = UserUtil.getUserId();\n    AdminUserConfig adminUserConfig = adminUserConfigService.getOne(new LambdaQueryWrapper<AdminUserConfig>().eq(AdminUserConfig::getUserId, userId).eq(AdminUserConfig::getConfigName, \"readNotice\"));\n    if (adminUserConfig != null) {\n        adminUserConfig.setConfigValue(\"1\");\n        adminUserConfigService.updateById(adminUserConfig);\n    } else {\n        adminUserConfig = new AdminUserConfig();\n        adminUserConfig.setUserId(userId);\n        adminUserConfig.setConfigName(\"readNotice\");\n        adminUserConfig.setConfigValue(\"1\");\n        adminUserConfigService.save(adminUserConfig);\n    }\n    return Result.ok();\n}", "CodeBleu_score": 50.74254013673383}, {"code": " public Result readNotice() {\n\t        Integer userId = UserUtil.getUserId();\n        List<AdminUserConfig> adminUserConfigList = adminUserConfigService.lambdaQuery().eq(AdminUserConfig::getUserId, userId).eq(AdminUserConfig::getConfigType, \"readNotice\").list();\n        if (adminUserConfigList.size() > 1) {\n            adminUserConfigList.forEach(adminUserConfig -> {\n                adminUserConfig.setValue(\"1\");\n                adminUserConfigService.updateById(adminUserConfig);\n            });\n        } else {\n            AdminUserConfig adminUserConfig = new AdminUserConfig();\n            adminUserConfig.setUserId(userId);\n            adminUserConfig.setConfigType(\"readNotice\");\n            adminUserConfig.setValue(\"1\");\n            adminUserConfigService.save(adminUserConfig);\n        }\n        return Result.ok();\n    }", "CodeBleu_score": 54.75348015536024}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    // Get the current user ID\n    Integer userId = UserUtil.getUserId();\n    // Find an existing configuration with the name \"companyInfo\"\n    AdminConfig adminConfig = adminConfigService.queryByName(AdminCodeEnum.ADMIN_CONFIG_NAME_COMPANY_INFO.getValue());\n    // If the configuration doesn't exist, create a new one with default values\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(AdminCodeEnum.ADMIN_CONFIG_NAME_COMPANY_INFO.getValue());\n        adminConfig.setValue(JSON.toJSONString(AdminCompanyBO.builder().build()));\n    }\n    // Update the configuration's value with the provided company information\n    adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n    // Save or update the configuration\n    adminConfigService.saveOrUpdate(adminConfig);\n}", "CodeBleu_score": 50.81059946295938}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    AdminConfig adminConfig = adminConfigMapper.selectOne(new QueryWrapper<AdminConfig>().eq(\"name\", \"companyInfo\"));\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(\"companyInfo\");\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        adminConfigMapper.insert(adminConfig);\n    } else {\n        adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n        adminConfigMapper.updateById(adminConfig);\n    }\n}", "CodeBleu_score": 56.33121941753959}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    AdminConfig adminConfig = adminConfigMapper.selectOne(new QueryWrapper<AdminConfig>().eq(\"name\", \"companyInfo\"));\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(\"companyInfo\");\n        adminConfig.setValue(JSON.toJSONString(new AdminCompanyBO()));\n    }\n    adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n    if (adminConfig.getId() == null) {\n        adminConfigMapper.insert(adminConfig);\n    } else {\n        adminConfigMapper.updateById(adminConfig);\n    }\n}", "CodeBleu_score": 58.16303921549712}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\t    String configValue = adminConfigService.queryByKey(AdminConfig.ADMIN_CONFIG_KEY);\n    if (StrUtil.isNotEmpty(configValue)) {\n        return JSON.parseObject(configValue, AdminCompanyBO.class);\n    }\n    return new AdminCompanyBO();\n}", "CodeBleu_score": 21.18951134031083}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t    String configValue = adminConfigService.queryByKey(AdminConst.ADMIN_CONFIG_KEY);\n    if (StrUtil.isNotEmpty(configValue)) {\n        return JSON.parseObject(configValue, AdminCompanyBO.class);\n    }\n    return new AdminCompanyBO();\n}", "CodeBleu_score": 20.936335933567545}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t    String configValue = adminConfigService.getValueByKey(AdminCacheKey.ADMIN_CONFIG);\n    if (StrUtil.isEmpty(configValue)) {\n        return new AdminCompanyBO();\n    }\n    return JSON.parseObject(configValue, AdminCompanyBO.class);\n}", "CodeBleu_score": 20.364811956025296}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t        List<AdminConfig> configList = new ArrayList<>();\n        for (String string : stringList) {\n            AdminConfig config = new AdminConfig();\n            config.setValue(string);\n            config.setName(AdminConst.LOG_WELCOME_SPEECH);\n            configList.add(config);\n        }\n        this.remove(new QueryWrapper<AdminConfig>().eq(\"name\", AdminConst.LOG_WELCOME_SPEECH));\n        this.saveBatch(configList);\n    }", "CodeBleu_score": 53.69876401041144}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t        List<AdminConfig> configList = new ArrayList<>();\n        for (String string : stringList) {\n            AdminConfig adminConfig = new AdminConfig();\n            adminConfig.setConfigName(AdminConst.LOG_WELCOME_SPEECH);\n            adminConfig.setConfigValue(string);\n            adminConfig.setConfigType(AdminConst.LOG_WELCOME_SPEECH);\n            configList.add(adminConfig);\n        }\n        removeByMap(new QueryWrapper<AdminConfig>().eq(\"config_name\", AdminConst.LOG_WELCOME_SPEECH));\n        saveBatch(configList);\n    }", "CodeBleu_score": 50.23987470716935}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t        List<AdminConfig> configList = new ArrayList<>();\n        for (String s : stringList) {\n            AdminConfig adminConfig = new AdminConfig();\n            adminConfig.setValue(s);\n            adminConfig.setName(AdminConst.LOG_WELCOME_SPEECH);\n            adminConfig.setType(AdminConst.LOG_WELCOME_SPEECH);\n            configList.add(adminConfig);\n        }\n        remove(new QueryWrapper<AdminConfig>().eq(\"name\", AdminConst.LOG_WELCOME_SPEECH));\n        saveBatch(configList);\n    }", "CodeBleu_score": 51.16002328655629}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    Integer userId = UserUtil.getUserId();\n    AdminUser user = adminUserService.getById(userId);\n    if (user == null) {\n        throw new CrmException(SystemCodeEnum.USER_NOT_EXIST);\n    }\n    String username = user.getUsername();\n    String salt = user.getSalt();\n    String password = user.getPassword();\n    if (!AuthPasswordUtil.verifyPassword(adminInitDataBO.getPassword(), username, password, salt)) {\n        throw new CrmException(AdminCodeEnum.PASSWORD_ERROR);\n    }\n    String code = RandomUtil.randomString(16);\n    BaseUtil.redis().setex(AdminCacheKey.ADMIN_USER_CODE + userId, 60 * 10, code);\n    return code;\n}", "CodeBleu_score": 47.780772843220944}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    // \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\n    AdminUser adminUser = UserUtil.getUser();\n    // \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237ID\n    Long userId = adminUser.getUserId();\n    // \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u8be6\u60c5\n    AdminUserVO adminUserVO = adminUserService.getAdminUserById(userId);\n    // \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u540d\n    String username = adminUserVO.getUsername();\n    // \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u5bc6\u7801\n    String password = adminUserVO.getPassword();\n    // \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u76d0\n    String salt = adminUserVO.getSalt();\n    // \u9a8c\u8bc1\u5bc6\u7801\n    if (!AuthPasswordUtil.verifyPassword(adminInitDataBO.getPassword(), username, salt, password)) {\n        // \u5bc6\u7801\u9519\u8bef\n        throw new CrmException(AdminCodeEnum.PASSWORD_ERROR);\n    }\n    // \u751f\u6210\u4e34\u65f6\u8bbf\u95ee\u7801\n    String code = RandomUtil.randomString(12);\n    // \u5b58\u50a8\u4e34\u65f6\u8bbf\u95ee\u7801\n    redisService.set(AdminCacheKey.ADMIN_TEMP_CODE + code, userId, 600);\n    // \u8fd4\u56de\u4e34\u65f6\u8bbf\u95ee\u7801\n    return code;\n}", "CodeBleu_score": 38.9514990686168}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    String userId = UserUtil.getUserId();\n    AdminUser adminUser = adminUserService.getById(userId);\n    String username = adminUser.getUsername();\n    String password = adminInitDataBO.getPassword();\n    String salt = adminUser.getSalt();\n    if (AuthPasswordUtil.verifyPassword(username, password, salt)) {\n        String code = RandomUtil.randomString(10);\n        redisTemplate.opsForValue().set(AdminCacheKey.ADMIN_TEMP_CODE + userId, code, 60 * 10);\n        return code;\n    } else {\n        throw new CrmException(SystemCodeEnum.INVALID_PASSWORD);\n    }\n}", "CodeBleu_score": 44.85840722025511}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\t    Integer userId = UserUtil.getUserId();\n    String key = AdminCacheKey.INIT_AUTH_KEY + userId;\n    List<String> unauthorizedMenu = redisTemplate.opsForList().range(key, 0, -1);\n    if (unauthorizedMenu == null) {\n        unauthorizedMenu = new ArrayList<>();\n    }\n    return unauthorizedMenu.contains(AdminConst.INIT_AUTH_URL);\n}", "CodeBleu_score": 45.838773948554994}, {"code": "private boolean verifyInitAuth(){\n\t    Integer userId = UserUtil.getUserId();\n    String key = AdminCacheKey.INIT_AUTH_URL_KEY + userId;\n    List<String> unauthorizedUrls = redisTemplate.opsForList().range(key, 0, -1);\n    if (CollUtil.isNotEmpty(unauthorizedUrls)) {\n        String initAuthUrl = \"/admin/initAuth\";\n        return unauthorizedUrls.stream().anyMatch(url -> url.equals(initAuthUrl));\n    }\n    return false;\n}", "CodeBleu_score": 46.60863648680879}, {"code": "private boolean verifyInitAuth(){\n\t    // Get the user ID\n    Long userId = UserUtil.getUserId();\n    // Construct a key for Redis\n    String key = AdminCacheKey.INIT_AUTH + userId;\n    // Get the list of unauthorized menu URLs from Redis\n    List<String> unauthorizedUrls = redis.lGet(key);\n    // Check if the initial authentication URL is in the list\n    return unauthorizedUrls.contains(AdminConst.INIT_AUTH_URL);\n}", "CodeBleu_score": 39.60189574989448}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    List<AdminRoleMenu> menuList = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu menu = new AdminRoleMenu();\n        menu.setRoleId(roleId);\n        menu.setMenuId(menuId);\n        menuList.add(menu);\n    }\n    saveBatch(menuList);\n}", "CodeBleu_score": 55.26173324497452}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    List<AdminRoleMenu> roleMenuList = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    }\n    saveBatch(roleMenuList);\n}", "CodeBleu_score": 57.29664465964214}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    if (menuIdList == null || menuIdList.size() == 0) {\n        return;\n    }\n    List<AdminRoleMenu> roleMenuList = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    }\n    saveBatch(roleMenuList);\n}", "CodeBleu_score": 56.85644063562273}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\t    String index = getLogIndex();\n    Map<String, Object> map = BeanUtil.beanToMap(sysLog);\n    map.put(\"createTime\", DateUtil.formatDateTime(sysLog.getCreateTime()));\n    map.remove(\"id\");\n    IndexRequest indexRequest = new IndexRequest(index);\n    indexRequest.source(map, XContentType.JSON);\n    try {\n        IndexResponse response = client.index(indexRequest, RequestOptions.DEFAULT);\n        log.info(\"save sys log response:{}\", response.toString());\n    } catch (IOException e) {\n        log.error(\"save sys log error:{}\", e.getMessage(), e);\n    }\n}", "CodeBleu_score": 56.83644479262028}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t    try {\n        String indexName = getLogIndex();\n        Map<String, Object> map = BeanUtil.beanToMap(sysLog);\n        map.put(\"createTime\", DateUtil.format(sysLog.getCreateTime(), \"yyyy-MM-dd HH:mm:ss\"));\n        map.remove(\"id\");\n        IndexRequest indexRequest = new IndexRequest(indexName).source(map, XContentType.JSON);\n        IndexResponse indexResponse = restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n    } catch (IOException e) {\n        log.error(\"saveSysLog error:{}\", e.getMessage());\n    }\n}", "CodeBleu_score": 56.36746725623196}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t    String indexName = getIndexName();\n    Map<String, Object> map = BeanUtil.beanToMap(sysLog);\n    map.put(\"createTime\", DateUtil.format(sysLog.getCreateTime(), \"yyyy-MM-dd HH:mm:ss\"));\n    map.remove(\"id\");\n    IndexRequest indexRequest = new IndexRequest(indexName);\n    indexRequest.source(map, XContentType.JSON);\n    try {\n        IndexResponse response = restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n    } catch (IOException e) {\n        log.error(\"save sys log error,msg:{}\", e.getMessage());\n    }\n}", "CodeBleu_score": 53.9361680807796}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t    SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n    searchSourceBuilder.query(QueryBuilders.boolQuery()\n            .must(QueryBuilders.matchQuery(\"type\", querySysLogBO.getType()))\n            .must(QueryBuilders.matchQuery(\"userId\", querySysLogBO.getUserId()))\n            .must(QueryBuilders.matchQuery(\"realname\", querySysLogBO.getRealname()))\n            .must(QueryBuilders.matchQuery(\"ip\", querySysLogBO.getIp()))\n            .must(QueryBuilders.matchQuery(\"action\", querySysLogBO.getAction()))\n            .must(QueryBuilders.matchQuery(\"model\", querySysLogBO.getModel()))\n            .must(QueryBuilders.matchQuery(\"path\", querySysLogBO.getPath()))\n            .must(QueryBuilders.matchQuery(\"param\", querySysLogBO.getParam()))\n            .must(QueryBuilders.matchQuery(\"content\", querySysLogBO.getContent()))\n            .must(QueryBuilders.matchQuery(\"result\", querySysLogBO.getResult()))\n            .must(QueryBuilders.matchQuery(\"remark\", querySysLogBO.getRemark()))\n            .must(QueryBuilders.matchQuery(\"status\", querySysLogBO.getStatus()))\n            .must(QueryBuilders.rangeQuery(\"createTime\").gte(querySysLogBO.getStartTime()).lte(querySysLogBO.getEndTime()))\n    );\n    searchSourceBuilder.sort(\"createTime\", SortOrder.DESC);\n    searchSourceBuilder.fetchSource(null, new String[]{\"createTime\", \"userId\", \"realname\", \"ip\", \"action\", \"model\", \"path\", \"param\", \"content\", \"result\", \"remark\", \"status\"});\n    SearchRequest searchRequest = new SearchRequest(\"sys_log\");\n    searchRequest.source(searchSourceBuilder);\n    SearchResponse searchResponse = null;\n    try {\n        searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n    } catch (IOException e) {\n        log.error(\"querySysLogPageList error\", e);\n    }", "CodeBleu_score": 35.5143019396335}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t    // Initialize search criteria\n    SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n    // Sort results by creation time in descending order\n    searchSourceBuilder.sort(\"createTime\", SortOrder.DESC);\n    // Exclude specific fields from the response\n    searchSourceBuilder.source(false);\n    // Set the search criteria based on the query parameters\n    setSearchCriteria(searchSourceBuilder, querySysLogBO);\n    // Create a search request\n    SearchRequest searchRequest = new SearchRequest(\"sys_log\");\n    // Set the search source builder\n    searchRequest.source(searchSourceBuilder);\n    // Execute the search request using a REST client\n    SearchResponse searchResponse = null;\n    try {\n        searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n    } catch (IOException e) {\n        // Handle IO exceptions\n        log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5217\u8868\u5f02\u5e38\", e);\n    }\n    // Map the search results to SysLog objects\n    List<SysLog> sysLogs = new ArrayList<>();\n    if (searchResponse != null) {\n        SearchHits hits = searchResponse.getHits();\n        for (SearchHit hit : hits) {\n            SysLog sysLog = new SysLog();\n            // Map the search result to the SysLog object\n            Map<String, Object> sourceAsMap = hit.getSourceAsMap();\n            BeanUtil.mapToBean(sourceAsMap, sysLog, true);\n            sysLogs.add(sysLog);\n        }\n    }\n    // Populate a BasePage object with the results\n    BasePage<SysLog> page = new BasePage<>();\n    // Set the total hits and current page\n    page.setTotal(searchResponse == null ? 0 : (int) searchResponse.getHits().getTotalHits().value);\n    page.setPage(querySysLogBO.getPage());\n    page.setRecords(sysLogs);\n    return page;\n}", "CodeBleu_score": 60.787921846784656}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t    // 1. \u6784\u5efa\u67e5\u8be2\u6761\u4ef6\n    SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n    BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n    // 1.1 \u6839\u636e\u7528\u6237\u540d\u6a21\u7cca\u67e5\u8be2\n    if (StrUtil.isNotEmpty(querySysLogBO.getUserName())) {\n        boolQueryBuilder.must(QueryBuilders.matchQuery(\"userName\", querySysLogBO.getUserName()));\n    }\n    // 1.2 \u6839\u636e\u7528\u6237id\u67e5\u8be2\n    if (querySysLogBO.getUserId() != null) {\n        boolQueryBuilder.must(QueryBuilders.termQuery(\"userId\", querySysLogBO.getUserId()));\n    }\n    // 1.3 \u6839\u636e\u5f00\u59cb\u65f6\u95f4\u67e5\u8be2\n    if (querySysLogBO.getStartTime() != null) {\n        boolQueryBuilder.must(QueryBuilders.rangeQuery(\"createTime\").gte(querySysLogBO.getStartTime()));\n    }\n    // 1.4 \u6839\u636e\u7ed3\u675f\u65f6\u95f4\u67e5\u8be2\n    if (querySysLogBO.getEndTime() != null) {\n        boolQueryBuilder.must(QueryBuilders.rangeQuery(\"createTime\").lte(querySysLogBO.getEndTime()));\n    }\n    // 1.5 \u6839\u636e\u7c7b\u578b\u67e5\u8be2\n    if (StrUtil.isNotEmpty(querySysLogBO.getType())) {\n        boolQueryBuilder.must(QueryBuilders.termQuery(\"type\", querySysLogBO.getType()));\n    }\n    // 1.6 \u6839\u636eIP\u6a21\u7cca\u67e5\u8be2\n    if (StrUtil.isNotEmpty(querySysLogBO.getIp())) {\n        boolQueryBuilder.must(QueryBuilders.matchQuery(\"ip\", querySysLogBO.getIp()));\n    }\n    // 1.7 \u6839\u636e\u64cd\u4f5c\u6a21\u7cca\u67e5\u8be2\n    if (StrUtil.isNotEmpty(querySysLogBO.getOperation())) {\n        boolQueryBuilder.must(QueryBuilders.matchQuery(\"operation\", querySysLogBO.getOperation()));\n    }\n    // 1.8 \u6839\u636e\u72b6\u6001\u67e5\u8be2\n    if (", "CodeBleu_score": 24.325062516860164}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\t  const file = fs.createWriteStream(dest);\n\n  const request = https.get(url, function (response) {\n    response.pipe(file);\n\n    file.on(\"finish\", () => {\n      file.close();\n      resolve();\n    });\n  });\n\n  request.on(\"error\", function (err) {\n    fs.unlink(dest, () => {\n      reject(err);\n    });\n  });\n}", "CodeBleu_score": 52.97463603817288}, {"code": "async function downloadFile(url, dest){\n\t  const file = fs.createWriteStream(dest);\n\n  const response = await axios({\n    url,\n    method: 'GET',\n    responseType: 'stream'\n  });\n\n  response.data.pipe(file);\n\n  return new Promise((resolve, reject) => {\n    file.on('finish', () => {\n      file.close();\n      resolve(true);\n    });\n\n    file.on('error', (err) => {\n      fs.unlink(dest, () => reject(err.message)); // Delete the file and reject the promise with the error message\n    });\n  });\n}", "CodeBleu_score": 48.390034497949586}, {"code": "async function downloadFile(url, dest){\n\t  const file = fs.createWriteStream(dest);\n\n  const response = await axios({\n    method: 'get',\n    url: url,\n    responseType: 'stream'\n  });\n\n  response.data.pipe(file);\n\n  return new Promise((resolve, reject) => {\n    file.on('finish', () => {\n      file.close();\n      resolve();\n    });\n\n    file.on('error', (err) => {\n      fs.unlink(dest, () => {\n        reject(err);\n      });\n    });\n  });\n}", "CodeBleu_score": 51.558830931740964}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t        List<String> dependentModuleIds = getDependentModulesFromDsl(module.getDsl());\n        return Flux.fromIterable(dependentModuleIds)\n                .filter(moduleId -> !circularDependencyCheckSet.contains(moduleId))\n                .doOnNext(circularDependencyCheckSet::add)\n                .flatMap(applicationRepository::findById)\n                .onErrorContinue((throwable, moduleId) -> {\n                    log.warn(\"getDependentModules error. moduleId: {}\", moduleId, throwable);\n                });\n    }", "CodeBleu_score": 49.704023470388215}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t        return Flux.fromIterable(getDependentModulesFromDsl(module.getDsl()))\n                .filter(moduleId -> !circularDependencyCheckSet.contains(moduleId))\n                .doOnNext(circularDependencyCheckSet::add)\n                .flatMap(moduleId -> applicationRepository.findById(moduleId)\n                        .doOnError(e -> log.warn(\"failed to find module {}\", moduleId, e))\n                        .onErrorResume(e -> Mono.empty())\n                );\n    }", "CodeBleu_score": 58.21662044102207}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t        return Flux.fromIterable(getDependentModulesFromDsl(module.getDsl()))\n                .filter(dependentModuleId -> !circularDependencyCheckSet.contains(dependentModuleId))\n                .doOnNext(circularDependencyCheckSet::add)\n                .flatMap(dependentModuleId -> applicationRepository.findById(dependentModuleId)\n                        .onErrorResume(e -> {\n                            log.warn(\"getDependentModules error\", e);\n                            return Mono.empty();\n                        }))\n                .flatMap(dependentModule -> getDependentModules(dependentModule, circularDependencyCheckSet));\n    }", "CodeBleu_score": 51.22591809467985}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        if (entry.getKey() instanceof String && StringUtils.equalsIgnoreCase((String) entry.getKey(), \"type\")) {\n            if (entry.getValue() instanceof String && StringUtils.equalsIgnoreCase((String) entry.getValue(), \"module\")) {\n                String appId = getAppId(map);\n                if (StringUtils.isNotBlank(appId)) {\n                    dependentModuleIds.add(appId);\n                }\n            }\n        } else if (entry.getValue() instanceof Map) {\n            doGetDependentModules((Map<?, ?>) entry.getValue(), dependentModuleIds);\n        } else if (entry.getValue() instanceof List) {\n            for (Object obj : (List<?>) entry.getValue()) {\n                if (obj instanceof Map) {\n                    doGetDependentModules((Map<?, ?>) obj, dependentModuleIds);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 41.699470506985}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        if (entry.getValue() instanceof Map) {\n            doGetDependentModules((Map<?, ?>) entry.getValue(), dependentModuleIds);\n        } else if (entry.getValue() instanceof List) {\n            for (Object item : (List<?>) entry.getValue()) {\n                if (item instanceof Map) {\n                    doGetDependentModules((Map<?, ?>) item, dependentModuleIds);\n                }\n            }\n        } else if (entry.getKey().equals(\"componentType\") && StringUtils.equals(entry.getValue().toString(), \"module\")) {\n            String appId = ((Map<?, ?>) map.get(\"properties\")).get(\"appId\").toString();\n            if (StringUtils.isNotBlank(appId)) {\n                dependentModuleIds.add(appId);\n            }\n        }\n    }\n}", "CodeBleu_score": 45.79311680935595}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        if (entry.getValue() instanceof Map) {\n            doGetDependentModules((Map<?, ?>) entry.getValue(), dependentModuleIds);\n        } else if (entry.getValue() instanceof List) {\n            List<?> list = (List<?>) entry.getValue();\n            for (Object element : list) {\n                if (element instanceof Map) {\n                    doGetDependentModules((Map<?, ?>) element, dependentModuleIds);\n                }\n            }\n        } else if (entry.getKey().equals(\"componentType\") && StringUtils.equals((String) entry.getValue(), \"module\") && map.containsKey(\"appId\") && StringUtils.isNotBlank((String) map.get(\"appId\"))) {\n            dependentModuleIds.add((String) map.get(\"appId\"));\n        }\n    }\n}", "CodeBleu_score": 38.319028031338675}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t        Image image = ImageIO.read(dataBuffer.asInputStream());\n        if (createThumbnail) {\n            image = resizeImage(image, 100, 100);\n        }\n        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n        ImageIO.write(image, \"jpeg\", outputStream);\n        byte[] imageBytes = outputStream.toByteArray();\n        return Asset.builder()\n                .contentType(createThumbnail ? MediaType.IMAGE_JPEG : srcContentType)\n                .content(imageBytes)\n                .build();\n    }", "CodeBleu_score": 41.11420299250339}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t        BufferedImage image = ImageIO.read(dataBuffer.asInputStream());\n        if (createThumbnail) {\n            image = resizeImage(image);\n        }\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        ImageIO.write(image, \"jpg\", baos);\n        baos.flush();\n        byte[] bytes = baos.toByteArray();\n        baos.close();\n        return new Asset(bytes, srcContentType.toString());\n    }", "CodeBleu_score": 43.39772623130101}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t        Image image = ImageIO.read(dataBuffer.asInputStream());\n        if (createThumbnail) {\n            image = image.getScaledInstance(THUMBNAIL_WIDTH, THUMBNAIL_HEIGHT, Image.SCALE_SMOOTH);\n        }\n        BufferedImage bufferedImage = new BufferedImage(image.getWidth(null), image.getHeight(null), BufferedImage.TYPE_INT_RGB);\n        bufferedImage.getGraphics().drawImage(image, 0, 0, null);\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        ImageIO.write(bufferedImage, createThumbnail ? \"jpg\" : srcContentType.getSubtype(), baos);\n        byte[] bytes = baos.toByteArray();\n        return new Asset(bytes, createThumbnail ? \"image/jpeg\" : srcContentType.toString());\n    }", "CodeBleu_score": 37.55514086867278}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    ServerHttpResponse response = exchange.getResponse();\n    return assetService.getById(assetId)\n            .flatMap(asset -> {\n                response.setStatusCode(HttpStatus.OK);\n                response.getHeaders().setContentType(asset.getMediaType());\n                return response.writeWith(DataBufferUtils.write(asset.getData(), exchange.getResponse().bufferFactory()));\n            });\n}", "CodeBleu_score": 46.73050575714124}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    ServerHttpResponse response = exchange.getResponse();\n    return assetService.getAsset(assetId)\n            .flatMap(asset -> {\n                response.setStatusCode(HttpStatus.OK);\n                response.getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n                return response.writeWith(Flux.just(response.bufferFactory().wrap(asset.getData())));\n            });\n}", "CodeBleu_score": 47.18644974778714}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return assetService.getById(assetId)\n            .flatMap(asset -> {\n                ServerHttpResponse response = exchange.getResponse();\n                response.setStatusCode(HttpStatus.OK);\n                if (asset.getContentType() != null) {\n                    response.getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n                }\n                return response.writeWith(Flux.just(response.bufferFactory().wrap(asset.getData())));\n            });\n}", "CodeBleu_score": 54.78422981976073}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    if (commonConfig.getWorkspaceMode() == WorkspaceMode.SAAS) {\n        return Flux.empty();\n    }\n    return organizationService.findAll()\n            .filter(org -> org.getWorkspaceMode() == WorkspaceMode.ENTERPRISE)\n            .map(org -> new FindAuthConfig(org.getId(), org.getName(), org.getSource()));\n}", "CodeBleu_score": 31.33626509532949}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    if (commonConfig.getWorkspace().getMode() == WorkspaceMode.SAAS) {\n        return Flux.empty();\n    }\n    return organizationService.findAllEnterpriseModeOrganizations()\n            .map(org -> new FindAuthConfig(org.getId(), org.getName(), org.getSource()));\n}", "CodeBleu_score": 36.6151594608395}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    if (commonConfig.getWorkspaceMode() == WorkspaceMode.SAAS) {\n        return Flux.empty();\n    }\n    return organizationService.findAll()\n            .filter(org -> org.getSource() == AuthProperties.AuthSource.ENTERPRISE)\n            .map(org -> {\n                FindAuthConfig findAuthConfig = new FindAuthConfig();\n                findAuthConfig.setId(org.getId());\n                findAuthConfig.setName(org.getName());\n                findAuthConfig.setSource(org.getSource());\n                findAuthConfig.setAuthConfig(org.getAuthConfig());\n                return findAuthConfig;\n            });\n}", "CodeBleu_score": 36.04767871432119}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    return MongockSpring5.builder()\n            .setDriver(SpringDataMongoV3Driver.withDefaultLock(mongoTemplate))\n            .addChangeLogsScanPackage(\"com.openblocks.sdk.migrations\")\n            .setSpringContext(springContext)\n            .buildApplicationRunner();\n}", "CodeBleu_score": 25.95752413219263}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    return MongockSpring5.builder()\n            .setDriver(SpringDataMongoV3Driver.withDefaultLock(mongoTemplate))\n            .addChangeLogsScanPackage(MongoConfig.class.getPackageName())\n            .setSpringContext(springContext)\n            .buildApplicationRunner();\n}", "CodeBleu_score": 24.082454107307075}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    return MongockSpring5.builder()\n            .setDriver(SpringDataMongoV3Driver.withDefaultLock(mongoTemplate))\n            .addChangeLogsScanPackage(\n                    \"com.openblocks.infra.mongo.migration\")\n            .setSpringContext(springContext)\n            .buildApplicationRunner();\n}", "CodeBleu_score": 27.145706125271087}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t        ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n        return reactiveMongoTemplate;\n    }", "CodeBleu_score": 75.7466843048766}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t        ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n        return reactiveMongoTemplate;\n    }", "CodeBleu_score": 75.7466843048766}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t        ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n        return reactiveMongoTemplate;\n    }", "CodeBleu_score": 75.7466843048766}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return libraryQueryRepository.findById(libraryQueryId)\n            .switchIfEmpty(Mono.error(deferredError(LIBRARY_QUERY_NOT_FOUND, \"LIBRARY_QUERY_NOT_FOUND\")))\n            .flatMap(libraryQuery -> {\n                BaseQuery baseQuery = libraryQuery.getBaseQuery();\n                return libraryQueryRecordRepository.findFirstByLibraryQueryIdOrderByCreatedAtDesc(libraryQueryId)\n                        .map(LibraryQueryRecord::getDsl)\n                        .switchIfEmpty(Mono.just(baseQuery.getDsl()));\n            });\n}", "CodeBleu_score": 51.04647956621707}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return libraryQueryRepository.findLatestRecordByLibraryQueryId(libraryQueryId)\n            .flatMap(libraryQueryRecord -> Mono.just(libraryQueryRecord.getDsl()))\n            .switchIfEmpty(libraryQueryRepository.findById(libraryQueryId)\n                    .map(LibraryQuery::getDsl)\n                    .switchIfEmpty(Mono.error(deferredError(LIBRARY_QUERY_NOT_FOUND, \"LIBRARY_QUERY_NOT_FOUND\"))));\n}", "CodeBleu_score": 49.473636526240156}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return libraryQueryRepository.findLatestRecordByLibraryQueryId(libraryQueryId)\n            .map(LibraryQueryRecord::getDsl)\n            .switchIfEmpty(libraryQueryRepository.findById(libraryQueryId)\n                    .map(LibraryQuery::getDsl));\n}", "CodeBleu_score": 61.75891469209343}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        QueryExecutionContext queryExecutionContext = new QueryExecutionContext(queryConfig, requestParams, queryVisitorContext);\n        Duration timeoutDuration = QueryTimeoutUtils.getTimeoutDuration(timeoutStr);\n        if (datasource.getDatasourceType().isNodeJs()) {\n            return executeQueryOnNodeJs(datasource, queryExecutionContext, timeoutDuration);\n        } else {\n            return executeQueryLocally(datasource, queryExecutionContext, timeoutDuration);\n        }\n    }", "CodeBleu_score": 29.74915057395004}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        Duration timeout = QueryTimeoutUtils.getTimeout(timeoutStr);\n        return executeQuery(datasource, queryConfig, requestParams, timeout, queryVisitorContext);\n    }", "CodeBleu_score": 19.516995817055943}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        return datasourceConnectionPool.getOrCreateConnection(datasource.getId())\n                .flatMap(connection -> {\n                    Duration timeoutDuration = QueryTimeoutUtils.getTimeoutDuration(timeoutStr);\n                    if (datasourceMetaInfoService.isNodeJsDatasource(datasource.getDatasourceType())) {\n                        return executeQueryWithNodeJs(datasource, queryConfig, requestParams, timeoutDuration, connection, queryVisitorContext);\n                    }\n                    return executeQueryLocally(datasource, queryConfig, requestParams, timeoutDuration, connection, queryVisitorContext);\n                })\n                .onErrorMap(TimeoutException.class, e -> ofException(QUERY_EXECUTION_TIMEOUT, \"QUERY_EXECUTION_TIMEOUT\"))\n                .onErrorMap(PluginException.class, e -> ofException(QUERY_EXECUTION_ERROR, \"QUERY_EXECUTION_ERROR\", e.getMessage()))\n                .onErrorResume(e -> {\n                    log.error(\"execute query error\", e);\n                    return Mono.just(QueryExecutionResult.error(List.of(new BizException(QUERY_EXECUTION_ERROR, \"QUERY_EXECUTION_ERROR\"))));\n                });\n    }", "CodeBleu_score": 53.61013282564989}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t        DatasourceConnectionHolder connectionHolder = datasourceConnectionPool.getOrAcquire(datasource.getId());\n        DatasourcePluginClient datasourcePluginClient = datasourceMetaInfoService.getDatasourcePluginClient(datasource.getDatasourceType());\n        QueryExecutionContext queryExecutionContext = QueryExecutionContext.builder()\n                .datasource(datasource)\n                .datasourceConnectionHolder(connectionHolder)\n                .queryConfig(queryConfig)\n                .requestParams(requestParams)\n                .queryVisitorContext(queryVisitorContext)\n                .build();\n\n        return datasourcePluginClient.executeQuery(queryExecutionContext)\n                .doOnSuccess(queryExecutionResult -> {\n                    if (queryExecutionResult.getHasMore()) {\n                        datasourceConnectionPool.release(datasource.getId(), connectionHolder);\n                    }\n                })\n                .onErrorResume(TimeoutException.class, e -> {\n                    datasourceConnectionPool.release(datasource.getId(), connectionHolder);\n                    return Mono.error(new BizException(QUERY_EXECUTION_TIMEOUT, \"QUERY_EXECUTION_TIMEOUT\"));\n                })\n                .onErrorResume(PluginException.class, e -> {\n                    datasourceConnectionPool.release(datasource.getId(), connectionHolder);\n                    return Mono.error(ofException(QUERY_EXECUTION_ERROR, e));\n                })\n                .onErrorResume(e -> {\n                    datasourceConnectionPool.release(datasource.getId(), connectionHolder);\n                    return Mono.error(ofException(QUERY_EXECUTION_ERROR, e));\n                });\n    }", "CodeBleu_score": 41.89464227870129}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\n        DatasourcePluginClient pluginClient = datasourceMetaInfoService.getDatasourcePluginClient(datasource.getDatasourceType());\n        DatasourceConnectionHolder connectionHolder = datasourceConnectionPool.getOrCreateConnection(datasource);\n        QueryExecutionContext queryExecutionContext = QueryExecutionContext.builder()\n                .datasource(datasource)\n                .queryConfig(queryConfig)\n                .requestParams(requestParams)\n                .queryVisitorContext(queryVisitorContext)\n                .connectionHolder(connectionHolder)\n                .build();\n\n        return pluginClient.executeQuery(queryExecutionContext)\n                .timeout(Duration.ofSeconds(QueryTimeoutUtils.getQueryTimeout(datasource.getTimeout())))\n                .onErrorResume(TimeoutException.class, e -> Mono.error(new BizException(QUERY_EXECUTION_TIMEOUT, \"QUERY_EXECUTION_TIMEOUT\", e.getMessage())))\n                .onErrorResume(PluginException.class, e -> Mono.error(ofException(QUERY_EXECUTION_ERROR, e)))\n                .doFinally(signalType -> datasourceConnectionPool.releaseConnection(connectionHolder));\n    }", "CodeBleu_score": 47.18984739506139}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\n        QueryExecutionContext queryExecutionContext = QueryExecutionContext.builder()\n                .query(queryVisitorContext.getQuery())\n                .queryConfig(queryConfig)\n                .requestParams(requestParams)\n                .build();\n\n        DatasourcePluginClient pluginClient = datasourceMetaInfoService.getDatasourcePluginClient(datasource.getDatasourceType());\n        return pluginClient.executeQuery(datasource, queryExecutionContext)\n                .onErrorResume(PluginException.class, e -> Mono.error(ofException(QUERY_EXECUTION_ERROR, \"QUERY_EXECUTION_ERROR\", e)))\n                .onErrorResume(TimeoutException.class, e -> Mono.error(ofException(QUERY_EXECUTION_TIMEOUT, \"QUERY_EXECUTION_TIMEOUT\", e)));\n    }", "CodeBleu_score": 44.73480444477885}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t    if (StringUtils.isBlank(timeoutStr)) {\n        return DEFAULT_QUERY_TIMEOUT_MS;\n    }\n\n    Pair<String, String> valueAndUnit = extractValueAndUnit(timeoutStr);\n    String value = valueAndUnit.getLeft();\n    String unit = valueAndUnit.getRight();\n    long millis;\n    try {\n        millis = Duration.parse(\"PT\" + value + unit).toMillis();\n    } catch (Exception e) {\n        throw new PluginException(QUERY_ARGUMENT_ERROR, \"QUERY_ARGUMENT_ERROR\");\n    }\n    if (millis > MAX_QUERY_TIMEOUT_MS) {\n        throw new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"EXCEED_MAX_QUERY_TIMEOUT\");\n    }\n    return (int) millis;\n}", "CodeBleu_score": 41.00629680308019}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t    if (StringUtils.isBlank(timeoutStr)) {\n        return DEFAULT_QUERY_TIMEOUT_MS;\n    }\n\n    Pair<Double, String> valueAndUnit = extractTimeoutValueAndUnit(timeoutStr);\n    double value = valueAndUnit.getLeft();\n    String unit = valueAndUnit.getRight();\n\n    long milliseconds = convertToMilliseconds(value, unit);\n\n    if (milliseconds > MAX_QUERY_TIMEOUT_MS) {\n        throw new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"QUERY_TIMEOUT_MS_EXCEED_MAX_LIMIT\", MAX_QUERY_TIMEOUT_MS);\n    }\n\n    return (int) milliseconds;\n}", "CodeBleu_score": 38.69212126944502}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t    if (StringUtils.isBlank(timeoutStr)) {\n        return DEFAULT_QUERY_TIMEOUT_MS;\n    }\n\n    Pair<Integer, String> valueAndUnit = extractValueAndUnit(timeoutStr);\n    int value = valueAndUnit.getLeft();\n    String unit = valueAndUnit.getRight();\n\n    long timeoutMs = convertToMilliseconds(value, unit);\n    if (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n        throw new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"QUERY_TIMEOUT_TOO_LONG\");\n    }\n    return (int) timeoutMs;\n}", "CodeBleu_score": 34.153988923640796}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t    return Mono.justOrEmpty(application.getQueries())\n            .filter(queries -> !queries.isEmpty())\n            .switchIfEmpty(Mono.error(ofError(TEMPLATE_NOT_CORRECT, \"template.noQuery\")))\n            .flatMapIterable(queries -> queries.stream()\n                    .map(ApplicationQuery::getDatasourceId)\n                    .collect(Collectors.toList()))\n            .collectList()\n            .flatMapMany(datasourceIds -> Flux.fromIterable(datasourceIds)\n                    .flatMap(datasourceId -> datasourceService.getById(datasourceId)\n                            .map(datasource -> TupleUtils.of(datasource.getId(), datasource))))\n            .flatMap(datasource -> datasourceService.copyToCurrentOrganization(datasource.getRight(), currentOrganizationId,\n                    visitorId, DatasourceCreationSource.TEMPLATE))\n            .collectList()\n            .map(datasourcePairs -> datasourcePairs.stream()\n                    .map(datasourcePair -> TupleUtils.of(datasourcePair.getLeft(), datasourcePair.getRight().getId()))\n                    .collect(Collectors.toList()));\n}", "CodeBleu_score": 34.12676222361117}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t\n        return applicationService.getApplicationQueries(application.getId())\n                .filter(applicationQuery -> applicationQuery.getType() == ApplicationQuery.Type.LIVE)\n                .map(ApplicationQuery::getDatasourceId)\n                .collectList()\n                .filter(datasourceIds -> !datasourceIds.isEmpty())\n                .switchIfEmpty(Mono.error(ofError(TEMPLATE_NOT_CORRECT, \"template.copy.noLiveQuery\")))\n                .flatMapMany(datasourceService::getByIds)\n                .flatMap(datasource -> datasourceService.copyDatasource(datasource, currentOrganizationId, visitorId, DatasourceCreationSource.TEMPLATE))\n                .map(datasource -> Pair.of(datasource.getId(), datasource.getId()))\n                .collectList();\n    }", "CodeBleu_score": 31.657897546649078}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t    return Flux.fromIterable(application.getQueries())\n            .flatMap(query -> Flux.fromIterable(query.getDatasourceIds()))\n            .collectList()\n            .filter(list -> !list.isEmpty())\n            .switchIfEmpty(Mono.error(ofError(TEMPLATE_NOT_CORRECT, \"TEMPLATE_NOT_CORRECT\")))\n            .flatMapMany(datasourceIds -> Flux.fromIterable(datasourceIds))\n            .flatMap(datasourceId -> datasourceService.getById(datasourceId)\n                    .switchIfEmpty(Mono.error(ofError(TEMPLATE_NOT_CORRECT, \"TEMPLATE_NOT_CORRECT\")))\n                    .flatMap(datasource -> datasourceService.copy(currentOrganizationId, datasource, DatasourceCreationSource.TEMPLATE, visitorId)))\n            .map(datasource -> Pair.of(datasource.getId(), datasource.getId()))\n            .collectList();\n}", "CodeBleu_score": 35.83013439097385}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceService.getById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.getCreationSource() == DatasourceCreationSource.SYSTEM_STATIC) {\n                    return Mono.just(datasourceId);\n                }\n                if (datasource.getCreationSource() == DatasourceCreationSource.LEGACY_QUICK_REST_API) {\n                    return Mono.just(datasource.getNewId());\n                }\n                if (datasource.getCreationSource() == DatasourceCreationSource.LEGACY_OPENBLOCKS_API) {\n                    return Mono.just(datasource.getNewId());\n                }\n                return datasourceService.create(datasource, organizationId, visitorId);\n            });\n}", "CodeBleu_score": 60.13149083199553}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceService.getById(datasourceId)\n            .switchIfEmpty(Mono.error(ofError(TEMPLATE_NOT_EXIST, \"DATASOURCE_NOT_FOUND\")))\n            .map(datasource -> {\n                if (datasource.getCreationSource() == DatasourceCreationSource.SYSTEM_STATIC) {\n                    return datasource.getId();\n                }\n                if (datasource.getCreationSource() == DatasourceCreationSource.LEGACY_REST_API) {\n                    return datasource.getLegacyDatasourceId();\n                }\n                if (datasource.getCreationSource() == DatasourceCreationSource.LEGACY_OPENBLOCKS_API) {\n                    return datasource.getLegacyDatasourceId();\n                }\n                return datasourceService.create(datasource.toBuilder()\n                        .id(null)\n                        .organizationId(organizationId)\n                        .creationSource(DatasourceCreationSource.TEMPLATE)\n                        .visitorId(visitorId)\n                        .build())\n                        .map(Datasource::getId);\n            })\n            .flatMap(Mono::from);\n}", "CodeBleu_score": 44.54612974574717}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceService.getById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.isSystemStatic()) {\n                    return Mono.just(datasource.getId());\n                }\n                if (datasource.isLegacyQuickApi()) {\n                    return Mono.just(datasource.getLegacyQuickApiDatasourceId());\n                }\n                if (datasource.isLegacyOpenblocksApi()) {\n                    return Mono.just(datasource.getLegacyOpenblocksApiDatasourceId());\n                }\n                return datasourceService.create(datasource.toBuilder()\n                        .id(null)\n                        .organizationId(organizationId)\n                        .createSource(DatasourceCreationSource.TEMPLATE)\n                        .createUserId(visitorId)\n                        .build());\n            });\n}", "CodeBleu_score": 63.90616922130307}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t        return assetService.upload(filePart, user)\n                .flatMap(asset -> {\n                    if (user.getAvatar() != null) {\n                        return assetService.delete(user.getAvatar())\n                                .then(Mono.just(asset));\n                    }\n                    return Mono.just(asset);\n                })\n                .flatMap(asset -> {\n                    user.setAvatar(asset.getId());\n                    return userRepository.save(user);\n                })\n                .map(savedUser -> true);\n    }", "CodeBleu_score": 31.47677349144659}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t    return assetService.uploadFile(filePart, user.getId())\n        .flatMap(asset -> {\n            if (asset.getType() != Asset.Type.IMAGE) {\n                return Mono.error(ofError(BizError.INVALID_ARGUMENT, \"NOT_IMAGE\"));\n            }\n            return Mono.just(asset);\n        })\n        .flatMap(asset -> {\n            if (StringUtils.isNotBlank(user.getAvatar())) {\n                return assetService.deleteAsset(user.getId(), user.getAvatar())\n                    .then(Mono.just(asset));\n            }\n            return Mono.just(asset);\n        })\n        .flatMap(asset -> {\n            user.setAvatar(asset.getId());\n            return userRepository.save(user);\n        })\n        .thenReturn(true);\n}", "CodeBleu_score": 31.56323909356106}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t        return assetService.uploadFile(filePart)\n                .flatMap(asset -> {\n                    if (StringUtils.isNotBlank(user.getAvatar())) {\n                        return assetService.deleteAsset(user.getAvatar())\n                                .then(Mono.just(asset));\n                    }\n                    return Mono.just(asset);\n                })\n                .flatMap(asset -> userRepository.updateById(user.getId(), new PartialResourceWithId<>(user.getId(), new User(user).setAvatar(asset.getId()))))\n                .map(Boolean::TRUE);\n    }", "CodeBleu_score": 31.477211464196685}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    return Mono.just(authUser)\n            .map(AuthUser::toUser)\n            .map(user -> {\n                user.setName(authUser.getName());\n                user.setState(UserState.NEW);\n                user.setEnabled(true);\n                user.setAvatar(authUser.getAvatar());\n                if (AuthSourceConstants.EMAIL.equals(authUser.getAuthSource()) && authUser.getAuthContext().getPassword() != null) {\n                    user.setPassword(encryptionService.encrypt(authUser.getAuthContext().getPassword()));\n                }\n                user.setConnections(authUser.getConnections());\n                user.setNewUser(true);\n                return user;\n            });\n}", "CodeBleu_score": 38.33221109584691}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    User newUser = new User();\n    newUser.setName(authUser.getName());\n    newUser.setState(UserState.NEW);\n    newUser.setEnabled(true);\n    newUser.setAvatar(authUser.getAvatar());\n    if (authUser.getAuthSource().equals(AuthSourceConstants.EMAIL)) {\n        FormAuthRequestContext authRequestContext = (FormAuthRequestContext) authUser.getAuthRequestContext();\n        if (authRequestContext.getPassword() != null) {\n            newUser.setPassword(encryptionService.encrypt(authRequestContext.getPassword()));\n        }\n    }\n    newUser.setConnections(authUser.getConnections());\n    newUser.setIsNew(true);\n    return userRepository.save(newUser);\n}", "CodeBleu_score": 53.41103695030087}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    User newUser = new User();\n    newUser.setName(authUser.getName());\n    newUser.setState(UserState.ACTIVE);\n    newUser.setEnabled(true);\n    newUser.setAvatar(authUser.getAvatar());\n    if (authUser.getAuthSource().equals(AuthSourceConstants.EMAIL)) {\n        FormAuthRequestContext authContext = (FormAuthRequestContext) authUser.getAuthContext();\n        if (authContext.getPassword() != null) {\n            newUser.setPassword(encryptionService.encrypt(authContext.getPassword()));\n        }\n    }\n    newUser.setConnections(authUser.getConnections());\n    newUser.setNew(true);\n    return userRepository.save(newUser);\n}", "CodeBleu_score": 53.137151503012916}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return bind(user, email, AuthSourceConstants.EMAIL);\n}", "CodeBleu_score": 6.664161044950199}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return Mono.just(user)\n            .map(u -> {\n                u.addConnection(Connection.builder()\n                        .source(AuthSourceConstants.EMAIL)\n                        .name(email)\n                        .build());\n                return u;\n            })\n            .flatMap(userRepository::save)\n            .map(u -> true)\n            .onErrorResume(DuplicateKeyException.class, e -> Mono.error(new BizException(BizError.USER_ALREADY_EXIST, \"user already exist\")))\n            .onErrorResume(e -> Mono.error(e));\n}", "CodeBleu_score": 36.677941777712476}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return Mono.fromCallable(() -> {\n        Connection connection = new Connection(AuthSourceConstants.EMAIL, email);\n        user.getConnections().add(connection);\n        userRepository.save(user);\n        return true;\n    }).onErrorResume(e -> {\n        if (e instanceof DuplicateKeyException) {\n            return Mono.error(ofError(BizError.USER_ALREADY_EXIST, \"user already exist\"));\n        }\n        return Mono.error(e);\n    });\n}", "CodeBleu_score": 42.27474525839142}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return userRepository.findById(userId)\n            .flatMap(user -> {\n                if (!passwordEncryptionService.isMatched(oldPassword, user.getPassword())) {\n                    return Mono.error(BizError.INVALID_PASSWORD);\n                }\n                return userRepository.updateById(userId, new HashMap<>() {{\n                    put(FieldName.PASSWORD, passwordEncryptionService.encrypt(newPassword));\n                }});\n            })\n            .thenReturn(true)\n            .onErrorMap(BizException.class, e -> e)\n            .onErrorResume(e -> Mono.error(ofException(e)));\n}", "CodeBleu_score": 31.79469437868808}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return userRepository.findById(userId)\n            .flatMap(user -> {\n                if (user.isValidPassword(oldPassword)) {\n                    user.setPassword(newPassword);\n                    return userRepository.save(user);\n                } else {\n                    return Mono.error(new BizException(BizError.INVALID_PASSWORD, \"Invalid password\"));\n                }\n            })\n            .map(user -> true);\n}", "CodeBleu_score": 23.854262411162537}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return userRepository.findById(userId)\n            .flatMap(user -> {\n                if (!encryptionService.verifyPassword(oldPassword, user.getPassword())) {\n                    return Mono.error(ofError(BizError.INVALID_PASSWORD, \"old password is invalid\"));\n                }\n                String encryptedNewPassword = encryptionService.encryptPassword(newPassword);\n                return userRepository.updateById(userId, FieldName.PASSWORD, encryptedNewPassword)\n                        .thenReturn(true);\n            });\n}", "CodeBleu_score": 36.24300966055918}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t    return groupService.getGroups(userId, orgMember.getOrganizationId())\n            .filter(group -> !group.isAllUserGroup())\n            .filter(group -> !withoutDynamicGroups || !group.isDynamicGroup())\n            .map(group -> {\n                Map<String, String> groupMap = new HashMap<>();\n                groupMap.put(FieldName.ID, group.getId());\n                groupMap.put(FieldName.NAME, LocaleUtils.getLocalizedGroupName(group, locale));\n                return groupMap;\n            })\n            .collectList();\n}", "CodeBleu_score": 29.271195924665992}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t    return groupService.getUserDetailGroups(userId, orgMember, withoutDynamicGroups)\n            .map(group -> Map.of(FieldName.ID, group.getId(), FieldName.NAME, group.getName(locale)));\n}", "CodeBleu_score": 14.411539017149282}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t        if (orgMember.isAdmin()) {\n            return groupService.findAllGroups(withoutDynamicGroups, locale)\n                    .map(groups -> groups.stream()\n                            .filter(group -> !group.isAllUsersGroup())\n                            .map(group -> Map.of(FieldName.ID, group.getId(), FieldName.NAME, group.getName()))\n                            .collect(Collectors.toList()));\n        }\n\n        return groupMemberService.getGroupIdsByUserId(userId)\n                .flatMapMany(groupService::findGroupsByIds)\n                .filter(group -> !group.isAllUsersGroup())\n                .map(group -> Map.of(FieldName.ID, group.getId(), FieldName.NAME, group.getName()))\n                .collectList();\n    }", "CodeBleu_score": 37.322785564532126}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    UserStatus userStatus = new UserStatus();\n    userStatus.setUserId(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n    return mongoUpsertHelper.upsert(userStatus, UserStatus::getUserId, userStatus, Update::set);\n}", "CodeBleu_score": 37.24095344508281}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    UserStatus userStatus = new UserStatus();\n    userStatus.setUserId(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n    return mongoUpsertHelper.upsert(userStatus, Update.update(\"hasShowNewUserGuidance\", true), UserStatus.Fields.userId);\n  }", "CodeBleu_score": 36.17783026329213}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    UserStatus userStatus = new UserStatus();\n    userStatus.setUserId(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n    return mongoUpsertHelper.upsert(userStatus, UserStatus.Fields.userId, Update.update(UserStatus.Fields.hasShowNewUserGuidance, true));\n}", "CodeBleu_score": 35.32771485431936}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition must be set\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue must be set\")\n\t}\n\n\tg := rungroup.New()\n\tfor k, p := range c.partitions {\n\t\tif predicatePartition(k, p) {\n\t\t\tg.Go(func() error {\n\t\t\t\treturn p.ClearMatching(predicateValue)\n\t\t\t})\n\t\t}\n\t}\n\tg.Wait()\n}", "CodeBleu_score": 37.257017722329394}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition must not be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue must not be nil\")\n\t}\n\n\trungroup.New(c.partitions.Len()).Do(func(i int) {\n\t\tp := c.partitions.At(i)\n\t\tif predicatePartition(p.Name(), p) {\n\t\t\tp.ClearMatching(predicateValue)\n\t\t}\n\t})\n}", "CodeBleu_score": 30.60120302536446}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition must not be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue must not be nil\")\n\t}\n\n\tg := rungroup.New(context.Background())\n\n\tfor k, p := range c.partitions {\n\t\tk := k\n\t\tp := p\n\t\tif predicatePartition(k, p) {\n\t\t\tg.Go(func() error {\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t\treturn nil\n\t\t\t})\n\t\t}\n\t}\n\n\t_ = g.Wait()\n}", "CodeBleu_score": 43.95200312589072}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 {\n\t\tpanic(\"must have at least one partition\")\n\t}\n\tif totalWeightQuantity <= 0 {\n\t\tpanic(\"total weight quantity must be greater than zero\")\n\t}\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\treturn int(math.Ceil(float64(maxItemsTotal) / avgWeightPerPartition))\n}", "CodeBleu_score": 58.630110209312456}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 {\n\t\treturn 0\n\t}\n\tif totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\treturn int(math.Ceil(float64(maxItemsTotal) / avgWeightPerPartition))\n}", "CodeBleu_score": 43.428208646596985}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 {\n\t\tpanic(\"must have at least one partition\")\n\t}\n\tif totalWeightQuantity <= 0 {\n\t\tpanic(\"total weight quantity must be greater than zero\")\n\t}\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\treturn int(math.Ceil(float64(maxItemsTotal) / avgWeightPerPartition))\n}", "CodeBleu_score": 58.630110209312456}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\t    ConnectionFactory connectionFactory = connectionFactory();\n    Connection connection = connectionFactory.create().block();\n    ConnectionMetadata connectionMetadata = Objects.requireNonNull(connection).getMetadata();\n    Map<String, Object> contributorMap = new HashMap<>();\n    if (connectionMetadata != null) {\n        contributorMap.put(\"database\", connectionMetadata.getName());\n        contributorMap.put(\"version\", connectionMetadata.getVersion());\n    }\n    return contributorMap;\n}", "CodeBleu_score": 46.332782951303244}, {"code": "public Map<String, Object> contributorMap(){\n\t    ConnectionMetadata metadata = this.connectionFactory.getMetadata();\n    if (Objects.nonNull(metadata)) {\n        Map<String, Object> contributorMap = new HashMap<>();\n        contributorMap.put(\"database\", metadata.getName());\n        contributorMap.put(\"version\", metadata.getVersion());\n        return contributorMap;\n    }\n    return Map.of();\n}", "CodeBleu_score": 46.94319171362356}, {"code": "public Map<String, Object> contributorMap(){\n\t    Map<String, Object> map = new HashMap<>();\n    ConnectionMetadata metadata = connection.getMetadata();\n    if (Objects.nonNull(metadata)) {\n        map.put(\"databaseProductName\", metadata.getName());\n        map.put(\"databaseVersion\", metadata.getVersion());\n    }\n    return map;\n}", "CodeBleu_score": 48.53235758479822}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    if (configMap == null) {\n        info.setRegistrationDisabled(true);\n        info.setEmailVerificationOnRegistrationDisabled(true);\n        return;\n    }\n    User user = configMap.getUser();\n    if (user == null) {\n        info.setRegistrationDisabled(true);\n        info.setEmailVerificationOnRegistrationDisabled(true);\n        return;\n    }\n    info.setRegistrationDisabled(!user.isRegistrationAllowed());\n    info.setEmailVerificationOnRegistrationDisabled(\n        !user.isEmailVerificationOnRegistrationEnabled());\n}", "CodeBleu_score": 33.857166420733854}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    User user = configMap.getUser();\n    if (user == null) {\n        info.setRegistrationDisabled(true);\n        info.setEmailVerificationOnRegistrationDisabled(true);\n    } else {\n        info.setRegistrationDisabled(!isTrue(user.getRegistration()));\n        info.setEmailVerificationOnRegistrationDisabled(!isTrue(user.getEmailVerificationOnRegistration()));\n    }\n}", "CodeBleu_score": 35.04950539018366}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    var user = configMap.getUser();\n    if (user == null) {\n        info.setRegistrationDisabled(true);\n        info.setEmailVerificationOnRegistrationDisabled(true);\n        return;\n    }\n    if (isTrue(user.getRegistrationDisabled())) {\n        info.setRegistrationDisabled(true);\n    }\n    if (isTrue(user.getEmailVerificationOnRegistrationDisabled())) {\n        info.setEmailVerificationOnRegistrationDisabled(true);\n    }\n}", "CodeBleu_score": 37.078732273521446}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\t    new Thread(() -> {\n        Thread.currentThread().setContextClassLoader(Application.class.getClassLoader());\n        SpringApplication.run(Application.class).close();\n    }).start();\n    return Collections.singletonMap(\"message\", \"Restarting\");\n}", "CodeBleu_score": 29.03932196601659}, {"code": "public Object restart(){\n\t    Thread restartThread = new Thread(() -> {\n        ThreadGroup threadGroup = new ThreadGroup(\"Halo Restart\");\n        Thread restartThread = new Thread(threadGroup, () -> {\n            try {\n                ApplicationContext context = Application.getApplicationContext();\n                if (context instanceof ConfigurableApplicationContext configurableApplicationContext) {\n                    configurableApplicationContext.close();\n                }\n                Application.restart();\n            } catch (Exception e) {\n                log.error(\"Failed to restart application\", e);\n            }\n        });\n        restartThread.setDaemon(false);\n        restartThread.setContextClassLoader(Application.class.getClassLoader());\n        restartThread.start();\n    });\n    restartThread.setDaemon(false);\n    restartThread.start();\n    return \"Application restart has been triggered, please refresh the page.\";\n}", "CodeBleu_score": 40.18947336547224}, {"code": "public Object restart(){\n\t    Thread restartThread = new Thread(this::doRestart);\n    restartThread.setContextClassLoader(getClass().getClassLoader());\n    restartThread.setDaemon(false);\n    restartThread.start();\n    return \"Application Restarting\";\n}", "CodeBleu_score": 33.311894071829165}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t     configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n     configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n }", "CodeBleu_score": 71.35968156121783}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t        configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n        configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n    }", "CodeBleu_score": 70.31411393684094}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t        // \u8bbe\u7f6eJackson2JsonDecoder\u548cJackson2JsonEncoder\n        configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n        configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n    }", "CodeBleu_score": 65.02993173463314}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t    return route(path(\"/console/**\")\n            .and(method(HttpMethod.GET))\n            .and(accept(MediaType.TEXT_HTML))\n            .and(WebSocketRequestPredicate.notWebSocket()),\n        request -> {\n            String path = request.path();\n            if (path.endsWith(\"/\")) {\n                path += \"index.html\";\n            }\n            return ServerResponse.ok()\n                .contentType(MediaType.TEXT_HTML)\n                .body(BodyInserters.fromResource(\n                    new PathResourceResolver().resolveResource(FILE_URL_PREFIX + path,\n                        \"classpath:console/index.html\")));\n        });\n}", "CodeBleu_score": 29.849261628095856}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t    return route(path(\"/console/**\").and(accept(MediaType.TEXT_HTML))\n            .and(WebSocketRequestPredicate.notWebSocket())\n            .and(method(HttpMethod.GET))\n            .and(path(\"/console/assets/**\").negate()),\n        req -> {\n            var index = HaloProperties.getWorkDir().resolve(AttachmentProperties.getConsolePath())\n                .resolve(\"index.html\");\n            return ServerResponse.ok().contentType(MediaType.TEXT_HTML)\n                .body(BodyInserters.fromResource(FILE_URL_PREFIX + index));\n        });\n}", "CodeBleu_score": 39.60902702601074}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t    return route(path(\"/console/**\")\n        .and(accept(MediaType.TEXT_HTML))\n        .and(method(HttpMethod.GET))\n        .and(WebSocketRequestPredicate.notWebSocket()),\n        request -> {\n            String path = request.path();\n            if (path.startsWith(\"/console/assets/\")) {\n                return ServerResponse.notFound().build();\n            }\n            return ServerResponse.ok().contentType(MediaType.TEXT_HTML)\n                .body(BodyInserters.fromResource(\n                    new EncodedResourceResolver().resolveResource(\n                        \"classpath:static/console/index.html\", \"classpath:/static/console/index.html\")));\n        });\n}", "CodeBleu_score": 30.38721910403948}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t    return route(path(\"/uc/**\").and(method(HttpMethod.GET)).and(accept(MediaType.TEXT_HTML)).and(WebSocketRequestPredicate.not()),\n        request -> {\n            String path = request.path();\n            if (path.startsWith(\"/uc/assets/\")) {\n                return ServerResponse.notFound().build();\n            }\n            return ServerResponse.ok()\n                .contentType(MediaType.TEXT_HTML)\n                .body(BodyInserters.fromResource(\n                    new EncodedResource(\n                        new ClassPathResource(\"/uc/index.html\"),\n                        StandardCharsets.UTF_8)));\n        });\n}", "CodeBleu_score": 29.018888583537915}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t    return route(path(\"/uc/**\").and(method(HttpMethod.GET))\n            .and(accept(MediaType.TEXT_HTML))\n            .and(request -> !WebSocketRequestPredicate.INSTANCE.test(request)),\n        request -> {\n            var ucLocation = HaloProperties.getStaticLocation() + \"/uc\";\n            return ServerResponse.ok()\n                .contentType(MediaType.TEXT_HTML)\n                .body(BodyInserters.fromResource(ucLocation + \"/index.html\"));\n        });\n}", "CodeBleu_score": 32.18744367678152}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t    return route(path(\"/uc/**\")\n            .and(method(HttpMethod.GET))\n            .and(accept(MediaType.TEXT_HTML))\n            .and(WebSocketRequestPredicate.notWebSocket()),\n        request -> {\n            var ucLocation = HaloProperties.getUcLocation();\n            var indexFile = FILE_URL_PREFIX + ucLocation + \"/index.html\";\n            return ServerResponse.ok()\n                .contentType(MediaType.TEXT_HTML)\n                .body(BodyInserters.fromResource(indexFile));\n        });\n}", "CodeBleu_score": 32.21250026240449}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    return new InMemoryReactiveIndexedSessionRepository(new ConcurrentHashMap<>(),\n        sessionProperties.getTimeout());\n}", "CodeBleu_score": 13.497947275404757}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    var sessionProperties = sessionPropertiesProvider.getIfAvailable();\n    var serverProperties = serverPropertiesProvider.getIfAvailable();\n    var repository = new InMemoryReactiveIndexedSessionRepository(new ConcurrentHashMap<>());\n    if (sessionProperties != null && sessionProperties.getTimeout() != null) {\n        repository.setDefaultMaxInactiveInterval(sessionProperties.getTimeout());\n    }\n    if (serverProperties != null && serverProperties.getServlet() != null) {\n        repository.setDefaultMaxInactiveInterval(serverProperties.getServlet().getSession().getTimeout());\n    }\n    return repository;\n}", "CodeBleu_score": 48.56266613841002}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    return new InMemoryReactiveIndexedSessionRepository(new ConcurrentHashMap<>(),\n        properties.getSession().getTimeout(),\n        serverProperties.getServlet().getSession().getCookie().getMaxAge().toSeconds());\n}", "CodeBleu_score": 22.488496801148685}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    var userDetailsService = new DefaultUserDetailService(userService, roleService);\n    if (haloProperties.getSecurity().isTwoFactorAuthEnabled()) {\n        userDetailsService.enableTwoFactorAuth();\n    }\n    return userDetailsService;\n}", "CodeBleu_score": 46.47302884491717}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    var defaultUserDetailService = new DefaultUserDetailService(userService, roleService);\n    var security = haloProperties.getSecurity();\n    defaultUserDetailService.setEnableTwoFactor(security.getTwoFactor().isEnabled());\n    return defaultUserDetailService;\n}", "CodeBleu_score": 53.794642255208615}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    DefaultUserDetailService userDetailService = new DefaultUserDetailService(userService, roleService);\n    userDetailService.setEnableTwoFactor(haloProperties.getSecurity().isTwoFactorAuthEnabled());\n    return userDetailService;\n}", "CodeBleu_score": 50.20256505116434}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\t    Assert.notNull(this, \"The comment owner must not be null\");\n    Comment.CommentOwner commentOwner = new Comment.CommentOwner();\n    commentOwner.setKind(\"email\");\n    commentOwner.setEmail(StringUtils.defaultString(this.getEmail(), \"\"));\n    commentOwner.setDisplayName(this.getDisplayName());\n    commentOwner.setAnnotations(new LinkedHashMap<>());\n    commentOwner.getAnnotations().put(\"avatar\", this.getAvatar());\n    commentOwner.getAnnotations().put(\"website\", this.getWebsite());\n    return commentOwner;\n}", "CodeBleu_score": 43.64423800160876}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t    Assert.notNull(this, \"The comment owner must not be null\");\n    Comment.CommentOwner commentOwner = new Comment.CommentOwner();\n    commentOwner.setKind(\"email\");\n    commentOwner.setEmail(StringUtils.isNotBlank(this.getEmail()) ? this.getEmail() : \"\");\n    commentOwner.setDisplayName(this.getDisplayName());\n    Map<String, String> annotations = new LinkedHashMap<>();\n    annotations.put(\"avatar\", this.getAvatar());\n    annotations.put(\"website\", this.getWebsite());\n    commentOwner.setAnnotations(annotations);\n    return commentOwner;\n}", "CodeBleu_score": 59.384412851675215}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t    Assert.notNull(this, \"The comment owner must not be null\");\n    Comment.CommentOwner owner = new Comment.CommentOwner();\n    owner.setKind(\"email\");\n    owner.setEmail(StringUtils.defaultIfBlank(getEmail(), \"\"));\n    owner.setDisplayName(getDisplayName());\n    Map<String, String> annotations = new LinkedHashMap<>();\n    annotations.put(\"avatar\", getAvatar());\n    annotations.put(\"website\", getWebsite());\n    owner.setAnnotations(annotations);\n    return owner;\n}", "CodeBleu_score": 51.9634101181624}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    if (commentOwner == null) {\n        return false;\n    }\n    if (commentOwner.getKind() == null || commentOwner.getName() == null) {\n        return false;\n    }\n    if (commentOwner.getKind().equals(GroupVersionKind.USER.toKind())) {\n        return commentOwner.getName().equals(post.getSpec().getOwner().getName());\n    }\n    if (commentOwner.getKind().equals(GroupVersionKind.EMAIL.toKind())) {\n        var user = extensionClient.fetch(GroupVersionKind.USER, post.getSpec().getOwner().getName());\n        return commentOwner.getName().equals(user.getSpec().getEmail());\n    }\n    return false;\n}", "CodeBleu_score": 40.484424022403864}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    if (commentOwner == null) {\n        return false;\n    }\n    if (commentOwner.getKind().equals(User.KIND)) {\n        if (post.getMetadata().getOwnerRefs() == null) {\n            return false;\n        }\n        return post.getMetadata().getOwnerRefs().stream().anyMatch(ref -> ref.getName().equals(commentOwner.getName()));\n    } else if (commentOwner.getKind().equals(SinglePage.KIND)) {\n        return post.getSpec().getOwner() != null && post.getSpec().getOwner().getName().equals(commentOwner.getName());\n    } else if (commentOwner.getKind().equals(User.KIND + \".email\")) {\n        if (post.getMetadata().getOwnerRefs() == null) {\n            return false;\n        }\n        var user = post.getMetadata().getOwnerRefs().stream().findFirst().map(ref -> extensionClient.fetch(User.class, ref.getName())).orElse(null);\n        if (user == null) {\n            return false;\n        }\n        return user.getSpec().getEmail().equals(commentOwner.getName());\n    } else {\n        return false;\n    }\n}", "CodeBleu_score": 36.87309948499475}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    if (commentOwner.getKind() == GroupVersionKind.USER) {\n        return commentOwner.getName().equals(post.getSpec().getOwner().getName());\n    } else if (commentOwner.getKind() == GroupVersionKind.EMAIL) {\n        User user = extensionClient.fetch(GroupVersionKind.USER, post.getSpec().getOwner().getName());\n        return commentOwner.getName().equals(user.getSpec().getEmail());\n    }\n    return false;\n}", "CodeBleu_score": 41.823114605391545}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\t    var listOptions = new ListOptions();\n    var fieldSelector = labelAndFieldSelectorToListOptions(getLabelSelector(), getFieldSelector());\n    listOptions.setFieldSelector(fieldSelector);\n    var keyword = getKeyword();\n    if (StringUtils.isNotBlank(keyword)) {\n        listOptions.setLabelSelector(keyword);\n    }\n    var ownerName = getOwnerName();\n    if (StringUtils.isNotBlank(ownerName)) {\n        listOptions.setFieldSelector(\n            and(fieldSelector, equal(Comment.OWNER_REF, ownerName)));\n    }\n    return listOptions;\n}", "CodeBleu_score": 43.034691497963024}, {"code": "public ListOptions toListOptions(){\n\t    ListOptions.ListOptionsBuilder builder = ListOptions.builder();\n    if (StringUtils.isNotEmpty(keyword)) {\n        builder.fieldQuery(and(contains(\"spec.displayName\", keyword),\n            contains(\"spec.content.raw\", keyword)));\n    }\n    if (StringUtils.isNotEmpty(ownerName)) {\n        builder.fieldQuery(equal(\"spec.ownerName\", ownerName));\n    }\n    builder.fieldSelector(FieldSelector.of(labelAndFieldSelectorToListOptions(labelSelector, fieldSelector)));\n    return builder.build();\n}", "CodeBleu_score": 24.014851418962706}, {"code": "public ListOptions toListOptions(){\n\t    ListOptions listOptions = new ListOptions();\n    listOptions.setFieldSelector(labelAndFieldSelectorToListOptions(labelSelector, fieldSelector));\n    if (StringUtils.isNotBlank(keyword)) {\n        listOptions.setLabelSelector(and(contains(Comment.class, \"content\", keyword),\n            contains(Comment.class, \"raw\", keyword)));\n    }\n    if (StringUtils.isNotBlank(ownerName)) {\n        listOptions.setLabelSelector(and(listOptions.getLabelSelector(),\n            equal(Comment.class, \"owner\", ownerName)));\n    }\n    return listOptions;\n}", "CodeBleu_score": 26.387498880637672}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    Assert.notNull(commentName, \"The comment name must not be null.\");\n    return counterService.get(commentName)\n        .map(stats -> new CommentStats(stats.getUpvotes()))\n        .defaultIfEmpty(new CommentStats());\n}", "CodeBleu_score": 50.54901018213857}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    Assert.notNull(commentName, \"Comment name must not be null.\");\n    return counterService.get(commentName)\n        .map(counter -> new CommentStats(counter.getUpvoteCount()));\n}", "CodeBleu_score": 46.729781106165326}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    Assert.notNull(commentName, \"Comment name must not be null.\");\n    return counterService.get(commentName)\n        .map(counter -> CommentStats.builder().upvote(counter.getCount()).build())\n        .defaultIfEmpty(CommentStats.empty());\n}", "CodeBleu_score": 56.630840838269215}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\t    var subscriber = new Subscription.Subscriber(identity);\n    var subscription = new Subscription.Subscriber.InterestReason(NotificationReasonConst.SOMEONE_REPLIED_TO_YOU,\n        new Subscription.Subscriber.InterestReason.Condition(Subscription.Subscriber.InterestReason.Condition.ConditionType.EQUALS,\n            Subscription.Subscriber.InterestReason.Condition.ConditionProperty.REPLIED_OWNER,\n            identity.getUsername()));\n    notificationCenter.subscribe(subscriber, subscription);\n    notificationCenter.getSubscriber(subscriber).block();\n}", "CodeBleu_score": 39.246988156241905}, {"code": "void subscribeReply(UserIdentity identity){\n\t    Subscription subscription = new Subscription();\n    subscription.setUser(identity.getUser());\n    subscription.setInterestReason(NotificationReasonConst.SOMEONE_REPLIED_YOU);\n    subscription.setCondition(new JsonObject().put(\"owner\", identity.getUser().getMetadata().getName()));\n    notificationCenter.subscribe(subscription)\n        .block();\n}", "CodeBleu_score": 28.59322226408295}, {"code": "void subscribeReply(UserIdentity identity){\n\t    var subscriber = new Subscription.Subscriber(identity);\n    var interestReason = new Subscription.InterestReason(NotificationReasonConst.SOMEONE_REPLIED_YOU,\n        (reply) -> StringUtils.equals(reply.getOwner(), identity.getUser().getMetadata().getName()));\n    notificationCenter.subscribe(subscriber, interestReason);\n    notificationCenter.blockUntilSubscribed(subscriber);\n}", "CodeBleu_score": 44.7940978104031}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\t    return client.update(comment, (oldComment, newComment) -> {\n        newComment.setApproved(true);\n        newComment.setApprovedAt(Instant.now());\n        return newComment;\n    });\n}", "CodeBleu_score": 20.76335901487248}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t    return client.update(comment)\n        .onErrorResume(OptimisticLockingFailureException.class,\n            e -> client.fetch(Comment.class, comment.getMetadata().getName())\n                .flatMap(this::approveComment));\n}", "CodeBleu_score": 24.467430189426068}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t    return client.fetch(Comment.class, comment.getMetadata().getName())\n        .flatMap(c -> {\n            c.getStatusOrDefault().setApproved(true);\n            c.getStatusOrDefault().setApprovedTime(Instant.now());\n            return client.update(c);\n        })\n        .retryWhen(Retry.max(3).filter(OptimisticLockingFailureException.class::isInstance));\n}", "CodeBleu_score": 34.01281837098279}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->livewire($this);\n    }\n\n    if ($action instanceof HasRecord && $this instanceof HasRecord) {\n        $action->record($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 63.40732870559565}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->livewire($this);\n    }\n\n    if ($action instanceof HasRecord && $this instanceof HasRecord) {\n        $action->record($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 63.40732870559565}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->livewire($this);\n    }\n\n    if ($action instanceof HasRecord && $this instanceof HasRecord) {\n        $action->record($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 63.40732870559565}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    if ($this->successRedirectUrl) {\n        if (is_app_url($this->successRedirectUrl)) {\n            return $this->redirect($this->successRedirectUrl);\n        }\n\n        return $this->redirect($this->getSuccessRedirectUrl());\n    }\n\n    return $this;\n}", "CodeBleu_score": 29.706319512322597}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    $successRedirectUrl = $this->getSuccessRedirectUrl();\n\n    if (filled($successRedirectUrl)) {\n        if (is_app_url($successRedirectUrl)) {\n            $this->redirect($successRedirectUrl);\n        } else {\n            $this->redirectUrl($successRedirectUrl);\n        }\n    }\n\n    return $this;\n}", "CodeBleu_score": 45.42071118756502}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    $successRedirectUrl = $this->getSuccessRedirectUrl();\n\n    if (blank($successRedirectUrl)) {\n        return $this;\n    }\n\n    if (is_app_url($successRedirectUrl)) {\n        return $this->redirect($successRedirectUrl);\n    }\n\n    return $this->redirectToUrl($successRedirectUrl);\n}", "CodeBleu_score": 40.682351404570205}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if (! $record) {\n        return;\n    }\n\n    if (! method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagModelClass = config('tags.tag_model', Tag::class);\n\n    $tagNames = collect($state)\n        ->map(fn ($tagName): string => trim(strtolower($tagName)))\n        ->filter(fn (?string $tagName): bool => filled($tagName))\n        ->map(fn (string $tagName): string => trim($tagName));\n\n    $tags = $tagNames\n        ->map(function (string $name) use ($tagModelClass) {\n            $tag = $tagModelClass::findOrCreate($name, $this->getType());\n            $tag->type = $this->getType();\n            $tag->save();\n\n            return $tag->id;\n        })\n        ->pipe(function ($tags) use ($tagModelClass): Collection {\n            if ($this->getType() !== AllTagTypes::class) {\n                return $tags;\n            }\n\n            return $tagModelClass::findMany($tags);\n        });\n\n    $record->tags()->sync($tags);\n}", "CodeBleu_score": 47.04586674124588}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if (! $record) {\n        return;\n    }\n\n    if (! method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagModel = app(Tag::class);\n\n    $tagNames = collect($state)\n        ->filter(fn (string $value): bool => filled($value))\n        ->map(fn (string $value): string => trim($value))\n        ->all();\n\n    $tags = $tagModel::findOrCreate($tagNames);\n\n    $record->tags()->sync($tags->pluck('id')->all());\n}", "CodeBleu_score": 37.37400137514042}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if (!$record) {\n        return;\n    }\n\n    if (!method_exists($record, 'tags')) {\n        return;\n    }\n\n    // Get the tag model class\n    $tagModel = app(Tag::class);\n\n    // Process the provided tag names to find or create tags\n    $tagNames = collect($state)\n        ->map(function (string $name) use ($tagModel) {\n            return $tagModel::findOrCreate($name);\n        })\n        ->pluck('id');\n\n    // Sync the tags with the record by syncing their IDs\n    $record->tags()->sync($tagNames);\n}", "CodeBleu_score": 34.349737678578606}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, name, err := paths.DissectRepositoryPath(repoPath)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to dissect repository path: %w\", err)\n\t}\n\n\tscope := &authz.Scope{\n\t\tType: authz.ScopeType_REPOSITORY,\n\t\tId:   name,\n\t}\n\tresource := &authz.Resource{\n\t\tType: authz.ResourceType_PIPELINE,\n\t\tId:   pipelineIdentifier,\n\t}\n\n\tif err := authorizer.Check(ctx, session, scope, resource, permission); err != nil {\n\t\treturn fmt.Errorf(\"failed to check permission: %w\", err)\n\t}\n\treturn nil\n}", "CodeBleu_score": 62.51268002837198}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\n\tspacePath, repoName, err := paths.DissectRepoPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tscope := types.Scope{\n\t\tType: enum.Space,\n\t\tName: spacePath,\n\t}\n\tresource := types.Resource{\n\t\tType: enum.Pipeline,\n\t\tName: fmt.Sprintf(\"%s/%s\", repoName, pipelineIdentifier),\n\t}\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 63.344239888975586}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\n\tspacePath, repoName, err := paths.DissectRepoPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tscope := &types.Scope{\n\t\tSpacePath: spacePath,\n\t\tRepoName:  repoName,\n\t}\n\n\tresource := &types.Resource{\n\t\tType: enum.ResourceTypePipeline,\n\t\tID:   pipelineIdentifier,\n\t}\n\n\tif err := authorizer.Check(ctx, session, scope, resource, permission); err != nil {\n\t\treturn fmt.Errorf(\"you do not have permission to %s %s pipeline in %s\", permission, pipelineIdentifier, repoPath)\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 69.80105570408799}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tspacePath, err := paths.SpacePath(space.Name)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tscope, resource, err := paths.Split(spacePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif err := authorizer.Check(ctx, session, scope, resource, permission); err != nil {\n\t\treturn fmt.Errorf(\"failed to check permission for space %s: %w\", space.Name, err)\n\t}\n\treturn nil\n}", "CodeBleu_score": 55.10322495632938}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparent, name := paths.Split(space.Path)\n\tscope := authz.NewScope(parent, enum.SpaceScope)\n\tresource := authz.NewResource(name, enum.SpaceResource)\n\n\tif err := authorizer.Check(ctx, session, scope, resource, permission); err != nil {\n\t\treturn fmt.Errorf(\"failed to check permission: %w\", err)\n\t}\n\treturn nil\n}", "CodeBleu_score": 50.225808523219804}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparent, name := paths.Split(space.Path)\n\tscope := authz.Scope{\n\t\tType:      enum.Space,\n\t\tParent:    parent,\n\t\tName:      name,\n\t\tAccountID: space.AccountID,\n\t}\n\tresource := authz.Resource{\n\t\tType:      enum.Space,\n\t\tID:        space.ID,\n\t\tAccountID: space.AccountID,\n\t}\n\tif err := authorizer.Check(ctx, session, scope, resource, permission); err != nil {\n\t\treturn fmt.Errorf(\"failed to check space permission: %w\", err)\n\t}\n\treturn nil\n}", "CodeBleu_score": 60.27942223303779}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tb, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tsource = b\n\t}\n\tdec := json.NewDecoder(bytes.NewReader(source))\n\tdec.DisallowUnknownFields()\n\tif err := dec.Decode(&data); err != nil {\n\t\treturn nil, err\n\t}\n\tb, err := json.Marshal(data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn bytes.TrimSuffix(b, []byte(\"\n\")), nil\n}", "CodeBleu_score": 42.4901887288589}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource, _ = json.Marshal(data)\n\t}\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\tif err := decoder.Decode(data); err != nil {\n\t\treturn nil, err\n\t}\n\tresult, err := json.Marshal(data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn bytes.TrimRight(result, \"\n\"), nil\n}", "CodeBleu_score": 40.36010176187894}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tb, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tsource = b\n\t}\n\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\tif err := decoder.Decode(&data); err != nil {\n\t\treturn nil, err\n\t}\n\n\tb, err := json.Marshal(data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tb = bytes.TrimSuffix(b, []byte{'\n'})\n\n\treturn b, nil\n}", "CodeBleu_score": 53.594100688237255}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.getRepo(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif !session.HasPermission(repo.ID, reqPermission) {\n\t\treturn nil, usererror.New(\"You do not have the required permission to perform this action.\")\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 34.81958326163812}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference\n\trepoRef, err := git.ValidateRepoRef(repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Fetch the repository using the reference\n\trepo, err := c.store.GetRepositoryByRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the required permissions for the session on the repository\n\tif err := c.authorize(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 49.85792097131336}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\tif err := store.ValidateRepositoryRef(repoRef); err != nil {\n\t\treturn nil, err\n\t}\n\trepo, err := c.store.GetRepository(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif err := authz.CheckAccess(session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\treturn repo, nil\n}", "CodeBleu_score": 42.96436776615586}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tcheckSanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\tcheckSanitizers[enum.CheckPayloadKindEmpty] = SanitizeEmpty\n\tcheckSanitizers[enum.CheckPayloadKindRaw] = SanitizeRaw\n\tcheckSanitizers[enum.CheckPayloadKindMarkdown] = SanitizeRaw\n\tcheckSanitizers[enum.CheckPayloadKindPipeline] = SanitizePipeline\n\treturn checkSanitizers\n}", "CodeBleu_score": 42.87455777757635}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tcheckSanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\tcheckSanitizers[enum.CheckPayloadKindEmpty] = EmptySanitizer\n\tcheckSanitizers[enum.CheckPayloadKindRaw] = RawSanitizer\n\tcheckSanitizers[enum.CheckPayloadKindMarkdown] = MarkdownSanitizer\n\tcheckSanitizers[enum.CheckPayloadKindPipeline] = PipelineSanitizer\n\treturn checkSanitizers\n}", "CodeBleu_score": 43.098159489325255}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tsanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\tsanitizers[enum.CheckPayloadKindEmpty] = sanitizeEmpty\n\tsanitizers[enum.CheckPayloadKindRaw] = sanitizeRaw\n\tsanitizers[enum.CheckPayloadKindMarkdown] = sanitizeRaw\n\tsanitizers[enum.CheckPayloadKindPipeline] = sanitizePipeline\n\treturn sanitizers\n}", "CodeBleu_score": 40.84498842314937}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\t  self.state.on_render = on_render\n  if not self.state.attached then\n    self.renderer:attach_buffer(self)\n    self.state.attached = true\n  end\n  return self", "CodeBleu_score": 60.822838496295475}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t    local buffer = self\n    if not buffer.state.attached then\n        buffer.state.attached = true\n        buffer.state.renderer = on_render\n        buffer.state.renderer_instance = Renderer(on_render)\n        buffer.state.renderer_instance:attach(buffer)\n    end\n    return buffer", "CodeBleu_score": 50.26161804324975}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t    self.state.on_render = on_render\n    if not self.state.attached then\n        self.renderer:attach(self)\n        self.state.attached = true\n    end\n    return self", "CodeBleu_score": 61.56698652493191}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\t  if not self.valid then return end\n  local watcher = Watcher(self.filename)\n  watcher:on('change', function(e)\n    if not self.valid then return end\n    if callback then callback(e) end\n  end)\n  watcher:on('error', function(e)\n    log.error(e)\n  end)\n  watcher:start()\n  return watcher", "CodeBleu_score": 43.35540974165075}, {"code": "function Buffer:watch(callback)\n\t    if self.valid then\n        self.watcher = Watcher(self.filename, function(event)\n            if event.name == 'moved_to' then\n                self.filename = event.new_path\n            end\n            if callback then\n                callback(self)\n            end\n        end)\n    else\n        log.error('Buffer is not valid')\n    end", "CodeBleu_score": 42.02131106971804}, {"code": "function Buffer:watch(callback)\n\t  if not self:is_valid() then\n    return\n  end\n\n  if callback then\n    callback(self)\n  end\n\n  local watcher = Watcher.new(self.filename, function(err)\n    if err then\n      error(err)\n    end\n\n    if self:is_valid() then\n      callback(self)\n    end\n  end)\n\n  self.watcher = watcher", "CodeBleu_score": 49.57698478755903}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\t    if self.hex then return self.hex end\n    local spec = self.spec\n    local attr = self.attr\n    local hl_id = self.hl_id\n    local hl_name = self.hl_name\n    local hl_group = self.hl_group\n    local hex = nil\n\n    -- If the color is a hexadecimal string, return it as is\n    if type(spec) == 'string' then\n        if spec:match('^#') then\n            hex = spec\n        else\n            hex = vim.api.nvim_get_hl_by_name(hl_name, true).foreground\n        end\n    else\n        -- Otherwise, retrieve the color's specification and determine the relevant attribute\n        local color = Color:new(spec)\n        local fg = color.fg\n        local bg = color.bg\n        local blend = color.blend\n        local blend_amount = color.blend_amount\n\n        -- Attempt to get the highlight color using Neovim's API\n        if attr == 'fg' then\n            hex = vim.api.nvim_get_hl_by_name(hl_name, true).foreground\n        else\n            hex = vim.api.nvim_get_hl_by_name(hl_name, true).background\n        end\n    end\n\n    -- Convert the color to a hex string and cache it\n    if hex then\n        self.hex = hex\n    end\n\n    -- Return the hex value\n    return hex", "CodeBleu_score": 47.60026450292465}, {"code": "function Color:to_hex()\n\t    if self.hex then return self.hex end\n\n    local spec = self:get_spec()\n    local attr = spec.attr == 'fg' and 'foreground' or 'background'\n    local color = vim.api.nvim_get_hl_by_name(spec.name, {[attr] = true})\n    if not color then return end\n\n    self.hex = '#' .. bit.tohex(color.r) .. bit.tohex(color.g) .. bit.tohex(color.b)\n    return self.hex", "CodeBleu_score": 63.69916815890164}, {"code": "function Color:to_hex()\n\t    if self._hex then\n        return self._hex\n    end\n\n    local spec = self._spec\n    local attr = self._attr\n    local hl_name = spec.highlight\n    local hl_group = 'vgit_' .. hl_name\n\n    if vim.fn.hlexists(hl_group) == 1 then\n        local hl_color = vim.fn.synIDattr(vim.fn.hlID(hl_group), 'fg' .. attr)\n        self._hex = hl_color\n    else\n        local hl_color = vim.api.nvim_get_hl_by_name(hl_name, true)[attr]\n        self._hex = hl_color\n    end\n\n    return self._hex", "CodeBleu_score": 47.5844607553367}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t    local lines = vim.api.nvim_buf_get_lines(buffer, 0, -1, true)\n    for _, line in ipairs(lines) do\n        local start_pos = 0\n        while true do\n            local match_start, match_end = string.find(line, pattern, start_pos, true)\n            if not match_start then break end\n            local match = string.sub(line, match_start, match_end)\n            vim.api.nvim_buf_add_highlight(buffer, 0, hl, match_start - 1, match_end, 0)\n            start_pos = match_end + 1\n        end\n    end\n    return self", "CodeBleu_score": 49.71355094153465}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t    local lines = vim.api.nvim_buf_get_lines(buffer, 0, -1, false)\n    for i, line in ipairs(lines) do\n        local start_pos = 0\n        while true do\n            local match_start, match_end = string.find(line, pattern, start_pos, true)\n            if match_start then\n                local match = string.sub(line, match_start, match_end)\n                vim.api.nvim_buf_add_highlight(buffer, -1, hl, match_start - 1, match_end, 0)\n                start_pos = match_end + 1\n            else\n                break\n            end\n        end\n    end\n    return self", "CodeBleu_score": 48.19636962630878}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t    local lines = vim.api.nvim_buf_get_lines(buffer, 0, -1, false)\n    for i, line in ipairs(lines) do\n        local start_col, end_col = line:find(pattern)\n        if start_col then\n            vim.api.nvim_buf_add_highlight(buffer, ns, hl, i - 1, start_col - 1, end_col)\n        end\n    end\n    return ns", "CodeBleu_score": 45.57443436170999}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t    local id = row .. ':' .. col\n    local ns_id = vim.api.nvim_create_namespace('vgit')\n    local mark = vim.api.nvim_buf_set_extmark(buffer, ns_id, row, col, {\n        id = id,\n        virt_text = {\n            { text, hl }\n        },\n        virt_text_pos = pos,\n        priority = priority\n    })\n    return id", "CodeBleu_score": 66.9882362949422}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t    local id = vim.api.nvim_buf_get_mark(buffer, \"<\")\n    local id = id .. row .. col\n    local id_data = {id = id, buffer = buffer}\n    local ns = self\n    if ns.signs[id] then\n        ns.signs[id]:delete()\n    end\n    local sign = vim.fn.sign_define(hl, {text = text, texthl = hl})\n    ns.signs[id] = vim.fn.sign_place(id, buffer, sign, 'ov', {lnum = row, priority = priority})\n    return id", "CodeBleu_score": 43.86685106277485}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t    local id = vim.fn.bufnr(buffer) .. '_' .. row .. '_' .. col\n    vim.api.nvim_buf_set_extmark(vim.fn.bufnr(buffer), Namespace.signs.namespace, id, pos, row, col, {hl_group = hl, priority = priority})\n    vim.api.nvim_buf_set_virtual_text(vim.fn.bufnr(buffer), Namespace.signs.namespace, id, [[{text}]], {})\n    return id", "CodeBleu_score": 47.09341157735062}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\t    local line = ''\n    for i = 1, #output do\n        local c = output:sub(i, i)\n        if c == '", "CodeBleu_score": 20.695137962999784}, {"code": "function Spawn:parse_result(output, callback)\n\t    local line = \"\"\n    local result = \"\"\n    for _, char in ipairs(output) do\n        if char == \"", "CodeBleu_score": 10.199395982281963}, {"code": "function Spawn:parse_result(output, callback)\n\t    local line = \"\"\n    for i = 1, #output do\n        local c = output:sub(i, i)\n        if c == \"", "CodeBleu_score": 20.667589735611084}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t    if self.watchers[path] then\n        return self.watchers[path]\n    end\n\n    local watcher = vim.loop.new_fs_event()\n    watcher:start(path, {}, vim.schedule_wrap(handler))\n\n    self.watchers[path] = watcher\n    return watcher", "CodeBleu_score": 49.818830110723795}, {"code": "function Watcher:watch_file(path, handler)\n\t    local watcher = self:get_watcher(path)\n    if watcher then\n        return watcher\n    end\n\n    watcher = {\n        path = path,\n        handler = handler,\n        watcher = loop.new_fs_event(),\n    }\n    watcher.watcher:start(path, {}, function(err, _, name)\n        if not err then\n            watcher.handler(name)\n        end\n    end)\n\n    self.watchers[path] = watcher\n    return watcher", "CodeBleu_score": 41.72096159249625}, {"code": "function Watcher:watch_file(path, handler)\n\t    local watcher = Watcher:get_watcher(path)\n    if watcher then return watcher end\n    local loop = vim.loop\n    local watcher = loop.new_fs_event()\n    watcher:start(path, {}, function(err, name, events, status)\n        if err then\n            vim.notify(err, vim.log.levels.ERROR)\n            return\n        end\n        if events then\n            handler(name, events, status)\n        end\n    end)\n    Watcher.watchers[path] = watcher\n    return watcher", "CodeBleu_score": 41.01222685438698}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t    local buf = self.buf\n    local bufnr = self.bufnr\n    local git = self.git\n    local git_buf = vim.api.nvim_buf_get_lines(bufnr, 0, -1, false)\n    local hunks = git:live_hunks(git_buf)\n    if hunks == nil then\n        return hunks\n    end\n\n    local signs = {}\n    for _, hunk in ipairs(hunks) do\n        for _, line in ipairs(hunk.lines) do\n            local sign = {\n                bufnr = bufnr,\n                lnum = line.line,\n                priority = line.type == 'add' and 10 or 100,\n                name = signs[line.type],\n                id = self.id,\n            }\n            table.insert(signs, sign)\n        end\n    end\n    vim.fn.sign_define(signs)\n    vim.fn.sign_place(0, bufnr, 'GitSign', bufnr, {})\n    return hunks", "CodeBleu_score": 46.36777861445401}, {"code": "function GitBuffer:live_hunks()\n\t    local lines = self:buffer_lines()\n    local hunks = self.git_object:hunks()\n    if hunks == nil then\n        return hunks\n    end\n\n    for _, hunk in ipairs(hunks) do\n        local start_line = hunk.start_line\n        local end_line = hunk.end_line\n        local lines_in_hunk = end_line - start_line + 1\n        for i = 0, lines_in_hunk do\n            local line = lines[start_line + i]\n            local sign = Signs.signs[hunk.type]\n            if sign ~= nil then\n                line:sign(sign.icon, sign.priority)\n            end\n        end\n    end\n\n    self:update_signs()\n    return hunks", "CodeBleu_score": 37.40804921566371}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal lines = self.buffer:get_lines()\n\tlocal hunks = self.git_object:hunks(lines)\n\n\tif hunks == nil then\n\t\treturn hunks\n\tend\n\n\tself.buffer:clear_signs()\n\n\tfor _, hunk in ipairs(hunks) do\n\t\tfor _, line in ipairs(hunk.lines) do\n\t\t\tlocal sign_type = hunk.type == 'add' and 'GitAdd' or hunk.type == 'del' and 'GitDel' or 'GitChange'\n\t\t\tlocal priority = hunk.type == 'add' and 10 or hunk.type == 'del' and 10 or 5\n\t\t\tself.buffer:add_sign(line, sign_type, priority)\n\t\tend\n\tend\n\n\tself.buffer:update_signs()\n\n\treturn hunks", "CodeBleu_score": 33.66332183491625}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\t    local patch_content = patch:get_content()\n    local tmp_file = os.tmpname()\n    local f = io.open(tmp_file, \"w\")\n    f:write(patch_content)\n    f:close()\n\n    local cmd = string.format(\"git add -p %s\", tmp_file)\n    local res = self:run_command(cmd)\n    os.remove(tmp_file)\n    return res", "CodeBleu_score": 52.21355033564713}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t    local temp_file = os.tmpname()\n    local file, err = io.open(temp_file, \"w\")\n    if not file then\n        return nil, err\n    end\n    file:write(patch.content)\n    file:close()\n\n    local _, err = self:stage_hunk(patch.file_name, patch.hunk.start_line, temp_file)\n    os.remove(temp_file)\n\n    return nil, err", "CodeBleu_score": 45.302061270519815}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t    local file = vgit.core.utils.create_temp_file()\n    file:write(patch.content)\n    file:close()\n    local err = self:stage_hunk(patch.hunk, file.name)\n    os.remove(file.name)\n    return err", "CodeBleu_score": 35.39013297916673}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    OAuthRequest request = new OAuthRequest(this.api.getAccessTokenVerb(), this.api.getAccessTokenEndpoint());\n    request.addHeader(OAuthConstants.HEADER, this.api.getApiKey() + \":\" + this.api.getApiSecret());\n    request.addBodyParameter(OAuthConstants.CLIENT_ID, this.config.getApiKey());\n    request.addBodyParameter(OAuthConstants.CLIENT_SECRET, this.config.getApiSecret());\n    request.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n    request.addBodyParameter(OAuthConstants.REDIRECT_URI, this.config.getCallback());\n    request.addBodyParameter(\"grant_type\", \"authorization_code\");\n    Response response = request.send();\n    return this.api.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 54.329760760157995}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    OAuthRequest request = new OAuthRequest(this.api.getAccessTokenVerb(), this.api.getAccessTokenEndpoint());\n    request.addHeader(OAuthConstants.HEADER, this.api.getRequestTokenHeader(this.config));\n    request.addBodyParameter(OAuthConstants.CLIENT_ID, this.config.getApiKey());\n    request.addBodyParameter(OAuthConstants.CLIENT_SECRET, this.config.getApiSecret());\n    request.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n    request.addBodyParameter(OAuthConstants.REDIRECT_URI, this.config.getCallback());\n    request.addBodyParameter(OAuthConstants.GRANT_TYPE, OAuthConstants.AUTHORIZATION_CODE);\n    Response response = request.send();\n    return this.api.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 54.43305281342299}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    OAuthRequest request = new OAuthRequest(this.api.getAccessTokenVerb(), this.api.getAccessTokenEndpoint());\n    this.addOAuthParams(request, requestToken);\n    request.addBodyParameter(OAuthConstants.CLIENT_ID, this.config.getApiKey());\n    request.addBodyParameter(OAuthConstants.CLIENT_SECRET, this.config.getApiSecret());\n    request.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n    request.addBodyParameter(\"grant_type\", \"authorization_code\");\n    request.addBodyParameter(\"redirect_uri\", this.config.getCallback());\n    Response response = request.send();\n    return this.api.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 55.497730580592176}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    if (credentials instanceof StandardUsernamePasswordCredentials) {\n        StandardUsernamePasswordCredentials upc = (StandardUsernamePasswordCredentials) credentials;\n        CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n        credentialsProvider.setCredentials(new AuthScope(host), new UsernamePasswordCredentials(upc.getUsername(), upc.getPassword().getPlainText()));\n        AuthCache authCache = new BasicAuthCache();\n        authCache.put(host, new BasicScheme());\n        context.setCredentialsProvider(credentialsProvider);\n        context.setAuthCache(authCache);\n        LOGGER.log(Level.FINE, \"Added {0} to auth cache\", host);\n    } else if (credentials instanceof StandardUsernameCredentials) {\n        StandardUsernameCredentials uc = (StandardUsernameCredentials) credentials;\n        CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n        credentialsProvider.setCredentials(new AuthScope(host), new UsernamePasswordCredentials(uc.getUsername(), uc.getPassword().getPlainText()));\n        AuthCache authCache = new BasicAuthCache();\n        authCache.put(host, new BasicScheme());\n        context.setCredentialsProvider(credentialsProvider);\n        context.setAuthCache(authCache);\n        LOGGER.log(Level.FINE, \"Added {0} to auth cache\", host);\n    } else if (credentials instanceof BitbucketAuthenticator) {\n        BitbucketAuthenticator ba = (BitbucketAuthenticator) credentials;\n        CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n        credentialsProvider.setCredentials(new AuthScope(host), new UsernamePasswordCredentials(ba.getUsername(), ba.getPassword().getPlainText()));\n        AuthCache authCache = new BasicAuthCache();\n        authCache.put(host, new BasicScheme());\n        context.setCredentialsProvider(credentialsProvider);\n        context.setAuthCache(authCache);\n        LOGGER.log(Level.FINE, \"Added {0} to auth cache\", host);\n    } else if (credentials instanceof UsernamePasswordCredentialsImpl) {\n        UsernamePasswordCredentials", "CodeBleu_score": 55.992283751981056}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n    credentialsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), new UsernamePasswordCredentials(credentials.getUsername(), credentials.getPassword().getPlainText()));\n    AuthCache authCache = new BasicAuthCache();\n    authCache.put(host, new BasicScheme());\n    context.setCredentialsProvider(credentialsProvider);\n    context.setAuthCache(authCache);\n    LOGGER.log(Level.FINE, \"Adding {0} to auth cache\", host);\n}", "CodeBleu_score": 75.67002427640513}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    CredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(new AuthScope(host), new UsernamePasswordCredentials(username, password));\n    AuthCache authCache = new BasicAuthCache();\n    authCache.put(host, new BasicScheme());\n    context.setCredentialsProvider(credsProvider);\n    context.setAuthCache(authCache);\n    LOGGER.log(Level.FINE, \"Added {0} to auth cache\", host);\n}", "CodeBleu_score": 72.70915550961283}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    AvatarCache cache = AvatarCache.get();\n    if (cache == null) {\n        throw new IllegalStateException(\"No avatar cache extension found\");\n    }\n    String cacheKey = cache.getCacheKey(source);\n    cache.seedCache(cacheKey, source);\n    try {\n        return Jenkins.get().getRootUrl() + \"/avatar/\" + URLEncoder.encode(cacheKey, StandardCharsets.UTF_8.name()) + \"?s=\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding is unsupported\", e);\n    }\n}", "CodeBleu_score": 43.6098341239197}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    AvatarCache cache = AvatarCache.get();\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache extension is not available\");\n    }\n    String cacheKey = generateCacheKey(source);\n    cache.seed(cacheKey, source);\n    String encodedKey = encodeCacheKey(cacheKey);\n    return Jenkins.get().getRootUrl() + \"/avatar/\" + encodedKey + \"/\" + size;\n}", "CodeBleu_score": 29.288480406833816}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    AvatarCache cache = AvatarCache.get();\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache is not installed\");\n    }\n    String cacheKey = generateCacheKey(source, size);\n    cache.seed(cacheKey, source);\n    String url = Jenkins.get().getRootUrl() + \"avatar/\" + URLEncoder.encode(cacheKey, StandardCharsets.UTF_8.name()) + \"?s=\" + size;\n    return url;\n}", "CodeBleu_score": 42.555025993308526}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    this.image = image;\n    if (image.getWidth() > 128 || image.getHeight() > 128) {\n        this.image = scaleImage(image, 128, 128);\n    }\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 64.96297264922927}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n    if (image.getWidth() > 128 || image.getHeight() > 128) {\n        image = scaleImage(image, 128, 128);\n    }\n    this.image = image;\n}", "CodeBleu_score": 62.409512527721034}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n    if (image.getWidth() > 128 || image.getHeight() > 128) {\n        BufferedImage scaled = new BufferedImage(128, 128, image.getType());\n        Graphics2D g = scaled.createGraphics();\n        g.setRenderingHint(KEY_INTERPOLATION, VALUE_INTERPOLATION_BICUBIC);\n        g.setRenderingHint(KEY_ALPHA_INTERPOLATION, VALUE_ALPHA_INTERPOLATION_QUALITY);\n        g.drawImage(image, 0, 0, 128, 128, null);\n        g.dispose();\n        this.image = scaled;\n    } else {\n        this.image = image;\n    }\n}", "CodeBleu_score": 56.330968580808126}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    try {\n        if (future.isDone()) {\n            image = future.get();\n            lastModified = System.currentTimeMillis();\n            future = null;\n            return false;\n        }\n    } catch (InterruptedException | ExecutionException e) {\n        return true;\n    }\n    return true;\n}", "CodeBleu_score": 47.065530906179994}, {"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    try {\n        if (future.isDone()) {\n            AvatarImage avatarImage = future.get();\n            if (avatarImage != null) {\n                image = avatarImage.getImage();\n                lastModified = avatarImage.getLastModified();\n            }\n            future = null;\n        }\n        return false;\n    } catch (InterruptedException | ExecutionException e) {\n        LOGGER.log(Level.WARNING, \"Failed to retrieve avatar image\", e);\n        future = null;\n        return true;\n    }\n}", "CodeBleu_score": 63.08591155101597}, {"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    if (future.isDone()) {\n        try {\n            AvatarImage avatarImage = future.get();\n            image = avatarImage.image;\n            lastModified = avatarImage.lastModified;\n            future = null;\n            return false;\n        } catch (InterruptedException | ExecutionException e) {\n            Jenkins.get().getLogger().log(java.util.logging.Level.WARNING, \"Failed to retrieve avatar image\", e);\n            return true;\n        }\n    }\n    return true;\n}", "CodeBleu_score": 62.01383125732603}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t        rsp.setContentType(\"image/png\");\n        rsp.setHeader(\"Cache-Control\", \"max-age=3600, public\");\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        ImageIO.write(image, \"PNG\", baos);\n        baos.flush();\n        rsp.getOutputStream().write(baos.toByteArray());\n    }", "CodeBleu_score": 33.34283922738412}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t    rsp.setHeader(\"Cache-Control\", \"public, max-age=31536000\");\n    rsp.setHeader(\"Content-Type\", \"image/png\");\n    rsp.setHeader(\"Expires\", \"Thu, 31 Dec 2037 23:55:55 GMT\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    ImageIO.write(image, \"png\", baos);\n    if (req.getParameter(\"flush\") != null) {\n        baos.flush();\n    }\n    rsp.serveFile(req, baos.toByteArray(), 0, baos.size(), \"image/png\");\n}", "CodeBleu_score": 36.72774390388127}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t        if (node == null) {\n            rsp.sendError(HttpServletResponse.SC_NOT_FOUND);\n            return;\n        }\n\n        final String hash = getHash(node);\n        final String etag = \"\\\"\" + hash + \"\\\"\";\n        final long lastModified = getLastModified(node);\n\n        if (req.checkIfModifiedSince(lastModified)) {\n            rsp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n            return;\n        }\n\n        final int w = req.getIntParam(\"s\", 32);\n        final int h = req.getIntParam(\"s\", 32);\n\n        final BufferedImage image = getImage(node, w, h);\n        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        ImageIO.write(image, \"png\", baos);\n        baos.flush();\n\n        rsp.setHeader(\"Cache-Control\", \"public, max-age=31536000\");\n        rsp.setHeader(\"ETag\", etag);\n        rsp.setDateHeader(\"Last-Modified\", lastModified);\n        rsp.setContentType(\"image/png\");\n        rsp.setContentLength(baos.size());\n        baos.writeTo(rsp.getOutputStream());\n    }", "CodeBleu_score": 43.88999675971125}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t        this.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n\n        if (enableCache) {\n            teamCache = new Cache<BitbucketTeam>(teamCacheDuration, HOURS);\n            repositoriesCache = new Cache<BitbucketRepository>(repositoriesCacheDuration, HOURS);\n            pullRequestsCache = new Cache<BitbucketPullRequest>(repositoriesCacheDuration, HOURS);\n            commitCache = new Cache<BitbucketCommit>(repositoriesCacheDuration, HOURS);\n            webhookCache = new Cache<BitbucketWebHook>(repositoriesCacheDuration, HOURS);\n        }\n\n        RequestConfig requestConfig = RequestConfig.custom()\n                .setConnectTimeout((int) MINUTES.toMillis(1))\n                .setConnectionRequestTimeout((int) MINUTES.toMillis(1))\n                .setSocketTimeout((int) MINUTES.toMillis(1))\n                .build();\n\n        SocketConfig socketConfig = SocketConfig.custom()\n                .setSoKeepAlive(true)\n                .setTcpNoDelay(true)\n                .build();\n\n        PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager();\n        connectionManager.setMaxTotal(20);\n        connectionManager.setDefaultMaxPerRoute(20);\n        connectionManager.setDefaultSocketConfig(socketConfig);\n\n        HttpClientBuilder builder = HttpClientBuilder.create()\n                .setDefaultRequestConfig(requestConfig)\n                .setConnectionManager(connectionManager)\n                .setRetryHandler(new StandardHttpRequestRetryHandler(3, true))\n                .setKeepAliveStrategy((response, context) -> MILLISECONDS.toMillis(MINUTES.toMillis(1)));\n\n        if (authenticator != null) {\n            CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n            credentialsProvider", "CodeBleu_score": 40.40487155388963}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t        this.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n        this.client = configureClient();\n        this.context = configureContext();\n    }", "CodeBleu_score": 25.932341552630415}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t        this.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n\n        if (enableCache) {\n            teamCache = CacheBuilder.newBuilder()\n                    .expireAfterWrite(teamCacheDuration, HOURS)\n                    .build();\n\n            repositoriesCache = CacheBuilder.newBuilder()\n                    .expireAfterWrite(repositoriesCacheDuration, HOURS)\n                    .build();\n        }\n\n        RequestConfig requestConfig = RequestConfig.custom()\n                .setConnectionRequestTimeout((int) MINUTES.toMillis(1))\n                .setConnectTimeout((int) MINUTES.toMillis(1))\n                .setSocketTimeout((int) MINUTES.toMillis(1))\n                .build();\n\n        PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager();\n        connectionManager.setMaxTotal(100);\n        connectionManager.setDefaultMaxPerRoute(100);\n        connectionManager.setDefaultSocketConfig(SocketConfig.custom()\n                .setSoKeepAlive(true)\n                .setTcpNoDelay(true)\n                .build());\n\n        HttpClientBuilder httpClientBuilder = HttpClientBuilder.create()\n                .setRetryHandler(new StandardHttpRequestRetryHandler(3, true))\n                .setConnectionManager(connectionManager)\n                .setDefaultRequestConfig(requestConfig);\n\n        if (authenticator != null) {\n            CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n            credentialsProvider.setCredentials(\n                    new AuthScope(AuthScope.ANY_HOST, AuthScope.ANY_PORT),\n                    new UsernamePasswordCredentials(authenticator.getUsername(), authenticator.getPassword()));\n\n            httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider);\n\n            AuthCache authCache = new BasicAuthCache();\n            authCache.put(new HttpHost(BITBUCKET_CLOUD_API", "CodeBleu_score": 41.174618276716515}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    BitbucketCloudBranch sourceBranch = pullRequest.getSource().getBranch();\n    if (sourceBranch != null) {\n        sourceBranch.setCommitClosure(new CommitClosure(sourceBranch.getRaw().getNode()));\n    }\n\n    BitbucketCloudBranch destinationBranch = pullRequest.getDestination().getBranch();\n    if (destinationBranch != null) {\n        destinationBranch.setCommitClosure(new CommitClosure(destinationBranch.getRaw().getNode()));\n    }\n}", "CodeBleu_score": 46.218214930085864}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    BitbucketCloudBranch sourceBranch = pullRequest.getSource().getBranch();\n    if (sourceBranch != null) {\n        String sourceBranchNode = sourceBranch.getRaw().getNode();\n        if (sourceBranchNode != null) {\n            CommitClosure sourceBranchClosure = new CommitClosure(sourceBranchNode);\n            sourceBranchClosure.setCommit(sourceBranch.getLatestCommit());\n            sourceBranchClosure.setBranch(sourceBranch);\n            sourceBranchClosure.setPullRequest(pullRequest);\n            sourceBranchClosure.setRepository(pullRequest.getRepository());\n            sourceBranchClosure.setWorkspace(pullRequest.getRepository().getWorkspace());\n            sourceBranchClosure.setSourceBranch(sourceBranch);\n            sourceBranchClosure.setDestinationBranch(pullRequest.getDestination().getBranch());\n            sourceBranchClosure.setBuild(null);\n            sourceBranchClosure.setBuildResult(null);\n            sourceBranchClosure.setBuildStatus(null);\n            sourceBranchClosure.setBuildStatusUrl(null);\n            sourceBranchClosure.setBuildUrl(null);\n            sourceBranchClosure.setBuildStatusUrl(null);\n            sourceBranchClosure.setBuildUrl(null);\n            sourceBranchClosure.setBuildStatusUrl(null);\n            sourceBranchClosure.setBuildUrl(null);\n            sourceBranchClosure.setBuildStatusUrl(null);\n            sourceBranchClosure.setBuildUrl(null);\n            sourceBranchClosure.setBuildStatusUrl(null);\n            sourceBranchClosure.setBuildUrl(null);\n            sourceBranchClosure.setBuildStatusUrl(null);\n            sourceBranchClosure.setBuildUrl(null);\n            sourceBranchClosure.setBuildStatusUrl(null);\n            sourceBranchClosure.setBuildUrl(null);\n            sourceBranchClosure.setBuildStatusUrl(null);\n            sourceBranch", "CodeBleu_score": 32.2223207911347}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    BitbucketCloudBranch sourceBranch = pullRequest.getSource().getBranch();\n    if (sourceBranch != null) {\n        pullRequest.setSourceCommitClosure(new CommitClosure(sourceBranch.getRaw()));\n    }\n\n    BitbucketCloudBranch destinationBranch = pullRequest.getDestination().getBranch();\n    if (destinationBranch != null) {\n        pullRequest.setDestinationCommitClosure(new CommitClosure(destinationBranch.getRaw()));\n    }\n}", "CodeBleu_score": 51.51402796557796}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration jlc = JenkinsLocationConfiguration.get();\n    URL url = jlc.getUrl();\n    if (url == null) {\n        throw new IllegalStateException(\"Jenkins location configuration is not set\");\n    }\n    return DisplayURLProvider.get().getRunURL(build);\n}", "CodeBleu_score": 61.21965143907888}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration config = JenkinsLocationConfiguration.get();\n    URL url = config.getUrl();\n    if (config == null || url == null) {\n        throw new IllegalStateException(\"Jenkins location configuration is not set\");\n    }\n    return DisplayURLProvider.get().getRunURL(build);\n}", "CodeBleu_score": 61.562499639800464}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration locationConfig = JenkinsLocationConfiguration.get();\n    URL url = locationConfig.getUrl();\n    if (url == null) {\n        throw new IllegalStateException(\"Jenkins URL is not configured\");\n    }\n    return DisplayURLProvider.get().getRunURL(build);\n}", "CodeBleu_score": 60.79204289883662}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    URL parsedUrl;\n    try {\n        parsedUrl = new URL(url);\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"URL \" + url + \" is malformed\", e);\n    }\n\n    if (StringUtils.isEmpty(parsedUrl.getHost())) {\n        throw new IllegalStateException(\"URL \" + url + \" does not have a host\");\n    }\n\n    if (parsedUrl.getHost().equals(\"localhost\") || parsedUrl.getHost().equals(\"unconfigured-jenkins-location\")) {\n        throw new IllegalStateException(\"URL \" + url + \" does not have a fully qualified host\");\n    }\n\n    if (bitbucket instanceof BitbucketCloudApiClient && !parsedUrl.getHost().contains(\".\")) {\n        throw new IllegalStateException(\"URL \" + url + \" does not have a fully qualified host\");\n    }\n\n    return url;\n}", "CodeBleu_score": 59.28937489835244}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    try {\n        URL u = new URL(url);\n        if (u.getHost().contains(\"localhost\") || u.getHost().contains(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"Jenkins URL should not use localhost or unconfigured-jenkins-location\");\n        }\n        if (bitbucket instanceof BitbucketCloudApiClient) {\n            if (u.getHost().contains(\"bitbucket.org\")) {\n                throw new IllegalStateException(\"Bitbucket Cloud API clients should not use bitbucket.org as the host\");\n            }\n        }\n        return url;\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"Malformed Jenkins URL: \" + url);\n    }\n}", "CodeBleu_score": 68.54548972792142}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    try {\n        URL parsedUrl = new URL(url);\n        String host = parsedUrl.getHost();\n        if (StringUtils.isBlank(host) || host.equals(\"localhost\") || host.equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"Jenkins URL must be fully qualified and not use localhost or unconfigured-jenkins-location\");\n        }\n        if (bitbucket instanceof BitbucketCloudApiClient) {\n            if (host.equals(\"bitbucket.org\")) {\n                throw new IllegalStateException(\"Jenkins URL must be fully qualified for Bitbucket Cloud\");\n            }\n        }\n        return url;\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"Jenkins URL is malformed\", e);\n    }\n}", "CodeBleu_score": 61.37067130946754}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\n        BitbucketSCMContext context = source.getContext();\n        if (context.isNotificationsDisabled()) {\n            listener.getLogger().println(\"Notifications disabled\");\n            return;\n        }\n\n        SCMRevision revision = SCMRevision.fromBuild(build);\n        String revisionHash = revision.getHash();\n\n        boolean shareBuildKey = false;\n        if (revision instanceof SCMRevisionAction) {\n            SCMRevisionAction action = (SCMRevisionAction) revision;\n            shareBuildKey = action.getOrigin() == SCMHeadObserver.ChangeOrigin.BRANCH;\n        }\n\n        String buildKey = shareBuildKey ? revisionHash : build.getNumber() + \".\" + revisionHash;\n\n        BitbucketApi bitbucketApi = new BitbucketCloudApiClient(context.getCredentialsId(), context.getApiUri(), context.getApiVersion());\n\n        listener.getLogger().println(\"Sending build notification\");\n        BitbucketBuildStatus buildStatus = new BitbucketBuildStatus(buildKey, getBuildStatus(build), getBuildUrl(build), build.getFullDisplayName());\n        bitbucketApi.sendBuildStatus(context.getProject(), context.getRepository(), buildStatus);\n    }", "CodeBleu_score": 41.11586480626714}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t        BitbucketBuildStatus.NotificationType notificationType = getNotificationType(source, build);\n        if (notificationType == BitbucketBuildStatus.NotificationType.NONE) {\n            return;\n        }\n\n        SCMRevision revision = SCMRevision.HEAD;\n        String revisionHash = null;\n        if (notificationType == BitbucketBuildStatus.NotificationType.BRANCH) {\n            revision = SCMRevision.HEAD;\n            revisionHash = getRevisionHash(build, listener, source.getSCM());\n        } else if (notificationType == BitbucketBuildStatus.NotificationType.PR) {\n            revision = build.getAction(SCMRevisionAction.class).getRevision();\n            revisionHash = revision.getSha1String();\n        }\n\n        String buildKey = getBuildKey(notificationType, source, revisionHash);\n        BitbucketApi client = getClient(source, listener);\n        sendBuildStatusNotification(notificationType, source, build, client, buildKey, revisionHash, listener);\n    }", "CodeBleu_score": 33.34320317178765}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t        BitbucketBuildStatusNotificationContext context = new BitbucketBuildStatusNotificationContext(source, build, listener);\n        if (context.isNotificationsDisabled()) {\n            listener.getLogger().println(\"Notifications are disabled, skipping\");\n            return;\n        }\n        SCMRevision revision = context.getRevision();\n        String revisionHash = revision.getHash();\n        if (revisionHash == null) {\n            listener.getLogger().println(\"No revision hash, skipping\");\n            return;\n        }\n        String notificationType = context.getNotificationType();\n        String buildKey = context.getBuildKey();\n        BitbucketApi client = context.getClient();\n        listener.getLogger().println(String.format(\"Sending %s notification for %s\", notificationType, buildKey));\n        BitbucketBuildStatus status = new BitbucketBuildStatus(buildKey, notificationType, build.getDisplayName(), build.getAbsoluteUrl(),\n                build.getResult().equals(Result.SUCCESS) ? BitbucketBuildStatus.SUCCESSFUL : BitbucketBuildStatus.FAILED);\n        client.buildStatus(status);\n    }", "CodeBleu_score": 38.21657396305776}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String jobName = build.getParent().getFullName();\n    if (shareBuildKeyBetweenBranchAndPR) {\n        return jobName + \"-\" + branch;\n    } else {\n        return jobName;\n    }\n}", "CodeBleu_score": 35.54868455502805}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String key = shareBuildKeyBetweenBranchAndPR ? build.getParent().getFullName() + \"-\" + branch : build.getFullDisplayName();\n    return key;\n}", "CodeBleu_score": 32.417527566279226}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t        String key = shareBuildKeyBetweenBranchAndPR ? String.format(\"%s-%s\", build.getParent().getFullName(), branch)\n                : build.getFullDisplayName();\n        return key;\n    }", "CodeBleu_score": 39.49267015075013}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (server == null) {\n        LOGGER.log(Level.WARNING, \"BitbucketSCMNavigator was serialized without server URL. \"\n                + \"This should not happen. Please report this to the plugin maintainers.\");\n        server = BitbucketEndpointConfiguration.get().getServer(null);\n    }\n    if (traits == null) {\n        LOGGER.log(Level.WARNING, \"BitbucketSCMNavigator was serialized without traits. \"\n                + \"This should not happen. Please report this to the plugin maintainers.\");\n        traits = new NamedArrayList<>();\n        traits.add(new Selection(new WildcardSCMHeadFilterTrait()));\n        traits.add(new Selection(new RegexSCMSourceFilterTrait()));\n        traits.add(new Selection(new Discovery(false)));\n        traits.add(new Selection(new ChangeRequestCheckoutStrategy()));\n    }\n    return this;\n}", "CodeBleu_score": 25.455489357796463}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (server == null) {\n        server = BitbucketEndpointConfiguration.get().getServer(owner);\n    }\n    if (server == null) {\n        LOGGER.log(Level.WARNING, \"No server configured for {0}\", owner);\n    }\n    if (traits == null) {\n        traits = new ArrayList<>();\n        if (credentialsId != null) {\n            traits.add(new CredentialsSCMNavigatorTrait(credentialsId));\n        }\n        if (filter != null) {\n            traits.add(new RegexSCMSourceFilterTrait(filter));\n        }\n        if (filterHeads != null) {\n            traits.add(new WildcardSCMHeadFilterTrait(filterHeads));\n        }\n        if (filterTags != null) {\n            traits.add(new WildcardSCMHeadFilterTrait(filterTags));\n        }\n        if (filterPRs != null) {\n            traits.add(new WildcardSCMHeadFilterTrait(filterPRs));\n        }\n        if (filterBranches != null) {\n            traits.add(new WildcardSCMHeadFilterTrait(filterBranches));\n        }\n        if (filterForkPRs != null) {\n            traits.add(new WildcardSCMHeadFilterTrait(filterForkPRs));\n        }\n        if (filterOriginPRs != null) {\n            traits.add(new WildcardSCMHeadFilterTrait(filterOriginPRs));\n        }\n        if (filterMergePRs != null) {\n            traits.add(new WildcardSCMHeadFilterTrait(filterMergePRs));\n        }\n        if (filterSources != null) {\n            traits.add(new RegexSCMSourceFilterTrait(filterSources));\n        }\n        if (filterAuthor != null) {\n            traits.add(new RegexSCMSourceFilterTrait(filterAuthor));\n        }\n        if (filterCommitter != null) {\n            traits.add(new RegexSCMSourceFilterTrait(filterCommitter));\n        }\n        if (filter", "CodeBleu_score": 43.934808095416955}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        serverUrl = BitbucketEndpointConfiguration.get().getServerUrl();\n        if (serverUrl == null) {\n            LOGGER.log(Level.WARNING, \"BitbucketSCMNavigator.serverUrl is null. This is not a problem if you are using Bitbucket Cloud. Otherwise, you may need to specify the server URL in the Bitbucket Endpoint configuration.\");\n        }\n    }\n    if (traits == null) {\n        traits = new ArrayList<>();\n        traits.add(new RegexSCMSourceFilterTrait(getNameRegex()));\n        traits.add(new WildcardSCMHeadFilterTrait(getHeadRegex()));\n        traits.add(new Discovery());\n    }\n    return this;\n}", "CodeBleu_score": 24.85454502441232}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\t    getFromBitbucket(api, () -> api.getRepository(name), \"repository \" + name, log);\n    if (isMatch) {\n        log.printf(\"Proposed repository %s%n\", name);\n        count++;\n    } else {\n        log.printf(\"Ignored repository %s%n\", name);\n    }\n}", "CodeBleu_score": 34.64430452087089}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t    if (isMatch) {\n        BitbucketRepository repository = getFromBitbucket(name, BitbucketRepository.class);\n        if (repository == null) {\n            LOGGER.log(Level.WARNING, \"Repository {0} is proposed but not found\", name);\n        } else {\n            LOGGER.log(Level.FINE, \"Repository {0} is proposed\", name);\n            count++;\n        }\n    } else {\n        LOGGER.log(Level.FINE, \"Repository {0} is ignored\", name);\n    }\n}", "CodeBleu_score": 42.012800395271654}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t    BitbucketRepository repository = getFromBitbucket(name, BitbucketRepository.class);\n    if (isMatch) {\n        LOGGER.log(Level.FINE, \"Proposed repository {0}\", repository);\n        count++;\n    } else {\n        LOGGER.log(Level.FINE, \"Ignored repository {0}\", repository);\n    }\n}", "CodeBleu_score": 48.38844977740456}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t\n    // Get the clone link from the GitSCMExtension\n    List<GitSCMExtension> extensions = scm.getExtensions();\n    String cloneLink = extensions.stream()\n            .filter(e -> e instanceof GitSCMExtension)\n            .map(e -> (GitSCMExtension) e)\n            .map(GitSCMExtension::getCloneLink)\n            .findFirst()\n            .orElse(null);\n\n    // Check if the revision has a hash and if it doesn't exist locally\n    if (rev.getHash() != null && !rev.existsLocally(build, listener)) {\n        // Create a RefSpec for the branch with the missing commit\n        RefSpec refSpec = new RefSpec(rev.getBranch() + \":\" + rev.getBranch());\n\n        // Fetch the missing commit from the remote repository\n        try {\n            URIish uri = new URIish(cloneLink);\n            FetchCommand fetchCommand = git.fetch()\n                    .setRemote(uri.getHost())\n                    .setRefSpecs(refSpec)\n                    .setCredentialsId(scm.getUserRemoteConfigs().get(0).getCredentialsId())\n                    .setTimeout(scm.getGitTool().getTimeout());\n\n            git.run(fetchCommand);\n        } catch (URISyntaxException e) {\n            throw new GitException(\"Failed to parse clone link\", e);\n        }\n    }\n\n    return rev;\n}", "CodeBleu_score": 49.2879608692}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t\n    // Get the clone link from the GitSCM\n    String cloneLink = scm.getUserRemoteConfigs().get(0).getUrl();\n\n    // Get the list of branches and their hashes\n    List<BranchWithHash> branchesWithHashes = scm.getBranches().stream()\n            .map(branch -> new BranchWithHash(branch.getName(), branch.getSHA1()))\n            .collect(Collectors.toList());\n\n    // Filter the branches with hashes to find those whose commits don't exist locally\n    List<BranchWithHash> missingBranches = branchesWithHashes.stream()\n            .filter(branchWithHash -> !git.revParse(branchWithHash.getHash()).equals(branchWithHash.getHash()))\n            .collect(Collectors.toList());\n\n    // Create RefSpecs for the missing branches\n    List<RefSpec> refSpecs = missingBranches.stream()\n            .map(branchWithHash -> new RefSpec(\"+refs/heads/\" + branchWithHash.getName() + \":\" + branchWithHash.getHash()))\n            .collect(Collectors.toList());\n\n    // If there are RefSpecs, fetch the missing commits from the remote repository\n    if (!refSpecs.isEmpty()) {\n        try {\n            URIish uri = new URIish(cloneLink);\n            FetchCommand fetchCommand = git.fetch()\n                    .setCredentialsProvider(scm.getBuildCredentials(build, listener))\n                    .setRefSpecs(refSpecs)\n                    .setRemote(uri.getHost())\n                    .setURI(uri);\n            git.run(fetchCommand);\n        } catch (URISyntaxException | GitException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    // Return the given revision\n    return rev;\n}", "CodeBleu_score": 52.46799175748198}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t        if (rev.getType() != Revision.Type.BRANCH) {\n            return rev;\n        }\n\n        String branch = rev.getBranch();\n        if (branch.contains(\"@\")) {\n            String[] parts = branch.split(\"@\");\n            if (parts.length != 2) {\n                return rev;\n            }\n\n            String hash = parts[1];\n            if (hash.length() != 40) {\n                return rev;\n            }\n\n            try {\n                List<RefSpec> refSpecs = git.getRefSpecs(build, listener, \"refs/heads/\" + parts[0], hash);\n                if (!refSpecs.isEmpty()) {\n                    String cloneLink = scm.getExtensions().stream()\n                            .filter(e -> e instanceof GitSCMExtension)\n                            .map(e -> (GitSCMExtension) e)\n                            .filter(e -> e.getClass().getName().equals(\"hudson.plugins.git.extensions.impl.CloneOption\"))\n                            .map(e -> (GitSCMExtension) e)\n                            .map(e -> (String) e.getClass().getMethod(\"getAlternateRemoteUrl\").invoke(e))\n                            .findFirst()\n                            .orElse(null);\n                    if (cloneLink != null) {\n                        URIish uri = new URIish(cloneLink);\n                        git.fetch(build, listener, new FetchCommand(uri, refSpecs));\n                    }\n                }\n            } catch (GitException | URISyntaxException | NoSuchMethodException | IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n\n        return rev;\n    }", "CodeBleu_score": 42.88557843894007}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        List<BitbucketHref> hrefs = entry.getValue();\n        if (hrefs != null && !hrefs.isEmpty()) {\n            result.put(entry.getKey(), hrefs.get(0));\n        }\n    }\n    return result;\n}", "CodeBleu_score": 73.49914034767812}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t    Map<String, List<BitbucketHref>> links = this.links;\n    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue().get(0));\n    }\n    return result;\n}", "CodeBleu_score": 76.52249716161062}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        List<BitbucketHref> hrefs = entry.getValue();\n        if (!hrefs.isEmpty()) {\n            result.put(entry.getKey(), hrefs.get(0));\n        }\n    }\n    return result;\n}", "CodeBleu_score": 74.48001369965603}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t    const selectedResourceStates = resourceStates || this.getSelectedResourceStates();\n    if (!selectedResourceStates) {\n        return;\n    }\n\n    const repositoryToFilePaths = new Map<string, string[]>();\n    selectedResourceStates.forEach((resourceState) => {\n        const repository = resourceState.resourceUri.fsPath;\n        if (!repositoryToFilePaths.has(repository)) {\n            repositoryToFilePaths.set(repository, []);\n        }\n        repositoryToFilePaths.get(repository)!.push(resourceState.resourceUri.fsPath);\n    });\n\n    for (const [repository, filePaths] of repositoryToFilePaths) {\n        try {\n            await this.addFilesToRepository(repository, filePaths);\n        } catch (error) {\n            console.error(error);\n            window.showErrorMessage(`Failed to add files to repository: ${error}`);\n        }\n    }\n}", "CodeBleu_score": 44.37299387940218}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t    const selectedResourceStates = resourceStates.length === 0\n        ? this.getSelectedResourceStates()\n        : resourceStates;\n\n    if (selectedResourceStates.length === 0) {\n        return;\n    }\n\n    const uriToResource = new Map<string, SourceControlResourceState>();\n    selectedResourceStates.forEach(resourceState => {\n        uriToResource.set(resourceState.resourceUri.toString(), resourceState);\n    });\n\n    const repositoryToResources = new Map<string, SourceControlResourceState[]>();\n    selectedResourceStates.forEach(resourceState => {\n        const repository = resourceState.resourceUri.authority;\n        const resources = repositoryToResources.get(repository) || [];\n        resources.push(resourceState);\n        repositoryToResources.set(repository, resources);\n    });\n\n    for (const [repository, resources] of repositoryToResources) {\n        const filePaths = resources.map(resourceState => resourceState.resourceUri.fsPath);\n        try {\n            await this.addToRepository(repository, filePaths);\n        } catch (error) {\n            console.error(error);\n            window.showErrorMessage(`Failed to add files to repository: ${repository}`);\n        }\n    }\n}", "CodeBleu_score": 39.54104884825789}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t    const selectedResourceStates =\n        resourceStates.length === 0\n            ? this.getSelectedResourceStates()\n            : resourceStates;\n    if (selectedResourceStates.length === 0) {\n        return;\n    }\n\n    const repositoryUriMap = new Map<string, string[]>();\n    for (const resourceState of selectedResourceStates) {\n        const repositoryUri = this.getRepositoryUri(resourceState);\n        if (!repositoryUriMap.has(repositoryUri)) {\n            repositoryUriMap.set(repositoryUri, []);\n        }\n        repositoryUriMap.get(repositoryUri)!.push(resourceState.resourceUri.fsPath);\n    }\n\n    for (const [repositoryUri, filePaths] of repositoryUriMap) {\n        try {\n            await this.addFilesToRepository(repositoryUri, filePaths);\n        } catch (error) {\n            console.error(error);\n            window.showErrorMessage(\n                \"Failed to add files to repository. See output for more details.\"\n            );\n        }\n    }\n}", "CodeBleu_score": 43.7901098855045}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\t  if (\n    !this.resourceStates ||\n    !this.resourceStates.length ||\n    !(this.resourceStates[0].resourceUri instanceof Uri)\n  ) {\n    const resource = await this.getScmResource(this.repository.rootUri);\n    this.resourceStates = [resource];\n  }\n  return this.resourceStates.filter(\n    (resourceState) => resourceState instanceof Resource\n  );\n}", "CodeBleu_score": 45.10962110418273}, {"code": "protected async getResourceStates{\n\t  if (resourceStates.length === 0 || !(resourceStates[0].resourceUri instanceof Uri)) {\n    const resource = await this.getScmResource(resourceStates[0].resourceUri);\n    if (resource) {\n      resourceStates[0] = resource;\n    }\n  }\n\n  return resourceStates.filter(resourceState => resourceState instanceof Resource);\n}", "CodeBleu_score": 49.484660071825225}, {"code": "protected async getResourceStates{\n\t  if (resourceStates.length === 0 || !(resourceStates[0].resourceUri instanceof Uri)) {\n    const resource = await this.getScmResource(resourceStates[0].resourceUri);\n    resourceStates.push(resource);\n  }\n\n  return resourceStates.filter(resource => resource instanceof Resource);\n}", "CodeBleu_score": 46.61353672294769}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    if (!uri) {\n      const editor = window.activeTextEditor;\n      if (editor) {\n        uri = editor.document.uri;\n      }\n    }\n\n    if (uri?.scheme === \"svn\") {\n      uri = uri.with({ scheme: \"file\" });\n    }\n\n    if (!uri) {\n      return undefined;\n    }\n\n    const scm = this.getSCM();\n    if (!scm) {\n      return undefined;\n    }\n\n    const repository = await scm.getRepository(uri);\n    if (!repository) {\n      return undefined;\n    }\n\n    return repository.getResource(uri);\n  }", "CodeBleu_score": 44.37388082942504}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    if (!uri) {\n      const editor = window.activeTextEditor;\n      if (editor) {\n        uri = editor.document.uri;\n      }\n    }\n\n    if (!uri) {\n      return;\n    }\n\n    if (uri.scheme === \"svn\") {\n      uri = fromSvnUri(uri);\n    }\n\n    const scm = this.getSCM();\n    const repository = await scm.getRepository(uri);\n\n    if (!repository) {\n      return;\n    }\n\n    return repository.getResource(uri);\n  }", "CodeBleu_score": 40.010150011396796}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    if (!uri) {\n      const editor = window.activeTextEditor;\n      if (!editor) {\n        return undefined;\n      }\n      uri = editor.document.uri;\n    }\n\n    if (uri.scheme === \"svn\") {\n      uri = fromSvnUri(uri);\n    }\n\n    const scm = this.getSCM();\n    if (!scm) {\n      return undefined;\n    }\n\n    const repository = await scm.getRepository(uri);\n    if (!repository) {\n      return undefined;\n    }\n\n    return repository.getResource(uri);\n  }", "CodeBleu_score": 46.61752488738469}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\t  const repo = await this.sourceControlManager.getRemoteRepository(element.path);\n  if (repo) {\n    if (element.status === Status.MODIFIED) {\n      openDiff(repo, element.oldPath, element.path, element.oldRevision, element.revision);\n    } else if (element.status === Status.ADDED) {\n      openFileRemote(repo, element.path, element.revision);\n    }\n  }\n}", "CodeBleu_score": 56.90188649948732}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t  const repo = await this.sourceControlManager.getRemoteRepository(element.resourceUri);\n  if (!repo) {\n    return;\n  }\n\n  if (element.status === Status.MODIFIED) {\n    openDiff(repo, element.resourceUri, element.oldRevision, element.newRevision);\n  } else if (element.status === Status.ADDED) {\n    openFileRemote(repo, element.resourceUri, element.newRevision);\n  }\n}", "CodeBleu_score": 55.65551540688448}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t  const scm = await SourceControlManager.getScm();\n  const remote = await scm.getRemote(element.path);\n  if (element.status === Status.MODIFIED) {\n    openDiff(remote, element.oldRevision, element.newRevision);\n  } else if (element.status === Status.ADDED) {\n    openFileRemote(remote, element.newRevision);\n  }\n}", "CodeBleu_score": 43.375987027081045}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t  if (!env.clipboard) {\n    window.showErrorMessage(\"Clipboard is not supported in this environment\");\n    return;\n  }\n\n  if (item.commit) {\n    const commit = item.commit;\n    switch (what) {\n      case \"revision\":\n        env.clipboard.writeText(commit.revision);\n        break;\n      case \"message\":\n        env.clipboard.writeText(commit.message);\n        break;\n    }\n  }\n}", "CodeBleu_score": 43.29319683033665}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t  if (!env.clipboard) {\n    window.showErrorMessage(\n      \"Copy to clipboard is not supported in this environment\"\n    );\n    return;\n  }\n\n  if (item.item instanceof SvnRI) {\n    if (what === \"commit\") {\n      if (item.item.commit.message) {\n        await env.clipboard.writeText(item.item.commit.message);\n      } else {\n        await env.clipboard.writeText(item.item.commit.revision);\n      }\n    } else if (what === \"revision\") {\n      await env.clipboard.writeText(item.item.commit.revision);\n    } else if (what === \"author\") {\n      await env.clipboard.writeText(item.item.commit.author);\n    } else if (what === \"date\") {\n      await env.clipboard.writeText(item.item.commit.date);\n    }\n  } else {\n    if (what === \"commit\") {\n      if (item.item.commit.message) {\n        await env.clipboard.writeText(item.item.commit.message);\n      } else {\n        await env.clipboard.writeText(item.item.commit.revision);\n      }\n    } else if (what === \"revision\") {\n      await env.clipboard.writeText(item.item.commit.revision);\n    } else if (what === \"author\") {\n      await env.clipboard.writeText(item.item.commit.author);\n    } else if (what === \"date\") {\n      await env.clipboard.writeText(item.item.commit.date);\n    }\n  }\n}", "CodeBleu_score": 27.33752005129585}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t  if (!env.clipboard) {\n    window.showErrorMessage(\"Clipboard is not supported in this environment\");\n    return;\n  }\n\n  if (item.item instanceof SvnRI) {\n    const commit = await item.item.getCommit(item.commit.revision);\n    if (commit) {\n      if (what === \"message\") {\n        env.clipboard.writeText(commit.message);\n      } else {\n        env.clipboard.writeText(commit.revision);\n      }\n    }\n  } else if (item.item instanceof RemoteRepository) {\n    const commit = await item.item.getCommit(item.commit.revision);\n    if (commit) {\n      if (what === \"message\") {\n        env.clipboard.writeText(commit.message);\n      } else {\n        env.clipboard.writeText(commit.revision);\n      }\n    }\n  }\n}", "CodeBleu_score": 45.30793512199969}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    GiteaConnectionFactory factory = null;\n    for (GiteaConnectionFactory f : ServiceLoader.load(GiteaConnectionFactory.class)) {\n        if (f.canOpen(this)) {\n            if (factory == null || f.priority() > factory.priority()) {\n                factory = f;\n            }\n        }\n    }\n    if (factory == null) {\n        throw new IOException(\"No GiteaConnectionFactory can open \" + this);\n    }\n    return factory.open(this);\n}", "CodeBleu_score": 35.255627992170815}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    GiteaConnectionFactory factory = getFactory();\n    if (factory == null) {\n        throw new IOException(\"No GiteaConnectionFactory found\");\n    }\n    return factory.open(this);\n}", "CodeBleu_score": 11.703046400583204}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    for (GiteaConnectionFactory factory : ServiceLoader.load(GiteaConnectionFactory.class)) {\n        if (factory.canOpen(this)) {\n            return factory.open(this);\n        }\n    }\n    throw new IOException(\"No suitable GiteaConnectionFactory found\");\n}", "CodeBleu_score": 20.26693522226452}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\t    Jenkins jenkins = Jenkins.getInstance();\n    if (jenkins != null) {\n        return jenkins.getPluginManager().uberClassLoader.loadClass(Gitea.class.getName()).newInstance();\n    } else {\n        return Gitea.class.newInstance();\n    }\n}", "CodeBleu_score": 34.66025088094567}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t  Jenkins jenkins = Jenkins.getInstance();\n  ClassLoader classLoader = jenkins != null ? jenkins.getPluginManager().getClassLoader() : getClass().getClassLoader();\n  return new Gitea(classLoader);\n}", "CodeBleu_score": 51.648265716474114}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t    Jenkins jenkins = Jenkins.getInstanceOrNull();\n    ClassLoader classLoader = jenkins != null ? jenkins.getPluginManager().getClassLoader() : getClass().getClassLoader();\n    return new Gitea(classLoader);\n}", "CodeBleu_score": 52.40403975265491}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = StringUtils.isBlank(displayName) ? serverUrl : displayName;\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    this.manageHooks = manageHooks;\n    this.credentialsId = manageHooks ? credentialsId : null;\n    this.aliasUrl = normalizeAliasUrl(aliasUrl);\n}", "CodeBleu_score": 48.69199302499435}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = displayName;\n    this.serverUrl = normalizeUrl(serverUrl);\n    this.manageHooks = manageHooks;\n    this.credentialsId = credentialsId;\n    this.aliasUrl = normalizeUrl(aliasUrl);\n    if (StringUtils.isBlank(displayName)) {\n        this.displayName = deriveDisplayNameFromUrl(this.serverUrl);\n    }\n}", "CodeBleu_score": 37.57680402271373}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = displayName;\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    this.manageHooks = manageHooks;\n    this.credentialsId = credentialsId;\n    this.aliasUrl = normalizeAliasUrl(aliasUrl);\n\n    if (StringUtils.isBlank(displayName)) {\n        this.displayName = deriveDisplayNameFromServerUrl();\n    }\n}", "CodeBleu_score": 37.709157659014636}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    if (Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n        return new StandardListBoxModel()\n                .includeAs(ACL.SYSTEM, Jenkins.get(), StandardCredentials.class)\n                .includeEmptyValue()\n                .includeMatchingAs(ACL.SYSTEM, Jenkins.get(), StandardCredentials.class,\n                        new CredentialsMatchers.WithId(CredentialsMatchers.anyOf(\n                                CredentialsMatchers.withId(serverUrl),\n                                CredentialsMatchers.withId(StringUtils.trim(serverUrl))\n                        ))\n                )\n                .includeMatchingAs(ACL.SYSTEM, Jenkins.get(), StandardCredentials.class,\n                        new CredentialsMatchers.WithId(CredentialsMatchers.anyOf(\n                                CredentialsMatchers.withId(StringUtils.trim(serverUrl) + \"/\"),\n                                CredentialsMatchers.withId(StringUtils.trim(serverUrl) + \"//\"),\n                                CredentialsMatchers.withId(StringUtils.trim(serverUrl) + \"///\")\n                        ))\n                )\n                .includeMatchingAs(ACL.SYSTEM, Jenkins.get(), StandardCredentials.class,\n                        new CredentialsMatchers.WithId(CredentialsMatchers.anyOf(\n                                CredentialsMatchers.withId(StringUtils.trim(serverUrl) + \"//api/v1/\"),\n                                CredentialsMatchers.withId(StringUtils.trim(serverUrl) + \"///api/v1/\")\n                        ))\n                )\n                .includeMatchingAs(ACL.SYSTEM, Jenkins.get(), StandardCredentials.class,\n                        new CredentialsMatchers.WithId(CredentialsMatchers.anyOf(\n                                CredentialsMatchers.withId(StringUtils.trim(serverUrl) + \"//api/v1\"),\n                                CredentialsMatchers.withId(StringUtils.trim(serverUrl) + \"///api/v1\")\n                        ))\n                )\n                .includeMatchingAs(ACL.SYSTEM, Jenkins.get(), StandardCredentials.class,\n                        new CredentialsMat", "CodeBleu_score": 39.41153135207406}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    if (Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n        serverUrl = normalizeServerUrl(serverUrl);\n        StandardListBoxModel result = new StandardListBoxModel();\n        result.includeMatchingAs(ACL.SYSTEM, Jenkins.get(), StandardCredentials.class,\n                CredentialsMatchers.always(),\n                URIRequirementBuilder.fromUri(serverUrl).build());\n        result.includeEmptyValue();\n        return result;\n    } else {\n        return new StandardListBoxModel()\n                .includeCurrentValue(AuthenticationTokens.matchesAs(GiteaAuth.class, serverUrl));\n    }\n}", "CodeBleu_score": 60.02645206733119}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    ListBoxModel result = new StandardListBoxModel();\n    if (Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n        // if user has admin permission, add all credentials\n        result.add(new StandardListBoxModel.Option(\"\", \"\"));\n        result.addAll(new StandardListBoxModel().withEmptySelection().withMatching(\n                CredentialsMatchers.always(), CredentialsProvider.lookupCredentials(\n                        StandardUsernamePasswordCredentials.class, Jenkins.get(), ACL.SYSTEM,\n                        URIRequirementBuilder.fromUri(serverUrl).build())));\n    } else {\n        // if user does not have admin permission, add only credentials that match the server URL\n        result.add(new StandardListBoxModel.Option(\"\", \"\"));\n        result.addAll(new StandardListBoxModel().withEmptySelection().withMatching(\n                CredentialsMatchers.always(), CredentialsProvider.lookupCredentials(\n                        StandardUsernamePasswordCredentials.class, Jenkins.get(), ACL.SYSTEM,\n                        URIRequirementBuilder.fromUri(serverUrl).build())));\n    }\n    return result;\n}", "CodeBleu_score": 38.448917361424996}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (StringUtils.isBlank(serverUrl)) {\n        return StringUtils.EMPTY;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        int port = uri.getPort();\n        if (port == -1) {\n            port = 443;\n        }\n        StringBuilder sb = new StringBuilder();\n        sb.append(uri.getScheme().toLowerCase(Locale.ROOT));\n        sb.append(\"://\");\n        sb.append(uri.getHost().toLowerCase(Locale.ROOT));\n        if (port != 80 && port != 443) {\n            sb.append(\":\");\n            sb.append(port);\n        }\n        sb.append(uri.getPath());\n        return StringUtils.stripEnd(sb.toString(), \"/\");\n    } catch (URISyntaxException e) {\n        return serverUrl;\n    }\n}", "CodeBleu_score": 36.528969879961956}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        if (uri.getScheme() == null) {\n            uri = new URI(\"https://\" + serverUrl);\n        }\n        String host = uri.getHost().toLowerCase(Locale.ENGLISH);\n        int port = uri.getPort();\n        if (uri.getScheme().equals(\"http\") && (port == -1 || port == 80)) {\n            port = -1;\n        } else if (uri.getScheme().equals(\"https\") && (port == -1 || port == 443)) {\n            port = -1;\n        }\n        String path = uri.getPath();\n        if (path.endsWith(\"/\")) {\n            path = path.substring(0, path.length() - 1);\n        }\n        if (uri.getQuery() != null) {\n            path += \"?\" + uri.getQuery();\n        }\n        if (uri.getFragment() != null) {\n            path += \"#\" + uri.getFragment();\n        }\n        return new URI(uri.getScheme(), uri.getUserInfo(), host, port, path, uri.getQuery(), uri.getFragment()).toString();\n    } catch (URISyntaxException e) {\n        return null;\n    }\n}", "CodeBleu_score": 52.750821763315514}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        if (scheme == null) {\n            scheme = \"http\";\n        }\n        int port = uri.getPort();\n        if (port == -1) {\n            if (scheme.equals(\"http\")) {\n                port = 80;\n            } else if (scheme.equals(\"https\")) {\n                port = 443;\n            }\n        }\n        String path = uri.getPath();\n        if (path == null) {\n            path = \"\";\n        }\n        String query = uri.getQuery();\n        if (query == null) {\n            query = \"\";\n        }\n        String fragment = uri.getFragment();\n        if (fragment == null) {\n            fragment = \"\";\n        }\n        return String.format(\"%s://%s:%d%s?%s#%s\", scheme, uri.getHost(), port, path, query, fragment).toLowerCase(Locale.ENGLISH);\n    } catch (URISyntaxException e) {\n        return serverUrl;\n    }\n}", "CodeBleu_score": 44.40206622481413}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel items = new ListBoxModel();\n    ExtensionList<GiteaServer> servers = GiteaServer.all();\n    for (GiteaServer server : servers) {\n        String displayName = server.getDisplayName();\n        if (StringUtils.isBlank(displayName)) {\n            items.add(server.getUrl());\n        } else {\n            items.add(displayName, server.getUrl());\n        }\n    }\n    return items;\n}", "CodeBleu_score": 46.37507445943151}, {"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : GiteaServer.getAll()) {\n        if (StringUtils.isNotBlank(server.getDisplayName())) {\n            items.add(server.getDisplayName(), server.getUrl());\n        } else {\n            items.add(server.getUrl(), server.getUrl());\n        }\n    }\n    return items;\n}", "CodeBleu_score": 38.21898368230355}, {"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : get().getServers()) {\n        if (StringUtils.isBlank(server.getDisplayName())) {\n            items.add(server.getUrl());\n        } else {\n            items.add(server.getDisplayName(), server.getUrl());\n        }\n    }\n    return items;\n}", "CodeBleu_score": 40.82263920656769}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n\n    if (servers == null) {\n        servers = new ArrayList<>();\n    } else {\n        servers = new ArrayList<>(servers);\n        Collections.sort(servers);\n        removeDuplicatesAndEmptyUrls(servers);\n    }\n\n    this.servers = servers;\n    save();\n}", "CodeBleu_score": 27.989238573729075}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n    if (servers == null) {\n        servers = Collections.emptyList();\n    } else {\n        Set<String> urls = new HashSet<>();\n        List<GiteaServer> newServers = new ArrayList<>(servers.size());\n        for (GiteaServer server : servers) {\n            if (server != null && StringUtils.isNotBlank(server.getServerUrl())) {\n                String url = server.getServerUrl();\n                if (urls.add(url)) {\n                    newServers.add(server);\n                }\n            }\n        }\n        servers = newServers;\n    }\n    this.servers = servers;\n    save();\n}", "CodeBleu_score": 49.434889092616515}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n    if (servers != null) {\n        Set<GiteaServer> serverSet = new HashSet<>(servers);\n        serverSet.removeIf(server -> StringUtils.isBlank(server.getServerUrl()));\n        this.servers = new ArrayList<>(serverSet);\n    } else {\n        this.servers = Collections.emptyList();\n    }\n    save();\n}", "CodeBleu_score": 32.55300374521648}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return false;\n    }\n\n    serverUrl = normalizeServerUrl(serverUrl);\n\n    boolean serverRemoved = false;\n\n    ListIterator<GiteaServer> it = servers.listIterator();\n    while (it.hasNext()) {\n        GiteaServer server = it.next();\n        if (server.getServerUrl().equals(serverUrl)) {\n            it.remove();\n            serverRemoved = true;\n        }\n    }\n\n    if (serverRemoved) {\n        save();\n    }\n\n    return serverRemoved;\n}", "CodeBleu_score": 43.46388090755172}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return false;\n    }\n    serverUrl = normalizeUrl(serverUrl);\n    Iterator<GiteaServer> iterator = servers.iterator();\n    while (iterator.hasNext()) {\n        GiteaServer server = iterator.next();\n        if (server.getServerUrl().equals(serverUrl)) {\n            iterator.remove();\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 38.01498689145848}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return false;\n    }\n\n    serverUrl = normalizeServerUrl(serverUrl);\n\n    boolean serverRemoved = false;\n    Iterator<GiteaServer> iterator = servers.iterator();\n    while (iterator.hasNext()) {\n        GiteaServer server = iterator.next();\n        if (serverUrl.equals(server.getServerUrl())) {\n            iterator.remove();\n            serverRemoved = true;\n        }\n    }\n\n    if (serverRemoved) {\n        save();\n    }\n\n    return serverRemoved;\n}", "CodeBleu_score": 50.02681390145709}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {\n        if (element.getKind() != ElementKind.CLASS) {\n            processingEnv.getMessager().printMessage(Kind.ERROR, \"Only classes can be annotated with \" + annotation.getSimpleName(), element);\n            continue;\n        }\n\n        Map<String, String> attributes = Maps.newHashMap();\n        for (AnnotationMirror annotationMirror : element.getAnnotationMirrors()) {\n            if (annotationMirror.getAnnotationType().toString().equals(annotation.getQualifiedName().toString())) {\n                for (Map.Entry<? extends ExecutableElement, ? extends AnnotationValue> entry : annotationMirror.getElementValues().entrySet()) {\n                    attributes.put(entry.getKey().getSimpleName().toString(), entry.getValue().getValue().toString());\n                }\n            }\n        }\n\n        String type = element.asType().toString();\n        descriptorElements.add(new ConfigElement(attributes, type));\n    }\n}", "CodeBleu_score": 43.45447702345247}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {\n        if (element.getKind() != ElementKind.FIELD) {\n            continue;\n        }\n        Map<String, String> attributes = Maps.newHashMap();\n        for (AnnotationMirror annotationMirror : element.getAnnotationMirrors()) {\n            if (annotationMirror.getAnnotationType().asElement().getSimpleName().contentEquals(annotation.getSimpleName())) {\n                for (Map.Entry<? extends ExecutableElement, ? extends AnnotationValue> entry : annotationMirror.getElementValues().entrySet()) {\n                    attributes.put(entry.getKey().getSimpleName().toString(), entry.getValue().toString());\n                }\n            }\n        }\n        descriptorElements.add(new ConfigElement(attributes, element.asType().toString()));\n    }\n}", "CodeBleu_score": 35.80469449060879}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t  for (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {\n    Map<String, String> attributes = Maps.newHashMap();\n    for (AnnotationMirror annotationMirror : element.getAnnotationMirrors()) {\n      if (annotationMirror.getAnnotationType().asElement().equals(annotation)) {\n        for (Map.Entry<? extends ExecutableElement, ? extends AnnotationValue> entry : annotationMirror.getElementValues().entrySet()) {\n          attributes.put(entry.getKey().getSimpleName().toString(), entry.getValue().getValue().toString());\n        }\n      }\n    }\n    String type = element.asType().toString();\n    descriptorElements.add(new ConfigElement(attributes, type));\n  }\n}", "CodeBleu_score": 48.29579807880664}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    String targetName = annotationClass.getName().replace(\"$\", \".\");\n    for (TypeElement annotation : annotations) {\n        if (annotation.getQualifiedName().toString().equals(targetName)) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 45.74762726140318}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t  String targetName = annotationClass.getName().replace(\"$\", \".\");\n  for (TypeElement annotation : annotations) {\n    if (annotation.getQualifiedName().toString().equals(targetName)) {\n      return annotation;\n    }\n  }\n  return null;\n}", "CodeBleu_score": 45.27896096171028}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    String targetName = annotationClass.getName().replace(\"$\", \".\");\n    for (TypeElement annotation : annotations) {\n        String qualifiedName = annotation.getQualifiedName().toString();\n        if (qualifiedName.equals(targetName)) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 40.41739941452181}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n\n    filters = {\n        \"docstatus\": 1,\n        \"employee\": employee,\n        \"leave_type\": \"Leave\",\n    }\n    if for_approval:\n        filters[\"status\"] = \"Open\"\n        filters[\"name\"] = [\"not in\", frappe.get_all(\"Leave Approval\", {\"approver\": approver_id}, pluck=\"leave_application\")]\n    else:\n        filters[\"status\"] = [\"not in\", [\"Cancelled\", \"Rejected\"]]\n\n    workflow = get_workflow_name(\"Leave Application\")\n    if workflow:\n        filters[\"workflow_state\"] = [\"not in\", \"Cancelled\"]\n    else:\n        filters[\"docstatus\"] = 1\n\n    return filters\n\n", "CodeBleu_score": 34.65642311476024}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n\n    filters = {\"employee\": employee}\n\n    if for_approval:\n        filters.update(\n            {\n                \"docstatus\": 0,\n                \"name\": [\"not in\", frappe.get_all(\"Leave Application\", {\"employee\": employee, \"docstatus\": 1})],\n            }\n        )\n\n        if approver_id:\n            filters.update({\"status\": \"Open\", \"approver\": approver_id})\n    else:\n        filters.update({\"docstatus\": 1})\n\n    workflow = get_workflow_name(\"Leave Application\")\n    if workflow:\n        filters.update({\"workflow_state\": [\"not in\", \"Cancelled\"]})\n    else:\n        filters.update({\"status\": [\"not in\", \"Cancelled\"]})\n\n    return filters\n\n", "CodeBleu_score": 29.40152180728044}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n\n    filters = {\"employee\": employee}\n\n    if for_approval:\n        filters[\"status\"] = \"Open\"\n        filters[\"docstatus\"] = 1\n        filters[\"name\"] = [\"not in\", frappe.get_all(\"Leave Approval\", {\"approver\": approver_id}, pluck=\"leave_application\")]\n\n    if approver_id:\n        filters[\"leave_approver\"] = approver_id\n\n    if not for_approval:\n        filters[\"status\"] = [\"not in\", [\"Cancelled\"]]\n\n    workflow_name = get_workflow_name(\"Leave Application\")\n    if workflow_name:\n        filters[\"workflow_state\"] = [\"not in\", [\"Cancelled\"]]\n\n    return filters\n\n", "CodeBleu_score": 35.549834788303244}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n\n    current_date = getdate()\n    leave_details = get_leave_details(employee, current_date)\n\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_details[leave_type][\"allocated\"],\n            \"balance\": leave_details[leave_type][\"balance\"],\n        }\n\n    return leave_balance_map\n\n", "CodeBleu_score": 38.418420201082746}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = getdate()\n    leave_details = get_leave_details(employee, current_date)\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_details[leave_type][\"allocated\"],\n            \"balance\": leave_details[leave_type][\"balance\"],\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 38.418420201082746}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    leave_balance_map = {}\n    now = getdate()\n    leave_details = get_leave_details(employee, now)\n    for leave_type in leave_details:\n        leave_balance_map[leave_type.leave_type] = {\n            \"allocated\": leave_type.total_leaves_allocated,\n            \"balance\": leave_type.total_leaves_allocated - leave_type.leaves_taken,\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 39.412052091523606}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n\n    holiday_list = frappe.db.get_value(\n        \"Employee\", employee, \"holiday_list\")\n\n    if not holiday_list:\n        return []\n\n    holidays = frappe.qb.DocType(\"Holiday\")\n    holiday_list_name = frappe.qb.DocType(\"Holiday List\")\n\n    query = (\n        frappe.qb.from_(holidays)\n        .select(holidays.holiday_date, holidays.description)\n        .where(\n            (holidays.parent == holiday_list_name.name)\n            & (holidays.parentfield == \"holidays\")\n            & (holidays.parenttype == \"Holiday List\")\n            & (holiday_list_name.name == holiday_list)\n            & (holidays.weekly_off != 1)\n        )\n        .orderby(holidays.holiday_date)\n    )\n\n    holidays = query.run(as_dict=True)\n\n    for holiday in holidays:\n        holiday.description = strip_html(holiday.description)\n\n    return holidays\n\n", "CodeBleu_score": 47.51111449011341}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.db.get_value(\n        \"Employee\", employee, \"holiday_list\"\n    )\n    if not holiday_list:\n        return []\n    holidays = (\n        frappe.qb.from_(\n            \"Holiday\",\n        )\n        .select(\n            \"holiday_date\",\n            \"description\",\n            \"weekly_off\",\n        )\n        .where(\n            (frappe.qb.from_(\"HolidayList\").select(\"name\").where(\n                frappe.qb.conditions.Like(\"parent_holiday_list\", holiday_list)\n            ))\n        )\n        .where(frappe.qb.conditions.ne(\"weekly_off\", 1))\n        .orderby(\"holiday_date\", order=Order.asc)\n        .run(as_dict=True)\n    )\n    for holiday in holidays:\n        holiday.description = strip_html(holiday.description)\n    return holidays\n\n", "CodeBleu_score": 44.94838624976064}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.db.get_value(\"Employee\", employee, \"holiday_list\")\n    if not holiday_list:\n        return []\n\n    holidays = (\n        frappe.qb.from_(\"Holiday\")\n        .select(\n            \"Holiday.holiday_date\",\n            \"Holiday.description\",\n            \"Holiday.weekly_off\",\n        )\n        .where(\n            (Holiday.parent == holiday_list)\n            & (Holiday.parentfield == \"holidays\")\n            & (Holiday.holiday_date >= getdate())\n            & (Holiday.weekly_off == 0)\n        )\n        .orderby(Holiday.holiday_date, order=Order.asc)\n        .run(as_dict=True)\n    )\n    for holiday in holidays:\n        holiday.description = strip_html(holiday.description)\n\n    return holidays\n\n", "CodeBleu_score": 48.4550807265586}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t\n\n    if not frappe.db.get_single_value(\"HR Settings\", \"send_reminders\"):\n        return\n\n    if frappe.db.get_single_value(\"HR Settings\", \"reminders_frequency\") != \"Weekly\":\n        return\n\n    send_reminders(get_all_employee_emails())\n\n", "CodeBleu_score": 30.557784708794344}, {"code": "def send_reminders_in_advance_weekly()\n\t\n\n    # Get the HR settings document.\n    hr_settings = frappe.get_doc(\"HR Settings\")\n\n    # Check if reminders are set to be sent and if the frequency is set to \"Weekly.\"\n    if hr_settings.send_reminders and hr_settings.reminders_frequency == \"Weekly\":\n        # Call the function to send the reminders.\n        send_reminders()\n\n", "CodeBleu_score": 13.334920680293113}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    hr_settings = frappe.get_doc(\"HR Settings\")\n    if hr_settings.send_holiday_reminders and hr_settings.holiday_reminders_frequency == \"Weekly\":\n        send_weekly_reminders()\n\n", "CodeBleu_score": 15.6112828371651}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t\n    total_score = 0\n    for d in self.get(\"self_ratings\"):\n        total_score += flt(d.rating) * flt(d.percentage) / 5\n    self.self_appraisal_score = flt(total_score, self.precision(\"self_appraisal_score\"))\n\n", "CodeBleu_score": 40.10616991835559}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self_appraisal_score = 0\n    for entry in self.self_rating:\n        self_appraisal_score += flt(entry.rating) * flt(entry.percentage)\n    self.self_appraisal_score = flt(self_appraisal_score, 2)\n\n", "CodeBleu_score": 31.89673738849141}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    total_score = 0\n    for d in self.get(\"self_ratings\"):\n        total_score += flt(d.rating) * flt(d.percentage) / 100\n    self.self_appraisal_score = flt(total_score, 2)\n\n", "CodeBleu_score": 32.88244164011218}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t\n\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle.calculate_final_score_using_formula:\n        total_score = self.total_score\n        average_feedback_score = self.average_feedback_score\n        self_appraisal_score = self.self_appraisal_score\n        final_score_formula = appraisal_cycle.final_score_formula\n        sanitized_final_score_formula = sanitize_expression(final_score_formula)\n        final_score = frappe.safe_eval(\n            sanitized_final_score_formula,\n            {\n                \"total_score\": total_score,\n                \"average_feedback_score\": average_feedback_score,\n                \"self_appraisal_score\": self_appraisal_score,\n            },\n        )\n        self.final_score = flt(final_score, self.precision)\n    else:\n        self.final_score = flt(\n            (self.total_score + self.average_feedback_score + self.self_appraisal_score) / 3,\n            self.precision,\n        )\n\n", "CodeBleu_score": 33.20923012133996}, {"code": "def calculate_final_score(self)\n\t\n\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n\n    if appraisal_cycle.calculate_final_score_using_formula:\n        # Gather necessary data\n        appraisal_kra_list = self.get(\"appraisal_kra\")\n        kra_list = [kra.kra for kra in appraisal_kra_list]\n        kra_score_map = {kra.kra: kra.total_score for kra in appraisal_kra_list}\n        kra_feedback_map = {kra.kra: kra.average_feedback_score for kra in appraisal_kra_list}\n        kra_self_appraisal_map = {\n            kra.kra: kra.self_appraisal_score for kra in appraisal_kra_list\n        }\n\n        # Sanitize the formula\n        sanitized_formula = sanitize_expression(appraisal_cycle.formula)\n\n        # Evaluate the formula\n        final_score = frappe.safe_eval(\n            sanitized_formula,\n            None,\n            {\n                \"kra_list\": kra_list,\n                \"kra_score_map\": kra_score_map,\n                \"kra_feedback_map\": kra_feedback_map,\n                \"kra_self_appraisal_map\": kra_self_appraisal_map,\n            },\n        )\n\n        # Set the final score with appropriate precision\n        self.final_score = flt(final_score, self.precision(\"final_score\"))\n    else:\n        # Calculate the final score as the average of the total score, average feedback score, and self-appraisal score\n        self.final_score = flt(\n            (self.total_score + self.average_feedback_score + self.self_appraisal_score)\n            / 3,\n", "CodeBleu_score": 34.91531094055829}, {"code": "def calculate_final_score(self)\n\t\n\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n\n    if appraisal_cycle.calculate_final_score_using_formula:\n        # Retrieve necessary data for evaluation\n        data = {\n            \"total_score\": self.total_score,\n            \"average_feedback_score\": self.average_feedback_score,\n            \"self_appraisal_score\": self.self_appraisal_score,\n        }\n\n        # Sanitize the formula\n        formula = sanitize_expression(appraisal_cycle.final_score_formula)\n\n        # Evaluate the formula\n        final_score = flt(frappe.safe_eval(formula, None, data))\n    else:\n        # Calculate final score as the average of total score, average feedback score, and self-appraisal score\n        final_score = flt(\n            (\n                self.total_score\n                + self.average_feedback_score\n                + self.self_appraisal_score\n            )\n            / 3,\n            2,\n        )\n\n    # Set final score with appropriate precision\n    self.final_score = flt(final_score, self.precision(\"final_score\"))\n\n", "CodeBleu_score": 37.21436226966727}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\t\n\n    if self.attendance_date:\n        if self.attendance_date > nowdate():\n            if self.status != \"On Leave\":\n                frappe.throw(\n                    _(\"Attendance date cannot be of future\"),\n                    title=_(\"Invalid Attendance Date\"),\n                )\n            elif not self.leave_application:\n                frappe.throw(\n                    _(\"Attendance date cannot be of future\"),\n                    title=_(\"Invalid Attendance Date\"),\n                )\n\n        if self.attendance_date < get_employee_joining_date(self.employee):\n            frappe.throw(\n                _(\"Attendance date cannot be before employee's joining date\"),\n                title=_(\"Invalid Attendance Date\"),\n            )\n\n", "CodeBleu_score": 31.693225303136717}, {"code": "def validate_attendance_date(self)\n\t\n\n    if getdate(self.attendance_date) > getdate(nowdate()):\n        if self.status != \"On Leave\":\n            frappe.throw(\n                _(\"Attendance date cannot be of future\"),\n                title=_(\"Invalid Attendance Date\"),\n            )\n\n    if getdate(self.attendance_date) < getdate(self.employee.date_of_joining):\n        frappe.throw(\n            _(\"Attendance date cannot be before employee's joining date\"),\n            title=_(\"Invalid Attendance Date\"),\n        )\n\n", "CodeBleu_score": 29.72055961628483}, {"code": "def validate_attendance_date(self)\n\t\n\n    if self.attendance_date > nowdate():\n        if self.status != \"On Leave\":\n            frappe.throw(_(\"Attendance date cannot be of future\"))\n        else:\n            leave_application = frappe.db.exists(\n                \"Leave Application\",\n                {\n                    \"employee\": self.employee,\n                    \"from_date\": [\"<=\", self.attendance_date],\n                    \"to_date\": [\">=\", self.attendance_date],\n                    \"docstatus\": 1,\n                },\n            )\n            if not leave_application:\n                frappe.throw(\n                    _(\"Attendance date is a Leave Application date. Please cancel the corresponding Leave Application\")\n                )\n\n    if self.attendance_date < get_employee_joining_date(self.employee):\n        frappe.throw(\n            _(\"Attendance date cannot be before employee's joining date\")\n        )\n\n", "CodeBleu_score": 37.48800446540236}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\t\n    if self.employee and self.attendance_date:\n        filters = {\n            \"employee\": self.employee,\n            \"attendance_date\": self.attendance_date,\n            \"name\": [\"not in\", [self.name]],\n        }\n        exists = frappe.db.exists(\"Attendance\", filters)\n        if exists:\n            attendance_record = get_link_to_form(\"Attendance\", exists)\n            frappe.throw(\n                _(\n                    \"Attendance record {0} already exists for Employee {1} on {2}. Please remove the existing record {3} and try again.\"\n                ).format(\n                    attendance_record,\n                    self.employee_name,\n                    frappe.bold(format_date(self.attendance_date)),\n                    attendance_record,\n                ),\n                title=_(\"Duplicate Record\"),\n            )\n\n", "CodeBleu_score": 37.267677354554394}, {"code": "def validate_duplicate_record(self)\n\t\n    if self.employee and self.attendance_date:\n        # Check if an attendance record with the same employee and date already exists\n        existing_attendance = frappe.db.exists(\n            \"Attendance\",\n            {\n                \"employee\": self.employee,\n                \"attendance_date\": self.attendance_date,\n                \"docstatus\": (\"<\", 2),\n            },\n        )\n        if existing_attendance:\n            # If a duplicate is found, raise an exception with a message indicating the employee, the date, and a link to the existing attendance record\n            frappe.throw(\n                _(\n                    \"Attendance record already exists for Employee {0} on {1}. Please update the existing record or create a new one.\"\n                ).format(\n                    self.employee_name,\n                    frappe.bold(\n                        format_date(\n                            get_datetime(self.attendance_date),\n                            \"dd-MM-yyyy\",\n                        )\n                    ),\n                ),\n                title=_(\n                    \"Duplicate Attendance Record for {0} on {1}\").format(\n                    self.employee_name,\n                    format_date(\n                        get_datetime(self.attendance_date),\n                        \"dd-MM-yyyy\",\n                    ),\n                ),\n                exc=frappe.DuplicateEntryError,\n                link_title=_(\"View Attendance\"),\n                link=get_link_to_form(\n                    \"Attendance\", existing_attendance),\n            )\n\n", "CodeBleu_score": 32.91007299444498}, {"code": "def validate_duplicate_record(self)\n\t\n    if self.employee and self.attendance_date:\n        filters = {\n            \"employee\": self.employee,\n            \"attendance_date\": self.attendance_date,\n            \"docstatus\": (\"<\", 2),\n        }\n        if not self.is_new():\n            filters.update({\"name\": (\"not in\", [self.name])})\n        existing_attendance = frappe.db.exists(\n            \"Attendance\", filters\n        )\n        if existing_attendance:\n            attendance_date = format_date(self.attendance_date)\n            employee_name = get_link_to_form(\"Employee\", self.employee)\n            frappe.throw(\n                _(\n                    \"Attendance for Employee {0} already exists on {1}. Please edit the existing record.\"\n                ).format(employee_name, attendance_date),\n                title=_(\"Duplicate Attendance\"),\n            )\n\n", "CodeBleu_score": 36.41609405222509}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t\n\n    # Get message details\n    message_details = frappe.db.get_all(\n        \"Communication\",\n        filters={\n            \"communication_type\": \"Communication\",\n            \"sent_or_received\": \"Received\",\n            \"creation\": [\">\", frappe.utils.get_datetime()],\n        },\n        fields=[\"name\", \"content\", \"sender\", \"creation\"],\n        order_by=\"creation desc\",\n    )\n\n    # Get email addresses of users in the specified group\n    group_name = frappe.db.get_value(\"Communication\", self.name, \"recipients\")\n    group_doc = frappe.get_doc(\"Communication\", group_name)\n    group_members = [\n        frappe.db.get_value(\"User\", member.user, \"email\")\n        for member in group_doc.members\n        if member.enabled == 1\n    ]\n\n    # Send email with summary using a template\n    frappe.sendmail(\n        recipients=group_members,\n        subject=_(\"Daily Summary of Replies\"),\n        template=\"daily_summary_of_replies\",\n        args={\"message_details\": message_details},\n    )\n\n    # Update status to \"Sent\"\n    frappe.db.set_value(\"Communication\", self.name, \"status\", \"Sent\")\n\n", "CodeBleu_score": 33.13014013908606}, {"code": "def send_summary(self)\n\t\n    if frappe.db.get_single_value(\"Email Digest Settings\", \"status\") != \"Active\":\n        return\n\n    # Get the date of the last email sent\n    last_email_sent = frappe.db.get_single_value(\"Email Digest Settings\", \"last_email_sent\")\n\n    # Check if the last email was sent today\n    if last_email_sent and last_email_sent == frappe.utils.today():\n        return\n\n    # Get the message details\n    messages = frappe.get_all(\n        \"Email Reply\",\n        filters={\n            \"creation\": [\">=\", frappe.utils.today()],\n            \"status\": \"Unread\",\n        },\n        fields=[\"name\", \"message\", \"sender\", \"creation\"],\n    )\n\n    # Get the email addresses of users in the specified group\n    group_name = frappe.db.get_single_value(\"Email Digest Settings\", \"group_name\")\n    group = frappe.get_doc(\"Email Group\", group_name)\n    emails = [user.email for user in group.users]\n\n    # Send an email with the summary using a template\n    frappe.sendmail(\n        recipients=emails,\n        subject=_(\"Daily Summary\"),\n        template=\"daily_summary\",\n        args={\"messages\": messages},\n    )\n\n    # Update the status to \"Sent\"\n    self.status = \"Sent\"\n    self.last_email_sent = frappe.utils.today()\n    self.save()\n\n", "CodeBleu_score": 36.392860486841506}, {"code": "def send_summary(self)\n\t\n\n    # Get message details\n    message = frappe.get_doc(\"Message\", self.message)\n    message_date = global_date_format(message.creation)\n    message_subject = message.subject\n    message_body = message.content\n\n    # Get email addresses of users in the specified group\n    group = frappe.get_doc(\"Group\", self.group)\n    user_emails = [user.email for user in group.users]\n\n    # Send email with summary\n    frappe.sendmail(\n        recipients=user_emails,\n        subject=_(\"Daily Summary of Replies for {0}\").format(message_subject),\n        message=frappe.render_template(\n            \"templates/email/reply_summary.html\",\n            {\n                \"message_date\": message_date,\n                \"message_subject\": message_subject,\n                \"message_body\": message_body,\n                \"replies\": self.replies,\n            },\n        ),\n    )\n\n    # Update status to \"Sent\"\n    self.status = \"Sent\"\n    self.save()\n\n", "CodeBleu_score": 33.732741791106925}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t\n    interview_round = frappe.db.get_value(\"Interview\", self.name, \"interview_round\")\n    job_applicant = frappe.db.get_value(\"Interview\", self.name, \"job_applicant\")\n    existing_interview = frappe.db.exists(\n        \"Interview\",\n        {\n            \"interview_round\": interview_round,\n            \"job_applicant\": job_applicant,\n            \"name\": [\"not in\", [self.name]],\n        },\n    )\n    if existing_interview:\n        link_to_existing_interview = get_link_to_form(\"Interview\", existing_interview)\n        link_to_job_applicant = get_link_to_form(\"Job Applicant\", job_applicant)\n        frappe.throw(\n            _(\n                \"Job applicants are not allowed to appear twice for the same interview round. Please check the existing interview record {0} for more details. If you think this is a mistake, please contact the system administrator.\"\n            ).format(link_to_existing_interview, link_to_job_applicant)\n        )\n\n", "CodeBleu_score": 48.67462647068776}, {"code": "def validate_duplicate_interview(self)\n\t\n    interview_round = frappe.db.get_value(\"Interview\", self.name, \"interview_round\")\n    job_applicant = frappe.db.get_value(\"Interview\", self.name, \"job_applicant\")\n    if frappe.db.exists(\n        \"Interview\",\n        {\n            \"interview_round\": interview_round,\n            \"job_applicant\": job_applicant,\n            \"name\": [\"not in\", [self.name]],\n        },\n    ):\n        frappe.throw(\n            _(\n                \"Job Applicant {0} is not allowed to appear twice for the same interview round {1}. Please check the {2} for more information.\"\n            ).format(\n                get_link_to_form(\"Job Applicant\", job_applicant),\n                get_link_to_form(\"Interview Round\", interview_round),\n                get_link_to_form(\"Interview\", self.name),\n            ),\n            title=_(\"Duplicate Interview\"),\n        )\n\n", "CodeBleu_score": 43.761844646687756}, {"code": "def validate_duplicate_interview(self)\n\t\n    interviewer_list = [self.interviewer_1, self.interviewer_2, self.interviewer_3]\n    interviewer_list = [x for x in interviewer_list if x]\n    if not interviewer_list:\n        frappe.throw(_(\"Atleast one interviewer is required\"))\n\n    interview = frappe.qb.DocType(\"Interview\")\n    duplicate_interview = (\n        frappe.qb.from_(interview)\n        .select(interview.name)\n        .where(\n            (interview.job_applicant == self.job_applicant)\n            & (interview.interview_round == self.interview_round)\n            & (interview.docstatus != 2)\n            & (interview.name != self.name)\n        )\n        .run(as_dict=True)\n    )\n\n    if duplicate_interview:\n        job_applicant_name = frappe.db.get_value(\n            \"Job Applicant\", self.job_applicant, \"name\"\n        )\n        frappe.throw(\n            _(\n                \"Job Applicant {0} is not allowed to appear twice for the same round. Please check the existing record <a href='/app/interview/{1}'>{1}</a>\").format(\n                get_link_to_form(\"Job Applicant\", job_applicant_name),\n                duplicate_interview[0].name),\n            title=_(\"Duplicate Interview Record\"),\n        )\n\n", "CodeBleu_score": 36.53647648661931}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\t\n    if self.skill_assessments:\n        total = 0\n        count = 0\n        for assessment in self.skill_assessments:\n            if assessment.rating:\n                total += assessment.rating\n                count += 1\n        if count > 0:\n            self.average_rating = total / count\n        else:\n            self.average_rating = 0\n\n", "CodeBleu_score": 24.94470258053678}, {"code": "def calculate_average_rating(self)\n\t\n    if not self.assessments:\n        self.average_rating = 0\n        return\n    total = 0\n    count = 0\n    for assessment in self.assessments:\n        if assessment.rating:\n            total += assessment.rating\n            count += 1\n    if count > 0:\n        self.average_rating = flt(total / count, 2)\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 27.25343338464512}, {"code": "def calculate_average_rating(self)\n\t\n    if not self.skill_assessments:\n        self.average_rating = 0\n        return\n\n    total_rating = 0\n    for assessment in self.skill_assessments:\n        if assessment.rating:\n            total_rating += assessment.rating\n\n    self.average_rating = flt(total_rating / len(self.skill_assessments), 2)\n\n", "CodeBleu_score": 38.56477483470899}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.get(\"interview_round\")\n    interview.designation = doc.get(\"designation\")\n    if doc.get(\"interviewers\"):\n        interview.interview_details = []\n        for interviewer in doc.get(\"interviewers\"):\n            interview.append(\n                \"interview_details\",\n                {\n                    \"interviewer\": interviewer.get(\"interviewer\"),\n                    \"interviewer_name\": interviewer.get(\"interviewer_name\"),\n                },\n            )\n    return interview\n\n", "CodeBleu_score": 48.877605850142345}, {"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.get(\"interview_round\")\n    interview.designation = doc.get(\"designation\")\n    interview.interviewers = []\n    if doc.get(\"interviewers\"):\n        for interviewer in doc.get(\"interviewers\"):\n            interview.append(\"interviewers\", {\n                \"interviewer\": interviewer.get(\"interviewer\"),\n                \"interviewer_name\": interviewer.get(\"interviewer_name\")\n            })\n    return interview\n\n", "CodeBleu_score": 48.740461682263}, {"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    if doc.interviewers:\n        interview.interview_details = []\n        for interviewer in doc.interviewers:\n            interview.append(\"interview_details\", {\n                \"interviewer\": interviewer.interviewer,\n                \"interviewer_name\": interviewer.interviewer_name,\n                \"interviewer_email\": interviewer.interviewer_email,\n                \"interviewer_designation\": interviewer.interviewer_designation\n            })\n    return interview\n\n", "CodeBleu_score": 44.022978531538435}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offer = frappe.db.sql(\n        \"\"\"\n        SELECT name FROM `tabJob Offer`\n        WHERE posting_date BETWEEN %(from_date)s AND %(to_date)s\n        AND designation = %(designation)s\n        AND company = %(company)s\n        AND docstatus = 1\n        \"\"\",\n        {\"from_date\": from_date, \"to_date\": to_date, \"designation\": self.designation, \"company\": self.company},\n    )\n    return job_offer\n\n", "CodeBleu_score": 46.09145670080977}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offers = frappe.get_all(\n        \"Job Offer\",\n        filters={\n            \"designation\": self.designation,\n            \"company\": self.company,\n            \"docstatus\": 1,\n            \"posting_date\": [\"between\", (from_date, to_date)],\n        },\n        pluck=\"name\",\n    )\n\n    return job_offers\n\n", "CodeBleu_score": 65.05903962752365}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offer_list = frappe.db.sql(\n        \"\"\"\n        SELECT\n            jo.name\n        FROM\n            `tabJob Offer` jo\n        WHERE\n            jo.designation = %s\n            AND jo.company = %s\n            AND jo.docstatus = 1\n            AND jo.creation BETWEEN %s AND %s\n        \"\"\",\n        (self.designation, self.company, from_date, to_date),\n        as_dict=1,\n    )\n\n    job_offer_list = [jo.get(\"name\") for jo in job_offer_list]\n\n    return job_offer_list\n\n", "CodeBleu_score": 40.98177882877796}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n\n    filters = {\"docstatus\": 1}\n\n    if company:\n        filters[\"company\"] = company\n\n    if department:\n        filters[\"department\"] = department\n\n    total_job_offers = frappe.db.count(\"Job Offer\", filters=filters)\n    accepted_job_offers = frappe.db.count(\n        \"Job Offer\", filters={**filters, \"offer_accepted\": 1}\n    )\n\n    acceptance_rate = flt(accepted_job_offers) / flt(total_job_offers) * 100\n\n    return acceptance_rate, \"Percent\"\n\n", "CodeBleu_score": 56.86726725803714}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    filters = {\"docstatus\": 1}\n    if company:\n        filters[\"company\"] = company\n    if department:\n        filters[\"department\"] = department\n\n    total_job_offers = frappe.db.count(\"Job Offer\", filters=filters)\n    accepted_job_offers = frappe.db.count(\n        \"Job Offer\", filters={**filters, \"offer_status\": \"Accepted\"}\n    )\n\n    acceptance_rate = flt(accepted_job_offers) / flt(total_job_offers) * 100\n    return acceptance_rate, \"Percent\"\n\n", "CodeBleu_score": 57.435239568691664}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    filters = {\"docstatus\": 1}\n    if company:\n        filters[\"company\"] = company\n    if department:\n        filters[\"department\"] = department\n\n    total_job_offers = frappe.db.count(\"Job Offer\", filters=filters)\n    accepted_job_offers = frappe.db.count(\n        \"Job Offer\", filters={**filters, \"status\": \"Accepted\"}\n    )\n\n    acceptance_rate = flt(accepted_job_offers) / flt(total_job_offers) * 100\n\n    return acceptance_rate, \"Percent\"\n\n", "CodeBleu_score": 57.71635042154427}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t    final Result result = this.employerService.register(employerForRegisterDto);\n    if (!result.isSuccess())\n        return new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n    return ResponseEntity.ok(result);\n}", "CodeBleu_score": 82.60319275764245}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t        final Result result = this.employerService.register(employerForRegisterDto);\n        if (!result.isSuccess())\n            return new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n        return ResponseEntity.ok(result);\n    }", "CodeBleu_score": 80.70271702156403}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t    final Result result = this.employerService.register(employerForRegisterDto);\n    if (!result.isSuccess())\n        return new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n    return new ResponseEntity<>(result, HttpStatus.OK);\n}", "CodeBleu_score": 74.38770856601839}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\t\tfinal Optional<CompanyStaff> companyStaff = this.companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\t\tif (companyStaff.isEmpty())\n\t\t\treturn new ErrorResult(Messages.notFound(\"Company Staff\"));\n\n\t\tfinal Result rules = BusinessRules.run(\n\t\t\t\tthis.checkIfPasswordsMatch(companyStaff.get().getPassword(), companyStaffForUpdateDto.getPassword()));\n\t\tif (rules != null)\n\t\t\treturn rules;\n\n\t\tcompanyStaff.get().setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.get().setLastName(companyStaffForUpdateDto.getLastName());\n\t\tthis.companyStaffDao.save(companyStaff.get());\n\t\treturn new SuccessResult(Messages.updated(\"Company Staff\"));\n\t}", "CodeBleu_score": 67.43330050781594}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t    final Optional<CompanyStaff> companyStaff = this.companyStaffDao.findById(companyStaffForUpdateDto.getId());\n    if (companyStaff.isEmpty()) {\n        return new ErrorResult(Messages.notFound(\"Company staff\"));\n    }\n    final Result businessRulesResult = BusinessRules.run(this.checkIfPasswordsMatch(companyStaffForUpdateDto.getPassword(), companyStaff.get().getPassword()));\n    if (!businessRulesResult.isSuccess()) {\n        return businessRulesResult;\n    }\n    companyStaff.get().setFirstName(companyStaffForUpdateDto.getFirstName());\n    companyStaff.get().setLastName(companyStaffForUpdateDto.getLastName());\n    this.companyStaffDao.save(companyStaff.get());\n    return new SuccessResult(Messages.updated(\"Company staff\"));\n}", "CodeBleu_score": 67.62235967120604}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\tfinal Optional<CompanyStaff> companyStaff = this.companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\tif (companyStaff.isEmpty())\n\t\treturn new ErrorResult(Messages.NOTFOUND);\n\tfinal Result businessRulesResult = BusinessRules.run(\n\t\t\tcheckIfPasswordsMatch(companyStaffForUpdateDto.getPassword(), companyStaff.get().getPassword()));\n\tif (!businessRulesResult.isSuccess())\n\t\treturn businessRulesResult;\n\tcompanyStaff.get().setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.get().setLastName(companyStaffForUpdateDto.getLastName());\n\tthis.companyStaffDao.save(companyStaff.get());\n\treturn new SuccessResult(Messages.UPDATED);\n}", "CodeBleu_score": 64.59263849626561}]}
