{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t\n    ids = request.httprequest.args.getlist('ids')\n    if not ids:\n        return request.not_found()\n    attachment_ids = [int(id) for id in ids]\n    attachments = self.env['ir.attachment'].browse(attachment_ids)\n    if any(attachment.read_group([('id', 'in', attachment_ids)], ['res_model','res_id'], ['res_model','res_id'])[0]['res_id']!= attachment.res_id for attachment in attachments):\n        return request.not_found()\n    if any(attachment.read_group([('id', 'in', attachment_ids)], ['res_model','res_id'], ['res_model','res_id'])[0]['res_model']!= attachment.res_model for attachment in attachments):\n        return request.not_found()\n    if any(attachment.read_group([('id', 'in', attachment_ids)], ['res_model','res_id'], ['res_model','res_id'])[0]['res_model']!= attachment.res_model for attachment in attachments):\n        return request.not_found()\n    if any(attachment.read_group([('id', 'in', attachment_ids)], ['res_model','res_id'], ['res_model','res_id'])[0]['res_model']!= attachment.res_model for attachment in attachments):\n        return request.not_found()\n    if any(attachment.read_group([('id', 'in', attachment_ids)], ['res_model','res_id'], ['res_model','res_id'])[0]['res_model']!= attachment.res_model for attachment in attachments):\n        return request.not_found()\n    if any(attachment.read_group([('id', 'in', attachment_ids)], ['res_model','res_id'], ['res_model','res_id'])[0]['res_model']!= attachment.res_model for attachment in attachments):\n        return request.not_found()\n    if any(attachment.read_group([('id', 'in', attachment_ids)], ['res_model','res_id'], ['res_model','res_id'])[0]['res_model']!= attachment.res_model for attachment in", "CodeBleu_score": 24.67514567908725}, {"code": "def export_zip_documents(self, **args)\n\t\n    # Retrieve the attachment IDs from the HTTP request arguments.\n    attachment_ids = args.get('ids', [])\n    # Check if the attachment IDs are valid.\n    if not attachment_ids:\n        return request.not_found()\n    # Retrieve the attachments from the database.\n    attachments = request.env['ir.attachment'].browse(attachment_ids)\n    # Check if the attachments exist.\n    if not attachments:\n        return request.not_found()\n    # Check if the user has read access to the attachments.\n    if not all(attachments.check_access_rights('read')):\n        return request.not_found()\n    # Check if the user has access to the attachments.\n    if not all(attachments.check_access_rule('read')):\n        return request.not_found()\n    # Create a zip file buffer.\n    zip_buffer = io.BytesIO()\n    # Create a zip file writer.\n    zip_writer = zipfile.ZipFile(zip_buffer, mode='w')\n    # Iterate over the attachments and add them to the zip file.\n    for attachment in attachments:\n        # Get the attachment content.\n        content = attachment.datas\n        # Add the attachment to the zip file.\n        zip_writer.writestr(attachment.name, content)\n    # Close the zip file writer.\n    zip_writer.close()\n    # Prepare HTTP headers for the zip file.\n    response = request.make_response(zip_buffer.getvalue(), [('Content-Type', 'application/zip'), ('Content-Disposition', 'attachment; filename=attachments.zip')])\n    # Return the zip file as an HTTP response.\n    return response", "CodeBleu_score": 38.41961461179433}, {"code": "def export_zip_documents(self, **args)\n\t\n    ids = args.get('ids', False)\n    if ids:\n        ids = ids.split(',')\n    else:\n        ids = []\n    attachment_ids = request.env['ir.attachment'].search([('id', 'in', ids)])\n    if not attachment_ids:\n        return request.not_found()\n    if not all(attachment.can_access() for attachment in attachment_ids):\n        return request.not_found()\n    zip_file = io.BytesIO()\n    with zipfile.ZipFile(zip_file, 'w') as zip_file:\n        for attachment in attachment_ids:\n            zip_file.writestr(attachment.name, attachment.datas)\n    zip_file.seek(0)\n    return request.make_response(zip_file, headers=[('Content-Type', 'application/zip'), ('Content-Disposition', content_disposition(attachment_ids[0].name, attachment_ids[0].mimetype))], cookies=request.cookies)", "CodeBleu_score": 35.9622617119929}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(CustomerPortal, self)._prepare_home_portal_values(counters)\n    if self.env.user.has_group('account.group_account_user'):\n        values.update({\n            'invoice_count': counters['invoice_count'],\n            'bill_count': counters['bill_count'],\n        })\n    return values\n\n", "CodeBleu_score": 14.959135040532907}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    res = super(CustomerPortal, self)._prepare_home_portal_values(counters)\n    if request.env.user.has_group('account.group_account_user'):\n        res['invoice_count'] = counters['invoice']\n        res['bill_count'] = counters['bill']\n    return res\n\n", "CodeBleu_score": 11.610398192407425}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(CustomerPortal, self)._prepare_home_portal_values(counters)\n    if self.env.user.has_group('account.group_account_invoice'):\n        values['invoice_count'] = counters['invoice']\n    if self.env.user.has_group('account.group_account_invoice'):\n        values['bill_count'] = counters['bill']\n    return values\n\n", "CodeBleu_score": 18.96224444209493}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n\n    # Prepare the values needed for displaying invoices\n    values = {\n        'date': date_begin,\n        'date_end': date_end,\n       'sortby': sortby,\n        'filterby': filterby,\n        'portal': True,\n    }\n\n    # Get the relevant invoices based on the parameters\n    domain = []\n    if filterby == 'all':\n        domain = []\n    elif filterby == 'out_invoice':\n        domain = [('type', '=', 'out_invoice')]\n    elif filterby == 'in_invoice':\n        domain = [('type', '=', 'in_invoice')]\n    elif filterby == 'out_refund':\n        domain = [('type', '=', 'out_refund')]\n    elif filterby == 'in_refund':\n        domain = [('type', '=', 'in_refund')]\n\n    invoice_ids = request.env['account.move'].search(domain, order=sortby, limit=self._items_per_page, offset=self._items_per_page * (page - 1))\n\n    # Update the session history with the latest invoice IDs\n    if invoice_ids:\n        request.session['my_invoices_history'] = invoice_ids.ids[:100]\n\n    # Render the invoices page with the prepared values\n    return request.render('account.portal_my_invoices', values)\n\n", "CodeBleu_score": 39.79348708417667}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    # Get the current user's ID and company ID from the session\n    user = request.env.user\n    company_id = user.company_id.id\n    # Get the current user's invoice IDs from the session\n    invoice_ids = request.session.get('invoice_ids', [])\n    # Get the current user's invoice history from the session\n    invoice_history = request.session.get('invoice_history', [])\n    # Get the current user's invoice filter from the session\n    invoice_filter = request.session.get('invoice_filter', 'all')\n    # Get the current user's invoice sort order from the session\n    invoice_sort = request.session.get('invoice_sort', 'date')\n    # Get the current user's invoice sort direction from the session\n    invoice_sort_direction = request.session.get('invoice_sort_direction', 'desc')\n    # Get the current user's invoice sort direction from the session\n    invoice_sort_direction = request.session.get('invoice_sort_direction', 'desc')\n    # Get the current user's invoice sort direction from the session\n    invoice_sort_direction = request.session.get('invoice_sort_direction', 'desc')\n    # Get the current user's invoice sort direction from the session\n    invoice_sort_direction = request.session.get('invoice_sort_direction', 'desc')\n    # Get the current user's invoice sort direction from the session\n    invoice_sort_direction = request.session.get('invoice_sort_direction', 'desc')\n    # Get the current user's invoice sort direction from the session\n    invoice_sort_direction = request.session.get('invoice_sort_direction', 'desc')\n    # Get the current user's invoice sort direction from the session\n    invoice_sort_direction = request.session.get('invoice_sort_direction', 'desc')\n    # Get the current user's invoice sort direction from the session\n    invoice_sort_direction = request.session.get('invoice_sort_direction', 'desc')\n    # Get the current user's invoice sort direction from the session\n    invoice_sort_direction = request.session.get('invoice_sort_direction', 'desc')\n    # Get the current user's invoice sort direction from the session\n    invoice_sort_direction = request.session.get('invoice_sort_direction', 'desc')\n    # Get the current user's invoice sort direction from", "CodeBleu_score": 21.88245766645176}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    # Retrieve the current user's invoice IDs from the session history.\n    invoice_ids = request.session.get('my_invoices_history', [])\n    # Retrieve the relevant invoices based on the invoice IDs and the filtering options.\n    domain = [('id', 'in', invoice_ids)]\n    if date_begin and date_end:\n        domain += [('date_invoice', '>=', date_begin), ('date_invoice', '<=', date_end)]\n    if filterby:\n        domain += [('type', '=', filterby)]\n    if sortby:\n        order = expression.get_order_from_expression(sortby)\n    else:\n        order = 'date_invoice desc'\n    # Retrieve the invoices based on the domain and order.\n    invoices = request.env['account.invoice'].search(domain, order=order, limit=1000)\n    # Update the session history with the latest invoice IDs.\n    request.session['my_invoices_history'] = invoices.ids\n    # Prepare the values for displaying the invoices.\n    values = {\n        'date': {'date_begin': date_begin, 'date_end': date_end},\n       'sortby': sortby,\n        'filterby': filterby,\n        'invoices': invoices,\n        'count': len(invoices),\n        'pager': portal_pager(\n            url=\"/my/invoices\",\n            url_args={'date_begin': date_begin, 'date_end': date_end,'sortby': sortby, 'filterby': filterby},\n            total=len(invoices),\n            page=page,\n            step=10\n        ),\n    }\n    return request.render(\"portal_my_invoices.portal_my_invoices\", values)\n\n", "CodeBleu_score": 37.21050571306416}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    # access_token is needed to check access rights\n    # report_type is used to determine the type of the report to show\n    # download is used to determine if the user wants to download the invoice\n    # kw is used to pass extra parameters to the report\n    # access_token is needed to check access rights\n    # report_type is used to determine the type of the report to show\n    # download is used to determine if the user wants to download the invoice\n    # kw is used to pass extra parameters to the report\n    if access_token:\n        try:\n            invoice_id = int(invoice_id)\n        except ValueError:\n            return request.redirect('/my/invoices')\n        invoice = request.env['account.invoice'].sudo().search([('id', '=', invoice_id)], limit=1)\n        if not invoice:\n            return request.redirect('/my/invoices')\n        if invoice.type in ('out_invoice', 'out_refund') and invoice.state!= 'paid':\n            return request.redirect('/my/invoices')\n        if invoice.type in ('in_invoice', 'in_refund') and invoice.state!= 'open':\n            return request.redirect('/my/invoices')\n        if invoice.type in ('out_invoice', 'out_refund') and invoice.state!= 'open':\n            return request.redirect('/my/invoices')\n        if invoice.type in ('in_invoice', 'in_refund') and invoice.state!= 'paid':\n            return request.redirect('/my/invoices')\n        if not invoice.access_token or invoice.access_token!= access_token:\n            return request.redirect('/my/invoices')\n        if download:\n            if invoice.type in ('out_invoice', 'out_refund') and invoice.state!= 'paid':\n                return request.redirect('/my/invoices')\n            if invoice.type in ('in_invoice', 'in_refund') and invoice.state!= 'open':\n                return request.redirect('/my/invoices')\n            if invoice.type in ('out_invoice', 'out_refund') and invoice.state!= 'open':\n                return request.redirect('/my/invoices')\n            if invoice.type in ('in_invoice', 'in_refund') and invoice.state!= 'paid':\n                return request.redirect('/my/invoices')\n            if not invoice.access_token or invoice.access_token!= access_token:\n                return request.", "CodeBleu_score": 30.0370936364733}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    self.check_access_rights('account.invoice.view')\n    self.check_access_rule('account.invoice.view')\n    Invoice = request.env['account.invoice']\n    invoice = Invoice.sudo().browse(int(invoice_id))\n    if not invoice.exists():\n        raise MissingError(_('Invoice not found'))\n    if invoice.type in ('out_invoice', 'out_refund') and invoice.company_id.id!= request.env.user.company_id.id:\n        raise AccessError(_(\"You can't access this invoice.\"))\n    if invoice.state not in ('open', 'paid'):\n        raise AccessError(_(\"You can't access this invoice.\"))\n    if access_token and invoice.access_token!= access_token:\n        raise AccessError(_(\"Wrong access token.\"))\n    if report_type in ('pdf', 'html', 'text'):\n        if invoice.type == 'out_invoice':\n            template = 'account.invoice_supplier_document'\n        else:\n            template = 'account.invoice_customer_document'\n        return request.render(template, {'invoice': invoice,'report_type': report_type})\n    if download:\n        return self._invoice_download(invoice)\n    return request.render('account.invoice_detail', {'invoice': invoice})\n\n", "CodeBleu_score": 32.17880799616735}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    # check access to invoice\n    invoice = request.env['account.invoice'].sudo().browse(int(invoice_id))\n    if not invoice.exists():\n        return request.redirect('/my/invoices')\n    if not invoice.is_mine():\n        raise AccessError(_(\"You are not allowed to access this invoice.\"))\n    # check access to reports\n    if report_type and not invoice.user_has_groups('account.group_account_invoice'):\n        raise AccessError(_(\"You are not allowed to access this invoice.\"))\n    # prepare the values to render the invoice page\n    values = {\n        'invoice': invoice,\n        'page_name': 'portal_my_invoice_detail',\n        'download': download,\n        'default_url': '/my/invoices',\n        'invoice_id': invoice_id,\n        'invoice_state': invoice.state,\n        'invoice_type': invoice.type,\n        'invoice_number': invoice.number,\n        'invoice_date': invoice.date_invoice,\n        'invoice_partner_name': invoice.partner_id.name,\n        'invoice_partner_address': invoice.partner_id.street,\n        'invoice_partner_zip': invoice.partner_id.zip,\n        'invoice_partner_city': invoice.partner_id.city,\n        'invoice_partner_country': invoice.partner_id.country_id.name,\n        'invoice_partner_state': invoice.partner_id.state_id.name,\n        'invoice_partner_vat': invoice.partner_id.vat,\n        'invoice_amount_total': invoice.amount_total,\n        'invoice_amount_total_signed': invoice.amount_total_signed,\n        'invoice_amount_untaxed': invoice.amount_untaxed,\n        'invoice_amount_tax': invoice.amount_tax,\n        'invoice_amount_residual': invoice.amount_residual,\n        'invoice_amount_residual_signed': invoice.amount_residual_signed,\n        'invoice_amount_total_signed_str': invoice.amount_total_signed_str,\n        'invoice_amount_untaxed_str': invoice.amount_untaxed_str,\n        'invoice_amount_tax_str': invoice.amount_tax_str,\n        'invoice_amount_residual_str': invoice.amount_residual_str,\n        '", "CodeBleu_score": 23.27621179609131}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t\n    if company:\n        domain = [('company_id', '=', company.id)]\n    else:\n        domain = []\n    product_templates = self.env['product.template'].search(domain)\n    for product_template in product_templates:\n        product_template.update_taxes()\n\n", "CodeBleu_score": 18.845512034640898}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    product_obj = self.env['product.template']\n    product_ids = product_obj.search([('company_id', '=', company.id)])\n    for product in product_ids:\n        product.update_taxes()\n\n", "CodeBleu_score": 7.798393912859894}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    # Get the demo data products\n    demo_data_products = self.env['product.template'].search([('company_id', '=', company.id)])\n    # If the company's account_sale_tax_id is set, update the sale taxes for the demo data products\n    if company.account_sale_tax_id:\n        for product in demo_data_products:\n            product.taxes_id = [(4, company.account_sale_tax_id.id)]\n    # If the company's account_purchase_tax_id is set, update the purchase taxes for the demo data products\n    if company.account_purchase_tax_id:\n        for product in demo_data_products:\n            product.purchase_taxes_id = [(4, company.account_purchase_tax_id.id)]\n\n", "CodeBleu_score": 22.227435079441406}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id.type', '=', account_type), ('xml_id', '=', xml_id)], limit=1)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id.type', '=', account_type)], limit=1)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n    return account\n\n", "CodeBleu_score": 46.91380933764563}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    if company:\n        ir_model_data = self.env['ir.model.data']\n        try:\n            account_id = ir_model_data.get_object_reference(company.id, xml_id, account_type)[1]\n        except ValueError:\n            account_id = self.env[account_type].search([('company_id', '=', company.id), ('xml_id', '=', xml_id)], limit=1).id\n        if account_id:\n            return account_id\n    return self.env[account_type].search([('company_id', '=', False), ('xml_id', '=', xml_id)], limit=1).id\n\n", "CodeBleu_score": 40.25940012329092}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env['account.account'].search([('company_id', '=', company.id), ('xml_id', '=', xml_id)], limit=1)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id.type', '=', account_type)], limit=1)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n    return account\n\n", "CodeBleu_score": 45.69163031158182}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    # Retrieve accounts of the \"Current Year Earnings\" type grouped by company.\n    account_type_unique_current_year_earnings = self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_earnings').id)], groupby='company_id')\n    # Raise a ValidationError if more than one account of the \"Current Year Earnings\" type exists for any company.\n    if len(account_type_unique_current_year_earnings) > 1:\n        raise ValidationError(_(\"There is already an account with the 'Current Year Earnings' type for one of the companies. Please remove the other accounts before creating a new one.\"))\n\n", "CodeBleu_score": 21.740060045423963}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    account_types = self.env['account.account.type'].search([('name', '=', 'Current Year Earnings')])\n    account_types_by_company = defaultdict(list)\n    for account_type in account_types:\n        account_types_by_company[account_type.company_id].append(account_type)\n    for company, account_types in account_types_by_company.items():\n        if len(account_types) > 1:\n            raise ValidationError(f\"There is more than one account with the 'Current Year Earnings' type for the company {company.name}.\")\n\n", "CodeBleu_score": 25.88941965175881}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    for company in self.env['res.company'].search([]):\n        accounts_by_company = self.search([('company_id', '=', company.id), ('type', '=', 'earnings')])\n        if len(accounts_by_company) > 1:\n            raise ValidationError(_('There can only be one account with the \"Current Year Earnings\" type for each company.'))\n\n", "CodeBleu_score": 30.779232401604716}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name:\n        # If no name is given, we order the records by frequency for the partner\n        if self._context.get('partner_id'):\n            partner_id = self._context['partner_id']\n            partner_obj = self.env['res.partner']\n            partner = partner_obj.browse(partner_id)\n            domain = [('id', 'in', partner.get_top_partners(limit))]\n        else:\n            domain = []\n    else:\n        domain = expression.OR([\n            expression.AND([\n                domain,\n                [('name', operator, name)],\n            ]),\n            expression.AND([\n                domain,\n                [('display_name', operator, name)],\n            ]),\n        ])\n    return self.search(domain, limit=limit, order=order)\n\n", "CodeBleu_score": 41.800152971211595}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name:\n        if 'partner_id' in self._context:\n            partner = self.env['res.partner'].browse(self._context['partner_id'])\n            domain = expression.AND([domain, [('id', 'child_of', partner.commercial_partner_id.ids)]])\n        if 'partner_ids' in self._context:\n            domain = expression.AND([domain, [('id', 'in', self._context['partner_ids'])]])\n        if 'company_id' in self._context:\n            domain = expression.AND([domain, [('company_id', '=', self._context['company_id'])]])\n        if 'company_ids' in self._context:\n            domain = expression.AND([domain, [('company_id', 'in', self._context['company_ids'])]])\n        if 'user_id' in self._context:\n            domain = expression.AND([domain, [('user_id', '=', self._context['user_id'])]])\n        if 'user_ids' in self._context:\n            domain = expression.AND([domain, [('user_id', 'in', self._context['user_ids'])]])\n        if 'journal_id' in self._context:\n            domain = expression.AND([domain, [('journal_id', '=', self._context['journal_id'])]])\n        if 'journal_ids' in self._context:\n            domain = expression.AND([domain, [('journal_id', 'in', self._context['journal_ids'])]])\n        if 'account_id' in self._context:\n            domain = expression.AND([domain, [('id', '=', self._context['account_id'])]])\n        if 'account_ids' in self._context:\n            domain = expression.AND([domain, [('id', 'in', self._context['account_ids'])]])\n        if 'analytic_account_id' in self._context:\n            domain = expression.AND([domain, [('id', '=', self._context['analytic_account_id'])]])\n        if 'analytic_account_ids' in self._context:\n            domain = expression.AND([domain, [('id', 'in', self._context['analytic_account_ids'])]])\n        if 'analytic_tag_ids' in self._context:\n            domain = expression.AND([domain, [('", "CodeBleu_score": 32.31464367499177}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self.env.context.get('active_model') =='res.partner' and self.env.context.get('active_ids'):\n        # If no name is given and a specific context is present, it orders accounts by frequency for a partner.\n        partner_ids = self.env.context.get('active_ids')\n        partner_ids.sort(key=lambda partner_id: bisect_left(self.env['res.partner'].browse(partner_ids)._get_partner_frequency(), partner_id))\n        return [('id', 'in', partner_ids)], domain\n\n    # Constructs a search domain based on the name and operator, combines it with the given domain, and performs the search with optional limit and order parameters.\n    name = name.strip()\n    if operator in expression.NEGATIVE_TERM_OPERATORS:\n        domain = expression.OR(domain, ['|', ('name', operator, name), ('name', operator, name.capitalize())])\n    else:\n        domain = expression.AND(domain, ['|', ('name', operator, name), ('name', operator, name.capitalize())])\n    return super(Partner, self)._name_search(name, domain, operator=operator, limit=limit, order=order)\n\n", "CodeBleu_score": 44.86656540167954}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t\n    for field in self:\n        if field.name in excluded:\n            continue\n        if field.name == 'name':\n            new.name = field.name\n        else:\n            new.write({field.name: field.value})\n    if new.name and new.name.startswith('Copy of '):\n        new.name = new.name.replace('Copy of ', '')\n    return new\n\n", "CodeBleu_score": 31.427309456841083}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    # if new.name and not new.name.startswith(self.name):\n    #     # The new record's name does not match the current record's name, so we need to update the translations for the name field in the cache\n    #     new.name = self.name\n    #     new.name_get()\n    #     new._name_search(self.name, operator='ilike', limit=100)\n    #     new.name = new.name\n    #     new.name_get()\n    #     new._name_search(new.name, operator='ilike', limit=100)\n    #     new.name = new.name\n    #     new.name_get()\n    #     new._name_search(new.name, operator='ilike', limit=100)\n    #     new.name = new.name\n    #     new.name_get()\n    #     new._name_search(new.name, operator='ilike', limit=100)\n    #     new.name = new.name\n    #     new.name_get()\n    #     new._name_search(new.name, operator='ilike', limit=100)\n    #     new.name = new.name\n    #     new.name_get()\n    #     new._name_search(new.name, operator='ilike', limit=100)\n    #     new.name = new.name\n    #     new.name_get()\n    #     new._name_search(new.name, operator='ilike', limit=100)\n    #     new.name = new.name\n    #     new.name_get()\n    #     new._name_search(new.name, operator='ilike', limit=100)\n    #     new.name = new.name\n    #     new.name_get()\n    #     new._name_search(new.name, operator='ilike', limit=100)\n    #     new.name = new.name\n    #     new.name_get()\n    #     new._name_search(new.name, operator='ilike', limit=100)\n    #     new.name = new.name\n    #     new.name_get()\n    #     new._name_search(new.name,", "CodeBleu_score": 4.5673076923076925}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    for lang in self.env['res.lang'].search([]):\n        for field in self.env['ir.translation'].search([('lang', '=', lang.id), ('type', '=','model'), ('name', 'in', self._name.split('.'))]):\n            if field.src =='model' and field.key not in excluded:\n                new.env['ir.translation'].search([('lang', '=', lang.id), ('type', '=','model'), ('name', '=', field.name), ('key', '=', field.key)]).write({\n                    'value': field.value,\n                })\n            elif field.src =='model' and field.key == 'name':\n                if new._name.endswith('_name'):\n                    new.env['ir.translation'].search([('lang', '=', lang.id), ('type', '=','model'), ('name', '=', field.name), ('key', '=', field.key)]).write({\n                        'value': field.value.replace('%s', new._name.replace('_name', '')),\n                    })\n\n", "CodeBleu_score": 29.89559040037334}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    domain = [('type', '=', 'out_invoice'), ('state', 'not in', ['draft', 'cancel']), ('invoice_id.partner_id', '=', self.id)]\n    if self.analytic_account_id:\n        domain += [('invoice_id.analytic_account_id', '=', self.analytic_account_id.id)]\n    if self.analytic_tag_ids:\n        domain += [('invoice_id.analytic_tag_ids', 'in', self.analytic_tag_ids.ids)]\n    if self.analytic_account_ids:\n        domain += [('invoice_id.analytic_account_id', 'in', self.analytic_account_ids.ids)]\n    if self.analytic_tag_ids:\n        domain += [('invoice_id.analytic_tag_ids', 'in', self.analytic_tag_ids.ids)]\n    if self.partner_id.property_account_receivable_id:\n        domain += [('account_id', '=', self.partner_id.property_account_receivable_id.id)]\n    if self.company_id:\n        domain += [('company_id', '=', self.company_id.id)]\n    invoice_ids = self.env['account.move'].search(domain).mapped('invoice_id').ids\n    if invoice_ids:\n        return {\n            'name': _('Customer Invoices'),\n            'type': 'ir.actions.act_window',\n            'view_mode': 'tree,form',\n           'res_model': 'account.move',\n            'domain': [('id', 'in', invoice_ids)],\n        }\n    return True\n\n", "CodeBleu_score": 35.717038407461644}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    domain = []\n    if self.analytic_account_id:\n        domain += [('analytic_account_id', '=', self.analytic_account_id.id)]\n    if self.partner_id:\n        domain += [('partner_id', '=', self.partner_id.id)]\n    if self.sale_type:\n        domain += [('invoice_type', '=', self.sale_type)]\n    if self.invoice_type:\n        domain += [('invoice_type', '=', self.invoice_type)]\n    if self.date_from:\n        domain += [('date_invoice', '>=', self.date_from)]\n    if self.date_to:\n        domain += [('date_invoice', '<=', self.date_to)]\n    if self.invoice_state:\n        domain += [('state', '=', self.invoice_state)]\n    if self.invoice_type:\n        domain += [('type', '=', self.invoice_type)]\n    if self.account_id:\n        domain += [('account_id', '=', self.account_id.id)]\n    if self.journal_id:\n        domain += [('journal_id', '=', self.journal_id.id)]\n    if self.payment_term_id:\n        domain += [('payment_term_id', '=', self.payment_term_id.id)]\n    if self.company_id:\n        domain += [('company_id', '=', self.company_id.id)]\n    if self.currency_id:\n        domain += [('currency_id', '=', self.currency_id.id)]\n    if self.user_id:\n        domain += [('user_id', '=', self.user_id.id)]\n    if self.payment_state:\n        domain += [('state', '=', self.payment_state)]\n    if self.partner_id:\n        domain += [('partner_id', '=', self.partner_id.id)]\n    if self.payment_type:\n        domain += [('payment_type', '=', self.payment_type)]\n    if self.payment_method_id:\n        domain += [('payment_method_id', '=', self.payment_method_id.id)]\n    if self.partner_bank_id:\n        domain += [('partner_bank_id', '=', self.partner_bank_id.id)]\n    if self.partner_bank_account_id:\n        domain += [('partner_bank", "CodeBleu_score": 17.7931229222209}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    action = self.env.ref('account.action_move_out_invoice_type').read()[0]\n    action['context'] = {'type': 'out_invoice'}\n    action['domain'] = [('id', 'in', self.env['account.move'].search([('id', 'in', self.env['account.move.line'].search([('account_id.internal_type', '=','receivable'), ('account_id.user_type_id.type', '=','receivable'), ('move_id.partner_id', '=', self.partner_id.id), ('move_id.analytic_account_id', '=', self.analytic_account_id.id)]).mapped('move_id').ids).distinct().ids)))]\n    return action\n\n", "CodeBleu_score": 37.10618904614103}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['context'] = {'default_move_type': 'in_invoice'}\n    action['domain'] = [('id', 'in', self.env['account.move.line'].search([('move_id', 'in', self.env['account.move'].search([('purchase_type_id', '=', self.id)]).ids)]).mapped('move_id').ids)]\n    return action\n\n", "CodeBleu_score": 27.695551187509015}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['context'] = {'default_move_type': 'in_invoice', 'default_purchase_id': self.id}\n    action['domain'] = [('id', 'in', self.env['account.move'].search([('purchase_id', '=', self.id)]).ids)]\n    return action\n\n", "CodeBleu_score": 24.465588260368516}, {"code": "def action_view_vendor_bill(self)\n\t\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    move_ids = self.env['account.move'].search([('purchase_id', '=', self.id)]).ids\n    action['context'] = {'default_move_type': 'in_invoice', 'default_purchase_id': self.id, 'default_move_ids': move_ids}\n    return action\n\n", "CodeBleu_score": 22.759193765148872}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        values.pop('attachment_ids')\n    with self._context.get('no_attachment_check', False):\n        return super(AccountInvoice, self).write(values)\n\n", "CodeBleu_score": 31.954495115653973}, {"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        values.pop('attachment_ids')\n    with self._context.get('no_attachment_check', False):\n        return super(AccountInvoice, self).write(values)\n\n", "CodeBleu_score": 31.954495115653973}, {"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        values.pop('attachment_ids')\n    with self.with_context(active_test=True).attachment_context():\n        return super(AccountInvoice, self).write(values)\n\n", "CodeBleu_score": 32.45965464753417}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\t\n    # Check if bank account creation is skipped\n    if self.env['ir.config_parameter'].sudo().get_param('account.skip_bank_account_creation'):\n        return self.env['res.partner.bank']\n    # Search for an existing bank account with the same account number and partner ID\n    bank_account = self.env['res.partner.bank'].search([('partner_id', '=', self.id), ('acc_number', '=', self.acc_number)], limit=1)\n    # If none is found, create a new one\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create({\n            'partner_id': self.id,\n            'acc_number': self.acc_number,\n            'acc_type': self.acc_type,\n            'bank_name': self.bank_name,\n            'bank_bic': self.bank_bic,\n            'bank_id': self.bank_id.id,\n            'bank_country_id': self.bank_country_id.id,\n            'bank_city': self.bank_city,\n            'bank_street': self.bank_street,\n            'bank_zip': self.bank_zip,\n            'bank_state': self.bank_state,\n            'bank_country_id': self.bank_country_id.id,\n            'bank_phone': self.bank_phone,\n            'bank_fax': self.bank_fax,\n            'bank_email': self.bank_email,\n            'bank_website': self.bank_website,\n            'bank_iban': self.bank_iban,\n            'bank_swift': self.bank_swift,\n            'bank_aba': self.bank_aba,\n            'bank_sort_code': self.bank_sort_code,\n            'bank_account_name': self.bank_account_name,\n            'bank_account_currency_id': self.bank_account_currency_id.id,\n            'bank_account_number': self.bank_account_number,\n            'bank_account_holder_name': self.bank_account_holder_name,\n            'bank_account_holder_type': self.bank_account_holder_type,\n            'bank_account_holder_address': self.bank_account_holder", "CodeBleu_score": 38.798589060591866}, {"code": "def _find_or_create_bank_account(self)\n\t\n    # if self.env['ir.config_parameter'].sudo().get_param('account.skip.bank_account_creation'):\n    #     return self.env['res.partner.bank']\n    # bank_account = self.env['res.partner.bank'].search([('partner_id', '=', self.id), ('company_id', '=', self.env.company.id)], limit=1)\n    # if not bank_account:\n    #     bank_account = self.env['res.partner.bank'].create({\n    #         'partner_id': self.id,\n    #         'company_id': self.env.company.id,\n    #     })\n    # return bank_account\n    return self.env['res.partner.bank'].search([('partner_id', '=', self.id), ('company_id', '=', self.env.company.id)], limit=1)\n\n", "CodeBleu_score": 10.44307507897568}, {"code": "def _find_or_create_bank_account(self)\n\t\n    if self.env['ir.config_parameter'].sudo().get_param('account_bank_statement_import.skip_bank_account_creation'):\n        return self.env['account.bank.statement.import.bank.account']\n    else:\n        bank_account = self.env['account.bank.statement.import.bank.account'].search([('partner_id', '=', self.partner_id.id), ('company_id', '=', self.company_id.id), ('account_number', '=', self.account_number)])\n        if bank_account:\n            return bank_account\n        else:\n            return self.env['account.bank.statement.import.bank.account'].create({'partner_id': self.partner_id.id, 'company_id': self.company_id.id, 'account_number': self.account_number})\n\n", "CodeBleu_score": 42.66125502002623}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    if currency.is_zero(balance):\n        return {\n            'amount_currency': 0.0,\n            'amount_company_signed': 0.0,\n            'amount_signed': 0.0,\n            'currency_id': currency.id,\n        }\n    if currency.is_zero(amount_currency):\n        amount_currency = balance\n    sign = currency.is_positive(amount_currency) and +1 or -1\n    amount_company_signed = currency.with_context(date=self.date).compute(amount_currency, self.company_id.currency_id)\n    amount_signed = sign * amount_currency\n    amount_signed = currency.round(amount_signed)\n    # Keep the existing sign of the total balance in the company currency.\n    amount_company_signed = sign * amount_company_signed\n    # If the sign has changed, this is a credit/debit transaction.\n    if sign < 0:\n        balance = -balance\n    return {\n        'amount_currency': amount_currency,\n        'amount_company_signed': amount_company_signed,\n        'amount_signed': amount_signed,\n        'currency_id': currency.id,\n    }\n\n", "CodeBleu_score": 23.403425669323724}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    # Retrieve relevant accounting amounts and currencies\n    amount_currency_in_company_currency = currency.with_context(date=self.date).compute(amount_currency, self.company_id.currency_id)\n    amount_currency_in_transaction_currency = currency.with_context(date=self.date).compute(amount_currency, self.currency_id)\n    amount_in_company_currency = currency.with_context(date=self.date).compute(balance, self.company_id.currency_id)\n    amount_in_transaction_currency = currency.with_context(date=self.date).compute(balance, self.currency_id)\n    # Compute transaction amount, journal amount, and company amount\n    transaction_amount = amount_currency_in_transaction_currency if self.currency_id.is_zero(self) else amount_currency_in_company_currency\n    journal_amount = amount_in_transaction_currency if self.currency_id.is_zero(self) else amount_in_company_currency\n    company_amount = amount_currency_in_company_currency if self.currency_id.is_zero(self) else amount_currency_in_transaction_currency\n    # Adjust transaction amount and balance\n    if self.currency_id.is_zero(self):\n        balance = balance * (1.0 - self.amount_currency / amount_currency)\n    else:\n        balance = balance * (1.0 - self.amount_currency / amount_currency_in_transaction_currency)\n    return {\n        'transaction_amount': transaction_amount,\n        'journal_amount': journal_amount,\n        'company_amount': company_amount,\n        'balance': balance,\n    }\n\n", "CodeBleu_score": 23.554702443772022}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    # Get the relevant accounting amounts and currencies for the transaction\n    if currency.is_zero(balance):\n        # If the balance is zero, the transaction amounts are zero\n        amount_currency_in_company_currency = 0.0\n        amount_currency_in_transaction_currency = 0.0\n    else:\n        # If the balance is non-zero, the transaction amounts are the same as the balance\n        amount_currency_in_company_currency = balance\n        amount_currency_in_transaction_currency = balance\n\n    # Adjust the transaction amount and balance depending on the currency type\n    if currency.is_zero(amount_currency):\n        # If the amount is zero, the transaction amount is zero\n        amount_currency_in_transaction_currency = 0.0\n    elif currency.is_zero(balance):\n        # If the balance is zero, the transaction amount is the same as the amount\n        amount_currency_in_transaction_currency = amount_currency\n    else:\n        # If the balance and amount are both non-zero, the transaction amount is the same as the balance\n        amount_currency_in_transaction_currency = balance\n\n    # Return the calculated amounts in a dictionary\n    return {\n        'amount_currency_in_company_currency': amount_currency_in_company_currency,\n        'amount_currency_in_transaction_currency': amount_currency_in_transaction_currency,\n    }\n\n", "CodeBleu_score": 19.01919580407317}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids.unlink()\n        if journal.type in ('bank', 'cash'):\n            payment_method_lines = []\n            for payment_method in journal.default_outbound_payment_method_ids:\n                payment_method_lines.append(\n                    (0, 0, {'payment_method_id': payment_method.id, 'amount': payment_method.default_amount}))\n            journal.outbound_payment_method_line_ids = payment_method_lines\n\n", "CodeBleu_score": 40.51460854661614}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    self.outbound_payment_method_line_ids.unlink()\n    for journal in self:\n        if journal.type in ['bank', 'cash']:\n            default_payment_methods = journal.env['account.journal'].get_default_outbound_payment_methods()\n            for payment_method in default_payment_methods:\n                journal.outbound_payment_method_line_ids.create({\n                    'payment_method_id': payment_method.id,\n                    'journal_id': journal.id,\n                })\n\n", "CodeBleu_score": 37.140349908174194}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids.unlink()\n        if journal.type in ['bank', 'cash']:\n            default_outbound_payment_methods = journal.env['account.journal'].search([('type', '=', 'bank'), ('default_outbound_payment_method', '=', True)])\n            for default_outbound_payment_method in default_outbound_payment_methods:\n                journal.outbound_payment_method_line_ids.create({\n                    'journal_id': journal.id,\n                    'payment_method_id': default_outbound_payment_method.id,\n                   'sequence': default_outbound_payment_method.sequence,\n                })\n\n", "CodeBleu_score": 36.4261149179119}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t\n    for move in self:\n        if move.invoice_date and not move.date:\n            move.date = move.invoice_date\n        if move.invoice_date and not move.date:\n            move.date = move.invoice_date\n        if move.invoice_date and not move.date:\n            move.date = move.invoice_date\n        if move.invoice_date and not move.date:\n            move.date = move.invoice_date\n        if move.invoice_date and not move.date:\n            move.date = move.invoice_date\n        if move.invoice_date and not move.date:\n            move.date = move.invoice_date\n        if move.invoice_date and not move.date:\n            move.date = move.invoice_date\n        if move.invoice_date and not move.date:\n            move.date = move.invoice_date\n        if move.invoice_date and not move.date:\n            move.date = move.invoice_date\n        if move.invoice_date and not move.date:\n            move.date = move.invoice_date\n        if move.invoice_date and not move.date:\n            move.date = move.invoice_date\n        if move.invoice_date and not move.date:\n            move.date = move.invoice_date\n        if move.invoice_date and not move.date:\n            move.date = move.invoice_date\n        if move.invoice_date and not move.date:\n            move.date = move.invoice_date\n        if move.invoice_date and not move.date:\n            move.date = move.invoice_date\n        if move.invoice_date and not move.date:\n            move.date = move.invoice_date\n        if move.invoice_date and not move.date:\n            move.date = move.invoice_date\n        if move.invoice_date and not move.date:\n            move.date = move.invoice_date\n        if move.invoice_date and not move.date:\n            move.date = move.invoice_date\n        if move.invoice_date and not move.date:\n            move.date = move.invoice_date\n        if move.invoice_date and not move.date:\n            move.date = move.invoice_date\n        if move.invoice_date and not move.date:\n            move.date = move.invoice_date", "CodeBleu_score": 22.86968730463816}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if move.invoice_date and move.invoice_date!= move.date:\n            move.date = move.invoice_date\n        elif move.invoice_date is None and move.date!= date.today():\n            move.date = date.today()\n        if move.invoice_date:\n            if not move.is_sale_document() and move.invoice_date!= move.invoice_date_accounting:\n                move.invoice_date_accounting = move.invoice_date + relativedelta(days=move.invoice_tax_report_impact)\n                move.date_maturity = move.invoice_date_accounting + relativedelta(days=move.invoice_tax_report_impact)\n            if move.invoice_date!= move.invoice_date_accounting:\n                with ExitStack() as stack:\n                    stack.enter_context(move.env.context.copy())\n                    stack.enter_context(move.with_context(recompute_date_maturity=True))\n                    move.write({'invoice_date_accounting': move.invoice_date})\n\n", "CodeBleu_score": 35.49048222782847}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if move.date_invoice:\n            if move.invoice_payment_state == 'in_payment':\n                move.date = move.date_invoice\n            else:\n                move.date = move.date_invoice - relativedelta(days=move.company_id.tax_report_delay)\n        elif move.date:\n            pass\n        else:\n            move.date = fields.Date.context_today(self)\n\n", "CodeBleu_score": 28.552879685634153}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.type == 'out_invoice':\n            move.invoice_payment_term_id = move.partner_id.property_payment_term_id\n        elif move.type == 'in_invoice':\n            move.invoice_payment_term_id = move.company_id.property_supplier_payment_term_id\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 41.20082406967634}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.type == 'in_invoice':\n            move.invoice_payment_term_id = move.partner_id.property_payment_term_id\n        elif move.type == 'out_invoice':\n            move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 44.6196964881748}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.type in ['in_invoice', 'in_refund']:\n            move.invoice_payment_term_id = move.partner_id.property_payment_term_id\n        elif move.type in ['out_invoice', 'out_refund']:\n            move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 45.40883786549312}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        tax.tax_group_id = False\n        if tax.company_id:\n            tax.tax_group_id = tax.env['account.tax.group'].search([('company_id', '=', tax.company_id.id), ('country_id', '=', tax.country_id.id)], limit=1)\n            if not tax.tax_group_id:\n                tax.tax_group_id = tax.env['account.tax.group'].search([('company_id', '=', tax.company_id.id), ('country_id', '=', False)], limit=1)\n\n", "CodeBleu_score": 25.589303394982956}, {"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        tax_group_id = False\n        if tax.country_id and tax.company_id:\n            tax_group_id = self.env['account.tax.group'].search([('country_id', '=', tax.country_id.id), ('company_id', '=', tax.company_id.id)], limit=1)\n        if not tax_group_id:\n            tax_group_id = self.env['account.tax.group'].search([('country_id', '=', False), ('company_id', '=', tax.company_id.id)], limit=1)\n        tax.tax_group_id = tax_group_id\n\n", "CodeBleu_score": 26.879858056558632}, {"code": " def _compute_tax_group_id(self)\n\t\n    tax_groups = self.env['account.tax.group']\n    for tax in self.filtered(lambda tax: tax.group_id):\n        tax_groups_by_country = tax_groups.search([('country_id', '=', tax.country_id.id)])\n        tax_groups_by_company = tax_groups.search([('company_id', '=', tax.company_id.id)])\n        tax_groups_by_country_and_company = tax_groups.search([('country_id', '=', tax.country_id.id), ('company_id', '=', tax.company_id.id)])\n        if tax_groups_by_country_and_company:\n            tax.group_id = tax_groups_by_country_and_company[0]\n        elif tax_groups_by_company:\n            tax.group_id = tax_groups_by_company[0]\n        else:\n            tax.group_id = tax_groups_by_country[0]\n\n", "CodeBleu_score": 26.537038146263342}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n\n    # Set the database\n    self.login(login, password, db)\n\n    # Prepare the POST request data\n    data = {\n        'db': db,\n        'force': force,\n       'module': module_file,\n    }\n\n    # Upload the module file\n    response = self.post(url, data=data)\n\n    # Return the response text\n    return response.text\n\n", "CodeBleu_score": 20.886282243015923}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set the database in the session\n    self.get(url + \"/web/database/selector/load\")\n    self.post(url + \"/web/database/selector/load\", data={\"db\": db})\n    # Prepare the POST request data\n    data = {\n        \"login\": login,\n        \"password\":,\n        \"force\": force,\n        \"module_file\": module_file,\n    }\n    # Upload the module file\n    response = self.post(url + \"/web/base_import_module/login_upload\", data=data)\n    return response.text\n\n", "CodeBleu_score": 27.340040609001992}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set the database in the session\n    self.get(url + '/web/database/selector/load')\n    self.post(url + '/web/database/selector/load', data={'db': db})\n\n    # Prepare the POST request data\n    data = {\n        'login': login,\n        'password':,\n        'force': force,\n    }\n    files = {'file': module_file}\n\n    # Upload the module file\n    response = self.post(url + '/web/base/import_module/login_upload', data=data, files=files)\n    return response.text\n\n", "CodeBleu_score": 30.97890881462838}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t\n    # Create a new database registry\n    registry = odoo.modules.registry.Registry(sys.argv[1])\n\n    # Create a TranslationImporter\n    importer = odoo.tools.translate.TranslationImporter(registry, overwrite=True)\n\n    # Load translation files\n    importer.load_translations()\n\n    # Save translations\n    importer.save_translations()\n\n", "CodeBleu_score": 10.497309628100265}, {"code": "def import_translation()\n\t\n    # Get configuration settings\n    db_name = odoo.config['db_name']\n    overwrite_translations = odoo.config['overwrite_translations']\n\n    # Create database registry\n    registry = odoo.registry(db_name)\n\n    # Create TranslationImporter\n    importer = odoo.tools.misc.TranslationImporter(registry, overwrite_translations)\n\n    # Load translation files\n    importer.load_translation_files()\n\n    # Save translations\n    importer.save_translations()\n\n", "CodeBleu_score": 20.085219707786088}, {"code": "def import_translation()\n\t\n\n    # Set up logging\n    logging.basicConfig(level=logging.DEBUG, format='%(asctime)s %(levelname)s %(message)s')\n\n    # Get configuration settings\n    db_name = os.environ['DB_NAME']\n    overwrite = os.environ['OVERWRITE']\n\n    # Create a database registry\n    registry = odoo.registry(db_name)\n\n    # Create a cursor to initialize a TranslationImporter\n    with registry.cursor() as cr:\n        importer = odoo.tools.translation.TranslationImporter(cr, overwrite=overwrite)\n        importer.load_all()\n\n", "CodeBleu_score": 37.49591216967591}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\t\n    if name in self.children:\n        return self.children[name]\n    new_node = Node(name, info)\n    new_node.depth = self.depth + 1\n    new_node.parent = self\n    self.children[name] = new_node\n    self.children = sorted(self.children.values(), key=lambda child: child.name)\n    return new_node\n\n", "CodeBleu_score": 38.54436227992385}, {"code": "def add_child(self, name, info)\n\t\n    node = Node(name, info)\n    node.depth = self.depth + 1\n    if node not in self.children:\n        self.children.append(node)\n    self.children.sort(key=lambda x: x.name)\n    return node\n\n", "CodeBleu_score": 43.966211889553925}, {"code": "def add_child(self, name, info)\n\t\n    # Create a new node with the given name and info\n    new_node = Node(name, info)\n    # Set the depth of the new node to the depth of the parent plus 1\n    new_node.depth = self.depth + 1\n    # Append the new node to the children list if it's not already present\n    if new_node not in self.children:\n        self.children.append(new_node)\n    # Inherit certain attributes from the parent if they exist\n    if hasattr(self, 'parent'):\n        new_node.parent = self\n    if hasattr(self, 'root'):\n        new_node.root = self.root\n    # Sort the children by name\n    self.children.sort(key=lambda child: child.name)\n    # Return the new node\n    return new_node\n\n", "CodeBleu_score": 45.159910982724675}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\n        \"account\": account,\n        \"dates\": dates,\n        \"balances\": [0] * len(dates),\n        \"root_type\": frappe.db.get_value(\"Account\", account, \"root_type\"),\n    }\n\n    for entry in gl_entries:\n        if entry.account == account:\n            if result[\"root_type\"] == \"Asset\" or result[\"root_type\"] == \"Expense\":\n                result[\"balances\"][entry.posting_date] += entry.debit - entry.credit\n            else:\n                result[\"balances\"][entry.posting_date] += entry.credit - entry.debit\n\n    return result\n\n", "CodeBleu_score": 23.304253637440546}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\n        \"dates\": dates,\n        \"debit\": [0] * len(dates),\n        \"credit\": [0] * len(dates),\n        \"balance\": [0] * len(dates),\n    }\n    root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n    if root_type not in [\"Asset\", \"Expense\"]:\n        result[\"debit\"] = [x * -1 for x in result[\"debit\"]]\n        result[\"credit\"] = [x * -1 for x in result[\"credit\"]]\n        result[\"balance\"] = [x * -1 for x in result[\"balance\"]]\n    for entry in gl_entries:\n        for i, date in enumerate(dates):\n            if date == entry.posting_date:\n                if entry.debit:\n                    result[\"debit\"][i] += entry.debit\n                    result[\"credit\"][i] += entry.credit\n                else:\n                    result[\"debit\"][i] += entry.credit\n                    result[\"credit\"][i] += entry.debit\n                break\n    if root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n        result[\"balance\"] = [\n            result[\"balance\"][i] + result[\"debit\"][i] - result[\"credit\"][i]\n            for i in range(len(result[\"balance\"]))\n        ]\n    return result\n\n", "CodeBleu_score": 29.718106510733982}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\n        \"account\": account,\n        \"dates\": dates,\n        \"balance\": [0] * len(dates),\n        \"accumulated_balance\": [0] * len(dates),\n        \"total_debit\": [0] * len(dates),\n        \"total_credit\": [0] * len(dates),\n    }\n\n    root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n    if root_type not in [\"Asset\", \"Expense\"]:\n        result[\"balance\"] = [0] * len(dates)\n        result[\"accumulated_balance\"] = [0] * len(dates)\n        result[\"total_debit\"] = [0] * len(dates)\n        result[\"total_credit\"] = [0] * len(dates)\n\n    for entry in gl_entries:\n        date = entry.posting_date\n        if date not in dates:\n            continue\n        index = dates.index(date)\n        result[\"total_debit\"][index] += entry.debit\n        result[\"total_credit\"][index] += entry.credit\n        if root_type in [\"Asset\", \"Expense\"]:\n            result[\"balance\"][index] += entry.debit - entry.credit\n            result[\"accumulated_balance\"][index] += entry.debit - entry.credit\n        else:\n            result[\"balance\"][index] -= entry.debit - entry.credit\n            result[\"accumulated_balance\"][index] -= entry.debit - entry.credit\n\n    return result\n\n", "CodeBleu_score": 25.965595960732752}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t\n\n    # If the account type is changed from \"Receivable\" or \"Payable\" to a non-receivable/payable type and there are existing general ledger entries for the account, generate a warning message and add a comment to the account record.\n    if (self.account_type in [\"Receivable\", \"Payable\"]) and (self.account_type!= self.old_account_type) and (self.account_type not in [\"Bank\", \"Cash\", \"Expense\", \"Income\"]):\n        # Get the total amount of the general ledger entries for the account.\n        total_amount = 0\n        for gl_entry in frappe.get_all(\"GL Entry\", filters={\"account\": self.name}, fields=[\"sum(debit) as debit_amount\", \"sum(credit) as credit_amount\"]):\n            total_amount += gl_entry.debit_amount - gl_entry.credit_amount\n\n        # Generate the warning message and add the comment to the account record.\n        warning_message = \"The account type of this account has been changed from '{old_account_type}' to '{new_account_type}'. There are existing general ledger entries for this account. Please ensure that the account type is changed back to '{old_account_type}' if necessary.\".format(\n            old_account_type=self.old_account_type, new_account_type=self.account_type\n        )\n        if total_amount > 0:\n            warning_message += \" The total amount of the general ledger entries for this account is {total_amount}.\".format(total_amount=total_amount)\n        self.add_comment(\"Warning\", warning_message)\n\n", "CodeBleu_score": 34.12394379716199}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type!= self.old_account_type:\n        if self.account_type not in [\"Receivable\", \"Payable\"]:\n            if frappe.db.sql(\"\"\"select count(*) from `tabGL Entry` where account = %s\"\"\", self.name):\n                frappe.msgprint(\n                    _(\"Warning: Changing account type from {0} to {1} will result in loss of data in the Accounts report.\").format(\n                        self.old_account_type, self.account_type),\n                    title=_(\"Account Type Change\"),\n                    indicator=\"orange\",\n                    alert=True,\n                )\n                frappe.db.set_value(\n                    \"Account\", self.name, \"comments\", frappe.db.get_value(\"Account\", self.name, \"comments\") + \"\n", "CodeBleu_score": 26.30793509839001}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type == \"Receivable\" and self.old_account_type!= \"Receivable\":\n        receivable_account_ids = frappe.db.sql(\n            \"\"\"select name from `tabAccount` where account_type = 'Receivable' and name!= %s\"\"\", (self.name), as_dict=1\n        )\n        if receivable_account_ids:\n            frappe.msgprint(\n                _(\"Account {0} is being changed from Receivable to a non-receivable account type. The following general ledger entries have been created for this account and may need to be updated manually: {1}\").format(\n                    self.name, \", \".join([d.name for d in receivable_account_ids])\n                )\n            )\n            self.add_comment(\"Account Type Changed\", _(\"Account Type Changed from Receivable to a non-receivable account type. The following general ledger entries have been created for this account and may need to be updated manually: {0}\").format(\n                \", \".join([d.name for d in receivable_account_ids])\n            ))\n    elif self.account_type == \"Payable\" and self.old_account_type!= \"Payable\":\n        payable_account_ids = frappe.db.sql(\n            \"\"\"select name from `tabAccount` where account_type = 'Payable' and name!= %s\"\"\", (self.name), as_dict=1\n        )\n        if payable_account_ids:\n            frappe.msgprint(\n                _(\"Account {0} is being changed from Payable to a non-payable account type. The following general ledger entries have been created for this account and may need to be updated manually: {1}\").format(\n                    self.name, \", \".join([d.name for d in payable_account_ids])\n                )\n            )\n            self.add_comment(\"Account Type Changed\", _(\"Account Type Changed from Payable to a non-payable account type. The following general ledger entries have been created for this account and may need to be updated manually: {0}\").format(\n                \", \".join([d.name for d in payable_account_ids])\n            ))\n\n", "CodeBleu_score": 33.908432669707636}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t\n    if self.company and self.company!= frappe.defaults.get_user_default(\"company\"):\n        self.company = frappe.defaults.get_user_default(\"company\")\n    if self.company_currency!= frappe.defaults.get_user_default(\"company_currency\"):\n        self.company_currency = frappe.defaults.get_user_default(\"company_currency\")\n\n    if self.company_currency and self.company_currency!= self.currency:\n        # check for existing entries with different currency\n        entries = frappe.get_all(\"GL Entry\", filters={\"company\": self.company, \"account\": self.name, \"currency\": (\"!=\", self.company_currency)}, fields=[\"name\"])\n        if entries:\n            frappe.throw(_(\"Cannot change currency for {0}. There are existing entries with different currency\").format(self.name))\n\n    self.set(\"currency\", self.company_currency)\n    self.set(\"is_explicit_currency\", 1)\n\n", "CodeBleu_score": 36.002423610166424}, {"code": "def validate_account_currency(self)\n\t\n    if self.company:\n        self.company_currency = self.get_company_currency()\n\n    if self.company_currency:\n        self.currency = self.company_currency\n    else:\n        self.currency = None\n\n    if self.company_currency and self.company_currency!= self.currency:\n        self.mark_currency_explicitly_set()\n        if self.get_gl_entries():\n            throw(_(\"Cannot change account currency. General Ledger entries already exist with a different currency.\"))\n\n", "CodeBleu_score": 24.328611509863237}, {"code": "def validate_account_currency(self)\n\t\n    if not self.currency:\n        self.currency = self.company and frappe.db.get_value(\"Company\", self.company, \"default_currency\")\n\n    if self.currency:\n        self.is_explicit_currency = 1\n\n    if self.is_explicit_currency:\n        if self.company and self.company!= self.parent:\n            throw(_(\"Account {0} is of type {1}, but Company {2} is not its parent\").format(self.name, self.account_type, self.company))\n\n        if self.company and self.company!= self.parent:\n            throw(_(\"Account {0} is of type {1}, but Company {2} is not its parent\").format(self.name, self.account_type, self.company))\n\n        if self.company and self.company!= self.parent:\n            throw(_(\"Account {0} is of type {1}, but Company {2} is not its parent\").format(self.name, self.account_type, self.company))\n\n        if self.company and self.company!= self.parent:\n            throw(_(\"Account {0} is of type {1}, but Company {2} is not its parent\").format(self.name, self.account_type, self.company))\n\n        if self.company and self.company!= self.parent:\n            throw(_(\"Account {0} is of type {1}, but Company {2} is not its parent\").format(self.name, self.account_type, self.company))\n\n        if self.company and self.company!= self.parent:\n            throw(_(\"Account {0} is of type {1}, but Company {2} is not its parent\").format(self.name, self.account_type, self.company))\n\n        if self.company and self.company!= self.parent:\n            throw(_(\"Account {0} is of type {1}, but Company {2} is not its parent\").format(self.name, self.account_type, self.company))\n\n        if self.company and self.company!= self.parent:\n            throw(_(\"Account {0} is of type {1}, but Company {2} is not its parent\").format(self.name, self.account_type, self.company))\n\n        if self.company and self.company!= self.parent:\n            throw(_(\"Account {0} is of type {", "CodeBleu_score": 26.6742021453495}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n\n    aggregated_entries = {}\n\n    for entry in entries:\n        key = tuple(entry.get(dimension) for dimension in accounting_dimensions)\n\n        if key not in aggregated_entries:\n            aggregated_entries[key] = {\n                \"debit\": 0,\n                \"credit\": 0,\n                \"debit_in_account_currency\": 0,\n                \"credit_in_account_currency\": 0,\n            }\n\n        aggregated_entries[key][\"debit\"] += entry.debit\n        aggregated_entries[key][\"credit\"] += entry.credit\n        aggregated_entries[key][\"debit_in_account_currency\"] += entry.debit_in_account_currency\n        aggregated_entries[key][\"credit_in_account_currency\"] += entry.credit_in_account_currency\n\n    return aggregated_entries\n\n", "CodeBleu_score": 42.4879243419784}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    aggregated_entries = {}\n    for entry in entries:\n        key = tuple(entry[accounting_dimension] for accounting_dimension in accounting_dimensions)\n        if key not in aggregated_entries:\n            aggregated_entries[key] = {\n                \"debit\": entry.debit,\n                \"credit\": entry.credit,\n                \"debit_in_account_currency\": entry.debit_in_account_currency,\n                \"credit_in_account_currency\": entry.credit_in_account_currency,\n            }\n        else:\n            aggregated_entries[key][\"debit\"] += entry.debit\n            aggregated_entries[key][\"credit\"] += entry.credit\n            aggregated_entries[key][\"debit_in_account_currency\"] += entry.debit_in_account_currency\n            aggregated_entries[key][\"credit_in_account_currency\"] += entry.credit_in_account_currency\n\n    return aggregated_entries\n\n", "CodeBleu_score": 35.71662251653509}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n\n    # Initialize a dictionary to merge entries\n    aggregated_entries = {}\n\n    # Iterate through each entry to generate a unique key and corresponding values\n    for entry in entries:\n        # Get the accounting dimensions from the entry\n        dimensions = {\n            accounting_dimension.name: accounting_dimension.value\n            for accounting_dimension in accounting_dimensions\n            if accounting_dimension.value\n        }\n\n        # Generate the unique key for the entry\n        key = tuple(dimensions.items())\n\n        # Update the debit, credit, and their respective amounts in account currency\n        if key not in aggregated_entries:\n            aggregated_entries[key] = {\n                \"debit\": entry.debit,\n                \"credit\": entry.credit,\n                \"debit_in_account_currency\": entry.debit_in_account_currency,\n                \"credit_in_account_currency\": entry.credit_in_account_currency,\n            }\n        else:\n            aggregated_entries[key][\"debit\"] += entry.debit\n            aggregated_entries[key][\"credit\"] += entry.credit\n            aggregated_entries[key][\"debit_in_account_currency\"] += (\n                entry.debit_in_account_currency\n            )\n            aggregated_entries[key][\"credit_in_account_currency\"] += (\n                entry.credit_in_account_currency\n            )\n\n    return aggregated_entries\n\n", "CodeBleu_score": 29.71768470756811}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t\n\n    if self.supplier and self.supplier_is_blocked:\n        if self.is_return:\n            # Supplier payment\n            if self.supplier_hold_type == \"On Hold\":\n                if self.supplier_release_date and self.supplier_release_date < today():\n                    msg = _(\"Supplier {0} is on hold until {1}\").format(self.supplier, self.supplier_release_date)\n                    frappe.throw(_(\"Supplier is blocked\"), msg)\n                else:\n                    frappe.throw(_(\"Supplier is blocked\"), _(\"Supplier {0} is on hold\").format(self.supplier))\n            else:\n                # Supplier payment\n                frappe.throw(_(\"Supplier is blocked\"), _(\"Supplier {0} is on hold\").format(self.supplier))\n        else:\n            # Buying invoice\n            if self.supplier_hold_type == \"On Hold\":\n                if self.supplier_release_date and self.supplier_release_date < today():\n                    msg = _(\"Supplier {0} is on hold until {1}\").format(self.supplier, self.supplier_release_date)\n                    frappe.throw(_(\"Supplier is blocked\"), msg)\n                else:\n                    frappe.throw(_(\"Supplier is blocked\"), _(\"Supplier {0} is on hold\").format(self.supplier))\n            else:\n                # Buying invoice\n                frappe.throw(_(\"Supplier is blocked\"), _(\"Supplier {0} is on hold\").format(self.supplier))\n\n", "CodeBleu_score": 26.76622462868639}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.is_supplier_blocked():\n        if self.is_supplier_on_hold():\n            if self.is_supplier_on_hold_for_payment():\n                if self.is_payment_release_date_expired():\n                    self.throw_supplier_on_hold_error()\n            elif self.is_supplier_on_hold_for_invoice():\n                if self.is_invoice_release_date_expired():\n                    self.throw_supplier_on_hold_error()\n        else:\n            self.throw_supplier_blocked_error()\n\n", "CodeBleu_score": 13.20492589121729}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.is_return:\n        return\n\n    if self.is_supplier_payment:\n        supplier = self.supplier\n    else:\n        supplier = self.supplier_details.get(\"supplier\")\n\n    if supplier:\n        if supplier.on_hold and supplier.hold_type == \"Payment\":\n            if supplier.release_date and supplier.release_date < nowdate():\n                msg = _(\"Supplier {0} is on hold. Release date has passed\").format(supplier.name)\n                frappe.throw(_(\"Supplier on hold\"), msg)\n        elif supplier.on_hold and supplier.hold_type == \"Invoice\":\n            if supplier.release_date and supplier.release_date < self.transaction_date:\n                msg = _(\"Supplier {0} is on hold. Release date has passed\").format(supplier.name)\n                frappe.throw(_(\"Supplier on hold\"), msg)\n\n", "CodeBleu_score": 34.666187212576304}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = (\"Purchase Invoice\", \"Sales Invoice\", \"Journal Entry\", \"Payment Entry\")\n    if self.docstatus == 1:\n        return\n    repost_doc_map = defaultdict(list)\n    for repost_doctype in repost_doctypes:\n        repost_docs = frappe.db.sql(\n            \"\"\"\n            select parent, parentfield, voucher_type, voucher_no\n            from `tab{doctype}`\n            where docstatus = 1 and voucher_type = \"{doctype}\" and voucher_no = \"{voucher_no}\"\n            \"\"\".format(\n                doctype=repost_doctype,\n                voucher_type=self.doctype,\n                voucher_no=self.name,\n            ),\n            as_dict=1,\n        )\n        for doc in repost_docs:\n            repost_doc_map[doc.parent].append(doc)\n\n    for parent, repost_docs in repost_doc_map.items():\n        parent_doc = frappe.get_doc(parent, parent)\n        for doc in repost_docs:\n            if doc.parentfield == \"repost_vouchers\":\n                parent_doc.flags.ignore_validate = True\n                parent_doc.flags.ignore_mandatory = True\n                parent_doc.flags.ignore_links = True\n                parent_doc.remove(\"repost_vouchers\", {\"voucher_type\": doc.voucher_type, \"voucher_no\": doc.voucher_no})\n            else:\n                parent_doc.flags.ignore_validate = True\n                parent_doc.flags.ignore_mandatory = True\n                parent_doc.flags.ignore_links = True\n                parent_doc.remove(\"vouchers\", {\"voucher_type\": doc.voucher_type, \"voucher_no\": doc.voucher_no})\n        parent_doc.save()\n\n", "CodeBleu_score": 24.11222037066466}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    if not self.repost_doctypes:\n        return\n\n    repost_doctypes = frappe.get_all(\"Repost Doctype\", filters={\"name\": [\"in\", self.repost_doctypes]}, fields=[\"name\"])\n    if not repost_doctypes:\n        return\n\n    repost_doctype_map = {}\n    for repost_doctype in repost_doctypes:\n        repost_doctype_map[repost_doctype.name] = []\n\n    for repost_voucher in self.repost_vouchers:\n        if repost_voucher.voucher_type == self.doctype and repost_voucher.voucher_no == self.name:\n            repost_doctype_map[repost_voucher.parent_doctype].append(repost_voucher.parent)\n\n    for repost_doctype in repost_doctype_map:\n        repost_doctype_obj = frappe.get_doc(repost_doctype)\n        for parent in repost_doctype_map[repost_doctype]:\n            parent_doc = frappe.get_doc(repost_doctype, parent)\n            if repost_doctype == \"Repost Voucher\":\n                parent_doc.repost_vouchers = [\n                    d for d in parent_doc.repost_vouchers if d.parent_doctype!= self.doctype or d.parent!= self.name\n                ]\n            else:\n                parent_doc.vouchers = [\n                    d for d in parent_doc.vouchers if d.parent_doctype!= self.doctype or d.parent!= self.name\n                ]\n            parent_doc.flags.ignore_validate = True\n            parent_doc.flags.ignore_links = True\n            parent_doc.save()\n\n", "CodeBleu_score": 25.127675672512627}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n\n    # Identify repost doctypes\n    repost_doctypes = [\"Sales Invoice\", \"Purchase Invoice\", \"Journal Entry\"]\n\n    # Query for relevant repost doctypes\n    repost_doc = frappe.db.sql(\n        \"\"\"\n        SELECT\n            name, voucher_type, voucher_no, parent, parenttype\n        FROM `tabRepost Voucher`\n        WHERE voucher_type = %s AND voucher_no = %s\n    \"\"\",\n        (self.doctype, self.name),\n        as_dict=1,\n    )\n\n    # Create map of parent document type and parent\n    repost_doc_map = {}\n    for d in repost_doc:\n        if d.parenttype not in repost_doc_map:\n            repost_doc_map[d.parenttype] = {}\n        if d.parent not in repost_doc_map[d.parenttype]:\n            repost_doc_map[d.parenttype][d.parent] = []\n        repost_doc_map[d.parenttype][d.parent].append(d)\n\n    # Remove references from repost doctypes\n    for parenttype, parent_map in repost_doc_map.items():\n        if parenttype in repost_doctypes:\n            parent_doc = frappe.get_doc(parenttype, parent_map.keys()[0])\n            if parenttype == \"Sales Invoice\":\n                parent_doc.repost_vouchers = [\n                    d.name for d in parent_doc.repost_vouchers if d.name not in repost_doc_map[parenttype]\n                ]\n            elif parenttype == \"Purchase Invoice\":\n                parent_doc.vouchers = [\n                    d.name for d in parent_doc.vouchers if d.name not in repost_doc_map[parenttype]\n                ]\n            elif parenttype == \"Journal Entry\":\n                parent_doc.repost_vouchers = [\n                    d.name for d in parent_doc.repost_vouchers if d.name not in repost_doc_map[parenttype]\n                ]\n            parent_doc.flags.ignore_validate = True\n            parent_doc.flags.ignore_links = True\n            parent_doc.save()\n\n", "CodeBleu_score": 21.76877475880757}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        # Authenticate the client\n        self.client.Institutions.get(self.INSTITUTION_ID)\n        self.client.Item.get(self.access_token)\n\n        # Construct the query parameters\n        params = {\n            \"start_date\": start_date,\n            \"end_date\": end_date,\n        }\n        if account_id:\n            params[\"account_ids\"] = [account_id]\n\n        # Fetch the transactions\n        transactions = self.client.Transactions.get(self.access_token, **params)\n\n        # Handle specific errors\n        if transactions[\"total_transactions\"] == 0:\n            raise ValueError(\"No transactions found for the specified date range and account ID.\")\n        if transactions[\"total_transactions\"] > 1000:\n            raise ValueError(\"More than 1000 transactions found for the specified date range and account ID.\")\n\n        # Return the transactions\n        return transactions[\"transactions\"]\n    except APIError as e:\n        if e.code == 400:\n            raise InvalidRequestError(e.message)\n        elif e.code == 401:\n            raise InvalidRequestError(e.message)\n        elif e.code == 403:\n            raise ItemError(e.message)\n        elif e.code == 404:\n            raise ItemError(e.message)\n        else:\n            raise e\n    except Exception as e:\n        raise e\n\n", "CodeBleu_score": 32.616777824875484}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n\n    try:\n        # Authenticate the client\n        client = self.get_client()\n        access_token = client.get_access_token()\n\n        # Construct the query parameters\n        params = {\n            \"start_date\": start_date,\n            \"end_date\": end_date,\n        }\n        if account_id:\n            params[\"account_ids\"] = [account_id]\n\n        # Fetch the transactions\n        response = client.Transactions.get(access_token, params)\n        transactions = response[\"transactions\"]\n\n        # Check if there are more transactions to fetch\n        has_more = response[\"has_more\"]\n        while has_more:\n            # Fetch the next set of transactions\n            response = client.Transactions.get_next_page(access_token, response[\"cursor\"])\n            transactions += response[\"transactions\"]\n\n            # Check if there are more transactions to fetch\n            has_more = response[\"has_more\"]\n\n        # Return the retrieved transactions\n        return transactions\n    except APIError as e:\n        if e.code == 400:\n            raise InvalidRequestError(e.message)\n        elif e.code == 401:\n            raise ItemError(e.message)\n        else:\n            raise e\n    except Exception as e:\n        frappe.log_error(frappe.get_traceback())\n        raise e\n\n", "CodeBleu_score": 36.13269422189915}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        # Authenticate the client\n        client = self.get_client()\n        transactions = []\n\n        # Construct the query parameters\n        params = {\n           'start_date': start_date,\n            'end_date': end_date,\n        }\n        if account_id:\n            params['account_ids'] = [account_id]\n\n        # Fetch the transactions\n        response = client.Transactions.get(self.access_token, **params)\n        transactions.extend(response['transactions'])\n\n        # Continue fetching transactions if the number of retrieved transactions is less than the total\n        while len(transactions) < response['total_transactions']:\n            params['offset'] = len(transactions)\n            response = client.Transactions.get(self.access_token, **params)\n            transactions.extend(response['transactions'])\n\n        return transactions\n    except APIError as e:\n        # Handle specific errors\n        if e.code == 400:\n            raise InvalidRequestError(e.error_message)\n        elif e.code == 401:\n            raise ItemError(e.error_message)\n        else:\n            raise e\n    except Exception as e:\n        # Log any other exceptions\n        frappe.log_error(e, title=\"Plaid API Error\")\n\n", "CodeBleu_score": 39.279832516743696}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t\n\n    try:\n        institution_response = response.json()\n        institution_response = institution_response['institution']\n\n        institution_id = institution_response['institution_id']\n        name = institution_response['name']\n        logo = institution_response['logo']\n        display_name = institution_response['display_name']\n        url = institution_response['url']\n\n        # Check if the bank already exists in the database\n        bank = frappe.get_all('Bank', filters={'institution_id': institution_id}, fields=['name', 'display_name', 'logo', 'url'])\n\n        if not bank:\n            # Create a new bank record\n            bank = frappe.new_doc('Bank')\n            bank.institution_id = institution_id\n            bank.name = name\n            bank.display_name = display_name\n            bank.logo = logo\n            bank.url = url\n            bank.save()\n\n            # Add the bank to the Plaid Settings doctype\n            plaid_settings = frappe.get_doc('Plaid Settings')\n            plaid_settings.append('bank_list', bank.name)\n            plaid_settings.save()\n\n        else:\n            # Update the existing bank record with the latest access token\n            bank = bank[0]\n            bank.access_token = token\n            bank.save()\n\n        return bank\n\n    except Exception as e:\n        frappe.log_error(frappe._('Error while adding institution: {0}').format(e), title='Plaid Error')\n        return None\n\n", "CodeBleu_score": 36.29935086728903}, {"code": "def add_institution(token, response)\n\t\n\n    # Parse the response to retrieve the institution information\n    institution = response.get(\"institution\")\n    institution_id = institution.get(\"institution_id\")\n    name = institution.get(\"name\")\n    logo = institution.get(\"logo\")\n    url = institution.get(\"url\")\n    primary_color = institution.get(\"primary_color\")\n    secondary_color = institution.get(\"secondary_color\")\n\n    # Retrieve the access token using the PlaidConnector\n    plaid_connector = PlaidConnector()\n    access_token = plaid_connector.get_access_token(token)\n\n    # Check if the bank already exists in the database\n    if frappe.db.exists(\"Bank\", institution_id):\n        # Update the access token for the existing bank record\n        frappe.db.set_value(\"Bank\", institution_id, \"access_token\", access_token)\n        frappe.msgprint(\n            _(\"Bank {0} already exists in the database. The access token has been updated.\").format(name)\n        )\n    else:\n        # Create and insert a new bank record\n        bank = frappe.new_doc(\"Bank\")\n        bank.name = name\n        bank.institution_id = institution_id\n        bank.logo = logo\n        bank.url = url\n        bank.primary_color = primary_color\n        bank.secondary_color = secondary_color\n        bank.access_token = access_token\n        bank.save()\n        frappe.msgprint(_(\"Bank {0} has been added to the database.\").format(name))\n\n", "CodeBleu_score": 35.974554107125954}, {"code": "def add_institution(token, response)\n\t\n    try:\n        institution_id = response['institution_id']\n        institution_name = response['institution_name']\n        institution_logo = response['institution_logo']\n        access_token = PlaidConnector.get_access_token(token)\n        if not frappe.db.exists('Bank', institution_id):\n            bank_doc = frappe.new_doc('Bank')\n            bank_doc.update({\n                'name': institution_id,\n                'bank_name': institution_name,\n                'logo': institution_logo,\n                'access_token': access_token,\n            })\n            bank_doc.insert()\n        else:\n            bank_doc = frappe.get_doc('Bank', institution_id)\n            bank_doc.update({\n                'access_token': access_token,\n            })\n            bank_doc.save()\n    except Exception as e:\n        frappe.log_error(e, 'Error adding institution')\n\n", "CodeBleu_score": 37.32512025216934}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        # Determine the start and end dates for the transaction retrieval\n        start_date = bank.last_integration_date or today()\n        end_date = today()\n\n        # Attempt to fetch the transactions\n        transactions = PlaidConnector.get_transactions(bank.plaid_item_id, start_date, end_date)\n\n        # Process the transactions into new bank transactions\n        for transaction in transactions:\n            bank_transaction = frappe.new_doc(\"Bank Transaction\")\n            bank_transaction.update({\n                \"bank\": bank.name,\n                \"bank_account\": bank_account.name,\n                \"transaction_date\": transaction[\"date\"],\n                \"transaction_type\": transaction[\"name\"],\n                \"amount\": transaction[\"amount\"],\n                \"memo\": transaction[\"notes\"]\n            })\n            bank_transaction.insert()\n\n        # Update the last integration date to the date of the oldest transaction\n        if transactions:\n            bank.last_integration_date = min(transaction[\"date\"] for transaction in transactions)\n            bank.save()\n\n        # Log the number of new transactions added\n        frappe.log_error(f\"Synced {len(transactions)} transactions for bank {bank.name} and bank account {bank_account.name}.\")\n    except ItemError as e:\n        # Handle ItemError exceptions by logging an error message\n        frappe.log_error(f\"Error while syncing transactions for bank {bank.name} and bank account {bank_account.name}: {e}\")\n\n", "CodeBleu_score": 30.757930467720122}, {"code": "def sync_transactions(bank, bank_account)\n\t\n\n    # Get the last integration date for the bank and bank account\n    last_integration_date = frappe.db.get_value(\"Bank Account\", bank_account, \"last_integration_date\")\n    if not last_integration_date:\n        last_integration_date = today()\n\n    # Get the start and end dates for the transaction retrieval\n    start_date = formatdate(add_months(last_integration_date, -1))\n    end_date = formatdate(today())\n\n    # Attempt to fetch the transactions\n    try:\n        transactions = PlaidConnector.get_transactions(bank, bank_account, start_date, end_date)\n    except ItemError as e:\n        frappe.log_error(frappe._(\"Error fetching transactions for bank {0} and bank account {1}: {2}\").format(bank, bank_account, e))\n        return\n\n    # Process the transactions into new bank transactions\n    new_transactions = []\n    for transaction in transactions:\n        new_transaction = frappe.get_doc({\n            \"doctype\": \"Bank Transaction\",\n            \"bank\": bank,\n            \"bank_account\": bank_account,\n            \"transaction_date\": transaction[\"date\"],\n            \"transaction_type\": transaction[\"name\"],\n            \"amount\": transaction[\"amount\"],\n            \"description\": transaction[\"name\"]\n        })\n        new_transactions.append(new_transaction)\n\n    # Create the new bank transactions\n    frappe.get_doc(new_transactions).insert(ignore_permissions=True)\n\n    # Update the last integration date to the date of the oldest transaction\n    if len(transactions) > 0:\n        oldest_transaction_date = min(transaction[\"date\"] for transaction in transactions)\n        frappe.db.set_value(\"Bank Account\", bank_account, \"last_integration_date\", oldest_transaction_date)\n\n    # Log the number of new transactions added\n    frappe.log_error(frappe._(\"{0} new transactions added for bank {1} and bank account {2}\").format(len(new_transactions), bank, bank_account))\n\n", "CodeBleu_score": 38.329942543712214}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    # Get the last integration date from the bank account\n    last_integration_date = bank_account.last_integration_date or today()\n\n    # Determine the start and end dates for the transaction retrieval\n    start_date = last_integration_date\n    end_date = today()\n\n    # Attempt to fetch the transactions\n    try:\n        transactions = PlaidConnector.get_transactions(bank, bank_account, start_date, end_date)\n    except ItemError as e:\n        # Handle any exceptions by logging an error message\n        frappe.log_error(\"PlaidSync\", \"Error fetching transactions for bank account {0}: {1}\".format(bank_account.name, e))\n        return\n\n    # Process the transactions into new bank transactions\n    for transaction in transactions:\n        bank_transaction = frappe.get_doc({\n            \"doctype\": \"Bank Transaction\",\n            \"bank_account\": bank_account.name,\n            \"date\": transaction[\"date\"],\n            \"reference_number\": transaction[\"id\"],\n            \"amount\": transaction[\"amount\"],\n            \"description\": transaction[\"name\"],\n            \"is_cancelled\": sbool(transaction[\"pending\"]),\n        })\n\n        # Add tags to the bank transaction based on the category\n        if transaction[\"category\"]:\n            for category in transaction[\"category\"]:\n                add_tag(bank_transaction.name, category, \"Bank Transaction\")\n\n        # Save the bank transaction\n        bank_transaction.insert()\n\n    # Update the last integration date to the date of the oldest transaction\n    bank_account.last_integration_date = min(transaction[\"date\"] for transaction in transactions)\n    bank_account.save()\n\n    # Log the number of new transactions added\n    frappe.log_info(\"PlaidSync\", \"Added {0} new transactions for bank account {1}\".format(len(transactions), bank_account.name))\n\n", "CodeBleu_score": 34.878685427145065}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t\n    # Construct the query URI\n    query_uri = \"https://sandbox-quickbooks.api.intuit.com/v3/company/\" + self.company_id + \"/query?query=\" + entity + \"&startPosition=1&maxResults=1000\"\n    # Determine the total number of entries\n    total_entries = self.get_total_entries(query_uri)\n    # Retrieve the entries in batches of 1000\n    for i in range(1, total_entries + 1, 1000):\n        # Fetch the entries in the current batch\n        response = self.get_entries(query_uri, i)\n        # Preprocess and save the entries\n        self.preprocess_entries(response, entity)\n\n", "CodeBleu_score": 17.333974874437395}, {"code": "def _migrate_entries(self, entity)\n\t\n    try:\n        # Construct the query URI\n        query_uri = self.get_query_uri(entity)\n        # Determine the total number of entries\n        total_entries = self.get_total_entries(query_uri)\n        # Retrieve the entries in batches of 1000\n        entries = []\n        for i in range(0, total_entries, 1000):\n            entries.extend(self.get_entries(query_uri, i, 1000))\n        # Preprocess and save the entries\n        for entry in entries:\n            self.preprocess_entry(entry)\n            self.save_entry(entry)\n    except Exception as e:\n        frappe.log_error(\n            _(\"Error migrating entries for {0}: {1}\").format(entity, str(e)),\n            \"QuickBooks Migration\",\n            exc=traceback.format_exc()\n        )\n        frappe.log_error(\n            _(\"Response text: {0}\").format(response.text),\n            \"QuickBooks Migration\"\n        )\n\n", "CodeBleu_score": 28.814734573401523}, {"code": "def _migrate_entries(self, entity)\n\t\n    try:\n        company_id = self.get_company_id()\n        company_name = self.get_company_name()\n        url = self.get_query_url(entity)\n        print(\"MIGRATING: \", url)\n        # Determine the total number of entries\n        response = self.get_response(url)\n        total_entries = int(response.headers[\"X-Total-Records\"])\n        print(\"TOTAL ENTRIES: \", total_entries)\n        # Retrieve entries in batches of 1000\n        for offset in range(0, total_entries, 1000):\n            print(\"OFFSET: \", offset)\n            url = self.get_query_url(entity, offset=offset)\n            response = self.get_response(url)\n            if response.status_code == 200:\n                entries = response.json()[\"QueryResponse\"][\"Entry\"]\n                for entry in entries:\n                    self.preprocess_entry(entry)\n                    self.save_entry(entry, company_id, company_name)\n            else:\n                print(\"ERROR: \", response.status_code, response.text)\n                frappe.log_error(response.status_code, response.text, \"QuickBooks Migration\")\n    except Exception as e:\n        print(traceback.format_exc())\n        frappe.log_error(str(e), \"QuickBooks Migration\")\n\n", "CodeBleu_score": 32.25880135705334}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\t\n    # Save the invoice\n    if self.docstatus == 1:\n        self.docstatus = 0\n    if self.doctype == \"Sales Invoice\":\n        self.save(ignore_permissions=True)\n        self.submit()\n    else:\n        self.save(ignore_permissions=True)\n    # Save the linked transactions\n    for linked_transaction in self.get(\"linked_transactions\"):\n        linked_transaction.save(ignore_permissions=True)\n    # Check if there are any linked transactions of type \"StatementCharge\" or \"ReimburseCharge\"\n    has_linked_transactions = False\n    for linked_transaction in self.get(\"linked_transactions\"):\n        if linked_transaction.transaction_type in [\"StatementCharge\", \"ReimburseCharge\"]:\n            has_linked_transactions = True\n            break\n    # Save the invoice as a journal entry if there are linked transactions of type \"StatementCharge\" or \"ReimburseCharge\"\n    if has_linked_transactions:\n        self.doctype = \"Journal Entry\"\n        self.docstatus = 1\n        self.save(ignore_permissions=True)\n        self.submit()\n    # Save the linked transactions as journal entries if there are linked transactions of type \"StatementCharge\" or \"ReimburseCharge\"\n    for linked_transaction in self.get(\"linked_transactions\"):\n        if linked_transaction.transaction_type in [\"StatementCharge\", \"ReimburseCharge\"]:\n            linked_transaction.doctype = \"Journal Entry\"\n            linked_transaction.docstatus = 1\n            linked_transaction.save(ignore_permissions=True)\n            linked_transaction.submit()\n    # Save the invoice as a journal entry if there are linked transactions of type \"StatementCharge\" or \"ReimburseCharge\"\n    if has_linked_transactions:\n        self.doctype = \"Journal Entry\"\n        self.docstatus = 1\n        self.save(ignore_permissions=True)\n        self.submit()\n    # Save the linked transactions as journal entries if there are linked transactions of type \"StatementCharge\" or \"ReimburseCharge\"\n    for linked_transaction in self.get(\"linked_transactions\"):\n        if linked_transaction.transaction_type in [\"StatementCharge\", \"ReimburseCharge\"]:\n            linked_transaction.doctype = \"Journal Entry\"\n            linked_transaction.docstatus = 1\n            linked_transaction.save(ignore_permissions=True)\n           ", "CodeBleu_score": 20.961669221314256}, {"code": "def _save_invoice(self, invoice)\n\t\n    if self.docstatus == 0:\n        if self.type == \"Sales Invoice\":\n            self.save(ignore_permissions=True)\n        else:\n            self.save(ignore_permissions=True)\n            self.generate_quickbooks_id()\n            self.check_linked_transactions()\n            if self.linked_transactions:\n                self.save_as_journal_entry()\n            else:\n                self.save(ignore_permissions=True)\n\n", "CodeBleu_score": 17.673956534718524}, {"code": "def _save_invoice(self, invoice)\n\t\n    if invoice.docstatus == 1:\n        if invoice.doc_type == \"Sales Invoice\":\n            self.save_sales_invoice(invoice)\n        elif invoice.doc_type == \"Journal Entry\":\n            self.save_journal_entry(invoice)\n        elif invoice.doc_type == \"Purchase Invoice\":\n            self.save_purchase_invoice(invoice)\n        elif invoice.doc_type == \"Credit Note\":\n            self.save_credit_note(invoice)\n        elif invoice.doc_type == \"Debit Note\":\n            self.save_debit_note(invoice)\n        elif invoice.doc_type == \"Sales Order\":\n            self.save_sales_order(invoice)\n        elif invoice.doc_type == \"Purchase Order\":\n            self.save_purchase_order(invoice)\n        elif invoice.doc_type == \"Sales Return\":\n            self.save_sales_return(invoice)\n        elif invoice.doc_type == \"Purchase Return\":\n            self.save_purchase_return(invoice)\n        elif invoice.doc_type == \"Expense Claim\":\n            self.save_expense_claim(invoice)\n        elif invoice.doc_type == \"Expense Claim Receipt\":\n            self.save_expense_claim_receipt(invoice)\n        elif invoice.doc_type == \"Cash Entry\":\n            self.save_cash_entry(invoice)\n        elif invoice.doc_type == \"Bank Entry\":\n            self.save_bank_entry(invoice)\n        elif invoice.doc_type == \"Journal Entry\":\n            self.save_journal_entry(invoice)\n        elif invoice.doc_type == \"Payment Entry\":\n            self.save_payment_entry(invoice)\n        elif invoice.doc_type == \"Receipt Entry\":\n            self.save_receipt_entry(invoice)\n        elif invoice.doc_type == \"Journal Entry\":\n            self.save_journal_entry(invoice)\n        elif invoice.doc_type == \"Sales Invoice\":\n            self.save_sales_invoice(invoice)\n        elif invoice.doc_type == \"Purchase Invoice\":\n            self.save_purchase_invoice(invoice)\n        elif invoice.doc_type == \"Credit Note\":\n            self.save_credit_note(invoice)\n        elif invoice.doc_type == \"Debit Note\":\n            self.save_debit_note(invoice)\n        elif invoice.doc_type == \"Sales Order\":\n            self.", "CodeBleu_score": 10.730060862744187}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\n    # Get list of holidays for the salesperson\n    holiday_list = get_holiday_list_for_employee(sales_person)\n\n    # Calculate interval between visits\n    interval = int(date_diff(end_date, start_date) / (no_of_visit - 1))\n\n    # Create a list of scheduled visit dates\n    schedule_list = [start_date]\n    for i in range(1, no_of_visit):\n        schedule_list.append(add_days(schedule_list[i - 1], interval))\n\n    # Adjust dates to avoid holidays\n    for i in range(len(schedule_list)):\n        if schedule_list[i] in holiday_list:\n            schedule_list[i] = add_days(schedule_list[i], 1)\n\n    return schedule_list\n\n", "CodeBleu_score": 27.458757244211508}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    # get the interval between visits\n    interval = date_diff(end_date, start_date) / (no_of_visit - 1)\n    # create the list of scheduled visit dates\n    schedule_list = [start_date]\n    for i in range(1, no_of_visit):\n        # calculate the next visit date\n        next_visit_date = add_days(schedule_list[i - 1], interval)\n        # adjust the next visit date to avoid holidays\n        next_visit_date = adjust_date_to_avoid_holidays(next_visit_date, sales_person)\n        # add the next visit date to the list\n        schedule_list.append(next_visit_date)\n    return schedule_list\n\n", "CodeBleu_score": 24.39555966928583}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    # get the holidays for the sales person\n    holidays = get_holiday_list_for_employee(sales_person)\n    # calculate the interval between visits\n    interval = int(date_diff(start_date, end_date) / no_of_visit)\n    # create the schedule list\n    schedule = []\n    # iterate to create the schedule\n    for i in range(no_of_visit):\n        # calculate the scheduled date\n        scheduled_date = add_days(start_date, interval * i)\n        # check if the scheduled date is a holiday\n        if scheduled_date in holidays:\n            # if it is, adjust the date to the next working day\n            scheduled_date = add_days(scheduled_date, 1)\n        # add the scheduled date to the schedule list\n        schedule.append(scheduled_date)\n    # return the final list of schedule dates\n    return schedule\n\n", "CodeBleu_score": 24.552540952140344}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\t\t$response = [\n\t\t'status' =>'success',\n\t\t'message' => __('messages.success'),\n\t\t'data' => [\n\t\t\t'title' => __('messages.success'),\n\t\t\t'path' => url()->previous(),\n\t\t\t'handle' =>'success',\n\t\t\t'html' => view($view, $data)->render(),\n\t\t],\n\t];\n\treturn response()->json($response);\n}", "CodeBleu_score": 29.60283953829221}, {"code": "<?\n   public function response($view, $data = []){\n\t\n//    $this->data = $data;", "CodeBleu_score": 5.908764367816092}, {"code": "<?\n   public function response($view, $data = []){\n\t\t$response = [];\n\t$response['success'] = true;\n\t$response['message'] = '';\n\t$response['data'] = $data;\n\t$response['title'] = '';\n\t$response['path'] = '';\n\t$response['handle'] = '';\n\t$response['html'] = '';\n\t$response['bulk_action'] = '';\n\t$response['bulk_action_url'] = '';\n\t$response['bulk_action_method'] = '';\n\t$response['bulk_action_message'] = '';\n\t$response['bulk_action_path'] = '';\n\t$response['bulk_action_handle'] = '';\n\t$response['bulk_action_html'] = '';\n\t$response['bulk_action_data'] = [];\n\t$response['bulk_action_data_title'] = '';\n\t$response['bulk_action_data_path'] = '';\n\t$response['bulk_action_data_handle'] = '';\n\t$response['bulk_action_data_html'] = '';\n\t$response['bulk_action_data_message'] = '';\n\t$response['bulk_action_data_success'] = false;\n\t$response['bulk_action_data_error'] = '';\n\t$response['bulk_action_data_data'] = [];\n\t$response['bulk_action_data_data_title'] = '';\n\t$response['bulk_action_data_data_path'] = '';\n\t$response['bulk_action_data_data_handle'] = '';\n\t$response['bulk_action_data_data_html'] = '';\n\t$response['bulk_action_data_data_message'] = '';\n\t$response['bulk_action_data_data_success'] = false;\n\t$response['bulk_action_data_data_error'] = '';\n\t$response['bulk_action_data_data_data'] = [];\n\t$response['bulk_action_data_data_data_title'] = '';\n\t$response['bulk_action_data_data_data_path'] = '';\n\t$response['bulk_action_data_data_data_handle'] = '';\n\t$response['bulk_action_data_data_data_html'] = '';\n\t$response['", "CodeBleu_score": 15.989378488064467}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t\ttry {\n\t\t// Retrieve the selected contacts from the request.\n\t\t$selectedContacts = $request->input('selectedContacts');\n\n\t\t// If there are no selected contacts, throw an exception.\n\t\tif (empty($selectedContacts)) {\n\t\t\tthrow new Exception(trans('messages.no_contacts_selected'));\n\t\t}\n\n\t\t// Dispatch a delete operation for each selected contact.\n\t\tforeach ($selectedContacts as $contactId) {\n\t\t\tBus::dispatch(new DeleteContact($contactId));\n\t\t}\n\n\t\t// If the operation was successful, return a success message.\n\t\treturn response()->json([\n\t\t\t'status' =>'success',\n\t\t\t'message' => trans('messages.contacts_deleted'),\n\t\t]);\n\t} catch (Throwable $e) {\n\t\t// If an exception occurred, return an error message.\n\t\treturn response()->json([\n\t\t\t'status' => 'error',\n\t\t\t'message' => $e->getMessage(),\n\t\t]);\n\t}\n}", "CodeBleu_score": 34.0776219242256}, {"code": "<?\npublic function deleteContacts($request){\n\t\t$contacts = Contact::whereIn('id', $request->input('contact_ids'))->get();\n\n\ttry {\n\t\tforeach ($contacts as $contact) {\n\t\t\tBus::dispatch(new DeleteContact($contact));\n\t\t}\n\n\t\treturn response()->json(['success' => true]);\n\t} catch (Throwable $e) {\n\t\treturn response()->json(['success' => false,'message' => $e->getMessage()]);\n\t}\n}", "CodeBleu_score": 46.12648914493269}, {"code": "<?\npublic function deleteContacts($request){\n\t\ttry {\n\t\t$contacts = Contact::whereIn('id', $request->input('contact_ids'))->get();\n\t\tforeach ($contacts as $contact) {\n\t\t\tBus::dispatch(new DeleteContact($contact));\n\t\t}\n\t\treturn response()->json(['success' => true]);\n\t} catch (Throwable $e) {\n\t\treturn response()->json(['success' => false, 'error' => $e->getMessage()]);\n\t}\n}", "CodeBleu_score": 47.00872307616121}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t\t$transactions = $request->transactions;\n\t$contact = $request->contact;\n\t$response = [];\n\n\ttry {\n\t\tforeach ($transactions as $transaction) {\n\t\t\t$job = new DeleteTransaction($transaction, $contact);\n\t\t\tBus::dispatch($job);\n\t\t}\n\n\t\t$response['success'] = true;\n\t\t$response['message'] = __('messages.transaction-deleted');\n\t} catch (Throwable $e) {\n\t\t$response['success'] = false;\n\t\t$response['message'] = __('messages.transaction-not-deleted');\n\t}\n\n\treturn $response;\n}", "CodeBleu_score": 37.804385370031746}, {"code": "<?\npublic function deleteTransactions($request){\n\t\ttry {\n\t\t$transactions = Transaction::whereIn('id', $request->transaction_ids)->get();\n\t\tforeach ($transactions as $transaction) {\n\t\t\tBus::dispatch(new DeleteTransaction($transaction));\n\t\t}\n\t\treturn response()->json(['success' => true]);\n\t} catch (Throwable $e) {\n\t\treturn response()->json(['success' => false, 'error' => $e->getMessage()]);\n\t}\n}", "CodeBleu_score": 47.74542031350947}, {"code": "<?\npublic function deleteTransactions($request){\n\t\t$transactions = Transactions::whereIn('id', $request->transaction_ids)->get();\n\n\tforeach ($transactions as $transaction) {\n\t\ttry {\n\t\t\tBus::dispatch(new DeleteTransaction($transaction));\n\t\t} catch (Throwable $e) {\n\t\t\tflash('error', 'Could not delete transaction.');\n\t\t}\n\t}\n}", "CodeBleu_score": 50.567363586803005}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\t\t$this->validator = $validator;\n\t$this->validator->after(function ($validator) {\n\t\t$this->validator = null;\n\t});\n}", "CodeBleu_score": 10.637781114818038}, {"code": "<?\npublic function withValidator($validator){\n\t\tif (!class_exists($this->requestClass)) {\n\t\treturn;\n\t}\n\tif (!($this->requestClass instanceof FormRequest)) {\n\t\treturn;\n\t}\n\t$this->validator = $validator;\n\t$this->initRequest();\n\t$this->prepareValidation();\n\tforeach ($this->rows as $row) {\n\t\t$this->validator->addRules($this->getValidationRules($row));\n\t\t$this->validator->addAttributes($this->getValidationAttributes($row));\n\t\t$this->validator->addCustomAttributes($this->getValidationCustomAttributes($row));\n\t\t$this->validator->addCustomMessages($this->getValidationCustomMessages($row));\n\t\t$this->validator->addCustomValues($this->getValidationCustomValues($row));\n\t\t$this->validator->addCustomFormats($this->getValidationCustomFormats($row));\n\t\t$this->validator->addCustomTranslates($this->getValidationCustomTranslates($row));\n\t\t$this->validator->addCustomTranslatesAttributes($this->getValidationCustomTranslatesAttributes($row));\n\t\t$this->validator->addCustomTranslatesRules($this->getValidationCustomTranslatesRules($row));\n\t\t$this->validator->addCustomTranslatesMessages($this->getValidationCustomTranslatesMessages($row));\n\t\t$this->validator->addCustomTranslatesCustomAttributes($this->getValidationCustomTranslatesCustomAttributes($row));\n\t\t$this->validator->addCustomTranslatesCustomMessages($this->getValidationCustomTranslatesCustomMessages($row));\n\t\t$this->validator->addCustomTranslatesCustomValues($this->getValidationCustomTranslatesCustomValues($row));\n\t\t$this->validator->addCustomTranslatesCustomFormats($this->getValidationCustomTranslatesCustomFormats($row));\n\t\t$this->validator->addCustomTranslatesCustomTranslates($this->getValidationCustomTranslatesCustomTranslates($row));\n\t\t$this->validator->addCustomTranslatesCustomTranslatesAttributes($this->getValidationCustomTranslatesCustomTranslatesAttributes($row));\n\t\t$this->validator->addCustomTranslatesCustomTranslatesRules($this->getValidationCustomTranslatesCustomTranslatesRules($row));\n\t\t$this->validator->addCustomTranslatesCustomTranslatesMessages($this->getValidationCustomTranslatesCustomTranslatesMessages($row));\n\t", "CodeBleu_score": 18.708055667131706}, {"code": "<?\npublic function withValidator($validator){\n\t\t$validator->after(function ($validator) {\n\t\tif ($this->request instanceof FormRequest) {\n\t\t\t$this->request->setValidator($validator);\n\t\t}\n\t});\n}", "CodeBleu_score": 12.934258189097111}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\tif ($this instanceof ShouldUpdate) {\n\t\t$this->setModel(self::getModel($arguments[0]));\n\t\t$this->setRequest(self::getRequest($arguments[1]));\n\t}\n}", "CodeBleu_score": 20.269179663912524}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\tif(isset($arguments[0]) && $arguments[0] instanceof Model) {\n\t\t$this->setModel($arguments[0]);\n\t}\n\tif(isset($arguments[1]) && $arguments[1] instanceof Request) {\n\t\t$this->setRequest($arguments[1]);\n\t}\n\tif($this->model instanceof ShouldUpdate) {\n\t\t$this->model->update($this->request);\n\t}\n}", "CodeBleu_score": 29.321144536418863}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\tif ($this instanceof ShouldUpdate) {\n\t\t$this->model = $this->getModel($arguments[0]?? null);\n\t\t$this->request = $this->getRequest($arguments[1]?? null);\n\t}\n}", "CodeBleu_score": 34.6335691205683}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t\t$request = request();\n\t$sorting = $request->get('sort', $sort);\n\t$search = $request->get('search', '');\n\t$limit = $request->get('limit', config('app.pagination.limit', 15));\n\t$page = $request->get('page', 1);\n\t$sortDirection = $request->get('direction', 'asc');\n\t$sortDirection = $sortDirection == 'asc'? 'asc' : 'desc';\n\t$searchString = $request->get('search_string', '');\n\t$searchString = $searchString? $searchString : $search;\n\t$searchString = $searchString? $searchString : $request->get('search_string_value', '');\n\t$searchString = $searchString? $searchString : $request->get('search_string_value_value', '');\n\t$searchString = $searchString? $searchString : $request->get('search_string_value_value_value', '');\n\t$searchString = $searchString? $searchString : $request->get('search_string_value_value_value_value', '');\n\t$searchString = $searchString? $searchString : $request->get('search_string_value_value_value_value_value', '');\n\t$searchString = $searchString? $searchString : $request->get('search_string_value_value_value_value_value_value', '');\n\t$searchString = $searchString? $searchString : $request->get('search_string_value_value_value_value_value_value_value', '');\n\t$searchString = $searchString? $searchString : $request->get('search_string_value_value_value_value_value_value_value_value', '');\n\t$searchString = $searchString? $searchString : $request->get('search_string_value_value_value_value_value_value_value_value_value', '');\n\t$searchString = $searchString? $searchString : $request->get('search_string_value_value_value_value_value_value_value_value_value_value', '');\n\t$searchString = $searchString? $searchString : $request->get('", "CodeBleu_score": 36.01888318977891}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t\t$request = request();\n\n\t$query->with('parentSheet');\n\n\tif ($request->has('search') && $request->get('search')) {\n\t\t$query->search($request->get('search'));\n\t}\n\n\tif ($request->has('sort') && $request->get('sort')) {\n\t\t$query->sortable($request->get('sort'));\n\t}\n\n\tif ($request->expectsJson() &&!$request->isApi()) {\n\t\treturn $query->get();\n\t}\n\n\t$limit = $request->get('limit', config('app.pagination_limit'));\n\n\treturn $query->paginate($limit);\n}", "CodeBleu_score": 49.63087682579632}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t\t$sort = request('sort', $sort);\n\t$query->applySorting($sort);\n\t$query->applySearch();\n\tif (request()->expectsJson()) {\n\t\treturn $query->get();\n\t}\n\t$limit = request('limit', 20);\n\treturn $query->paginate($limit);\n}", "CodeBleu_score": 36.077609369707005}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$openAmount = 0;\n\t$overdueAmount = 0;\n\n\tif ($model->status == 'paid') {\n\t\treturn [0, 0];\n\t}\n\n\t$payments = $model->transactions()->where('status', 'paid')->get();\n\n\tforeach ($payments as $payment) {\n\t\t$openAmount += $payment->amount;\n\t}\n\n\tif ($model->status == 'partial') {\n\t\t$overdueAmount = $model->amount - $openAmount;\n\t} else {\n\t\t$overdueAmount = $model->amount;\n\t}\n\n\treturn [$openAmount, $overdueAmount];\n}", "CodeBleu_score": 44.422694041560774}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$openAmount = 0;\n\t$overdueAmount = 0;\n\n\t// If the document status is 'paid', return zeroes\n\tif ($model->status == 'paid') {\n\t\treturn [\n\t\t\t'openAmount' => 0,\n\t\t\t'overdueAmount' => 0,\n\t\t];\n\t}\n\n\t// Initialize the amounts\n\t$openAmount = $model->amount;\n\t$overdueAmount = 0;\n\n\t// If the document status is 'partial', sum the payments from transactions\n\tif ($model->status == 'partial') {\n\t\t$openAmount = 0;\n\t\t$overdueAmount = 0;\n\n\t\tforeach ($model->transactions as $transaction) {\n\t\t\tif ($transaction->status == 'paid') {\n\t\t\t\t$openAmount += $transaction->amount;\n\t\t\t} else {\n\t\t\t\t$overdueAmount += $transaction->amount;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Determine if the document is open or overdue based on the due date\n\tif (Date::isTodayOrAfter($model->due_date)) {\n\t\t$openAmount = 0;\n\t\t$overdueAmount = $model->amount;\n\t}\n\n\t// Return the calculated open and overdue amounts\n\treturn [\n\t\t'openAmount' => $openAmount,\n\t\t'overdueAmount' => $overdueAmount,\n\t];\n}", "CodeBleu_score": 36.63872445311684}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$openAmount = 0;\n\t$overdueAmount = 0;\n\n\t$documentStatus = $model->status;\n\n\tif ($documentStatus == 'paid') {\n\t\treturn [\n\t\t\t'openAmount' => 0,\n\t\t\t'overdueAmount' => 0\n\t\t];\n\t}\n\n\t$payments = $model->transactions->where('status', 'paid');\n\n\tforeach ($payments as $payment) {\n\t\t$openAmount += $payment->amount;\n\t}\n\n\t$dueDate = $model->due_date;\n\n\tif ($dueDate == null) {\n\t\treturn [\n\t\t\t'openAmount' => $openAmount,\n\t\t\t'overdueAmount' => 0\n\t\t];\n\t}\n\n\t$today = Date::today();\n\n\tif ($today->gte($dueDate)) {\n\t\t$overdueAmount = $openAmount;\n\t\t$openAmount = 0;\n\t} else {\n\t\t$overdueAmount = 0;\n\t}\n\n\treturn [\n\t\t'openAmount' => $openAmount,\n\t\t'overdueAmount' => $overdueAmount\n\t];\n}", "CodeBleu_score": 35.39054114757397}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t$page = $page?: Paginator::resolveCurrentPage($pageName);\n\t$perPage = $perPage?: $this->model->getPerPage();\n\t$results = $this->forPage($page, $perPage)->get($columns);\n\treturn (new LengthAwarePaginator($results, $this->count(), $perPage, $page, [\n\t\t'path' => Paginator::resolveCurrentPath(),\n\t\t'pageName' => $pageName,\n\t]));\n}", "CodeBleu_score": 59.60284556301079}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t$page = $page?: Paginator::resolveCurrentPage($pageName);\n\t$perPage = $perPage?: $this->perPage;\n\t$results = $this->forPage($page, $perPage)->get($columns);\n\treturn new LengthAwarePaginator($results, $this->count(), $perPage, $page, [\n\t\t'path' => Paginator::resolveCurrentPath(),\n\t\t'pageName' => $pageName,\n\t]);\n}", "CodeBleu_score": 57.782821379714576}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t$page = $page?: Paginator::resolveCurrentPage($pageName);\n\t$perPage = $perPage?: $this->perPage;\n\t$total = $this->toBase()->getCountForPagination();\n\t$results = $total\n\t\t? $this->forPage($page, $perPage)->get($columns)\n\t\t: $this->model->newCollection();\n\treturn $this->paginator($results, $total, $perPage, $page, [\n\t\t'path' => Paginator::resolveCurrentPath(),\n\t\t'pageName' => $pageName,\n\t]);\n}", "CodeBleu_score": 72.76349593626853}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t\t// Retrieve the reconciliations from the request\n\t$reconciliations = $request->input('reconciliations', []);\n\n\t// Retrieve the reconciliation IDs from the request\n\t$reconciliationIDs = array_map(function ($reconciliation) {\n\t\treturn $reconciliation['id'];\n\t}, $reconciliations);\n\n\t// Retrieve the reconciliation IDs from the request\n\t$reconciliationIDs = array_map(function ($reconciliation) {\n\t\treturn $reconciliation['id'];\n\t}, $reconciliations);\n\n\t// Retrieve the reconciliation IDs from the request\n\t$reconciliationIDs = array_map(function ($reconciliation) {\n\t\treturn $reconciliation['id'];\n\t}, $reconciliations);\n\n\t// Retrieve the reconciliation IDs from the request\n\t$reconciliationIDs = array_map(function ($reconciliation) {\n\t\treturn $reconciliation['id'];\n\t}, $reconciliations);\n\n\t// Retrieve the reconciliation IDs from the request\n\t$reconciliationIDs = array_map(function ($reconciliation) {\n\t\treturn $reconciliation['id'];\n\t}, $reconciliations);\n\n\t// Retrieve the reconciliation IDs from the request\n\t$reconciliationIDs = array_map(function ($reconciliation) {\n\t\treturn $reconciliation['id'];\n\t}, $reconciliations);\n\n\t// Retrieve the reconciliation IDs from the request\n\t$reconciliationIDs = array_map(function ($reconciliation) {\n\t\treturn $reconciliation['id'];\n\t}, $reconciliations);\n\n\t// Retrieve the reconciliation IDs from the request\n\t$reconciliationIDs = array_map(function ($reconciliation) {\n\t\treturn $reconciliation['id'];\n\t}, $reconciliations);\n\n\t// Retrieve the reconciliation IDs from the request\n\t$reconciliationIDs = array_map(function ($reconciliation) {\n\t\treturn $reconciliation['id'];\n\t}, $reconciliations);\n\n\t// Retrieve the reconciliation IDs from the request\n\t$reconciliationIDs = array_map(function ($reconciliation) {\n\t", "CodeBleu_score": 24.15990519833333}, {"code": "<?\npublic function reconcile($request){\n\t\t$reconciliations = Reconciliation::whereIn('id', $request->reconciliations)->get();\n\n\tDB::beginTransaction();\n\n\ttry {\n\t\tforeach ($reconciliations as $reconciliation) {\n\t\t\t$reconciliation->status = Reconciliation::STATUS_RECONCILED;\n\t\t\t$reconciliation->save();\n\n\t\t\t$transactions = Transaction::where('account_id', $reconciliation->account_id)\n\t\t\t\t->whereBetween('date', [$reconciliation->start_date, $reconciliation->end_date])\n\t\t\t\t->get();\n\n\t\t\tforeach ($transactions as $transaction) {\n\t\t\t\t$transaction->status = Transaction::STATUS_RECONCILED;\n\t\t\t\t$transaction->save();\n\t\t\t}\n\t\t}\n\n\t\tDB::commit();\n\t} catch (Exception $e) {\n\t\tDB::rollBack();\n\t\tthrow $e;\n\t}\n}", "CodeBleu_score": 40.12804681114924}, {"code": "<?\npublic function reconcile($request){\n\t\t$reconciliations = Reconciliation::whereIn('id', $request->reconciliations)->get();\n\n\t$reconciliations->each(function ($reconciliation) use ($request) {\n\t\t$reconciliation->reconciled_at = now();\n\t\t$reconciliation->save();\n\n\t\t$transactions = Transaction::where('account_id', $reconciliation->account_id)\n\t\t\t->whereBetween('created_at', [$reconciliation->start_date, $reconciliation->end_date])\n\t\t\t->get();\n\n\t\t$transactions->each(function ($transaction) {\n\t\t\t$transaction->reconciled_at = now();\n\t\t\t$transaction->save();\n\t\t});\n\t});\n}", "CodeBleu_score": 39.99589464290521}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t\t$user = $this->user;\n\t$invitations = UserInvitation::where('user_id', $user->id)->get();\n\tforeach ($invitations as $invitation) {\n\t\t$invitation->delete();\n\t}\n\t$invitation = UserInvitation::create([\n\t\t'user_id' => $user->id,\n\t\t'token' => Str::random(10),\n\t]);\n\ttry {\n\t\t$notification = new Notification($invitation);\n\t\t$notification->notify($user);\n\t} catch (TransportException $e) {\n\t\tthrow new Exception('Unable to send invitation email.');\n\t}\n\treturn $invitation;\n}", "CodeBleu_score": 40.2915378511011}, {"code": "<?\npublic function handle(): UserInvitation{\n\t\t$user = $this->user;\n\n\t// Get existing invitations for the user and delete them\n\t$existingInvitations = UserInvitation::where('user_id', $user->id)->get();\n\tforeach ($existingInvitations as $invitation) {\n\t\t$invitation->delete();\n\t}\n\n\t// Create a new invitation with a unique token\n\t$invitation = new UserInvitation();\n\t$invitation->user_id = $user->id;\n\t$invitation->token = Str::random(60);\n\t$invitation->save();\n\n\t// Attempt to dispatch a notification job to notify the user\n\ttry {\n\t\tdispatch(new Notification($user, $invitation));\n\t} catch (Exception $e) {\n\t\t// If the notification fails, throw an exception with an error message\n\t\tthrow new Exception('Failed to send invitation notification: '. $e->getMessage());\n\t}\n\n\treturn $invitation;\n}", "CodeBleu_score": 31.98277949961846}, {"code": "<?\npublic function handle(): UserInvitation{\n\t\t$user = $this->user;\n\n\t// Delete existing invitations for the user\n\t$user->invitations()->delete();\n\n\t// Create a new invitation with a unique token\n\t$invitation = $user->invitations()->create([\n\t\t'token' => Str::random(64),\n\t]);\n\n\t// Attempt to dispatch a notification job to notify the user\n\ttry {\n\t\t$notification = new Notification($invitation);\n\t\t$notification->notify(Sources::get('mailables.default'));\n\t} catch (TransportException $e) {\n\t\tthrow new Exception('Failed to send invitation email');\n\t}\n\n\treturn $invitation;\n}", "CodeBleu_score": 27.086670360347664}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\t\tif ($this->transaction->reconciled) {\n\t\tthrow new Exception('Transaction has already been reconciled.');\n\t}\n\n\tif ($this->transaction->is_transfer) {\n\t\tthrow new Exception('Transaction is a transfer transaction. You cannot authorize it.');\n\t}\n}", "CodeBleu_score": 25.654648517555856}, {"code": "<?\npublic function authorize(): void{\n\t\tif ($this->transaction->reconciled) {\n\t\tthrow new UnauthorizedException('This transaction has already been reconciled.');\n\t}\n\n\tif ($this->transaction->is_transfer) {\n\t\tthrow new UnauthorizedException('This transaction is a transfer and cannot be authorized.');\n\t}\n}", "CodeBleu_score": 24.948910272058622}, {"code": "<?\npublic function authorize(): void{\n\t\tif ($this->transaction->reconciled) {\n\t\tthrow new UnauthorizedException('Transaction has already been reconciled.');\n\t}\n\n\tif ($this->transaction->isTransfer()) {\n\t\tthrow new UnauthorizedException('This transaction is a transfer transaction and cannot be authorized.');\n\t}\n}", "CodeBleu_score": 26.757221590571277}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t\t// If the table name is in the list of allowed tables, return true. Otherwise, return false.\n\treturn allowedTables.contains(tableName);\n}", "CodeBleu_score": 5.270880692128915}, {"code": "public boolean doTableFilter(String tableName){\n\t\tboolean result = false;\n\tif (tableName.equals(\"t_order\") || tableName.equals(\"t_order_detail\") || tableName.equals(\"t_product\") || tableName.equals(\"t_product_category\")) {\n\t\tresult = true;\n\t}\n\treturn result;\n}", "CodeBleu_score": 14.149933876780002}, {"code": "public boolean doTableFilter(String tableName){\n\t\tboolean result = false;\n\tif (tableName.equals(\"user_info\") || tableName.equals(\"user_info_history\") || tableName.equals(\"user_info_history_temp\")) {\n\t\tresult = true;\n\t}\n\treturn result;\n}", "CodeBleu_score": 13.242337617070204}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 63.38599822289982}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 74.548338294358}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 63.38599822289982}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t\tString result = \"\";\n\ttry {\n\t\tString userId = request.getParameter(\"userId\");\n\t\tString userName = request.getParameter(\"userName\");\n\t\tString accountName = request.getParameter(\"accountName\");\n\t\tString accountType = request.getParameter(\"accountType\");\n\t\tString accountCode = request.getParameter(\"accountCode\");\n\t\tString accountStatus = request.getParameter(\"accountStatus\");\n\t\tString accountLevel = request.getParameter(\"accountLevel\");\n\t\tString accountClass = request.getParameter(\"accountClass\");\n\t\tString accountParent = request.getParameter(\"accountParent\");\n\t\tString accountCategory = request.getParameter(\"accountCategory\");\n\t\tString accountPeriod = request.getParameter(\"accountPeriod\");\n\t\tString accountPeriodStart = request.getParameter(\"accountPeriodStart\");\n\t\tString accountPeriodEnd = request.getParameter(\"accountPeriodEnd\");\n\t\tString accountPeriodYear = request.getParameter(\"accountPeriodYear\");\n\t\tString accountPeriodMonth = request.getParameter(\"accountPeriodMonth\");\n\t\tString accountPeriodDay = request.getParameter(\"accountPeriodDay\");\n\t\tString accountPeriodDayStart = request.getParameter(\"accountPeriodDayStart\");\n\t\tString accountPeriodDayEnd = request.getParameter(\"accountPeriodDayEnd\");\n\t\tString accountPeriodMonthStart = request.getParameter(\"accountPeriodMonthStart\");\n\t\tString accountPeriodMonthEnd = request.getParameter(\"accountPeriodMonthEnd\");\n\t\tString accountPeriodYearStart = request.getParameter(\"accountPeriodYearStart\");\n\t\tString accountPeriodYearEnd = request.getParameter(\"accountPeriodYearEnd\");\n\t\tString accountPeriodQuarterStart = request.getParameter(\"accountPeriodQuarterStart\");\n\t\tString accountPeriodQuarterEnd = request.getParameter(\"accountPeriodQuarterEnd\");\n\t\tString accountPeriodHalfStart = request.getParameter(\"accountPeriodHalfStart\");\n\t\tString accountPeriodHalfEnd = request.getParameter(\"accountPeriodHalfEnd\");\n\t\tString accountPeriodYearHalfStart = request.getParameter(\"accountPeriodYearHalfStart\");\n\t\tString accountPeriodYearHalfEnd = request.getParameter(\"accountPeriodYearHalfEnd\");\n\t\tString accountPeriodQuarterHalfStart = request.getParameter(\"accountPeriodQuarterHalfStart\");\n\t\tString accountPeriodQuarterHalfEnd = request.getParameter(\"accountPeriodQuarterHalfEnd\");\n\t\tString accountPeriodYearQuarterStart = request.getParameter(\"accountPeriodYearQuarterStart\");\n\t\tString accountPeriodYearQuarterEnd = request.getParameter(\"", "CodeBleu_score": 14.10295730029798}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t\tString result = \"\";\n\ttry {\n\t\tString accountIds = request.getParameter(\"accountIds\");\n\t\tString accountNames = request.getParameter(\"accountNames\");\n\t\tString accountTypes = request.getParameter(\"accountTypes\");\n\t\tString accountClasses = request.getParameter(\"accountClasses\");\n\t\tString accountSubClasses = request.getParameter(\"accountSubClasses\");\n\t\tString accountStatus = request.getParameter(\"accountStatus\");\n\t\tString accountIsLeaf = request.getParameter(\"accountIsLeaf\");\n\t\tString accountIsRoot = request.getParameter(\"accountIsRoot\");\n\t\tString accountIsSystem = request.getParameter(\"accountIsSystem\");\n\t\tString accountIsDeleted = request.getParameter(\"accountIsDeleted\");\n\t\tString accountIsLeafs = request.getParameter(\"accountIsLeafs\");\n\t\tString accountIsRoots = request.getParameter(\"accountIsRoots\");\n\t\tString accountIsSystems = request.getParameter(\"accountIsSystems\");\n\t\tString accountIsDeleteds = request.getParameter(\"accountIsDeleteds\");\n\t\tString accountIsLeafss = request.getParameter(\"accountIsLeafss\");\n\t\tString accountIsRootss = request.getParameter(\"accountIsRootss\");\n\t\tString accountIsSystemss = request.getParameter(\"accountIsSystemss\");\n\t\tString accountIsDeletedss = request.getParameter(\"accountIsDeletedss\");\n\t\tString accountIsLeafsss = request.getParameter(\"accountIsLeafsss\");\n\t\tString accountIsRootsss = request.getParameter(\"accountIsRootsss\");\n\t\tString accountIsSystemsss = request.getParameter(\"accountIsSystemsss\");\n\t\tString accountIsDeletedsss = request.getParameter(\"accountIsDeletedsss\");\n\t\tString accountIsLeafssss = request.getParameter(\"accountIsLeafssss\");\n\t\tString accountIsRootssss = request.getParameter(\"accountIsRootssss\");\n\t\tString accountIsSystemssss = request.getParameter(\"accountIsSystemssss\");\n\t\tString accountIsDeletedssss = request.getParameter(\"accountIsDeletedssss\");\n\t\tString accountIsLeafsssss = request.getParameter(\"accountIsLeafsssss\");\n\t\tString accountIsRootsssss = request.getParameter(\"accountIsRootsssss\");\n\t\tString accountIsSystemsssss = request.getParameter(\"accountIsSystemsssss\");\n\t\tString accountIsDeletedsssss = request.getParameter(\"accountIsDeletedsssss\");\n\t\tString accountIsLeafssssss = request.getParameter(\"accountIsLeafssss", "CodeBleu_score": 14.2563015927062}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t\tLogger logger = LoggerFactory.getLogger(AccountController.class);\n\tString result = \"\";\n\ttry {\n\t\t//\u83b7\u53d6\u53c2\u6570\n\t\tString accountName = request.getParameter(\"accountName\");\n\t\tString accountType = request.getParameter(\"accountType\");\n\t\tString accountStatus = request.getParameter(\"accountStatus\");\n\t\tString accountNumber = request.getParameter(\"accountNumber\");\n\t\tString pageNum = request.getParameter(\"pageNum\");\n\t\tString pageSize = request.getParameter(\"pageSize\");\n\t\tString sort = request.getParameter(\"sort\");\n\t\tString order = request.getParameter(\"order\");\n\t\tString companyId = request.getParameter(\"companyId\");\n\t\t//\u5c01\u88c5\u53c2\u6570\n\t\tMap<String, Object> param = new HashMap<>();\n\t\tparam.put(\"accountName\", accountName);\n\t\tparam.put(\"accountType\", accountType);\n\t\tparam.put(\"accountStatus\", accountStatus);\n\t\tparam.put(\"accountNumber\", accountNumber);\n\t\tparam.put(\"pageNum\", pageNum);\n\t\tparam.put(\"pageSize\", pageSize);\n\t\tparam.put(\"sort\", sort);\n\t\tparam.put(\"order\", order);\n\t\tparam.put(\"companyId\", companyId);\n\t\t//\u8c03\u7528service\n\t\tList<AccountVo4List> accountList = accountService.findBySelect(param);\n\t\t//\u5c01\u88c5\u8fd4\u56de\u53c2\u6570\n\t\tMap<String, Object> map = new HashMap<>();\n\t\tmap.put(\"total\", accountList.size());\n\t\tmap.put(\"rows\", accountList);\n\t\t//\u8fd4\u56dejson\n\t\tresult = returnJson(map);\n\t} catch (Exception e) {\n\t\tlogger.error(\"AccountController.findBySelect() error\", e);\n\t\tresult = returnJson(new BaseResponseInfo(ErpInfo.FAILED_CODE, ErpInfo.FAILED_MESSAGE));\n\t}\n\treturn result;\n}", "CodeBleu_score": 27.244330235575443}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\ttry {\n\t\tAccountService accountService = (AccountService) ErpInfo.getBean(\"accountService\");\n\t\tList<Account> accounts = accountService.listWithBalance(name, serialNo, currentPage, pageSize);\n\t\tint count = accountService.countWithBalance(name, serialNo);\n\t\tresponseInfo.setCode(BaseResponseInfo.SUCCESS_CODE);\n\t\tresponseInfo.setMsg(BaseResponseInfo.SUCCESS_MSG);\n\t\tresponseInfo.setData(accounts);\n\t\tresponseInfo.setCount(count);\n\t} catch (Exception e) {\n\t\tresponseInfo.setCode(BaseResponseInfo.ERROR_CODE);\n\t\tresponseInfo.setMsg(BaseResponseInfo.ERROR_MSG);\n\t\tlogger.error(\"Exception in listWithBalance: \", e);\n\t}\n\treturn responseInfo;\n}", "CodeBleu_score": 38.779016726714765}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t\tLogger logger = LoggerFactory.getLogger(AccountController.class);\n\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\ttry {\n\t\tAccountVo4List accountVo4List = new AccountVo4List();\n\t\taccountVo4List.setName(name);\n\t\taccountVo4List.setSerialNo(serialNo);\n\t\taccountVo4List.setPage(currentPage);\n\t\taccountVo4List.setPageSize(pageSize);\n\t\taccountVo4List.setTenantId(ErpInfo.getTenantId(request));\n\t\taccountVo4List.setUserId(ErpInfo.getUserId(request));\n\t\taccountVo4List.setCompanyId(ErpInfo.getCompanyId(request));\n\t\taccountVo4List.setStoreId(ErpInfo.getStoreId(request));\n\t\taccountVo4List.setDeptId(ErpInfo.getDeptId(request));\n\t\taccountVo4List.setWarehouseId(ErpInfo.getWarehouseId(request));\n\t\taccountVo4List.setRoleId(ErpInfo.getRoleId(request));\n\t\taccountVo4List.setTenantId(ErpInfo.getTenantId(request));\n\t\taccountVo4List.setUserId(ErpInfo.getUserId(request));\n\t\taccountVo4List.setCompanyId(ErpInfo.getCompanyId(request));\n\t\taccountVo4List.setStoreId(ErpInfo.getStoreId(request));\n\t\taccountVo4List.setDeptId(ErpInfo.getDeptId(request));\n\t\taccountVo4List.setWarehouseId(ErpInfo.getWarehouseId(request));\n\t\taccountVo4List.setRoleId(ErpInfo.getRoleId(request));\n\t\taccountVo4List.setTenantId(ErpInfo.getTenantId(request));\n\t\taccountVo4List.setUserId(ErpInfo.getUserId(request));\n\t\taccountVo4List.setCompanyId(ErpInfo.getCompanyId(request));\n\t\taccountVo4List.setStoreId(ErpInfo.getStoreId(request));\n\t\taccountVo4List.setDeptId(ErpInfo.getDeptId(request));\n\t\taccountVo4List.setWarehouseId(ErpInfo.getWarehouseId(request));\n\t\taccountVo4List.setRoleId(ErpInfo.get", "CodeBleu_score": 28.263308723796122}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\n\t\tErpInfo erpInfo = (ErpInfo)request.getSession().getAttribute(\"erpInfo\");\n\t\tif(null == erpInfo) {\n\t\t\tresponse.setCode(1);\n\t\t\tresponse.setMessage(\"\u8bf7\u91cd\u65b0\u767b\u5f55\");\n\t\t\treturn response;\n\t\t}\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684id\n\t\tInteger userId = erpInfo.getAccount().getId();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684id\n\t\tString userName = erpInfo.getAccount().getLoginName();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684id\n\t\tInteger roleId = erpInfo.getAccount().getRoleId();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684id\n\t\tInteger companyId = erpInfo.getAccount().getCompanyId();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684id\n\t\tInteger departmentId = erpInfo.getAccount().getDepartmentId();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684id\n\t\tInteger jobId = erpInfo.getAccount().getJobId();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684id\n\t\tString userType = erpInfo.getAccount().getUserType();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684id\n\t\tString userStatus = erpInfo.getAccount().getUserStatus();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684id\n\t\tString userPhone = erpInfo.getAccount().getUserPhone();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684id\n\t\tString userEmail = erpInfo.getAccount().getUserEmail();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684id\n\t\tString userAddress = erpInfo.getAccount().getUserAddress();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684id\n\t\tString userRemark = erpInfo.getAccount().getUserRemark();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684id\n\t\tString userPassword = erpInfo.getAccount().getUserPassword();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684id\n\t\tString userSalt = erpInfo.getAccount().getUserSalt();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684id\n\t\tString userRealName = erpInfo.getAccount().getUserRealName();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684id\n\t\tString userImg = erpInfo.getAccount().getUserImg();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684id\n\t\tString userSex = erpInfo.getAccount().getUserSex();\n\t\t", "CodeBleu_score": 29.923797649120388}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t\tLogger logger = LoggerFactory.getLogger(getClass());\n\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\ttry {\n\t\tlogger.info(\"getStatistics: name={}, serialNo={}\", name, serialNo);\n\t\tAccountService accountService = new AccountService();\n\t\tAccountVo4List accountVo4List = accountService.getAccountVo4List(name, serialNo);\n\t\tresponseInfo.setCode(ErpInfo.SUCCESS_CODE);\n\t\tresponseInfo.setData(accountVo4List);\n\t} catch (Exception e) {\n\t\tlogger.error(\"getStatistics error\", e);\n\t\tresponseInfo.setCode(ErpInfo.SYSTEM_ERROR_CODE);\n\t\tresponseInfo.setMsg(ErpInfo.SYSTEM_ERROR_MSG);\n\t}\n\treturn returnJson(responseInfo);\n}", "CodeBleu_score": 38.06295822121129}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\tAccountVo4List accountVo4List = new AccountVo4List();\n\ttry {\n\t\tMap<String, Object> map = new HashMap<String, Object>();\n\t\tmap.put(\"name\", name);\n\t\tmap.put(\"serialNo\", serialNo);\n\t\tmap.put(\"page\", 1);\n\t\tmap.put(\"rows\", 10000);\n\t\tList<Account> accountList = accountService.getAccountList(map);\n\t\tif (accountList!= null && accountList.size() > 0) {\n\t\t\tAccount account = accountList.get(0);\n\t\t\taccountVo4List.setId(account.getId());\n\t\t\taccountVo4List.setName(account.getName());\n\t\t\taccountVo4List.setSerialNo(account.getSerialNo());\n\t\t\taccountVo4List.setAddress(account.getAddress());\n\t\t\taccountVo4List.setPhone(account.getPhone());\n\t\t\taccountVo4List.setEmail(account.getEmail());\n\t\t\taccountVo4List.setAccountType(account.getAccountType());\n\t\t\taccountVo4List.setAccountStatus(account.getAccountStatus());\n\t\t\taccountVo4List.setAccountBalance(account.getAccountBalance());\n\t\t\taccountVo4List.setCreateTime(account.getCreateTime());\n\t\t\taccountVo4List.setCreateUser(account.getCreateUser());\n\t\t\taccountVo4List.setUpdateTime(account.getUpdateTime());\n\t\t\taccountVo4List.setUpdateUser(account.getUpdateUser());\n\t\t}\n\t\tresponseInfo.setCode(ErpInfo.SUCCESS_CODE);\n\t\tresponseInfo.setMessage(ErpInfo.SUCCESS_MESSAGE);\n\t\tresponseInfo.setData(accountVo4List);\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tresponseInfo.setCode(ErpInfo.ERROR_CODE);\n\t\tresponseInfo.setMessage(ErpInfo.ERROR_MESSAGE);\n\t\tresponseInfo.setData(null);\n\t}\n\treturn responseInfo;\n}", "CodeBleu_score": 41.06074841566843}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\tAccountService accountService = (AccountService) ErpInfo.wac.lookup(\"accountService\");\n\ttry {\n\t\tMap<String, Object> param = new HashMap<String, Object>();\n\t\tparam.put(\"name\", name);\n\t\tparam.put(\"serialNo\", serialNo);\n\t\tList<AccountVo4List> accountList = accountService.getStatistics(param);\n\t\tif(accountList == null || accountList.size() == 0){\n\t\t\tresponseInfo.setCode(500);\n\t\t\tresponseInfo.setMessage(\"No data found\");\n\t\t\treturn returnJson(responseInfo);\n\t\t}\n\t\tresponseInfo.setCode(200);\n\t\tresponseInfo.setData(accountList);\n\t\treturn returnJson(responseInfo);\n\t} catch (Exception e) {\n\t\tlogger.error(\"getStatistics failed, name:{}, serialNo:{}, error:{}\", name, serialNo, e);\n\t\tresponseInfo.setCode(500);\n\t\tresponseInfo.setMessage(\"getStatistics failed\");\n\t\treturn returnJson(responseInfo);\n\t}\n}", "CodeBleu_score": 40.32621120610324}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\tErpInfo erpInfo = new ErpInfo();\n\ttry {\n\t\terpInfo.setBillNo(billNo);\n\t\terpInfo.setErpUserId(request.getHeader(\"erpUserId\"));\n\t\terpInfo.setErpToken(request.getHeader(\"erpToken\"));\n\t\terpInfo.setErpOrgId(request.getHeader(\"erpOrgId\"));\n\t\terpInfo.setErpCompanyId(request.getHeader(\"erpCompanyId\"));\n\t\terpInfo.setErpBranchId(request.getHeader(\"erpBranchId\"));\n\t\terpInfo.setErpBranchCode(request.getHeader(\"erpBranchCode\"));\n\t\terpInfo.setErpBranchName(request.getHeader(\"erpBranchName\"));\n\t\terpInfo.setErpCompanyCode(request.getHeader(\"erpCompanyCode\"));\n\t\terpInfo.setErpCompanyName(request.getHeader(\"erpCompanyName\"));\n\t\terpInfo.setErpOrgCode(request.getHeader(\"erpOrgCode\"));\n\t\terpInfo.setErpOrgName(request.getHeader(\"erpOrgName\"));\n\t\terpInfo.setErpUserName(request.getHeader(\"erpUserName\"));\n\t\terpInfo.setErpUserCode(request.getHeader(\"erpUserCode\"));\n\t\terpInfo.setErpUserEmail(request.getHeader(\"erpUserEmail\"));\n\t\terpInfo.setErpUserMobile(request.getHeader(\"erpUserMobile\"));\n\t\terpInfo.setErpUserType(request.getHeader(\"erpUserType\"));\n\t\terpInfo.setErpUserTypeId(request.getHeader(\"erpUserTypeId\"));\n\t\terpInfo.setErpUserDepartmentId(request.getHeader(\"erpUserDepartmentId\"));\n\t\terpInfo.setErpUserDepartmentCode(request.getHeader(\"erpUserDepartmentCode\"));\n\t\terpInfo.setErpUserDepartmentName(request.getHeader(\"erpUserDepartmentName\"));\n\t\terpInfo.setErpUserDepartmentTypeId(request.getHeader(\"erpUserDepartmentTypeId\"));\n\t\terpInfo.setErpUserDepartmentTypeCode(request.getHeader(\"erpUserDepartmentTypeCode\"));\n\t\terpInfo.setErpUserDepartmentTypeName(request.getHeader(\"erpUserDepartmentTypeName\"));\n\t\terpInfo.setErpUserDepartmentHeadId(request.getHeader(\"erpUserDepartmentHeadId\"));\n\t\terpInfo.", "CodeBleu_score": 18.507516644797573}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\ttry {\n\t\tErpInfo erpInfo = (ErpInfo) request.getAttribute(\"erpInfo\");\n\t\tAccountHeadVo4Body accountHeadVo4Body = new AccountHeadVo4Body();\n\t\taccountHeadVo4Body.setBillNo(billNo);\n\t\taccountHeadVo4Body.setErpInfo(erpInfo);\n\t\tList<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(accountHeadVo4Body);\n\t\tif (list.size() > 0) {\n\t\t\tresponseInfo.setResponseCode(BusinessConstants.SUCCESS_CODE);\n\t\t\tresponseInfo.setResponseMsg(BusinessConstants.SUCCESS_MSG);\n\t\t\tresponseInfo.setResponseObj(list.get(0));\n\t\t} else {\n\t\t\tresponseInfo.setResponseCode(BusinessConstants.ERROR_CODE);\n\t\t\tresponseInfo.setResponseMsg(ExceptionConstants.NO_DATA_FOUND);\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tresponseInfo.setResponseCode(BusinessConstants.ERROR_CODE);\n\t\tresponseInfo.setResponseMsg(ExceptionConstants.EXCEPTION_MSG);\n\t}\n\treturn responseInfo;\n}", "CodeBleu_score": 41.05765695518308}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t\tBaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n\tErpInfo erpInfo = new ErpInfo();\n\tMap<String, Object> map = new HashMap<String, Object>();\n\ttry {\n\t\tAccountHeadVo4ListEx accountHeadVo4ListEx = accountHeadService.getDetailByNumber(billNo);\n\t\tList<AccountHeadVo4Body> accountHeadVo4BodyList = accountHeadVo4ListEx.getAccountHeadVo4BodyList();\n\t\tif (accountHeadVo4BodyList!= null && accountHeadVo4BodyList.size() > 0) {\n\t\t\tAccountHeadVo4Body accountHeadVo4Body = accountHeadVo4BodyList.get(0);\n\t\t\tAccountHead accountHead = accountHeadVo4Body.getAccountHead();\n\t\t\tmap.put(\"accountHead\", accountHead);\n\t\t\tmap.put(\"accountHeadVo4Body\", accountHeadVo4Body);\n\t\t\tmap.put(\"accountHeadVo4ListEx\", accountHeadVo4ListEx);\n\t\t\tbaseResponseInfo.setCode(BusinessConstants.SUCCESS_CODE);\n\t\t\tbaseResponseInfo.setMsg(BusinessConstants.SUCCESS_MSG);\n\t\t\tbaseResponseInfo.setData(map);\n\t\t} else {\n\t\t\tbaseResponseInfo.setCode(BusinessConstants.FAIL_CODE);\n\t\t\tbaseResponseInfo.setMsg(BusinessConstants.FAIL_MSG);\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(ExceptionConstants.ACCOUNT_HEAD_GET_DETAIL_BY_NUMBER_ERROR, e);\n\t\tbaseResponseInfo.setCode(BusinessConstants.FAIL_CODE);\n\t\tbaseResponseInfo.setMsg(BusinessConstants.FAIL_MSG);\n\t}\n\treturn baseResponseInfo;\n}", "CodeBleu_score": 36.692571979251014}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\tresponseInfo.setResponseCode(200);\n\ttry {\n\t\t// get current user\n\t\tUser user = (User) request.getAttribute(\"user\");\n\t\t// get current user depot\n\t\tDepot depot = userService.findDepotByUserId(user.getUserId());\n\t\t// set response data\n\t\tresponseInfo.setData(depot);\n\t} catch (Exception e) {\n\t\tlogger.error(\"findDepotByCurrentUser error\", e);\n\t\tresponseInfo.setResponseCode(500);\n\t\tresponseInfo.setResponseMessage(ExceptionConstants.SYSTEM_ERROR);\n\t}\n\treturn responseInfo;\n}", "CodeBleu_score": 38.13720292058902}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\tDepotService depotService = new DepotService();\n\ttry {\n\t\tresponseInfo.setCode(BusinessConstants.SUCCESS_CODE);\n\t\tresponseInfo.setMessage(BusinessConstants.SUCCESS_MESSAGE);\n\t\tresponseInfo.setData(depotService.findDepotByCurrentUser());\n\t} catch (Exception e) {\n\t\tresponseInfo.setCode(BusinessConstants.ERROR_CODE);\n\t\tresponseInfo.setMessage(BusinessConstants.ERROR_MESSAGE);\n\t\tlogger.error(e.getMessage(), e);\n\t}\n\treturn responseInfo;\n}", "CodeBleu_score": 35.43068106550095}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tLogger logger = LoggerFactory.getLogger(this.getClass());\n\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\ttry {\n\t\t//get current user\n\t\tString userId = (String) request.getAttribute(BusinessConstants.CURRENT_USER_ID);\n\t\t//get depot list\n\t\tList<Depot> depotList = depotService.findDepotByUserId(userId);\n\t\t//get depot list\n\t\tList<DepotEx> depotExList = depotService.findDepotExByUserId(userId);\n\t\t//set response code\n\t\tresponseInfo.setResponseCode(BusinessConstants.RESPONSE_CODE_SUCCESS);\n\t\t//set response data\n\t\tresponseInfo.setResponseData(depotList);\n\t\tresponseInfo.setResponseDataEx(depotExList);\n\t} catch (DataAccessException e) {\n\t\tlogger.error(ExceptionConstants.DATABASE_EXCEPTION, e);\n\t\tresponseInfo.setResponseCode(BusinessConstants.RESPONSE_CODE_ERROR);\n\t\tresponseInfo.setResponseMessage(ExceptionConstants.DATABASE_EXCEPTION_MESSAGE);\n\t} catch (Exception e) {\n\t\tlogger.error(ExceptionConstants.OTHER_EXCEPTION, e);\n\t\tresponseInfo.setResponseCode(BusinessConstants.RESPONSE_CODE_ERROR);\n\t\tresponseInfo.setResponseMessage(ExceptionConstants.OTHER_EXCEPTION_MESSAGE);\n\t}\n\treturn responseInfo;\n}", "CodeBleu_score": 32.135473856685756}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t\tLogger logger = LoggerFactory.getLogger(this.getClass());\n\tJSONArray jsonArray = new JSONArray();\n\tJSONObject jsonObject = new JSONObject();\n\ttry {\n\t\tUserBusinessService userBusinessService = new UserBusinessService();\n\t\tFunctionService functionService = new FunctionService();\n\t\tSystemConfigService systemConfigService = new SystemConfigService();\n\t\t// 1. get the user business object\n\t\tUserBusiness userBusiness = userBusinessService.getUserBusiness(type, keyId);\n\t\t// 2. get the functions of the user business object\n\t\tList<Function> functions = userBusiness.getFunctions();\n\t\t// 3. get the system config object\n\t\tSystemConfig systemConfig = systemConfigService.getSystemConfig();\n\t\t// 4. get the tenant id from the request token\n\t\tString tenantId = ErpInfo.getTenantId(request);\n\t\t// 5. create a JSON array\n\t\tjsonArray = new JSONArray();\n\t\t// 6. create a JSON object to represent the function list\n\t\tjsonObject = new JSONObject();\n\t\t// 7. create a list to store the filtered functions\n\t\tList<Function> filteredFunctions = new ArrayList<>();\n\t\t// 8. loop through the functions\n\t\tfor (Function function : functions) {\n\t\t\t// 9. if the function is not \"\u7cfb\u7edf\u7ba1\u7406\"\n\t\t\tif (!function.getFunctionName().equals(systemConfig.getSystemName())) {\n\t\t\t\t// 10. add the function to the filtered functions list\n\t\t\t\tfilteredFunctions.add(function);\n\t\t\t}\n\t\t}\n\t\t// 11. create a JSON object to represent the filtered functions\n\t\tJSONObject filteredFunctionsObject = new JSONObject();\n\t\t// 12. create a JSON array to store the filtered functions\n\t\tJSONArray filteredFunctionsArray = new JSONArray();\n\t\t// 13. loop through the filtered functions\n\t\tfor (Function function : filteredFunctions) {\n\t\t\t// 14. create a JSON object to represent the function\n\t\t\tJSONObject functionObject = new JSONObject();\n\t\t\t// 15. add the function name to the JSON object\n\t\t\tfunctionObject.put(\"functionName\", function.getFunctionName());\n\t\t\t// 16. add the function URL to the JSON object\n\t\t\tfunctionObject.put(\"functionUrl\", function.getFunctionUrl());\n\t\t\t// 17. add the function icon to the JSON object\n\t\t\tfunctionObject", "CodeBleu_score": 33.72415948285569}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t\tLogger logger = LoggerFactory.getLogger(getClass());\n\tJSONArray jsonArray = new JSONArray();\n\ttry {\n\t\t//\u83b7\u53d6\u7528\u6237\u4fe1\u606f\n\t\tUser user = (User) request.getSession().getAttribute(ErpInfo.SESSION_USER);\n\t\tif(user == null){\n\t\t\tthrow new BusinessRunTimeException(ExceptionConstants.USER_NOT_LOGIN);\n\t\t}\n\t\t//\u83b7\u53d6\u7528\u6237\u4e1a\u52a1\u4fe1\u606f\n\t\tUserBusiness userBusiness = userBusinessService.findUserBusinessByUBTypeAndUBKeyId(type, keyId);\n\t\tif(userBusiness == null){\n\t\t\tthrow new BusinessRunTimeException(ExceptionConstants.USER_BUSINESS_NOT_FOUND);\n\t\t}\n\t\t//\u83b7\u53d6\u7528\u6237\u4e1a\u52a1\u4e0b\u9762\u7684\u89d2\u8272\u4fe1\u606f\n\t\tList<UserBusiness> userBusinesses = userBusinessService.findUserBusinessByUBTypeAndUBKeyIdAndUBParentId(type, keyId, userBusiness.getUbId());\n\t\tif(userBusinesses == null){\n\t\t\tthrow new BusinessRunTimeException(ExceptionConstants.USER_BUSINESS_NOT_FOUND);\n\t\t}\n\t\t//\u83b7\u53d6\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\n\t\tSystemConfig systemConfig = systemConfigService.findSystemConfigByKey(\"SYSTEM_ADMIN_ID\");\n\t\tif(systemConfig == null){\n\t\t\tthrow new BusinessRunTimeException(ExceptionConstants.SYSTEM_CONFIG_NOT_FOUND);\n\t\t}\n\t\t//\u83b7\u53d6\u89d2\u8272\u4fe1\u606f\n\t\tList<UserBusiness> roleList = new ArrayList<>();\n\t\tfor(UserBusiness ub : userBusinesses){\n\t\t\tif(ub.getUbType().equals(\"ROLE\")){\n\t\t\t\troleList.add(ub);\n\t\t\t}\n\t\t}\n\t\tif(roleList.size() == 0){\n\t\t\tthrow new BusinessRunTimeException(ExceptionConstants.USER_BUSINESS_NOT_FOUND);\n\t\t}\n\t\t//\u83b7\u53d6\u89d2\u8272\u4e0b\u9762\u7684\u529f\u80fd\u4fe1\u606f\n\t\tList<Function> functionList = new ArrayList<>();\n\t\tfor(UserBusiness ub : roleList){\n\t\t\tList<Function> functions = functionService.findFunctionByUBTypeAndUBKeyIdAndUBParentId(ub.getUbType(), ub.getUbKeyId(), ub.getUbId());\n\t\t\tif(functions!= null){\n\t\t\t\tfunctionList.addAll(functions);\n\t\t\t}\n\t\t}\n\t\t//\u83b7\u53d6\u529f\u80fd\u4fe1\u606f\n\t\tList<Function> functions = functionService.findFunctionByUBTypeAndUBKeyIdAnd", "CodeBleu_score": 34.58725539780626}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t\tLogger logger = LoggerFactory.getLogger(this.getClass());\n\tJSONArray jsonArray = new JSONArray();\n\tJSONObject jsonObject = new JSONObject();\n\ttry {\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\n\t\tUser user = (User) request.getSession().getAttribute(ErpInfo.USER_SESSION);\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684\u79df\u6237id\n\t\tLong tenantId = user.getTenantId();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684\u89d2\u8272id\n\t\tLong roleId = user.getRoleId();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684\u7528\u6237id\n\t\tLong userId = user.getId();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684\u7528\u6237id\n\t\tString userName = user.getUserName();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684\u7528\u6237id\n\t\tString userCode = user.getUserCode();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684\u7528\u6237id\n\t\tString userEmail = user.getEmail();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684\u7528\u6237id\n\t\tString userMobile = user.getMobile();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684\u7528\u6237id\n\t\tString userPhone = user.getPhone();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684\u7528\u6237id\n\t\tString userAddress = user.getAddress();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684\u7528\u6237id\n\t\tString userRemark = user.getRemark();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684\u7528\u6237id\n\t\tString userStatus = user.getStatus();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684\u7528\u6237id\n\t\tString userPassword =.();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684\u7528\u6237id\n\t\tString userSalt = user.getSalt();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684\u7528\u6237id\n\t\tString userType = user.getUserType();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684\u7528\u6237id\n\t\tString userIsAdmin = user.getIsAdmin();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684\u7528\u6237id\n\t\tString userIsSystem = user.getIsSystem();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684\u7528\u6237id\n\t\tString userIsLock = user.getIsLock();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684\u7528\u6237id\n\t\tString userIsDelete = user.getIsDelete();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684\u7528\u6237id\n\t\tString userIsSuper = user.getIsSuper();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684\u7528\u6237id\n\t\tString userIsUse = user.getIsUse();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\u7684\u7528\u6237id\n\t\tString userIsChange = user.getIsChange();\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55", "CodeBleu_score": 27.5402489302366}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\tLogger logger = LoggerFactory.getLogger(getClass());\n\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\t//get user info from session\n\t\tUser user = (User) request.getSession().getAttribute(\"user\");\n\t\t//get platform config info by platform key\n\t\tPlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n\t\t//set response info\n\t\tresponse.setCode(ErpInfo.SUCCESS_CODE);\n\t\tresponse.setMessage(ErpInfo.SUCCESS_MSG);\n\t\tresponse.setData(platformConfig);\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tresponse.setCode(ErpInfo.ERROR_CODE);\n\t\tresponse.setMessage(ErpInfo.ERROR_MSG);\n\t}\n\treturn response;\n}", "CodeBleu_score": 44.53272032953171}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\tLogger logger = LoggerFactory.getLogger(getClass());\n\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\ttry {\n\t\tPlatformConfig platformConfig = platformConfigService.getByPlatformKey(platformKey);\n\t\tif (platformConfig!= null) {\n\t\t\tresponseInfo.setData(platformConfig);\n\t\t\tresponseInfo.setCode(ErpInfo.SUCCESS_CODE);\n\t\t} else {\n\t\t\tresponseInfo.setCode(ErpInfo.SUCCESS_CODE);\n\t\t\tresponseInfo.setMessage(\"Not found\");\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(\"Exception occurred while getting platform config by platform key: \" + platformKey, e);\n\t\tresponseInfo.setCode(ErpInfo.EXCEPTION_CODE);\n\t\tresponseInfo.setMessage(\"Exception occurred while getting platform config by platform key: \" + platformKey);\n\t}\n\treturn responseInfo;\n}", "CodeBleu_score": 40.30036196417536}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\tLogger logger = LoggerFactory.getLogger(getClass());\n\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\ttry {\n\t\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\u4fe1\u606f\n\t\tUser user = (User) request.getSession().getAttribute(\"user\");\n\t\t//\u83b7\u53d6\u5f53\u524d\u5e73\u53f0\u4fe1\u606f\n\t\tPlatformConfig platformConfig = platformConfigService.getPlatformConfig(user.getPlatformId());\n\t\t//\u83b7\u53d6\u5f53\u524d\u5e73\u53f0\u4fe1\u606f\n\t\tPlatformConfig platformConfigByKey = platformConfigService.getPlatformConfigByKey(platformKey);\n\t\t//\u83b7\u53d6\u5f53\u524d\u5e73\u53f0\u4fe1\u606f\n\t\tif(platformConfigByKey!=null){\n\t\t\tresponseInfo.setCode(ErpInfo.SUCCESS);\n\t\t\tresponseInfo.setData(platformConfigByKey);\n\t\t}else{\n\t\t\tresponseInfo.setCode(ErpInfo.ERROR);\n\t\t\tresponseInfo.setMessage(\"\u672a\u627e\u5230\u5bf9\u5e94\u7684\u5e73\u53f0\u914d\u7f6e\u4fe1\u606f\");\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(\"\u83b7\u53d6\u5e73\u53f0\u914d\u7f6e\u4fe1\u606f\u5f02\u5e38\", e);\n\t\tresponseInfo.setCode(ErpInfo.ERROR);\n\t\tresponseInfo.setMessage(\"\u83b7\u53d6\u5e73\u53f0\u914d\u7f6e\u4fe1\u606f\u5f02\u5e38\");\n\t}\n\treturn responseInfo;\n}", "CodeBleu_score": 39.18866383194939}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\tresponseInfo.setCode(200);\n\tresponseInfo.setData(null);\n\ttry {\n\t\tString path = (String) request.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE);\n\t\tString method = request.getMethod();\n\t\tString uri = request.getRequestURI();\n\t\tString queryString = request.getQueryString();\n\t\tString url = request.getRequestURL().toString();\n\t\tString ip = request.getRemoteAddr();\n\t\tString userAgent = request.getHeader(\"user-agent\");\n\t\tString referer = request.getHeader(\"referer\");\n\t\tString[] paths = path.split(\"/\");\n\t\tString service = paths[1];\n\t\tString action = paths[2];\n\t\tString actionName = paths[3];\n\t\tString param = queryString;\n\t\tString[] paramArr = param.split(\"&\");\n\t\tString params = \"\";\n\t\tfor (String s : paramArr) {\n\t\t\tparams += s + \",\";\n\t\t}\n\t\tif (params.length() > 0) {\n\t\t\tparams = params.substring(0, params.length() - 1);\n\t\t}\n\t\tSystem.out.println(service + \"---\" + action + \"---\" + actionName + \"---\" + params);\n\t\tSystemConfigService systemConfigService = new SystemConfigService();\n\t\tList<SystemConfig> list = systemConfigService.findAll();\n\t\tif (list!= null && list.size() > 0) {\n\t\t\tresponseInfo.setData(list.get(0));\n\t\t} else {\n\t\t\tresponseInfo.setCode(500);\n\t\t\tresponseInfo.setData(\"Failed to retrieve system configuration information.\");\n\t\t}\n\t} catch (Exception e) {\n\t\tresponseInfo.setCode(500);\n\t\tresponseInfo.setData(\"Failed to retrieve system configuration information.\");\n\t\te.printStackTrace();\n\t}\n\treturn responseInfo;\n}", "CodeBleu_score": 33.94703787136263}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\tresponse.setCode(200);\n\ttry {\n\t\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\n\t\tUser user = (User) request.getSession().getAttribute(\"user\");\n\t\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u7528\u6237\u6743\u9650\n\t\tList<UserBusiness> userBusinessList = userBusinessService.getUserBusinessByUserId(user.getId());\n\t\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u4ed3\u5e93\u6743\u9650\n\t\tList<Depot> depotList = depotService.getDepotByUserId(user.getId());\n\t\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\n\t\tSystemConfig systemConfig = systemConfigService.getSystemConfigById(user.getSystemConfigId());\n\t\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\n\t\tJSONObject jsonObject = new JSONObject();\n\t\tjsonObject.put(\"userBusinessList\", userBusinessList);\n\t\tjsonObject.put(\"depotList\", depotList);\n\t\tjsonObject.put(\"systemConfig\", systemConfig);\n\t\tresponse.setData(jsonObject);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(\"\u83b7\u53d6\u5f53\u524d\u7528\u6237\u4fe1\u606f\u5931\u8d25\");\n\t}\n\treturn response;\n}", "CodeBleu_score": 33.80358463798214}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\tresponse.setCode(200);\n\ttry {\n\t\tString path = request.getServletPath();\n\t\tString[] paths = path.split(\"/\");\n\t\tString url = paths[1];\n\t\tString[] urls = url.split(\"\\\\.\");\n\t\tString key = urls[0];\n\t\tif(key.equals(\"user\")) {\n\t\t\tString token = request.getHeader(\"token\");\n\t\t\tString id = request.getHeader(\"id\");\n\t\t\tString username = request.getHeader(\"username\");\n\t\t\tString name = request.getHeader(\"name\");\n\t\t\tString phone = request.getHeader(\"phone\");\n\t\t\tString email = request.getHeader(\"email\");\n\t\t\tString sex = request.getHeader(\"sex\");\n\t\t\tString type = request.getHeader(\"type\");\n\t\t\tString depotId = request.getHeader(\"depotId\");\n\t\t\tString depotName = request.getHeader(\"depotName\");\n\t\t\tString depotType = request.getHeader(\"depotType\");\n\t\t\tString depotAddress = request.getHeader(\"depotAddress\");\n\t\t\tString depotPhone = request.getHeader(\"depotPhone\");\n\t\t\tString depotEmail = request.getHeader(\"depotEmail\");\n\t\t\tString depotPrincipal = request.getHeader(\"depotPrincipal\");\n\t\t\tString depotPrincipalPhone = request.getHeader(\"depotPrincipalPhone\");\n\t\t\tString depotPrincipalEmail = request.getHeader(\"depotPrincipalEmail\");\n\t\t\tString depotPrincipalSex = request.getHeader(\"depotPrincipalSex\");\n\t\t\tString depotPrincipalType = request.getHeader(\"depotPrincipalType\");\n\t\t\tString depotPrincipalId = request.getHeader(\"depotPrincipalId\");\n\t\t\tString depotPrincipalName = request.getHeader(\"depotPrincipalName\");\n\t\t\tString depotPrincipalRemark = request.getHeader(\"depotPrincipalRemark\");\n\t\t\tString depotPrincipalDepotId = request.getHeader(\"depotPrincipalDepotId\");\n\t\t\tString depotPrincipalDepotName = request.getHeader(\"depotPrincipalDepotName\");\n\t\t\tString depotPrincipalDepotType = request.getHeader(\"depotPrincipalDepotType\");\n\t\t\tString depotPrincipalDepotAddress = request.getHeader(\"depotPrincipalDepotAddress\");\n\t\t\tString depotPrincipalDepotPhone = request.getHeader(\"depotPrincipalDepotPhone\");\n\t\t\tString depotPrincipalDepot", "CodeBleu_score": 25.146309882344976}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\ttry {\n\t\t//\u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u7684\u8def\u5f84\n\t\tString businessPath = request.getParameter(\"businessPath\");\n\t\tif (businessPath == null || businessPath.isEmpty()) {\n\t\t\tresponseInfo.setCode(BaseResponseInfo.ERROR);\n\t\t\tresponseInfo.setMessage(\"businessPath\u4e0d\u80fd\u4e3a\u7a7a\");\n\t\t\treturn responseInfo;\n\t\t}\n\t\t//\u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u7684\u7c7b\u578b\n\t\tString type = request.getParameter(\"type\");\n\t\tif (type == null || type.isEmpty()) {\n\t\t\tresponseInfo.setCode(BaseResponseInfo.ERROR);\n\t\t\tresponseInfo.setMessage(\"type\u4e0d\u80fd\u4e3a\u7a7a\");\n\t\t\treturn responseInfo;\n\t\t}\n\t\t//\u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u7684\u6570\u91cf\n\t\tString count = request.getParameter(\"count\");\n\t\tif (count == null || count.isEmpty()) {\n\t\t\tresponseInfo.setCode(BaseResponseInfo.ERROR);\n\t\t\tresponseInfo.setMessage(\"count\u4e0d\u80fd\u4e3a\u7a7a\");\n\t\t\treturn responseInfo;\n\t\t}\n\t\t//\u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u7684\u540d\u79f0\n\t\tString name = request.getParameter(\"name\");\n\t\tif (name == null || name.isEmpty()) {\n\t\t\tresponseInfo.setCode(BaseResponseInfo.ERROR);\n\t\t\tresponseInfo.setMessage(\"name\u4e0d\u80fd\u4e3a\u7a7a\");\n\t\t\treturn responseInfo;\n\t\t}\n\t\t//\u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u7684\u540e\u7f00\u540d\n\t\tString suffix = request.getParameter(\"suffix\");\n\t\tif (suffix == null || suffix.isEmpty()) {\n\t\t\tresponseInfo.setCode(BaseResponseInfo.ERROR);\n\t\t\tresponseInfo.setMessage(\"suffix\u4e0d\u80fd\u4e3a\u7a7a\");\n\t\t\treturn responseInfo;\n\t\t}\n\t\t//\u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u7684\u5927\u5c0f\n\t\tString size = request.getParameter(\"size\");\n\t\tif (size == null || size.isEmpty()) {\n\t\t\tresponseInfo.setCode(BaseResponseInfo.ERROR);\n\t\t\tresponseInfo.setMessage(\"size\u4e0d\u80fd\u4e3a\u7a7a\");\n\t\t\treturn responseInfo;\n\t\t}\n\t\t//\u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u7684\u5bbd\u5ea6\n\t\tString width = request.getParameter(\"width\");\n\t\tif (width == null || width.isEmpty()) {\n\t\t\tresponseInfo.setCode(BaseResponseInfo.ERROR);\n\t\t\tresponseInfo.setMessage(\"width\u4e0d\u80fd\u4e3a\u7a7a\");\n\t\t\treturn responseInfo;\n\t\t}\n\t\t//\u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u7684\u9ad8\u5ea6\n\t\tString height = request.getParameter(\"height\");\n\t\tif (height == null || height.isEmpty()) {\n\t\t\tresponseInfo.setCode(BaseResponse", "CodeBleu_score": 23.74689659066437}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tBaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n\ttry {\n\t\tString path = request.getServletContext().getRealPath(\"/\");\n\t\tString businessPath = request.getParameter(\"businessPath\");\n\t\tif (StringUtil.isEmpty(businessPath)) {\n\t\t\tbusinessPath = \"file\";\n\t\t}\n\t\tString fileName = request.getParameter(\"fileName\");\n\t\tString fileType = request.getParameter(\"fileType\");\n\t\tif (StringUtil.isEmpty(fileName)) {\n\t\t\tfileName = \"file\";\n\t\t}\n\t\tif (StringUtil.isEmpty(fileType)) {\n\t\t\tfileType = \"file\";\n\t\t}\n\t\t// \u83b7\u53d6\u6587\u4ef6\n\t\tMultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n\t\tMultipartFile multipartFile = multipartRequest.getFile(\"file\");\n\t\tString fileName1 = multipartFile.getOriginalFilename();\n\t\tString fileType1 = fileName1.substring(fileName1.lastIndexOf(\".\") + 1);\n\t\tif (StringUtil.isEmpty(fileType1)) {\n\t\t\tfileType1 = \"file\";\n\t\t}\n\t\tString fileId = StringUtil.getUUID();\n\t\tString fileUrl = path + businessPath + \"/\" + fileName + \"/\" + fileId + \".\" + fileType1;\n\t\tFile file = new File(fileUrl);\n\t\tFileUtils.createFile(file);\n\t\t// \u4fdd\u5b58\u6587\u4ef6\n\t\tmultipartFile.transferTo(file);\n\t\t// \u4fdd\u5b58\u6587\u4ef6\u4fe1\u606f\n\t\tSystemConfig systemConfig = systemConfigService.getSystemConfig();\n\t\tif (systemConfig == null) {\n\t\t\tbaseResponseInfo.setCode(500);\n\t\t\tbaseResponseInfo.setMsg(\"\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\u4e0d\u5b58\u5728\");\n\t\t\treturn baseResponseInfo;\n\t\t}\n\t\tString fileUrl1 = \"\";\n\t\tif (systemConfig.getIsAliOss().equals(\"1\")) {\n\t\t\t// \u4e0a\u4f20\u6587\u4ef6\u5230\u963f\u91cc\u4e91OSS\n\t\t\tfileUrl1 = AliOssUtil.uploadFile(fileUrl, businessPath + \"/\" + fileName + \"/\" + fileId + \".\" + fileType1);\n\t\t} else {\n\t\t\tfileUrl1 = fileUrl;\n\t\t}\n\t\t// \u4fdd\u5b58\u6587\u4ef6\u4fe1\u606f\n\t\tFileEntity fileEntity = new FileEntity();\n\t\tfileEntity.setFileId(fileId);\n\t\tfileEntity.setFileName(fileName);\n\t\tfileEntity.setFileType(fileType);\n\t\tfileEntity.setFileUrl(fileUrl1);\n\t\t", "CodeBleu_score": 32.04384143454303}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tBaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n\ttry {\n\t\t// Get the business path from the request\n\t\tString path = request.getParameter(\"path\");\n\t\tif (path == null) {\n\t\t\tpath = (String) request.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE);\n\t\t}\n\t\t// Get the uploaded file from the request\n\t\tMultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n\t\tMultipartFile file = multipartRequest.getFile(\"file\");\n\t\tif (file == null) {\n\t\t\tbaseResponseInfo.setCode(BaseResponseInfo.ERROR_CODE);\n\t\t\tbaseResponseInfo.setMessage(\"\u4e0a\u4f20\u6587\u4ef6\u4e3a\u7a7a\");\n\t\t\treturn baseResponseInfo;\n\t\t}\n\t\t// Get the file name from the request\n\t\tString fileName = file.getOriginalFilename();\n\t\t// Get the file extension from the request\n\t\tString extension = fileName.substring(fileName.lastIndexOf(\".\") + 1);\n\t\t// Get the file size from the request\n\t\tlong fileSize = file.getSize();\n\t\t// Get the file type from the request\n\t\tString fileType = request.getParameter(\"fileType\");\n\t\t// Get the file description from the request\n\t\tString description = request.getParameter(\"description\");\n\t\t// Get the file path from the request\n\t\tString filePath = request.getParameter(\"filePath\");\n\t\t// Get the file path from the request\n\t\tString fileUrl = request.getParameter(\"fileUrl\");\n\t\t// Get the file path from the request\n\t\tString fileId = request.getParameter(\"fileId\");\n\t\t// Get the file path from the request\n\t\tString fileParentId = request.getParameter(\"fileParentId\");\n\t\t// Get the file path from the request\n\t\tString fileParentType = request.getParameter(\"fileParentType\");\n\t\t// Get the file path from the request\n\t\tString fileBusinessType = request.getParameter(\"fileBusinessType\");\n\t\t// Get the file path from the request\n\t\tString fileBusinessId = request.getParameter(\"fileBusinessId\");\n\t\t// Get the file path from the request\n\t\tString fileBusinessName = request.getParameter(\"fileBusinessName\");\n\t\t// Get the file path from the request\n\t\tString fileBusinessCode = request.getParameter(\"fileBusinessCode\");\n\t\t// Get the file path from the request\n\t\tString fileBusinessCode2 = request.getParameter(\"fileBusinessCode2\");", "CodeBleu_score": 32.79301607275372}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t }", "CodeBleu_score": 4.842893009750053}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t\tSystem.out.println(\"jsonObject:\"+jsonObject);\n\ttry {\n\t\tString title = jsonObject.getString(\"title\");\n\t\tJSONArray head = jsonObject.getJSONArray(\"head\");\n\t\tJSONArray tip = jsonObject.getJSONArray(\"tip\");\n\t\tJSONArray data = jsonObject.getJSONArray(\"data\");\n\t\tString fileName = jsonObject.getString(\"fileName\");\n\t\tif (StringUtil.isEmpty(fileName)) {\n\t\t\tfileName = \"exportExcel\";\n\t\t}\n\t\tString[] headArr = new String[head.size()];\n\t\tfor (int i = 0; i < head.size(); i++) {\n\t\t\theadArr[i] = head.getString(i);\n\t\t}\n\t\tString[] tipArr = new String[tip.size()];\n\t\tfor (int i = 0; i < tip.size(); i++) {\n\t\t\ttipArr[i] = tip.getString(i);\n\t\t}\n\t\tString[] dataArr = new String[data.size()];\n\t\tfor (int i = 0; i < data.size(); i++) {\n\t\t\tdataArr[i] = data.getString(i);\n\t\t}\n\t\texportExcel(title, headArr, tipArr, dataArr, fileName, response);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}", "CodeBleu_score": 50.58589565498083}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t\n}", "CodeBleu_score": 4.842893009750053}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tint result = 0;\n\ttry {\n\t\tString userId = (String) request.getSession().getAttribute(\"userId\");\n\t\tAccount account = new Account();\n\t\taccount.setAccountNo(obj.getString(\"accountNo\"));\n\t\taccount.setAccountName(obj.getString(\"accountName\"));\n\t\taccount.setAccountType(obj.getString(\"accountType\"));\n\t\taccount.setAccountClass(obj.getString(\"accountClass\"));\n\t\taccount.setAccountStatus(obj.getString(\"accountStatus\"));\n\t\taccount.setAccountLevel(obj.getString(\"accountLevel\"));\n\t\taccount.setAccountLevel1(obj.getString(\"accountLevel1\"));\n\t\taccount.setAccountLevel2(obj.getString(\"accountLevel2\"));\n\t\taccount.setAccountLevel3(obj.getString(\"accountLevel3\"));\n\t\taccount.setAccountLevel4(obj.getString(\"accountLevel4\"));\n\t\taccount.setAccountLevel5(obj.getString(\"accountLevel5\"));\n\t\taccount.setAccountLevel6(obj.getString(\"accountLevel6\"));\n\t\taccount.setAccountLevel7(obj.getString(\"accountLevel7\"));\n\t\taccount.setAccountLevel8(obj.getString(\"accountLevel8\"));\n\t\taccount.setAccountLevel9(obj.getString(\"accountLevel9\"));\n\t\taccount.setAccountLevel10(obj.getString(\"accountLevel10\"));\n\t\taccount.setAccountLevel11(obj.getString(\"accountLevel11\"));\n\t\taccount.setAccountLevel12(obj.getString(\"accountLevel12\"));\n\t\taccount.setAccountLevel13(obj.getString(\"accountLevel13\"));\n\t\taccount.setAccountLevel14(obj.getString(\"accountLevel14\"));\n\t\taccount.setAccountLevel15(obj.getString(\"accountLevel15\"));\n\t\taccount.setAccountLevel16(obj.getString(\"accountLevel16\"));\n\t\taccount.setAccountLevel17(obj.getString(\"accountLevel17\"));\n\t\taccount.setAccountLevel18(obj.getString(\"accountLevel18\"));\n\t\taccount.setAccountLevel19(obj.getString(\"accountLevel19\"));\n\t\taccount.setAccountLevel20(obj.getString(\"accountLevel20\"));\n\t\taccount.setAccountLevel21(obj.getString(\"accountLevel21\"));\n\t\taccount.setAccountLevel", "CodeBleu_score": 22.489016853286504}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tint result = 0;\n\tString accountName = obj.getString(\"name\");\n\tString accountType = obj.getString(\"type\");\n\tString accountNumber = obj.getString(\"number\");\n\tString accountDescription = obj.getString(\"description\");\n\tString accountDefault = obj.getString(\"default\");\n\tString accountEnabled = obj.getString(\"enabled\");\n\tString accountBalance = obj.getString(\"balance\");\n\tString accountCurrency = obj.getString(\"currency\");\n\tString accountParent = obj.getString(\"parent\");\n\tString accountLevel = obj.getString(\"level\");\n\tString accountClass = obj.getString(\"class\");\n\tString accountSubClass = obj.getString(\"subclass\");\n\tString accountSubClass2 = obj.getString(\"subclass2\");\n\tString accountSubClass3 = obj.getString(\"subclass3\");\n\tString accountSubClass4 = obj.getString(\"subclass4\");\n\tString accountSubClass5 = obj.getString(\"subclass5\");\n\tString accountSubClass6 = obj.getString(\"subclass6\");\n\tString accountSubClass7 = obj.getString(\"subclass7\");\n\tString accountSubClass8 = obj.getString(\"subclass8\");\n\tString accountSubClass9 = obj.getString(\"subclass9\");\n\tString accountSubClass10 = obj.getString(\"subclass10\");\n\tString accountSubClass11 = obj.getString(\"subclass11\");\n\tString accountSubClass12 = obj.getString(\"subclass12\");\n\tString accountSubClass13 = obj.getString(\"subclass13\");\n\tString accountSubClass14 = obj.getString(\"subclass14\");\n\tString accountSubClass15 = obj.getString(\"subclass15\");\n\tString accountSubClass16 = obj.getString(\"subclass16\");\n\tString accountSubClass17 = obj.getString(\"subclass17\");\n\tString accountSubClass18 = obj.getString(\"subclass18\");\n\tString accountSubClass19 = obj.getString(\"subclass19\");\n\tString accountSubClass20 = obj.getString(\"subclass20\");\n\tString accountSubClass21 = obj.getString(\"subclass21\");\n\tString accountSubClass22 = obj.getString(\"subclass22\");\n\tString accountSubClass23 = obj.getString(\"subclass23\");\n\t", "CodeBleu_score": 18.317647103568397}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tint result = 0;\n\ttry {\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u4eba\u4fe1\u606f\n\t\tUser user = (User) request.getSession().getAttribute(BusinessConstants.USER_SESSION);\n\t\tString ip = request.getRemoteAddr();\n\t\t//\u83b7\u53d6\u5f53\u524d\u65f6\u95f4\n\t\tDate date = new Date();\n\t\t//\u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u7684\u6beb\u79d2\u6570\n\t\tlong time = date.getTime();\n\t\t//\u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u7684\u6beb\u79d2\u6570\n\t\tString timeStr = String.valueOf(time);\n\t\t//\u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u7684\u6beb\u79d2\u6570\n\t\tString timeStr2 = String.valueOf(time + 1);\n\t\t//\u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u7684\u6beb\u79d2\u6570\n\t\tString timeStr3 = String.valueOf(time + 2);\n\t\t//\u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u7684\u6beb\u79d2\u6570\n\t\tString timeStr4 = String.valueOf(time + 3);\n\t\t//\u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u7684\u6beb\u79d2\u6570\n\t\tString timeStr5 = String.valueOf(time + 4);\n\t\t//\u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u7684\u6beb\u79d2\u6570\n\t\tString timeStr6 = String.valueOf(time + 5);\n\t\t//\u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u7684\u6beb\u79d2\u6570\n\t\tString timeStr7 = String.valueOf(time + 6);\n\t\t//\u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u7684\u6beb\u79d2\u6570\n\t\tString timeStr8 = String.valueOf(time + 7);\n\t\t//\u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u7684\u6beb\u79d2\u6570\n\t\tString timeStr9 = String.valueOf(time + 8);\n\t\t//\u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u7684\u6beb\u79d2\u6570\n\t\tString timeStr10 = String.valueOf(time + 9);\n\t\t//\u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u7684\u6beb\u79d2\u6570\n\t\tString timeStr11 = String.valueOf(time + 10);\n\t\t//\u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u7684\u6beb\u79d2\u6570\n\t\tString timeStr12 = String.valueOf(time + 11);\n\t\t//\u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u7684\u6beb\u79d2\u6570\n\t\tString timeStr13 = String.valueOf(time + 12);\n\t\t//\u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u7684\u6beb\u79d2\u6570\n\t\tString timeStr14 = String.valueOf(time + 13);\n\t\t//\u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u7684\u6beb\u79d2\u6570\n\t\tString timeStr15 = String.valueOf(time + 14);\n\t\t//\u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u7684\u6beb\u79d2\u6570\n\t\tString time", "CodeBleu_score": 28.308988724247097}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\tLong count = null;\n\ttry {\n\t\tcount = accountMapper.listWithBalanceCount(name, serialNo);\n\t} catch (Exception e) {\n\t\tlog.error(\"Error in listWithBalanceCount\", e);\n\t}\n\treturn count;\n}", "CodeBleu_score": 43.25761946286693}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\tLong count = 0L;\n\ttry {\n\t\tcount = accountMapper.listWithBalanceCount(name, serialNo);\n\t} catch (Exception e) {\n\t\tlog.error(\"listWithBalanceCount: \", e);\n\t}\n\treturn count;\n}", "CodeBleu_score": 40.07948433280746}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\tLong count = null;\n\ttry {\n\t\tcount = accountMapper.listWithBalanceCount(name, serialNo);\n\t} catch (Exception e) {\n\t\tlog.error(\"An error occurred while getting the count of accounts with the specified name and serial number.\", e);\n\t}\n\treturn count;\n}", "CodeBleu_score": 41.70541044008944}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result = 0;\n\ttry {\n\t\tresult = depotItemMapper.deleteDepotItem(id);\n\t} catch (Exception e) {\n\t\tlogService.log(request, LogService.LOG_LEVEL_ERROR, \"deleteDepotItem\", \"\u5220\u9664\u5e93\u5b58\u5931\u8d25\", e);\n\t\tthrow new BusinessRunTimeException(ExceptionConstants.EXCEPTIONCODE_BUSINESS_RUNTIME, \"\u5220\u9664\u5e93\u5b58\u5931\u8d25\");\n\t}\n\treturn result;\n}", "CodeBleu_score": 54.55321613021498}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result = 0;\n\ttry {\n\t\tresult = depotItemMapper.deleteDepotItem(id);\n\t} catch (Exception e) {\n\t\tlog.error(\"Error deleting depot item with ID: \" + id, e);\n\t\tthrow new BusinessRunTimeException(ExceptionConstants.ERROR_CODE_DELETE_DEPOT_ITEM, ExceptionConstants.ERROR_MESSAGE_DELETE_DEPOT_ITEM);\n\t}\n\treturn result;\n}", "CodeBleu_score": 51.035182710793016}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result = 0;\n\ttry {\n\t\tresult = depotItemMapper.deleteDepotItem(id);\n\t} catch (Exception e) {\n\t\tlog.error(e.getMessage());\n\t\tthrow new BusinessRunTimeException(ExceptionConstants.ERROR_CODE_DEPOT_ITEM_DELETE_FAILED, ExceptionConstants.ERROR_MESSAGE_DEPOT_ITEM_DELETE_FAILED);\n\t}\n\treturn result;\n}", "CodeBleu_score": 50.989869413327746}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\tCloseableHttpClient httpClient = null;\n\tCloseableHttpResponse response = null;\n\tString url = \"http://localhost:8080/graph/\" + projectName + \"/\" + nodeType + \"/\" + nodeKey;\n\ttry {\n\t\thttpClient = HttpClients.createDefault();\n\t\tHttpGet request = new HttpGet(url);\n\t\tresponse = httpClient.execute(request);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString responseBody = EntityUtils.toString(entity);\n\t\tif (StringUtils.hasText(responseBody)) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\tif (httpClient!= null) {\n\t\t\ttry {\n\t\t\t\thttpClient.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tif (response!= null) {\n\t\t\ttry {\n\t\t\t\tresponse.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 44.84085889806309}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\t// TODO: Add code to add a node to a specified project.\n\t// TODO: Add code to create an HTTP client and construct the request URL.\n\t// TODO: Add code to execute the request and process the response.\n\t// TODO: Add code to return true if the response contains a key; otherwise, return false.\n\t// TODO: Add code to catch any exceptions and print them.\n\t// TODO: Add code to close resources in the finally block.\n\tCloseableHttpClient httpClient = null;\n\tCloseableHttpResponse response = null;\n\ttry {\n\t\tString url = \"http://localhost:8080/graph/\" + projectName + \"/node/\" + nodeType + \"/\" + nodeKey;\n\t\tHttpGet request = new HttpGet(url);\n\t\trequest.setHeader(\"Accept\", \"application/json\");\n\t\thttpClient = HttpClients.createDefault();\n\t\tresponse = httpClient.execute(request);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString responseString = EntityUtils.toString(entity, Charset.forName(\"UTF-8\"));\n\t\tObjectMapper mapper = new ObjectMapper();\n\t\tMap<String, Object> responseMap = mapper.readValue(responseString, Map.class);\n\t\tif (responseMap.containsKey(\"key\")) {\n\t\t\treturn true;\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tif (response!= null) {\n\t\t\ttry {\n\t\t\t\tresponse.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tif (httpClient!= null) {\n\t\t\ttry {\n\t\t\t\thttpClient.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 49.94971360529444}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\tCloseableHttpClient httpClient = null;\n\tCloseableHttpResponse response = null;\n\ttry {\n\t\t// Create an HTTP client\n\t\thttpClient = HttpClients.createDefault();\n\n\t\t// Construct the request URL\n\t\tString url = \"http://localhost:8080/api/projects/\" + projectName + \"/nodes/\" + nodeType + \"/\" + nodeKey;\n\n\t\t// Create an HTTP GET request\n\t\tHttpGet request = new HttpGet(url);\n\n\t\t// Execute the request\n\t\tresponse = httpClient.execute(request);\n\n\t\t// Process the response\n\t\tHttpEntity entity = response.getEntity();\n\t\tString responseBody = EntityUtils.toString(entity, Charset.defaultCharset());\n\n\t\t// Check if the response contains a key\n\t\tif (responseBody.contains(\"key\")) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} catch (Exception e) {\n\t\t// Print any exceptions\n\t\tSystem.out.println(\"Error: \" + e.getMessage());\n\t\treturn false;\n\t} finally {\n\t\t// Close resources\n\t\tif (httpClient!= null) {\n\t\t\ttry {\n\t\t\t\thttpClient.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tif (response!= null) {\n\t\t\ttry {\n\t\t\t\tresponse.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 44.34329754509386}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\tCloseableHttpClient httpClient = null;\n\tCloseableHttpResponse response = null;\n\ttry {\n\t\t// Create an HTTP client\n\t\thttpClient = HttpClients.createDefault();\n\t\t// Create an HTTP GET request\n\t\tString url = \"http://localhost:8080/graph/edge/\" + projectName + \"/\" + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to;\n\t\tHttpGet request = new HttpGet(url);\n\t\t// Execute the request and get the response\n\t\tresponse = httpClient.execute(request);\n\t\t// Read the response body\n\t\tHttpEntity entity = response.getEntity();\n\t\tString responseBody = EntityUtils.toString(entity);\n\t\t// Parse the response body as JSON\n\t\tObjectMapper mapper = new ObjectMapper();\n\t\tMap<String, Object> responseMap = mapper.readValue(responseBody, Map.class);\n\t\t// Check if the response contains a \"key\"\n\t\treturn responseMap.containsKey(\"key\");\n\t} catch (Exception e) {\n\t\t// Handle exceptions\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\t// Ensure resources are closed after execution\n\t\tif (response!= null) {\n\t\t\ttry {\n\t\t\t\tresponse.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tif (httpClient!= null) {\n\t\t\ttry {\n\t\t\t\thttpClient.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 52.8473581747192}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\tCloseableHttpClient httpClient = null;\n\tCloseableHttpResponse response = null;\n\ttry {\n\t\t// Create an instance of CloseableHttpClient\n\t\thttpClient = HttpClients.createDefault();\n\t\t// Create an instance of HttpGet\n\t\tHttpGet request = new HttpGet(\"http://localhost:8080/api/addEdge\");\n\t\t// Add parameters to the request\n\t\trequest.addParameter(\"projectName\", projectName);\n\t\trequest.addParameter(\"edgeType\", edgeType);\n\t\trequest.addParameter(\"fromType\", fromType);\n\t\trequest.addParameter(\"toType\", toType);\n\t\trequest.addParameter(\"from\", from);\n\t\trequest.addParameter(\"to\", to);\n\t\t// Execute the request\n\t\tresponse = httpClient.execute(request);\n\t\t// Check the response status code\n\t\tint statusCode = response.getStatusLine().getStatusCode();\n\t\tif (statusCode == 200) {\n\t\t\t// Read the response body as a String\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tString responseBody = EntityUtils.toString(entity, Charset.forName(\"UTF-8\"));\n\t\t\t// Parse the response body as a JSON object\n\t\t\tObjectMapper mapper = new ObjectMapper();\n\t\t\tMap<String, Object> json = mapper.readValue(responseBody, Map.class);\n\t\t\t// Check if the response contains a \"key\" property\n\t\t\tif (json.containsKey(\"key\")) {\n\t\t\t\t// The request was successful\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\t// The request failed\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\t// The request failed\n\t\t\treturn false;\n\t\t}\n\t} catch (Exception e) {\n\t\t// An exception occurred\n\t\treturn false;\n\t} finally {\n\t\t// Close the response and client\n\t\ttry {\n\t\t\tif (response!= null) {\n\t\t\t\tresponse.close();\n\t\t\t}\n\t\t\tif (httpClient!= null) {\n\t\t\t\thttpClient.close();\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\t// An exception occurred\n\t\t\treturn false;\n\t\t}\n\t}\n}", "CodeBleu_score": 46.47841568038616}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\tCloseableHttpClient client = HttpClients.createDefault();\n\tboolean success = false;\n\ttry {\n\t\tString url = \"http://localhost:8080/graph/edge\";\n\t\tString json = \"{\\\"project\\\":\\\"\" + projectName + \"\\\",\\\"edgeType\\\":\\\"\" + edgeType + \"\\\",\\\"fromType\\\":\\\"\" + fromType + \"\\\",\\\"toType\\\":\\\"\" + toType + \"\\\",\\\"from\\\":\\\"\" + from + \"\\\",\\\"to\\\":\\\"\" + to + \"\\\"}\";\n\t\tHttpPost post = new HttpPost(url);\n\t\tpost.addHeader(\"Content-Type\", \"application/json\");\n\t\tpost.setEntity(new StringEntity(json, Charset.forName(\"UTF-8\")));\n\t\tCloseableHttpResponse response = client.execute(post);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString result = EntityUtils.toString(entity);\n\t\tif (result.contains(\"key\")) {\n\t\t\tsuccess = true;\n\t\t}\n\t\tresponse.close();\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\ttry {\n\t\t\tclient.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\treturn success;\n}", "CodeBleu_score": 39.168719267093216}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\t\tif (event == null || event.getMessage() == null) {\n\t\treturn;\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(new Location(\"test\", \"test\"));\n\t}\n\tevent.setTime(new Date());\n\tString json = null;\n\ttry {\n\t\tjson = new ObjectMapper().writeValueAsString(event);\n\t} catch (JsonProcessingException e) {\n\t\te.printStackTrace();\n\t}\n\tString topic = event.getLocation().getTopic();\n\tif (topic == null || topic.equals(\"\")) {\n\t\ttopic = \"test\";\n\t}\n\tProducerRecord<String, String> record = new ProducerRecord<>(topic, json);\n\tproducer.send(record);\n\tproducer.flush();\n}", "CodeBleu_score": 50.35261594206989}, {"code": "public void sendEvent(Event event){\n\t\tif (event == null) {\n\t\tSystem.out.println(\"Event is null.\");\n\t\treturn;\n\t}\n\tif (event.getMessage() == null) {\n\t\tSystem.out.println(\"Event message is null.\");\n\t\treturn;\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(new Location(0.0, 0.0));\n\t}\n\tevent.setTime(new Date());\n\tObjectMapper mapper = new ObjectMapper();\n\tString jsonString = null;\n\ttry {\n\t\tjsonString = mapper.writeValueAsString(event);\n\t} catch (JsonProcessingException e) {\n\t\te.printStackTrace();\n\t}\n\tString topic = \"test\";\n\tif (event.getTarget()!= null) {\n\t\ttopic = event.getTarget();\n\t}\n\tProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, jsonString);\n\tproducer.send(record);\n\tproducer.flush();\n}", "CodeBleu_score": 57.92544981195491}, {"code": "public void sendEvent(Event event){\n\t\tif (event!= null && event.getMessage()!= null) {\n\t\tif (event.getLocation() == null) {\n\t\t\tevent.setLocation(new Location(\"test\", \"test\", \"test\", \"test\"));\n\t\t}\n\t\tevent.setTime(new Date());\n\t\tString jsonEvent = \"\";\n\t\ttry {\n\t\t\tjsonEvent = new ObjectMapper().writeValueAsString(event);\n\t\t} catch (JsonProcessingException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tif (target!= null) {\n\t\t\tproducer.send(new ProducerRecord<String, String>(target, jsonEvent));\n\t\t} else {\n\t\t\tproducer.send(new ProducerRecord<String, String>(\"test\", jsonEvent));\n\t\t}\n\t\tproducer.flush();\n\t}\n}", "CodeBleu_score": 35.70787395487316}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t\tString accessKeyId = System.getenv(\"ACCESS_KEY_ID\");\n\tString accessKeySecret = System.getenv(\"ACCESS_KEY_SECRET\");\n\tString endpoint = System.getenv(\"ENDPOINT\");\n\tString bucketName = System.getenv(\"BUCKET_NAME\");\n\tString roleArn = System.getenv(\"ROLE_ARN\");\n\tString roleSessionName = System.getenv(\"ROLE_SESSION_NAME\");\n\tString policy = System.getenv(\"POLICY\");\n\n\tString url = \"\";\n\ttry {\n\t\t// Create a client using the access key ID and access key secret.\n\t\t// The OSS client is thread safe and can be shared by multiple threads.\n\t\tOSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\n\t\t// Generate a presigned URL for the object.\n\t\t// The URL is valid for 30 minutes.\n\t\turl = ossClient.generatePresignedUrl(bucketName, objName, 30 * 60).toString();\n\n\t\t// Upload the file to the object.\n\t\tossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\n\t\t// Shut down the client.\n\t\tossClient.shutdown();\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\treturn url;\n}", "CodeBleu_score": 40.404126628070934}, {"code": "public String upload(String objName, byte[] content){\n\t\t// \u521d\u59cb\u5316OSSClient\n\tOSSClient ossClient = new OSSClient(ossEndpoint, ossAccessKeyId, ossAccessKeySecret);\n\t// \u4e0a\u4f20\u6587\u4ef6\n\tossClient.putObject(ossBucketName, objName, new ByteArrayInputStream(content));\n\t// \u5173\u95edOSSClient\n\tossClient.shutdown();\n\t// \u8fd4\u56deURL\n\treturn ossEndpoint + \"/\" + ossBucketName + \"/\" + objName;\n}", "CodeBleu_score": 31.116165038098227}, {"code": "public String upload(String objName, byte[] content){\n\t\tString endpoint = \"oss-cn-beijing.aliyuncs.com\";\n\tString accessKeyId = \"\";\n\tString accessKeySecret = \"\";\n\tString bucketName = \"test-oss-bucket\";\n\tString roleArn = \"acs:ram::1755725360634408:role/aliyunramdefaultrole\";\n\tString roleSessionName = \"test-session-name\";\n\tString policy = \"{\\\"Statement\\\":[{\\\"Action\\\":\\\"sts:AssumeRole\\\",\\\"Effect\\\":\\\"Allow\\\",\\\"Principal\\\":{\\\"RAM\\\":\\\"acs:ram::1755725360634408:root\\\"},\\\"Sid\\\":\\\"\\\",\\\"Condition\\\":{\\\"StringEquals\\\":{\\\"sts:ExternalId\\\":\\\"test-external-id\\\"}}}],\\\"Version\\\":\\\"1\\\"}\";\n\tString externalId = \"test-external-id\";\n\n\t// 1. Create a client for the OSS service\n\tOSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\n\t// 2. Get the temporary security credentials\n\tAssumeRoleRequest request = new AssumeRoleRequest();\n\trequest.setVersion(\"2015-04-01\");\n\trequest.setMethod(MethodType.POST);\n\trequest.setProtocol(ProtocolType.HTTPS);\n\trequest.setRoleArn(roleArn);\n\trequest.setRoleSessionName(roleSessionName);\n\trequest.setPolicy(policy);\n\trequest.setDurationSeconds(3600);\n\trequest.setExternalId(externalId);\n\n\tIClientProfile profile = DefaultProfile.getProfile(\"cn-beijing\", accessKeyId, accessKeySecret);\n\tDefaultAcsClient client = new DefaultAcsClient(profile);\n\tAssumeRoleResponse response = null;\n\ttry {\n\t\tresponse = client.getAcsResponse(request);\n\t} catch (ClientException e) {\n\t\te.printStackTrace();\n\t}\n\tString accessKeyIdSts = response.getCredentials().getAccessKeyId();\n\tString accessKeySecretSts = response.getCredentials().getAccessKeySecret();\n\tString securityToken = response.getCredentials().getSecurityToken();\n\n\t// 3. Upload the file\n\tossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\n\t", "CodeBleu_score": 32.15152068545183}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\tif (ipToLocationWorker == null) {\n\t\tsynchronized (LocationInfo.class) {\n\t\t\tif (ipToLocationWorker == null) {\n\t\t\t\tipToLocationWorker = new IpToLocationWorker();\n\t\t\t}\n\t\t}\n\t}\n\treturn ipToLocationWorker.getLocation(ipAddress);\n}", "CodeBleu_score": 20.53439706238047}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\tif (ipAddress == null) {\n\t\treturn new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\",", "CodeBleu_score": 8.164328747328186}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\t// Get the IpToLocationWorker instance.\n\tIpToLocationWorker worker = IpToLocationWorker.getInstance();\n\n\t// If the worker is unavailable, return an unknown location.\n\tif (!worker.isAvailable()) {\n\t\treturn new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\");\n\t}\n\n\t// Get the location information for the IP address.\n\tLocationInfo info = worker.getLocationInfo(ipAddress);\n\n\t// Return the location information.\n\treturn info;\n}", "CodeBleu_score": 27.126624009549673}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (esClient == null) {\n\t\tsynchronized (ESClient.class) {\n\t\t\tif (esClient == null) {\n\t\t\t\tif (esHosts == null || esHosts.isEmpty()) {\n\t\t\t\t\tthrow new Exception(\"No Elasticsearch hosts specified\");\n\t\t\t\t}\n\t\t\t\tif (esPorts == null || esPorts.isEmpty()) {\n\t\t\t\t\tthrow new Exception(\"No Elasticsearch ports specified\");\n\t\t\t\t}\n\t\t\t\tif (esHosts.size()!= esPorts.size()) {\n\t\t\t\t\tthrow new Exception(\"Elasticsearch hosts and ports must be of the same length\");\n\t\t\t\t}\n\t\t\t\tList<HttpHost> hosts = new ArrayList<>();\n\t\t\t\tfor (int i = 0; i < esHosts.size(); i++) {\n\t\t\t\t\thosts.add(new HttpHost(esHosts.get(i), esPorts.get(i)));\n\t\t\t\t}\n\t\t\t\tesClient = new RestClient.Builder(hosts.toArray(new HttpHost[hosts.size()])).build();\n\t\t\t\tesHighLevelClient = new RestHighLevelClient(esClient);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 37.12715056290732}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (esClient!= null && esHighLevelClient!= null) {\n\t\treturn;\n\t}\n\n\tsynchronized (this) {\n\t\tif (esClient!= null && esHighLevelClient!= null) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (esHost == null || esPort == null) {\n\t\t\tthrow new Exception(\"Elasticsearch host and port must be specified.\");\n\t\t}\n\n\t\tList<HttpHost> hosts = new ArrayList<>();\n\t\tString[] hostPortArray = esHost.split(\",\");\n\t\tfor (String hostPort : hostPortArray) {\n\t\t\tString[] hostPortPair = hostPort.split(\":\");\n\t\t\tif (hostPortPair.length!= 2) {\n\t\t\t\tthrow new Exception(\"Invalid Elasticsearch host and port pair: \" + hostPort);\n\t\t\t}\n\t\t\thosts.add(new HttpHost(hostPortPair[0], Integer.parseInt(hostPortPair[1])));\n\t\t}\n\n\t\tesClient = RestClient.builder(hosts.toArray(new HttpHost[hosts.size()])).build();\n\t\tesHighLevelClient = new RestHighLevelClient(RestClient.builder(hosts.toArray(new HttpHost[hosts.size()])));\n\t}\n}", "CodeBleu_score": 43.20469028305201}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tsynchronized (ES_CLIENT_INITIALIZATION_LOCK) {\n\t\tif (esClientLowLevel == null) {\n\t\t\tList<HttpHost> hosts = new ArrayList<>();\n\t\t\tString[] hostsPorts = getClusterHostsPorts();\n\t\t\tfor (String hostPort : hostsPorts) {\n\t\t\t\tString[] hostPortSplit = hostPort.split(\":\");\n\t\t\t\thosts.add(new HttpHost(hostPortSplit[0], Integer.parseInt(hostPortSplit[1]), \"http\"));\n\t\t\t}\n\t\t\tesClientLowLevel = new RestClient.Builder(hosts.toArray(new HttpHost[hosts.size()])).build();\n\t\t\tesClientHighLevel = new RestHighLevelClient(esClientLowLevel);\n\t\t}\n\t}\n}", "CodeBleu_score": 35.37202430902812}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tString[] hostList = clusterHostList.split(\",\");\n\tfor (String host : hostList) {\n\t\tString[] hostAndPort = host.split(\":\");\n\t\tString hostName = hostAndPort[0];\n\t\tint port = clusterPort;\n\t\tif (hostAndPort.length > 1) {\n\t\t\tport = Integer.parseInt(hostAndPort[1]);\n\t\t}\n\t\thosts.add(new HttpHost(hostName, port));\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 44.1457756106854}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tString[] hosts = clusterHostList.split(\",\");\n\tList<HttpHost> hostList = new ArrayList<>();\n\tfor (String host : hosts) {\n\t\tString[] hostParts = host.split(\":\");\n\t\tif (hostParts.length == 2) {\n\t\t\thostList.add(new HttpHost(hostParts[0], Integer.parseInt(hostParts[1]), \"http\"));\n\t\t} else {\n\t\t\thostList.add(new HttpHost(hostParts[0], clusterPort, \"http\"));\n\t\t}\n\t}\n\treturn hostList;\n}", "CodeBleu_score": 46.98376411662846}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tString[] hosts = clusterHostList.split(\",\");\n\tList<HttpHost> hostList = new ArrayList<HttpHost>();\n\tfor (String host : hosts) {\n\t\tif (host.contains(\":\")) {\n\t\t\tString[] hostParts = host.split(\":\");\n\t\t\tString hostName = hostParts[0];\n\t\t\tint port = Integer.parseInt(hostParts[1]);\n\t\t\thostList.add(new HttpHost(hostName, port));\n\t\t} else {\n\t\t\thostList.add(new HttpHost(host, clusterPort));\n\t\t}\n\t}\n\treturn hostList;\n}", "CodeBleu_score": 52.00912252098061}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\t\t// Create a queue to store tasks\n\tLinkedBlockingQueue<Task> queue = new LinkedBlockingQueue<Task>();\n\t// Create a flag to indicate whether the polling loop should continue\n\tAtomicBoolean running = new AtomicBoolean(true);\n\t// Create a thread to poll for tasks\n\tThread pollingThread = new Thread(() -> {\n\t\twhile (running.get()) {\n\t\t\ttry {\n\t\t\t\t// Poll for a task with a 30-second timeout\n\t\t\t\tTask task = queue.poll(30, TimeUnit.SECONDS);\n\t\t\t\tif (task!= null) {\n\t\t\t\t\t// Check the task type\n\t\t\t\t\tif (task.getType() == TaskType.PLAIN_TEXT_MESSAGE) {\n\t\t\t\t\t\t// Process a plain text message task\n\t\t\t\t\t\tprocessPlainTextMessageTask(task);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Log an error message if the task type is not supported\n\t\t\t\t\t\tlogger.error(\"Task type not supported: \" + task.getType());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\t// Handle the InterruptedException\n\t\t\t\tlogger.error(\"Polling interrupted: \" + e.getMessage());\n\t\t\t\t// Set the running flag to false to stop the polling loop\n\t\t\t\trunning.set(false);\n\t\t\t}\n\t\t}\n\t});\n\t// Start the polling thread\n\tpollingThread.start();\n\t// Run the polling loop\n\twhile (running.get()) {\n\t\t// Retrieve a task from the queue\n\t\tTask task = queue.take();\n\t\t// Process the task\n\t\tif (task.getType() == TaskType.PLAIN_TEXT_MESSAGE) {\n\t\t\t// Process a plain text message task\n\t\t\tprocessPlainTextMessageTask(task);\n\t\t} else {\n\t\t\t// Log an error message if the task type is not supported\n\t\t\tlogger.error(\"Task type not supported: \" + task.getType());\n\t\t}\n\t}\n\t// Stop the polling thread\n\tpollingThread.interrupt();\n\t// Wait for the polling thread to stop\n\tpollingThread.join();\n}", "CodeBleu_score": 25.823088899268765}, {"code": "protected void pollingWork() throws InterruptedException{\n\t\twhile (true) {\n\t\t// Poll for a task with a 30-second timeout\n\t\tTask task = taskQueue.poll(30, TimeUnit.SECONDS);\n\t\tif (task == null) {\n\t\t\t// No task was retrieved, so sleep for 10 seconds and try again\n\t\t\tThread.sleep(10000);\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Check the task type\n\t\tswitch (task.getType()) {\n\t\t\tcase \"plain_text\":\n\t\t\t\t// Process a plain text message task\n\t\t\t\tprocessPlainTextMessageTask(task);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t// Unknown task type, log an error message\n\t\t\t\tSystem.out.println(\"Unknown task type: \" + task.getType());\n\t\t\t\tbreak;\n\t\t}\n\t}\n}", "CodeBleu_score": 16.710081001345003}, {"code": "protected void pollingWork() throws InterruptedException{\n\t\t// Create a queue for tasks\n\tLinkedBlockingQueue<Task> tasks = new LinkedBlockingQueue<>();\n\n\t// Create a flag for the polling loop\n\tAtomicBoolean pollingLoop = new AtomicBoolean(true);\n\n\t// Create a thread for the polling loop\n\tThread pollingThread = new Thread(() -> {\n\t\twhile (pollingLoop.get()) {\n\t\t\t// Poll for tasks with a 30-second timeout\n\t\t\tTask task = tasks.poll(30, TimeUnit.SECONDS);\n\t\t\tif (task!= null) {\n\t\t\t\t// Check the task type\n\t\t\t\tif (task.getType().equals(\"plainText\")) {\n\t\t\t\t\t// Extract the recipient number and message data\n\t\t\t\t\tString recipientNumber = task.getData().get(\"recipientNumber\");\n\t\t\t\t\tString messageData = task.getData().get(\"messageData\");\n\n\t\t\t\t\t// Validate the message data\n\t\t\t\t\tif (validateMessageData(messageData)) {\n\t\t\t\t\t\t// Send the message\n\t\t\t\t\t\tsendPlainTextMessage(recipientNumber, messageData);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Log an error message\n\t\t\t\t\t\tlogger.error(\"Invalid message data: \" + messageData);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// Start the polling thread\n\tpollingThread.start();\n\n\t// Create a thread for polling for tasks\n\tThread pollThread = new Thread(() -> {\n\t\twhile (pollingLoop.get()) {\n\t\t\t// Poll for tasks with a 30-second timeout\n\t\t\tTask task = tasks.poll(30, TimeUnit.SECONDS);\n\t\t\tif (task!= null) {\n\t\t\t\t// Check the task type\n\t\t\t\tif (task.getType().equals(\"plainText\")) {\n\t\t\t\t\t// Extract the recipient number and message data\n\t\t\t\t\tString recipientNumber = task.getData().get(\"recipientNumber\");\n\t\t\t\t\tString messageData = task.getData().get(\"messageData\");\n\n\t\t\t\t\t// Validate the message data\n\t\t\t\t\tif (validateMessageData(messageData)) {\n\t\t\t\t\t\t// Send the message\n\t\t\t\t\t\tsendPlainTextMessage(recipientNumber, messageData);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Log an error message\n\t\t\t\t\t\tlogger.error(\"Invalid message data: \" + messageData);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\t// Start the poll thread\n\tpollThread.start();\n\n\t// Create a thread for polling for tasks\n\tThread pollThread2 = new Thread", "CodeBleu_score": 27.888676815244157}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tCloseableHttpClient httpclient = HttpClients.createDefault();\n\tHttpGet httpget = new HttpGet(uri);\n\tCloseableHttpResponse response = httpclient.execute(httpget);\n\tHttpEntity entity = response.getEntity();\n\tString responseContent = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n\tEntityUtils.consume(entity);\n\thttpclient.close();\n\treturn responseContent;\n}", "CodeBleu_score": 62.25002893796317}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tCloseableHttpClient httpclient = HttpClients.createDefault();\n\tHttpGet httpget = new HttpGet(uri);\n\tCloseableHttpResponse response = httpclient.execute(httpget);\n\ttry {\n\t\tHttpEntity entity = response.getEntity();\n\t\tif (entity!= null) {\n\t\t\tString responseContent = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n\t\t\tSystem.out.println(responseContent);\n\t\t\treturn responseContent;\n\t\t}\n\t} finally {\n\t\tresponse.close();\n\t}\n\treturn null;\n}", "CodeBleu_score": 59.305941431339704}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\tHttpGet httpGet = new HttpGet(uri);\n\tCloseableHttpResponse response = httpClient.execute(httpGet);\n\tHttpEntity entity = response.getEntity();\n\tString responseContent = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n\tEntityUtils.consume(entity);\n\tresponse.close();\n\treturn responseContent;\n}", "CodeBleu_score": 60.25694335895724}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tMap<String, Object> map = null;\n\ttry {\n\t\tDocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n\t\tDocumentBuilder dBuilder = dbFactory.newDocumentBuilder();\n\t\tDocument doc = dBuilder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n\t\tdoc.getDocumentElement().normalize();\n\t\tmap = decodeToMap(doc.getDocumentElement(), doTrim);\n\t} catch (Exception e) {\n\t\tthrow e;\n\t}\n\treturn map;\n}", "CodeBleu_score": 45.37066881683715}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tMap<String, Object> map = new HashMap<>();\n\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument doc = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n\tdecodeToMap(doc.getDocumentElement(), map, doTrim);\n\treturn map;\n}", "CodeBleu_score": 46.361387668979944}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\t// Create a DocumentBuilder to parse the XML string\n\tDocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder dBuilder = dbFactory.newDocumentBuilder();\n\n\t// Parse the XML string into a Document object\n\tDocument doc = dBuilder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n\tdoc.getDocumentElement().normalize();\n\n\t// Process the document's child nodes to extract key-value pairs\n\tMap<String, Object> map = new HashMap<>();\n\tNodeList nodes = doc.getChildNodes();\n\tfor (int i = 0; i < nodes.getLength(); i++) {\n\t\tNode node = nodes.item(i);\n\t\tif (node.getNodeType() == Node.ELEMENT_NODE) {\n\t\t\tString key = node.getNodeName();\n\t\t\tString value = node.getTextContent();\n\t\t\tif (doTrim) {\n\t\t\t\tvalue = value.trim();\n\t\t\t}\n\t\t\tmap.put(key, value);\n\t\t}\n\t}\n\n\treturn map;\n}", "CodeBleu_score": 49.27433772274844}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tfinal OrderId orderId = OrderId.of(orderRecord.get_ID());\n\tfinal String transactionName = \"GenerateShipmentSchedules\";\n\tfinal String action = \"enqueueGenerateSchedulesAfterCommit\";\n\tfinal Logger logger = LogManager.getLogger(CreateMissingShipmentSchedulesWorkpackageProcessor.class);\n\tfinal boolean isAutoProcessEnabled = Services.getSysConfigBL().isAutoProcessEnabled(transactionName);\n\tif (isAutoProcessEnabled) {\n\t\tlogger.info(\"Enqueuing order {} for auto-processing using transaction name {}\", orderId, transactionName);\n\t\tServices.getTrxManager().enqueue(orderId, transactionName, null, null, null, null);\n\t} else {\n\t\tlogger.info(\"Auto-processing of order {} is disabled for transaction name {}\", orderId, transactionName);\n\t\tif (orderRecord.get_Value(\"PostponeGenerateShipmentSchedules\") == null || orderRecord.get_Value(\"PostponeGenerateShipmentSchedules\").equals(false)) {\n\t\t\tlogger.info(\"Enqueuing order {} for creation of missing shipment schedules\", orderId);\n\t\t\tServices.getTrxManager().enqueue(orderId, \"CreateMissingShipmentSchedules\", null, null, null, null);\n\t\t} else {\n\t\t\tlogger.info(\"Skipping creation of missing shipment schedules for order {}\", orderId);\n\t\t}\n\t}\n}", "CodeBleu_score": 40.26032534178036}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tif (orderRecord.isSOTrx()) {\n\t\tfinal String trxName = orderRecord.getTrxName();\n\t\tfinal String trxNameWithoutSuffix = trxName.substring(0, trxName.length() - 1);\n\t\tfinal String transactionName = \"GenerateShipmentSchedulesAfterCommit_\" + trxNameWithoutSuffix;\n\t\tif (!Services.getTrxManager().isTransactionActive(transactionName)) {\n\t\t\tfinal Logger logger = LogManager.getLogger(transactionName);\n\t\t\tlogger.info(\"Enqueuing order for automatic shipping and invoicing: {}\", Loggables.loggable(orderRecord));\n\t\t\tfinal OrderId orderId = OrderId.from(orderRecord);\n\t\t\tfinal AsyncBatchId batchId = Services.getAsyncBatchManager().enqueue(transactionName, new CompleteShipAndInvoiceEnqueuer(orderId));\n\t\t\tServices.getAsyncBatchManager().addObserver(batchId, new AsyncBatchObserver() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onSuccess(final AsyncBatchId batchId) {\n\t\t\t\t\tlogger.info(\"Completed order for automatic shipping and invoicing: {}\", Loggables.loggable(orderRecord));\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onFailure(final AsyncBatchId batchId) {\n\t\t\t\t\tlogger.error(\"Failed to complete order for automatic shipping and invoicing: {}\", Loggables.loggable(orderRecord));\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tfinal Logger logger = LogManager.getLogger(transactionName);\n\t\t\tlogger.info(\"Skipping enqueueing order for automatic shipping and invoicing because a transaction with the name {} is already active: {}\", transactionName, Loggables.loggable(orderRecord));\n\t\t}\n\t} else {\n\t\tfinal Logger logger = LogManager.getLogger(CreateMissingShipmentSchedulesWorkpackageProcessor.class);\n\t\tlogger.info(\"Skipping enqueueing order for automatic shipping and invoicing because it is not a sales order: {}\", Loggables.loggable(orderRecord));\n\t}\n}", "CodeBleu_score": 38.327272224277884}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tfinal OrderId orderId = OrderId.of(orderRecord.getAD_Org_ID(), orderRecord.getC_Order_ID());\n\tfinal boolean isAutoProcessingEnabled = isAutoProcessingEnabled(orderId);\n\tfinal boolean isAutoProcessingEligible = isAutoProcessingEligible(orderRecord);\n\tif (isAutoProcessingEnabled && isAutoProcessingEligible) {\n\t\tfinal String transactionName = getTransactionName();\n\t\tfinal String transactionDescription = getTransactionDescription();\n\t\tfinal String transactionDescriptionArgs = getTransactionDescriptionArgs();\n\t\tfinal String transactionDescriptionArgsArgs = getTransactionDescriptionArgsArgs();\n\t\tfinal String transactionDescriptionArgsArgsArgs = getTransactionDescriptionArgsArgsArgs();\n\t\tfinal String transactionDescriptionArgsArgsArgsArgs = getTransactionDescriptionArgsArgsArgsArgs();\n\t\tfinal String transactionDescriptionArgsArgsArgsArgsArgs = getTransactionDescriptionArgsArgsArgsArgsArgs();\n\t\tfinal String transactionDescriptionArgsArgsArgsArgsArgsArgs = getTransactionDescriptionArgsArgsArgsArgsArgsArgs();\n\t\tfinal String transactionDescriptionArgsArgsArgsArgsArgsArgsArgs = getTransactionDescriptionArgsArgsArgsArgsArgsArgsArgs();\n\t\tfinal String transactionDescriptionArgsArgsArgsArgsArgsArgsArgsArgs = getTransactionDescriptionArgsArgsArgsArgsArgsArgsArgsArgs();\n\t\tfinal String transactionDescriptionArgsArgsArgsArgsArgsArgsArgsArgsArgs = getTransactionDescriptionArgsArgsArgsArgsArgsArgsArgsArgsArgs();\n\t\tfinal String transactionDescriptionArgsArgsArgsArgsArgsArgsArgsArgsArgsArgs = getTransactionDescriptionArgsArgsArgsArgsArgsArgsArgsArgsArgsArgs();\n\t\tfinal String transactionDescriptionArgsArgsArgsArgsArgsArgsArgsArgsArgsArgsArgs = getTransactionDescriptionArgsArgsArgsArgsArgsArgsArgsArgsArgsArgsArgs();\n\t\tfinal String transactionDescriptionArgsArgsArgsArgsArgsArgsArgsArgsArgsArgsArgsArgs = getTransactionDescriptionArgsArgsArgsArgsArgsArgsArgsArgsArgsArgsArgsArgs();\n\t\tfinal String transactionDescriptionArgsArgsArgsArgsArgsArgsArgsArgsArgsArgsArgsArgsArgs = getTransactionDescriptionArgsArgsArgsArgsArgsArgsArgsArgsArgsArgsArgsArgsArgs();\n\t\tfinal String transactionDescriptionArgsArgsArgsArgsArgsArgsArgsArgsArgsArgsArgsArgsArgsArgs = getTransactionDescriptionArgsArgsArgsArgsArgsArgsArgsArgsArgsArgsArgsArgsArgsArgs();\n\t\tfinal String transactionDescriptionArgsArgsArgsArgsArgsArgsArgsArgsArgsArgsArgsArgsArgsArgsArgs = getTransactionDescriptionArgsArgsArgsArgsArgsArgsArgsArgsArgsArgsArgsArgsArgsArgsArgs();\n\t\tfinal String", "CodeBleu_score": 31.2485977853508}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$request->validate([\n\t\t'email' =>'required|email:rfc,dns',\n\t\t'password' => '',\n\t]);\n\n\t$user = User::where('email', $request->email)->first();\n\n\tif (!$user ||!Hash::check($request->password, $user->password)) {\n\t\tevent(new Failed($request));\n\n\t\tthrow ValidationException::withMessages([\n\t\t\t'email' => ['The provided credentials are incorrect.'],\n\t\t]);\n\t}\n\n\treturn $user;\n}", "CodeBleu_score": 45.012128344878974}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$user = $this->user();\n\n\tif ($user) {\n\t\treturn $user;\n\t}\n\n\t$user = User::where('email', $request->email)->first();\n\n\tif (! $user ||! app(Hasher::class)->check($request->password, $user->password)) {\n\t\t$this->fireFailedEvent($request);\n\n\t\tthrow ValidationException::withMessages([\n\t\t\t$this->username() => [trans('auth.failed')],\n\t\t]);\n\t}\n\n\treturn $user;\n}", "CodeBleu_score": 45.65518671954415}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$user = User::where('email', $request->email)->first();\n\n\tif (!$user ||!Hash::check($request->password, $user->password)) {\n\t\t$this->fireFailedLoginEvent($request);\n\n\t\tthrow ValidationException::withMessages([\n\t\t\t'email' => [trans('auth.failed')],\n\t\t]);\n\t}\n\n\treturn $user;\n}", "CodeBleu_score": 42.064403202215814}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t\t// Increment the request limit for rate limiting.\n\t$this->limiter->increment($request);\n\n\t// Throw a ValidationException with an error message indicating the authentication failure.\n\tthrow ValidationException::withMessages([\n\t\t'email' => ['The provided credentials are incorrect.'],\n\t]);\n}", "CodeBleu_score": 65.97817171119095}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t\t$this->limiter()->hit($request);\n\tthrow ValidationException::withMessages([\n\t\t$this->username() => [trans('auth.failed')],\n\t]);\n}", "CodeBleu_score": 64.91997827292349}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t\t$this->limiter->increment($request);\n\tthrow ValidationException::withMessages([\n\t\t'email' => [trans('auth.failed')],\n\t]);\n}", "CodeBleu_score": 89.27527197476113}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t\n$userId = $request->session()->get('user_id');\n$user = User::find($userId);\n\nif ($user) {\n\n$response = Webauthn::makeAssertion($user);\n\nreturn Inertia::render('TwoFactorChallenge', [\n'twoFactorEnabled' => $user->two_factor_enabled,\n'rememberMe' => $request->session()->get('remember_me'),\n'publicKey' => $response->publicKey,\n]);\n\n}\n\nreturn response()->view('errors.404');\n\n}", "CodeBleu_score": 42.77530697618395}, {"code": "<?\npublic function toResponse($request){\n\t$user = User::find($request->session()->get('user_id'));\nif ($user) {\n$assertion = Webauthn::makeAssertion($user->webauthn_public_key, $request->session()->get('challenge'));\n$response = Inertia::render('TwoFactorChallenge', [\n'enabled' => $user->two_factor_enabled,\n'rememberMe' => $request->session()->has('remember'),\n'assertion' => $assertion,\n]);\nreturn $response;\n}\nreturn redirect()->route('login');\n}", "CodeBleu_score": 39.9813789249007}, {"code": "<?\npublic function toResponse($request){\n\t$userId = session('auth.id');\n$user = User::find($userId);\nif ($user) {\n$assertion = Webauthn::getAssertion($user);\n$response = Inertia::render('TwoFactorChallenge', [\n'enabled' => $user->two_factor_enabled,\n'remember' => $request->session()->get('auth.remember'),\n'publicKey' => $assertion['publicKey'],\n]);\n} else {\n$response = Inertia::render('TwoFactorChallenge', [\n'enabled' => false,\n'remember' => $request->session()->get('auth.remember'),\n'publicKey' => null,\n]);\n}\nreturn $response;\n}", "CodeBleu_score": 44.99882922906709}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t\t$userToken = UserToken::where('driver', $driver)->where('socialite_id', $socialite->getId())->first();\n\n\tif ($userToken) {\n\t\t$user = $userToken->user;\n\n\t\tif ($user->email === $socialite->getEmail()) {\n\t\t\treturn $user;\n\t\t} else {\n\t\t\tthrow ValidationException::withMessages([\n\t\t\t\t'email' => ['The email associated with your social media account is not the same as the email associated with your account. Please try again.'],\n\t\t\t]);\n\t\t}\n\t} else {\n\t\t$user = User::where('email', $socialite->getEmail())->first();\n\n\t\tif ($user) {\n\t\t\t$user->tokens()->create([\n\t\t\t\t'driver' => $driver,\n\t\t\t\t'socialite_id' => $socialite->getId(),\n\t\t\t]);\n\n\t\t\treturn $user;\n\t\t} else {\n\t\t\t$user = (new CreateNewUser($request))->create([\n\t\t\t\t'name' => $socialite->getName(),\n\t\t\t\t'email' => $socialite->getEmail(),\n\t\t\t\t'password' => (8),\n\t\t\t]);\n\n\t\t\t$user->tokens()->create([\n\t\t\t\t'driver' => $driver,\n\t\t\t\t'socialite_id' => $socialite->getId(),\n\t\t\t]);\n\n\t\t\treturn $user;\n\t\t}\n\t}\n}", "CodeBleu_score": 46.31906254352548}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t\t$user = User::whereHas('tokens', function ($query) use ($driver, $socialite) {\n\t\t$query->where('driver', $driver)->where('provider_user_id', $socialite->getId());\n\t})->first();\n\n\tif (!$user) {\n\t\t$user = User::whereHas('tokens', function ($query) use ($driver, $socialite) {\n\t\t\t$query->where('driver', $driver)->where('provider_user_id', $socialite->getId());\n\t\t})->first();\n\n\t\tif (!$user) {\n\t\t\t$user = User::where('email', $socialite->getEmail())->first();\n\n\t\t\tif (!$user) {\n\t\t\t\t$user = User::where('email', $socialite->getEmail())->first();\n\n\t\t\t\tif (!$user) {\n\t\t\t\t\t$user = (new CreateNewUser())->create($request, $socialite);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!$user->tokens->where('driver', $driver)->where('provider_user_id', $socialite->getId())->first()) {\n\t\t$user->tokens()->create([\n\t\t\t'driver' => $driver,\n\t\t\t'provider_user_id' => $socialite->getId(),\n\t\t\t'provider_access_token' => $socialite->token,\n\t\t]);\n\t}\n\n\treturn $user;\n}", "CodeBleu_score": 48.550973430944204}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t\t$user_token = UserToken::where('driver', $driver)->where('user_id', $socialite->getId())->first();\n\n\tif ($user_token) {\n\t\t$user = $user_token->user;\n\t\tif ($user->socialite_token!= $socialite->token) {\n\t\t\t$user->socialite_token = $socialite->token;\n\t\t\t$user->save();\n\t\t}\n\t} else {\n\t\t$user = User::where('email', $socialite->getEmail())->first();\n\t\tif ($user) {\n\t\t\t$user->socialite_token = $socialite->token;\n\t\t\t$user->save();\n\t\t} else {\n\t\t\t$user = (new CreateNewUser($request))->create($socialite, $driver);\n\t\t}\n\n\t\t$user_token = UserToken::create([\n\t\t\t'driver' => $driver,\n\t\t\t'user_id' => $socialite->getId(),\n\t\t\t'token' => $socialite->token,\n\t\t]);\n\n\t\t$user->user_tokens()->save($user_token);\n\t}\n\n\treturn $user;\n}", "CodeBleu_score": 47.22444792836754}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t\t$user = $this->guard()->user();\n\n\tif (!$user) {\n\t\treturn false;\n\t}\n\n\t$assertion = $request->input('assertion');\n\t$assertionId = $request->input('assertionId');\n\t$challenge = $request->input('challenge');\n\t$origin = $request->input('origin');\n\t$rpId = $request->input('rpId');\n\t$allowCredentials = $request->input('allowCredentials');\n\t$timeout = $request->input('timeout');\n\n\t$webauthn = WebauthnFacade::make($user);\n\n\t$assertion = $webauthn->validateAssertion($assertion, $assertionId, $challenge, $origin, $rpId, $allowCredentials, $timeout);\n\n\tif (!$assertion) {\n\t\t$this->guard()->logout();\n\n\t\t$this->events->dispatch(new Failed($this->guard(), $user));\n\n\t\tthrow ValidationException::withMessages([\n\t\t\t'assertion' => __('webauthn::messages.invalid_assertion'),\n\t\t]);\n\t}\n\n\t$this->events->dispatch(new Successful($this->guard(), $user));\n\n\t$this->login($user, $assertion);\n\n\treturn true;\n}", "CodeBleu_score": 41.740065985153976}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t\t$user = $this->getUser($request);\n\n\tif (!$user) {\n\t\treturn false;\n\t}\n\n\t$assertion = $request->input('assertion');\n\n\t$this->validate($request, [\n\t\t'assertion' =>'required|string',\n\t]);\n\n\t$assertion = $this->getWebauthn()->validateAssertion($assertion, $user);\n\n\tif (!$assertion) {\n\t\t$this->fireFailedAuthenticationEvent($user, $request);\n\n\t\tthrow new AuthenticationException();\n\t}\n\n\t$this->login($user, $assertion);\n\n\treturn true;\n}", "CodeBleu_score": 51.90024206620024}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t\t$user = $this->user($request);\n\tif (!$user) {\n\t\treturn false;\n\t}\n\n\t$assertion = $request->input('assertion');\n\tif (!$assertion) {\n\t\treturn false;\n\t}\n\n\ttry {\n\t\t$this->validate($request);\n\t} catch (ValidationException $e) {\n\t\t$this->fireFailedEvent($request, $e);\n\t\tthrow $e;\n\t}\n\n\ttry {\n\t\t$this->guard->setAuthIdentifierName(WebauthnFacade::getAuthIdentifierName());\n\t\t$this->guard->setAuthIdentifier($user);\n\t\t$this->guard->setAuthPassword($assertion);\n\t\tif ($this->guard->attempt()) {\n\t\t\t$this->clearLoginAttempts($request);\n\t\t\treturn true;\n\t\t}\n\t} catch (Exception $e) {\n\t\t$this->fireFailedEvent($request, $e);\n\t\tthrow $e;\n\t}\n\n\t$this->incrementLoginAttempts($request);\n\treturn false;\n}", "CodeBleu_score": 44.05405470919267}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\ttry {\n\t\t$user = User::where('email', $this->argument('email'))->firstOrFail();\n\t\treturn $user;\n\t} catch (ModelNotFoundException $e) {\n\t\t$this->error(\"User with email: {$this->argument('email')} not found.\");\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 46.17023111909731}, {"code": "<?\nprivate function user(): ?User{\n\tif (empty($this->argument('email'))) {\n\t\t$this->error('No email provided.');\n\t\treturn null;\n\t}\n\ttry {\n\t\treturn User::where('email', $this->argument('email'))->firstOrFail();\n\t} catch (ModelNotFoundException $e) {\n\t\t$this->error('User not found.');\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 38.231769287461425}, {"code": "<?\nprivate function user(): ?User{\n\t$email = $this->argument('email');\n\tif (empty($email)) {\n\t\t$this->error('No email provided.');\n\t\treturn null;\n\t}\n\ttry {\n\t\treturn User::where('email', $email)->firstOrFail();\n\t} catch (ModelNotFoundException $e) {\n\t\t$this->error('User not found.');\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 64.85249498868927}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\t\t$scoutDriver = config('scout.driver');\n\t$flush = $this->option('flush');\n\tif ($scoutDriver && $flush) {\n\t\t$indexSettings = config('scout.index_settings');\n\t\tforeach ($indexSettings as $indexName => $indexSettings) {\n\t\t\t$tableName = $indexSettings['table_name']?? $indexName;\n\t\t\t$this->call('scout:flush', ['index' => $indexName, '--table' => $tableName]);\n\t\t}\n\t\t$this->info('Scout indexes flushed.');\n\t}\n}", "CodeBleu_score": 44.28718024870082}, {"code": "<?\nprotected function scoutFlush(): void{\n\t\t$scoutDriver = config('scout.driver');\n\t$flushOption = $this->option('flush');\n\tif ($scoutDriver ==='meilisearch' && $flushOption) {\n\t\t$indexSettings = config('scout.indexSettings');\n\t\tforeach ($indexSettings as $indexName => $indexSettings) {\n\t\t\t$tableName = $indexSettings['table']?? $indexName;\n\t\t\t$this->call('scout:flush', ['--model' => $tableName]);\n\t\t}\n\t\t$this->info('Scout indexes flushed.');\n\t}\n}", "CodeBleu_score": 44.52532845594863}, {"code": "<?\nprotected function scoutFlush(): void{\n\t\t$scoutDriver = config('scout.driver');\n\t$flushOption = $this->option('flush');\n\n\tif ($scoutDriver ==='meilisearch' && $flushOption) {\n\t\t$meilisearchSettings = config('scout.meilisearch.settings');\n\n\t\tforeach ($meilisearchSettings as $index => $settings) {\n\t\t\t$tableName = $settings['model'];\n\t\t\t$this->call('scout:flush', ['model' => $tableName]);\n\t\t}\n\n\t\t$this->line('Scout indexes flushed.');\n\t}\n}", "CodeBleu_score": 47.43642128969798}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t\t$vcard = new VCard();\n\t$vcard->add('VERSION', '3.0');\n\n\t// Try to read an existing VCard from the resource.\n\ttry {\n\t\t$vcard = Reader::read($resource->getContent());\n\t} catch (ParseException $e) {\n\t\t// If the VCard couldn't be read, create a new VCard with basic information.\n\t\t$vcard->add('VERSION', '3.0');\n\t\t$vcard->add('N', $resource->getContact()->getFullName());\n\t\t$vcard->add('FN', $resource->getContact()->getFullName());\n\t\t$vcard->add('EMAIL', $resource->getContact()->getEmail());\n\t\t$vcard->add('TEL', $resource->getContact()->getPhone());\n\t\t$vcard->add('ADR', $resource->getContact()->getAddress());\n\t}\n\n\t// Apply a series of exporters to add more details to the VCard from the resource.\n\t$exporters = $this->getExporters($resource);\n\tforeach ($exporters as $exporter) {\n\t\t$exporter->export($vcard, $resource);\n\t}\n\n\t// Set a UID if it is missing.\n\tif (!isset($vcard->UID)) {\n\t\t$vcard->add('UID', $resource->getContact()->getUid());\n\t}\n\n\treturn $vcard;\n}", "CodeBleu_score": 38.867417047619426}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t\t// Try to read an existing VCard from the resource.\n\ttry {\n\t\t$vcard = $resource->readVCard();\n\t} catch (ModelNotFoundException) {\n\t\t// If the VCard doesn't exist, create a new one with basic information.\n\t\t$vcard = new VCard();\n\t\t$vcard->add('VERSION', '4.0');\n\t\t$vcard->add('UID', $resource->getUid());\n\t}\n\n\t// Apply a series of exporters to add more details to the VCard from the resource.\n\t$exporters = $this->getExporters($resource);\n\tforeach ($exporters as $exporter) {\n\t\t$exporter->export($vcard, $resource);\n\t}\n\n\treturn $vcard;\n}", "CodeBleu_score": 27.273427966721847}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t\t$vcard = $resource->getVCard();\n\n\tif (!$vcard) {\n\t\t$vcard = new VCard();\n\t\t$vcard->add('version', '4.0');\n\t\t$vcard->add('uid', $resource->getUid());\n\t}\n\n\t$exporters = $this->getExporters();\n\t$exporters->each(function (ExportVCardResource $exporter) use ($resource, $vcard) {\n\t\t$exporter->export($resource, $vcard);\n\t});\n\n\treturn $vcard;\n}", "CodeBleu_score": 22.620119916317165}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t\t$user = Auth::user();\n\t$contact = Contact::where('uri', $cardUri)->first();\n\t$group = Group::where('uri', $cardUri)->first();\n\tif ($contact) {\n\t\tif ($contact->user_id === $user->id) {\n\t\t\tBus::dispatch(new DestroyContact($contact->id));\n\t\t\treturn true;\n\t\t}\n\t\tthrow new NotEnoughPermissionException('You do not have permission to delete this contact.');\n\t}\n\tif ($group) {\n\t\tif ($group->user_id === $user->id) {\n\t\t\tBus::dispatch(new DestroyGroup($group->id));\n\t\t\treturn true;\n\t\t}\n\t\tthrow new NotEnoughPermissionException('You do not have permission to delete this group.');\n\t}\n\treturn false;\n}", "CodeBleu_score": 34.46892886949755}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t\t// Get the object corresponding to the given card URI.\n\t$object = $this->getObject($addressBookId, $cardUri);\n\n\t// If the object is a contact, dispatch a job to destroy the contact.\n\tif ($object instanceof Contact) {\n\t\tBus::dispatch(new DestroyContact($object));\n\t\treturn true;\n\t}\n\n\t// If the object is a group, dispatch a job to destroy the group.\n\tif ($object instanceof Group) {\n\t\tBus::dispatch(new DestroyGroup($object));\n\t\treturn true;\n\t}\n\n\t// If the object is neither a contact nor a group, return false.\n\treturn false;\n}", "CodeBleu_score": 35.11836825171262}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t\t$addressBook = $this->getAddressBook($addressBookId);\n\tif (!$addressBook) {\n\t\treturn false;\n\t}\n\n\t$card = $this->getCard($addressBook, $cardUri);\n\tif (!$card) {\n\t\treturn false;\n\t}\n\n\tif ($card instanceof VCard) {\n\t\t$contact = $this->getContactFromVCard($card);\n\t\tif ($contact) {\n\t\t\tBus::dispatch(new DestroyContact($contact));\n\t\t}\n\t} elseif ($card instanceof Group) {\n\t\tBus::dispatch(new DestroyGroup($card));\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 29.086906265317463}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\t\t// Check if a file is included in the request.\n\tif (!isset($data['file'])) {\n\t\treturn;\n\t}\n\n\t// Get the authenticated user.\n\t$user = auth()->user();\n\n\t// Create a lead activity record.\n\t$activity = $this->create([\n\t\t'lead_id' => $data['lead_id'],\n\t\t'type' => 'file',\n\t\t'description' => $data['description'],\n\t\t'created_by' => $user->id,\n\t]);\n\n\t// Create a new file record.\n\t$file = $this->create([\n\t\t'activity_id' => $activity->id,\n\t\t'name' => $data['file']->getClientOriginalName(),\n\t\t'path' => $data['file']->store('public/leads/files'),\n\t]);\n\n\t// Return the file record.\n\treturn $file;\n}", "CodeBleu_score": 48.11287469177715}, {"code": "<?\npublic function upload(array $data){\n\t\t// Check if a file is included in the request\n\tif (!array_key_exists('file', $data) ||!$data['file']) {\n\t\treturn null;\n\t}\n\n\t// Get the authenticated user\n\t$user = auth()->user();\n\n\t// Create a lead activity record\n\t$activity = $this->create([\n\t\t'lead_id' => $data['lead_id'],\n\t\t'user_id' => $user->id,\n\t\t'type' => 'file_upload',\n\t\t'data' => [\n\t\t\t'file_name' => $data['file']->getClientOriginalName(),\n\t\t\t'file_type' => $data['file']->getClientMimeType(),\n\t\t\t'file_size' => $data['file']->getSize(),\n\t\t],\n\t]);\n\n\t// Create a new file record\n\t$file = $this->fileRepository->create([\n\t\t'activity_id' => $activity->id,\n\t\t'name' => $data['file']->getClientOriginalName(),\n\t\t'path' => $data['file']->store('public/leads/files'),\n\t]);\n\n\t// Return the new file record\n\treturn $file;\n}", "CodeBleu_score": 47.44558173727723}, {"code": "<?\npublic function upload(array $data){\n\t\t$file = $data['file'];\n\t$leadActivity = $data['leadActivity'];\n\t$user = $data['user'];\n\n\tif (empty($file)) {\n\t\treturn;\n\t}\n\n\t$file = $this->uploadFile($file);\n\n\tif (empty($file)) {\n\t\treturn;\n\t}\n\n\t$leadActivity = $this->createLeadActivity($leadActivity, $user);\n\n\treturn $this->createLeadActivityFile($leadActivity, $file);\n}", "CodeBleu_score": 31.69671888369523}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t\t$isFront = preg_match('/^\\/[a-z]{2}\\//', request()->path());\n\t$isAdmin = preg_match('/^\\/admin/', request()->path());\n\t$isApi = preg_match('/^\\/api/', request()->path());\n\t$isException = $exception instanceof Exception;\n\t$isHttpException = $exception instanceof HttpException;\n\t$isModelNotFoundException = $exception instanceof ModelNotFoundException;\n\t$isPDOException = $exception instanceof PDOException;\n\t$isParseError = $exception instanceof ParseError;\n\t$isAuthenticationException = $exception instanceof AuthenticationException;\n\t$isContainerException = $exception instanceof ContainerException;\n\t$isAppException = $exception instanceof AppException;\n\t$isAppExceptionHandler = $exception instanceof AppExceptionHandler;\n\n\tif ($isFront &&!$isApi) {\n\t\tif ($isHttpException) {\n\t\t\t$code = $exception->getStatusCode();\n\t\t\t$message = $exception->getMessage();\n\t\t} else {\n\t\t\t$code = 500;\n\t\t\t$message = 'Oops! Something went wrong.';\n\t\t}\n\n\t\treturn redirect()->route('admin.session.create')->with('error', $message);\n\t}\n\n\tif ($isHttpException) {\n\t\t$code = $exception->getStatusCode();\n\t\t$message = $exception->getMessage();\n\t} else {\n\t\t$code = 500;\n\t\t$message = 'Oops! Something went wrong.';\n\t}\n\n\tif ($isModelNotFoundException) {\n\t\t$code = 404;\n\t\t$message = 'The resource you are looking for could not be found.';\n\t}\n\n\tif ($isPDOException) {\n\t\t$code = 500;\n\t\t$message = 'Oops! Something went wrong.';\n\t}\n\n\tif ($isParseError) {\n\t\t$code = 500;\n\t\t$message = 'Oops! Something went wrong.';\n\t}\n\n\tif ($isAuthenticationException) {\n\t\t$code = 401;\n\t\t$message = 'You are not authorized to access this resource.';\n\t}\n\n\tif ($isContainerException) {\n\t\t$code = 500;\n\t\t$message = 'Oops! Something went wrong.';\n\t}\n\n\tif ($isApp", "CodeBleu_score": 33.74280258607752}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t\t$exception = $exception instanceof AppExceptionHandler? $exception->getPrevious() : $exception;\n\t$response = null;\n\n\tif ($exception instanceof AuthenticationException) {\n\t\t$response = response()->json(['error' => 'Unauthorized'], 401);\n\t} elseif ($exception instanceof ModelNotFoundException) {\n\t\t$response = response()->json(['error' => 'Not found'], 404);\n\t} elseif ($exception instanceof PDOException) {\n\t\t$response = response()->json(['error' => 'Database error'], 500);\n\t} elseif ($exception instanceof ParseError) {\n\t\t$response = response()->json(['error' => 'Invalid syntax'], 500);\n\t} elseif ($exception instanceof HttpException) {\n\t\t$response = response()->json(['error' => $exception->getMessage()], $exception->getStatusCode());\n\t} elseif ($exception instanceof ContainerException) {\n\t\t$response = response()->json(['error' => 'Container exception'], 500);\n\t} elseif ($exception instanceof \\Exception) {\n\t\t$response = response()->json(['error' => $exception->getMessage()], 500);\n\t}\n\n\treturn $response;\n}", "CodeBleu_score": 44.039823650067476}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t\tif ($exception instanceof ModelNotFoundException) {\n\t\treturn response()->json([\n\t\t\t'status' => 'error',\n\t\t\t'message' => 'Resource not found'\n\t\t], 404);\n\t}\n\tif ($exception instanceof PDOException) {\n\t\treturn response()->json([\n\t\t\t'status' => 'error',\n\t\t\t'message' => 'Database error'\n\t\t], 500);\n\t}\n\tif ($exception instanceof ParseError) {\n\t\treturn response()->json([\n\t\t\t'status' => 'error',\n\t\t\t'message' => 'Parse error'\n\t\t], 500);\n\t}\n\tif ($exception instanceof AuthenticationException) {\n\t\treturn response()->json([\n\t\t\t'status' => 'error',\n\t\t\t'message' => 'Unauthenticated'\n\t\t], 401);\n\t}\n\tif ($exception instanceof HttpException) {\n\t\treturn response()->json([\n\t\t\t'status' => 'error',\n\t\t\t'message' => $exception->getMessage()\n\t\t], $exception->getStatusCode());\n\t}\n\treturn response()->json([\n\t\t'status' => 'error',\n\t\t'message' => 'Internal server error'\n\t], 500);\n}", "CodeBleu_score": 31.181517085873118}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\t\t$response = new Response();\n\t$response->setStatusCode($statusCode);\n\n\tif ($this->request->expectsJson()) {\n\t\t$response->setContent(json_encode([\n\t\t\t'message' => $this->getErrorMessage($path, $statusCode)\n\t\t]));\n\t} else {\n\t\t$response->setContent($this->view->make($path, [\n\t\t\t'message' => $this->getErrorMessage($path, $statusCode)\n\t\t]));\n\t}\n\n\treturn $response;\n}", "CodeBleu_score": 48.53969922573098}, {"code": "<?\nprivate function response($path, $statusCode){\n\t\t$response = null;\n\tif (request()->expectsJson()) {\n\t\t$response = response()->json([\n\t\t\t'error' => [\n\t\t\t\t'message' => $this->getErrorMessage($statusCode)\n\t\t\t]\n\t\t], $statusCode);\n\t} else {\n\t\t$response = view('errors.'. $statusCode, ['path' => $path]);\n\t}\n\treturn $response;\n}", "CodeBleu_score": 49.963599331444584}, {"code": "<?\nprivate function response($path, $statusCode){\n\t\t$response = [\n\t\t'status' => $statusCode,\n\t\t'path' => $path,\n\t];\n\n\tif (request()->expectsJson()) {\n\t\treturn response()->json($response, $statusCode);\n\t}\n\n\treturn response()->view('errors.'.$statusCode, $response, $statusCode);\n}", "CodeBleu_score": 47.00792641736628}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t\t// Get the request data\n\t$requestData = request()->all();\n\n\t// Get the activity IDs from the request data\n\t$activityIds = $requestData['activity_ids'];\n\n\t// Get the 'is_done' status from the request data\n\t$isDone = $requestData['is_done'];\n\n\t// Initialize the update count\n\t$updateCount = 0;\n\n\t// Iterate over the activity IDs\n\tforeach ($activityIds as $activityId) {\n\t\t// Update the activity's 'is_done' status\n\t\t$activity = Activity::find($activityId);\n\t\t$activity->is_done = $isDone;\n\t\t$activity->save();\n\n\t\t// Dispatch the 'activity.updated' event\n\t\tEvent::dispatch(new ActivityUpdated($activity));\n\n\t\t// Increment the update count\n\t\t$updateCount++;\n\t}\n\n\t// Return a JSON response indicating success or failure based on whether any updates were made\n\treturn response()->json([\n\t\t'success' => $updateCount > 0,\n\t\t'updateCount' => $updateCount,\n\t]);\n}", "CodeBleu_score": 35.46506704867719}, {"code": "<?\npublic function massUpdate(){\n\t\t$activityIds = request('activity_ids');\n\t$isDone = request('is_done');\n\t$updateCount = 0;\n\t$activityRepository = app(ActivityRepository::class);\n\t$personRepository = app(PersonRepository::class);\n\t$leadRepository = app(LeadRepository::class);\n\t$userRepository = app(UserRepository::class);\n\t$fileRepository = app(FileRepository::class);\n\n\tif (count($activityIds) > 0) {\n\t\tforeach ($activityIds as $activityId) {\n\t\t\t$activity = $activityRepository->find($activityId);\n\n\t\t\tif ($activity) {\n\t\t\t\t$activity->is_done = $isDone;\n\t\t\t\t$activity->save();\n\t\t\t\t$updateCount++;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn response()->json([\n\t\t'success' => $updateCount > 0,\n\t\t'updateCount' => $updateCount,\n\t]);\n}", "CodeBleu_score": 37.78914911737797}, {"code": "<?\npublic function massUpdate(){\n\t\t$ids = request()->input('ids');\n\t$isDone = request()->input('is_done');\n\t$count = 0;\n\t$update_ids = [];\n\n\tif (is_array($ids)) {\n\t\tforeach ($ids as $id) {\n\t\t\t$activity = Activity::find($id);\n\n\t\t\tif ($activity) {\n\t\t\t\t$activity->is_done = $isDone;\n\t\t\t\t$activity->save();\n\t\t\t\t$count++;\n\t\t\t\t$update_ids[] = $id;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn response()->json([\n\t\t'success' => $count > 0,\n\t\t'count' => $count,\n\t\t'update_ids' => $update_ids,\n\t]);\n}", "CodeBleu_score": 33.517985982752116}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t\t$ids = request()->input('ids');\n\t$ids = explode(',', $ids);\n\tforeach ($ids as $id) {\n\t\t$this->destroy($id);\n\t}\n\treturn response()->json([\n\t\t'success' => true,\n\t\t'message' => trans('admin::app.response.destroy-success', ['name' => 'Activity']),\n\t]);\n}", "CodeBleu_score": 28.984706608502414}, {"code": "<?\n public function massDestroy(){\n\t\t$ids = request()->get('ids');\n\n\t$ids = explode(',', $ids);\n\n\tforeach ($ids as $id) {\n\t\t$activity = $this->activityRepository->find($id);\n\n\t\tif (isset($activity)) {\n\t\t\t$this->dispatchActivityEvent('before_delete', $activity);\n\n\t\t\t$this->activityRepository->delete($id);\n\n\t\t\t$this->dispatchActivityEvent('after_delete', $activity);\n\t\t}\n\t}\n\n\treturn response()->json([\n\t\t'success' => true,\n\t\t'message' => trans('admin::app.response.destroy-success', ['name' => 'Activity']),\n\t]);\n}", "CodeBleu_score": 35.3191271819331}, {"code": "<?\n public function massDestroy(){\n\t\t// Retrieve the request data.\n\t$request = request();\n\t$ids = $request->get('ids');\n\t$ids = explode(',', $ids);\n\n\t// Iterate over the activity IDs and delete each one.\n\tforeach ($ids as $id) {\n\t\t$this->activityRepository->findOrFail($id)->delete();\n\t}\n\n\t// Return a JSON response indicating success.\n\treturn response()->json(['success' => true]);\n}", "CodeBleu_score": 21.235738389194786}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t$request = request();\n\n\t$cards = DashboardHelper::getDashboardCards();\n\n\tforeach ($cards as $card) {\n\t\t$card['selected'] = false;\n\n\t\tforeach ($request->selectedCards as $selectedCard) {\n\t\t\tif ($card['id'] == $selectedCard) {\n\t\t\t\t$card['selected'] = true;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn response()->json($cards);\n}", "CodeBleu_score": 36.01282644165371}, {"code": "<?\n public function updateCards(){\n\t$cards = DashboardHelper::getCards();\n\tforeach ($cards as $key => $card) {\n\t\t$cards[$key]['selected'] = false;\n\t\tforeach ($_POST as $cardId => $status) {\n\t\t\tif ($cardId == $card['id']) {\n\t\t\t\t$cards[$key]['selected'] = true;\n\t\t\t}\n\t\t}\n\t}\n\treturn response()->json($cards);\n}", "CodeBleu_score": 32.07699728985583}, {"code": "<?\n public function updateCards(){\n\t$cards = DashboardHelper::getCards();\n\t$data = request()->all();\n\tforeach ($cards as $key => $card) {\n\t\tif (array_key_exists($key, $data)) {\n\t\t\t$cards[$key]['selected'] = $data[$key];\n\t\t}\n\t}\n\treturn response()->json($cards);\n}", "CodeBleu_score": 34.19858913370394}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t\t$this->validate($request, [\n\t\t'code' =>'required|unique:core_configurations,code',\n\t\t'value' =>'required',\n\t]);\n\n\t$configuration = $this->configurationRepository->create($request->all());\n\n\t$this->dispatch(new ConfigurationCreated($configuration));\n\n\tsession()->flash('success', trans('admin::app.response.create-success', ['name' => 'Configuration']));\n\n\treturn redirect()->route('admin.core.configuration.index');\n}", "CodeBleu_score": 26.301252545938812}, {"code": "<?\npublic function store(){\n\t\t$this->validate(request(), [\n\t\t'key' =>'required|string|max:255',\n\t\t'value' =>'required|string',\n\t\t'code' =>'required|string|max:255'\n\t]);\n\n\tEvent::dispatch('core.configuration.saving');\n\n\t$configuration = $this->configurationRepository->create(request()->all());\n\n\tEvent::dispatch('core.configuration.saved', $configuration);\n\n\tsession()->flash('success', trans('admin::app.response.create-success', ['name' => 'Configuration']));\n\n\treturn redirect()->back();\n}", "CodeBleu_score": 35.63691310043617}, {"code": "<?\npublic function store(){\n\t\tEvent::dispatch('admin.core.configuration.store.before');\n\n\t$this->configurationRepository->create($request->all());\n\n\tEvent::dispatch('admin.core.configuration.store.after');\n\n\tsession()->flash('success', trans('admin::app.response.create-success', ['name' => 'Configuration']));\n\n\treturn redirect()->route('admin.core.configuration.index');\n}", "CodeBleu_score": 33.525290045924315}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t\t// Retrieve the file path from the request.\n\t$filePath = request()->get('file');\n\n\t// Construct the full file name by combining the file path and the file name.\n\t$fileName = $filePath. '/'. request()->get('file_name');\n\n\t// Fetch the configuration from the repository.\n\t$configuration = $this->configurationRepository->findOneWhere([\n\t\t'code' => request()->get('code'),\n\t\t'field' => request()->get('field'),\n\t]);\n\n\t// Return the file for download using the stored value.\n\treturn Storage::disk(config('core.base.filesystem.disk'))->download($fileName, $configuration->value);\n}", "CodeBleu_score": 41.56818598825282}, {"code": "<?\npublic function download(){\n\t\t// Get the file path from the request parameters.\n\t$path = request()->get('path');\n\n\t// Construct the full file name.\n\t$file_name = $path. '/'. request()->get('file');\n\n\t// Retrieve the configuration.\n\t$config = $this->configurationRepository->findOneWhere([\n\t\t'key' => $file_name,\n\t]);\n\n\t// Return the file for download.\n\treturn response()->download(storage_path('app/'. $config->value));\n}", "CodeBleu_score": 44.3404214287067}, {"code": "<?\npublic function download(){\n\t\t// Retrieve the file path from the request parameters.\n\t$file_path = request()->input('file_path');\n\n\t// Construct the full file name.\n\t$file_name = $file_path. '/'. request()->input('file_name');\n\n\t// Retrieve the configuration from the repository.\n\t$config = app(ConfigurationRepository::class)->findOneByField('key', $file_name);\n\n\t// Return the file for download using the stored value.\n\treturn Storage::disk('public')->download($file_name, $config->value);\n}", "CodeBleu_score": 45.063956883719186}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\treturn Result.success();\n}", "CodeBleu_score": 8.807945187954433}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\t// \u83b7\u53d6\u5f53\u524d\u7528\u6237\n\tAdminUser user = UserUtil.getCurrentUser();\n\t// \u83b7\u53d6\u5f53\u524d\u7528\u6237\u914d\u7f6e\n\tAdminUserConfig userConfig = adminUserConfigService.getByUserId(user.getId());\n\t// \u83b7\u53d6\u5f53\u524d\u7528\u6237\u914d\u7f6e\u7684\u6a21\u578b\u6392\u5e8f\n\tList<AdminModelSort> modelSortList = adminModelSortService.list(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, user.getId()));\n\t// \u79fb\u9664\u5f53\u524d\u7528\u6237\u914d\u7f6e\u7684\u6a21\u578b\u6392\u5e8f\n\tadminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, user.getId()));\n\t// \u904d\u5386\u6a21\u578b\u6392\u5e8f\n\tfor (String sort : list) {\n\t\t// \u89e3\u6790\u6a21\u578b\u6392\u5e8f\n\t\tJSONObject jsonObject = JSON.parseObject(sort);\n\t\t// \u83b7\u53d6\u6a21\u578bID\n\t\tInteger modelId = jsonObject.getInteger(\"modelId\");\n\t\t// \u83b7\u53d6\u6a21\u578b\u6392\u5e8f\n\t\tInteger sortNum = jsonObject.getInteger(\"sortNum\");\n\t\t// \u521b\u5efa\u6a21\u578b\u6392\u5e8f\u5bf9\u8c61\n\t\tAdminModelSort adminModelSort = new AdminModelSort();\n\t\t// \u8bbe\u7f6e\u6a21\u578bID\n\t\tadminModelSort.setModelId(modelId);\n\t\t// \u8bbe\u7f6e\u6a21\u578b\u6392\u5e8f\n\t\tadminModelSort.setSortNum(sortNum);\n\t\t// \u8bbe\u7f6e\u7528\u6237ID\n\t\tadminModelSort.setUserId(user.getId());\n\t\t// \u4fdd\u5b58\u6a21\u578b\u6392\u5e8f\n\t\tadminModelSortService.save(adminModelSort);\n\t}\n\t// \u4fdd\u5b58\u7528\u6237\u914d\u7f6e\n\tadminUserConfigService.save(userConfig);\n\t// \u4fdd\u5b58\u7528\u6237\u914d\u7f6e\u65e5\u5fd7\n\tSysLogHandler.save(new SysLog(user.getId(), user.getAdminId(), user.getAdminName(), user.getAdminAccount(), user.getAdminPhone(), user.getAdminEmail(), user.getAdminAvatar(), user.getAdminRole(), user.getAdminRoleName(), user.getAdminCompanyId(), user.getAdminCompanyName(), user.getAdminDeptId(), user.getAdminDeptName(), user.getAdminDeptPath(), user.getAdminDeptPathName(), user.getAdminPositionId(), user.getAdminPositionName(), user.getAdminPositionPath(), user.getAdminPositionPathName(), user.getAdminPositionType(), user.getAdminPositionTypeName(), user.getAdminPositionCode(), user.getAdminPositionIsMain(), user.getAdminPositionIsMainName(), user", "CodeBleu_score": 33.39338453859392}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\n\tAdminUser user = UserUtil.getUser();\n\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u914d\u7f6e\u4fe1\u606f\n\tAdminUserConfig userConfig = adminUserConfigService.getById(user.getId());\n\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u914d\u7f6e\u4fe1\u606f\u7684\u6a21\u578b\u6392\u5e8f\n\tList<AdminModelSort> modelSortList = adminModelSortService.list(new LambdaQueryWrapper<AdminModelSort>()\n\t\t\t.eq(AdminModelSort::getUserId, user.getId()));\n\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u914d\u7f6e\u4fe1\u606f\u7684\u6a21\u578b\u6392\u5e8f\u7684\u6a21\u578bid\n\tList<Integer> modelIdList = modelSortList.stream().map(AdminModelSort::getModelId).collect(Collectors.toList());\n\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u914d\u7f6e\u4fe1\u606f\u7684\u6a21\u578b\u6392\u5e8f\u7684\u6a21\u578bid\u7684\u96c6\u5408\n\tJSONArray modelIdArray = new JSONArray(modelIdList);\n\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u914d\u7f6e\u4fe1\u606f\u7684\u6a21\u578b\u6392\u5e8f\u7684\u6a21\u578bid\u7684\u96c6\u5408\u7684\u957f\u5ea6\n\tint modelIdArrayLength = modelIdArray.size();\n\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u914d\u7f6e\u4fe1\u606f\u7684\u6a21\u578b\u6392\u5e8f\u7684\u6a21\u578bid\u7684\u96c6\u5408\u7684\u957f\u5ea6\n\tint listLength = list.size();\n\t//\u5982\u679c\u5f53\u524d\u7528\u6237\u7684\u914d\u7f6e\u4fe1\u606f\u7684\u6a21\u578b\u6392\u5e8f\u7684\u6a21\u578bid\u7684\u96c6\u5408\u7684\u957f\u5ea6\u5927\u4e8e\u5f53\u524d\u7528\u6237\u7684\u914d\u7f6e\u4fe1\u606f\u7684\u6a21\u578b\u6392\u5e8f\u7684\u6a21\u578bid\u7684\u96c6\u5408\u7684\u957f\u5ea6\n\tif (modelIdArrayLength > listLength) {\n\t\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u914d\u7f6e\u4fe1\u606f\u7684\u6a21\u578b\u6392\u5e8f\u7684\u6a21\u578bid\u7684\u96c6\u5408\u7684\u957f\u5ea6\n\t\tint length = modelIdArrayLength - listLength;\n\t\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u914d\u7f6e\u4fe1\u606f\u7684\u6a21\u578b\u6392\u5e8f\u7684\u6a21\u578bid\u7684\u96c6\u5408\u7684\u957f\u5ea6\n\t\tfor (int i = 0; i < length; i++) {\n\t\t\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u914d\u7f6e\u4fe1\u606f\u7684\u6a21\u578b\u6392\u5e8f\u7684\u6a21\u578bid\u7684\u96c6\u5408\u7684\u957f\u5ea6\n\t\t\tmodelIdArray.remove(modelIdArrayLength - 1);\n\t\t}\n\t}\n\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u914d\u7f6e\u4fe1\u606f\u7684\u6a21\u578b\u6392\u5e8f\u7684\u6a21\u578bid\u7684\u96c6\u5408\u7684\u957f\u5ea6\n\tfor (int i = 0; i < listLength; i++) {\n\t\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u914d\u7f6e\u4fe1\u606f\u7684\u6a21\u578b\u6392\u5e8f\u7684\u6a21\u578bid\u7684\u96c6\u5408\u7684\u957f\u5ea6\n\t\tif (modelIdArray.contains(list.get(i))) {\n\t\t\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u914d\u7f6e\u4fe1\u606f\u7684\u6a21\u578b\u6392\u5e8f\u7684\u6a21\u578bid\u7684\u96c6\u5408\u7684\u957f\u5ea6\n\t\t\tmodelIdArray.remove(list.get(i));\n\t\t}\n\t}\n\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684", "CodeBleu_score": 31.860679654256284}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t\tAdminUserConfig adminUserConfig = UserUtil.getAdminUserConfig();\n\tif (adminUserConfig.getCompanyId() == 0) {\n\t\treturn ResultUtil.error(AdminCodeEnum.ADMIN_CONFIG_NOT_EXIST.getCode(), AdminCodeEnum.ADMIN_CONFIG_NOT_EXIST.getMsg());\n\t}\n\tAdminConfig adminConfig = adminConfigService.getById(adminUserConfig.getCompanyId());\n\tif (adminConfig == null) {\n\t\treturn ResultUtil.error(AdminCodeEnum.ADMIN_CONFIG_NOT_EXIST.getCode(), AdminCodeEnum.ADMIN_CONFIG_NOT_EXIST.getMsg());\n\t}\n\tif (adminConfig.getCompanyType() == 1) {\n\t\treturn ResultUtil.error(AdminCodeEnum.ADMIN_CONFIG_NOT_EXIST.getCode(), AdminCodeEnum.ADMIN_CONFIG_NOT_EXIST.getMsg());\n\t}\n\tif (moduleSetting.getSettingId() == 0) {\n\t\treturn ResultUtil.error(AdminCodeEnum.ADMIN_CONFIG_NOT_EXIST.getCode(), AdminCodeEnum.ADMIN_CONFIG_NOT_EXIST.getMsg());\n\t}\n\tAdminConfig adminConfigNew = adminConfigService.getById(adminUserConfig.getCompanyId());\n\tif (adminConfigNew == null) {\n\t\treturn ResultUtil.error(AdminCodeEnum.ADMIN_CONFIG_NOT_EXIST.getCode(), AdminCodeEnum.ADMIN_CONFIG_NOT_EXIST.getMsg());\n\t}\n\tAdminConfig adminConfigOld = JSON.parseObject(JSON.toJSONString(adminConfig), AdminConfig.class);\n\tif (moduleSetting.getStatus() == 1) {\n\t\tadminConfigNew.setModuleStatus(adminConfigNew.getModuleStatus() + \",\" + moduleSetting.getSettingId());\n\t} else {\n\t\tadminConfigNew.setModuleStatus(adminConfigNew.getModuleStatus().replace(\",\" + moduleSetting.getSettingId(), \"\"));\n\t}\n\tadminConfigService.updateById(adminConfigNew);\n\tAdminConfigLog.setAdminConfigLog(adminConfigOld, adminConfigNew, adminUserConfig.getCompanyId());\n\treturn ResultUtil.success();\n}", "CodeBleu_score": 44.9239858716615}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t\tResult result = new Result();\n\t// 1. Check if the module is CRM, and return an error if it is.\n\tif (moduleSetting.getModule().equals(AdminModuleEnum.CRM.getValue())) {\n\t\tresult.setCode(AdminCodeEnum.ERROR_CRM_MODULE_SETTING.getCode());\n\t\tresult.setMsg(AdminCodeEnum.ERROR_CRM_MODULE_SETTING.getMsg());\n\t\treturn result;\n\t}\n\t// 2. Get the current admin configuration by the setting ID.\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n\tif (adminConfig == null) {\n\t\tresult.setCode(AdminCodeEnum.ERROR_ADMIN_CONFIG_NOT_EXIST.getCode());\n\t\tresult.setMsg(AdminCodeEnum.ERROR_ADMIN_CONFIG_NOT_EXIST.getMsg());\n\t\treturn result;\n\t}\n\t// 3. Update the status of the admin configuration and save the updated setting.\n\tadminConfig.setStatus(moduleSetting.getStatus());\n\tadminConfig.setUpdateTime(DateUtil.now());\n\tadminConfigService.updateById(adminConfig);\n\t// 4. Return a success result.\n\tresult.setCode(AdminCodeEnum.SUCCESS.getCode());\n\tresult.setMsg(AdminCodeEnum.SUCCESS.getMsg());\n\treturn result;\n}", "CodeBleu_score": 53.65121945110448}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t\t// 1. Get the current admin configuration by the setting ID\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n\tif (adminConfig == null) {\n\t\treturn Result.error(AdminCodeEnum.ADMIN_CONFIG_NOT_EXIST.getCode(), AdminCodeEnum.ADMIN_CONFIG_NOT_EXIST.getMsg());\n\t}\n\t// 2. Check if the module is CRM. If it is CRM, return an error.\n\tif (adminConfig.getAdminModule().equals(AdminModuleEnum.CRM.getCode())) {\n\t\treturn Result.error(AdminCodeEnum.ADMIN_CONFIG_CRM_NOT_ALLOW_EDIT.getCode(), AdminCodeEnum.ADMIN_CONFIG_CRM_NOT_ALLOW_EDIT.getMsg());\n\t}\n\t// 3. Update the status of the admin configuration and save the updated setting, returning a success result.\n\tadminConfig.setSettingValue(moduleSetting.getSettingValue());\n\tadminConfig.setSettingStatus(moduleSetting.getSettingStatus());\n\tadminConfigService.updateById(adminConfig);\n\treturn Result.success(AdminCodeEnum.ADMIN_CONFIG_UPDATE_SUCCESS.getCode(), AdminCodeEnum.ADMIN_CONFIG_UPDATE_SUCCESS.getMsg());\n}", "CodeBleu_score": 54.12613799433957}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\t//\u83b7\u53d6\u7528\u6237ID\n\tLong userId = UserUtil.getUserId();\n\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\u914d\u7f6e\n\tAdminUserConfig adminUserConfig = adminUserConfigService.getOne(new LambdaQueryWrapper<AdminUserConfig>().eq(AdminUserConfig::getUserId, userId).eq(AdminUserConfig::getCustomKey, customKey));\n\t//\u5982\u679c\u5f53\u524d\u7528\u6237\u914d\u7f6e\u4e0d\u5b58\u5728\n\tif(adminUserConfig == null){\n\t\t//\u521b\u5efa\u65b0\u7684\u7528\u6237\u914d\u7f6e\n\t\tadminUserConfig = new AdminUserConfig();\n\t\tadminUserConfig.setUserId(userId);\n\t\tadminUserConfig.setCustomKey(customKey);\n\t\tadminUserConfig.setConfigValue(json.toJSONString());\n\t\t//\u4fdd\u5b58\u7528\u6237\u914d\u7f6e\n\t\tadminUserConfigService.save(adminUserConfig);\n\t}else{\n\t\t//\u66f4\u65b0\u7528\u6237\u914d\u7f6e\n\t\tadminUserConfig.setConfigValue(json.toJSONString());\n\t\tadminUserConfigService.updateById(adminUserConfig);\n\t}\n\treturn Result.success();\n}", "CodeBleu_score": 48.410449953796274}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\tJSONObject jsonObject = new JSONObject();\n\tjsonObject.put(\"customKey\", customKey);\n\tjsonObject.put(\"json\", json);\n\treturn Result.success(jsonObject);\n}", "CodeBleu_score": 18.656163612463626}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\n\tAdminUser adminUser = UserUtil.getCurrentUser();\n\tif (adminUser == null) {\n\t\treturn Result.failed(AdminCodeEnum.USER_NOT_LOGIN.getCode(), AdminCodeEnum.USER_NOT_LOGIN.getMsg());\n\t}\n\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u914d\u7f6e\n\tAdminUserConfig adminUserConfig = adminUserConfigService.getOne(new LambdaQueryWrapper<AdminUserConfig>().eq(AdminUserConfig::getCustomKey, customKey).eq(AdminUserConfig::getUserId, adminUser.getId()));\n\tif (adminUserConfig!= null) {\n\t\tadminUserConfig.setConfig(json.toJSONString());\n\t\tadminUserConfigService.updateById(adminUserConfig);\n\t} else {\n\t\tadminUserConfig = new AdminUserConfig();\n\t\tadminUserConfig.setUserId(adminUser.getId());\n\t\tadminUserConfig.setCustomKey(customKey);\n\t\tadminUserConfig.setConfig(json.toJSONString());\n\t\tadminUserConfigService.save(adminUserConfig);\n\t}\n\treturn Result.success();\n}", "CodeBleu_score": 47.49669351228197}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser user = adminUserService.getById(userId);\n\tif(ObjectUtil.isNull(user)){\n\t\treturn Result.fail(\"\u7528\u6237\u4e0d\u5b58\u5728\");\n\t}\n\treturn Result.success(user);\n}", "CodeBleu_score": 27.0762018465949}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser adminUser = adminUserService.getById(userId);\n\tif (ObjectUtil.isNull(adminUser)) {\n\t\treturn Result.error(AdminCodeEnum.USER_NOT_FOUND);\n\t}\n\treturn Result.success(adminUser);\n}", "CodeBleu_score": 28.54402432770099}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser user = adminUserService.getById(userId);\n\tif (user == null) {\n\t\treturn Result.fail(AdminCodeEnum.USER_NOT_EXIST);\n\t}\n\treturn Result.success(user);\n}", "CodeBleu_score": 27.074584408346823}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t\t// TODO Auto-generated method stub\n\treturn Result.success();\n}", "CodeBleu_score": 5.1686625865712506}, {"code": " public Result readNotice() {\n\t\treturn Result.success();\n}", "CodeBleu_score": 5.168662586710375}, {"code": " public Result readNotice() {\n\t\tUserInfo userInfo = UserUtil.getUserInfo();\n\tif (ObjectUtil.isEmpty(userInfo)) {\n\t\treturn Result.error(AdminCodeEnum.NO_LOGIN);\n\t}\n\tAdminUserBO adminUserBO = adminUserService.getById(userInfo.getUserId());\n\tif (ObjectUtil.isEmpty(adminUserBO)) {\n\t\treturn Result.error(AdminCodeEnum.NO_LOGIN);\n\t}\n\tadminUserBO.setReadNotice(1);\n\tadminUserService.updateById(adminUserBO);\n\treturn Result.success();\n}", "CodeBleu_score": 25.81252905745056}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\t// 1. \u5148\u5224\u65ad\u662f\u5426\u5b58\u5728\n\tAdminConfig adminConfig = adminConfigMapper.selectOne(new QueryWrapper<AdminConfig>().eq(\"config_name\", \"companyInfo\"));\n\tif (adminConfig == null) {\n\t\t// 2. \u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\n\t\tadminConfig = new AdminConfig();\n\t\tadminConfig.setConfigName(\"companyInfo\");\n\t\tadminConfig.setConfigValue(\"{}\");\n\t\tadminConfig.setConfigType(AdminConst.CONFIG_TYPE_COMPANY_INFO);\n\t\tadminConfig.setConfigDesc(\"\u516c\u53f8\u4fe1\u606f\u914d\u7f6e\");\n\t\tadminConfig.setConfigSort(100);\n\t\tadminConfigMapper.insert(adminConfig);\n\t}\n\t// 3. \u66f4\u65b0\n\tadminConfig.setConfigValue(JSON.toJSONString(adminCompanyBO));\n\tadminConfigMapper.updateById(adminConfig);\n}", "CodeBleu_score": 53.368860408953836}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\t// 1. Get the company information from the companyInfo configuration.\n\tAdminConfig companyInfoConfig = adminConfigMapper.selectOne(new QueryWrapper<AdminConfig>().eq(\"name\", \"companyInfo\"));\n\t// 2. If the companyInfo configuration does not exist, create a new one with default values.\n\tif (companyInfoConfig == null) {\n\t\tcompanyInfoConfig = new AdminConfig();\n\t\tcompanyInfoConfig.setName(\"companyInfo\");\n\t\tcompanyInfoConfig.setValue(\"{}\");\n\t\tcompanyInfoConfig.setUpdateTime(System.currentTimeMillis());\n\t\tcompanyInfoConfig.setCreateTime(System.currentTimeMillis());\n\t\tcompanyInfoConfig.setConfigType(AdminConst.ADMIN_CONFIG_TYPE_CUSTOM);\n\t\tadminConfigMapper.insert(companyInfoConfig);\n\t}\n\t// 3. Update the company information in the companyInfo configuration.\n\tcompanyInfoConfig.setValue(JSON.toJSONString(adminCompanyBO));\n\t// 4. Save or update the companyInfo configuration.\n\tadminConfigMapper.updateById(companyInfoConfig);\n}", "CodeBleu_score": 44.6119250308054}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\t// 1. Get the existing configuration\n\tAdminConfig companyInfo = adminConfigMapper.selectOne(new QueryWrapper<AdminConfig>().eq(\"name\", \"companyInfo\"));\n\t// 2. If no existing configuration found, create a new one with default values\n\tif (companyInfo == null) {\n\t\tcompanyInfo = new AdminConfig();\n\t\tcompanyInfo.setName(\"companyInfo\");\n\t\tcompanyInfo.setConfigKey(\"companyInfo\");\n\t\tcompanyInfo.setConfigValue(\"{}\");\n\t\tcompanyInfo.setConfigDesc(\"\u516c\u53f8\u4fe1\u606f\");\n\t\tcompanyInfo.setConfigType(AdminCodeEnum.ADMIN_CONFIG_TYPE_SYSTEM.getCode());\n\t\tcompanyInfo.setConfigSort(100);\n\t\tadminConfigMapper.insert(companyInfo);\n\t}\n\t// 3. Update the configuration's value with the provided company information in JSON format\n\tcompanyInfo.setConfigValue(JSON.toJSONString(adminCompanyBO));\n\t// 4. Save or update the configuration\n\tadminConfigMapper.updateById(companyInfo);\n}", "CodeBleu_score": 43.997558583759044}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n\t//\u67e5\u8be2\u914d\u7f6e\n\tList<AdminConfig> adminConfigList = adminConfigMapper.selectList(new QueryWrapper<AdminConfig>().eq(\"company_id\", UserUtil.getCompanyId()));\n\tif (CollUtil.isNotEmpty(adminConfigList)) {\n\t\tfor (AdminConfig adminConfig : adminConfigList) {\n\t\t\tif (StrUtil.equals(AdminConst.ADMIN_CONFIG_KEY_COMPANY_NAME, adminConfig.getConfigKey())) {\n\t\t\t\tadminCompanyBO.setCompanyName(adminConfig.getConfigValue());\n\t\t\t} else if (StrUtil.equals(AdminConst.ADMIN_CONFIG_KEY_COMPANY_LOGO, adminConfig.getConfigKey())) {\n\t\t\t\tadminCompanyBO.setCompanyLogo(adminConfig.getConfigValue());\n\t\t\t} else if (StrUtil.equals(AdminConst.ADMIN_CONFIG_KEY_COMPANY_THEME, adminConfig.getConfigKey())) {\n\t\t\t\tadminCompanyBO.setCompanyTheme(adminConfig.getConfigValue());\n\t\t\t} else if (StrUtil.equals(AdminConst.ADMIN_CONFIG_KEY_COMPANY_THEME_COLOR, adminConfig.getConfigKey())) {\n\t\t\t\tadminCompanyBO.setCompanyThemeColor(adminConfig.getConfigValue());\n\t\t\t} else if (StrUtil.equals(AdminConst.ADMIN_CONFIG_KEY_COMPANY_THEME_COLOR_DARK, adminConfig.getConfigKey())) {\n\t\t\t\tadminCompanyBO.setCompanyThemeColorDark(adminConfig.getConfigValue());\n\t\t\t} else if (StrUtil.equals(AdminConst.ADMIN_CONFIG_KEY_COMPANY_THEME_COLOR_LIGHT, adminConfig.getConfigKey())) {\n\t\t\t\tadminCompanyBO.setCompanyThemeColorLight(adminConfig.getConfigValue());\n\t\t\t} else if (StrUtil.equals(AdminConst.ADMIN_CONFIG_KEY_COMPANY_THEME_COLOR_LIGHT_DARK, adminConfig.getConfigKey())) {\n\t\t\t\tadminCompanyBO.setCompanyThemeColorLightDark(adminConfig.getConfigValue());\n\t\t\t} else if (StrUtil.equals(AdminConst.ADMIN_CONFIG_KEY_COMPANY_THEME_COLOR_LIGHT_LIGHT, adminConfig.getConfigKey())) {\n\t\t\t\tadminCompanyBO.setCompanyThemeColorLightLight(adminConfig.getConfigValue());\n\t\t\t} else if (StrUtil.equals(Admin", "CodeBleu_score": 33.175867960218056}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n\tList<AdminConfig> adminConfigList = adminConfigMapper.selectList(new QueryWrapper<AdminConfig>().eq(\"company_id\", UserUtil.getCompanyId()));\n\tif (CollUtil.isNotEmpty(adminConfigList)) {\n\t\tfor (AdminConfig adminConfig : adminConfigList) {\n\t\t\tif (StrUtil.equals(adminConfig.getConfigKey(), AdminConst.ADMIN_CONFIG_KEY_COMPANY_NAME)) {\n\t\t\t\tadminCompanyBO.setCompanyName(adminConfig.getConfigValue());\n\t\t\t} else if (StrUtil.equals(adminConfig.getConfigKey(), AdminConst.ADMIN_CONFIG_KEY_COMPANY_LOGO)) {\n\t\t\t\tadminCompanyBO.setCompanyLogo(adminConfig.getConfigValue());\n\t\t\t} else if (StrUtil.equals(adminConfig.getConfigKey(), AdminConst.ADMIN_CONFIG_KEY_COMPANY_LOGO_COLOR)) {\n\t\t\t\tadminCompanyBO.setCompanyLogoColor(adminConfig.getConfigValue());\n\t\t\t} else if (StrUtil.equals(adminConfig.getConfigKey(), AdminConst.ADMIN_CONFIG_KEY_COMPANY_LOGO_TEXT)) {\n\t\t\t\tadminCompanyBO.setCompanyLogoText(adminConfig.getConfigValue());\n\t\t\t} else if (StrUtil.equals(adminConfig.getConfigKey(), AdminConst.ADMIN_CONFIG_KEY_COMPANY_LOGO_TEXT_COLOR)) {\n\t\t\t\tadminCompanyBO.setCompanyLogoTextColor(adminConfig.getConfigValue());\n\t\t\t} else if (StrUtil.equals(adminConfig.getConfigKey(), AdminConst.ADMIN_CONFIG_KEY_COMPANY_LOGO_TEXT_BACKGROUND_COLOR)) {\n\t\t\t\tadminCompanyBO.setCompanyLogoTextBackgroundColor(adminConfig.getConfigValue());\n\t\t\t} else if (StrUtil.equals(adminConfig.getConfigKey(), AdminConst.ADMIN_CONFIG_KEY_COMPANY_LOGO_TEXT_BACKGROUND_COLOR_HOVER)) {\n\t\t\t\tadminCompanyBO.setCompanyLogoTextBackgroundColorHover(adminConfig.getConfigValue());\n\t\t\t} else if (StrUtil.equals(adminConfig.getConfigKey(), AdminConst.ADMIN_CONFIG_KEY_COMPANY_LOGO_TEXT_BACKGROUND_COLOR_ACTIVE)) {\n\t\t\t\tadminCompanyBO.setCompanyLogoTextBackgroundColorActive(adminConfig.getConfigValue());\n\t\t\t", "CodeBleu_score": 32.532954367562525}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n\tList<AdminConfig> adminConfigList = adminConfigService.list(new QueryWrapper<AdminConfig>().eq(\"company_id\", BaseUtil.getCompanyId()).eq(\"status\", AdminCodeEnum.StatusEnum.ENABLE.getKey()));\n\tif (CollUtil.isNotEmpty(adminConfigList)) {\n\t\tadminConfigList.forEach(adminConfig -> {\n\t\t\tif (adminConfig.getKey().equals(AdminConst.ADMIN_CONFIG_KEY_COMPANY_NAME)) {\n\t\t\t\tadminCompanyBO.setCompanyName(adminConfig.getValue());\n\t\t\t} else if (adminConfig.getKey().equals(AdminConst.ADMIN_CONFIG_KEY_COMPANY_LOGO)) {\n\t\t\t\tadminCompanyBO.setCompanyLogo(adminConfig.getValue());\n\t\t\t} else if (adminConfig.getKey().equals(AdminConst.ADMIN_CONFIG_KEY_COMPANY_SLOGAN)) {\n\t\t\t\tadminCompanyBO.setCompanySlogan(adminConfig.getValue());\n\t\t\t} else if (adminConfig.getKey().equals(AdminConst.ADMIN_CONFIG_KEY_COMPANY_WELCOME_SPEECH)) {\n\t\t\t\tadminCompanyBO.setCompanyWelcomeSpeech(adminConfig.getValue());\n\t\t\t} else if (adminConfig.getKey().equals(AdminConst.ADMIN_CONFIG_KEY_COMPANY_WELCOME_SPEECH_PIC)) {\n\t\t\t\tadminCompanyBO.setCompanyWelcomeSpeechPic(adminConfig.getValue());\n\t\t\t} else if (adminConfig.getKey().equals(AdminConst.ADMIN_CONFIG_KEY_COMPANY_WELCOME_SPEECH_URL)) {\n\t\t\t\tadminCompanyBO.setCompanyWelcomeSpeechUrl(adminConfig.getValue());\n\t\t\t} else if (adminConfig.getKey().equals(AdminConst.ADMIN_CONFIG_KEY_COMPANY_WELCOME_SPEECH_VIDEO)) {\n\t\t\t\tadminCompanyBO.setCompanyWelcomeSpeechVideo(adminConfig.getValue());\n\t\t\t} else if (adminConfig.getKey().equals(AdminConst.ADMIN_CONFIG_KEY_COMPANY_WELCOME_SPEECH_VIDEO_PIC)) {\n\t\t\t\tadminCompanyBO.setCompanyWelcomeSpeechVideoPic(adminConfig.getValue());\n\t\t\t} else if (adminConfig.getKey().equals(AdminConst.ADMIN_CONFIG", "CodeBleu_score": 37.08414230600812}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t\tList<AdminConfig> adminConfigList = new ArrayList<>();\n\tfor (String str : stringList) {\n\t\tAdminConfig adminConfig = new AdminConfig();\n\t\tadminConfig.setConfigName(AdminConst.LOG_WELCOME_SPEECH);\n\t\tadminConfig.setConfigValue(str);\n\t\tadminConfig.setConfigType(AdminModuleEnum.LOG_WELCOME_SPEECH.getType());\n\t\tadminConfigList.add(adminConfig);\n\t}\n\tadminConfigMapper.delete(new QueryWrapper<AdminConfig>().eq(\"config_name\", AdminConst.LOG_WELCOME_SPEECH).eq(\"config_type\", AdminModuleEnum.LOG_WELCOME_SPEECH.getType()));\n\tadminConfigMapper.insertBatch(adminConfigList);\n}", "CodeBleu_score": 41.51554304011869}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t\tList<AdminConfig> adminConfigList = new ArrayList<>();\n\tfor (String str : stringList) {\n\t\tAdminConfig adminConfig = new AdminConfig();\n\t\tadminConfig.setConfigName(AdminConst.LOG_WELCOME_SPEECH);\n\t\tadminConfig.setConfigValue(str);\n\t\tadminConfig.setConfigType(AdminModuleEnum.LOG.getType());\n\t\tadminConfigList.add(adminConfig);\n\t}\n\tadminConfigMapper.delete(new QueryWrapper<AdminConfig>().eq(\"config_type\", AdminModuleEnum.LOG.getType()).eq(\"config_name\", AdminConst.LOG_WELCOME_SPEECH));\n\tadminConfigMapper.insertBatch(adminConfigList);\n}", "CodeBleu_score": 42.128848643669805}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t\tList<AdminConfig> list = new ArrayList<>();\n\tfor (String str : stringList) {\n\t\tAdminConfig config = new AdminConfig();\n\t\tconfig.setConfigKey(AdminConst.LOG_WELCOME_SPEECH);\n\t\tconfig.setConfigValue(str);\n\t\tlist.add(config);\n\t}\n\tadminConfigService.remove(new QueryWrapper<AdminConfig>().eq(\"config_key\", AdminConst.LOG_WELCOME_SPEECH));\n\tadminConfigService.saveBatch(list);\n}", "CodeBleu_score": 46.431794589196485}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tAdminUser adminUser = adminUserService.getOne(new QueryWrapper<AdminUser>().lambda().eq(AdminUser::getPhone, adminInitDataBO.getPhone()));\n\tif (adminUser == null) {\n\t\tthrow new CrmException(AdminCodeEnum.USER_NOT_EXIST);\n\t}\n\tif (!AuthPasswordUtil.verify(adminInitDataBO.getPassword(), adminUser.getPassword(), adminUser.getSalt())) {\n\t\tthrow new CrmException(AdminCodeEnum.PASSWORD_ERROR);\n\t}\n\treturn adminUser.getId();\n}", "CodeBleu_score": 29.678414420609567}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\t// 1. \u9a8c\u8bc1\u5bc6\u7801\u662f\u5426\u6b63\u786e\n\tAdminUser adminUser = adminUserService.getOne(new QueryWrapper<AdminUser>().eq(\"user_name\", adminInitDataBO.getUsername()).eq(\"status\", AdminCodeEnum.ADMIN_STATUS_VALID.getValue()));\n\tif (Objects.isNull(adminUser)) {\n\t\tthrow new CrmException(AdminCodeEnum.ADMIN_USERNAME_ERROR.getCode(), AdminCodeEnum.ADMIN_USERNAME_ERROR.getMsg());\n\t}\n\tif (!AuthPasswordUtil.check(adminInitDataBO.getPassword(), adminUser.getPassword(), adminUser.getSalt())) {\n\t\tthrow new CrmException(AdminCodeEnum.ADMIN_PASSWORD_ERROR.getCode(), AdminCodeEnum.ADMIN_PASSWORD_ERROR.getMsg());\n\t}\n\t// 2. \u9a8c\u8bc1\u7528\u6237\u72b6\u6001\n\tif (adminUser.getStatus()!= AdminCodeEnum.ADMIN_STATUS_VALID.getValue()) {\n\t\tthrow new CrmException(AdminCodeEnum.ADMIN_STATUS_INVALID.getCode(), AdminCodeEnum.ADMIN_STATUS_INVALID.getMsg());\n\t}\n\t// 3. \u9a8c\u8bc1\u7528\u6237\u662f\u5426\u88ab\u7981\u7528\n\tif (adminUser.getIsDisable() == AdminCodeEnum.ADMIN_DISABLE_YES.getValue()) {\n\t\tthrow new CrmException(AdminCodeEnum.ADMIN_STATUS_INVALID.getCode(), AdminCodeEnum.ADMIN_STATUS_INVALID.getMsg());\n\t}\n\t// 4. \u9a8c\u8bc1\u7528\u6237\u662f\u5426\u88ab\u5220\u9664\n\tif (adminUser.getIsDelete() == AdminCodeEnum.ADMIN_DELETE_YES.getValue()) {\n\t\tthrow new CrmException(AdminCodeEnum.ADMIN_STATUS_INVALID.getCode(), AdminCodeEnum.ADMIN_STATUS_INVALID.getMsg());\n\t}\n\t// 5. \u9a8c\u8bc1\u7528\u6237\u662f\u5426\u88ab\u9501\u5b9a\n\tif (adminUser.getIsLock() == AdminCodeEnum.ADMIN_LOCK_YES.getValue()) {\n\t\tthrow new CrmException(AdminCodeEnum.ADMIN_STATUS_INVALID.getCode(), AdminCodeEnum.ADMIN_STATUS_INVALID.getMsg());\n\t}\n\t// 6. \u9a8c\u8bc1\u7528\u6237\u662f\u5426\u88ab\u5220\u9664\n\tif (adminUser.getIsDelete() == AdminCodeEnum.ADMIN_DELETE_YES.getValue()) {\n\t\tthrow new CrmException(AdminCodeEnum.ADMIN_STATUS_INVALID.", "CodeBleu_score": 28.24157877502651}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\t// 1. Check if the username and password are provided. If not, throw an exception indicating an invalid username or password.\n\tif (StrUtil.isBlank(adminInitDataBO.getUsername()) || StrUtil.isBlank(adminInitDataBO.getPassword())) {\n\t\tthrow new CrmException(AdminCodeEnum.ADMIN_PASSWORD_ERROR.getCode());\n\t}\n\t// 2. Retrieve the current user ID and user details, including the username.\n\tAdminUser adminUser = adminUserMapper.selectOne(new QueryWrapper<AdminUser>().eq(\"username\", adminInitDataBO.getUsername()));\n\tif (adminUser == null) {\n\t\tthrow new CrmException(AdminCodeEnum.ADMIN_USER_NOT_EXIST.getCode());\n\t}\n\t// 3. Check the provided password against the stored password using the username and salt.\n\tString password = AuthPasswordUtil.getAuthPassword(adminInitDataBO.getPassword(), adminUser.getSalt());\n\tif (!Objects.equals(password, adminUser.getPassword())) {\n\t\tthrow new CrmException(AdminCodeEnum.ADMIN_PASSWORD_ERROR.getCode());\n\t}\n\t// 4. If the password is correct, generate a temporary access code, store it in Redis with a 10-minute expiration, and return the code.\n\tString code = RandomUtil.randomString(32);\n\tString key = AdminCacheKey.ADMIN_TOKEN.getKey(adminUser.getId());\n\tredisService.set(key, code, 600);\n\treturn code;\n}", "CodeBleu_score": 37.73291157793529}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\t\t//\u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7528\u6237\n\tAdminUser adminUser = UserUtil.getAdminUser();\n\t//\u5982\u679c\u5f53\u524d\u7528\u6237\u4e0d\u5b58\u5728\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\n\tif (adminUser == null) {\n\t\treturn false;\n\t}\n\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u89d2\u8272\u5217\u8868\n\tList<AdminUserRole> adminUserRoles = adminUserRoleService.list(new QueryWrapper<AdminUserRole>().eq(\"user_id\", adminUser.getId()));\n\t//\u5982\u679c\u5f53\u524d\u7528\u6237\u6ca1\u6709\u89d2\u8272\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\n\tif (CollUtil.isEmpty(adminUserRoles)) {\n\t\treturn false;\n\t}\n\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u89d2\u8272ID\u5217\u8868\n\tList<Long> roleIds = adminUserRoles.stream().map(AdminUserRole::getRoleId).collect(Collectors.toList());\n\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u83dc\u5355\u6743\u9650\n\tList<AdminAttention> adminAttentions = adminAttentionService.list(new QueryWrapper<AdminAttention>().in(\"role_id\", roleIds));\n\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u83dc\u5355\u6743\u9650URL\u5217\u8868\n\tList<String> attentionUrls = adminAttentions.stream().map(AdminAttention::getUrl).collect(Collectors.toList());\n\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u83dc\u5355\u6743\u9650ID\u5217\u8868\n\tList<Long> attentionIds = adminAttentions.stream().map(AdminAttention::getId).collect(Collectors.toList());\n\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u83dc\u5355\u6743\u9650\u6a21\u5757ID\u5217\u8868\n\tList<Long> attentionModuleIds = adminAttentions.stream().map(AdminAttention::getModuleId).collect(Collectors.toList());\n\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u83dc\u5355\u6743\u9650\u6a21\u5757\u5217\u8868\n\tList<AdminModuleEnum> moduleEnums = AdminModuleEnum.getEnums(attentionModuleIds);\n\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u83dc\u5355\u6743\u9650\u6a21\u5757URL\u5217\u8868\n\tList<String> attentionModuleUrls = moduleEnums.stream().map(AdminModuleEnum::getUrl).collect(Collectors.toList());\n\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u83dc\u5355\u6743\u9650\u6a21\u5757ID\u5217\u8868\n\tList<Long> attentionModuleIdsList = moduleEnums.stream().map(AdminModuleEnum::getId).collect(Collectors.toList());\n\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u83dc\u5355\u6743\u9650\u6a21\u5757\u5217\u8868\n\tList<AdminModuleEnum> moduleEnumsList = AdminModuleEnum.getEnums(attentionModuleIdsList);\n\t//\u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u83dc\u5355\u6743\u9650\u6a21\u5757\u540d\u79f0\u5217\u8868\n\tList<String> attentionModuleNames = moduleEnumsList.stream().map", "CodeBleu_score": 33.86022339599353}, {"code": "private boolean verifyInitAuth(){\n\t\t// \u83b7\u53d6\u5f53\u524d\u7528\u6237ID\n\tInteger userId = UserUtil.getUserId();\n\t// \u6784\u9020key\n\tString key = AdminCacheKey.INIT_AUTH_KEY.getKey() + userId;\n\t// \u4eceRedis\u4e2d\u83b7\u53d6\u672a\u6388\u6743\u83dc\u5355URL\u5217\u8868\n\tList<String> unAuthUrls = RedisUtil.getList(key, String.class);\n\t// \u5982\u679c\u672a\u6388\u6743\u83dc\u5355URL\u5217\u8868\u4e0d\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56detrue\uff0c\u8868\u793a\u672a\u6388\u6743\n\treturn CollUtil.isNotEmpty(unAuthUrls);\n}", "CodeBleu_score": 43.46535134504207}, {"code": "private boolean verifyInitAuth(){\n\t\t// \u83b7\u53d6\u5f53\u524d\u7528\u6237ID\n\tLong userId = UserUtil.getUserId();\n\t// \u6784\u9020key\n\tString key = AdminCacheKey.getInitAuthKey(userId);\n\t// \u4eceredis\u4e2d\u83b7\u53d6\u672a\u6388\u6743\u7684\u83dc\u5355URL\u5217\u8868\n\tList<String> unAuthUrls = RedisUtil.lGet(key, 0, -1);\n\t// \u5982\u679c\u672a\u6388\u6743\u7684\u83dc\u5355URL\u5217\u8868\u4e0d\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56detrue\uff0c\u8868\u793a\u672a\u6388\u6743\n\tif (CollUtil.isNotEmpty(unAuthUrls)) {\n\t\treturn true;\n\t}\n\t// \u5426\u5219\u8fd4\u56defalse\uff0c\u8868\u793a\u5df2\u6388\u6743\n\treturn false;\n}", "CodeBleu_score": 45.55468764372622}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tList<AdminRoleMenu> adminRoleMenuList = new ArrayList<>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n\t\tadminRoleMenu.setRoleId(roleId);\n\t\tadminRoleMenu.setMenuId(menuId);\n\t\tadminRoleMenuList.add(adminRoleMenu);\n\t}\n\tadminRoleMenuMapper.batchSave(adminRoleMenuList);\n}", "CodeBleu_score": 66.6557446041112}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tList<AdminRoleMenu> list = new ArrayList<>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n\t\tadminRoleMenu.setRoleId(roleId);\n\t\tadminRoleMenu.setMenuId(menuId);\n\t\tlist.add(adminRoleMenu);\n\t}\n\tadminRoleMenuMapper.saveBatch(list);\n}", "CodeBleu_score": 60.53683093394822}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tList<AdminRoleMenu> list = new ArrayList<>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n\t\tadminRoleMenu.setRoleId(roleId);\n\t\tadminRoleMenu.setMenuId(menuId);\n\t\tlist.add(adminRoleMenu);\n\t}\n\tadminRoleMenuMapper.saveBatch(list);\n}", "CodeBleu_score": 60.53683093394822}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\t\n}", "CodeBleu_score": 2.498932858752913}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t//    ThreadPoolTaskExecutor executor = SpringContextHolder.getBean(ThreadPoolTaskExecutor.class);\n//    executor.execute(() -> {\n//        try {\n//            RestHighLevelClient client = SpringContextHolder.getBean(RestHighLevelClient.class);\n//            IndexRequest request = new IndexRequest(\"sys_log\");\n//            Map<String, Object> map = BeanUtil.beanToMap(sysLog);\n//            map.put(\"createTime\", DateUtil.format(sysLog.getCreateTime(), \"yyyy-MM-dd HH:mm:ss\"));\n//            map.remove(\"id\");\n//            request.source(map, XContentType.JSON);\n//            IndexResponse response = client.index(request, RequestOptions.DEFAULT);\n//            log.info(\"Save sysLog success, id: {}\", response.getId());\n//        } catch (Exception e) {\n//            log.error(\"Save sysLog error, id: {}\", sysLog.getId(), e);\n//        }\n//    });\n}", "CodeBleu_score": 2.498932858752913}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t\n//    ThreadPoolTaskExecutor threadPoolTaskExecutor = new ThreadPoolTaskExecutor();\n//    threadPoolTaskExecutor.setCorePoolSize(10);\n//    threadPoolTaskExecutor.setMaxPoolSize(10);\n//    threadPoolTaskExecutor.setQueueCapacity(200);\n//    threadPoolTaskExecutor.setThreadNamePrefix(\"saveSysLog-\");\n//    threadPoolTaskExecutor.initialize();\n//    threadPoolTaskExecutor.execute(() -> {\n//        try {\n//            // Get the log index from the configuration file\n//            String indexName = \"sys_log\";\n//            // Convert the log object to a map\n//            Map<String, Object> logMap = BeanUtil.beanToMap(sysLog);\n//            // Format the creation time\n//            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n//            String creationTime = DateUtil.format(sysLog.getCreateTime(), formatter);\n//            logMap.put(\"creationTime\", creationTime);\n//            // Remove the ID\n//            logMap.remove(\"id\");\n//            // Create an index request\n//            IndexRequest indexRequest = new IndexRequest(indexName).source(logMap);\n//            // Submit the request to the Elasticsearch client\n//            IndexResponse indexResponse = restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n//            // Check if the index was created successfully\n//            if (indexResponse.getResult() == DocWriteResponse.Result.CREATED) {\n//                log.info(\"Log saved successfully: {}\", sysLog.getId());\n//            } else {\n//                log.error(\"Error saving log: {}\", sysLog.getId());\n//            }\n//        } catch (IOException e) {\n//            log.error(\"Error saving log: {}\", sysLog.getId(), e);\n//        }\n//    });\n\n}", "CodeBleu_score": 2.498932858752913}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t\n//    BasePage<SysLog> sysLogBasePage = new BasePage<>();", "CodeBleu_score": 2.165508175762377}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t//    BasePage<SysLog> page = new BasePage<>();\n//    List<SysLog> list = new ArrayList<>();\n//    try {\n//        // Initialize the search criteria and sort\n//        SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n//        searchSourceBuilder.query(QueryBuilders.matchAllQuery());\n//        searchSourceBuilder.sort(new FieldSortBuilder(\"createTime\").order(SortOrder.DESC));\n//        // Exclude specific fields from the response\n//        searchSourceBuilder.fetchSource(new String[]{}, new String[]{});\n//        // Set the page size and page number\n//        searchSourceBuilder.from(querySysLogBO.getPageNum());\n//        searchSourceBuilder.size(querySysLogBO.getPageSize());\n//        // Execute the search request\n//        SearchRequest searchRequest = new SearchRequest(SysLog.ES_INDEX_NAME);\n//        searchRequest.types(SysLog.ES_INDEX_TYPE);\n//        searchRequest.source(searchSourceBuilder);\n//        SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n//        // Get the search hits and total hits\n//        SearchHits searchHits = searchResponse.getHits();\n//        long totalHits = searchHits.getTotalHits().value;\n//        // Map the search results to SysLog objects\n//        for (SearchHit searchHit : searchHits) {\n//            Map<String, Object> sourceAsMap = searchHit.getSourceAsMap();\n//            SysLog sysLog = BeanUtil.mapToBean(sourceAsMap, SysLog.class);\n//            list.add(sysLog);\n//        }\n//        // Populate the BasePage object\n//        page.setList(list);\n//        page.setTotal(totalHits);\n//        page.setPageNum(querySysLogBO.getPageNum());\n//        page.setPageSize(querySysLogBO.getPageSize());\n//    } catch (IOException e) {\n//        log.error(\"Query system log error: {}\", e.getMessage());\n//    }\n//    return page;\n    return null;\n}", "CodeBleu_score": 2.2430060935813474}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t\tBasePage<SysLog> page = new BasePage<>();\n\t// Create a SearchRequest object to perform the search\n\tSearchRequest searchRequest = new SearchRequest(\"admin_log\");\n\t// Create a SearchSourceBuilder object to build the search criteria\n\tSearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n\t// Add the query to the search criteria\n\tBoolQueryBuilder queryBuilder = QueryBuilders.boolQuery();\n\tif (StrUtil.isNotBlank(querySysLogBO.getKeyword())) {\n\t\tqueryBuilder.must(QueryBuilders.multiMatchQuery(querySysLogBO.getKeyword(), \"userName\", \"operation\", \"method\", \"params\", \"ip\"));\n\t}\n\tif (querySysLogBO.getStartTime()!= null) {\n\t\tqueryBuilder.must(QueryBuilders.rangeQuery(\"createTime\").gte(querySysLogBO.getStartTime()));\n\t}\n\tif (querySysLogBO.getEndTime()!= null) {\n\t\tqueryBuilder.must(QueryBuilders.rangeQuery(\"createTime\").lte(querySysLogBO.getEndTime()));\n\t}\n\t// Add the query to the search criteria\n\tsearchSourceBuilder.query(queryBuilder);\n\t// Add the sort criteria to the search criteria\n\tsearchSourceBuilder.sort(\"createTime\", SortOrder.DESC);\n\t// Add the pagination criteria to the search criteria\n\tsearchSourceBuilder.from(querySysLogBO.getPageNum() - 1);\n\tsearchSourceBuilder.size(querySysLogBO.getPageSize());\n\t// Add the search criteria to the SearchRequest\n\tsearchRequest.source(searchSourceBuilder);\n\t// Execute the search request\n\tSearchResponse searchResponse;\n\ttry {\n\t\tsearchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n\t} catch (IOException e) {\n\t\tlog.error(\"Elasticsearch query failed\", e);\n\t\treturn page;\n\t}\n\t// Get the search hits and total hits\n\tSearchHits hits = searchResponse.getHits();\n\tlong totalHits = hits.getTotalHits().value;\n\t// Map the search hits to SysLog objects\n\tList<SysLog> sysLogs = new ArrayList<>();\n\tfor (SearchHit hit : hits.getHits()) {\n\t\tSysLog sysLog = new SysLog();\n\t\tMap<String", "CodeBleu_score": 50.40249968794777}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\t\thttps.get(url, response => {\n\t\t\tresponse.pipe(file);\n\t\t\tfile.on('finish', () => {\n\t\t\t\tfile.close();\n\t\t\t\tresolve();\n\t\t\t});\n\t\t}).on('error', err => {\n\t\t\tfs.unlink(dest);\n\t\t\treject(err.message);\n\t\t});\n\t});\n}", "CodeBleu_score": 50.88961930397788}, {"code": "async function downloadFile(url, dest){\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\t\thttps.get(url, response => {\n\t\t\tresponse.pipe(file);\n\t\t\tfile.on('finish', () => {\n\t\t\t\tfile.close();\n\t\t\t\tresolve();\n\t\t\t});\n\t\t});\n\t\tfile.on('error', err => {\n\t\t\tfs.unlink(dest, () => {\n\t\t\t\treject(err);\n\t\t\t});\n\t\t});\n\t});\n}", "CodeBleu_score": 51.55664116115081}, {"code": "async function downloadFile(url, dest){\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\t\thttps.get(url, response => {\n\t\t\tresponse.pipe(file);\n\t\t\tfile.on('finish', () => {\n\t\t\t\tfile.close(() => {\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t\t});\n\t\t}).on('error', error => {\n\t\t\tfs.unlink(dest, () => {\n\t\t\t\treject(error);\n\t\t\t});\n\t\t});\n\t});\n}", "CodeBleu_score": 56.62277957471089}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t\tif (circularDependencyCheckSet.contains(module.getId())) {\n\t\tlog.warn(\"Circular dependency detected for module {}. Skipping.\", module.getId());\n\t\treturn Flux.empty();\n\t}\n\tcircularDependencyCheckSet.add(module.getId());\n\treturn getDependentModulesFromDsl(module.getDsl())\n\t\t\t.flatMap(dependentModule -> {\n\t\t\t\tif (dependentModule.isPresent()) {\n\t\t\t\t\treturn getDependentModules(dependentModule.get(), circularDependencyCheckSet);\n\t\t\t\t}\n\t\t\t\treturn Flux.just(module);\n\t\t\t});\n}", "CodeBleu_score": 47.74814156159134}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t\tlog.info(\"Retrieving dependent modules for module with ID {}\", module.getId());\n\tSet<String> newCircularDependencyCheckSet = Sets.newHashSet(circularDependencyCheckSet);\n\tnewCircularDependencyCheckSet.add(module.getId());\n\tList<Application> dependentModules = getDependentModulesFromDsl(module.getDsl(), circularDependencyCheckSet);\n\treturn Flux.fromIterable(dependentModules).flatMap(m -> getDependentModules(m, newCircularDependencyCheckSet));\n}", "CodeBleu_score": 48.36159235693487}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t\treturn getDependentModulesFromDsl(module, circularDependencyCheckSet)\n\t\t\t.flatMap(dependentModule -> {\n\t\t\t\tif (circularDependencyCheckSet.contains(dependentModule.getId())) {\n\t\t\t\t\tlog.warn(\"Circular dependency detected while processing dependent modules for application {}\", module.getId());\n\t\t\t\t\treturn Mono.empty();\n\t\t\t\t}\n\t\t\t\tcircularDependencyCheckSet.add(dependentModule.getId());\n\t\t\t\treturn getDependentModules(dependentModule, circularDependencyCheckSet);\n\t\t\t})\n\t\t\t.concatWith(Flux.just(module));\n}", "CodeBleu_score": 47.54168951137373}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tfor (Map.Entry<?,?> entry : map.entrySet()) {\n\t\tObject value = entry.getValue();\n\t\tif (value instanceof Map) {\n\t\t\tdoGetDependentModules((Map<?,?>) value, dependentModuleIds);\n\t\t} else if (value instanceof List) {\n\t\t\tfor (Object item : (List<?>) value) {\n\t\t\t\tif (item instanceof Map) {\n\t\t\t\t\tdoGetDependentModules((Map<?,?>) item, dependentModuleIds);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (value instanceof String) {\n\t\t\tString componentType = (String) entry.getKey();\n\t\t\tif (StringUtils.equals(\"module\", componentType)) {\n\t\t\t\tString appId = (String) value;\n\t\t\t\tif (StringUtils.isNotBlank(appId)) {\n\t\t\t\t\tdependentModuleIds.add(appId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 37.3171582761585}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tif (map!= null) {\n\t\tSet<String> moduleIds = Sets.newHashSet();\n\t\tfor (Map.Entry<?,?> entry : map.entrySet()) {\n\t\t\tObject value = entry.getValue();\n\t\t\tif (value instanceof Map) {\n\t\t\t\tdoGetDependentModules((Map<?,?>)value, dependentModuleIds);\n\t\t\t}\n\t\t\telse if (value instanceof List) {\n\t\t\t\tList<?> list = (List<?>)value;\n\t\t\t\tfor (Object o : list) {\n\t\t\t\t\tif (o instanceof Map) {\n\t\t\t\t\t\tdoGetDependentModules((Map<?,?>)o, dependentModuleIds);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (value instanceof String) {\n\t\t\t\tString valueStr = (String)value;\n\t\t\t\tif (StringUtils.isNotBlank(valueStr) && valueStr.startsWith(\"module:\")) {\n\t\t\t\t\tmoduleIds.add(valueStr);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!moduleIds.isEmpty()) {\n\t\t\tdependentModuleIds.addAll(moduleIds);\n\t\t}\n\t}\n}", "CodeBleu_score": 36.76947929281689}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tif (map!= null) {\n\t\tfor (Map.Entry<?,?> entry : map.entrySet()) {\n\t\t\tObject value = entry.getValue();\n\t\t\tif (value instanceof Map) {\n\t\t\t\tdoGetDependentModules((Map<?,?>) value, dependentModuleIds);\n\t\t\t} else if (value instanceof List) {\n\t\t\t\tfor (Object item : (List<?>) value) {\n\t\t\t\t\tif (item instanceof Map) {\n\t\t\t\t\t\tdoGetDependentModules((Map<?,?>) item, dependentModuleIds);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (entry.getKey().equals(\"type\") && value instanceof String) {\n\t\t\t\tString type = (String) value;\n\t\t\t\tif (StringUtils.equals(\"module\", type)) {\n\t\t\t\t\tString appId = (String) map.get(\"appId\");\n\t\t\t\t\tif (StringUtils.isNotBlank(appId)) {\n\t\t\t\t\t\tdependentModuleIds.add(appId);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 41.277202668956114}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t\tlog.info(\"createAsset\");\n\t// Read the image data from the DataBuffer.\n\tbyte[] bytes = DataBufferUtils.readAsBytes(dataBuffer);\n\t// Create a BufferedImage from the image data.\n\tBufferedImage srcImage = ImageIO.read(new ByteArrayInputStream(bytes));\n\t// If the createThumbnail flag is true, resize the image.\n\tif (createThumbnail) {\n\t\tint thumbnailWidth = 100;\n\t\tint thumbnailHeight = 100;\n\t\tBufferedImage thumbnailImage = new BufferedImage(thumbnailWidth, thumbnailHeight, BufferedImage.TYPE_INT_RGB);\n\t\tGraphics2D thumbnailGraphics = thumbnailImage.createGraphics();\n\t\tthumbnailGraphics.drawImage(srcImage, 0, 0, thumbnailWidth, thumbnailHeight, null);\n\t\tthumbnailGraphics.dispose();\n\t\t// Convert the resized image to a byte array.\n\t\tByteArrayOutputStream thumbnailOutputStream = new ByteArrayOutputStream();\n\t\tImageIO.write(thumbnailImage, \"jpg\", thumbnailOutputStream);\n\t\tbyte[] thumbnailBytes = thumbnailOutputStream.toByteArray();\n\t\t// Create a new DataBuffer with the resized image data.\n\t\tDataBuffer thumbnailDataBuffer = new DefaultDataBufferFactory().wrap(thumbnailBytes);\n\t\t// Release the original DataBuffer.\n\t\tDataBufferUtils.release(dataBuffer);\n\t\t// Return the new Asset with the resized image data and content type.\n\t\treturn new Asset(thumbnailDataBuffer, \"image/jpeg\");\n\t}\n\t// If the createThumbnail flag is false, retain the original content type.\n\t// Return the new Asset with the original image data and content type.\n\treturn new Asset(dataBuffer, srcContentType.toString());\n}", "CodeBleu_score": 36.47129194637758}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t\t// Read the image data from the DataBuffer\n\tbyte[] imageData = DataBufferUtils.releaseAndReadBytes(dataBuffer);\n\n\t// Convert the image data to a BufferedImage\n\tBufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(imageData));\n\n\t// Create a new BufferedImage to store the resized image\n\tBufferedImage resizedImage = null;\n\n\t// Resize the image if createThumbnail is true\n\tif (createThumbnail) {\n\t\tint width = 100;\n\t\tint height = 100;\n\t\tresizedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n\t\tGraphics2D graphics = resizedImage.createGraphics();\n\t\tgraphics.setComposite(AlphaComposite.Src);\n\t\tgraphics.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);\n\t\tgraphics.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);\n\t\tgraphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n\t\tgraphics.drawImage(bufferedImage, 0, 0, width, height, null);\n\t\tgraphics.dispose();\n\t}\n\n\t// Create a new ByteArrayOutputStream to store the resized image data\n\tByteArrayOutputStream resizedImageDataStream = new ByteArrayOutputStream();\n\n\t// Write the resized image data to the ByteArrayOutputStream\n\tImageIO.write(resizedImage!= null? resizedImage : bufferedImage, \"jpg\", resizedImageDataStream);\n\n\t// Convert the resized image data to a DataBuffer\n\tDataBuffer resizedImageData = new DefaultDataBufferFactory().wrap(resizedImageDataStream.toByteArray());\n\n\t// Create a new Asset object with the resized image data and content type\n\tAsset asset = new Asset();\n\tasset.setData(resizedImageData);\n\tasset.setContentType(srcContentType.toString());\n\n\t// Release the resized image data buffer\n\tDataBufferUtils.release(resizedImageData);\n\n\treturn asset;\n}", "CodeBleu_score": 35.86693063670967}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t\t// Create a new Asset object\n\tAsset asset = new Asset();\n\n\t// Read the image data from the DataBuffer\n\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\tDataBufferUtils.write(dataBuffer, baos, dataBuffer.readableByteCount());\n\tbyte[] imageData = baos.toByteArray();\n\n\t// Decode the image data into a BufferedImage object\n\tBufferedImage bufferedImage = ImageIO.read(new ByteArrayInputStream(imageData));\n\n\t// Create a thumbnail if createThumbnail is true\n\tif (createThumbnail) {\n\t\t// Resize the image to a thumbnail size\n\t\tint thumbnailWidth = 100;\n\t\tint thumbnailHeight = 100;\n\t\tBufferedImage thumbnailImage = new BufferedImage(thumbnailWidth, thumbnailHeight, BufferedImage.TYPE_INT_RGB);\n\t\tGraphics2D graphics = thumbnailImage.createGraphics();\n\t\tgraphics.drawImage(bufferedImage, 0, 0, thumbnailWidth, thumbnailHeight, null);\n\t\tgraphics.dispose();\n\n\t\t// Encode the thumbnail image as JPEG data\n\t\tByteArrayOutputStream thumbnailOutputStream = new ByteArrayOutputStream();\n\t\tImageIO.write(thumbnailImage, \"jpg\", thumbnailOutputStream);\n\t\tbyte[] thumbnailData = thumbnailOutputStream.toByteArray();\n\n\t\t// Set the thumbnail data and content type in the Asset\n\t\tasset.setThumbnailData(thumbnailData);\n\t\tasset.setThumbnailContentType(MediaType.IMAGE_JPEG);\n\t}\n\n\t// Set the original image data and content type in the Asset\n\tasset.setOriginalData(imageData);\n\tasset.setOriginalContentType(srcContentType);\n\n\t// Release the DataBuffer\n\tDataBufferUtils.release(dataBuffer);\n\n\t// Return the Asset\n\treturn asset;\n}", "CodeBleu_score": 35.19913431939423}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn Mono.fromCallable(() -> {\n\t\t// Get the asset from the database by its ID\n\t\tAsset asset = assetService.getAsset(assetId);\n\n\t\t// Get the image data from the asset\n\t\tbyte[] imageData = asset.getData();\n\n\t\t// Create a data buffer factory\n\t\tDefaultDataBufferFactory dataBufferFactory = new DefaultDataBufferFactory();\n\n\t\t// Create a data buffer from the image data\n\t\tDataBuffer imageBuffer = dataBufferFactory.allocateBuffer(imageData.length);\n\t\timageBuffer.write(imageData);\n\n\t\t// Create a server HTTP response\n\t\tServerHttpResponse response = exchange.getResponse();\n\n\t\t// Set the response status to OK\n\t\tresponse.setStatusCode(HttpStatus.OK);\n\n\t\t// Set the content type header if available\n\t\tif (asset.getContentType()!= null) {\n\t\t\tresponse.getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n\t\t}\n\n\t\t// Write the image data to the response\n\t\tresponse.writeWith(Flux.just(imageBuffer));\n\n\t\t// Return a void mono\n\t\treturn Mono.empty();\n\t});\n}", "CodeBleu_score": 47.22921486822415}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn Mono.just(exchange)\n\t\t\t.map(ServerWebExchange::getRequest)\n\t\t\t.flatMap(request -> Mono.just(request)\n\t\t\t\t\t.map(ServerHttpRequest::getHeaders)\n\t\t\t\t\t.map(headers -> headers.get(\"Authorization\"))\n\t\t\t\t\t.map(auth -> auth.get(0))\n\t\t\t\t\t.map(auth -> auth.substring(auth.indexOf(\" \") + 1))\n\t\t\t\t\t.map(auth -> auth.substring(auth.indexOf(\":\") + 1))\n\t\t\t\t\t.map(auth -> auth.substring(auth.indexOf(\":\") + 1))\n\t\t\t\t\t.map(auth -> auth.substring(auth.indexOf(\":\") + 1))\n\t\t\t\t\t.map(auth -> auth.substring(auth.indexOf(\":\") + 1))\n\t\t\t\t\t.map(auth -> auth.substring(auth.indexOf(\":\") + 1))\n\t\t\t\t\t.map(auth -> auth.substring(auth.indexOf(\":\") + 1))\n\t\t\t\t\t.map(auth -> auth.substring(auth.indexOf(\":\") + 1))\n\t\t\t\t\t.map(auth -> auth.substring(auth.indexOf(\":\") + 1))\n\t\t\t\t\t.map(auth -> auth.substring(auth.indexOf(\":\") + 1))\n\t\t\t\t\t.map(auth -> auth.substring(auth.indexOf(\":\") + 1))\n\t\t\t\t\t.map(auth -> auth.substring(auth.indexOf(\":\") + 1))\n\t\t\t\t\t.map(auth -> auth.substring(auth.indexOf(\":\") + 1))\n\t\t\t\t\t.map(auth -> auth.substring(auth.indexOf(\":\") + 1))\n\t\t\t\t\t.map(auth -> auth.substring(auth.indexOf(\":\") + 1))\n\t\t\t\t\t.map(auth -> auth.substring(auth.indexOf(\":\") + 1))\n\t\t\t\t\t.map(auth -> auth.substring(auth.indexOf(\":\") + 1))\n\t\t\t\t\t.map(auth -> auth.substring(auth.indexOf(\":\") + 1))\n\t\t\t\t\t.map(auth -> auth.substring(auth.indexOf(\":\") + 1))\n\t\t\t\t\t.map(auth -> auth.substring(auth.indexOf(\":\") + 1))\n\t\t\t\t\t.map(auth -> auth.substring(auth.indexOf(\":\") + 1))\n\t\t\t\t\t.map(auth -> auth.substring(auth.indexOf(\":\") + 1))\n\t\t\t\t\t.map", "CodeBleu_score": 20.401035629886536}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn Mono.fromCallable(() -> {\n\t\tAsset asset = assetService.getAsset(assetId);\n\t\tif (asset == null) {\n\t\t\tthrow new BizException(BizError.ASSET_NOT_FOUND, \"Asset not found\");\n\t\t}\n\t\tServerHttpResponse response = exchange.getResponse();\n\t\tresponse.setStatusCode(HttpStatus.OK);\n\t\tif (asset.getContentType()!= null) {\n\t\t\tresponse.getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n\t\t}\n\t\tbyte[] data = asset.getData();\n\t\tDataBufferFactory bufferFactory = new DefaultDataBufferFactory();\n\t\tDataBuffer buffer = bufferFactory.allocateBuffer(data.length);\n\t\tbuffer.write(data);\n\t\treturn buffer;\n\t}).flatMap(buffer -> {\n\t\treturn DataBufferUtils.write(buffer, exchange.getResponse().getBody(), buffer.readableByteCount());\n\t}).then();\n}", "CodeBleu_score": 45.91691743098315}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\tif (workspaceMode == WorkspaceMode.SAAS) {\n\t\treturn Flux.empty();\n\t}\n\treturn organizationService.findAllForEnterpriseMode()\n\t\t.map(organization -> {\n\t\t\tFindAuthConfig findAuthConfig = new FindAuthConfig();\n\t\t\tfindAuthConfig.setOrganizationId(organization.getId());\n\t\t\tfindAuthConfig.setOrganizationName(organization.getName());\n\t\t\tfindAuthConfig.setOrganizationLogoUrl(organization.getLogoUrl());\n\t\t\tfindAuthConfig.setOrganizationMode(organization.getMode());\n\t\t\tfindAuthConfig.setOrganizationStatus(organization.getStatus());\n\t\t\tfindAuthConfig.setOrganizationType(organization.getType());\n\t\t\tfindAuthConfig.setOrganizationCreatedDate(organization.getCreatedDate());\n\t\t\tfindAuthConfig.setOrganizationUpdatedDate(organization.getUpdatedDate());\n\t\t\tfindAuthConfig.setOrganizationCreatedById(organization.getCreatedById());\n\t\t\tfindAuthConfig.setOrganizationUpdatedById(organization.getUpdatedById());\n\t\t\tfindAuthConfig.setOrganizationDeleted(organization.isDeleted());\n\t\t\tfindAuthConfig.setOrganizationDeletedById(organization.getDeletedById());\n\t\t\tfindAuthConfig.setOrganizationDeletedDate(organization.getDeletedDate());\n\t\t\tfindAuthConfig.setOrganizationDeletedReason(organization.getDeletedReason());\n\t\t\tfindAuthConfig.setOrganizationDeletedBy(organization.getDeletedBy());\n\t\t\tfindAuthConfig.setOrganizationDeletedByEmail(organization.getDeletedByEmail());\n\t\t\tfindAuthConfig.setOrganizationDeletedByPhone(organization.getDeletedByPhone());\n\t\t\tfindAuthConfig.setOrganizationDeletedByUsername(organization.getDeletedByUsername());\n\t\t\tfindAuthConfig.setOrganizationDeletedByDisplayName(organization.getDeletedByDisplayName());\n\t\t\tfindAuthConfig.setOrganizationDeletedByAvatarUrl(organization.getDeletedByAvatarUrl());\n\t\t\tfindAuthConfig.setOrganizationDeletedByAvatarUrlThumbnail(organization.getDeletedByAvatarUrlThumbnail());\n\t\t\tfindAuthConfig.setOrganizationDeletedByAvatarUrlThumbnail2x(organization.getDeletedByAvatarUrlThumbnail2x());\n\t\t\tfindAuthConfig.setOrganizationDeletedByAvatarUrlThumbnail3x(organization.getDeletedByAvatarUrlThumbnail3x());\n\t\t\tfindAuthConfig.setOrganizationDeletedByAvatarUrlThumbnail4x(organization.getDeletedByAvatarUrlThumbnail4x());\n\t\t\tfindAuthConfig.setOrganizationDeletedByAvatarUrlThumbnail5x(", "CodeBleu_score": 23.863526294020478}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\tif (workspaceMode == WorkspaceMode.SAAS) {\n\t\treturn Flux.empty();\n\t}\n\treturn organizationService.findAllByMode(WorkspaceMode.ENTERPRISE)\n\t\t.flatMap(organization -> Flux.fromIterable(organization.getAuthConfigs())\n\t\t\t.map(authConfig -> new FindAuthConfig(organization.getId(), authConfig.getProvider(), authConfig.getProviderConfig()))\n\t\t\t.filter(Objects::nonNull));\n}", "CodeBleu_score": 33.065349258825584}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\tif (workspaceMode == WorkspaceMode.SAAS) {\n\t\treturn Flux.empty();\n\t}\n\n\treturn organizationService.findAll()\n\t\t.flatMap(org -> Mono.justOrEmpty(org.getAuthConfig()))\n\t\t.filter(Objects::nonNull)\n\t\t.map(AbstractAuthConfig::getFindAuthConfig)\n\t\t.collect(Collectors.toUnmodifiableList());\n}", "CodeBleu_score": 29.08332568723995}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\treturn MongockSpring5.builder()\n\t\t.setDriver(new SpringDataMongoV3Driver(mongoTemplate))\n\t\t.setScanPackage(\"com.openblocks.sdk.config\")\n\t\t.setSpringApplicationContext(springContext)\n\t\t.build();\n}", "CodeBleu_score": 17.919856379672126}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\treturn MongockSpring5.builder()\n\t\t\t.setSpringApplicationContext(springContext)\n\t\t\t.setMongoTemplate(mongoTemplate)\n\t\t\t.setChangeLogsScanPackage(\"com.openblocks.sdk.db.migration\")\n\t\t\t.setDriver(new SpringDataMongoV3Driver(mongoTemplate))\n\t\t\t.build();\n}", "CodeBleu_score": 26.94259175022556}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\treturn MongockSpring5.builder()\n\t\t\t.setSpringApplicationContext(springContext)\n\t\t\t.setMongoTemplate(mongoTemplate)\n\t\t\t.setChangeLogsScanPackage(\"com.openblocks.sdk.migrations\")\n\t\t\t.setLockQuickConfig()\n\t\t\t.setDriver(new SpringDataMongoV3Driver(mongoTemplate))\n\t\t\t.build();\n}", "CodeBleu_score": 27.84853916351626}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\treturn new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n}", "CodeBleu_score": 26.11799355653882}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\tReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\treactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\treturn reactiveMongoTemplate;\n}", "CodeBleu_score": 76.68946433531822}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\tReactiveMongoTemplate mongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\tmongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\treturn mongoTemplate;\n}", "CodeBleu_score": 96.37604361944668}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t\treturn Mono.defer(() -> {\n\t\treturn getLiveDSLByLibraryQueryId(libraryQueryId, true);\n\t});\n}", "CodeBleu_score": 17.102993229741248}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t\treturn Mono.defer(() -> {\n\t\treturn libraryQueryRepository.getLatestLibraryQueryRecordByLibraryQueryId(libraryQueryId)\n\t\t\t\t.switchIfEmpty(Mono.defer(() -> {\n\t\t\t\t\treturn libraryQueryRepository.findById(libraryQueryId)\n\t\t\t\t\t\t\t.switchIfEmpty(Mono.error(LIBRARY_QUERY_NOT_FOUND))\n\t\t\t\t\t\t\t.map(LibraryQuery::getDsl);\n\t\t\t\t}))\n\t\t\t\t.map(LibraryQueryRecord::getDsl)\n\t\t\t\t.map(dsl -> {\n\t\t\t\t\treturn DSL.parse(dsl);\n\t\t\t\t});\n\t});\n}", "CodeBleu_score": 50.494464189067244}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t\treturn getLibraryQueryRecordByLibraryQueryId(libraryQueryId)\n\t\t.switchIfEmpty(getLibraryQueryById(libraryQueryId))\n\t\t.map(LibraryQueryRecord::getDsl)\n\t\t.map(dsl -> {\n\t\t\ttry {\n\t\t\t\treturn DSL.parse(dsl);\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow deferredError(LIBRARY_QUERY_NOT_FOUND, e);\n\t\t\t}\n\t\t})\n\t\t.map(DSL::toMap);\n}", "CodeBleu_score": 50.68081723247752}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t\tlog.debug(\"Executing query on datasource: {}\", datasource.getName());\n\tQueryExecutionContext queryExecutionContext = queryVisitorContext.getQueryExecutionContext();\n\ttry {\n\t\tDatasourceConnectionHolder connectionHolder = getConnectionHolder(datasource);\n\t\tDatasourcePluginClient datasourcePluginClient = getDatasourcePluginClient(connectionHolder);\n\t\tDatasourceMetaInfoService datasourceMetaInfoService = getDatasourceMetaInfoService(connectionHolder);\n\t\treturn Mono.fromCallable(() -> {\n\t\t\tDuration timeout = QueryTimeoutUtils.parseTimeout(timeoutStr, datasourcePluginClient.getDefaultTimeout());\n\t\t\treturn datasourcePluginClient.executeQuery(datasource, queryConfig, requestParams, timeout);\n\t\t}).onErrorResume(ex -> {\n\t\t\tif (ex instanceof TimeoutException) {\n\t\t\t\treturn Mono.just(QueryExecutionResult.builder().error(ofException(QUERY_EXECUTION_TIMEOUT, ex)).build());\n\t\t\t} else if (ex instanceof PluginException) {\n\t\t\t\tPluginException pluginException = (PluginException) ex;\n\t\t\t\tif (pluginException.getErrorCode() == QUERY_EXECUTION_ERROR) {\n\t\t\t\t\treturn Mono.just(QueryExecutionResult.builder().error(ofException(QUERY_EXECUTION_ERROR, ex)).build());\n\t\t\t\t}\n\t\t\t\treturn Mono.just(QueryExecutionResult.builder().error(ex).build());\n\t\t\t} else {\n\t\t\t\tlog.error(\"Error executing query on datasource: {}\", datasource.getName(), ex);\n\t\t\t\treturn Mono.just(QueryExecutionResult.builder().error(ofException(QUERY_EXECUTION_ERROR, ex)).build());\n\t\t\t}\n\t\t});\n\t} catch (BizException ex) {\n\t\tlog.error(\"Error executing query on datasource: {}\", datasource.getName(), ex);\n\t\treturn Mono.just(QueryExecutionResult.builder().error(ex).build());\n\t}\n}", "CodeBleu_score": 37.269861896665276}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t\tlog.debug(\"Executing query on datasource {} with config {}\", datasource.getName(), queryConfig);\n\ttry {\n\t\tQueryExecutionContext queryExecutionContext = new QueryExecutionContext(datasource, queryConfig, requestParams);\n\t\tDatasourceConnectionHolder connectionHolder = DatasourceConnectionPool.get(datasource);\n\t\tDatasourcePluginClient datasourcePluginClient = DatasourceMetaInfoService.getDatasourcePluginClient(datasource);\n\t\tDuration timeoutDuration = QueryTimeoutUtils.getTimeoutDuration(timeoutStr);\n\t\treturn datasourcePluginClient.executeQuery(connectionHolder, queryExecutionContext, queryVisitorContext, timeoutDuration)\n\t\t\t\t.onErrorResume(ex -> {\n\t\t\t\t\tif (ex instanceof TimeoutException) {\n\t\t\t\t\t\tlog.debug(\"Query execution timed out for query {}\", queryExecutionContext);\n\t\t\t\t\t\treturn Mono.just(new QueryExecutionResult(QUERY_EXECUTION_TIMEOUT.getCode(), QUERY_EXECUTION_TIMEOUT.getMessage()));\n\t\t\t\t\t} else if (ex instanceof PluginException) {\n\t\t\t\t\t\tlog.debug(\"Query execution failed for query {}\", queryExecutionContext, ex);\n\t\t\t\t\t\treturn Mono.just(new QueryExecutionResult(ex.getCode(), ex.getMessage()));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlog.error(\"Query execution failed for query {}\", queryExecutionContext, ex);\n\t\t\t\t\t\treturn Mono.just(new QueryExecutionResult(QUERY_EXECUTION_ERROR.getCode(), QUERY_EXECUTION_ERROR.getMessage()));\n\t\t\t\t\t}\n\t\t\t\t});\n\t} catch (Exception ex) {\n\t\tlog.error(\"Query execution failed for query {}\", queryExecutionContext, ex);\n\t\treturn Mono.just(new QueryExecutionResult(QUERY_EXECUTION_ERROR.getCode(), QUERY_EXECUTION_ERROR.getMessage()));\n\t}\n}", "CodeBleu_score": 36.94364605523926}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t\tlog.info(\"Executing query on datasource {} with config {} and request params {}\", datasource.getId(), queryConfig, requestParams);\n\tDatasourceConnectionHolder connectionHolder = DatasourceConnectionPool.getDatasourceConnection(datasource);\n\tif (connectionHolder == null) {\n\t\treturn Mono.error(ofException(QUERY_EXECUTION_ERROR, \"No connection found for datasource \" + datasource.getId()));\n\t}\n\tDatasourcePluginClient datasourcePluginClient = connectionHolder.getDatasourcePluginClient();\n\tif (datasourcePluginClient == null) {\n\t\treturn Mono.error(ofException(QUERY_EXECUTION_ERROR, \"Datasource plugin client is null for datasource \" + datasource.getId()));\n\t}\n\tQueryExecutionContext queryExecutionContext = new QueryExecutionContext(queryConfig, requestParams, queryVisitorContext);\n\tDuration timeout = QueryTimeoutUtils.getTimeout(timeoutStr, queryExecutionContext);\n\treturn Mono.fromCallable(() -> {\n\t\ttry {\n\t\t\treturn datasourcePluginClient.executeQuery(queryExecutionContext, timeout);\n\t\t} catch (PluginException e) {\n\t\t\tlog.error(\"Error executing query on datasource {} with config {} and request params {}\", datasource.getId(), queryConfig, requestParams, e);\n\t\t\tif (e.getError() == QUERY_EXECUTION_TIMEOUT) {\n\t\t\t\treturn QueryExecutionResult.builder().error(QUERY_EXECUTION_TIMEOUT).build();\n\t\t\t}\n\t\t\treturn QueryExecutionResult.builder().error(ofException(QUERY_EXECUTION_ERROR, e.getMessage())).build();\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"Error executing query on datasource {} with config {} and request params {}\", datasource.getId(), queryConfig, requestParams, e);\n\t\t\tif (e instanceof TimeoutException) {\n\t\t\t\treturn QueryExecutionResult.builder().error(QUERY_EXECUTION_TIMEOUT).build();\n\t\t\t}\n\t\t\treturn QueryExecutionResult.builder().error(ofException(QUERY_EXECUTION_ERROR, e.getMessage())).build();\n\t\t}\n\t}).onErrorResume(e -> {\n\t\tif (e instanceof PluginException) {\n\t\t\tPluginException pluginException = (PluginException) e;\n\t\t\tif (pluginException.getError() == QUERY_EXECUTION_TIMEOUT) {\n\t\t\t\treturn Mono.just(QueryExecutionResult.builder().error(QUERY_EXECUTION_TIMEOUT).build());\n\t\t\t}\n\t\t}\n\t\treturn", "CodeBleu_score": 39.87654740299713}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\t// Retrieve the appropriate query executor based on the datasource type\n\tDatasourcePluginClient pluginClient = datasourceMetaInfoService.getPluginClient(datasource.getType());\n\t// Build the query execution context\n\tQueryExecutionContext queryExecutionContext = new QueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n\t// Acquire a connection from the datasource connection pool\n\treturn Mono.fromCallable(() -> {\n\t\ttry {\n\t\t\treturn datasourceConnectionPool.getConnection(datasource, queryExecutionContext);\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"Failed to get connection from the datasource connection pool\", e);\n\t\t\tthrow ofException(QUERY_EXECUTION_ERROR, \"Failed to get connection from the datasource connection pool\", e);\n\t\t}\n\t}).flatMap(connectionHolder -> {\n\t\t// Execute the query using the connection\n\t\ttry {\n\t\t\treturn pluginClient.execute(connectionHolder, queryExecutionContext);\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"Failed to execute the query\", e);\n\t\t\tthrow ofException(QUERY_EXECUTION_ERROR, \"Failed to execute the query\", e);\n\t\t}\n\t}).doOnError(e -> {\n\t\t// Handle any errors that occur during execution\n\t\tif (e instanceof PluginException) {\n\t\t\tthrow e;\n\t\t} else if (e instanceof TimeoutException) {\n\t\t\tthrow ofException(QUERY_EXECUTION_TIMEOUT, \"Query execution timed out\");\n\t\t} else {\n\t\t\tthrow ofException(QUERY_EXECUTION_ERROR, \"Failed to execute the query\", e);\n\t\t}\n\t});\n}", "CodeBleu_score": 42.0501879765107}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\t// Retrieve the appropriate query executor based on the datasource type\n\tDatasourcePluginClient datasourcePluginClient = datasourcePluginClientMap.get(datasource.getType());\n\tif (datasourcePluginClient == null) {\n\t\tthrow new PluginException(String.format(\"Datasource type %s is not supported.\", datasource.getType()));\n\t}\n\n\t// Build the query execution context\n\tQueryExecutionContext queryExecutionContext = new QueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n\n\t// Acquire a connection from the datasource connection pool\n\tDatasourceConnectionHolder connectionHolder = datasourceConnectionPool.acquire(datasource);\n\ttry {\n\t\t// Execute the query using the connection and handle any errors that occur\n\t\tQueryExecutionResult queryExecutionResult = datasourcePluginClient.executeQuery(connectionHolder.getConnection(), queryExecutionContext);\n\t\treturn Mono.just(queryExecutionResult);\n\t} catch (Exception e) {\n\t\t// Handle any errors that occur\n\t\tlog.error(\"Error executing query: {}\", e.getMessage(), e);\n\t\treturn Mono.error(ofException(e));\n\t} finally {\n\t\t// Release the connection back to the datasource connection pool\n\t\tdatasourceConnectionPool.release(connectionHolder);\n\t}\n}", "CodeBleu_score": 47.20247758388114}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\tlog.debug(\"Executing query locally for datasource: {}\", datasource.getName());\n\n\t// Get the appropriate query executor based on the datasource type\n\tString datasourceType = datasource.getType();\n\tDatasourcePluginClient datasourcePluginClient = datasourcePluginClientMap.get(datasourceType);\n\n\t// Build the query execution context\n\tQueryExecutionContext queryExecutionContext = new QueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n\n\t// Acquire a connection from the datasource connection pool\n\tDatasourceConnectionHolder connectionHolder = datasourceConnectionPool.acquire(datasource);\n\n\t// Execute the query using the connection\n\treturn Mono.fromCallable(() -> {\n\t\ttry {\n\t\t\treturn datasourcePluginClient.execute(connectionHolder.getConnection(), queryExecutionContext);\n\t\t} catch (PluginException e) {\n\t\t\tthrow ofException(QUERY_EXECUTION_ERROR, e);\n\t\t}\n\t}).doOnError(e -> {\n\t\t// Release the connection if an error occurs\n\t\tdatasourceConnectionPool.release(connectionHolder);\n\t}).onErrorResume(e -> {\n\t\t// Handle errors that occur during query execution\n\t\tif (e instanceof PluginException) {\n\t\t\t// Handle plugin exceptions\n\t\t\tPluginException pluginException = (PluginException) e;\n\t\t\tif (pluginException.getErrorCode() == QUERY_EXECUTION_TIMEOUT) {\n\t\t\t\t// Handle query execution timeout\n\t\t\t\tlog.error(\"Query execution timed out for datasource: {}\", datasource.getName());\n\t\t\t\tthrow ofException(QUERY_EXECUTION_TIMEOUT);\n\t\t\t} else {\n\t\t\t\t// Handle other plugin exceptions\n\t\t\t\tthrow ofException(QUERY_EXECUTION_ERROR, e);\n\t\t\t}\n\t\t} else if (e instanceof BizException) {\n\t\t\t// Handle business exceptions\n\t\t\tBizException bizException = (BizException) e;\n\t\t\tif (bizException.getErrorCode() == QUERY_EXECUTION_TIMEOUT) {\n\t\t\t\t// Handle query execution timeout\n\t\t\t\tlog.error(\"Query execution timed out for datasource: {}\", datasource.getName());\n\t\t\t\tthrow ofException(QUERY_EXECUTION_TIMEOUT);\n\t\t\t} else {\n\t\t\t\t// Handle other business exceptions\n\t\t\t\tthrow ofException(QUERY_EXECUTION_ERROR, e);\n\t\t\t}\n\t\t} else if (e instanceof TimeoutException) {\n\t\t\t// Handle query execution timeout\n\t\t\tlog.error(\"Query execution timed out for datasource: {}\", datasource.getName());\n\t\t\tthrow ofException(", "CodeBleu_score": 40.2419843162599}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t\tif (StringUtils.isBlank(timeoutStr)) {\n\t\treturn DEFAULT_QUERY_TIMEOUT_MS;\n\t}\n\tPair<Integer, String> parsedTimeout = parseTimeoutString(timeoutStr);\n\tint timeoutMs = convertTimeoutToMs(parsedTimeout);\n\tif (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n\t\tthrow new PluginException(EXCEED_MAX_QUERY_TIMEOUT, renderMustacheString(EXCEED_MAX_QUERY_TIMEOUT.getMessage(), MAX_QUERY_TIMEOUT_MS));\n\t}\n\treturn timeoutMs;\n}", "CodeBleu_score": 22.68157119865274}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t\tif (StringUtils.isBlank(timeoutStr)) {\n\t\treturn DEFAULT_QUERY_TIMEOUT_MS;\n\t}\n\tPair<Integer, String> parsed = parseQueryTimeout(timeoutStr);\n\tint timeout = parsed.getLeft();\n\tif (timeout < 0) {\n\t\tthrow new PluginException(QUERY_ARGUMENT_ERROR, renderMustacheString(INVALID_QUERY_TIMEOUT_FORMAT, timeoutStr));\n\t}\n\tif (timeout > MAX_QUERY_TIMEOUT_MS) {\n\t\tthrow new PluginException(EXCEED_MAX_QUERY_TIMEOUT, renderMustacheString(EXCEED_MAX_QUERY_TIMEOUT_FORMAT, timeoutStr));\n\t}\n\treturn timeout;\n}", "CodeBleu_score": 33.77839509926774}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t\tif (StringUtils.isBlank(timeoutStr)) {\n\t\treturn DEFAULT_QUERY_TIMEOUT_MS;\n\t}\n\n\ttry {\n\t\tPair<Integer, String> timeout = extractTimeoutValueAndUnit(timeoutStr);\n\t\tint timeoutMs = convertTimeoutToMs(timeout.getLeft(), timeout.getRight());\n\t\tif (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n\t\t\tthrow new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"The query timeout must not exceed \" + MAX_QUERY_TIMEOUT_MS + \" milliseconds.\");\n\t\t}\n\t\treturn timeoutMs;\n\t} catch (PluginException e) {\n\t\tthrow new PluginException(QUERY_ARGUMENT_ERROR, e.getMessage());\n\t}\n}", "CodeBleu_score": 31.632133548417386}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t\treturn application.getLiveQueries(visitorId).flatMapMany(queries -> Flux.fromIterable(queries))\n\t\t\t.flatMap(query -> copyDatasourceFromTemplateToCurrentOrganization(currentOrganizationId, query, visitorId))\n\t\t\t.collectList();\n}", "CodeBleu_score": 17.54887933268769}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t\treturn application.getQueries().stream().map(ApplicationQuery::getDatasourceId).filter(Objects::nonNull)\n           .collect(Collectors.toSet()).collect(Collectors.toList()).flatMapMany(Flux::fromIterable)\n           .flatMap(datasourceId -> {\n                return copyDatasourceFromTemplateToCurrentOrganization(currentOrganizationId, datasourceId, visitorId);\n            }).collectList();\n}", "CodeBleu_score": 27.42832421786769}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t\treturn Flux.fromIterable(application.getQueries())\n           .filter(query -> query.getDatasourceId()!= null)\n           .map(query -> query.getDatasourceId())\n           .distinct()\n           .flatMap(datasourceId -> copyDatasourceFromTemplateToCurrentOrganization(currentOrganizationId, application, datasourceId, visitorId))\n           .collectList();\n}", "CodeBleu_score": 27.424961069957366}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t\treturn datasourceService.getDatasourceById(datasourceId)\n\t\t.switchIfEmpty(Mono.error(ofError(DATASOURCE_NOT_EXIST)))\n\t\t.flatMap(datasource -> {\n\t\t\tif (DatasourceCreationSource.SYSTEM_STATIC.equals(datasource.getCreationSource())) {\n\t\t\t\treturn Mono.just(datasource.getId());\n\t\t\t}\n\t\t\tif (DatasourceCreationSource.LEGACY_QUICK_REST_API.equals(datasource.getCreationSource()) || DatasourceCreationSource.LEGACY_OPENBLOCKS_API.equals(datasource.getCreationSource())) {\n\t\t\t\treturn Mono.just(datasource.getId());\n\t\t\t}\n\t\t\treturn doCreateDatasource(organizationId, visitorId, datasource);\n\t\t});\n}", "CodeBleu_score": 56.39218428479544}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t\treturn this.datasourceService.getDatasourceById(datasourceId)\n\t\t\t.flatMap(datasource -> {\n\t\t\t\tif (datasource.isSystemStatic()) {\n\t\t\t\t\treturn Mono.just(datasourceId);\n\t\t\t\t} else if (datasource.isLegacyQuickRestApi() || datasource.isLegacyOpenblocksApi()) {\n\t\t\t\t\treturn this.datasourceService.createDatasource(\n\t\t\t\t\t\t\tnew Datasource(\n\t\t\t\t\t\t\t\t\tdatasource.getName(),\n\t\t\t\t\t\t\t\t\tdatasource.getType(),\n\t\t\t\t\t\t\t\t\tdatasource.getOrganizationId(),\n\t\t\t\t\t\t\t\t\tdatasource.getVisitorId(),\n\t\t\t\t\t\t\t\t\tdatasource.getTemplateId(),\n\t\t\t\t\t\t\t\t\tdatasource.getCreationSource(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),\n\t\t\t\t\t\t\t\t\tdatasource.getDatasourceJson(),", "CodeBleu_score": 37.610427412598725}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t\treturn Mono.defer(() -> {\n\t\tif (isNull(datasourceId)) {\n\t\t\treturn Mono.error(ofError(DATASOURCE_ID_NOT_PROVIDED));\n\t\t}\n\t\treturn Mono.just(datasourceId)\n\t\t\t.flatMap(id -> Mono.defer(() -> {\n\t\t\t\tif (isNull(id)) {\n\t\t\t\t\treturn Mono.error(ofError(DATASOURCE_ID_NOT_PROVIDED));\n\t\t\t\t}\n\t\t\t\treturn Mono.just(id)\n\t\t\t\t\t.flatMap(id2 -> Mono.defer(() -> {\n\t\t\t\t\t\tif (isNull(id2)) {\n\t\t\t\t\t\t\treturn Mono.error(ofError(DATASOURCE_ID_NOT_PROVIDED));\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn Mono.just(id2)\n\t\t\t\t\t\t\t.flatMap(id3 -> Mono.defer(() -> {\n\t\t\t\t\t\t\t\tif (isNull(id3)) {\n\t\t\t\t\t\t\t\t\treturn Mono.error(ofError(DATASOURCE_ID_NOT_PROVIDED));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn Mono.just(id3)\n\t\t\t\t\t\t\t\t\t.flatMap(id4 -> Mono.defer(() -> {\n\t\t\t\t\t\t\t\t\t\tif (isNull(id4)) {\n\t\t\t\t\t\t\t\t\t\t\treturn Mono.error(ofError(DATASOURCE_ID_NOT_PROVIDED));\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\treturn Mono.just(id4)\n\t\t\t\t\t\t\t\t\t\t\t.flatMap(id5 -> Mono.defer(() -> {\n\t\t\t\t\t\t\t\t\t\t\t\tif (isNull(id5)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn Mono.error(ofError(DATASOURCE_ID_NOT_PROVIDED));\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\treturn Mono.just(id5)\n\t\t\t\t\t\t\t\t\t\t\t\t\t.flatMap(id6 -> Mono.defer(() -> {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (isNull(id6)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Mono.error(ofError(DATASOURCE_ID_NOT_PROVIDED));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Mono.just(id6)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.flatMap(id7 -> Mono.defer(() -> {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (isNull(id7)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Mono.error(ofError(DATASOURCE_ID_NOT_PROVIDED));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Mono.just(id7)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.flatMap(id8 -> Mono.defer(() -> {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (isNull(id8)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Mono.error(ofError(DATASOURCE_ID_NOT_PROVIDED));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Mono.just(id8)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.flatMap(id", "CodeBleu_score": 31.796053076513886}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t\treturn assetService.saveAsset(filePart, user.getId(), Asset.Type.PROFILE_PHOTO).flatMap(asset -> {\n\t\tuser.setProfilePhoto(asset);\n\t\treturn userRepository.save(user);\n\t}).map(user -> true);\n}", "CodeBleu_score": 16.13608606227067}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t\treturn Mono.fromCallable(() -> {\n\t\t// TODO: 2020/1/17\n\t\treturn false;\n\t});\n}", "CodeBleu_score": 6.838803645080565}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t\tlog.info(\"saveProfilePhoto: \" + user.getUsername());\n\treturn Mono.just(true);\n}", "CodeBleu_score": 9.61246851431315}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t\tObjects.requireNonNull(authUser);\n\n\t// If the user has an email address, encrypt the password.\n\tif (authUser.getEmail()!= null) {\n\t\tauthUser.setPassword(encryptionService.encrypt(authUser.getPassword()));\n\t}\n\n\t// Set the user's state, enabled status, and avatar link.\n\tauthUser.setState(UserState.ENABLED);\n\tauthUser.setAvatar(commonConfig.getDefaultAvatar());\n\n\t// Set the user's name.\n\tif (StringUtils.isBlank(authUser.getName())) {\n\t\tauthUser.setName(authUser.getEmail());\n\t}\n\n\t// Create the new user.\n\tUser user = new User(authUser);\n\n\t// Establish user connections from the authUser.\n\tuser.getConnections().addAll(authUser.getConnections());\n\n\t// Mark the user as new.\n\tuser.setNew(true);\n\n\treturn userRepository.save(user);\n}", "CodeBleu_score": 36.410733973311274}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t\treturn Mono.just(authUser).map(this::createNewUser);\n}", "CodeBleu_score": 4.488045441228664}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t\treturn Mono.defer(() -> {\n\t\tUser user = new User();\n\t\tuser.setUsername(authUser.getUsername());\n\t\tuser.setEmail(authUser.getEmail());\n\t\tuser.setFirstName(authUser.getFirstName());\n\t\tuser.setLastName(authUser.getLastName());\n\t\tuser.setAvatarUrl(authUser.getAvatarUrl());\n\t\tuser.setLocale(LocaleUtils.getLanguageTag(Locale.getDefault()));\n\t\tuser.setState(UserState.NEW);\n\t\tuser.setEnabled(true);\n\t\tuser.setAuthSource(authUser.getAuthSource());\n\t\tuser.setAuthSourceId(authUser.getAuthSourceId());\n\t\tuser.setAuthSourceExtra(authUser.getAuthSourceExtra());\n\t\tuser.setEmailVerified(authUser.isEmailVerified());\n\t\tuser.setPhoneVerified(authUser.isPhoneVerified());\n\t\tuser.setConnections(authUser.getConnections());\n\t\tuser.setNewUser(true);\n\t\tuser.setLastLogin(System.currentTimeMillis());\n\t\tuser.setLastLoginIp(CLIENT_IP);\n\t\tuser.setLastLoginCountry(LocaleUtils.getCountry(Locale.getDefault()));\n\t\tuser.setLastLoginRegion(LocaleUtils.getRegion(Locale.getDefault()));\n\t\tuser.setLastLoginCity(LocaleUtils.getCity(Locale.getDefault()));\n\t\tuser.setLastLoginIsp(LocaleUtils.getISP(Locale.getDefault()));\n\t\tuser.setLastLoginTimezone(LocaleUtils.getTimeZone(Locale.getDefault()));\n\t\tuser.setLastLoginDevice(LocaleUtils.getDevice(Locale.getDefault()));\n\t\tuser.setLastLoginOs(LocaleUtils.getOS(Locale.getDefault()));\n\t\tuser.setLastLoginBrowser(LocaleUtils.getBrowser(Locale.getDefault()));\n\t\tuser.setLastLoginBrowserVersion(LocaleUtils.getBrowserVersion(Locale.getDefault()));\n\t\tuser.setLastLoginDeviceBrand(LocaleUtils.getDeviceBrand(Locale.getDefault()));\n\t\tuser.setLastLoginDeviceModel(LocaleUtils.getDeviceModel(Locale.getDefault()));\n\t\tuser.setLastLoginDeviceOs(LocaleUtils.getDeviceOS(Locale.getDefault()));\n\t\tuser.setLastLoginDeviceOsVersion(LocaleUtils.getDeviceOSVersion(Locale.getDefault()));\n\t\tuser.setLastLoginDeviceResolution(LocaleUtils", "CodeBleu_score": 38.777846722909125}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\treturn bindEmail(user, email, null);\n}", "CodeBleu_score": 6.966588071734925}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\treturn Mono.just(email)\n\t\t\t.flatMap(emailAddress -> {\n\t\t\t\tif (StringUtils.isBlank(emailAddress)) {\n\t\t\t\t\treturn Mono.error(BizError.of(BizError.Type.INVALID_PARAM, \"email\"));\n\t\t\t\t}\n\t\t\t\treturn Mono.just(emailAddress)\n\t\t\t\t\t\t.flatMap(emailAddress2 -> {\n\t\t\t\t\t\t\tif (!emailAddress2.contains(\"@\")) {\n\t\t\t\t\t\t\t\treturn Mono.error(BizError.of(BizError.Type.INVALID_PARAM, \"email\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn Mono.just(emailAddress2)\n\t\t\t\t\t\t\t\t\t.flatMap(emailAddress3 -> {\n\t\t\t\t\t\t\t\t\t\tif (!emailAddress3.endsWith(CommonConfig.DEFAULT_EMAIL_DOMAIN)) {\n\t\t\t\t\t\t\t\t\t\t\treturn Mono.error(BizError.of(BizError.Type.INVALID_PARAM, \"email\"));\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\treturn Mono.just(emailAddress3)\n\t\t\t\t\t\t\t\t\t\t\t\t.flatMap(emailAddress4 -> {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (user.hasConnection(AuthSourceConstants.EMAIL, emailAddress4)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Mono.error(BizError.of(BizError.Type.USER_ALREADY_EXISTS));\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn Mono.just(emailAddress4)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.flatMap(emailAddress5 -> {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (user.hasConnection(AuthSourceConstants.EMAIL, emailAddress5)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Mono.error(BizError.of(BizError.Type.USER_ALREADY_EXISTS));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Mono.just(emailAddress5)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.flatMap(emailAddress6 -> {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (user.hasConnection(AuthSourceConstants.EMAIL, emailAddress6)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Mono.error(BizError.of(BizError.Type.USER_ALREADY_EXISTS));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Mono.just(emailAddress6)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.flatMap(emailAddress7 -> {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (user.hasConnection(AuthSourceConstants.EMAIL, emailAddress7)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Mono.error(BizError.of(BizError.Type.USER_ALREADY_EXISTS));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Mono.just(emailAddress7)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.flatMap(emailAddress8 -> {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (user.hasConnection(AuthSourceConstants.EMAIL, emailAddress8)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Mono.", "CodeBleu_score": 26.005438283644555}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\treturn bindEmail(user, email, false);\n}", "CodeBleu_score": 6.966604370476503}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t\treturn getUserById(userId)\n\t\t\t.flatMap(user -> {\n\t\t\t\tif (user.isPasswordExpired()) {\n\t\t\t\t\treturn Mono.error(ofError(BizError.PASSWORD_EXPIRED));\n\t\t\t\t}\n\t\t\t\tif (!user.isPasswordValid(oldPassword)) {\n\t\t\t\t\treturn Mono.error(ofError(BizError.INVALID_PASSWORD));\n\t\t\t\t}\n\t\t\t\treturn updateUserPassword(userId, newPassword);\n\t\t\t});\n}", "CodeBleu_score": 22.266788383556303}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t\treturn getUser(userId)\n\t\t.flatMap(user -> user.updatePassword(oldPassword, newPassword))\n\t\t.flatMap(user -> updateUser(user))\n\t\t.map(user -> true);\n}", "CodeBleu_score": 13.711313468608727}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t\treturn getUser(userId)\n\t\t\t.flatMap(user -> validatePassword(user, oldPassword)\n\t\t\t\t\t.flatMap(valid -> updatePassword(user, newPassword)\n\t\t\t\t\t\t\t.thenReturn(valid)));\n}", "CodeBleu_score": 14.97800625933693}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t\treturn Mono.justOrEmpty(orgMember.getGroups())\n           .filter(groups -> groups!= null && groups.size() > 0)\n           .map(groups -> {\n                List<Map<String, String>> groupList = groups.stream()\n                       .filter(group ->!group.getId().equals(AuthSourceConstants.GROUP_ID_ALL_USERS))\n                       .map(group -> {\n                            Map<String, String> groupMap = new HashMap<>();\n                            groupMap.put(FieldName.GROUP_ID, group.getId());\n                            groupMap.put(FieldName.GROUP_NAME, group.getName(locale));\n                            return groupMap;\n                        })\n                       .collect(Collectors.toList());\n\n                if (withoutDynamicGroups) {\n                    groupList = groupList.stream()\n                           .filter(group ->!group.get(FieldName.GROUP_ID).startsWith(AuthSourceConstants.GROUP_ID_DYNAMIC))\n                           .collect(Collectors.toList());\n                }\n\n                return groupList;\n            });\n}", "CodeBleu_score": 37.3282633998773}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t\treturn Mono.zip(Mono.just(userId), Mono.just(orgMember), Mono.just(withoutDynamicGroups), Mono.just(locale))\n           .flatMap(t -> {\n                String userId2 = t.getT1();\n                OrgMember orgMember2 = t.getT2();\n                boolean withoutDynamicGroups2 = t.getT3();\n                Locale locale2 = t.getT4();\n\n                // If the member is an admin, return the list of groups for the organization.\n                if (orgMember2.isAdmin()) {\n                    return Mono.just(orgMember2.getGroups());\n                }\n\n                // If dynamic groups should be excluded, return the list of groups for the organization minus the dynamic groups.\n                if (withoutDynamicGroups2) {\n                    return Mono.just(orgMember2.getGroups().stream()\n                           .filter(g ->!g.isDynamic())\n                           .collect(Collectors.toList()));\n                }\n\n                // Return the list of groups for the organization.\n                return Mono.just(orgMember2.getGroups());\n            })\n           .flatMapMany(groups -> {\n                // Return an empty list if the list of groups is empty.\n                if (groups.isEmpty()) {\n                    return Flux.empty();\n                }\n\n                // Return the list of group IDs and localized group names.\n                return Flux.fromIterable(groups)\n                       .filter(g ->!g.isDynamic())\n                       .map(g -> {\n                            Map<String, String> group = new HashMap<>();\n                            group.put(FieldName.ID, g.getId());\n                            group.put(FieldName.NAME, g.getLocalizedName(locale2));\n                            return group;\n                        });\n            })\n           .collectList();\n}", "CodeBleu_score": 33.513916441277345}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t\treturn Mono.just(orgMember)\n           .flatMap(member -> {\n                if (member.isAdmin()) {\n                    return Mono.just(member.getGroups());\n                } else {\n                    return groupService.getGroupsByMember(member.getOrgId(), userId, withoutDynamicGroups);\n                }\n            })\n           .map(groups -> {\n                Set<String> groupIds = groups.stream()\n                       .map(Group::getId)\n                       .collect(Collectors.toSet());\n                return groupMemberService.getGroupsByIds(groupIds)\n                       .collectList()\n                       .map(groupList -> groupList.stream()\n                               .filter(group ->!group.isAllUsers())\n                               .map(group -> {\n                                    String groupId = group.getId();\n                                    String groupName = group.getName(locale);\n                                    return Map.of(groupId, groupName);\n                                })\n                               .collect(Collectors.toList()));\n            });\n}", "CodeBleu_score": 39.998447928029066}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\tUserStatus userStatus = new UserStatus(userId, UserStatusType.NEW_USER_GUIDANCE_SHOWN);\n\treturn mongoUpsertHelper.upsert(userStatus, new Update().set(\"hasShowNewUserGuidance\", true));\n}", "CodeBleu_score": 38.22495370726842}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\tUserStatus userStatus = new UserStatus();\n\tuserStatus.setUserId(userId);\n\tuserStatus.setHasShowNewUserGuidance(true);\n\tuserStatus.setUserStatus(UserStatusType.ACTIVE);\n\n\tUpdate update = new Update();\n\tupdate.set(\"hasShowNewUserGuidance\", true);\n\tupdate.set(\"userStatus\", UserStatusType.ACTIVE);\n\n\treturn mongoUpsertHelper.upsert(userStatusRepository, userStatus, update);\n}", "CodeBleu_score": 36.606188793600715}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\tUserStatus userStatus = new UserStatus();\n\tuserStatus.setUserId(userId);\n\tuserStatus.setHasShowNewUserGuidance(true);\n\tuserStatus.setUserStatusType(UserStatusType.USER_STATUS_TYPE_USER);\n\treturn mongoUpsertHelper.upsert(userStatus, new Update().set(\"hasShowNewUserGuidance\", true));\n}", "CodeBleu_score": 32.98298669072097}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"partition predicate must not be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"value predicate must not be nil\")\n\t}\n\tvar wg sync.WaitGroup\n\tfor _, partition := range c.partitions {\n\t\tif predicatePartition(partition.Key, partition) {\n\t\t\twg.Add(1)\n\t\t\tgo func(partition PartitionManager) {\n\t\t\t\tdefer wg.Done()\n\t\t\t\tpartition.ClearMatching(predicateValue)\n\t\t\t}(partition)\n\t\t}\n\t}\n\twg.Wait()\n}", "CodeBleu_score": 37.68352884018866}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition must not be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue must not be nil\")\n\t}\n\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\n\tc.clearMatchingLocked(predicatePartition, predicateValue)\n}", "CodeBleu_score": 22.911591033457974}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition must not be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue must not be nil\")\n\t}\n\n\tc.clearMatching(predicatePartition, predicateValue)\n}", "CodeBleu_score": 19.534370619285117}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\taverageWeightPerPartition := totalWeightQuantity / numPartitions\n\tmaxSizePerPartition := int(math.Ceil(float64(maxItemsTotal) / float64(numPartitions)))\n\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 41.54523389860793}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\tavgWeightPerPartition := totalWeightQuantity / numPartitions\n\n\t// If the average weight per partition is greater than 0, the maximum size per partition is calculated based on the formula. Otherwise, the maximum size per partition is set to 0.\n\tif avgWeightPerPartition > 0 {\n\t\treturn int(math.Round(float64(maxItemsTotal) / float64(avgWeightPerPartition)))\n\t}\n\n\treturn 0\n}", "CodeBleu_score": 47.39661000151969}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\taverageWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\tmaxSizePerPartition := int(math.Ceil(averageWeightPerPartition))\n\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 39.18657577800631}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> map = new HashMap<>();\n\tConnectionFactory connectionFactory = new ConnectionFactory() {\n\t\t@Override\n\t\tpublic Mono<Connection> create() {\n\t\t\treturn null;\n\t\t}\n\n\t\t@Override\n\t\tpublic ConnectionMetadata getMetadata() {\n\t\t\treturn null;\n\t\t}\n\t};\n\n\tConnection connection = new Connection() {\n\t\t@Override\n\t\tpublic Mono<Void> close() {\n\t\t\treturn null;\n\t\t}\n\n\t\t@Override\n\t\tpublic Mono<Void> commit() {\n\t\t\treturn null;\n\t\t}\n\n\t\t@Override\n\t\tpublic Mono<Void> rollback() {\n\t\t\treturn null;\n\t\t}\n\n\t\t@Override\n\t\tpublic <R> Mono<R> execute(Statement statement, RowMapper<R> rowMapper) {\n\t\t\treturn null;\n\t\t}\n\n\t\t@Override\n\t\tpublic <R> Flux<R> execute(Statement statement, RowMapper<R> rowMapper, int fetchSize) {\n\t\t\treturn null;\n\t\t}\n\n\t\t@Override\n\t\tpublic <R> Flux<R> execute(Statement statement, RowMapper<R> rowMapper, int fetchSize, int pageSize) {\n\t\t\treturn null;\n\t\t}\n\n\t\t@Override\n\t\tpublic <R> Flux<R> execute(Statement statement, RowMapper<R> rowMapper, int fetchSize, int pageSize,\n\t\t\t\tint page) {\n\t\t\treturn null;\n\t\t}\n\n\t\t@Override\n\t\tpublic <R> Flux<R> execute(Statement statement, RowMapper<R> rowMapper, int fetchSize, int pageSize,\n\t\t\t\tint page, int offset) {\n\t\t\treturn null;\n\t\t}\n\n\t\t@Override\n\t\tpublic <R> Flux<R> execute(Statement statement, RowMapper<R> rowMapper, int fetchSize, int pageSize,\n\t\t\t\tint page, int offset, int limit) {\n\t\t\treturn null;\n\t\t}\n\n\t\t@Override\n\t\tpublic <R> Flux<R> execute(Statement statement, RowMapper<R> rowMapper, int fetchSize, int pageSize,\n\t\t\t\tint page, int offset, int limit, int count) {\n\t\t\treturn null;\n\t\t}\n\n\t\t@Override\n\t\tpublic <R> Flux<R> execute(Statement statement, RowMapper<R> rowMapper, int fetchSize, int pageSize,\n\t\t\t\tint page,", "CodeBleu_score": 23.28561923736884}, {"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> map = new HashMap<>();\n\tConnectionFactory connectionFactory = new ConnectionFactory() {\n\t\t@Override\n\t\tpublic Mono<Connection> create() {\n\t\t\treturn null;\n\t\t}\n\n\t\t@Override\n\t\tpublic ConnectionMetadata getMetadata() {\n\t\t\treturn null;\n\t\t}\n\t};\n\tConnectionMetadata metadata = connectionFactory.getMetadata();\n\tif (metadata!= null) {\n\t\tmap.put(\"DatabaseProductName\", metadata.getDatabaseProductName());\n\t\tmap.put(\"DatabaseProductVersion\", metadata.getDatabaseProductVersion());\n\t}\n\treturn map;\n}", "CodeBleu_score": 41.01231153703452}, {"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> map = new HashMap<>();\n\tConnectionFactory connectionFactory = new ConnectionFactory() {\n\t\t@Override\n\t\tpublic Mono<Connection> create() {\n\t\t\treturn null;\n\t\t}\n\t};\n\tMono<ConnectionMetadata> metadata = connectionFactory.getMetadata();\n\tmetadata.subscribe(connectionMetadata -> {\n\t\tif (connectionMetadata!= null) {\n\t\t\tmap.put(\"databaseProductName\", connectionMetadata.getDatabaseProductName());\n\t\t\tmap.put(\"databaseProductVersion\", connectionMetadata.getDatabaseProductVersion());\n\t\t}\n\t});\n\treturn map;\n}", "CodeBleu_score": 41.17124457561168}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tUser userSetting = configMap.getUser();\n\tif (userSetting!= null) {\n\t\tinfo.setRegistrationEnabled(isTrue(userSetting.getRegistrationEnabled()));\n\t\tinfo.setEmailVerificationRequired(isTrue(userSetting.getEmailVerificationRequired()));\n\t}\n}", "CodeBleu_score": 25.21094544156274}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\t// Get the user settings from the configuration map\n\tString registration = configMap.get(\"user.registration\");\n\tString emailVerification = configMap.get(\"user.email.verification\");\n\n\t// If the user settings are null, disable registration and email verification on registration\n\tif (StringUtils.isEmpty(registration) || StringUtils.isEmpty(emailVerification)) {\n\t\tinfo.setRegistrationDisabled(true);\n\t\tinfo.setEmailVerificationDisabled(true);\n\t\treturn;\n\t}\n\n\t// Update the GlobalInfo object with the retrieved settings for registration and email verification\n\tinfo.setRegistrationDisabled(isFalse(registration));\n\tinfo.setEmailVerificationDisabled(isFalse(emailVerification));\n}", "CodeBleu_score": 28.51115703543111}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tUser user = configMap.getUser();\n\tif (user == null) {\n\t\tinfo.setRegistrationDisabled(true);\n\t\tinfo.setEmailVerificationRequired(false);\n\t\treturn;\n\t}\n\tinfo.setRegistrationDisabled(user.isRegistrationDisabled());\n\tinfo.setEmailVerificationRequired(user.isEmailVerificationRequired());\n}", "CodeBleu_score": 33.30639400165066}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\t\t// \u542f\u52a8\u4e00\u4e2a\u7ebf\u7a0b\u6765\u91cd\u542f\u5e94\u7528\n    Thread thread = new Thread(() -> {\n        try {\n            Thread.currentThread().setName(\"restart-thread\");\n            Thread.currentThread().setContextClassLoader(Application.class.getClassLoader());\n            Thread.currentThread().setDaemon(false);\n            SpringApplication.exit(SpringApplication.run(Application.class, new String[0]));\n        } catch (Throwable e) {\n            log.error(\"Error restarting application\", e);\n        }\n    });\n    thread.start();\n    return \"Application is restarting\";\n}", "CodeBleu_score": 38.725155559192906}, {"code": "public Object restart(){\n\t\tThreadGroup threadGroup = new ThreadGroup(\"restart\");\n\tThread thread = new Thread(threadGroup, new Runnable() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tSpringApplication.exit(Application.context, () -> 0);\n\t\t\t} catch (Throwable e) {\n\t\t\t\tlog.error(\"Error restarting application\", e);\n\t\t\t}\n\t\t}\n\t});\n\tthread.setContextClassLoader(Application.class.getClassLoader());\n\tthread.setDaemon(false);\n\tthread.start();\n\treturn \"Restarting application\";\n}", "CodeBleu_score": 50.34348696193146}, {"code": "public Object restart(){\n\t\tlog.info(\"Restarting application\");\n\tThreadGroup threadGroup = new ThreadGroup(\"restart\");\n\tThread thread = new Thread(threadGroup, new Runnable() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tThread.currentThread().setContextClassLoader(Application.class.getClassLoader());\n\t\t\ttry {\n\t\t\t\tSpringApplication.exit(SpringApplication.run(Application.class, new String[0]), new Runnable() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tlog.info(\"Application restarted\");\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} catch (Throwable ex) {\n\t\t\t\tlog.error(\"Application failed to restart\", ex);\n\t\t\t}\n\t\t}\n\t});\n\tthread.setDaemon(false);\n\tthread.start();\n\treturn \"Application restarted\";\n}", "CodeBleu_score": 44.01112064430893}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t\tconfigurer.defaultCodecs().jackson2JsonDecoder(jackson2JsonDecoder());\n\tconfigurer.defaultCodecs().jackson2JsonEncoder(jackson2JsonEncoder());\n}", "CodeBleu_score": 40.14004898603382}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t\tconfigurer.customCodecs().jackson2JsonEncoder(jackson2JsonEncoder());\n\tconfigurer.customCodecs().jackson2JsonDecoder(jackson2JsonDecoder());\n}", "CodeBleu_score": 38.02926450364256}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n }", "CodeBleu_score": 92.62032370439991}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t\treturn route(path(\"/console/**\")\n\t\t\t.and(method(HttpMethod.GET))\n\t\t\t.and(accept(MediaType.TEXT_HTML))\n\t\t\t.and(not(WebSocketRequestPredicate.INSTANCE)),\n\t\t\trequest -> ServerResponse.temporaryRedirect(URI.create(\"/console/index.html\")).build());\n}", "CodeBleu_score": 24.57567539720221}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t\treturn route(path(\"/console/**\").and(method(HttpMethod.GET)).and(accept(MediaType.TEXT_HTML)),\n\t\t\trequest -> ServerResponse.temporaryRedirect(URI.create(\"/console/index.html\")).build());\n}", "CodeBleu_score": 21.29375600472639}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t\treturn route(path(\"/console/**\")\n\t\t\t.and(method(HttpMethod.GET))\n\t\t\t.and(not(path(\"/console/assets/**\")))\n\t\t\t.and(accept(MediaType.TEXT_HTML)),\n\t\t\trequest -> ServerResponse.temporaryRedirect(URI.create(\"/console/index.html\")).build());\n}", "CodeBleu_score": 24.860805235547424}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t\treturn route(path(\"/uc/**\")\n\t\t\t.and(method(HttpMethod.GET))\n\t\t\t.and(accept(MediaType.TEXT_HTML))\n\t\t\t.and(not(WebSocketRequestPredicate.INSTANCE)),\n\t\t\trequest -> ServerResponse.temporaryRedirect(URI.create(request.uri().getPath() + \"/\")).build());\n}", "CodeBleu_score": 26.685760802266806}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t\treturn route(path(\"/uc/**\").and(not(path(\"/uc/assets/**\"))).and(accept(MediaType.TEXT_HTML)), request -> {\n\t\tString path = request.path().substring(4);\n\t\tif (path.endsWith(\"/\")) {\n\t\t\tpath = path.substring(0, path.length() - 1);\n\t\t}\n\t\treturn ServerResponse.temporaryRedirect(URI.create(\"/uc/\" + path + \"/index.html\")).build();\n\t});\n}", "CodeBleu_score": 36.54691856353007}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t\treturn route(path(\"/uc/**\").and(method(HttpMethod.GET).and(accept(MediaType.TEXT_HTML))).and(not(WebSocketRequestPredicate.INSTANCE)),\n\t\t\trequest -> ServerResponse.temporaryRedirect(URI.create(request.uri().getPath() + \"/index.html\")).build());\n}", "CodeBleu_score": 27.362113354409907}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\tprivate final ConcurrentHashMap<String, MapSession> sessions = new ConcurrentHashMap<>();\n\tprivate final long sessionTimeout;\n\n\tpublic ReactiveIndexedSessionRepository(SessionProperties sessionProperties, ServerProperties serverProperties) {\n\t\tthis.sessionTimeout = sessionProperties.getTimeout().toMillis();\n\t}\n\n\t@Bean\n\tpublic ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository() {\n\t\treturn new InMemoryReactiveIndexedSessionRepository<>(sessions, sessionTimeout);\n\t}\n}", "CodeBleu_score": 39.579833705352065}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\tprivate final ConcurrentHashMap<String, MapSession> sessions = new ConcurrentHashMap<>();\n\tprivate final long sessionTimeout = sessionProperties.getTimeout().toMillis();\n\tprivate final String sessionCookieName = sessionProperties.getName();\n\n\t@Bean\n\tpublic ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository(ServerProperties serverProperties) {\n\t\treturn new InMemoryReactiveIndexedSessionRepository<>(sessions, sessionTimeout, sessionCookieName,\n\t\t\t\tserverProperties.getServlet().getContextPath());\n\t}\n}", "CodeBleu_score": 36.34994561129384}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\t@Bean\n\tpublic ReactiveIndexedSessionRepository<MapSession> sessionRepository(SessionProperties sessionProperties, ServerProperties serverProperties) {\n\t\tConcurrentHashMap<String, MapSession> sessionMap = new ConcurrentHashMap<>();\n\t\tint sessionTimeout = sessionProperties.getTimeout().getSeconds();\n\t\treturn new InMemoryReactiveIndexedSessionRepository(sessionMap, sessionTimeout, serverProperties.getServlet().getSession().getCookie().getName());\n\t}\n\n\t@Bean\n\tpublic SecurityWebFilterChain securityWebFilterChain(ServerHttpSecurity http, SecurityConfigurer securityConfigurer) {\n\t\treturn http.securityMatcher(new PatServerWebExchangeMatcher(securityConfigurer.getAuthenticationManager()))\n\t\t\t\t.authorizeExchange(exchange -> exchange.pathMatchers(pathMatchers(\"/api/v1/public/**\")).permitAll()\n\t\t\t\t\t\t.pathMatchers(pathMatchers(\"/api/v1/auth/login\")).permitAll()\n\t\t\t\t\t\t.pathMatchers(pathMatchers(\"/api/v1/auth/pat\")).permitAll()\n\t\t\t\t\t\t.pathMatchers(pathMatchers(\"/api/v1/auth/pat/login\")).permitAll()\n\t\t\t\t\t\t.pathMatchers(pathMatchers(\"/api/v1/auth/pat/register\")).permitAll()\n\t\t\t\t\t\t.pathMatchers(pathMatchers(\"/api/v1/auth/pat/logout\")).permitAll()\n\t\t\t\t\t\t.pathMatchers(pathMatchers(\"/api/v1/auth/twofactor/login\")).permitAll()\n\t\t\t\t\t\t.pathMatchers(pathMatchers(\"/api/v1/auth/twofactor/register\")).permitAll()\n\t\t\t\t\t\t.pathMatchers(pathMatchers(\"/api/v1/auth/twofactor/logout\")).permitAll()\n\t\t\t\t\t\t.pathMatchers(pathMatchers(\"/api/v1/auth/twofactor/verify\")).permitAll()\n\t\t\t\t\t\t.pathMatchers(pathMatchers(\"/api/v1/auth/twofactor/verify/resend\")).permitAll()\n\t\t\t\t\t\t.pathMatchers(pathMatchers(\"/api/v1/auth/twofactor/verify/resend/token\")).permitAll()\n\t\t\t\t\t\t.pathMatchers(pathMatchers(\"/api/v1/auth/twofactor/verify/resend/token/validate\")).permitAll()\n\t\t\t\t\t\t.pathMatchers(pathMatchers(\"/api/v1/auth/twofactor/verify/resend/token/validate/token\")).permitAll()\n\t\t\t\t\t\t.pathMatchers(pathMatchers(\"/api", "CodeBleu_score": 36.359373965191466}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\tDefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService);\n\tuserDetailsService.setTwoFactorEnabled(haloProperties.getSecurity().isTwoFactorEnabled());\n\treturn userDetailsService;\n}", "CodeBleu_score": 44.55383473758374}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t//    return new DefaultUserDetailService(userService, roleService, haloProperties);\n    return new DefaultUserDetailService(userService, roleService, haloProperties);\n}", "CodeBleu_score": 14.01322597689099}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\n//    DefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService);\n//    userDetailsService.setTwoFactorAuthenticationEnabled(haloProperties.isTwoFactorAuthenticationEnabled());\n//    return userDetailsService;\n\n    return new DefaultUserDetailService(userService, roleService);\n}", "CodeBleu_score": 14.406727076956027}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\t\tComment.CommentOwner commentOwner = new Comment.CommentOwner();\n\tcommentOwner.setKind(\"email\");\n\tcommentOwner.setEmail(StringUtils.defaultIfBlank(email, \"\"));\n\tcommentOwner.setDisplayName(StringUtils.defaultIfBlank(displayName, \"\"));\n\tcommentOwner.setAvatar(avatar);\n\tcommentOwner.setWebsite(website);\n\treturn commentOwner;\n}", "CodeBleu_score": 39.51192452966508}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t\tComment.CommentOwner commentOwner = new Comment.CommentOwner();\n\tcommentOwner.setKind(\"email\");\n\tString email = this.getEmail();\n\tif (StringUtils.isBlank(email)) {\n\t\temail = \"\";\n\t}\n\tcommentOwner.setEmail(email);\n\tcommentOwner.setDisplayName(this.getDisplayName());\n\tcommentOwner.setAvatarUrl(this.getAvatarUrl());\n\tcommentOwner.setWebsiteUrl(this.getWebsiteUrl());\n\treturn commentOwner;\n}", "CodeBleu_score": 42.73243285678463}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t\tComment.CommentOwner commentOwner = new Comment.CommentOwner();\n\tcommentOwner.setKind(\"email\");\n\tcommentOwner.setDisplayName(displayName);\n\tif (StringUtils.isNotBlank(email)) {\n\t\tcommentOwner.setEmail(email);\n\t}\n\tcommentOwner.setAvatar(avatar);\n\tcommentOwner.setWebsite(website);\n\treturn commentOwner;\n}", "CodeBleu_score": 37.571357474488465}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (commentOwner.getKind().equals(User.KIND)) {\n\t\treturn post.getOwner().getName().equals(commentOwner.getName());\n\t} else {\n\t\treturn post.getOwner().getKind().equals(commentOwner.getKind()) && post.getOwner().getName().equals(commentOwner.getName());\n\t}\n}", "CodeBleu_score": 28.75399410190148}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (post.getOwner().getKind().equals(commentOwner.getKind())) {\n\t\tif (post.getOwner().getKind().equals(GroupVersionKind.EMAIL)) {\n\t\t\treturn post.getOwner().getName().equals(commentOwner.getName());\n\t\t} else {\n\t\t\treturn post.getOwner().getName().equals(commentOwner.getName());\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 28.67383884494358}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tString commentOwnerName = commentOwner.getName();\n\tString commentOwnerKind = commentOwner.getKind();\n\tString postOwnerKind = post.getOwner().getKind();\n\tString postOwnerName = post.getOwner().getName();\n\n\tif (StringUtils.equals(commentOwnerKind, \"email\")) {\n\t\tOptional<User> userOptional = ExtensionGetter.userExtension().get(commentOwnerName);\n\t\tif (userOptional.isPresent()) {\n\t\t\tUser user = userOptional.get();\n\t\t\treturn StringUtils.equals(user.getKind(), postOwnerKind) && StringUtils.equals(user.getName(), postOwnerName);\n\t\t}\n\t} else {\n\t\treturn StringUtils.equals(commentOwnerName, postOwnerName);\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 39.30428887728711}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\t\tListOptions listOptions = new ListOptions();\n\tlistOptions.setSort(SortResolver.resolve(sort));\n\tlistOptions.setPageRequest(pageRequest());\n\tlistOptions.setFieldSelector(fieldSelector());\n\tlistOptions.setQuery(query());\n\treturn listOptions;\n}", "CodeBleu_score": 13.331251871695796}, {"code": "public ListOptions toListOptions(){\n\t\tListOptions listOptions = new ListOptions();\n\tServerRequest serverRequest = ServerWebExchangeUtils.getRequiredServerWebExchange(this).getRequest();\n\tServerWebExchange exchange = ServerWebExchangeUtils.getRequiredServerWebExchange(this);\n\tUser user = User.getRequired(exchange);\n\tString keyword = serverRequest.queryParam(\"keyword\").orElse(null);\n\tString ownerName = serverRequest.queryParam(\"ownerName\").orElse(null);\n\tString sortField = serverRequest.queryParam(\"sortField\").orElse(null);\n\tString sortDirection = serverRequest.queryParam(\"sortDirection\").orElse(null);\n\tString[] fields = serverRequest.queryParam(\"fields\").orElse(null);\n\tString[] labels = serverRequest.queryParam(\"labels\").orElse(null);\n\tString[] fieldSelectors = serverRequest.queryParam(\"fieldSelectors\").orElse(null);\n\tString[] labelSelectors = serverRequest.queryParam(\"labelSelectors\").orElse(null);\n\tString[] labelAndFieldSelectors = serverRequest.queryParam(\"labelAndFieldSelectors\").orElse(null);\n\tString[] labelAndFieldSelector = serverRequest.queryParam(\"labelAndFieldSelector\").orElse(null);\n\tString[] labelAndFieldSelectorList = serverRequest.queryParam(\"labelAndFieldSelectorList\").orElse(null);\n\tString[] labelAndFieldSelectorListOptions = serverRequest.queryParam(\"labelAndFieldSelectorListOptions\").orElse(null);\n\tString[] labelAndFieldSelectorListOptionsList = serverRequest.queryParam(\"labelAndFieldSelectorListOptionsList\").orElse(null);\n\tString[] labelAndFieldSelectorListOptionsListOptions = serverRequest.queryParam(\"labelAndFieldSelectorListOptionsListOptions\").orElse(null);\n\tString[] labelAndFieldSelectorListOptionsListOptionsList = serverRequest.queryParam(\"labelAndFieldSelectorListOptionsListOptionsList\").orElse(null);\n\tString[] labelAndFieldSelectorListOptionsListOptionsListOptions = serverRequest.queryParam(\"labelAndFieldSelectorListOptionsListOptionsListOptions\").orElse(null);\n\tString[] labelAndFieldSelectorListOptionsListOptionsListOptionsList = serverRequest.queryParam(\"labelAndFieldSelectorListOptionsListOptionsListOptionsList\").orElse(null);\n\tString[] labelAndFieldSelectorListOptionsListOptionsListOptionsListOptions = serverRequest.queryParam(\"labelAndField", "CodeBleu_score": 24.254773238988776}, {"code": "public ListOptions toListOptions(){\n\t\tListOptions listOptions = new ListOptions();\n\tlistOptions.setSort(sortResolver.resolve(serverRequest));\n\tlistOptions.setPage(pageRequest);\n\n\tList<FieldSelector> fieldSelectors = labelAndFieldSelectorToListOptions(serverRequest);\n\tif (!fieldSelectors.isEmpty()) {\n\t\tlistOptions.setFieldSelector(fieldSelectors);\n\t}\n\n\tif (serverRequest.queryParams().contains(\"keyword\")) {\n\t\tlistOptions.setQuery(and(contains(\"name\", serverRequest.queryParams().getFirst(\"keyword\")), contains(\"description\", serverRequest.queryParams().getFirst(\"keyword\"))));\n\t}\n\tif (serverRequest.queryParams().contains(\"owner\")) {\n\t\tlistOptions.setQuery(and(equal(\"owner.name\", serverRequest.queryParams().getFirst(\"owner\"))));\n\t}\n\n\treturn listOptions;\n}", "CodeBleu_score": 25.120401998739933}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\tAssert.notNull(commentName, \"commentName cannot be null\");\n\treturn ReactiveExtensionClient.get()\n\t\t.counter(commentName)\n\t\t.map(counter -> new CommentStats(counter.getUpvoteCount()));\n}", "CodeBleu_score": 39.61243798294485}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\treturn counterService.getCounter(commentName)\n\t\t\t.map(counter -> new CommentStats(counter.getUpvoteCount(), counter.getDownvoteCount()))\n\t\t\t.defaultIfEmpty(new CommentStats(0, 0));\n}", "CodeBleu_score": 34.07528027112665}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\treturn counterService.getCounter(commentName)\n\t\t.map(counter -> new CommentStats(commentName, counter.getUpvoteCount(), counter.getDownvoteCount()))\n\t\t.defaultIfEmpty(new CommentStats(commentName, 0, 0));\n}", "CodeBleu_score": 36.077788222485445}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\t\t// Create a new subscription for the user.\n\tSubscription subscription = new Subscription(identity.getId());\n\n\t// Set up the interest reason for the subscription.\n\tsubscription.setReason(NotificationReasonConst.REPLY);\n\n\t// Set the condition for the subscription.\n\tsubscription.setCondition(\"owner\", identity.getName());\n\n\t// Subscribe the user to the notification center.\n\tNotificationCenter.subscribe(subscription);\n}", "CodeBleu_score": 30.69247341121753}, {"code": "void subscribeReply(UserIdentity identity){\n\t\tvar subscriber = new UserSubscriber(identity);\n\tvar reason = new SubscriptionReason(NotificationReasonConst.REPLY, identity.getName());\n\tvar condition = new SubscriptionCondition(SubscriptionCondition.Type.EQUALS, identity.getName());\n\treason.setCondition(condition);\n\tsubscriber.setReason(reason);\n\tvar subscription = new Subscription(subscriber);\n\tNotificationCenter.subscribe(subscription);\n}", "CodeBleu_score": 38.414606347919324}, {"code": "void subscribeReply(UserIdentity identity){\n\t\t// Create a new subscription\n\tSubscription subscription = new Subscription();\n\t// Set the subscriber to the user identity\n\tsubscription.setSubscriber(identity);\n\t// Set the subscriber interest reason\n\tsubscription.setInterestReason(new Subscription.InterestReason()\n\t\t.setReasonType(NotificationReasonConst.REPLY_TO_ME)\n\t\t.setCondition(new Subscription.InterestReason.Condition()\n\t\t\t.setConditionType(Subscription.InterestReason.Condition.ConditionType.EQUALS)\n\t\t\t.setValue(identity.getName())));\n\t// Subscribe the user to the notification center\n\tNotificationCenter.subscribe(subscription);\n}", "CodeBleu_score": 26.98738313308476}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\t\treturn ReactiveExtensionClient.of(Comment.class)\n\t\t.update(comment)\n\t\t.retryWhen(Retry.backoff(3, Duration.ofSeconds(1))\n\t\t\t.filter(OptimisticLockingFailureException.class::isInstance)\n\t\t\t.doBeforeRetry(retryContext -> {\n\t\t\t\tretryContext.updateRetryContext(retryContext.getRetryContext()\n\t\t\t\t\t.withRetryCount(retryContext.getRetryContext().getRetryCount() + 1));\n\t\t\t})\n\t\t\t.doBeforeRetry(retryContext -> {\n\t\t\t\tComment comment1 = retryContext.getContext();\n\t\t\t\tcomment1.setApproved(true);\n\t\t\t\tcomment1.setApprovedTime(Instant.now());\n\t\t\t\tretryContext.updateContext(comment1);\n\t\t\t}));\n}", "CodeBleu_score": 31.45678547070055}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t\treturn ReactiveExtensionClient.update(comment, Comment.class, comment.getId(),\n\tcomment.toBuilder()\n\t.approved(true)\n\t.approvedTime(Instant.now())\n\t.build())\n\t.retryWhen(Retry.backoff(3, Duration.ofSeconds(5))\n\t.filter(Retry.Result::isFailure)\n\t.doBeforeRetry(retryContext -> {\n\t\tMeterUtils.meter(\"halo.extension.comment.approve.optimistic.locking.failure\", 1);\n\t}))\n\t.onErrorResume(OptimisticLockingFailureException.class, ex -> {\n\t\tMeterUtils.meter(\"halo.extension.comment.approve.optimistic.locking.failure\", 1);\n\t\treturn ReactiveExtensionClient.get(Comment.class, comment.getId())\n\t\t.flatMap(updatedComment -> {\n\t\t\tif (updatedComment.getApprovedTime()!= null) {\n\t\t\t\treturn Mono.error(new OptimisticLockingFailureException(\"The comment has been approved by another user\"));\n\t\t\t}\n\t\t\treturn approveComment(updatedComment);\n\t\t});\n\t});\n}", "CodeBleu_score": 27.39624236899232}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t\treturn ReactiveExtensionClient.forComment(comment.getId())\n\t\t\t.update(comment.withApproved(true).withApprovedTime(Instant.now()))\n\t\t\t.retryWhen(Retry.backoff(3, Duration.ofSeconds(1))\n\t\t\t\t\t.filter(OptimisticLockingFailureException.class::isInstance)\n\t\t\t\t\t.doBeforeRetry(retryContext -> {\n\t\t\t\t\t\tMeterUtils.meter(CounterService.METRIC_COMMENT_APPROVE_FAILED).mark();\n\t\t\t\t\t\tMono<Comment> updated = ReactiveExtensionClient.forComment(comment.getId())\n\t\t\t\t\t\t\t\t.get()\n\t\t\t\t\t\t\t\t.map(updatedComment -> updatedComment.withApproved(true).withApprovedTime(Instant.now()));\n\t\t\t\t\t\treturn retryContext.next(updated);\n\t\t\t\t\t})\n\t\t\t);\n}", "CodeBleu_score": 42.11355682936379}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\tif ($action instanceof MountableAction) {\n\t\t$action->mount(\n\t\t\t$this->getLivewireComponent()\n\t\t);\n\t}\n\n\tif ($action instanceof HasRecord && $this->getRecord()!== null) {\n\t\t$action->record($this->getRecord());\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 58.46681796818656}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\tif ($action instanceof MountableAction) {\n\t\t$action->mountOn($this);\n\t}\n\n\tif ($action instanceof HasRecord) {\n\t\t$action->record($this->record);\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 45.13187289449885}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\tif ($action instanceof MountableAction) {\n\t\t$action->mount($this);\n\t}\n\n\tif ($action instanceof HasRecord) {\n\t\t$action->record = $this->getRecord();\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 44.6264399275552}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t\tif (is_app_url($this->successRedirect)) {\n\t\tFilamentView::redirect($this->successRedirect);\n\t}\n\n\treturn $this;\n}", "CodeBleu_score": 29.08061330547307}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t\tif (is_app_url($this->successRedirect)) {\n\t\treturn $this;\n\t}\n\n\treturn $this->redirect($this->successRedirect);\n}", "CodeBleu_score": 28.083662196103454}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t\t$this->handleRedirect(\n\t\t$this->successRedirect?? function () {\n\t\t\treturn FilamentView::url(\n\t\t\t\t$this->successRedirect?? $this->route?? $this->redirect\n\t\t\t);\n\t\t}\n\t);\n\n\treturn $this;\n}", "CodeBleu_score": 22.14793985870669}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t\tif (is_null($record) ||!method_exists($record, 'tags')) {\n\t\treturn;\n\t}\n\n\t$tagModel = $record->tags()->getModel();\n\n\t$tagNames = $state['tags'];\n\t$tagNames = collect($tagNames)->map(function ($tagName) {\n\t\treturn AllTagTypes::get()->map(function ($tagType) use ($tagName) {\n\t\t\treturn $tagType->createTag($tagName);\n\t\t})->filter(function ($tag) {\n\t\t\treturn!is_null($tag);\n\t\t});\n\t})->flatten()->filter(function ($tag) {\n\t\treturn!is_null($tag);\n\t})->unique(function ($tag) {\n\t\treturn $tag->id;\n\t})->map(function ($tag) {\n\t\treturn $tag->name;\n\t})->toArray();\n\n\t$tagModel::whereIn('name', $tagNames)->get()->each(function ($tag) use ($record) {\n\t\t$record->tags()->attach($tag);\n\t});\n\n\t$record->tags()->whereNotIn('name', $tagNames)->get()->each(function ($tag) use ($record) {\n\t\t$record->tags()->detach($tag);\n\t});\n}", "CodeBleu_score": 40.29032551858179}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t\t$tagModelClass = AllTagTypes::get($state['type'])->tagModelClass;\n\t$tagNames = $state['tags'];\n\n\tif ($record && $record->hasTags()) {\n\t\t$tags = $tagModelClass::query()->whereIn('name', $tagNames)->get();\n\n\t\t$record->tags()->sync($tags->pluck('id'));\n\t}\n}", "CodeBleu_score": 26.019241578552986}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t\tif (! $record ||! method_exists($record, 'tags')) {\n\t\treturn;\n\t}\n\n\t$tagModelClass = config('tags.tag_model');\n\t$tagModel = new $tagModelClass();\n\n\t$tagNames = $state['tag_names'];\n\t$tagNames = array_filter($tagNames, fn ($name) => $name!== '');\n\n\t$tags = $tagModel->whereIn('name', $tagNames)->get();\n\n\t$tagsToCreate = array_diff($tagNames, $tags->pluck('name')->toArray());\n\n\t$tagsToCreate = $tagsToCreate->map(function ($tagName) use ($tagModel) {\n\t\treturn $tagModel->create(['name' => $tagName]);\n\t});\n\n\t$tags = $tags->merge($tagsToCreate);\n\n\t$record->tags()->sync($tags->pluck('id')->toArray());\n}", "CodeBleu_score": 44.26165541959709}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, repoName, err := paths.DissectRepoPath(repoPath)\n\tif err!= nil {\n\t\treturn fmt.Errorf(\"error dissecting repository path: %w\", err)\n\t}\n\n\tscope := authz.Scope{\n\t\tType: enum.ScopeType_PIPELINE,\n\t\tIdentifier: pipelineIdentifier,\n\t}\n\n\tresource := authz.Resource{\n\t\tType: enum.ResourceType_PIPELINE,\n\t\tIdentifier: pipelineIdentifier,\n\t\tSpacePath: spacePath,\n\t\tRepoName: repoName,\n\t}\n\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 65.2903378065545}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, repoName, err := paths.DissectRepoPath(repoPath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\tscope := fmt.Sprintf(\"space:%s\", spacePath)\n\tresource := fmt.Sprintf(\"repository:%s:pipeline:%s\", repoName, pipelineIdentifier)\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 46.9814867597509}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, repoName, err := paths.ParseRepoPath(repoPath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\tscope := types.Scope{\n\t\tType: enum.ScopeType_PIPELINE,\n\t\tIdentifier: pipelineIdentifier,\n\t\tSpacePath: spacePath,\n\t\tRepoName: repoName,\n\t}\n\tresource := types.Resource{\n\t\tType: enum.ResourceType_PIPELINE,\n\t\tIdentifier: pipelineIdentifier,\n\t\tSpacePath: spacePath,\n\t\tRepoName: repoName,\n\t}\n\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 62.27448132335183}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\t// Get the parent space\n\tparentSpace, err := paths.GetParentSpace(space.Path)\n\tif err!= nil {\n\t\treturn fmt.Errorf(\"failed to get parent space: %w\", err)\n\t}\n\n\t// Create a scope and resource based on the parent space and name\n\tscope := auth.Scope{\n\t\tType: enum.ScopeTypeSpace,\n\t\tName: parentSpace.Name,\n\t}\n\tresource := auth.Resource{\n\t\tType: enum.ResourceTypeSpace,\n\t\tName: space.Name,\n\t}\n\n\t// Check if the session has the specified permission for the space\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 58.99378776494692}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\t// Get the parent space\n\tparentSpace, err := paths.GetParentSpace(space.Path)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource based on the parent space and name\n\tscope := fmt.Sprintf(\"space/%s\", parentSpace.Name)\n\tresource := fmt.Sprintf(\"space/%s\", space.Name)\n\n\t// Check the permission\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 45.617007071381224}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tif space == nil {\n\t\treturn fmt.Errorf(\"space is nil\")\n\t}\n\n\tspacePath := paths.Space(space)\n\tspaceName := spacePath.Name()\n\n\t// Get the parent space\n\tparentSpace, err := GetParentSpace(spacePath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\t// Get the parent space name\n\tparentSpaceName := \"\"\n\tif parentSpace!= nil {\n\t\tparentSpaceName = parentSpace.Name\n\t}\n\n\t// Create a scope and resource based on the parent space and name\n\tscope := fmt.Sprintf(\"space:%s\", parentSpaceName)\n\tresource := fmt.Sprintf(\"space:%s\", spaceName)\n\n\t// Call the Check function with the context, authorizer, session, scope, resource, and permission\n\treturn authz.Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 47.527674470673475}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource = json.RawMessage(data)\n\t}\n\n\tvar err error\n\tvar sanitized json.RawMessage\n\tif sanitized, err = json.Marshal(data); err!= nil {\n\t\treturn nil, err\n\t}\n\n\tif err = json.Unmarshal(source, &data); err!= nil {\n\t\treturn nil, err\n\t}\n\n\tif sanitized, err = json.Marshal(data); err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn bytes.TrimSuffix(sanitized, []byte(\"\n\")), nil\n}", "CodeBleu_score": 35.544615131914945}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif source == nil {\n\t\t// If the source is empty, marshal the provided data.\n\t\tsource, err := json.Marshal(data)\n\t\tif err!= nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\t// Decode the source JSON, disallowing unknown fields, and encode the data to ensure it conforms to the required format.\n\tvar decoded map[string]any\n\tif err := json.Unmarshal(source, &decoded); err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Marshal the decoded data to JSON.\n\tsanitized, err := json.Marshal(decoded)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Remove any trailing newline from the result.\n\tsanitized = bytes.TrimSuffix(sanitized, []byte(\"\n\"))\n\n\treturn sanitized, nil\n}", "CodeBleu_score": 32.97991088101631}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif source == nil {\n\t\tsource = json.RawMessage{}\n\t\tif err := json.NewEncoder(&source).Encode(data); err!= nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tvar v interface{}\n\tif err := json.Unmarshal(source, &v); err!= nil {\n\t\treturn nil, err\n\t}\n\n\tif err := json.Unmarshal(source, &v); err!= nil {\n\t\treturn nil, err\n\t}\n\n\tsanitized, err := json.Marshal(v)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn json.RawMessage(bytes.TrimRight(sanitized, \"\n\")), nil\n}", "CodeBleu_score": 32.78593389041707}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\tif repoRef == \"\" {\n\t\treturn nil, usererror.NewBadRequestError(\"Missing repository reference\")\n\t}\n\n\trepo, err := c.store.Repository().GetByReference(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, usererror.NewNotFoundError(fmt.Sprintf(\"Repository %s not found\", repoRef))\n\t}\n\n\tif err := authz.CheckAccess(ctx, session, repo, reqPermission); err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 55.768342187516495}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.getRepo(ctx, session, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Check access permissions\n\tif!c.authz.Can(session, repo, reqPermission) {\n\t\treturn nil, usererror.NewPermissionDeniedError(fmt.Sprintf(\"session %s does not have permission %s on repository %s\", session.Username, reqPermission, repoRef))\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 39.010712412451745}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.getRepo(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\tif err = c.checkAccess(ctx, session, repo, reqPermission); err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 36.85052203145869}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindRaw: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindMarkdown: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindPipeline: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t}\n}", "CodeBleu_score": 24.85861142804076}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindRaw: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindMarkdown: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindPipeline: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t}\n}", "CodeBleu_score": 24.85861142804076}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindRaw: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindMarkdown: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindPipeline: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t}\n}", "CodeBleu_score": 24.85861142804076}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\t\tself.state.on_render = on_render\n\tif not self.state.attached then\n\t\tself.state.attached = true\n\t\tself.state.renderer:attach_buffer(self)\n\tend\n\treturn self", "CodeBleu_score": 55.430803952971154}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tif not self.state.attached_to_renderer then\n\t\tself.state.attached_to_renderer = true\n\t\tself.renderer.attach_buffer(self)\n\tend\n\tself.state.on_render = on_render\n\treturn self", "CodeBleu_score": 52.512284898613146}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tif not self.state.attached_to_renderer then\n\t\tself.state.attached_to_renderer = true\n\t\tself.state.renderer:attach_buffer(self)\n\tend\n\tself.state.on_render = on_render\n\treturn self", "CodeBleu_score": 52.73444420345238}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\t\tif not self.filename then\n\t\treturn\n\tend\n\tif not self.watcher then\n\t\tself.watcher = Watcher:new(self.filename)\n\tend\n\tself.watcher:watch(callback)", "CodeBleu_score": 28.462992839284055}, {"code": "function Buffer:watch(callback)\n\t\tif not self.filename then\n\t\treturn\n\tend\n\tlocal watcher = Watcher:new(self.filename)\n\twatcher:on('change', function(event)\n\t\tif callback then\n\t\t\tcallback(event)\n\t\tend\n\tend)\n\twatcher:on('error', function(err)\n\t\tconsole.error(err)\n\tend)", "CodeBleu_score": 34.786341589961765}, {"code": "function Buffer:watch(callback)\n\t\tif not self:isValid() then\n\t\tprint(\"Cannot watch invalid buffer\")\n\t\treturn\n\tend\n\tif not callback then\n\t\tprint(\"Cannot watch buffer without a callback function\")\n\t\treturn\n\tend\n\tlocal watcher = Watcher:new(self)\n\twatcher:watch(callback)", "CodeBleu_score": 31.340857589391547}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\t\tlocal hex = self._hex\n\tif hex then return hex end\n\n\tlocal spec = self._spec\n\tlocal attr = self._attr\n\n\tlocal hex_value = spec[attr]\n\tif hex_value then\n\t\thex = string.format('%02x%02x%02x', hex_value.r, hex_value.g, hex_value.b)\n\telse\n\t\tlocal color = api.nvim_get_hl_by_name(self._name, true)\n\t\tif color then\n\t\t\thex_value = color[attr]\n\t\t\thex = string.format('%02x%02x%02x', hex_value.r, hex_value.g, hex_value.b)\n\t\tend\n\tend\n\n\tself._hex = hex\n\treturn hex", "CodeBleu_score": 42.82682454949308}, {"code": "function Color:to_hex()\n\t\tif self.hex then\n\t\treturn self.hex\n\tend\n\n\tlocal spec = self:get_spec()\n\tlocal color_type = spec.type == 'foreground' and 'fg' or 'bg'\n\tlocal color_attr = spec.attr\n\n\tlocal hex = api.nvim_get_hl_by_name(color_attr, true)[color_type]\n\tif hex then\n\t\tself.hex = hex\n\t\treturn hex\n\tend\n\n\t-- If we get here, we didn't find the highlight color, so we'll try to convert the RGB color to hex.\n\tlocal rgb = self:get_rgb()\n\tlocal hex = string.format('#%02x%02x%02x', rgb.r, rgb.g, rgb.b)\n\tself.hex = hex\n\treturn hex", "CodeBleu_score": 55.57025881257388}, {"code": "function Color:to_hex()\n\t\tif self.hex then\n\t\treturn self.hex\n\tend\n\n\tlocal spec = self.spec\n\tlocal attr = self.attr\n\tlocal hex = self.hex\n\n\tif attr == 'fg' then\n\t\thex = spec.foreground\n\telseif attr == 'bg' then\n\t\thex = spec.background\n\telse\n\t\thex = spec.background\n\tend\n\n\tif hex then\n\t\thex = hex:to_hex()\n\telse\n\t\thex = self:get_highlight_hex()\n\tend\n\n\tself.hex = hex\n\treturn hex", "CodeBleu_score": 51.55759682590776}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\t-- Get the buffer's lines\n\tlocal lines = buffer:get_lines()\n\n\t-- Iterate through each line\n\tfor i, line in ipairs(lines) do\n\t\t-- Search for occurrences of the specified pattern\n\t\tlocal matches = line:gmatch(pattern)\n\n\t\t-- Iterate through each match\n\t\tfor match in matches do\n\t\t\t-- Apply the specified highlight to the buffer\n\t\t\tbuffer:add_highlight(hl, match)\n\t\tend\n\tend\n\n\t-- Return the namespace object\n\treturn self", "CodeBleu_score": 33.68694413575449}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tif not buffer then\n\t\tbuffer = self.buffer\n\tend\n\tif not pattern then\n\t\tpattern = self.pattern\n\tend\n\tif not hl then\n\t\thl = self.hl\n\tend\n\tlocal line_count = buffer:line_count()\n\tfor line = 0, line_count - 1 do\n\t\tlocal line_text = buffer:get_line(line)\n\t\tlocal match_start, match_end, match_text = line_text:find(pattern)\n\t\tif match_start then\n\t\t\tbuffer:add_highlight(hl, match_start, match_end)\n\t\tend\n\tend\n\treturn self", "CodeBleu_score": 42.025917675503834}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal ns = self:get_namespace(buffer)\n\tif not ns then return end\n\n\tlocal lines = vim.api.nvim_buf_get_lines(buffer, 0, -1, false)\n\tfor i, line in ipairs(lines) do\n\t\tlocal match = line:match(pattern)\n\t\tif match then\n\t\t\tvim.api.nvim_buf_add_highlight(buffer, -1, hl, i-1, 0, -1)\n\t\tend\n\tend", "CodeBleu_score": 38.2173332032161}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = self:get_virtual_text_id(buffer, row, col)\n\tvim.api.nvim_buf_set_extmark(buffer, self.sign_namespace, id, row, col, {\n\t\tvirt_text = { { text, hl } },\n\t\tvirt_text_pos = pos,\n\t\tpriority = priority,\n\t})\n\treturn id", "CodeBleu_score": 61.04639748659571}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = row.. col\n\tvim.api.nvim_buf_set_extmark(buffer, Namespace.sign_ns, id, row, col, {virt_text = { {text, hl} }, virt_text_pos = pos, priority = priority})\n\treturn id", "CodeBleu_score": 47.75045539389836}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\t-- Calculate the unique ID for the virtual text\n\tlocal id = self.utils.get_unique_id()\n\t-- Set the virtual text\n\tvim.api.nvim_buf_set_extmark(buffer, self.settings.signs.group, id, row, col, {\n\t\tvirt_text = {{text, hl}, {text, hl}},\n\t\tvirt_text_pos = pos,\n\t\tpriority = priority\n\t})\n\treturn id", "CodeBleu_score": 47.35116255059967}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = ''\n\tlocal lines = {}\n\tlocal i = 1\n\tlocal len = #output\n\twhile i <= len do\n\t\tlocal c = output:sub(i,i)\n\t\tif c == '", "CodeBleu_score": 22.569093894357927}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal lines = {}\n\tlocal line = ''\n\tfor c in output:gmatch('.') do\n\t\tif c == '", "CodeBleu_score": 10.46377699002651}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal lines = {}\n\tlocal line = \"\"\n\tfor i = 1, #output do\n\t\tlocal c = output:sub(i, i)\n\t\tif c == \"", "CodeBleu_score": 23.25031667260393}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t\t-- if a watcher already exists, return it\n\tif self.watchers[path] then\n\t\treturn self.watchers[path]\n\tend\n\n\t-- create a new watcher\n\tlocal watcher = Watcher.new()\n\n\t-- start watching the path\n\twatcher:start(path, handler)\n\n\t-- store the watcher\n\tself.watchers[path] = watcher\n\n\treturn watcher", "CodeBleu_score": 38.20941135662966}, {"code": "function Watcher:watch_file(path, handler)\n\t\t-- If the path is already being watched, return the existing watcher.\n\tif self.watchers[path] then\n\t\treturn self.watchers[path]\n\tend\n\n\t-- Create a new watcher and add it to the list of watchers.\n\tlocal watcher = Watcher.new(path, handler)\n\tself.watchers[path] = watcher\n\n\t-- Start watching the path with the given handler.\n\twatcher:start()\n\n\t-- Return the watcher instance.\n\treturn watcher", "CodeBleu_score": 38.269276857791226}, {"code": "function Watcher:watch_file(path, handler)\n\t\tlocal watcher = self.watchers[path]\n\tif not watcher then\n\t\twatcher = Watcher:new(path, handler)\n\t\tself.watchers[path] = watcher\n\tend\n\treturn watcher", "CodeBleu_score": 36.5629187466726}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t\tlocal buffer_lines = self:buffer_lines()\n\tlocal hunks = self:git_object():hunks()\n\tlocal signs = {}\n\n\t-- If there's an error, return it.\n\tif hunks == nil then\n\t\treturn hunks\n\tend\n\n\t-- For each hunk, set up signs for each line in the hunk.\n\tfor _, hunk in ipairs(hunks) do\n\t\tfor i = hunk.start_line, hunk.end_line do\n\t\t\tlocal line = buffer_lines[i]\n\t\t\tlocal sign_type = self:sign_type(line)\n\t\t\tlocal sign_priority = self:sign_priority(line)\n\t\t\tlocal sign_text = self:sign_text(line)\n\n\t\t\t-- Add the sign to the list.\n\t\t\ttable.insert(signs, {\n\t\t\t\tline = i,\n\t\t\t\tsign_type = sign_type,\n\t\t\t\tsign_priority = sign_priority,\n\t\t\t\tsign_text = sign_text\n\t\t\t})\n\t\tend\n\tend\n\n\t-- Update the buffer's signs.\n\tself:set_signs(signs)\n\n\t-- Return the hunks.\n\treturn hunks", "CodeBleu_score": 37.18648298308717}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal buffer = self.buffer\n\tlocal git = self.git\n\tlocal lines = buffer:lines()\n\tlocal hunks = git:hunks(lines)\n\tlocal signs = {}\n\tlocal priority = 0\n\tfor i, hunk in ipairs(hunks) do\n\t\tlocal start = hunk.start\n\t\tlocal end_ = hunk.end_\n\t\tlocal type = hunk.type\n\t\tfor j = start, end_ do\n\t\t\tlocal line = lines[j]\n\t\t\tlocal sign = {\n\t\t\t\tpriority = priority,\n\t\t\t\ttype = type,\n\t\t\t\tline = j,\n\t\t\t\ttext = line,\n\t\t\t}\n\t\t\ttable.insert(signs, sign)\n\t\t\tpriority = priority + 1\n\t\tend\n\tend\n\tbuffer:signs_clear()\n\tbuffer:signs_add(signs)\n\treturn hunks", "CodeBleu_score": 39.00878322760406}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal hunks = self.git_object:hunks()\n\tlocal hunk_lines = {}\n\tfor i,hunk in ipairs(hunks) do\n\t\ttable.insert(hunk_lines, {start = hunk.start, finish = hunk.finish})\n\tend\n\tself.buffer:set_signs(self.settings.signs.hunk, hunk_lines)\n\treturn hunks", "CodeBleu_score": 18.427673082450696}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal temp_file_name = self.git_dir.. '/.temp_patch_file'\n\tlocal temp_file = io.open(temp_file_name, 'w')\n\tif not temp_file then\n\t\treturn nil, 'Cannot open temporary file '.. temp_file_name..'for writing.'\n\tend\n\ttemp_file:write(patch.content)\n\ttemp_file:close()\n\tlocal status, result = self:stage_hunk_from_file(temp_file_name)\n\tfs.remove(temp_file_name)\n\treturn status, result", "CodeBleu_score": 38.36111349738003}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal temp_file = self:create_temp_file()\n\tlocal file = io.open(temp_file, \"w\")\n\tfile:write(patch:get_content())\n\tfile:close()\n\tlocal result = self:stage_hunk_from_patch_file(temp_file, patch:get_old_file(), patch:get_new_file(), patch:get_old_line(), patch:get_new_line())\n\tos.remove(temp_file)\n\treturn result", "CodeBleu_score": 38.46499333542044}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal hunk = patch:get_hunk()\n\tlocal patch_file = self:create_temp_file()\n\tlocal hunk_file = self:create_temp_file()\n\tlocal patch_content = patch:get_content()\n\tlocal hunk_content = hunk:get_content()\n\tpatch_file:write(patch_content)\n\tpatch_file:close()\n\thunk_file:write(hunk_content)\n\thunk_file:close()\n\tlocal result = self:stage_hunk(hunk_file:get_path(), patch_file:get_path())\n\tpatch_file:remove()\n\thunk_file:remove()\n\treturn result", "CodeBleu_score": 39.77077206471616}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\t// Create OAuth service\n\tDefaultApi20 api = new DefaultApi20();\n\tOAuth20ServiceImpl service = new OAuth20ServiceImpl(api);\n\n\t// Create OAuth request\n\tOAuthRequest request = new OAuthRequest(Verb.POST, api.getAccessTokenEndpoint());\n\n\t// Add the necessary authentication header and body parameters\n\tString encodedConsumerSecret = Base64.encode(api.getConsumerSecret().getBytes(StandardCharsets.UTF_8));\n\trequest.addHeader(OAuthConstants.HEADER_AUTHORIZATION, \"Basic \" + encodedConsumerSecret);\n\trequest.addBodyParameter(OAuthConstants.BODY_PARAMETER_CLIENT_ID, api.getApiKey());\n\trequest.addBodyParameter(OAuthConstants.BODY_PARAMETER_CLIENT_SECRET, api.getConsumerSecret());\n\trequest.addBodyParameter(OAuthConstants.BODY_PARAMETER_GRANT_TYPE, \"authorization_code\");\n\trequest.addBodyParameter(OAuthConstants.BODY_PARAMETER_CODE, verifier.getValue());\n\trequest.addBodyParameter(OAuthConstants.BODY_PARAMETER_REDIRECT_URI, api.getCallback());\n\n\t// Send the request\n\tResponse response = service.execute(request);\n\n\t// Extract the access token from the response body using the API's access token extractor\n\treturn api.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 45.00379298318928}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\tOAuthConfig config = new OAuthConfig(API_KEY, API_SECRET);\n\tDefaultApi20 api = new DefaultApi20();\n\tOAuth20ServiceImpl service = new OAuth20ServiceImpl(api, config);\n\tOAuthRequest request = new OAuthRequest(Verb.POST, ACCESS_TOKEN_URL);\n\tString authHeader = \"Basic \" + Base64.encode(String.format(\"%s:%s\", API_KEY, API_SECRET).getBytes(StandardCharsets.UTF_8));\n\trequest.addHeader(OAuthConstants.HEADER_AUTHORIZATION, authHeader);\n\trequest.addBodyParameter(OAuthConstants.CLIENT_ID, API_KEY);\n\trequest.addBodyParameter(OAuthConstants.CLIENT_SECRET, API_SECRET);\n\trequest.addBodyParameter(OAuthConstants.GRANT_TYPE, OAuthConstants.AUTHORIZATION_CODE);\n\trequest.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n\tResponse response = service.getAccessToken(request, requestToken);\n\treturn api.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 46.98891262650554}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\tOAuthConfig config = new OAuthConfig(API_KEY, API_SECRET, REQUEST_TOKEN_URL, ACCESS_TOKEN_URL, AUTHORIZE_URL);\n\tDefaultApi20 api = new DefaultApi20();\n\tOAuth20ServiceImpl service = new OAuth20ServiceImpl(api, config);\n\tOAuthRequest request = new OAuthRequest(Verb.POST, ACCESS_TOKEN_URL);\n\trequest.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n\trequest.addBodyParameter(OAuthConstants.CLIENT_ID, API_KEY);\n\trequest.addBodyParameter(OAuthConstants.CLIENT_SECRET, API_SECRET);\n\trequest.addBodyParameter(OAuthConstants.GRANT_TYPE, \"authorization_code\");\n\trequest.addHeader(OAuthConstants.CONTENT_TYPE, \"application/x-www-form-urlencoded\");\n\tservice.signRequest(requestToken, request);\n\tResponse response = request.send();\n\treturn service.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 51.70513308885612}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n\tcredsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(credentials.getUsername(), credentials.getPassword()));\n\tcontext.setCredentialsProvider(credsProvider);\n\tAuthCache authCache = new BasicAuthCache();\n\tauthCache.put(host, new BasicScheme());\n\tcontext.setAuthCache(authCache);\n\tLOGGER.log(Level.FINE, \"Added host {0} to auth cache\", host);\n}", "CodeBleu_score": 64.73073695503871}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\tCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n\tcredentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(username, password));\n\tcontext.setCredentialsProvider(credentialsProvider);\n\tAuthCache authCache = new BasicAuthCache();\n\tauthCache.put(host, new BasicScheme());\n\tcontext.setAuthCache(authCache);\n\tLOGGER.log(Level.INFO, \"Added host {0} to auth cache\", host);\n}", "CodeBleu_score": 69.16282790029122}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n\tUsernamePasswordCredentials creds = new UsernamePasswordCredentials(credentials.getUsername(), credentials.getPassword());\n\tcredsProvider.setCredentials(AuthScope.ANY, creds);\n\tAuthCache authCache = new BasicAuthCache();\n\tauthCache.put(host, new BasicScheme());\n\tcontext.setCredentialsProvider(credsProvider);\n\tcontext.setAuthCache(authCache);\n\tlog.log(Level.FINE, \"Added {0} to auth cache\", host);\n}", "CodeBleu_score": 64.83969142855844}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t\tJenkins jenkins = Jenkins.getInstance();\n\tif (jenkins == null) {\n\t\tthrow new IllegalStateException(\"Jenkins instance not found\");\n\t}\n\tAvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(AvatarCache.class);\n\tif (cache == null) {\n\t\tthrow new IllegalStateException(\"Avatar cache not found\");\n\t}\n\tString key = cache.generateKey(source, size);\n\tcache.seed(source, size);\n\tString url = jenkins.getRootUrl() + \"avatar/\" + URLEncoder.encode(key, StandardCharsets.UTF_8.name()) + \"/\" + size;\n\treturn url;\n}", "CodeBleu_score": 49.27144367144925}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t\tJenkins jenkins = Jenkins.getInstance();\n\tif (jenkins == null) {\n\t\tthrow new IllegalStateException(\"Jenkins instance is null\");\n\t}\n\tAvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(AvatarCache.class);\n\tif (cache == null) {\n\t\tthrow new IllegalStateException(\"AvatarCache instance is null\");\n\t}\n\tString key = buildCacheKey(source, size);\n\tcache.seed(key, source, size);\n\tString url = String.format(\"%s/avatar/%s/%s\", jenkins.getRootUrl(), URLEncoder.encode(key, StandardCharsets.UTF_8), size);\n\treturn url;\n}", "CodeBleu_score": 47.31546025731458}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t\tif (source.getCache() == null) {\n\t\tthrow new IllegalStateException(\"Avatar cache not configured\");\n\t}\n\tString key = source.getKey(size);\n\ttry {\n\t\tsource.getCache().seed(key, source.getAvatar(size));\n\t} catch (IOException e) {\n\t\tthrow new IllegalStateException(\"Failed to seed avatar cache\", e);\n\t}\n\treturn Jenkins.get().getRootUrl() + \"avatar/\" + URLEncoder.encode(key, StandardCharsets.UTF_8.name()) + \"/\" + size;\n}", "CodeBleu_score": 33.52237163409505}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\nthis.image = image;\nthis.lastModified = lastModified;\n}", "CodeBleu_score": 17.434422944424384}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t\tthis.source = source;\n\tthis.image = image;\n\tthis.lastModified = lastModified < 0? System.currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 35.625797817948275}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t\tthis.source = source;\n\tthis.image = image;\n\tthis.lastModified = lastModified;\n}", "CodeBleu_score": 17.59737390528727}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false;\n\t}\n\ttry {\n\t\tif (future.isDone()) {\n\t\t\tAvatarImage image = future.get();\n\t\t\tif (image!= null) {\n\t\t\t\tcache.put(key, image);\n\t\t\t\tlastModified = image.lastModified;\n\t\t\t}\n\t\t\tfuture = null;\n\t\t}\n\t} catch (InterruptedException e) {\n\t\tfuture = null;\n\t} catch (ExecutionException e) {\n\t\tfuture = null;\n\t}\n\treturn future!= null;\n}", "CodeBleu_score": 45.589748788611494}, {"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false;\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\tAvatarImage cacheEntry = future.get();\n\t\t\timage = cacheEntry.image;\n\t\t\tlastModified = cacheEntry.lastModified;\n\t\t\tfuture = null;\n\t\t} catch (InterruptedException e) {\n\t\t\treturn true;\n\t\t} catch (ExecutionException e) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn true;\n}", "CodeBleu_score": 48.59435319170612}, {"code": "private synchronized boolean pending(){\n\t\tFuture<AvatarImage> f = pending;\n\tif (f == null) {\n\t\treturn false;\n\t}\n\ttry {\n\t\tAvatarImage image = f.get();\n\t\tif (image!= null) {\n\t\t\tthis.image = image.image;\n\t\t\tthis.lastModified = image.lastModified;\n\t\t\tpending = null;\n\t\t}\n\t\treturn false;\n\t} catch (InterruptedException e) {\n\t\treturn true;\n\t} catch (ExecutionException e) {\n\t\treturn true;\n\t}\n}", "CodeBleu_score": 39.745148775837926}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\n}", "CodeBleu_score": 9.566626017162672}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\tString avatarUrl = null;\n\tString avatarHash = null;\n\tString avatarSize = null;\n\tString avatarType = null;\n\tString avatarName = null;\n\tString avatarEmail = null;\n\tString avatarColor = null;\n\tString avatarFallback = null;\n\tString avatarFallbackSize = null;\n\tString avatarFallbackType = null;\n\tString avatarFallbackName = null;\n\tString avatarFallbackEmail = null;\n\tString avatarFallbackColor = null;\n\tString avatarFallbackDefault = null;\n\tString avatarFallbackDefaultSize = null;\n\tString avatarFallbackDefaultType = null;\n\tString avatarFallbackDefaultName = null;\n\tString avatarFallbackDefaultEmail = null;\n\tString avatarFallbackDefaultColor = null;\n\tString avatarFallbackDefaultImage = null;\n\tString avatarFallbackDefaultImageSize = null;\n\tString avatarFallbackDefaultImageType = null;\n\tString avatarFallbackDefaultNameImage = null;\n\tString avatarFallbackDefaultNameImageSize = null;\n\tString avatarFallbackDefaultNameImageType = null;\n\tString avatarFallbackDefaultEmailImage = null;\n\tString avatarFallbackDefaultEmailImageSize = null;\n\tString avatarFallbackDefaultEmailImageType = null;\n\tString avatarFallbackDefaultColorImage = null;\n\tString avatarFallbackDefaultColorImageSize = null;\n\tString avatarFallbackDefaultColorImageType = null;\n\tString avatarFallbackDefaultImageName = null;\n\tString avatarFallbackDefaultImageEmail = null;\n\tString avatarFallbackDefaultImageColor = null;\n\tString avatarFallbackDefaultImageSizeName = null;\n\tString avatarFallbackDefaultImageSizeEmail = null;\n\tString avatarFallbackDefaultImageSizeColor = null;\n\tString avatarFallbackDefaultImageTypeName = null;\n\tString avatarFallbackDefaultImageTypeEmail = null;\n\tString avatarFallbackDefaultImageTypeColor = null;\n\tString avatarFallbackDefaultImageNameEmail = null;\n\tString avatarFallbackDefaultImageNameColor = null;\n\tString avatarFallbackDefaultImageEmailColor = null;\n\tString avatarFallbackDefaultImageNameEmailColor = null;\n\tString avatarFallbackDefaultImageNameEmailColorSize = null;\n\tString avatarFallbackDefaultImageNameEmailColorSizeType = null;\n\tString avatarFallbackDefaultImageNameEmailColorSizeTypeSize = null;\n\tString avatarFallbackDefaultImageNameEmailColorSizeTypeSizeType = null", "CodeBleu_score": 10.178374065458847}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\tString avatarUrl = req.getParameter(\"avatarUrl\");\n\tString size = req.getParameter(\"size\");\n\tString fallback = req.getParameter(\"fallback\");\n\tString fallbackSize = req.getParameter(\"fallbackSize\");\n\tString fallbackColor = req.getParameter(\"fallbackColor\");\n\tString fallbackText = req.getParameter(\"fallbackText\");\n\tString fallbackTextSize = req.getParameter(\"fallbackTextSize\");\n\tString fallbackTextColor = req.getParameter(\"fallbackTextColor\");\n\tString fallbackTextFont = req.getParameter(\"fallbackTextFont\");\n\tString fallbackTextPosition = req.getParameter(\"fallbackTextPosition\");\n\tString fallbackTextAlignment = req.getParameter(\"fallbackTextAlignment\");\n\tString fallbackTextMargin = req.getParameter(\"fallbackTextMargin\");\n\tString fallbackTextVAlign = req.getParameter(\"fallbackTextVAlign\");\n\tString fallbackTextHAlign = req.getParameter(\"fallbackTextHAlign\");\n\tString fallbackTextRotation = req.getParameter(\"fallbackTextRotation\");\n\tString fallbackTextOpacity = req.getParameter(\"fallbackTextOpacity\");\n\tString fallbackTextShadow = req.getParameter(\"fallbackTextShadow\");\n\tString fallbackTextShadowColor = req.getParameter(\"fallbackTextShadowColor\");\n\tString fallbackTextShadowBlur = req.getParameter(\"fallbackTextShadowBlur\");\n\tString fallbackTextShadowOffsetX = req.getParameter(\"fallbackTextShadowOffsetX\");\n\tString fallbackTextShadowOffsetY = req.getParameter(\"fallbackTextShadowOffsetY\");\n\tString fallbackTextStroke = req.getParameter(\"fallbackTextStroke\");\n\tString fallbackTextStrokeColor = req.getParameter(\"fallbackTextStrokeColor\");\n\tString fallbackTextStrokeWidth = req.getParameter(\"fallbackTextStrokeWidth\");\n\tString fallbackTextStrokeLinecap = req.getParameter(\"fallbackTextStrokeLinecap\");\n\tString fallbackTextStrokeLinejoin = req.getParameter(\"fallbackTextStrokeLinejoin\");\n\tString fallbackTextStrokeMiterlimit = req.getParameter(\"fallbackTextStrokeMiterlimit\");\n\tString fallbackTextStrokeDasharray = req.getParameter(\"fallbackTextStrokeDasharray\");\n\tString fallbackTextStrokeDashoffset = req.getParameter(\"fallbackTextStrokeDashoffset\");\n\tString fallbackTextStrokeOpacity = req.getParameter(\"fallbackTextStrokeOpacity\");\n\tString fallbackTextStrokeLinecap = req.getParameter(\"fallbackTextStrokeLinecap\");\n\tString fallbackTextStrokeLinejoin = req.getParameter(\"fallbackTextStrokeLinejoin", "CodeBleu_score": 21.54486251810866}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t\tthis.enableCache = enableCache;\n\tthis.teamCacheDuration = teamCacheDuration;\n\tthis.repositoriesCacheDuration = repositoriesCacheDuration;\n\tthis.owner = owner;\n\tthis.projectKey = projectKey;\n\tthis.repositoryName = repositoryName;\n\tthis.authenticator = authenticator;\n\tthis.httpClientBuilder = HttpClientBuilder.create();\n\tthis.httpClientBuilder.setRetryHandler(new StandardHttpRequestRetryHandler(3, SECONDS.toMillis(10)));\n\tthis.httpClientBuilder.setKeepAliveStrategy(new BitbucketKeepAliveStrategy());\n\tthis.httpClientBuilder.setConnectionManager(new PoolingHttpClientConnectionManager(100, SECONDS.toMillis(10), MINUTES.toMillis(5)));\n\tthis.httpClientBuilder.setSocketConfig(SocketConfig.custom().setSoTimeout(10000).build());\n\tthis.httpClientBuilder.setDefaultRequestConfig(RequestConfig.custom().setSocketTimeout(10000).setConnectTimeout(10000).build());\n\tif (authenticator!= null) {\n\t\tthis.httpClientBuilder.setDefaultCredentialsProvider(new BasicCredentialsProvider());\n\t\tthis.httpClientBuilder.setDefaultAuthSchemeRegistry(authenticator.getRegistry());\n\t\tthis.httpClientBuilder.setDefaultCookieStore(authenticator.getCookieStore());\n\t}\n\tthis.httpClientBuilder.setProxy(getProxy());\n}", "CodeBleu_score": 40.8926354157748}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t\tthis.enableCache = enableCache;\n\tthis.teamCacheDuration = teamCacheDuration;\n\tthis.repositoriesCacheDuration = repositoriesCacheDuration;\n\tthis.owner = owner;\n\tthis.projectKey = projectKey;\n\tthis.repositoryName = repositoryName;\n\tthis.authenticator = authenticator;\n\n\t// Set up HTTP client with keep-alive strategy, connection manager, and retry handler\n\tPoolingHttpClientConnectionManager cm = new PoolingHttpClientConnectionManager();\n\tcm.setMaxTotal(100);\n\tcm.setDefaultMaxPerRoute(50);\n\tcm.setValidateAfterInactivity(30000);\n\tcm.setDefaultSocketConfig(SocketConfig.custom().setSoTimeout(10000).build());\n\tRequestConfig requestConfig = RequestConfig.custom()\n\t\t\t.setSocketTimeout(10000)\n\t\t\t.setConnectTimeout(10000)\n\t\t\t.setConnectionRequestTimeout(10000)\n\t\t\t.build();\n\thttpClient = HttpClientBuilder.create()\n\t\t\t.setConnectionManager(cm)\n\t\t\t.setRetryHandler(new StandardHttpRequestRetryHandler(3, SECONDS))\n\t\t\t.setDefaultRequestConfig(requestConfig)\n\t\t\t.build();\n\n\t// Set up client proxy parameters\n\tProxyConfiguration proxy = Jenkins.getActiveInstance().proxy;\n\tif (proxy!= null) {\n\t\thttpClient.setProxy(new HttpHost(proxy.name, proxy.port));\n\t}\n}", "CodeBleu_score": 38.95891590528103}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t\n//        this.authenticator = authenticator;", "CodeBleu_score": 7.452943378195897}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\tBitbucketPullRequestCommits pullRequestCommits = pullRequest.getCommits();\n\tBitbucketPullRequestCommit sourceCommit = pullRequestCommits.getSourceCommit();\n\tBitbucketPullRequestCommit destinationCommit = pullRequestCommits.getDestinationCommit();\n\tBitbucketCloudBranch sourceBranch = sourceCommit.getBranch();\n\tBitbucketCloudBranch destinationBranch = destinationCommit.getBranch();\n\tif (sourceBranch!= null) {\n\t\ttry {\n\t\t\tBitbucketCloudCommit sourceCommitNode = getBitbucketApi().getCommit(sourceBranch.getRepository(), sourceBranch.getBranchName(), sourceCommit.getHash());\n\t\t\tsourceBranch.setRawNode(sourceCommitNode.getNode());\n\t\t} catch (BitbucketException e) {\n\t\t\tLOGGER.log(Level.WARNING, \"Could not retrieve source branch \" + sourceBranch.getBranchName() + \" for pull request \" + pullRequest.getId(), e);\n\t\t}\n\t}\n\tif (destinationBranch!= null) {\n\t\ttry {\n\t\t\tBitbucketCloudCommit destinationCommitNode = getBitbucketApi().getCommit(destinationBranch.getRepository(), destinationBranch.getBranchName(), destinationCommit.getHash());\n\t\t\tdestinationBranch.setRawNode(destinationCommitNode.getNode());\n\t\t} catch (BitbucketException e) {\n\t\t\tLOGGER.log(Level.WARNING, \"Could not retrieve destination branch \" + destinationBranch.getBranchName() + \" for pull request \" + pullRequest.getId(), e);\n\t\t}\n\t}\n}", "CodeBleu_score": 30.420205560197218}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\tif (pullRequest.getSource()!= null) {\n\t\tBitbucketCloudBranch sourceBranch = getBranch(pullRequest.getSource().getRepository().getSlug(), pullRequest.getSource().getBranch().getName());\n\t\tif (sourceBranch!= null) {\n\t\t\tsourceBranch.setRawNode(pullRequest.getSource().getCommit().getHash());\n\t\t\tsourceBranch.setCommitClosure(new BitbucketPullRequestCommit(pullRequest));\n\t\t}\n\t}\n\tif (pullRequest.getDestination()!= null) {\n\t\tBitbucketCloudBranch destinationBranch = getBranch(pullRequest.getDestination().getRepository().getSlug(), pullRequest.getDestination().getBranch().getName());\n\t\tif (destinationBranch!= null) {\n\t\t\tdestinationBranch.setRawNode(pullRequest.getDestination().getCommit().getHash());\n\t\t\tdestinationBranch.setCommitClosure(new BitbucketPullRequestCommit(pullRequest));\n\t\t}\n\t}\n}", "CodeBleu_score": 38.10813325085653}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\tBitbucketPullRequestCommits commits = pullRequest.getCommits();\n\tBitbucketPullRequestCommit sourceCommit = commits.getSourceCommit();\n\tBitbucketPullRequestCommit destinationCommit = commits.getDestinationCommit();\n\tif (sourceCommit!= null) {\n\t\tBitbucketCloudCommit sourceCommitNode = sourceCommit.getCommit();\n\t\tif (sourceCommitNode!= null) {\n\t\t\tBitbucketCloudBranch sourceBranch = new BitbucketCloudBranch(sourceCommitNode.getBranch(), sourceCommitNode.getCommit());\n\t\t\tBitbucketCloudRepository sourceRepository = sourceBranch.getRepository();\n\t\t\tBitbucketCloudWorkspace sourceWorkspace = sourceRepository.getWorkspace();\n\t\t\tSCMSource sourceSCMSource = getSCMSource(sourceWorkspace, sourceRepository);\n\t\t\tif (sourceSCMSource!= null) {\n\t\t\t\tsourceSCMSource.setCommitClosure(new BitbucketSCMCommitClosure(sourceBranch));\n\t\t\t}\n\t\t}\n\t}\n\tif (destinationCommit!= null) {\n\t\tBitbucketCloudCommit destinationCommitNode = destinationCommit.getCommit();\n\t\tif (destinationCommitNode!= null) {\n\t\t\tBitbucketCloudBranch destinationBranch = new BitbucketCloudBranch(destinationCommitNode.getBranch(), destinationCommitNode.getCommit());\n\t\t\tBitbucketCloudRepository destinationRepository = destinationBranch.getRepository();\n\t\t\tBitbucketCloudWorkspace destinationWorkspace = destinationRepository.getWorkspace();\n\t\t\tSCMSource destinationSCMSource = getSCMSource(destinationWorkspace, destinationRepository);\n\t\t\tif (destinationSCMSource!= null) {\n\t\t\t\tdestinationSCMSource.setCommitClosure(new BitbucketSCMCommitClosure(destinationBranch));\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 29.30533301076891}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration location = JenkinsLocationConfiguration.get();\n\tString rootURL = null;\n\tif (location!= null && location.getUrl()!= null) {\n\t\tDisplayURLProvider displayURLProvider = DisplayURLProvider.get();\n\t\tif (displayURLProvider!= null) {\n\t\t\trootURL = displayURLProvider.getRunURL(build);\n\t\t}\n\t}\n\tif (rootURL == null) {\n\t\tthrow new IllegalStateException(\"Unable to retrieve Jenkins root URL.\");\n\t}\n\treturn rootURL;\n}", "CodeBleu_score": 52.162003290990185}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration location = JenkinsLocationConfiguration.get();\n\tString url = location.getUrl();\n\tif (StringUtils.isBlank(url)) {\n\t\tthrow new IllegalStateException(\"Jenkins URL not configured\");\n\t}\n\tDisplayURLProvider displayUrlProvider = DisplayURLProvider.get();\n\tif (displayUrlProvider == null) {\n\t\tthrow new IllegalStateException(\"Display URL provider not configured\");\n\t}\n\ttry {\n\t\treturn displayUrlProvider.getRunURL(build);\n\t} catch (IOException e) {\n\t\tthrow new IllegalStateException(\"Failed to get display URL for build\", e);\n\t}\n}", "CodeBleu_score": 46.39611735235475}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration locationConfiguration = JenkinsLocationConfiguration.get();\n\tString rootURL = null;\n\tif (locationConfiguration!= null) {\n\t\trootURL = locationConfiguration.getUrl();\n\t}\n\tif (StringUtils.isEmpty(rootURL)) {\n\t\tthrow new IllegalStateException(\"Jenkins Location Configuration not found. Please check if the Jenkins URL is configured correctly.\");\n\t}\n\tDisplayURLProvider displayURLProvider = DisplayURLProvider.get();\n\tif (displayURLProvider!= null) {\n\t\trootURL = displayURLProvider.getRunURL(build);\n\t}\n\treturn rootURL;\n}", "CodeBleu_score": 43.20556528959279}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\tif (StringUtils.isBlank(url)) {\n\t\tthrow new IllegalStateException(\"URL must not be blank\");\n\t}\n\ttry {\n\t\tURL jenkinsURL = new URL(url);\n\t\tif (jenkinsURL.getHost().equals(\"localhost\") || jenkinsURL.getHost().equals(\"unconfigured-jenkins-location\")) {\n\t\t\tthrow new IllegalStateException(\"URL must not use localhost or unconfigured-jenkins-location as the host\");\n\t\t}\n\t\tif (bitbucket.isBitbucketCloud() &&!jenkinsURL.getHost().contains(\".\")) {\n\t\t\tthrow new IllegalStateException(\"URL must be fully qualified for Bitbucket Cloud API clients\");\n\t\t}\n\t\treturn jenkinsURL.toString();\n\t} catch (MalformedURLException e) {\n\t\tthrow new IllegalStateException(\"URL is malformed\", e);\n\t}\n}", "CodeBleu_score": 57.67447352691363}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\ttry {\n\t\tURL u = new URL(url);\n\t\tString host = u.getHost();\n\t\tif (host == null || host.equals(\"localhost\") || host.equals(\"unconfigured-jenkins-location\")) {\n\t\t\tthrow new IllegalStateException(\"The Jenkins URL is invalid. It must be a fully qualified URL and must not use \\\"localhost\\\" or \\\"unconfigured-jenkins-location\\\" as the host.\");\n\t\t}\n\t\tif (bitbucket.isCloud() &&!host.contains(\".\")) {\n\t\t\tthrow new IllegalStateException(\"The Jenkins URL is invalid. The host must be fully qualified for Bitbucket Cloud API clients.\");\n\t\t}\n\t} catch (MalformedURLException e) {\n\t\tthrow new IllegalStateException(\"The Jenkins URL is invalid. It must be a valid URL.\", e);\n\t}\n\treturn url;\n}", "CodeBleu_score": 54.070911424816835}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\tif (StringUtils.isBlank(url)) {\n\t\tthrow new IllegalStateException(\"Bitbucket URL is blank\");\n\t}\n\ttry {\n\t\tURL u = new URL(url);\n\t\tif (u.getProtocol().equals(\"http\") || u.getProtocol().equals(\"https\")) {\n\t\t\tif (bitbucket == BitbucketApi.CLOUD) {\n\t\t\t\tif (!u.getHost().endsWith(\".bitbucket.org\")) {\n\t\t\t\t\tthrow new IllegalStateException(\"Bitbucket URL is not fully qualified\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (u.getHost().equals(\"localhost\") || u.getHost().equals(\"unconfigured-jenkins-location\")) {\n\t\t\t\tthrow new IllegalStateException(\"Bitbucket URL is not valid\");\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new IllegalStateException(\"Bitbucket URL is not valid\");\n\t\t}\n\t} catch (MalformedURLException e) {\n\t\tthrow new IllegalStateException(\"Bitbucket URL is not valid\");\n\t}\n\treturn url;\n}", "CodeBleu_score": 61.448419858804115}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\titbucketBuildStatus.Builder statusBuilder = new BitbucketBuildStatus.Builder();", "CodeBleu_score": 7.437268781426074}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\titbucketCloudApiClient client = source.getBitbucketClient();\nif (client == null) {\nreturn;\n}\nif (source.isNotificationsDisabled()) {\nlistener.getLogger().println(\"Bitbucket notifications are disabled\");\nreturn;\n}\nSCMRevision revision = source.resolve(build);\nif (revision == null) {\nlistener.getLogger().println(\"No SCM revision found for build\");\nreturn;\n}\nString revisionHash = revision.getHash();\nif (StringUtils.isBlank(revisionHash)) {\nlistener.getLogger().println(\"No revision hash found for build\");\nreturn;\n}\nlistener.getLogger().println(\"Sending Bitbucket build status for \" + revision.getSha1());\nString buildKey = null;\nif (revision instanceof SCMRevisionAction) {\nbuildKey = ((SCMRevisionAction) revision).getBuildKey();\n}\nif (StringUtils.isBlank(buildKey)) {\nbuildKey = revisionHash;\n}\nBitbucketBuildStatus status = new BitbucketBuildStatus(buildKey, build.getDisplayName(), build.getAbsoluteUrl(),\nbuild.getResult());\nBitbucketApi api = client.getApi();\nif (api!= null) {\napi.createBuildStatus(status);\n}\n}", "CodeBleu_score": 38.15858144577968}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\titbucketBuildStatus buildStatus = new BitbucketBuildStatus();", "CodeBleu_score": 7.034033809467258}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\tString folderName = StringUtils.defaultIfBlank(build.getParent().getDisplayName(), build.getParent().getName());\n if (shareBuildKeyBetweenBranchAndPR) {\n return folderName + \"-\" + branch;\n }\n return folderName;\n }", "CodeBleu_score": 44.138773353538355}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\tString jobName = build.getParent().getFullName();\n String buildKey = jobName;\n if (shareBuildKeyBetweenBranchAndPR) {\n buildKey = jobName + \"/\" + branch;\n }\n return buildKey;\n }", "CodeBleu_score": 34.844328943620155}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\tString key = StringUtils.join(new String[] {build.getParent().getFullName(), branch}, \"/\");\n if (shareBuildKeyBetweenBranchAndPR) {\n return key;\n } else {\n return build.getDisplayName();\n }\n }", "CodeBleu_score": 41.16306178341065}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\tif (serverUrl == null) {\nserverUrl = BitbucketServerEndpoint.getBitbucketServerUrl();\n}\nif (serverUrl == null) {\nLOGGER.log(Level.WARNING, \"No Bitbucket Server URL set. This is required for BitbucketSCMNavigator to function.\");\n}\nif (traits == null) {\nif (isLegacy) {\nif (StringUtils.isBlank(repositoryOwner)) {\ntraits = new ArrayList<>();\n} else {\ntraits = Arrays.asList(new RegexSCMSourceFilterTrait(repositoryOwner), new WildcardSCMHeadFilterTrait(repositoryOwner));\n}\n} else {\ntraits = Collections.emptyList();\n}\n}\nreturn this;\n}", "CodeBleu_score": 29.69638915727288}, {"code": "private Object readResolve() throws ObjectStreamException{\n\tif (StringUtils.isBlank(serverUrl)) {", "CodeBleu_score": 2.280330697314268}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t\tif (StringUtils.isBlank(serverUrl)) {\n\t\tserverUrl = BitbucketServerEndpoint.DEFAULT_SERVER_URL;\n\t\tLOGGER.log(Level.WARNING, \"The server URL for BitbucketSCMNavigator has not been set. The default value will be used: \" + BitbucketServerEndpoint.DEFAULT_SERVER_URL);\n\t}\n\n\tif (StringUtils.isBlank(credentialsId)) {\n\t\tLOGGER.log(Level.WARNING, \"The credentials ID for BitbucketSCMNavigator has not been set. The default value will be used: \" + BitbucketServerEndpoint.DEFAULT_CREDENTIALS_ID);\n\t\tcredentialsId = BitbucketServerEndpoint.DEFAULT_CREDENTIALS_ID;\n\t}\n\n\tif (StringUtils.isBlank(bitbucketApiUrl)) {\n\t\tbitbucketApiUrl = BitbucketServerEndpoint.DEFAULT_API_URL;\n\t\tLOGGER.log(Level.WARNING, \"The Bitbucket API URL for BitbucketSCMNavigator has not been set. The default value will be used: \" + BitbucketServerEndpoint.DEFAULT_API_URL);\n\t}\n\n\tif (StringUtils.isBlank(bitbucketApiUrl)) {\n\t\tbitbucketApiUrl = BitbucketServerEndpoint.DEFAULT_API_URL;\n\t\tLOGGER.log(Level.WARNING, \"The Bitbucket API URL for BitbucketSCMNavigator has not been set. The default value will be used: \" + BitbucketServerEndpoint.DEFAULT_API_URL);\n\t}\n\n\tif (StringUtils.isBlank(bitbucketApiUrl)) {\n\t\tbitbucketApiUrl = BitbucketServerEndpoint.DEFAULT_API_URL;\n\t\tLOGGER.log(Level.WARNING, \"The Bitbucket API URL for BitbucketSCMNavigator has not been set. The default value will be used: \" + BitbucketServerEndpoint.DEFAULT_API_URL);\n\t}\n\n\tif (StringUtils.isBlank(bitbucketApiUrl)) {\n\t\tbitbucketApiUrl = BitbucketServerEndpoint.DEFAULT_API_URL;\n\t\tLOGGER.log(Level.WARNING, \"The Bitbucket API URL for BitbucketSCMNavigator has not been set. The default value will be used: \" + BitbucketServerEndpoint.DEFAULT_API_URL);\n\t}\n\n\tif (StringUtils.isBlank(bitbucketApiUrl)) {\n\t\tbitbucketApiUrl = BitbucketServerEndpoint.DEFAULT_API_URL;\n\t\tLOGGER.log(Level.WARNING, \"The Bit", "CodeBleu_score": 17.200754412005697}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tif (isMatch) {\n\t\tcount++;\n\t}\n\tLOGGER.log(Level.FINE, \"Repository {0} is {1}\", new Object[] {name, isMatch? \"proposed\" : \"ignored\"});\n}", "CodeBleu_score": 20.098275523424906}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tif (isMatch) {\n\t\tcount++;\n\t\tLOGGER.log(Level.FINE, \"Proposed repository {0} (count: {1})\", new Object[] { name, count });\n\t} else {\n\t\tLOGGER.log(Level.FINE, \"Ignored repository {0}\", name);\n\t}\n}", "CodeBleu_score": 22.77737200694344}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t}", "CodeBleu_score": 7.55486870172907}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tif (scm.getExtensions().isEmpty()) {\n\t\treturn rev;\n\t}\n\n\t// Check if the revision is a branch\n\tif (!marked.isBranch()) {\n\t\treturn rev;\n\t}\n\n\t// Get the list of branches that have hashes\n\tList<String> branchesWithHashes = scm.getExtensions().stream()\n\t\t.filter(ext -> ext instanceof GitSCMExtension)\n\t\t.map(ext -> ((GitSCMExtension) ext).getBranchesWithHashes())\n\t\t.flatMap(List::stream)\n\t\t.collect(Collectors.toList());\n\n\t// Check if the branch has a hash\n\tif (!branchesWithHashes.contains(marked.getHash())) {\n\t\treturn rev;\n\t}\n\n\t// Get the clone link\n\tURIish cloneLink = scm.getExtensions().stream()\n\t\t.filter(ext -> ext instanceof GitSCMExtension)\n\t\t.map(ext -> ((GitSCMExtension) ext).getCloneLink())\n\t\t.findFirst()\n\t\t.orElse(null);\n\n\t// Check if the clone link is valid\n\tif (cloneLink == null) {\n\t\treturn rev;\n\t}\n\n\t// Create a list of RefSpecs\n\tList<RefSpec> refSpecs = branchesWithHashes.stream()\n\t\t.map(branch -> \"refs/heads/\" + branch + \":refs/remotes/origin/\" + branch)\n\t\t.map(RefSpec::new)\n\t\t.collect(Collectors.toList());\n\n\t// Fetch the missing commits\n\ttry {\n\t\tFetchCommand fetchCommand = git.fetch(cloneLink, refSpecs);\n\t\tfetchCommand.execute();\n\t} catch (GitException | URISyntaxException e) {\n\t\tlistener.getLogger().println(e.getMessage());\n\t}\n\n\t// Return the given revision\n\treturn rev;\n}", "CodeBleu_score": 45.59065403785854}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t// Get the list of branches that we want to fetch.\n\tList<RefSpec> refSpecs = scm.getExtensions().stream()\n\t\t.filter(GitSCMExtension.class::isInstance)\n\t\t.map(GitSCMExtension.class::cast)\n\t\t.flatMap(extension -> extension.getFetchRefSpecs(build, git, listener).stream())\n\t\t.collect(Collectors.toList());\n\tif (refSpecs.isEmpty()) {\n\t\treturn rev;\n\t}\n\t// Fetch the missing commits.\n\ttry {\n\t\tFetchCommand cmd = git.fetch().setRemote(rev.getSha1());\n\t\tfor (RefSpec spec : refSpecs) {\n\t\t\tcmd.setRefSpecs(spec);\n\t\t}\n\t\tcmd.execute();\n\t} catch (GitException e) {\n\t\tthrow new RuntimeException(e);\n\t}\n\treturn rev;\n}", "CodeBleu_score": 44.54088069055996}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tif (scm.getExtensions().isEmpty()) {\n\t\treturn rev;\n\t}\n\n\tList<RefSpec> refSpecs = scm.getExtensions().stream()\n\t\t.filter(GitSCMExtension.class::isInstance)\n\t\t.map(GitSCMExtension.class::cast)\n\t\t.flatMap(extension -> extension.decorateFetchSpecs(scm, build, git, listener, marked, rev))\n\t\t.collect(Collectors.toList());\n\n\tif (!refSpecs.isEmpty()) {\n\t\tURIish uri = scm.getRepositories().get(0).getURIs().get(0);\n\t\tFetchCommand fetchCommand = git.fetch().setRemote(uri.toString());\n\t\tfor (RefSpec refSpec : refSpecs) {\n\t\t\tfetchCommand.setRefSpecs(refSpec);\n\t\t}\n\t\tfetchCommand.execute();\n\t}\n\n\treturn rev;\n}", "CodeBleu_score": 42.41180119275844}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tMap<String, BitbucketHref> links = new HashMap<String, BitbucketHref>();\n\tif (this.links!= null) {\n\t\tfor (Map.Entry<String, BitbucketHref> entry : this.links.entrySet()) {\n\t\t\tlinks.put(entry.getKey(), entry.getValue().getHref());\n\t\t}\n\t}\n\treturn links;\n}", "CodeBleu_score": 40.037682606089206}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t}", "CodeBleu_score": 3.2758100431550363}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tMap<String, BitbucketHref> links = new HashMap<String, BitbucketHref>();\n\tfor (Map.Entry<String, BitbucketHref> entry : getLinks().entrySet()) {\n\t\tlinks.put(entry.getKey(), entry.getValue());\n\t}\n\treturn links;\n}", "CodeBleu_score": 36.65958033350273}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\t// Retrieve the selected resource states.\n\tif (!resourceStates || resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\t// Map the selected resources to their URIs.\n\tconst uris = resourceStates.map(resourceState => resourceState.resourceUri);\n\n\t// Process the selected resources by repository.\n\tconst repositories = await this.sourceControl.getRepositories();\n\tfor (const repository of repositories) {\n\t\t// Convert the resources to file paths.\n\t\tconst paths = await Promise.all(uris.map(uri => repository.workspace.asRelativePath(uri)));\n\n\t\t// Attempt to add the files to the repository.\n\t\ttry {\n\t\t\tawait repository.inputBox.show();\n\t\t\tawait repository.inputBox.value(paths.join(\"\n\"));\n\t\t\tawait repository.inputBox.confirm();\n\t\t} catch (error) {\n\t\t\t// Log the error and show an error message.\n\t\t\tconsole.error(error);\n\t\t\twindow.showErrorMessage(error.message);\n\t\t}\n\t}\n}", "CodeBleu_score": 48.80335701497598}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\t// If no resource states are selected, return\n\tif (!resourceStates || resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\t// Convert the resource states to URIs\n\tconst uris = resourceStates.map(resourceState => resourceState.resourceUri);\n\n\t// Process each repository\n\tfor (const repository of this.repositories) {\n\t\t// Convert the resource states to file paths\n\t\tconst paths = uris.map(uri => repository.getFileSystemPath(uri));\n\n\t\t// Add the files to the repository\n\t\ttry {\n\t\t\tawait repository.add(paths);\n\t\t} catch (error) {\n\t\t\t// Log the error\n\t\t\tconsole.error(error);\n\n\t\t\t// Show an error message\n\t\t\twindow.showErrorMessage(error.message);\n\t\t}\n\t}\n}", "CodeBleu_score": 48.21436130407845}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tif (!resourceStates || resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\tconst uris = resourceStates.map(resource => resource.resourceUri);\n\tconst repositories = await this.repositories(uris);\n\tconst repositoryUris = new Set(repositories.map(repository => repository.rootUri));\n\n\tfor (const repository of repositories) {\n\t\tconst paths = uris.filter(uri => repository.rootUri.isEqual(uri));\n\t\ttry {\n\t\t\tawait repository.add(paths);\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\tawait window.showErrorMessage(`Failed to add files to ${repository.name}`);\n\t\t}\n\t}\n}", "CodeBleu_score": 52.76476341204602}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\t}", "CodeBleu_score": 3.4603389863503295}, {"code": "protected async getResourceStates{\n\t{\n  /**\n   * This async function retrieves resource states for source control. It first checks if the provided resource states are empty or if the first resource URI is not an instance of Uri. If so, it attempts to get a single SCM resource and updates the resource states. Finally, it filters and returns the resource states that are instances of Resource.\n   */\n  protected async getResourceStates {", "CodeBleu_score": 2.9086695961305526}, {"code": "protected async getResourceStates{\n\t}", "CodeBleu_score": 3.4603389863503295}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t\n/**\n * This async function retrieves a source control management (SCM) resource for a given URI. If no URI is provided, it uses the URI of the active text editor. If the URI is in the \"svn\" scheme, it converts it to a file URI. For file URIs, it gets the source control manager and retrieves the repository for the URI, returning the corresponding resource. If no valid URI or repository is found, it returns undefined.\n */", "CodeBleu_score": 1.5395211194129954}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t{\n  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined> {", "CodeBleu_score": 8.767879238498004}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\tvar _a;", "CodeBleu_score": 3.009966396153664}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\tpublic async openDiffCmd(element: ISvnPathChange) {", "CodeBleu_score": 6.388329628620551}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\telement", "CodeBleu_score": 2.7622501882610226}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\tpublic async openDiffCmd(element: ISvnPathChange) {", "CodeBleu_score": 6.388329628620551}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tconst clipboard = env.clipboard;\n\tif (!clipboard) {\n\t\twindow.showErrorMessage(\"Cannot copy to clipboard\");\n\t\treturn;\n\t}\n\tif (what === \"message\") {\n\t\tconst message = item.message;\n\t\tif (message) {\n\t\t\tclipboard.writeText(message);\n\t\t} else {\n\t\t\twindow.showErrorMessage(\"No commit message\");\n\t\t}\n\t} else if (what === \"revision\") {\n\t\tconst revision = item.revision;\n\t\tif (revision) {\n\t\t\tclipboard.writeText(revision);\n\t\t} else {\n\t\t\twindow.showErrorMessage(\"No revision\");\n\t\t}\n\t}\n}", "CodeBleu_score": 39.195869245493675}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tconst commit = item.commit;\n\tif (commit) {\n\t\tconst message = what === \"message\"? commit.message : commit.revision;\n\t\tif (env.clipboard.writeText) {\n\t\t\tawait env.clipboard.writeText(message);\n\t\t} else {\n\t\t\twindow.showErrorMessage(\"Clipboard not supported\");\n\t\t}\n\t}\n}", "CodeBleu_score": 35.96094474899196}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (window.activeTextEditor) {\n\t\tconst editor = window.activeTextEditor;\n\t\tconst document = editor.document;\n\t\tconst text = document.getText();\n\t\tconst range = editor.selection;\n\t\tconst textToCopy = item.commitMessage;\n\t\tif (textToCopy) {\n\t\t\tif (range.isEmpty) {\n\t\t\t\tconst pos = document.positionAt(text.indexOf(textToCopy));\n\t\t\t\teditor.selection = new Selection(pos, pos);\n\t\t\t}\n\t\t\teditor.edit(editBuilder => {\n\t\t\t\teditBuilder.replace(range, textToCopy);\n\t\t\t});\n\t\t}\n\t}\n}", "CodeBleu_score": 28.435171133693398}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t\tGiteaConnection result = null;\n\tfor (GiteaConnectionFactory factory : ServiceLoader.load(GiteaConnectionFactory.class)) {\n\t\tresult = factory.open();\n\t\tif (result!= null) {\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (result == null) {\n\t\tthrow new IOException(\"No Gitea connection factory found\");\n\t}\n\treturn result;\n}", "CodeBleu_score": 21.96143255917432}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t\tGiteaConnectionFactory best = null;\n\tfor (GiteaConnectionFactory factory : ServiceLoader.load(GiteaConnectionFactory.class)) {\n\t\tif (factory.canOpenConnection()) {\n\t\t\tif (best == null || best.getPriority() < factory.getPriority()) {\n\t\t\t\tbest = factory;\n\t\t\t}\n\t\t}\n\t}\n\tif (best == null) {\n\t\tthrow new IOException(\"No suitable GiteaConnectionFactory found\");\n\t}\n\treturn best.openConnection();\n}", "CodeBleu_score": 31.41883932486743}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t\tServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class);\n\tGiteaConnectionFactory factory = null;\n\tfor (GiteaConnectionFactory f : loader) {\n\t\ttry {\n\t\t\tGiteaConnection c = f.open();\n\t\t\tif (factory == null || c.getPriority() > factory.getPriority()) {\n\t\t\t\tfactory = f;\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\t// ignore\n\t\t}\n\t}\n\tif (factory == null) {\n\t\tthrow new IOException(\"No suitable GiteaConnectionFactory found\");\n\t}\n\treturn factory.open();\n}", "CodeBleu_score": 32.807102192994684}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\t\treturn jenkinsPluginClassLoader(null);\n}", "CodeBleu_score": 4.614907875815678}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tClassLoader classLoader = Jenkins.get().getPluginManager().getPlugin(Gitea.class).getPluginClassLoader();\n\tif (classLoader == null) {\n\t\tclassLoader = Gitea.class.getClassLoader();\n\t}\n\treturn new Gitea(classLoader);\n}", "CodeBleu_score": 42.830869062553965}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tClassLoader classLoader = Jenkins.get().getPluginManager().getPlugin(Gitea.class).getPluginClassLoader();\n\tif (classLoader == null) {\n\t\tclassLoader = Gitea.class.getClassLoader();\n\t}\n\treturn new Gitea(new GiteaConnectionFactory(classLoader));\n}", "CodeBleu_score": 41.60477088000768}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\tthis.displayName = displayName;\n\tthis.serverUrl = normalizeServerUrl(serverUrl);\n\tthis.manageHooks = manageHooks;\n\tthis.credentialsId = credentialsId;\n\tthis.aliasUrl = normalizeAliasUrl(aliasUrl);\n}", "CodeBleu_score": 27.517007403817452}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\tthis.displayName = displayName;\n\tthis.serverUrl = serverUrl;\n\tthis.manageHooks = manageHooks;\n\tthis.credentialsId = credentialsId;\n\tthis.aliasUrl = aliasUrl;\n\tthis.displayName = StringUtils.defaultIfBlank(this.displayName, this.serverUrl);\n\tthis.aliasUrl = StringUtils.defaultIfBlank(this.aliasUrl, this.serverUrl);\n\tthis.aliasUrl = this.aliasUrl.trim();\n\tthis.serverUrl = this.serverUrl.trim();\n}", "CodeBleu_score": 37.42198627423514}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\tthis.displayName = displayName;\n\tthis.serverUrl = normalizeServerUrl(serverUrl);\n\tthis.manageHooks = manageHooks;\n\tthis.credentialsId = credentialsId;\n\tthis.aliasUrl = normalizeAliasUrl(aliasUrl);\n}", "CodeBleu_score": 27.517007403817452}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tif (StringUtils.isBlank(serverUrl)) {\n\t\treturn new StandardListBoxModel().includeCurrentValue(null);\n\t}\n\n\ttry {\n\t\tURI serverUri = new URI(serverUrl);\n\t\tSCMName scmName = SCMName.create(serverUri.getHost(), serverUri.getPort());\n\t\tGiteaConnection giteaConnection = Gitea.connect(serverUri.getHost(), serverUri.getPort());\n\t\tGiteaUser giteaUser = giteaConnection.getUser();\n\t\tString username = giteaUser.getUsername();\n\n\t\t// Check if the user has administrative permissions.\n\t\tif (Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n\t\t\treturn new StandardListBoxModel()\n\t\t\t\t\t.includeEmptyValue()\n\t\t\t\t\t.includeMatchingAs(ACL.SYSTEM, scmName, StandardCredentials.class,\n\t\t\t\t\t\t\tURIRequirementBuilder.fromUri(serverUrl).build())\n\t\t\t\t\t.includeMatchingAs(ACL.SYSTEM, scmName, GiteaAuth.class,\n\t\t\t\t\t\t\tURIRequirementBuilder.fromUri(serverUrl).build());\n\t\t} else {\n\t\t\treturn new StandardListBoxModel()\n\t\t\t\t\t.includeEmptyValue()\n\t\t\t\t\t.includeMatching(\n\t\t\t\t\t\t\tCredentialsMatchers.withId(username),\n\t\t\t\t\t\t\tCredentialsProvider.lookupCredentials(GiteaAuth.class, Jenkins.get(), ACL.SYSTEM,\n\t\t\t\t\t\t\t\t\tURIRequirementBuilder.fromUri(serverUrl).build()));\n\t\t}\n\t} catch (URISyntaxException | IOException e) {\n\t\treturn new StandardListBoxModel().includeCurrentValue(null);\n\t}\n}", "CodeBleu_score": 38.92169684112202}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tif (StringUtils.isBlank(serverUrl)) {\n\t\treturn new StandardListBoxModel().includeCurrentValue(null);\n\t}\n\ttry {\n\t\tURI serverUri = new URI(serverUrl);\n\t\tif (serverUri.getScheme() == null) {\n\t\t\tserverUrl = \"http://\" + serverUrl;\n\t\t}\n\t\tif (serverUri.getScheme() == null) {\n\t\t\tserverUrl = \"https://\" + serverUrl;\n\t\t}\n\t\tserverUrl = serverUrl.replaceAll(\"/$\", \"\");\n\t\tserverUrl = serverUrl.replaceAll(\"^https?://\", \"\");\n\t\tserverUrl = serverUrl.replaceAll(\"^git@\", \"\");\n\t\tserverUrl = serverUrl.replaceAll(\"^git://\", \"\");\n\t\tserverUrl = serverUrl.replaceAll(\"^ssh://\", \"\");\n\t\tserverUrl = serverUrl.replaceAll(\"^http://\", \"\");\n\t\tserverUrl = serverUrl.replaceAll(\"^https://\", \"\");\n\t\tserverUrl = serverUrl.replaceAll(\"^git@\", \"\");\n\t\tserverUrl = serverUrl.replaceAll(\"^git://\", \"\");\n\t\tserverUrl = serverUrl.replaceAll(\"^ssh://\", \"\");\n\t\tserverUrl = serverUrl.replaceAll(\"^http://\", \"\");\n\t\tserverUrl = serverUrl.replaceAll(\"^https://\", \"\");\n\t\tserverUrl = serverUrl.replaceAll(\"^git@\", \"\");\n\t\tserverUrl = serverUrl.replaceAll(\"^git://\", \"\");\n\t\tserverUrl = serverUrl.replaceAll(\"^ssh://\", \"\");\n\t\tserverUrl = serverUrl.replaceAll(\"^http://\", \"\");\n\t\tserverUrl = serverUrl.replaceAll(\"^https://\", \"\");\n\t\tserverUrl = serverUrl.replaceAll(\"^git@\", \"\");\n\t\tserverUrl = serverUrl.replaceAll(\"^git://\", \"\");\n\t\tserverUrl = serverUrl.replaceAll(\"^ssh://\", \"\");\n\t\tserverUrl = serverUrl.replaceAll(\"^http://\", \"\");\n\t\tserverUrl = serverUrl.replaceAll(\"^https://\", \"\");\n\t\tserverUrl = serverUrl.replaceAll(\"^git@\", \"\");\n\t\tserverUrl = serverUrl.replaceAll(\"^git://\", \"\");\n\t\tserverUrl = serverUrl.replaceAll(\"^ssh://\", \"\");\n\t\tserverUrl = serverUrl.replaceAll(\"^http://\", \"\");\n\t\tserverUrl = serverUrl.replaceAll(\"^https://\", \"\");\n\t\tserverUrl = serverUrl.replaceAll(\"^git@\", \"\");\n\t\tserverUrl = serverUrl.replaceAll(\"^git://\", \"\");\n\t\tserverUrl =", "CodeBleu_score": 28.682022446405774}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tif (StringUtils.isBlank(serverUrl)) {\n\t\treturn new StandardListBoxModel();\n\t}\n\ttry {\n\t\tfinal URI uri = new URI(serverUrl);\n\t\tif (uri.getScheme() == null) {\n\t\t\treturn new StandardListBoxModel();\n\t\t}\n\t\tfinal String scheme = uri.getScheme();\n\t\tif (scheme.equals(\"http\") || scheme.equals(\"https\")) {\n\t\t\tif (Jenkins.getInstance().hasPermission(Jenkins.ADMINISTER)) {\n\t\t\t\treturn getCredentialsIdItems(serverUrl);\n\t\t\t} else {\n\t\t\t\treturn getCredentialsIdItems(serverUrl, false);\n\t\t\t}\n\t\t}\n\t} catch (URISyntaxException e) {\n\t\treturn new StandardListBoxModel();\n\t}\n\treturn new StandardListBoxModel();\n}", "CodeBleu_score": 36.80663393399186}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t}", "CodeBleu_score": 1.6871777254981877}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (StringUtils.isBlank(serverUrl)) {\n\t\treturn null;\n\t}\n\n\ttry {\n\t\tURI uri = new URI(serverUrl);\n\t\tString scheme = uri.getScheme();\n\t\tString host = uri.getHost();\n\t\tString path = uri.getPath();\n\t\tint port = uri.getPort();\n\n\t\t// Convert to lowercase\n\t\tscheme = scheme!= null? scheme.toLowerCase(Locale.ENGLISH) : null;\n\t\thost = host!= null? host.toLowerCase(Locale.ENGLISH) : null;\n\t\tpath = path!= null? path.toLowerCase(Locale.ENGLISH) : null;\n\n\t\t// Remove default ports\n\t\tif (\"http\".equals(scheme) && port == 80) {\n\t\t\tport = -1;\n\t\t} else if (\"https\".equals(scheme) && port == 443) {\n\t\t\tport = -1;\n\t\t}\n\n\t\t// Remove trailing slash\n\t\tif (path!= null && path.endsWith(\"/\")) {\n\t\t\tpath = path.substring(0, path.length() - 1);\n\t\t}\n\n\t\t// Rebuild the URI\n\t\treturn new URI(scheme, null, host, port, path, null, null).toString();\n\t} catch (URISyntaxException e) {\n\t\treturn serverUrl;\n\t}\n}", "CodeBleu_score": 53.311121249714155}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (StringUtils.isBlank(serverUrl)) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tURI uri = new URI(serverUrl.toLowerCase(Locale.ENGLISH));\n\t\tserverUrl = uri.getScheme() + \"://\" + uri.getHost();\n\t\tif (uri.getPort()!= -1) {\n\t\t\tserverUrl += \":\" + uri.getPort();\n\t\t}\n\t\tserverUrl = serverUrl.replaceAll(\"/$\", \"\");\n\t} catch (URISyntaxException e) {\n\t\t// Ignore the exception\n\t}\n\treturn serverUrl;\n}", "CodeBleu_score": 27.136285007116847}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\t\t// Create a new ListBoxModel to store the server items.\n\tListBoxModel model = new ListBoxModel();\n\n\t// Get the list of Gitea servers from the Jenkins global configuration.\n\tGiteaServerList servers = GiteaServerList.get();\n\n\t// Iterate through the list of servers.\n\tfor (GiteaServer server : servers.getServers()) {\n\t\t// If the server's display name is blank, only add the server URL.\n\t\tif (StringUtils.isBlank(server.getDisplayName())) {\n\t\t\tmodel.add(server.getURL());\n\t\t}\n\t\t// Otherwise, add the server's display name and URL to the model.\n\t\telse {\n\t\t\tmodel.add(server.getDisplayName(), server.getURL());\n\t\t}\n\t}\n\n\t// Return the populated ListBoxModel.\n\treturn model;\n}", "CodeBleu_score": 39.29884493200132}, {"code": "public ListBoxModel getServerItems(){\n\t\tListBoxModel serverItems = new ListBoxModel();\n\tExtensionList<GiteaServer> serverList = Jenkins.getInstance().getExtensionList(GiteaServer.class);\n\tfor (GiteaServer server : serverList) {\n\t\tif (server.getDisplayName().equals(\"\")) {\n\t\t\tserverItems.add(server.getUrl());\n\t\t} else {\n\t\t\tserverItems.add(server.getDisplayName(), server.getUrl());\n\t\t}\n\t}\n\treturn serverItems;\n}", "CodeBleu_score": 33.47684313097617}, {"code": "public ListBoxModel getServerItems(){\n\t\tListBoxModel serverItems = new ListBoxModel();\n\tGiteaServer[] servers = GiteaServer.all();\n\tfor (GiteaServer server : servers) {\n\t\tif (server.getDisplayName().isEmpty()) {\n\t\t\tserverItems.add(server.getUrl());\n\t\t} else {\n\t\t\tserverItems.add(server.getDisplayName(), server.getUrl());\n\t\t}\n\t}\n\treturn serverItems;\n}", "CodeBleu_score": 33.84655065162896}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tif (servers!= null) {\n\t\t// Check for admin permissions\n\t\tif (!Jenkins.getInstance().hasPermission(GiteaServer.ADMINISTER)) {\n\t\t\tthrow new SecurityException(Messages.GiteaServer_NoPermission());\n\t\t}\n\n\t\t// Remove duplicates and empty URLs\n\t\tSet<GiteaServer> serverSet = new HashSet<>();\n\t\tfor (GiteaServer server : servers) {\n\t\t\tif (StringUtils.isNotBlank(server.getUrl())) {\n\t\t\t\tserverSet.add(server);\n\t\t\t}\n\t\t}\n\n\t\t// Update the servers\n\t\tthis.servers = new ArrayList<>(serverSet);\n\t} else {\n\t\tthis.servers = Collections.emptyList();\n\t}\n\n\t// Save the configuration\n\tsave();\n}", "CodeBleu_score": 36.36788872114044}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tif (servers == null) {\n\t\tservers = Collections.emptyList();\n\t}\n\tList<GiteaServer> serversCopy = new ArrayList<GiteaServer>(servers);\n\tSet<String> serverURIs = new HashSet<String>();\n\tfor (GiteaServer server : serversCopy) {\n\t\tserver.checkPermission();\n\t\tif (StringUtils.isBlank(server.getUri())) {\n\t\t\tthrow new IllegalArgumentException(\"URI cannot be blank\");\n\t\t}\n\t\tif (serverURIs.contains(server.getUri())) {\n\t\t\tthrow new IllegalArgumentException(\"Duplicate URI: \" + server.getUri());\n\t\t}\n\t\tserverURIs.add(server.getUri());\n\t}\n\tCollections.sort(serversCopy, GiteaServer.URI_COMPARATOR);\n\tGiteaServers.get().setServers(serversCopy);\n\tsave();\n}", "CodeBleu_score": 32.67864835863647}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tif (servers == null) {\n\t\tservers = Collections.emptyList();\n\t}\n\t// Check if the user has the required permissions.\n\tif (!Jenkins.getInstance().hasPermission(Jenkins.ADMINISTER)) {\n\t\tthrow new SecurityException(\"You do not have the required permissions to configure Gitea servers.\");\n\t}\n\t// Remove duplicates and empty URLs.\n\tSet<GiteaServer> serversSet = new HashSet<GiteaServer>(servers);\n\tList<GiteaServer> serversList = new ArrayList<GiteaServer>(serversSet);\n\t// Update the servers.\n\tfor (GiteaServer server : serversList) {\n\t\tif (StringUtils.isBlank(server.getUrl())) {\n\t\t\tserversList.remove(server);\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tnew URI(server.getUrl());\n\t\t\t} catch (URISyntaxException e) {\n\t\t\t\tthrow new IllegalArgumentException(e.getMessage());\n\t\t\t}\n\t\t}\n\t}\n\t// Save the configuration.\n\tGlobalConfiguration.all().get(GiteaGlobalConfiguration.class).setServers(serversList);\n}", "CodeBleu_score": 32.16423292154261}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn false;\n\t}\n\n\t// Normalize the server URL\n\tserverUrl = serverUrl.trim();\n\tif (serverUrl.endsWith(\"/\")) {\n\t\tserverUrl = serverUrl.substring(0, serverUrl.length() - 1);\n\t}\n\n\t// Remove the server from the list of servers\n\tList<GiteaServer> servers = getServers();\n\tListIterator<GiteaServer> serverIter = servers.listIterator();\n\twhile (serverIter.hasNext()) {\n\t\tGiteaServer server = serverIter.next();\n\t\tif (server.getUrl().equals(serverUrl)) {\n\t\t\tserverIter.remove();\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Update the server list\n\tupdateServers(servers);\n\n\treturn true;\n}", "CodeBleu_score": 40.745714262262375}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn false;\n\t}\n\n\t// normalize the server URL\n\tserverUrl = serverUrl.trim();\n\tif (serverUrl.endsWith(\"/\")) {\n\t\tserverUrl = serverUrl.substring(0, serverUrl.length() - 1);\n\t}\n\n\t// check for and remove the matching server\n\tboolean removed = false;\n\tList<GiteaServer> servers = getServers();\n\tfor (Iterator<GiteaServer> it = servers.iterator(); it.hasNext();) {\n\t\tGiteaServer server = it.next();\n\t\tif (server.getUrl().equals(serverUrl)) {\n\t\t\tit.remove();\n\t\t\tremoved = true;\n\t\t}\n\t}\n\n\t// update the server list\n\tsetServers(servers);\n\n\treturn removed;\n}", "CodeBleu_score": 46.42327966587009}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn false;\n\t}\n\t// Normalize the server URL.\n\tserverUrl = serverUrl.trim().toLowerCase(Locale.ENGLISH);\n\t// Get the current list of servers.\n\tList<GiteaServer> servers = getServers();\n\t// Find the server with the specified URL.\n\tListIterator<GiteaServer> iterator = servers.listIterator();\n\twhile (iterator.hasNext()) {\n\t\tGiteaServer server = iterator.next();\n\t\tif (server.getUrl().equals(serverUrl)) {\n\t\t\t// Remove the server.\n\t\t\titerator.remove();\n\t\t\t// Update the server list.\n\t\t\tsetServers(servers);\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 42.97524661117987}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t\tSet<Element> annotatedElements = roundEnv.getElementsAnnotatedWith(annotation);\n\tfor (Element annotatedElement : annotatedElements) {\n\t\tif (annotatedElement.getKind()!= ElementKind.METHOD) {\n\t\t\tcontinue;\n\t\t}\n\t\tExecutableElement executableElement = (ExecutableElement) annotatedElement;\n\t\tClassWithAttributes classWithAttributes = getClassWithAttributes(executableElement);\n\t\tif (classWithAttributes == null) {\n\t\t\tcontinue;\n\t\t}\n\t\tConfigValue configValue = getAnnotationValue(executableElement, annotation);\n\t\tif (configValue == null) {\n\t\t\tcontinue;\n\t\t}\n\t\tString type = getType(executableElement);\n\t\tDescriptorElement descriptorElement = new DescriptorElement(classWithAttributes.getName(), configValue.name(), classWithAttributes.getAttributes(), type);\n\t\tdescriptorElements.add(descriptorElement);\n\t}\n}", "CodeBleu_score": 40.53702752161206}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t\tSet<Element> annotatedElements = roundEnv.getElementsAnnotatedWith(annotation);\n\tfor (Element annotatedElement : annotatedElements) {\n\t\tif (annotatedElement.getKind() == ElementKind.CLASS) {\n\t\t\tClassWithAttributes classWithAttributes = getClassWithAttributes(annotatedElement);\n\t\t\tif (classWithAttributes!= null) {\n\t\t\t\tdescriptorElements.add(classWithAttributes);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 36.88205692077496}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t\tfor (Element annotatedElement : roundEnv.getElementsAnnotatedWith(annotation)) {\n\t\tif (annotatedElement.getKind() == ElementKind.METHOD) {\n\t\t\tExecutableElement method = (ExecutableElement) annotatedElement;\n\t\t\tConfigElement configElement = createConfigElement(method);\n\t\t\tdescriptorElements.add(configElement);\n\t\t}\n\t}\n}", "CodeBleu_score": 30.65450084710999}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tfor (TypeElement annotation : annotations) {\nif (annotation.getQualifiedName().contentEquals(annotationClass.getName())) {\nreturn annotation;\n}\n}\nreturn null;\n}", "CodeBleu_score": 39.35305479987128}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tfor (TypeElement annotation : annotations) {\nif (annotation.getQualifiedName().contentEquals(annotationClass.getCanonicalName().replace('$', '.'))) {\nreturn annotation;\n}\n}\nreturn null;\n}", "CodeBleu_score": 42.34467069111136}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tString annotationClassName = annotationClass.getCanonicalName();\nfor (TypeElement annotation : annotations) {\nif (annotationClassName.equals(annotation.getQualifiedName().toString())) {\nreturn annotation;\n}\n}\nreturn null;\n}", "CodeBleu_score": 45.49742368824064}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n\n    filters = {\"employee\": employee}\n\n    if for_approval:\n        filters[\"docstatus\"] = 0\n        filters[\"state\"] = [\"!=\", \"Cancelled\"]\n\n        if approver_id:\n            filters[\"approver\"] = approver_id\n        else:\n            filters[\"approver\"] = [\"!=\", frappe.session.user]\n\n        filters[\"workflow_state\"] = [\"!=\", \"Cancelled\"]\n    else:\n        filters[\"docstatus\"] = 1\n        filters[\"state\"] = \"Open\"\n\n    return filters\n\n", "CodeBleu_score": 32.398978817889216}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\"employee\": employee}\n    if for_approval:\n        filters.update(\n            {\n                \"workflow_state\": [\n                    \"Open\",\n                    \"Pending Approval\",\n                    \"Approved\",\n                    \"Rejected\",\n                    \"Cancelled\",\n                ],\n                \"workflow_state_field\": \"status\",\n            }\n        )\n        if approver_id:\n            filters.update({\"approver\": approver_id})\n    else:\n        filters.update(\n            {\n                \"workflow_state\": \"Open\",\n                \"workflow_state_field\": \"status\",\n                \"name\": [\"not in\", frappe.db.sql_list(f\"select name from `tabLeave Application` where employee = '{employee}' and status = 'Cancelled'\")],\n            }\n        )\n    return filters\n\n", "CodeBleu_score": 24.286645908356867}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n        \"status\": [\"!=\", \"Cancelled\"],\n    }\n\n    if for_approval:\n        filters[\"status\"] = [\"!=\", \"Approved\"]\n        filters[\"status\"] += [\"!=\", \"Rejected\"]\n        filters[\"status\"] += [\"!=\", \"Cancelled\"]\n        filters[\"status\"] += [\"!=\", \"Closed\"]\n\n        if approver_id:\n            filters[\"approver\"] = approver_id\n        else:\n            filters[\"approver\"] = [\"!=\", \"\"]\n\n    return filters\n\n", "CodeBleu_score": 25.417585221731432}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n\n    current_date = getdate()\n    leave_details = get_leave_details(employee, current_date)\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {\n            \"allocated_leave\": leave_details[leave_type][\"allocated_leave\"],\n            \"balance_leave\": leave_details[leave_type][\"balance_leave\"],\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 39.66511778623879}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = getdate()\n    leave_details = get_leave_details(employee, current_date)\n    leave_balance_map = {}\n    for leave_type, leave_details in leave_details.items():\n        allocated_leave = leave_details[\"allocated_leave\"]\n        balance_leave = leave_details[\"balance_leave\"]\n        leave_balance_map[leave_type] = {\n            \"allocated_leave\": allocated_leave,\n            \"balance_leave\": balance_leave,\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 43.69970713016645}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = getdate()\n    leave_details = get_leave_details(employee, current_date)\n    leave_balance_map = {}\n    for leave_type, leave_details in leave_details.items():\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_details.get(\"allocated\"),\n            \"balance\": leave_details.get(\"balance\"),\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 46.63696027204415}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holidays = frappe.get_all(\"Holiday List\", filters={\"employee\": employee}, fields=[\"holiday_date\", \"holiday_type\", \"description\"])\n    holidays = [\n        {\n            \"date\": holiday[\"holiday_date\"],\n            \"type\": holiday[\"holiday_type\"],\n            \"description\": strip_html(holiday[\"description\"]),\n        }\n        for holiday in holidays\n    ]\n    holidays = sorted(holidays, key=lambda holiday: holiday[\"date\"])\n    return holidays\n\n", "CodeBleu_score": 28.33620833154403}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.get_all(\"Holiday List\", filters={\"employee\": employee}, fields=[\"holiday_date\", \"holiday_description\"])\n    if not holiday_list:\n        return []\n    holidays = frappe.get_all(\"Holiday\", filters={\"holiday_list\": [\"in\", [holiday[\"name\"] for holiday in holiday_list]], \"is_weekly_off\": 0}, fields=[\"holiday_date\", \"holiday_description\"], order_by=\"holiday_date\")\n    for holiday in holidays:\n        holiday[\"holiday_description\"] = strip_html(holiday[\"holiday_description\"])\n    return holidays\n\n", "CodeBleu_score": 36.6013696268632}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.get_all(\"Holiday List\", filters={\"employee\": employee}, fields=[\"holiday_date\", \"holiday_type\", \"holiday_description\"])\n    if not holiday_list:\n        return []\n    holidays = frappe.get_all(\"Holiday\", filters={\"holiday_list\": [holiday[\"name\"] for holiday in holiday_list], \"holiday_type\": [\"!=\", \"Weekly Off\"]}, fields=[\"holiday_date\", \"holiday_type\", \"holiday_description\"], order_by=\"holiday_date\")\n    for holiday in holidays:\n        holiday[\"holiday_description\"] = strip_html(holiday[\"holiday_description\"])\n    return holidays\n\n", "CodeBleu_score": 37.17901716642025}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t\n    # Get the relevant settings\n    reminders_enabled = frappe.db.get_single_value(\"HR Settings\", \"send_holiday_reminders\")\n    frequency = frappe.db.get_single_value(\"HR Settings\", \"holiday_reminder_frequency\")\n    # If reminders are enabled and the frequency is set to weekly, call a function to send the reminders\n    if reminders_enabled and frequency == \"Weekly\":\n        send_reminders_in_advance()\n\n", "CodeBleu_score": 46.78820050955538}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    reminders_in_advance = frappe.db.get_value(\"HR Settings\", None, \"send_reminders_in_advance\")\n    if reminders_in_advance:\n        reminders_frequency = frappe.db.get_value(\"HR Settings\", None, \"reminders_frequency\")\n        if reminders_frequency == \"Weekly\":\n            send_reminders_in_advance()\n\n", "CodeBleu_score": 36.00537604871011}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    settings = frappe.get_doc(\"HR Settings\")\n    if settings.send_reminders_in_advance and settings.reminders_in_advance_frequency == \"Weekly\":\n        send_reminders_in_advance_weekly_helper(settings)\n\n", "CodeBleu_score": 17.236583407131114}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t\n    self.self_appraisal_score = 0\n    for rating in self.self_ratings:\n        self.self_appraisal_score += flt(rating.rating) * flt(rating.weightage) / 100\n    self.self_appraisal_score = flt(self.self_appraisal_score, precision=2)\n\n", "CodeBleu_score": 27.70925557606967}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    if not self.self_ratings:\n        return None\n    total_score = 0\n    for rating in self.self_ratings:\n        total_score += flt(rating.rating) * flt(rating.weightage)\n    self.self_appraisal_score = round(total_score, 2)\n\n", "CodeBleu_score": 26.999078004087472}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    if self.self_appraisal_score:\n        return\n\n    self_appraisal_score = 0\n    for self_rating in self.self_appraisal_ratings:\n        self_appraisal_score += self_rating.rating * 5 * (self_rating.weightage / 100)\n\n    self.db_set(\"self_appraisal_score\", flt(self_appraisal_score), update_modified=False)\n\n", "CodeBleu_score": 25.26280620163046}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t\n\n    # Get appraisal cycle\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n\n    # Check if final score should be calculated based on a formula\n    if appraisal_cycle.calculate_final_score:\n        # Gather necessary data\n        total_score = self.total_score\n        average_feedback_score = self.average_feedback_score\n        self_appraisal_score = self.self_appraisal_score\n\n        # Sanitize formula\n        sanitized_formula = sanitize_expression(appraisal_cycle.final_score_formula)\n\n        # Evaluate formula\n        final_score = eval(sanitized_formula)\n\n        # Set final score with appropriate precision\n        self.final_score = flt(final_score, precision(appraisal_cycle.final_score_precision))\n    else:\n        # Calculate final score as the average of the total score, average feedback score, and self-appraisal score\n        final_score = (total_score + average_feedback_score + self_appraisal_score) / 3\n\n        # Set final score with appropriate precision\n        self.final_score = flt(final_score, precision(appraisal_cycle.final_score_precision))\n\n", "CodeBleu_score": 33.28105751934513}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle.final_score_calculation_formula:\n        self.final_score = eval(sanitize_expression(appraisal_cycle.final_score_calculation_formula))\n    else:\n        self.final_score = round(\n            (self.total_score + self.average_feedback_score + self.self_appraisal_score) / 3, appraisal_cycle.precision\n        )\n\n", "CodeBleu_score": 18.658159849050076}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle.final_score_calculation_formula:\n        formula = sanitize_expression(appraisal_cycle.final_score_calculation_formula)\n        final_score = eval(formula)\n        self.final_score = flt(final_score, appraisal_cycle.final_score_precision)\n    else:\n        final_score = (self.total_score + self.average_feedback_score + self.self_appraisal_score) / 3\n        self.final_score = flt(final_score, appraisal_cycle.final_score_precision)\n\n", "CodeBleu_score": 27.35853612605368}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\t\n\n    if self.employee and self.status!= \"On Leave\":\n        if self.attendance_date > nowdate():\n            frappe.throw(_(\"Attendance date cannot be in the future\"))\n\n    if self.employee and self.attendance_date < self.employee.date_of_joining:\n        frappe.throw(_(\"Attendance date cannot be earlier than the employee's date of joining\"))\n\n", "CodeBleu_score": 22.056635775683613}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > getdate():\n        if self.status == \"On Leave\":\n            if not frappe.db.exists(\"Leave Application\", {\"employee\": self.employee, \"from_date\": self.attendance_date, \"status\": \"Approved\"}):\n                frappe.throw(_(\"Attendance cannot be marked for future dates unless the status is On Leave and there is no leave application\"))\n        else:\n            frappe.throw(_(\"Attendance cannot be marked for future dates\"))\n\n    if self.attendance_date < self.employee_date_of_joining:\n        frappe.throw(_(\"Attendance cannot be marked for dates earlier than the employee's date of joining\"))\n\n", "CodeBleu_score": 29.47809366439904}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > nowdate():\n        if self.status!= \"On Leave\":\n            frappe.throw(\n                _(\"Attendance date cannot be in the future for an employee who is not on leave\")\n            )\n        else:\n            leave_applications = frappe.db.sql(\n                \"\"\"select name from `tabLeave Application` where employee = %(employee)s and status!= 'Cancelled' and from_date <= %(attendance_date)s and to_date >= %(attendance_date)s\"\"\",\n                values={\n                    \"employee\": self.employee,\n                    \"attendance_date\": self.attendance_date,\n                },\n                as_dict=1,\n            )\n            if leave_applications:\n                frappe.throw(\n                    _(\"Attendance cannot be marked for a date that falls within a leave application\")\n                )\n\n    if self.attendance_date < self.employee.date_of_joining:\n        frappe.throw(\n            _(\"Attendance date cannot be earlier than the employee's date of joining\")\n        )\n\n", "CodeBleu_score": 35.03495244033014}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\t\n    validate_active_employee(self.employee)\n    if frappe.db.exists(\"Attendance\", {\"employee\": self.employee, \"attendance_date\": self.attendance_date}):\n        raise frappe.ValidationError(_(\"Attendance record for employee {0} on {1} already exists.\").format(self.employee, format_date(self.attendance_date)))\n\n", "CodeBleu_score": 31.323686555287523}, {"code": "def validate_duplicate_record(self)\n\t\n    if frappe.db.exists(\"Attendance\", {\"employee\": self.employee, \"attendance_date\": self.attendance_date, \"name\": (\"!=\", self.name)}):\n        frappe.throw(_(\"Attendance record for {0} on {1} already exists. {2}\").format(self.employee, format_date(self.attendance_date), get_link_to_form(\"Attendance\", self.name)))\n\n", "CodeBleu_score": 33.71520441935861}, {"code": "def validate_duplicate_record(self)\n\t\n    if not self.employee:\n        return\n\n    existing_records = frappe.db.sql(\n        \"\"\"\n        SELECT name, employee, date\n        FROM `tabAttendance`\n        WHERE employee = %s AND date = %s\n        AND name!= %s\n        \"\"\",\n        (self.employee, self.date, self.name),\n        as_dict=1,\n    )\n\n    if existing_records:\n        frappe.throw(\n            _(\n                \"Employee {0} already has an attendance record for {1}. <a href='{2}'>View</a>\"\n            ).format(\n                self.employee, self.date, get_link_to_form(\"Attendance\", existing_records[0].name)\n            )\n        )\n\n", "CodeBleu_score": 33.54068966447321}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t\n    # Get the list of users in the specified group\n    group_name = \"Sales Team\"\n    group_users = frappe.get_all(\"User\", filters={\"user_group\": group_name})\n    # Get the list of messages in the specified date range\n    start_date = frappe.utils.get_datetime(frappe.utils.add_days(frappe.utils.now_datetime(), -1)).strftime(\n        \"%Y-%m-%d\")\n    end_date = frappe.utils.get_datetime(frappe.utils.now_datetime()).strftime(\"%Y-%m-%d\")\n    messages = frappe.get_all(\"Email Reply\", filters={\"creation\": (\"between\", [start_date, end_date])}, fields=[\n        \"name\", \"subject\", \"sender\", \"creation\", \"status\"])\n    # Create the email body\n    body = \"\"\n    for message in messages:\n        body += \"<tr>\"\n        body += \"<td>\" + message.get(\"name\") + \"</td>\"\n        body += \"<td>\" + message.get(\"subject\") + \"</td>\"\n        body += \"<td>\" + message.get(\"sender\") + \"</td>\"\n        body += \"<td>\" + message.get(\"creation\") + \"</td>\"\n        body += \"<td>\" + message.get(\"status\") + \"</td>\"\n        body += \"</tr>\"\n    # Send the email\n    subject = \"Daily Summary of Email Replies\"\n    recipients = []\n    for user in group_users:\n        recipients.append(user.email)\n    frappe.sendmail(recipients=recipients, subject=subject, message=body, sender=\"\")\n    # Update the status of the messages\n    for message in messages:\n        frappe.db.set_value(\"Email Reply\", message.get(\"name\"), \"status\", \"Sent\")\n\n", "CodeBleu_score": 35.650482630380445}, {"code": "def send_summary(self)\n\t\n\n    # get the list of users in the specified group\n    users = frappe.get_all(\"User\", filters={\"user_group\": self.group})\n\n    # get the list of messages in the specified date range\n    messages = frappe.get_all(\"Email Reply\", filters={\"creation\": (\"between\", [self.from_date, self.to_date]), \"status\": \"Received\"}, fields=[\"subject\", \"sender\", \"creation\"])\n\n    # get the list of email addresses of users in the specified group\n    email_addresses = [user.email for user in users]\n\n    # create a dictionary to store the summary information\n    summary = {}\n\n    # iterate over the messages and update the summary dictionary\n    for message in messages:\n        email_reply = EmailReplyParser.parse_reply(message.subject)\n        if email_reply.get(\"to\"):\n            to_address = email_reply[\"to\"]\n            if to_address in email_addresses:\n                if to_address not in summary:\n                    summary[to_address] = []\n                summary[to_address].append(message)\n\n    # send an email to each user with the summary\n    for to_address in summary:\n        subject = \"Daily Summary\"\n        body = \"Hi,<br><br>Here is the summary of your daily replies:<br><br>\"\n        body += \"<table style='border: 1px solid black; border-collapse: collapse; width: 100%;'>\"\n        body += \"<tr style='border: 1px solid black; border-collapse: collapse;'>\"\n        body += \"<th style='border: 1px solid black; border-collapse: collapse; padding: 10px;'>Subject</th>\"\n        body += \"<th style='border: 1px solid black; border-collapse: collapse; padding: 10px;'>Sender</th>\"\n        body += \"<th style='border: 1px solid black; border-collapse: collapse; padding: 10px;'>Date</th>\"\n        body += \"</tr>\"\n        for message in summary[to_address]:\n            body += \"<tr style='border: 1px solid black; border-collapse: collapse;'>\"\n            body += \"<td style='border: 1px solid black; border-collapse: collapse; padding: 10px;'>\" + message.subject + \"</td>\"\n            body += \"<td style='border: 1", "CodeBleu_score": 29.744837092698756}, {"code": "def send_summary(self)\n\t\n    # Get the date and time to use in the email subject\n    current_date = frappe.utils.nowdate()\n    current_time = frappe.utils.nowtime()\n\n    # Get the list of users in the specified group\n    users = frappe.get_all(\"User\", filters={\"user_group\": \"Reply Summary\"}, fields=[\"email\"])\n\n    # Get the list of messages with the specified status\n    messages = frappe.get_all(\"Email Reply\", filters={\"status\": \"Pending\"}, fields=[\"name\", \"subject\", \"sender\", \"creation\", \"status\"])\n\n    # Create the email body\n    body = \"<h2>Email Reply Summary for {0}</h2>\".format(current_date)\n    body += \"<table border='1'>\"\n    body += \"<tr>\"\n    body += \"<th>Name</th>\"\n    body += \"<th>Subject</th>\"\n    body += \"<th>Sender</th>\"\n    body += \"<th>Creation Date</th>\"\n    body += \"<th>Status</th>\"\n    body += \"</tr>\"\n\n    # Add the message details to the email body\n    for message in messages:\n        body += \"<tr>\"\n        body += \"<td>{0}</td>\".format(message.name)\n        body += \"<td>{0}</td>\".format(message.subject)\n        body += \"<td>{0}</td>\".format(message.sender)\n        body += \"<td>{0}</td>\".format(frappe.utils.formatdate(message.creation))\n        body += \"<td>{0}</td>\".format(message.status)\n        body += \"</tr>\"\n\n    # Close the table and add a footer\n    body += \"</table>\"\n    body += \"<p>This email was automatically generated by the Email Reply Summary tool. If you have any questions, please contact the system administrator.</p>\"\n\n    # Send the email\n    frappe.sendmail(\n        recipients=users,\n        subject=\"Email Reply Summary for {0}\".format(current_date),\n        message=body,\n        sender=frappe.session.user,\n        reference_doctype=\"Email Reply\",\n        reference_name=frappe.session.user,\n        reference_field=\"email_reply_summary\",\n    )\n\n    # Update the status of the messages to \"Sent\"\n    for message in messages:\n        frappe.db.set_value(\"Email Reply\", message.name, \"status\", \"Sent\")\n\n", "CodeBleu_score": 31.42261261277633}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t\n    if self.interview_round and self.applicant:\n        # Check for duplicate interview records\n        duplicate_interviews = frappe.get_all(\"Interview\", filters={\"interview_round\": self.interview_round, \"applicant\": self.applicant}, fields=[\"name\"])\n        if len(duplicate_interviews) > 1:\n            # Raise an exception with a message indicating that job applicants are not allowed to appear twice for the same interview round\n            raise frappe.ValidationError(_(\"Job applicants are not allowed to appear twice for the same interview round. Please check the existing interview record for details. <a href='{0}'>View existing interview</a>\").format(get_link_to_form(\"Interview\", duplicate_interviews[0].name)))\n\n", "CodeBleu_score": 50.91188300611409}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.doctype == \"Interview\":\n        if self.interview_round:\n            duplicate_interview_records = frappe.db.sql(\n                \"\"\"select name from `tabInterview` where job_applicant = %(job_applicant)s and interview_round = %(interview_round)s and name!= %(name)s\"\"\",\n                {\n                    \"job_applicant\": self.job_applicant,\n                    \"interview_round\": self.interview_round,\n                    \"name\": self.name,\n                },\n                as_dict=1,\n            )\n            if len(duplicate_interview_records) > 0:\n                raise frappe.ValidationError(\n                    _(\"Job applicants are not allowed to appear twice for the same interview round. <a href='{link}'>View existing interview record</a>\").format(\n                        link=get_link_to_form(\"Interview\", duplicate_interview_records[0].name)\n                    )\n                )\n\n", "CodeBleu_score": 47.83018842467612}, {"code": "def validate_duplicate_interview(self)\n\t\n    # Get the interview round and interview date from the interview record.\n    interview_round = self.interview_round\n    interview_date = self.interview_date\n\n    # Get the interview records for the current job applicant.\n    interview_records = frappe.get_all('Interview', filters={'applicant': self.applicant, 'interview_round': interview_round, 'interview_date': interview_date}, fields=['applicant', 'interview_round', 'interview_date', 'name'])\n\n    # Check if there are any duplicate interview records for the current job applicant.\n    if len(interview_records) > 1:\n        # Raise an exception with a message indicating that job applicants are not allowed to appear twice for the same interview round.\n        raise frappe.ValidationError(_(\"Job applicants are not allowed to appear twice for the same interview round.\"))\n\n    # Check if there is an existing interview record for the current job applicant.\n    if len(interview_records) == 1:\n        # Get the existing interview record.\n        existing_interview_record = interview_records[0]\n\n        # Raise an exception with a message indicating that job applicants are not allowed to appear twice for the same interview round.\n        raise frappe.ValidationError(_(\"Job applicants are not allowed to appear twice for the same interview round. <a href='#Form/Interview/{0}'>Click here</a> to view the existing interview record for this job applicant.\").format(existing_interview_record.name))\n\n", "CodeBleu_score": 35.601021060114746}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\t\n    ratings = [ass.rating for ass in self.get(\"skill_assessments\") if ass.rating]\n    if ratings:\n        self.average_rating = sum(ratings) / len(ratings)\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 22.904328655133426}, {"code": "def calculate_average_rating(self)\n\t\n    if self.skill_assessments:\n        ratings = [assessment.rating for assessment in self.skill_assessments if assessment.rating]\n        self.average_rating = sum(ratings) / len(ratings) if ratings else 0\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 27.593110755214706}, {"code": "def calculate_average_rating(self)\n\t\n    average_rating = 0\n    if self.skill_assessments:\n        ratings = [sa.rating for sa in self.skill_assessments if sa.rating]\n        average_rating = sum(ratings) / len(ratings)\n    self.average_rating = average_rating\n\n", "CodeBleu_score": 29.749074865849252}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    interview = frappe.new_doc(\"Interview\")\n    interview.update(doc)\n    interview.insert()\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 36.2890239504713}, {"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    interview = frappe.new_doc(\"Interview\")\n    interview.update(doc)\n    interview.insert()\n    interview.save()\n    if \"interviewers\" in doc:\n        for interviewer in doc[\"interviewers\"]:\n            interview.append(\"interviewers\", interviewer)\n    return interview\n\n", "CodeBleu_score": 47.281318008453525}, {"code": "def create_interview(doc):\n\t\n\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.get(\"interview_round\")\n    interview.designation = doc.get(\"designation\")\n    interview.interviewers = doc.get(\"interviewers\")\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 48.433880032339985}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offers = []\n    job_offer_names = frappe.db.sql(\n        \"\"\"\n        SELECT name\n        FROM `tabJob Offer`\n        WHERE designation = %s\n        AND company = %s\n        AND docstatus = 1\n        AND creation >= %s\n        AND creation <= %s\n        \"\"\",\n        (self.designation, self.company, from_date, to_date),\n        as_dict=1,\n    )\n    for job_offer in job_offer_names:\n        job_offers.append(job_offer.name)\n    return job_offers\n\n", "CodeBleu_score": 34.68630817066652}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offer_list = []\n    job_offers = frappe.get_all(\"Job Offer\", filters={\"designation\": self.designation, \"company\": self.company, \"creation\": (\"between\", [from_date, to_date]), \"docstatus\": 1}, fields=[\"name\"])\n    for job_offer in job_offers:\n        job_offer_list.append(job_offer.name)\n    return job_offer_list\n\n", "CodeBleu_score": 53.272397014663916}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offers = []\n    job_offers_list = frappe.db.sql(\"\"\"SELECT name FROM `tabJob Offer` WHERE designation = %s AND company = %s AND creation = %s AND status = 1\"\"\", (self.designation, self.company, self.creation), as_dict=True)\n    for job_offer in job_offers_list:\n        job_offers.append(job_offer.name)\n    return job_offers\n", "CodeBleu_score": 31.55448750017572}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if company:\n        offers = frappe.get_all(\"Job Offer\", filters={\"company\": company, \"docstatus\": 1}, fields=[\"name\"])\n    elif department:\n        offers = frappe.get_all(\"Job Offer\", filters={\"department\": department, \"docstatus\": 1}, fields=[\"name\"])\n    else:\n        offers = frappe.get_all(\"Job Offer\", filters={\"docstatus\": 1}, fields=[\"name\"])\n\n    accepted_offers = frappe.get_all(\"Job Offer\", filters={\"docstatus\": 1, \"accepted\": 1}, fields=[\"name\"])\n\n    if len(offers) == 0:\n        return 0, \"Percent\"\n\n    acceptance_rate = round((len(accepted_offers) / len(offers)) * 100, 2)\n\n    return acceptance_rate, \"Percent\"\n\n", "CodeBleu_score": 33.379529557700685}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if company:\n        offer_acceptance_rate = frappe.db.sql(\"\"\"select count(name) from `tabJob Offer` where docstatus = 1 and company = %s\"\"\", (company))\n        accepted_offers = frappe.db.sql(\"\"\"select count(name) from `tabJob Offer` where docstatus = 1 and company = %s and accepted = 1\"\"\", (company))\n    elif department:\n        offer_acceptance_rate = frappe.db.sql(\"\"\"select count(name) from `tabJob Offer` where docstatus = 1 and department = %s\"\"\", (department))\n        accepted_offers = frappe.db.sql(\"\"\"select count(name) from `tabJob Offer` where docstatus = 1 and department = %s and accepted = 1\"\"\", (department))\n    else:\n        offer_acceptance_rate = frappe.db.sql(\"\"\"select count(name) from `tabJob Offer` where docstatus = 1\"\"\")\n        accepted_offers = frappe.db.sql(\"\"\"select count(name) from `tabJob Offer` where docstatus = 1 and accepted = 1\"\"\")\n    if offer_acceptance_rate[0][0] == 0:\n        return 0\n    else:\n        return (accepted_offers[0][0] / offer_acceptance_rate[0][0]) * 100\n\n", "CodeBleu_score": 25.18395019918877}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if not company and not department:\n        offers = frappe.db.sql(\n            \"\"\"\n            SELECT\n                COUNT(*)\n            FROM `tabJob Offer`\n            WHERE\n                docstatus = 1\n            \"\"\",\n            as_dict=1,\n        )\n        accepted_offers = frappe.db.sql(\n            \"\"\"\n            SELECT\n                COUNT(*)\n            FROM `tabJob Offer`\n            WHERE\n                docstatus = 1\n                AND accepted = 1\n            \"\"\",\n            as_dict=1,\n        )\n    elif company:\n        offers = frappe.db.sql(\n            \"\"\"\n            SELECT\n                COUNT(*)\n            FROM `tabJob Offer`\n            WHERE\n                docstatus = 1\n                AND company = %s\n            \"\"\",\n            (company),\n            as_dict=1,\n        )\n        accepted_offers = frappe.db.sql(\n            \"\"\"\n            SELECT\n                COUNT(*)\n            FROM `tabJob Offer`\n            WHERE\n                docstatus = 1\n                AND accepted = 1\n                AND company = %s\n            \"\"\",\n            (company),\n            as_dict=1,\n        )\n    elif department:\n        offers = frappe.db.sql(\n            \"\"\"\n            SELECT\n                COUNT(*)\n            FROM `tabJob Offer`\n            WHERE\n                docstatus = 1\n                AND department = %s\n            \"\"\",\n            (department),\n            as_dict=1,\n        )\n        accepted_offers = frappe.db.sql(\n            \"\"\"\n            SELECT\n                COUNT(*)\n            FROM `tabJob Offer`\n            WHERE\n                docstatus = 1\n                AND accepted = 1\n                AND department = %s\n            \"\"\",\n            (department),\n            as_dict=1,\n        )\n    else:\n        raise frappe.ValidationError(\"No company or department specified\")\n    if offers[0].get(\"count(*)\") == 0:\n        return 0\n    else:\n        return round(\n            (accepted_offers[0].get(\"count(*)\") / offers[0].get(\"count(*)\") * 100), 2\n        )\n\n", "CodeBleu_score": 23.01483416903407}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\treturn ResponseEntity.ok(this.employerService.register(employerForRegisterDto));\n}", "CodeBleu_score": 15.410726276123283}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\treturn ResponseEntity.status(HttpStatus.OK).body(employerService.register(employerForRegisterDto));\n}", "CodeBleu_score": 20.13076917814826}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\treturn ResponseEntity.ok(employerService.register(employerForRegisterDto));\n}", "CodeBleu_score": 16.513507194565904}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\tfinal Optional<CompanyStaff> companyStaffOptional = this.companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\tif (companyStaffOptional.isEmpty()) {\n\t\treturn new ErrorResult(Messages.RECORD_NOT_FOUND);\n\t}\n\tfinal CompanyStaff companyStaff = companyStaffOptional.get();\n\tfinal Result result = BusinessRules.run(\n\t\t\tcheckIfPasswordMatches(companyStaffForUpdateDto, companyStaff),\n\t\t\tcheckIfCompanyStaffExists(companyStaffForUpdateDto.getEmail(), companyStaff.getEmail()),\n\t\t\tcheckIfCompanyStaffExists(companyStaffForUpdateDto.getPhoneNumber(), companyStaff.getPhoneNumber())\n\t);\n\tif (result.isSuccess()) {\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\tcompanyStaff.setEmail(companyStaffForUpdateDto.getEmail());\n\t\tcompanyStaff.setPhoneNumber(companyStaffForUpdateDto.getPhoneNumber());\n\t\tcompanyStaff.setPassword(());\n\t\tthis.companyStaffDao.save(companyStaff);\n\t\treturn new SuccessResult(Messages.RECORD_UPDATED);\n\t}\n\treturn result;\n}", "CodeBleu_score": 44.71115457246603}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\tOptional<CompanyStaff> companyStaffOptional = this.companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\tif (!companyStaffOptional.isPresent()) {\n\t\treturn new ErrorResult(Messages.STAFF_NOT_FOUND);\n\t}\n\tCompanyStaff companyStaff = companyStaffOptional.get();\n\tif (!companyStaff.getPassword().equals(companyStaffForUpdateDto.getPassword())) {\n\t\treturn new ErrorResult(Messages.STAFF_PASSWORD_NOT_MATCH);\n\t}\n\tif (!BusinessRules.run(this.companyStaffManager.checkIfRealName(companyStaffForUpdateDto.getFirstName(), companyStaffForUpdateDto.getLastName()))) {\n\t\treturn new ErrorResult(Messages.STAFF_FIRST_NAME_LAST_NAME_INVALID);\n\t}\n\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\tthis.companyStaffDao.save(companyStaff);\n\treturn new SuccessResult(Messages.STAFF_UPDATED);\n}", "CodeBleu_score": 42.46423152367737}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\treturn new BaseManager<CompanyStaff, CompanyStaffDao>(companyStaffDao) {\n\n\t\t@Override\n\t\tpublic Result checkRules(CompanyStaff companyStaff) {\n\t\t\treturn BusinessRules.run(\n\t\t\t\t\tcheckIfPasswordsMatch(companyStaffForUpdateDto.getPassword(), companyStaff.getPassword()),\n\t\t\t\t\tcheckIfCompanyStaffExists(companyStaffForUpdateDto.getId())\n\t\t\t);\n\t\t}\n\n\t\t@Override\n\t\tpublic Result doOperation(CompanyStaff companyStaff) {\n\t\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\t\tcompanyStaffDao.save(companyStaff);\n\t\t\treturn new SuccessResult(Messages.UPDATE_SUCCESS);\n\t\t}\n\n\t\t@Override\n\t\tpublic Optional<CompanyStaff> findById(Integer id) {\n\t\t\treturn companyStaffDao.findById(id);\n\t\t}\n\t}.execute(companyStaffForUpdateDto.getId());\n}", "CodeBleu_score": 34.3537908981142}]}
