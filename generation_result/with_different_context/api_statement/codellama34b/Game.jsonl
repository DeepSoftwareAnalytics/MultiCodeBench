{"instance_id": "47ee1dae200b", "generation_result": [{"code": "public static void PreloadDll(string dllName){\n\t    string dllDirectory = GetDirectedDllDirectory();\n    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n        Win32.LoadDll(dllDirectory, dllName);\n    } else {\n        Posix.LoadDll(dllDirectory, dllName);\n    }\n}", "CodeBleu_score": 70.40519008985467}, {"code": "public static void PreloadDll(string dllName){\n\t    string dllDirectory = GetDllDirectory();\n    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n        Win32.LoadDll(dllDirectory, dllName);\n    } else {\n        Posix.LoadDll(dllDirectory, dllName);\n    }\n}", "CodeBleu_score": 66.66336156968559}, {"code": "public static void PreloadDll(string dllName){\n\t    string dllDirectory = GetDirectedDllDirectory();\n    string dllPath = Path.Combine(dllDirectory, dllName);\n    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n        Win32.LoadDll(dllPath);\n    } else {\n        Posix.LoadDll(dllPath);\n    }\n}", "CodeBleu_score": 37.458709003225046}]}
{"instance_id": "2073a8291d05", "generation_result": [{"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t    var fileName = Path.GetFileName(originalPath);\n    if (assetsFileList.ContainsKey(fileName)) {\n        Logger.Info(\"Skipped duplicate file {0}\", fileName);\n        return;\n    }\n    if (assetsFileListHash.Contains(reader.ReadUInt32())) {\n        Logger.Info(\"Skipped duplicate file {0}\", fileName);\n        return;\n    }\n    try {\n        var file = new SerializedFile(reader, originalPath, unityVersion);\n        if (file.header.format < 0x0E) {\n            CheckStrippedVersion(file);\n        }\n        assetsFileList.Add(fileName, file);\n        assetsFileListHash.Add(reader.ReadUInt32());\n    }\n    catch (Exception e) {\n        Logger.Error(\"Error loading file {0}\", fileName);\n        Logger.LogException(e);\n    }\n}", "CodeBleu_score": 45.34872166348949}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t\tif (assetsFileList.TryGetValue(reader.FullPath, out var existingAssetsFile)) {\n\t\tLogger.Error(LogType.DuplicateAssetsFile, $\"Duplicate assets file {reader.FullPath}\");\n\t\treturn;\n\t}\n\tvar assetsFile = new SerializedFile(reader, originalPath, unityVersion);\n\tif (assetsFile.header.format < 9) {\n\t\tassetsFile.SetVersion(unityVersion);\n\t}\n\tassetsFileList.Add(reader.FullPath, assetsFile);\n\tassetsFileListHash.Add(assetsFile.assetsFileListHash, assetsFile);\n}", "CodeBleu_score": 33.25891595157396}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t\tif (assetsFileList.TryGetValue(originalPath, out var existing)) {\n\t\tLogger.Error(LogType.DuplicateAssetsFile, $\"Duplicate asset file {originalPath}\");\n\t\treturn;\n\t}\n\tvar assetsFile = new SerializedFile(reader, originalPath, this);\n\tif (unityVersion != null) {\n\t\tassetsFile.SetVersion(unityVersion);\n\t}\n\tif (CheckStrippedVersion(assetsFile)) {\n\t\tassetsFileList.Add(originalPath, assetsFile);\n\t}\n}", "CodeBleu_score": 27.388839333829175}]}
{"instance_id": "5dacc6a26301", "generation_result": [{"code": "public ImportedFrame FindFrameByPath(string path){\n\t\t// Split the path into its components\n\tstring[] components = path.Split('/');\n\t// Get the name of the frame to search for\n\tstring name = components[components.Length - 1];\n\t// Get the list of child frames with that name\n\tList<ImportedFrame> childFrames = FindChilds(name);\n\t// Iterate through the list of child frames\n\tfor (int i = 0; i < childFrames.Count; i++) {\n\t\t// Get the frame\n\t\tImportedFrame frame = childFrames[i];\n\t\t// Check if the frame's path matches the given path\n\t\tif (frame.Path == path) {\n\t\t\t// Return the frame if it matches\n\t\t\treturn frame;\n\t\t}\n\t}\n\t// Return null if no match was found\n\treturn null;\n}", "CodeBleu_score": 54.182889850655535}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\t\tstring name = path.Substring(path.LastIndexOf(\"/\") + 1);\n\tImportedFrame[] frames = FindChilds<ImportedFrame>(name);\n\tforeach (ImportedFrame frame in frames) {\n\t\tif (frame.Path == path) {\n\t\t\treturn frame;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 56.514306734898845}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\t    if (path == null) {\n        return null;\n    }\n\n    var frame = this;\n    var pathParts = path.Split('/');\n\n    for (int i = 1; i < pathParts.Length; i++) {\n        var child = frame.FindChild(pathParts[i]);\n        if (child == null) {\n            return null;\n        }\n\n        frame = child;\n    }\n\n    return frame;\n}", "CodeBleu_score": 38.49944006947009}]}
{"instance_id": "c20b04c4ad37", "generation_result": [{"code": "public static FileReader DecompressGZip(FileReader reader){\n\t    using (var compressedStream = new MemoryStream()) {\n        reader.CopyTo(compressedStream);\n        compressedStream.Position = 0;\n        using (var zipStream = new GZipStream(compressedStream, CompressionMode.Decompress)) {\n            var result = new MemoryStream();\n            zipStream.CopyTo(result);\n            return new FileReader(result);\n        }\n    }\n}", "CodeBleu_score": 55.986484961558524}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\t\tMemoryStream memStream = new MemoryStream();\n\treader.BaseStream.CopyTo(memStream);\n\tmemStream.Position = 0;\n\n\tMemoryStream outStream = new MemoryStream();\n\tusing (GZipStream inStream = new GZipStream(memStream, CompressionMode.Decompress)) {\n\t\tinStream.CopyTo(outStream);\n\t}\n\n\toutStream.Position = 0;\n\treturn new FileReader(outStream);\n}", "CodeBleu_score": 42.42047059451734}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\t\t// Create a MemoryStream to hold the decompressed data.\n\tvar decompressedStream = new MemoryStream();\n\t// Create a GZipStream with decompression mode.\n\t// ... Then create a buffer and start reading into it.\n\tusing (var compressedStream = new GZipStream(reader.BaseStream, CompressionMode.Decompress)) {\n\t\tvar size = 4096;\n\t\tvar buffer = new byte[size];\n\t\twhile (true) {\n\t\t\tvar bytesRead = compressedStream.Read(buffer, 0, size);\n\t\t\tif (bytesRead == 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// Write the bytes to the output stream.\n\t\t\tdecompressedStream.Write(buffer, 0, bytesRead);\n\t\t}\n\t}\n\t// Reset the stream.\n\tdecompressedStream.Position = 0;\n\t// Return the decompressed data.\n\treturn new FileReader(decompressedStream);\n}", "CodeBleu_score": 43.77391765687487}]}
{"instance_id": "11ce5c7b009d", "generation_result": [{"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t    // Iterate through each command string\n    foreach (string commandString in commandStrings) {\n        // If the command string is a stop token, stop parsing switches\n        if (commandString == StopToken)\n            StopParsing = true;\n\n        // If the command string is a switch\n        else if (commandString.StartsWith(SwitchPrefix)) {\n            // Iterate through each switch form\n            foreach (SwitchForm switchForm in switchForms) {\n                // If the command string is a switch for the switch form\n                if (commandString.StartsWith(switchForm.SwitchName)) {\n                    // If the command string is a valid switch\n                    if (commandString.Length > switchForm.SwitchName.Length) {\n                        // If the command string is a boolean switch\n                        if (switchForm.SwitchType == SwitchType.Boolean) {\n                            // If the command string is a valid boolean switch\n                            if (commandString.Length == switchForm.SwitchName.Length)\n                                switchForm.SwitchValue = true;\n                            // Else the command string is not a valid boolean switch\n                            else\n                                throw new Exception(\"Invalid boolean switch: \" + commandString);\n                        }\n                        // Else the command string is not a boolean switch\n                        else {\n                            // If the command string is a valid switch\n                            if (commandString.Length == switchForm.SwitchName.Length + 1)\n                                switchForm.SwitchValue = commandString.Substring(switchForm.SwitchName.Length + 1);\n                            // Else the command string is not a valid switch\n                            else\n                                throw new Exception(\"Invalid switch: \" + commandString);\n                        }\n                    }\n                    // Else the command string is not a valid switch\n                    else\n                        throw new Exception(\"Invalid switch: \" + commandString);\n                }\n            }\n        }\n        // Else the command string is not a switch\n        else\n            NonSwitchStrings.Add(commandString);\n    }\n}", "CodeBleu_score": 37.22335237504299}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\tParseStrings(switchForms, commandStrings, null);\n}", "CodeBleu_score": 16.93988777593802}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t    if (switchForms == null || commandStrings == null) return;\n    for (int i = 0; i < commandStrings.Length; i++) {\n        string commandString = commandStrings[i];\n        if (commandString == null) continue;\n        if (commandString == StopToken) break;\n        if (commandString.StartsWith(SwitchToken)) {\n            ParseString(switchForms, commandString);\n        } else {\n            NonSwitchStrings.Add(commandString);\n        }\n    }\n}", "CodeBleu_score": 41.294199427494284}]}
{"instance_id": "b8da2d0a3f76", "generation_result": [{"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t\n    this.imageData = m_Texture2D.imageContentsHash.ToList();\n    this.width = m_Texture2D.m_Width;\n    this.height = m_Texture2D.m_Height;\n    this.textureFormat = m_Texture2D.m_TextureFormat;\n    this.version = m_Texture2D.m_Version;\n    this.platform = m_Texture2D.m_Platform;\n    this.outputSize = m_Texture2D.m_StreamData.size;\n}", "CodeBleu_score": 36.50174272519454}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t\t\n\tif (m_Texture2D == null) {\n\t\tDebug.LogError(\"Texture2DConverter: Texture2D object is null.\");\n\t\treturn;\n\t}\n\t\n\t// Extract and set properties.\n\tthis.m_Texture2D = m_Texture2D;\n\tthis.m_Texture2D.GetRawTextureData();\n\tthis.m_Texture2D.GetPixelDataSize();\n\tthis.m_Texture2D.GetPixels();\n\tthis.m_Texture2D.GetPixels32();\n\tthis.m_Texture2D.GetPixels(0);\n\tthis.m_Texture2D.GetPixels(0, 0);\n\tthis.m_Texture2D.GetPixels(0, 0, 0);\n\tthis.m_Texture2D.GetPixels(0, 0, 0, 0);\n\tthis.m_Texture2D.GetPixels32(0);\n\tthis.m_Texture2D.GetPixels32(0, 0);\n\tthis.m_Texture2D.GetPixels32(0, 0, 0);\n\tthis.m_Texture2D.GetPixels32(0, 0, 0, 0);\n\tthis.m_Texture2D.GetRawTextureData();\n\tthis.m_Texture2D.GetRawTextureData(0);\n\tthis.m_Texture2D.GetRawTextureData(0, 0);\n\tthis.m_Texture2D.GetRawTextureData(0, 0, 0);\n\tthis.m_Texture2D.GetRawTextureData(0, 0, 0, 0);\n\tthis.m_Texture2D.GetRawTextureData(0, 0, 0, 0, 0);\n\tthis.m_Texture2D.GetRawTextureData(0, 0, 0, 0, 0, 0);\n\tthis.m_Texture2D.GetRawTextureData(0, 0, 0, 0, 0, 0, 0);\n\tthis", "CodeBleu_score": 22.91971729557452}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t    this.m_Texture2D = m_Texture2D;\n    this.m_ImageData = m_Texture2D.imageData;\n    this.m_Width = m_Texture2D.width;\n    this.m_Height = m_Texture2D.height;\n    this.m_TextureFormat = m_Texture2D.format;\n    this.m_Version = m_Texture2D.version;\n    this.m_Platform = m_Texture2D.platform;\n    this.m_OutputSize = m_Texture2D.outputSize;\n}", "CodeBleu_score": 34.19257427867349}]}
{"instance_id": "4d1412b550a3", "generation_result": [{"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t\tresult.Clear();\n\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\tSerializedProperty element = sp.GetArrayElementAtIndex(i);\n\t\tif (element.FindPropertyRelative(\"isActive\").boolValue) {\n\t\t\tresult.Add(element.FindPropertyRelative(\"name\").stringValue);\n\t\t}\n\t}\n\tif (result.Count == 0) {\n\t\treturn \"Nothing\";\n\t} else {\n\t\treturn result.Aggregate((i, j) => i + \", \" + j);\n\t}\n}", "CodeBleu_score": 39.841684319505596}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t    result.Clear();\n\n    for (int i = 0; i < sp.arraySize; i++) {\n        SerializedProperty element = sp.GetArrayElementAtIndex(i);\n        SerializedProperty name = element.FindPropertyRelative(\"name\");\n        if (name != null) {\n            result.Add(name.stringValue);\n        }\n    }\n\n    if (result.Count == 0) {\n        return \"Nothing\";\n    } else {\n        return string.Join(\", \", result.ToArray());\n    }\n}", "CodeBleu_score": 42.02166664425191}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t\tresult.Clear();\n\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\tif (sp.GetArrayElementAtIndex(i).FindPropertyRelative(\"active\").boolValue) {\n\t\t\tresult.Add(sp.GetArrayElementAtIndex(i).FindPropertyRelative(\"name\").stringValue);\n\t\t}\n\t}\n\tif (result.Count == 0) {\n\t\treturn \"Nothing\";\n\t} else {\n\t\treturn string.Join(\", \", result.ToArray());\n\t}\n}", "CodeBleu_score": 36.446184169776224}]}
{"instance_id": "5014bde74f8b", "generation_result": [{"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t\tif (!prop.allowAdd && add) return;\n\tif (!prop.allowRemove && !add) return;\n\tif (s_ActiveNames.Contains(prop.name)) return;\n\n\tstring label = add ? \"Add \" + prop.name : \"Remove \" + prop.name;\n\tmenu.AddItem(new GUIContent(label), false, () => {\n\t\tif (add) {\n\t\t\ts_ActiveNames.Add(prop.name);\n\t\t\tsp.InsertArrayElementAtIndex(sp.arraySize);\n\t\t\tsp.GetArrayElementAtIndex(sp.arraySize - 1).FindPropertyRelative(\"m_Name\").stringValue = prop.name;\n\t\t\tsp.serializedObject.ApplyModifiedProperties();\n\t\t} else {\n\t\t\tint index = s_ActiveNames.IndexOf(prop.name);\n\t\t\ts_ActiveNames.RemoveAt(index);\n\t\t\tsp.DeleteArrayElementAtIndex(index);\n\t\t\tsp.serializedObject.ApplyModifiedProperties();\n\t\t}\n\t});\n}", "CodeBleu_score": 42.00747491535864}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t    if (add) {\n        if (s_ActiveNames.Contains(prop.name))\n            return;\n        menu.AddItem(new GUIContent(prop.name + \" (\" + prop.type + \")\"), false, OnSelect, new PropertyInfo(sp, prop, add));\n    } else {\n        if (!s_ActiveNames.Contains(prop.name))\n            return;\n        menu.AddItem(new GUIContent(prop.name + \" (\" + prop.type + \")\"), false, OnSelect, new PropertyInfo(sp, prop, add));\n    }\n}", "CodeBleu_score": 26.118622144446498}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t\tif(add && !s_ActiveNames.Contains(prop.name)) {\n\t\tmenu.AddItem(new GUIContent(prop.name + \" (\" + prop.type + \")\"), false, () => {\n\t\t\tif(s_ActiveNames.Contains(prop.name)) {\n\t\t\t\tDebug.LogWarning(\"Shader property \" + prop.name + \" is already active\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ts_ActiveNames.Add(prop.name);\n\t\t\tsp.InsertArrayElementAtIndex(sp.arraySize);\n\t\t\tsp.GetArrayElementAtIndex(sp.arraySize - 1).FindPropertyRelative(\"name\").stringValue = prop.name;\n\t\t\tsp.GetArrayElementAtIndex(sp.arraySize - 1).FindPropertyRelative(\"type\").stringValue = prop.type;\n\t\t\tsp.serializedObject.ApplyModifiedProperties();\n\t\t});\n\t}\n\telse if(!add && s_ActiveNames.Contains(prop.name)) {\n\t\tmenu.AddItem(new GUIContent(prop.name + \" (\" + prop.type + \")\"), false, () => {\n\t\t\tif(!s_ActiveNames.Contains(prop.name)) {\n\t\t\t\tDebug.LogWarning(\"Shader property \" + prop.name + \" is not active\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ts_ActiveNames.Remove(prop.name);\n\t\t\tsp.DeleteArrayElementAtIndex(s_ActiveNames.IndexOf(prop.name));\n\t\t\tsp.serializedObject.ApplyModifiedProperties();\n\t\t});\n\t}\n}", "CodeBleu_score": 36.00218293364737}]}
{"instance_id": "20e390481814", "generation_result": [{"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t    bool changed = false;\n    float x = sp.FindPropertyRelative(\"x\").floatValue;\n    float y = sp.FindPropertyRelative(\"y\").floatValue;\n    float z = sp.FindPropertyRelative(\"z\").floatValue;\n    bool multipleValues = !Mathf.Approximately(x, y) || !Mathf.Approximately(x, z);\n\n    if (multipleValues) {\n        EditorGUILayout.BeginHorizontal();\n        EditorGUI.BeginChangeCheck();\n        Vector3 v = EditorGUILayout.Vector3Field(sp.displayName, new Vector3(x, y, z));\n        if (EditorGUI.EndChangeCheck()) {\n            sp.FindPropertyRelative(\"x\").floatValue = v.x;\n            sp.FindPropertyRelative(\"y\").floatValue = v.y;\n            sp.FindPropertyRelative(\"z\").floatValue = v.z;\n            changed = true;\n        }\n        showXyz = GUILayout.Toggle(showXyz, \"xyz\", GUILayout.Width(30));\n        EditorGUILayout.EndHorizontal();\n    } else {\n        EditorGUILayout.BeginHorizontal();\n        EditorGUI.BeginChangeCheck();\n        float f = EditorGUILayout.FloatField(sp.displayName, x);\n        if (EditorGUI.EndChangeCheck()) {\n            sp.FindPropertyRelative(\"x\").floatValue = f;\n            changed = true;\n        }\n        showXyz = GUILayout.Toggle(showXyz, \"xyz\", GUILayout.Width(30));\n        EditorGUILayout.EndHorizontal();\n    }\n    return changed;\n}", "CodeBleu_score": 40.647747523036145}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t\tEditorGUILayout.BeginHorizontal();\n\tEditorGUI.BeginChangeCheck();\n\tif (showXyz) {\n\t\tEditorGUILayout.PropertyField(sp, GUIContent.none, GUILayout.Width(EditorGUIUtility.labelWidth));\n\t} else {\n\t\tEditorGUILayout.PropertyField(sp.FindPropertyRelative(\"x\"), GUIContent.none, GUILayout.Width(EditorGUIUtility.labelWidth));\n\t}\n\tif (EditorGUI.EndChangeCheck()) {\n\t\tsp.serializedObject.ApplyModifiedProperties();\n\t}\n\tif (showXyz) {\n\t\tif (Mathf.Approximately(sp.FindPropertyRelative(\"x\").floatValue, sp.FindPropertyRelative(\"y\").floatValue) &&\n\t\t\tMathf.Approximately(sp.FindPropertyRelative(\"x\").floatValue, sp.FindPropertyRelative(\"z\").floatValue)) {\n\t\t\tshowXyz = false;\n\t\t} else {\n\t\t\tif (Mathf.Approximately(sp.FindPropertyRelative(\"x\").floatValue, sp.FindPropertyRelative(\"y\").floatValue)) {\n\t\t\t\tsp.FindPropertyRelative(\"y\").floatValue = sp.FindPropertyRelative(\"x\").floatValue;\n\t\t\t} else if (Mathf.Approximately(sp.FindPropertyRelative(\"x\").floatValue, sp.FindPropertyRelative(\"z\").floatValue)) {\n\t\t\t\tsp.FindPropertyRelative(\"z\").floatValue = sp.FindPropertyRelative(\"x\").floatValue;\n\t\t\t}\n\t\t\tif (Mathf.Approximately(sp.FindPropertyRelative(\"y\").floatValue, sp.FindPropertyRelative(\"z\").floatValue)) {\n\t\t\t\tsp.FindPropertyRelative(\"z\").floatValue = sp.FindPropertyRelative(\"y\").floatValue;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tsp.FindPropertyRelative(\"y\").floatValue = sp.FindPropertyRelative(\"x\").floatValue;\n\t\tsp.FindPropertyRelative(\"z\").floatValue = sp.FindPropertyRelative(\"x\").floatValue;\n\t\tif (!Mathf.Approximately(sp.Find", "CodeBleu_score": 31.288872825806667}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t\tfloat x = sp.FindPropertyRelative(\"x\").floatValue;\n\tfloat y = sp.FindPropertyRelative(\"y\").floatValue;\n\tfloat z = sp.FindPropertyRelative(\"z\").floatValue;\n\t\n\tEditorGUI.BeginChangeCheck();\n\t\n\tEditorGUILayout.BeginHorizontal();\n\t\n\tif (showXyz) {\n\t\tEditorGUILayout.PropertyField(sp);\n\t} else {\n\t\tEditorGUILayout.PropertyField(sp.FindPropertyRelative(\"x\"), GUIContent.none);\n\t}\n\t\n\tif (Mathf.Approximately(x, y) && Mathf.Approximately(y, z)) {\n\t\tEditorGUILayout.LabelField(x.ToString(\"0.000\"), GUILayout.Width(40));\n\t} else {\n\t\tEditorGUILayout.LabelField(\"-\", GUILayout.Width(40));\n\t}\n\t\n\tif (GUILayout.Toggle(showXyz, \"xyz\", GUI.skin.button, GUILayout.Width(30))) {\n\t\tshowXyz = true;\n\t}\n\t\n\tEditorGUILayout.EndHorizontal();\n\t\n\tif (EditorGUI.EndChangeCheck()) {\n\t\tif (showXyz) {\n\t\t\tsp.FindPropertyRelative(\"y\").floatValue = x;\n\t\t\tsp.FindPropertyRelative(\"z\").floatValue = x;\n\t\t} else {\n\t\t\tsp.FindPropertyRelative(\"y\").floatValue = x;\n\t\t\tsp.FindPropertyRelative(\"z\").floatValue = x;\n\t\t}\n\t}\n\t\n\treturn showXyz;\n}", "CodeBleu_score": 40.268965830385824}]}
{"instance_id": "c3587cbcda7e", "generation_result": [{"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t    Material customMat = null;\n\n    //Search for an existing entry\n    foreach (var entry in s_Entries) {\n        if (entry.baseMat == baseMat && entry.texture == texture && entry.id == id && entry.props == props) {\n            customMat = entry.customMat;\n            entry.count++;\n            break;\n        }\n    }\n\n    //Create a new entry\n    if (customMat == null) {\n        customMat = new Material(baseMat);\n        customMat.mainTexture = texture;\n        customMat.SetInt(\"_ID\", id);\n        customMat.SetInt(\"_Props\", props);\n        s_Entries.Add(new Entry(baseMat, texture, id, props, customMat));\n    }\n\n    return customMat;\n}", "CodeBleu_score": 33.80252820936172}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t\n\t// Loop through the list\n\tforeach (MaterialEntry entry in s_Entries) {\n\n\t\t// If the entry matches the base material, texture, id, and properties, increment its count and return the custom material\n\t\tif (entry.baseMat == baseMat && entry.texture == texture && entry.id == id && entry.props == props) {\n\t\t\tentry.count++;\n\t\t\treturn entry.customMat;\n\t\t}\n\t}\n\n\t// If no match was found, create a new entry\n\tMaterialEntry entry = new MaterialEntry();\n\n\t// Set the base material, texture, id, and properties\n\tentry.baseMat = baseMat;\n\tentry.texture = texture;\n\tentry.id = id;\n\tentry.props = props;\n\n\t// Create a new custom material\n\tentry.customMat = new Material(baseMat);\n\n\t// Set the texture and properties\n\tentry.customMat.mainTexture = texture;\n\tentry.customMat.SetInt(\"_ID\", id);\n\tentry.customMat.SetInt(\"_Props\", props);\n\n\t// Add the entry to the list\n\ts_Entries.Add(entry);\n\n\t// Increment the entry count and return the custom material\n\tentry.count++;\n\treturn entry.customMat;\n}", "CodeBleu_score": 28.659074353081156}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t\tint i = 0;\n\tint count = s_Entries.Count;\n\tfor (; i < count; i++) {\n\t\tMaterialEntry entry = s_Entries[i];\n\t\tif (entry.baseMat == baseMat && entry.texture == texture && entry.id == id && entry.props == props) {\n\t\t\tentry.count++;\n\t\t\treturn entry.material;\n\t\t}\n\t}\n\tMaterial material = new Material(baseMat);\n\tmaterial.SetTexture(\"_MainTex\", texture);\n\tmaterial.SetInt(\"_ID\", id);\n\tmaterial.SetInt(\"_Props\", props);\n\tMaterialEntry entry = new MaterialEntry();\n\tentry.baseMat = baseMat;\n\tentry.texture = texture;\n\tentry.id = id;\n\tentry.props = props;\n\tentry.material = material;\n\tentry.count = 1;\n\ts_Entries.Add(entry);\n\treturn material;\n}", "CodeBleu_score": 30.9808952245308}]}
{"instance_id": "a35149bc8b8b", "generation_result": [{"code": "public static void Remove(Material customMat){\n\t\tif (customMat == null) return;\n\n\t// Iterate through the list of entries\n\tfor (int i = 0; i < s_Entries.Count; i++) {\n\t\t// If the material matches the entry's material\n\t\tif (s_Entries[i].mat == customMat) {\n\t\t\t// Decrease the count of the entry\n\t\t\ts_Entries[i].count--;\n\n\t\t\t// If the count reaches zero\n\t\t\tif (s_Entries[i].count <= 0) {\n\t\t\t\t// Destroy the material\n\t\t\t\tMisc.DestroyImmediate(customMat);\n\n\t\t\t\t// Clear the data\n\t\t\t\ts_Entries[i].data = null;\n\n\t\t\t\t// Remove the entry from the list\n\t\t\t\ts_Entries.RemoveAt(i);\n\t\t\t}\n\n\t\t\t// Break from the loop\n\t\t\tbreak;\n\t\t}\n\t}\n}", "CodeBleu_score": 36.02690707373295}, {"code": "public static void Remove(Material customMat){\n\t\tif (customMat == null) {\n\t\tDebug.LogError(\"[KSPM] Error: Cannot remove a null material.\");\n\t\treturn;\n\t}\n\n\tif (!s_Entries.Contains(customMat)) {\n\t\tDebug.LogError(\"[KSPM] Error: Cannot remove a material that is not in the list.\");\n\t\treturn;\n\t}\n\n\tfor (int i = 0; i < s_Entries.Count; i++) {\n\t\tif (s_Entries[i].material == customMat) {\n\t\t\ts_Entries[i].count--;\n\n\t\t\tif (s_Entries[i].count == 0) {\n\t\t\t\tMisc.DestroyImmediate(s_Entries[i].material);\n\t\t\t\ts_Entries.RemoveAt(i);\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\t}\n}", "CodeBleu_score": 37.25593332993479}, {"code": "public static void Remove(Material customMat){\n\t    if (customMat == null) {\n        Debug.Log(\"Remove: Material is null.\");\n        return;\n    }\n\n    for (int i = 0; i < s_Entries.Count; i++) {\n        if (s_Entries[i].Material == customMat) {\n            s_Entries[i].Count--;\n            if (s_Entries[i].Count <= 0) {\n                Material.DestroyImmediate(s_Entries[i].Material);\n                s_Entries[i].Material = null;\n                s_Entries[i].Data = null;\n                s_Entries.RemoveAt(i);\n            }\n            return;\n        }\n    }\n}", "CodeBleu_score": 38.34073916346598}]}
{"instance_id": "892bbee52ab9", "generation_result": [{"code": "private void RefreshParticles(GameObject root){\n\t\t// Collect all child particle systems\n\tList<ParticleSystem> ps = root.GetComponentsInChildren<ParticleSystem>().ToList();\n\t\n\t// Remove particle systems that are not associated with this UIParticle\n\tps.RemoveAll(delegate(ParticleSystem p) {\n\t\tUIParticle uip = p.GetComponentInParent<UIParticle>();\n\t\tif (uip == null) return true;\n\t\treturn uip != this;\n\t});\n\t\n\t// Adjust texture sheet animation settings if necessary\n\tif (ps.Count > 0) {\n\t\tParticleSystem.MainModule main = ps[0].main;\n\t\tif (main.maxParticles > 1) {\n\t\t\tmain.startLifetime = new ParticleSystem.MinMaxCurve(1f);\n\t\t\tmain.startSpeed = new ParticleSystem.MinMaxCurve(0f);\n\t\t}\n\t\telse {\n\t\t\tmain.startLifetime = new ParticleSystem.MinMaxCurve(0f);\n\t\t\tmain.startSpeed = new ParticleSystem.MinMaxCurve(1f);\n\t\t}\n\t}\n\t\n\t// Refresh the particle systems\n\tUIParticle.RefreshParticles(ps);\n}", "CodeBleu_score": 29.041563701085927}, {"code": "private void RefreshParticles(GameObject root){\n\t    List<ParticleSystem> ps = root.GetComponentsInChildren<ParticleSystem>();\n    ps.RemoveAt(0);\n    foreach (ParticleSystem p in ps) {\n        if (p.GetComponentInParent<UIParticle>() != this) {\n            ps.Remove(p);\n        }\n    }\n    if (ps.Count > 0) {\n        if (texSheetAnim) {\n            foreach (ParticleSystem p in ps) {\n                ParticleSystem.MainModule main = p.main;\n                main.startLifetime = lifetime;\n                main.startSpeed = speed;\n                main.startSize = size;\n                main.startRotation = rotation;\n                main.startColor = color;\n                ParticleSystem.TextureSheetAnimationModule texSheet = p.textureSheetAnimation;\n                texSheet.enabled = true;\n                texSheet.mode = ParticleSystemAnimationMode.WholeSheet;\n                texSheet.rowMode = ParticleSystemAnimationRowMode.Custom;\n                texSheet.frameOverTime = new ParticleSystem.MinMaxCurve(0);\n                texSheet.frameCount = texSheetAnim.frames;\n                texSheet.startFrame = texSheetAnim.startFrame;\n                texSheet.startFrame = texSheetAnim.startFrame;\n                texSheet.animation = texSheetAnim.anim;\n                texSheet.flipU = texSheetAnim.flipU;\n                texSheet.flipV = texSheetAnim.flipV;\n                texSheet.uvChannel = (UVChannel)texSheetAnim.uvChannel;\n            }\n        }\n        ParticleSystem.MainModule main = ps[0].main;\n        main.startLifetime = lifetime;\n        main.startSpeed = speed;\n        main.startSize = size;\n        main.startRotation = rotation;\n        main.startColor = color;\n        ParticleSystem.EmissionModule emission = ps[0].emission;\n        emission.rateOverTime = rate;\n        ps[0].Play();\n    }\n}", "CodeBleu_score": 30.935043776244374}, {"code": "private void RefreshParticles(GameObject root){\n\t    // Get all child particle systems\n    ParticleSystem[] ps = root.GetComponentsInChildren<ParticleSystem>();\n\n    // Remove all particle systems not associated with this UIParticle\n    ps = ps.Where(x => x.GetComponentInParent<UIParticle>() == this).ToArray();\n\n    // Adjust texture sheet animation settings if necessary\n    foreach (ParticleSystem p in ps) {\n        var main = p.main;\n        var texSheet = p.textureSheetAnimation;\n\n        // If the texture sheet animation is not enabled, skip this particle system\n        if (!texSheet.enabled) continue;\n\n        // If the particle system is using a different texture, skip this particle system\n        if (texSheet.mode == ParticleSystemAnimationMode.WholeSheet && texSheet.wholeSheet.texture != texture) continue;\n\n        // If the particle system is using a different number of rows, skip this particle system\n        if (texSheet.mode == ParticleSystemAnimationMode.SingleRow && texSheet.rowCount != rows) continue;\n\n        // If the particle system is using a different number of columns, skip this particle system\n        if (texSheet.mode == ParticleSystemAnimationMode.SingleRow && texSheet.rowCount != columns) continue;\n\n        // If the particle system is using a different number of frames, skip this particle system\n        if (texSheet.mode == ParticleSystemAnimationMode.SingleRow && texSheet.rowCount != frames) continue;\n\n        // If the particle system is using a different animation speed, skip this particle system\n        if (texSheet.mode == ParticleSystemAnimationMode.SingleRow && texSheet.rowCount != animationSpeed) continue;\n\n        // If the particle system is using a different animation type, skip this particle system\n        if (texSheet.mode == ParticleSystemAnimationMode.SingleRow && texSheet.rowCount != animationType) continue;\n\n        // If the particle system is using a different start frame, skip this particle system\n        if (texSheet.mode == ParticleSystemAnimationMode.SingleRow && texSheet.rowCount != startFrame) continue;\n\n        // If the particle system is using a different end frame, skip this particle system\n        if (texSheet.mode == ParticleSystem", "CodeBleu_score": 24.238845147901174}]}
{"instance_id": "d6b082e37770", "generation_result": [{"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t    containerBuilder\n        .RegisterAssemblyTypes(currentAssembly)\n        .AssignableTo<IColorSwapManager>()\n        .As<IColorSwapManager>()\n        .SingleInstance();\n}", "CodeBleu_score": 87.1766264907754}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t    containerBuilder\n        .RegisterAssemblyTypes(currentAssembly)\n        .AssignableTo<IColorSwapManager>()\n        .As<IColorSwapManager>()\n        .SingleInstance();\n}", "CodeBleu_score": 87.1766264907754}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t    containerBuilder\n        .RegisterAssemblyTypes(currentAssembly)\n        .AssignableTo<IColorSwapManager>()\n        .As<IColorSwapManager>()\n        .SingleInstance();\n}", "CodeBleu_score": 87.1766264907754}]}
{"instance_id": "2359d72977a4", "generation_result": [{"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t     this.ipAddress = ipAddress;\n     this.port = port;\n\n     // Wait for the serializer to initialize.\n     await this.serializer.InitializeAsync();\n\n     // Initiate a reservation negotiation using the current state.\n     await this.CurrentState.NegotiateReservationAsync(this);\n }", "CodeBleu_score": 38.8091050158118}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t     IPAddress = ipAddress;\n     Port = port;\n     await Serializer.InitializeAsync();\n     await CurrentState.NegotiateReservationAsync(this);\n }", "CodeBleu_score": 50.412892448592004}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t     this.ipAddress = ipAddress;\n     this.port = port;\n\n     // This function, ConnectAsync, sets the IP address and port, then waits for a serializer initialization task to complete.\nAfterward, it initiates a reservation negotiation using the current state.\n     await InitializeSerializer();\n     await CurrentState.NegotiateReservationAsync(this);\n }", "CodeBleu_score": 38.0816501208409}]}
{"instance_id": "151a27d718b1", "generation_result": [{"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t    Validate.NotNull(sessionConnectionState, \"sessionConnectionState\");\n\n    Log.Debug(\"Updating session connection state to \" + sessionConnectionState.ToString());\n    if (sessionConnectionState == IMultiplayerSessionConnectionState.SESSION_RESERVED) {\n        Log.Debug(\"Player name: \" + CurrentState.PlayerName);\n    }\n\n    ConnectionStateChanged?.Invoke(sessionConnectionState);\n}", "CodeBleu_score": 32.023462616304954}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t    Validate.NotNull(sessionConnectionState, \"sessionConnectionState\");\n    Log.Debug(\"Connection state transitioned from {0} to {1}\", CurrentState.CurrentStage, sessionConnectionState);\n    CurrentState.CurrentStage = sessionConnectionState;\n    if (CurrentState.CurrentStage == IMultiplayerSessionConnectionState.SESSION_RESERVED) {\n        CurrentState.PlayerName = CurrentState.PlayerName ?? \"Player\";\n    }\n    ConnectionStateChanged?.Invoke(CurrentState.CurrentStage);\n}", "CodeBleu_score": 40.05521367670721}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t    // Validate the input\n    Validate.NotNull(sessionConnectionState);\n\n    // Log the transition from the previous state to the new state\n    Log.Debug($\"Updating connection state from {CurrentState.CurrentStage} to {sessionConnectionState}\");\n\n    // Update the current state\n    CurrentState.CurrentStage = sessionConnectionState;\n\n    // Invoke the ConnectionStateChanged event\n    ConnectionStateChanged?.Invoke(CurrentState.CurrentStage);\n\n    // If the new state is SESSION_RESERVED, update the player name in the log\n    if (CurrentState.CurrentStage == IMultiplayerSessionConnectionState.SESSION_RESERVED) {\n        Log.PlayerName = CurrentState.PlayerName;\n    }\n}", "CodeBleu_score": 37.39921539155296}]}
{"instance_id": "7f7717307d6a", "generation_result": [{"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t    // Initialize the client\n    client = new LiteNetLibClient(new NitroxMessageProcessor(), new NitroxNetEventListener());\n    client.Start();\n    // Attempt to connect to the server\n    client.Connect(ipAddress, serverPort, \"nitrox\");\n    // Wait for a connection event for up to 2000 milliseconds\n    await Task.Run(() => {\n        connectedEvent.WaitOne(2000);\n        connectedEvent.Reset();\n    });\n}", "CodeBleu_score": 59.72081590398252}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t    Log.Info(\"Starting client...\");\n    client.Start();\n    client.Connect(ipAddress, serverPort, \"nitrox\");\n    await Task.Run(() => {\n        connectedEvent.WaitOne(2000);\n        connectedEvent.Reset();\n    }).ConfigureAwait(false);\n}", "CodeBleu_score": 70.72658300841634}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t    await Task.Run(() => {\n        client.Start();\n        client.Connect(ipAddress, serverPort, \"nitrox\");\n    });\n    connectedEvent.WaitOne(2000);\n    connectedEvent.Reset();\n}", "CodeBleu_score": 69.26514821264614}]}
{"instance_id": "eeb95434f1eb", "generation_result": [{"code": "public void StartFireSuppression(NitroxId id){\n\t    Cyclops cyclops = NitroxEntity.RequireObjectFrom<Cyclops>(id);\n    CyclopsFireSuppressionSystemButton fireSuppButton = cyclops.RequireComponentInChildren<CyclopsFireSuppressionSystemButton>();\n    fireSuppButton.subFire.StartCoroutine(StartFireSuppressionSystem(cyclops));\n    fireSuppButton.StartCooldown();\n}", "CodeBleu_score": 48.85376045879094}, {"code": "public void StartFireSuppression(NitroxId id){\n\t    Cyclops cyclops = NitroxEntity.RequireObjectFrom<Cyclops>(id);\n    CyclopsFireSuppressionSystemButton fireSuppButton = cyclops.RequireComponentInChildren<CyclopsFireSuppressionSystemButton>();\n    fireSuppButton.subFire.StartCoroutine(fireSuppButton.StartCooldown(cyclops.gameObject));\n    cyclops.RequireComponentInChildren<CyclopsFireSuppressionSystem>().StartFireSuppression();\n}", "CodeBleu_score": 38.11007188157207}, {"code": "public void StartFireSuppression(NitroxId id){\n\t    Cyclops cyclops = NitroxEntity.RequireObjectFrom<Cyclops>(id);\n    CyclopsFireSuppressionSystemButton fireSuppButton = cyclops.RequireComponentInChildren<CyclopsFireSuppressionSystemButton>();\n    fireSuppButton.subFire.StartCoroutine(cyclops.StartFireSuppressionSystem());\n    fireSuppButton.StartCooldown();\n}", "CodeBleu_score": 48.83675152889284}]}
{"instance_id": "a23a043559c6", "generation_result": [{"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t    if (subRoot == null || damagePoint == null) return;\n\n    int subId = subRoot.GetInstanceID();\n    if (!_subRootToId.ContainsKey(subId)) {\n        _subRootToId.Add(subId, _nextId);\n        _nextId++;\n    }\n\n    int damagePointId = damagePoint.GetInstanceID();\n    if (!_damagePointToId.ContainsKey(damagePointId)) {\n        _damagePointToId.Add(damagePointId, _nextId);\n        _nextId++;\n    }\n\n    var packet = new CyclopsDamagePointRepairPacket {\n        SubId = _subRootToId[subId],\n        DamagePointId = _damagePointToId[damagePointId],\n        RepairAmount = repairAmount\n    };\n\n    packetSender.Send(packet);\n}", "CodeBleu_score": 44.30415076012019}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t    if (subRoot == null) {\n        Log.Error(\"SubRoot is null\");\n        return;\n    }\n\n    if (damagePoint == null) {\n        Log.Error(\"DamagePoint is null\");\n        return;\n    }\n\n    if (damagePoint.DamageType == CyclopsDamagePoint.DamageType.None) {\n        Log.Error(\"DamageType is None\");\n        return;\n    }\n\n    if (repairAmount <= 0f) {\n        Log.Error(\"RepairAmount is <= 0\");\n        return;\n    }\n\n    int subRootId = subRoot.TryGetIdOrWarn();\n\n    if (subRootId == -1) {\n        Log.Error(\"SubRoot ID is -1\");\n        return;\n    }\n\n    CyclopsDamagePoint.DamageType damageType = damagePoint.DamageType;\n    int damagePointId = damagePoint.DamagePointId;\n\n    if (damageType == CyclopsDamagePoint.DamageType.None) {\n        Log.Error(\"DamageType is None\");\n        return;\n    }\n\n    if (damagePointId == -1) {\n        Log.Error(\"DamagePointId is -1\");\n        return;\n    }\n\n    var packet = new CyclopsDamagePointRepairPacket {\n        SubRootId = subRootId,\n        DamagePointId = damagePointId,\n        RepairAmount = repairAmount,\n        DamageType = damageType\n    };\n\n    packetSender.Send(packet);\n}", "CodeBleu_score": 39.71559659146852}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t    if (subRoot == null || damagePoint == null || repairAmount <= 0f) {\n        return;\n    }\n\n    if (subRoot.TryGetIdOrWarn(out string subRootId)) {\n        int damagePointId = damagePoint.GetId();\n        float totalHealth = damagePoint.GetTotalHealth();\n        float currentHealth = damagePoint.GetCurrentHealth();\n        float newHealth = currentHealth + repairAmount;\n\n        if (newHealth > totalHealth) {\n            newHealth = totalHealth;\n        }\n\n        Packet packet = new Packet(subRootId, damagePointId, newHealth);\n        packetSender.Send(packet);\n    }\n}", "CodeBleu_score": 42.50155667451535}]}
{"instance_id": "dfb3586de856", "generation_result": [{"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t    if (subRoot.gameObject.TryGetIdOrWarn(out var subId) && subRoot.GetComponent<LiveMixin>().health.IsAlive()) {\n        var damageInfoData = info.Convert(damageInfo => new CyclopsDamageInfoData(damageInfo.position.ToDto(), damageInfo.dealer.GetId(), damageInfo.damage));\n        var damagePoints = GetActiveDamagePoints(subRoot).ToArray();\n        var roomFires = GetActiveRoomFires(subRoot.GetComponent<SubFire>()).ToArray();\n        var packet = new CyclopsDamage(subId, damageInfoData, damagePoints, roomFires);\n        packetSender.Send(packet);\n    }\n}", "CodeBleu_score": 28.87910029446612}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t    if (!subRoot.gameObject.TryGetIdOrWarn(out string subId))\n        return;\n\n    if (!subRoot.GetComponent<LiveMixin>().IsAlive())\n        return;\n\n    CyclopsDamageInfoData damageInfo = null;\n    if (info.HasValue) {\n        damageInfo = new CyclopsDamageInfoData(info.Value.damage, info.Value.damageType, info.Value.hitPosition, info.Value.hitObject);\n    }\n\n    var damagePoints = GetActiveDamagePoints(subRoot).ToArray();\n    var roomFires = GetActiveRoomFires(subRoot.GetComponent<SubFire>()).ToArray();\n\n    var packet = new CyclopsDamage(subId, damageInfo, damagePoints, roomFires);\n    packetSender.Send(packet);\n}", "CodeBleu_score": 47.53182020734762}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t    if (!subRoot.TryGetIdOrWarn(out var subId)) return;\n\n    var damageInfo = info.HasValue ? new CyclopsDamageInfoData(info.Value) : null;\n\n    var damagePoints = GetActiveDamagePoints(subRoot).ToArray();\n    var firePoints = GetActiveRoomFires(subRoot.GetComponent<SubFire>()).ToArray();\n\n    var packet = new CyclopsDamage(subId, damageInfo, damagePoints, firePoints);\n    packetSender.Send(packet);\n}", "CodeBleu_score": 21.557780627768437}]}
{"instance_id": "03223c10109f", "generation_result": [{"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t    // If there are no dirty entities, exit early\n    if (dirtyEntities.Count == 0) {\n        return;\n    }\n\n    // For each dirty entity, remove the entity hierarchy and destroy the GameObject\n    foreach (Entity entity in dirtyEntities) {\n        RemoveEntityHierarchy(entity);\n        UnityEngine.Object.Destroy(NitroxEntity.GetObjectFrom(entity));\n    }\n}", "CodeBleu_score": 58.47543559248225}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t    // Loop through all the dirty entities\n    foreach (Entity dirtyEntity in dirtyEntities) {\n        // Remove the entity hierarchy\n        RemoveEntityHierarchy(dirtyEntity);\n        // Get the GameObject associated with the entity\n        GameObject entityGameObject = NitroxEntity.GetObjectFrom(dirtyEntity);\n        // If the GameObject exists, destroy it\n        if (entityGameObject != null) {\n            UnityEngine.Object.Destroy(entityGameObject);\n        }\n    }\n}", "CodeBleu_score": 47.96042556325049}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t    foreach (Entity entity in dirtyEntities) {\n        RemoveEntityHierarchy(entity);\n        GameObject go = NitroxEntity.GetObjectFrom(entity);\n        if (go != null) {\n            UnityEngine.Object.Destroy(go);\n        }\n    }\n}", "CodeBleu_score": 54.554596549100786}]}
{"instance_id": "990abe8e473e", "generation_result": [{"code": "private void AddPendingParentEntity(Entity entity){\n\t    // Check if the parent ID already has an associated list in the dictionary. If not, create one.\n    if (!pendingParentEntitiesByParentId.ContainsKey(entity.ParentId)) {\n        pendingParentEntitiesByParentId.Add(entity.ParentId, new List<Entity>());\n    }\n\n    // Add the entity to the appropriate list.\n    pendingParentEntitiesByParentId[entity.ParentId].Add(entity);\n}", "CodeBleu_score": 35.61652623292872}, {"code": "private void AddPendingParentEntity(Entity entity){\n\t    List<Entity> pendingEntities;\n    if (!pendingParentEntitiesByParentId.TryGetValue(entity.ParentId, out pendingEntities)) {\n        pendingEntities = new List<Entity>();\n        pendingParentEntitiesByParentId.Add(entity.ParentId, pendingEntities);\n    }\n    pendingEntities.Add(entity);\n}", "CodeBleu_score": 62.83977094552108}, {"code": "private void AddPendingParentEntity(Entity entity){\n\t    List<Entity> pendingParentEntities;\n    if (!pendingParentEntitiesByParentId.TryGetValue(entity.ParentId, out pendingParentEntities)) {\n        pendingParentEntities = new List<Entity>();\n        pendingParentEntitiesByParentId.Add(entity.ParentId, pendingParentEntities);\n    }\n    pendingParentEntities.Add(entity);\n}", "CodeBleu_score": 51.7285953207249}]}
{"instance_id": "a885fbb1f085", "generation_result": [{"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t    ArmAction action = ArmAction.NONE;\n    if (cooldown == clawArm.pickupCooldown) {\n        action = ArmAction.START_USE_TOOL;\n    } else if (cooldown == clawArm.punchCooldown) {\n        action = ArmAction.ALT_HIT;\n    } else {\n        Log.Error(\"Unknown claw arm action!\");\n    }\n    BroadcastArmAction(action);\n}", "CodeBleu_score": 38.746444081073115}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t    // This is the time that the claw arm takes to pick up a tool\n    float pickupTime = 0.3f;\n    // This is the time that the claw arm takes to punch\n    float punchTime = 0.3f;\n\n    // Checks if the cooldown matches the pickup time\n    if (cooldown == pickupTime) {\n        // Sets the action to START_USE_TOOL\n        clawArm.action = ExosuitClawArm.Action.START_USE_TOOL;\n    }\n    // Checks if the cooldown matches the punch time\n    else if (cooldown == punchTime) {\n        // Sets the action to ALT_HIT\n        clawArm.action = ExosuitClawArm.Action.ALT_HIT;\n    }\n    // If neither, log an error\n    else {\n        Log.Error(\"Unknown action for claw arm\");\n    }\n\n    // Broadcasts the action\n    BroadcastArmAction(clawArm);\n}", "CodeBleu_score": 38.841379190370326}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t    ExosuitArmAction action = ExosuitArmAction.NONE;\n    if (cooldown == clawArm.pickupCooldown) {\n        action = ExosuitArmAction.START_USE_TOOL;\n    } else if (cooldown == clawArm.punchCooldown) {\n        action = ExosuitArmAction.ALT_HIT;\n    } else {\n        Log.Error(\"Claw action not found.\");\n    }\n    BroadcastArmAction(clawArm, action);\n}", "CodeBleu_score": 47.38272086758353}]}
{"instance_id": "e390441c8dc2", "generation_result": [{"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t    if (gameObject == null || parent == null) {\n        Logger.LogError(\"Battery added to null game object.\");\n        return;\n    }\n\n    if (!gameObject.TryGetIdOrWarn(out var gameObjectId)) return;\n    if (!parent.TryGetIdOrWarn(out var parentId)) return;\n\n    var metadata = gameObject.GetComponent<EntityMetadata>().OrNull();\n    if (metadata == null) {\n        Logger.LogError($\"Battery {gameObject.name} has no metadata component.\");\n        return;\n    }\n\n    var entity = metadata.Extract();\n    entity.ParentId = parentId;\n    entity.EntityType = EntityType.InstalledBattery;\n    entity.TechType = techType.ToDto();\n\n    packetSender.Send(new EntitySpawnedByClient(entity));\n}", "CodeBleu_score": 50.94191275980271}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t    if (!gameObject.TryGetIdOrWarn(out short gameObjectId)) return;\n    if (!parent.TryGetIdOrWarn(out short parentId)) return;\n\n    var metadata = entityMetadataManager.Extract(gameObject);\n    if (metadata.OrNull() is not { } metadata) return;\n\n    var entity = new InstalledBatteryEntity {\n        EntityId = gameObjectId,\n        ParentId = parentId,\n        TechType = techType.ToDto(),\n        Vehicle = metadata.Vehicle,\n        Battery = metadata.Battery,\n    };\n\n    packetSender.Send(entity);\n}", "CodeBleu_score": 50.45954509108801}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t    if (!gameObject.TryGetIdOrWarn(out var gameObjectId)) return;\n    if (!parent.TryGetIdOrWarn(out var parentId)) return;\n\n    if (!entityMetadataManager.Extract(gameObject, out var metadata)) return;\n\n    var entity = new InstalledBatteryEntity {\n        GameObjectId = gameObjectId,\n        ParentId = parentId,\n        TechType = techType.ToDto(),\n        Metadata = metadata.OrNull()\n    };\n\n    packetSender.Send(entity);\n}", "CodeBleu_score": 43.70297327690547}]}
{"instance_id": "a87b772a8e5a", "generation_result": [{"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t    if (gameObject == null) {\n        return;\n    }\n\n    if (this.PickingUpObject != null) {\n        return;\n    }\n\n    this.PickingUpObject = gameObject;\n\n    this.RemoveAnyRemoteControl(gameObject);\n\n    if (gameObject.TryGetNitroxId(out string nitroxId) == false) {\n        nitroxId = this.NitroxEntity.GenerateNewId();\n        gameObject.SetNitroxId(nitroxId);\n    }\n\n    this.entities.MarkAsSpawned(nitroxId);\n\n    gameObject = this.ConvertToInventoryItemEntity(gameObject, techType);\n\n    PickupItemPacket packet = new PickupItemPacket(nitroxId, techType);\n\n    this.packetSender.Send(packet);\n\n    Log.Debug($\"Picked up {techType}\");\n\n    this.PickingUpObject = null;\n}", "CodeBleu_score": 44.80706510213651}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t    PickingUpObject = gameObject;\n    RemoveAnyRemoteControl();\n    if (!gameObject.TryGetNitroxId(out string nitroxId)) {\n        nitroxId = NitroxEntity.GenerateNewId();\n        gameObject.SetNitroxId(nitroxId);\n    }\n    EntityPositionBroadcaster.StopWatchingEntity(gameObject);\n    ConvertToInventoryItemEntity(gameObject, techType);\n    entities.MarkAsSpawned(gameObject);\n    Log.Debug($\"Player picked up {techType} with NitroxId {nitroxId}.\");\n    packetSender.Send(new PickupItem(nitroxId, techType));\n    PickingUpObject = null;\n}", "CodeBleu_score": 50.41685742766712}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t    if (PickingUpObject != null) return;\n    PickingUpObject = gameObject;\n    RemoveAnyRemoteControl(PickingUpObject);\n    NitroxId nitroxId = gameObject.TryGetNitroxId();\n    if (nitroxId == null) {\n        nitroxId = NitroxEntity.GenerateNewId();\n        gameObject.AddNitroxId(nitroxId);\n    }\n    EntityPositionBroadcaster.StopWatchingEntity(nitroxId);\n    ConvertToInventoryItemEntity(gameObject, techType);\n    entities.MarkAsSpawned(nitroxId);\n    Log.Debug($\"Picked up {techType}\");\n    packetSender.Send(new PickupItem(nitroxId));\n    PickingUpObject = null;\n}", "CodeBleu_score": 50.17757143727854}]}
{"instance_id": "b6d1e68114e1", "generation_result": [{"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t    var itemId = gameObject.GetComponent<PrefabIdentifier>().Id;\n    var metadata = entityMetadataManager.Extract(gameObject);\n    var techType = gameObject.RequireComponent<Pickupable>().GetTechType();\n\n    var nitroxId = GetPrefabChildren(gameObject, itemId, entityMetadataManager).ToList().OrNull(x => x.Count > 0)\n        ?.First().GetComponent<Pickupable>().GetTechType().ToDto().ToNitroxId();\n\n    var playerId = Player.main.TryGetNitroxId();\n\n    var entity = new InventoryItemEntity(playerId, nitroxId, itemId, techType.ToDto(), metadata);\n\n    if (techType == TechType.Battery) {\n        BatteryChildEntityHelper.TryPopulateInstalledBattery(gameObject, entity, entityMetadataManager);\n    }\n\n    return entity;\n}", "CodeBleu_score": 50.9053489556057}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t    string itemId = gameObject.RequireComponent<PrefabIdentifier>().Id;\n    EntityMetadata metadata = entityMetadataManager.Extract(gameObject).OrNull;\n    BatteryEntity batteryEntity = null;\n    if (gameObject.TryGetNitroxId(out string nitroxId)) {\n        List<EntityMetadata> childrenMetadata = GetPrefabChildren(gameObject, itemId, entityMetadataManager).ToList();\n        if (gameObject.TryGetComponent(out Battery battery)) {\n            batteryEntity = BatteryChildEntityHelper.TryPopulateInstalledBattery(battery, nitroxId, childrenMetadata);\n        }\n    }\n    TechType techType = gameObject.RequireComponent<Pickupable>().GetTechType();\n    return new InventoryItemEntity(nitroxId, techType.ToDto(), metadata, batteryEntity, Player.main.TryGetNitroxId());\n}", "CodeBleu_score": 56.792809854500426}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t    if (gameObject == null) {\n        throw new ArgumentNullException(\"gameObject\");\n    }\n\n    if (entityMetadataManager == null) {\n        throw new ArgumentNullException(\"entityMetadataManager\");\n    }\n\n    var itemId = gameObject.RequireComponent<PrefabIdentifier>().GetIdOrGenerateNew();\n    var metadata = entityMetadataManager.Extract(gameObject, itemId);\n    var techType = metadata.OrNull?.GetTechType();\n    var playerId = Player.main.TryGetNitroxId();\n\n    var inventoryItemEntity = new InventoryItemEntity(itemId, techType, playerId);\n\n    if (techType != TechType.None) {\n        BatteryChildEntityHelper.TryPopulateInstalledBattery(gameObject, inventoryItemEntity, entityMetadataManager);\n    }\n\n    return inventoryItemEntity;\n}", "CodeBleu_score": 53.9116582451715}]}
{"instance_id": "e416d51a7af7", "generation_result": [{"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t\tthis.multiplayerSession = multiplayerSession;\n\tthis.packetSender = packetSender;\n\tthis.throttledPacketSender = throttledPacketSender;\n\tthis.body = new Lazy<Body>(() => this.multiplayerSession.GetBody(this.bodyId));\n\tthis.playerModel = new Lazy<PlayerModel>(() => this.multiplayerSession.GetPlayerModel(this.bodyId));\n\tthis.bodyPrototype = new Lazy<BodyPrototype>(() => this.multiplayerSession.GetBodyPrototype(this.bodyId));\n\tthis.permissions = new Lazy<PlayerPermissions>(() => this.multiplayerSession.GetPlayerPermissions(this.bodyId));\n}", "CodeBleu_score": 49.33674556643849}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t\tthis.multiplayerSession = multiplayerSession;\n\tthis.packetSender = packetSender;\n\tthis.throttledPacketSender = throttledPacketSender;\n\t\n\t// Lazy load the player's body, player model, and body prototype\n\tthis.body = new Lazy<Body>(() => {\n\t\treturn multiplayerSession.GetBodyByID(this.bodyID);\n\t});\n\tthis.playerModel = new Lazy<PlayerModel>(() => {\n\t\treturn multiplayerSession.GetPlayerModelByID(this.playerModelID);\n\t});\n\tthis.bodyPrototype = new Lazy<BodyPrototype>(() => {\n\t\treturn multiplayerSession.GetBodyPrototypeByID(this.bodyPrototypeID);\n\t});\n\t\n\t// Assign default permissions\n\tthis.permissions = new PlayerPermissions();\n\tthis.permissions.SetPermission(Permissions.PermissionType.Admin, true);\n\tthis.permissions.SetPermission(Permissions.PermissionType.Mod, true);\n}", "CodeBleu_score": 49.47918240676793}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t    this.multiplayerSession = multiplayerSession;\n    this.packetSender = packetSender;\n    this.throttledPacketSender = throttledPacketSender;\n    this.body = new Lazy<Body>(() => multiplayerSession.GetBody(Body.RequireGameObject));\n    this.playerModel = new Lazy<PlayerModel>(() => multiplayerSession.GetPlayerModel(Player.main.RequireGameObject));\n    this.bodyPrototype = new Lazy<BodyPrototype>(() => multiplayerSession.GetBodyPrototype(Body.RequireGameObject));\n    this.playerPermissions = new PlayerPermissions(this);\n}", "CodeBleu_score": 56.33668049397791}]}
{"instance_id": "def56af985df", "generation_result": [{"code": "private GameObject CreateBodyPrototype{\n\t    get {\n        if (!Player.head)\n            return null;\n\n        Player.head.gameObject.SetActive(true);\n\n        GameObject clone = Object.Instantiate(Player.bodyPrototype);\n        Player.head.shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.On;\n        clone.SetActive(false);\n        clone.name = \"RemotePlayerPrototype\";\n\n        foreach (Transform child in clone.transform) {\n            if (child.gameObject.name.Contains(\"Hand\")) {\n                foreach (Transform grandchild in child)\n                    Object.DestroyImmediate(grandchild.gameObject);\n            }\n        }\n\n        return clone;\n    }\n}", "CodeBleu_score": 41.80024922022636}, {"code": "private GameObject CreateBodyPrototype{\n\t    get {\n        // Ensure head is visible.\n        var head = GetComponentInChildren<Head>();\n        head.gameObject.SetActive(true);\n\n        // Instantiate a clone of the body prototype.\n        var clone = Object.Instantiate(bodyPrototype);\n        // Remove the head from the clone.\n        Object.DestroyImmediate(clone.transform.Find(\"Head\").gameObject);\n        // Deactivate the clone.\n        clone.SetActive(false);\n        // Reset the shadow casting mode.\n        clone.GetComponentInChildren<SkinnedMeshRenderer>().shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.On;\n        // Rename the clone.\n        clone.name = \"RemotePlayerPrototype\";\n\n        return clone;\n    }\n}", "CodeBleu_score": 32.42357898267191}, {"code": "private GameObject CreateBodyPrototype{\n\t    get {\n        if (playerHead.activeSelf) {\n            playerHead.gameObject.SetActive(false);\n            var clone = Object.Instantiate(gameObject);\n            playerHead.gameObject.SetActive(true);\n            clone.transform.Find(\"PlayerHead\").gameObject.SetActive(false);\n            clone.transform.Find(\"PlayerHead\").GetComponent<PlayerHead>().ResetShadowCastingMode();\n            clone.SetActive(false);\n            clone.name = \"RemotePlayerPrototype\";\n            foreach (var item in clone.GetComponentsInChildren<Item>()) {\n                Object.DestroyImmediate(item.gameObject);\n            }\n            return clone;\n        }\n        return null;\n    }\n}", "CodeBleu_score": 39.29214692649571}]}
{"instance_id": "e9bd7f669aed", "generation_result": [{"code": "void ICacheable.Save(BinaryWriter bw){\n\t\tbw.Write(GetType().AssemblyQualifiedName);\n\tbw.Write(Location);\n\tMetadata.Save(bw);\n\tbw.Write(Processes.Count);\n\tforeach (var process in Processes)\n\t\tbw.Write(process);\n\tbw.Write(Dependencies.Count);\n\tforeach (var dependency in Dependencies)\n\t\t((ICacheable) dependency).Save(bw);\n\tbw.Write(Incompatibilities.Count);\n\tforeach (var incompatibility in Incompatibilities)\n\t\t((ICacheable) incompatibility).Save(bw);\n\tbw.Write(TargettedBepInExVersion.ToString());\n}", "CodeBleu_score": 46.29005447333919}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\t\tbw.Write(GetType().AssemblyQualifiedName);\n\tbw.Write(Location);\n\tbw.Write(Metadata.Version.ToString());\n\tbw.Write(Processes.ToList());\n\tbw.Write(Dependencies.ToList());\n\tbw.Write(Incompatibilities.ToList());\n\tbw.Write(TargettedBepInExVersion.ToString());\n\tforeach (BepInDependency bepInDependency in Dependencies)\n\t\t((ICacheable) bepInDependency).Save(bw);\n\tforeach (BepInIncompatibility bepInIncompatibility in Incompatibilities)\n\t\t((ICacheable) bepInIncompatibility).Save(bw);\n}", "CodeBleu_score": 40.4307045142842}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\t    // Write the type name\n    bw.Write(GetType().FullName);\n\n    // Write the location\n    bw.Write(Location);\n\n    // Write the metadata\n    bw.Write(Metadata.Version.ToString());\n    bw.Write(Metadata.Name);\n    bw.Write(Metadata.Author);\n    bw.Write(Metadata.Description);\n    bw.Write(Metadata.Version.Major);\n    bw.Write(Metadata.Version.Minor);\n    bw.Write(Metadata.Version.Build);\n    bw.Write(Metadata.Version.Revision);\n\n    // Write the processes\n    bw.Write(Processes.Count);\n    foreach (ProcessType process in Processes)\n        bw.Write((int) process);\n\n    // Write the dependencies\n    bw.Write(Dependencies.Count);\n    foreach (BepInDependency bepInDependency in Dependencies)\n        ((ICacheable) bepInDependency).Save(bw);\n\n    // Write the incompatibilities\n    bw.Write(Incompatibilities.Count);\n    foreach (BepInIncompatibility bepInIncompatibility in Incompatibilities)\n        ((ICacheable) bepInIncompatibility).Save(bw);\n\n    // Write the target version\n    bw.Write(TargettedBepInExVersion.ToString());\n}", "CodeBleu_score": 60.14450565568432}]}
{"instance_id": "a7e51620987d", "generation_result": [{"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t\tType pluginType = pluginAssembly.GetType(pluginInfo.PluginType);\n\tif (pluginType == null) {\n\t\tthrow new Exception($\"Failed to find plugin type {pluginInfo.PluginType} in plugin assembly {pluginAssembly.FullName}.\");\n\t}\n\tif (!typeof(BasePlugin).IsAssignableFrom(pluginType)) {\n\t\tthrow new Exception($\"Plugin type {pluginInfo.PluginType} does not inherit from BasePlugin.\");\n\t}\n\tBasePlugin pluginInstance = Activator.CreateInstance(pluginType) as BasePlugin;\n\tif (pluginInstance == null) {\n\t\tthrow new Exception($\"Failed to create an instance of plugin type {pluginInfo.PluginType}.\");\n\t}\n\tPluginLoad?.Invoke(pluginInstance);\n\tpluginInstance.Load();\n\treturn pluginInstance;\n}", "CodeBleu_score": 50.23635321413333}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t    Type pluginType = pluginAssembly.GetType(pluginInfo.Type);\n    BasePlugin pluginInstance = Activator.CreateInstance(pluginType) as BasePlugin;\n    PluginLoad?.Invoke(pluginInfo, pluginAssembly, pluginInstance);\n    pluginInstance.Load();\n    return pluginInstance;\n}", "CodeBleu_score": 70.36545060461388}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t    Type pluginType = pluginAssembly.GetType(pluginInfo.Type);\n    if (pluginType == null) {\n        throw new Exception($\"Plugin type \\\"{pluginInfo.Type}\\\" not found in assembly \\\"{pluginInfo.Assembly}\\\"\");\n    }\n    if (!typeof(BasePlugin).IsAssignableFrom(pluginType)) {\n        throw new Exception($\"Plugin type \\\"{pluginInfo.Type}\\\" does not inherit from BasePlugin\");\n    }\n\n    BasePlugin pluginInstance = Activator.CreateInstance(pluginType) as BasePlugin;\n    if (pluginInstance == null) {\n        throw new Exception($\"Unable to create instance of plugin type \\\"{pluginInfo.Type}\\\"\");\n    }\n\n    pluginInstance.PluginInfo = pluginInfo;\n    pluginInstance.PluginAssembly = pluginAssembly;\n    PluginLoad?.Invoke(pluginInstance);\n    pluginInstance.Load();\n\n    return pluginInstance;\n}", "CodeBleu_score": 49.68078313333667}]}
{"instance_id": "0925dc086c01", "generation_result": [{"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t    if (TrampolineMethod == null) {\n        Prepare();\n        TrampolineMethod = DetourHelper.GenerateNativeProxy(TrampolinePtr, signature);\n    }\n    return TrampolineMethod;\n}", "CodeBleu_score": 98.93961594623742}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t\tif (TrampolineMethod == null) {\n\t\tPrepare();\n\t\tTrampolineMethod = DetourHelper.GenerateNativeProxy(TrampolinePtr, signature);\n\t}\n\treturn TrampolineMethod;\n}", "CodeBleu_score": 94.13368472816533}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t\tif (TrampolineMethod == null) {\n\t\tPrepare();\n\t\tTrampolineMethod = DetourHelper.GenerateNativeProxy(TrampolinePtr, signature);\n\t}\n\treturn TrampolineMethod;\n}", "CodeBleu_score": 94.13368472816533}]}
{"instance_id": "cfab5c23610e", "generation_result": [{"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t    Stream stream = typeof(LocalizationLoader).Assembly.GetManifestResourceStream($\"Localization.{code}.json\");\n    if (stream == null) throw new NullReferenceException($\"Language file for code {code} was not found.\");\n    Dictionary<string, string> dict = JsonSerializer.Deserialize<Dictionary<string, string>>(stream);\n    if (dict == null) throw new JsonException($\"Language file for code {code} could not be deserialized.\");\n    return dict;\n}", "CodeBleu_score": 54.30526115142727}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t    // Open the language file as a stream\n    var stream = typeof(LocalizationLoader).Assembly.GetManifestResourceStream($\"{typeof(LocalizationLoader).Assembly.GetName().Name}.Resources.languages.{code}.json\");\n    if (stream == null) {\n        throw new NullReferenceException($\"Language file for language code {code} not found.\");\n    }\n\n    // Deserialize the stream into a dictionary\n    try {\n        return JsonSerializer.Deserialize<Dictionary<string, string>>(stream);\n    }\n    catch (JsonException e) {\n        throw new JsonException($\"Error deserializing language file for language code {code}.\", e);\n    }\n}", "CodeBleu_score": 50.9342555325206}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t    // Get the language file as a stream from the assembly's resources.\n    Stream stream = typeof(LocalizationLoader).Assembly.GetManifestResourceStream($\"Localization.{code}.json\");\n    if (stream == null) {\n        throw new NullReferenceException($\"The language file for the language code \\\"{code}\\\" was not found.\");\n    }\n\n    // Deserialize the stream into a dictionary.\n    Dictionary<string, string> dictionary;\n    try {\n        dictionary = JsonSerializer.Deserialize<Dictionary<string, string>>(stream);\n    }\n    catch (JsonException) {\n        throw new JsonException($\"The language file for the language code \\\"{code}\\\" could not be deserialized.\");\n    }\n\n    return dictionary;\n}", "CodeBleu_score": 49.914296938885215}]}
{"instance_id": "9978bd31d199", "generation_result": [{"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t    int expressionCount = 0;\n    foreach (var node in nodes) {\n        if (node is ParserRuleContext) {\n            this.Visit(node);\n            expressionCount++;\n        }\n    }\n    return expressionCount;\n}", "CodeBleu_score": 51.39301891824698}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t    int expressionCount = 0;\n    foreach (var node in nodes) {\n        if (node is ParserRuleContext) {\n            this.Visit((ParserRuleContext)node);\n            expressionCount++;\n        }\n    }\n    return expressionCount;\n}", "CodeBleu_score": 48.75387314367837}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t\tint expressionCount = 0;\n\tforeach (var node in nodes) {\n\t\tif (node is ParserRuleContext) {\n\t\t\tVisit(node);\n\t\t\texpressionCount++;\n\t\t}\n\t}\n\treturn expressionCount;\n}", "CodeBleu_score": 41.88240758678795}]}
{"instance_id": "8f9bf9ee575a", "generation_result": [{"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t    var lineIDTag = Compiler.GetLineIDTag(context);\n    if (lineIDTag == null) {\n        throw new InvalidOperationException($\"Line {context.Start.Line} is missing a line ID tag\");\n    }\n    var lineID = Compiler.GetLineID(lineIDTag);\n\n    // Generate code for any expressions in the formatted text\n    var expressionCount = this.GenerateCodeForExpressionsInFormattedText(context.line_formatted_text());\n\n    // Emit the opcode\n    this.compiler.Emit(OpCode.RunLine, lineID, expressionCount);\n\n    return 0;\n}", "CodeBleu_score": 49.62651025861619}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t\n    // Get the line ID tag.\n    var lineIDTag = Compiler.GetLineIDTag(context.line_formatted_text());\n\n    // If no line ID tag is found, throw an exception.\n    if (lineIDTag == null)\n        throw new InvalidOperationException($\"No line ID tag found in line {context.Start.Line}\");\n\n    // Generate code for any expressions in the formatted text.\n    this.GenerateCodeForExpressionsInFormattedText(context.line_formatted_text());\n\n    // Emit a RunLine opcode.\n    this.compiler.Emit(OpCode.RunLine, lineIDTag, context.line_formatted_text().expression().Length);\n\n    // Return the number of expressions in the line.\n    return context.line_formatted_text().expression().Length;\n}", "CodeBleu_score": 57.71621003929064}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t    // Generate code for any expressions in the formatted text\n    this.GenerateCodeForExpressionsInFormattedText(context.line_formatted_text());\n\n    // Retrieve the line ID tag\n    var lineIDTag = context.hashtag().GetLineIDTag();\n\n    // Emit a RunLine opcode with the line ID and expression count\n    this.compiler.Emit(OpCode.RunLine, lineIDTag, context.line_formatted_text().expression().Length);\n\n    // Return the line ID tag\n    return lineIDTag;\n}", "CodeBleu_score": 45.15055027982638}]}
{"instance_id": "b70d033fed9c", "generation_result": [{"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t    var unknownCommands = new List<Diagnostic>();\n\n    foreach (var commandReference in yarnFile.CommandReferences) {\n        if (!yarnFile.KnownCommands.Contains(commandReference.Name)) {\n            var diagnostic = new Diagnostic(\n                commandReference.ParametersRange,\n                $\"Command '{commandReference.Name}' does not have a known definition.\",\n                DiagnosticSeverity.Warning,\n                \"YarnSpinner.UnknownCommand\",\n                \"YarnSpinner\"\n            );\n\n            diagnostic.AdditionalData.Add(\"commandName\", commandReference.Name);\n            diagnostic.AdditionalData.Add(\"commandParameters\", commandReference.Parameters);\n\n            unknownCommands.Add(diagnostic);\n        }\n    }\n\n    return unknownCommands;\n}", "CodeBleu_score": 34.34074255847585}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t    var knownCommands = yarnFile.ProjectData.KnownCommands;\n    var commandReferences = yarnFile.FileData.CommandReferences;\n\n    foreach (var commandReference in commandReferences) {\n        if (!knownCommands.Contains(commandReference.Name)) {\n            yield return new Diagnostic(\n                new Range(\n                    commandReference.ParametersRange.Start.Delta(0, -1),\n                    commandReference.ParametersRange.End\n                ),\n                $\"Unknown command '{commandReference.Name}'\",\n                DiagnosticSeverity.Warning,\n                1001,\n                \"YarnSpinner\",\n                new Dictionary<string, string> {\n                    { \"commandName\", commandReference.Name }\n                }\n            );\n        }\n    }\n}", "CodeBleu_score": 39.00080676839921}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t    var diagnostics = new List<Diagnostic>();\n\n    // For each command reference in the file,\n    foreach (var commandReference in yarnFile.CommandReferences) {\n        // if the command is not known,\n        if (!yarnFile.KnownCommands.Contains(commandReference.Name)) {\n            // create a diagnostic with a warning message, severity level, and code.\n            var diagnostic = new Diagnostic(\n                message: $\"Unknown command '{commandReference.Name}'\",\n                severity: DiagnosticSeverity.Warning,\n                code: \"YarnSpinner/UnknownCommand\",\n                source: \"YarnSpinner\"\n            );\n\n            // Add the name of the command to the diagnostic's additional data.\n            diagnostic.AdditionalData.Add(\"command\", commandReference.Name);\n\n            // Add the diagnostic to the list of diagnostics to be returned.\n            diagnostics.Add(diagnostic);\n        }\n    }\n\n    return diagnostics;\n}", "CodeBleu_score": 29.757267311439655}]}
{"instance_id": "9a072876f358", "generation_result": [{"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t    return new CodeActionRegistrationOptions {\n        DocumentSelector = DocumentSelector.ForLanguage(\"yarnspinner\"),\n        CodeActionKinds = new Container<CodeActionKind>(CodeActionKind.QuickFix),\n        ResolveProvider = false\n    };\n}", "CodeBleu_score": 73.36795079157145}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t    return new CodeActionRegistrationOptions {\n        DocumentSelector = DocumentSelectorFactory.YarnDocumentSelector,\n        ResolveProvider = false,\n        CodeActionKinds = new Container<CodeActionKind>(CodeActionKind.QuickFix),\n    };\n}", "CodeBleu_score": 83.90513253609312}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t    return new CodeActionRegistrationOptions {\n        DocumentSelector = DocumentSelectorFactory.YarnDocumentSelector,\n        CodeActionKinds = new Container<CodeActionKind>(CodeActionKind.QuickFix),\n        ResolveProvider = false,\n    };\n}", "CodeBleu_score": 71.483617505116}]}
{"instance_id": "7b61df32aee3", "generation_result": [{"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t    if (this.variables.TryGetValue(variableName, out object value)) {\n        if (value.GetType().IsAssignableFrom(typeof(T))) {\n            result = (T)value;\n            return true;\n        }\n        else {\n            throw new ArgumentException($\"The variable '{variableName}' has a type of '{value.GetType().Name}' which is not compatible with the type '{typeof(T).Name}'.\");\n        }\n    }\n    else {\n        result = default;\n        return false;\n    }\n}", "CodeBleu_score": 61.124780497454424}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t    if (this.variables.TryGetValue(variableName, out object foundValue)) {\n        if (foundValue is T) {\n            result = (T)foundValue;\n            return true;\n        } else {\n            throw new ArgumentException($\"Variable \\\"{variableName}\\\" exists but is of type {foundValue.GetType().Name}, not {typeof(T).Name}.\");\n        }\n    } else {\n        result = default;\n        return false;\n    }\n}", "CodeBleu_score": 70.34110524620026}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t    if (this.variables.TryGetValue(variableName, out object value)) {\n        if (typeof(T).IsAssignableFrom(value.GetType())) {\n            result = (T)value;\n            return true;\n        }\n        else {\n            throw new ArgumentException(\"The type of the variable is not compatible with the type \" + typeof(T).Name + \".\");\n        }\n    }\n    else {\n        result = default(T);\n        return false;\n    }\n}", "CodeBleu_score": 58.81422954006179}]}
{"instance_id": "7201488347ef", "generation_result": [{"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t    this.variableStorage = variableStorage;\n\n    this.library = new Library();\n    this.virtualMachine = new VirtualMachine(this.library);\n\n    this.library.ImportLibrary(new StandardLibrary());\n\n    this.library.RegisterFunction(\"nameof\", nameof);\n    this.library.RegisterFunction(\"GetNodeVisitCount\", GetNodeVisitCount);\n    this.library.RegisterFunction(\"IsNodeVisited\", IsNodeVisited);\n\n    this.lineParser = new LineParser();\n    this.lineParser.RegisterMarkerProcessor(\"select\", this.Select);\n    this.lineParser.RegisterMarkerProcessor(\"plural\", this.Plural);\n    this.lineParser.RegisterMarkerProcessor(\"ordinal\", this.Ordinal);\n}", "CodeBleu_score": 34.6421077860174}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t    library = new Library();\n    library.ImportLibrary(new StandardLibrary());\n    library.RegisterFunction(nameof(GetNodeVisitCount), GetNodeVisitCount);\n    library.RegisterFunction(nameof(IsNodeVisited), IsNodeVisited);\n    virtualMachine = new VirtualMachine(library);\n    virtualMachine.SetVariableStorage(variableStorage);\n    lineParser = new LineParser();\n    lineParser.RegisterMarkerProcessor(\"select\", ProcessSelect);\n    lineParser.RegisterMarkerProcessor(\"plural\", ProcessPlural);\n    lineParser.RegisterMarkerProcessor(\"ordinal\", ProcessOrdinal);\n}", "CodeBleu_score": 39.51894205333654}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t    Library = new Library();\n    Library.RegisterFunction(\"nameof\", nameof);\n    Library.RegisterFunction(\"lineParser.RegisterMarkerProcessor\", lineParser.RegisterMarkerProcessor);\n    Library.RegisterFunction(\"GetNodeVisitCount\", GetNodeVisitCount);\n    Library.ImportLibrary(new StandardLibrary());\n    Library.RegisterFunction(\"IsNodeVisited\", IsNodeVisited);\n    VirtualMachine = new VirtualMachine(Library);\n    VirtualMachine.SetVariableStorage(variableStorage);\n    LineParser = new LineParser();\n    LineParser.RegisterMarkerProcessor(\"select\", new SelectMarker());\n    LineParser.RegisterMarkerProcessor(\"plural\", new PluralMarker());\n    LineParser.RegisterMarkerProcessor(\"ordinal\", new OrdinalMarker());\n}", "CodeBleu_score": 37.59717559148282}]}
{"instance_id": "59b7b5a9c34a", "generation_result": [{"code": "public int FindUniqueID(string UniqueID){\n\t    if (string.IsNullOrEmpty(UniqueID)) { return -1; }\n    for (int i = 0; i < LoopListBankData.Count; i++) {\n        if (LoopListBankData[i].UniqueID == UniqueID) {\n            return i;\n        }\n    }\n    return -1;\n}", "CodeBleu_score": 74.92064172862823}, {"code": "public int FindUniqueID(string UniqueID){\n\t\tif (string.IsNullOrEmpty(UniqueID)) {\n\t\treturn -1;\n\t}\n\tfor (int i = 0; i < LoopListBankData.Count; i++) {\n\t\tif (LoopListBankData[i].UniqueID == UniqueID) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}", "CodeBleu_score": 69.39193480181972}, {"code": "public int FindUniqueID(string UniqueID){\n\t    if (string.IsNullOrEmpty(UniqueID)) {\n        return -1;\n    }\n    for (int i = 0; i < LoopListBankData.Count; i++) {\n        if (LoopListBankData[i].UniqueID == UniqueID) {\n            return i;\n        }\n    }\n    return -1;\n}", "CodeBleu_score": 76.47859416392919}]}
{"instance_id": "2b85606238aa", "generation_result": [{"code": "public void AddContent(object newContent){\n\t\tLoopListBankData newData = new LoopListBankData();\n\tnewData.content = newContent;\n\tnewData.id = System.Guid.NewGuid();\n\tm_LoopListBankDataList.Add(newData);\n}", "CodeBleu_score": 44.91037091798154}, {"code": "public void AddContent(object newContent){\n\t\tLoopListBankData newData = new LoopListBankData();\n\tnewData.content = newContent;\n\tnewData.id = System.Guid.NewGuid();\n\tm_LoopListBankDataList.Add(newData);\n}", "CodeBleu_score": 44.91037091798154}, {"code": "public void AddContent(object newContent){\n\t\tLoopListBankData newData = new LoopListBankData();\n\tnewData.content = newContent;\n\tnewData.id = System.Guid.NewGuid();\n\tm_LoopListBankDataList.Add(newData);\n}", "CodeBleu_score": 44.91037091798154}]}
{"instance_id": "34e593106991", "generation_result": [{"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t  m_IndexID = idx;\n  m_Content = content;\n  if (m_IsUpdateGameObjectName) {\n    gameObject.name = string.Format(\"{0}_{1}\", m_PrefabName, m_IndexID);\n  }\n}", "CodeBleu_score": 67.35129507851796}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t    m_IndexID = idx;\n    m_Content = content;\n\n    if (m_IsUpdateGameObjectName) {\n        gameObject.name = m_PrefabName + \" \" + m_IndexID;\n    }\n\n    if (m_ClickUniqueID != \"\") {\n        m_ClickUniqueID = ClickUniqueID;\n    }\n\n    if (m_ClickObject != null) {\n        m_ClickObject = ClickObject;\n    }\n}", "CodeBleu_score": 53.31154954386066}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t    if (m_IndexID != idx) {\n        m_IndexID = idx;\n        m_Content = content;\n        if (m_IsUpdateGameObjectName) {\n            gameObject.name = string.Format(\"{0} {1}\", m_PrefabName, m_IndexID);\n        }\n        if (m_ScrollCellIndexEvent != null) {\n            m_ScrollCellIndexEvent(idx, content, ClickUniqueID, ClickObject);\n        }\n    }\n}", "CodeBleu_score": 58.25177630023182}]}
{"instance_id": "6b6a6cc329cc", "generation_result": [{"code": "private void OnButtonAddDataClickk(){\n\t    int numItems = 1;\n    int.TryParse(m_InputField.text, out numItems);\n    numItems = Mathf.Max(1, numItems);\n\n    for (int i = 0; i < numItems; i++) {\n        m_ListBank.AddContent(Random.Range(0, 10));\n    }\n\n    m_InitOnStart.m_LoopScrollRect.RefreshCells();\n    m_InitOnStart.m_LoopListBank.GetListLength();\n}", "CodeBleu_score": 51.28330787696398}, {"code": "private void OnButtonAddDataClickk(){\n\t    int numToAdd = 1;\n    int.TryParse(m_InputFieldAddData.text, out numToAdd);\n    numToAdd = Mathf.Max(numToAdd, 1);\n    for (int i = 0; i < numToAdd; i++) {\n        m_ListBank.AddContent(Random.Range(0, 10));\n    }\n    m_InitOnStart.m_LoopScrollRect.RefreshCells();\n    m_InitOnStart.m_LoopListBank.GetListLength();\n}", "CodeBleu_score": 49.17850664926906}, {"code": "private void OnButtonAddDataClickk(){\n\t\tint addCount = 1;\n\tint.TryParse(m_InputFieldAddCount.text, out addCount);\n\taddCount = Mathf.Max(1, addCount);\n\tfor (int i = 0; i < addCount; i++) {\n\t\tm_ListBank.AddContent(Random.Range(0, 10));\n\t}\n\tm_InitOnStart.m_LoopScrollRect.RefreshCells();\n\tm_InitOnStart.m_LoopListBank.GetListLength();\n}", "CodeBleu_score": 50.35293244749804}]}
{"instance_id": "209961c9eb8e", "generation_result": [{"code": "protected override void ClearTempPool(){\n\t    //Debug.Log(\"ClearTempPool()\");\n    //Debug.Log(this.name + \".ClearTempPool()\");\n    if (m_Content == null) {\n        //Debug.Log(this.name + \".ClearTempPool() m_Content == null\");\n        return;\n    }\n    //Debug.Log(this.name + \".ClearTempPool() m_Content != null\");\n    //Debug.Log(this.name + \".ClearTempPool() m_Content.childCount: \" + m_Content.childCount);\n    //Debug.Log(this.name + \".ClearTempPool() m_Content.childCount: \" + m_Content.childCount);\n    if (m_Content.childCount > 0) {\n        //Debug.Log(this.name + \".ClearTempPool() m_Content.childCount > 0\");\n        //Debug.Log(this.name + \".ClearTempPool() m_Content.childCount: \" + m_Content.childCount);\n        //Debug.Log(this.name + \".ClearTempPool() m_Content.childCount: \" + m_Content.childCount);\n        //Debug.Log(this.name + \".ClearTempPool() m_Content.childCount: \" + m_Content.childCount);\n        //Debug.Log(this.name + \".ClearTempPool() m_Content.childCount: \" + m_Content.childCount);\n        //Debug.Log(this.name + \".ClearTempPool() m_Content.childCount: \" + m_Content.childCount);\n        //Debug.Log(this.name + \".ClearTempPool() m_Content.childCount: \" + m_Content.childCount);\n        //Debug.Log(this.name + \".ClearTempPool() m_Content.childCount: \" + m_Content.childCount);\n        //Debug.Log(this.name + \".ClearTempPool() m_Content.childCount: \" + m_Content.childCount);\n        //Debug.Log(this.name + \".ClearTempPool() m_Content.childCount: \" + m_Content.childCount);\n        //Debug.Log(this.name + \".ClearTempPool() m_Content.childCount: \" + m_Content.", "CodeBleu_score": 7.431690641728926}, {"code": "protected override void ClearTempPool(){\n\t\t// Verify that the content has the expected number of child elements\n\tDebug.Assert(m_Content.childCount == m_Content.GetChild(0).GetComponent<LoopScrollRect>().totalCount, \"LoopScrollRect does not have the expected number of child elements\");\n\t\n\t// If there are items marked for deletion at the start, return them to the prefab source and reset the start index\n\tif (m_FirstItemIndexToDelete >= 0) {\n\t\tfor (int i = m_FirstItemIndexToDelete; i < m_FirstItemIndexToDelete + m_NumItemsToDelete; i++) {\n\t\t\tm_PrefabSource.ReturnObject(m_Content.GetChild(i).gameObject);\n\t\t}\n\t\tm_FirstItemIndexToDelete = -1;\n\t\tm_NumItemsToDelete = 0;\n\t}\n\t\n\t// If there are items marked for deletion at the end, return them to the prefab source and reset the end index\n\tif (m_LastItemIndexToDelete >= 0) {\n\t\tfor (int i = m_LastItemIndexToDelete; i < m_LastItemIndexToDelete + m_NumItemsToDelete; i++) {\n\t\t\tm_PrefabSource.ReturnObject(m_Content.GetChild(i).gameObject);\n\t\t}\n\t\tm_LastItemIndexToDelete = -1;\n\t\tm_NumItemsToDelete = 0;\n\t}\n}", "CodeBleu_score": 39.406839574373116}, {"code": "protected override void ClearTempPool(){\n\t  //verify that the content has the expected number of child elements\n  Debug.Assert(m_Content.childCount == m_Content.GetChild(0).GetSiblingIndex() + 1, \"Unexpected number of child elements in the content container. Some may have been added or removed illegally.\");\n  //if there are items marked for deletion at the start, return them to the prefab source and reset the start index\n  if (m_StartHasTemp) {\n    for (int i = m_Content.GetChild(0).GetSiblingIndex(); i >= 0; i--) {\n      m_PrefabSource.ReturnObject(m_Content.GetChild(i));\n    }\n    m_Content.GetChild(0).SetSiblingIndex(0);\n    m_StartHasTemp = false;\n  }\n  //if there are items marked for deletion at the end, return them to the prefab source and reset the end index\n  if (m_EndHasTemp) {\n    for (int i = m_Content.childCount - 1; i > m_Content.GetChild(0).GetSiblingIndex(); i--) {\n      m_PrefabSource.ReturnObject(m_Content.GetChild(i));\n    }\n    m_EndHasTemp = false;\n  }\n}", "CodeBleu_score": 46.839055445517424}]}
{"instance_id": "c6bb290de2b3", "generation_result": [{"code": "public void AnticipateScale(Vector3 newScale){\n\t    if (isNetworkActive && isNetworkListening) {\n        transform.localScale = newScale;\n        anticipatedScale = newScale;\n        if (isAuthority) {\n            authoritativeScale = newScale;\n        }\n        RecordAnticipatedTransform();\n        ResetSmooth();\n    }\n}", "CodeBleu_score": 29.733213316862855}, {"code": "public void AnticipateScale(Vector3 newScale){\n\t\tif (Network.isActive && Network.isListening) {\n\t\ttransform.localScale = newScale;\n\t\tanticipatedScale = newScale;\n\t\tif (Network.isServer) {\n\t\t\tauthoritativeScale = newScale;\n\t\t}\n\t\tanticipatedTransform = transform;\n\t\tlastAnticipatedTransform = transform;\n\t\tlastAnticipatedTime = Time.time;\n\t\tlastAnticipatedNetworkTime = Network.time;\n\t\tlastAnticipatedNetworkFixedTime = Network.fixedTime;\n\t\tsmoothTransitionDuration = 0;\n\t\tcurrentSmoothTime = 0;\n\t}\n}", "CodeBleu_score": 36.349327853546775}, {"code": "public void AnticipateScale(Vector3 newScale){\n\t    if (!isNetworkActive || !isNetworkListening) {\n        return;\n    }\n    localScale = newScale;\n    anticipatedScale = newScale;\n    if (allowAuthoritativeScale) {\n        authoritativeScale = newScale;\n    }\n    RecordAnticipatedTransform();\n    anticipationCounter = 0;\n    anticipationTime = 0;\n    smoothTransitionDuration = 0;\n    currentSmoothTime = 0;\n}", "CodeBleu_score": 23.015689132163462}]}
{"instance_id": "d67d3c80dd00", "generation_result": [{"code": "private void FlushMessages(){\n\t    if (m_SendAnimationUpdates.Count > 0) {\n        m_NetworkAnimator.SendAnimTriggerServerRpc(m_SendAnimationUpdates);\n        m_SendAnimationUpdates.Clear();\n    }\n    if (m_SendParameterUpdates.Count > 0) {\n        m_NetworkAnimator.SendParametersUpdateClientRpc(m_SendParameterUpdates);\n        m_SendParameterUpdates.Clear();\n    }\n    if (m_SendTriggerUpdates.Count > 0) {\n        m_NetworkAnimator.SendAnimTriggerClientRpc(m_SendTriggerUpdates);\n        m_SendTriggerUpdates.Clear();\n    }\n}", "CodeBleu_score": 30.65449143933641}, {"code": "private void FlushMessages(){\n\t    if (m_SendAnimationUpdates.Count > 0) {\n        m_NetworkAnimator.SendAnimTriggerServerRpc(m_SendAnimationUpdates);\n        m_SendAnimationUpdates.Clear();\n    }\n\n    if (m_SendParameterUpdates.Count > 0) {\n        m_NetworkAnimator.SendParametersUpdateClientRpc(m_SendParameterUpdates);\n        m_SendParameterUpdates.Clear();\n    }\n\n    if (m_SendTriggerUpdates.Count > 0) {\n        m_NetworkAnimator.SendAnimTriggerClientRpc(m_SendTriggerUpdates);\n        m_SendTriggerUpdates.Clear();\n    }\n}", "CodeBleu_score": 30.65449143933641}, {"code": "private void FlushMessages(){\n\t    // Send animation updates\n    foreach (var update in m_SendAnimationUpdates)\n    {\n        m_NetworkAnimator.SendAnimStateClientRpc(update.animatorHash, update.stateHash, update.normalizedTime);\n    }\n    m_SendAnimationUpdates.Clear();\n\n    // Send parameter updates\n    foreach (var update in m_SendParameterUpdates)\n    {\n        m_NetworkAnimator.SendParametersUpdateClientRpc(update.animatorHash, update.stateHash, update.normalizedTime);\n    }\n    m_SendParameterUpdates.Clear();\n\n    // Send trigger updates\n    foreach (var update in m_SendTriggerUpdates)\n    {\n        m_NetworkAnimator.SendAnimTriggerServerRpc(update.animatorHash, update.stateHash, update.normalizedTime);\n    }\n    m_SendTriggerUpdates.Clear();\n}", "CodeBleu_score": 57.481547100324384}]}
{"instance_id": "0632b2f27d22", "generation_result": [{"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t\tif (updateStage == NetworkUpdateStage.PreUpdate) {\n\t\t// Flush pending messages if the animator is the owner or the server\n\t\tif (isOwner || isServer) {\n\t\t\tFlushMessages();\n\t\t}\n\n\t\t// Process parameter updates\n\t\tProcessParameterUpdates();\n\n\t\t// Check for animator changes\n\t\tCheckForAnimatorChanges();\n\t}\n}", "CodeBleu_score": 12.44774589854784}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t    if (updateStage == NetworkUpdateStage.PreUpdate) {\n        if (m_NetworkAnimator.IsOwner || m_NetworkAnimator.IsServerAuthoritative) {\n            FlushMessages();\n        }\n    }\n    if (updateStage == NetworkUpdateStage.PostLateUpdate) {\n        if (m_NetworkAnimator.IsOwner || m_NetworkAnimator.IsServerAuthoritative) {\n            ProcessParameterUpdates();\n            CheckForAnimatorChanges();\n        }\n    }\n}", "CodeBleu_score": 32.78081872206445}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t    if (updateStage == NetworkUpdateStage.PreUpdate) {\n        if (m_NetworkAnimator.IsServerAuthoritative) {\n            FlushMessages();\n        }\n        else {\n            m_NetworkAnimator.UpdateParameters();\n        }\n    }\n    else if (updateStage == NetworkUpdateStage.PostLateUpdate) {\n        if (m_NetworkAnimator.IsServerAuthoritative) {\n            m_NetworkAnimator.UpdateParameters();\n            m_NetworkAnimator.CheckForAnimatorChanges();\n        }\n        else {\n            if (m_NetworkAnimator.hasAuthority) {\n                m_NetworkAnimator.UpdateParameters();\n                m_NetworkAnimator.CheckForAnimatorChanges();\n            }\n            else {\n                m_NetworkAnimator.UpdateParameters();\n            }\n        }\n    }\n}", "CodeBleu_score": 32.78334854595932}]}
{"instance_id": "d78874b65b32", "generation_result": [{"code": "private void UpdateOwnershipAuthority(){\n\t    // If the object is owned by the local client, set the ownership authority to true and adjust the Rigidbody's settings accordingly\n    if (OwnershipStatus == OwnershipStatus.Owned) {\n        OwnershipAuthority = true;\n        GetComponent<Rigidbody>().isKinematic = false;\n        GetComponent<Rigidbody>().interpolation = RigidbodyInterpolation.Interpolate;\n    }\n    // If the object is owned by another client, set the ownership authority to false and adjust the Rigidbody's settings accordingly\n    else if (OwnershipStatus == OwnershipStatus.OwnedByOther) {\n        OwnershipAuthority = false;\n        GetComponent<Rigidbody>().isKinematic = true;\n        GetComponent<Rigidbody>().interpolation = RigidbodyInterpolation.None;\n    }\n    // If the object is server authoritative, set the ownership authority to true and adjust the Rigidbody's settings accordingly\n    else if (OwnershipStatus == OwnershipStatus.ServerAuthoritative) {\n        OwnershipAuthority = true;\n        GetComponent<Rigidbody>().isKinematic = false;\n        GetComponent<Rigidbody>().interpolation = RigidbodyInterpolation.Interpolate;\n    }\n}", "CodeBleu_score": 19.71986859675305}, {"code": "private void UpdateOwnershipAuthority(){\n\t    // If the server owns the object, make it kinematic and interpolate it\n    if (isServerAuthority) {\n        if (!rigidbody.isKinematic) {\n            rigidbody.isKinematic = true;\n        }\n        if (!rigidbody.interpolation.Equals(RigidbodyInterpolation.Interpolate)) {\n            rigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n        }\n        // If the client owns the object, make it non-kinematic and extrapolate it\n    } else {\n        if (rigidbody.isKinematic) {\n            rigidbody.isKinematic = false;\n        }\n        if (!rigidbody.interpolation.Equals(RigidbodyInterpolation.Extrapolate)) {\n            rigidbody.interpolation = RigidbodyInterpolation.Extrapolate;\n        }\n    }\n}", "CodeBleu_score": 23.72140073425625}, {"code": "private void UpdateOwnershipAuthority(){\n\t    if (isLocalPlayer) {\n        if (isOwned) {\n            // Owned by local player\n            // Set object's authority to local\n            SetAuthority(true);\n            // Set Rigidbody to kinematic\n            GetComponent<Rigidbody>().isKinematic = true;\n            // Set Rigidbody interpolation to none\n            GetComponent<Rigidbody>().interpolation = RigidbodyInterpolation.None;\n        } else {\n            // Owned by remote player\n            // Set object's authority to remote\n            SetAuthority(false);\n            // Set Rigidbody to kinematic\n            GetComponent<Rigidbody>().isKinematic = true;\n            // Set Rigidbody interpolation to none\n            GetComponent<Rigidbody>().interpolation = RigidbodyInterpolation.None;\n        }\n    } else {\n        if (isOwned) {\n            // Owned by remote player\n            // Set object's authority to remote\n            SetAuthority(false);\n            // Set Rigidbody to kinematic\n            GetComponent<Rigidbody>().isKinematic = true;\n            // Set Rigidbody interpolation to none\n            GetComponent<Rigidbody>().interpolation = RigidbodyInterpolation.None;\n        } else {\n            // Unowned\n            // Set object's authority to server\n            SetAuthority(false);\n            // Set Rigidbody to non-kinematic\n            GetComponent<Rigidbody>().isKinematic = false;\n            // Set Rigidbody interpolation to interpolate\n            GetComponent<Rigidbody>().interpolation = RigidbodyInterpolation.Interpolate;\n        }\n    }\n}", "CodeBleu_score": 17.846606868685036}]}
{"instance_id": "304fe1278db9", "generation_result": [{"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t    // The highest two bits of the compressed value determine which component to skip\n    // when decompressing the quaternion.\n    int skipComponent = (int)(compressed >> 30);\n\n    // The remaining bits are used to calculate the values of the three components\n    // that are not skipped.\n    uint mask = (1 << 30) - 1;\n    uint compressed2 = compressed & mask;\n\n    // Decompress the components.\n    float a = (float)compressed2 / (float)mask;\n    float b = (float)compressed2 / (float)mask;\n    float c = (float)compressed2 / (float)mask;\n\n    // Calculate the sum of squared magnitudes.\n    float sum = a * a + b * b + c * c;\n\n    // Calculate the value of the skipped component.\n    float d = Mathf.Sqrt(1f - sum);\n\n    // Store the results in the quaternion.\n    switch (skipComponent) {\n        case 0:\n            quaternion.x = d;\n            quaternion.y = a;\n            quaternion.z = b;\n            quaternion.w = c;\n            break;\n        case 1:\n            quaternion.x = a;\n            quaternion.y = d;\n            quaternion.z = b;\n            quaternion.w = c;\n            break;\n        case 2:\n            quaternion.x = a;\n            quaternion.y = b;\n            quaternion.z = d;\n            quaternion.w = c;\n            break;\n        case 3:\n            quaternion.x = a;\n            quaternion.y = b;\n            quaternion.z = c;\n            quaternion.w = d;\n            break;\n    }\n}", "CodeBleu_score": 19.32371850218832}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t\tint index = (int)(compressed >> 30);\n\tfloat x = 0;\n\tfloat y = 0;\n\tfloat z = 0;\n\tfloat w = 0;\n\tswitch (index) {\n\t\tcase 0:\n\t\t\tx = (compressed & 0x3FFF) / 16383f;\n\t\t\ty = (compressed >> 14 & 0x3FFF) / 16383f;\n\t\t\tz = (compressed >> 28 & 0x3FFF) / 16383f;\n\t\t\tw = Mathf.Sqrt(1f - x * x - y * y - z * z);\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tx = (compressed & 0x3FFF) / 16383f;\n\t\t\ty = (compressed >> 14 & 0x3FFF) / 16383f;\n\t\t\tz = (compressed >> 28 & 0x3FFF) / 16383f;\n\t\t\tw = -Mathf.Sqrt(1f - x * x - y * y - z * z);\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\ty = (compressed & 0x3FFF) / 16383f;\n\t\t\tz = (compressed >> 14 & 0x3FFF) / 16383f;\n\t\t\tx = (compressed >> 28 & 0x3FFF) / 16383f;\n\t\t\tw = Mathf.Sqrt(1f - x * x - y * y - z * z);\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\ty = (compressed & 0x3FFF) / 16383f;\n\t\t\tz = (compressed >> 14 & 0x3FFF) / 16383f;\n\t\t\tx = (compressed >> 28 &", "CodeBleu_score": 20.479016788634194}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t    // Determine which component to skip based on the highest two bits.\n    int componentIndex = (int)((compressed >> 30) & 3);\n\n    // Decompress the remaining components.\n    for (int i = 0; i < 4; i++) {\n        if (i != componentIndex) {\n            quaternion[i] = (float)(compressed % 1024) / 512.0f;\n            compressed >>= 10;\n        }\n    }\n\n    // Compute the skipped component.\n    quaternion[componentIndex] = Mathf.Sqrt(1.0f - quaternion.x * quaternion.x - quaternion.y * quaternion.y - quaternion.z * quaternion.z);\n}", "CodeBleu_score": 33.631437082952516}]}
{"instance_id": "452b860a7dde", "generation_result": [{"code": "static void GenerateCLRBindingByAnalysis(){\n\t    AppDomain domain = AppDomain.CurrentDomain;\n    Assembly assembly = domain.Load(File.ReadAllBytes(Application.dataPath + \"/HotFix_Project/DLL/HotFix_Project.dll.bytes\"));\n    ILRuntime.Runtime.Enviorment.AppDomain __domain = new ILRuntime.Runtime.Enviorment.AppDomain();\n    __domain.LoadAssembly(assembly, assembly.ManifestModule.FullyQualifiedName, new Mono.Cecil.DefaultAssemblyResolver());\n    string output = \"Assets/HotFix_Project/ILRuntime/Generated\";\n    __domain.DebugService.StartDebugService(56000);\n    __domain.RegisterCrossBindingAdaptor(new MonoBehaviourAdapter());\n    __domain.RegisterCrossBindingAdaptor(new CoroutineAdapter());\n    __domain.RegisterCrossBindingAdaptor(new IAsyncStateMachineClassInheritanceAdaptor());\n    __domain.RegisterCrossBindingAdaptor(new InheritanceAdaptor());\n    __domain.RegisterCrossBindingAdaptor(new ExceptionAdapter());\n    __domain.RegisterCrossBindingAdaptor(new IEnumerableAdapter());\n    __domain.RegisterCrossBindingAdaptor(new ICollectionAdapter());\n    __domain.RegisterCrossBindingAdaptor(new IListAdapter());\n    __domain.RegisterCrossBindingAdaptor(new IDictionaryAdapter());\n    __domain.RegisterCrossBindingAdaptor(new KeyValuePairAdapter());\n    __domain.RegisterCrossBindingAdaptor(new IAsyncResultAdapter());\n    __domain.RegisterCrossBindingAdaptor(new AsyncCallbackAdapter());\n    __domain.RegisterCrossBindingAdaptor(new AsyncOperationAdapter());\n    __domain.RegisterCrossBindingAdaptor(new IMethodAdapter());\n    __domain.RegisterCrossBindingAdaptor(new IAsyncStateMachineAdapter());\n    __domain.RegisterCrossBindingAdaptor(new ValueTypeBinderAdapter());\n    __domain.RegisterCrossBindingAdaptor(new KeyValuePairAdapter<System.Type, System.Int32>());\n", "CodeBleu_score": 16.08048139774214}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\t    AppDomain domain = AppDomain.CurrentDomain;\n    //Crossbind Adapt\n    domain.AssemblyResolve += (sender, args) => {\n        return OnAssemblyResolve(args, new DirectoryInfo(Application.dataPath));\n    };\n\n    //Load Assembly\n    Assembly assembly = domain.Load(File.ReadAllBytes(Application.dataPath + \"/ILRuntime/Mono.Cecil.dll\"));\n    //Initialize ILRuntime\n    ILRuntime.Runtime.Enviorment.AppDomain __app = new ILRuntime.Runtime.Enviorment.AppDomain();\n    __app.LoadAssembly(assembly, null, new ILRuntime.Mono.Cecil.Pdb.PdbReaderProvider());\n    //Analysis References\n    List<Type> reference = new List<Type>();\n    reference.Add(typeof(MonoBehaviour));\n    reference.Add(typeof(ParticleSystem));\n    reference.Add(typeof(SkinnedMeshRenderer));\n    reference.Add(typeof(Animator));\n    reference.Add(typeof(Animation));\n    reference.Add(typeof(AnimationClip));\n    reference.Add(typeof(AudioClip));\n    reference.Add(typeof(AudioSource));\n    reference.Add(typeof(BoxCollider));\n    reference.Add(typeof(Camera));\n    reference.Add(typeof(ComputeShader));\n    reference.Add(typeof(MeshCollider));\n    reference.Add(typeof(MeshFilter));\n    reference.Add(typeof(MeshRenderer));\n    reference.Add(typeof(Rigidbody));\n    reference.Add(typeof(Shader));\n    reference.Add(typeof(Sprite));\n    reference.Add(typeof(SpriteRenderer));\n    reference.Add(typeof(TextAsset));\n    reference.Add(typeof(Texture));\n    reference.Add(typeof(Texture2D));\n    reference.Add(typeof(Transform));\n    reference.Add(typeof(UnityEngine.Object));\n    reference.Add(typeof(Vector2));\n    reference.Add(typeof(Vector3));\n    reference.Add(typeof(Vector4));\n    reference.Add(typeof(Color));\n    reference.Add(typeof(Quaternion));", "CodeBleu_score": 17.175237138802174}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\t    AppDomain domain = AppDomain.CurrentDomain;\n    Assembly assembly = domain.Load(File.ReadAllBytes(Application.dataPath + \"/ILRuntime/Mono.Cecil.dll\"));\n    Type type = assembly.GetType(\"Mono.Cecil.AssemblyDefinition\");\n    MethodInfo method = type.GetMethod(\"ReadAssembly\", new Type[] { typeof(string), typeof(Mono.Cecil.ReaderParameters) });\n    object obj = method.Invoke(null, new object[] { Application.dataPath + \"/Assembly-CSharp.dll\", null });\n    method = type.GetMethod(\"MainModule\");\n    object module = method.Invoke(obj, null);\n    method = module.GetType().GetMethod(\"GetTypes\");\n    IList types = method.Invoke(module, null) as IList;\n    List<TypeDefinition> allTypes = new List<TypeDefinition>();\n    foreach (object o in types) {\n        TypeDefinition typeDef = o as TypeDefinition;\n        if (typeDef != null) {\n            allTypes.Add(typeDef);\n        }\n    }\n    method = type.GetMethod(\"Write\");\n    method.Invoke(obj, new object[] { Application.dataPath + \"/Assembly-CSharp.dll\" });\n    AppDomain.Unload(domain);\n    domain = AppDomain.CurrentDomain;\n    assembly = domain.Load(File.ReadAllBytes(Application.dataPath + \"/ILRuntime/Mono.Cecil.dll\"));\n    type = assembly.GetType(\"Mono.Cecil.AssemblyDefinition\");\n    method = type.GetMethod(\"ReadAssembly\", new Type[] { typeof(string), typeof(Mono.Cecil.ReaderParameters) });\n    obj = method.Invoke(null, new object[] { Application.dataPath + \"/Assembly-CSharp-firstpass.dll\", null });\n    method = type.GetMethod(\"MainModule\");\n    module = method.Invoke(obj, null);\n    method = module.GetType().GetMethod(\"GetTypes\");\n    types = method.Invoke(module, null) as IList;\n    foreach (object o in types) {\n        TypeDefinition typeDef = o as TypeDefinition;\n        if (typeDef != null", "CodeBleu_score": 18.949497536644426}]}
{"instance_id": "b8990031b636", "generation_result": [{"code": "public override void OnInspectorGUI(){\n\t    serializedObject.Update();\n    EditorGUI.BeginDisabledGroup(EditorApplication.isPlaying && EditorUtility.IsPrefabInHierarchy(target));\n    EditorGUILayout.LabelField(\"Config Component\", EditorStyles.boldLabel);\n    EditorGUILayout.PropertyField(m_ConfigHelperInfo);\n    if (EditorApplication.isPlaying && EditorUtility.IsPrefabInHierarchy(target)) {\n        ConfigComponent t = (ConfigComponent)target;\n        EditorGUILayout.LabelField(\"Config Count\", t.Count.ToString());\n        EditorGUILayout.LabelField(\"Cached Bytes Size\", t.CachedBytesSize.ToString());\n    }\n    EditorGUI.EndDisabledGroup();\n    m_ConfigHelperInfo.Draw();\n    serializedObject.ApplyModifiedProperties();\n    Repaint();\n}", "CodeBleu_score": 69.72009052410652}, {"code": "public override void OnInspectorGUI(){\n\t    // Update the serialized object\n    serializedObject.Update();\n\n    // Display the config count and cached bytes size if the target is a prefab in the hierarchy\n    ConfigComponent t = (ConfigComponent)target;\n    if (EditorApplication.isPlaying && EditorUtility.IsPrefabInHierarchy(t.gameObject)) {\n        EditorGUI.BeginDisabledGroup(true);\n        EditorGUILayout.LabelField(\"Config Count\", t.Count.ToString());\n        EditorGUILayout.LabelField(\"Cached Bytes Size\", t.CachedBytesSize.ToString());\n        EditorGUI.EndDisabledGroup();\n    }\n\n    // Display the config helper info\n    m_ConfigHelperInfo.Draw();\n\n    // Apply any modified properties and repaint the inspector\n    serializedObject.ApplyModifiedProperties();\n    Repaint();\n}", "CodeBleu_score": 57.09002832018933}, {"code": "public override void OnInspectorGUI(){\n\t    serializedObject.Update();\n\n    EditorGUI.BeginDisabledGroup(EditorApplication.isPlaying && EditorUtility.IsPrefabInHierarchy(target));\n\n    EditorGUILayout.LabelField(\"Config Component\", EditorStyles.boldLabel);\n    EditorGUILayout.PropertyField(m_ConfigHelperInfo);\n\n    if (EditorApplication.isPlaying && EditorUtility.IsPrefabInHierarchy(target)) {\n        ConfigComponent t = (ConfigComponent)target;\n        EditorGUILayout.LabelField(\"Config Count\", t.Count.ToString());\n        EditorGUILayout.LabelField(\"Cached Bytes Size\", t.CachedBytesSize.ToString());\n    }\n\n    EditorGUI.EndDisabledGroup();\n\n    serializedObject.ApplyModifiedProperties();\n    Repaint();\n}", "CodeBleu_score": 68.84371611100168}]}
{"instance_id": "6453adc2daa8", "generation_result": [{"code": "public static void DefaultScenes(){\n\t    HashSet<string> defaultSceneNames = new HashSet<string>() {\n        \"Assets/Scenes/MainMenu.unity\",\n        \"Assets/Scenes/Game.unity\",\n        \"Assets/Scenes/GameOver.unity\"\n    };\n\n    List<EditorBuildSettingsScene> scenes = new List<EditorBuildSettingsScene>();\n\n    foreach (string sceneName in defaultSceneNames) {\n        scenes.Add(new EditorBuildSettingsScene(sceneName, true));\n    }\n\n    EditorBuildSettings.scenes = scenes.ToArray();\n    Debug.Log(\"Scenes set to default\");\n}", "CodeBleu_score": 60.68254858301601}, {"code": "public static void DefaultScenes(){\n\t    HashSet<string> defaultScenes = new HashSet<string>() {\n        \"Assets/Scenes/MainMenu.unity\",\n        \"Assets/Scenes/Level1.unity\",\n        \"Assets/Scenes/Level2.unity\",\n        \"Assets/Scenes/Level3.unity\",\n        \"Assets/Scenes/Level4.unity\",\n        \"Assets/Scenes/Level5.unity\",\n        \"Assets/Scenes/Level6.unity\",\n        \"Assets/Scenes/Level7.unity\",\n        \"Assets/Scenes/Level8.unity\",\n        \"Assets/Scenes/Level9.unity\",\n        \"Assets/Scenes/Level10.unity\",\n        \"Assets/Scenes/Level11.unity\",\n        \"Assets/Scenes/Level12.unity\",\n        \"Assets/Scenes/Level13.unity\",\n        \"Assets/Scenes/Level14.unity\",\n        \"Assets/Scenes/Level15.unity\",\n        \"Assets/Scenes/Level16.unity\",\n        \"Assets/Scenes/Level17.unity\",\n        \"Assets/Scenes/Level18.unity\",\n        \"Assets/Scenes/Level19.unity\",\n        \"Assets/Scenes/Level20.unity\",\n        \"Assets/Scenes/Level21.unity\",\n        \"Assets/Scenes/Level22.unity\",\n        \"Assets/Scenes/Level23.unity\",\n        \"Assets/Scenes/Level24.unity\",\n        \"Assets/Scenes/Level25.unity\",\n        \"Assets/Scenes/Level26.unity\",\n        \"Assets/Scenes/Level27.unity\",\n        \"Assets/Scenes/Level28.unity\",\n        \"Assets/Scenes/Level29.unity\",\n        \"Assets/Scenes/Level30.unity\",\n        \"Assets/Scenes/Level31.unity\",\n        \"Assets/Scenes/Level32.unity\",\n        \"Assets/Scenes/Level", "CodeBleu_score": 11.474297476107202}, {"code": "public static void DefaultScenes(){\n\t    HashSet<string> defaultScenes = new HashSet<string>();\n    defaultScenes.Add(\"Assets/Scenes/MainMenu.unity\");\n    defaultScenes.Add(\"Assets/Scenes/Game.unity\");\n    defaultScenes.Add(\"Assets/Scenes/GameOver.unity\");\n    defaultScenes.Add(\"Assets/Scenes/Credits.unity\");\n    List<EditorBuildSettingsScene> scenes = new List<EditorBuildSettingsScene>();\n    foreach (string scene in defaultScenes) {\n        scenes.Add(new EditorBuildSettingsScene(scene, true));\n    }\n    EditorBuildSettings.scenes = scenes.ToArray();\n    Debug.Log(\"Scenes set to default.\");\n}", "CodeBleu_score": 62.46743080382139}]}
{"instance_id": "e199f1a42526", "generation_result": [{"code": "public void Draw(){\n\t    if (this.helperTypes.Length == 0) {\n        EditorGUILayout.HelpBox(\"No helper types found.\", MessageType.Error);\n        return;\n    }\n\n    // Display a popup menu for selecting a helper type.\n    EditorGUILayout.BeginHorizontal();\n    EditorGUILayout.LabelField(\"Helper Type\", EditorStyles.boldLabel);\n    this.selectedIndex = EditorGUILayout.Popup(this.selectedIndex, this.helperTypeNames);\n    EditorGUILayout.EndHorizontal();\n\n    // If a helper type is selected, display a field for the selected helper.\n    if (this.selectedIndex >= 0) {\n        this.selectedHelper = EditorGUILayout.ObjectField(this.selectedHelper, this.helperTypes[this.selectedIndex], true);\n    }\n\n    // If no helper type is selected, display a field for a custom helper.\n    else {\n        EditorGUILayout.BeginHorizontal();\n        EditorGUILayout.LabelField(\"Custom Helper\", EditorStyles.boldLabel);\n        this.selectedHelper = EditorGUILayout.ObjectField(this.selectedHelper, typeof(MonoBehaviour), true);\n        EditorGUILayout.EndHorizontal();\n\n        // If the custom helper is not set, display an error message.\n        if (this.selectedHelper == null) {\n            EditorGUILayout.HelpBox(\"Custom helper not set.\", MessageType.Error);\n        }\n    }\n}", "CodeBleu_score": 36.84665985839691}, {"code": "public void Draw(){\n\t    // If a helper type is selected, display a popup menu for selecting a helper type.\n    if (selectedHelperTypeIndex > 0) {\n        EditorGUI.BeginChangeCheck();\n        selectedHelperTypeIndex = EditorGUILayout.Popup(\"Helper Type\", selectedHelperTypeIndex, helperTypeOptions);\n        if (EditorGUI.EndChangeCheck()) {\n            // If the selected helper type index is not the last option, set the selected helper type and clear the custom helper.\n            if (selectedHelperTypeIndex != helperTypeOptions.Length - 1) {\n                selectedHelperType = helperTypes[selectedHelperTypeIndex];\n                customHelper = null;\n            }\n            // Otherwise, if the selected helper type index is the last option, clear the selected helper type and set the custom helper to null.\n            else {\n                selectedHelperType = null;\n                customHelper = null;\n            }\n        }\n    }\n    // Otherwise, if no helper type is selected, display a field for a custom helper.\n    else {\n        EditorGUI.BeginChangeCheck();\n        customHelper = (MonoBehaviour)EditorGUILayout.ObjectField(\"Custom Helper\", customHelper, typeof(MonoBehaviour), true);\n        if (EditorGUI.EndChangeCheck()) {\n            // If the custom helper is not set, clear the selected helper type.\n            if (customHelper == null) {\n                selectedHelperType = null;\n            }\n            // Otherwise, if the custom helper is set, clear the selected helper type index.\n            else {\n                selectedHelperTypeIndex = -1;\n            }\n        }\n    }\n    // If the selected helper type is not set, display an error message.\n    if (selectedHelperType == null && customHelper == null) {\n        EditorGUILayout.HelpBox(\"No helper type is selected.\", MessageType.Error);\n    }\n}", "CodeBleu_score": 36.30552258877703}, {"code": "public void Draw(){\n\t\t// Display a popup for selecting a helper type.\n\tvar helperTypeNames = GetHelperTypeNames();\n\tvar selectedIndex = helperTypeNames.IndexOf(helperType.stringValue);\n\tvar newSelectedIndex = EditorGUILayout.Popup(\"Helper\", selectedIndex, helperTypeNames);\n\tif (newSelectedIndex != selectedIndex) {\n\t\t// If the selected helper type changed, update the selected helper type string.\n\t\thelperType.stringValue = helperTypeNames[newSelectedIndex];\n\t\t// If the selected helper type is not a custom helper, clear the custom helper string.\n\t\tif (helperType.stringValue != \"Custom\") {\n\t\t\tcustomHelper.stringValue = null;\n\t\t}\n\t}\n\t// If no helper type is selected, display a field for a custom helper.\n\tif (helperType.stringValue == \"Custom\") {\n\t\tEditorGUILayout.PropertyField(customHelper);\n\t\tif (customHelper.stringValue == null) {\n\t\t\t// If the custom helper is not set, display an error message.\n\t\t\tEditorGUILayout.HelpBox(\"A custom helper must be set.\", MessageType.Error);\n\t\t}\n\t}\n}", "CodeBleu_score": 36.57636878852011}]}
{"instance_id": "957e0aaa6f72", "generation_result": [{"code": "public static void DisableAllLogs(){\n\t\tRemoveScriptingDefineSymbol(GeneralLoggingSymbol);\n\tRemoveScriptingDefineSymbol(ErrorLoggingSymbol);\n\tRemoveScriptingDefineSymbol(WarningLoggingSymbol);\n\tRemoveScriptingDefineSymbol(InfoLoggingSymbol);\n\tRemoveScriptingDefineSymbol(DebugLoggingSymbol);\n\tRemoveScriptingDefineSymbol(TraceLoggingSymbol);\n}", "CodeBleu_score": 26.329725437796597}, {"code": "public static void DisableAllLogs(){\n\t\t//Remove general logging symbol\n\tScriptingDefineSymbols.RemoveScriptingDefineSymbol(\"LOGGING\");\n\t\n\t//Remove specific logging symbols\n\tforeach(LogLevel logLevel in Enum.GetValues(typeof(LogLevel))) {\n\t\tScriptingDefineSymbols.RemoveScriptingDefineSymbol(logLevel.ToString());\n\t}\n}", "CodeBleu_score": 20.999873868081576}, {"code": "public static void DisableAllLogs(){\n\t\t//Remove general logging symbol\n\tScriptingDefineSymbols.RemoveScriptingDefineSymbol(\"LOGGING\");\n\t\n\t//Remove symbols for specific logs\n\tforeach (LogLevel logLevel in Enum.GetValues(typeof(LogLevel))) {\n\t\tScriptingDefineSymbols.RemoveScriptingDefineSymbol(logLevel.ToString());\n\t}\n\t\n\t//Remove symbols for logs above a certain level\n\tforeach (LogLevel logLevel in Enum.GetValues(typeof(LogLevel))) {\n\t\tScriptingDefineSymbols.RemoveScriptingDefineSymbol(logLevel.ToString().ToUpper() + \"_AND_ABOVE\");\n\t}\n}", "CodeBleu_score": 42.684188669280644}]}
{"instance_id": "8a544c3d9513", "generation_result": [{"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t\tGameFrameworkComponent current = first;\n\twhile (current != null) {\n\t\tif (current.Value.GetType() == type) {\n\t\t\treturn current.Value;\n\t\t}\n\t\tcurrent = current.Next;\n\t}\n\treturn null;\n}", "CodeBleu_score": 64.77957021812813}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t  GameFrameworkComponent current = this.firstComponent;\n  while (current != null) {\n    if (current.Value.GetType() == type) {\n      return current.Value;\n    }\n    current = current.nextComponent;\n  }\n  return null;\n}", "CodeBleu_score": 67.91016308850698}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t    GameFrameworkComponent current = this.firstComponent;\n    while (current != null) {\n        if (current.Value.GetType() == type) {\n            return current.Value;\n        }\n        current = current.Next;\n    }\n    return null;\n}", "CodeBleu_score": 71.99848979528383}]}
{"instance_id": "ec304512c0e4", "generation_result": [{"code": "public static void Shutdown(ShutdownType shutdownType){\n\t    Log.Info(\"Shutting down game framework...\");\n    BaseComponent.Shutdown();\n    s_GameFrameworkComponents.Clear();\n\n    switch (shutdownType) {\n        case ShutdownType.None:\n            break;\n        case ShutdownType.Restart:\n            SceneManager.LoadScene(SceneManager.GetActiveScene().name);\n            break;\n        case ShutdownType.Quit:\n            Application.Quit();\n            break;\n        default:\n            Log.Error(\"Invalid shutdown type: \" + shutdownType);\n            break;\n    }\n}", "CodeBleu_score": 28.917328784961622}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\t\tLog.Info(\"Shutdown: \" + shutdownType);\n\n\tif (s_BaseComponent != null) {\n\t\ts_BaseComponent.Shutdown();\n\t}\n\n\ts_GameFrameworkComponents.Clear();\n\n\tswitch (shutdownType) {\n\t\tcase ShutdownType.Restart:\n\t\t\tSceneManager.LoadScene(SceneManager.GetActiveScene().name);\n\t\t\tbreak;\n\t\tcase ShutdownType.Quit:\n\t\t\tApplication.Quit();\n\t\t\tbreak;\n\t\tcase ShutdownType.None:\n\t\t\tbreak;\n\t}\n}", "CodeBleu_score": 23.419294468746223}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\t    switch (shutdownType) {\n        case ShutdownType.None:\n            Log.Info(\"Shutdown: None\");\n            break;\n        case ShutdownType.Restart:\n            Log.Info(\"Shutdown: Restart\");\n            s_GameFrameworkComponents.Clear();\n            SceneManager.LoadScene(SceneManager.GetActiveScene().name);\n            break;\n        case ShutdownType.Quit:\n            Log.Info(\"Shutdown: Quit\");\n            s_GameFrameworkComponents.Clear();\n            Application.Quit();\n            break;\n    }\n}", "CodeBleu_score": 34.59579450068986}]}
{"instance_id": "5c78a1d4f59d", "generation_result": [{"code": "protected override void Awake(){\n\t    base.Awake();\n\n    m_ConfigManager = GameFrameworkEntry.GetModule<IConfigManager>();\n    if (m_ConfigManager == null) {\n        Log.Fatal(\"Config manager is invalid.\");\n        return;\n    }\n\n    m_ConfigManager.ReadDataSuccess += OnReadDataSuccess;\n    m_ConfigManager.ReadDataFailure += OnReadDataFailure;\n\n    if (m_EnableLoadConfigUpdateEvent) {\n        m_ConfigManager.LoadConfigUpdateSuccess += OnLoadConfigUpdateSuccess;\n        m_ConfigManager.LoadConfigUpdateFailure += OnLoadConfigUpdateFailure;\n        m_ConfigManager.LoadConfigUpdateStart += OnLoadConfigUpdateStart;\n        m_ConfigManager.LoadConfigUpdateCanceled += OnLoadConfigUpdateCanceled;\n    }\n\n    if (m_EnableLoadConfigDependencyAssetEvent) {\n        m_ConfigManager.LoadConfigDependencyAssetStart += OnLoadConfigDependencyAssetStart;\n        m_ConfigManager.LoadConfigDependencyAssetUpdate += OnLoadConfigDependencyAssetUpdate;\n        m_ConfigManager.LoadConfigDependencyAssetSuccess += OnLoadConfigDependencyAssetSuccess;\n        m_ConfigManager.LoadConfigDependencyAssetFailure += OnLoadConfigDependencyAssetFailure;\n    }\n}", "CodeBleu_score": 76.59753163433452}, {"code": "protected override void Awake(){\n\t    base.Awake();\n\n    m_ConfigManager = GameFrameworkEntry.GetModule<IConfigManager>();\n    if (m_ConfigManager == null) {\n        Log.Fatal(\"Config manager is invalid.\");\n        return;\n    }\n\n    m_ConfigManager.ReadDataSuccess += OnReadDataSuccess;\n    m_ConfigManager.ReadDataFailure += OnReadDataFailure;\n    if (m_EnableLoadConfigUpdateEvent) {\n        m_ConfigManager.LoadConfigUpdateSuccess += OnLoadConfigUpdateSuccess;\n        m_ConfigManager.LoadConfigUpdateFailure += OnLoadConfigUpdateFailure;\n    }\n    if (m_EnableLoadConfigDependencyAssetEvent) {\n        m_ConfigManager.LoadConfigDependencyAssetSuccess += OnLoadConfigDependencyAssetSuccess;\n        m_ConfigManager.LoadConfigDependencyAssetFailure += OnLoadConfigDependencyAssetFailure;\n    }\n}", "CodeBleu_score": 81.68775227558437}, {"code": "protected override void Awake(){\n\t    base.Awake();\n\n    configManager = GameFrameworkEntry.GetModule<IConfigManager>();\n    if (configManager == null) {\n        Log.Fatal(\"Config manager is invalid.\");\n        return;\n    }\n\n    configManager.ReadDataSuccess += OnReadDataSuccess;\n    configManager.ReadDataFailure += OnReadDataFailure;\n\n    if ((loadType & LoadType.Update) > 0) {\n        configManager.UpdateDataSuccess += OnUpdateDataSuccess;\n        configManager.UpdateDataFailure += OnUpdateDataFailure;\n    }\n\n    if ((loadType & LoadType.DependencyAsset) > 0) {\n        configManager.LoadDependencyAssetSuccess += OnLoadDependencyAssetSuccess;\n        configManager.LoadDependencyAssetFailure += OnLoadDependencyAssetFailure;\n    }\n}", "CodeBleu_score": 64.01837122555357}]}
{"instance_id": "fbb36ff9d552", "generation_result": [{"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t\t// Check if the config asset is a TextAsset.\n\tTextAsset configTextAsset = configAsset as TextAsset;\n\tif(configTextAsset == null) {\n\t\t// Log a warning.\n\t\tLog.Warning(\"The config asset is not a TextAsset!\");\n\t\t// Return failure.\n\t\treturn false;\n\t}\n\t// Check if the config asset name ends with a specific byte extension.\n\tif(configAssetName.EndsWith(\".bytes\")) {\n\t\t// Parse the data as bytes.\n\t\tconfigManager.ParseData(configTextAsset.bytes, userData);\n\t}\n\t// Otherwise...\n\telse {\n\t\t// Parse the data as text.\n\t\tconfigManager.ParseData(configTextAsset.text, userData);\n\t}\n\t// Return success.\n\treturn true;\n}", "CodeBleu_score": 61.950852659102516}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t\tif (configAsset is TextAsset textAsset) {\n\t\tif (configAssetName.EndsWith(\".bytes\")) {\n\t\t\tconfigManager.ParseData(textAsset.bytes, userData);\n\t\t} else {\n\t\t\tconfigManager.ParseData(textAsset.text, userData);\n\t\t}\n\t\treturn true;\n\t} else {\n\t\tLog.Warning(\"The config asset is not a TextAsset.\");\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 51.20393834239222}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t\tif (configAsset is TextAsset textAsset) {\n\t\tif (configAssetName.EndsWith(\".json\", StringComparison.OrdinalIgnoreCase)) {\n\t\t\treturn configManager.ParseData(textAsset.bytes, userData);\n\t\t}\n\t\telse {\n\t\t\treturn configManager.ParseData(textAsset.text, userData);\n\t\t}\n\t}\n\telse {\n\t\tLog.Warning(\"Invalid config asset type for TextAssetConfigReader. Expected TextAsset.\");\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 58.13922733425792}]}
{"instance_id": "84d744c480ca", "generation_result": [{"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t    try {\n        using (MemoryStream memoryStream = new MemoryStream(configBytes, startIndex, length)) {\n            using (BinaryReader binaryReader = new BinaryReader(memoryStream)) {\n                while (memoryStream.Position < memoryStream.Length) {\n                    string configName = binaryReader.ReadString();\n                    string configValue = binaryReader.ReadString();\n                    if (!configManager.AddConfig(configName, configValue)) {\n                        Log.Warning(\"Config with name {0} and value {1} could not be added to the config manager.\", configName, configValue);\n                        return false;\n                    }\n                }\n            }\n        }\n    } catch (Exception e) {\n        Log.Warning(e);\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 63.950580688910186}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t\ttry {\n\t\tusing (MemoryStream memoryStream = new MemoryStream(configBytes, startIndex, length)) {\n\t\t\tusing (BinaryReader binaryReader = new BinaryReader(memoryStream)) {\n\t\t\t\twhile (memoryStream.Position < memoryStream.Length) {\n\t\t\t\t\tstring configName = binaryReader.ReadString();\n\t\t\t\t\tstring configValue = binaryReader.ReadString();\n\t\t\t\t\tif (!configManager.AddConfig(configName, configValue)) {\n\t\t\t\t\t\tLog.Warning(\"Config name or value is invalid or duplicate: \" + configName + \" \" + configValue);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\tLog.Warning(e);\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 55.46633092797527}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t    // Create a MemoryStream and BinaryReader to read the data\n    MemoryStream memoryStream = new MemoryStream(configBytes, startIndex, length);\n    BinaryReader binaryReader = new BinaryReader(memoryStream);\n    // Read the number of configs\n    int configCount = binaryReader.ReadInt32();\n    // Loop through the configs\n    for (int i = 0; i < configCount; i++) {\n        // Read the config name\n        string configName = binaryReader.ReadString();\n        // Read the config value\n        string configValue = binaryReader.ReadString();\n        // Try to add the config to the config manager\n        if (!configManager.AddConfig(configName, configValue)) {\n            // If it failed, log a warning and return false\n            Log.Warning(\"Failed to add config \" + configName + \" with value \" + configValue + \" to config manager.\");\n            return false;\n        }\n    }\n    // If no errors occured, return true\n    return true;\n}", "CodeBleu_score": 43.82957078837474}]}
{"instance_id": "298bb6fa19a4", "generation_result": [{"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t    if (configManager == null || configAsset == null)\n        return;\n\n    ResourceComponent resourceComponent = configManager.GetComponent<ResourceComponent>();\n    if (resourceComponent != null)\n        resourceComponent.UnloadAsset(configAsset);\n}", "CodeBleu_score": 38.10883260406877}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t    ResourceComponent resourceComponent = configManager.ResourceComponent;\n    resourceComponent.UnloadAsset(configAsset);\n}", "CodeBleu_score": 42.86874955259209}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t  if (configManager == null) {\n    throw new System.ArgumentNullException(\"configManager\");\n  }\n  if (configAsset == null) {\n    throw new System.ArgumentNullException(\"configAsset\");\n  }\n\n  ResourceComponent resourceComponent = configManager.GetResourceComponent();\n  if (resourceComponent == null) {\n    throw new System.InvalidOperationException(\"Resource component not found.\");\n  }\n\n  resourceComponent.UnloadAsset(configAsset);\n}", "CodeBleu_score": 48.61562269536786}]}
{"instance_id": "fa2003d95e36", "generation_result": [{"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t\t\t\tActiveSceneChangedEventArgs e;\n\t\t\tReferencePool.Acquire(out e);\n\t\t\te.lastActiveScene = lastActiveScene;\n\t\t\te.activeScene = activeScene;\n\t\t\treturn e;\n\t\t}", "CodeBleu_score": 45.708629149072436}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t    var args = ReferencePool.Acquire<ActiveSceneChangedEventArgs>();\n    args.LastActiveScene = lastActiveScene;\n    args.ActiveScene = activeScene;\n    return args;\n}", "CodeBleu_score": 38.96117022853901}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t    var e = ReferencePool.Acquire<ActiveSceneChangedEventArgs>();\n    e.lastActiveScene = lastActiveScene;\n    e.activeScene = activeScene;\n    return e;\n}", "CodeBleu_score": 37.120807117539215}]}
{"instance_id": "aba13f34251c", "generation_result": [{"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t    if (string.IsNullOrEmpty(sceneAssetName)) {\n        Log.Error(\"Scene asset name is invalid.\");\n        return;\n    }\n\n    if (!sceneAssetName.StartsWith(\"Assets/\")) {\n        Log.Error(\"Scene asset name must start with \\\"Assets/\\\".\");\n        return;\n    }\n\n    if (!sceneAssetName.EndsWith(\".unity\")) {\n        Log.Error(\"Scene asset name must end with \\\".unity\\\".\");\n        return;\n    }\n\n    m_SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 69.2875361581564}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t\tif (string.IsNullOrEmpty(sceneAssetName)) {\n\t\tLog.Error(\"Scene asset name cannot be null or empty.\");\n\t\treturn;\n\t}\n\tif (!sceneAssetName.StartsWith(\"Assets/\") || !sceneAssetName.EndsWith(\".unity\")) {\n\t\tLog.Error(\"Scene asset name must start with \\\"Assets/\\\" and end with \\\".unity\\\".\");\n\t\treturn;\n\t}\n\tm_SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 62.082430347795146}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t    if (string.IsNullOrEmpty(sceneAssetName)) {\n        Log.Error(\"Scene asset name is null or empty.\");\n        return;\n    }\n\n    if (!sceneAssetName.StartsWith(\"Assets/\") || !sceneAssetName.EndsWith(\".unity\")) {\n        Log.Error(\"Scene asset name is invalid.\");\n        return;\n    }\n\n    m_SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 69.62202805314817}]}
{"instance_id": "3fe99fba3ce8", "generation_result": [{"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\tUE_LOG(LogHotPatcher, Log, TEXT(\"BinariesPatchFeatureModule Startup\"));\n\tFModuleManager::Get().OnModularFeatureRegistered().AddStatic(&FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n\tFModuleManager::Get().OnModularFeatureUnregistered().AddStatic(&FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n\tTArray<IBinariesDiffPatchFeature*> Features;\n\tIModularFeatures::Get().GetModularFeatureImplementations(IBinariesDiffPatchFeature::GetModularFeatureName(), Features);\n\tfor (IBinariesDiffPatchFeature* Feature : Features) {\n\t\tif (Feature) {\n\t\t\tFBinariesPatchFeatureModule::Get().AppendEnumeraters(Feature->GetFeatureName());\n\t\t}\n\t}\n}", "CodeBleu_score": 51.7244571188465}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t    // Get the modular features manager\n    IModularFeatures& ModularFeatures = IModularFeatures::Get();\n\n    // Register the binaries patch feature module with the modular features manager\n    ModularFeatures.RegisterModularFeature(BINARIES_PATCH_FEATURE_NAME, this);\n\n    // Append enumerators for each registered feature implementation\n    ModularFeatures.AppendEnumerators<EBinariesPatchFeature>(BINARIES_PATCH_FEATURE_NAME, this);\n\n    // Register callbacks for when modular features are registered or unregistered\n    ModularFeatures.OnModularFeatureRegistered().AddStatic(&FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n    ModularFeatures.OnModularFeatureUnregistered().AddStatic(&FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n}", "CodeBleu_score": 40.649137656853796}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t    // Retrieve registered feature implementations and append their names to the binaries patch feature enumerations\n    TArray<IBinariesDiffPatchFeature*> BinariesDiffPatchFeatureImplementations;\n    IModularFeatures::Get().GetModularFeatureImplementations<IBinariesDiffPatchFeature>(BinariesDiffPatchFeatureImplementations);\n    for (IBinariesDiffPatchFeature* BinariesDiffPatchFeatureImplementation : BinariesDiffPatchFeatureImplementations) {\n        if (BinariesDiffPatchFeatureImplementation != nullptr) {\n            EBinariesPatchFeature BinariesPatchFeature = EBinariesPatchFeature::None;\n            if (BinariesDiffPatchFeatureImplementation->GetFeatureName().Equals(TEXT(\"BinariesDiffPatchFeature\"))) {\n                BinariesPatchFeature = EBinariesPatchFeature::BinariesDiffPatchFeature;\n            }\n            if (BinariesPatchFeature != EBinariesPatchFeature::None) {\n                EBinariesPatchFeature::AppendEnumerators(BinariesPatchFeature);\n            }\n        }\n    }\n\n    // Set up callbacks for when modular features are registered or unregistered\n    IModularFeatures::Get().OnModularFeatureRegistered().AddStatic(&FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n    IModularFeatures::Get().OnModularFeatureUnregistered().AddStatic(&FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n}", "CodeBleu_score": 49.97460002942933}]}
{"instance_id": "c702cc0f74b5", "generation_result": [{"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t    return THotPatcherTemplateHelper::ParserPatchConfigByCommandline(Commandline,Token);\n}", "CodeBleu_score": 23.669545837178774}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t    return THotPatcherTemplateHelper::ParserPatchConfigByCommandline(Commandline,Token);\n}", "CodeBleu_score": 23.669545837178774}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t    return THotPatcherTemplateHelper::ParserPatchConfigByCommandline(Commandline,Token);\n}", "CodeBleu_score": 23.669545837178774}]}
{"instance_id": "6a6382275b1d", "generation_result": [{"code": "bool CommandletHelper::IsCookCommandlet(){\n\t\tif (CommandletName.IsEmpty()) {\n\t\treturn false;\n\t}\n\treturn CommandletName.Equals(TEXT(\"cook\"), ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 17.915557528773597}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\t\tFString CommandletName = CommandletHelper::GetCommandletArg(TEXT(\"CommandletName\"));\n\treturn !CommandletName.IsEmpty() && CommandletName.Equals(TEXT(\"cook\"), ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 29.92958002104092}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\t\tif (CommandletName.IsEmpty()) {\n\t\treturn false;\n\t}\n\treturn CommandletName.Equals(\"cook\", ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 13.921663514438448}]}
{"instance_id": "6888ed47b6be", "generation_result": [{"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t\tFString CmdLine = Params;\n\tFString CommandletName;\n\tFParse::Value(CmdLine, TEXT(\"CommandletName=\"), CommandletName);\n\n\tif (CommandletName.IsEmpty()) {\n\t\tCommandletName = TEXT(\"Unknown\");\n\t}\n\n\tFString ProjectName = GetDefault<UHotPatcherSettings>()->ProjectName;\n\tif (!ProjectName.IsEmpty()) {\n\t\tProjectName += TEXT(\"-\");\n\t}\n\n\tProjectName += CommandletName;\n\n\tFCounter Counter;\n\tCounter.Processor = FPlatformProcess::GetProcessorCount();\n\tCounter.Init(ProjectName, FCommandLine::Get());\n\tCounter.Process();\n}", "CodeBleu_score": 44.57623670001314}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t\tFString CommandletName;\n\tFParse::Value(*Params, TEXT(\"CommandletName=\"), CommandletName);\n\tif (CommandletName.IsEmpty()) {\n\t\tCommandletName = GetDefault<UHotPatcherSettings>()->GetProjectName();\n\t}\n\telse {\n\t\tCommandletName = FString::Printf(TEXT(\"%s_%s\"), *GetDefault<UHotPatcherSettings>()->GetProjectName(), *CommandletName);\n\t}\n\n\tFCountServerlessWrapper Counter;\n\tCounter.Processor = FCountServerlessWrapper::MakeCurrentProject();\n\tCounter.Init(CommandletName);\n\tCounter.Process();\n}", "CodeBleu_score": 38.601784983339776}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t\tFString CommandletName;\n\tFParse::Value(FCommandLine::Get(), TEXT(\"CommandletName=\"), CommandletName);\n\tif (CommandletName.IsEmpty()) {\n\t\tCommandletName = TEXT(\"Unknown\");\n\t}\n\t\n\tFString ProjectName = FString::Printf(TEXT(\"%s (%s)\"), *GetDefault<UHotPatcherSettings>()->ProjectName, *CommandletName);\n\tFCountServerlessWrapper Counter(ProjectName, TEXT(\"UE4\"));\n\tCounter.Processor = TEXT(\"Commandlet\");\n\tCounter.Init();\n\tCounter.MakeServerRequestInfo();\n\tCounter.MakeCurrentProject();\n\tCounter.Process();\n}", "CodeBleu_score": 41.12496519947066}]}
{"instance_id": "c467af995f29", "generation_result": [{"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\treturn TargetPlatform->PlatformName().StartsWith(\"IOS\") || TargetPlatform->PlatformName().StartsWith(\"Mac\") || TargetPlatform->PlatformName().StartsWith(\"TVOS\");\n}", "CodeBleu_score": 17.964153820631406}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\tbool result = false;\n\tif (TargetPlatform) {\n\t\tFString PlatformName = TargetPlatform->PlatformName();\n\t\tif (PlatformName.StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase)\n\t\t\t|| PlatformName.StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase)\n\t\t\t|| PlatformName.StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase)\n\t\t\t) {\n\t\t\tresult = true;\n\t\t}\n\t}\n\treturn result;\n}", "CodeBleu_score": 48.77325391680358}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\tbool bIsAppleMetalPlatform = false;\n\tif (TargetPlatform != nullptr) {\n\t\tFString PlatformName = TargetPlatform->PlatformName();\n\t\tbIsAppleMetalPlatform = PlatformName.StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase) ||\n\t\t\tPlatformName.StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase) ||\n\t\t\tPlatformName.StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase);\n\t}\n\treturn bIsAppleMetalPlatform;\n}", "CodeBleu_score": 46.82295218860774}]}
{"instance_id": "3df342b1c6f8", "generation_result": [{"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t\tif (Object->IsA(UObject::StaticClass())) {\n\t\tconst UObject* ObjectOuter = Object->GetOuter();\n\t\tif (ObjectOuter) {\n\t\t\tconst UObject* Outermost = ObjectOuter->GetOutermost();\n\t\t\tif (Outermost && Outermost->IsA(UPackage::StaticClass())) {\n\t\t\t\tFString AssetPathName = Outermost->GetPathName();\n\t\t\t\tif (PackageObjectsMap.FindOrAdd(AssetPathName).Add(Object) && CookerAssetsSet.Contains(AssetPathName) == false && AllAssetsSet.Contains(AssetPathName) && IsAlwaysPostLoadClasses.Contains(Object->GetClass()) == false) {\n\t\t\t\t\tFreezeObjects.Add(Object);\n\t\t\t\t\tObject->ClearFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 45.9505558467882}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t\tif (Object) {\n\t\tconst UObject* ObjectOuter{ Object->GetOuter() };\n\t\tif (ObjectOuter) {\n\t\t\tconst UObject* Outermost{ ObjectOuter->GetOutermost() };\n\t\t\tif (Outermost) {\n\t\t\t\tFName AssetPathName{ Outermost->GetPathName() };\n\t\t\t\tif (AssetPathName.IsValid() && !AssetPathName.IsNone()) {\n\t\t\t\t\tif (!CookerAssetsSet.Contains(AssetPathName) && AllAssetsSet.Contains(AssetPathName) && !IsAlwaysPostLoadClasses.Contains(Object->GetClass())) {\n\t\t\t\t\t\tPackageObjectsMap.FindOrAdd(AssetPathName).Add(const_cast<UObject*>(Object));\n\t\t\t\t\t\tFreezeObjects.Add(const_cast<UObject*>(Object));\n\t\t\t\t\t\tObject->ClearFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 47.61346288620817}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t\tif (!Object) {\n\t\treturn;\n\t}\n\tconst UObject* ObjectOuter = Object->GetOuter();\n\tif (ObjectOuter) {\n\t\tif (ObjectOuter->IsA(UPackage::StaticClass())) {\n\t\t\tUPackage* Package = (UPackage*)ObjectOuter;\n\t\t\tif (Package->IsValidLowLevelFast()) {\n\t\t\t\tconst FName AssetPathName = Package->GetPathName();\n\t\t\t\tif (!CookerAssetsSet.Contains(AssetPathName)) {\n\t\t\t\t\tif (!IsAlwaysPostLoadClasses.Contains(Object->GetClass())) {\n\t\t\t\t\t\tPackageObjectsMap.FindOrAdd(AssetPathName).Add(Object);\n\t\t\t\t\t\tFreezeObjects.Add(Object);\n\t\t\t\t\t\tObject->ClearFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 49.34737778113829}]}
{"instance_id": "fac8b2878c3c", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\t\tFCompositeBuffer& BulkData = Context.BulkData;\n\t\tFCompositeBuffer& ExportsBuffers = Context.ExportsBuffers;\n\n\t\tfor (FRecord::FRecordBulkDataIterator It(Record); It; ++It)\n\t\t{\n\t\t\tFRecord::FRecordBulkData& BulkRecord = *It;\n\t\t\tif (BulkRecord.Info.BulkDataFlags & BULKDATA_ForceInlinePayload)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (BulkRecord.Info.BulkDataFlags & BULKDATA_PayloadAtEnd)\n\t\t\t{\n\t\t\t\t// If this bulk data is at the end of the record, add it to the bulk data buffer\n\t\t\t\tFRecord::FRecordBulkData* BulkRecordPtr = &BulkRecord;\n\t\t\t\tBulkData.Add(BulkRecordPtr);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// If this bulk data is inline, add it to the exports buffer\n\t\t\t\tFRecord::FRecordBulkData* BulkRecordPtr = &BulkRecord;\n\t\t\t\tExportsBuffers[BulkRecord.Info.MultiOutputIndex].Add(BulkRecordPtr);\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 42.09146488310457}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\tfor (const FRecordBulkData& BulkRecord : Record.BulkData)\n\t{\n\t\tif (BulkRecord.Info.BulkDataFlags & BULKDATA_ForceInlinePayload)\n\t\t{\n\t\t\t// This bulk data is forced inline, so we don't need to do anything\n\t\t\tcontinue;\n\t\t}\n\n\t\t// If this bulk data is appended to an export, add it to the export buffer list\n\t\tif (BulkRecord.Info.BulkDataFlags & BULKDATA_ForceInlinePayload)\n\t\t{\n\t\t\tContext.ExportsBuffers[BulkRecord.Info.MultiOutputIndex].Add(BulkRecord.Info.BulkDataName, BulkRecord.Data);\n\t\t}\n\t\t// Otherwise, create an output file entry for it\n\t\telse\n\t\t{\n\t\t\tFOutputFileInfo& FileInfo = Context.OutputFiles.Emplace_GetRef();\n\t\t\tFileInfo.Filename = BulkRecord.Info.BulkDataName;\n\t\t\tFileInfo.Buffer = BulkRecord.Data;\n\t\t\tFileInfo.Regions = BulkRecord.Info.BulkDataFlags & BULKDATA_NoSerialize ? TArray<FRegion>() : BulkRecord.Info.BulkDataRegions;\n\t\t\tFileInfo.bSidecar = (BulkRecord.Info.BulkDataFlags & BULKDATA_ForceStandalone) == 0;\n\t\t\tFileInfo.bHash = (BulkRecord.Info.BulkDataFlags & BULKDATA_NoSerialize) == 0;\n\t\t}\n\t}\n}", "CodeBleu_score": 54.71732172922077}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\t// Iterate through each bulk data record in the record.\n\tfor (auto& BulkRecord : Record.BulkData)\n\t{\n\t\t// If the bulk data is appended to exports, add the export buffer to the corresponding export buffer list in the context.\n\t\tif (BulkRecord.Info.bIsAppendedToExports)\n\t\t{\n\t\t\tContext.ExportsBuffers[BulkRecord.Info.MultiOutputIndex].Add(BulkRecord.Buffer);\n\t\t}\n\t\t// Otherwise, create an output file entry in the context's output files, setting its properties such as filename, buffer, regions, and flags for sidecar status and hash contribution.\n\t\telse\n\t\t{\n\t\t\t// Create a new output file entry.\n\t\t\tFOutputFile& OutputFile = Context.OutputFiles.Emplace_GetRef();\n\n\t\t\t// Set the output file's filename.\n\t\t\tOutputFile.Filename = BulkRecord.Info.BulkDataName;\n\n\t\t\t// Set the output file's buffer.\n\t\t\tOutputFile.Buffer = BulkRecord.Buffer;\n\n\t\t\t// Set the output file's regions.\n\t\t\tOutputFile.Regions = MoveTemp(BulkRecord.Regions);\n\n\t\t\t// Set the output file's flags for sidecar status and hash contribution.\n\t\t\tOutputFile.Flags = (BulkRecord.Info.bIsSidecar ? EOutputFileFlags::Sidecar : EOutputFileFlags::None) | (BulkRecord.Info.bContributeToHash ? EOutputFileFlags::ContributeToHash : EOutputFileFlags::None);\n\t\t}\n\t}\n}", "CodeBleu_score": 55.41742252111632}]}
{"instance_id": "bf46051105c9", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t\tif (Context.bIsDiff) {\n\t\tif (Context.bIsExportArchiveCompleted) {\n\t\t\treturn;\n\t\t}\n\t\tContext.bIsExportArchiveCompleted = true;\n\t}\n\tFBufferArchive Footer;\n\tFooter << FPackageFileTag::GetTag();\n\tRecord.Footer = TSharedPtr<FBufferArchive>(new FBufferArchive(MoveTemp(Footer)));\n}", "CodeBleu_score": 35.110414099874944}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t\tif (Record.IsExport()) {\n\t\tif (Context.ExportsBuffers[Record.PackageIndex].Num() > 0) {\n\t\t\tif (Context.ExportsBuffers[Record.PackageIndex][Context.ExportsBuffers[Record.PackageIndex].Num() - 1].Tag == FFileRegion::EFileRegionTag::Footer) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tFBufferArchive Footer;\n\t\t\tFooter << FFileRegion::EFileRegionTag::Footer;\n\t\t\tContext.ExportsBuffers[Record.PackageIndex].Add(FFileRegion(Footer));\n\t\t}\n\t}\n}", "CodeBleu_score": 37.10103099318892}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t\tif (Context.bIsFooterWritten) {\n\t\treturn;\n\t}\n\n\tContext.bIsFooterWritten = true;\n\tTArray<FFileRegion> FooterRegions;\n\tfor (auto& Package : Record.Packages) {\n\t\tif (Context.ExportsBuffers.Num() <= Package.ExportIndex) {\n\t\t\tcontinue;\n\t\t}\n\t\tFBufferArchive& ExportBuffer = *Context.ExportsBuffers[Package.ExportIndex];\n\t\tif (ExportBuffer.Tell() == 0) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tFBufferArchive FooterBuffer;\n\t\tFExportBundleHeader Header;\n\t\tHeader.Magic = PACKAGE_FILE_TAG;\n\t\tHeader.Version = PACKAGE_FILE_VERSION;\n\t\tHeader.TotalHeaderSize = sizeof(Header);\n\t\tHeader.FolderName = Package.FolderName;\n\t\tHeader.PackageName = Package.PackageName;\n\t\tHeader.ExportCount = 0;\n\t\tHeader.BulkDataFlags = 0;\n\t\tHeader.PackageFlags = 0;\n\t\tHeader.NameCount = 0;\n\t\tHeader.NameOffset = 0;\n\n\t\tFooterBuffer << Header;\n\t\tFooterRegions.Add(FFileRegion(FooterBuffer.Tell(), FooterBuffer.Tell()));\n\t\tExportBuffer.Append(FooterBuffer);\n\t}\n\n\tContext.FooterRegions = MoveTemp(FooterRegions);\n}", "CodeBleu_score": 45.903574596915966}]}
{"instance_id": "c0966eddf1ee", "generation_result": [{"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\tUGDCharacterMovementComponent * GDCharacterMovementComponent = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\tif (GDCharacterMovementComponent) {\n\t\tbSprinting = GDCharacterMovementComponent->bWantsToRun;\n\t\tbAimingDownSights = GDCharacterMovementComponent->bAimingDownSights;\n\t}\n}", "CodeBleu_score": 74.73759580668901}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\n\tUGDCharacterMovementComponent * GDCharacterMovementComponent = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\n\tif (GDCharacterMovementComponent) {\n\t\tbSprinting = GDCharacterMovementComponent->bIsSprinting;\n\t\tbAimingDownSights = GDCharacterMovementComponent->bIsAimingDownSights;\n\t}\n}", "CodeBleu_score": 74.93781675057348}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\tif (UGDCharacterMovementComponent * GDCharacterMovement = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement())) {\n\t\tbWantsToSprint = GDCharacterMovement->bWantsToSprint;\n\t\tbWantsToADS = GDCharacterMovement->bWantsToADS;\n\t}\n}", "CodeBleu_score": 66.63456910464683}]}
{"instance_id": "f73106356e9d", "generation_result": [{"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t    return NULL;\n}", "CodeBleu_score": 5.671458607142626}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t    return NULL;\n}", "CodeBleu_score": 5.671458607142626}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t    return NULL;\n}", "CodeBleu_score": 5.671458607142626}]}
{"instance_id": "a581424c2b31", "generation_result": [{"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (ASC) {\n\t\tASC->OnActiveGameplayEffectAddedDelegateToSelf.RemoveAll(this);\n\t\tASC->RegisterGameplayTagEvent(CooldownTag, EGameplayTagEventType::NewOrRemoved).RemoveAll(this);\n\t}\n\n\tMarkAsGarbage = true;\n\tbReadyToDestroy = true;\n}", "CodeBleu_score": 32.31777562738189}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (ASC && ASC->IsValidLowLevel()) {\n\t\tASC->OnActiveGameplayEffectAddedDelegateToSelf.RemoveAll(this);\n\t\tASC->RegisterGameplayTagEvent(CooldownTag, EGameplayTagEventType::NewOrRemoved).RemoveAll(this);\n\t}\n\t\n\tReadyToDestroy = true;\n\tMarkAsGarbage();\n}", "CodeBleu_score": 37.41928239435915}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (ASC) {\n\t\tASC->OnActiveGameplayEffectAddedDelegateToSelf.RemoveAll(this);\n\t\tASC->RegisterGameplayTagEvent(CooldownTag, EGameplayTagEventType::NewOrRemoved).RemoveAll(this);\n\t\tASC->RegisterGameplayTagEvent(CooldownTag, EGameplayTagEventType::NewOrRemoved).RemoveAll(this);\n\t}\n\n\tMarkAsGarbage();\n}", "CodeBleu_score": 51.822218297539415}]}
{"instance_id": "5029df3a2033", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tUAbilitySystemComponent* AbilitySystemComponent = EffectRemoved.Spec.GetAbilitySystemComponent();\n\tFGameplayTag EffectGameplayTag = EffectRemoved.Spec.Def->GetGameplayEffectTag();\n\tFGameplayTagContainer AssetTags = EffectRemoved.Spec.Def->AssetTags;\n\tFGameplayTagContainer GrantedTags = EffectRemoved.Spec.GetAllGrantedTags();\n\tFGameplayTagContainer AssetTags = EffectRemoved.Spec.Def->AssetTags;\n\tbool HasTag = AssetTags.HasTagExact(EffectGameplayTag);\n\tbool HasTag = GrantedTags.HasTagExact(EffectGameplayTag);\n\tAbilitySystemComponent->OnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, -1);\n}", "CodeBleu_score": 49.84565081870754}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tUAbilitySystemComponent* AbilitySystemComponent = EffectRemoved.Spec.GetAbilitySystemComponent();\n\tif (AbilitySystemComponent == NULL) {\n\t\treturn;\n\t}\n\n\tif (EffectRemoved.Spec.Def->GetGameplayEffectType() != EGameplayEffectType::Continuous) {\n\t\treturn;\n\t}\n\n\tif (EffectRemoved.Spec.Def->GetDurationPolicy() != EGameplayEffectDurationType::Infinite) {\n\t\treturn;\n\t}\n\n\tif (EffectRemoved.Spec.Def->GetStackingType() != EGameplayEffectStackingType::None) {\n\t\treturn;\n\t}\n\n\tif (EffectRemoved.Spec.Def->GetModifiedAttribute() != Attribute) {\n\t\treturn;\n\t}\n\n\tTArray<FGameplayTag> AssetTags = EffectRemoved.Spec.Def->AssetTags;\n\tTArray<FGameplayTag> GrantedTags = EffectRemoved.Spec.GetAllGrantedTags();\n\tif (!AssetTags.HasTagExact(EffectGameplayTag) && !GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\treturn;\n\t}\n\n\tFGameplayEffectSpecHandle EffectHandle = AbilitySystemComponent->GetActiveGameplayEffectSpecHandle(EffectRemoved.Handle);\n\tif (EffectHandle.IsValid()) {\n\t\tFGameplayEffectSpec* Spec = EffectHandle.Data.Get();\n\t\tif (Spec == NULL) {\n\t\t\treturn;\n\t\t}\n\n\t\tFGameplayEffectSpec::FStackCountChange StackCountChange;\n\t\tStackCountChange.StackCountChangeType = FGameplayEffectSpec::EStackCountChangeType::Remove;\n\t\tStackCountChange.StackCountChange = 1;\n\t\tAbilitySystemComponent->BroadcastGameplayEffectStackChange(EffectGameplayTag, EffectHandle, StackCountChange);\n\t}\n}", "CodeBleu_score": 43.14378210572231}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tUAbilitySystemComponent* AbilitySystemComponent = Cast<UAbilitySystemComponent>(EffectRemoved.GetOuter());\n\tif (!AbilitySystemComponent) {\n\t\treturn;\n\t}\n\n\tFGameplayTag EffectGameplayTag = EffectRemoved.Spec.GetTag();\n\tif (!EffectGameplayTag.IsValid()) {\n\t\treturn;\n\t}\n\n\tFGameplayTagContainer AssetTags = EffectRemoved.Spec.Def->GetAssetTags(EffectRemoved.Spec.GetLevel());\n\tFGameplayTagContainer GrantedTags = EffectRemoved.Spec.GetGrantedTags();\n\tif (!AssetTags.HasTagExact(EffectGameplayTag) && !GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\treturn;\n\t}\n\n\tFGameplayEffectSpecHandle EffectHandle = EffectRemoved.Handle;\n\tFGameplayTagContainer SpecAssetTags = EffectRemoved.Spec.GetAssetTags(EffectRemoved.Spec.GetLevel());\n\tFGameplayTagContainer SpecGrantedTags = EffectRemoved.Spec.GetGrantedTags();\n\tFGameplayTagContainer SpecAssetTagsToRemove = EffectRemoved.Spec.Def->InheritableGameplayEffectTags.Reject(EffectGameplayTag);\n\tFGameplayTagContainer SpecGrantedTagsToRemove = EffectRemoved.Spec.Def->InheritableGameplayEffectTags.Reject(EffectGameplayTag);\n\tFGameplayEffectStackCount StackCount = EffectRemoved.Spec.GetStackCount();\n\tFGameplayEffectStackCount StackCountChange = EffectRemoved.Spec.GetStackCountChange();\n\n\tFGameplayEffectSpecHandle EffectHandleCopy = EffectHandle;\n\tFGameplayTagContainer SpecAssetTagsCopy = SpecAssetTags;\n\tFGameplayTagContainer SpecGrantedTagsCopy = SpecGrantedTags;\n\tFGameplayTagContainer SpecAssetTagsToRemoveCopy = SpecAssetTagsToRemove;\n\tFGameplayTagContainer SpecGrantedTagsToRemoveCopy = SpecGrantedTagsToRemove;\n\tFGameplayEffectStackCount StackCountCopy = StackCount;\n\tFGameplayEffectStackCount StackCountChangeCopy = StackCountChange;\n\n\tAbilitySystemComponent->OnGameplayEffectStack", "CodeBleu_score": 41.84608521631164}]}
{"instance_id": "cb1d2823d203", "generation_result": [{"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t\tUAsyncTaskEffectStackChanged * ListenForGameplayEffectStackChange = NewObject<UAsyncTaskEffectStackChanged>();\n\tListenForGameplayEffectStackChange->AbilitySystemComponent = AbilitySystemComponent;\n\tListenForGameplayEffectStackChange->EffectGameplayTag = InEffectGameplayTag;\n\tif (ListenForGameplayEffectStackChange->AbilitySystemComponent.IsValid() && ListenForGameplayEffectStackChange->EffectGameplayTag.IsValid()) {\n\t\tListenForGameplayEffectStackChange->AbilitySystemComponent->OnAnyGameplayEffectRemovedDelegate.AddUObject(ListenForGameplayEffectStackChange, &UAsyncTaskEffectStackChanged::OnGameplayEffectStackChange);\n\t\tListenForGameplayEffectStackChange->AbilitySystemComponent->OnActiveGameplayEffectAddedDelegateToSelf.AddUObject(ListenForGameplayEffectStackChange, &UAsyncTaskEffectStackChanged::OnGameplayEffectStackChange);\n\t} else {\n\t\tListenForGameplayEffectStackChange->EndTask();\n\t\treturn nullptr;\n\t}\n\treturn ListenForGameplayEffectStackChange;\n}", "CodeBleu_score": 71.24348190681022}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t\tUAsyncTaskEffectStackChanged * AsyncTaskEffectStackChanged = NewObject<UAsyncTaskEffectStackChanged>();\n\tif (IsValid(AbilitySystemComponent) && InEffectGameplayTag.IsValid()) {\n\t\tAsyncTaskEffectStackChanged->AbilitySystemComponent = AbilitySystemComponent;\n\t\tAsyncTaskEffectStackChanged->EffectGameplayTag = InEffectGameplayTag;\n\t\tAbilitySystemComponent->OnAnyGameplayEffectRemovedDelegate.AddUObject(AsyncTaskEffectStackChanged, &UAsyncTaskEffectStackChanged::OnAnyGameplayEffectRemoved);\n\t\tAbilitySystemComponent->OnActiveGameplayEffectAddedDelegateToSelf.AddUObject(AsyncTaskEffectStackChanged, &UAsyncTaskEffectStackChanged::OnActiveGameplayEffectAdded);\n\t} else {\n\t\tAsyncTaskEffectStackChanged->EndTask();\n\t\treturn nullptr;\n\t}\n\treturn AsyncTaskEffectStackChanged;\n}", "CodeBleu_score": 60.396346890923255}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t    UAsyncTaskEffectStackChanged * ListenForGameplayEffectStackChange = NewObject<UAsyncTaskEffectStackChanged>();\n    if (ListenForGameplayEffectStackChange) {\n        ListenForGameplayEffectStackChange->AbilitySystemComponent = AbilitySystemComponent;\n        ListenForGameplayEffectStackChange->EffectGameplayTag = InEffectGameplayTag;\n        if (ListenForGameplayEffectStackChange->IsValid()) {\n            ListenForGameplayEffectStackChange->AbilitySystemComponent->OnAnyGameplayEffectRemovedDelegate().AddUObject(ListenForGameplayEffectStackChange, &UAsyncTaskEffectStackChanged::OnGameplayEffectRemoved);\n            ListenForGameplayEffectStackChange->AbilitySystemComponent->OnActiveGameplayEffectAddedDelegateToSelf.AddUObject(ListenForGameplayEffectStackChange, &UAsyncTaskEffectStackChanged::OnGameplayEffectAdded);\n        }\n        else {\n            ListenForGameplayEffectStackChange->EndTask();\n            return nullptr;\n        }\n    }\n    return ListenForGameplayEffectStackChange;\n}", "CodeBleu_score": 68.17634492333723}]}
{"instance_id": "6659c2592e93", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tFGameplayTagContainer AssetTags;\n\tFGameplayTagContainer GrantedTags;\n\tFGameplayTag EffectGameplayTag;\n\tFGameplayEffectSpecHandle EffectSpecHandle;\n\tint32 StackCountChange;\n\tint32 StackCount;\n\n\tStackCountChange = 0;\n\tStackCount = 0;\n\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\tEffectGameplayTag = FGameplayTag::RequestGameplayTag(TEXT(\"EffectGameplayTag\"));\n\tEffectSpecHandle = EffectRemoved.SpecHandle;\n\n\tif (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\tStackCountChange = EffectRemoved.StackCountChange;\n\t\tStackCount = EffectRemoved.StackCount;\n\t\tOnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectSpecHandle, StackCountChange, StackCount);\n\t}\n}", "CodeBleu_score": 64.01792107041717}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tUAbilitySystemComponent* ASC = EffectRemoved.Spec.GetAvatarActor()->FindComponentByClass<UAbilitySystemComponent>();\n\tif (ASC) {\n\t\tif (EffectRemoved.Spec.GetAllGrantedTags().HasTagExact(EffectGameplayTag) || EffectRemoved.Spec.GetAllAssetTags().HasTagExact(EffectGameplayTag)) {\n\t\t\tASC->OnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, -1);\n\t\t}\n\t}\n}", "CodeBleu_score": 48.33983583218958}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tUAbilitySystemComponent* ASC = EffectRemoved.Spec.GetAvatarActor()->FindComponentByClass<UAbilitySystemComponent>();\n\tif (ASC) {\n\t\tFGameplayTagContainer AssetTags = EffectRemoved.Spec.GetAllAssetTags();\n\t\tFGameplayTagContainer GrantedTags = EffectRemoved.Spec.GetAllGrantedTags();\n\t\tif (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\t\tASC->OnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, -1);\n\t\t}\n\t}\n}", "CodeBleu_score": 59.86431223415768}]}
{"instance_id": "a8f7dcc3f1fa", "generation_result": [{"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t}", "CodeBleu_score": 10.576843315760415}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t}", "CodeBleu_score": 10.576843315760415}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t}", "CodeBleu_score": 10.576843315760415}]}
{"instance_id": "72a7ce4b848c", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t}", "CodeBleu_score": 5.5821451492039476}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t}", "CodeBleu_score": 5.5821451492039476}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t}", "CodeBleu_score": 5.5821451492039476}]}
{"instance_id": "cc1cdd579bd4", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tif (AbilityEnded && bStopMontageOnAbilityEnd) {\n\t\tAbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(EventTagContainer);\n\t\tAbility->OnGameplayAbilityCancelled.Remove(CancelledHandle);\n\t\tAbilitySystemComponent->AbilityReplicatedEventDelegate.Remove(AbilityReplicatedHandle);\n\t\tStopPlayingMontage();\n\t}\n\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 54.7245780169678}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tif (AbilityEnded && bStopMontageOnAbilityEnd) {\n\t\tAbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(EventTagContainer);\n\t\tAbility->OnGameplayAbilityCancelled.Remove(CancelledHandle);\n\t\tStopPlayingMontage();\n\t}\n\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 46.923122865427445}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tif (AbilityEnded && StopMontageOnAbilityEnded) {\n\t\tStopPlayingMontage();\n\t}\n\n\tif (Ability) {\n\t\tAbility->OnGameplayAbilityCancelled.Remove(CancelledHandle);\n\t}\n\n\tif (AbilitySystemComponent.IsValid()) {\n\t\tAbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(EventTagContainerDelegateHandle);\n\t}\n\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 73.1742213147747}]}
{"instance_id": "5932070df16f", "generation_result": [{"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t    return false;\n}", "CodeBleu_score": 3.758120540592745}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t    return false;\n}", "CodeBleu_score": 3.758120540592745}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t\treturn false;\n}", "CodeBleu_score": 3.758120540592659}]}
{"instance_id": "7049be7f0c75", "generation_result": [{"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tAActor* TargetActor;\n\tUBlackboardComponent* BlackBoardComp;\n\tbool IsInRange;\n\tbool IsVisible;\n\n\tBlackBoardComp = OwnerComp.GetBlackboardComponent();\n\tif (BlackBoardComp == NULL) {\n\t\treturn;\n\t}\n\tTargetActor = Cast<AActor>(BlackBoardComp->GetValueAsObject(TargetActorKey.SelectedKeyName));\n\tif (TargetActor == NULL) {\n\t\treturn;\n\t}\n\tIsInRange = (OwnerComp.GetAIOwner()->GetPawn()->GetActorLocation() - TargetActor->GetActorLocation()).Size() <= MaxAttackRange;\n\tIsVisible = IsInRange && OwnerComp.GetAIOwner()->LineOfSightTo(TargetActor);\n\tBlackBoardComp->SetValueAsBool(IsInRangeAndVisibleKey.SelectedKeyName, IsVisible);\n}", "CodeBleu_score": 40.19427673859325}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tUBlackboardComponent* BlackBoardComp;\n\tAActor* TargetActor;\n\tbool bInRange;\n\tbool bHasLoS;\n\tfloat DistanceToTarget;\n\tbool bHasTarget;\n\n\tBlackBoardComp = OwnerComp.GetBlackboardComponent();\n\tif (BlackBoardComp == NULL) {\n\t\treturn;\n\t}\n\n\tTargetActor = Cast<AActor>(BlackBoardComp->GetValueAsObject(TargetActorKey.SelectedKeyName));\n\tif (TargetActor == NULL) {\n\t\treturn;\n\t}\n\n\tDistanceToTarget = FVector::Distance(OwnerComp.GetAIOwner()->GetPawn()->GetActorLocation(), TargetActor->GetActorLocation());\n\tbInRange = DistanceToTarget <= MaxAttackRange;\n\tbHasTarget = true;\n\tif (bInRange) {\n\t\tbHasLoS = MyController->LineOfSightTo(TargetActor);\n\t} else {\n\t\tbHasLoS = false;\n\t}\n\n\tBlackBoardComp->SetValueAsBool(InRangeKey.SelectedKeyName, bInRange);\n\tBlackBoardComp->SetValueAsBool(HasLoSKey.SelectedKeyName, bHasLoS);\n\tBlackBoardComp->SetValueAsBool(HasTargetKey.SelectedKeyName, bHasTarget);\n}", "CodeBleu_score": 48.29028236358953}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tUBlackboardComponent* BlackBoardComp;\n\tAActor* TargetActor;\n\tfloat DistanceToTarget;\n\n\tBlackBoardComp = OwnerComp.GetBlackboardComponent();\n\tif (BlackBoardComp) {\n\t\tTargetActor = Cast<AActor>(BlackBoardComp->GetValueAsObject(TargetActorKey.SelectedKeyName));\n\t\tif (TargetActor) {\n\t\t\tDistanceToTarget = (OwnerComp.GetAIOwner()->GetPawn()->GetActorLocation() - TargetActor->GetActorLocation()).Size();\n\t\t\tif (DistanceToTarget <= MaxAttackRange) {\n\t\t\t\tBlackBoardComp->SetValueAsBool(InRangeAndVisibleKey.SelectedKeyName, OwnerComp.GetAIOwner()->LineOfSightTo(TargetActor));\n\t\t\t} else {\n\t\t\t\tBlackBoardComp->SetValueAsBool(InRangeAndVisibleKey.SelectedKeyName, false);\n\t\t\t}\n\t\t}\n\t}\n\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n}", "CodeBleu_score": 52.539572611819075}]}
{"instance_id": "031bd0ec3e3c", "generation_result": [{"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tAAIController* AIOwner = OwnerComp.GetAIOwner();\n\tif (AIOwner == nullptr) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\tAPawn* Pawn = AIOwner->GetPawn();\n\tif (Pawn == nullptr) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\tUAttributeComponent* AttributeComp = Pawn->FindComponentByClass<UAttributeComponent>();\n\tif (AttributeComp == nullptr) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\tAttributeComp->ApplyHealthChange(AttributeComp->GetHealthMax(), EAttributeChangeReason::Heal);\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 49.068197269365264}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tAActor* AIOwner = OwnerComp.GetAIOwner();\n\tif (AIOwner) {\n\t\tUAttributeComponent* AttributeComp = AIOwner->FindComponentByClass<UAttributeComponent>();\n\t\tif (AttributeComp) {\n\t\t\tAttributeComp->ApplyHealthChange(AttributeComp->GetHealthMax());\n\t\t}\n\t}\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 60.49137934999583}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tAAIController* AIOwner = OwnerComp.GetAIOwner();\n\tif (AIOwner) {\n\t\tAPawn* AIPawn = AIOwner->GetPawn();\n\t\tif (AIPawn) {\n\t\t\tUAttributeComponent* AttributeComp = AIPawn->FindComponentByClass<UAttributeComponent>();\n\t\t\tif (AttributeComp) {\n\t\t\t\tAttributeComp->ApplyHealthChange(AttributeComp->GetHealthMax(), EAttributeChangeReason::Heal);\n\t\t\t}\n\t\t}\n\t}\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 55.381815966901726}]}
{"instance_id": "6cd6e778e91b", "generation_result": [{"code": "void USProjectileMovementComponent::BeginPlay(){\n\t    Super::BeginPlay();\n    GetWorld()->GetSubsystem<USTickablesSubsystem>()->RegisterComponent(this);\n}", "CodeBleu_score": 41.200377284678936}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\tGetWorld()->GetSubsystem<USTickablesSubsystem>()->RegisterComponent(this);\n}", "CodeBleu_score": 40.30073290366272}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\t    Super::BeginPlay();\n    GetWorld()->GetSubsystem<USTickablesSubsystem>()->RegisterComponent(this);\n}", "CodeBleu_score": 41.200377284678936}]}
{"instance_id": "e90ff27c7f16", "generation_result": [{"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t    Super::EndPlay(EndPlayReason);\n\n    if (GetWorld()) {\n        GetWorld()->GetSubsystem<USTickablesSubsystem>()->DeRegisterComponent(this);\n    }\n}", "CodeBleu_score": 57.23402022281163}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t    Super::EndPlay(EndPlayReason);\n\n    if (GetWorld() != NULL) {\n        GetWorld()->GetSubsystem<USTickablesSubsystem>()->DeRegisterComponent(this);\n    }\n}", "CodeBleu_score": 57.43619531564984}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t    Super::EndPlay(EndPlayReason);\n\n    if (GetWorld()) {\n        GetWorld()->GetSubsystem<USTickablesSubsystem>()->DeRegisterComponent(this);\n    }\n}", "CodeBleu_score": 57.23402022281163}]}
{"instance_id": "be3e542c07ea", "generation_result": [{"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\tif (bManagingSignificance) {\n\t\tif (!GetOwner()->Implements<USSignificanceInterface>()) {\n\t\t\tUE_LOG(LogSignificance, Warning, TEXT(\"USSignificanceComponent::BeginPlay: Owner does not implement USSignificanceInterface!\"));\n\t\t}\n\t\tif (bWaitOneFrame) {\n\t\t\tGetWorld()->GetTimerManager().SetTimerForNextTick(this, &USSignificanceComponent::RegisterWithManager);\n\t\t}\n\t\telse {\n\t\t\tRegisterWithManager();\n\t\t}\n\t}\n\tif (bManagingParticleSignificance) {\n\t\tTArray<UParticleSystemComponent*> ParticleSystemComponents;\n\t\tGetOwner()->GetComponents<UParticleSystemComponent>(ParticleSystemComponents);\n\t\tfor (UParticleSystemComponent* ParticleSystemComponent : ParticleSystemComponents) {\n\t\t\tParticleSystemComponent->bAutoManageSignificance = false;\n\t\t}\n\t}\n}", "CodeBleu_score": 70.21540900908764}, {"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\tif (bManagingSignificance) {\n\t\tif (!GetOwner()->Implements<USSignificanceInterface>()) {\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(\"Owner of %s does not implement USSignificanceInterface. Significance will not be managed.\"), *GetName());\n\t\t\tbManagingSignificance = false;\n\t\t\treturn;\n\t\t}\n\t\tif (bWaitOneFrame) {\n\t\t\tGetWorld()->GetTimerManager().SetTimerForNextTick(this, &USSignificanceComponent::RegisterWithManager);\n\t\t}\n\t\telse {\n\t\t\tRegisterWithManager();\n\t\t}\n\t}\n\n\t// Manage particle significance\n\tTArray<UParticleSystemComponent*> ParticleComponents;\n\tGetOwner()->GetComponents<UParticleSystemComponent>(ParticleComponents);\n\tfor (UParticleSystemComponent* ParticleComponent : ParticleComponents) {\n\t\tif (ParticleComponent->bAutoManageSignificance) {\n\t\t\tParticleComponent->bAutoManageSignificance = false;\n\t\t\tParticleComponent->SetManagingSignificance(true);\n\t\t}\n\t}\n}", "CodeBleu_score": 67.69099529375441}, {"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\tif (bManagingSignificance) {\n\t\tif (!GetOwner()->Implements<USSignificanceInterface>()) {\n\t\t\tUE_LOG(LogSSSignificance, Error, TEXT(\"Actor %s does not implement USSignificanceInterface.  Significance will not be managed.\"), *GetOwner()->GetName());\n\t\t\tbManagingSignificance = false;\n\t\t}\n\t}\n\n\tif (bManagingSignificance) {\n\t\tif (bWaitOneFrame) {\n\t\t\tGetWorld()->GetTimerManager().SetTimerForNextTick(this, &USSignificanceComponent::RegisterWithManager);\n\t\t} else {\n\t\t\tRegisterWithManager();\n\t\t}\n\t}\n\n\tif (bManagingSignificance) {\n\t\tTArray<UParticleSystemComponent*> ParticleSystemComponents;\n\t\tGetOwner()->GetComponents<UParticleSystemComponent>(ParticleSystemComponents);\n\n\t\tfor (UParticleSystemComponent* ParticleSystemComponent : ParticleSystemComponents) {\n\t\t\tParticleSystemComponent->bSignificanceOverride = true;\n\t\t}\n\t}\n}", "CodeBleu_score": 66.65179477159715}]}
{"instance_id": "77824b6415d0", "generation_result": [{"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\tif (!IsValid(SignificanceManager)) {\n\t\tSignificanceManager = Cast<USignificanceManager>(GetWorld()->GetGameInstance()->GetSubsystem<USignificanceManager>());\n\t}\n\n\tif (IsValid(SignificanceManager)) {\n\t\tSignificanceManager->RegisterObject(\n\t\t\tGetOwner()->GetClass()->GetFName(),\n\t\t\t[this]() { return this->CalcSignificance(); },\n\t\t\t[this](float Significance) { this->PostSignificanceUpdate(Significance); }\n\t\t);\n\t}\n}", "CodeBleu_score": 22.964708299040133}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\tif (IsRegisteredWithManager()) {\n\t\treturn;\n\t}\n\n\tif (GetWorld() == nullptr) {\n\t\treturn;\n\t}\n\n\tif (GetOwner() == nullptr) {\n\t\treturn;\n\t}\n\n\tif (GetOwner()->GetClass() == nullptr) {\n\t\treturn;\n\t}\n\n\tif (GetOwner()->GetClass()->GetFName() == NAME_None) {\n\t\treturn;\n\t}\n\n\tauto SignificanceManager = GetWorld()->GetGameInstance()->GetSubsystem<USignificanceManager>();\n\tif (SignificanceManager == nullptr) {\n\t\treturn;\n\t}\n\n\tSignificanceManager->RegisterObject(GetOwner()->GetClass()->GetFName(),\n\t\t[this]() { return this->CalcSignificance(); },\n\t\t[this](float Significance) { this->PostSignificanceUpdate(Significance); });\n}", "CodeBleu_score": 28.874375155198695}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\tif (IsRegisteredWithManager) {\n\t\treturn;\n\t}\n\n\tUWorld* world = GetWorld();\n\tif (world == nullptr) {\n\t\treturn;\n\t}\n\n\tUSignificanceManager* significanceManager = world->GetGameInstance()->GetSubsystem<USignificanceManager>();\n\tif (significanceManager == nullptr) {\n\t\treturn;\n\t}\n\n\tFName tag = GetOwner()->GetClass()->GetFName();\n\tFCalculateSignificance calculateSignificance = [this](const AActor* actor) {\n\t\treturn this->CalcSignificance(actor);\n\t};\n\tFPostSignificanceUpdate postSignificanceUpdate = [this](const AActor* actor, float significance) {\n\t\tthis->PostSignificanceUpdate(actor, significance);\n\t};\n\tsignificanceManager->RegisterObject(tag, calculateSignificance, postSignificanceUpdate);\n\n\tIsRegisteredWithManager = true;\n}", "CodeBleu_score": 44.325019762343906}]}
{"instance_id": "dca342410d64", "generation_result": [{"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tif (IsPoolingEnabled(Actor)) {\n\t\tSCOPED_NAMED_EVENT(TEXT(\"PoolingSubsystem::ReleaseToPool\"), FColor::Cyan);\n\t\treturn PoolingSubsystem->ReleaseToPool_Internal(Actor);\n\t}\n\tActor->Destroy();\n\treturn false;\n}", "CodeBleu_score": 51.757380166179324}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tSCOPED_NAMED_EVENT(ActorPooling_ReleaseToPool, FColor::Green);\n\n\tif (!IsPoolingEnabled(Actor)) {\n\t\tActor->Destroy();\n\t\treturn false;\n\t}\n\n\tPoolingSubsystem->ReleaseToPool_Internal(Actor);\n\treturn true;\n}", "CodeBleu_score": 47.46064411078005}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tif (Actor->IsPoolingEnabled()) {\n\t\treturn ReleaseToPool_Internal(Actor);\n\t}\n\tActor->Destroy();\n\treturn false;\n}", "CodeBleu_score": 36.888450416082605}]}
{"instance_id": "5c285130f782", "generation_result": [{"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tUE_LOG(LogTemp, Log, TEXT(\"[%s] PrimeActorPool: %s\"), *GetNameSafe(this), *GetNameSafe(ActorClass));\n\tSCOPED_NAMED_EVENT(PrimeActorPool_Scope, FColor::Yellow, *FString::Printf(TEXT(\"[%s] PrimeActorPool: %s\"), *GetNameSafe(this), *GetNameSafe(ActorClass)));\n\tif (Amount > 0) {\n\t\tfor (int32 i = 0; i < Amount; i++) {\n\t\t\tAActor* Actor = GetWorld()->SpawnActor<AActor>(ActorClass);\n\t\t\tReleaseToPool(Actor);\n\t\t}\n\t}\n}", "CodeBleu_score": 54.87406732108602}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tUE_LOG(LogActorPooling, Log, TEXT(\"Priming actor pool for %s\"), *ActorClass->GetName());\n\tSCOPED_NAMED_EVENT(PrimeActorPool_Scope, FColor::Yellow, *FString::Printf(TEXT(\"Priming actor pool for %s\"), *ActorClass->GetName()));\n\n\tif (Amount <= 0) {\n\t\tUE_LOG(LogActorPooling, Warning, TEXT(\"Cannot prime actor pool for %s with %d actors\"), *ActorClass->GetName(), Amount);\n\t\treturn;\n\t}\n\n\t// Get the world\n\tUWorld* World = GetWorld();\n\tif (!World) {\n\t\tUE_LOG(LogActorPooling, Error, TEXT(\"Cannot prime actor pool for %s without a valid world\"), *ActorClass->GetName());\n\t\treturn;\n\t}\n\n\t// Spawn the actors\n\tfor (int32 i = 0; i < Amount; ++i) {\n\t\tAActor* Actor = World->SpawnActor<AActor>(ActorClass);\n\t\tif (!Actor) {\n\t\t\tUE_LOG(LogActorPooling, Error, TEXT(\"Failed to spawn actor %s for pooling\"), *ActorClass->GetName());\n\t\t\tcontinue;\n\t\t}\n\t\tReleaseToPool(Actor);\n\t}\n\n\tUE_LOG(LogActorPooling, Log, TEXT(\"Finished priming actor pool for %s\"), *ActorClass->GetName());\n}", "CodeBleu_score": 50.99067932226189}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\t// Log the start of the pooling process\n\tUE_LOG(LogTemp, Log, TEXT(\"Pooling %d instances of %s\"), Amount, *ActorClass->GetName());\n\n\t// Create a scoped event for profiling\n\tSCOPED_NAMED_EVENT(ActorPooling_PrimeActorPool, FColor::Green);\n\n\t// Spawn the specified number of actors using the provided actor class and default spawn parameters\n\tfor (int32 i = 0; i < Amount; i++) {\n\t\t// Spawn the actor\n\t\tAActor* SpawnedActor = GetWorld()->SpawnActor<AActor>(ActorClass);\n\n\t\t// Check if the actor was spawned\n\t\tif (SpawnedActor) {\n\t\t\t// Get the actor's name\n\t\t\tFString ActorName = SpawnedActor->GetNameSafe(SpawnedActor->GetClass()->GetName());\n\n\t\t\t// Release the actor to the pool\n\t\t\tReleaseToPool(ActorClass, ActorName, SpawnedActor);\n\t\t}\n\t}\n}", "CodeBleu_score": 53.49716710061148}]}
{"instance_id": "43c013653d6d", "generation_result": [{"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t}", "CodeBleu_score": 8.780336534048907}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"BeginLoadingScreen\"));\n\t// Create a new FLoadingScreenAttributes object.\n\tFLoadingScreenAttributes LoadingScreen;\n\n\t// Create a new test loading screen widget.\n\tLoadingScreen.WidgetLoadingScreen = SNew(SLoadingScreen);\n\n\t// Set the map name to the one passed in.\n\tLoadingScreen.MapNameToLoad = MapName;\n\n\t// Set up the loading screen using the movie player.\n\tGetMoviePlayer()->SetupLoadingScreen(LoadingScreen);\n}", "CodeBleu_score": 61.02130699623869}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t}", "CodeBleu_score": 8.780336534048907}]}
{"instance_id": "a6979eb925a5", "generation_result": [{"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t    UE_LOG(LogTemp, Log, TEXT(\"Starting action %s on %s.\"), *GetName(), *GetOwningComponent()->GetOwner()->GetName());\n    GetOwningComponent()->ActiveGameplayTags.AppendTags(GrantedTags);\n    GetOwningComponent()->ReplicateActiveGameplayTags();\n\n    if (GetOwningComponent()->GetOwnerRole() == ROLE_Authority) {\n        StartTime = GetWorld()->GetTimeSeconds();\n    }\n\n    GetOwningComponent()->OnActionStarted.Broadcast(this, Instigator);\n}", "CodeBleu_score": 52.70440414757108}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tUE_LOG(LogTemp, Log, TEXT(\"[%s] StartAction_Implementation\"), *GetName());\n\tGetOwningComponent()->GetOwnerRole() == ROLE_Authority ? StartTime = GetWorld()->GetTimeSeconds() : StartTime = 0.f;\n\tGetOwningComponent()->ActiveGameplayTags.AppendTags(GrantedTags);\n\tGetOwningComponent()->OnActionStarted.Broadcast(this);\n}", "CodeBleu_score": 38.443494366438344}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tUE_LOG(LogTemp, Log, TEXT(\"Action %s started by %s\"), *GetName(), *Instigator->GetName());\n\tGetOwningComponent()->GetOwnerRole() == ROLE_Authority ? StartTime = GetWorld()->GetTimeSeconds() : StartTime = 0.0f;\n\tGetOwningComponent()->ActiveGameplayTags.AppendTags(GrantedTags);\n\tReplicatedStartTime = StartTime;\n\tGetOwningComponent()->OnActionStarted.Broadcast(this, Instigator);\n}", "CodeBleu_score": 53.23596919910759}]}
{"instance_id": "bdec7bf3e2d7", "generation_result": [{"code": "float USActionEffect::GetTimeRemaining() const{\n\t    return 0.0f;\n}", "CodeBleu_score": 3.774293285704405}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\t    return 0.0f;\n}", "CodeBleu_score": 3.774293285704405}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\t    return 0.0f;\n}", "CodeBleu_score": 3.774293285704405}]}
{"instance_id": "db3a7508643b", "generation_result": [{"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t}", "CodeBleu_score": 6.118911449916524}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t}", "CodeBleu_score": 6.118911449916524}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t}", "CodeBleu_score": 6.118911449916524}]}
{"instance_id": "e6a5224079e6", "generation_result": [{"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\tif (TargetActor == nullptr) {\n\t\treturn false;\n\t}\n\n\tUUSAttributeComponent* AttributeComp = TargetActor->FindComponentByClass<UUSAttributeComponent>();\n\tif (AttributeComp == nullptr) {\n\t\treturn false;\n\t}\n\n\tAttributeComp->ApplyHealthChange(-DamageAmount);\n\treturn true;\n}", "CodeBleu_score": 46.67853673732252}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\tif (TargetActor == NULL || DamageAmount <= 0.0f) {\n\t\treturn false;\n\t}\n\n\tUUSAttributeComponent* AttributeComp = TargetActor->FindComponentByClass<UUSAttributeComponent>();\n\tif (AttributeComp == NULL) {\n\t\treturn false;\n\t}\n\n\tAttributeComp->ApplyHealthChange(-DamageAmount);\n\treturn true;\n}", "CodeBleu_score": 46.00538092779319}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\tif (TargetActor == NULL) {\n\t\treturn false;\n\t}\n\tUUSAttributeComponent* AttributeComp = TargetActor->FindComponentByClass<UUSAttributeComponent>();\n\tif (AttributeComp == NULL) {\n\t\treturn false;\n\t}\n\tAttributeComp->ApplyHealthChange(-DamageAmount);\n\treturn true;\n}", "CodeBleu_score": 46.99232139781364}]}
{"instance_id": "084a7501fc08", "generation_result": [{"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t    return false;\n}", "CodeBleu_score": 7.1531368795312025}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\treturn false;\n}", "CodeBleu_score": 7.151052641783151}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\treturn false;\n}", "CodeBleu_score": 7.151052641783151}]}
{"instance_id": "8e0ccc856566", "generation_result": [{"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tif (InstigatorPawn == nullptr) {\n\t\treturn;\n\t}\n\tUSAttributeComponent* AttributeComp = InstigatorPawn->FindComponentByClass<USAttributeComponent>();\n\tif (AttributeComp == nullptr) {\n\t\treturn;\n\t}\n\tif (AttributeComp->IsFullHealth()) {\n\t\treturn;\n\t}\n\tASPlayerState* PS = InstigatorPawn->GetPlayerState<ASPlayerState>();\n\tif (PS == nullptr) {\n\t\treturn;\n\t}\n\tif (!PS->RemoveCredits(CreditCost)) {\n\t\treturn;\n\t}\n\tAttributeComp->ApplyHealthChange(AttributeComp->GetHealthMax());\n\tHideAndCooldownPowerup();\n}", "CodeBleu_score": 53.96285703278926}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tif (InstigatorPawn != nullptr) {\n\t\tUAttributeComponent* AttributeComp = InstigatorPawn->FindComponentByClass<UAttributeComponent>();\n\t\tif (AttributeComp != nullptr) {\n\t\t\tif (!AttributeComp->IsFullHealth()) {\n\t\t\t\tASPlayerState* PS = InstigatorPawn->GetPlayerState<ASPlayerState>();\n\t\t\t\tif (PS != nullptr) {\n\t\t\t\t\tif (PS->RemoveCredits(Cost)) {\n\t\t\t\t\t\tAttributeComp->ApplyHealthChange(AttributeComp->GetHealthMax());\n\t\t\t\t\t\tHideAndCooldownPowerup();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 52.70588655642483}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tif (InstigatorPawn != NULL) {\n\t\tUAttributeComponent* AttributeComp = InstigatorPawn->FindComponentByClass<UAttributeComponent>();\n\t\tif (AttributeComp != NULL) {\n\t\t\tif (!AttributeComp->IsFullHealth()) {\n\t\t\t\tASPlayerState* PS = InstigatorPawn->GetPlayerState<ASPlayerState>();\n\t\t\t\tif (PS != NULL && PS->RemoveCredits(Cost)) {\n\t\t\t\t\tAttributeComp->ApplyHealthChange(AttributeComp->GetHealthMax());\n\t\t\t\t\tHideAndCooldownPowerup();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 53.54981768832312}]}
{"instance_id": "39a680859a89", "generation_result": [{"code": "void ASProjectileBase::Explode_Implementation(){\n\t\t// Get the world\n\tUWorld* const World = GetWorld();\n\n\t// Get the actor pooling subsystem\n\tUSActorPoolingSubsystem* const PoolingSubsystem = World->GetSubsystem<USActorPoolingSubsystem>();\n\n\t// Spawn the impact visual effect\n\tUGameplayStatics::SpawnEmitterAtLocation(World, ImpactFX, GetActorLocation(), GetActorRotation());\n\n\t// Play the impact sound\n\tUGameplayStatics::PlaySoundAtLocation(World, ImpactSound, GetActorLocation());\n\n\t// Trigger the impact camera shake\n\tUGameplayStatics::PlayWorldCameraShake(World, ImpactShake, GetActorLocation(), GetImpactShakeOuterRadius(), GetImpactShakeInnerRadius(), 1.0f, true);\n\n\t// Release the projectile back to the actor pool\n\tPoolingSubsystem->ReleaseToPool(this);\n}", "CodeBleu_score": 63.15152273565678}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t\tif (PoolingSubsystem != NULL) {\n\t\tPoolingSubsystem->ReleaseToPool(this);\n\t}\n}", "CodeBleu_score": 16.619376710325497}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t\tif (ExplosionEffect) {\n\t\tUGameplayStatics::SpawnEmitterAtLocation(GetWorld(), ExplosionEffect, GetActorLocation());\n\t}\n\n\tif (ExplosionSound) {\n\t\tUGameplayStatics::PlaySoundAtLocation(GetWorld(), ExplosionSound, GetActorLocation());\n\t}\n\n\tif (ExplosionShake) {\n\t\tGetWorld()->GetSubsystem<USActorPoolingSubsystem>()->ReleaseToPool(this);\n\t\tUGameplayStatics::PlayWorldCameraShake(GetWorld(), ExplosionShake, GetActorLocation(), GetImpactShakeOuterRadius(), GetImpactShakeInnerRadius(), 1.0f, false);\n\t}\n}", "CodeBleu_score": 52.726093558385955}]}
{"instance_id": "a95c41c6d7b5", "generation_result": [{"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tif (PlayerState == nullptr) {\n\t\treturn nullptr;\n\t}\n\tif (PlayerState->GetWorld()->IsPlayInEditor()) {\n\t\tUE_LOGFMT(LogSaveGame, Warning, TEXT(\"GetPlayerData: PlayerState is null in PIE mode, returning first player\"));\n\t\tif (SavedPlayers.Num() > 0) {\n\t\t\treturn &SavedPlayers[0];\n\t\t}\n\t}\n\telse {\n\t\tint32 Index = SavedPlayers.FindByPredicate([PlayerState](const FPlayerSaveData& PlayerData) {\n\t\t\treturn PlayerData.PlayerId == PlayerState->GetUniqueId();\n\t\t});\n\t\tif (Index != INDEX_NONE) {\n\t\t\treturn &SavedPlayers[Index];\n\t\t}\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 65.48975005185132}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tif (PlayerState == nullptr) {\n\t\treturn nullptr;\n\t}\n\n\tif (PlayerState->GetWorld()->IsPlayInEditor()) {\n\t\tUE_LOG(LogSaveGame, Log, TEXT(\"GetPlayerData: Play-In-Editor mode. Returning first saved player data.\"));\n\t\treturn &SavedPlayers[0];\n\t}\n\n\tFString UniqueId = PlayerState->GetUniqueId().ToString();\n\tint32 Index = SavedPlayers.FindByPredicate([&](const FPlayerSaveData& Player) {\n\t\treturn Player.UniqueId == UniqueId;\n\t});\n\n\tif (Index != INDEX_NONE) {\n\t\treturn &SavedPlayers[Index];\n\t}\n\n\treturn nullptr;\n}", "CodeBleu_score": 69.87283460474747}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t    // If there's no player state, return null\n    if (!PlayerState) {\n        return nullptr;\n    }\n\n    // If we're in PIE mode, log a message and return the first saved player entry if available\n    if (PlayerState->GetWorld()->IsPlayInEditor()) {\n        UE_LOG(LogTemp, Warning, TEXT(\"GetPlayerData: In PIE mode, returning the first saved player entry if available\"));\n        return SavedPlayers.Num() > 0 ? &SavedPlayers[0] : nullptr;\n    }\n\n    // Use the player's unique ID to find and return the corresponding saved player data\n    const FString PlayerID = PlayerState->GetUniqueId().ToString();\n    const auto PlayerData = SavedPlayers.FindByPredicate([PlayerID](const FPlayerSaveData& Data) {\n        return Data.PlayerID == PlayerID;\n    });\n\n    // If we found the player data, return it, otherwise return null\n    return PlayerData != INDEX_NONE ? &SavedPlayers[PlayerData] : nullptr;\n}", "CodeBleu_score": 65.21528706409454}]}
{"instance_id": "58a03c087c47", "generation_result": [{"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t\tASPlayerState* PS;\n\tPS = NewPlayer->GetPlayerState<ASPlayerState>();\n\tif (PS != NULL) {\n\t\tPS->LoadPlayerState();\n\t}\n}", "CodeBleu_score": 63.05370340726246}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t\tASPlayerState* PS;\n\tPS = NewPlayer->GetPlayerState<ASPlayerState>();\n\tPS->LoadPlayerState();\n}", "CodeBleu_score": 55.775765332335325}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t\tASPlayerState* PS;\n\tPS = NewPlayer->GetPlayerState<ASPlayerState>();\n\tif (PS) {\n\t\tPS->LoadPlayerState();\n\t}\n}", "CodeBleu_score": 62.98516639724072}]}
{"instance_id": "c5bd4c059b71", "generation_result": [{"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t\t// Clear existing saved player and actor data\n\tCurrentSaveGame->SavedPlayers.Empty();\n\tCurrentSaveGame->SavedActors.Empty();\n\n\t// Retrieve the game state\n\tAPlayerState* PS = GetWorld()->GetGameState<APlayerState>();\n\tif (PS) {\n\t\t// Save player data for each player in the game state\n\t\tfor (int i = 0; i < PS->PlayerArray.Num(); i++) {\n\t\t\t// Get the player state\n\t\t\tAPlayerState* PlayerState = PS->PlayerArray[i];\n\n\t\t\t// Save the player state\n\t\t\tCurrentSaveGame->SavedPlayers.Add(PlayerState);\n\n\t\t\t// Save the player state's player controller\n\t\t\tCurrentSaveGame->SavedPlayers.Add(PlayerState->PlayerController);\n\t\t}\n\t}\n\n\t// Iterate through all actors in the world\n\tfor (TActorIterator<AActor> ActorItr(GetWorld()); ActorItr; ++ActorItr) {\n\t\t// Get the actor\n\t\tAActor* Actor = *ActorItr;\n\n\t\t// Check if the actor implements the USaveGameInterface\n\t\tif (Actor->Implements<USaveGameInterface>()) {\n\t\t\t// Get the actor's save game interface\n\t\t\tUSaveGameInterface* SGI = CastChecked<USaveGameInterface>(Actor);\n\n\t\t\t// Check if the actor should be saved\n\t\t\tif (SGI->ShouldSave()) {\n\t\t\t\t// Create a new saved actor\n\t\t\t\tFSavedActor SavedActor;\n\n\t\t\t\t// Save the actor's name\n\t\t\t\tSavedActor.Name = Actor->GetFName();\n\n\t\t\t\t// Save the actor's transform\n\t\t\t\tSavedActor.Transform = Actor->GetActorTransform();\n\n\t\t\t\t// Save the actor's serialized data\n\t\t\t\tSavedActor.Data = Actor->Serialize();\n\n\t\t\t\t// Add the saved actor to the current save game\n\t\t\t\tCurrentSave", "CodeBleu_score": 53.64847925182031}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t\tCurrentSaveGame->SavedPlayers.Empty();\n\tCurrentSaveGame->SavedActors.Empty();\n\n\t// Save player data for each player in the game state\n\tfor (APlayerState* PS : GetWorld()->GetGameState<AGameState>()->PlayerArray) {\n\t\tif (PS->IsValidLowLevel() && PS->IsA(ASPlayerState::StaticClass())) {\n\t\t\tCurrentSaveGame->SavedPlayers.Add(CastChecked<ASPlayerState>(PS)->SavePlayerState());\n\t\t}\n\t}\n\n\t// Iterate through all actors in the world, saving those that implement a specific interface\n\tfor (TActorIterator<AActor> ActorItr(GetWorld()); ActorItr; ++ActorItr) {\n\t\tAActor* Actor = *ActorItr;\n\t\tif (Actor->Implements<USGameplayInterface>()) {\n\t\t\tFGameplaySaveData SaveData;\n\t\t\tSaveData.ActorName = Actor->GetFName();\n\t\t\tSaveData.Transform = Actor->GetActorTransform();\n\t\t\tActor->Serialize(SaveData.Data);\n\t\t\tCurrentSaveGame->SavedActors.Add(SaveData);\n\t\t}\n\t}\n\n\t// Write the save game to a slot, and broadcast an event to signal the save is complete\n\tOnSaveGameWritten.Broadcast();\n}", "CodeBleu_score": 42.8115758736499}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t\tCurrentSaveGame->SavedPlayers.Empty();\n\tCurrentSaveGame->SavedActors.Empty();\n\n\tif (IsValid(GetWorld())) {\n\t\tAGameStateBase* GS = GetWorld()->GetGameState();\n\t\tif (GS && GS->PlayerArray.Num() > 0) {\n\t\t\tfor (APlayerState* PS : GS->PlayerArray) {\n\t\t\t\tif (PS) {\n\t\t\t\t\tCurrentSaveGame->SavedPlayers.Add(PS);\n\t\t\t\t\tPS->SavePlayerState(CurrentSaveGame);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (TActorIterator<AActor> ActorItr(GetWorld()); ActorItr; ++ActorItr) {\n\t\t\tAActor* Actor = *ActorItr;\n\t\t\tif (Actor && Actor->Implements<USGameplayInterface>()) {\n\t\t\t\tFGameplayActorData ActorData;\n\t\t\t\tActorData.ActorName = Actor->GetFName();\n\t\t\t\tActorData.ActorTransform = Actor->GetActorTransform();\n\t\t\t\tActor->Serialize(ActorData.ActorData);\n\t\t\t\tCurrentSaveGame->SavedActors.Add(ActorData);\n\t\t\t}\n\t\t}\n\n\t\tUGameplayStatics::SaveGameToSlot(CurrentSaveGame, SaveGameSlotName, 0);\n\t\tOnSaveGameWritten.Broadcast();\n\t}\n}", "CodeBleu_score": 56.22921736420541}]}
{"instance_id": "0d7043a0bff0", "generation_result": [{"code": "void FrameworkConfig::draw_themes(){\n\t    ImGui::PushItemWidth(100);\n    ImGui::Combo(\"Theme\", &m_theme, theme_names, IM_ARRAYSIZE(theme_names));\n    ImGui::PopItemWidth();\n    ImGui::SameLine();\n    ImGui::PushItemWidth(100);\n    ImGui::InputInt(\"Font Size\", &m_font_size->value);\n    ImGui::PopItemWidth();\n    if (m_font_size->value != m_font_size->last_value) {\n        m_font_size->last_value = m_font_size->value;\n        g_framework->set_font_size(m_font_size->value);\n    }\n}", "CodeBleu_score": 42.308942655255386}, {"code": "void FrameworkConfig::draw_themes(){\n\t    if (m_show_themes) {\n        ImGui::Begin(\"Themes\", &m_show_themes, ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_AlwaysAutoResize);\n\n        if (ImGui::Combo(\"Theme\", &m_theme_index, \"Dark\\0Light\\0Classic\\0\")) {\n            g_framework->set_theme(m_theme_index);\n        }\n\n        ImGui::SliderFloat(\"Font Size\", m_font_size, 8.0f, 32.0f);\n\n        if (m_font_size->value != g_framework->get_font_size()) {\n            g_framework->set_font_size(m_font_size->value);\n        }\n\n        ImGui::End();\n    }\n}", "CodeBleu_score": 42.777390104163366}, {"code": "void FrameworkConfig::draw_themes(){\n\t    if (m_font_size == nullptr) {\n        m_font_size = std::make_unique<ImGui::TextEditor::FontSize>();\n        m_font_size->value = 13;\n    }\n\n    if (ImGui::BeginTabItem(\"Themes\")) {\n        ImGui::PushItemWidth(ImGui::GetWindowWidth() * 0.5f);\n        ImGui::Combo(\"##theme\", &m_current_theme, theme_names.data(), theme_names.size());\n        ImGui::PopItemWidth();\n        ImGui::SameLine();\n        if (ImGui::Button(\"Apply\")) {\n            get_imgui_theme()->draw(m_current_theme);\n        }\n\n        ImGui::Separator();\n\n        m_font_size->draw();\n\n        ImGui::EndTabItem();\n    }\n\n    if (m_font_size->modified) {\n        g_framework->set_font_size(m_font_size->value);\n        m_font_size->modified = false;\n    }\n}", "CodeBleu_score": 45.04825518817062}]}
{"instance_id": "e7f81d1dee95", "generation_result": [{"code": "void FrameworkConfig::draw_main() {\n\t    ImGui::Text(\"Main\");\n    ImGui::Separator();\n    m_menu_key->draw();\n    ImGui::SameLine();\n    m_show_cursor_key->draw();\n    m_remember_menu_state->draw();\n    m_l3_r3_long_press->draw();\n    ImGui::Separator();\n    m_enable_l3_r3_toggle->draw();\n    ImGui::Separator();\n    m_always_show_cursor->draw();\n    ImGui::Separator();\n    m_log_level->draw();\n    if (m_log_level->value() >= 0 && m_log_level->value() <= 6) {\n        spdlog::set_level(static_cast<spdlog::level::level_enum>(m_log_level->value()));\n    }\n}", "CodeBleu_score": 60.68974566025654}, {"code": "void FrameworkConfig::draw_main() {\n\t    ImGui::PushItemWidth(ImGui::GetWindowWidth() * 0.65f);\n    m_always_show_cursor->draw();\n    spdlog::set_level(static_cast<spdlog::level::level_enum>(m_log_level->value));\n    m_log_level->draw();\n    ImGui::SameLine();\n    m_remember_menu_state->draw();\n    m_l3_r3_long_press->draw();\n    ImGui::SameLine();\n    m_menu_key->draw();\n    m_log_level->value;\n    m_show_cursor_key->draw();\n    m_enable_l3_r3_toggle->draw();\n}", "CodeBleu_score": 42.094288978741844}, {"code": "void FrameworkConfig::draw_main() {\n\t    ImGui::Text(\"Main\");\n    ImGui::Separator();\n    m_menu_key->draw();\n    ImGui::SameLine();\n    m_show_cursor_key->draw();\n    m_remember_menu_state->draw();\n    m_enable_l3_r3_toggle->draw();\n    m_l3_r3_long_press->draw();\n    m_always_show_cursor->draw();\n    ImGui::Separator();\n    m_log_level->draw();\n    if (m_log_level->value > -1 && m_log_level->value < 6) {\n        spdlog::set_level(static_cast<spdlog::level::level_enum>(m_log_level->value));\n    }\n}", "CodeBleu_score": 42.9158602991542}]}
{"instance_id": "83fa7f401579", "generation_result": [{"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t\n    // Create a new FOSMFile object\n    FOSMFile OSMFile;\n\n    // Set the OSM file path\n    OSMFile.OSMFilePath = OSMFilePath;\n\n    // Parse the XML file\n    if ( OSMFile.ParseXmlFile( bIsFilePathActuallyTextBuffer, FeedbackContext ) ) {\n\n        // Calculate the average latitude and longitude\n        OSMFile.CalculateAverageLatitudeAndLongitude();\n\n        // Return true\n        return true;\n\n    } else {\n\n        // Return false\n        return false;\n\n    }\n\n}", "CodeBleu_score": 24.818996712074398}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t\t// Setup a new context for FFastXml\n\tFFeedbackContextAnsi Context;\n\tContext.Logf = FeedbackContext->Logf;\n\n\t// Create a new FFastXml parser\n\tFFastXml Parser;\n\tParser.SetFeedbackContext( &Context );\n\n\t// Setup the node map\n\tTMap<int64, FOSMNode> NodeMap;\n\n\t// Setup the way map\n\tTMap<int64, FOSMWay> WayMap;\n\n\t// Setup the relation map\n\tTMap<int64, FOSMRelation> RelationMap;\n\n\t// Setup the node list\n\tTArray<FOSMNode> NodeList;\n\n\t// Setup the way list\n\tTArray<FOSMWay> WayList;\n\n\t// Setup the relation list\n\tTArray<FOSMRelation> RelationList;\n\n\t// Setup the bounding box\n\tFOSMBoundingBox BoundingBox;\n\n\t// Setup the way refs\n\tTArray<FOSMWayRef> WayRefs;\n\n\t// Setup the node refs\n\tTArray<FOSMNodeRef> NodeRefs;\n\n\t// Setup the relation refs\n\tTArray<FOSMRelationRef> RelationRefs;\n\n\t// Setup the tag list\n\tTArray<FOSMTag> TagList;\n\n\t// Setup the tag refs\n\tTArray<FOSMTagRef> TagRefs;\n\n\t// Setup the member list\n\tTArray<FOSMMember> MemberList;\n\n\t// Setup the member refs\n\tTArray<FOSMMemberRef> MemberRefs;\n\n\t// Setup the role list\n\tTArray<FOSMRole> RoleList;\n\n\t// Setup the role refs\n\tTArray<FOSMRoleRef> RoleRefs;\n\n\t// Setup the ref list\n\tTArray<FOSMRef> RefList;\n\n\t// Setup the ref refs\n\tTArray<FOSMRefRef> RefRefs;\n\n\t// Setup the ref ref", "CodeBleu_score": 20.811743289892735}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t\t// Create a new node map to store the data\n\tNodeMap.Empty();\n\n\t// Create a new parser\n\tTSharedRef<FFastXml> Parser = MakeShareable( new FFastXml() );\n\n\t// Create a new context\n\tTSharedRef<FXmlFileLoadContext> Context = MakeShareable( new FXmlFileLoadContext( FeedbackContext, OSMFilePath, NodeMap ) );\n\n\t// Set the context for the parser\n\tParser->SetFeedbackContext( Context );\n\n\t// Set the element and attribute callbacks\n\tParser->SetProcessElement( Context, &FXmlFileLoadContext::ProcessElement );\n\tParser->SetProcessAttribute( Context, &FXmlFileLoadContext::ProcessAttribute );\n\n\t// Set the error callback\n\tParser->SetError( Context, &FXmlFileLoadContext::Error );\n\n\t// Set the close callback\n\tParser->SetClose( Context, &FXmlFileLoadContext::Close );\n\n\t// Set the comment callback\n\tParser->SetComment( Context, &FXmlFileLoadContext::Comment );\n\n\t// Set the data callback\n\tParser->SetData( Context, &FXmlFileLoadContext::Data );\n\n\t// Set the warning callback\n\tParser->SetWarning( Context, &FXmlFileLoadContext::Warning );\n\n\t// Set the skip callback\n\tParser->SetSkip( Context, &FXmlFileLoadContext::Skip );\n\n\t// Parse the file\n\tif ( bIsFilePathActuallyTextBuffer ) {\n\t\tParser->Parse( OSMFilePath.GetCharArray().GetData(), OSMFilePath.Len() );\n\t} else {\n\t\tParser->ParseFile( OSMFilePath.GetCharArray().GetData() );\n\t}\n\n\t// If parsing was successful, calculate the average latitude and longitude\n\tif ( Context->bSuccess ) {\n\t\tAverageLatitude = 0.0;\n\t\tAverageLongitude = 0.0;\n\n\t\tfor ( TMap<int64, FOSMNode>::TConstIterator It( NodeMap ); It; ++It ) {\n\t\t\tAverageLatitude += It.Value().Latitude;\n\t\t\tAverageLongitude", "CodeBleu_score": 37.92735531161744}]}
{"instance_id": "7349d775edf6", "generation_result": [{"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t    Super::PostSpawnActor(Asset, NewActor);\n\n    if (CastChecked<UStreetMap>(Asset)) {\n        Cast<AStreetMapActor>(NewActor)->GetStreetMapComponent()->SetStreetMap(Cast<UStreetMap>(Asset));\n    }\n}", "CodeBleu_score": 46.96486468614375}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\n\tif (CastChecked<UStreetMap>(Asset)) {\n\t\tAStreetMapActor* StreetMapActor = Cast<AStreetMapActor>(NewActor);\n\t\tif (StreetMapActor) {\n\t\t\tUStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n\t\t\tif (StreetMapComponent) {\n\t\t\t\tStreetMapComponent->SetStreetMap(Cast<UStreetMap>(Asset));\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 72.36429087082013}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t    Super::PostSpawnActor(Asset, NewActor);\n\n    if (CastChecked<UStreetMap>(Asset)) {\n        Cast<AStreetMapActor>(NewActor)->GetStreetMapComponent()->SetStreetMap(Cast<UStreetMap>(Asset));\n    }\n}", "CodeBleu_score": 46.96486468614375}]}
{"instance_id": "f160ac6d0353", "generation_result": [{"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\n\t// Check if a street map component is selected\n\tif (SelectedStreetMapComponent) {\n\n\t\t// Call the BuildMesh method on the selected component\n\t\tSelectedStreetMapComponent->BuildMesh();\n\n\t\t// Refresh the details view\n\t\tRefreshDetails();\n\n\t\t// Return a handled reply\n\t\treturn FReply::Handled();\n\n\t}\n\n\t// Return an unhandled reply\n\treturn FReply::Unhandled();\n\n}", "CodeBleu_score": 63.16581192271765}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\n\t// If a street map component is selected, call the BuildMesh method on the selected component and refresh the details view\n\tif (SelectedStreetMapComponent.IsValid()) {\n\n\t\tSelectedStreetMapComponent->BuildMesh();\n\t\tRefreshDetails();\n\n\t}\n\n\treturn FReply::Handled();\n\n}", "CodeBleu_score": 76.51297845816737}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\tif (SelectedStreetMapComponent) {\n\t\tSelectedStreetMapComponent->BuildMesh();\n\t\tRefreshDetails();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 76.40817087990033}]}
{"instance_id": "b23f1f2b29fa", "generation_result": [{"code": "void FStreetMapImportingModule::StartupModule(){\n\t\t// Register the StreetMap asset type with the asset tools.\n\tIAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n\tRegisterAssetTypeAction(AssetTools);\n\n\t// Initialize the StreetMap style.\n\tFStreetMapStyle::Initialize();\n\n\t// Register a custom class layout for the StreetMapComponent in the property editor module.\n\tFPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\tPropertyModule.RegisterCustomClassLayout(\"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance));\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 70.66718786962608}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t\t// Register the StreetMap asset type with the asset tools\n\tIAssetTools& AssetTools = FModuleManager::GetModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n\tRegisterAssetTypeAction(AssetTools);\n\n\t// Initialize the StreetMap style\n\tFStreetMapStyle::Initialize();\n\n\t// Register the custom class layout for the StreetMapComponent in the property editor module\n\tFPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\tPropertyModule.RegisterCustomClassLayout(\"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance));\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 61.43184968731329}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t\t// Register asset types\n\tIAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n\n\t// Register the StreetMap asset type\n\tRegisterAssetTypeAction(AssetTools, MakeShareable(new FAssetTypeActions_StreetMap));\n\n\t// Register the StreetMapComponent asset type\n\tRegisterAssetTypeAction(AssetTools, MakeShareable(new FAssetTypeActions_StreetMapComponent));\n\n\t// Register the StreetMapComponent asset type\n\tRegisterAssetTypeAction(AssetTools, MakeShareable(new FAssetTypeActions_StreetMapActor));\n\n\t// Register the StreetMapComponent asset type\n\tRegisterAssetTypeAction(AssetTools, MakeShareable(new FAssetTypeActions_StreetMapActorComponent));\n\n\t// Register the StreetMapComponent asset type\n\tRegisterAssetTypeAction(AssetTools, MakeShareable(new FAssetTypeActions_StreetMapSplineComponent));\n\n\t// Register the StreetMapComponent asset type\n\tRegisterAssetTypeAction(AssetTools, MakeShareable(new FAssetTypeActions_StreetMapStaticMeshComponent));\n\n\t// Register the StreetMapComponent asset type\n\tRegisterAssetTypeAction(AssetTools, MakeShareable(new FAssetTypeActions_StreetMapStaticMesh));\n\n\t// Register the StreetMapComponent asset type\n\tRegisterAssetTypeAction(AssetTools, MakeShareable(new FAssetTypeActions_StreetMapMeshComponent));\n\n\t// Register the StreetMapComponent asset type\n\tRegisterAssetTypeAction(AssetTools, MakeShareable(new FAssetTypeActions_StreetMapMesh));\n\n\t// Register the StreetMapComponent asset type\n\tRegisterAssetTypeAction(AssetTools, MakeShareable(new FAssetTypeActions_StreetMapMaterial));\n\n\t// Register the StreetMapComponent asset type\n\tRegisterAssetTypeAction(AssetTools, MakeShareable(new FAssetTypeActions_StreetMapTexture));\n\n\t// Register the StreetMapComponent asset type\n\tRegisterAssetTypeAction(AssetTools, MakeShareable(new FAssetTypeActions_StreetMapTexture2D));\n\n\t// Register the StreetMapComponent asset type\n\tRegisterAssetTypeAction(AssetTools", "CodeBleu_score": 47.29831708275734}]}
{"instance_id": "1da549fe84e3", "generation_result": [{"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t    return NULL;\n}", "CodeBleu_score": 5.291362653752424}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t    return NULL;\n}", "CodeBleu_score": 5.291362653752424}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t    return NULL;\n}", "CodeBleu_score": 5.291362653752424}]}
{"instance_id": "d0ee3b2e023e", "generation_result": [{"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t\tTestAbility01Handle = ServerHandle;\n\n\tTArray<uint8> InputIds;\n\tInputIds.Add(0);\n\n\tAbilities->BindAbilityToInputIDs(ServerHandle, InputIds);\n}", "CodeBleu_score": 75.47707813871746}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t\tTestAbility01Handle = ServerHandle;\n\n\tTArray<uint8> InputIds;\n\tInputIds.Add(EKeys::One);\n\n\tAbilities->BindAbilityToInputIDs(ServerHandle, InputIds);\n}", "CodeBleu_score": 76.75360558094198}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t\tTestAbility01Handle = ServerHandle;\n\n\tTArray<uint8> InputIds;\n\tInputIds.Add(static_cast<uint8>(EInputKeys::E));\n\n\tAbilities->BindAbilityToInputIDs(TestAbility01Handle, InputIds);\n}", "CodeBleu_score": 76.93882616291269}]}
{"instance_id": "e62f1b2cd4bd", "generation_result": [{"code": "void AARCharacter::MoveForward(float Value){\n\t\tif (Controller != NULL && Value != 0.0f) {\n\t\tFRotator Rotation = Controller->GetControlRotation();\n\t\tconst FVector Direction = FRotationMatrix(Rotation).GetScaledAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 61.21343523618632}, {"code": "void AARCharacter::MoveForward(float Value){\n\t    if (Controller && Value != 0.0f) {\n        // find out which way is forward\n        const FRotator Rotation = Controller->GetControlRotation();\n        const FRotator YawRotation(0, Rotation.Yaw, 0);\n\n        // get forward vector\n        const FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n        AddMovementInput(Direction, Value);\n    }\n}", "CodeBleu_score": 83.58056459686168}, {"code": "void AARCharacter::MoveForward(float Value){\n\t\tif (Controller != NULL && Value != 0.0f) {\n\t\t// find out which way is forward\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\t// get forward vector\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 85.4775711666582}]}
{"instance_id": "a77cdc67ee00", "generation_result": [{"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tFVector SocketLocation;\n\n\tif (MainWeaponMesh) {\n\t\tSocketLocation = MainWeaponMesh->GetSocketLocation(Socket);\n\t} else {\n\t\tSocketLocation = GetMesh()->GetSocketLocation(Socket);\n\t}\n\n\treturn SocketLocation;\n}", "CodeBleu_score": 49.932653461609945}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tif (MainWeaponMesh) {\n\t\treturn MainWeaponMesh->GetSocketLocation(Socket);\n\t}\n\telse {\n\t\treturn GetMesh()->GetSocketLocation(Socket);\n\t}\n}", "CodeBleu_score": 46.25374401443652}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tFVector SocketLocation;\n\n\tif (MainWeaponMesh) {\n\t\tSocketLocation = MainWeaponMesh->GetSocketLocation(Socket);\n\t}\n\telse {\n\t\tSocketLocation = GetMesh()->GetSocketLocation(Socket);\n\t}\n\n\treturn SocketLocation;\n}", "CodeBleu_score": 49.853719991749124}]}
{"instance_id": "f021203f736a", "generation_result": [{"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tif (InEnemy != nullptr) {\n\t\tSpawnedEnemies.Remove(InEnemy);\n\t}\n\tif (SpawnedEnemies.Num() < MinSpawnedEnemies) {\n\t\tSetupSpawner();\n\t}\n}", "CodeBleu_score": 69.95867069866492}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tSpawnedEnemies.Remove(InEnemy);\n\tif (SpawnedEnemies.Num() < MinSpawnedEnemies) {\n\t\tSetupSpawner();\n\t}\n}", "CodeBleu_score": 60.874574258181205}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t    SpawnedEnemies.Remove(InEnemy);\n    if (SpawnedEnemies.Num() < MinSpawnedEnemies) {\n        SetupSpawner();\n    }\n}", "CodeBleu_score": 63.19828576216556}]}
{"instance_id": "dbab72cb539f", "generation_result": [{"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\tFString result;\n\tFString PlayerId;\n\tFString PlayerName;\n\tFString PlayerSessionId;\n\tFString PlayerSessionIdFromClient;\n\tFString PlayerSessionIdFromServer;\n\tFString PlayerSessionIdFromServerTemp;\n\tFString PlayerSessionIdFromServerTemp2;\n\tFString PlayerSessionIdFromServerTemp3;\n\tFString PlayerSessionIdFromServerTemp4;\n\tFString PlayerSessionIdFromServerTemp5;\n\tFString PlayerSessionIdFromServerTemp6;\n\tFString PlayerSessionIdFromServerTemp7;\n\tFString PlayerSessionIdFromServerTemp8;\n\tFString PlayerSessionIdFromServerTemp9;\n\tFString PlayerSessionIdFromServerTemp10;\n\tFString PlayerSessionIdFromServerTemp11;\n\tFString PlayerSessionIdFromServerTemp12;\n\tFString PlayerSessionIdFromServerTemp13;\n\tFString PlayerSessionIdFromServerTemp14;\n\tFString PlayerSessionIdFromServerTemp15;\n\tFString PlayerSessionIdFromServerTemp16;\n\tFString PlayerSessionIdFromServerTemp17;\n\tFString PlayerSessionIdFromServerTemp18;\n\tFString PlayerSessionIdFromServerTemp19;\n\tFString PlayerSessionIdFromServerTemp20;\n\tFString PlayerSessionIdFromServerTemp21;\n\tFString PlayerSessionIdFromServerTemp22;\n\tFString PlayerSessionIdFromServerTemp23;\n\tFString PlayerSessionIdFromServerTemp24;\n\tFString PlayerSessionIdFromServerTemp25;\n\tFString PlayerSessionIdFromServerTemp26;\n\tFString PlayerSessionIdFromServerTemp27;\n\tFString PlayerSessionIdFromServerTemp28;\n\tFString PlayerSessionIdFromServerTemp29;\n\tFString PlayerSessionIdFromServerTemp30;\n\tFString PlayerSessionIdFromServerTemp31;\n\tFString PlayerSessionIdFromServerTemp32;\n\tFString PlayerSessionIdFromServerTemp33;\n\tFString PlayerSessionIdFromServerTemp34;\n\tFString PlayerSessionIdFromServerTemp35;\n\tFString PlayerSessionIdFromServerTemp36;\n\tFString PlayerSessionId", "CodeBleu_score": 10.4570909424237}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\tFString Result;\n\t\n\tSuper::ApproveLogin(Options, Result);\n\t\n\tTArray<FString> ParsedOptions;\n\tOptions.ParseIntoArray(ParsedOptions, TEXT(\",\"), true);\n\t\n\tfor (FString& Option : ParsedOptions) {\n\t\tTArray<FString> ParsedOption;\n\t\tOption.Split(TEXT(\"=\"), &ParsedOption, ESearchCase::IgnoreCase, ESearchDir::FromStart);\n\t\t\n\t\tif (ParsedOption.Num() == 2 && ParsedOption[0] == TEXT(\"PlayerId\")) {\n\t\t\tPlayerId = ParsedOption[1];\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn Result;\n}", "CodeBleu_score": 53.50846631781503}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\tFString result;\n\tFString playerId;\n\tFString playerName;\n\tFString playerPass;\n\tFString playerEmail;\n\tFString playerGender;\n\tFString playerBirthday;\n\tFString playerLocation;\n\tFString playerDescription;\n\tFString playerAvatar;\n\tFString playerAvatarUrl;\n\tFString playerAvatarThumbnail;\n\tFString playerAvatarThumbnailUrl;\n\tFString playerFacebookId;\n\tFString playerFacebookName;\n\tFString playerFacebookEmail;\n\tFString playerFacebookAvatar;\n\tFString playerFacebookAvatarUrl;\n\tFString playerFacebookAvatarThumbnail;\n\tFString playerFacebookAvatarThumbnailUrl;\n\tFString playerGoogleId;\n\tFString playerGoogleName;\n\tFString playerGoogleEmail;\n\tFString playerGoogleAvatar;\n\tFString playerGoogleAvatarUrl;\n\tFString playerGoogleAvatarThumbnail;\n\tFString playerGoogleAvatarThumbnailUrl;\n\tFString playerGameCenterId;\n\tFString playerGameCenterName;\n\tFString playerGameCenterAvatar;\n\tFString playerGameCenterAvatarUrl;\n\tFString playerGameCenterAvatarThumbnail;\n\tFString playerGameCenterAvatarThumbnailUrl;\n\tFString playerSteamId;\n\tFString playerSteamName;\n\tFString playerSteamAvatar;\n\tFString playerSteamAvatarUrl;\n\tFString playerSteamAvatarThumbnail;\n\tFString playerSteamAvatarThumbnailUrl;\n\tFString playerTwitchId;\n\tFString playerTwitchName;\n\tFString playerTwitchAvatar;\n\tFString playerTwitchAvatarUrl;\n\tFString playerTwitchAvatarThumbnail;\n\tFString playerTwitchAvatarThumbnailUrl;\n\tFString playerDiscordId;\n\tFString playerDiscordName;\n\tFString playerDiscordAvatar;\n\tFString playerDiscordAvatarUrl;\n\tFString playerDiscordAvatarThumbnail;\n", "CodeBleu_score": 7.417786193510935}]}
{"instance_id": "85ea02df92a5", "generation_result": [{"code": "void UARRegisterView::OnRegisterClicked(){\n\t\t\n\t// Get the game instance\n\tUARGameInstance* GI = Cast<UARGameInstance>(GetOwningPlayer()->GetGameInstance());\n\t\n\t// Get the username, display name, and password from input fields\n\tFString UserName = UserNameBox->GetText().ToString();\n\tFString DisplayName = DisplayNameBox->GetText().ToString();\n\tFString Password = PasswordBox->GetText().ToString();\n\t\n\t// Check if any of these fields are empty and display a warning message if so\n\tif (UserName.Len() == 0) {\n\t\tWarrningText->SetText(FText::FromString(\"Username is empty.\"));\n\t\treturn;\n\t}\n\tif (DisplayName.Len() == 0) {\n\t\tWarrningText->SetText(FText::FromString(\"Display name is empty.\"));\n\t\treturn;\n\t}\n\tif (Password.Len() == 0) {\n\t\tWarrningText->SetText(FText::FromString(\"Password is empty.\"));\n\t\treturn;\n\t}\n\t\n\t// Hide the register button\n\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\t\n\t// Call the RegisterNewPlayer method from the game instance to register the new player\n\tGI->RegisterNewPlayer(UserName, DisplayName, Password);\n}", "CodeBleu_score": 78.47880083032553}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t\n\t// Get the text from the username and password box\n\tFString UserName = UserNameBox->GetText().ToString();\n\tFString DisplayName = DisplayNameBox->GetText().ToString();\n\tFString Password = PasswordBox->GetText().ToString();\n\n\t// Check if any of the fields are empty\n\tif (UserName.Len() == 0 || DisplayName.Len() == 0 || Password.Len() == 0) {\n\n\t\t// Display a warning message\n\t\tWarrningText->SetText(FText::FromString(\"Please fill out all fields\"));\n\n\t} else {\n\n\t\t// Hide the register button\n\t\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\n\t\t// Get the game instance\n\t\tAARGameMode* GI = Cast<AARGameMode>(GetOwningPlayer()->GetGameInstance());\n\n\t\t// Register the new player\n\t\tGI->RegisterNewPlayer(UserName, DisplayName, Password);\n\t}\n}", "CodeBleu_score": 59.93657261087242}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t\tFString UserName = UserNameBox->GetText().ToString();\n\tFString DisplayName = DisplayNameBox->GetText().ToString();\n\tFString Password = PasswordBox->GetText().ToString();\n\n\t// Check for empty fields\n\tif (UserName.Len() == 0 || DisplayName.Len() == 0 || Password.Len() == 0) {\n\t\tWarrningText->SetText(FText::FromString(\"Please fill out all fields\"));\n\t\treturn;\n\t}\n\n\t// Hide the register button\n\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\n\t// Register the new player\n\tARGameMode* GameMode = Cast<ARGameMode>(GetWorld()->GetAuthGameMode());\n\tARGameState* GameState = Cast<ARGameState>(GetWorld()->GetGameState());\n\tAARGameInstance* GI = Cast<AARGameInstance>(GetOwningPlayer()->GetGameInstance());\n\tGI->RegisterNewPlayer(GetOwningPlayer(), UserName, DisplayName, Password, GameMode->CurrentMapName, GameState->CurrentGameMode);\n}", "CodeBleu_score": 68.4460935173667}]}
{"instance_id": "b33bb5886dd9", "generation_result": [{"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t    if (InMod.TargetActor != nullptr) {\n        FHitResult EnemyHitResult;\n        FVector DamageLocation = InMod.TargetActor->GetActorLocation();\n        UGameplayStatics::ProjectWorldToScreen(GetOwningPlayerController(), DamageLocation, EnemyHitResult);\n        FloatingCombatText->SetInfo(FString::FromInt(InMod.NewValue), EnemyHitResult.Location);\n    }\n}", "CodeBleu_score": 34.771644924030745}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\tif (InMod.TargetActor) {\n\t\tFVector2D ScreenLocation;\n\t\tFHitResult HitResult;\n\t\tFVector DamageLocation = InMod.TargetActor->GetActorLocation();\n\t\tAPlayerController* PlayerController = GetOwningPlayerController();\n\t\tif (PlayerController) {\n\t\t\tPlayerController->ProjectWorldLocationToScreen(DamageLocation, ScreenLocation, true);\n\t\t\tFloatingCombatText->SetInfo(InMod.DamageValue, ScreenLocation);\n\t\t}\n\t}\n}", "CodeBleu_score": 38.921092363596756}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\tif(InMod.TargetActor) {\n\t\tFVector2D ScreenLocation;\n\t\tUGameplayStatics::ProjectWorldToScreen(GetWorld(), InMod.DamageLocation, ScreenLocation);\n\t\tFloatingCombatText->SetInfo(InMod.DamageValue, InMod.TargetActor->GetActorLocation(), ScreenLocation);\n\t}\n}", "CodeBleu_score": 28.839908957909188}]}
{"instance_id": "177d36e7e076", "generation_result": [{"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (AbilityInstance) {\n\t\tif (UARWeaponInventoryComponent* WeaponComponent = Cast<UARWeaponInventoryComponent>(AbilityInstance->GetOuter())) {\n\t\t\tif (AARCharacter* Character = Cast<AARCharacter>(WeaponComponent->GetOwner())) {\n\t\t\t\tif (Character->Role == ROLE_Authority) {\n\t\t\t\t\tMagazineUpgrade = DuplicateObject<UARMagazineUpgradeItem>(InMagazineUpgrade, this);\n\t\t\t\t\tMagazineUpgrade->AddToUpgradeValue(MagazineUpgradeValue);\n\t\t\t\t\tAbilityInstance->AddMagazineUpgrade(MagazineUpgrade);\n\t\t\t\t\tOnMagazineUpdateAdded(MagazineUpgrade);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 51.04434179074116}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (!AbilityInstance) {\n\t\treturn;\n\t}\n\n\tUARWeaponInventoryComponent* WeaponComponent = Cast<UARWeaponInventoryComponent>(GetOuter());\n\tif (WeaponComponent) {\n\t\tAARCharacter* OwningCharacter = Cast<AARCharacter>(WeaponComponent->GetOwner());\n\t\tif (OwningCharacter) {\n\t\t\tif (OwningCharacter->Role == ROLE_Authority) {\n\t\t\t\tMagazineUpgradeValue += InMagazineUpgrade->MagazineUpgradeValue;\n\t\t\t\tAbilityInstance->AddMagazineUpgrade(InMagazineUpgrade);\n\t\t\t}\n\t\t\tOnMagazineUpdateAdded(InMagazineUpgrade);\n\t\t}\n\t}\n}", "CodeBleu_score": 67.65210582184824}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (!AbilityInstance) {\n\t\treturn;\n\t}\n\n\tUARWeaponInventoryComponent* WeaponComponent = Cast<UARWeaponInventoryComponent>(GetOuter());\n\tif (!WeaponComponent) {\n\t\treturn;\n\t}\n\n\tAARCharacter* OwningCharacter = Cast<AARCharacter>(WeaponComponent->GetOwner());\n\tif (!OwningCharacter) {\n\t\treturn;\n\t}\n\n\tif (OwningCharacter->Role < ROLE_Authority) {\n\t\treturn;\n\t}\n\n\tUARMagazineUpgradeItem* MagazineUpgrade = DuplicateObject<UARMagazineUpgradeItem>(InMagazineUpgrade);\n\tif (!MagazineUpgrade) {\n\t\treturn;\n\t}\n\n\tMagazineUpgradeValue += MagazineUpgrade->MagazineUpgradeValue;\n\tAbilityInstance->AddMagazineUpgrade(MagazineUpgrade);\n\tOnMagazineUpdateAdded(MagazineUpgrade);\n}", "CodeBleu_score": 69.65526764545947}]}
{"instance_id": "404276da398b", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tif (LocalIndex < 0 || LocalIndex >= Abilities.Num()) {\n\t\treturn;\n\t}\n\n\tif (Abilities[LocalIndex].Ability) {\n\t\treturn;\n\t}\n\n\tif (InAbilityTag.Get() == nullptr) {\n\t\treturn;\n\t}\n\n\tif (OwnerCharacter == nullptr) {\n\t\treturn;\n\t}\n\n\tif (OwnerCharacter->IsPendingKill()) {\n\t\treturn;\n\t}\n\n\tif (OwnerCharacter->GetAbilityComp() == nullptr) {\n\t\treturn;\n\t}\n\n\tif (OwnerCharacter->GetAbilityComp()->BP_GetAbilityByHandle(InAbilityTag) == nullptr) {\n\t\treturn;\n\t}\n\n\tAbilities[LocalIndex].Ability = Cast<UGAAbilityBase>(OwnerCharacter->GetAbilityComp()->BP_GetAbilityByHandle(InAbilityTag));\n\tif (Abilities[LocalIndex].Ability) {\n\t\tAbilities[LocalIndex].Ability->SetItem(this);\n\t}\n}", "CodeBleu_score": 41.92554807295396}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tAARCharacter* Character = Cast<AARCharacter>(GetOwner());\n\tif (Character) {\n\t\tUGAAbilityComponent* AbilityComp = Character->GetAbilityComp();\n\t\tif (AbilityComp) {\n\t\t\tUARWeaponAbilityBase* Ability = AbilityComp->BP_GetAbilityByHandle(InAbilityTag, LocalIndex);\n\t\t\tif (Ability) {\n\t\t\t\tSetAbilityToItem(Ability);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 58.48747468364841}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tAARCharacter* Character = Cast<AARCharacter>(GetOwner());\n\tif (Character) {\n\t\tUGAAbilityComponent* AbilityComp = Character->GetAbilityComp();\n\t\tif (AbilityComp) {\n\t\t\tUARWeaponAbilityBase* Ability = Cast<UARWeaponAbilityBase>(AbilityComp->BP_GetAbilityByHandle(InAbilityTag, LocalIndex));\n\t\t\tif (Ability) {\n\t\t\t\tAbility->SetAbilityToItem(this);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 56.9887686215066}]}
{"instance_id": "2e97aab98981", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\tAARCharacter* Owner = Cast<AARCharacter>(GetOwner());\n\tif (Owner) {\n\t\tFARWeaponRPC ResetWeapon;\n\t\tResetWeapon.WeaponPosition = static_cast<EARWeaponPosition>(LocalIndex);\n\t\tResetWeapon.WeaponData = FARWeaponData();\n\t\tOwner->SetWeaponData(ResetWeapon);\n\t\tOwner->WeaponInventory->UpdateComponent(LocalIndex);\n\t\tif (Owner->GetEquippedWeapon() == LocalIndex) {\n\t\t\tOwner->Unequip();\n\t\t}\n\t}\n}", "CodeBleu_score": 50.36036195423089}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\tAARCharacter* Owner = Cast<AARCharacter>(GetOwner());\n\tif (Owner) {\n\t\tFARWeaponRPC WeaponRPC;\n\t\tWeaponRPC.WeaponData = FWeaponData();\n\t\tWeaponRPC.WeaponPosition = static_cast<EARWeaponPosition>(LocalIndex);\n\t\tOwner->SetWeapon(WeaponRPC);\n\t\tOwner->GetWeaponComponent()->UpdateWeapon(WeaponRPC);\n\t\tif (LocalIndex == Owner->GetWeaponComponent()->GetCurrentWeaponIndex()) {\n\t\t\tOwner->GetWeaponComponent()->Unequip();\n\t\t}\n\t}\n}", "CodeBleu_score": 47.03312656345967}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\tif (!Owner) {\n\t\treturn;\n\t}\n\n\tAARCharacter* Character = Cast<AARCharacter>(Owner);\n\tif (!Character) {\n\t\treturn;\n\t}\n\n\tFARWeaponRPC ResetWeaponRPC;\n\tResetWeaponRPC.WeaponData = FARWeaponData();\n\tResetWeaponRPC.WeaponPosition = static_cast<EARWeaponPosition>(LocalIndex);\n\tCharacter->SetWeapon(ResetWeaponRPC);\n\n\tif (LocalIndex == Character->GetCurrentWeaponIndex()) {\n\t\tCharacter->Unequip();\n\t}\n}", "CodeBleu_score": 40.90791401210379}]}
{"instance_id": "13cc35e5ecac", "generation_result": [{"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t    if (!IsRunningDedicatedServer()) {\n        GetMoviePlayer()->OnPrepareLoadingScreen().RemoveAll(this);\n    }\n}", "CodeBleu_score": 71.35653156759128}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\tif (!IsRunningDedicatedServer()) {\n\t\tGetMoviePlayer()->OnPrepareLoadingScreen().RemoveAll(this);\n\t}\n}", "CodeBleu_score": 72.1566962303026}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t    if (!IsRunningDedicatedServer()) {\n        GetMoviePlayer()->OnPrepareLoadingScreen().RemoveAll(this);\n    }\n}", "CodeBleu_score": 71.35653156759128}]}
{"instance_id": "2ee3ac60a8f3", "generation_result": [{"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\tUE_LOG(LogTemp, Log, TEXT(\"PreSetupLoadingScreen\"));\n\tif (GetDefault<ULoadingScreenSettings>()->IsEnabled()) {\n\t\tGetDefault<ULoadingScreenSettings>()->SetIsSetup(false);\n\t\tSetupLoadingScreen(GetDefault<ULoadingScreenSettings>());\n\t}\n}", "CodeBleu_score": 39.29617404087961}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\tUE_LOG(LogLoadingScreen, Log, TEXT(\"PreSetupLoadingScreen\"));\n\tif (ULoadingScreenSettings* LoadingScreenSettings = GetDefault<ULoadingScreenSettings>()) {\n\t\tif (LoadingScreenSettings->bEnabled) {\n\t\t\tUE_LOG(LogLoadingScreen, Log, TEXT(\"Loading Screen Enabled\"));\n\t\t\tbLoadingScreenSetup = false;\n\t\t\tSetupLoadingScreen(LoadingScreenSettings);\n\t\t}\n\t}\n}", "CodeBleu_score": 56.408675077034275}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\tUE_LOG(LogTemp, Display, TEXT(\"PreSetupLoadingScreen\"));\n\tif (UAsyncLoadingScreenLibrary::GetIsEnableLoadingScreen()) {\n\t\tULoadingScreenSettings* LoadingScreenSettings = ULoadingScreenSettings::GetDefault<ULoadingScreenSettings>();\n\t\tUAsyncLoadingScreenLibrary::SetStartup(false);\n\t\tUAsyncLoadingScreenLibrary::SetupLoadingScreen(LoadingScreenSettings);\n\t}\n}", "CodeBleu_score": 47.47793253617824}]}
{"instance_id": "c095588f550c", "generation_result": [{"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t    // Remove all existing background images\n    RemoveAllBackgroundImages();\n\n    // Get the default loading screen settings\n    ULoadingScreenSettings* LoadingScreenSettings = GetDefault<ULoadingScreenSettings>();\n    check(LoadingScreenSettings);\n\n    // Load and add images for the startup loading screen\n    TArray<UTexture2D*> StartupBackgroundImages;\n    for (const FString& ImagePath : LoadingScreenSettings->StartupLoadingScreen.Images) {\n        UTexture2D* Image = nullptr;\n        if (ImagePath.Len() > 0 && ImagePath.StartsWith(\"/Game\")) {\n            Image = LoadObject<UTexture2D>(nullptr, *ImagePath);\n        }\n        if (Image == nullptr) {\n            UE_LOG(LogLoadingScreen, Warning, TEXT(\"Failed to load startup background image %s\"), *ImagePath);\n        } else {\n            StartupBackgroundImages.Add(Image);\n        }\n    }\n    SetStartupBackgroundImages(StartupBackgroundImages);\n\n    // Load and add images for the default loading screen\n    TArray<UTexture2D*> DefaultBackgroundImages;\n    for (const FString& ImagePath : LoadingScreenSettings->DefaultLoadingScreen.Images) {\n        UTexture2D* Image = nullptr;\n        if (ImagePath.Len() > 0 && ImagePath.StartsWith(\"/Game\")) {\n            Image = LoadObject<UTexture2D>(nullptr, *ImagePath);\n        }\n        if (Image == nullptr) {\n            UE_LOG(LogLoadingScreen, Warning, TEXT(\"Failed to load default background image %s\"), *ImagePath);\n        } else {\n            DefaultBackgroundImages.Add(Image);\n        }\n    }\n    SetDefaultBackgroundImages(DefaultBackgroundImages);\n}", "CodeBleu_score": 48.56933913951082}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t    // Remove all existing background images\n    RemoveAllBackgroundImages();\n\n    // Get the loading screen settings\n    ULoadingScreenSettings* LoadingScreenSettings = GetDefault<ULoadingScreenSettings>();\n    if (LoadingScreenSettings) {\n        // Load and add images for the startup loading screen\n        for (const FString& StartupBackgroundImage : LoadingScreenSettings->StartupBackgroundImages) {\n            UTexture2D* LoadedImage = LoadImage(StartupBackgroundImage);\n            if (LoadedImage) {\n                StartupBackgroundImages.Add(LoadedImage);\n            }\n        }\n\n        // Load and add images for the default loading screen\n        for (const FString& DefaultBackgroundImage : LoadingScreenSettings->DefaultBackgroundImages) {\n            UTexture2D* LoadedImage = LoadImage(DefaultBackgroundImage);\n            if (LoadedImage) {\n                DefaultBackgroundImages.Add(LoadedImage);\n            }\n        }\n    }\n}", "CodeBleu_score": 63.474375173529594}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\tRemoveAllBackgroundImages();\n\n\tULoadingScreenSettings* LoadingScreenSettings = GetDefault<ULoadingScreenSettings>();\n\n\tif (LoadingScreenSettings) {\n\t\tfor (UTexture2D* Image : LoadingScreenSettings->DefaultBackgroundImages) {\n\t\t\tDefaultBackgroundImages.Add(Image);\n\t\t}\n\n\t\tfor (UTexture2D* Image : LoadingScreenSettings->StartupBackgroundImages) {\n\t\t\tStartupBackgroundImages.Add(Image);\n\t\t}\n\t}\n}", "CodeBleu_score": 41.03549705480496}]}
{"instance_id": "4ffd56e2a326", "generation_result": [{"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\tif (TextWidget) {\n\t\t// Get the current alpha value of the text\n\t\tfloat CurrentAlpha = TextWidget->GetColorAndOpacity().A;\n\n\t\t// If the text is currently fading in\n\t\tif (FadingIn) {\n\t\t\t// If the text has reached the maximum alpha value, reverse the fade direction\n\t\t\tif (CurrentAlpha >= MaxAlpha) {\n\t\t\t\tFadingIn = false;\n\t\t\t}\n\t\t}\n\t\t// If the text is currently fading out\n\t\telse {\n\t\t\t// If the text has reached the minimum alpha value, reverse the fade direction\n\t\t\tif (CurrentAlpha <= MinAlpha) {\n\t\t\t\tFadingIn = true;\n\t\t\t}\n\t\t}\n\n\t\t// Adjust the text's alpha value\n\t\tCurrentAlpha = FMath::Clamp(CurrentAlpha + (FadingIn ? FadeSpeed * InDeltaTime : -FadeSpeed * InDeltaTime), MinAlpha, MaxAlpha);\n\n\t\t// Set the new alpha value\n\t\tTextWidget->SetColorAndOpacity(FLinearColor(1.0f, 1.0f, 1.0f, CurrentAlpha));\n\t}\n\n\t// Continue animating\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 46.85503237716384}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\t//Adjust the alpha value of the text based on the elapsed time\n\tfloat Alpha = FMath::Clamp(InCurrentTime * AnimationSpeed, 0.0f, 1.0f);\n\t//Reverse the direction of the animation when the alpha reaches either extreme\n\tif (Alpha == 0.0f || Alpha == 1.0f) {\n\t\tAnimationSpeed *= -1.0f;\n\t}\n\t//Set the text's alpha value\n\tLoadingCompleteText->SetTextRenderColor(FLinearColor(1.0f, 1.0f, 1.0f, Alpha));\n\t//Return EActiveTimerReturnType::Continue to indicate the animation should continue\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 20.944789818029825}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\tfloat Delta = InDeltaTime * AnimationSpeed;\n\tfloat NewAlpha = FMath::Clamp(Alpha + Delta, 0.f, 1.f);\n\tif (NewAlpha == 0.f || NewAlpha == 1.f) {\n\t\tDelta = -Delta;\n\t}\n\tAlpha = NewAlpha;\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 21.929583551843514}]}
{"instance_id": "7420af124c78", "generation_result": [{"code": "bool FRaceAwaiter::await_ready(){\n\t\tData->Lock.lock();\n\tbool Ready = Data->Index != -1;\n\tData->Lock.unlock();\n\treturn Ready;\n}", "CodeBleu_score": 51.45202057832522}, {"code": "bool FRaceAwaiter::await_ready(){\n\t\tData->Lock.lock();\n\tbool Result = Data->Index != -1;\n\tData->Lock.unlock();\n\treturn Result;\n}", "CodeBleu_score": 51.742818685613756}, {"code": "bool FRaceAwaiter::await_ready(){\n\t\tData->Lock.lock\n\tif (Data->Index != -1) {\n\t\tData->Lock.unlock\n\t\treturn true\n\t}\n\tData->Lock.unlock\n\treturn false\n}", "CodeBleu_score": 55.54510667511041}]}
{"instance_id": "fab9fe81573a", "generation_result": [{"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tif (bCleanup) {\n\t\tauto* FindPathState = static_cast<FFindPathSharedPtr*>(State);\n\t\tif (FindPathState->IsValid()) {\n\t\t\tFindPathState->Get()->AbortAsyncFindPathRequest();\n\t\t\tFindPathState->Reset();\n\t\t}\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 32.66803035998925}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tFFindPathSharedPtr* FindPathSharedPtr = static_cast<FFindPathSharedPtr*>(State);\n\n\tif (FindPathSharedPtr->IsValid()) {\n\t\tif (bCleanup) {\n\t\t\tFindPathSharedPtr->Get()->AbortAsyncFindPathRequest();\n\t\t\tFindPathSharedPtr->Reset();\n\t\t}\n\t\treturn false;\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 31.079123823595122}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tauto* StatePtr = static_cast<FFindPathSharedPtr*>(State);\n\tif (StatePtr) {\n\t\tauto* State = StatePtr->Get();\n\t\tif (State) {\n\t\t\tif (bCleanup) {\n\t\t\t\tif (State->QueryID.IsValid()) {\n\t\t\t\t\tState->NS1->AbortAsyncFindPathRequest(State->QueryID);\n\t\t\t\t}\n\t\t\t\tdelete State;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}", "CodeBleu_score": 33.723110288037105}]}
{"instance_id": "0656af2cb3eb", "generation_result": [{"code": "void AudioListener2D::_notification(int p_what){\n\t\n\tswitch (p_what) {\n\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\n\t\t\tif (!is_part_of_edited_scene() && AudioServer::get_singleton()->get_listener() == AudioServer::INVALID_LISTENER_ID)\n\t\t\t\tmake_current();\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\n\t\t\tif (!is_part_of_edited_scene() && is_current())\n\t\t\t\tclear_current();\n\t\t} break;\n\t}\n}", "CodeBleu_score": 50.38782340047852}, {"code": "void AudioListener2D::_notification(int p_what){\n\t\n\tswitch (p_what) {\n\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\n\t\t\tif (!is_part_of_edited_scene() && AudioServer::get_singleton()->get_listener() != AudioServer::INVALID_LISTENER_ID)\n\t\t\t\tmake_current();\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\n\t\t\tif (!is_part_of_edited_scene() && is_current())\n\t\t\t\tclear_current();\n\t\t} break;\n\t}\n}", "CodeBleu_score": 50.35609257621345}, {"code": "void AudioListener2D::_notification(int p_what){\n\t\n\tswitch (p_what) {\n\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\n\t\t\tif (!is_part_of_edited_scene() && AudioServer::get_singleton()->get_listener() == AudioServer::INVALID_LISTENER_ID)\n\t\t\t\tmake_current();\n\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\n\t\t\tif (!is_part_of_edited_scene())\n\t\t\t\tclear_current();\n\n\t\t} break;\n\t}\n}", "CodeBleu_score": 50.77549903462775}]}
{"instance_id": "9aadd2c91e67", "generation_result": [{"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\n    ERR_FAIL_COND(!active);\n    ERR_FAIL_COND(!thread_exited);\n\n    int todo = p_frames;\n\n    while (todo) {\n\n        lock();\n\n        int to_mix = MIN(todo, buffer_size - mix_offset);\n\n        AudioRingBuffer::AudioData *data = audio_ring_buffer->request_write(to_mix);\n\n        if (data) {\n\n            AudioRingBuffer::AudioData *src_data = internal_buffer.request_read();\n\n            if (src_data) {\n\n                for (int i = 0; i < to_mix; i++) {\n\n                    data[i] = src_data[i];\n                }\n\n                internal_buffer.advance_read();\n            } else {\n\n                for (int i = 0; i < to_mix; i++) {\n\n                    data[i] = AudioRingBuffer::AudioData();\n                }\n            }\n\n            audio_ring_buffer->advance_write(to_mix);\n\n            todo -= to_mix;\n            mix_offset += to_mix;\n        }\n\n        unlock();\n\n        if (mix_offset >= buffer_size) {\n\n            if (audio_server_process_func) {\n                audio_server_process_func(p_frames, p_buffer);\n            }\n\n            mix_offset = 0;\n        }\n    }\n}", "CodeBleu_score": 55.1117160254193}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\n    if (!active || !thread_exited)\n        return;\n\n    int todo = p_frames;\n\n    while (todo) {\n\n        lock();\n\n        int to_mix = MIN(todo, mix_rate);\n\n        _THREAD_SAFE_CALL_\n\n        AudioServer::get_singleton()->_driver_process_chunk(to_mix, p_buffer);\n\n        p_buffer += to_mix * 2;\n        todo -= to_mix;\n\n        unlock();\n    }\n}", "CodeBleu_score": 35.907230864897556}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\n\tif (!active || !thread_exited)\n\t\treturn;\n\n\tint todo = p_frames;\n\n\twhile (todo) {\n\n\t\tint to_mix = MIN(todo, buffer_size);\n\n\t\tlock();\n\t\tint ret = audio_server_process(to_mix, p_buffer);\n\t\tunlock();\n\n\t\tERR_FAIL_COND(ret != to_mix);\n\n\t\tp_buffer += to_mix * 2;\n\t\ttodo -= to_mix;\n\t}\n}", "CodeBleu_score": 36.898111699223264}]}
{"instance_id": "56df08c77b69", "generation_result": [{"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\tERR_FAIL_COND(gravity_point_count == 0);\n\n\tif (gravity_is_point) {\n\t\t// Point gravity.\n\t\tVector2 point_dir = gravity_vector;\n\t\tfloat point_distance_sq = 0;\n\t\tfloat point_radius_sq = gravity_point_radius * gravity_point_radius;\n\n\t\tfor (int i = 0; i < gravity_point_count; i++) {\n\t\t\tVector2 point_offset = gravity_points[i] - p_position;\n\t\t\tfloat point_distance_sq_temp = point_offset.length_squared();\n\n\t\t\tif (i == 0 || point_distance_sq_temp < point_distance_sq) {\n\t\t\t\tpoint_dir = point_offset.normalized();\n\t\t\t\tpoint_distance_sq = point_distance_sq_temp;\n\t\t\t}\n\t\t}\n\n\t\tfloat gravity_strength = gravity;\n\n\t\tif (gravity_distance_scale > 0) {\n\t\t\tfloat gravity_distance = MAX(sqrt(point_distance_sq), gravity_distance_scale);\n\t\t\tgravity_strength *= gravity_distance * gravity_distance_scale;\n\t\t}\n\n\t\tif (point_radius_sq > 0) {\n\t\t\tfloat t = CLAMP((point_distance_sq - point_radius_sq) / point_radius_sq, 0, 1);\n\t\t\tgravity_strength *= (1 - t);\n\t\t}\n\n\t\tr_gravity = point_dir * gravity_strength;\n\t} else {\n\t\t// Uniform gravity.\n\t\tr_gravity = gravity_vector * gravity;\n\t}\n}", "CodeBleu_score": 41.784003736605534}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\n\tif (gravity_is_point) {\n\n\t\tVector2 rel = p_position - gravity_vec;\n\t\tfloat dist = rel.length();\n\t\tif (dist == 0)\n\t\t\tdist = 0.00001;\n\t\tfloat g = gravity * gravity_distance_scale / (dist * dist);\n\t\tr_gravity += rel.normalized() * g;\n\n\t} else {\n\n\t\tr_gravity += gravity_vec * gravity;\n\t}\n}", "CodeBleu_score": 34.07501800362539}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\n\tif (gravity_is_point) {\n\n\t\tVector2 rel = p_position - gravity_vec;\n\t\tfloat dist = rel.length();\n\t\tif (dist == 0) {\n\t\t\tr_gravity = Vector2();\n\t\t} else {\n\t\t\tfloat g = gravity * gravity_distance_scale / Math::pow(dist, 2);\n\t\t\tr_gravity = rel.normalized() * g;\n\t\t}\n\t} else {\n\t\tr_gravity = gravity_vec.normalized() * gravity;\n\t}\n}", "CodeBleu_score": 43.54113405804514}]}
{"instance_id": "f8c60f8d0caa", "generation_result": [{"code": "void GodotBody2D::wakeup_neighbours(){\n\t\tList<Constraint2D*> *constraints = get_constraints();\n\tList<Constraint2D*>::Element *E = constraints->front();\n\twhile (E) {\n\t\tConstraint2D *c = E->get();\n\t\tRID body_a = c->get_body_a();\n\t\tRID body_b = c->get_body_b();\n\t\tbool a_active = PhysicsServer2D::get_singleton()->body_is_active(body_a);\n\t\tbool b_active = PhysicsServer2D::get_singleton()->body_is_active(body_b);\n\t\tif (a_active && b_active) {\n\t\t\tE = E->next();\n\t\t\tcontinue;\n\t\t}\n\t\tif (!a_active) {\n\t\t\tPhysicsServer2D::get_singleton()->body_set_active(body_a, true);\n\t\t}\n\t\tif (!b_active) {\n\t\t\tPhysicsServer2D::get_singleton()->body_set_active(body_b, true);\n\t\t}\n\t\tE = E->next();\n\t}\n}", "CodeBleu_score": 37.67861490775432}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\t\t// wake up neighbouring bodies\n\tList<Constraint2D *> *c = constraints.ptr();\n\tfor (List<Constraint2D *>::Element *E = c->front(); E; E = E->next()) {\n\t\tif (E->get()->get_body_count() > 0) {\n\t\t\tfor (int i = 0; i < E->get()->get_body_count(); i++) {\n\t\t\t\tif (E->get()->get_body_ptr(i)->get_mode() == MODE_RIGID && !E->get()->get_body_ptr(i)->is_active()) {\n\t\t\t\t\tE->get()->get_body_ptr(i)->set_active(true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 35.03833780713601}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\t\t//ERR_FAIL_COND(!is_inside_tree());\n\t//ERR_FAIL_COND(mode != MODE_RIGID);\n\n\t//List<Constraint2D *> *c_list = &constraint_list;\n\n\t//for (List<Constraint2D *>::Element *E = c_list->front(); E; E = E->next()) {\n\t//\tConstraint2D *c = E->get();\n\t//\tBody2D *B = c->get_body_ptr();\n\t//\tif (B && B != this && B->get_mode() == MODE_RIGID && !B->is_active()) {\n\t//\t\tB->set_active(true);\n\t//\t}\n\t//}\n}", "CodeBleu_score": 1.5759908941150158}]}
{"instance_id": "0c6f6c00da9a", "generation_result": [{"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (!is_inside_tree()) {\n\t\treturn;\n\t};\n\n\tSpatial *space = Object::cast_to<Spatial>(get_parent());\n\tERR_FAIL_NULL(space);\n\n\tget_space()->area_add_to_monitor_query_list(this);\n}", "CodeBleu_score": 35.63915929038179}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\t\n    ERR_FAIL_COND(!is_inside_tree());\n    if (monitor_query_list.in_list())\n        return;\n\n    get_space()->area_add_to_monitor_query_list(&monitor_query_list);\n}", "CodeBleu_score": 47.51322462431407}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\t\n    ERR_FAIL_NULL(get_space());\n\n    if (!area_add_to_monitor_query_list) {\n\n        get_space()->area_add_to_monitor_query_list(this);\n        area_add_to_monitor_query_list = true;\n    }\n}", "CodeBleu_score": 57.97986077355222}]}
{"instance_id": "efc39df0e3a3", "generation_result": [{"code": "void GodotBody3D::_update_transform_dependent(){\n\t\n\tTransform xform = get_transform();\n\n\t// Recalculate the principal inertia axes, and retransform the inertia tensor\n\t// to account for the new orientation.\n\tVector3 x = xform.basis.get_axis(0);\n\tVector3 y = xform.basis.get_axis(1);\n\tVector3 z = xform.basis.get_axis(2);\n\n\treal_t x2 = x.length_squared();\n\treal_t y2 = y.length_squared();\n\treal_t z2 = z.length_squared();\n\n\t// Set the principal inertia axes to the body's current transform.\n\tprincipal_inertia_axes_set(x, y, z);\n\n\t// Re-calculate the center of mass.\n\tcenter_of_mass = xform.xform(body_param.center_of_mass);\n\n\t// Re-calculate the inertia tensor.\n\tinertia = xform.basis.xform_inv(body_param.inverse_inertia).xform(xform.basis);\n\n\t// Update the physics engine.\n\t_body_set_state(BODY_STATE_TRANSFORM, xform);\n}", "CodeBleu_score": 40.54625992679986}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\t\n\tTransform xform = get_transform();\n\txform.orthonormalize();\n\tset_transform(xform);\n\n\tif (mode == MODE_RIGID) {\n\n\t\tPhysicsServer::get_singleton()->body_set_state(get_rid(), PhysicsServer::BODY_STATE_TRANSFORM, xform);\n\t}\n\n\tif (mass == 0)\n\t\treturn;\n\n\tTransform principal_xform = xform;\n\tprincipal_xform.basis = principal_xform.basis.orthonormalized();\n\tprincipal_inertia_axes = principal_xform.basis;\n\tprincipal_xform.basis.inverse();\n\n\tif (PhysicsServer::get_singleton()->body_test_motion(get_rid(), xform.origin - principal_xform.origin, principal_xform.basis.xform_inv(xform.basis[0]).normalized())) {\n\t\t//print_line(\"motion ok\");\n\t} else {\n\t\t//print_line(\"motion NOT OK\");\n\t}\n\n\t//print_line(\"principal axes: \"+principal_xform.basis.xform(Vector3(1,0,0))+\" - \"+principal_xform.basis.xform(Vector3(0,1,0))+\" - \"+principal_xform.basis.xform(Vector3(0,0,1)));\n\n\t//now do the inertia tensor\n\n\tprincipal_xform.basis = principal_inertia_axes;\n\n\treal_t m = mass;\n\tif (PhysicsServer::get_singleton()->body_get_mode(get_rid()) == PhysicsServer::BODY_MODE_STATIC)\n\t\tm = 1.0; //easier to understand\n\n\tinertia = principal_xform.xform(inertia);\n\tinertia = inertia.diagonal() * m;\n\tinertia = principal_xform.basis.xform_inv(inertia);\n\n\tPhysicsServer::get_singleton()->", "CodeBleu_score": 42.12016652044431}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\t\n\tTransform xform = get_transform();\n\n\t// Recalculate the center of mass\n\tVector3 xform_basis_x = xform.basis.get_axis(0);\n\tVector3 xform_basis_y = xform.basis.get_axis(1);\n\tVector3 xform_basis_z = xform.basis.get_axis(2);\n\n\t// Calculate the center of mass\n\tVector3 center_of_mass = xform.origin + xform_basis_x * shape_param.center_of_mass.x + xform_basis_y * shape_param.center_of_mass.y + xform_basis_z * shape_param.center_of_mass.z;\n\n\t// Calculate the principal inertia axes\n\tVector3 principal_inertia_axes_x = xform_basis_x * shape_param.principal_inertia_axes.x.x + xform_basis_y * shape_param.principal_inertia_axes.x.y + xform_basis_z * shape_param.principal_inertia_axes.x.z;\n\tVector3 principal_inertia_axes_y = xform_basis_x * shape_param.principal_inertia_axes.y.x + xform_basis_y * shape_param.principal_inertia_axes.y.y + xform_basis_z * shape_param.principal_inertia_axes.y.z;\n\tVector3 principal_inertia_axes_z = xform_basis_x * shape_param.principal_inertia_axes.z.x + xform_basis_y * shape_param.principal_inertia_axes.z.y + xform_basis_z * shape_param.principal_inertia_axes.z.z;\n\n\t// Calculate the inverse inertia tensor\n\tBasis inverse_inertia_tensor_basis = Basis(principal_inertia_axes_x,", "CodeBleu_score": 37.18233964647135}]}
{"instance_id": "aebafb4094a1", "generation_result": [{"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\n\tif (p_update_mix_time)\n\t\tupdate_mix_time(p_frames);\n\n\tif (!AudioServer::get_singleton())\n\t\treturn;\n\n\tAudioServer::get_singleton()->_driver_process(p_frames, p_buffer);\n}", "CodeBleu_score": 67.9028940701143}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\n    if (p_update_mix_time)\n        update_mix_time(p_frames);\n\n    if (!AudioServer::get_singleton())\n        return;\n\n    AudioServer::get_singleton()->_driver_process(p_frames, p_buffer);\n}", "CodeBleu_score": 67.15384645607494}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\n\tif (p_update_mix_time)\n\t\tupdate_mix_time(p_frames);\n\n\tAudioServer *as = AudioServer::get_singleton();\n\tif (as)\n\t\tas->_driver_process(p_frames, p_buffer);\n}", "CodeBleu_score": 61.8058942910743}]}
{"instance_id": "160bb23e8010", "generation_result": [{"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\tif (!p_feed.is_valid()) {\n\t\tprint_verbose(\"Cannot remove feed, feed is null.\");\n\t\treturn;\n\t}\n\n\tif (feeds.size() == 0) {\n\t\tprint_verbose(\"Cannot remove feed, no feeds are active.\");\n\t\treturn;\n\t}\n\n\tfor (int i = 0; i < feeds.size(); i++) {\n\t\tif (feeds[i] == p_feed) {\n\t\t\tprint_verbose(\"Removing feed with id: \" + itos(p_feed->get_id()) + \" and name: \" + p_feed->get_name() + \".\");\n\t\t\tfeeds.remove_at(i);\n\t\t\temit_signal(\"feed_removed\", p_feed->get_id());\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 59.14686240456719}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\tif (!feeds.has(p_feed)) {\n\t\treturn;\n\t}\n\n\tprint_verbose(\"Removing feed \" + p_feed->get_name() + \" from the CameraServer.\");\n\tfeeds.remove_at(feeds.find(p_feed));\n\temit_signal(\"feed_removed\", p_feed->get_id());\n}", "CodeBleu_score": 34.451446532563054}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\tprint_verbose(\"Removing feed \" + p_feed->get_name() + \" (\" + itos(p_feed->get_id()) + \") at position \" + itos(p_feed->get_position()));\n\n\tfeeds.remove_at(p_feed->get_position());\n\n\temit_signal(\"feed_removed\", p_feed->get_id());\n\n\t//Update the position of all feeds after the removed feed\n\tfor (int i = p_feed->get_position(); i < feeds.size(); i++) {\n\t\tfeeds[i]->set_position(i);\n\t}\n}", "CodeBleu_score": 53.97860749124369}]}
{"instance_id": "bef3cf110c45", "generation_result": [{"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t\tEaseRateAction *easeRateAction = new EaseRateAction();\n\tif (easeRateAction) {\n\t\tif (easeRateAction->initWithAction(action, rate)) {\n\t\t\teaseRateAction->autorelease();\n\t\t\treturn easeRateAction;\n\t\t}\n\t\tCC_SAFE_DELETE(easeRateAction);\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 62.27771406094097}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t\tEaseRateAction *pRet = new EaseRateAction();\n\tif (pRet != NULL && pRet->initWithAction(action, rate))\n\t{\n\t\tpRet->autorelease();\n\t\treturn pRet;\n\t}\n\tCC_SAFE_DELETE(pRet);\n\treturn NULL;\n}", "CodeBleu_score": 46.767249639713505}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t\tCCASSERT(action != NULL, \"\");\n\tEaseRateAction *pRet = new EaseRateAction();\n\tif (pRet && pRet->initWithAction(action, rate)) {\n\t\tpRet->autorelease();\n\t\treturn pRet;\n\t}\n\tCC_SAFE_DELETE(pRet);\n\treturn NULL;\n}", "CodeBleu_score": 53.53149878153531}]}
{"instance_id": "97fc6f86ad54", "generation_result": [{"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t    if (node->getName() == childName) {\n        return node;\n    }\n    for (Node* child : node->getChildren()) {\n        Node* result = findChildByNameRecursively(child, childName);\n        if (result != nullptr) {\n            return result;\n        }\n    }\n    return nullptr;\n}", "CodeBleu_score": 54.2408522314934}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t    if (node->getName() == childName) {\n        return node;\n    }\n    for (auto child : node->getChildren()) {\n        Node* found = findChildByNameRecursively(child, childName);\n        if (found) {\n            return found;\n        }\n    }\n    return nullptr;\n}", "CodeBleu_score": 54.866928970431836}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t    // Check if the current node's name matches the target name\n    if (node->getName() == childName) {\n        return node;\n    }\n    // If not, recursively search through the node's children\n    for (Node* child : node->getChildren()) {\n        Node* match = findChildByNameRecursively(child, childName);\n        // If a matching child node is found, return it\n        if (match != nullptr) {\n            return match;\n        }\n    }\n    // If no matching node is found, return nullptr\n    return nullptr;\n}", "CodeBleu_score": 54.21720665154206}]}
{"instance_id": "5fcbe1fedcd2", "generation_result": [{"code": "void Animate3D::removeFromMap(){\n\t    if (_target) {\n        auto mapIter = s_runningAnimates.find(_target);\n        if (mapIter != s_runningAnimates.end()) {\n            auto& actions = mapIter->second;\n            auto iter = std::find(actions.begin(), actions.end(), this);\n            if (iter != actions.end()) {\n                actions.erase(iter);\n            }\n        }\n        \n        mapIter = s_fadeInAnimates.find(_target);\n        if (mapIter != s_fadeInAnimates.end()) {\n            auto& actions = mapIter->second;\n            auto iter = std::find(actions.begin(), actions.end(), this);\n            if (iter != actions.end()) {\n                actions.erase(iter);\n            }\n        }\n        \n        mapIter = s_fadeOutAnimates.find(_target);\n        if (mapIter != s_fadeOutAnimates.end()) {\n            auto& actions = mapIter->second;\n            auto iter = std::find(actions.begin(), actions.end(), this);\n            if (iter != actions.end()) {\n                actions.erase(iter);\n            }\n        }\n    }\n}", "CodeBleu_score": 54.51198708484696}, {"code": "void Animate3D::removeFromMap(){\n\t    if (_target) {\n        auto it = s_runningAnimates.find(_target);\n        if (it != s_runningAnimates.end()) {\n            auto& v = it->second;\n            for (auto it2 = v.begin(); it2 != v.end();) {\n                if ((*it2) == this) {\n                    v.erase(it2);\n                    break;\n                }\n                ++it2;\n            }\n        }\n        \n        it = s_fadeOutAnimates.find(_target);\n        if (it != s_fadeOutAnimates.end()) {\n            auto& v = it->second;\n            for (auto it2 = v.begin(); it2 != v.end();) {\n                if ((*it2) == this) {\n                    v.erase(it2);\n                    break;\n                }\n                ++it2;\n            }\n        }\n        \n        it = s_fadeInAnimates.find(_target);\n        if (it != s_fadeInAnimates.end()) {\n            auto& v = it->second;\n            for (auto it2 = v.begin(); it2 != v.end();) {\n                if ((*it2) == this) {\n                    v.erase(it2);\n                    break;\n                }\n                ++it2;\n            }\n        }\n    }\n}", "CodeBleu_score": 61.95742553664804}, {"code": "void Animate3D::removeFromMap(){\n\t    auto it = s_runningAnimates.find(this);\n    if (it != s_runningAnimates.end())\n    {\n        s_runningAnimates.erase(it);\n    }\n\n    it = s_fadeOutAnimates.find(this);\n    if (it != s_fadeOutAnimates.end())\n    {\n        s_fadeOutAnimates.erase(it);\n    }\n\n    it = s_fadeInAnimates.find(this);\n    if (it != s_fadeInAnimates.end())\n    {\n        s_fadeInAnimates.erase(it);\n    }\n}", "CodeBleu_score": 49.55428044284428}]}
{"instance_id": "db8d394f7bc4", "generation_result": [{"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t    Animation3D* animation = nullptr;\n    auto key = fileName + animationName;\n    animation = Animation3DCache::getInstance()->getAnimation(key);\n\n    if (animation == nullptr) {\n        animation = new (std::nothrow) Animation3D();\n        if (animation && animation->initWithFile(fileName, animationName)) {\n            Animation3DCache::getInstance()->addAnimation(animation, key);\n            animation->autorelease();\n        }\n        else {\n            CC_SAFE_DELETE(animation);\n        }\n    }\n    return animation;\n}", "CodeBleu_score": 63.613174632089496}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t    CCASSERT(!fileName.empty(), \"File name must be specified\");\n    CCASSERT(!animationName.empty(), \"Animation name must be specified\");\n\n    auto fullPath = FileUtils::getInstance()->fullPathForFilename(fileName);\n    auto key = fullPath + animationName;\n    Animation3D* animation = Animation3DCache::getInstance()->getAnimation(key);\n    if (animation)\n        return animation;\n\n    animation = new Animation3D();\n    animation->autorelease();\n    if (animation->initWithFile(fileName, animationName))\n        return animation;\n\n    CC_SAFE_DELETE(animation);\n    return nullptr;\n}", "CodeBleu_score": 60.524727870036735}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t    auto key = fileName + animationName;\n    auto animation = Animation3DCache::getInstance()->getAnimation(key);\n    if (animation != nullptr) {\n        return animation;\n    }\n\n    animation = new (std::nothrow) Animation3D();\n    if (animation && animation->initWithFile(fileName, animationName)) {\n        Animation3DCache::getInstance()->addAnimation(animation, key);\n        animation->autorelease();\n        return animation;\n    }\n\n    CC_SAFE_DELETE(animation);\n    return nullptr;\n}", "CodeBleu_score": 64.66133245942328}]}
{"instance_id": "cdf28d98d3ff", "generation_result": [{"code": "void Animation3DCache::removeUnusedAnimation(){\n\t\tauto itor = _animations.begin();\n\twhile (itor != _animations.end()) {\n\t\tauto animation = itor->second;\n\t\tif (animation->getReferenceCount() == 1) {\n\t\t\tanimation->release();\n\t\t\titor = _animations.erase(itor);\n\t\t}\n\t\telse {\n\t\t\t++itor;\n\t\t}\n\t}\n}", "CodeBleu_score": 59.68700490280283}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\t    //auto it = _animations.begin();\n    //while (it != _animations.end()) {\n    //    if (it->second->getReferenceCount() == 1) {\n    //        it->second->release();\n    //        _animations.erase(it++);\n    //    } else {\n    //        ++it;\n    //    }\n    //}\n}", "CodeBleu_score": 2.1272773458620904}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\t    for (auto itor = _animations.begin(); itor != _animations.end(); ) {\n        if (itor->second->getReferenceCount() == 1) {\n            itor->second->release();\n            itor = _animations.erase(itor);\n        } else {\n            ++itor;\n        }\n    }\n}", "CodeBleu_score": 92.60157507307294}]}
{"instance_id": "de7926871eb8", "generation_result": [{"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t    BillBoard *billboard = new BillBoard();\n    if (billboard && billboard->initWithTexture(texture, mode)) {\n        billboard->autorelease();\n        return billboard;\n    }\n    CC_SAFE_DELETE(billboard);\n    return nullptr;\n}", "CodeBleu_score": 72.67510380861259}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t    BillBoard *billboard = new BillBoard();\n    if (billboard && billboard->initWithTexture(texture, mode)) {\n        billboard->autorelease();\n        return billboard;\n    }\n    CC_SAFE_DELETE(billboard);\n    return nullptr;\n}", "CodeBleu_score": 72.67510380861259}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t\tBillBoard *billboard = new BillBoard();\n\tif (billboard && billboard->initWithTexture(texture, mode)) {\n\t\tbillboard->autorelease();\n\t\treturn billboard;\n\t}\n\tCC_SAFE_DELETE(billboard);\n\treturn nullptr;\n}", "CodeBleu_score": 68.12906790049259}]}
{"instance_id": "eef1c2206d68", "generation_result": [{"code": "bool Bundle3D::load(const std::string& path){\n\t    if (path.empty()) {\n        CCLOG(\"[WARNING] Bundle3D::load: path should be non-empty string\");\n        return false;\n    }\n\n    if (path == _path) {\n        return true;\n    }\n\n    std::string ext = FileUtils::getInstance()->getFileExtension(path);\n    if (ext == \".c3t\") {\n        _path = path;\n        return loadJson(path);\n    } else if (ext == \".c3b\") {\n        _path = path;\n        return loadBinary(path);\n    } else {\n        CCLOG(\"[WARNING] Bundle3D::load: invalid file type\");\n        return false;\n    }\n}", "CodeBleu_score": 58.7939890380128}, {"code": "bool Bundle3D::load(const std::string& path){\n\t    if (path.empty()) {\n        CCLOG(\"[WARNING]: Bundle3D::load() - invalid path.\");\n        return false;\n    }\n    if (_path == path) {\n        return true;\n    }\n    _path = path;\n\n    const std::string extension = FileUtils::getInstance()->getFileExtension(path);\n    if (extension == \".c3t\") {\n        return loadJson(path);\n    } else if (extension == \".c3b\") {\n        return loadBinary(path);\n    } else {\n        CCLOG(\"[WARNING]: Bundle3D::load() - invalid format: %s\", extension.c_str());\n        return false;\n    }\n}", "CodeBleu_score": 53.11173105728124}, {"code": "bool Bundle3D::load(const std::string& path){\n\t    if (path.empty()) {\n        CCLOG(\"[WARNING] Bundle3D::load(): path is empty.\");\n        return false;\n    }\n\n    if (path == _path) {\n        CCLOG(\"[WARNING] Bundle3D::load(): the path has been loaded.\");\n        return true;\n    }\n\n    // reset\n    _path.clear();\n    _vertexDatas.clear();\n    _skins.clear();\n    _animationClips.clear();\n    _meshDatas.clear();\n    _materialDatas.clear();\n    _textureDatas.clear();\n    _skeletonDatas.clear();\n    _lightDatas.clear();\n    _cameraDatas.clear();\n    _terrainDatas.clear();\n    _particleDatas.clear();\n\n    // determine the type of the file\n    auto ext = FileUtils::getInstance()->getFileExtension(path);\n    if (ext == \".c3t\") {\n        if (loadJson(path)) {\n            _path = path;\n            return true;\n        }\n    } else if (ext == \".c3b\") {\n        if (loadBinary(path)) {\n            _path = path;\n            return true;\n        }\n    } else {\n        CCLOG(\"[WARNING] Bundle3D::load(): invalid format.\");\n    }\n\n    return false;\n}", "CodeBleu_score": 52.69459030547578}]}
{"instance_id": "37b6acea681e", "generation_result": [{"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t    // Reset skin data\n    skindata->resetData();\n\n    // Load skin data\n    if (_skinDataBinary) {\n        return loadSkinDataBinary(skindata);\n    } else {\n        return loadSkinDataJson(skindata);\n    }\n}", "CodeBleu_score": 91.57408993107175}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t    // Reset the skin data first.\n    skindata->resetData();\n\n    // Check whether the skin data is in binary format or not.\n    if (skindata->isBinaryData()) {\n        // Load the skin data in binary format.\n        return loadSkinDataBinary(skindata);\n    } else {\n        // Load the skin data in JSON format.\n        return loadSkinDataJson(skindata);\n    }\n}", "CodeBleu_score": 86.79848815746412}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t    if (skindata == nullptr) {\n        CCLOG(\"Warning: Failed to load skin data - invalid SkinData object\");\n        return false;\n    }\n    \n    skindata->resetData();\n    \n    std::string jsonpath = _skinPath + skindata->skin_id + \".skin.json\";\n    std::string binarypath = _skinPath + skindata->skin_id + \".skin\";\n    \n    if (FileUtils::getInstance()->isFileExist(jsonpath)) {\n        return loadSkinDataJson(jsonpath, skindata);\n    } else if (FileUtils::getInstance()->isFileExist(binarypath)) {\n        return loadSkinDataBinary(binarypath, skindata);\n    } else {\n        CCLOG(\"Warning: Failed to load skin data - file doesn't exist\");\n        return false;\n    }\n}", "CodeBleu_score": 48.00850849106205}]}
{"instance_id": "97449825e4ef", "generation_result": [{"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t    AudioDecoder* thiz = reinterpret_cast<AudioDecoder*>(datasource);\n\n    // Calculate the number of bytes to read.\n    size_t bytesToRead = std::min(size * nmemb, thiz->_fileData.getSize() - thiz->_filePosition);\n\n    // Copy the data into the provided buffer.\n    memcpy(ptr, thiz->_fileData.getBytes() + thiz->_filePosition, bytesToRead);\n\n    // Update the current file position.\n    thiz->_filePosition += bytesToRead;\n\n    // Return the number of bytes read.\n    return bytesToRead;\n}", "CodeBleu_score": 54.666150240721734}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t    AudioDecoder* thiz = (AudioDecoder*)datasource;\n    size_t ret = 0;\n    size_t readSize = 0;\n    size_t remainingSize = 0;\n\n    remainingSize = thiz->_fileData.getSize() - thiz->_filePos;\n    readSize = std::min(size * nmemb, remainingSize);\n    if (readSize > 0) {\n        memcpy(ptr, thiz->_fileData.getBytes() + thiz->_filePos, readSize);\n        thiz->_filePos += readSize;\n        ret = readSize;\n    }\n    return ret;\n}", "CodeBleu_score": 59.245620169059556}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t    AudioDecoder* thiz = (AudioDecoder*)datasource;\n    size_t bytesToRead = std::min(size * nmemb, thiz->_fileData.getSize() - thiz->_fileData.getBytes());\n    memcpy(ptr, thiz->_fileData.getData() + thiz->_fileData.getBytes(), bytesToRead);\n    thiz->_fileData.setBytes(thiz->_fileData.getBytes() + bytesToRead);\n    return bytesToRead;\n}", "CodeBleu_score": 56.245512095034556}]}
{"instance_id": "0f4db164ba5d", "generation_result": [{"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t    _pcmBuffer = std::make_shared<std::vector<char>>();\n    _pcmBuffer->reserve(4096);\n}", "CodeBleu_score": 47.51732990244886}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t    _pcmBuffer = std::make_shared<std::vector<char>>();\n    _pcmBuffer->reserve(4096);\n}", "CodeBleu_score": 47.51732990244886}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t    _pcmBuffer = std::make_shared<std::vector<char>>();\n    _pcmBuffer->reserve(4096);\n}", "CodeBleu_score": 47.51732990244886}]}
{"instance_id": "0f88663615c6", "generation_result": [{"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t    std::lock_guard<std::mutex> lock(s_DownloaderAndroid_Mutex);\n    auto it = sDownloaderMap.find(id);\n    if (it != sDownloaderMap.end()) {\n        return it->second;\n    }\n    return nullptr;\n}", "CodeBleu_score": 66.92192123620096}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t    std::lock_guard<std::mutex> lock(s_DownloaderMutex);\n    auto it = sDownloaderMap.find(id);\n    if (it != sDownloaderMap.end()) {\n        return it->second;\n    }\n    return nullptr;\n}", "CodeBleu_score": 66.98294178206083}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t    std::lock_guard<std::mutex> lock(sDownloaderMapMutex);\n    auto it = sDownloaderMap.find(id);\n    if (it != sDownloaderMap.end()) {\n        return it->second;\n    }\n    return nullptr;\n}", "CodeBleu_score": 67.09018166283364}]}
{"instance_id": "a5aafaaa944c", "generation_result": [{"code": "function M.playMusic(filename, isLoop)\n\t    local instance = cc.SimpleAudioEngine:getInstance()\n    if isLoop ~= nil then\n        instance:playMusic(filename, isLoop)\n    else\n        instance:playMusic(filename)\n    end", "CodeBleu_score": 52.049243058546345}, {"code": "function M.playMusic(filename, isLoop)\n\t\tlocal engine = cc.SimpleAudioEngine:getInstance()\n\tif isLoop ~= nil then\n\t\tengine:playMusic(filename, isLoop)\n\telse\n\t\tengine:playMusic(filename)\n\tend", "CodeBleu_score": 49.748369735086726}, {"code": "function M.playMusic(filename, isLoop)\n\t\tlocal loop = isLoop or false\n\tcc.SimpleAudioEngine:getInstance():playMusic(filename, loop)", "CodeBleu_score": 43.67674843513186}]}
{"instance_id": "16f2ad4bb4e8", "generation_result": [{"code": "function ccs.TriggerObj:detect()\n\tend\n", "CodeBleu_score": 4.586004115149374}, {"code": "function ccs.TriggerObj:detect()\n\tend\n", "CodeBleu_score": 4.586004115149374}, {"code": "function ccs.TriggerObj:detect()\n\tend\n", "CodeBleu_score": 4.586004115149374}]}
{"instance_id": "e73b10418cb6", "generation_result": [{"code": "function ccs.TriggerObj:removeAll()\n\tend\n", "CodeBleu_score": 4.959221278886332}, {"code": "function ccs.TriggerObj:removeAll()\n\tend\n", "CodeBleu_score": 4.959221278886332}, {"code": "function ccs.TriggerObj:removeAll()\n\tend\n", "CodeBleu_score": 4.959221278886332}]}
{"instance_id": "d5a1333d794d", "generation_result": [{"code": "function BasicCollider:hurtEffect(target)\n\t    local hurtEffect = cc.BillBoard:create(\"Images/hurtEffect.png\")\n    hurtEffect:setCameraMask(cc.CameraFlag.USER1)\n    hurtEffect:setScale(0.5)\n    hurtEffect:setPosition3D(cc.V3(0, 0, 0))\n    hurtEffect:runAction(cc.Sequence:create(\n        cc.Animate:create(cc.animationCache:getAnimation(\"hurtAnimation\")),\n        cc.RemoveSelf:create()\n    ))\n    target:addChild(hurtEffect)", "CodeBleu_score": 58.82034746252345}, {"code": "function BasicCollider:hurtEffect(target)\n\t    local hurtEffect = cc.BillBoard:create(\"Images/effect_hurt.png\")\n    local animation = cc.animationCache:getAnimation(\"hurtAnimation\")\n    hurtEffect:setCameraMask(cc.CameraFlag.USER2)\n    hurtEffect:setScale(0.5)\n    hurtEffect:setPosition3D(cc.V3(0, 0, 0))\n    hurtEffect:runAction(cc.Sequence:create(cc.Animate:create(animation), cc.RemoveSelf:create()))\n    target:addChild(hurtEffect)", "CodeBleu_score": 61.67759868585571}, {"code": "function BasicCollider:hurtEffect(target)\n\t    local hurtEffect = cc.BillBoard:create(\"hurtEffect.png\")\n    hurtEffect:setCameraMask(cc.CameraFlag.USER1)\n    hurtEffect:setScale(0.5)\n    hurtEffect:setPosition3D(cc.V3(0, 0, 0))\n    hurtEffect:runAction(cc.Sequence:create(\n        cc.Animate:create(cc.animationCache:getAnimation(\"hurtAnimation\")),\n        cc.RemoveSelf:create()\n    ))\n    target:addChild(hurtEffect)", "CodeBleu_score": 59.16790128519012}]}
{"instance_id": "f478d7e70ea6", "generation_result": [{"code": "function MageNormalAttack:onTimeOut()\n\t    self.part1:stopSystem()\n    self.part2:stopSystem()\n    local seq = cc.Sequence:create(\n        cc.DelayTime:create(0.1),\n        cc.RemoveSelf:create()\n    )\n    self:runAction(seq)\n    self.part1 = ParticleManager:getInstance():getPlistData(\"magic.plist\")\n    self.part1:setPosition(cc.p(0, 0))\n    self.part1:setRotation3D(cc.vec3(0, 0, 0))\n    self.part1:setScale(1)\n    self.part1:setCameraMask(cc.CameraFlag.USER1)\n    self:addChild(self.part1)\n    self.part1:startSystem()\n    self.part2 = ParticleManager:getInstance():getPlistData(\"magic.plist\")\n    self.part2:setPosition(cc.p(0, 0))\n    self.part2:setRotation3D(cc.vec3(0, 0, 0))\n    self.part2:setScale(1)\n    self.part2:setCameraMask(cc.CameraFlag.USER1)\n    self:addChild(self.part2)\n    self.part2:startSystem()\n    self.sp = cc.Sprite:create(\"sprite/mage_normal_attack.png\")\n    self.sp:setPosition(cc.p(0, 0))\n    self.sp:setRotation3D(cc.vec3(0, 0, 0))\n    self.sp:setScale(1)\n    self.sp:setCameraMask(cc.CameraFlag.USER1)\n    self:addChild(self.sp)\n    self.sp:runAction(cc.Sequence:create(\n        cc.FadeOut:create(0.5),\n        cc.RemoveSelf:create()\n    ))\n    self.sp:setTextureRect(cc.rect(0, 0, 120, 120))\n    self.sp:setScale(1.5)", "CodeBleu_score": 52.23407330004398}, {"code": "function MageNormalAttack:onTimeOut()\n\t    self.part1:stopSystem()\n    self.part2:stopSystem()\n    self:runAction(cc.Sequence:create(cc.DelayTime:create(0.5),cc.RemoveSelf:create()))\n\n    local magic = cc.ParticleSystemQuad:create(ParticleManager:getInstance():getPlistData(\"magic_normal\"))\n    magic:setScale(0.75)\n    self:addChild(magic, 10)\n    magic:setPositionZ(1)\n    magic:setGlobalZOrder(10)\n    magic:setTextureWithRect(cc.SpriteFrameCache:getInstance():getSpriteFrame(\"magic_normal.png\"):getTexture(),cc.SpriteFrameCache:getInstance():getSpriteFrame(\"magic_normal.png\"):getRect())\n    magic:setRotation3D(cc.vec3(0, 0, 180))\n    self.sp:setScale(0.5)\n    self.sp:runAction(cc.Sequence:create(cc.FadeOut:create(0.5),cc.RemoveSelf:create()))", "CodeBleu_score": 61.3686103539594}, {"code": "function MageNormalAttack:onTimeOut()\n\t    self.part1:stopSystem()\n    self.part2:stopSystem()\n\n    local delay = cc.DelayTime:create(1)\n    local remove = cc.RemoveSelf:create()\n    local seq = cc.Sequence:create(delay, remove)\n    self:runAction(seq)\n\n    local magic = cc.ParticleSystemQuad:create(ParticleManager:getInstance():getPlistData(\"mage_magic\"))\n    magic:setPosition(cc.p(self.x, self.y))\n    magic:setGlobalZOrder(self.zOrder + 1)\n    magic:setScale(0.5)\n    self:addChild(magic)\n    self.part1 = magic\n\n    local magicf = cc.ParticleSystemQuad:create(ParticleManager:getInstance():getPlistData(\"mage_fire\"))\n    magicf:setPosition(cc.p(self.x, self.y))\n    magicf:setGlobalZOrder(self.zOrder + 1)\n    magicf:setScale(0.5)\n    self:addChild(magicf)\n    self.part2 = magicf\n\n    self.sp:setTextureRect(cc.SpriteFrameCache:getInstance():getSpriteFrame(\"mage_fire_01.png\"):getRect())\n    self.sp:runAction(cc.FadeOut:create(0.5))\n    self.sp:setScale(0.5)", "CodeBleu_score": 57.84604951211516}]}
{"instance_id": "d735c4ea6358", "generation_result": [{"code": "function BattlefieldUI:heroDead(hero)\n\t    if hero.name == \"Archer\" then\n        self.ArcherAngryFullSignal:setVisible(false)\n        self.ArcherAngryClone:setVisible(false)\n        self.Archer:setVisible(false)\n        self.ArcherFrame:setVisible(false)\n        self.Archer:setGreyShader()\n        self.ArcherFrame:setGreyShader()\n    elseif hero.name == \"Mage\" then\n        self.MageAngryFullSignal:setVisible(false)\n        self.MageAngryClone:setVisible(false)\n        self.Mage:setVisible(false)\n        self.MageFrame:setVisible(false)\n        self.Mage:setGreyShader()\n        self.MageFrame:setGreyShader()\n    elseif hero.name == \"Knight\" then\n        self.KnightAngryFullSignal:setVisible(false)\n        self.KnightAngryClone:setVisible(false)\n        self.Knight:setVisible(false)\n        self.KnightFrame:setVisible(false)\n        self.Knight:setGreyShader()\n        self.KnightFrame:setGreyShader()\n    end", "CodeBleu_score": 53.40619228945778}, {"code": "function BattlefieldUI:heroDead(hero)\n\t    if hero.name == \"Knight\" then\n        self.KnightAngryClone:setVisible(false)\n        self.KnightAngryFullSignal:setVisible(false)\n        self.KnightFrame:setGreyShader()\n        self.KnightImage:setGreyShader()\n    elseif hero.name == \"Mage\" then\n        self.MageAngryClone:setVisible(false)\n        self.MageAngryFullSignal:setVisible(false)\n        self.MageFrame:setGreyShader()\n        self.MageImage:setGreyShader()\n    elseif hero.name == \"Archer\" then\n        self.ArcherAngryClone:setVisible(false)\n        self.ArcherAngryFullSignal:setVisible(false)\n        self.ArcherFrame:setGreyShader()\n        self.ArcherImage:setGreyShader()\n    end", "CodeBleu_score": 52.03119300314009}, {"code": "function BattlefieldUI:heroDead(hero)\n\t    if hero:getType() == \"Knight\" then\n        self.KnightAngryFullSignal:setVisible(false)\n        self.KnightAngryClone:setVisible(false)\n        self.KnightAngryClone:setGreyShader()\n        self.KnightAngryFrame:setGreyShader()\n    elseif hero:getType() == \"Mage\" then\n        self.MageAngryFullSignal:setVisible(false)\n        self.MageAngryClone:setVisible(false)\n        self.MageAngryClone:setGreyShader()\n        self.MageAngryFrame:setGreyShader()\n    elseif hero:getType() == \"Archer\" then\n        self.ArcherAngryFullSignal:setVisible(false)\n        self.ArcherAngryClone:setVisible(false)\n        self.ArcherAngryClone:setGreyShader()\n        self.ArcherAngryFrame:setGreyShader()\n    end", "CodeBleu_score": 53.85355338033926}]}
{"instance_id": "009f167d3ab2", "generation_result": [{"code": "local function moveCamera(dt)\n\t    local camera = cc.Director:getInstance():getRunningScene():getDefaultCamera()\n    local heroes = List.getSize(getFocusPointOfHeros()) > 0\n    local special = List.getSize(getPosTable()) > 0\n    if special then\n        local pos = cc.pLerp(camera:getPosition(), getPosTable()[1], dt * 0.5)\n        camera:setPosition(pos)\n        camera:lookAt(getPosTable()[2], cc.V3(0, 1, 0))\n    elseif heroes then\n        local pos = cc.pLerp(camera:getPosition(), getFocusPointOfHeros(), dt * 0.5)\n        camera:setPosition(pos)\n        camera:lookAt(getFocusPointOfHeros(), cc.V3(0, 1, 0))\n    end", "CodeBleu_score": 36.10426807778391}, {"code": "local function moveCamera(dt)\n\t  if camera.isSpecialCameraActive then\n    camera.position = camera.position:lerp(camera.specialCameraTarget, camera.specialCameraSpeed * dt)\n    camera:lookAt(camera.specialCameraLookAtPoint)\n  else\n    local focusPoint = getFocusPointOfHeros()\n    camera.position = camera.position:lerp(focusPoint, camera.normalCameraSpeed * dt)\n    camera:lookAt(focusPoint)\n  end", "CodeBleu_score": 23.711321047462363}, {"code": "local function moveCamera(dt)\n\t\tlocal camera = cc.Director:getInstance():getRunningScene():getDefaultCamera()\n\tlocal heroes = List.getSize(List.getHeros()) > 0\n\tlocal specialCamera = List.getSize(List.getSpecialCameras()) > 0\n\tlocal specialTarget = List.getSize(List.getSpecialTargets()) > 0\n\tlocal specialLookAt = List.getSize(List.getSpecialLookAts()) > 0\n\tlocal specialCameraPosition = List.getSize(List.getSpecialCameraPositions()) > 0\n\tlocal specialCameraLookAt = List.getSize(List.getSpecialCameraLookAts()) > 0\n\tlocal specialCamera3D = List.getSize(List.getSpecialCamera3Ds()) > 0\n\tlocal specialCamera3DLookAt = List.getSize(List.getSpecialCamera3DLookAts()) > 0\n\tlocal specialCamera3DPosition = List.getSize(List.getSpecialCamera3DPositions()) > 0\n\tlocal specialCamera3DLookAt = List.getSize(List.getSpecialCamera3DLookAts()) > 0\n\tlocal specialCamera3DZoom = List.getSize(List.getSpecialCamera3DZooms()) > 0\n\tlocal specialCamera3DLookAt = List.getSize(List.getSpecialCamera3DLookAts()) > 0\n\tlocal specialCamera3DPosition = List.getSize(List.getSpecialCamera3DPositions()) > 0\n\tlocal specialCamera3DLookAt = List.getSize(List.getSpecialCamera3DLookAts()) > 0\n\tlocal specialCamera3DZoom = List.getSize(List.getSpecialCamera3DZooms()) > 0\n\tlocal specialCamera3DLookAt = List.getSize(List.getSpecialCamera3DLookAts()) > 0\n\tlocal specialCamera3DPosition = List.getSize(List.getSpecialCamera3DPositions()) > 0\n\tlocal specialCamera3DLookAt = List.getSize(List.getSpecialCamera3DLookAts()) > 0\n\tlocal specialCamera3DZoom = List.getSize(List.getSpecialCamera3", "CodeBleu_score": 21.803861556193528}]}
{"instance_id": "f7f5e7fe1dc2", "generation_result": [{"code": "local function updateParticlePos()\n\t    for i = 1, HeroManager.getNumHeroes() do\n        local hero = HeroManager.getHero(i)\n        local effectNode = hero:getEffectNode()\n        if effectNode then\n            local pos = getPosTable(hero)\n            effectNode:setPosition(pos)\n        end\n    end", "CodeBleu_score": 44.50026972562875}, {"code": "local function updateParticlePos()\n\t\tfor i = 1, HeroManager.numHeroes do\n\t\tlocal hero = HeroManager.getHero(i)\n\t\tif hero.effectNode then\n\t\t\thero.effectNode:setPosition(hero:getPosTable())\n\t\tend\n\tend", "CodeBleu_score": 41.74316324659219}, {"code": "local function updateParticlePos()\n\t\tfor i, hero in pairs(HeroManager.heroes) do\n\t\tif hero.effectNode then\n\t\t\thero.effectNode:setPosition(hero:getPosTable())\n\t\tend\n\tend", "CodeBleu_score": 23.020312434786213}]}
{"instance_id": "77829ef7341e", "generation_result": [{"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t    local hero = self.layer:getChildByTag(100)\n    local raceType = hero:getRaceType()\n    if raceType == 1 then\n        ccexp.AudioEngine:play2d(self.knightAudio, false, 1)\n    elseif raceType == 2 then\n        ccexp.AudioEngine:play2d(self.archerAudio, false, 1)\n    elseif raceType == 3 then\n        ccexp.AudioEngine:play2d(self.mageAudio, false, 1)\n    end", "CodeBleu_score": 55.06132814795084}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t    local hero = self.layer:getChildByTag(heroTag)\n    local raceType = hero:getRaceType()\n    if raceType == \"Knight\" then\n        ccexp.AudioEngine:play2d(audio.Knight_Rotate)\n    elseif raceType == \"Archer\" then\n        ccexp.AudioEngine:play2d(audio.Archer_Rotate)\n    elseif raceType == \"Mage\" then\n        ccexp.AudioEngine:play2d(audio.Mage_Rotate)\n    end", "CodeBleu_score": 53.67260818877513}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t    local hero = self.layer:getChildByTag(100)\n    local heroRaceType = hero:getRaceType()\n    if heroRaceType == 0 then\n        ccexp.AudioEngine:play2d(self.audioPathKnight)\n    elseif heroRaceType == 1 then\n        ccexp.AudioEngine:play2d(self.audioPathArcher)\n    elseif heroRaceType == 2 then\n        ccexp.AudioEngine:play2d(self.audioPathMage)\n    end", "CodeBleu_score": 50.36404665998777}]}
{"instance_id": "2b35fdb15a13", "generation_result": [{"code": "function GameMaster:AddHeros()\n\t\t--Create and position the Knight\n\tknight = Knight:create()\n\tknight:setPosition(cc.p(display.width/2,display.height/2))\n\tcurrentLayer:addChild(knight)\n\tknight:idleMode()\n\tList.pushlast(HeroManager,knight)\n\t\n\t--Create and position the Mage\n\tmage = Mage:create()\n\tmage:setPosition(cc.p(display.width/2,display.height/2))\n\tcurrentLayer:addChild(mage)\n\tmage:idleMode()\n\tList.pushlast(HeroManager,mage)\n\t\n\t--Create and position the Archer\n\tarcher = Archer:create()\n\tarcher:setPosition(cc.p(display.width/2,display.height/2))\n\tcurrentLayer:addChild(archer)\n\tarcher:idleMode()\n\tList.pushlast(HeroManager,archer)", "CodeBleu_score": 60.38965075988546}, {"code": "function GameMaster:AddHeros()\n\t\n\t--Create a Knight, Mage, and Archer and position them at specific locations\n\tknight = Knight:create()\n\tknight:setPosition(cc.p(display.cx - 100, display.cy))\n\tcurrentLayer:addChild(knight)\n\tknight:idleMode()\n\tList.pushlast(HeroManager, knight)\n\n\tmage = Mage:create()\n\tmage:setPosition(cc.p(display.cx + 100, display.cy))\n\tcurrentLayer:addChild(mage)\n\tmage:idleMode()\n\tList.pushlast(HeroManager, mage)\n\n\tarcher = Archer:create()\n\tarcher:setPosition(cc.p(display.cx, display.cy + 100))\n\tcurrentLayer:addChild(archer)\n\tarcher:idleMode()\n\tList.pushlast(HeroManager, archer)", "CodeBleu_score": 66.45612077771398}, {"code": "function GameMaster:AddHeros()\n\t\t--Create a Knight, Mage, and Archer\n\tknight = Knight:create()\n\tmage = Mage:create()\n\tarcher = Archer:create()\n\t\n\t--Position each hero at a specific location\n\tknight:setPosition(display.contentCenterX - 100, display.contentCenterY + 100)\n\tmage:setPosition(display.contentCenterX, display.contentCenterY + 100)\n\tarcher:setPosition(display.contentCenterX + 100, display.contentCenterY + 100)\n\t\n\t--Add each hero to the current layer\n\tcurrentLayer:addChild(knight)\n\tcurrentLayer:addChild(mage)\n\tcurrentLayer:addChild(archer)\n\t\n\t--Set each hero to idle mode\n\tknight:idleMode()\n\tmage:idleMode()\n\tarcher:idleMode()\n\t\n\t--Push each hero to the HeroManager list\n\tList.pushlast(HeroManager, knight)\n\tList.pushlast(HeroManager, mage)\n\tList.pushlast(HeroManager, archer)", "CodeBleu_score": 60.31250210838526}]}
{"instance_id": "cdfbc82ff3cd", "generation_result": [{"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat:new()\n\tboss:setCameraMask(utils:cameraMask(\"enemy\"))\n\tself.currentMap:getLayer(\"Enemies\"):addChild(boss)\n\tboss:setPosition(self.currentMap:getLayer(\"Enemies\"):getObject(\"boss_spawn\")):setFacing(1)\n\tboss:disableAI()\n\tboss:bounceOut()\n\tboss:enableAI()\n\tself.monsterManager:addMonster(boss)", "CodeBleu_score": 31.125552553938963}, {"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat()\n\tboss.cameraMask = {true, true}\n\tself.layer:addChild(boss)\n\tboss.x = 160\n\tboss.y = 240\n\tboss.facing = \"left\"\n\tboss:setAIEnabled(false)\n\tboss:bounceOut()\n\tboss:setAIEnabled(true)\n\tMonsterManager:addMonster(boss)", "CodeBleu_score": 27.64160897470428}, {"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat()\n\tboss:setCameraMask(cc.CameraFlag.USER1)\n\tself:getCurrentLayer():addChild(boss)\n\tboss:setPosition(self.bossSpawnPosition)\n\tboss:setFacingDirection(self.bossSpawnDirection)\n\tboss:setAIEnabled(false)\n\tboss:bounceOut()\n\tboss:setAIEnabled(true)\n\tMonsterManager:addMonster(boss)", "CodeBleu_score": 29.705486711933688}]}
{"instance_id": "fa7b402853bb", "generation_result": [{"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal animation3d = cc.Animation3D:create(file)\n\tlocal animate3d = cc.Animate3D:create(animation3d, begin, finish)\n\tanimate3d:setSpeed(speed)\n\tanimate3d:retain()\n\treturn animate3d", "CodeBleu_score": 75.57713964898959}, {"code": "function createAnimation(file, begin, finish, speed)\n\t    local animation = cc.Animation3D:create(file)\n    local animate3d = cc.Animate3D:create(animation, begin, finish)\n    animate3d:setSpeed(speed)\n    animate3d:retain()\n    return animate3d", "CodeBleu_score": 72.22400568363562}, {"code": "function createAnimation(file, begin, finish, speed)\n\t    local animation = cc.Animation3D:create(file)\n    local animate3d = cc.Animate3D:create(animation, begin, finish)\n    animate3d:setSpeed(speed)\n    animate3d:retain()\n    return animate3d", "CodeBleu_score": 72.22400568363562}]}
{"instance_id": "0725f2413b6b", "generation_result": [{"code": "function removeAll(table)\n\t\tfor i=1, #table do \n\t\ttable[i] = nil \n\tend", "CodeBleu_score": 32.631813610748225}, {"code": "function removeAll(table)\n\t    for i = #table, 1, -1 do\n        table[i] = nil\n    end", "CodeBleu_score": 37.06566914476821}, {"code": "function removeAll(table)\n\t    for k, v in pairs(table) do\n        table[k] = nil\n    end", "CodeBleu_score": 41.767152453620426}]}
{"instance_id": "526d10bb37bb", "generation_result": [{"code": "function delayExecute(target, func, delay)\n\t    local sequence = cc.Sequence:create(cc.DelayTime:create(delay), cc.CallFunc:create(func))\n    target:runAction(sequence)", "CodeBleu_score": 60.74327655775594}, {"code": "function delayExecute(target, func, delay)\n\t    local sequence = cc.Sequence:create(cc.DelayTime:create(delay), cc.CallFunc:create(func))\n    target:runAction(sequence)", "CodeBleu_score": 60.74327655775594}, {"code": "function delayExecute(target, func, delay)\n\t    local sequence = cc.Sequence:create(cc.DelayTime:create(delay), cc.CallFunc:create(func))\n    target:runAction(sequence)", "CodeBleu_score": 60.74327655775594}]}
{"instance_id": "3b277bd3d0d0", "generation_result": [{"code": "function LoadingScene:addLoadingText(layer)\n\t    -- create the \"loading\" text labels\n    local loading = cc.Label:createWithTTF(\"loading...\", \"fonts/Marker Felt.ttf\", 24)\n    local percent = cc.Label:createWithTTF(\"0%\", \"fonts/Marker Felt.ttf\", 24)\n\n    -- position the labels on the screen\n    loading:setPosition(cc.p(self._layer:getContentSize().width / 2, self._layer:getContentSize().height / 2 + 20))\n    percent:setPosition(cc.p(self._layer:getContentSize().width / 2, self._layer:getContentSize().height / 2 - 20))\n\n    -- add the labels to the layer\n    layer:addChild(loading)\n    layer:addChild(percent)\n\n    -- save the labels so that they can be accessed from outside this function\n    self._loading = {loading, percent}", "CodeBleu_score": 35.87569543132526}, {"code": "function LoadingScene:addLoadingText(layer)\n\t    local function createLabel(text, x, y)\n        local label = cc.Label:createWithTTF(text, \"fonts/Marker Felt.ttf\", 30)\n        label:setPosition(x, y)\n        label:setColor(cc.c4b(0, 0, 0, 255))\n        return label\n    end\n\n    self._loading = {}\n    self._loading.percent = createLabel(\"0%\", display.cx, display.cy + 200)\n    self._loading.message = createLabel(\"Loading...\", display.cx, display.cy + 160)\n\n    layer:addChild(self._loading.percent)\n    layer:addChild(self._loading.message)", "CodeBleu_score": 38.26135743079392}, {"code": "function LoadingScene:addLoadingText(layer)\n\t    local label = cc.Label:createWithTTF(self._loadingText, self._fontName, self._fontSize)\n    label:setPosition(cc.p(self._width / 2, self._height / 2))\n    label:setColor(cc.c4b(0, 0, 0, 255))\n    layer:addChild(label)\n    self._loading = label", "CodeBleu_score": 23.876859620175832}]}
{"instance_id": "68250ae97644", "generation_result": [{"code": "function MainMenuScene.create()\n\t\tlocal scene = MainMenuScene.new()\n\tscene:createLayer()\n\tscene:addChild(scene.layer)\n\treturn scene", "CodeBleu_score": 57.49588988684005}, {"code": "function MainMenuScene.create()\n\t\tlocal scene = CCScene:create()\n\tscene:addChild(MainMenuScene.createLayer())\n\treturn scene", "CodeBleu_score": 50.95297277234402}, {"code": "function MainMenuScene.create()\n\t    local scene = MainMenuScene.new()\n    scene:addChild(scene:createLayer())\n    return scene", "CodeBleu_score": 58.71931794317384}]}
{"instance_id": "81470efbb6ff", "generation_result": [{"code": "local function collision(object)\n\n\t    --[[\n    The function solveCollision(object1, object2) is used to resolve collisions between two objects. It checks if the objects are alive and if the first object is not a projectile. If the objects are alive and the first object is not a projectile, it checks if the two objects are colliding. If they are colliding, it calls the collide function of the first object, passing the second object as a parameter. It then calls the collide function of the second object, passing the first object as a parameter.\n    ]]\n    local function solveCollision(object1, object2)\n        if object1.isAlive and object2.isAlive and not object1.isProjectile then\n            if checkCollision(object1, object2) then\n                object1:collide(object2)\n                object2:collide(object1)\n            end\n        end\n    end\n \n    --[[\n    The function checkCollision(object1, object2) is used to check if two objects are colliding. It first checks if the x-coordinates of the two objects are within a certain distance of each other. If they are, it checks if the y-coordinates of the two objects are within a certain distance of each other. If both of these conditions are true, it returns true. Otherwise, it returns false.\n    ]]\n    local function checkCollision(object1, object2)\n        if math.abs(object1.x - object2.x) < object1.width + object2.width and\n           math.abs(object1.y - object2.y) < object1.height + object2.height then\n            return true\n        end\n        return false\n    end\n \n    --[[\n    The function checkCollision(object1, object2) is used to check if two objects are colliding. It first checks if the x-coordinates of the two objects are within a certain distance of each other. If they are, it checks if the y-coordinates of the two objects are within a certain distance of each other. If both of these conditions are true, it returns true. Otherwise, it returns false.\n    ]]\n    local function checkCollision(object1, object2)\n        if math.abs(object1.x - object2.", "CodeBleu_score": 36.31180458211162}, {"code": "local function collision(object)\n\n\t  -- check for collisions with monsters\n  local monsters = MonsterManager.getMonsters()\n  for i = 1, #monsters do\n    local monster = monsters[i]\n    if monster.isAlive and monster:collidesWith(object) then\n      solveCollision(monster, object)\n    end\n  end\n \n  -- check for collisions with heroes\n  local heroes = HeroManager.getHeroes()\n  for i = 1, #heroes do\n    local hero = heroes[i]\n    if hero.isAlive and hero:collidesWith(object) then\n      solveCollision(hero, object)\n    end\n  end", "CodeBleu_score": 48.4510006678071}, {"code": "local function collision(object)\n\n\t    local function solveCollision(object, otherObject)\n        local o1 = object\n        local o2 = otherObject\n        local x1 = o1.x + o1.width/2\n        local y1 = o1.y + o1.height/2\n        local x2 = o2.x + o2.width/2\n        local y2 = o2.y + o2.height/2\n        local dx = x2 - x1\n        local dy = y2 - y1\n        local distance = math.sqrt(dx*dx + dy*dy)\n        if distance < o1.radius + o2.radius then\n            local angle = math.atan2(dy, dx)\n            local targetX = x1 + math.cos(angle) * (o1.radius + o2.radius)\n            local targetY = y1 + math.sin(angle) * (o1.radius + o2.radius)\n            local ax = (targetX - x1) * o1.mass\n            local ay = (targetY - y1) * o1.mass\n            o1.vx = o1.vx + ax / (o1.mass + o2.mass)\n            o1.vy = o1.vy + ay / (o1.mass + o2.mass)\n            o2.vx = o2.vx - ax / (o1.mass + o2.mass)\n            o2.vy = o2.vy - ay / (o1.mass + o2.mass)\n        end\n    end\n \n    -- Check for collisions with heroes\n    for hero in HeroManager:heroIterator() do\n        solveCollision(object, hero)\n    end\n \n    -- Check for collisions with monsters\n    for monster in MonsterManager:monsterIterator() do\n        solveCollision(object, monster)\n    end", "CodeBleu_score": 38.359065265428235}]}
{"instance_id": "f8915bebdc0e", "generation_result": [{"code": "function collisionDetect(dt)\n\t    -- HeroManager\n    for i = #HeroManager.list, 1, -1 do\n        local hero = HeroManager.list[i]\n        if hero.isAlive then\n            -- Collision detection\n            for j = #MonsterManager.list, 1, -1 do\n                local monster = MonsterManager.list[j]\n                if monster.isAlive then\n                    if hero:collision(monster) then\n                        hero.isAlive = false\n                        monster.isAlive = false\n                        hero:setPosition(hero.x, hero.y)\n                        monster:setPosition(monster.x, monster.y)\n                        hero:remove()\n                        monster:remove()\n                        break\n                    end\n                end\n            end\n            -- Boundary check\n            if hero:isOutOfBound() then\n                hero.isAlive = false\n                hero:setPosition(hero.x, hero.y)\n                hero:remove()\n            end\n        else\n            table.remove(HeroManager.list, i)\n        end\n    end\n    -- MonsterManager\n    for i = #MonsterManager.list, 1, -1 do\n        local monster = MonsterManager.list[i]\n        if monster.isAlive then\n            -- Boundary check\n            if monster:isOutOfBound() then\n                monster.isAlive = false\n                monster:setPosition(monster.x, monster.y)\n                monster:remove()\n            end\n        else\n            table.remove(MonsterManager.list, i)\n        end\n    end", "CodeBleu_score": 41.45651502802864}, {"code": "function collisionDetect(dt)\n\t\t--iterate through HeroManager list in reverse order\n\tfor i = #HeroManager, 1, -1 do\n\t\tlocal hero = HeroManager[i]\n\t\tif hero.isAlive then\n\t\t\t--check if hero is colliding with monster\n\t\t\tfor j = 1, #MonsterManager do\n\t\t\t\tlocal monster = MonsterManager[j]\n\t\t\t\tif monster.isAlive then\n\t\t\t\t\tif hero:collision(monster) then\n\t\t\t\t\t\thero:hit()\n\t\t\t\t\t\tmonster:hit()\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\t\t--check if hero is out of bound\n\t\t\tif hero:isOutOfBound() then\n\t\t\t\thero:hit()\n\t\t\tend\n\t\t\t--update hero position\n\t\t\tif hero.isAlive then\n\t\t\t\thero:move(dt)\n\t\t\tend\n\t\telse\n\t\t\t--remove hero from HeroManager list\n\t\t\ttable.remove(HeroManager, i)\n\t\tend\n\tend\n\t--iterate through MonsterManager list in reverse order\n\tfor i = #MonsterManager, 1, -1 do\n\t\tlocal monster = MonsterManager[i]\n\t\tif monster.isAlive then\n\t\t\t--check if monster is out of bound\n\t\t\tif monster:isOutOfBound() then\n\t\t\t\tmonster:hit()\n\t\t\tend\n\t\t\t--update monster position\n\t\t\tif monster.isAlive then\n\t\t\t\tmonster:move(dt)\n\t\t\tend\n\t\telse\n\t\t\t--remove monster from MonsterManager list\n\t\t\ttable.remove(MonsterManager, i)\n\t\tend\n\tend", "CodeBleu_score": 44.660925030561735}, {"code": "function collisionDetect(dt)\n\t\t-- Iterate through HeroManager and MonsterManager lists in reverse order\n\tfor i = #HeroManager, 1, -1 do\n\t\tlocal hero = HeroManager[i]\n\t\tif hero:isAlive() then\n\t\t\t-- Check if hero collides with any monster\n\t\t\tfor j = #MonsterManager, 1, -1 do\n\t\t\t\tlocal monster = MonsterManager[j]\n\t\t\t\tif monster:isAlive() then\n\t\t\t\t\tif hero:collision(monster) then\n\t\t\t\t\t\thero:setAlive(false)\n\t\t\t\t\t\tmonster:setAlive(false)\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\t\t-- Check if hero is out of boundary\n\t\t\tif hero:isOutOfBound() then\n\t\t\t\thero:setAlive(false)\n\t\t\tend\n\t\t\t-- Update hero position\n\t\t\thero:setPosition(hero.x + hero.vx * dt, hero.y + hero.vy * dt)\n\t\telse\n\t\t\t-- Remove dead hero from HeroManager\n\t\t\ttable.remove(HeroManager, i)\n\t\tend\n\tend\n\t-- Iterate through MonsterManager list in reverse order\n\tfor i = #MonsterManager, 1, -1 do\n\t\tlocal monster = MonsterManager[i]\n\t\tif monster:isAlive() then\n\t\t\t-- Check if monster is out of boundary\n\t\t\tif monster:isOutOfBound() then\n\t\t\t\tmonster:setAlive(false)\n\t\t\tend\n\t\t\t-- Update monster position\n\t\t\tmonster:setPosition(monster.x + monster.vx * dt, monster.y + monster.vy * dt)\n\t\telse\n\t\t\t-- Remove dead monster from MonsterManager\n\t\t\ttable.remove(MonsterManager, i)\n\t\tend\n\tend", "CodeBleu_score": 44.10994072263552}]}
{"instance_id": "fc081bb122f5", "generation_result": [{"code": "function Actor:specialAttack()\n\t\tlocal attack = self.specialAttack\n\tlocal collider = BasicCollider.create(self.position, self.facing, attack.range, attack.width, attack.height, attack.colliderType, attack.damage)\n\tself:addCollider(collider)\n\tself:playSpecialAttackSoundEffects()", "CodeBleu_score": 37.186032234878}, {"code": "function Actor:specialAttack()\n\t\tif self.specialAttackCollider then\n\t\tself.specialAttackCollider:destroy()\n\tend\n\tlocal collider = BasicCollider.create(self.specialAttack.damage, self.specialAttack.knockback, self.specialAttack.stun, self.specialAttack.soundEffects)\n\tcollider:setPosition(self.position)\n\tcollider:setFacingDirection(self.facingDirection)\n\tself.specialAttackCollider = collider\n\tself:specialAttackSoundEffects()", "CodeBleu_score": 48.61535114739613}, {"code": "function Actor:specialAttack()\n\t    -- Create a collider at the actor's current position and facing direction\n    local collider = BasicCollider.create(self.x, self.y, self.facingDirection, self.specialAttack.colliderProperties)\n    -- Play the sound effects\n    self:specialAttackSoundEffects()", "CodeBleu_score": 44.764016495254424}]}
{"instance_id": "bfc98809aacb", "generation_result": [{"code": "function Slime:angryFace(trueFalse)\n\t  if trueFalse ~= self._angry then\n    self._angry = trueFalse\n    self._sprite3d:setTexture(self._angry and self._angryTexture or self._normalTexture)\n  end", "CodeBleu_score": 36.113327983501705}, {"code": "function Slime:angryFace(trueFalse)\n\t  if trueFalse ~= self._angry then\n    self._angry = trueFalse\n    if trueFalse then\n      self._sprite3d:setTexture(self._angryTexture)\n    else\n      self._sprite3d:setTexture(self._normalTexture)\n    end\n  end", "CodeBleu_score": 57.91602805526473}, {"code": "function Slime:angryFace(trueFalse)\n\t\tif trueFalse == self.angry then return end\n\tself.angry = trueFalse\n\tif trueFalse then\n\t\tself._sprite3d:setTexture(self._angryTexture)\n\telse\n\t\tself._sprite3d:setTexture(self._normalTexture)\n\tend", "CodeBleu_score": 53.00045454747817}]}
{"instance_id": "546a0b8fb77b", "generation_result": [{"code": "override fun getCharPixmap(char: Char): Pixmap{\n\t    val fontSize = getFontSize()\n    val metrics = getMetrics()\n    val charWidth = ceil(metrics.charWidth(char)).toInt()\n    val charHeight = ceil(fontSize).toInt()\n    val pixmap = Pixmap(charWidth, charHeight, Pixmap.Format.RGBA8888)\n    val canvas = Canvas(pixmap)\n    val paint = Paint()\n    paint.color = Color.WHITE\n    paint.textSize = fontSize\n    canvas.drawText(char.toString(), 0f, fontSize, paint)\n    return pixmap\n}", "CodeBleu_score": 29.952981521490518}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\t    val fontSize = getFontSize()\n    val metrics = getMetrics()\n    val textWidth = metrics.charWidth(char)\n    val textHeight = fontSize\n    val bitmap = Bitmap.createBitmap(textWidth, textHeight, Bitmap.Config.ARGB_8888)\n    val canvas = Canvas(bitmap)\n    val paint = Paint()\n    paint.color = Color.WHITE\n    paint.textSize = fontSize.toFloat()\n    paint.isAntiAlias = true\n    paint.typeface = typeface\n    canvas.drawText(char.toString(), 0f, ceil((fontSize - metrics.descent) / 2f), paint)\n    val pixels = IntArray(textWidth * textHeight)\n    bitmap.getPixels(pixels, 0, textWidth, 0, 0, textWidth, textHeight)\n    return Pixmap(textWidth, textHeight, Pixmap.Format.RGBA8888, Pixmap.createByteBuffer(pixels.size), null)\n}", "CodeBleu_score": 42.204549417524156}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\t    val fontSize = getFontSize(char)\n    val metrics = getMetrics(char)\n    val charWidth = metrics.width\n    val charHeight = metrics.height\n    val charXOffset = metrics.xOffset\n    val charYOffset = metrics.yOffset\n    val bitmap = Bitmap.createBitmap(charWidth, charHeight, Bitmap.Config.ARGB_8888)\n    val canvas = Canvas(bitmap)\n    val paint = Paint(Paint.ANTI_ALIAS_FLAG)\n    paint.textSize = fontSize\n    paint.color = Color.WHITE\n    val x = ceil((charWidth - paint.measureText(char.toString())) / 2f)\n    val y = ceil((charHeight - paint.fontMetrics.descent - paint.fontMetrics.ascent) / 2f)\n    canvas.drawText(char.toString(), x, y, paint)\n    val pixels = IntArray(charWidth * charHeight)\n    bitmap.getPixels(pixels, 0, charWidth, 0, 0, charWidth, charHeight)\n    val pixmap = Pixmap(charWidth, charHeight, Pixmap.Format.RGBA8888)\n    for (y in 0 until charHeight) {\n        for (x in 0 until charWidth) {\n            val pixel = pixels[y * charWidth + x]\n            val r = Color.red(pixel)\n            val g = Color.green(pixel)\n            val b = Color.blue(pixel)\n            val a = Color.alpha(pixel)\n            val color = Color.rgba8888(r, g, b, a)\n            pixmap.drawPixel(x - charXOffset, y - charYOffset, color)\n        }\n    }\n    return pixmap\n}", "CodeBleu_score": 54.880292503241165}]}
{"instance_id": "9c1ce2567ce1", "generation_result": [{"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t        val uri = Uri.parse(suggestedLocation)\n        val filename = getFilename(uri)\n        val intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n            addCategory(Intent.CATEGORY_OPENABLE)\n            type = \"text/plain\"\n            putExtra(Intent.EXTRA_TITLE, filename)\n        }\n        openSaveFileChooser(intent, onSaved, onError)\n    }", "CodeBleu_score": 40.65114290913829}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t        val uri = Uri.parse(suggestedLocation)\n        val filename = uri.getFilename()\n        val intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n            addCategory(Intent.CATEGORY_OPENABLE)\n            type = \"text/plain\"\n            putExtra(Intent.EXTRA_TITLE, filename)\n        }\n        startActivityForResult(intent, CREATE_FILE)\n        onSaveCallback = onSaved\n        onErrorCallback = onError\n    }", "CodeBleu_score": 41.794611722250565}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t        val uri = Uri.parse(suggestedLocation)\n        val filename = getFilename(uri)\n        val intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n            addCategory(Intent.CATEGORY_OPENABLE)\n            type = \"text/plain\"\n            putExtra(Intent.EXTRA_TITLE, filename)\n        }\n        startActivityForResult(intent, OPEN_SAVE_FILE_CHOOSER)\n        onSavedCallback = onSaved\n        onErrorCallback = onError\n    }", "CodeBleu_score": 40.52779488835594}]}
{"instance_id": "ea556fe12030", "generation_result": [{"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t        val chooser = JFileChooser()\n        chooser.fileSelectionMode = JFileChooser.FILES_ONLY\n        chooser.showOpenDialog(null)\n        val file = chooser.selectedFile\n        if (file != null) {\n            try {\n                val reader = BufferedReader(FileReader(file))\n                val builder = StringBuilder()\n                var line: String?\n                while (reader.readLine().also { line = it } != null) {\n                    builder.append(line)\n                    builder.append(\"\n\")\n                }\n                reader.close()\n                onLoaded(builder.toString(), file.absolutePath)\n            } catch (ex: Exception) {\n                onError(ex)\n            }\n        }\n    }", "CodeBleu_score": 56.525556259828505}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t        openLoadFileChooser(onLoaded, onError)\n    }", "CodeBleu_score": 25.21236269338385}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t        val chooser = JFileChooser()\n        chooser.fileSelectionMode = JFileChooser.FILES_ONLY\n        chooser.isMultiSelectionEnabled = false\n        val result = chooser.showOpenDialog(null)\n        if (result == JFileChooser.APPROVE_OPTION) {\n            val file = chooser.selectedFile\n            try {\n                val data = file.readText()\n                onLoaded(data, file.absolutePath)\n            } catch (ex: Exception) {\n                onError(ex)\n            }\n        }\n    }", "CodeBleu_score": 57.675632856748884}]}
{"instance_id": "813990d9bb4d", "generation_result": [{"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\t    val intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n        addCategory(Intent.CATEGORY_OPENABLE)\n        type = \"application/json\"\n        putExtra(Intent.EXTRA_TITLE, fileName)\n        if (uri.scheme == \"content\") {\n            putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n        }\n    }\n    startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 68.50933862567315}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\t    val intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n        addCategory(Intent.CATEGORY_OPENABLE)\n        type = \"application/json\"\n        putExtra(Intent.EXTRA_TITLE, fileName)\n        if (uri.scheme == \"content\") {\n            putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n        }\n    }\n    startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 68.50933862567315}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\t    val intent = Intent(Intent.ACTION_CREATE_DOCUMENT)\n    intent.addCategory(Intent.CATEGORY_OPENABLE)\n    intent.type = \"application/json\"\n    intent.putExtra(Intent.EXTRA_TITLE, fileName)\n    if (uri.scheme == \"content\") {\n        intent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n    }\n    startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 84.8412886901097}]}
{"instance_id": "a423b39ba6fe", "generation_result": [{"code": "fun createNotificationChannelInfo(appContext: Context){\n\t    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n        val channelId = \"channelId\"\n        val channelName = \"channelName\"\n        val importance = NotificationManager.IMPORTANCE_HIGH\n        val channel = NotificationChannel(channelId, channelName, importance)\n        channel.description = \"description\"\n        channel.enableLights(true)\n        channel.lightColor = Color.RED\n        channel.enableVibration(true)\n        channel.vibrationPattern = longArrayOf(100, 200, 300, 400, 500, 400, 300, 200, 400)\n        channel.setShowBadge(false)\n        val notificationManager = appContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n        notificationManager.createNotificationChannel(channel)\n    }\n}", "CodeBleu_score": 50.488642272092946}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\t\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n        val channelId = \"channelId\"\n        val channelName = \"Channel Name\"\n        val channelDescription = \"Channel Description\"\n        val importance = NotificationManager.IMPORTANCE_HIGH\n        val channel = NotificationChannel(channelId, channelName, importance).apply {\n            description = channelDescription\n        }\n\n        val notificationManager = appContext.getSystemService(NotificationManager::class.java)\n        notificationManager.createNotificationChannel(channel)\n    }\n}", "CodeBleu_score": 39.40948592853211}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\t\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n        val notificationManager = appContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n        val channel = NotificationChannel(\n            \"channelId\",\n            \"channelName\",\n            NotificationManager.IMPORTANCE_DEFAULT\n        )\n        notificationManager.createNotificationChannel(channel)\n    }\n}", "CodeBleu_score": 30.089632915387465}]}
{"instance_id": "4f3e7f77a567", "generation_result": [{"code": "fun packImages(workingPath: String){\n\t    try {\n        // Pack images for the main assets folder\n        packImagesPerMod(workingPath)\n        // Scan the \"mods\" directory to pack images for each mod\n        val modsPath = workingPath + \"/mods\"\n        val mods = File(modsPath)\n        if (mods.exists()) {\n            val modsList = mods.listFiles()\n            for (mod in modsList) {\n                if (mod.isDirectory && !mod.isHidden) {\n                    packImagesPerMod(modsPath + \"/\" + mod.name)\n                }\n            }\n        }\n    } catch (e: Exception) {\n        e.printStackTrace()\n    }\n}", "CodeBleu_score": 39.92886755673257}, {"code": "fun packImages(workingPath: String){\n\t    try {\n        val settings = getDefaultSettings(workingPath)\n        packImagesPerMod(workingPath, settings)\n    } catch (e: Exception) {\n        e.printStackTrace()\n    }\n}", "CodeBleu_score": 22.136640210525936}, {"code": "fun packImages(workingPath: String){\n\t    try {\n        val settings = getDefaultSettings()\n        settings.workingPath = workingPath\n        settings.packer = Packer.MaxRects\n        settings.flattenPaths = false\n        settings.scale = Scale.ONE\n        settings.maxWidth = 2048\n        settings.maxHeight = 2048\n        settings.paddingX = 2\n        settings.paddingY = 2\n        settings.duplicatePadding = true\n        settings.bleed = true\n        settings.alphaThreshold = 0\n        settings.debug = false\n        settings.combineSubdirectories = true\n        settings.useIndexes = false\n        settings.indexFormat = IndexFormat.HASH\n        settings.premultiplyAlpha = false\n        settings.grid = false\n        settings.fast = false\n        settings.silent = true\n        settings.ignoreBlankImages = false\n        settings.minPageWidth = 64\n        settings.minPageHeight = 64\n        settings.maxPageWidth = 2048\n        settings.maxPageHeight = 2048\n        settings.fixedWidth = 0\n        settings.fixedHeight = 0\n        settings.rotation = false\n        settings.square = false\n        settings.stripWhitespaceX = false\n        settings.stripWhitespaceY = false\n        settings.alias = false\n        settings.outputFormat = Format.PNG\n        settings.jpegQuality = 0.90f\n        settings.ignore = arrayOf(\"^.*-large\\\\.9\\\\.png$\", \"^.*-large\\\\.8\\\\.png$\", \"^.*-large\\\\.7\\\\.png$\", \"^.*-large\\\\.6\\\\.png$\", \"^.*-large\\\\.5\\\\.png$\", \"^.*-large\\\\.4\\\\.png$\", \"^.*-large\\\\.3\\\\.png$\", \"^.*-large\\\\.2\\\\.png$\", \"^.*-large\\\\.1\\\\.png$\", \"^.*-large\\\\.0\\\\.png$\", \"^.*-xlarge\\\\.9\\\\.png$\", \"^.*-xlarge\\\\.8\\\\.png$\", \"^.*-xlarge\\\\.7\\\\.png$\", \"^.*-x", "CodeBleu_score": 23.327515866948612}]}
{"instance_id": "206dbb3c21eb", "generation_result": [{"code": "suspend fun reloadWorldscreen(){\n\t    val workingPath = \"./data/worlds/world1\"\n    val modsPath = \"./data/mods\"\n    val mods = File(modsPath).listFiles()\n\n    if (mods == null) {\n        println(\"No mods found\")\n        return\n    }\n\n    for (mod in mods) {\n        if (mod.isHidden) {\n            println(\"Skipping hidden mod: ${mod.name}\")\n            continue\n        }\n        if (!mod.isDirectory) {\n            println(\"Skipping non-directory mod: ${mod.name}\")\n            continue\n        }\n        val modPath = \"$modsPath/${mod.name}\"\n        val modAssetsPath = \"$modPath/assets\"\n        val modAssets = File(modAssetsPath).listFiles()\n        if (modAssets == null) {\n            println(\"Skipping mod with no assets: ${mod.name}\")\n            continue\n        }\n        val modAssetsImages = modAssets.filter { it.extension == \"png\" }\n        if (modAssetsImages.isEmpty()) {\n            println(\"Skipping mod with no images: ${mod.name}\")\n            continue\n        }\n        val modImagesPath = \"$modPath/images\"\n        val modImages = File(modImagesPath).listFiles()\n        if (modImages == null) {\n            println(\"Skipping mod with no images folder: ${mod.name}\")\n            continue\n        }\n        val modImagesPacked = modImages.filter { it.extension == \"atlas\" }\n        if (modImagesPacked.isNotEmpty()) {\n            println(\"Skipping mod with existing images: ${mod.name}\")\n            continue\n        }\n\n        println(\"Packing images for mod: ${mod.name}\")\n        try {\n            packImages(modAssetsPath, modImagesPath)\n        } catch (e: Exception) {\n            e.printStackTrace()\n        }\n    }\n\n    println(\"Packing images for world: $workingPath\")\n    val workingAssetsPath = \"$workingPath/assets\"\n    val workingAssets = File(workingAssetsPath).listFiles()\n    if (workingAs", "CodeBleu_score": 29.788441524102392}, {"code": "suspend fun reloadWorldscreen(){\n\t    val workingPath = \"./assets\"\n    val modsPath = \"./mods\"\n    val mods = File(modsPath).listFiles()?.filter { it.isDirectory }?.map { it.name }\n    if (mods == null) {\n        println(\"No mods found.\")\n        return\n    }\n    println(\"Packing images for $workingPath...\")\n    packImages(workingPath)\n    for (mod in mods) {\n        val modPath = \"$modsPath/$mod\"\n        val modAssetsPath = \"$modPath/assets\"\n        val modAssets = File(modAssetsPath)\n        if (modAssets.exists() && !modAssets.isHidden) {\n            println(\"Packing images for $modPath...\")\n            packImages(modAssetsPath)\n        } else {\n            println(\"Skipping $modPath...\")\n        }\n    }\n}", "CodeBleu_score": 30.961694057998468}, {"code": "suspend fun reloadWorldscreen(){\n\t    val workingPath = \"data/worlds/test\"\n    packImages(workingPath)\n    val mods = File(\"data/mods\").listFiles()?.filter { it.isDirectory && !it.isHidden } ?: emptyList()\n    mods.forEach { mod ->\n        try {\n            packImages(mod.path)\n        } catch (e: Exception) {\n            e.printStackTrace()\n        }\n    }\n}", "CodeBleu_score": 28.43377278326258}]}
{"instance_id": "2d8fdcb5ad6f", "generation_result": [{"code": "fun goToMainMenu(): MainMenuScreen{\n\t    val mainMenuScreen = MainMenuScreen()\n    mainMenuScreen.show()\n    return mainMenuScreen\n}", "CodeBleu_score": 43.027001526491496}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\t    val mainMenu = MainMenuScreen()\n    mainMenu.pushScreen()\n    return mainMenu\n}", "CodeBleu_score": 38.223906686579426}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\t    val mainMenuScreen = MainMenuScreen()\n    mainMenuScreen.show()\n    return mainMenuScreen\n}", "CodeBleu_score": 43.027001526491496}]}
{"instance_id": "df60142d384c", "generation_result": [{"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t        val bounds = getMaximumWindowBounds()\n        val width = bounds.width\n        val height = bounds.height\n        val window = settings.window\n        val graphics = settings.graphics\n        val mode = graphics.mode\n        val widthScale = width / mode.width\n        val heightScale = height / mode.height\n        val scale = min(widthScale, heightScale)\n        val newWidth = (mode.width * scale).toInt()\n        val newHeight = (mode.height * scale).toInt()\n        val x = (width - newWidth) / 2\n        val y = (height - newHeight) / 2\n        window.setBounds(x, y, newWidth, newHeight)\n        window.isResizable = true\n        graphics.isFullscreen = false\n        return newWidth == width && newHeight == height\n    }", "CodeBleu_score": 41.931217450636964}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t    val maxBounds = getMaximumWindowBounds()\n    val newSize = settings.windowSize.coerceIn(maxBounds.minimumWindowSize, maxBounds.maximumWindowSize)\n    val newGraphicsMode = GraphicsMode(newSize, settings.graphicsMode.pixelFormat, settings.graphicsMode.refreshRate)\n    val newWindowConfig = WindowConfiguration(newSize, WindowState.WINDOWED)\n\n    val window = app.window\n    window.graphicsMode = newGraphicsMode\n    window.windowConfiguration = newWindowConfig\n\n    return window.graphicsMode.size == maxBounds.maximumWindowSize\n}", "CodeBleu_score": 40.65687110329286}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t        val bounds = getMaximumWindowBounds()\n        val width = bounds.width.toFloat()\n        val height = bounds.height.toFloat()\n        val graphics = PixelGraphics(width, height, config.graphics)\n        val window = Window(graphics, bounds)\n        val game = Game(window, settings)\n        window.show()\n        return width == bounds.width && height == bounds.height\n    }", "CodeBleu_score": 46.0676458626742}]}
{"instance_id": "a8b17234c4e5", "generation_result": [{"code": "private fun getLinuxDistro(): String{\n\t    val osReleaseFile = FileHandle(\"/etc/os-release\")\n    val osReleaseMap = osReleaseFile.mapOf()\n    if (!osReleaseMap.containsKey(\"NAME\")) {\n        return \"\"\n    }\n    val name = osReleaseMap[\"NAME\"] ?: \"\"\n    val prettyName = osReleaseMap[\"PRETTY_NAME\"] ?: \"\"\n    val version = osReleaseMap[\"VERSION\"] ?: \"\"\n    return if (prettyName.isNotEmpty()) prettyName else \"$name $version\"\n}", "CodeBleu_score": 29.646554525515644}, {"code": "private fun getLinuxDistro(): String{\n\t    val map = mapOf<String, String>()\n    val file = File(\"/etc/os-release\")\n    if (!file.exists()) return \"\"\n    val lines = file.readLines()\n    lines.forEach { line ->\n        val parts = line.split(\"=\")\n        if (parts.size > 1) {\n            map[parts[0]] = parts[1].replace(\"\\\"\", \"\")\n        }\n    }\n    return when {\n        map.containsKey(\"PRETTY_NAME\") -> map[\"PRETTY_NAME\"] ?: \"\"\n        map.containsKey(\"NAME\") -> \"${map[\"NAME\"]} ${map[\"VERSION\"]}\"\n        else -> \"\"\n    }\n}", "CodeBleu_score": 41.11476578330945}, {"code": "private fun getLinuxDistro(): String{\n\t    val map = mapOf<String, String>()\n    val file = File(\"/etc/os-release\")\n    if (!file.exists()) return \"\"\n    val lines = file.readLines()\n    lines.forEach { line ->\n        val pair = line.split(\"=\")\n        if (pair.size == 2) map[pair[0]] = pair[1]\n    }\n    val name = map[\"NAME\"] ?: return \"\"\n    val prettyName = map[\"PRETTY_NAME\"] ?: \"\"\n    if (prettyName.isNotEmpty()) return prettyName\n    val version = map[\"VERSION\"] ?: \"\"\n    return \"$name $version\"\n}", "CodeBleu_score": 31.588145104744836}]}
{"instance_id": "36a1d2e56540", "generation_result": [{"code": "private fun flashWindow(){\n\t    try {\n        when {\n            hostServices.isSupported(HostServices.Feature.WINDOW_FLASH) -> hostServices.showDocument(\"https://docs.oracle.com/javase/8/javafx/api/javafx/application/HostServices.html\")\n            System.getProperty(\"os.name\").contains(\"Windows\") -> Runtime.getRuntime().exec(\"rundll32 user32.dll, FlashWindow $windowHandle\")\n            System.getProperty(\"os.name\").contains(\"Mac\") -> Runtime.getRuntime().exec(\"osascript -e 'tell application \\\"${System.getProperty(\"sun.java.command\")}\\\" to activate'\")\n            else -> {\n                // Fallback method\n                window.isAlwaysOnTop = true\n                window.isAlwaysOnTop = false\n            }\n        }\n    } catch (e: IOException) {\n        logger.error(\"Error while flashing window\", e)\n    }\n}", "CodeBleu_score": 43.33807010947135}, {"code": "private fun flashWindow(){\n\t    try {\n        when {\n            System.getProperty(\"os.name\").startsWith(\"Mac\") -> {\n                Runtime.getRuntime().exec(arrayOf(\"osascript\", \"-e\", \"tell application \\\"${System.getProperty(\"awt.appName\")}\\\" to activate\"))\n            }\n            System.getProperty(\"os.name\").startsWith(\"Win\") -> {\n                Runtime.getRuntime().exec(arrayOf(\"cmd.exe\", \"/c\", \"start\", \"cmd.exe\", \"/c\", \"echo ^<BLINK^>^</BLINK^> && pause && exit\"))\n            }\n            else -> {\n                val _ = JOptionPane.showMessageDialog(null, \"Please click on the application window to continue.\", \"Input Required\", JOptionPane.INFORMATION_MESSAGE)\n            }\n        }\n    } catch (e: IOException) {\n        logger.error(\"Failed to flash window: $e\")\n    }\n}", "CodeBleu_score": 43.130574854811}, {"code": "private fun flashWindow(){\n\t    try {\n        if (System.getProperty(\"os.name\").contains(\"mac\", true)) {\n            Runtime.getRuntime().exec(arrayOf(\"osascript\", \"-e\", \"tell application \\\"${System.getProperty(\"sun.java.command\").split(\" \")[0]}\\\" to activate\"))\n        } else if (System.getProperty(\"os.name\").contains(\"win\", true)) {\n            Runtime.getRuntime().exec(arrayOf(\"cmd.exe\", \"/c\", \"start\", System.getProperty(\"sun.java.command\").split(\" \")[0]))\n        } else {\n            val window = Window.getWindows()[0]\n            window.toFront()\n            window.repaint()\n        }\n    } catch (e: Exception) {\n        println(\"Unable to flash window: $e\")\n    }\n}", "CodeBleu_score": 46.016589379649794}]}
{"instance_id": "8e3c7096415a", "generation_result": [{"code": "public void onFullBackup(FullBackupDataOutput data){\n\t    try {\n        File sharedPrefsFile = new File(getFilesDir(), \"shared_prefs/com.example.android.fullbackup.prefs\");\n        File gameDataDir = new File(getFilesDir(), \"game_data\");\n        File[] gameDataFiles = gameDataDir.listFiles();\n\n        if (sharedPrefsFile.exists()) {\n            data.writeEntityHeader(\n                    FullBackup.SHARED_PREFS_TOKEN,\n                    sharedPrefsFile.getCanonicalPath(),\n                    sharedPrefsFile.length());\n            FileInputStream in = new FileInputStream(sharedPrefsFile);\n            byte[] buffer = new byte[1024];\n            int bytesRead;\n            while ((bytesRead = in.read(buffer)) != -1) {\n                data.writeEntityData(buffer, 0, bytesRead);\n            }\n            in.close();\n        }\n\n        if (gameDataFiles != null) {\n            for (File gameDataFile : gameDataFiles) {\n                if (gameDataFile.exists()) {\n                    data.writeEntityHeader(\n                            FullBackup.GAME_DATA_TOKEN,\n                            gameDataFile.getCanonicalPath(),\n                            gameDataFile.length());\n                    FileInputStream in = new FileInputStream(gameDataFile);\n                    byte[] buffer = new byte[1024];\n                    int bytesRead;\n                    while ((bytesRead = in.read(buffer)) != -1) {\n                        data.writeEntityData(buffer, 0, bytesRead);\n                    }\n                    in.close();\n                }\n            }\n        }\n    } catch (IOException e) {\n        Log.e(TAG, \"Error backing up game data\", e);\n    }\n}", "CodeBleu_score": 22.017573139297035}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\t    try {\n        // Back up the shared preferences file.\n        byte[] sharedPrefs = readFromFile(getFilesDir().getAbsolutePath() + \"/shared_prefs/\" + getPackageName() + \"_preferences.xml\");\n        data.writeEntityHeader(\"shared_prefs\", sharedPrefs.length);\n        data.writeEntityData(sharedPrefs, sharedPrefs.length);\n\n        // Back up the rankings file.\n        byte[] rankings = readFromFile(getFilesDir().getAbsolutePath() + \"/rankings\");\n        if (rankings != null) {\n            data.writeEntityHeader(\"rankings\", rankings.length);\n            data.writeEntityData(rankings, rankings.length);\n        }\n\n        // Back up the badges file.\n        byte[] badges = readFromFile(getFilesDir().getAbsolutePath() + \"/badges\");\n        if (badges != null) {\n            data.writeEntityHeader(\"badges\", badges.length);\n            data.writeEntityData(badges, badges.length);\n        }\n\n        // Back up the journal entries file.\n        byte[] journal = readFromFile(getFilesDir().getAbsolutePath() + \"/journal\");\n        if (journal != null) {\n            data.writeEntityHeader(\"journal\", journal.length);\n            data.writeEntityData(journal, journal.length);\n        }\n\n        // Back up the journal entries file.\n        byte[] journal = readFromFile(getFilesDir().getAbsolutePath() + \"/journal\");\n        if (journal != null) {\n            data.writeEntityHeader(\"journal\", journal.length);\n            data.writeEntityData(journal, journal.length);\n        }\n    } catch (IOException e) {\n        Log.e(TAG, \"onFullBackup() failed\", e);\n    }\n}", "CodeBleu_score": 24.18602638447626}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\t    try {\n        // Back up the shared preferences file.\n        File sharedPrefsFile = new File(getFilesDir(), \"shared_prefs/com.example.android.fullbackup.prefs.xml\");\n        if (sharedPrefsFile.exists()) {\n            data.writeEntityHeader(\n                    \"shared_prefs\",\n                    sharedPrefsFile.getPath(),\n                    sharedPrefsFile.length(),\n                    sharedPrefsFile.lastModified());\n            FileInputStream fis = new FileInputStream(sharedPrefsFile);\n            byte[] buffer = new byte[1024];\n            int bytesRead;\n            while ((bytesRead = fis.read(buffer)) != -1) {\n                data.writeEntityData(buffer, 0, bytesRead);\n            }\n            fis.close();\n        }\n\n        // Back up game data files related to rankings, badges, and journal entries.\n        File gameDataDir = new File(getFilesDir(), \"gamedata\");\n        if (gameDataDir.exists()) {\n            File[] gameDataFiles = gameDataDir.listFiles();\n            for (File gameDataFile : gameDataFiles) {\n                if (gameDataFile.exists()) {\n                    data.writeEntityHeader(\n                            \"gamedata\",\n                            gameDataFile.getPath(),\n                            gameDataFile.length(),\n                            gameDataFile.lastModified());\n                    FileInputStream fis = new FileInputStream(gameDataFile);\n                    byte[] buffer = new byte[1024];\n                    int bytesRead;\n                    while ((bytesRead = fis.read(buffer)) != -1) {\n                        data.writeEntityData(buffer, 0, bytesRead);\n                    }\n                    fis.close();\n                }\n            }\n        }\n    } catch (IOException e) {\n        Log.e(TAG, \"Error backing up shared preferences.\", e);\n    }\n}", "CodeBleu_score": 20.658909151083808}]}
{"instance_id": "583999724a15", "generation_result": [{"code": "public boolean connectedToUnmeteredNetwork(){\n\t    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n        return cm.isActiveNetworkMetered();\n    } else {\n        ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n        NetworkInfo info = cm.getActiveNetworkInfo();\n        return (info != null && info.isConnected() && (info.getType() == ConnectivityManager.TYPE_WIFI || info.getType() == ConnectivityManager.TYPE_WIMAX || info.getType() == ConnectivityManager.TYPE_BLUETOOTH || info.getType() == ConnectivityManager.TYPE_ETHERNET));\n    }\n}", "CodeBleu_score": 57.32773472597054}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\t    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n        return cm.isActiveNetworkMetered();\n    } else {\n        ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n        NetworkInfo info = cm.getActiveNetworkInfo();\n        return (info != null && info.isConnected() && (info.getType() == ConnectivityManager.TYPE_WIFI || info.getType() == ConnectivityManager.TYPE_WIMAX || info.getType() == ConnectivityManager.TYPE_BLUETOOTH || info.getType() == ConnectivityManager.TYPE_ETHERNET));\n    }\n}", "CodeBleu_score": 57.32773472597054}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\t    ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        return !connectivityManager.isActiveNetworkMetered();\n    } else {\n        NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();\n        return activeNetworkInfo != null && activeNetworkInfo.isConnected()\n                && (activeNetworkInfo.getType() == ConnectivityManager.TYPE_WIFI\n                || activeNetworkInfo.getType() == ConnectivityManager.TYPE_WIMAX\n                || activeNetworkInfo.getType() == ConnectivityManager.TYPE_BLUETOOTH\n                || activeNetworkInfo.getType() == ConnectivityManager.TYPE_ETHERNET);\n    }\n}", "CodeBleu_score": 59.28258807404482}]}
{"instance_id": "f8bd6cd4826b", "generation_result": [{"code": "protected boolean affectHero( Hero hero ){\n\t\tif ( !hero.isAlive() ) {\n\t\treturn false;\n\t}\n\n\thero.interrupt();\n\n\tif ( hero.isAlive() ) {\n\t\thero.play( Assets.Sounds.HEAL );\n\t\thero.cure();\n\t\thero.uncurseEquipped();\n\t\thero.satisfy();\n\t\thero.buff(Buff.healthBoost);\n\t\thero.buff(Buff.heroism);\n\t\thero.sprite.emitter().start( Speck.factory( Speck.HEALING ), 0.1f, 10 );\n\t\thero.sprite.parent.add( Speck.factory( Speck.HEALING ).at( hero.sprite.center(), 10 ) );\n\t\thero.sprite.showStatus( CharSprite.POSITIVE, Messages.get(this, \"healed\") );\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 50.02281888315054}, {"code": "protected boolean affectHero( Hero hero ){\n\t\tif ( !hero.isAlive() ) {\n\t\treturn false;\n\t}\n\n\thero.interrupt();\n\thero.play( Assets.Sounds.HEAL );\n\n\tif (hero.isStarving()) {\n\t\thero.hunger(0);\n\t\thero.sprite.emitter().start( Speck.factory( Speck.STEAM ), 0.2f, 3 );\n\t}\n\n\tif (hero.buff(Buff.FROZEN) != null) {\n\t\thero.buff(Buff.FROZEN).detach();\n\t\thero.sprite.emitter().start( Speck.factory( Speck.STEAM ), 0.2f, 3 );\n\t}\n\n\tif (hero.buff(Buff.PARALYSIS) != null) {\n\t\thero.buff(Buff.PARALYSIS).detach();\n\t\thero.sprite.emitter().start( Speck.factory( Speck.STEAM ), 0.2f, 3 );\n\t}\n\n\tif (hero.buff(Buff.SLOW) != null) {\n\t\thero.buff(Buff.SLOW).detach();\n\t\thero.sprite.emitter().start( Speck.factory( Speck.STEAM ), 0.2f, 3 );\n\t}\n\n\tif (hero.buff(Buff.WEAKNESS) != null) {\n\t\thero.buff(Buff.WEAKNESS).detach();\n\t\thero.sprite.emitter().start( Speck.factory( Speck.STEAM ), 0.2f, 3 );\n\t}\n\n\tif (hero.buff(Buff.POISON) != null) {\n\t\thero.buff(Buff.POISON).detach();\n\t\thero.sprite.emitter().start( Speck.factory( Speck.STEAM ), 0.2f, 3 );\n\t}\n\n\tif (hero.buff(Buff.REG", "CodeBleu_score": 43.82203410765753}, {"code": "protected boolean affectHero( Hero hero ){\n\t    if (hero.isAlive()) {\n        hero.interrupt();\n        hero.play( Assets.Sounds.HEAL );\n        hero.cure();\n        hero.uncurseEquipped();\n        hero.satisfy( 100 );\n        hero.HP = hero.HT;\n        hero.sprite.emitter().burst( Speck.factory( Speck.HEALING ), 5 );\n        hero.sprite.parent.addToFront( hero.sprite ); //visual effects\n        hero.sprite.flash();\n        hero.sprite.operate( hero.sprite.new Empty() );\n        Dungeon.level.presses = 0;\n        Dungeon.observe();\n        return true;\n    } else {\n        return false;\n    }\n}", "CodeBleu_score": 41.85806069692276}]}
{"instance_id": "3a94f2e84c83", "generation_result": [{"code": "protected Item affectItem( Item item, int pos ){\n\t\tif (item.isFull()) {\n\t\titem.fill();\n\t\treturn item;\n\t} else if (item.isBlessed()) {\n\t\titem.bless();\n\t\treturn item;\n\t} else if (item.uncursable()) {\n\t\titem.play();\n\t\treturn item;\n\t}\n\treturn null;\n}", "CodeBleu_score": 18.03613610511719}, {"code": "protected Item affectItem( Item item, int pos ){\n\t    if (item.isWaterskin()) {\n        if (item.isFull()) {\n            return null;\n        } else {\n            item.fill();\n            play(\"fill\");\n            return item;\n        }\n    } else if (item.isAnkh()) {\n        if (item.isBlessed()) {\n            return null;\n        } else {\n            item.bless();\n            play(\"bless\");\n            return item;\n        }\n    } else if (item.uncursable()) {\n        item.start();\n        play(\"uncursed\");\n        return item;\n    } else {\n        return null;\n    }\n}", "CodeBleu_score": 24.230492402494463}, {"code": "protected Item affectItem( Item item, int pos ){\n\t    if( item.isFull() ) {\n        return null;\n    }\n    else if( item.isBlessed() ) {\n        return null;\n    }\n    else if( item.isUncursable() ) {\n        return null;\n    }\n    else if( item.getType() == WATERSKIN ) {\n        item.fill();\n        return item;\n    }\n    else if( item.getType() == ANKH ) {\n        item.bless();\n        return item;\n    }\n    else if( item.getType() == SWORD ) {\n        item.play();\n        return item;\n    }\n    else {\n        return null;\n    }\n}", "CodeBleu_score": 23.919727649826882}]}
{"instance_id": "d322228d1a3e", "generation_result": [{"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t\tif (enemy.isAlignedAsEnemy()) {\n\t\tenemy.applyBuff(buffCls);\n\t\tenemy.rollForLoot();\n\t\thero.processEnemyKill(enemy);\n\t\thero.getClass().ascensionChallenge(enemy);\n\t}\n\thero.earnExp(enemy);\n\tif (hero instanceof Monk) {\n\t\t((Monk) hero).gainEnergy();\n\t}\n}", "CodeBleu_score": 15.530163057193652}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t    if (enemy.isAligned(Alignment.ENEMY)) {\n        enemy.applyBuff(buffCls);\n        if (enemy.rollToDropLoot()) {\n            hero.addItem(enemy.getLoot());\n        }\n        hero.showStatusWithIcon(enemy.toString(), \"enemy\");\n        hero.earnExp(enemy.getExp());\n        hero.processEnemyKill(enemy);\n    }\n    if (hero instanceof Monk) {\n        ((Monk) hero).gainEnergy();\n    }\n}", "CodeBleu_score": 23.473949674018208}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t\tif (enemy.isAlignedEnemy(hero)) {\n\t\tenemy.applyBuff(buffCls);\n\t\tenemy.rollForLoot(hero);\n\t\tenemy.processEnemyKill(hero);\n\t\thero.gainEnergy();\n\t}\n}", "CodeBleu_score": 12.250561990032185}]}
{"instance_id": "9ee21c0149f3", "generation_result": [{"code": "public static void processEnemyKill(Char enemy){\n\t\tif (hero.hasBuff(AscensionChallenge.ID)) {\n\t\tAscensionChallenge asc = (AscensionChallenge)hero.buff(AscensionChallenge.ID);\n\t\tif (enemy.type == Enemy.Type.ELITE) {\n\t\t\tif (asc.stacks > 0) {\n\t\t\t\tasc.stacks--;\n\t\t\t\tif (asc.stacks <= 10) {\n\t\t\t\t\tGame.log(\"The challenge is weakening...\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (asc.stacks == 0) {\n\t\t\t\thero.remove(AscensionChallenge.ID);\n\t\t\t\tGame.log(\"The challenge has been defeated!\");\n\t\t\t}\n\t\t} else if (enemy.type == Enemy.Type.BOSS) {\n\t\t\tif (asc.stacks > 0) {\n\t\t\t\tasc.stacks--;\n\t\t\t\tif (asc.stacks <= 10) {\n\t\t\t\t\tGame.log(\"The challenge is weakening...\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (asc.stacks == 0) {\n\t\t\t\thero.remove(AscensionChallenge.ID);\n\t\t\t\tGame.log(\"The challenge has been defeated!\");\n\t\t\t}\n\t\t} else if (enemy.type == Enemy.Type.BOSS_ELITE) {\n\t\t\tif (asc.stacks > 0) {\n\t\t\t\tasc.stacks--;\n\t\t\t\tif (asc.stacks <= 10) {\n\t\t\t\t\tGame.log(\"The challenge is weakening...\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (asc.stacks == 0) {\n\t\t\t\thero.remove(AscensionChallenge.ID);\n\t\t\t\tGame.log(\"The challenge has been defeated!\");\n\t\t\t}\n\t\t} else if (enemy.type == Enemy.Type.BOSS_BOSS) {\n\t\t", "CodeBleu_score": 18.719214728077056}, {"code": "public static void processEnemyKill(Char enemy){\n\t\tif (hero.has(\"AscensionChallenge\")) {\n\t\tif (enemy.isTransformed()) {\n\t\t\tenemy.restoreOriginal();\n\t\t}\n\t\tif (enemy.isAlive() && enemy.isMonster() && enemy.getOriginal().isMonster()) {\n\t\t\tif (hero.get(\"AscensionChallenge\").getCurrentStacks() > 1) {\n\t\t\t\thero.get(\"AscensionChallenge\").modifyStacks(-1);\n\t\t\t\tif (hero.get(\"AscensionChallenge\").getCurrentStacks() <= 10) {\n\t\t\t\t\thero.say(\"The challenge weakens!\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (hero.get(\"AscensionChallenge\").getCurrentStacks() == 1) {\n\t\t\t\thero.get(\"AscensionChallenge\").modifyStacks(-1);\n\t\t\t\thero.get(\"AscensionChallenge\").setDuration(0, true);\n\t\t\t\thero.say(\"The challenge ends!\");\n\t\t\t}\n\t\t\tif (hero.get(\"AscensionChallenge\").getCurrentStacks() == 0) {\n\t\t\t\thero.say(\"The challenge ends!\");\n\t\t\t\thero.get(\"AscensionChallenge\").setDuration(0, true);\n\t\t\t}\n\t\t}\n\t}\n\tif (hero.getLevel() == hero.getMaxLevel()) {\n\t\thero.earnExp(enemy.getOriginal().getExp());\n\t}\n\trefreshHero();\n}", "CodeBleu_score": 15.607940815725174}, {"code": "public static void processEnemyKill(Char enemy){\n\t    if (hero.hasBuff(AscensionChallenge.ID)) {\n        AscensionChallenge buff = (AscensionChallenge)hero.getBuff(AscensionChallenge.ID);\n        if (enemy.hasStatus(EnemyStatus.BOOSTED)) {\n            enemy.revertBoost();\n        }\n        if (enemy.getOriginal() == EnemyType.NORMAL) {\n            buff.stacks -= 1;\n        } else if (enemy.getOriginal() == EnemyType.ELITE) {\n            buff.stacks -= 2;\n        } else if (enemy.getOriginal() == EnemyType.BOSS) {\n            buff.stacks -= 3;\n        }\n        if (buff.stacks <= 10) {\n            log(\"The challenge weakens!\");\n        }\n        if (hero.getOriginalLevel() == hero.getLevel()) {\n            hero.earnExp(enemy.getExp());\n        }\n        hero.refreshHero();\n    }\n}", "CodeBleu_score": 21.293066361797685}]}
{"instance_id": "4fc9c3c1fcce", "generation_result": [{"code": "public static int AscensionCorruptResist(Mob m){\n\t\tif (m == null) {\n\t\treturn 0;\n\t}\n\tif (m.getOriginal() != null) {\n\t\tm = m.getOriginal();\n\t}\n\tif (m.getBuff(\"BlockAscension\") != null) {\n\t\treturn m.getExperience();\n\t}\n\tif (m.getBuff(\"BlockAscension\") != null) {\n\t\treturn m.getExperience();\n\t}\n\tif (m.getBuff(\"BlockAscension\") != null) {\n\t\treturn m.getExperience();\n\t}\n\tif (m.getBuff(\"BlockAscension\") != null) {\n\t\treturn m.getExperience();\n\t}\n\tif (m.getBuff(\"BlockAscension\") != null) {\n\t\treturn m.getExperience();\n\t}\n\tif (m.getBuff(\"BlockAscension\") != null) {\n\t\treturn m.getExperience();\n\t}\n\tif (m.getBuff(\"BlockAscension\") != null) {\n\t\treturn m.getExperience();\n\t}\n\tif (m.getBuff(\"BlockAscension\") != null) {\n\t\treturn m.getExperience();\n\t}\n\tif (m.getBuff(\"BlockAscension\") != null) {\n\t\treturn m.getExperience();\n\t}\n\tif (m.getBuff(\"BlockAscension\") != null) {\n\t\treturn m.getExperience();\n\t}\n\tif (m.getBuff(\"BlockAscension\") != null) {\n\t\treturn m.getExperience();\n\t}\n\tif (m.getBuff(\"BlockAscension\") != null) {\n\t\treturn m.getExperience();\n\t}\n\tif (m.getBuff(\"BlockAscension\") != null) {\n\t\treturn m.getExperience();\n\t}\n\tif (m.getBuff(\"BlockAscension\") != null) {\n\t\treturn m.getExperience();\n\t}\n\tif (m.", "CodeBleu_score": 16.070667255606217}, {"code": "public static int AscensionCorruptResist(Mob m){\n\t\tint resist = m.getOriginal().getExp();\n\tif (m.getOriginal().getBuff(\"Ascension\") != null) {\n\t\treturn resist;\n\t}\n\tif (m.getOriginal().getBuff(\"Ascension Resistance\") != null) {\n\t\treturn resist;\n\t}\n\tif (m.getOriginal().getBuff(\"Ascension Resistance 2\") != null) {\n\t\treturn resist;\n\t}\n\tif (m.getOriginal().getBuff(\"Ascension Resistance 3\") != null) {\n\t\treturn resist;\n\t}\n\tif (m.getOriginal().getBuff(\"Ascension Resistance 4\") != null) {\n\t\treturn resist;\n\t}\n\tif (m.getOriginal().getBuff(\"Ascension Resistance 5\") != null) {\n\t\treturn resist;\n\t}\n\tif (m.getOriginal().getBuff(\"Ascension Resistance 6\") != null) {\n\t\treturn resist;\n\t}\n\tif (m.getOriginal().getBuff(\"Ascension Resistance 7\") != null) {\n\t\treturn resist;\n\t}\n\tif (m.getOriginal().getBuff(\"Ascension Resistance 8\") != null) {\n\t\treturn resist;\n\t}\n\tif (m.getOriginal().getBuff(\"Ascension Resistance 9\") != null) {\n\t\treturn resist;\n\t}\n\tif (m.getOriginal().getBuff(\"Ascension Resistance 10\") != null) {\n\t\treturn resist;\n\t}\n\tif (m.getOriginal().getBuff(\"Ascension Resistance 11\") != null) {\n\t\treturn resist;\n\t}\n\tif (m.getOriginal().getBuff(\"Ascension Resistance 12\") != null) {\n\t\treturn resist;\n\t}\n\tif (m.getOriginal().getBuff(\"Ascension Resistance 13\") != null) {\n\t\treturn resist;\n\t}\n\tif (m.getOriginal().getBuff(\"Ascension Resistance 14\") != null) {", "CodeBleu_score": 17.07535236133313}, {"code": "public static int AscensionCorruptResist(Mob m){\n\t    if (!m.isAscensionMob()) {\n        return m.getExperience();\n    }\n    if (m.hasBuff(AscensionBuff.class)) {\n        return m.getExperience();\n    }\n    if (m.getOriginal() != null) {\n        m = m.getOriginal();\n    }\n    int resist = m.getExperience();\n    if (m.getOriginal() != null) {\n        resist = m.getOriginal().getExperience();\n    }\n    if (m.getOriginal() != null && m.getOriginal().isAscensionMob()) {\n        resist = m.getOriginal().getExperience();\n    }\n    if (m.getOriginal() != null && m.getOriginal().getOriginal() != null) {\n        resist = m.getOriginal().getOriginal().getExperience();\n    }\n    if (m.isAscensionMob()) {\n        resist = m.getExperience();\n    }\n    if (m.isAscensionMob() && m.getOriginal() != null) {\n        resist = m.getOriginal().getExperience();\n    }\n    if (m.isAscensionMob() && m.getOriginal() != null && m.getOriginal().getOriginal() != null) {\n        resist = m.getOriginal().getOriginal().getExperience();\n    }\n    if (m.isAscensionMob() && m.getOriginal() != null && m.getOriginal().getOriginal() != null) {\n        resist = m.getOriginal().getOriginal().getExperience();\n    }\n    if (m.isAscensionMob() && m.getOriginal() != null && m.getOriginal().getOriginal() != null) {\n        resist = m.getOriginal().getOriginal().getExperience();\n    }\n    if (m.isAscensionMob() && m.getOriginal() != null && m.getOriginal().getOriginal() != null) {\n        resist = m.getOriginal().getOriginal().getExperience();\n    }\n    if (m.isAscensionMob() && m.get", "CodeBleu_score": 25.738315076417894}]}
{"instance_id": "bdc8df5952c7", "generation_result": [{"code": "public void hit( Char enemy ){\n\t\tcomboCount++;\n\tcomboTimer = 0;\n\tif ( enemy.isAlive() || enemy.get( buff ).get( \"Corruption\" ).max() ) {\n\t\tcomboTimer = getHighestMove( \"Cleave\" );\n\t}\n\tupdateInitialComboTime();\n\ttriggerActionIndicator();\n\tvalidateMasteryCombo();\n\tlogComboCount();\n\trefreshHero();\n}", "CodeBleu_score": 22.16438388530797}, {"code": "public void hit( Char enemy ){\n\t  if (enemy.isAlive()) {\n    comboCount++;\n    comboTimer = 0;\n    if (enemy.hasBuff(Corruption.class) && enemy.getHealth() == enemy.getMaxHealth()) {\n      comboTimer += getHighestMove() * 0.25;\n    }\n    comboTimer += getHighestMove() * 0.25;\n    if (comboCount > 1) {\n      comboTimer += getHighestMove() * 0.25;\n    }\n    if (comboCount > 2) {\n      comboTimer += getHighestMove() * 0.25;\n    }\n    if (comboCount > 3) {\n      comboTimer += getHighestMove() * 0.25;\n    }\n    if (comboCount > 4) {\n      comboTimer += getHighestMove() * 0.25;\n    }\n    if (comboCount > 5) {\n      comboTimer += getHighestMove() * 0.25;\n    }\n    if (comboCount > 6) {\n      comboTimer += getHighestMove() * 0.25;\n    }\n    if (comboCount > 7) {\n      comboTimer += getHighestMove() * 0.25;\n    }\n    if (comboCount > 8) {\n      comboTimer += getHighestMove() * 0.25;\n    }\n    if (comboCount > 9) {\n      comboTimer += getHighestMove() * 0.25;\n    }\n    if (comboCount > 10) {\n      comboTimer += getHighestMove() * 0.25;\n    }\n    if (comboCount > 11) {\n      comboTimer += getHighestMove() * 0.25;\n    }\n    if (comboCount > 12) {\n      comboTimer += getHighestMove() * 0.25;\n    }\n    if (comboCount > 13) {\n      com", "CodeBleu_score": 16.702048823933737}, {"code": "public void hit( Char enemy ){\n\t    if( enemy.isAlive() ) {\n        comboCount++;\n        comboTimer = 1500;\n        if( enemy.get( \"Corruption\" ) > 0 && enemy.get( \"Corruption\" ) == enemy.get( \"MaxHealth\" ) ) {\n            comboTimer += 1000 * pointsInTalent( \"Cleave\" );\n        }\n        setAction( \"Combo: \" + comboCount );\n        validateMasteryCombo();\n        log( \"Combo: \" + comboCount );\n        refreshHero();\n    }\n}", "CodeBleu_score": 24.968481572314957}]}
{"instance_id": "abf7c664b4dd", "generation_result": [{"code": "public int capacity(){\n\t    int totalCapacity = baseCapacity;\n    for (Item item : inventory) {\n        totalCapacity += item.capacity();\n    }\n    if (secondaryWeapon != null) {\n        totalCapacity -= secondaryWeapon.capacity();\n    }\n    return totalCapacity;\n}", "CodeBleu_score": 22.04689489081046}, {"code": "public int capacity(){\n\t  int total = baseCapacity;\n  for (Item i : inventory) {\n    total += i.capacity;\n  }\n  if (secondaryWeapon != null) {\n    total -= secondaryWeapon.capacity;\n  }\n  return total;\n}", "CodeBleu_score": 17.71572790428672}, {"code": "public int capacity(){\n\t    int totalCapacity = baseCapacity;\n    for (Item i : inventory) {\n        totalCapacity += i.capacity();\n    }\n    if (secondaryWeapon != null) {\n        totalCapacity -= secondaryWeapon.capacity();\n    }\n    return totalCapacity;\n}", "CodeBleu_score": 15.87314763885539}]}
{"instance_id": "b97e41e092d2", "generation_result": [{"code": "public void updateHT( boolean boostHP ){\n\t\tint HT = 1000;\n\tHT = HT * level;\n\tif ( buff.ringOfMight ) {\n\t\tHT = HT * 1.2;\n\t}\n\tif ( buff.elixirOfMight ) {\n\t\tHT = HT * 1.2;\n\t}\n\tHT = HT * HTMultiplier;\n\tif ( boost ) {\n\t\tHT = HT * 1.5;\n\t}\n\tmax = HT;\n\tif ( boostHP ) {\n\t\tmin = max;\n\t}\n\tif ( min > max ) {\n\t\tmin = max;\n\t}\n}", "CodeBleu_score": 15.538293857822286}, {"code": "public void updateHT( boolean boostHP ){\n\t    // Calculate the new HT value.\n    int newHT = (int) Math.round( ( level * HTMultiplier ) + buff );\n    if ( boost ) {\n        newHT = (int) Math.round( newHT * 1.5 );\n    }\n    // Apply the new HT value.\n    max = newHT;\n    // Optionally boost HP to the new HT value.\n    if ( boostHP ) {\n        min = max;\n    }\n    // Ensure HP does not exceed the new HT value.\n    if ( min > max ) {\n        min = max;\n    }\n}", "CodeBleu_score": 18.080385892301454}, {"code": "public void updateHT( boolean boostHP ){\n\t    // Base formula\n    int HT = (int)Math.round( 100 + ( 20 * level ) );\n    // Apply RingOfMight and ElixirOfMight buffs\n    if ( buff.equals( \"RingOfMight\" ) ) {\n        HT *= 2;\n    } else if ( buff.equals( \"ElixirOfMight\" ) ) {\n        HT *= 3;\n    }\n    // Apply HTMultiplier\n    HT *= HTMultiplier;\n    // Boost current health\n    if ( boostHP ) {\n        HP = HT;\n    }\n    // Ensure HP does not exceed HT\n    if ( HP > HT ) {\n        HP = HT;\n    }\n}", "CodeBleu_score": 20.468267318960162}]}
{"instance_id": "b72bd91544e7", "generation_result": [{"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t\tif ( enemy.isEnemy() || enemy.isNeutral() ) {\n\t\tif ( attack( enemy, wep ) ) {\n\t\t\twep.setThrown();\n\t\t\tif ( this instanceof Gladiator || this instanceof Duelist ) {\n\t\t\t\tif ( this instanceof Gladiator ) {\n\t\t\t\t\tif ( ( (Gladiator)this ).getCombo() < 3 ) {\n\t\t\t\t\t\t( (Gladiator)this ).addCombo();\n\t\t\t\t\t}\n\t\t\t\t} else if ( this instanceof Duelist ) {\n\t\t\t\t\tif ( ( (Duelist)this ).getCombo() < 3 ) {\n\t\t\t\t\t\t( (Duelist)this ).addCombo();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\twep.clearThrown();\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 12.857235607349752}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t  if ( enemy.isAligned(Char.Alignment.ENEMY) || enemy.isAligned(Char.Alignment.NEUTRAL_MIMIC) ) {\n    boolean attackHit = attack( enemy, wep.getAttack() );\n    if ( attackHit ) {\n      wep.setThrown();\n      if ( this.isAligned(Char.Alignment.GLADIATOR) || this.isAligned(Char.Alignment.DUELIST) ) {\n        this.addHit();\n      }\n    }\n    wep.clearThrown();\n    return attackHit;\n  }\n  return false;\n}", "CodeBleu_score": 23.51384170406833}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t\tif ( enemy.isAligned(Char.Alignment.ENEMY) || enemy.isAligned(Char.Alignment.NEUTRAL_MIMIC) ) {\n\t\tif ( attack(enemy, wep) ) {\n\t\t\tif ( this.isAligned(Char.Alignment.GLADIATOR) || this.isAligned(Char.Alignment.DUELIST) ) {\n\t\t\t\tthis.setThrownWeapon(wep);\n\t\t\t\tthis.applyBuff(new ComboBuff(this, wep));\n\t\t\t\tthis.clearThrownWeapon();\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 17.839076160212386}]}
{"instance_id": "f265b39b6677", "generation_result": [{"code": "public int attackSkill( Char target ){\n\t    int attackSkill = baseAttackSkill;\n    if (attackingWeapon != null) {\n        if (attackingWeapon.isTwoHanded()) {\n            attackSkill *= 2;\n        }\n        if (attackingWeapon.isRanged()) {\n            attackSkill *= 1.5;\n        }\n    }\n    if (adjacent) {\n        attackSkill *= 1.5;\n    }\n    if (fightingUnarmed) {\n        attackSkill *= 0.5;\n    }\n    if (buff.hasBuff(Buff.Type.ACCURACY)) {\n        attackSkill *= buff.getBuff(Buff.Type.ACCURACY).getAccuracyMultiplier();\n    }\n    attackSkill *= accuracyMultiplier;\n    return attackSkill;\n}", "CodeBleu_score": 33.150767780270904}, {"code": "public int attackSkill( Char target ){\n\t\tint attackSkill = baseAttackSkill();\n\tint attackSkillMultiplier = 1;\n\t\n\t// Check for buffs\n\tif ( buffs.contains( \"accuracy\" ) ) {\n\t\tattackSkillMultiplier *= 1.5;\n\t}\n\t\n\t// Check for weapon type\n\tif ( attackingWeapon.isRanged() ) {\n\t\tattackSkillMultiplier *= 1.5;\n\t}\n\t\n\t// Check for proximity\n\tif ( adjacent( target ) ) {\n\t\tattackSkillMultiplier *= 1.5;\n\t}\n\t\n\t// Apply multiplier\n\tattackSkill *= attackSkillMultiplier;\n\t\n\t// Apply accuracy\n\tattackSkill *= accuracyFactor;\n\t\n\t// Return the attack skill value\n\treturn attackSkill;\n}", "CodeBleu_score": 20.306321668508083}, {"code": "public int attackSkill( Char target ){\n\t\n\tint attackSkill = 0;\n\tint weaponType = 0;\n\tint accuracy = 0;\n\tint accuracyMultiplier = 0;\n\tint fightingUnarmed = 0;\n\tint adjacent = 0;\n\tint buff = 0;\n\tint attackingWeapon = 0;\n\n\t// Get the weapon type of the attacking character.\n\tweaponType = getWeaponType();\n\n\t// Get the accuracy of the attacking character.\n\taccuracy = getAccuracy();\n\n\t// Get the accuracy multiplier based on the weapon type.\n\taccuracyMultiplier = getAccuracyFactor( weaponType );\n\n\t// Get the fighting unarmed value of the attacking character.\n\tfightingUnarmed = getFightingUnarmed();\n\n\t// Get the adjacent value of the attacking character.\n\tadjacent = getAdjacent();\n\n\t// Get the buff value of the attacking character.\n\tbuff = getBuff();\n\n\t// Get the attacking weapon value of the attacking character.\n\tattackingWeapon = getAttackingWeapon();\n\n\t// Calculate the attack skill value.\n\tattackSkill = (accuracy * accuracyMultiplier) + (fightingUnarmed * adjacent) + (buff * attackingWeapon);\n\n\t// Return the attack skill value.\n\treturn attackSkill;\n}", "CodeBleu_score": 29.245851195219117}]}
{"instance_id": "9e50c198348d", "generation_result": [{"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\t  reset()\n  repeat(repeats) {\n    start()\n    operation()\n    stop()\n  }\n  if (printResults) prettyPrint()\n}", "CodeBleu_score": 56.002673283082636}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\t  time.start()\n  repeat(repeats) { operation() }\n  time.stop()\n  if (printResults) prettyPrint()\n}", "CodeBleu_score": 53.444491460505006}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\t  repeat(repeats) {\n    start()\n    operation()\n    stop()\n  }\n  if (printResults) prettyPrint()\n}", "CodeBleu_score": 54.738547514322754}]}
{"instance_id": "5f6e11998a1f", "generation_result": [{"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t  val tree = BehaviorTree<E>(rootTask, blackboard)\n  tree.init()\n  return tree\n}", "CodeBleu_score": 51.653813319751094}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t  val tree = BehaviorTree<E>(rootTask, blackboard)\n  tree.init()\n  return tree\n}", "CodeBleu_score": 51.653813319751094}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t  val tree = BehaviorTree<E>(rootTask, blackboard)\n  tree.init()\n  return tree\n}", "CodeBleu_score": 51.653813319751094}]}
{"instance_id": "cdda12e45fb9", "generation_result": [{"code": "onPointerOver (){\n\t    if (this.scene.input.activePointer.leftButtonDown()) {\n        this.scene.selectedCell.x = this.x;\n        this.scene.selectedCell.y = this.y;\n        this.scene.selectedCell.xWorld = this.xWorld;\n        this.scene.selectedCell.yWorld = this.yWorld;\n        this.scene.selectedCell.xScreen = this.xScreen;\n        this.scene.selectedCell.yScreen = this.yScreen;\n        this.scene.selectedCell.height = this.height;\n        this.scene.selectedCell.slope = this.slope;\n        this.scene.selectedCell.slopeType = this.slopeType;\n        this.scene.selectedCell.terrain = this.terrain;\n        this.scene.selectedCell.terrainType = this.terrainType;\n        this.scene.selectedCell.terrainColor = this.terrainColor;\n        this.scene.selectedCell.terrainAlpha = this.terrainAlpha;\n        this.scene.selectedCell.terrainColorString = this.terrainColorString;\n        this.scene.selectedCell.terrainColorHex = this.terrainColorHex;\n        this.scene.selectedCell.terrainColorHexNumber = this.terrainColorHexNumber;\n        this.scene.selectedCell.terrainColorRgb = this.terrainColorRgb;\n        this.scene.selectedCell.terrainColorRgbNumber = this.terrainColorRgbNumber;\n        this.scene.selectedCell.terrainColorRgbString = this.terrainColorRgbString;\n        this.scene.selectedCell.terrainColorRgbArray = this.terrainColorRgbArray;\n        this.scene.selectedCell.terrainColorRgbArrayNumber = this.terrainColorRgbArrayNumber;\n        this.scene.selectedCell.terrainColorRgbArrayString = this.terrainColorRgbArrayString;\n        this.scene.selectedCell.terrainColorRgbPercent = this.terrainColorRgbPercent;\n        this.scene.selectedCell.terrainColorRgbPercentNumber = this.terrainColor", "CodeBleu_score": 14.028931453023674}, {"code": "onPointerOver (){\n\t    // Update the selected cell coordinates in the map\n    this.selectedCell.x = this.cell.x;\n    this.selectedCell.y = this.cell.y;\n\n    // Highlight the current cell and its related cells by changing their tint color\n    this.cell.tiles.sprites.forEach(sprite => {\n        sprite.setTint(this.highlightColor);\n    });\n    this.cell.related.forEach(cell => {\n        cell.tiles.sprites.forEach(sprite => {\n            sprite.setTint(this.relatedColor);\n        });\n    });\n\n    // Adjust the transparency of the cell's heightmap polygons if they exist\n    if (this.cell.heightmap) {\n        this.cell.heightmap.polygons.forEach(polygon => {\n            polygon.setAlpha(0.5);\n        });\n    }\n}", "CodeBleu_score": 45.76966707086911}, {"code": "onPointerOver (){\n\t    if (this.scene.input.activePointer.isDown) {\n        this.scene.selectedCell.x = this.x;\n        this.scene.selectedCell.y = this.y;\n        this.scene.selectedCell.cell = this.cell;\n        this.scene.selectedCell.tiles = this.tiles;\n        this.scene.selectedCell.sprites = this.sprites;\n        this.scene.selectedCell.tile = this.tile;\n        this.scene.selectedCell.sprite = this.sprite;\n        this.scene.selectedCell.heightmap = this.heightmap;\n        this.scene.selectedCell.polygons = this.polygons;\n        this.scene.selectedCell.polygon = this.polygon;\n        this.scene.selectedCell.height = this.height;\n        this.scene.selectedCell.heights = this.heights;\n        this.scene.selectedCell.text = this.text;\n        this.scene.selectedCell.texts = this.texts;\n        this.scene.selectedCell.color = this.color;\n        this.scene.selectedCell.colors = this.colors;\n        this.scene.selectedCell.related = this.related;\n        this.scene.selectedCell.relateds = this.relateds;\n        this.scene.selectedCell.setTint(0x00ff00);\n        this.scene.selectedCell.related.forEach(function (cell) {\n            cell.setTint(0x00ff00);\n        });\n        if (this.heightmap) {\n            this.scene.selectedCell.heightmap.setAlpha(0.5);\n        }\n        this.scene.selectedCell.polygons.forEach(function (polygon) {\n            polygon.setAlpha(0.5);\n        });\n        this.scene.selectedCell.relateds.forEach(function (cell) {\n            if (cell.heightmap) {\n                cell.heightmap.setAlpha(0.5);\n            }\n            cell.polygons.forEach(function (polygon) {\n                polygon.setAlpha(0.5);\n            });\n        });", "CodeBleu_score": 46.92571616410752}]}
{"instance_id": "850931ce3401", "generation_result": [{"code": "getTrafficDensity (){\n\t    const light = 100;\n    const heavy = 150;\n    const current = 120;\n    let density;\n\n    if (current >= light && current < heavy) {\n        density = 'light';\n    } else if (current >= heavy) {\n        density = 'heavy';\n    } else {\n        density = null;\n    }\n\n    return density;\n}", "CodeBleu_score": 14.661634249328358}, {"code": "getTrafficDensity (){\n\t  if (this.currentValue >= this.heavyThreshold) {\n    return 'heavy';\n  } else if (this.currentValue >= this.lightThreshold) {\n    return 'light';\n  } else {\n    return null;\n  }\n}", "CodeBleu_score": 36.51477836269611}, {"code": "getTrafficDensity (){\n\t  let trafficDensity;\n  if (this.currentValue >= this.lightThreshold && this.currentValue < this.heavyThreshold) {\n    trafficDensity = 'light';\n  } else if (this.currentValue >= this.heavyThreshold) {\n    trafficDensity = 'heavy';\n  } else {\n    trafficDensity = null;\n  }\n  return trafficDensity;\n}", "CodeBleu_score": 33.86320810560105}]}
{"instance_id": "5958478bf873", "generation_result": [{"code": "restart: function (){\n\t    this.stop();\n    this.start();\n}", "CodeBleu_score": 8.334292375717316}, {"code": "restart: function (){\n\t    this.game.state.start('Game');\n}", "CodeBleu_score": 12.438763539956586}, {"code": "restart: function (){\n\t    this._frameData.getFrame.call(this, this._currentValue);\n    this.onStart.dispatch(this);\n    this._parent.setFrame.call(this, this._currentValue);\n    return this;\n}", "CodeBleu_score": 14.863462462343938}]}
{"instance_id": "d2441e586d58", "generation_result": [{"code": "flash: function (color, duration, force, alpha){\n\t\tif (this.flashing || this.dead || this.invincible) return false;\n\tif (typeof color === \"undefined\") color = 0xffffff;\n\tif (typeof duration === \"undefined\") duration = 150;\n\tif (typeof force === \"undefined\") force = false;\n\tif (typeof alpha === \"undefined\") alpha = 1;\n\tif (this.flashTween) this.flashTween.stop();\n\tthis.fx.clear();\n\tthis.fx.beginFill(color, alpha);\n\tthis.fx.drawRect(0, 0, this.width, this.height);\n\tthis.fx.endFill();\n\tthis.addChild(this.fx);\n\tthis.flashTween = this.game.add.tween(this.fx).to({alpha: 0}, duration, Phaser.Easing.Linear.None, true);\n\tthis.flashTween.onComplete.add(function () {\n\t\tthis.removeChild(this.fx);\n\t}, this);\n\treturn true;\n}", "CodeBleu_score": 54.042786296642916}, {"code": "flash: function (color, duration, force, alpha){\n\t    // set default values for parameters if undefined\n    color = color || 0xffffff;\n    duration = duration || 1000;\n    force = force || false;\n    alpha = alpha || 1;\n\n    // if this object is already in a flash effect, do not allow another\n    if (this.flashing && !force) {\n        return false;\n    }\n\n    // clear any existing effect\n    this.fx.clear();\n\n    // draw a rectangle with the given color and alpha\n    this.fx.beginFill(color, alpha);\n    this.fx.drawRect(0, 0, this.width, this.height);\n    this.fx.endFill();\n\n    // set the effect duration\n    this.flashing = true;\n    this.flashTimer = duration;\n    return true;\n}", "CodeBleu_score": 55.95263417234082}, {"code": "flash: function (color, duration, force, alpha){\n\t    // Set default values for parameters\n    color = color || 0xffffff;\n    duration = duration || 1000;\n    force = force || false;\n    alpha = alpha || 1;\n\n    // Checks if the object is already in a flash effect\n    if (this.flashing && !force) {\n        return false;\n    }\n\n    // Checks if the object is already in a fade effect\n    if (this.fading && !force) {\n        return false;\n    }\n\n    // Checks if the object is already in a tint effect\n    if (this.tinting && !force) {\n        return false;\n    }\n\n    // Checks if the object is already in a shake effect\n    if (this.shaking && !force) {\n        return false;\n    }\n\n    // Checks if the object is already in a swing effect\n    if (this.swinging && !force) {\n        return false;\n    }\n\n    // Checks if the object is already in a spin effect\n    if (this.spinning && !force) {\n        return false;\n    }\n\n    // Checks if the object is already in a pulse effect\n    if (this.pulsing && !force) {\n        return false;\n    }\n\n    // Clears any existing effect\n    this.clearEffects();\n\n    // Draws a rectangle with the given color and alpha\n    this.fx.beginFill(color, alpha);\n    this.fx.drawRect(0, 0, this.width, this.height);\n    this.fx.endFill();\n\n    // Sets the effect duration\n    this.flashing = true;\n    this.flashDuration = duration;\n\n    return true;\n}", "CodeBleu_score": 52.89644381311574}]}
{"instance_id": "48b26381d975", "generation_result": [{"code": "createFluidLayer: function (children, addToWorld){\n\t    var layer = this.game.add.fluidLayer(this.game.world.width, this.game.world.height, this.game.fluidConfig);\n    layer.name = \"FluidLayer\";\n    layer.addMultiple(children);\n    this.layers.push(layer);\n    if (addToWorld) {\n        this.game.world.add(layer);\n    }\n    return layer;\n}", "CodeBleu_score": 54.36750512204528}, {"code": "createFluidLayer: function (children, addToWorld){\n\t\tvar layer = new FluidLayer(this.game, this.width, this.height);\n\tlayer.addMultiple(children);\n\tthis.layers.push(layer);\n\tif (addToWorld) {\n\t\tthis.game.world.add(layer);\n\t}\n\treturn layer;\n}", "CodeBleu_score": 42.91084002823355}, {"code": "createFluidLayer: function (children, addToWorld){\n\t    var layer = new FlexLayer(this.game, children);\n    layer.addToWorld = addToWorld;\n    this.layers.push(layer);\n    return layer;\n}", "CodeBleu_score": 24.674317859316474}]}
{"instance_id": "624c9e2eb19f", "generation_result": [{"code": "createFullLayer: function (children){\n\t\tvar layer = this.game.add.flexLayer(this.game.world.x, this.game.world.y, this.game.world.width, this.game.world.height);\n\tlayer.scale.set(this.game.world.scale.x, this.game.world.scale.y);\n\tthis.layers.push(layer);\n\tif (children) {\n\t\tlayer.addMultiple(children);\n\t}\n\treturn layer;\n}", "CodeBleu_score": 54.70606784168481}, {"code": "createFullLayer: function (children){\n\t  var layer = this.game.add.flexLayer(0, 0, 1);\n  layer.bounds = new Phaser.Rectangle(0, 0, this.game.width, this.game.height);\n  layer.scale.set(1);\n  this.layers.push(layer);\n  if (children) {\n    layer.addMultiple(children);\n  }\n  return layer;\n}", "CodeBleu_score": 52.78353171921808}, {"code": "createFullLayer: function (children){\n\t    var layer = this.game.add.flexLayer(0, 0, this.game.world.bounds.width, this.game.world.bounds.height);\n    layer.scale.set(this.game.scaleFactor);\n    this.game.world.add(layer);\n    this.layers.push(layer);\n    if (children) {\n        layer.addMultiple(children);\n    }\n    return layer;\n}", "CodeBleu_score": 59.91143355654205}]}
{"instance_id": "1c7529bca3ce", "generation_result": [{"code": "crop: function (rect, copy){\n\t\tif (rect) {\n\t\tif (copy) {\n\t\t\tthis.cropRect.setTo(rect.x, rect.y, rect.width, rect.height);\n\t\t} else {\n\t\t\tthis.cropRect.copyFrom(rect);\n\t\t}\n\t\tthis.updateCrop();\n\t} else {\n\t\tthis.cropRect.setTo(0, 0, 1, 1);\n\t\tthis.resetFrame();\n\t}\n\treturn this;\n}", "CodeBleu_score": 31.569415033076886}, {"code": "crop: function (rect, copy){\n\t    if (rect == null) {\n        this.resetFrame();\n        return;\n    }\n    if (copy) {\n        this.cropRect.setTo(rect.x, rect.y, rect.width, rect.height);\n    }\n    else {\n        this.cropRect.copyFrom(rect);\n    }\n    this.updateCrop();\n}", "CodeBleu_score": 27.41452921871877}, {"code": "crop: function (rect, copy){\n\t    if (rect) {\n        if (copy) {\n            this.cropRect.setTo(rect.x, rect.y, rect.width, rect.height);\n        } else {\n            this.cropRect.copyFrom(rect);\n        }\n        this.updateCrop();\n    } else {\n        this.resetFrame();\n    }\n}", "CodeBleu_score": 33.666876047027}]}
{"instance_id": "d767b9ea9212", "generation_result": [{"code": "move: function (x, y, wrap){\n\t\tif (x) {\n\t\tthis.moveH(x, wrap);\n\t}\n\tif (y) {\n\t\tthis.moveV(y, wrap);\n\t}\n\treturn this;\n}", "CodeBleu_score": 51.684474181262274}, {"code": "move: function (x, y, wrap){\n\t    if (x) {\n        this.moveH(x, wrap);\n    }\n    if (y) {\n        this.moveV(y, wrap);\n    }\n    return this;\n}", "CodeBleu_score": 60.84056819218002}, {"code": "move: function (x, y, wrap){\n\t\tif (x) {\n\t\tthis.moveH(x, wrap);\n\t}\n\tif (y) {\n\t\tthis.moveV(y, wrap);\n\t}\n\treturn this;\n}", "CodeBleu_score": 51.684474181262274}]}
{"instance_id": "c7cf015114f3", "generation_result": [{"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\tif (this.framesAreFrozen) {\n\t\treturn false;\n\t}\n\n\tvar frame = this.getFrame(state);\n\n\tif (typeof frame === 'string' || typeof frame === 'number') {\n\t\tthis.frame = frame;\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 40.2585210784012}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t    if (this.frames) {\n        var frame = this.frames[state];\n        if (typeof frame === 'string' || typeof frame === 'number') {\n            this.frame = frame;\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 40.94426419484618}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\n    if (this.freezeFrames)\n    {\n        return false;\n    }\n\n    var frame = this.getStateFrame(state);\n\n    if (frame !== null)\n    {\n        this.frameName = frame;\n        this.frame = this.game.cache.getFrameByName(this.spriteSheet, frame);\n        this.update = true;\n        return true;\n    }\n    else\n    {\n        return false;\n    }\n\n}", "CodeBleu_score": 45.22975210476765}]}
{"instance_id": "e0294cb83ca3", "generation_result": [{"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\n    if (typeof group === 'undefined') { group = this.game.world; }\n    if (typeof bulletClass === 'undefined') { bulletClass = Phaser.Bullet; }\n\n    return this.game.plugins.add(new Phaser.Weapon(quantity, key, frame, group, bulletClass));\n\n}", "CodeBleu_score": 34.631843684465764}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\n    if (typeof quantity === 'undefined') { quantity = 1; }\n    if (typeof key === 'undefined') { key = null; }\n    if (typeof frame === 'undefined') { frame = null; }\n    if (typeof group === 'undefined') { group = this.game.world; }\n    if (typeof bulletClass === 'undefined') { bulletClass = Phaser.Bullet; }\n\n    return new Phaser.Weapon(quantity, key, frame, group, bulletClass);\n\n}", "CodeBleu_score": 30.359636466403128}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\n    if (typeof quantity === 'undefined') { quantity = 1; }\n    if (typeof key === 'undefined') { key = null; }\n    if (typeof frame === 'undefined') { frame = null; }\n    if (typeof group === 'undefined') { group = this.game.world; }\n    if (typeof bulletClass === 'undefined') { bulletClass = Phaser.Bullet; }\n\n    var weapon = this.game.plugins.add(Phaser.Weapon);\n\n    if (bulletClass !== Phaser.Bullet)\n    {\n        weapon.bulletClass = bulletClass;\n    }\n\n    weapon.createBullets(quantity, key, frame, group);\n\n    return weapon;\n\n}", "CodeBleu_score": 67.2591453068204}]}
{"instance_id": "2fca91787d6c", "generation_result": [{"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t    if (cull) {\n        var a = points[0];\n        var b = points[1];\n        var c = points[2];\n        var ab = b.subtract(a);\n        var ac = c.subtract(a);\n        var normal = ab.cross(ac).normalize();\n        if (normal.dot(this.game.camera.position) < 0) {\n            return;\n        }\n    }\n    this.moveTo(points[0].x, points[0].y);\n    this.lineTo(points[1].x, points[1].y);\n    this.lineTo(points[2].x, points[2].y);\n    this.lineTo(points[0].x, points[0].y);\n}", "CodeBleu_score": 36.089846743374174}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t    if (cull) {\n        var v1 = points[1].clone().sub(points[0]);\n        var v2 = points[2].clone().sub(points[0]);\n        var normal = v1.cross(v2).normalize();\n        if (normal.dot(points[0]) > 0) {\n            this.drawPolygon(points);\n        }\n    } else {\n        this.drawPolygon(points);\n    }\n}", "CodeBleu_score": 30.359757589039305}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t    if (cull) {\n        var v1 = points[1].sub(points[0]);\n        var v2 = points[2].sub(points[0]);\n        var normal = v1.cross(v2).normalize();\n        if (normal.dot(cameraToFace) < 0) {\n            return;\n        }\n    }\n    this.moveTo(points[0].x, points[0].y);\n    this.lineTo(points[1].x, points[1].y);\n    this.lineTo(points[2].x, points[2].y);\n    this.lineTo(points[0].x, points[0].y);\n}", "CodeBleu_score": 29.679532628530243}]}
{"instance_id": "5d227ea7f97b", "generation_result": [{"code": "checkVideoProgress: function (){\n\t  if (this.video.readyState >= this.video.HAVE_ENOUGH_DATA) {\n    this.video.removeEventListener('progress', this.onVideoProgress)\n    this.video.removeEventListener('timeupdate', this.onVideoProgress)\n    this.updateTexture()\n  } else if (this.video.readyState === this.video.HAVE_METADATA && this.video.networkState === this.video.NETWORK_IDLE) {\n    this.video.removeEventListener('progress', this.onVideoProgress)\n    this.video.removeEventListener('timeupdate', this.onVideoProgress)\n    this.warn('Video failed to start downloading.')\n  } else {\n    this.retryCount -= 1\n    if (this.retryCount > 0) {\n      this.setTimeout(this.checkVideoProgress, 100)\n    } else {\n      this.warn('Video failed to start downloading within allowed retries.')\n    }\n  }\n}", "CodeBleu_score": 31.89325859502231}, {"code": "checkVideoProgress: function (){\n\t  if (this.video.readyState >= 2) {\n    this.video.removeEventListener('progress', this.checkVideoProgress.bind(this))\n    this.updateTexture()\n  } else {\n    this.retries--\n    if (this.retries <= 0) {\n      console.warn('Failed to load video.')\n    } else {\n      setTimeout(this.checkVideoProgress.bind(this), 500)\n    }\n  }\n}", "CodeBleu_score": 30.26609955673224}, {"code": "checkVideoProgress: function (){\n\t    if (this.video.readyState === 4) {\n        this.video.removeEventListener('progress', this.checkVideoProgress);\n        this.updateTexture();\n    } else {\n        this.retryCount--;\n        if (this.retryCount === 0) {\n            console.warn('Unable to load video:', this.video.src);\n        } else {\n            window.setTimeout(this.checkVideoProgress.bind(this), 1000);\n        }\n    }\n}", "CodeBleu_score": 40.04507457350546}]}
{"instance_id": "e48c3c53f00a", "generation_result": [{"code": "start: function (event, value){\n\t    if (this.state !== \"down\") {\n        this.state = \"down\";\n        this.time = 0;\n        this.repeat = 0;\n        this.event = event;\n        this.value = value;\n        this.onDown.dispatch(this);\n    }\n}", "CodeBleu_score": 32.625144567783956}, {"code": "start: function (event, value){\n\t\tif (this.state !== \"down\") {\n\t\tthis.state = \"down\";\n\t\tthis.time = 0;\n\t\tthis.repeat = 0;\n\t\tif (event) {\n\t\t\tthis.alt = event.altKey;\n\t\t\tthis.shift = event.shiftKey;\n\t\t\tthis.ctrl = event.ctrlKey;\n\t\t}\n\t\tthis.onDown.dispatch(this, value);\n\t}\n}", "CodeBleu_score": 39.46253446444864}, {"code": "start: function (event, value){\n\t    if (this.state !== \"down\") {\n        this.state = \"down\";\n        this.startTime = this.time;\n        this.repeatCount = 0;\n        if (event) {\n            this.altKey = event.altKey;\n            this.ctrlKey = event.ctrlKey;\n            this.shiftKey = event.shiftKey;\n        }\n        this.onDown.dispatch(this, value);\n    }\n}", "CodeBleu_score": 49.63772816140967}]}
{"instance_id": "a2cb3bdacb1e", "generation_result": [{"code": "onMouseDown: function (event){\n\t\n    if (this.input.enabled)\n    {\n        this.input.mousePointer.start(event);\n    }\n\n    if (this.mouseDownCallback)\n    {\n        this.mouseDownCallback.call(this.mouseDownContext, event);\n    }\n\n    if (this.input.enabled && this.input.mousePointer.capture)\n    {\n        event.preventDefault();\n    }\n\n}", "CodeBleu_score": 46.25663478121786}, {"code": "onMouseDown: function (event){\n\t    this.mouseDownCallback = this.mouseDownCallback || this.game.input.mouseDownCallback;\n    this.mouseDownCallback.call(this.game.input.mouseDownCallbackContext, event);\n    if (this.game.input.enabled && this.game.input.mousePointer.enabled) {\n        this.game.input.mousePointer.start(event);\n    }\n    return this;\n}", "CodeBleu_score": 29.271644604219716}, {"code": "onMouseDown: function (event){\n\t\n    if (this.input.enabled) {\n        this.input.mousePointer.start(event);\n    }\n\n    if (this.mouseDownCallback) {\n        this.mouseDownCallback.call(this.mouseDownContext, event);\n    }\n\n    if (this.input.enabled && this.input.mousePointer.stopPropagation) {\n        event.preventDefault();\n    }\n\n}", "CodeBleu_score": 44.684814694433186}]}
{"instance_id": "88538a5b66e8", "generation_result": [{"code": "onMouseUpGlobal: function (event){\n\t    if (this.input.enabled) {\n        this.input.mousePointer.stop();\n    }\n\n    if (this.input.mousePointer.mouseDownCallback) {\n        this.input.mousePointer.mouseDownCallback.call(this.input.mousePointer.mouseDownCallbackContext, event);\n    }\n\n    if (this.input.mousePointer.mouseUpCallback) {\n        this.input.mousePointer.mouseUpCallback.call(this.input.mousePointer.mouseUpCallbackContext, event);\n    }\n}", "CodeBleu_score": 34.88532129900069}, {"code": "onMouseUpGlobal: function (event){\n\t\n    if (this.input.enabled && this.input.mousePointer.enabled && !this.input.mousePointer.withinGame) {\n        this.input.mousePointer.withinGame = true;\n        this.input.mousePointer.mouseDown(event);\n    }\n\n    if (this.input.mousePointer.stopOnGameOut && this.input.mousePointer.withinGame) {\n        event.preventDefault();\n    }\n\n    if (this.input.mousePointer.callbacks.onMouseUpGlobal) {\n        this.input.mousePointer.callbacks.onMouseUpGlobal.call(this.input.mousePointer.callbackContext, event);\n    }\n\n}", "CodeBleu_score": 37.24586733045441}, {"code": "onMouseUpGlobal: function (event){\n\t  this.mouseUpCallback.call(this, event);\n  this.input.mousePointer.stop();\n}", "CodeBleu_score": 11.695412049845205}]}
{"instance_id": "bf8b43ab3487", "generation_result": [{"code": "onTouchEnter: function (event){\n\t\tif (this.enabled && this.game.inputEnabled) {\n\t\tthis.touchEnterEvent = event;\n\t\tif (this.touchEnterCallback) this.touchEnterCallback.call(this.touchEnterContext, event);\n\t\tif (this.preventDefault) event.preventDefault();\n\t}\n}", "CodeBleu_score": 45.528645742173566}, {"code": "onTouchEnter: function (event){\n\t    if (!this.game.inputEnabled || !this.enabled) return;\n    this.touchEnterCallback.call(this.game.inputCallbackContext, this, event);\n    if (this.game.input.touchEnterPreventDefault) event.preventDefault();\n}", "CodeBleu_score": 27.002131303917505}, {"code": "onTouchEnter: function (event){\n\t    if (this.game.inputEnabled && this.inputEnabled && this.touchEnterCallback) {\n        event.preventDefault\n        this.touchEnterCallback.call\n    }\n}", "CodeBleu_score": 16.724519473918615}]}
