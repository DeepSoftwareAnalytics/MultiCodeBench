{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = request.httprequest.args.get('attachment_ids')\n    attachment_ids = literal_eval(attachment_ids)\n    attachments = self.env['ir.attachment'].browse(attachment_ids)\n    # Verify read access rights for the attachments\n    attachments.check_access_rights('read')\n    # Verify access rules for the attachments\n    attachments.check_access_rule('read')\n    # Build the zip file from the attachments' content\n    zip_file = io.BytesIO()\n    with zipfile.ZipFile(zip_file, mode='w') as zf:\n        for attachment in attachments:\n            zf.writestr(attachment.name, attachment.datas)\n    # Prepare HTTP headers for the zip file\n    headers = self._get_zip_headers(zip_file)\n    # Return the zip file as an HTTP response\n    return request.make_response(zip_file.getvalue(), headers=headers)\n\n", "CodeBleu_score": 39.99184485968099}, {"code": "def export_zip_documents(self, **args)\n\t\n    # retrieve attachment IDs from HTTP request arguments\n    attachment_ids = self._get_attachment_ids_from_request(**args)\n\n    # verify read access rights and rules for the attachments\n    self.check_access_rights('read')\n    self.check_access_rule('read')\n\n    # build a zip file from the attachments' content\n    zip_content = self._build_zip_from_attachments(attachment_ids)\n\n    # prepare HTTP headers for the zip file\n    headers = self._get_zip_headers(attachment_ids)\n\n    # return the zip file as an HTTP response\n    return request.make_response(zip_content, headers)\n\n", "CodeBleu_score": 30.916222518646276}, {"code": "def export_zip_documents(self, **args)\n\t\n    # retrieve attachment IDs from HTTP request arguments\n    attachment_ids = args.get('attachment_ids', False)\n    if not attachment_ids:\n        return\n\n    # retrieve attachments\n    attachments = self.env['ir.attachment'].browse(attachment_ids)\n\n    # verify read access rights and rules for the attachments\n    attachments.check_access_rights('read')\n    attachments.check_access_rule('read')\n\n    # build a zip file from the attachments' content\n    zip_content = attachments._build_zip_from_attachments()\n\n    # prepare HTTP headers for the zip file\n    headers = self.env['ir.http']._get_zip_headers(len(zip_content))\n\n    # return the zip file as an HTTP response\n    return request.make_response(zip_content, headers)\n\n", "CodeBleu_score": 49.09151067084907}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(AccountPortal, self)._prepare_home_portal_values(counters)\n    if self.user_has_groups('base.group_account_invoice'):\n        invoice_count = self.env['account.move'].search_count([\n            ('type', '=', 'out_invoice'),\n            ('state', 'in', ['draft', 'posted']),\n            ('company_id', '=', self.company_id.id),\n            ('invoice_user_id', '=', self.user_id.id),\n        ])\n        values['invoice_count'] = invoice_count\n    if self.user_has_groups('base.group_account_invoice'):\n        bill_count = self.env['account.move'].search_count([\n            ('type', '=', 'in_invoice'),\n            ('state', 'in', ['draft', 'posted']),\n            ('company_id', '=', self.company_id.id),\n            ('invoice_user_id', '=', self.user_id.id),\n        ])\n        values['bill_count'] = bill_count\n    return values\n\n", "CodeBleu_score": 44.57505151525374}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(AccountPortal, self)._prepare_home_portal_values(counters)\n    # Invoice and bill counts\n    if self.has_group('account.group_account_invoice'):\n        invoice_count = self.env['account.move'].search_count([('state', 'in', ['draft', 'posted']), ('type', 'in', ['out_invoice', 'out_refund']), ('partner_id', 'child_of', [self.partner_id])])\n        values.update({\n            'invoice_count': invoice_count,\n        })\n    if self.has_group('account.group_account_invoice'):\n        bill_count = self.env['account.move'].search_count([('state', 'in', ['draft', 'posted']), ('type', 'in', ['in_invoice', 'in_refund']), ('partner_id', 'child_of', [self.partner_id])])\n        values.update({\n            'bill_count': bill_count,\n        })\n    return values\n\n", "CodeBleu_score": 39.84401106096066}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(AccountPortal, self)._prepare_home_portal_values(counters)\n    if self.env['account.move'].check_access_rights('read'):\n        values.update(\n            invoice_count=self._get_invoices_domain('out_invoice').search_count(),\n            bill_count=self._get_invoices_domain('in_invoice').search_count(),\n        )\n    return values\n\n", "CodeBleu_score": 19.673474480878937}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    self._prepare_my_invoices_values(date_begin, date_end, sortby, filterby)\n    invoices = self._my_invoices_search(date_begin, date_end, sortby, filterby)\n    pager = portal_pager(url=\"/my/invoices\", url_args={'date_begin': date_begin, 'date_end': date_end, 'sortby': sortby, 'filterby': filterby}, list=invoices, page=page, step=self._items_per_page)\n    self._update_history(invoices)\n    values = {'invoices': invoices, 'pager': pager}\n    values.update(self._my_invoices_get_sorter(date_begin, date_end, sortby, filterby))\n    return request.render('portal_my_invoices.my_invoices', values)\n\n", "CodeBleu_score": 41.94246823338297}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    # TODO: refactor this method to use the new API\n    # TODO: add support for filtering on invoice_date, amount_total, amount_untaxed, amount_tax, amount_due\n    # TODO: add support for sorting on invoice_date, amount_total, amount_untaxed, amount_tax, amount_due\n    # TODO: add support for filtering on invoice_line.product_id\n    # TODO: add support for sorting on invoice_line.product_id\n    # TODO: add support for filtering on invoice_line.price_unit\n    # TODO: add support for sorting on invoice_line.price_unit\n    # TODO: add support for filtering on invoice_line.price_subtotal\n    # TODO: add support for sorting on invoice_line.price_subtotal\n    # TODO: add support for filtering on invoice_line.price_subtotal_incl\n    # TODO: add support for sorting on invoice_line.price_subtotal_incl\n    # TODO: add support for filtering on invoice_line.price_tax\n    # TODO: add support for sorting on invoice_line.price_tax\n    # TODO: add support for filtering on invoice_line.price_total\n    # TODO: add support for sorting on invoice_line.price_total\n    # TODO: add support for filtering on invoice_line.price_reduce\n    # TODO: add support for sorting on invoice_line.price_reduce\n    # TODO: add support for filtering on invoice_line.price_reduce_taxinc\n    # TODO: add support for sorting on invoice_line.price_reduce_taxinc\n    # TODO: add support for filtering on invoice_line.price_reduce_notax\n    # TODO: add support for sorting on invoice_line.price_reduce_notax\n    # TODO: add support for filtering on invoice_line.discount\n    # TODO: add support for sorting on invoice_line.discount\n    # TODO: add support for filtering on invoice_line.product_uom\n    # TODO: add support for sorting on invoice_line.product_uom\n    # TODO: add support for filtering on invoice_line.qty", "CodeBleu_score": 7.211538461538461}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    if not self.user_id:\n        return {}\n    date_begin, date_end = self._prepare_my_invoices_values(date_begin, date_end)\n    sortby, filterby = self._prepare_my_invoices_sorting_filtering(sortby, filterby)\n    domain = self._get_invoices_domain(date_begin, date_end, filterby)\n    invoices = self.env['account.move'].search(domain, order=sortby, limit=self._items_per_page)\n    pager = portal_pager(url=\"/my/invoices\", total=len(invoices), page=page, step=self._items_per_page)\n    invoices = invoices[pager['offset']:pager['offset'] + self._items_per_page]\n    self._update_session_history(invoices.ids)\n    values = {\n        'date': date_begin,\n        'date_end': date_end,\n        'invoices': invoices,\n        'page_name': 'invoices',\n        'pager': pager,\n        'sortby': sortby,\n        'filterby': filterby,\n    }\n    return request.render('website_portal_my.invoices', values)\n\n", "CodeBleu_score": 40.44253833691728}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    if not invoice_id:\n        return request.redirect('/my/home')\n\n    invoice_sudo = self.pool.get('account.invoice').browse(request.session.uid, invoice_id, access_token=access_token)\n    if not invoice_sudo.exists():\n        return request.redirect('/my/home')\n\n    if not invoice_sudo._check_access_rights('read'):\n        return request.redirect('/my/home')\n\n    if download:\n        if invoice_sudo.state != 'posted':\n            raise openerp.exceptions.AccessError(_(\"Only posted invoices can be downloaded.\"))\n        if report_type == 'pdf':\n            if invoice_sudo.state != 'posted':\n                raise openerp.exceptions.AccessError(_(\"Only posted invoices can be downloaded.\"))\n            if not invoice_sudo.attachment_ids:\n                raise openerp.exceptions.AccessError(_(\"No attachments available.\"))\n            if len(invoice_sudo.attachment_ids) > 1:\n                zip_file = self._build_zip_from_attachments(invoice_sudo)\n                response = request.make_response(zip_file, headers=self._get_http_headers(invoice_sudo))\n                response.headers['Content-Type'] = 'application/zip'\n                response.headers['Content-Disposition'] = 'attachment; filename=%s' % invoice_sudo._get_invoice_report_filename(report_type)\n                return response\n            else:\n                response = request.make_response(invoice_sudo.attachment_ids[0].datas, headers=self._get_http_headers(invoice_sudo))\n                response.headers['Content-Type'] = 'application/pdf'\n                response.headers['Content-Disposition'] = 'attachment; filename=%s' % invoice_sudo._get_invoice_report_filename(report_type)\n                return response\n        else:\n            if not invoice_sudo._get_invoice_legal_documents(report_type):\n                raise openerp.exceptions.AccessError(_(\"No", "CodeBleu_score": 40.968433847113886}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    invoice = request.env['account.invoice'].sudo().browse(int(invoice_id))\n    if not invoice.exists():\n        raise werkzeug.exceptions.NotFound()\n    if not invoice.can_view_invoice():\n        return request.redirect('/my/home')\n    if report_type in ['pdf', 'html', 'text']:\n        if download:\n            if not invoice.can_download_invoice():\n                return request.redirect('/my/home')\n            if invoice.state == 'draft':\n                raise werkzeug.exceptions.NotFound()\n            if invoice.state == 'proforma':\n                report_type = 'pdf'\n            if invoice.state == 'open':\n                report_type = 'pdf'\n            if invoice.state == 'paid':\n                report_type = 'pdf'\n            if invoice.state == 'cancel':\n                report_type = 'pdf'\n            if invoice.state == 'invoice_except':\n                report_type = 'pdf'\n            if invoice.state == 'invoice_except_done':\n                report_type = 'pdf'\n            if invoice.state == 'invoice_except_draft':\n                report_type = 'pdf'\n            if invoice.state == 'invoice_except_open':\n                report_type = 'pdf'\n            if invoice.state == 'invoice_except_paid':\n                report_type = 'pdf'\n            if invoice.state == 'invoice_except_cancel':\n                report_type = 'pdf'\n            if invoice.state == 'proforma2':\n                report_type = 'pdf'\n            if invoice.state == 'open2':\n                report_type = 'pdf'\n            if invoice.state == 'paid2':\n                report_type = 'pdf'\n            if invoice.state == 'cancel2':\n                report_type = 'pdf'\n            if invoice.state == 'invoice_except2':\n                report_type = 'pdf'\n            if invoice.state == 'invoice_except_done2':\n                report_type = 'pdf'\n", "CodeBleu_score": 23.035411267721035}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    # Check access to the invoice\n    invoice_sudo = self._document_check_access('account.invoice', invoice_id, access_token=access_token)\n\n    # If the invoice is not a draft, and the user has access, redirect to the report\n    if invoice_sudo.state != 'draft' and invoice_sudo.can_view_invoice_document():\n        if download:\n            # If a PDF download is requested, retrieve legal documents, create a zip file if there are multiple attachments, and return the file with appropriate headers\n            if report_type == 'pdf':\n                attachments = invoice_sudo._get_invoice_legal_documents()\n                if len(attachments) > 1:\n                    # If there are multiple attachments, create a zip file and return it\n                    zip_file = self._build_zip_from_attachments(attachments)\n                    response = request.make_response(zip_file, headers=self._get_zip_headers(invoice_sudo._get_invoice_report_filename()))\n                    return response\n                else:\n                    # If there is only one attachment, return it\n                    response = request.make_response(attachments[0].datas, headers=self._get_http_headers(attachments[0]))\n                    return response\n            else:\n                # If a download is requested but the report type is not PDF, redirect to the report\n                return request.redirect('/my/invoices/%s?report_type=%s&download=True' % (invoice_id, report_type))\n        else:\n            # If a report is requested, prepare and show the report\n            if report_type == 'html':\n                return self._show_report(invoice_sudo, report_type)\n            elif report_type == 'pdf':\n                return self._show_report(invoice_sudo, report_type, 'account.report_invoice_document')\n            elif report_type == 'text':\n                return self._show_report(invoice_sudo, report_type, 'account.report_invoice_document_text')\n            else:\n                # If the report type is not specified, redirect to", "CodeBleu_score": 44.19029018186227}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t\n    if not company:\n        company = self.env.company\n    templates = self.env['product.template'].search([('website_published', '=', True), ('company_id', '=', company.id)])\n    if company.account_sale_tax_id:\n        templates.write({'taxes_id': [(6, 0, [company.account_sale_tax_id.id])]})\n    if company.account_purchase_tax_id:\n        templates.write({'taxes_id_purchase': [(6, 0, [company.account_purchase_tax_id.id])]})\n    return templates\n\n", "CodeBleu_score": 29.72608194316181}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    if not company:\n        company = self.env.company\n    # get the domain of the company\n    domain = [('company_id', '=', company.id)]\n    # search for product templates based on the domain\n    product_templates = self.env['product.template'].search(domain)\n    # if the company's account_sale_tax_id is set, update the sale taxes for the product templates\n    if company.account_sale_tax_id:\n        product_templates.write({'taxes_id': [(6, 0, [company.account_sale_tax_id.id])]})\n    # if the company's account_purchase_tax_id is set, update the purchase taxes for the product templates\n    if company.account_purchase_tax_id:\n        product_templates.write({'supplier_taxes_id': [(6, 0, [company.account_purchase_tax_id.id])]})\n    return product_templates\n\n", "CodeBleu_score": 30.56010542811268}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    self.ensure_one()\n    if not self.env.user.has_group('base.group_no_one'):\n        raise UserError(_('Only users with the \"No One\" group can call this function.'))\n    if not company:\n        company = self.env.company\n    prod_templates = self.env['product.template'].search([\n        ('company_id', '=', company.id),\n        ('website_published', '=', True),\n    ])\n    if not prod_templates:\n        return\n    # Apply the company's sale taxes to the products\n    if company.account_sale_tax_id:\n        prod_templates.filtered_domain(lambda x: x.taxes_id != company.account_sale_tax_id).write({'taxes_id': company.account_sale_tax_id.id})\n    # Apply the company's purchase taxes to the products\n    if company.account_purchase_tax_id:\n        prod_templates.filtered(lambda x: x.taxes_id != company.account_purchase_tax_id).write({'taxes_id': company.account_purchase_tax_id.id})\n    # Write the company's website_published value on the products\n    prod_templates.write({'website_published': company.website_published})\n    return prod_templates\n", "CodeBleu_score": 38.49403740238926}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    if not company:\n        company = self.env.company\n    account_id = self.env['ir.model.data'].xmlid_to_res_id(xml_id, raise_if_not_found=False)\n    if account_id:\n        return self.env['account.account'].browse(account_id)\n    domain = [\n        ('company_id', '=', company.id),\n        ('user_type_id', '=', self.env.ref('account.data_account_type_%s' % account_type).id),\n    ]\n    account = self.env['account.account'].search(domain, limit=1)\n    if account:\n        return account\n    domain = [\n        ('company_id', '=', company.id),\n    ]\n    return self.env['account.account'].search(domain, limit=1)\n\n", "CodeBleu_score": 47.935188655691995}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    if not xml_id:\n        return False\n    Account = request.env['account.account']\n    ModelData = request.env['ir.model.data']\n\n    account = ModelData.xmlid_to_object(xml_id, raise_if_not_found=False)\n    if not account:\n        domain = [('company_id', '=', company.id), ('internal_type', '=', account_type)]\n        accounts = Account.search(domain, limit=1)\n        account = accounts and accounts[0] or False\n    return account\n\n", "CodeBleu_score": 37.1099602033317}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env['account.account'].search([('company_id', '=', company.id), ('xml_id', '=', xml_id)], limit=1)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id', '=', account_type.id)], limit=1)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n    return account\n\n", "CodeBleu_score": 45.569600550993506}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    accounts = Account.objects.filter(account_type=\"Current Year Earnings\").values(\"company\").annotate(count=Count(\"company\"))\n    for account in accounts:\n        if account[\"count\"] > 1:\n            raise ValidationError(\n                f\"There is more than one account with the type 'Current Year Earnings' for company '{account['company']}'.\"\n            )\n\n", "CodeBleu_score": 22.037194204524422}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    accounts = Account.objects.filter(account_type=Account.CURRENT_YEAR_EARNINGS)\n    accounts_grouped_by_company = accounts.values('company').annotate(count=Count('id'))\n    for account in accounts_grouped_by_company:\n        if account['count'] > 1:\n            raise ValidationError({'account_type': 'There can only be one account with the Current Year Earnings type for each company.'})\n\n", "CodeBleu_score": 21.71006020317429}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    accounts = Account.objects.filter(account_type=\"Current Year Earnings\").values(\"company\").annotate(Count(\"company\"))\n    for account in accounts:\n        if account[\"company__count\"] > 1:\n            raise ValidationError(\"There can only be one account of type Current Year Earnings for each company.\")\n\n", "CodeBleu_score": 16.955513279670953}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and domain is None:\n        return self._order_accounts_by_frequency_for_partner()\n    if not domain:\n        domain = []\n    if name:\n        domain = expression.AND([domain, [('name', operator, name)]])\n    return self.search(domain, limit=limit, order=order)\n\n", "CodeBleu_score": 23.564658063330917}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if name:\n        domain = expression.AND([domain, [('name', operator, name)]])\n    if not domain:\n        domain = []\n    if not order:\n        order = self._order_accounts_by_frequency_for_partner(domain)\n    return self.search(domain, limit=limit, order=order)\n\n", "CodeBleu_score": 22.82838231094192}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name:\n        if self._context.get('partner_id'):\n            return self._order_accounts_by_frequency_for_partner(domain, limit, order)\n        else:\n            return self.env['account.account']\n    domain = expression.AND([domain, [('name', operator, name)]])\n    return self.search(domain, limit=limit, order=order)\n\n", "CodeBleu_score": 27.537901667093895}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t\n    # Exclude name field\n    excluded = excluded + ('name',)\n    # Copy translations\n    super(self.__class__, self).copy_translations(new, excluded)\n    # Update name field translations\n    if new.name_field._get_stored_translations():\n        new.name_field.update_raw(new.name_field._get_stored_translations())\n\n", "CodeBleu_score": 27.80244132112555}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    new_name = new.name\n    for field in self._fields:\n        if field in excluded or field == 'name':\n            continue\n        if field in self and self[field]:\n            new[field] = self[field]\n    if new_name and new_name != self.name:\n        new.name_field._get_stored_translations(new_name)\n\n", "CodeBleu_score": 29.31833742859177}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    for field in self._fields:\n        if field in excluded or field == 'name':\n            continue\n        new_value = self[field]\n        if field in self._translated_fields:\n            new._get_stored_translations(field)[new._context.lang] = new_value\n        else:\n            new[field] = new_value\n\n    if new.name_get_pattern():\n        new.update_raw({'name': new.name_get_string()})\n\n    return new\n", "CodeBleu_score": 29.512977986243666}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    sale_types = self._get_sale_types()\n    query = self.env['account.move.line'].with_context(active_test=False)\n    query = query.select_from(query._select_from + ', account_analytic_line')\n    query = query.add_where(query._where_calc + ' AND account_analytic_line.id = account_move_line.analytic_line_id')\n    query = query.add_where(query._where_calc + ' AND account_move_line.move_id = account_move.id')\n    query = query.add_where(query._where_calc + ' AND account_move.type in %s')\n    query = query.add_where(query._where_calc + ' AND account_move.state IN %s')\n    query = query.add_where(query._where_calc + ' AND account_analytic_line.so_line IN %s')\n    query = query.add_where(query._where_calc + ' AND account_analytic_line.product_id = account_move_line.product_id')\n    query = query.add_where(query._where_calc + ' AND account_move_line.account_id = account_analytic_line.account_id')\n    query = query.add_where(query._where_calc + ' AND account_move_line.analytic_account_id = account_analytic_line.analytic_account_id')\n    query = query.add_where(query._where_calc + ' AND account_move_line.analytic_tag_ids = account_analytic_line.analytic_tag_ids')\n    query = query.add_where(query._where_calc + ' AND account_move_line.analytic_tag_ids = account_analytic_line.analytic_tag_ids')\n    query = query.add_where(query._where_calc + ' AND account_move_line.company_id = account_analytic_line.company_id')\n    query = query.add_where(query._where", "CodeBleu_score": 21.03826823569156}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    sale_types = self.get_sale_types()\n    query = self.env['account.move.line'].with_context(active_test=False)._query_analytic_accounts()\n    query.select += ', aml.date_maturity'\n    query.add_where(\"(aml.sale_line_id = %s)\" % self.id)\n    query.add_where(\"(aml.product_id IS NOT NULL)\")\n    query.add_where(\"(aml.sale_line_id IS NOT NULL)\")\n    query.add_where(\"(aml.sale_line_id.is_expense = False)\")\n    query.add_where(\"(aml.sale_line_id.is_service = False)\")\n    query.add_where(\"(aml.sale_line_id.is_product = True)\")\n    query.add_where(\"(aml.sale_line_id.is_service = False)\")\n    query.add_where(\"(aml.sale_line_id.is_expense = False)\")\n    query.add_where(\"(aml.sale_line_id.is_product = True)\")\n    query.add_where(\"(aml.sale_line_id.is_service = False)\")\n    query.add_where(\"(aml.sale_line_id.is_expense = False)\")\n    query.add_where(\"(aml.sale_line_id.is_product = True)\")\n    query.add_where(\"(aml.sale_line_id.is_service = False)\")\n    query.add_where(\"(aml.sale_line_id.is_expense = False)\")\n    query.add_where(\"(aml.sale_line_id.is_product = True)\")\n    query.add_where(\"(aml.sale_line_id.is_service = False)\")\n    query.add_where(\"(aml.sale_line_id.is_expense = False)\")\n    query.add_where(\"(aml.sale_line_id.is_product = True)\")\n    query.add_where(\"(", "CodeBleu_score": 18.842583294252076}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    sale_types = self.get_sale_types()\n    query = self.env['account.move.line']._query_analytic_accounts()\n    query.add_where(('account_id.type', 'in', sale_types))\n    query.add_where(('account_id.internal_type', '=', 'sale'))\n    query.add_where(('account_id.internal_group', '=', 'sale'))\n    query.add_where(('account_id.reconcile', '=', False))\n    query.add_where(('account_id.allow_document_deletion', '=', True))\n    query.add_where(('account_id.deprecated', '=', False))\n    query.add_where(('account_id.active', '=', True))\n    query.add_where(('account_id.company_id', '=', self.env.company.id))\n    query.add_where(('account_id.auto_followup', '=', True))\n    query.add_where(('account_id.auto_followup_after_days', '!=', 0))\n    query.add_where(('account_id.auto_followup_stage_id', '!=', False))\n    query.add_where(('account_id.auto_followup_stage_id.probability', '!=', 100))\n    query.add_where(('account_id.auto_followup_stage_id.probability', '!=', 0))\n    query.add_where(('account_id.auto_followup_stage_id.auto_probability', '=', True))\n    query.add_where(('account_id.auto_followup_stage_id.fold', '=', False))\n    query.add_where(('account_id.auto_followup_stage_id.requirements', '=', False))\n    query.add_where(('account_id.auto_followup_stage_id.on_change', '=', False))\n    query.add_where(('account_id.", "CodeBleu_score": 18.255863223815673}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    query = self.env['account.move.line']._query_analytic_accounts()\n    query.add_where(query.where + ' AND account_id IN %s')\n    query.add_where(query.where + ' AND analytic_line_id = %s')\n    query.add_where(query.where + ' AND move_id IS NOT NULL')\n    query.add_where(query.where + ' AND analytic_line_id IS NOT NULL')\n    query.add_where(query.where + ' AND move_id IN %s')\n    query.add_where(query.where + ' AND move_id.state = \\'posted\\'')\n    query.add_where(query.where + ' AND move_id.invoice_payment_state = \\'not_paid\\'')\n    query.add_where(query.where + ' AND move_id.invoice_payment_term_id IS NOT NULL')\n    query.add_where(query.where + ' AND move_id.invoice_payment_term_id.company_id = %s')\n    query.add_where(query.where + ' AND move_id.invoice_payment_term_id.company_id = %s')\n    query.add_where(query.where + ' AND move_id.invoice_payment_term_id.company_id = %s')\n    query.add_where(query.where + ' AND move_id.invoice_payment_term_id.company_id = %s')\n    query.add_where(query.where + ' AND move_id.invoice_payment_term_id.company_id = %s')\n    query.add_where(query.where + ' AND move_id.invoice_payment_term_id.company_id = %s')\n    query.add_where(query.where + ' AND move_id.invoice_payment_term_id.company_id = %s')\n    query.add_where(query.where + ' AND move_id.invoice_payment_term_id.company_id = %s')\n    query.add_where(", "CodeBleu_score": 17.131012130294955}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    query = self.env['account.move.line']._query_analytic_accounts()\n    query.add_where(\"\"\"\n        move_line.account_id.internal_type = 'purchase' AND\n        move_line.account_id.internal_group = 'purchase' AND\n        move_line.analytic_account_id = %s AND\n        move_line.account_id.user_type_id = %s\n    \"\"\" % (self.id, self.env.ref('account.data_account_type_purchase').id))\n    move_ids = self.env['account.move.line'].search(query).mapped('move_id').ids\n    action = self.env.ref('account.action_move_journal_line').read()[0]\n    action['context'] = {\n        'default_move_type': 'in_invoice',\n        'default_type': 'out_invoice',\n        'default_journal_id': self.env.ref('purchase.purchase_journal').id,\n        'default_move_id': move_ids,\n        'search_default_unreconciled': 1,\n        'search_default_posted_move': 1,\n        'default_show_line_details': 1,\n        'default_show_journal_name': 1,\n        'default_show_journal_dashboard': 1,\n        'default_show_journal_dashboard_graph': 1,\n        'default_show_journal_dashboard_graph_maturity': 1,\n        'default_show_journal_dashboard_graph_payments': 1,\n        'default_show_journal_dashboard_graph_receivables': 1,\n        'default_show_journal_dashboard_graph_payables': 1,\n        'default_show_journal_dashboard_graph_turnover': 1,\n        'default_show_journal_dashboard_graph_profitability': 1,\n        'default_show_journal_dashboard_graph_liquid", "CodeBleu_score": 27.198042876909433}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    query = \"\"\"\n        SELECT DISTINCT aml.move_id\n        FROM account_move_line aml\n        WHERE aml.purchase_line_id = %s\n    \"\"\"\n    query_params = (self.id,)\n    self._cr.execute(query, query_params)\n    move_ids = [x[0] for x in self._cr.fetchall()]\n    return {\n        'name': 'Vendor Bills',\n        'domain': [('id', 'in', move_ids)],\n        'view_mode': 'tree,form',\n        'res_model': 'account.move',\n        'type': 'ir.actions.act_window',\n        'context': {'default_type': 'in_invoice', 'default_purchase_type': 'incoming'},\n    }\n\n", "CodeBleu_score": 26.735663303486533}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\t\n    if len(values) > 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n    with self._check_attachments(values):\n        return super(MailComposeMessage, self).write(values)\n", "CodeBleu_score": 38.14147296092806}, {"code": "def write(self, values)\n\t\n    if len(values) > 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n    self._check_attachments\n    with self.env.cr.savepoint():\n        return super(MailThread, self).write(values)\n", "CodeBleu_score": 40.8709663977691}, {"code": "def write(self, values)\n\t\n    if len(values) > 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n    with self._check_attachments(values):\n        return super(MailComposeMessage, self).write(values)\n", "CodeBleu_score": 38.14147296092806}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_one()\n    if self.env.context.get('skip_bank_account_creation'):\n        return self.env['res.partner.bank'].new(self.env.context)\n    bank_account = self.env['res.partner.bank'].search([('acc_number', '=', self.acc_number), ('partner_id', '=', self.partner_id.id)], limit=1)\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create({\n            'acc_number': self.acc_number,\n            'acc_type': self.acc_type,\n            'bank_id': self.bank_id.id,\n            'partner_id': self.partner_id.id,\n            'company_id': self.partner_id.company_id.id,\n            'sequence': self.sequence,\n            'currency_id': self.currency_id.id,\n        })\n    return bank_account.filtered(lambda x: x.company_id.id == self.company_id.id)\n\n", "CodeBleu_score": 57.50121251778857}, {"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_one()\n    if self.env.context.get('skip_bank_account_creation'):\n        return self.env['res.partner.bank'].new(self)\n    bank_account = self.env['res.partner.bank'].search([\n        ('acc_number', '=', self.acc_number),\n        ('partner_id', '=', self.partner_id.id),\n        ('company_id', '=', self.company_id.id),\n    ])\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create({\n            'acc_number': self.acc_number,\n            'partner_id': self.partner_id.id,\n            'company_id': self.company_id.id,\n        })\n    return bank_account\n\n", "CodeBleu_score": 54.402834593199614}, {"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_one()\n    if not self.env['ir.config_parameter'].sudo().get_param(\n        'account.bank.statement.import.skip_bank_account_creation'\n    ):\n        bank_account = self.env['res.partner.bank'].search(\n            [\n                ('acc_number', '=', self.acc_number),\n                ('partner_id', '=', self.partner_id.id),\n            ],\n            limit=1,\n        )\n        if not bank_account:\n            bank_account = self.env['res.partner.bank'].create(\n                {\n                    'acc_number': self.acc_number,\n                    'partner_id': self.partner_id.id,\n                }\n            )\n    else:\n        bank_account = self.env['res.partner.bank']\n    return bank_account.filtered(lambda ba: ba.company_id == self.company_id)\n\n", "CodeBleu_score": 55.28191979717114}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    # Ensure a single record context\n    self.ensure_one()\n\n    # Retrieve relevant accounting amounts and currencies\n    (\n        amount_company_currency,\n        amount_currency,\n        amount_company_currency_before_unreconcile,\n        amount_currency_before_unreconcile,\n        amount_unreconciled,\n        amount_unreconciled_currency,\n        amount_reconciled,\n        amount_reconciled_currency,\n        amount_reconciled_company_currency,\n    ) = self._get_accounting_amounts_and_currencies(currency)\n\n    # Compute transaction amount, journal amount, and company amount using various exchange rates\n    transaction_currency = self.transaction_currency\n    transaction_amount = self.amount\n    journal_currency = self.journal_currency\n    journal_amount = self.journal_entry_id.amount_currency\n    company_currency = self.company_currency\n    company_amount = self.company_id.currency_id._convert(\n        transaction_amount, transaction_currency, company_currency, self.company_id, self.date\n    )\n    if journal_currency:\n        journal_amount = self.journal_entry_id.amount_currency\n        company_amount = self.company_id.currency_id._convert(\n            journal_amount, journal_currency, company_currency, self.company_id, self.date\n        )\n    # Adjust the transaction amount and balance accordingly\n    if currency == transaction_currency:\n        transaction_amount = amount_currency\n        balance = amount_currency_before_unreconcile\n    elif currency == journal_currency:\n        transaction_amount = amount_unreconciled_currency\n        balance = amount_unreconciled\n    elif currency == company_currency:\n        transaction_amount = amount_reconciled_company_currency\n        balance = amount_reconciled\n    else:\n        # This should not happen\n        raise UserError(\n            _(\n                \"The currency of the transaction is neither the transaction currency, the journal currency, nor the company currency.\"\n            )\n        )\n    return {", "CodeBleu_score": 30.54325633689213}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    if not currency:\n        currency = self.company_id.currency_id\n    if not amount_currency:\n        amount_currency = self.currency_id\n    self.ensure_one()\n    # Retrieve relevant accounting amounts and currencies\n    accounting_amounts_and_currencies = self._get_accounting_amounts_and_currencies(currency, amount_currency)\n    # Compute the transaction amount, journal amount, and company amount using various exchange rates\n    if currency.is_zero(balance):\n        # The balance is 0, the transaction amount is the original amount\n        transaction_amount = self.amount\n    else:\n        # The balance is not 0, the transaction amount is the balance\n        transaction_amount = balance\n    # Compute the journal amount\n    if self.journal_currency.is_zero(amount_currency.rate):\n        # The journal currency rate is 0, the journal amount is the transaction amount\n        journal_amount = transaction_amount\n    else:\n        # The journal currency rate is not 0, the journal amount is the transaction amount converted to the journal currency\n        journal_amount = currency.round(transaction_amount * self.journal_currency.rate)\n    # Compute the company amount\n    if self.company_currency.is_zero(currency.rate):\n        # The company currency rate is 0, the company amount is the journal amount\n        company_amount = journal_amount\n    else:\n        # The company currency rate is not 0, the company amount is the journal amount converted to the company currency\n        company_amount = self.journal_currency.round(journal_amount * self.company_currency.rate)\n    # Adjust the transaction amount and balance accordingly\n    if currency.is_zero(balance):\n        # The balance is 0, the transaction amount is the original amount\n        transaction_amount = self.amount\n        balance = transaction_amount\n    else:\n        # The balance is not 0, the transaction amount is the balance\n        balance = transaction_amount\n    # Return the amounts in a dictionary\n    return {\n        'transaction_amount': transaction_amount,\n        'journal_amount': journal_amount,\n        'company", "CodeBleu_score": 28.000967723981375}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    transaction_currency = self.currency_id\n    company_currency = self.company_id.currency_id\n    journal_currency = self.journal_id.currency_id\n    # Ensure a single record context\n    if transaction_currency == company_currency:\n        transaction_currency = False\n    if transaction_currency == journal_currency:\n        journal_currency = False\n    # Retrieve relevant accounting amounts and currencies\n    (\n        amount_company,\n        amount_currency,\n        amount_journal,\n        amount_transaction,\n        balance_company,\n        balance_currency,\n        balance_journal,\n        balance_transaction,\n    ) = self._get_accounting_amounts_and_currencies(\n        currency,\n        amount_currency,\n        balance,\n        transaction_currency,\n        company_currency,\n        journal_currency,\n    )\n    # Compute transaction amount, journal amount, and company amount using various exchange rates\n    if transaction_currency:\n        amount_transaction = amount_currency * transaction_currency.rate\n        balance_transaction = balance_currency * transaction_currency.rate\n    if journal_currency:\n        amount_journal = amount_currency * journal_currency.rate\n        balance_journal = balance_currency * journal_currency.rate\n    if company_currency:\n        amount_company = amount_currency * company_currency.rate\n        balance_company = balance_currency * company_currency.rate\n    # Adjust transaction amount and balance accordingly\n    if self.account_id.internal_type in (\"receivable\", \"payable\"):\n        amount_transaction = -amount_transaction\n        balance_transaction = -balance_transaction\n    if self.account_id.internal_type in (\"receivable\", \"payable\") and self.type == \"situation\":\n        amount_journal = -amount_journal\n        balance_journal = -balance_journal\n        amount_company = -amount_company\n        balance_company = -balance_company\n    # Return amounts in a dictionary\n    return {\n        \"amount_company\": amount_company,\n        \"amount_currency\": amount_currency,", "CodeBleu_score": 27.746123746274748}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    self.ensure_one()\n    payment_method_line_ids = []\n    if self.type in ['bank', 'cash']:\n        for payment_method in self._default_outbound_payment_methods:\n            payment_method_line_ids.append((0, 0, {'payment_method_id': payment_method.id}))\n    self.payment_method_ids = payment_method_line_ids\n\n", "CodeBleu_score": 20.193970145800254}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    self.ensure_one()\n    self.outbound_payment_method_ids = [(5, 0, 0)]\n    if self.type in ('bank', 'cash'):\n        default_outbound_payment_methods = self.env['account.payment.method'].search([('journal_id', '=', False), ('payment_type', '=', 'outbound')])\n        for payment_method in default_outbound_payment_methods:\n            line = self.env['account.payment.method.line'].create({\n                'payment_method_id': payment_method.id,\n                'journal_id': self.id,\n            })\n            self.outbound_payment_method_ids.append((4, line.id))\n\n", "CodeBleu_score": 32.05654811202128}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    outbound_payment_method_line_ids = self.env['account.payment.method.line']\n    if self.type in ['bank', 'cash']:\n        default_outbound_payment_methods = self.env['account.payment.method'].search([('payment_type', '=', 'outbound')])\n        for payment_method in default_outbound_payment_methods:\n            outbound_payment_method_line_ids |= self.env['account.payment.method.line'].create({\n                'payment_method_id': payment_method.id,\n                'journal_id': self.id,\n            })\n    self.outbound_payment_method_line_ids = outbound_payment_method_line_ids\n\n", "CodeBleu_score": 27.94122518217474}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t\n    if self.date:\n        return self.date\n    if self.invoice_date:\n        if not self.is_sale_document():\n            accounting_date = self.invoice_date\n            if self._affect_tax_report():\n                accounting_date = self.invoice_date + relativedelta(days=self.company_id.tax_report_accounting_date_offset)\n            self.date = accounting_date\n            if self.date != self.invoice_date:\n                self.with_context(move_date_change=True)._recompute_tax_report_lines()\n        else:\n            self.date = self.invoice_date\n    else:\n        self.date = fields.Date.today()\n    return self.date\n\n", "CodeBleu_score": 35.08511623314907}, {"code": "def _compute_date(self)\n\t\n    # If there is an invoice date, calculate the accounting date\n    if self.invoice_date:\n        # If the move is not a sale document, calculate the accounting date\n        if not self.is_sale_document():\n            # Get the accounting date\n            accounting_date = self._get_accounting_date()\n            # If the accounting date differs from the current date, update the move's date and schedule the recalculation of related fields\n            if accounting_date != self.date:\n                self.date = accounting_date\n                self.env.context.update({'date': self.date})\n                self.env.context.update({'force_tax_included': True})\n                self.env.context.update({'force_tax_excluded': True})\n                self.env.context.update({'force_tax_excluded_amount': True})\n                self.env.context.update({'force_tax_included_amount': True})\n                self.env.context.update({'force_tax_excluded_amount_in_company_currency': True})\n                self.env.context.update({'force_tax_included_amount_in_company_currency': True})\n                self.env.context.update({'force_tax_excluded_base_amount': True})\n                self.env.context.update({'force_tax_included_base_amount': True})\n                self.env.context.update({'force_tax_excluded_base_amount_in_company_currency': True})\n                self.env.context.update({'force_tax_included_base_amount_in_company_currency': True})\n                self.env.context.update({'force_tax_excluded_amount_in_company_currency_after_tax': True})\n                self.env.context.update({'force_tax_included_amount_in_company_currency_after_tax': True})\n                self.env.context.update({'force_tax_excluded_base_amount_in_company_currency_after_tax': True})\n                self.env.context.update({'force_tax_included", "CodeBleu_score": 20.55171293965762}, {"code": "def _compute_date(self)\n\t\n    if not self.invoice_date and not self.date:\n        self.date = fields.Date.today()\n    if self.invoice_date and not self.date:\n        accounting_date = self._get_accounting_date()\n        if accounting_date != self.date:\n            self.date = accounting_date\n            self.with_context(check_move_validity=False)._trigger_compute_fields()\n\n", "CodeBleu_score": 22.948692564506583}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\t\n    if self.type in ('out_invoice', 'out_refund'):\n        if self.partner_id.property_supplier_payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.property_supplier_payment_term_id.id\n        else:\n            self.invoice_payment_term_id = False\n    elif self.type in ('in_invoice', 'in_refund'):\n        if self.partner_id.property_supplier_payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.property_supplier_payment_term_id.id\n        else:\n            self.invoice_payment_term_id = False\n    else:\n        self.invoice_payment_term_id = False\n\n", "CodeBleu_score": 33.10976847478013}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    self.ensure_one()\n    if self.is_sale_document():\n        if self.partner_id.property_payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.property_payment_term_id.id\n        else:\n            self.invoice_payment_term_id = False\n    elif self.is_purchase_document():\n        if self.partner_id.property_supplier_payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.property_supplier_payment_term_id.id\n        else:\n            self.invoice_payment_term_id = False\n    else:\n        self.invoice_payment_term_id = False\n\n", "CodeBleu_score": 30.336139599082323}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    if self.is_sale_document():\n        if self.partner_id.property_payment_term_id:\n            return self.partner_id.property_payment_term_id.id\n        else:\n            return False\n    elif self.is_purchase_document():\n        if self.partner_id.property_supplier_payment_term_id:\n            return self.partner_id.property_supplier_payment_term_id.id\n        else:\n            return False\n    else:\n        return False\n\n", "CodeBleu_score": 26.409982081315775}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t\n    self.ensure_one()\n    tax_group_id = self.tax_group_id\n    if tax_group_id:\n        return tax_group_id\n\n    # get all taxes with the same country and company\n    taxes = self.search([('country_id', '=', self.country_id.id), ('company_id', '=', self.company_id.id)])\n    if taxes:\n        # search for a matching tax group\n        tax_group_id = taxes.mapped('tax_group_id')\n        if tax_group_id:\n            return tax_group_id\n\n    # search for a tax group without a specified country\n    tax_group_id = self.env['account.tax.group'].search([('country_id', '=', False), ('company_id', '=', self.company_id.id)])\n    if tax_group_id:\n        return tax_group_id\n\n    # search for a tax group without a specified company\n    tax_group_id = self.env['account.tax.group'].search([('company_id', '=', False)])\n    if tax_group_id:\n        return tax_group_id\n\n    return self.env['account.tax.group']\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 29.044856337809872}, {"code": " def _compute_tax_group_id(self)\n\t\n    self.ensure_one()\n    # Group taxes by their country and company.\n    tax_groups_by_country_company = defaultdict(list)\n    for tax_group in self.env['account.tax.group'].search([]):\n        tax_groups_by_country_company[(tax_group.country_id, tax_group.company_id)].append(tax_group)\n    taxes_by_country_company = defaultdict(list)\n    for tax in self:\n        taxes_by_country_company[(tax.country_id, tax.company_id)].append(tax)\n    # For each tax, find a matching tax group.\n    for tax in self:\n        tax_groups = tax_groups_by_country_company[(tax.country_id, tax.company_id)]\n        tax_group = next((tax_group for tax_group in tax_groups if tax_group.tax_ids.filtered(lambda x: x.id == tax.id)), None)\n        if not tax_group:\n            # No tax group with the same country and company was found.\n            # Search for a tax group without a specified country but within the same company.\n            tax_groups = tax_groups_by_country_company[(None, tax.company_id)]\n            tax_group = next((tax_group for tax_group in tax_groups if tax_group.tax_ids.filtered(lambda x: x.id == tax.id)), None)\n        if tax_group:\n            tax.tax_group_id = tax_group.id\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 30.897138890420468}, {"code": " def _compute_tax_group_id(self)\n\t\n    # Categorize taxes by their country and company.\n    by_country_company = defaultdict(list)\n    for tax in self:\n        by_country_company[(tax.country_id.id, tax.company_id.id)].append(tax)\n\n    # Assign tax groups to taxes based on their country and company.\n    for (country_id, company_id), taxes in by_country_company.items():\n        # Search for a tax group with the same country and company.\n        tax_group = self.env['account.tax.group'].search([\n            ('country_id', '=', country_id),\n            ('company_id', '=', company_id),\n        ], limit=1)\n        if not tax_group:\n            # Search for a tax group without a specified country but within the same company.\n            tax_group = self.env['account.tax.group'].search([\n                ('country_id', '=', False),\n                ('company_id', '=', company_id),\n            ], limit=1)\n        if tax_group:\n            for tax in taxes:\n                tax.tax_group_id = tax_group\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 38.19943925836562}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set database in session\n    self.session.get(url)\n\n    # Prepare POST request data\n    data = {'login': login, 'password': password, 'db': db}\n    if force:\n        data['force'] = '1'\n\n    # Read module file\n    with open(module_file, 'rb') as f:\n        module_file_content = f.read()\n\n    # Upload module file\n    response = self.session.post(\n        url + 'base_import_module/login_upload',\n        data=data,\n        files={'file': module_file_content}\n    )\n    response.raise_for_status()\n    return response.text\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 43.650889323076605}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n\n    # Set the database in the session\n    res = self.session.get(url)\n    res.raise_for_status()\n    res = self.session.post(url, data={'db': db})\n    res.raise_for_status()\n\n    # Prepare the POST request data\n    with open(module_file, 'rb') as f:\n        module_data = f.read()\n\n    data = {\n        'login': login,\n        'password': password,\n        'db': db,\n        'module_file': (module_file, module_data),\n        'force': 'on' if force else None\n    }\n\n    # Upload the module file\n    res = self.session.post(url + '/base_import_module/login_upload', data=data)\n    res.raise_for_status()\n\n    # If the server does not have the required module installed or is outdated, it raises an exception\n    if res.status_code == 500:\n        raise Exception(res.text)\n\n    return res.text\n\n", "CodeBleu_score": 53.10790480843408}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n\n    # Set the database in the session\n    self.session.get(url + '/web/session/authenticate?db=' + db)\n\n    # Prepare the POST request data\n    data = {'login': login, 'password': password, 'db': db}\n    if force:\n        data['force'] = 'True'\n\n    # Read the module file and upload it to the server\n    with open(module_file, 'rb') as f:\n        module_file_content = f.read()\n    files = {'file': module_file_content}\n    response = self.session.post(url + '/base_import_module/login_upload', data=data, files=files)\n\n    # Raise an exception if the server does not have the required module installed or is outdated\n    if response.status_code == 400:\n        raise Exception('The server does not have the required module installed or is outdated.')\n\n    return response.text\n\n", "CodeBleu_score": 49.705105458281174}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t\n    # Retrieve configuration settings\n    db_name = config.get(\"translation_importer\", \"db_name\")\n    overwrite_existing = config.getboolean(\"translation_importer\", \"overwrite_existing\")\n\n    # Create a new database registry\n    registry = Registry(db_name)\n    with registry.cursor() as cr:\n        # Initialize a TranslationImporter\n        translation_importer = TranslationImporter(cr)\n\n        # Load translation files\n        translation_importer.load_file(\n            \"../translations/en_US/LC_MESSAGES/base.po\",\n            \"en_US\",\n            \"base\",\n            overwrite_existing,\n        )\n        translation_importer.load_file(\n            \"../translations/en_US/LC_MESSAGES/web.po\",\n            \"en_US\",\n            \"web\",\n            overwrite_existing,\n        )\n        translation_importer.load_file(\n            \"../translations/en_US/LC_MESSAGES/extra.po\",\n            \"en_US\",\n            \"extra\",\n            overwrite_existing,\n        )\n\n        # Save translations\n        translation_importer.save()\n\n", "CodeBleu_score": 34.81316001925744}, {"code": "def import_translation()\n\t\n    # Get configuration settings\n    db_name = config.get('database', 'db_name')\n    overwrite_existing_translations = config.getboolean('translations', 'overwrite_existing_translations')\n\n    # Create a new database registry\n    registry = RegistryManager.new(db_name)\n\n    # Initialize a TranslationImporter\n    with registry.cursor() as cr:\n        translator = TranslationImporter(cr)\n\n        # Load translation files\n        translator.load_file(\n            'addons/my_module/i18n/en_US.po',\n            'my_module',\n            'en_US',\n        )\n        translator.load_file(\n            'addons/my_module/i18n/fr_FR.po',\n            'my_module',\n            'fr_FR',\n        )\n        translator.load_file(\n            'addons/my_module/i18n/es_ES.po',\n            'my_module',\n            'es_ES',\n        )\n\n        # Save translations\n        translator.save(overwrite=overwrite_existing_translations)\n\n", "CodeBleu_score": 35.50433439500561}, {"code": "def import_translation()\n\t\n    import odoo\n    from odoo.tools import config\n\n    # Get configuration settings\n    db_name = config.get('db_name')\n    overwrite = config.get('overwrite')\n\n    # Create a new registry and use it to initialize a TranslationImporter\n    registry = odoo.modules.registry.Registry.new(db_name)\n    with registry.cursor() as cr:\n        translation_importer = odoo.tools.translate.TranslationImporter(cr)\n        translation_importer.load_module('base', 'en_US', 'l10n_en', overwrite)\n        translation_importer.load_module('base', 'fr_FR', 'l10n_fr', overwrite)\n        translation_importer.load_module('base', 'de_DE', 'l10n_de', overwrite)\n        translation_importer.save()\n", "CodeBleu_score": 54.4335474425305}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\t\n    if name in self.children:\n        print(\"Node already exists:\", name)\n        return self.children[name]\n    else:\n        child = Node(name, info, self.depth+1)\n        self.children[name] = child\n        if hasattr(self, \"title\"):\n            child.title = self.title\n        if hasattr(self, \"color\"):\n            child.color = self.color\n        if hasattr(self, \"icon\"):\n            child.icon = self.icon\n        if hasattr(self, \"expanded\"):\n            child.expanded = self.expanded\n        self.children = sorted(self.children.values(), key=lambda child: child.name)\n        return child\n\n", "CodeBleu_score": 29.106358552593754}, {"code": "def add_child(self, name, info)\n\t\n    new_node = Node(name, info)\n    new_node.depth = self.depth + 1\n    if new_node not in self.children:\n        self.children.append(new_node)\n    if hasattr(self, 'parent'):\n        setattr(new_node, 'parent', self.parent)\n    if hasattr(self, 'root'):\n        setattr(new_node, 'root', self.root)\n    if hasattr(self, 'depth'):\n        setattr(new_node, 'depth', self.depth + 1)\n    self.children.sort(key=lambda x: x.name)\n    return new_node\n\n", "CodeBleu_score": 45.20080424449661}, {"code": "def add_child(self, name, info)\n\t\n    new_node = Node(name, info, self.depth + 1)\n    if hasattr(self, \"children\"):\n        if new_node not in self.children:\n            self.children.append(new_node)\n            self.children.sort(key=lambda x: x.name)\n            if hasattr(self, \"is_expanded\"):\n                new_node.is_expanded = self.is_expanded\n            if hasattr(self, \"is_selected\"):\n                new_node.is_selected = self.is_selected\n    else:\n        self.children = [new_node]\n    return new_node\n\n", "CodeBleu_score": 37.7324543533879}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t\n\n    result = {\n        \"account\": account,\n        \"account_name\": gl_entries[0].account_name,\n        \"account_type\": gl_entries[0].account_type,\n        \"currency\": gl_entries[0].account_currency,\n        \"opening_balance\": gl_entries[0].opening_balance,\n        \"balances\": [0.0] * (dates[-1] - dates[0] + 1),\n        \"totals\": [0.0] * (dates[-1] - dates[0] + 1),\n    }\n    root_type = frappe.db.get_value(\n        \"Account\", account, \"root_type\"\n    )  # get account root type\n    for entry in gl_entries:\n        d = entry.posting_date\n        if entry.is_opening == \"Yes\":\n            d = \"Opening\"\n        i = dates.index(d)\n        if root_type not in [\"Asset\", \"Expense\"]:\n            result[\"balances\"][i] -= entry.debit\n            result[\"balances\"][i] += entry.credit\n        else:\n            result[\"balances\"][i] += entry.debit\n            result[\"balances\"][i] -= entry.credit\n        if root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n            for j in range(0, i):\n                result[\"balances\"][i] += result[\"balances\"][j]\n        result[\"totals\"][i] = result[\"balances\"][i]\n    return result\n\n", "CodeBleu_score": 26.053397786694806}, {"code": "def build_result(account, dates, gl_entries)\n\t\n\n    # Initialize the result with the dates and zeros for balances\n    result = {\n        \"account_name\": account,\n        \"account\": frappe.get_cached_value(\"Account\", account, \"name\"),\n        \"warn_if_negative\": frappe.get_cached_value(\"Account\", account, \"warn_if_negative\"),\n        \"parent_account\": frappe.get_cached_value(\"Account\", account, \"parent_account\"),\n        \"indent\": frappe.get_cached_value(\"Account\", account, \"indent\"),\n        \"currency\": frappe.get_cached_value(\"Company\", company, \"default_currency\"),\n        \"opening\": [0] * len(dates),\n        \"debit\": [0] * len(dates),\n        \"credit\": [0] * len(dates),\n        \"closing\": [0] * len(dates),\n        \"change\": [0] * len(dates),\n    }\n\n    # Determine the account's root type\n    root_type = get_root_type(account)\n\n    # Iterate through the entries, updating the balance for each date\n    for entry in gl_entries:\n        if entry.posting_date < dates[0]:\n            result[\"opening\"][0] += flt(entry.debit) - flt(entry.credit)\n        elif entry.posting_date <= dates[-1]:\n            d = dates.index(entry.posting_date)\n            result[\"debit\"][d] += flt(entry.debit)\n            result[\"credit\"][d] += flt(entry.credit)\n\n    # If the root type is not \"Asset\" or \"Expense,\" negate the balances\n    if root_type not in [\"Asset\", \"Expense\"]:\n        for i in range(len(dates)):\n            result[\"opening\"][i] = -result[\"opening\"][i]\n            result[\"debit\"][i] = -result[\"debit\"][i]\n            result[\"credit\"][i] = -result[\"credit\"][i]\n\n    # Accumulate the balance over time\n    for i in", "CodeBleu_score": 24.84433177492856}, {"code": "def build_result(account, dates, gl_entries)\n\t\n\n    result = {\n        \"account\": account,\n        \"account_name\": gl_entries[0].account_name,\n        \"account_type\": gl_entries[0].account_type,\n        \"currency\": gl_entries[0].account_currency,\n        \"opening_balance\": gl_entries[0].opening_balance,\n        \"balances\": [0] * len(dates),\n        \"totals\": [0] * len(dates),\n    }\n\n    root_type = get_root_type(account)\n\n    for i, date in enumerate(dates):\n        result[\"balances\"][i] = 0\n        result[\"totals\"][i] = 0\n\n    for entry in gl_entries:\n        date = getdate(entry.posting_date)\n        i = dates.index(date)\n        result[\"balances\"][i] += entry.debit\n        result[\"balances\"][i] -= entry.credit\n\n    for i, balance in enumerate(result[\"balances\"]):\n        if i == 0:\n            result[\"totals\"][i] += balance\n        else:\n            result[\"totals\"][i] = result[\"totals\"][i - 1] + balance\n\n    if root_type not in (\"Asset\", \"Expense\"):\n        for i, balance in enumerate(result[\"balances\"]):\n            result[\"balances\"][i] = -balance\n\n    if root_type in (\"Asset\", \"Liability\", \"Equity\"):\n        for i, balance in enumerate(result[\"balances\"]):\n            result[\"totals\"][i] += balance\n\n    return result\n\n", "CodeBleu_score": 33.869236281388055}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t\n\n    if self.docstatus == 0 and self.is_new():\n        return\n\n    if self.docstatus == 2:\n        return\n\n    if self.account_type in [\"Receivable\", \"Payable\"]:\n        return\n\n    doc_before_save = self.get_doc_before_save()\n    if doc_before_save and doc_before_save.account_type in [\"Receivable\", \"Payable\"]:\n        if frappe.db.sql(\"\"\"select name from `tabGL Entry` where account = %s\"\"\", self.name):\n            frappe.msgprint(_(\"Note: Account Type has been changed from Receivable/Payable to {0}. Please check the Accounts report to ensure that there are no existing outstanding balances against this account.\").format(self.account_type))\n            self.add_comment(\"Account Type\", _(\"Account Type has been changed from Receivable/Payable to {0}. Please check the Accounts report to ensure that there are no existing outstanding balances against this account.\").format(self.account_type))\n\n", "CodeBleu_score": 33.11688126351528}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n\n    if self.docstatus == 0:\n        if self.is_new() == 1:\n            return\n        else:\n            doc_before_save = self.get_doc_before_save()\n            if doc_before_save.account_type == \"Receivable\":\n                if self.account_type != \"Receivable\":\n                    frappe.msgprint(_(\"Account Type has been changed from Receivable to {0}. Please check Accounts report for any unreconciled Receivable entries.\").format(self.account_type))\n                    self.add_comment(\"Account Type\", _(\"Account Type has been changed from Receivable to {0}. Please check Accounts report for any unreconciled Receivable entries.\").format(self.account_type))\n            elif doc_before_save.account_type == \"Payable\":\n                if self.account_type != \"Payable\":\n                    frappe.msgprint(_(\"Account Type has been changed from Payable to {0}. Please check Accounts report for any unreconciled Payable entries.\").format(self.account_type))\n                    self.add_comment(\"Account Type\", _(\"Account Type has been changed from Payable to {0}. Please check Accounts report for any unreconciled Payable entries.\").format(self.account_type))\n", "CodeBleu_score": 27.4981046661331}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n\n    # get the account type before the save operation\n    old_account_type = frappe.db.get_value(\"Account\", self.name, \"account_type\")\n\n    # get the account type after the save operation\n    new_account_type = self.account_type\n\n    # if the account type is changed from \"Receivable\" or \"Payable\" to a non-receivable/payable type\n    if (old_account_type in [\"Receivable\", \"Payable\"] and new_account_type not in [\"Receivable\", \"Payable\"]) or (old_account_type not in [\"Receivable\", \"Payable\"] and new_account_type in [\"Receivable\", \"Payable\"]):\n        # generate a warning message indicating potential issues in the \"Accounts\" report\n        frappe.msgprint(_(\"\"\"\n            <b>Warning:</b> The account type has been changed from <b>{0}</b> to <b>{1}</b>.\n            Please note that this could result in potential issues in the <b>Accounts</b> report.\n            \"\"\".format(old_account_type, new_account_type)))\n\n        # add a comment to the account record\n        self.add_comment(\"Account Type\", _(\"The account type has been changed from {0} to {1}. Please note that this could result in potential issues in the Accounts report.\".format(old_account_type, new_account_type)))\n", "CodeBleu_score": 24.304477178664037}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t\n    if not self.currency:\n        self.currency = frappe.get_cached_value('Company',  self.company,  \"default_currency\")\n        self.db_set('currency', self.currency)\n        self.db_set('account_currency_explicitly_set', 0)\n    else:\n        self.db_set('account_currency_explicitly_set', 1)\n\n    if self.account_currency_explicitly_set:\n        if self.account_type in ('Receivable', 'Payable'):\n            frappe.throw(_(\"Account Currency cannot be set for Account Type {0}\").format(self.account_type))\n\n        if self.account_type == 'Cash' and self.account_currency != self.company_currency:\n            frappe.throw(_(\"Account Currency must be same as Company Currency for Cash Account\"))\n\n        if self.account_type in ('Bank', 'Cash') and not self.account_currency:\n            self.account_currency = frappe.get_cached_value('Company',  self.company,  \"default_currency\")\n            self.db_set('account_currency', self.account_currency)\n\n        if self.account_type == 'Bank':\n            self.account_type = 'Bank'\n            self.freeze_account = 'No'\n            self.is_group = 'No'\n            self.root_type = 'Asset'\n            self.report_type = 'Balance Sheet'\n            self.include_in_gross = 0\n            self.account_type = 'Bank'\n            self.freeze_account = 'No'\n            self.is_group = 'No'\n            self.root_type = 'Asset'\n            self.report_type = 'Balance Sheet'\n            self.include_in_gross = 0\n            self.db_set('account_type', self.account_type)\n            self.db_set('freeze_account', self.freeze_account)\n            self.db_set('is_group', self.is_group)\n            self.db_set('root_type", "CodeBleu_score": 32.7614335206349}, {"code": "def validate_account_currency(self)\n\t\n\n    # get the account's currency\n    if not self.account_currency:\n        self.account_currency = self.company_currency\n        self.account_currency_explicitly_set = False\n    else:\n        self.account_currency_explicitly_set = True\n\n    # check if the account has existing ledger entries with a different currency\n    if self.account_currency != self.company_currency and frappe.db.has_value(\"GL Entry\", {\n            \"account\": self.name, \"company\": self.company, \"currency\": (\"!=\", self.account_currency)}):\n        frappe.throw(\n            frappe._(\"Cannot change account currency as existing ledger entries are in {0} currency\").format(self.account_currency))\n\n", "CodeBleu_score": 36.42871888708706}, {"code": "def validate_account_currency(self)\n\t\n    if not self.account_currency:\n        self.account_currency = frappe.get_cached_value('Company',  self.company,  \"default_currency\")\n        self.set_property(\"account_currency_explicitly_set\", 0)\n    else:\n        self.set_property(\"account_currency_explicitly_set\", 1)\n\n    if not self.is_new():\n        old_account_currency = frappe.db.get_value(\"Account\", self.name, \"account_currency\")\n        if old_account_currency != self.account_currency:\n            frappe.throw(_(\"Account Currency cannot be changed because there are existing transactions in this account.\"))\n\n\n", "CodeBleu_score": 44.06879386989987}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n\n    # Initialize a dictionary to merge entries\n    merged_entries = {}\n\n    # Iterate through each entry\n    for entry in entries:\n\n        # Generate a unique key\n        key = generate_key(entry, accounting_dimensions)\n\n        # Set default values for the key\n        merged_entries.setdefault(key, {\n            'debit': 0,\n            'credit': 0,\n            'debit_account_currency': 0,\n            'credit_account_currency': 0\n        })\n\n        # Update the debit and credit values for the key\n        merged_entries[key]['debit'] += entry.debit\n        merged_entries[key]['credit'] += entry.credit\n        merged_entries[key]['debit_account_currency'] += entry.debit_account_currency\n        merged_entries[key]['credit_account_currency'] += entry.credit_account_currency\n\n    return merged_entries\n\n", "CodeBleu_score": 42.26918130845306}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key = generate_key(entry, accounting_dimensions)\n        merged_entries.setdefault(key, {})\n        merged_entries[key].update(entry.get(\"debit\", 0), entry.get(\"credit\", 0))\n        merged_entries[key].update(\n            entry.get(\"debit_account_currency\", 0),\n            entry.get(\"credit_account_currency\", 0),\n        )\n    return merged_entries\n\n", "CodeBleu_score": 29.882424531627578}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        # Generate a unique key for each entry\n        key = generate_key(entry, accounting_dimensions)\n        # Initialize the dictionary with the first entry\n        if key not in merged_entries:\n            merged_entries[key] = entry\n            continue\n        # Add to the debit and credit amounts for each entry\n        merged_entries[key].debit += entry.debit\n        merged_entries[key].credit += entry.credit\n        merged_entries[key].debit_amount += entry.debit_amount\n        merged_entries[key].credit_amount += entry.credit_amount\n    return merged_entries\n\n", "CodeBleu_score": 26.708971777182445}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t\n\n    if self.doctype in (\"Purchase Invoice\", \"Purchase Order\", \"Purchase Receipt\"):\n        supplier_status = frappe.db.get_value(\n            \"Supplier\", self.supplier, \"on_hold\", cache=True\n        )\n        hold_type = frappe.db.get_value(\n            \"Supplier\", self.supplier, \"hold_type\", cache=True\n        )\n        release_date = frappe.db.get_value(\n            \"Supplier\", self.supplier, \"release_date\", cache=True\n        )\n        if supplier_status == 1 and hold_type == \"Invoices\":\n            if getdate(self.posting_date) < getdate(release_date):\n                frappe.throw(\n                    _(\"Transaction cannot proceed. Supplier is on hold until {0}\").format(\n                        formatdate(release_date)\n                    )\n                )\n\n    if self.doctype in (\"Payment Entry\", \"Payment Request\"):\n        supplier_status = frappe.db.get_value(\n            \"Supplier\", self.party, \"on_hold\", cache=True\n        )\n        hold_type = frappe.db.get_value(\n            \"Supplier\", self.party, \"hold_type\", cache=True\n        )\n        release_date = frappe.db.get_value(\n            \"Supplier\", self.party, \"release_date\", cache=True\n        )\n        if supplier_status == 1 and hold_type == \"Payments\":\n            if getdate(self.posting_date) < getdate(release_date):\n                frappe.throw(\n                    _(\"Transaction cannot proceed. Supplier is on hold until {0}\").format(\n                        formatdate(release_date)\n                    )\n                )\n\n", "CodeBleu_score": 31.680700407001595}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n\n    if self.doctype in [\"Purchase Invoice\", \"Payment Entry\"]:\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.on_hold and supplier.hold_type == \"Invoices\" and supplier.release_date < getdate(nowdate()):\n            frappe.msgprint(_(\"Supplier {0} is on hold. Transaction cannot proceed.\").format(self.supplier))\n            raise frappe.ValidationError\n        elif supplier.on_hold and supplier.hold_type == \"Payments\" and supplier.release_date < getdate(nowdate()):\n            frappe.msgprint(_(\"Supplier {0} is on hold. Transaction cannot proceed.\").format(self.supplier))\n            raise frappe.ValidationError\n\n", "CodeBleu_score": 31.128272185996543}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype in [\"Purchase Invoice\", \"Purchase Order\", \"Purchase Receipt\"]:\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.on_hold:\n            if supplier.hold_type == \"All\" or supplier.hold_type == \"Invoices\":\n                if getdate(nowdate()) <= supplier.release_date:\n                    frappe.throw(\n                        _(\"Supplier {0} is on hold till {1}. Transaction cannot proceed.\").format(\n                            frappe.bold(supplier.supplier_name),\n                            frappe.bold(format(supplier.release_date, \"dd-MM-yyyy\")),\n                        )\n                    )\n\n", "CodeBleu_score": 27.811397410679167}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = [d[0] for d in frappe.db.sql(\"\"\"select distinct parent from `tabRepost Item` where voucher_type=%s and voucher_no=%s\"\"\", (self.doctype, self.name))]\n    for doctype in repost_doctypes:\n        repost_doc = frappe.get_doc(doctype, self.name)\n        references_map = {}\n        for ref in repost_doc.repost_vouchers:\n            if ref.voucher_type == self.doctype and ref.voucher_no == self.name:\n                references_map.setdefault(ref.parenttype, frappe._dict()).setdefault(ref.parent, []).append(ref)\n        for parenttype, references in references_map.items():\n            for parent, refs in references.items():\n                parent_doc = frappe.get_doc(parenttype, parent)\n                parent_doc.set(\"ignore_links\", True)\n                parent_doc.set(\"ignore_validate\", True)\n                for ref in refs:\n                    if \"repost_vouchers\" in parent_doc.as_dict():\n                        parent_doc.repost_vouchers.remove(ref.name)\n                    else:\n                        parent_doc.vouchers.remove(ref.name)\n                parent_doc.save()\n\n", "CodeBleu_score": 26.823770161909184}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doc_map = {}\n    for repost_doc in frappe.get_all(\"Repost Item\", fields=[\"name\", \"voucher_type\", \"voucher_no\", \"repost_doctype\"]):\n        if repost_doc.voucher_type == self.doctype and repost_doc.voucher_no == self.name:\n            repost_doc_map.setdefault(repost_doc.repost_doctype, {})\n            repost_doc_map[repost_doc.repost_doctype].setdefault(repost_doc.name, [])\n            repost_doc_map[repost_doc.repost_doctype][repost_doc.name].append(repost_doc)\n\n    for repost_doctype, repost_doc_list in repost_doc_map.items():\n        for parent, repost_docs in repost_doc_list.items():\n            repost_doc = frappe.get_doc(repost_doctype, parent)\n            repost_doc.flags.ignore_validate = True\n            repost_doc.flags.ignore_links = True\n            if \"repost_vouchers\" in repost_doc.as_dict():\n                repost_doc.repost_vouchers = [x for x in repost_doc.repost_vouchers if x.get(\"voucher_type\") != self.doctype or x.get(\"voucher_no\") != self.name]\n            else:\n                repost_doc.vouchers = [x for x in repost_doc.vouchers if x.get(\"voucher_type\") != self.doctype or x.get(\"voucher_no\") != self.name]\n            repost_doc.save()\n", "CodeBleu_score": 30.965725397113143}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    references_map = {}\n    for repost_doc in self.get_repost_doctypes():\n        repost_doc = frappe.get_doc(repost_doc)\n        if repost_doc.voucher_type == self.doctype and repost_doc.voucher_no == self.name:\n            references_map.setdefault(repost_doc.parenttype, frappe._dict())\n            references_map[repost_doc.parenttype].setdefault(repost_doc.parent, []).append(repost_doc)\n    for parenttype, repost_docs in references_map.items():\n        for parent, repost_docs in repost_docs.items():\n            parent_doc = frappe.get_doc(parenttype, parent)\n            if \"repost_vouchers\" in parent_doc.meta.get_valid_columns():\n                parent_doc.set(\"repost_vouchers\", [])\n                for repost_doc in repost_docs:\n                    parent_doc.append(\"repost_vouchers\", repost_doc)\n            elif \"vouchers\" in parent_doc.meta.get_valid_columns():\n                parent_doc.set(\"vouchers\", [])\n                for repost_doc in repost_docs:\n                    parent_doc.append(\"vouchers\", repost_doc)\n            else:\n                frappe.throw(_(\"No repost field found in {0}\").format(parent_doc.doctype))\n            parent_doc.flags.ignore_validate_links = True\n            parent_doc.flags.ignore_validate = True\n            parent_doc.save()\n\n", "CodeBleu_score": 26.57242670068586}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        self.authenticate()\n        params = {\"start_date\": start_date, \"end_date\": end_date}\n        if account_id:\n            params.update({\"account_id\": account_id})\n        transactions = []\n        response = self.client.Transactions.get(**params)\n        transactions.extend(response[\"transactions\"])\n        num_fetched = len(transactions)\n        total_transactions = response[\"total_transactions\"]\n        while num_fetched < total_transactions:\n            response = self.client.Transactions.get(\n                **params,\n                offset=num_fetched\n            )\n            transactions.extend(response[\"transactions\"])\n            num_fetched = len(transactions)\n        return transactions\n    except (\n        InvalidAccessTokenError,\n        InvalidMFAError,\n        ItemError,\n        InvalidLinkTokenError\n    ) as e:\n        raise e\n    except Exception as e:\n        frappe.log_error(message=frappe.get_traceback() + \"\n", "CodeBleu_score": 47.597139314232464}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n\n    # authenticate client\n    self.authenticate()\n\n    # construct query parameters\n    query_params = {\n        'start_date': start_date,\n        'end_date': end_date\n    }\n    if account_id:\n        query_params['account_id'] = account_id\n\n    # get transactions\n    transactions = []\n    while True:\n        try:\n            response = self.client.Transactions.get(**query_params)\n            transactions.extend(response['transactions'])\n            # if there are more transactions, continue fetching\n            if len(response['transactions']) == 500:\n                query_params['offset'] = len(transactions)\n            else:\n                break\n        except Exception as e:\n            if '401' in str(e):\n                raise InvalidTokenError\n            elif '500' in str(e):\n                raise InternalServerError\n            else:\n                frappe.log_error(title='QuickBooks Error', message=e)\n                break\n\n    return transactions\n\n", "CodeBleu_score": 35.04904921846684}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        client = self.authenticate()\n        transactions = []\n        count = 100\n        offset = 0\n        while True:\n            query_params = {\n                'client_id': client.client_id,\n                'secret': client.client_secret,\n                'start_date': start_date,\n                'end_date': end_date,\n                'count': count,\n                'offset': offset\n            }\n            if account_id:\n                query_params.update({'account_id': account_id})\n            response = client.Transactions.get(**query_params)\n            if response.status_code == 200:\n                transactions.extend(response.json()['transactions'])\n                if len(response.json()['transactions']) < count:\n                    break\n                else:\n                    offset += count\n            elif response.status_code == 401:\n                raise InvalidCredentialsError\n            else:\n                frappe.log_error(response.json(), 'Plaid Error')\n                raise PlaidError\n        return transactions\n    except Exception as e:\n        frappe.log_error(frappe.get_traceback())\n        raise e\n\n", "CodeBleu_score": 29.505651024523473}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t\n    try:\n        response_json = json.loads(response)\n        access_token = PlaidConnector.get_access_token(token)\n        bank_exists = frappe.db.exists(\"Bank\", {\"plaid_access_token\": access_token})\n        if bank_exists:\n            bank = frappe.get_doc(\"Bank\", bank_exists)\n            bank.plaid_access_token = access_token\n            bank.save()\n        else:\n            bank = frappe.new_doc(\"Bank\")\n            bank.bank_name = response_json[\"institution\"][\"name\"]\n            bank.plaid_access_token = access_token\n            bank.insert()\n    except Exception as e:\n        frappe.log_error(e, \"Plaid Error\")\n\n", "CodeBleu_score": 48.134521335501674}, {"code": "def add_institution(token, response)\n\t\n    try:\n        response_json = json.loads(response)\n        access_token = plaid.get_access_token(token, response_json[\"public_token\"])\n        bank = frappe.get_doc({\"doctype\": \"Bank\", \"plaid_access_token\": access_token})\n        if bank.plaid_access_token:\n            bank.insert()\n        else:\n            bank.save()\n    except Exception as e:\n        frappe.log_error(title=\"Plaid Error\", message=e)\n\n", "CodeBleu_score": 38.05027050665167}, {"code": "def add_institution(token, response)\n\t\n    try:\n        institution = json.loads(response)\n        access_token = plaid.get_access_token(token)\n        bank = frappe.get_doc({\n            \"doctype\": \"Bank\",\n            \"bank_name\": institution['institution']['name'],\n            \"access_token\": access_token\n        })\n        if not bank.exists():\n            bank.insert()\n        else:\n            bank.access_token = access_token\n            bank.save()\n    except Exception as e:\n        frappe.log_error(e)\n\n", "CodeBleu_score": 47.54139700751709}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t\n    bank_integration_date = frappe.get_value('Bank Account', bank_account, 'bank_integration_date')\n    start_date = bank_integration_date\n    end_date = add_months(today(), 1)\n    transactions = get_transactions(bank, bank_account, start_date, end_date)\n    if transactions:\n        new_transactions = process_transactions(transactions, bank, bank_account)\n        if new_transactions:\n            newest_transaction = new_transactions[0]\n            newest_transaction_date = newest_transaction.get('date')\n            newest_transaction_date = formatdate(newest_transaction_date, 'yyyy-mm-dd')\n            frappe.set_value('Bank Account', bank_account, 'bank_integration_date', newest_transaction_date)\n            frappe.log_error(f'{len(new_transactions)} new transactions added for {bank_account}')\n        else:\n            frappe.log_error(f'No new transactions for {bank_account}')\n    else:\n        frappe.log_error(f'No transactions for {bank_account}')\n\n", "CodeBleu_score": 34.97596024718639}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    # Set the start and end dates for the transaction retrieval\n    last_integration_date = frappe.db.get_value(\"Bank Account\", bank_account, \"last_integration_date\")\n    if last_integration_date:\n        start_date = add_months(last_integration_date, 1)\n        end_date = today()\n    else:\n        start_date = frappe.db.get_value(\"Bank Account\", bank_account, \"bank_account_opening_date\")\n        end_date = today()\n\n    # Attempt to fetch the transactions\n    try:\n        transactions = get_transactions(bank, bank_account, start_date, end_date)\n    except Exception as e:\n        frappe.log_error(title=\"Bank Transaction Sync Error\", message=frappe.get_traceback())\n        return\n\n    # Process the transactions into new bank transactions\n    for transaction in transactions:\n        new_bank_transaction(transaction, bank_account)\n\n    # Update the last integration date to the date of the oldest transaction\n    if len(transactions) > 0:\n        oldest_transaction = sorted(transactions, key=lambda k: k['date'])[0]\n        frappe.db.set_value(\"Bank Account\", bank_account, \"last_integration_date\", oldest_transaction['date'])\n\n    # Log the number of new transactions added\n    frappe.logger().info(f\"{len(transactions)} new bank transactions added for bank account {bank_account}\")\n\n", "CodeBleu_score": 42.835599160667115}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    # get last integration date\n    last_integration_date = get_value(bank_account, 'last_integration_date')\n    # if there is no last integration date, use the bank account's opening date\n    if not last_integration_date:\n        last_integration_date = bank_account.opening_date\n    # get transactions from bank\n    transactions = get_transactions(bank, bank_account, last_integration_date)\n    # if there are no transactions, stop\n    if not transactions:\n        return\n    # process transactions into new bank transactions\n    new_bank_transactions = process_transactions(bank, bank_account, transactions)\n    # if there are no new bank transactions, stop\n    if not new_bank_transactions:\n        return\n    # add new bank transactions\n    add_bank_transactions(new_bank_transactions)\n    # update last integration date\n    set_value(bank_account, 'last_integration_date', min([t.posting_date for t in new_bank_transactions]))\n    # log number of new bank transactions\n    frappe.logger().info('Added {} new bank transactions.'.format(len(new_bank_transactions)))\n", "CodeBleu_score": 24.257985079308504}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t\n    self._log_debug(\"Migrating entries for entity: {}\".format(entity))\n    query_uri = \"https://quickbooks.api.intuit.com/v3/company/{}/query?query=select * from {}\".format(self._realm_id, entity)\n    self._log_debug(\"Query URI: {}\".format(query_uri))\n    response = self._get(query_uri)\n    if response.status_code == 200:\n        response_json = response.json()\n        if \"QueryResponse\" in response_json:\n            if \"maxResults\" in response_json[\"QueryResponse\"]:\n                max_results = response_json[\"QueryResponse\"][\"maxResults\"]\n                self._log_debug(\"Maximum results: {}\".format(max_results))\n                if max_results > 0:\n                    entries = []\n                    for entry in response_json[\"QueryResponse\"][\"{0}\".format(entity)]:\n                        entries.append(entry)\n                    self._log_debug(\"Number of entries: {}\".format(len(entries)))\n                    if len(entries) < max_results:\n                        self._preprocess_entries(entries, entity)\n                        self._save_entries(entries, entity)\n                    else:\n                        self._log_debug(\"Migrating in batches of 1000\")\n                        for i in range(0, max_results, 1000):\n                            batch_entries = entries[i:i + 1000]\n                            self._preprocess_entries(batch_entries, entity)\n                            self._save_entries(batch_entries, entity)\n                else:\n                    self._log_debug(\"No entries found for entity: {}\".format(entity))\n            else:\n                self._log_error(\"No maxResults attribute in response JSON: {}\".format(response.text))\n        else:\n            self._log_error(\"No QueryResponse attribute in response JSON: {}\".format(response.text))\n    else:\n        self._log_error(\"Error fetching entries for entity: {}\".format(entity))\n        self._log_error(\"Response status code: {}\".", "CodeBleu_score": 30.004850176453658}, {"code": "def _migrate_entries(self, entity)\n\t\n    try:\n        # Construct the query URI\n        query = f\"query?query=select * from {entity} where CompanyName = '{self.company_name}'\"\n        query_uri = self.base_url + query\n\n        # Get the total number of entries\n        response = self._get(query_uri)\n        total_count = response.json()[\"totalCount\"]\n\n        # Retrieve entries in batches of 1000\n        batch_size = 1000\n        for start_position in range(0, total_count, batch_size):\n            query_uri = self.base_url + query + f\"&startPosition={start_position + 1}\"\n            response = self._get(query_uri)\n            entries = response.json()[\"QueryResponse\"][f\"{entity}\"]\n            self._preprocess_entries(entity, entries)\n            self._save_entries(entity, entries)\n    except Exception as e:\n        self._log_error(f\"Error migrating {entity} entries\", response.text)\n\n", "CodeBleu_score": 41.97844915409914}, {"code": "def _migrate_entries(self, entity)\n\t\n    try:\n        query = \"select * from \" + entity\n        query_uri = self._get_query_uri(query)\n        response = self._get(query_uri)\n        if response.status_code == 200:\n            total_entries = response.json()[\"QueryResponse\"][\"totalCount\"]\n            if total_entries > 0:\n                entries = []\n                for i in range(0, total_entries, 1000):\n                    query_uri = self._get_query_uri(query, i)\n                    response = self._get(query_uri)\n                    if response.status_code == 200:\n                        entries.extend(response.json()[\"QueryResponse\"][\"{0}\".format(entity)])\n                    else:\n                        self._log_error(response.text)\n                self._preprocess_entries(entries)\n                self._save_entries(entity, entries)\n    except Exception as e:\n        self._log_error(e)\n\n", "CodeBleu_score": 39.47924742448636}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\t\n\n    invoice_type = invoice.get('InvoiceType')\n    invoice_id = invoice.get('Id')\n    invoice_line_items = invoice.get('Line')\n    linked_transactions = invoice.get('LinkedTxn')\n\n    if invoice_type == 'SalesInvoice':\n        self._save_sales_invoice(invoice_id, invoice_line_items, linked_transactions)\n    elif invoice_type == 'PurchaseOrder':\n        self._save_purchase_order(invoice_id, invoice_line_items, linked_transactions)\n    elif invoice_type == 'SalesReceipt':\n        self._save_sales_receipt(invoice_id, invoice_line_items, linked_transactions)\n    elif invoice_type == 'CreditMemo':\n        self._save_credit_memo(invoice_id, invoice_line_items, linked_transactions)\n    elif invoice_type == 'Bill':\n        self._save_bill(invoice_id, invoice_line_items, linked_transactions)\n    elif invoice_type == 'BillPayment':\n        self._save_bill_payment(invoice_id, invoice_line_items, linked_transactions)\n    elif invoice_type == 'RefundReceipt':\n        self._save_refund_receipt(invoice_id, invoice_line_items, linked_transactions)\n    elif invoice_type == 'JournalEntry':\n        self._save_journal_entry(invoice_id, invoice_line_items, linked_transactions)\n    elif invoice_type == 'TimeActivity':\n        self._save_time_activity(invoice_id, invoice_line_items, linked_transactions)\n    elif invoice_type == 'Transfer':\n        self._save_transfer(invoice_id, invoice_line_items, linked_transactions)\n    elif invoice_type == 'PurchaseOrder':\n        self._save_purchase_order(invoice_id, invoice_line_items", "CodeBleu_score": 25.983572418758094}, {"code": "def _save_invoice(self, invoice)\n\t\n    if not invoice.id:\n        invoice.id = self.get_next_id('Invoice')\n    if invoice.type == 'StatementCharge':\n        self._save_invoice_as_journal_entry(invoice)\n    else:\n        self._save_sales_invoice(invoice)\n", "CodeBleu_score": 26.875994360109505}, {"code": "def _save_invoice(self, invoice)\n\t\n    self._save_sales_invoice(invoice)\n    self._save_invoice_as_journal_entry(invoice)\n\n", "CodeBleu_score": 6.676122790000856}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\n    # Calculate the interval between visits\n    interval = (end_date - start_date).days // (no_of_visit - 1)\n\n    # Generate a list of dates, with an interval of 'interval' days between them\n    schedule_list = [start_date + datetime.timedelta(days=x * interval) for x in range(0, no_of_visit)]\n\n    # Check if any of the dates in the schedule are holidays\n    for i, date in enumerate(schedule_list):\n        if self.validate_schedule_date_for_holiday_list(date, sales_person):\n            # If the date is a holiday, add 'interval' days to it, until it's not a holiday\n            while self.validate_schedule_date_for_holiday_list(date, sales_person):\n                date = add_days(date, interval)\n            # Replace the holiday date with the new date\n            schedule_list[i] = date\n\n    return schedule_list\n\n", "CodeBleu_score": 22.276403507189684}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\n    # Calculate the interval between visits\n    delta = (end_date - start_date).days\n    if delta <= 0:\n        frappe.throw(_(\"End date cannot be before start date\"))\n    if no_of_visit == 1:\n        schedule_list = [start_date]\n    else:\n        interval = delta // (no_of_visit - 1)\n        schedule_list = [start_date + datetime.timedelta(days=i*interval) for i in range(0, no_of_visit)]\n\n    # Adjust dates to avoid holidays\n    for i, visit_date in enumerate(schedule_list):\n        if self.validate_schedule_date_for_holiday_list(visit_date, sales_person):\n            schedule_list[i] = add_days(visit_date, 1)\n\n    return schedule_list\n\n", "CodeBleu_score": 31.9415199491963}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    # Get the interval between visits\n    interval = (end_date - start_date).days / no_of_visit\n    # Create a list of dates to be scheduled\n    schedule_list = [start_date + datetime.timedelta(days=x) for x in range(0, no_of_visit)]\n    # Adjust the schedule to avoid holidays\n    for i, date in enumerate(schedule_list):\n        while self.validate_schedule_date_for_holiday_list(date, sales_person):\n            date = date + datetime.timedelta(days=interval)\n            schedule_list[i] = date\n    return schedule_list\n", "CodeBleu_score": 19.96532262067759}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\t        $url = request()->get('url');\n        $handle = request()->get('handle');\n\n        $data['url'] = $url;\n        $data['handle'] = $handle;\n        $data['selected'] = $this->getSelectedInput(request());\n        $data['html'] = view($view, $data)->render();\n\n        return response()->json([\n            'success' => true,\n            'message' => $this->findTranslation('bulkaction.modal.success'),\n            'data' => [\n                'title' => $this->findTranslation('bulkaction.modal.title'),\n                'path' => route('admin.bulkaction.modal', [\n                    'url' => $url,\n                    'handle' => $handle,\n                ]),\n                'handle' => $handle,\n                'html' => view('components.index.bulkaction.modal', $data)->render(),\n            ],\n        ]);\n    }", "CodeBleu_score": 50.58920830834053}, {"code": "<?\n   public function response($view, $data = []){\n\t        $url = $this->getUrl();\n        $handle = $this->getHandle();\n        $selected = $this->getSelectedInput();\n\n        return response()->json([\n            'success' => true,\n            'message' => $this->findTranslation($this->message),\n            'data' => [\n                'title' => $this->title,\n                'path' => $this->path,\n                'handle' => $handle,\n                'html' => view('components.index.bulkaction.modal', [\n                    'url' => $url,\n                    'handle' => $handle,\n                    'selected' => $selected,\n                    'html' => view($view, $data)->render(),\n                ])->render(),\n            ],\n        ]);\n    }", "CodeBleu_score": 50.586937554100984}, {"code": "<?\n   public function response($view, $data = []){\n\t\n        $url = $this->getUrl();\n        $handle = $this->getHandle();\n\n        return response()->json([\n            'success' => true,\n            'message' => $this->findTranslation('success'),\n            'data' => [\n                'title' => $this->findTranslation('title'),\n                'path' => $url,\n                'handle' => $handle,\n                'html' => view('components.index.bulkaction.modal', [\n                    'url' => $url,\n                    'handle' => $handle,\n                    'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n                    'html' => view($view, $data)->render(),\n                ])->render(),\n            ],\n        ]);\n    }", "CodeBleu_score": 54.80009672712344}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t    $contacts = $request->getSelectedRecords();\n    foreach ($contacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n        } catch (Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 65.81426346888091}, {"code": "<?\npublic function deleteContacts($request){\n\t    $contacts = $request->getSelectedRecords();\n    $count = 0;\n    foreach ($contacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n            $count++;\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n    flash($count . ' contacts deleted.')->success();\n    return redirect()->back();\n}", "CodeBleu_score": 63.86445975617412}, {"code": "<?\npublic function deleteContacts($request){\n\t    $contacts = $request->getSelectedRecords();\n    foreach ($contacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 72.93371194291906}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getSelectedRecords($request);\n    foreach ($transactions as $transaction) {\n        try {\n            $this->dispatch(new DeleteTransaction($transaction));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n    flash('Transactions have been deleted.')->success();\n}", "CodeBleu_score": 74.82764709272342}, {"code": "<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getSelectedTransactions($request);\n    $transactions->each(function ($transaction) {\n        try {\n            $this->dispatch(new DeleteTransaction($transaction));\n        } catch (Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    });\n    flash(trans('transaction.deleted_multiple', ['count' => $transactions->count()]))->success();\n}", "CodeBleu_score": 59.24610976483874}, {"code": "<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getSelectedRecords($request);\n\n    foreach ($transactions as $transaction) {\n        try {\n            $this->dispatch(new DeleteTransaction($transaction));\n        } catch (Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n\n    flash(count($transactions) . ' transactions deleted.')->success();\n}", "CodeBleu_score": 66.49701920640823}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\t    $request = $this->container->make(Request::class);\n    $formRequest = $this->container->make($request->getControllerClass().'\\\\'.$request->getControllerMethod());\n    if (!$formRequest instanceof FormRequest) {\n        return;\n    }\n    $data = $request->all();\n    foreach ($data as $key => $value) {\n        $validator->setData(array_merge($data, [$key => $value]));\n        $validator->getData();\n        $validator->addFailure('', '');\n        $formRequest->setContainer($this->container)->setRedirector($this->redirector)->setRequest($request);\n        $formRequest->setValidator($validator);\n        $formRequest->setValidationFactory($this->validationFactory);\n        $formRequest->setRedirector($this->redirector);\n        $formRequest->setContainer($this->container);\n        $formRequest->setRedirector($this->redirector);\n        $formRequest->setContainer($this->container);\n        $formRequest->setRedirector($this->redirector);\n        $formRequest->setContainer($this->container);\n        $formRequest->setRedirector($this->redirector);\n        $formRequest->setContainer($this->container);\n        $formRequest->setRedirector($this->redirector);\n        $formRequest->setContainer($this->container);\n        $formRequest->setRedirector($this->redirector);\n        $formRequest->setContainer($this->container);\n        $formRequest->setRedirector($this->redirector);\n        $formRequest->setContainer($this->container);\n        $formRequest->setRedirector($this->redirector);\n        $formRequest->setContainer($this->container);\n        $formRequest->setRedirector($this->redirector);\n        $formRequest->setContainer($this->container);\n        $formRequest->setRedirector($this->redirector);\n        $formRequest->setContainer($this->container);\n        $formRequest->setRedirector($this->redirector);\n        $formRequest->setContainer($this->container);\n        $formRequest->setRedirector($this->redirector);\n        $formRequest->", "CodeBleu_score": 35.06454958739978}, {"code": "<?\npublic function withValidator($validator){\n\t    $validator->after(function ($validator) {\n        $request = $this->container->make('request');\n        $data = $request->all();\n\n        foreach ($data as $key => $value) {\n            $request = $this->container->make('request');\n            $rules = $this->prepareRules($request->rules(), $key);\n            $validator = Validator::make($data, $rules);\n\n            try {\n                $validator->validate();\n            } catch (ValidationException $e) {\n                $validator->addFailure($key, $e->validator->failed());\n                throw $e;\n            }\n        }\n    });\n}", "CodeBleu_score": 45.09348177974435}, {"code": "<?\npublic function withValidator($validator){\n\t    $request = $this->container->make('request');\n    $class = get_class($request);\n    if (class_exists($class) && $request instanceof FormRequest) {\n        $this->prepareRules($validator);\n        $data = $this->all();\n        $request->initialize($data);\n        $request->rules = $validator->getRules();\n        try {\n            $request->validate();\n        } catch (ValidationException $e) {\n            $validator->addFailure($e->validator->failed());\n            throw $e;\n        }\n    }\n}", "CodeBleu_score": 38.994843104824014}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\n\tif (isset($arguments[0]) && $arguments[0] instanceof Model) {\n\t\t$this->setModel($arguments[0]);\n\t}\n\n\tif (isset($arguments[1]) && $arguments[1] instanceof Request) {\n\t\t$this->setRequest($arguments[1]);\n\t}\n\n\tif ($this instanceof ShouldUpdate) {\n\t\t$this->update();\n\t}\n\n}", "CodeBleu_score": 29.851504730656064}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    if ($this instanceof ShouldUpdate) {\n        $this->setModel($arguments[0] ?? null);\n        $this->setRequest($arguments[1] ?? null);\n    }\n}", "CodeBleu_score": 20.49078982350655}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\tif ($this instanceof ShouldUpdate) {\n\t\tif (isset($arguments[0]) && $arguments[0] instanceof Model) {\n\t\t\t$this->setModel($arguments[0]);\n\t\t}\n\t\tif (isset($arguments[1]) && $arguments[1] instanceof Request) {\n\t\t\t$this->setRequest($arguments[1]);\n\t\t}\n\t}\n}", "CodeBleu_score": 29.340957579703907}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t   $request = request();\n   $query->usingSearchString($request->search)->sortable($sort);\n   if ($request->expectsJson() && !$request->isNotApi()) {\n     return $query->get();\n   } else {\n     return $query->paginate(setting('pagination', 15));\n   }\n }", "CodeBleu_score": 38.35156667073079}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t     $request = request();\n     $query = $this->usingSearchString($query, $request->input('search', ''));\n     $query = $this->sortable($query, $sort);\n     if ($request->expectsJson() && !$request->isNotApi()) {\n         return $query->get();\n     } else {\n         return $query->paginate(setting('items_per_page', 100));\n     }\n }", "CodeBleu_score": 48.04890837826029}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t \treturn $query->usingSearchString()->sortable($sort)->paginate(request()->isNotApi() ? $this->getPerPage() : null);\n }", "CodeBleu_score": 18.106375888868765}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t    $openAmount = $model->getAmountConvertedToDefault();\n    $overdueAmount = 0;\n\n    if ($model->getStatus() == 'paid') {\n        $openAmount = 0;\n        $overdueAmount = 0;\n    } else if ($model->getStatus() == 'partial') {\n        $payments = $model->getPayments();\n        foreach ($payments as $payment) {\n            $openAmount -= $payment->getAmountConvertedToDefault();\n        }\n    }\n\n    $dueDate = $model->getDueDate();\n    if ($dueDate && $dueDate->lt(Date::today())) {\n        $overdueAmount = $openAmount;\n        $openAmount = 0;\n    }\n\n    return array(\n        'open' => $openAmount,\n        'overdue' => $overdueAmount\n    );\n}", "CodeBleu_score": 38.82139236618619}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t    $openAmount = 0;\n    $overdueAmount = 0;\n\n    if ($model->getStatus() == 'paid') {\n        return [$openAmount, $overdueAmount];\n    }\n\n    if ($model->getStatus() == 'partial') {\n        $openAmount = $model->getAmountConvertedToDefault() - $model->getAmountPaidConvertedToDefault();\n    }\n\n    if ($model->getDueDate() < Date::today()->toDateString() && $openAmount > 0) {\n        $overdueAmount = $openAmount;\n    }\n\n    return [$openAmount, $overdueAmount];\n}", "CodeBleu_score": 39.23312894344182}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t    $openAmount = 0;\n    $overdueAmount = 0;\n\n    if ($model->status == 'paid') {\n        return [\n            'open' => $openAmount,\n            'overdue' => $overdueAmount,\n        ];\n    }\n\n    // Calculate the open amount\n    if ($model->status == 'partial') {\n        foreach ($model->transactions as $transaction) {\n            $openAmount += $transaction->getAmountConvertedToDefault();\n        }\n    } else {\n        $openAmount = $model->getAmountConvertedToDefault();\n    }\n\n    // Check if the document is overdue\n    if (Date::parse($model->due_at)->lt(Date::today())) {\n        $overdueAmount = $openAmount;\n        $openAmount = 0;\n    }\n\n    return [\n        'open' => $openAmount,\n        'overdue' => $overdueAmount,\n    ];\n}", "CodeBleu_score": 49.402606405478046}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $results = ($total = $this->toBase()->getCountForPagination())\n                ? $this->forPage($page, $perPage)->get($columns)\n                : $this->model->newCollection();\n\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 93.7000731758143}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n    $results = ($total = $this->toBase()->getCountForPagination()) ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 93.52861348823762}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n    $results = ($total = $this->toBase()->getCountForPagination()) ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 93.52861348823762}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t    // Get the reconciliations from the request\n    $reconciliations = $this->getSelectedRecords($request);\n\n    // Loop through each reconciliation and reconcile it\n    foreach ($reconciliations as $reconciliation) {\n        // Wrap in a database transaction\n        \\DB::transaction(function() use ($reconciliation) {\n            // Mark the reconciliation as reconciled\n            $reconciliation->reconciled = 1;\n\n            // Save the reconciliation\n            $reconciliation->save();\n\n            // Mark all related transactions as reconciled\n            Transaction::where('account_id', $reconciliation->account_id)\n                    ->isNotReconciled()\n                    ->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])\n                    ->update(['reconciled' => 1]);\n        });\n    }\n}", "CodeBleu_score": 74.93329039337485}, {"code": "<?\npublic function reconcile($request){\n\t    $reconciliations = $this->getSelectedRecords($request);\n\n    \\DB::transaction(function () use ($reconciliations) {\n        foreach ($reconciliations as $reconciliation) {\n            $reconciliation->status = 'reconciled';\n            $reconciliation->save();\n\n            Transaction::where('account_id', $reconciliation->account_id)\n                        ->isNotReconciled()\n                        ->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])\n                        ->update(['reconciled' => 1]);\n        }\n    });\n}", "CodeBleu_score": 67.65637121582124}, {"code": "<?\npublic function reconcile($request){\n\t    $this->getSelectedRecords($request)->each(function ($item) {\n        $this->reconcileRecord($item);\n    });\n}", "CodeBleu_score": 12.667151575822677}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t    $invitations = UserInvitation::where('user_id', $this->user->id)->get();\n    foreach ($invitations as $invitation) {\n        $invitation->delete();\n    }\n\n    $invitation = UserInvitation::create([\n        'user_id' => $this->user->id,\n        'token' => Str::uuid()->toString()\n    ]);\n\n    try {\n        $this->dispatch(new SendUserInvitationNotification($invitation));\n    } catch (\\Exception $e) {\n        throw new \\Exception('Failed to send user invitation notification.');\n    }\n\n    return $invitation;\n}", "CodeBleu_score": 49.34115365628545}, {"code": "<?\npublic function handle(): UserInvitation{\n\t    $this->user->invitations()->where('user_id', $this->user->id)->delete();\n\n    $invitation = UserInvitation::create([\n        'user_id' => $this->user->id,\n        'token' => Str::uuid(),\n    ]);\n\n    try {\n        $this->dispatch(new SendUserInvitationNotification($invitation));\n    } catch (\\Exception $e) {\n        throw new \\Exception('Unable to send invitation to user.');\n    }\n\n    return $invitation;\n}", "CodeBleu_score": 30.78208520185099}, {"code": "<?\npublic function handle(): UserInvitation{\n\t    $this->user->invitations()->delete();\n    $invitation = UserInvitation::create([\n        'user_id' => $this->user->id,\n        'token' => Str::uuid(),\n    ]);\n    try {\n        $this->dispatch(new SendUserInvitationNotification($invitation));\n    } catch (\\Exception $e) {\n        $invitation->delete();\n        throw new \\Exception('Could not send user invitation notification');\n    }\n    return $invitation;\n}", "CodeBleu_score": 31.10253852243161}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\t    if ($this->model->isReconciled()) {\n        throw new Exception(\n            \"The transaction has already been reconciled.\"\n        );\n    }\n    if ($this->model->isTransferTransaction()) {\n        throw new UnauthorizedException(\n            \"Unauthorized\"\n        );\n    }\n}", "CodeBleu_score": 32.3143021330167}, {"code": "<?\npublic function authorize(): void{\n\t    if ($this->model->isReconciled) {\n        throw new Exception('This transaction has been reconciled.');\n    }\n\n    if ($this->model->isTransferTransaction) {\n        throw new UnauthorizedException();\n    }\n}", "CodeBleu_score": 30.90331180082988}, {"code": "<?\npublic function authorize(): void{\n\t    if ($this->model->isReconciled()) {\n        throw new Exception(\n            \"This transaction has already been reconciled. It cannot be modified.\"\n        );\n    }\n\n    if ($this->model->isTransferTransaction()) {\n        throw new UnauthorizedException(\n            \"Transfer transactions cannot be modified.\"\n        );\n    }\n}", "CodeBleu_score": 29.992471925470767}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t  if (getTenantIdByToken() == 0) {\n    return true;\n  }\n  switch (tableName) {\n    case \"Tenant\":\n    case \"Tenant_User\":\n    case \"User\":\n    case \"User_Role\":\n    case \"Role\":\n    case \"Role_Permission\":\n    case \"Permission\":\n    case \"Permission_Resource\":\n    case \"Resource\":\n    case \"Resource_Operation\":\n    case \"Operation\":\n      return true;\n    default:\n      return false;\n  }\n}", "CodeBleu_score": 14.023959350669251}, {"code": "public boolean doTableFilter(String tableName){\n\t    // Check if the table is in the list of tables that are not tenant-specific.\n    if (tableName.equals(\"Tenant\") || tableName.equals(\"User\") || tableName.equals(\"UserGroup\")) {\n        return true;\n    }\n\n    // Check if the user is a tenant administrator.\n    if (getTenantIdByToken() == 0) {\n        return true;\n    }\n\n    // Check if the table is in the list of tables that are tenant-specific.\n    if (tableName.equals(\"TenantConfiguration\") || tableName.equals(\"TenantUser\") || tableName.equals(\"TenantUserGroup\")) {\n        return true;\n    }\n\n    // Deny access to all other tables.\n    return false;\n}", "CodeBleu_score": 17.78798046418709}, {"code": "public boolean doTableFilter(String tableName){\n\t    boolean result = false;\n    if (tableName.equals(\"Tenant\") || tableName.equals(\"User\")) {\n        result = true;\n    }\n    return result;\n}", "CodeBleu_score": 11.712040809575141}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 63.86783791790074}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 63.86783791790074}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    mapperScannerConfigurer.setBasePackage(basePackage);\n\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 63.085761188485755}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t\tList<Account> accounts = null;\n\tString result = null;\n\ttry {\n\t\taccounts = accountService.findBySelect();\n\t\tresult = toJSONString(accounts);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\tlogger.error(\"error in findBySelect(): \" + e.getMessage());\n\t\treturn \"{\\\"error\\\": \\\"\" + e.getMessage() + \"\\\"}\";\n\t}\n\treturn result;\n}", "CodeBleu_score": 26.225757996345695}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    String jsonString = null;\n    try {\n        List<Account> accountList = accountService.findBySelect();\n        jsonString = toJSONString(accountList);\n    } catch (Exception e) {\n        log.error(\"Error in findBySelect(): \" + e.getMessage());\n        jsonString = getFailureResponse(\"Error in findBySelect(): \" + e.getMessage());\n    }\n    return jsonString;\n}", "CodeBleu_score": 30.652315038272747}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    try {\n        List<Account> accounts = accountService.findBySelect();\n        return toJSONString(accounts);\n    } catch (Exception e) {\n        LOGGER.error(\"Failed to get a list of accounts.\", e);\n        return \"Failed to get a list of accounts.\";\n    }\n}", "CodeBleu_score": 18.964000225204032}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo response = new BaseResponseInfo();\n        try {\n            // 1. \u6784\u5efa\u67e5\u8be2\u6761\u4ef6\n            Map<String, Object> params = new HashMap<String, Object>();\n            if (!StringUtils.isEmpty(name)) {\n                params.put(\"name\", name);\n            }\n            if (!StringUtils.isEmpty(serialNo)) {\n                params.put(\"serialNo\", serialNo);\n            }\n            params.put(\"currentPage\", currentPage);\n            params.put(\"pageSize\", pageSize);\n            // 2. \u67e5\u8be2\u6570\u636e\n            List<Account> list = accountService.listWithBalance(params);\n            // 3. \u67e5\u8be2\u603b\u6570\n            int count = accountService.count(params);\n            // 4. \u6784\u5efa\u8fd4\u56de\u7ed3\u679c\n            response.setData(list);\n            response.setCount(count);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n            response.setCode(ResponseCode.ERROR);\n            response.setMessage(getMessage(e));\n        }\n        return response;\n    }", "CodeBleu_score": 44.442188565547134}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo response = new BaseResponseInfo();\n        Map<String, Object> params = new HashMap<String, Object>();\n        params.put(\"name\", name);\n        params.put(\"serialNo\", serialNo);\n        params.put(\"currentPage\", currentPage);\n        params.put(\"pageSize\", pageSize);\n        try {\n            PageHelper.startPage(currentPage, pageSize);\n            List<Account> list = accountService.findBy(params);\n            PageInfo<Account> pageInfo = new PageInfo<Account>(list);\n            response.setData(pageInfo);\n            response.setInfo(\"\");\n            response.setStatus(ResponseInfo.SUCCESS_CODE);\n        } catch (Exception e) {\n            logger.error(\"\u67e5\u8be2\u5f02\u5e38\", e);\n            response.setInfo(e.getMessage());\n            response.setStatus(ResponseInfo.ERROR_CODE);\n        }\n        return response;\n    }", "CodeBleu_score": 41.25912069330517}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo response = new BaseResponseInfo();\n        try {\n            List<Account> accountList = accountService.listWithBalance(name, serialNo, currentPage, pageSize);\n            int count = accountService.count(name, serialNo);\n            response.setData(\"accountList\", accountList);\n            response.setData(\"count\", count);\n        } catch (Exception e) {\n            log.error(e.getMessage());\n            response.setCode(ResponseCode.ERROR);\n            response.setMessage(e.getMessage());\n        }\n        return response;\n    }", "CodeBleu_score": 40.24931828681591}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<Statistics> statistics = accountService.getStatistics(name, serialNo);\n        response.setCode(200);\n        response.setData(statistics);\n    } catch (Exception e) {\n        logger.error(\"Failed to get statistics\", e);\n        response.setCode(500);\n        response.setErrorMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 42.92243663329283}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response.setData(accountService.getStatistics(name, serialNo));\n        response.setCode(200);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        response.setCode(500);\n        response.setError(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 41.691645245840704}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<Statistics> statistics = accountService.getStatistics(name, serialNo);\n        response.setData(statistics);\n        response.setCode(200);\n    } catch (Exception e) {\n        log.error(\"getStatistics failed. name: {}, serialNo: {}\", name, serialNo, e);\n        response.setCode(500);\n        response.setError(getMessage(e));\n    }\n    return response;\n}", "CodeBleu_score": 41.31037166441383}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t        BaseResponseInfo responseInfo = new BaseResponseInfo();\n        try {\n            List<Object> result = accountHeadService.getDetailByNumber(billNo);\n            if(result.size()>0){\n                responseInfo.setData(result.get(0));\n                responseInfo.setStatus(200);\n            }else{\n                responseInfo.setData(null);\n                responseInfo.setStatus(500);\n                responseInfo.setMessage(\"No bill details found\");\n            }\n        } catch (Exception e) {\n            log.error(\"Exception while fetching bill details for bill number \" + billNo, e);\n            responseInfo.setData(null);\n            responseInfo.setStatus(500);\n            responseInfo.setMessage(\"Error while fetching bill details for bill number \" + billNo);\n        }\n        return responseInfo;\n    }", "CodeBleu_score": 34.66648035863039}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t\n        BaseResponseInfo response = new BaseResponseInfo();\n        try {\n            List<BillDetail> billDetails = billDetailService.findByBillNo(billNo);\n            if (billDetails != null && billDetails.size() > 0) {\n                response.setData(billDetails.get(0));\n                response.setStatus(200);\n            } else {\n                response.setData(null);\n                response.setStatus(404);\n            }\n        } catch (Exception e) {\n            log.error(e.getMessage());\n            response.setData(null);\n            response.setStatus(500);\n            response.setMessage(e.getMessage());\n        }\n        return response;\n    }", "CodeBleu_score": 35.556933179915454}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t\n        BaseResponseInfo responseInfo = new BaseResponseInfo();\n        try {\n            BillInfo billInfo = billInfoService.getBillInfoByBillNo(billNo);\n            if (billInfo == null) {\n                responseInfo.setStatusCode(200);\n                responseInfo.setStatusMessage(\"Bill not found\");\n                return responseInfo;\n            }\n            responseInfo.setStatusCode(200);\n            responseInfo.setData(billInfo);\n        } catch (Exception e) {\n            responseInfo.setStatusCode(500);\n            responseInfo.setStatusMessage(e.getMessage());\n            LOGGER.error(e.getMessage());\n        }\n        return responseInfo;\n    }", "CodeBleu_score": 33.32662621837419}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response.setCode(200);\n        response.setData(depotService.findDepotByCurrentUser(request));\n    } catch (Exception e) {\n        response.setCode(500);\n        response.setMessage(e.getMessage());\n        logger.error(e.getMessage(), e);\n    }\n    return response;\n}", "CodeBleu_score": 43.41467394518232}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        UserInfo userInfo = (UserInfo) request.getSession().getAttribute(\"userInfo\");\n        List<DepotInfo> depotInfoList = depotService.findDepotByCurrentUser(userInfo.getUserId());\n        response.setData(depotInfoList);\n        response.setCode(200);\n    } catch (Exception e) {\n        logger.error(\"findDepotByCurrentUser error : \" + e);\n        response.setCode(500);\n        response.setData(\"error\");\n    }\n    return response;\n}", "CodeBleu_score": 39.776237009550805}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        // get the current user\n        UserInfo userInfo = (UserInfo) request.getSession().getAttribute(\"userInfo\");\n        // call the depot service to fetch the data\n        DepotInfo depotInfo = depotService.findDepotByCurrentUser(userInfo);\n        // set the response code to 200 and include the data\n        response.setCode(200);\n        response.setData(depotInfo);\n    } catch (Exception e) {\n        // log the error\n        logger.error(e);\n        // set the response code to 500 and include an error message\n        response.setCode(500);\n        response.setMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 41.396698204724366}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t\n    JSONArray functionList = new JSONArray();\n    JSONObject function = new JSONObject();\n    try {\n        List<RoleFunction> roleFunctionList = roleFunctionService.findRoleFunctionByTypeAndKeyId(type, keyId);\n        function.put(\"functionList\", roleFunctionList);\n        if (!request.isUserInRole(\"ROLE_ADMIN\")) {\n            JSONArray filteredFunctionList = new JSONArray();\n            for (int i = 0; i < functionList.length(); i++) {\n                JSONObject jsonObject = functionList.getJSONObject(i);\n                if (!jsonObject.getString(\"functionCd\").equals(\"\u7cfb\u7edf\u7ba1\u7406\")) {\n                    filteredFunctionList.put(jsonObject);\n                }\n            }\n            function.put(\"functionList\", filteredFunctionList);\n        }\n        functionList.put(function);\n        return functionList;\n    } catch (Exception e) {\n        e.printStackTrace();\n        throw e;\n    }\n}", "CodeBleu_score": 36.76782885389172}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    JSONArray functionList = new JSONArray();\n    List<RoleFunction> roleFunctions = null;\n    try {\n        roleFunctions = roleFunctionService.findRoleFunction(type, keyId);\n        if (roleFunctions != null && roleFunctions.size() > 0) {\n            for (RoleFunction roleFunction : roleFunctions) {\n                JSONObject function = new JSONObject();\n                function.put(\"id\", roleFunction.getId());\n                function.put(\"code\", roleFunction.getCode());\n                function.put(\"name\", roleFunction.getName());\n                function.put(\"type\", roleFunction.getType());\n                function.put(\"action\", roleFunction.getAction());\n                function.put(\"createTime\", roleFunction.getCreateTime());\n                function.put(\"createUser\", roleFunction.getCreateUser());\n                function.put(\"updateTime\", roleFunction.getUpdateTime());\n                function.put(\"updateUser\", roleFunction.getUpdateUser());\n                function.put(\"remark\", roleFunction.getRemark());\n                function.put(\"delFlag\", roleFunction.getDelFlag());\n                function.put(\"tenantId\", roleFunction.getTenantId());\n                function.put(\"typeName\", roleFunction.getTypeName());\n                function.put(\"parentId\", roleFunction.getParentId());\n                function.put(\"parentIds\", roleFunction.getParentIds());\n                function.put(\"parentName\", roleFunction.getParentName());\n                function.put(\"level\", roleFunction.getLevel());\n                function.put(\"orderNo\", roleFunction.getOrderNo());\n                function.put(\"systemFlag\", roleFunction.getSystemFlag());\n                function.put(\"icon\", roleFunction.getIcon());\n                function.put(\"url\", roleFunction.getUrl());\n                function.put(\"perms\", roleFunction.getPerms());\n                function.put(\"permsType\", roleFunction.getPermsType());\n                function.put(\"menuType\", roleFunction.getMenuType());\n                function.put(\"visible\", roleFunction.getVisible());\n                function.put(\"status\", roleFunction.getStatus());\n                function.put(\"systemCode\", roleFunction.getSystemCode());\n                function.put(\"system", "CodeBleu_score": 27.259692011010863}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t\n    JSONArray functionList = new JSONArray();\n    JSONObject function = new JSONObject();\n    List<RoleFunction> roleFunctions = null;\n\n    try {\n        if (type.equals(\"MENU\")) {\n            roleFunctions = roleFunctionService.getRoleFunctionListByType(type, keyId);\n        } else {\n            roleFunctions = roleFunctionService.getRoleFunctionListByType(type);\n        }\n        for (RoleFunction roleFunction : roleFunctions) {\n            if (roleFunction.getFunctionCd().equals(\"\u7cfb\u7edf\u7ba1\u7406\") && !request.isUserInRole(\"ROLE_ADMIN\")) {\n                continue;\n            }\n            function.put(\"functionCd\", roleFunction.getFunctionCd());\n            function.put(\"functionName\", roleFunction.getFunctionName());\n            function.put(\"functionType\", roleFunction.getFunctionType());\n            function.put(\"functionOrder\", roleFunction.getFunctionOrder());\n            function.put(\"functionUrl\", roleFunction.getFunctionUrl());\n            function.put(\"functionIcon\", roleFunction.getFunctionIcon());\n            function.put(\"functionLevel\", roleFunction.getFunctionLevel());\n            function.put(\"parentFunctionCd\", roleFunction.getParentFunctionCd());\n            function.put(\"parentFunctionName\", roleFunction.getParentFunctionName());\n            function.put(\"parentFunctionType\", roleFunction.getParentFunctionType());\n            function.put(\"parentFunctionUrl\", roleFunction.getParentFunctionUrl());\n            function.put(\"parentFunctionIcon\", roleFunction.getParentFunctionIcon());\n            function.put(\"parentFunctionLevel\", roleFunction.getParentFunctionLevel());\n            function.put(\"parentFunctionOrder\", roleFunction.getParentFunctionOrder());\n            functionList.add(function);\n        }\n        function.put(\"roleFunctionList\", functionList);\n        functionList.add(function);\n    } catch (Exception e) {\n        log.error(\"findRoleFunction\", e);\n    }\n    return functionList;\n}", "CodeBleu_score": 37.616657303567415}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\n    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response.setData(platformConfigService.getPlatformConfig(platformKey));\n        response.setCode(200);\n    } catch (Exception e) {\n        logger.error(\"Error while retrieving platform config info for platformKey: \" + platformKey, e);\n        response.setCode(500);\n        response.setMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 39.51299993212683}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\n    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        PlatformConfig config = platformConfigService.getPlatformConfigByKey(platformKey);\n        response.setData(config);\n        response.setCode(200);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        response.setCode(500);\n        response.setMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 49.421315691390745}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\n    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response.setData(platformConfigService.getInfoByKey(platformKey));\n        response.setCode(200);\n    } catch (Exception e) {\n        logger.error(\"Exception occurred in getInfoByKey \", e);\n        response.setCode(500);\n        response.setErrorMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 39.82475103545374}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\n    BaseResponseInfo response = new BaseResponseInfo();\n\n    try {\n\n        // Get the system configuration list.\n        List<SystemConfig> configList = getSystemConfig();\n\n        // If the list is not empty, set the response code to 200 and include the first item in the response data.\n        if (!configList.isEmpty()) {\n            response.setCode(200);\n            response.setData(configList.get(0));\n        }\n\n        // If the list is empty, set the response code to 404.\n        else {\n            response.setCode(404);\n        }\n    }\n\n    // If an exception occurs, log the error, set the response code to 500, and include an error message in the response data.\n    catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        response.setCode(500);\n        response.setError(e.getMessage());\n    }\n\n    return response;\n}", "CodeBleu_score": 36.01032685210428}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> systemConfigList = getSystemConfig();\n        if (systemConfigList != null && systemConfigList.size() > 0) {\n            response.setCode(200);\n            response.setData(systemConfigList.get(0));\n        } else {\n            response.setCode(500);\n            response.setData(\"No system configuration found.\");\n        }\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        response.setCode(500);\n        response.setData(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 35.763622828651805}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tList<SystemConfig> configList = getSystemConfig();\n\t\tif (configList.size() > 0) {\n\t\t\tresponse.setCode(200);\n\t\t\tresponse.setData(configList.get(0));\n\t\t} else {\n\t\t\tresponse.setCode(500);\n\t\t\tresponse.setData(getMessage(\"G0000000000\", \"No system configuration information found\"));\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tresponse.setCode(500);\n\t\tresponse.setData(getMessage(\"G0000000001\", e.getMessage()));\n\t}\n\treturn response;\n}", "CodeBleu_score": 33.529056550305825}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    Map<String, Object> result = new HashMap<>();\n    BaseResponseInfo resInfo = new BaseResponseInfo();\n    try {\n        String businessPath = request.getParameter(FILE_BUSINESS_PATH);\n        String filePath = request.getParameter(FILE_PATH);\n        String fileType = request.getParameter(FILE_TYPE);\n        String uploadType = request.getParameter(FILE_UPLOAD_TYPE);\n        String fileId = request.getParameter(FILE_ID);\n        String fileNewName = request.getParameter(FILE_NEW_NAME);\n        String fileOldName = request.getParameter(FILE_OLD_NAME);\n        String fileSize = request.getParameter(FILE_SIZE);\n        String fileContentType = request.getParameter(FILE_CONTENT_TYPE);\n        String fileUrl = request.getParameter(FILE_URL);\n        String isImage = request.getParameter(IS_IMAGE);\n        String isThumbnail = request.getParameter(IS_THUMBNAIL);\n        String isWatermark = request.getParameter(IS_WATERMARK);\n        String isRename = request.getParameter(IS_RENAME);\n        String isEncrypt = request.getParameter(IS_ENCRYPT);\n        String isFullPath = request.getParameter(IS_FULL_PATH);\n        String isLocal = request.getParameter(IS_LOCAL);\n        String isUpdate = request.getParameter(IS_UPDATE);\n        String isEncryptOld = request.getParameter(IS_ENCRYPT_OLD);\n        String isEncryptNew = request.getParameter(IS_ENCRYPT_NEW);\n        String isOss = request.getParameter(IS_OSS);\n        String isOssOld = request.getParameter(IS_OSS_OLD);\n        String isOssNew = request.getParameter(IS_OSS_NEW);\n        String isLocalOld = request.getParameter(IS_LOCAL_OLD);\n        String isLocalNew = request.getParameter(IS_LOCAL_NEW);\n        String isDatabase = request.getParameter(IS_DATABASE);\n        String isDatabaseOld = request.getParameter", "CodeBleu_score": 21.633877159700816}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    String businessPath = request.getParameter(\"businessPath\");\n    String fileUploadType = request.getParameter(\"fileUploadType\");\n    String fileUploadTypeName = request.getParameter(\"fileUploadTypeName\");\n    String fileUploadTypeValue = request.getParameter(\"fileUploadTypeValue\");\n    String fileUploadTypeCode = request.getParameter(\"fileUploadTypeCode\");\n    String fileUploadTypeCodeName = request.getParameter(\"fileUploadTypeCodeName\");\n    String fileUploadTypeCodeValue = request.getParameter(\"fileUploadTypeCodeValue\");\n    String fileUploadTypeCodeCode = request.getParameter(\"fileUploadTypeCodeCode\");\n    String fileUploadTypeCodeCodeName = request.getParameter(\"fileUploadTypeCodeCodeName\");\n    String fileUploadTypeCodeCodeValue = request.getParameter(\"fileUploadTypeCodeCodeValue\");\n    String fileUploadTypeCodeCodeCode = request.getParameter(\"fileUploadTypeCodeCodeCode\");\n    String fileUploadTypeCodeCodeCodeName = request.getParameter(\"fileUploadTypeCodeCodeCodeName\");\n    String fileUploadTypeCodeCodeCodeValue = request.getParameter(\"fileUploadTypeCodeCodeCodeValue\");\n    String fileUploadTypeCodeCodeCodeCode = request.getParameter(\"fileUploadTypeCodeCodeCodeCode\");\n    String fileUploadTypeCodeCodeCodeCodeName = request.getParameter(\"fileUploadTypeCodeCodeCodeCodeName\");\n    String fileUploadTypeCodeCodeCodeCodeValue = request.getParameter(\"fileUploadTypeCodeCodeCodeCodeValue\");\n    String fileUploadTypeCodeCodeCodeCodeCode = request.getParameter(\"fileUploadTypeCodeCodeCodeCodeCode\");\n    String fileUploadTypeCodeCodeCodeCodeCodeName = request.getParameter(\"fileUploadTypeCodeCodeCodeCodeCodeName\");\n    String fileUploadTypeCodeCodeCodeCodeCodeValue = request.getParameter(\"fileUploadTypeCodeCodeCodeCodeCodeValue\");\n    String fileUploadTypeCodeCodeCodeCodeCodeCode = request.getParameter(\"fileUploadTypeCodeCodeCodeCodeCodeCode\");\n    String fileUploadTypeCodeCodeCodeCodeCodeCodeName = request.getParameter(\"fileUploadTypeCodeCodeCodeCodeCodeCodeName\");\n    String fileUploadTypeCodeCodeCodeCodeCodeCodeValue = request.getParameter(\"fileUploadTypeCodeCodeCodeCodeCodeCodeValue\");\n    String fileUploadTypeCodeCode", "CodeBleu_score": 15.417660223171486}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        String filePath = request.getParameter(getFile);\n        String uploadType = request.getParameter(uploadLocal);\n        String message = request.getParameter(getMessage);\n        String file = request.getParameter(getFile);\n        if (isNotEmpty(filePath) && isNotEmpty(uploadType)) {\n            if (uploadType.equals(uploadLocal)) {\n                res = uploadAliOss(filePath, file, message);\n            }\n        } else {\n            res.code = 1;\n            res.data = \"The file path and upload type cannot be empty\";\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n        res.code = 1;\n        res.data = e.getMessage();\n    }\n    return res;\n}", "CodeBleu_score": 41.274749238999476}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t        try {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            JSONArray dataArray = jsonObject.getJSONArray(\"data\");\n            List<Map<String, Object>> dataList = new ArrayList<>();\n            for (int i = 0; i < dataArray.size(); i++) {\n                JSONObject dataObject = dataArray.getJSONObject(i);\n                Map<String, Object> dataMap = new HashMap<>();\n                for (String key : dataObject.keySet()) {\n                    dataMap.put(key, dataObject.get(key));\n                }\n                dataList.add(dataMap);\n            }\n            ExcelUtil.exportExcel(title, head, tip, dataList, response);\n        } catch (Exception e) {\n            logger.error(\"exportExcelByParam error: \", e);\n        }\n    }", "CodeBleu_score": 66.2675713220392}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t        try {\n            // Extract the title, head, tip, and data list from the JSON object.\n            String title = jsonObject.getString(\"title\");\n            JSONArray head = jsonObject.getJSONArray(\"head\");\n            JSONArray tip = jsonObject.getJSONArray(\"tip\");\n            JSONArray data = jsonObject.getJSONArray(\"data\");\n\n            // Create a workbook and a worksheet.\n            HSSFWorkbook workbook = new HSSFWorkbook();\n            HSSFSheet sheet = workbook.createSheet();\n\n            // Create a title row.\n            HSSFRow titleRow = sheet.createRow(0);\n            HSSFCell titleCell = titleRow.createCell(0);\n            titleCell.setCellValue(title);\n            titleCell.setCellStyle(getTitleStyle(workbook));\n            sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, 10));\n\n            // Create a head row.\n            HSSFRow headRow = sheet.createRow(1);\n            for (int i = 0; i < head.size(); i++) {\n                HSSFCell cell = headRow.createCell(i);\n                cell.setCellValue(head.getString(i));\n                cell.setCellStyle(getHeadStyle(workbook));\n            }\n\n            // Create a tip row.\n            HSSFRow tipRow = sheet.createRow(2);\n            for (int i = 0; i < tip.size(); i++) {\n                HSSFCell cell = tipRow.createCell(i);\n                cell.setCellValue(tip.getString(i));\n                cell.setCellStyle(getTipStyle(workbook));\n            }\n\n            // Create data rows.\n            for (int i = 0; i < data.size(); i++) {\n                JSONArray dataList = data.getJSONArray(i);\n                HSSFRow dataRow = sheet.createRow(i + 3);\n                for (int j = 0; j < dataList.size(); j++) {\n                    HSSFCell dataCell = dataRow.createCell(j);\n                    dataCell.setCellValue(data", "CodeBleu_score": 34.507795960447275}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t     String title = jsonObject.getString(\"title\");\n     JSONArray head = jsonObject.getJSONArray(\"head\");\n     JSONArray tip = jsonObject.getJSONArray(\"tip\");\n     JSONArray data = jsonObject.getJSONArray(\"data\");\n     try {\n         response.setContentType(\"application/vnd.ms-excel\");\n         response.setCharacterEncoding(\"utf-8\");\n         response.setHeader(\"Content-disposition\", \"attachment;filename=\" + new String(title.getBytes(\"gbk\"), \"iso-8859-1\") + \".xls\");\n         OutputStream outputStream = response.getOutputStream();\n         ExcelUtil.exportExcel(title, head, tip, data, outputStream);\n         outputStream.flush();\n         outputStream.close();\n     } catch (Exception e) {\n         log.error(\"exportExcelByParam error:{}\", e);\n         throw new BusinessException(e.getMessage());\n     }\n }", "CodeBleu_score": 46.39595032666992}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tAccount account = new Account();\n\taccount.initialize(obj);\n\taccount.setInitialAmount(0);\n\tif (getAccountByParam(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,", "CodeBleu_score": 11.39430390525136}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tAccount account = new Account();\n\taccount.initialize(obj);\n\tif(account.getInitialAmount() == null) {\n\t\taccount.setInitialAmount(new BigDecimal(0));\n\t}\n\tif(getAccountByParam(request).size() == 0) {\n\t\taccount.setIsDefault(true);\n\t}\n\taccount.setEnabled(true);\n\tint result = insertAccount(account);\n\tinsertLog(LogType.INSERT, account, request);\n\treturn result;\n}", "CodeBleu_score": 30.356629862668928}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t    Account account = new Account();\n    account.initialize(obj);\n    if(account.getInitialAmount() == null) {\n        account.setInitialAmount(new BigDecimal(0));\n    }\n    account.setEnabled(true);\n    account.setIsDefault(false);\n    if(getAccountByParam(new Account(), request) == null) {\n        account.setIsDefault(true);\n    }\n    try {\n        insertLog(account, request);\n        return insert(account);\n    } catch (Exception e) {\n        writeFail(account, request);\n        throw e;\n    }\n}", "CodeBleu_score": 34.63293738962739}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t  try {\n    return countsByAccount.get(new Account(name, serialNo));\n  } catch (Exception e) {\n    log.error(\"Error in listWithBalanceCount\", e);\n    return null;\n  }\n}", "CodeBleu_score": 28.08246081179302}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    try {\n        return countsByAccount.get(new Account(name, serialNo));\n    } catch (Exception e) {\n        logger.error(\"Error retrieving account count for \" + name + \":\" + serialNo, e);\n        return null;\n    }\n}", "CodeBleu_score": 29.943015495852254}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    try {\n        return countsByAccount.get(new AccountKey(name, serialNo));\n    } catch (Exception e) {\n        logger.error(\"Error occurred while getting the count for account name: \" + name + \" and serial no: \" + serialNo);\n        return null;\n    }\n}", "CodeBleu_score": 27.3967786274423}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    int result = 0;\n    try {\n        result = depotItemMapper.deleteByPrimaryKey(id);\n        if(result == 0) {\n            request.setAttribute(\"errorMessage\", \"Sorry! We are unable to delete the depot item at this time.\");\n        }\n    } catch (Exception e) {\n        logger.error(\"Error in deleteDepotItem: \", e);\n        request.setAttribute(\"errorMessage\", \"Sorry! We are unable to delete the depot item at this time.\");\n    }\n    return result;\n}", "CodeBleu_score": 53.88818810535749}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    try {\n        return depotItemMapper.deleteByPrimaryKey(id);\n    } catch (Exception e) {\n        logger.error(\"Exception: \", e);\n        throw e;\n    }\n}", "CodeBleu_score": 33.06847465551334}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    int result = 0;\n    try {\n        result = getDepotItemMapper(request).deleteByPrimaryKey(id);\n    } catch (Exception e) {\n        log.error(\"error deleting depot item\", e);\n        throw e;\n    }\n    return result;\n}", "CodeBleu_score": 55.6277787593093}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t    try {\n        // Create a new HTTP client\n        HttpClient client = HttpClientBuilder.create().build();\n\n        // Construct the request URL\n        String requestURL = getProtocol() + \"://\" + getHost() + \":\" + getPort() + \"/api/v1/projects/\" + projectName + \"/\" + nodeType + \"/\" + nodeKey;\n\n        // Create a new HTTP GET request\n        HttpGet request = new HttpGet(requestURL);\n\n        // Execute the request\n        HttpResponse response = client.execute(request);\n\n        // Process the response\n        int statusCode = response.getStatusLine().getStatusCode();\n        if (statusCode != 200) {\n            throw new RuntimeException(\"Failed to add node: HTTP error code : \" + statusCode);\n        }\n\n        // Get the JSON response\n        String result = EntityUtils.toString(response.getEntity());\n\n        // Create a JSON object from the response\n        JSONObject json = new JSONObject(result);\n\n        // Check if the response contains a key\n        if (json.has(\"key\")) {\n            return true;\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        // Close the client\n        close();\n    }\n    return false;\n}", "CodeBleu_score": 46.33154172764803}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t    try (CloseableHttpClient client = HttpClients.createDefault()) {\n        // Construct the URL to send the GET request to.\n        String url = getProtocol() + \"://\" + getHost() + \":\" + getPort() + \"/api/v1/projects/\" + projectName + \"/nodes/\" + nodeType + \"/\" + nodeKey;\n        HttpGet request = new HttpGet(url);\n        request.addHeader(\"accept\", \"application/json\");\n        request.addHeader(\"Authorization\", \"Basic \" + getEntity());\n        CloseableHttpResponse response = client.execute(request);\n        try {\n            // Check for success.\n            if (response.getStatusLine().getStatusCode() != 200) {\n                // If the status code is not 200, print the response message.\n                System.out.println(response.getStatusLine().getReasonPhrase());\n                return false;\n            }\n            // If the status code is 200, print the response message.\n            System.out.println(response.getStatusLine().getReasonPhrase());\n            // Check for a key in the response.\n            if (readValue(response, \"key\") != null) {\n                return true;\n            }\n            return false;\n        } finally {\n            response.close();\n        }\n    } catch (Exception e) {\n        // If there was an exception, print the exception and return false.\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 40.38570289891924}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t    boolean result = false;\n    try {\n        // Create an HTTP client\n        HttpClient client = HttpClientBuilder.create().build();\n        // Create the URL using the project name, node type, and node key\n        String url = \"http://\" + getHost() + \":\" + getPort() + \"/\" + projectName + \"/\" + nodeType + \"/\" + nodeKey;\n        // Create the request\n        HttpGet request = new HttpGet(url);\n        // Execute the request\n        HttpResponse response = client.execute(request);\n        // Check the status code\n        int statusCode = response.getStatusLine().getStatusCode();\n        if (statusCode == 200) {\n            // Get the response entity\n            HttpEntity entity = response.getEntity();\n            // Check if the response contains a key\n            if (entity != null) {\n                // Get the key\n                String key = readValue(entity);\n                // Check if the key is not null\n                if (key != null) {\n                    // Set the result to true\n                    result = true;\n                }\n            }\n        }\n    } catch (Exception e) {\n        // Print the stack trace\n        e.printStackTrace();\n    }\n    // Return the result\n    return result;\n}", "CodeBleu_score": 44.60779204107176}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t    CloseableHttpClient client = HttpClients.createDefault();\n    HttpGet request = new HttpGet(getProtocol() + getHost() + \":\" + getPort() + \"/edge/\" + projectName + \"/\" + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to);\n    try {\n        CloseableHttpResponse response = client.execute(request);\n        HttpEntity entity = response.getEntity();\n        String result = EntityUtils.toString(entity);\n        JSONObject json = new JSONObject(result);\n        if (json.has(\"key\")) {\n            return true;\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return false;\n}", "CodeBleu_score": 49.698790470215634}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t    CloseableHttpClient httpClient = HttpClients.createDefault();\n    String url = getProtocol() + \"://\" + getHost() + \":\" + getPort() + \"/api/atlas/v2/entity/bulk\";\n    try {\n        URIBuilder builder = new URIBuilder(url);\n        builder.setParameter(\"typeName\", edgeType);\n        builder.setParameter(\"action\", \"CREATE\");\n        builder.setParameter(\"name\", projectName);\n        builder.setParameter(\"fromEntityType\", fromType);\n        builder.setParameter(\"fromEntityName\", from);\n        builder.setParameter(\"toEntityType\", toType);\n        builder.setParameter(\"toEntityName\", to);\n        URI uri = builder.build();\n        HttpGet request = new HttpGet(uri);\n        request.setHeader(\"Accept\", \"application/json\");\n        request.setHeader(\"Content-type\", \"application/json\");\n        CloseableHttpResponse response = httpClient.execute(request);\n        try {\n            HttpEntity entity = response.getEntity();\n            String json = EntityUtils.toString(entity);\n            ObjectMapper mapper = new ObjectMapper();\n            JsonNode root = mapper.readTree(json);\n            JsonNode key = root.get(\"key\");\n            if (key != null) {\n                return true;\n            }\n            return false;\n        } finally {\n            response.close();\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n        return false;\n    } finally {\n        try {\n            httpClient.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}", "CodeBleu_score": 48.827287417284765}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t    try (CloseableHttpClient client = HttpClients.createDefault()) {\n        HttpGet request = new HttpGet(getProtocol() + getHost() + getPort() + \"/api/atlas/v2/entity/bulk\");\n        request.addHeader(\"Accept\", \"application/json\");\n        request.addHeader(\"Content-Type\", \"application/json\");\n        request.addHeader(\"Authorization\", \"Basic \" + getEncodedCredentials());\n        String payload = \"{\\\"entities\\\":[{\\\"typeName\\\":\\\"\" + edgeType + \"\\\",\\\"attributes\\\":{\\\"name\\\":\\\"\" + edgeType + \"\\\",\\\"description\\\":\\\"\" + edgeType + \"\\\",\\\"from\\\":{\\\"typeName\\\":\\\"\" + fromType + \"\\\",\\\"uniqueAttributes\\\":{\\\"qualifiedName\\\":\\\"\" + from + \"\\\"}},\\\"to\\\":{\\\"typeName\\\":\\\"\" + toType + \"\\\",\\\"uniqueAttributes\\\":{\\\"qualifiedName\\\":\\\"\" + to + \"\\\"}}}}]}\";\n        request.setEntity(new StringEntity(payload));\n        HttpResponse response = client.execute(request);\n        String json = readValue(response.getEntity());\n        return json.contains(\"\\\"key\\\"\");\n    } catch (Exception e) {\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 37.190310609944575}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\t    if (event == null || event.getMessage() == null) {\n        return;\n    }\n\n    if (event.getLocation() == null) {\n        event.setLocation(acquireTestingLocation());\n    }\n\n    event.setTime(new Date().getTime());\n\n    String eventJson = writeValueAsString(event);\n\n    String topic = \"test\";\n    if (event.getTarget() != null) {\n        topic = event.getTarget();\n    }\n\n    ProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, eventJson);\n\n    send(record);\n\n    flush();\n}", "CodeBleu_score": 45.70609711450896}, {"code": "public void sendEvent(Event event){\n\t    if (event == null || event.getMessage() == null) {\n        throw new IllegalArgumentException(\"Event or event message cannot be null.\");\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(acquireTestingLocation());\n    }\n    event.setTime(System.currentTimeMillis());\n    String json = writeValueAsString(event);\n    String topic = (event.getTarget() == null) ? \"test\" : event.getTarget();\n    ProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, json);\n    producer.send(record);\n    producer.flush();\n}", "CodeBleu_score": 43.902404485988264}, {"code": "public void sendEvent(Event event){\n\t    if (event == null) {\n        throw new IllegalArgumentException(\"Event cannot be null\");\n    }\n\n    if (event.getMessage() == null) {\n        throw new IllegalArgumentException(\"Event message cannot be null\");\n    }\n\n    if (event.getLocation() == null) {\n        event.setLocation(acquireTestingLocation());\n    }\n\n    event.setTime(System.currentTimeMillis());\n\n    String eventString = writeValueAsString(event);\n\n    String topic = event.getTarget() == null ? \"test\" : event.getTarget();\n\n    ProducerRecord<String, String> record = new ProducerRecord<>(topic, eventString);\n\n    send(record);\n    flush();\n}", "CodeBleu_score": 41.32806925865686}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t    // Initialize the OSS client.\n    OSS ossClient = new OSSClientBuilder().build(getEndpoint(), getAccessKeyId(), getAccessKeySecret());\n\n    // Upload the object and obtain the URL of the object.\n    ossClient.putObject(getOssBucket(), objName, new ByteArrayInputStream(content));\n    String url = ossClient.generatePresignedUrl(getOssBucket(), objName, new Date(new Date().getTime() + 3600L * 1000 * 24 * 365 * 10)).toString();\n\n    // Shut down the OSS client.\n    ossClient.shutdown();\n\n    // Return the URL of the object.\n    return url;\n}", "CodeBleu_score": 36.015247461415825}, {"code": "public String upload(String objName, byte[] content){\n\t    String endpoint = getEndpoint();\n    String accessKeyId = getAccessKeyId();\n    String accessKeySecret = getAccessKeySecret();\n    String bucketName = getOssBucket();\n    // Create an OSSClient instance.\n    OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);\n    // Upload the object and specify the storage class of the object.\n    PutObjectResult result = ossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n    // Shut down the OSSClient instance.\n    ossClient.shutdown();\n    return result.getRequestId();\n}", "CodeBleu_score": 42.113780049027106}, {"code": "public String upload(String objName, byte[] content){\n\t    // Initialize the OSS client.\n    OSS ossClient = new OSSClientBuilder().build(getEndpoint(), getAccessKeyId(), getAccessKeySecret());\n    try {\n        // Upload the file content as an object.\n        ossClient.putObject(getOssBucket(), objName, new ByteArrayInputStream(content));\n        // Return the URL of the uploaded object.\n        return ossClient.generatePresignedUrl(getOssBucket(), objName, getConfig().getExpiration()).toString();\n    } finally {\n        // Shut down the OSS client.\n        ossClient.shutdown();\n    }\n}", "CodeBleu_score": 34.302105696689225}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t    IpToLocationWorker worker = ensureIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\");\n    }\n    return worker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 27.103111182296768}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t    IpToLocationWorker worker = ensureIpToLocationWorker();\n    if (worker == null) {\n        return getLocationInfoByIP(ipAddress);\n    }\n    return worker.getLocationInfo(ipAddress);\n}", "CodeBleu_score": 26.14556845291508}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t    IpToLocationWorker worker = ensureIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\");\n    }\n    return worker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 27.474562372250354}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\t    if (this.esClient != null && this.esHighLevelClient != null) {\n        return;\n    }\n\n    synchronized (this) {\n        if (this.esClient != null && this.esHighLevelClient != null) {\n            return;\n        }\n\n        if (this.esClient == null) {\n            this.esClient = builder.build();\n        }\n\n        if (this.esHighLevelClient == null) {\n            this.esHighLevelClient = new RestHighLevelClient(builder);\n        }\n    }\n}", "CodeBleu_score": 38.027966760556296}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t    if (esClient == null || esHighLevelClient == null) {\n        synchronized (this) {\n            if (esClient == null || esHighLevelClient == null) {\n                parseHosts();\n                esClient = builder.build();\n                esHighLevelClient = new RestHighLevelClient(builder);\n            }\n        }\n    }\n}", "CodeBleu_score": 32.977021643817245}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t  if (esLowLevelClient == null || esHighLevelClient == null) {\n    synchronized (this) {\n      if (esLowLevelClient == null || esHighLevelClient == null) {\n        parseHosts();\n        esLowLevelClient = builder.build();\n        esHighLevelClient = new RestHighLevelClient(builder);\n      }\n    }\n  }\n}", "CodeBleu_score": 33.65770242403282}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<>();\n    for (String host : clusterHostList.split(\",\")) {\n        host = host.trim();\n        int port = clusterPort;\n        if (host.contains(\":\")) {\n            String[] parts = host.split(\":\");\n            host = parts[0];\n            port = Integer.parseInt(parts[1]);\n        }\n        hosts.add(new HttpHost(host, port));\n    }\n    return hosts;\n}", "CodeBleu_score": 41.721004696551425}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<>();\n    for (String host : clusterHostList.split(\",\")) {\n        host = host.trim();\n        if (host.startsWith(\"http://\")) {\n            host = host.substring(7);\n        }\n        if (!host.contains(\":\")) {\n            host = host + \":\" + clusterPort;\n        }\n        hosts.add(HttpHost.create(host));\n    }\n    return hosts;\n}", "CodeBleu_score": 35.52020544848008}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<>();\n    String[] hostList = clusterHostList.split(\",\");\n\n    for (String host : hostList) {\n        String[] hostAndPort = host.split(\":\");\n        String hostname = hostAndPort[0];\n        int port = hostAndPort.length > 1 ? Integer.parseInt(hostAndPort[1]) : clusterPort;\n        hosts.add(new HttpHost(hostname, port));\n    }\n\n    return hosts;\n}", "CodeBleu_score": 43.934294452276546}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\t    while (true) {\n        // Retrieve a task from the queue with a 30-second timeout.\n        Task task = this.queue.poll(30, TimeUnit.SECONDS);\n        if (task == null) {\n            // No tasks available, so the polling timed out.\n            continue;\n        }\n        // Process the task.\n        try {\n            if (task.getType() == Task.Type.PLAIN_TEXT_MESSAGE) {\n                // The task is a plain text message.\n                PlainTextMessageTask plainTextMessageTask = (PlainTextMessageTask) task;\n                String recipientNumber = plainTextMessageTask.getRecipientNumber();\n                String message = plainTextMessageTask.getMessage();\n                // Validate the message data.\n                if (recipientNumber == null || recipientNumber.trim().equals(\"\")) {\n                    throw new Exception(\"The recipient number is required.\");\n                }\n                if (message == null || message.trim().equals(\"\")) {\n                    throw new Exception(\"The message is required.\");\n                }\n                // Send the message.\n                sendPlainTextMessage(recipientNumber, message);\n            } else {\n                // Unknown task type.\n                throw new Exception(\"Unknown task type: \" + task.getType());\n            }\n        } catch (Exception e) {\n            // Log the error.\n            e.printStackTrace();\n        }\n    }\n}", "CodeBleu_score": 27.32522378992345}, {"code": "protected void pollingWork() throws InterruptedException{\n\t  while (true) {\n    // Retrieve the next task.\n    Task task = queue.poll(30, TimeUnit.SECONDS);\n    if (task == null) {\n      // No tasks available.\n      continue;\n    }\n    try {\n      // Check the task type.\n      if (task instanceof SendMessageTask) {\n        // This is a message task.\n        SendMessageTask messageTask = (SendMessageTask) task;\n        String recipient = messageTask.getRecipient();\n        String message = messageTask.getMessage();\n        // Validate the message data.\n        if (recipient.length() == 0 || message.length() == 0) {\n          // The message data is invalid.\n          logger.warning(\"Invalid message data: recipient=\" + recipient + \", message=\" + message);\n          continue;\n        }\n        // Send the message.\n        logger.info(\"Sending message: recipient=\" + recipient + \", message=\" + message);\n        sendPlainTextMessage(recipient, message);\n      } else {\n        // This is an unknown task type.\n        logger.warning(\"Unknown task type: \" + task.getClass().getName());\n      }\n    } catch (Exception e) {\n      // Log the exception.\n      logger.log(Level.SEVERE, \"Exception processing task: \" + task, e);\n    }\n  }\n}", "CodeBleu_score": 32.08661926870515}, {"code": "protected void pollingWork() throws InterruptedException{\n\t  // Retrieve the task from the queue.\n  Task task = getNextTask();\n  if (task == null) {\n    return;\n  }\n  // Check the task type.\n  if (task.getType().equals(\"plainTextMessage\")) {\n    // Extract the recipient number and message data.\n    String recipient = (String) task.getData().get(\"recipient\");\n    String message = (String) task.getData().get(\"message\");\n    // Validate the data.\n    if (isValidNumber(recipient) && isValidMessage(message)) {\n      // Send the message.\n      sendPlainTextMessage(recipient, message);\n    } else {\n      // Log the error.\n      println(\"Invalid message data for task \" + task.getId());\n    }\n  } else {\n    // Log the error.\n    println(\"Invalid task type for task \" + task.getId());\n  }\n}", "CodeBleu_score": 26.931786867685737}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t    CloseableHttpClient httpClient = getHttpClient();\n    HttpGet request = new HttpGet(uri);\n    CloseableHttpResponse response = httpClient.execute(request);\n    HttpEntity entity = response.getEntity();\n    String content = EntityUtils.toString(entity, \"UTF-8\");\n    println(content);\n    return content;\n}", "CodeBleu_score": 66.27528772024549}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t    // Create a CloseableHttpClient to execute the HTTP request\n    CloseableHttpClient httpClient = HttpClients.createDefault();\n\n    // Create a CloseableHttpResponse to execute the HTTP request\n    CloseableHttpResponse httpResponse = httpClient.execute(new HttpGet(uri));\n\n    // Retrieve the response entity\n    HttpEntity responseEntity = httpResponse.getEntity();\n\n    // Convert the response entity to a UTF-8 encoded string\n    String responseString = EntityUtils.toString(responseEntity, \"UTF-8\");\n\n    // Log the response string\n    println(responseString);\n\n    // Return the response string\n    return responseString;\n}", "CodeBleu_score": 44.46695035839808}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t    CloseableHttpClient httpClient = getHttpClient();\n    HttpGet httpGet = new HttpGet(uri);\n    CloseableHttpResponse response = httpClient.execute(httpGet);\n    return getEntity(response);\n}", "CodeBleu_score": 38.47742727851517}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument document = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(\"UTF-8\")));\n\tMap<String, Object> map = decodeNodeToMap(document.getDocumentElement(), doTrim);\n\treturn map;\n}", "CodeBleu_score": 42.347802488804206}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document document = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n    Element documentElement = document.getDocumentElement();\n    Map<String, Object> map = decodeNodeToMap(documentElement, doTrim);\n    return map;\n}", "CodeBleu_score": 43.08699538991952}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document document = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(\"UTF-8\")));\n    return decodeNodeToMap(document.getDocumentElement(), doTrim);\n}", "CodeBleu_score": 37.30848293597076}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t    final boolean isEligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n    final String trxName = getTrxName(orderRecord);\n    final int orderId = getC_Order_ID(orderRecord);\n    final IOrderBL orderBL = Services.get(IOrderBL.class);\n    final IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n    final IOrderScheduleBL orderScheduleBL = Services.get(IOrderScheduleBL.class);\n\n    if (isEligibleForAutoProcessing) {\n        scheduleIfNotPostponed(orderRecord);\n\n        withLogger(logger -> {\n            logger.addLog(\"Eligible for auto-processing; scheduling order for automatic shipping and invoicing using transaction name {}\", trxName);\n            orderBL.scheduleAfterCommit(orderRecord, trxName);\n        });\n    } else {\n        withLogger(logger -> {\n            logger.addLog(\"Not eligible for auto-processing; scheduling creation of missing shipment schedules if they are not postponed\");\n            orderScheduleBL.scheduleMissingSchedulesAfterCommit(orderId);\n        });\n    }\n}", "CodeBleu_score": 41.3826491766812}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t    if (isEligibleForAutoProcessing(orderRecord)) {\n        logAction(orderRecord, \"Auto-processing eligible\");\n        Services.get(ITrxManager.class)\n                .getTrxListenerManagerOrAutoCommit(ITrx.TRXNAME_ThreadInherited)\n                .newEventListener(TrxEventTiming.AFTER_COMMIT)\n                .registerHandlingMethod(trx -> scheduleIfNotPostponed(orderRecord));\n    } else {\n        logAction(orderRecord, \"Auto-processing not eligible\");\n        Services.get(ITrxManager.class)\n                .getTrxListenerManagerOrAutoCommit(ITrx.TRXNAME_ThreadInherited)\n                .newEventListener(TrxEventTiming.AFTER_COMMIT)\n                .registerHandlingMethod(trx -> scheduleIfNotPostponed(orderRecord));\n    }\n}", "CodeBleu_score": 20.53723914619197}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t    final boolean eligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n    final String trxName = getTrxName(orderRecord);\n\n    final I_C_Order order = orderRecord;\n    final OrderId orderId = OrderId.ofRepoId(order.getC_Order_ID());\n\n    if (eligibleForAutoProcessing) {\n        addLog(order, trxName, \"Scheduling automatic shipping and invoicing\");\n        scheduleIfNotPostponed(orderId, trxName);\n    } else {\n        addLog(order, trxName, \"Scheduling missing shipment schedules\");\n        scheduleIfNotPostponed(orderId, trxName);\n    }\n}", "CodeBleu_score": 47.23692353252955}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = User::where('email', $request->email)->first();\n\n    if (!$user || !Hash::check($request->password, $user->password)) {\n        $this->fireFailedEvent($user, $request);\n\n        throw new AuthenticationException();\n    }\n\n    return $user;\n}", "CodeBleu_score": 46.63959443659554}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = $this->getUserByCredentials($request);\n\n    if (! $user || ! $this->getProvider()->validateCredentials($user, $request->only('email', 'password'))) {\n        $this->fireFailedEvent($user, $request);\n\n        throw $this->throwFailedAuthenticationException($request);\n    }\n\n    return $user;\n}", "CodeBleu_score": 55.011805302220054}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = $this->getUser($request);\n\n    if (!$user || !$this->guard->getProvider()->validateCredentials($user, ['password' => $request->password])) {\n        $this->fireFailedEvent($user, $request);\n\n        throw $this->throwFailedAuthenticationException($request);\n    }\n\n    return $user;\n}", "CodeBleu_score": 58.384895093570385}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter->increment($request);\n\n    throw ValidationException::withMessages([\n        $this->username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 73.23214040644866}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter->increment($request);\n\n    throw ValidationException::withMessages([\n        $this->username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 73.23214040644866}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter->increment($request);\n\n    throw ValidationException::withMessages([\n        $this->username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 73.23214040644866}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t    $data = $this->toArray();\n\n    $user = $request->session()->get('login.id')\n        ? User::find($request->session()->get('login.id'))\n        : null;\n\n    if ($user) {\n        $data += [\n            'twoFactor' => optional($user)->two_factor_secret && ! is_null(optional($user)->two_factor_confirmed_at),\n            'remember' => $request->session()->get('login.remember'),\n        ];\n    }\n\n    return Inertia::render('Auth/TwoFactorChallenge', $data)->toResponse($request);\n}", "CodeBleu_score": 61.71639154554924}, {"code": "<?\npublic function toResponse($request){\n\t    $data = $this->toArray();\n\n    $request->session()->reflash();\n\n    $user = $request->user();\n\n    if (optional($user)->two_factor_secret && ! is_null(optional($user)->two_factor_confirmed_at)) {\n        $data['twoFactor'] = true;\n\n        $data['twoFactorChallenge'] = [\n            'publicKey' => Webauthn::prepareAssertion($user),\n            'remember' => $request->session()->get('login.remember'),\n        ];\n    }\n\n    return Inertia::render('Auth/TwoFactorChallenge', $data)->toResponse($request);\n}", "CodeBleu_score": 53.45547592686655}, {"code": "<?\npublic function toResponse($request){\n\t    $user = $request->session()->get('login.id') ? User::find($request->session()->get('login.id')) : null;\n\n    $data = [\n        'twoFactor' => optional($user)->two_factor_secret && ! is_null(optional($user)->two_factor_confirmed_at),\n        'remember' => $request->session()->get('login.remember'),\n    ];\n\n    if ($user) {\n        $data['publicKey'] = Webauthn::prepareAssertion($user);\n    }\n\n    return Inertia::render('Auth/TwoFactorChallenge', $data)->toResponse($request);\n}", "CodeBleu_score": 68.07278323411688}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    $userToken = UserToken::firstWhere([\n        'driver' => $driver,\n        'socialite_user_id' => $socialite->getId(),\n    ]);\n\n    if (!$userToken) {\n        $user = $this->getUserOrCreate($socialite);\n        $this->checkUserAssociation($user, $socialite);\n        $userToken = $this->createUserToken($user, $socialite);\n    }\n\n    $user = $userToken->user;\n    $user->tokens()->delete();\n    $user->createToken($request->userAgent());\n\n    return $user;\n}", "CodeBleu_score": 50.11063891804252}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    $userToken = UserToken::firstWhere([\n        'driver' => $driver,\n        'socialite_user_id' => $socialite->getId()\n    ]);\n\n    if (!$userToken) {\n        $user = $this->getUserOrCreate($request, $socialite);\n        $this->checkUserAssociation($request, $user, $socialite);\n        $userToken = $this->createUserToken($request, $socialite, $user);\n    }\n\n    $user = $userToken->user;\n    Auth::login($user);\n\n    return $user;\n}", "CodeBleu_score": 52.48730271485385}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    $userToken = UserToken::firstWhere([\n        'driver' => $driver,\n        'driver_id' => $socialite->getId(),\n    ]);\n\n    if ($userToken) {\n        $user = $this->getUserOrCreate($request, $driver, $socialite);\n        $this->checkUserAssociation($user, $userToken);\n\n        return $user;\n    }\n\n    $user = $this->createUserToken($request, $driver, $socialite);\n\n    return $user;\n}", "CodeBleu_score": 51.82863140774163}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    if (!$user = $request->user()) {\n        return false;\n    }\n\n    $credentials = $this->filterCredentials($request->input('credentials'));\n\n    if (!WebauthnFacade::validateAssertion($credentials, $request->input('publicKey'))) {\n        $this->fireFailedEvent($user, $credentials);\n\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    return true;\n}", "CodeBleu_score": 58.79400554028067}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $user = $request->user();\n\n    if (!$user) {\n        return false;\n    }\n\n    $credentials = $this->filterCredentials($request->credentials());\n\n    try {\n        WebauthnFacade::validateAssertion($user, $credentials);\n    } catch (Throwable $e) {\n        $this->fireFailedEvent($user, $credentials);\n        $this->throwFailedAuthenticationException($e);\n    }\n\n    return true;\n}", "CodeBleu_score": 58.29600615311765}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $user = $request->user();\n    if (!$user) {\n        return false;\n    }\n\n    $credentials = $this->filterCredentials($request->input('credentials'));\n\n    try {\n        WebauthnFacade::validateAssertion($credentials, $user);\n    } catch (Throwable $e) {\n        $this->fireFailedEvent($user, $e);\n        $this->throwFailedAuthenticationException($e);\n    }\n\n    return true;\n}", "CodeBleu_score": 59.23916483697633}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\t    try {\n        $email = $this->option('email');\n        if (!$email) {\n            $this->error('No email provided');\n            return null;\n        }\n\n        return User::where('email', $email)->firstOrFail();\n    } catch (Exception $e) {\n        $this->error($e->getMessage());\n        return null;\n    }\n}", "CodeBleu_score": 66.03000585390222}, {"code": "<?\nprivate function user(): ?User{\n\t    if (!isset($this->option('email'))) {\n        $this->error('No email provided.');\n        return null;\n    }\n    $email = $this->option('email');\n    try {\n        return User::where('email', $email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error('User with email ' . $email . ' not found.');\n        return null;\n    }\n}", "CodeBleu_score": 67.65691778398948}, {"code": "<?\nprivate function user(): ?User{\n\t    try {\n        $email = $this->option('email');\n        if (!$email) {\n            $this->error('No email provided');\n            return null;\n        }\n        return User::where('email', $email)->firstOrFail();\n    } catch (\\Exception $e) {\n        $this->error($e->getMessage());\n        return null;\n    }\n}", "CodeBleu_score": 65.52077031739931}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\t    if (config('scout.driver') && $this->option('flush')) {\n        foreach (config('scout.meilisearch.indexes') as $index => $settings) {\n            $this->call('scout:flush', [\n                'model' => (new $index)->getTable(),\n            ]);\n        }\n\n        $this->info('Scout indexes flushed.');\n    }\n}", "CodeBleu_score": 39.67890502515832}, {"code": "<?\nprotected function scoutFlush(): void{\n\t    if (!$this->option('flush')) {\n        return;\n    }\n\n    $indexes = config('scout.meilisearch.indexes');\n\n    if (empty($indexes)) {\n        $this->warn('No indexes defined in config/scout.php');\n\n        return;\n    }\n\n    foreach ($indexes as $index => $config) {\n        $table = (new $index)->getTable();\n        $this->call('scout:flush', ['model' => $table]);\n    }\n\n    $this->info('Flushed all indexes');\n}", "CodeBleu_score": 51.50631998650851}, {"code": "<?\nprotected function scoutFlush(): void{\n\t    if (config('scout.driver') === 'meilisearch' && $this->option('flush')) {\n        $indexes = config('scout.meilisearch.indexes');\n        foreach ($indexes as $index => $settings) {\n            $this->call('scout:flush', [\n                'model' => (new $index)->getTable(),\n            ]);\n        }\n        $this->info('Scout indexes flushed');\n    }\n}", "CodeBleu_score": 49.69443958642681}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    try {\n        $vcard = $this->getSource()->read($resource->getId());\n        if (!$vcard->getUid()) {\n            $vcard->setUid($resource->getId());\n        }\n    } catch (VCardNotFoundException $e) {\n        $vcard = new VCard();\n        $vcard->setUid($resource->getId());\n    }\n\n    foreach ($this->exporters as $exporter) {\n        $exporter->export($vcard, $resource);\n    }\n\n    return $vcard;\n}", "CodeBleu_score": 31.109830566973596}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t\n    // If the VCard already exists, read it.\n    if ($resource->vcard) {\n        return $this->read($resource->vcard);\n    }\n\n    // If the VCard doesn't exist, create it.\n    $vcard = new VCard();\n\n    // If the VCard doesn't have a UID, set one.\n    if (!$vcard->getUID()) {\n        $vcard->setUID(Uuid::uuid4()->toString());\n    }\n\n    // Apply exporters to the VCard.\n    foreach ($this->exporters as $exporter) {\n        $exporter->export($vcard, $resource);\n    }\n\n    return $vcard;\n}", "CodeBleu_score": 22.186501786238182}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    $vcard = $this->read($resource);\n    if (!$vcard->UID) {\n        $vcard->UID = $this->generateUid();\n    }\n    foreach ($this->exporters as $exporter) {\n        $exporter->export($vcard, $resource);\n    }\n    return $vcard;\n}", "CodeBleu_score": 21.535447773950718}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $object = $this->getObject($addressBookId, $cardUri);\n    if ($object) {\n        if ($object instanceof Contact) {\n            DestroyContact::dispatch([\n                'account_id' => $this->user->account_id,\n                'author_id' => $this->user->id,\n                'vault_id' => $object->vault_id,\n                'contact_id' => $object->id,\n            ])->onQueue('high');\n        } elseif ($object instanceof Group) {\n            DestroyGroup::dispatch([\n                'account_id' => $this->user->account_id,\n                'author_id' => $this->user->id,\n                'vault_id' => $object->vault_id,\n                'group_id' => $object->id,\n            ])->onQueue('high');\n        } else {\n            return false;\n        }\n    }\n    return true;\n}", "CodeBleu_score": 75.92438672916056}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $obj = $this->getObject($addressBookId, $cardUri);\n    if ($obj instanceof Contact) {\n        DestroyContact::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'contact_id' => $obj->id,\n        ])->onQueue('high');\n    } elseif ($obj instanceof Group) {\n        DestroyGroup::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'group_id' => $obj->id,\n        ])->onQueue('high');\n    } else {\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 82.7297530864468}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $obj = $this->getObject($addressBookId, $cardUri);\n    if (is_null($obj)) {\n        return false;\n    }\n    if ($obj instanceof Contact) {\n        DestroyContact::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'contact_id' => $obj->id,\n        ])->onQueue('high');\n    } elseif ($obj instanceof Group) {\n        DestroyGroup::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'group_id' => $obj->id,\n        ])->onQueue('high');\n    } else {\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 83.1384725163553}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\t    if (!request()->hasFile('file')) {\n        return;\n    }\n\n    $leadActivity = $this->activityRepository->create([\n        'lead_id' => $data['lead_id'],\n        'user_id' => auth()->guard('api')->user()->id,\n        'activity_type_id' => $data['activity_type_id'],\n        'description' => $data['description'],\n    ]);\n\n    $leadActivityFile = $leadActivity->leadActivityFiles()->create([\n        'name' => request()->file('file')->getClientOriginalName(),\n        'path' => request()->file('file')->store('lead_activity_files'),\n    ]);\n\n    return $leadActivityFile;\n}", "CodeBleu_score": 62.16014187830704}, {"code": "<?\npublic function upload(array $data){\n\t    if (!request()->hasFile('file')) {\n        return;\n    }\n\n    $leadActivity = $this->activityRepository->create([\n        'user_id' => auth()->guard()->user()->id,\n        'lead_id' => $data['lead_id'],\n        'description' => $data['description'],\n    ]);\n\n    $file = request()->file('file')->store('lead_activities');\n\n    return $this->create([\n        'lead_activity_id' => $leadActivity->id,\n        'name' => request()->file('file')->getClientOriginalName(),\n        'path' => $file,\n    ]);\n}", "CodeBleu_score": 65.14107074546864}, {"code": "<?\npublic function upload(array $data){\n\t    if (!request()->hasFile('file')) {\n        return;\n    }\n\n    $leadActivity = $this->activityRepository->create([\n        'lead_id' => auth()->guard('api')->user()->lead_id,\n        'type' => 'file',\n        'user_id' => auth()->guard()->user()->id,\n    ]);\n\n    $file = $leadActivity->files()->create([\n        'name' => request()->file('file')->getClientOriginalName(),\n        'path' => request()->file('file')->store('files'),\n    ]);\n\n    return $file;\n}", "CodeBleu_score": 61.23435876051118}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    if ($exception instanceof ModelNotFoundException) {\n        return response()->json(['message' => 'Resource not found'], 404);\n    }\n    if ($exception instanceof PDOException) {\n        return response()->json(['message' => 'Database connection error'], 500);\n    }\n    if ($exception instanceof ParseError) {\n        return response()->json(['message' => 'Parse error'], 500);\n    }\n    if ($exception instanceof HttpException) {\n        $this->response['status'] = $exception->getStatusCode();\n        $this->response['message'] = Response::$statusTexts[$this->response['status']];\n        return response()->json($this->response, $this->response['status']);\n    }\n    if (request()->routeIs('admin.*')) {\n        return parent::render($request, $exception);\n    }\n    if (request()->routeIs('front.*')) {\n        return redirect()->route('admin.session.create');\n    }\n    return parent::render($request, $exception);\n}", "CodeBleu_score": 45.88949526858121}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    if ($exception instanceof ModelNotFoundException) {\n        return response()->json(['error' => 'Resource not found'], 404);\n    } elseif ($exception instanceof PDOException) {\n        return response()->json(['error' => 'Database error'], 500);\n    } elseif ($exception instanceof ParseError) {\n        return response()->json(['error' => 'Parse error'], 500);\n    } elseif ($exception instanceof HttpException) {\n        return response()->json(['error' => $exception->getMessage()], $exception->getStatusCode());\n    } elseif ($exception instanceof ValidationException) {\n        return response()->json(['error' => $exception->validator->errors()->getMessages()], 422);\n    } elseif ($exception instanceof AuthenticationException) {\n        return response()->json(['error' => 'Unauthenticated'], 401);\n    } elseif ($exception instanceof AuthorizationException) {\n        return response()->json(['error' => 'Unauthorized'], 403);\n    } elseif ($exception instanceof NotFoundHttpException) {\n        return response()->json(['error' => 'Not found'], 404);\n    } elseif ($exception instanceof MethodNotAllowedHttpException) {\n        return response()->json(['error' => 'Method not allowed'], 405);\n    } elseif ($exception instanceof HttpResponseException) {\n        return $exception->getResponse();\n    } elseif ($exception instanceof \\ErrorException) {\n        return response()->json(['error' => 'Server error'], 500);\n    } elseif ($exception instanceof \\Exception) {\n        return response()->json(['error' => 'Server error'], 500);\n    } else {\n        return response()->json(['error' => 'Server error'], 500);\n    }\n}", "CodeBleu_score": 28.715872271842823}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    if ($exception instanceof ModelNotFoundException) {\n        return response()->json([\n            'status' => 404,\n            'message' => 'Resource not found'\n        ], 404);\n    } else if ($exception instanceof PDOException) {\n        return response()->json([\n            'status' => 500,\n            'message' => 'Database error'\n        ], 500);\n    } else if ($exception instanceof ParseError) {\n        return response()->json([\n            'status' => 500,\n            'message' => 'Internal server error'\n        ], 500);\n    } else if ($exception instanceof HttpException) {\n        return response()->json([\n            'status' => $exception->getStatusCode(),\n            'message' => $exception->getMessage()\n        ], $exception->getStatusCode());\n    } else if (request()->routeIs('admin.*')) {\n        return response()->json([\n            'status' => 500,\n            'message' => 'Internal server error'\n        ], 500);\n    } else {\n        return redirect()->route('admin.session.create');\n    }\n}", "CodeBleu_score": 35.48123817795965}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json(['error' => $path], $statusCode);\n    }\n    return response()->view($path, [], $statusCode);\n}", "CodeBleu_score": 41.81482399506523}, {"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json(['error' => 'Unauthenticated.'], $statusCode);\n    }\n\n    return response()->view($path, [], $statusCode);\n}", "CodeBleu_score": 42.560730699064685}, {"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json(['error' => trans($path)], $statusCode);\n    }\n\n    return response()->view('errors.' . $statusCode, ['error' => trans($path)], $statusCode);\n}", "CodeBleu_score": 51.774019689539394}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t    $updated = 0;\n    $ids = request('ids');\n    foreach ($ids as $id) {\n        $activity = $this->activityRepository->find($id);\n        if ($activity) {\n            $activity->is_done = request('is_done');\n            Event::dispatch(new ActivityUpdated($activity));\n            $this->activityRepository->update($activity);\n            $updated++;\n        }\n    }\n    return response()->json(['success' => $updated > 0], 200);\n}", "CodeBleu_score": 40.74153742708715}, {"code": "<?\npublic function massUpdate(){\n\t    $activities = request()->all();\n    $updated = 0;\n\n    foreach ($activities as $id => $activity) {\n        $updated += $this->activityRepository->update($id, $activity);\n    }\n\n    return response()->json(['updated' => $updated]);\n}", "CodeBleu_score": 28.376266830162123}, {"code": "<?\npublic function massUpdate(){\n\t    $activityIds = request()->get('ids');\n    $isDone = request()->get('is_done');\n\n    $count = 0;\n\n    foreach ($activityIds as $activityId) {\n        $activity = $this->activityRepository->find($activityId);\n\n        if ($activity->is_done != $isDone) {\n            Event::dispatch(new ActivityUpdated($activity, $isDone));\n\n            $this->activityRepository->update($activity, ['is_done' => $isDone]);\n\n            Event::dispatch(new ActivityUpdated($activity, $isDone));\n\n            $count++;\n        }\n    }\n\n    if ($count > 0) {\n        return response()->json(['success' => true]);\n    }\n\n    return response()->json(['success' => false]);\n}", "CodeBleu_score": 44.51165761262407}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t    $activities = request('ids');\n\n    foreach ($activities as $activity) {\n        $this->activityRepository->delete($activity);\n\n        event(new ActivityWasDeleted($activity));\n    }\n\n    return response()->json([\n        trans('success.deleted', ['entity' => trans('activity.label.name')])\n    ]);\n}", "CodeBleu_score": 34.065424789059136}, {"code": "<?\n public function massDestroy(){\n\t    $activities = request()->input('ids');\n\n    foreach ($activities as $activity) {\n        $this->activityRepository->delete($activity);\n\n        event(new ActivityDeleted($activity));\n    }\n\n    return response()->json([\n        trans('brackets/admin-ui::admin.operation.succeeded')\n    ]);\n}", "CodeBleu_score": 30.052284879542146}, {"code": "<?\n public function massDestroy(){\n\t    $ids = request()->input('ids');\n\n    foreach ($ids as $id) {\n        $activity = $this->activityRepository->find($id);\n\n        if (empty($activity)) {\n            continue;\n        }\n\n        event(new ActivityDeleting($activity));\n\n        $this->activityRepository->delete($id);\n\n        event(new ActivityDestroyed($activity));\n    }\n\n    return response()->json([\n        'error' => false,\n        'message' => trans('admin::app.activities.destroy-success'),\n    ]);\n}", "CodeBleu_score": 31.817080165028155}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t     $cards = $this->dashboardHelper->getCards();\n     $requestData = request()->all();\n     foreach ($cards as $key => $card) {\n         if (isset($requestData[$card->id])) {\n             $cards[$key]->selected = true;\n         } else {\n             $cards[$key]->selected = false;\n         }\n     }\n     return response()->json($cards);\n }", "CodeBleu_score": 41.36456217045505}, {"code": "<?\n public function updateCards(){\n\t    $cards = $this->dashboardHelper->getCards();\n    $request = request()->all();\n    foreach ($cards as $key => $card) {\n        $cards[$key]->selected = false;\n        foreach ($request as $requestCard) {\n            if ($requestCard['id'] == $card->id) {\n                $cards[$key]->selected = true;\n            }\n        }\n    }\n    return response()->json($cards);\n}", "CodeBleu_score": 48.50073406928539}, {"code": "<?\n public function updateCards(){\n\t    $cards = $this->dashboardHelper->getCards();\n    $request = request()->all();\n\n    foreach ($cards as $card) {\n        if (isset($request[$card->id])) {\n            $card->selected = true;\n        } else {\n            $card->selected = false;\n        }\n    }\n\n    return response()->json($cards);\n}", "CodeBleu_score": 38.042783882540725}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t    Event::dispatch(new BeforeConfigurationSaved($this->request));\n    $configuration = $this->configurationRepository->create($this->request->all());\n    Event::dispatch(new AfterConfigurationSaved($configuration));\n    session()->flash('success', trans('admin::app.settings.configurations.save-message'));\n    return redirect()->back();\n}", "CodeBleu_score": 39.515940339576794}, {"code": "<?\npublic function store(){\n\t    Event::dispatch(new ConfigurationCreated());\n    $this->configurationRepository->create(request()->all());\n    Event::dispatch(new ConfigurationCreated());\n    session()->flash('success', trans('configuration.created'));\n    return redirect()->back();\n}", "CodeBleu_score": 43.06329687048781}, {"code": "<?\npublic function store(){\n\t    Event::dispatch('configuration.creating');\n\n    $configuration = $this->configurationRepository->create(request()->all());\n\n    Event::dispatch('configuration.created', $configuration);\n\n    session()->flash('success', trans('admin::app.configuration.create-success'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 45.75761966791019}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t    $path = request()->route()->parameters;\n    $fileName = $path['path'];\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n    return Storage::download($config['value']);\n}", "CodeBleu_score": 68.94556787366574}, {"code": "<?\npublic function download(){\n\t    $path = request()->route()->parameters['path'];\n    $name = request()->route()->parameters['name'];\n    $fullName = $path . '/' . $name;\n    $configuration = $this->configurationRepository->findOneByField('value', $fullName);\n    return Storage::download($fullName, $configuration->key);\n}", "CodeBleu_score": 52.952473205953396}, {"code": "<?\npublic function download(){\n\t    $path = request()->route()->parameters['path'];\n    $fileName = request()->route()->parameters['name'];\n\n    $file = $this->configurationRepository->findOneByField('value', $path);\n\n    return Storage::download($fileName, $file->value);\n}", "CodeBleu_score": 52.24110441625244}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\tList<AdminModelSort> sortList = new ArrayList<>();\n\tfor (String s : list) {\n\t\tString[] split = s.split(\" \");\n\t\tAdminModelSort sort = new AdminModelSort();\n\t\tsort.setUserId(getUserId());\n\t\tsort.setSort(Integer.parseInt(split[0]));\n\t\tsort.setType(split[1]);\n\t\tsort.setModel(split[2]);\n\t\tsortList.add(sort);\n\t}\n\tAdminModelSort.removeAll(getUserId());\n\tAdminModelSort.saveBatch(sortList);\n\treturn ok();\n}", "CodeBleu_score": 37.22611620681139}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    List<AdminModelSort> sortList = new ArrayList<>();\n    for (String model : list) {\n        AdminModelSort sort = new AdminModelSort();\n        sort.setSort(0);\n        sort.setType(model);\n        sort.setUserId(getUserId());\n        sortList.add(sort);\n    }\n    remove(AdminModelSort.class, eq(\"user_id\", getUserId()));\n    saveBatch(sortList);\n    return ok();\n}", "CodeBleu_score": 33.899514527595386}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    List<AdminModelSort> sortList = new ArrayList<AdminModelSort>();\n    for (String str : list) {\n        String[] split = str.split(\":\");\n        AdminModelSort sort = new AdminModelSort();\n        sort.setUserId(getUserId());\n        sort.setModel(split[0]);\n        sort.setSort(split[1]);\n        sort.setType(split[2]);\n        sortList.add(sort);\n    }\n    List<AdminModelSort> existingSortList = AdminModelSort.find.where().eq(\"user_id\", getUserId()).findList();\n    for (AdminModelSort sort : existingSortList) {\n        sort.delete();\n    }\n    saveBatch(sortList);\n    return ok();\n}", "CodeBleu_score": 38.982304680263056}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    AdminConfiguration adminConfiguration = adminConfigurationRepository.getById(moduleSetting.getSettingId());\n    if (adminConfiguration.getModule().equals(Module.CRM)) {\n        return new Result(false, \"Cannot update CRM settings.\");\n    }\n    adminConfiguration.setStatus(moduleSetting.getStatus());\n    adminConfigurationRepository.save(adminConfiguration);\n    return new Result(true, \"Module setting updated.\");\n}", "CodeBleu_score": 52.91663412412946}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    AdminConfiguration adminConfiguration = adminConfigurationService.getById(moduleSetting.getSettingId());\n    if (adminConfiguration.getModule().equals(Module.CRM)) {\n        return Result.error(ErrorCode.CRM_MODULE_SETTING_UPDATE_NOT_ALLOWED);\n    }\n    adminConfiguration.setStatus(moduleSetting.getStatus());\n    adminConfigurationService.save(adminConfiguration);\n    return Result.ok();\n}", "CodeBleu_score": 59.46519354783695}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    // Retrieve the admin configuration by the setting ID\n    AdminConfiguration adminConfiguration = adminConfigurationService.getById(moduleSetting.getSettingId());\n\n    // Check if the module is CRM\n    if (adminConfiguration.getModule().equals(Module.CRM)) {\n        // Return an error\n        return new Result(false, \"The module is CRM\");\n    }\n\n    // Update the status of the admin configuration\n    adminConfiguration.setStatus(moduleSetting.getStatus());\n\n    // Save the updated setting\n    adminConfigurationService.save(adminConfiguration);\n\n    // Return a success result\n    return new Result(true, \"The status of the module setting has been updated\");\n}", "CodeBleu_score": 53.25236083207857}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\n        UserConfig userConfig = userConfigService.queryUserConfigByName(customKey);\n\n        if(userConfig != null){\n            userConfig.setValue(json.toJSONString());\n            userConfigService.updateById(userConfig);\n        }else{\n            userConfig = new UserConfig();\n            userConfig.setName(customKey);\n            userConfig.setValue(json.toJSONString());\n            userConfig.setUserId(getUserId());\n            userConfigService.save(userConfig);\n        }\n\n        return success(userConfig);\n    }", "CodeBleu_score": 59.35501619502974}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t        try {\n            UserConfig userConfig = userConfigService.queryUserConfigByName(customKey);\n            if (userConfig == null) {\n                userConfig = new UserConfig();\n                userConfig.setUserId(getUserId());\n                userConfig.setName(customKey);\n                userConfig.setValue(json.toJSONString());\n                userConfigService.save(userConfig);\n            } else {\n                userConfig.setValue(json.toJSONString());\n                userConfigService.updateById(userConfig);\n            }\n            return Result.ok();\n        } catch (Exception e) {\n            logger.error(e.getMessage());\n            return Result.error(e.getMessage());\n        }\n    }", "CodeBleu_score": 64.84494411532485}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t    UserConfig userConfig = userConfigService.queryUserConfigByName(customKey);\n    if (userConfig != null) {\n        userConfig.setValue(json.toJSONString());\n        userConfigService.updateById(userConfig);\n    } else {\n        userConfig = new UserConfig();\n        userConfig.setName(customKey);\n        userConfig.setValue(json.toJSONString());\n        userConfig.setUserId(getUserId());\n        userConfigService.save(userConfig);\n    }\n    return ok(Json.toJson(new Response(true, \"Success\")));\n}", "CodeBleu_score": 72.63444774280954}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser user = adminUserMapper.getById(userId);\n    if (user == null) {\n        return Result.fail(\"User does not exist\");\n    }\n    user.setDeptName(deptMapper.getNameByDeptId(user.getDeptId()));\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.ok(user);\n}", "CodeBleu_score": 42.70314772819616}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser user = adminUserMapper.selectByPrimaryKey(userId);\n    if (user != null) {\n        user.setDeptName(deptMapper.selectByPrimaryKey(user.getDeptId()).getName());\n        user.setSalt(null);\n        user.setPassword(null);\n    }\n    return Result.ok(user);\n}", "CodeBleu_score": 40.4866836934591}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser user = adminUserMapper.selectByPrimaryKey(userId);\n    if (user == null) {\n        return Result.error(\"User not found\");\n    }\n    String deptName = adminDeptMapper.selectByPrimaryKey(user.getDeptId()).getName();\n    user.setDeptName(deptName);\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.ok(user);\n}", "CodeBleu_score": 52.18507593939145}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t  \n  // Retrieve the user ID of the current user\n  String userId = getUserId();\n  \n  // Check if there are multiple \"readNotice\" entries for the user\n  List<ReadNotice> readNotice = ReadNotice.find.where().eq(\"user_id\", userId).findList();\n  \n  // If more than one entry exists, update the status to 1 for all matching entries\n  if (readNotice.size() > 1) {\n    for (ReadNotice notice : readNotice) {\n      notice.status = 1;\n      notice.update();\n    }\n  }\n  \n  // If not, create a new \"readNotice\" entry with status 1 and save it\n  else {\n    ReadNotice notice = new ReadNotice();\n    notice.user_id = userId;\n    notice.status = 1;\n    notice.save();\n  }\n  \n  // Return a success result\n  return ok();\n}", "CodeBleu_score": 23.083535385351894}, {"code": " public Result readNotice() {\n\t    String userId = session().get(\"user\");\n    List<ReadNotice> readNotices = ReadNotice.find.where().eq(\"userId\", userId).findList();\n    if (readNotices.size() > 1) {\n        for (ReadNotice readNotice : readNotices) {\n            readNotice.status = 1;\n            readNotice.update();\n        }\n    } else {\n        ReadNotice readNotice = new ReadNotice();\n        readNotice.userId = userId;\n        readNotice.status = 1;\n        readNotice.save();\n    }\n    return ok();\n}", "CodeBleu_score": 26.70040024177075}, {"code": " public Result readNotice() {\n\t    String userId = getUserId();\n    List<ReadNotice> readNoticeList = ReadNotice.find.where().eq(\"userId\", userId).findList();\n    if (readNoticeList.size() > 1) {\n        for (ReadNotice readNotice : readNoticeList) {\n            readNotice.setStatus(1);\n            readNotice.update();\n        }\n    } else if (readNoticeList.size() == 0) {\n        ReadNotice readNotice = new ReadNotice();\n        readNotice.setUserId(userId);\n        readNotice.setStatus(1);\n        readNotice.save();\n    }\n    return ok(Json.toJson(new Response(true, \"Read notice status updated\")));\n}", "CodeBleu_score": 32.24407731076305}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    try {\n        JSONObject jsonObject = new JSONObject();\n        jsonObject.put(\"companyName\", adminCompanyBO.getCompanyName());\n        jsonObject.put(\"companyAddress\", adminCompanyBO.getCompanyAddress());\n        jsonObject.put(\"companyPhone\", adminCompanyBO.getCompanyPhone());\n        jsonObject.put(\"companyEmail\", adminCompanyBO.getCompanyEmail());\n        jsonObject.put(\"companyWebsite\", adminCompanyBO.getCompanyWebsite());\n        jsonObject.put(\"companyLogo\", adminCompanyBO.getCompanyLogo());\n        jsonObject.put(\"companyLogoType\", adminCompanyBO.getCompanyLogoType());\n        jsonObject.put(\"companyLogoContent\", adminCompanyBO.getCompanyLogoContent());\n        jsonObject.put(\"companyLogoFileName\", adminCompanyBO.getCompanyLogoFileName());\n\n        ConfigurationBO configurationBO = new ConfigurationBO();\n        configurationBO.setName(\"companyInfo\");\n        configurationBO.setDescription(\"Company Information\");\n        configurationBO.setValue(jsonObject.toString());\n        configurationBO.setStatus(\"active\");\n\n        ConfigurationBO existingConfigurationBO = configurationRepository.lambdaQuery()\n                .eq(ConfigurationBO::getName, configurationBO.getName())\n                .last(\"limit 1\")\n                .one();\n\n        if (existingConfigurationBO != null) {\n            configurationBO.setId(existingConfigurationBO.getId());\n            configurationBO.setStatus(existingConfigurationBO.getStatus());\n        }\n\n        configurationRepository.saveOrUpdate(configurationBO);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}", "CodeBleu_score": 35.22173109658559}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    String configName = \"companyInfo\";\n    String configValue = adminCompanyBO.toJSONString();\n    String configDesc = \"Administrative configuration for company information.\";\n    ConfigBO config = configService.lambdaQuery(c -> c.getName().eq(configName)).last();\n    if (config == null) {\n        config = new ConfigBO();\n        config.setName(configName);\n        config.setDescription(configDesc);\n        config.setValue(configValue);\n        config.setStatus(ConfigStatus.ACTIVE);\n        configService.saveOrUpdate(config);\n    } else {\n        config.setValue(configValue);\n        configService.saveOrUpdate(config);\n    }\n}", "CodeBleu_score": 42.05310314928416}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    try {\n        ConfigurationBO configurationBO = configurationService.getConfigurationByName(\"companyInfo\");\n        if (configurationBO == null) {\n            configurationBO = new ConfigurationBO();\n            configurationBO.setName(\"companyInfo\");\n            configurationBO.setDescription(\"Company Information\");\n        }\n        configurationBO.setValue(adminCompanyBO.toJSONString());\n        configurationService.saveOrUpdate(configurationBO);\n    } catch (Exception e) {\n        throw new MifosRuntimeException(e);\n    }\n}", "CodeBleu_score": 33.88070378109031}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\t    AdminCompanyBO adminConfig = new AdminCompanyBO();\n    try {\n        Query query = new Query(Query.Type.SELECT, 'AdminCompany', [\n            new Query.Filter('companyId', Query.Filter.Type.EQUAL, company.id),\n            new Query.Filter('key', Query.Filter.Type.EQUAL, 'AdminCompany')\n        ]);\n        QueryResult queryResult = databaseManager.getQueryResult(query);\n        if (queryResult.size() == 1) {\n            Value value = queryResult.first().getValue('value');\n            adminConfig = (AdminCompanyBO)value.get();\n        }\n    } catch (Exception e) {\n        log.error('Error while retrieving admin configuration', e);\n    }\n    return adminConfig;\n}", "CodeBleu_score": 38.31088048921004}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t    AdminCompanyBO ac = new AdminCompanyBO();\n    ac.setCompany(getCompany());\n    ac.setKey('AdminCompany');\n    ac.setValue(getValue(ac));\n    ac.setAdminConfig(parseObject(ac.getValue()));\n    return ac;\n}", "CodeBleu_score": 20.41732476282186}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t    // Retrieve the admin configuration for the company.\n    AdminConfig adminConfig = [select key, value from AdminConfig where key = 'Company' limit 1];\n\n    // If the admin configuration is found, parse the value into an AdminCompanyBO object.\n    if (adminConfig != null) {\n        return (AdminCompanyBO) JSON.deserialize(adminConfig.value, AdminCompanyBO.class);\n    }\n\n    // If the admin configuration is not found, return a new instance of the AdminCompanyBO class.\n    return new AdminCompanyBO();\n}", "CodeBleu_score": 28.871359877640824}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t \n \t// Create a list of AdminConfig objects from the list of strings\n \tList<AdminConfig> configList = new ArrayList<AdminConfig>();\n \tfor (String string : stringList) {\n \t\tAdminConfig config = new AdminConfig();\n \t\tconfig.setName(\"logWelcomeSpeech\");\n \t\tconfig.setValue(string);\n \t\tconfigList.add(config);\n \t}\n \n \t// Remove existing configurations with the specified log configuration name\n \tList<AdminConfig> existingConfigs = AdminConfig.getConfigs(null, \"logWelcomeSpeech\", null);\n \tfor (AdminConfig config : existingConfigs) {\n \t\tconfig.remove();\n \t}\n \n \t// Save the new list of configurations in batch\n \tAdminConfig.saveBatch(configList);\n }", "CodeBleu_score": 43.344476200617535}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t    List<AdminConfig> configList = new ArrayList<AdminConfig>();\n    for (String s : stringList) {\n        AdminConfig config = new AdminConfig();\n        config.setName(\"log.welcomeSpeech\");\n        config.setValue(s);\n        configList.add(config);\n    }\n    AdminConfig.remove(configList);\n    AdminConfig.saveBatch(configList);\n}", "CodeBleu_score": 43.88166520083025}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t        AdminConfig.remove(getLogConfigId(LOG_WELCOME_SPEECH));\n        for (String string : stringList) {\n            AdminConfig.create(LOG_CONFIG_SPEECH, getLogConfigId(LOG_WELCOME_SPEECH), \"welcomeSpeech\", string);\n        }\n        saveBatch();\n    }", "CodeBleu_score": 19.057130106360958}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    String userId = getUserId(adminInitDataBO.getUsername());\n    UserBO userBO = getById(userId);\n    if (verify(adminInitDataBO.getPassword(), userBO.getSalt(), userBO.getPassword())) {\n        String accessCode = generateAccessCode();\n        getRedis().setex(userId, 600, accessCode);\n        return accessCode;\n    } else {\n        throw new InvalidPasswordException();\n    }\n}", "CodeBleu_score": 25.862199086471993}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    // Retrieve the current user ID and user details, including the username.\n    String userId = getUserId();\n    String username = getUsername();\n\n    // Check the provided password against the stored password using the username and salt.\n    // If the password is correct, generate a temporary access code, store it in Redis with a 10-minute expiration, and return the code.\n    // If the password is incorrect, throw an exception indicating an invalid password.\n    if (verify(adminInitDataBO.getPassword(), getPassword(), getSalt())) {\n        String accessCode = String.valueOf(randomInt(100000, 999999));\n        getRedis().setex(userId, 600, accessCode);\n        return accessCode;\n    } else {\n        throw new IllegalArgumentException(\"Invalid password\");\n    }\n}", "CodeBleu_score": 26.365629264761676}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    String userId = getUserId(adminInitDataBO.getUsername());\n    UserBO userBO = getById(userId);\n    if (!verify(adminInitDataBO.getPassword(), userBO.getSalt(), userBO.getPassword())) {\n        throw new InvalidPasswordException();\n    }\n    String accessCode = UUID.randomUUID().toString();\n    getRedis().setex(accessCode, 600, userId);\n    return accessCode;\n}", "CodeBleu_score": 27.535215867430058}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\t    def userId = getUserId()\n    def key = \"auth:${userId}:init\"\n    def redis = getRedis()\n    def unauthorizedInitAuthUrls = redis.lrange(key, 0, -1)\n    return unauthorizedInitAuthUrls.contains(request.getRequestURI())\n}", "CodeBleu_score": 26.246905486120998}, {"code": "private boolean verifyInitAuth(){\n\t    // Get the user ID\n    String userId = getUserId();\n    // Construct the key\n    String key = \"user:\" + userId + \":unauth\";\n    // Get the unauthorized menu URLs from Redis\n    List<String> unauthList = redis.lrange(key, 0, -1);\n    // Check if the initial authentication URL is in the list\n    if (unauthList.contains(initAuthUrl)) {\n        return true;\n    } else {\n        return false;\n    }\n}", "CodeBleu_score": 33.06027382312955}, {"code": "private boolean verifyInitAuth(){\n\t    String userId = getUserId();\n    String key = \"unauth_\" + userId;\n    String unauthUrls = get(key);\n    if (unauthUrls != null) {\n        String[] unauthUrlArray = unauthUrls.split(\",\");\n        for (int i = 0; i < unauthUrlArray.length; i++) {\n            if (unauthUrlArray[i].equals(getInitAuthUrl())) {\n                return true;\n            }\n        }\n    }\n    return false;\n}", "CodeBleu_score": 31.51270482012488}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tList<AdminRoleMenu> roleMenuList = new ArrayList<AdminRoleMenu>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu roleMenu = new AdminRoleMenu();\n\t\troleMenu.setRoleId(roleId);\n\t\troleMenu.setMenuId(menuId);\n\t\troleMenuList.add(roleMenu);\n\t}\n\tsaveBatch(roleMenuList);\n}", "CodeBleu_score": 46.8740161885308}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    List<AdminRoleMenu> roleMenuList = new ArrayList<AdminRoleMenu>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    }\n    adminRoleMenuDao.saveBatch(roleMenuList);\n}", "CodeBleu_score": 51.408258941897245}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tif (menuIdList == null || menuIdList.size() == 0) {\n\t\treturn;\n\t}\n\tList<AdminRoleMenu> roleMenuList = new ArrayList<AdminRoleMenu>();\n\tAdminRoleMenu roleMenu;\n\tfor (Integer menuId : menuIdList) {\n\t\troleMenu = new AdminRoleMenu();\n\t\troleMenu.setRoleId(roleId);\n\t\troleMenu.setMenuId(menuId);\n\t\troleMenuList.add(roleMenu);\n\t}\n\tsaveBatch(roleMenuList);\n}", "CodeBleu_score": 47.28304031097565}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\t    getSysLogIndex(\n        index: { index ->\n            beanToMap(\n                bean: sysLog,\n                map: { map ->\n                    map.put('createTime', formatDateTime(date: sysLog.createTime, pattern: 'yyyy-MM-dd HH:mm:ss'))\n                    map.remove('id')\n                    execute(\n                        request: client.prepareIndex(index, 'sysLog')\n                            .setSource(map)\n                            .request(),\n                        listener: { indexResponse, e ->\n                            if (e) {\n                                println('error')\n                                e.printStackTrace()\n                            }\n                        }\n                    )\n                }\n            )\n        }\n    )\n}", "CodeBleu_score": 20.433901712984547}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t    getSysLogIndex(new Handler<AsyncResult<String>>() {\n        @Override\n        public void handle(AsyncResult<String> result) {\n            if (result.succeeded()) {\n                String index = result.result();\n                Map<String, Object> map = beanToMap(sysLog);\n                map.put(\"createTime\", formatDateTime(getCreateTime(sysLog)));\n                map.remove(\"id\");\n                JsonObject document = new JsonObject(map);\n                client.prepareIndex(index, \"syslog\")\n                        .setSource(document)\n                        .execute(new Handler<AsyncResult<IndexResponse>>() {\n                            @Override\n                            public void handle(AsyncResult<IndexResponse> event) {\n                                if (event.failed()) {\n                                    log.error(\"Failed to save syslog\", event.cause());\n                                }\n                            }\n                        });\n            } else {\n                log.error(\"Failed to get syslog index\", result.cause());\n            }\n        }\n    });\n}", "CodeBleu_score": 32.300295891969775}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t    getSysLogIndex(sysLog, { index ->\n        def map = beanToMap(sysLog)\n        map.put(\"create_time\", formatDateTime(getCreateTime(sysLog)))\n        map.remove(\"id\")\n        def request = new IndexRequest(index).source(map)\n        execute(request, {\n            // Success\n        }, { error ->\n            log.error(\"Failed to save system log: ${error.getMessage()}\")\n        })\n    })\n}", "CodeBleu_score": 20.779154301718062}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t    try {\n        SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n        SearchRequest searchRequest = new SearchRequest(getSysLogIndex()).source(searchSourceBuilder);\n        SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n        List<SysLog> sysLogList = mapToBean(searchResponse, SysLog.class);\n        BasePage<SysLog> sysLogPage = new BasePage<SysLog>();\n        setTotal(sysLogPage, searchResponse);\n        setList(sysLogPage, sysLogList);\n        setCurrent(sysLogPage, querySysLogBO.getPage());\n        return sysLogPage;\n    } catch (IOException e) {\n        error(e);\n        return null;\n    }\n}", "CodeBleu_score": 39.218932985081516}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t    // Initialize the search criteria\n    SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n    // Initialize the search request\n    SearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n    searchRequest.source(searchSourceBuilder);\n    // Initialize the search response\n    SearchResponse searchResponse = null;\n    try {\n        // Execute the search request\n        searchResponse = getRestHighLevelClient().search(searchRequest, RequestOptions.DEFAULT);\n    } catch (IOException e) {\n        // Log the error message\n        error(\"An error occurred while querying the system logs page list. QuerySysLogBO: \" + querySysLogBO, e);\n    }\n    // Initialize the search hits\n    SearchHits searchHits = null;\n    // Verify the search response is not null\n    if (searchResponse != null) {\n        // Get the search hits from the search response\n        searchHits = searchResponse.getHits();\n    }\n    // Initialize the system log list\n    List<SysLog> sysLogList = new ArrayList<>();\n    // Verify the search hits is not null\n    if (searchHits != null) {\n        // Get the total hits from the search hits\n        long totalHits = searchHits.getTotalHits();\n        // Initialize the search hit array\n        SearchHit[] searchHitsArray = searchHits.getHits();\n        // Verify the search hit array is not null and not empty\n        if (ArrayUtils.isNotEmpty(searchHitsArray)) {\n            // Iterate over the search hit array\n            for (SearchHit searchHit : searchHitsArray) {\n                // Get the source as a map from the search hit\n                Map<String, Object> sourceAsMap = searchHit.getSourceAsMap();\n                // Create a new system log\n                SysLog sysLog = mapToBean(sourceAsMap, SysLog.class);\n                // Add the system log to the system log list\n                sysLogList.add(sysLog);\n            }\n        }\n    }\n    // Create a new base page\n    BasePage<SysLog> sysLogPage = new BasePage<>();\n    // Set the system", "CodeBleu_score": 51.994859239113225}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t    SearchSourceBuilder sourceBuilder = createSearchSourceBuilder(querySysLogBO);\n    try {\n        SearchResponse searchResponse = search(sourceBuilder, getSysLogIndex());\n        return mapToBean(searchResponse, SysLog.class);\n    } catch (IOException e) {\n        error(\"Failed to query system logs: \" + e.getMessage());\n        return new BasePage<>();\n    }\n}", "CodeBleu_score": 20.003835188829523}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\t  const file = fs.createWriteStream(dest);\n  return new Promise((resolve, reject) => {\n    https\n      .get(url, function (response) {\n        response.pipe(file);\n        file.on(\"finish\", function () {\n          file.close(() => {\n            resolve();\n          });\n        });\n      })\n      .on(\"error\", function (err) {\n        fs.unlink(dest, () => {\n          reject(err.message);\n        });\n      });\n  });\n}", "CodeBleu_score": 77.39061203298039}, {"code": "async function downloadFile(url, dest){\n\t  const file = fs.createWriteStream(dest);\n  await new Promise((resolve, reject) => {\n    https\n      .get(url, (response) => {\n        response.pipe(file);\n        file.on(\"finish\", () => {\n          file.close(() => {\n            resolve();\n          });\n        });\n      })\n      .on(\"error\", (err) => {\n        fs.unlink(dest, () => {\n          reject(err.message);\n        });\n      });\n  });\n}", "CodeBleu_score": 62.35949598883004}, {"code": "async function downloadFile(url, dest){\n\t  const file = fs.createWriteStream(dest);\n  return new Promise((resolve, reject) => {\n    https.get(url, (response) => {\n      response.pipe(file);\n      file.on(\"finish\", () => {\n        file.close(() => {\n          resolve();\n        });\n      });\n    })\n      .on(\"error\", (err) => {\n        fs.unlink(dest, () => {\n          reject(err.message);\n        });\n      });\n  });\n}", "CodeBleu_score": 63.451514656453575}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t    return moduleRepository.findByDependentModuleId(module.getModuleId())\n        .flatMapMany(dependentModule -> {\n            if (circularDependencyCheckSet.contains(dependentModule.getModuleId())) {\n                warn(\"Circular dependency detected for module \" + module.getModuleId() + \" and dependent module \" + dependentModule.getModuleId());\n                return Flux.empty();\n            }\n            circularDependencyCheckSet.add(dependentModule.getModuleId());\n            return getLiveModules(dependentModule.getModuleId(), circularDependencyCheckSet);\n        })\n        .onErrorContinue((throwable, o) -> warn(\"Error getting dependent modules for module \" + module.getModuleId() + \" and dependent module \" + o.getModuleId() + \": \" + throwable.getMessage()));\n}", "CodeBleu_score": 45.765204661015375}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t        return module.getDependentModules()\n                .filter(dependentModule -> !circularDependencyCheckSet.contains(dependentModule.getId()))\n                .doOnNext(dependentModule -> circularDependencyCheckSet.add(dependentModule.getId()))\n                .flatMapMany(this::getLiveModules)\n                .doOnNext(dependentModule -> circularDependencyCheckSet.remove(dependentModule.getId()))\n                .onErrorContinue((throwable, o) -> warn(\"Failed to retrieve dependent module \" + o.getId(), throwable))\n                .collectList()\n                .flatMapMany(Flux::fromIterable);\n    }", "CodeBleu_score": 51.35964086700251}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t    return moduleRepository\n        .findByModuleIds(module.getDependentModuleIds())\n        .filter(dependentModule -> !circularDependencyCheckSet.contains(dependentModule.getModuleId()))\n        .flatMapMany(dependentModule -> {\n            circularDependencyCheckSet.add(dependentModule.getModuleId());\n            return getLiveModules(dependentModule, circularDependencyCheckSet);\n        })\n        .doOnNext(dependentModule -> module.addDependentModule(dependentModule))\n        .onErrorContinue((throwable, o) -> warn(\"Unable to retrieve dependent modules for module: \" + module.getModuleId()))\n        .collectList()\n        .flatMapMany(Flux::fromIterable);\n}", "CodeBleu_score": 50.875026169536966}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t\tfor (Map.Entry<?, ?> entry : map.entrySet()) {\n\t\tObject key = entry.getKey();\n\t\tObject value = entry.getValue();\n\n\t\tif (\"module\".equals(key)) {\n\t\t\tString moduleId = String.valueOf(value);\n\n\t\t\tif (isNotBlank(moduleId)) {\n\t\t\t\tdependentModuleIds.add(moduleId);\n\t\t\t}\n\t\t}\n\t\telse if (value instanceof Map) {\n\t\t\tdoGetDependentModules((Map<?, ?>)value, dependentModuleIds);\n\t\t}\n\t\telse if (value instanceof List) {\n\t\t\tfor (Object item : (List<?>)value) {\n\t\t\t\tif (item instanceof Map) {\n\t\t\t\t\tdoGetDependentModules((Map<?, ?>)item, dependentModuleIds);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 29.988661003782312}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    map.forEach((key, value) -> {\n        if (key.equals(\"componentType\") && value.equals(\"module\")) {\n            String appId = (String) map.get(\"appId\");\n            if (isNotBlank(appId)) {\n                dependentModuleIds.add(appId);\n            }\n        }\n        if (value instanceof Map) {\n            doGetDependentModules((Map<?, ?>) value, dependentModuleIds);\n        }\n        if (value instanceof List) {\n            ((List<?>) value).forEach(item -> {\n                if (item instanceof Map) {\n                    doGetDependentModules((Map<?, ?>) item, dependentModuleIds);\n                }\n            });\n        }\n    });\n}", "CodeBleu_score": 48.15486882093266}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        if (entry.getKey().equals(\"componentType\") && entry.getValue().equals(\"module\")) {\n            String appId = (String) map.get(\"appId\");\n            if (isNotBlank(appId)) {\n                dependentModuleIds.add(appId);\n            }\n        }\n        if (entry.getValue() instanceof Map<?, ?>) {\n            doGetDependentModules((Map<?, ?>) entry.getValue(), dependentModuleIds);\n        } else if (entry.getValue() instanceof List<?>) {\n            for (Object listEntry : (List<?>) entry.getValue()) {\n                if (listEntry instanceof Map<?, ?>) {\n                    doGetDependentModules((Map<?, ?>) listEntry, dependentModuleIds);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 44.25071960810409}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t    InputStream inputStream = new ByteArrayInputStream(dataBuffer.getData());\n    BufferedImage srcImage = ImageIO.read(inputStream);\n    inputStream.close();\n\n    if (createThumbnail) {\n      srcImage = resizeImage(srcImage);\n    }\n\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    ImageIO.write(srcImage, \"jpg\", outputStream);\n    outputStream.flush();\n    byte[] data = outputStream.toByteArray();\n    outputStream.close();\n\n    Asset asset = Asset.newBuilder()\n        .setContentType(\"image/jpeg\")\n        .setData(ByteString.copyFrom(data))\n        .build();\n\n    dataBuffer.release();\n\n    return asset;\n  }", "CodeBleu_score": 39.525602580656496}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t    // Read the image data from the DataBuffer\n    byte[] bytes = new byte[dataBuffer.readableByteCount()];\n    dataBuffer.read(bytes);\n\n    // Resize the image if necessary\n    if (createThumbnail) {\n        bytes = resizeImage(bytes);\n    }\n\n    // Create a new Asset to return\n    Asset asset = new Asset();\n    asset.setContentType(MediaType.JPEG);\n    asset.setData(bytes);\n\n    // Release the DataBuffer\n    dataBuffer.release();\n\n    return asset;\n}", "CodeBleu_score": 46.336214932803585}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t\n    // Read the data buffer into a ByteArrayInputStream.\n    InputStream inputStream = new ByteArrayInputStream(dataBuffer.getData());\n\n    // Read the image data from the input stream.\n    BufferedImage image = ImageIO.read(inputStream);\n\n    // If creating a thumbnail, resize the image.\n    if (createThumbnail) {\n        image = resizeImage(image, 200);\n    }\n\n    // Write the image to a new ByteArrayOutputStream.\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    ImageIO.write(image, \"jpg\", outputStream);\n\n    // Get the resized image data from the output stream.\n    byte[] data = outputStream.toByteArray();\n\n    // Release the data buffer.\n    dataBuffer.release();\n\n    // Create a new Asset with the resized image data.\n    Asset asset = new Asset(data, \"image/jpeg\");\n\n    // Return the new asset.\n    return asset;\n}", "CodeBleu_score": 39.909696271410525}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return assetService.getById(assetId)\n        .flatMap(asset -> ServerResponse.ok()\n            .contentType(asset.getContentType())\n            .body(just(asset.getData()), DataBuffer.class));\n}", "CodeBleu_score": 19.91161667892758}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return assetRepository.getById(assetId)\n            .flatMap(asset -> {\n                ServerHttpResponse response = exchange.getResponse();\n                response.setStatusCode(HttpStatus.OK);\n                if (asset.getContentType() != null) {\n                    response.getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n                }\n                DataBuffer dataBuffer = response.bufferFactory().wrap(asset.getData());\n                return response.writeWith(Mono.just(dataBuffer));\n            });\n}", "CodeBleu_score": 56.49687917123798}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return assetRepository.getById(assetId)\n        .flatMap(asset -> exchange.getResponse().writeWith(\n            Mono.just(asset)\n                .setStatusCode(HttpStatus.OK)\n                .set(HttpHeaders.CONTENT_TYPE, asset.getContentType())\n                .wrap(Mono.just(asset.getData()))\n                .flatMap(Flux::fromDataBuffers)));\n}", "CodeBleu_score": 31.291871410906907}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    return getMode()\n        .flatMapIterable(mode -> mode.equals(WorkspaceMode.SAAS) ? toList() : getOrganizationInEnterpriseMode())\n        .map(organization -> getAuthConfigs(organization))\n        .flatMap(Flux::fromIterable)\n        .map(authConfig -> new FindAuthConfig(authConfig.id, authConfig.name, authConfig.type, authConfig.organizationId, authConfig.organizationName))\n        .collect(Collectors.toList())\n        .flatMapMany(Flux::fromIterable)\n        .switchIfEmpty(empty());\n}", "CodeBleu_score": 28.345529511233668}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    return getMode()\n        .flatMapIterable(mode -> {\n            if (mode == WorkspaceMode.SAAS) {\n                return empty();\n            } else {\n                return getOrganizationInEnterpriseMode();\n            }\n        })\n        .map(organization -> {\n            return new FindAuthConfig(organization.getId(), organization.getId(), organization.getName(), organization.getName(), organization.getId());\n        });\n}", "CodeBleu_score": 31.79321562958525}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    return getMode()\n            .flatMapIterable(mode -> {\n                if (mode == WorkspaceMode.SAAS) {\n                    return empty();\n                }\n                return getOrganizationInEnterpriseMode();\n            })\n            .map(organization -> {\n                return new FindAuthConfig(organization.getId(), organization.getName());\n            })\n            .collect(toList())\n            .flatMapIterable(list -> list);\n}", "CodeBleu_score": 33.8413772877371}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    return MongockSpring5.builder()\n            .setDriver(mongoTemplate.getDb().getMongoClient())\n            .setSpringContext(springContext)\n            .setMongoTemplate(mongoTemplate)\n            .addChangeLogsScanPackage(\"com.example.demo.mongock\")\n            .buildApplicationRunner();\n}", "CodeBleu_score": 27.48771409607005}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    return MongockSpring5.builder()\n        .setDriver(mongoTemplate.getDb().getMongoClient())\n        .setSpringContext(springContext)\n        .addChangeLogsScanPackage(\"com.example.demo.mongock\")\n        .buildApplicationRunner();\n}", "CodeBleu_score": 20.590730796757654}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    return MongockSpring5.builder()\n        .setDriver(mongoTemplate.getDb().getMongoClient())\n        .setSpringContext(springContext)\n        .addChangeLogsScanPackage(\"com.example.demo.mongock\")\n        .setLockQuickConfig()\n        .buildApplicationRunner();\n}", "CodeBleu_score": 22.045193605844517}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\n    MongoDatabaseFactory factory = mongoDbFactory;\n    MongoDatabaseFactory factory = mongoDbFactory;\n    MongoDatabaseFactory factory = mongoDbFactory;\n    MongoDatabaseFactory factory = mongoDbFactory;\n\n    return new ReactiveMongoTemplate(factory, mappingMongoConverter);\n}", "CodeBleu_score": 29.284490192185203}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t    ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n    reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n    return reactiveMongoTemplate;\n}", "CodeBleu_score": 77.17711848849393}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t    ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n    reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n    return reactiveMongoTemplate;\n}", "CodeBleu_score": 77.17711848849393}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return getLatestRecordByLibraryQueryId(libraryQueryId)\n        .switchIfEmpty(getById(libraryQueryId))\n        .map(libraryQueryRecord -> libraryQueryRecord.get(\"dsl\"))\n        .map(dsl -> (Map<String, Object>) dsl);\n}", "CodeBleu_score": 44.508182016353416}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return getLatestRecordByLibraryQueryId(libraryQueryId)\n            .map(this::getLiveDSL)\n            .switchIfEmpty(getById(libraryQueryId)\n                    .map(this::getLiveDSL)\n            );\n}", "CodeBleu_score": 51.853660748224485}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return getLatestRecordByLibraryQueryId(libraryQueryId)\n        .map(record -> record.get(\"dsl\"))\n        .switchIfEmpty(getById(libraryQueryId)\n            .map(libraryQuery -> libraryQuery.get(\"dsl\"))\n        );\n}", "CodeBleu_score": 52.63969000922706}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t\n        final Duration timeoutDuration = parseTimeoutDuration(timeoutStr);\n\n        return defer(() -> {\n            if (isJsDatasourcePlugin(datasource)) {\n                return executeByNodeJs(datasource, queryConfig, requestParams, timeoutDuration, queryVisitorContext);\n            } else {\n                return executeLocally(datasource, queryConfig, requestParams, timeoutDuration, queryVisitorContext);\n            }\n        })\n                .timeout(timeoutDuration, ofException(error(TIMEOUT_ERROR)))\n                .onErrorMap(e -> {\n                    if (e instanceof TimeoutException) {\n                        return new AppsmithPluginException(\n                                AppsmithPluginError.PLUGIN_QUERY_TIMEOUT_ERROR,\n                                \"Query execution timed out for \" + timeoutDuration.toMillis() + \"ms.\"\n                        );\n                    }\n\n                    return new AppsmithPluginException(\n                            AppsmithPluginError.PLUGIN_EXECUTE_ARGUMENT_ERROR,\n                            \"Query execution failed.\",\n                            e\n                    );\n                })\n                .onErrorResume(e -> {\n                    if (e instanceof AppsmithPluginException) {\n                        return Mono.just(\n                                new QueryExecutionResult(\n                                        new ArrayList<>(),\n                                        new ArrayList<>(),\n                                        null,\n                                        e.getMessage(),\n                                        ((AppsmithPluginException) e).getTitle(),\n                                        ((AppsmithPluginException) e).getErrorType(),\n                                        ((AppsmithPluginException) e).getAction(),\n                                        ((AppsmithPluginException) e).getReferenceDoc(),\n                                        ((AppsmithPluginException) e).getReferenceId()\n                                )\n                        );\n                    }\n\n                    return Mono.just(\n                            new QueryExecutionResult(\n                                    new ArrayList<>(),\n                                    new ArrayList<>(),\n                                    null,\n                                    \"Query execution failed.\",\n                                    e.getMessage(),\n                                    AppsmithPluginError.PLUGIN_ERROR.getTitle(),\n                                    AppsmithPluginError.PLUG", "CodeBleu_score": 43.00627012602543}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        log.debug(\"Executing query on datasource: {} with config: {} and parameters: {}\", datasource.getDatasourceConfiguration(), queryConfig, requestParams);\n        final QueryExecutionTimeoutException queryExecutionTimeoutException = new QueryExecutionTimeoutException(\n                \"Query execution timed out. Please increase the timeout duration.\");\n        final Duration timeoutDuration = getTimeoutDuration(timeoutStr);\n        final Duration deferDuration = getDeferDuration(timeoutStr);\n        final boolean isLocalExecution = isLocalDatasource(datasource);\n\n        return defer(deferDuration)\n                .flatMap(ignored -> isLocalExecution\n                        ? executeLocally(datasource, queryConfig, requestParams, timeoutDuration, queryVisitorContext)\n                        : executeByNodeJs(datasource, queryConfig, requestParams, timeoutDuration, queryVisitorContext))\n                .timeout(timeoutDuration)\n                .onErrorMap(e -> {\n                    if (e instanceof AppsmithPluginException) {\n                        return (AppsmithPluginException) e;\n                    }\n\n                    if (e instanceof TimeoutException) {\n                        return queryExecutionTimeoutException;\n                    }\n\n                    log.error(\"Error executing query on datasource: {} with config: {} and parameters: {}\", datasource.getDatasourceConfiguration(), queryConfig, requestParams, e);\n                    return new AppsmithPluginException(\n                            AppsmithPluginError.PLUGIN_ERROR,\n                            \"Error executing query on datasource: \" + e.getMessage()\n                    );\n                })\n                .onErrorResume(e -> {\n                    if (e instanceof AppsmithPluginException) {\n                        return Mono.just(new QueryExecutionResult(e.getMessage(), null, null, null, ((AppsmithPluginException) e).getTitle()));\n                    }\n\n                    return Mono.just(new QueryExecutionResult(e.getMessage(), null, null, null, \"Unable to execute query\"));\n                });\n    }", "CodeBleu_score": 39.39640545384318}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        if (isJsDatasourcePlugin(datasource)) {\n            return executeByNodeJs(datasource, queryConfig, requestParams, queryVisitorContext);\n        }\n        // If the datasource is not a JS plugin, execute the query locally.\n        return executeLocally(datasource, queryConfig, requestParams, timeoutStr, queryVisitorContext);\n    }", "CodeBleu_score": 22.664034060533243}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t    return Mono\n            .just(datasource)\n            .flatMap(datasource -> getQueryExecutor(datasource))\n            .flatMap(queryExecutor -> buildQueryExecutionContextMono(datasource, queryConfig, requestParams, queryVisitorContext))\n            .flatMap(queryExecutionContext -> getOrCreateConnection(datasource)\n                    .flatMap(connection -> {\n                        log.debug(\"Executing query locally for datasource: {}\", datasource.getId());\n                        return queryExecutor.execute(connection, queryExecutionContext)\n                                .onErrorResume(error -> doOnError(error, datasource, queryExecutionContext));\n                    }))\n            .flatMap(queryExecutionResult -> {\n                log.debug(\"Executed query locally for datasource: {}\", datasource.getId());\n                return Mono.just(queryExecutionResult);\n            });\n}", "CodeBleu_score": 38.80185539394987}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t    // Extract the type of the datasource.\n    final DatasourceType datasourceType = DatasourceType.valueOf(datasource.getDatasourceConfiguration().getType());\n    // Extract the query executor for the datasource type.\n    final QueryExecutor queryExecutor = getQueryExecutor(datasourceType);\n    // Build the query execution context.\n    final QueryExecutionContext queryExecutionContext = buildQueryExecutionContextMono(datasource, queryConfig, requestParams, queryVisitorContext)\n            .block();\n    // Acquire a connection from the datasource connection pool.\n    return getOrCreateConnection(datasource)\n            .flatMap(connection -> {\n                // Execute the query using the connection.\n                return doExecuteQuery(connection, queryExecutor, queryExecutionContext);\n            })\n            .onErrorResume(error -> {\n                // Handle any errors that occur during execution.\n                return doOnError(error, datasource, queryExecutionContext.getQuery());\n            })\n            .flatMap(queryResult -> {\n                // Handle the query result.\n                return handleQueryResult(queryResult, datasource, queryExecutionContext.getQuery());\n            });\n}", "CodeBleu_score": 47.59577507458855}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t    // Get the appropriate query executor for the datasource type.\n    final QueryExecutor queryExecutor = getQueryExecutor(datasource)\n    // Build the query execution context.\n    final QueryExecutionContext queryExecutionContext = buildQueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext)\n    // Acquire a connection from the datasource connection pool.\n    return getConnection(datasource)\n            .flatMap(connection -> {\n                // Execute the query using the connection and handle any errors that occur during execution.\n                return doExecuteQuery(queryExecutor, queryExecutionContext, connection)\n                        .onErrorResume(error -> {\n                            // If an error occurs during execution, release the connection back to the connection pool.\n                            return Mono.from(connection.close())\n                                    // Then, propagate the error.\n                                    .then(Mono.error(error))\n                        })\n            })\n            .flatMap(queryExecutionResult -> {\n                // Release the connection back to the connection pool.\n                return Mono.from(connection.close())\n                        // Then, return the query execution result.\n                        .thenReturn(queryExecutionResult)\n            })\n}", "CodeBleu_score": 46.77417398270646}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t    if (timeoutStr.isBlank()) {\n        return DEFAULT_QUERY_TIMEOUT_MS;\n    }\n\n    String[] parts = timeoutStr.split(\"\\\\s+\");\n    if (parts.length != 2) {\n        throw new IllegalArgumentException(String.format(\"Invalid timeout string: %s\", timeoutStr));\n    }\n\n    String valueStr = parts[0];\n    String unitStr = parts[1];\n    TimeUnit unit;\n    try {\n        unit = TimeUnit.valueOf(unitStr.toUpperCase());\n    } catch (IllegalArgumentException e) {\n        throw new IllegalArgumentException(String.format(\"Invalid timeout unit: %s\", unitStr));\n    }\n\n    double value;\n    try {\n        value = Double.parseDouble(valueStr);\n    } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(String.format(\"Invalid timeout value: %s\", valueStr));\n    }\n\n    long timeoutMs = (long) (value * unit.toMillis(1));\n    if (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n        throw new IllegalArgumentException(\n                String.format(\"Timeout value exceeds maximum allowed: %s\", timeoutStr));\n    }\n\n    return (int) timeoutMs;\n}", "CodeBleu_score": 38.79945582817016}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t    if (timeoutStr.isBlank()) {\n        return DEFAULT_TIMEOUT_MS;\n    }\n\n    String[] parts = timeoutStr.split(\"\\\\s+\");\n    if (parts.length != 2) {\n        throw new IllegalArgumentException(\"Invalid timeout string: \" + timeoutStr);\n    }\n\n    String valueStr = parts[0];\n    String unitStr = parts[1];\n    double value = valueStr.toDouble();\n\n    UnitInfo unitInfo = getUnitInfo(unitStr);\n    if (unitInfo == null) {\n        throw new IllegalArgumentException(\"Invalid timeout unit: \" + unitStr);\n    }\n\n    double ms = value * unitInfo.msMultiplier;\n    if (ms > MAX_TIMEOUT_MS) {\n        throw new IllegalArgumentException(\"Timeout exceeds maximum allowed value: \" + timeoutStr);\n    }\n\n    return (int) ms;\n}", "CodeBleu_score": 35.84800820332942}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t    if (timeoutStr.isBlank()) {\n        return DEFAULT_QUERY_TIMEOUT_MS;\n    }\n\n    // Parse the timeout string.\n    String[] parts = timeoutStr.split(\"\\\\s+\");\n    if (parts.length != 2) {\n        throw new IllegalArgumentException(String.format(\"Invalid timeout: %s\", timeoutStr));\n    }\n    String valueStr = parts[0];\n    String unitStr = parts[1];\n\n    // Convert the value to milliseconds.\n    long value;\n    try {\n        value = Long.parseLong(valueStr);\n    } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(String.format(\"Invalid timeout: %s\", timeoutStr));\n    }\n    TimeUnit unit = TimeUnit.valueOf(unitStr.toUpperCase());\n    long timeoutMs = TimeUnit.MILLISECONDS.convert(value, unit);\n\n    // Ensure the timeout does not exceed the maximum allowed.\n    if (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n        throw new IllegalArgumentException(String.format(\"Timeout exceeds maximum allowed: %s\", timeoutStr));\n    }\n\n    return (int) timeoutMs;\n}", "CodeBleu_score": 40.70507912337115}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t    return getBaseQuery(application)\n            .flatMap(query -> query.execute())\n            .map(ofError(toSet()))\n            .flatMap(datasourceIds -> {\n                if (datasourceIds.isEmpty()) {\n                    return Mono.error(new AppsmithException(AppsmithError.NO_RESOURCE_FOUND, FieldName.DATASOURCE, \"for application\"));\n                }\n                return Flux.fromIterable(datasourceIds)\n                        .flatMap(datasourceId -> doCopyDatasource(datasourceId, currentOrganizationId, visitorId))\n                        .collectList();\n            });\n}", "CodeBleu_score": 35.33216824684666}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t    return application.getLiveQueries()\n        .map(query -> query.getDatasourceId())\n        .collectList()\n        .flatMap(datasourceIds -> {\n            if (datasourceIds.isEmpty()) {\n                return Mono.error(new AppsmithException(AppsmithError.NO_RESOURCE_FOUND, FieldName.DATASOURCES, \" for application \" + application.getId()));\n            }\n\n            return Flux.fromIterable(datasourceIds)\n                .flatMap(datasourceId -> {\n                    return datasourceId != null\n                        ? Mono.zip(Mono.just(datasourceId), datasourceService.copyDatasource(datasourceId, currentOrganizationId, visitorId))\n                        : Mono.error(new AppsmithException(AppsmithError.INVALID_PARAMETER, FieldName.DATASOURCE_ID));\n                })\n                .collectList();\n        });\n}", "CodeBleu_score": 34.233442700347865}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t    return getBaseQuery(application.getId(), visitorId)\n            .doCopyDatasource(currentOrganizationId)\n            .collectList()\n            .flatMap(datasourceIds -> {\n                if (datasourceIds.isEmpty()) {\n                    return Mono.error(new AppsmithException(AppsmithError.NO_RESOURCE_FOUND, FieldName.DATASOURCE, \" for application \" + application.getName()));\n                }\n                return Flux.fromIterable(datasourceIds)\n                        .flatMap(datasourceId -> Mono.zip(Mono.just(datasourceId),\n                                newDatasourceRepository.findById(datasourceId, AclPermission.MANAGE_DATASOURCES)\n                                        .switchIfEmpty(Mono.error(new AppsmithException(AppsmithError.NO_RESOURCE_FOUND, FieldName.DATASOURCE, datasourceId)))\n                                        .flatMap(datasource -> datasourceService.copyDatasource(datasource, currentOrganizationId, currentUser)))\n                                .map(tuple -> new Pair<>(tuple.getT1(), tuple.getT2().getId())))\n                        .collectList();\n            });\n}", "CodeBleu_score": 33.57720734115335}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceRepository.findById(datasourceId)\n        .flatMap(datasource -> {\n            if (datasource.isSystemStatic()) {\n                return Mono.just(datasource.getId());\n            } else if (datasource.isLegacyQuickRestApi()) {\n                return Mono.just(datasource.getId());\n            } else if (datasource.isLegacyOpenblocksApi()) {\n                return Mono.just(datasource.getId());\n            } else {\n                return createNewDatasourceFrom(organizationId, visitorId, datasource);\n            }\n        });\n}", "CodeBleu_score": 60.07733234424117}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceService.getById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.isSystemStatic()) {\n                    return Mono.just(datasource.getId());\n                } else if (datasource.isLegacyQuickRestApi()) {\n                    return Mono.just(datasource.getId());\n                } else if (datasource.isLegacyOpenblocksApi()) {\n                    return Mono.just(datasource.getId());\n                } else {\n                    return datasourceService.createNewDatasourceFrom(organizationId, datasource, visitorId);\n                }\n            });\n}", "CodeBleu_score": 66.37551892344591}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return isSystemStatic(datasourceId)\n        .flatMap(isSystemStatic -> isSystemStatic ? Mono.just(datasourceId) : getById(datasourceId))\n        .flatMap(datasource -> isLegacyQuickRestApi(datasource) ? Mono.just(QUICK_REST_API_DATASOURCE_ID) : isLegacyOpenblocksApi(datasource) ? Mono.just(OPENBLOCKS_API_DATASOURCE_ID) : createNewDatasourceFrom(datasource, organizationId, visitorId));\n}", "CodeBleu_score": 34.0198590463247}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t    // Upload the new avatar\n    Mono<String> upload = filePart.content().map(dataBuffer -> {\n        return this.storageService.upload(dataBuffer, filePart.filename(), filePart.headers().getContentType());\n    }).flatMap(filePath -> {\n        // If the user already has a profile photo, remove the old one\n        if (this.getAvatar(user).isPresent()) {\n            return this.remove(this.getAvatar(user).get()).then(Mono.just(filePath));\n        }\n        return Mono.just(filePath);\n    });\n\n    // Update the user's profile with the new avatar\n    return upload.flatMap(filePath -> {\n        user.setAvatar(filePath);\n        return this.updateUserAvatar(user);\n    }).then(Mono.just(true));\n}", "CodeBleu_score": 43.45560232872444}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t    return filePart.transferTo(new File(filePart.filename()))\n        .flatMap(file -> {\n            if (user.getAvatar() != null) {\n                return remove(user.getAvatar())\n                    .then(upload(file))\n                    .flatMap(photo -> updateUserAvatar(user, photo.getId()))\n                    .defaultIfEmpty(false);\n            }\n            return upload(file)\n                .flatMap(photo -> updateUserAvatar(user, photo.getId()))\n                .defaultIfEmpty(false);\n        });\n}", "CodeBleu_score": 32.42545686104232}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t    return upload(filePart, user.getId().toString())\n        .defaultIfEmpty(getAvatar(user))\n        .flatMap(avatar -> {\n            user.setAvatar(avatar);\n            return updateUserAvatar(user)\n                .then(remove(getAvatar(user)));\n        })\n        .then(Mono.just(true))\n        .onErrorResume(e -> Mono.just(false));\n}", "CodeBleu_score": 26.542150676851094}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    User user = new User();\n    user.setName(authUser.getName());\n    user.setState(authUser.getState());\n    user.setIsEnabled(authUser.getIsEnabled());\n    user.setAvatar(authUser.getAvatar());\n    if (authUser.getSource().equals(\"email\") && authUser.getContext().containsKey(\"password\")) {\n        user.setPassword(encryptPassword(authUser.getContext().get(\"password\")));\n    }\n    user.setConnections(new HashSet<>(Collections.singletonList(toAuthConnection(authUser))));\n    user.setIsNewUser(true);\n    return create(user);\n}", "CodeBleu_score": 38.795776589139635}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    User user = new User();\n    user.setName(authUser.getName());\n    user.setState(authUser.getState());\n    user.setIsEnabled(authUser.isEnabled());\n    user.setTpAvatarLink(authUser.getAvatarLink());\n    if (authUser.getSource().equals(AuthSource.EMAIL) && authUser.getContext().containsKey(\"password\")) {\n        user.setPassword(encryptPassword(authUser.getContext().get(\"password\")));\n    }\n    user.setConnections(authUser.getConnections().stream().map(this::toAuthConnection).collect(Collectors.toSet()));\n    user.setIsNewUser(true);\n    return user.create();\n}", "CodeBleu_score": 39.930286566691144}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    User user = new User();\n    user.setName(authUser.getName());\n    user.setState(authUser.getState());\n    user.setIsEnabled(authUser.getIsEnabled());\n    user.setTpAvatarLink(authUser.getAvatar());\n    if (authUser.getSource().equals(AuthSource.email) && authUser.getContext().containsKey(\"password\")) {\n        user.setPassword(encryptPassword(authUser.getContext().get(\"password\")));\n    }\n    user.setConnections(authUser.getConnections().stream().map(this::toAuthConnection).collect(Collectors.toSet()));\n    user.setIsNewUser(true);\n    return create(user);\n}", "CodeBleu_score": 41.76205952038605}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return Mono.just(new Connection.Builder(emailSource)\n            .setUserId(user.getId())\n            .setProviderUserId(email)\n            .setDisplayName(email)\n            .build())\n            .flatMap(connection -> user.getConnections()\n                    .add(connection)\n                    .then(Mono.just(true))\n                    .onErrorResume(DuplicateKeyException.class, e -> Mono.just(false)))\n            .flatMap(success -> success ? user.save() : Mono.error(new DuplicateKeyException(\"Email already bound to another user\")))\n            .onErrorResume(e -> Mono.error(new RuntimeException(\"Failed to bind email\", e)));\n}", "CodeBleu_score": 33.26485924585859}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return Mono.just(new Connection(new ConnectionKey(email, \"email\"), new ConnectionData(email)))\n        .flatMap(connection -> user.addConnection(connection))\n        .then(Mono.just(true))\n        .onErrorResume(DuplicateKeyException.class, error -> Mono.just(false))\n        .onErrorResume(error -> Mono.error(error));\n}", "CodeBleu_score": 20.978281019782962}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return source.findById(email)\n            .switchIfEmpty(source.save(new Email(email)))\n            .map(emailSource -> new Connection(emailSource, user.getId()))\n            .flatMap(connection -> {\n                user.add(connection);\n                return user.save();\n            })\n            .then(Mono.just(true))\n            .onErrorResume(DuplicateKeyException.class, e -> Mono.just(false))\n            .onErrorResume(e -> Mono.error(e));\n}", "CodeBleu_score": 30.816834905595314}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return userRepository.findById(userId)\n        .flatMap(user -> {\n            if (user.matchPassword(oldPassword)) {\n                user.setPassword(encryptPassword(newPassword));\n                return userRepository.save(user).thenReturn(true);\n            }\n            return Mono.error(new Exception(\"Invalid Password\"));\n        })\n        .onErrorResume(error -> Mono.just(false));\n}", "CodeBleu_score": 21.809783346394198}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return findById(userId)\n        .flatMap(user -> {\n            if (user.matchPassword(oldPassword)) {\n                user.setPassword(encryptPassword(newPassword));\n                return repository.save(user).thenReturn(true);\n            } else {\n                return Mono.error(new AppException(\"Invalid Password\", 400));\n            }\n        });\n}", "CodeBleu_score": 19.11750134437444}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return userRepository.findById(userId)\n        .flatMap(user -> {\n            if (user.getPassword().equals(encryptPassword(oldPassword))) {\n                user.setPassword(encryptPassword(newPassword));\n                return userRepository.save(user).thenReturn(true);\n            } else {\n                return Mono.error(new IllegalArgumentException(\"Invalid Password\"));\n            }\n        });\n}", "CodeBleu_score": 23.52401265141148}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t    return getUserGroupIdsInOrg(userId, orgMember.getOrganizationId())\n            .flatMapMany(groupIds -> getByIds(groupIds, locale))\n            .filter(userGroup -> !isAllUsersGroup(userGroup))\n            .map(userGroup -> Map.of(\n                    \"id\", userGroup.getId(),\n                    \"name\", userGroup.getName()))\n            .collectList();\n}", "CodeBleu_score": 21.723535846227453}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t    return getUserGroupIdsInOrg(userId, orgMember.getOrgId())\n            .flatMapMany(groupIds -> getByIds(groupIds, locale))\n            .filter(group -> !isAllUsersGroup(group))\n            .map(group -> {\n                Map<String, String> groupMap = new HashMap<>();\n                groupMap.put(\"id\", group.getId());\n                groupMap.put(\"name\", group.getName());\n                return groupMap;\n            })\n            .collectList();\n}", "CodeBleu_score": 27.589641904867392}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t        return getUserGroupIdsInOrg(userId, orgMember.getOrgId())\n                .flatMapMany(groupIds -> getByIds(groupIds, locale))\n                .filter(group -> !isAllUsersGroup(group))\n                .filter(group -> !withoutDynamicGroups || !isDynamicGroup(group))\n                .map(group -> Map.of(\"id\", group.getId(), \"name\", group.getName()))\n                .collectList();\n}", "CodeBleu_score": 24.163913989514356}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    UserStatus userStatus = new UserStatus(userId, true);\n    return mongoUpsertHelper(userStatus, userStatus.getId());\n}", "CodeBleu_score": 31.84349798649157}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    UserStatus userStatus = new UserStatus(userId, true);\n    return mongoUpsertHelper(userStatus, UserStatus.class);\n}", "CodeBleu_score": 28.124539404240206}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    UserStatus userStatus = new UserStatus();\n    userStatus.setId(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n\n    return mongoUpsertHelper(userStatus, UserStatus.class);\n}", "CodeBleu_score": 36.305496020981565}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\n\tvar wg sync.WaitGroup\n\twg.Add(len(c.partitions))\n\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.Name(), p) {\n\t\t\tgo func(p PartitionManager) {\n\t\t\t\tdefer wg.Done()\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t}(p)\n\t\t}\n\t}\n\n\twg.Wait()\n}", "CodeBleu_score": 37.66803988434482}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition is nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue is nil\")\n\t}\n\n\tvar g rungroup.RunGroup\n\tvar len int64\n\tc.partition.Range(func(k, v any) bool {\n\t\tif predicatePartition(k.(string), v.(PartitionManager)) {\n\t\t\tlen++\n\t\t\tg.Enqueue(func() {\n\t\t\t\tv.(PartitionManager).clearMatching(predicateValue)\n\t\t\t})\n\t\t}\n\t\treturn true\n\t})\n\tif len > 0 {\n\t\tg.Run(context.Background())\n\t}\n\tg.Wait()\n}", "CodeBleu_score": 38.001478253294955}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\n\t// Create a run group to handle clearing matching entries across multiple partitions concurrently.\n\tvar wg sync.WaitGroup\n\twg.Add(len(c.partitions))\n\tfor k, p := range c.partitions {\n\t\tif predicatePartition(k, p) {\n\t\t\tgo func(k string, p PartitionManager) {\n\t\t\t\tdefer wg.Done()\n\t\t\t\tp.clearMatching(predicateValue)\n\t\t\t}(k, p)\n\t\t}\n\t}\n\twg.Wait()\n}", "CodeBleu_score": 43.04933116197296}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\tpanic(\"number of partitions and total weight quantity must be greater than zero\")\n\t}\n\n\tavgWeightPerPartition := math.Floor(float64(totalWeightQuantity) / float64(numPartitions))\n\n\treturn int(avgWeightPerPartition)\n}", "CodeBleu_score": 41.10462939917051}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 {\n\t\tpanic(\"The number of partitions must be greater than zero.\")\n\t}\n\tif totalWeightQuantity <= 0 {\n\t\tpanic(\"The total weight quantity must be greater than zero.\")\n\t}\n\taverageWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\treturn int(math.Floor(averageWeightPerPartition))\n}", "CodeBleu_score": 57.05247689512498}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\tpanic(\"number of partitions and total weight quantity must be greater than zero\")\n\t}\n\n\t// average weight per partition\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\n\t// maximum size per partition\n\tmaxSizePerPartition := math.Floor(avgWeightPerPartition)\n\n\treturn int(maxSizePerPartition)\n}", "CodeBleu_score": 49.07052203120318}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\t    Map<String, Object> map = new HashMap<String, Object>();\n    Map<String, Object> metadata = getConnectionMetadata();\n    if (metadata != null) {\n        map.put(\"contributor\", metadata.get(\"databaseProductName\") + \" \" + metadata.get(\"databaseProductVersion\"));\n    }\n    return map;\n}", "CodeBleu_score": 47.01504090243615}, {"code": "public Map<String, Object> contributorMap(){\n\t    Map<String, Object> map = new HashMap<>();\n    Map<String, Object> metadata = getConnectionMetadata();\n    if (metadata != null) {\n        map.put(\"databaseProductName\", getDatabaseProductName());\n        map.put(\"databaseVersion\", getDatabaseVersion());\n    }\n    return map;\n}", "CodeBleu_score": 38.65239329277345}, {"code": "public Map<String, Object> contributorMap(){\n\t    Map<String, Object> contributorMap = new HashMap<String, Object>();\n    Map<String, Object> connectionMetadata = getConnectionMetadata();\n    if (connectionMetadata != null) {\n        contributorMap.put(\"databaseProductName\", getDatabaseProductName(connectionMetadata));\n        contributorMap.put(\"databaseVersion\", getDatabaseVersion(connectionMetadata));\n    }\n    return contributorMap;\n}", "CodeBleu_score": 46.698711634690774}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    def userSetting = configMap.get(\"user_setting\")\n    if (userSetting == null) {\n        info.setAllowRegistration(false)\n        info.setMustVerifyEmailOnRegistration(false)\n    } else {\n        info.setAllowRegistration(userSetting.get(\"allow_registration\").asBoolean())\n        info.setMustVerifyEmailOnRegistration(userSetting.get(\"must_verify_email_on_registration\").asBoolean())\n    }\n}", "CodeBleu_score": 42.35300082830033}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    def userSetting = configMap.get(USER_SETTING_KEY)\n    if (userSetting == null) {\n        info.setAllowRegistration(false)\n        info.setMustVerifyEmailOnRegistration(false)\n    } else {\n        info.setAllowRegistration(userSetting.get(ALLOW_REGISTRATION_KEY))\n        info.setMustVerifyEmailOnRegistration(userSetting.get(MUST_VERIFY_EMAIL_ON_REGISTRATION_KEY))\n    }\n}", "CodeBleu_score": 37.11714074059953}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    def userSettings = configMap.get(\"userSettings\")\n    if (userSettings == null) {\n        info.setMustVerifyEmailOnRegistration(false)\n        info.setAllowRegistration(false)\n    } else {\n        info.setMustVerifyEmailOnRegistration(userSettings.get(\"mustVerifyEmailOnRegistration\"))\n        info.setAllowRegistration(userSettings.get(\"allowRegistration\"))\n    }\n}", "CodeBleu_score": 35.54092283724587}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\t    ThreadGroup tg = new ThreadGroup(\"restart\");\n    Thread t = new Thread(tg, \"restart\", this, tg.getContextClassLoader());\n    t.setDaemon(false);\n    t.start();\n    return \"Restarting application...\";\n}", "CodeBleu_score": 45.99869469156354}, {"code": "public Object restart(){\n\t    if (isRunning()) {\n        return \"Application is already running.\"\n    }\n\n    ThreadGroup threadGroup = new ThreadGroup(\"RestartThreadGroup\")\n    Thread thread = new Thread(threadGroup, \"RestartThread\", {\n        Thread.start {\n            try {\n                start()\n            } catch (Throwable t) {\n                t.printStackTrace()\n            }\n        }\n    } as Runnable)\n\n    thread.setContextClassLoader(getClassLoader())\n    thread.setDaemon(false)\n    thread.start()\n\n    return \"Application restart has begun...\"\n}", "CodeBleu_score": 42.94961176156451}, {"code": "public Object restart(){\n\t    Thread thread = new Thread(new Runnable() {\n        public void run() {\n            try {\n                // Create a new class loader and assign it to the current thread\n                ClassLoader classLoader = getClassLoader();\n                Thread.currentThread().setContextClassLoader(classLoader);\n\n                // Create a new thread group and assign it to the current thread\n                ThreadGroup threadGroup = new ThreadGroup(Thread.currentThread().getThreadGroup(), \"RestartGroup\");\n                Thread.currentThread().setThreadGroup(threadGroup);\n\n                // Create a new thread and assign it to the current thread\n                Thread thread = new Thread(threadGroup, \"RestartThread\");\n                thread.setDaemon(false);\n                thread.setContextClassLoader(classLoader);\n                thread.setPriority(Thread.NORM_PRIORITY);\n\n                // Create a new class loader and assign it to the new thread\n                ClassLoader classLoader = getClassLoader();\n                thread.setContextClassLoader(classLoader);\n\n                // Create a new thread group and assign it to the new thread\n                ThreadGroup threadGroup = new ThreadGroup(Thread.currentThread().getThreadGroup(), \"RestartGroup\");\n                thread.setThreadGroup(threadGroup);\n\n                // Create a new thread and assign it to the new thread\n                Thread thread = new Thread(threadGroup, \"RestartThread\");\n                thread.setDaemon(false);\n                thread.setContextClassLoader(classLoader);\n                thread.setPriority(Thread.NORM_PRIORITY);\n\n                // Start the new thread and return\n                thread.start();\n                return \"Restarting...\";\n            } catch (Exception e) {\n                return e.getMessage();\n            }\n        }\n    });\n    thread.setDaemon(false);\n    thread.setContextClassLoader(getClassLoader());\n    thread.setPriority(Thread.NORM_PRIORITY);\n    thread.start();\n    return \"Restarting...\";\n}", "CodeBleu_score": 37.959039355318076}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t    ObjectMapper mapper = new ObjectMapper();\n    mapper.registerModule(new JavaTimeModule());\n    mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n    configurer.defaultCodecs().jackson2JsonEncoder(mapper);\n    configurer.defaultCodecs().jackson2JsonDecoder(mapper);\n}", "CodeBleu_score": 34.18860991335975}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t    configurer.defaultCodecs().jackson2JsonEncoder(new ObjectMapper());\n    configurer.defaultCodecs().jackson2JsonDecoder(new ObjectMapper());\n}", "CodeBleu_score": 40.71079799186007}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t    configurer.defaultCodecs().jackson2JsonEncoder(new ObjectMapper());\n}", "CodeBleu_score": 15.53910856918847}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t    return route(GET(\"/console/**\")\n            .and(accept(MediaType.TEXT_HTML))\n            .and(not(method(HttpMethod.WS))),\n            this::serveIndex);\n}", "CodeBleu_score": 16.93318515686216}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t\treturn route(GET(\"/console/**\")\n\t\t\t.and(accept(MediaType.TEXT_HTML))\n\t\t\t.and(negate(request -> request.getHeaders().containsKey(\"Sec-WebSocket-Key\")))\n\t\t\t.and(negate(request -> request.getPath().value().contains(\"/console/assets/\"))),\n\t\t\tthis::serveIndex);\n}", "CodeBleu_score": 26.477033241675613}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t    return route(\n        GET(\"/console/**\")\n            .and(accept(MediaType.TEXT_HTML))\n            .and(not(method(HttpMethod.WS))),\n        consoleIndex()\n    );\n}", "CodeBleu_score": 20.766816021045255}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t    return RouterFunctions.route(\n            RequestPredicates.GET(\"/uc/**\")\n                    .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n                    .and(RequestPredicates.not(RequestPredicates.path(\"/uc/assets/**\")))\n                    .and(RequestPredicates.not(RequestPredicates.method(HttpMethod.WS))),\n            request -> {\n                String location = request.getPath().value();\n                if (location.endsWith(\"/\")) {\n                    location = location + \"index.html\";\n                } else if (!location.endsWith(\".html\")) {\n                    location = location + \"/index.html\";\n                }\n                return ServerResponse.temporaryRedirect(URI.create(\"/uc/assets/\" + location)).build();\n            }\n    );\n}", "CodeBleu_score": 26.33574768078232}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t    return RouterFunctions.route(\n        RequestPredicates.GET(\"/uc/**\")\n            .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n            .and(RequestPredicates.not(RequestPredicates.webSocket())),\n        new HandlerFunction<ServerResponse>() {\n            @Override\n            public Mono<ServerResponse> handle(ServerRequest request) {\n                return ServerResponse.temporaryRedirect(URI.create(\"/uc/index.html\")).build();\n            }\n        }\n    );\n}", "CodeBleu_score": 22.36206712554372}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t    return RouterFunctions.route(\n        RequestPredicates.GET(\"/uc/**\")\n            .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n            .and(RequestPredicates.not(RequestPredicates.headers(headers -> headers.containsKey(\"Sec-WebSocket-Key\"))))\n            .and(RequestPredicates.not(RequestPredicates.path(\"/uc/assets/**\"))),\n        request -> {\n            String path = request.path().value();\n            String ucPath = path.substring(0, path.indexOf(\"/uc/\") + 4);\n            return ServerResponse.temporaryRedirect(URI.create(ucPath + \"/index.html\")).build();\n        }\n    );\n}", "CodeBleu_score": 33.76196517472684}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\tReactiveIndexedSessionRepository<MapSession> repository = new ReactiveIndexedSessionRepository<MapSession>(new ConcurrentHashMap<>());\n\trepository.setDefaultMaxInactiveInterval(getSessionTimeout());\n\treturn repository;\n}", "CodeBleu_score": 29.317220306572434}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    return new ReactiveIndexedSessionRepository<>(new ConcurrentHashMap<>());\n}", "CodeBleu_score": 10.544893524090165}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\tReactiveIndexedSessionRepository<MapSession> repository = new ReactiveIndexedSessionRepository<>(new ConcurrentHashMap<>());\n\trepository.setDefaultMaxInactiveInterval(getSessionTimeout());\n\treturn repository;\n}", "CodeBleu_score": 27.46086197704567}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\n    DefaultUserDetailService service = new DefaultUserDetailService(userService, roleService);\n    service.setDisabled(haloProperties.getSecurity().isDisabled());\n    service.setTwoFactorAuthEnabled(haloProperties.getSecurity().getTwoFactorAuth());\n    service.setTwoFactorAuthDisabled(haloProperties.getSecurity().isTwoFactorAuthDisabled());\n    return service;\n}", "CodeBleu_score": 47.24477308195368}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\n    DefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService)\n\n    if (haloProperties.getSecurity().isDisabled()) {\n        userDetailsService.setTwoFactorAuthDisabled()\n    } else {\n        if (haloProperties.getSecurity().getTwoFactorAuth().isEnabled()) {\n            userDetailsService.setTwoFactorAuthEnabled()\n        } else {\n            userDetailsService.setTwoFactorAuthDisabled()\n        }\n    }\n\n    return userDetailsService\n}", "CodeBleu_score": 36.831154978141996}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    DefaultUserDetailService userDetailService = new DefaultUserDetailService(userService, roleService);\n    userDetailService.setTwoFactorAuthDisabled(!haloProperties.isTwoFactorAuthEnabled());\n    return userDetailService;\n}", "CodeBleu_score": 48.84580710894395}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\t  Comment.CommentOwner commentOwner = new Comment.CommentOwner();\n  commentOwner.setKind(\"email\");\n  commentOwner.setDisplayName(this.getDisplayName());\n  commentOwner.setAnnotations(new HashMap<String, String>());\n  commentOwner.getAnnotations().put(\"email\", this.getEmail() != null ? this.getEmail() : \"\");\n  commentOwner.getAnnotations().put(\"website\", this.getWebsite() != null ? this.getWebsite() : \"\");\n  return commentOwner;\n}", "CodeBleu_score": 42.58100563584409}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t  Comment.CommentOwner commentOwner = new Comment.CommentOwner();\n  commentOwner.setKind(\"email\");\n  commentOwner.setDisplayName(this.getDisplayName());\n  commentOwner.setEmail(this.getEmail());\n  commentOwner.setAvatarUrl(this.getAvatarUrl());\n  commentOwner.setWebsiteUrl(this.getWebsiteUrl());\n  return commentOwner;\n}", "CodeBleu_score": 33.090689898611224}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t    Comment.CommentOwner owner = new Comment.CommentOwner();\n    owner.setKind(\"email\");\n    owner.setDisplayName(getDisplayName());\n    owner.setAnnotations(new HashMap<String,String>());\n    owner.getAnnotations().put(\"avatar\", getAvatar());\n    owner.getAnnotations().put(\"website\", getWebsite());\n    return owner;\n}", "CodeBleu_score": 31.70228804755442}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t  String postOwnerKind = post.getOwner().getKind();\n  String postOwnerName = post.getOwner().getName();\n  String commentOwnerKind = commentOwner.getKind();\n  String commentOwnerName = commentOwner.getName();\n\n  if (postOwnerKind.equals(\"email\")) {\n    User user = User.getUser(postOwnerName);\n    return user.getEmail().equals(commentOwnerName);\n  } else {\n    return postOwnerName.equals(commentOwnerName);\n  }\n}", "CodeBleu_score": 45.31810761137615}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t  if (commentOwner.getKind() == \"email\") {\n    User postOwner = User.getUser(commentOwner.getName());\n    return postOwner.getEmail() == post.getOwner().getEmail();\n  } else {\n    return commentOwner.getName() == post.getOwner().getName();\n  }\n}", "CodeBleu_score": 30.434002629008738}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t  if (commentOwner.getKind() == \"email\") {\n    User user = User.fetch(post.getOwner());\n    return commentOwner.getEmail().equals(user.getEmail());\n  }\n  return commentOwner.getName().equals(post.getOwner());\n}", "CodeBleu_score": 28.45300350731733}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\t    ListOptions listOptions = new ListOptions();\n    String fieldQuery = labelAndFieldSelectorToListOptions(listOptions);\n    if (isNotBlank(getKeyword())) {\n        fieldQuery = and(fieldQuery, contains(getFieldSelector(), getKeyword()));\n    }\n    if (isNotBlank(getOwnerName())) {\n        fieldQuery = and(fieldQuery, equal(getFieldSelector(), getOwnerKind(), getOwnerName()));\n    }\n    setFieldSelector(fieldQuery);\n    return listOptions;\n}", "CodeBleu_score": 31.80486391602181}, {"code": "public ListOptions toListOptions(){\n\t    ListOptions listOptions = new ListOptions();\n    String fieldQuery = labelAndFieldSelectorToListOptions(getLabelSelector(), getFieldSelector());\n\n    if (isNotBlank(getKeyword())) {\n        fieldQuery = addCondition(fieldQuery, \"name\", getKeyword());\n    }\n\n    if (isNotBlank(getOwnerName())) {\n        fieldQuery = addCondition(fieldQuery, \"owner\", getOwnerName());\n    }\n\n    listOptions.setFieldSelector(fieldQuery);\n    return listOptions;\n}", "CodeBleu_score": 31.049768895807688}, {"code": "public ListOptions toListOptions(){\n\t    ListOptions listOptions = new ListOptions();\n    listOptions.setLabelSelector(getLabelSelector());\n    listOptions.setFieldSelector(getFieldSelector());\n    return listOptions;\n}", "CodeBleu_score": 9.060374447994093}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    return Mono.just(commentName)\n        .filter(name -> name != null)\n        .flatMap(name -> getByName(name))\n        .map(counter -> new CommentStats(commentName, getUpvote(counter)))\n        .defaultIfEmpty(new CommentStats(commentName, 0));\n}", "CodeBleu_score": 34.19252521883314}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t  return Mono.just(commentName)\n    .filter(Objects::nonNull)\n    .flatMap(name -> commentCounter.getByName(name))\n    .map(upvote -> new CommentStats(commentName, upvote))\n    .defaultIfEmpty(new CommentStats(commentName, 0));\n}", "CodeBleu_score": 31.880098773478437}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    return Mono.justOrEmpty(commentName)\n        .map(name -> new CommentStats(name, counterService.getUpvote(name)))\n        .defaultIfEmpty(new CommentStats(commentName, 0));\n}", "CodeBleu_score": 29.147593498228648}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\t    Subscriber subscriber = createSubscriber(identity);\n    setReasonType(subscriber, \"someone replied to you\");\n    setExpression(subscriber, \"repliedOwner == \\\"\" + identity.name + \"\\\"\");\n    subscribe(subscriber);\n    block();\n}", "CodeBleu_score": 24.09211630962177}, {"code": "void subscribeReply(UserIdentity identity){\n\t  Subscriber subscriber = createSubscriber(identity);\n  setReasonType(subscriber, \"someone replied to you\");\n  setExpression(subscriber, \"repliedOwner\", \"=\", identity.name);\n  subscribe(subscriber);\n  block();\n}", "CodeBleu_score": 22.800982186132114}, {"code": "void subscribeReply(UserIdentity identity){\n\t    Subscriber subscriber = createSubscriber(identity);\n    setReasonType(subscriber, \"someone replied to you\");\n    setExpression(subscriber, \"repliedOwner == $name\");\n    subscribe(subscriber);\n    block();\n}", "CodeBleu_score": 22.305857109110015}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\t    return client.update(comment.getId(),\n        update -> update.setApproved(true).setApprovedTime(now()),\n        Comment.class)\n        .onErrorResume(err -> {\n            if (err instanceof OptimisticLockingFailureException) {\n                return getComment(comment.getId())\n                    .flatMap(c -> approveComment(c));\n            }\n            return Mono.error(err);\n        });\n}", "CodeBleu_score": 32.213426390942004}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t    return updateCommentWithRetry(comment, comment.toBuilder().approved(true).approvedTime(now()).build());\n}", "CodeBleu_score": 12.23750000912557}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t    return updateCommentWithRetry(comment, c -> c.setApproved(true).setApprovedTime(now()));\n}", "CodeBleu_score": 8.851973625181058}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->mount($this->getLivewire());\n    }\n\n    if ($this->getRecord() && $action instanceof HasRecord) {\n        $action->record($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 66.17296268190124}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->mount($this->getLivewire());\n    }\n\n    if ($this->getRecord() && $action instanceof HasRecord) {\n        $action->record($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 66.17296268190124}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->mount($this->getLivewire());\n    }\n\n    if ($this->getRecord() && $action instanceof HasRecord) {\n        $action->setRecord($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 63.52187743935036}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    $url = $this->evaluate($this->successRedirect);\n    if (!empty($url)) {\n        $this->redirect($url);\n    }\n    return $this;\n}", "CodeBleu_score": 79.6281484942464}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    $this->evaluate();\n    if (!empty($this->successRedirect)) {\n        $this->redirect($this->successRedirect);\n    }\n    return $this;\n}", "CodeBleu_score": 37.51008722570407}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    $this->evaluate();\n    $this->redirect();\n    return $this;\n}", "CodeBleu_score": 20.14030754951131}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if (! $record?->exists() ?? true) {\n        return;\n    }\n\n    if (! method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagClassName = config('tags.model');\n\n    $tags = collect($state)->map(function ($tagName) use ($tagClassName) {\n        $locale = $tagClassName::getLocale();\n\n        $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n        if ($tag?->isEmpty() ?? true) {\n            $tag = $tagClassName::create([\n                'name' => [$locale => $tagName],\n            ]);\n        }\n\n        return $tag;\n    })->flatten();\n\n    $record->tags()->sync($tags->pluck('id'));\n}", "CodeBleu_score": 79.99915706311027}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if (!$record || !method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagClassName = config('tags.models.tag');\n\n    $tags = collect($state)->map(function ($tagName) use ($tagClassName) {\n        $locale = $tagClassName::getLocale();\n\n        $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n        if ($tag?->isEmpty() ?? true) {\n            $tag = $tagClassName::create([\n                'name' => [$locale => $tagName],\n            ]);\n        }\n\n        return $tag;\n    })->flatten();\n\n    $record->tags()->sync($tags);\n}", "CodeBleu_score": 78.1188677330061}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if (!$record?->exists() || !method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagClassName = config('tags.model');\n\n    $tags = collect($state)->map(function ($tagName) use ($tagClassName) {\n        $locale = $tagClassName::getLocale();\n\n        $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n        if ($tag?->isEmpty() ?? true) {\n            $tag = $tagClassName::create([\n                'name' => [$locale => $tagName],\n            ]);\n        }\n\n        return $tag;\n    })->flatten();\n\n    $record->tags()->sync($tags);\n}", "CodeBleu_score": 77.83103945099047}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\n\t// dissect the repository path to obtain the space path and repository name\n\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// create a scope for the pipeline\n\tscope := authz.NewScope(spacePath, repoName, pipelineIdentifier)\n\n\t// create a resource for the pipeline\n\tresource := authz.NewResource(enum.PipelineArnPrefix, spacePath, repoName, pipelineIdentifier)\n\n\t// check if the user has the required permission for the pipeline\n\terr = authorizer.Check(ctx, session, scope, resource, permission)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 55.32781995915287}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\n\t// dissect the repository path to obtain the space path and repository name\n\tspacePath, repoName, err := paths.DissectLeaf(repoPath)\n\tif err != nil {\n\t\treturn errors.New(\"Failed to dissect repository path \" + repoPath + \". Error: \" + err.Error())\n\t}\n\n\t// create a scope and resource for the pipeline\n\tscope := auth.Scope{\n\t\tType: auth.Org,\n\t\tID:   spacePath,\n\t}\n\tresource := auth.Resource{\n\t\tType: auth.Pipeline,\n\t\tName: pipelineIdentifier,\n\t}\n\n\t// call the Check function with the context, authorizer, session, scope, resource, and permission to perform the authorization check\n\terr = authorizer.Check(ctx, session, scope, resource, permission)\n\tif err != nil {\n\t\treturn errors.New(\"Failed to authorize the request. Error: \" + err.Error())\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 60.30139751167793}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// dissect the repository path to obtain the space path and repository name\n\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// create a scope and resource for the pipeline\n\tscope := authz.NewScope(spacePath, \"pipelines\", \"pipeline\", pipelineIdentifier)\n\tresource := authz.NewResource(spacePath, \"pipelines\", \"pipeline\", repoName, pipelineIdentifier)\n\n\t// call the Check function with the context, authorizer, session, scope, resource, and permission to perform the authorization check\n\terr = authorizer.Check(ctx, session, scope, resource, permission)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 56.417288419953906}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\t// Dissect the space path to get the parent space and name.\n\tparentPath, name := paths.DisectLeaf(space.Path)\n\n\t// Create a scope and resource based on the parent space and name.\n\tscope := authz.SpaceScope(parentPath)\n\tresource := authz.SpaceResource(name)\n\n\t// Call the Check function with the context, authorizer, session, scope, resource, and permission.\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 42.005886018674865}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\t// Dissect the space path to get the parent space and name.\n\tparent, name := paths.DisectLeaf(space.Path)\n\n\t// Create a scope and resource based on the parent space and name.\n\tscope := authz.SpaceScope(parent)\n\tresource := authz.SpaceResource(name)\n\n\t// Call the Check function with the context, authorizer, session, scope, resource, and permission.\n\treturn authz.Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 40.16876077301587}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\t// Disect the space path to get the parent space and name\n\tparentPath, name := paths.DisectLeaf(space.Path)\n\n\t// Create a scope and resource based on the parent space and name\n\tscope := authz.ScopeSpace(parentPath)\n\tresource := authz.ResourceSpace(parentPath, name)\n\n\t// Call the Check function with the context, authorizer, session, scope, resource, and permission\n\treturn Check(\n\t\tctx,\n\t\tauthorizer,\n\t\tsession,\n\t\tscope,\n\t\tresource,\n\t\tpermission,\n\t)\n}", "CodeBleu_score": 46.37033100030341}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\n\tvar payload any\n\tif err := decoder.Decode(&payload); err != nil {\n\t\treturn nil, err\n\t}\n\n\tencoder := json.NewEncoder(buffer.New())\n\tencoder.SetEscapeHTML(false)\n\tif err := encoder.Encode(payload); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn bytes.TrimRight(buffer.Bytes(), \"\n\"), nil\n}", "CodeBleu_score": 50.662013831054395}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tvar err error\n\t\tsource, err = json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\n\tvar sanitizedData any\n\tif err := decoder.Decode(&sanitizedData); err != nil {\n\t\treturn nil, err\n\t}\n\n\tbuffer := bytes.NewBuffer(nil)\n\tencoder := json.NewEncoder(buffer)\n\tencoder.SetEscapeHTML(false)\n\n\tif err := encoder.Encode(sanitizedData); err != nil {\n\t\treturn nil, err\n\t}\n\n\tsanitizedJSON := buffer.Bytes()\n\tif sanitizedJSON[len(sanitizedJSON)-1] == '\n' {\n\t\tsanitizedJSON = sanitizedJSON[:len(sanitizedJSON)-1]\n\t}\n\n\treturn sanitizedJSON, nil\n}", "CodeBleu_score": 59.86803288069489}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tvar tmp any\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\tif err := decoder.Decode(&tmp); err != nil {\n\t\treturn nil, err\n\t}\n\n\tbuffer := new(bytes.Buffer)\n\tencoder := json.NewEncoder(buffer)\n\tencoder.SetEscapeHTML(false)\n\tif err := encoder.Encode(tmp); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn bytes.TrimRight(buffer.Bytes(), \"\n\"), nil\n}", "CodeBleu_score": 52.53523662013498}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference.\n\trepoID, err := c.validateRepoRef(repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Fetch the repository.\n\trepo, err := c.repoStore.FindByID(ctx, repoID)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the user's permissions.\n\tif !session.Permissions.Has(reqPermission) {\n\t\treturn nil, usererror.New(\n\t\t\tfmt.Errorf(\"user does not have required permission\"),\n\t\t\tusererror.Unauthorized,\n\t\t\t\"User does not have the required permission to perform this action\",\n\t\t)\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 48.0841974865202}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference.\n\trepoID, err := c.validateRepoRef(repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Fetch the repository.\n\trepo, err := c.repoStore.FindByID(ctx, repoID)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the required permissions.\n\tif !session.Permissions.Has(reqPermission, repo.Visibility) {\n\t\treturn nil, usererror.NewFromError(\n\t\t\tfmt.Errorf(\"user does not have required permission\"),\n\t\t\tusererror.ErrUnauthorized,\n\t\t\t\"User does not have permission to access repository\",\n\t\t)\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 48.54553060522527}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference.\n\trepo, err := c.validateRepoRef(repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Fetch the repository.\n\trepo, err = c.repoStore.FindByID(ctx, repo.ID)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the access permissions.\n\tif err := c.authService.CheckAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 52.81079564336658}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tsanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\n\tsanitizers[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindMarkdown] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer()\n\n\treturn sanitizers\n}", "CodeBleu_score": 62.446156573879044}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tsanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\n\tsanitizers[enum.EmptyPayloadKind] = createEmptyPayloadSanitizer()\n\tsanitizers[enum.RawPayloadKind] = createRawPayloadSanitizer()\n\tsanitizers[enum.MarkdownPayloadKind] = createRawPayloadSanitizer()\n\tsanitizers[enum.PipelinePayloadKind] = createPipelinePayloadSanitizer()\n\n\treturn sanitizers\n}", "CodeBleu_score": 60.39661437509215}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tsanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\tsanitizers[enum.PayloadKindEmpty] = createEmptyPayloadSanitizer()\n\tsanitizers[enum.PayloadKindRaw] = createRawPayloadSanitizer()\n\tsanitizers[enum.PayloadKindMarkdown] = createRawPayloadSanitizer()\n\tsanitizers[enum.PayloadKindPipeline] = createPipelinePayloadSanitizer()\n\treturn sanitizers\n}", "CodeBleu_score": 60.97533634109754}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\t    self.state.on_render = on_render\n    if not self.state.attached then\n        self.state.renderer:attach_buffer(self)\n        self.state.attached = true\n    end\n    return self", "CodeBleu_score": 61.98126444501742}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t    if not self.state.renderer then\n        self.state.renderer = renderer\n        self.state.attached = true\n    end\n\n    self.state.on_render = on_render\n    return self", "CodeBleu_score": 53.307844399114515}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t    self.state.on_render = on_render\n    if not self.state.is_attached then\n        self.state.is_attached = true\n        self.renderer:attach_buffer(self)\n    end\n    return self", "CodeBleu_score": 59.582288960958486}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\t    if self:is_valid() then\n        if callback then\n            self.watcher:watch_file(self.filename, function()\n                callback()\n            end)\n        end\n    else\n        console.debug.error(\"Cannot watch buffer: invalid buffer\")\n    end", "CodeBleu_score": 35.97032942174927}, {"code": "function Buffer:watch(callback)\n\t\tif self:is_valid() and callback then\n\t\tlocal filename = self.filename\n\t\tif not filename then\n\t\t\treturn\n\t\tend\n\t\tself.watcher = uv.new_fs_poll()\n\t\tself.watcher:start(filename, 1000, function(err, filename)\n\t\t\tif err then\n\t\t\t\tconsole.debug.error(err)\n\t\t\t\treturn\n\t\t\tend\n\t\t\tcallback()\n\t\tend)\n\tend", "CodeBleu_score": 48.924469041245835}, {"code": "function Buffer:watch(callback)\n\t    if self:is_valid() and callback then\n        self.watcher = vim.loop.new_fs_event()\n        self.watcher:start(self.filename, {\n            interval = 100,\n            recursive = false,\n        }, function(err, filename)\n            if err then\n                console.debug.error(err)\n            end\n            if filename then\n                callback()\n            end\n        end)\n    end", "CodeBleu_score": 54.070952020260286}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\t  if self.hex then\n    return self.hex\n  end\n\n  local spec = self.spec\n  local attr = spec.fg and 'fg' or 'bg'\n  local color = spec[attr]\n\n  if type(color) == 'number' then\n    local hex = vim.fn.synIDattr(vim.fn.hlID(spec.name), 'fg#')\n    if hex then\n      self.hex = hex\n      return hex\n    end\n  end\n\n  local r, g, b = color:get_rgb()\n  local hex = bit.tohex(r, 2) .. bit.tohex(g, 2) .. bit.tohex(b, 2)\n  self.hex = hex\n  return hex", "CodeBleu_score": 57.33701162923756}, {"code": "function Color:to_hex()\n\t  if self.hex then return self.hex end\n  local color = self.color\n  local attr = self.attr\n  local gui = self.gui\n  local hex = ''\n  if attr == 'bg' then\n    hex = '#' .. vim.fn.synIDattr(vim.fn.hlID(color), 'bg#')\n  elseif attr == 'fg' then\n    hex = '#' .. vim.fn.synIDattr(vim.fn.hlID(color), 'fg#')\n  elseif gui then\n    hex = '#' .. vim.fn.synIDattr(vim.fn.hlID(color), 'gui#' .. gui)\n  end\n  self.hex = hex\n  return hex", "CodeBleu_score": 54.034952192666694}, {"code": "function Color:to_hex()\n\t  if self.hex then return self.hex end\n  local spec = self:get_spec()\n  local attr = spec.fg and 'fg' or 'bg'\n  local color = self.ui.hl[spec[attr]]\n  if color then\n    self.hex = color:to_hex()\n    return self.hex\n  end\n  return '000000'", "CodeBleu_score": 50.74827120776075}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t  local lines = buffer:get_lines(0, -1, false, false)\n  for i, line in ipairs(lines) do\n    for match in line:gmatch(pattern) do\n      local start_col, end_col = line:find(match, 1, true)\n      self:add_highlight(buffer, hl, i - 1, start_col - 1, end_col)\n    end\n  end\n  return self", "CodeBleu_score": 47.2395397860384}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t  local lines = buffer:get_lines(0, -1, false, true)\n  for i, line in ipairs(lines) do\n    local s, e = line:find(pattern)\n    if s then\n      self:add_highlight(buffer, hl, i - 1, s - 1, e)\n    end\n  end\n  return self", "CodeBleu_score": 44.501365323269724}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t  -- Retrieve the buffer's lines\n  local lines = buffer:get_lines(0, -1, true)\n  -- Iterate through each line\n  for i, line in ipairs(lines) do\n    -- Search for occurrences of the pattern\n    for s, e in line:gmatch(pattern) do\n      -- Apply the specified highlight to the buffer\n      buffer:add_highlight(self, i-1, s-1, e, hl)\n    end\n  end\n  -- Return the namespace object\n  return self", "CodeBleu_score": 37.300969131615716}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t    local id = row * 1000000 + col\n    vim.api.nvim_buf_set_extmark(buffer, self.namespace, id, row, col, {\n        virt_text = { { text, hl } },\n        virt_text_pos = pos,\n        priority = priority,\n    })\n    return id", "CodeBleu_score": 69.22061857815096}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t  -- The ID is a combination of the row, column, and text.\n  local id = string.format(\"%d:%d:%s\", row, col, text)\n  -- Set the extmark.\n  vim.api.nvim_buf_set_extmark(buffer, self.namespace, row, col, {\n    virt_text = { { text, hl } },\n    virt_text_pos = pos,\n    hl_mode = \"combine\",\n    priority = priority,\n  })\n  return id", "CodeBleu_score": 66.50037404081989}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t  local id = row .. ':' .. col\n  local opts = {\n    virt_text = {{text, hl}},\n    virt_text_pos = pos,\n    hl_mode = 'combine',\n    priority = priority,\n  }\n  vim.api.nvim_buf_set_extmark(buffer, self.namespace, id, row, col, opts)\n  return id", "CodeBleu_score": 63.761992344579355}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = ''\n\tfor i = 1, #output do\n\t\tlocal char = output:sub(i, i)\n\t\tif char == '", "CodeBleu_score": 22.187029572699466}, {"code": "function Spawn:parse_result(output, callback)\n\t    local line = \"\"\n    for char in output:gmatch(\".\") do\n        if char == \"", "CodeBleu_score": 7.975902955513646}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal lines = {}\n\tlocal line = \"\"\n\tfor i = 1, #output do\n\t\tlocal c = output:sub(i, i)\n\t\tif c == \"", "CodeBleu_score": 23.25031667260393}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t    if self.watchers[path] then\n        return self.watchers[path]\n    end\n\n    local watcher = vim.loop.new_fs_event()\n    vim.loop.fs_event_start(watcher, path, {\n        recursive = false,\n        stat = false,\n    }, vim.schedule_wrap(handler))\n\n    self.watchers[path] = watcher\n    return watcher", "CodeBleu_score": 59.66442708153732}, {"code": "function Watcher:watch_file(path, handler)\n\t    if not self.watchers[path] then\n        self.watchers[path] = vim.loop.new_fs_event()\n        vim.loop.fs_event_start(self.watchers[path], path, {\n            recursive = false\n        }, handler)\n    end\n    return self.watchers[path]", "CodeBleu_score": 56.64027003467336}, {"code": "function Watcher:watch_file(path, handler)\n\t    if self.watchers[path] then\n        return self.watchers[path]\n    end\n\n    local watcher = vim.loop.new_fs_event()\n    vim.loop.fs_event_start(watcher, path, {\n        recursive = false,\n        stat = false,\n        timeout = 1000,\n    }, vim.schedule_wrap(handler))\n\n    self.watchers[path] = watcher\n    return watcher", "CodeBleu_score": 57.966214259055015}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t    local bufnr = self.bufnr\n    local buftext = self.git_object:get_lines()\n    local hunks = self.git_object:process_hunks(buftext)\n    if type(hunks) == \"string\" then\n        return hunks\n    end\n    self:set_signs(hunks)\n    self:update_signs()\n    return hunks", "CodeBleu_score": 20.198294034818474}, {"code": "function GitBuffer:live_hunks()\n\t  local lines = self:get_lines()\n  local hunks, err = self.git_object:live_hunks(lines)\n  if err then\n    return err\n  end\n\n  local sign_ns = self.namespace:get_sign_ns_id()\n  for _, hunk in ipairs(hunks) do\n    for _, line in ipairs(hunk.lines) do\n      local sign = self:get_sign(line.type)\n      if sign then\n        vim.fn.sign_place(\n          0,\n          sign_ns,\n          sign.name,\n          self.file,\n          {\n            lnum = line.current_line,\n            priority = sign.priority\n          }\n        )\n      end\n    end\n  end\n\n  self.hunks = hunks\n  return hunks", "CodeBleu_score": 46.41231831944616}, {"code": "function GitBuffer:live_hunks()\n\t    local bufnr = self.bufnr\n    local bufname = self.name\n    local buf_lines = self:get_lines()\n    local git_object = self.git_object\n    local hunks, err = git_object:hunks(buf_lines)\n    if err then\n        return nil, err\n    end\n\n    local sign_ns = self.namespace:get_sign_ns_id()\n    local signs_setting = self.config.signs\n    local signs = {}\n\n    -- Set up signs for each hunk\n    for _, hunk in ipairs(hunks) do\n        local hunk_type = hunk.type\n        local hunk_start = hunk.start\n        local hunk_count = hunk.count\n        local hunk_priority = signs_setting:get(hunk_type).priority\n\n        -- Set up signs for each line in the hunk\n        for i = 1, hunk_count do\n            local line_num = hunk_start + i - 1\n            local sign_name = signs_setting:get(hunk_type).name\n            local sign_id = sign_ns .. line_num\n            signs[sign_id] = {\n                id = sign_id,\n                name = sign_name,\n                bufnr = bufnr,\n                lnum = line_num,\n                priority = hunk_priority\n            }\n        end\n    end\n\n    -- Update buffer signs\n    self.namespace:update_signs(signs)\n\n    return hunks", "CodeBleu_score": 47.09612603772623}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\t  local tmpname = fs.tmpname()\n  fs.write_file(tmpname, patch)\n  local _, err = self.git:stage_hunk_from_patch(tmpname)\n  fs.remove_file(tmpname)\n  return err", "CodeBleu_score": 51.50081578856439}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t  local tmpfile = fs.tmpname()\n  fs.write_file(tmpfile, patch)\n  local _, err = self.git:stage_hunk_from_patch(tmpfile)\n  fs.remove_file(tmpfile)\n  return err", "CodeBleu_score": 51.29678952793917}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t  local tmp_file = fs.tmpname()\n  fs.write_file(tmp_file, patch)\n  local success, err = self:stage_hunk_from_patch_file(tmp_file)\n  fs.remove_file(tmp_file)\n  return success, err", "CodeBleu_score": 45.947053358964936}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    OAuthRequest request = new OAuthRequest(getAccessTokenVerb(), getAccessTokenEndpoint());\n    request.addHeader(\"Authorization\", getHttpBasicAuthHeaderValue());\n    request.addBodyParameter(OAuthConstants.TOKEN, requestToken.getToken());\n    request.addBodyParameter(OAuthConstants.VERIFIER, verifier.getValue());\n    Response response = send(request);\n    return getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 53.52305176633314}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    // create the access token request\n    OAuthRequest request = new OAuthRequest(getAccessTokenVerb(), getAccessTokenEndpoint());\n    // add the token and verifier to the request\n    request.addParameter(OAuthConstants.TOKEN, requestToken.getToken());\n    request.addParameter(OAuthConstants.VERIFIER, verifier.getValue());\n    // add the consumer key and secret to the request\n    request.addOAuthParameter(OAuthConstants.CONSUMER_KEY, getApiKey());\n    request.addOAuthParameter(OAuthConstants.CONSUMER_SECRET, getApiSecret());\n    // sign the request\n    getService().signRequest(request);\n    // send the request\n    Response response = send(request);\n    // extract the access token from the response\n    return getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 50.00032069816673}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    String accessTokenEndpoint = getAccessTokenEndpoint();\n    HttpClient client = new DefaultHttpClient();\n    HttpUriRequest request = new HttpGet(accessTokenEndpoint);\n\n    try {\n        addHeader(request, getHttpBasicAuthHeaderValue());\n        addBodyParameter(request, getAccessTokenVerb(), requestToken.getToken());\n        addBodyParameter(request, OAuth.OAUTH_VERIFIER, verifier.getValue());\n        send(client, request);\n    } catch (Exception e) {\n        throw new OAuthException(\"Could not retrieve access token\", e);\n    }\n\n    return extract(client, request, getAccessTokenExtractor());\n}", "CodeBleu_score": 39.679092749486486}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    CredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(new AuthScope(host), credentials);\n    AuthCache authCache = new BasicAuthCache();\n    authCache.put(host, new BasicScheme());\n    context.setCredentialsProvider(credsProvider);\n    context.setAuthCache(authCache);\n    log.info(\"Added host \" + host + \" to auth cache\");\n}", "CodeBleu_score": 56.2448637220078}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    CredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), credentials);\n    AuthCache authCache = new BasicAuthCache();\n    authCache.put(host, new BasicScheme());\n    context.setCredentialsProvider(credsProvider);\n    context.setAuthCache(authCache);\n    log.info(\"Added host to authentication cache: \" + host);\n}", "CodeBleu_score": 68.68228301031836}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    CredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(\n        new AuthScope(host.getHostName(), host.getPort()),\n        new UsernamePasswordCredentials(this.username, this.password));\n    AuthCache authCache = new BasicAuthCache();\n    authCache.put(host, new BasicScheme());\n    context.setCredentialsProvider(credsProvider);\n    context.setAuthCache(authCache);\n    log.info(\"Added host to authentication context: \" + host);\n}", "CodeBleu_score": 65.57658539858284}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins jenkins = Jenkins.getInstance();\n    AvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache not available\");\n    }\n    String key = cache.hashKey(source);\n    cache.seed(key);\n    String url = jenkins.getRootUrlFromRequest();\n    if (url == null) {\n        throw new IllegalStateException(\"Jenkins root URL not available\");\n    }\n    try {\n        return url + \"avatar/\" + URLEncoder.encode(key, \"UTF-8\") + \"/\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding unsupported\", e);\n    }\n}", "CodeBleu_score": 53.86927904649487}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins jenkins = Jenkins.getInstance();\n    AvatarCache avatarCache = jenkins.getExtensionList(AvatarCache.class).get(0);\n    if (avatarCache == null) {\n        throw new IllegalStateException(\"AvatarCache not initialized\");\n    }\n    String key = avatarCache.getCacheKey(source);\n    avatarCache.seedCache(key);\n    String url = jenkins.getRootUrl() + avatarCache.getUrlName() + \"/\" + size + \"/\" + URLEncoder.encode(key, \"UTF-8\");\n    return url;\n}", "CodeBleu_score": 45.19835006597679}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins jenkins = Jenkins.getInstance();\n    AvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache is not configured\");\n    }\n    String key = cache.getCacheKey(source);\n    cache.seed(key, source);\n    String urlName = cache.getUrlName(key, size);\n    String rootUrl = jenkins.getRootUrl();\n    if (rootUrl == null) {\n        throw new IllegalStateException(\"Jenkins root URL is not configured\");\n    }\n    return rootUrl + urlName;\n}", "CodeBleu_score": 49.25595920245634}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    this.image = image;\n    this.lastModified = lastModified;\n    if (image.getWidth() > 128 || image.getHeight() > 128) {\n        this.image = scaleImage(image, 128, 128);\n    }\n    if (lastModified < 0) {\n        this.lastModified = System.currentTimeMillis();\n    }\n}", "CodeBleu_score": 55.717743786793065}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    this.image = image;\n    if (image.getWidth() > 128 || image.getHeight() > 128) {\n        this.image = scaleImage(image, 128, 128);\n    }\n    if (lastModified < 0) {\n        this.lastModified = System.currentTimeMillis();\n    } else {\n        this.lastModified = lastModified;\n    }\n}", "CodeBleu_score": 57.47103227771277}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    this.image = image;\n    if (image.getWidth() > 128 || image.getHeight() > 128) {\n        image = scaleImage(image, 128);\n    }\n    this.lastModified = (lastModified < 0) ? System.currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 56.28452399899473}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    try {\n        if (future.isDone()) {\n            cacheEntry = future.get();\n            lastModified = cacheEntry.getLastModified();\n            future = null;\n            return false;\n        }\n    } catch (InterruptedException | ExecutionException e) {\n        log.error(\"Error retrieving image\", e);\n        future = null;\n    }\n    return true;\n}", "CodeBleu_score": 48.918491772889396}, {"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    try {\n        Object result = future.get(0, TimeUnit.MILLISECONDS);\n        if (result instanceof Image) {\n            image = (Image) result;\n            lastModified = System.currentTimeMillis();\n        }\n        future = null;\n        return false;\n    } catch (InterruptedException e) {\n        return true;\n    } catch (ExecutionException e) {\n        return true;\n    } catch (TimeoutException e) {\n        return true;\n    }\n}", "CodeBleu_score": 50.36124344121053}, {"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    try {\n        if (future.isDone()) {\n            CacheEntry entry = future.get();\n            image = entry.getImage();\n            lastModified = entry.getLastModified();\n            future = null;\n        }\n    } catch (Exception e) {\n        future = null;\n    }\n    return future != null;\n}", "CodeBleu_score": 47.90596472667399}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PngGenerationService.generatePng(req, baos, node);\n\n    // Set the content type and content length\n    rsp.setContentType(\"image/png\");\n    rsp.setContentLength(baos.size());\n\n    // Set the caching headers\n    Calendar cal = new GregorianCalendar();\n    cal.add(Calendar.YEAR, 1);\n    rsp.addDateHeader(\"Expires\", cal.getTime().getTime());\n    rsp.addDateHeader(\"Last-Modified\", new Date().getTime());\n\n    // Write the image to the response output stream\n    OutputStream os = rsp.getOutputStream();\n    baos.writeTo(os);\n    os.flush();\n}", "CodeBleu_score": 46.45229716599746}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t    rsp.setContentType(\"image/png\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    createPng(req,baos);\n    rsp.setContentLength(baos.size());\n    if (req.checkIfModified(lastModified,baos)) {\n        // send the content\n        rsp.setContentType(\"image/png\");\n        rsp.addDateHeader(\"Last-Modified\",lastModified);\n        OutputStream os = rsp.getOutputStream();\n        try {\n            baos.writeTo(os);\n        } finally {\n            os.close();\n        }\n    }\n}", "CodeBleu_score": 46.53864184406535}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t    // Create a byte array output stream\n    ByteArrayOutputStream imgStream = new ByteArrayOutputStream();\n\n    // Create an image\n    BufferedImage bufferedImage = new BufferedImage(100, 100, BufferedImage.TYPE_INT_RGB);\n\n    // Get a graphics context\n    Graphics2D g = bufferedImage.createGraphics();\n\n    // Draw something\n    g.setColor(Color.BLUE);\n    g.fillRect(0, 0, 100, 100);\n\n    // Write to the byte array output stream\n    ImageIO.write(bufferedImage, \"png\", imgStream);\n\n    // Get the response output stream\n    OutputStream rspStream = rsp.getOutputStream();\n\n    // Generate a date header\n    rsp.addDateHeader(\"Expires\", System.currentTimeMillis() + 600000);\n\n    // Set the content type\n    rsp.setContentType(\"image/png\");\n\n    // Write the image to the response output stream\n    rspStream.write(imgStream.toByteArray());\n\n    // Flush the image if required\n    if (rspStream instanceof Flushable) {\n        ((Flushable) rspStream).flush();\n    }\n}", "CodeBleu_score": 45.1747952390946}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t\n    // Set up cache expiration for team and repositories if caching is enabled.\n    if (enableCache) {\n        setExpireDuration(teamCacheDuration, repositoriesCacheDuration);\n    }\n\n    // Configure an HTTP client with a keep-alive strategy, connection manager, and retry handler.\n    configureBuilder();\n\n    // If an authenticator is provided, configure the HTTP client and context for authentication.\n    if (authenticator != null) {\n        setAuthenticator(authenticator);\n    }\n\n    // Set client proxy parameters before building the HTTP client.\n    setClientProxyParams();\n\n    // Build the HTTP client.\n    build();\n\n    // Create the Bitbucket Cloud API client.\n    create(owner, projectKey, repositoryName);\n}", "CodeBleu_score": 15.929323489862874}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t    if (enableCache) {\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n    }\n\n    this.authenticator = authenticator;\n\n    configureContext();\n    setConnectionManager();\n    setClientProxyParams();\n    build();\n    convert();\n    setExpireDuration();\n    setConnectionManagerShared();\n    setRetryHandler();\n    setKeepAliveStrategy();\n    create();\n    configureBuilder();\n}", "CodeBleu_score": 21.580966856990578}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t    this.enableCache = enableCache;\n    this.teamCacheDuration = teamCacheDuration;\n    this.repositoriesCacheDuration = repositoriesCacheDuration;\n    this.owner = owner;\n    this.projectKey = projectKey;\n    this.repositoryName = repositoryName;\n    this.authenticator = authenticator;\n\n    configureContext();\n    setConnectionManager();\n    setClientProxyParams();\n    build();\n    convert();\n    setExpireDuration();\n    setConnectionManagerShared();\n    setRetryHandler();\n    setKeepAliveStrategy();\n    create();\n    configureBuilder();\n}", "CodeBleu_score": 29.172553127023747}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t  def sourceBranch = getSource(pullRequest)\n  if (sourceBranch != null) {\n    def sourceRawNode = getRawNode(sourceBranch)\n    if (sourceRawNode != null) {\n      setCommitClosure(sourceBranch, sourceRawNode)\n    }\n  }\n\n  def destinationBranch = getDestination(pullRequest)\n  if (destinationBranch != null) {\n    def destinationRawNode = getRawNode(destinationBranch)\n    if (destinationRawNode != null) {\n      setCommitClosure(destinationBranch, destinationRawNode)\n    }\n  }\n}", "CodeBleu_score": 27.559835658687927}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    getSource(pullRequest).ifPresent({ sourceBranch ->\n        setCommitClosure(sourceBranch, getRawNode(sourceBranch))\n    })\n    getDestination(pullRequest).ifPresent({ destinationBranch ->\n        setCommitClosure(destinationBranch, getRawNode(destinationBranch))\n    })\n}", "CodeBleu_score": 17.560331878260232}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    String sourceBranch = getSource(pullRequest)\n    String destinationBranch = getDestination(pullRequest)\n    String sourceBranchRawNode = getRawNode(sourceBranch)\n    String destinationBranchRawNode = getRawNode(destinationBranch)\n    if (sourceBranchRawNode != null) {\n        setCommitClosure(sourceBranchRawNode)\n    }\n    if (destinationBranchRawNode != null) {\n        setCommitClosure(destinationBranchRawNode)\n    }\n}", "CodeBleu_score": 28.969825816793794}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration jenkinsLocationConfiguration = JenkinsLocationConfiguration.get();\n    String rootUrl = jenkinsLocationConfiguration.getUrl();\n    if (rootUrl == null) {\n        throw new IllegalStateException(\"The root URL is null. This is unexpected.\");\n    }\n    return rootUrl;\n}", "CodeBleu_score": 52.25521400701787}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration config = JenkinsLocationConfiguration.get();\n    if (config == null) {\n        throw new IllegalStateException(\"JenkinsLocationConfiguration is null\");\n    }\n\n    URL url = config.getUrl();\n    if (url == null) {\n        throw new IllegalStateException(\"JenkinsLocationConfiguration URL is null\");\n    }\n\n    return DisplayURLProvider.get().getRoot();\n}", "CodeBleu_score": 51.802023788847066}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration globalConfig = JenkinsLocationConfiguration.get();\n    if (globalConfig == null) {\n        throw new IllegalStateException(\"JenkinsLocationConfiguration is null\");\n    }\n    String rootURL = globalConfig.getUrl();\n    if (rootURL == null) {\n        throw new IllegalStateException(\"JenkinsLocationConfiguration.getUrl() is null\");\n    }\n    return DisplayURLProvider.get().getRoot();\n}", "CodeBleu_score": 50.54850038029193}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    try {\n        URI uri = new URI(url);\n        if (uri.getHost() == null || uri.getHost().isEmpty()) {\n            throw new IllegalStateException(\"Jenkins URL is malformed. Host is empty.\")\n        }\n        if (uri.getHost().equals(\"localhost\") || uri.getHost().equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"Jenkins URL must not use 'localhost' or 'unconfigured-jenkins-location' as the host.\")\n        }\n        if (bitbucket.isBitbucketCloud()) {\n            if (!uri.getHost().contains(\".\")) {\n                throw new IllegalStateException(\"Jenkins URL must be fully qualified.\")\n            }\n        }\n        return url\n    } catch (URISyntaxException e) {\n        throw new IllegalStateException(\"Jenkins URL is malformed. ${e.getMessage()}\")\n    }\n}", "CodeBleu_score": 60.345055845312466}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    try {\n        URL u = new URL(url)\n        if (u.getHost().equals(\"localhost\") || u.getHost().equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"Jenkins URL must not be localhost or unconfigured-jenkins-location\")\n        }\n        if (bitbucket instanceof BitbucketCloudApi) {\n            if (!u.getHost().contains(\".\")) {\n                throw new IllegalStateException(\"Bitbucket Cloud URL must be fully qualified\")\n            }\n        }\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"Jenkins URL is malformed\")\n    }\n}", "CodeBleu_score": 54.32573515319721}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t  try {\n    URI uri = new URI(url)\n    if (!uri.isAbsolute()) {\n      throw new IllegalStateException(\"The given URL must be absolute.\")\n    }\n    if (uri.getHost() == null) {\n      throw new IllegalStateException(\"The given URL must contain a host.\")\n    }\n    if (uri.getHost().equals(\"unconfigured-jenkins-location\")) {\n      throw new IllegalStateException(\"The given URL must not contain \\\"unconfigured-jenkins-location\\\" as the host.\")\n    }\n    if (uri.getHost().equals(\"localhost\")) {\n      throw new IllegalStateException(\"The given URL must not contain \\\"localhost\\\" as the host.\")\n    }\n    if (bitbucket instanceof BitbucketCloudApi && !uri.getHost().contains(\".\")) {\n      throw new IllegalStateException(\"The given URL must be fully qualified.\")\n    }\n  } catch (URISyntaxException e) {\n    throw new IllegalStateException(\"The given URL is malformed.\")\n  }\n  return url\n}", "CodeBleu_score": 57.51625183727375}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t    final BitbucketBuildStatusNotifier.DescriptorImpl descriptor =\n            Jenkins.getInstance().getDescriptorByType(BitbucketBuildStatusNotifier.DescriptorImpl.class);\n\n    // Get the Bitbucket context\n    final BitbucketBuildStatusContext context = new BitbucketBuildStatusContext(build, listener, source);\n    if (context.notificationsDisabled()) {\n        listener.getLogger().println(\"Bitbucket build notifications are disabled\");\n        return;\n    }\n\n    // Get the revision\n    final SCMRevision revision = context.getRevision();\n    if (revision == null) {\n        listener.getLogger().println(\"Could not retrieve the SCM revision\");\n        return;\n    }\n\n    // Get the revision hash\n    final String hash = revision.getHash();\n    if (hash == null) {\n        listener.getLogger().println(\"Could not retrieve the hash for the SCM revision\");\n        return;\n    }\n\n    // Determine whether to share the build key between branch and PR\n    final boolean shareBuildKey = descriptor.getShareBuildStatusBetweenBranchAndPR();\n\n    // Log the notification type\n    listener.getLogger().println(\"Sending Bitbucket build notification for \" + revision.getHead().getName());\n\n    // Construct the build key\n    final String buildKey = shareBuildKey ? \"jenkins-${JOB_NAME}-${BUILD_NUMBER}\" :\n            \"jenkins-${JOB_NAME}-${BRANCH_NAME}-${BUILD_NUMBER}\";\n\n    // Initialize the Bitbucket client\n    final BitbucketClient client = context.buildBitbucketClient();\n\n    // Create and send the build status notification\n    final BuildState buildState = context.getBuildState();\n    final String buildName = context.getBuildName();\n    final String buildUrl = context.getBuildUrl();\n    final String revisionType = revision.getHead().getType();\n    final String originName = context.getOriginName();\n    final String revisionName = revision.getHead().getName();\n    final String revisionHash = revision.getHash();\n    final String revisionBranch = revision.getBranches().stream().findAny().orElse(null);\n    final String revisionTag", "CodeBleu_score": 41.96918607760163}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\n    // Initialize Bitbucket context\n    BitbucketSCMContext context = new BitbucketSCMContext(source, build, listener);\n\n    // Check if notifications are disabled\n    if (context.notificationsDisabled()) {\n        listener.getLogger().println(\"Bitbucket notifications are disabled. Skipping notifications.\");\n        return;\n    }\n\n    // Retrieve the SCM revision and its hash\n    SCMRevision revision = context.getRevision();\n    String hash = context.getHash();\n\n    // Determine whether to share the build key between branch and PR\n    boolean shareBuildKey = context.getTraits().anyMatch(BitbucketSCMSourceContext.WantSharedBuildStatus.class,\n            BitbucketSCMSourceContext.WantSharedBuildStatus::isWantShared);\n\n    // Log the notification type\n    listener.getLogger().println(\"Sending Bitbucket notifications for \" + (shareBuildKey ? \"branch and PR\" : \"branch\") +\n            \" build statuses.\");\n\n    // Construct the build key\n    String buildKey = context.getBuildKey(shareBuildKey);\n\n    // Initialize the Bitbucket client\n    BitbucketClient client = context.buildBitbucketClient();\n\n    // Create and send the build status notification\n    client.createStatus(buildKey, hash, context.getHead(), revision.getBranches().get(0).getName(),\n            context.getStatus(build));\n}", "CodeBleu_score": 33.71322344748281}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\n    // Initialize the Bitbucket context\n    BitbucketSCMContext context = new BitbucketSCMContext(source, build, listener);\n\n    // Check if notifications are disabled\n    if (context.notificationsDisabled()) {\n        return;\n    }\n\n    // Retrieve the SCM revision and its hash\n    SCMRevision revision = context.getRevision();\n    String hash = context.getHash();\n\n    // Determine whether to share the build key between branch and PR\n    boolean shareBuildKey = context.getOriginName().equals(\"branch\") && context.getHead().isPullRequest();\n\n    // Log the notification type\n    listener.getLogger().println(\"Sending Bitbucket build status notification\");\n\n    // Construct the build key\n    String buildKey = shareBuildKey ? \"jenkins-build\" : \"jenkins-build-\" + context.getOriginName();\n\n    // Initialize the Bitbucket client\n    BitbucketClient client = context.buildBitbucketClient();\n\n    // Create and send the build status notification\n    client.createStatus(buildKey, hash, context.getHead().getBranchName(), context.getBuildStatus());\n}", "CodeBleu_score": 29.61763359864198}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String key = null;\n\n    if (shareBuildKeyBetweenBranchAndPR) {\n        key = String.format(\"%s-%s\", getFolderName(build), branch);\n    } else {\n        key = build.getParent().getFullName();\n    }\n\n    return key;\n}", "CodeBleu_score": 57.90854711344065}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String buildKey = \"\";\n    if (shareBuildKeyBetweenBranchAndPR) {\n        buildKey = build.getParent().getFullName() + \"/\" + branch;\n    } else {\n        buildKey = build.getParent().getFullName();\n    }\n    return buildKey;\n}", "CodeBleu_score": 49.38805134430261}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String buildKey = build.getParent().getFullName()\n    if (shareBuildKeyBetweenBranchAndPR) {\n        buildKey = buildKey + \"/\" + branch\n    }\n    return buildKey\n}", "CodeBleu_score": 32.593742875186884}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\t    // Resolve server URL\n    if (serverUrl == null) {\n        serverUrl = BitbucketScmHelper.getBitbucketServerUrl(owner)\n    }\n    // Log a warning if the server URL is still null\n    if (serverUrl == null) {\n        log.warn(\"The BitbucketSCMNavigator with id ${id} has a null server URL.\")\n    }\n    // Reconstruct legacy traits to reflect legacy behavior if traits are null\n    if (traits == null) {\n        traits = new BitbucketSCMNavigatorTrait[] {\n            new BitbucketSCMNavigatorTrait(\n                new BitbucketSCMSourceTrait(\n                    \"jenkins.plugins.git.traits.BranchDiscoveryTrait\",\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n", "CodeBleu_score": 21.54373644538314}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        serverUrl = getDescriptor().getServerUrl()\n        if (serverUrl == null) {\n            log.warn(\"BitbucketSCMNavigator.serverUrl is null after readResolve()\")\n        }\n    }\n    if (traits == null) {\n        traits = add(new BitbucketSCMSourceTrait.ExcludeByType(BitbucketSCMSourceTrait.ExcludeByType.Type.TAG))\n        log.warn(\"BitbucketSCMNavigator.traits is null after readResolve(). Using legacy traits: $traits\")\n    }\n    return this\n}", "CodeBleu_score": 23.965178070294613}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        serverUrl = BitbucketScm.ID;\n    }\n    if (traits == null) {\n        traits = new ArrayList<>();\n        traits.add(new BitbucketSCMSourceTrait(\n                \"io.jenkins.plugins.bitbucket.BitbucketSCMSourceTrait\",\n                \"jenkins.plugins.git.traits.CleanAfterCheckoutTrait\",\n                \"jenkins.plugins.git.traits.CleanBeforeCheckoutTrait\",\n                \"jenkins.plugins.git.traits.CloneOptionTrait\",\n                \"jenkins.plugins.git.traits.DiscoverOtherRefsTrait\",\n                \"jenkins.plugins.git.traits.LocalBranchTrait\",\n                \"io.jenkins.plugins.bitbucket.BitbucketSCMNavigatorTrait\",\n                \"jenkins.plugins.git.traits.PruneStaleBranchTrait\",\n                \"jenkins.plugins.git.traits.SubmoduleOptionTrait\",\n                \"jenkins.plugins.git.traits.UserExclusionTrait\",\n                \"jenkins.plugins.git.traits.WipeWorkspaceTrait\",\n                \"org.jenkinsci.plugins.github_branch_source.OriginPullRequestDiscoveryTrait\",\n                \"org.jenkinsci.plugins.github_branch_source.ForkPullRequestDiscoveryTrait\",\n                \"org.jenkinsci.plugins.github_branch_source.OriginPullRequestDiscoveryTrait$Strategy\",\n                \"org.jenkinsci.plugins.github_branch_source.ForkPullRequestDiscoveryTrait$Strategy\",\n                \"org.jenkinsci.plugins.github_branch_source.ForkPullRequestDiscoveryTrait$TrustContributors\",\n                \"org.jenkinsci.plugins.github_branch_source.ForkPullRequestDiscoveryTrait$TrustPermission\",\n                \"org.jenkinsci.plugins.github_branch_source.ForkPullRequestDiscoveryTrait$TrustNobody\",\n                \"org.jenkinsci.plugins.github_branch_source", "CodeBleu_score": 25.39588117403285}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\t    BitbucketRepository repository = getBitbucketRepository(name)\n    Logger logger = getLogger()\n    String fullName = getFullName(repository)\n    String message = format(fullName, isMatch)\n    logger.log(message)\n    if (isMatch) {\n        count++\n    }\n}", "CodeBleu_score": 47.45842738493547}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t    BitbucketRepository repository = getBitbucketRepository(name);\n    getLogger().info(format(isMatch ? \"Proposed repository: %s\" : \"Ignored repository: %s\", getFullName(repository)));\n    if (isMatch) {\n        count++;\n    }\n}", "CodeBleu_score": 45.022835824753315}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t    BitbucketRepository repository = getBitbucketRepository(name)\n    Logger logger = getLogger()\n    String fullName = getFullName(repository)\n    String message = format(fullName, isMatch)\n    logger.info(message)\n    if (isMatch) {\n        count++\n    }\n}", "CodeBleu_score": 47.51757697749845}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t    listener.getLogger().println(\"Checking if commit exists locally...\");\n    if (rev.getBranches()\n            .stream()\n            .map(Branch::getSHA1)\n            .filter(hash -> !git.revList(\"--quiet\", \"--verify\", hash).isEmpty())\n            .collect(Collectors.toList())\n            .isEmpty()) {\n        listener.getLogger().println(\"Commit does not exist locally. Fetching...\");\n        List<RefSpec> refSpecs = rev.getBranches()\n                .stream()\n                .map(Branch::getSHA1)\n                .map(hash -> new RefSpec(\"+refs/heads/*:refs/remotes/origin/*\"))\n                .collect(Collectors.toList());\n        if (!refSpecs.isEmpty()) {\n            listener.getLogger().println(\"Fetching missing commits...\");\n            git.fetch_()\n                .from(scm.getUserRemoteConfigs()[0].getUrl(), refSpecs.toArray(new RefSpec[0]))\n                .execute();\n        }\n    }\n    listener.getLogger().println(\"Commit exists locally.\");\n    return rev;\n}", "CodeBleu_score": 37.16017998814066}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t\n    String remote = scm.getUserRemoteConfigs()[0].getUrl()\n    String branch = rev.getBranches()[0].getName()\n    String hash = rev.getSha1String()\n\n    // If the revision is a branch, we need to check whether its hash exists locally.\n    // If it doesn't, we need to fetch it from the remote.\n    if (branch != null) {\n        listener.getLogger().println(\"Checking if ${hash} exists locally...\")\n        if (!git.isCommitInRepo(hash)) {\n            listener.getLogger().println(\"${hash} does not exist locally, fetching it...\")\n            git.fetch_().from(new URIish(remote), Collections.singletonList(new RefSpec(\"+refs/heads/${branch}:refs/remotes/origin/${branch}\"))).execute()\n        }\n    }\n\n    return rev\n}", "CodeBleu_score": 32.40212666348216}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t\n    if (rev.getBranches().isEmpty()) {\n        return rev;\n    }\n\n    final String remoteName = scm.getExtensions().get(GitSCMExtension.class).getGitTool();\n    final String cloneUrl = scm.getUserRemoteConfigs().get(0).getUrl();\n\n    final List<RefSpec> refSpecs = rev.getBranches().stream()\n        .filter(branch -> !branch.getName().contains(\"/\"))\n        .filter(branch -> !branch.getName().contains(\"*\"))\n        .filter(branch -> !branch.getName().contains(\"@\"))\n        .filter(branch -> !branch.getName().contains(\":\"))\n        .filter(branch -> !branch.getName().contains(\"..\"))\n        .filter(branch -> !branch.getName().contains(\"^\"))\n        .filter(branch -> !branch.getName().contains(\"~\"))\n        .filter(branch -> !branch.getName().contains(\"?\"))\n        .filter(branch -> !branch.getName().contains(\"!\"))\n        .filter(branch -> !branch.getName().contains(\"\\\\\"))\n        .filter(branch -> !branch.getName().contains(\"'\"))\n        .filter(branch -> !branch.getName().contains(\"`\"))\n        .filter(branch -> !branch.getName().contains(\"&\"))\n        .filter(branch -> !branch.getName().contains(\"=\"))\n        .filter(branch -> !branch.getName().contains(\"+\"))\n        .filter(branch -> !branch.getName().contains(\"#\"))\n        .filter(branch -> !branch.getName().contains(\"$\"))\n        .filter(branch -> !branch.getName().contains(\"%\"))\n        .filter(branch -> !branch.getName().contains(\" \"))\n        .filter(branch -> !branch.getName().contains(\"\\t\"))\n        .filter(branch -> !branch.getName().contains(\"", "CodeBleu_score": 27.935392777052886}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue().get(0));\n    }\n    return result;\n}", "CodeBleu_score": 74.17503757459158}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue().get(0));\n    }\n    return result;\n}", "CodeBleu_score": 68.85444498625188}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue().get(0));\n    }\n\n    return result;\n}", "CodeBleu_score": 74.17503757459158}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tlet resources = resourceStates.map(r => r.resourceUri);\n\tif (resources.length === 0) {\n\t\treturn;\n\t}\n\n\tlet uris = resources.map(r => r.toString());\n\tlet groups = groupBy(uris, uri => uri.substring(0, uri.indexOf(':')));\n\tfor (let repositorySource in groups) {\n\t\tlet repository = await this.model.getRepository(repositorySource);\n\t\tif (repository) {\n\t\t\tlet paths = groups[repositorySource].map(uri => uri.substring(repositorySource.length + 1));\n\t\t\ttry {\n\t\t\t\tawait repository.add(paths);\n\t\t\t} catch (err) {\n\t\t\t\tvscode.window.showErrorMessage(`Unable to add: ${err.message}`);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 50.49788428960711}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tconst selection = resourceStates.filter(s => s.selected);\n\tif (selection.length === 0) {\n\t\treturn;\n\t}\n\n\tconst resourceByRepository = groupBy(selection, s => s.resourceUri.toString());\n\tfor (const [, resources] of resourceByRepository) {\n\t\tconst paths = resources.map(r => r.resourceUri.fsPath);\n\t\tconst repository = repositories.find(r => r.contains(paths[0]));\n\t\tif (repository) {\n\t\t\ttry {\n\t\t\t\tawait repository.add(paths);\n\t\t\t} catch (err) {\n\t\t\t\tif (/is outside repository/.test(err.stderr || '')) {\n\t\t\t\t\twindow.showErrorMessage(`The file is not under the opened repository`);\n\t\t\t\t} else {\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Error(`Resource is not under an opened repository: ${paths[0]}`);\n\t\t}\n\t}\n}", "CodeBleu_score": 49.61167808596739}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tconst resourceStates = this.getResourceStates(resourceStates);\n\tif (resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\tconst resources = resourceStates.map(r => r.resourceUri);\n\tconst resourceGroups = groupBy(resources, r => r.repository.rootUri.fsPath);\n\n\tfor (const [, resources] of resourceGroups) {\n\t\tconst paths = resources.map(r => r.fsPath);\n\t\tconst config = workspace.getConfiguration('git', Uri.file(path.join(resources[0].repository.rootUri.fsPath, '.git', 'config')));\n\t\tconst shouldIgnore = config.get<boolean>('ignoreLimitWarning') === true;\n\n\t\ttry {\n\t\t\tawait resources[0].repository.add(paths, shouldIgnore);\n\t\t} catch (err) {\n\t\t\tif (/File name too long/.test(err.stderr || '')) {\n\t\t\t\tif (shouldIgnore) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst addAnyway = localize('add anyway', \"Add Anyway\");\n\t\t\t\tconst result = await window.showWarningMessage(localize('add long', \"The git path is too long (see https://aka.ms/vscode-git-long-paths). Only a subset of Git features will work. Continue anyway?\"), addAnyway);\n\n\t\t\t\tif (result === addAnyway) {\n\t\t\t\t\tawait resources[0].repository.add(paths, true);\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 43.984095690186365}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\t  if (resourceStates.length === 0) {\n    const resource = await this.getResource();\n    if (resource instanceof Resource) {\n      resourceStates.push(resource);\n    }\n  } else if (!(resourceStates[0] instanceof Uri)) {\n    const resource = await this.getResource();\n    if (resource instanceof Resource) {\n      resourceStates[0] = resource;\n    }\n  }\n  return resourceStates.filter(resourceState => resourceState instanceof Resource) as Resource[];\n}", "CodeBleu_score": 45.894957777793174}, {"code": "protected async getResourceStates{\n\t    if (resourceStates.length === 0 || !(resourceStates[0] instanceof Uri)) {\n        const scmResource = await this.getSCMResource();\n        if (scmResource) {\n            resourceStates = [scmResource];\n        }\n    }\n    return resourceStates.filter((resourceState) => resourceState instanceof Resource);\n}", "CodeBleu_score": 39.054025047779994}, {"code": "protected async getResourceStates{\n\t    if (this.resourceStates.length === 0 || !(this.resourceStates[0] instanceof Uri)) {\n        const resource = await this.getSCMResource();\n        if (resource) {\n            this.resourceStates = [resource];\n        }\n    }\n    return this.resourceStates.filter(resource => resource instanceof Resource);\n}", "CodeBleu_score": 38.99202248632028}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    if (!uri) {\n      const editor = window.activeTextEditor;\n      if (!editor) {\n        return undefined;\n      }\n\n      uri = editor.document.uri;\n    }\n\n    if (uri.scheme === 'svn') {\n      uri = uri.with({ scheme: 'file' });\n    }\n\n    if (uri.scheme !== 'file') {\n      return undefined;\n    }\n\n    const manager = sourceControlManager.getRepository(uri);\n    if (!manager) {\n      return undefined;\n    }\n\n    return manager.getResourceFromFile(uri);\n  }", "CodeBleu_score": 42.06485169933117}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    const resourceUri = uri ?? window.activeTextEditor?.document.uri;\n\n    if (!resourceUri) {\n      return undefined;\n    }\n\n    if (resourceUri.scheme === 'svn') {\n      return this.getSCMResource(fromSvnUri(resourceUri));\n    }\n\n    if (resourceUri.scheme !== 'file') {\n      return undefined;\n    }\n\n    const repository = this.getRepository(resourceUri);\n\n    if (!repository) {\n      return undefined;\n    }\n\n    return repository.getResourceFromFile(resourceUri);\n  }", "CodeBleu_score": 41.720214176695926}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    uri = uri ?? window.activeTextEditor?.document.uri;\n    if (!uri) {\n      return undefined;\n    }\n    if (uri.scheme === 'svn') {\n      uri = uri.with({ scheme: 'file' });\n    }\n    if (uri.scheme !== 'file') {\n      return undefined;\n    }\n    const repository = this.getRepository(uri);\n    if (!repository) {\n      return undefined;\n    }\n    return repository.getResourceFromFile(uri);\n  }", "CodeBleu_score": 43.627150907751144}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\t    const remote = await this.model.getRemoteRepository(element);\n    if (element.type === \"modified\") {\n        this.openDiff(remote, element.oldRevision, element.path, element.newRevision, element.path);\n    } else if (element.type === \"added\") {\n        this.openFileRemote(remote, element.newRevision, element.path);\n    }\n}", "CodeBleu_score": 37.98826320891224}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t    const remoteRepository = await this.model.getRemoteRepository(element.path);\n    if (!remoteRepository) {\n      return;\n    }\n\n    if (element.change === SvnPathChangeType.Added) {\n      await this.openFileRemote(element.path, remoteRepository, element.revision);\n    } else if (element.change === SvnPathChangeType.Modified) {\n      await this.openDiff(element.path, remoteRepository, element.revision, element.previousRevision);\n    }\n  }", "CodeBleu_score": 44.9724109345107}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t    const repository = await this.model.getRemoteRepository(element.path);\n    if (repository) {\n      if (element.action === 'M') {\n        this.openDiff(repository, element.path, element.oldRevision, element.newRevision);\n      } else if (element.action === 'A') {\n        this.openFileRemote(repository, element.path, element.newRevision);\n      }\n    }\n  }", "CodeBleu_score": 45.21481247257826}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t    if (!clipboard.writeText) {\n        window.showErrorMessage('Copying to the clipboard is not supported on this platform.');\n        return;\n    }\n    if (what === 'revision') {\n        clipboard.writeText(item.revision);\n    } else {\n        clipboard.writeText(item.message);\n    }\n}", "CodeBleu_score": 28.453336271766084}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t  if (!clipboard.writeText) {\n    window.showErrorMessage('Clipboard is not supported.');\n    return;\n  }\n\n  if (item.commit) {\n    switch (what) {\n      case 'message':\n        clipboard.writeText(item.commit.message);\n        break;\n      case 'revision':\n        clipboard.writeText(item.commit.revision);\n        break;\n    }\n  }\n}", "CodeBleu_score": 33.671374689412595}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t    if (clipboard.writeText) {\n        if (what === 'commit') {\n            clipboard.writeText(item.commit);\n        } else if (what === 'message') {\n            clipboard.writeText(item.message);\n        }\n    } else {\n        window.showErrorMessage('Copying to the clipboard is not supported on this platform.');\n    }\n}", "CodeBleu_score": 29.70753224819209}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    GiteaConnectionFactory[] factories = (GiteaConnectionFactory[]) ServiceLoader.load(GiteaConnectionFactory.class).iterator().toArray();\n    Arrays.sort(factories, new Comparator<GiteaConnectionFactory>() {\n        @Override\n        public int compare(GiteaConnectionFactory o1, GiteaConnectionFactory o2) {\n            return o2.priority() - o1.priority();\n        }\n    });\n    for (GiteaConnectionFactory factory : factories) {\n        if (factory.canOpen()) {\n            return factory.open();\n        }\n    }\n    throw new IOException(\"No suitable GiteaConnectionFactory implementation found.\");\n}", "CodeBleu_score": 36.278587366054595}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    // Load available GiteaConnectionFactory implementations\n    ServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class);\n\n    // Iterate through the factories to find the most suitable one based on their ability to open the connection and their priority\n    GiteaConnectionFactory suitableFactory = null;\n    int suitableFactoryPriority = Integer.MIN_VALUE;\n    for (GiteaConnectionFactory factory : loader) {\n        int factoryPriority = factory.priority();\n        if (factory.canOpen(this) && factoryPriority > suitableFactoryPriority) {\n            suitableFactory = factory;\n            suitableFactoryPriority = factoryPriority;\n        }\n    }\n\n    // If a suitable factory is found, open the connection\n    if (suitableFactory != null) {\n        return suitableFactory.open(this);\n    }\n\n    // Otherwise, throw an IOException\n    throw new IOException(\"Could not find a suitable GiteaConnectionFactory implementation\");\n}", "CodeBleu_score": 50.54459341332649}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    List<GiteaConnectionFactory> factories = new ArrayList<>();\n    ServiceLoader.load(GiteaConnectionFactory.class).forEach(factories::add);\n    Collections.sort(factories, Comparator.comparingInt(GiteaConnectionFactory::priority));\n\n    for (GiteaConnectionFactory factory : factories) {\n        if (factory.canOpen()) {\n            return factory.open();\n        }\n    }\n\n    throw new IOException(\"No suitable GiteaConnectionFactory found\");\n}", "CodeBleu_score": 22.0044820173885}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\t    Jenkins jenkins = Jenkins.getInstanceOrNull()\n    if (jenkins != null) {\n        this.classLoader = jenkins.getPluginManager().classLoader\n    } else {\n        this.classLoader = this.class.classLoader\n    }\n    return this\n}", "CodeBleu_score": 43.90845804869731}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t  if (Jenkins.getInstanceOrNull() != null) {\n    return Jenkins.getInstanceOrNull().getPluginManager().uberClassLoader\n  } else {\n    return this.class.classLoader\n  }\n}", "CodeBleu_score": 27.272681779804625}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t  if (Jenkins.getInstanceOrNull() != null) {\n    this.setClassLoader(Jenkins.getInstanceOrNull().getPluginManager().uberClassLoader)\n  } else {\n    this.setClassLoader(this.getClass().getClassLoader())\n  }\n  return this\n}", "CodeBleu_score": 27.40182550271062}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = displayName\n    this.serverUrl = normalizeServerUrl(serverUrl)\n    this.manageHooks = manageHooks\n    if (manageHooks) {\n        this.credentialsId = credentialsId\n    }\n    this.aliasUrl = trimToNull(aliasUrl)\n    this.displayName = displayName ?: this.serverUrl\n}", "CodeBleu_score": 31.83587416985114}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = displayName\n    this.serverUrl = normalizeServerUrl(serverUrl)\n    this.manageHooks = manageHooks\n    if (manageHooks) {\n        this.credentialsId = credentialsId\n    }\n    this.aliasUrl = trimToNull(aliasUrl)\n    if (displayName == null) {\n        this.displayName = this.serverUrl\n    }\n}", "CodeBleu_score": 34.24348563082835}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = displayName\n    this.serverUrl = normalizeServerUrl(serverUrl)\n    this.manageHooks = manageHooks\n    this.credentialsId = manageHooks ? credentialsId : null\n    this.aliasUrl = trimToNull(aliasUrl)\n    this.displayName = displayName ?: this.serverUrl\n}", "CodeBleu_score": 37.17863824946236}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    List<StandardUsernamePasswordCredentials> credentials = new ArrayList<>();\n    credentials.addAll(lookupCredentials(StandardUsernamePasswordCredentials.class,\n            Jenkins.getInstance(), ACL.SYSTEM, Collections.<DomainRequirement>emptyList()));\n    credentials.addAll(lookupCredentials(StringCredentials.class,\n            Jenkins.getInstance(), ACL.SYSTEM, Collections.<DomainRequirement>emptyList()));\n    credentials.addAll(lookupCredentials(GiteaAuth.class,\n            Jenkins.getInstance(), ACL.SYSTEM, Collections.<DomainRequirement>emptyList()));\n\n    ListBoxModel model = new ListBoxModel();\n    model.add(new Option(Messages.GiteaSCMSource_credentials_none(), \"\", true));\n    for (StandardCredentials credential : credentials) {\n        if (credential instanceof GiteaAuth) {\n            if (checkPermission(Item.CONFIGURE, credential)) {\n                model.add(new Option(credential.getDescription(), credential.getId(), false));\n            }\n        } else {\n            if (checkPermission(Item.EXTENDED_READ, credential)) {\n                model.add(new Option(credential.getDescription(), credential.getId(), false));\n            }\n        }\n    }\n    return model;\n}", "CodeBleu_score": 36.15727209120142}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    ListBoxModel items = new ListBoxModel()\n    items.add(new Option('Select', ''))\n\n    if (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n        return items\n    }\n\n    serverUrl = normalizeServerUrl(serverUrl)\n    if (serverUrl.isEmpty()) {\n        return items\n    }\n\n    for (credential in getMatchingCredentials(serverUrl)) {\n        items.add(new Option(credential.getDescription(), credential.getId()))\n    }\n\n    return items\n}", "CodeBleu_score": 43.00055346130826}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    ListBoxModel listBoxModel = new ListBoxModel()\n    listBoxModel.add(new Option(\"Select credentials\", \"\"))\n    if (serverUrl.length() == 0) {\n        return listBoxModel\n    }\n    if (!checkPermission(Jenkins.getActiveInstance().getACL(), Item.CONFIGURE)) {\n        return listBoxModel\n    }\n    serverUrl = normalizeServerUrl(serverUrl)\n    listBoxModel.add(new Option(\"Add new\", \"\"))\n    for (credential in getCredentials(serverUrl)) {\n        listBoxModel.add(new Option(credential.getDescription(), credential.getId()))\n    }\n    return listBoxModel\n}", "CodeBleu_score": 35.284467946636994}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return null;\n    }\n\n    try {\n        // Convert the server URL to lowercase.\n        serverUrl = serverUrl.toLowerCase(Locale.ENGLISH);\n\n        // Remove any trailing slashes from the server URL.\n        if (serverUrl.endsWith(\"/\")) {\n            serverUrl = serverUrl.substring(0, serverUrl.length() - 1);\n        }\n\n        // Parse the server URL and get the URI.\n        URI uri = new URI(serverUrl);\n\n        // Remove any default ports from the server URL.\n        if ((uri.getScheme().equals(\"http\") && uri.getPort() == 80) ||\n            (uri.getScheme().equals(\"https\") && uri.getPort() == 443)) {\n            uri = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), -1, uri.getPath(), uri.getQuery(), uri.getFragment());\n        }\n\n        // Return the server URL as a string.\n        return uri.toASCIIString();\n    } catch (URISyntaxException e) {\n        // Ignore any exceptions that occur while parsing the server URL.\n    }\n\n    // Return the original server URL if an exception occurs.\n    return serverUrl;\n}", "CodeBleu_score": 40.63015238443075}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        if (scheme == null) {\n            return null;\n        }\n        String host = uri.getHost();\n        if (host == null) {\n            return null;\n        }\n        int port = uri.getPort();\n        if (port == -1) {\n            port = scheme.equalsIgnoreCase(\"http\") ? 80 : scheme.equalsIgnoreCase(\"https\") ? 443 : -1;\n        }\n        StringBuilder sb = new StringBuilder();\n        sb.append(scheme.toLowerCase()).append(\"://\");\n        if (uri.getUserInfo() != null) {\n            sb.append(uri.getUserInfo()).append('@');\n        }\n        sb.append(host.toLowerCase());\n        if (port != -1) {\n            sb.append(':').append(port);\n        }\n        String path = uri.getPath();\n        if (path != null && path.length() > 0) {\n            sb.append(path);\n        }\n        String query = uri.getQuery();\n        if (query != null) {\n            sb.append('?').append(query);\n        }\n        String fragment = uri.getFragment();\n        if (fragment != null) {\n            sb.append('#').append(fragment);\n        }\n        return sb.toString();\n    } catch (URISyntaxException e) {\n        return null;\n    }\n}", "CodeBleu_score": 41.62362678626971}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return null;\n    }\n\n    try {\n        URI uri = new URI(serverUrl).parseServerAuthority();\n        return uri.normalize().toASCIIString().replaceAll(\"/$\", \"\");\n    } catch (URISyntaxException e) {\n        return serverUrl.toLowerCase();\n    }\n}", "CodeBleu_score": 18.353212591478385}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel model = new ListBoxModel()\n    getServers().each { server ->\n        String displayName = getDisplayName(server)\n        if (isBlank(displayName)) {\n            model.add(getServerUrl(server))\n        } else {\n            model.add(displayName, getServerUrl(server))\n        }\n    }\n    return model\n}", "CodeBleu_score": 28.92995631776307}, {"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel model = new ListBoxModel()\n    getServers().each { server ->\n        String displayName = getDisplayName(server)\n        if (isBlank(displayName)) {\n            model.add(getServerUrl(server))\n        } else {\n            model.add(displayName, getServerUrl(server))\n        }\n    }\n    return model\n}", "CodeBleu_score": 28.92995631776307}, {"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel model = new ListBoxModel()\n    getServers().each { server ->\n        String displayName = getDisplayName(server)\n        if (displayName) {\n            model.add(displayName, server.getUrl())\n        } else {\n            model.add(server.getUrl())\n        }\n    }\n    return model\n}", "CodeBleu_score": 29.192406250976937}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    checkPermission(Jenkins.ADMINISTER);\n    List<String> serverUrls = new ArrayList<>();\n    for (GiteaServer server : servers) {\n        String serverUrl = server.getServerUrl();\n        if (isBlank(serverUrl)) {\n            continue;\n        }\n        if (!serverUrls.contains(serverUrl)) {\n            serverUrls.add(serverUrl);\n        }\n    }\n    setServers(serverUrls);\n}", "CodeBleu_score": 36.21281040030874}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    Jenkins jenkins = Jenkins.getInstance();\n    if (jenkins == null) {\n        throw new IllegalStateException(\"Jenkins has not been started, or was already shut down\");\n    }\n    if (jenkins.hasPermission(Jenkins.ADMINISTER)) {\n        if (servers != null) {\n            Set<GiteaServer> serverSet = new HashSet<>();\n            for (GiteaServer server : servers) {\n                if (server != null) {\n                    String serverUrl = server.getServerUrl();\n                    if (serverUrl != null && !serverUrl.isEmpty()) {\n                        serverSet.add(server);\n                    }\n                }\n            }\n            this.servers = new ArrayList<>(serverSet);\n        } else {\n            this.servers = null;\n        }\n        save();\n    } else {\n        throw new AccessDeniedException(\"You must have admin permissions to set the Gitea servers\");\n    }\n}", "CodeBleu_score": 40.80154710210454}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    checkPermission(ADMINISTER);\n    if (servers == null) {\n        servers = new ArrayList<>();\n    }\n    List<GiteaServer> uniqueServers = new ArrayList<>();\n    for (GiteaServer server : servers) {\n        if (server != null && !uniqueServers.contains(server)) {\n            uniqueServers.add(server);\n        }\n    }\n    this.servers = uniqueServers;\n    save();\n}", "CodeBleu_score": 29.67430125449243}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return false;\n    }\n    serverUrl = normalizeServerUrl(serverUrl);\n    for (Iterator<String> i = getServers().iterator(); i.hasNext(); ) {\n        String url = normalizeServerUrl(i.next());\n        if (url.equals(serverUrl)) {\n            i.remove();\n            save();\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 40.45523216888364}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return false;\n    }\n    serverUrl = normalizeServerUrl(serverUrl);\n    boolean removed = false;\n    for (Iterator<GiteaServer> it = getServers().iterator(); it.hasNext();) {\n        GiteaServer server = it.next();\n        if (serverUrl.equals(server.getServerUrl())) {\n            it.remove();\n            removed = true;\n        }\n    }\n    if (removed) {\n        save();\n    }\n    return removed;\n}", "CodeBleu_score": 53.19534143389528}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    serverUrl = normalizeServerUrl(serverUrl);\n    if (serverUrl == null) {\n        return false;\n    }\n    boolean removed = false;\n    List<GiteaServer> servers = new ArrayList<>(getServers());\n    for (Iterator<GiteaServer> iterator = servers.iterator(); iterator.hasNext(); ) {\n        GiteaServer server = iterator.next();\n        if (server.getUrl().equals(serverUrl)) {\n            iterator.remove();\n            removed = true;\n        }\n    }\n    if (removed) {\n        setServers(servers);\n    }\n    return removed;\n}", "CodeBleu_score": 61.52199553843857}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {\n        if (element.getKind() != ElementKind.FIELD) {\n            throw new IllegalArgumentException(\n                    String.format(\"Only field can be annotated with @%s\", annotation.getSimpleName()));\n        }\n\n        String type = asType(element);\n        String name = element.getSimpleName().toString();\n        String defaultValue = element.getAnnotation(annotation).defaultValue();\n        String key = element.getAnnotation(annotation).key();\n        descriptorElements.add(new ConfigElement(type, name, defaultValue, key));\n    }\n}", "CodeBleu_score": 35.48188967274763}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {\n        // Get the attributes from the annotation.\n        Map<String, String> attributes = getAttributesFromAnnotation(element);\n        // Convert the element's type to a string.\n        String type = asType(element);\n        // Add a new ConfigElement with these attributes and type to the set of descriptor elements.\n        descriptorElements.add(new ConfigElement(attributes, type));\n    }\n}", "CodeBleu_score": 38.06040937523546}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {\n        if (element.getKind() != ElementKind.FIELD) {\n            throw new IllegalArgumentException(\"Only fields can be annotated with @Config\");\n        }\n\n        // Get the annotation attributes\n        String name = element.getAnnotation(annotation).asType().toString();\n        String defaultValue = element.getAnnotation(annotation).defaultValue();\n        String description = element.getAnnotation(annotation).description();\n\n        // Convert the element's type to a string\n        String type = asType(element);\n\n        // Add a new ConfigElement to the set of descriptor elements\n        descriptorElements.add(new ConfigElement(name, defaultValue, description, type));\n    }\n}", "CodeBleu_score": 35.29622936065083}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    for (TypeElement annotation : annotations) {\n        String qualifiedName = annotation.getQualifiedName().toString();\n        String targetName = annotationClass.getName().replace('$', '.');\n        if (qualifiedName.equals(targetName)) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 39.29541744194991}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    for (TypeElement annotation : annotations) {\n        if (annotationClass.getName().replace('$', '.').equals(annotation.getQualifiedName().toString())) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 48.8451543513446}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    for (TypeElement annotation : annotations) {\n        if (annotationClass.getName().replace('$', '.').equals(annotation.getQualifiedName().toString())) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 48.8451543513446}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"employee\": employee,\n        \"status\": \"Open\",\n        \"docstatus\": 0,\n        \"company\": frappe.defaults.get_user_default(\"Company\"),\n    }\n    if for_approval:\n        filters[\"status\"] = get_workflow_state_field(\n            \"Leave Application\",\n            frappe.get_doc(\"Employee\", employee).workflow_state,\n        )\n        if approver_id:\n            filters.update(\n                {\n                    \"approver_id\": approver_id,\n                    \"status\": (\"in\", get_allowed_states_for_workflow(\"Leave Application\")),\n                }\n            )\n        else:\n            filters.update(\n                {\n                    \"status\": (\"in\", get_allowed_states_for_workflow(\"Leave Application\")),\n                }\n            )\n    else:\n        filters[\"status\"] = \"Open\"\n    return filters\n\n", "CodeBleu_score": 29.674821487738335}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n\n    filters: dict = {\n        \"employee\": employee,\n        \"status\": \"Open\",\n    }\n\n    if for_approval:\n        filters.update(\n            {\n                \"status\": [\n                    \"!=\",\n                    \"Rejected\",\n                ],\n                \"docstatus\": 1,\n                \"approver_id\": approver_id,\n            }\n        )\n\n        allowed_states = get_allowed_states_for_workflow(\n            doctype=\"Leave Application\",\n            workflow_name=get_workflow(\"Leave Application\"),\n        )\n\n        if allowed_states:\n            filters.update(\n                {\n                    \"workflow_state\": [\n                        \"in\",\n                        allowed_states,\n                    ],\n                }\n            )\n\n    else:\n        filters.update(\n            {\n                \"status\": [\n                    \"!=\",\n                    \"Canceled\",\n                ],\n            }\n        )\n\n    return filters\n", "CodeBleu_score": 28.797746526979896}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = frappe._dict({\n        \"employee\": employee,\n        \"docstatus\": 1,\n        \"status\": [\"!=\", \"Canceled\"],\n    })\n\n    if for_approval:\n        filters.update({\n            \"approver_id\": approver_id,\n            \"status\": get_approval_status(employee),\n        })\n    else:\n        filters.update({\n            \"owner\": employee,\n        })\n\n    return filters\n\n", "CodeBleu_score": 25.690444854148343}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    today = getdate()\n    leave_details = get_leave_details(employee)\n    leave_balance_map = {}\n    for leave_detail in leave_details:\n        leave_type = leave_detail.leave_type\n        allocation_details = get_leave_allocation_details(employee, leave_type)\n        leave_balance_map[leave_type] = {\n            \"from_date\": allocation_details.from_date,\n            \"to_date\": allocation_details.to_date,\n            \"allocated_days\": allocation_details.total_leaves_allocated,\n            \"carry_forwarded_leaves\": allocation_details.carry_forward,\n            \"total_leaves\": allocation_details.total_leaves_allocated + allocation_details.carry_forward,\n            \"taken_leaves\": leave_detail.total_leaves_taken,\n            \"pending_leaves\": leave_detail.total_leaves_approved - leave_detail.total_leaves_taken,\n            \"balance_leaves\": leave_detail.total_leaves_approved - leave_detail.total_leaves_taken,\n            \"expired_leaves\": leave_detail.expired_leaves,\n        }\n    return leave_balance_map\n", "CodeBleu_score": 34.65427029818864}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    date = getdate()\n    leave_details = get_leave_details(employee)\n    leave_balance_map = {}\n    for leave_detail in leave_details:\n        if leave_detail.leave_type not in leave_balance_map:\n            leave_balance_map[leave_detail.leave_type] = {\n                \"allocated_leaves\": leave_detail.total_leaves_allocated,\n                \"balance_leaves\": leave_detail.total_leaves_allocated,\n            }\n        leave_balance_map[leave_detail.leave_type][\"balance_leaves\"] -= leave_detail.total_leaves_taken\n    return leave_balance_map\n\n", "CodeBleu_score": 36.215951106814515}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    date = getdate()\n    leave_details = get_leave_details(employee, date)\n    leave_balance_map = {}\n    for leave_detail in leave_details:\n        leave_balance_map[leave_detail.leave_type] = {\n            \"allocated_leaves\": leave_detail.total_leaves_allocated,\n            \"leaves_taken\": leave_detail.total_leaves_taken,\n            \"leaves_pending\": leave_detail.total_leaves_pending_approval,\n            \"leaves_sanctioned\": leave_detail.total_leaves_sanctioned,\n            \"leaves_balance\": leave_detail.total_leaves_balance,\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 43.38215761717523}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.db.get_value(\"Employee\", employee, \"holiday_list\")\n    if not holiday_list:\n        return []\n    holidays = frappe.db.sql(\n        \"\"\"\n        SELECT\n            hd.holiday_date AS date,\n            hd.description AS description\n        FROM\n            `tabHoliday` hd\n        WHERE\n            hd.parent = %(holiday_list)s\n            AND hd.weekly_off IS NULL\n        ORDER BY\n            hd.holiday_date ASC\n        \"\"\",\n        {\"holiday_list\": holiday_list},\n        as_dict=True,\n    )\n    for holiday in holidays:\n        holiday.description = strip_html(holiday.description)\n    return holidays\n\n", "CodeBleu_score": 33.296680839919276}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n\n    holiday_list = get_holiday_list_for_employee(employee)\n\n    if not holiday_list:\n        return []\n\n    holidays = frappe.db.sql(\n        \"\"\"\n        SELECT\n            `tabHoliday`.holiday_date,\n            `tabHoliday`.description\n        FROM `tabHoliday`\n        WHERE\n            `tabHoliday`.parent = %(holiday_list)s\n            AND `tabHoliday`.holiday_date >= CURDATE()\n            AND `tabHoliday`.weekly_off IS NULL\n        ORDER BY\n            `tabHoliday`.holiday_date\n    \"\"\",\n        values={\n            \"holiday_list\": holiday_list,\n        },\n        as_dict=True,\n    )\n\n    for holiday in holidays:\n        holiday.description = strip_html(holiday.description)\n\n    return holidays\n\n", "CodeBleu_score": 32.2096318895199}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n\n    holidays = frappe.db.sql(\n        \"\"\"\n        SELECT\n            hd.holiday_date AS date,\n            hd.description AS description\n        FROM `tabHoliday` h\n        JOIN `tabHoliday Date` hd ON hd.parent = h.name\n        WHERE\n            h.holiday_list = %(holiday_list)s AND\n            hd.weekly_off = 0\n        ORDER BY hd.holiday_date\n        \"\"\",\n        values={\"holiday_list\": holiday_list},\n        as_dict=True,\n    )\n\n    for holiday in holidays:\n        holiday.description = strip_html(holiday.description)\n\n    return holidays\n\n", "CodeBleu_score": 33.73771068287756}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t\n    holiday_settings = frappe.get_single(\"HR Settings\")\n    if holiday_settings.send_advance_holiday_reminders and holiday_settings.advance_holiday_reminder_frequency == \"Weekly\":\n        send_advance_holiday_reminders()\n\n", "CodeBleu_score": 18.73589776233281}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    hr_settings = frappe.get_single(\"HR Settings\")\n    if hr_settings.advance_holiday_reminder_frequency == \"Weekly\":\n        if hr_settings.advance_holiday_reminder_send_in_advance:\n            send_advance_holiday_reminders()\n\n", "CodeBleu_score": 16.05854299741193}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    settings = get_single_value('HR Settings', 'HR Settings', 'name', 'HR Settings')\n    if settings.send_advance_holiday_reminders and settings.advance_holiday_reminder_frequency == 'Weekly':\n        send_advance_holiday_reminders()\n\n", "CodeBleu_score": 21.522109935867096}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t\n    score = 0\n    for entry in self.self_rating:\n        score += entry.rating * entry.weightage / 100\n    self.self_appraisal_score = round(score, self.precision)\n\n", "CodeBleu_score": 27.290291078674922}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    score = 0\n    for appraisal in self.self_appraisal:\n        score += appraisal.rating * appraisal.percentage_weightage / 100\n    self.self_appraisal_score = round(score, self.precision)\n\n", "CodeBleu_score": 22.180506820158538}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    score = 0\n    for rating in self.self_ratings:\n        score += rating.rating * 5 * rating.weightage\n    self.self_appraisal_score = flt(score, self.precision)\n\n", "CodeBleu_score": 27.017310522840987}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle_doc = frappe.get_cached_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle_doc.calculate_final_score_based_on_formula:\n        data = frappe.get_cached_doc(\"Appraisal\", self.name).as_dict()\n        data.update(frappe.get_cached_doc(\"Appraisal Cycle\", self.appraisal_cycle).as_dict())\n        data.update(frappe.get_cached_doc(\"Employee\", self.employee).as_dict())\n        data.update(frappe.get_cached_doc(\"Employee\", self.employee).as_dict())\n        data.update(\n            {\n                \"total_score\": self.total_score,\n                \"average_feedback_score\": self.average_feedback_score,\n                \"self_appraisal_score\": self.self_appraisal_score,\n            }\n        )\n        formula = appraisal_cycle_doc.final_score_formula\n        formula = sanitize_expression(formula)\n        self.final_score = frappe.safe_eval(formula, None, data)\n    else:\n        self.final_score = flt(\n            (\n                self.total_score\n                + self.average_feedback_score\n                + self.self_appraisal_score\n            )\n            / 3,\n            self.precision(\"final_score\"),\n        )\n\n", "CodeBleu_score": 36.74184507584688}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle_doc = frappe.get_cached_doc('Appraisal Cycle', self.appraisal_cycle)\n    if appraisal_cycle_doc.calculate_final_score_based_on_formula:\n        # Get the necessary data\n        employee_doc = frappe.get_cached_doc('Employee', self.employee)\n        data = {\n            'appraisal': self.as_dict(),\n            'employee': employee_doc.as_dict(),\n            'appraisal_cycle': appraisal_cycle_doc.as_dict()\n        }\n        # Sanitize the formula and evaluate it\n        self.final_score = frappe.safe_eval(sanitize_expression(appraisal_cycle_doc.final_score_formula), None, data)\n    else:\n        # Calculate the final score as the average of the total score, average feedback score, and self-appraisal score\n        self.final_score = (self.total_score + self.average_feedback_score + self.self_appraisal_score) / 3\n\n    # Set the final score with the appropriate precision\n    self.final_score = flt(self.final_score, self.precision)\n\n", "CodeBleu_score": 41.66045822000611}, {"code": "def calculate_final_score(self)\n\t\n\n    appraisal_cycle_doc = frappe.get_cached_doc('Appraisal Cycle', self.appraisal_cycle)\n    if appraisal_cycle_doc.calculate_final_score_based_on_formula:\n        data = {}\n        data.update(self.as_dict())\n        data.update({\n            'employee_doc': frappe.get_cached_doc('Employee', self.employee),\n            'appraisal_cycle_doc': appraisal_cycle_doc\n        })\n        formula = sanitize_expression(appraisal_cycle_doc.final_score_formula)\n        self.final_score = flt(frappe.safe_eval(formula, data), self.precision('final_score'))\n    else:\n        self.final_score = flt((self.total_score + self.average_feedback_score + self.self_appraisal_score) / 3, self.precision('final_score'))\n\n", "CodeBleu_score": 39.3121178733323}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\t\n    if self.employee:\n        if self.attendance_date:\n            if self.attendance_date > nowdate():\n                if self.status != \"On Leave\" or frappe.db.get_value(\"Leave Application\", {\"employee\": self.employee, \"from_date\": [\"<=\", self.attendance_date], \"to_date\": [\">=\", self.attendance_date], \"docstatus\": 1}):\n                    frappe.throw(_(\"Attendance date cannot be future date\"))\n            if self.attendance_date < get_value(\"Employee\", self.employee, \"date_of_joining\"):\n                frappe.throw(_(\"Attendance date cannot be earlier than the date of joining\"))\n\n", "CodeBleu_score": 31.61789522139643}, {"code": "def validate_attendance_date(self)\n\t\n    if getdate(self.attendance_date) > getdate(nowdate()):\n        frappe.throw(_(\"Attendance cannot be marked for future dates\"))\n    if getdate(self.attendance_date) < getdate(self.employee):\n        frappe.throw(_(\"Attendance cannot be marked before the employee's joining date\"))\n", "CodeBleu_score": 22.37982934786696}, {"code": "def validate_attendance_date(self)\n\t\n    if getdate(self.attendance_date) > getdate(nowdate()):\n        frappe.throw(_(\"Attendance can not be marked for future dates.\"))\n    if getdate(self.attendance_date) < getdate(self.employee):\n        frappe.throw(_(\"Attendance can not be marked for dates before employee's joining date.\"))\n\n", "CodeBleu_score": 24.556693064887412}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\t\n    attendance_records = frappe.get_list('Attendance', filters={'employee': self.employee, 'attendance_date': self.attendance_date}, fields=['name'])\n    if len(attendance_records) > 1:\n        frappe.throw('Duplicate attendance record found for employee {0} on {1}. Please check <a href=\"#Form/Attendance/{2}\">this attendance record</a>'.format(\n            frappe.bold(self.employee),\n            frappe.utils.format_date(self.attendance_date),\n            attendance_records[0].name\n        ))\n\n", "CodeBleu_score": 26.42228429599114}, {"code": "def validate_duplicate_record(self)\n\t\n    duplicate_attendance = self.get_duplicate_attendance_record()\n    if duplicate_attendance:\n        msg = _(\"Attendance for {0} on {1} already exists\").format(\n            frappe.bold(self.employee_name),\n            frappe.bold(format_date(self.attendance_date, \"dd-MM-yyyy\")),\n        )\n        msg += \"<br><br>\"\n        msg += _(\"Please check {0}\").format(\n            get_link_to_form(\"Attendance\", duplicate_attendance)\n        )\n        frappe.throw(msg, title=_(\"Duplicate Attendance\"))\n\n", "CodeBleu_score": 43.738320895069535}, {"code": "def validate_duplicate_record(self)\n\t\n    existing_attendance = frappe.db.exists(\n        \"Attendance\",\n        {\n            \"employee\": self.employee,\n            \"attendance_date\": self.attendance_date,\n            \"docstatus\": 1,\n            \"name\": (\"!=\", self.name),\n        },\n    )\n\n    if existing_attendance:\n        msg = _(\n            \"Attendance for employee {0} is already marked on {1}. \"\n            \"Please check {2}.\"\n        ).format(\n            frappe.bold(self.employee),\n            frappe.bold(format_date(self.attendance_date)),\n            get_link_to_form(\"Attendance\", existing_attendance),\n        )\n        frappe.throw(msg, DuplicateAttendanceError)\n\n", "CodeBleu_score": 44.51935317478206}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t\n    message_details = self.get_message_details()\n    group_emails = self.get_user_emails_from_group(self.group)\n    frappe.sendmail(recipients=group_emails, subject=message_details.subject, message=message_details.message, delayed=False)\n    self.db_set(\"status\", \"Sent\")\n\n", "CodeBleu_score": 31.887403136225213}, {"code": "def send_summary(self)\n\t\n    message_details = self.get_message_details()\n    group_emails = self.get_user_emails_from_group(self.group)\n    if group_emails:\n        frappe.sendmail(recipients=group_emails,\n                        subject=message_details.subject,\n                        message=message_details.message,\n                        delayed=False,\n                        reference_doctype=self.doctype,\n                        reference_name=self.name)\n        self.db_set('status', 'Sent')\n\n", "CodeBleu_score": 33.94646798030209}, {"code": "def send_summary(self)\n\t\n    # Get message details\n    message_details = self.get_message_details()\n\n    # Get email addresses of users in specified group\n    email_addresses = self.get_user_emails_from_group(message_details.get(\"group\"))\n\n    # Send email\n    frappe.sendmail(recipients=email_addresses,\n                    sender=frappe.session.user,\n                    subject=\"Daily summary of replies to: \" + message_details.get(\"subject\"),\n                    message=frappe.render_template(\"templates/emails/daily_summary.html\", message_details),\n                    delayed=False)\n\n    # Update status to \"Sent\"\n    self.db_set(\"status\", \"Sent\")\n\n", "CodeBleu_score": 33.58441561305935}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t\n    if self.job_applicant:\n        job_applicant = frappe.get_doc(\"Job Applicant\", self.job_applicant)\n        if job_applicant:\n            existing_interviews = frappe.get_all(\"Interview\", filters={\"job_applicant\": self.job_applicant, \"interview_round\": self.interview_round}, fields=[\"name\"])\n            if existing_interviews:\n                frappe.throw(\"Job Applicant {0} is already scheduled for interview in Interview Round {1}.<br> Please check the Interview record {2}\".format(job_applicant.applicant_name, self.interview_round, get_link_to_form(\"Interview\", existing_interviews[0].name)))\n\n", "CodeBleu_score": 44.70646590673706}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.job_applicant and self.interview_round:\n        duplicate_interview = frappe.db.sql(\"\"\"select name, job_applicant, interview_round from `tabInterview Schedule`\n            where job_applicant = %s and interview_round = %s and name != %s\"\"\", (self.job_applicant, self.interview_round, self.name))\n        if duplicate_interview:\n            existing_interview_record = duplicate_interview[0][0]\n            job_applicant = duplicate_interview[0][1]\n            interview_round = duplicate_interview[0][2]\n            frappe.throw(_(\"Job Applicant {0} is already scheduled for Interview Round {1} in Interview Record {2}\").format(\n                get_link_to_form(\"Job Applicant\", job_applicant), interview_round, get_link_to_form(\"Interview Schedule\", existing_interview_record)),\n                frappe.DuplicateEntryError)\n\n", "CodeBleu_score": 43.04198404477017}, {"code": "def validate_duplicate_interview(self)\n\t\n\n    job_applicant = frappe.get_doc(\"Job Applicant\", self.job_applicant)\n    if job_applicant.one_fm_first_name_in_arabic:\n        job_applicant_name = job_applicant.one_fm_first_name_in_arabic + \" \" + job_applicant.one_fm_second_name_in_arabic + \" \" + job_applicant.one_fm_third_name_in_arabic + \" \" + job_applicant.one_fm_last_name_in_arabic\n    else:\n        job_applicant_name = job_applicant.first_name + \" \" + job_applicant.middle_name + \" \" + job_applicant.last_name\n\n    interview_round = frappe.get_doc(\"Interview Round\", self.interview_round)\n    interview_round_name = interview_round.interview_round_name\n\n    duplicate_interview = frappe.db.sql(\"\"\"\n        SELECT\n            name\n        FROM `tabInterview`\n        WHERE\n            job_applicant = %(job_applicant)s\n            AND interview_round = %(interview_round)s\n            AND name != %(name)s\n        \"\"\",\n        {\n            \"job_applicant\": self.job_applicant,\n            \"interview_round\": self.interview_round,\n            \"name\": self.name\n        },\n        as_dict=True\n    )\n\n    if duplicate_interview:\n        frappe.throw(\n            _(\"Job Applicant {0} has already appeared for interview round {1}. Please check {2} for more details.\").format(\n                frappe.bold(job_applicant_name),\n                frappe.bold(interview_round_name),\n                get_link_to_form(\"Interview\", duplicate_interview[0].name)\n            )\n        )\n", "CodeBleu_score": 40.18060707791493}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\t\n    self.average_rating = 0\n    if self.skill_assessments:\n        total_ratings = sum(assessment.rating for assessment in self.skill_assessments if assessment.rating)\n        self.average_rating = total_ratings / len(self.skill_assessments)\n\n", "CodeBleu_score": 34.930598840775886}, {"code": "def calculate_average_rating(self)\n\t\n    total = 0\n    count = 0\n    for assessment in self.assessments:\n        if assessment.rating:\n            total += assessment.rating\n            count += 1\n    if count:\n        self.average_rating = total / count\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 26.62228760845513}, {"code": "def calculate_average_rating(self)\n\t\n    ratings = [assessment.rating for assessment in self.assessments if assessment.rating]\n    self.average_rating = sum(ratings) / len(ratings) if ratings else 0\n\n", "CodeBleu_score": 21.232077437035652}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    if doc.interviewers:\n        for interviewer in doc.interviewers:\n            interview.append(\"interview_details\", {\"interviewer\": interviewer})\n    interview.save()\n    return interview\n", "CodeBleu_score": 45.49047832676296}, {"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.get(\"interview_round\")\n    interview.designation = doc.get(\"designation\")\n    if doc.get(\"interviewers\"):\n        for interviewer in doc.get(\"interviewers\"):\n            interview.append(\"interview_details\", {\"interviewer\": interviewer})\n    return interview\n\n", "CodeBleu_score": 39.66916887711889}, {"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    if doc.interviewers:\n        for interviewer in doc.interviewers:\n            interview.append(\n                \"interview_details\",\n                {\"interviewer\": interviewer},\n            )\n    return interview\n\n", "CodeBleu_score": 43.692431863086775}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\t\n    return frappe.get_all(\n        \"Job Offer\",\n        filters={\n            \"designation\": self.designation,\n            \"company\": self.company,\n            \"status\": \"Submitted\",\n            \"date_of_creation\": [\">=\", from_date],\n            \"date_of_creation\": [\"<=\", to_date],\n        },\n    )\n\n", "CodeBleu_score": 51.20282643277925}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    return frappe.db.sql(\"\"\"select name from `tabJob Offer` where designation = %s and company = %s and status = 1 and date_of_creation between %s and %s\"\"\", (self.designation, self.company, from_date, to_date), as_dict=1)\n\n", "CodeBleu_score": 27.485520604245263}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offer_list = frappe.get_all(\"Job Offer\",\n                                     fields=[\"name\"],\n                                     filters={\n                                         \"status\": \"Submitted\",\n                                         \"designation\": self.designation,\n                                         \"company\": self.company,\n                                         \"creation\": [\">=\", from_date],\n                                         \"creation\": [\"<=\", to_date]\n                                     })\n    return job_offer_list\n\n", "CodeBleu_score": 45.082787263850854}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if company:\n        job_offers = frappe.get_all(\"Job Offer\", filters={\"company\": company, \"docstatus\": 1}, fields=[\"name\"])\n        accepted_job_offers = frappe.get_all(\"Job Offer\", filters={\"company\": company, \"docstatus\": 1, \"status\": \"Accepted\"}, fields=[\"name\"])\n    elif department:\n        job_offers = frappe.get_all(\"Job Offer\", filters={\"department\": department, \"docstatus\": 1}, fields=[\"name\"])\n        accepted_job_offers = frappe.get_all(\"Job Offer\", filters={\"department\": department, \"docstatus\": 1, \"status\": \"Accepted\"}, fields=[\"name\"])\n    else:\n        job_offers = frappe.get_all(\"Job Offer\", filters={\"docstatus\": 1}, fields=[\"name\"])\n        accepted_job_offers = frappe.get_all(\"Job Offer\", filters={\"docstatus\": 1, \"status\": \"Accepted\"}, fields=[\"name\"])\n    try:\n        acceptance_rate = len(accepted_job_offers) / len(job_offers)\n        return acceptance_rate, \"Percent\"\n    except ZeroDivisionError:\n        return 0, \"Percent\"\n\n", "CodeBleu_score": 31.10886357364394}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    job_offers = frappe.get_all('Job Offer', filters={'docstatus': 1}, fields=['name'])\n    job_offers_len = len(job_offers)\n    accepted_offers = frappe.get_all('Job Offer', filters={'docstatus': 1, 'status': 'Accepted'}, fields=['name'])\n    accepted_offers_len = len(accepted_offers)\n    if job_offers_len > 0:\n        rate = (accepted_offers_len / job_offers_len) * 100\n    else:\n        rate = 0\n    return rate, 'Percent'\n\n", "CodeBleu_score": 31.54491043138333}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if company and department:\n        count = frappe.db.sql(\"\"\"SELECT COUNT(name) FROM `tabJob Offer` WHERE docstatus = 1 AND company = %s AND department = %s\"\"\", (company, department))[0][0]\n        flt = frappe.db.sql(\"\"\"SELECT COUNT(name) FROM `tabJob Offer` WHERE docstatus = 1 AND company = %s AND department = %s AND status = 'Accepted'\"\"\", (company, department))[0][0]\n    elif company:\n        count = frappe.db.sql(\"\"\"SELECT COUNT(name) FROM `tabJob Offer` WHERE docstatus = 1 AND company = %s\"\"\", (company))[0][0]\n        flt = frappe.db.sql(\"\"\"SELECT COUNT(name) FROM `tabJob Offer` WHERE docstatus = 1 AND company = %s AND status = 'Accepted'\"\"\", (company))[0][0]\n    else:\n        count = frappe.db.sql(\"\"\"SELECT COUNT(name) FROM `tabJob Offer` WHERE docstatus = 1\"\"\")[0][0]\n        flt = frappe.db.sql(\"\"\"SELECT COUNT(name) FROM `tabJob Offer` WHERE docstatus = 1 AND status = 'Accepted'\"\"\")[0][0]\n    if count > 0:\n        return flt/count * 100, \"Percent\"\n    else:\n        return 0, \"Percent\"\n\n", "CodeBleu_score": 25.860966809341544}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t    final Result<Employer> result = employerService.register(employerForRegisterDto);\n    if (isSuccess(result)) {\n        return ok(result);\n    }\n    return badRequest(result);\n}", "CodeBleu_score": 49.90337147279076}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t    final var result = this.employerService.register(employerForRegisterDto);\n    if (isSuccess(result)) {\n        return ok(result);\n    }\n    return badRequest(result);\n}", "CodeBleu_score": 44.68924006665434}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t    final Result result = employerService.register(employerForRegisterDto);\n    return isSuccess(result) ? ok(result) : badRequest().body(result);\n}", "CodeBleu_score": 52.30759030175559}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t    final CompanyStaff companyStaff = CompanyStaff.findById(companyStaffForUpdateDto.getId());\n    if (companyStaff == null) {\n        return notFound();\n    }\n\n    if (!arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaff.getPassword())) {\n        return badRequest();\n    }\n\n    companyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n    companyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n    companyStaff.save();\n\n    return ok();\n}", "CodeBleu_score": 36.21413414600586}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t    final CompanyStaff companyStaff = findById(companyStaffForUpdateDto.getId());\n    if (notFound(companyStaff)) {\n        return notFound();\n    }\n    if (not(arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaff.getPassword()))) {\n        return badRequest(\"Password does not match\");\n    }\n    setFirstName(companyStaff, companyStaffForUpdateDto.getFirstName());\n    setLastName(companyStaff, companyStaffForUpdateDto.getLastName());\n    if (not(save(companyStaff))) {\n        return internalServerError();\n    }\n    return updated();\n}", "CodeBleu_score": 36.10340557161579}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t    CompanyStaff companyStaff = findById(companyStaffForUpdateDto.getId());\n    if (companyStaff == null) {\n        return notFound();\n    }\n\n    if (!arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaff.getPassword())) {\n        return badRequest();\n    }\n\n    setFirstName(companyStaffForUpdateDto.getFirstName());\n    setLastName(companyStaffForUpdateDto.getLastName());\n    save();\n    return ok();\n}", "CodeBleu_score": 28.574035365646804}]}
