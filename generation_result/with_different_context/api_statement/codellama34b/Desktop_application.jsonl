{"instance_id": "a6e254b7b855", "generation_result": [{"code": "translateTemplate(template, keystrokesByCommand){\n\t    const newTemplate = []\n    for (const item of template) {\n        if (!item.metadata) {\n            item.metadata = {}\n        }\n        if (item.command) {\n            const command = item.command\n            if (command.startsWith(\"application:\")) {\n                item.metadata.windowSpecific = false\n            } else {\n                item.metadata.windowSpecific = true\n            }\n            if (item.label.includes(\" \")) {\n                item.label = `${item.label} (${keystrokesByCommand[command][0]})`\n            } else {\n                item.accelerator = keystrokesByCommand[command][0]\n            }\n            item.click = () => {\n                global.atomApplication.sendCommand(command)\n            }\n        }\n        if (item.submenu) {\n            item.submenu = translateTemplate(item.submenu, keystrokesByCommand)\n        }\n        newTemplate.push(item)\n    }\n    return newTemplate\n}", "CodeBleu_score": 39.63117395501043}, {"code": "translateTemplate(template, keystrokesByCommand){\n\t    // Iterate through each item in the template\n    for (let i = 0; i < template.length; i++) {\n        // Initialize metadata if missing\n        if (!template[i].metadata) {\n            template[i].metadata = {};\n        }\n\n        // Process commands\n        if (template[i].command) {\n            // Retrieve associated keystrokes\n            let keystrokes = keystrokesByCommand[template[i].command];\n\n            // Assign the first keystroke to the item's label if it includes a space, or to its accelerator otherwise\n            if (template[i].label.includes(\" \")) {\n                template[i].label = template[i].label.replace(\"__\", keystrokes[0]);\n            } else {\n                template[i].accelerator = keystrokes[0];\n            }\n\n            // Set a click event to send the command via the global atomApplication\n            template[i].click = function() {\n                global.atomApplication.sendCommand(template[i].command);\n            };\n\n            // Mark the item as window-specific if the command does not start with \"application:\"\n            if (!template[i].command.startsWith(\"application:\")) {\n                template[i].metadata.windowSpecific = true;\n            }\n        }\n\n        // Process submenus\n        if (template[i].submenu) {\n            template[i].submenu = translateTemplate(template[i].submenu, keystrokesByCommand);\n        }\n    }\n\n    return template;\n}", "CodeBleu_score": 35.93690660799882}, {"code": "translateTemplate(template, keystrokesByCommand){\n\t    var translatedTemplate = []\n    for (var i = 0; i < template.length; i++) {\n        var item = template[i]\n        var command = item.command\n        if (command) {\n            if (!item.metadata) {\n                item.metadata = {}\n            }\n            if (command.startsWith(\"application:\")) {\n                item.metadata.windowSpecific = false\n            } else {\n                item.metadata.windowSpecific = true\n            }\n            if (item.label.includes(\" \")) {\n                item.label = item.label.replace(\"${keystroke}\", keystrokesByCommand[command][0])\n            } else {\n                item.accelerator = keystrokesByCommand[command][0]\n            }\n            item.click = () => {\n                global.atomApplication.sendCommand(command)\n            }\n        }\n        if (item.submenu) {\n            item.submenu = translateTemplate(item.submenu, keystrokesByCommand)\n        }\n        translatedTemplate.push(item)\n    }\n    return translatedTemplate\n}", "CodeBleu_score": 37.03047468031141}]}
{"instance_id": "c4ff073b485f", "generation_result": [{"code": "flattenMenuItems(menu){\n\t  const items = [];\n\n  menu.items.forEach(item => {\n    items.push(item);\n    if (item.submenu) {\n      items.push(...flattenMenuItems(item.submenu));\n    }\n  });\n\n  return items;\n}", "CodeBleu_score": 33.37880076642084}, {"code": "flattenMenuItems(menu){\n\t  const items = [];\n  menu.items.forEach(item => {\n    items.push(item);\n    if (item.submenu) {\n      items.concat(flattenMenuItems(item.submenu));\n    }\n  });\n  return items;\n}", "CodeBleu_score": 33.90807140256161}, {"code": "flattenMenuItems(menu){\n\t    const items = [];\n    for (const item of menu.items) {\n        items.push(item);\n        if (item.submenu) {\n            items.concat(this.flattenMenuItems(item.submenu));\n        }\n    }\n    return items;\n}", "CodeBleu_score": 42.466323704164836}]}
{"instance_id": "dba487230999", "generation_result": [{"code": "const encryptOptions = (options, secret) =>{\n\t  const iv = crypto.randomBytes(16);\n  const cipher = crypto.createCipheriv('aes-256-gcm', secret, iv);\n  const encrypted = Buffer.concat([cipher.update(JSON.stringify(options), 'utf8'), cipher.final()]);\n  const tag = cipher.getAuthTag().toString('hex');\n  return JSON.stringify({\n    iv: iv.toString('hex'),\n    content: encrypted.toString('hex'),\n    tag\n  });\n}", "CodeBleu_score": 54.675714920406215}, {"code": "const encryptOptions = (options, secret) =>{\n\t    const json = JSON.stringify(options);\n    const iv = crypto.randomBytes(16);\n    const cipher = crypto.createCipheriv('aes-256-gcm', secret, iv);\n    const encrypted = Buffer.concat([cipher.update(json, 'utf8'), cipher.final()]);\n    const tag = cipher.getAuthTag().toString('hex');\n    return JSON.stringify({\n        iv: iv.toString('hex'),\n        content: encrypted.toString('hex'),\n        tag: tag\n    });\n}", "CodeBleu_score": 60.08464807120002}, {"code": "const encryptOptions = (options, secret) =>{\n\t  const iv = crypto.randomBytes(16);\n  const cipher = crypto.createCipheriv(\n    \"aes-256-gcm\",\n    Buffer.from(secret, \"hex\"),\n    iv\n  );\n  const encrypted = Buffer.concat([\n    cipher.update(JSON.stringify(options), \"utf8\"),\n    cipher.final(),\n  ]);\n  const tag = cipher.getAuthTag();\n  return JSON.stringify({\n    iv: iv.toString(\"hex\"),\n    authTag: tag.toString(\"hex\"),\n    encryptedData: encrypted.toString(\"hex\"),\n  });\n}", "CodeBleu_score": 49.96514576272177}]}
{"instance_id": "7efe3d7cee0f", "generation_result": [{"code": "createClickHandlers(template){\n\t  for (const item of template) {\n    if (item.command) {\n      if (!item.commandDetail) {\n        item.commandDetail = {}\n      }\n      item.commandDetail.contextCommand = true\n      item.click = () => {\n        global.atomApplication.sendCommandToWindow(item.command, item.commandDetail)\n      }\n    }\n    if (item.submenu) {\n      createClickHandlers(item.submenu)\n    }\n  }\n}", "CodeBleu_score": 59.25109600698273}, {"code": "createClickHandlers(template){\n\t    template.forEach(item => {\n        if (item.command) {\n            item.commandDetail = item.commandDetail || {};\n            item.commandDetail.contextCommand = true;\n            item.click = (menuItem, browserWindow) => {\n                global.atomApplication.sendCommandToWindow(browserWindow, item.command, item.commandDetail);\n            };\n        }\n        if (item.submenu) {\n            createClickHandlers(item.submenu);\n        }\n    });\n}", "CodeBleu_score": 60.02569182953208}, {"code": "createClickHandlers(template){\n\t  template.forEach(item => {\n    if (item.command) {\n      item.commandDetail = item.commandDetail || {}\n      item.commandDetail.contextCommand = true\n      item.click = (menuItem, browserWindow) => {\n        global.atomApplication.sendCommandToWindow(item.command, browserWindow)\n      }\n    }\n    if (item.submenu) {\n      createClickHandlers(item.submenu)\n    }\n  })\n}", "CodeBleu_score": 56.50921032856932}]}
{"instance_id": "851df56cc3b9", "generation_result": [{"code": "async didSavePath(window, path){\n\t  const recoveryFile = this.recoveryFilesByFilePath.get(path);\n  if (recoveryFile) {\n    try {\n      await recoveryFile.release();\n      if (recoveryFile.isReleased()) {\n        this.windowsByRecoveryFile.get(recoveryFile).delete(window);\n        this.recoveryFilesByFilePath.delete(path);\n        this.recoveryFilesByWindow.get(window).delete(recoveryFile);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}", "CodeBleu_score": 69.39176061388832}, {"code": "async didSavePath(window, path){\n\t    const recoveryFile = this.recoveryFilesByFilePath.get(path);\n    if (recoveryFile) {\n        try {\n            await recoveryFile.release();\n        } catch (error) {\n            console.log(error);\n        }\n        if (recoveryFile.isReleased) {\n            this.recoveryFilesByFilePath.delete(path);\n            this.windowsByRecoveryFile.get(recoveryFile).delete(window);\n            this.recoveryFilesByWindow.get(window).delete(recoveryFile);\n        }\n    }\n}", "CodeBleu_score": 71.0309797352097}, {"code": "async didSavePath(window, path){\n\t  let recoveryFile = this.recoveryFilesByFilePath.get(path);\n  if (recoveryFile) {\n    try {\n      await recoveryFile.release();\n      if (recoveryFile.isReleased) {\n        this.recoveryFilesByFilePath.delete(path);\n        this.windowsByRecoveryFile.get(recoveryFile).delete(window);\n        this.recoveryFilesByWindow.get(window).delete(recoveryFile);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n}", "CodeBleu_score": 67.64492074284311}]}
{"instance_id": "37d777933a87", "generation_result": [{"code": "async didCrashWindow(window){\n\t  const promises = [];\n  for (const recoveryFile of this.windowsByRecoveryFile.get(window)) {\n    promises.push(\n      recoveryFile\n        .recover()\n        .catch(error => {\n          const message =\n            'A file that Atom was saving could be corrupted';\n          const detail =\n            `Error ${error.code}. There was a crash while saving \"${\n              recoveryFile.originalPath\n            }\", so this file might be blank or corrupted.\n` +\n            `Atom couldn't recover it automatically, but a recovery file has been saved at: \"${\n              recoveryFile.recoveryPath\n            }\".`;\n          console.log(detail);\n          dialog.showMessageBox(window, {\n            type: 'info',\n            buttons: ['OK'],\n            message,\n            detail\n          });\n        })\n        .then(() => {\n          this.windowsByRecoveryFile.get(window).delete(recoveryFile);\n          this.recoveryFilesByWindow.get(window).delete(recoveryFile.originalPath);\n          this.recoveryFilesByFilePath.delete(recoveryFile.recoveryPath);\n        })\n    );\n  }\n\n  await Promise.all(promises);\n}", "CodeBleu_score": 81.00827142674969}, {"code": "async didCrashWindow(window){\n\t  const promises = [];\n  const recoveryFiles = this.recoveryFilesByWindow.get(window);\n  if (recoveryFiles) {\n    for (const recoveryFile of recoveryFiles) {\n      promises.push(\n        recoveryFile\n          .recover()\n          .catch(error => {\n            const message =\n              'A file that Atom was saving could be corrupted';\n            const detail =\n              `Error ${error.code}. There was a crash while saving \"${\n                recoveryFile.originalPath\n              }\", so this file might be blank or corrupted.\n` +\n              `Atom couldn't recover it automatically, but a recovery file has been saved at: \"${\n                recoveryFile.recoveryPath\n              }\".`;\n            console.log(detail);\n            dialog.showMessageBox(window, {\n              type: 'info',\n              buttons: ['OK'],\n              message,\n              detail\n            });\n          })\n          .then(() => {\n            this.windowsByRecoveryFile.delete(recoveryFile);\n            this.recoveryFilesByWindow.get(window).delete(recoveryFile);\n            this.recoveryFilesByFilePath.delete(recoveryFile.originalPath);\n          })\n      );\n    }\n  }\n  await Promise.all(promises);\n}", "CodeBleu_score": 81.04376545348879}, {"code": "async didCrashWindow(window){\n\t  const promises = [];\n  const recoveryFiles = this.recoveryFilesByWindow.get(window);\n  if (recoveryFiles) {\n    for (const recoveryFile of recoveryFiles) {\n      promises.push(\n        recoveryFile\n          .recover()\n          .catch(error => {\n            const message = 'A file that Atom was saving could be corrupted';\n            const detail =\n              `Error ${error.code}. There was a crash while saving \"${\n                recoveryFile.originalPath\n              }\", so this file might be blank or corrupted.\n` +\n              `Atom couldn't recover it automatically, but a recovery file has been saved at: \"${\n                recoveryFile.recoveryPath\n              }\".`;\n            console.log(detail);\n            dialog.showMessageBox(window, {\n              type: 'info',\n              buttons: ['OK'],\n              message,\n              detail\n            });\n          })\n          .then(() => {\n            this.windowsByRecoveryFile.delete(recoveryFile);\n            this.recoveryFilesByWindow.get(window).delete(recoveryFile);\n            this.recoveryFilesByFilePath.delete(recoveryFile.originalPath);\n            this.recoveryFilesByFilePath.delete(recoveryFile.recoveryPath);\n          })\n      );\n    }\n  }\n\n  await Promise.all(promises);\n}", "CodeBleu_score": 80.2364176869581}]}
{"instance_id": "935916bc7ea0", "generation_result": [{"code": "async function copyFile(source, destination, mode){\n\t  return new Promise((resolve, reject) => {\n    const readStream = fs.createReadStream(source);\n    readStream.on('error', reject);\n    readStream.once('open', () => {\n      mkdirp(Path.dirname(destination), (err) => {\n        if (err) return reject(err);\n        const writeStream = fs.createWriteStream(destination, { mode });\n        writeStream.on('error', reject);\n        writeStream.on('open', () => {\n          readStream.pipe(writeStream);\n        });\n        writeStream.once('finish', () => resolve());\n      });\n    });\n  });\n}", "CodeBleu_score": 66.86957140714107}, {"code": "async function copyFile(source, destination, mode){\n\t  return new Promise((resolve, reject) => {\n    const readStream = fs.createReadStream(source);\n    readStream.on('error', reject);\n    readStream.once('open', () => {\n      mkdirp(Path.dirname(destination), (err) => {\n        if (err) reject(err);\n        const writeStream = fs.createWriteStream(destination, { mode });\n        writeStream.on('error', reject);\n        writeStream.on('open', () => {\n          readStream.pipe(writeStream);\n          writeStream.once('finish', () => {\n            resolve();\n          });\n        });\n      });\n    });\n  });\n}", "CodeBleu_score": 62.432967812657616}, {"code": "async function copyFile(source, destination, mode){\n\t  return new Promise((resolve, reject) => {\n    const readStream = fs.createReadStream(source);\n    readStream.on('error', reject).once('open', () => {\n      mkdirp(Path.dirname(destination), (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          const writeStream = fs.createWriteStream(destination, { mode });\n          writeStream\n            .on('error', reject)\n            .on('open', () => readStream.pipe(writeStream))\n            .once('finish', resolve);\n        }\n      });\n    });\n  });\n}", "CodeBleu_score": 70.09319161208063}]}
{"instance_id": "5410353afedd", "generation_result": [{"code": "function handleStartupEventWithSquirrel(){\n\t    if (process.platform !== \"win32\") return false;\n    const SquirrelUpdate = require(\"./squirrel-update\");\n    const command = process.argv[1];\n    return SquirrelUpdate.handleStartupEvent(command);\n}", "CodeBleu_score": 71.69861519107923}, {"code": "function handleStartupEventWithSquirrel(){\n\t\tif (process.platform !== 'win32') return false;\n\tconst SquirrelUpdate = require('./SquirrelUpdate');\n\tconst command = process.argv[1];\n\tSquirrelUpdate.handleStartupEvent(command);\n}", "CodeBleu_score": 69.17925242458902}, {"code": "function handleStartupEventWithSquirrel(){\n\t  if (process.platform !== 'win32') {\n    return false;\n  }\n\n  const SquirrelUpdate = require('./squirrel-update');\n  const squirrelCommand = process.argv[1];\n  SquirrelUpdate.handleStartupEvent(squirrelCommand);\n}", "CodeBleu_score": 90.96097664147798}]}
{"instance_id": "5fb2d4f077cb", "generation_result": [{"code": "function normalizeDriveLetterName(filePath){\n\t  if (process.platform === 'win32' && filePath) {\n    const driveLetter = filePath.charAt(0);\n    if (driveLetter >= 'a' && driveLetter <= 'z') {\n      return `${driveLetter.toUpperCase()}${filePath.slice(1)}`;\n    }\n  }\n  return filePath;\n}", "CodeBleu_score": 55.2070398196654}, {"code": "function normalizeDriveLetterName(filePath){\n\t    if (process.platform === 'win32' && filePath) {\n        const driveLetter = filePath.substring(0, 1);\n        if (driveLetter.match(/[a-z]/)) {\n            return filePath.replace(driveLetter, driveLetter.toUpperCase());\n        }\n    }\n    return filePath;\n}", "CodeBleu_score": 56.104127232977774}, {"code": "function normalizeDriveLetterName(filePath){\n\t    if (process.platform === 'win32' && filePath) {\n        return filePath.replace(/^([a-z]):/, (_, driveLetter) => driveLetter.toUpperCase());\n    }\n    return filePath;\n}", "CodeBleu_score": 67.1884939007473}]}
{"instance_id": "e61a087ae10f", "generation_result": [{"code": "register(callback){\n\t  this.parts.forEach(part => {\n    const key = `HKCU\\\\${this.baseKey}\\\\${part.key}`;\n    const value = part.value;\n    reg.create(key, reg.SZ, value, () => {\n      reg.set(key, reg.SZ, value, () => {\n        callback();\n      });\n    });\n  });\n}", "CodeBleu_score": 32.984035861759395}, {"code": "register(callback){\n\t\tthis.parts.forEach(part => {\n\t\tconst key = this.reg.set(part.registryKey, part.registryValue);\n\t\tif (key) {\n\t\t\tthis.reg.create(key, part.registryValue);\n\t\t}\n\t});\n\tcallback();\n}", "CodeBleu_score": 21.966612345260454}, {"code": "register(callback){\n\t  this.parts.forEach(part => {\n    reg.create(part.registryKey, () => {\n      reg.set(part.registryKey, part.registryValue, () => {\n        callback();\n      });\n    });\n  });\n}", "CodeBleu_score": 19.091487188292838}]}
{"instance_id": "35b1a1ac391a", "generation_result": [{"code": "showSaveDialog(options, callback){\n\t    if (callback) {\n        this.getCurrentWindow().showSaveDialog(options, callback);\n    } else {\n        if (typeof options === 'string') {\n            options = { defaultPath: options };\n        }\n        return this.getCurrentWindow().showSaveDialog(options);\n    }\n}", "CodeBleu_score": 90.42272023277316}, {"code": "showSaveDialog(options, callback){\n\t    if (callback) {\n        this.getCurrentWindow().showSaveDialog(options, callback);\n    } else {\n        if (typeof options === 'string') {\n            options = {defaultPath: options};\n        }\n        return this.getCurrentWindow().showSaveDialog(options);\n    }\n}", "CodeBleu_score": 81.61494520169079}, {"code": "showSaveDialog(options, callback){\n\t    if (typeof options === 'string') {\n        options = { defaultPath: options };\n    }\n\n    if (typeof callback === 'function') {\n        this.getCurrentWindow().showSaveDialog(options, callback);\n    } else {\n        return this.getCurrentWindow().showSaveDialog(options);\n    }\n}", "CodeBleu_score": 92.06899305520369}]}
{"instance_id": "a7e394aca19e", "generation_result": [{"code": "async restoreWindowDimensions(){\n\t\t// Check if current window dimensions are set and valid\n\tif (!this.isValidDimensions(this.currentWindowDimensions)) {\n\t\t// If not, assign default window dimensions\n\t\tthis.currentWindowDimensions = this.getDefaultWindowDimensions();\n\t}\n\t// Set window dimensions\n\tawait this.setWindowDimensions(this.currentWindowDimensions);\n\t// Return current window dimensions\n\treturn this.currentWindowDimensions;\n}", "CodeBleu_score": 43.1194606176235}, {"code": "async restoreWindowDimensions(){\n\t    let dimensions = await this.getWindowDimensions();\n    if (!this.isValidDimensions(dimensions)) {\n        dimensions = await this.setWindowDimensions(await this.getDefaultWindowDimensions());\n    }\n    return dimensions;\n}", "CodeBleu_score": 27.317331927296856}, {"code": "async restoreWindowDimensions(){\n\t    // Check if the current window dimensions are set and valid\n    if (!this.isValidDimensions()) {\n        // If not, assign default window dimensions\n        this.setWindowDimensions(this.getDefaultWindowDimensions());\n    }\n    // Set the window dimensions and return the dimensions\n    return this.setWindowDimensions();\n}", "CodeBleu_score": 23.309522485820246}]}
{"instance_id": "c39fbfaa6502", "generation_result": [{"code": "installShellCommandsInteractively(){\n\t  const installErrorDialog = (error) => {\n    const message = `Failed to install shell commands for ${this.getProductName()}.\n\n${error.message}`;\n    const detail = `Shell commands must be installed manually by executing the following commands:\n\n${this.getInstallShellCommandsInfo()}`;\n    this.applicationDelegate.confirm({\n      message,\n      detail,\n      buttons: ['OK']\n    });\n  };\n\n  const installAtomCommand = () => {\n    return this.installAtomCommandInteractively().catch(error => {\n      installErrorDialog(error);\n      throw error;\n    });\n  };\n\n  const installApmCommand = () => {\n    return this.installApmCommandInteractively().catch(error => {\n      installErrorDialog(error);\n      throw error;\n    });\n  };\n\n  this.installAtomCommandInteractively().then(installApmCommand).then(() => {\n    this.applicationDelegate.confirm({\n      message: `The ${this.getProductName()} shell commands have been installed.`,\n      buttons: ['OK']\n    });\n  }).catch(() => {// Ignore errors, they'll be handled by the individual command installers\n  });\n}", "CodeBleu_score": 38.79818084642697}, {"code": "installShellCommandsInteractively(){\n\t  const displayErrorDialog = (message, stderr) => {\n    const detail = `\n    ${message}\n\n    # stderr\n    ${stderr}\n    `\n    this.applicationDelegate.confirm({\n      message,\n      detail,\n      buttons: ['OK']\n    })\n  }\n\n  const installAtomCommand = () => {\n    return this.applicationDelegate.installShellCommands()\n      .then(() => installApmCommand())\n      .catch((error) => displayErrorDialog('Failed to install shell commands', error.stderr))\n  }\n\n  const installApmCommand = () => {\n    return this.applicationDelegate.installApmCommand()\n      .then(() => showConfirmationDialog())\n      .catch((error) => displayErrorDialog('Failed to install shell commands', error.stderr))\n  }\n\n  const showConfirmationDialog = () => {\n    this.applicationDelegate.confirm({\n      message: 'Commands installed',\n      detail: 'The `atom` and `apm` commands have been installed in your $PATH.\nRestart your terminal to use them.',\n      buttons: ['OK']\n    })\n  }\n\n  return installAtomCommand()\n}", "CodeBleu_score": 38.34579098413169}, {"code": "installShellCommandsInteractively(){\n\t  const displayErrorDialog = (error) => {\n    this.applicationDelegate.confirm({\n      message: `Failed to install shell commands for ${this.name}.\n${error.message}`\n    })\n  }\n\n  const installAtomCommand = () => {\n    return this.installAtomCommandInteractively().catch((error) => {\n      if (error.code === 'EACCES') {\n        this.installAtomCommandInteractively({ sudo: true })\n      } else {\n        throw error\n      }\n    })\n  }\n\n  const installApmCommand = () => {\n    return this.installApmCommandInteractively().catch((error) => {\n      if (error.code === 'EACCES') {\n        this.installApmCommandInteractively({ sudo: true })\n      } else {\n        throw error\n      }\n    })\n  }\n\n  installAtomCommand().then(() => {\n    return installApmCommand()\n  }).then(() => {\n    this.applicationDelegate.confirm({\n      message: `The shell commands for ${this.name} have been installed.\n      Run \\`atom --help\\` or \\`apm --help\\` for more information.`\n    })\n  }).catch(displayErrorDialog)\n}", "CodeBleu_score": 37.768775902837824}]}
{"instance_id": "09d527496128", "generation_result": [{"code": "installCommand(commandPath, commandName, askForPrivilege, callback){\n\t    if (process.platform !== 'darwin') {\n        callback(new Error('This function is only supported on macOS.'));\n        return;\n    }\n\n    const installDir = this.getInstallDirectory();\n    const symlinkPath = path.join(installDir, commandName);\n\n    fs.readlink(symlinkPath, (err, link) => {\n        if (err && err.code !== 'ENOENT') {\n            callback(err);\n            return;\n        }\n\n        if (link === commandPath) {\n            callback();\n            return;\n        }\n\n        this.createSymlink(commandPath, symlinkPath, askForPrivilege, callback);\n    });\n}", "CodeBleu_score": 42.553552122215585}, {"code": "installCommand(commandPath, commandName, askForPrivilege, callback){\n\t  if (process.platform !== 'darwin') {\n    callback(new Error('Unsupported platform'));\n    return;\n  }\n  const installDir = this.getInstallDirectory();\n  const symlinkPath = path.join(installDir, commandName);\n  fs.readlink(symlinkPath, (err, linkPath) => {\n    if (err && err.code === 'ENOENT') {\n      this.createSymlink(commandPath, symlinkPath, callback);\n    } else if (err && err.code === 'EACCES' && askForPrivilege) {\n      this.createSymlink(commandPath, symlinkPath, true, callback);\n    } else if (err) {\n      callback(err);\n    } else if (linkPath !== commandPath) {\n      callback(new Error(`Symlink already exists and points to ${linkPath}`));\n    } else {\n      callback();\n    }\n  });\n}", "CodeBleu_score": 51.298901344675826}, {"code": "installCommand(commandPath, commandName, askForPrivilege, callback){\n\t    if (process.platform !== 'darwin') {\n        callback('This command is only supported on macOS.');\n        return;\n    }\n    const installDirectory = this.getInstallDirectory();\n    const symlinkPath = path.join(installDirectory, commandName);\n    fs.readlink(symlinkPath, (err, linkString) => {\n        if (err) {\n            if (err.code === 'EACCES' && askForPrivilege) {\n                this.createSymlink(commandPath, symlinkPath, callback);\n                return;\n            }\n            if (err.code !== 'ENOENT') {\n                callback(err);\n                return;\n            }\n        }\n        if (linkString !== commandPath) {\n            this.createSymlink(commandPath, symlinkPath, callback);\n            return;\n        }\n        callback(null);\n    });\n}", "CodeBleu_score": 45.63969981455087}]}
{"instance_id": "4807d5d43396", "generation_result": [{"code": "moveUp(rowCount = 1, { moveToEndOfSelection } = {}){\n\t    let { goalColumn, selection } = this\n    let range\n    if (moveToEndOfSelection && selection.getScreenRange().isEmpty()) {\n        range = selection.cursor.getScreenRange()\n    } else {\n        range = selection.getScreenRange()\n    }\n    const { start } = range\n    const row = start.row - rowCount\n    if (goalColumn == null) {\n        goalColumn = start.column\n    }\n    if (row < 0) {\n        return\n    }\n    const newRange = new Range(\n        new Point(row, goalColumn),\n        new Point(row, goalColumn),\n    )\n    this.setScreenPosition(newRange.start, { skipSoftWrapIndentation: true })\n    this.goalColumn = this.editor.getLastCursor().getScreenRange().end.column\n}", "CodeBleu_score": 29.45621450961787}, {"code": "moveUp(rowCount = 1, { moveToEndOfSelection } = {}){\n\t  if (moveToEndOfSelection) {\n    this.goalColumn = null;\n  }\n  const position = this.getScreenPosition();\n  const { row, column } = position;\n  const newRow = Math.max(row - rowCount, 0);\n  const newColumn = this.goalColumn != null ? this.goalColumn : column;\n  this.setScreenPosition({ row: newRow, column: newColumn }, { skipSoftWrapIndentation: true });\n  this.goalColumn = column;\n}", "CodeBleu_score": 41.15409835995023}, {"code": "moveUp(rowCount = 1, { moveToEndOfSelection } = {}){\n\t  if (this.goalColumn == null) {\n    this.goalColumn = this.getScreenColumn();\n  }\n\n  let range;\n  if (moveToEndOfSelection && !this.selection.isEmpty()) {\n    range = this.selection.getScreenRange();\n  } else {\n    range = new Range(this.getScreenPosition(), this.getScreenPosition());\n  }\n\n  const newScreenRow = this.translateScreenPositionWithSoftTabs(\n    range.start,\n    -rowCount,\n    true,\n  ).row;\n\n  const newScreenPosition = new Point(newScreenRow, this.goalColumn);\n  this.setScreenPosition(newScreenPosition, {\n    autoscroll: false,\n  });\n  this.goalColumn = this.getScreenColumn();\n}", "CodeBleu_score": 39.7803411899726}]}
{"instance_id": "a18da78a3351", "generation_result": [{"code": "decorationsForScreenRowRange(startScreenRow, endScreenRow){\n\t  const decorationsByMarkerId = {}\n  for (const layer of this.decorationLayers) {\n    const markers = layer.findMarkers({\n      intersectsScreenRowRange: [startScreenRow, endScreenRow]\n    })\n    for (const marker of markers) {\n      const decorations = layer.getDecorations({\n        intersectsScreenRowRange: [startScreenRow, endScreenRow],\n        intersectsMarker: marker\n      })\n      decorationsByMarkerId[marker.id] = decorations\n    }\n  }\n  return decorationsByMarkerId\n}", "CodeBleu_score": 55.867996709935966}, {"code": "decorationsForScreenRowRange(startScreenRow, endScreenRow){\n\t  const decorationsByMarker = {}\n  const decorations = this.decorationsByLayer\n  for (let layerId in decorations) {\n    const layer = decorations[layerId]\n    const markers = layer.findMarkers({\n      intersectsScreenRowRange: [startScreenRow, endScreenRow]\n    })\n    for (let i = 0, n = markers.length; i < n; i++) {\n      const marker = markers[i]\n      const markerDecorations = layer.getMarkerDecorations(marker)\n      decorationsByMarker[marker.id] = markerDecorations\n    }\n  }\n  return decorationsByMarker\n}", "CodeBleu_score": 48.30379456352857}, {"code": "decorationsForScreenRowRange(startScreenRow, endScreenRow){\n\t  const decorationsByMarker = {}\n  for (let layer of this.decorationLayers) {\n    layer.findMarkers({\n      intersectsScreenRowRange: [startScreenRow, endScreenRow]\n    }).forEach(marker => {\n      decorationsByMarker[marker.id] = this.decorationsByMarker.get(marker)\n    })\n  }\n  return decorationsByMarker\n}", "CodeBleu_score": 34.51806731281212}]}
{"instance_id": "950f6b74f379", "generation_result": [{"code": "decorateMarkerLayer(markerLayer, decorationParams){\n\t  if (markerLayer.isDestroyed()) {\n    throw new Error('Cannot decorate a destroyed marker layer')\n  }\n\n  const displayLayer = this.displayLayer.getMarkerLayer(markerLayer.id)\n  const decoration = new LayerDecoration(displayLayer, decorationParams)\n  const decorations = this.layerDecorationsByMarkerLayer.get(markerLayer)\n  if (decorations) {\n    decorations.add(decoration)\n  } else {\n    this.layerDecorationsByMarkerLayer.set(markerLayer, new Set([decoration]))\n  }\n\n  this.observeDecoratedLayer(markerLayer)\n  this.emitDidUpdateDecorations()\n  return decoration\n}", "CodeBleu_score": 62.45858956661587}, {"code": "decorateMarkerLayer(markerLayer, decorationParams){\n\t    if (markerLayer.isDestroyed()) {\n      throw new Error(\"Cannot decorate a destroyed marker layer.\")\n    }\n\n    const displayLayer = this.displayLayer.getMarkerLayer(markerLayer)\n    const decoration = new LayerDecoration(displayLayer, decorationParams)\n    this.layerDecorationsByMarkerLayer.set(markerLayer, decoration)\n\n    this.observeDecoratedLayer(markerLayer)\n    this.emitDidUpdateDecorations()\n\n    return decoration\n  }", "CodeBleu_score": 49.5473765258905}, {"code": "decorateMarkerLayer(markerLayer, decorationParams){\n\t    if (markerLayer.isDestroyed()) {\n      throw new Error(\"Cannot decorate a destroyed marker layer\")\n    }\n\n    const displayLayer = this.displayLayer.getMarkerLayer(markerLayer)\n    const decoration = new LayerDecoration(displayLayer, decorationParams)\n\n    const decorationsForMarkerLayer =\n      this.layerDecorationsByMarkerLayer.get(markerLayer) || []\n    decorationsForMarkerLayer.push(decoration)\n    this.layerDecorationsByMarkerLayer.set(markerLayer, decorationsForMarkerLayer)\n\n    this.observeDecoratedLayer(markerLayer)\n    this.emitDidUpdateDecorations()\n    return decoration\n  }", "CodeBleu_score": 55.65640629695403}]}
{"instance_id": "ab015a5cc75d", "generation_result": [{"code": "observeDecoratedLayer(layer, isMarkerDecoration){\n\t\tif (isMarkerDecoration) {\n\t\tthis.markerDecorationCountsByLayer.set(layer, (this.markerDecorationCountsByLayer.get(layer) || 0) + 1);\n\t}\n\n\tthis.decorationCountsByLayer.set(layer, (this.decorationCountsByLayer.get(layer) || 0) + 1);\n\n\tif (this.decorationCountsByLayer.get(layer) === 1) {\n\t\tconst disposable = layer.onDidUpdate(() => this.emitDidUpdateDecorations());\n\t\tthis.layerUpdateDisposablesByLayer.set(layer, disposable);\n\t}\n}", "CodeBleu_score": 59.27620843046447}, {"code": "observeDecoratedLayer(layer, isMarkerDecoration){\n\t  let layerId = layer.id;\n  let decorationCount = this.decorationCountsByLayer.get(layerId) || 0;\n  this.decorationCountsByLayer.set(layerId, decorationCount + 1);\n  if (decorationCount === 0) {\n    this.layerUpdateDisposablesByLayer.set(layerId, layer.onDidUpdate(() => {\n      this.emitDidUpdateDecorations();\n    }));\n  }\n  if (isMarkerDecoration) {\n    let markerDecorationCount = this.markerDecorationCountsByLayer.get(layerId) || 0;\n    this.markerDecorationCountsByLayer.set(layerId, markerDecorationCount + 1);\n  }\n}", "CodeBleu_score": 52.54079564191056}, {"code": "observeDecoratedLayer(layer, isMarkerDecoration){\n\t    if (isMarkerDecoration) {\n        this.markerDecorationCountsByLayer.set(layer, (this.markerDecorationCountsByLayer.get(layer) || 0) + 1);\n    }\n    else {\n        this.decorationCountsByLayer.set(layer, (this.decorationCountsByLayer.get(layer) || 0) + 1);\n    }\n    if (!this.layerUpdateDisposablesByLayer.has(layer)) {\n        this.layerUpdateDisposablesByLayer.set(layer, layer.onDidUpdate(this.emitDidUpdateDecorations.bind(this)));\n    }\n}", "CodeBleu_score": 51.77284593577753}]}
{"instance_id": "9d7f091a1b67", "generation_result": [{"code": "finishLoading(){\n\t\t// measure the load time of several operations\n\tconst start = performance.now();\n\t// update the path by joining it with the package manager's resource path\n\tthis.path = path.join(this.path, this.resourcePath);\n\t// add it to the ModuleCache with its metadata\n\tModuleCache.add(this.path, this.metadata);\n\t// load the required stylesheets\n\tthis.loadStylesheets();\n\t// retrieve the main module path\n\tthis.getMainModulePath();\n\t// measure the load time\n\tthis.measure = performance.now() - start;\n}", "CodeBleu_score": 38.01017256792962}, {"code": "finishLoading(){\n\t    this.measure('load time', () => {\n        this.getMainModulePath();\n        this.loadStylesheets();\n        this.getMainModulePath();\n    });\n    this.measure('path join', () => {\n        path.join(this.path, this.packageManager.resourcePath);\n    });\n    this.path = path.join(this.path, this.packageManager.resourcePath);\n    this.packageManager.add(this.path, this.metadata);\n    this.measure('getMainModulePath', () => {\n        this.getMainModulePath();\n    });\n}", "CodeBleu_score": 31.013890505692554}, {"code": "finishLoading(){\n\t    this.measure(\"getResourcePath\", () => {\n        this.path = path.join(this.path, atom.packages.resourcePath);\n    });\n    this.measure(\"addToModuleCache\", () => {\n        ModuleCache.add(this.path, {\n            metadata: this.metadata\n        });\n    });\n    this.measure(\"loadStylesheets\", () => {\n        this.loadStylesheets();\n    });\n    this.measure(\"getMainModulePath\", () => {\n        this.getMainModulePath();\n    });\n}", "CodeBleu_score": 35.11924891398781}]}
{"instance_id": "a06630788868", "generation_result": [{"code": "dblclickHandler(){\n\t\tconst doubleClickAction = this.applicationDelegate.getUserDefault(\"doubleClickAction\", \"string\");\n\tswitch (doubleClickAction) {\n\t\tcase \"Minimize\":\n\t\t\tthis.applicationDelegate.minimizeWindow();\n\t\t\tbreak;\n\t\tcase \"Maximize\":\n\t\t\tif (this.applicationDelegate.isWindowMaximized()) {\n\t\t\t\tthis.applicationDelegate.unmaximizeWindow();\n\t\t\t} else {\n\t\t\t\tthis.applicationDelegate.maximizeWindow();\n\t\t\t}\n\t\t\tbreak;\n\t}\n}", "CodeBleu_score": 52.63182444620208}, {"code": "dblclickHandler(){\n\t    var action = this.applicationDelegate.getUserDefault(\"doubleClickAction\", \"string\");\n    if (action == \"Minimize\") {\n        this.applicationDelegate.minimizeWindow(this.window);\n    } else if (action == \"Maximize\") {\n        if (this.applicationDelegate.isWindowMaximized(this.window)) {\n            this.applicationDelegate.unmaximizeWindow(this.window);\n        } else {\n            this.applicationDelegate.maximizeWindow(this.window);\n        }\n    }\n}", "CodeBleu_score": 32.92401122029046}, {"code": "dblclickHandler(){\n\t    let action = this.applicationDelegate.getUserDefault(\"doubleClickAction\", \"string\");\n    if (action == \"Minimize\") {\n        this.applicationDelegate.minimizeWindow(this.window);\n    } else if (action == \"Maximize\") {\n        if (this.applicationDelegate.isWindowMaximized(this.window)) {\n            this.applicationDelegate.unmaximizeWindow(this.window);\n        } else {\n            this.applicationDelegate.maximizeWindow(this.window);\n        }\n    }\n}", "CodeBleu_score": 32.925481079136134}]}
{"instance_id": "fd29bc5fd921", "generation_result": [{"code": "_openSettingsWindow (category){\n\t  // Check if there are any existing settings windows\n  let settingsWindows = this._windowManager.getWindowsByType('settings')\n  if (settingsWindows.length > 0) {\n    // Focus the first one\n    let settingsWindow = settingsWindows[0]\n    settingsWindow.webContents.send('change-settings-tab', category)\n    if (process.platform === 'darwin') {\n      settingsWindow.moveTop()\n    } else {\n      settingsWindow.focus()\n    }\n  } else {\n    // Create a new one\n    this._createSettingWindow(category)\n  }\n}", "CodeBleu_score": 49.853098185807575}, {"code": "_openSettingsWindow (category){\n\t  let browserSettingWindow = this._windowManager.getWindowsByType('browser-setting')[0]\n  if (browserSettingWindow) {\n    browserSettingWindow.webContents.send('change-tab', category)\n    if (process.platform === 'darwin') {\n      browserSettingWindow.moveTop()\n    } else {\n      browserSettingWindow.focus()\n    }\n  } else {\n    this._createSettingWindow(category)\n  }\n}", "CodeBleu_score": 49.219387025245254}, {"code": "_openSettingsWindow (category){\n\t  let browserSettingWindow = this._windowManager.getWindowsByType('settings')[0]\n  if (browserSettingWindow) {\n    browserSettingWindow.webContents.send('change-settings-tab', category)\n    if (process.platform === 'darwin') {\n      browserSettingWindow.moveTop()\n    } else {\n      browserSettingWindow.focus()\n    }\n  } else {\n    this._createSettingWindow(category)\n  }\n}", "CodeBleu_score": 49.572804926862304}]}
{"instance_id": "b9c797e2b719", "generation_result": [{"code": "findBestWindowToOpenIn (fileList){\n\t    if (!Array.isArray(fileList) || fileList.length === 0) {\n        return []\n    }\n    let lastActiveEditorId = this.getActiveEditorId()\n    let windows = this.getWindows()\n    let windowCount = windows.values().length\n    if (windowCount <= 1) {\n        return [{\n            windowId: lastActiveEditorId,\n            fileList: fileList\n        }]\n    }\n    let scores = this.getCandidateScores(fileList)\n    let bestWindowForFile = {}\n    for (let file of fileList) {\n        let bestWindow = null\n        let bestScore = 0\n        for (let window of windows.values()) {\n            let score = scores[window.id][file]\n            if (score > bestScore) {\n                bestScore = score\n                bestWindow = window.id\n            }\n        }\n        if (bestWindow) {\n            bestWindowForFile[file] = bestWindow\n        }\n    }\n    let result = []\n    for (let window of windows.values()) {\n        let fileList = []\n        for (let file of fileList) {\n            if (bestWindowForFile[file] === window.id) {\n                fileList.push(file)\n            }\n        }\n        if (fileList.length > 0) {\n            result.push({\n                windowId: window.id,\n                fileList: fileList\n            })\n        }\n    }\n    for (let file of fileList) {\n        if (!bestWindowForFile[file]) {\n            if (result.length === 0) {\n                result.push({\n                    windowId: lastActiveEditorId,\n                    fileList: []\n                })\n            }\n            result[0].fileList.push(file)\n        }\n    }\n    return result\n}", "CodeBleu_score": 36.81412751765467}, {"code": "findBestWindowToOpenIn (fileList){\n\t  if (!fileList || !Array.isArray(fileList)) {\n    return []\n  }\n  const activeEditorId = this.getActiveEditorId()\n  const windows = this.getWindows()\n  const numWindows = windows.length\n  if (numWindows <= 1) {\n    return [{\n      id: activeEditorId,\n      fileList: fileList\n    }]\n  }\n  const scores = this.getCandidateScores(fileList, windows)\n  const results = []\n  let lastActiveWindow = null\n  for (let i = 0; i < fileList.length; i++) {\n    const bestWindow = this.findBestWindow(fileList[i], scores)\n    if (bestWindow) {\n      if (bestWindow.id === activeEditorId) {\n        lastActiveWindow = bestWindow\n      } else {\n        results.push(bestWindow)\n      }\n      bestWindow.score = 0\n    }\n  }\n  if (lastActiveWindow) {\n    results.push(lastActiveWindow)\n  }\n  return results\n}", "CodeBleu_score": 34.803210516077485}, {"code": "findBestWindowToOpenIn (fileList){\n\t    if (!Array.isArray(fileList) || fileList.length === 0) {\n        return [];\n    }\n    let activeEditorId = this.getActiveEditorId();\n    let windows = this.windows.values();\n    let numWindows = windows.length;\n    if (numWindows === 0) {\n        return [];\n    }\n    if (numWindows === 1) {\n        return [{\n            id: activeEditorId,\n            fileList: fileList\n        }];\n    }\n    let scores = this.getCandidateScores(fileList);\n    let result = [];\n    for (let file of fileList) {\n        let bestWindowId = activeEditorId;\n        let bestScore = 0;\n        for (let window of windows) {\n            let score = scores[window.id][file];\n            if (score > bestScore) {\n                bestWindowId = window.id;\n                bestScore = score;\n            }\n        }\n        let found = false;\n        for (let item of result) {\n            if (item.id === bestWindowId) {\n                item.fileList.push(file);\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            result.push({\n                id: bestWindowId,\n                fileList: [file]\n            });\n        }\n    }\n    return result;\n}", "CodeBleu_score": 36.71222749943161}]}
{"instance_id": "bcd3eb76bbac", "generation_result": [{"code": "export const guessEncoding = (buffer, autoGuessEncoding) =>{\n\t  let encoding = 'utf8';\n  let isBom = false;\n\n  // Check for BOM encodings\n  const encodings = [\n    ['utf8', [0xef, 0xbb, 0xbf]],\n    ['utf16le', [0xff, 0xfe]],\n    ['utf16be', [0xfe, 0xff]],\n    ['utf32le', [0xff, 0xfe, 0x00, 0x00]],\n    ['utf32be', [0x00, 0x00, 0xfe, 0xff]],\n  ];\n  encodings.forEach(([name, sequence]) => {\n    if (checkSequence(buffer, sequence)) {\n      encoding = name;\n      isBom = true;\n    }\n  });\n\n  // Auto-guess encoding if enabled\n  if (autoGuessEncoding) {\n    encoding = ced(buffer);\n    encoding = encoding.replace(/^(utf-?8)$/, 'utf8');\n    encoding = encoding.toLowerCase();\n  }\n\n  return { encoding, isBom };\n}", "CodeBleu_score": 45.407905898152464}, {"code": "export const guessEncoding = (buffer, autoGuessEncoding) =>{\n\t  let encoding = 'utf8'\n  let isBom = false\n\n  // Check for BOM encodings\n  for (const [bom, enc] of bomEncodings) {\n    if (buffer.slice(0, bom.length).equals(bom)) {\n      encoding = enc\n      isBom = true\n      break\n    }\n  }\n\n  // Check for text encoding\n  if (autoGuessEncoding) {\n    encoding = checkSequence(buffer, encoding)\n  }\n\n  return { encoding, isBom }\n}", "CodeBleu_score": 38.37062372357568}, {"code": "export const guessEncoding = (buffer, autoGuessEncoding) =>{\n\t    let encoding = 'utf8';\n    let isBom = false;\n    // check for BOM encodings\n    for (const [bomEncoding, bomSequence] of Object.entries(bomEncodings)) {\n        if (buffer.toString('hex', 0, bomSequence.length) === bomSequence) {\n            encoding = bomEncoding;\n            isBom = true;\n            break;\n        }\n    }\n    // guess encoding\n    if (autoGuessEncoding) {\n        encoding = ced(buffer);\n        if (encoding === 'ISO-8859-1' || encoding === 'windows-1252') {\n            encoding = 'windows-1252';\n        } else if (encoding === 'UTF-8') {\n            encoding = 'utf8';\n        } else {\n            encoding = encoding.toLowerCase().replace(/^utf-?/, 'utf');\n        }\n    }\n    return { encoding, isBom };\n}", "CodeBleu_score": 45.49473931337666}]}
{"instance_id": "a2525337ad24", "generation_result": [{"code": "export const writeMarkdownFile = (pathname, content, options) =>{\n\t  const {\n    lineEndings = 'lf',\n    encoding = 'utf8',\n    addBom = false,\n    ...rest\n  } = options;\n\n  const ext = path.extname(pathname);\n  const filename = ext ? pathname : `${pathname}.md`;\n\n  const converted = convertLineEndings(content, lineEndings);\n  const encoded = iconv.encode(converted, encoding, { addBOM: addBom });\n\n  return writeFile(filename, encoded, rest);\n}", "CodeBleu_score": 37.661672721159356}, {"code": "export const writeMarkdownFile = (pathname, content, options) =>{\n\t  // Extract encoding and line ending options.\n  const encoding = options.encoding || 'utf8';\n  const eol = options.eol || 'lf';\n  // Set file extension to '.md' if not provided.\n  if (path.extname(pathname) === '') {\n    pathname = path.join(path.dirname(pathname), path.basename(pathname, path.extname(pathname)) + '.md');\n  }\n  // Convert line endings if necessary.\n  if (eol === 'crlf') {\n    content = content.replace(/\\r?\n/g, '\\r\n');\n  } else {\n    content = content.replace(/\\r?\n/g, '\n');\n  }\n  // Encode content into buffer.\n  const buffer = iconv.encode(content, encoding, {\n    addBOM: options.addBOM,\n    stripBOM: options.stripBOM\n  });\n  // Write buffer to file.\n  writeFile(pathname, buffer);\n}", "CodeBleu_score": 35.68509307294547}, {"code": "export const writeMarkdownFile = (pathname, content, options) =>{\n\t  const { lineEndings, encoding, withBOM, ...rest } = options\n  const ext = path.extname(pathname)\n  const pathnameWithExt = ext ? pathname : `${pathname}.md`\n  const lineEnding = lineEndings || getLineEnding(content)\n  const encodingOptions = encoding || 'utf8'\n  const bom = withBOM || false\n  const encodedContent = iconv.encode(content, encodingOptions, { addBOM: bom })\n  const lineEndingOptions = lineEndings || { eolc: lineEnding }\n  const convertedContent = convertLineEndings(encodedContent, lineEndingOptions)\n  writeFile(pathnameWithExt, convertedContent, rest)\n}", "CodeBleu_score": 35.63769388149226}]}
{"instance_id": "1c01cc82b2d4", "generation_result": [{"code": "export const registerKeyboardListeners = () =>{\n\t  ipcMain.handle('get-keyboard-info', async (event, arg) => {\n    const keyboardInfo = await getKeyboardInfo()\n    return keyboardInfo\n  })\n\n  ipcMain.on('dump-keyboard-info', async (event, arg) => {\n    try {\n      const content = JSON.stringify(await getKeyboardInfo(), null, 2)\n      const dumpPath = path.join(os.tmpdir(), 'keyboard-info.json')\n      await fsPromises.writeFile(dumpPath, content, 'utf8')\n      shell.openPath(dumpPath)\n    } catch (error) {\n      log.error(error)\n    }\n  })\n}", "CodeBleu_score": 46.215919795207796}, {"code": "export const registerKeyboardListeners = () =>{\n\t  ipcMain.handle(\n    'get-keyboard-info',\n    async (event) => {\n      try {\n        const keyboardInfo = await getKeyboardInfo()\n        return keyboardInfo\n      } catch (error) {\n        log.error(error)\n        return null\n      }\n    }\n  )\n\n  ipcMain.on(\n    'dump-keyboard-info',\n    async (event) => {\n      try {\n        const keyboardInfo = await getKeyboardInfo()\n        const content = JSON.stringify(keyboardInfo, null, 2)\n        const dumpPath = path.join(os.tmpdir(), 'keyboard-info.json')\n        await fsPromises.writeFile(dumpPath, content, 'utf8')\n        shell.openPath(dumpPath)\n      } catch (error) {\n        log.error(error)\n      }\n    }\n  )\n}", "CodeBleu_score": 45.56315235212034}, {"code": "export const registerKeyboardListeners = () =>{\n\t  ipcMain.handle('get-keyboard-info', async (event, args) => {\n    const keyboardInfo = await getKeyboardInfo()\n    return keyboardInfo\n  })\n\n  ipcMain.on('dump-keyboard-info', async (event, args) => {\n    try {\n      const keyboardInfo = await getKeyboardInfo()\n      const content = JSON.stringify(keyboardInfo, null, 2)\n      const dumpPath = path.join(os.tmpdir(), 'keyboard-info.json')\n      await fsPromises.writeFile(dumpPath, content, 'utf8')\n      shell.openPath(dumpPath)\n    } catch (err) {\n      log.error('Error during keyboard info dump:', err)\n    }\n  })\n}", "CodeBleu_score": 49.56024531440262}]}
{"instance_id": "fa0bb388c99d", "generation_result": [{"code": "_prepareKeyMapper (){\n\t  let keyboardInfo = getKeyboardInfo()\n  electronLocalshortcut.setKeyboardLayout(keyboardInfo.layout)\n  electronLocalshortcut.setKeymap(keyboardInfo.keymap)\n  if (this.debug) {\n    console.log('Keyboard layout changed to ' + keyboardInfo.layout)\n  }\n}", "CodeBleu_score": 25.82596388806495}, {"code": "_prepareKeyMapper (){\n\t  this.keyboardInfo = getKeyboardInfo()\n  electronLocalshortcut.setKeyboardLayout(this.keyboardInfo.layout)\n  electronLocalshortcut.setKeymap(this.keyboardInfo.keymap)\n  keyboardLayoutMonitor.addListener(layout => {\n    this.keyboardInfo = getKeyboardInfo(layout)\n    electronLocalshortcut.setKeyboardLayout(this.keyboardInfo.layout)\n    electronLocalshortcut.setKeymap(this.keyboardInfo.keymap)\n    if (this.debug) {\n      console.log(`[electron-localshortcut] Keyboard layout changed to ${this.keyboardInfo.layout}`)\n    }\n  })\n}", "CodeBleu_score": 22.81979659398591}, {"code": "_prepareKeyMapper (){\n\t  keyboardLayoutMonitor.addListener(this.updateKeyboardLayout.bind(this))\n  this.updateKeyboardLayout()\n}", "CodeBleu_score": 8.794423727907045}]}
{"instance_id": "0438f43329c9", "generation_result": [{"code": "fixSystemConfig (){\n\t  this.setSystemConfig(this.getUserConfig())\n  this.setUserConfig(this.getUserConfig())\n  this.setSystemConfig(this.getUserConfig())\n  this.setUserConfig(this.getUserConfig())\n  this.setSystemConfig(this.getUserConfig())\n  this.setUserConfig(this.getUserConfig())\n  this.setSystemConfig(this.getUserConfig())\n  this.setUserConfig(this.getUserConfig())\n  this.setSystemConfig(this.getUserConfig())\n  this.setUserConfig(this.getUserConfig())\n  this.setSystemConfig(this.getUserConfig())\n  this.setUserConfig(this.getUserConfig())\n  this.setSystemConfig(this.getUserConfig())\n  this.setUserConfig(this.getUserConfig())\n  this.setSystemConfig(this.getUserConfig())\n  this.setUserConfig(this.getUserConfig())\n  this.setSystemConfig(this.getUserConfig())\n  this.setUserConfig(this.getUserConfig())\n  this.setSystemConfig(this.getUserConfig())\n  this.setUserConfig(this.getUserConfig())\n  this.setSystemConfig(this.getUserConfig())\n  this.setUserConfig(this.getUserConfig())\n  this.setSystemConfig(this.getUserConfig())\n  this.setUserConfig(this.getUserConfig())\n  this.setSystemConfig(this.getUserConfig())\n  this.setUserConfig(this.getUserConfig())\n  this.setSystemConfig(this.getUserConfig())\n  this.setUserConfig(this.getUserConfig())\n  this.setSystemConfig(this.getUserConfig())\n  this.setUserConfig(this.getUserConfig())\n  this.setSystemConfig(this.getUserConfig())\n  this.setUserConfig(this.getUserConfig())\n  this.setSystemConfig(this.getUserConfig())\n  this.setUserConfig(this.getUserConfig())\n  this.setSystemConfig(this.getUserConfig())\n  this.setUserConfig(this.getUserConfig())\n  this.setSystemConfig(this", "CodeBleu_score": 6.483397446732883}, {"code": "fixSystemConfig (){\n\t  // Remove unrecognized options from aria2c configuration\n  this.setSystemConfig(this.getUserConfig('systemConfig'))\n  // Check user proxy configuration\n  this.setProxyConfig(this.getUserConfig('proxyConfig'))\n  // Address the 'spawn ENAMETOOLONG' issue on Windows\n  if (this.os === 'win32') {\n    let tracker = this.getUserConfig('tracker')\n    if (tracker.length > 0) {\n      tracker = this.reduceTrackerString(tracker)\n      this.setUserConfig('tracker', tracker)\n      this.setSystemConfig({ 'all-proxy': tracker })\n    }\n  }\n}", "CodeBleu_score": 24.212423911901404}, {"code": "fixSystemConfig (){\n\t  // Remove unrecognized options from aria2c configuration\n  this.setSystemConfig(this.getSystemConfig())\n  // Check user proxy configuration\n  this.setUserConfig(this.getUserConfig())\n  // Check system proxy configuration\n  this.setSystemConfig(this.getSystemConfig())\n  // Address 'spawn ENAMETOOLONG' issue on Windows\n  this.setSystemConfig(this.getSystemConfig())\n}", "CodeBleu_score": 5.3576118174758784}]}
{"instance_id": "6d6fef58cde3", "generation_result": [{"code": "closeClient (){\n\t    if (this.client) {\n        try {\n            this.client.destroy();\n            this.client = null;\n        } catch (e) {\n            logger.warn('Failed to close UPnP client.');\n        }\n    }\n}", "CodeBleu_score": 21.222181996475733}, {"code": "closeClient (){\n\t    if (client) {\n        try {\n            client.destroy();\n            client = null;\n        } catch (e) {\n            logger.warn('Failed to close UPnP client: ' + e);\n        }\n    }\n}", "CodeBleu_score": 24.282326435697524}, {"code": "closeClient (){\n\t\tif (this.client) {\n\t\ttry {\n\t\t\tthis.client.destroy()\n\t\t\tthis.client = null\n\t\t} catch (err) {\n\t\t\tlogger.warn(`Failed to close UPnP client: ${err.message}`)\n\t\t}\n\t}\n}", "CodeBleu_score": 21.60487389933119}]}
{"instance_id": "b32ad6f9757b", "generation_result": [{"code": "getTouchBarByPage (page){\n\t    if (this.bars[page] == undefined) {\n        try {\n            this.bars[page] = this.build(page);\n        } catch (error) {\n            logger.info(`${error}`);\n        }\n    }\n    return this.bars[page];\n}", "CodeBleu_score": 22.874402374717896}, {"code": "getTouchBarByPage (page){\n\t  if (!this.bars[page]) {\n    try {\n      this.bars[page] = this.build(page)\n    } catch (err) {\n      logger.error(err)\n    }\n  }\n  return this.bars[page]\n}", "CodeBleu_score": 20.873067873990692}, {"code": "getTouchBarByPage (page){\n\t    if (this.bars[page] === undefined) {\n        try {\n            this.bars[page] = this.build(page)\n        } catch (e) {\n            logger.error(`Failed to build TouchBar for page ${page}`)\n            logger.error(e)\n        }\n    }\n    return this.bars[page]\n}", "CodeBleu_score": 28.384678503027278}]}
{"instance_id": "f860bf9bf687", "generation_result": [{"code": "handleWindowClose (pageOptions, page, window){\n\t  window.on('close', (event) => {\n    if (pageOptions.bindCloseToHide && !this.app.isQuitting) {\n      event.preventDefault()\n      if (window.isFullScreen()) {\n        window.setFullScreen(false)\n        window.once('leave-full-screen', () => {\n          window.hide()\n        })\n      } else {\n        window.hide()\n      }\n    }\n    this.emit('window-closed', { page, bounds: window.getBounds() })\n  })\n}", "CodeBleu_score": 66.59114903149921}, {"code": "handleWindowClose (pageOptions, page, window){\n\t  window.on('close', (event) => {\n    if (pageOptions.bindCloseToHide && !this.app.isQuitting) {\n      event.preventDefault()\n      if (window.isFullScreen()) {\n        window.once('leave-full-screen', () => {\n          window.hide()\n        })\n        window.setFullScreen(false)\n      } else {\n        window.hide()\n      }\n    }\n    this.emit('window-closed', page, window.getBounds())\n  })\n}", "CodeBleu_score": 67.82658860774913}, {"code": "handleWindowClose (pageOptions, page, window){\n\t  window.on('close', (event) => {\n    if (pageOptions.bindCloseToHide && !this.app.isQuitting) {\n      event.preventDefault()\n      window.hide()\n    } else {\n      if (window.isFullScreen()) {\n        window.setFullScreen(false)\n        window.once('leave-full-screen', () => {\n          window.hide()\n        })\n      } else {\n        window.hide()\n      }\n    }\n\n    this.emit('window-closed', { page, bounds: window.getBounds() })\n  })\n}", "CodeBleu_score": 63.75030966633619}]}
{"instance_id": "ae062f5e98e3", "generation_result": [{"code": "export const moveAppToApplicationsFolder = (errorMsg = '') =>{\n\t    return new Promise((resolve, reject) => {\n        try {\n            if (app.isInApplicationsFolder()) {\n                resolve();\n            } else {\n                const result = app.moveToApplicationsFolder();\n                if (result) {\n                    resolve();\n                } else {\n                    reject(errorMsg);\n                }\n            }\n        } catch (error) {\n            reject(error);\n        }\n    });\n}", "CodeBleu_score": 53.789522323517104}, {"code": "export const moveAppToApplicationsFolder = (errorMsg = '') =>{\n\t  return new Promise((resolve, reject) => {\n    try {\n      app.moveToApplicationsFolder()\n      resolve()\n    } catch (error) {\n      reject(errorMsg)\n    }\n  })\n}", "CodeBleu_score": 44.372767653710156}, {"code": "export const moveAppToApplicationsFolder = (errorMsg = '') =>{\n\t    return new Promise((resolve, reject) => {\n        try {\n            app.moveToApplicationsFolder()\n            resolve()\n        } catch (error) {\n            reject(errorMsg + error)\n        }\n    })\n}", "CodeBleu_score": 40.66144066114822}]}
{"instance_id": "294de13d4a02", "generation_result": [{"code": "async function copyIconsIfNecessary(\n  options: AppOptions,\n  appPath: string,\n): Promise<void>{\n\t  log.debug(\n    `Copying icons if necessary for platform ${options.platform} and arch ${options.arch}`,\n  )\n\n  if (!options.icon) {\n    log.debug('No icon specified, skipping icon copy')\n    return\n  }\n\n  if (options.platform === 'darwin' || options.platform === 'mas') {\n    if (options.tray !== 'false') {\n      const trayIconFilename = path.join(appPath, 'icon.png')\n      await fs.copy(options.icon, trayIconFilename)\n    }\n  } else if (options.platform === 'win32') {\n    const iconExtension = path.extname(options.icon)\n    const iconFilename = `icon${iconExtension}`\n    const iconPath = path.join(appPath, iconFilename)\n    await fs.copy(options.icon, iconPath)\n  } else if (options.platform === 'linux') {\n    const iconExtension = path.extname(options.icon)\n    const iconFilename = `icon${iconExtension}`\n    const iconPath = path.join(appPath, iconFilename)\n    await fs.copy(options.icon, iconPath)\n  }\n}", "CodeBleu_score": 46.5048903943929}, {"code": "async function copyIconsIfNecessary(\n  options: AppOptions,\n  appPath: string,\n): Promise<void>{\n\t  log.debug('Copying icons if necessary...')\n\n  if (!options.icon) {\n    log.debug('No icon specified, skipping')\n    return\n  }\n\n  const ext = path.extname(options.icon)\n  const basename = path.basename(options.icon, ext)\n\n  if (options.platform === 'darwin' || options.platform === 'mas') {\n    if (options.tray !== false) {\n      const trayIcon = path.join(appPath, 'Contents', 'Resources', 'tray.png')\n      await fs.copy(options.icon, trayIcon)\n    }\n  } else if (options.platform === 'win32') {\n    const iconPath = path.join(appPath, `${basename}.ico`)\n    await fs.copy(options.icon, iconPath)\n  } else if (options.platform === 'linux') {\n    const iconPath = path.join(appPath, 'assets', `${basename}.png`)\n    await fs.copy(options.icon, iconPath)\n  }\n}", "CodeBleu_score": 43.9148508726059}, {"code": "async function copyIconsIfNecessary(\n  options: AppOptions,\n  appPath: string,\n): Promise<void>{\n\t  log.debug('Copying icons if necessary...')\n  if (options.icon == null) {\n    log.debug('No icon specified, skipping...')\n    return\n  }\n\n  if (options.platform === 'darwin' || options.platform === 'mas') {\n    if (options.tray !== false) {\n      await fs.copy(\n        options.icon,\n        path.join(appPath, 'Contents', 'Resources', 'tray-icon.png'),\n      )\n    }\n  } else if (options.platform === 'win32') {\n    await fs.copy(\n      options.icon,\n      path.join(appPath, 'icon.ico'),\n    )\n  } else if (options.platform === 'linux') {\n    const ext = path.extname(options.icon)\n    await fs.copy(\n      options.icon,\n      path.join(appPath, 'icon' + ext),\n    )\n  }\n}", "CodeBleu_score": 35.79570130892785}]}
{"instance_id": "af06dceb6a2f", "generation_result": [{"code": "export function normalizeAppName(appName: string, url: string): string{\n\t    const hash = crypto.createHash('md5').update(url).digest('hex');\n    return (\n        'nativefier-' +\n        appName\n            .toLowerCase()\n            .replace(/[,:.]/g, '')\n            .replace(/ /g, '-')\n            .replace(/_/g, '-') +\n        '-' +\n        hash.substr(0, 6)\n    );\n}", "CodeBleu_score": 45.73321173609229}, {"code": "export function normalizeAppName(appName: string, url: string): string{\n\t  const hash = crypto.createHash('md5').update(url).digest('hex');\n\n  return (\n    appName\n      .toLowerCase()\n      .replace(/[,:.]/g, '')\n      .replace(/[ ]/g, '-')\n      .replace(/[_]/g, '-') +\n    '-nativefier-' +\n    hash.substr(0, 6)\n  );\n}", "CodeBleu_score": 47.18208113602662}, {"code": "export function normalizeAppName(appName: string, url: string): string{\n\t  const hash = crypto.createHash('md5').update(url).digest('hex');\n  return (\n    normalizeString(appName) + '-nativefier-' + hash.substring(0, 6)\n  );\n}", "CodeBleu_score": 32.17310323239283}]}
{"instance_id": "3728778a6e34", "generation_result": [{"code": "export async function prepareElectronApp(\n  src: string,\n  dest: string,\n  options: AppOptions,\n): Promise<void>{\n\t  log.debug(`Copying app from ${src} to ${dest}`)\n  try {\n    await fs.copy(src, dest, {\n      filter: (src: string) => {\n        return !src.includes('node_modules')\n      },\n    })\n  } catch (err) {\n    log.error(`Could not copy app from ${src} to ${dest}`)\n    throw err\n  }\n  log.debug(`Writing app configuration to ${dest}/app.json`)\n  const appConfig = JSON.stringify(options)\n  await fs.writeFile(path.join(dest, 'app.json'), appConfig)\n  if (options.menu) {\n    log.debug(`Copying bookmarks menu to ${dest}/menu.json`)\n    try {\n      await fs.copy(options.menu, path.join(dest, 'menu.json'))\n    } catch (err) {\n      log.error(`Could not copy menu to ${dest}/menu.json`)\n      throw err\n    }\n  }\n  if (options.scripts) {\n    log.debug(`Copying injection scripts to ${dest}/scripts`)\n    try {\n      await maybeCopyScripts(options.scripts, dest)\n    } catch (err) {\n      log.error(`Could not copy injection scripts to ${dest}/scripts`)\n      throw err\n    }\n  }\n  log.debug(`Changing app name to ${options.name}`)\n  changeAppPackageJsonName(dest, options.name)\n  log.debug(`Setting app bundle ID to ${options.name}`)\n  setAppBundleId(dest, options.name)\n}", "CodeBleu_score": 42.61010114836646}, {"code": "export async function prepareElectronApp(\n  src: string,\n  dest: string,\n  options: AppOptions,\n): Promise<void>{\n\t  const appName = options.name || path.basename(src)\n  const normalizedAppName = normalizeAppName(appName)\n  const appPackageJsonPath = path.join(dest, 'package.json')\n  const appPackageJson = await fs.readJSON(appPackageJsonPath)\n\n  log.debug('Copying app from', src, 'to', dest)\n  await fs.copy(src, dest, {\n    dereference: true,\n    filter: (src: string, dest: string) => {\n      if (path.basename(src) === 'node_modules') {\n        return false\n      }\n\n      return true\n    },\n  })\n\n  const appConfig = {\n    ...options,\n    name: normalizedAppName,\n  }\n\n  await fs.writeFile(\n    path.join(dest, 'app-config.json'),\n    JSON.stringify(appConfig, null, 2),\n  )\n\n  if (options.bookmarksMenu) {\n    try {\n      await fs.copy(options.bookmarksMenu, path.join(dest, 'bookmarksMenu.json'))\n    } catch (error) {\n      log.error(\n        'Failed to copy bookmarks menu from',\n        options.bookmarksMenu,\n        'to',\n        path.join(dest, 'bookmarksMenu.json'),\n      )\n    }\n  }\n\n  await maybeCopyScripts(dest, options.injectionPath)\n\n  try {\n    await changeAppPackageJsonName(appPackageJsonPath, normalizedAppName)\n    await setAppBundleId(appPackageJsonPath, normalizedAppName)\n  } catch (error) {\n    log.error('Failed to set app bundle ID')\n  }\n}", "CodeBleu_score": 39.66242321924256}, {"code": "export async function prepareElectronApp(\n  src: string,\n  dest: string,\n  options: AppOptions,\n): Promise<void>{\n\t  const { name, url, verbose, nativefierVersion } = options\n  const normalizedAppName = normalizeAppName(name)\n\n  const appPath = path.join(dest, normalizedAppName)\n  log.debug(`Copying Electron app from ${src} to ${appPath}`)\n  try {\n    await fs.copy(src, appPath)\n  } catch (err) {\n    log.error(`Copying Electron app from ${src} to ${appPath} failed:`, err)\n    throw err\n  }\n\n  const config = {\n    name: normalizedAppName,\n    url,\n    nativefierVersion,\n  }\n  const configPath = path.join(appPath, 'nativefier.json')\n  log.debug(`Writing app config to ${configPath}`)\n  await fs.writeFile(configPath, JSON.stringify(config))\n\n  if (options.bookmarksMenu) {\n    try {\n      await maybeCopyScripts(appPath, options)\n    } catch (err) {\n      log.error('Copying injection scripts failed:', err)\n      throw err\n    }\n  }\n\n  try {\n    await changeAppPackageJsonName(appPath, normalizedAppName)\n  } catch (err) {\n    log.error(`Changing app package.json name to ${normalizedAppName} failed:`, err)\n    throw err\n  }\n\n  if (options.osxSign) {\n    await setOSXAppBundleIdentifier(appPath, normalizedAppName)\n  }\n}", "CodeBleu_score": 48.75786216121348}]}
{"instance_id": "281c20f209ba", "generation_result": [{"code": "export function downloadFile(\n  fileUrl: string,\n): Promise<DownloadResult | undefined>{\n\t  console.log(`Downloading file from ${fileUrl}`);\n\n  return fetch(fileUrl, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/octet-stream\",\n    },\n  })\n    .then((response) => {\n      if (response.ok) {\n        return response.arrayBuffer();\n      } else {\n        throw new Error(\n          `Download failed with status ${response.status}`,\n        );\n      }\n    })\n    .then((data) => {\n      if (data) {\n        const extension = path.extname(fileUrl);\n        return {\n          data,\n          extension,\n        };\n      }\n    })\n    .catch((error) => {\n      console.error(`Download failed with error ${error}`);\n    });\n}", "CodeBleu_score": 53.8104899796525}, {"code": "export function downloadFile(\n  fileUrl: string,\n): Promise<DownloadResult | undefined>{\n\t  console.log(\"Downloading file from:\", fileUrl);\n\n  return fetch(fileUrl)\n    .then((response) => response.arrayBuffer())\n    .then((data) => {\n      if (data.byteLength === 0) {\n        return undefined;\n      }\n      const fileExtension = path.extname(fileUrl).replace(\".\", \"\");\n      return {\n        data,\n        fileExtension,\n      };\n    });\n}", "CodeBleu_score": 57.12785288980299}, {"code": "export function downloadFile(\n  fileUrl: string,\n): Promise<DownloadResult | undefined>{\n\t  console.log(`Downloading file from ${fileUrl}`);\n  return fetch(fileUrl)\n    .then((response) => {\n      if (response.ok) {\n        return response.arrayBuffer();\n      }\n      return Promise.reject(response.statusText);\n    })\n    .then((data) => {\n      const extension = path.extname(fileUrl);\n      return {\n        data,\n        extension,\n      };\n    })\n    .catch((error) => {\n      console.log(`Error downloading file: ${error}`);\n    });\n}", "CodeBleu_score": 54.901509269925896}]}
{"instance_id": "e71c0b9dab4a", "generation_result": [{"code": "export function camelCased(str: string): string{\n\t  return str\n    .split('-')\n    .filter(Boolean)\n    .map((word, index) => {\n      if (index === 0) {\n        return word.toLowerCase();\n      }\n      return word[0].toUpperCase() + word.slice(1).toLowerCase();\n    })\n    .join('');\n}", "CodeBleu_score": 60.907742214640294}, {"code": "export function camelCased(str: string): string{\n\t  return str\n    .split(\"-\")\n    .filter((word) => word.length > 0)\n    .map((word, index) =>\n      index === 0 ? word : word[0].toUpperCase() + word.substring(1)\n    )\n    .join(\"\");\n}", "CodeBleu_score": 59.83174434787328}, {"code": "export function camelCased(str: string): string{\n\t  return str\n    .split('-')\n    .filter(Boolean)\n    .map((word, index) => (index ? word[0].toUpperCase() + word.slice(1) : word))\n    .join('');\n}", "CodeBleu_score": 41.09413939090988}]}
{"instance_id": "c93f0f7bfa03", "generation_result": [{"code": "export function sanitizeFilename(\n  platform: string | undefined,\n  filenameToSanitize: string,\n): string{\n\t  const sanitizedFilename = sanitize(filenameToSanitize);\n  log.debug(`Sanitized filename: ${sanitizedFilename}`);\n  if (platform === 'linux') {\n    const linuxSanitizedFilename = sanitizedFilename.replace(/[^\\w\\d\\-_]/g, '');\n    log.debug(`Linux sanitized filename: ${linuxSanitizedFilename}`);\n    if (linuxSanitizedFilename === '') {\n      log.warn(\n        'The sanitized filename is empty. Assigning a default application name.',\n      );\n      return 'my-app';\n    }\n    return linuxSanitizedFilename;\n  }\n  return sanitizedFilename;\n}", "CodeBleu_score": 52.27744603670228}, {"code": "export function sanitizeFilename(\n  platform: string | undefined,\n  filenameToSanitize: string,\n): string{\n\t  log.debug(`Sanitizing filename: ${filenameToSanitize}`);\n  const sanitizedFilename = sanitize(filenameToSanitize);\n  log.debug(`Sanitized filename: ${sanitizedFilename}`);\n  if (platform === \"linux\") {\n    // Remove spaces and certain Unicode characters on Linux\n    const sanitizedLinuxFilename = sanitizedFilename.replace(/[^\\w\\d\\-_]/g, \"\");\n    if (sanitizedLinuxFilename.length === 0) {\n      log.warn(\n        \"Sanitized filename is empty. Assigning default application name.\",\n      );\n      return \"app\";\n    }\n    return sanitizedLinuxFilename;\n  }\n  return sanitizedFilename;\n}", "CodeBleu_score": 44.68812076578318}, {"code": "export function sanitizeFilename(\n  platform: string | undefined,\n  filenameToSanitize: string,\n): string{\n\t  let filename = sanitize(filenameToSanitize);\n  if (platform === \"linux\") {\n    filename = filename.replace(/[^\\w\\s\\d\\.\\-\\(\\)\\[\\]]/g, \"\");\n  }\n  if (filename.trim().length === 0) {\n    log.warn(\n      `The sanitized filename is empty. Using default application name 'app' instead.`,\n    );\n    filename = \"app\";\n  }\n  log.debug(`Sanitized filename: ${filename}`);\n  return filename;\n}", "CodeBleu_score": 51.12901276673954}]}
{"instance_id": "ac4bf3ef1fa8", "generation_result": [{"code": "isExpired(savedCache: QueryResultCacheOptions): boolean {\n\t    let duration: number = parseInt(savedCache.duration, 10);\n    let now = new Date().getTime();\n    return (savedCache.cacheTime + duration) < now;\n}", "CodeBleu_score": 24.609219289780704}, {"code": "isExpired(savedCache: QueryResultCacheOptions): boolean {\n\t    const duration: number = typeof savedCache.duration === 'string' ? parseInt(savedCache.duration, 10) : savedCache.duration;\n    return (savedCache.cacheTime + duration) < new Date().getTime();\n}", "CodeBleu_score": 37.50225308713219}, {"code": "isExpired(savedCache: QueryResultCacheOptions): boolean {\n\t  const { cacheTime, duration } = savedCache;\n  const now = new Date().getTime();\n  const cacheDuration = parseInt(duration, 10);\n  return cacheTime + cacheDuration < now;\n}", "CodeBleu_score": 19.84542898531599}]}
{"instance_id": "6b8f5c8fc4ec", "generation_result": [{"code": "static getTimestamp(timestampOptionArgument: any): number{\n\t    if (timestampOptionArgument && typeof timestampOptionArgument !== 'number') {\n        throw new TypeORMError(`Provided timestamp value must be a number.`);\n    }\n\n    if (timestampOptionArgument < 0) {\n        throw new TypeORMError(`Provided timestamp value must be positive.`);\n    }\n\n    return timestampOptionArgument ? timestampOptionArgument : Date.now();\n}", "CodeBleu_score": 52.111540616485186}, {"code": "static getTimestamp(timestampOptionArgument: any): number{\n\t    if (timestampOptionArgument && typeof timestampOptionArgument !== 'number') {\n        throw new TypeORMError(`Timestamp option is wrong. It must be a number.`);\n    }\n\n    if (timestampOptionArgument < 0) {\n        throw new TypeORMError(`Timestamp option is wrong. It must be not less then 0.`);\n    }\n\n    if (isNaN(timestampOptionArgument)) {\n        throw new TypeORMError(`Timestamp option is wrong. It must not be NaN.`);\n    }\n\n    return timestampOptionArgument ? timestampOptionArgument : Date.now();\n}", "CodeBleu_score": 53.74804727259224}, {"code": "static getTimestamp(timestampOptionArgument: any): number{\n\t    if (timestampOptionArgument && typeof timestampOptionArgument !== 'number') {\n        throw new TypeORMError(`Provided timestamp value must be a number.`);\n    }\n\n    if (timestampOptionArgument < 0) {\n        throw new TypeORMError(`Provided timestamp value must be positive.`);\n    }\n\n    return timestampOptionArgument ? timestampOptionArgument : Date.now();\n}", "CodeBleu_score": 52.111540616485186}]}
{"instance_id": "747bea9d7ad9", "generation_result": [{"code": " async dropDatabase(): Promise<void>{\n\t    // create a query runner to work with\n    const queryRunner = this.connection.createQueryRunner();\n\n    try {\n        // get all databases from the connection data\n        const databases = await queryRunner.getDatabases();\n        const allDbs = databases.map(db => db.databaseName);\n\n        // if databases are found in the connection data, then drop each one\n        if (allDbs.length > 0) {\n            await Promise.all(allDbs.map(dbName => queryRunner.dropDatabase(dbName, true)));\n            return;\n        }\n\n        // if no databases in the connection data, then drop the default database\n        const defaultDbName = await queryRunner.getDatabase();\n        await queryRunner.dropDatabase(defaultDbName, true);\n    } finally {\n        // release the query runner\n        await queryRunner.release();\n    }\n}", "CodeBleu_score": 31.240078700869127}, {"code": " async dropDatabase(): Promise<void>{\n\t    const queryRunner = this.connection.createQueryRunner()\n\n    try {\n      const databases = await queryRunner.getDatabases()\n\n      if (databases.length === 0) {\n        await queryRunner.dropDatabase(this.connection.options.database)\n      } else {\n        for (const database of databases) {\n          await queryRunner.dropDatabase(database)\n        }\n      }\n    } finally {\n      await queryRunner.release()\n    }\n  }", "CodeBleu_score": 37.551542168624316}, {"code": " async dropDatabase(): Promise<void>{\n\t    const queryRunner = this.connection.createQueryRunner()\n\n    try {\n      await queryRunner.connect()\n\n      const databases = await this.getDatabases(queryRunner)\n\n      if (databases.length === 0) {\n        return\n      }\n\n      for (const database of databases) {\n        await queryRunner.clearDatabase(database)\n      }\n    } finally {\n      await queryRunner.release()\n    }\n  }", "CodeBleu_score": 33.936343903273844}]}
{"instance_id": "7dce3d050d72", "generation_result": [{"code": "createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>{\n\t    if (this.connection.driver instanceof MongoDriver)\n        throw new Error(`Query Builder is not supported by mongodb connection`);\n\n    if (alias) {\n        const metadata = this.connection.getMetadata(entityOrRunner as Function | string);\n        return this.createQueryBuilder(metadata.target, alias)\n            .select(alias);\n    }\n\n    return this.createQueryBuilder(entityOrRunner as Function | string, alias, queryRunner);\n}", "CodeBleu_score": 44.94357709155348}, {"code": "createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>{\n\t        // throw error if its mongo driver\n        if (this.connection.driver instanceof MongoDriver) {\n            throw new Error(`Query Builder is not supported by mongodb.`);\n        }\n\n        // get select query builder\n        const selectQueryBuilder: SelectQueryBuilder<Entity> = this.createQueryBuilder(\n            entityOrRunner as any,\n            alias,\n            queryRunner,\n        ) as any;\n\n        // set query runner to use a single connection\n        if (queryRunner) {\n            selectQueryBuilder.expressionMap.queryRunner = queryRunner;\n        }\n\n        return selectQueryBuilder;\n    }", "CodeBleu_score": 43.44679435403012}, {"code": "createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>{\n\t        if (this.connection.driver instanceof MongoDriver)\n            throw new TypeORMError(\n                `Cannot use SelectQueryBuilder because current connection does not support it.`,\n            );\n\n        const queryBuilder = this.createQueryBuilder(\n            entityOrRunner as any,\n            alias,\n            queryRunner,\n        ) as SelectQueryBuilder<Entity>;\n        if (alias) {\n            const metadata = this.connection.getMetadata(\n                entityOrRunner as EntityTarget<Entity>,\n            );\n            queryBuilder.alias = alias;\n            queryBuilder.expressionMap.mainAlias = new Alias();\n            queryBuilder.expressionMap.mainAlias.metadata = metadata;\n            queryBuilder.expressionMap.mainAlias.name = alias;\n        }\n\n        return queryBuilder;\n    }", "CodeBleu_score": 43.454749570376336}]}
{"instance_id": "4413268e1791", "generation_result": [{"code": "async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined>{\n\t\n        // get entity metadata\n        const metadata = await this.connection.getMetadata(entityClass);\n\n        // create a new entity\n        const entity = metadata.create(undefined) as Entity;\n\n        // transform given plain object to a database entity\n        const transformer = new PlainObjectToDatabaseEntityTransformer();\n        const transformResult = transformer.transform(entity, entityLike, metadata);\n        if (!transformResult.isSuccessful)\n            return undefined;\n\n        // merge both entities\n        return this.merge(entity, transformResult.value);\n\n    }", "CodeBleu_score": 44.561591270091085}, {"code": "async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined>{\n\t        const metadata = await this.connection.getMetadata(entityClass);\n        const transformer = new PlainObjectToDatabaseEntityTransformer(this.connection.manager);\n        const transformedEntity = transformer.transform(entityLike, metadata);\n        if (transformedEntity) {\n            this.merge(transformedEntity, entityLike);\n        }\n        return transformedEntity;\n    }", "CodeBleu_score": 49.29119051294675}, {"code": "async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined>{\n\t        const metadata = await this.connection.getMetadata(entityClass);\n        const plainObjectToDatabaseEntityTransformer = new PlainObjectToDatabaseEntityTransformer();\n        const transformedEntity = await plainObjectToDatabaseEntityTransformer.transform(entityLike, metadata);\n        if (transformedEntity) {\n            return this.merge(entityClass, entityLike, transformedEntity);\n        }\n        return undefined;\n    }", "CodeBleu_score": 55.20766955212982}]}
{"instance_id": "c635d2b9bbdf", "generation_result": [{"code": "export function CompressionInput({\n  compression,\n  handleCompressionChange,\n}: CompressionInputProps){\n\t  return (\n    <div className=\"compression-input-container\">\n      <div className=\"compression-input-label\">\n        <p>Compression</p>\n        <p>{compression}%</p>\n      </div>\n      <input\n        type=\"range\"\n        min=\"0\"\n        max=\"100\"\n        value={compression}\n        onChange={handleCompressionChange}\n        className=\"compression-input\"\n      />\n      {compression > 0 && (\n        <p className=\"compression-note\">\n          Note: Compression only affects PNG, JPG, and WebP files.\n        </p>\n      )}\n    </div>\n  );\n}", "CodeBleu_score": 43.30765819194068}, {"code": "export function CompressionInput({\n  compression,\n  handleCompressionChange,\n}: CompressionInputProps){\n\t  return (\n    <div className=\"flex flex-col items-center justify-center\">\n      <div className=\"flex flex-col items-center justify-center\">\n        <div className=\"text-sm text-gray-700 dark:text-gray-400\">\n          Compression: {compression}%\n        </div>\n        <input\n          className=\"w-full h-1 bg-gray-300 dark:bg-gray-700 rounded-full cursor-pointer\"\n          type=\"range\"\n          value={compression}\n          onChange={(e) => handleCompressionChange(e.target.value)}\n          min=\"0\"\n          max=\"100\"\n          step=\"1\"\n        />\n      </div>\n      {compression > 0 && (\n        <div className=\"flex flex-col items-center justify-center mt-4 text-sm text-gray-700 dark:text-gray-400\">\n          <div>\n            <div className=\"flex flex-row items-center justify-center\">\n              <div className=\"w-1 h-1 bg-red-500 rounded-full mr-2\"></div>\n              <div>PNG</div>\n            </div>\n            <div className=\"flex flex-row items-center justify-center\">\n              <div className=\"w-1 h-1 bg-blue-500 rounded-full mr-2\"></div>\n              <div>JPG</div>\n            </div>\n            <div className=\"flex flex-row items-center justify-center\">\n              <div className=\"w-1 h-1 bg-yellow-500 rounded-full mr-2\"></div>\n              <div>WebP</div>\n            </div>\n          </div>\n          <div className=\"text-xs text-gray-600 dark:text-gray-300\">\n            Compression is lossy for PNG, JPG, and WebP.\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}", "CodeBleu_score": 40.0350517876094}, {"code": "export function CompressionInput({\n  compression,\n  handleCompressionChange,\n}: CompressionInputProps){\n\t  return (\n    <div className=\"flex flex-col items-center justify-center w-full px-4\">\n      <p className=\"text-sm text-gray-600\">Compression</p>\n      <div className=\"flex items-center justify-center w-full\">\n        <p className=\"text-sm text-gray-600\">{compression}%</p>\n        <input\n          type=\"range\"\n          min=\"0\"\n          max=\"100\"\n          step=\"1\"\n          value={compression}\n          onChange={handleCompressionChange}\n          className=\"w-full mx-2\"\n        />\n        <p className=\"text-sm text-gray-600\">0%</p>\n      </div>\n      {compression > 0 && (\n        <p className=\"text-xs text-gray-500\">\n          Compression will be applied to PNG, JPG, and WebP images.\n        </p>\n      )}\n    </div>\n  );\n}", "CodeBleu_score": 50.51305714892913}]}
{"instance_id": "636802ba89ba", "generation_result": [{"code": "findAttributesWithPrefix(type, name){\n\t    let key = type + \":\" + name;\n    let resArr = [];\n    for (let idx in this.attributeIndex) {\n        if (idx.startsWith(key)) {\n            resArr.push(this.attributeIndex[idx]);\n        }\n    }\n    return resArr.flat();\n}", "CodeBleu_score": 64.33938911290335}, {"code": "findAttributesWithPrefix(type, name){\n\t    const key = `${type}:${name}`;\n    const resArr = [];\n    for (const idx in this.attributeIndex) {\n        if (idx.startsWith(key)) {\n            resArr.push(this.attributeIndex[idx]);\n        }\n    }\n    return resArr.flat();\n}", "CodeBleu_score": 87.59845839976899}, {"code": "findAttributesWithPrefix(type, name){\n\t  const key = type + name;\n  const resArr = [];\n  for (const idx in this.attributeIndex) {\n    if (idx.startsWith(key)) {\n      resArr.push(this.attributeIndex[idx]);\n    }\n  }\n  return resArr.flat();\n}", "CodeBleu_score": 66.36374385382425}]}
{"instance_id": "5fafa24f5463", "generation_result": [{"code": "function branchUpdated(branchRow){\n\t    var childNote = becca.notes.get(branchRow.noteId);\n    if (childNote) {\n        childNote.flatTextCache = null;\n        childNote.sortParents();\n        childNote.invalidateSubTree();\n    }\n    var parentNote = becca.notes.get(branchRow.parentNoteId);\n    if (parentNote) {\n        parentNote.sortChildren();\n    }\n}", "CodeBleu_score": 71.97264359437762}, {"code": "function branchUpdated(branchRow){\n\t    var childNote = getNote(branchRow.noteId);\n    if (childNote) {\n        childNote.flatTextCache = null;\n        childNote.sortParents();\n        childNote.invalidateSubTree();\n    }\n    var parentNote = getNote(branchRow.parentNoteId);\n    if (parentNote) {\n        parentNote.sortChildren();\n    }\n}", "CodeBleu_score": 65.84561860490923}, {"code": "function branchUpdated(branchRow){\n\t\tvar childNote = becca.notes.get(branchRow.noteId);\n\tif (childNote) {\n\t\tchildNote.resetFlatTextCache();\n\t\tchildNote.sortParents();\n\t\tchildNote.invalidateSubTree();\n\t}\n\tvar parentNote = becca.notes.get(branchRow.parentNoteId);\n\tif (parentNote) {\n\t\tparentNote.sortChildren();\n\t}\n}", "CodeBleu_score": 57.26953569048601}]}
{"instance_id": "80b2322b7b29", "generation_result": [{"code": "function trimMime(mime){\n\t    if (mime == null || mime === 'text/html') return mime;\n    if (mimeCache[mime] != null) return mimeCache[mime];\n    var parts = mime.split('/');\n    var type = parts[0];\n    var subtype = parts[1];\n    if (type === 'text') subtype = subtype.replace(/^(plain|richtext|x-web-markdown|x-markdown)/, '');\n    else if (type === 'application') subtype = subtype.replace(/^(octet-stream|x-javascript)/, '');\n    if (subtype.startsWith('-x')) subtype = subtype.substr(2);\n    mimeCache[mime] = subtype;\n    return subtype;\n}", "CodeBleu_score": 40.173936877058146}, {"code": "function trimMime(mime){\n\t    if (mime === null || mime === 'text/html') {\n        return mime;\n    }\n    if (trimMime.cache[mime] === undefined) {\n        let parts = mime.split('/');\n        if (parts[0] === 'text' || parts[0] === 'application') {\n            parts = parts.slice(1);\n        }\n        if (parts[0].startsWith('-x')) {\n            parts[0] = parts[0].substr(2);\n        }\n        trimMime.cache[mime] = parts.join('/');\n    }\n    return trimMime.cache[mime];\n}", "CodeBleu_score": 49.50733250345616}, {"code": "function trimMime(mime){\n\t    if (mime == null || mime === 'text/html') return mime;\n    if (mimeCache[mime] !== undefined) return mimeCache[mime];\n    let parts = mime.split('/');\n    if (parts[0] === 'text') parts.shift();\n    else if (parts[0] === 'application') parts.shift();\n    if (parts[0].startsWith('-x')) parts[0] = parts[0].substr(2);\n    mimeCache[mime] = parts.join('/');\n    return mimeCache[mime];\n}", "CodeBleu_score": 41.73062251861649}]}
{"instance_id": "5d211ed69fed", "generation_result": [{"code": "function buildDateLimits(baseNote){\n\t  const baseDate = dateUtils.parseDateTime(baseNote.utcDateCreated).getTime();\n  const minDate = new Date(baseDate - 30 * 24 * 60 * 60 * 1000).toISOString();\n  const maxDate = new Date(baseDate + 30 * 24 * 60 * 60 * 1000).toISOString();\n  const minExcludedDate = new Date(baseDate - 15 * 24 * 60 * 60 * 1000).toISOString();\n  const maxExcludedDate = new Date(baseDate + 15 * 24 * 60 * 60 * 1000).toISOString();\n  return { minDate, minExcludedDate, maxExcludedDate, maxDate };\n}", "CodeBleu_score": 37.60726807698863}, {"code": "function buildDateLimits(baseNote){\n\t  var baseNoteDate = dateUtils.parseDateTime(baseNote.utcDateCreated).getTime();\n  var minDate = new Date(baseNoteDate - (1000 * 60 * 60 * 24 * 365 * 5)).toISOString();\n  var minExcludedDate = new Date(baseNoteDate - (1000 * 60 * 60 * 24 * 365 * 4)).toISOString();\n  var maxExcludedDate = new Date(baseNoteDate + (1000 * 60 * 60 * 24 * 365 * 4)).toISOString();\n  var maxDate = new Date(baseNoteDate + (1000 * 60 * 60 * 24 * 365 * 5)).toISOString();\n  return {\n    minDate: minDate,\n    minExcludedDate: minExcludedDate,\n    maxExcludedDate: maxExcludedDate,\n    maxDate: maxDate\n  }\n}", "CodeBleu_score": 36.05566537307468}, {"code": "function buildDateLimits(baseNote){\n\t    var baseDate = dateUtils.parseDateTime(baseNote.utcDateCreated).getTime();\n    var minDate = new Date(baseDate - 1000 * 60 * 60 * 24 * 7).toISOString();\n    var minExcludedDate = new Date(baseDate - 1000 * 60 * 60 * 24 * 3).toISOString();\n    var maxExcludedDate = new Date(baseDate + 1000 * 60 * 60 * 24 * 3).toISOString();\n    var maxDate = new Date(baseDate + 1000 * 60 * 60 * 24 * 7).toISOString();\n    return {\n        minDate: minDate,\n        minExcludedDate: minExcludedDate,\n        maxExcludedDate: maxExcludedDate,\n        maxDate: maxDate\n    };\n}", "CodeBleu_score": 37.36558637800505}]}
{"instance_id": "5ef14ada992c", "generation_result": [{"code": "_setContent(content, opts = {}){\n\t    if (content == null) {\n        content = '';\n    } else if (typeof content !== 'string' && !Buffer.isBuffer(content)) {\n        content = JSON.stringify(content);\n    }\n\n    if (typeof content === 'string' && this.hasStringContent) {\n        content = Buffer.from(content, 'utf8');\n    }\n\n    const unencryptedContentForHashCalculation = this.#getUnencryptedContentForHashCalculation(content);\n    const hash = crypto.createHash('sha1').update(unencryptedContentForHashCalculation).digest('hex');\n    const encryptedContent = this.#encryptContent(content, hash);\n\n    const { forceSave, forceFrontendReload } = opts;\n    const blob = this.#saveBlob(hash, encryptedContent);\n    if (!blob) {\n        return;\n    }\n\n    this._setBlob(blob, forceSave, forceFrontendReload);\n    this.#deleteBlobIfNotUsed(blob);\n}", "CodeBleu_score": 35.927578211545885}, {"code": "_setContent(content, opts = {}){\n\t    if (content == null) {\n        content = '';\n    }\n    if (typeof content !== 'string' && !Buffer.isBuffer(content)) {\n        content = JSON.stringify(content);\n    }\n    const unencryptedHash = this.#getUnencryptedContentForHashCalculation(content);\n    const encryptedHash = protectedSessionService.isProtectedSessionAvailable() ?\n        protectedSessionService.encrypt(unencryptedHash) :\n        unencryptedHash;\n    const blob = {\n        content,\n        hash: encryptedHash,\n        unencryptedHash,\n    };\n    return this.#saveBlob(blob, opts).then(blobId => {\n        this._setBlobId(blobId);\n        if (opts.forceSave) {\n            return this.save(opts);\n        }\n        if (opts.forceFrontendReload) {\n            return this.reloadFrontend();\n        }\n        return Promise.resolve();\n    });\n}", "CodeBleu_score": 35.13271823596874}, {"code": "_setContent(content, opts = {}){\n\t  if (content == null) {\n    content = '';\n  }\n\n  if (!Buffer.isBuffer(content)) {\n    content = Buffer.from(content.toString());\n  }\n\n  const unencryptedContentForHashCalculation = this.#getUnencryptedContentForHashCalculation(content);\n\n  const hash = this.#saveBlob(unencryptedContentForHashCalculation, opts);\n\n  if (this.#contentHash !== hash) {\n    this.#contentHash = hash;\n\n    if (this.hasStringContent) {\n      this.content = unencryptedContentForHashCalculation.toString();\n    } else {\n      this.content = unencryptedContentForHashCalculation;\n    }\n\n    this._setModified();\n  }\n\n  if (opts.forceSave || this.isModified()) {\n    return this.save(opts);\n  }\n\n  return this;\n}", "CodeBleu_score": 30.56346174521601}]}
{"instance_id": "6f76c3417cdb", "generation_result": [{"code": "async createNoteIntoInboxCommand(){\n\t    // Retrieve the inbox note\n    const inboxNote = await dateNoteService.getInboxNote();\n\n    // Post a request to the server to create a child note under the inbox note\n    const newNote = await server.post('/api/notes', {\n        parentId: inboxNote.id,\n        type: 'TEXT_NOTE',\n        content: 'New note',\n        protection: {\n            isProtected: false,\n            password: ''\n        }\n    });\n\n    // Ensure the entity change is known\n    await ws.waitForMaxKnownEntityChangeId(newNote.entityChangeId);\n\n    // Open the new note in a tab with hoisting\n    appContext.tabManager.openTabWithNoteWithHoisting(newNote);\n\n    // Trigger an event to focus and select the title of the new note\n    appContext.triggerEvent('focusAndSelectTitleOfNote', newNote.id);\n}", "CodeBleu_score": 53.161175363879295}, {"code": "async createNoteIntoInboxCommand(){\n\t    const inboxNote = await dateNoteService.getInboxNote();\n    const response = await server.post('/api/notes/new', {\n        parent_id: inboxNote.id,\n        type: 'note',\n        content: '',\n        is_protected: false,\n    });\n    const newNote = response.data;\n    await ws.waitForMaxKnownEntityChangeId(newNote.id);\n    await appContext.tabManager.openTabWithNoteWithHoisting(newNote);\n    appContext.triggerEvent('focusAndSelectTitle', newNote);\n}", "CodeBleu_score": 53.07026251806235}, {"code": "async createNoteIntoInboxCommand(){\n\t    let inboxNote = await dateNoteService.getInboxNote();\n    let newNote = await server.post(\n        \"/api/notes\",\n        {\n            parentId: inboxNote.id,\n            type: \"NOTE\",\n            content: \"\",\n            protection: {\n                isProtected: false\n            }\n        }\n    );\n    await ws.waitForMaxKnownEntityChangeId(newNote.entityChangeId);\n    appContext.tabManager.openTabWithNoteWithHoisting(newNote.id);\n    appContext.triggerEvent(\"focusAndSelectTitleOfNote\", { noteId: newNote.id });\n}", "CodeBleu_score": 45.526534934243564}]}
{"instance_id": "2b91c618a874", "generation_result": [{"code": " async toggleNoteHoistingCommand({noteId = appContext.tabManager.getActiveContextNoteId()}){\n\t    const note = await froca.getNote(noteId);\n    const activeNoteContext = appContext.tabManager.getActiveContext();\n    if (note.isHoisted) {\n        activeNoteContext.unhoist();\n    } else {\n        activeNoteContext.setHoistedNoteId(noteId);\n    }\n}", "CodeBleu_score": 63.90704782104627}, {"code": " async toggleNoteHoistingCommand({noteId = appContext.tabManager.getActiveContextNoteId()}){\n\t  const note = await froca.getNote(noteId);\n  const activeNoteContext = appContext.tabManager.getActiveContext();\n  if (note.type === 'search') {\n    activeNoteContext.unhoist();\n  } else {\n    activeNoteContext.setHoistedNoteId(note.id);\n  }\n}", "CodeBleu_score": 65.4494247662427}, {"code": " async toggleNoteHoistingCommand({noteId = appContext.tabManager.getActiveContextNoteId()}){\n\t    const note = await froca.getNote(noteId);\n    const activeNoteContext = appContext.tabManager.getActiveContext();\n    if (note.isHoisted) {\n        activeNoteContext.unhoist();\n    } else if (note.type !== 'search') {\n        activeNoteContext.setHoistedNoteId(noteId);\n    }\n}", "CodeBleu_score": 72.21247396766968}]}
{"instance_id": "8df5414bda15", "generation_result": [{"code": "async openInWindowCommand({notePath, hoistedNoteId, viewScope}){\n\t    const hash = linkService.calculateHash({notePath, hoistedNoteId, viewScope});\n    if (utils.isElectron) {\n        ipcRenderer.send('createWindow', {hash});\n    } else {\n        const window = window.open(\n            `https://app.boostnote.io/${hash}`,\n            '_blank',\n            'width=1024,height=768'\n        );\n        window.focus();\n    }\n}", "CodeBleu_score": 44.63769522924507}, {"code": "async openInWindowCommand({notePath, hoistedNoteId, viewScope}){\n\t    const hash = linkService.calculateHash({notePath, hoistedNoteId, viewScope});\n    if (utils.isElectron) {\n        ipcRenderer.send('createWindow', {hash});\n    } else {\n        const url = new URL(window.location.href);\n        url.hash = hash;\n        window.open(url, '_blank', 'width=1200,height=800');\n    }\n}", "CodeBleu_score": 43.87864107960442}, {"code": "async openInWindowCommand({notePath, hoistedNoteId, viewScope}){\n\t    const hash = linkService.calculateHash({notePath, hoistedNoteId, viewScope});\n    if (utils.isElectron()) {\n        ipcRenderer.send('open-in-window', hash);\n    } else {\n        const url = window.open(\n            `${window.location.origin}/${hash}`,\n            '_blank',\n            'width=1024,height=768'\n        );\n        url.focus();\n    }\n}", "CodeBleu_score": 53.48626121256357}]}
{"instance_id": "bd6dc0a79a5b", "generation_result": [{"code": "async runActiveNoteCommand(){\n\t    const activeContext = appContext.tabManager.getActiveContext();\n    if (activeContext.note.mime.endsWith('code')) {\n        if (activeContext.note.mime.startsWith('text/x-frontend')) {\n            await bundleService.getAndExecuteBundle(activeContext.note.mime, activeContext.ntxId);\n        } else if (activeContext.note.mime.startsWith('text/x-backend')) {\n            await server.post(`/api/note/${activeContext.ntxId}/run`, {}, {\n                success: () => {\n                    toastService.showMessage('Note executed successfully.');\n                },\n                error: () => {\n                    toastService.showError('Error executing note.');\n                }\n            });\n        } else if (activeContext.note.mime.startsWith('text/x-sqlite')) {\n            await server.post(`/api/note/${activeContext.ntxId}/run`, {}, {\n                success: (response) => {\n                    if (response.status === 'success') {\n                        appContext.triggerEvent('note.run.success', response.result);\n                    } else {\n                        toastService.showError('Error executing note: ' + response.message);\n                    }\n                },\n                error: () => {\n                    toastService.showError('Error executing note.');\n                }\n            });\n        }\n    }\n}", "CodeBleu_score": 33.66189710183015}, {"code": "async runActiveNoteCommand(){\n\t  const { ntxId, note } = appContext.tabManager.getActiveContext();\n  if (note.type !== 'code') {\n    return;\n  }\n  if (note.mime.endsWith('javascript')) {\n    await bundleService.getAndExecuteBundle(ntxId);\n  } else if (note.mime.endsWith('sql')) {\n    const query = note.content;\n    const result = await server.post('/api/db/query', { query });\n    if (!result.success) {\n      toastService.showError('SQL query failed');\n      return;\n    }\n    appContext.triggerEvent('sqlQueryResult', result);\n  } else {\n    server.post('/api/script/run', { ntxId });\n  }\n  toastService.showMessage(`Executing ${note.mime}`);\n}", "CodeBleu_score": 53.445104327462566}, {"code": "async runActiveNoteCommand(){\n\t    const activeContext = appContext.tabManager.getActiveContext();\n    if (activeContext.note.type !== 'code') {\n        toastService.showError('Not a code note');\n        return;\n    }\n    if (activeContext.note.mime.endsWith('js')) {\n        await bundleService.getAndExecuteBundle(activeContext.note.id, 'run');\n        toastService.showMessage('Code note executed');\n    } else if (activeContext.note.mime.endsWith('sql')) {\n        const query = activeContext.note.content;\n        const response = await server.post('api/note/execute-sql', { query });\n        if (response.error) {\n            toastService.showError(response.error);\n        } else {\n            appContext.triggerEvent('note.sql.executed', {\n                ntxId: activeContext.ntxId,\n                results: response.results,\n            });\n        }\n    } else {\n        await server.post('api/note/execute-script', {\n            ntxId: activeContext.ntxId,\n        });\n        toastService.showMessage('Code note executed');\n    }\n}", "CodeBleu_score": 44.39138055692858}]}
{"instance_id": "233cf4163968", "generation_result": [{"code": "async isReadOnly(){\n\t  if (this.readOnlyModeDisabled) {\n    return false;\n  }\n  const note = await this.getNote();\n  if (note == null) {\n    return false;\n  }\n  if (note.type !== 'text' && note.type !== 'code') {\n    return true;\n  }\n  if (note.labels.includes('readOnly')) {\n    return true;\n  }\n  if (this.viewMode === 'source') {\n    return true;\n  }\n  const blob = await this.getBlob();\n  const limit = note.type === 'text' ? 1000000 : 10000000;\n  if (blob.size > limit && !note.labels.includes('autoReadOnlyDisabled')) {\n    return true;\n  }\n  return false;\n}", "CodeBleu_score": 51.01837215794299}, {"code": "async isReadOnly(){\n\t  if (this.isReadOnlyModeDisabled) return false;\n  const note = this.note;\n  if (!note) return true;\n  const type = note.getType();\n  if (type !== 'text' && type !== 'code') return true;\n  const readOnly = note.isLabelTruthy('readOnly');\n  if (readOnly) return true;\n  const viewMode = this.getViewMode();\n  if (viewMode === 'source') return true;\n  const blob = await note.getBlob();\n  const sizeLimit = viewMode === 'preview' ? this.previewSizeLimit : this.editorSizeLimit;\n  if (blob.size > sizeLimit && !note.isLabelTruthy('autoReadOnlyDisabled')) return true;\n  return false;\n}", "CodeBleu_score": 43.98453090454926}, {"code": "async isReadOnly(){\n\t  if (this.readOnlyMode === false) {\n    return false;\n  }\n  const note = await this.getNote();\n  if (!note || note.type !== 'text' && note.type !== 'code') {\n    return true;\n  }\n  if (note.labels.includes('readOnly') || this.viewMode === 'source') {\n    return true;\n  }\n  const blob = await this.getBlob();\n  const contentLength = blob.size;\n  const sizeLimit = note.type === 'text' ? 100000 : 1000000;\n  if (contentLength > sizeLimit && !note.labels.includes('autoReadOnlyDisabled')) {\n    return true;\n  }\n  return false;\n}", "CodeBleu_score": 50.79232352097286}]}
{"instance_id": "bca77fc5e32c", "generation_result": [{"code": "async openEmptyTab(ntxId = null, hoistedNoteId = 'root', mainNtxId = null){\n\t  const existingNoteContext = this.getActiveContext();\n  if (existingNoteContext) {\n    existingNoteContext.setHoistedNoteId(hoistedNoteId);\n    return existingNoteContext;\n  }\n\n  const newNoteContext = new NoteContext(ntxId, hoistedNoteId, mainNtxId);\n  this.child = newNoteContext;\n  this.children.push(newNoteContext);\n  this.triggerEvent('newNoteContextCreated', {\n    noteContext: newNoteContext,\n  });\n  return newNoteContext;\n}", "CodeBleu_score": 49.99102720482159}, {"code": "async openEmptyTab(ntxId = null, hoistedNoteId = 'root', mainNtxId = null){\n\t  if (this.isMobile) {\n    const existingNoteContext = this.getActiveContext();\n    if (existingNoteContext) {\n      existingNoteContext.setHoistedNoteId(hoistedNoteId);\n      return existingNoteContext;\n    }\n  } else {\n    const existingNoteContext = this.children.find(\n      (child) => child.hoistedNoteId === hoistedNoteId\n    );\n    if (existingNoteContext) {\n      existingNoteContext.setHoistedNoteId(hoistedNoteId);\n      return existingNoteContext;\n    }\n  }\n  const newNoteContext = new NoteContext(ntxId, hoistedNoteId, mainNtxId);\n  this.triggerEvent('newNoteContextCreated', {\n    noteContext: newNoteContext,\n  });\n  this.child(newNoteContext);\n  return newNoteContext;\n}", "CodeBleu_score": 54.792514840804806}, {"code": "async openEmptyTab(ntxId = null, hoistedNoteId = 'root', mainNtxId = null){\n\t  // If a note context already exists, update the hoisted note id and return the existing context\n  if (utils.isMobile) {\n    const activeContext = this.getActiveContext();\n    if (activeContext) {\n      activeContext.setHoistedNoteId(hoistedNoteId);\n      return activeContext;\n    }\n  } else {\n    const existingNoteContext = this.children.find(child => {\n      return child.hoistedNoteId === hoistedNoteId;\n    });\n    if (existingNoteContext) {\n      existingNoteContext.setHoistedNoteId(hoistedNoteId);\n      return existingNoteContext;\n    }\n  }\n\n  // If no note context exists, create a new one\n  const newNoteContext = new NoteContext(ntxId, hoistedNoteId, mainNtxId);\n  this.child(newNoteContext);\n  await this.triggerEvent('newNoteContextCreated', newNoteContext);\n  return newNoteContext;\n}", "CodeBleu_score": 52.300666668656106}]}
{"instance_id": "fa8b5627c077", "generation_result": [{"code": "sortChildren(){\n\t    // Create an object to store the positions of each branch\n    let positions = {};\n    // Iterate over childToBranch values and retrieve their note positions\n    for (let child in this.childToBranch) {\n        positions[child] = this.froca.getBranch(this.childToBranch[child]).position;\n    }\n    // Sort the children array in ascending order according to these positions\n    this.children.sort((a, b) => positions[a] - positions[b]);\n}", "CodeBleu_score": 55.12558692063262}, {"code": "sortChildren(){\n\t    const branches = {};\n    this.children.forEach((child) => {\n        const branch = this.froca.getBranch(child.childToBranch);\n        if (!branches[branch]) {\n            branches[branch] = [];\n        }\n        branches[branch].push(child.childToBranch);\n    });\n    const positions = {};\n    Object.values(branches).forEach((branch) => {\n        branch.forEach((note) => {\n            positions[note] = this.froca.getNotePosition(note);\n        });\n    });\n    this.children.sort((a, b) => {\n        return positions[a.childToBranch] - positions[b.childToBranch];\n    });\n}", "CodeBleu_score": 39.644841274989076}, {"code": "sortChildren(){\n\t  // create object to store positions of each branch\n  let branchPositions = {};\n  // iterate over childToBranch object\n  for (let child in this.childToBranch) {\n    // get note position of child\n    let notePosition = this.froca.getBranch(this.childToBranch[child]).notePosition;\n    // store note position in branchPositions object\n    branchPositions[child] = notePosition;\n  }\n  // sort children in ascending order according to branchPositions\n  this.children.sort((a, b) => branchPositions[a] - branchPositions[b]);\n}", "CodeBleu_score": 48.22802527633849}]}
{"instance_id": "51a1ff6e218f", "generation_result": [{"code": "async function moveToParentNote(branchIdsToMove, newParentBranchId){\n\t  const newParentBranch = await getBranch(newParentBranchId);\n  if (!newParentBranch) {\n    return;\n  }\n  const hoistedNoteId = getHoistedNoteId();\n  branchIdsToMove = branchIdsToMove.filter(filterRootNote);\n  for (const branchId of branchIdsToMove) {\n    const branchToMove = await getBranch(branchId);\n    if (!branchToMove) {\n      continue;\n    }\n    if (branchToMove.id === hoistedNoteId) {\n      continue;\n    }\n    const parentNote = branchToMove.getParentNote();\n    if (parentNote && parentNote.type === 'search') {\n      continue;\n    }\n    const success = await server.put(`/api/branches/${branchToMove.id}/move`, {\n      parentId: newParentBranch.id\n    });\n    if (!success) {\n      showError('Failed to move branch');\n      return;\n    }\n  }\n}", "CodeBleu_score": 52.28261523823967}, {"code": "async function moveToParentNote(branchIdsToMove, newParentBranchId){\n\t  const newParentBranch = await getBranch(newParentBranchId);\n  if (!newParentBranch) {\n    return;\n  }\n  if (newParentBranch.type === 'search') {\n    toastService.showError('Cannot move branches into a search branch');\n    return;\n  }\n  const hoistedNoteId = await getHoistedNoteId();\n  const filteredBranchIdsToMove = branchIdsToMove.filter(filterRootNote);\n  for (const branchId of filteredBranchIdsToMove) {\n    const branchToMove = await getBranch(branchId);\n    if (branchToMove.id === hoistedNoteId) {\n      continue;\n    }\n    const parentNote = await branchToMove.getParentNote();\n    if (parentNote.type === 'search') {\n      continue;\n    }\n    const response = await server.put(`/api/notes/${branchToMove.id}/move`, {\n      parentNoteId: newParentBranch.id\n    });\n    if (response.error) {\n      toastService.showError(response.error);\n      return;\n    }\n  }\n}", "CodeBleu_score": 55.2714818850783}, {"code": "async function moveToParentNote(branchIdsToMove, newParentBranchId){\n\t  const newParentBranch = await getBranch(newParentBranchId);\n  if (!isValidMoveDestination(newParentBranch)) {\n    return;\n  }\n\n  const hoistedNoteId = getHoistedNoteId();\n  const filteredBranchIdsToMove = filterRootNote(branchIdsToMove);\n  for (const branchId of filteredBranchIdsToMove) {\n    const branchToMove = await getBranch(branchId);\n    if (branchToMove.id === hoistedNoteId || branchToMove.getParentNote().type === 'search') {\n      continue;\n    }\n\n    const { success } = await put(`/api/branches/${branchToMove.id}`, {\n      parent_branch_id: newParentBranch.id,\n    });\n    if (!success) {\n      showError('Failed to move branch');\n      return;\n    }\n  }\n}", "CodeBleu_score": 50.20266371200876}]}
{"instance_id": "2ffcc8140af6", "generation_result": [{"code": "async function activateParentNotePath(){\n\t  let activeContext = await appContext.tabManager.getActiveContext();\n  let parentNotePathArr = activeContext.notePathArray.slice(0, -1);\n  if (parentNotePathArr.length > 0) {\n    let parentNotePath = parentNotePathArr.join('/');\n    await activeContext.setNote(parentNotePath);\n  }\n}", "CodeBleu_score": 66.19452632559971}, {"code": "async function activateParentNotePath(){\n\t    const activeContext = await appContext.tabManager.getActiveContext();\n    const parentNotePathArr = activeContext.notePathArray.slice(0, -1);\n    if (parentNotePathArr.length) {\n        activeContext.setNote(parentNotePathArr.join('/'));\n    }\n}", "CodeBleu_score": 72.37638391526944}, {"code": "async function activateParentNotePath(){\n\t    const activeContext = await appContext.tabManager.getActiveContext();\n    const parentNotePathArr = activeContext.notePathArray.slice(0, -1);\n    if (parentNotePathArr.length > 0) {\n        await activeContext.setNote(parentNotePathArr.join(\"/\"));\n    }\n}", "CodeBleu_score": 79.20033356816066}]}
{"instance_id": "04b13e7ad9f6", "generation_result": [{"code": "async function copy(branchIds){\n\t    if (branchIds.length == 0) {\n        toastService.showMessage('No branches selected.');\n        return;\n    }\n\n    let branches = await froca.getBranches(branchIds);\n    let links = [];\n    for (let branch of branches) {\n        let link = linkService.createLink(branch);\n        links.push(link);\n    }\n\n    if (utils.isElectron()) {\n        clipboard.writeHTML(links.join(''));\n    } else {\n        require('electron').ipcRenderer.send('copy', links.join(''));\n    }\n\n    clipboard.mode = 'copy';\n    toastService.showMessage('Branches copied to clipboard.');\n}", "CodeBleu_score": 42.20931198293102}, {"code": "async function copy(branchIds){\n\t  const links = [];\n  for (const branchId of branchIds) {\n    const link = await linkService.createLink(branchId, 'copy');\n    links.push(link);\n  }\n  if (utils.isElectron()) {\n    clipboard.writeHTML(links.join(''));\n  } else {\n    const html = links.join('');\n    const text = html.replace(/<[^>]*>/g, '');\n    clipboard.writeHTML(html);\n    clipboard.writeText(text);\n  }\n  toastService.showMessage('Branches copied to clipboard.');\n}", "CodeBleu_score": 44.9840106777556}, {"code": "async function copy(branchIds){\n\t  const links = await Promise.all(branchIds.map(branchId => linkService.createLink(branchId)));\n  const html = links.join('');\n  if (utils.isElectron()) {\n    clipboard.writeHTML(html);\n  } else {\n    document.addEventListener('copy', (event) => {\n      event.clipboardData.setData('text/html', html);\n      event.preventDefault();\n      document.removeEventListener('copy', null);\n    });\n    document.execCommand('copy');\n  }\n  toastService.showMessage(`${links.length} ${links.length === 1 ? 'branch' : 'branches'} copied to clipboard`);\n}", "CodeBleu_score": 40.3402562303164}]}
{"instance_id": "b3a6cce6e5ce", "generation_result": [{"code": "export const cleanHostsList = (data: IHostsBasicData): IHostsBasicData => 26{\n\t  const list = [];\n  const stack = [];\n  stack.push({ children: data });\n  while (stack.length) {\n    const { children } = stack.pop();\n    if (children) {\n      for (const item of children) {\n        if (item.type === 'folder') {\n          if (!Array.isArray(item.children)) {\n            item.children = [];\n          }\n          item.content = '';\n          stack.push({ children: item.children });\n        } else if (item.type === 'group') {\n          if (!Array.isArray(item.include)) {\n            item.include = [];\n          }\n          item.content = '';\n        } else {\n          item.content = '';\n        }\n        list.push(item);\n      }\n    }\n  }\n  return list;\n}", "CodeBleu_score": 41.06031947368627}, {"code": "export const cleanHostsList = (data: IHostsBasicData): IHostsBasicData => 26{\n\t    if (Array.isArray(data)) {\n        return data.reduce((acc: IHostsBasicData, item: IHostsBasicDataItem) => {\n            if (item.type === 'folder') {\n                item.children = Array.isArray(item.children) ? item.children : [];\n                item.content = '';\n            } else if (item.type === 'group') {\n                item.include = Array.isArray(item.include) ? item.include : [];\n                item.content = '';\n            }\n            acc.push(item);\n            return acc;\n        }, []);\n    } else {\n        return [];\n    }\n}", "CodeBleu_score": 43.9858686311697}, {"code": "export const cleanHostsList = (data: IHostsBasicData): IHostsBasicData => 26{\n\t  if (!Array.isArray(data)) {\n    throw new Error('data is not an array');\n  }\n  const newData: IHostsBasicData = [];\n  for (const item of data) {\n    if (typeof item !== 'object') {\n      throw new Error('item is not an object');\n    }\n    if (item.type === 'folder' || item.type === 'group') {\n      if (!Array.isArray(item.children)) {\n        item.children = [];\n      }\n      if (item.type === 'group') {\n        if (!Array.isArray(item.include)) {\n          item.include = [];\n        }\n      }\n      if (!item.content) {\n        item.content = '';\n      }\n    }\n    newData.push(item);\n  }\n  return newData;\n}", "CodeBleu_score": 47.16498436987679}]}
{"instance_id": "a494fe11a98c", "generation_result": [{"code": "const addHistory = async (content: string) =>{\n\t    const historyLimit = await configGet('historyLimit')\n    if (historyLimit && !isNaN(historyLimit) && historyLimit > 0) {\n        await swhdb.collection.history.insert({\n            id: uuid4(),\n            content: content,\n            time: new Date().getTime()\n        })\n        await deleteHistory(historyLimit)\n    }\n}", "CodeBleu_score": 29.91610156108332}, {"code": "const addHistory = async (content: string) =>{\n\t  const historyLimit = await configGet('historyLimit')\n  const historyLimitInt = parseInt(historyLimit)\n  if (historyLimitInt > 0) {\n    await swhdb.collection.history.insert({\n      id: uuid4(),\n      content: content,\n      timestamp: new Date().getTime()\n    })\n    await deleteHistory(historyLimitInt)\n  }\n}", "CodeBleu_score": 29.459829047135898}, {"code": "const addHistory = async (content: string) =>{\n\t\t// insert new history record\n\tawait swhdb.collection.history.insert({\n\t\tid: uuid4(),\n\t\tcontent: content,\n\t\ttimestamp: new Date().getTime()\n\t})\n\t// get history limit\n\tconst historyLimit = await configGet('historyLimit')\n\t// check if history limit is a valid number\n\tif (historyLimit && !isNaN(historyLimit) && historyLimit > 0) {\n\t\t// get all history records\n\t\tconst history = await swhdb.collection.history.all()\n\t\t// check if number of history records exceeds limit\n\t\tif (history.length > historyLimit) {\n\t\t\t// delete oldest history records\n\t\t\tawait deleteHistory(history.length - historyLimit)\n\t\t}\n\t}\n}", "CodeBleu_score": 34.68835860752106}]}
{"instance_id": "bd1413e33a8a", "generation_result": [{"code": "const readOldData = async (): Promise<IHostsBasicData> =>{\n\t  const filePath = getDataFolder(FILENAME_HOSTS_DATA);\n  const defaultData: IHostsBasicData = {\n    data: [],\n    lastUpdate: 0,\n  };\n  if (!fs.existsSync(filePath)) {\n    return defaultData;\n  }\n  const fileContent = await fs.promises.readFile(filePath, { encoding: 'utf8' });\n  try {\n    const jsonData = JSON.parse(fileContent);\n    return {\n      data: cleanHostsList(jsonData.data),\n      lastUpdate: jsonData.lastUpdate,\n    };\n  } catch (error) {\n    console.error(error);\n    return defaultData;\n  }\n}", "CodeBleu_score": 48.355286404231755}, {"code": "const readOldData = async (): Promise<IHostsBasicData> =>{\n\t    const filePath = path.join(getDataFolder(), 'data.json');\n    const defaultData: IHostsBasicData = {\n        hosts: [],\n        date: new Date().toISOString(),\n        version: '0.0.0',\n    };\n\n    if (!fs.existsSync(filePath)) {\n        return defaultData;\n    }\n\n    const fileContent = await fs.promises.readFile(filePath, 'utf8');\n    let data;\n\n    try {\n        data = JSON.parse(fileContent);\n    } catch (error) {\n        console.error(error);\n        return defaultData;\n    }\n\n    return cleanHostsList(data);\n}", "CodeBleu_score": 51.34022394899838}, {"code": "const readOldData = async (): Promise<IHostsBasicData> =>{\n\t    const dataFolder = getDataFolder();\n    const filePath = path.join(dataFolder, 'hosts.json');\n    const defaultData: IHostsBasicData = {\n        lastUpdated: new Date().toISOString(),\n        hosts: []\n    };\n\n    if (!fs.existsSync(filePath)) {\n        return defaultData;\n    }\n\n    const fileContent = await fs.promises.readFile(filePath, 'utf8');\n    let data: IHostsBasicData;\n\n    try {\n        data = JSON.parse(fileContent);\n    } catch (e) {\n        console.error(e);\n        return defaultData;\n    }\n\n    return cleanHostsList(data);\n}", "CodeBleu_score": 52.29169322666384}]}
{"instance_id": "1a746af7c945", "generation_result": [{"code": "async function getSwhDb(): Promise<PotDb>{\n\t  if (!swhdb) {\n    data_dir = localdb.dict.local.get('data_dir')\n    swhdb_dir = path.join(data_dir, 'swhdb')\n    swhdb = new PotDb(swhdb_dir)\n    console.log(`swhdb_dir: ${swhdb_dir}`)\n  }\n  return swhdb\n}", "CodeBleu_score": 37.93467599703539}, {"code": "async function getSwhDb(): Promise<PotDb>{\n\t  if (swhdb) return swhdb;\n  // get the data directory path from local storage\n  const dataDir = await localdb.dict.local.get('data_dir');\n  // set the global data_dir\n  data_dir = dataDir;\n  // construct the database directory path\n  const dbDir = path.join(dataDir, 'swhdb');\n  // create a new PotDb instance with the database directory path\n  swhdb = new PotDb(dbDir);\n  // log the database directory path\n  console.log(`swhdb directory: ${dbDir}`);\n  // return the swhdb instance\n  return swhdb;\n}", "CodeBleu_score": 46.27234539666792}, {"code": "async function getSwhDb(): Promise<PotDb>{\n\t  if (swhdb) {\n    return swhdb\n  }\n\n  const data_dir = await localdb.dict.local.get(\"data_dir\")\n\n  const db_dir = path.join(data_dir, \"swhdb\")\n\n  console.log(`db_dir: ${db_dir}`)\n\n  swhdb = new PotDb(db_dir)\n\n  return swhdb\n}", "CodeBleu_score": 50.075576358023014}]}
{"instance_id": "375d71e6f391", "generation_result": [{"code": "const isNeedRefresh = (hosts: IHostsListObject): boolean => {\n\t  if (!hosts.refreshInterval || !hosts.url) {\n    return false\n  }\n  if (!hosts.lastRefresh) {\n    return true\n  }\n  const timeElapsed = new Date().getTime() - hosts.lastRefresh\n  return timeElapsed > hosts.refreshInterval\n}", "CodeBleu_score": 28.33177116911214}, {"code": "const isNeedRefresh = (hosts: IHostsListObject): boolean => {\n\t    if (!hosts.refreshInterval || !hosts.url) return false\n    if (!hosts.lastRefresh) return true\n    if (hosts.lastRefresh + hosts.refreshInterval * 1000 > new Date().getTime()) return false\n    return true\n}", "CodeBleu_score": 27.67973775462681}, {"code": "const isNeedRefresh = (hosts: IHostsListObject): boolean => {\n\t    if (hosts.refreshInterval === undefined || hosts.refreshInterval <= 0) {\n        return false\n    }\n    if (hosts.url === undefined || hosts.url.match(/^https?:\\/\\//) === null) {\n        return false\n    }\n    if (hosts.lastRefresh === undefined) {\n        return true\n    }\n    const now = new Date().getTime()\n    const elapsed = now - hosts.lastRefresh\n    return elapsed > hosts.refreshInterval\n}", "CodeBleu_score": 36.82837307848926}]}
{"instance_id": "e9824782738b", "generation_result": [{"code": "const callAction = (action: keyof Actions, ...params: any[]) => {\n\t  const callbackId = getCallbackId();\n  ipcRenderer.send(action, {\n    callbackId,\n    params\n  });\n  return new Promise((resolve, reject) => {\n    ipcRenderer.once(callbackId, (event, response) => {\n      if (response.error) {\n        reject(response.error);\n      } else {\n        resolve(response.data);\n      }\n    });\n  });\n}", "CodeBleu_score": 43.27823962702632}, {"code": "const callAction = (action: keyof Actions, ...params: any[]) => {\n\t  return new Promise((resolve, reject) => {\n    const callbackId = uuidv4();\n\n    ipcRenderer.once(callbackId, (event, data) => {\n      if (data.error) {\n        reject(data.error);\n      } else {\n        resolve(data.result);\n      }\n    });\n\n    ipcRenderer.send('action', {\n      action,\n      callbackId,\n      params\n    });\n  });\n}", "CodeBleu_score": 46.17515775836758}, {"code": "const callAction = (action: keyof Actions, ...params: any[]) => {\n\t  return new Promise((resolve, reject) => {\n    const callbackId = uuid();\n    ipcRenderer.once(callbackId, (event, data) => {\n      if (data.error) {\n        reject(data.error);\n      } else {\n        resolve(data.result);\n      }\n    });\n    ipcRenderer.send(action, {\n      callbackId,\n      params\n    });\n  });\n}", "CodeBleu_score": 43.61456491170546}]}
{"instance_id": "027bc2903865", "generation_result": [{"code": "const loadContent = async (is_new = false) =>{\n\t    const editor = cm_editor;\n    if (!editor) {\n        setTimeout(() => {\n            loadContent(is_new);\n        }, 500);\n        return;\n    }\n    let content = '';\n    if (hosts_id === 'system') {\n        content = await actions.getSystemHosts();\n    } else {\n        content = await actions.getHostsContent(hosts_id);\n    }\n    editor.setValue(content);\n    if (is_new) {\n        editor.clearHistory();\n    }\n}", "CodeBleu_score": 52.49200534520657}, {"code": "const loadContent = async (is_new = false) =>{\n\t    await waitFor(() => {\n        return cm_editor != null;\n    }, 250);\n\n    const content = await actions.getHostsContent();\n    setContent(content);\n    cm_editor.setValue(content);\n    if (is_new) {\n        cm_editor.clearHistory();\n    }\n}", "CodeBleu_score": 41.78667424777722}, {"code": "const loadContent = async (is_new = false) =>{\n\t    while (!cm_editor) {\n        await new Promise(resolve => setTimeout(resolve, 100));\n    }\n    const content = await actions.getHostsContent();\n    setContent(content);\n    if (is_new) {\n        cm_editor.clearHistory();\n    }\n    cm_editor.setValue(content);\n}", "CodeBleu_score": 43.89559760756463}]}
{"instance_id": "199f8fb90016", "generation_result": [{"code": "const onGutterClick = (n: number) =>{\n\t  if (readOnly || !cm_editor) return;\n  const line = cm_editor.getDoc().getLine(n);\n  if (/^\\s*$/.test(line)) return;\n  const lineInfo = cm_editor.lineInfo(n);\n  const hasComment = /^#/.test(line);\n  const toggledLine = hasComment ? line.replace(/^#/, '') : `#${line}`;\n  cm_editor\n    .getDoc()\n    .replaceRange(toggledLine, lineInfo.handle.line, lineInfo.handle.line + 1);\n}", "CodeBleu_score": 45.41688523120922}, {"code": "const onGutterClick = (n: number) =>{\n\t  if (readOnly || !cm_editor) return;\n\n  const info = cm_editor.lineInfo(n);\n  if (/^\\s*$/.test(info.text)) return;\n\n  const hasComment = /^#/.test(info.text);\n  const text = hasComment ? info.text.slice(1) : `#${info.text}`;\n\n  cm_editor.getDoc().replaceRange(text, { line: n, ch: 0 }, { line: n });\n}", "CodeBleu_score": 40.065137594083836}, {"code": "const onGutterClick = (n: number) =>{\n\t  if (readOnly) return;\n  if (!cm_editor) return;\n\n  const info = cm_editor.lineInfo(n);\n  if (/^\\s*$/.test(info.text)) return;\n\n  const hasComment = /^#/.test(info.text);\n  const text = hasComment ? info.text.slice(1) : `#${info.text}`;\n\n  cm_editor\n    .getDoc()\n    .replaceRange(text, { line: n, ch: 0 }, { line: n, ch: info.text.length });\n}", "CodeBleu_score": 41.258621477928145}]}
{"instance_id": "000e8aa4c16c", "generation_result": [{"code": "bool CommandLineParser::parse(const QStringList& args){\n\t    processOptions();\n    processArgs(args);\n    if (err.hasErrors()) {\n        err.enableMessageHeader(false);\n        err.printMessage();\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 11.828672018584017}, {"code": "bool CommandLineParser::parse(const QStringList& args){\n\t    // Clear previous arguments and options.\n    m_foundArgs.clear();\n    m_foundOptions.clear();\n\n    // Initialize variables for parsing.\n    bool foundVersionOption = false;\n    bool foundHelpOption = false;\n\n    // Process arguments.\n    for (auto it = args.cbegin(); it != args.cend(); ++it) {\n        // Get the current argument.\n        const QString& arg = *it;\n\n        // If the current argument is a version option, print the version and exit if there are no additional arguments.\n        if (versionOption.dashedNames.contains(arg)) {\n            if (it == args.cend() - 1) {\n                printVersion();\n                exit(0);\n            }\n            foundVersionOption = true;\n        }\n\n        // If the current argument is a help option, process it.\n        else if (processIfOptionIsHelp(arg)) {\n            foundHelpOption = true;\n        }\n\n        // Otherwise, the current argument is a regular argument.\n        else {\n            // If the current argument is not a regular argument, output an error message and return false.\n            if (!m_foundArgs.append(arg)) {\n                err() << \"An error occurred while parsing the argument \\\"\" << arg << \"\\\".\n\";\n                return false;\n            }\n        }\n    }\n\n    // If the version option was found, print the version and return false.\n    if (foundVersionOption) {\n        printVersion();\n        return false;\n    }\n\n    // If the help option was found, print the help message and return false.\n    if (foundHelpOption) {\n        printHelp();\n        return false;\n    }\n\n    // If any errors occurred during processing, output a general error message and return false.\n    if (!m_foundArgs.isEmpty() && !m_foundOptions.isEmpty() && !m_generalErrorMessage.isEmpty()) {\n        err() << m_generalErrorMessage;\n        return false;\n    }\n\n    // Return true.\n    return true;\n}", "CodeBleu_score": 45.19340813541274}, {"code": "bool CommandLineParser::parse(const QStringList& args){\n\t    // Clear previous arguments and options\n    clear();\n\n    // Initialize variables for parsing\n    m_args = args;\n    m_foundArgs.clear();\n    m_foundOptions.clear();\n    m_generalErrorMessage.clear();\n\n    // If a version option is detected, print the version and exit if there are no additional arguments, otherwise return an error\n    if (processOptions()) {\n        if (m_foundOptions.contains(versionOption)) {\n            printVersion();\n            return true;\n        }\n    }\n\n    // Check for the help option and process other arguments\n    processArgs();\n\n    // If any errors occurred during processing, output a general error message\n    if (!m_generalErrorMessage.isEmpty()) {\n        err << m_generalErrorMessage << endl;\n    }\n\n    return m_generalErrorMessage.isEmpty();\n}", "CodeBleu_score": 20.320828853649903}]}
{"instance_id": "2f02436b366f", "generation_result": [{"code": "void ButtonListView::updateComponents(){\n\t    QList<CaptureTool::Type> listTypes = CaptureToolButton::getIterableButtonTypes();\n    QList<CaptureTool::Type> listConfig = ConfigHandler().buttons;\n\n    for (int i = 0; i < this->count(); i++) {\n        QListWidgetItem* item = this->item(i);\n        CaptureTool::Type type = static_cast<CaptureTool::Type>(item->data(Qt::UserRole).toInt());\n        item->setCheckState(listConfig.contains(type) ? Qt::Checked : Qt::Unchecked);\n    }\n}", "CodeBleu_score": 58.72298644340663}, {"code": "void ButtonListView::updateComponents(){\n\t    QList<CaptureTool::Type> listTypes = CaptureToolButton::getIterableButtonTypes();\n    QList<CaptureTool::Type> configButtons = ConfigHandler().buttons;\n\n    for (int i = 0; i < this->count(); i++) {\n        QListWidgetItem* item = this->item(i);\n        CaptureTool::Type type = static_cast<CaptureTool::Type>(item->data(Qt::UserRole).toInt());\n        item->setCheckState(configButtons.contains(type) ? Qt::Checked : Qt::Unchecked);\n    }\n}", "CodeBleu_score": 59.1414814802529}, {"code": "void ButtonListView::updateComponents(){\n\t    QList<CaptureTool::Type> listTypes = CaptureToolButton::getIterableButtonTypes();\n    QList<CaptureTool::Type> listConfig = ConfigHandler().buttons();\n    for (int i = 0; i < this->count(); i++) {\n        QListWidgetItem* item = this->item(i);\n        if (listConfig.contains(static_cast<CaptureTool::Type>(item->data(Qt::UserRole).toInt()))) {\n            item->setCheckState(Qt::Checked);\n        } else {\n            item->setCheckState(Qt::Unchecked);\n        }\n    }\n}", "CodeBleu_score": 66.33267395944183}]}
{"instance_id": "578e98634572", "generation_result": [{"code": "void ColorPickerEditor::addPreset(){\n\t\tQColor color = m_colorPicker->color();\n\tif (m_colorList.contains(color))\n\t\treturn;\n\tif (m_colorList.size() >= 17) {\n\t\tQMessageBox::critical(this, tr(\"Maximum number of presets reached\"),\n\t\t\t\ttr(\"The maximum number of presets (17) has been reached. You cannot add more colors to the list.\"));\n\t\treturn;\n\t}\n\tm_colorList.append(color);\n\tm_config.setUserColors(m_colorList);\n}", "CodeBleu_score": 51.975280046914165}, {"code": "void ColorPickerEditor::addPreset(){\n\t    if (m_colorList.contains(m_color)) {\n        return;\n    }\n    if (m_colorList.size() == 17) {\n        QMessageBox::critical(this, tr(\"Maximum number of colors\"),\n                              tr(\"The maximum number of colors has been reached.\"));\n        return;\n    }\n    m_colorList.append(m_color);\n    m_config.setUserColors(m_colorList);\n}", "CodeBleu_score": 62.01854499214639}, {"code": "void ColorPickerEditor::addPreset(){\n\t    if (m_colorList.contains(m_color))\n        return;\n    if (m_colorList.size() == 17) {\n        QMessageBox::critical(this, tr(\"Color Picker\"),\n                              tr(\"The maximum number of preset colors is 17.\"));\n        return;\n    }\n    m_colorList.append(m_color);\n    m_config.setUserColors(m_colorList);\n}", "CodeBleu_score": 55.686860719112815}]}
{"instance_id": "3f8c1770cd2e", "generation_result": [{"code": "UIcolorEditor::UIcolorEditor(QWidget* parent)\n  : QWidget(parent){\n\t  setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);\n\n  m_vLayout = new QVBoxLayout;\n  m_vLayout->setAlignment(Qt::AlignCenter);\n\n  m_hLayout = new QHBoxLayout;\n\n  initButtons();\n  m_vLayout->addSpacing(QApplication::fontMetrics().lineSpacing());\n  initColorWheel();\n\n  m_vLayout->addLayout(m_hLayout);\n  setLayout(m_vLayout);\n\n  updateComponents();\n}", "CodeBleu_score": 50.89340598511478}, {"code": "UIcolorEditor::UIcolorEditor(QWidget* parent)\n  : QWidget(parent){\n\t  setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);\n  m_hLayout = new QHBoxLayout;\n  m_vLayout = new QVBoxLayout;\n  m_vLayout->setAlignment(Qt::AlignCenter);\n  initButtons();\n  m_vLayout->addSpacing(QApplication::fontMetrics().lineSpacing());\n  initColorWheel();\n  m_hLayout->addItem(m_vLayout);\n  setLayout(m_hLayout);\n  updateComponents();\n}", "CodeBleu_score": 54.972220839624775}, {"code": "UIcolorEditor::UIcolorEditor(QWidget* parent)\n  : QWidget(parent){\n\t  setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);\n  m_vLayout = new QVBoxLayout;\n  m_hLayout = new QHBoxLayout;\n  m_vLayout->setAlignment(Qt::AlignCenter);\n  m_vLayout->setSpacing(QApplication::fontMetrics().lineSpacing() / 2);\n  initButtons();\n  initColorWheel();\n  m_vLayout->addSpacing(QApplication::fontMetrics().lineSpacing());\n  m_hLayout->addItem(m_vLayout);\n  m_hLayout->addLayout(m_vLayout);\n  setLayout(m_hLayout);\n  updateComponents();\n}", "CodeBleu_score": 60.114230916074284}]}
{"instance_id": "ad86ef280917", "generation_result": [{"code": "void Flameshot::full(const CaptureRequest& req){\n\t  if (resolveAnyConfigErrors())\n    return;\n\n  QPixmap screenshot = ScreenGrabber().grabEntireDesktop();\n  if (screenshot.isNull()) {\n    emit captureFailed();\n    return;\n  }\n\n  if (!req.initialSelection.isNull()) {\n    screenshot = screenshot.copy(req.initialSelection);\n  }\n\n  exportCapture(screenshot, req);\n}", "CodeBleu_score": 34.1623755792814}, {"code": "void Flameshot::full(const CaptureRequest& req){\n\t    if (resolveAnyConfigErrors()) {\n        return;\n    }\n\n    QPixmap screenshot = ScreenGrabber().grabEntireDesktop();\n\n    if (screenshot.isNull()) {\n        emit captureFailed();\n        return;\n    }\n\n    if (!req.initialSelection.isNull()) {\n        screenshot = screenshot.copy(req.initialSelection);\n    }\n\n    exportCapture(screenshot);\n}", "CodeBleu_score": 38.25603221121837}, {"code": "void Flameshot::full(const CaptureRequest& req){\n\t    resolveAnyConfigErrors();\n\n    QPixmap screenshot = ScreenGrabber().grabEntireDesktop();\n\n    if (screenshot.isNull()) {\n        emit captureFailed();\n        return;\n    }\n\n    if (!req.initialSelection.isNull()) {\n        screenshot = screenshot.copy(req.initialSelection);\n    }\n\n    exportCapture(screenshot, req.saveLocation);\n}", "CodeBleu_score": 35.44353469594091}]}
{"instance_id": "42abe47d0da0", "generation_result": [{"code": "void FlameshotDaemon::copyToClipboard(const QPixmap& capture){\n\t    if (instance()) {\n        instance()->attachScreenshotToClipboard(capture);\n    } else {\n        QDBusMessage message = QDBusMessage::createMethodCall(\n                                  QStringLiteral(\"org.flameshot.Daemon\"),\n                                  QStringLiteral(\"/org/flameshot/Daemon\"),\n                                  QStringLiteral(\"org.flameshot.Daemon\"),\n                                  QStringLiteral(\"attachScreenshotToClipboard\"));\n\n        QByteArray ba;\n        QBuffer buffer(&ba);\n        buffer.open(QIODevice::WriteOnly);\n        capture.save(&buffer, \"PNG\");\n\n        message.setArguments({ba});\n        QDBusConnection::sessionBus().send(message);\n    }\n}", "CodeBleu_score": 52.60498641721914}, {"code": "void FlameshotDaemon::copyToClipboard(const QPixmap& capture){\n\t    if (instance()) {\n        instance()->attachScreenshotToClipboard(capture);\n    } else {\n        QDBusMessage message = QDBusMessage::createMethodCall(\n                                   QStringLiteral(DBUS_SERVICE),\n                                   QStringLiteral(DBUS_OBJECT_PATH),\n                                   QStringLiteral(DBUS_INTERFACE),\n                                   QStringLiteral(\"attachScreenshotToClipboard\"));\n\n        QByteArray ba;\n        QBuffer buffer(&ba);\n        buffer.open(QIODevice::WriteOnly);\n        capture.save(&buffer, \"PNG\");\n\n        message.setArguments(QVariantList() << QVariant::fromValue(ba));\n        QDBusConnection::sessionBus().asyncCall(message);\n    }\n}", "CodeBleu_score": 53.097140214958685}, {"code": "void FlameshotDaemon::copyToClipboard(const QPixmap& capture){\n\t    if (instance()) {\n        instance()->attachScreenshotToClipboard(capture);\n    } else {\n        QDBusMessage message = QDBusMessage::createMethodCall(\n            QStringLiteral(\"org.flameshot.Daemon\"),\n            QStringLiteral(\"/org/flameshot/Daemon\"),\n            QStringLiteral(\"org.flameshot.Daemon\"),\n            QStringLiteral(\"attachScreenshotToClipboard\"));\n\n        QByteArray ba;\n        QBuffer buffer(&ba);\n        buffer.open(QIODevice::WriteOnly);\n        capture.save(&buffer, \"PNG\");\n        message.setArguments(QList<QVariant>() << ba);\n        QDBusConnection::sessionBus().send(message);\n    }\n}", "CodeBleu_score": 53.846907122516456}]}
{"instance_id": "4276c0025e1f", "generation_result": [{"code": "void FlameshotDaemon::attachTextToClipboard(const QString& text,\n                                            const QString& notification){\n\t  if (!notification.isEmpty())\n    AbstractLogger::info(notification);\n\n  clipboardHosted = true;\n  clipboard = QApplication::clipboard();\n  clipboard->blockSignals(true);\n  clipboard->setText(text, QClipboard::Clipboard);\n  clipboard->blockSignals(false);\n}", "CodeBleu_score": 66.60955486234114}, {"code": "void FlameshotDaemon::attachTextToClipboard(const QString& text,\n                                            const QString& notification){\n\t  if (!notification.isEmpty()) {\n    AbstractLogger::info(notification);\n  }\n\n  clipboardHosted = true;\n  clipboard = QApplication::clipboard();\n  clipboard->blockSignals(true);\n  clipboard->setText(text);\n  clipboard->blockSignals(false);\n}", "CodeBleu_score": 69.26266221190511}, {"code": "void FlameshotDaemon::attachTextToClipboard(const QString& text,\n                                            const QString& notification){\n\t  if (!notification.isEmpty())\n    AbstractLogger::info(notification);\n\n  clipboardHosted = true;\n\n  clipboard = QApplication::clipboard();\n  clipboard->blockSignals(true);\n  clipboard->setText(text, QClipboard::Clipboard);\n  clipboard->blockSignals(false);\n}", "CodeBleu_score": 66.60955486234114}]}
{"instance_id": "ef69a941bff6", "generation_result": [{"code": "void AcceptTool::pressed(CaptureContext& context){\n\t    auto request = context.request;\n    request.done = true;\n    request.selectionGeometry = geometry;\n    if (request.tasks.contains(Task::PIN)) {\n        geometry.moveTopLeft(context.widget->mapToGlobal(QPoint(0, 0)));\n    }\n    context.request.addTask(Task::PIN);\n    context.request.addTask(Task::CLOSE);\n}", "CodeBleu_score": 50.38192576211383}, {"code": "void AcceptTool::pressed(CaptureContext& context){\n\t    context.request.addTask(\n        context.request.addTask(\n            context.request.addTask(\n                context.request.addTask(\n                    context.request.addTask(\n                        context.request.addTask(\n                            context.request.addTask(\n                                context.request.addTask(\n                                    context.request.addTask(\n                                        context.request.addTask(\n                                            context.request.addTask(\n                                                context.request.addTask(\n                                                    context.request.addTask(\n                                                        context.request.addTask(\n                                                            context.request.addTask(\n                                                                context.request.addTask(\n                                                                    context.request.addTask(\n                                                                        context.request.addTask(\n                                                                            context.request.addTask(\n                                                                                context.request.addTask(\n                                                                                    context.request.addTask(\n                                                                                        context.request.addTask(\n                                                                                            context.request.addTask(\n                                                                                                context.request.addTask(\n                                                                                                    context.request.addTask(\n                                                                                                        context.request.addTask(\n                                                                                                            context.request.addTask(\n                                                                                                                context.request.addTask(\n                                                                                                                    context.request.addTask(\n                                                                                                                        context.request.addTask(\n                                                                                                                            context.request.addTask(\n                                                                                                                                context.request.addTask(\n                                                                                                                                    context.request.addTask(\n                                                                                                                                        context.request.addTask(\n                                                                                                                                            context.request.addTask(\n                                                                                                                                                context.request.addTask(\n                                                                                                                                                    context.request.addTask(\n                                                                                                                                                        context.request.addTask(\n                                                                                                                                ", "CodeBleu_score": 20.17430109662947}, {"code": "void AcceptTool::pressed(CaptureContext& context){\n\t    context.request.addTask(Request::CloseGUI);\n    context.request.addTask(Request::Emit);\n    context.request.tasks.back().set(\"accept\");\n    context.request.tasks.back().set(\"capture\", context.request.capture);\n    context.request.addTask(Request::CloseGUI);\n}", "CodeBleu_score": 37.13572546308951}]}
{"instance_id": "954477282486", "generation_result": [{"code": "int DesktopFileParser::processDirectory(const QDir& dir){\n\t    QStringList entries;\n    int initialLength = m_appList.length();\n\n    /* Get a list of \"*.desktop\" files in the directory, excluding dot entries */\n    entries = dir.entryList(QStringList() << \"*.desktop\", QDir::Files, QDir::Name);\n\n    /* Iterate through each desktop file, parsing it into a DesktopAppData object */\n    for (int i = 0; i < entries.length(); i++) {\n        DesktopAppData appData;\n        if (parseDesktopFile(dir.absoluteFilePath(entries[i]), appData)) {\n            /* If parsing is successful, append the application data to the list */\n            m_appList.append(appData);\n        }\n    }\n\n    /* Return the number of new entries added to the application list */\n    return m_appList.length() - initialLength;\n}", "CodeBleu_score": 57.64566553703882}, {"code": "int DesktopFileParser::processDirectory(const QDir& dir){\n\t    // Get the list of files in the directory\n    QStringList fileList = dir.entryList(QStringList(\"*.desktop\"), QDir::Files, QDir::Name);\n    // Get the initial length of the list\n    int initialLength = m_appList.length();\n    // Iterate through each file\n    foreach (QString fileName, fileList) {\n        // Get the absolute path to the file\n        QString filePath = dir.absoluteFilePath(fileName);\n        // Parse the file\n        DesktopAppData appData = parseDesktopFile(filePath);\n        // If parsing was successful, add the data to the list\n        if (appData.isValid()) {\n            m_appList.append(appData);\n        }\n    }\n    // Return the number of new entries\n    return m_appList.length() - initialLength;\n}", "CodeBleu_score": 54.94502225089211}, {"code": "int DesktopFileParser::processDirectory(const QDir& dir){\n\t    /*\n     * The QDir::entryList() function returns a list of files in the directory.\nThe QDir::NoDotAndDotDot flag excludes dot entries.\n     */\n    QStringList fileList = dir.entryList(QStringList(\"*.desktop\"), QDir::NoDotAndDotDot);\n    int initialLength = m_appList.length();\n\n    /*\n     * The foreach() function iterates through each file in the list.\n     */\n    foreach(QString fileName, fileList) {\n        /*\n         * The QDir::absoluteFilePath() function returns the absolute path of the file.\n         */\n        QString filePath = dir.absoluteFilePath(fileName);\n\n        /*\n         * The parseDesktopFile() function parses a desktop file into a DesktopAppData object.\n         */\n        DesktopAppData appData = parseDesktopFile(filePath);\n\n        /*\n         * If the parsing was successful, the application data is appended to the list.\n         */\n        if(appData.isValid()) {\n            m_appList.append(appData);\n        }\n    }\n\n    /*\n     * The function returns the number of new entries added to the application list.\n     */\n    return m_appList.length() - initialLength;\n}", "CodeBleu_score": 55.04234968149463}]}
{"instance_id": "e17fc5c9d6d0", "generation_result": [{"code": "QMap<QString, QVector<DesktopAppData>> DesktopFileParser::getAppsByCategory(\n  const QStringList& categories){\n\t  QMap<QString, QVector<DesktopAppData>> res;\n  for (const auto& category : categories) {\n    res.insert(category, QVector<DesktopAppData>());\n  }\n\n  for (const auto& app : m_apps) {\n    for (const auto& category : app.categories) {\n      if (categories.contains(category)) {\n        res[category].append(app);\n      }\n    }\n  }\n\n  return res;\n}", "CodeBleu_score": 76.45366313235662}, {"code": "QMap<QString, QVector<DesktopAppData>> DesktopFileParser::getAppsByCategory(\n  const QStringList& categories){\n\t  QMap<QString, QVector<DesktopAppData>> res;\n  for (const auto& category : categories) {\n    res[category] = QVector<DesktopAppData>();\n  }\n\n  for (const auto& app : m_apps) {\n    for (const auto& category : categories) {\n      if (app.categories.contains(category)) {\n        res[category].append(app);\n        break;\n      }\n    }\n  }\n\n  return res;\n}", "CodeBleu_score": 79.16345026573897}, {"code": "QMap<QString, QVector<DesktopAppData>> DesktopFileParser::getAppsByCategory(\n  const QStringList& categories){\n\t  QMap<QString, QVector<DesktopAppData>> res;\n\n  for (auto category : categories) {\n    res[category] = QVector<DesktopAppData>();\n  }\n\n  for (auto app : m_apps) {\n    for (auto category : categories) {\n      if (app.categories.contains(category)) {\n        res[category].append(app);\n      }\n    }\n  }\n\n  return res;\n}", "CodeBleu_score": 81.37169821133367}]}
{"instance_id": "1e9cb2fcafe5", "generation_result": [{"code": "bool saveToFilesystem(const QPixmap& capture,\n                      const QString& path,\n                      const QString& messagePrefix){\n\t  QFile file(FileNameHandler().properScreenshotPath(path));\n  QString completePath = file.fileName();\n  QString saveMessage;\n  bool success = false;\n\n  // Determine the file extension.\n  QString fileExtension = QFileInfo(completePath).suffix().toLower();\n  if (fileExtension.isEmpty()) {\n    fileExtension = ConfigHandler().saveAsFileExtension();\n    completePath += \".\" + fileExtension;\n  }\n\n  // Open the file for writing.\n  if (file.open(QIODevice::WriteOnly)) {\n    // Determine the save format and quality.\n    QImageWriter imageWriter(&file);\n    if (fileExtension == \"jpg\" || fileExtension == \"jpeg\") {\n      imageWriter.setCompression(QImageWriter::Compression::Jpeg);\n      imageWriter.setQuality(ConfigHandler().jpegQuality());\n    }\n\n    // Save the capture to the file.\n    success = imageWriter.write(capture.toImage());\n\n    // Construct the save message.\n    saveMessage = messagePrefix + \"saving to \" + completePath;\n    if (success) {\n      saveMessage += \" was successful\";\n    } else {\n      saveMessage += \" failed with error \" + file.errorString();\n    }\n\n    // Log the save message.\n    if (success) {\n      AbstractLogger::info().attachNotificationPath(completePath);\n      AbstractLogger::info(saveMessage);\n    } else {\n      AbstractLogger::error().attachNotificationPath(completePath);\n      AbstractLogger::error(saveMessage);\n    }\n\n    // Close the file.\n    file.close();\n  }\n\n  return success;\n}", "CodeBleu_score": 58.21788970813525}, {"code": "bool saveToFilesystem(const QPixmap& capture,\n                      const QString& path,\n                      const QString& messagePrefix){\n\t    QString completePath = FileNameHandler().properScreenshotPath(path);\n    QString fileExtension = QFileInfo(completePath).suffix().toLower();\n    QString saveMessage = messagePrefix + completePath;\n    bool success = false;\n\n    QFile file(completePath);\n    if (file.open(QIODevice::WriteOnly)) {\n        if (fileExtension == \"jpg\" || fileExtension == \"jpeg\") {\n            success = capture.save(&file, \"JPG\", ConfigHandler().jpegQuality());\n        } else {\n            success = capture.save(&file, fileExtension.toUtf8().data());\n        }\n        file.close();\n    }\n\n    if (success) {\n        AbstractLogger::info().attachNotificationPath(completePath);\n        saveMessage += \" (success)\";\n        AbstractLogger::info(saveMessage);\n    } else {\n        AbstractLogger::error().attachNotificationPath(completePath);\n        saveMessage += \" (error)\";\n        AbstractLogger::error(saveMessage, file.errorString());\n    }\n\n    return success;\n}", "CodeBleu_score": 51.55367403014939}, {"code": "bool saveToFilesystem(const QPixmap& capture,\n                      const QString& path,\n                      const QString& messagePrefix){\n\t    QFile file(FileNameHandler().properScreenshotPath(path));\n    QString completePath = file.fileName();\n    QString saveMessage;\n    QString fileExtension = QFileInfo(completePath).suffix().toLower();\n    if (fileExtension == \"jpg\" || fileExtension == \"jpeg\") {\n        if (!file.open(QIODevice::WriteOnly)) {\n            saveMessage = \"Error saving file: \" + file.errorString();\n            AbstractLogger::error(saveMessage, messagePrefix);\n            AbstractLogger::error().attachNotificationPath(completePath);\n            return false;\n        }\n        if (!capture.save(&file, \"JPG\", ConfigHandler().jpegQuality)) {\n            saveMessage = \"Error saving file: \" + file.errorString();\n            AbstractLogger::error(saveMessage, messagePrefix);\n            AbstractLogger::error().attachNotificationPath(completePath);\n            return false;\n        }\n    } else if (fileExtension == \"png\") {\n        if (!file.open(QIODevice::WriteOnly)) {\n            saveMessage = \"Error saving file: \" + file.errorString();\n            AbstractLogger::error(saveMessage, messagePrefix);\n            AbstractLogger::error().attachNotificationPath(completePath);\n            return false;\n        }\n        if (!capture.save(&file, \"PNG\")) {\n            saveMessage = \"Error saving file: \" + file.errorString();\n            AbstractLogger::error(saveMessage, messagePrefix);\n            AbstractLogger::error().attachNotificationPath(completePath);\n            return false;\n        }\n    } else {\n        saveMessage = \"Error saving file: Unsupported file extension \"\n                      + fileExtension;\n        AbstractLogger::error(saveMessage, messagePrefix);\n        AbstractLogger::error().attachNotificationPath(completePath);\n        return false;\n    }\n    saveMessage = \"Saved file to \" + completePath;\n    AbstractLogger::info(saveMessage, messagePrefix);\n    AbstractLogger::info().attachNotificationPath(completePath);\n    return true;\n}", "CodeBleu_score": 50.00278877299568}]}
{"instance_id": "ba67f6b4e974", "generation_result": [{"code": "void ModManager::activate_modpacks(const std::vector<std::string> &load_order) {\n\t    this->active.clear();\n    for (const auto &modpack_id : load_order)  {\n        if (this->available.find(modpack_id) != this->available.end())  {\n            this->active.emplace(modpack_id, this->available.at(modpack_id));\n            log::log(\"Activated modpack \" + modpack_id, log::log_level::INFO);\n        }\n        else  {\n            log::log(\"Could not activate modpack \" + modpack_id + \" because it is not available\", log::log_level::WARNING);\n        }\n    }\n}", "CodeBleu_score": 56.60166713048393}, {"code": "void ModManager::activate_modpacks(const std::vector<std::string> &load_order) {\n\t    this->active.clear();\n    for (const std::string &modpack_id : load_order)  {\n        if (this->available.count(modpack_id))  {\n            this->active.emplace(modpack_id, this->available.at(modpack_id));\n            log::log(log::log_level::INFO, \"Activated modpack \\\"\" + modpack_id + \"\\\"\");\n        }\n        else  {\n            log::log(log::log_level::WARNING, \"Modpack \\\"\" + modpack_id + \"\\\" not found\");\n        }\n    }\n}", "CodeBleu_score": 51.995954114854}, {"code": "void ModManager::activate_modpacks(const std::vector<std::string> &load_order) {\n\t    this->active.clear();\n    for (const std::string &id : load_order) {\n        if (this->available.find(id) != this->available.end()) {\n            this->active.emplace(id, this->available.at(id));\n            log::log(log::log_level::info, \"Activated modpack \\\"\" + id + \"\\\".\");\n        } else {\n            log::log(log::log_level::warning, \"Modpack \\\"\" + id + \"\\\" not found.\");\n        }\n    }\n}", "CodeBleu_score": 48.15208758278358}]}
{"instance_id": "da92dbc3907b", "generation_result": [{"code": "void ModManager::set_load_order(const std::vector<std::string> &load_order) {\n\t    // Create a set of requested modpacks from the load_order vector\n    std::set<std::string> requested;\n    for (const std::string &modpack_name : load_order) {\n        if (modpack_name.empty()) {\n            throw std::runtime_error(\"Modpack name cannot be empty\");\n        }\n        requested.insert(modpack_name);\n    }\n\n    // Check that each modpack in the load order is available\n    for (const std::string &modpack_name : requested) {\n        if (!this->available.contains(modpack_name)) {\n            throw std::runtime_error(\"Modpack '\" + modpack_name + \"' is not available\");\n        }\n    }\n\n    // Verify that all dependencies are satisfied and no conflicts exist\n    for (const std::string &modpack_name : requested) {\n        // Check if the modpack has unsatisfied dependencies\n        const Modpack &modpack = this->available.at(modpack_name);\n        for (const std::string &dependency_name : modpack.get_dependencies()) {\n            if (!requested.contains(dependency_name)) {\n                throw std::runtime_error(\"Modpack '\" + modpack_name + \"' has unsatisfied dependency '\" + dependency_name + \"'\");\n            }\n        }\n\n        // Check if the modpack conflicts with another modpack\n        for (const std::string &other_name : requested) {\n            if (modpack_name != other_name) {\n                const Modpack &other = this->available.at(other_name);\n                for (const std::string &conflict_name : modpack.get_conflicts()) {\n                    if (other.get_name() == conflict_name) {\n                        throw std::runtime_error(\"Modpack '\" + modpack_name + \"' conflicts with '\" + other_name + \"'\");\n                    }\n                }\n            }\n        }\n    }\n\n    // Update the load order with the provided list\n    this->load_order = load_order;\n}", "CodeBleu_score": 51.44662834958113}, {"code": "void ModManager::set_load_order(const std::vector<std::string> &load_order) {\n\t    std::set<std::string> requested;\n    for (const std::string &modpack : load_order) {\n        if (!this->available.contains(modpack)) {\n            throw std::runtime_error(\"Modpack \" + modpack + \" is not available.\");\n        }\n        requested.insert(modpack);\n    }\n    for (const std::string &modpack : load_order) {\n        for (const std::string &dependency : this->available.at(modpack).get_dependencies()) {\n            if (!requested.contains(dependency)) {\n                throw std::runtime_error(\"Modpack \" + modpack + \" depends on \" + dependency + \", which is not in the load order.\");\n            }\n        }\n        for (const std::string &conflict : this->available.at(modpack).get_conflicts()) {\n            if (requested.contains(conflict)) {\n                throw std::runtime_error(\"Modpack \" + modpack + \" conflicts with \" + conflict + \", which is in the load order.\");\n            }\n        }\n    }\n    this->load_order = load_order;\n}", "CodeBleu_score": 53.38005826103819}, {"code": "void ModManager::set_load_order(const std::vector<std::string> &load_order) {\n\t    std::set<std::string> requested;\n    std::vector<std::string> load_order_copy = load_order;\n    for (std::vector<std::string>::iterator it = load_order_copy.begin(); it != load_order_copy.end(); ++it) {\n        if (requested.find(*it) != requested.end()) {\n            throw std::runtime_error(\"Modpack \" + *it + \" is listed more than once in the load order.\");\n        }\n        if (!available.contains(*it)) {\n            throw std::runtime_error(\"Modpack \" + *it + \" is not available.\");\n        }\n        requested.insert(*it);\n    }\n    for (std::set<std::string>::iterator it = requested.begin(); it != requested.end(); ++it) {\n        if (!available.at(*it).dependencies.is_subset_of(requested)) {\n            throw std::runtime_error(\"Modpack \" + *it + \" has unsatisfied dependencies.\");\n        }\n        for (std::set<std::string>::iterator it2 = requested.begin(); it2 != requested.end(); ++it2) {\n            if (it == it2) {\n                continue;\n            }\n            if (available.at(*it).conflicts.contains(*it2)) {\n                throw std::runtime_error(\"Modpack \" + *it + \" conflicts with \" + *it2 + \".\");\n            }\n        }\n    }\n    this->load_order = load_order_copy;\n}", "CodeBleu_score": 42.47465681098799}]}
{"instance_id": "103e298ff430", "generation_result": [{"code": "void AudioManager::load_resources(const std::vector<resource_def> &sound_files){\n\t    if (this->resources.size() > 0) {\n        for (const auto &sound : sound_files) {\n            auto key = std::make_tuple(sound.category, sound.id);\n            if (this->resources.find(key) == std::end(this->resources)) {\n                auto resource = Resource::create_resource(sound.category, sound.id, sound.file_path);\n                this->resources.insert(std::make_pair(key, resource));\n            }\n        }\n    }\n    else {\n        for (const auto &sound : sound_files) {\n            auto key = std::make_tuple(sound.category, sound.id);\n            auto resource = Resource::create_resource(sound.category, sound.id, sound.file_path);\n            this->resources.insert(std::make_pair(key, resource));\n        }\n    }\n}", "CodeBleu_score": 56.66442757234886}, {"code": "void AudioManager::load_resources(const std::vector<resource_def> &sound_files){\n\t\tif (!this->resources.empty()) {\n\t\tfor (auto &sound : sound_files) {\n\t\t\tstd::string key = sound.category + std::to_string(sound.id);\n\t\t\tif (this->resources.find(key) == this->resources.end()) {\n\t\t\t\tthis->resources.insert(std::make_tuple(key, Resource::create_resource(sound.file_path, sound.type)));\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tfor (auto &sound : sound_files) {\n\t\t\tstd::string key = sound.category + std::to_string(sound.id);\n\t\t\tthis->resources.insert(std::make_tuple(key, Resource::create_resource(sound.file_path, sound.type)));\n\t\t}\n\t}\n}", "CodeBleu_score": 50.745378906837246}, {"code": "void AudioManager::load_resources(const std::vector<resource_def> &sound_files){\n\t    if (this->resources.size() > 0) {\n        for (auto &sound_file : sound_files) {\n            std::string key = sound_file.category + std::to_string(sound_file.id);\n            if (this->resources.find(key) == this->resources.end()) {\n                this->resources.insert(std::make_tuple(key, Resource::create_resource(sound_file.file_name, sound_file.category, sound_file.id)));\n            }\n        }\n    } else {\n        for (auto &sound_file : sound_files) {\n            this->resources.insert(std::make_tuple(sound_file.category + std::to_string(sound_file.id), Resource::create_resource(sound_file.file_name, sound_file.category, sound_file.id)));\n        }\n    }\n}", "CodeBleu_score": 52.70822330031664}]}
{"instance_id": "700caeffaaac", "generation_result": [{"code": "Sound AudioManager::get_sound(category_t category, int id){\n\t    if (!available()) {\n        throw std::runtime_error(\"AudioManager not available\");\n    }\n\n    auto resource = resources.find(std::make_tuple(category, id));\n    if (resource == resources.end()) {\n        throw std::runtime_error(\"Sound resource not found\");\n    }\n\n    return Sound(this, std::make_shared<SoundImpl>(resource->second));\n}", "CodeBleu_score": 42.94135160092748}, {"code": "Sound AudioManager::get_sound(category_t category, int id){\n\t    if (!available) {\n        throw std::runtime_error(\"AudioManager not available\");\n    }\n    auto resource = resources.find(std::make_tuple(category, id));\n    if (resource == resources.end()) {\n        throw std::runtime_error(\"Sound resource does not exist\");\n    }\n    return Sound(this, std::make_shared<SoundImpl>(resource->second));\n}", "CodeBleu_score": 43.86543182457282}, {"code": "Sound AudioManager::get_sound(category_t category, int id){\n\t    if (!available) {\n        throw std::runtime_error(MSG_AUDIO_MANAGER_NOT_AVAILABLE);\n    }\n    auto resource = resources.find(std::make_tuple(category, id));\n    if (resource == std::end(resources)) {\n        throw std::runtime_error(MSG_SOUND_NOT_FOUND);\n    }\n    return Sound(this, std::make_shared<SoundImpl>(resource->second));\n}", "CodeBleu_score": 42.536440334438275}]}
{"instance_id": "2a0c1f0acd9f", "generation_result": [{"code": "void AudioManager::add_sound(const std::shared_ptr<SoundImpl> &sound){\n\t    auto category = sound->get_category();\n    auto it = playing_sounds.find(category);\n    if (it == playing_sounds.end()) {\n        it = playing_sounds.insert(std::make_pair(category, std::list<std::shared_ptr<SoundImpl>>())).first;\n    }\n    it->second.push_back(sound);\n}", "CodeBleu_score": 65.92105804191772}, {"code": "void AudioManager::add_sound(const std::shared_ptr<SoundImpl> &sound){\n\t\tauto category = sound->get_category();\n\tauto playing_list = playing_sounds.find(category);\n\tplaying_list->second.push_back(sound);\n}", "CodeBleu_score": 76.13661257950316}, {"code": "void AudioManager::add_sound(const std::shared_ptr<SoundImpl> &sound){\n\t    // TODO: check if already playing\n    playing_list.push_back(sound);\n    playing_sounds[sound->get_category()].push_back(sound);\n}", "CodeBleu_score": 37.790897811093934}]}
{"instance_id": "2c5f1f9b99b3", "generation_result": [{"code": "void Clock::update_time(){\n\t\tstd::unique_lock<std::mutex> lock(m_mutex);\n\tsimclock_t::time_point now = simclock_t::now();\n\tsimclock_t::duration elapsed = now - m_last_check;\n\tif (elapsed <= std::chrono::milliseconds(0)) {\n\t\tstd::this_thread::sleep_for(std::chrono::milliseconds(1));\n\t\treturn;\n\t}\n\tsimclock_t::duration tick_time = m_max_tick_time * m_speed;\n\tif (elapsed > tick_time) {\n\t\tm_sim_time += tick_time;\n\t\tm_real_time += tick_time;\n\t} else {\n\t\tm_sim_time += elapsed;\n\t\tm_real_time += elapsed;\n\t}\n\tm_last_check = now;\n}", "CodeBleu_score": 45.55656262167418}, {"code": "void Clock::update_time(){\n\t    std::unique_lock<std::mutex> lock(m_mutex);\n    simclock_t::time_point now = simclock_t::now();\n    if (m_state == RUNNING) {\n        std::chrono::milliseconds elapsed = std::chrono::duration_cast<std::chrono::milliseconds>(now - m_last_check);\n        if (elapsed.count() == 0) {\n            std::this_thread::sleep_for(std::chrono::milliseconds(1));\n        } else {\n            simclock_t::duration time_to_update = std::chrono::milliseconds(m_max_tick_time * m_speed);\n            if (elapsed > time_to_update) {\n                m_sim_time += time_to_update;\n                m_real_time += time_to_update;\n            } else {\n                m_sim_time += elapsed;\n                m_real_time += elapsed;\n            }\n            m_last_check = now;\n        }\n    }\n}", "CodeBleu_score": 54.6935764308632}, {"code": "void Clock::update_time(){\n\t    std::unique_lock<std::mutex> lock(this->clock_mutex);\n    if (this->clock_state == ClockState::RUNNING) {\n        std::chrono::milliseconds elapsed_time = std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::steady_clock::now() - this->last_check);\n        if (elapsed_time.count() == 0) {\n            std::this_thread::sleep_for(std::chrono::milliseconds(1));\n        }\n        else if (elapsed_time > this->max_tick_time) {\n            this->sim_time += this->max_tick_time * this->speed;\n            this->real_time += this->max_tick_time;\n        }\n        else {\n            this->sim_time += elapsed_time * this->speed;\n            this->real_time += elapsed_time;\n        }\n        this->last_check = std::chrono::steady_clock::now();\n    }\n}", "CodeBleu_score": 58.81567965438181}]}
{"instance_id": "c660f2541c89", "generation_result": [{"code": "void Camera::look_at_scene(Eigen::Vector3f scene_pos){\n\t    float y_delta = scene_pos(1) - this->pos(1);\n    float xz_distance = sqrt(pow(this->pos(0) - scene_pos(0), 2) + pow(this->pos(2) - scene_pos(2), 2));\n    Eigen::Vector3f new_pos;\n    new_pos << this->pos(0) - xz_distance, this->pos(1), this->pos(2) - xz_distance;\n    this->move_to(new_pos);\n}", "CodeBleu_score": 30.865142247635003}, {"code": "void Camera::look_at_scene(Eigen::Vector3f scene_pos){\n\t\n    // Compute the vertical distance between the current and target scene positions\n    float y_delta = scene_pos(1) - this->position(1);\n\n    // Compute the horizontal distance based on a trigonometric relationship\n    float xz_distance = sqrt(pow(this->position(0) - scene_pos(0), 2) + pow(this->position(2) - scene_pos(2), 2));\n\n    // Determine the new camera position by adjusting the x and z coordinates while keeping the height unchanged\n    Eigen::Vector3f new_position(this->position(0) + xz_distance, this->position(1), this->position(2) + xz_distance);\n\n    // Move the camera to the new position\n    this->move_to(new_position);\n}", "CodeBleu_score": 29.48923723939506}, {"code": "void Camera::look_at_scene(Eigen::Vector3f scene_pos){\n\t    float y_delta = scene_pos(1) - this->pos(1);\n    float xz_distance = sqrt(pow(scene_pos(0) - this->pos(0), 2) + pow(scene_pos(2) - this->pos(2), 2));\n    float x_delta = xz_distance * (scene_pos(0) - this->pos(0)) / xz_distance;\n    float z_delta = xz_distance * (scene_pos(2) - this->pos(2)) / xz_distance;\n    this->move_to(Eigen::Vector3f(this->pos(0) + x_delta, this->pos(1), this->pos(2) + z_delta));\n}", "CodeBleu_score": 35.7032778254459}]}
{"instance_id": "3b2d44963495", "generation_result": [{"code": "ApplicationActionController::DragTarget ApplicationActionController::dragTarget(const QUrl& url) const{\n\t\tif (projectFilesController()->isUrlSupported(url)) {\n\t\treturn DragTarget::ProjectFile;\n\t} else if (url.isLocalFile()) {\n\t\tconst QFileInfo fileInfo(url.toLocalFile());\n\t\tif (muse::audio::synth::isSoundFont(fileInfo)) {\n\t\t\treturn DragTarget::SoundFont;\n\t\t} else if (extensionInstaller()->isFileSupported(fileInfo)) {\n\t\t\treturn DragTarget::Extension;\n\t\t}\n\t}\n\n\treturn DragTarget::Unknown;\n}", "CodeBleu_score": 80.42899181898922}, {"code": "ApplicationActionController::DragTarget ApplicationActionController::dragTarget(const QUrl& url) const{\n\t\tif (projectFilesController()->isUrlSupported(url)) {\n\t\treturn DragTarget::ProjectFile;\n\t} else if (url.isLocalFile()) {\n\t\tQFileInfo fileInfo(url.toLocalFile());\n\t\tif (muse::audio::synth::isSoundFont(fileInfo.absoluteFilePath())) {\n\t\t\treturn DragTarget::SoundFont;\n\t\t} else if (extensionInstaller()->isFileSupported(fileInfo)) {\n\t\t\treturn DragTarget::Extension;\n\t\t}\n\t}\n\treturn DragTarget::Unknown;\n}", "CodeBleu_score": 79.43521024870378}, {"code": "ApplicationActionController::DragTarget ApplicationActionController::dragTarget(const QUrl& url) const{\n\t\tif (projectFilesController()->isUrlSupported(url)) {\n\t\treturn DragTarget::ProjectFile;\n\t}\n\n\tif (url.isLocalFile()) {\n\t\tif (muse::audio::synth::isSoundFont(url.toLocalFile())) {\n\t\t\treturn DragTarget::SoundFont;\n\t\t}\n\t\tif (extensionInstaller()->isFileSupported(url.toLocalFile())) {\n\t\t\treturn DragTarget::Extension;\n\t\t}\n\t}\n\n\treturn DragTarget::Unknown;\n}", "CodeBleu_score": 62.02548031761073}]}
{"instance_id": "81a3cd2e265e", "generation_result": [{"code": "void SessionsManager::removeProjectFromSession(const muse::io::path_t& projectPath){\n\t    std::vector<muse::io::path_t> paths = configuration()->sessionProjectsPaths();\n    if (paths.empty()) {\n        return;\n    }\n\n    for (auto it = paths.begin(); it != paths.end(); ++it) {\n        if (*it == projectPath) {\n            paths.erase(it);\n            break;\n        }\n    }\n\n    configuration()->setSessionProjectsPaths(paths);\n}", "CodeBleu_score": 60.36943637851091}, {"code": "void SessionsManager::removeProjectFromSession(const muse::io::path_t& projectPath){\n\t    auto projects = configuration()->sessionProjectsPaths();\n    if (!projects.empty()) {\n        auto it = std::find(projects.begin(), projects.end(), projectPath);\n        if (it != projects.end()) {\n            projects.erase(it);\n            configuration()->setSessionProjectsPaths(projects);\n        }\n    }\n}", "CodeBleu_score": 68.66242668093075}, {"code": "void SessionsManager::removeProjectFromSession(const muse::io::path_t& projectPath){\n\t    std::vector<muse::io::path_t> projects = configuration()->sessionProjectsPaths();\n    if (!projects.empty()) {\n        projects.erase(std::remove(projects.begin(), projects.end(), projectPath), projects.end());\n        configuration()->setSessionProjectsPaths(projects);\n    }\n}", "CodeBleu_score": 80.6890198050107}]}
{"instance_id": "98a514c0b62f", "generation_result": [{"code": "QVariantList AppearancePreferencesModel::highContrastThemes() const{\n\t    QVariantList result;\n\n    for (const auto& theme : allThemes()) {\n        if (theme.code == \"highcontrast-white\" || theme.code == \"highcontrast-black\") {\n            result << theme.toMap();\n        }\n    }\n\n    return result;\n}", "CodeBleu_score": 63.57570003268205}, {"code": "QVariantList AppearancePreferencesModel::highContrastThemes() const{\n\t    QVariantList result;\n    for (auto theme : allThemes()) {\n        if (theme.toMap().value(\"code\").toString() == \"high-contrast-white\" ||\n            theme.toMap().value(\"code\").toString() == \"high-contrast-black\") {\n            result << theme;\n        }\n    }\n    return result;\n}", "CodeBleu_score": 60.889657659407106}, {"code": "QVariantList AppearancePreferencesModel::highContrastThemes() const{\n\t    QVariantList result;\n    QVariantList allThemes = ThemeConverter::allThemes();\n    for (const QVariant& theme : allThemes) {\n        QVariantMap themeMap = theme.toMap();\n        QString code = themeMap[\"code\"].toString();\n        if (code == \"high-contrast-white\" || code == \"high-contrast-black\") {\n            result.append(themeMap);\n        }\n    }\n    return result;\n}", "CodeBleu_score": 51.16054116114584}]}
{"instance_id": "ceff09bc116b", "generation_result": [{"code": "QVariantList PreferencesModel::availablePages() const{\n\t    return childPages(rootItem);\n}", "CodeBleu_score": 4.341228361041089}, {"code": "QVariantList PreferencesModel::availablePages() const{\n\t    QVariantList result;\n    auto childPages = [&](PreferencesItem *item) {\n        for (int row = 0; row < item->childCount(); ++row) {\n            PreferencesItem *child = item->childAtRow(row);\n            QVariantMap map;\n            map.insert(\"id\", child->id());\n            map.insert(\"path\", child->path());\n            result.append(map);\n            childPages(child);\n        }\n    };\n    childPages(m_rootItem);\n    return result;\n}", "CodeBleu_score": 43.928942973923206}, {"code": "QVariantList PreferencesModel::availablePages() const{\n\t    QVariantList result;\n\n    const auto childPages = [&result](PreferencesItem* item) {\n        for (int i = 0; i < item->childCount(); ++i) {\n            auto child = item->childAtRow(i);\n            QVariantMap page;\n            page.insert(\"id\", child->id());\n            page.insert(\"path\", child->path());\n            result.append(page);\n            childPages(child);\n        }\n    };\n\n    childPages(m_rootItem);\n    return result;\n}", "CodeBleu_score": 50.9996493020603}]}
{"instance_id": "88e5ca72d3e0", "generation_result": [{"code": "MenuItemList AppMenuModel::makeRecentScoresItems(){\n\t    MenuItemList recentScoresItems;\n    const QStringList recentFiles = recentFilesController()->recentFilesList();\n    for (const QString &file : recentFiles) {\n        MenuItem *item = new MenuItem;\n        item->setAction(\"file-open\");\n        item->setArgs(file.path.toQUrl(), file.displayName);\n        item->setId(makeId(\"file-open\", file.path.toQUrl()));\n        item->setSelectable(true);\n        if (projectConfiguration()->isCloudProject(file.path))\n            item->setIcon(QIcon(\":/images/cloud.png\"));\n        recentScoresItems.append(item);\n    }\n    return recentScoresItems;\n}", "CodeBleu_score": 35.80055418227109}, {"code": "MenuItemList AppMenuModel::makeRecentScoresItems(){\n\t    MenuItemList recentScoresItems;\n\n    QList<RecentFile> recentFiles = projectConfiguration()->recentFilesList();\n    for (int i = 0; i < recentFiles.size(); ++i) {\n        const RecentFile &file = recentFiles.at(i);\n        MenuItem *item = new MenuItem;\n        item->setAction(MenuItem::Action::FileOpen);\n        item->setArgs(ActionData::make_arg2<QUrl, QString>(file.path.toQUrl(), file.displayName));\n        item->setId(makeId(file.path));\n        item->setSelectable(true);\n        item->setEnabled(true);\n        item->setArgs(ActionData::make_arg2<QUrl, QString>(file.path.toQUrl(), file.displayName));\n        item->setState(MenuItem::State::Off);\n        if (projectConfiguration()->isCloudProject(file.path))\n            item->setIcon(QIcon(QStringLiteral(\":/images/cloud_icon.png\")));\n        recentScoresItems.append(item);\n    }\n    return recentScoresItems;\n}", "CodeBleu_score": 55.16467223898807}, {"code": "MenuItemList AppMenuModel::makeRecentScoresItems(){\n\t    MenuItemList list;\n    const QList<RecentFile> recentFiles = recentFilesController()->recentFilesList();\n    for (int i = 0; i < recentFiles.size(); ++i) {\n        const RecentFile &file = recentFiles.at(i);\n        MenuItem *item = new MenuItem;\n        item->setAction(MenuItem::Action::OpenFile);\n        item->setId(makeId(file.path));\n        item->setArgs(ActionData::make_arg2<QUrl, QString>(file.path.toQUrl(), file.displayName));\n        if (projectConfiguration()->isCloudProject(file.path)) {\n            item->setIcon(QIcon(\":/images/cloud.png\"));\n        }\n        item->setSelectable(true);\n        list.append(item);\n    }\n    return list;\n}", "CodeBleu_score": 46.769283815655726}]}
{"instance_id": "855288a783a5", "generation_result": [{"code": "void NavigableAppMenuModel::openMenu(const QString& menuId, bool byHover){\n\t    if (!isNavigationStarted() && !isMenuOpened()) {\n        if (isMenuOpened()) {\n            restoreMUNavigationSystemState();\n        } else {\n            saveMUNavigationSystemState();\n        }\n    }\n\n    if (!byHover && !isMenuOpened(menuId)) {\n        setHighlightedMenuId(menuId);\n        emit requestOpenMenu(menuId, byHover);\n    }\n}", "CodeBleu_score": 54.94909360893634}, {"code": "void NavigableAppMenuModel::openMenu(const QString& menuId, bool byHover){\n\t    if (!isNavigationStarted() && !isMenuOpened()) {\n        if (byHover) {\n            restoreMUNavigationSystemState();\n        } else {\n            saveMUNavigationSystemState();\n        }\n    }\n\n    if (byHover) {\n        setHighlightedMenuId(menuId);\n    }\n\n    emit requestOpenMenu(menuId, byHover);\n}", "CodeBleu_score": 45.61603997568733}, {"code": "void NavigableAppMenuModel::openMenu(const QString& menuId, bool byHover){\n\t    if (!isNavigationStarted() && !isMenuOpened()) {\n        if (byHover) {\n            restoreMUNavigationSystemState();\n        } else {\n            saveMUNavigationSystemState();\n        }\n    }\n\n    if (!isMenuOpened(menuId)) {\n        setHighlightedMenuId(menuId);\n        emit menuRequested(menuId, byHover);\n    }\n}", "CodeBleu_score": 50.9187550467761}]}
{"instance_id": "d31bdc9d40b6", "generation_result": [{"code": "QVariant NotationStatusBarModel::currentViewMode(){\n\t    auto viewMode = notation()->viewMode();\n    if (viewMode == Notation::NotationViewMode::NOT_AVAILABLE) {\n        viewMode = Notation::NotationViewMode::PAGE;\n    }\n\n    auto availableViewModeList = makeAvailableViewModeList();\n    for (const auto& modeItem : availableViewModeList) {\n        if (modeItem->id() == viewMode) {\n            if (modeItem->id() == Notation::NotationViewMode::LINE ||\n                modeItem->id() == Notation::NotationViewMode::SYSTEM) {\n                modeItem->setTitle(tr(\"Continuous view\"));\n            }\n            return QVariant::fromValue(modeItem);\n        }\n    }\n    return QVariant();\n}", "CodeBleu_score": 61.20189153550017}, {"code": "QVariant NotationStatusBarModel::currentViewMode(){\n\t    MuseScore::ViewMode viewMode = notation()->viewMode;\n    if (!notation()->isAvailable()) {\n        viewMode = MuseScore::ViewMode::PAGE;\n    }\n\n    QList<QVariant> availableViewModeList = makeAvailableViewModeList();\n    for (const QVariant &modeItem : availableViewModeList) {\n        if (modeItem.toMap()[\"id\"].toInt() == static_cast<int>(viewMode)) {\n            if (viewMode == MuseScore::ViewMode::LINE || viewMode == MuseScore::ViewMode::SYSTEM) {\n                modeItem.toMap()[\"title\"] = \"Continuous view\";\n            }\n            return modeItem;\n        }\n    }\n    return QVariant();\n}", "CodeBleu_score": 52.91182363980778}, {"code": "QVariant NotationStatusBarModel::currentViewMode(){\n\t    MuseScoreViewMode viewMode = notation()->viewMode;\n    if (!notation()->isAvailable()) {\n        viewMode = MuseScoreViewMode::PAGE;\n    }\n    auto availableViewModes = makeAvailableViewModeList();\n    for (auto modeItem : availableViewModes) {\n        if (modeItem->id() == viewMode) {\n            if (modeItem->id() == MuseScoreViewMode::LINE || modeItem->id() == MuseScoreViewMode::SYSTEM) {\n                modeItem->setTitle(tr(\"Continuous view\"));\n            }\n            return QVariant::fromValue(modeItem);\n        }\n    }\n    return QVariant();\n}", "CodeBleu_score": 56.193017974407454}]}
{"instance_id": "f161c1b938c8", "generation_result": [{"code": "muse::Ret BrailleWriter::write(notation::INotationPtr notation, muse::io::IODevice& destinationDevice, const Options&){\n\t    if (notation == nullptr) {\n        throw std::invalid_argument(\"The notation is nullptr.\");\n    }\n\n    if (notation->getScore() == nullptr) {\n        throw std::invalid_argument(\"The score is nullptr.\");\n    }\n\n    if (destinationDevice.isClosed()) {\n        throw std::invalid_argument(\"The destination device is closed.\");\n    }\n\n    if (destinationDevice.isReadOnly()) {\n        throw std::invalid_argument(\"The destination device is read-only.\");\n    }\n\n    ByteArray data;\n    if (write(notation, data) == muse::Ret::Success) {\n        destinationDevice.write(data);\n    }\n\n    make_ret\n}", "CodeBleu_score": 32.65360660560396}, {"code": "muse::Ret BrailleWriter::write(notation::INotationPtr notation, muse::io::IODevice& destinationDevice, const Options&){\n\t    if (notation == nullptr) {\n        return make_ret(muse::ERR_INVALID_PARAMETER, \"The notation parameter is nullptr.\");\n    }\n\n    if (destinationDevice == nullptr) {\n        return make_ret(muse::ERR_INVALID_PARAMETER, \"The destinationDevice parameter is nullptr.\");\n    }\n\n    if (notation->getScore() == nullptr) {\n        return make_ret(muse::ERR_INVALID_PARAMETER, \"The score parameter is nullptr.\");\n    }\n\n    if (notation->getScore()->getParts().size() == 0) {\n        return make_ret(muse::ERR_INVALID_PARAMETER, \"The score does not contain any parts.\");\n    }\n\n    if (notation->getScore()->getParts().size() > 1) {\n        return make_ret(muse::ERR_INVALID_PARAMETER, \"The score contains more than one part.\");\n    }\n\n    if (notation->getScore()->getParts()[0]->getMeasures().size() == 0) {\n        return make_ret(muse::ERR_INVALID_PARAMETER, \"The score does not contain any measures.\");\n    }\n\n    if (notation->getScore()->getParts()[0]->getMeasures().size() > 1) {\n        return make_ret(muse::ERR_INVALID_PARAMETER, \"The score contains more than one measure.\");\n    }\n\n    if (notation->getScore()->getParts()[0]->getMeasures()[0]->getStaves().size() == 0) {\n        return make_ret(muse::ERR_INVALID_PARAMETER, \"The score does not contain any staves.\");\n    }\n\n    if (notation->getScore()->getParts()[0]->getMeasures()[0]->getStaves().size() > 1) {\n        return make_ret(muse::ERR_INVALID_PARAMETER, \"The score contains more than one staff.\");\n    }\n\n    if (notation->getScore()->getParts()[0]->getMeasures()[0]->getStaves()[0", "CodeBleu_score": 22.42931327831063}, {"code": "muse::Ret BrailleWriter::write(notation::INotationPtr notation, muse::io::IODevice& destinationDevice, const Options&){\n\t    if (!notation) {\n        return make_ret(muse::Error_InvalidNotation);\n    }\n\n    if (!notation->getScore()) {\n        return make_ret(muse::Error_InvalidScore);\n    }\n\n    /*\n     * 1. Create a Braille translator.\n     * 2. Create a Braille buffer.\n     * 3. Translate the score to Braille.\n     * 4. Write the Braille buffer to the destination device.\n     */\n\n    /*\n     * 1. Create a Braille translator.\n     */\n    BrailleTranslator translator;\n\n    /*\n     * 2. Create a Braille buffer.\n     */\n    BrailleBuffer buffer;\n\n    /*\n     * 3. Translate the score to Braille.\n     */\n    auto result = translator.translate(notation->getScore(), buffer);\n    if (result != make_ret()) {\n        return result;\n    }\n\n    /*\n     * 4. Write the Braille buffer to the destination device.\n     */\n    auto bytes = buffer.toByteArray();\n    if (!bytes) {\n        return make_ret(muse::Error_InvalidByteArray);\n    }\n\n    destinationDevice.write(*bytes);\n    return make_ret();\n}", "CodeBleu_score": 40.44701477790325}]}
{"instance_id": "192825616947", "generation_result": [{"code": "std::string braille_long_translate(const char* table_name, std::string txt){\n\t    std::vector<std::string> lines = split_string(txt, 256);\n    if (lines.size() == 0) {\n        return \"\";\n    }\n    std::string buffer = braille_translate(table_name, lines.front());\n    for (std::size_t i = 1; i < lines.size(); i++) {\n        buffer += \" \" + braille_translate(table_name, lines[i]);\n    }\n    return buffer;\n}", "CodeBleu_score": 80.73438510543053}, {"code": "std::string braille_long_translate(const char* table_name, std::string txt){\n\t    std::vector<std::string> lines = split_string(txt);\n    if (lines.size() == 0) return \"\";\n    std::string buffer = braille_translate(table_name, lines.front());\n    for (int i = 1; i < lines.size(); i++) {\n        buffer += \" \" + braille_translate(table_name, lines[i]);\n    }\n    return buffer;\n}", "CodeBleu_score": 70.52525806372756}, {"code": "std::string braille_long_translate(const char* table_name, std::string txt){\n\t    std::vector<std::string> lines = split_string(txt, 256);\n    if (lines.size() == 0) {\n        return \"\";\n    }\n    std::string buffer = braille_translate(table_name, lines.front());\n    for (int i = 1; i < lines.size(); i++) {\n        buffer += \" \" + braille_translate(table_name, lines[i]);\n    }\n    return buffer;\n}", "CodeBleu_score": 80.46443397022146}]}
{"instance_id": "9cfd1739fffa", "generation_result": [{"code": "std::shared_ptr<ProxyEntity> ProfileManager::LoadProxyEntity(const QString &jsonPath){\n\t    std::shared_ptr<ProxyEntity> proxyEntity = std::make_shared<ProxyEntity>();\n\n    if (proxyEntity->Load(jsonPath)) {\n        if (proxyEntity->GetType() == EntityType::PROXY_ENTITY) {\n            proxyEntity = std::make_shared<ProxyEntity>();\n            if (proxyEntity->Load(jsonPath)) {\n                if (proxyEntity->GetVersion() == ProxyEntity::VERSION) {\n                    proxyEntity->SetLoadControl(true);\n                    proxyEntity->SetJsonPath(jsonPath);\n                    proxyEntity->Load();\n                    return proxyEntity;\n                }\n            }\n        }\n    }\n\n    return nullptr;\n}", "CodeBleu_score": 31.586734357348096}, {"code": "std::shared_ptr<ProxyEntity> ProfileManager::LoadProxyEntity(const QString &jsonPath){\n\t    std::shared_ptr<ProxyEntity> temp = std::make_shared<ProxyEntity>();\n    temp->Load(jsonPath);\n    if (temp->GetType() != EntityType::ProxyEntity) {\n        qWarning(\"The JSON file does not contain a ProxyEntity.\");\n        return nullptr;\n    }\n    std::shared_ptr<ProxyEntity> ent = std::make_shared<ProxyEntity>();\n    if (ent->GetVersion() != temp->GetVersion()) {\n        qWarning(\"The version of the ProxyEntity is not supported.\");\n        return nullptr;\n    }\n    ent->SetLoadControl(true);\n    ent->SetJsonPath(jsonPath);\n    ent->Load();\n    return ent;\n}", "CodeBleu_score": 44.25069557207152}, {"code": "std::shared_ptr<ProxyEntity> ProfileManager::LoadProxyEntity(const QString &jsonPath){\n\t    std::shared_ptr<ProxyEntity> ent = std::make_shared<ProxyEntity>();\n    ent->Load(jsonPath);\n    if (ent->GetType() == ProxyEntity::Type::Unknown) {\n        qDebug() << \"Invalid JSON file: \" << jsonPath;\n        return nullptr;\n    }\n    ent = std::make_shared<ProxyEntity>(ent->GetType());\n    if (ent->GetVersion() != ProxyEntity::GetCurrentVersion()) {\n        qDebug() << \"Invalid version of entity: \" << jsonPath;\n        return nullptr;\n    }\n    ent->SetLoadControl(true);\n    ent->SetJSONPath(jsonPath);\n    ent->Load(jsonPath);\n    return ent;\n}", "CodeBleu_score": 37.133847478454705}]}
{"instance_id": "d2d7a08c10d4", "generation_result": [{"code": "bool NaiveBean::TryParseLink(const QString &link) {\n\t    QUrl url = QUrl(link);\n    if (!url.isValid()) {\n        return false;\n    }\n    QString protocol = url.scheme().replace(QRegExp(\"[0-9]\"), \"\");\n    if (protocol != \"https\" && protocol != \"quic\") {\n        return false;\n    }\n    name = url.host();\n    serverAddress = url.host();\n    port = url.port();\n    username = url.userName();\n    password = url.password();\n    return !username.isEmpty() && !password.isEmpty() && !serverAddress.isEmpty();\n}", "CodeBleu_score": 75.79646815290776}, {"code": "bool NaiveBean::TryParseLink(const QString &link) {\n\t    QUrl url = QUrl(link);\n    if (!url.isValid()) {\n        return false;\n    }\n    if (url.scheme() != \"https\" && url.scheme() != \"quic\") {\n        return false;\n    }\n    if (url.userName().isEmpty() || url.password().isEmpty() || url.host().isEmpty()) {\n        return false;\n    }\n    name = url.host();\n    serverAddress = url.host();\n    port = url.port();\n    username = url.userName();\n    password = url.password();\n    return true;\n}", "CodeBleu_score": 60.402928137684356}, {"code": "bool NaiveBean::TryParseLink(const QString &link) {\n\t    QUrl url(link);\n    if (!url.isValid()) {\n        return false;\n    }\n    QString protocol = url.scheme().replace(QRegExp(\"[a-z]\", Qt::CaseInsensitive), \"\").toLower();\n    if (protocol != \"s\" && protocol != \"q\") {\n        return false;\n    }\n    name = url.host();\n    serverAddress = url.host();\n    port = url.port();\n    username = url.userName();\n    password = url.password();\n    return !username.isEmpty() && !password.isEmpty() && !serverAddress.isEmpty();\n}", "CodeBleu_score": 59.755881204502124}]}
{"instance_id": "2f666eafb5f4", "generation_result": [{"code": "bool JsonStore::Save(){\n\t    // Call the pre-save callback\n    if (callback_before_save) {\n        callback_before_save(this);\n    }\n    // Check if saving is allowed\n    if (!allow_save) {\n        return false;\n    }\n    // Convert the current state to JSON bytes\n    std::string json_bytes = ToJsonBytes();\n    // Compare the JSON bytes with the last saved content\n    if (json_bytes == last_saved_content) {\n        return false;\n    }\n    // Update the last saved content\n    last_saved_content = json_bytes;\n    // Open the file\n    file.open(file_name, std::ios::out);\n    // Write the JSON bytes to the file\n    file.write(json_bytes.c_str(), json_bytes.length());\n    // Close the file\n    file.close();\n    return true;\n}", "CodeBleu_score": 43.67349990139857}, {"code": "bool JsonStore::Save(){\n\t    if (this->callback_before_save != NULL) {\n        this->callback_before_save(this->data);\n    }\n    if (!this->flag_save_allowed) {\n        return false;\n    }\n    JsonBytes json_bytes = this->ToJsonBytes();\n    if (json_bytes.size() == this->last_saved_content.size() &&\n        memcmp(json_bytes.data(), this->last_saved_content.data(),\n               json_bytes.size()) == 0) {\n        return false;\n    }\n    this->file.close();\n    this->file.setFileName(this->file_path);\n    if (!this->file.open(QIODevice::WriteOnly)) {\n        return false;\n    }\n    this->file.write(json_bytes.data(), json_bytes.size());\n    this->file.close();\n    this->last_saved_content = json_bytes;\n    return true;\n}", "CodeBleu_score": 21.38283194726933}, {"code": "bool JsonStore::Save(){\n\t    if (callback_before_save) {\n        callback_before_save(this);\n    }\n\n    if (!allow_save) {\n        return false;\n    }\n\n    std::string json_bytes = ToJsonBytes();\n    if (json_bytes == last_saved_content) {\n        return false;\n    }\n\n    file.close();\n    file.setFileName(file_path);\n    file.open(QIODevice::ReadWrite | QIODevice::Truncate | QIODevice::Text);\n    file.write(json_bytes.c_str());\n    file.close();\n    last_saved_content = json_bytes;\n    return true;\n}", "CodeBleu_score": 48.31763260138601}]}
{"instance_id": "1fb63372333c", "generation_result": [{"code": "void setTimeout(const std::function<void()> &callback, QObject *obj, int timeout){\n\t    QTimer *t = new QTimer(obj);\n    t->setInterval(timeout);\n    t->setSingleShot(true);\n    QObject::connect(t, &QTimer::timeout, [=]() {\n        callback();\n        t->deleteLater();\n    });\n    t->start();\n}", "CodeBleu_score": 72.33804826145641}, {"code": "void setTimeout(const std::function<void()> &callback, QObject *obj, int timeout){\n\t    QTimer *t = new QTimer(obj);\n    t->setSingleShot(true);\n    QObject::connect(t, &QTimer::timeout, [=]() {\n        callback();\n        t->deleteLater();\n    });\n    t->start(timeout);\n}", "CodeBleu_score": 68.02596404463233}, {"code": "void setTimeout(const std::function<void()> &callback, QObject *obj, int timeout){\n\t    QTimer *t = new QTimer(obj);\n    t->setInterval(timeout);\n    t->setSingleShot(true);\n    QObject::connect(t, &QTimer::timeout, obj, [=]{\n        callback();\n        t->deleteLater();\n    });\n    t->start();\n}", "CodeBleu_score": 72.19013731241617}]}
{"instance_id": "150b7aeeeb35", "generation_result": [{"code": "static QByteArray processReply(QNetworkReply *networkReply, QNetworkReply::NetworkError &statusCode) {\n\t    if (networkReply->error() != QNetworkReply::NoError) {\n        statusCode = networkReply->error();\n        return QByteArray();\n    }\n\n    const QList<QByteArray> headers = networkReply->rawHeaderList();\n    const QByteArray grpcStatusHeader = headers.contains(GrpcStatusHeader) ? networkReply->rawHeader(GrpcStatusHeader) : QByteArray();\n    if (!grpcStatusHeader.isEmpty()) {\n        const int grpcStatus = grpcStatusHeader.toInt();\n        if (grpcStatus != GrpcOk) {\n            const QByteArray grpcMessageHeader = headers.contains(GrpcMessageHeader) ? networkReply->rawHeader(GrpcMessageHeader) : QByteArray();\n            const QByteArray errorMessage = QString(\"gRPC error: %1 %2\").arg(grpcStatus).arg(grpcMessageHeader.constData()).toUtf8();\n            MW_show_log(errorMessage);\n            statusCode = QNetworkReply::ProtocolUnknownError;\n            return QByteArray();\n        }\n    }\n\n    statusCode = QNetworkReply::NoError;\n    return networkReply->readAll().mid(5);\n}", "CodeBleu_score": 57.67634017867718}, {"code": "static QByteArray processReply(QNetworkReply *networkReply, QNetworkReply::NetworkError &statusCode) {\n\t    if (networkReply->error() != QNetworkReply::NoError) {\n        statusCode = networkReply->error();\n        return QByteArray();\n    }\n    if (networkReply->rawHeader(GrpcStatusHeader).toInt() != 0) {\n        MW_show_log(\"gRPC error: \" + networkReply->rawHeader(GrpcMessageHeader));\n        statusCode = QNetworkReply::ProtocolUnknownError;\n        return QByteArray();\n    }\n    statusCode = QNetworkReply::NoError;\n    return networkReply->readAll().mid(5);\n}", "CodeBleu_score": 53.69224076004063}, {"code": "static QByteArray processReply(QNetworkReply *networkReply, QNetworkReply::NetworkError &statusCode) {\n\t    QByteArray response;\n    // Check for network errors\n    if (networkReply->error() != QNetworkReply::NoError) {\n        statusCode = networkReply->error();\n        return response;\n    }\n    // Check for gRPC errors\n    if (networkReply->rawHeader(GrpcStatusHeader).toInt() != 0) {\n        MW_show_log(QString(\"gRPC error: %1\").arg(networkReply->rawHeader(GrpcErrorHeader)));\n        statusCode = QNetworkReply::ProtocolUnknownError;\n        return response;\n    }\n    // No errors, return response data\n    statusCode = QNetworkReply::NoError;\n    response = networkReply->readAll().mid(5);\n    return response;\n}", "CodeBleu_score": 55.443494083202395}]}
{"instance_id": "ecaaeadcf213", "generation_result": [{"code": "QString Client::Start(bool *rpcOK, const libcore::LoadConfigReq &request){\n\t    grpc::ClientContext context;\n    libcore::LoadConfigResp reply;\n    grpc::Status status = default_grpc_channel->Call(\n        &context,\n        &libcore::Core::Client::Stub::Start,\n        request,\n        &reply);\n    if (status.ok()) {\n        *rpcOK = true;\n        return QString::fromStdString(reply.error());\n    } else {\n        *rpcOK = false;\n        return QString();\n    }\n}", "CodeBleu_score": 54.45823575448093}, {"code": "QString Client::Start(bool *rpcOK, const libcore::LoadConfigReq &request){\n\t    libcore::LoadConfigReply reply;\n    grpc::ClientContext context;\n    grpc::Status status = default_grpc_channel->Call(RPC_METHOD_START, &context, request, &reply);\n    if (status.ok()) {\n        *rpcOK = true;\n        return QString::fromStdString(reply.error());\n    } else {\n        *rpcOK = false;\n        return QString();\n    }\n}", "CodeBleu_score": 56.449814503676954}, {"code": "QString Client::Start(bool *rpcOK, const libcore::LoadConfigReq &request){\n\t    QString error = \"\";\n    if (default_grpc_channel == nullptr) {\n        error = \"Error: gRPC channel is not set!\";\n        *rpcOK = false;\n        return error;\n    }\n    libcore::LoadConfigReply reply;\n    grpc::ClientContext context;\n    grpc::Status status = default_grpc_channel->LoadConfig(&context, request, &reply);\n    if (!status.ok()) {\n        error = QString::fromStdString(status.error_message());\n        *rpcOK = false;\n        return error;\n    }\n    if (reply.error() != \"\") {\n        error = QString::fromStdString(reply.error());\n        *rpcOK = false;\n        return error;\n    }\n    *rpcOK = true;\n    return error;\n}", "CodeBleu_score": 48.30477101903915}]}
{"instance_id": "7f3365d1207f", "generation_result": [{"code": "void DialogBasicSettings::refresh_auth(){\n\t    ui->inbound_auth->clearText();\n    if (NekoGui::dataStore->inbound_auth->NeedAuth) {\n        ui->inbound_auth->setIcon(Icon::GetMaterialIcon(\"lock\"));\n    } else {\n        ui->inbound_auth->setIcon(Icon::GetMaterialIcon(\"lock_open\"));\n    }\n}", "CodeBleu_score": 68.55786811980171}, {"code": "void DialogBasicSettings::refresh_auth(){\n\t    ui->inbound_auth->setText(\"\");\n    if (NekoGui::dataStore->inbound_auth->NeedAuth) {\n        ui->inbound_auth->setIcon(Icon::GetMaterialIcon(\"lock\"));\n    } else {\n        ui->inbound_auth->setIcon(Icon::GetMaterialIcon(\"lock_open\"));\n    }\n}", "CodeBleu_score": 68.29196706190531}, {"code": "void DialogBasicSettings::refresh_auth(){\n\t    ui->inbound_auth->setText(\"\");\n    if (NekoGui::dataStore->inbound_auth->NeedAuth) {\n        ui->inbound_auth->setIcon(Icon::GetMaterialIcon(\"lock\", 24, 24));\n    } else {\n        ui->inbound_auth->setIcon(Icon::GetMaterialIcon(\"lock_open\", 24, 24));\n    }\n}", "CodeBleu_score": 60.11538378580376}]}
{"instance_id": "34f643ad7662", "generation_result": [{"code": "void DialogManageGroups::on_add_clicked(){\n\t    QString name = QString(\"New Group\");\n    GroupEntity *group = new GroupEntity(name, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0", "CodeBleu_score": 11.683580747656105}, {"code": "void DialogManageGroups::on_add_clicked(){\n\t    NekoGroupEntity* group = new NekoGroupEntity();\n    group->setName(tr(\"New Group\"));\n    group->setColor(QColor(0, 0, 0));\n    DialogEditGroup* dialog = new DialogEditGroup(group, this);\n    connect(dialog, SIGNAL(accepted()), this, SLOT(addGroupToListIfExist()));\n    connect(dialog, SIGNAL(accepted()), this, SLOT(updateGroupList()));\n    connect(dialog, SIGNAL(accepted()), this, SLOT(sendRefreshMessage()));\n    dialog->exec();\n    delete dialog;\n}", "CodeBleu_score": 47.026948977794135}, {"code": "void DialogManageGroups::on_add_clicked(){\n\t    NekoGroup group;\n    group.setName(\"New group\");\n    group.setColor(QColor(255, 255, 255));\n    group.setMuted(false);\n    group.setShowInMenu(true);\n    group.setShowInTray(true);\n    group.setShowInWindow(true);\n    group.setShowInWindowTitle(true);\n    group.setShowInWindowTitleBar(true);\n    group.setShowInWindowTitleBarText(true);\n    group.setShowInWindowTitleBarButtons(true);\n    group.setShowInWindowTitleBarProgress(true);\n    group.setShowInWindowTitleBarProgressText(true);\n    group.setShowInWindowTitleBarProgressIcon(true);\n    group.setShowInWindowTitleBarProgressTextIcon(true);\n    group.setShowInWindowTitleBarProgressTextIconTooltip(true);\n    group.setShowInWindowTitleBarProgressIconTooltip(true);\n    group.setShowInWindowTitleBarProgressTextTooltip(true);\n    group.setShowInWindowTitleBarProgressTextIconTooltip(true);\n    group.setShowInWindowTitleBarProgressTextTooltip(true);\n    group.setShowInWindowTitleBarProgressTextIconTooltip(true);\n    group.setShowInWindowTitleBarProgressTextIconTooltip(true);\n    group.setShowInWindowTitleBarProgressTextIconTooltip(true);\n    group.setShowInWindowTitleBarProgressTextIconTooltip(true);\n    group.setShowInWindowTitleBarProgressTextIconTooltip(true);\n    group.setShowInWindowTitleBarProgressTextIconTooltip(true);\n    group.setShowInWindowTitleBarProgressTextIconTooltip(true);\n    group.setShowInWindowTitleBarProgressTextIconTooltip(true);\n    group.setShowInWindowTitleBarProgressTextIconTooltip(true);\n    group.setShowInWindowTitleBarProgressTextIconTooltip(true);\n    group.setShowInWindowTitleBarProgressTextIconTooltip(true);\n    group.setShowInWindowTitleBarProgressTextIconTooltip(true);\n    group.setShowInWindowTitleBar", "CodeBleu_score": 18.518493266915005}]}
{"instance_id": "bfac51f6c4a7", "generation_result": [{"code": "void DialogManageRoutes::accept(){\n\t    // Save the custom route settings\n    saveCustomRouting();\n\n    // Check if the active routing has changed\n    if (activeRoutingChanged) {\n        // Update the routing display\n        updateRoutingDisplay();\n\n        // Assign the active routing to the data store\n        dataStore->routing = activeRouting;\n\n        // Set the routing function name with a prefix\n        dataStore->routing->setRoutingFunctionName(activeRouting->getRoutingFunctionName());\n\n        // Save the routing configuration\n        dataStore->routing->save(dataStore->routing->getRoutingFunctionName());\n\n        // Update the info message to indicate a route change\n        dataStore->infoMessage = \"Routing changed to \" + activeRouting->getRoutingFunctionName() + \".\";\n\n        // Send a message to update the data store\n        emit updateDataStore();\n    }\n\n    // Close the dialog with acceptance\n    QDialog::accept();\n}", "CodeBleu_score": 31.416517375296888}, {"code": "void DialogManageRoutes::accept(){\n\t    /* Save the custom route settings */\n    saveCustomRouting();\n    /* Check if the active routing has changed */\n    if (activeRoutingChanged()) {\n        /* Update the routing display */\n        updateRoutingDisplay();\n        /* Assign the active routing to the data store */\n        dataStore->routing = activeRouting;\n        /* Set the routing function name with a prefix */\n        dataStore->routing->setName(ROUTING_PREFIX + dataStore->routing->getName());\n        /* Save the routing configuration */\n        dataStore->routing->Save();\n        /* Update the info message to indicate a route change */\n        updateInfoMessage();\n    }\n    /* Send a message to update the data store */\n    emit dataStoreChanged();\n    /* Close the dialog with acceptance */\n    QDialog::accept();\n}", "CodeBleu_score": 23.18650666695579}, {"code": "void DialogManageRoutes::accept(){\n\t    if (m_pRouting->getRouting() != m_pRouting->getRouting()) {\n        m_pRouting->setRouting(m_pRouting->getRouting());\n        m_pRouting->setRouting(m_pRouting->getRouting());\n        m_pRouting->setRouting(m_pRouting->getRouting());\n        m_pRouting->setRouting(m_pRouting->getRouting());\n        m_pRouting->setRouting(m_pRouting->getRouting());\n        m_pRouting->setRouting(m_pRouting->getRouting());\n        m_pRouting->setRouting(m_pRouting->getRouting());\n        m_pRouting->setRouting(m_pRouting->getRouting());\n        m_pRouting->setRouting(m_pRouting->getRouting());\n        m_pRouting->setRouting(m_pRouting->getRouting());\n        m_pRouting->setRouting(m_pRouting->getRouting());\n        m_pRouting->setRouting(m_pRouting->getRouting());\n        m_pRouting->setRouting(m_pRouting->getRouting());\n        m_pRouting->setRouting(m_pRouting->getRouting());\n        m_pRouting->setRouting(m_pRouting->getRouting());\n        m_pRouting->setRouting(m_pRouting->getRouting());\n        m_pRouting->setRouting(m_pRouting->getRouting());\n        m_pRouting->setRouting(m_pRouting->getRouting());\n        m_pRouting->setRouting(m_pRouting->getRouting());\n        m_pRouting->setRouting(m_pRouting->getRouting());\n        m_pRouting->setRouting(m_pRouting->getRouting());\n        m_pRouting->setRouting(m_pRouting->getRouting());\n        m", "CodeBleu_score": 10.90612949231083}]}
{"instance_id": "ce56331f659f", "generation_result": [{"code": "SharedTileset MapReaderPrivate::readTileset(QIODevice *device, const QString &path){\n\t\tmError.clear();\n\txml.setDevice(device);\n\txml.name();\n\txml.readNextStartElement();\n\tmPath.setPath(path);\n\n\tif (xml.name() == \"tileset\")\n\t\treadTileset();\n\telse\n\t\txml.raiseError(tr(\"File is not a valid Tiled tileset.\"));\n\n\txml.setDevice(0);\n\tmReading = false;\n\treturn mTileset;\n}", "CodeBleu_score": 49.28270943136129}, {"code": "SharedTileset MapReaderPrivate::readTileset(QIODevice *device, const QString &path){\n\t\tmError.clear();\n\txml.setDevice(device);\n\txml.name();\n\tmPath.setPath(path);\n\tif (xml.readNextStartElement()) {\n\t\tif (xml.name() == \"tileset\")\n\t\t\treturn readTileset();\n\t\telse\n\t\t\txml.raiseError(tr(\"Not a tileset\"));\n\t}\n\tmPath.setPath(\"\");\n\treturn SharedTileset();\n}", "CodeBleu_score": 51.86787883368788}, {"code": "SharedTileset MapReaderPrivate::readTileset(QIODevice *device, const QString &path){\n\t\tmError.clear();\n\txml.setDevice(device);\n\txml.name();\n\tmPath.setPath(path);\n\tif (xml.readNextStartElement()) {\n\t\tif (xml.name() == \"tileset\") {\n\t\t\tmReadingExternalTileset = true;\n\t\t\tSharedTileset tileset = readTileset();\n\t\t\tmReadingExternalTileset = false;\n\t\t\treturn tileset;\n\t\t} else\n\t\t\txml.raiseError(QObject::tr(\"The file is not a tileset.\"));\n\t}\n\treturn SharedTileset();\n}", "CodeBleu_score": 64.66282741145386}]}
{"instance_id": "c4502706d0af", "generation_result": [{"code": "static HMODULE WINAPI LoadLibraryExWHook(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags){\n\t\t// Check if the library file name is provided\n\tif (lpLibFileName == NULL) {\n\t\tSetLastError(ERROR_INVALID_PARAMETER);\n\t\treturn NULL;\n\t}\n\n\t// Check if the library is blacklisted\n\tif (isImageBlacklistedW(lpLibFileName)) {\n\t\tSetLastError(ERROR_ACCESS_DISABLED_BY_POLICY_DEFAULT);\n\t\treturn NULL;\n\t}\n\n\t// Call the original function\n\treturn s_RealLoadLibraryExW(lpLibFileName, hFile, dwFlags);\n}", "CodeBleu_score": 70.3997040709335}, {"code": "static HMODULE WINAPI LoadLibraryExWHook(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags){\n\t\tif (lpLibFileName == NULL) {\n\t\tSetLastError(ERROR_INVALID_PARAMETER);\n\t\treturn NULL;\n\t}\n\tif (isImageBlacklistedW(lpLibFileName)) {\n\t\tSetLastError(ERROR_ACCESS_DISABLED_BY_POLICY_W);\n\t\treturn NULL;\n\t}\n\treturn s_RealLoadLibraryExW(lpLibFileName, hFile, dwFlags);\n}", "CodeBleu_score": 70.69088618008163}, {"code": "static HMODULE WINAPI LoadLibraryExWHook(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags){\n\t\tif (lpLibFileName == NULL) {\n\t\tSetLastError(ERROR_INVALID_PARAMETER);\n\t\treturn NULL;\n\t}\n\tif (isImageBlacklistedW(lpLibFileName)) {\n\t\tSetLastError(ERROR_ACCESS_DISABLED_BY_POLICY);\n\t\treturn NULL;\n\t}\n\treturn s_RealLoadLibraryExW(lpLibFileName, hFile, dwFlags);\n}", "CodeBleu_score": 72.38265893123666}]}
{"instance_id": "d8b05a05cfe6", "generation_result": [{"code": "QUrl BoxArtManager::loadBoxArtFromNetwork(NvComputer* computer, int appId){\n\t    QUrl localFileUrl;\n    QString cachePath = getFilePathForBoxArt(appId);\n    QFile cacheFile(cachePath);\n    QNetworkAccessManager http;\n    http.setComputer(computer);\n    QNetworkReply* reply = http.getBoxArt(appId);\n    QEventLoop loop;\n    QObject::connect(reply, SIGNAL(finished()), &loop, SLOT(quit()));\n    loop.exec();\n    QImage image = QImage::fromData(reply->readAll());\n    if (!image.isNull()) {\n        if (image.save(cachePath)) {\n            localFileUrl = QUrl::fromLocalFile(cachePath);\n        } else {\n            cacheFile.remove();\n        }\n    }\n    delete reply;\n    return localFileUrl;\n}", "CodeBleu_score": 54.66353606249841}, {"code": "QUrl BoxArtManager::loadBoxArtFromNetwork(NvComputer* computer, int appId){\n\t    QUrl url;\n    QFile file;\n    QByteArray data;\n    QImage image;\n\n    if (computer == nullptr) {\n        return url;\n    }\n\n    QString cachePath = getFilePathForBoxArt(appId);\n    file.setFileName(cachePath);\n\n    QNetworkAccessManager* http = computer->getHttp();\n    if (http == nullptr) {\n        return url;\n    }\n\n    QNetworkReply* reply = http->get(QNetworkRequest(getBoxArt(appId)));\n    if (reply == nullptr) {\n        return url;\n    }\n\n    QEventLoop loop;\n    QObject::connect(reply, &QNetworkReply::finished, &loop, &QEventLoop::quit);\n    loop.exec();\n\n    data = reply->readAll();\n    image.loadFromData(data);\n\n    if (image.isNull()) {\n        return url;\n    }\n\n    if (image.save(cachePath)) {\n        url = QUrl::fromLocalFile(cachePath);\n    } else {\n        QFile::remove(cachePath);\n    }\n\n    return url;\n}", "CodeBleu_score": 45.50202108647988}, {"code": "QUrl BoxArtManager::loadBoxArtFromNetwork(NvComputer* computer, int appId){\n\t    QUrl url;\n    QFile file;\n    QNetworkReply* reply;\n    QNetworkAccessManager http;\n\n    if (computer == nullptr) {\n        return url;\n    }\n\n    QString cachePath = getFilePathForBoxArt(appId);\n    file.setFileName(cachePath);\n\n    if (file.exists()) {\n        return QUrl::fromLocalFile(cachePath);\n    }\n\n    reply = http.get(QNetworkRequest(getBoxArt(computer, appId)));\n    if (reply->error() == QNetworkReply::NoError) {\n        QImage image = QImage::fromData(reply->readAll());\n        if (!image.isNull()) {\n            if (image.save(cachePath, \"PNG\")) {\n                url = QUrl::fromLocalFile(cachePath);\n            } else {\n                if (file.size() == 0) {\n                    file.remove();\n                }\n            }\n        }\n    }\n\n    reply->deleteLater();\n    return url;\n}", "CodeBleu_score": 55.62688074100763}]}
{"instance_id": "40201ad62fc4", "generation_result": [{"code": "void ComputerManager::handleMdnsServiceResolved(MdnsPendingComputer* computer,\n                                                QVector<QHostAddress>& addresses){\n\t    /*\n     * The best global IPv6 address is retrieved.\n     */\n    QHostAddress bestGlobalAddressV6 = getBestGlobalAddressV6(addresses);\n    /*\n     * The best global IPv6 address is used to add the host.\n     */\n    addNewHost(bestGlobalAddressV6, computer->port, computer->name, computer->user, computer->password, computer->key);\n    /*\n     * A flag is set to true if an IPv4 address is found.\n     */\n    bool foundIPv4 = false;\n    /*\n     * The addresses are iterated through.\n     */\n    for (auto address : addresses) {\n        /*\n         * The protocol of the address is checked.\n         */\n        if (address.protocol() == QAbstractSocket::IPv4Protocol) {\n            /*\n             * The host is added using the IPv4 address.\n             */\n            addNewHost(address, computer->port, computer->name, computer->user, computer->password, computer->key);\n            /*\n             * The flag is set to true.\n             */\n            foundIPv4 = true;\n            /*\n             * The loop is broken.\n             */\n            break;\n        }\n    }\n    /*\n     * If no IPv4 address was found, the best global IPv6 address is used to add the host.\n     */\n    if (!foundIPv4) {\n        addNewHost(bestGlobalAddressV6, computer->port, computer->name, computer->user, computer->password, computer->key);\n    }\n    /*\n     * The computer is removed from the pending resolution list.\n     */\n    m_PendingResolution.removeOne(computer);\n    /*\n     * The computer is scheduled for deletion.\n     */\n    computer->deleteLater();\n}", "CodeBleu_score": 46.92763950716367}, {"code": "void ComputerManager::handleMdnsServiceResolved(MdnsPendingComputer* computer,\n                                                QVector<QHostAddress>& addresses){\n\t  QHostAddress bestAddress;\n  bool foundIpv4 = false;\n\n  // First, get the best global IPv6 address.\n  for (const QHostAddress& address : addresses) {\n    if (address.protocol() == QAbstractSocket::IPv6Protocol) {\n      if (address.isInSubnet(QHostAddress::parseSubnet(\"fe80::/10\"))) {\n        // Link-local address.\n        continue;\n      }\n\n      if (address.isInSubnet(QHostAddress::parseSubnet(\"fec0::/10\"))) {\n        // Site-local address.\n        continue;\n      }\n\n      if (address.isInSubnet(QHostAddress::parseSubnet(\"fc00::/7\"))) {\n        // Unique local address.\n        continue;\n      }\n\n      bestAddress = address;\n      break;\n    }\n  }\n\n  // Now, try to add the host using an IPv4 address.\n  for (const QHostAddress& address : addresses) {\n    if (address.protocol() == QAbstractSocket::IPv4Protocol) {\n      addNewHost(address, computer->port, computer->name);\n      foundIpv4 = true;\n      break;\n    }\n  }\n\n  // If we didn't find an IPv4 address, fall back to using the best global\n  // IPv6 address.\n  if (!foundIpv4) {\n    addNewHost(bestAddress, computer->port, computer->name);\n  }\n\n  // Remove the computer from the pending resolution list and schedule it for\n  // deletion.\n  m_PendingResolution.removeOne(computer);\n  computer->deleteLater();\n}", "CodeBleu_score": 65.95720762939533}, {"code": "void ComputerManager::handleMdnsServiceResolved(MdnsPendingComputer* computer,\n                                                QVector<QHostAddress>& addresses){\n\t  // Get the best global IPv6 address\n  QHostAddress address = getBestGlobalAddressV6(addresses);\n  // Attempt to add the host using an IPv4 address\n  bool ipv4 = false;\n  for (int i = 0; i < addresses.size(); i++) {\n    if (addresses[i].protocol() == QAbstractSocket::IPv4Protocol) {\n      ipv4 = true;\n      address = addresses[i];\n      break;\n    }\n  }\n  // Fall back to using an IPv6 address\n  if (!ipv4) {\n    if (address.isInSubnet(QHostAddress::LocalHost, 128)) {\n      address = QHostAddress::LocalHost;\n    } else if (address.isInSubnet(QHostAddress::LocalHostIPv6, 128)) {\n      address = QHostAddress::LocalHostIPv6;\n    } else if (address.isInSubnet(QHostAddress::LocalHostIPv6, 10)) {\n      address = QHostAddress::LocalHostIPv6;\n    }\n  }\n\n  // Add the host\n  addNewHost(computer->name, address, computer->port);\n\n  // Remove the computer from the pending resolution list and schedule it for\n  // deletion\n  m_PendingResolution.removeOne(computer);\n  computer->deleteLater();\n}", "CodeBleu_score": 47.931652743957045}]}
{"instance_id": "6a765d35d3a7", "generation_result": [{"code": "void ComputerManager::saveHost(NvComputer *computer){\n\t    if (!computer) {\n        qCritical() << \"saveHost: Computer is nullptr\";\n        return;\n    }\n\n    QMutexLocker computerLock(&computer->mutex);\n    QString serialized = computer->serialize();\n    if (m_LastSerializedHosts.value(computer->uuid).isEqualSerialized(serialized)) {\n        return;\n    }\n    computerLock.unlock();\n\n    QMutexLocker lock(&m_LastSerializedHostsMutex);\n    m_LastSerializedHosts.insert(computer->uuid, serialized);\n    lock.unlock();\n\n    saveHosts();\n}", "CodeBleu_score": 56.90757586595504}, {"code": "void ComputerManager::saveHost(NvComputer *computer){\n\t    QMutexLocker computerLock(&computer->mutex);\n    if (!computer->isValid())\n        return;\n\n    QMutexLocker lock(&m_LastSerializedHostsMutex);\n    if (!m_LastSerializedHosts.contains(computer->uuid)) {\n        m_LastSerializedHosts[computer->uuid] = computer->serialize();\n        return;\n    }\n    if (m_LastSerializedHosts.value(computer->uuid).isEqualSerialized(computer->serialize()))\n        return;\n    m_LastSerializedHosts[computer->uuid] = computer->serialize();\n    computerLock.unlock();\n    lock.unlock();\n    saveHosts();\n}", "CodeBleu_score": 59.5315693489925}, {"code": "void ComputerManager::saveHost(NvComputer *computer){\n\t    QMutexLocker computerLock(&computer->mutex);\n    QString serialized = computer->serialize();\n    if (!m_LastSerializedHosts.value(computer->uuid).isEqualSerialized(serialized)) {\n        computerLock.unlock();\n        QMutexLocker lock(&m_LastSerializedHostsMutex);\n        m_LastSerializedHosts.insert(computer->uuid, serialized);\n        lock.unlock();\n        saveHosts();\n    }\n}", "CodeBleu_score": 64.18743909637696}]}
{"instance_id": "01df52cf216b", "generation_result": [{"code": "bool NvComputer::updateAppList(QVector<NvApp> newAppList){\n\t    if (newAppList == appList) {\n        return false;\n    }\n    QVector<NvApp> newAppList2;\n    for (NvApp app : newAppList) {\n        for (NvApp oldApp : appList) {\n            if (app.id == oldApp.id) {\n                app.hidden = oldApp.hidden;\n                app.directLaunch = oldApp.directLaunch;\n            }\n        }\n        newAppList2.append(app);\n    }\n    appList = newAppList2;\n    sortAppList();\n    return true;\n}", "CodeBleu_score": 67.03474810414981}, {"code": "bool NvComputer::updateAppList(QVector<NvApp> newAppList){\n\t    if (newAppList == appList) {\n        return false;\n    }\n\n    // Propagate client-side attributes such as hidden and directLaunch from the existing apps to the corresponding new apps based on their IDs\n    for (int i = 0; i < appList.size(); i++) {\n        for (int j = 0; j < newAppList.size(); j++) {\n            if (appList[i].id == newAppList[j].id) {\n                newAppList[j].hidden = appList[i].hidden;\n                newAppList[j].directLaunch = appList[i].directLaunch;\n            }\n        }\n    }\n\n    appList = newAppList;\n    sortAppList();\n\n    return true;\n}", "CodeBleu_score": 67.26784295434756}, {"code": "bool NvComputer::updateAppList(QVector<NvApp> newAppList){\n\t    // If the lists are the same, do nothing and return false\n    if (appList == newAppList) {\n        return false;\n    }\n\n    // Propagate client-side attributes such as hidden and directLaunch from the existing apps to the corresponding new apps based on their IDs\n    for (NvApp& newApp : newAppList) {\n        for (NvApp& oldApp : appList) {\n            if (newApp.getId() == oldApp.getId()) {\n                newApp.setHidden(oldApp.getHidden());\n                newApp.setDirectLaunch(oldApp.getDirectLaunch());\n            }\n        }\n    }\n\n    // Update the app list with the new list\n    appList = newAppList;\n\n    // Sort the app list\n    sortAppList();\n\n    return true;\n}", "CodeBleu_score": 75.94261963754653}]}
{"instance_id": "527d363b3a18", "generation_result": [{"code": "void QuitCommandLineParser::parse(const QStringList &args){\n\t    CommandLineParser parser;\n    parser.setApplicationDescription(tr(\"Quits an application on a specified host\"));\n    parser.addPositionalArgument(\"quit\", tr(\"Quit a running application\"));\n    parser.addPositionalArgument(\"host\", tr(\"Host to quit the application on\"));\n    parser.setupCommonOptions();\n\n    if (!parser.parse(args)) {\n        qWarning() << parser.errorText();\n        showHelp(parser);\n        return;\n    }\n\n    parser.processCommonOptions();\n\n    if (parser.positionalArguments().count() != 2) {\n        showHelp(parser);\n        return;\n    }\n\n    m_Host = parser.positionalArguments().at(1);\n}", "CodeBleu_score": 61.19537110556603}, {"code": "void QuitCommandLineParser::parse(const QStringList &args){\n\t    CommandLineParser parser;\n    parser.setApplicationDescription(tr(\"Quit an application running on a device.\"));\n    parser.addPositionalArgument(tr(\"quit\"), tr(\"Quit an application.\"));\n    parser.addPositionalArgument(tr(\"host\"), tr(\"The host name of the device to quit the application on.\"));\n    parser.setupCommonOptions();\n\n    const bool ok = parser.parse(args);\n    if (!ok) {\n        showError(parser.errorText());\n        return;\n    }\n\n    parser.handleHelpAndVersionOptions();\n    parser.handleUnknownOptions();\n\n    const QStringList positionalArguments = parser.positionalArguments();\n    if (positionalArguments.size() != 2) {\n        showError(tr(\"Incorrect number of arguments.\"));\n        return;\n    }\n\n    m_Host = positionalArguments.at(1);\n}", "CodeBleu_score": 55.94935322307346}, {"code": "void QuitCommandLineParser::parse(const QStringList &args){\n\t    CommandLineParser parser;\n    parser.setApplicationDescription(tr(\"Quit an application on a specified host\"));\n    parser.addPositionalArgument(\"quit\", tr(\"Quit a running application.\"));\n    parser.addPositionalArgument(\"host\", tr(\"The host to quit the application on.\"));\n    parser.setupCommonOptions();\n\n    if (!parser.parse(args)) {\n        showError(parser.errorText());\n        return;\n    }\n\n    parser.handleUnknownOptions();\n    parser.handleHelpAndVersionOptions();\n\n    if (parser.positionalArguments().count() < 2) {\n        showError(tr(\"You must specify both a command and a host.\"));\n        return;\n    }\n\n    m_Host = parser.positionalArguments().at(1);\n}", "CodeBleu_score": 62.59086962048074}]}
{"instance_id": "dca3348795d4", "generation_result": [{"code": "Napi::Value QDateWrap::addYears(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::HandleScope scope(env);\n\n  if(info.Length() < 1 || !info[0].IsNumber()) {\n    Napi::TypeError::New(env, \"Number expected\").ThrowAsJavaScriptException();\n  }\n  \n  Napi::Number num = info[0].As<Napi::Number>();\n  this->instance->addYears(num.Int32Value());\n  \n  Napi::Number year = Napi::Number::New(env, this->instance->year());\n  Napi::Number month = Napi::Number::New(env, this->instance->month());\n  Napi::Number day = Napi::Number::New(env, this->instance->day());\n  Napi::Object obj = QDateWrap::constructor.New({year, month, day});\n\n  return obj;\n}", "CodeBleu_score": 49.76518838713805}, {"code": "Napi::Value QDateWrap::addYears(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::HandleScope scope(env);\n\n  if(info.Length() < 1) {\n    Napi::TypeError::New(env, \"Wrong number of arguments\").ThrowAsJavaScriptException();\n    return env.Null();\n  }\n\n  if(!info[0].IsNumber()) {\n    Napi::TypeError::New(env, \"Wrong arguments\").ThrowAsJavaScriptException();\n    return env.Null();\n  }\n\n  int years = info[0].As<Napi::Number>().Int32Value();\n  QDate* date = new QDate(this->instance->addYears(years));\n  Napi::External<QDate> externalDate = Napi::External<QDate>::New(env, date);\n\n  Napi::Object obj = QDateWrap::constructor.New({externalDate});\n  return obj;\n}", "CodeBleu_score": 55.88627856645685}, {"code": "Napi::Value QDateWrap::addYears(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::HandleScope scope(env);\n\n  if(info.Length() < 1 || !info[0].IsNumber()) {\n    Napi::TypeError::New(env, \"Number expected\").ThrowAsJavaScriptException();\n  }\n  \n  Napi::Number yearsNapi = info[0].As<Napi::Number>();\n  int years = yearsNapi.Int32Value();\n\n  QDate date = this->instance->addYears(years);\n  auto instance = QDateWrap::constructor.New(\n    {Napi::External<QDate>::New(env, new QDate(date))});\n  return instance;\n}", "CodeBleu_score": 62.21970876324923}]}
{"instance_id": "3f8f791368dc", "generation_result": [{"code": "Napi::Value StaticDateWrapMethods::currentDate(const Napi::CallbackInfo& info) {\n\t  Napi::Env env = info.Env();\n  Napi::HandleScope scope(env);\n\n  QDateWrap* date = new QDateWrap(QDate::currentDate());\n  Napi::External<QDate> external = Napi::External<QDate>::New(env, date->_date);\n  Napi::Object wrap = QDateWrap::constructor.New({ external });\n  return wrap;\n}", "CodeBleu_score": 58.2700803774222}, {"code": "Napi::Value StaticDateWrapMethods::currentDate(const Napi::CallbackInfo& info) {\n\t  Napi::Env env = info.Env();\n  Napi::HandleScope scope(env);\n\n  QDateWrap* date = new QDateWrap(QDate::currentDate());\n  Napi::Object wrap = date->getInternalInstance();\n  return Napi::Value::From(env, wrap);\n}", "CodeBleu_score": 54.112223142853}, {"code": "Napi::Value StaticDateWrapMethods::currentDate(const Napi::CallbackInfo& info) {\n\t    Napi::Env env = info.Env();\n    Napi::HandleScope scope(env);\n\n    QDate date = QDate::currentDate();\n    Napi::Object obj = QDateWrap::constructor.New({\n        Napi::External<QDate>::New(env, new QDate(date.year(), date.month(), date.day()))\n    });\n    return scope.Escape(napi_value(obj)).ToObject();\n}", "CodeBleu_score": 67.78661819401552}]}
{"instance_id": "64d1b8308f8f", "generation_result": [{"code": "Napi::Value StaticDateWrapMethods::isLeapYear(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::HandleScope scope(env);\n\n  if (info.Length() < 1) {\n    Napi::TypeError::New(env, \"Wrong number of arguments\").ThrowAsJavaScriptException();\n    return env.Null();\n  }\n\n  if (!info[0].IsNumber()) {\n    Napi::TypeError::New(env, \"Wrong arguments\").ThrowAsJavaScriptException();\n    return env.Null();\n  }\n\n  int year = info[0].As<Napi::Number>().Int32Value();\n\n  return Napi::Value::From(env, QDate::isLeapYear(year));\n}", "CodeBleu_score": 77.30540636286582}, {"code": "Napi::Value StaticDateWrapMethods::isLeapYear(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n\n  if (info.Length() < 1) {\n    Napi::TypeError::New(env, \"Wrong number of arguments\").ThrowAsJavaScriptException();\n    return env.Null();\n  }\n\n  if (!info[0].IsNumber()) {\n    Napi::TypeError::New(env, \"Wrong arguments\").ThrowAsJavaScriptException();\n    return env.Null();\n  }\n\n  return Napi::Value::From(env, QDate::isLeapYear(info[0].As<Napi::Number>().Int32Value()));\n}", "CodeBleu_score": 60.172782772900256}, {"code": "Napi::Value StaticDateWrapMethods::isLeapYear(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::Number year = info[0].As<Napi::Number>();\n  int yearInt = year.Int32Value();\n  bool isLeapYear = QDate::isLeapYear(yearInt);\n  return Napi::Value::From(env, isLeapYear);\n}", "CodeBleu_score": 70.05579370676706}]}
{"instance_id": "aef23b7ae456", "generation_result": [{"code": "Napi::Value QDateTimeWrap::daysTo(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::Object otherWrap = info[0].As<Napi::Object>();\n  QDateTimeWrap* other = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(otherWrap);\n  return Napi::Value::From(env, this->instance->daysTo(*other->getInternalInstance()));\n}", "CodeBleu_score": 71.30403898800446}, {"code": "Napi::Value QDateTimeWrap::daysTo(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  QDateTimeWrap* otherWrap = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(info[0].As<Napi::Object>());\n  return Napi::Value::From(env, this->instance->daysTo(*otherWrap->getInternalInstance()));\n}", "CodeBleu_score": 59.77815120606233}, {"code": "Napi::Value QDateTimeWrap::daysTo(const Napi::CallbackInfo& info){\n\t    Napi::Env env = info.Env();\n    Napi::Object otherWrap = info[0].As<Napi::Object>();\n    QDateTimeWrap* other = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(otherWrap);\n    int days = this->instance->daysTo(*other->getInternalInstance());\n    return Napi::Value::From(env, days);\n}", "CodeBleu_score": 78.34987805832708}]}
{"instance_id": "6acfa242f879", "generation_result": [{"code": "Napi::Value QDateTimeWrap::msecsTo(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::Object otherWrap = info[0].As<Napi::Object>();\n  QDateTimeWrap* other = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(otherWrap);\n  return Napi::Value::From(env, this->instance->msecsTo(*other->getInternalInstance()));\n}", "CodeBleu_score": 71.3209871995638}, {"code": "Napi::Value QDateTimeWrap::msecsTo(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::Object otherWrap = info[0].As<Napi::Object>();\n  QDateTimeWrap* other = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(otherWrap);\n  return Napi::Value::From(env, this->instance->msecsTo(*other->getInternalInstance()));\n}", "CodeBleu_score": 71.3209871995638}, {"code": "Napi::Value QDateTimeWrap::msecsTo(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::Object otherWrap = info[0].As<Napi::Object>();\n  QDateTimeWrap* otherObject = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(otherWrap);\n  qint64 result = this->instance->msecsTo(*otherObject->getInternalInstance());\n  return Napi::Value::From(env, result);\n}", "CodeBleu_score": 86.30851252586153}]}
{"instance_id": "fd6c4b070349", "generation_result": [{"code": "Napi::Value QItemSelectionModelWrap::rowIntersectsSelection{\n\t  Napi::Env env = info.Env();\n  Napi::Number row = info[0].As<Napi::Number>();\n  Napi::Object parentObject = info[1].As<Napi::Object>();\n  QModelIndexWrap* parentWrap = Napi::ObjectWrap<QModelIndexWrap>::Unwrap(parentObject);\n  QModelIndex* parent = parentWrap->getInternalInstance();\n  bool result = this->instance->rowIntersectsSelection(row, *parent);\n  return Napi::Boolean::New(env, result);\n}", "CodeBleu_score": 76.85684785024344}, {"code": "Napi::Value QItemSelectionModelWrap::rowIntersectsSelection{\n\t  Napi::Env env = info.Env();\n  Napi::Number row = info[0].As<Napi::Number>();\n  Napi::Object parentObject = info[1].As<Napi::Object>();\n  QModelIndexWrap* parentWrap = Napi::ObjectWrap<QModelIndexWrap>::Unwrap(parentObject);\n  QModelIndex* parent = parentWrap->getInternalInstance();\n  bool result = this->instance->rowIntersectsSelection(row, *parent);\n  return Napi::Boolean::New(env, result);\n}", "CodeBleu_score": 76.85684785024344}, {"code": "Napi::Value QItemSelectionModelWrap::rowIntersectsSelection{\n\t  Napi::Env env = info.Env();\n  Napi::Number row = info[0].As<Napi::Number>();\n  Napi::Object parentObject = info[1].As<Napi::Object>();\n  QModelIndexWrap* parentWrap = Napi::ObjectWrap<QModelIndexWrap>::Unwrap(parentObject);\n  QModelIndex* parent = parentWrap->getInternalInstance();\n  bool result = this->instance->rowIntersectsSelection(row, *parent);\n  return Napi::Boolean::New(env, result);\n}", "CodeBleu_score": 76.85684785024344}]}
{"instance_id": "05bc5ac254cf", "generation_result": [{"code": "Napi::Value QSizeWrap::expandedTo(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::Object otherSizeWrap = info[0].As<Napi::Object>();\n  QSizeWrap* otherSize = Napi::ObjectWrap<QSizeWrap>::Unwrap(otherSizeWrap);\n  QSize* expandedToSize = new QSize(this->instance->expandedTo(*otherSize->getInternalInstance()));\n  Napi::External<QSize> expandedToSizeWrap = Napi::External<QSize>::New(env, expandedToSize);\n  Napi::Object wrap = QSizeWrap::constructor.New({expandedToSizeWrap});\n  return wrap;\n}", "CodeBleu_score": 63.7778071423441}, {"code": "Napi::Value QSizeWrap::expandedTo(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::Object otherSizeWrap = info[0].As<Napi::Object>();\n  QSizeWrap* otherSize = Napi::ObjectWrap<QSizeWrap>::Unwrap(otherSizeWrap);\n  QSize* result = new QSize(this->instance->expandedTo(*otherSize->getInternalInstance()));\n  return QSizeWrap::constructor.New({Napi::External<QSize>::New(env, result)});\n}", "CodeBleu_score": 62.716178544544256}, {"code": "Napi::Value QSizeWrap::expandedTo(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::Object otherSizeWrap = info[0].As<Napi::Object>();\n  QSizeWrap* otherSizeWrapUnwrapped = Napi::ObjectWrap<QSizeWrap>::Unwrap(otherSizeWrap);\n  QSize expandedSize = this->instance->expandedTo(*otherSizeWrapUnwrapped->getInternalInstance());\n  auto instance = QSizeWrap::constructor.New({Napi::External<QSize>::New(env, new QSize(expandedSize))});\n  return instance;\n}", "CodeBleu_score": 69.8329376445839}]}
{"instance_id": "1efa69400994", "generation_result": [{"code": "Napi::Value StaticQApplicationWrapMethods::desktopFileName{\n\t  Napi::Env env,\n  Napi::CallbackInfo info\n}", "CodeBleu_score": 6.901687484456037}, {"code": "Napi::Value StaticQApplicationWrapMethods::desktopFileName{\n\t  Napi::Env env,\n  Napi::CallbackInfo info\n}", "CodeBleu_score": 6.901687484456037}, {"code": "Napi::Value StaticQApplicationWrapMethods::desktopFileName{\n\t    Napi::Env env,\n    Napi::CallbackInfo const& info\n}", "CodeBleu_score": 9.021759502408145}]}
{"instance_id": "1f5a560eaaa6", "generation_result": [{"code": "Napi::Value QClipboardWrap::mimeData(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::HandleScope scope(env);\n\n  QClipboard::Mode mode = static_cast<QClipboard::Mode>(info[0].As<Napi::Number>().Int32Value());\n  QMimeData* mimeData = this->instance->mimeData(mode);\n\n  Napi::Value dataExternal = Napi::External<QMimeData>::New(env, mimeData);\n  Napi::Object dataObj = QMimeDataWrap::constructor.New({ dataExternal });\n  return dataObj;\n}", "CodeBleu_score": 59.0449376080844}, {"code": "Napi::Value QClipboardWrap::mimeData(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::Number mode = info[0].As<Napi::Number>();\n  QMimeData* mimeData = this->instance->mimeData(static_cast<QClipboard::Mode>(mode.Int32Value()));\n  return QMimeDataWrap::constructor.New({Napi::External<QMimeData>::New(env, const_cast<QMimeData*>(mimeData))});\n}", "CodeBleu_score": 58.23260516266371}, {"code": "Napi::Value QClipboardWrap::mimeData(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::Number mode = info[0].As<Napi::Number>();\n  QMimeData* mimeData = this->instance->mimeData(static_cast<QClipboard::Mode>(mode.Int32Value()));\n  Napi::Object clone = QMimeDataWrap::constructor.New(\n    { Napi::External<QMimeData>::New(env, mimeData) });\n  return clone;\n}", "CodeBleu_score": 63.40371542520559}]}
{"instance_id": "2c6dfc2d7eec", "generation_result": [{"code": "Napi::Value QDragWrap::source(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::Object wrap = QObjectWrap::constructor.New({Napi::External<QObject>::New(env, this->instance->source())});\n  return wrap;\n}", "CodeBleu_score": 60.20570140204635}, {"code": "Napi::Value QDragWrap::source(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  QObject* source = this->instance->source();\n  if (source) {\n    return QObjectWrap::constructor.New({Napi::External<QObject>::New(env, source)});\n  } else {\n    return env.Null();\n  }\n}", "CodeBleu_score": 73.50521915978851}, {"code": "Napi::Value QDragWrap::source(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::External<QObject> sourceObject = Napi::External<QObject>::New(env, &this->instance->source());\n  return QObjectWrap::constructor.New({sourceObject});\n}", "CodeBleu_score": 60.55769401168858}]}
{"instance_id": "29908bfd3b4b", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    try {\n        base.OnMouseMove(e);\n        if (e.X >= 0 && e.Y >= 0 && e.X < Width && e.Y < Height) {\n            int selectIndex = (int) Math.Round((e.Y - Bars[0].Top) / (double) (Bars[0].Height + Bars[0].Spacing));\n            if (selectIndex >= 0 && selectIndex < Bars.Count) {\n                if (Bars[selectIndex].Tips.IsValid) {\n                    if (Tips.Text != Bars[selectIndex].Tips.Text) {\n                        Tips.Text = Bars[selectIndex].Tips.Text;\n                        Tips.SizeToFit();\n                    }\n                    Tips.Location = new Point(\n                        Math.Max(e.X + 10, 0),\n                        Math.Max(e.Y + 10, 0)\n                    );\n                    Tips.Visible = true;\n                }\n            }\n        } else {\n            Tips.Visible = false;\n        }\n    } catch (Exception ex) {\n        Console.WriteLine(ex.Message);\n    }\n}", "CodeBleu_score": 29.17448957084659}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t  try {\n    base.OnMouseMove(e);\n    if (e.X >= 0 && e.X < Width && e.Y >= 0 && e.Y < Height) {\n      int selectIndex = (int)(e.X / (double)Width * Bars.Count);\n      if (selectIndex >= 0 && selectIndex < Bars.Count) {\n        if (Bars[selectIndex].Tips.IsValid) {\n          if (Tips.Text != Bars[selectIndex].Tips.Text) {\n            Tips.Text = Bars[selectIndex].Tips.Text;\n            Tips.SizeToFit();\n          }\n          Tips.Location = new Point(Math.Max(0, Math.Min(e.X - Tips.Width / 2, Width - Tips.Width)), Math.Max(0, Math.Min(e.Y - Tips.Height - 10, Height - Tips.Height - 10)));\n          Tips.Visible = true;\n        } else {\n          Tips.Visible = false;\n        }\n      } else {\n        Tips.Visible = false;\n      }\n    } else {\n      Tips.Visible = false;\n    }\n  } catch (Exception ex) {\n    Console.WriteLine(ex.Message);\n  }\n}", "CodeBleu_score": 28.861837769491938}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    try {\n        base.OnMouseMove(e);\n        if (e.X >= 0 && e.X < Width && e.Y >= 0 && e.Y < Height) {\n            int selectIndex = (int)Math.Round((double)(e.Y - _grid.Top) / _grid.RowHeight);\n            if (selectIndex >= 0 && selectIndex < _bars.Count) {\n                Tips tips = _bars[selectIndex].Tips;\n                if (tips.IsValid) {\n                    if (_toolTip.GetToolTip(this) != tips.Text) {\n                        _toolTip.SetToolTip(this, tips.Text);\n                        _toolTip.ToolTipTitle = tips.Title;\n                        _toolTip.ToolTipIcon = tips.Icon;\n                        _toolTip.AutoPopDelay = 5000;\n                        _toolTip.IsBalloon = true;\n                        _toolTip.UseFading = true;\n                        _toolTip.UseAnimation = true;\n                        _toolTip.IsBalloon = true;\n                        _toolTip.BackColor = tips.BackColor;\n                        _toolTip.ForeColor = tips.ForeColor;\n                        _toolTip.Font = tips.Font;\n                        _toolTip.ReshowDelay = 500;\n                    }\n                    _toolTip.Active = true;\n                    int tipWidth = _toolTip.GetToolTip(this).Length * 6;\n                    if (tipWidth > _toolTip.Width) {\n                        _toolTip.Width = tipWidth;\n                    }\n                    int tipHeight = _toolTip.GetToolTip(this).Split('", "CodeBleu_score": 27.55410601640529}]}
{"instance_id": "c04d17af6942", "generation_result": [{"code": "protected override void DrawOption(Graphics g){\n\t    if (Option == null || !NeedDrawing)\n        return;\n\n    // Draw tooltip with shadow axis pointer\n    if (Option.ToolTip != null && Option.ToolTip.ShadowAxisPointer != null)\n        DrawToolTip(g, Option.ToolTip);\n\n    // Draw series\n    DrawSeries(g, Option.Series);\n\n    // Draw axis\n    DrawAxis(g, Option.Axis);\n\n    // Draw title\n    DrawTitle(g, Option.Title);\n\n    // Draw tooltip with line axis pointer\n    if (Option.ToolTip != null && Option.ToolTip.LineAxisPointer != null)\n        DrawToolTip(g, Option.ToolTip);\n\n    // Draw legend\n    DrawLegend(g, Option.Legend);\n\n    // Draw axis scales\n    DrawAxisScales(g, Option.Axis);\n}", "CodeBleu_score": 58.84575431332484}, {"code": "protected override void DrawOption(Graphics g){\n\t    if (Option == null || !Option.Draw)\n        return;\n\n    if (ToolTip != null && ToolTip.Draw && ToolTip.DrawShadowAxisPointer)\n        ToolTip.Draw(g);\n\n    DrawSeries(g);\n\n    if (ToolTip != null && ToolTip.Draw && ToolTip.DrawLineAxisPointer)\n        ToolTip.Draw(g);\n\n    DrawTitle(g);\n    DrawAxis(g);\n    DrawLegend(g);\n    DrawAxisScales(g);\n}", "CodeBleu_score": 43.18442186101088}, {"code": "protected override void DrawOption(Graphics g){\n\t\tif (Option == null || !DrawOption)\n\t\treturn;\n\tDrawToolTip(g);\n\tDrawAxis(g);\n\tDrawAxisScales(g);\n\tDrawTitle(g);\n\tDrawSeries(g);\n\tDrawLegend(g);\n\tif (ToolTip != null && ToolTip.ShadowAxisPointer)\n\t\tDrawToolTip(g);\n}", "CodeBleu_score": 28.132530469186417}]}
{"instance_id": "1f16e1f824d0", "generation_result": [{"code": "protected virtual void DrawToolTip(Graphics g){\n\t    if (selectedIndex == -1) return;\n\n    if (toolTipType == ToolTipType.Line) {\n        g.DrawLine(toolTipPen,\n            (float)((selectedIndex + 0.5) * barWidth),\n            (float)drawingOrigin.Y,\n            (float)((selectedIndex + 0.5) * barWidth),\n            (float)(drawingOrigin.Y + gridHeight));\n    } else if (toolTipType == ToolTipType.Shadow) {\n        g.FillRectangle(toolTipBrush,\n            (float)(selectedIndex * barWidth),\n            (float)drawingOrigin.Y,\n            (float)barWidth,\n            (float)gridHeight);\n    }\n}", "CodeBleu_score": 25.365281797428942}, {"code": "protected virtual void DrawToolTip(Graphics g){\n\t    // If no item is selected, exit immediately\n    if (SelectedIndex < 0) return;\n\n    // Calculate the tooltip position\n    int x = (int)((SelectedIndex + 0.5) * BarWidth + DrawingOrigin.X);\n    int y = (int)(DrawingOrigin.Y);\n    int width = (int)(BarWidth);\n    int height = (int)(Grid.Height);\n\n    // Draw the tooltip\n    if (ToolTipType == ToolTipType.Line) {\n        g.DrawLine(Pens.Black, x, y, x, y + height);\n    } else if (ToolTipType == ToolTipType.Shadow) {\n        g.FillRectangle(Brushes.LightGray, x, y, width, height);\n    }\n}", "CodeBleu_score": 29.876634695419966}, {"code": "protected virtual void DrawToolTip(Graphics g){\n\t\tif (this.SelectedIndex == -1)\n\t\treturn;\n\tif (this.ToolTipType == ToolTipType.Line) {\n\t\tint x = this.SelectedIndex * this.BarWidth + this.DrawingOrigin.X;\n\t\tg.DrawLine(this.ToolTipPen, x, this.DrawingOrigin.Y, x, this.DrawingOrigin.Y + this.GridHeight);\n\t}\n\telse if (this.ToolTipType == ToolTipType.Shadow) {\n\t\tint x = this.SelectedIndex * this.BarWidth + this.DrawingOrigin.X;\n\t\tint w = this.BarWidth - 1;\n\t\tg.FillRectangle(this.ToolTipBrush, x, this.DrawingOrigin.Y, w, this.GridHeight);\n\t}\n}", "CodeBleu_score": 24.453918283561613}]}
{"instance_id": "63eac2c0afaa", "generation_result": [{"code": " protected void DrawTitle(Graphics g, UITitle title){\n\t  if (title.Text.IsValid && title.Font.IsValid) {\n   SizeF textSize = TextRenderer.MeasureText(g, title.Text, title.Font);\n   PointF textPosition = new PointF(title.Position.X, title.Position.Y);\n   if (title.AlignH == UIHorizontalAlignment.Center) {\n    textPosition.X -= textSize.Width / 2;\n   } else if (title.AlignH == UIHorizontalAlignment.Right) {\n    textPosition.X -= textSize.Width;\n   }\n   if (title.AlignV == UIVerticalAlignment.Center) {\n    textPosition.Y -= textSize.Height / 2;\n   } else if (title.AlignV == UIVerticalAlignment.Bottom) {\n    textPosition.Y -= textSize.Height;\n   }\n   TextRenderer.DrawText(g, title.Text, title.Font, textPosition, title.Color, title.Format);\n  }\n  if (title.SubText.IsValid && title.Font.IsValid) {\n   Font subFont = title.Font.DPIScaleFont(0.6f);\n   SizeF subTextSize = TextRenderer.MeasureText(g, title.SubText, subFont);\n   PointF subTextPosition = new PointF(title.Position.X, title.Position.Y);\n   if (title.AlignH == UIHorizontalAlignment.Center) {\n    subTextPosition.X -= subTextSize.Width / 2;\n   } else if (title.AlignH == UIHorizontalAlignment.Right) {\n    subTextPosition.X -= subTextSize.Width;\n   }\n   if (title.AlignV == UIVerticalAlignment.Center) {\n    subTextPosition.Y += textSize.Height / 2;\n   } else if (title.AlignV == UIVerticalAlignment.Top) {\n    subTextPosition.Y += textSize.Height;\n   }\n   TextRenderer.DrawText(g, title.SubText, subFont, subTextPosition, title.Color, title.Format);\n  }\n }", "CodeBleu_score": 32.47212164820775}, {"code": " protected void DrawTitle(Graphics g, UITitle title){\n\t   if (title.Text.IsValid && title.Font.IsValid) {\n     SizeF size = TextRenderer.MeasureText(g, title.Text.Value, title.Font.Value, new Size(int.MaxValue, int.MaxValue), TextFormatFlags.Left);\n     g.DrawString(title.Text.Value, title.Font.Value, new SolidBrush(title.Color.Value), new PointF(title.Position.X, title.Position.Y), title.TextFormat.Value);\n     if (title.SubText.IsValid && title.SubFont.IsValid) {\n       Font subFont = title.SubFont.Value.DPIScaleFont(g);\n       g.DrawString(title.SubText.Value, subFont, new SolidBrush(title.SubColor.Value), new PointF(title.Position.X, title.Position.Y + size.Height + title.SubPosition.Y), title.SubTextFormat.Value);\n     }\n   }\n }", "CodeBleu_score": 37.56704609730086}, {"code": " protected void DrawTitle(Graphics g, UITitle title){\n\t  if (title.Text.IsValid && title.Font.IsValid) {\n   SizeF titleSize = TextRenderer.MeasureText(g, title.Text, title.Font, title.Size, title.Format);\n   PointF titlePosition = new PointF(title.Position.X - titleSize.Width / 2, title.Position.Y - titleSize.Height / 2);\n   if (title.Alignment == ContentAlignment.TopLeft) {\n    titlePosition.X = title.Position.X;\n    titlePosition.Y = title.Position.Y;\n   }\n   else if (title.Alignment == ContentAlignment.TopRight) {\n    titlePosition.X = title.Position.X - titleSize.Width;\n    titlePosition.Y = title.Position.Y;\n   }\n   else if (title.Alignment == ContentAlignment.BottomLeft) {\n    titlePosition.X = title.Position.X;\n    titlePosition.Y = title.Position.Y - titleSize.Height;\n   }\n   else if (title.Alignment == ContentAlignment.BottomRight) {\n    titlePosition.X = title.Position.X - titleSize.Width;\n    titlePosition.Y = title.Position.Y - titleSize.Height;\n   }\n   g.DrawString(title.Text, title.Font, new SolidBrush(title.Color), titlePosition, title.Format);\n   if (title.SubText.IsValid && title.SubFont.IsValid) {\n    Font subFont = title.SubFont.DPIScaleFont(g);\n    SizeF subSize = TextRenderer.MeasureText(g, title.SubText, subFont, title.Size, title.Format);\n    PointF subPosition = new PointF(title.Position.X - subSize.Width / 2, title.Position.Y + titleSize.Height / 2 + title.SubPosition.Y);\n    if (title.SubAlignment == ContentAlignment.TopLeft) {\n     subPosition.X = title.Position.X;\n     subPosition.Y = title.Position.Y + titleSize.Height / 2 + title.SubPosition.Y;\n    }\n    else if (title.SubAlignment == ContentAlignment.TopRight)", "CodeBleu_score": 31.834496152299053}]}
{"instance_id": "fcb55d34cb20", "generation_result": [{"code": "protected override void CreateEmptyOption(){\n\t    this.option = new DoughnutChartOptions {\n        Title = new Title {\n            Text = \"Doughnut Chart\"\n        },\n        Subtitle = new Subtitle {\n            Text = \"Basic doughnut chart example\"\n        },\n        Series = new List<DoughnutSeries> {\n            new DoughnutSeries {\n                Name = \"Doughnut\",\n                Center = new List<int> {\n                    \"50%\",\n                    \"50%\"\n                },\n                Radius = new List<int> {\n                    \"50%\",\n                    \"70%\"\n                },\n                Data = new List<DoughnutData> {\n                    new DoughnutData {\n                        Value = 335,\n                        Name = \"Direct\"\n                    },\n                    new DoughnutData {\n                        Value = 310,\n                        Name = \"Email\"\n                    },\n                    new DoughnutData {\n                        Value = 234,\n                        Name = \"Ad Networks\"\n                    },\n                    new DoughnutData {\n                        Value = 135,\n                        Name = \"Video Ads\"\n                    },\n                    new DoughnutData {\n                        Value = 1548,\n                        Name = \"Search Engines\"\n                    }\n                }\n            }\n        }\n    };\n}", "CodeBleu_score": 12.868785081604095}, {"code": "protected override void CreateEmptyOption(){\n\t    emptyOption = new DoughnutChartOptions {\n        Title = new Title {\n            Text = \"Empty Doughnut Chart\"\n        },\n        Subtitle = new Subtitle {\n            Text = \"Data will appear here\"\n        },\n        Series = new List<Series> {\n            new Series {\n                Name = \"Doughnut\",\n                Center = new List<object> { \"50%\", \"50%\" },\n                Radius = new List<object> { \"40%\", \"60%\" },\n                Data = new List<object> {\n                    new object[] { \"Data1\", 10 },\n                    new object[] { \"Data2\", 20 },\n                    new object[] { \"Data3\", 30 },\n                    new object[] { \"Data4\", 40 },\n                    new object[] { \"Data5\", 50 }\n                }\n            }\n        }\n    };\n}", "CodeBleu_score": 15.53044688241227}, {"code": "protected override void CreateEmptyOption(){\n\t    this.emptyOption = new DoughnutChartOptions {\n        Title = new Title {\n            Text = \"Doughnut Chart\"\n        },\n        SubTitle = new Subtitle {\n            Text = \"Basic Doughnut Chart\"\n        },\n        Series = new List<DoughnutSeries> {\n            new DoughnutSeries {\n                Name = \"Doughnut\",\n                Center = new List<object> { \"50%\", \"50%\" },\n                Radius = new List<object> { \"45%\", \"55%\" },\n                Data = new List<object> {\n                    new DoughnutData {\n                        Value = 335,\n                        Name = \"Direct\"\n                    },\n                    new DoughnutData {\n                        Value = 310,\n                        Name = \"Email\"\n                    },\n                    new DoughnutData {\n                        Value = 234,\n                        Name = \"Union Ads\"\n                    },\n                    new DoughnutData {\n                        Value = 135,\n                        Name = \"Video Ads\"\n                    },\n                    new DoughnutData {\n                        Value = 1548,\n                        Name = \"Search Engine\"\n                    }\n                }\n            }\n        }\n    };\n}", "CodeBleu_score": 13.401873016286403}]}
{"instance_id": "7c0a5f0b8f45", "generation_result": [{"code": "public double[] LabelValues(){\n\t    double[] values = new double[Count + 1];\n    DateTimeInt64 start = new DateTimeInt64(Start);\n    for (int i = 0; i < values.Length; i++) {\n        if (IsDateTime) {\n            values[i] = start.AddMilliseconds(Interval * i).Value;\n        }\n        else {\n            values[i] = start.AddMilliseconds(Interval * i).Value;\n        }\n    }\n    return values;\n}", "CodeBleu_score": 51.489989872807286}, {"code": "public double[] LabelValues(){\n\t\tvar values = new double[Count + 1];\n\tvar interval = Interval;\n\tvar start = Start;\n\n\tfor (var i = 0; i <= Count; i++) {\n\t\tif (IsDateTime) {\n\t\t\tvalues[i] = start.AddMilliseconds(interval * i).ToOADate();\n\t\t} else {\n\t\t\tvalues[i] = start + interval * i;\n\t\t}\n\t}\n\n\treturn values;\n}", "CodeBleu_score": 46.21567098031863}, {"code": "public double[] LabelValues(){\n\t    double[] values = new double[Count + 1];\n    double start = AxisType == AxisType.DateTime ? DateTimeInt64.FromOADate(Start) : Start;\n    double interval = AxisType == AxisType.DateTime ? Interval * 1000 : Interval;\n\n    for (int i = 0; i <= Count; i++) {\n        values[i] = AxisType == AxisType.DateTime ? DateTimeInt64.FromOADate(start + interval * i) : start + interval * i;\n    }\n\n    return values;\n}", "CodeBleu_score": 46.410959359208434}]}
{"instance_id": "dfdbaee67b59", "generation_result": [{"code": "public static void ResetBorderColor(Message m, Control control, int width, Color color){\n\t    IntPtr hDC = m.WParam;\n    if (hDC.ToInt32() != 0) {\n        using (Graphics g = Graphics.FromHdc(hDC)) {\n            using (Pen p = new Pen(color, width)) {\n                g.SmoothingMode = SmoothingMode.AntiAlias;\n                Rectangle rect = control.ClientRectangle;\n                rect.Width -= 1;\n                rect.Height -= 1;\n                g.DrawRectangle(p, rect);\n            }\n        }\n        m.Result = (IntPtr)1;\n    }\n}", "CodeBleu_score": 45.770705320042076}, {"code": "public static void ResetBorderColor(Message m, Control control, int width, Color color){\n\t    // Create a Pen object with the specified color and width.\n    Pen borderPen = new Pen(color, width);\n\n    // Retrieve the device context for the window handle.\n    IntPtr hDC = m.WParam;\n\n    // If the device context is valid, draw a rectangle around the control's border.\n    if (hDC.ToInt32() != 0) {\n        Graphics g = Graphics.FromHdc(hDC);\n        g.SmoothingMode = SmoothingMode.AntiAlias;\n        Rectangle rect = control.ClientRectangle;\n        g.DrawRectangle(borderPen, rect);\n        g.Dispose();\n    }\n\n    // Release the device context.\n    ReleaseDC(m.HWnd, hDC);\n}", "CodeBleu_score": 49.76322098457322}, {"code": "public static void ResetBorderColor(Message m, Control control, int width, Color color){\n\t\n    // Create a pen.\n    using (Pen pen = new Pen(color, width)) {\n\n        // Retrieve the device context for the window handle.\n        IntPtr hDC = m.WParam;\n\n        // If the device context is valid.\n        if (hDC.ToInt32() != 0) {\n\n            // Create a graphics object from the device context.\n            using (Graphics graphics = Graphics.FromHdc(hDC)) {\n\n                // Set the smoothing mode.\n                graphics.SmoothingMode = SmoothingMode.AntiAlias;\n\n                // Draw the rectangle.\n                graphics.DrawRectangle(pen, 0, 0, control.Width - 1, control.Height - 1);\n\n            }\n\n        }\n\n    }\n\n}", "CodeBleu_score": 46.816569249311144}]}
{"instance_id": "aec16c2608df", "generation_result": [{"code": "public static Bitmap SaveToImage(this Control ctrl){\n\t    // Get the device context of the control\n    IntPtr dc = Win32.User.GetWindowDC(ctrl.Handle);\n    // Get the size of the control\n    Rectangle rect = ctrl.Bounds;\n    // Create a new bitmap and DC\n    IntPtr hBitmap = Win32.GDI.CreateCompatibleBitmap(dc, rect.Width, rect.Height);\n    IntPtr hDC = Win32.GDI.CreateCompatibleDC(dc);\n    // Select the bitmap into the new DC\n    IntPtr hOld = Win32.GDI.SelectObject(hDC, hBitmap);\n    // Copy the content of the control's DC into the new DC\n    Win32.GDI.PrintWindow(ctrl.Handle, hDC, 0);\n    // Restore the original object into the new DC\n    Win32.GDI.SelectObject(hDC, hOld);\n    // Get a Bitmap from the HBitmap\n    Bitmap bmp = Image.FromHbitmap(hBitmap);\n    // Clean up\n    Win32.GDI.DeleteDC(hDC);\n    Win32.GDI.DeleteObject(hBitmap);\n    Win32.User.ReleaseDC(ctrl.Handle, dc);\n    // Return the bitmap\n    return bmp;\n}", "CodeBleu_score": 59.73085693344359}, {"code": "public static Bitmap SaveToImage(this Control ctrl){\n\t   //Get the device context of the control's window\n   IntPtr teDC = Win32.User.GetWindowDC(ctrl.Handle);\n   //Get the size of the control\n   Size size = ctrl.Size;\n   //Create a compatible DC and bitmap\n   IntPtr teCompatibleDC = Win32.GDI.CreateCompatibleDC(teDC);\n   IntPtr teCompatibleBitmap = Win32.GDI.CreateCompatibleBitmap(teDC, size.Width, size.Height);\n   //Select the bitmap into the DC and print the control's content into it\n   IntPtr teOldBitmap = Win32.GDI.SelectObject(teCompatibleDC, teCompatibleBitmap);\n   Win32.GDI.PrintWindow(ctrl.Handle, teCompatibleDC, 0);\n   //Create a Bitmap from the HBitmap and return it\n   Bitmap bmp = Image.FromHbitmap(teCompatibleBitmap);\n   //Delete used objects\n   Win32.GDI.SelectObject(teCompatibleDC, teOldBitmap);\n   Win32.GDI.DeleteDC(teCompatibleDC);\n   Win32.GDI.DeleteObject(teCompatibleBitmap);\n   Win32.User.ReleaseDC(ctrl.Handle, teDC);\n   //Return the bitmap\n   return bmp;\n}", "CodeBleu_score": 60.3714617315888}, {"code": "public static Bitmap SaveToImage(this Control ctrl){\n\t   //get the device context of the control\n   IntPtr teDC = Win32.User.GetWindowDC(ctrl.Handle);\n   //create a compatible DC\n   IntPtr teCDC = Win32.GDI.CreateCompatibleDC(teDC);\n   //create a compatible bitmap\n   IntPtr teBMP = Win32.GDI.CreateCompatibleBitmap(teDC, ctrl.Width, ctrl.Height);\n   //select the bitmap into the compatible DC\n   IntPtr teOld = Win32.GDI.SelectObject(teCDC, teBMP);\n   //print the control's window content into the compatible DC\n   Win32.GDI.PrintWindow(ctrl.Handle, teCDC, 0);\n   //create a Bitmap object from the HBitmap\n   Bitmap bmp = Image.FromHbitmap(teBMP);\n   //delete the used objects\n   Win32.GDI.SelectObject(teCDC, teOld);\n   Win32.GDI.DeleteObject(teBMP);\n   Win32.GDI.DeleteDC(teCDC);\n   Win32.User.ReleaseDC(ctrl.Handle, teDC);\n   //return the bitmap\n   return bmp;\n}", "CodeBleu_score": 60.5623183144657}]}
{"instance_id": "8cbc60785194", "generation_result": [{"code": "public static void RemoveClickEvent(this Button button){\n\t\tif (button == null) return;\n\tvar eventInfo = typeof(Control).GetField(\"EventClick\", BindingFlags.Static | BindingFlags.NonPublic);\n\tif (eventInfo == null) return;\n\tvar eventHandlerList = button.Events[eventInfo.GetValue(null) as object];\n\tif (eventHandlerList == null) return;\n\tvar key = eventHandlerList.GetType().GetProperty(\"Key\", BindingFlags.Instance | BindingFlags.NonPublic);\n\tif (key == null) return;\n\teventHandlerList.RemoveHandler(key.GetValue(eventHandlerList, null));\n}", "CodeBleu_score": 33.512768767242505}, {"code": "public static void RemoveClickEvent(this Button button){\n\t    FieldInfo eventClick = typeof(Control).GetField(\"EventClick\", BindingFlags.Static | BindingFlags.NonPublic);\n    if (eventClick == null)\n        return;\n    object key = eventClick.GetValue(button);\n    if (key == null)\n        return;\n    EventHandlerList events = button.Events;\n    if (events == null)\n        return;\n    events.RemoveHandler(key, events[key]);\n}", "CodeBleu_score": 33.453769983456304}, {"code": "public static void RemoveClickEvent(this Button button){\n\t    if (button == null) return;\n    var eventInfo = typeof(Control).GetField(\"EventClick\", BindingFlags.Static | BindingFlags.NonPublic);\n    if (eventInfo == null) return;\n    var eventKey = eventInfo.GetValue(button);\n    var events = button.Events;\n    if (events != null && eventKey != null) events.RemoveHandler(eventKey, button.Click);\n}", "CodeBleu_score": 41.78257615778722}]}
{"instance_id": "107200db7c81", "generation_result": [{"code": "public static string CheckVersion(){\n\t    string releaseKey = \"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v4\\\\Full\\\\\";\n    using (RegistryKey ndpKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey(releaseKey)) {\n        if (ndpKey != null && ndpKey.GetValue(\"Release\") != null) {\n            return CheckFor45PlusVersion((int)ndpKey.GetValue(\"Release\"));\n        } else {\n            return \".NET Framework 4.5 or later is not detected.\";\n        }\n    }\n}", "CodeBleu_score": 75.9310910567232}, {"code": "public static string CheckVersion(){\n\t    string releaseKey = \"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v4\\\\Full\\\\\";\n    string releaseValue = \"Release\";\n    string releaseValueVersion = \"Release\";\n    string version = \"No .NET Framework version detected.\";\n    string version45Plus = \"No .NET Framework version detected.\";\n    string version4 = \"No .NET Framework version detected.\";\n    string version3 = \"No .NET Framework version detected.\";\n    string version2 = \"No .NET Framework version detected.\";\n    string version1 = \"No .NET Framework version detected.\";\n\n    // Check for .NET Framework 4.5 or later\n    if (RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey(releaseKey) != null) {\n        version45Plus = CheckFor45PlusVersion(releaseKey, releaseValue);\n    }\n\n    // Check for .NET Framework 4.0\n    if (RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey(releaseKey) != null) {\n        version4 = CheckFor40Version(releaseKey, releaseValueVersion);\n    }\n\n    // Check for .NET Framework 3.5\n    if (RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey(releaseKey) != null) {\n        version3 = CheckFor35Version(releaseKey, releaseValueVersion);\n    }\n\n    // Check for .NET Framework 2.0\n    if (RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey(releaseKey) != null) {\n        version2 = CheckFor20Version(releaseKey, releaseValueVersion);\n    }\n\n    // Check for .NET Framework 1.1\n    if (RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey(releaseKey) != null) {\n        version1 = CheckFor11Version(releaseKey, releaseValueVersion);\n    }\n\n    if (version45Plus != \"No .NET Framework version", "CodeBleu_score": 41.64181083346876}, {"code": "public static string CheckVersion(){\n\t    string releaseKey = \"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v4\\\\Full\\\\\";\n    string version = \"\";\n    using (RegistryKey ndpKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey(releaseKey)) {\n        if (ndpKey != null && ndpKey.GetValue(\"Release\") != null) {\n            version = CheckFor45PlusVersion((int)ndpKey.GetValue(\"Release\"));\n        } else {\n            version = \"No 4.5 or later version detected\";\n        }\n    }\n    return version;\n}", "CodeBleu_score": 68.82743612602178}]}
{"instance_id": "0078e6ce17ce", "generation_result": [{"code": "public static bool CopyPixels(Bitmap source, Bitmap target){\n\t    if (source == target) {\n        throw new ArgumentException(\"Source and target may not be the same bitmap.\");\n    }\n    if (source.Width != target.Width || source.Height != target.Height || source.PixelFormat != target.PixelFormat) {\n        return false;\n    }\n    using (var sourceLock = new FastBitmap(source, ImageLockMode.ReadOnly)) {\n        using (var targetLock = new FastBitmap(target, ImageLockMode.WriteOnly)) {\n            memcpy(targetLock.Scan0, sourceLock.Scan0, sourceLock.Stride * source.Height);\n        }\n    }\n    return true;\n}", "CodeBleu_score": 64.62092198965665}, {"code": "public static bool CopyPixels(Bitmap source, Bitmap target){\n\t    // check if the source and target are the same bitmap\n    if (source == target) {\n        throw new ArgumentException(nameof(source) + \" and \" + nameof(target) + \" cannot be the same bitmap.\");\n    }\n    // check if the source and target have the same dimensions and pixel format\n    if (source.Size != target.Size || source.PixelFormat != target.PixelFormat) {\n        return false;\n    }\n    // lock the source and target bitmap data\n    using (FastBitmap sourceFastBitmap = new FastBitmap(source, ImageLockMode.ReadOnly)) {\n        using (FastBitmap targetFastBitmap = new FastBitmap(target, ImageLockMode.WriteOnly)) {\n            // check if the source and target have the same stride\n            if (sourceFastBitmap.Stride != targetFastBitmap.Stride) {\n                return false;\n            }\n            // get the address of the first line\n            IntPtr sourceAddress = sourceFastBitmap.Scan0;\n            IntPtr targetAddress = targetFastBitmap.Scan0;\n            // calculate the total bytes in the bitmap\n            int bytes = sourceFastBitmap.Height * sourceFastBitmap.Stride;\n            // use memcpy to copy from the source to the target\n            memcpy(targetAddress, sourceAddress, bytes);\n        }\n    }\n    return true;\n}", "CodeBleu_score": 52.149892826359554}, {"code": "public static bool CopyPixels(Bitmap source, Bitmap target){\n\t    if (source == target) {\n        throw new Exception(nameof(source) + \" and \" + nameof(target) + \" cannot be the same bitmap.\");\n    }\n    if (source.Width != target.Width || source.Height != target.Height || source.PixelFormat != target.PixelFormat) {\n        return false;\n    }\n    using (var sourceLock = source.FastLock())\n    using (var targetLock = target.FastLock()) {\n        memcpy(targetLock.Scan0, sourceLock.Scan0, sourceLock.Stride * source.Height);\n    }\n    return true;\n}", "CodeBleu_score": 69.8492604879516}]}
{"instance_id": "b554f6ffc7b1", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    base.OnMouseMove(e);\n    PointF mousePos = new PointF(e.X, e.Y);\n    if (e.Button == MouseButtons.Left) {\n        SetPercent(mousePos);\n    }\n}", "CodeBleu_score": 58.54880818138588}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t\tbase.OnMouseMove(e);\n\tPointF mousePoint = new PointF(e.X, e.Y);\n\tif (e.Button == MouseButtons.Left) {\n\t\tSetPercent(mousePoint);\n\t}\n}", "CodeBleu_score": 56.09289752635414}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t\tbase.OnMouseMove(e);\n\tPointF mousePos = new PointF(e.X, e.Y);\n\tif (e.Button == MouseButtons.Left) {\n\t\tSetPercent(mousePos);\n\t}\n}", "CodeBleu_score": 54.74057533534267}]}
{"instance_id": "67a92ed0480f", "generation_result": [{"code": "protected void DrawColorBar(Graphics dc){\n\t\t// get the rectangle area for the bar\n\tRectangle rect = ClientRectangle;\n\trect.X += 1;\n\trect.Y += 1;\n\trect.Width -= 2;\n\trect.Height -= 2;\n\t// check the number of colors\n\tif (Color1.IsEmpty) {\n\t\t// draw a two-color bar\n\t\tUIColorUtil.Draw2ColorBar(dc, rect, Color2, Color3);\n\t} else {\n\t\t// draw a three-color bar\n\t\tUIColorUtil.Draw3ColorBar(dc, rect, Color1, Color2, Color3);\n\t}\n\t// draw the selector\n\tDrawSelector(dc);\n}", "CodeBleu_score": 28.72285742866852}, {"code": "protected void DrawColorBar(Graphics dc){\n\t\t// Draw the color bar\n\tRectangle rect = new Rectangle(0, 0, this.Width, this.Height);\n\trect.Inflate(-1, -1);\n\tif (this.Colors.Length == 2) {\n\t\tUIColorUtil.Draw2ColorBar(dc, rect, this.Colors[0], this.Colors[1]);\n\t} else if (this.Colors.Length >= 3) {\n\t\tUIColorUtil.Draw3ColorBar(dc, rect, this.Colors[0], this.Colors[1], this.Colors[2]);\n\t}\n\t// Draw the selector\n\tint x = (int)(rect.X + (rect.Width - 1) * this.Percentage);\n\tdc.FillRectangle(new SolidBrush(this.SelectorColor), x - 2, rect.Y, 5, rect.Height);\n}", "CodeBleu_score": 34.121622629667755}, {"code": "protected void DrawColorBar(Graphics dc){\n\t\t// Draw the color bar\n\tRectangle rc = new Rectangle(0, 0, this.Width - 1, this.Height - 1);\n\trc.Inflate(-2, -2);\n\t// Draw the color bar\n\tif (this.Colors.Length == 2) {\n\t\tUIColorUtil.Draw2ColorBar(dc, rc, this.Colors[0], this.Colors[1]);\n\t}\n\telse if (this.Colors.Length == 3) {\n\t\tUIColorUtil.Draw3ColorBar(dc, rc, this.Colors[0], this.Colors[1], this.Colors[2]);\n\t}\n\t// Draw the selector\n\tDrawSelector(dc, rc);\n}", "CodeBleu_score": 34.38958503956236}]}
{"instance_id": "eb7915323235", "generation_result": [{"code": "private void ItemForm_VisibleChanged(object sender, EventArgs e){\n\t\tdropSymbol = SymbolNormal;\n\tif (this.Visible) {\n\t\tdropSymbol = SymbolDropDown;\n\t}\n\tthis.Invalidate();\n}", "CodeBleu_score": 54.377849894567746}, {"code": "private void ItemForm_VisibleChanged(object sender, EventArgs e){\n\t\tdropSymbol = SymbolNormal;\n\tif (this.Visible)\n\t\tdropSymbol = SymbolDropDown;\n\tthis.Invalidate();\n}", "CodeBleu_score": 47.71161168749073}, {"code": "private void ItemForm_VisibleChanged(object sender, EventArgs e){\n\t    dropSymbol = SymbolNormal;\n    if (Visible)\n        dropSymbol = SymbolDropDown;\n    Invalidate();\n}", "CodeBleu_score": 56.35893156162331}]}
{"instance_id": "f39e3f212069", "generation_result": [{"code": "protected override void OnPaintFore(Graphics g, GraphicsPath path){\n\t    SizeChange();\n    if (!this.TextEdit.Visible) {\n        if (this.Text.IsValid) {\n            g.DrawString(this.Text, this.Font, new SolidBrush(this.GetForeColor()), this.TextEdit.Bounds, this.TextEdit.StringFormat);\n        } else if (this.Watermark.IsValid) {\n            g.DrawString(this.Watermark, this.Font, new SolidBrush(this.GetForeColor()), this.TextEdit.Bounds, this.TextEdit.StringFormat);\n        }\n    }\n    g.FillRectangle(new SolidBrush(this.GetRectColor()), this.TextEdit.Bounds.Right - 1, 0, this.Height - 1, this.Height - 1);\n    if (this.ClearButton) {\n        g.DrawFontImage(this.GetForeColor(), this.Font, this.TextEdit.Bounds.Right - 1, 0, this.Height - 1, this.Height - 1, 0x2715);\n    } else {\n        g.DrawFontImage(this.GetForeColor(), this.Font, this.TextEdit.Bounds.Right - 1, 0, this.Height - 1, this.Height - 1, 0x25BE);\n    }\n}", "CodeBleu_score": 36.693185734362956}, {"code": "protected override void OnPaintFore(Graphics g, GraphicsPath path){\n\t    SizeChange();\n    if (!Text.IsValid) {\n        g.DrawString(Watermark, Font, GetForeColor(Text.IsValid), ClientRectangle, TextFormat);\n    } else {\n        g.DrawString(Text, Font, GetForeColor(Text.IsValid), ClientRectangle, TextFormat);\n    }\n    g.FillRectangle(GetFillColor(), new Rectangle(ClientRectangle.Width - 1, 0, 1, ClientRectangle.Height));\n    if (IsValid) {\n        g.DrawFontImage(GetRectColor(), Font, ClientRectangle, 12, 13, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,", "CodeBleu_score": 35.00398136165274}, {"code": "protected override void OnPaintFore(Graphics g, GraphicsPath path){\n\t    SizeChange();\n    if (!Edit.Visible) {\n        if (Text.IsValid) {\n            g.DrawString(Text, Font, new SolidBrush(GetForeColor()), Edit.Location.X, Edit.Location.Y, Edit.Size.Width, Edit.Size.Height, Edit.StringFormat);\n        } else {\n            g.DrawString(Watermark.Text, Font, new SolidBrush(Watermark.GetForeColor()), Edit.Location.X, Edit.Location.Y, Edit.Size.Width, Edit.Size.Height, Edit.StringFormat);\n        }\n    }\n    g.FillRectangle(new SolidBrush(GetRectColor()), Edit.Location.X + Edit.Size.Width - 20, Edit.Location.Y, 20, Edit.Size.Height);\n    if (ClearButton) {\n        g.DrawFontImage(FontImage.Clear, GetForeColor(), Edit.Location.X + Edit.Size.Width - 18, Edit.Location.Y + 2, 14, 14);\n    } else {\n        g.DrawFontImage(FontImage.Dropdown, GetForeColor(), Edit.Location.X + Edit.Size.Width - 18, Edit.Location.Y + 2, 14, 14);\n    }\n}", "CodeBleu_score": 43.67478570619084}]}
{"instance_id": "c2f43d45d92d", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    base.OnMouseMove(e);\n    if (!this.ShowClearButton) {\n        this.NeedDrawClearButton = false;\n        return;\n    }\n    if (this.NeedDrawClearButton == this.IsMouseInClearButton(e.Location))\n        return;\n    this.NeedDrawClearButton = !this.NeedDrawClearButton;\n    if (this.IsValid)\n        this.Invalidate();\n}", "CodeBleu_score": 39.47263456000984}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t\tbase.OnMouseMove(e);\n\tif (!ShowClearButton) {\n\t\tNeedDrawClearButton = false;\n\t\treturn;\n\t}\n\tvar rect = new Rectangle(Width - 16, 0, 16, Height);\n\tif (rect.Contains(e.Location)) {\n\t\tif (!NeedDrawClearButton) {\n\t\t\tNeedDrawClearButton = true;\n\t\t\tInvalidate();\n\t\t}\n\t} else {\n\t\tif (NeedDrawClearButton) {\n\t\t\tNeedDrawClearButton = false;\n\t\t\tInvalidate();\n\t\t}\n\t}\n}", "CodeBleu_score": 36.1202924134176}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    base.OnMouseMove(e);\n    if (!this.ShowClearButton) {\n        this.NeedDrawClearButton = false;\n        return;\n    }\n    if (this.IsMouseInControlBox(e.Location)) {\n        if (!this.NeedDrawClearButton) {\n            this.NeedDrawClearButton = true;\n            this.Invalidate();\n        }\n    } else if (this.NeedDrawClearButton) {\n        this.NeedDrawClearButton = false;\n        this.Invalidate();\n    }\n}", "CodeBleu_score": 33.96255487512366}]}
{"instance_id": "ecd71145bba0", "generation_result": [{"code": "protected override void OnLayout(LayoutEventArgs e){\n\t    base.OnLayout(e);\n\n    // Calculate the preferred size of the component.\n    Size preferredSize = GetPreferredSize();\n\n    // If the preferred size differs from the current size, adjust the size if AutoSize is enabled.\n    if (preferredSize != Size) {\n        if (AutoSize) {\n            Size = preferredSize;\n        }\n    }\n\n    // Set the items to be displayed.\n    SetDisplayedItems();\n\n    // Trigger the layout completed event.\n    OnLayoutCompleted(new LayoutCompletedEventArgs(preferredSize));\n\n    // Invalidate the component to refresh its display.\n    Invalidate();\n}", "CodeBleu_score": 40.399962142869754}, {"code": "protected override void OnLayout(LayoutEventArgs e){\n\t  // Calculate the preferred size of the component\n  Size preferredSize = GetPreferredSize(new Size(this.Width, this.Height));\n\n  // Adjust the size if AutoSize is enabled and the suggested size differs from the current size\n  if (this.AutoSize && (preferredSize != this.Size)) {\n    this.Size = preferredSize;\n  }\n\n  // Set the items to be displayed\n  SetDisplayedItems();\n\n  // Trigger the layout completed event\n  OnLayoutCompleted(new LayoutCompletedEventArgs(preferredSize));\n\n  // Invalidate the component to refresh its display\n  Invalidate();\n}", "CodeBleu_score": 29.081727673014413}, {"code": "protected override void OnLayout(LayoutEventArgs e){\n\t  // Calculate the preferred size of the component\n  Size preferredSize = this.GetPreferredSize(new Size(this.Width, this.Height));\n\n  // If AutoSize is enabled and the suggested size differs from the current size, adjust the size\n  if (this.AutoSize && (this.Size != preferredSize)) {\n    this.Size = preferredSize;\n  }\n\n  // Set the items to be displayed\n  this.SetDisplayedItems();\n\n  // Trigger the layout completed event\n  this.OnLayoutCompleted(new LayoutCompletedEventArgs(preferredSize));\n\n  // Invalidate the component to refresh its display\n  this.Invalidate();\n\n  // Call the base class OnLayout method\n  base.OnLayout(e);\n}", "CodeBleu_score": 26.27856195100899}]}
{"instance_id": "670ec0154771", "generation_result": [{"code": "public override void SetStyleColor(UIBaseStyle uiColor){\n\t    base.SetStyleColor(uiColor);\n    fillColor = Color.white;\n    foregroundColor = uiColor.dropdownPanelForegroundColor;\n    rectangleColor = uiColor.dropdownPanelColor;\n    foreach (UISymbolButton item in GetControls<UISymbolButton>()) {\n        item.SetStyleColor(uiColor);\n    }\n}", "CodeBleu_score": 57.9713920659451}, {"code": "public override void SetStyleColor(UIBaseStyle uiColor){\n\t\tbase.SetStyleColor(uiColor);\n\tthis.fillColor = Color.white;\n\tthis.foregroundColor = uiColor.dropdownPanelForegroundColor;\n\tthis.rectColor = uiColor.dropdownPanelColor;\n\tthis.GetControls<UISymbolButton>().ForEach(item => item.SetStyleColor(uiColor));\n}", "CodeBleu_score": 42.61106104626542}, {"code": "public override void SetStyleColor(UIBaseStyle uiColor){\n\t  base.SetStyleColor(uiColor);\n  fillColor = Color.white;\n  foregroundColor = uiColor.dropdownPanelForegroundColor;\n  rectColor = uiColor.dropdownPanelColor;\n  foreach (UISymbolButton item in GetControls<UISymbolButton>()) {\n    item.SetStyleColor(uiColor);\n  }\n}", "CodeBleu_score": 57.931448355788696}]}
{"instance_id": "248c24f4cf62", "generation_result": [{"code": "public override bool DrawBody(Graphics Gr, RectangleF rc){\n\t   if (AnalogMeter == null) return false;\n   LBColorManager LBCM = new LBColorManager();\n   LBCM.StepColor(AnalogMeter.BodyColor, 0.8f, out Color BodyColor, out Color BodyColorDarker);\n   LinearGradientBrush LGB = new LinearGradientBrush(rc, BodyColor, BodyColorDarker, LinearGradientMode.Vertical);\n   Gr.FillEllipse(LGB, rc);\n   rc.Inflate(-rc.Width * (1 - AnalogMeter.GetDrawRatio()), -rc.Height * (1 - AnalogMeter.GetDrawRatio()));\n   LGB.LinearColors = new Color[] { BodyColorDarker, BodyColor };\n   Gr.FillEllipse(LGB, rc);\n   return true;\n}", "CodeBleu_score": 38.02971307502448}, {"code": "public override bool DrawBody(Graphics Gr, RectangleF rc){\n\t    // Check if the AnalogMeter object is null\n    if (AnalogMeter == null)\n        return false;\n\n    // Retrieve the body color\n    Color BodyColor = AnalogMeter.BodyColor;\n\n    // Calculate a darker shade of the body color\n    Color BodyColorDarker = LBColorManager.StepColor(BodyColor, -0.25F);\n\n    // Create a linear gradient brush\n    LinearGradientBrush BodyBrush = new LinearGradientBrush(rc, BodyColor, BodyColorDarker, 0F, true);\n\n    // Fill an ellipse in the provided rectangle area with the body color and its darker shade\n    Gr.FillEllipse(BodyBrush, rc);\n\n    // Adjust the rectangle dimensions based on the meter's draw ratio\n    rc.X += rc.Width * (1F - AnalogMeter.GetDrawRatio()) / 2F;\n    rc.Y += rc.Height * (1F - AnalogMeter.GetDrawRatio()) / 2F;\n    rc.Width *= AnalogMeter.GetDrawRatio();\n    rc.Height *= AnalogMeter.GetDrawRatio();\n\n    // Create a linear gradient brush with the reversed gradient\n    BodyBrush = new LinearGradientBrush(rc, BodyColorDarker, BodyColor, 0F, true);\n\n    // Fill an ellipse with a reversed gradient\n    Gr.FillEllipse(BodyBrush, rc);\n\n    return true;\n}", "CodeBleu_score": 40.225237052951286}, {"code": "public override bool DrawBody(Graphics Gr, RectangleF rc){\n\t\tif (AnalogMeter == null) return false;\n\tLBColorManager.StepColor(AnalogMeter.BodyColor, out Color BodyColor, out Color BodyDarkColor);\n\tusing (LinearGradientBrush BodyBrush = new LinearGradientBrush(rc, BodyColor, BodyDarkColor, 90f)) {\n\t\tGr.FillEllipse(BodyBrush, rc);\n\t}\n\trc.X += AnalogMeter.GetDrawRatio() * rc.Width / 20;\n\trc.Y += AnalogMeter.GetDrawRatio() * rc.Height / 20;\n\trc.Width -= AnalogMeter.GetDrawRatio() * rc.Width / 10;\n\trc.Height -= AnalogMeter.GetDrawRatio() * rc.Height / 10;\n\tusing (LinearGradientBrush BodyBrush = new LinearGradientBrush(rc, BodyDarkColor, BodyColor, 90f)) {\n\t\tGr.FillEllipse(BodyBrush, rc);\n\t}\n\treturn true;\n}", "CodeBleu_score": 38.54329354532317}]}
{"instance_id": "be7c41ba9985", "generation_result": [{"code": "protected override void OnMouseEnter(EventArgs e){\n\t   base.OnMouseEnter(e);\n   this.Invalidate();\n}", "CodeBleu_score": 30.049064442683616}, {"code": "protected override void OnMouseEnter(EventArgs e){\n\t    base.OnMouseEnter(e);\n    if (this.IsMouseOver) {\n        this.Invalidate();\n    }\n}", "CodeBleu_score": 29.38461907477587}, {"code": "protected override void OnMouseEnter(EventArgs e){\n\t    base.OnMouseEnter(e);\n    Invalidate();\n}", "CodeBleu_score": 33.93258044252809}]}
{"instance_id": "1d476b416b5a", "generation_result": [{"code": "public static void Load(){\n\t    lock (syncRoot) {\n        LoadAddresses();\n        LoadOverrides();\n        IsProxyEnabled = _proxyKey.GetValue(\"ProxyEnable\")?.ToString() == \"1\";\n    }\n}", "CodeBleu_score": 66.85338416221376}, {"code": "public static void Load(){\n\t    lock (_lock) {\n        LoadAddresses();\n        LoadOverrides();\n        _proxyKey.GetValue(\"ProxyEnable\")?.ToString();\n        _proxyKey.GetValue();\n    }\n}", "CodeBleu_score": 42.402624437375486}, {"code": "public static void Load(){\n\t    lock (lockObject) {\n        LoadAddresses();\n        LoadOverrides();\n        IsProxyEnabled = (_proxyKey.GetValue(\"ProxyEnable\")?.ToString() ?? \"0\").Equals(\"1\");\n    }\n}", "CodeBleu_score": 72.71644869067615}]}
{"instance_id": "298075fa5494", "generation_result": [{"code": "private static void LoadOverrides(){\n\t    string proxyOverride = _proxyKey.GetValue(\"ProxyOverride\")?.ToString();\n    if (!string.IsNullOrWhiteSpace(proxyOverride)) {\n        string[] overrides = proxyOverride.Split(';');\n        foreach (string override in overrides) {\n            if (override == \"<local>\") {\n                _ignoreLocalTraffic = true;\n            } else if (!Overrides.Contains(override)) {\n                Overrides.Add(override);\n            }\n        }\n    }\n}", "CodeBleu_score": 82.91560447419077}, {"code": "private static void LoadOverrides(){\n\t    // Get the \"ProxyOverride\" value from the registry key.\n    var proxyOverride = _proxyKey.GetValue(\"ProxyOverride\")?.ToString();\n    // Check if the value is null or empty.\n    if (!string.IsNullOrWhiteSpace(proxyOverride)) {\n        // Split the override string into an array of individual overrides.\n        var overrides = proxyOverride.Split(';');\n        // Iterate through each override.\n        foreach (var override in overrides) {\n            // Check if the override is a local traffic bypass.\n            if (override.StartsWith(\"<local>\")) {\n                // Set the flag to ignore local traffic.\n                _ignoreLocal = true;\n            } else {\n                // Add the unique override to the list.\n                if (!Overrides.Contains(override)) {\n                    Overrides.Add(override);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 70.5030340628797}, {"code": "private static void LoadOverrides(){\n\t    string proxyOverride = null;\n    try {\n        proxyOverride = (string)_proxyKey.GetValue(\"ProxyOverride\");\n    } catch (Exception) {\n        // Ignore\n    }\n\n    if (!string.IsNullOrWhiteSpace(proxyOverride)) {\n        ignoreLocalTraffic = proxyOverride.StartsWith(\"<local>\");\n        if (ignoreLocalTraffic) {\n            proxyOverride = proxyOverride.Substring(8);\n        }\n\n        string[] overrides = proxyOverride.Split(';');\n        foreach (string override in overrides) {\n            if (!string.IsNullOrWhiteSpace(override) && !Overrides.Contains(override)) {\n                Overrides.Add(override);\n            }\n        }\n    }\n}", "CodeBleu_score": 51.82554178204194}]}
{"instance_id": "c6c7ed2cfa51", "generation_result": [{"code": "private async Task<HttpWebRequest> ReadRequestAsync(Uri baseUri){\n\t    string command = await ReadNonBufferedLineAsync();\n    if (string.IsNullOrWhiteSpace(command)) return null;\n    string[] tokens = command.Split(' ');\n    string method = tokens[0];\n    string path = tokens[1];\n    Uri requestUri = new Uri(baseUri, path);\n    HttpWebRequest request = CreateRequest(method, requestUri);\n    while (true) {\n        command = await ReadNonBufferedLineAsync();\n        if (string.IsNullOrWhiteSpace(command)) break;\n        tokens = command.Split(new[] { ':' }, 2);\n        string header = tokens[0];\n        string value = tokens[1].Trim();\n        if (header.Equals(\"Host\", StringComparison.OrdinalIgnoreCase)) {\n            requestUri = new UriBuilder(requestUri) { Host = value }.Uri;\n            request = CreateRequest(method, requestUri);\n        }\n        else request.Headers.Add(header, value);\n    }\n    if (method.Equals(\"CONNECT\", StringComparison.OrdinalIgnoreCase)) {\n        await SendResponseAsync(HttpStatusCode.OK);\n        if (await SecureTunnel()) return await ReadRequestAsync(requestUri);\n    }\n    return request;\n}", "CodeBleu_score": 44.099504502811556}, {"code": "private async Task<HttpWebRequest> ReadRequestAsync(Uri baseUri){\n\t    // Initialize the method, headers list, and request URL\n    method = \"\";\n    headers = new List<string>();\n    requestUrl = baseUri;\n    // Read the first command line and split it to extract the HTTP method and request path\n    string command = await ReadNonBufferedLineAsync().ConfigureAwait(false);\n    if (command == null) return null;\n    string[] parts = command.Split(' ');\n    if (parts.Length != 3) return null;\n    method = parts[0];\n    string path = parts[1];\n    // If the path is not an absolute URL, combine it with the base URL\n    if (!path.StartsWith(\"http\")) {\n        path = baseUri.GetLeftPart(UriPartial.Authority) + path;\n    }\n    // Update the base URI and send an OK response for CONNECT requests\n    if (method.Equals(\"CONNECT\", StringComparison.OrdinalIgnoreCase)) {\n        requestUrl = new Uri(path);\n        await SendResponseAsync(HttpStatusCode.OK).ConfigureAwait(false);\n        // Attempt to establish a secure tunnel\n        if (!await SecureTunnel.Create(requestUrl.Host, requestUrl.Port).ConfigureAwait(false)) return null;\n        // Recursively read the next request\n        return await ReadRequestAsync(requestUrl).ConfigureAwait(false);\n    }\n    // Create and return an HttpWebRequest with the specified method, headers, and request URL\n    requestUrl = new Uri(path);\n    var request = WebRequest.CreateHttp(requestUrl);\n    request.Method = method;\n    request.Headers.Add(headers);\n    return request;\n}", "CodeBleu_score": 47.3070188315974}, {"code": "private async Task<HttpWebRequest> ReadRequestAsync(Uri baseUri){\n\t\tstring requestLine = await ReadNonBufferedLineAsync();\n\tif (requestLine == null) {\n\t\treturn null;\n\t}\n\tstring[] tokens = requestLine.Split(' ');\n\tif (tokens.Length != 3) {\n\t\tthrow new ProtocolViolationException(\"Invalid request line: \" + requestLine);\n\t}\n\tstring method = tokens[0];\n\tstring path = tokens[1];\n\tstring version = tokens[2];\n\tif (version != \"HTTP/1.1\") {\n\t\tthrow new ProtocolViolationException(\"Invalid HTTP version: \" + version);\n\t}\n\tUri uri = new Uri(baseUri, path);\n\tHttpWebRequest request = (HttpWebRequest)WebRequest.Create(uri);\n\trequest.Method = method;\n\trequest.ProtocolVersion = HttpVersion.Version11;\n\trequest.KeepAlive = true;\n\twhile (true) {\n\t\tstring headerLine = await ReadNonBufferedLineAsync();\n\t\tif (headerLine == null) {\n\t\t\tthrow new ProtocolViolationException(\"Unexpected end of headers\");\n\t\t}\n\t\tif (headerLine == \"\") {\n\t\t\tbreak;\n\t\t}\n\t\tstring[] headerTokens = headerLine.Split(new char[] { ':' }, 2);\n\t\tif (headerTokens.Length != 2) {\n\t\t\tthrow new ProtocolViolationException(\"Invalid header line: \" + headerLine);\n\t\t}\n\t\tstring headerName = headerTokens[0];\n\t\tstring headerValue = headerTokens[1].Trim();\n\t\tif (headerName == \"Proxy-Connection\") {\n\t\t\theaderName = \"Connection\";\n\t\t}\n\t\tif (headerName == \"Connection\" && headerValue.ToLowerInvariant() == \"close\") {\n\t\t\trequest.KeepAlive = false;\n\t\t}\n\t\tif (request.Headers.AllKeys.Contains(headerName)) {\n\t\t\trequest.Headers.Add(headerName, headerValue);\n\t\t} else {\n\t\t\trequest.Headers[headerName] = headerValue;\n", "CodeBleu_score": 31.153622164901325}]}
{"instance_id": "6ed63f3b7a68", "generation_result": [{"code": "public Task SendResponseAsync(WebResponse response, HttpContent content){\n\t    // Initialize status and description to \"OK\" by default\n    int status = (int)HttpStatusCode.OK;\n    string description = \"OK\";\n\n    // If the response is an HttpWebResponse, update the status and description\n    if (response is HttpWebResponse) {\n        var httpResponse = (HttpWebResponse)response;\n        status = (int)httpResponse.StatusCode;\n        description = httpResponse.StatusDescription;\n    }\n\n    // Call the other SendResponseAsync method\n    return SendResponseAsync(status, description, response.Headers, content);\n}", "CodeBleu_score": 69.75435567632094}, {"code": "public Task SendResponseAsync(WebResponse response, HttpContent content){\n\t\tif (response is HttpWebResponse) {\n\t\tvar httpResponse = (HttpWebResponse)response;\n\t\tStatusCode = (int)httpResponse.StatusCode;\n\t\tStatusDescription = httpResponse.StatusDescription;\n\t}\n\n\treturn SendResponseAsync(StatusCode, StatusDescription, response.Headers, content);\n}", "CodeBleu_score": 54.01765695489891}, {"code": "public Task SendResponseAsync(WebResponse response, HttpContent content){\n\t    HttpStatusCode statusCode = HttpStatusCode.OK;\n    string statusDescription = \"OK\";\n\n    if (response is HttpWebResponse) {\n        var httpResponse = response as HttpWebResponse;\n        statusCode = httpResponse.StatusCode;\n        statusDescription = httpResponse.StatusDescription;\n    }\n\n    return SendResponseAsync(statusCode, statusDescription, response.Headers, content);\n}", "CodeBleu_score": 65.51492921156589}]}
{"instance_id": "32d978074585", "generation_result": [{"code": "private bool SecureTunnel(string host){\n\t    try {\n        // Generate an SSL certificate for the host\n        X509Certificate2 cert = _certifier.GenerateCertificate(host);\n        // Create an SSL stream\n        _secureStream = new SslStream(\n            _client.GetStream(),\n            false,\n            new RemoteCertificateValidationCallback(_certifier.ValidateCertificate),\n            null\n        );\n        // Authenticate the stream as a server using the generated certificate\n        _secureStream.AuthenticateAsServer(\n            cert,\n            false,\n            SslProtocols.Tls12 | SslProtocols.Tls11 | SslProtocols.Tls,\n            false\n        );\n        return true;\n    } catch (Exception ex) {\n        Console.WriteLine(ex.Message);\n        return false;\n    }\n}", "CodeBleu_score": 58.90178342911801}, {"code": "private bool SecureTunnel(string host){\n\t    try {\n        _cert = _certifier.GenerateCertificate(host);\n        _secureStream = new SslStream(GetStream(), false, new RemoteCertificateValidationCallback(ValidateServerCertificate), null);\n        _secureStream.AuthenticateAsServer(_cert, false, System.Security.Authentication.SslProtocols.Tls12, false);\n        return true;\n    } catch (Exception e) {\n        Console.WriteLine(\"Exception: {0}\", e.Message);\n        return false;\n    }\n}", "CodeBleu_score": 52.875813741429134}, {"code": "private bool SecureTunnel(string host){\n\t    try {\n        if (host == null) {\n            throw new ArgumentNullException(\"host\");\n        }\n        if (host.Length == 0) {\n            throw new ArgumentException(\"host\");\n        }\n        if (_certifier == null) {\n            throw new ArgumentNullException(\"certifier\");\n        }\n        if (_secureStream == null) {\n            throw new ArgumentNullException(\"secureStream\");\n        }\n        _certifier.GenerateCertificate(host);\n        _secureStream.AuthenticateAsServer(_certifier.Certificate);\n        return true;\n    } catch (Exception e) {\n        Console.WriteLine(e);\n        return false;\n    }\n}", "CodeBleu_score": 31.360273844495783}]}
{"instance_id": "67d773149e9b", "generation_result": [{"code": "public static StreamContent ReadResponseContent(WebResponse response){\n\t    if (response.ContentLength == 0) {\n        response.GetResponseStream().Dispose();\n        return null;\n    }\n    return new StreamContent(response.GetResponseStream(), (int)response.ContentLength);\n}", "CodeBleu_score": 58.272928700516104}, {"code": "public static StreamContent ReadResponseContent(WebResponse response){\n\t    var responseStream = response.GetResponseStream();\n    if (responseStream == null) {\n        response.Dispose();\n        return null;\n    }\n    var contentLength = response.ContentLength;\n    var bufferSize = contentLength > 0 ? contentLength : 4096;\n    return new StreamContent(responseStream, bufferSize);\n}", "CodeBleu_score": 32.31244679953239}, {"code": "public static StreamContent ReadResponseContent(WebResponse response){\n\t\tlong contentLength = response.ContentLength;\n\tif (contentLength == 0) {\n\t\tresponse.GetResponseStream().Dispose();\n\t\treturn null;\n\t}\n\tStream stream = response.GetResponseStream();\n\treturn new StreamContent(stream, (int)Math.Min(contentLength, 4096));\n}", "CodeBleu_score": 43.09159792247637}]}
{"instance_id": "45d3c11325cf", "generation_result": [{"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t  string path = ActivityConfigJsonPath.Text.Trim();\n  if (string.IsNullOrEmpty(path)) {\n    OpenFileDialog dialog = new OpenFileDialog();\n    dialog.Filter = \"JSON files (*.json)|*.json\";\n    if (dialog.ShowDialog() == DialogResult.OK) {\n      path = dialog.FileName;\n      ActivityConfigJsonPath.Text = path;\n    }\n  }\n  try {\n    LoadActivityConfig(path);\n    ox.Show(\"OK\", Resources.Success);\n  } catch (Exception ex) {\n    ox.Show(ex.ToString(), Resources.Error);\n  }\n}", "CodeBleu_score": 41.928313744694535}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t    string path = ActivityConfigJsonPath.Text.Trim();\n    if (string.IsNullOrEmpty(path)) {\n        OpenFileDialog dialog = new OpenFileDialog();\n        dialog.Filter = \"JSON files (*.json)|*.json\";\n        dialog.Title = \"Select a JSON file\";\n        if (dialog.ShowDialog() == DialogResult.OK) {\n            path = dialog.FileName;\n            ActivityConfigJsonPath.Text = path;\n        }\n    }\n    try {\n        ActivityConfig.Load(path);\n        ox.Show(\"OK\", Resources.success);\n    } catch (Exception ex) {\n        ox.Show(ex.ToString(), Resources.error);\n    }\n}", "CodeBleu_score": 38.889862908244325}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t    string path = ActivityConfigJsonPath.Text.Trim();\n    if (string.IsNullOrEmpty(path)) {\n        using (OpenFileDialog dialog = new OpenFileDialog()) {\n            dialog.Filter = \"JSON Files (*.json)|*.json|All Files (*.*)|*.*\";\n            dialog.FilterIndex = 1;\n            dialog.RestoreDirectory = true;\n            if (dialog.ShowDialog() == DialogResult.OK) {\n                path = dialog.FileName;\n                ActivityConfigJsonPath.Text = path;\n            }\n        }\n    }\n    try {\n        ActivityConfig = ActivityConfig.Load(path);\n        ox.Show(\"OK\", Resources.Success);\n    } catch (Exception ex) {\n        ox.Show(ex.ToString(), Resources.Error);\n    }\n}", "CodeBleu_score": 44.03801410771401}]}
{"instance_id": "f97d2ba1a807", "generation_result": [{"code": "private void LoadActivityConfig(string path){\n\t    ActivityConfigItems = JsonConvert.DeserializeObject<List<ActivityConfigItem>>(File.ReadAllText(path));\n    ListActivityConfigItems.BeginUpdate();\n    ListActivityConfigItems.Items.Clear();\n    ListActivityConfigItems.Items.AddRange(ActivityConfigItems.Select(Convert).ToArray());\n    ListActivityConfigItems.EndUpdate();\n}", "CodeBleu_score": 66.63806683389465}, {"code": "private void LoadActivityConfig(string path){\n\t    ActivityConfigItems = JsonConvert.DeserializeObject<List<ActivityConfigItem>>(File.ReadAllText(path));\n    ListActivityConfigItems.BeginUpdate();\n    ListActivityConfigItems.Items.Clear();\n    ListActivityConfigItems.Items.AddRange(ActivityConfigItems.Select(Convert).ToArray());\n    ListActivityConfigItems.EndUpdate();\n}", "CodeBleu_score": 66.63806683389465}, {"code": "private void LoadActivityConfig(string path){\n\t    ActivityConfigItems = JsonConvert.DeserializeObject<List<ActivityConfigItem>>(File.ReadAllText(path));\n    ListActivityConfigItems.BeginUpdate();\n    ListActivityConfigItems.Items.Clear();\n    ListActivityConfigItems.Items.AddRange(ActivityConfigItems.Select(Convert).ToArray());\n    ListActivityConfigItems.EndUpdate();\n}", "CodeBleu_score": 66.63806683389465}]}
{"instance_id": "8531cab08f38", "generation_result": [{"code": "private void BtnSave_Click(object sender, EventArgs e){\n\t    try {\n        string path = ActivityConfigJsonPath.Text.Trim();\n        if (string.IsNullOrEmpty(path)) {\n            SaveFileDialog dialog = new SaveFileDialog();\n            dialog.Filter = \"JSON files (*.json)|*.json|All files (*.*)|*.*\";\n            dialog.FilterIndex = 1;\n            dialog.RestoreDirectory = true;\n            dialog.AddExtension = true;\n            dialog.DefaultExt = \".json\";\n            dialog.FileName = \"ActivityConfig.json\";\n            dialog.ShowDialog();\n            path = dialog.FileName;\n            ActivityConfigJsonPath.Text = path;\n        }\n        if (string.IsNullOrEmpty(path)) {\n            return;\n        }\n        File.WriteAllText(path, JsonConvert.SerializeObject(ActivityConfigItems));\n        MessageBox.Show(\"OK\", \"Success\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n    } catch (Exception ex) {\n        MessageBox.Show(ex.ToString(), \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n    }\n}", "CodeBleu_score": 47.40078078694581}, {"code": "private void BtnSave_Click(object sender, EventArgs e){\n\t  string path = ActivityConfigJsonPath.Text.Trim();\n  if (string.IsNullOrEmpty(path)) {\n    SaveFileDialog dialog = new SaveFileDialog();\n    dialog.Title = \"Save Configuration File\";\n    dialog.Filter = \"JSON files (*.json)|*.json\";\n    dialog.RestoreDirectory = true;\n    dialog.FileName = \"ActivityConfig.json\";\n    dialog.ShowDialog();\n    path = dialog.FileName;\n    ActivityConfigJsonPath.Text = path;\n  }\n  if (!string.IsNullOrEmpty(path)) {\n    try {\n      File.WriteAllText(path, JsonConvert.SerializeObject(ActivityConfigItems, Formatting.Indented));\n      MessageBox.Show(\"Configuration saved.\", \"OK\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n    } catch (Exception ex) {\n      MessageBox.Show(ex.ToString(), \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n    }\n  }\n}", "CodeBleu_score": 47.61115498278024}, {"code": "private void BtnSave_Click(object sender, EventArgs e){\n\tstring path = ActivityConfigJsonPath.Text.Trim();\nif (string.IsNullOrEmpty(path)) {\nSaveFileDialog dialog = new SaveFileDialog();\ndialog.Filter = \"JSON files (*.json)|*.json|All files (*.*)|*.*\";\ndialog.FilterIndex = 1;\ndialog.RestoreDirectory = true;\ndialog.AddExtension = true;\ndialog.DefaultExt = \"json\";\ndialog.Title = \"Save Activity Config\";\ndialog.ShowDialog();\npath = dialog.FileName;\nActivityConfigJsonPath.Text = path;\n}\nif (string.IsNullOrEmpty(path)) {\nreturn;\n}\ntry {\nFile.WriteAllText(path, JsonConvert.SerializeObject(ActivityConfigItems, Formatting.Indented));\nMessageBox.Show(\"Saved Activity Config\", \"OK\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n}\ncatch (Exception ex) {\nMessageBox.Show($\"Error saving Activity Config: {ex.Message}\", \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n}\n}", "CodeBleu_score": 43.89426212779961}]}
{"instance_id": "424111434149", "generation_result": [{"code": "private void LoadAllActivity(){\n\t    // Disable updates to the ListView to prevent flickering\n    ListAllActivity.BeginUpdate();\n\n    // Iterate through each activity group\n    foreach (var grp in GameData.Activity.Groups) {\n        // Create a new group control in the ListView\n        var lvg = new ListViewGroup(grp.Value.Name);\n        ListAllActivity.Groups.Add(lvg);\n\n        // Iterate through each activity ID in the group\n        for (var i = 0; i < grp.Value.Ids.Count; i++) {\n            // Create a new item for the ListView\n            var lvi = new ListViewItem(grp.Value.Ids[i].ToString());\n            lvi.SubItems.Add(grp.Value.Names[i]);\n            lvi.Group = lvg;\n\n            // Add the item to the ListView\n            ListAllActivity.Items.Add(lvi);\n        }\n    }\n\n    // Re-enable updates to the ListView\n    ListAllActivity.EndUpdate();\n}", "CodeBleu_score": 66.8626750262539}, {"code": "private void LoadAllActivity(){\n\t    // Disable updates to the ListView control\n    ListAllActivity.BeginUpdate();\n\n    // Iterate through each activity group\n    foreach (ActivityGroup grp in GameData.Activity) {\n        // Create a new group control in the ListView\n        ListViewGroup lvg = new ListViewGroup(grp.Name);\n        ListAllActivity.Groups.Add(lvg);\n\n        // Iterate through each activity ID in the group\n        for (int i = 0; i < grp.Value.Ids.Count; i++) {\n            // Add an item to the ListView for the activity ID and name\n            ListViewItem lvi = new ListViewItem(grp.Value.Ids[i].ToString());\n            lvi.SubItems.Add(grp.Value.Names[i].ToString());\n            lvi.Group = lvg;\n            ListAllActivity.Items.Add(lvi);\n        }\n    }\n\n    // Re-enable updates to the ListView control\n    ListAllActivity.EndUpdate();\n}", "CodeBleu_score": 61.44815587432069}, {"code": "private void LoadAllActivity(){\n\t    ListAllActivity.BeginUpdate();\n    foreach (ActivityGroup grp in GameData.Activity) {\n        ListViewGroup lvg = new ListViewGroup(grp.Name);\n        ListAllActivity.Groups.Add(lvg);\n        for (int i = 0; i < grp.Value.Ids.Count; i++) {\n            ListViewItem lvi = new ListViewItem(grp.Value.Ids[i].ToString());\n            lvi.SubItems.Add(grp.Value.Names[i].ToString());\n            lvi.Group = lvg;\n            ListAllActivity.Items.Add(lvi);\n        }\n    }\n    ListAllActivity.EndUpdate();\n}", "CodeBleu_score": 61.34770667725897}]}
{"instance_id": "51c5d7f71cb3", "generation_result": [{"code": "private void ListAllActivity_SelectedIndexChanged(object sender, EventArgs e){\n\t    try {\n        if (ListAllActivity.SelectedItems.Count == 0) {\n            return;\n        }\n        NUDActivityId.Text = ListAllActivity.SelectedItems[0].Text;\n    }\n    catch (Exception ex) {\n        MessageBox.Show(ex.ToString());\n    }\n}", "CodeBleu_score": 64.7170463956207}, {"code": "private void ListAllActivity_SelectedIndexChanged(object sender, EventArgs e){\n\t\ttry {\n\t\tif (ListAllActivity.SelectedItems.Count == 0) {\n\t\t\treturn;\n\t\t}\n\t\tNUDActivityId.Text = ListAllActivity.SelectedItems[0].Text;\n\t} catch (Exception ex) {\n\t\tMessageBox.Show(ex.ToString());\n\t}\n}", "CodeBleu_score": 58.31811759095391}, {"code": "private void ListAllActivity_SelectedIndexChanged(object sender, EventArgs e){\n\t    try {\n        if (ListAllActivity.SelectedItems.Count == 0) {\n            return;\n        }\n        NUDActivityId.Text = ListAllActivity.SelectedItems[0].Text;\n    }\n    catch (Exception ex) {\n        MessageBox.Show(ex.ToString());\n    }\n}", "CodeBleu_score": 64.7170463956207}]}
{"instance_id": "8bed5c7884dc", "generation_result": [{"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t    string path = TxtDropJsonPath.Text.Trim();\n    if (string.IsNullOrEmpty(path)) {\n        using (OpenFileDialog dialog = new OpenFileDialog()) {\n            dialog.Filter = \"JSON Files (*.json)|*.json\";\n            if (dialog.ShowDialog() == DialogResult.OK) {\n                path = dialog.FileName;\n                TxtDropJsonPath.Text = path;\n            }\n        }\n    }\n    try {\n        Banners = JsonConvert.DeserializeObject<List<Banner>>(File.ReadAllText(path));\n        MessageBox.Show(\"Loaded banners from JSON file.\", \"Success\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n    } catch (Exception ex) {\n        MessageBox.Show($\"Failed to load banners from JSON file.\n{ex.Message}\", \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n    }\n}", "CodeBleu_score": 43.78970045795394}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t    string path = TxtDropJsonPath.Text.Trim();\n    if (path == \"\") {\n        OpenFileDialog dialog = new OpenFileDialog();\n        dialog.Filter = \"JSON files (*.json)|*.json|All files (*.*)|*.*\";\n        dialog.FilterIndex = 1;\n        if (dialog.ShowDialog() == DialogResult.OK) {\n            TxtDropJsonPath.Text = dialog.FileName;\n        }\n    }\n    try {\n        List<Banner> banners = JsonConvert.DeserializeObject<List<Banner>>(File.ReadAllText(path));\n        Banners = banners;\n        ox.Show(\"OK\", Resources.Success);\n    }\n    catch (Exception ex) {\n        ox.Show(ex.ToString(), Resources.Error);\n    }\n}", "CodeBleu_score": 42.413090988923855}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t\tstring path = TxtDropJsonPath.Text.Trim();\n\tif (string.IsNullOrEmpty(path)) {\n\t\tOpenFileDialog dialog = new OpenFileDialog();\n\t\tdialog.Filter = \"JSON files (*.json)|*.json|All files (*.*)|*.*\";\n\t\tif (dialog.ShowDialog() == DialogResult.OK) {\n\t\t\tpath = dialog.FileName;\n\t\t\tTxtDropJsonPath.Text = path;\n\t\t}\n\t}\n\ttry {\n\t\tList<Banner> banners = JsonConvert.DeserializeObject<List<Banner>>(File.ReadAllText(path));\n\t\tif (banners != null && banners.Count > 0) {\n\t\t\tLstBanners.DataSource = banners;\n\t\t\tLstBanners.DisplayMember = \"Name\";\n\t\t\tLstBanners.ValueMember = \"Id\";\n\t\t\tLstBanners.SelectedIndex = 0;\n\t\t\tTxtDropJsonPath.Text = path;\n\t\t\tMessageBox.Show(\"Banners loaded successfully.\", \"Success\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n\t\t} else {\n\t\t\tMessageBox.Show(\"No banners found in the file.\", \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n\t\t}\n\t} catch (Exception ex) {\n\t\tMessageBox.Show(\"An error occurred while loading the banners.\n\" + ex.Message, \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n\t}\n}", "CodeBleu_score": 36.043969070330256}]}
{"instance_id": "0e39a56d211b", "generation_result": [{"code": "private void ShowDropList(List<DropData> dropList){\n\t    dropList.Sort((a, b) => a.Name.CompareTo(b.Name));\n    ta.BeginUpdate();\n    ta.Items.Clear();\n    if (dropList.Count > 0) {\n        ta.Items.AddRange(dropList.Select(it => it.Name).ToArray());\n        ta.SelectedIndex = 0;\n    }\n    ta.EndUpdate();\n}", "CodeBleu_score": 57.57040287206922}, {"code": "private void ShowDropList(List<DropData> dropList){\n\t    dropList.Update();\n    dropList.Clear();\n    if (dropList.Count > 0) {\n        dropList.AddRange(dropList);\n        dropList.SelectedIndex = 0;\n    }\n    dropList.EndUpdate();\n}", "CodeBleu_score": 39.116695463645996}, {"code": "private void ShowDropList(List<DropData> dropList){\n\t    dropList.Update();\n    dropList.Clear();\n\n    if (dropList.Count > 0) {\n        dropList.AddRange(dropList);\n        dropList.SelectedIndex = 0;\n    }\n\n    dropList.EndUpdate();\n}", "CodeBleu_score": 39.116695463645996}]}
{"instance_id": "60fd5605c44e", "generation_result": [{"code": "private void RemoveDrop(DropData data){\n\t\tif(SelectedMonsterIds.Contains(data.monsterId)) {\n\t\tSelectedDropList.Remove(data);\n\t\tdropList.Remove(data);\n\t}\n}", "CodeBleu_score": 15.765668703982866}, {"code": "private void RemoveDrop(DropData data){\n\t    // Stop updates to the list\n    SelectedDropList.BeginUpdate();\n\n    // Clear the list\n    SelectedDropList.Items.Clear();\n\n    // Check if the drop list contains items\n    if (data.drops.Count > 0) {\n        // Add the items to the list\n        foreach (Drop drop in data.drops) {\n            SelectedDropList.Items.Add(drop.item.name);\n        }\n\n        // Select the first item\n        SelectedDropList.SelectedIndex = 0;\n    }\n\n    // Resume updates to the list\n    SelectedDropList.EndUpdate();\n}", "CodeBleu_score": 23.83647802528866}, {"code": "private void RemoveDrop(DropData data){\n\t    /// <summary>\n    /// The private function ShowDropList(List<DropData> dropList) updates a list display with provided drop data.\nIt begins by stopping updates to the list, clears any existing items, and checks if the drop list contains items.\nIf items are present, it adds them to the list and selects the first item.\nFinally, it resumes updates to the list.\n    /// </summary>\n    if (data == null) {\n        return;\n    }\n    if (SelectedMonsterIds.ContainsKey(data.MonsterId)) {\n        SelectedMonsterIds.Remove(data.MonsterId);\n    }\n    if (Banners.TryGetValue(data.MonsterId, out Banner banner)) {\n        if (SelectedDropList.Contains(banner)) {\n            SelectedDropList.Remove(banner);\n        }\n        if (dropList.Contains(banner)) {\n            dropList.Remove(banner);\n        }\n    }\n}", "CodeBleu_score": 30.070448313817078}]}
{"instance_id": "475581af77bf", "generation_result": [{"code": "private void FormMain_FormClosed(object sender, FormClosedEventArgs e){\n\t\n    // Log entry\n    Logg.I(TAG, \"FormMain_FormClosed()\");\n\n    // Iterate through each page\n    foreach (Page page in pages) {\n        Logg.I(TAG, \"FormMain_FormClosed() - OnClosed(\" + page.Name + \")\");\n        page.OnClosed();\n        Logg.I(TAG, \"FormMain_FormClosed() - OnClosed(\" + page.Name + \") - Completed\");\n    }\n\n    // Save the current settings\n    Logg.I(TAG, \"FormMain_FormClosed() - SaveSettings()\");\n    SaveSettings();\n    Logg.I(TAG, \"FormMain_FormClosed() - SaveSettings() - Completed\");\n\n    // Log exit\n    Logg.I(TAG, \"FormMain_FormClosed() - Completed\");\n}", "CodeBleu_score": 51.95694488470398}, {"code": "private void FormMain_FormClosed(object sender, FormClosedEventArgs e){\n\t  Logger.I(TAG, \"FormMain_FormClosed\");\n  foreach (Page page in this.tabControl.TabPages) {\n    if (page.Controls[0] is Form) {\n      Form form = (Form)page.Controls[0];\n      Logger.I(TAG, \"FormMain_FormClosed: \" + form.Name);\n      form.OnClosed(e);\n    }\n  }\n  Settings.Save();\n  Logger.I(TAG, \"FormMain_FormClosed: Completed\");\n}", "CodeBleu_score": 46.10636648060456}, {"code": "private void FormMain_FormClosed(object sender, FormClosedEventArgs e){\n\t    Logger.I(TAG, \"FormMain_FormClosed\");\n    foreach (Form form in this.MdiChildren) {\n        Logger.I(TAG, \"FormMain_FormClosed\", \"Form: \" + form.Name);\n        form.OnClosed(e);\n        Logger.I(TAG, \"FormMain_FormClosed\", \"Form: \" + form.Name + \" - Completed\");\n    }\n    Settings.Save();\n    Logger.I(TAG, \"FormMain_FormClosed - Completed\");\n}", "CodeBleu_score": 48.72457240082966}]}
{"instance_id": "afd99ce2de2b", "generation_result": [{"code": " private void SaveSettings(){\n\t    try {\n      // Save the state of the UI\n      Properties.Settings.Default.AutoCopy = chkAutoCopy.Checked;\n      Properties.Settings.Default.WindowState = this.WindowState;\n      Properties.Settings.Default.WindowPosition = this.Location;\n      Properties.Settings.Default.WindowSize = this.Size;\n      Properties.Settings.Default.CommandLogHeight = splitContainer1.SplitterDistance;\n      Properties.Settings.Default.Save();\n    } catch (Exception ex) {\n      Logger.E(TAG, \"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 31.028548326479168}, {"code": " private void SaveSettings(){\n\t  try {\n   // Save the settings\n   Properties.Settings.Default.AutoCopy = AutoCopy.Checked;\n   Properties.Settings.Default.AutoCopyPause = (int)AutoCopyPause.Value;\n   Properties.Settings.Default.AutoCopyPauseUnit = AutoCopyPauseUnit.SelectedIndex;\n   Properties.Settings.Default.AutoCopyPauseUnit = AutoCopyPauseUnit.SelectedIndex;\n   Properties.Settings.Default.AutoCopyPauseUnit = AutoCopyPauseUnit.SelectedIndex;\n   Properties.Settings.Default.AutoCopyPauseUnit = AutoCopyPauseUnit.SelectedIndex;\n   Properties.Settings.Default.AutoCopyPauseUnit = AutoCopyPauseUnit.SelectedIndex;\n   Properties.Settings.Default.AutoCopyPauseUnit = AutoCopyPauseUnit.SelectedIndex;\n   Properties.Settings.Default.AutoCopyPauseUnit = AutoCopyPauseUnit.SelectedIndex;\n   Properties.Settings.Default.AutoCopyPauseUnit = AutoCopyPauseUnit.SelectedIndex;\n   Properties.Settings.Default.AutoCopyPauseUnit = AutoCopyPauseUnit.SelectedIndex;\n   Properties.Settings.Default.AutoCopyPauseUnit = AutoCopyPauseUnit.SelectedIndex;\n   Properties.Settings.Default.AutoCopyPauseUnit = AutoCopyPauseUnit.SelectedIndex;\n   Properties.Settings.Default.AutoCopyPauseUnit = AutoCopyPauseUnit.SelectedIndex;\n   Properties.Settings.Default.AutoCopyPauseUnit = AutoCopyPauseUnit.SelectedIndex;\n   Properties.Settings.Default.AutoCopyPauseUnit = AutoCopyPauseUnit.SelectedIndex;\n   Properties.Settings.Default.AutoCopyPauseUnit = AutoCopyPauseUnit.SelectedIndex;\n   Properties.Settings.Default.AutoCopyPauseUnit = AutoCopyPauseUnit.SelectedIndex;\n   Properties.Settings.Default.AutoCopyPauseUnit = AutoCopyPauseUnit.SelectedIndex;\n   Properties.Settings.Default.AutoCopyPauseUnit = AutoCopyPauseUnit.SelectedIndex;\n   Properties.Settings.Default.AutoCopyPauseUnit = AutoCopyPauseUnit.SelectedIndex;\n   Properties.Settings.Default.AutoCopyPauseUnit = AutoCopyPauseUnit.SelectedIndex;\n   Properties.", "CodeBleu_score": 20.557935253840657}, {"code": " private void SaveSettings(){\n\t    try {\n      // Save the state of the UI\n      Properties.Settings.Default.AutoCopy = chkAutoCopy.Checked;\n      Properties.Settings.Default.AutoOpen = chkAutoOpen.Checked;\n      Properties.Settings.Default.AutoRun = chkAutoRun.Checked;\n      Properties.Settings.Default.AutoSave = chkAutoSave.Checked;\n      Properties.Settings.Default.AutoSaveAs = chkAutoSaveAs.Checked;\n      Properties.Settings.Default.AutoUpdate = chkAutoUpdate.Checked;\n      Properties.Settings.Default.CommandLogHeight = splitContainer1.Panel2.Height;\n      Properties.Settings.Default.MainFormHeight = this.Height;\n      Properties.Settings.Default.MainFormLeft = this.Left;\n      Properties.Settings.Default.MainFormTop = this.Top;\n      Properties.Settings.Default.MainFormWidth = this.Width;\n      Properties.Settings.Default.NavigationContainerSplitterDistance = splitContainer2.SplitterDistance;\n      Properties.Settings.Default.Save();\n    } catch (Exception ex) {\n      Logger.E(TAG, \"\n\n", "CodeBleu_score": 34.16410366041473}]}
{"instance_id": "597cf3c3cb9f", "generation_result": [{"code": "private List<Tuple<string, bool>> LoadPageTabOrders(){\n\t    if (PageTabOrders != null) return PageTabOrders;\n    PageTabOrders = new List<Tuple<string, bool>>();\n    string[] pageTabs = Properties.Settings.Default.PageTabOrders.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);\n    if (pageTabs.Length == 0) {\n        foreach (var page in Pages) {\n            PageTabOrders.Add(new Tuple<string, bool>(page.Name, true));\n        }\n        return PageTabOrders;\n    }\n    foreach (string tab in pageTabs) {\n        string[] pageTab = tab.Split(new char[] { ':' }, StringSplitOptions.RemoveEmptyEntries);\n        bool isVisible = true;\n        if (pageTab.Length == 2) {\n            if (pageTab[1] == \"0\") isVisible = false;\n        }\n        PageTabOrders.Add(new Tuple<string, bool>(pageTab[0], isVisible));\n    }\n    return PageTabOrders;\n}", "CodeBleu_score": 41.32622603611995}, {"code": "private List<Tuple<string, bool>> LoadPageTabOrders(){\n\t  if (PageTabOrders != null) return PageTabOrders;\n  PageTabOrders = new List<Tuple<string, bool>>();\n  var pageOrders = GetSetting(\"PageTabOrders\", \"\");\n  if (pageOrders == \"\") {\n    foreach (var page in Pages) PageTabOrders.Add(new Tuple<string, bool>(page.Name, true));\n    return PageTabOrders;\n  }\n  var orderList = pageOrders.Split(';');\n  foreach (var order in orderList) {\n    var sp = order.IndexOf(',');\n    var name = sp == -1 ? order : order.Substring(0, sp);\n    var isVisible = sp == -1 || order.Substring(sp + 1) == \"1\";\n    PageTabOrders.Add(new Tuple<string, bool>(name, isVisible));\n  }\n  return PageTabOrders;\n}", "CodeBleu_score": 41.11754768500423}, {"code": "private List<Tuple<string, bool>> LoadPageTabOrders(){\n\t  if (PageTabOrders != null) return PageTabOrders;\n  PageTabOrders = new List<Tuple<string, bool>>();\n  string[] pageTabOrders = Settings.LoadSetting(\"PageTabOrders\", \"\").Split(';');\n  if (pageTabOrders.Length == 0) {\n    foreach (var page in Pages) PageTabOrders.Add(new Tuple<string, bool>(page.Name, true));\n    return PageTabOrders;\n  }\n  foreach (string pageTabOrder in pageTabOrders) {\n    if (string.IsNullOrEmpty(pageTabOrder)) continue;\n    int sp = pageTabOrder.IndexOf(':');\n    string pageName = sp == -1 ? pageTabOrder : pageTabOrder.Substring(0, sp);\n    bool isVisible = sp == -1 ? true : pageTabOrder.Substring(sp + 1) == \"1\";\n    PageTabOrders.Add(new Tuple<string, bool>(pageName, isVisible));\n  }\n  return PageTabOrders;\n}", "CodeBleu_score": 41.29941781663232}]}
{"instance_id": "952af4cba521", "generation_result": [{"code": "public override void Save(FrameInfo info){\n\t    System.Diagnostics.Debug.WriteLine($\"Frame {info.Index} Length: {info.Data.Length}\");\n    System.Diagnostics.Debug.WriteLine($\"File Length: {_compressStream.Length}\");\n    _compressStream.WriteBytes(info.Data);\n    _compressStream.Flush();\n    info.Data = null;\n    Project.Frames.Add(info);\n}", "CodeBleu_score": 59.39957223306198}, {"code": "public override void Save(FrameInfo info){\n\t    Project.Frames.Add(info);\n\n    var frame = info.Path;\n\n    //Log the length of the frame data and the current file stream length.\n    var start = _compressStream.Length;\n    var data = File.ReadAllBytes(frame);\n    var length = data.Length;\n    System.Diagnostics.Debug.WriteLine($\"Frame Data Length: {length} | Stream Length: {_compressStream.Length}\");\n\n    //Write the frame data to the compression stream and flush the stream.\n    _compressStream.WriteBytes(data);\n    _compressStream.Flush();\n\n    //Set the frame data to null.\n    data = null;\n\n    //Log the new stream length.\n    System.Diagnostics.Debug.WriteLine($\"Stream Length: {_compressStream.Length}\");\n}", "CodeBleu_score": 40.657967431813766}, {"code": "public override void Save(FrameInfo info){\n\t    System.Diagnostics.Debug.WriteLine($\"Frame data length: {info.Data.Length}\");\n    System.Diagnostics.Debug.WriteLine($\"File stream length: {_compressStream.Length}\");\n\n    _compressStream.WriteBytes(info.Data);\n    _compressStream.Flush();\n    info.Data = null;\n\n    _project.Frames.Add(info);\n}", "CodeBleu_score": 55.72100743826432}]}
{"instance_id": "f9417f7056c0", "generation_result": [{"code": "private void DrawCursorShape(Texture2D texture, OutputDuplicatePointerShapeInformation info, byte[] buffer, int leftCut, int topCut, int cursorWidth, int cursorHeight){\n\t    Surface surface = texture.QueryInterface<Surface>();\n    surface.Map(AccessType.Write, out DataStream stream);\n    if (info.Type == OutputDuplicatePointerShapeType.Monochrome) {\n        DrawMonochromeCursor(stream, info, buffer, leftCut, topCut, cursorWidth, cursorHeight);\n    } else if (info.Type == OutputDuplicatePointerShapeType.Color) {\n        DrawColorCursor(stream, info, buffer, leftCut, topCut, cursorWidth, cursorHeight);\n    } else if (info.Type == OutputDuplicatePointerShapeType.MaskedColor) {\n        DrawMaskedColorCursor(stream, info, buffer, leftCut, topCut, cursorWidth, cursorHeight);\n    }\n    surface.Unmap();\n}", "CodeBleu_score": 44.927394312366076}, {"code": "private void DrawCursorShape(Texture2D texture, OutputDuplicatePointerShapeInformation info, byte[] buffer, int leftCut, int topCut, int cursorWidth, int cursorHeight){\n\t    Surface surface = texture.QueryInterface<Surface>();\n    surface.Map(Access.CPU, MapFlags.Write);\n    if (info.Type == OutputDuplicatePointerShapeType.Monochrome) {\n        DrawMonochromeCursor(surface, info, buffer, leftCut, topCut, cursorWidth, cursorHeight);\n    }\n    else if (info.Type == OutputDuplicatePointerShapeType.Color) {\n        DrawColorCursor(surface, info, buffer, leftCut, topCut, cursorWidth, cursorHeight);\n    }\n    else if (info.Type == OutputDuplicatePointerShapeType.MaskedColor) {\n        DrawMaskedColorCursor(surface, info, buffer, leftCut, topCut, cursorWidth, cursorHeight);\n    }\n    surface.Unmap();\n}", "CodeBleu_score": 45.235416710427046}, {"code": "private void DrawCursorShape(Texture2D texture, OutputDuplicatePointerShapeInformation info, byte[] buffer, int leftCut, int topCut, int cursorWidth, int cursorHeight){\n\t    Surface surface = texture.QueryInterface<Surface>();\n    surface.Map(AccessType.Write, LockFlags.None);\n\n    if (info.Type == OutputDuplicatePointerShapeType.Monochrome) {\n        DrawMonochromeCursor(surface, info, buffer, leftCut, topCut, cursorWidth, cursorHeight);\n    }\n    else if (info.Type == OutputDuplicatePointerShapeType.Color) {\n        DrawColorCursor(surface, info, buffer, leftCut, topCut, cursorWidth, cursorHeight);\n    }\n    else if (info.Type == OutputDuplicatePointerShapeType.MaskedColor) {\n        DrawMaskedColorCursor(surface, info, buffer, leftCut, topCut, cursorWidth, cursorHeight);\n    }\n\n    surface.Unmap();\n}", "CodeBleu_score": 45.151067006806066}]}
{"instance_id": "3eb27d345e3c", "generation_result": [{"code": "public static IUploader CreateCloud(UploadDestinations service){\n\t    switch (service) {\n        case UploadDestinations.Imgur:\n            return new ImgurUploader();\n        case UploadDestinations.Yandex:\n            return new YandexDiskUploader();\n        default:\n            throw new NotImplementedException();\n    }\n}", "CodeBleu_score": 75.95094417286296}, {"code": "public static IUploader CreateCloud(UploadDestinations service){\n\t    switch (service) {\n        case UploadDestinations.Imgur:\n            return new ImgurUploader();\n        case UploadDestinations.Yandex:\n            return new YandexDiskUploader();\n        default:\n            throw new NotImplementedException();\n    }\n}", "CodeBleu_score": 75.95094417286296}, {"code": "public static IUploader CreateCloud(UploadDestinations service){\n\t\tswitch (service) {\n\t\tcase UploadDestinations.Imgur:\n\t\t\treturn new ImgurUploader();\n\t\tcase UploadDestinations.Yandex:\n\t\t\treturn new YandexDiskUploader();\n\t\tdefault:\n\t\t\tthrow new NotImplementedException();\n\t}\n}", "CodeBleu_score": 72.27642249746378}]}
{"instance_id": "8e8c5ad2d18c", "generation_result": [{"code": "public async Task<IHistory> UploadFileAsync(IUploadPreset preset, string path, CancellationToken cancellationToken, IProgress<double> progressCallback = null)\n    {{\n\t        if (string.IsNullOrEmpty(path))\n        {\n            throw new ArgumentException(\"File path cannot be empty.\", nameof(path));\n        }\n\n        if (!File.Exists(path))\n        {\n            throw new FileNotFoundException(\"File not found.\", path);\n        }\n\n        var uploadLink = await _uploadLinks.GetAsync<Link>(preset, cancellationToken).ConfigureAwait(false);\n\n        if (string.IsNullOrEmpty(uploadLink.Href))\n        {\n            throw new UploadException(\"Upload link is invalid.\");\n        }\n\n        using var fileStream = File.OpenRead(path);\n        await _uploader.PutAsync(uploadLink.Href, fileStream, cancellationToken, progressCallback).ConfigureAwait(false);\n\n        var downloadLink = await _downloadLinks.GetAsync<Link>(Path.GetFileName(path), cancellationToken).ConfigureAwait(false);\n\n        if (string.IsNullOrEmpty(downloadLink.Href))\n        {\n            throw new UploadException(\"Download link is invalid.\");\n        }\n\n        var historyRecord = new HistoryRecord\n        {\n            Name = Path.GetFileName(path),\n            Path = downloadLink.Href,\n            Size = fileStream.Length,\n            Type = \"file\",\n            Upload = true\n        };\n\n        return await _history.AddAsync(historyRecord, cancellationToken).ConfigureAwait(false);\n    }", "CodeBleu_score": 53.54373763203741}, {"code": "public async Task<IHistory> UploadFileAsync(IUploadPreset preset, string path, CancellationToken cancellationToken, IProgress<double> progressCallback = null)\n    {{\n\t        if (string.IsNullOrEmpty(path))\n            throw new ArgumentException(\"The provided file path is invalid.\");\n        if (!File.Exists(path))\n            throw new ArgumentException(\"The provided file path does not exist.\");\n\n        var fileInfo = new FileInfo(path);\n        var fileName = fileInfo.Name;\n        var fileSize = fileInfo.Length;\n        var uploadLink = await _diskHttpApi.GetUploadLinkAsync(preset, cancellationToken).ConfigureAwait(false);\n        if (string.IsNullOrEmpty(uploadLink))\n            throw new UploadException(\"The upload link is invalid.\");\n        var uploadLinkUri = new Uri(uploadLink);\n\n        using var fileStream = File.OpenRead(path);\n        await _diskHttpApi.PutAsync(uploadLinkUri, fileStream, cancellationToken, progressCallback).ConfigureAwait(false);\n\n        var downloadLink = await _diskHttpApi.GetDownloadLinkAsync(uploadLinkUri, cancellationToken).ConfigureAwait(false);\n        if (string.IsNullOrEmpty(downloadLink))\n            throw new UploadException(\"The download link is invalid.\");\n\n        var historyRecord = new HistoryRecord(uploadLinkUri, downloadLink, fileName, fileSize);\n        await _historyRepository.AddAsync(historyRecord, cancellationToken).ConfigureAwait(false);\n        return historyRecord;\n    }", "CodeBleu_score": 52.125689949778554}, {"code": "public async Task<IHistory> UploadFileAsync(IUploadPreset preset, string path, CancellationToken cancellationToken, IProgress<double> progressCallback = null)\n    {{\n\t        if (string.IsNullOrEmpty(path))\n            throw new ArgumentException(\"Path must not be null or empty\", nameof(path));\n        if (!File.Exists(path))\n            throw new FileNotFoundException(\"File not found\", path);\n        var link = await GetUploadLinkAsync(preset, cancellationToken).ConfigureAwait(false);\n        if (link == null)\n            throw new UploadException(\"Unable to retrieve upload link\");\n        var fileName = Path.GetFileName(path);\n        using (var fileStream = File.OpenRead(path))\n        {\n            var response = await PutAsync(link.Href, fileStream, fileName, cancellationToken, progressCallback).ConfigureAwait(false);\n            if (response.StatusCode != HttpStatusCode.Created)\n                throw new UploadException(\"Unable to upload file\");\n        }\n        var downloadLink = await GetDownloadLinkAsync(link.Href, cancellationToken).ConfigureAwait(false);\n        if (downloadLink == null)\n            throw new UploadException(\"Unable to retrieve download link\");\n        var history = new History\n        {\n            Name = fileName,\n            Path = downloadLink.Href,\n            Type = HistoryType.Upload\n        };\n        await AddHistoryRecordAsync(history, cancellationToken).ConfigureAwait(false);\n        return history;\n    }", "CodeBleu_score": 54.535674013046886}]}
{"instance_id": "0c0b742bf9e6", "generation_result": [{"code": "internal virtual void StartCapture(){\n\t    FrameRate.Start();\n    GetCaptureInterval();\n    HasImpreciseCapture = false;\n    if (UserSettings.All.EnableGarbageCollection)\n        GarbageTimer.Start();\n\n    UserSettings.Lock();\n\n    _captureTaskCancellationTokenSource = new CancellationTokenSource();\n\n    PrepareCaptureLoop();\n}", "CodeBleu_score": 51.52932038845661}, {"code": "internal virtual void StartCapture(){\n\t    //Start the frame rate with either a fixed or variable delay\n    if (UserSettings.All.UseFixedFrameRate) {\n        FrameRate.Start(UserSettings.All.FixedFrameRate);\n        GetFixedDelay();\n    } else {\n        FrameRate.Start();\n        GetCaptureInterval();\n    }\n\n    HasFixedDelay = UserSettings.All.UseFixedFrameRate;\n\n    //If forced garbage collection is enabled, start the garbage collection timer\n    if (UserSettings.All.AutomaticCleanUp)\n        GarbageTimer.Start();\n\n    //Lock the user settings\n    UserSettings.Lock();\n\n    //Create a cancellation token for the capture process\n    CancellationTokenSource = new CancellationTokenSource();\n\n    //Run the capture loop in a new task using the specified capture interval\n    Task.Run(PrepareCaptureLoop, CancellationTokenSource.Token);\n}", "CodeBleu_score": 46.53781689024354}, {"code": "internal virtual void StartCapture(){\n\t    // Start the frame rate with either a fixed or variable delay\n    if (HasFixedDelay)\n        FrameRate.Start(GetFixedDelay());\n    else\n        FrameRate.Start(GetCaptureInterval());\n\n    // Set HasImpreciseCapture to false\n    HasImpreciseCapture = false;\n\n    // If forced garbage collection is enabled in the user settings, start the garbage collection timer\n    if (UserSettings.All.AutomaticCleanUp)\n        GarbageTimer.Start();\n\n    // Lock the user settings\n    UserSettings.Lock();\n\n    // Create a cancellation token for the capture process\n    _captureTaskCancellationTokenSource = new CancellationTokenSource();\n\n    // Run the capture loop in a new task using the specified capture interval\n    PrepareCaptureLoop();\n}", "CodeBleu_score": 56.15643997530552}]}
{"instance_id": "8f8be335465f", "generation_result": [{"code": "private void CaptureWithCursor(int interval){\n\t    var token = _captureTokenSource.Token;\n    var sw = new Stopwatch();\n\n    while (!token.IsCancellationRequested) {\n        sw.Restart();\n        var frame = new Frame();\n        frame.Cursor = new Cursor(Cursor.Position.X, Cursor.Position.Y);\n        KeyList.Clear();\n        Dispatcher.Invoke(() => Capture.Capture(frame));\n        FrameCount++;\n        if (sw.ElapsedMilliseconds < interval) Thread.Sleep(1);\n        sw.Stop();\n    }\n}", "CodeBleu_score": 52.99665873244746}, {"code": "private void CaptureWithCursor(int interval){\n\t    var token = _cts.Token;\n    var sw = new Stopwatch();\n    sw.Start();\n    while (!token.IsCancellationRequested) {\n        sw.Restart();\n        var frame = new Frame();\n        frame.Cursor = Cursor.Current;\n        KeyList.Clear();\n        Dispatcher.Invoke(() => {\n            frame.Image = CaptureScreen();\n            frame.KeyList = KeyList;\n            frame.FrameNumber = FrameNumber++;\n        });\n        _frameQueue.Enqueue(frame);\n        if (sw.ElapsedMilliseconds < interval)\n            Thread.Sleep(1);\n        sw.Stop();\n    }\n    sw.Stop();\n}", "CodeBleu_score": 52.81270369086572}, {"code": "private void CaptureWithCursor(int interval){\n\t\tsw.Restart();\n\twhile (!token.IsCancellationRequested) {\n\t\tsw.Restart();\n\t\tvar frame = new Frame(Cursor.Position.X, Cursor.Position.Y);\n\t\tKeyList.Clear();\n\t\tDispatcher.Invoke(() => {\n\t\t\tCapture(frame);\n\t\t\tFrameCount++;\n\t\t});\n\t\twhile (sw.ElapsedMilliseconds < interval)\n\t\t\tThread.Sleep(1);\n\t}\n\tsw.Stop();\n}", "CodeBleu_score": 45.91457617054416}]}
{"instance_id": "8ad9c7b2a317", "generation_result": [{"code": "protected override Size ArrangeOverride(Size arrangeSize){\n\t    if (UsingBorderImplementation) {\n        return base.ArrangeOverride(arrangeSize);\n    }\n    UIElement child = Child;\n    if (child != null) {\n        double x = Padding.Left;\n        double y = Padding.Top;\n        double width = Math.Max(0.0, arrangeSize.Width - Padding.Left - Padding.Right);\n        double height = Math.Max(0.0, arrangeSize.Height - Padding.Top - Padding.Bottom);\n        child.Arrange(new Rect(x, y, width, height));\n    }\n    return arrangeSize;\n}", "CodeBleu_score": 53.26250374241628}, {"code": "protected override Size ArrangeOverride(Size arrangeSize){\n\t    if (UsingBorderImplementation) {\n        return base.ArrangeOverride(arrangeSize);\n    }\n\n    UIElement child = this.Child;\n    if (child != null) {\n        double x = 0.0;\n        double y = 0.0;\n        double width = arrangeSize.Width;\n        double height = arrangeSize.Height;\n\n        if (Padding != null) {\n            var padding = Padding;\n            x = padding.Left;\n            y = padding.Top;\n            width = Math.Max(0.0, width - padding.Left - padding.Right);\n            height = Math.Max(0.0, height - padding.Top - padding.Bottom);\n        }\n\n        child.Arrange(new Rect(x, y, width, height));\n    }\n\n    return arrangeSize;\n}", "CodeBleu_score": 54.864768806012684}, {"code": "protected override Size ArrangeOverride(Size arrangeSize){\n\t    if (UsingBorderImplementation) {\n        return base.ArrangeOverride(arrangeSize);\n    }\n\n    UIElement child = this.Child;\n\n    if (child != null) {\n        // Get the padding\n        Thickness padding = this.Padding;\n        // If the padding is 0, default to a 4-pixel padding\n        if (padding.Equals(new Thickness())) {\n            padding = new Thickness(4);\n        }\n\n        // Calculate the width and height available to the child\n        double width = Math.Max(0, arrangeSize.Width - padding.Left - padding.Right);\n        double height = Math.Max(0, arrangeSize.Height - padding.Top - padding.Bottom);\n\n        // Arrange the child\n        child.Arrange(new Rect(padding.Left, padding.Top, width, height));\n    }\n\n    return arrangeSize;\n}", "CodeBleu_score": 61.75980442044748}]}
{"instance_id": "719b23bc4229", "generation_result": [{"code": "protected override void OnLostFocus(RoutedEventArgs e){\n\t    base.OnLostFocus(e);\n    if (!UpdateOnInput) {\n        if (string.IsNullOrEmpty(Text) || !IsTextAllowed(Text)) {\n            Value = DefaultValue;\n            return;\n        }\n        IgnoreTextChanges = true;\n        Text = Convert.ToDecimal(Text).ToString(FormatString, FormatProvider);\n        IgnoreTextChanges = false;\n    } else {\n        Text = Value.ToString(FormatString, FormatProvider);\n    }\n}", "CodeBleu_score": 44.41678414322505}, {"code": "protected override void OnLostFocus(RoutedEventArgs e){\n\t    base.OnLostFocus(e);\n    if (!UpdateOnInput) {\n        if (string.IsNullOrEmpty(Text) || !IsTextAllowed(Text)) {\n            Value = DefaultValue;\n            return;\n        }\n        IgnoreTextChanges = true;\n        Value = Convert.ToDecimal(Text);\n        UpdateTextFormat();\n        IgnoreTextChanges = false;\n    } else {\n        UpdateTextFormat();\n    }\n}", "CodeBleu_score": 40.045753917645165}, {"code": "protected override void OnLostFocus(RoutedEventArgs e){\n\t    base.OnLostFocus(e);\n    if (!UpdateOnInput) {\n        if (string.IsNullOrEmpty(Text) || !IsTextAllowed(Text)) {\n            Value = DefaultValue;\n            return;\n        }\n        IgnoreChanges = true;\n        Value = Convert.ToDecimal(Text);\n        UpdateText();\n        IgnoreChanges = false;\n    } else {\n        UpdateText();\n    }\n}", "CodeBleu_score": 39.219176373690395}]}
{"instance_id": "4bdfdcf8e5ea", "generation_result": [{"code": "protected override void OnKeyDown(KeyEventArgs e){\n\t    if (e.Key == Key.Enter || e.Key == Key.Return) {\n        e.Handled = true;\n        MoveFocus();\n    }\n    base.OnKeyDown(e);\n}", "CodeBleu_score": 63.36072310349628}, {"code": "protected override void OnKeyDown(KeyEventArgs e){\n\t    if (e.Key == Key.Enter || e.Key == Key.Return) {\n        e.Handled = true;\n        MoveFocus();\n    }\n    base.OnKeyDown(e);\n}", "CodeBleu_score": 63.36072310349628}, {"code": "protected override void OnKeyDown(KeyEventArgs e){\n\t    if (e.Key == Key.Enter || e.Key == Key.Return) {\n        e.Handled = true;\n        MoveFocus();\n    }\n\n    base.OnKeyDown(e);\n}", "CodeBleu_score": 63.36072310349628}]}
{"instance_id": "e9d822d22392", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    if (this.Capture && this.MouseButtons == MouseButtons.Left) {\n        if (this.selectionMode) {\n            if (this.selectedShapes.Count == 0 || (Control.ModifierKeys & Keys.Control) != 0) {\n                this.selectionRectangle.X = Math.Min(this.selectionStartPoint.X, e.X);\n                this.selectionRectangle.Y = Math.Min(this.selectionStartPoint.Y, e.Y);\n                this.selectionRectangle.Width = Math.Abs(e.X - this.selectionStartPoint.X);\n                this.selectionRectangle.Height = Math.Abs(e.Y - this.selectionStartPoint.Y);\n                this.Invalidate();\n            }\n        }\n        else {\n            this.renderRegion.X = Math.Min(this.drawingStartPoint.X, e.X);\n            this.renderRegion.Y = Math.Min(this.drawingStartPoint.Y, e.Y);\n            this.renderRegion.Width = Math.Abs(e.X - this.drawingStartPoint.X);\n            this.renderRegion.Height = Math.Abs(e.Y - this.drawingStartPoint.Y);\n            this.orientation = this.CalculateOrientation();\n            this.RenderShape();\n        }\n    }\n    base.OnMouseMove(e);\n}", "CodeBleu_score": 35.85299799378753}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    if (this.Capture && this.MouseDown) {\n        if (this.SelectedShapes.Count == 0 || this.ControlKeyPressed) {\n            this.SelectionRectangle = Rect.FromLTRB(Math.Min(this.MouseDownPoint.X, e.X), Math.Min(this.MouseDownPoint.Y, e.Y), Math.Max(this.MouseDownPoint.X, e.X), Math.Max(this.MouseDownPoint.Y, e.Y));\n            this.Invalidate();\n        } else {\n            this.RenderRegion = Rect.FromLTRB(Math.Min(this.MouseDownPoint.X, e.X), Math.Min(this.MouseDownPoint.Y, e.Y), Math.Max(this.MouseDownPoint.X, e.X), Math.Max(this.MouseDownPoint.Y, e.Y));\n            this.Orientation = this.CalculateOrientation();\n            this.RenderShape();\n        }\n    }\n    base.OnMouseMove(e);\n}", "CodeBleu_score": 39.027079822080616}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    if (this.Capture && this.LeftButtonDown) {\n        if (this.SelectionMode && (this.SelectedShapes.Count == 0 || Control.ModifierKeys == Keys.Control)) {\n            this.SelectionRect = this.GetBoundedCoordinates(e.X, e.Y);\n        } else {\n            this.RenderRegion = this.GetBoundedCoordinates(e.X, e.Y);\n            this.Orientation = this.CalculateOrientation(e.X, e.Y);\n            this.RenderShape();\n        }\n    }\n    base.OnMouseMove(e);\n}", "CodeBleu_score": 24.423360811245225}]}
{"instance_id": "b853f670928a", "generation_result": [{"code": "private void HandleBottomRight(object sender, DragDeltaEventArgs e){\n\t    if (sender is Thumb) {\n        e.Handled = true;\n        var thumb = (Thumb)sender;\n        var parent = (FrameworkElement)thumb.Parent;\n        var canvas = (Canvas)parent.Parent;\n        var adorned = (FrameworkElement)canvas.Children[0];\n        var width = Math.Max(adorned.Width + e.HorizontalChange, 10);\n        var height = Math.Max(adorned.Height + e.VerticalChange, 10);\n        width = Math.Min(width, parent.Width - adorned.Margin.Left);\n        height = Math.Min(height, parent.Height - adorned.Margin.Top);\n        var left = Canvas.GetLeft(adorned);\n        var top = Canvas.GetTop(adorned);\n        adorned.Width = width;\n        adorned.Height = height;\n        RaiseManipulatedEvent(left, top, width, height);\n        AfterManipulation();\n    }\n}", "CodeBleu_score": 49.80544241740214}, {"code": "private void HandleBottomRight(object sender, DragDeltaEventArgs e){\n\t    if (sender is Thumb) {\n        e.Handled = true;\n        double deltaVertical, deltaHorizontal;\n        deltaVertical = e.VerticalChange;\n        deltaHorizontal = e.HorizontalChange;\n        double width = Math.Max(this.element.DesiredSize.Width + deltaHorizontal, 10);\n        double height = Math.Max(this.element.DesiredSize.Height + deltaVertical, 10);\n        double maxWidth = Canvas.GetLeft(this.element) + width;\n        double maxHeight = Canvas.GetTop(this.element) + height;\n        if (maxWidth > this.parent.ActualWidth) {\n            width = this.parent.ActualWidth - Canvas.GetLeft(this.element);\n        }\n        if (maxHeight > this.parent.ActualHeight) {\n            height = this.parent.ActualHeight - Canvas.GetTop(this.element);\n        }\n        this.element.Width = width;\n        this.element.Height = height;\n        this.RaiseManipulatedEvent(width, height);\n        this.AfterManipulation();\n    }\n}", "CodeBleu_score": 37.107001737300024}, {"code": "private void HandleBottomRight(object sender, DragDeltaEventArgs e){\n\t    if (sender is Thumb) {\n        e.Handled = true;\n        double newWidth = Math.Max(10, AdornedElement.DesiredSize.Width + e.HorizontalChange);\n        double newHeight = Math.Max(10, AdornedElement.DesiredSize.Height + e.VerticalChange);\n        double parentWidth = Canvas.GetLeft(AdornedElement) + newWidth;\n        double parentHeight = Canvas.GetTop(AdornedElement) + newHeight;\n        if (parentWidth > ParentDesiredWidth) {\n            newWidth = ParentDesiredWidth - Canvas.GetLeft(AdornedElement);\n        }\n        if (parentHeight > ParentDesiredHeight) {\n            newHeight = ParentDesiredHeight - Canvas.GetTop(AdornedElement);\n        }\n        RaiseManipulatedEvent(newWidth, newHeight);\n        AfterManipulation();\n    }\n}", "CodeBleu_score": 43.399553678407926}]}
{"instance_id": "4f79040b5f53", "generation_result": [{"code": "public ComboBoxesViewModel(){\n\t  // Create a list of integers ranging from 0 to 999\n  Integers = Enumerable.Range(0, 1000).ToList();\n\n  // Create a short list of string items\n  Strings = new List<string> { \"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\", \"Item 5\", \"Item 6\", \"Item 7\", \"Item 8\", \"Item 9\", \"Item 10\" };\n\n  // Set the selected value from the integer list\n  SelectedValue = Integers[0];\n\n  // Initialize the selected text to null\n  SelectedText = null;\n\n  // Create a long list of random string values by generating random file names in a loop running 1000 times\n  LongStrings = new List<string>();\n  for (int i = 0; i < 1000; i++) {\n    LongStrings.Add(Path.GetRandomFileName());\n  }\n}", "CodeBleu_score": 62.693342237370466}, {"code": "public ComboBoxesViewModel(){\n\t    // Create a list of integers ranging from 0 to 999.\n    this.IntegerList = Enumerable.Range(0, 1000).ToList();\n\n    // Create a short list of string items.\n    this.StringList = new List<string>() { \"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\", \"Item 5\" };\n\n    // Set the selected value from the integer list and initialize the selected text to null.\n    this.SelectedValue = this.IntegerList[0];\n    this.SelectedText = null;\n\n    // Create a long list of random string values by generating random file names in a loop running 1000 times.\n    this.LongStringList = new List<string>();\n    for (int i = 0; i < 1000; i++) {\n        this.LongStringList.Add(Path.GetRandomFileName());\n    }\n}", "CodeBleu_score": 56.69616799681684}, {"code": "public ComboBoxesViewModel(){\n\t    IntegerList = Enumerable.Range(0, 1000).ToList();\n    LongIntegerList = Enumerable.Range(0, 1000).ToList();\n    StringList = LongStringList.Take(10).ToList();\n    LongStringList = LongStringList.Skip(2).ToList();\n    SelectedValue = IntegerList.First();\n    SelectedText = null;\n    Random random = new Random();\n    for (int i = 0; i < 1000; i++) {\n        LongStringList.Add(Path.GetRandomFileName());\n    }\n}", "CodeBleu_score": 54.167713388116944}]}
{"instance_id": "ca40ae89e1a2", "generation_result": [{"code": "private async Task RunDialog() {\n\t    var dialog = new SampleDialog();\n    dialog.DataContext = new SampleDialogViewModel();\n\n    await DialogHost.Show(dialog, \"RootDialog\", ClosingEventHandler, ClosedEventHandler);\n\n    Debug.WriteLine($\"Dialog closed with result: {dialog.DataContext}\");\n}", "CodeBleu_score": 24.337417640910992}, {"code": "private async Task RunDialog() {\n\t    // Create the dialog content\n    var sampleDialog = new SampleDialog();\n\n    // Create the dialog view model\n    var viewModel = new SampleDialogViewModel();\n\n    // Assign the view model to the dialog's data context\n    sampleDialog.DataContext = viewModel;\n\n    // Show the dialog\n    var result = await DialogHost.Show(\n        sampleDialog,\n        \"RootDialog\",\n        ClosingEventHandler,\n        ClosedEventHandler);\n\n    // Log the result\n    Debug.WriteLine($\"Dialog result: {result}\");\n}", "CodeBleu_score": 26.504740532231573}, {"code": "private async Task RunDialog() {\n\t    // Create the dialog\n    var dialog = new SampleDialog();\n    // Assign the view model\n    dialog.DataContext = new SampleDialogViewModel();\n    // Show the dialog\n    var result = await DialogHost.Show(dialog, \"RootDialog\", ClosingEventHandler, ClosedEventHandler);\n    // Log the result\n    Debug.WriteLine($\"Dialog closed with result: {result}\");\n}", "CodeBleu_score": 25.65091937333929}]}
{"instance_id": "d82f32ed6e43", "generation_result": [{"code": "private static void ModifyTheme(Action<Theme> modificationAction){\n\t    PaletteHelper paletteHelper = new PaletteHelper();\n    Theme theme = paletteHelper.GetTheme();\n    modificationAction?.Invoke(theme);\n    paletteHelper.SetTheme(theme);\n}", "CodeBleu_score": 75.05701436093433}, {"code": "private static void ModifyTheme(Action<Theme> modificationAction){\n\t    var paletteHelper = new PaletteHelper();\n    var theme = paletteHelper.GetTheme();\n    modificationAction?.Invoke(theme);\n    paletteHelper.SetTheme(theme);\n}", "CodeBleu_score": 75.80807886702394}, {"code": "private static void ModifyTheme(Action<Theme> modificationAction){\n\t\tvar paletteHelper = new PaletteHelper();\n\tvar theme = paletteHelper.GetTheme();\n\tmodificationAction?.Invoke(theme);\n\tpaletteHelper.SetTheme(theme);\n}", "CodeBleu_score": 72.861664522851}]}
{"instance_id": "8cf8182d763e", "generation_result": [{"code": "private object? CreateContent(){\n\t    var content = Activator.CreateInstance(ContentType);\n\n    if (content is FrameworkElement element && DataContext != null) {\n        element.DataContext = DataContext;\n    }\n\n    return content;\n}", "CodeBleu_score": 53.446823702876635}, {"code": "private object? CreateContent(){\n\t    object? content = Activator.CreateInstance(ContentType);\n\n    if (DataContext != null && content is FrameworkElement element) {\n        element.DataContext = DataContext;\n    }\n\n    return content;\n}", "CodeBleu_score": 79.49078106481531}, {"code": "private object? CreateContent(){\n\t    // Create an instance of the content type\n    object? content = Activator.CreateInstance(this.ContentType);\n\n    // If the content is a FrameworkElement, set its DataContext\n    if (content is FrameworkElement element) {\n        element.DataContext = this.DataContext;\n    }\n\n    return content;\n}", "CodeBleu_score": 46.00698061483198}]}
{"instance_id": "96cb26c3eacc", "generation_result": [{"code": "private void AcceptSample4Dialog(object? _){\n\t    Sample4Content = new SampleProgressDialog();\n    Task.Delay(TimeSpan.FromSeconds(3))\n        .ContinueWith(t => IsSample4DialogOpen = false, TaskScheduler.FromCurrentSynchronizationContext());\n}", "CodeBleu_score": 56.13558761943759}, {"code": "private void AcceptSample4Dialog(object? _){\n\t    Sample4Content = new SampleProgressDialog();\n    Task.Delay(TimeSpan.FromSeconds(3))\n        .ContinueWith(\n            _ => {\n                IsSample4DialogOpen = false;\n            },\n            TaskScheduler.FromCurrentSynchronizationContext());\n}", "CodeBleu_score": 51.498065374295244}, {"code": "private void AcceptSample4Dialog(object? _){\n\t    Sample4Content = new SampleProgressDialog();\n    Task.Delay(TimeSpan.FromSeconds(3))\n        .ContinueWith(\n            (t) => {\n                IsSample4DialogOpen = false;\n            },\n            TaskScheduler.FromCurrentSynchronizationContext()\n        );\n}", "CodeBleu_score": 51.47019261481256}]}
{"instance_id": "7afa49e4a449", "generation_result": [{"code": "private void OnDeviceAddOrRemove(IAudioDevice device, AudioDeviceEventKind option){\n\t\tforeach (var trigger in _deviceTriggers) {\n\t\tif (trigger.Option == option) {\n\t\t\tif (trigger.DeviceID == device.ID) {\n\t\t\t\ttrigger.Triggered?.Invoke();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 61.61663072541403}, {"code": "private void OnDeviceAddOrRemove(IAudioDevice device, AudioDeviceEventKind option){\n\t    foreach (var trigger in _deviceTriggers) {\n        if (trigger.Option == option) {\n            if (trigger.DeviceID == device.ID) {\n                trigger.Triggered?.Invoke(trigger);\n            }\n        }\n    }\n}", "CodeBleu_score": 72.1785186193865}, {"code": "private void OnDeviceAddOrRemove(IAudioDevice device, AudioDeviceEventKind option){\n\t\tforeach (AudioDeviceTrigger trigger in _deviceTriggers) {\n\t\tif (trigger.Option == option) {\n\t\t\tif (trigger.DeviceID == device.ID) {\n\t\t\t\ttrigger.Triggered?.Invoke();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 57.72166836462071}]}
{"instance_id": "50c38fc69dac", "generation_result": [{"code": "private void LoadAndRegister(){\n\t    _triggerManager.Clear();\n    _actions = Settings.Get<List<Action>>(_settingsKey);\n    _actions.SelectMany(a => a.Triggers).ToList().ForEach(t => _triggerManager.Register(t));\n}", "CodeBleu_score": 71.61569839941289}, {"code": "private void LoadAndRegister(){\n\t\t_triggerManager.Clear();\n\tvar actions = Settings.Get<List<Action>>(_actionsKey);\n\tactions.SelectMany(a => a.Triggers).ToList().ForEach(t => _triggerManager.Register(t));\n}", "CodeBleu_score": 45.36226808440158}, {"code": "private void LoadAndRegister(){\n\t    _triggerManager.Clear();\n    _actions = Settings.Get<List<Action>>(_actionsKey);\n    _actions.SelectMany(a => a.Triggers).ToList().ForEach(t => _triggerManager.Register(t));\n}", "CodeBleu_score": 71.79231083586302}]}
{"instance_id": "ab8051e72909", "generation_result": [{"code": "private void OnTriggered(BaseTrigger trigger){\n\t\tvar action = Actions.FirstOrDefault(a => a.Triggers.Contains(trigger) && a.Conditions.All(ConditionProcessor.IsMet));\n\tif (action != null) TriggerAction(action);\n}", "CodeBleu_score": 39.71038525352558}, {"code": "private void OnTriggered(BaseTrigger trigger){\n\t\tvar action = Actions.FirstOrDefault(a => a.Triggers.Contains(trigger) && a.Conditions.All(ConditionProcessor.IsMet));\n\tif (action != null) {\n\t\tTriggerAction(action);\n\t}\n}", "CodeBleu_score": 43.022265337977416}, {"code": "private void OnTriggered(BaseTrigger trigger){\n\t\tAction action = Actions.FirstOrDefault(a => a.Triggers.Contains(trigger));\n\tif (action != null && action.Conditions.All(c => ConditionProcessor.IsMet(c)))\n\t\tTriggerAction(action);\n}", "CodeBleu_score": 56.86482092999595}]}
{"instance_id": "2f85d28001cf", "generation_result": [{"code": "fn apply_run_while_expressions_mentioning(&mut self, name: &VarName){\n\t    let mentioning_vars = self.scope_graph.borrow().get_variables_mentioning(name);\n    for v in mentioning_vars.iter().filter_map(|v| {\n        if let Variable::Script(v) = v {\n            Some(v.clone())\n        } else {\n            None\n        }\n    }) {\n        if let Some(poll_var) = self.eww_config.get_script_var(&v.name) {\n            if let Ok(true) = self\n                .scope_graph\n                .borrow()\n                .evaluate_simplexpr_in_scope(self.scope_graph.root_index, &poll_var.run_while_expr)\n                .map(|v| v.as_bool())\n            {\n                self.script_var_handler.add(poll_var.clone());\n            } else {\n                self.script_var_handler.stop_for_variable(&v.name);\n            }\n        } else {\n            error_handling_ctx::print_error(format!(\n                \"Variable {} is not defined, but is mentioned in run-while expression of variable {}\",\n                v.name, name\n            ));\n        }\n    }\n}", "CodeBleu_score": 44.12127501967856}, {"code": "fn apply_run_while_expressions_mentioning(&mut self, name: &VarName){\n\t    let mut mentioning_vars = self.scope_graph.borrow().get_vars_mentioning(name);\n    mentioning_vars.iter().filter_map(|v| {\n        if let Var::Script(var) = v {\n            Some(var)\n        } else {\n            None\n        }\n    }).for_each(|v| {\n        if let Some(poll_var) = self.eww_config.get_script_var(v.name()) {\n            if self.scope_graph.borrow().evaluate_simplexpr_in_scope(self.scope_graph.root_index, &poll_var.run_while_expr).map(|v| v.as_bool()).unwrap_or(false) {\n                self.script_var_handler.add(poll_var.clone());\n            } else {\n                self.script_var_handler.stop_for_variable(v.name());\n            }\n        } else {\n            error_handling_ctx::print_error(format!(\"The variable {} is not a script variable\", v.name()));\n        }\n    });\n}", "CodeBleu_score": 44.691872169395744}, {"code": "fn apply_run_while_expressions_mentioning(&mut self, name: &VarName){\n\t    let mentioning_vars = self.scope_graph.borrow().get_mentioning_vars(name);\n    for v in mentioning_vars.iter().filter_map(|v| {\n        if let ScopeGraphVariable::Script(poll_var) = v {\n            self.eww_config\n                .get_script_var(poll_var.name.clone())\n                .ok()\n        } else {\n            None\n        }\n    }) {\n        if let Ok(true) = self\n            .scope_graph\n            .borrow()\n            .evaluate_simplexpr_in_scope(\n                self.scope_graph.borrow().root_index,\n                &v.run_while_expr,\n            )\n            .map(|v| v.as_bool())\n        {\n            self.script_var_handler.add(v);\n        } else {\n            self.script_var_handler.stop_for_variable(v.name.clone());\n        }\n    }\n}", "CodeBleu_score": 35.818138365515125}]}
{"instance_id": "56f67ae91214", "generation_result": [{"code": "fn close_window(&mut self, instance_id: &str) -> Result<()> {\n\t    let mut unused_var: Vec<String> = Vec::new();\n    let mut abort_send = self.window_close_timer_abort_senders.remove(instance_id);\n    if let Some(abort_send) = abort_send {\n        abort_send.send(()).unwrap();\n    }\n    let mut eww_window = self.open_windows.remove(instance_id);\n    if let Some(mut eww_window) = eww_window {\n        eww_window.close();\n    }\n    self.scope_graph.borrow_mut().remove_scope(instance_id);\n    self.scope_graph.borrow().currently_unused_globals(instance_id, &mut unused_var);\n    for var in unused_var {\n        self.scope_graph.borrow_mut().stop_for_variable(&var);\n    }\n    self.instance_id_to_args.remove(instance_id);\n    Ok(())\n}", "CodeBleu_score": 60.0656270828611}, {"code": "fn close_window(&mut self, instance_id: &str) -> Result<()> {\n\t    self.open_windows.remove(instance_id).with_context(|| format!(\"Could not find open window with instance ID '{}'\", instance_id))?;\n    self.window_close_timer_abort_senders.remove(instance_id).unwrap().send(()).unwrap();\n    let mut eww_window = self.instance_id_to_window.remove(instance_id).unwrap();\n    eww_window.close();\n    self.scope_graph.borrow_mut().remove_scope(instance_id);\n    self.script_var_handler.stop_for_variable(instance_id);\n    self.scope_graph.borrow().currently_unused_globals.iter().for_each(|unused_var| {\n        let old_abort_send = self.unused_var_close_timer_abort_senders.remove(unused_var).unwrap();\n        old_abort_send.send(()).unwrap();\n    });\n    self.instance_id_to_args.remove(instance_id);\n    Ok(())\n}", "CodeBleu_score": 60.06686834532475}, {"code": "fn close_window(&mut self, instance_id: &str) -> Result<()> {\n\t    self.window_close_timer_abort_senders.remove(instance_id);\n    let eww_window = self.open_windows.remove(instance_id).with_context(|| format!(\"Could not find window with instance ID {}\", instance_id))?;\n    eww_window.close();\n    self.scope_graph.borrow_mut().remove_scope(instance_id);\n    self.scope_graph.borrow().currently_unused_globals().into_iter().for_each(|unused_var| {\n        let old_abort_send = self.scope_graph.borrow_mut().remove_variable(unused_var.clone());\n        old_abort_send.send(());\n    });\n    self.instance_id_to_args.remove(instance_id);\n    Ok(())\n}", "CodeBleu_score": 58.3551220897222}]}
{"instance_id": "a496c83ce944", "generation_result": [{"code": "pub fn load_config(&mut self, config: config::EwwConfig) -> Result<()>{\n\t    info!(\"Reloading configuration\");\n    self.script_var_handler.stop_all();\n    let old_handler = std::mem::replace(&mut self.script_var_handler, script_var_handler::ScriptVarHandler::new(\n        self.app_evt_send.clone(),\n        self.definition_dir.clone(),\n        self.executor.clone(),\n    ));\n    old_handler.join_thread()?;\n    info!(\"New configuration: {:#?}\", config);\n    self.eww_config = config;\n    self.scope_graph.borrow_mut().clear();\n    self.scope_graph.borrow_mut().update_from_config(&self.eww_config);\n    let mut old_windows = self.open_windows.keys().cloned().chain(self.failed_windows.iter().cloned()).dedup().collect::<Vec<_>>();\n    let mut new_windows = self.eww_config.generate_initial_state();\n    let mut new_windows = new_windows.drain().map(|(k, v)| (k, v.into_iter().collect())).collect::<HashMap<_, _>>();\n    for id in old_windows.drain(..) {\n        if let Some(window_arguments) = self.instance_id_to_args.get(&id).with_context(|| format!(\"Failed to find window with id {}\", id))? {\n            self.open_window(id, window_arguments.clone());\n            new_windows.remove(&id);\n        }\n    }\n    for (id, window_arguments) in new_windows.into_iter() {\n        self.open_window(id, window_arguments);\n    }\n    Ok(())\n}", "CodeBleu_score": 62.60388936376988}, {"code": "pub fn load_config(&mut self, config: config::EwwConfig) -> Result<()>{\n\t    self.log_action(|| \"Reloading config\");\n    self.script_var_handler.stop_all();\n    let old_handler = std::mem::replace(&mut self.script_var_handler, script_var_handler::ScriptVarHandler::new(config.generate_initial_state(), self.log_action.clone()));\n    old_handler.join_thread().with_context(|| \"Failed to join old var handler thread\")?;\n    self.log_action(|| \"New config loaded\");\n    self.log_config(&config);\n    self.eww_config = config;\n    self.scope_graph.borrow_mut().clear();\n    self.scope_graph.borrow_mut().update_from_config(self.eww_config.generate_initial_state());\n    let window_arguments: HashMap<_, _> = self.open_windows.keys().cloned().chain(self.failed_windows.iter().cloned()).dedup().map(|instance_id| {\n        let window_id = self.instance_id_to_window_id.get(&instance_id).unwrap();\n        let window_name = self.window_id_to_name.get(window_id).unwrap();\n        let window_arguments = self.eww_config.get_window_definition(window_name).unwrap().initial_state.clone();\n        (instance_id, window_arguments)\n    }).collect();\n    for (instance_id, window_arguments) in window_arguments {\n        self.open_window(window_arguments, instance_id).with_context(|| \"Failed to open window\")?;\n    }\n    Ok(())\n}", "CodeBleu_score": 53.0071949804265}, {"code": "pub fn load_config(&mut self, config: config::EwwConfig) -> Result<()>{\n\t    info!(\"Reloading configuration\");\n    let old_handler = std::mem::replace(&mut self.script_var_handler, script_var_handler::start_script_var_handler(config.generate_initial_state()));\n    old_handler.join_thread().with_context(|| \"Failed to join old script var handler thread\")?;\n\n    info!(\"New configuration loaded:\n{:#?}\", config);\n    self.eww_config = config;\n    self.scope_graph.borrow_mut().clear();\n    self.scope_graph.borrow_mut().update_from_config(config.generate_initial_state());\n\n    let window_arguments = self.open_windows.keys().cloned().chain(self.failed_windows.iter().cloned()).dedup().map(|instance_id| {\n        self.instance_id_to_args.get(&instance_id).with_context(|| format!(\"Failed to find arguments for window with instance ID {}\", instance_id))\n    }).collect::<Result<Vec<_>>>()?;\n\n    for window_arguments in window_arguments {\n        self.open_window(window_arguments.clone())?;\n    }\n    Ok(())\n}", "CodeBleu_score": 65.87923348096368}]}
{"instance_id": "939eb758c6a2", "generation_result": [{"code": "pub fn load_css(&mut self, file_id: usize, css: &str) -> Result<()>{\n\t    if let Err(err) = self.css_provider.load_from_data(css.as_bytes()) {\n        return Err(\n            (|| {\n                let captures = PATTERN.captures(err.message())?;\n                let line = captures.get(1).unwrap().as_str().parse::<usize>().ok()?;\n                let msg = captures.get(3).unwrap().as_str();\n                let db = error_handling_ctx::FILE_DATABASE.read().ok()?;\n                let line_range = db.line_range(file_id, line - 1).ok()?;\n                let span = Span(line_range.start, line_range.end - 1, file_id);\n                Some(DiagError(gen_diagnostic!(msg, span)))\n            })()\n            .unwrap_or_else(|| DiagError(gen_diagnostic!(\"CSS error\", Span(0, 0, file_id)))),\n        );\n    }\n    Ok(())\n}", "CodeBleu_score": 65.49863782155724}, {"code": "pub fn load_css(&mut self, file_id: usize, css: &str) -> Result<()>{\n\t    match self.css_provider.load_from_data(css.as_bytes()) {\n        Ok(_) => Ok(()),\n        Err(err) => {\n            (|| {\n                let captures = PATTERN.captures(err.message())?;\n                let line = captures.get(1).unwrap().as_str().parse::<usize>().ok()?;\n                let msg = captures.get(3).unwrap().as_str();\n                let db = error_handling_ctx::FILE_DATABASE.read().ok()?;\n                let line_range = db.line_range(file_id, line - 1).ok()?;\n                let span = Span(line_range.start, line_range.end - 1, file_id);\n                Some(DiagError(gen_diagnostic!(msg, span)))\n            })()\n            .unwrap_or_else(|| DiagError(gen_diagnostic!(err.message(), Span(0, 0, file_id))))\n        }\n    }\n}", "CodeBleu_score": 62.53947061231786}, {"code": "pub fn load_css(&mut self, file_id: usize, css: &str) -> Result<()>{\n\t    self.css_provider.load_from_data(css.as_bytes())\n        .map_err(|err| {\n            (|| {\n                let captures = PATTERN.captures(err.message())?;\n                let line = captures.get(1).unwrap().as_str().parse::<usize>().ok()?;\n                let msg = captures.get(3).unwrap().as_str();\n                let db = error_handling_ctx::FILE_DATABASE.read().ok()?;\n                let line_range = db.line_range(file_id, line - 1).ok()?;\n                let span = Span(line_range.start, line_range.end - 1, file_id);\n                Some(DiagError(gen_diagnostic!(msg, span)))\n            })()\n            .unwrap_or_else(|| {\n                DiagError(gen_diagnostic!(\"CSS error\", Span(0, 0, file_id)))\n            })\n        })\n}", "CodeBleu_score": 56.65824703000152}]}
{"instance_id": "4a881d16b9af", "generation_result": [{"code": "fn get_gdk_monitor(identifier: Option<MonitorIdentifier>) -> Result<Monitor> {\n\t    let display = gdk::Display::default().expect(\"Could not connect to a display.\");\n    let monitor = match identifier {\n        Some(identifier) => {\n            display\n                .monitor(m)\n                .and_then(|mon| {\n                    if mon.is_primary() {\n                        Ok(mon)\n                    } else {\n                        Err(anyhow!(\n                            \"Monitor {} is not a primary monitor.\",\n                            mon.get_geometry().width\n                        ))\n                    }\n                })\n                .or_else(|_| {\n                    Err(anyhow!(\n                        \"Could not find the monitor {}\",\n                        identifier.to_string()\n                    ))\n                })\n        }\n        None => display.primary_monitor(),\n    };\n    monitor.context(\"Could not find a monitor.\")\n}", "CodeBleu_score": 30.427561678006633}, {"code": "fn get_gdk_monitor(identifier: Option<MonitorIdentifier>) -> Result<Monitor> {\n\t    let display = Display::default().expect(\"Could not connect to a display\");\n    let monitors = display.n_monitors();\n    match identifier {\n        Some(id) => {\n            let mon = match id {\n                MonitorIdentifier::Index(index) => {\n                    if index < monitors {\n                        display.monitor(index).and_then(|m| {\n                            m.with_context(|m| {\n                                Ok(Monitor {\n                                    monitor: m,\n                                    model: m.model().to_string(),\n                                    scale_factor: m.scale_factor(),\n                                })\n                            })\n                        })\n                    } else {\n                        Err(anyhow!(\"No monitor with index {} found\", index))\n                    }\n                }\n                MonitorIdentifier::Name(name) => {\n                    let mut found = false;\n                    for m in 0..monitors {\n                        let mon = display.monitor(m).unwrap();\n                        if mon.model().to_string() == name {\n                            found = true;\n                            return mon.with_context(|m| {\n                                Ok(Monitor {\n                                    monitor: m,\n                                    model: m.model().to_string(),\n                                    scale_factor: m.scale_factor(),\n                                })\n                            });\n                        }\n                    }\n                    if !found {\n                        Err(anyhow!(\"No monitor with name {} found\", name))\n                    } else {\n                        Err(anyhow!(\"Unknown error\"))\n                    }\n                }\n            };\n            mon\n        }\n        None => display.primary_monitor().context(\"Could not get primary monitor\"),\n    }\n}", "CodeBleu_score": 23.36429279955336}, {"code": "fn get_gdk_monitor(identifier: Option<MonitorIdentifier>) -> Result<Monitor> {\n\t    let display = Display::default().expect(\"Failed to retrieve default display\");\n    let mon = match identifier {\n        Some(MonitorIdentifier::Index(m)) => display.monitor(m).and_then(|mon| {\n            mon.with_context(|| format!(\"Failed to retrieve monitor with index {}\", m))\n        }),\n        Some(MonitorIdentifier::Name(ref n)) => display\n            .monitor_by_name(n)\n            .with_context(|| format!(\"Failed to retrieve monitor with name {}\", n)),\n        None => display.primary_monitor().context(\"Failed to retrieve primary monitor\"),\n    };\n    mon\n}", "CodeBleu_score": 22.912904533687456}]}
{"instance_id": "0d4bd8476c3b", "generation_result": [{"code": "pub fn get_window_rectangle(geometry: WindowGeometry, screen_rect: gdk::Rectangle) -> gdk::Rectangle{\n\t    let x = screen_rect.x + geometry.offset.x + geometry.anchor_point.x.alignment_to_coordinate(screen_rect.width);\n    let y = screen_rect.y + geometry.offset.y + geometry.anchor_point.y.alignment_to_coordinate(screen_rect.height);\n    let width = geometry.size.relative_to(screen_rect.width);\n    let height = geometry.size.relative_to(screen_rect.height);\n    gdk::Rectangle::new(x, y, width, height)\n}", "CodeBleu_score": 59.19243920570252}, {"code": "pub fn get_window_rectangle(geometry: WindowGeometry, screen_rect: gdk::Rectangle) -> gdk::Rectangle{\n\t    let x = match geometry.anchor_point.x.alignment_to_coordinate {\n        AlignmentToCoordinate::Left => screen_rect.x + geometry.offset.x,\n        AlignmentToCoordinate::Center => {\n            screen_rect.x + geometry.offset.x + screen_rect.width / 2\n        }\n        AlignmentToCoordinate::Right => {\n            screen_rect.x + geometry.offset.x + screen_rect.width\n        }\n    };\n\n    let y = match geometry.anchor_point.y.alignment_to_coordinate {\n        AlignmentToCoordinate::Top => screen_rect.y + geometry.offset.y,\n        AlignmentToCoordinate::Center => {\n            screen_rect.y + geometry.offset.y + screen_rect.height / 2\n        }\n        AlignmentToCoordinate::Bottom => {\n            screen_rect.y + geometry.offset.y + screen_rect.height\n        }\n    };\n\n    let width = match geometry.size.relative_to {\n        RelativeTo::Screen => geometry.size.width,\n        RelativeTo::Parent => screen_rect.width,\n    };\n\n    let height = match geometry.size.relative_to {\n        RelativeTo::Screen => geometry.size.height,\n        RelativeTo::Parent => screen_rect.height,\n    };\n\n    gdk::Rectangle::new(x, y, width, height)\n}", "CodeBleu_score": 49.65484935103876}, {"code": "pub fn get_window_rectangle(geometry: WindowGeometry, screen_rect: gdk::Rectangle) -> gdk::Rectangle{\n\t    let mut width = geometry.size.relative_to(screen_rect.width);\n    let mut height = geometry.size.relative_to(screen_rect.height);\n    let mut x = screen_rect.x + geometry.offset.relative_to(screen_rect.width);\n    let mut y = screen_rect.y + geometry.offset.relative_to(screen_rect.height);\n    x += geometry.anchor_point.x.alignment_to_coordinate(screen_rect.width, width);\n    y += geometry.anchor_point.y.alignment_to_coordinate(screen_rect.height, height);\n    gdk::Rectangle::new(x, y, width, height)\n}", "CodeBleu_score": 59.7316466370753}]}
{"instance_id": "588081b260d0", "generation_result": [{"code": "fn initialize_window(window_init: &WindowInitiator, _monitor: gdk::Rectangle, x: i32, y: i32) -> Option<Window>{\n\t    // Create the window\n    let window = match window_init.window_type {\n        WindowType::Decorated => Window::new(WindowType::Toplevel),\n        WindowType::Borderless => Window::new(WindowType::Fullscreen),\n    };\n\n    // Set the window's resizable property\n    window.set_resizable(window_init.resizable);\n\n    // Set the window's stacking position\n    if window_init.stacking == Stacking::Foreground {\n        window.stick();\n    } else {\n        window.unstick();\n    }\n\n    // Set the window's stickiness\n    if window_init.sticky {\n        window.set_keep_above(true);\n    } else {\n        window.set_keep_below(true);\n    }\n\n    // Set the window's position\n    window.move_(x, y);\n\n    // Return the window\n    Some(window)\n}", "CodeBleu_score": 61.6722556419065}, {"code": "fn initialize_window(window_init: &WindowInitiator, _monitor: gdk::Rectangle, x: i32, y: i32) -> Option<Window>{\n\t    let window_type = match window_init.backend {\n        Backend::X11 => WindowType::Toplevel,\n        Backend::Wayland => WindowType::Toplevel,\n        Backend::MacOS => WindowType::Popup,\n    };\n\n    let window = Window::new(window_type, &[\n        WindowAttribute::Title(window_init.title.as_str()),\n        WindowAttribute::Resizable(window_init.resizable),\n        WindowAttribute::SkipTaskbarHint(window_init.skip_taskbar),\n        WindowAttribute::SkipPagerHint(window_init.skip_pager),\n        WindowAttribute::AppPaintable(true),\n    ]);\n\n    window.set_keep_above(window_init.always_on_top);\n    window.set_keep_below(!window_init.always_on_top);\n    window.set_resizable(window_init.resizable);\n    window.set_position(WindowPosition::CenterOnParent);\n    window.set_decorated(window_init.decorations);\n    window.set_deletable(window_init.closable);\n    window.set_accept_focus(window_init.focusable);\n    window.set_focus_on_map(window_init.focusable);\n    window.set_icon_from_file(window_init.icon.as_str());\n\n    if window_init.sticky {\n        window.stick();\n    } else {\n        window.unstick();\n    }\n\n    window.set_default_size(window_init.width, window_init.height);\n    window.set_geometry_hints::<ApplicationWindow>(\n        Some(&_monitor),\n        Some(&gdk::Geometry {\n            min_width: window_init.min_width,\n            min_height: window_init.min_height,\n            max_width: window_init.max_width,\n            max_height: window_init.max_height,\n            base_width: 0,\n            base_height: 0,\n            width_inc: 0,\n            height_inc: 0,\n            min_", "CodeBleu_score": 54.64473149430498}, {"code": "fn initialize_window(window_init: &WindowInitiator, _monitor: gdk::Rectangle, x: i32, y: i32) -> Option<Window>{\n\t    let window = match window_init.backend {\n        Backend::X11 => Some(Window::new(WindowType::Toplevel)),\n        Backend::Wayland => Some(Window::new(WindowType::Toplevel)),\n        Backend::Xcb => Some(Window::new(WindowType::Toplevel)),\n        Backend::Windows => Some(Window::new(WindowType::Toplevel)),\n        Backend::Broadway => None,\n        Backend::Directfb => None,\n        Backend::MacOS => None,\n        Backend::Win32 => None,\n        Backend::Quartz => None,\n        Backend::Cocoa => None,\n        Backend::Android => None,\n        Backend::Fuchsia => None,\n        Backend::WaylandEgl => None,\n        Backend::WaylandXdg => None,\n        Backend::WaylandXdgIme => None,\n        Backend::WaylandXdgImeV1 => None,\n        Backend::WaylandXdgShell => None,\n        Backend::WaylandXdgShellV6 => None,\n        Backend::WaylandXdgShellV6Ime => None,\n        Backend::WaylandXdgShellV6ImeV1 => None,\n        Backend::WaylandXdgShellV6Stable => None,\n        Backend::WaylandXdgShellV6StableIme => None,\n        Backend::WaylandXdgShellV6StableImeV1 => None,\n        Backend::WaylandXdgShellV6StableV6 => None,\n        Backend::WaylandXdgShellV6StableV6Ime => None,\n        Backend::WaylandXdgShellV6StableV6ImeV1 => None,\n        Backend::WaylandXdgShellV6StableV6V6 => None,\n        Backend::WaylandXdgShellV6StableV6V6Ime => None,\n        Backend::WaylandXdgShellV6StableV6V6ImeV1 => None,\n        Backend::WaylandX", "CodeBleu_score": 38.83493931462043}]}
{"instance_id": "bbe996b92d6e", "generation_result": [{"code": "pub fn print_error(err: anyhow::Error){\n\t    let diagnostic = anyhow_err_to_diagnostic(err);\n    if let Ok(diagnostic) = diagnostic {\n        let stringified_diagnostic = stringify_diagnostic(diagnostic);\n        if let Ok(stringified_diagnostic) = stringified_diagnostic {\n            eprintln!(\"{}\", stringified_diagnostic);\n            return;\n        }\n    }\n    log::error!(\"{}\", err);\n}", "CodeBleu_score": 30.228056353993793}, {"code": "pub fn print_error(err: anyhow::Error){\n\t    let diagnostic = anyhow_err_to_diagnostic(err);\n    let diagnostic_string = stringify_diagnostic(diagnostic);\n    if let Some(diagnostic_string) = diagnostic_string {\n        eprintln!(\"{}\", diagnostic_string);\n    } else {\n        log::error!(\"{}\", err);\n    }\n}", "CodeBleu_score": 26.710165876345375}, {"code": "pub fn print_error(err: anyhow::Error){\n\t    let diagnostic = anyhow_err_to_diagnostic(err);\n    match diagnostic {\n        Ok(diagnostic) => match stringify_diagnostic(diagnostic) {\n            Ok(diagnostic) => eprintln!(\"{}\", diagnostic),\n            Err(err) => log::error!(\"{}\", err),\n        },\n        Err(err) => log::error!(\"{}\", err),\n    }\n}", "CodeBleu_score": 56.26424328888413}]}
{"instance_id": "d5e9c17aaa4d", "generation_result": [{"code": "pub async fn run_server<P: AsRef<std::path::Path>>(evt_send: UnboundedSender<app::DaemonCommand>, socket_path: P) -> Result<()>{\n\t    let socket_path = socket_path.as_ref();\n    let listener = UnixListener::bind(socket_path).await?;\n    info!(\"IPC server initialized at {}\", socket_path.display());\n    loop {\n        match listener.accept().await {\n            Ok((stream, _peer)) => {\n                let evt_send = evt_send.clone();\n                tokio::spawn(async move {\n                    if let Err(e) = handle_connection(stream, evt_send).await {\n                        error!(\"{}\", e);\n                    }\n                });\n            }\n            Err(e) => {\n                error!(\"{}\", e);\n            }\n        }\n    }\n}", "CodeBleu_score": 63.77617874767484}, {"code": "pub async fn run_server<P: AsRef<std::path::Path>>(evt_send: UnboundedSender<app::DaemonCommand>, socket_path: P) -> Result<()>{\n\t    let listener = UnixListener::bind(socket_path.as_ref()).await?;\n    info!(\"IPC server initialized\");\n    loop {\n        let (stream, _) = listener.accept().await?;\n        let evt_send = evt_send.clone();\n        tokio::spawn(async move {\n            if let Err(e) = handle_connection(stream, evt_send).await {\n                error!(\"IPC connection error: {}\", e);\n            }\n        });\n    }\n}", "CodeBleu_score": 31.91623804032973}, {"code": "pub async fn run_server<P: AsRef<std::path::Path>>(evt_send: UnboundedSender<app::DaemonCommand>, socket_path: P) -> Result<()>{\n\t    // Initialize the IPC server\n    let listener = UnixListener::bind(socket_path.as_ref())?;\n    info!(\"IPC server initialized\");\n\n    // Accept incoming connections\n    loop {\n        // Accept a connection\n        let (stream, peer_addr) = listener.accept().await?;\n        info!(\"Connection accepted from {}\", peer_addr);\n\n        // Clone the event sender\n        let evt_send_clone = evt_send.clone();\n\n        // Spawn a new task to handle the connection\n        tokio::spawn(async move {\n            // Handle the connection\n            if let Err(err) = handle_connection(stream, evt_send_clone).await {\n                error!(\"Error handling connection: {}\", err);\n            }\n        });\n    }\n}", "CodeBleu_score": 37.31284212431148}]}
{"instance_id": "4af744d13f02", "generation_result": [{"code": "async fn handle_connection(mut stream: tokio::net::UnixStream, evt_send: UnboundedSender<app::DaemonCommand>) -> Result<()>{\n\t    let (mut stream_write, mut stream_read) = stream.split();\n    let action = read_action_from_stream(&mut stream_read).await?;\n    let action_name = action.name();\n    log::info!(\"Received command {}\", action_name);\n    let action: app::DaemonCommand = action.into_daemon_command();\n    evt_send.send(action)?;\n    if action.expects_response() {\n        let response_recv = app::get_response_channel();\n        let response = tokio::time::timeout(Duration::from_millis(100), response_recv.recv()).await;\n        match response {\n            Ok(Ok(response)) => {\n                log::info!(\"Sending response for {}\", action_name);\n                let response_bytes = bincode::serialize(&response).unwrap();\n                stream_write.write_all(&response_bytes).await?;\n            }\n            Ok(Err(_)) => {\n                log::error!(\"Failed to receive response for {}\", action_name);\n            }\n            Err(_) => {\n                log::error!(\"Timeout while waiting for response for {}\", action_name);\n            }\n        }\n    }\n    stream_write.shutdown().await?;\n    Ok(())\n}", "CodeBleu_score": 63.225964870974494}, {"code": "async fn handle_connection(mut stream: tokio::net::UnixStream, evt_send: UnboundedSender<app::DaemonCommand>) -> Result<()>{\n\t    let (mut stream_write, mut stream_read) = stream.split();\n    let action = read_action_from_stream(&mut stream_read).await?;\n    log::info!(\"Received action: {:?}\", action);\n    let daemon_cmd = action.into_daemon_command();\n    evt_send.send(daemon_cmd)?;\n    let response_recv = match action {\n        Action::GetStatus => None,\n        _ => Some(app::RESPONSE_RECV.lock().unwrap().recv()),\n    };\n    if let Some(response_recv) = response_recv {\n        let response = tokio::time::timeout(Duration::from_millis(100), response_recv).await?;\n        log::info!(\"Sending response: {:?}\", response);\n        let response_bytes = bincode::serialize(&response)?;\n        stream_write.write_all(&response_bytes).await?;\n    }\n    stream_write.shutdown().await?;\n    Ok(())\n}", "CodeBleu_score": 58.740541609174244}, {"code": "async fn handle_connection(mut stream: tokio::net::UnixStream, evt_send: UnboundedSender<app::DaemonCommand>) -> Result<()>{\n\t    let (mut stream_read, mut stream_write) = stream.split();\n    let action = read_action_from_stream(&mut stream_read).await?;\n    log::debug!(\"Received action: {:?}\", action);\n    let action = action.into_daemon_command();\n    evt_send.send(action).unwrap();\n    let response = if action.expects_response() {\n        let response_recv = action.get_response_receiver();\n        let response = tokio::time::timeout(Duration::from_millis(100), response_recv.recv()).await;\n        match response {\n            Ok(Ok(response)) => response,\n            Ok(Err(_)) => {\n                log::error!(\"Response channel disconnected.\");\n                return Err(anyhow::anyhow!(\"Response channel disconnected.\"));\n            }\n            Err(_) => {\n                log::error!(\"Response timeout.\");\n                return Err(anyhow::anyhow!(\"Response timeout.\"));\n            }\n        }\n    } else {\n        Ok(app::DaemonResponse::NoResponse)\n    };\n    log::debug!(\"Sending response: {:?}\", response);\n    stream_write.write_all(&bincode::serialize(&response).unwrap()).await?;\n    stream_write.shutdown().await?;\n    Ok(())\n}", "CodeBleu_score": 56.56052202489157}]}
{"instance_id": "8475be269e09", "generation_result": [{"code": "async fn read_action_from_stream(stream_read: &'_ mut tokio::net::unix::ReadHalf<'_>) -> Result<opts::ActionWithServer>{\n\t    let mut message_byte_length: [u8; 4] = [0; 4];\n    stream_read.read_exact(&mut message_byte_length).await.context(format!(\"Failed to read message size header from stream.\"))?;\n    let message_byte_length: u32 = u32::from_be_bytes(message_byte_length);\n    let mut raw_message: Vec<u8> = Vec::<u8>::with_capacity(message_byte_length as usize);\n    while raw_message.len() < message_byte_length as usize {\n        let mut buf: [u8; 4096] = [0; 4096];\n        let read_bytes: usize = stream_read.read_buf(&mut buf).await.context(format!(\"Failed to read message from stream.\"))?;\n        raw_message.extend_from_slice(&buf[..read_bytes]);\n    }\n    let action_with_server: opts::ActionWithServer = bincode::deserialize(&raw_message).context(format!(\"Failed to deserialize message.\"))?;\n    Ok(action_with_server)\n}", "CodeBleu_score": 64.07114133156125}, {"code": "async fn read_action_from_stream(stream_read: &'_ mut tokio::net::unix::ReadHalf<'_>) -> Result<opts::ActionWithServer>{\n\t    let mut message_byte_length: [u8; 4] = [0; 4];\n    stream_read.read_exact(&mut message_byte_length).await.context(\n        \"Failed to read message size header from stream.\"\n    )?;\n    let message_byte_length: u32 = u32::from_be_bytes(message_byte_length);\n    let mut raw_message: Vec<u8> = Vec::<u8>::with_capacity(message_byte_length as usize);\n    let mut bytes_read: usize = 0;\n    while bytes_read < message_byte_length as usize {\n        let bytes_read_now: usize = stream_read.read_buf(&mut raw_message).await.context(\n            \"Failed to read message from stream.\"\n        )?;\n        bytes_read += bytes_read_now;\n    }\n    bincode::deserialize(&raw_message).context(\n        \"Failed to deserialize message from stream.\"\n    )\n}", "CodeBleu_score": 60.16700174645169}, {"code": "async fn read_action_from_stream(stream_read: &'_ mut tokio::net::unix::ReadHalf<'_>) -> Result<opts::ActionWithServer>{\n\t    let mut message_byte_length: [u8; 4] = [0; 4];\n    stream_read.read_exact(&mut message_byte_length).await.context(format!(\"Failed to read message byte length from stream.\"))?;\n    let message_byte_length: u32 = u32::from_be_bytes(message_byte_length);\n    let mut raw_message: Vec<u8> = Vec::<u8>::with_capacity(message_byte_length as usize);\n    let mut bytes_read: usize = 0;\n    while bytes_read < message_byte_length as usize {\n        let bytes_read_now: usize = stream_read.read_buf(&mut raw_message).await.context(format!(\"Failed to read message from stream.\"))?;\n        bytes_read += bytes_read_now;\n    }\n    bincode::deserialize(&raw_message).context(format!(\"Failed to deserialize message.\"))\n}", "CodeBleu_score": 66.03159959606847}]}
{"instance_id": "5f7bde448666", "generation_result": [{"code": "async fn wait_for_service_exit(con: &zbus::Connection, service: zbus::names::BusName<'_>) -> zbus::fdo::Result<()>{\n\t    let proxy = zbus::fdo::DBusProxy::new(con).await?;\n    let has_owner = proxy.name_has_owner(service).await?;\n    if !has_owner {\n        return Ok(());\n    }\n    let mut stream = proxy.receive_name_owner_changed().await?;\n    while let Some(msg) = stream.next().await {\n        let msg = msg?;\n        let args = msg.body()?;\n        if args.new_owner().is_none() {\n            return Ok(());\n        }\n    }\n    unreachable!()\n}", "CodeBleu_score": 65.5807930423397}, {"code": "async fn wait_for_service_exit(con: &zbus::Connection, service: zbus::names::BusName<'_>) -> zbus::fdo::Result<()>{\n\t    // Create a proxy for the org.freedesktop.DBus interface.\n    let dbus = zbus::fdo::DBusProxy::new(con).await?;\n\n    // Check if the service already has an owner.\n    let has_owner = dbus.name_has_owner(service).await?;\n    if !has_owner {\n        return Ok(());\n    }\n\n    // Listen for NameOwnerChanged signals.\n    let mut stream = dbus.receive_name_owner_changed().await?;\n    while let Some(msg) = stream.next().await {\n        let msg = msg?;\n        let args = msg.body::<(zbus::names::BusName<'_>, Option<zbus::names::BusName<'_>>, Option<zbus::names::BusName<'_>>)>()?;\n        if args.0 == service && args.2.is_none() {\n            break;\n        }\n    }\n\n    Ok(())\n}", "CodeBleu_score": 68.73301731167467}, {"code": "async fn wait_for_service_exit(con: &zbus::Connection, service: zbus::names::BusName<'_>) -> zbus::fdo::Result<()>{\n\t    // Create a proxy for the DBus service.\n    let service = zbus::fdo::DBusProxy::new(con).await?;\n    // Check if the service has an owner.\n    let owner = service.name_has_owner(service).await?;\n    // If the service has no owner, return immediately.\n    if owner.is_none() {\n        return Ok(());\n    }\n    // Create a channel to receive signals.\n    let mut sig = con.receive_name_owner_changed().await?;\n    // Continue to listen for owner change signals until the service owner disappears.\n    while let Some(args) = sig.next().await {\n        if args.new_owner().is_none() {\n            break;\n        }\n    }\n    Ok(())\n}", "CodeBleu_score": 71.47302412825137}]}
{"instance_id": "d5149dd17f39", "generation_result": [{"code": "fn doc_export_format_from_ext_str(format: &str) -> anyhow::Result<DocExportFormat> {\n\t    match format {\n        \"svg\" => Ok(DocExportFormat::SVG),\n        \"xopp\" => Ok(DocExportFormat::Xopp),\n        \"pdf\" => Ok(DocExportFormat::PDF),\n        _ => Err(anyhow::Error::msg(format!(\"Unsupported format: {}\", format))),\n    }\n}", "CodeBleu_score": 65.49429724101901}, {"code": "fn doc_export_format_from_ext_str(format: &str) -> anyhow::Result<DocExportFormat> {\n\t    match format {\n        \"svg\" => Ok(DocExportFormat::Svg),\n        \"xopp\" => Ok(DocExportFormat::Xopp),\n        \"pdf\" => Ok(DocExportFormat::Pdf),\n        _ => Err(anyhow::Error::msg(format!(\"Unsupported format: {}\", format))),\n    }\n}", "CodeBleu_score": 69.68755338585426}, {"code": "fn doc_export_format_from_ext_str(format: &str) -> anyhow::Result<DocExportFormat> {\n\t    match format {\n        \"svg\" => Ok(DocExportFormat::Svg),\n        \"xopp\" => Ok(DocExportFormat::Xopp),\n        \"pdf\" => Ok(DocExportFormat::Pdf),\n        _ => Err(anyhow::Error::msg(format!(\"Unsupported export format: {}\", format))),\n    }\n}", "CodeBleu_score": 70.15361918203341}]}
{"instance_id": "47c741fa1cf0", "generation_result": [{"code": "pub(crate) fn file_has_ext(path: &Path, expected_ext: &str) -> anyhow::Result<()>{\n\t    path_is_file(path)?;\n    let actual_ext = path.extension().unwrap_or_default();\n    if actual_ext == expected_ext {\n        Ok(())\n    } else {\n        Err(anyhow::anyhow!(\n            \"Expected file extension '{}' but found '{}'\",\n            expected_ext,\n            actual_ext.to_string_lossy()\n        ))\n    }\n}", "CodeBleu_score": 31.09172886102486}, {"code": "pub(crate) fn file_has_ext(path: &Path, expected_ext: &str) -> anyhow::Result<()>{\n\t    path_is_file(path)?;\n    let found_ext = path.extension().unwrap_or_default();\n    if found_ext != expected_ext {\n        Err(anyhow::anyhow!(\n            \"Expected extension {} but found {}\",\n            expected_ext,\n            found_ext.to_str().unwrap()\n        ))\n    } else {\n        Ok(())\n    }\n}", "CodeBleu_score": 30.042649388843444}, {"code": "pub(crate) fn file_has_ext(path: &Path, expected_ext: &str) -> anyhow::Result<()>{\n\t    path_is_file(path)?;\n    let ext = path.extension().unwrap_or_default();\n    if ext == expected_ext {\n        Ok(())\n    } else {\n        Err(anyhow!(\n            \"The file {} has an extension of {:?}, but expected {}\",\n            path.display(),\n            ext,\n            expected_ext\n        ))\n    }\n}", "CodeBleu_score": 31.51697249488003}]}
{"instance_id": "cde4fa8386cb", "generation_result": [{"code": "waybar::modules::CpuUsage::CpuUsage(const std::string& id, const Json::Value& config){\n\t  label_.set_name(\"cpu\");\n  if (config[\"name\"].isString()) {\n    label_.get_style_context()->add_class(config[\"name\"].asString());\n  }\n  if (config[\"interval\"].isUInt()) {\n    interval_ = config[\"interval\"].asUInt();\n  }\n  thread_ = [this] {\n    dp.emit();\n    thread_.sleep_for(interval_);\n  };\n  thread_.start_now();\n  event_box_.add(label_);\n}", "CodeBleu_score": 63.24130828298168}, {"code": "waybar::modules::CpuUsage::CpuUsage(const std::string& id, const Json::Value& config){\n\t  label_.set_name(\"cpu\");\n  if (config[\"name\"].isString()) {\n    label_.get_style_context()->add_class(config[\"name\"].asString());\n  }\n  if (config[\"interval\"].isUInt()) {\n    interval_ = config[\"interval\"].asUInt();\n  }\n  thread_ = [this] {\n    dp.emit();\n    thread_.sleep_for(interval_);\n  };\n  thread_.detach();\n  event_box_.add(label_);\n}", "CodeBleu_score": 63.30227002109581}, {"code": "waybar::modules::CpuUsage::CpuUsage(const std::string& id, const Json::Value& config){\n\t  label_.set_name(\"cpu\");\n  if (config[\"name\"].isString()) {\n    label_.get_style_context()->add_class(config[\"name\"].asString());\n  }\n  if (config[\"format\"].isString()) {\n    format_ = config[\"format\"].asString();\n  }\n  if (config[\"interval\"].isUInt()) {\n    interval_ = config[\"interval\"].asUInt();\n  }\n  thread_ = [this] {\n    dp.emit();\n    thread_.sleep_for(interval_);\n  };\n  thread_.start();\n}", "CodeBleu_score": 62.29978167595635}]}
{"instance_id": "da58b589c5e8", "generation_result": [{"code": "static void handle_global(void *data, struct wl_registry *registry, uint32_t name,\n                          const char *interface, uint32_t version) {\n\t    Tags *tags = static_cast<Tags *>(data);\n\n    if (strcmp(interface, zdwl_ipc_manager_v2_interface.name) == 0) {\n        tags->status_manager_ = static_cast<struct zdwl_ipc_manager_v2 *>(wl_registry_bind(registry, name,\n                                                                                           &zdwl_ipc_manager_v2_interface,\n                                                                                           std::min(version, 2u)));\n    } else if (strcmp(interface, wl_seat_interface.name) == 0) {\n        tags->seat_ = static_cast<struct wl_seat *>(wl_registry_bind(registry, name, &wl_seat_interface, 1));\n    }\n}", "CodeBleu_score": 57.57063095594642}, {"code": "static void handle_global(void *data, struct wl_registry *registry, uint32_t name,\n                          const char *interface, uint32_t version) {\n\t    Tags *tags = static_cast<Tags *>(data);\n\n    if (strcmp(interface, zdwl_ipc_manager_v2_interface.name) == 0) {\n        tags->status_manager_ = static_cast<struct zdwl_ipc_manager_v2 *>(wl_registry_bind(registry, name, &zdwl_ipc_manager_v2_interface, std::min(version, 2u)));\n    } else if (strcmp(interface, wl_seat_interface.name) == 0) {\n        tags->seat_ = static_cast<struct wl_seat *>(wl_registry_bind(registry, name, &wl_seat_interface, std::min(version, 1u)));\n    }\n}", "CodeBleu_score": 61.75924317844815}, {"code": "static void handle_global(void *data, struct wl_registry *registry, uint32_t name,\n                          const char *interface, uint32_t version) {\n\t    Tags *tags = static_cast<Tags *>(data);\n    if (strcmp(interface, zdwl_ipc_manager_v2_interface.name) == 0) {\n        tags->status_manager_ = static_cast<struct zdwl_ipc_manager_v2 *>(wl_registry_bind(registry, name,\n                                                                                            &zdwl_ipc_manager_v2_interface,\n                                                                                            std::min(version, 2u)));\n    } else if (strcmp(interface, wl_seat_interface.name) == 0) {\n        tags->seat_ = static_cast<struct wl_seat *>(wl_registry_bind(registry, name, &wl_seat_interface, 1));\n    }\n}", "CodeBleu_score": 57.51913693325865}]}
{"instance_id": "22230d419d69", "generation_result": [{"code": "void IPC::parseIPC(const std::string& ev){\n\t    std::string reqType = ev.substr(0, ev.find_first_of('>'));\n    std::unique_lock<std::mutex> lock(m_mutex);\n    for (auto it = m_callbacks.begin(); it != m_callbacks.end(); ++it) {\n        if ((*it)->getEventName() == reqType) {\n            (*it)->onEvent(ev);\n        }\n    }\n}", "CodeBleu_score": 57.89048804137353}, {"code": "void IPC::parseIPC(const std::string& ev){\n\t    std::string req = ev.substr(0, ev.find_first_of(\">\"));\n\n    std::unique_lock<std::mutex> lock(callback_mutex);\n    for (auto handler : callbacks) {\n        if (handler->onEvent(req)) {\n            break;\n        }\n    }\n}", "CodeBleu_score": 49.32034907856063}, {"code": "void IPC::parseIPC(const std::string& ev){\n\t    std::string reqType = ev.substr(0, ev.find_first_of('>'));\n    std::lock_guard<std::mutex> lock(callbackMutex);\n    for (auto handler : callbacks) {\n        if (handler->getEventName() == reqType) {\n            handler->onEvent(ev);\n            break;\n        }\n    }\n}", "CodeBleu_score": 55.76078037270153}]}
{"instance_id": "5d195fbd6417", "generation_result": [{"code": "void IPC::unregisterForIPC(EventHandler* ev_handler){\n\t\tif (ev_handler == nullptr) {\n\t\treturn;\n\t}\n\tstd::lock_guard<std::mutex> lock(callback_mutex_);\n\tfor (auto it = callbacks_.begin(); it != callbacks_.end();) {\n\t\tif (it->second == ev_handler) {\n\t\t\tit = callbacks_.erase(it);\n\t\t}\n\t\telse {\n\t\t\t++it;\n\t\t}\n\t}\n}", "CodeBleu_score": 67.15840198175908}, {"code": "void IPC::unregisterForIPC(EventHandler* ev_handler){\n\t\tif (ev_handler == nullptr) {\n\t\treturn;\n\t}\n\tstd::unique_lock<std::mutex> lock(callback_mutex_);\n\tauto it = callbacks_.begin();\n\twhile (it != callbacks_.end()) {\n\t\tif (it->first == ev_handler) {\n\t\t\tit = callbacks_.erase(it);\n\t\t} else {\n\t\t\tit++;\n\t\t}\n\t}\n}", "CodeBleu_score": 60.36280444603367}, {"code": "void IPC::unregisterForIPC(EventHandler* ev_handler){\n\t\tif (ev_handler == nullptr) {\n\t\treturn;\n\t}\n\n\tstd::unique_lock<std::mutex> lock(callbacks_mutex_);\n\n\tfor (auto it = callbacks_.begin(); it != callbacks_.end();) {\n\t\tif ((*it)->ev_handler_ == ev_handler) {\n\t\t\tit = callbacks_.erase(it);\n\t\t} else {\n\t\t\tit++;\n\t\t}\n\t}\n}", "CodeBleu_score": 66.80018267822119}]}
{"instance_id": "2bb5ef8b3cf3", "generation_result": [{"code": "auto Submap::parseConfig(const Json::Value& config) -> void{\n\t  // Check if the \"always-on\" key is a boolean.\n  if (config.isMember(\"always-on\")) {\n    if (config[\"always-on\"].isBool()) {\n      always_on_ = config[\"always-on\"].asBool();\n    } else {\n      LOG(WARNING) << \"The always-on parameter must be a boolean. Defaulting to false.\";\n    }\n  }\n\n  // Check if the \"default-submap\" key is a string.\n  if (config.isMember(\"default-submap\")) {\n    if (config[\"default-submap\"].isString()) {\n      default_submap_ = config[\"default-submap\"].asString();\n    } else {\n      LOG(WARNING) << \"The default-submap parameter must be a string. Defaulting to \\\"\\\".\n\";\n    }\n  }\n}", "CodeBleu_score": 46.41448421886998}, {"code": "auto Submap::parseConfig(const Json::Value& config) -> void{\n\t  always_on_ = config.get(\"always-on\", false).asBool();\n  default_submap_ = config.get(\"default-submap\", \"\").asString();\n}", "CodeBleu_score": 28.695514676547962}, {"code": "auto Submap::parseConfig(const Json::Value& config) -> void{\n\t  always_on_ = config.get(\"always-on\", always_on_).asBool();\n  default_submap_ = config.get(\"default-submap\", default_submap_).asString();\n}", "CodeBleu_score": 41.789479742075095}]}
{"instance_id": "c60aa24ddc6f", "generation_result": [{"code": "std::string WindowCreationPayload::repr(Workspaces &workspace_manager){\n\t    if (std::holds_alternative<Repr>(this->payload)) {\n        return std::get<Repr>(this->payload);\n    } else if (std::holds_alternative<ClassAndTitle>(this->payload)) {\n        auto class_and_title = std::get<ClassAndTitle>(this->payload);\n        return workspace_manager.getRewrite(class_and_title.class_name, class_and_title.title);\n    } else {\n        spdlog::error(\"Unreachable code path reached in WindowCreationPayload::repr\");\n        throw std::runtime_error(\"Unreachable code path reached in WindowCreationPayload::repr\");\n    }\n}", "CodeBleu_score": 44.266262883197456}, {"code": "std::string WindowCreationPayload::repr(Workspaces &workspace_manager){\n\t    if (std::holds_alternative<Repr>(this->payload)) {\n        return std::get<Repr>(this->payload);\n    } else if (std::holds_alternative<ClassAndTitle>(this->payload)) {\n        auto classAndTitle = std::get<ClassAndTitle>(this->payload);\n        return workspace_manager.getRewrite(classAndTitle.class_name, classAndTitle.title);\n    } else {\n        spdlog::error(\"WindowCreationPayload::repr() called on payload of invalid type. This should be unreachable code.\");\n        throw std::runtime_error(\"WindowCreationPayload::repr() called on payload of invalid type. This should be unreachable code.\");\n    }\n}", "CodeBleu_score": 42.49548018659042}, {"code": "std::string WindowCreationPayload::repr(Workspaces &workspace_manager){\n\t    if (std::holds_alternative<Repr>(this->window_repr)) {\n        return std::get<Repr>(this->window_repr);\n    } else if (std::holds_alternative<ClassAndTitle>(this->window_repr)) {\n        auto class_and_title = std::get<ClassAndTitle>(this->window_repr);\n        auto window_class = class_and_title.first;\n        auto window_title = class_and_title.second;\n        return workspace_manager.getRewrite(window_class, window_title);\n    } else {\n        std::string error_msg = \"WindowCreationPayload::repr: Unexpected window representation type.\n\";\n        spdlog::error(error_msg);\n        throw std::runtime_error(error_msg);\n    }\n}", "CodeBleu_score": 53.99782223004489}]}
{"instance_id": "b9160180960d", "generation_result": [{"code": "void Workspaces::createWorkspacesToCreate(){\n\t    for (auto workspace : m_workspacesToCreate) {\n        createWorkspace(workspace.first, workspace.second);\n    }\n    if (m_workspacesToCreate.size() > 0) {\n        updateWindowCount();\n        sortWorkspaces();\n    }\n    m_workspacesToCreate.clear();\n}", "CodeBleu_score": 56.082048505323876}, {"code": "void Workspaces::createWorkspacesToCreate(){\n\t\n    for (auto workspace : m_workspacesToCreate) {\n        createWorkspace(workspace.first, workspace.second);\n    }\n\n    if (!m_workspacesToCreate.empty()) {\n        updateWindowCount();\n        sortWorkspaces();\n    }\n\n    m_workspacesToCreate.clear();\n}", "CodeBleu_score": 63.43673947331902}, {"code": "void Workspaces::createWorkspacesToCreate(){\n\t    for (auto workspace : m_workspacesToCreate) {\n        createWorkspace(workspace.first, workspace.second);\n    }\n    if (!m_workspacesToCreate.empty()) {\n        updateWindowCount();\n        sortWorkspaces();\n    }\n}", "CodeBleu_score": 57.52401101375124}]}
{"instance_id": "07260cd3fead", "generation_result": [{"code": "auto Mpris::onPlayerNameVanished(PlayerctlPlayerManager* manager, PlayerctlPlayerName* player_name,\n                                 gpointer data) -> void {\n\t    Mpris* mpris = static_cast<Mpris*>(data);\n\n    if (mpris == nullptr) {\n        return;\n    }\n\n    spdlog::debug(\"Mpris::onPlayerNameVanished: {}\", player_name->name);\n\n    if (player_name->name == mpris->player_->get_name()) {\n        mpris->player_ = nullptr;\n        mpris->event_box_.set_visible(false);\n        mpris->dp.emit();\n    }\n}", "CodeBleu_score": 72.46176665683359}, {"code": "auto Mpris::onPlayerNameVanished(PlayerctlPlayerManager* manager, PlayerctlPlayerName* player_name,\n                                 gpointer data) -> void {\n\t    auto mpris = static_cast<Mpris*>(data);\n    if (mpris == nullptr) {\n        return;\n    }\n\n    auto player = mpris->dp.get_player(player_name->name);\n    if (player == nullptr) {\n        return;\n    }\n\n    spdlog::debug(\"Mpris::onPlayerNameVanished: Player {} vanished\", player_name->name);\n    if (mpris->player_ == player) {\n        mpris->player_ = nullptr;\n        mpris->event_box_.set_visible(false);\n        mpris->dp.emit();\n    }\n}", "CodeBleu_score": 67.91461869988036}, {"code": "auto Mpris::onPlayerNameVanished(PlayerctlPlayerManager* manager, PlayerctlPlayerName* player_name,\n                                 gpointer data) -> void {\n\t    auto mpris = static_cast<Mpris*>(data);\n    if (mpris == nullptr) {\n        spdlog::warn(\"Mpris instance is nullptr.\");\n        return;\n    }\n    if (player_name == nullptr) {\n        spdlog::warn(\"Player name is nullptr.\");\n        return;\n    }\n    auto player_name_str = playerctl_player_name_get_name(player_name);\n    spdlog::debug(\"Player name vanished: {}\", player_name_str);\n    if (player_name_str == nullptr) {\n        spdlog::warn(\"Player name string is nullptr.\");\n        return;\n    }\n    if (mpris->current_player_ == nullptr) {\n        spdlog::warn(\"Current player is nullptr.\");\n        return;\n    }\n    auto current_player_name = playerctl_player_get_name(mpris->current_player_);\n    if (current_player_name == nullptr) {\n        spdlog::warn(\"Current player name is nullptr.\");\n        return;\n    }\n    if (g_strcmp0(player_name_str, current_player_name) == 0) {\n        mpris->current_player_ = nullptr;\n        mpris->event_box_.set_visible(false);\n        mpris->dp.emit();\n    }\n}", "CodeBleu_score": 57.96659110961936}]}
{"instance_id": "94a47eddc505", "generation_result": [{"code": "auto Mpris::onPlayerPause(PlayerctlPlayer* player, gpointer data) -> void{\n\t    auto mpris = static_cast<Mpris*>(data);\n    if (mpris == nullptr) {\n        return;\n    }\n    spdlog::debug(\"Mpris: Player {} paused\", player->bus_name);\n    mpris->dp.emit();\n}", "CodeBleu_score": 59.51326878410834}, {"code": "auto Mpris::onPlayerPause(PlayerctlPlayer* player, gpointer data) -> void{\n\t    auto mpris = static_cast<Mpris*>(data);\n    if (!mpris)\n        return;\n    spdlog::debug(\"Player pause event\");\n    mpris->dp.emit();\n}", "CodeBleu_score": 77.28452995005011}, {"code": "auto Mpris::onPlayerPause(PlayerctlPlayer* player, gpointer data) -> void{\n\t    auto mpris = static_cast<Mpris*>(data);\n    if (mpris != nullptr) {\n        spdlog::debug(\"Mpris::onPlayerPause()\");\n        mpris->dp.emit();\n    }\n}", "CodeBleu_score": 66.6922532882748}]}
{"instance_id": "716955fc6ff5", "generation_result": [{"code": "void BarIpcClient::onInitialConfig(const struct Ipc::ipc_response& res){\n\t    if (res.payload.empty()) {\n        throw std::runtime_error(\"Received empty response\");\n    }\n\n    std::string payload = res.payload;\n    std::string err;\n    Json::Value root;\n    Json::Reader reader;\n    bool success = reader.parse(payload, root, false);\n    if (!success) {\n        throw std::runtime_error(\"Failed to parse JSON response\");\n    }\n\n    if (!root[\"success\"].asBool()) {\n        throw std::runtime_error(root[\"err\"].asString());\n    }\n\n    auto config = parseConfig(root);\n    onConfigUpdate(config);\n}", "CodeBleu_score": 49.44355211138641}, {"code": "void BarIpcClient::onInitialConfig(const struct Ipc::ipc_response& res){\n\t  // Parse the response\n  rapidjson::Document payload;\n  rapidjson::Document err;\n  rapidjson::Document success;\n  rapidjson::Document parser_;\n  if (parser_.Parse(res.payload).HasParseError()) {\n    throw std::runtime_error(\n        std::string(\"Failed to parse response: \") +\n        rapidjson::GetParseError_En(parser_.GetParseError()));\n  }\n\n  // Check if the response was successful\n  if (!payload.HasMember(\"success\") || !payload[\"success\"].IsBool() ||\n      !payload[\"success\"].GetBool()) {\n    if (!payload.HasMember(\"error\") || !payload[\"error\"].IsString()) {\n      throw std::runtime_error(\n          \"The response was not successful, but didn't contain an error \"\n          \"message\");\n    }\n    throw std::runtime_error(payload[\"error\"].GetString());\n  }\n\n  // Call the callback with the parsed config\n  onConfigUpdate(payload);\n}", "CodeBleu_score": 46.18549877100155}, {"code": "void BarIpcClient::onInitialConfig(const struct Ipc::ipc_response& res){\n\t    // Parse the response\n    std::string err;\n    auto payload = json::parse(res.payload, err);\n    if (!err.empty()) {\n        throw std::runtime_error(\"Failed to parse response payload: \" + err);\n    }\n\n    // Check if the request was successful\n    auto success = payload.find(\"success\");\n    if (success == payload.end() || !success->get<bool>()) {\n        auto err = payload.find(\"error\");\n        if (err == payload.end()) {\n            throw std::runtime_error(\"No error message provided\");\n        } else {\n            throw std::runtime_error(err->get<std::string>());\n        }\n    }\n\n    // Parse the configuration\n    auto config = payload.find(\"config\");\n    if (config == payload.end()) {\n        throw std::runtime_error(\"No config provided\");\n    }\n\n    // Call the callback\n    onConfigUpdate(config->get<json>());\n}", "CodeBleu_score": 51.58500776743236}]}
{"instance_id": "e8aa483d1693", "generation_result": [{"code": "auto CFFI::doAction(const std::string& name) -> void{\n\t  assert(this);\n  if(!name.empty()) {\n    hooks_.doAction(this, name.c_str());\n  }\n}", "CodeBleu_score": 49.70259185246854}, {"code": "auto CFFI::doAction(const std::string& name) -> void{\n\t  assert(this);\n  if(!name.empty()) {\n    hooks_.doAction(this, name.c_str());\n  }\n}", "CodeBleu_score": 49.70259185246854}, {"code": "auto CFFI::doAction(const std::string& name) -> void{\n\t  assert(this);\n  if (!name.empty()) {\n    hooks_.doAction(this, name.c_str());\n  }\n}", "CodeBleu_score": 52.061432212156674}]}
