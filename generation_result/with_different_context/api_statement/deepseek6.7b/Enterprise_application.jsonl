{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t\n    # Get the attachment IDs from the request arguments\n    attachment_ids = self.request.httprequest.args.getlist('attachment_ids[]')\n    # Verify the access rights and rules for the attachments\n    attachments = self.check_access_rights('read', attachment_ids)\n    attachments = self.check_access_rule('read', attachments)\n    # Build the zip file from the attachments' content\n    zip_file, zip_filename, headers = self._build_zip_from_attachments(attachments)\n    # Prepare HTTP headers for the zip file\n    response = self.request.make_response(zip_file.getvalue(), headers=headers)\n    response.headers.add('Content-Disposition', 'attachment; filename=%s' % zip_filename)\n    # Return the zip file as an HTTP response\n    return response", "CodeBleu_score": 37.494899856778986}, {"code": "def export_zip_documents(self, **args)\n\t\n    attachments = request.env['ir.attachment']\n    attachments_ids = request.httprequest.args.getlist('attachment_ids[]')\n    attachments = attachments.browse(attachments_ids)\n    attachments.check_access_rights('read')\n    attachments.check_access_rule(raise_exception=True)\n    zip_file = attachments._build_zip_from_attachments()\n    headers = attachments._get_zip_headers()\n    return request.make_response(zip_file, headers=headers)", "CodeBleu_score": 40.31273086202194}, {"code": "def export_zip_documents(self, **args)\n\t\n    # Retrieve attachment IDs from HTTP request arguments\n    attachment_ids = request.args.getlist('attachment_ids')\n\n    # Verify read access rights and rules for the attachments\n    attachments = self.check_access_rights('read', raise_exception=False)\n    attachments = self.check_access_rule(attachments, raise_exception=False)\n\n    # Build a zip file from the attachments' content\n    zip_file = attachments._build_zip_from_attachments(attachments)\n\n    # Prepare HTTP headers for the zip file\n    headers = attachments._get_zip_headers(zip_file, attachments)\n\n    # Return the zip file as an HTTP response\n    return request.make_response(zip_file, headers=headers)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 36.17443881429024}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(AccountDashboard, self)._prepare_home_portal_values(counters)\n    if self.env['account.move'].check_access_rights('read', raise_exception=False):\n        invoice_count = self._get_invoices_domain(user_id=self.env.user.id)\n        values['invoice_count'] = invoice_count\n        values['bill_count'] = self.env['account.move'].search_count(invoice_count)\n    return values", "CodeBleu_score": 30.740343147532613}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(Home, self)._prepare_home_portal_values(counters)\n    Invoice = self.env[\"account.move\"]\n    if Invoice.check_access_rights(\"read\", raise_exception=False):\n        values[\"invoice_count\"] = counters.get(\"account.move\", 0)\n        values[\"bill_count\"] = counters.get(\"account.move.in\", 0)\n    return values\n\n", "CodeBleu_score": 18.042385638958677}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(ResUsers, self)._prepare_home_portal_values(counters)\n    Invoice = self.env['account.move']\n    if self.user_has_groups('account.group_account_invoice'):\n        invoice_count = Invoice.search_count(self._get_invoices_domain())\n        values['invoice_count'] = invoice_count\n    if self.user_has_groups('account.group_account_readonly'):\n        bill_count = Invoice.search_count(self._get_invoices_domain(bills=True))\n        values['bill_count'] = bill_count\n    return values\n\n\n\n", "CodeBleu_score": 35.05357350318902}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    context = self.context\n    portal_pager = self.portal_pager()\n    portal_pager.set_page(page)\n    portal_pager.set_items(len(self._prepare_my_invoices_values()))\n    portal_pager.set_url(self.absolute_url())\n    values = {\n        'page': page,\n        'portal_pager': portal_pager,\n        'date_begin': date_begin,\n        'date_end': date_end,\n        'sortby': sortby,\n        'filterby': filterby,\n        'my_invoices': self._prepare_my_invoices_values(),\n    }\n    values.update(self._prepare_portal_layout_values())\n    request = self.request\n    request.set('disable_border', True)\n    request.set('disable_plone.leftcolumn', True)\n    request.set('disable_plone.rightcolumn', True)\n    return self.index(**values)\n\n", "CodeBleu_score": 30.761145295889857}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    # Prepare values\n    self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby, **kw)\n    # Prepare pager\n    portal_pager = self.portal_pager()\n    portal_pager.set_url(self.absolute_url())\n    # Render the page\n    return self.index()\n\n", "CodeBleu_score": 19.007897280995927}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby, **kw)\n    portal_pager = self._get_portal_pager(values)\n    values.update(portal_pager)\n    request = self.request\n    request.set('disable_border', 1)\n    request.set('disable_plone.leftcolumn', 1)\n    request.set('disable_plone.rightcolumn', 1)\n    request.set('disable_plone.top', 1)\n    request.set('disable_plone.bottom', 1)\n    request.set('disable_plone.footer', 1)\n    request.set('disable_plone.portalheader', 1)\n    request.set('disable_plone.portalfooter', 1)\n    request.set('disable_plone.breadcrumbs', 1)\n    request.set('disable_plone.viewletmanager', 1)\n    request.set('disable_plone.right-column', 1)\n    request.set('disable_plone.left-column', 1)\n    request.set('disable_plone.portal-column', 1)\n    request.set('disable_plone.portal-footer', 1)\n    request.set('disable_plone.portal-header', 1)\n    request.set('disable_plone.portal-breadcrumbs', 1)\n    request.set('disable_plone.portal-top', 1)\n    request.set('disable_plone.portal-bottom', 1)\n    request.set('disable_plone.portal-left', 1)\n    request.set('disable_plone.portal-right', 1)\n    request.set('disable_plone.portal-title', 1)\n    request.set('disable_plone.portal-navigation', 1)\n    request.set('disable_plone.portal-logo', 1)\n    request.set('disable_plone.portal-search', 1)\n    request", "CodeBleu_score": 26.587015075373856}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    invoice_sudo = self._document_check_access('account.move', invoice_id, access_token=access_token)\n    if not invoice_sudo:\n        return request.redirect('/my')\n    if report_type in ('html', 'pdf', 'text'):\n        report_name = invoice_sudo._get_invoice_report_filename(report_type)\n        report_title = _('Invoice')\n        if report_type == 'html':\n            response = self._get_report_html(invoice_sudo, report_name, report_title, **kw)\n        elif report_type == 'pdf':\n            response = self._get_report_pdf(invoice_sudo, report_name, report_title, **kw)\n        elif report_type == 'text':\n            response = self._get_report_text(invoice_sudo, report_name, report_title, **kw)\n        if download:\n            return response\n        else:\n            return request.make_response(response)\n    elif report_type == 'zip':\n        invoice_sudo._get_invoice_legal_documents()\n        attachments = invoice_sudo.message_ids.mapped('attachment_ids')\n        if len(attachments) > 1:\n            zip_headers = self._get_zip_headers(attachments)\n            response = self._build_zip_from_attachments(attachments)\n            return request.make_response(response, headers=zip_headers)\n        elif attachments:\n            return request.redirect('/web/content/%s?download=true' % attachments[0].id)\n        else:\n            return request.redirect('/my')\n    else:\n        values = self._invoice_get_page_view_values(invoice_sudo, access_token, **kw)\n        return request.render(\"account.portal_invoice_page\", values)\n\n", "CodeBleu_score": 50.08052338342633}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    # Check access\n    invoice_sudo = self._document_check_access('account.account_invoices', invoice_id, access_token=access_token)\n    if not invoice_sudo:\n        return request.redirect('/my')\n    # Download of a posted invoice\n    if download:\n        if report_type == 'pdf':\n            invoice_sudo._get_invoice_report_filename()\n            attachments = invoice_sudo._get_invoice_legal_documents()\n            if len(attachments) > 1:\n                attachments = attachments.sudo()\n                return self._build_zip_from_attachments(attachments)\n            else:\n                return attachments.sudo().datas\n        elif report_type == 'text':\n            return invoice_sudo.sudo()._get_invoice_report_as_text()\n        elif report_type == 'html':\n            return invoice_sudo.sudo()._get_invoice_report_as_html()\n        else:\n            raise UserError(_('Report type %s is not supported.') % report_type)\n    # Show the report\n    if report_type == 'html':\n        invoice_sudo = invoice_sudo.sudo()\n        if invoice_sudo.state != 'draft':\n            invoice_sudo.action_invoice_open()\n        self._show_report(invoice_sudo, report_type=report_type, download=download)\n        return request.render('account.account_invoice_report_template', self._invoice_get_page_view_values(invoice_sudo, report_type))\n    else:\n        return self._show_report(invoice_sudo, report_type=report_type, download=download)\n\n", "CodeBleu_score": 40.51097067403717}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    invoice_sudo = self._document_check_access('account.move', invoice_id, access_token=access_token)\n    if not invoice_sudo:\n        return request.redirect('/my')\n    if download and invoice_sudo.state == 'posted':\n        if report_type == 'html':\n            return self._invoice_get_page_view_values(invoice_sudo, 'html')\n        if report_type == 'pdf':\n            invoice_report = self._invoice_get_page_view_values(invoice_sudo, 'pdf')\n            if invoice_report:\n                return invoice_report\n        if report_type == 'text':\n            invoice_report = self._invoice_get_page_view_values(invoice_sudo, 'text')\n            if invoice_report:\n                return invoice_report\n        if report_type == 'xml':\n            invoice_report = self._invoice_get_page_view_values(invoice_sudo, 'xml')\n            if invoice_report:\n                return invoice_report\n        if report_type == 'qweb-pdf':\n            invoice_report = self._invoice_get_page_view_values(invoice_sudo, 'qweb-pdf')\n            if invoice_report:\n                return invoice_report\n        if report_type == 'qweb-text':\n            invoice_report = self._invoice_get_page_view_values(invoice_sudo, 'qweb-text')\n            if invoice_report:\n                return invoice_report\n        if report_type == 'qweb-xml':\n            invoice_report = self._invoice_get_page_view_values(invoice_sudo, 'qweb-xml')\n            if invoice_report:\n                return invoice_report\n        if report_type == 'account':\n            invoice_report = self._invoice_get_page_view_values(invoice_sudo, 'account')\n            if invoice_report:\n                return invoice_report\n        if report_type == 'account-html':\n            invoice_report = self._inv", "CodeBleu_score": 29.25480199772611}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t\n    if not company:\n        company = self.env.company\n    domain = [\n        (\"company_id\", \"=\", company.id),\n        (\"sale_ok\", \"=\", True),\n        (\"purchase_ok\", \"=\", True),\n    ]\n    filtered_domain = self.env[\"product.template\"].filtered_domain(domain)\n    if company.account_sale_tax_id:\n        filtered_domain.write({\"taxes_id\": [(6, 0, company.account_sale_tax_id.ids)]})\n    if company.account_purchase_tax_id:\n        filtered_domain.write(\n            {\"supplier_taxes_id\": [(6, 0, company.account_purchase_tax_id.ids)]}\n        )\n    return filtered_domain\n\n", "CodeBleu_score": 31.723171535166994}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    company = company or self.env.company\n    domain = self._get_domain_for_company(company)\n    prod_templates = self.filtered_domain(domain)\n    prod_templates_sale = prod_templates.filtered(lambda template: template.supplier_taxes_id)\n    prod_templates_purchase = prod_templates.filtered(lambda template: template.taxes_id)\n    if company.account_sale_tax_id:\n        prod_templates_sale.write({'supplier_taxes_id': [(6, 0, company.account_sale_tax_id.ids)]})\n    if company.account_purchase_tax_id:\n        prod_templates_purchase.write({'taxes_id': [(6, 0, company.account_purchase_tax_id.ids)]})\n    return prod_templates\n\n", "CodeBleu_score": 30.354048153473368}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    product_templates = self.env['product.template']\n    if company:\n        domain = [('company_id', '=', company.id)]\n    else:\n        domain = []\n    domain += [('demo_type', '=', 'product')]\n    product_templates = self.env['product.template'].search(domain)\n    if company and company.account_sale_tax_id:\n        product_templates.filtered(lambda p: not p.taxes_id).write({'taxes_id': [(4, company.account_sale_tax_id.id, 0)]})\n    if company and company.account_purchase_tax_id:\n        product_templates.filtered(lambda p: not p.supplier_taxes_id).write({'supplier_taxes_id': [(4, company.account_purchase_tax_id.id, 0)]})\n    return product_templates\n\n\n", "CodeBleu_score": 34.294036517750435}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env['account.account'].search([\n        ('company_id', '=', company.id),\n        ('code', '=', xml_id),\n    ], limit=1)\n    if not account:\n        account = self.env['account.account'].search([\n            ('company_id', '=', company.id),\n            ('user_type_id', '=', account_type.id),\n        ], limit=1)\n    if not account:\n        account = self.env['account.account'].search([\n            ('company_id', '=', company.id),\n        ], limit=1)\n    return account", "CodeBleu_score": 50.29641034129513}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    try:\n        account = self.env['account.account'].search([('id', '=', self._get_demo_account_id(xml_id, company))], limit=1)\n    except ValueError:\n        account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id', '=', account_type.id)], limit=1)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n    return account\n", "CodeBleu_score": 42.851411380098895}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    # get the account from the ir.model.data table\n    account = self.env['ir.model.data'].sudo().search([\n        ('module', '=', 'l10n_generic_coa'),\n        ('name', '=', xml_id),\n        ('model', '=', 'account.account'),\n        ('res_id', '=', company.id)\n    ], limit=1).account_id\n    if not account:\n        # get the account from the account.account table\n        account = self.env['account.account'].sudo().search([\n            ('company_id', '=', company.id),\n            ('code', '=', xml_id),\n            ('user_type_id', '=', account_type.id)\n        ], limit=1)\n    if not account:\n        # get the account from the account.account table\n        account = self.env['account.account'].sudo().search([\n            ('company_id', '=', company.id),\n            ('user_type_id', '=', account_type.id)\n        ], limit=1)\n    return account\n\n", "CodeBleu_score": 54.6395559101023}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    if self.account_type == 'current_year_earnings':\n        current_year_earnings_accounts = self.search([('account_type', '=', 'current_year_earnings'), ('company_id', '=', self.company_id.id)])\n        if len(current_year_earnings_accounts) > 1:\n            raise ValidationError(_('There can only be one account of type \"Current Year Earnings\" per company.'))\n\n", "CodeBleu_score": 31.62203827141581}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    current_year_earning_accounts = self.env['account.account'].search([('account_type', '=', 'current_year_earning')])\n    for company in current_year_earning_accounts.mapped('company_id'):\n        if len(current_year_earning_accounts.filtered(lambda a: a.company_id == company)) > 1:\n            raise ValidationError(_('There can be only one account of type \"Current Year Earnings\" per company.'))", "CodeBleu_score": 23.345907696703485}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    grouped_accounts = self.env['account.account'].read_group([('code', '=', '140000'), ('company_id', '=', self.company_id.id)], ['company_id'], ['company_id'])\n    if len(grouped_accounts) > 1:\n        raise ValidationError(_('Only one account with the \"Current Year Earnings\" type is allowed per company.'))", "CodeBleu_score": 19.97424698136899}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self._context.get('order_accounts_by_frequency_for_partner'):\n        domain = [('partner_id', '=', self._context['partner_id'])]\n        order = self._order_accounts_by_frequency_for_partner()\n    else:\n        domain = expression.AND([\n            [('name', operator, name)],\n            domain or [],\n        ])\n    return self.search(domain, limit=limit, order=order)\n\n\n", "CodeBleu_score": 33.49682489716698}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self._context.get('partner_id'):\n        partner_id = self._context['partner_id']\n        domain = [('partner_id', '=', partner_id)]\n        order = self._order_accounts_by_frequency_for_partner(partner_id)\n        return self.search(domain, limit=limit, order=order)\n    return super(AccountAnalyticAccount, self)._name_search(name=name, domain=domain, operator=operator, limit=limit, order=order)\n", "CodeBleu_score": 30.266645546515527}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and not self.env.context.get('partner_id'):\n        return self._order_accounts_by_frequency_for_partner()\n    if not domain:\n        domain = []\n    if name:\n        domain = expression.AND([domain, [('name', operator, name)]])\n    return self.search(domain, limit=limit, order=order)\n\n", "CodeBleu_score": 27.556469268621786}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t\n    if not new.exists():\n        raise UserError(_(\"The record you are trying to copy translations to does not exist.\"))\n    if new.name_field in excluded:\n        raise UserError(_(\"You cannot exclude the 'name' field.\"))\n    excluded = set(excluded)\n    excluded.add(new.name_field)\n    if new.name_field._get_stored_translations():\n        new.name_field._update_raw(new.name_field._get_stored_translations())\n    for field in self.fields:\n        if field not in excluded and field in new.fields:\n            new[field] = self[field]", "CodeBleu_score": 33.86254491039258}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    if new._name == self._name:\n        return\n    if not self.env.is_translatable(self._name):\n        return\n    if new._name == self._name:\n        return\n    if not self.env.is_translatable(self._name):\n        return\n    if new._name == self._name:\n        return\n    if not self.env.is_translatable(self._name):\n        return\n    if new._name == self._name:\n        return\n    if not self.env.is_translatable(self._name):\n        return\n    if new._name == self._name:\n        return\n    if not self.env.is_translatable(self._name):\n        return\n    if new._name == self._name:\n        return\n    if not self.env.is_translatable(self._name):\n        return\n    if new._name == self._name:\n        return\n    if not self.env.is_translatable(self._name):\n        return\n    if new._name == self._name:\n        return\n    if not self.env.is_translatable(self._name):\n        return\n    if new._name == self._name:\n        return\n    if not self.env.is_translatable(self._name):\n        return\n    if new._name == self._name:\n        return\n    if not self.env.is_translatable(self._name):\n        return\n    if new._name == self._name:\n        return\n    if not self.env.is_translatable(self._name):\n        return\n    if new._name == self._name:\n        return\n    if not self.env.is_translatable(self._name):\n        return\n    if new._name == self._name:\n        return\n    if not self.env.is_translatable(self._name):\n        return\n    if new._name == self._name:\n        return\n    if not self.env.is_translatable(self._name):\n        return\n    if new._name == self._name:\n        return\n    if not self.env.", "CodeBleu_score": 17.559339246441112}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    if new.name_field._get_stored_translations():\n        new.name_field.copy_translations(new, excluded=excluded)\n        new.name_field.update_raw(new)\n    if new.name_field.name_pattern:\n        new.name_field.update_cache(new)\n    return new", "CodeBleu_score": 25.545457029173928}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\t\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['context'] = {'default_type': 'out_invoice', 'default_invoice_origin': self.name}\n    action['domain'] = [('id', 'in', self._search([]))]\n    return action\n\n", "CodeBleu_score": 18.065760007126674}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    sale_types = self.get_sale_types()\n    query = self.env['account.move.line'].search_read_sale_types(sale_types)\n    query.select(self.env['account.move.line']._fields.get('move_id', 'account_move_id'))\n    query.add_where(self.env['account.move.line']._where_calc_accounts(self.id, self.analytic_account_ids))\n    move_ids = self.env.cr.execute(query.SQL()).dictfetchall()\n    move_ids = [move_id['move_id'] for move_id in move_ids]\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['domain'] = [('id', 'in', move_ids)]\n    action['context'] = {'create': False}\n    return action\n\n", "CodeBleu_score": 38.78599806541063}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    sale_types = self.get_sale_types()\n    query = self.env['account.move.line'].search_read_sale_types(sale_types)\n    query.select(\n        \"DISTINCT account_move_id AS id, account_move_id AS move_id, partner_id AS partner_id, date AS date, journal_id AS journal_id, ref AS ref, move_type AS move_type, state AS state, name AS name, amount_residual AS amount_residual, amount_total AS amount_total, amount_untaxed AS amount_untaxed, amount_tax AS amount_tax, amount_total_signed AS amount_total_signed, amount_untaxed_signed AS amount_untaxed_signed, amount_tax_signed AS amount_tax_signed, balance AS balance, balance_signed AS balance_signed, account_id AS account_id, account_internal_type AS account_internal_type, currency_id AS currency_id, company_id AS company_id, move_id AS move_id, date_maturity AS date_maturity, move_id AS move_id, move_id AS move_id, move_id AS move_id, move_id AS move_id, move_id AS move_id, move_id AS move_id, move_id AS move_id, move_id AS move_id, move_id AS move_id, move_id AS move_id, move_id AS move_id, move_id AS move_id, move_id AS move_id, move_id AS move_id, move_id AS move_id, move_id AS move_id, move_id AS move_id, move_id AS move_id, move_id AS move_id, move_id AS move_id, move_id AS move_id, move_id AS move_id, move_id AS move_id, move_id AS move_id, move_id AS move_id, move_id AS move_id, move_id AS move_id, move_id AS move_id, move_id AS move_id, move_id AS", "CodeBleu_score": 12.399062783726466}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\t\n    action = self.env[\"ir.actions.act_window\"]._for_xml_id(\"account.action_move_in_invoice_type\")\n    action[\"context\"] = {\"default_move_type\": \"in_invoice\", \"search_default_purchase_receipt\": 1}\n    if len(self) == 1:\n        action[\"views\"] = [\n            (self.env.ref(\"account.view_move_form\").id, \"form\"),\n            (self.env.ref(\"account.view_move_line_tree\").id, \"tree\"),\n            (self.env.ref(\"account.view_move_line_form\").id, \"form\"),\n        ]\n        action[\"res_id\"] = self.id\n    else:\n        action[\"domain\"] = [(\"id\", \"in\", self.ids)]\n    return action\n\n", "CodeBleu_score": 29.427703274065646}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    purchase_types = self.get_purchase_types()\n    query = self._query_analytic_accounts(purchase_types)\n    query.select(\n        \"DISTINCT aml.move_id AS move_id\",\n        \"aml.id AS id\",\n        \"aml.name AS name\",\n        \"aml.date AS date\",\n        \"aml.ref AS ref\",\n        \"aml.partner_id AS partner_id\",\n        \"aml.partner_id AS partner_name\",\n        \"aml.amount_residual AS amount_residual\",\n        \"aml.amount_residual_currency AS amount_residual_currency\",\n        \"aml.currency_id AS currency_id\",\n        \"aml.debit AS debit\",\n        \"aml.credit AS credit\",\n        \"aml.balance AS balance\",\n        \"aml.move_id AS move_id\",\n        \"aml.move_id AS move_name\",\n        \"aml.move_type AS move_type\",\n        \"aml.state AS state\",\n        \"aml.id AS move_line_id\",\n        \"aml.id AS move_line_name\",\n        \"aml.id AS move_line_id\",\n        \"aml.id AS move_line_name\",\n        \"aml.id AS move_line_id\",\n        \"aml.id AS move_line_name\",\n        \"aml.id AS move_line_id\",\n        \"aml.id AS move_line_name\",\n        \"aml.id AS move_line_id\",\n        \"aml.id AS move_line_name\",\n        \"aml.id AS move_line_id\",\n        \"aml.id AS move_line_name\",\n        \"aml.id AS move_line_id\",\n        \"aml.id AS move_line_name\",\n        \"aml.id AS move_line_id\",\n        \"aml.id AS move_line_name\",\n        \"aml.id AS move_line_id\",\n        \"aml.id AS move_line_name\",\n        \"aml.id AS move_line_id\",\n        \"aml.id AS move_line", "CodeBleu_score": 5.742360550127205}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    query = self.env['account.move.line'].read_group(\n        [('purchase_line_id', 'in', self.purchase_line_ids.ids)],\n        ['move_id'],\n        ['move_id'])\n    move_ids = [x['move_id'][0] for x in query if x['move_id']]\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['domain'] = [('id', 'in', move_ids)]\n    action['context'] = {'default_move_type': 'in_invoice'}\n    return action\n\n", "CodeBleu_score": 22.70262694175485}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        values.pop('attachment_ids')\n        self._check_attachments()\n    with self.env.do_in_draft():\n        return super().write(values)", "CodeBleu_score": 36.22452021454582}, {"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        values.pop('attachment_ids')\n        self._check_attachments()\n    with self.env.do_in_draft():\n        return super(MailThread, self).write(values)", "CodeBleu_score": 35.02913460850173}, {"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        values.pop('attachment_ids')\n    with self._check_attachments():\n        return super(MailMessage, self).write(values)\n\n", "CodeBleu_score": 31.62368850536201}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_one()\n    if self.env.context.get('no_create_bank_account'):\n        return self.env['res.partner.bank'].new()\n    return self.env['res.partner.bank'].search([\n        ('acc_number', '=', self.account_number),\n        ('partner_id', '=', self.partner_id.id),\n        ('company_id', '=', self.company_id.id),\n    ], limit=1) or self.env['res.partner.bank'].create({\n        'acc_number': self.account_number,\n        'partner_id': self.partner_id.id,\n        'company_id': self.company_id.id,\n    })\n\n", "CodeBleu_score": 39.92193539108557}, {"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_one()\n    with_context = self.with_context(force_company=self.company_id.id)\n    sudo = self.sudo(False)\n    create = self.env[\"res.partner.bank\"].create\n    search = self.env[\"res.partner.bank\"].search\n    bank_account = self.bank_account.filtered(lambda a: a.company_id == self.company_id)\n    if self.env.context.get(\"skip_bank_account_creation\"):\n        return bank_account\n    if not bank_account:\n        bank_account = search(\n            [\n                (\"acc_number\", \"=\", self.bank_account_id.acc_number),\n                (\"partner_id\", \"=\", self.partner_id.id),\n                (\"company_id\", \"=\", self.company_id.id),\n            ]\n        )\n        if not bank_account:\n            bank_account = create(\n                {\n                    \"acc_number\": self.bank_account_id.acc_number,\n                    \"partner_id\": self.partner_id.id,\n                    \"company_id\": self.company_id.id,\n                }\n            )\n    return bank_account\n\n", "CodeBleu_score": 39.942552715213154}, {"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_1\n    if self.env.context.get('skip_bank_account_creation'):\n        return self.env['account.bank.account'].browse()\n    return self.env['account.bank.account'].search([('acc_number', '=', self.acc_number), ('partner_id', '=', self.partner_id.id), ('company_id', '=', self.company_id.id)], limit=1)\n\n", "CodeBleu_score": 23.205500620644237}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    res = {}\n    self = self.with_context(force_company=currency.company_id.id)\n    res['transaction_amount'] = amount_currency\n    res['transaction_balance'] = balance\n    res['transaction_currency'] = currency\n    res['transaction_currency_rate'] = 1.0\n    res['journal_amount'] = 0.0\n    res['company_amount'] = 0.0\n    res['company_currency'] = currency.company_id.currency_id\n    res['company_currency_rate'] = 1.0\n    res['journal_currency'] = self.journal_id.currency_id\n    res['journal_currency_rate'] = 1.0\n    res['company_currency_rate'] = self.journal_id.currency_id._get_conversion_rate(currency.company_id.currency_id)\n    res['journal_currency_rate'] = self.journal_id.currency_id._get_conversion_rate(currency)\n    if self.journal_id.currency_id.is_zero(res['journal_currency_rate']):\n        res['journal_amount'] = res['transaction_amount']\n        res['company_amount'] = res['transaction_amount']\n    else:\n        res['journal_amount'] = res['transaction_amount'] * res['journal_currency_rate']\n        res['company_amount'] = res['transaction_amount'] * res['company_currency_rate']\n    if self.journal_id.currency_id == currency:\n        res['transaction_amount'] = res['transaction_amount'] * res['company_currency_rate']\n        res['transaction_balance'] = res['transaction_balance'] * res['company_currency_rate']\n    elif self.journal_id.currency_id.is_zero(res['journal_currency_rate']):\n        res['transaction_amount'] = res['transaction_amount'] * res['company_currency_rate']\n        res['transaction_balance'] = res['transaction_balance'] * res['company_currency_rate']\n    else:\n        res['transaction_amount'] = res['transaction_amount'] * res['j", "CodeBleu_score": 25.68332832100487}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    transaction_currency = currency\n    company_currency = self.company_id.currency_id\n    amount_currency = amount_currency or self.amount_currency\n    journal_currency = self.journal_id.currency_id\n    amount_company = self._get_accounting_amounts_and_currencies(company_currency, amount_currency)['amount_company']\n    amount_journal = self._get_accounting_amounts_and_currencies(journal_currency, amount_currency)['amount_journal']\n    amount_transaction = self._get_accounting_amounts_and_currencies(transaction_currency, amount_currency)['amount_transaction']\n    if transaction_currency.is_zero(amount_transaction):\n        amount_transaction = amount_currency\n    if transaction_currency.is_zero(amount_journal):\n        amount_journal = amount_currency\n    if transaction_currency.is_zero(amount_company):\n        amount_company = amount_currency\n    if transaction_currency.is_zero(amount_currency):\n        amount_currency = amount_transaction\n    if transaction_currency.is_zero(balance):\n        balance = amount_transaction\n    return {\n        'amount_currency': amount_currency,\n        'amount_company': amount_company,\n        'amount_journal': amount_journal,\n        'amount_transaction': amount_transaction,\n        'balance': balance,\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 23.774642595802643}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    transaction_currency = self.currency_id\n    company_currency = self.company_id.currency_id\n    journal_currency = self.journal_id.currency_id\n    rounding = currency.rounding\n    amount = balance\n    amount_currency = amount_currency\n    if currency.is_zero(amount_currency):\n        amount_currency = currency.round(amount_currency)\n    if currency.is_zero(amount):\n        amount = currency.round(amount)\n    if currency.is_zero(rounding):\n        rounding = currency.round(rounding)\n    if currency.is_zero(rounding):\n        rounding = currency.round(rounding)\n    if currency.is_zero(rounding):\n        rounding = currency.round(rounding)\n    if currency.is_zero(rounding):\n        rounding = currency.round(rounding)\n    if currency.is_zero(rounding):\n        rounding = currency.round(rounding)\n    if currency.is_zero(rounding):\n        rounding = currency.round(rounding)\n    if currency.is_zero(rounding):\n        rounding = currency.round(rounding)\n    if currency.is_zero(rounding):\n        rounding = currency.round(rounding)\n    if currency.is_zero(rounding):\n        rounding = currency.round(rounding)\n    if currency.is_zero(rounding):\n        rounding = currency.round(rounding)\n    if currency.is_zero(rounding):\n        rounding = currency.round(rounding)\n    if currency.is_zero(rounding):\n        rounding = currency.round(rounding)\n    if currency.is_zero(rounding):\n        rounding = currency.round(rounding)\n    if currency.is_zero(rounding):\n        rounding = currency.round(rounding)\n    if currency.is_zero(rounding):\n        rounding = currency.round(rounding)\n    if currency.is_zero(rounding):\n        rounding = currency.round(rounding)\n    if currency.is_", "CodeBleu_score": 17.84098736046515}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    self.ensure_one()\n    self.outbound_payment_method_line_ids = self.env['account.payment.method.line']\n    if self.type in ['bank', 'cash']:\n        for payment_method in self._default_outbound_payment_methods():\n            self.outbound_payment_method_line_ids |= self.env['account.payment.method.line'].new({\n                'payment_method_id': payment_method.id,\n                'sequence': payment_method.sequence,\n                'bank_ids': [(6, 0, payment_method.bank_ids.ids)],\n                'journal_id': self.id,\n                'is_custom': True,\n            })\n\n", "CodeBleu_score": 27.040824143765523}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    self.ensure_one()\n    self.outbound_payment_method_line_ids = [Command.create({\n        'payment_method_id': method.id,\n        'journal_id': self.id,\n    }) for method in self.env['account.payment.method'].search([\n        ('payment_type', '=', 'outbound'),\n        ('code', '=', self.type),\n    ])]\n\n", "CodeBleu_score": 20.570205224405523}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids.unlink()\n        if journal.type in ('bank', 'cash'):\n            for method in journal._default_outbound_payment_methods():\n                journal.outbound_payment_method_line_ids |= self.env['account.journal.outbound_payment_method']._create(method)\n\n", "CodeBleu_score": 33.732238216229504}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t\n    for move in self:\n        if not move.date and not move.invoice_date:\n            move.date = fields.Date.context_today(move)\n        elif move.invoice_date and not move.is_sale_document:\n            move.date = move._get_accounting_date(move.invoice_date)\n            if move.date != fields.Date.context_today(move):\n                move.date = move.date\n                move.with_delay()._recompute_fields(move._fields.keys())\n\n", "CodeBleu_score": 32.451756811333546}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if not move.date and not move.invoice_date:\n            move.date = fields.Date.context_today(move)\n        elif move.invoice_date and not move.is_sale_document:\n            move.date = move._get_accounting_date(move.invoice_date)\n            if move.date != fields.Date.context_today(move):\n                move.date = move.date\n                move._add_to_compute(move.line_ids, ['tax_base_amount_temp', 'tax_amount_temp'])\n\n", "CodeBleu_score": 33.402469866659175}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if move.date == fields.Date.context_today(move):\n            continue\n        if move.invoice_date and not move.date:\n            if not move.is_sale_document():\n                move.date = move._get_accounting_date()\n        if move.date != fields.Date.context_today(move):\n            move.date = fields.Date.context_today(move)\n            move.add_to_compute(self._fields.get('date'), move.date)\n\n", "CodeBleu_score": 34.82394805134195}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document:\n            if move.partner_id.property_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_payment_term_id\n            else:\n                move.invoice_payment_term_id = False\n        elif move.is_purchase_document:\n            if move.partner_id.supplier_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.supplier_payment_term_id\n            else:\n                move.invoice_payment_term_id = False\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 45.77141156983625}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document:\n            move.invoice_payment_term_id = move.partner_id.property_payment_term_id\n        elif move.is_purchase_document:\n            move.invoice_payment_term_id = move.partner_id.supplier_payment_term_id\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 41.92387873091203}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document:\n            if move.partner_id.property_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_payment_term_id\n            else:\n                move.invoice_payment_term_id = False\n        elif move.is_purchase_document:\n            if move.partner_id.supplier_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.supplier_payment_term_id\n            else:\n                move.invoice_payment_term_id = False\n        else:\n            move.invoice_payment_term_id = False", "CodeBleu_score": 45.77141156983625}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t\n    grouped_taxes = defaultdict(lambda: self.env['account.tax'])\n    for tax in self:\n        grouped_taxes[(tax.country_id, tax.company_id)].add(tax)\n    for (country_id, company_id), taxes in grouped_taxes.items():\n        tax_group_id = self.env['account.tax.group'].search([\n            ('country_id', '=', country_id.id),\n            ('company_id', '=', company_id.id),\n        ], limit=1)\n        if not tax_group_id:\n            tax_group_id = self.env['account.tax.group'].search([\n                ('country_id', '=', False),\n                ('company_id', '=', company_id.id),\n            ], limit=1)\n        for tax in taxes:\n            tax.tax_group_id = tax_group_id\n", "CodeBleu_score": 36.430586013820026}, {"code": " def _compute_tax_group_id(self)\n\t\n    by_country_company = defaultdict(lambda: defaultdict(lambda: defaultdict(list)))\n    for tax in self:\n        by_country_company[tax.country_id][tax.company_id][tax.tax_group_id].append(tax)\n    for country, company_to_tax_groups in by_country_company.items():\n        for company, tax_groups in company_to_tax_groups.items():\n            for tax_group, taxes in tax_groups.items():\n                if tax_group:\n                    continue\n                # Search for a tax group with the same country and company\n                tax_group = self.search([\n                    ('country_id', '=', country.id),\n                    ('company_id', '=', company.id),\n                    ('tax_group_id', '=', False),\n                ], limit=1)\n                if tax_group:\n                    for tax in taxes:\n                        tax.tax_group_id = tax_group\n                else:\n                    # Search for a tax group without a specified country but within the same company\n                    tax_group = self.search([\n                        ('country_id', '=', False),\n                        ('company_id', '=', company.id),\n                        ('tax_group_id', '=', False),\n                    ], limit=1)\n                    if tax_group:\n                        for tax in taxes:\n                            tax.tax_group_id = tax_group\n\n\n def _check_company_domain(self):\n    \"\"\"Check that the company of the tax is the same as the company of the tax group.\"\"\"\n    for tax in self:\n        if tax.tax_group_id and tax.tax_group_id.company_id != tax.company_id:\n            raise ValidationError(_('The company of the tax group must be the same as the company of the tax.'))\n\n\n def _check_company_domain(self):\n    \"\"\"Check that the company of the tax is the same as the company of the tax group.\"\"\"\n    for tax in self:\n        if tax.tax_group_id and tax.tax_group_id.company_id != tax.company_id:\n            raise ValidationError(_('The company of the", "CodeBleu_score": 33.18387042230652}, {"code": " def _compute_tax_group_id(self)\n\t\n    by_country_company = defaultdict(lambda: defaultdict(lambda: self.env['account.tax.group']))\n    for tax in self:\n        by_country_company[tax.country_id][tax.company_id] |= tax.tax_group_id\n    for country_id, company_dict in by_country_company.items():\n        for company_id, tax_group in company_dict.items():\n            if not tax_group:\n                tax_group = self.search([\n                    ('country_id', '=', country_id),\n                    ('company_id', '=', company_id),\n                    ('country_id', '=', False)\n                ], limit=1)\n            tax.tax_group_id = tax_group", "CodeBleu_score": 34.06752928920145}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set the database in the session\n    session = requests.Session()\n    response = session.get(url + \"/login\")\n    session.raise_for_status()\n    # Prepare the POST request data\n    data = {\n        \"username\": login,\n        \"password\": password,\n        \"db\": db,\n        \"force\": force\n    }\n    # Upload the module file\n    files = {\"file\": open(module_file, \"rb\")}\n    response = session.post(url + \"/base_import_module/login_upload\", data=data, files=files)\n    response.raise_for_status()\n    return response.text", "CodeBleu_score": 37.53013676007594}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set the database in the session\n    self.session.get(url)\n    # Prepare the POST request data\n    data = {\n        'login': login,\n        'password': password,\n        'db': db,\n        'force': force\n    }\n    # Read the module file and upload it to the server\n    with open(module_file, 'rb') as f:\n        data['file'] = f\n        res = self.session.post(\n            'base_import_module/login_upload', data=data)\n        res.raise_for_status()\n        return res.text\n\n", "CodeBleu_score": 39.10709187540547}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set the database in the session\n    response = self.session.get(url)\n    response.raise_for_status()\n\n    # Prepare the POST request data\n    data = {\n        'login': login,\n        'password': password,\n        'db': db,\n        'force': force\n    }\n\n    # Read the module file and upload it to the server\n    with open(module_file, 'rb') as f:\n        data['file'] = f\n        response = self.session.post(f'{url}/base_import_module/login_upload', data=data)\n        response.raise_for_status()\n\n    return response.text\n\n", "CodeBleu_score": 40.418816499560045}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t\n    dbname = config.get('dbname')\n    overwrite = config.get('overwrite')\n\n    registry = Registry.new(dbname)\n    with registry.cursor() as cr:\n        importer = TranslationImporter(cr, registry)\n        importer.load_file(config.get('lang'), config.get('file'), overwrite=overwrite)\n        importer.save()\n\n", "CodeBleu_score": 37.4930400134311}, {"code": "def import_translation()\n\t\n    db_name = config.get('database')\n    overwrite = config.get('overwrite')\n    registry = Registry(db_name)\n    with registry.cursor() as cr:\n        importer = TranslationImporter(cr, registry)\n        importer.load_file(config.get('file_path'), overwrite=overwrite)\n        importer.save()\n\n", "CodeBleu_score": 34.41382078364823}, {"code": "def import_translation()\n\t\n    db_name = registry.cursor.config_get('db_name')\n    overwrite = registry.cursor.config_get('overwrite')\n    registry = odoo.registry(db_name)\n    registry.cursor.init(db_name, force_demo=False)\n    translation_importer = TranslationImporter(registry.cursor, overwrite=overwrite)\n    translation_importer.load_file('translations/en_US.po')\n    translation_importer.load_file('translations/es_ES.po')\n    translation_importer.save()\n\n", "CodeBleu_score": 40.09475865634676}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\t\n    new_child = Node(name, info, self.depth + 1)\n    for attr in dir(self):\n        if attr not in dir(new_child):\n            setattr(new_child, attr, getattr(self, attr))\n    if new_child not in self.children:\n        self.children.append(new_child)\n    self.children.sort(key=lambda x: x.name)\n    return new_child\n\n", "CodeBleu_score": 45.65877840961673}, {"code": "def add_child(self, name, info)\n\t\n    child = Node(name, info)\n    child.depth = self.depth + 1\n    if hasattr(self, 'children'):\n        if child not in self.children:\n            self.children.append(child)\n        else:\n            return self.children[self.children.index(child)]\n    else:\n        self.children = [child]\n    if hasattr(self, 'parent'):\n        child.parent = self.parent\n        if hasattr(self.parent, 'children'):\n            if child not in self.parent.children:\n                self.parent.children.append(child)\n    if hasattr(self, 'info'):\n        child.info = self.info\n    if hasattr(self, 'attributes'):\n        child.attributes = self.attributes\n    if hasattr(self, 'name'):\n        child.name = self.name\n    if hasattr(self, 'id'):\n        child.id = self.id\n    if hasattr(self, 'type'):\n        child.type = self.type\n    if hasattr(self, 'source'):\n        child.source = self.source\n    if hasattr(self, 'target'):\n        child.target = self.target\n    if hasattr(self, 'value'):\n        child.value = self.value\n    if hasattr(self, 'label'):\n        child.label = self.label\n    if hasattr(self, 'key'):\n        child.key = self.key\n    if hasattr(self, 'start'):\n        child.start = self.start\n    if hasattr(self, 'end'):\n        child.end = self.end\n    if hasattr(self, 'data'):\n        child.data = self.data\n    if hasattr(self, 'children'):\n        child.children = self.children\n    if hasattr(self, 'parent'):\n        child.parent = self.parent\n    if hasattr(self, 'children'):\n        child.children = self.children\n    if hasattr(self, 'children'):\n        child.children = self.children\n    if hasattr(self, 'children'", "CodeBleu_score": 33.77163504427229}, {"code": "def add_child(self, name, info)\n\t\n    new_node = Node(name, info)\n    new_node.depth = self.depth + 1\n    if not hasattr(self, 'children'):\n        self.children = []\n    if new_node not in self.children:\n        self.children.append(new_node)\n        new_node.parent = self\n        if hasattr(self, 'info'):\n            new_node.info = self.info\n        if hasattr(self, 'parent'):\n            new_node.parent = self.parent\n        if hasattr(self, 'depth'):\n            new_node.depth = self.depth + 1\n        if hasattr(self, 'children'):\n            new_node.children = self.children\n        if hasattr(self, 'name'):\n            new_node.name = self.name\n        if hasattr(self, 'path'):\n            new_node.path = self.path + '.' + new_node.name\n        if hasattr(self, 'root'):\n            new_node.root = self.root\n        if hasattr(self, 'level'):\n            new_node.level = self.level + 1\n        if hasattr(self, 'index'):\n            new_node.index = self.index + 1\n        if hasattr(self, 'parent_index'):\n            new_node.parent_index = self.index\n        if hasattr(self, 'parent_level'):\n            new_node.parent_level = self.level\n        if hasattr(self, 'parent_path'):\n            new_node.parent_path = self.path\n        if hasattr(self, 'parent_name'):\n            new_node.parent_name = self.name\n        if hasattr(self, 'parent_info'):\n            new_node.parent_info = self.info\n        if hasattr(self, 'parent_root'):\n            new_node.parent_root = self.root\n        if hasattr(self, 'parent_depth'):\n            new_node.parent_depth = self.depth\n        if hasattr(self, 'parent_children'):\n            new_node.parent_children", "CodeBleu_score": 32.98017418725234}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t\n    result = []\n    for date in dates:\n        result.append({\n            'date': date,\n            'balance': 0.0,\n            'accumulated_balance': 0.0\n        })\n\n    root_type = get_root_type(account)\n\n    for entry in gl_entries:\n        if entry.posting_date < dates[0] or entry.posting_date > dates[-1]:\n            continue\n\n        index = bisect_left(dates, entry.posting_date)\n        if index == len(dates):\n            continue\n\n        if root_type not in [\"Asset\", \"Expense\"]:\n            result[index][\"balance\"] -= entry.debit - entry.credit\n        else:\n            result[index][\"balance\"] += entry.debit - entry.credit\n\n        if root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n            result[index][\"accumulated_balance\"] += entry.debit - entry.credit\n\n    return result\n\n", "CodeBleu_score": 28.136952327988023}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = []\n    for date in dates:\n        result.append({\n            'date': date,\n            'balance': 0.0\n        })\n\n    root_type = frappe.get_cached_value('Account', account, 'root_type')\n\n    for entry in gl_entries:\n        date = entry.posting_date\n        balance = entry.debit - entry.credit\n        if root_type not in ('Asset', 'Expense'):\n            balance = -balance\n        if root_type in ('Asset', 'Liability', 'Equity'):\n            balance = sum([r.balance for r in result if r.date <= date]) + balance\n        for r in result:\n            if r.date == date:\n                r.balance = balance\n\n    return result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 33.18787843305716}, {"code": "def build_result(account, dates, gl_entries)\n\t\n\n    result = []\n    for date in dates:\n        result.append({\"date\": date, \"balance\": 0})\n\n    root_type = frappe.get_cached_value(\"Account\", account, \"root_type\")\n\n    for entry in gl_entries:\n        date = entry.posting_date\n        balance = entry.debit - entry.credit\n        if root_type not in (\"Asset\", \"Expense\"):\n            balance *= -1\n        if root_type in (\"Asset\", \"Liability\", \"Equity\"):\n            balance = sum(\n                [\n                    r[\"balance\"]\n                    for r in result\n                    if r[\"date\"] <= date\n                    and (root_type == \"Asset\" or r[\"date\"] >= date)\n                ]\n            )\n        for r in result:\n            if r[\"date\"] == date:\n                r[\"balance\"] += balance\n\n    return result\n\n", "CodeBleu_score": 35.346971429460325}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type in (\"Receivable\", \"Payable\"):\n        if self.get_doc_before_save() and self.get_doc_before_save().account_type not in (\"Receivable\", \"Payable\"):\n            if self.get_all_general_ledger_entries():\n                frappe.msgprint(\n                    _(\"Account Type change from {0} to {1} will affect the Accounts report. Please review the Accounts report and modify the account type if necessary.\").format(\n                        self.get_doc_before_save().account_type, self.account_type\n                    ),\n                    title=_(\"Warning\"),\n                    raise_exception=False,\n                )\n                self.add_comment(\n                    \"Comment\",\n                    _(\"Account Type change from {0} to {1} will affect the Accounts report. Please review the Accounts report and modify the account type if necessary.\").format(\n                        self.get_doc_before_save().account_type, self.account_type\n                    ),\n                )\n\n", "CodeBleu_score": 25.778502329125867}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.get_doc_before_save():\n        if self.get_doc_before_save().account_type == \"Receivable\" and self.account_type != \"Receivable\":\n            if self.get_all_general_ledger_entries():\n                frappe.msgprint(\n                    _(\"Account Type change to {0} will affect the Accounts report. Please check the Accounts report before changing the Account Type.\").format(\n                        self.account_type\n                    ),\n                    raise_exception=True,\n                )\n        elif self.get_doc_before_save().account_type == \"Payable\" and self.account_type != \"Payable\":\n            if self.get_all_general_ledger_entries():\n                frappe.msgprint(\n                    _(\"Account Type change to {0} will affect the Accounts report. Please check the Accounts report before changing the Account Type.\").format(\n                        self.account_type\n                    ),\n                    raise_exception=True,\n                )\n\n", "CodeBleu_score": 23.74359609362495}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type in [\"Receivable\", \"Payable\"]:\n        if self.get_doc_before_save() and self.get_doc_before_save().account_type not in [\"Receivable\", \"Payable\"]:\n            if self.get_all([\"General Ledger Account\"], \"General Ledger Account\"):\n                frappe.msgprint(\n                    _(\"Account Type change from {0} to {1} may cause issues in the Accounts report.\").format(\n                        self.get_doc_before_save().account_type, self.account_type\n                    ),\n                    title=_(\"Warning\"),\n                    raise_exception=False,\n                )\n                self.add_comment(\n                    \"Comment\",\n                    _(\"Account Type change from {0} to {1} may cause issues in the Accounts report.\").format(\n                        self.get_doc_before_save().account_type, self.account_type\n                    ),\n                )\n\n", "CodeBleu_score": 27.221617445416623}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t\n    if not self.account_currency:\n        self.account_currency = frappe.get_cached_value(\"Company\", self.company, \"default_currency\")\n    if self.account_currency != self.currency:\n        frappe.throw(_(\"Account Currency cannot be changed from {0} to {1}\").format(self.currency, self.account_currency))\n\n    if frappe.db.exists(\"GL Entry\", {\"account\": self.name, \"docstatus\": (\"<\", 2)}):\n        frappe.throw(_(\"Cannot change account currency as it is used in GL Entry\"))\n\n", "CodeBleu_score": 43.532698465653866}, {"code": "def validate_account_currency(self)\n\t\n    if not self.account_currency:\n        self.account_currency = frappe.get_cached_value(\n            \"Company\", self.company, \"default_currency\"\n        )\n        self.is_explicit_currency = 1\n\n    if self.account_currency != self.company_currency:\n        if self.get_ledger_entries_with_different_currency():\n            frappe.throw(\n                _(\n                    \"Currency of account {0} is {1}. Currency of company {2} is {3}. The currency of the account should be the same as the company's currency.\"\n                ).format(\n                    self.name,\n                    self.account_currency,\n                    self.company,\n                    self.company_currency,\n                )\n            )\n\n    if self.account_currency != self.default_currency:\n        self.default_currency = self.account_currency\n\n", "CodeBleu_score": 30.48694333462585}, {"code": "def validate_account_currency(self)\n\t\n    if not self.account_currency:\n        self.account_currency = frappe.get_cached_value(\n            \"Company\", self.company, \"default_currency\"\n        )\n        self.is_explicit_currency = True\n    elif not self.is_explicit_currency:\n        self.is_explicit_currency = True\n\n    if self.is_group:\n        self.account_currency = None\n        self.is_explicit_currency = None\n\n    if self.is_explicit_currency:\n        if self.account_currency != frappe.get_cached_value(\n            \"Company\", self.company, \"default_currency\"\n       ):\n            if self.account_currency != frappe.db.get_value(\n                \"Account\",\n                self.name,\n                \"account_currency\",\n                as_dict=True,\n            ):\n                frappe.throw(\n                    _(\"Currency of the account cannot be changed after transactions have been posted\")\n                )\n\n", "CodeBleu_score": 37.925885283071494}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key = generate_key(entry, accounting_dimensions)\n        if key not in merged_entries:\n            merged_entries[key] = {\n                'debit': 0,\n                'credit': 0,\n                'debit_amount_in_account_currency': 0,\n                'credit_amount_in_account_currency': 0\n            }\n        merged_entries[key]['debit'] += entry.debit\n        merged_entries[key]['credit'] += entry.credit\n        merged_entries[key]['debit_amount_in_account_currency'] += entry.debit_amount_in_account_currency\n        merged_entries[key]['credit_amount_in_account_currency'] += entry.credit_amount_in_account_currency\n    return merged_entries\n\n", "CodeBleu_score": 38.40307836718485}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key = generate_key(entry, accounting_dimensions)\n        merged_entries.setdefault(key, {\n            'debit': 0.0,\n            'credit': 0.0,\n            'debit_amount_in_account_currency': 0.0,\n            'credit_amount_in_account_currency': 0.0,\n        })\n        merged_entries[key]['debit'] += entry.debit\n        merged_entries[key]['credit'] += entry.credit\n        merged_entries[key]['debit_amount_in_account_currency'] += entry.debit_amount_in_account_currency\n        merged_entries[key]['credit_amount_in_account_currency'] += entry.credit_amount_in_account_currency\n    return merged_entries\n\n", "CodeBleu_score": 38.487205915761365}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key = generate_key(entry, accounting_dimensions)\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \"debit\": 0,\n                \"credit\": 0,\n                \"debit_amount\": 0,\n                \"credit_amount\": 0,\n                \"accounting_dimensions\": entry[\"accounting_dimensions\"],\n            }\n        merged_entries[key][\"debit\"] += entry[\"debit\"]\n        merged_entries[key][\"credit\"] += entry[\"credit\"]\n        merged_entries[key][\"debit_amount\"] += entry[\"debit_amount\"]\n        merged_entries[key][\"credit_amount\"] += entry[\"credit_amount\"]\n        merged_entries[key][\"accounting_dimensions\"] = entry[\"accounting_dimensions\"]\n    return merged_entries\n\n", "CodeBleu_score": 38.108821481133596}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.transaction_type == \"Supplier Payment\":\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.hold_supplier:\n            if supplier.hold_type == \"Block\":\n                if supplier.hold_reason == \"Blocked By System\":\n                    if supplier.blocked_by_system_date and supplier.blocked_by_system_date <= nowdate():\n                        frappe.throw(_(\"Supplier {0} is Blocked by System\").format(supplier.supplier_name))\n                    else:\n                        frappe.throw(_(\"Supplier {0} is Blocked\").format(supplier.supplier_name))\n                else:\n                    frappe.throw(_(\"Supplier {0} is Blocked\").format(supplier.supplier_name))\n\n    elif self.transaction_type == \"Buying Invoice\":\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.hold_supplier:\n            if supplier.hold_type == \"Block\":\n                if supplier.hold_reason == \"Blocked By System\":\n                    if supplier.blocked_by_system_date and supplier.blocked_by_system_date <= nowdate():\n                        frappe.throw(_(\"Supplier {0} is Blocked by System\").format(supplier.supplier_name))\n                    else:\n                        frappe.throw(_(\"Supplier {0} is Blocked\").format(supplier.supplier_name))\n                else:\n                    frappe.throw(_(\"Supplier {0} is Blocked\").format(supplier.supplier_name))\n\n", "CodeBleu_score": 25.101279222852718}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.transaction_type == \"Supplier Payment\":\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.hold_supplier and supplier.hold_supplier_type == self.transaction_type:\n            if supplier.hold_supplier_date and supplier.hold_supplier_date <= nowdate():\n                frappe.throw(\n                    _(\"Supplier {0} is on hold. Please contact the supplier.\").format(\n                        self.supplier\n                    )\n                )\n            else:\n                frappe.throw(\n                    _(\"Supplier {0} is on hold. Please contact the supplier.\").format(\n                        self.supplier\n                    )\n                )\n\n    elif self.transaction_type == \"Buying Invoice\":\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.hold_supplier and supplier.hold_supplier_type == self.transaction_type:\n            if supplier.hold_supplier_date and supplier.hold_supplier_date <= nowdate():\n                frappe.throw(\n                    _(\"Supplier {0} is on hold. Please contact the supplier.\").format(\n                        self.supplier\n                    )\n                )\n            else:\n                frappe.throw(\n                    _(\"Supplier {0} is on hold. Please contact the supplier.\").format(\n                        self.supplier\n                    )\n                )\n\n", "CodeBleu_score": 25.56157585115629}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.transaction_type == \"Payment\" and self.supplier_type == \"Supplier\":\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.hold_reason == \"On Hold\" and supplier.hold_type == \"Payment\":\n            if supplier.hold_until_date < nowdate():\n                supplier.hold_reason = \"None\"\n                supplier.save()\n            else:\n                frappe.throw(\n                    _(\n                        \"Supplier {0} is on hold and cannot be paid until {1}. Please update the supplier's hold information.\".format(\n                            supplier.supplier_name,\n                            supplier.hold_until_date,\n                        )\n                    )\n                )\n\n", "CodeBleu_score": 27.50280549886809}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = self.get_repost_doctypes()\n    if not repost_doctypes:\n        return\n    repost_doctypes = [d.get(\"doctype\") for d in repost_doctypes]\n    repost_doctypes_map = {d: frappe.qb.DocType(d) for d in repost_doctypes}\n    repost_doctypes_map = {\n        k: v.as_(\"repost_doc\")\n        for k, v in repost_doctypes_map.items()\n        if v.meta.get_field(\"repost_vouchers\")\n        or v.meta.get_field(\"vouchers\")\n    }\n    repost_doctypes_map = {\n        k: v.as_(\"repost_doc\")\n        for k, v in repost_doctypes_map.items()\n        if v.meta.get_field(\"repost_vouchers\")\n        or v.meta.get_field(\"vouchers\")\n    }\n    repost_doctypes_map = {\n        k: v.as_(\"repost_doc\")\n        for k, v in repost_doctypes_map.items()\n        if v.meta.get_field(\"repost_vouchers\")\n        or v.meta.get_field(\"vouchers\")\n    }\n    repost_doctypes_map = {\n        k: v.as_(\"repost_doc\")\n        for k, v in repost_doctypes_map.items()\n        if v.meta.get_field(\"repost_vouchers\")\n        or v.meta.get_field(\"vouchers\")\n    }\n    repost_doctypes_map = {\n        k: v.as_(\"repost_doc\")\n        for k, v in repost_doctypes_map.items()\n        if v.meta.get_field(\"repost_vouchers\")\n        or v.meta.get_field(\"vouchers\")\n    }\n    repost_doctypes_map = {\n       ", "CodeBleu_score": 22.77738463740051}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = self.get_repost_doctypes()\n    if not repost_doctypes:\n        return\n\n    voucher_type = self.voucher_type\n    voucher_no = self.voucher_no\n\n    references_map = {}\n    for doctype in repost_doctypes:\n        rows = frappe.db.sql(\"\"\"select parent, voucher_type, voucher_no, idx\n\t\t\tfrom `tab{doctype}`\n\t\t\twhere voucher_type=%s and voucher_no=%s\n\t\t\tand docstatus < 2\"\"\".format(doctype=doctype), (voucher_type, voucher_no), as_dict=1)\n        for row in rows:\n            references_map.setdefault(row.parent, frappe._dict()).setdefault(doctype, []).append(row)\n\n    for parent, references in references_map.items():\n        repost_doc = frappe.get_doc(parent)\n        repost_doc.run_method(\"remove_repost_vouchers\", references)\n        repost_doc.save(ignore_permissions=True)\n\n", "CodeBleu_score": 30.765103828735263}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = self.get_repost_doctypes()\n    if not repost_doctypes:\n        return\n    repost_doc_type = self.doctype\n    repost_doc_name = self.name\n    repost_doc = frappe.get_doc(repost_doc_type, repost_doc_name)\n    references_map = {}\n    for repost_doctype in repost_doctypes:\n        repost_doctype_doc = frappe.get_doc(repost_doctype)\n        repost_doctype_field = repost_doctype_doc.get_field(\"vouchers\")\n        if repost_doctype_field.fieldtype == \"Table\":\n            repost_doctype_field_name = repost_doctype_field.options\n            repost_doctype_field_doctype = repost_doctype_field.fieldtype\n        else:\n            repost_doctype_field_name = repost_doctype_field.fieldname\n            repost_doctype_field_doctype = repost_doctype_field.options\n        repost_doctype_field_doctype_doc = frappe.get_doc(\n            repost_doctype_field_doctype\n        )\n        repost_doctype_field_doctype_field = repost_doctype_field_doctype_doc.get_field(\n            \"voucher_type\"\n        )\n        repost_doctype_field_doctype_field_name = (\n            repost_doctype_field_doctype_field.fieldname\n        )\n        repost_doctype_field_doctype_field_doctype = (\n            repost_doctype_field_doctype_field.options\n        )\n        repost_doctype_field_doctype_field_doctype_doc = frappe.get_doc(\n            repost_doctype_field_doctype_field_doct", "CodeBleu_score": 19.097094147530953}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        self.auth.authenticate()\n        params = {\n            \"start_date\": start_date,\n            \"end_date\": end_date,\n            \"account_id\": account_id,\n            \"page\": 1,\n            \"per_page\": 100,\n        }\n        transactions = []\n        while True:\n            response = self.client.get(\"transactions\", params=params)\n            if response.status_code != 200:\n                raise Exception(f\"Failed to get transactions: {response.text}\")\n            data = response.json()\n            transactions.extend(data[\"transactions\"])\n            if len(data[\"transactions\"]) < data[\"total\"]:\n                params[\"page\"] += 1\n            else:\n                break\n        return transactions\n    except frappe.exceptions.ValidationError as e:\n        frappe.log_error(title=\"Validation Error\", message=str(e))\n        raise\n    except Exception as e:\n        frappe.log_error(title=\"Error\", message=str(e))\n        raise", "CodeBleu_score": 35.87316113184098}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        self.auth.authenticate()\n    except Exception as e:\n        frappe.log_error(e, \"Error authenticating client\")\n        raise\n\n    params = {\n        \"start_date\": start_date,\n        \"end_date\": end_date,\n        \"account_id\": account_id,\n        \"limit\": 100,\n    }\n\n    transactions = []\n    while True:\n        try:\n            response = self.client.get(\n                \"transactions\",\n                params=params,\n            )\n        except Exception as e:\n            frappe.log_error(e, \"Error fetching transactions\")\n            raise\n\n        if response.status_code != 200:\n            frappe.log_error(\n                f\"Error fetching transactions: {response.status_code} {response.text}\"\n            )\n            raise Exception(\n                f\"Error fetching transactions: {response.status_code} {response.text}\"\n            )\n\n        response_data = response.json()\n        transactions.extend(response_data.get(\"data\", []))\n\n        if len(response_data.get(\"data\", [])) < response_data.get(\"total\", 0):\n            params[\"offset\"] = len(transactions)\n        else:\n            break\n\n    return transactions\n\n", "CodeBleu_score": 32.42127629667537}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        self.auth = self.get_auth()\n        params = {\n            \"start_date\": start_date,\n            \"end_date\": end_date,\n            \"account_id\": account_id,\n        }\n        transactions = []\n        has_more = True\n        offset = 0\n        while has_more:\n            params[\"offset\"] = offset\n            response = self.client.get(\n                \"transactions\",\n                params=params,\n            )\n            if response.status_code != 200:\n                frappe.log_error(\n                    \"Error fetching transactions from API: {status_code} - {reason}\".format(\n                        status_code=response.status_code, reason=response.reason\n                    )\n                )\n                raise Exception(\n                    \"Error fetching transactions from API: {status_code} - {reason}\".format(\n                        status_code=response.status_code, reason=response.reason\n                    )\n                )\n            response_json = response.json()\n            transactions.extend(response_json[\"data\"])\n            has_more = response_json[\"pagination\"][\"has_more\"]\n            offset += response_json[\"pagination\"][\"limit\"]\n        return transactions", "CodeBleu_score": 29.762212095594066}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t\n    try:\n        bank_data = json.loads(response)\n        access_token = PlaidConnector().get_access_token(token, bank_data)\n        bank = frappe.get_doc(\"Bank\", {\"plaid_institution_id\": bank_data[\"institution_id\"]})\n        if bank:\n            bank.access_token = access_token\n            bank.save()\n        else:\n            bank = frappe.new_doc(\"Bank\")\n            bank.plaid_institution_id = bank_data[\"institution_id\"]\n            bank.access_token = access_token\n            bank.insert()\n    except Exception as e:\n        frappe.log_error(e, \"Error adding bank\")\n\n", "CodeBleu_score": 45.005988309465714}, {"code": "def add_institution(token, response)\n\t\n    try:\n        # Parse the response and retrieve the institution name and id\n        institution_name = response.get(\"institution\", {}).get(\"name\")\n        institution_id = response.get(\"institution\", {}).get(\"institution_id\")\n\n        # Use the PlaidConnector to get an access token for the institution\n        connector = PlaidConnector()\n        access_token = connector.get_access_token(token, institution_id)\n\n        # Check if the bank already exists in the database\n        bank = frappe.get_doc(\"Bank\", {\"name\": institution_name})\n        if bank:\n            # Update the access token for the existing bank record\n            bank.access_token = access_token\n            bank.save()\n        else:\n            # Create and insert a new bank record\n            bank = frappe.get_doc(\n                {\n                    \"doctype\": \"Bank\",\n                    \"name\": institution_name,\n                    \"access_token\": access_token,\n                }\n            )\n            bank.insert()\n    except Exception as e:\n        # Log any errors that occur during the process\n        frappe.log_error(\n            \"Error adding institution: {}\".format(e),\n            title=\"Error adding institution\",\n        )\n\n", "CodeBleu_score": 44.532714813754936}, {"code": "def add_institution(token, response)\n\t\n    try:\n        response = json.loads(response)\n        access_token = PlaidConnector.get_access_token(token, response)\n        if not access_token:\n            frappe.log_error(\"Unable to retrieve access token\")\n            return\n        bank = frappe.get_doc({\n            \"doctype\": \"Bank\",\n            \"plaid_institution_id\": response.get(\"institution_id\"),\n            \"access_token\": access_token,\n            \"name\": response.get(\"institution_name\"),\n            \"country\": response.get(\"country_codes\")[0]\n        })\n        if not frappe.db.exists(\"Bank\", bank.name):\n            bank.insert()\n        else:\n            existing_bank = frappe.get_doc(\"Bank\", bank.name)\n            existing_bank.access_token = access_token\n            existing_bank.save()\n    except Exception as e:\n        frappe.log_error(e)\n\n", "CodeBleu_score": 45.22976369823185}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        start_date = bank.get_last_integration_date(bank_account)\n        end_date = frappe.utils.today()\n        transactions = bank.get_transactions(bank_account, start_date, end_date)\n\n        if transactions:\n            for transaction in reversed(transactions):\n                if transaction.get(\"transaction_date\") > start_date:\n                    bank.add_transaction(transaction, bank_account)\n\n            bank.update_last_integration_date(bank_account, end_date)\n\n        frappe.logger().info(\n            f\"Added {len(transactions)} new transactions for {bank.bank_name} {bank_account.bank_account}\"\n        )\n    except Exception as e:\n        frappe.log_error(\n            \"Error while syncing transactions for {bank.bank_name} {bank_account.bank_account}\",\n            e,\n        )", "CodeBleu_score": 32.7354995119338}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        bank_account = frappe.get_doc(\"Bank Account\", bank_account)\n        bank = frappe.get_doc(\"Bank\", bank)\n\n        if not bank_account.enabled:\n            return\n\n        last_integration_date = bank_account.get_last_integration_date()\n        if not last_integration_date:\n            last_integration_date = bank_account.get_last_transaction_date()\n\n        if not last_integration_date:\n            return\n\n        start_date = add_months(last_integration_date, -1)\n        end_date = today()\n\n        transactions = bank.get_transactions(\n            bank_account.account, start_date, end_date\n        )\n\n        if not transactions:\n            return\n\n        new_transactions = []\n        for transaction in transactions:\n            if transaction.get(\"posting_date\") >= last_integration_date:\n                new_transactions.append(transaction)\n\n        if new_transactions:\n            new_transactions.reverse()\n            for transaction in new_transactions:\n                bank_transaction = frappe.new_doc(\"Bank Transaction\")\n                bank_transaction.update(transaction)\n                bank_transaction.bank_account = bank_account.name\n                bank_transaction.bank_account_no = bank_account.account\n                bank_transaction.bank = bank.name\n                bank_transaction.bank_transaction_type = \"Credit\"\n                bank_transaction.bank_transaction_date = transaction.get(\n                    \"posting_date\"\n                )\n                bank_transaction.bank_transaction_amount = transaction.get(\n                    \"debit\"\n                ) or transaction.get(\"credit\")\n                bank_transaction.bank_transaction_reference = transaction.get(\n                    \"reference_no\"\n                )\n                bank_transaction.bank_transaction_description = transaction.get(\n                    \"remarks\"\n                )\n                bank_transaction.bank_transaction_currency = bank_account.currency\n                bank_transaction.bank_transaction_currency_rate = 1\n                bank_transaction.bank_transaction", "CodeBleu_score": 29.50715892103003}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        last_integration_date = get_last_integration_date(bank, bank_account)\n        start_date = add_months(last_integration_date, -1)\n        end_date = today()\n\n        transactions = get_transactions(bank, bank_account, start_date, end_date)\n\n        if transactions:\n            for transaction in reversed(transactions):\n                new_bank_transaction = create_new_bank_transaction(transaction, bank, bank_account)\n                result = new_bank_transaction.insert()\n                result.pop(\"__islocal\")\n                frappe.db.commit()\n\n            frappe.db.set_value(\n                \"Bank Account\",\n                bank_account,\n                \"last_integration_date\",\n                transactions[0].posting_date,\n            )\n\n        info(\n            \"Bank Account: {}, New Bank Transactions: {}\".format(\n                bank_account, len(transactions)\n            )\n        )\n    except Exception as e:\n        frappe.log_error(frappe.get_traceback(), \"Bank Account Transaction Sync Error\")", "CodeBleu_score": 35.84125407836885}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t\n    # Construct the query URI\n    query_uri = f\"{self.base_url}/company/{self.realm_id}/query?query=SELECT * FROM Entry WHERE EntityRef.EntityRef.name = '{entity}'\"\n    # Determine the total number of entries\n    response = self._get(query_uri)\n    total_entries = response.json()[\"QueryResponse\"][\"totalCount\"]\n    # Retrieve entries in batches of 1000\n    for start in range(0, total_entries, 1000):\n        query_uri = f\"{query_uri}&startPosition={start}\"\n        response = self._get(query_uri)\n        entries = response.json()[\"QueryResponse\"][\"Entry\"]\n        self._preprocess_entries(entries)\n        self._save_entries(entries)\n    # Log any exceptions encountered during the process\n    if response.status_code != 200:\n        self._log_error(response.text)\n\n", "CodeBleu_score": 27.104413315710694}, {"code": "def _migrate_entries(self, entity)\n\t\n    # Construct the query URI\n    query_uri = f\"{self._base_url}/company/{entity}/query?minorversion={self._minor_version}\"\n\n    # Get the total number of entries\n    total_entries = self._get(query_uri)[\"totalCount\"]\n\n    # Calculate the number of batches\n    num_batches = (total_entries + 999) // 1000\n\n    # Loop through the batches\n    for i in range(num_batches):\n        try:\n            # Construct the query URI with the batch offset\n            query_uri = f\"{query_uri}&offset={i * 1000}\"\n\n            # Get the entries\n            entries = self._get(query_uri)[\"QueryResponse\"][\"Customer\"]\n\n            # Preprocess the entries\n            entries = self._preprocess_entries(entries)\n\n            # Save the entries\n            self._save_entries(entries, entity)\n        except Exception as e:\n            # Log the error and the response text\n            self._log_error(e, response.text)\n\n", "CodeBleu_score": 28.709995115098536}, {"code": "def _migrate_entries(self, entity)\n\t\n    # Construct the query URI\n    query_uri = f\"https://{self.company_id}.qbo.intuit.com/v3/company/{self.realm_id}/query?query=select * from JournalEntry where EntityRef.Name='{entity}'\"\n    # Send a GET request to the query URI\n    response = self._get(query_uri)\n    # Check if the response is successful\n    if response.status_code == 200:\n        # Get the total number of entries\n        total_entries = response.json()[\"QueryResponse\"][\"totalCount\"]\n        # Initialize the start and end indices for the entries\n        start = 1\n        end = 1000\n        # Loop through the entries in batches of 1000\n        while start <= total_entries:\n            # Construct the query URI for the current batch\n            query_uri = f\"https://{self.company_id}.qbo.intuit.com/v3/company/{self.realm_id}/query?query=select * from JournalEntry where EntityRef.Name='{entity}'&startPosition={start}&maxResults={end}\"\n            # Send a GET request to the query URI\n            response = self._get(query_uri)\n            # Check if the response is successful\n            if response.status_code == 200:\n                # Get the entries from the response\n                entries = response.json()[\"QueryResponse\"][\"JournalEntry\"]\n                # Preprocess the entries\n                self._preprocess_entries(entries)\n                # Save the entries\n                self._save_entries(entries)\n            else:\n                # Log the error and the response text\n                self._log_error(f\"Error while fetching entries for {entity}: {response.text}\")\n            # Update the start and end indices for the next batch\n            start += 1000\n            end += 1000\n    else:\n        # Log the error and the response text\n        self._log_error(f\"Error while fetching entries for {entity}: {response.text}\")\n\n", "CodeBleu_score": 22.96658730522316}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\t\n    invoice_type = invoice.type\n    if invoice_type == 'out_invoice':\n        self._save_sales_invoice(invoice)\n    elif invoice_type == 'out_refund':\n        self._save_credit_note(invoice)\n    elif invoice_type == 'in_invoice':\n        self._save_purchase_invoice(invoice)\n    elif invoice_type == 'in_refund':\n        self._save_credit_note(invoice)\n    elif invoice_type == 'sale':\n        self._save_sales_invoice(invoice)\n    elif invoice_type == 'purchase':\n        self._save_purchase_invoice(invoice)\n    elif invoice_type == 'sale_refund':\n        self._save_credit_note(invoice)\n    elif invoice_type == 'purchase_refund':\n        self._save_credit_note(invoice)\n    elif invoice_type == 'sale_draft':\n        self._save_sales_invoice(invoice)\n    elif invoice_type == 'purchase_draft':\n        self._save_purchase_invoice(invoice)\n    elif invoice_type == 'sale_draft_refund':\n        self._save_credit_note(invoice)\n    elif invoice_type == 'purchase_draft_refund':\n        self._save_credit_note(invoice)\n    elif invoice_type == 'out_invoice_draft':\n        self._save_sales_invoice(invoice)\n    elif invoice_type == 'out_refund_draft':\n        self._save_credit_note(invoice)\n    elif invoice_type == 'in_invoice_draft':\n        self._save_purchase_invoice(invoice)\n    elif invoice_type == 'in_refund_draft':\n        self._save_credit_note(invoice)\n    elif invoice_type == 'out_invoice_proforma':\n        self._save_sales", "CodeBleu_score": 11.194317617986089}, {"code": "def _save_invoice(self, invoice)\n\t\n    invoice_type = self._get_invoice_type(invoice)\n    if invoice_type == 'sales_invoice':\n        self._save_sales_invoice(invoice)\n    elif invoice_type == 'statement_charge':\n        self._save_statement_charge(invoice)\n    elif invoice_type == 'reimburse_charge':\n        self._save_reimburse_charge(invoice)\n    else:\n        self._save_invoice_as_journal_entry(invoice)\n", "CodeBleu_score": 21.466439075559745}, {"code": "def _save_invoice(self, invoice)\n\t\n    invoice_type = invoice.invoice_type\n    if invoice_type == \"out_invoice\":\n        self._save_sales_invoice(invoice)\n    elif invoice_type == \"out_refund\":\n        self._save_credit_note(invoice)\n    elif invoice_type == \"in_invoice\":\n        self._save_purchase_invoice(invoice)\n    elif invoice_type == \"in_refund\":\n        self._save_purchase_refund(invoice)\n    elif invoice_type == \"out_invoice_receivable\":\n        self._save_sales_invoice(invoice)\n    elif invoice_type == \"in_invoice_payable\":\n        self._save_purchase_invoice(invoice)\n    elif invoice_type == \"out_invoice_receivable_receivable\":\n        self._save_sales_invoice(invoice)\n    elif invoice_type == \"in_invoice_payable_payable\":\n        self._save_purchase_invoice(invoice)\n    elif invoice_type == \"out_invoice_receivable_payable\":\n        self._save_sales_invoice(invoice)\n    elif invoice_type == \"in_invoice_payable_receivable\":\n        self._save_purchase_invoice(invoice)\n    elif invoice_type == \"out_invoice_payable_receivable\":\n        self._save_sales_invoice(invoice)\n    elif invoice_type == \"in_invoice_receivable_payable\":\n        self._save_purchase_invoice(invoice)\n    elif invoice_type == \"out_invoice_receivable_payable_payable\":\n        self._save_sales_invoice(invoice)\n    elif invoice_type == \"in_invoice_receivable_payable_receivable\":\n        self._save_purchase_invoice(invoice)\n    elif invoice_type == \"out_invoice", "CodeBleu_score": 15.98951108697118}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    start_date = getdate(start_date)\n    end_date = getdate(end_date)\n    interval = (end_date - start_date).days / no_of_visit\n    for i in range(no_of_visit):\n        schedule_date = add_days(start_date, i * interval)\n        if self.validate_schedule_date_for_holiday_list(schedule_date, sales_person):\n            schedule_list.append(schedule_date)\n    return schedule_list\n\n", "CodeBleu_score": 26.527817283174983}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    self.validate_schedule_date_for_holiday_list(start_date, end_date)\n    interval = (end_date - start_date).days / no_of_visit\n    for i in range(no_of_visit):\n        schedule_date = start_date + timedelta(days=i * interval)\n        schedule_list.append(schedule_date)\n    for i in range(len(schedule_list)):\n        schedule_list[i] = self.add_days(schedule_list[i], sales_person)\n    return schedule_list\n\n", "CodeBleu_score": 32.984288004987654}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    self.validate_schedule_date_for_holiday_list(start_date, end_date)\n    interval = self.get_interval(no_of_visit)\n    for i in range(no_of_visit):\n        schedule_date = self.add_days(start_date, i * interval)\n        schedule_list.append(schedule_date)\n        self.validate_schedule_date_for_holiday_list(schedule_date, end_date)\n    return schedule_list\n\n", "CodeBleu_score": 25.08734906349477}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\t    $method = request()->method();\n    $url = $this->findTranslation($method);\n\n    return response()->json([\n        'success' => true,\n        'message' => 'Success',\n        'data' => [\n            'title' => __('components.index.bulkaction.modal.title'),\n            'path' => $url,\n            'handle' => $handle,\n            'html' => view($view, $data)->render(),\n        ],\n    ]);\n}", "CodeBleu_score": 37.917959122933375}, {"code": "<?\n   public function response($view, $data = []){\n\t        $method = request()->method();\n        $url = $this->findTranslation($method);\n\n        $data['title'] = $this->title;\n        $data['path'] = $this->path;\n        $data['handle'] = $this->handle;\n        $data['selected'] = $this->getSelectedInput(request());\n\n        return response()->json([\n            'success' => true,\n            'message' => __('Success'),\n            'data' => [\n                'title' => $this->title,\n                'path' => $this->path,\n                'handle' => $this->handle,\n                'html' => view($view, $data)->render(),\n            ],\n        ]);\n    }", "CodeBleu_score": 46.55765005744557}, {"code": "<?\n   public function response($view, $data = []){\n\t        return response()->json([\n            'status' => 'success',\n            'message' => __('admin::app.response.update-success', ['name' => __('admin::app.bulkaction.' . $handle)]),\n            'data' => [\n                'title' => __('admin::app.bulkaction.' . $handle),\n                'path' => $url,\n                'handle' => $handle,\n                'html' => view($view, $data)->render(),\n            ],\n        ]);\n    }", "CodeBleu_score": 32.718808081953235}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t    $selectedContacts = $request->getSelectedRecords();\n    foreach ($selectedContacts as $selectedContact) {\n        try {\n            $this->dispatch(new DeleteContact($selectedContact));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 63.35103174861264}, {"code": "<?\npublic function deleteContacts($request){\n\t    $selectedContacts = $request->getSelectedRecords();\n\n    foreach ($selectedContacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n\n    return redirect()->route('contacts.index');\n}", "CodeBleu_score": 67.13899468485329}, {"code": "<?\npublic function deleteContacts($request){\n\t    $contacts = $request->getSelectedRecords();\n    foreach ($contacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 72.93371194291906}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t    try {\n        $transactions = $this->getSelectedRecords($request);\n        foreach ($transactions as $transaction) {\n            $this->dispatch(new DeleteTransaction($transaction));\n        }\n        flash('Transactions deleted successfully')->success()->important();\n    } catch (\\Exception $e) {\n        flash($e->getMessage())->error()->important();\n    }\n}", "CodeBleu_score": 69.3181867636097}, {"code": "<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getSelectedRecords($request);\n\n    try {\n        foreach ($transactions as $transaction) {\n            $this->dispatch(new DeleteTransaction($transaction));\n        }\n    } catch (Exception $e) {\n        flash($e->getMessage())->error()->important();\n    }\n}", "CodeBleu_score": 65.04792415840505}, {"code": "<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getSelectedRecords($request);\n\n    try {\n        foreach ($transactions as $transaction) {\n            dispatch(new DeleteTransaction($transaction));\n        }\n\n        flash(__('The transaction has been deleted successfully.'))->success();\n    } catch (\\Exception $e) {\n        flash($e->getMessage())->error()->important();\n    }\n}", "CodeBleu_score": 65.3381350152622}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\t    $request = $this->getRequest();\n\n    if (!$request || !$request instanceof FormRequest) {\n        return;\n    }\n\n    foreach ($request->all() as $key => $value) {\n        $request->initialize([], $key, $value);\n\n        $request->prepareForValidation();\n\n        $validator->setCustomMessages($request->messages());\n\n        try {\n            $request->validate();\n        } catch (ValidationException $e) {\n            $validator->addFailure($e->validator->failed());\n\n            throw $e;\n        }\n    }\n}", "CodeBleu_score": 32.340738996092135}, {"code": "<?\npublic function withValidator($validator){\n\t    // Check if the request class exists and is an instance of FormRequest\n    if (class_exists($this->requestClass) && is_subclass_of($this->requestClass, FormRequest::class)) {\n        $request = new $this->requestClass();\n\n        // Loop through each data row\n        foreach ($this->data as $row) {\n            // Initialize the request with the current row data\n            $request->initialize($row);\n\n            // Prepare the validation rules for the request\n            $request->prepareRules();\n\n            // Attempt to validate the data\n            try {\n                $validator->validate();\n            } catch (ValidationException $e) {\n                // Add the validation failures to the validator\n                $validator->addFailure($request->getData(), $e->validator->failed());\n\n                // Re-throw the exception\n                throw $e;\n            }\n        }\n    }\n}", "CodeBleu_score": 31.789496664890173}, {"code": "<?\npublic function withValidator($validator){\n\t    $request = $this->request;\n\n    if (! class_exists($request) || ! is_subclass_of($request, FormRequest::class)) {\n        return;\n    }\n\n    foreach ($this->data as $row => $data) {\n        $request->initialize($this->container, $data, $this->rules, $this->messages, $this->customAttributes);\n\n        $validator->prepareRules($request);\n\n        try {\n            $validator->validate();\n        } catch (ValidationException $e) {\n            $validator->addFailure($request->getValidatorInstance(), $e->validator->failed());\n\n            throw $e;\n        }\n    }\n}", "CodeBleu_score": 33.99870255639968}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    if ($this->instance instanceof ShouldUpdate) {\n        $this->instance->bootUpdate(...$arguments);\n    }\n}", "CodeBleu_score": 14.728060994242387}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    // TODO: Implement bootUpdate() method.\n}", "CodeBleu_score": 8.637453922545667}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    if ($this->instance instanceof ShouldUpdate) {\n        $this->instance->bootUpdate(...$arguments);\n    }\n}", "CodeBleu_score": 14.728060994242387}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t    $query->usingSearchString()->sortable($sort)->get();\n    if ($request->expectsJson() && $request->isNotApi()) {\n        return $query->get();\n    }\n    return $query->paginate($request->merge(['limit' => setting('default_pagination')])->get('limit'));\n}", "CodeBleu_score": 39.769367868855745}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t    // Retrieve the sorting parameter from the request\n    $sort = $this->request->get('sort', $sort);\n\n    // Apply search and sorting to the query\n    $query->usingSearchString()->sortable($sort);\n\n    // Check if the request expects a JSON response and is not an API request\n    if ($this->request->expectsJson() && !$this->request->isNotApi()) {\n        // Return all records\n        return $query->get();\n    }\n\n    // Paginate the results based on a limit from the request or a default setting\n    return $query->paginate($this->request->get('limit', setting('default_pagination')));\n}", "CodeBleu_score": 42.71978316109432}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t    $query->usingSearchString()->sortable($sort)->paginate($this->request->expectsJson() && !$this->request->isNotApi() ? null : $this->request->get('limit', 10));\n}", "CodeBleu_score": 22.25950312526305}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t    $openAmount = 0;\n    $overdueAmount = 0;\n\n    if ($model->status == 'paid') {\n        return [0, 0];\n    }\n\n    if ($model->status == 'partial') {\n        foreach ($model->transactions as $transaction) {\n            $openAmount += $transaction->getAmountConvertedToDefault();\n        }\n    }\n\n    if ($model->due_at->isPast()) {\n        $overdueAmount = $openAmount;\n        $openAmount = 0;\n    }\n\n    return [$openAmount, $overdueAmount];\n}", "CodeBleu_score": 48.38505827955797}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t  $open_amount = $model->getAmountConvertedToDefault;\n  $overdue_amount = $model->getAmountConvertedToDefault;\n\n  if ($model->status == 'paid') {\n    return [0, 0];\n  }\n\n  if ($model->status == 'partial') {\n    $payments = $model->transactions->where('status', 'paid');\n    $open_amount = $payments->sum('amount_converted_to_default');\n  }\n\n  if ($model->due_date->isPast()) {\n    $overdue_amount = $model->getAmountConvertedToDefault - $open_amount;\n  }\n\n  return [$open_amount, $overdue_amount];\n}", "CodeBleu_score": 44.3282179335847}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t    $openAmount = $overdueAmount = 0;\n    if ($model->status != 'paid') {\n        if ($model->status == 'partial') {\n            $payments = $model->transactions()->where('type', 'payment')->get();\n            foreach ($payments as $payment) {\n                $openAmount += $payment->getAmountConvertedToDefault();\n            }\n        }\n        if ($model->due_at->isPast()) {\n            $overdueAmount = $model->getAmountConvertedToDefault();\n        } else {\n            $openAmount = $model->getAmountConvertedToDefault();\n        }\n    }\n    return [\n        'open_amount' => $openAmount,\n        'overdue_amount' => $overdueAmount\n    ];\n}", "CodeBleu_score": 50.875315978997236}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $total = $this->toBase()->getCountForPagination();\n\n    $results = $total\n        ? $this->forPage($page, $perPage)->get($columns)\n        : $this->model->newCollection();\n\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 85.45674441869522}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $total = $this->toBase()->getCountForPagination();\n\n    $results = $total ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 85.21588115293808}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $results = ($total = $this->toBase()->getCountForPagination())\n        ? $this->forPage($page, $perPage)->get($columns)\n        : $this->model->newCollection();\n\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 94.16412261531326}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t    \\DB::transaction(function () use ($request) {\n        $reconciliations = Reconciliation::whereIn('id', $request->get('reconciliations'))->get();\n        foreach ($reconciliations as $reconciliation) {\n            $reconciliation->status = Reconciliation::RECONCILED;\n            $reconciliation->save();\n            Transaction::where('account_id', $reconciliation->account_id)\n                    ->isNotReconciled()\n                    ->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])->each\n                    function ($item) {\n                        $item->is_reconciled = true;\n                        $item->save();\n                    };\n        }\n    });\n}", "CodeBleu_score": 53.72219746943424}, {"code": "<?\npublic function reconcile($request){\n\t    \\DB::transaction(function () use ($request) {\n        $reconciliations = Reconciliation::whereIn('id', $request->reconciliation_ids)->get();\n        foreach ($reconciliations as $reconciliation) {\n            $reconciliation->status = Reconciliation::RECONCILED;\n            $reconciliation->save();\n            $this->getSelectedRecords($reconciliation)->each(function ($item) {\n                $item->save();\n            });\n        }\n    });\n}", "CodeBleu_score": 45.86766390441599}, {"code": "<?\npublic function reconcile($request){\n\t    $reconciliations = Reconciliation::whereIn('id', $request->reconciliation_ids)->get();\n    \\DB::transaction(function () use ($reconciliations) {\n        foreach ($reconciliations as $reconciliation) {\n            $reconciliation->status = Reconciliation::STATUS_RECONCILED;\n            $reconciliation->save();\n            Transaction::where('account_id', $reconciliation->account_id)\n                    ->isNotReconciled()\n                    ->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])->each(function ($item) {\n                $item->is_reconciled = true;\n                $item->save();\n            });\n        }\n    });\n}", "CodeBleu_score": 56.24169843773079}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t    $this->getSourceName();\n    UserInvitation::where('user_id', $this->user->id)->get()->each->delete();\n    $invitation = UserInvitation::create([\n        'user_id' => $this->user->id,\n        'token' => Str::uuid(),\n    ]);\n\n    try {\n        $this->dispatch(new NotifyUser($invitation));\n    } catch (Exception $e) {\n        throw new Exception(trans('messages.error.notify_user'));\n    }\n\n    return $invitation;\n}", "CodeBleu_score": 32.2964580544873}, {"code": "<?\npublic function handle(): UserInvitation{\n\t    \\DB::transaction(function () {\n        UserInvitation::where('user_id', $this->user->id)->delete();\n        $invitation = UserInvitation::create([\n            'user_id' => $this->user->id,\n            'token' => Str::uuid(),\n        ]);\n        $this->dispatch(new NotifyUser($invitation));\n    });\n    return $invitation;\n}", "CodeBleu_score": 27.26490493328638}, {"code": "<?\npublic function handle(): UserInvitation{\n\t    \\DB::transaction(function () {\n        $invitations = UserInvitation::where('user_id', $this->user->id)->get();\n\n        foreach ($invitations as $invitation) {\n            $invitation->delete();\n        }\n\n        $invitation = UserInvitation::create([\n            'user_id' => $this->user->id,\n            'token' => Str::uuid(),\n        ]);\n\n        try {\n            $this->dispatch(new NotifyUser($invitation));\n        } catch (\\Exception $e) {\n            throw new \\Exception(trans('invitation.notification_failed'));\n        }\n\n        return $invitation;\n    });\n}", "CodeBleu_score": 53.14574238032819}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\t    if ($this->model->isReconciled()) {\n        throw new Exception('This transaction has been reconciled.');\n    }\n\n    if ($this->model->isTransferTransaction()) {\n        throw new UnauthorizedException('This is a transfer transaction.');\n    }\n}", "CodeBleu_score": 37.7590663228453}, {"code": "<?\npublic function authorize(): void{\n\t    if ($this->model->isReconciled()) {\n        throw new Exception('Transaction is reconciled');\n    }\n\n    if ($this->model->isTransferTransaction()) {\n        throw new UnauthorizedException('Transfer transactions are not authorized');\n    }\n}", "CodeBleu_score": 37.94141443699278}, {"code": "<?\npublic function authorize(): void{\n\t    if ($this->model->isReconciled) {\n        throw new Exception(\"Transaction is already reconciled.\");\n    }\n\n    if ($this->model->isTransferTransaction) {\n        throw new UnauthorizedException(\"Transfer transactions are not authorized.\");\n    }\n}", "CodeBleu_score": 26.878803706029114}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t    if (getTenantIdByToken() != 0) {\n        return tableName.equals(\"table1\") || tableName.equals(\"table2\");\n    } else {\n        return false;\n    }\n}", "CodeBleu_score": 10.286568064504939}, {"code": "public boolean doTableFilter(String tableName){\n\t    if (getTenantIdByToken() != 0) {\n        return true;\n    }\n    if (tableName.equals(\"table1\") || tableName.equals(\"table2\")) {\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 9.926714556899759}, {"code": "public boolean doTableFilter(String tableName){\n\t    if (getTenantIdByToken() == 0) {\n        return false;\n    }\n    return equals(tableName, \"table1\") || equals(tableName, \"table2\") || equals(tableName, \"table3\");\n}", "CodeBleu_score": 9.59318384151683}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 75.2955715722213}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 75.2955715722213}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 75.2955715722213}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    try {\n        List<Account> accounts = accountService.findAll();\n        List<Map<String, Object>> result = new ArrayList<>();\n        for (Account account : accounts) {\n            Map<String, Object> map = new HashMap<>();\n            map.put(\"id\", account.getId());\n            map.put(\"name\", account.getName());\n            result.add(map);\n        }\n        return JSON.toJSONString(result);\n    } catch (Exception e) {\n        logger.error(\"findBySelect\", e);\n        return \"failure\";\n    }\n}", "CodeBleu_score": 43.11404328504786}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    try {\n        List<Account> list = accountService.findBySelect();\n        JSONArray jsonArray = new JSONArray();\n        for (Account account : list) {\n            JSONObject jsonObject = new JSONObject();\n            jsonObject.put(\"id\", account.getId());\n            jsonObject.put(\"name\", account.getName());\n            jsonArray.add(jsonObject);\n        }\n        return jsonArray.toString();\n    } catch (Exception e) {\n        log.error(\"findBySelect\", e);\n        return \"failure\";\n    }\n}", "CodeBleu_score": 43.968885240721654}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    String result = \"failure\";\n    try {\n        List<Account> list = accountService.findBySelect();\n        JSONArray jsonArray = new JSONArray();\n        for (Account account : list) {\n            JSONObject jsonObject = new JSONObject();\n            jsonObject.put(\"id\", account.getId());\n            jsonObject.put(\"name\", account.getName());\n            jsonArray.put(jsonObject);\n        }\n        result = jsonArray.toString();\n    } catch (Exception e) {\n        log.error(e.getMessage(), e);\n    }\n    return result;\n}", "CodeBleu_score": 58.74621904610826}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<Account> accounts = accountService.listWithBalance(name, serialNo, currentPage, pageSize);\n        Integer count = accountService.listWithBalanceCount(name, serialNo);\n        response.setResult(accounts);\n        response.setTotal(count);\n        response.setCode(ResponseCode.SUCCESS);\n        response.setMessage(ResponseMessage.SUCCESS);\n    } catch (Exception e) {\n        log.error(\"listWithBalance error:\", e);\n        response.setCode(ResponseCode.ERROR);\n        response.setMessage(ResponseMessage.ERROR);\n    }\n    return response;\n}", "CodeBleu_score": 43.17318550362482}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo response = new BaseResponseInfo();\n        try {\n            AccountServiceResponse accountServiceResponse = accountService.listWithBalance(name, serialNo, currentPage, pageSize);\n            if (accountServiceResponse.getCode() == BaseResponseInfo.SUCCESS_CODE) {\n                response.setCode(BaseResponseInfo.SUCCESS_CODE);\n                response.setMessage(BaseResponseInfo.SUCCESS_MESSAGE);\n                response.setResult(accountServiceResponse.getResult());\n            } else {\n                response.setCode(accountServiceResponse.getCode());\n                response.setMessage(accountServiceResponse.getMessage());\n            }\n        } catch (Exception e) {\n            log.error(\"listWithBalance error\", e);\n            response.setCode(BaseResponseInfo.ERROR_CODE);\n            response.setMessage(BaseResponseInfo.ERROR_MESSAGE);\n        }\n        return response;\n    }", "CodeBleu_score": 33.41498372282786}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n    try {\n        // Construct the response object\n        ListWithBalanceResponse response = new ListWithBalanceResponse();\n        response.setCurrentPage(currentPage);\n        response.setPageSize(pageSize);\n        response.setName(name);\n        response.setSerialNo(serialNo);\n\n        // Query the account service for the list of accounts and their count\n        ListWithBalanceCount listWithBalanceCount = accountService.listWithBalanceCount(name, serialNo);\n        response.setListWithBalanceCount(listWithBalanceCount);\n        response.setListWithBalance(accountService.listWithBalance(name, serialNo, currentPage, pageSize));\n\n        // Populate the response object\n        baseResponseInfo.setResponse(response);\n        baseResponseInfo.setCode(ResponseCode.SUCCESS);\n        baseResponseInfo.setMessage(ResponseMessage.SUCCESS);\n    } catch (Exception e) {\n        log.error(\"listWithBalance error: \", e);\n        baseResponseInfo.setCode(ResponseCode.FAILURE);\n        baseResponseInfo.setMessage(ResponseMessage.FAILURE);\n    }\n    return baseResponseInfo;\n}", "CodeBleu_score": 37.486301019874034}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response.setData(accountService.getStatistics(name, serialNo));\n        response.setCode(200);\n    } catch (Exception e) {\n        log.error(e.getMessage(), e);\n        response.setCode(500);\n        response.setMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 41.17390906106622}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        // Call the account service to fetch statistics\n        StatisticsInfo statisticsInfo = accountService.getStatistics(name, serialNo);\n\n        // Set the response code and data\n        response.setCode(200);\n        response.setData(statisticsInfo);\n    } catch (Exception e) {\n        // Log the error\n        logger.error(\"Error occurred while fetching statistics: {}\", e.getMessage());\n\n        // Set the response code and error message\n        response.setCode(500);\n        response.setMessage(e.getMessage());\n    }\n\n    return response;\n}", "CodeBleu_score": 42.059471146753594}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response.setCode(200);\n        response.setData(accountService.getStatistics(name, serialNo));\n    } catch (Exception e) {\n        logger.error(e.getMessage());\n        response.setCode(500);\n        response.setMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 39.775932215581925}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t        BaseResponseInfo response = new BaseResponseInfo();\n        try {\n            List<BillDetail> billDetails = accountHeadService.getBillDetailByNumber(billNo);\n            if (billDetails.size() > 0) {\n                response.setStatus(200);\n                response.setData(billDetails.get(0));\n            } else {\n                response.setStatus(404);\n                response.setMessage(\"Bill not found\");\n            }\n        } catch (Exception e) {\n            log.error(\"Error fetching bill details: \" + e.getMessage(), e);\n            response.setStatus(500);\n            response.setMessage(\"Error fetching bill details\");\n        }\n        return response;\n    }", "CodeBleu_score": 36.03230155964483}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<BillInfo> billList = accountHeadService.getDetailByNumber(billNo);\n        if (billList != null && billList.size() > 0) {\n            response.setCode(200);\n            response.setMessage(\"Success\");\n            response.setData(billList.get(0));\n        } else {\n            response.setCode(200);\n            response.setMessage(\"No data found\");\n        }\n    } catch (Exception e) {\n        logger.error(\"Error while fetching bill details: {}\", e.getMessage());\n        response.setCode(500);\n        response.setMessage(\"Error while fetching bill details\");\n    }\n    return response;\n}", "CodeBleu_score": 35.964773072507334}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<BillDetail> billDetailList = accountHeadService.getDetailByNumber(billNo);\n        if (billDetailList != null && !billDetailList.isEmpty()) {\n            response.setStatus(200);\n            response.setData(billDetailList);\n        } else {\n            response.setStatus(204);\n            response.setMessage(\"No data found\");\n        }\n    } catch (Exception e) {\n        log.error(\"Error fetching bill details: \" + e.getMessage());\n        response.setStatus(500);\n        response.setMessage(\"Error fetching bill details\");\n    }\n    return response;\n}", "CodeBleu_score": 35.60021970356438}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        // Get the user from the request\n        User user = (User) request.getSession().getAttribute(Constants.SESSION_USER);\n        // Call the depot service to fetch the data\n        response.setData(depotService.findDepotByCurrentUser(user));\n        response.setCode(200);\n        response.setMessage(getMessage(\"common.success\"));\n    } catch (Exception e) {\n        // Log the error\n        log.error(e.getMessage());\n        response.setCode(500);\n        response.setMessage(getMessage(\"common.error\"));\n    }\n    return response;\n}", "CodeBleu_score": 42.66567739294742}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response.setData(depotService.findDepotByCurrentUser(request));\n        response.setCode(200);\n    } catch (Exception e) {\n        log.error(e.getMessage(), e);\n        response.setCode(500);\n        response.setMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 43.07814507925393}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response.setData(depotService.findDepotByCurrentUser());\n        response.setCode(200);\n    } catch (Exception e) {\n        logger.error(\"findDepotByCurrentUser error:{}\", e);\n        response.setCode(500);\n        response.setMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 40.69442089673394}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    JSONArray jsonArray = new JSONArray();\n    JSONObject jsonObject = new JSONObject();\n    List<Function> functionList = functionService.getFunctionList(type, keyId);\n    JSONObject functionListJson = new JSONObject();\n    functionListJson.put(\"functionList\", functionList);\n    if (getTenantIdByToken(request).equals(\"1\")) {\n        jsonArray.add(functionListJson);\n    } else {\n        List<Function> filterList = new ArrayList<>();\n        for (Function function : functionList) {\n            if (!function.getName().equals(\"\u7cfb\u7edf\u7ba1\u7406\")) {\n                filterList.add(function);\n            }\n        }\n        functionListJson.put(\"functionList\", filterList);\n        jsonArray.add(functionListJson);\n    }\n    return jsonArray;\n}", "CodeBleu_score": 33.899695194471406}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    JSONArray array = new JSONArray();\n    JSONObject json = new JSONObject();\n    List<Function> functionList = functionService.getFunctionList(type, keyId);\n    json.put(\"functionList\", functionList);\n    String tenantId = getTenantIdByToken(request);\n    if (!tenantId.equals(\"admin\")) {\n        List<Function> newFunctionList = new ArrayList<>();\n        for (Function function : functionList) {\n            if (!function.getName().equals(\"\u7cfb\u7edf\u7ba1\u7406\")) {\n                newFunctionList.add(function);\n            }\n        }\n        json.put(\"functionList\", newFunctionList);\n    }\n    array.add(json);\n    return array;\n}", "CodeBleu_score": 33.32928569254563}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    JSONArray jsonArray = new JSONArray();\n    try {\n        List<Function> functionList = getFunctionList();\n        JSONObject jsonObject = new JSONObject();\n        jsonObject.put(\"UBType\", type);\n        jsonObject.put(\"UBKeyId\", keyId);\n        jsonObject.put(\"FunctionList\", functionList);\n        String tenantId = getTenantIdByToken(request);\n        if (!tenantId.equals(\"0\")) {\n            List<Function> filteredFunctions = functionList.stream()\n                    .filter(function -> !function.getName().equals(\"\u7cfb\u7edf\u7ba1\u7406\"))\n                    .collect(Collectors.toList());\n            jsonObject.put(\"FunctionList\", filteredFunctions);\n        }\n        jsonArray.add(jsonObject);\n    } catch (Exception e) {\n        log.error(e.getMessage());\n    }\n    return jsonArray;\n}", "CodeBleu_score": 37.54630766617046}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        // Retrieve the configuration using the platformConfigService\n        PlatformConfig platformConfig = platformConfigService.getConfigByKey(platformKey);\n        // Set the response code to 200 with the retrieved data\n        response.setCode(200);\n        response.setData(platformConfig);\n    } catch (Exception e) {\n        // Log the error\n        log.error(\"getInfoByKey error:\", e);\n        // Set the response code to 500 and include an error message\n        response.setCode(500);\n        response.setMsg(\"getInfoByKey error:\" + e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 46.933124417946324}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        PlatformConfig platformConfig = platformConfigService.getConfigByKey(platformKey);\n        if (platformConfig == null) {\n            response.setCode(ResponseCode.ERROR.getCode());\n            response.setMsg(\"no config info found\");\n            return response;\n        }\n        response.setCode(ResponseCode.SUCCESS.getCode());\n        response.setData(platformConfig);\n        return response;\n    } catch (Exception e) {\n        log.error(\"get platform config info by key error:\", e);\n        response.setCode(ResponseCode.ERROR.getCode());\n        response.setMsg(e.getMessage());\n        return response;\n    }\n}", "CodeBleu_score": 45.215497647145966}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response.setData(platformConfigService.getInfoByKey(platformKey));\n        response.setCode(200);\n    } catch (Exception e) {\n        log.error(\"getInfoByKey error:\", e);\n        response.setCode(500);\n        response.setMessage(\"getInfoByKey error\");\n    }\n    return response;\n}", "CodeBleu_score": 39.42818654364736}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> configList = systemConfigService.getSystemConfigList();\n        if (configList != null && configList.size() > 0) {\n            response.setCode(200);\n            response.setData(configList.get(0));\n        } else {\n            response.setCode(200);\n            response.setData(\"\");\n        }\n    } catch (Exception e) {\n        log.error(\"getCurrentInfo error:\", e);\n        response.setCode(500);\n        response.setData(\"getCurrentInfo error\");\n    }\n    return response;\n}", "CodeBleu_score": 36.5376806175389}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> systemConfigList = getSystemConfig();\n        if (systemConfigList != null && systemConfigList.size() > 0) {\n            response.setCode(200);\n            response.setData(systemConfigList.get(0));\n        } else {\n            response.setCode(500);\n            response.setMessage(\"Failed to fetch system configuration\");\n        }\n    } catch (Exception e) {\n        logger.error(\"Failed to fetch system configuration\", e);\n        response.setCode(500);\n        response.setMessage(\"Failed to fetch system configuration\");\n    }\n    return response;\n}", "CodeBleu_score": 32.01009770098682}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> list = systemConfigService.getList(new SystemConfig());\n        if (list != null && list.size() > 0) {\n            response.setCode(200);\n            response.setData(list.get(0));\n        }\n    } catch (Exception e) {\n        log.error(\"getCurrentInfo error:\", e);\n        response.setCode(500);\n        response.setMessage(\"\u83b7\u53d6\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\");\n    }\n    return response;\n}", "CodeBleu_score": 40.25260493878196}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    try {\n        String businessPath = getParameter(request, \"businessPath\");\n        File file = getFile(request);\n        String fileType = getParameter(request, \"fileType\");\n        String fileName = getParameter(request, \"fileName\");\n        String filePath = getParameter(request, \"filePath\");\n        if (isNotEmpty(businessPath) && isNotEmpty(file) && isNotEmpty(fileType) && isNotEmpty(fileName) && isNotEmpty(filePath)) {\n            if (fileType.equals(\"local\")) {\n                uploadLocal(file, fileName, businessPath, filePath);\n            } else if (fileType.equals(\"aliOss\")) {\n                uploadAliOss(file, fileName, businessPath, filePath);\n            }\n            response.setStatus(200);\n            return new BaseResponseInfo(200, \"Upload Success\");\n        } else {\n            response.setStatus(400);\n            return new BaseResponseInfo(400, \"Upload Failed\");\n        }\n    } catch (Exception e) {\n        log.error(\"Upload Error: \" + e.getMessage());\n        response.setStatus(500);\n        return new BaseResponseInfo(500, \"Upload Failed\");\n    }\n}", "CodeBleu_score": 27.817599391167608}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    BaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n    try {\n        String businessPath = getParameter(request, \"businessPath\");\n        String fileType = getParameter(request, \"fileType\");\n        String fileName = getParameter(request, \"fileName\");\n        String file = getParameter(request, \"file\");\n        String fileId = getParameter(request, \"fileId\");\n        String fileUrl = getParameter(request, \"fileUrl\");\n        String filePath = getParameter(request, \"filePath\");\n        String filePath2 = getParameter(request, \"filePath2\");\n        String filePath3 = getParameter(request, \"filePath3\");\n        String filePath4 = getParameter(request, \"filePath4\");\n        String filePath5 = getParameter(request, \"filePath5\");\n        String filePath6 = getParameter(request, \"filePath6\");\n        String filePath7 = getParameter(request, \"filePath7\");\n        String filePath8 = getParameter(request, \"filePath8\");\n        String filePath9 = getParameter(request, \"filePath9\");\n        String filePath10 = getParameter(request, \"filePath10\");\n        String filePath11 = getParameter(request, \"filePath11\");\n        String filePath12 = getParameter(request, \"filePath12\");\n        String filePath13 = getParameter(request, \"filePath13\");\n        String filePath14 = getParameter(request, \"filePath14\");\n        String filePath15 = getParameter(request, \"filePath15\");\n        String filePath16 = getParameter(request, \"filePath16\");\n        String filePath17 = getParameter(request, \"filePath17\");\n        String filePath18 = getParameter(request, \"filePath18\");\n        String filePath19 = getParameter(request, \"filePath19\");\n        String filePath20 = getParameter(request, \"filePath20\");\n        String filePath21 = getParameter(request, \"filePath21\");\n        String filePath22 = getParameter(request, \"filePath22\");\n        String filePath23 = get", "CodeBleu_score": 19.393653829423208}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    BaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n    try {\n        String businessPath = getParameter(request, \"businessPath\");\n        String fileUploadType = getParameter(request, \"fileUploadType\");\n        if (isNotEmpty(businessPath) && isNotEmpty(fileUploadType)) {\n            MultipartFile file = getFile(request);\n            if (file != null) {\n                if (\"local\".equals(fileUploadType)) {\n                    uploadLocal(file, businessPath);\n                } else if (\"aliOss\".equals(fileUploadType)) {\n                    uploadAliOss(file, businessPath);\n                }\n                baseResponseInfo.setCode(ResponseCode.SUCCESS.getCode());\n                baseResponseInfo.setMessage(ResponseCode.SUCCESS.getMessage());\n            } else {\n                baseResponseInfo.setCode(ResponseCode.FILE_EMPTY.getCode());\n                baseResponseInfo.setMessage(ResponseCode.FILE_EMPTY.getMessage());\n            }\n        } else {\n            baseResponseInfo.setCode(ResponseCode.PARAM_ERROR.getCode());\n            baseResponseInfo.setMessage(ResponseCode.PARAM_ERROR.getMessage());\n        }\n    } catch (Exception e) {\n        baseResponseInfo.setCode(ResponseCode.SYSTEM_ERROR.getCode());\n        baseResponseInfo.setMessage(ResponseCode.SYSTEM_ERROR.getMessage());\n        log.error(\"upload error: \", e);\n    }\n    return baseResponseInfo;\n}", "CodeBleu_score": 29.57528560639375}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t    try {\n        String title = jsonObject.getString(\"title\");\n        String head = jsonObject.getString(\"head\");\n        String tip = jsonObject.getString(\"tip\");\n        List<String> dataList = jsonObject.getJSONArray(\"dataList\").toList(String.class);\n        String fileName = \"test.xlsx\";\n        response.setContentType(\"application/vnd.ms-excel;charset=UTF-8\");\n        response.setHeader(\"Content-Disposition\", \"attachment;filename=\" + fileName);\n        ServletOutputStream out = response.getOutputStream();\n        ExcelUtil.exportExcel(out, title, head, tip, dataList);\n    } catch (Exception e) {\n        log.error(\"Export Excel by Param error:{}\", e.getMessage());\n    }\n}", "CodeBleu_score": 57.56074214074619}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t    try {\n        String title = jsonObject.getString(\"title\");\n        String head = jsonObject.getString(\"head\");\n        String tip = jsonObject.getString(\"tip\");\n        List<Map<String, Object>> dataList = jsonObject.getJSONArray(\"dataList\").toJavaList(Map.class);\n        String fileName = \"exportExcelByParam\";\n        String sheetName = \"sheet1\";\n        String[][] data = new String[dataList.size()][];\n        for (int i = 0; i < dataList.size(); i++) {\n            data[i] = dataList.get(i).values().toArray(new String[0]);\n        }\n        ExcelExportUtil.exportExcel(response, title, head, tip, sheetName, data);\n    } catch (Exception e) {\n        log.error(\"exportExcelByParam error:{}\", e);\n    }\n}", "CodeBleu_score": 55.6999975127805}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t    try {\n        String title = jsonObject.getString(\"title\");\n        String head = jsonObject.getString(\"head\");\n        String tip = jsonObject.getString(\"tip\");\n        List<Object> dataList = jsonObject.getJSONArray(\"dataList\").toList();\n        List<String> headList = new ArrayList<>();\n        List<String> tipList = new ArrayList<>();\n        List<List<String>> data = new ArrayList<>();\n        JSONArray headArray = new JSONArray(head);\n        JSONArray tipArray = new JSONArray(tip);\n        for (int i = 0; i < headArray.length(); i++) {\n            headList.add(headArray.getString(i));\n        }\n        for (int i = 0; i < tipArray.length(); i++) {\n            tipList.add(tipArray.getString(i));\n        }\n        for (Object object : dataList) {\n            List<String> list = new ArrayList<>();\n            JSONArray array = new JSONArray(object.toString());\n            for (int i = 0; i < array.length(); i++) {\n                list.add(array.getString(i));\n            }\n            data.add(list);\n        }\n        response.setContentType(\"application/vnd.ms-excel;charset=utf-8\");\n        response.setHeader(\"Content-Disposition\", \"attachment;filename=\" + title + \".xls\");\n        OutputStream outputStream = response.getOutputStream();\n        ExcelUtil.exportExcel(outputStream, title, headList, tipList, data);\n        outputStream.flush();\n        outputStream.close();\n    } catch (Exception e) {\n        log.error(\"\u5bfc\u51faExcel\u5931\u8d25\uff1a\" + e.getMessage());\n        e.printStackTrace();\n    }\n}", "CodeBleu_score": 50.742804372793145}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t    Account account = new Account();\n    account.setName(obj.getString(\"name\"));\n    account.setInitialAmount(obj.getDoubleValue(\"initialAmount\"));\n    if (account.getInitialAmount() == 0) {\n        account.setInitialAmount(getInitialAmount());\n    }\n    account.setIsDefault(getIsDefault());\n    account.setEnabled(true);\n    int result = insertSelective(account);\n    insertLog(account, request);\n    return result;\n}", "CodeBleu_score": 29.91016016649297}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t    Account account = parseObject(obj);\n    account.setInitialAmount(getInitialAmount(account.getInitialAmount()));\n    account.setIsDefault(getIsDefault(account.getIsDefault()));\n    account.setEnabled(getEnabled(account.getEnabled()));\n    int result = insertSelective(account);\n    insertLog(account, request);\n    return result;\n}", "CodeBleu_score": 23.280442358563242}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tAccount account = new Account();\n\ttry {\n\t\taccount.setAccountName(obj.getString(\"accountName\"));\n\t\taccount.setAccountType(obj.getString(\"accountType\"));\n\t\taccount.setAccountNumber(obj.getString(\"accountNumber\"));\n\t\taccount.setBankName(obj.getString(\"bankName\"));\n\t\taccount.setBranchName(obj.getString(\"branchName\"));\n\t\taccount.setIfscCode(obj.getString(\"ifscCode\"));\n\t\taccount.setAccountHolderName(obj.getString(\"accountHolderName\"));\n\t\taccount.setAccountHolderAddress(obj.getString(\"accountHolderAddress\"));\n\t\taccount.setAccountHolderPhone(obj.getString(\"accountHolderPhone\"));\n\t\taccount.setAccountHolderEmail(obj.getString(\"accountHolderEmail\"));\n\t\taccount.setAccountHolderId(obj.getString(\"accountHolderId\"));\n\t\taccount.setAccountHolderIdType(obj.getString(\"accountHolderIdType\"));\n\t\taccount.setAccountHolderIdNumber(obj.getString(\"accountHolderIdNumber\"));\n\t\taccount.setAccountHolderIdExpiryDate(obj.getString(\"accountHolderIdExpiryDate\"));\n\t\taccount.setAccountHolderIdIssueDate(obj.getString(\"accountHolderIdIssueDate\"));\n\t\taccount.setAccountHolderIdIssuePlace(obj.getString(\"accountHolderIdIssuePlace\"));\n\t\taccount.setAccountHolderIdIssueAuthority(obj.getString(\"accountHolderIdIssueAuthority\"));\n\t\taccount.setAccountHolderIdIssueAuthorityAddress(obj.getString(\"accountHolderIdIssueAuthorityAddress\"));\n\t\taccount.setAccountHolderIdIssueAuthorityPhone(obj.getString(\"accountHolderIdIssueAuthorityPhone\"));\n\t\taccount.setAccountHolderIdIssueAuthorityEmail(obj.getString(\"accountHolderIdIssueAuthorityEmail\"));\n\t\taccount.setAccountHolderIdIssueAuthorityDesignation(obj.getString(\"accountHolderIdIssueAuthorityDesignation\"));\n\t\taccount.setAccountHolderIdIssueAuthorityDesignation(obj.getString(\"accountHolderIdIssueAuthorityDesignation\"));\n\t\taccount.setAccountHolderIdIssueAuthorityDesignation(obj.getString(\"accountHolderIdIssueAuthorityDesignation", "CodeBleu_score": 13.764991439094143}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    try {\n        return mapper.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        log.error(\"listWithBalanceCount error: \", e);\n        return null;\n    }\n}", "CodeBleu_score": 30.240840081841736}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    try {\n        return countsByAccount.get(new Account(name, serialNo));\n    } catch (Exception e) {\n        log.error(\"Exception in listWithBalanceCount\", e);\n        return null;\n    }\n}", "CodeBleu_score": 31.142685322819407}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    try {\n        return mapper.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        log.error(\"listWithBalanceCount error\", e);\n        return null;\n    }\n}", "CodeBleu_score": 30.20415842895711}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    int result = 0;\n    try {\n        result = depotItemMapper.deleteByPrimaryKey(id);\n        if (result > 0) {\n            logger.info(\"delete depot item success, id: \" + id);\n        } else {\n            logger.info(\"delete depot item fail, id: \" + id);\n        }\n    } catch (Exception e) {\n        logger.error(\"delete depot item fail, id: \" + id);\n        logger.error(e.getMessage(), e);\n        throw e;\n    }\n    return result;\n}", "CodeBleu_score": 54.224391034573415}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    try {\n        return depotItemMapper.deleteByPrimaryKey(id);\n    } catch (Exception e) {\n        log.error(\"delete depot item fail, id:{}\", id, e);\n        throw new Exception(\"delete depot item fail\");\n    }\n}", "CodeBleu_score": 30.54188307828425}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    try {\n        return depotItemMapper.deleteByPrimaryKey(id);\n    } catch (Exception e) {\n        logger.error(\"delete depot item fail\", e);\n        throw new Exception(e.getMessage());\n    }\n}", "CodeBleu_score": 32.16320494400593}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t    HttpClient client = HttpClients.createDefault();\n    try {\n        String url = \"http://localhost:8080/projects/\" + projectName + \"/nodes/\" + nodeType + \"/\" + nodeKey;\n        HttpGet request = new HttpGet(url);\n        HttpResponse response = client.execute(request);\n        if (response.getStatusLine().getStatusCode() == 200) {\n            String responseBody = EntityUtils.toString(response.getEntity());\n            if (responseBody.contains(\"key\")) {\n                return true;\n            }\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        client.close();\n    }\n    return false;\n}", "CodeBleu_score": 38.61988158394591}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t    try {\n        CloseableHttpClient httpClient = HttpClients.createDefault();\n        HttpGet request = new HttpGet(String.format(\"%s/%s/%s/%s\", getProtocol(), projectName, nodeType, nodeKey));\n        request.addHeader(\"accept\", \"application/json\");\n        CloseableHttpResponse response = httpClient.execute(request);\n        try {\n            HttpEntity entity = response.getEntity();\n            if (entity != null) {\n                String result = EntityUtils.toString(entity);\n                JsonNode jsonNode = new ObjectMapper().readValue(result, JsonNode.class);\n                if (jsonNode.has(\"key\")) {\n                    return true;\n                }\n            }\n        } finally {\n            response.close();\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return false;\n}", "CodeBleu_score": 52.15211629170563}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t    CloseableHttpClient httpclient = HttpClients.createDefault();\n    try {\n        String url = \"http://localhost:8080/rest/api/1.0/projects/\" + projectName + \"/nodes?type=\" + nodeType + \"&key=\" + nodeKey;\n        HttpGet httpget = new HttpGet(url);\n        CloseableHttpResponse response = httpclient.execute(httpget);\n        try {\n            HttpEntity entity = response.getEntity();\n            if (entity != null) {\n                String result = EntityUtils.toString(entity);\n                JSONObject json = new JSONObject(result);\n                if (json.has(\"key\")) {\n                    return true;\n                }\n            }\n        } finally {\n            response.close();\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        try {\n            httpclient.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return false;\n}", "CodeBleu_score": 42.738227928308476}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t    CloseableHttpClient httpClient = HttpClients.createDefault();\n    try {\n        HttpGet request = new HttpGet(getHost() + getPort() + \"/addEdge\");\n        List<NameValuePair> params = new ArrayList<NameValuePair>(5);\n        params.add(new BasicNameValuePair(\"projectName\", projectName));\n        params.add(new BasicNameValuePair(\"edgeType\", edgeType));\n        params.add(new BasicNameValuePair(\"fromType\", fromType));\n        params.add(new BasicNameValuePair(\"toType\", toType));\n        params.add(new BasicNameValuePair(\"from\", from));\n        params.add(new BasicNameValuePair(\"to\", to));\n        request.setURI(new URIBuilder(request.getURI()).addParameters(params).build());\n        HttpResponse response = httpClient.execute(request);\n        HttpEntity entity = response.getEntity();\n        if (entity != null) {\n            String result = EntityUtils.toString(entity);\n            JSONObject json = (JSONObject) JSONValue.parse(result);\n            if (json.containsKey(\"key\")) {\n                return true;\n            }\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        try {\n            httpClient.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return false;\n}", "CodeBleu_score": 45.694650804530376}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t    CloseableHttpClient httpclient = HttpClients.createDefault();\n    HttpGet httpget = new HttpGet(getHost() + \"/api/projects/\" + projectName + \"/edges?edgeType=\" + edgeType + \"&fromType=\" + fromType + \"&toType=\" + toType + \"&from=\" + from + \"&to=\" + to);\n    try {\n        CloseableHttpResponse response = httpclient.execute(httpget);\n        try {\n            HttpEntity entity = response.getEntity();\n            String responseString = EntityUtils.toString(entity);\n            JSONObject jsonObject = new JSONObject(responseString);\n            if (jsonObject.has(\"key\")) {\n                return true;\n            } else {\n                return false;\n            }\n        } finally {\n            response.close();\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    } finally {\n        try {\n            httpclient.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}", "CodeBleu_score": 46.44316328057376}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t    CloseableHttpClient httpclient = HttpClients.createDefault();\n    try {\n        HttpGet httpget = new HttpGet(getEndpoint() + \"/projects/\" + projectName + \"/edges?edgeType=\" + edgeType + \"&fromType=\" + fromType + \"&toType=\" + toType + \"&from=\" + from + \"&to=\" + to);\n        httpget.setHeader(\"Accept\", \"application/json\");\n        CloseableHttpResponse response = httpclient.execute(httpget);\n        try {\n            HttpEntity entity = response.getEntity();\n            if (entity != null) {\n                String result = EntityUtils.toString(entity);\n                JSONObject json = new JSONObject(result);\n                if (json.has(\"key\")) {\n                    return true;\n                }\n            }\n        } finally {\n            response.close();\n        }\n    } catch (Exception ex) {\n        ex.printStackTrace();\n    } finally {\n        try {\n            httpclient.close();\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n    }\n    return false;\n}", "CodeBleu_score": 47.00952362704099}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\t    if (event != null && event.getMessage() != null) {\n        if (event.getLocation() == null) {\n            event.setLocation(acquireTestingLocation());\n        }\n        event.setTime(System.currentTimeMillis());\n        String eventJson = writeValueAsString(event);\n        ProducerRecord<String, String> record = new ProducerRecord<>(event.getTarget() != null ? event.getTarget() : \"test\", eventJson);\n        producer.send(record);\n        producer.flush();\n    }\n}", "CodeBleu_score": 35.909850263580324}, {"code": "public void sendEvent(Event event){\n\t    if (event == null || event.getMessage() == null) {\n        return;\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(acquireTestingLocation());\n    }\n    event.setTime(new Date());\n    String jsonString = writeValueAsString(event);\n    ProducerRecord<String, String> record = new ProducerRecord<>(event.getTarget() != null ? event.getTarget() : \"test\", jsonString);\n    producer.send(record);\n    producer.flush();\n}", "CodeBleu_score": 40.359510018896685}, {"code": "public void sendEvent(Event event){\n\t    if (event != null && event.getMessage() != null) {\n        if (event.getLocation() == null) {\n            event.setLocation(acquireTestingLocation());\n        }\n        event.setTime(new Date());\n        String json = writeValueAsString(event);\n        String topic = event.getTarget() != null ? event.getTarget() : \"test\";\n        ProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, json);\n        producer.send(record);\n        producer.flush();\n    }\n}", "CodeBleu_score": 42.60510031681801}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t    // Initialize OSS client\n    OSSClient client = new OSSClient(getEndpoint(), getAccessKeyId(), getAccessKeySecret());\n\n    // Upload file content as an object\n    client.putObject(getOssBucket(), objName, new ByteArrayInputStream(content));\n\n    // Shut down OSS client\n    client.shutdown();\n\n    // Return URL of uploaded object\n    return \"https://\" + getOssBucket() + \".\" + getEndpoint() + \"/\" + objName;\n}", "CodeBleu_score": 32.160280330928394}, {"code": "public String upload(String objName, byte[] content){\n\t    OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);\n    ossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n    ossClient.shutdown();\n    return \"https://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}", "CodeBleu_score": 31.898900963193267}, {"code": "public String upload(String objName, byte[] content){\n\t    // Initialize the OSS client with access credentials\n    OSS ossClient = new OSSClientBuilder().build(getEndpoint(), getAccessKeyId(), getAccessKeySecret());\n\n    // Upload the file content as an object with the specified name\n    ossClient.putObject(getOssBucket(), objName, new ByteArrayInputStream(content));\n\n    // Shut down the OSS client\n    ossClient.shutdown();\n\n    // Return the URL of the uploaded object\n    return \"https://\" + getOssBucket() + \".\" + getEndpoint() + \"/\" + objName;\n}", "CodeBleu_score": 38.16443582933305}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t    IpToLocationWorker worker = ensureIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\",", "CodeBleu_score": 20.14970063915839}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t    IpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\",", "CodeBleu_score": 22.17246620771095}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t    IpToLocationWorker worker = ensureIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\",", "CodeBleu_score": 20.14970063915839}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\t    if (this.lowLevelRestClient == null && this.highLevelRestClient == null) {\n        synchronized (this) {\n            if (this.lowLevelRestClient == null && this.highLevelRestClient == null) {\n                // Parse the cluster hosts and ports\n                String[] hosts = parseHosts(this.clusterHosts);\n                int[] ports = getClusterHostPort(hosts);\n                // Build the low-level REST client\n                this.lowLevelRestClient = new RestHighLevelClient(RestClient.builder(new HttpHost(hosts[0], ports[0])));\n                // Build the high-level REST client\n                this.highLevelRestClient = new RestHighLevelClient(builder(hosts, ports));\n            }\n        }\n    }\n}", "CodeBleu_score": 40.8309209684265}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t    if (esLowLevelClient == null && esHighLevelClient == null) {\n        synchronized (this) {\n            if (esLowLevelClient == null && esHighLevelClient == null) {\n                parseHosts();\n                builder = RestClient.builder(new HttpHost(host, port, scheme));\n                esLowLevelClient = builder.build();\n                esHighLevelClient = new RestHighLevelClient(builder);\n            }\n        }\n    }\n}", "CodeBleu_score": 44.652227021730596}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t    if (esClient == null && esRestClient == null) {\n        synchronized (this) {\n            if (esClient == null && esRestClient == null) {\n                // Parse the cluster hosts and ports\n                String[] hosts = parseHosts(clusterHosts);\n                int[] ports = getClusterHostPort(hosts);\n\n                // Build the low-level REST client\n                esRestClient = builder.setHosts(hosts).setPorts(ports).build();\n\n                // Build the high-level REST client\n                esClient = new ElasticsearchClient(esRestClient);\n            }\n        }\n    }\n}", "CodeBleu_score": 45.187444851843175}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<HttpHost>();\n    String[] hostArray = clusterHostList.split(\",\");\n    for (String host : hostArray) {\n        String[] hostParts = host.split(\":\");\n        String hostname = hostParts[0];\n        int port = clusterPort;\n        if (hostParts.length > 1) {\n            port = Integer.parseInt(hostParts[1]);\n        }\n        hosts.add(new HttpHost(hostname, port, \"http\"));\n    }\n    return hosts;\n}", "CodeBleu_score": 41.20249251973686}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<HttpHost>();\n    String[] hostList = clusterHostList.split(\",\");\n    for (String host : hostList) {\n        int port = clusterPort;\n        if (host.contains(\":\")) {\n            String[] hostParts = host.split(\":\");\n            host = hostParts[0];\n            port = parseInt(hostParts[1]);\n        }\n        hosts.add(new HttpHost(host, port));\n    }\n    return hosts;\n}", "CodeBleu_score": 44.116290941744886}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    String[] hosts = clusterHostList.split(\",\");\n    List<HttpHost> httpHosts = new ArrayList<HttpHost>();\n    for (String host : hosts) {\n        int port = clusterPort;\n        if (host.contains(\":\")) {\n            String[] hostParts = host.split(\":\");\n            host = hostParts[0];\n            port = Integer.parseInt(hostParts[1]);\n        }\n        httpHosts.add(new HttpHost(host, port, \"http\"));\n    }\n    return httpHosts;\n}", "CodeBleu_score": 47.312675597390594}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\t    while (true) {\n        try {\n            Task task = taskQueue.poll(30, TimeUnit.SECONDS);\n            if (task == null) {\n                continue;\n            }\n            if (task instanceof PlainTextMessageTask) {\n                PlainTextMessageTask messageTask = (PlainTextMessageTask) task;\n                String recipientNumber = messageTask.getRecipientNumber();\n                String messageData = messageTask.getMessageData();\n                if (messageData == null || messageData.isEmpty()) {\n                    logger.error(\"Invalid message data for recipient number \" + recipientNumber);\n                    continue;\n                }\n                try {\n                    sendPlainTextMessage(recipientNumber, messageData);\n                } catch (Exception e) {\n                    logger.error(\"Error sending message to recipient number \" + recipientNumber, e);\n                }\n            }\n        } catch (InterruptedException e) {\n            logger.error(\"Polling thread interrupted\", e);\n            throw e;\n        }\n    }\n}", "CodeBleu_score": 27.332195691779464}, {"code": "protected void pollingWork() throws InterruptedException{\n\t    Queue<Task> queue = getQueue();\n    while (true) {\n        Task task = queue.poll(30, TimeUnit.SECONDS);\n        if (task != null) {\n            if (task.getType() == Task.TYPE_SEND_PLAIN_TEXT_MESSAGE) {\n                String recipient = task.getRecipient();\n                String message = task.getMessage();\n                if (isValidMessage(message)) {\n                    try {\n                        sendPlainTextMessage(recipient, message);\n                    } catch (Exception e) {\n                        log.error(\"Failed to send message to \" + recipient + \": \" + e.getMessage());\n                    }\n                } else {\n                    log.error(\"Invalid message data for recipient \" + recipient);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 31.77401744578234}, {"code": "protected void pollingWork() throws InterruptedException{\n\t    // Poll for tasks with a 30-second timeout\n    Task task = taskQueue.poll(30, TimeUnit.SECONDS);\n    if (task != null) {\n        // Check the task type\n        if (task instanceof PlainTextMessageTask) {\n            // Extract the recipient number and message data\n            PlainTextMessageTask plainTextMessageTask = (PlainTextMessageTask) task;\n            String recipient = plainTextMessageTask.getRecipient();\n            String message = plainTextMessageTask.getMessage();\n\n            // Validate the data\n            if (recipient == null || recipient.isEmpty() || message == null || message.isEmpty()) {\n                log.error(\"Invalid recipient or message data\");\n                return;\n            }\n\n            // Send the message\n            try {\n                sendPlainTextMessage(recipient, message);\n            } catch (Exception e) {\n                log.error(\"Error sending message: \" + e.getMessage());\n                e.printStackTrace();\n            }\n        }\n    }\n}", "CodeBleu_score": 35.82191120781616}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t    CloseableHttpClient httpClient = HttpClients.createDefault();\n    HttpGet httpGet = new HttpGet(uri);\n    HttpResponse response = httpClient.execute(httpGet);\n    HttpEntity entity = response.getEntity();\n    String content = EntityUtils.toString(entity, \"UTF-8\");\n    log.info(\"Response content: \" + content);\n    return content;\n}", "CodeBleu_score": 60.07384343927842}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t    CloseableHttpClient httpClient = HttpClients.createDefault();\n    HttpGet httpGet = new HttpGet(uri);\n    try (CloseableHttpResponse response = httpClient.execute(httpGet)) {\n        HttpEntity entity = response.getEntity();\n        String content = EntityUtils.toString(entity, \"UTF-8\");\n        logger.info(\"Response content: {}\", content);\n        return content;\n    }\n}", "CodeBleu_score": 52.052693927196}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t    CloseableHttpClient httpClient = HttpClients.createDefault();\n    HttpGet request = new HttpGet(uri);\n    request.addHeader(\"Accept\", \"application/xml\");\n    HttpResponse response = httpClient.execute(request);\n    HttpEntity entity = response.getEntity();\n    String content = EntityUtils.toString(entity, \"UTF-8\");\n    log.info(\"Response content: {}\", content);\n    return content;\n}", "CodeBleu_score": 56.27707471009654}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    factory.setNamespaceAware(true);\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    InputSource is = new InputSource(new StringReader(messageXmlStr));\n    Document doc = builder.parse(is);\n    Element root = doc.getDocumentElement();\n    return decodeNodeToMap(root, doTrim);\n}", "CodeBleu_score": 38.08383775239586}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t    DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n    dbFactory.setNamespaceAware(true);\n    DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();\n    InputSource inputSource = new InputSource(new StringReader(messageXmlStr));\n    Document doc = dBuilder.parse(inputSource);\n    doc.getDocumentElement().normalize();\n    NodeList nList = doc.getDocumentElement().getChildNodes();\n    return decodeNodeToMap(nList, doTrim);\n}", "CodeBleu_score": 40.060043345568225}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    dbf.setNamespaceAware(true);\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    Document doc = db.parse(new InputSource(new StringReader(messageXmlStr)));\n    Element root = doc.getDocumentElement();\n    if (root == null) {\n        return null;\n    }\n    return decodeNodeToMap(root, doTrim);\n}", "CodeBleu_score": 35.40121989402639}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t    if (isEligibleForAutoProcessing(orderRecord)) {\n        final String trxName = getTrxName(orderRecord);\n        if (trxName != null) {\n            addLog(orderRecord, \"Generate schedules after commit\", \"Transaction name is '\" + trxName + \"'\");\n            ofRepoId(orderRecord.getC_Order_ID()).scheduleIfNotPostponed(trxName);\n        } else {\n            addLog(orderRecord, \"Generate schedules after commit\", \"Transaction name is null\");\n        }\n    } else {\n        addLog(orderRecord, \"Generate schedules after commit\", \"Not eligible for auto-processing\");\n        scheduleIfNotPostponed(orderRecord);\n    }\n}", "CodeBleu_score": 30.761427821565672}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t    if (isEligibleForAutoProcessing(orderRecord)) {\n        addLog(orderRecord, \"Automatic Processing\");\n        scheduleIfNotPostponed(orderRecord, getTrxName(orderRecord), false);\n    } else {\n        addLog(orderRecord, \"Postponed Processing\");\n        scheduleIfNotPostponed(orderRecord, getTrxName(orderRecord), true);\n    }\n}", "CodeBleu_score": 19.30129664670038}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t    if (isEligibleForAutoProcessing(orderRecord)) {\n        addLog(orderRecord, \"Generate Schedules after commit\");\n        scheduleIfNotPostponed(orderRecord);\n    } else {\n        addLog(orderRecord, \"Schedule missing shipment schedules\");\n        scheduleMissingShipmentSchedules(orderRecord);\n    }\n}", "CodeBleu_score": 17.72695657506139}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = User::where('email', $request->email)->first();\n\n    if (!$user || !Hash::check($request->password, $user->password)) {\n        $this->fireFailedEvent($user, [\n            'email' => $request->email,\n            'password' => $request->password,\n        ]);\n\n        throw ValidationException::withMessages([\n            'email' => ['The provided credentials are incorrect.'],\n        ]);\n    }\n\n    return $user;\n}", "CodeBleu_score": 44.70871479355405}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = $this->getUser($request);\n    if (!$user) {\n        $this->fireFailedEvent($request);\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    if (!$this->guard->getProvider()->validateCredentials($user, $request->password)) {\n        $this->fireFailedEvent($request);\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    return $user;\n}", "CodeBleu_score": 49.422418150244525}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = User::where('email', $request->email)->first();\n\n    if ($user && $this->guard->getProvider()->validateCredentials($user, $request->password)) {\n        return $user;\n    }\n\n    $this->fireFailedEvent($user, [\n        'email' => $request->email,\n        'password' => $request->password,\n    ]);\n\n    $this->throwFailedAuthenticationException($request);\n}", "CodeBleu_score": 54.17506582462577}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter->increment($request);\n\n    throw ValidationException::withMessages([\n        $this->username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 73.23214040644866}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter->increment($this->getKey($request));\n\n    throw ValidationException::withMessages([\n        $this->username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 67.92932538470797}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    if (! $this->limiter->tooManyAttempts($request)) {\n        $this->limiter->increment($request);\n    }\n\n    throw ValidationException::withMessages([\n        $this->username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 66.31087100617763}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t    $userId = $request->session()->get('login.id');\n    $user = User::find($userId);\n\n    if ($user) {\n        $webauthn = Webauthn::prepareAssertion($user, $request->session()->get('login.remember'));\n        $data = [\n            'publicKey' => $webauthn->publicKey,\n        ];\n    } else {\n        $data = [];\n    }\n\n    return Inertia::render('Auth/TwoFactorChallenge', $data + [\n        'twoFactor' => optional($user)->two_factor_secret && ! is_null(optional($user)->two_factor_confirmed_at),\n        'remember' => $request->session()->get('login.remember'),\n    ]);\n}", "CodeBleu_score": 70.04460717284032}, {"code": "<?\npublic function toResponse($request){\n\t    $userId = $request->session()->get('login.id');\n    $user = User::find($userId);\n\n    if ($user) {\n        $request->session()->put([\n            'auth.password_confirmed_at' => time(),\n        ]);\n\n        $data = Webauthn::prepareAssertion($user);\n\n        return Inertia::render('Auth/TwoFactorChallenge', $data + [\n            'twoFactor' => optional($user)->two_factor_secret && ! is_null(optional($user)->two_factor_confirmed_at),\n            'remember' => $request->session()->get('login.remember'),\n        ]);\n    }\n\n    return Inertia::render('Auth/TwoFactorChallenge', [\n        'twoFactor' => false,\n        'remember' => $request->session()->get('login.remember'),\n    ]);\n}", "CodeBleu_score": 62.52814557522575}, {"code": "<?\npublic function toResponse($request){\n\t    $userId = $request->session()->get('login.id');\n    $user = User::find($userId);\n\n    if ($user) {\n        Webauthn::prepareAssertion($user);\n\n        $data = [\n            'publicKey' => Webauthn::getPublicKey($user),\n        ];\n    }\n\n    return Inertia::render('Auth/TwoFactorChallenge', $data + [\n        'twoFactor' => optional($user)->two_factor_secret && ! is_null(optional($user)->two_factor_confirmed_at),\n        'remember' => $request->session()->get('login.remember'),\n    ]);\n}", "CodeBleu_score": 70.87597470803391}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    // Check if there is an existing user token for the given driver and socialite user ID\n    $userToken = UserToken::firstWhere([\n        'driver' => $driver,\n        'socialite_id' => $socialite->getId(),\n    ]);\n\n    // If user token found, verify user association and retrieve associated user\n    if ($userToken) {\n        $this->checkUserAssociation($userToken, $socialite);\n        return $userToken->user;\n    }\n\n    // If user token not found, create a new user or associate socialite token with existing user\n    return $this->getUserOrCreate($request, $socialite);\n}", "CodeBleu_score": 39.589025108131416}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    // Check if there is an existing user token for the given driver and socialite user ID\n    $userToken = UserToken::firstWhere([\n        'driver' => $driver,\n        'socialite_id' => $socialite->getId()\n    ]);\n\n    // If user token is found, retrieve associated user and verify user association\n    if ($userToken) {\n        $user = $userToken->user;\n\n        // Verify user association\n        if (!$this->checkUserAssociation($user, $driver, $socialite)) {\n            throw new InvalidUserAssociationException();\n        }\n\n        return $user;\n    }\n\n    // If user token is not found, create a new user or associate socialite token with an existing user\n    $user = $this->getUserOrCreate($socialite);\n\n    // Create or associate user token with the user\n    $this->createUserToken($user, $driver, $socialite);\n\n    return $user;\n}", "CodeBleu_score": 54.033075977301706}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    $userToken = UserToken::firstWhere([\n        'driver' => $driver,\n        'socialite_id' => $socialite->getId(),\n    ]);\n\n    if ($userToken) {\n        $this->checkUserAssociation($userToken);\n\n        return $userToken->user;\n    }\n\n    $user = $this->getUserOrCreate($socialite);\n\n    $this->createUserToken($user, $driver, $socialite);\n\n    return $user;\n}", "CodeBleu_score": 46.897972195383296}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $user = $request->user();\n    if (! $user) {\n        return false;\n    }\n\n    $this->filterCredentials($request);\n\n    if (! WebauthnFacade::validateAssertion($user, $request)) {\n        $this->fireFailedEvent($user, $request);\n\n        $this->throwFailedAuthenticationException($request);\n\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 60.82356098060407}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $user = $request->user();\n\n    if (!$user) {\n        return false;\n    }\n\n    $credentials = $this->filterCredentials($request);\n\n    if ($this->validateAssertion($user, $credentials)) {\n        return true;\n    }\n\n    $this->fireFailedEvent($user, $request);\n\n    $this->throwFailedAuthenticationException($request);\n\n    return false;\n}", "CodeBleu_score": 61.13019324427638}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $user = $request->user();\n    if (!$user) {\n        return false;\n    }\n    $filteredCredentials = $this->filterCredentials($request);\n    $this->fireFailedEvent($user, $filteredCredentials, 'webauthn');\n    $validated = WebauthnFacade::validateAssertion($user, $filteredCredentials);\n    if (!$validated) {\n        $this->throwFailedAuthenticationException($request);\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 67.36860602932752}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\t    try {\n        return User::where('email', $email)->firstOrFail();\n    } catch (\\Exception $e) {\n        $this->error('User not found');\n        return null;\n    }\n}", "CodeBleu_score": 35.40169119618587}, {"code": "<?\nprivate function user(): ?User{\n\t    try {\n        return $this->option('email')\n            ? User::where('email', $this->option('email'))->firstOrFail()\n            : null;\n    } catch (\\Exception $e) {\n        $this->error('User not found.');\n\n        return null;\n    }\n}", "CodeBleu_score": 34.895004391492726}, {"code": "<?\nprivate function user(): ?User{\n\t    try {\n        return User::where('email', $this->option('email'))->firstOrFail();\n    } catch (\\Exception $e) {\n        $this->error('User not found');\n    }\n\n    return null;\n}", "CodeBleu_score": 29.12740708715776}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\t    if (! config('scout.driver') || ! config('scout.flush')) {\n        return;\n    }\n\n    foreach (config('scout.indexes') as $index => $settings) {\n        $table = (new $index)->getTable();\n\n        $this->call('scout:flush', [\n            'index' => $table,\n        ]);\n    }\n\n    $this->info('Scout indexes flushed.');\n}", "CodeBleu_score": 63.34166098422811}, {"code": "<?\nprotected function scoutFlush(): void{\n\t    if (!$this->option('flush')) {\n        return;\n    }\n\n    if (!config('scout.driver') === 'meilisearch') {\n        return;\n    }\n\n    foreach (config('scout.meilisearch.settings') as $index => $settings) {\n        $table = (new $index)->getTable();\n        $this->artisan('scout:flush', [\n            'model' => $index,\n            'index' => $table,\n        ]);\n    }\n\n    $this->info('Indexes flushed');\n}", "CodeBleu_score": 65.65086810217348}, {"code": "<?\nprotected function scoutFlush(): void{\n\t    if (config('scout.driver') !== 'meilisearch' || ! config('scout.flush')) {\n        return;\n    }\n\n    foreach (config('scout.meilisearch.settings') as $index => $settings) {\n        $table = (new $index)->getTable();\n\n        $this->call('meilisearch:flush', [\n            'index' => $table,\n        ]);\n    }\n\n    $this->info('The Meilisearch indexes have been flushed.');\n}", "CodeBleu_score": 65.2981027070336}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    // Read the existing VCard from the resource, setting a UID if it is missing.\n    $vcard = $this->read($resource);\n\n    // If reading failed or the VCard doesn't exist, create a new VCard with basic information.\n    if ($vcard === null) {\n        $vcard = new VCard();\n        $vcard->addProperty(new VCardProperty('FN', $resource->getDisplayName()));\n    }\n\n    // Apply the exporters to add more details to the VCard.\n    foreach ($this->exporters as $exporter) {\n        $exporter->export($vcard, $resource);\n    }\n\n    return $vcard;\n}", "CodeBleu_score": 24.983553008880012}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    // Read the VCard from the resource, setting a UID if it is missing.\n    $vcard = Reader::read($resource->getSource(), Reader::VCARD40);\n\n    // If the VCard doesn't exist, create a new one with basic information.\n    if (empty($vcard)) {\n        $vcard = new VCard();\n        $vcard->addName('', '', '', '', $resource->getFullName());\n        $vcard->addEmail($resource->getEmail());\n        $vcard->addAddress($resource->getAddress());\n        $vcard->addPhoneNumber($resource->getPhoneNumber());\n    }\n\n    // Apply exporters to add more details to the VCard.\n    foreach ($this->exporters as $exporter) {\n        $exporter->export($vcard, $resource);\n    }\n\n    return $vcard;\n}", "CodeBleu_score": 32.325179037183695}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t\n    // Read existing VCard from resource\n    $vcard = $this->getSource()->read($resource);\n\n    // If no VCard exists, create a new one with basic information\n    if ($vcard === null) {\n        $vcard = new VCard();\n        $vcard->addProperty(new VCardProperty(VCardProperty::UID, $resource->getUid()));\n        $vcard->addProperty(new VCardProperty(VCardProperty::VERSION, '3.0'));\n        $vcard->addProperty(new VCardProperty(VCardProperty::PRODID, '-//Sabre//Sabre VObject ' . Version::VERSION . '//EN'));\n        $vcard->addProperty(new VCardProperty(VCardProperty::REV, date('Y-m-d')));\n        $vcard->addProperty(new VCardProperty(VCardProperty::N, $resource->getLastName() . ';' . $resource->getFirstName() . ';;;'));\n        $vcard->addProperty(new VCardProperty(VCardProperty::FN, $resource->getFirstName() . ' ' . $resource->getLastName()));\n        $vcard->addProperty(new VCardProperty(VCardProperty::ORG, $resource->getOrganization()));\n        $vcard->addProperty(new VCardProperty(VCardProperty::TITLE, $resource->getTitle()));\n        $vcard->addProperty(new VCardProperty(VCardProperty::EMAIL, $resource->getEmail()));\n    }\n\n    // Apply exporters to add more details to the VCard\n    foreach ($this->exporters as $exporter) {\n        $exporter->export($resource, $vcard);\n    }\n\n    return $vcard;\n}", "CodeBleu_score": 33.47547847691089}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $obj = $this->getObject($addressBookId, $cardUri);\n\n    if ($obj === null) {\n        return false;\n    }\n\n    if ($obj->object_type === 'contact') {\n        DestroyContact::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'contact_id' => $obj->id,\n        ])->onQueue('high');\n    }\n\n    if ($obj->object_type === 'group') {\n        DestroyGroup::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'group_id' => $obj->id,\n        ])->onQueue('high');\n    }\n\n    return true;\n}", "CodeBleu_score": 78.50460318130052}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $obj = $this->getObject($addressBookId, $cardUri);\n    if ($obj === false) {\n        return false;\n    }\n    if ($obj->object_type === 'contact') {\n        DestroyContact::dispatch([\n                'account_id' => $this->user->account_id,\n                'author_id' => $this->user->id,\n                'vault_id' => $obj->vault_id,\n                'contact_id' => $obj->id,\n            ])->onQueue\n    } elseif ($obj->object_type === 'group') {\n        DestroyGroup::dispatch([\n                'account_id' => $this->user->account_id,\n                'author_id' => $this->user->id,\n                'vault_id' => $obj->vault_id,\n                'group_id' => $obj->id,\n            ])->onQueue\n    } else {\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 74.053006537723}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $obj = $this->getObject($addressBookId, $cardUri);\n    if ($obj === false) {\n        return false;\n    }\n    if ($obj->object_type == 'contact') {\n        DestroyContact::dispatch([\n                'account_id' => $this->user->account_id,\n                'author_id' => $this->user->id,\n                'vault_id' => $obj->vault_id,\n                'contact_id' => $obj->id,\n            ])->onQueue('high');\n    } elseif ($obj->object_type == 'group') {\n        DestroyGroup::dispatch([\n                'account_id' => $this->user->account_id,\n                'author_id' => $this->user->id,\n                'vault_id' => $obj->vault_id,\n                'group_id' => $obj->id,\n            ])->onQueue('high');\n    } else {\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 77.16840067991657}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\t    if (!request()->hasFile('file')) {\n        return;\n    }\n\n    $this->activityRepository->create(array_merge($data, [\n        'user_id' => auth()->guard()->user()->id,\n        'type' => 'file',\n    ]));\n\n    $file = request()->file('file');\n    $path = request()->file('file')->store('files');\n\n    return $this->fileRepository->create([\n        'name' => $file->getClientOriginalName(),\n        'path' => $path,\n        'lead_activity_id' => $this->activityRepository->getModel()->id,\n    ]);\n}", "CodeBleu_score": 44.29100733545442}, {"code": "<?\npublic function upload(array $data){\n\t    if (!request()->hasFile('file')) {\n        return;\n    }\n\n    $this->activityRepository->create(array_merge($data, [\n        'user_id' => auth()->guard()->user()->id,\n        'type' => 'file',\n    ]));\n\n    return request()->file('file')->store(\n        'uploads/' . $data['lead_id'],\n        'public'\n    );\n}", "CodeBleu_score": 31.06095663761959}, {"code": "<?\npublic function upload(array $data){\n\t    if (!request()->hasFile('file')) {\n        return;\n    }\n\n    $activity = $this->activityRepository->create($data, auth()->guard()->user());\n\n    request()->file('file')->storeAs('public/files', $activity->id . '_' . request()->file('file')->getClientOriginalName());\n\n    return $this->fileRepository->create([\n        'name' => request()->file('file')->getClientOriginalName(),\n        'path' => 'storage/files/' . $activity->id . '_' . request()->file('file')->getClientOriginalName(),\n        'activity_id' => $activity->id,\n    ]);\n}", "CodeBleu_score": 46.99657513766765}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    if (request()->routeIs('admin.*')) {\n        return redirect()->route('admin.login');\n    }\n\n    if ($exception instanceof ModelNotFoundException) {\n        return response()->view('errors.404', [], 404);\n    }\n\n    if ($exception instanceof PDOException) {\n        return response()->view('errors.500', [], 500);\n    }\n\n    if ($exception instanceof ParseError) {\n        return response()->view('errors.500', [], 500);\n    }\n\n    if ($exception instanceof HttpException) {\n        return response()->view('errors.' . $exception->getStatusCode(), [], $exception->getStatusCode());\n    }\n}", "CodeBleu_score": 40.98474922785039}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    if ($this->request->routeIs('admin.*')) {\n        if ($exception instanceof ModelNotFoundException) {\n            return redirect()->route('admin.404');\n        }\n        if ($exception instanceof PDOException) {\n            return redirect()->route('admin.500');\n        }\n        if ($exception instanceof ParseError) {\n            return redirect()->route('admin.500');\n        }\n        if ($exception instanceof MethodNotAllowedHttpException) {\n            return redirect()->route('admin.404');\n        }\n        if ($exception instanceof NotFoundHttpException) {\n            return redirect()->route('admin.404');\n        }\n        if ($exception instanceof HttpException) {\n            return $this->response->setStatusCode($exception->getStatusCode());\n        }\n    }\n    if ($this->request->routeIs('front.*')) {\n        if ($exception instanceof ModelNotFoundException) {\n            return redirect()->route('front.404');\n        }\n        if ($exception instanceof PDOException) {\n            return redirect()->route('front.500');\n        }\n        if ($exception instanceof ParseError) {\n            return redirect()->route('front.500');\n        }\n        if ($exception instanceof MethodNotAllowedHttpException) {\n            return redirect()->route('front.404');\n        }\n        if ($exception instanceof NotFoundHttpException) {\n            return redirect()->route('front.404');\n        }\n        if ($exception instanceof HttpException) {\n            return $this->response->setStatusCode($exception->getStatusCode());\n        }\n    }\n}", "CodeBleu_score": 30.71758601468224}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    if (request()->routeIs('admin.*')) {\n        if ($exception instanceof ModelNotFoundException) {\n            return response()->view('errors.404', [], 404);\n        }\n        if ($exception instanceof PDOException) {\n            return response()->view('errors.500', [], 500);\n        }\n        if ($exception instanceof ParseError) {\n            return response()->view('errors.500', [], 500);\n        }\n    }\n\n    if (request()->routeIs('front.*')) {\n        if ($exception instanceof ModelNotFoundException) {\n            return redirect()->route('admin.login');\n        }\n        if ($exception instanceof PDOException) {\n            return redirect()->route('admin.login');\n        }\n        if ($exception instanceof ParseError) {\n            return redirect()->route('admin.login');\n        }\n    }\n\n    if ($exception instanceof HttpException) {\n        return response()->view('errors.' . $exception->getStatusCode(), [], $exception->getStatusCode());\n    }\n\n    if ($exception instanceof ModelNotFoundException) {\n        return response()->view('errors.404', [], 404);\n    }\n\n    if ($exception instanceof PDOException) {\n        return response()->view('errors.500', [], 500);\n    }\n\n    if ($exception instanceof ParseError) {\n        return response()->view('errors.500', [], 500);\n    }\n}", "CodeBleu_score": 33.13085444167603}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json(['message' => \"This action is unauthorized.\"], $statusCode);\n    }\n\n    return response()->view($path, [], $statusCode);\n}", "CodeBleu_score": 43.50320836654471}, {"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json(['message' => $this->errorMessage($statusCode)], $statusCode);\n    }\n    return response()->view($path, [], $statusCode);\n}", "CodeBleu_score": 44.500724696865475}, {"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json(['error' => 'Resource not found'], $statusCode);\n    }\n\n    return response()->view('errors.' . $statusCode, [], $statusCode);\n}", "CodeBleu_score": 52.24348709721194}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t    $activityIds = request()->get('activity_ids');\n    $isDone = request()->get('is_done');\n    $count = 0;\n\n    foreach ($activityIds as $activityId) {\n        $activity = $this->activityRepository->find($activityId);\n\n        if ($activity->is_done == $isDone) {\n            continue;\n        }\n\n        event(new ActivityEvent($activity, 'beforeUpdate'));\n\n        $activity->is_done = $isDone;\n        $activity->save();\n\n        event(new ActivityEvent($activity, 'afterUpdate'));\n\n        $count++;\n    }\n\n    if ($count > 0) {\n        return response()->json([\n            'success' => true,\n            'message' => 'Activities updated successfully',\n        ]);\n    } else {\n        return response()->json([\n            'success' => false,\n            'message' => 'No activities updated',\n        ]);\n    }\n}", "CodeBleu_score": 41.72181860346465}, {"code": "<?\npublic function massUpdate(){\n\t    $ids = request()->ids;\n    $is_done = request()->is_done;\n    $count = 0;\n    foreach ($ids as $id) {\n        $activity = $this->activityRepository->find($id);\n        if ($activity->is_done != $is_done) {\n            event(new ActivityEvent($activity));\n            $this->activityRepository->update($activity, ['is_done' => $is_done]);\n            $count++;\n        }\n    }\n    return response()->json([\n        'message' => $count ? 'Activities updated successfully' : 'No activities to update',\n        'count' => $count\n    ]);\n}", "CodeBleu_score": 39.10395576153505}, {"code": "<?\npublic function massUpdate(){\n\t    $ids = request()->get('ids');\n    $is_done = request()->get('is_done');\n    $count = 0;\n    foreach ($ids as $id) {\n        $activity = $this->activityRepository->find($id);\n        event(new ActivityEvent($activity));\n        $activity->is_done = $is_done;\n        $activity->save();\n        event(new ActivityEvent($activity));\n        $count++;\n    }\n    if ($count > 0) {\n        return response()->json([\n            'message' => 'Successfully updated activities',\n            'count' => $count\n        ]);\n    } else {\n        return response()->json([\n            'message' => 'No activities updated'\n        ]);\n    }\n}", "CodeBleu_score": 47.82199021475892}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t    $ids = request()->ids;\n    foreach ($ids as $id) {\n        $activity = $this->activityRepository->find($id);\n        event(new ActivityDeletedEvent($activity));\n        $this->activityRepository->delete($id);\n        event(new ActivityDeletedEvent($activity));\n    }\n\n    return response()->json([\n        'success' => true,\n    ]);\n}", "CodeBleu_score": 26.761274649033655}, {"code": "<?\n public function massDestroy(){\n\t    // Retrieve the activity IDs from the request\n    $ids = $this->request->input('ids', []);\n\n    // Iterate over the activity IDs\n    foreach ($ids as $id) {\n        // Dispatch an event before deleting the activity\n        event(new ActivityDestroying($id));\n\n        // Delete the activity\n        $this->activityRepository->delete($id);\n\n        // Dispatch an event after deleting the activity\n        event(new ActivityDestroyed($id));\n    }\n\n    // Return a JSON response indicating a successful destruction\n    return response()->json([\n        'success' => true,\n        'message' => trans('back::activities.messages.destroyed')\n    ]);\n}", "CodeBleu_score": 31.806917420898174}, {"code": "<?\n public function massDestroy(){\n\t    request()->validate([\n        'ids'   => 'required|array',\n        'ids.*' => 'exists:activities,id',\n    ]);\n\n    foreach (request('ids') as $id) {\n        event(new ActivityDestroy($id));\n\n        $this->activityRepository->delete($id);\n    }\n\n    return response()->json([\n        'message' => trans('global.multi_delete_success'),\n    ]);\n}", "CodeBleu_score": 35.87809659118301}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t    $cards = $this->dashboardHelper->getCards();\n    $request = request()->all();\n    foreach ($request as $key => $value) {\n        if (isset($cards[$key])) {\n            $cards[$key]['selected'] = $value;\n        }\n    }\n    return response()->json($cards);\n}", "CodeBleu_score": 39.67741773417066}, {"code": "<?\n public function updateCards(){\n\t    $cards = $this->dashboardHelper->getCards();\n\n    foreach (request()->all() as $key => $card) {\n        if (isset($cards[$key])) {\n            $cards[$key]->selected = $card['selected'];\n        }\n    }\n\n    return response()->json($cards);\n}", "CodeBleu_score": 36.701548186821476}, {"code": "<?\n public function updateCards(){\n\t    $cards = $this->dashboardHelper->getCards();\n    foreach (request()->all() as $card) {\n        $cards[$card['id']]['selected'] = $card['selected'];\n    }\n    return response()->json($cards);\n}", "CodeBleu_score": 30.571308927771135}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t    $this->dispatch(new CreatingConfiguration());\n    $configuration = $this->configurationRepository->create(request()->all());\n    $this->dispatch(new CreatedConfiguration($configuration));\n    session()->flash('success', trans('configuration.created'));\n    return redirect()->back();\n}", "CodeBleu_score": 41.25712254609324}, {"code": "<?\npublic function store(){\n\t    $this->dispatch(new BeforeConfigurationCreated());\n    $this->configurationRepository->create(request()->all());\n    $this->dispatch(new AfterConfigurationCreated());\n    session()->flash('success', trans('admin.configurations.messages.created'));\n    return redirect()->back();\n}", "CodeBleu_score": 43.04364596571156}, {"code": "<?\npublic function store(){\n\t    $this->dispatch(new ConfigurationCreating());\n    $this->configurationRepository->create(request()->all());\n    $this->dispatch(new ConfigurationCreated());\n    session()->flash('success', trans('configuration.messages.created'));\n    return redirect()->back();\n}", "CodeBleu_score": 42.28499350084566}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t    $file_path = request()->route()->parameters['file_path'];\n    $file_name = basename($file_path);\n    $configuration = $this->configurationRepository->findOneByField('file_name', $file_name);\n    return Storage::download($configuration->file_path, $file_name);\n}", "CodeBleu_score": 52.38855327139811}, {"code": "<?\npublic function download(){\n\t    $file = request()->route('file');\n    $file_name = 'configurations/'.$file;\n    $configuration = $this->configurationRepository->findOneByField('file', $file_name);\n    return Storage::download($configuration->file);\n}", "CodeBleu_score": 52.017337252658955}, {"code": "<?\npublic function download(){\n\t    $file_path = request()->route()->parameters['file_path'];\n    $file_name = basename($file_path);\n    $configuration = $this->configurationRepository->findOneByField('file_path', $file_path);\n    return Storage::download($file_name, $configuration->value);\n}", "CodeBleu_score": 50.59354557646939}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    List<AdminModelSort> adminModelSorts = new ArrayList<>();\n    for (String model : list) {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setSort(list.indexOf(model));\n        adminModelSort.setType(model);\n        adminModelSort.setUserId(getUserId());\n        adminModelSorts.add(adminModelSort);\n    }\n    List<AdminModelSort> existing = adminModelSortRepository.findByUserId(getUserId());\n    adminModelSortRepository.deleteAll(existing);\n    adminModelSortRepository.saveAll(adminModelSorts);\n    return ok();\n}", "CodeBleu_score": 43.199552574709884}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    List<AdminModelSort> adminModelSorts = new ArrayList<>();\n    for (String model : list) {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setUserId(getUserId());\n        adminModelSort.setModel(model);\n        adminModelSort.setSort(0);\n        adminModelSort.setType(0);\n        adminModelSort.setIsHidden(0);\n        adminModelSorts.add(adminModelSort);\n    }\n    List<AdminModelSort> adminModelSorts1 = adminModelSortDao.findAllByUserId(getUserId());\n    adminModelSortDao.deleteAll(adminModelSorts1);\n    adminModelSortDao.saveAll(adminModelSorts);\n    return ok();\n}", "CodeBleu_score": 44.3444855143664}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    List<AdminModelSort> sortList = new ArrayList<>();\n    for (String model : list) {\n        AdminModelSort sort = new AdminModelSort();\n        sort.setSort(list.indexOf(model));\n        sort.setType(model);\n        sort.setUserId(getUserId());\n        sort.setIsHidden(false);\n        sortList.add(sort);\n    }\n    adminModelSortRepository.deleteByUserId(getUserId());\n    adminModelSortRepository.saveAll(sortList);\n    return ok();\n}", "CodeBleu_score": 37.65541023581694}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    AdminConfiguration adminConfiguration = adminConfigurationRepository.findById(moduleSetting.getSettingId());\n    if (adminConfiguration.getModule().equalsIgnoreCase(CRM)) {\n        return error(\"CRM module can not be updated\");\n    }\n    adminConfiguration.setStatus(moduleSetting.getStatus());\n    adminConfigurationRepository.save(adminConfiguration);\n    return ok(\"Successfully updated\");\n}", "CodeBleu_score": 52.900841737067594}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    if (moduleSetting.getSettingId() == null) {\n        return new ResponseEntity<>(new ErrorResponse(ErrorCode.INVALID_REQUEST, \"Setting ID is required\"), HttpStatus.BAD_REQUEST);\n    }\n    ModuleSetting moduleSettingEntity = moduleSettingRepository.findById(moduleSetting.getSettingId()).orElse(null);\n    if (moduleSettingEntity == null) {\n        return new ResponseEntity<>(new ErrorResponse(ErrorCode.INVALID_REQUEST, \"Invalid setting ID\"), HttpStatus.BAD_REQUEST);\n    }\n    if (moduleSettingEntity.getModule().getName().equalsIgnoreCase(ModuleEnum.CRM.getName())) {\n        return new ResponseEntity<>(new ErrorResponse(ErrorCode.INVALID_REQUEST, \"CRM module cannot be disabled\"), HttpStatus.BAD_REQUEST);\n    }\n    moduleSettingEntity.setStatus(moduleSetting.getStatus());\n    moduleSettingRepository.save(moduleSettingEntity);\n    return new ResponseEntity<>(new SuccessResponse(moduleSettingEntity), HttpStatus.OK);\n}", "CodeBleu_score": 45.71474045090166}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    if (moduleSetting.getModuleId().equals(ModuleId.CRM)) {\n        return error(\"Module is CRM\");\n    }\n    AdminConfigurationBO adminConfiguration = adminConfigurationService.getById(moduleSetting.getSettingId());\n    adminConfiguration.setStatus(moduleSetting.getStatus());\n    adminConfigurationService.save(adminConfiguration);\n    return ok();\n}", "CodeBleu_score": 55.64579146243032}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t    UserConfig userConfig = userConfigService.getUserConfigByName(customKey);\n    if (userConfig != null) {\n        userConfig.setValue(json.toJSONString());\n        userConfigService.updateById(userConfig);\n    } else {\n        userConfig = new UserConfig();\n        userConfig.setName(customKey);\n        userConfig.setValue(json.toJSONString());\n        userConfigService.save(userConfig);\n    }\n    return ok();\n}", "CodeBleu_score": 64.83060651331743}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t        try {\n            UserConfig userConfig = userConfigService.queryUserConfigByName(customKey);\n            if (userConfig != null) {\n                userConfig.setValue(json.toJSONString());\n                userConfigService.updateById(userConfig);\n            } else {\n                userConfig = new UserConfig();\n                userConfig.setName(customKey);\n                userConfig.setValue(json.toJSONString());\n                userConfigService.save(userConfig);\n            }\n            return Result.ok();\n        } catch (Exception e) {\n            log.error(\"queryCustomSetting error:\", e);\n            return Result.error();\n        }\n    }", "CodeBleu_score": 65.837532813958}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t        try {\n            UserConfig userConfig = userConfigService.queryUserConfigByName(customKey);\n            if (userConfig != null) {\n                userConfig.setValue(json.toJSONString());\n                userConfigService.updateById(userConfig);\n            } else {\n                userConfig = new UserConfig();\n                userConfig.setName(customKey);\n                userConfig.setValue(json.toJSONString());\n                userConfig.setUserId(getUserId());\n                userConfig.setStatus(1);\n                userConfigService.save(userConfig);\n            }\n            return Result.ok();\n        } catch (Exception e) {\n            log.error(\"queryCustomSetting error:\", e);\n            return Result.error();\n        }\n    }", "CodeBleu_score": 68.93159033184016}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    // Retrieve user details\n    AdminUser user = userService.getById(userId);\n\n    // Retrieve department name based on user's department ID\n    String deptName = userService.getDeptName(user.getDeptId());\n\n    // Set department name in user object\n    user.setDeptName(deptName);\n\n    // Nullify salt and password fields\n    user.setSalt(null);\n    user.setPassword(null);\n\n    // Return user information wrapped in a result object\n    return Result.success(user);\n}", "CodeBleu_score": 49.93985770736324}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    // Retrieve user details\n    AdminUser user = adminUserMapper.selectById(userId);\n\n    // Retrieve department name based on user's department ID\n    String deptName = adminDeptMapper.getDeptNameByDeptId(user.getDeptId());\n\n    // Set department name in user object\n    user.setDeptName(deptName);\n\n    // Nullify salt and password fields\n    user.setSalt(null);\n    user.setPassword(null);\n\n    // Wrap user information in result object\n    Result<AdminUser> result = new Result<>();\n    result.setData(user);\n    result.setSuccess(true);\n\n    return result;\n}", "CodeBleu_score": 53.09669450522902}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser user = userService.getById(userId);\n    if (user == null) {\n        return Result.fail(\"\u7528\u6237\u4e0d\u5b58\u5728\");\n    }\n    String deptName = userService.getDeptName(user.getDeptId());\n    user.setDeptName(deptName);\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.success(user);\n}", "CodeBleu_score": 50.5910377207129}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t    Long userId = getUserId();\n    List<ReadNotice> readNotices = ReadNotice.find.query().where().eq(\"userId\", userId).findList();\n    if (readNotices.size() > 1) {\n        for (ReadNotice readNotice : readNotices) {\n            readNotice.setStatus(1);\n            readNotice.update();\n        }\n    } else {\n        ReadNotice readNotice = new ReadNotice();\n        readNotice.setUserId(userId);\n        readNotice.setStatus(1);\n        readNotice.save();\n    }\n    return ok();\n}", "CodeBleu_score": 32.04990764077388}, {"code": " public Result readNotice() {\n\t    Long userId = session().get(\"userId\");\n    List<ReadNotice> readNoticeList = ReadNotice.find.query().where().eq(\"userId\", userId).findList();\n    if (readNoticeList.size() > 1) {\n      for (ReadNotice readNotice : readNoticeList) {\n        readNotice.setStatus(1);\n        readNotice.update();\n      }\n    } else {\n      ReadNotice readNotice = new ReadNotice();\n      readNotice.setUserId(userId);\n      readNotice.setStatus(1);\n      readNotice.save();\n    }\n    return ok();\n  }", "CodeBleu_score": 33.02560912227176}, {"code": " public Result readNotice() {\n\t    String userId = session().get(\"userId\");\n    List<ReadNotice> readNoticeList = ReadNotice.find.query().where().eq(\"userId\", userId).findList();\n    if (readNoticeList.size() > 0) {\n        for (ReadNotice readNotice : readNoticeList) {\n            readNotice.setStatus(1);\n            readNotice.update();\n        }\n    } else {\n        ReadNotice readNotice = new ReadNotice();\n        readNotice.setUserId(userId);\n        readNotice.setStatus(1);\n        readNotice.save();\n    }\n    return ok(\"Success\");\n}", "CodeBleu_score": 33.135888410115896}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    LambdaQueryWrapper<AdminConfig> queryWrapper = new LambdaQueryWrapper<>();\n    queryWrapper.eq(AdminConfig::getName, \"companyInfo\");\n    AdminConfig adminConfig = adminConfigService.getOne(queryWrapper);\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(\"companyInfo\");\n        adminConfig.setDescription(\"Company information\");\n        adminConfig.setStatus(1);\n    }\n    adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n    adminConfigService.saveOrUpdate(adminConfig);\n}", "CodeBleu_score": 53.19813745396982}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    LambdaQueryWrapper<AdminConfig> queryWrapper = new LambdaQueryWrapper<>();\n    queryWrapper.eq(AdminConfig::getName, \"companyInfo\");\n    AdminConfig adminConfig = adminConfigService.getOne(queryWrapper);\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(\"companyInfo\");\n        adminConfig.setDescription(\"Company information configuration\");\n        adminConfig.setStatus(1);\n        adminConfig.setValue(adminCompanyBO.toJSONString());\n        adminConfigService.saveOrUpdate(adminConfig);\n    } else {\n        adminConfig.setValue(adminCompanyBO.toJSONString());\n        adminConfigService.saveOrUpdate(adminConfig);\n    }\n}", "CodeBleu_score": 47.635727014010136}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    LambdaQueryWrapper<Config> queryWrapper = new LambdaQueryWrapper<>();\n    queryWrapper.eq(Config::getName, \"companyInfo\");\n    Config config = configMapper.selectOne(queryWrapper);\n    if (config == null) {\n        config = new Config();\n        config.setName(\"companyInfo\");\n        config.setDescription(\"\u516c\u53f8\u4fe1\u606f\");\n        config.setStatus(0);\n        config.setValue(\"{\\\"name\\\":\\\"\\\",\\\"address\\\":\\\"\\\",\\\"phone\\\":\\\"\\\",\\\"email\\\":\\\"\\\",\\\"logo\\\":\\\"\\\"}\");\n        configMapper.insert(config);\n    }\n    config.setValue(JSON.toJSONString(adminCompanyBO));\n    configMapper.updateById(config);\n}", "CodeBleu_score": 41.23867059510678}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\t    // Retrieve the admin configuration for the company\n    AdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n    adminCompanyBO.setCompanyId(companyId);\n    adminCompanyBO.setKey(key);\n    AdminCompany adminCompany = adminCompanyBO.selectOne(new LambdaQueryWrapper<AdminCompany>().eq(AdminCompany::getCompanyId, companyId).eq(AdminCompany::getKey, key));\n\n    // If a configuration is found, parse the value into an AdminCompanyBO object\n    if (adminCompany != null) {\n        adminCompanyBO = JSONUtil.toBean(adminCompany.getValue(), AdminCompanyBO.class);\n    }\n\n    return adminCompanyBO;\n}", "CodeBleu_score": 59.652273364454025}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t    // Retrieve the admin configuration for the company using the key \"admin_company\"\n    String adminConfig = last(\"admin_company\");\n\n    // If the configuration is found, parse the value into an AdminCompanyBO object\n    if (adminConfig != null) {\n        AdminCompanyBO adminCompanyBO = parseObject(adminConfig, AdminCompanyBO.class);\n        return adminCompanyBO;\n    }\n\n    // If no configuration is found, return a new instance of AdminCompanyBO\n    return new AdminCompanyBO();\n}", "CodeBleu_score": 36.77844583505168}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t    String key = AdminCompanyBO.KEY_ADMIN_CONFIG;\n    String value = getValue(key);\n    if (value != null) {\n        return parseObject(value);\n    }\n    return new AdminCompanyBO();\n}", "CodeBleu_score": 17.97032045675223}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t    AdminConfig[] logConfigs = AdminConfig.list(AdminConfig.LOG_CONFIGURATION).toArray();\n    for (AdminConfig logConfig : logConfigs) {\n        if (logConfig.get(\"name\").equals(logConfigName)) {\n            AdminConfig.remove(logConfig);\n        }\n    }\n    for (String string : stringList) {\n        AdminConfig adminConfig = AdminConfig.create(AdminConfig.LOG_CONFIGURATION, logConfigName);\n        adminConfig.set(\"name\", logConfigName);\n        adminConfig.set(\"value\", string);\n        AdminConfig.save();\n    }\n}", "CodeBleu_score": 38.97697916962678}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t    List<AdminConfig> logList = new ArrayList<AdminConfig>();\n    for (String str : stringList) {\n        AdminConfig logConfig = AdminConfig.create(\"IIOWelcomeSpeech\", \"IIOWelcomeSpeech\");\n        logConfig.setName(str);\n        logConfig.setStatus(\"enabled\");\n        logList.add(logConfig);\n    }\n    AdminConfig[] existingLogs = AdminConfig.list(\"IIOWelcomeSpeech\").toArray(new AdminConfig[0]);\n    for (AdminConfig existingLog : existingLogs) {\n        if (existingLog.getName().equals(\"IIOWelcomeSpeech\")) {\n            existingLog.remove();\n        }\n    }\n    AdminConfig.saveBatch(logList.toArray(new AdminConfig[0]));\n}", "CodeBleu_score": 35.045632236020786}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t    AdminConfig[] adminConfigList = new AdminConfig[stringList.size()];\n    for (int i = 0; i < stringList.size(); i++) {\n        AdminConfig adminConfig = AdminConfig.create(AdminConfig.LOG_CONFIGURATION_TYPE, stringList.get(i));\n        adminConfig.setName(stringList.get(i));\n        adminConfig.setStatus(\"Enabled\");\n        adminConfig.setValue(\"WelcomeSpeech\", stringList.get(i));\n        adminConfigList[i] = adminConfig;\n    }\n    AdminConfig[] existingConfigs = AdminConfig.list(AdminConfig.LOG_CONFIGURATION_TYPE, \"*\").toArray();\n    for (AdminConfig adminConfig : existingConfigs) {\n        if (adminConfig.getName().equals(stringList.get(0))) {\n            AdminConfig.remove(adminConfig);\n        }\n    }\n    AdminConfig.saveBatch(adminConfigList);\n}", "CodeBleu_score": 31.174549456594868}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    // Get the current user ID\n    Long userId = getUserId();\n    // Get the user details\n    User user = getById(userId);\n    // Get the username\n    String username = getUsername();\n    // Get the stored password\n    String password = user.getPassword();\n    // Get the salt\n    String salt = user.getSalt();\n    // Check if the provided password matches the stored password\n    if (!password.equals(getPassword(adminInitDataBO.getPassword(), salt))) {\n        // Throw an exception if the password is incorrect\n        throw new BusinessException(\"\u5bc6\u7801\u9519\u8bef\");\n    }\n    // Generate a temporary access code\n    String code = UUID.randomUUID().toString().replace(\"-\", \"\");\n    // Store the access code in Redis with a 10-minute expiration\n    getRedis().setex(code, 10 * 60, userId.toString());\n    // Return the access code\n    return code;\n}", "CodeBleu_score": 35.9122565581489}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    // Get the current user ID\n    String userId = getUserId();\n\n    // Get the user details\n    AdminUserBO adminUserBO = getById(userId);\n    String username = adminUserBO.getUsername();\n\n    // Check the provided password against the stored password using the username and salt\n    String salt = adminUserBO.getSalt();\n    String password = adminUserBO.getPassword();\n    String verifyPassword = verify(adminInitDataBO.getPassword(), username, salt);\n    if (!password.equals(verifyPassword)) {\n        throw new IllegalArgumentException(\"invalid password\");\n    }\n\n    // Generate a temporary access code\n    String code = UUID.randomUUID().toString();\n\n    // Store the code in Redis with a 10-minute expiration\n    setex(code, 600, userId);\n\n    return code;\n}", "CodeBleu_score": 37.829407545170845}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    // Retrieve the current user ID\n    Long userId = getUserId();\n\n    // Retrieve the current user details\n    User user = getById(userId);\n\n    // Retrieve the username\n    String username = getUsername();\n\n    // Retrieve the stored password and salt\n    String storedPassword = user.getPassword();\n    String salt = user.getSalt();\n\n    // Check the provided password against the stored password using the username and salt\n    String password = getPassword(adminInitDataBO.getPassword(), salt);\n    if (!password.equals(storedPassword)) {\n        throw new InvalidPasswordException(\"Invalid password\");\n    }\n\n    // Generate a temporary access code\n    String code = generateAccessCode();\n\n    // Store the code in Redis with a 10-minute expiration\n    setex(code, 600);\n\n    // Return the code\n    return code;\n}", "CodeBleu_score": 34.38264370662654}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\t    String userId = getUserId();\n    String key = String.format(\"unauth_%s\", userId);\n    Set<String> unauthUrlSet = getRedis().smembers(key);\n    return unauthUrlSet.contains(getUrl());\n}", "CodeBleu_score": 31.365821636334623}, {"code": "private boolean verifyInitAuth(){\n\t    String userId = getUserId();\n    String key = \"unauth:\" + userId;\n    return getRedis().contains(key, getInitAuthUrl());\n}", "CodeBleu_score": 13.110854079845389}, {"code": "private boolean verifyInitAuth(){\n\t    String userId = getUserId();\n    if (userId == null) {\n        return true;\n    }\n    String key = \"unauthorized_menu_urls_\" + userId;\n    if (getRedis().contains(key)) {\n        String[] urls = getRedis().get(key).split(\",\");\n        for (String url : urls) {\n            if (url.equals(getInitAuthUrl())) {\n                return true;\n            }\n        }\n    }\n    return false;\n}", "CodeBleu_score": 33.30631476553537}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    List<AdminRoleMenu> list = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        list.add(roleMenu);\n    }\n    this.saveBatch(list);\n}", "CodeBleu_score": 55.40758322192969}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    List<AdminRoleMenu> roleMenuList = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    }\n    saveBatch(roleMenuList);\n}", "CodeBleu_score": 57.29664465964214}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    List<AdminRoleMenu> list = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        list.add(roleMenu);\n    }\n    this.saveBatch(list);\n}", "CodeBleu_score": 55.40758322192969}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\t    // Get the log index\n    String index = getSysLogIndex()\n\n    // Convert the log object to a map\n    Map<String, Object> map = beanToMap(sysLog)\n\n    // Format the creation time\n    map.put(\"createTime\", formatDateTime(sysLog.getCreateTime()))\n\n    // Remove the ID\n    map.remove(\"id\")\n\n    // Create an index request\n    IndexRequest request = new IndexRequest(index)\n        .id(sysLog.getId().toString())\n        .source(map)\n\n    // Submit the request to the Elasticsearch client\n    try {\n        elasticsearchClient.index(request, RequestOptions.DEFAULT)\n    } catch (Exception e) {\n        // Log the error message\n        error(e.getMessage())\n    }\n}", "CodeBleu_score": 45.32055086710927}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t    String index = getSysLogIndex();\n    Map<String, Object> map = beanToMap(sysLog);\n    map.put(\"createTime\", formatDateTime(sysLog.getCreateTime()));\n    map.remove(\"id\");\n    IndexRequest request = new IndexRequest(index).source(map);\n    try {\n        client.index(request, RequestOptions.DEFAULT);\n    } catch (IOException e) {\n        log.error(getMessage(error, \"saveSysLog\"), e);\n    }\n}", "CodeBleu_score": 42.058623972647226}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t    // Retrieve the log index from the configuration file\n    String sysLogIndex = config.getProperty(\"sysLogIndex\");\n\n    // Convert the log object to a map\n    Map<String, Object> logMap = beanToMap(sysLog);\n\n    // Format the creation time\n    String createTime = formatDateTime(logMap.get(\"createTime\"));\n\n    // Remove the ID from the map\n    logMap.remove(\"id\");\n\n    // Create an index request\n    IndexRequest indexRequest = new IndexRequest(sysLogIndex)\n            .source(logMap)\n            .id(createTime);\n\n    // Submit the index request to the Elasticsearch client\n    try {\n        client.index(indexRequest, RequestOptions.DEFAULT);\n    } catch (IOException e) {\n        log.error(\"Error saving log: {}\", e.getMessage());\n    }\n}", "CodeBleu_score": 49.7894497523961}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t    SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n    BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n    if (StringUtils.isNotBlank(querySysLogBO.getAppName())) {\n        boolQueryBuilder.must(QueryBuilders.termQuery(\"appName\", querySysLogBO.getAppName()));\n    }\n    if (StringUtils.isNotBlank(querySysLogBO.getLevel())) {\n        boolQueryBuilder.must(QueryBuilders.termQuery(\"level\", querySysLogBO.getLevel()));\n    }\n    if (StringUtils.isNotBlank(querySysLogBO.getContent())) {\n        boolQueryBuilder.must(QueryBuilders.matchQuery(\"content\", querySysLogBO.getContent()));\n    }\n    if (StringUtils.isNotBlank(querySysLogBO.getCreateTimeStart())) {\n        boolQueryBuilder.must(QueryBuilders.rangeQuery(\"createTime\").gte(querySysLogBO.getCreateTimeStart()));\n    }\n    if (StringUtils.isNotBlank(querySysLogBO.getCreateTimeEnd())) {\n        boolQueryBuilder.must(QueryBuilders.rangeQuery(\"createTime\").lte(querySysLogBO.getCreateTimeEnd()));\n    }\n    if (StringUtils.isNotBlank(querySysLogBO.getOperator())) {\n        boolQueryBuilder.must(QueryBuilders.termQuery(\"operator\", querySysLogBO.getOperator()));\n    }\n    searchSourceBuilder.query(boolQueryBuilder);\n    searchSourceBuilder.sort(SortBuilders.fieldSort(\"createTime\").order(SortOrder.DESC));\n    searchSourceBuilder.fetchSource(new String[]{\"id\", \"appName\", \"level\", \"content\", \"createTime\", \"operator\"}, null);\n    searchSourceBuilder.from((querySysLogBO.getPageNum() - 1) * querySysLogBO.getPageSize());\n    searchSourceBuilder.size(querySysLogBO.getPageSize());\n    SearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n    searchRequest.source(searchSourceBuilder);\n    try {\n       ", "CodeBleu_score": 32.43409242551157}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t    SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();\n    // \u521d\u59cb\u5316\u67e5\u8be2\u6761\u4ef6\n    BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n    // \u8bbe\u7f6e\u67e5\u8be2\u6761\u4ef6\n    if (querySysLogBO.getQueryString() != null) {\n        boolQueryBuilder.must(QueryBuilders.queryStringQuery(querySysLogBO.getQueryString()));\n    }\n    if (querySysLogBO.getStartTime() != null) {\n        boolQueryBuilder.must(QueryBuilders.rangeQuery(\"createTime\").gte(querySysLogBO.getStartTime()));\n    }\n    if (querySysLogBO.getEndTime() != null) {\n        boolQueryBuilder.must(QueryBuilders.rangeQuery(\"createTime\").lte(querySysLogBO.getEndTime()));\n    }\n    if (querySysLogBO.getLogType() != null) {\n        boolQueryBuilder.must(QueryBuilders.termQuery(\"logType\", querySysLogBO.getLogType()));\n    }\n    if (querySysLogBO.getLogLevel() != null) {\n        boolQueryBuilder.must(QueryBuilders.termQuery(\"logLevel\", querySysLogBO.getLogLevel()));\n    }\n    if (querySysLogBO.getLogName() != null) {\n        boolQueryBuilder.must(QueryBuilders.termQuery(\"logName\", querySysLogBO.getLogName()));\n    }\n    if (querySysLogBO.getLogContent() != null) {\n        boolQueryBuilder.must(QueryBuilders.termQuery(\"logContent\", querySysLogBO.getLogContent()));\n    }\n    if (querySysLogBO.getLogIp() != null) {\n        boolQueryBuilder.must(QueryBuilders.termQuery(\"logIp\", querySysLogBO.getLogIp()));\n    }\n    if (querySysLogBO.getLogMethod() != null) {\n        boolQueryBuilder.must(QueryBuilders.termQuery(\"logMethod\", querySysLogBO.getLogMethod()));\n    }\n    if (querySysLog", "CodeBleu_score": 23.155583223974357}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t    SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n    searchSourceBuilder.query(QueryBuilders.boolQuery().must(QueryBuilders.matchQuery(\"name\", querySysLogBO.getName())));\n    searchSourceBuilder.sort(SortBuilders.fieldSort(\"createTime\").order(SortOrder.DESC));\n    searchSourceBuilder.fetchSource(new String[]{\"id\", \"name\", \"createTime\"}, new String[]{});\n    searchSourceBuilder.size(querySysLogBO.getSize());\n    searchSourceBuilder.from(querySysLogBO.getCurrent());\n    SearchRequest searchRequest = new SearchRequest(Constant.ES_INDEX_SYS_LOG);\n    searchRequest.source(searchSourceBuilder);\n    try {\n        SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n        List<SysLog> sysLogList = new ArrayList<>();\n        for (SearchHit hit : searchResponse.getHits()) {\n            sysLogList.add(JSON.parseObject(hit.getSourceAsString(), SysLog.class));\n        }\n        BasePage<SysLog> sysLogPage = new BasePage<>();\n        sysLogPage.setCurrent(querySysLogBO.getCurrent());\n        sysLogPage.setSize(querySysLogBO.getSize());\n        sysLogPage.setTotal(searchResponse.getHits().getTotalHits().value);\n        sysLogPage.setRecords(sysLogList);\n        return sysLogPage;\n    } catch (IOException e) {\n        log.error(\"querySysLogPageList error\", e);\n    }\n    return null;\n}", "CodeBleu_score": 50.12378281836744}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\t  return new Promise((resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n    https\n      .get(url, function (response) {\n        response.pipe(file);\n        file.on(\"finish\", function () {\n          file.close(() => {\n            resolve();\n          });\n        });\n      })\n      .on(\"error\", function (err) {\n        fs.unlink(dest);\n        reject(err);\n      });\n  });\n}", "CodeBleu_score": 91.42567922804416}, {"code": "async function downloadFile(url, dest){\n\t  return new Promise((resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n    https\n      .get(url, function (response) {\n        response.pipe(file);\n        file.on(\"finish\", function () {\n          file.close(() => {\n            resolve();\n          });\n        });\n      })\n      .on(\"error\", (err) => {\n        fs.unlink(dest);\n        reject(err);\n      });\n  });\n}", "CodeBleu_score": 86.43163958912206}, {"code": "async function downloadFile(url, dest){\n\t  return new Promise((resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n    https\n      .get(url, function (response) {\n        response.pipe(file);\n        file.on(\"finish\", function () {\n          file.close(() => {\n            resolve();\n          });\n        });\n      })\n      .on(\"error\", (err) => {\n        // Delete the file if it exists and reject the promise\n        fs.unlink(dest, () => reject(err));\n      });\n  });\n}", "CodeBleu_score": 81.74034717427274}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t    return module.getLiveModules()\n            .flatMapMany(m -> getLiveModules(m.getId()))\n            .filter(m -> !circularDependencyCheckSet.contains(m.getId()))\n            .doOnNext(m -> circularDependencyCheckSet.add(m.getId()))\n            .onErrorContinue((t, o) -> warn(getMessage(t, \"Failed to retrieve dependent modules for module {}\", module.getId()), o))\n            .collectList()\n            .flatMapMany(modules -> fromIterable(modules))\n            .flatMap(m -> getDependentModules(m, circularDependencyCheckSet))\n            .collectList()\n            .flatMapMany(modules -> fromIterable(modules))\n            .filter(m -> !m.equals(module))\n            .collectList();\n}", "CodeBleu_score": 51.17632577922699}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t    return module.getLiveModules()\n        .flatMapMany(liveModule -> {\n            if (circularDependencyCheckSet.contains(liveModule.getId())) {\n                return Flux.empty();\n            }\n            circularDependencyCheckSet.add(liveModule.getId());\n            return getLiveModules(liveModule.getId())\n                .doOnNext(liveModule -> circularDependencyCheckSet.remove(liveModule.getId()))\n                .onErrorContinue((throwable, liveModule) -> {\n                    warn(\"Error while retrieving dependent modules for module: \" + liveModule.getId(), throwable);\n                });\n        });\n}", "CodeBleu_score": 47.87331098073866}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t    return module.getLiveModules().flatMapMany(liveModule -> {\n        if (circularDependencyCheckSet.contains(liveModule.getId())) {\n            log.warn(\"Circular dependency detected for module: {}\", module.getId());\n            return Flux.empty();\n        }\n        circularDependencyCheckSet.add(liveModule.getId());\n        return getLiveModules(liveModule.getId()).flatMap(dependentModule -> {\n            if (dependentModule.getId().equals(module.getId())) {\n                log.warn(\"Circular dependency detected for module: {}\", module.getId());\n                return Flux.empty();\n            }\n            return getDependentModules(dependentModule, circularDependencyCheckSet);\n        });\n    }).doOnNext(dependentModule -> circularDependencyCheckSet.remove(dependentModule.getId())).onErrorContinue(this::warn);\n}", "CodeBleu_score": 46.78586454330025}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        if (entry.getKey() instanceof String && entry.getValue() instanceof String) {\n            String key = (String) entry.getKey();\n            String value = (String) entry.getValue();\n            if (key.equalsIgnoreCase(\"componentType\") && value.equalsIgnoreCase(\"module\")) {\n                String appId = (String) map.get(\"appId\");\n                if (isNotBlank(appId)) {\n                    dependentModuleIds.add(appId);\n                }\n            }\n        } else if (entry.getValue() instanceof Map) {\n            doGetDependentModules((Map<?, ?>) entry.getValue(), dependentModuleIds);\n        } else if (entry.getValue() instanceof List) {\n            for (Object item : (List<?>) entry.getValue()) {\n                if (item instanceof Map) {\n                    doGetDependentModules((Map<?, ?>) item, dependentModuleIds);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 45.294136583364185}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    if (map instanceof Map) {\n        for (Map.Entry<?, ?> entry : ((Map<?, ?>) map).entrySet()) {\n            if (entry.getKey() instanceof String) {\n                String key = (String) entry.getKey();\n                if (\"componentType\".equals(key)) {\n                    if (\"module\".equals(entry.getValue())) {\n                        if (map.containsKey(\"appId\")) {\n                            String appId = map.get(\"appId\");\n                            if (appId != null && !appId.isBlank()) {\n                                dependentModuleIds.add(appId);\n                            }\n                        }\n                    }\n                } else if (\"children\".equals(key)) {\n                    if (entry.getValue() instanceof List) {\n                        for (Object child : (List<?>) entry.getValue()) {\n                            if (child instanceof Map) {\n                                doGetDependentModules((Map<?, ?>) child, dependentModuleIds);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 41.275060695611366}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    if (map.get(\"type\").equals(\"module\")) {\n        String appId = (String) map.get(\"appId\");\n        if (appId != null && appId.isNotBlank()) {\n            dependentModuleIds.add(appId);\n        }\n    }\n\n    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        Object value = entry.getValue();\n        if (value instanceof Map) {\n            doGetDependentModules((Map<?, ?>) value, dependentModuleIds);\n        } else if (value instanceof List) {\n            for (Object item : (List<?>) value) {\n                if (item instanceof Map) {\n                    doGetDependentModules((Map<?, ?>) item, dependentModuleIds);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 45.61517426558798}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t    // Read the image data from the DataBuffer\n    byte[] imageData = dataBuffer.getData();\n    // Create a new Asset with the image data and content type\n    Asset asset = new Asset(imageData, srcContentType);\n    // If creating a thumbnail, resize the image and set the content type to JPEG\n    if (createThumbnail) {\n        // Resize the image to a thumbnail\n        asset = resizeImage(asset, 200, 200);\n        // Set the content type to JPEG\n        asset.setContentType(MediaType.IMAGE_JPEG);\n    }\n    // Release the DataBuffer\n    dataBuffer.release();\n    // Return the new Asset\n    return asset;\n}", "CodeBleu_score": 39.04495393329099}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t  // Read the image data from the DataBuffer\n  Image image = ImageIO.read(dataBuffer);\n  // Resize the image if the createThumbnail flag is true\n  if (createThumbnail) {\n    image = resizeImage(image, 100, 100);\n  }\n  // Create a ByteArrayOutputStream to write the image data to\n  ByteArrayOutputStream baos = new ByteArrayOutputStream();\n  // Write the image data to the ByteArrayOutputStream\n  ImageIO.write(image, \"JPEG\", baos);\n  // Get the image data from the ByteArrayOutputStream\n  byte[] imageData = baos.toByteArray();\n  // Set the content type to JPEG if creating a thumbnail, otherwise retain the original content type\n  MediaType contentType = createThumbnail ? MediaType.IMAGE_JPEG : srcContentType;\n  // Create a new Asset with the processed image data and content type\n  return new Asset(imageData, contentType);\n}", "CodeBleu_score": 45.05863818497114}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t    ImageInputStream imageInputStream = ImageIO.createImageInputStream(dataBuffer);\n    BufferedImage bufferedImage = ImageIO.read(imageInputStream);\n    if (createThumbnail) {\n        bufferedImage = resizeImage(bufferedImage, 200, 200);\n    }\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    ImageIO.write(bufferedImage, \"jpeg\", outputStream);\n    Asset asset = new Asset();\n    asset.setContent(outputStream.toByteArray());\n    asset.setContentType(createThumbnail ? \"image/jpeg\" : srcContentType.toString());\n    release(imageInputStream);\n    release(outputStream);\n    return asset;\n}", "CodeBleu_score": 38.18852718383954}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    // Retrieve the asset by its ID\n    Mono<Asset> assetMono = assetService.getById(assetId);\n\n    // Create a response with a status of OK\n    ServerHttpResponse response = exchange.getResponse();\n    response.setStatusCode(HttpStatus.OK);\n\n    // Set the content type header if available\n    Mono<String> contentTypeMono = assetMono.map(Asset::getContentType);\n    contentTypeMono.subscribe(contentType -> response.getHeaders().setContentType(MediaType.parseMediaType(contentType)));\n\n    // Write the asset data to the response\n    Mono<DataBuffer> dataBufferMono = assetMono.flatMap(asset -> {\n        byte[] data = asset.getData();\n        return exchange.getResponse().bufferFactory().wrap(data);\n    });\n    return response.writeWith(dataBufferMono);\n}", "CodeBleu_score": 46.23423619130851}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return assetService.getById(assetId)\n        .map(asset -> {\n            exchange.getResponse().setStatusCode(HttpStatus.OK);\n            if (asset.getContentType() != null) {\n                exchange.getResponse().getHeaders().setContentType(MediaType.valueOf(asset.getContentType()));\n            }\n            return asset;\n        })\n        .flatMap(asset -> exchange.getResponse().writeWith(exchange.getResponse().bufferFactory().wrap(asset.getData())));\n}", "CodeBleu_score": 39.87761147773684}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return assetRepository.getById(assetId)\n            .flatMap(asset -> {\n                exchange.getResponse().setStatusCode(HttpStatus.OK);\n                exchange.getResponse().getHeaders().setContentType(MediaType.valueOf(asset.getContentType()));\n                return exchange.getResponse().writeWith(exchange.getResponse().bufferFactory().wrap(asset.getData()));\n            });\n}", "CodeBleu_score": 34.61367215460619}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    return getMode().flatMapIterable(mode -> {\n        if (mode == WorkspaceMode.SAAS) {\n            return Flux.empty();\n        }\n        return getWorkspace().flatMapIterable(workspace -> {\n            if (workspace.getEnterpriseMode() == null || !workspace.getEnterpriseMode()) {\n                return Flux.empty();\n            }\n            return getOrganizationInEnterpriseMode(workspace).flatMapIterable(org -> {\n                return getAuthConfigs(org.getId()).collect(Collectors.toList());\n            });\n        });\n    }).map(authConfig -> {\n        return new FindAuthConfig(authConfig.getId(), authConfig.getName(), authConfig.getType(), authConfig.getOrganizationId());\n    });\n}", "CodeBleu_score": 35.380899233395326}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    return getOrganizationInEnterpriseMode().flatMapIterable(organization -> organization.getAuthConfigs()).map(authConfig -> new FindAuthConfig(authConfig.getOrganizationId(), authConfig.getId()));\n}", "CodeBleu_score": 16.480254725625546}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    return getMode().flatMapIterable(mode -> {\n        if (mode == WorkspaceMode.SAAS) {\n            return Flux.empty();\n        }\n        return getWorkspace().flatMapIterable(workspace -> {\n            return getOrganizationInEnterpriseMode(workspace).flatMapIterable(organization -> {\n                return getAuthConfigs(organization.getId()).collectList().map(authConfigs -> {\n                    return authConfigs.stream().map(authConfig -> {\n                        return new FindAuthConfig(authConfig.getId(), authConfig.getType(), authConfig.getOrganizationId(), authConfig.getWorkspaceId());\n                    }).collect(Collectors.toList());\n                }).block();\n            });\n        });\n    });\n}", "CodeBleu_score": 35.96227893895866}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    return MongockSpring5.builder()\n            .setDriver(MongoSpring5Driver.withDefaultLock(mongoTemplate))\n            .addChangeLogsScanPackages(\"com.example.changelogs\")\n            .setSpringContext(springContext)\n            .buildApplicationRunner();\n}", "CodeBleu_score": 24.68726751024823}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    MongockSpring5.MongockApplicationRunner.Builder builder = MongockSpring5.MongockApplicationRunner.withDefaultLock(mongoTemplate)\n        .setWriteConcern(WriteConcern.ACKNOWLEDGED)\n        .setReadConcern(ReadConcern.MAJORITY)\n        .addChangeLogsScanPackages(\"com.example.migrations\")\n        .withJournal(new SpringDataMongoJournal(mongoTemplate, \"migration_journal\"))\n        .setSpringContext(springContext)\n        .setDriver(new SpringDataMongoV3Driver(mongoTemplate));\n    return builder.buildApplicationRunner();\n}", "CodeBleu_score": 50.735777740344226}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    return MongockSpring5.builder()\n            .setDriver(MongoSpring5Driver.withDefaultLock(mongoTemplate))\n            .addChangeLogsScanPackages(\"com.example.changelogs\")\n            .setSpringContext(springContext)\n            .buildApplicationRunner();\n}", "CodeBleu_score": 24.68726751024823}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t    ReactiveMongoTemplate template = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n    template.setReadPreference(ReadPreference.secondaryPreferred());\n    return template;\n}", "CodeBleu_score": 78.21226741060563}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t        ReactiveMongoTemplate mongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        mongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n        return mongoTemplate;\n    }", "CodeBleu_score": 95.78632722296167}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t        ReactiveMongoTemplate template = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        template.setReadPreference(ReadPreference.secondaryPreferred());\n        return template;\n    }", "CodeBleu_score": 77.62047882971166}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return getLatestRecordByLibraryQueryId(libraryQueryId)\n        .switchIfEmpty(getById(libraryQueryId))\n        .map(libraryQueryRecord -> {\n            return (Map<String, Object>) libraryQueryRecord.get(\"dsl\");\n        });\n}", "CodeBleu_score": 40.37826207265909}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return getLatestRecordByLibraryQueryId(libraryQueryId)\n            .switchIfEmpty(getById(libraryQueryId))\n            .map(libraryQueryRecord -> (Map<String, Object>) libraryQueryRecord.get(\"dsl\"));\n}", "CodeBleu_score": 38.8475691202671}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return getLatestRecordByLibraryQueryId(libraryQueryId)\n        .switchIfEmpty(getById(libraryQueryId))\n        .map(libraryQueryRecord -> (Map<String, Object>) libraryQueryRecord.get(\"dsl\"));\n}", "CodeBleu_score": 37.931779202084726}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        // Calculate the timeout duration in milliseconds\n        long timeoutMs = parseTimeout(timeoutStr);\n\n        // Determine the datasource type\n        DatasourceType datasourceType = datasource.getType();\n\n        // Execute the query locally if the datasource type is JS\n        if (datasourceType == DatasourceType.JS) {\n            return executeLocally(datasource, queryConfig, requestParams, timeoutMs, queryVisitorContext);\n        }\n\n        // Execute the query using Node.js if the datasource type is not JS\n        return executeByNodeJs(datasource, queryConfig, requestParams, timeoutMs, queryVisitorContext);\n    }", "CodeBleu_score": 31.19827561243063}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        long timeoutMs = getTimeoutMs(timeoutStr);\n        Mono<QueryExecutionResult> result = null;\n        if (isJsDatasourcePlugin(datasource)) {\n            result = executeByNodeJs(datasource, queryConfig, requestParams, timeoutMs, queryVisitorContext);\n        } else {\n            result = executeLocally(datasource, queryConfig, requestParams, timeoutMs, queryVisitorContext);\n        }\n        return result.onErrorMap(ofException -> {\n            if (ofException instanceof TimeoutException) {\n                return error(getMessage(\"query.timeout.error\", timeoutMs));\n            }\n            return error(getMessage(\"query.execution.error\"));\n        }).onErrorResume(ofException -> {\n            if (ofException instanceof PluginException) {\n                return error(getMessage(\"query.plugin.error\"));\n            }\n            log.error(\"Error while executing query\", ofException);\n            return error(getMessage(\"query.execution.error\"));\n        });\n    }", "CodeBleu_score": 44.779335934032595}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        try {\n            long timeout = Long.parseLong(timeoutStr);\n            if (timeout <= 0) {\n                throw new IllegalArgumentException(\"Invalid timeout value: \" + timeoutStr);\n            }\n\n            if (datasource.getType() == DatasourceType.NODEJS) {\n                return executeByNodeJs(datasource, queryConfig, requestParams, timeout);\n            } else {\n                return executeLocally(datasource, queryConfig, requestParams, timeout);\n            }\n        } catch (NumberFormatException e) {\n            return Mono.error(new IllegalArgumentException(\"Invalid timeout value: \" + timeoutStr));\n        }\n    }", "CodeBleu_score": 35.219915893322124}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\n        // Get the query executor based on the datasource type\n        QueryExecutor queryExecutor = getQueryExecutor(datasource.getType())\n\n        // Build the query execution context\n        QueryExecutionContext queryExecutionContext = buildQueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext)\n\n        // Get a connection from the datasource connection pool\n        Connection connection = getOrCreateConnection(datasource)\n\n        // Execute the query using the connection and handle any errors that occur\n        return queryExecutor.executeQuery(queryExecutionContext, connection)\n            .doOnError(error -> log.error(\"Error while executing query: {}\", error.getMessage()))\n            .onErrorReturn(new QueryExecutionResult())\n    }", "CodeBleu_score": 43.48498350244965}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t        return Mono.defer(() -> {\n            QueryExecutor queryExecutor = getQueryExecutor(datasource.getType());\n            QueryExecutionContext queryExecutionContext = buildQueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n            return getOrCreateConnection(datasource)\n                    .flatMap(connection -> {\n                        try {\n                            return queryExecutor.executeQuery(connection, queryExecutionContext);\n                        } catch (Exception e) {\n                            return Mono.error(e);\n                        }\n                    })\n                    .doOnError(e -> {\n                        LOGGER.error(\"Error while executing query for datasource: {}\", datasource.getName(), e);\n                    });\n        });\n    }", "CodeBleu_score": 44.42863738140981}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t    return getQueryExecutor(datasource).flatMap { queryExecutor ->\n        Mono.just(queryExecutor.buildQueryExecutionContext(queryConfig, requestParams, queryVisitorContext))\n    }.flatMap { queryExecutionContext ->\n        getOrCreateConnection(datasource).flatMap { connection ->\n            queryExecutor.doExecuteQuery(connection, queryExecutionContext)\n        }\n    }.onErrorResume {\n        if (it instanceof QueryExecutionException) {\n            return Mono.just(new QueryExecutionResult(it))\n        }\n        return Mono.error(it)\n    }\n}", "CodeBleu_score": 31.844410233925867}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t    if (timeoutStr == null || timeoutStr.isBlank()) {\n        return DEFAULT_QUERY_TIMEOUT_MS;\n    }\n    try {\n        int value = Integer.parseInt(timeoutStr.substring(0, timeoutStr.length() - 1));\n        String unit = timeoutStr.substring(timeoutStr.length() - 1);\n        return Math.min(value * getUnitInfo(unit).toMillis(), MAX_QUERY_TIMEOUT_MS);\n    } catch (NumberFormatException | IllegalArgumentException e) {\n        throw new IllegalArgumentException(\"Invalid timeout value: \" + timeoutStr);\n    }\n}", "CodeBleu_score": 28.307989840555997}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t    if (timeoutStr == null || timeoutStr.isBlank()) {\n        return DEFAULT_QUERY_TIMEOUT_MS;\n    }\n\n    try {\n        int index = timeoutStr.indexOf(\" \");\n        if (index < 0) {\n            return convertToMs(timeoutStr, \"ms\");\n        }\n\n        String valueStr = timeoutStr.substring(0, index);\n        String unitStr = timeoutStr.substring(index + 1);\n        return convertToMs(valueStr, unitStr);\n    } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"Invalid timeout value: \" + timeoutStr, e);\n    }\n}", "CodeBleu_score": 28.530092637141617}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t    if (timeoutStr.isBlank()) {\n        return 10000;\n    }\n    int timeoutMs = convertToMs(timeoutStr);\n    if (timeoutMs < 0) {\n        throw new IllegalArgumentException(\"Invalid timeout value: \" + timeoutStr);\n    }\n    return Math.min(timeoutMs, 300000);\n}", "CodeBleu_score": 13.709990861450574}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t    return getBaseQuery(application, visitorId)\n            .flatMap(baseQuery -> {\n                List<String> datasourceIds = baseQuery.getLiveQueries().stream()\n                        .flatMap(query -> query.getDatasources().stream())\n                        .map(Datasource::getId)\n                        .collect(Collectors.toList());\n                if (datasourceIds.isEmpty()) {\n                    return Mono.error(new IllegalArgumentException(\"No datasources found in the application\"));\n                }\n                return Flux.fromIterable(datasourceIds)\n                        .flatMap(datasourceId -> copyDatasource(currentOrganizationId, datasourceId, visitorId))\n                        .collectList()\n                        .map(copiedDatasources -> datasourceIds.stream()\n                                .map(originalDatasourceId -> new Pair<>(originalDatasourceId, copiedDatasources.stream()\n                                        .filter(copiedDatasource -> copiedDatasource.getId().equals(originalDatasourceId))\n                                        .findFirst()\n                                        .map(CopiedDatasource::getCopiedId)\n                                        .orElse(null)))\n                                .collect(Collectors.toList()));\n            });\n}", "CodeBleu_score": 48.08984833162449}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t    return getBaseQuery(application)\n            .flatMap(query -> {\n                List<String> datasourceIds = query.getDatasourceIds();\n                if (datasourceIds.isEmpty()) {\n                    return Mono.error(new IllegalArgumentException(\"No datasource found\"));\n                }\n                return Mono.just(datasourceIds);\n            })\n            .flatMap(datasourceIds -> {\n                List<Pair<String, String>> originalAndCopiedDatasourceIdPairs = new ArrayList<>();\n                for (String datasourceId : datasourceIds) {\n                    Mono<Datasource> datasourceMono = doCopyDatasource(currentOrganizationId, datasourceId, visitorId);\n                    datasourceMono.subscribe(copiedDatasource -> {\n                        originalAndCopiedDatasourceIdPairs.add(new Pair<>(datasourceId, copiedDatasource.getId()));\n                    });\n                }\n                return Mono.just(originalAndCopiedDatasourceIdPairs);\n            });\n}", "CodeBleu_score": 36.006478557355564}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t    return getBaseQuery(application.getId())\n        .flatMap(baseQuery -> {\n            if (baseQuery.getLiveQueries() == null || baseQuery.getLiveQueries().isEmpty()) {\n                return Mono.error(new IllegalArgumentException(\"No live queries found for application \" + application.getId()));\n            }\n            return Mono.just(baseQuery.getLiveQueries().stream()\n                .map(LiveQuery::getDatasourceId)\n                .filter(Objects::nonNull)\n                .collect(Collectors.toList()));\n        })\n        .flatMap(datasourceIds -> {\n            if (datasourceIds.isEmpty()) {\n                return Mono.error(new IllegalArgumentException(\"No datasources found for application \" + application.getId()));\n            }\n            return Mono.just(datasourceIds)\n                .flatMap(ids -> Flux.fromIterable(ids)\n                    .flatMap(datasourceId -> doCopyDatasource(datasourceId, currentOrganizationId, application, visitorId))\n                    .collectList()\n                    .map(copiedDatasourceIds -> {\n                        List<Pair<String, String>> pairs = new ArrayList<>();\n                        for (int i = 0; i < datasourceIds.size(); i++) {\n                            pairs.add(new Pair<>(datasourceIds.get(i), copiedDatasourceIds.get(i)));\n                        }\n                        return pairs;\n                    }));\n        });\n}", "CodeBleu_score": 33.51476332692177}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return Mono.just(datasourceId).flatMap(id -> {\n        return getById(id).flatMap(datasource -> {\n            if (datasource.isSystemStatic()) {\n                return Mono.just(datasource.getId());\n            }\n            if (datasource.isLegacyQuickRestApi() || datasource.isLegacyOpenblocksApi()) {\n                return createNewDatasourceFrom(datasource, organizationId, visitorId).flatMap(newDatasource -> {\n                    return Mono.just(newDatasource.getId());\n                });\n            }\n            return createNewDatasourceFrom(datasource, organizationId, visitorId).flatMap(newDatasource -> {\n                return Mono.just(newDatasource.getId());\n            });\n        });\n    });\n}", "CodeBleu_score": 66.93964681013658}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return getById(datasourceId).flatMap(datasource -> {\n        if (datasource.isSystemStatic()) {\n            return just(datasource.getId());\n        } else if (datasource.isLegacyQuickRestApi()) {\n            return just(datasource.getId());\n        } else if (datasource.isLegacyOpenblocksApi()) {\n            return just(datasource.getId());\n        } else {\n            return createNewDatasourceFrom(organizationId, visitorId, datasource);\n        }\n    });\n}", "CodeBleu_score": 51.709642777786115}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return getById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.isSystemStatic()) {\n                    return Mono.just(datasource.getId());\n                } else if (datasource.isLegacyQuickRestApi() || datasource.isLegacyOpenblocksApi()) {\n                    return createNewDatasourceFrom(datasource, organizationId, visitorId)\n                            .flatMap(newDatasource -> Mono.just(newDatasource.getId()));\n                } else {\n                    return createNewDatasourceFrom(datasource, organizationId, visitorId)\n                            .flatMap(newDatasource -> Mono.just(newDatasource.getId()));\n                }\n            });\n}", "CodeBleu_score": 54.95865383345539}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t        return upload(filePart)\n                .flatMap(url -> getAvatar(user)\n                        .flatMap(oldUrl -> remove(oldUrl))\n                        .then(updateUserAvatar(user, url))\n                        .thenReturn(true)\n                );\n    }", "CodeBleu_score": 16.510611247062425}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t    return upload(filePart).flatMap(url -> {\n        // Remove the old avatar if it exists\n        return getAvatar(user).flatMap(oldAvatar -> {\n            if (oldAvatar != null) {\n                return remove(oldAvatar);\n            } else {\n                return Mono.just(true);\n            }\n        });\n    }).flatMap(result -> {\n        // Update the user's profile with the new avatar\n        return updateUserAvatar(user, url);\n    }).map(result -> true);\n}", "CodeBleu_score": 21.159084484215633}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t    return upload(filePart, user)\n        .flatMap(url -> {\n            if (user.getAvatar() != null) {\n                return remove(user.getAvatar())\n                    .then(Mono.just(url));\n            }\n            return Mono.just(url);\n        })\n        .map(url -> {\n            user.setAvatar(url);\n            return true;\n        })\n        .then(Mono.just(user))\n        .flatMap(userRepository::save)\n        .map(user -> true)\n        .onErrorReturn(false);\n}", "CodeBleu_score": 31.47759062473874}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    return Mono.just(authUser)\n            .map(a -> {\n                User user = new User();\n                user.setName(a.getName());\n                user.setState(a.getState());\n                user.setIsEnabled(a.getIsEnabled());\n                user.setTpAvatarLink(a.getTpAvatarLink());\n                if (a.getAuthSource().equals(AuthSource.EMAIL) && a.getAuthContext().containsKey(AuthContext.PASSWORD)) {\n                    user.setPassword(encryptPassword(a.getAuthContext().get(AuthContext.PASSWORD)));\n                }\n                user.setConnections(a.getConnections());\n                user.setIsNewUser(true);\n                return user;\n            })\n            .flatMap(userRepository::save);\n}", "CodeBleu_score": 43.8625852448857}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    User user = new User();\n    user.setName(authUser.getUsername());\n    user.setState(UserState.ACTIVE);\n    user.setIsEnabled(true);\n    user.setTpAvatarLink(authUser.getAvatar());\n    if (authUser.getSource().equals(AuthSource.EMAIL) && authUser.getAuthContext().containsKey(AuthContext.PASSWORD)) {\n        user.setPassword(encryptPassword(authUser.getAuthContext().get(AuthContext.PASSWORD)));\n    }\n    user.setConnections(newHashSet(toAuthConnection(authUser.getConnections())));\n    user.setIsNewUser(true);\n    return create(user);\n}", "CodeBleu_score": 45.82958706074866}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    return Mono.just(new User())\n        .map(user -> {\n            user.setName(authUser.getUsername());\n            user.setState(UserState.ACTIVE);\n            user.setIsEnabled(true);\n            user.setTpAvatarLink(authUser.getAvatar());\n            if (authUser.getSource().equals(AuthSource.EMAIL) && authUser.getAuthContext().containsKey(AuthContext.PASSWORD)) {\n                user.setPassword(encryptPassword(authUser.getAuthContext().get(AuthContext.PASSWORD)));\n            }\n            user.setConnections(authUser.getConnections());\n            user.setIsNewUser(true);\n            return user;\n        })\n        .flatMap(userRepository::save)\n        .map(user -> {\n            user.getConnections().forEach(connection -> {\n                connection.setUser(user);\n                connection.setIsNewUser(true);\n            });\n            return user;\n        })\n        .flatMap(userRepository::save)\n        .flatMap(user -> {\n            user.getConnections().forEach(connection -> {\n                connection.setUser(user);\n                connection.setIsNewUser(true);\n            });\n            return userRepository.save(user);\n        })\n        .flatMap(user -> {\n            user.getConnections().forEach(connection -> {\n                connection.setUser(user);\n                connection.setIsNewUser(true);\n            });\n            return userRepository.save(user);\n        })\n        .flatMap(user -> {\n            user.getConnections().forEach(connection -> {\n                connection.setUser(user);\n                connection.setIsNewUser(true);\n            });\n            return userRepository.save(user);\n        })\n        .flatMap(user -> {\n            user.getConnections().forEach(connection -> {\n                connection.setUser(user);\n                connection.setIsNewUser(true);\n            });\n            return userRepository.save(user);\n        })\n        .flatMap(user -> {\n            user.getConnections().forEach(connection -", "CodeBleu_score": 41.1805536303378}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return getConnections().flatMap(connections -> {\n        if (connections.stream().anyMatch(connection -> connection.getSource().equals(ConnectionSource.EMAIL))) {\n            return Mono.error(new IllegalArgumentException(\"User already has an email connection\"));\n        }\n        return Mono.just(Connection.builder().source(ConnectionSource.EMAIL).rawId(email).build());\n    }).flatMap(connection -> user.getConnections().add(connection)).flatMap(userRepository::save).map(user -> true).onErrorResume(DuplicateKeyException.class, e -> Mono.just(false));\n}", "CodeBleu_score": 32.88977127393908}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return Mono.just(email)\n            .flatMap(e -> {\n                Connection connection = Connection.builder()\n                        .rawId(e)\n                        .provider(EmailConnection.PROVIDER_ID)\n                        .displayName(e)\n                        .build();\n                user.getConnections().add(connection);\n                return userRepository.save(user);\n            })\n            .map(u -> true)\n            .onErrorResume(DuplicateKeyException.class, e -> {\n                if (e.getMessage().contains(\"duplicate key value violates unique constraint\")) {\n                    return Mono.just(false);\n                }\n                return Mono.error(e);\n            });\n}", "CodeBleu_score": 51.5307706107496}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return Mono.just(email)\n            .flatMap(e -> {\n                Connection connection = Connection.builder()\n                        .rawId(e)\n                        .displayName(email)\n                        .providerId(EmailConnection.EMAIL_PROVIDER_ID)\n                        .providerUserId(email)\n                        .imageUrl(null)\n                        .accessToken(null)\n                        .secret(null)\n                        .refreshToken(null)\n                        .expireTime(null)\n                        .build();\n                user.getConnection().add(connection);\n                return userRepository.save(user);\n            })\n            .map(u -> true)\n            .onErrorResume(DuplicateKeyException.class, e -> Mono.just(false))\n            .onErrorResume(e -> Mono.error(e));\n}", "CodeBleu_score": 48.66318303259886}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return findById(userId)\n        .flatMap(user -> {\n            if (isBlank(oldPassword) || isBlank(newPassword)) {\n                return Mono.error(new InvalidPasswordException(\"Invalid password\"));\n            }\n\n            if (!matchPassword(oldPassword, user.getPassword())) {\n                return Mono.error(new InvalidPasswordException(\"Invalid password\"));\n            }\n\n            String encryptedPassword = encryptPassword(newPassword);\n            user.setPassword(encryptedPassword);\n            return userRepository.save(user).thenReturn(true);\n        })\n        .onErrorResume(throwable -> {\n            if (throwable instanceof InvalidPasswordException) {\n                return Mono.just(false);\n            }\n\n            return Mono.error(throwable);\n        });\n}", "CodeBleu_score": 39.667430499164226}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return userRepository.findById(userId)\n            .flatMap(user -> {\n                if (user.getPassword().equals(encryptPassword(oldPassword))) {\n                    user.setPassword(encryptPassword(newPassword));\n                    return userRepository.save(user).thenReturn(true);\n                } else {\n                    return Mono.error(new Exception(\"Invalid password\"));\n                }\n            })\n            .onErrorResume(error -> Mono.just(false));\n}", "CodeBleu_score": 26.869474120396834}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return userRepository.findById(userId)\n        .flatMap(user -> {\n            if (user.getPassword().equals(encryptPassword(oldPassword))) {\n                return Mono.just(true);\n            } else {\n                return Mono.error(new Exception(\"Invalid password\"));\n            }\n        })\n        .flatMap(valid -> {\n            if (valid) {\n                user.setPassword(encryptPassword(newPassword));\n                return userRepository.save(user);\n            } else {\n                return Mono.error(new Exception(\"Invalid password\"));\n            }\n        })\n        .thenReturn(true)\n        .onErrorReturn(false);\n}", "CodeBleu_score": 35.779340291722264}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t    return getOrgId(orgMember).flatMapMany(orgId -> {\n        if (orgMember.isAdmin()) {\n            return getUserGroupIdsInOrg(orgId, withoutDynamicGroups).map(groupIds -> groupIds.stream()\n                    .filter(groupId -> !isAllUsersGroup(groupId))\n                    .map(groupId -> getName(groupId, locale).map(name -> Map.of(USER_GROUP_ID_KEY, groupId, USER_GROUP_NAME_KEY, name)))\n                    .collect(Collectors.toList()))\n                    .collectList();\n        } else {\n            return getNonDynamicUserGroupIdsInOrg(orgId, userId, withoutDynamicGroups).map(groupNames -> groupNames.stream()\n                    .filter(groupName -> !isAllUsersGroup(groupName))\n                    .map(groupName -> getId(groupName).map(groupId -> Map.of(USER_GROUP_ID_KEY, groupId, USER_GROUP_NAME_KEY, groupName)))\n                    .collect(Collectors.toList()))\n                    .collectList();\n        }\n    });\n}", "CodeBleu_score": 28.01915038546246}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t        return getUserGroupIdsInOrg(userId, orgMember.getOrgId(), withoutDynamicGroups).map(groupIds -> groupIds.stream().map(groupId -> {\n            return getByIds(groupId, locale).map(group -> {\n                return Map.of(\"id\", group.getId(), \"name\", group.getName());\n            });\n        }).collect(Collectors.toList())).flatMapMany(Flux::mergeWith).collectList();\n    }", "CodeBleu_score": 20.62222946422314}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t        return orgMember.getUserGroupIdsInOrg()\n                .flatMapMany(groupIds -> {\n                    if (withoutDynamicGroups) {\n                        return groupIds.getNonDynamicUserGroupIdsInOrg()\n                                .flatMapMany(nonDynamicGroupIds -> {\n                                    if (nonDynamicGroupIds.isEmpty()) {\n                                        return Mono.just(nonDynamicGroupIds);\n                                    }\n                                    return groupRepository.getByIds(nonDynamicGroupIds)\n                                            .filter(group -> !group.isAllUsersGroup())\n                                            .collectList();\n                                });\n                    }\n                    return groupRepository.getByIds(groupIds)\n                            .filter(group -> !group.isAllUsersGroup());\n                })\n                .map(group -> {\n                    Map<String, String> groupMap = new HashMap<>();\n                    groupMap.put(\"id\", group.getId());\n                    groupMap.put(\"name\", group.getName(locale));\n                    return groupMap;\n                })\n                .collectList()\n                .map(groups -> {\n                    if (orgMember.isAdmin()) {\n                        return groups;\n                    }\n                    return groups.stream()\n                            .filter(group -> !group.get(\"id\").equals(Constants.ALL_USERS_GROUP_ID))\n                            .collect(Collectors.toList());\n                });\n    }", "CodeBleu_score": 32.54375336506515}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    return Mono.fromCallable(() -> {\n        UserStatus userStatus = new UserStatus();\n        userStatus.setId(userId);\n        userStatus.setHasShowNewUserGuidance(true);\n        return mongoUpsertHelper.upsert(userStatus);\n    });\n}", "CodeBleu_score": 37.21882073893654}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    return mongoUpsertHelper(UserStatus.class)\n            .setId(userId)\n            .set(UserStatus::setHasShowNewUserGuidance, true)\n            .upsert()\n            .map(WriteResult::wasAcknowledged);\n}", "CodeBleu_score": 28.588028499999307}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    return Mono.just(new UserStatus(userId, true))\n            .flatMap(userStatus -> mongoUpsertHelper(userStatus, userStatus.getId(), UserStatus.class, UserStatus::setHasShowNewUserGuidance));\n}", "CodeBleu_score": 24.817514721072115}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition is nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue is nil\")\n\t}\n\tg := rungroup.RunGroup{}\n\tg.Go(func(ctx context.Context) error {\n\t\tc.mu.RLock()\n\t\tdefer c.mu.RUnlock()\n\t\tfor k, p := range c.partitions {\n\t\t\tif predicatePartition(k, p) {\n\t\t\t\tp.clearMatching(predicateValue)\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t})\n\tg.Wait()\n}", "CodeBleu_score": 42.87943632425608}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"partition predicate is nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"value predicate is nil\")\n\t}\n\trungroup := rungroup.New(context.Background())\n\tdefer rungroup.Wait()\n\tg := rungroup.Go\n\tpartition.clearMatching(g, c, predicatePartition, predicateValue)\n}", "CodeBleu_score": 29.23208349413532}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition is nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue is nil\")\n\t}\n\n\tg, ctx := errgroup.WithContext(context.Background())\n\trungroup := &RunGroup{\n\t\tCtx: ctx,\n\t\tG:   g,\n\t}\n\n\tc.mu.RLock()\n\tdefer c.mu.RUnlock()\n\n\tfor _, partition := range c.partitions {\n\t\tif predicatePartition(partition.Name, partition.Manager) {\n\t\t\trungroup.Enqueue(func() error {\n\t\t\t\tpartition.Manager.clearMatching(predicateValue)\n\t\t\t\treturn nil\n\t\t\t})\n\t\t}\n\t}\n\n\trungroup.Run()\n}", "CodeBleu_score": 43.4478562961934}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\tpanic(\"numPartitions and totalWeightQuantity must be greater than zero\")\n\t}\n\n\taverageWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\tmaxSizePerPartition := int(math.Floor(averageWeightPerPartition))\n\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 49.372416360762095}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\tpanic(\"Number of partitions and total weight quantity must be greater than zero\")\n\t}\n\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\tmaxSizePerPartition := math.Floor(avgWeightPerPartition / float64(maxItemsTotal))\n\n\treturn int(maxSizePerPartition)\n}", "CodeBleu_score": 49.32207246273887}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\tpanic(\"numPartitions and totalWeightQuantity must be greater than zero\")\n\t}\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\tmaxSizePerPartition := int(math.Floor(avgWeightPerPartition * 1000))\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 50.04198790428831}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\t    def metadata = getConnectionMetadata()\n    def dbProductName = metadata?.getDatabaseProductName()\n    def dbVersion = metadata?.getDatabaseVersion()\n    def map = [:]\n    if (metadata != null) {\n        map.put(\"databaseProductName\", dbProductName)\n        map.put(\"databaseVersion\", dbVersion)\n    }\n    return map\n}", "CodeBleu_score": 34.74517411817628}, {"code": "public Map<String, Object> contributorMap(){\n\t    Map<String, Object> contributorMap = new HashMap<>();\n    ConnectionMetadata metadata = getConnectionMetadata();\n    if (metadata != null) {\n        contributorMap.put(\"databaseProductName\", metadata.getDatabaseProductName());\n        contributorMap.put(\"databaseVersion\", metadata.getDatabaseVersion());\n    }\n    return contributorMap;\n}", "CodeBleu_score": 44.225178663985055}, {"code": "public Map<String, Object> contributorMap(){\n\t    def connectionMetadata = getConnectionMetadata()\n    def contributorMap = [:]\n    if (connectionMetadata != null) {\n        contributorMap.put(\"databaseProductName\", connectionMetadata.getDatabaseProductName())\n        contributorMap.put(\"databaseVersion\", connectionMetadata.getDatabaseVersion())\n    }\n    return contributorMap\n}", "CodeBleu_score": 46.85651294053924}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    Map<String, Object> userSettings = (Map<String, Object>) configMap.get(\"userSettings\");\n    if (userSettings == null) {\n        info.setAllowRegistration(false);\n        info.setMustVerifyEmailOnRegistration(false);\n    } else {\n        info.setAllowRegistration((boolean) userSettings.get(\"allowRegistration\"));\n        info.setMustVerifyEmailOnRegistration((boolean) userSettings.get(\"mustVerifyEmailOnRegistration\"));\n    }\n}", "CodeBleu_score": 56.19155184542534}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    UserSetting userSetting = configMap.getUserSetting();\n    if (userSetting == null) {\n        info.setAllowRegistration(false);\n        info.setMustVerifyEmailOnRegistration(false);\n    } else {\n        info.setAllowRegistration(userSetting.getAllowRegistration());\n        info.setMustVerifyEmailOnRegistration(userSetting.getMustVerifyEmailOnRegistration());\n    }\n}", "CodeBleu_score": 53.467622014786265}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    UserSetting setting = configMap.getUserSetting();\n    if (setting == null) {\n        info.setAllowRegistration(false);\n        info.setMustVerifyEmailOnRegistration(false);\n    } else {\n        info.setAllowRegistration(setting.getAllowRegistration());\n        info.setMustVerifyEmailOnRegistration(setting.getMustVerifyEmailOnRegistration());\n    }\n}", "CodeBleu_score": 49.13282237127872}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\t    ThreadGroup tg = new ThreadGroup(\"restart\");\n    Thread t = new Thread(tg, new Runnable() {\n        public void run() {\n            try {\n                // Set the thread as non-daemon\n                setDaemon(false);\n\n                // Set the application class loader as the context class loader\n                setContextClassLoader(getClassLoader());\n\n                // Start the thread\n                start();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    });\n\n    // Start the thread\n    t.start();\n\n    // Return a message indicating the restart has begun\n    return \"Restarting...\";\n}", "CodeBleu_score": 40.74928614843575}, {"code": "public Object restart(){\n\t    ThreadGroup tg = new ThreadGroup(\"restart\") {\n        public void uncaughtException(Thread t, Throwable e) {\n            System.out.println(\"Uncaught exception in restart: \" + e.getMessage());\n        }\n    };\n    Thread t = new Thread(tg, \"restart\") {\n        public void run() {\n            setDaemon(false);\n            setContextClassLoader(getClass().getClassLoader());\n            start();\n        }\n    };\n    t.start();\n    return \"Restart has begun\";\n}", "CodeBleu_score": 38.30987587388608}, {"code": "public Object restart(){\n\t    ThreadGroup tg = new ThreadGroup(\"restart\");\n    Thread t = new Thread(tg, new Runnable() {\n        public void run() {\n            try {\n                Thread.currentThread().setContextClassLoader(getClassLoader());\n                Thread.currentThread().setDaemon(false);\n                Thread.currentThread().start();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    });\n    t.start();\n    return \"Restarting...\";\n}", "CodeBleu_score": 41.4405839038576}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t    ObjectMapper mapper = new ObjectMapper();\n    mapper.registerModule(new JavaTimeModule());\n    mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n    mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);\n    configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(mapper));\n    configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(mapper));\n}", "CodeBleu_score": 43.04280263538106}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t    ObjectMapper objectMapper = new ObjectMapper();\n    objectMapper.setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE);\n    objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    objectMapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);\n    objectMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);\n    objectMapper.registerModule(new JavaTimeModule());\n\n    configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n    configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n}", "CodeBleu_score": 41.30521349832439}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t     ObjectMapper objectMapper = Jackson2ObjectMapperBuilder.json().build();\n     configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n     configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n }", "CodeBleu_score": 54.35309780266775}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t  return route(\n      GET(\"/console/**\").and(negate(accept(TEXT_HTML))).and(negate(method(WebSocket))),\n      serveIndex(getLocation(), \"classpath:/static/console/index.html\"));\n}", "CodeBleu_score": 17.867709855275063}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t    return RouterFunctions.route(\n            RequestPredicates.and(\n                    RequestPredicates.accept(MediaType.TEXT_HTML),\n                    RequestPredicates.method(HttpMethod.GET),\n                    RequestPredicates.path(\"/console/**\").and(RequestPredicates.negate(RequestPredicates.path(\"/console/assets/**\"))),\n                    RequestPredicates.path(\"/console/**\").and(RequestPredicates.negate(RequestPredicates.path(\"/console/assets/**\"))).and(RequestPredicates.negate(RequestPredicates.websocket()))\n            ),\n            request -> {\n                ServerResponse.permanentRedirect(URI.create(getConsole().getIndexLocation())).build();\n            }\n    );\n}", "CodeBleu_score": 23.004177688181727}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t    return route(\n        accept(MediaType.TEXT_HTML),\n        negate(method(HttpMethod.WS)),\n        getLocation(),\n        serveIndex(\"console/index.html\")\n    )\n}", "CodeBleu_score": 19.92389003233245}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t    return RouterFunctions.route(\n            RequestPredicates.GET(\"/uc/**\")\n                    .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n                    .and(RequestPredicates.negate(RequestPredicates.path(\"/uc/assets/**\")))\n                    .and(RequestPredicates.method(HttpMethod.GET)),\n            this::serveIndex\n    );\n}", "CodeBleu_score": 23.360184280965758}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t    return RouterFunctions.route(\n            RequestPredicates.GET(\"/uc/**\")\n                    .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n                    .and(RequestPredicates.negate(RequestPredicates.path(\"/uc/assets/**\")))\n                    .and(RequestPredicates.method(HttpMethod.GET))\n                    .and(RequestPredicates.negate(RequestPredicates.accept(MediaType.TEXT_HTML_VALUE))),\n            request -> {\n                URI uri = request.uri();\n                String path = uri.getPath();\n                String redirectPath = path.replace(\"/uc\", \"\");\n                return ServerResponse.temporaryRedirect(URI.create(redirectPath)).build();\n            }\n    );\n}", "CodeBleu_score": 30.924483664308404}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t    return RouterFunctions.route(\n            RequestPredicates.GET(\"/uc/**\")\n                    .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n                    .and(RequestPredicates.negate(RequestPredicates.path(\"/uc/assets/**\")))\n                    .and(RequestPredicates.method(HttpMethod.GET)),\n            this::serveIndex\n    );\n}", "CodeBleu_score": 23.360184280965758}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    ConcurrentHashMap<String, MapSession> map = new ConcurrentHashMap<>()\n    MapSessionRepository<MapSession> sessionRepository = new MapSessionRepository(map)\n    DefaultReactiveSessionRepository<MapSession> reactiveSessionRepository = new DefaultReactiveSessionRepository<MapSession>(sessionRepository)\n    reactiveSessionRepository.setDefaultMaxInactiveInterval(properties.getSession().getTimeout())\n    return reactiveSessionRepository\n}", "CodeBleu_score": 38.98033810172898}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository = new MapSessionRepository();\n    reactiveSessionRepository.setDefaultMaxInactiveInterval(sessionProperties.getMaxInactiveInterval());\n    return reactiveSessionRepository;\n}", "CodeBleu_score": 21.993524577583376}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t  @Bean\n  public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository() {\n    MapSessionRepository<MapSession> sessionRepository = new MapSessionRepository<>();\n    sessionRepository.setDefaultMaxInactiveInterval(determineTimeout());\n    return sessionRepository;\n  }\n}", "CodeBleu_score": 27.50884178289254}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    DefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService);\n    userDetailsService.setSecurity(new Security(haloProperties.getSecurity()));\n    userDetailsService.setTwoFactorAuth(haloProperties.getSecurity().isTwoFactorAuth());\n    return userDetailsService;\n}", "CodeBleu_score": 47.545311375763546}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    DefaultUserDetailService defaultUserDetailService = new DefaultUserDetailService(userService, roleService);\n    defaultUserDetailService.setSecurity(new Security(haloProperties.getSecurity()));\n    return defaultUserDetailService;\n}", "CodeBleu_score": 42.36319231060143}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    DefaultUserDetailService defaultUserDetailService = new DefaultUserDetailService(userService, roleService);\n    defaultUserDetailService.setTwoFactorAuthDisabled(haloProperties.getSecurity().isDisabled());\n    return defaultUserDetailService;\n}", "CodeBleu_score": 46.37706709193284}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\t    Comment.CommentOwner.Builder builder = Comment.CommentOwner.newBuilder();\n    builder.setKind(\"email\");\n    builder.setEmail(email);\n    builder.setDisplayName(displayName);\n    builder.setAnnotations(avatarUrl != null ? Annotation.newBuilder().setUrl(avatarUrl).build() : null);\n    builder.setAnnotations(websiteUrl != null ? Annotation.newBuilder().setUrl(websiteUrl).build() : null);\n    return builder.build();\n}", "CodeBleu_score": 31.07193119959183}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t    Comment.CommentOwner.Builder builder = Comment.CommentOwner.newBuilder();\n    builder.setKind(\"email\");\n    builder.setEmail(email == null ? \"\" : email);\n    builder.setDisplayName(displayName);\n    builder.setAnnotations(Annotations.newBuilder().put(\"avatar\", avatar).put(\"website\", website).build());\n    return builder.build();\n}", "CodeBleu_score": 27.89748796316233}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t    Comment.CommentOwner owner = new Comment.CommentOwner();\n    owner.setKind(\"email\");\n    owner.setEmail(email);\n    owner.setDisplayName(displayName);\n    owner.setAnnotations(annotations);\n    owner.put(\"avatar\", avatar);\n    owner.put(\"website\", website);\n    return owner;\n}", "CodeBleu_score": 31.921205953270366}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    if (commentOwner.getKind() == 'email') {\n        User user = [SELECT Id FROM User WHERE Email = :post.Owner.Email];\n        if (user == null) {\n            return false;\n        }\n        return user.Name == commentOwner.getName();\n    }\n    return commentOwner.getName() == post.Owner.Name;\n}", "CodeBleu_score": 25.975914069958716}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    if (commentOwner.kind == 'email') {\n        User postOwner = User.fetch(post.ownerId);\n        return postOwner.email == commentOwner.name;\n    }\n    return commentOwner.name == post.owner.name;\n}", "CodeBleu_score": 19.431468980251722}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    if (commentOwner.getKind() == 'email') {\n        User postOwner = User.fetch(post.getOwner());\n        if (postOwner.getEmail() == commentOwner.getName()) {\n            return true;\n        }\n    } else {\n        return commentOwner.getName() == post.getOwner().getName();\n    }\n    return false;\n}", "CodeBleu_score": 33.50445962299398}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\t    ListOptions listOptions = new ListOptions();\n    listOptions.setFieldSelector(toFieldSelector());\n    return listOptions;\n}", "CodeBleu_score": 7.764828401105134}, {"code": "public ListOptions toListOptions(){\n\t    ListOptions listOptions = new ListOptions();\n    listOptions.setFieldSelector(getFieldSelector());\n    return listOptions;\n}", "CodeBleu_score": 7.780560896899981}, {"code": "public ListOptions toListOptions(){\n\t    ListOptions listOptions = new ListOptions();\n    if (StringUtils.isNotBlank(this.keyword)) {\n        listOptions.setFieldSelector(this.getFieldSelector());\n        return listOptions;\n    }\n    if (StringUtils.isNotBlank(this.ownerName)) {\n        listOptions.setFieldSelector(this.getFieldSelector());\n        return listOptions;\n    }\n    if (StringUtils.isNotBlank(this.ownerKind)) {\n        listOptions.setFieldSelector(this.getFieldSelector());\n        return listOptions;\n    }\n    listOptions.setLabelSelector(this.getLabelSelector());\n    return listOptions;\n}", "CodeBleu_score": 20.57320616179351}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    return Mono.just(commentName)\n            .mapNotNull(this::notNull)\n            .flatMap(this::getByName)\n            .map(CommentCounter::getUpvote)\n            .map(upvote -> CommentStats.builder().commentName(commentName).upvote(upvote).build())\n            .defaultIfEmpty(CommentStats.builder().commentName(commentName).build());\n}", "CodeBleu_score": 42.090489346430104}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    return Mono.justOrEmpty(commentName)\n            .filter(notNull)\n            .flatMap(nameOf(this::getByName))\n            .map(upvote)\n            .map(getUpvote)\n            .map(map(CommentStats::builder))\n            .defaultIfEmpty(empty());\n}", "CodeBleu_score": 36.122708660865115}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    return Mono.justOrEmpty(commentName)\n            .filter(name -> !name.isEmpty())\n            .map(name -> getByName(name))\n            .map(counter -> counter.getUpvote())\n            .map(upvote -> CommentStats.builder()\n                    .name(nameOf(commentName))\n                    .upvote(upvote)\n                    .build())\n            .defaultIfEmpty(CommentStats.builder().build());\n}", "CodeBleu_score": 40.63272772383346}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\t    Subscriber subscriber = createSubscriber(identity);\n    setReasonType(subscriber, \"someone replied to you\");\n    setExpression(subscriber.reason.condition, \"repliedOwner.name == $name\");\n    setExpression(subscriber.reason.condition, \"name\", identity.name);\n    subscribe(subscriber);\n    block();\n}", "CodeBleu_score": 30.43428286491725}, {"code": "void subscribeReply(UserIdentity identity){\n\t    formatted = \"subscribeReply\";\n    setReasonType(\"someone replied to you\");\n    createSubscriber(identity);\n    block();\n}", "CodeBleu_score": 9.54504338719917}, {"code": "void subscribeReply(UserIdentity identity){\n\t    Subscriber subscriber = createSubscriber(identity);\n    InterestReason reason = setReasonType(subscriber, \"someone replied to you\", \"repliedOwner=\" + identity.getName());\n    subscribe(subscriber, reason);\n    block();\n}", "CodeBleu_score": 34.710956552922745}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\t    comment.setApproved(true);\n    comment.setApprovedTime(now());\n    return updateCommentWithRetry(comment, client -> client.update(comment));\n}", "CodeBleu_score": 14.327505717005879}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t    comment.setApproved(true);\n    comment.setApprovedTime(now());\n    return updateCommentWithRetry(comment, (client, commentToUpdate) -> client.update(commentToUpdate));\n}", "CodeBleu_score": 16.92343094421985}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t    comment.setApproved(true);\n    comment.setApprovedTime(now());\n    return client.update(comment)\n        .onErrorResume(OptimisticLockingFailureException.class, e -> updateCommentWithRetry(comment, client::update))\n        .thenReturn(comment);\n}", "CodeBleu_score": 25.14774885978568}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->mount($this->getLivewire());\n    }\n\n    if ($action instanceof HasRecord) {\n        $action->record = $this->getRecord();\n    }\n\n    return $action;\n}", "CodeBleu_score": 55.648834366197455}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->mount($this->getLivewire());\n    }\n\n    if ($action instanceof HasRecord) {\n        $action->record = $this->getRecord();\n    }\n\n    return $action;\n}", "CodeBleu_score": 55.648834366197455}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->mount($this->getLivewire());\n    }\n\n    if ($action instanceof HasRecord) {\n        $action->record = $this->getRecord();\n    }\n\n    return $action;\n}", "CodeBleu_score": 55.648834366197455}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    if ($this->successRedirectUrl) {\n        $this->evaluate($this->successRedirectUrl);\n    }\n    return $this;\n}", "CodeBleu_score": 36.747858867757465}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    if ($this->successRedirectUrl) {\n        $this->evaluate($this->successRedirectUrl);\n    }\n\n    return $this;\n}", "CodeBleu_score": 36.747858867757465}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    if ($this->successRedirectUrl !== null) {\n        $this->redirect($this->successRedirectUrl);\n    }\n\n    return $this;\n}", "CodeBleu_score": 36.424083922110064}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if ($record === null || ! method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagClassName = config('nova-tags-input.tag_model');\n\n    $record->tags()->sync(\n        collect($state)->map(function ($tagName) use ($tagClassName) {\n            $locale = $tagClassName::getLocale();\n\n            $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n            if ($tag?->isEmpty() ?? true) {\n                $tag = $tagClassName::create([\n                    'name' => [$locale => $tagName],\n                ]);\n            }\n\n            return $tag;\n        })->flatten()->pluck('id')->toArray()\n    );\n}", "CodeBleu_score": 67.23597438725751}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if ($record === null || ! method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagClassName = $record->tags()->getRelated()->getMorphClass();\n\n    $tags = collect($state)->map(function ($tagName) use ($tagClassName) {\n        $locale = $tagClassName::getLocale();\n\n        $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n        if ($tag?->isEmpty() ?? true) {\n            $tag = $tagClassName::create([\n                'name' => [$locale => $tagName],\n            ]);\n        }\n\n        return $tag;\n    })->flatten();\n\n    $record->tags()->sync($tags->pluck('id'));\n}", "CodeBleu_score": 80.19707796539339}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if ($record === null || ! method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagClassName = config('tagify.tag_model', 'App\\Models\\Tag');\n\n    $record->tags()->sync(\n        collect($state)->map(function ($tagName) use ($tagClassName) {\n            $locale = $tagClassName::getLocale();\n\n            $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n            if ($tag?->isEmpty() ?? true) {\n                $tag = $tagClassName::create([\n                    'name' => [$locale => $tagName],\n                ]);\n            }\n\n            return $tag;\n        })->flatten()->pluck('id')->toArray()\n    );\n}", "CodeBleu_score": 67.04233988444987}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tscope := authz.NewScope(authz.ResourceTypePipeline, spacePath, repoName)\n\tresource := authz.NewResource(authz.ResourceTypePipeline, pipelineIdentifier)\n\n\tif err := authorizer.Check(ctx, authorizer, session, scope, resource, permission); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}", "CodeBleu_score": 57.69323096877776}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"invalid repo path: %v\", err)\n\t}\n\tscope := authz.Scope{\n\t\tType: authz.TypeRepository,\n\t\tName: repoName,\n\t}\n\tresource := authz.Resource{\n\t\tType:    authz.ResourcePipeline,\n\t\tName:    pipelineIdentifier,\n\t\tOwner:   session.UserName,\n\t\tOptions: map[string]string{\"space\": spacePath},\n\t}\n\treturn authorizer.Check(ctx, authorizer.Authorize(ctx, session, scope, resource, permission))\n}", "CodeBleu_score": 64.37408150780523}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\n\tspacePath, repoIdentifier := paths.DisectLeaf(repoPath)\n\tscope := authz.NewScope(spacePath, \"repository\")\n\tresource := authz.NewResource(repoIdentifier, \"pipeline\")\n\n\tif err := authorizer.Check(ctx, authorizer, session, scope, resource, permission); err != nil {\n\t\treturn fmt.Errorf(\"CheckPipeline: %w\", err)\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 45.30850048128352}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparent, name := paths.DisectLeaf(space.Path)\n\tscope := authz.NewScope(parent, name)\n\tresource := authz.NewResource(parent, name)\n\treturn authorizer.Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 44.1122485649752}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparentSpace, name := paths.DisectLeaf(space.Path)\n\tscope := &authz.Scope{\n\t\tType:      \"space\",\n\t\tSpacePath: parentSpace,\n\t\tName:      name,\n\t}\n\tresource := &authz.Resource{\n\t\tScope: scope,\n\t\tType:  \"space\",\n\t\tName:  name,\n\t}\n\treturn authorizer.Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 58.328527309546274}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparent, name := paths.DisectLeaf(space.Path)\n\tscope := fmt.Sprintf(\"%s:%s\", parent, name)\n\tresource := fmt.Sprintf(\"%s:%s\", parent, name)\n\treturn authorizer.Check(ctx, authorizer.Session(session), scope, resource, permission)\n}", "CodeBleu_score": 38.17485079652057}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tmarshaledData, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn marshaledData, nil\n\t}\n\n\tvar decodedData any\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\tif err := decoder.Decode(&decodedData); err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar sanitizedData bytes.Buffer\n\tencoder := json.NewEncoder(&sanitizedData)\n\tencoder.SetEscapeHTML(false)\n\tif err := encoder.Encode(decodedData); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn bytes.TrimSuffix(sanitizedData.Bytes(), []byte(\"\n\")), nil\n}", "CodeBleu_score": 51.88667905761919}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tvar decodedData any\n\tif err := json.Unmarshal(source, &decodedData); err != nil {\n\t\treturn nil, err\n\t}\n\n\tencodedData, err := json.Marshal(decodedData)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn bytes.TrimSuffix(encodedData, []byte(\"\n\")), nil\n}", "CodeBleu_score": 33.454016899557466}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tpayload, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn payload, nil\n\t}\n\n\tvar decodedData any\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\tif err := decoder.Decode(&decodedData); err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar buffer bytes.Buffer\n\tencoder := json.NewEncoder(&buffer)\n\tencoder.SetEscapeHTML(false)\n\tif err := encoder.Encode(decodedData); err != nil {\n\t\treturn nil, err\n\t}\n\n\tresult := bytes.TrimSuffix(buffer.Bytes(), []byte(\"\n\"))\n\treturn result, nil\n}", "CodeBleu_score": 55.41828168537229}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate repository reference.\n\tif err := c.repoStore.ValidateRef(ctx, repoRef); err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Get repository.\n\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check required permissions.\n\tif err := c.checkRepoPermission(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 49.289474878273026}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.getRepo(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif err := c.checkRepoPermission(session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\treturn repo, nil\n}", "CodeBleu_score": 34.322824862287874}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.getRepo(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := c.checkRepoPermission(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 38.301900269249494}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tcheckSanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\n\tcheckSanitizers[enum.EmptyPayloadKind] = createEmptyPayloadSanitizer()\n\tcheckSanitizers[enum.PipelinePayloadKind] = createPipelinePayloadSanitizer()\n\tcheckSanitizers[enum.MarkdownPayloadKind] = checkSanitizers[enum.RawPayloadKind]\n\tcheckSanitizers[enum.RawPayloadKind] = createRawPayloadSanitizer()\n\n\treturn checkSanitizers\n}", "CodeBleu_score": 62.22608752185494}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty:   createEmptyPayloadSanitizer(),\n\t\tenum.CheckPayloadKindRaw:     createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindMarkdown: createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindPipeline: createPipelinePayloadSanitizer(),\n\t}\n}", "CodeBleu_score": 30.24694084693376}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tcheckSanitizers := map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{}\n\n\tcheckSanitizers[enum.EmptyCheckPayloadKind] = createEmptyPayloadSanitizer()\n\tcheckSanitizers[enum.RawCheckPayloadKind] = createRawPayloadSanitizer()\n\tcheckSanitizers[enum.PipelineCheckPayloadKind] = createPipelinePayloadSanitizer()\n\n\treturn checkSanitizers\n}", "CodeBleu_score": 51.75440580969198}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\t\tself.state.on_render = on_render\n\tif self.state.screen == nil then\n\t\tself.state.screen = renderer.screen\n\t\tself.state.screen:attach_buffer(self)\n\tend\n\treturn self", "CodeBleu_score": 51.38277591995506}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t    if not self.attached then\n        self.attached = true\n        self.renderer.on_render = on_render\n        self.renderer.update_state()\n    end\n    return self", "CodeBleu_score": 53.97928063182207}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t    if not self.attached_to_renderer then\n        self.attached_to_renderer = true\n        self.state.on_render = on_render\n        renderer.attach(self)\n    end\n    return self", "CodeBleu_score": 54.96711323196705}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\t    if not self:is_valid() then return end\n    if not callback then return end\n    self.watcher = vim.loop.new_fs_event()\n    self.watcher:set_callback(function()\n        callback()\n    end)\n    self.watcher:watch_file(self.filename)\n    if not self.watcher:is_valid() then\n        vim.notify(\"Error watching file: \" .. self.filename, vim.log.levels.ERROR)\n    end", "CodeBleu_score": 53.79505368173301}, {"code": "function Buffer:watch(callback)\n\t    if not self:is_valid() then return end\n    if not callback then return end\n    if not self.watcher then\n        self.watcher = vim.loop.new_fs_event()\n        self.watcher:set_callback(function()\n            callback()\n        end)\n    end\n    self.watcher:watch_file(self.filename)", "CodeBleu_score": 45.23569579330751}, {"code": "function Buffer:watch(callback)\n\t    if self:is_valid() and callback then \n        self.watcher = vim.loop.new_fs_event() \n        local ok, err = self.watcher:watch_file(self.filename, { \n            persistent = true, \n            recursive = false, \n            edge = true \n        }) \n        if not ok then \n            vim.notify(err, vim.log.levels.ERROR) \n        else \n            self.watcher:set_callback(function() \n                callback(self) \n            end) \n        end \n    end ", "CodeBleu_score": 49.94941680033836}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\t    local hex = self.hex\n    if hex then\n        return hex\n    end\n\n    local spec = self:get_spec()\n    local attribute = self:get_attribute()\n    local highlight_name = self:get_highlight_name()\n    local highlight_color = vim.api.nvim_get_hl_by_name(highlight_name, true)\n    if highlight_color then\n        hex = highlight_color[attribute]\n        if hex then\n            self.hex = hex\n        end\n    end\n    if not hex then\n        hex = vim.api.nvim_get_hl_by_name(spec, true)[attribute]\n        if hex then\n            self.hex = hex\n        end\n    end\n    if not hex then\n        hex = vim.api.nvim_get_hl_by_name(attribute, true)[spec]\n        if hex then\n            self.hex = hex\n        end\n    end\n    if not hex then\n        hex = vim.api.nvim_get_hl_by_name(attribute, true)[attribute]\n        if hex then\n            self.hex = hex\n        end\n    end\n    return hex", "CodeBleu_score": 42.28205892728604}, {"code": "function Color:to_hex()\n\t  if self.hex then\n    return self.hex\n  end\n\n  local spec = self:get_spec()\n  local attr = spec.attr or 'fg'\n  local highlight_group = vim.api.nvim_get_hl_by_name(attr, true)\n  if not highlight_group then\n    return\n  end\n\n  local color = highlight_group[attr]\n  if not color then\n    return\n  end\n\n  local rgb = color.foreground or color.background\n  if not rgb then\n    return\n  end\n\n  local hex = rgb.hex\n  if not hex then\n    return\n  end\n\n  self.hex = hex\n  return hex", "CodeBleu_score": 54.41327680926656}, {"code": "function Color:to_hex()\n\t    local cache = self.cache\n    if cache then\n        return cache\n    end\n    local spec = self.spec\n    local attr = spec.attr\n    local hex\n    if attr == \"fg\" then\n        hex = vim.api.nvim_get_hl_by_name(spec.name, true).foreground\n    else\n        hex = vim.api.nvim_get_hl_by_name(spec.name, true).background\n    end\n    if hex then\n        hex = string.sub(hex, 2)\n        self.cache = hex\n        return hex\n    end", "CodeBleu_score": 47.68312397416086}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t    local lines = buffer:get_lines()\n    for _, line in ipairs(lines) do\n        local match = line:find(pattern)\n        if match then\n            buffer:add_highlight(match, match + #pattern - 1, hl)\n        end\n    end\n    return self", "CodeBleu_score": 38.749702510587}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t  local lines = buffer:get_lines()\n  for _, line in ipairs(lines) do\n    for start, end in line:find(pattern) do\n      buffer:add_highlight(start, end, hl)\n    end\n  end\n  return self", "CodeBleu_score": 35.228748788352874}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t    local lines = buffer:get_lines()\n    for _, line in ipairs(lines) do\n        local matches = line:find(pattern)\n        if matches then\n            for _, match in ipairs(matches) do\n                local start = match.start\n                local end_ = match.end\n                buffer:add_highlight(start, end_, hl)\n            end\n        end\n    end\n    return self", "CodeBleu_score": 48.61573910301955}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t    local id = tostring(row) .. tostring(col)\n    vim.api.nvim_buf_set_extmark(buffer, id, {\n        virt_text = {\n            {\n                text = text,\n                hl_group = hl,\n                position = pos,\n            }\n        },\n        priority = priority,\n    })\n    return id", "CodeBleu_score": 49.014802497715536}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t  local id = buffer..row..col\n  vim.api.nvim_buf_set_extmark(buffer, id, {\n    virt_text = { { text, hl } },\n    virt_pos = pos,\n    priority = priority\n  })\n  return id", "CodeBleu_score": 53.72005010870541}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t    local id = self.id_counter\n    self.id_counter = self.id_counter + 1\n    vim.api.nvim_buf_set_extmark(buffer, id, {\n        virt_text = { { text, hl } },\n        virt_text_pos = pos,\n        virt_text_offset = col - 1,\n        line = row - 1,\n        priority = priority,\n    })\n    return id", "CodeBleu_score": 60.98435730037376}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\t    local result = {}\n    local line = \"\"\n    for i, char in ipairs(output) do\n        if char == \"", "CodeBleu_score": 13.197973438106276}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal result = table.concat(output)\n\tlocal lines = {}\n\tlocal line = \"\"\n\tfor i = 1, #result do\n\t\tlocal char = result:sub(i, i)\n\t\tif char == \"", "CodeBleu_score": 31.468057843323287}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal output = table.concat(output)\n\tlocal line = \"\"\n\tfor i = 1, #output do\n\t\tlocal c = output:sub(i, i)\n\t\tif c == \"", "CodeBleu_score": 28.340909083605816}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t  local watcher = vim.loop.new_fs_event(path)\n  vim.loop.fs_event_start(watcher, handler, {})\n  return watcher", "CodeBleu_score": 32.916428568782706}, {"code": "function Watcher:watch_file(path, handler)\n\t  if self.watchers[path] then\n    return self.watchers[path]\n  end\n  local watcher = vim.loop.new_fs_event(path, { recursive = true })\n  vim.loop.fs_event_start(watcher, handler, path)\n  self.watchers[path] = watcher\n  return watcher", "CodeBleu_score": 48.95941574133941}, {"code": "function Watcher:watch_file(path, handler)\n\t  if self.watchers[path] then\n    return self.watchers[path]\n  end\n\n  local watcher = vim.loop.new_fs_event(path, {\n    recursive = true,\n    filter = function(_, _, name)\n      return name ~= \".\" and name ~= \"..\"\n    end,\n  })\n\n  vim.loop.fs_event_start(watcher, handler)\n\n  self.watchers[path] = watcher\n  return watcher", "CodeBleu_score": 46.63740034555898}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t  local buffer = self.buffer\n  local lines = self:get_lines()\n  local hunks = self.git_object:live_hunks(lines)\n  if hunks then\n    for _, hunk in ipairs(hunks) do\n      local ns_id = self.namespace:get_sign_ns_id()\n      local sign_priority = self.namespace:get_sign_priority()\n      local sign_type = self.namespace:get_sign_type()\n      local sign_text = self.namespace:get_sign_text()\n      local sign_text_hl_id = self.namespace:get_sign_text_hl_id()\n      local sign_text_hl_group = self.namespace:get_sign_text_hl_group()\n      local sign_text_hl_attr = self.namespace:get_sign_text_hl_attr()\n      local sign_text_hl_priority = self.namespace:get_sign_text_hl_priority()\n      local sign_text_hl_id_priority = self.namespace:get_sign_text_hl_id_priority()\n      local sign_text_hl_group_priority = self.namespace:get_sign_text_hl_group_priority()\n      local sign_text_hl_attr_priority = self.namespace:get_sign_text_hl_attr_priority()\n      local sign_text_hl_id_group_priority = self.namespace:get_sign_text_hl_id_group_priority()\n      local sign_text_hl_id_attr_priority = self.namespace:get_sign_text_hl_id_attr_priority()\n      local sign_text_hl_group_attr_priority = self.namespace:get_sign_text_hl_group_attr_priority()\n      local sign_text_hl_id_group_attr_priority = self.namespace:get_sign_text_hl_id_group_attr_priority()\n      local sign_text_hl_id_attr_group_priority = self.namespace:get_sign_text_hl_id_attr_group_priority()\n      local sign_", "CodeBleu_score": 29.296397604104307}, {"code": "function GitBuffer:live_hunks()\n\t  local hunks, err = self.git_object:live_hunks()\n  if err then\n    return err\n  end\n\n  local lines = self:get_lines()\n  local signs_setting = signs_setting:get()\n  local ns_id = self.namespace:get_sign_ns_id()\n\n  for _, hunk in ipairs(hunks) do\n    local hunk_start_line = hunk.start_line\n    local hunk_end_line = hunk.end_line\n    local hunk_type = hunk.type\n\n    local hunk_priority = signs_setting[hunk_type]\n\n    for line_number = hunk_start_line, hunk_end_line do\n      local line = lines[line_number]\n      if line then\n        local sign_type = signs_setting[hunk_type]\n        local sign_priority = hunk_priority\n        local sign_text = signs_setting[hunk_type]\n\n        local sign_id = signs.add(ns_id, sign_type, sign_priority, sign_text)\n        signs.set_sign_id(line, sign_id)\n      end\n    end\n  end\n\n  signs.update()\n\n  return hunks", "CodeBleu_score": 47.44123246055659}, {"code": "function GitBuffer:live_hunks()\n\t  local lines = self:get_lines()\n  if lines == nil then\n    return nil\n  end\n  local hunks = self.git_object:live_hunks(lines)\n  if hunks == nil then\n    return nil\n  end\n  local ns_id = self.namespace:get_sign_ns_id()\n  for _, hunk in ipairs(hunks) do\n    if hunk.type == \"add\" then\n      hunk.priority = 1\n    elseif hunk.type == \"mod\" then\n      hunk.priority = 2\n    elseif hunk.type == \"del\" then\n      hunk.priority = 3\n    end\n    for _, line in ipairs(hunk.lines) do\n      local sign = signs_setting:get(ns_id, line.number, line.text)\n      if sign == nil then\n        sign = signs_setting:new(ns_id, line.number, line.text)\n      end\n      sign.priority = hunk.priority\n      sign.type = hunk.type\n      sign.hunk = hunk\n      sign:update()\n    end\n  end\n  self.signs:update()\n  return hunks", "CodeBleu_score": 47.4032110114548}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\t    local tmpfile = fs.tmpname()\n    fs.write_file(tmpfile, patch)\n    local ret, err = self.git:stage_hunk_from_patch(tmpfile)\n    fs.remove_file(tmpfile)\n    if err then\n        return ret, err\n    end", "CodeBleu_score": 56.24370280012958}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t    local tmpfile = fs.tmpname() \n    fs.write_file(tmpfile, patch) \n    local _, err = self.git:stage_hunk_from_patch(tmpfile) \n    fs.remove_file(tmpfile) \n    return err ", "CodeBleu_score": 51.753104819301775}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t    local tmpfile = fs.tmpname()\n    fs.write_file(tmpfile, patch)\n    local err = self.git:stage_hunk_from_file(tmpfile)\n    fs.remove_file(tmpfile)\n    return err", "CodeBleu_score": 48.83318662907236}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    // Create an OAuth request to the access token endpoint\n    OAuthRequest request = new OAuthRequest(getAccessTokenVerb(), getAccessTokenEndpoint());\n\n    // Add the necessary authentication header and body parameters\n    request.addHeader(getHttpBasicAuthHeaderValue());\n    request.addBodyParameter(OAuthConstants.OAUTH_TOKEN, requestToken.getToken());\n    request.addBodyParameter(OAuthConstants.OAUTH_VERIFIER, verifier.getValue());\n\n    // Send the request\n    Response response = request.send();\n\n    // Extract the access token from the response body using the API's access token extractor\n    return getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 58.75328007706878}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    OAuthRequest request = new OAuthRequest(getAccessTokenVerb(), getAccessTokenEndpoint());\n    if (getAccessTokenVerb().equals(Verb.GET)) {\n        request.addQuerystringParameter(OAuthConstants.TOKEN, requestToken.getToken());\n        request.addQuerystringParameter(OAuthConstants.VERIFIER, verifier.getValue());\n    } else {\n        request.addBodyParameter(OAuthConstants.TOKEN, requestToken.getToken());\n        request.addBodyParameter(OAuthConstants.VERIFIER, verifier.getValue());\n    }\n    request.addHeader(getAccessTokenHeader());\n    request.addHeader(getAccessTokenHeaderValue(requestToken, verifier));\n    request.addBodyParameter(OAuthConstants.CONSUMER_KEY, getConsumerKey());\n    request.addBodyParameter(OAuthConstants.CONSUMER_SECRET, getConsumerSecret());\n    if (getAccessTokenExtractor() != null) {\n        Response response = request.send();\n        return getAccessTokenExtractor().extract(response.getBody());\n    }\n    return null;\n}", "CodeBleu_score": 53.56083756630403}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    OAuthRequest request = new OAuthRequest(getAccessTokenVerb(), getAccessTokenEndpoint());\n    request.addHeader(getAccessTokenHeader());\n    request.addBodyParameter(OAuthConstants.OAUTH_VERIFIER, verifier.getValue());\n    request.addBodyParameter(OAuthConstants.OAUTH_TOKEN, requestToken.getToken());\n    request.addBodyParameter(OAuthConstants.OAUTH_CALLBACK, callback);\n    if (signatureService != null) {\n        signatureService.sign(request);\n    }\n    Response response = request.send();\n    return getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 53.63645559300213}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    CredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(\n        new AuthScope(host.getHostName(), host.getPort()),\n        new UsernamePasswordCredentials(username, password)\n    );\n    context.setCredentialsProvider(credsProvider);\n\n    AuthCache authCache = new BasicAuthCache();\n    authCache.put(host, new BasicScheme());\n    context.setAuthCache(authCache);\n\n    log.info(\"Adding host to auth cache: {}\", host);\n}", "CodeBleu_score": 62.80632608419931}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n    credentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(\"username\", \"password\"));\n    context.setCredentialsProvider(credentialsProvider);\n\n    AuthCache authCache = new BasicAuthCache();\n    authCache.put(host, new BasicScheme());\n    context.setAuthCache(authCache);\n\n    log.info(\"Added host {} to auth cache\", host.getHostName());\n}", "CodeBleu_score": 58.66462057096603}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n    credentialsProvider.setCredentials(\n            new AuthScope(host.getHostName(), host.getPort()),\n            new UsernamePasswordCredentials(username, password));\n\n    context.setCredentialsProvider(credentialsProvider);\n\n    AuthCache authCache = new BasicAuthCache();\n    authCache.put(host, new BasicScheme());\n    context.setAuthCache(authCache);\n\n    log.info(\"Added host {} to auth cache\", host);\n}", "CodeBleu_score": 65.03294340374276}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins jenkins = Jenkins.getInstanceOrNull();\n    if (jenkins == null) {\n        throw new IllegalStateException(\"Jenkins is not running\");\n    }\n    AvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache is not installed\");\n    }\n    String cacheKey = cache.getKey(source);\n    if (cacheKey == null) {\n        cache.seed(source);\n        cacheKey = cache.getKey(source);\n    }\n    String rootUrl = jenkins.getRootUrl();\n    String encodedKey = rawEncode(cacheKey);\n    if (encodedKey == null) {\n        throw new IllegalStateException(\"UTF-8 encoding is not supported\");\n    }\n    return rootUrl + \"/avatar/lookup/\" + encodedKey + \"/\" + size;\n}", "CodeBleu_score": 44.65824228282993}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins jenkins = Jenkins.getInstanceOrNull();\n    if (jenkins == null) {\n        throw new IllegalStateException(\"Jenkins instance not found\");\n    }\n    AvatarCache cache = jenkins.getExtensionList(AvatarCache.class)[0];\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache instance not found\");\n    }\n    String cacheKey = cache.getKey(source);\n    cache.seed(cacheKey);\n    String rootUrl = jenkins.getRootUrlFromRequest();\n    String encodedKey = cache.encode(cacheKey);\n    return rootUrl + \"avatar/lookup?size=\" + size + \"&key=\" + encodedKey;\n}", "CodeBleu_score": 44.029486661604146}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins jenkins = Jenkins.getInstanceOrNull()\n    if (jenkins == null) {\n        throw new IllegalStateException(\"Jenkins instance not found\")\n    }\n    AvatarCache cache = jenkins.getExtensionList(AvatarCache.class)[0]\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache extension not found\")\n    }\n    String cacheKey = getCacheKey(source)\n    cache.seedCache(cacheKey)\n    String rootUrl = jenkins.getRootUrlFromRequest()\n    String encodedKey = rawEncode(cacheKey)\n    if (encodedKey == null) {\n        throw new IllegalStateException(\"UTF-8 encoding is not supported\")\n    }\n    return \"${rootUrl}/avatar/${encodedKey}/${size}\"\n}", "CodeBleu_score": 43.55182707714352}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n    if (image.getWidth() > 128 || image.getHeight() > 128) {\n        image = scaleImage(image, 128);\n    }\n    this.image = image;\n}", "CodeBleu_score": 63.25722694395635}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    this.lastModified = lastModified;\n    if (image.getWidth() > 128 || image.getHeight() > 128) {\n        this.image = scaleImage(image, 128, 128);\n    } else {\n        this.image = image;\n    }\n}", "CodeBleu_score": 52.42246669993557}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    if (image.getWidth() > 128 || image.getHeight() > 128) {\n        image = ImageUtil.scaleImage(image, 128, 128);\n    }\n    this.image = image;\n    if (lastModified < 0) {\n        lastModified = System.currentTimeMillis();\n    }\n    this.lastModified = lastModified;\n}", "CodeBleu_score": 57.170401091641686}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    if (future.isDone()) {\n        try {\n            image = future.get();\n            lastModified = System.currentTimeMillis();\n            future = null;\n        } catch (Exception e) {\n            future = null;\n        }\n    }\n    return true;\n}", "CodeBleu_score": 41.80093008261567}, {"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    if (future.isDone()) {\n        try {\n            image = future.get();\n            lastModified = System.currentTimeMillis();\n            future = null;\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n            return true;\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n            return true;\n        }\n    }\n    return true;\n}", "CodeBleu_score": 49.7935962002805}, {"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    if (future.isDone()) {\n        try {\n            image = future.get();\n            lastModified = System.currentTimeMillis();\n            future = null;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 44.29948418397301}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    ImageOutputStream ios = ImageIO.createImageOutputStream(baos);\n    ImageWriter writer = ImageIO.getImageWritersByMIMEType(\"image/png\").next();\n    writer.setOutput(ios);\n\n    // Create an image\n    BufferedImage image = new BufferedImage(100, 100, BufferedImage.TYPE_INT_RGB);\n\n    // Create a graphics context on the image\n    Graphics2D g2d = image.createGraphics();\n\n    // Set the background color\n    g2d.setColor(Color.WHITE);\n    g2d.fillRect(0, 0, 100, 100);\n\n    // Draw a red rectangle\n    g2d.setColor(Color.RED);\n    g2d.fillRect(25, 25, 50, 50);\n\n    // Dispose of the graphics context\n    g2d.dispose();\n\n    // Write the image to the byte array output stream\n    writer.write(null, new IIOImage(image, null, null), null);\n\n    // Flush the image to the byte array output stream\n    ios.flush();\n\n    // Set the content length header\n    rsp.setContentLength(baos.size());\n\n    // Add the cache control header\n    rsp.addHeader(\"Cache-Control\", \"max-age=3600\");\n\n    // Set the content type header\n    rsp.setContentType(\"image/png\");\n\n    // Write the byte array to the response output stream\n    rsp.getOutputStream().write(baos.toByteArray());\n\n    // Flush the response output stream\n    rsp.flush();\n}", "CodeBleu_score": 41.834772045546494}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t    byte[] image = getImage(node);\n    if (image == null) {\n        rsp.sendError(404);\n        return;\n    }\n    if (image.length == 0) {\n        rsp.sendError(404);\n        return;\n    }\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    baos.write(image);\n    if (flush) {\n        baos.flush();\n    }\n    rsp.setContentLength(baos.size());\n    rsp.addHeader(\"Cache-Control\", \"no-cache\");\n    rsp.setContentType(\"image/png\");\n    rsp.getOutputStream().write(baos.toByteArray());\n}", "CodeBleu_score": 51.840184896651564}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t        // Write the image to a byte array output stream\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        ImageIO.write(image, \"png\", baos);\n\n        // Flush the image if required\n        if (flush) {\n            baos.flush();\n        }\n\n        // Set appropriate headers for caching and content type\n        rsp.setContentLength(baos.size());\n        rsp.addHeader(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n        rsp.addHeader(\"Pragma\", \"no-cache\");\n        rsp.addHeader(\"Expires\", \"0\");\n        rsp.setContentType(\"image/png\");\n\n        // Write the byte array to the response output stream\n        rsp.getOutputStream().write(baos.toByteArray());\n    }", "CodeBleu_score": 48.240092893019714}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t\n    this.enableCache = enableCache;\n    this.teamCacheDuration = teamCacheDuration;\n    this.repositoriesCacheDuration = repositoriesCacheDuration;\n    this.owner = owner;\n    this.projectKey = projectKey;\n    this.repositoryName = repositoryName;\n    this.authenticator = authenticator;\n\n    // Configure cache expiration for team and repositories if caching is enabled\n    if (enableCache) {\n        this.teamCacheExpireDuration = teamCacheDuration;\n        this.repositoriesCacheExpireDuration = repositoriesCacheDuration;\n    }\n\n    // Configure HTTP client with keep-alive strategy, connection manager, and retry handler\n    HttpClientBuilder httpClientBuilder = HttpClients.custom()\n            .setKeepAliveStrategy(new BitbucketKeepAliveStrategy())\n            .setConnectionManager(createConnectionManager())\n            .setRetryHandler(new BitbucketRetryHandler());\n\n    // Configure HTTP client and context for authentication if authenticator is provided\n    if (authenticator != null) {\n        httpClientBuilder.setDefaultCredentialsProvider(authenticator.getCredentialsProvider());\n        authenticator.configureContext(httpClientBuilder);\n    }\n\n    // Set client proxy parameters\n    setClientProxyParams(httpClientBuilder);\n\n    // Build the HTTP client\n    httpClient = httpClientBuilder.build();\n}", "CodeBleu_score": 49.22713366546002}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t    this.enableCache = enableCache;\n    this.teamCacheDuration = teamCacheDuration;\n    this.repositoriesCacheDuration = repositoriesCacheDuration;\n    this.owner = owner;\n    this.projectKey = projectKey;\n    this.repositoryName = repositoryName;\n    this.authenticator = authenticator;\n\n    // Configure cache expiration for team and repositories if caching is enabled\n    if (enableCache) {\n        cacheExpireDurationTeam = Duration.ofMinutes(teamCacheDuration);\n        cacheExpireDurationRepositories = Duration.ofMinutes(repositoriesCacheDuration);\n    }\n\n    // Set up HTTP client with keep-alive strategy, connection manager, and retry handler\n    HttpClientBuilder httpClientBuilder = HttpClientBuilder.create();\n    httpClientBuilder.setKeepAliveStrategy(new DefaultConnectionKeepAliveStrategy());\n    httpClientBuilder.setConnectionManager(createConnectionManager());\n    httpClientBuilder.setRetryHandler(new RetryHandler() {\n        @Override\n        public boolean retryRequest(IOException exception, int executionCount, HttpContext context) {\n            return executionCount < 3;\n        }\n    });\n\n    // Configure HTTP client and context for authentication\n    if (authenticator != null) {\n        httpClientBuilder.setDefaultCredentialsProvider(authenticator.getCredentialsProvider());\n        httpClientBuilder.setDefaultAuthSchemeRegistry(authenticator.getAuthSchemeRegistry());\n        httpClientBuilder.setProxy(authenticator.getProxy());\n    }\n\n    // Set client proxy parameters\n    configureClientProxyParams();\n\n    // Build and convert HTTP client\n    httpClient = httpClientBuilder.build();\n    httpClientConvert = httpClient.convert();\n}", "CodeBleu_score": 47.94475456052344}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t        this.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n\n        // Configure the HTTP client with a keep-alive strategy, connection manager, and retry handler\n        HttpClientBuilder httpClientBuilder = HttpClients.custom();\n        httpClientBuilder.setKeepAliveStrategy(new DefaultConnectionKeepAliveStrategy());\n        httpClientBuilder.setConnectionManager(getConnectionManager());\n        httpClientBuilder.setRetryHandler(new DefaultHttpRequestRetryHandler(3, true));\n\n        // Configure the HTTP client and context for authentication\n        if (authenticator != null) {\n            httpClientBuilder.setDefaultCredentialsProvider(authenticator.getCredentialsProvider());\n            httpClientBuilder.setDefaultAuthSchemeRegistry(authenticator.getAuthSchemeRegistry());\n            httpClientBuilder.setProxy(authenticator.getProxy());\n        }\n\n        // Set client proxy parameters\n        setClientProxyParams(httpClientBuilder);\n\n        // Build the HTTP client\n        httpClient = httpClientBuilder.build();\n\n        // Configure the HTTP client context\n        configureContext();\n    }", "CodeBleu_score": 47.89404679504987}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    BitbucketBranchValue source = pullRequest.getSource()\n    BitbucketBranchValue destination = pullRequest.getDestination()\n    BitbucketRawNodeValue rawNode\n\n    if (source.getBranch() != null) {\n        rawNode = source.getRawNode()\n        if (rawNode != null) {\n            pullRequest.setCommitClosure(source.getBranch(), new CommitClosure(rawNode.getHash()))\n        }\n    }\n\n    if (destination.getBranch() != null) {\n        rawNode = destination.getRawNode()\n        if (rawNode != null) {\n            pullRequest.setCommitClosure(destination.getBranch(), new CommitClosure(rawNode.getHash()))\n        }\n    }\n}", "CodeBleu_score": 40.594651375611676}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t  // Get the source branch and set the closure\n  def sourceBranch = pullRequest.getSource()\n  if (sourceBranch) {\n    def sourceBranchRawNode = sourceBranch.getRawNode()\n    if (sourceBranchRawNode) {\n      sourceBranch.setCommitClosure(sourceBranchRawNode.getCommitClosure())\n    }\n  }\n\n  // Get the destination branch and set the closure\n  def destinationBranch = pullRequest.getDestination()\n  if (destinationBranch) {\n    def destinationBranchRawNode = destinationBranch.getRawNode()\n    if (destinationBranchRawNode) {\n      destinationBranch.setCommitClosure(destinationBranchRawNode.getCommitClosure())\n    }\n  }\n}", "CodeBleu_score": 36.669190022298956}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    // Get the source branch\n    BitbucketBranch source = pullRequest.getSource()\n    if (source != null) {\n        // Get the raw node of the source branch\n        BitbucketRawNode rawNode = source.getRawNode()\n        if (rawNode != null) {\n            // Create a new CommitClosure for the source branch\n            CommitClosure sourceClosure = new CommitClosure()\n            sourceClosure.setCommit(rawNode.getCommit())\n            sourceClosure.setBranch(source)\n            sourceClosure.setPullRequest(pullRequest)\n            source.setCommitClosure(sourceClosure)\n        }\n    }\n\n    // Get the destination branch\n    BitbucketBranch destination = pullRequest.getDestination()\n    if (destination != null) {\n        // Get the raw node of the destination branch\n        BitbucketRawNode rawNode = destination.getRawNode()\n        if (rawNode != null) {\n            // Create a new CommitClosure for the destination branch\n            CommitClosure destinationClosure = new CommitClosure()\n            destinationClosure.setCommit(rawNode.getCommit())\n            destinationClosure.setBranch(destination)\n            destinationClosure.setPullRequest(pullRequest)\n            destination.setCommitClosure(destinationClosure)\n        }\n    }\n}", "CodeBleu_score": 33.13596728474754}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration config = JenkinsLocationConfiguration.get();\n    if (config == null || config.getUrl() == null) {\n        throw new IllegalStateException(\"Jenkins location configuration is not set\");\n    }\n    return config.getUrl();\n}", "CodeBleu_score": 60.15560521723684}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    final JenkinsLocationConfiguration location = JenkinsLocationConfiguration.get();\n    if (location == null) {\n        throw new IllegalStateException(\"Jenkins location configuration is null\");\n    }\n    final URL url = location.getUrl();\n    if (url == null) {\n        throw new IllegalStateException(\"Jenkins location URL is null\");\n    }\n    return new DisplayURLProvider(url).getRootURL(build);\n}", "CodeBleu_score": 50.655810822407865}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration location = JenkinsLocationConfiguration.get();\n    if (location == null) {\n        throw new IllegalStateException(\"Jenkins location configuration is not set\");\n    }\n    String url = location.getUrl();\n    if (url == null) {\n        throw new IllegalStateException(\"Jenkins location configuration URL is not set\");\n    }\n    return new DisplayURLProvider(url).getRootURL(build);\n}", "CodeBleu_score": 51.547459788116015}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    if (!url.startsWith(\"http\")) {\n        throw new IllegalStateException(\"The URL must start with http or https\");\n    }\n    URI uri = URI.create(url);\n    if (!uri.getScheme().equals(\"http\") && !uri.getScheme().equals(\"https\")) {\n        throw new IllegalStateException(\"The URL must start with http or https\");\n    }\n    if (uri.getHost().equals(\"localhost\")) {\n        throw new IllegalStateException(\"The host must not be localhost\");\n    }\n    if (bitbucket.equals(BitbucketApi.CLOUD)) {\n        if (uri.getHost().equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"The host must not be unconfigured-jenkins-location\");\n        }\n        if (uri.getHost().contains(\".\")) {\n            throw new IllegalStateException(\"The host must be a fully qualified domain name\");\n        }\n    }\n    return url;\n}", "CodeBleu_score": 54.89264973192676}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    if (url == null || url.isEmpty()) {\n        throw new IllegalStateException(\"URL cannot be empty\");\n    }\n\n    if (url.equals(\"unconfigured-jenkins-location\")) {\n        throw new IllegalStateException(\"URL cannot be 'unconfigured-jenkins-location'\");\n    }\n\n    if (url.equals(\"localhost\")) {\n        throw new IllegalStateException(\"URL cannot be 'localhost'\");\n    }\n\n    if (bitbucket == BitbucketApi.BITBUCKET_SERVER) {\n        if (!url.startsWith(\"http\")) {\n            throw new IllegalStateException(\"URL must start with 'http'\");\n        }\n\n        if (!url.contains(\":\")) {\n            throw new IllegalStateException(\"URL must contain a port number\");\n        }\n\n        if (!url.endsWith(\"/\")) {\n            throw new IllegalStateException(\"URL must end with a '/'\");\n        }\n\n        if (!url.contains(\".\")) {\n            throw new IllegalStateException(\"URL must contain a '.'\");\n        }\n    }\n\n    if (bitbucket == BitbucketApi.BITBUCKET_CLOUD) {\n        if (!url.startsWith(\"https://\")) {\n            throw new IllegalStateException(\"URL must start with 'https://'\");\n        }\n\n        if (!url.contains(\".\")) {\n            throw new IllegalStateException(\"URL must contain a '.'\");\n        }\n    }\n\n    return url;\n}", "CodeBleu_score": 46.117460041689775}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    try {\n        URL jenkinsURL = new URL(url);\n        String host = jenkinsURL.getHost();\n        if (host.equals(\"localhost\")) {\n            throw new IllegalStateException(\"Invalid Jenkins URL: \" + url + \". Host cannot be 'localhost'.\");\n        }\n        if (host.equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"Invalid Jenkins URL: \" + url + \". Host cannot be 'unconfigured-jenkins-location'.\");\n        }\n        if (bitbucket.isBitbucketCloud() && !host.contains(\".\")) {\n            throw new IllegalStateException(\"Invalid Bitbucket Cloud URL: \" + url + \". Host must be fully qualified.\");\n        }\n        return url;\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"Invalid URL: \" + url + \". URL must be well-formed.\", e);\n    }\n}", "CodeBleu_score": 54.68603266390919}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t        BitbucketContext context = BitbucketContext.get(build);\n        if (context.notificationsDisabled()) {\n            return;\n        }\n        Revision revision = build.getRevision();\n        if (revision == null) {\n            return;\n        }\n        String revisionHash = revision.getHash();\n        if (revisionHash == null) {\n            return;\n        }\n        String revisionType = revision.getType();\n        String notificationType = revisionType.equals(\"branch\") ? \"Build\" : \"Pull Request\";\n        listener.getLogger().println(\"Sending Bitbucket \" + notificationType + \" notification\");\n        String buildKey = context.getBuildKey(revisionType, revisionHash);\n        BitbucketClient client = context.buildBitbucketClient();\n        context.createStatus(client, build, buildKey, revisionHash);\n    }", "CodeBleu_score": 35.079943388257284}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t        // Initialize Bitbucket context\n        BitbucketContext context = BitbucketContext.get(build);\n        if (context.notificationsDisabled()) {\n            listener.info(\"Notifications are disabled\");\n            return;\n        }\n\n        // Retrieve SCM revision and its hash\n        SCMRevision revision = build.getRevision();\n        String hash = revision.getHash();\n\n        // Determine whether to share the build key between branch and PR\n        boolean shareBuildKey = context.getTraits().anyMatch(t -> t instanceof BitbucketSCMTriggerTrait.PullRequestTrigger);\n\n        // Log the notification type\n        listener.info(\"Notifications are enabled\");\n\n        // Construct the build key\n        String buildKey = context.getBuildKey(revision, hash, shareBuildKey);\n\n        // Initialize the Bitbucket client\n        BitbucketClient client = context.buildBitbucketClient(listener);\n\n        // Create and send the build status notification\n        BuildStatus buildStatus = context.createStatus(build, buildKey, hash);\n        client.createBuildStatus(buildStatus);\n    }", "CodeBleu_score": 31.541740061256064}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t        // Initialize the Bitbucket context and check if notifications are disabled\n        BitbucketContext context = new BitbucketContext(source, build, listener);\n        if (context.notificationsDisabled()) {\n            return;\n        }\n\n        // Retrieve the SCM revision and its hash\n        SCMRevision revision = build.getRevision();\n        String hash = revision.getHash();\n\n        // Determine whether to share the build key between branch and PR\n        boolean shareBuildKey = source.getShareBuildKey();\n\n        // Log the notification type\n        listener.getLogger().println(\"Sending Bitbucket notifications for revision: \" + revision);\n\n        // Construct the build key\n        String buildKey = context.getBuildKey(shareBuildKey, hash);\n\n        // Initialize the Bitbucket client\n        BitbucketClient client = context.buildBitbucketClient();\n\n        // Create and send the build status notification\n        context.createStatus(client, buildKey, hash);\n    }", "CodeBleu_score": 26.09515259583705}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String key = build.getFullName();\n    if (shareBuildKeyBetweenBranchAndPr) {\n        key = getParent(build).getFullName() + \"/\" + branch;\n    }\n    return key;\n}", "CodeBleu_score": 35.77587094353824}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    if (shareBuildKeyBetweenBranchAndPr) {\n        return getParent(build).getFullName() + \"/\" + branch;\n    }\n    return build.getFullName();\n}", "CodeBleu_score": 23.740272310269418}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    if (shareBuildKeyBetweenBranchAndPr) {\n        return getFolderName(build) + \"_\" + branch;\n    }\n    return getFullName(build);\n}", "CodeBleu_score": 18.015987504045807}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        serverUrl = \"https://bitbucket.org\";\n        log.warn(\"BitbucketSCMNavigator.serverUrl is null, defaulting to 'https://bitbucket.org'\");\n    }\n    if (traits == null) {\n        traits = new BitbucketSCMNavigatorTraits(defaultIfBlank(serverUrl, \"https://bitbucket.org\"), \"bitbucket.org\");\n    }\n    return this;\n}", "CodeBleu_score": 13.15184431227523}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        serverUrl = BitbucketSCMNavigator.DEFAULT_SERVER_URL;\n        log.warn(\"BitbucketSCMNavigator.serverUrl is null, using default value: {}\", serverUrl);\n    }\n    if (traits == null) {\n        traits = new BitbucketSCMNavigator.Traits();\n        log.warn(\"BitbucketSCMNavigator.traits is null, reconstructing legacy traits\");\n    }\n    return this;\n}", "CodeBleu_score": 14.490516718674145}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        serverUrl = \"https://bitbucket.org\";\n        log.warn(\"BitbucketSCMNavigator.serverUrl is null, using default: \" + serverUrl);\n    }\n    if (traits == null) {\n        traits = new ArrayList<>();\n        traits.add(new BitbucketSCMNavigatorTrait());\n        log.warn(\"BitbucketSCMNavigator.traits is null, using default: \" + traits);\n    }\n    return this;\n}", "CodeBleu_score": 14.305427540046377}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\t    BitbucketRepository repository = getBitbucketRepository(name);\n    if (repository != null) {\n        getLogger().info(format(\"Bitbucket repository '%s' %s\", getFullName(repository), isMatch ? \"proposed\" : \"ignored\"));\n        if (isMatch) {\n            count++;\n        }\n    }\n}", "CodeBleu_score": 45.539100591137725}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t    try {\n        BitbucketRepository repository = getBitbucketRepository(name);\n        if (isMatch) {\n            getLogger().info(\"Proposed repository: {}\", repository.getFullName());\n            proposedCount.incrementAndGet();\n        } else {\n            getLogger().info(\"Ignored repository: {}\", repository.getFullName());\n            ignoredCount.incrementAndGet();\n        }\n    } catch (IOException e) {\n        getLogger().error(\"Failed to record repository match: {}\", format(e));\n    }\n}", "CodeBleu_score": 48.005474246911874}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t    if (isMatch) {\n        getLogger().info(\"Proposed repository: {}\", getFullName(name));\n        count.incrementAndGet();\n    } else {\n        getLogger().info(\"Ignored repository: {}\", getFullName(name));\n    }\n}", "CodeBleu_score": 34.10465318973357}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t\n        List<RefSpec> refSpecs = new ArrayList<>();\n        List<String> branches = new ArrayList<>();\n        List<String> hashes = new ArrayList<>();\n\n        if (rev instanceof BranchRevision) {\n            branches.add(((BranchRevision) rev).getName());\n        } else if (rev instanceof HashRevision) {\n            hashes.add(((HashRevision) rev).getName());\n        } else if (rev instanceof CombinedRevision) {\n            branches.addAll(((CombinedRevision) rev).getBranches());\n            hashes.addAll(((CombinedRevision) rev).getHashes());\n        } else if (rev instanceof MultibranchRevision) {\n            branches.addAll(((MultibranchRevision) rev).getBranches());\n            hashes.addAll(((MultibranchRevision) rev).getHashes());\n        } else if (rev instanceof MultipleRevisions) {\n            branches.addAll(((MultipleRevisions) rev).getBranches());\n            hashes.addAll(((MultipleRevisions) rev).getHashes());\n        } else if (rev instanceof MultipleRevisions) {\n            branches.addAll(((MultipleRevisions) rev).getBranches());\n            hashes.addAll(((MultipleRevisions) rev).getHashes());\n        } else if (rev instanceof MultipleRevisions) {\n            branches.addAll(((MultipleRevisions) rev).getBranches());\n            hashes.addAll(((MultipleRevisions) rev).getHashes());\n        } else if (rev instanceof MultipleRevisions) {\n            branches.addAll(((MultipleRevisions) rev).getBranches());\n            hashes.addAll(((MultipleRevisions) rev).getHashes());\n        } else if (rev instanceof MultipleRevisions) {\n            branches.addAll(((MultipleRevisions) rev).getBranches());\n            hashes.addAll(((MultipleRevisions) rev).getHashes());\n        } else if (rev instanceof MultipleRevisions) {\n            branches.addAll(((MultipleRevisions) rev).get", "CodeBleu_score": 19.40237823093353}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t    List<RefSpec> refSpecs = new ArrayList<>();\n    List<String> missingBranches = new ArrayList<>();\n    List<String> missingHashes = new ArrayList<>();\n\n    if (rev instanceof Branch) {\n        Branch branch = (Branch) rev;\n        if (branch.getName() == null) {\n            return rev;\n        }\n        if (!branch.getName().startsWith(\"refs/heads/\")) {\n            listener.getLogger().println(\"Branch name does not start with 'refs/heads/'\");\n            return rev;\n        }\n        if (!branch.getName().contains(\"/\")) {\n            listener.getLogger().println(\"Branch name does not contain a slash\");\n            return rev;\n        }\n        String branchName = branch.getName().substring(11);\n        if (branchName.contains(\"/\")) {\n            listener.getLogger().println(\"Branch name contains a slash\");\n            return rev;\n        }\n        if (branchName.contains(\" \")) {\n            listener.getLogger().println(\"Branch name contains a space\");\n            return rev;\n        }\n        if (branchName.contains(\"", "CodeBleu_score": 30.321652223364858}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t\n        // Get the branch name\n        String branchName = getBranch(rev)\n        if (branchName == null) {\n            return rev\n        }\n\n        // Get the commit hash\n        String commitHash = getHash(rev)\n        if (commitHash == null) {\n            return rev\n        }\n\n        // Check if the commit exists locally\n        if (commitExists(git, commitHash)) {\n            return rev\n        }\n\n        // Fetch the commit from the remote repository\n        fetchCommit(scm, build, git, listener, branchName, commitHash)\n\n        // Return the given revision\n        return rev\n    }", "CodeBleu_score": 19.91546673913398}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, BitbucketHref> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue());\n    }\n    return result;\n}", "CodeBleu_score": 61.62821307008585}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t    Map<String, BitbucketHref> links = getLinks();\n    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, BitbucketHref> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue().getFirst());\n    }\n    return result;\n}", "CodeBleu_score": 63.3786896935476}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t    Map<String, BitbucketHref> links = getLinks();\n    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, BitbucketHref> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue().getFirst());\n    }\n    return result;\n}", "CodeBleu_score": 63.3786896935476}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t  const selectedResourceStates = await this.getSelectedResourceStates(resourceStates);\n  if (!selectedResourceStates.length) {\n    return;\n  }\n\n  const resourcesByRepository = this.groupResourcesByRepository(selectedResourceStates);\n  for (const repository of Object.keys(resourcesByRepository)) {\n    const resources = resourcesByRepository[repository];\n    const filePaths = resources.map((resource) => resource.filePath);\n    try {\n      await this.addFilesToRepository(repository, filePaths);\n    } catch (error) {\n      this.logError(error);\n      this.showErrorMessage(error);\n    }\n  }\n}", "CodeBleu_score": 48.34808147723053}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t    if (resourceStates.length === 0) {\n        return;\n    }\n\n    const resources = resourceStates.map(state => state.resource);\n    const resourceUris = resources.map(resource => resource.uri);\n    const repositories = await this.getRepositories(resourceUris);\n\n    for (const repository of repositories) {\n        const repositoryResources = resources.filter(resource => resource.uri.scheme === repository.scheme);\n        const repositoryResourceUris = repositoryResources.map(resource => resource.uri);\n        const repositoryResourcePaths = repositoryResourceUris.map(uri => uri.fsPath);\n        const repositoryResourceStates = resourceStates.filter(state => state.resource.uri.scheme === repository.scheme);\n\n        try {\n            await repository.add(repositoryResourcePaths);\n        } catch (error) {\n            this.log(error);\n            await this.showErrorMessage(error);\n        }\n    }\n}", "CodeBleu_score": 49.93725754599927}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t    // Retrieve selected resource states\n    const selectedResourceStates = resourceStates.filter(resourceState => resourceState.isSelected);\n    if (selectedResourceStates.length === 0) {\n        return;\n    }\n\n    // Map resource states to URIs\n    const resourceUris = selectedResourceStates.map(resourceState => resourceState.uri);\n\n    // Process resources by repository\n    const repositories = await this.getRepositories(resourceUris);\n    for (const repository of repositories) {\n        // Convert resource URIs to file paths\n        const filePaths = resourceUris.map(uri => this.getFilePath(uri));\n\n        // Add files to repository\n        try {\n            await repository.addFiles(filePaths);\n        } catch (error) {\n            // Log error\n            console.error(error);\n\n            // Show error message\n            await vscode.window.showErrorMessage(`Failed to add files to repository: ${error.message}`);\n        }\n    }\n}", "CodeBleu_score": 52.438752539651915}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\t    // Check if the resource states are empty or if the first resource URI is not an instance of Uri\n    if (this.resourceStates.length === 0 || !(this.resourceStates[0] instanceof Uri)) {\n        // Attempt to get a single SCM resource\n        const scmResource = await this.getSingleScmResource();\n        // Update the resource states with the SCM resource\n        this.resourceStates = [scmResource];\n    }\n\n    // Filter and return the resource states that are instances of Resource\n    return this.resourceStates.filter(resource => resource instanceof Resource);\n}", "CodeBleu_score": 31.950307851005398}, {"code": "protected async getResourceStates{\n\t    if (this.resourceStates.length === 0 || this.resourceStates[0] instanceof Uri === false) {\n        const scmResource = await this.getSingleScmResource();\n        if (scmResource) {\n            this.resourceStates = [scmResource];\n        }\n    }\n    return this.resourceStates.filter(resource => resource instanceof Resource);\n}", "CodeBleu_score": 34.02736375602956}, {"code": "protected async getResourceStates{\n\t  if (this.resourceStates.length === 0 || !(this.resourceStates[0] instanceof Uri)) {\n    this.resourceStates = await this.getSingleResource();\n  }\n\n  return this.resourceStates.filter(resource => resource instanceof Resource);\n}", "CodeBleu_score": 19.24362873716044}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    const sourceControlManager = workspace.getSCMProvider(uri);\n    if (!sourceControlManager) {\n      return undefined;\n    }\n    const repository = sourceControlManager.getRepository(uri);\n    if (!repository) {\n      return undefined;\n    }\n    return repository.getResourceFromFile(uri);\n  }", "CodeBleu_score": 34.34061095825386}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    if (!uri) {\n      uri = window.activeTextEditor?.document.uri;\n    }\n    if (!uri) {\n      return undefined;\n    }\n\n    if (uri.scheme === 'svn') {\n      uri = Uri.file(uri.path);\n    }\n\n    if (uri.scheme !== 'file') {\n      return undefined;\n    }\n\n    const sourceControlManager = workspace.getSCMProvider(uri);\n    if (!sourceControlManager) {\n      return undefined;\n    }\n\n    const repository = sourceControlManager.getRepository(uri);\n    if (!repository) {\n      return undefined;\n    }\n\n    return repository.getResourceFromFile(uri);\n  }", "CodeBleu_score": 52.78489922026775}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    if (uri) {\n      if (uri.scheme === 'svn') {\n        uri = Uri.file(fromSvnUri(uri));\n      }\n    } else {\n      const editor = window.activeTextEditor;\n      if (!editor) {\n        return undefined;\n      }\n      uri = editor.document.uri;\n    }\n    const sourceControlManager = workspace.getSCMProvider(uri);\n    if (!sourceControlManager) {\n      return undefined;\n    }\n    const repository = await sourceControlManager.getRepository(uri);\n    if (!repository) {\n      return undefined;\n    }\n    return repository.getResourceFromFile(uri);\n  }", "CodeBleu_score": 51.051643620860446}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\t  const remoteRepository = await this.model.getRemoteRepository(element.remoteRepository);\n  if (remoteRepository) {\n    if (element.isModified) {\n      const oldRevision = element.oldRevision;\n      const newRevision = element.newRevision;\n      const oldPath = element.oldPath;\n      const newPath = element.newPath;\n      const oldUrl = await this.getUrlForRevision(remoteRepository, oldRevision, oldPath);\n      const newUrl = await this.getUrlForRevision(remoteRepository, newRevision, newPath);\n      await this.openDiff(oldUrl, newUrl);\n    } else if (element.isAdded) {\n      const newRevision = element.newRevision;\n      const newPath = element.newPath;\n      const newUrl = await this.getUrlForRevision(remoteRepository, newRevision, newPath);\n      await this.openFileRemote(newUrl);\n    }\n  }\n}", "CodeBleu_score": 35.66440925879847}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t  const remoteRepository = await this.model.getRemoteRepository(element.repository);\n  if (remoteRepository) {\n    if (element.type === 'modified') {\n      const oldPath = element.path;\n      const newPath = element.path + '@' + element.revision.new;\n      const oldRevision = element.revision.old;\n      const newRevision = element.revision.new;\n      await this.openDiff(remoteRepository, oldPath, newPath, oldRevision, newRevision);\n    } else if (element.type === 'added') {\n      const path = element.path;\n      const revision = element.revision.new;\n      await this.openFileRemote(remoteRepository, path, revision);\n    }\n  }\n}", "CodeBleu_score": 38.98014588833036}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t    const remoteRepo = this.model.getRemoteRepository(element.repository);\n    if (element.status === 'modified') {\n      const oldRevision = element.oldRevision;\n      const newRevision = element.newRevision;\n      await this.openDiff(remoteRepo, element.path, oldRevision, newRevision);\n    } else if (element.status === 'added') {\n      const newRevision = element.newRevision;\n      await this.openFileRemote(remoteRepo, element.path, newRevision);\n    }\n  }", "CodeBleu_score": 41.4606922769967}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t  if (clipboard.writeText) {\n    if (what === 'message') {\n      clipboard.writeText(item.commit.message);\n    } else {\n      clipboard.writeText(item.commit.revision);\n    }\n  } else {\n    window.showErrorMessage('Clipboard not supported');\n  }\n}", "CodeBleu_score": 27.031474257128675}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t    if (!clipboard.writeText) {\n        window.showErrorMessage(`Clipboard not supported`)\n        return\n    }\n\n    if (item.commit) {\n        const message = what === \"message\" ? item.commit.message : item.commit.revision\n        clipboard.writeText(message)\n    }\n}", "CodeBleu_score": 35.954303946086476}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t    if (!clipboard.writeText) {\n        window.showErrorMessage(`Copying to clipboard is not supported on this platform.`);\n        return;\n    }\n\n    let text: string;\n    switch (what) {\n        case 'commit':\n            text = item.commit.message;\n            break;\n        case 'revision':\n            text = item.commit.revision;\n            break;\n        default:\n            throw new Error(`Unknown what: ${what}`);\n    }\n\n    clipboard.writeText(text);\n    window.showInformationMessage(`Copied ${what} to clipboard`);\n}", "CodeBleu_score": 32.74355434951711}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    // Load available GiteaConnectionFactory implementations\n    List<GiteaConnectionFactory> factories = new ArrayList<>();\n    ServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class);\n    for (GiteaConnectionFactory factory : loader) {\n        factories.add(factory);\n    }\n\n    // Sort factories by priority and try to open connection\n    factories.sort(Comparator.comparingInt(GiteaConnectionFactory::getPriority));\n    for (GiteaConnectionFactory factory : factories) {\n        if (factory.canOpen()) {\n            return factory.open();\n        }\n    }\n\n    // No suitable factory found\n    throw new IOException(\"No suitable GiteaConnectionFactory found\");\n}", "CodeBleu_score": 32.17303152346195}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    List<GiteaConnectionFactory> factories = ServiceLoader.load(GiteaConnectionFactory.class);\n    GiteaConnectionFactory factory = null;\n    for (GiteaConnectionFactory f : factories) {\n        if (f.canOpen()) {\n            if (factory == null || f.getPriority() > factory.getPriority()) {\n                factory = f;\n            }\n        }\n    }\n    if (factory == null) {\n        throw new IOException(\"No suitable GiteaConnectionFactory found.\");\n    }\n    return factory.open();\n}", "CodeBleu_score": 35.6449406529344}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    List<GiteaConnectionFactory> factories = loadFactories();\n    if (factories.isEmpty()) {\n        throw new IOException(\"No GiteaConnectionFactory implementations found.\");\n    }\n\n    factories.sort((f1, f2) -> Integer.compare(f2.getPriority(), f1.getPriority()));\n    for (GiteaConnectionFactory factory : factories) {\n        if (factory.canOpen()) {\n            return factory.open();\n        }\n    }\n\n    throw new IOException(\"No suitable GiteaConnectionFactory implementations found.\");\n}", "CodeBleu_score": 22.386640501197537}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\t    Jenkins jenkins = Jenkins.getInstanceOrNull();\n    ClassLoader classLoader = jenkins != null ? jenkins.getPluginManager().getClassLoader() : getClass().getClassLoader();\n    return setClassLoader(classLoader);\n}", "CodeBleu_score": 53.07243197346673}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t    def instance = getInstanceOrNull()\n    if (instance != null) {\n        def pluginManager = instance.getPluginManager()\n        if (pluginManager != null) {\n            def classLoader = pluginManager.getClassLoader()\n            if (classLoader != null) {\n                getClass().setClassLoader(classLoader)\n            }\n        }\n    }\n    return this\n}", "CodeBleu_score": 32.77917051916117}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t    def jenkins = Jenkins.getInstanceOrNull()\n    def classLoader = jenkins ? jenkins.getPluginManager().getClassLoader() : getClass().getClassLoader()\n    setClassLoader(classLoader)\n    return this\n}", "CodeBleu_score": 49.187094329542596}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = trimToNull(displayName) ?: normalizeServerUrl(serverUrl)\n    this.serverUrl = normalizeServerUrl(serverUrl)\n    this.manageHooks = manageHooks && !isBlank(credentialsId)\n    this.credentialsId = manageHooks ? credentialsId : null\n    this.aliasUrl = trimToNull(aliasUrl) ?: normalizeServerUrl(serverUrl)\n}", "CodeBleu_score": 45.27696264908654}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = displayName != null ? displayName : normalizeServerUrl(serverUrl)\n    this.serverUrl = normalizeServerUrl(serverUrl)\n    this.manageHooks = manageHooks || credentialsId != null\n    this.credentialsId = credentialsId\n    this.aliasUrl = aliasUrl != null ? normalizeServerUrl(trimToNull(aliasUrl)) : null\n}", "CodeBleu_score": 36.67625767082964}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = displayName == null ? serverUrl : displayName\n    this.serverUrl = normalizeServerUrl(serverUrl)\n    this.manageHooks = manageHooks || credentialsId != null\n    this.credentialsId = credentialsId\n    this.aliasUrl = aliasUrl == null ? null : trimToNull(normalizeServerUrl(aliasUrl))\n}", "CodeBleu_score": 36.210280323265025}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    ListBoxModel items = new ListBoxModel();\n    if (checkPermission()) {\n        serverUrl = normalizeServerUrl(serverUrl);\n        items.includeMatchingAs(get(), matcher(serverUrl), build(serverUrl));\n    }\n    return items;\n}", "CodeBleu_score": 26.36562739231395}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    ListBoxModel ret = new ListBoxModel();\n    if (checkPermission(serverUrl)) {\n        String normalizedServerUrl = normalizeServerUrl(serverUrl);\n        ret.includeMatchingAs(get(), matcher(normalizedServerUrl), build(normalizedServerUrl));\n    }\n    return ret;\n}", "CodeBleu_score": 29.149199968496}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    ListBoxModel items = new ListBoxModel();\n    if (checkPermission(serverUrl)) {\n        serverUrl = normalizeServerUrl(serverUrl);\n        if (includeMatchingAs(serverUrl, items)) {\n            return items;\n        }\n    }\n    return items;\n}", "CodeBleu_score": 27.160705647787015}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        String userInfo = uri.getUserInfo();\n        String host = uri.getHost();\n        int port = uri.getPort();\n        String path = uri.getPath();\n        String query = uri.getQuery();\n        String fragment = uri.getFragment();\n\n        // Remove default ports\n        if (port == -1) {\n            port = -1;\n        } else if (\"http\".equalsIgnoreCase(scheme) && port == 80) {\n            port = -1;\n        } else if (\"https\".equalsIgnoreCase(scheme) && port == 443) {\n            port = -1;\n        }\n\n        // Build the normalized URL\n        StringBuilder sb = new StringBuilder();\n        sb.append(scheme).append(\"://\");\n        if (userInfo != null) {\n            sb.append(userInfo).append(\"@\");\n        }\n        sb.append(host);\n        if (port != -1) {\n            sb.append(\":\").append(port);\n        }\n        if (path != null) {\n            sb.append(path);\n        }\n        if (query != null) {\n            sb.append(\"?\").append(query);\n        }\n        if (fragment != null) {\n            sb.append(\"#\").append(fragment);\n        }\n\n        // Remove any trailing slash\n        String normalizedUrl = sb.toString();\n        if (normalizedUrl.endsWith(\"/\")) {\n            normalizedUrl = normalizedUrl.substring(0, normalizedUrl.length() - 1);\n        }\n\n        return normalizedUrl;\n    } catch (URISyntaxException e) {\n        // Ignore exception\n    }\n    return null;\n}", "CodeBleu_score": 53.96865801179207}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        if (scheme == null) {\n            scheme = \"http\";\n        }\n        String host = uri.getHost();\n        if (host == null) {\n            return null;\n        }\n        int port = uri.getPort();\n        if (port == -1) {\n            if (\"http\".equals(scheme)) {\n                port = 80;\n            } else if (\"https\".equals(scheme)) {\n                port = 443;\n            }\n        }\n        String path = uri.getPath();\n        if (path == null) {\n            path = \"\";\n        }\n        if (path.endsWith(\"/\")) {\n            path = path.substring(0, path.length() - 1);\n        }\n        String query = uri.getQuery();\n        if (query == null) {\n            query = \"\";\n        }\n        String fragment = uri.getFragment();\n        if (fragment == null) {\n            fragment = \"\";\n        }\n        String userInfo = uri.getUserInfo();\n        if (userInfo == null) {\n            userInfo = \"\";\n        }\n        StringBuilder sb = new StringBuilder();\n        sb.append(scheme.toLowerCase());\n        sb.append(\"://\");\n        sb.append(userInfo);\n        sb.append(host.toLowerCase());\n        if (port != -1) {\n            sb.append(\":\");\n            sb.append(port);\n        }\n        sb.append(path);\n        if (!query.isEmpty()) {\n            sb.append(\"?\");\n            sb.append(query);\n        }\n        if (!fragment.isEmpty()) {\n            sb.append(\"#\");\n            sb.append(fragment);\n        }\n        return sb.toString();\n    } catch (URISyntaxException e) {\n        return null;\n    }\n}", "CodeBleu_score": 42.731821840895364}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        String userInfo = uri.getUserInfo();\n        String host = uri.getHost();\n        int port = uri.getPort();\n        String path = uri.getPath();\n        String query = uri.getQuery();\n        String fragment = uri.getFragment();\n\n        if (scheme == null) {\n            scheme = \"http\";\n        }\n\n        if (userInfo == null) {\n            userInfo = \"\";\n        }\n\n        if (host == null) {\n            host = \"\";\n        }\n\n        if (port == -1) {\n            if (scheme.equals(\"http\")) {\n                port = 80;\n            } else if (scheme.equals(\"https\")) {\n                port = 443;\n            }\n        }\n\n        if (path == null) {\n            path = \"\";\n        }\n\n        if (query == null) {\n            query = \"\";\n        }\n\n        if (fragment == null) {\n            fragment = \"\";\n        }\n\n        StringBuilder sb = new StringBuilder();\n        sb.append(scheme.toLowerCase());\n        sb.append(\"://\");\n        sb.append(userInfo);\n        sb.append(\"@\");\n        sb.append(host.toLowerCase());\n\n        if (port != -1) {\n            sb.append(\":\");\n            sb.append(port);\n        }\n\n        sb.append(path);\n\n        if (!query.isEmpty()) {\n            sb.append(\"?\");\n            sb.append(query);\n        }\n\n        if (!fragment.isEmpty()) {\n            sb.append(\"#\");\n            sb.append(fragment);\n        }\n\n        String normalizedUrl = sb.toString();\n\n        // Remove trailing slash\n        if (normalizedUrl.endsWith(\"/\")) {\n            normalizedUrl = normalizedUrl.substring(0, normalizedUrl.length() - 1);\n        }\n\n        return normalizedUrl;\n    } catch (URISyntaxException e) {\n        // Ignore exception\n    }\n\n    return \"\";\n}", "CodeBleu_score": 42.807889949027874}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        String displayName = server.getDisplayName();\n        if (displayName.isBlank()) {\n            items.add(server.getServerUrl());\n        } else {\n            items.add(displayName, server.getServerUrl());\n        }\n    }\n    return items;\n}", "CodeBleu_score": 48.1056311687358}, {"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel items = new ListBoxModel();\n    List<GiteaServer> servers = getServers();\n    for (GiteaServer server : servers) {\n        String displayName = server.getDisplayName();\n        if (displayName.isBlank()) {\n            items.add(server.getServerUrl());\n        } else {\n            items.add(server.getServerUrl(), displayName);\n        }\n    }\n    return items;\n}", "CodeBleu_score": 41.962645451443095}, {"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        String displayName = server.getDisplayName();\n        if (displayName.isBlank()) {\n            items.add(server.getServerUrl());\n        } else {\n            items.add(displayName, server.getServerUrl());\n        }\n    }\n    return items;\n}", "CodeBleu_score": 48.1056311687358}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    if (servers == null) {\n        return;\n    }\n    if (!checkPermission(Permission.ADMINISTER)) {\n        throw new NotAuthorizedException(Permission.ADMINISTER);\n    }\n    // Remove duplicates and empty URLs\n    servers = servers.stream().map(GiteaServer::getServerUrl).distinct().filter(s -> !s.isBlank()).map(GiteaServer::new).collect(Collectors.toList());\n    this.servers = servers;\n    save();\n}", "CodeBleu_score": 30.33803462554615}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    if (!checkPermission()) {\n        return;\n    }\n    if (servers == null) {\n        servers = new ArrayList<>();\n    }\n    servers = servers.stream().filter(Objects::nonNull).distinct().map(GiteaServer::new).filter(Objects::nonNull).filter(server -> server.getUrl() != null).collect(Collectors.toList());\n    this.servers = servers;\n    save();\n}", "CodeBleu_score": 29.758562634769103}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    checkPermission()\n    if (servers == null) {\n        servers = new ArrayList<>()\n    }\n    servers = servers.stream().filter(Objects::nonNull).filter(server -> !server.getUrl().isBlank()).distinct().collect(Collectors.toList())\n    this.servers = servers\n    save()\n}", "CodeBleu_score": 18.410925189974257}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return false;\n    }\n    String normalizedServerUrl = normalizeServerUrl(serverUrl);\n    if (normalizedServerUrl.equals(this.serverUrl)) {\n        this.serverUrl = null;\n        return true;\n    }\n    for (Iterator<GiteaServer> iterator = servers.iterator(); iterator.hasNext(); ) {\n        GiteaServer server = iterator.next();\n        if (server.getUrl().equals(normalizedServerUrl)) {\n            iterator.remove();\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 41.08437040230241}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return false;\n    }\n    serverUrl = normalizeServerUrl(serverUrl);\n    for (Iterator<GiteaServer> iterator = servers.iterator(); iterator.hasNext(); ) {\n        GiteaServer server = iterator.next();\n        if (server.getServerUrl().equals(serverUrl)) {\n            iterator.remove();\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 42.38865202377367}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return false;\n    }\n    serverUrl = normalizeServerUrl(serverUrl);\n    if (getServers().contains(serverUrl)) {\n        getServers().remove(serverUrl);\n        updateServers();\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 23.058269984360173}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element annotatedElement : roundEnv.getElementsAnnotatedWith(annotation)) {\n        ConfigElement configElement = new ConfigElement();\n        configElement.setAttributes(getAttributesFromAnnotation(annotatedElement));\n        configElement.setType(asType(annotatedElement));\n        descriptorElements.add(configElement);\n    }\n}", "CodeBleu_score": 31.798564112809398}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element annotatedElement : roundEnv.getElementsAnnotatedWith(annotation)) {\n        // Retrieve attributes from the annotation\n        Map<String, Object> attributes = getAttributesFromAnnotation(annotatedElement);\n        // Convert the element's type to a string\n        String type = asType(annotatedElement);\n        // Add a new ConfigElement with the attributes and type\n        descriptorElements.add(new ConfigElement(attributes, type));\n    }\n}", "CodeBleu_score": 38.19376517633889}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {\n        // Retrieve attributes from the annotation\n        Map<String, String> attributes = getAttributesFromAnnotation(element);\n        // Convert the element's type to a string\n        String type = asType(element);\n        // Add a new ConfigElement with these attributes and type to the set of descriptor elements\n        descriptorElements.add(new ConfigElement(attributes, type));\n    }\n}", "CodeBleu_score": 38.7548538196799}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    String annotationClassName = annotationClass.getName();\n    annotationClassName = annotationClassName.replace(\"$\", \".\");\n    for (TypeElement annotation : annotations) {\n        String annotationName = annotation.getQualifiedName().toString();\n        if (annotationName.equals(annotationClassName)) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 38.01078500821671}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    String annotationName = annotationClass.getCanonicalName().replace('$', '.');\n    for (TypeElement annotation : annotations) {\n        if (annotation.getQualifiedName().contentEquals(annotationName)) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 40.0058198045933}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    String annotationClassName = annotationClass.getCanonicalName().replace('$', '.');\n    for (TypeElement annotation : annotations) {\n        String annotationName = annotation.getQualifiedName().toString();\n        if (annotationName.equals(annotationClassName)) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 35.54479936336629}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n        \"leave_status\": (\"in\", [\"Open\", \"Approved\", \"Rejected\"]),\n    }\n\n    if for_approval:\n        filters[\"leave_status\"] = \"Open\"\n        if approver_id:\n            filters[\"approver_id\"] = approver_id\n            filters[\"leave_status\"] = \"Pending Approval\"\n        else:\n            filters[\"leave_status\"] = (\"in\", [\"Open\", \"Pending Approval\"])\n\n    # apply workflow state filters\n    if for_approval:\n        filters.update(\n            get_allowed_states_for_workflow(\n                \"Leave Application\",\n                \"leave_status\",\n                \"Leave Status\",\n                filters,\n                user=approver_id,\n            )\n        )\n    else:\n        filters.update(\n            get_allowed_states_for_workflow(\n                \"Leave Application\",\n                \"leave_status\",\n                \"Leave Status\",\n                filters,\n                user=employee,\n            )\n        )\n\n    return filters\n\n", "CodeBleu_score": 26.908910435017663}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"docstatus\": 1,\n        \"employee\": employee,\n        \"leave_approver\": approver_id,\n        \"leave_status\": [\"not in\", [\"Cancelled\", \"Rejected\"]],\n    }\n\n    if for_approval:\n        filters.update({\"leave_status\": \"Open\", \"leave_approver\": approver_id})\n\n    return filters\n\n", "CodeBleu_score": 23.149339966108514}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n        \"status\": \"Open\",\n        \"leave_type\": [\"in\", [\"Regular\", \"Earned\", \"Compensatory\"]],\n        \"from_date\": [\"<=\", frappe.utils.today()],\n        \"to_date\": [\">=\", frappe.utils.today()],\n    }\n\n    if approver_id:\n        filters.update({\"approver_id\": approver_id})\n\n    if for_approval:\n        filters.update({\"status\": [\"in\", [\"Open\", \"Approved\", \"Rejected\"]]})\n\n        if approver_id:\n            filters.update({\"status\": [\"in\", [\"Open\", \"Approved\", \"Rejected\"]]})\n        else:\n            filters.update({\"status\": \"Open\"})\n\n    return filters\n\n", "CodeBleu_score": 26.16142886043794}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    date = details.getdate()\n    leave_details = get_leave_details(employee, date)\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        allocated_leave = leave_details[leave_type]['allocated']\n        balance_leave = leave_details[leave_type]['balance']\n        leave_balance_map[leave_type] = {\n            'allocated': allocated_leave,\n            'balance': balance_leave\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 44.83109456216089}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = details.getdate()\n    leave_details = get_leave_details(employee)\n    leave_balance_map = {}\n    for leave_type, leave_detail in leave_details.items():\n        allocated_leave = leave_detail.get('allocated', 0)\n        taken_leave = leave_detail.get('taken', 0)\n        leave_balance = allocated_leave - taken_leave\n        leave_balance_map[leave_type] = {\n            'allocated': allocated_leave,\n            'balance': leave_balance\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 38.61858871194996}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = datetime.now()\n    leave_details = get_leave_details(employee, current_date)\n    leave_balance_map = {}\n    for leave_type, leave_info in leave_details.items():\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_info[\"allocated\"],\n            \"balance\": leave_info[\"balance\"],\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 40.96084109558444}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if holiday_list is None:\n        return []\n    holidays = get_holidays(holiday_list)\n    if not holidays:\n        return []\n    holidays = [strip_html(holiday) for holiday in holidays]\n    return holidays\n\n", "CodeBleu_score": 14.719297537867629}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays = db.query(\n        \"SELECT * FROM holidays WHERE holiday_list_id IN ({}) AND type != 'weekly off' ORDER BY date\".format(\n            \",\".join([str(h) for h in holiday_list])\n        )\n    )\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html(holiday[\"description\"])\n    return holidays\n\n", "CodeBleu_score": 31.135224281571006}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays = query_holidays(holiday_list)\n    holidays = [strip_html(holiday) for holiday in holidays]\n    holidays = order_by_date(holidays)\n    return holidays\n\n", "CodeBleu_score": 18.12967967645674}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t\n    # Retrieve the settings for sending advance holiday reminders\n    send_advance_holiday_reminders = get_single_value(\"send_advance_holiday_reminders\")\n    if send_advance_holiday_reminders == \"Yes\":\n        # Retrieve the frequency for sending advance holiday reminders\n        send_advance_holiday_reminders_frequency = get_single_value(\"send_advance_holiday_reminders_frequency\")\n        if send_advance_holiday_reminders_frequency == \"Weekly\":\n            # Call a function to send the weekly advance holiday reminders\n            send_reminders_in_advance_weekly()\n\n", "CodeBleu_score": 26.352646268436697}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    if get_single_value(\"send_reminders_in_advance\") == \"true\":\n        if get_single_value(\"reminder_frequency\") == \"Weekly\":\n            send_advance_holiday_reminders()", "CodeBleu_score": 17.89997094004861}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    # Retrieve the relevant settings\n    send_advance_holiday_reminders = get_single_value(\"send_advance_holiday_reminders\")\n    send_advance_holiday_reminders_frequency = get_single_value(\"send_advance_holiday_reminders_frequency\")\n    send_advance_holiday_reminders_weekly_days = get_single_value(\"send_advance_holiday_reminders_weekly_days\")\n    send_advance_holiday_reminders_weekly_time = get_single_value(\"send_advance_holiday_reminders_weekly_time\")\n    send_advance_holiday_reminders_weekly_time_zone = get_single_value(\"send_advance_holiday_reminders_weekly_time_zone\")\n    # Check if the settings are set to send reminders and the frequency is set to \"Weekly\"\n    if send_advance_holiday_reminders and send_advance_holiday_reminders_frequency == \"Weekly\":\n        # Call the function to send the reminders\n        send_reminders_in_advance_weekly(send_advance_holiday_reminders_weekly_days, send_advance_holiday_reminders_weekly_time, send_advance_holiday_reminders_weekly_time_zone)\n\n", "CodeBleu_score": 25.649327136044903}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t\n    self_appraisal_score = 0\n    for self_rating in self.self_ratings:\n        self_appraisal_score += self_rating.rating * self_rating.percentage_weightage\n    self.self_appraisal_score = round(self_appraisal_score, self.precision)\n\n", "CodeBleu_score": 21.02250003729206}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self.self_appraisal_score = 0\n    for entry in self.self_ratings:\n        self.self_appraisal_score += entry.rating * entry.percentage_weightage\n    self.self_appraisal_score = round(self.self_appraisal_score, self.precision)\n\n", "CodeBleu_score": 28.304310586577326}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    total_score = 0\n    for rating in self.self_ratings:\n        score = (rating.rating * 5) * (rating.weightage / 100)\n        total_score += score\n    self.self_appraisal_score = round(total_score, self.precision)\n\n", "CodeBleu_score": 29.57521098793489}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle_doc = frappe.get_cached_doc(\"Appraisal Cycl\", self.appraisal_cycle)\n    if appraisal_cycle_doc.calculate_final_score_using_formula:\n        data = self.get_formula_data()\n        formula = appraisal_cycle_doc.final_score_formula\n        formula = sanitize_expression(formula)\n        final_score = frappe.safe_eval(formula, data, self.as_dict)\n    else:\n        final_score = (\n            self.total_score\n            + self.average_feedback_score\n            + self.self_appraisal_score\n        ) / 3\n        final_score = flt(final_score, self.precision(\"final_score\"))\n    self.final_score = final_score\n\n", "CodeBleu_score": 34.51107211301823}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle_doc = frappe.get_cached_doc(\"Appraisal Cylce\", self.appraisal_cycle)\n    if appraisal_cycle_doc.calculate_final_score_from_formula:\n        data = self.get_data_for_formula()\n        sanitized_formula = sanitize_expression(appraisal_cycle_doc.final_score_formula)\n        self.final_score = flt(frappe.safe_eval(sanitized_formula, data, self.as_dict))\n    else:\n        self.final_score = flt(\n            (self.total_score + self.average_feedback_score + self.self_appraisal_score) / 3,\n            self.precision(\"final_score\"),\n        )\n\n", "CodeBleu_score": 30.93907151047922}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle_doc = frappe.get_cached_doc(\"Appraisal Cylce\", self.appraisal_cycle)\n\n    if appraisal_cycle_doc.calculate_final_score_using_formula:\n        data = self.as_dict()\n        data.update(self.get_feedback_score())\n        data.update(self.get_self_appraisal_score())\n\n        formula = appraisal_cycle_doc.final_score_formula\n        sanitized_formula = sanitize_expression(formula, data)\n        final_score = frappe.safe_eval(sanitized_formula, data, self.precision(\"final_score\"))\n    else:\n        final_score = (\n            flt(self.total_score)\n            + flt(self.average_feedback_score)\n            + flt(self.self_appraisal_score)\n        ) / 3\n\n    self.final_score = final_score\n\n", "CodeBleu_score": 43.73274865877323}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > getdate() and self.status != \"On Leave\":\n        frappe.throw(_(\"Attendance cannot be marked for future date\"))\n    elif self.attendance_date < self.employee_details.date_of_joining:\n        frappe.throw(_(\"Attendance Date cannot be earlier than Employee's Date of Joining\"))\n\n", "CodeBleu_score": 20.293728598008105}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > getdate():\n        if self.status == \"On Leave\" and not frappe.db.exists(\"Leave Application\",\n                                                             {\"employee\": self.employee, \"from_date\": self.attendance_date, \"docstatus\": 1}):\n            frappe.throw(_(\"Attendance cannot be marked for future dates unless the status is 'On Leave' and there is no leave application\"))\n        else:\n            frappe.throw(_(\"Attendance cannot be marked for future dates\"))\n\n    if self.attendance_date < get_value(\"Employee\", self.employee, \"date_of_joining\"):\n        frappe.throw(_(\"Attendance cannot be marked before the employee's date of joining\"))\n\n", "CodeBleu_score": 31.992429664390997}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > getdate() and self.status != \"On Leave\":\n        leave_applications = frappe.get_list(\"Leave Application\", filters={\"employee\": self.employee, \"docstatus\": 1, \"status\": (\"in\", (\"Approved\", \"Bounced\"))})\n        if leave_applications:\n            frappe.throw(_(\"You cannot mark attendance for future dates unless there is a leave application for the same date\"))\n        else:\n            frappe.throw(_(\"You cannot mark attendance for future dates\"))\n    if self.attendance_date < get_value(\"Employee\", self.employee, \"date_of_joining\"):\n        frappe.throw(_(\"Attendance Date cannot be earlier than the Employee's Date of Joining\"))\n\n", "CodeBleu_score": 37.368021424138234}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\t\n    if self.get_duplicate_attendance_record():\n        frappe.throw(_(\"Attendance record for {0} on {1} already exists. <br>Click {2}here{3} to view the existing record.\").format(\n            self.employee,\n            format_date(self.attendance_date),\n            frappe.bold,\n            frappe.utils.get_link_to_form(\"Attendance\", self.name),\n            frappe.bold,\n        ))\n\n", "CodeBleu_score": 32.5778104523531}, {"code": "def validate_duplicate_record(self)\n\t\n    if frappe.db.exists(\"Attendance\", {\"employee\": self.employee, \"attendance_date\": self.attendance_date}):\n        frappe.throw(_(\"Attendance record for employee {0} on {1} already exists. Please edit the existing record or create a new record for a different date.\").format(\n            get_link_to_form(\"Employee\", self.employee), format_date(self.attendance_date)), title=_(\"Duplicate Record\"))\n\n", "CodeBleu_score": 31.497154008934935}, {"code": "def validate_duplicate_record(self)\n\t\n    if frappe.db.exists(\"Attendance\", {\"employee\": self.employee, \"attendance_date\": self.attendance_date, \"name\": (\"not in\", self.name)}):\n        frappe.throw(_(\"Attendance record for {0} on {1} already exists. Please update the existing record or delete the duplicate record.<br><a href='#Form/Attendance/{2}'>View existing record</a>\").format(self.employee_name, format_date(self.attendance_date), self.get_duplicate_attendance_record()))\n", "CodeBleu_score": 31.493506677749867}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t\n    message_details = self.get_message_details()\n    group = frappe.get_doc(\"User Group\", self.group)\n    user_emails = self.get_user_emails_from_group(group)\n    if user_emails:\n        frappe.sendmail(\n            recipients=user_emails,\n            sender=frappe.session.user,\n            subject=_(\"Daily Summary of Replies\"),\n            template=\"daily_summary_of_replies\",\n            args=message_details,\n        )\n        self.status = \"Sent\"\n        self.save()\n\n", "CodeBleu_score": 35.29941425640592}, {"code": "def send_summary(self)\n\t\n    message_details = self.get_message_details()\n    email_ids = self.get_user_emails_from_group()\n    if email_ids:\n        email_args = {\n            \"recipients\": email_ids,\n            \"subject\": \"Daily Summary of Replies\",\n            \"template\": \"daily_summary_email\",\n            \"args\": {\n                \"message_details\": message_details,\n                \"group_name\": self.group_name,\n            },\n        }\n        frappe.sendmail(**email_args)\n        self.db_set(\"status\", \"Sent\")\n\n", "CodeBleu_score": 28.360164816694837}, {"code": "def send_summary(self)\n\t\n    message_details = self.get_message_details()\n    if message_details:\n        group_emails = get_user_emails_from_group(self.group)\n        if group_emails:\n            email_template = frappe.get_doc(\"Email Template\", self.template)\n            email_template.send_email(\n                recipients=group_emails,\n                subject=self.subject,\n                args={\n                    \"message_details\": message_details,\n                    \"group\": self.group,\n                    \"from_user\": self.from_user,\n                },\n            )\n            self.status = \"Sent\"\n            self.save()\n", "CodeBleu_score": 33.249292998882154}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t\n    if frappe.db.exists(\n        \"Interview\",\n        {\n            \"job_applicant\": self.job_applicant,\n            \"interview_round\": self.interview_round,\n            \"docstatus\": 1,\n        },\n    ):\n        frappe.throw(\n            _(\n                \"Job Applicant {0} is not allowed to appear twice for the same interview round.<br>Please check the existing interview record: {1}\"\n            ).format(\n                get_link_to_form(\"Job Applicant\", self.job_applicant),\n                frappe.bold(\n                    frappe.db.get_value(\n                        \"Job Applicant\", self.job_applicant, \"job_title\"\n                    )\n                ),\n            )\n        )\n\n", "CodeBleu_score": 38.670256106369905}, {"code": "def validate_duplicate_interview(self)\n\t\n\n    # Check if there is a duplicate interview record for the same job applicant in the same interview round\n    duplicate_interview = frappe.db.exists(\n        \"Interview\",\n        {\n            \"job_applicant\": self.job_applicant,\n            \"interview_round\": self.interview_round,\n            \"name\": [\"<>\", self.name],\n        },\n    )\n\n    if duplicate_interview:\n        # If a duplicate is found, raise an exception with a message indicating that job applicants are not allowed to appear twice for the same interview round\n        interview_doc = frappe.get_doc(\"Interview\", duplicate_interview)\n        interview_doc_link = get_link_to_form(\"Interview\", interview_doc.name)\n        job_applicant_doc = frappe.get_doc(\"Job Applicant\", self.job_applicant)\n        job_applicant_doc_link = get_link_to_form(\n            \"Job Applicant\", job_applicant_doc.name\n        )\n        frappe.throw(\n            _(\n                \"Job Applicant {0} is already interviewed for this Interview Round. Please check {1} for existing interview record. Also check {2} for job applicant information.\"\n            ).format(\n                job_applicant_doc.name,\n                interview_doc_link,\n                job_applicant_doc_link,\n            )\n        )\n\n", "CodeBleu_score": 40.336032695344684}, {"code": "def validate_duplicate_interview(self)\n\t\n\n    # Check for duplicate interviews\n    existing_interview = frappe.db.exists(\n        \"Interview\",\n        {\n            \"job_applicant\": self.job_applicant,\n            \"interview_round\": self.interview_round,\n            \"docstatus\": 1,\n        },\n    )\n\n    if existing_interview:\n        link_to_form = get_link_to_form(\"Interview\", existing_interview)\n        msg = _(\n            \"Job Applicant {0} is not allowed to appear twice for the same Interview Round. {1}\"\n        ).format(self.job_applicant, link_to_form)\n        frappe.throw(msg, exc=frappe.DuplicateEntryError)\n\n", "CodeBleu_score": 50.94535362229882}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\t\n    total_rating = 0\n    num_assessments = len(self.assessments)\n    for assessment in self.assessments:\n        if assessment.rating:\n            total_rating += assessment.rating\n    if num_assessments > 0:\n        self.average_rating = total_rating / num_assessments\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 31.00364102405102}, {"code": "def calculate_average_rating(self)\n\t\n    total_rating = 0\n    num_assessments = 0\n    for assessment in self.skill_assessments:\n        if assessment.rating is not None:\n            total_rating += assessment.rating\n            num_assessments += 1\n    if num_assessments > 0:\n        self.average_rating = total_rating / num_assessments\n    else:\n        self.average_rating = 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 23.217354312675855}, {"code": "def calculate_average_rating(self)\n\t\n    self.average_rating = 0\n    total_rating = 0\n    num_assessments = 0\n\n    for assessment in self.assessments:\n        if assessment.rating is not None:\n            total_rating += assessment.rating\n            num_assessments += 1\n\n    if num_assessments > 0:\n        self.average_rating = total_rating / num_assessments\n\n", "CodeBleu_score": 24.692073108756393}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    if doc.get(\"interviewers\"):\n        interview.append(\"interview_details\", {\"interviewer\": d.interviewer})\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 43.046679541333205}, {"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    if doc.interviewers:\n        for interviewer in doc.interviewers:\n            interview.append(\"interview_details\", {\"interviewer\": interviewer})\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 45.49047832676296}, {"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.get(\"interview_round\")\n    interview.designation = doc.get(\"designation\")\n    if doc.get(\"interviewers\"):\n        interview.append(\"interview_details\", {\n            \"interviewer\": d.get(\"interviewer\"),\n            \"interviewer_name\": d.get(\"interviewer_name\")\n        })\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 37.79189058586407}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offer = frappe.db.sql(\n        \"\"\"\n        SELECT name FROM `tabJob Offer`\n        WHERE (job_application_start_date BETWEEN %s AND %s)\n        AND designation = %s\n        AND company = %s\n        AND status = 1\n        \"\"\",\n        (from_date, to_date, self.designation, self.company),\n    )\n    return job_offer\n\n", "CodeBleu_score": 32.967290888877734}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    return frappe.db.get_all(\"Job Offer\", filters={\"designation\": self.designation, \"company\": self.company, \"docstatus\": 1, \"creation\": [\"between\", [from_date, to_date]]}, fields=[\"name\"])", "CodeBleu_score": 62.35175280328149}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offers = frappe.get_all(\"Job Offer\", filters={\n                                \"designation\": self.designation, \"company\": self.company, \"docstatus\": 1, \"from_date\": [\">=\", from_date], \"to_date\": [\"<=\", to_date]}, fields=[\"name\"])\n    return job_offers\n\n", "CodeBleu_score": 58.054048942226856}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    from frappe.query_builder.functions import Count\n    from frappe.query_builder import DocType\n\n    filters = {}\n    if company:\n        filters[\"company\"] = company\n    if department:\n        filters[\"department\"] = department\n\n    job_offers = DocType(\"Job Offer\")\n    accepted_offers = DocType(\"Job Offer\")\n\n    query = (\n        frappe.qb.from_(job_offers)\n        .select(Count(\"name\"))\n        .where(job_offers.docstatus == 1)\n        .where(job_offers.creation > frappe.utils.add_days(frappe.utils.now_datetime(), -30))\n    )\n\n    if filters:\n        query = query.where(job_offers.company == filters[\"company\"])\n        if \"department\" in filters:\n            query = query.where(job_offers.department == filters[\"department\"])\n\n    total_offers = query.run(pluck=\"name\")\n\n    accepted_query = (\n        frappe.qb.from_(accepted_offers)\n        .select(Count(\"name\"))\n        .where(accepted_offers.docstatus == 1)\n        .where(accepted_offers.creation > frappe.utils.add_days(frappe.utils.now_datetime(), -30))\n        .where(accepted_offers.accepted == 1)\n    )\n\n    if filters:\n        accepted_query = accepted_query.where(accepted_offers.company == filters[\"company\"])\n        if \"department\" in filters:\n            accepted_query = accepted_query.where(accepted_offers.department == filters[\"department\"])\n\n    accepted_offers_count = accepted_query.run(pluck=\"name\")\n\n    if not total_offers:\n        return 0\n\n    return accepted_offers_count / total_offers * 100", "CodeBleu_score": 35.031876402969864}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    filters = [[\"docstatus\", \"=\", 1]]\n    if company:\n        filters.append([\"company\", \"=\", company])\n    if department:\n        filters.append([\"department\", \"=\", department])\n    total_offers = frappe.db.count(\"Job Offer\", filters=filters)\n    accepted_offers = frappe.db.count(\"Job Offer\", {\"docstatus\": 1, \"status\": \"Accepted\", \"company\": company, \"department\": department})\n    acceptance_rate = accepted_offers / total_offers * 100 if total_offers else 0\n    return acceptance_rate, \"Percent\"\n\n", "CodeBleu_score": 46.17069290648495}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    # Get the total number of job offers\n    total_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1})\n    # Get the number of accepted job offers\n    accepted_offers = frappe.db.count(\n        \"Job Offer\", filters={\"docstatus\": 1, \"status\": \"Accepted\"}\n    )\n    # Calculate the acceptance rate\n    acceptance_rate = accepted_offers / total_offers * 100\n    # Return the acceptance rate along with the field type \"Percent\"\n    return acceptance_rate, \"Percent\"\n\n", "CodeBleu_score": 28.27405215599471}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t    final Result result = this.employerService.register(employerForRegisterDto);\n    if (!result.isSuccess()) {\n        return new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n    }\n    return new ResponseEntity<>(result, HttpStatus.OK);\n}", "CodeBleu_score": 67.94092623620331}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t    final Result result = employerService.register(employerForRegisterDto);\n    if (!result.isSuccess()) {\n        return new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n    }\n    return new ResponseEntity<>(result, HttpStatus.OK);\n}", "CodeBleu_score": 74.12127052828261}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t    final Result result = this.employerService.register(employerForRegisterDto);\n    if (!result.isSuccess()) {\n        return new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n    }\n    return new ResponseEntity<>(result, HttpStatus.OK);\n}", "CodeBleu_score": 67.94092623620331}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t    final Optional<CompanyStaff> companyStaff = companyStaffRepository.findById(companyStaffForUpdateDto.getId());\n    if (companyStaff.isEmpty()) {\n        return notFound(companyStaffForUpdateDto.getId());\n    }\n    if (!arePasswordMatch(companyStaff.get(), companyStaffForUpdateDto.getPassword())) {\n        return run(companyStaffForUpdateDto.getPassword());\n    }\n    companyStaff.get().setFirstName(companyStaffForUpdateDto.getFirstName());\n    companyStaff.get().setLastName(companyStaffForUpdateDto.getLastName());\n    companyStaffRepository.save(companyStaff.get());\n    return updated(companyStaff.get());\n}", "CodeBleu_score": 48.93719772879778}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t    final CompanyStaff companyStaff = findById(companyStaffForUpdateDto.getId());\n    if (companyStaff == null) {\n        return notFound(companyStaffForUpdateDto.getId());\n    }\n    if (!arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaff.getPassword())) {\n        return fail(\"Password is not match\");\n    }\n    companyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n    companyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n    save(companyStaff);\n    return success(companyStaff);\n}", "CodeBleu_score": 35.71718659138228}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t    final CompanyStaff companyStaff = findById(companyStaffForUpdateDto.getId());\n    if (companyStaff == null) {\n        return notFound();\n    }\n    if (!arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaff.getPassword())) {\n        return isSuccess();\n    }\n    if (companyStaffForUpdateDto.getFirstName() != null) {\n        companyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n    }\n    if (companyStaffForUpdateDto.getLastName() != null) {\n        companyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n    }\n    save(companyStaff);\n    return updated();\n}", "CodeBleu_score": 36.092954007225735}]}
