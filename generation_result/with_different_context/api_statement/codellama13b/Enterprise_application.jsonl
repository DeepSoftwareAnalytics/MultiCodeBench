{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t\n    # retrieve attachment IDs from HTTP request arguments\n    attachments = self.getlist('attachment_ids')\n    # verify read access rights and rules for the attachments\n    if not self.check_access_rights('read', attachments):\n        raise AccessError(_('You do not have read access on all the attachments.'))\n    if not self.check_access_rule('read'):\n        raise AccessError(_('You do not have read access on all the attachments.'))\n    # build a zip file from the attachments' content\n    zip_file = self._build_zip_from_attachments(attachments)\n    # prepare HTTP headers for the zip file\n    headers = self._get_zip_headers(zip_file)\n    # return the zip file as an HTTP response\n    return request.make_response(zip_file, headers)\n\n", "CodeBleu_score": 32.13709369729053}, {"code": "def export_zip_documents(self, **args)\n\t\n    attachments = self.env['ir.attachment']\n    attachments_ids = self.env['ir.attachment'].browse(args.get('ids', []))\n    attachments_ids = attachments_ids.filtered(lambda attachment: attachment.check_access_rights('read'))\n    attachments_ids = attachments_ids.filtered(lambda attachment: attachment.check_access_rule('read'))\n    if attachments_ids:\n        zip_content = attachments._build_zip_from_attachments(attachments_ids)\n        headers = attachments._get_zip_headers(zip_content)\n        return request.make_response(zip_content, headers=headers)\n    else:\n        raise werkzeug.exceptions.NotFound()\n\n", "CodeBleu_score": 34.120835924469084}, {"code": "def export_zip_documents(self, **args)\n\t\n    # get the list of attachment IDs from HTTP request arguments\n    attachment_ids = request.args.getlist('ids')\n    # check access rights and rules for the attachments\n    attachments.check_access_rights(self, attachment_ids, 'read')\n    attachments.check_access_rule(self, attachment_ids, 'read')\n    # build a zip file from the attachments' content\n    zip_file = attachments._build_zip_from_attachments(self, attachment_ids)\n    # prepare HTTP headers for the zip file\n    headers = attachments._get_zip_headers(self, zip_file)\n    # return the zip file as an HTTP response\n    return request.make_response(zip_file.read(), headers)\n\n", "CodeBleu_score": 32.37249117000109}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(res_users, self)._prepare_home_portal_values(counters)\n\n    if self.env.user.has_group('account.group_account_invoice'):\n        values['invoice_count'] = self._get_invoices_domain()\n        if self.env.user.has_group('account.group_account_bill'):\n            values['bill_count'] = self._get_invoices_domain()\n        else:\n            values['bill_count'] = self._get_invoices_domain() | self._get_invoices_domain()\n\n    return values\n\n", "CodeBleu_score": 23.398791506290088}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(portal_account, self)._prepare_home_portal_values(counters)\n    if self.env.user.has_group('account.group_account_invoice'):\n        values['invoice_count'] = self._get_invoices_domain().search_count([])\n    if self.env.user.has_group('account.group_account_bill'):\n        values['bill_count'] = self.env['account.move'].search_count([('type', '=', 'out_invoice'), ('state', 'in', ['draft', 'open']), ('invoice_payment_state', '=', 'not_paid')])\n    return values\n\n", "CodeBleu_score": 34.15745053418219}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(AccountDashboard, self)._prepare_home_portal_values(counters)\n    if self.env.user.has_group('account.group_account_invoice'):\n        values['invoice_count'] = self._get_invoices_domain(counters)._count()\n    if self.env.user.has_group('account.group_account_bill'):\n        values['bill_count'] = self.env['account.move'].search_count([('type', '=', 'out_invoice'), ('state', '=', 'posted')])\n    return values\n\n", "CodeBleu_score": 32.26448577080715}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    # Retrieve the invoices for the current user\n    invoices = self._prepare_my_invoices_values(page=page, date_begin=date_begin, date_end=date_end, sortby=sortby, filterby=filterby, **kw)\n    # Update the session history with the latest invoice IDs\n    session.update_history(invoices['invoices'])\n    # Render the invoices page with the prepared values\n    return self.render_template('portal/invoices.html', **invoices)\n\n", "CodeBleu_score": 24.322239790523202}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n\n    values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby)\n    values.update(self.get_portal_layout_values())\n    return request.render(\"portal_my_invoices.html\", values)\n\n", "CodeBleu_score": 27.258964046844625}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_my_invoices_values(page=page, date_begin=date_begin, date_end=date_end, sortby=sortby, filterby=filterby, **kw)\n    self.session.history.add(values['invoices'])\n    return request.render('portal_my.invoices', values)\n\n", "CodeBleu_score": 24.926497267313863}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    invoice_sudo = self.env['account.invoice'].browse(invoice_id).sudo()\n    if not invoice_sudo.exists():\n        raise werkzeug.exceptions.NotFound()\n    if not invoice_sudo.access_my_invoice_detail(access_token):\n        raise werkzeug.exceptions.Forbidden()\n    if download:\n        if report_type == 'pdf':\n            if not invoice_sudo.invoice_status_id.sequence <= invoice_sudo._get_invoice_status_sequence('posted'):\n                raise werkzeug.exceptions.NotFound()\n            legal_documents = invoice_sudo._get_invoice_legal_documents()\n            if not legal_documents:\n                raise werkzeug.exceptions.NotFound()\n            zip_content = invoice_sudo._build_zip_from_attachments(legal_documents)\n            return request.make_response(zip_content, [('Content-Type', 'application/zip'), ('Content-Disposition', 'attachment; filename=\"%s\"' % invoice_sudo._get_invoice_report_filename('pdf'))])\n        if report_type in ['html', 'text']:\n            report = self._show_report(invoice_sudo, report_type, download=True)\n            return request.make_response(report, [('Content-Type', 'text/html')])\n        raise werkzeug.exceptions.NotFound()\n    return request.render('account.invoice_portal_templates', {\n        'invoice': invoice_sudo,\n        'invoice_status': invoice_sudo.invoice_status_id,\n        'invoice_payment_mode': invoice_sudo.invoice_payment_mode_id,\n        'invoice_payment_term': invoice_sudo.invoice_payment_term_id,\n        'invoice_payment_term_code': invoice_sudo.invoice_payment_term_id.code,\n        'invoice_payment_term_delay': invoice_sudo.invoice_payment_term_id.delay,\n        'invoice_payment_term_next_date': invoice_sudo.in", "CodeBleu_score": 32.865525079152015}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    invoice_sudo = self.env['account.invoice'].browse(invoice_id).sudo()\n    if not self._document_check_access(invoice_sudo, access_token, download):\n        return request.redirect('/my')\n    if download:\n        if report_type == 'html':\n            return request.redirect('/my/invoice/%s/report/%s' % (invoice_id, report_type))\n        if report_type in ['pdf', 'text']:\n            return request.redirect('/my/invoice/%s/report/%s/download' % (invoice_id, report_type))\n        if report_type == 'zip':\n            attachments = invoice_sudo._get_invoice_legal_documents()\n            if len(attachments) == 1:\n                return request.redirect('/my/invoice/%s/report/%s/download' % (invoice_id, attachments[0].name))\n            return request.make_response(invoice_sudo._build_zip_from_attachments(attachments),\n                                         headers=self._get_http_headers('%s.zip' % invoice_sudo.number, 'application/zip'),\n                                         cookies={'fileToken': access_token})\n        return request.redirect('/my/invoice/%s/report/%s' % (invoice_id, report_type))\n    return request.render(\"account.invoice_portal_templates\", self._show_report(invoice_sudo, report_type))\n\n", "CodeBleu_score": 36.91267889539562}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    invoice_sudo = self.env['account.invoice'].browse(invoice_id)\n    if not invoice_sudo.exists():\n        raise werkzeug.exceptions.NotFound()\n    if invoice_sudo.type in ('out_refund', 'out_invoice'):\n        self.check_access_rights('read')\n    else:\n        self.check_access_rights('read', invoice_sudo.partner_id)\n\n    if download:\n        if report_type == 'html':\n            raise werkzeug.exceptions.NotFound()\n        if report_type == 'text':\n            report_type = 'pdf'\n        if report_type == 'pdf':\n            legal_documents = invoice_sudo._get_invoice_legal_documents()\n            if len(legal_documents) > 1:\n                return self._build_zip_from_attachments(legal_documents, invoice_sudo)\n            elif len(legal_documents) == 1:\n                return self._build_zip_from_attachments(legal_documents[0], invoice_sudo)\n            else:\n                raise werkzeug.exceptions.NotFound()\n        if report_type == 'xml':\n            return self._get_xml_file(invoice_sudo)\n        else:\n            raise werkzeug.exceptions.NotFound()\n    else:\n        if report_type == 'html':\n            values = self._invoice_get_page_view_values(invoice_sudo)\n            return request.render(\"account.invoice_page\", values)\n        if report_type == 'text':\n            report_type = 'pdf'\n        if report_type == 'pdf':\n            return self._show_report(invoice_sudo, 'account.report_invoice')\n        if report_type == 'xml':\n            return self._get_xml_file(invoice_sudo)\n        else:\n            raise werkzeug.exceptions.NotFound()\n\n", "CodeBleu_score": 32.593187140795834}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t\n    if not self.env.user.has_group('base.group_user'):\n        return\n    if company:\n        domain = [('company_id', '=', company.id)]\n    else:\n        domain = self._check_company_domain()\n    prod_templates = self.env['product.template'].search(domain)\n    prod_templates_sale = prod_templates.filtered(lambda r: r.taxes_id.filtered(lambda t: t.type_tax_use == 'sale'))\n    prod_templates_purchase = prod_templates.filtered(lambda r: r.taxes_id.filtered(lambda t: t.type_tax_use == 'purchase'))\n    if company.account_sale_tax_id:\n        prod_templates_sale.write({'taxes_id': [(4, company.account_sale_tax_id.id)]})\n    if company.account_purchase_tax_id:\n        prod_templates_purchase.write({'taxes_id': [(4, company.account_purchase_tax_id.id)]})\n\n", "CodeBleu_score": 45.26230577149041}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    if company:\n        self.search([('company_id', '=', company.id)])\n    else:\n        self.search([('company_id', '=', False)])\n    # update sale taxes\n    if company and company.account_sale_tax_id:\n        for template in self:\n            if template.taxes_id:\n                template.taxes_id = [(6, 0, [company.account_sale_tax_id.id])]\n            else:\n                template.taxes_id = [(6, 0, [company.account_sale_tax_id.id])]\n    # update purchase taxes\n    if company and company.account_purchase_tax_id:\n        for template in self:\n            if template.supplier_taxes_id:\n                template.supplier_taxes_id = [(6, 0, [company.account_purchase_tax_id.id])]\n            else:\n                template.supplier_taxes_id = [(6, 0, [company.account_purchase_tax_id.id])]\n    return self\n\n", "CodeBleu_score": 29.688838764717847}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    self.ensure_one()\n    if company:\n        domain = [('company_id', '=', company.id)]\n    else:\n        domain = self._get_company_domain()\n    return self.env['product.template'].search(domain)\n\n", "CodeBleu_score": 15.130148914403865}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    # Check if account exists in the database\n    account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id', '=', account_type.id), ('xml_id', '=', xml_id)], limit=1)\n    if account:\n        return account\n\n    # If not found, search for the account within the company's domain\n    accounts = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id', '=', account_type.id)])\n    if accounts:\n        return accounts\n\n    # If still not found, return the first account within the company's domain\n    return self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n\n", "CodeBleu_score": 46.32684127973123}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    # Get the demo account using the xml_id\n    demo_account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id.name', '=', xml_id)], limit=1)\n    if demo_account:\n        return demo_account\n\n    # Get the demo account using the account_type\n    demo_account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id', '=', account_type)], limit=1)\n    if demo_account:\n        return demo_account\n\n    # Get the first account of the company\n    return self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n\n", "CodeBleu_score": 47.61758445475307}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    domain = [('company_id', '=', company.id), ('xml_id', '=', xml_id)]\n    account_id = self.env['ir.model.data']._get_id(account_type, xml_id, raise_if_not_found=False)\n    if account_id:\n        return self.browse(account_id)\n    accounts = self.search(domain, limit=1)\n    if accounts:\n        return accounts[0]\n    accounts = self.search(company.domain, limit=1)\n    if accounts:\n        return accounts[0]\n    return self.search(domain, limit=1)\n\n", "CodeBleu_score": 39.0351850091919}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    accounts = self._read_group(\n        domain=[\n            (\"company_id\", \"in\", self.env.user.company_ids.ids),\n            (\"type\", \"=\", \"current_year_earnings\"),\n        ],\n        fields=[\"company_id\"],\n        lazy=False,\n    )\n    if len(accounts) > 1:\n        raise ValidationError(\n            _(\n                \"There can be only one account with the 'Current Year Earnings' type per company.\"\n            )\n        )\n\n", "CodeBleu_score": 35.570334528896296}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    accounts = self._read_group(\n        domain=[\n            (\"company_id\", \"=\", self.company_id.id),\n            (\"account_type\", \"=\", \"current_year_earnings\"),\n        ],\n        fields=[\"id\", \"company_id\"],\n        lazy=False,\n    )\n    if len(accounts) > 1:\n        raise ValidationError(\n            _(\n                \"There can only be one account of type 'Current Year Earnings' for each company. Please delete the other accounts.\"\n            )\n        )\n\n", "CodeBleu_score": 33.5588805318229}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    if self.account_type == 'Current Year Earnings':\n        accounts = self.env['account.account'].search([('account_type', '=', 'current_year_earnings'), ('company_id', '=', self.company_id.id)])\n        if len(accounts) > 1:\n            raise ValidationError(_(\"There can only be one account with the 'Current Year Earnings' type per company.\"))", "CodeBleu_score": 34.18344710366467}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name:\n        return self._order_accounts_by_frequency_for_partner(domain, order)\n    name = name.split(' ')\n    if len(name) == 1:\n        domain = [('name', operator, name[0])]\n    else:\n        domain = [('name', operator, name[0]), ('name', operator, ' '.join(name[1:]))]\n    if domain:\n        domain = expression.AND([domain, domain])\n    if not domain:\n        domain = []\n    if domain and isinstance(domain, expression.AND):\n        domain = domain.children\n    if domain and isinstance(domain, list):\n        domain = domain[0]\n    if domain and isinstance(domain, expression.AND):\n        domain = domain.children\n    if domain and isinstance(domain, list):\n        domain = domain[0]\n    if domain and isinstance(domain, expression.AND):\n        domain = domain.children\n    if domain and isinstance(domain, list):\n        domain = domain[0]\n    if domain and isinstance(domain, expression.AND):\n        domain = domain.children\n    if domain and isinstance(domain, list):\n        domain = domain[0]\n    if domain and isinstance(domain, expression.AND):\n        domain = domain.children\n    if domain and isinstance(domain, list):\n        domain = domain[0]\n    if domain and isinstance(domain, expression.AND):\n        domain = domain.children\n    if domain and isinstance(domain, list):\n        domain = domain[0]\n    if domain and isinstance(domain, expression.AND):\n        domain = domain.children\n    if domain and isinstance(domain, list):\n        domain = domain[0]\n    if domain and isinstance(domain, expression.AND):\n        domain = domain.children\n    if domain and isinstance(domain, list):\n        domain = domain[0]\n    if domain and isinstance(domain, expression.AND):\n        domain = domain.children\n    if domain and isinstance(domain, list):\n        domain = domain[0]\n    if domain and isinstance(domain, expression.AND):\n        domain", "CodeBleu_score": 34.9817647411544}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name:\n        if self.env.context.get('partner_id'):\n            return self._order_accounts_by_frequency_for_partner(domain, order)\n        return self.search(domain, order=order, limit=limit)\n    name_domain = [('name', operator, name)]\n    if domain:\n        domain = ['&', domain, name_domain]\n    else:\n        domain = name_domain\n    return self.search(domain, order=order, limit=limit)\n\n", "CodeBleu_score": 30.740546086198716}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name:\n        if self.env.context.get('partner_id') and self.env.context.get('search_default_partner_id'):\n            return self._order_accounts_by_frequency_for_partner()\n        else:\n            return super(Account, self).search(domain, order=order, limit=limit)\n    name = name.split(' ')\n    if len(name) == 1:\n        name = name[0]\n        domain = [('name', operator, name)]\n    else:\n        domain = [('name', operator, name[0])]\n        domain += [('name', operator, name[1])]\n    if domain and domain[0][1] == 'ilike' and not domain[0][2].strip():\n        domain = []\n    if domain and domain[0][1] == 'ilike' and domain[0][2] == '*':\n        domain = []\n    if domain and domain[0][1] == 'ilike' and domain[0][2].strip().endswith('*'):\n        domain[0] = (domain[0][0], '=', domain[0][2].strip()[:-1])\n    if domain and domain[0][1] == 'ilike' and domain[0][2].strip().startswith('*'):\n        domain[0] = (domain[0][0], '=', domain[0][2].strip()[1:])\n    if domain and domain[0][1] == 'ilike' and domain[0][2].strip().startswith('*') and domain[0][2].strip().endswith('*'):\n        domain = []\n    return super(Account, self).search(domain, order=order, limit=limit)\n\n", "CodeBleu_score": 41.68245839421283}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t\n    if not self.id:\n        return\n    if not new.id:\n        return\n    if self._name_field in excluded:\n        excluded += ('name',)\n    for field in self._fields.keys():\n        if field in excluded:\n            continue\n        if field == self._name_field:\n            new._get_stored_translations()['name'] = new.name\n            continue\n        if field == 'name':\n            new._get_stored_translations()['name'] = self.name\n            continue\n        if field == 'items':\n            new._get_stored_translations()['items'] = new.items\n            continue\n        if field == 'raw':\n            new._get_stored_translations()['raw'] = new.raw\n            continue\n        if field == 'translations':\n            new._get_stored_translations()['translations'] = new.translations\n            continue\n        new._get_stored_translations()[field] = self._get_stored_translations()[field]\n\n", "CodeBleu_score": 26.71283547343752}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    if not new.id:\n        return\n    new_lang = new.env.lang\n    old_lang = self.env.lang\n    self.env.lang = new_lang\n    try:\n        new_name = new.name\n    finally:\n        self.env.lang = old_lang\n    if new_name:\n        name_field = self._fields['name']\n        name_field.copy(self, new, excluded)\n        if name_field._get_stored_translations(new_name) != name_field._get_stored_translations(self.name):\n            name_field.update_raw(new, new_name)\n    for field in self._fields.values():\n        if field.translate and field.name not in excluded:\n            field.copy(self, new, excluded)\n\n", "CodeBleu_score": 35.775752149632694}, {"code": "def copy_translations(self, new, excluded=())\n\t\n\n    # Copy the translations from the current record to the new one,\n    # excluding the name field\n    for field in self._fields:\n        if field in excluded:\n            continue\n        if field == 'name':\n            continue\n        new[field] = self[field]\n\n    # If the new record's name follows a specific pattern, update the\n    # translations for the name field in the cache to reflect the new\n    # name format\n    if new.name:\n        new._get_stored_translations()\n\n", "CodeBleu_score": 24.75813912445152}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    # Search for account move lines related to sale types\n    sale_types = self.env['account.move.line']._query_analytic_accounts()\n    # Add conditions for the current record's ID and analytic accounts\n    query = self.env['account.move.line'].with_context(active_test=False).search([\n        ('move_id.id', 'in', self.env['account.move'].search([\n            ('type', 'in', sale_types),\n            ('invoice_id', '=', self.id)\n        ])),\n        ('analytic_account_id', 'in', self.analytic_account_ids.ids)\n    ]).read(['move_id'])\n    # Execute the query to get distinct move IDs\n    moves_ids = set(self.env['account.move.line']._read_flat_keys(query, 'move_id'))\n    # Return an action dictionary to display customer invoices in tree and form views with specific context and domain settings\n    return {\n        'name': _('Customer Invoices'),\n        'view_mode': 'tree,form',\n        'res_model': 'account.move',\n        'type': 'ir.actions.act_window',\n        'domain': [('id', 'in', moves_ids), ('type', 'in', sale_types)],\n        'context': {'default_type': 'out_invoice', 'default_partner_id': self.partner_id.id, 'search_default_partner_id': self.partner_id.id},\n        'target': 'current'\n    }\n\n", "CodeBleu_score": 31.918244353168905}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    sale_types = self.env['sale.order.line']._get_sale_types()\n    query = \"\"\"\n        SELECT DISTINCT aml.move_id\n        FROM account_move_line aml\n        WHERE aml.sale_line_id IN %s\n        AND aml.account_id IN %s\n        AND aml.move_id IN %s\n        AND aml.account_id NOT IN %s\n        \"\"\"\n    params = [tuple(sale_types), tuple(self.analytic_account_ids.ids), tuple(self.invoice_ids.ids), tuple(self.analytic_account_ids.ids)]\n    move_ids = self.env.cr.execute(query, params).fetchall()\n    return {\n        'name': _('Invoices'),\n        'domain': [('id', 'in', move_ids)],\n        'context': {\n            'search_default_invoice_id': self.id,\n            'default_invoice_id': self.id,\n            'default_ref': self.name,\n            'default_type': 'out_invoice',\n            'default_partner_id': self.partner_id.id,\n            'default_partner_name': self.partner_id.name,\n            'default_journal_id': self.journal_id.id,\n            'default_currency_id': self.currency_id.id,\n            'default_company_id': self.company_id.id,\n            'default_invoice_origin': self.name,\n            'default_date_invoice': self.date_order,\n            'default_invoice_payment_term_id': self.invoice_payment_term_id.id,\n            'default_invoice_payment_term_code': self.invoice_payment_term_id.code,\n            'default_invoice_payment_term_delay': self.invoice_payment_term_id.delay,\n            'default_invoice_payment_term_type': self.invoice_payment_term_id.type,\n            'default", "CodeBleu_score": 24.371566709991416}, {"code": "def action_view_invoice(self)\n\t\n    # Ensure a single record context\n    self.ensure_one()\n    # Search for account move lines related to sale types\n    sale_types = self.env['account.move.line']._query_analytic_accounts()\n    # Add conditions for the current record's ID and analytic accounts\n    query = self.env['account.move.line'].with_context(active_test=False).search([\n        ('sale_id', '=', self.id),\n        ('account_id.internal_type', 'in', sale_types)\n    ])._select()\n    query.add_where([('account_id.internal_type', 'in', sale_types)])\n    query.add_where([('sale_id', '=', self.id)])\n    # Execute the query to get distinct move IDs\n    move_ids = self.env['account.move.line'].with_context(active_test=False).browse(\n        self.env['account.move.line'].with_context(active_test=False).search(query.where).distinct().mapped('move_id').ids\n    )\n    # Return an action dictionary to display customer invoices in tree and form views with specific context and domain settings\n    return {\n        'name': _('Invoices'),\n        'view_mode': 'tree,form',\n        'res_model': 'account.move',\n        'type': 'ir.actions.act_window',\n        'context': {\n            'search_default_move_id': [('id', 'in', move_ids.ids)],\n            'search_default_move_type': 'in_invoice',\n            'default_move_id': [('id', 'in', move_ids.ids)],\n            'default_move_type': 'in_invoice',\n        },\n        'domain': [('id', 'in', move_ids.ids)],\n    }\n\n", "CodeBleu_score": 30.16135481326563}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    action = self.env.ref('account.action_move_in_in_type').read()[0]\n    action['domain'] = [('id', 'in', self.env['account.move.line'].search(\n        [('account_id.user_type_id.name', '=', 'purchase'),\n         ('account_id.reconcile', '=', False),\n         ('move_id', '!=', False),\n         ('move_id.state', '=', 'posted'),\n         ('move_id.type', '=', 'in_invoice'),\n         ('move_id.invoice_payment_state', '=', 'paid'),\n         ('move_id.invoice_payment_ref', '=', self.name)]).mapped('move_id').ids)]\n    action['context'] = {'default_type': 'in_invoice', 'default_move_type': 'in_invoice', 'default_invoice_payment_ref': self.name, 'default_invoice_payment_state': 'paid'}\n    return action\n\n", "CodeBleu_score": 38.800511244283726}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    action = {\n        'name': _('Vendor Bill'),\n        'domain': [('purchase_id', '=', self.id)],\n        'view_mode': 'tree,form',\n        'res_model': 'account.move.line',\n        'type': 'ir.actions.act_window',\n        'context': {\n            'default_move_type': 'in_invoice',\n            'create': False,\n        },\n    }\n    purchase_types = self.env['account.move.line']._get_purchase_types()\n    move_lines = self.env['account.move.line'].search([\n        ('purchase_id', '=', self.id),\n        ('account_id.internal_type', 'in', purchase_types),\n    ])\n    move_ids = set(move_lines.mapped('move_id.id'))\n    if move_ids:\n        action['domain'] = [('id', 'in', move_ids)]\n    return action\n\n", "CodeBleu_score": 42.27133816501999}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    action = self.env.ref('account.action_move_in_in_type').read([])[0]\n    action['domain'] = [('id', 'in', self.env['account.move.line'].search([('purchase_line_id', 'in', self.mapped('invoice_line_ids').ids)]).mapped('move_id').ids)]\n    action['context'] = dict(self._context, default_move_type='in_invoice')\n    return action\n\n", "CodeBleu_score": 25.83117335597665}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\t\n    if len(values) > 1:\n        values = values.copy()\n        values.pop('attachment_ids', None)\n    with self._check_attachments(values):\n        return super(ir_attachment_url, self).write(values)\n\n", "CodeBleu_score": 32.78907992898625}, {"code": "def write(self, values)\n\t\n    if len(values) > 1:\n        values = values.copy()\n        values.pop('attachment_ids', None)\n    with self._check_attachments(values.get('attachment_ids', [])):\n        return super(ir_attachment, self).write(values)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 33.86927900585484}, {"code": "def write(self, values)\n\t\n    if len(values) > 1:\n        values.pop('attachment_ids', None)\n    with self._check_attachments(values):\n        return super(ir_attachment, self).write(values)\n\n", "CodeBleu_score": 24.637684328448415}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_one()\n    if self.env.context.get(\"skip_bank_account_creation\"):\n        return self.env[\"res.partner.bank\"].sudo()\n    return self.env[\"res.partner.bank\"].search(\n        [(\"acc_number\", \"=\", self.acc_number), (\"partner_id\", \"=\", self.id)],\n        limit=1,\n    ).with_context(skip_bank_account_creation=True).create(\n        {\n            \"partner_id\": self.id,\n            \"acc_number\": self.acc_number,\n            \"bank_id\": self.bank_id.id,\n            \"bank_name\": self.bank_id.name,\n            \"acc_type\": self.acc_type,\n            \"currency_id\": self.currency_id.id,\n            \"company_id\": self.company_id.id,\n        }\n    )\n\n", "CodeBleu_score": 32.59473763712801}, {"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_one()\n    with_context = self.with_context\n    create = self.create\n    search = self.search\n    bank_account = self.env['res.partner.bank'].with_context\n    str2bool = self.env['ir.config_parameter'].sudo().get_param\n    get_param = self.env['ir.config_parameter'].sudo().get_param\n\n    if not str2bool(get_param('l10n_fr_skip_bank_account_creation')):\n        bank_account_id = bank_account(\n            company_id=self.company_id.id,\n            acc_number=self.l10n_fr_iban,\n            partner_id=self.id,\n        ).id\n        if not bank_account_id:\n            bank_account_id = create(\n                {\n                    'acc_number': self.l10n_fr_iban,\n                    'partner_id': self.id,\n                    'company_id': self.company_id.id,\n                }\n            ).id\n        return bank_account.filtered(\n            [bank_account_id],\n            company_id=self.company_id.id,\n        )\n    return bank_account.filtered([], company_id=self.company_id.id)\n\n", "CodeBleu_score": 36.1180474654166}, {"code": "def _find_or_create_bank_account(self)\n\t\n    with self.ensure_one(), self.sudo():\n        if not str2bool(self.env.context.get(\"skip_bank_account_creation\", False)):\n            return self.env[\"res.partner.bank\"].search(\n                [\n                    (\"acc_number\", \"=\", self.acc_number),\n                    (\"partner_id\", \"=\", self.partner_id.id),\n                    (\"company_id\", \"=\", self.company_id.id),\n                ],\n                limit=1,\n            )\n        else:\n            return self.env[\"res.partner.bank\"]\n\n", "CodeBleu_score": 26.636973819532805}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    # We need to make sure we are in a single record context to make sure we have the correct\n    # accounting_id, as this is used to retrieve the correct exchange rate.\n    with self.pool.cursor() as cr:\n        cr.execute(\n            \"SELECT id, accounting_id FROM account_move_line WHERE id = %s\", (self.id,)\n        )\n        res = cr.fetchone()\n        if not res:\n            return {}\n        self.ensure_one()\n        accounting_id = res[1]\n        # Retrieve the accounting amounts and currencies.\n        accounting_amounts, accounting_currencies = self._get_accounting_amounts_and_currencies(\n            cr, accounting_id\n        )\n        # Compute the transaction amount and journal amount.\n        transaction_amount = self._compute_transaction_amount(\n            accounting_amounts, accounting_currencies, currency, balance\n        )\n        journal_amount = self._compute_journal_amount(\n            accounting_amounts, accounting_currencies, currency, balance\n        )\n        # Compute the company amount.\n        company_amount = self._compute_company_amount(\n            accounting_amounts, accounting_currencies, currency, balance\n        )\n        # Adjust the transaction amount and balance if needed.\n        if currency.is_zero(transaction_amount):\n            transaction_amount = balance\n            balance = 0.0\n        return {\n            \"transaction_amount\": transaction_amount,\n            \"journal_amount\": journal_amount,\n            \"company_amount\": company_amount,\n            \"balance\": balance,\n        }\n\n", "CodeBleu_score": 26.836221488748386}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    # Ensure a single record context\n    with self.pool.cursor() as cr:\n        # Retrieve relevant accounting amounts and currencies\n        accounting_amounts, accounting_currencies = self._get_accounting_amounts_and_currencies(cr, currency, balance, amount_currency)\n        # Compute the transaction amount, journal amount, and company amount using various exchange rates\n        transaction_amount, journal_amount, company_amount = self._compute_amounts_using_st_line_rate(accounting_amounts, accounting_currencies, currency, balance, amount_currency)\n\n        # Adjust the transaction amount and balance accordingly\n        if currency.is_zero(transaction_amount):\n            transaction_amount = currency.round(balance)\n        if currency.is_zero(journal_amount):\n            journal_amount = currency.round(balance)\n        if currency.is_zero(company_amount):\n            company_amount = currency.round(balance)\n\n        # Return the amounts in a dictionary\n        return {\n            'transaction_amount': transaction_amount,\n            'journal_amount': journal_amount,\n            'company_amount': company_amount,\n        }\n", "CodeBleu_score": 18.31335979750868}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    with self.pool.cursor() as cr:\n        # Retrieve accounting amounts and currencies\n        accounting_amounts = self._get_accounting_amounts_and_currencies(cr, currency, balance, amount_currency)\n        # Compute the transaction amount and journal amount\n        if currency.is_foreign_currency:\n            transaction_amount = accounting_amounts['amount_currency']\n            journal_amount = accounting_amounts['journal_currency']\n        else:\n            transaction_amount = accounting_amounts['journal_currency']\n            journal_amount = accounting_amounts['amount_currency']\n        # Compute the company amount\n        company_amount = accounting_amounts['company_currency']\n        # Adjust the transaction amount and balance if the currency is a foreign currency\n        if currency.is_foreign_currency:\n            transaction_amount = -transaction_amount\n            balance = -balance\n        # Return the transaction amount, journal amount, and company amount\n        return {\n            'transaction_amount': transaction_amount,\n            'journal_amount': journal_amount,\n            'company_amount': company_amount,\n        }\n\n", "CodeBleu_score": 17.13070516749509}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n\n    for journal in self:\n        journal.outbound_payment_method_line_ids.clear()\n        if journal.type in ['bank', 'cash']:\n            default_payment_methods = journal.default_get(\n                ['outbound_payment_method_ids'])['outbound_payment_method_ids']\n            if default_payment_methods:\n                journal.outbound_payment_method_line_ids = self.env['account.payment.method.line'].create([{\n                    'payment_method_id': payment_method.id,\n                    'sequence': index + 1,\n                } for index, payment_method in enumerate(default_payment_methods)])\n\n", "CodeBleu_score": 40.63577989032505}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    self.outbound_payment_method_line_ids = self.env['account.payment.method.line']\n    if self.type in ('bank', 'cash'):\n        self.outbound_payment_method_line_ids = self.env['account.payment.method.line'].search([\n            ('payment_method_id.payment_type', '=', 'outbound'),\n            ('payment_method_id.journal_id', '=', self.id)\n        ])\n\n", "CodeBleu_score": 26.584132863871634}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    # Clear existing payment method lines\n    self.outbound_payment_method_line_ids.clear()\n\n    # If the journal type is 'bank' or 'cash', retrieve the default outbound payment methods and create new entries for each method\n    if self.type in ['bank', 'cash']:\n        default_outbound_payment_methods = self.env['account.payment.method'].search([('outbound_payment_type', '=', self.type)])\n        for outbound_payment_method in default_outbound_payment_methods:\n            self.outbound_payment_method_line_ids.create({'payment_method_id': outbound_payment_method.id})\n\n", "CodeBleu_score": 22.052122777545495}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t\n    if not self.date:\n        self.date = fields.Date.today()\n    if self.invoice_date and not self.is_sale_document:\n        accounting_date = self._get_accounting_date(self.invoice_date)\n        if accounting_date != self.date:\n            self.date = accounting_date\n            self.invoice_date = fields.Date.today()\n            self.invoice_date_tax_report_id = False\n            self.invoice_date_tax_report_pos_id = False\n            self.invoice_date_tax_report_neg_id = False\n            self.invoice_date_tax_report_zero_id = False\n            self.invoice_date_tax_report_zero_pos_id = False\n            self.invoice_date_tax_report_zero_neg_id = False\n            self.invoice_date_tax_report_zero_zero_id = False\n            self.invoice_date_tax_report_zero_zero_pos_id = False\n            self.invoice_date_tax_report_zero_zero_neg_id = False\n            self.invoice_date_tax_report_zero_zero_zero_id = False\n            self.invoice_date_tax_report_zero_zero_zero_pos_id = False\n            self.invoice_date_tax_report_zero_zero_zero_neg_id = False\n            self.invoice_date_tax_report_zero_zero_zero_zero_id = False\n            self.invoice_date_tax_report_zero_zero_zero_zero_pos_id = False\n            self.invoice_date_tax_report_zero_zero_zero_zero_neg_id = False\n            self.invoice_date_tax_report_zero_zero_zero_zero_zero_id = False\n            self.invoice_date_tax_report_zero_zero_zero_zero_zero_pos_id = False\n            self.invoice_date_tax_report_zero_zero_zero_zero_zero_neg_id = False\n            self.invoice_date_tax", "CodeBleu_score": 21.04242888359865}, {"code": "def _compute_date(self)\n\t\n    if not self.invoice_date:\n        if not self.date:\n            self.date = fields.Date.context_today(self)\n    if self.invoice_date and not self.is_sale_document():\n        date = self._affect_tax_report(self.invoice_date)\n        if date != self.date:\n            self.date = date\n            self.date_assign()\n\n", "CodeBleu_score": 24.12279744720465}, {"code": "def _compute_date(self)\n\t\n    if self.invoice_date:\n        if not self.is_sale_document:\n            accounting_date = self._get_accounting_date(self.invoice_date)\n            if accounting_date != self.date:\n                self.date = accounting_date\n                self._recompute_tax_report()\n                self._recompute_amounts()\n                self._recompute_tax_base_amount()\n                self._recompute_price_subtotal()\n                self._recompute_line_tax_ids()\n                self._recompute_tax_amount()\n                self._recompute_tax_ids()\n                self._recompute_amount_untaxed()\n                self._recompute_amount_tax()\n                self._recompute_amount_total()\n                self._recompute_invoice_taxes()\n                self._recompute_invoice_amounts()\n                self._recompute_invoice_amounts_company()\n                self._recompute_invoice_amounts_all()\n                self._recompute_invoice_amounts_all_company()\n                self._recompute_invoice_tax_amounts()\n                self._recompute_invoice_tax_amounts_company()\n                self._recompute_invoice_tax_amounts_all()\n                self._recompute_invoice_tax_amounts_all_company()\n                self._recompute_invoice_taxes_by_group()\n                self._recompute_invoice_taxes_by_group_company()\n                self._recompute_invoice_taxes_by_group_all()\n                self._recompute_invoice_taxes_by_group_all_company()\n                self._recompute_invoice_tax_amount_by_group()\n                self._recompute_invoice_tax_amount_by_group_company()\n                self._recompute_invoice_tax_amount_by_group_all()\n                self._recompute_invoice_tax_amount_by_group_all_company()\n                self._recompute_invoice_amount_by_group()\n                self._recompute_invoice_amount_by_group", "CodeBleu_score": 15.991660732591928}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\t\n    if self.is_purchase_document and self.partner_id.property_supplier_payment_term:\n        self.invoice_payment_term_id = self.partner_id.property_supplier_payment_term.id\n    elif self.is_sale_document and self.partner_id.property_customer_payment_term:\n        self.invoice_payment_term_id = self.partner_id.property_customer_payment_term.id\n    else:\n        self.invoice_payment_term_id = False\n\n", "CodeBleu_score": 29.229617740352055}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    if self.is_sale_document:\n        if self.partner_id.payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.payment_term_id.id\n        else:\n            self.invoice_payment_term_id = False\n    elif self.is_purchase_document:\n        if self.partner_id.payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.payment_term_id.id\n        else:\n            self.invoice_payment_term_id = False\n    else:\n        self.invoice_payment_term_id = False\n\n", "CodeBleu_score": 30.969638393882693}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    if self.is_sale_document and self.partner_id.payment_term_id:\n        self.invoice_payment_term_id = self.partner_id.payment_term_id.id\n    elif self.is_purchase_document and self.partner_id.payment_term_id:\n        self.invoice_payment_term_id = self.partner_id.payment_term_id.id\n    else:\n        self.invoice_payment_term_id = False\n\n", "CodeBleu_score": 28.507308182703557}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t\n    self.tax_group_id = {}\n    by_country_company = defaultdict(list)\n    for tax in self:\n        by_country_company[(tax.country_id, tax._check_company_domain())].append(tax)\n    for (country, company), taxes in by_country_company.items():\n        tax_group_id = self._search_tax_group_id(country, company)\n        for tax in taxes:\n            self.tax_group_id[tax.id] = tax_group_id\n", "CodeBleu_score": 21.999799209838695}, {"code": " def _compute_tax_group_id(self)\n\t\n    taxes_by_company = defaultdict(list)\n    for tax in self:\n        taxes_by_company[tax.company_id, tax.country_id].append(tax)\n\n    for (company_id, country_id), taxes in taxes_by_company.items():\n        for tax in taxes:\n            tax_group_id = self.search([('country_id', '=', country_id), ('company_id', '=', company_id)], limit=1)\n            if not tax_group_id:\n                tax_group_id = self.search([('country_id', '=', False), ('company_id', '=', company_id)], limit=1)\n            if tax_group_id:\n                tax.tax_group_id = tax_group_id\n\n", "CodeBleu_score": 28.944538953040432}, {"code": " def _compute_tax_group_id(self)\n\t\n    self.tax_group_id = {}\n    by_country_company = {}\n    for tax in self.taxes:\n        by_country_company.setdefault(tax.country_id.id, {}).setdefault(tax.company_id.id, []).append(tax)\n    for country_id, company_ids in by_country_company.items():\n        for company_id, taxes in company_ids.items():\n            # Search for a matching tax group with the same country and company\n            tax_group = self.env['account.tax.group'].search([('country_id', '=', country_id), ('company_id', '=', company_id)], limit=1)\n            if not tax_group:\n                # Search for a tax group without a specified country but within the same company\n                tax_group = self.env['account.tax.group'].search([('country_id', '=', False), ('company_id', '=', company_id)], limit=1)\n            if tax_group:\n                for tax in taxes:\n                    self.tax_group_id[tax.id] = tax_group.id\n", "CodeBleu_score": 39.34477001983087}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # set database\n    self.set_database(db)\n    # prepare data\n    data = {\n        'login': login,\n        'password': password,\n        'db': db,\n        'force': force\n    }\n    # upload module\n    response = requests.post(url + 'base_import_module/login_upload', data=data, files={'module_file': open(module_file, 'rb')})\n    # check response\n    response.raise_for_status()\n    return response.text\n\n", "CodeBleu_score": 34.963732748594204}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # set database in session\n    self.set_database(db)\n    # prepare POST request data\n    data = {'login': login,\n            'password': password,\n            'db': db,\n            'force': force}\n    # read module file\n    with open(module_file, 'r') as f:\n        module_file_data = f.read()\n    # upload module file\n    response = requests.post(url, data=data, files={'module_file': module_file_data})\n    # raise exception if the server does not have the required module installed or is outdated\n    if response.status_code == 400:\n        raise Exception(response.text)\n    # return server response\n    return response.text\n\n", "CodeBleu_score": 39.47163770374655}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set the database in the session\n    self.set_database(url, login, password, db)\n    # Prepare the POST request data\n    data = {\n        'login': login,\n        'password': password,\n        'db': db,\n        'force': force\n    }\n    # Read the module file\n    with open(module_file, 'rb') as f:\n        data['module'] = f.read()\n    # Upload the module to the server\n    r = requests.post(url + 'base_import_module/login_upload', data=data)\n    r.raise_for_status()\n    return r.text\n\n", "CodeBleu_score": 37.78780206811343}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t\n    # retrieve configuration settings for the database name and whether to overwrite existing translations\n    database_name = self.env.context.get('database_name')\n    overwrite = self.env.context.get('overwrite')\n    # create a new database registry and use a cursor to initialize a TranslationImporter\n    registry = odoo.registry(database_name)\n    with registry.cursor() as cr:\n        importer = TranslationImporter(cr, database_name)\n        # load translation files based on the specified configuration and save the translations\n        importer.load_file(self.env.context.get('file_name'), overwrite)\n        # commit the changes\n        cr.commit()\n\n", "CodeBleu_score": 39.59791026677482}, {"code": "def import_translation()\n\t\n    # Get configuration settings\n    database_name = get_database_name()\n    overwrite_existing = get_overwrite_existing()\n\n    # Create a new database registry\n    registry = registry.Registry(database_name)\n\n    # Use a cursor to initialize a TranslationImporter\n    with registry.cursor() as cr:\n        importer = TranslationImporter(cr, overwrite_existing)\n\n        # Load translation files\n        importer.load_file('en_US', 'base', 'en_US', 'base', 'en_US')\n\n        # Save translations\n        importer.save()\n\n", "CodeBleu_score": 25.868837171166557}, {"code": "def import_translation()\n\t\n\n    # Retrieve configuration settings\n    db_name = self.env.context.get('db_name')\n    overwrite = self.env.context.get('overwrite')\n\n    # Create a new database registry\n    registry = odoo.registry(db_name)\n\n    # Use a cursor to initialize a TranslationImporter\n    with registry.cursor() as cr:\n        ti = TranslationImporter(cr, db_name, overwrite)\n\n        # Load translation files\n        ti.load_file('fr_FR', 'account.account_template_translation_data.csv')\n        ti.load_file('fr_FR', 'account.account_translation_data.csv')\n        ti.load_file('fr_FR', 'account.chart_template_translation_data.csv')\n        ti.load_file('fr_FR', 'account.fiscal_position_translation_data.csv')\n        ti.load_file('fr_FR', 'account.fiscal_position_tax_translation_data.csv')\n        ti.load_file('fr_FR', 'account.tax_translation_data.csv')\n        ti.load_file('fr_FR', 'account.tax_group_translation_data.csv')\n        ti.load_file('fr_FR', 'account.tax_template_translation_data.csv')\n        ti.load_file('fr_FR', 'account.tax_type_translation_data.csv')\n        ti.load_file('fr_FR', 'account.tax_type_template_translation_data.csv')\n        ti.load_file('fr_FR', 'account.tax_report_translation_data.csv')\n        ti.load_file('fr_FR', 'account.chart_template_translation_data.csv')\n        ti.load_file('fr_FR', 'account.chart_template_translation_data.csv')\n        ti.load_file('fr_FR', 'account.chart_template_translation_data.csv')\n        ti.load_file('fr_FR', 'account.chart_template_translation_data.csv')\n        ti.", "CodeBleu_score": 34.23599994138464}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\t\n    # Create the new node\n    new_node = Node(name, info, self.depth + 1)\n    # Set the new node's parent to the current node\n    new_node.parent = self\n    # Inherit the parent's attributes if they exist\n    for attr in ['data', 'children', 'parent', 'depth']:\n        if hasattr(self, attr):\n            setattr(new_node, attr, getattr(self, attr))\n    # Append the new node to the children list\n    if new_node not in self.children:\n        self.children.append(new_node)\n    # Sort the children list\n    self.children.sort(key=lambda node: node.name)\n    # Return the new node\n    return new_node\n\n", "CodeBleu_score": 46.19167499469815}, {"code": "def add_child(self, name, info)\n\t\n\n    # Create a new node with the given name and info\n    new_node = Node(name, info)\n\n    # Set the depth of the new node\n    new_node.depth = self.depth + 1\n\n    # Inherit certain attributes from the parent if they exist\n    if hasattr(self, 'parent'):\n        new_node.parent = self.parent\n    if hasattr(self, 'children'):\n        new_node.children = self.children\n    if hasattr(self, 'cousin_names'):\n        new_node.cousin_names = self.cousin_names\n    if hasattr(self, 'sibling_names'):\n        new_node.sibling_names = self.sibling_names\n\n    # Append the new node to the children list if it's not already present\n    if new_node not in self.children:\n        self.children.append(new_node)\n\n    # Sort the children by name\n    self.children.sort(key=lambda x: x.name)\n\n    # Return the new node\n    return new_node\n\n", "CodeBleu_score": 44.93183703146785}, {"code": "def add_child(self, name, info)\n\t\n    # Create a new node\n    child = Node(name, info)\n    # Set the child's depth\n    child.depth = self.depth + 1\n    # Inherit the parent's attributes if they exist\n    for attr in self.attrs:\n        if hasattr(self, attr):\n            setattr(child, attr, getattr(self, attr))\n    # Add the child to the children list if it's not already present\n    if child not in self.children:\n        self.children.append(child)\n    # Sort the children by name\n    self.children.sort(key=lambda x: x.name)\n    # Return the new child\n    return child\n\n", "CodeBleu_score": 48.347027541846174}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\n        \"dates\": dates,\n        \"balances\": [0] * len(dates),\n    }\n    root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n    for entry in gl_entries:\n        if entry.account == account:\n            if entry.debit:\n                result[\"balances\"][entry.date_idx] -= entry.debit\n            elif entry.credit:\n                result[\"balances\"][entry.date_idx] += entry.credit\n    if root_type not in (\"Asset\", \"Expense\"):\n        result[\"balances\"] = [\n            -balance for balance in result[\"balances\"]\n        ]\n    elif root_type == \"Asset\":\n        for i in range(1, len(result[\"balances\"])):\n            result[\"balances\"][i] += result[\"balances\"][i - 1]\n    return result\n\n", "CodeBleu_score": 29.239007022689034}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {}\n    for date in dates:\n        result[date] = 0\n    root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n    for entry in gl_entries:\n        if entry.account == account:\n            result[entry.posting_date] += entry.debit - entry.credit\n    if root_type not in [\"Asset\", \"Expense\"]:\n        for date in dates:\n            result[date] *= -1\n    elif root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n        for date in dates:\n            result[date] = sum(result.values())\n    return result\n\n", "CodeBleu_score": 33.83350956092802}, {"code": "def build_result(account, dates, gl_entries)\n\t\n\n    # initialize results\n    result = {\n        \"dates\": dates,\n        \"balances\": [0 for _ in dates],\n    }\n\n    # determine the root type\n    root_type = account.root_type\n\n    # iterate through the entries\n    for entry in gl_entries:\n        # get the date\n        date = entry.get(\"date\")\n        # get the balance\n        balance = entry.get(\"balance\")\n        # get the posting date\n        posting_date = entry.get(\"posting_date\")\n\n        # if the date is within the specified range\n        if date in dates:\n            # if the root type is not \"Asset\" or \"Expense\"\n            if root_type != \"Asset\" and root_type != \"Expense\":\n                # negate the balance\n                balance = -balance\n\n            # if the date is the same as the posting date\n            if date == posting_date:\n                # add the balance to the result\n                result[\"balances\"][dates.index(date)] += balance\n            else:\n                # add the balance to the result\n                result[\"balances\"][dates.index(date)] += balance / 2\n\n    # if the root type is \"Asset,\" \"Liability,\" or \"Equity\"\n    if root_type == \"Asset\" or root_type == \"Liability\" or root_type == \"Equity\":\n        # iterate through the dates\n        for i in range(len(dates) - 1, -1, -1):\n            # if the date is not the last date\n            if i != len(dates) - 1:\n                # add the balance for the date to the balance for the next date\n                result[\"balances\"][i + 1] += result[\"balances\"][i]\n\n    # return the result\n    return result\n\n", "CodeBleu_score": 24.855108051899702}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.doctype == \"Account\":\n        if self.is_group:\n            return\n        if self.account_type == \"Receivable\" or self.account_type == \"Payable\":\n            if self.get_doc_before_save():\n                if self.get_doc_before_save().account_type != self.account_type:\n                    if frappe.db.get_value(\"General Ledger\", {\"account\": self.name, \"is_cancelled\": 0}):\n                        frappe.msgprint(_(\"Warning: There are existing general ledger entries for the account {0}. If the account type is changed to a non-receivable/payable type, there may be issues in the 'Accounts' report.\").format(self.name), alert=True)\n                        self.add_comment(\"Warning: There are existing general ledger entries for the account {0}. If the account type is changed to a non-receivable/payable type, there may be issues in the 'Accounts' report.\".format(self.name))\n\n", "CodeBleu_score": 29.381508021926027}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    # Get the account type before the save operation\n    doc_before_save = self.get_doc_before_save()\n    account_type_before_save = doc_before_save.account_type\n    # Get the account type after the save operation\n    account_type_after_save = self.account_type\n    # Compare the account type before and after the save operation\n    if (account_type_before_save == \"Receivable\" and account_type_after_save != \"Receivable\") or (account_type_before_save == \"Payable\" and account_type_after_save != \"Payable\"):\n        # Get all general ledger entries for the account\n        gl_entries = frappe.db.get_all(\"GL Entry\", filters={\"account\": self.name}, fields=[\"*\"])\n        # If there are existing general ledger entries for the account\n        if len(gl_entries) > 0:\n            # Generate a warning message indicating potential issues in the \"Accounts\" report\n            frappe.msgprint(\"Warning: Account {0} has existing general ledger entries. Please review the \"Accounts\" report for potential issues.\".format(self.name))\n            # Add a comment to the account record indicating the account type has changed\n            self.add_comment(\"Comment\", \"The account type has changed from {0} to {1}.\".format(account_type_before_save, account_type_after_save))\n\n", "CodeBleu_score": 40.38797806092964}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    # Get the account type before the save operation\n    doc_before_save = self.get_doc_before_save()\n    account_type_before_save = doc_before_save.account_type\n    # Get the account type after the save operation\n    account_type_after_save = self.account_type\n    # Compare the account type before and after the save operation\n    if account_type_before_save in [\"Receivable\", \"Payable\"] and account_type_after_save not in [\"Receivable\", \"Payable\"]:\n        # Get all general ledger entries for the account\n        gl_entries = frappe.db.sql(\"\"\"\n            SELECT name\n            FROM `tabGL Entry`\n            WHERE account = %s\n            \"\"\", self.name, as_dict=1)\n        # If there are existing general ledger entries for the account\n        if gl_entries:\n            # Generate a warning message indicating potential issues in the \"Accounts\" report\n            frappe.msgprint(_(\"Warning: The account type has been changed from Receivable or Payable to a non-receivable/payable type. There are existing general ledger entries for this account. Please review the \"Accounts\" report for potential issues.\"), alert=True, indicator=\"orange\")\n            # Add a comment to the account record\n            self.add_comment(\"Comment\", _(\"The account type has been changed from Receivable or Payable to a non-receivable/payable type. There are existing general ledger entries for this account. Please review the \"Accounts\" report for potential issues.\"))\n\n", "CodeBleu_score": 33.12328932548815}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t\n    # if the account is not a group, validate the currency\n    if not self.is_group:\n        if not self.account_currency:\n            self.account_currency = frappe.db.get_value(\"Company\", self.company, \"default_currency\")\n\n        # if the currency is not the company's default currency, mark it as explicitly specified\n        if self.account_currency != frappe.db.get_value(\"Company\", self.company, \"default_currency\"):\n            self.flags.set_on_update = True\n\n        # if the account currency is different from the ledger entries' currency, raise an error\n        if frappe.db.sql(\"\"\"select name from `tabGL Entry` where account = %s and company = %s\n            and currency != %s and docstatus = 1\"\"\", (self.name, self.company, self.account_currency))[0][0]:\n            frappe.throw(_(\"Currency of account {0} cannot be changed because there are existing ledger entries against this account with a different currency.\").format(self.name))\n\n", "CodeBleu_score": 36.855836373810824}, {"code": "def validate_account_currency(self)\n\t\n\n    if not self.account_currency:\n        self.account_currency = frappe.db.get_value(\n            \"Company\", self.company, \"default_currency\"\n        )\n\n    if self.account_currency != frappe.db.get_value(\n        \"Company\", self.company, \"default_currency\"\n    ):\n        self.flags.account_currency_set_explicitly = True\n\n    if not self.flags.ignore_account_currency_check:\n        if frappe.db.exists(\n            \"GL Entry\",\n            {\n                \"account\": self.name,\n                \"company\": self.company,\n                \"account_currency\": (\"!=\", self.account_currency),\n            },\n        ):\n            frappe.throw(\n                _(\n                    \"Cannot change account currency as General Ledger Entries already exist for this account with a different currency.\"\n                )\n            )\n\n", "CodeBleu_score": 37.22350099049174}, {"code": "def validate_account_currency(self)\n\t\n\n    if not self.get(\"account_currency\"):\n        self.account_currency = frappe.db.get_value(\n            \"Company\", self.company, \"default_currency\"\n        )\n\n    if self.account_currency != frappe.db.get_value(\n        \"Company\", self.company, \"default_currency\"\n    ):\n        self.flags.explicit_currency = True\n\n    if self.name in [\"Sales Account - _TC\", \"Cost of Goods Sold - _TC\"]:\n        self.account_currency = \"INR\"\n\n    if self.name == \"Sales Account - _TC\":\n        self.flags.explicit_currency = True\n\n    if self.name == \"Cost of Goods Sold - _TC\":\n        self.flags.explicit_currency = True\n\n    if self.flags.explicit_currency:\n        for entry in frappe.db.sql(\n            \"\"\"select name, account, debit, credit, debit_in_account_currency, credit_in_account_currency\n            from `tabGL Entry` where account=%s and (debit_in_account_currency != credit_in_account_currency)\"\"\",\n            (self.name,),\n            as_dict=1,\n        ):\n            if entry.debit_in_account_currency != entry.credit_in_account_currency:\n                frappe.throw(\n                    _(\n                        \"Account {0} has existing General Ledger Entries with currency {1} and {2}. Please set the currency for this account to {1} or {2}.\".format(\n                            self.name,\n                            frappe.db.get_value(\n                                \"Currency\",\n                                entry.debit_in_account_currency,\n                                \"currency_name\",\n                            ),\n                            frappe.db.get_value(\n                                \"Currency\",\n                                entry.credit_in_account_currency,\n                                \"currency_name\",\n                            ),\n                        )\n                    )\n                )\n\n", "CodeBleu_score": 30.515612946784664}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key = generate_key(entry, accounting_dimensions)\n        merged_entries.setdefault(key, entry.get('debit', 0) + entry.get('credit', 0))\n        merged_entries[key] = {\n            'debit': entry.get('debit', 0) + merged_entries[key].get('debit', 0),\n            'credit': entry.get('credit', 0) + merged_entries[key].get('credit', 0),\n            'amount_in_account_currency': entry.get('amount_in_account_currency', 0) + merged_entries[key].get('amount_in_account_currency', 0)\n        }\n    return merged_entries\n\n", "CodeBleu_score": 37.187878104995114}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key = generate_key(entry, accounting_dimensions)\n        if key in merged_entries:\n            merged_entries[key].debit += entry.debit\n            merged_entries[key].credit += entry.credit\n            merged_entries[key].debit_amount += entry.debit_amount\n            merged_entries[key].credit_amount += entry.credit_amount\n        else:\n            merged_entries[key] = entry\n    return merged_entries\n\n", "CodeBleu_score": 27.62840794396731}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n\n    # Initialize the dictionary to merge entries\n    merged_entries = {}\n\n    # Iterate through each entry\n    for entry in entries:\n\n        # Generate a unique key for each entry\n        key = generate_key(entry, accounting_dimensions)\n\n        # Set the default values for the key\n        merged_entries.setdefault(key, {\n            \"debit\": 0,\n            \"credit\": 0,\n            \"debit_amount\": 0,\n            \"credit_amount\": 0,\n            \"account_currency\": entry.account.currency\n        })\n\n        # Update the debit, credit, and their respective amounts in account currency\n        if entry.credit:\n            merged_entries[key][\"credit\"] += 1\n            merged_entries[key][\"credit_amount\"] += entry.credit\n        if entry.debit:\n            merged_entries[key][\"debit\"] += 1\n            merged_entries[key][\"debit_amount\"] += entry.debit\n\n    return merged_entries\n\n", "CodeBleu_score": 41.77202305712303}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype in ['Purchase Invoice', 'Purchase Order', 'Purchase Receipt']:\n        supplier_hold_type = 'Supplier'\n    else:\n        supplier_hold_type = 'Customer'\n\n    if self.supplier:\n        supplier = frappe.get_doc('Supplier', self.supplier)\n        if supplier.on_hold:\n            if supplier.hold_type == supplier_hold_type:\n                if supplier.hold_type == 'Supplier':\n                    if getdate(self.posting_date) < getdate(supplier.release_date):\n                        frappe.throw(_('Supplier {0} is on hold till {1}. Please release the supplier before proceeding.').format(self.supplier, supplier.release_date))\n                elif supplier.hold_type == 'Customer':\n                    if getdate(self.posting_date) < getdate(supplier.release_date):\n                        frappe.throw(_('Customer {0} is on hold till {1}. Please release the customer before proceeding.').format(self.supplier, supplier.release_date))\n\n", "CodeBleu_score": 29.082380834930703}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype in [\"Supplier Payment\", \"Purchase Invoice\"]:\n        supplier = frappe.db.get_value(\n            \"Supplier\", {\"name\": self.supplier}, [\"on_hold\", \"hold_type\", \"hold_date\"]\n        )\n        if supplier[0]:\n            if supplier[1] == self.doctype:\n                if supplier[2] > self.posting_date:\n                    frappe.throw(\n                        _(\n                            \"Supplier {0} is on hold until {1}. Please contact the Supplier to release the supplier.\".format(\n                                self.supplier, supplier[2]\n                            )\n                        )\n                    )\n\n", "CodeBleu_score": 20.65494281023809}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype in [\"Purchase Invoice\", \"Purchase Order\", \"Purchase Receipt\", \"Purchase Invoice Advance\"]:\n        supplier_status = frappe.db.get_value(\"Supplier\", self.supplier, \"on_hold\")\n        if supplier_status:\n            hold_type = frappe.db.get_value(\"Supplier\", self.supplier, \"hold_type\")\n            if hold_type == \"Payment\":\n                if self.doctype in [\"Purchase Invoice\", \"Purchase Invoice Advance\"]:\n                    frappe.throw(_(\"Supplier is blocked. Payment cannot be made\"))\n            elif hold_type == \"Invoice\":\n                if self.doctype in [\"Purchase Invoice\", \"Purchase Invoice Advance\"]:\n                    frappe.throw(_(\"Supplier is blocked. Invoice cannot be made\"))\n            elif hold_type == \"All\":\n                frappe.throw(_(\"Supplier is blocked. Transaction cannot be made\"))\n            elif hold_type == \"Date\":\n                release_date = frappe.db.get_value(\"Supplier\", self.supplier, \"release_date\")\n                if release_date and getdate(release_date) > getdate(nowdate()):\n                    frappe.throw(_(\"Supplier is blocked until {0}\").format(formatdate(release_date)))\n\n", "CodeBleu_score": 32.2304720215006}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    references_map = frappe._dict()\n    for repost_doctype in self.get_repost_doctypes():\n        # get the voucher rows from the repost doctype\n        voucher_rows = frappe.db.sql(\n            \"\"\"\n                select parent, parenttype, voucher_type, voucher_no\n                from `tab{0}`\n                where voucher_type=%s and voucher_no=%s\n            \"\"\".format(repost_doctype),\n            (self.doctype, self.name),\n            as_dict=1,\n        )\n\n        for row in voucher_rows:\n            # build a map of parent documents and their voucher rows\n            references_map.setdefault(row.parenttype, []).append(row)\n\n    for parenttype, voucher_rows in references_map.items():\n        for row in voucher_rows:\n            # get the parent document\n            parent_doc = frappe.get_doc(row.parenttype, row.parent)\n\n            # remove the voucher row from the parent document\n            if row.parenttype == \"Repost\":\n                parent_doc.remove(\n                    row.voucher_type,\n                    row.voucher_no,\n                    ignore_permissions=True,\n                    ignore_links=True,\n                )\n            else:\n                parent_doc.remove(\n                    row.voucher_type,\n                    row.voucher_no,\n                    ignore_permissions=True,\n                    ignore_links=True,\n                )\n\n            # save the changes\n            parent_doc.save(ignore_permissions=True)\n\n", "CodeBleu_score": 27.812337354423633}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    references_map = {}\n    for repost_doctype in self.get_repost_doctypes():\n        repost_rows = frappe.db.sql(\n            \"\"\"\n            SELECT parent, parenttype, voucher_type, voucher_no\n            FROM `tab{repost_doctype}`\n            WHERE voucher_type=%s AND voucher_no=%s\n            \"\"\".format(\n                repost_doctype=repost_doctype\n            ),\n            (self.doctype, self.name),\n            as_dict=1,\n        )\n        for row in repost_rows:\n            references_map.setdefault(row.parenttype, []).append(row)\n\n    for parenttype, rows in references_map.items():\n        for row in rows:\n            repost_doc = frappe.get_doc(row.parenttype, row.parent)\n            if row.parenttype == \"Repost\":\n                repost_doc.remove(\n                    {\n                        \"voucher_type\": self.doctype,\n                        \"voucher_no\": self.name,\n                        \"voucher_detail_no\": row.voucher_detail_no,\n                    }\n                )\n            else:\n                repost_doc.get(\"vouchers\").remove(\n                    {\n                        \"voucher_type\": self.doctype,\n                        \"voucher_no\": self.name,\n                        \"voucher_detail_no\": row.voucher_detail_no,\n                    }\n                )\n            repost_doc.flags.ignore_validate = True\n            repost_doc.flags.ignore_links = True\n            repost_doc.save()\n\n", "CodeBleu_score": 28.063788858605616}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    # Identify the relevant repost doctypes\n    repost_doctypes = [\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Journal Entry\",\n        \"Payment Entry\",\n        \"Stock Reconciliation\",\n        \"Stock Ledger Entry\",\n        \"Stock Entry\",\n        \"Stock Reconciliation\",\n        \"Stock Entry\",\n        \"Delivery Note\",\n        \"Sales Order\",\n        \"Purchase Order\",\n        \"Purchase Receipt\",\n        \"Stock Reconciliation\",\n        \"Stock Ledger Entry\",\n        \"Stock Entry\",\n        \"Stock Reconciliation\",\n        \"Stock Entry\",\n        \"Delivery Note\",\n        \"Sales Order\",\n        \"Purchase Order\",\n        \"Purchase Receipt\",\n        \"Stock Reconciliation\",\n        \"Stock Ledger Entry\",\n        \"Stock Entry\",\n        \"Stock Reconciliation\",\n        \"Stock Entry\",\n        \"Delivery Note\",\n        \"Sales Order\",\n        \"Purchase Order\",\n        \"Purchase Receipt\",\n        \"Stock Reconciliation\",\n        \"Stock Ledger Entry\",\n        \"Stock Entry\",\n        \"Stock Reconciliation\",\n        \"Stock Entry\",\n        \"Delivery Note\",\n        \"Sales Order\",\n        \"Purchase Order\",\n        \"Purchase Receipt\",\n        \"Stock Reconciliation\",\n        \"Stock Ledger Entry\",\n        \"Stock Entry\",\n        \"Stock Reconciliation\",\n        \"Stock Entry\",\n        \"Delivery Note\",\n        \"Sales Order\",\n        \"Purchase Order\",\n        \"Purchase Receipt\",\n        \"Stock Reconciliation\",\n        \"Stock Ledger Entry\",\n        \"Stock Entry\",\n        \"Stock Reconciliation\",\n        \"Stock Entry\",\n        \"Delivery Note\",\n        \"Sales Order\",\n        \"Purchase Order\",\n        \"Purchase Receipt\",\n        \"Stock Reconciliation\",\n        \"Stock", "CodeBleu_score": 4.530173327408736}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    transactions = []\n    transactions_count = 0\n    transactions_total = 0\n    transactions_page = 0\n    transactions_page_size = 100\n    transactions_page_count = 0\n    while True:\n        transactions_page += 1\n        query_params = {\n            \"start_date\": start_date,\n            \"end_date\": end_date,\n            \"page\": transactions_page,\n            \"page_size\": transactions_page_size,\n        }\n        if account_id:\n            query_params[\"account_id\"] = account_id\n        try:\n            response = self.client.get(\"transactions\", query_params=query_params)\n        except HTTPError as e:\n            if e.response.status_code == 401:\n                raise AuthenticationError(\n                    \"Authentication failed. Please check your API key.\"\n                )\n            else:\n                frappe.log_error(\n                    message=f\"Error fetching transactions from Plaid: {e.response.text}\",\n                    title=\"Plaid API Error\",\n                )\n        else:\n            transactions_count = len(response[\"transactions\"])\n            transactions_total = response[\"total_transactions\"]\n            transactions_page_count = response[\"total_pages\"]\n            transactions.extend(response[\"transactions\"])\n            if transactions_page >= transactions_page_count:\n                break\n        frappe.log_error(\n            message=f\"Error fetching transactions from Plaid: {e.response.text}\",\n            title=\"Plaid API Error\",\n        )\n    return transactions\n\n", "CodeBleu_score": 30.24988465555444}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    # Authenticate the client\n    self.auth()\n    # Construct the query parameters\n    query_params = {\n        \"start_date\": start_date,\n        \"end_date\": end_date,\n        \"account_id\": account_id,\n        \"offset\": 0,\n        \"limit\": 100,\n    }\n    # Fetch the transactions\n    transactions = []\n    while True:\n        try:\n            response = self.client.get(\n                \"/v1/transactions\", params=query_params, timeout=10\n            )\n            response.raise_for_status()\n            transactions.extend(response.json()[\"transactions\"])\n            if response.json()[\"total\"] <= len(transactions):\n                break\n            query_params[\"offset\"] += query_params[\"limit\"]\n        except requests.exceptions.HTTPError as e:\n            # Handle specific errors by raising them\n            if e.response.status_code == 401:\n                raise InvalidTokenError\n            elif e.response.status_code == 404:\n                raise NotFoundError\n            elif e.response.status_code == 429:\n                raise TooManyRequestsError\n            elif e.response.status_code == 500:\n                raise ServerError\n            else:\n                frappe.log_error(\n                    \"Unexpected error in get_transactions: {}\".format(e)\n                )\n        except Exception as e:\n            # Log any other exceptions\n            frappe.log_error(\n                \"Unexpected error in get_transactions: {}\".format(e)\n            )\n    return transactions\n\n", "CodeBleu_score": 31.676915691954328}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n\n    transactions = []\n    transactions_count = 0\n\n    while True:\n        try:\n            # Authenticate the client\n            self.authenticate()\n\n            # Construct the query parameters\n            params = {\n                \"start_date\": start_date,\n                \"end_date\": end_date,\n                \"offset\": transactions_count,\n                \"limit\": 1000,\n            }\n            if account_id:\n                params[\"account_id\"] = account_id\n\n            # Fetch transactions\n            response = self.auth.get(\n                f\"{self.base_url}/transactions\",\n                params=params,\n                headers=self.headers,\n            )\n            response.raise_for_status()\n\n            # Get the transactions\n            transactions.extend(response.json()[\"transactions\"])\n\n            # If the number of retrieved transactions is less than the total,\n            # continue fetching until all transactions are retrieved\n            if transactions_count + 1000 >= response.json()[\"total\"]:\n                break\n            transactions_count += 1000\n\n        except requests.exceptions.HTTPError as e:\n            if e.response.status_code == 401:\n                frappe.log_error(\n                    \"Yodlee Error: Unauthorized. Please check your credentials.\",\n                    \"Yodlee Error\",\n                )\n            elif e.response.status_code == 404:\n                frappe.log_error(\n                    \"Yodlee Error: Account not found. Please check your account ID.\",\n                    \"Yodlee Error\",\n                )\n            elif e.response.status_code == 400:\n                frappe.log_error(\n                    \"Yodlee Error: Invalid request. Please check your request parameters.\",\n                    \"Yodlee Error\",\n                )\n            elif e.response.status_code == 500:\n                frappe.log_error(\n                    \"Yodlee Error: Internal Server Error. Please try again.\",\n                    \"Yodlee Error\",\n                )\n            else:\n                frappe.log_error(\n                    \"Yod", "CodeBleu_score": 25.320251734400394}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t\n    try:\n        institution = response['institution']\n        bank = frappe.get_doc({\n            \"doctype\": \"Bank\",\n            \"bank_name\": institution['name'],\n            \"bank_code\": institution['institution_id'],\n            \"plaid_access_token\": token\n        })\n        if not bank.exists:\n            bank.insert()\n        else:\n            bank.plaid_access_token = token\n            bank.save()\n    except Exception as e:\n        frappe.log_error(str(e), \"Plaid Connector\")\n\n", "CodeBleu_score": 36.63373504475936}, {"code": "def add_institution(token, response)\n\t\n    try:\n        institution = response[\"institution\"]\n        bank_name = institution[\"name\"]\n        bank_id = institution[\"id\"]\n        bank_url = institution[\"url\"]\n        bank_logo = institution[\"logo\"]\n        bank_primary_color = institution[\"primary_color\"]\n        bank_billing_address_required = institution[\"billing_address_required\"]\n        bank_ownership = institution[\"ownership\"]\n        bank_country_codes = institution[\"country_codes\"]\n        bank_supports_account_linking = institution[\"supports_account_linking\"]\n        bank_supports_account_filters = institution[\"supports_account_filters\"]\n        bank_supports_account_range = institution[\"supports_account_range\"]\n        bank_supports_transaction_history = institution[\"supports_transaction_history\"]\n        bank_supports_transaction_details = institution[\"supports_transaction_details\"]\n        bank_supports_transaction_filters = institution[\"supports_transaction_filters\"]\n        bank_supports_transaction_range = institution[\"supports_transaction_range\"]\n        bank_supports_identity = institution[\"supports_identity\"]\n        bank_supports_direct_deposit = institution[\"supports_direct_deposit\"]\n        bank_supports_direct_deposit_debit = institution[\"supports_direct_deposit_debit\"]\n        bank_supports_direct_deposit_credit = institution[\"supports_direct_deposit_credit\"]\n        bank_supports_deposit_switch = institution[\"supports_deposit_switch\"]\n        bank_supports_deposit_switch_debit = institution[\"supports_deposit_switch_debit\"]\n        bank_supports_deposit_switch_credit = institution[\"supports_deposit_switch_credit\"]\n        bank_supports_payment_initiation = institution[\"supports_payment_initiation\"]\n        bank_supports_payment_initiation_debit = institution[\"supports_payment_initiation_debit\"]\n        bank_supports_payment_initiation_credit = institution[\"supports_payment_", "CodeBleu_score": 16.970868432101508}, {"code": "def add_institution(token, response)\n\t\n    try:\n        bank = frappe.get_doc({\n            \"doctype\": \"Bank\",\n            \"bank_name\": response[\"institution\"][\"name\"],\n            \"bank_code\": response[\"institution\"][\"institution_id\"],\n            \"plaid_access_token\": response[\"access_token\"]\n        })\n        if not frappe.db.exists(\"Bank\", bank.bank_code):\n            bank.insert()\n            frappe.db.commit()\n        else:\n            bank = frappe.get_doc(\"Bank\", bank.bank_code)\n            bank.plaid_access_token = response[\"access_token\"]\n            bank.save()\n            frappe.db.commit()\n    except Exception as e:\n        frappe.log_error(e)\n\n", "CodeBleu_score": 45.04277450535661}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t\n    bank_account_name = bank_account.account_number\n    start_date = bank_account.last_integration_date\n    end_date = add_months(today(), 1)\n    if not start_date:\n        start_date = today()\n    frappe.log_error(\n        _(\"Start date: {0}, End date: {1}\").format(start_date, end_date),\n        \"Bank Transaction Sync Start Date and End Date\",\n    )\n    try:\n        transactions = get_transactions(bank, bank_account_name, start_date, end_date)\n    except Exception as e:\n        frappe.log_error(\n            _(\"Error while fetching transactions: {0}\").format(e),\n            \"Bank Transaction Sync Error\",\n        )\n        return\n    if not transactions:\n        frappe.log_error(\n            _(\"No transactions found for bank: {0} and bank account: {1}\").format(\n                bank, bank_account_name\n            ),\n            \"Bank Transaction Sync Error\",\n        )\n        return\n    for transaction in reversed(transactions):\n        if not transaction.get(\"date\"):\n            continue\n        date = formatdate(transaction.get(\"date\"))\n        if date < start_date:\n            frappe.log_error(\n                _(\"Transaction date {0} is before last integration date {1}\").format(\n                    date, start_date\n                ),\n                \"Bank Transaction Sync Error\",\n            )\n            continue\n        if date > end_date:\n            frappe.log_error(\n                _(\"Transaction date {0} is after end date {1}\").format(\n                    date, end_date\n                ),\n                \"Bank Transaction Sync Error\",\n            )\n            continue\n        bank_transaction = frappe.get_doc(\n            {\n                \"doctype\": \"Bank Transaction\",\n                \"bank\": bank,\n                \"bank_account\": bank_account_name,\n                \"date\": date,\n                \"description\": transaction.get(\"description\"),\n                \"reference_number\": transaction.get(\"reference_", "CodeBleu_score": 22.94501416363508}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    # Get last integration date\n    last_integration_date = bank_account.last_integration_date\n    # Set start date\n    if last_integration_date:\n        start_date = add_months(last_integration_date, 1)\n    else:\n        start_date = today()\n    # Set end date\n    end_date = today()\n    # Get transactions\n    transactions = get_transactions(bank, bank_account, start_date, end_date)\n    # Create new bank transactions\n    new_transactions = []\n    for transaction in transactions:\n        new_bank_transaction = new_bank_transaction(bank, bank_account, transaction)\n        new_transactions.append(new_bank_transaction)\n    # Update last integration date\n    if len(new_transactions):\n        set_value(bank_account, 'last_integration_date', formatdate(new_transactions[0].date))\n    # Log new transactions\n    info(\"{} new transactions added.\".format(len(new_transactions)))\n    # Log errors\n    for error in reversed(frappe.get_traceback()):\n        frappe.log_error(error)\n\n", "CodeBleu_score": 30.632688883009845}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    bank_account_doc = frappe.get_doc(\"Bank Account\", bank_account)\n    bank_doc = frappe.get_doc(\"Bank\", bank)\n    bank_transactions = get_transactions(bank_account_doc, bank_doc)\n    if not bank_transactions:\n        frappe.log_error(\n            \"No bank transactions found for bank account {}\".format(bank_account_doc.name),\n            \"No Bank Transactions Found\",\n        )\n        return\n    new_bank_transactions = []\n    for bank_transaction in bank_transactions:\n        new_bank_transaction = frappe.get_doc(\n            {\n                \"doctype\": \"Bank Transaction\",\n                \"bank_account\": bank_account,\n                \"bank\": bank,\n                \"transaction_date\": bank_transaction.get(\"date\"),\n                \"posting_date\": bank_transaction.get(\"date\"),\n                \"mode_of_payment\": bank_transaction.get(\"mode_of_payment\"),\n                \"reference_no\": bank_transaction.get(\"reference_no\"),\n                \"reference_date\": bank_transaction.get(\"reference_date\"),\n                \"paid_from\": bank_transaction.get(\"paid_from\"),\n                \"paid_to\": bank_transaction.get(\"paid_to\"),\n                \"paid_to_account_currency\": bank_transaction.get(\"paid_to_account_currency\"),\n                \"paid_from_account_currency\": bank_transaction.get(\n                    \"paid_from_account_currency\"\n                ),\n                \"paid_amount\": bank_transaction.get(\"paid_amount\"),\n                \"paid_amount_in_company_currency\": bank_transaction.get(\n                    \"paid_amount_in_company_currency\"\n                ),\n                \"unallocated_amount\": bank_transaction.get(\"unallocated_amount\"),\n                \"unallocated_amount_in_company_currency\": bank_transaction.get(\n                    \"unallocated_amount_in_company_currency\"\n                ),\n                \"allocated_amount\": bank_transaction.get(\"allocated_amount\"),\n", "CodeBleu_score": 15.584141557803699}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t\n    # Construct query URI\n    query_uri = self._build_query_uri(entity)\n\n    # Get total number of entries\n    total_entries = self._get_total_entries(query_uri)\n\n    # Get entries in batches of 1000\n    for i in range(0, total_entries, 1000):\n        entries = self._get_entries(query_uri, i)\n        self._save_entries(entries, entity)\n\n", "CodeBleu_score": 10.165616767339243}, {"code": "def _migrate_entries(self, entity)\n\t\n    query_uri = self._construct_query_uri(entity)\n    total_entries = self._get_total_entries(query_uri)\n    for i in range(0, total_entries, 1000):\n        try:\n            entries = self._get(query_uri, i, 1000)\n            self._save_entries(entries, entity)\n        except Exception as e:\n            self._log_error(e, self._preprocess_entries(entries))\n\n", "CodeBleu_score": 16.856368182743054}, {"code": "def _migrate_entries(self, entity)\n\t\n    # Construct the query URI\n    query_uri = 'https://{0}.quickbooks.com/v3/company/{1}/{2}?minorversion={3}'.format(\n        self._realm_id,\n        self._company_id,\n        entity,\n        self._minorversion\n    )\n\n    # Determine the total number of entries\n    response = self._get(query_uri)\n    total_entries = int(response.json()['Total'])\n\n    # Fetch the entries in batches of 1000\n    for i in range(0, total_entries, 1000):\n        query_uri = 'https://{0}.quickbooks.com/v3/company/{1}/{2}?minorversion={3}&startPosition={4}'.format(\n            self._realm_id,\n            self._company_id,\n            entity,\n            self._minorversion,\n            i\n        )\n        response = self._get(query_uri)\n        entries = response.json()['QueryResponse'][entity]\n        self._save_entries(entries)\n\n", "CodeBleu_score": 29.819849637670092}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\t\n    invoice_id = self._save_sales_invoice(invoice)\n    if not invoice_id:\n        invoice_id = self._save_invoice_as_journal_entry(invoice)\n    return invoice_id\n\n", "CodeBleu_score": 15.39915334094459}, {"code": "def _save_invoice(self, invoice)\n\t\n    if invoice.get('type') == 'StatementCharge' or invoice.get('type') == 'ReimburseCharge':\n        self._save_invoice_as_journal_entry(invoice)\n    else:\n        self._save_sales_invoice(invoice)\n\n", "CodeBleu_score": 23.97885979861103}, {"code": "def _save_invoice(self, invoice)\n\t\n    # Save the invoice as a sales invoice if there are no linked transactions of type \"StatementCharge\" or \"ReimburseCharge\"\n    if not self._save_invoice_as_journal_entry(invoice):\n        self._save_sales_invoice(invoice)\n\n", "CodeBleu_score": 9.299890597436415}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    interval = get_interval(self, no_of_visit)\n    date = start_date\n    while date <= end_date:\n        schedule_list.append(date)\n        date = add_days(self, date, interval)\n    return schedule_list\n\n", "CodeBleu_score": 9.746943900168443}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    # Get the list of holidays for the current year\n    holidays = self.get_holidays_for_current_year()\n\n    # Create a list of dates between the start and end date\n    schedule_list = [start_date]\n    while schedule_list[-1] < end_date:\n        schedule_list.append(add_days(schedule_list[-1], no_of_visit))\n\n    # Iterate through the list of dates and adjust for holidays\n    for i, date in enumerate(schedule_list):\n        while self.validate_schedule_date_for_holiday_list(date, holidays):\n            date = add_days(date, 1)\n            schedule_list[i] = date\n\n    # Return the list of dates\n    return schedule_list\n\n", "CodeBleu_score": 18.18011958447057}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    start_date = getdate(start_date)\n    end_date = getdate(end_date)\n    interval = ceil(no_of_visit / len(sales_person))\n    if interval == 0:\n        interval = 1\n    for i in range(0, len(sales_person)):\n        date = start_date\n        while date <= end_date:\n            if date not in schedule_list:\n                schedule_list.append(date)\n            date = add_days(date, interval)\n            date = self.validate_schedule_date_for_holiday_list(date, sales_person[i])\n    return schedule_list\n\n", "CodeBleu_score": 31.88974944492211}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\t        $handle = $data['handle'] ?? $this->findTranslation($data['title'] ?? '');\n        $url = $data['url'] ?? route($this->route . '.bulkaction', $this->getSelectedInput(request()));\n\n        return response()->json([\n            'success' => true,\n            'message' => $data['message'] ?? $this->findTranslation('success'),\n            'data' => [\n                'title' => $data['title'] ?? $this->findTranslation('success'),\n                'path' => $data['path'] ?? $this->path,\n                'handle' => $handle,\n                'html' => view('components.index.bulkaction.modal', [\n                    'url' => $url,\n                    'handle' => $handle,\n                    'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n                    'html' => view($view, $data)->render(),\n                ])->render(),\n            ],\n        ]);\n    }", "CodeBleu_score": 56.61424766795684}, {"code": "<?\n   public function response($view, $data = []){\n\t        $method = request()->get('_method');\n        $url = route('bulkactions.handle', $this->handle);\n        $handle = $this->handle;\n\n        if ($method === 'POST') {\n            return response()->json([\n                'success' => true,\n                'message' => $this->findTranslation('bulkactions.success'),\n                'data' => [\n                    'title' => $this->title,\n                    'path' => $this->path,\n                    'handle' => $handle,\n                    'html' => view($view, $data)->render(),\n                ],\n            ]);\n        }\n\n        return response()->json([\n            'success' => false,\n            'message' => $this->findTranslation('bulkactions.fail'),\n            'data' => [\n                'title' => $this->title,\n                'path' => $this->path,\n                'handle' => $handle,\n                'html' => view($view, $data)->render(),\n            ],\n        ]);\n    }", "CodeBleu_score": 46.02373649473384}, {"code": "<?\n   public function response($view, $data = []){\n\t        $method = request()->get('method');\n        $url = route('bulkaction.handle', ['method' => $method]);\n        $handle = $this->findTranslation('handle', $method);\n\n        return response()->json([\n            'success' => true,\n            'message' => $this->findTranslation('success', $method),\n            'data' => [\n                'title' => $this->findTranslation('title', $method),\n                'path' => $this->findTranslation('path', $method),\n                'handle' => $handle,\n                'html' => view('components.index.bulkaction.modal', [\n                    'url' => $url,\n                    'handle' => $handle,\n                    'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n                    'html' => view($view, $data)->render(),\n                ])->render(),\n            ],\n        ]);\n    }", "CodeBleu_score": 55.92931917190823}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t    $contacts = $this->getSelectedRecords($request);\n    foreach ($contacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n        } catch (Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n    flash('Contacts deleted.')->success();\n    return redirect()->route('contacts.index');\n}", "CodeBleu_score": 65.59471089797985}, {"code": "<?\npublic function deleteContacts($request){\n\t    $contacts = $this->getSelectedRecords($request, 'contacts');\n\n    foreach ($contacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n        } catch (Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 85.50194432617896}, {"code": "<?\npublic function deleteContacts($request){\n\t    $contacts = $request->getSelectedRecords();\n    foreach ($contacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n        } catch (Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 65.81426346888091}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getSelectedRecords($request);\n\n    foreach ($transactions as $transaction) {\n        try {\n            $this->dispatch(new DeleteTransaction($transaction));\n        } catch (Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 70.41062388213295}, {"code": "<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getSelectedRecords($request);\n\n    foreach ($transactions as $transaction) {\n        try {\n            $this->dispatch(new DeleteTransaction($transaction));\n        } catch (Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n\n    return redirect()->route('transactions.index');\n}", "CodeBleu_score": 68.0933480571897}, {"code": "<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getSelectedRecords($request);\n\n    foreach ($transactions as $transaction) {\n        try {\n            $this->dispatch(new DeleteTransaction($transaction));\n        } catch (Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 70.41062388213295}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\t    $request = $this->getRequest();\n    if (!$request instanceof FormRequest) {\n        return;\n    }\n    $data = $validator->getData();\n    $rules = $request->rules();\n    $messages = $request->messages();\n    foreach ($data as $key => $value) {\n        $request->initialize($this->getQueryParams(), $this->getParsedBody(), $this->getAttributes(), $this->getCookieParams(), $this->getFiles(), $this->getServerParams(), $this->getUploadedFiles());\n        $request->setRouteResolver($this->getRouteResolver());\n        $rules = $request->prepareRules($rules);\n        try {\n            Validator::make($data, $rules, $messages)->validate();\n        } catch (ValidationException $e) {\n            $validator->addFailure($key, $e->validator->failed());\n            throw $e;\n        }\n    }\n}", "CodeBleu_score": 46.53350732992582}, {"code": "<?\npublic function withValidator($validator){\n\t    if (!$request = $this->getRequestInstance()) {\n        return;\n    }\n\n    if (!$request instanceof FormRequest) {\n        return;\n    }\n\n    $rules = $request->rules();\n\n    if (!$rules) {\n        return;\n    }\n\n    $data = $this->getData();\n\n    foreach ($data as $key => $value) {\n        $request->initialize($this->route(), $this->getMethod(), $this->all(), $this->all(), $this->cookies(), $this->files(), $this->server(), $this->getContent());\n\n        $request->setContainer($this->container);\n\n        $request->setUserResolver($this->getUserResolver());\n\n        $request->setRouteResolver($this->getRouteResolver());\n\n        $rules = $request->prepareRules($rules);\n\n        try {\n            $this->prepareForValidation();\n\n            $validator->setRules($rules);\n\n            $validator->validate();\n        } catch (ValidationException $e) {\n            $validator->addErrors($e->validator->failed());\n\n            throw $e;\n        }\n    }\n}", "CodeBleu_score": 41.69150436943913}, {"code": "<?\npublic function withValidator($validator){\n\t    $requestClass = 'App\\\\Http\\\\Requests\\\\'.Str::studly(str_replace('.', '_', $this->route()->getName()));\n    if (!class_exists($requestClass) || !($requestClass instanceof FormRequest)) {\n        return;\n    }\n    $request = new $requestClass();\n    $rules = $request->rules();\n    foreach ($this->all() as $key => $data) {\n        $request->initialize($this->query->all(), $this->request->all(), $this->attributes->all(), $this->cookies->all(), $this->files->all(), $this->server->all(), $this->content);\n        $request->setJson($this->json());\n        $request->setRouteResolver($this->getRouteResolver());\n        $request->setUserResolver($this->getUserResolver());\n        $request->setValidator($validator);\n        try {\n            $request->prepareForValidation();\n            $request->setContainer($this->container);\n            $request->setRedirector($this->redirector);\n            $request->setSession($this->getSession());\n            $request->setErrorBag($this->errorBag);\n            $rules = $request->getValidatorInstance()->getRules();\n            $request->getValidatorInstance()->setRules($rules);\n            $request->validateResolved();\n        } catch (ValidationException $e) {\n            $validator->addFailure($key, $data, $e->validator->failed());\n            throw $e;\n        }\n    }\n}", "CodeBleu_score": 43.18391633003762}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    $this->boot();\n\n    if ($this instanceof ShouldUpdate) {\n        $this->update(...$arguments);\n    }\n}", "CodeBleu_score": 14.904473245906408}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    if ($this instanceof ShouldUpdate) {\n        $this->setModel($arguments[0] ?? null);\n        $this->setRequest($arguments[1] ?? null);\n        $this->update();\n    }\n}", "CodeBleu_score": 22.719338789291328}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    if ($this instanceof ShouldUpdate) {\n        $model = null;\n        $request = null;\n\n        if (isset($arguments[0]) && $arguments[0] instanceof Model) {\n            $model = $arguments[0];\n        }\n\n        if (isset($arguments[1]) && $arguments[1] instanceof Request) {\n            $request = $arguments[1];\n        }\n\n        $this->update($model, $request);\n    }\n}", "CodeBleu_score": 36.328091804023444}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t     $query->usingSearchString()->sortable($sort);\n\n     if ($this->request->expectsJson() && !$this->request->isNotApi()) {\n         return $query->get();\n     }\n\n     return $query->paginate(\n         $this->request->input('limit', config('system.default_limit'))\n     );\n }", "CodeBleu_score": 34.687978945061445}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t     $query->usingSearchString()->sortable($sort);\n     if ($this->request->expectsJson() && ! $this->request->isNotApi()) {\n         return $query->get();\n     }\n     return $query->paginate(\n         $this->request->input('limit', $this->getDefaultLimit())\n     );\n }", "CodeBleu_score": 33.99917850397164}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t    $query->usingSearchString()->sortable($sort);\n\n    if ($this->request->expectsJson() && !$this->request->isNotApi()) {\n        return $query->get();\n    }\n\n    return $query->paginate($this->request->input('limit', setting('general.records_per_page', 25)));\n}", "CodeBleu_score": 33.360439122049094}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t    $open_amount = 0;\n    $overdue_amount = 0;\n\n    if ($model->status == 'paid') {\n        return [\n            'open_amount' => 0,\n            'overdue_amount' => 0,\n        ];\n    }\n\n    if ($model->status == 'partial') {\n        $payments = $model->payments;\n        $payments->each(function ($payment) use (&$open_amount) {\n            $open_amount += $payment->amount;\n        });\n    }\n\n    $due_date = $model->due_date;\n    $is_overdue = false;\n\n    if ($due_date->isPast()) {\n        $is_overdue = true;\n    }\n\n    if ($is_overdue) {\n        $overdue_amount = $model->amount - $open_amount;\n    } else {\n        $open_amount = $model->amount - $open_amount;\n    }\n\n    return [\n        'open_amount' => $open_amount,\n        'overdue_amount' => $overdue_amount,\n    ];\n}", "CodeBleu_score": 42.601586543896516}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t    $openAmount = 0;\n    $overdueAmount = 0;\n\n    if ($model->status == 'paid') {\n        return [\n            'openAmount' => 0,\n            'overdueAmount' => 0,\n        ];\n    }\n\n    if ($model->status == 'partial') {\n        $payments = $model->payments;\n        foreach ($payments as $payment) {\n            $openAmount += $payment->getAmountConvertedToDefault();\n        }\n    }\n\n    if (Date::parse($model->due_at)->isPast()) {\n        $overdueAmount = $openAmount;\n        $openAmount = 0;\n    }\n\n    return [\n        'openAmount' => $openAmount,\n        'overdueAmount' => $overdueAmount,\n    ];\n}", "CodeBleu_score": 44.290947527975796}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t    $open = 0;\n    $overdue = 0;\n    if ($model->getStatus() == 'paid') {\n        return array('open' => 0, 'overdue' => 0);\n    }\n    if ($model->getStatus() == 'partial') {\n        $transactions = $model->getTransactions();\n        foreach ($transactions as $transaction) {\n            $open += $transaction->getAmount();\n        }\n    }\n    if (Date::today()->toDateString() > $model->getDueDate()->toDateString()) {\n        $overdue = $open;\n        $open = 0;\n    }\n    return array('open' => $open, 'overdue' => $overdue);\n}", "CodeBleu_score": 40.86273347214661}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n    $total = $this->getCountForPagination();\n    $results = $total ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 83.18905308347482}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $total = $this->getCountForPagination($columns);\n\n    $results = $total ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 83.54270847350622}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $results = ($total = $this->getCountForPagination($columns))\n        ? $this->forPage($page, $perPage)->get($columns)\n        : $this->model->newCollection();\n\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 86.62954652041972}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t    $reconciliations = $this->getSelectedRecords($request);\n\n    \\DB::transaction(function () use ($reconciliations) {\n        foreach ($reconciliations as $reconciliation) {\n            $reconciliation->status = 'reconciled';\n            $reconciliation->save();\n\n            Transaction::where('account_id', $reconciliation->account_id)->isNotReconciled()->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])->each(function ($item) {\n                $item->reconciled = true;\n                $item->save();\n            });\n        }\n    });\n}", "CodeBleu_score": 69.60400785199201}, {"code": "<?\npublic function reconcile($request){\n\t    $reconciliations = $this->getSelectedRecords($request);\n\n    foreach ($reconciliations as $reconciliation) {\n        \\DB::transaction(function () use ($reconciliation) {\n            $reconciliation->status = 'reconciled';\n            $reconciliation->save();\n\n            Transaction::where('account_id', $reconciliation->account_id)\n                ->isNotReconciled()\n                ->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])->each(function ($item) {\n                    $item->reconciled = 1;\n                    $item->save();\n                });\n        });\n    }\n}", "CodeBleu_score": 87.02501218455751}, {"code": "<?\npublic function reconcile($request){\n\t    $this->getSelectedRecords($request)->each(function ($reconciliation) {\n        \\DB::transaction(function () use ($reconciliation) {\n            $reconciliation->status = 'reconciled';\n            $reconciliation->save();\n\n            Transaction::where('account_id', $reconciliation->account_id)->isNotReconciled()->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])->each(function ($item) {\n                $item->reconciled = true;\n                $item->save();\n            });\n        });\n    });\n}", "CodeBleu_score": 53.14254287335499}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t    \\DB::transaction(function () {\n        $invitation = UserInvitation::where('user_id', $this->user->id)->first();\n        if ($invitation) {\n            $invitation->delete();\n        }\n\n        $invitation = UserInvitation::create([\n            'user_id' => $this->user->id,\n            'token' => Str::uuid(),\n        ]);\n\n        try {\n            $this->dispatch(new SendInvitationNotification($invitation));\n        } catch (\\Exception $e) {\n            throw new \\Exception(trans('exceptions.frontend.user.invite.error'));\n        }\n\n        return $invitation;\n    });\n}", "CodeBleu_score": 45.224630829656206}, {"code": "<?\npublic function handle(): UserInvitation{\n\t    $invitation = UserInvitation::where('user_id', $this->user->id)->first();\n\n    if ($invitation) {\n        $invitation->delete();\n    }\n\n    $invitation = UserInvitation::create([\n        'user_id' => $this->user->id,\n        'token' => Str::uuid(),\n    ]);\n\n    try {\n        $this->dispatch(new SendUserInvitationNotification($invitation));\n    } catch (Throwable $exception) {\n        throw new Exception(trans('user.invitation.notification_error'));\n    }\n\n    return $invitation;\n}", "CodeBleu_score": 40.74550386576211}, {"code": "<?\npublic function handle(): UserInvitation{\n\t    \\DB::transaction(function () {\n        $invitations = UserInvitation::where('user_id', $this->user->id)->get();\n        foreach ($invitations as $invitation) {\n            $invitation->delete();\n        }\n        $invitation = UserInvitation::create([\n            'user_id' => $this->user->id,\n            'token' => Str::uuid(),\n        ]);\n        $this->dispatch(new SendUserInvitationNotification($invitation));\n    });\n    return UserInvitation::where('user_id', $this->user->id)->first();\n}", "CodeBleu_score": 47.55972862203814}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\t    if ($this->isReconciled()) {\n        throw new \\Exception('The transaction has already been reconciled.');\n    }\n\n    if ($this->isTransferTransaction()) {\n        throw new UnauthorizedException('The transaction is a transfer transaction.');\n    }\n}", "CodeBleu_score": 32.84189987192906}, {"code": "<?\npublic function authorize(): void{\n\t    if ($this->model->isReconciled) {\n        throw new Exception('Transaction has already been reconciled.');\n    }\n    if ($this->model->isTransferTransaction) {\n        throw new UnauthorizedException('This transaction is a transfer transaction.');\n    }\n}", "CodeBleu_score": 30.292115401708074}, {"code": "<?\npublic function authorize(): void{\n\t    if ($this->model->isReconciled()) {\n        throw new \\Exception('Transaction is already reconciled.');\n    }\n    if ($this->model->isTransferTransaction()) {\n        throw new \\Exception('Transfer transactions cannot be authorized.');\n    }\n}", "CodeBleu_score": 43.32079984991012}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t    if (tableName.equals(\"Tenant\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantAccess\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantAccessPolicy\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantPolicy\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantPolicyAssignment\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantPolicyAssignmentPolicy\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantPolicyAssignmentPolicyAssignment\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantPolicyAssignmentPolicyAssignmentPolicy\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantPolicyAssignmentPolicyAssignmentPolicyAssignment\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantPolicyAssignmentPolicyAssignmentPolicyAssignmentPolicy\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantPolicyAssignmentPolicyAssignmentPolicyAssignmentPolicyAssignment\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantPolicyAssignmentPolicyAssignmentPolicyAssignmentPolicyAssignmentPolicy\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantPolicyAssignmentPolicyAssignmentPolicyAssignmentPolicyAssignmentPolicyAssignment\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantPolicyAssignmentPolicyAssignmentPolicyAssignmentPolicyAssignmentPolicyAssignmentPolicy\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantPolicyAssignmentPolicyAssignmentPolicyAssignmentPolicyAssignmentPolicyAssignmentPolicyAssignment\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantPolicyAssignmentPolicyAssignmentPolicyAssignmentPolicyAssignmentPolicyAssignmentPolicyAssignmentPolicy\")) {\n        return true;\n    }\n    if (tableName.equals(\"TenantPolicyAssignmentPolicyAssignmentPolicyAssignmentPolicyAssignmentPolicyAssignmentPolicyAssignmentPolicyAssignment\")) {\n        return true;\n   ", "CodeBleu_score": 15.215031546842683}, {"code": "public boolean doTableFilter(String tableName){\n\t    if (tableName.equals(\"tenant_id\")) {\n        return true;\n    }\n    if (tableName.equals(\"tenant_id2\")) {\n        return true;\n    }\n    if (tableName.equals(\"tenant_id3\")) {\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 13.102855659233633}, {"code": "public boolean doTableFilter(String tableName){\n\t    if (getTenantIdByToken() == 0) {\n        return false;\n    }\n    return (tableName == \"Tenant1\" || tableName == \"Tenant2\");\n}", "CodeBleu_score": 5.7736802804587395}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 64.03882826107017}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer configurer = new MapperScannerConfigurer();\n    configurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    configurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    return configurer;\n}", "CodeBleu_score": 65.7501061960028}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer configurer = new MapperScannerConfigurer();\n    configurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    configurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    return configurer;\n}", "CodeBleu_score": 65.7501061960028}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    try {\n        return accountService.findBySelect(request);\n    } catch (Exception e) {\n        log.error(e.getMessage(), e);\n        return \"{\\\"error\\\":\\\"\" + e.getMessage() + \"\\\"}\";\n    }\n}", "CodeBleu_score": 12.8036475379184}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    try {\n        List<Account> accounts = accountService.findBySelect(request.getParameter(\"select\"));\n        return new JSONSerializer().exclude(\"*.class\").serialize(accounts);\n    } catch (Exception e) {\n        log.error(\"Error while retrieving accounts\", e);\n        return new JSONSerializer().exclude(\"*.class\").serialize(\"Error while retrieving accounts\");\n    }\n}", "CodeBleu_score": 23.063227077069932}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    try {\n        List<Account> accounts = accountService.findBySelect();\n        JSONArray jsonArray = new JSONArray();\n        for (Account account : accounts) {\n            JSONObject jsonObject = new JSONObject();\n            jsonObject.put(\"id\", account.getId());\n            jsonObject.put(\"name\", account.getName());\n            jsonArray.put(jsonObject);\n        }\n        return jsonArray.toString();\n    } catch (Exception e) {\n        logger.error(\"Error in findBySelect(): \", e);\n        return \"{\\\"error\\\": \\\"\" + e.getMessage() + \"\\\"}\";\n    }\n}", "CodeBleu_score": 44.36842092356198}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t\n        BaseResponseInfo response = new BaseResponseInfo();\n        try {\n            response.setData(accountService.listWithBalance(name, serialNo, currentPage, pageSize));\n            response.setCode(ResponseCode.SUCCESS);\n        } catch (Exception e) {\n            log.error(\"Error occurred while getting the list of accounts with balances\", e);\n            response.setCode(ResponseCode.ERROR);\n            response.setMessage(e.getMessage());\n        }\n        return response;\n    }", "CodeBleu_score": 33.232600002822856}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t\n        BaseResponseInfo response = new BaseResponseInfo();\n        try {\n            // Create the paginated list of accounts and their count\n            PaginationList<Account> paginatedList = accountService.listWithBalance(name, serialNo, currentPage, pageSize);\n\n            // Populate the response with the paginated list of accounts and their count\n            response.setCount(paginatedList.getCount());\n            response.setData(paginatedList.getList());\n        } catch (Exception e) {\n            // Log the exception\n            log.error(e.getMessage());\n\n            // Set the response code and message\n            response.setCode(ResponseCode.FAILED_TO_GET_ACCOUNT_LIST.getCode());\n            response.setMessage(ResponseCode.FAILED_TO_GET_ACCOUNT_LIST.getMessage());\n        }\n\n        return response;\n    }", "CodeBleu_score": 36.0180702028504}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo response = new BaseResponseInfo();\n        try {\n            // Get the list of accounts from the service\n            List<Account> accounts = accountService.listWithBalance(name, serialNo, currentPage, pageSize);\n            // Get the count of accounts from the service\n            Integer count = accountService.listWithBalanceCount(name, serialNo);\n            // Populate the response with the list of accounts and the count\n            response.setData(accounts);\n            response.setTotal(count);\n        } catch (Exception e) {\n            // Log and set error message\n            LOGGER.error(e.getMessage(), e);\n            response.setCode(ResponseInfo.ERROR);\n            response.setMessage(e.getMessage());\n        }\n        return response;\n    }", "CodeBleu_score": 42.338872804437976}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response.setResponseCode(200);\n        response.setData(accountService.getStatistics(name, serialNo));\n    } catch (Exception e) {\n        logger.error(\"An error occurred while retrieving statistics for \" + name + \" with serial number \" + serialNo, e);\n        response.setResponseCode(500);\n        response.setMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 36.34754657849156}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response.setData(accountService.getStatistics(name, serialNo));\n        response.setResponseCode(200);\n    } catch (Exception e) {\n        LOGGER.error(e.getMessage(), e);\n        response.setResponseCode(500);\n        response.setMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 40.543786860608165}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n\n    try {\n        response.setData(accountService.getStatistics(name, serialNo));\n        response.setResponseCode(200);\n    } catch (Exception e) {\n        logger.error(\"Error occurred while retrieving statistics\", e);\n        response.setResponseCode(500);\n        response.setMessage(\"Error occurred while retrieving statistics\");\n    }\n\n    return response;\n}", "CodeBleu_score": 36.25243352067004}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t     BaseResponseInfo res = new BaseResponseInfo();\n     try {\n         AccountHeadVo accountHeadVo = new AccountHeadVo();\n         accountHeadVo.setBillNo(billNo);\n         List<AccountHeadVo4InOut> accountHeadVo4InOuts = accountHeadService.getDetailByNumber(accountHeadVo);\n         if (accountHeadVo4InOuts.size() > 0) {\n             res.code = 200;\n             res.data = accountHeadVo4InOuts.get(0);\n         } else {\n             res.code = 500;\n             res.data = \"\u67e5\u8be2\u7ed3\u679c\u4e3a\u7a7a\";\n         }\n     } catch (Exception e) {\n         e.printStackTrace();\n         res.code = 500;\n         res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n     }\n     return res;\n }", "CodeBleu_score": 58.61244922390303}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t\n        BaseResponseInfo response = new BaseResponseInfo();\n        try {\n            List<Bill> billList = billService.getDetailByNumber(billNo);\n            if (billList.size() > 0) {\n                response.setData(billList.get(0));\n                response.setStatus(200);\n            } else {\n                response.setStatus(404);\n                response.setMessage(\"Bill not found\");\n            }\n        } catch (Exception e) {\n            response.setStatus(500);\n            response.setMessage(\"Error occurred while fetching bill details\");\n            logger.error(\"Error occurred while fetching bill details\", e);\n        }\n        return response;\n    }", "CodeBleu_score": 36.2220672487199}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t\n    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response.setResponse(billService.getDetailByNumber(billNo));\n        response.setStatusCode(200);\n    } catch (Exception e) {\n        response.setStatusCode(500);\n        response.setResponse(\"An error occurred while fetching bill details.\");\n        log.error(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 31.407671857481724}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\n    BaseResponseInfo response = new BaseResponseInfo();\n    response.setStatus(200);\n    response.setMessage(getMessage(\"depot.find.success\"));\n    try {\n        Depot depot = depotService.findDepotByCurrentUser();\n        response.setData(depot);\n    } catch (Exception e) {\n        response.setStatus(500);\n        response.setMessage(getMessage(\"depot.find.error\"));\n        log.error(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 40.70732277487406}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        Depot depot = depotService.findDepotByCurrentUser(request);\n        res.setData(depot);\n        res.setCode(200);\n    } catch (Exception e) {\n        res.setCode(500);\n        res.setMsg(getMessage(e));\n        logger.error(getMessage(e));\n    }\n    return res;\n}", "CodeBleu_score": 47.59726710861906}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        Depot depot = depotService.findDepotByCurrentUser(request);\n        response.setData(depot);\n        response.setCode(ResponseCode.SUCCESS);\n    } catch (Exception e) {\n        logger.error(\"findDepotByCurrentUser error:\", e);\n        response.setCode(ResponseCode.FAILURE);\n        response.setMessage(getMessage(request, \"findDepotByCurrentUser.error\"));\n    }\n    return response;\n}", "CodeBleu_score": 40.68191950555085}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t\n    JSONArray jsonArray = new JSONArray();\n    JSONObject jsonObject = new JSONObject();\n    JSONArray functionArray = new JSONArray();\n    List<RoleFunction> functionList = roleFunctionService.findRoleFunction(type, keyId);\n    for (RoleFunction function : functionList) {\n        JSONObject functionJson = new JSONObject();\n        functionJson.put(\"functionId\", function.getFunctionId());\n        functionJson.put(\"functionName\", function.getFunctionName());\n        functionJson.put(\"functionUrl\", function.getFunctionUrl());\n        functionJson.put(\"functionDesc\", function.getFunctionDesc());\n        functionJson.put(\"functionIcon\", function.getFunctionIcon());\n        functionJson.put(\"functionType\", function.getFunctionType());\n        functionJson.put(\"functionStatus\", function.getFunctionStatus());\n        functionJson.put(\"functionOrder\", function.getFunctionOrder());\n        functionJson.put(\"functionParentId\", function.getFunctionParentId());\n        functionJson.put(\"functionParentName\", function.getFunctionParentName());\n        functionArray.add(functionJson);\n    }\n    if (functionArray.size() > 0) {\n        if (type.equals(\"1\")) {\n            if (request.getAttribute(\"token\") != null) {\n                String token = request.getAttribute(\"token\").toString();\n                String tenantId = getTenantIdByToken(token);\n                if (!tenantId.equals(\"1\")) {\n                    for (int i = 0; i < functionArray.size(); i++) {\n                        if (functionArray.getJSONObject(i).getString(\"functionName\").equals(\"\u7cfb\u7edf\u7ba1\u7406\")) {\n                            functionArray.remove(i);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    jsonObject.put(\"functionList\", functionArray);\n    jsonArray.add(jsonObject);\n    return jsonArray;\n}", "CodeBleu_score": 38.62493457842089}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    JSONArray jsonArray = new JSONArray();\n    List<RoleFunction> roleFunctionList = roleFunctionService.findRoleFunction(type, keyId);\n    JSONObject jsonObject = new JSONObject();\n    jsonObject.put(\"roleFunctionList\", roleFunctionList);\n    jsonArray.add(jsonObject);\n    return jsonArray;\n}", "CodeBleu_score": 19.089967430141552}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t\n    JSONArray jsonArray = new JSONArray();\n    JSONObject jsonObject = new JSONObject();\n    JSONArray functionList = new JSONArray();\n\n    try {\n        functionList = getFunctionList();\n        for (int i = 0; i < functionList.length(); i++) {\n            JSONObject function = functionList.getJSONObject(i);\n            if (type.equals(\"admin\")) {\n                if (function.getString(\"functionName\").equals(\"\u7cfb\u7edf\u7ba1\u7406\")) {\n                    continue;\n                }\n            }\n            functionList.put(function);\n        }\n        jsonObject.put(\"functionList\", functionList);\n        jsonArray.put(jsonObject);\n    } catch (Exception e) {\n        log.error(\"Error in findRoleFunction: \" + e.getMessage());\n    }\n    return jsonArray;\n}", "CodeBleu_score": 31.965495055299886}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n        response.setData(platformConfig);\n        response.setResponseCode(ResponseCode.SUCCESS.getCode());\n        return response;\n    } catch (Exception e) {\n        logger.error(\"Exception occurred while getting platform configuration information\", e);\n        response.setResponseCode(ResponseCode.ERROR.getCode());\n        response.setResponseMessage(e.getMessage());\n        return response;\n    }\n}", "CodeBleu_score": 47.346938149558206}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response.setData(platformConfigService.getInfoByKey(platformKey));\n        response.setCode(ResponseCode.SUCCESS.getCode());\n    } catch (Exception e) {\n        log.error(\"Exception occurred while getting platform configuration by key: \" + platformKey, e);\n        response.setCode(ResponseCode.FAILURE.getCode());\n        response.setMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 40.82741087744508}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response.setData(platformConfigService.getInfoByKey(platformKey));\n        response.setCode(200);\n    } catch (Exception e) {\n        LOGGER.error(\"Exception while trying to get platform configuration information for key: \" + platformKey, e);\n        response.setCode(500);\n        response.setMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 38.61852588693564}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tList<SystemConfig> configs = getSystemConfig();\n\t\tif (configs.size() > 0) {\n\t\t\tresponse.setCode(200);\n\t\t\tresponse.setData(configs.get(0));\n\t\t} else {\n\t\t\tresponse.setCode(500);\n\t\t\tresponse.setMessage(\"No system configuration found\");\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(e);\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 31.764240093347134}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> configs = getSystemConfig();\n        if (configs.size() > 0) {\n            response.setResponseCode(200);\n            response.setResponseObject(configs.get(0));\n        }\n    } catch (Exception e) {\n        logger.error(\"Exception: \", e);\n        response.setResponseCode(500);\n        response.setErrorMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 36.9252477828842}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\n    BaseResponseInfo response = new BaseResponseInfo();\n\n    try {\n        List<SystemConfig> systemConfigs = getSystemConfig();\n        if (systemConfigs != null && systemConfigs.size() > 0) {\n            response.setCode(200);\n            response.setData(systemConfigs.get(0));\n        } else {\n            response.setCode(404);\n            response.setMessage(\"No system configuration information found.\");\n        }\n    } catch (Exception e) {\n        log.error(\"Exception while retrieving system configuration information.\", e);\n        response.setCode(500);\n        response.setMessage(\"Exception while retrieving system configuration information.\");\n    }\n\n    return response;\n}", "CodeBleu_score": 31.045759130590493}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tString path = request.getParameter(\"path\");\n\t\tString fileName = request.getParameter(\"fileName\");\n\t\tString fileType = request.getParameter(\"fileType\");\n\t\tString fileSize = request.getParameter(\"fileSize\");\n\t\tString fileId = request.getParameter(\"fileId\");\n\t\tString fileId2 = request.getParameter(\"fileId2\");\n\t\tString fileId3 = request.getParameter(\"fileId3\");\n\t\tString fileId4 = request.getParameter(\"fileId4\");\n\t\tString fileId5 = request.getParameter(\"fileId5\");\n\t\tString fileId6 = request.getParameter(\"fileId6\");\n\t\tString fileId7 = request.getParameter(\"fileId7\");\n\t\tString fileId8 = request.getParameter(\"fileId8\");\n\t\tString fileId9 = request.getParameter(\"fileId9\");\n\t\tString fileId10 = request.getParameter(\"fileId10\");\n\t\tString fileId11 = request.getParameter(\"fileId11\");\n\t\tString fileId12 = request.getParameter(\"fileId12\");\n\t\tString fileId13 = request.getParameter(\"fileId13\");\n\t\tString fileId14 = request.getParameter(\"fileId14\");\n\t\tString fileId15 = request.getParameter(\"fileId15\");\n\t\tString fileId16 = request.getParameter(\"fileId16\");\n\t\tString fileId17 = request.getParameter(\"fileId17\");\n\t\tString fileId18 = request.getParameter(\"fileId18\");\n\t\tString fileId19 = request.getParameter(\"fileId19\");\n\t\tString fileId20 = request.getParameter(\"fileId20\");\n\t\tString fileId21 = request.getParameter(\"fileId21\");\n\t\tString fileId22 = request.getParameter(\"fileId22\");\n\t\tString fileId23 = request.getParameter(\"fileId23\");\n\t\tString fileId24 = request.getParameter(\"fileId24\");\n\t\tString file", "CodeBleu_score": 21.29815660634752}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        String path = getParameter(request, \"path\");\n        String type = getParameter(request, \"type\");\n        String filename = getParameter(request, \"filename\");\n        String filePath = getParameter(request, \"filePath\");\n        String fileId = getParameter(request, \"fileId\");\n        String fileType = getParameter(request, \"fileType\");\n        String fileSize = getParameter(request, \"fileSize\");\n        String fileMd5 = getParameter(request, \"fileMd5\");\n        String fileKey = getParameter(request, \"fileKey\");\n        String fileUrl = getParameter(request, \"fileUrl\");\n        String fileServer = getParameter(request, \"fileServer\");\n        String fileBucket = getParameter(request, \"fileBucket\");\n        String fileLocation = getParameter(request, \"fileLocation\");\n        String fileParentId = getParameter(request, \"fileParentId\");\n        String fileParentPath = getParameter(request, \"fileParentPath\");\n        String fileOwner = getParameter(request, \"fileOwner\");\n        String fileShare = getParameter(request, \"fileShare\");\n        String fileThumbnail = getParameter(request, \"fileThumbnail\");\n        String fileCategory = getParameter(request, \"fileCategory\");\n        String fileWidth = getParameter(request, \"fileWidth\");\n        String fileHeight = getParameter(request, \"fileHeight\");\n        String fileDuration = getParameter(request, \"fileDuration\");\n        String fileStatus = getParameter(request, \"fileStatus\");\n        String fileRemark = getParameter(request, \"fileRemark\");\n        String fileCreateTime = getParameter(request, \"fileCreateTime\");\n        String fileUpdateTime = getParameter(request, \"fileUpdateTime\");\n        String fileDeleteTime = getParameter(request, \"fileDeleteTime\");\n        String fileDeleteFlag = getParameter(request, \"fileDeleteFlag\");\n        String fileVersion = getParameter(request, \"fileVersion\");\n        String fileSort = getParameter(request, \"fileSort\");\n        String fileExtend = getParameter(request, \"fileExtend\");\n        String fileOriginal = getParameter(request", "CodeBleu_score": 19.883937064410805}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\n    BaseResponseInfo res = new BaseResponseInfo();\n    String filePath = \"\";\n    FileItem file = null;\n    String fileType = \"\";\n    String fileName = \"\";\n    String filePathName = \"\";\n    String businessPath = \"\";\n    String fileId = \"\";\n    String fileUrl = \"\";\n    String fileSize = \"\";\n    String fileMd5 = \"\";\n    String fileExtension = \"\";\n    String fileContentType = \"\";\n    String fileStoreType = \"\";\n    String fileStoreServer = \"\";\n    String fileStorePath = \"\";\n    String fileStoreName = \"\";\n    String fileStoreKey = \"\";\n    String fileStoreUrl = \"\";\n    String fileStoreSize = \"\";\n    String fileStoreMd5 = \"\";\n    String fileStoreExtension = \"\";\n    String fileStoreContentType = \"\";\n    String fileStorePathName = \"\";\n    String fileStoreId = \"\";\n    String fileStoreUrlName = \"\";\n    String fileStoreUrlPath = \"\";\n    String fileStoreUrlPathName = \"\";\n    String fileStoreUrlPathId = \"\";\n    String fileStoreUrlPathNameId = \"\";\n    String fileStoreUrlPathNameIdValue = \"\";\n    String fileStoreUrlPathNameIdValueMd5 = \"\";\n    String fileStoreUrlPathNameIdValueName = \"\";\n    String fileStoreUrlPathNameIdValueSize = \"\";\n    String fileStoreUrlPathNameIdValueExtension = \"\";\n    String fileStoreUrlPathNameIdValueContentType = \"\";\n    String fileStoreUrlPathNameIdValueUrl = \"\";\n    String fileStoreUrlPathNameIdValueUrlPath = \"\";\n    String fileStoreUrlPathNameIdValueUrlPathId = \"\";\n    String fileStoreUrlPathNameIdValueUrlPathName = \"\";\n    String fileStoreUrlPathNameIdValueUrlPathNameId = \"\";\n    String fileStoreUrlPathNameIdValueUrlPathNameIdValue = \"\";\n    String fileStoreUrlPathNameIdValueUrlPathNameIdValueMd5 = \"\";\n    String fileStoreUrlPathNameIdValueUrlPathNameIdValueName = \"\";\n    String fileStoreUrlPathNameIdValueUrlPathNameIdValueSize = \"\";\n    String fileStoreUrlPathNameIdValueUrlPathNameIdValueExtension = \"\";\n    String fileStoreUrlPathNameIdValueUrlPathNameIdValueContentType = \"\";", "CodeBleu_score": 12.309790296902511}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t        try {\n            String title = jsonObject.getString(\"title\");\n            JSONArray head = jsonObject.getJSONArray(\"head\");\n            JSONArray tip = jsonObject.getJSONArray(\"tip\");\n            JSONArray data = jsonObject.getJSONArray(\"data\");\n            String fileName = title + \".xlsx\";\n            response.setContentType(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\n            response.setHeader(\"Content-Disposition\", \"attachment;filename=\" + new String(fileName.getBytes(), \"iso-8859-1\"));\n            ExcelUtil.exportExcel(title, head, tip, data, response.getOutputStream());\n        } catch (Exception e) {\n            logger.error(\"\u5bfc\u51faExcel\u5f02\u5e38{}\", e);\n        }\n    }", "CodeBleu_score": 48.89860025128706}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t        String title = \"\";\n        String head = \"\";\n        String tip = \"\";\n        String data = \"\";\n        try {\n            title = jsonObject.getString(\"title\");\n            head = jsonObject.getString(\"head\");\n            tip = jsonObject.getString(\"tip\");\n            data = jsonObject.getString(\"data\");\n        } catch (JSONException e) {\n            e.printStackTrace();\n        }\n        try {\n            response.setContentType(\"application/vnd.ms-excel;charset=utf-8\");\n            response.setHeader(\"Content-Disposition\", \"attachment;filename=\" + URLEncoder.encode(\"\u6570\u636e\u5bfc\u51fa.xls\", \"UTF-8\"));\n            response.setHeader(\"Pragma\", \"no-cache\");\n            response.setHeader(\"Cache-Control\", \"no-cache\");\n            response.setDateHeader(\"Expires\", 0);\n            ExcelUtil.exportExcel(title, head, tip, data, response.getOutputStream());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }", "CodeBleu_score": 42.27398936583243}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t     try {\n         // Get the title and head from the JSON object\n         String title = jsonObject.getString(\"title\");\n         String[] head = jsonObject.getJSONArray(\"head\").toArray(new String[0]);\n\n         // Get the data list from the JSON object\n         JSONArray dataList = jsonObject.getJSONArray(\"dataList\");\n\n         // Get the tip from the JSON object\n         String tip = jsonObject.getString(\"tip\");\n\n         // Call the service to perform the export\n         exportExcelByParam(title, head, dataList, tip, response);\n     }\n     catch (Exception e) {\n         log.error(e.getMessage(), e);\n     }\n }", "CodeBleu_score": 64.04998158362326}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\t// Get the account number from the object\n\tString accountNumber = obj.getString(\"accountNumber\");\n\t// Get the name of the account from the object\n\tString name = obj.getString(\"name\");\n\t// Get the initial amount from the object\n\tdouble initialAmount = 0;\n\tif (obj.has(\"initialAmount\")) {\n\t\tinitialAmount = obj.getDouble(\"initialAmount\");\n\t}\n\t// Get the default flag from the object\n\tboolean isDefault = false;\n\tif (obj.has(\"isDefault\")) {\n\t\tisDefault = obj.getBoolean(\"isDefault\");\n\t}\n\t// Get the enabled flag from the object\n\tboolean enabled = true;\n\tif (obj.has(\"enabled\")) {\n\t\tenabled = obj.getBoolean(\"enabled\");\n\t}\n\t// Create the account object\n\tAccount account = new Account(accountNumber, name, initialAmount, isDefault, enabled);\n\t// Insert the account\n\tint result = account.insert();\n\t// Log the operation\n\tAccountLog.insert(account, \"INSERT\", request);\n\t// Return the result\n\treturn result;\n}", "CodeBleu_score": 32.10091915159457}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t  Account account = new Account();\n  account.parseObject(obj);\n  account.setInitialAmount(getInitialAmount(account.getType()));\n  account.setIsDefault(isDefault(account.getType()));\n  account.setEnabled(true);\n  int result = account.insert();\n  account.insertLog(request);\n  return result;\n}", "CodeBleu_score": 22.365883847558678}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t    Account account = new Account();\n    int result = 0;\n    try {\n        account.parseObject(obj);\n        account.setInitialAmount(0);\n        account.setEnabled(true);\n        account.setIsDefault(false);\n        account.setInitialAmount(obj.getInt(\"initialAmount\"));\n        if (obj.getBoolean(\"isDefault\")) {\n            account.setIsDefault(true);\n        }\n        result = account.insert();\n        account.insertLog(request);\n    } catch (Exception e) {\n        e.printStackTrace();\n        account.writeFail(e, request);\n    }\n    return result;\n}", "CodeBleu_score": 40.02854253252548}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    try {\n        return mapper.countByNameAndSerialNo(name, serialNo);\n    } catch (Exception e) {\n        log.error(\"Error counting accounts with name {} and serial no {}.\", name, serialNo, e);\n        return null;\n    }\n}", "CodeBleu_score": 30.035807973393602}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    Long count = null;\n    try {\n        count = countsByAccount.getCount(name, serialNo);\n    } catch (Exception e) {\n        logger.error(\"Failed to get count of accounts with name \" + name + \" and serial number \" + serialNo, e);\n    }\n    return count;\n}", "CodeBleu_score": 47.9900582746248}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    Long count = null;\n    try {\n        count = countsByAccount.getCount(name, serialNo);\n    } catch (Exception e) {\n        logger.error(\"Error getting count of accounts with name \" + name + \" and serial no. \" + serialNo, e);\n    }\n    return count;\n}", "CodeBleu_score": 47.95034694873135}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\n\t\tint result = 0;\n\t\ttry {\n\t\t\tresult = depotItemMapper.deleteByPrimaryKey(id);\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"deleteByPrimaryKey is error\", e);\n\t\t\tthrow e;\n\t\t}\n\t\treturn result;\n\t}", "CodeBleu_score": 60.07141018290649}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    int result = 0;\n    try {\n        result = depotItemMapper.deleteByPrimaryKey(id);\n    } catch (Exception e) {\n        logger.error(\"Exception in DepotItemService.deleteDepotItem()\", e);\n        request.setAttribute(\"error\", e.getMessage());\n    }\n    return result;\n}", "CodeBleu_score": 57.29551867784344}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    try {\n        return depotItemMapper.deleteByPrimaryKey(id);\n    } catch (Exception e) {\n        logger.error(\"Exception in deleteDepotItem: \" + e.getMessage());\n        request.setAttribute(\"error\", e.getMessage());\n        return 0;\n    }\n}", "CodeBleu_score": 30.901701050697604}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t    HttpClient client = HttpClientBuilder.create().build();\n    HttpGet request = new HttpGet(getEndpoint(projectName) + \"/\" + nodeType + \"/\" + nodeKey);\n    try {\n        HttpResponse response = client.execute(request);\n        if (response.getEntity() != null) {\n            return true;\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    } finally {\n        request.releaseConnection();\n    }\n    return false;\n}", "CodeBleu_score": 32.64506062059193}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t    try {\n        // Create the HTTP client\n        HttpClient client = HttpClientBuilder.create().build();\n\n        // Create the request URL\n        String url = String.format(\"http://%s:%s/rest/api/1.0/projects/%s/nodes/%s\",\n            getHost(), getPort(), projectName, nodeType);\n\n        // Create the request\n        HttpGet request = new HttpGet(url);\n        request.addHeader(\"Content-Type\", \"application/json\");\n        request.addHeader(\"Authorization\", getAuthorization());\n\n        // Execute the request\n        HttpResponse response = client.execute(request);\n\n        // Process the response\n        if (response.getStatusLine().getStatusCode() == 200) {\n            // Get the response entity\n            HttpEntity entity = response.getEntity();\n\n            // Get the response content\n            String content = EntityUtils.toString(entity);\n\n            // Parse the response content\n            JsonObject json = new JsonParser().parse(content).getAsJsonObject();\n            String key = json.get(\"key\").getAsString();\n\n            // If the key is not null, return true\n            if (key != null) {\n                return true;\n            }\n        }\n\n        // Return false\n        return false;\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n\n    // Return false\n    return false;\n}", "CodeBleu_score": 49.48825413516996}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t    try {\n        // create the HTTP client\n        CloseableHttpClient httpclient = HttpClients.createDefault();\n\n        // create the request URL\n        String requestUrl = String.format(\n            \"%s/rest/api/2/project/%s/usermetadata?key=%s&value=%s\",\n            jiraBaseUrl,\n            projectName,\n            nodeType,\n            nodeKey\n        );\n\n        // create the request\n        HttpGet httpGet = new HttpGet(requestUrl);\n\n        // execute the request\n        CloseableHttpResponse response = httpclient.execute(httpGet);\n\n        // process the response\n        if (response.getStatusLine().getStatusCode() == 200) {\n            // get the response entity\n            HttpEntity entity = response.getEntity();\n            if (entity != null) {\n                // read the response entity\n                String responseString = EntityUtils.toString(entity);\n                // parse the response entity\n                JsonObject responseObject = JsonParser.parseString(responseString).getAsJsonObject();\n                // return true if the response contains a key\n                if (responseObject.has(\"key\")) {\n                    return true;\n                }\n            }\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        // close the HTTP client\n        try {\n            httpclient.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return false;\n}", "CodeBleu_score": 42.72348076132949}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t    // Create the URL to send the request to\n    String url = \"http://\" + getHost() + \":\" + getPort() + \"/addEdge\";\n\n    // Create the parameters for the request\n    List<NameValuePair> params = new ArrayList<>();\n    params.add(new BasicNameValuePair(\"projectName\", projectName));\n    params.add(new BasicNameValuePair(\"edgeType\", edgeType));\n    params.add(new BasicNameValuePair(\"fromType\", fromType));\n    params.add(new BasicNameValuePair(\"toType\", toType));\n    params.add(new BasicNameValuePair(\"from\", from));\n    params.add(new BasicNameValuePair(\"to\", to));\n\n    // Send the request and get the response\n    CloseableHttpResponse response = execute(url, params);\n\n    // Get the JSON response\n    JsonObject responseJson = readValue(response);\n\n    // Ensure the key \"key\" is in the response\n    if (responseJson.has(\"key\")) {\n        return true;\n    } else {\n        return false;\n    }\n}", "CodeBleu_score": 29.752172573686103}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t    try {\n        // Create the URI to access the REST API.\n        URIBuilder builder = new URIBuilder(String.format(\"%s/edge/%s/%s/%s/%s/%s\", getEndpoint(), projectName, edgeType, fromType, from, to));\n\n        // Create the request.\n        HttpGet request = new HttpGet(builder.build());\n\n        // Execute the request.\n        CloseableHttpResponse response = execute(request);\n\n        // Get the JSON response.\n        JSONObject json = readValue(response);\n\n        // Determine if the request was successful.\n        boolean success = json.has(\"key\");\n\n        // Close the response.\n        close(response);\n\n        return success;\n    } catch (Exception e) {\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 34.035530310350424}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t    String url = getProtocol() + \"://\" + getHost() + \":\" + getPort() + \"/addEdge\";\n    String response = null;\n    try {\n        CloseableHttpClient client = HttpClients.createDefault();\n        List<NameValuePair> params = new ArrayList<NameValuePair>();\n        params.add(new BasicNameValuePair(\"projectName\", projectName));\n        params.add(new BasicNameValuePair(\"edgeType\", edgeType));\n        params.add(new BasicNameValuePair(\"fromType\", fromType));\n        params.add(new BasicNameValuePair(\"toType\", toType));\n        params.add(new BasicNameValuePair(\"from\", from));\n        params.add(new BasicNameValuePair(\"to\", to));\n        HttpGet get = new HttpGet(url);\n        get.setEntity(new UrlEncodedFormEntity(params));\n        CloseableHttpResponse httpResponse = client.execute(get);\n        response = EntityUtils.toString(httpResponse.getEntity());\n        if (response.contains(\"key\")) {\n            return true;\n        } else {\n            return false;\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 43.31465054385504}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\t    if (event == null || event.getMessage() == null) {\n        return;\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(acquireTestingLocation());\n    }\n    event.setTime(System.currentTimeMillis());\n    String jsonString = writeValueAsString(event);\n    String topic = getTarget();\n    if (topic == null) {\n        topic = \"test\";\n    }\n    ProducerRecord<String, String> record = new ProducerRecord<>(topic, jsonString);\n    producer.send(record);\n    producer.flush();\n}", "CodeBleu_score": 44.35950447665435}, {"code": "public void sendEvent(Event event){\n\t    if (event == null || event.getMessage() == null) {\n        return;\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(acquireTestingLocation());\n    }\n    event.setTime(System.currentTimeMillis());\n    String json = writeValueAsString(event);\n    if (target == null) {\n        target = \"test\";\n    }\n    ProducerRecord<String, String> record = new ProducerRecord<>(target, json);\n    producer.send(record);\n    producer.flush();\n}", "CodeBleu_score": 39.725741507778736}, {"code": "public void sendEvent(Event event){\n\t    if (event == null || event.getMessage() == null) {\n        return;\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(acquireTestingLocation());\n    }\n    event.setTime(System.currentTimeMillis());\n    String json = writeValueAsString(event);\n    String topic = getTarget();\n    if (topic == null) {\n        topic = \"test\";\n    }\n    ProducerRecord<String, String> record = new ProducerRecord<>(topic, json);\n    producer.send(record);\n    producer.flush();\n}", "CodeBleu_score": 43.468271520900394}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t  OSS ossClient = getOssClient();\n  try {\n    ossClient.putObject(getOssBucket(), objName, new ByteArrayInputStream(content));\n    return ossClient.generatePresignedUrl(getOssBucket(), objName).toString();\n  } catch (Exception e) {\n    e.printStackTrace();\n    throw new RuntimeException(\"Failed to upload object \" + objName + \" to OSS bucket \" + getOssBucket() + \" due to \" + e.getMessage());\n  } finally {\n    shutdown();\n  }\n}", "CodeBleu_score": 27.90456623201152}, {"code": "public String upload(String objName, byte[] content){\n\t    // 1. Initialize the OSS client with access credentials.\n    OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);\n\n    // 2. Upload the file content as an object with the specified name.\n    PutObjectResult result = ossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\n    // 3. Shut down the OSS client.\n    ossClient.shutdown();\n\n    // 4. Return the URL of the uploaded object.\n    return result.getResponse().getUrl();\n}", "CodeBleu_score": 30.403543568323677}, {"code": "public String upload(String objName, byte[] content){\n\t    OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);\n    PutObjectResult result = ossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n    ossClient.shutdown();\n    return result.getObjectUrl();\n}", "CodeBleu_score": 30.164784008857392}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t    IpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return getLocationInfoByIP(\"unknown\");\n    }\n    return worker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 28.48842039730225}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\tIpToLocationWorker worker = getIpToLocationWorker();\n\tif (worker == null) {\n\t\treturn getLocationInfoByIP(\"unknown\");\n\t}\n\treturn worker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 27.090627095170323}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\tif (ipAddress == null) {\n\t\tthrow new IllegalArgumentException(\"ipAddress cannot be null\");\n\t}\n\tIpToLocationWorker worker = getIpToLocationWorker();\n\tif (worker == null) {\n\t\treturn new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\");\n\t}\n\treturn worker.getLocationInfo(ipAddress);\n}", "CodeBleu_score": 32.72731234124658}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\t    if (lowLevelClient == null || highLevelClient == null) {\n        synchronized (this) {\n            if (lowLevelClient == null || highLevelClient == null) {\n                if (logger.isDebugEnabled()) {\n                    logger.debug(\"Initializing Elasticsearch client for \" + clusterName);\n                }\n                // Get the cluster hosts and ports.\n                List<String> hosts = getClusterHostList();\n                List<Integer> ports = getClusterHostPort();\n\n                // Build the low-level and high-level REST clients.\n                lowLevelClient = builder.setHosts(hosts).setPorts(ports).build();\n                highLevelClient = new RestHighLevelClient(lowLevelClient);\n            }\n        }\n    }\n}", "CodeBleu_score": 43.74620294273684}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t    if (esClient == null || esHighLevelClient == null) {\n        synchronized (this) {\n            if (esClient == null || esHighLevelClient == null) {\n                parseHosts();\n                esClient = builder.build();\n                esHighLevelClient = new RestHighLevelClient(esClient);\n            }\n        }\n    }\n}", "CodeBleu_score": 33.30202675680459}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (esClient == null) {\n\t\tsynchronized (this) {\n\t\t\tif (esClient == null) {\n\t\t\t\tesClient = new RestHighLevelClient(RestClient.builder(getClusterHostList().toArray(new HttpHost[0])));\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 31.03584145907246}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<>();\n    if (clusterHostList != null && !clusterHostList.trim().isEmpty()) {\n        String[] hostList = clusterHostList.split(\",\");\n        for (String host : hostList) {\n            String[] hostPort = host.split(\":\");\n            if (hostPort.length == 1) {\n                hosts.add(new HttpHost(hostPort[0], clusterPort));\n            } else if (hostPort.length == 2) {\n                hosts.add(new HttpHost(hostPort[0], Integer.parseInt(hostPort[1])));\n            } else {\n                throw new IllegalArgumentException(\"Invalid hostname:port string: \" + host);\n            }\n        }\n    }\n    return hosts;\n}", "CodeBleu_score": 41.53013658535921}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> httpHosts = new ArrayList<>();\n    String[] hosts = clusterHostList.split(\",\");\n    for (String host : hosts) {\n        String[] hostParts = host.split(\":\");\n        if (hostParts.length == 2) {\n            httpHosts.add(new HttpHost(hostParts[0], Integer.parseInt(hostParts[1])));\n        } else {\n            httpHosts.add(new HttpHost(hostParts[0], clusterPort));\n        }\n    }\n    return httpHosts;\n}", "CodeBleu_score": 48.939990490353225}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> httpHosts = new ArrayList<HttpHost>();\n    if (clusterHostList == null || clusterHostList.trim().equals(\"\")) {\n        return httpHosts;\n    }\n    String[] hosts = clusterHostList.split(\",\");\n    for (String host : hosts) {\n        if (host.trim().equals(\"\")) {\n            continue;\n        }\n        String[] hostAndPort = host.split(\":\");\n        int port = clusterPort;\n        if (hostAndPort.length > 1) {\n            port = Integer.parseInt(hostAndPort[1].trim());\n        }\n        httpHosts.add(new HttpHost(hostAndPort[0].trim(), port));\n    }\n    return httpHosts;\n}", "CodeBleu_score": 44.093754980878344}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\t    // Poll for tasks\n    List<Task> tasks = get(30000);\n    if (tasks == null || tasks.isEmpty()) {\n        return;\n    }\n\n    // Process tasks\n    for (Task task : tasks) {\n        // Process plain text message tasks\n        if (task.getType() == Task.Type.PLAIN_TEXT_MESSAGE) {\n            // Extract the recipient number and message data\n            String recipient = task.getRecipient();\n            String message = task.getMessage();\n\n            // Validate the recipient number\n            if (recipient == null || recipient.isEmpty()) {\n                // Log an error message\n                error(\"Invalid recipient number: \" + recipient);\n                continue;\n            }\n\n            // Validate the message data\n            if (message == null || message.isEmpty()) {\n                // Log an error message\n                error(\"Invalid message data: \" + message);\n                continue;\n            }\n\n            // Send the message\n            try {\n                sendPlainTextMessage(recipient, message);\n            } catch (Exception e) {\n                // Log an error message\n                error(\"Exception sending message: \" + e.getMessage());\n                e.printStackTrace();\n            }\n        }\n    }\n}", "CodeBleu_score": 27.492942640710222}, {"code": "protected void pollingWork() throws InterruptedException{\n\t    // Retrieve the next task from the queue.\n    Task task = poll(30, TimeUnit.SECONDS);\n    if (task != null) {\n        // Check the task type.\n        if (task instanceof PlainTextMessageTask) {\n            // Extract the recipient number and message data.\n            PlainTextMessageTask plainTextMessageTask = (PlainTextMessageTask) task;\n            String recipientNumber = plainTextMessageTask.getRecipientNumber();\n            String messageData = plainTextMessageTask.getMessageData();\n            // Validate the message data.\n            if (messageData == null || messageData.length() == 0) {\n                // Log an error message.\n                println(\"Message data is invalid for recipient number \" + recipientNumber);\n                return;\n            }\n            // Send the message.\n            try {\n                sendPlainTextMessage(recipientNumber, messageData);\n            } catch (Exception e) {\n                // Log an error message.\n                println(\"An exception occurred while sending a plain text message to \" + recipientNumber);\n                get().printStackTrace(e);\n            }\n        } else {\n            // Log an error message.\n            println(\"Received an unsupported task type\");\n        }\n    }\n}", "CodeBleu_score": 32.21317239947952}, {"code": "protected void pollingWork() throws InterruptedException{\n\t    // Get a task from the queue.\n    Task task = queue.poll(30, TimeUnit.SECONDS);\n\n    // If a task was retrieved, check the task type.\n    if (task != null) {\n        switch (task.getType()) {\n            case SEND_MESSAGE:\n                // For a plain text message task, extract the recipient number and message data.\n                SendMessageTask sendMessageTask = (SendMessageTask) task;\n                String recipient = sendMessageTask.getRecipient();\n                String message = sendMessageTask.getMessage();\n\n                // Validate the message data.\n                if (recipient != null && message != null) {\n                    try {\n                        // Send the message.\n                        sendPlainTextMessage(recipient, message);\n                    } catch (Exception e) {\n                        // If an exception occurs, log the error message.\n                        e.printStackTrace();\n                    }\n                }\n                break;\n            default:\n                // For any other task type, log an error message.\n                println(\"Unknown task type: \" + task.getType());\n        }\n    }\n}", "CodeBleu_score": 33.17031083019071}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t    // Create an HttpClient instance\n    CloseableHttpClient httpclient = getHttpClient();\n    // Create a GET request to the specified URI\n    HttpGet request = new HttpGet(uri);\n    // Execute the request and retrieve the response\n    CloseableHttpResponse response = httpclient.execute(request);\n    // Get the response entity\n    HttpEntity entity = response.getEntity();\n    // Convert the response entity to a string\n    String content = EntityUtils.toString(entity);\n    // Log the content\n    System.out.println(content);\n    // Close the response\n    response.close();\n    // Return the content\n    return content;\n}", "CodeBleu_score": 65.83732664237148}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t    try (CloseableHttpClient httpclient = getHttpClient()) {\n        HttpGet httpget = new HttpGet(uri);\n        httpget.addHeader(\"accept\", \"application/xml\");\n        try (CloseableHttpResponse response = httpclient.execute(httpget)) {\n            HttpEntity entity = response.getEntity();\n            String content = EntityUtils.toString(entity, \"UTF-8\");\n            System.out.println(content);\n            return content;\n        }\n    }\n}", "CodeBleu_score": 49.73398961815396}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t    // Create a CloseableHttpClient\n    CloseableHttpClient httpclient = getHttpClient();\n\n    // Create a HttpGet request\n    HttpGet httpGet = new HttpGet(uri);\n\n    // Execute the request\n    HttpResponse response = httpclient.execute(httpGet);\n\n    // Get the response entity\n    HttpEntity entity = response.getEntity();\n\n    // If the entity is not null, return the content as a string\n    if (entity != null) {\n        return EntityUtils.toString(entity, \"UTF-8\");\n    }\n\n    // If the entity is null, return an empty string\n    return \"\";\n}", "CodeBleu_score": 50.274043459775}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t    Map<String, Object> result = null;\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document doc = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes()));\n    Node root = doc.getDocumentElement();\n    if (root != null) {\n        result = decodeNodeToMap(root, doTrim);\n    }\n    return result;\n}", "CodeBleu_score": 46.22177780387713}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t    Map<String, Object> result = null;\n    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    InputSource is = new InputSource(new StringReader(messageXmlStr));\n    Document doc = builder.parse(is);\n    if (doc != null) {\n        result = decodeNodeToMap(doc.getDocumentElement(), doTrim);\n    }\n    return result;\n}", "CodeBleu_score": 45.33238418100489}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\n\tMap<String, Object> decodedMap = null;\n\n\tDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder db = dbf.newDocumentBuilder();\n\tDocument doc = db.parse(new ByteArrayInputStream(messageXmlStr.getBytes()));\n\n\tNodeList nl = doc.getChildNodes();\n\tif (nl != null && nl.getLength() > 0) {\n\t\tdecodedMap = decodeNodeToMap(nl.item(0), doTrim);\n\t}\n\n\treturn decodedMap;\n}", "CodeBleu_score": 38.435020350451175}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tif (!isEligibleForAutoProcessing(orderRecord)) {\n\t\taddLog(orderRecord, \"Order is not eligible for auto-processing; skipping\");\n\t\treturn;\n\t}\n\n\tfinal String trxName = getTrxName(orderRecord);\n\tscheduleIfNotPostponed(orderRecord, trxName);\n\taddLog(orderRecord, \"Order is eligible for auto-processing; enqueuing for automatic shipping and invoicing\");\n\tfinal IWorkpackageQueue queue = Services.get(IWorkpackageQueueFactory.class).getQueueForEnqueuing(I_C_Order.Table_Name);\n\tqueue.enqueueWorkpackage(IWorkpackageQueue.C_Queue_WorkPackageProcessor_Shipment, I_C_Order.Table_Name, orderRecord.getC_Order_ID(), trxName);\n}", "CodeBleu_score": 45.85487385962581}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tfinal IOrderBL orderBL = Services.get(IOrderBL.class);\n\tfinal IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n\tfinal ITrxManager trxManager = Services.get(ITrxManager.class);\n\tfinal IOrderScheduleBL orderScheduleBL = Services.get(IOrderScheduleBL.class);\n\n\t//\n\t// Check if order is eligible for auto-processing\n\tif (!orderBL.isEligibleForAutoProcessing(orderRecord))\n\t{\n\t\taddLog(\"@Skip@ @C_Order_ID@ \" + orderRecord.getDocumentNo(), orderRecord);\n\t\treturn;\n\t}\n\n\t//\n\t// Check if order already has a scheduled task\n\tif (orderDAO.hasScheduledTask(orderRecord))\n\t{\n\t\taddLog(\"@Skip@ @C_Order_ID@ \" + orderRecord.getDocumentNo() + \" - already scheduled\", orderRecord);\n\t\treturn;\n\t}\n\n\t//\n\t// Enqueue task\n\tfinal String trxName = orderRecord.getTrxName();\n\tfinal ITrx trx = trxManager.getTrx(trxName);\n\tfinal ITrxRunnable trxRunnable = trxManager.getTrxRunnable(trx, TrxPropagation.REQUIRES_NEW);\n\ttrxRunnable.run(() -> {\n\t\tfinal OrderId orderId = OrderId.ofRepoId(orderRecord.getC_Order_ID());\n\t\torderScheduleBL.scheduleIfNotPostponed(orderId);\n\t\taddLog(\"@C_Order_ID@ \" + orderRecord.getDocumentNo(), orderRecord);\n\t});\n}", "CodeBleu_score": 47.078643312789126}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tfinal IOrderBL orderBL = Services.get(IOrderBL.class);\n\tfinal IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n\n\tif (!isEligibleForAutoProcessing(orderRecord))\n\t{\n\t\taddLog(orderRecord, \"Order is not eligible for automatic processing. Skipping.\");\n\t\treturn;\n\t}\n\n\taddLog(orderRecord, \"Enqueuing order for automatic processing.\");\n\n\tfinal I_C_Order order = orderDAO.getById(OrderId.ofRepoId(orderRecord.getC_Order_ID()));\n\tfinal I_C_OrderLine orderLine = orderDAO.retrieveOrderLines(order)\n\t\t\t.stream()\n\t\t\t.filter(ol -> ol.getC_OrderLine_ID() == orderRecord.getC_OrderLine_ID())\n\t\t\t.findFirst()\n\t\t\t.orElse(null);\n\n\tfinal I_C_DocType docType = orderBL.getDocTypeOrNull(order);\n\tfinal String trxName = getTrxName(docType);\n\n\tfinal I_C_OrderLine ol = orderDAO.getOrderLineById(OrderLineId.ofRepoId(orderRecord.getC_OrderLine_ID()));\n\tfinal I_C_OrderLine olToEnqueue = ol.getC_OrderLine_ID() == orderLine.getC_OrderLine_ID() ? ol : orderLine;\n\n\tfinal I_C_Order orderToEnqueue = orderDAO.getById(OrderId.ofRepoId(orderRecord.getC_Order_ID()));\n\n\tfinal I_C_OrderLine_Schedule olSchedule = orderDAO.retrieveOrderLineSchedules(orderToEnqueue)\n\t\t\t.stream()\n\t\t\t.filter(ols -> ols.getC_OrderLine_ID() == olToEnqueue.getC_OrderLine_ID())\n\t\t\t.findFirst()\n\t\t\t.orElse(null);\n\n\tfinal I_C_OrderLine_Schedule olScheduleToEnqueue = olSchedule != null && olSchedule.get", "CodeBleu_score": 37.68161706575815}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = User::where('email', $request->email)->first();\n    if (! $user || ! Hash::check($request->password, $user->password)) {\n        $this->fireFailedEvent($request);\n        throw ValidationException::withMessages([\n            $this->username() => [trans('auth.failed')],\n        ]);\n    }\n    return $user;\n}", "CodeBleu_score": 50.99495950563855}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = User::where('email', $request->email)->first();\n    if (! $user || ! Hash::check($request->password, $user->password)) {\n        $this->fireFailedEvent($request);\n        throw ValidationException::withMessages([\n            $this->username() => [trans('auth.failed')],\n        ]);\n    }\n    return $user;\n}", "CodeBleu_score": 50.99495950563855}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = User::where('email', $request->email)->first();\n\n    if ($user && $this->guard->getProvider()->validateCredentials($user, $request->password)) {\n        return $user;\n    }\n\n    $this->fireFailedEvent($request);\n\n    $this->guard->logout();\n\n    throw new AuthenticationException(\n        $this->failedLoginMessage,\n        [$this->username(), 'password'],\n        $this->username()\n    );\n}", "CodeBleu_score": 51.11301752642377}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter->increment($request);\n\n    throw ValidationException::withMessages([\n        $this->username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 73.23214040644866}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter->increment($request);\n    throw ValidationException::withMessages([\n        $this->username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 73.23214040644866}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter->increment($request);\n    $seconds = $this->limiter->availableIn($request);\n    throw ValidationException::withMessages([\n        'email' => [trans('auth.failed', [\n            'seconds' => $seconds,\n            'minutes' => ceil($seconds / 60),\n        ])],\n    ]);\n}", "CodeBleu_score": 59.001533900619194}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t    $user = $request->session()->get('login.id');\n\n    if (is_null($user)) {\n        throw new AuthenticationException;\n    }\n\n    $user = User::find($user);\n\n    $data = [\n        'twoFactor' => optional($user)->two_factor_secret && ! is_null(optional($user)->two_factor_confirmed_at),\n        'remember' => $request->session()->get('login.remember'),\n    ];\n\n    if ($user) {\n        $data['publicKey'] = $user->createToken('webauthn')->publicKeyForWebAuthn();\n    }\n\n    return Inertia::render('Auth/TwoFactorChallenge', $data)->toResponse($request);\n}", "CodeBleu_score": 65.53715308868455}, {"code": "<?\npublic function toResponse($request){\n\t    $data = $request->session()->get('login.id');\n    $user = User::find($data);\n    $data['twoFactor'] = optional($user)->two_factor_secret && ! is_null(optional($user)->two_factor_confirmed_at);\n    $data['remember'] = $request->session()->get('login.remember');\n    return Inertia::render('Auth/TwoFactorChallenge', $data)->toResponse($request);\n}", "CodeBleu_score": 57.616859265977595}, {"code": "<?\npublic function toResponse($request){\n\t    $user = $request->user();\n\n    $data = [\n        'user' => $user,\n        'remember' => $request->session()->get('login.remember'),\n    ];\n\n    if ($user) {\n        $data['webauthn'] = $user->prepareWebauthnAssertion();\n    }\n\n    return Inertia::render('Auth/TwoFactorChallenge', $data)->toResponse($request);\n}", "CodeBleu_score": 44.03532181531672}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    $userToken = UserToken::firstWhere('driver', $driver)\n        ->where('socialite_user_id', $socialite->getId())\n        ->first();\n\n    if (! $userToken) {\n        $user = $this->getUserOrCreate($request, $driver, $socialite);\n\n        $this->checkUserAssociation($user, $driver, $socialite);\n\n        $userToken = $this->createUserToken($user, $driver, $socialite);\n    }\n\n    return $userToken->user;\n}", "CodeBleu_score": 53.473299120112316}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    $userToken = UserToken::firstWhere('driver', $driver)\n        ->where('socialite_user_id', $socialite->getId())\n        ->first();\n\n    if ($userToken) {\n        $user = $userToken->user;\n        $this->checkUserAssociation($user, $socialite);\n    } else {\n        $user = $this->getUserOrCreate($request, $driver, $socialite);\n    }\n\n    $this->createUserToken($user, $driver, $socialite);\n\n    return $user;\n}", "CodeBleu_score": 57.84391402110853}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    $userToken = UserToken::firstWhere('driver', $driver)\n        ->where('socialite_user_id', $socialite->getId())\n        ->first();\n\n    if ($userToken) {\n        return $this->getUserOrCreate($userToken, $socialite);\n    }\n\n    return $this->checkUserAssociation($request, $driver, $socialite);\n}", "CodeBleu_score": 39.327384978435724}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $user = $request->user;\n\n    if (!$user) {\n        return false;\n    }\n\n    try {\n        $this->webAuthn->validateAssertion(\n            $this->filterCredentials($request),\n            $user\n        );\n    } catch (WebAuthnException $e) {\n        $this->fireFailedEvent($request, $user, $e);\n\n        $this->throwFailedAuthenticationException($request, $user, $e);\n    }\n\n    return true;\n}", "CodeBleu_score": 46.21635649410414}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $user = $request->user;\n    if (! $user) {\n        return false;\n    }\n    $credentials = $this->filterCredentials($request);\n    if (! $this->webauthn->validateAssertion($credentials, $request->input('id'), $request->input('rawId'), $request->input('response'), $user)) {\n        $this->fireFailedEvent($user);\n        $this->throwFailedAuthenticationException();\n    }\n    return true;\n}", "CodeBleu_score": 50.731555797725825}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $user = $request->user();\n\n    if (! $user) {\n        return false;\n    }\n\n    $credentials = $this->filterCredentials($request);\n\n    if (! $this->webAuthn->validateAssertion($credentials, $user->getWebauthnCredentials(), $request->get('id'))) {\n        $this->fireFailedEvent($user, $credentials);\n\n        $this->throwFailedAuthenticationException();\n    }\n\n    return true;\n}", "CodeBleu_score": 60.0787172158043}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\t    if (! $this->email) {\n        Log::error('No email provided');\n\n        return null;\n    }\n\n    try {\n        return User::where('email', $this->email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        Log::error('User not found');\n\n        return null;\n    }\n}", "CodeBleu_score": 39.24064289716214}, {"code": "<?\nprivate function user(): ?User{\n\t    $email = $this->argument('email');\n\n    if (empty($email)) {\n        $this->error('No email provided');\n\n        return null;\n    }\n\n    try {\n        return User::where('email', $email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error('User not found');\n\n        return null;\n    }\n}", "CodeBleu_score": 70.9636274482524}, {"code": "<?\nprivate function user(): ?User{\n\t    $email = $this->option('email');\n\n    if (! $email) {\n        $this->error('No email address provided.');\n\n        return null;\n    }\n\n    try {\n        return User::where('email', $email)->firstOrFail();\n    } catch (Exception $e) {\n        $this->error(\"User with email {$email} not found.\");\n\n        return null;\n    }\n}", "CodeBleu_score": 70.57042822907724}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\t    if (config('scout.driver') === 'meilisearch' && $this->option('flush')) {\n        $settings = $this->artisan->call('scout:meilisearch-settings');\n        $settings = json_decode($settings['output']);\n        foreach ($settings as $setting) {\n            $table = $this->getTable($setting->uid);\n            $this->artisan->call('scout:flush', ['model' => $table]);\n        }\n        $this->info('Scout indexes have been flushed.');\n    }\n}", "CodeBleu_score": 51.545340693340535}, {"code": "<?\nprotected function scoutFlush(): void{\n\t    if (config('scout.driver') === 'meilisearch' && config('scout.meilisearch.flush')) {\n        $indexes = $this->meilisearch->getIndexes();\n\n        foreach ($indexes as $index) {\n            $table = $this->getTable($index);\n\n            $this->artisan('scout:flush', ['model' => $table]);\n        }\n\n        $this->info('Flushed all Scout indexes.');\n    }\n}", "CodeBleu_score": 56.627618679728954}, {"code": "<?\nprotected function scoutFlush(): void{\n\t    if (config('scout.driver') === 'meilisearch' && config('scout.meilisearch.flush')) {\n        $indexes = collect(config('scout.meilisearch.indexes'));\n\n        $indexes->each(function ($index) {\n            $table = (new $index)->getTable();\n\n            $this->artisan('scout:flush', [\n                'model' => $table,\n            ]);\n        });\n\n        $this->line('');\n        $this->info('Flushed all Scout indexes.');\n    }\n}", "CodeBleu_score": 49.8400225138637}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    $vcard = $this->getVCard($resource);\n    $this->applyExporters($resource, $vcard);\n    return $vcard;\n}", "CodeBleu_score": 13.20358399478618}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    $vcard = $this->read($resource);\n    if (!$vcard) {\n        $vcard = $this->create($resource);\n    }\n    $this->applyExporters($resource, $vcard);\n    return $vcard;\n}", "CodeBleu_score": 16.042566292059842}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    // Attempt to read an existing VCard from the resource\n    try {\n        $vcard = $this->reader->read($resource);\n    } catch (Exception $e) {\n        // If reading fails, create a new VCard\n        $vcard = new VCard();\n    }\n\n    // If the VCard doesn't have a UID, set one\n    if (!$vcard->getUid()) {\n        $vcard->setUid(Uid::generate());\n    }\n\n    // Apply each exporter to the VCard\n    foreach ($this->exporters as $exporter) {\n        $exporter->export($vcard, $resource);\n    }\n\n    return $vcard;\n}", "CodeBleu_score": 27.013788714288346}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $obj = $this->getObject($addressBookId, $cardUri);\n\n    if (! $obj) {\n        return false;\n    }\n\n    if ($obj instanceof Contact) {\n        DestroyContact::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'contact_id' => $obj->id,\n        ])->onQueue('high');\n    } elseif ($obj instanceof Group) {\n        DestroyGroup::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'group_id' => $obj->id,\n        ])->onQueue('high');\n    } else {\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 84.24183580457535}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $obj = $this->getObject($addressBookId, $cardUri);\n\n    if (!$obj) {\n        return false;\n    }\n\n    if ($obj instanceof Contact) {\n        DestroyContact::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'contact_id' => $obj->id,\n        ])->onQueue('high');\n\n        return true;\n    }\n\n    if ($obj instanceof Group) {\n        DestroyGroup::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'group_id' => $obj->id,\n        ])->onQueue('high');\n\n        return true;\n    }\n\n    return false;\n}", "CodeBleu_score": 85.40406272250391}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $obj = $this->getObject($addressBookId, $cardUri);\n\n    if ($obj->isContact()) {\n        DestroyContact::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'contact_id' => $obj->id,\n        ])->onQueue('high');\n\n        return true;\n    }\n\n    if ($obj->isGroup()) {\n        DestroyGroup::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'group_id' => $obj->id,\n        ])->onQueue('high');\n\n        return true;\n    }\n\n    return false;\n}", "CodeBleu_score": 79.70670911125238}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\t    if (!request()->hasFile('file')) {\n        return;\n    }\n\n    $activity = $this->activityRepository->create($data);\n\n    $file = request()->file('file')->store('leads/' . $activity->lead->id);\n\n    return $this->fileRepository->create([\n        'name' => request()->file('file')->getClientOriginalName(),\n        'path' => $file,\n        'activity_id' => $activity->id,\n        'user_id' => auth()->guard()->user()->id,\n    ]);\n}", "CodeBleu_score": 53.89677804547204}, {"code": "<?\npublic function upload(array $data){\n\t    if (! request()->hasFile('file')) {\n        return;\n    }\n\n    $activity = $this->activityRepository->create($data);\n\n    $file = request()->file('file')->store('public');\n\n    return $this->create([\n        'activity_id' => $activity->id,\n        'name' => request()->file('file')->getClientOriginalName(),\n        'path' => $file,\n        'extension' => request()->file('file')->extension(),\n        'size' => request()->file('file')->getSize(),\n        'mime' => request()->file('file')->getMimeType(),\n        'user_id' => auth()->guard()->user()->id,\n    ]);\n}", "CodeBleu_score": 54.67891485957146}, {"code": "<?\npublic function upload(array $data){\n\t    if (!request()->hasFile('file')) {\n        return;\n    }\n\n    $this->activityRepository->create([\n        'type' => 'file',\n        'user_id' => auth()->guard()->user()->id,\n        'lead_id' => $data['lead_id'],\n        'notes' => $data['notes'],\n    ]);\n\n    $file = request()->file('file')->store('files');\n\n    return $this->create([\n        'name' => request()->file('file')->getClientOriginalName(),\n        'path' => $file,\n        'activity_id' => $this->activityRepository->latest()->id,\n    ]);\n}", "CodeBleu_score": 48.67981109486183}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    if ($exception instanceof ModelNotFoundException) {\n        return response()->json([\n            'error' => 'Resource not found'\n        ], 404);\n    } elseif ($exception instanceof PDOException) {\n        return response()->json([\n            'error' => 'Database error'\n        ], 500);\n    } elseif ($exception instanceof ParseError) {\n        return response()->json([\n            'error' => 'Invalid JSON'\n        ], 400);\n    } elseif ($exception instanceof HttpException) {\n        $code = $exception->getStatusCode();\n        return response()->json([\n            'error' => $exception->getMessage()\n        ], $code);\n    }\n\n    if (request()->routeIs('admin.*')) {\n        return redirect()->route('admin.login');\n    } else {\n        return redirect()->route('login');\n    }\n}", "CodeBleu_score": 41.66872634638574}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    if ($exception instanceof ModelNotFoundException) {\n        return response()->json(['message' => 'Model not found.'], 404);\n    } elseif ($exception instanceof PDOException) {\n        return response()->json(['message' => 'Database error.'], 500);\n    } elseif ($exception instanceof ParseError) {\n        return response()->json(['message' => 'Parse error.'], 500);\n    } elseif ($exception instanceof HttpException) {\n        if (request()->routeIs('admin.*')) {\n            return redirect()->route('admin.session.create');\n        } else {\n            return response()->json(['message' => $exception->getMessage()], $exception->getStatusCode());\n        }\n    } else {\n        return $this->response->errorInternal($exception->getMessage());\n    }\n}", "CodeBleu_score": 39.94874534258066}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    if ($exception instanceof ModelNotFoundException) {\n        return $this->response->setStatusCode(404)->json(['message' => 'Not Found']);\n    }\n    if ($exception instanceof PDOException) {\n        return $this->response->setStatusCode(500)->json(['message' => 'Database Error']);\n    }\n    if ($exception instanceof ParseError) {\n        return $this->response->setStatusCode(500)->json(['message' => 'Parse Error']);\n    }\n    if ($exception instanceof HttpException) {\n        if ($this->request->routeIs('admin.*') && !in_array($exception->getStatusCode(), [403, 404, 401, 419, 429])) {\n            return redirect()->route('admin.session');\n        }\n        return $this->response->setStatusCode($exception->getStatusCode())->json(['message' => $exception->getMessage()]);\n    }\n    return $this->response->setStatusCode(500)->json(['message' => 'Internal Server Error']);\n}", "CodeBleu_score": 38.643974552926394}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json([\n            'error' => trans($path),\n            'status_code' => $statusCode,\n            'debug' => config('app.debug')\n        ], $statusCode);\n    }\n\n    return response()->view('errors.' . $statusCode, [\n        'error' => trans($path),\n        'status_code' => $statusCode,\n        'debug' => config('app.debug')\n    ], $statusCode);\n}", "CodeBleu_score": 62.44069791656991}, {"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json(['message' => $this->errorMessage], $statusCode);\n    }\n\n    return response()->view('errors.' . $path, [], $statusCode);\n}", "CodeBleu_score": 49.306923393284364}, {"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json([\n            'error' => true,\n            'message' => trans('api.error_' . $statusCode)\n        ], $statusCode);\n    }\n\n    return response()->view('errors.' . $statusCode, [], $statusCode);\n}", "CodeBleu_score": 61.31467131398741}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t    $activityIds = request()->get('activity_ids');\n    $isDone = request()->get('is_done');\n\n    $activityIds = explode(',', $activityIds);\n    $updated = 0;\n\n    foreach ($activityIds as $activityId) {\n        $activity = $this->activityRepository->find($activityId);\n\n        if ($activity->is_done != $isDone) {\n            $activity->is_done = $isDone;\n            $this->activityRepository->update($activity);\n\n            Event::dispatch(new ActivityUpdated($activity));\n            $updated++;\n        }\n    }\n\n    return response()->json([\n        'updated' => $updated,\n    ]);\n}", "CodeBleu_score": 44.70224114927822}, {"code": "<?\npublic function massUpdate(){\n\t    $activities = request('activities');\n\n    $updated = 0;\n\n    foreach ($activities as $id) {\n        $activity = $this->activityRepository->find($id);\n\n        if (request('status') == 'done') {\n            $this->authorize('update', $activity);\n\n            event(new ActivityMarkedAsDone($activity));\n        } else {\n            $this->authorize('update', $activity);\n\n            event(new ActivityMarkedAsOpen($activity));\n        }\n\n        $this->activityRepository->update(['is_done' => request('status')], $activity->id);\n\n        $updated++;\n    }\n\n    return response()->json([\n        'status' => 'success',\n        'updated' => $updated,\n    ]);\n}", "CodeBleu_score": 43.30383278539356}, {"code": "<?\npublic function massUpdate(){\n\t    $ids = request('ids');\n    $isDone = request('isDone');\n\n    $updated = 0;\n\n    foreach ($ids as $id) {\n        $activity = $this->activityRepository->find($id);\n\n        if ($activity->is_done != $isDone) {\n            $activity->is_done = $isDone;\n            $activity->save();\n\n            Event::dispatch(new ActivityUpdated($activity));\n\n            $updated++;\n        }\n    }\n\n    return response()->json([\n        'success' => $updated > 0,\n        'updated' => $updated\n    ]);\n}", "CodeBleu_score": 38.60215625949373}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t     $activityIds = request('ids');\n     $activities = $this->activityRepository->findWhereIn('id', $activityIds);\n     foreach ($activities as $activity) {\n         Event::dispatch('activity.deleting', $activity);\n         $this->activityRepository->delete($activity);\n         Event::dispatch('activity.deleted', $activity);\n     }\n     return response()->json(['message' => trans('admin.activity.mass_destroy_success')]);\n }", "CodeBleu_score": 37.831604915929695}, {"code": "<?\n public function massDestroy(){\n\t     $activities = Activity::whereIn('id', request('ids'))->get();\n     foreach ($activities as $activity) {\n         Event::dispatch('activity.delete.before', $activity);\n         $this->activityRepository->delete($activity);\n         Event::dispatch('activity.delete.after', $activity);\n     }\n     return response()->json([\n         'message' => trans('admin::app.datagrid.mass-ops.delete-success', [\n             'resource' => 'Activities',\n         ]),\n     ]);\n }", "CodeBleu_score": 41.32702981311178}, {"code": "<?\n public function massDestroy(){\n\t        $ids = request('ids');\n\n        if (!empty($ids)) {\n            $activities = $this->activityRepository->getById($ids);\n\n            foreach ($activities as $activity) {\n                event(new ActivityDeleting($activity));\n                $this->activityRepository->delete($activity);\n                event(new ActivityDeleted($activity));\n            }\n        }\n\n        return response()->json([\n            'message' => trans('admin.activity_deleted'),\n        ]);\n    }", "CodeBleu_score": 34.77280468730684}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t     $cards = $this->dashboardHelper->getCards();\n     foreach ($cards as $key => $card) {\n         if (request()->has($card['id'])) {\n             $cards[$key]['selected'] = true;\n         } else {\n             $cards[$key]['selected'] = false;\n         }\n     }\n     return response()->json($cards);\n }", "CodeBleu_score": 41.34003782331756}, {"code": "<?\n public function updateCards(){\n\t    $cards = $this->dashboardHelper->getCards();\n\n    foreach ($cards as $key => $card) {\n        if (request()->has($card['id'])) {\n            $cards[$key]['selected'] = true;\n        } else {\n            $cards[$key]['selected'] = false;\n        }\n    }\n\n    return response()->json($cards);\n}", "CodeBleu_score": 40.74031412161617}, {"code": "<?\n public function updateCards(){\n\t     $cards = $this->dashboardHelper->getCards();\n\n     foreach ($cards as $card) {\n         if (request()->has($card['slug'])) {\n             $card['selected'] = true;\n         } else {\n             $card['selected'] = false;\n         }\n     }\n\n     return response()->json($cards);\n }", "CodeBleu_score": 39.300103906892225}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t    event(new ConfigurationCreating($this->configurationRepository));\n\n    $this->configurationRepository->create(request()->all());\n\n    event(new ConfigurationCreated($this->configurationRepository));\n\n    session()->flash('success', trans('configuration.create.success'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 40.60662602224448}, {"code": "<?\npublic function store(){\n\t    event(new ConfigurationStoring($request));\n    $configuration = $this->configurationRepository->create($request->all());\n    event(new ConfigurationStored($configuration));\n    session()->flash('success', trans('configuration.created'));\n    return redirect()->back();\n}", "CodeBleu_score": 38.5661336074126}, {"code": "<?\npublic function store(){\n\t    event(new ConfigurationCreating($this->configurationRepository));\n    $this->configurationRepository->create(request()->all());\n    event(new ConfigurationCreated($this->configurationRepository));\n    session()->flash('success', trans('configuration.created'));\n    return redirect()->back();\n}", "CodeBleu_score": 40.802904529549075}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t    $file = request()->route()->parameters()['file'];\n\n    $fullPath = $this->getFullPath($file);\n\n    $configuration = $this->configurationRepository->findOneByField('value', $fullPath);\n\n    return Storage::download($fullPath, $configuration->name . '.' . $configuration->extension);\n}", "CodeBleu_score": 55.96973383583788}, {"code": "<?\npublic function download(){\n\t    $fileName = request()->route()->parameters['fileName'];\n\n    $filePath = $this->configurationRepository->findOneByField('name', 'file_path')->value;\n\n    $file = $filePath . '/' . $fileName;\n\n    return Storage::download($file);\n}", "CodeBleu_score": 49.398857043270404}, {"code": "<?\npublic function download(){\n\t    $file = request()->route()->parameters['file'];\n\n    $fileName = $this->getFullFileName($file);\n\n    $configuration = $this->configurationRepository->findOneByField('value', $fileName);\n\n    if (! $configuration) {\n        abort(404);\n    }\n\n    return Storage::download($fileName, basename($fileName));\n}", "CodeBleu_score": 50.83857842451038}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\t// Create a list of AdminModelSort objects\n\tList<AdminModelSort> modelSorts = new ArrayList<>();\n\tfor (String model : list) {\n\t\tAdminModelSort modelSort = new AdminModelSort();\n\t\tmodelSort.setModel(model);\n\t\tmodelSort.setSort(1);\n\t\tmodelSorts.add(modelSort);\n\t}\n\t// Remove existing sort settings for the user\n\tremoveAll();\n\t// Save the new sort settings in batch\n\tsaveBatch(modelSorts);\n\t// Return a success result\n\treturn ok();\n}", "CodeBleu_score": 27.997520746066044}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    List<AdminModelSort> modelSortList = new ArrayList<>();\n    for (String model : list) {\n        AdminModelSort modelSort = new AdminModelSort();\n        modelSort.setUserId(getUserId());\n        modelSort.setModel(model);\n        modelSort.setSort(0);\n        modelSort.setType(0);\n        modelSort.setIsHidden(0);\n        modelSortList.add(modelSort);\n    }\n    remove();\n    saveBatch(modelSortList);\n    return ok();\n}", "CodeBleu_score": 40.125502873749454}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    List<AdminModelSort> adminModelSorts = new ArrayList<>();\n    for (String model : list) {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setSort(0);\n        adminModelSort.setType(\"header\");\n        adminModelSort.setModel(model);\n        adminModelSort.setUserId(getUserId());\n        adminModelSorts.add(adminModelSort);\n    }\n    remove(getUserId(), \"header\");\n    saveBatch(adminModelSorts);\n    return ok();\n}", "CodeBleu_score": 40.991593645283935}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    Result result = new Result();\n\n    try {\n        ModuleSettingBO moduleSettingBO = getSettingById(moduleSetting.getSettingId());\n        if (moduleSettingBO.getModuleName().equals(CRM_MODULE_NAME)) {\n            result.setError(ErrorConstants.CRM_MODULE_SETTING_ERROR);\n            return result;\n        }\n        moduleSettingBO.setStatus(moduleSetting.getStatus());\n        moduleSettingBO.setUpdatedDate(new Date());\n        moduleSettingBO.setUpdatedBy(moduleSetting.getUpdatedBy());\n        moduleSettingBO.setUpdatedByName(moduleSetting.getUpdatedByName());\n        moduleSettingDAO.save(moduleSettingBO);\n        result.setSuccess(true);\n    } catch (Exception e) {\n        result.setError(ErrorConstants.GENERIC_ERROR);\n        result.setMessage(e.getMessage());\n    }\n    return result;\n}", "CodeBleu_score": 40.301934994059884}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    Result result = new Result();\n    try {\n        if (moduleSetting.getSettingId() == null) {\n            throw new IllegalArgumentException(\"Setting ID is required\");\n        }\n        if (moduleSetting.getStatus() == null) {\n            throw new IllegalArgumentException(\"Status is required\");\n        }\n        AdminConfiguration adminConfiguration = adminConfigurationService.getById(moduleSetting.getSettingId());\n        if (adminConfiguration == null) {\n            throw new IllegalArgumentException(\"Setting ID is invalid\");\n        }\n        if (adminConfiguration.getModule().getName().equals(CRM_MODULE)) {\n            throw new IllegalArgumentException(\"Cannot disable CRM module\");\n        }\n        adminConfiguration.setStatus(moduleSetting.getStatus());\n        adminConfigurationService.save(adminConfiguration);\n        result.setResult(adminConfiguration);\n        result.setSuccess(true);\n    } catch (Exception e) {\n        result.setError(e.getMessage());\n        result.setSuccess(false);\n    }\n    return result;\n}", "CodeBleu_score": 40.62581751376338}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t\n    Result result = new Result();\n\n    AdminConfigurationBO adminConfigurationBO = getById(moduleSetting.getSettingId());\n\n    if (adminConfigurationBO.getModule().equals(Module.CRM.getCode())) {\n        result.setError(new Error(ErrorCode.CRM_MODULE_SETTING_UPDATE_ERROR));\n        return result;\n    }\n\n    adminConfigurationBO.setStatus(moduleSetting.getStatus());\n    adminConfigurationBO.setModule(moduleSetting.getModule());\n    adminConfigurationBO.setName(moduleSetting.getName());\n    adminConfigurationBO.setDescription(moduleSetting.getDescription());\n    adminConfigurationBO.setValue(moduleSetting.getValue());\n\n    adminConfigurationDAO.save(adminConfigurationBO);\n\n    result.setSuccess(new Success(SuccessCode.SUCCESS));\n    return result;\n}", "CodeBleu_score": 43.271131297877204}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t        UserConfig userConfig = null;\n        try {\n            userConfig = userConfigService.queryUserConfigByName(customKey);\n        } catch (Exception e) {\n            return Result.error(\"Error querying user configuration\");\n        }\n        if (userConfig == null) {\n            userConfig = new UserConfig();\n            userConfig.setName(customKey);\n            userConfig.setUserId(getUserId());\n        }\n        try {\n            userConfig.setValue(json.toJSONString());\n            userConfigService.save(userConfig);\n        } catch (Exception e) {\n            return Result.error(\"Error saving user configuration\");\n        }\n        return Result.success(\"Successfully saved custom setting\");\n    }", "CodeBleu_score": 53.23067552103047}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\n    try {\n\n        // Get the user ID from the session\n        String userId = getUserId();\n\n        // Get the user configuration by the custom key\n        UserConfig userConfig = queryUserConfigByName(customKey);\n\n        // If the user configuration exists, update its value with the provided JSON\n        if (userConfig != null) {\n            userConfig.setValue(json.toJSONString());\n            userConfig.setUserId(userId);\n            userConfig.setStatus(1);\n            updateById(userConfig);\n        }\n\n        // If the user configuration does not exist, create a new user configuration with the provided JSON and save it\n        else {\n            userConfig = new UserConfig();\n            userConfig.setName(customKey);\n            userConfig.setValue(json.toJSONString());\n            userConfig.setUserId(userId);\n            userConfig.setStatus(1);\n            save(userConfig);\n        }\n\n        // Return a successful result\n        return new Result(true, \"Successfully retrieved the custom setting\");\n    }\n\n    // Return an unsuccessful result if an exception occurs\n    catch (Exception e) {\n        return new Result(false, \"Unable to retrieve the custom setting: \" + e.getMessage());\n    }\n}", "CodeBleu_score": 55.93220221670065}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\n    UserConfig userConfig = userConfigService.queryUserConfigByName(customKey);\n\n    if (userConfig != null) {\n        userConfig.setValue(json.toJSONString());\n        userConfigService.updateById(userConfig);\n        return Result.ok();\n    }\n\n    userConfig = new UserConfig();\n    userConfig.setName(customKey);\n    userConfig.setValue(json.toJSONString());\n    userConfig.setUserId(getUserId());\n    userConfig.setStatus(1);\n    userConfigService.save(userConfig);\n    return Result.ok();\n}", "CodeBleu_score": 65.61035173936155}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser user = adminUserService.getById(userId);\n    if (user == null) {\n        return Result.error(ResultCode.USER_NOT_EXISTS);\n    }\n    String deptName = adminDeptService.getNameByDeptId(user.getDeptId());\n    user.setDeptName(deptName);\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.success(user);\n}", "CodeBleu_score": 52.049045426105224}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser user = userService.getById(userId);\n    if (user == null) {\n        return Result.error(ResultCode.USER_NOT_EXIST);\n    }\n    String deptName = userService.getBean(user.getDeptId());\n    user.setDeptName(deptName);\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.success(user);\n}", "CodeBleu_score": 50.14808945653976}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    Result<AdminUser> result = new Result<>();\n    AdminUser adminUser = adminUserService.getById(userId);\n    if (adminUser == null) {\n        result.setCode(ResultCode.FAIL.getCode());\n        result.setMessage(\"\u7528\u6237\u4e0d\u5b58\u5728\");\n        return result;\n    }\n    String deptName = adminUserService.getNameByDeptId(adminUser.getDeptId());\n    adminUser.setDeptName(deptName);\n    adminUser.setSalt(null);\n    adminUser.setPassword(null);\n    result.setCode(ResultCode.SUCCESS.getCode());\n    result.setMessage(ResultCode.SUCCESS.getMessage());\n    result.setData(adminUser);\n    return result;\n}", "CodeBleu_score": 48.289813307225025}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t    String userId = getUserId();\n    List<ReadNotice> readNotices = ReadNotice.find.where().eq(\"user_id\", userId).findList();\n    if (readNotices.size() > 1) {\n        for (ReadNotice readNotice : readNotices) {\n            readNotice.status = 1;\n            readNotice.update();\n        }\n    } else if (readNotices.size() == 1) {\n        ReadNotice readNotice = readNotices.get(0);\n        readNotice.status = 1;\n        readNotice.update();\n    } else {\n        ReadNotice readNotice = new ReadNotice();\n        readNotice.user_id = userId;\n        readNotice.status = 1;\n        readNotice.save();\n    }\n    return ok(Json.toJson(new ResultData(\"success\")));\n}", "CodeBleu_score": 29.634490859938044}, {"code": " public Result readNotice() {\n\t  String userId = getUserId();\n  String query = \"SELECT * FROM readNotice WHERE userId = '\" + userId + \"'\";\n  List<ReadNotice> readNoticeList = ReadNotice.find.where().raw(query).findList();\n  if (readNoticeList.size() > 1) {\n    for (ReadNotice readNotice : readNoticeList) {\n      readNotice.status = 1;\n      readNotice.update();\n    }\n  } else if (readNoticeList.size() == 1) {\n    ReadNotice readNotice = readNoticeList.get(0);\n    readNotice.status = 1;\n    readNotice.update();\n  } else {\n    ReadNotice readNotice = new ReadNotice();\n    readNotice.userId = userId;\n    readNotice.status = 1;\n    readNotice.save();\n  }\n  return ok();\n}", "CodeBleu_score": 28.410902171474984}, {"code": " public Result readNotice() {\n\t\n    // Get the current user ID\n    Long userId = getUserId();\n\n    // Get all \"readNotice\" entries for the current user\n    List<ReadNotice> readNoticeList = ReadNotice.find.where()\n            .eq(\"user_id\", userId)\n            .findList();\n\n    // If there are multiple \"readNotice\" entries, update the status to 1 for all matching entries\n    if (readNoticeList.size() > 1) {\n        for (ReadNotice readNotice : readNoticeList) {\n            readNotice.status = 1;\n            readNotice.update();\n        }\n    }\n\n    // If there is no \"readNotice\" entry, create a new entry and save it\n    else if (readNoticeList.size() == 0) {\n        ReadNotice readNotice = new ReadNotice();\n        readNotice.user_id = userId;\n        readNotice.status = 1;\n        readNotice.save();\n    }\n\n    return ok(\"Success\");\n}", "CodeBleu_score": 26.17662344611861}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    String companyInfo = \"companyInfo\";\n    ConfigBO configBO = configDAO.lambdaQuery()\n            .eq(ConfigBO::getName, companyInfo)\n            .one();\n    if (configBO == null) {\n        configBO = new ConfigBO();\n        configBO.setName(companyInfo);\n        configBO.setStatus(1);\n        configBO.setDescription(\"Company information\");\n        configBO.setValue(\"{}\");\n        configDAO.saveOrUpdate(configBO);\n    }\n    configBO.setValue(JSON.toJSONString(adminCompanyBO));\n    configDAO.saveOrUpdate(configBO);\n}", "CodeBleu_score": 49.76358497050708}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    // Get the existing configuration\n    LambdaQueryWrapper<AdminConfig> queryWrapper = new LambdaQueryWrapper<>();\n    queryWrapper.eq(AdminConfig::getName, \"companyInfo\");\n    AdminConfig adminConfig = adminConfigMapper.selectOne(queryWrapper);\n    // If not found, create a new configuration\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(\"companyInfo\");\n        adminConfig.setStatus(1);\n        adminConfig.setDescription(\"Company Information\");\n        adminConfig.setValue(\"{}\");\n        adminConfigMapper.insert(adminConfig);\n    }\n    // Update the configuration's value with the provided company information in JSON format and save or update the configuration\n    adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n    adminConfigMapper.saveOrUpdate(adminConfig);\n}", "CodeBleu_score": 52.38446481776335}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\n    String companyInfo = \"companyInfo\";\n\n    ConfigurationBO configurationBO = configurationDAO.lambdaQuery()\n            .eq(ConfigurationBO::getName, companyInfo)\n            .one();\n\n    if (configurationBO == null) {\n        configurationBO = new ConfigurationBO();\n        configurationBO.setName(companyInfo);\n        configurationBO.setDescription(\"Company Information\");\n        configurationBO.setStatus(ConfigurationBO.STATUS_ACTIVE);\n    }\n\n    configurationBO.setValue(adminCompanyBO.toJSONString());\n    configurationDAO.saveOrUpdate(configurationBO);\n}", "CodeBleu_score": 44.45691730386917}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\t    String configKey = \"adminConfig\";\n    String configValue = getValue(configKey);\n    AdminCompanyBO adminConfig = parseObject(configValue, AdminCompanyBO.class);\n    if (adminConfig == null) {\n        adminConfig = new AdminCompanyBO();\n    }\n    return adminConfig;\n}", "CodeBleu_score": 37.07076210532333}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tString query = \"SELECT * FROM AdminConfig WHERE key = 'adminCompany'\";\n\tList<Map<String, Object>> rows = null;\n\ttry {\n\t\trows = lambdaQuery(query);\n\t} catch (SQLException e) {\n\t\te.printStackTrace();\n\t}\n\tAdminCompanyBO adminCompany = new AdminCompanyBO();\n\tif (rows != null && !rows.isEmpty()) {\n\t\tMap<String, Object> row = rows.get(0);\n\t\tadminCompany = parseObject(row, AdminCompanyBO.class);\n\t}\n\treturn adminCompany;\n}", "CodeBleu_score": 40.17309122581775}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t    final String METHOD_NAME = \"queryAdminConfig\";\n    final String KEY = \"adminCompany\";\n\n    // Get the configuration\n    String config = getValue(KEY);\n\n    // If no configuration is found, return a new AdminCompanyBO\n    if (config == null) {\n        return new AdminCompanyBO();\n    }\n\n    // Parse the configuration\n    return parseObject(config, AdminCompanyBO.class);\n}", "CodeBleu_score": 25.379055943412745}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t\n\t\t// Create a new list of AdminConfig objects\n\t\tList<AdminConfig> adminConfigList = new ArrayList<AdminConfig>();\n\n\t\t// Loop through the list of strings\n\t\tfor (String string : stringList) {\n\n\t\t\t// Create an AdminConfig object\n\t\t\tAdminConfig adminConfig = new AdminConfig();\n\n\t\t\t// Set the AdminConfig object's name\n\t\t\tadminConfig.setName(\"LogWelcomeSpeech\");\n\n\t\t\t// Set the AdminConfig object's value\n\t\t\tadminConfig.setValue(string);\n\n\t\t\t// Add the AdminConfig object to the list\n\t\t\tadminConfigList.add(adminConfig);\n\t\t}\n\n\t\t// Remove any existing configurations with the specified log configuration name\n\t\tAdminConfig[] adminConfigArray = AdminConfig.list(\"LogWelcomeSpeech\").toArray(new AdminConfig[0]);\n\t\tfor (AdminConfig adminConfig : adminConfigArray) {\n\t\t\tadminConfig.remove();\n\t\t}\n\n\t\t// Save the new list of AdminConfig objects in batch\n\t\tAdminConfig.save(adminConfigList, true);\n\t}", "CodeBleu_score": 33.88145877578944}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t\n  // Create an AdminConfig object for each string in the list\n  List<AdminConfig> configList = new ArrayList<AdminConfig>();\n  for (String string : stringList) {\n   AdminConfig config = new AdminConfigImpl();\n   config.setName(\"LogWelcomeSpeech\");\n   config.setValue(string);\n   configList.add(config);\n  }\n\n  // Remove existing configurations with the specified log configuration name\n  AdminConfig[] configs = AdminConfig.list(\"LogWelcomeSpeech\");\n  for (AdminConfig config : configs) {\n   config.remove();\n  }\n\n  // Save the new list of configurations in batch\n  AdminConfig.save(configList.toArray(new AdminConfig[configList.size()]));\n }", "CodeBleu_score": 42.10142294871566}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t     String configName = \"LogWelcomeSpeech\";\n     String configType = \"LogWelcomeSpeech\";\n     String configScope = \"Application\";\n     String configValue = \"\";\n     String configStatus = \"true\";\n     String configDescription = \"Log Welcome Speech\";\n     String configComment = \"Log Welcome Speech\";\n\n     List<AdminConfig> configList = new ArrayList<AdminConfig>();\n\n     for (String s : stringList) {\n         AdminConfig config = new AdminConfig();\n         config.setName(configName);\n         config.setType(configType);\n         config.setScope(configScope);\n         config.setValue(s);\n         config.setStatus(configStatus);\n         config.setDescription(configDescription);\n         config.setComment(configComment);\n         configList.add(config);\n     }\n\n     AdminConfig.remove(configName);\n     AdminConfig.save(configList);\n }", "CodeBleu_score": 37.62208121946635}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    String userId = getUserId(adminInitDataBO.getUsername());\n    AdminInitDataBO user = getById(userId);\n    if (user.getPassword().equals(getPassword(adminInitDataBO.getUsername(), adminInitDataBO.getPassword()))) {\n        String code = randomInt(6);\n        setex(userId, code, 10 * 60);\n        return code;\n    } else {\n        throw new IllegalArgumentException(\"Invalid password\");\n    }\n}", "CodeBleu_score": 25.986371425113052}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    String username = adminInitDataBO.getUsername();\n    String password = adminInitDataBO.getPassword();\n    String userId = adminInitDataBO.getUserId();\n    if (StringUtils.isBlank(userId)) {\n        userId = getUserId(username);\n    }\n    AdminUserBO userBO = getById(userId);\n    String passwordHash = getPassword(userBO.getSalt(), password);\n    if (!passwordHash.equals(userBO.getPassword())) {\n        throw new BusinessException(ErrorCode.PASSWORD_INVALID);\n    }\n    String accessCode = randomInt(100000, 999999) + \"\";\n    String key = \"admin:access:\" + accessCode;\n    getRedis().setex(key, 600, userId);\n    return accessCode;\n}", "CodeBleu_score": 41.70654606843867}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    String userId = getUserId(adminInitDataBO.getUsername());\n    AdminBO adminBO = getById(userId);\n    if (adminBO == null) {\n        throw new BusinessException(ErrorCode.ADMIN_NOT_EXISTS);\n    }\n    String password = getPassword(adminBO.getUsername(), adminBO.getSalt());\n    if (!password.equals(adminBO.getPassword())) {\n        throw new BusinessException(ErrorCode.ADMIN_PASSWORD_ERROR);\n    }\n    String accessCode = getRandomInt(6);\n    setex(RedisKey.ADMIN_ACCESS_CODE + userId, accessCode, 600);\n    return accessCode;\n}", "CodeBleu_score": 36.921909351520554}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\t    String userId = getUserId();\n    String key = \"unauth:\" + userId;\n    List<String> unauthUrls = get(key);\n    if (unauthUrls != null && unauthUrls.contains(getRequest().getRequestURI())) {\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 30.983007249298723}, {"code": "private boolean verifyInitAuth(){\n\t    String userId = getUserId();\n    String key = \"unauth:\" + userId;\n    List<String> urls = get(key);\n    if (urls.contains(getRequest().getRequestURI())) {\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 27.475337795110157}, {"code": "private boolean verifyInitAuth(){\n\t\tString userId = getUserId();\n\tString key = \"initAuth:\" + userId;\n\tString initAuthUrl = get(\"initAuthUrl\");\n\tif (initAuthUrl == null) {\n\t\treturn false;\n\t}\n\tList<String> unauthUrls = getRedis().lrange(key, 0, -1);\n\tif (unauthUrls.contains(initAuthUrl)) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 38.366975198563175}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    // Start a new batch\n    int batchSize = 100;\n    int batchCount = 0;\n    int i = 0;\n    List<AdminRoleMenu> roleMenuList = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n\n        // Add to the batch\n        roleMenuList.add(roleMenu);\n\n        if (++i % batchSize == 0) {\n            // Save a batch of role-menu associations\n            adminRoleMenuMapper.addBatch(roleMenuList);\n\n            // Start a new batch\n            roleMenuList = new ArrayList<>();\n            batchCount++;\n        }\n    }\n\n    // Save any remaining role-menu associations\n    if (!roleMenuList.isEmpty()) {\n        adminRoleMenuMapper.addBatch(roleMenuList);\n    }\n\n    // Execute the batch\n    adminRoleMenuMapper.executeBatch();\n}", "CodeBleu_score": 48.34220842544747}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    // First, delete all existing role-menu associations for the specified role.\n    this.removeByRoleId(roleId);\n    // Then, create a list of AdminRoleMenu objects, each containing a role ID and a menu ID.\n    List<AdminRoleMenu> roleMenuList = new ArrayList<>(menuIdList.size());\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    }\n    // Finally, save the list of role-menu associations in batches.\n    this.saveBatch(roleMenuList);\n}", "CodeBleu_score": 53.884853745350625}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    // Start a new transaction\n    TransactionStatus transactionStatus = transactionTemplate.getTransactionManager().getTransaction(new DefaultTransactionDefinition());\n    try {\n        // First delete all existing role-menu associations for the specified role\n        adminRoleMenuMapper.deleteByRoleId(roleId);\n        // Create a list of AdminRoleMenu objects, each containing a role ID and a menu ID\n        List<AdminRoleMenu> roleMenuList = new ArrayList<>();\n        for (Integer menuId : menuIdList) {\n            AdminRoleMenu roleMenu = new AdminRoleMenu();\n            roleMenu.setRoleId(roleId);\n            roleMenu.setMenuId(menuId);\n            roleMenuList.add(roleMenu);\n        }\n        // Save the list of role-menu associations in batches\n        for (int i = 0; i < roleMenuList.size(); i += 1000) {\n            int end = i + 1000;\n            if (end > roleMenuList.size()) {\n                end = roleMenuList.size();\n            }\n            adminRoleMenuMapper.saveBatch(roleMenuList.subList(i, end));\n        }\n        // Commit the transaction\n        transactionTemplate.getTransactionManager().commit(transactionStatus);\n    } catch (Exception e) {\n        // Roll back the transaction\n        transactionTemplate.getTransactionManager().rollback(transactionStatus);\n    }\n}", "CodeBleu_score": 46.609438212141974}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\t    try {\n        String index = getSysLogIndex();\n        Map<String, Object> map = beanToMap(sysLog);\n        map.put(\"createTime\", formatDateTime(sysLog.getCreateTime()));\n        map.remove(\"id\");\n        IndexRequest indexRequest = new IndexRequest(index, \"doc\", sysLog.getId()).source(map);\n        client.index(indexRequest, RequestOptions.DEFAULT);\n    } catch (Exception e) {\n        error(e.getMessage());\n    }\n}", "CodeBleu_score": 47.70442706811916}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t\n    try {\n        String index = getSysLogIndex();\n        Map<String, Object> source = beanToMap(sysLog);\n        source.put(\"createTime\", formatDateTime(sysLog.getCreateTime()));\n        source.remove(\"id\");\n        IndexRequest indexRequest = new IndexRequest(index).source(source);\n        client.indexAsync(indexRequest, RequestOptions.DEFAULT, new ActionListener<IndexResponse>() {\n            @Override\n            public void onResponse(IndexResponse indexResponse) {\n                log.info(\"Index response: {}\", indexResponse.toString());\n            }\n\n            @Override\n            public void onFailure(Exception e) {\n                log.error(e.getMessage());\n            }\n        });\n    } catch (Exception e) {\n        log.error(e.getMessage());\n    }\n}", "CodeBleu_score": 51.49612481257194}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t\n    try {\n        String index = getSysLogIndex();\n        Map<String, Object> source = beanToMap(sysLog);\n        source.put(\"createTime\", formatDateTime(sysLog.getCreateTime()));\n        source.remove(\"id\");\n\n        IndexRequest request = new IndexRequest(index).source(source);\n        client.index(request, new ActionListener<IndexResponse>() {\n            @Override\n            public void onResponse(IndexResponse indexResponse) {\n                if (indexResponse.status() == RestStatus.CREATED) {\n                    log.info(\"SysLog saved successfully\");\n                } else {\n                    log.error(\"Error saving sysLog\");\n                }\n            }\n\n            @Override\n            public void onFailure(Exception e) {\n                log.error(\"Error saving sysLog\", e);\n            }\n        });\n    } catch (Exception e) {\n        log.error(\"Error saving sysLog\", e);\n    }\n}", "CodeBleu_score": 44.14838721659882}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t    SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n    searchSourceBuilder.sort(SysLog.CREATE_TIME, SortOrder.DESC);\n    searchSourceBuilder.fetchSource(false, new String[] { SysLog.ID, SysLog.TYPE, SysLog.CREATE_TIME, SysLog.USER_NAME, SysLog.USER_ID, SysLog.IP, SysLog.MESSAGE, SysLog.LOG_TYPE, SysLog.REQUEST_URL, SysLog.REQUEST_PARAMS, SysLog.REQUEST_METHOD, SysLog.RESPONSE_STATUS, SysLog.RESPONSE_TIME, SysLog.RESPONSE_PARAMS, SysLog.RESPONSE_MESSAGE, SysLog.RESPONSE_DATA, SysLog.CREATE_TIME });\n    SearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n    searchRequest.source(searchSourceBuilder);\n    SearchResponse searchResponse = null;\n    try {\n        searchResponse = restClient.search(searchRequest, RequestOptions.DEFAULT);\n    } catch (IOException e) {\n        log.error(\"querySysLogPageList error\", e);\n        return new BasePage<>();\n    }\n    SearchHits searchHits = searchResponse.getHits();\n    long totalHits = searchHits.getTotalHits().value;\n    List<SysLog> sysLogList = new ArrayList<>();\n    for (SearchHit searchHit : searchHits) {\n        sysLogList.add(mapToBean(searchHit.getSourceAsMap(), SysLog.class));\n    }\n    return new BasePage<>(sysLogList, querySysLogBO.getPage(), querySysLogBO.getPageSize(), totalHits);\n}", "CodeBleu_score": 49.59870025429113}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t    // Initialize the search criteria\n    SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n\n    // Sort the results by creation time in descending order\n    searchSourceBuilder.sort(SysLog.FIELD_CREATE_TIME, SortOrder.DESC);\n\n    // Exclude specific fields from the response\n    searchSourceBuilder.fetchSource(SysLog.FIELD_ID, null);\n    searchSourceBuilder.fetchSource(SysLog.FIELD_CREATE_TIME, null);\n    searchSourceBuilder.fetchSource(SysLog.FIELD_OPERATION, null);\n    searchSourceBuilder.fetchSource(SysLog.FIELD_USER_ID, null);\n    searchSourceBuilder.fetchSource(SysLog.FIELD_USERNAME, null);\n    searchSourceBuilder.fetchSource(SysLog.FIELD_REMARK, null);\n\n    // Execute the search request using a REST client\n    SearchResponse searchResponse = search(searchSourceBuilder);\n\n    // Map the search results to SysLog objects\n    List<SysLog> sysLogList = mapToBean(searchResponse, SysLog.class);\n\n    // Populate a BasePage object with the results, including total hits and current page\n    BasePage<SysLog> page = new BasePage<>(sysLogList, getTotalHits(searchResponse), querySysLogBO.getPage());\n\n    return page;\n}", "CodeBleu_score": 33.85840688786145}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t    BasePage<SysLog> sysLogPage = new BasePage<>();\n    try {\n        SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n        SearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n        searchRequest.source(searchSourceBuilder);\n        SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);\n        SearchHits hits = searchResponse.getHits();\n        sysLogPage.setTotal(getTotalHits(hits));\n        sysLogPage.setCurrent(querySysLogBO.getPage());\n        sysLogPage.setList(mapToBean(hits));\n    } catch (IOException e) {\n        error(\"Failed to query system log page list\", e);\n    }\n    return sysLogPage;\n}", "CodeBleu_score": 45.62615121011619}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\t  return new Promise((resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n    https\n      .get(url, function (response) {\n        response.pipe(file);\n        file.on(\"finish\", function () {\n          file.close(() => {\n            resolve();\n          });\n        });\n      })\n      .on(\"error\", (err) => {\n        fs.unlink(dest, () => {\n          reject(err.message);\n        });\n      });\n  });\n}", "CodeBleu_score": 77.77545487472392}, {"code": "async function downloadFile(url, dest){\n\t  return new Promise((resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n    https\n      .get(url, function (response) {\n        response.pipe(file);\n        file.on(\"finish\", function () {\n          file.close(() => {\n            resolve();\n          });\n        });\n      })\n      .on(\"error\", (err) => {\n        fs.unlink(dest);\n        reject(err);\n      });\n  });\n}", "CodeBleu_score": 86.43163958912206}, {"code": "async function downloadFile(url, dest){\n\t  return new Promise((resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n    https\n      .get(url, function (response) {\n        response.pipe(file);\n        file.on(\"finish\", function () {\n          file.close(() => {\n            resolve();\n          });\n        });\n      })\n      .on(\"error\", (err) => {\n        fs.unlink(dest, () => {\n          reject(err);\n        });\n      });\n  });\n}", "CodeBleu_score": 82.23864241542796}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t\n        return this.applicationRepository.findById(module.getId())\n                .flatMapMany(application -> {\n                    if (application.getDependentModuleIds() != null) {\n                        return Flux.fromIterable(application.getDependentModuleIds())\n                                .filter(dependentModuleId -> !circularDependencyCheckSet.contains(dependentModuleId))\n                                .doOnNext(dependentModuleId -> circularDependencyCheckSet.add(dependentModuleId))\n                                .flatMap(dependentModuleId -> this.getDependentModules(dependentModuleId, circularDependencyCheckSet))\n                                .collectList()\n                                .map(dependentModules -> {\n                                    dependentModules.add(application);\n                                    return dependentModules;\n                                })\n                                .onErrorContinue((throwable, o) -> {\n                                    this.warn(String.format(\"Could not find dependent module with ID %s for application module with ID %s. Skipping.\", dependentModuleId, module.getId()), throwable);\n                                });\n                    } else {\n                        return Flux.just(application);\n                    }\n                });\n    }", "CodeBleu_score": 46.2741719006771}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t    return module.getDependentModuleIds().filter(id -> !this.processedModuleIds.contains(id)).flatMapMany(id -> {\n        this.processedModuleIds.add(id);\n        this.circularDependencyCheckSet.add(id);\n        return this.getLiveModules(id).doOnNext(dependentModule -> this.processedModuleIds.add(dependentModule.getId())).onErrorContinue(throwable -> this.warn(String.format(\"Could not retrieve dependent module '%s' for module '%s'\", id, module.getId()), throwable));\n    }).filter(dependentModule -> !this.circularDependencyCheckSet.contains(dependentModule.getId())).flatMapMany(dependentModule -> {\n        this.circularDependencyCheckSet.add(dependentModule.getId());\n        return this.getDependentModules(dependentModule, this.circularDependencyCheckSet);\n    });\n}", "CodeBleu_score": 44.355080594943495}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t        return getLiveModules(module.getId())\n                .filter(application -> !circularDependencyCheckSet.contains(application.getId()))\n                .doOnNext(application -> circularDependencyCheckSet.add(application.getId()))\n                .flatMapMany(application -> getDependentModules(application, circularDependencyCheckSet))\n                .onErrorContinue(throwable -> warn(throwable, \"Error while fetching dependent modules for module {}\", module.getId()));\n    }", "CodeBleu_score": 50.55614310948058}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        Object value = entry.getValue();\n        if (value instanceof Map) {\n            doGetDependentModules((Map<?, ?>) value, dependentModuleIds);\n        } else if (value instanceof List) {\n            for (Object item : (List<?>) value) {\n                if (item instanceof Map) {\n                    doGetDependentModules((Map<?, ?>) item, dependentModuleIds);\n                }\n            }\n        } else if (entry.getKey().equals(\"componentType\") && value.equals(\"module\")) {\n            Object appId = map.get(\"appId\");\n            if (appId != null && !appId.toString().isEmpty()) {\n                dependentModuleIds.add(appId.toString());\n            }\n        }\n    }\n}", "CodeBleu_score": 41.489568495818865}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        if (\"componentType\".equals(entry.getKey())) {\n            String componentType = (String) entry.getValue();\n            if (\"module\".equals(componentType)) {\n                String appId = (String) map.get(\"appId\");\n                if (isNotBlank(appId)) {\n                    dependentModuleIds.add(appId);\n                }\n            }\n        }\n        if (entry.getValue() instanceof Map) {\n            doGetDependentModules((Map<?, ?>) entry.getValue(), dependentModuleIds);\n        }\n        if (entry.getValue() instanceof List) {\n            for (Object item : (List<?>) entry.getValue()) {\n                if (item instanceof Map) {\n                    doGetDependentModules((Map<?, ?>) item, dependentModuleIds);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 46.40007114668342}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        Object value = entry.getValue();\n        if (value instanceof Map) {\n            doGetDependentModules((Map<?, ?>) value, dependentModuleIds);\n        } else if (value instanceof List) {\n            for (Object o : (List<?>) value) {\n                if (o instanceof Map) {\n                    doGetDependentModules((Map<?, ?>) o, dependentModuleIds);\n                }\n            }\n        } else if (\"module\".equals(entry.getKey())) {\n            if (isNotBlank((String) value)) {\n                dependentModuleIds.add((String) value);\n            }\n        }\n    }\n}", "CodeBleu_score": 35.60831562307829}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t    Asset asset = new Asset();\n    asset.setContentType(srcContentType.getSubtype());\n    ByteArrayOutputStream os = new ByteArrayOutputStream();\n    try {\n        if (createThumbnail) {\n            resizeImage(dataBuffer, os);\n        } else {\n            read(dataBuffer, os);\n        }\n        asset.setData(os.toByteArray());\n    } finally {\n        dataBuffer.release();\n        os.close();\n    }\n    return asset;\n}", "CodeBleu_score": 31.69324641564345}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t\n    // Read the image data.\n    byte[] imageData = read(dataBuffer);\n\n    // Resize the image if creating a thumbnail.\n    if (createThumbnail) {\n        imageData = resizeImage(imageData);\n    }\n\n    // Create an Asset object with the image data.\n    Asset asset = new Asset();\n    asset.setContentType(srcContentType.toString());\n    asset.setContent(imageData);\n\n    // Release the data buffer.\n    dataBuffer.release();\n\n    return asset;\n}", "CodeBleu_score": 43.309443666347235}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 7.930396959171953}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return getAsset(assetId)\n            .flatMap(asset -> {\n                ServerHttpResponse response = exchange.getResponse();\n                response.setStatusCode(HttpStatus.OK);\n                response.getHeaders().setContentType(MediaType.IMAGE_JPEG);\n                DataBuffer buffer = response.bufferFactory().wrap(asset.getData());\n                return response.writeWith(Mono.just(buffer));\n            });\n}", "CodeBleu_score": 53.9337671335378}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return assetService.getById(assetId)\n            .flatMap(asset -> {\n                exchange.getResponse().setStatusCode(HttpStatus.OK);\n                exchange.getResponse().getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n                DataBuffer buffer = exchange.getResponse().bufferFactory().wrap(asset.getData());\n                return exchange.getResponse().writeWith(Mono.just(buffer));\n            });\n}", "CodeBleu_score": 45.67527570857258}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return assetRepository.findById(assetId)\n            .flatMap(asset -> {\n                ServerHttpResponse response = exchange.getResponse();\n                response.setStatusCode(HttpStatus.OK);\n                if (asset.getContentType() != null) {\n                    response.getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n                }\n                DataBuffer buffer = response.bufferFactory().wrap(asset.getData());\n                return response.writeWith(Mono.just(buffer));\n            });\n}", "CodeBleu_score": 56.693119305345384}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    if (getMode() == WorkspaceMode.SAAS) {\n        return Flux.empty()\n    }\n    return getOrganizationInEnterpriseMode()\n        .flatMapIterable { organization -> organization.getAuthConfigs() }\n        .map { authConfig -> new FindAuthConfig(authConfig.getId(), authConfig.getName()) }\n}", "CodeBleu_score": 26.846042803982773}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    if (getWorkspace().getWorkspaceMode() == WorkspaceMode.SAAS) {\n        return Flux.empty()\n    }\n\n    return getOrganizationInEnterpriseMode()\n        .flatMapIterable(Organization::getAuthConfigs)\n        .map(FindAuthConfig::new)\n}", "CodeBleu_score": 22.797095480356738}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    if (getMode() == WorkspaceMode.SAAS) {\n        return Flux.empty()\n    }\n\n    return getOrganizationInEnterpriseMode()\n        .flatMapIterable({ Organization organization -> organization.getAuthConfigs() })\n        .map({ AuthConfig authConfig -> new FindAuthConfig(authConfig.getName(), authConfig.getId()) })\n}", "CodeBleu_score": 28.163090489412074}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    return MongockSpring5.MongockApplicationRunner.builder()\n        .setDriver(mongoTemplate.getMongoDatabase())\n        .setSpringContext(springContext)\n        .addChangeLogsScanPackages(\"com.example.changelogs\")\n        .buildApplicationRunner();\n}", "CodeBleu_score": 22.761962669002546}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    return MongockSpring5.builder()\n        .withDefaultLock()\n        .of(mongoTemplate)\n        .addChangeLogsScanPackages(\"com.example.mongock.changelogs\")\n        .setSpringContext(springContext)\n        .buildApplicationRunner();\n}", "CodeBleu_score": 26.085734716787595}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    MongockSpring5.MongockApplicationRunnerBuilder builder = MongockSpring5.builder()\n        .withDefaultLock()\n        .setDriver(new SpringDataMongoV3Driver(mongoTemplate))\n        .addChangeLogsScanPackages(\"com.example.mongock.changelogs\")\n        .setSpringContext(springContext)\n        .setReadConcern(ReadConcern.MAJORITY)\n        .setWriteConcern(WriteConcern.MAJORITY)\n        .withJournal(true);\n    return builder.buildApplicationRunner();\n}", "CodeBleu_score": 48.05534029471246}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t        ReactiveMongoTemplate template = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        template.setReadPreference(ReadPreference.secondaryPreferred());\n        return template;\n    }", "CodeBleu_score": 77.62047882971166}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t        ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n        return reactiveMongoTemplate;\n}", "CodeBleu_score": 76.14454981115762}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t        ReactiveMongoTemplate template = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        template.setReadPreference(ReadPreference.secondaryPreferred());\n        return template;\n}", "CodeBleu_score": 78.12933069950734}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return getLatestRecordByLibraryQueryId(libraryQueryId)\n            .switchIfEmpty(getById(libraryQueryId)\n                    .flatMap(this::map)\n                    .map(libraryQuery -> {\n                        Map<String, Object> dsl = new HashMap<>();\n                        dsl.put(\"query\", libraryQuery.getQuery());\n                        dsl.put(\"variables\", libraryQuery.getVariables());\n                        return dsl;\n                    })\n            );\n}", "CodeBleu_score": 41.02879751308854}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return getLatestRecordByLibraryQueryId(libraryQueryId)\n            .switchIfEmpty(getById(libraryQueryId))\n            .map(this::getLiveDSL);\n}", "CodeBleu_score": 34.15695085004582}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return getLatestRecordByLibraryQueryId(libraryQueryId)\n        .map(LibraryQueryRecord::getDsl)\n        .switchIfEmpty(getById(libraryQueryId)\n            .map(LibraryQuery::getDsl));\n}", "CodeBleu_score": 58.69795309417019}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        if (datasource == null) {\n            return Mono.error(new AppsmithPluginException(AppsmithPluginError.PLUGIN_ERROR, \"No datasource found.\"));\n        }\n\n        if (queryConfig == null) {\n            return Mono.error(new AppsmithPluginException(AppsmithPluginError.PLUGIN_ERROR, \"No query configuration found.\"));\n        }\n\n        if (requestParams == null) {\n            return Mono.error(new AppsmithPluginException(AppsmithPluginError.PLUGIN_ERROR, \"No query parameters found.\"));\n        }\n\n        if (timeoutStr == null) {\n            return Mono.error(new AppsmithPluginException(AppsmithPluginError.PLUGIN_ERROR, \"No query timeout found.\"));\n        }\n\n        if (queryVisitorContext == null) {\n            return Mono.error(new AppsmithPluginException(AppsmithPluginError.PLUGIN_ERROR, \"No query context found.\"));\n        }\n\n        final Mono<QueryExecutionResult> deferredQueryExecution = defer(() -> {\n            if (isJsDatasourcePlugin(datasource)) {\n                return executeByNodeJs(datasource, queryConfig, requestParams, queryVisitorContext);\n            } else {\n                return executeLocally(datasource, queryConfig, requestParams, queryVisitorContext);\n            }\n        });\n\n        return deferredQueryExecution\n                .timeout(parseQueryTimeoutMs(timeoutStr), ofMillis(1))\n                .onErrorMap(TimeoutException.class, error -> {\n                    log.error(\"Query execution timed out. Query will be cancelled now.\");\n                    return new AppsmithPluginException(\n                            AppsmithPluginError.PLUGIN_QUERY_TIMEOUT_ERROR,\n                            \"Query execution timed out. Please try again with a shorter query timeout.\"\n                    );\n                })\n                .onErrorResume(error -> {\n                    if (error instanceof AppsmithPluginException) {\n                        return Mono.error(error);\n                    }\n\n                    log.error(\"Query execution failed with error: \", error);\n                    return", "CodeBleu_score": 44.21873566502336}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        Long timeout = ofNullable(timeoutStr).map(Long::valueOf).orElse(0L);\n        if (timeout <= 0) {\n            timeout = datasource.getProperties().getQueryExecutionTimeout();\n        }\n\n        if (isJsDatasourcePlugin(datasource)) {\n            return executeByNodeJs(datasource, queryConfig, requestParams, timeout, queryVisitorContext);\n        } else {\n            return executeLocally(datasource, queryConfig, requestParams, timeout, queryVisitorContext);\n        }\n    }", "CodeBleu_score": 33.90312592636353}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        return Mono.just(datasource)\n                .map(Datasource::getDatasourceConfiguration)\n                .map(DatasourceConfiguration::getTimeoutInMillisecond)\n                .map(timeoutInMillisecond -> parseQueryTimeoutMs(timeoutStr, timeoutInMillisecond))\n                .flatMap(timeout -> {\n                    if (isJsDatasourcePlugin(datasource)) {\n                        return executeLocally(datasource, queryConfig, requestParams, timeout, queryVisitorContext);\n                    } else {\n                        return executeByNodeJs(datasource, queryConfig, requestParams, timeout, queryVisitorContext);\n                    }\n                })\n                .onErrorMap(QueryExecutionError::new)\n                .onErrorResume(error -> {\n                    logError(error);\n                    return Mono.just(QueryExecutionResult.builder().error(error).build());\n                });\n    }", "CodeBleu_score": 42.35433746401801}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t        return getQueryExecutor(datasource)\n                .flatMap(queryExecutor -> buildQueryExecutionContextMono(datasource, queryExecutor, queryConfig, requestParams, queryVisitorContext))\n                .flatMap(queryExecutionContext -> getOrCreateConnection(datasource, queryExecutionContext))\n                .flatMap(connection -> getType(connection).flatMap(type -> {\n                    switch (type) {\n                        case MYSQL:\n                            return getT2(connection, queryExecutionContext);\n                        case POSTGRESQL:\n                            return getT2(connection, queryExecutionContext);\n                        case MONGO:\n                            return getT2(connection, queryExecutionContext);\n                        case SQL_SERVER:\n                            return getT2(connection, queryExecutionContext);\n                        default:\n                            return Mono.error(new AppsmithPluginException(AppsmithPluginError.PLUGIN_ERROR, \"Unsupported datasource type\"));\n                    }\n                }));\n    }", "CodeBleu_score": 32.569179928674096}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t        return getQueryExecutor(datasource)\n                .flatMap(queryExecutor -> buildQueryExecutionContext(queryExecutor, queryConfig, requestParams, queryVisitorContext))\n                .flatMap(queryExecutionContext -> getOrCreateConnection(datasource, queryExecutionContext)\n                        .flatMap(connection -> getType(queryExecutionContext)\n                                .flatMap(type -> queryExecutor.execute(queryExecutionContext, connection, type))\n                                .doOnError(throwable -> closeConnection(connection))\n                                .onErrorResume(throwable -> closeConnection(connection).then(Mono.error(throwable)))\n                                .zipWhen(queryExecutionResult -> closeConnection(connection))\n                                .map(Tuples::getT1)\n                        )\n                );\n    }", "CodeBleu_score": 33.39777462112017}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\n        return Mono.zip(\n                getT2(datasource, queryConfig),\n                getT1(datasource, queryConfig, requestParams, queryVisitorContext)\n        )\n                .flatMap(objects -> {\n                    QueryExecutor queryExecutor = objects.getT1();\n                    QueryExecutionContext queryExecutionContext = objects.getT2();\n\n                    return queryExecutor\n                            .execute(queryExecutionContext)\n                            .doOnError(throwable -> doOnError(datasource, throwable));\n                });\n    }", "CodeBleu_score": 42.77278410510492}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t  if (isBlank(timeoutStr)) {\n    timeoutStr = DEFAULT_QUERY_TIMEOUT_MS;\n  }\n  final String[] parts = timeoutStr.split(\"\\\\s+\");\n  if (parts.length != 2) {\n    throw new ISE(\"Invalid timeout string[%s], must be of the form '<number> <unit>'\", timeoutStr);\n  }\n  final double value = Double.parseDouble(parts[0]);\n  final String unit = parts[1];\n  final long millis = toMillis(value, unit);\n  if (millis > MAX_QUERY_TIMEOUT_MS) {\n    throw new ISE(\"Invalid timeout string[%s], timeout[%dms] must be less than or equal to [%dms]\", timeoutStr, millis, MAX_QUERY_TIMEOUT_MS);\n  }\n  return (int) millis;\n}", "CodeBleu_score": 32.979741394257644}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t    if (isBlank(timeoutStr)) {\n        timeoutStr = DEFAULT_QUERY_TIMEOUT_MS + \"ms\";\n    }\n\n    String[] parts = timeoutStr.split(\"\\\\s+\");\n    if (parts.length != 2) {\n        throw new IllegalArgumentException(\"Invalid timeout string: \" + timeoutStr);\n    }\n\n    long timeoutMs = convertToMs(parts[0], getUnitInfo(parts[1]));\n    if (timeoutMs < 0) {\n        throw new IllegalArgumentException(\"Invalid timeout string: \" + timeoutStr);\n    }\n\n    if (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n        throw new IllegalArgumentException(\"Maximum allowed timeout is \" + MAX_QUERY_TIMEOUT_MS + \"ms\");\n    }\n\n    return (int) timeoutMs;\n}", "CodeBleu_score": 29.550618300723297}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t  if (isBlank(timeoutStr)) {\n    return DEFAULT_QUERY_TIMEOUT_MS;\n  }\n\n  Pair<String, String> unitInfo = getUnitInfo(timeoutStr);\n  String value = unitInfo.lhs;\n  String unit = unitInfo.rhs;\n\n  double timeoutMs = toMillis(value, unit);\n  if (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n    throw new ISE(\n        \"Query timeout[%s] is too large. Maximum allowed timeout is [%d] milliseconds.\",\n        timeoutStr,\n        MAX_QUERY_TIMEOUT_MS\n    );\n  }\n\n  return (int) timeoutMs;\n}", "CodeBleu_score": 27.59005007979571}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t\n        return Mono.zip(\n                Mono.just(currentOrganizationId),\n                getBaseQuery(currentOrganizationId, application, visitorId)\n                        .flatMap(this::getLiveQueries)\n                        .flatMap(this::map)\n                        .flatMap(this::toSet)\n                        .flatMap(this::isNull)\n                        .flatMap(this::doCopyDatasource)\n                        .flatMap(this::collect)\n                        .flatMap(this::getDatasourceId)\n                        .flatMap(this::getLiveQueries)\n                        .flatMap(this::collectList)\n                        .flatMap(this::fromIterable)\n                        .flatMap(this::stream)\n                        .flatMap(this::flatMap)\n                        .flatMap(this::getDatasourceId)\n                        .flatMap(this::doCopyDatasource)\n                        .flatMap(this::collect)\n                        .flatMap(this::getDatasourceId)\n                        .flatMap(this::collectList)\n                        .flatMap(this::fromIterable)\n                        .flatMap(this::stream)\n                        .flatMap(this::flatMap)\n                        .flatMap(this::getDatasourceId)\n                        .flatMap(this::doCopyDatasource)\n                        .flatMap(this::collect)\n                        .flatMap(this::getDatasourceId)\n                        .flatMap(this::collectList)\n                        .flatMap(this::fromIterable)\n                        .flatMap(this::stream)\n                        .flatMap(this::flatMap)\n                        .flatMap(this::getDatasourceId)\n                        .flatMap(this::doCopyDatasource)\n                        .flatMap(this::collect)\n                        .flatMap(this::getDatasourceId)\n                        .flatMap(this::collectList)\n                        .flatMap(this::fromIterable)\n                        .flatMap(this::stream)\n                        .flatMap(this::flatMap)\n                        .flatMap(this::getDatas", "CodeBleu_score": 20.210864537392393}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t        return getBaseQuery(application.getId(), currentOrganizationId, visitorId)\n                .flatMap(query -> {\n                    if (query.getIsForked()) {\n                        return Mono.error(new AppsmithException(AppsmithError.INVALID_PARAMETER, \"Cannot copy datasource from a forked application.\"));\n                    }\n                    return Mono.just(query);\n                })\n                .flatMap(query -> getLiveQueries(query.getId(), currentOrganizationId, visitorId))\n                .flatMap(liveQueries -> {\n                    if (CollectionUtils.isEmpty(liveQueries)) {\n                        return Mono.error(new AppsmithException(AppsmithError.NO_RESOURCE_FOUND, FieldName.QUERY, \"\"));\n                    }\n                    return Mono.just(liveQueries);\n                })\n                .flatMap(liveQueries -> {\n                    Set<String> datasourceIds = liveQueries\n                            .stream()\n                            .map(NewPage::getUnpublishedPage)\n                            .filter(Objects::nonNull)\n                            .map(Page::getLayouts)\n                            .filter(Objects::nonNull)\n                            .map(layouts -> layouts.get(0))\n                            .filter(Objects::nonNull)\n                            .map(Layout::getDsl)\n                            .filter(Objects::nonNull)\n                            .map(dsl -> dsl.get(\"datasource\"))\n                            .filter(Objects::nonNull)\n                            .map(dsl -> (String) dsl)\n                            .collect(Collectors.toSet());\n\n                    return Mono.just(datasourceIds);\n                })\n                .flatMap(datasourceIds -> {\n                    if (CollectionUtils.isEmpty(datasourceIds)) {\n                        return Mono.error(new AppsmithException(AppsmithError.NO_RESOURCE_FOUND, FieldName.DATASOURCE, \"\"));\n                    }\n                    return Mono.just(datasourceIds);\n                })\n                .flatMap(datasourceIds -> {\n                    List<M", "CodeBleu_score": 41.10825726008625}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t        return Mono.zip(\n                Mono.just(currentOrganizationId),\n                Mono.just(application),\n                Mono.just(visitorId)\n        )\n                .flatMap(tuple -> {\n                    String currentOrganizationId = tuple.getT1();\n                    Application application = tuple.getT2();\n                    String visitorId = tuple.getT3();\n                    return Mono.zip(\n                            Mono.just(currentOrganizationId),\n                            Mono.just(application),\n                            Mono.just(visitorId),\n                            getLiveQueries(application)\n                    );\n                })\n                .flatMap(tuple -> {\n                    String currentOrganizationId = tuple.getT1();\n                    Application application = tuple.getT2();\n                    String visitorId = tuple.getT3();\n                    List<String> datasourceIds = tuple.getT4();\n                    if (datasourceIds.isEmpty()) {\n                        return Mono.error(new AppsmithException(AppsmithError.NO_RESOURCE_FOUND, \"datasources\", \"\"));\n                    }\n                    return Mono.zip(\n                            Mono.just(currentOrganizationId),\n                            Mono.just(application),\n                            Mono.just(visitorId),\n                            Mono.just(datasourceIds)\n                    );\n                })\n                .flatMap(tuple -> {\n                    String currentOrganizationId = tuple.getT1();\n                    Application application = tuple.getT2();\n                    String visitorId = tuple.getT3();\n                    List<String> datasourceIds = tuple.getT4();\n                    return Mono.zip(\n                            Mono.just(currentOrganizationId),\n                            Mono.just(application),\n                            Mono.just(visitorId),\n                            Mono.just(datasourceIds),\n                            copyDatasources(currentOrganizationId, datasourceIds, visitorId)\n                    );\n                })\n                .flatMap(tuple -> {\n                    String currentOrganizationId = tuple.getT1();\n                    Application application = tuple", "CodeBleu_score": 35.47805254253799}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return isSystemStatic(datasourceId)\n        .flatMap(isSystemStatic -> {\n            if (isSystemStatic) {\n                return Mono.just(datasourceId);\n            }\n\n            return isLegacyQuickRestApi(datasourceId)\n                .flatMap(isLegacyQuickRestApi -> {\n                    if (isLegacyQuickRestApi) {\n                        return createNewDatasourceFrom(organizationId, visitorId, datasourceId);\n                    }\n\n                    return isLegacyOpenblocksApi(datasourceId)\n                        .flatMap(isLegacyOpenblocksApi -> {\n                            if (isLegacyOpenblocksApi) {\n                                return createNewDatasourceFrom(organizationId, visitorId, datasourceId);\n                            }\n\n                            return getById(datasourceId)\n                                .flatMap(datasource -> createNewDatasource(organizationId, visitorId, datasource));\n                        });\n                });\n        });\n}", "CodeBleu_score": 42.8147655321221}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceService.getById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.isSystemStatic()) {\n                    return Mono.just(datasource.getId());\n                }\n\n                if (isLegacyQuickRestApi(datasource) || isLegacyOpenblocksApi(datasource)) {\n                    return createNewDatasourceFrom(organizationId, visitorId, datasource);\n                }\n\n                return datasourceService.create(organizationId, visitorId, datasource);\n            });\n}", "CodeBleu_score": 65.63940143936046}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return getById(datasourceId)\n            .flatMap(datasource -> {\n                if (isSystemStatic(datasource)) {\n                    return just(datasourceId);\n                } else if (isLegacyQuickRestApi(datasource) || isLegacyOpenblocksApi(datasource)) {\n                    return just(datasource.getId());\n                } else {\n                    return createNewDatasourceFrom(organizationId, visitorId, datasource);\n                }\n            });\n}", "CodeBleu_score": 43.2122693392783}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t    return this.upload(filePart)\n            .flatMap(s3Object -> {\n                if (user.getAvatar() != null) {\n                    return this.remove(user.getAvatar())\n                            .then(Mono.just(s3Object));\n                } else {\n                    return Mono.just(s3Object);\n                }\n            })\n            .map(s3Object -> {\n                user.setAvatar(s3Object.getKey());\n                return user;\n            })\n            .flatMap(this.userRepository::save)\n            .map(user1 -> !user1.getAvatar().isEmpty());\n}", "CodeBleu_score": 29.344343511866544}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t    // 1. Upload the new photo\n    return upload(filePart)\n        .flatMap(file -> {\n            // 2. Remove the old photo if it exists\n            if (user.getAvatar() != null) {\n                return remove(user.getAvatar())\n                    .then(Mono.just(file));\n            } else {\n                return Mono.just(file);\n            }\n        })\n        .flatMap(file -> {\n            // 3. Update the user with the new avatar\n            user.setAvatar(file.getId());\n            return userRepository.save(user)\n                .map(u -> true);\n        });\n}", "CodeBleu_score": 28.09452855966077}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t  return this.upload(filePart, user.getId())\n    .flatMap(url -> {\n      if (!this.isEmpty(user.getAvatar())) {\n        return this.remove(user.getAvatar())\n          .then(Mono.just(url));\n      }\n      return Mono.just(url);\n    })\n    .flatMap(url -> this.updateUserAvatar(user.getId(), url));\n}", "CodeBleu_score": 25.418427264873973}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    return Mono.just(authUser)\n        .map(this::getUsername)\n        .map(this::setName)\n        .map(this::encryptPassword)\n        .map(this::getAuthContext)\n        .map(this::setConnections)\n        .map(this::setIsNewUser)\n        .map(this::getAvatar)\n        .map(this::toAuthConnection)\n        .map(this::setIsEnabled)\n        .map(this::create)\n        .map(this::setTpAvatarLink)\n        .map(this::setState)\n        .map(this::add)\n        .map(this::getPassword)\n        .map(this::getSource)\n        .map(this::setPassword)\n        .map(this::newHashSet)\n        .map(this::setConnections)\n        .map(this::setIsNewUser)\n        .map(this::create)\n        .map(this::setTpAvatarLink)\n        .map(this::setState)\n        .map(this::add)\n        .map(this::getPassword)\n        .map(this::getSource)\n        .map(this::setPassword)\n        .map(this::newHashSet)\n        .map(this::setConnections)\n        .map(this::setIsNewUser)\n        .map(this::create)\n        .map(this::setTpAvatarLink)\n        .map(this::setState)\n        .map(this::add)\n        .map(this::getPassword)\n        .map(this::getSource)\n        .map(this::setPassword)\n        .map(this::newHashSet)\n        .map(this::setConnections)\n        .map(this::setIsNewUser)\n        .map(this::create)\n        .map(this::setTpAvatarLink)\n        .map(this::setState)\n        .map(this::add)\n        .map(this::getPassword)\n        .map(this::getSource)\n        .map(this::setPassword)\n        .map(this::newHashSet)\n       ", "CodeBleu_score": 25.738428205907844}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    return Mono.just(authUser)\n            .map(this::getUsername)\n            .map(this::setName)\n            .map(this::setIsNewUser)\n            .map(this::getAuthContext)\n            .map(this::encryptPassword)\n            .map(this::setPassword)\n            .map(this::getAvatar)\n            .map(this::setTpAvatarLink)\n            .map(this::setState)\n            .map(this::add)\n            .map(this::setIsEnabled)\n            .map(this::create)\n            .flatMap(this::getPassword)\n            .flatMap(this::getSource)\n            .flatMap(this::setConnections)\n            .flatMap(this::getAvatar)\n            .flatMap(this::toAuthConnection)\n            .flatMap(this::setIsEnabled)\n            .flatMap(this::create)\n            .flatMap(this::getPassword)\n            .flatMap(this::getSource)\n            .flatMap(this::setConnections)\n            .flatMap(this::getAvatar)\n            .flatMap(this::toAuthConnection)\n            .flatMap(this::setIsEnabled)\n            .flatMap(this::create)\n            .flatMap(this::getPassword)\n            .flatMap(this::getSource)\n            .flatMap(this::setConnections)\n            .flatMap(this::getAvatar)\n            .flatMap(this::toAuthConnection)\n            .flatMap(this::setIsEnabled)\n            .flatMap(this::create)\n            .flatMap(this::getPassword)\n            .flatMap(this::getSource)\n            .flatMap(this::setConnections)\n            .flatMap(this::getAvatar)\n            .flatMap(this::toAuthConnection)\n            .flatMap(this::setIsEnabled)\n            .flatMap(this::create)\n            .flatMap(this::getPassword)\n            .flatMap(this::getSource)\n            .flatMap(this::setConnections)\n            .flatMap(this::getAvatar)\n           ", "CodeBleu_score": 24.25265063406627}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    User user = new User();\n    user.setName(authUser.getUsername());\n    user.setState(authUser.getState());\n    user.setIsEnabled(authUser.isEnabled());\n    user.setAvatar(authUser.getAvatar());\n    if (authUser.getSource().equals(\"email\") && authUser.getAuthContext() != null && authUser.getAuthContext().getPassword() != null) {\n        user.setPassword(authUser.getAuthContext().getPassword());\n    }\n    user.setConnections(authUser.getConnections());\n    user.setIsNewUser(true);\n    return user.create();\n}", "CodeBleu_score": 41.83650705708189}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return getConnections(user)\n            .flatMap(connections -> {\n                if (connections.stream().anyMatch(connection -> connection.getSource().equals(\"email\") && connection.getRawId().equals(email))) {\n                    return Mono.error(new DuplicateKeyException(\"Email already bound to user\"));\n                } else {\n                    return Mono.just(connections);\n                }\n            })\n            .flatMap(connections -> {\n                Connection connection = new Connection();\n                connection.setSource(\"email\");\n                connection.setRawId(email);\n                connections.add(connection);\n                return save(user);\n            })\n            .onErrorResume(DuplicateKeyException.class, e -> Mono.just(false));\n}", "CodeBleu_score": 35.97171495130592}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return getConnections(user.getRawId())\n        .flatMap(connections -> {\n            List<Connection> connectionList = connections.getConnections();\n            Connection connection = connectionList.stream()\n                .filter(c -> c.getSource().equals(email))\n                .findFirst()\n                .orElse(null);\n            if (connection != null) {\n                return Mono.just(false);\n            }\n            return save(user, email);\n        });\n}", "CodeBleu_score": 41.75517447266096}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return getConnections(user.getId(), \"email\")\n        .flatMap(connections -> {\n            if (connections.stream().anyMatch(connection -> connection.getRawId().equals(email))) {\n                return Mono.error(new DuplicateKeyException(\"Email already bound to another account\"));\n            }\n            return Mono.just(connections);\n        })\n        .flatMap(connections -> {\n            Connection connection = new Connection.Builder()\n                .name(email)\n                .just(true)\n                .source(\"email\")\n                .rawId(email)\n                .build();\n            connections.add(connection);\n            user.setConnections(connections);\n            return save(user);\n        })\n        .onErrorResume(DuplicateKeyException.class, e -> Mono.just(false));\n}", "CodeBleu_score": 48.1356029581996}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return userRepository.findById(userId)\n            .flatMap(user -> {\n                if (user.getPassword().equals(encryptPassword(oldPassword))) {\n                    user.setPassword(encryptPassword(newPassword));\n                    return userRepository.save(user);\n                } else {\n                    return Mono.error(new RuntimeException(\"Invalid password\"));\n                }\n            })\n            .map(user -> true);\n}", "CodeBleu_score": 25.46864196814073}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return userRepository.findById(userId)\n            .flatMap(user -> {\n                if (user.matchPassword(oldPassword)) {\n                    user.setPassword(encryptPassword(newPassword));\n                    return userRepository.save(user);\n                } else {\n                    return Mono.error(new Exception(\"Invalid password\"));\n                }\n            })\n            .map(user -> true)\n            .onErrorReturn(false);\n}", "CodeBleu_score": 23.026152940994997}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return userRepository\n            .findById(userId)\n            .flatMap(user -> {\n                if (user.getPassword().equals(encryptPassword(oldPassword))) {\n                    user.setPassword(encryptPassword(newPassword));\n                    return userRepository.save(user);\n                }\n                return Mono.error(new IllegalArgumentException(\"Invalid password\"));\n            })\n            .map(user -> true);\n}", "CodeBleu_score": 23.576776414330638}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t        return getOrgId(orgMember)\n                .flatMapMany(orgId -> {\n                    if (isAdmin(orgMember)) {\n                        return getAllGroups(orgId, withoutDynamicGroups);\n                    }\n                    return getUserGroupIdsInOrg(orgId, userId, withoutDynamicGroups);\n                })\n                .filter(groupId -> !isAllUsersGroup(groupId))\n                .map(groupId -> {\n                    return new HashMap<String, String>() {\n                        {\n                            put(\"id\", groupId);\n                            put(\"name\", getName(groupId, locale));\n                        }\n                    };\n                })\n                .collectList();\n    }", "CodeBleu_score": 26.51910569616314}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t    return isAdmin(userId)\n            .flatMapMany(isAdmin -> {\n                if (isAdmin) {\n                    return getAllUserGroupsInOrg(orgMember.getOrgId(), withoutDynamicGroups, locale);\n                } else {\n                    return getUserGroupsInOrg(orgMember.getOrgId(), withoutDynamicGroups, locale);\n                }\n            })\n            .filter(group -> !isAllUsersGroup(group))\n            .map(group -> {\n                Map<String, String> groupMap = new HashMap<>();\n                groupMap.put(\"id\", group.getId());\n                groupMap.put(\"name\", group.getName());\n                return groupMap;\n            })\n            .collectList();\n}", "CodeBleu_score": 32.16011416325279}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t        return getOrgId(orgMember)\n                .flatMap(orgId -> {\n                    if (isAdmin(orgMember)) {\n                        return getAllUserGroups(orgId, withoutDynamicGroups, locale);\n                    } else {\n                        return getUserGroups(userId, orgId, withoutDynamicGroups, locale);\n                    }\n                })\n                .map(userGroups -> userGroups.stream()\n                        .filter(userGroup -> !isAllUsersGroup(userGroup))\n                        .map(userGroup -> {\n                            Map<String, String> group = new HashMap<>();\n                            group.put(ID, getId(userGroup));\n                            group.put(NAME, getName(userGroup, locale));\n                            return group;\n                        })\n                        .collect(Collectors.toList()));\n    }", "CodeBleu_score": 28.668913779925187}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t  return mongoUpsertHelper.upsert(\n    mongoTemplate.getCollection(USER_STATUS_COLLECTION),\n    new Query(where(\"userId\").is(userId)),\n    new Update().set(\"hasShowNewUserGuidance\", true),\n    UserStatus.class\n  );\n}", "CodeBleu_score": 23.159238586921404}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t  UserStatus userStatus = new UserStatus(userId);\n  userStatus.setHasShowNewUserGuidance(true);\n  return mongoUpsertHelper.upsert(userStatus);\n}", "CodeBleu_score": 32.083289296133245}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    return userStatusRepository.upsert(\n        new UserStatus(userId, true),\n        (existingUserStatus, newUserStatus) -> existingUserStatus.setHasShowNewUserGuidance(newUserStatus.getHasShowNewUserGuidance())\n    );\n}", "CodeBleu_score": 24.841185727030172}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition is nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue is nil\")\n\t}\n\tvar wg sync.WaitGroup\n\tg := rungroup.New(context.Background(), &wg)\n\tfor k, p := range c.partitions {\n\t\tif predicatePartition(k, p) {\n\t\t\tg.Enqueue(func() {\n\t\t\t\tp.clearMatching(predicateValue)\n\t\t\t})\n\t\t}\n\t}\n\tg.Wait()\n}", "CodeBleu_score": 39.19876881159253}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\n\t// create a run group to handle clearing entries across multiple partitions concurrently\n\tgroup, ctx := errgroup.WithContext(context.Background())\n\n\t// enqueue partitions that satisfy the predicate\n\tfor _, partition := range c.partitions {\n\t\tif predicatePartition(partition.key, partition) {\n\t\t\tgroup.Go(func() error {\n\t\t\t\tpartition.clearMatching(ctx, predicateValue)\n\t\t\t\treturn nil\n\t\t\t})\n\t\t}\n\t}\n\n\t// wait for all tasks to complete\n\tif err := group.Wait(); err != nil {\n\t\tpanic(err)\n\t}\n}", "CodeBleu_score": 40.14061632871365}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\n\t// Create a run group to handle clearing entries across multiple partitions concurrently.\n\tg := rungroup.Run(context.Background())\n\n\t// Enqueue partitions that satisfy the predicate for processing.\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.key, p) {\n\t\t\tg.Enqueue(func(ctx context.Context) {\n\t\t\t\tp.clearMatching(predicateValue)\n\t\t\t})\n\t\t}\n\t}\n\n\t// Wait for all tasks to complete.\n\tg.Wait()\n}", "CodeBleu_score": 38.9482805390524}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\tpanic(\"invalid input\")\n\t}\n\taverageWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\treturn int(math.Floor(float64(maxItemsTotal) * averageWeightPerPartition))\n}", "CodeBleu_score": 49.61609872151725}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\tpanic(\"numPartitions and totalWeightQuantity must be greater than zero\")\n\t}\n\n\t// Calculate the average weight per partition\n\taverageWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\n\t// Calculate the maximum size per partition\n\tmaxSizePerPartition := int(math.Floor(float64(maxItemsTotal) / averageWeightPerPartition))\n\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 50.136842119586454}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\tpanic(\"number of partitions and total weight quantity must be greater than zero\")\n\t}\n\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\tmaxSizePerPartition := int(math.Floor(float64(maxItemsTotal) / avgWeightPerPartition))\n\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 49.78827719956052}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\t    Map<String, Object> map = new HashMap<String, Object>();\n    DatabaseMetaData metadata = getConnectionMetadata();\n    if (metadata != null) {\n        map.put(\"databaseProductName\", metadata.getDatabaseProductName());\n        map.put(\"databaseProductVersion\", metadata.getDatabaseProductVersion());\n    }\n    return map;\n}", "CodeBleu_score": 54.851963030713605}, {"code": "public Map<String, Object> contributorMap(){\n\t  Map<String, Object> map = new HashMap<>();\n  DatabaseMetaData metadata = getConnectionMetadata();\n  if (metadata != null) {\n    map.put(\"databaseProductName\", metadata.getDatabaseProductName());\n    map.put(\"databaseProductVersion\", metadata.getDatabaseProductVersion());\n  }\n  return map;\n}", "CodeBleu_score": 43.36638688835133}, {"code": "public Map<String, Object> contributorMap(){\n\t  Map<String, Object> map = getConnectionMetadata();\n  if (map != null) {\n    map.put(\"databaseProductName\", getDatabaseProductName());\n    map.put(\"databaseVersion\", getDatabaseVersion());\n  }\n  return map;\n}", "CodeBleu_score": 29.372080895532715}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    Map userSettings = configMap.getUserSettings()\n    if (userSettings == null) {\n        info.setAllowRegistration(false)\n        info.setMustVerifyEmailOnRegistration(false)\n    } else {\n        info.setAllowRegistration(userSettings.get(\"allowRegistration\"))\n        info.setMustVerifyEmailOnRegistration(userSettings.get(\"mustVerifyEmailOnRegistration\"))\n    }\n}", "CodeBleu_score": 39.493588529270006}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    UserSetting userSetting = configMap.getUserSetting()\n    if (userSetting == null) {\n        info.setAllowRegistration(false)\n        info.setMustVerifyEmailOnRegistration(false)\n    } else {\n        info.setAllowRegistration(userSetting.isAllowRegistration())\n        info.setMustVerifyEmailOnRegistration(userSetting.isMustVerifyEmailOnRegistration())\n    }\n}", "CodeBleu_score": 44.372557250519904}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    // Get the user settings from the configuration map.\n    ConfigMap userSettings = configMap.getMap(\"userSettings\");\n    if (userSettings == null) {\n        // If the user settings are null, disable registration and email verification.\n        info.setAllowRegistration(false);\n        info.setMustVerifyEmailOnRegistration(false);\n    } else {\n        // Otherwise, update the GlobalInfo object with the retrieved settings.\n        info.setAllowRegistration(userSettings.getBoolean(\"allowRegistration\", false));\n        info.setMustVerifyEmailOnRegistration(userSettings.getBoolean(\"mustVerifyEmailOnRegistration\", false));\n    }\n}", "CodeBleu_score": 46.77770357795087}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\t  // Create a new thread group and thread to execute the restart process.\n  ThreadGroup threadGroup = new ThreadGroup(\"Restart Thread Group\");\n  Thread thread = new Thread(threadGroup, new Runnable() {\n    public void run() {\n      try {\n        // Set the thread as non-daemon and assign the application class loader as its context class loader.\n        setDaemon(false);\n        setContextClassLoader(getClassLoader());\n\n        // Invoke the restart method.\n        restart();\n      } catch (Throwable t) {\n        // Log the error.\n        logError(\"Restart Error\", t);\n      }\n    }\n  }, \"Restart Thread\");\n\n  // Start the thread.\n  thread.start();\n\n  // Return a message indicating the restart has begun.\n  return \"Restarting...\";\n}", "CodeBleu_score": 46.660900065280835}, {"code": "public Object restart(){\n\t    ThreadGroup group = new ThreadGroup(\"restart-thread-group\");\n    Thread thread = new Thread(group, new Runnable() {\n        public void run() {\n            // do something\n        }\n    });\n    thread.setContextClassLoader(getClassLoader());\n    thread.setDaemon(false);\n    thread.start();\n    return \"Restarting...\";\n}", "CodeBleu_score": 50.30266702458116}, {"code": "public Object restart(){\n\t    ThreadGroup tg = new ThreadGroup(this.name + \"-restart\");\n    Thread t = new Thread(tg, new Runnable() {\n        public void run() {\n            try {\n                ClassLoader cl = Thread.currentThread().getContextClassLoader();\n                Thread.currentThread().setContextClassLoader(Application.class.getClassLoader());\n                Application.restart();\n                Thread.currentThread().setContextClassLoader(cl);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }, \"restart\");\n    t.setDaemon(false);\n    t.start();\n    return \"Application restart initiated\";\n}", "CodeBleu_score": 37.85810255416146}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t        ObjectMapper objectMapper = new ObjectMapper();\n        objectMapper.registerModule(new JavaTimeModule());\n        objectMapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n        objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n        objectMapper.setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY);\n        objectMapper.setVisibility(PropertyAccessor.CREATOR, JsonAutoDetect.Visibility.ANY);\n        objectMapper.setVisibility(PropertyAccessor.IS_GETTER, JsonAutoDetect.Visibility.NONE);\n        objectMapper.setVisibility(PropertyAccessor.SETTER, JsonAutoDetect.Visibility.NONE);\n        objectMapper.setVisibility(PropertyAccessor.GETTER, JsonAutoDetect.Visibility.NONE);\n        objectMapper.setVisibility(PropertyAccessor.SETTER, JsonAutoDetect.Visibility.NONE);\n        objectMapper.setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.NONE);\n        objectMapper.setVisibility(PropertyAccessor.CREATOR, JsonAutoDetect.Visibility.NONE);\n        objectMapper.setVisibility(PropertyAccessor.IS_GETTER, JsonAutoDetect.Visibility.NONE);\n        objectMapper.setVisibility(PropertyAccessor.SETTER, JsonAutoDetect.Visibility.NONE);\n        objectMapper.setVisibility(PropertyAccessor.GETTER, JsonAutoDetect.Visibility.NONE);\n        objectMapper.setVisibility(PropertyAccessor.SETTER, JsonAutoDetect.Visibility.NONE);\n        objectMapper.setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.NONE);\n        objectMapper.setVisibility(PropertyAccessor.CREATOR, JsonAutoDetect.Visibility.NONE);\n        objectMapper.setVisibility(PropertyAccessor.IS_GETTER, JsonAutoDetect.Visibility.NONE);\n        objectMapper.setVisibility(PropertyAccessor.SETTER, JsonAutoDetect.Visibility.NONE);\n        objectMapper.setVisibility(PropertyAccessor.GETTER, JsonAutoDetect.Visibility.NONE);\n        objectMapper.", "CodeBleu_score": 17.59076769186691}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t        configurer.defaultCodecs().jackson2JsonDecoder(jackson2JsonDecoder());\n        configurer.defaultCodecs().jackson2JsonEncoder(jackson2JsonEncoder());\n    }", "CodeBleu_score": 41.851619905662574}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t    configurer.defaultCodecs().jackson2JsonDecoder(jackson2JsonDecoder());\n    configurer.defaultCodecs().jackson2JsonEncoder(jackson2JsonEncoder());\n}", "CodeBleu_score": 41.57562130157702}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t    return RouterFunctions.route(\n            RequestPredicates.all(\n                    RequestPredicates.method(HttpMethod.GET),\n                    RequestPredicates.path(\"/console/**\"),\n                    RequestPredicates.path(\"/console/assets/**\", false),\n                    RequestPredicates.accept(MediaType.TEXT_HTML),\n                    RequestPredicates.headers(headers -> !headers.containsKey(HttpHeaders.UPGRADE))\n            ),\n            request -> {\n                final String indexHtml = getConsole().getIndexHtml();\n                return ServerResponse.ok().contentType(MediaType.TEXT_HTML).body(BodyInserters.fromValue(indexHtml));\n            }\n    );\n}", "CodeBleu_score": 25.142912727045687}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t    return RouterFunctions.route(\n            RequestPredicates.all()\n                    .and(RequestPredicates.path(\"/console/**\")\n                            .and(RequestPredicates.path(\"/console/assets/**\").negate())\n                            .and(RequestPredicates.accept(MediaType.TEXT_HTML)\n                                    .and(RequestPredicates.method(HttpMethod.GET)\n                                            .and(RequestPredicates.headers(h -> !h.containsKey(\"Upgrade\")))))),\n            request -> ServerResponse.temporaryRedirect(URI.create(\"/console/index.html\")).build());\n}", "CodeBleu_score": 22.95835782205842}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t    return RouterFunctions\n            .route(\n                    RequestPredicates.path(\"/console/**\")\n                            .and(RequestPredicates.path(\"/console/assets/**\", false))\n                            .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n                            .and(RequestPredicates.method(HttpMethod.GET))\n                            .and(RequestPredicates.headers(header -> !header.containsKey(\"Upgrade\") || !header.get(\"Upgrade\").equals(\"websocket\")))\n                            .negate(),\n                    request -> ServerResponse.temporaryRedirect(URI.create(\"/console/index.html\"))\n                            .build()\n            );\n}", "CodeBleu_score": 21.6089583727357}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t    return RouterFunctions\n        .route(\n            RequestPredicates.GET(\"/uc/**\")\n                .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n                .and(RequestPredicates.not(RequestPredicates.accept(MediaType.TEXT_EVENT_STREAM))),\n            request -> {\n                String path = request.path();\n                String ucPath = \"/uc\";\n                if (path.startsWith(ucPath)) {\n                    path = path.substring(ucPath.length());\n                }\n                if (path.startsWith(\"/\")) {\n                    path = path.substring(1);\n                }\n                return ServerResponse.temporaryRedirect(URI.create(\"/uc/index.html#\" + path)).build();\n            }\n        );\n}", "CodeBleu_score": 31.125014380020144}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t    return RouterFunctions.route(\n            RequestPredicates.GET(\"/uc/**\")\n                    .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n                    .and(RequestPredicates.GET(\"/uc/assets/**\").negate())\n                    .and(RequestPredicates.method(HttpMethod.GET))\n                    .and(RequestPredicates.websocket().negate()),\n            request -> ServerResponse.temporaryRedirect(URI.create(getUc(request) + \"/index.html\")).build());\n}", "CodeBleu_score": 26.52697163403775}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t\treturn RouterFunctions.route(\n\t\t\tRequestPredicates.GET(\"/uc/**\")\n\t\t\t\t\t.and(RequestPredicates.accept(MediaType.TEXT_HTML))\n\t\t\t\t\t.and(RequestPredicates.GET(\"/uc/assets/**\").negate())\n\t\t\t\t\t.and(RequestPredicates.method(HttpMethod.GET))\n\t\t\t\t\t.and(RequestPredicates.not(RequestPredicates.WEBSOCKET())),\n\t\t\trequest -> {\n\t\t\t\tString ucLocation = getUcLocation();\n\t\t\t\treturn ServerResponse.temporaryRedirect(URI.create(ucLocation)).build();\n\t\t\t});\n}", "CodeBleu_score": 24.32245023302331}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    val sessionRepository = ReactiveIndexedSessionRepository<MapSession>()\n    sessionRepository.setDefaultMaxInactiveInterval(determineTimeout())\n    sessionRepository.setReactiveSessionMap(new ConcurrentHashMap<String, MapSession>())\n    return sessionRepository\n}", "CodeBleu_score": 34.33909147582298}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    ReactiveIndexedSessionRepository<MapSession> repository = new ReactiveIndexedSessionRepository<MapSession>()\n    repository.setDefaultMaxInactiveInterval(session.timeout)\n    repository.setReactiveIndexResolver(new DefaultReactiveIndexResolver<MapSession>())\n    repository.setSessionMap(new ConcurrentHashMap<String, MapSession>())\n    repository.setSessionSerializer(new Jackson2JsonRedisSerializer<MapSession>(MapSession.class))\n    repository.setDefaultRedisSerializer(new GenericToStringSerializer<>(String.class))\n    repository.setRedisFlushMode(RedisFlushMode.IMMEDIATE)\n    repository.setApplicationEventPublisher(applicationContext.getApplicationEventPublisher())\n    repository.setRedisOperations(redisTemplate)\n    repository\n}", "CodeBleu_score": 23.92670404020495}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\n\tval map = new ConcurrentHashMap<String, MapSession>()\n\n\tval repository = new ReactiveIndexedSessionRepository<MapSession>(map)\n\n\trepository.defaultMaxInactiveInterval = determineTimeout()\n\n\treturn repository\n\n}", "CodeBleu_score": 25.790804980215604}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    DefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService)\n\n    if (haloProperties.security.twoFactorAuth.enabled) {\n        userDetailsService.setTwoFactorAuthDisabled(false)\n    } else {\n        userDetailsService.setTwoFactorAuthDisabled(true)\n    }\n\n    return userDetailsService\n}", "CodeBleu_score": 34.73513114682537}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\n    DefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService)\n\n    userDetailsService.setTwoFactorAuth(haloProperties.security.twoFactorAuth)\n\n    return userDetailsService\n}", "CodeBleu_score": 34.269519588884116}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    DefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService)\n    userDetailsService.setTwoFactorAuth(haloProperties.security.twoFactorAuth)\n    return userDetailsService\n}", "CodeBleu_score": 34.21706956267159}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\t    Comment.CommentOwner commentOwner = new Comment.CommentOwner();\n    commentOwner.setKind(\"email\");\n    commentOwner.setEmail(email);\n    commentOwner.setDisplayName(displayName);\n    commentOwner.setAnnotations(new HashMap<String, String>());\n    commentOwner.getAnnotations().put(\"avatar\", avatarUrl);\n    commentOwner.getAnnotations().put(\"website\", website);\n    return commentOwner;\n}", "CodeBleu_score": 46.57082122072399}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t    Comment.CommentOwner commentOwner = new Comment.CommentOwner();\n    commentOwner.setKind(\"email\");\n    commentOwner.setEmail(getEmail());\n    commentOwner.setDisplayName(getDisplayName());\n    commentOwner.setAnnotations(new HashMap<String, String>());\n    commentOwner.getAnnotations().put(\"avatar\", getAvatar());\n    commentOwner.getAnnotations().put(\"website\", getWebsite());\n    return commentOwner;\n}", "CodeBleu_score": 42.01369239226074}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t  if (this.getKind() == null) {\n    setKind(\"email\");\n  }\n  if (this.getEmail() != null) {\n    setEmail(this.getEmail().toLowerCase());\n  } else {\n    setEmail(\"\");\n  }\n  if (this.getDisplayName() == null) {\n    setDisplayName(getEmail());\n  }\n  if (this.getAnnotations() == null) {\n    setAnnotations(new HashMap<String, String>());\n  }\n  if (this.getAnnotations().get(\"avatar\") == null) {\n    getAnnotations().put(\"avatar\", \"\");\n  }\n  if (this.getAnnotations().get(\"website\") == null) {\n    getAnnotations().put(\"website\", \"\");\n  }\n  return this;\n}", "CodeBleu_score": 18.632469974630276}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    if (commentOwner.kind == \"email\") {\n        User user = commentOwner.getEmail().fetch();\n        return user.equals(post.getOwner());\n    } else {\n        return commentOwner.name == post.getOwner().getName();\n    }\n}", "CodeBleu_score": 29.31808117626307}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    if (commentOwner.getKind() == \"email\") {\n        return commentOwner.getEmail() == post.getOwner().getEmail();\n    } else {\n        return commentOwner.getName() == post.getOwner().getName();\n    }\n}", "CodeBleu_score": 22.09943066796921}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t  if (commentOwner.getKind() == 'email') {\n    User user = commentOwner.getEmail().fetch();\n    return post.getOwner().equals(user);\n  } else {\n    return post.getOwner().getName().equals(commentOwner.getName());\n  }\n}", "CodeBleu_score": 29.36523198527581}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\t    ListOptions listOptions = new ListOptions();\n    String fieldSelector = getFieldSelector();\n    String labelSelector = getLabelSelector();\n    String ownerName = getOwnerName();\n    String ownerKind = getOwnerKind();\n    String keyword = getKeyword();\n\n    if (isNotBlank(fieldSelector) || isNotBlank(labelSelector) || isNotBlank(ownerName) || isNotBlank(ownerKind)) {\n        if (isNotBlank(fieldSelector)) {\n            fieldSelector = fieldSelector.trim();\n        }\n\n        if (isNotBlank(labelSelector)) {\n            labelSelector = labelSelector.trim();\n        }\n\n        if (isNotBlank(ownerName)) {\n            ownerName = ownerName.trim();\n        }\n\n        if (isNotBlank(ownerKind)) {\n            ownerKind = ownerKind.trim();\n        }\n\n        if (isNotBlank(keyword)) {\n            keyword = keyword.trim();\n        }\n\n        if (isNotBlank(fieldSelector)) {\n            fieldSelector = fieldSelector.trim();\n            fieldSelector = fieldSelector.replaceAll(\"\\\\s+\", \"\");\n            fieldSelector = fieldSelector.replaceAll(\"\\\\*\", \"\");\n            fieldSelector = fieldSelector.replaceAll(\"\\\\,\", \"\");\n            fieldSelector = fieldSelector.replaceAll(\"\\\\(\", \"\");\n            fieldSelector = fieldSelector.replaceAll(\"\\\\)\", \"\");\n            fieldSelector = fieldSelector.replaceAll(\"\\\\[\", \"\");\n            fieldSelector = fieldSelector.replaceAll(\"\\\\]\", \"\");\n            fieldSelector = fieldSelector.replaceAll(\"\\\\{\", \"\");\n            fieldSelector = fieldSelector.replaceAll(\"\\\\}\", \"\");\n            fieldSelector = fieldSelector.replaceAll(\"\\\\.\", \"\");\n            fieldSelector = fieldSelector.replaceAll(\"\\\\/\", \"\");\n            fieldSelector = fieldSelector.replaceAll(\"\\\\=\", \"\");\n            fieldSelector = fieldSelector.replaceAll(\"\\\\!\", \"\");\n            fieldSelector = fieldSelector.replaceAll(\"\\\\<\", \"\");\n            fieldSelector = fieldSelector.replaceAll(\"\\\\>\", \"\");\n            fieldSelector = fieldSelector.replaceAll(\"\\\\;\", \"\");\n            fieldSelector =", "CodeBleu_score": 35.0887738710004}, {"code": "public ListOptions toListOptions(){\n\t    ListOptions listOptions = new ListOptions();\n    String fieldSelector = labelAndFieldSelectorToListOptions(labelSelector, fieldSelector);\n    if (isNotBlank(keyword)) {\n        fieldSelector = fieldSelector + \" and \" + getKeyword(keyword);\n    }\n    if (isNotBlank(ownerName)) {\n        fieldSelector = fieldSelector + \" and \" + getOwnerName(ownerName);\n    }\n    listOptions.setFieldSelector(fieldSelector);\n    return listOptions;\n}", "CodeBleu_score": 24.62795073503449}, {"code": "public ListOptions toListOptions(){\n\t  ListOptions listOptions = new ListOptions();\n  listOptions.setFieldSelector(labelAndFieldSelectorToListOptions(getLabelSelector(), getFieldSelector()));\n  if (isNotBlank(getKeyword())) {\n    listOptions.setFieldSelector(listOptions.getFieldSelector() + \",\" + getKeyword());\n  }\n  if (isNotBlank(getOwnerName()) && isNotBlank(getOwnerKind())) {\n    listOptions.setFieldSelector(listOptions.getFieldSelector() + \",\" + getOwnerIdentity());\n  }\n  return listOptions;\n}", "CodeBleu_score": 21.498125228578143}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    return Mono.just(commentName)\n            .filter(nameOf -> nameOf != null)\n            .map(nameOf -> nameOf.toLowerCase())\n            .flatMap(nameOf -> getUpvote(nameOf))\n            .map(upvote -> new CommentStats(upvote))\n            .defaultIfEmpty(new CommentStats());\n}", "CodeBleu_score": 38.83374493509031}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    return getByName(commentName)\n        .map(Comment::getUpvote)\n        .map(CommentStats::new)\n        .defaultIfEmpty(new CommentStats());\n}", "CodeBleu_score": 29.585625296502403}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    return getByName(commentName)\n        .map(Comment::getUpvote)\n        .map(CommentStats::new)\n        .switchIfEmpty(Mono.just(new CommentStats()));\n}", "CodeBleu_score": 29.7986769797572}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\t    // Create the subscriber\n    Subscriber subscriber = createSubscriber(identity);\n    // Set the interest reason\n    subscriber.setReasonType(ReasonType.SOMEONE_REPLIED_TO_YOU, \"Replied to you\");\n    // Subscribe\n    subscribe(subscriber);\n}", "CodeBleu_score": 18.35592595911843}, {"code": "void subscribeReply(UserIdentity identity){\n\t    // Create a subscriber from the given identity\n    UserSubscriber subscriber = createSubscriber(identity);\n\n    // Set up the interest reason\n    InterestReason reason = setReasonType(subscriber, \"someone replied to you\");\n    setExpression(reason, \"replied.owner == \\\"\" + identity.getUserName() + \"\\\"\");\n\n    // Subscribe the user to the notification center\n    subscribe(subscriber);\n}", "CodeBleu_score": 31.874115148100636}, {"code": "void subscribeReply(UserIdentity identity){\n\t  // Create a subscriber for the user\n  Subscriber subscriber = createSubscriber(identity);\n\n  // Set the reason type for the subscription\n  subscriber.setReasonType(ReasonType.SOMEONE_REPLIED_TO_YOU);\n\n  // Set the condition for the reason type\n  subscriber.setExpression(\"replied.owner == '\" + identity.getName() + \"'\");\n\n  // Subscribe the user to the notification center\n  subscribe(subscriber);\n}", "CodeBleu_score": 26.76995459500844}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\t    return setApproved(comment, true)\n            .flatMap(comment1 -> setApprovedTime(comment1, now()))\n            .onErrorResume(e -> updateCommentWithRetry(comment, this::approveComment));\n}", "CodeBleu_score": 15.131168354699431}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t    return setApproved(comment, true)\n            .onErrorResume(e -> {\n                if (e instanceof OptimisticLockingFailureException) {\n                    return getMetadata(comment.getId())\n                            .flatMap(metadata -> updateCommentWithRetry(comment, metadata, this::setApproved));\n                }\n                return Mono.error(e);\n            });\n}", "CodeBleu_score": 28.743944408997546}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t    return getClient()\n        .updateComment(\n            comment.getId(),\n            c -> {\n                c.setApproved(true);\n                c.setApprovedTime(now());\n            }\n        )\n        .onErrorResume(\n            OptimisticConcurrencyException.class,\n            e -> updateCommentWithRetry(comment, e)\n        );\n}", "CodeBleu_score": 26.54726812996786}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->setLivewire($this->getLivewire());\n    }\n\n    if ($this->getLivewire() instanceof HasRecord && $action instanceof HasRecord) {\n        $action->setRecord($this->getLivewire()->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 65.8930621418263}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->setLivewire($this->getLivewire());\n    }\n\n    if ($this instanceof HasRecord && $action instanceof HasRecord) {\n        $action->setRecord($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 65.77144480149025}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->setLivewire($this->getLivewire());\n    }\n\n    if ($this instanceof HasRecord && $action instanceof HasRecord) {\n        $action->setRecord($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 65.77144480149025}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t\t$this->evaluateSuccessRedirect();\n\t$this->redirect();\n\treturn $this;\n}", "CodeBleu_score": 20.269676414923904}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t\t$this->evaluateSuccessRedirect();\n\tif ($this->successRedirect) {\n\t\t$this->redirect($this->successRedirect);\n\t}\n\treturn $this;\n}", "CodeBleu_score": 32.32789971658332}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t\t$redirect = $this->getSuccessRedirect();\n\tif ($redirect) {\n\t\t$this->redirect($redirect);\n\t}\n\treturn $this;\n}", "CodeBleu_score": 44.87255024723255}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if ($record?->exists && method_exists($record, 'tags')) {\n        $tagClassName = config('tags.models.tag');\n\n        $record->tags()->sync(\n            collect($state)->map(function ($tagName) use ($tagClassName) {\n                $locale = $tagClassName::getLocale();\n\n                $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n                if ($tag?->isEmpty() ?? true) {\n                    $tag = $tagClassName::create([\n                        'name' => [$locale => $tagName],\n                    ]);\n                }\n\n                return $tag;\n            })->flatten()->pluck('id')->toArray()\n        );\n    }\n}", "CodeBleu_score": 64.01806769280905}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if ($record && method_exists($record, 'tags')) {\n        $tagClassName = $this->getTagClassName();\n\n        $tagNames = collect($state)->map(function ($tagName) use ($tagClassName) {\n            $locale = $tagClassName::getLocale();\n\n            $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n            if ($tag?->isEmpty() ?? true) {\n                $tag = $tagClassName::create([\n                    'name' => [$locale => $tagName],\n                ]);\n            }\n\n            return $tag;\n        })->flatten;\n\n        $record->tags()->sync($tagNames->pluck('id'));\n    }\n}", "CodeBleu_score": 74.49196287924373}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if ($record && method_exists($record, 'tags')) {\n        $tagClassName = $this->getTagClassName();\n\n        $record->tags()->sync(\n            collect($state)->map(function ($tagName) use ($tagClassName) {\n                $locale = $tagClassName::getLocale();\n\n                $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n                if ($tag?->isEmpty() ?? true) {\n                    $tag = $tagClassName::create([\n                        'name' => [$locale => $tagName],\n                    ]);\n                }\n\n                return $tag;\n            })->flatten()->pluck('id')->toArray()\n        );\n    }\n}", "CodeBleu_score": 65.53409782571154}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to dissect repository path: %w\", err)\n\t}\n\n\tscope := authz.NewScope(spacePath, repoName, authz.ResourcePipeline)\n\tresource := authz.NewResource(pipelineIdentifier)\n\n\terr = authorizer.Check(ctx, session, scope, resource, permission)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"unauthorized: missing permission %s: %w\", permission.String(), err)\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 57.772729743442696}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// Check if the user has permission to access the pipeline.\n\t// Dissect the repository path to obtain the space path and repository name.\n\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"could not dissect repository path: %w\", err)\n\t}\n\n\t// Create a scope for the pipeline.\n\tscope := authz.NewScope(spacePath, repoName, \"pipeline\", pipelineIdentifier)\n\n\t// Create a resource for the pipeline.\n\tresource := authz.NewResource(permission.String())\n\n\t// Perform the authorization check.\n\tif err := authorizer.Check(ctx, session, scope, resource); err != nil {\n\t\treturn fmt.Errorf(\"permission denied: %w\", err)\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 51.96508604055704}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to dissect repository path: %w\", err)\n\t}\n\n\tresource := &authz.Resource{\n\t\tType: \"pipeline\",\n\t\tID:   fmt.Sprintf(\"%s/%s\", spacePath, pipelineIdentifier),\n\t}\n\n\tscope := &authz.Scope{\n\t\tType: \"repository\",\n\t\tID:   fmt.Sprintf(\"%s/%s\", spacePath, repoName),\n\t}\n\n\tif err := authorizer.Check(ctx, session, resource, scope, permission); err != nil {\n\t\treturn fmt.Errorf(\"unauthorized: %w\", err)\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 60.362140074788506}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tif space == nil {\n\t\treturn nil\n\t}\n\n\tparentSpace, err := spaces.Get(ctx, space.ParentID)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to get parent space: %w\", err)\n\t}\n\n\tif parentSpace == nil {\n\t\treturn nil\n\t}\n\n\tscope := &auth.Scope{\n\t\tType:  \"space\",\n\t\tLevel: auth.ScopeLevelSpace,\n\t\tID:    parentSpace.ID,\n\t}\n\n\tresource := &auth.Resource{\n\t\tType:  \"space\",\n\t\tLevel: auth.ResourceLevelSpace,\n\t\tName:  space.Name,\n\t}\n\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 61.437910115767416}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tif space == nil {\n\t\treturn nil\n\t}\n\n\t// Dissect the space path to get the parent space and name.\n\tparentSpace, name, err := paths.DisectLeaf(space.Path)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource based on the parent space and name.\n\tscope := auth.NewScope(auth.ScopeSpace, parentSpace)\n\tresource := auth.NewResource(auth.ResourceSpace, name)\n\n\t// Check if the session has the permission for the space.\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 59.10188140864484}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tif space == nil {\n\t\treturn nil\n\t}\n\n\tif space.Parent == nil {\n\t\treturn fmt.Errorf(\"space %q has no parent\", space.Name)\n\t}\n\n\tscope := authz.NewScope(\n\t\tspace.Parent.ResourceType,\n\t\tspace.Parent.ResourceID,\n\t)\n\n\tresource := authz.NewResource(\n\t\tspace.ResourceType,\n\t\tspace.ResourceID,\n\t)\n\n\treturn Check(\n\t\tctx,\n\t\tauthorizer,\n\t\tsession,\n\t\tscope,\n\t\tresource,\n\t\tpermission,\n\t)\n}", "CodeBleu_score": 51.83822063177097}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource, _ = json.Marshal(data)\n\t}\n\n\tvar decoded map[string]any\n\tif err := json.NewDecoder(bytes.NewReader(source)).DisallowUnknownFields().Decode(&decoded); err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar buf bytes.Buffer\n\tenc := json.NewEncoder(&buf)\n\tenc.SetEscapeHTML(false)\n\tif err := enc.Encode(decoded); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif buf.Len() > 0 {\n\t\tbuf.Truncate(buf.Len() - 1)\n\t}\n\n\treturn buf.Bytes(), nil\n}", "CodeBleu_score": 42.37448133369342}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource, _ = json.Marshal(data)\n\t}\n\n\tvar result map[string]any\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\tif err := decoder.Decode(&result); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to decode JSON payload: %w\", err)\n\t}\n\n\tbuffer := bytes.NewBuffer(make([]byte, 0, len(source)))\n\tencoder := json.NewEncoder(buffer)\n\tencoder.SetEscapeHTML(false)\n\tif err := encoder.Encode(result); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to encode JSON payload: %w\", err)\n\t}\n\n\tif buffer.Len() > 0 && buffer.Bytes()[buffer.Len()-1] == '\n' {\n\t\tbuffer.Truncate(buffer.Len() - 1)\n\t}\n\n\treturn buffer.Bytes(), nil\n}", "CodeBleu_score": 60.100106735983026}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn source, nil\n\t}\n\n\tvar decoder = json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\n\tvar payload = map[string]any{}\n\tif err := decoder.Decode(&payload); err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar buffer = bytes.NewBuffer(nil)\n\tencoder := json.NewEncoder(buffer)\n\tencoder.SetEscapeHTML(false)\n\tif err := encoder.Encode(payload); err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Remove trailing newline\n\tresult := buffer.Bytes()\n\tif len(result) > 0 && result[len(result)-1] == '\n' {\n\t\tresult = result[:len(result)-1]\n\t}\n\n\treturn result, nil\n}", "CodeBleu_score": 66.14315411138132}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference.\n\trepoRef, err := validateRepoRef(repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Fetch the repository.\n\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the required permissions for the session on the repository.\n\tif err := c.checkSessionPermission(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 51.42953528258707}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\tif repoRef == \"\" {\n\t\treturn nil, usererror.BadRequest.New(\"repoRef is required\")\n\t}\n\n\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif repo == nil {\n\t\treturn nil, usererror.NotFound.New(\"repo %q not found\", repoRef)\n\t}\n\n\tif err := c.checkAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 59.205299260392195}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepoRef = strings.TrimSpace(repoRef)\n\tif repoRef == \"\" {\n\t\treturn nil, usererror.BadRequest.New(\"repository reference is required\")\n\t}\n\n\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := c.checkAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 54.90791063361766}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tm := map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty:   createEmptyPayloadSanitizer,\n\t\tenum.CheckPayloadKindPipeline: createPipelinePayloadSanitizer,\n\t\tenum.CheckPayloadKindRaw:      createRawPayloadSanitizer,\n\t\tenum.CheckPayloadKindMarkdown: createRawPayloadSanitizer,\n\t}\n\n\treturn m\n}", "CodeBleu_score": 30.024811478187353}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty: createEmptyPayloadSanitizer,\n\t\tenum.CheckPayloadKindRaw:   createRawPayloadSanitizer,\n\t\tenum.CheckPayloadKindMarkdown: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn createRawPayloadSanitizer(in, s)\n\t\t},\n\t\tenum.CheckPayloadKindPipeline: createPipelinePayloadSanitizer,\n\t}\n}", "CodeBleu_score": 29.795893394992667}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tcheckSanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\tcheckSanitizers[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer\n\tcheckSanitizers[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer\n\tcheckSanitizers[enum.CheckPayloadKindMarkdown] = createRawPayloadSanitizer\n\tcheckSanitizers[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer\n\treturn checkSanitizers\n}", "CodeBleu_score": 46.17005639092744}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\t  local renderer = self.renderer\n  if not renderer then\n    error(\"Buffer is not attached to any renderer\")\n  end\n  self:attach_to_screen()\n  local state = self.state\n  state.on_render = on_render\n  if not state.attached then\n    state.attached = true\n    renderer:attach_buffer(self)\n  end\n  return self", "CodeBleu_score": 69.9693719687772}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t  self.renderer = self.renderer or renderer\n  if not self.renderer.attached_buffers[self] then\n    self:attach()\n  end\n  self.state.on_render = on_render\n  return self", "CodeBleu_score": 47.74396100382695}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t  if self.renderer == nil then\n    self.renderer = renderer\n  end\n  self.renderer.attach(self)\n  self.state.on_render = on_render\n  return self", "CodeBleu_score": 47.89993109722427}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\t    if self:is_valid() then\n        if callback then\n            self.watcher = watch.watch_file(self.filename, callback, function(err)\n                if err then\n                    console.debug.error(string.format(\"Error watching file %s: %s\", self.filename, err))\n                end\n            end)\n        end\n    end", "CodeBleu_score": 47.212956120581026}, {"code": "function Buffer:watch(callback)\n\t  if self:is_valid() then\n    self.watcher = FileWatcher:new(self.filename)\n    self.watcher:watch_file(function(err)\n      if err then\n        console.debug.error(string.format(\"Error watching file %s: %s\", self.filename, err))\n      else\n        callback()\n      end\n    end)\n  end", "CodeBleu_score": 51.1583836730908}, {"code": "function Buffer:watch(callback)\n\t  if self:is_valid() then\n    self.watcher = Watcher(self.filename, function(filename)\n      if callback then\n        callback(filename)\n      end\n    end)\n    self.watcher:watch_file()\n  else\n    console.debug.error(\"Buffer:watch(): Invalid buffer\")\n  end", "CodeBleu_score": 42.572618175566014}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\t  if self.hex then return self.hex end\n\n  local attr = self.spec.attr\n  local color = self.spec.color\n  local gui = self.spec.gui\n  local guisp = self.spec.guisp\n\n  if self.is_cterm then\n    local attr_name = (attr == 'bold') and 'bold' or 'normal'\n    local color_name = self:_get_cterm_color_name(color)\n\n    local spec = {\n      attr = attr_name,\n      color = color_name,\n      gui = gui,\n      guisp = guisp,\n    }\n\n    local highlight = self:_get_highlight(spec)\n\n    if highlight then\n      self.hex = highlight.rgb\n    end\n  else\n    local spec = {\n      attr = attr,\n      color = color,\n      gui = gui,\n      guisp = guisp,\n    }\n\n    local highlight = self:_get_highlight(spec)\n\n    if highlight then\n      self.hex = highlight.rgba\n    end\n  end\n\n  return self.hex", "CodeBleu_score": 50.265234763774735}, {"code": "function Color:to_hex()\n\t  if self.hex then\n    return self.hex\n  end\n\n  local attr = self.foreground and \"fg\" or \"bg\"\n  local hl = vim.api.nvim_get_hl_by_name(self.name, attr)\n  if hl == nil then\n    return nil\n  end\n\n  self.hex = bit.tohex(hl.foreground or hl.background)\n  return self.hex", "CodeBleu_score": 48.18483510882125}, {"code": "function Color:to_hex()\n\t  if self.hex_value then\n    return self.hex_value\n  end\n\n  local attr = self.specification.attr\n  local hl_group = self.specification.hl_group\n\n  if self.specification.foreground then\n    attr = 'fg'\n  elseif self.specification.background then\n    attr = 'bg'\n  end\n\n  local hl_info = vim.fn.synIDattr(hl_group, attr)\n  if hl_info == '' then\n    hl_info = vim.fn.synIDattr(hl_group, 'fg', 'gui')\n  end\n\n  if hl_info == '' then\n    error(string.format('Cannot get hex value for %s', hl_group))\n  end\n\n  self.hex_value = bit.tohex(hl_info, 6)\n  return self.hex_value", "CodeBleu_score": 47.0819067212586}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t  local lines = buffer:get_lines(0, -1)\n  for i = 1, #lines do\n    local line = lines[i]\n    local s, e = line:find(pattern)\n    if s then\n      buffer:add_highlight(self, hl, i - 1, s, e)\n    end\n  end\n  return self", "CodeBleu_score": 53.3041509298822}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t  local lines = buffer:get_lines(0, -1)\n  for i = 1, #lines do\n    local line = lines[i]\n    local start_pos = 0\n    while true do\n      local s, e = line:find(pattern, start_pos, true)\n      if not s then break end\n      buffer:add_highlight(hl, i - 1, s, e)\n      start_pos = e + 1\n    end\n  end\n  return self", "CodeBleu_score": 64.39084698925366}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t  local lines = buffer:get_lines(0, -1)\n  local ns = self.ns\n  for i, line in ipairs(lines) do\n    local s, e = line:find(pattern)\n    if s then\n      buffer:add_highlight(ns, hl, i - 1, s, e)\n    end\n  end\n  return ns", "CodeBleu_score": 42.42779851395441}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t  local id = string.format(\"%s.%s.%s\", row, col, text)\n  local opts = {\n    id = id,\n    virt_text = { { text, hl } },\n    virt_text_pos = pos,\n    hl_mode = \"combine\",\n    priority = priority,\n  }\n  vim.api.nvim_buf_set_extmark(buffer, self.ns, row, col, opts)\n  return id", "CodeBleu_score": 69.76909972701833}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t    local id = string.format(\"%s:%d:%d\", buffer, row, col)\n    local extmark = self:get_extmark(buffer, id)\n    if extmark == nil then\n        self:set_extmark(buffer, id, row, col, {\n            end_row = row,\n            end_col = col,\n            hl_group = hl,\n            virt_text = { { text, hl } },\n            virt_text_pos = pos,\n            virt_text_win_col = col,\n            priority = priority,\n        })\n    else\n        self:set_extmark(buffer, id, row, col, {\n            hl_group = hl,\n            virt_text = { { text, hl } },\n            virt_text_pos = pos,\n            virt_text_win_col = col,\n            priority = priority,\n        })\n    end\n    return id", "CodeBleu_score": 55.07566200249637}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t  local id = string.format(\"%d:%d\", row, col)\n  local ns_id = vim.api.nvim_create_namespace(id)\n  vim.api.nvim_buf_set_extmark(buffer, ns_id, row, col, {\n    virt_text = { { text, hl } },\n    virt_text_pos = pos,\n    hl_mode = \"combine\",\n    priority = priority,\n  })\n  return id", "CodeBleu_score": 67.03825391481428}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\t    local result = \"\"\n    local line = \"\"\n    for i = 1, #output do\n        local char = output:sub(i, i)\n        if char == \"", "CodeBleu_score": 25.10725232443264}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = \"\"\n\tlocal lines = {}\n\tfor i = 1, #output do\n\t\tlocal c = output:sub(i, i)\n\t\tif c == \"", "CodeBleu_score": 23.25031667260393}, {"code": "function Spawn:parse_result(output, callback)\n\t  local line = ''\n  local sub = string.sub\n  local concat = table.concat\n  for i = 1, #output do\n    local char = sub(output, i, i)\n    if char == '", "CodeBleu_score": 28.63877836119067}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t  local watcher = self.watchers[path]\n  if watcher == nil then\n    watcher = vim.loop.new_fs_event()\n    vim.loop.fs_event_start(watcher, path, {\n      recursive = true,\n      watch_entry = true,\n    }, function(_, _, filename)\n      handler(filename)\n    end)\n    self.watchers[path] = watcher\n  end\n  return watcher", "CodeBleu_score": 50.71011283675237}, {"code": "function Watcher:watch_file(path, handler)\n\t  local watcher = self.watchers[path]\n  if watcher then\n    return watcher\n  end\n  watcher = vim.loop.new_fs_event()\n  vim.loop.fs_event_start(watcher, path, {\n    recursive = true,\n  }, handler)\n  self.watchers[path] = watcher\n  return watcher", "CodeBleu_score": 54.1822889803372}, {"code": "function Watcher:watch_file(path, handler)\n\t  if self.watchers[path] then\n    return self.watchers[path]\n  end\n  local watcher = vim.loop.new_fs_event()\n  vim.loop.fs_event_start(watcher, path, {\n    recursive = true,\n    watch_entry = true,\n  }, handler)\n  self.watchers[path] = watcher\n  return watcher", "CodeBleu_score": 53.21051510594812}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t  local lines = self:get_lines()\n  local hunks, err = self.git_object:live_hunks(lines)\n  if err then\n    return nil, err\n  end\n  local sign_ns_id = self.namespace:get_sign_ns_id()\n  for _, hunk in ipairs(hunks) do\n    local sign_id = self.namespace:get_sign_id(hunk.id)\n    local priority = self.namespace:get_sign_priority(hunk.type)\n    local sign_group = self.namespace:get_sign_group(hunk.type)\n    for _, line in ipairs(hunk.lines) do\n      vim.fn.sign_place(sign_id, sign_ns_id, sign_group, self.bufnr, {\n        lnum = line,\n        priority = priority,\n      })\n    end\n  end\n  return hunks", "CodeBleu_score": 51.57037267234293}, {"code": "function GitBuffer:live_hunks()\n\t  local lines = self:get_lines()\n  local hunks = self.git_object:live_hunks(lines)\n\n  if not hunks then\n    return\n  end\n\n  local sign_ns_id = self.namespace:get_sign_ns_id()\n  for _, hunk in ipairs(hunks) do\n    local hunk_lines = hunk.lines\n    local hunk_type = hunk.type\n\n    local hunk_sign_priority = self.namespace:get_hunk_sign_priority(hunk_type)\n    for _, line in ipairs(hunk_lines) do\n      local line_sign_priority = self.namespace:get_line_sign_priority(line.type)\n      local sign_priority = math.max(hunk_sign_priority, line_sign_priority)\n\n      self.namespace:add_sign(sign_ns_id, line.lnum, hunk_type, sign_priority)\n    end\n  end\n\n  self.namespace:refresh_signs(sign_ns_id)\n\n  return hunks", "CodeBleu_score": 49.66460427232745}, {"code": "function GitBuffer:live_hunks()\n\t  local lines = self:get_lines()\n  local hunks = self.git_object:live_hunks(lines)\n\n  if not hunks then\n    return false, \"Error: \" .. self.git_object.error_message\n  end\n\n  local sign_ns_id = self.namespace:get_sign_ns_id()\n\n  for i, hunk in ipairs(hunks) do\n    local hunk_type = hunk.type\n    local hunk_priority = self.namespace:get_sign_priority(hunk_type)\n    local hunk_text = hunk.text\n\n    for j, line in ipairs(hunk_text) do\n      local line_number = hunk.start + j - 1\n\n      vim.api.nvim_buf_set_extmark(self.bufnr, sign_ns_id, line_number, 0, {\n        id = hunk.id,\n        virt_text = { { line, self.namespace:get_sign_hl(hunk_type) } },\n        virt_text_pos = \"overlay\",\n        hl_mode = \"combine\",\n        priority = hunk_priority,\n      })\n    end\n  end\n\n  return hunks", "CodeBleu_score": 51.30369389670301}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\t  local tmpname = fs.tmpname()\n  local fh = io.open(tmpname, 'w')\n  fh:write(patch)\n  fh:close()\n  local err = self.git:stage_hunk_from_file(tmpname)\n  fs.remove_file(tmpname)\n  return err", "CodeBleu_score": 51.218124335594354}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal tmpfile = fs.tmpname()\n\tlocal err = fs.write_file(tmpfile, patch)\n\tif err then\n\t\treturn err\n\tend\n\tlocal err = self.git:stage_hunk_from_patch_file(tmpfile)\n\tfs.remove_file(tmpfile)\n\treturn err", "CodeBleu_score": 51.40139918211985}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t  local tmpfile = fs.tmpname()\n  local err = fs.write_file(tmpfile, patch)\n  if err then\n    return nil, err\n  end\n\n  err = self.git:stage_hunk(tmpfile)\n  fs.remove_file(tmpfile)\n  return err", "CodeBleu_score": 50.46164307196079}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    String accessTokenEndpoint = getAccessTokenEndpoint();\n    String accessTokenVerb = getAccessTokenVerb();\n    String accessTokenBody = getBody(requestToken, verifier);\n\n    OAuthRequest request = new OAuthRequest(accessTokenVerb, accessTokenEndpoint);\n    request.addHeader(getHttpBasicAuthHeaderValue());\n    request.addBodyParameter(OAuthConstants.TOKEN, requestToken.getToken());\n    request.addBodyParameter(OAuthConstants.VERIFIER, verifier.getValue());\n\n    Response response = send(request);\n\n    return getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 47.90019345289506}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    // Create a new request to the access token endpoint\n    OAuthRequest request = new OAuthRequest(getAccessTokenVerb(), getAccessTokenEndpoint());\n\n    // Add the authentication header\n    request.addHeader(getHttpBasicAuthHeaderValue());\n\n    // Add the body parameters\n    request.addBodyParameter(OAuthConstants.CLIENT_ID, clientId);\n    request.addBodyParameter(OAuthConstants.CLIENT_SECRET, clientSecret);\n    request.addBodyParameter(OAuthConstants.CODE, requestToken.getToken());\n    request.addBodyParameter(OAuthConstants.REDIRECT_URI, callback);\n    request.addBodyParameter(OAuthConstants.GRANT_TYPE, OAuthConstants.AUTHORIZATION_CODE);\n    if (verifier != null) {\n        request.addBodyParameter(OAuthConstants.VERIFIER, verifier.getValue());\n    }\n\n    // Send the request\n    Response response = send(request);\n\n    // Extract the access token from the response body\n    return getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 45.67988939050842}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    String accessTokenEndpoint = getAccessTokenEndpoint(requestToken, verifier);\n    String httpBasicAuthHeaderValue = getHttpBasicAuthHeaderValue(requestToken, verifier);\n    String accessTokenVerb = getAccessTokenVerb(requestToken, verifier);\n    String body = getBody(requestToken, verifier);\n    Response response = send(accessTokenEndpoint, accessTokenVerb, body, httpBasicAuthHeaderValue);\n    return extract(response);\n}", "CodeBleu_score": 34.31597336388363}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    // Create AuthCache instance\n    AuthCache authCache = new BasicAuthCache();\n    // Generate BASIC scheme object and add it to the local\n    // auth cache\n    BasicScheme basicAuth = new BasicScheme();\n    authCache.put(host, basicAuth);\n\n    // Add AuthCache to the execution context\n    context.setAuthCache(authCache);\n    logger.debug(\"Adding host \" + host.getHostName() + \" to auth cache\");\n}", "CodeBleu_score": 37.86495551499142}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    // Create AuthCache instance\n    AuthCache authCache = new BasicAuthCache();\n    // Generate BASIC scheme object and add it to the local\n    // auth cache\n    BasicScheme basicAuth = new BasicScheme();\n    authCache.put(host, basicAuth);\n\n    // Add AuthCache to the execution context\n    context.setAuthCache(authCache);\n}", "CodeBleu_score": 33.310022060156186}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    CredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(new AuthScope(host),\n            new UsernamePasswordCredentials(username, password));\n    AuthCache authCache = new BasicAuthCache();\n    BasicScheme basicAuth = new BasicScheme();\n    authCache.put(host, basicAuth);\n    context.setCredentialsProvider(credsProvider);\n    context.setAuthCache(authCache);\n    log.info(\"Added host \" + host.getHostName() + \" to auth cache\");\n}", "CodeBleu_score": 49.87113290686025}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins jenkins = Jenkins.getInstance();\n    if (jenkins == null) {\n        throw new IllegalStateException(\"Jenkins instance is null\");\n    }\n    AvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache instance is null\");\n    }\n    String key = cache.getDigestOf(source.getUrlName());\n    cache.seed(key, source.getUrlName());\n    String encodedKey = cache.encode(key);\n    if (encodedKey == null) {\n        throw new IllegalStateException(\"Could not encode key\");\n    }\n    String rootUrl = jenkins.getRootUrlFromRequest();\n    if (rootUrl == null) {\n        throw new IllegalStateException(\"Jenkins root URL is null\");\n    }\n    return rootUrl + \"avatar/\" + encodedKey + \"/\" + size;\n}", "CodeBleu_score": 47.914019364851136}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins jenkins = Jenkins.getInstance();\n    if (jenkins == null) {\n        throw new IllegalStateException(\"Jenkins instance is null\");\n    }\n\n    AvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache instance is null\");\n    }\n\n    String key = cache.getCacheKey(source);\n    cache.seedCache(key);\n\n    String rootUrl = Jenkins.getInstance().getRootUrlFromRequest();\n    if (rootUrl == null) {\n        throw new IllegalStateException(\"Jenkins root URL is null\");\n    }\n\n    try {\n        return rootUrl + \"avatar/\" + URLEncoder.encode(key, \"UTF-8\") + \"/\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding is unsupported\");\n    }\n}", "CodeBleu_score": 50.34114574767021}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t  Jenkins jenkins = Jenkins.getInstance();\n  if (jenkins == null) {\n    throw new IllegalStateException(\"Jenkins instance is null\");\n  }\n  AvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n  if (cache == null) {\n    throw new IllegalStateException(\"AvatarCache is null\");\n  }\n  String key = cache.hashKey(source);\n  cache.seed(key, source);\n  String rootUrl = jenkins.getRootUrlFromRequest();\n  if (rootUrl == null) {\n    throw new IllegalStateException(\"Root URL is null\");\n  }\n  try {\n    return rootUrl + \"avatar/\" + URLEncoder.encode(key, \"UTF-8\") + \"/\" + size;\n  } catch (UnsupportedEncodingException e) {\n    throw new IllegalStateException(\"UTF-8 encoding is unsupported\", e);\n  }\n}", "CodeBleu_score": 53.107754202555526}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    this.image = scaleImage(image);\n    this.lastModified = (lastModified < 0) ? System.currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 36.7108332154174}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    if (source == null || image == null) {\n        throw new IllegalArgumentException(\"Source and image cannot be null.\");\n    }\n    if (lastModified < 0) {\n        lastModified = System.currentTimeMillis();\n    }\n    this.source = source;\n    this.image = scaleImage(image);\n    this.lastModified = lastModified;\n}", "CodeBleu_score": 38.4077337392033}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    this.image = scaleImage(image);\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 41.94488775908607}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false;\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\timage = future.get();\n\t\t\tlastModified = new Date();\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (ExecutionException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tfuture = null;\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 41.244140199375444}, {"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false;\n\t}\n\ttry {\n\t\tif (future.isDone()) {\n\t\t\ttry {\n\t\t\t\tcache = future.get();\n\t\t\t\timage = cache.getImage();\n\t\t\t\tlastModified = cache.getLastModified();\n\t\t\t} catch (ExecutionException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tfuture = null;\n\t\t\treturn false;\n\t\t}\n\t} catch (InterruptedException e) {\n\t\te.printStackTrace();\n\t}\n\treturn true;\n}", "CodeBleu_score": 46.163292319549875}, {"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false;\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\tImage image = future.get();\n\t\t\tsetImage(image);\n\t\t\tsetLastModifiedTime(System.currentTimeMillis());\n\t\t\tfuture = null;\n\t\t\treturn false;\n\t\t} catch (InterruptedException | ExecutionException e) {\n\t\t\tfuture = null;\n\t\t}\n\t}\n\treturn true;\n}", "CodeBleu_score": 43.64240725097232}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t    final byte[] data;\n    try {\n        data = getImageData(node);\n    } catch (IOException e) {\n        rsp.sendError(HttpServletResponse.SC_NOT_FOUND);\n        return;\n    }\n\n    // if the browser sent an 'If-Modified-Since' header, then compare it with the image's last-modified time\n    // if they match, send back a 304 'Not Modified' response\n    final long lastModified = getLastModified(node);\n    if (lastModified!=0) {\n        if (req.checkNotModified(lastModified)) {\n            rsp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n            return;\n        }\n        rsp.addDateHeader(\"Last-Modified\",lastModified);\n    }\n\n    // set the content type\n    rsp.setContentType(\"image/png\");\n\n    // set the content length\n    rsp.setContentLength(data.length);\n\n    // write the image to the response\n    rsp.getOutputStream().write(data);\n    rsp.getOutputStream().flush();\n}", "CodeBleu_score": 45.38826888173261}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t    final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    final BufferedImage img = createImage(node);\n    ImageIO.write(img, \"png\", baos);\n    baos.flush();\n\n    rsp.setContentType(\"image/png\");\n    rsp.setHeader(\"Cache-Control\", \"no-cache\");\n    rsp.setDateHeader(\"Expires\", 0);\n    rsp.setHeader(\"Pragma\", \"no-cache\");\n    rsp.setContentLength(baos.size());\n    rsp.getOutputStream().write(baos.toByteArray());\n    rsp.getOutputStream().flush();\n}", "CodeBleu_score": 46.062299546305816}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\n    // Create the image\n    BufferedImage img = createImage(node);\n\n    // Write the image to a byte array output stream\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    ImageIO.write(img, \"png\", baos);\n    baos.flush();\n\n    // Set the content type and headers\n    rsp.setContentType(\"image/png\");\n    rsp.addHeader(\"Cache-Control\", \"max-age=3600\");\n\n    // Write the image to the response output stream\n    OutputStream os = rsp.getOutputStream();\n    os.write(baos.toByteArray());\n    os.flush();\n}", "CodeBleu_score": 42.05487254728249}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t        this.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n        this.context = HttpClientContext.create();\n        this.httpClient = configureClient();\n    }", "CodeBleu_score": 28.536030523792043}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t        this.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n        this.httpClient = buildHttpClient();\n        this.httpContext = buildHttpContext();\n        this.apiClient = buildApiClient();\n        this.api = buildApi();\n    }", "CodeBleu_score": 29.454355815574107}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t\n        this.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n\n        // Set up the cache expiration\n        if (enableCache) {\n            this.teamCacheDuration = teamCacheDuration;\n            this.repositoriesCacheDuration = repositoriesCacheDuration;\n        }\n\n        // Set up the HTTP client\n        configureContext();\n        setConnectionManager();\n        setClientProxyParams();\n        build();\n        convert();\n        setExpireDuration();\n        setConnectionManagerShared();\n        setRetryHandler();\n        setKeepAliveStrategy();\n\n        // Set up the HTTP client for authentication\n        if (authenticator != null) {\n            create();\n            configureBuilder();\n        }\n    }", "CodeBleu_score": 37.67091147119629}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    // Get the source branch\n    def sourceBranch = getSource(pullRequest)\n    // Get the destination branch\n    def destBranch = getDestination(pullRequest)\n    // Get the raw node for the source branch\n    def sourceNode = getRawNode(sourceBranch)\n    // Get the raw node for the destination branch\n    def destNode = getRawNode(destBranch)\n    // Set the commit closure for the source branch\n    setCommitClosure(sourceBranch, sourceNode)\n    // Set the commit closure for the destination branch\n    setCommitClosure(destBranch, destNode)\n}", "CodeBleu_score": 24.719122477942197}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    def sourceBranch = getSource(pullRequest)\n    def destinationBranch = getDestination(pullRequest)\n    def sourceClosure = new CommitClosure(sourceBranch.rawNode)\n    def destinationClosure = new CommitClosure(destinationBranch.rawNode)\n    setCommitClosure(pullRequest, sourceClosure, destinationClosure)\n}", "CodeBleu_score": 26.26451546888498}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t  if (pullRequest.getSource() != null) {\n    def sourceBranch = getBranch(pullRequest.getSource())\n    if (sourceBranch != null) {\n      def rawNode = getRawNode(sourceBranch)\n      if (rawNode != null) {\n        setCommitClosure(rawNode)\n      }\n    }\n  }\n  if (pullRequest.getDestination() != null) {\n    def destinationBranch = getBranch(pullRequest.getDestination())\n    if (destinationBranch != null) {\n      def rawNode = getRawNode(destinationBranch)\n      if (rawNode != null) {\n        setCommitClosure(rawNode)\n      }\n    }\n  }\n}", "CodeBleu_score": 41.624202659377076}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration config = JenkinsLocationConfiguration.get();\n    String url = config.getUrl();\n    if (url == null) {\n        throw new IllegalStateException(\"Jenkins URL is not configured\");\n    }\n    return new DisplayURLProvider().getRunURL(build);\n}", "CodeBleu_score": 57.80299135262774}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration config = JenkinsLocationConfiguration.get();\n    if (config == null || config.getUrl() == null) {\n        throw new IllegalStateException(\"Jenkins URL is not configured\");\n    }\n    return config.getUrl();\n}", "CodeBleu_score": 60.292308853394516}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration config = JenkinsLocationConfiguration.get();\n    if (config == null || config.getUrl() == null) {\n        throw new IllegalStateException(\"Jenkins Location Configuration is not set\");\n    }\n    return Jenkins.get().getDisplayURL() + build.getUrl();\n}", "CodeBleu_score": 60.322821236433114}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    try {\n        URI uri = new URI(url)\n        String host = uri.getHost()\n        if (host == null) {\n            throw new IllegalStateException(\"The URL is malformed: \" + url)\n        }\n        if (host.equals(\"localhost\") || host.equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"The URL is not valid: \" + url)\n        }\n        if (bitbucket.getServer() instanceof BitbucketCloudServer) {\n            if (!host.contains(\".\")) {\n                throw new IllegalStateException(\"The URL is not valid: \" + url)\n            }\n        }\n        return uri.toString()\n    } catch (URISyntaxException e) {\n        throw new IllegalStateException(\"The URL is malformed: \" + url)\n    }\n}", "CodeBleu_score": 49.06651425940887}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    if (url.contains(\"localhost\") || url.contains(\"unconfigured-jenkins-location\")) {\n        throw new IllegalStateException(\"The Bitbucket Server URL is not set. Please set it in the Bitbucket Server configuration page.\");\n    }\n    try {\n        URL parsedUrl = new URL(url);\n        String host = parsedUrl.getHost();\n        if (host.contains(\"localhost\") || host.contains(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"The Bitbucket Server URL is not set. Please set it in the Bitbucket Server configuration page.\");\n        }\n        if (bitbucket.getServerVersion() == BitbucketApi.ServerVersion.CLOUD) {\n            if (!host.contains(\".\")) {\n                throw new IllegalStateException(\"The Bitbucket Server URL is not set. Please set it in the Bitbucket Server configuration page.\");\n            }\n        }\n        return host;\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"The Bitbucket Server URL is not set. Please set it in the Bitbucket Server configuration page.\");\n    }\n}", "CodeBleu_score": 49.252062580857086}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t  try {\n    URI uri = new URI(url)\n    String host = uri.getHost()\n    if (!host) {\n      throw new IllegalStateException(\"Invalid URL: \" + url)\n    }\n    if (host.equals(\"localhost\") || host.equals(\"unconfigured-jenkins-location\")) {\n      throw new IllegalStateException(\"Invalid URL: \" + url + \" (localhost and unconfigured-jenkins-location are not valid hosts)\")\n    }\n    if (bitbucket.getApiType() == BitbucketApiType.CLOUD) {\n      if (!host.contains(\".\")) {\n        throw new IllegalStateException(\"Invalid URL: \" + url + \" (Bitbucket Cloud API clients must use fully qualified hostnames)\")\n      }\n    }\n  } catch (URISyntaxException e) {\n    throw new IllegalStateException(\"Invalid URL: \" + url, e)\n  }\n  return url\n}", "CodeBleu_score": 46.45553805405055}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t    BitbucketContext context = BitbucketContext.getContext(build, listener)\n    if (context.notificationsDisabled()) {\n        listener.getLogger().println(\"Bitbucket notifications are disabled. Skipping notification step.\")\n        return\n    }\n\n    String revision = context.getRevision()\n    String revisionHash = context.getHash()\n    String buildKey = context.getBuildKey()\n\n    listener.getLogger().println(\"Bitbucket notification type: ${context.getNotificationType()}\")\n    listener.getLogger().println(\"Bitbucket revision: ${revision}\")\n    listener.getLogger().println(\"Bitbucket revision hash: ${revisionHash}\")\n    listener.getLogger().println(\"Bitbucket build key: ${buildKey}\")\n\n    BitbucketClient client = context.buildBitbucketClient()\n\n    listener.getLogger().println(\"Sending Bitbucket notification...\")\n    client.createStatus(buildKey, revisionHash, context.getBuildState(), context.getBuildDescription())\n    listener.getLogger().println(\"Bitbucket notification sent.\")\n}", "CodeBleu_score": 31.59667524762022}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t        BitbucketContext context = new BitbucketContext(source, build, listener);\n        if (context.notificationsDisabled()) {\n            return;\n        }\n\n        String revision = context.getRevision();\n        String hash = context.getHash();\n\n        BitbucketClient client = context.buildBitbucketClient();\n        BitbucketBuildStatus status = context.createStatus(revision, hash);\n        client.postBuildStatus(status);\n    }", "CodeBleu_score": 21.150893916976983}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t    BitbucketContext context = BitbucketContext.from(build)\n    if (context.notificationsDisabled) {\n        listener.getLogger().println(\"[withBitbucket] Notifications are disabled. Skipping.\")\n        return\n    }\n\n    String revision = context.getRevision()\n    String hash = context.getHash()\n    String buildKey = context.getBuildKey()\n\n    BitbucketClient client = context.buildBitbucketClient()\n\n    listener.getLogger().println(\"[withBitbucket] Sending build notifications for ${buildKey}\")\n    listener.getLogger().println(\"[withBitbucket] Revision: ${revision}\")\n    listener.getLogger().println(\"[withBitbucket] Hash: ${hash}\")\n\n    client.createStatus(buildKey, hash, \"INPROGRESS\", \"Build started\")\n}", "CodeBleu_score": 27.002915535221284}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String jobName = build.getParent().getFullName();\n    if (shareBuildKeyBetweenBranchAndPR) {\n        String folderName = getFolderName(build);\n        return folderName + \"/\" + branch;\n    }\n    return jobName;\n}", "CodeBleu_score": 44.21009541322632}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    if (shareBuildKeyBetweenBranchAndPR) {\n        return getParent(build) + \"/\" + branch;\n    } else {\n        return build.getFullName();\n    }\n}", "CodeBleu_score": 25.617125844362832}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    if (shareBuildKeyBetweenBranchAndPR) {\n        return String.format(\"%s-%s\", build.getParent().getFullName(), branch);\n    }\n    return build.getParent().getFullName();\n}", "CodeBleu_score": 31.04163144091714}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        serverUrl = BitbucketSCMNavigator.DescriptorImpl.get().getServerUrl();\n        if (serverUrl == null) {\n            log.warn(\"The Bitbucket SCM Navigator is not configured with a server URL. This navigator will not be able to discover any repositories.\");\n        }\n    }\n    if (traits == null) {\n        traits = new ArrayList<>();\n        if (credentialsId != null) {\n            traits.add(new BitbucketSCMSourceTrait(credentialsId));\n        }\n        if (repoOwner != null) {\n            traits.add(new BitbucketSCMSourceTrait(repoOwner));\n        }\n        if (forkPullStrategy != null) {\n            traits.add(new ForkPullStrategyTrait(forkPullStrategy));\n        }\n        if (repoFilter != null) {\n            traits.add(new BitbucketSCMSourceTrait(repoFilter));\n        }\n        if (projectName != null) {\n            traits.add(new BitbucketSCMSourceTrait(projectName));\n        }\n        if (projectOwner != null) {\n            traits.add(new BitbucketSCMSourceTrait(projectOwner));\n        }\n        if (projectFilter != null) {\n            traits.add(new BitbucketSCMSourceTrait(projectFilter));\n        }\n        if (projectType != null) {\n            traits.add(new BitbucketSCMSourceTrait(projectType));\n        }\n        if (repositoryName != null) {\n            traits.add(new BitbucketSCMSourceTrait(repositoryName));\n        }\n        if (repositoryOwner != null) {\n            traits.add(new BitbucketSCMSourceTrait(repositoryOwner));\n        }\n        if (repositoryFilter != null) {\n            traits.add(new BitbucketSCMSourceTrait(repositoryFilter));\n        }\n        if (excludePersonalRepositories != null) {\n            traits.add(new BitbucketSCMSourceTrait(excludePersonalRepositories));\n        }\n        if (excludeUsers != null) {\n            traits", "CodeBleu_score": 41.64584289898509}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        serverUrl = BitbucketSCMNavigator.DescriptorImpl.get().getServerUrl()\n        if (serverUrl == null) {\n            log.warning(\"Bitbucket SCM Navigator '${name}' has no server URL. This navigator will not find any repositories.\")\n        }\n    }\n    if (traits == null) {\n        traits = [\n            new ForksTrait(\n                includes: defaultIfBlank(forks, ForksTrait.INCLUDE_ANY),\n                excludes: defaultIfBlank(excludeForks, ForksTrait.EXCLUDE_NONE)\n            ),\n            new SSHCheckoutTrait(credentialsId),\n            new BranchDiscoveryTrait(\n                strategyId: defaultIfBlank(strategyId, BranchDiscoveryTrait.SAME_NAME),\n                trustContributors: trustContributors\n            ),\n            new OriginPullRequestDiscoveryTrait(\n                trust: defaultIfBlank(originPRDiscovery, OriginPullRequestDiscoveryTrait.TRUST_NONE),\n                strategyId: defaultIfBlank(originPRMergeStrategy, OriginPullRequestDiscoveryTrait.MERGE_DEFAULT)\n            ),\n            new FingerprintTrait(\n                trust: defaultIfBlank(fingerprinting, FingerprintTrait.TRUST_NONE)\n            ),\n            new WildcardSCMHeadFilterTrait(\n                includes: defaultIfBlank(includes, WildcardSCMHeadFilterTrait.DEFAULT_INCLUDES),\n                excludes: defaultIfBlank(excludes, WildcardSCMHeadFilterTrait.DEFAULT_EXCLUDES)\n            )\n        ]\n    }\n    return this\n}", "CodeBleu_score": 40.63182774266989}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        serverUrl = BitbucketSCMSource.DescriptorImpl.get().getServerUrl()\n        if (serverUrl == null) {\n            log.warn \"BitbucketSCMNavigator.serverUrl is null, defaulting to ${BitbucketSCMSource.DescriptorImpl.get().getServerUrl()}\"\n        }\n    }\n    if (traits == null) {\n        traits = [new BranchDiscoveryTrait(true, true)]\n        if (credentialsId != null) {\n            traits.add(new ForkPullRequestDiscoveryTrait(1, new ForkPullRequestDiscoveryTrait.TrustContributors()))\n            traits.add(new SSHCheckoutTrait(credentialsId))\n        }\n    }\n    return this\n}", "CodeBleu_score": 23.72875685283276}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\t    BitbucketRepository repository = getBitbucketRepository(name);\n    if (repository == null) {\n        getLogger().info(\"Bitbucket repository \" + name + \" not found.\");\n    } else {\n        getLogger().info(format(\"Bitbucket repository %s %s.\", name, isMatch ? \"matched\" : \"ignored\"));\n        if (isMatch) {\n            count++;\n        }\n    }\n}", "CodeBleu_score": 45.441508496899566}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t    if (isMatch) {\n        getLogger().info(format(\"Repository '%s' proposed for import\", getFullName(name)));\n        proposedCount++;\n    } else {\n        getLogger().info(format(\"Repository '%s' ignored for import\", getFullName(name)));\n    }\n}", "CodeBleu_score": 33.96629646003607}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t    getLogger().info(\"Checking repository \" + name);\n    BitbucketRepository repository = getBitbucketRepository(name);\n    if (repository == null) {\n        getLogger().info(\"Repository \" + name + \" not found\");\n    } else {\n        String fullName = getFullName(repository);\n        getLogger().info(\"Repository \" + fullName + \" is \" + (isMatch ? \"proposed\" : \"ignored\"));\n        if (isMatch) {\n            count++;\n        }\n    }\n}", "CodeBleu_score": 44.47630665104982}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t\n    if (!scm.getExtensions().isEmpty()) {\n        return rev;\n    }\n\n    List<RefSpec> refSpecs = new ArrayList<>();\n    String cloneLink = scm.getUserRemoteConfigs().get(0).getUrl();\n\n    // Filter branches with hashes to find those whose commits don't exist locally\n    List<Branch> branches = rev.getBranches().stream()\n        .filter(b -> b.getName().matches(\"^[a-f0-9]{40}$\"))\n        .collect(Collectors.toList());\n\n    // Create RefSpecs for the missing commits\n    for (Branch b : branches) {\n        refSpecs.add(new RefSpec(\"+refs/heads/\" + b.getName() + \":refs/remotes/origin/\" + b.getName()));\n    }\n\n    if (!refSpecs.isEmpty()) {\n        listener.getLogger().println(\"Fetching missing commits from the remote repository...\");\n        git.fetch_().from(new URIish(cloneLink), refSpecs).execute();\n    }\n\n    return rev;\n}", "CodeBleu_score": 46.421823916526655}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t    if (!(rev instanceof Branch)) {\n        return rev;\n    }\n    Branch branch = (Branch) rev;\n    if (branch.getHash() != null) {\n        return rev;\n    }\n    String branchName = branch.getName();\n    String remoteName = scm.getGitTool().getDefaultRemoteName();\n    String remoteUrl = scm.getRepositoryByName(remoteName).getUrl();\n    listener.getLogger().println(\"Fetching missing commits for \" + branchName + \" from \" + remoteUrl);\n    List<RefSpec> refSpecs = new ArrayList<>();\n    for (Branch b : scm.getBranches()) {\n        if (b.getName().equals(branchName) && b.getHash() == null) {\n            refSpecs.add(new RefSpec(b.getName() + \":\" + b.getName()));\n        }\n    }\n    if (refSpecs.isEmpty()) {\n        return rev;\n    }\n    git.fetch_().from(remoteUrl, refSpecs).execute();\n    return rev;\n}", "CodeBleu_score": 38.4925000282935}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t    if (rev.getBranches().isEmpty()) {\n        return rev;\n    }\n\n    // Fetch missing branches\n    List<RefSpec> fetchSpecs = new ArrayList<>();\n    for (Branch b : rev.getBranches()) {\n        String branchName = b.getName();\n        if (git.commitExists(b.getSHA1String())) {\n            listener.getLogger().println(\"Commit \" + b.getSHA1String() + \" already exists in local repository. No need to fetch branch \" + branchName);\n            continue;\n        }\n        listener.getLogger().println(\"Fetching branch \" + branchName + \" from remote repository\");\n        fetchSpecs.add(new RefSpec(\"+refs/heads/\" + branchName + \":refs/remotes/origin/\" + branchName));\n    }\n\n    if (!fetchSpecs.isEmpty()) {\n        // Fetch missing branches\n        git.fetch_().from(scm.getRepositories().get(0), fetchSpecs).execute();\n    }\n\n    return rev;\n}", "CodeBleu_score": 36.04203190411681}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        if (entry.getValue() != null && entry.getValue().size() > 0) {\n            result.put(entry.getKey(), entry.getValue().get(0));\n        }\n    }\n    return result;\n}", "CodeBleu_score": 75.18418029238393}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue().get(0));\n    }\n    return result;\n}", "CodeBleu_score": 68.85444498625188}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue().get(0));\n    }\n    return result;\n}", "CodeBleu_score": 68.85444498625188}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tif (resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\tconst resources = resourceStates\n\t\t.filter(s => !s.resourceUri.scheme || s.resourceUri.scheme === 'file')\n\t\t.map(r => r.resourceUri);\n\n\tif (resources.length === 0) {\n\t\treturn;\n\t}\n\n\tconst groups = groupBy(resources, r => this.repositoryProvider.getRepository(r));\n\tconst promises = Object.keys(groups).map(key => {\n\t\tconst repository = key ? this.repositoryProvider.getRepository(URI.parse(key)) : null;\n\n\t\tif (!repository) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\n\t\treturn repository.add(groups[key].map(r => this.toFilePath(r)));\n\t});\n\n\ttry {\n\t\tawait Promise.all(promises);\n\t} catch (err) {\n\t\tconst repositories = promises.map((p, i) => p.then(() => groups[Object.keys(groups)[i]]).catch(() => null)).filter(p => !!p);\n\t\tconst repositoriesWithMissingResources = await Promise.all(repositories);\n\n\t\tfor (const repository of repositoriesWithMissingResources) {\n\t\t\tif (repository) {\n\t\t\t\tconst missingUris = repository.root.map(root => resources.filter(resource => paths.isEqualOrParent(this.toFilePath(resource), root.path)));\n\t\t\t\tconst missing = missingUris.some(missing => missing.length > 0);\n\n\t\t\t\tif (missing) {\n\t\t\t\t\tconst missingMessage = localize('missing', \"Some selected resources are missing or not under source control.\");\n\t\t\t\t\tconst addAnyway = localize('add anyway', \"Add Anyway\");\n\t\t\t\t\tconst choice = await this.dialogService.confirm({\n\t\t\t\t\t\ttype: 'info',\n\t\t\t\t\t\tmessage: missingMessage,\n\t\t\t\t\t\tprimaryButton: addAnyway\n\t\t\t\t\t});\n\n\t\t\t\t\t", "CodeBleu_score": 43.73526402144654}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tconst resources = resourceStates.filter(s => s instanceof Resource);\n\tif (resources.length === 0) {\n\t\treturn;\n\t}\n\n\tconst resourcesByRepo = groupBy(resources, r => r.resourceGroup);\n\tfor (const [repo, repoResources] of resourcesByRepo) {\n\t\tconst resourcePaths = repoResources.map(r => r.resourceUri.fsPath);\n\t\tconst repoRoot = repo.provider.rootUri.fsPath;\n\t\ttry {\n\t\t\tawait repo.provider.add(resourcePaths);\n\t\t} catch (err) {\n\t\t\tconst paths = resourcePaths.map(p => path.relative(repoRoot, p)).join(', ');\n\t\t\tthis._logService.error(err);\n\t\t\tconst message = localize('add failed', \"Unable to add {0} to source control\", paths);\n\t\t\tthis._notificationService.error(message);\n\t\t}\n\t}\n}", "CodeBleu_score": 40.83114315522622}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tif (resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\tconst resources = resourceStates\n\t\t.filter(s => !s.resourceUri.scheme || s.resourceUri.scheme === 'file')\n\t\t.map(r => r.resourceUri);\n\n\tif (resources.length === 0) {\n\t\treturn;\n\t}\n\n\tconst groupByRepository = groupBy(resources, r => this.model.getRepository(r));\n\tconst promises = Object.keys(groupByRepository).map(key => {\n\t\tconst repository = this.model.getRepository(key);\n\n\t\tif (!repository) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\n\t\tconst resourceGroups = groupByRepository[key];\n\t\tconst resourcePaths = resourceGroups.map(r => this.toPath(r));\n\n\t\treturn repository.add(resourcePaths).then(results => {\n\t\t\tconst source = new CancellationTokenSource();\n\t\t\tconst cancellationToken = source.token;\n\t\t\tconst mapResourceToResult = new Map<Uri, IAddResult>();\n\n\t\t\tresourceGroups.forEach((resource, i) => {\n\t\t\t\tmapResourceToResult.set(resource, results[i]);\n\t\t\t});\n\n\t\t\tconst onDidCancel = () => {\n\t\t\t\tsource.cancel();\n\t\t\t};\n\n\t\t\treturn repository.status().then(status => {\n\t\t\t\tconst toAdd = status.resourceStates.filter(s => mapResourceToResult.has(s.resourceUri) && s.type === Status.INDEX_MODIFIED);\n\t\t\t\tconst toUntrack = status.resourceStates.filter(s => mapResourceToResult.has(s.resourceUri) && s.type === Status.INDEX_UNTRACKED);\n\t\t\t\tconst toIgnore = status.resourceStates.filter(s => mapResourceToResult.has(s.resourceUri) && s.type === Status.IGNORED);\n\n\t\t\t\tif (toAdd.length === 0 && toUntrack.length === 0", "CodeBleu_score": 41.72829266075553}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\t\tif (this.resourceStates.length === 0 || !(this.resourceStates[0].resourceUri instanceof Uri)) {\n\t\tconst resource = await this.getSCMResource();\n\n\t\tif (resource) {\n\t\t\tthis.resourceStates = [resource];\n\t\t}\n\t}\n\n\treturn this.resourceStates.filter(s => s.resourceUri instanceof Uri) as Resource[];\n}", "CodeBleu_score": 39.84287847936282}, {"code": "protected async getResourceStates{\n\t\tif (this.resourceStates.length === 0 || !(this.resourceStates[0].resourceUri instanceof Uri)) {\n\t\tconst resource = await this.getSingleResource();\n\t\tif (resource) {\n\t\t\tthis.resourceStates = [resource];\n\t\t}\n\t}\n\n\treturn this.resourceStates.filter(r => r.resourceUri instanceof Uri) as Resource[];\n}", "CodeBleu_score": 37.776325742971245}, {"code": "protected async getResourceStates{\n\t\tif (!this.resourceStates.length || !(this.resourceStates[0].resourceUri instanceof Uri)) {\n\t\tawait this.updateResourceStates();\n\t}\n\treturn this.resourceStates.filter(r => r.resourceUri instanceof Uri) as Resource[];\n}", "CodeBleu_score": 20.925752314317847}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    const scmUri = uri\n      ? uri.scheme === 'svn'\n        ? uri.with({ scheme: 'file' })\n        : uri\n      : window.activeTextEditor?.document.uri;\n\n    if (scmUri) {\n      const scm = scm.getSCMResource(scmUri);\n\n      if (scm) {\n        const repository = this.sourceControlManager.getRepository(scm.resourceUri);\n\n        if (repository) {\n          return repository.getResourceFromFile(scm.resourceUri);\n        }\n      }\n    }\n\n    return undefined;\n  }", "CodeBleu_score": 39.51090646188863}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    if (!uri) {\n      const editor = window.activeTextEditor;\n      if (!editor) {\n        return undefined;\n      }\n      uri = editor.document.uri;\n    }\n\n    if (uri.scheme === 'svn') {\n      uri = uri.with({ scheme: 'file' });\n    }\n\n    const scmResource = await commands.executeCommand<Resource>(\n      'svn.getSCMResource',\n      uri\n    );\n    if (!scmResource) {\n      return undefined;\n    }\n\n    return scmResource;\n  }", "CodeBleu_score": 38.007951264579376}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    uri = uri || (window.activeTextEditor && window.activeTextEditor.document.uri);\n    if (uri) {\n      if (uri.scheme === 'svn') {\n        uri = uri.with({ scheme: 'file' });\n      }\n      const scmManager = await commands.executeCommand('svn.getSCMResourceManager');\n      if (scmManager) {\n        const repository = scmManager.getRepository(uri);\n        if (repository) {\n          return repository.getResourceFromFile(uri);\n        }\n      }\n    }\n  }", "CodeBleu_score": 39.12091415506803}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\t \tif (element.status === Status.MODIFIED) {\n \t\tconst remoteRepository = await this.model.getRemoteRepository(element.path);\n \t\tif (remoteRepository) {\n \t\t\tconst diffCommand = new DiffWithCommand(element.path, element.oldRevision, element.newRevision, remoteRepository);\n \t\t\tthis.commandService.executeCommand(diffCommand);\n \t\t}\n \t} else if (element.status === Status.ADDED) {\n \t\tconst remoteRepository = await this.model.getRemoteRepository(element.path);\n \t\tif (remoteRepository) {\n \t\t\tconst openFileCommand = new OpenFileCommand(element.path, element.newRevision, remoteRepository);\n \t\t\tthis.commandService.executeCommand(openFileCommand);\n \t\t}\n \t}\n }", "CodeBleu_score": 45.068879164570454}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t\t\tif (element.status === Status.MODIFIED) {\n\t\t\tconst remoteRepo = await this.model.getRemoteRepository(element);\n\t\t\tif (remoteRepo) {\n\t\t\t\tawait this.openDiff(element, remoteRepo);\n\t\t\t}\n\t\t} else if (element.status === Status.ADDED) {\n\t\t\tconst remoteRepo = await this.model.getRemoteRepository(element);\n\t\t\tif (remoteRepo) {\n\t\t\t\tawait this.openFileRemote(element, remoteRepo);\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 41.82332190938685}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t\t\tif (element.status === Status.MODIFIED) {\n\t\t\tconst remoteRepository = await this.model.getRemoteRepository(element.uri);\n\t\t\tif (remoteRepository) {\n\t\t\t\tconst diffCommand = remoteRepository.diffCommand;\n\t\t\t\tif (diffCommand) {\n\t\t\t\t\tconst diffArgs = diffCommand.replace('{path}', element.path);\n\t\t\t\t\tconst diffArgsArray = diffArgs.split(' ');\n\t\t\t\t\tconst diffArgsArrayWithRevision = diffArgsArray.map(arg => {\n\t\t\t\t\t\tif (arg === '{oldRevision}') {\n\t\t\t\t\t\t\treturn element.oldRevision;\n\t\t\t\t\t\t} else if (arg === '{newRevision}') {\n\t\t\t\t\t\t\treturn element.newRevision;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn arg;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tconst diffArgsString = diffArgsArrayWithRevision.join(' ');\n\t\t\t\t\tawait this.commandService.executeCommand('svn.openDiff', diffArgsString);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (element.status === Status.ADDED) {\n\t\t\tconst remoteRepository = await this.model.getRemoteRepository(element.uri);\n\t\t\tif (remoteRepository) {\n\t\t\t\tconst openFileCommand = remoteRepository.openFileCommand;\n\t\t\t\tif (openFileCommand) {\n\t\t\t\t\tconst openFileArgs = openFileCommand.replace('{path}', element.path);\n\t\t\t\t\tconst openFileArgsArray = openFileArgs.split(' ');\n\t\t\t\t\tconst openFileArgsArrayWithRevision = openFileArgsArray.map(arg => {\n\t\t\t\t\t\tif (arg === '{revision}') {\n\t\t\t\t\t\t\treturn element.newRevision;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn arg;\n\t\t\t\t\t\t}\n\t\t\t\t", "CodeBleu_score": 40.341941880229335}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t    if (!navigator.clipboard) {\n        window.showErrorMessage(\"Clipboard not supported\");\n        return;\n    }\n    const revision = item.revision;\n    const commitMessage = await getCommitMessage(revision);\n    if (what === \"commit\") {\n        await navigator.clipboard.writeText(commitMessage);\n    } else {\n        await navigator.clipboard.writeText(revision);\n    }\n}", "CodeBleu_score": 41.95244946771469}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t    const clipboard = await getClipboard();\n    if (clipboard) {\n        if (item.commit) {\n            if (what === 'message') {\n                await clipboard.writeText(item.commit.message);\n            } else if (what === 'revision') {\n                await clipboard.writeText(item.commit.revision);\n            }\n        }\n    } else {\n        window.showErrorMessage('Clipboard not supported');\n    }\n}", "CodeBleu_score": 37.28152474376266}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t    if (!clipboard.writeText) {\n        window.showErrorMessage(\"Clipboard is not supported on this platform.\");\n        return;\n    }\n\n    if (!item.commit) {\n        window.showErrorMessage(\"This is not a commit.\");\n        return;\n    }\n\n    let text = item.commit.message;\n    if (what === \"revision\") {\n        text = item.commit.revision;\n    }\n\n    await clipboard.writeText(text);\n}", "CodeBleu_score": 38.69982409223031}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    // Load the available GiteaConnectionFactory implementations.\n    ServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class);\n    List<GiteaConnectionFactory> factories = new ArrayList<>();\n    for (GiteaConnectionFactory factory : loader) {\n        factories.add(factory);\n    }\n\n    // Iterate through the available GiteaConnectionFactory implementations to find the most suitable one.\n    GiteaConnectionFactory factory = null;\n    for (GiteaConnectionFactory f : factories) {\n        if (f.canOpen(this)) {\n            factory = f;\n            break;\n        }\n    }\n\n    // If no suitable GiteaConnectionFactory implementation is found, throw an IOException.\n    if (factory == null) {\n        throw new IOException(\"No suitable GiteaConnectionFactory implementation found.\");\n    }\n\n    // Open the connection.\n    return factory.open(this);\n}", "CodeBleu_score": 46.33339176350174}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t\tfinal GiteaConnectionFactory factory = getMostSuitableFactory();\n\tif (factory == null) {\n\t\tthrow new IOException(\"No suitable GiteaConnectionFactory found\");\n\t}\n\treturn factory.open();\n}", "CodeBleu_score": 8.041591442753948}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t\t// Get all available factories\n\tList<GiteaConnectionFactory> factories = ServiceLoader.load(GiteaConnectionFactory.class).stream().collect(Collectors.toList());\n\n\t// If no factories are found, throw an exception\n\tif (factories.isEmpty()) {\n\t\tthrow new IOException(\"No GiteaConnectionFactory implementations found\");\n\t}\n\n\t// Find the most suitable factory\n\tGiteaConnectionFactory factory = null;\n\tfor (GiteaConnectionFactory f : factories) {\n\t\tif (f.canOpen()) {\n\t\t\tif (factory == null || factory.getPriority() < f.getPriority()) {\n\t\t\t\tfactory = f;\n\t\t\t}\n\t\t}\n\t}\n\n\t// If no suitable factory is found, throw an exception\n\tif (factory == null) {\n\t\tthrow new IOException(\"No suitable GiteaConnectionFactory implementations found\");\n\t}\n\n\t// Open the connection\n\treturn factory.open();\n}", "CodeBleu_score": 36.3142479532489}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\t    Jenkins jenkins = Jenkins.getInstanceOrNull();\n    if (jenkins != null) {\n        this.classLoader = jenkins.pluginManager.getClassLoader();\n    } else {\n        this.classLoader = getClass().getClassLoader();\n    }\n    return this;\n}", "CodeBleu_score": 49.10991489027163}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t    def jenkins = Jenkins.getInstanceOrNull()\n    def pluginManager = jenkins.getPluginManager()\n    def classLoader = pluginManager.uberClassLoader\n    this.classLoader = classLoader\n    return this\n}", "CodeBleu_score": 38.64270952203602}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t    Jenkins jenkins = Jenkins.getInstanceOrNull();\n    if (jenkins != null) {\n        this.classLoader = jenkins.pluginManager.classLoader;\n    } else {\n        this.classLoader = this.getClass().getClassLoader();\n    }\n    return this;\n}", "CodeBleu_score": 49.758285516005444}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\n\n        this.displayName = isBlank(displayName) ? normalizeServerUrl(serverUrl) : displayName;\n        this.serverUrl = normalizeServerUrl(serverUrl);\n        this.manageHooks = manageHooks;\n        this.credentialsId = manageHooks ? credentialsId : null;\n        this.aliasUrl = isBlank(aliasUrl) ? null : aliasUrl.trim();\n    }", "CodeBleu_score": 49.28991640530316}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = isBlank(displayName) ? normalizeServerUrl(serverUrl) : displayName;\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    this.manageHooks = manageHooks;\n    this.credentialsId = manageHooks ? credentialsId : null;\n    this.aliasUrl = isBlank(aliasUrl) ? null : aliasUrl.trim();\n}", "CodeBleu_score": 47.83238930795504}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t        this.displayName = trimToNull(displayName);\n        this.serverUrl = normalizeServerUrl(serverUrl);\n        this.manageHooks = manageHooks;\n        this.credentialsId = manageHooks ? credentialsId : null;\n        this.aliasUrl = trimToNull(aliasUrl);\n    }", "CodeBleu_score": 41.51961978297772}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    if (serverUrl == null) {\n        return new StandardListBoxModel().includeCurrentValue(credentialsId);\n    }\n\n    if (!checkPermission(Item.CONFIGURE, Jenkins.get())) {\n        return new StandardListBoxModel().includeCurrentValue(credentialsId);\n    }\n\n    serverUrl = normalizeServerUrl(serverUrl);\n    return new StandardListBoxModel()\n        .includeMatchingAs(\n            ACL.SYSTEM,\n            Jenkins.get(),\n            StandardUsernamePasswordCredentials.class,\n            Collections.emptyList(),\n            GiteaAuth.matcher(serverUrl)\n        )\n        .includeCurrentValue(credentialsId);\n}", "CodeBleu_score": 41.22648643219327}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    if (!checkPermission(Item.CONFIGURE, Jenkins.get())) {\n        return new StandardListBoxModel().includeCurrentValue(serverUrl);\n    }\n\n    serverUrl = normalizeServerUrl(serverUrl);\n\n    return new StandardListBoxModel()\n            .includeMatchingAs(\n                    ACL.SYSTEM,\n                    Jenkins.get(),\n                    StandardUsernamePasswordCredentials.class,\n                    Collections.emptyList(),\n                    CredentialsMatchers.anyOf(\n                            CredentialsMatchers.instanceOf(StandardUsernamePasswordCredentials.class),\n                            CredentialsMatchers.instanceOf(StringCredentials.class),\n                            CredentialsMatchers.instanceOf(FileCredentials.class),\n                            CredentialsMatchers.instanceOf(SSHUserPrivateKey.class)\n                    )\n            )\n            .includeCurrentValue(serverUrl);\n}", "CodeBleu_score": 37.52818359654319}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    // Check if user has administrative permissions\n    if (!checkPermission(Item.CONFIGURE)) {\n        return new StandardListBoxModel();\n    }\n\n    // Normalize server URL\n    serverUrl = normalizeServerUrl(serverUrl);\n\n    // Include matching credentials\n    return includeMatchingAs(\n        ListBoxModel.class,\n        CredentialsMatchers.instanceOf(StandardUsernamePasswordCredentials.class),\n        CredentialsProvider.lookupCredentials(\n            StandardUsernamePasswordCredentials.class,\n            Jenkins.get(),\n            ACL.SYSTEM,\n            URIRequirementBuilder.fromUri(serverUrl).build()\n        )\n    );\n}", "CodeBleu_score": 39.327694220741826}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        String host = uri.getHost();\n        int port = uri.getPort();\n        String path = uri.getPath();\n        String query = uri.getQuery();\n        String fragment = uri.getFragment();\n        String userInfo = uri.getUserInfo();\n\n        if (scheme == null) {\n            scheme = \"http\";\n        }\n        if (host == null) {\n            host = \"\";\n        }\n        if (port == -1) {\n            if (\"http\".equalsIgnoreCase(scheme)) {\n                port = 80;\n            } else if (\"https\".equalsIgnoreCase(scheme)) {\n                port = 443;\n            }\n        }\n        if (path == null) {\n            path = \"\";\n        } else if (path.endsWith(\"/\")) {\n            path = path.substring(0, path.length() - 1);\n        }\n        if (query == null) {\n            query = \"\";\n        }\n        if (fragment == null) {\n            fragment = \"\";\n        }\n        if (userInfo == null) {\n            userInfo = \"\";\n        }\n\n        return String.format(\"%s://%s%s%s%s%s%s%s\", scheme, userInfo, host, port == -1 ? \"\" : \":\" + port, path, query.isEmpty() ? \"\" : \"?\" + query, fragment.isEmpty() ? \"\" : \"#\" + fragment, path.isEmpty() ? \"\" : \"/\");\n    } catch (URISyntaxException e) {\n        return serverUrl;\n    }\n}", "CodeBleu_score": 45.15576160253475}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        String host = uri.getHost();\n        int port = uri.getPort();\n        String path = uri.getPath();\n        String query = uri.getQuery();\n        String fragment = uri.getFragment();\n        String userInfo = uri.getUserInfo();\n\n        // Normalize scheme\n        if (scheme == null) {\n            scheme = \"http\";\n        } else {\n            scheme = scheme.toLowerCase();\n        }\n\n        // Normalize host\n        if (host == null) {\n            return null;\n        }\n        host = host.toLowerCase();\n\n        // Normalize port\n        if (port == -1) {\n            if (\"http\".equals(scheme)) {\n                port = 80;\n            } else if (\"https\".equals(scheme)) {\n                port = 443;\n            }\n        }\n\n        // Normalize path\n        if (path == null) {\n            path = \"/\";\n        } else {\n            path = path.replaceAll(\"//\", \"/\");\n            if (path.endsWith(\"/\")) {\n                path = path.substring(0, path.length() - 1);\n            }\n        }\n\n        // Normalize query\n        if (query == null) {\n            query = \"\";\n        }\n\n        // Normalize fragment\n        if (fragment == null) {\n            fragment = \"\";\n        }\n\n        // Normalize user info\n        if (userInfo == null) {\n            userInfo = \"\";\n        }\n\n        // Build the new URL\n        StringBuilder builder = new StringBuilder();\n        builder.append(scheme);\n        builder.append(\"://\");\n        builder.append(userInfo);\n        builder.append(host);\n        if (port != -1) {\n            if (\"http\".equals(scheme) && port != 80 || \"https\".equals(scheme) && port != 443) {\n                builder.append(\":\");\n                builder.append(port);\n            }\n", "CodeBleu_score": 45.14063922888383}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return null;\n    }\n\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        if (scheme == null) {\n            scheme = \"http\";\n        }\n\n        String host = uri.getHost();\n        if (host == null) {\n            return null;\n        }\n\n        int port = uri.getPort();\n        if (port == -1) {\n            port = scheme.equals(\"http\") ? 80 : 443;\n        }\n\n        String path = uri.getPath();\n        if (path == null) {\n            path = \"\";\n        }\n\n        StringBuilder sb = new StringBuilder(scheme.length() + host.length() + path.length() + 10);\n        sb.append(scheme);\n        sb.append(\"://\");\n        sb.append(host);\n        if (port != 80 && port != 443) {\n            sb.append(':');\n            sb.append(port);\n        }\n        sb.append(path);\n        if (path.endsWith(\"/\")) {\n            sb.setLength(sb.length() - 1);\n        }\n\n        return sb.toString();\n    } catch (Exception e) {\n        return null;\n    }\n}", "CodeBleu_score": 44.45937724361275}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        String displayName = server.getDisplayName();\n        if (isBlank(displayName)) {\n            items.add(server.getServerUrl());\n        } else {\n            items.add(displayName + \" (\" + server.getServerUrl() + \")\");\n        }\n    }\n    return items;\n}", "CodeBleu_score": 54.83408368432278}, {"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        String displayName = server.getDisplayName();\n        if (isBlank(displayName)) {\n            displayName = server.getServerUrl();\n        }\n        items.add(displayName, server.getServerUrl());\n    }\n    return items;\n}", "CodeBleu_score": 50.8322857416564}, {"code": "public ListBoxModel getServerItems(){\n\t  ListBoxModel items = new ListBoxModel();\n  for (GiteaServer server : GiteaServers.getServers()) {\n    String displayName = server.getDisplayName();\n    if (displayName.isEmpty()) {\n      items.add(server.getServerUrl());\n    } else {\n      items.add(server.getDisplayName(), server.getServerUrl());\n    }\n  }\n  return items;\n}", "CodeBleu_score": 44.76736451609853}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    checkPermission(CONFIGURE);\n    servers = fixNull(servers);\n    servers = listIterator(servers.iterator()).unique().removeIf(this::isBlank).toList();\n    this.servers = servers;\n    save();\n}", "CodeBleu_score": 22.871433883472505}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    if (!checkPermission(Item.CONFIGURE)) {\n        throw new AccessDeniedException2(this, Item.CONFIGURE);\n    }\n\n    if (servers == null) {\n        servers = new ArrayList<>();\n    }\n\n    List<GiteaServer> newServers = new ArrayList<>();\n    for (GiteaServer server : servers) {\n        if (server.getServerUrl() == null || server.getServerUrl().trim().isEmpty()) {\n            continue;\n        }\n        if (newServers.stream().noneMatch(s -> s.getServerUrl().equals(server.getServerUrl()))) {\n            newServers.add(server);\n        }\n    }\n\n    GiteaGlobalConfiguration globalConfig = GiteaGlobalConfiguration.get();\n    globalConfig.setServers(newServers);\n    globalConfig.save();\n}", "CodeBleu_score": 37.697161440126216}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    if (!checkPermission(Item.CONFIGURE)) {\n        throw new AccessDeniedException2(Jenkins.getAuthentication2(), Item.CONFIGURE, this);\n    }\n\n    if (servers == null) {\n        servers = Collections.emptyList();\n    }\n\n    List<GiteaServer> newServers = new ArrayList<>();\n    for (GiteaServer server : servers) {\n        if (server != null && !StringUtils.isBlank(server.getServerUrl())) {\n            newServers.add(server);\n        }\n    }\n\n    if (newServers.size() == 0) {\n        throw new IllegalArgumentException(\"At least one server must be provided\");\n    }\n\n    servers.removeAll(newServers);\n\n    if (servers.size() > 0) {\n        throw new IllegalArgumentException(\"Empty URLs and duplicate URLs are not allowed\");\n    }\n\n    this.servers = newServers;\n\n    save();\n}", "CodeBleu_score": 35.82858560550241}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn false;\n\t}\n\n\tserverUrl = normalizeServerUrl(serverUrl);\n\tif (serverUrl == null) {\n\t\treturn false;\n\t}\n\n\tIterator<GiteaServer> iterator = servers.iterator();\n\twhile (iterator.hasNext()) {\n\t\tGiteaServer server = iterator.next();\n\t\tif (server.getServerUrl().equals(serverUrl)) {\n\t\t\titerator.remove();\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 36.838237713828065}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return false;\n    }\n    String normalizedServerUrl = normalizeServerUrl(serverUrl);\n    if (normalizedServerUrl == null) {\n        return false;\n    }\n    if (servers.remove(normalizedServerUrl)) {\n        updateServers();\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 22.59622748951486}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return false;\n    }\n\n    String normalizedServerUrl = normalizeServerUrl(serverUrl);\n\n    if (normalizedServerUrl == null) {\n        return false;\n    }\n\n    boolean removed = servers.remove(normalizedServerUrl);\n\n    if (removed) {\n        saveServers();\n    }\n\n    return removed;\n}", "CodeBleu_score": 26.25890090702918}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    Set<? extends Element> annotatedElements = roundEnv.getElementsAnnotatedWith(annotation);\n\n    for (Element element : annotatedElements) {\n        if (element.getKind() != ElementKind.FIELD) {\n            continue;\n        }\n\n        String type = asType(element);\n        Map<String, Object> attributes = getAttributesFromAnnotation(element, annotation);\n\n        descriptorElements.add(new ConfigElement(attributes, type));\n    }\n}", "CodeBleu_score": 64.52020752715144}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {\n        Map<String, Object> attributes = getAttributesFromAnnotation(element, annotation);\n        String type = asType(element).toString();\n        descriptorElements.add(new DescriptorElement(type, attributes));\n    }\n}", "CodeBleu_score": 50.55151451026553}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {\n        Map<String, Object> attributes = getAttributesFromAnnotation(element, annotation);\n        String elementType = asType(element).toString();\n        descriptorElements.add(new DescriptorElement(elementType, attributes));\n    }\n}", "CodeBleu_score": 49.09989071987879}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    for (TypeElement annotation : annotations) {\n        if (annotation.getQualifiedName().toString().replace('$', '.').equals(annotationClass.getName())) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 48.8451543513446}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\n    for (TypeElement annotation : annotations) {\n        if (annotation.getQualifiedName().toString().replace(\"$\", \".\").equals(annotationClass.getName())) {\n            return annotation;\n        }\n    }\n\n    return null;\n}", "CodeBleu_score": 51.6849781142277}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    for (TypeElement annotation : annotations) {\n        if (annotation.getQualifiedName().toString().replace(\"$\", \".\").equals(annotationClass.getName())) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 51.65126547731247}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n\n    filters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n    }\n\n    if for_approval:\n        filters[\"status\"] = [\"!=\", \"Cancelled\"]\n        if approver_id:\n            filters[\"approver_id\"] = approver_id\n        else:\n            filters[\"approver_id\"] = [\"!=\", employee]\n\n    return filters\n\n", "CodeBleu_score": 22.193089505599715}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n\n    filters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n        \"status\": \"Open\",\n    }\n\n    if for_approval:\n        filters.update(\n            {\n                \"status\": (\"not in\", [\"Open\", \"Approved\", \"Cancelled\"]),\n                \"approver\": approver_id,\n                \"employee\": (\"!=\", employee),\n            }\n        )\n\n    else:\n        filters.update({\"status\": (\"not in\", [\"Cancelled\"])})\n\n    return filters\n\n", "CodeBleu_score": 26.376765148063143}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\"employee\": employee}\n\n    if for_approval:\n        filters[\"status\"] = get_allowed_states_for_workflow(\n            \"Leave Application\", approver_id\n        )\n        filters[\"docstatus\"] = 1\n        filters[\"name\"] = (\"!=\", employee)\n    else:\n        filters[\"docstatus\"] = 1\n        filters[\"status\"] = (\"!=\", \"Cancelled\")\n\n    return filters\n\n", "CodeBleu_score": 29.731008540694287}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n\n    from datetime import datetime\n    from frappe.utils import today\n    from one_fm.api.mobile.roster import get_roster_details\n    from one_fm.api.mobile.leave_application import get_leave_details\n\n    leave_balance_map = {}\n    leave_details = get_leave_details(employee)\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {}\n        leave_balance_map[leave_type][\"allocated\"] = leave_details[leave_type][\"allocated\"]\n        leave_balance_map[leave_type][\"balance\"] = leave_details[leave_type][\"balance\"]\n\n    return leave_balance_map\n\n", "CodeBleu_score": 34.730222450421046}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    today = getdate()\n    leave_details = get_leave_details(employee, today)\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_details[leave_type][\"leave_allocation\"],\n            \"balance\": leave_details[leave_type][\"leaves_taken\"],\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 38.7718265969243}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n\n    current_date = getdate()\n    leave_details = get_leave_details(employee, current_date)\n    leave_balance_map = {}\n    for leave_detail in leave_details:\n        leave_type = leave_detail.leave_type\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_detail.leave_allocations,\n            \"balance\": leave_detail.leave_balance,\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 41.253005158850584}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if holiday_list:\n        holidays = frappe.db.sql(\n            \"\"\"\n            select\n                name,\n                holiday_date,\n                description\n            from\n                `tabHoliday`\n            where\n                parent = %(holiday_list)s\n                and weekly_off = 0\n            order by\n                holiday_date\n            \"\"\",\n            values={\"holiday_list\": holiday_list},\n            as_dict=True,\n        )\n        return [\n            {\"name\": holiday.name, \"date\": holiday.holiday_date, \"description\": strip_html(holiday.description)}\n            for holiday in holidays\n        ]\n    return []\n\n", "CodeBleu_score": 27.45496782281083}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n\n    holidays = frappe.db.sql(\n        \"\"\"\n        SELECT\n            holiday_date AS date,\n            description AS description,\n            holiday_list AS holiday_list\n        FROM\n            `tabHoliday`\n        WHERE\n            holiday_list = %(holiday_list)s\n            AND holiday_date >= %(from_date)s\n            AND holiday_date <= %(to_date)s\n            AND weekly_off = 0\n        ORDER BY\n            holiday_date ASC\n        \"\"\",\n        values={\n            \"holiday_list\": holiday_list,\n            \"from_date\": getdate(frappe.utils.nowdate()),\n            \"to_date\": add_days(getdate(frappe.utils.nowdate()), 365),\n        },\n        as_dict=True,\n    )\n\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html(holiday[\"description\"])\n\n    return holidays\n\n", "CodeBleu_score": 36.56661322456103}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays = frappe.db.sql(\n        \"\"\"\n        select\n            holiday_date,\n            description\n        from\n            `tabHoliday`\n        where\n            parent = %(holiday_list)s\n            and holiday_date >= %(from_date)s\n            and holiday_date <= %(to_date)s\n            and repeat_on_year = 0\n            and is_labor_holiday = 0\n        order by\n            holiday_date\n        \"\"\",\n        values={\n            \"holiday_list\": holiday_list,\n            \"from_date\": getdate(today()),\n            \"to_date\": getdate(add_months(today(), 12)),\n        },\n        as_dict=1,\n    )\n    return [\n        {\n            \"holiday_date\": holiday[\"holiday_date\"],\n            \"description\": strip_html(holiday[\"description\"]),\n        }\n        for holiday in holidays\n    ]\n\n", "CodeBleu_score": 32.394731785879486}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t\n\n    # Get the current date and time\n    now = datetime.datetime.now()\n\n    # Get the holiday settings\n    holiday_settings = get_single_value(\n        \"SELECT * FROM holiday_settings WHERE id = 1\")\n\n    # Get the holidays that are set to be sent in advance\n    holidays = get_records(\n        \"SELECT * FROM holidays WHERE send_reminders = 'Yes' AND frequency = 'Weekly'\")\n\n    # Loop through the holidays\n    for holiday in holidays:\n        # Get the date of the holiday\n        holiday_date = holiday.date\n\n        # Get the time of the holiday\n        holiday_time = holiday.time\n\n        # Get the date and time of the holiday\n        holiday_datetime = datetime.datetime.strptime(\n            holiday_date + \" \" + holiday_time, '%Y-%m-%d %H:%M:%S')\n\n        # Get the number of days before the holiday to send the reminders\n        days_before = holiday_settings.days_before\n\n        # Get the number of days after the holiday to send the reminders\n        days_after = holiday_settings.days_after\n\n        # Get the date and time of the holiday minus the number of days before\n        # the holiday to send the reminders\n        holiday_minus_days_before = holiday_datetime - \\\n            datetime.timedelta(days=days_before)\n\n        # Get the date and time of the holiday plus the number of days after\n        # the holiday to send the reminders\n        holiday_plus_days_after = holiday_datetime + \\\n            datetime.timedelta(days=days_after)\n\n        # Get the current date and time\n        now = datetime.datetime.now()\n\n        # Check if the current date and time is between the holiday minus the\n        # number of days before the holiday and the holiday plus the number of\n        # days after the holiday\n        if now >= holiday_minus_days_before and now <= holiday_plus_days_after:\n", "CodeBleu_score": 17.44889814599284}, {"code": "def send_reminders_in_advance_weekly()\n\t\n\n    # Get the HR settings\n    hr_settings = frappe.get_doc(\"HR Settings\")\n\n    # If the HR settings specify to send weekly reminders in advance, send the reminders\n    if hr_settings.send_holiday_reminders_in_advance and hr_settings.holiday_reminder_frequency == \"Weekly\":\n        # Get the list of holidays that are in the future and are not marked as \"Notify in Advance\"\n        holidays_in_advance = frappe.db.sql(\"\"\"\n            SELECT holiday_date, name\n            FROM `tabHoliday List`\n            WHERE holiday_date >= DATE_ADD(CURDATE(), INTERVAL 1 DAY)\n            AND notify_in_advance = 0\n        \"\"\", as_dict=1)\n\n        # If there are holidays to send reminders for, send the reminders\n        if holidays_in_advance:\n            # Set the \"Notify in Advance\" flag for the holidays\n            for holiday in holidays_in_advance:\n                holiday_doc = frappe.get_doc(\"Holiday List\", holiday.name)\n                holiday_doc.notify_in_advance = 1\n                holiday_doc.save()\n\n            # Send the reminders\n            send_advance_holiday_reminders()\n", "CodeBleu_score": 28.11120232621105}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    # Get the current user's ID\n    current_user = frappe.session.user\n\n    # Get the HR settings document\n    hr_settings = frappe.get_doc(\"HR Settings\")\n\n    # If the HR settings document exists and the frequency is set to \"Weekly,\" send the reminders\n    if hr_settings and hr_settings.reminder_frequency == \"Weekly\":\n        send_advance_holiday_reminders(current_user)\n\n", "CodeBleu_score": 17.484305399570587}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t\n    self.self_appraisal_score = 0\n    for self_rating in self.self_ratings:\n        self.self_appraisal_score += self_rating.rating * self_rating.percentage_weightage * 5\n    self.self_appraisal_score = round(self.self_appraisal_score, self.precision)\n\n", "CodeBleu_score": 22.421874836068362}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self.self_appraisal_score = 0\n    for self_rating in self.self_ratings:\n        self.self_appraisal_score += self_rating.rating * self_rating.percentage_weightage * 5\n    self.self_appraisal_score = round(self.self_appraisal_score, self.precision)\n\n", "CodeBleu_score": 22.421874836068362}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self.self_appraisal_score = 0\n    for self_rating in self.self_ratings:\n        self.self_appraisal_score += self_rating.rating * self_rating.percentage_weightage * 5\n    self.self_appraisal_score = round(self.self_appraisal_score, self.precision)\n\n", "CodeBleu_score": 22.421874836068362}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle_doc = frappe.get_cached_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle_doc.final_score_formula:\n        data = {}\n        for field in [\"total_score\", \"average_feedback_score\", \"self_appraisal_score\"]:\n            data[field] = getattr(self, field)\n        data[\"appraisal_cycle\"] = appraisal_cycle_doc.as_dict()\n        data[\"appraisal\"] = self.as_dict()\n        data[\"employee\"] = frappe.get_cached_doc(\"Employee\", self.employee).as_dict()\n        data[\"employee_doc\"] = frappe.get_cached_doc(\"Employee\", self.employee)\n        data[\"employee_doc\"].append(\n            \"user_id\", {\"user\": frappe.session.user}, ignore_permissions=True\n        )\n        data[\"employee_doc\"].save()\n        data[\"employee_doc\"] = data[\"employee_doc\"].as_dict()\n        data[\"employee_doc\"][\"user_id\"] = [\n            user[\"user\"] for user in data[\"employee_doc\"][\"user_id\"]\n        ]\n        data[\"employee_doc\"][\"user_id\"] = data[\"employee_doc\"][\"user_id\"][0]\n        data[\"employee_doc\"][\"user_id\"] = frappe.get_cached_doc(\n            \"User\", data[\"employee_doc\"][\"user_id\"]\n        )\n        data[\"employee_doc\"][\"user_id\"] = data[\"employee_doc\"][\"user_id\"].as_dict()\n        data[\"employee_doc\"][\"user_id\"][\"roles\"] = [\n            role[\"role\"] for role in data[\"employee_doc\"][\"user_id\"][\"roles\"]\n        ]\n        data[\"employee_doc\"][\"user_id\"][\"roles\"] = data[\"employee_doc\"][\"user_id\"][\n            \"roles\"\n        ][0]\n        data[\"employee_doc\"][\"user_id\"][\"roles\"] = frappe.get_cached_doc(\n            \"Role", "CodeBleu_score": 28.538047768422636}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle_doc = frappe.get_cached_doc(\n        \"Appraisal Cycle\", self.appraisal_cycle\n    )\n    if appraisal_cycle_doc.final_score_calculation_formula:\n        data = {}\n        data[\"total_score\"] = self.total_score\n        data[\"average_feedback_score\"] = self.average_feedback_score\n        data[\"self_appraisal_score\"] = self.self_appraisal_score\n        data[\"employee_doc\"] = self.employee_doc.as_dict()\n        data[\"appraisal_cycle_doc\"] = appraisal_cycle_doc.as_dict()\n        formula = frappe.safe_eval(\n            sanitize_expression(appraisal_cycle_doc.final_score_calculation_formula),\n            data,\n        )\n        self.final_score = flt(formula, self.precision)\n    else:\n        self.final_score = flt(\n            (\n                self.total_score\n                + self.average_feedback_score\n                + self.self_appraisal_score\n            )\n            / 3,\n            self.precision,\n        )\n\n", "CodeBleu_score": 34.51518426957759}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle_doc = frappe.get_cached_doc(\n        \"Appraisal Cycle\", self.appraisal_cycle\n    )\n    if appraisal_cycle_doc.final_score_calculation_method == \"Formula\":\n        data = {}\n        for employee_doc in self.employee_appraisal_list:\n            data[employee_doc.employee] = employee_doc.as_dict()\n        data[\"appraisal_cycle\"] = appraisal_cycle_doc.as_dict()\n        data[\"appraisal\"] = self.as_dict()\n        sanitized_formula = sanitize_expression(\n            appraisal_cycle_doc.final_score_calculation_formula\n        )\n        final_score = flt(\n            frappe.safe_eval(sanitized_formula, None, data),\n            self.precision,\n        )\n    else:\n        total_score = sum(\n            [\n                employee_doc.total_score\n                for employee_doc in self.employee_appraisal_list\n            ]\n        )\n        average_feedback_score = sum(\n            [\n                employee_doc.average_feedback_score\n                for employee_doc in self.employee_appraisal_list\n            ]\n        ) / len(self.employee_appraisal_list)\n        self_appraisal_score = sum(\n            [\n                employee_doc.self_appraisal_score\n                for employee_doc in self.employee_appraisal_list\n            ]\n        ) / len(self.employee_appraisal_list)\n        final_score = (\n            total_score\n            + average_feedback_score\n            + self_appraisal_score\n        ) / 3\n    self.final_score = final_score\n\n", "CodeBleu_score": 32.09112369333874}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > getdate(nowdate()):\n        if self.status != \"On Leave\":\n            frappe.throw(_(\"Attendance date cannot be in the future\"))\n        else:\n            if not self.leave_application:\n                frappe.throw(_(\"Leave application is required for On Leave status\"))\n\n    if self.attendance_date < getdate(self.employee_date_of_joining):\n        frappe.throw(_(\"Attendance date cannot be earlier than the date of joining\"))\n", "CodeBleu_score": 27.353897836955436}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > getdate(nowdate()):\n        if self.status != \"On Leave\" or not self.leave_application:\n            frappe.throw(_(\"Attendance cannot be marked for future dates unless the status is 'On Leave' and there is no leave application.\"))\n\n    if self.attendance_date < getdate(self.employee_date_of_joining):\n        frappe.throw(_(\"Attendance cannot be marked for dates earlier than the employee's date of joining.\"))\n", "CodeBleu_score": 29.637192153682452}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > getdate(nowdate()):\n        if self.status != \"On Leave\":\n            frappe.throw(_(\"Attendance date cannot be future date unless the status is On Leave and there is no leave application.\"))\n\n    if self.attendance_date < getdate(self.employee_date_of_joining):\n        frappe.throw(_(\"Attendance date cannot be earlier than the employee's date of joining.\"))\n\n", "CodeBleu_score": 24.8673909812993}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\t\n    attendance_list = frappe.get_list(\n        \"Attendance\",\n        filters={\n            \"employee\": self.employee,\n            \"attendance_date\": self.attendance_date,\n            \"docstatus\": 1,\n        },\n        fields=[\"name\", \"employee\", \"attendance_date\"],\n    )\n    if len(attendance_list) > 1:\n        frappe.throw(\n            _(\"Duplicate attendance record found for {0} on {1}. {2}\".format(\n                frappe.bold(self.employee),\n                frappe.bold(self.attendance_date),\n                get_link_to_form(\"Attendance\", attendance_list[0].name)\n            ))\n        )\n    elif len(attendance_list) == 1:\n        attendance = frappe.get_doc(\"Attendance\", attendance_list[0].name)\n        if attendance.docstatus == 0:\n            frappe.throw(\n                _(\"Duplicate attendance record found for {0} on {1}. {2}\".format(\n                    frappe.bold(self.employee),\n                    frappe.bold(self.attendance_date),\n                    get_link_to_form(\"Attendance\", attendance_list[0].name)\n                ))\n            )\n\n", "CodeBleu_score": 28.701645954180876}, {"code": "def validate_duplicate_record(self)\n\t\n    attendance_list = frappe.db.sql(\"\"\"\n        SELECT\n            name\n        FROM\n            `tabAttendance`\n        WHERE\n            employee = %(employee)s\n            AND attendance_date = %(attendance_date)s\n            AND docstatus < 2\n    \"\"\", {\n        \"employee\": self.employee,\n        \"attendance_date\": self.attendance_date,\n    })\n\n    if len(attendance_list) > 1:\n        frappe.throw(_(\"\"\"\n            Multiple attendance records found for employee {0} on {1}.\n            Please select the attendance record you want to edit:\n            {2}\n        \"\"\").format(\n            self.employee,\n            format_date(self.attendance_date, \"dd-MM-yyyy\"),\n            get_link_to_form(\"Attendance\", attendance_list[1][0]),\n        ))\n\n    elif len(attendance_list) == 1:\n        if self.name != attendance_list[0][0]:\n            frappe.throw(_(\"\"\"\n                Attendance record already exists for employee {0} on {1}.\n                Please select the attendance record you want to edit:\n                {2}\n            \"\"\").format(\n                self.employee,\n                format_date(self.attendance_date, \"dd-MM-yyyy\"),\n                get_link_to_form(\"Attendance\", attendance_list[0][0]),\n            ))\n\n", "CodeBleu_score": 38.00936754195088}, {"code": "def validate_duplicate_record(self)\n\t\n    attendance_list = frappe.db.sql(\n        \"\"\"\n            SELECT\n                name\n            FROM `tabAttendance`\n            WHERE employee = %(employee)s AND attendance_date = %(attendance_date)s\n            AND docstatus < 2\n        \"\"\",\n        values={\n            \"employee\": self.employee,\n            \"attendance_date\": self.attendance_date,\n        },\n        as_dict=1,\n    )\n\n    if len(attendance_list) > 1:\n        frappe.throw(\n            _(\"Duplicate attendance records found for employee {0} on {1}. Please check attendance record {2}.\").format(\n                frappe.bold(self.employee_name),\n                frappe.bold(self.attendance_date),\n                get_link_to_form(\"Attendance\", attendance_list[1].name),\n            )\n        )\n\n", "CodeBleu_score": 31.228816248462493}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t\n    self.db_set(\"status\", \"Sent\")\n    message_details = self.get_message_details()\n    group_email_list = get_user_emails_from_group(self.group)\n    frappe.sendmail(\n        recipients=group_email_list,\n        subject=self.subject,\n        message=frappe.render_template(\"daily_summary_template.html\", message_details),\n    )\n\n", "CodeBleu_score": 52.548460782357}, {"code": "def send_summary(self)\n\t\n    # Get the group name\n    group = self.group\n    # Get the message details\n    message_details = self.get_message_details()\n    # Get the email addresses of users in the group\n    user_emails = get_user_emails_from_group(group)\n    # Send the email\n    frappe.sendmail(\n        recipients=user_emails,\n        sender=frappe.session.user,\n        subject=_(\"Daily Summary\"),\n        message=message_details,\n        header=[_(\"Daily Summary\")],\n        reference_doctype=self.doctype,\n        reference_name=self.name,\n    )\n    # Update the status to \"Sent\"\n    self.db_set(\"status\", \"Sent\")\n\n", "CodeBleu_score": 37.73983794052208}, {"code": "def send_summary(self)\n\t\n    # Get message details\n    message_details = self.get_message_details()\n    # Get email addresses of users in the specified group\n    group_emails = get_user_emails_from_group(self.group)\n    # Send email\n    frappe.sendmail(recipients=group_emails,\n                    subject=\"Daily Summary of Replies\",\n                    template=\"daily_summary\",\n                    args=message_details)\n    # Update status to \"Sent\"\n    self.db_set(\"status\", \"Sent\")\n\n", "CodeBleu_score": 25.48365456613747}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t\n    if self.job_applicant and self.interview_round:\n        interview = frappe.db.get_value(\n            \"Interview\",\n            filters={\n                \"job_applicant\": self.job_applicant,\n                \"interview_round\": self.interview_round,\n                \"docstatus\": 1,\n            },\n        )\n        if interview:\n            frappe.throw(\n                _(\n                    \"\"\"<h4>Job applicant already appeared for this interview round.</h4>\n                    <p>Please check the existing interview record:\n                    <a href=\"{0}\">{1}</a></p>\n                    <p>Job applicant: {2}</p>\n                    <p>Interview round: {3}</p>\n                    <p>Interview date: {4}</p>\"\"\".format(\n                        get_link_to_form(\"Interview\", interview),\n                        interview,\n                        frappe.bold(self.job_applicant),\n                        frappe.bold(self.interview_round),\n                        formatdate(self.interview_date),\n                    )\n                )\n            )\n\n", "CodeBleu_score": 45.77323252927245}, {"code": "def validate_duplicate_interview(self)\n\t\n    interview_round = frappe.db.get_value(\"Job Applicant\", self.job_applicant, \"interview_round\")\n    if not interview_round:\n        return\n    interview_round_exists = frappe.db.exists(\n        {\n            \"doctype\": \"Interview\",\n            \"job_applicant\": self.job_applicant,\n            \"interview_round\": interview_round,\n            \"name\": (\"!=\", self.name),\n        }\n    )\n    if interview_round_exists:\n        interview_round_link = get_link_to_form(\"Interview\", interview_round_exists[0])\n        job_applicant_link = get_link_to_form(\"Job Applicant\", self.job_applicant)\n        frappe.throw(\n            _(\n                \"Job Applicant {0} has already been scheduled for interview for {1}. Please check {2} for more details.\"\n            ).format(\n                job_applicant_link,\n                interview_round,\n                interview_round_link,\n            )\n        )\n\n", "CodeBleu_score": 40.719476691680725}, {"code": "def validate_duplicate_interview(self)\n\t\n    if not self.name:\n        return\n    interview_exists = frappe.db.exists(\n        \"Interview\",\n        {\n            \"interview_round\": self.interview_round,\n            \"job_applicant\": self.job_applicant,\n            \"name\": (\"!=\", self.name),\n        },\n    )\n    if interview_exists:\n        frappe.throw(\n            _(\"Job applicant {0} already has an interview scheduled for this round.\").format(\n                get_link_to_form(\"Job Applicant\", self.job_applicant, label=self.job_applicant)\n            )\n        )\n\n", "CodeBleu_score": 46.82657325186314}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\t\n\n    # Get the list of all assessments for this skill\n    assessments = self.assessments.all()\n\n    # If there are no assessments, set the average rating to 0\n    if not assessments:\n        self.average_rating = 0\n        return\n\n    # Sum the ratings of all assessments that have a rating\n    total = 0\n    for assessment in assessments:\n        if assessment.rating is not None:\n            total += assessment.rating\n\n    # Calculate the average rating\n    self.average_rating = total / len(assessments)\n\n", "CodeBleu_score": 23.032720425695196}, {"code": "def calculate_average_rating(self)\n\t\n    # TODO: Implement this function\n    self.average_rating = 0\n    if self.assessments:\n        sum = 0\n        for assessment in self.assessments:\n            if assessment.rating:\n                sum += assessment.rating\n        self.average_rating = sum / len(self.assessments)\n\n", "CodeBleu_score": 33.76437135299879}, {"code": "def calculate_average_rating(self)\n\t\n    total_rating = 0\n    num_of_ratings = 0\n    for assessment in self.skill_assessments:\n        if assessment.rating is not None:\n            total_rating += assessment.rating\n            num_of_ratings += 1\n    if num_of_ratings > 0:\n        self.average_rating = total_rating / num_of_ratings\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 23.257466505691614}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.round = doc.round\n    interview.designation = doc.designation\n    interview.interviewers = []\n    if isinstance(doc, str):\n        interview = frappe.get_doc(\"Interview\", doc)\n    elif isinstance(doc, dict):\n        interview.update(doc)\n    if \"interviewers\" in doc:\n        for interviewer in doc.interviewers:\n            interview.append(\"interviewers\", interviewer)\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 43.936294955222934}, {"code": "def create_interview(doc):\n\t\n\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    interview.applicant = doc.applicant\n\n    if doc.interviewers:\n        interviewers = json.loads(doc.interviewers)\n        for interviewer in interviewers:\n            if isinstance(interviewer, str):\n                interviewer = frappe.get_doc(\"Interviewer\", interviewer)\n            interview.append(\"interviewers\", {\n                \"interviewer\": interviewer.name,\n                \"interviewer_name\": interviewer.interviewer_name,\n                \"designation\": interviewer.designation,\n                \"interviewer_email\": interviewer.interviewer_email\n            })\n\n    interview.save(ignore_permissions=True)\n    return interview\n\n", "CodeBleu_score": 38.34089024828352}, {"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    if doc.interviewers:\n        for interviewer in doc.interviewers:\n            interview.append(\"interviewers\", {\n                \"interviewer\": interviewer\n            })\n    return interview\n\n", "CodeBleu_score": 43.57873717624721}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offer_list = []\n    for job_offer in frappe.get_all(\n        \"Job Offer\",\n        filters={\n            \"designation\": self.designation,\n            \"company\": self.company,\n            \"docstatus\": 1,\n            \"date_of_creation\": (\">=\", from_date),\n            \"date_of_creation\": (\"<=\", to_date),\n        },\n    ):\n        job_offer_list.append(job_offer.name)\n    return job_offer_list\n\n", "CodeBleu_score": 55.83349887400272}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    return frappe.db.sql(\n        \"\"\"\n        SELECT\n            `tabJob Offer`.name\n        FROM\n            `tabJob Offer`\n        WHERE\n            `tabJob Offer`.designation = %(designation)s\n            AND `tabJob Offer`.company = %(company)s\n            AND `tabJob Offer`.docstatus = 1\n            AND `tabJob Offer`.date_of_joining >= %(from_date)s\n            AND `tabJob Offer`.date_of_joining <= %(to_date)s\n        \"\"\",\n        {\n            \"designation\": self.designation,\n            \"company\": self.company,\n            \"from_date\": from_date,\n            \"to_date\": to_date,\n        },\n        as_dict=1,\n    )\n\n", "CodeBleu_score": 46.13090048377086}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    # check if the date range is valid\n    if from_date > to_date:\n        return []\n\n    # get the job offer doctype\n    job_offer_doctype = frappe.get_doc(\"DocType\", \"Job Offer\")\n\n    # get the job offer names\n    job_offer_names = frappe.db.sql(\n        \"\"\"\n        SELECT name\n        FROM `tabJob Offer`\n        WHERE\n            designation = %(designation)s AND\n            company = %(company)s AND\n            status = %(status)s AND\n            creation > %(from_date)s AND\n            creation < %(to_date)s\n        \"\"\",\n        {\n            \"designation\": self.designation,\n            \"company\": self.company,\n            \"status\": \"Submitted\",\n            \"from_date\": from_date,\n            \"to_date\": to_date,\n        },\n        as_dict=True,\n    )\n\n    # return the list of job offer names\n    return [job_offer.name for job_offer in job_offer_names]\n\n", "CodeBleu_score": 46.715678869526656}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n\n    # Filter the job offer table by company and department if specified\n    filters = {}\n    if company:\n        filters[\"company\"] = company\n    if department:\n        filters[\"department\"] = department\n    job_offers = frappe.get_all(\"Job Offer\", filters=filters, fields=[\"name\", \"docstatus\"])\n\n    # Count the total number of job offers\n    total_job_offers = len(job_offers)\n\n    # Count the number of accepted job offers\n    accepted_job_offers = 0\n    for job_offer in job_offers:\n        if job_offer.docstatus == 1:\n            accepted_job_offers += 1\n\n    # Calculate the acceptance rate\n    acceptance_rate = accepted_job_offers / total_job_offers\n\n    # Return the acceptance rate as a percentage\n    return {\n        \"value\": acceptance_rate,\n        \"fieldtype\": \"Percent\"\n    }\n\n", "CodeBleu_score": 43.98726351351807}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if company:\n        company_filter = \"and company = %(company)s\"\n    else:\n        company_filter = \"\"\n\n    if department:\n        department_filter = \"and department = %(department)s\"\n    else:\n        department_filter = \"\"\n\n    job_offers = frappe.db.sql(\n        \"\"\"\n        select count(*) as total_job_offers,\n            (select count(*) from `tabJob Offer` where docstatus = 1 {0} {1}) as accepted_job_offers\n        from `tabJob Offer`\n        where docstatus = 1 {0} {1}\n        \"\"\".format(company_filter, department_filter),\n        {\n            \"company\": company,\n            \"department\": department\n        }\n    )\n\n    if not job_offers:\n        return 0\n\n    total_job_offers = job_offers[0][0]\n    accepted_job_offers = job_offers[0][1]\n\n    if total_job_offers == 0:\n        return 0\n\n    return flt(accepted_job_offers / total_job_offers * 100), \"Percent\"\n\n", "CodeBleu_score": 27.934946295491}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    total_offers = frappe.db.count('Job Offer', {'docstatus': 1})\n    accepted_offers = frappe.db.count('Job Offer', {'docstatus': 1, 'accepted': 1})\n    if company:\n        total_offers = frappe.db.count('Job Offer', {'docstatus': 1, 'company': company})\n        accepted_offers = frappe.db.count('Job Offer', {'docstatus': 1, 'accepted': 1, 'company': company})\n    if department:\n        total_offers = frappe.db.count('Job Offer', {'docstatus': 1, 'department': department})\n        accepted_offers = frappe.db.count('Job Offer', {'docstatus': 1, 'accepted': 1, 'department': department})\n    if total_offers == 0:\n        return 0, 'Percent'\n    else:\n        return flt(accepted_offers / total_offers * 100, 2), 'Percent'\n\n", "CodeBleu_score": 30.5488272253334}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t    final Result result = employerService.register(employerForRegisterDto);\n    if (result.isSuccess()) {\n        return ResponseEntity.ok(result);\n    }\n    return ResponseEntity.badRequest().body(result);\n}", "CodeBleu_score": 63.64281102366308}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t    final Result result = employerService.register(employerForRegisterDto);\n    if (result.isSuccess()) {\n        return ResponseEntity.ok(result);\n    } else {\n        return ResponseEntity.badRequest().body(result);\n    }\n}", "CodeBleu_score": 62.14131537631968}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t    final Result result = employerService.register(employerForRegisterDto);\n    if (result.isSuccess()) {\n        return ResponseEntity.ok(result);\n    } else {\n        return ResponseEntity.badRequest().body(result);\n    }\n}", "CodeBleu_score": 62.14131537631968}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t    final Result<CompanyStaff> companyStaffResult = companyStaffRepository.findById(companyStaffForUpdateDto.getId());\n    if (companyStaffResult.isFailure()) {\n        return Result.failure(companyStaffResult.getError());\n    }\n\n    final CompanyStaff companyStaff = companyStaffResult.getValue();\n    if (!arePasswordMatch(companyStaff, companyStaffForUpdateDto.getPassword())) {\n        return Result.failure(new BusinessRuleError(\"Password does not match\", ResultStatus.FAILURE));\n    }\n\n    companyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n    companyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\n    companyStaffRepository.save(companyStaff);\n\n    return Result.success(companyStaff);\n}", "CodeBleu_score": 46.576259904283205}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\tfinal CompanyStaff companyStaff = findById(companyStaffForUpdateDto.getId());\n\tif (companyStaff == null) {\n\t\treturn Result.failure(ResultCode.NOT_FOUND, \"Company staff not found\");\n\t}\n\tif (!arePasswordMatch(companyStaff, companyStaffForUpdateDto.getPassword())) {\n\t\treturn Result.failure(ResultCode.BAD_REQUEST, \"Password does not match\");\n\t}\n\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\tcompanyStaff.save();\n\treturn Result.success(companyStaff);\n}", "CodeBleu_score": 36.75103832630928}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t    // 1. Retrieve the staff record by ID.\n    CompanyStaff companyStaff = companyStaffRepository.findById(companyStaffForUpdateDto.getId());\n    if (companyStaff == null) {\n        return notFound();\n    }\n\n    // 2. Check business rules.\n    if (!arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaff.getPassword())) {\n        return isSuccess(false, \"Password does not match\");\n    }\n\n    // 3. Update the staff's first and last names.\n    companyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n    companyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\n    // 4. Save the changes.\n    companyStaffRepository.save(companyStaff);\n\n    // 5. Return a success result indicating the staff was updated.\n    return isSuccess(true, \"Staff updated\");\n}", "CodeBleu_score": 40.35491501286279}]}
