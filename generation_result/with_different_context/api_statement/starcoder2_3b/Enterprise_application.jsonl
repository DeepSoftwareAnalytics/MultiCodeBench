{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t\n    attachments = request.httprequest.args.getlist('attachment_ids[]')\n    if not attachments:\n        return request.make_response('No attachments selected', status=400)\n    attachments = self._build_zip_from_attachments(attachments)\n    if not attachments:\n        return request.make_response('No attachments found', status=404)\n    zip_headers = self._get_zip_headers(attachments)\n    return request.make_response(attachments, zip_headers)\n\n", "CodeBleu_score": 30.4831729956942}, {"code": "def export_zip_documents(self, **args)\n\t\n    attachments = self._build_zip_from_attachments(args)\n    if attachments:\n        headers = self._get_zip_headers(attachments)\n        response = request.make_response(attachments, headers)\n        response.headers['Content-Disposition'] = 'attachment; filename=attachments.zip'\n        return response\n\n", "CodeBleu_score": 16.283664984722826}, {"code": "def export_zip_documents(self, **args)\n\t\n    attachments = self.env['ir.attachment']\n    request = self.env['ir.http.request']\n    list = request.httprequest.args.getlist\n    attachments.check_access_rights\n    getlist\n    attachments.check_access_rule\n    map\n    attachments._build_zip_from_attachments\n    request.make_response\n    browse\n\n", "CodeBleu_score": 19.002831787088663}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(Home, self)._prepare_home_portal_values(counters)\n    if self.env.user.has_group('account.group_account_user'):\n        values['invoice_count'] = self.env['account.move'].search_count([('type', '=', 'out_invoice'), ('state', 'in', ('open', 'paid'))])\n        values['bill_count'] = self.env['account.move'].search_count([('type', '=', 'out_refund'), ('state', 'in', ('open', 'paid'))])\n    return values\n", "CodeBleu_score": 31.055538005873807}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(AccountInvoice, self)._prepare_home_portal_values(counters)\n    if self.env.user.has_group('account.group_account_user'):\n        values['invoice_count'] = self._get_invoices_domain(self._get_invoices_domain_args(counters)).count()\n        values['bill_count'] = self._get_bills_domain(self._get_bills_domain_args(counters)).count()\n    return values\n\n", "CodeBleu_score": 24.078861984583057}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    if self.env.user.has_group('account.group_account_manager'):\n        return super(AccountInvoice, self)._prepare_home_portal_values(counters)\n    else:\n        if 'account_invoice_count' in counters:\n            if self.env.user.has_group('account.group_account_user'):\n                domain = self._get_invoices_domain()\n                domain += [('state', 'not in', ('draft', 'cancel'))]\n                counters['account_invoice_count'] = self.env['account.move'].search_count(domain)\n            else:\n                counters['account_invoice_count'] = 0\n        if 'account_bill_count' in counters:\n            if self.env.user.has_group('account.group_account_user'):\n                domain = self._get_bills_domain()\n                domain += [('state', 'not in', ('draft', 'cancel'))]\n                counters['account_bill_count'] = self.env['account.move'].search_count(domain)\n            else:\n                counters['account_bill_count'] = 0\n        return super(AccountInvoice, self)._prepare_home_portal_values(counters)\n\n", "CodeBleu_score": 37.22650194339974}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    # Get the invoices\n    invoices = self._get_my_invoices(date_begin, date_end, sortby, filterby)\n    # Update the session history\n    self._update_session_history(invoices)\n    # Get the portal_pager values\n    pager_values = self._prepare_my_invoices_values(invoices, page, sortby, filterby)\n    # Render the invoices page\n    return self.render('my_invoices.pt', **pager_values)\n\n", "CodeBleu_score": 25.406859370132583}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    # Get the portal_history tool\n    portal_history = self.portal_history\n    # Get the portal_catalog tool\n    portal_catalog = self.portal_catalog\n    # Get the portal_properties tool\n    portal_properties = self.portal_properties\n    # Get the portal_url tool\n    portal_url = self.portal_url\n    # Get the portal_skins tool\n    portal_skins = self.portal_skins\n    # Get the portal_actions tool\n    portal_actions = self.portal_actions\n    # Get the portal_membership tool\n    portal_membership = self.portal_membership\n    # Get the portal_languages tool\n    portal_languages = self.portal_languages\n    # Get the portal_transforms tool\n    portal_transforms = self.portal_transforms\n    # Get the portal_type_tool tool\n    portal_type_tool = self.portal_type_tool\n    # Get the portal_workflow tool\n    portal_workflow = self.portal_workflow\n    # Get the portal_workflow_tool tool\n    portal_workflow_tool = self.portal_workflow_tool\n    # Get the portal_groups tool\n    portal_groups = self.portal_groups\n    # Get the portal_membership tool\n    portal_membership = self.portal_membership\n    # Get the portal_membership tool\n    portal_membership = self.portal_membership\n    # Get the portal_membership tool\n    portal_membership = self.portal_membership\n    # Get the portal_membership tool\n    portal_membership = self.portal_membership\n    # Get the portal_membership tool\n    portal_membership = self.portal_membership\n    # Get the portal_membership tool\n    portal_membership = self.portal_membership\n    # Get the portal_membership tool\n    portal_membership = self.portal_membership\n    # Get the portal_membership tool\n    portal_membership = self.portal_membership\n    # Get the portal_membership tool\n    portal_membership = self.portal_membership\n    # Get the portal_membership tool\n    portal_membership = self.portal_membership\n    # Get the portal_membership tool\n    portal_membership = self.portal_membership\n    # Get the portal_membership tool\n    portal_membership = self.portal_membership\n    # Get the portal_membership tool\n    portal_membership = self.portal_membership\n    # Get the portal_membership tool\n    portal_membership = self.portal_membership\n    # Get the portal_membership tool\n    portal_", "CodeBleu_score": 10.876931250603821}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby, **kw)\n    return self.request.render('my_invoices', values)\n\n", "CodeBleu_score": 23.265304246889254}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    invoice_sudo = self._invoice_get_sudo_invoice(invoice_id)\n    if not invoice_sudo._check_access(access_token):\n        return self._invoice_get_redirect_response(invoice_id)\n    if report_type == 'pdf':\n        attachments = invoice_sudo._get_invoice_report_attachments()\n        if attachments:\n            return self._build_zip_from_attachments(attachments, invoice_id)\n    if report_type == 'html':\n        return self._invoice_get_page_view_values(invoice_id, report_type, download)\n    if report_type in ('text', 'csv'):\n        return self._invoice_get_page_view_values(invoice_id, report_type, download)\n    if report_type == 'download':\n        return self._invoice_get_page_view_values(invoice_id, report_type, download)\n    return self._invoice_get_page_view_values(invoice_id, report_type, download)\n\n", "CodeBleu_score": 28.570818832854872}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    invoice_sudo = self.env['account.invoice'].sudo().browse(int(invoice_id))\n    if not invoice_sudo.check_access_rights('read', raise_exception=False):\n        raise AccessError(_('Access denied for this invoice.'))\n    if not invoice_sudo.check_access_rule('read'):\n        raise AccessError(_('Access denied for this invoice.'))\n    if not invoice_sudo.state in ('posted', 'open'):\n        raise AccessError(_('You can only download posted invoices.'))\n    if download:\n        if report_type == 'pdf':\n            return self._get_invoice_pdf(invoice_sudo, access_token, **kw)\n        if report_type == 'html':\n            return self._get_invoice_html(invoice_sudo, access_token, **kw)\n        if report_type == 'text':\n            return self._get_invoice_text(invoice_sudo, access_token, **kw)\n        if report_type == 'zip':\n            return self._get_invoice_zip(invoice_sudo, access_token, **kw)\n        if report_type =='report':\n            return self._get_invoice_report(invoice_sudo, access_token, **kw)\n    else:\n        if report_type == 'pdf':\n            return self._get_invoice_pdf_view(invoice_sudo, access_token, **kw)\n        if report_type == 'html':\n            return self._get_invoice_html_view(invoice_sudo, access_token, **kw)\n        if report_type == 'text':\n            return self._get_invoice_text_view(invoice_sudo, access_token, **kw)\n        if report_type =='report':\n            return self._get_invoice_report_view(invoice_sudo, access_token, **kw)\n    return self._get_invoice_page_view(invoice_sudo, access_token, **kw)\n\n", "CodeBleu_score": 28.15638826806729}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    invoice_sudo = self.env['account.invoice'].sudo().search([('id', '=', invoice_id)])\n    if not invoice_sudo.check_access_rights('read', raise_exception=False):\n        return request.redirect('/web/login')\n    if not invoice_sudo.check_access_rule('read'):\n        return request.redirect('/web/login')\n    if not invoice_sudo.state in ('posted', 'open'):\n        return request.redirect('/web/login')\n    if invoice_sudo.type in ('out_refund', 'in_refund'):\n        return request.redirect('/web/login')\n    if invoice_sudo.type == 'out_invoice':\n        if not invoice_sudo.company_id.partner_id.check_access_rights('read', raise_exception=False):\n            return request.redirect('/web/login')\n        if not invoice_sudo.company_id.partner_id.check_access_rule('read'):\n            return request.redirect('/web/login')\n    if not invoice_sudo.company_id.check_access_rights('read', raise_exception=False):\n        return request.redirect('/web/login')\n    if not invoice_sudo.company_id.check_access_rule('read'):\n        return request.redirect('/web/login')\n    if invoice_sudo.type == 'out_invoice' and not invoice_sudo.company_id.partner_id.check_access_rights('read', raise_exception=False):\n        return request.redirect('/web/login')\n    if invoice_sudo.type == 'out_invoice' and not invoice_sudo.company_id.partner_id.check_access_rule('read'):\n        return request.redirect('/web/login')\n    if invoice_sudo.type == 'out_invoice' and not invoice_sudo.company_id.check_access_rights('read', raise_exception=False):\n        return request.redirect('/web/login')\n    if invoice_sudo.type == 'out_invoice' and not invoice_sudo.company_id.check_access_rule('read'):\n        return request.redirect('/web/login')\n    if invoice_sudo.type == 'out_invoice' and not invoice_sudo.company_id.partner_id.check_access_rights('read', raise_exception=False):\n        return request.", "CodeBleu_score": 22.231679129085258}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t\n    self.env.cr.execute(\"\"\"SELECT DISTINCT product_tmpl_id FROM product_template WHERE company_id = %s\"\"\", (company.id,))\n    prod_templates = self.env['product.template'].browse(self.env.cr.fetchall())\n    if company.account_sale_tax_id:\n        prod_templates.filtered(lambda r: r.taxes_id).write({'taxes_id': [(6, 0, [company.account_sale_tax_id.id])]})\n    if company.account_purchase_tax_id:\n        prod_templates.filtered(lambda r: r.taxes_id).write({'taxes_id': [(6, 0, [company.account_purchase_tax_id.id])]})\n    return prod_templates\n\n", "CodeBleu_score": 27.371772852361158}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    prod_templates = self.env['product.template'].search([])\n    if company:\n        prod_templates = prod_templates.filtered(lambda p: p.company_id == company)\n    for prod_template in prod_templates:\n        if prod_template.company_id.account_sale_tax_id:\n            prod_template.taxes_id = prod_template.company_id.account_sale_tax_id.id\n        if prod_template.company_id.account_purchase_tax_id:\n            prod_template.taxes_purchase_id = prod_template.company_id.account_purchase_tax_id.id\n    return prod_templates\n\n", "CodeBleu_score": 29.969015341084916}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    self.env.cr.execute(\"SELECT id FROM product_template WHERE company_id=%s AND active=True AND sale_ok=True\", (company.id,))\n    sale_ids = [x[0] for x in self.env.cr.fetchall()]\n    self.env.cr.execute(\"SELECT id FROM product_template WHERE company_id=%s AND active=True AND purchase_ok=True\", (company.id,))\n    purchase_ids = [x[0] for x in self.env.cr.fetchall()]\n    if company.account_sale_tax_id:\n        self.env.cr.execute(\"UPDATE product_template SET taxes_id=%s WHERE id IN %s\", (company.account_sale_tax_id.id, tuple(sale_ids)))\n    if company.account_purchase_tax_id:\n        self.env.cr.execute(\"UPDATE product_template SET taxes_id=%s WHERE id IN %s\", (company.account_purchase_tax_id.id, tuple(purchase_ids)))\n", "CodeBleu_score": 28.516414463653323}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account_id = self._get_account_id(xml_id, account_type, company)\n    if account_id:\n        return account_id\n    account_ids = self.search(company.with_context(active_test=False), [('company_id', '=', company.id), ('type', '=', account_type)])\n    return account_ids and account_ids[0] or False\n", "CodeBleu_score": 30.438816066857388}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env['account.account'].search([('id', '=', company.id), ('xml_id', '=', xml_id)], limit=1)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id), ('type', '=', account_type)], limit=1)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n    return account\n\n", "CodeBleu_score": 45.22879028369325}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account_id = self.env['ir.model.data'].xmlid_to_res_id(xml_id)\n    account = self.env['account.account'].search([('id', '=', account_id)], limit=1)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id.name', '=', account_type)], limit=1)\n    return account\n\n", "CodeBleu_score": 42.54382801294607}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    if self.account_type == 'Current Year Earnings':\n        if self.company:\n            accounts_of_type_current_year_earnings = Account.objects.filter(company=self.company, account_type='Current Year Earnings')\n            if accounts_of_type_current_year_earnings.count() > 1:\n                raise ValidationError('There is already an account of type \"Current Year Earnings\" for this company.')\n\n", "CodeBleu_score": 28.745784839687815}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    if self.account_type == 'Current Year Earnings':\n        accounts = self._read_group([('account_type', '=', 'Current Year Earnings')], ['company_id'], ['company_id'])\n        for account in accounts:\n            if len(accounts) > 1 and account[0]!= self.id:\n                raise ValidationError(_('There is more than one account with the \"Current Year Earnings\" type for the company %s.') % (account[1]))\n\n", "CodeBleu_score": 39.4475413597087}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    if self._read_group(\n            ['company_id', 'account_type'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_id'],\n            ['account_type', 'company_", "CodeBleu_score": 8.19119137420454}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name:\n        if self.env.context.get('partner_id'):\n            return self._order_accounts_by_frequency_for_partner(domain, order)\n        return self._search(domain, limit=limit, order=order)\n    search_domain = []\n    if operator == 'ilike':\n        search_domain = [('name', operator, name)]\n    elif operator == 'like':\n        search_domain = [('name', operator, '%%%s%%' % name)]\n    else:\n        search_domain = [('name', operator, name)]\n    return self._search(expression.AND([domain, search_domain]), limit=limit, order=order)\n", "CodeBleu_score": 37.90593113174797}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name:\n        return self.search(domain)\n    if operator == 'ilike':\n        operator = 'like'\n    if operator == 'not ilike':\n        operator = 'not like'\n    if operator == 'like':\n        name = name.replace('%', '')\n    if operator == 'not like':\n        name = name.replace('%', '')\n    if operator == 'ilike':\n        name = name.replace('%', '%')\n    if operator == 'not ilike':\n        name = name.replace('%', '%')\n    if operator == 'ilike':\n        name = name.replace('_', '_')\n    if operator == 'not ilike':\n        name = name.replace('_', '_')\n    if operator == 'ilike':\n        name = name.replace('*', '%')\n    if operator == 'not ilike':\n        name = name.replace('*', '%')\n    if operator == 'ilike':\n        name = name.replace('*', '%')\n    if operator == 'not ilike':\n        name = name.replace('*', '%')\n    if operator == 'ilike':\n        name = name.replace('*', '%')\n    if operator == 'not ilike':\n        name = name.replace('*', '%')\n    if operator == 'ilike':\n        name = name.replace('*', '%')\n    if operator == 'not ilike':\n        name = name.replace('*', '%')\n    if operator == 'ilike':\n        name = name.replace('*', '%')\n    if operator == 'not ilike':\n        name = name.replace('*', '%')\n    if operator == 'ilike':\n        name = name.replace('*', '%')\n    if operator == 'not ilike':\n        name = name.replace('*', '%')\n    if operator == 'ilike':\n        name = name.replace('*', '%')\n    if operator == 'not ilike':\n        name = name.replace('*', '%')\n    if operator == 'ilike':\n        name = name.replace('*', '%')\n    if operator == 'not ilike':\n        name = name.replace('*', '%')\n    if operator == 'ilike':\n        name = name.replace('*', '%')\n    if operator == 'not ilike':\n        name = name.replace('*', '%')\n    if operator == 'ilike':\n        name = name.replace('*', '%')\n    if operator == 'not ilike':\n        name", "CodeBleu_score": 21.710329158309904}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if name:\n        return super(AccountInvoice, self)._name_search(name, operator=operator, limit=limit, order=order)\n    if self._context.get('order_account_by_frequency'):\n        return self._order_accounts_by_frequency_for_partner(operator=operator, limit=limit, order=order)\n    return self.search(domain, operator=operator, limit=limit, order=order)\n\n", "CodeBleu_score": 22.25184706189369}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t\n    self", "CodeBleu_score": 4.5673076923076925}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    if", "CodeBleu_score": 4.658188537452233}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    for field in self.fields:\n        if field.name", "CodeBleu_score": 7.3591531901328695}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\t\n    action = self.env.ref('account.action_move_tree').read()[0]\n    action['domain'] = [('id', 'in', self._query_analytic_accounts(self.id).ids)]\n    action['context'] = {'type': 'out_invoice', 'default_type': 'out_invoice', 'default_sale_id': self.id}\n    return action\n\n", "CodeBleu_score": 19.586084986124064}, {"code": "def action_view_invoice(self)\n\t\n    context = self.env.context\n    context.update(self.get_sale_types())\n    query = self.env['account.move.line'].search_read(self.get_query(), ['id','move_id', 'account_id', 'analytic_account_id'])\n    move_ids = self.env['account.move.line'].search([('sale_type', 'in', query['sale_type']), ('sale_type', '!=', False), ('move_id', 'in', query['move_id']), ('move_id', '!=', False), ('account_id', 'in', query['account_id']), ('account_id', '!=', False), ('analytic_account_id', 'in', query['analytic_account_id']), ('analytic_account_id', '!=', False)])\n    context.update({'domain': [('id', 'in', move_ids.ids)]})\n    return {\n        'name': _('Customer Invoices'),\n        'view_type': 'form',\n        'view_mode': 'tree,form',\n       'res_model': 'account.move.line',\n        'view_id': self.env.ref('account.view_move_line_tree').id,\n        'type': 'ir.actions.act_window',\n        'context': context,\n        'domain': [('id', 'in', move_ids.ids)],\n    }\n\n", "CodeBleu_score": 28.708296528698295}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    query = self.env['account.move.line'].with_context(active_test=False)\n    query = query.select_invoice_move_ids(self.id, self.get_sale_types(), self.get_analytic_accounts())\n    move_ids = query.query.get_distinct_move_ids()\n    action = self.env.ref('account.action_move_journal_line').read()[0]\n    action['context'] = {'search_default_move_id': move_ids}\n    action['domain'] = [('move_id', 'in', move_ids)]\n    return action\n\n", "CodeBleu_score": 21.332887365458298}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    action = self.env.ref('purchase.purchase_vendor_bill').read()[0]\n    action['context'] = {\n       'search_default_vendor_bill_type': self.type_id.id,\n       'search_default_vendor_bill_id': self.id,\n        'default_type': 'in_invoice',\n    }\n    action['domain'] = [('move_id.purchase_line_ids.purchase_id', '=', self.id)]\n    return action\n\n", "CodeBleu_score": 21.747116469762844}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    domain = [('purchase_type', 'in', self.get_purchase_types()), ('move_id.purchase_id', '=', self.id)]\n    move_ids = self.env['account.move.line'].search(domain).mapped('move_id')\n    action = self.env.ref('account.action_move_out_invoice_type').read()[0]\n    action['context'] = {'default_purchase_type': 'in_invoice'}\n    action['domain'] = [('id', 'in', move_ids.ids)]\n    return action\n\n", "CodeBleu_score": 26.60503458172323}, {"code": "def action_view_vendor_bill(self)\n\t\n    context = self.env.context.copy()\n    context['default_type'] = 'in_invoice'\n    context['default_move_type'] = 'in_invoice'\n    context['default_move_id'] = self.id\n    context['default_partner_id'] = self.partner_id.id\n    context['default_journal_id'] = self.journal_id.id\n    context['default_purchase_type'] = self.purchase_type.id\n    context['default_purchase_type_id'] = self.purchase_type.id\n    context['default_company_id'] = self.company_id.id\n    context['default_currency_id'] = self.currency_id.id\n    context['default_date_invoice'] = self.date_invoice\n    context['default_date_order'] = self.date_order\n    context['default_fiscal_position_id'] = self.fiscal_position_id.id\n    context['default_payment_term_id'] = self.payment_term_id.id\n    context['default_partner_bank_id'] = self.partner_bank_id.id\n    context['default_partner_shipping_id'] = self.partner_shipping_id.id\n    context['default_partner_invoice_id'] = self.partner_invoice_id.id\n    context['default_partner_order_id'] = self.partner_order_id.id\n    context['default_partner_id'] = self.partner_id.id\n    context['default_partner_ref'] = self.partner_ref\n    context['default_origin'] = self.origin\n    context['default_company_id'] = self.company_id.id\n    context['default_currency_id'] = self.currency_id.id\n    context['default_payment_term_id'] = self.payment_term_id.id\n    context['default_partner_bank_id'] = self.partner_bank_id.id\n    context['default_partner_shipping_id'] = self.partner_shipping_id.id\n    context['default_partner_invoice_id'] = self.partner_invoice_id.id\n    context['default_partner_order_id'] = self.partner_order_id.id\n    context['default_partner_id'] = self.partner_id.", "CodeBleu_score": 15.09189731287161}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\t\n    with self.attachment_ids.as_context():\n        return super(Attachment, self).write(values)\n\n", "CodeBleu_score": 9.615219822065784}, {"code": "def write(self, values)\n\t\n    if", "CodeBleu_score": 3.391116100890919}, {"code": "def write(self, values)\n\t\n    with self._check_attachments(values) as attachments:\n        return super(AttachmentMixin, self).write(values)\n\n", "CodeBleu_score": 14.748521979756912}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\t\n    if not self.env.company.skip_bank_account_creation:\n        bank_account = self.env['res.partner.bank'].search(\n            [('acc_number', '=', self.acc_number), ('partner_id', '=', self.partner_id.id)], limit=1)\n        if not bank_account:\n            bank_account = self.env['res.partner.bank'].create({\n                'acc_number': self.acc_number,\n                'partner_id': self.partner_id.id,\n                'company_id': self.env.company.id,\n                'currency_id': self.env.company.currency_id.id,\n                'bank_id': self.env.company.bank_id.id,\n            })\n    else:\n        bank_account = self.env['res.partner.bank'].search([])\n    return bank_account\n", "CodeBleu_score": 55.57039947521451}, {"code": "def _find_or_create_bank_account(self)\n\t\n    company_id = self.env.company.id\n    if self.env['ir.config_parameter'].sudo().get_param('bank_account_creation.skip_for_company') == str(company_id):\n        return self.env['res.partner.bank'].sudo().search([('partner_id', '=', self.partner_id.id), ('acc_number', '=', self.acc_number)], limit=1)\n    return self.env['res.partner.bank'].sudo().search([('partner_id', '=', self.partner_id.id), ('acc_number', '=', self.acc_number)], limit=1)\n\n", "CodeBleu_score": 30.94536443936787}, {"code": "def _find_or_create_bank_account(self)\n\t\n    if self.env.user.company_id.skip_bank_account_creation:\n        return self.env['res.partner.bank'].search([('partner_id', '=', self.id), ('company_id', '=', self.env.user.company_id.id)], limit=1)\n    else:\n        return self.env['res.partner.bank'].search([('partner_id', '=', self.id), ('company_id', '=', self.env.user.company_id.id)], limit=1) or self.env['res.partner.bank'].create({'partner_id': self.id, 'company_id': self.env.user.company_id.id})\n\n", "CodeBleu_score": 24.57652293276265}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    company = self.env.company\n    transaction_currency = self.currency_id\n    company_currency = company.currency_id\n    journal_currency = self.journal_id.currency_id\n    st_line_rate = self.st_line_rate\n    if st_line_rate:\n        st_line_rate = st_line_rate.with_context(date=self.date)\n    if not st_line_rate:\n        return {}\n    if currency.is_zero(amount_currency):\n        return {}\n    if currency == transaction_currency:\n        return {\n            'transaction_amount_currency': amount_currency,\n            'transaction_amount': amount_currency,\n            'transaction_currency': transaction_currency,\n            'company_currency': company_currency,\n            'company_amount': amount_currency,\n            'journal_currency': journal_currency,\n            'journal_amount': amount_currency,\n            'balance': balance,\n        }\n    return {\n        'transaction_amount_currency': amount_currency,\n        'transaction_amount': amount_currency,\n        'transaction_currency': transaction_currency,\n        'company_currency': company_currency,\n        'company_amount': amount_currency,\n        'journal_currency': journal_currency,\n        'journal_amount': amount_currency,\n        'balance': balance,\n    }\n\n", "CodeBleu_score": 24.629513277564524}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    context = self.env.context\n    context = dict(context, force_company=self.company_id.id)\n    transaction_currency = self.currency_id\n    company_currency = self.company_id.currency_id\n    journal_currency = self.journal_id.currency_id\n    transaction_amount = self.amount_total\n    if balance == 'debt':\n        journal_amount = self.amount_total\n        company_amount = self.amount_total\n    else:\n        journal_amount = -self.amount_total\n        company_amount = -self.amount_total\n    if currency == 'company':\n        transaction_amount = company_currency._convert(transaction_amount, transaction_currency, self.company_id, self.date, context=context)\n        journal_amount = company_currency._convert(journal_amount, transaction_currency, self.company_id, self.date, context=context)\n        company_amount = company_currency._convert(company_amount, transaction_currency, self.company_id, self.date, context=context)\n    elif currency == 'transaction':\n        transaction_amount = transaction_currency._convert(transaction_amount, transaction_currency, self.company_id, self.date, context=context)\n        journal_amount = transaction_currency._convert(journal_amount, transaction_currency, self.company_id, self.date, context=context)\n        company_amount = transaction_currency._convert(company_amount, transaction_currency, self.company_id, self.date, context=context)\n    elif currency == 'journal':\n        transaction_amount = journal_currency._convert(transaction_amount, transaction_currency, self.company_id, self.date, context=context)\n        journal_amount = journal_currency._convert(journal_amount, transaction_currency, self.company_id, self.date, context=context)\n        company_amount = journal_currency._convert(company_amount, transaction_currency, self.company_id, self.date, context=context)\n    elif currency == 'current_currency':\n        transaction_amount = self.currency_id._convert(transaction_amount, transaction_currency, self.company_id, self.date, context=context)\n        journal_amount = self.currency_id._convert(journal_", "CodeBleu_score": 25.907917120518203}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    res = {}\n    res['transaction_currency'] = self.currency_id\n    res['transaction_amount'] = self.amount_currency\n    res['transaction_amount_currency'] = self.currency_id\n    res['transaction_amount_company'] = self.company_id.currency_id\n    res['transaction_amount_company_currency'] = self.company_id.currency_id\n    res['journal_currency'] = self.journal_id.currency_id\n    res['journal_amount'] = self.amount_currency\n    res['journal_amount_currency'] = self.currency_id\n    res['journal_amount_company'] = self.company_id.currency_id\n    res['journal_amount_company_currency'] = self.company_id.currency_id\n    res['company_currency'] = self.company_id.currency_id\n    res['company_amount'] = self.amount_currency\n    res['company_amount_currency'] = self.currency_id\n    res['company_amount_company'] = self.company_id.currency_id\n    res['company_amount_company_currency'] = self.company_id.currency_id\n    res['amount_currency'] = self.currency_id\n    res['amount_company'] = self.company_id.currency_id\n    res['amount_company_currency'] = self.company_id.currency_id\n    res['balance'] = balance\n    res['amount'] = amount_currency\n    res['amount_currency'] = self.currency_id\n    res['amount_company'] = self.company_id.currency_id\n    res['amount_company_currency'] = self.company_id.currency_id\n    return res\n\n", "CodeBleu_score": 15.291693681433358}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    if self.type == 'bank' or self.type == 'cash':\n        journal = self\n        payment_method_ids = journal._default_outbound_payment_methods()\n        for payment_method_id in payment_method_ids:\n            payment_method = self.env['payment.method'].browse(payment_method_id)\n            payment_method_line = self.env['payment.method.line'].create({\n                'payment_method_id': payment_method_id,\n                'journal_id': journal.id,\n                'amount': payment_method.amount,\n                'name': payment_method.name,\n               'sequence': payment_method.sequence,\n               'reconciled': False,\n               'reconciliation_id': False,\n                'payment_type': payment_method.payment_type,\n                'payment_mode': payment_method.payment_mode,\n                'payment_mode_id': payment_method.payment_mode_id.id,\n                'payment_method_type': payment_method.payment_method_type,\n                'payment_method_type_id': payment_method.payment_method_type_id.id,\n                'payment_method_code': payment_method.payment_method_code,\n                'payment_method_code_id': payment_method.payment_method_code_id.id,\n                'payment_method_group_id': payment_method.payment_method_group_id.id,\n                'payment_method_group_code': payment_method.payment_method_group_code,\n                'payment_method_group_code_id': payment_method.payment_method_group_code_id.id,\n                'payment_method_code_id': payment_method.payment_method_code_id.id,\n                'payment_method_code_id': payment_method.payment_method_code_id.id,\n                'payment_method_code_id': payment_method.payment_method_code_id.id,\n                'payment_method_code_id': payment_method.payment_method_code_id.id,\n            })\n            payment_method_line.compute_sequence()\n        self.write({'outbound_payment_method_line_ids': [(6, 0, [x.id for x in self.outbound_payment", "CodeBleu_score": 25.873928614387875}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    if self.type in ['bank', 'cash']:\n        for line in self.outbound_payment_method_line_ids:\n            line.unlink()\n        for method in self.env['account.payment.method'].search([('is_outbound', '=', True)]):\n            self.outbound_payment_method_line_ids.create({'payment_method_id': method.id})\n    else:\n        for line in self.outbound_payment_method_line_ids:\n            line.unlink()\n\n", "CodeBleu_score": 30.416524738143906}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal._clear_outbound_payment_method_lines()\n        if journal.type in ['bank', 'cash']:\n            for payment_method in journal._default_outbound_payment_methods:\n                journal._create_outbound_payment_method_line(payment_method)\n        journal.outbound_payment_method_line_ids = journal._outbound_payment_method_line_ids\n\n", "CodeBleu_score": 29.862133823129223}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t\n    for move in self:\n        if move.invoice_date:\n            if not move.is_sale_document:\n                move._get_accounting_date()\n            if move.accounting_date!= move.date:\n                move.date = move.accounting_date\n                move.schedule_recompute()\n\n", "CodeBleu_score": 19.91638056639151}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if move.invoice_date:\n            if not move.is_sale_document:\n                move._get_accounting_date()\n            if move.accounting_date!= move.date:\n                move.date = move.accounting_date\n                move.date_expected = move.accounting_date\n                move.date_maturity = move.accounting_date\n                move.date_maturity_invoice = move.accounting_date\n                move.date_maturity_sale = move.accounting_date\n                move.date_maturity_purchase = move.accounting_date\n                move.date_maturity_purchase_invoice = move.accounting_date\n                move.date_maturity_purchase_sale = move.accounting_date\n                move.date_maturity_purchase_credit = move.accounting_date\n                move.date_maturity_purchase_debit = move.accounting_date\n                move.date_maturity_purchase_cash = move.accounting_date\n                move.date_maturity_purchase_cash_invoice = move.accounting_date\n                move.date_maturity_purchase_cash_sale = move.accounting_date\n                move.date_maturity_purchase_cash_credit = move.accounting_date\n                move.date_maturity_purchase_cash_debit = move.accounting_date\n                move.date_maturity_purchase_cash_cash = move.accounting_date\n                move.date_maturity_purchase_cash_cash_invoice = move.accounting_date\n                move.date_maturity_purchase_cash_cash_sale = move.accounting_date\n                move.date_maturity_purchase_cash_cash_credit = move.accounting_date\n                move.date_maturity_purchase_cash_cash_debit = move.accounting_date\n                move.date_maturity_purchase_cash_cash_cash = move.accounting_date\n                move.date_maturity_purchase_cash_cash_cash_invoice = move.accounting_date\n                move.date_maturity_purchase_cash_cash_cash_sale = move.accounting_date\n                move.date_maturity_purchase_cash_cash_cash_credit = move.accounting_date\n                move.date_maturity_purchase_cash_cash_cash_debit = move.accounting_date\n                move.date_maturity_purchase", "CodeBleu_score": 19.03803477638893}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if move.invoice_date and not move.date and not move.is_sale_document:\n            move.date = move._get_accounting_date()\n        if move.date and not move.invoice_date and not move.is_sale_document:\n            move.invoice_date = move._get_accounting_date()\n        if move.date and move.invoice_date and not move.is_sale_document:\n            if move.date!= move.invoice_date:\n                move.date = move.invoice_date\n                move.schedule_recompute()\n        if move.date and move.invoice_date and move.is_sale_document:\n            if move.date!= move.invoice_date:\n                move.date = move.invoice_date\n                move.schedule_recompute()\n\n", "CodeBleu_score": 31.667536845288353}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_invoice:\n            if move.is_sale_document and move.partner_id.property_payment_term_id:\n                move.payment_term_id = move.partner_id.property_payment_term_id.id\n            elif move.is_purchase_document and move.partner_id.property_supplier_payment_term_id:\n                move.payment_term_id = move.partner_id.property_supplier_payment_term_id.id\n            else:\n                move.payment_term_id = False\n\n", "CodeBleu_score": 42.85571179420755}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_purchase_document:\n            if move.partner_id.property_payment_term_id:\n                move.payment_term_id = move.partner_id.property_payment_term_id\n        elif move.is_sale_document:\n            if move.partner_id.property_payment_term_id:\n                move.payment_term_id = move.partner_id.property_payment_term_id\n        else:\n            move.payment_term_id = False\n", "CodeBleu_score": 44.01154724143132}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_purchase_document:\n            if move.partner_id.property_payment_term_id:\n                move.payment_term_id = move.partner_id.property_payment_term_id.id\n            else:\n                move.payment_term_id = False\n        elif move.is_sale_document:\n            if move.partner_id.property_payment_term_id:\n                move.payment_term_id = move.partner_id.property_payment_term_id.id\n            else:\n                move.payment_term_id = False\n\n", "CodeBleu_score": 39.678745728106534}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t\n    tax_group_id = self.env['account.tax.group'].search([('country_id', '=', self.country_id.id), ('company_id', '=', self.company_id.id)])\n    if not tax_group_id:\n        tax_group_id = self.env['account.tax.group'].search([('country_id', '=', self.country_id.id)])\n    if not tax_group_id:\n        tax_group_id = self.env['account.tax.group'].search([])\n    self.tax_group_id = tax_group_id.id\n", "CodeBleu_score": 19.927074123154277}, {"code": " def _compute_tax_group_id(self)\n\t\n    tax_group_id = self.env['account.tax.group'].search([('country_id', '=', self.country_id.id), ('company_id', '=', self.company_id.id)]).id\n    if not tax_group_id:\n        tax_group_id = self.env['account.tax.group'].search([('country_id', '=', self.country_id.id)]).id\n    if not tax_group_id:\n        tax_group_id = self.env['account.tax.group'].search([('company_id', '=', self.company_id.id)]).id\n    if not tax_group_id:\n        tax_group_id = self.env['account.tax.group'].search([]).id\n    self.tax_group_id = tax_group_id\n", "CodeBleu_score": 24.134061225403226}, {"code": " def _compute_tax_group_id(self)\n\t\n    tax_group_id = self.env['account.tax.group'].search([('country_id', '=', self.country_id.id), ('company_id', '=', self.company_id.id)], limit=1)\n    if not tax_group_id:\n        tax_group_id = self.env['account.tax.group'].search([('country_id', '=', self.country_id.id), ('company_id', '=', False)], limit=1)\n    if not tax_group_id:\n        tax_group_id = self.env['account.tax.group'].search([('country_id', '=', False), ('company_id', '=', self.company_id.id)], limit=1)\n    if not tax_group_id:\n        tax_group_id = self.env['account.tax.group'].search([('country_id', '=', False), ('company_id', '=', False)], limit=1)\n    if not tax_group_id:\n        tax_group_id = self.env['account.tax.group'].search([], limit=1)\n    self.tax_group_id = tax_group_id\n", "CodeBleu_score": 29.41938559342428}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    with open(module_file, 'rb') as f:\n        module_data = f.read()\n    with requests.Session() as s:\n        s.auth = (login, password)\n        r = s.get(url)\n        if r.status_code!= 200:\n            raise Exception('Error connecting to server. Status code: %s' % r.status_code)\n        data = {'db': db, 'force': force,'module': module_data}\n        r = s.post(url + '/base_import_module/login_upload', data=data)\n        if r.status_code!= 200:\n            raise Exception('Error uploading module to server. Status code: %s' % r.status_code)\n        return r.text\n\n", "CodeBleu_score": 43.74353059382513}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    with requests.Session() as s:\n        s.get(url + 'login', auth=(login, password))\n        data = {'database': db, 'force': force}\n        files = {'file': open(module_file, 'rb')}\n        response = s.post(url + 'base_import_module/login_upload', data=data, files=files)\n        response.raise_for_status()\n        return response.text\n\n", "CodeBleu_score": 32.932352802591204}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    self.session.post(url + '/login', data=dict(login=login, password=))\n    post_data = dict(login=login, password=, db=db, force=force)\n    post_data['module_file'] = (module_file, open(module_file, 'rb'))\n    response = self.session.post(url + '/base_import_module/login_upload', data=post_data)\n    response.raise_for_status()\n    return response.text\n", "CodeBleu_score": 35.08246303794043}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t\n    db_name = 'test_db'\n    overwrite = True\n    registry = Registry.new(db_name, update_module=True)\n    with registry.cursor() as cursor:\n        translation_importer = TranslationImporter(cursor, db_name, overwrite)\n        translation_importer.save()\n        translation_importer.load_file()\n\n", "CodeBleu_score": 29.612193238291194}, {"code": "def import_translation()\n\t\n    config = configparser.ConfigParser()\n    config.read('config.ini')\n    database = config.get('DEFAULT', 'database')\n    overwrite = config.getboolean('DEFAULT', 'overwrite')\n    registry = Registry.new(database, update_module=True)\n    with registry.cursor() as cursor:\n        translation_importer = TranslationImporter(cursor, overwrite=overwrite)\n        translation_importer.load_file()\n        translation_importer.save()\n", "CodeBleu_score": 43.93849646088931}, {"code": "def import_translation()\n\t\n    translation_importer = registry.cursor\n    new", "CodeBleu_score": 0.8922637087609341}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\t\n    node = Node(name, info, self.depth + 1)\n    if node.name in self.children:\n        return None\n    if self.parent:\n        node.parent = self.parent\n        node.depth = self.depth + 1\n        node.parent.children.append(node)\n        node.parent.children.sort(key=lambda x: x.name)\n        if hasattr(self, 'color'):\n            node.color = self.color\n        if hasattr(self, 'value'):\n            node.value = self.value\n        if hasattr(self, 'children'):\n            node.children = self.children\n        if hasattr(self, 'is_terminal'):\n            node.is_terminal = self.is_terminal\n        if hasattr(self, 'is_leaf'):\n            node.is_leaf = self.is_leaf\n        if hasattr(self, 'is_root'):\n            node.is_root = self.is_root\n        if hasattr(self, 'is_terminal'):\n            node.is_terminal = self.is_terminal\n        if hasattr(self, 'is_leaf'):\n            node.is_leaf = self.is_leaf\n        if hasattr(self, 'is_root'):\n            node.is_root = self.is_root\n        if hasattr(self, 'is_terminal'):\n            node.is_terminal = self.is_terminal\n        if hasattr(self, 'is_leaf'):\n            node.is_leaf = self.is_leaf\n        if hasattr(self, 'is_root'):\n            node.is_root = self.is_root\n    else:\n        node.parent = self\n        node.depth = 0\n        node.is_root = True\n    return node\n\n", "CodeBleu_score": 34.14615521330142}, {"code": "def add_child(self, name, info)\n\t\n    node = Node(name, info)\n    node.depth = self.depth + 1\n    if node.name not in [child.name for child in self.children]:\n        self.children.append(node)\n    if self.parent:\n        node.parent = self.parent\n        node.depth = self.depth + 1\n        node.children = self.children\n        node.attributes = self.attributes\n        node.attributes.update(self.parent.attributes)\n    self.children.sort(key=lambda x: x.name)\n    return node\n\n", "CodeBleu_score": 47.6043880063245}, {"code": "def add_child(self, name, info)\n\t\n    new_node = Node(name, info, self.depth + 1)\n    if self.children == None:\n        self.children = []\n    if new_node not in self.children:\n        self.children.append(new_node)\n    if self.parent!= None:\n        new_node.parent = self.parent\n        new_node.depth = self.depth + 1\n        for attr in ['name', 'info', 'children', 'parent', 'depth']:\n            if hasattr(self, attr):\n                setattr(new_node, attr, getattr(self, attr))\n    self.children.sort(key=lambda x: x.name)\n    return new_node\n\n", "CodeBleu_score": 50.632414863434796}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {date: 0 for date in dates}\n    root_type = account.root_type\n    for entry in gl_entries:\n        date = entry.posting_date\n        if date not in result:\n            continue\n        if entry.account == account.name:\n            result[date] += entry.debit - entry.credit\n    if root_type not in [\"Asset\", \"Expense\"]:\n        for date in result:\n            result[date] = -result[date]\n    for date in result:\n        if root_type in [\"Asset\", \"Liability\"]:\n            result[date] = sum(result[date:].values())\n        elif root_type == \"Equity\":\n            result[date] = result[date]\n    return result\n\n", "CodeBleu_score": 30.49513655084859}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\n        \"dates\": dates,\n        \"balances\": [0] * len(dates),\n        \"root_type\": account.root_type,\n    }\n    for entry in gl_entries:\n        for i, date in enumerate(dates):\n            if entry.posting_date == date:\n                result[\"balances\"][i] += entry.debit - entry.credit\n    if result[\"root_type\"] not in (\"Asset\", \"Liability\", \"Equity\"):\n        result[\"balances\"] = [-x for x in result[\"balances\"]]\n    return result\n\n", "CodeBleu_score": 27.534976792649505}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {}\n    result['dates'] = dates\n    result['balances'] = [0] * len(dates)\n    result['root_type'] = account.root_type\n    for entry in gl_entries:\n        if account.root_type == 'Asset':\n            result['balances'][dates.index(entry.posting_date)] += entry.debit - entry.credit\n        elif account.root_type == 'Liability':\n            result['balances'][dates.index(entry.posting_date)] -= entry.debit - entry.credit\n        elif account.root_type == 'Equity':\n            result['balances'][dates.index(entry.posting_date)] += entry.debit - entry.credit\n        else:\n            result['balances'][dates.index(entry.posting_date)] -= entry.debit - entry.credit\n    return result\n\n", "CodeBleu_score": 23.201057235890268}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type in [\"Receivable\", \"Payable\"] and self.get_doc_before_save().account_type not in [\"Receivable\", \"Payable\"]:\n        if self.get_all_general_ledger_entries():\n            frappe.msgprint(\n                _(\"The account type change from {0} to {1} will result in the loss of the general ledger entries. You can view them in the Accounts report.\").format(\n                    self.get_doc_before_save().account_type, self.account_type\n                ),\n                raise_exception=True,\n            )\n            self.add_comment(\n                _(\"The account type change from {0} to {1} will result in the loss of the general ledger entries. You can view them in the Accounts report.\").format(\n                    self.get_doc_before_save().account_type, self.account_type\n                ),\n                \"Warning\"\n            )\n\n", "CodeBleu_score": 27.127711237272443}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if (\n        self.get_account_type", "CodeBleu_score": 0.5895799032431376}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if (\n        self.get_value(\"account_type\")\n       != self.get_value(\"account_type_before_save\")\n        and self.get_value(\"account_type\") in [\"Receivable\", \"Payable\"]\n        and self.get_value(\"account_type_before_save\") not in [\"Receivable\", \"Payable\"]\n    ):\n        if self.get_value(\"account_type\") == \"Receivable\":\n            account_type = \"Receivable\"\n        else:\n            account_type = \"Payable\"\n        if self.get_value(\"account_type_before_save\") == \"Receivable\":\n            account_type_before_save = \"Receivable\"\n        else:\n            account_type_before_save = \"Payable\"\n        if self.get_value(\"account_type\") == \"Receivable\" and self.get_value(\"account_type_before_save\") == \"Receivable\":\n            account_type_before_save = \"Receivable\"\n        if self.get_value(\"account_type\") == \"Payable\" and self.get_value(\"account_type_before_save\") == \"Payable\":\n            account_type_before_save = \"Payable\"\n        if self.get_value(\"account_type\") == \"Receivable\" and self.get_value(\"account_type_before_save\") == \"Payable\":\n            account_type_before_save = \"Payable\"\n        if self.get_value(\"account_type\") == \"Payable\" and self.get_value(\"account_type_before_save\") == \"Receivable\":\n            account_type_before_save = \"Receivable\"\n        if self.get_value(\"account_type\")!= \"Receivable\" and self.get_value(\"account_type\")!= \"Payable\":\n            account_type_before_save = self.get_value(\"account_type_before_save\")\n        if self.get_value(\"account_type\") == \"Receivable\" and self.get_value(\"account_type_before_save\") == \"Receivable\":\n            account_type_before_save = \"Receivable\"\n        if self.get_value(\"account_type\") == \"Payable\" and self.get_value", "CodeBleu_score": 20.579950118403627}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t\n    if not self.account_currency:\n        self.account_currency = frappe.db.get_value(\n            \"Company\", self.company, \"default_currency\"\n        )\n        self.is_currency_explicitly_specified = 0\n    elif self.account_currency!= frappe.db.get_value(\n        \"Company\", self.company, \"default_currency\"\n    ):\n        raise frappe.ValidationError(\n            \"Account currency is different from company default currency.\"\n        )\n\n", "CodeBleu_score": 32.015106335605594}, {"code": "def validate_account_currency(self)\n\t\n    if not self.account_currency:\n        self.account_currency = frappe.db.get_value(\n            \"Company\", self.company, \"default_currency\"\n        )\n    if self.account_currency!= self.currency:\n        if (\n            frappe.db.exists(\n                \"GL Entry\",\n                {\n                    \"account\": self.name,\n                    \"company\": self.company,\n                    \"currency\": self.account_currency,\n                },\n            )\n            or frappe.db.exists(\n                \"GL Entry\",\n                {\n                    \"account\": self.name,\n                    \"company\": self.company,\n                    \"currency\": self.currency,\n                },\n            )\n        ):\n            frappe.throw(\n                _(\"Cannot change currency for {0} as there are existing entries with a different currency.\").format(\n                    self.name\n                )\n            )\n\n", "CodeBleu_score": 31.6742286723492}, {"code": "def validate_account_currency(self)\n\t\n    if self.account_currency!= self.company_currency:\n        if frappe.db.exists(\"GL Entry\", {\"account\": self.name, \"company\": self.company, \"currency\": self.company_currency}):\n            frappe.throw(_(\"Currency of account {0} is different from the default currency of the company {1}\").format(self.account_currency, self.company_currency))\n        self.account_currency = self.company_currency\n\n", "CodeBleu_score": 26.140120229237013}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key = generate_key(entry, accounting_dimensions)\n        if key not in merged_entries:\n            merged_entries[key] = entry\n            merged_entries[key].debit = 0\n            merged_entries[key].credit = 0\n            merged_entries[key].debit_amount = 0\n            merged_entries[key].credit_amount = 0\n        if entry.debit_amount > 0:\n            merged_entries[key].debit += entry.debit\n            merged_entries[key].debit_amount += entry.debit_amount\n        if entry.credit_amount > 0:\n            merged_entries[key].credit += entry.credit\n            merged_entries[key].credit_amount += entry.credit_amount\n    return merged_entries\n\n", "CodeBleu_score": 26.7708063763062}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        # Generate a unique key for each entry based on the accounting dimensions\n        key = generate_key(entry, accounting_dimensions)\n        # Initialize the debit, credit, and their respective amounts in account currency to 0\n        debit = 0\n        credit = 0\n        amount = 0\n        # Iterate through each entry to generate a unique key and corresponding values\n        for entry in entries:\n            if key == generate_key(entry, accounting_dimensions):\n                debit += entry.debit\n                credit += entry.credit\n                amount += entry.amount\n        # Update the debit, credit, and their respective amounts in account currency in the merged entries dictionary\n        merged_entries.setdefault(key, entry)\n        merged_entries[key].debit = debit\n        merged_entries[key].credit = credit\n        merged_entries[key].amount = amount\n    return merged_entries\n\n", "CodeBleu_score": 27.40064352170908}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key = generate_key(entry, accounting_dimensions)\n        if key in merged_entries:\n            merged_entries[key]['debit'] += entry['debit']\n            merged_entries[key]['credit'] += entry['credit']\n        else:\n            merged_entries[key] = {\n                'debit': entry['debit'],\n                'credit': entry['credit']\n            }\n    return merged_entries\n\n", "CodeBleu_score": 29.994262083178103}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.supplier:\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.is_blocked:\n            if supplier.hold_type == self.transaction_type:\n                if supplier.release_date:\n                    if nowdate() > supplier.release_date:\n                        frappe.throw(\n                            _(\"Supplier {0} is blocked and cannot be used for this transaction.\").format(\n                                supplier.supplier_name\n                            )\n                        )\n                else:\n                    frappe.throw(\n                        _(\"Supplier {0} is blocked and cannot be used for this transaction.\").format(\n                            supplier.supplier_name\n                        )\n                    )\n\n", "CodeBleu_score": 25.710889690981077}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self", "CodeBleu_score": 0.375659333809238}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self", "CodeBleu_score": 0.375659333809238}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = get_repost_doctypes()\n    references_map = {}\n    for doctype in repost_doctypes:\n        references_map[doctype] = {}\n    for doctype, doctype_name in repost_doctypes.items():\n        if doctype == self.doctype:\n            continue\n        query = \"select parent, parenttype, name from `tab{0}` where parenttype = %s and parent = %s\".format(doctype_name)\n        references = frappe.db.sql(query, (self.doctype, self.name))\n        for parent, parenttype, name in references:\n            references_map[doctype][parent] = references_map.get(doctype).get(parent, []) + [name]\n    for doctype, parent_references in references_map.items():\n        for parent, references in parent_references.items():\n            parent_doc = frappe.get_doc(parenttype, parent)\n            for reference in references:\n                if doctype == \"Repost Voucher\":\n                    parent_doc.repost_vouchers.remove(reference)\n                else:\n                    parent_doc.vouchers.remove(reference)\n            parent_doc.ignore_validate_links = True\n            parent_doc.ignore_links = True\n            parent_doc.save()\n\n", "CodeBleu_score": 29.611942856516016}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = self.get_repost_doctypes()\n    if not repost_doctypes:\n        return\n    references_map = self.get_references_map(repost_doctypes)\n    if not references_map:\n        return\n    self.remove_references_from_repost_doctypes(references_map)\n\n", "CodeBleu_score": 7.898316594837497}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = self.get_repost_doctypes()\n    for doctype in repost_doctypes:\n        query = f\"\"\"select name, parent, parenttype, voucher_type, voucher_no, is_repost from `tab{doctype}` where voucher_type = '%s' and voucher_no = '%s'\"\"\" % (\n            self.voucher_type, self.voucher_no)\n        rows = frappe.db.sql(query)\n        if rows:\n            references_map = {}\n            for row in rows:\n                references_map.setdefault(row[1], {}).setdefault(row[2], []).append(row)\n            for parent, parenttype in references_map:\n                parent_doc = frappe.get_doc(parenttype, parent)\n                if parent_doc.doctype == \"Repost Voucher\":\n                    references_map[parent][parenttype] = [\n                        reference for reference in references_map[parent][parenttype] if not reference[5]]\n                    parent_doc.repost_vouchers = references_map[parent][parenttype]\n                else:\n                    references_map[parent][parenttype] = [\n                        reference for reference in references_map[parent][parenttype] if not reference[5]]\n                    parent_doc.vouchers = references_map[parent][parenttype]\n                parent_doc.ignore_validate_links = True\n                parent_doc.save()\n\n", "CodeBleu_score": 27.897055500611334}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    self.auth", "CodeBleu_score": 2.4768518518518516}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    self.auth", "CodeBleu_score": 2.4768518518518516}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    transactions", "CodeBleu_score": 2.5108877332772117}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t\n    try:\n        bank = Bank.get_bank(token)\n        if bank:\n            bank.update_access_token(response)\n            bank.save()\n        else:\n            bank = Bank.create_bank(token, response)\n            bank.save()\n    except Exception as e:\n        frappe.log_error(str(e), \"Error adding institution\")\n\n", "CodeBleu_score": 25.225794641435588}, {"code": "def add_institution(token, response)\n\t\n    try:\n        bank = frappe.get_doc(\"Bank\", response[\"institution_id\"])\n        bank.name = response[\"institution_name\"]\n        bank.logo = response[\"institution_logo\"]\n        bank.save()\n        plaid_connector = PlaidConnector(token)\n        access_token = plaid_connector.get_access_token(response[\"public_token\"])\n        bank.access_token = access_token\n        bank.save()\n    except Exception as e:\n        frappe.log_error(str(e), \"Error adding bank\")\n\n", "CodeBleu_score": 36.404493675961795}, {"code": "def add_institution(token, response)\n\t\n    bank_name = response[\"institution\"][\"name\"]\n    bank_id = response[\"institution\"][\"institution_id\"]\n    bank_logo = response[\"institution\"][\"logo\"]\n    bank_type = response[\"item\"][\"institution_type\"]\n    bank_url = response[\"item\"][\"institution_url\"]\n    bank_username = response[\"item\"][\"username\"]\n    bank_password = response[\"item\"][\"password\"]\n    bank_country = response[\"item\"][\"country\"]\n    bank_city = response[\"item\"][\"city\"]\n    bank_state = response[\"item\"][\"state\"]\n    bank_street = response[\"item\"][\"street\"]\n    bank_zip = response[\"item\"][\"postal_code\"]\n    bank_phone = response[\"item\"][\"phone\"]\n    bank_email = response[\"item\"][\"email\"]\n    bank_support_url = response[\"item\"][\"support_url\"]\n    bank_support_phone = response[\"item\"][\"support_phone\"]\n    bank_support_email = response[\"item\"][\"support_email\"]\n    bank_support_hours = response[\"item\"][\"support_hours\"]\n    bank_support_hours_display = response[\"item\"][\"support_hours_display\"]\n    bank_support_hours_display = response[\"item\"][\"support_hours_display\"]\n    bank_support_hours_display = response[\"item\"][\"support_hours_display\"]\n    bank_support_hours_display = response[\"item\"][\"support_hours_display\"]\n    bank_support_hours_display = response[\"item\"][\"support_hours_display\"]\n    bank_support_hours_display = response[\"item\"][\"support_hours_display\"]\n    bank_support_hours_display = response[\"item\"][\"support_hours_display\"]\n    bank_support_hours_display = response[\"item\"][\"support_hours_display\"]\n    bank_support_hours_display = response[\"item\"][\"support_hours_display\"]\n    bank_support_hours_display = response[\"item\"][\"support_hours_display\"]\n    bank_support_hours_display = response[\"item\"][\"support_hours_display\"]\n    bank_support_hours_display = response[\"item\"][\"support_hours_display\"]\n    bank_support_hours_display = response[\"item\"][\"support_hours_display\"]\n    bank_support_hours_display = response[\"item\"][\"support_hours_display\"]\n    bank_support_hours_display = response[\"item\"][\"support_hours_display\"]\n    bank_support_", "CodeBleu_score": 8.944688155638408}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t\n    last_integration_date = frappe.db.get_value(\"Bank Account\", bank_account, \"last_integration_date\")\n    last_integration_date = frappe.utils.formatdate(last_integration_date) if last_integration_date else None\n    start_date = last_integration_date\n    end_date = frappe.utils.formatdate(frappe.utils.add_months(last_integration_date, 1))\n\n    transactions = get_transactions(bank, bank_account, start_date, end_date)\n    for transaction in transactions:\n        try:\n            new_bank_transaction = new_bank_transaction(bank, bank_account, transaction)\n            if new_bank_transaction:\n                frappe.db.insert(new_bank_transaction)\n        except Exception as e:\n            frappe.log_error(e)\n\n    if transactions:\n        frappe.db.set_value(\"Bank Account\", bank_account, \"last_integration_date\", transactions[-1][\"date\"])\n\n", "CodeBleu_score": 30.910600395820442}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    last_integration_date = bank_account.last_integration_date\n    start_date = last_integration_date or today()\n    end_date = today()\n    transactions = get_transactions(bank, bank_account, start_date, end_date)\n    if transactions:\n        new_bank_transactions = []\n        for transaction in transactions:\n            if transaction.value_date <= last_integration_date:\n                break\n            try:\n                new_bank_transaction = new_bank_transaction(bank, bank_account, transaction)\n                if new_bank_transaction:\n                    new_bank_transactions.append(new_bank_transaction)\n            except Exception:\n                frappe.log_error(frappe.get_traceback())\n        if new_bank_transactions:\n            frappe.db.begin()\n            try:\n                frappe.db.set_value(\"Bank Account\", bank_account.name, \"last_integration_date\", transactions[-1].value_date)\n                frappe.db.commit()\n                frappe.db.set_value(\"Bank\", bank.name, \"last_integration_date\", transactions[-1].value_date)\n                frappe.db.commit()\n                frappe.db.insert_batch(new_bank_transactions)\n                frappe.db.commit()\n                frappe.msgprint(_(\"{0} new transactions added\").format(len(new_bank_transactions)))\n            except Exception:\n                frappe.db.rollback()\n                frappe.log_error(frappe.get_traceback())\n\n", "CodeBleu_score": 30.098947047819667}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    start_date = get_start_date(bank, bank_account)\n    end_date = get_end_date(bank, bank_account)\n    transactions = get_transactions(bank, bank_account, start_date, end_date)\n    for transaction in transactions:\n        try:\n            process_transaction(bank, bank_account, transaction)\n        except Exception as e:\n            frappe.log_error(frappe.get_traceback(), \"Syncing transactions\")\n    update_last_integration_date(bank, bank_account, transactions)\n\n", "CodeBleu_score": 17.247013304150002}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t\n    query_uri = self._build_query_uri(entity)\n    total_count = self._get_total_count(query_uri)\n    self._log_info(entity, 'total count', total_count)\n    batch_count = self._get_batch_count(total_count)\n    self._log_info(entity, 'batch count', batch_count)\n    for batch in range(batch_count):\n        self._log_info(entity, 'batch', batch)\n        entries = self._get_entries(query_uri, batch)\n        self._save_entries(entries, entity)\n\n", "CodeBleu_score": 18.247168203897832}, {"code": "def _migrate_entries(self, entity)\n\t\n    self._log_info", "CodeBleu_score": 0.5753968253968257}, {"code": "def _migrate_entries(self, entity)\n\t\n    self._log_info\n    self._get_query_uri\n    self._log_info\n    self._get_total_count\n    self._log_info\n    self._get_batch_size\n    self._log_info\n    self._get_response\n    self._log_info\n    self._get_response_json\n    self._get\n    entries.extend\n    self._save_entries\n    self._log_error\n    self._preprocess_entries\n    format\n    range\n\n", "CodeBleu_score": 5.28806660439554}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\t\n    if invoice.type == 'out_invoice':\n        invoice.quickbooks_id = self.quickbooks_id\n        invoice.save()\n        self.quickbooks_id = invoice.quickbooks_id\n        self.save()\n        if self.linked_transactions:\n            for transaction in self.linked_transactions:\n                if transaction.type == 'StatementCharge':\n                    self._save_invoice_as_journal_entry()\n                    break\n                elif transaction.type == 'ReimburseCharge':\n                    self._save_invoice_as_journal_entry()\n                    break\n        else:\n            self._save_sales_invoice()\n    elif invoice.type == 'out_refund':\n        invoice.quickbooks_id = self.quickbooks_id\n        invoice.save()\n        self.quickbooks_id = invoice.quickbooks_id\n        self.save()\n        self._save_sales_invoice()\n\n", "CodeBleu_score": 22.18488904718247}, {"code": "def _save_invoice(self, invoice)\n\t\n    if invoice.type == 'out_invoice':\n        invoice.quick_id = self.quick_id_generator(invoice.id,'sales_invoice')\n        invoice.save()\n        if invoice.linked_transactions:\n            self._save_invoice_as_journal_entry(invoice)\n        else:\n            self._save_sales_invoice(invoice)\n    elif invoice.type == 'out_refund':\n        invoice.quick_id = self.quick_id_generator(invoice.id,'sales_invoice')\n        invoice.save()\n        self._save_sales_invoice(invoice)\n    elif invoice.type == 'out_receipt':\n        invoice.quick_id = self.quick_id_generator(invoice.id,'sales_invoice')\n        invoice.save()\n        self._save_sales_invoice(invoice)\n    else:\n        invoice.quick_id = self.quick_id_generator(invoice.id,'sales_invoice')\n        invoice.save()\n        self._save_sales_invoice(invoice)\n\n", "CodeBleu_score": 29.311338957464944}, {"code": "def _save_invoice(self, invoice)\n\t\n    if invoice.type == 'out_invoice':\n        self.env.cr.execute('SELECT COUNT(*) FROM account_invoice WHERE type = %s AND journal_id = %s AND number = %s AND partner_id = %s AND state = %s AND company_id = %s', (invoice.type, invoice.journal_id.id, invoice.number, invoice.partner_id.id, invoice.state, invoice.company_id.id))\n        if self.env.cr.fetchone()[0] == 0:\n            invoice.action_move_create()\n            invoice.action_post()\n            self.env.cr.execute('SELECT COUNT(*) FROM account_invoice WHERE type = %s AND journal_id = %s AND number = %s AND partner_id = %s AND state = %s AND company_id = %s', (invoice.type, invoice.journal_id.id, invoice.number, invoice.partner_id.id, invoice.state, invoice.company_id.id))\n            if self.env.cr.fetchone()[0] == 1:\n                self._save_sales_invoice(invoice)\n            else:\n                self._save_invoice_as_journal_entry(invoice)\n        else:\n            invoice.action_post()\n    elif invoice.type == 'out_refund':\n        self.env.cr.execute('SELECT COUNT(*) FROM account_invoice WHERE type = %s AND journal_id = %s AND number = %s AND partner_id = %s AND state = %s AND company_id = %s', (invoice.type, invoice.journal_id.id, invoice.number, invoice.partner_id.id, invoice.state, invoice.company_id.id))\n        if self.env.cr.fetchone()[0] == 0:\n            invoice.action_move_create()\n            invoice.action_post()\n            self.env.cr.execute('SELECT COUNT(*) FROM account_invoice WHERE type = %s AND journal_id = %s AND number = %s AND partner_id = %s AND state = %s AND company_id = %s', (invoice.type, invoice.journal_id.id, invoice.number, invoice.partner_id.id, invoice.state, invoice.company_id.id))\n            if self.env.cr.", "CodeBleu_score": 29.14970577307836}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    schedule_list.append(start_date)\n    schedule_list.append(end_date)\n    interval = (end_date - start_date).days / no_of_visit\n    for i in range(no_of_visit - 1):\n        schedule_list.append(schedule_list[i] + timedelta(days=interval))\n    self.validate_schedule_date_for_holiday_list(schedule_list, sales_person)\n    return schedule_list\n\n", "CodeBleu_score": 16.92455158458773}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    interval = (end_date - start_date).days / (no_of_visit - 1)\n    for i in range(no_of_visit):\n        schedule_list.append(start_date + timedelta(days=i * interval))\n    self.validate_schedule_date_for_holiday_list(schedule_list)\n    return schedule_list\n\n", "CodeBleu_score": 17.01438311312233}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    schedule_list.append(start_date)\n    if no_of_visit > 1:\n        interval = (end_date - start_date).days / (no_of_visit - 1)\n    else:\n        interval = 0\n    for i in range(no_of_visit - 1):\n        schedule_list.append(add_days(schedule_list[i], int(interval)))\n    schedule_list = self.validate_schedule_date_for_holiday_list(schedule_list, sales_person)\n    return schedule_list\n\n", "CodeBleu_score": 30.30736824110729}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\t        $method = request()->getMethod();\n//        $url = route('bulk-action', ['handle' => $handle]);\n//        $data = [\n//            'title' => $title,\n//            'path' => $path,\n//            'handle' => $handle,\n//           'selected' => $data['selected']?? $this->getSelectedInput(request()),\n//            'html' => view($view, $data)->render(),\n//        ];\n//        return response()->json([\n//           'status' => true,\n//           'message' => 'Bulk action executed successfully.',\n//            'data' => $data,\n//        ]);\n    }", "CodeBleu_score": 9.577621873088134}, {"code": "<?\n   public function response($view, $data = []){\n\t        $method = request()->method();\n//        $url = route('bulkaction', [\n//            'handle' => $data['handle'],\n//           'method' => $method,\n//        ]);\n//        $data = [\n//            'title' => $this->findTranslation($data['title']),\n//            'path' => $data['path'],\n//            'handle' => $data['handle'],\n//           'selected' => $this->getSelectedInput(request()),\n//            'html' => view($view, $data)->render(),\n//        ];\n//        return response()->json([\n//           'success' => true,\n//           'message' => $this->findTranslation('bulkaction.success'),\n//            'data' => $data,\n//        ]);\n        return response()->json([\n           'success' => true,\n           'message' => $this->findTranslation('bulkaction.success'),\n            'data' => [\n                'title' => $this->findTranslation($data['title']),\n                'path' => $data['path'],\n                'handle' => $data['handle'],\n               'selected' => $this->getSelectedInput(request()),\n                'html' => view($view, $data)->render(),\n            ],\n        ]);\n    }", "CodeBleu_score": 39.21232036145065}, {"code": "<?\n   public function response($view, $data = []){\n\turl = route('bulk-action', [\n            'handle' => $handle,\n            'action' => $action,\n        ]);\n\n$data = [\n            'url' => $url,\n            'handle' => $handle,\n           'selected' => $data['selected']?? $this->getSelectedInput(request()),\n            'html' => view($view, $data)->render(),\n        ];\n\nreturn response()->json([\n           'success' => true,\n           'message' => 'Bulk action completed successfully.',\n            'data' => $data,\n        ]);\n    }", "CodeBleu_score": 49.01694342483152}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t\t$contacts = $this->getSelectedRecords($request);\n\t$this->dispatch(new DeleteContacts($contacts));\n\tif ($this->hasErrors()) {\n\t\tflash($this->getErrors())->error();\n\t} else {\n\t\tflash('Contacts deleted successfully')->success();\n\t}\n\t$this->redirect('contacts');\n}", "CodeBleu_score": 41.21052668201284}, {"code": "<?\npublic function deleteContacts($request){\n\t\t$contacts = $this->getSelectedRecords($request);\n\tforeach ($contacts as $contact) {\n\t\ttry {\n\t\t\t$contact->delete();\n\t\t} catch (Exception $e) {\n\t\t\tflash($e->getMessage())->error();\n\t\t}\n\t}\n\tflash('Contacts deleted')->success();\n\t$this->dispatch($request->getReferer());\n}", "CodeBleu_score": 52.92127924376834}, {"code": "<?\npublic function deleteContacts($request){\n\t\t$contacts = $this->getSelectedRecords($request);\n\tforeach ($contacts as $contact) {\n\t\ttry {\n\t\t\t$this->dispatch($contact, 'delete');\n\t\t} catch (Exception $e) {\n\t\t\tflash($e->getMessage())->error();\n\t\t}\n\t}\n\tflash('The selected contacts have been deleted')->success();\n\treturn $this->redirect('contacts');\n}", "CodeBleu_score": 51.75393009500071}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t\ttry {\n\t\t$transactions = $this->getSelectedRecords($request);\n\t\tforeach ($transactions as $transaction) {\n\t\t\t$this->dispatch(new DeleteTransaction($transaction));\n\t\t}\n\t\tflash('Transactions deleted successfully')->success();\n\t} catch (Exception $e) {\n\t\tflash($e->getMessage())->error();\n\t}\n}", "CodeBleu_score": 56.46236877983204}, {"code": "<?\npublic function deleteTransactions($request){\n\t\t$transactions = $this->getSelectedRecords($request);\n\tforeach ($transactions as $transaction) {\n\t\ttry {\n\t\t\t$this->dispatch(new DeleteTransactionJob($transaction));\n\t\t} catch (Exception $e) {\n\t\t\tflash($e->getMessage())->error();\n\t\t}\n\t}\n}", "CodeBleu_score": 55.70998411173209}, {"code": "<?\npublic function deleteTransactions($request){\n\t\t$transactions = $this->getSelectedRecords($request);\n\tforeach ($transactions as $transaction) {\n\t\ttry {\n\t\t\t$this->dispatch(new DeleteTransactionJob($transaction));\n\t\t} catch (Exception $e) {\n\t\t\tflash($e->getMessage())->error();\n\t\t}\n\t}\n\tflash('Transactions deleted successfully')->success();\n}", "CodeBleu_score": 57.08992245467128}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\t\tif (class_exists($this->request) && is_a($this->request, FormRequest::class)) {\n\t\t$request = $this->request;\n\t\t$this->request = new $request;\n\t} else {\n\t\t$this->request = new FormRequest;\n\t}\n\n\t$this->request->initialize($this->route()->parameters());\n\n\t$this->request->prepareForValidation();\n\n\t$validator->validate();\n\n\tif ($validator->failed()) {\n\t\t$this->request->withErrors($validator);\n\n\t\tthrow new ValidationException($validator);\n\t}\n}", "CodeBleu_score": 25.80393836284611}, {"code": "<?\npublic function withValidator($validator){\n\t\t$request = $this->initialize();\n\t$validator->setData($request->all());\n\t$validator->setRules($this->prepareRules($request));\n\n\ttry {\n\t\t$validator->validate();\n\t} catch (ValidatorException $e) {\n\t\t$this->addValidatorErrors($e->validator);\n\t\tthrow $e;\n\t}\n}", "CodeBleu_score": 17.18892533119935}, {"code": "<?\npublic function withValidator($validator){\n\t\tif (! $this->is(FormRequest::class)) {\n\t\treturn;\n\t}\n\n\t$this->initialize($this->route());\n\n\t$this->prepareForValidation();\n\n\ttry {\n\t\t$validator->validate();\n\t} catch (ValidationException $e) {\n\t\t$this->failedValidation($validator);\n\n\t\tthrow $e;\n\t}\n}", "CodeBleu_score": 19.158080268985653}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\tif (is_a($this, ShouldUpdate::class)) {\n\t\tif (is_a($arguments[0], Model::class)) {\n\t\t\t$this->setModel($arguments[0]);\n\t\t}\n\n\t\tif (is_a($arguments[1], Request::class)) {\n\t\t\t$this->setRequestInstance($arguments[1]);\n\t\t}\n\t}\n}", "CodeBleu_score": 22.210519590999855}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\t$model = $arguments[0]?? null;\n\t$request = $arguments[1]?? null;\n\tif ($model instanceof ShouldUpdate && $request instanceof Request) {\n\t\t$this->setModel($model);\n\t\t$this->setRequest($request);\n\t}\n}", "CodeBleu_score": 29.384898237820025}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\tif (is_a($this->model, ShouldUpdate::class)) {\n\t\tif (is_a($arguments[0], Model::class)) {\n\t\t\t$this->model = $arguments[0];\n\t\t}\n\t\tif (is_a($arguments[1], Request::class)) {\n\t\t\t$this->request = $arguments[1];\n\t\t}\n\t}\n}", "CodeBleu_score": 39.24643484130807}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t\t$request = app('request');\n\t$query->usingSearchString();\n\t$query->sortable($sort);\n\tif ($request->expectsJson() &&!$request->is('api/*')) {\n\t\treturn $query->get();\n\t}\n\treturn $query->paginate();\n}", "CodeBleu_score": 30.965845608074904}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t $request = app('request');\n $query->usingSearchString()->sortable($sort);\n if ($request->expectsJson() &&!$request->isNotApi()) {\n return $query->get();\n }\n return $query->paginate($request->get('limit', config('pagination.limit')));\n }", "CodeBleu_score": 35.366671854521556}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\tif ($this->isNotApi()) {\nif ($this->request->expectsJson()) {\nreturn $query->get(); } return $query->paginate($this->request->get('limit', $this->limit)); } return $query->sortable($sort)->search($this->usingSearchString())->paginate($this->request->get('limit', $this->limit));\n}", "CodeBleu_score": 31.890330628638218}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$openAmount = 0;\n\t$overdueAmount = 0;\n\t$totalAmount = 0;\n\t$totalPaidAmount = 0;\n\t$totalOverdueAmount = 0;\n\t$totalOpenAmount = 0;\n\t$totalPaid = 0;\n\t$totalOverdue = 0;\n\t$totalOpen = 0;\n\n\tif ($model->status == 'paid') {\n\t\t$openAmount = 0;\n\t\t$overdueAmount = 0;\n\t} else {\n\t\t$totalAmount = $model->amount;\n\t\t$totalPaidAmount = $model->getAmountPaid();\n\t\t$totalOverdueAmount = $model->getAmountOverdue();\n\t\t$totalOpenAmount = $model->getAmountOpen();\n\t\t$totalPaid = $model->getAmountPaid();\n\t\t$totalOverdue = $model->getAmountOverdue();\n\t\t$totalOpen = $model->getAmountOpen();\n\n\t\tif ($model->status == 'partial') {\n\t\t\t$totalPaidAmount = $model->getAmountPaid();\n\t\t\t$totalPaid = $model->getAmountPaid();\n\t\t\t$totalOverdueAmount = $model->getAmountOverdue();\n\t\t\t$totalOverdue = $model->getAmountOverdue();\n\t\t\t$totalOpenAmount = $model->getAmountOpen();\n\t\t\t$totalOpen = $model->getAmountOpen();\n\t\t}\n\n\t\tif ($model->status == 'partial') {\n\t\t\t$openAmount = $totalAmount - $totalPaidAmount;\n\t\t\t$overdueAmount = $totalOverdueAmount;\n\t\t} else {\n\t\t\t$openAmount = $totalAmount - $totalPaidAmount;\n\t\t\t$overdueAmount = $totalOverdueAmount;\n\t\t}\n\t}\n\n\treturn [\n\t\t'openAmount' => $openAmount,\n\t\t'overdueAmount' => $overdueAmount,\n\t\t'totalAmount' => $totalAmount,\n\t\t'totalPaidAmount' => $totalPaidAmount,\n\t\t'totalOverdueAmount' => $totalOverdueAmount,\n\t\t'totalOpenAmount' => $totalOpenAmount,\n\t\t'totalPaid' => $totalPaid,\n\t\t'totalOverdue' => $totalOverdue,\n\t\t'totalOpen' => $totalOpen,", "CodeBleu_score": 35.57409423829599}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$openAmount = 0;\n\t$overdueAmount = 0;\n\t$status = $model->status;\n\tif ($status == 'paid') {\n\t\treturn ['openAmount' => 0, 'overdueAmount' => 0];\n\t} elseif ($status == 'partial') {\n\t\t$transactions = $model->transactions;\n\t\tforeach ($transactions as $transaction) {\n\t\t\t$openAmount += $transaction->amount;\n\t\t}\n\t\t$dueDate = $model->due_date;\n\t\tif ($dueDate) {\n\t\t\t$now = Carbon::now();\n\t\t\tif ($now->gt($dueDate)) {\n\t\t\t\t$overdueAmount = $openAmount;\n\t\t\t} else {\n\t\t\t\t$openAmount = $openAmount;\n\t\t\t}\n\t\t}\n\t}\n\treturn ['openAmount' => $openAmount, 'overdueAmount' => $overdueAmount];\n}", "CodeBleu_score": 36.282703101937756}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$openAmount = 0;\n\t$overdueAmount = 0;\n\n\tif ($model->status == 'paid') {\n\t\treturn ['open' => 0, 'overdue' => 0];\n\t}\n\n\tif ($model->status == 'partial') {\n\t\t$transactions = $model->transactions()->where('status', 'paid')->get();\n\t\t$openAmount = $transactions->sum('amount');\n\t}\n\n\t$overdueAmount = $model->getOverdueAmount();\n\n\treturn ['open' => $openAmount, 'overdue' => $overdueAmount];\n}", "CodeBleu_score": 38.786356361701976}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t// If the page is not set, we will use the current page instance value as the page\n\t// number. Otherwise, we'll use the page that is actually requested, which might\n\t// be for an adjacent page.\n\tif (is_null($page)) {\n\t\t$page = Paginator::resolveCurrentPage($pageName);\n\t}\n\n\t// If the page is not valid we will set the page to 1 as a convenience for\n\t// the developer then return back to the current page. We'll need to check if\n\t// the developer overrode any of the page name variables that are reserved\n\t// here which could cause us to have invalid page information.\n\tif (Paginator::validatePage($page, $this->toBase()->getCountForPagination())) {\n\t\treturn $this->toBase()->get($perPage, $columns, $pageName, $page);\n\t}\n\n\treturn $this->toBase()->get($perPage, $columns, $pageName, 1);\n}", "CodeBleu_score": 34.51895233065133}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t$page = $page?: Paginator::resolveCurrentPage($pageName);\n\n\t$perPage = $perPage?: $this->model->getPerPage();\n\n\t$this->setPageName($pageName, $page);\n\n\t$total = $this->getCountForPagination($columns);\n\n\t$results = $this->forPage($page, $perPage)->get($columns);\n\n\treturn new LengthAwarePaginator($results, $total, $perPage, $page, [\n\t\t'path' => Paginator::resolveCurrentPath(),\n\t\t'pageName' => $pageName,\n\t]);\n}", "CodeBleu_score": 65.53703066644452}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t$perPage = $perPage?: $this->model->getPerPage();\n\n\t$this->applyScopes();\n\n\t$total = $this->getCountForPagination($columns);\n\n\t$paginator = new LengthAwarePaginator(\n\t\t$this->forPage($page, $perPage)->get($columns),\n\t\t$total,\n\t\t$perPage,\n\t\t$page?: Paginator::resolveCurrentPage(),\n\t\t[\n\t\t\t'path' => Paginator::resolveCurrentPath(),\n\t\t\t'pageName' => $pageName,\n\t\t]\n\t);\n\n\t$paginator->setCollection($this->model->newCollection($paginator->items()));\n\n\treturn $paginator;\n}", "CodeBleu_score": 61.26921270034757}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t$reconciliations = Reconciliation::whereIn('id', $request->reconciliations)->get();\n\\DB::transaction(function () use ($reconciliations) {\nforeach ($reconciliations as $reconciliation) {\n$reconciliation->reconcile();\n$reconciliation->save();\n}\n});\n}", "CodeBleu_score": 32.13271510642497}, {"code": "<?\npublic function reconcile($request){\n\t$reconciliations = Reconciliation::where('account_id', $request->account_id)->whereBetween('started_at', [$request->start_date, $request->end_date])->get();\n$reconciliations->each\n$this->reconcileReconciliation\n$reconciliation->save\n$reconciliation->transactions->each\n$transaction->reconcile\n$transaction->save\n}", "CodeBleu_score": 28.398574319475227}, {"code": "<?\npublic function reconcile($request){\n\t$reconciliations = Reconciliation::whereIn('id', $request->reconciliations)->get();\n\\DB::transaction(function () use ($reconciliations) {\n$reconciliations->each\n$this->getSelectedRecords\n$reconciliation->status = Reconciliation::STATUS_RECONCILED;\n$reconciliation->save\nTransaction::where\nTransaction::where('account_id', $reconciliation->account_id)\n                    ->isNotReconciled()->whereBetween\n\\DB::transaction\n$item->save\n});\n}", "CodeBleu_score": 34.588562721896146}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t$invitations = UserInvitation::where('user_id', $this->user->id)->get();\nforeach ($invitations as $invitation) {\n$invitation->delete();\n}\n$token = Str::uuid();\n$invitation = UserInvitation::create([\n'user_id' => $this->user->id, 'token' => $token,\n]);\ntry {\n$this->dispatch(new NotifyUserInvitation($invitation));\n} catch (\\Exception $exception) {\nthrow new \\Exception(\"Failed to send invitation email: \". $exception->getMessage());\n}\nreturn $invitation; }", "CodeBleu_score": 44.53131661682931}, {"code": "<?\npublic function handle(): UserInvitation{\n\t$invitations = UserInvitation::where('user_id', $this->user->id)->get();\nforeach ($invitations as $invitation) {\n$invitation->delete();\n}\n$token = Str::uuid();\n$invitation = UserInvitation::create([\n'user_id' => $this->user->id, 'token' => $token,\n]);\ntry {\n$this->dispatch(new SendInvitationNotification($this->user, $token));\n} catch (Exception $e) {\nthrow new Exception('Failed to send invitation notification: '. $e->getMessage());\n}\nreturn $invitation; }", "CodeBleu_score": 46.52237219441077}, {"code": "<?\npublic function handle(): UserInvitation{\n\t$invitations = UserInvitation::where('user_id', $this->user->id)->get();\nforeach ($invitations as $invitation) {\n$invitation->delete();\n}\n$invitation = UserInvitation::create([\n'user_id' => $this->user->id, 'token' => Str::uuid(), ]);$this->dispatch(new NotifyUserInvitation($invitation->token)); return $invitation; }", "CodeBleu_score": 37.976278301304845}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\t\tif ($this->model->isReconciled()) {\n\t\tthrow new Exception(\"This transaction is already reconciled\");\n\t}\n\n\tif ($this->model->isTransferTransaction()) {\n\t\tthrow new UnauthorizedException(\"Unauthorized\");\n\t}\n}", "CodeBleu_score": 29.41848438480138}, {"code": "<?\npublic function authorize(): void{\n\t$this->model->isReconciled", "CodeBleu_score": 5.834205838897986}, {"code": "<?\npublic function authorize(): void{\n\tif ($this->model->isReconciled()) {\nthrow new \\Exception('This transaction has already been reconciled');\n}\nif ($this->model->isTransferTransaction()) {\nthrow new \\Exception('Unauthorized');\n}\n}", "CodeBleu_score": 43.00203356559046}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t\tif (tableName.equals(\"users\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"roles\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"permissions\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"roles_permissions\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"user_roles\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"tenant_users\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"tenant_roles\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"tenant_permissions\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"tenant_roles_permissions\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"tenant_user_roles\")) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 17.559922630945906}, {"code": "public boolean doTableFilter(String tableName){\n\t\tif (getTenantIdByToken()!= 0) {\n\t\t// The tenant ID is not zero, so we can filter access to certain tables.\n\t\tswitch (tableName) {\n\t\t\tcase \"users\":\n\t\t\t\treturn true;\n\t\t\tcase \"user_roles\":\n\t\t\t\treturn true;\n\t\t\tcase \"roles\":\n\t\t\t\treturn true;\n\t\t\tcase \"role_permissions\":\n\t\t\t\treturn true;\n\t\t\tcase \"permissions\":\n\t\t\t\treturn true;\n\t\t\tcase \"user_permissions\":\n\t\t\t\treturn true;\n\t\t\tcase \"user_tenants\":\n\t\t\t\treturn true;\n\t\t\tcase \"tenants\":\n\t\t\t\treturn true;\n\t\t\tcase \"tenant_roles\":\n\t\t\t\treturn true;\n\t\t\tcase \"tenant_permissions\":\n\t\t\t\treturn true;\n\t\t\tcase \"tenant_users\":\n\t\t\t\treturn true;\n\t\t\tcase \"tenant_tenants\":\n\t\t\t\treturn true;\n\t\t\tcase \"tenant_roles\":\n\t\t\t\treturn true;\n\t\t\tcase \"tenant_permissions\":\n\t\t\t\treturn true;\n\t\t\tcase \"tenant_users\":\n\t\t\t\treturn true;\n\t\t\tcase \"tenant_tenants\":\n\t\t\t\treturn true;\n\t\t\tcase \"tenant_roles\":\n\t\t\t\treturn true;\n\t\t\tcase \"tenant_permissions\":\n\t\t\t\treturn true;\n\t\t\tcase \"tenant_users\":\n\t\t\t\treturn true;\n\t\t\tcase \"tenant_tenants\":\n\t\t\t\treturn true;\n\t\t\tcase \"tenant_roles\":\n\t\t\t\treturn true;\n\t\t\tcase \"tenant_permissions\":\n\t\t\t\treturn true;\n\t\t\tcase \"tenant_users\":\n\t\t\t\treturn true;\n\t\t\tcase \"tenant_tenants\":\n\t\t\t\treturn true;\n\t\t\tcase \"tenant_roles\":\n\t\t\t\treturn true;\n\t\t\tcase \"tenant_permissions\":\n\t\t\t\treturn true;\n\t\t\tcase \"tenant_users\":\n\t\t\t\treturn true;\n\t\t\tcase \"tenant_tenants\":\n\t\t\t\treturn true;\n\t\t\tcase \"tenant_roles\":\n\t\t\t\treturn true;\n\t\t\tcase \"tenant_permissions\":\n\t\t\t\treturn true;\n\t\t\tcase \"tenant_users\":\n\t\t\t\treturn true;\n\t\t\tcase \"tenant_tenants\":\n\t\t\t\treturn true;\n\t\t\tcase \"tenant_roles\":\n\t\t\t\treturn true;\n\t\t\tcase \"tenant_permissions\":\n\t\t\t\treturn true;\n\t\t\tcase \"tenant_users\":\n\t\t\t\treturn true;\n\t\t\tcase \"tenant_tenants\":\n\t\t\t\treturn true;\n\t\t\tcase \"", "CodeBleu_score": 8.032397753888349}, {"code": "public boolean doTableFilter(String tableName){\n\t\tif (tenantId == 0) {\n\t\treturn false;\n\t}\n\treturn (tableName.equals(\"user\") || tableName.equals(\"user_role\") || tableName.equals(\"role\") || tableName.equals(\"tenant\"));\n}", "CodeBleu_score": 12.095266714122834}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 63.20374477183781}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setSqlSessionFactoryBeanName(sqlSessionFactoryBeanName);\n\tmapperScannerConfigurer.setBasePackage(basePackage);\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 54.67074593464576}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 74.32520802003512}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t\tString json = \"\";\n\ttry {\n\t\tList<Account> accounts = accountService.findAll();\n\t\tjson = new Gson().toJson(accounts);\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage());\n\t\tjson = new Gson().toJson(new FailureMessage(\"Error retrieving accounts\"));\n\t}\n\treturn json;\n}", "CodeBleu_score": 24.657905341548496}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t\ttry {\n\t\tList<Account> accounts = accountService.findAll();\n\t\tList<Map<String, Object>> accountList = new ArrayList<>();\n\t\tfor (Account account : accounts) {\n\t\t\tMap<String, Object> accountMap = new HashMap<>();\n\t\t\taccountMap.put(\"id\", account.getId());\n\t\t\taccountMap.put(\"name\", account.getName());\n\t\t\taccountList.add(accountMap);\n\t\t}\n\t\treturn new Gson().toJson(accountList);\n\t} catch (Exception e) {\n\t\tlogger.error(\"An error occurred while retrieving account data: \" + e.getMessage());\n\t\treturn new Gson().toJson(new FailureMessage(\"An error occurred while retrieving account data: \" + e.getMessage()));\n\t}\n}", "CodeBleu_score": 43.23183730006173}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t\tList<Account> accounts = accountService.findAll();\n\tList<AccountDTO> accountDTOs = new ArrayList<>();\n\tfor (Account account : accounts) {\n\t\tAccountDTO accountDTO = new AccountDTO();\n\t\taccountDTO.setId(account.getId());\n\t\taccountDTO.setName(account.getName());\n\t\taccountDTOs.add(accountDTO);\n\t}\n\treturn new ObjectMapper().writeValueAsString(accountDTOs);\n}", "CodeBleu_score": 31.307633919863733}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tBaseResponseInfo response = new BaseResponseInfo();\ntry {\nList<AccountInfo> accountList = accountService.listWithBalance(name, serialNo, currentPage, pageSize);\nInteger totalCount = accountService.listWithBalanceCount(name, serialNo);\nresponse.setCode(HttpStatus.OK.value());\nresponse.setMessage(HttpStatus.OK.getReasonPhrase());\nresponse.setTotalCount(totalCount);\nresponse.setResponse(accountList);\n} catch (Exception e) {\nlogger.error(\"Error while fetching account list\", e);\nresponse.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\nresponse.setMessage(HttpStatus.INTERNAL_SERVER_ERROR.getReasonPhrase());\n}\nreturn response;\n}", "CodeBleu_score": 39.935161064376096}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t\nBaseResponseInfo response = new BaseResponseInfo();\n\ntry {\n\n// Construct the response object\nList<AccountInfo> accountList = new ArrayList<>();\n\n// Query the account service for the list of accounts\nAccountService accountService = new AccountService();\nList<Account> accounts = accountService.getAccountList(name, serialNo, currentPage, pageSize);\n\n// Populate the response object with the list of accounts and their balances\nfor (Account account : accounts) {\nAccountInfo accountInfo = new AccountInfo();\naccountInfo.setName(account.getName());\naccountInfo.setSerialNo(account.getSerialNo());\naccountInfo.setBalance(account.getBalance());\naccountList.add(accountInfo);\n}\n\n// Construct the response object\nresponse.setResponseCode(ResponseCode.SUCCESS.getCode());\nresponse.setResponseMessage(ResponseCode.SUCCESS.getMessage());\nresponse.setResult(accountList);\n\n} catch (Exception e) {\n\n// Log the error\nlogger.error(\"Error occurred while listing accounts with balances: \" + e.getMessage());\n\n// Set the response code and message\nresponse.setResponseCode(ResponseCode.ERROR.getCode());\nresponse.setResponseMessage(ResponseCode.ERROR.getMessage());\n\n}\n\nreturn response;\n}", "CodeBleu_score": 36.949912130222884}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t BaseResponseInfo response = new BaseResponseInfo();\n try {\n String token = request.getHeader(\"Authorization\");\n List<Account> accounts = accountService.listWithBalance(name, serialNo, token);\n Integer totalCount = accountService.listWithBalanceCount(name, serialNo, token);\n if (accounts!= null) {\n response.setCode(ResponseCode.SUCCESS.getCode());\n response.setMessage(ResponseCode.SUCCESS.getMessage());\n response.setData(accounts);\n response.setTotalCount(totalCount);\n } else {\n response.setCode(ResponseCode.FAILURE.getCode());\n response.setMessage(ResponseCode.FAILURE.getMessage());\n }\n } catch (Exception e) {\n LOGGER.error(\"listWithBalance failed\", e);\n response.setCode(ResponseCode.FAILURE.getCode());\n response.setMessage(ResponseCode.FAILURE.getMessage());\n }\n return response;\n }", "CodeBleu_score": 39.51896105822361}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tresponse.setCode(200);\n\t\tresponse.setData(accountService.getStatistics(name, serialNo));\n\t} catch (Exception e) {\n\t\tLOGGER.error(e.getMessage(), e);\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 35.41709104174207}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tStatisticsResponseInfo statisticsResponse = accountService.getStatistics(name, serialNo);\n\t\tresponse.setCode(200);\n\t\tresponse.setData(statisticsResponse);\n\t} catch (Exception e) {\n\t\tlog.error(\"Error occurred while retrieving statistics: \" + e.getMessage());\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(\"An error occurred while retrieving statistics.\");\n\t}\n\treturn response;\n}", "CodeBleu_score": 37.68648375051528}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tStatisticsInfo stats = accountService.getStatistics(name, serialNo);\n\t\tresponse.setCode(200);\n\t\tresponse.setStatistics(stats);\n\t} catch (Exception e) {\n\t\tlog.error(\"Error getting statistics\", e);\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(\"Error getting statistics\");\n\t}\n\treturn response;\n}", "CodeBleu_score": 38.83726132619706}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo response = new BaseResponseInfo();\n try {\n response = accountHeadService.getDetailByNumber(billNo);\n } catch (Exception e) {\n logger.error(\"Error while getting account head details by number\", e);\n response.setCode(500);\n response.setMessage(\"Error while getting account head details by number\");\n }\n return response;\n }", "CodeBleu_score": 30.527672746352568}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo response = new BaseResponseInfo();\n try {\n response.setStatus(HttpStatus.OK.value());\n response.setMessage(HttpStatus.OK.getReasonPhrase());\n response.setResponse(accountHeadService.getDetailByNumber(billNo));\n } catch (Exception e) {\n response.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());\n response.setMessage(HttpStatus.INTERNAL_SERVER_ERROR.getReasonPhrase());\n response.setResponse(e.getMessage());\n }\n return response;\n }", "CodeBleu_score": 32.11705836614775}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\tBaseResponseInfo response = new BaseResponseInfo();\ntry {\nBillDetails billDetails = accountHeadService.getBillDetails(billNo);\nresponse.setResponseCode(ResponseCode.SUCCESS.getCode());\nresponse.setResponseMessage(ResponseCode.SUCCESS.getMessage());\nresponse.setResponseObject(billDetails);\n} catch (Exception e) {\nlogger.error(\"Error while fetching bill details for bill number \" + billNo, e);\nresponse.setResponseCode(ResponseCode.INTERNAL_SERVER_ERROR.getCode());\nresponse.setResponseMessage(ResponseCode.INTERNAL_SERVER_ERROR.getMessage());\n}\nreturn response;\n}", "CodeBleu_score": 32.50616252103963}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tresponse.setCode(200);\n\t\tresponse.setData(depotService.findDepotByCurrentUser(request));\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage());\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 36.51225750101452}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tresponse.setResponseCode(200);\n\t\tresponse.setData(depotService.findDepotByCurrentUser(request));\n\t} catch (Exception e) {\n\t\tlogger.error(\"findDepotByCurrentUser\", e);\n\t\tresponse.setResponseCode(500);\n\t\tresponse.setErrorMessage(\"Error retrieving depot information\");\n\t}\n\treturn response;\n}", "CodeBleu_score": 34.09070363691447}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tresponse.setResponseCode(200);\n\t\tresponse.setData(depotService.findDepotByCurrentUser(request));\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error in findDepotByCurrentUser: \" + e.getMessage());\n\t\tresponse.setResponseCode(500);\n\t\tresponse.setErrorMessage(\"Error in findDepotByCurrentUser: \" + e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 34.9473599539556}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t\nJSONArray jsonArray = new JSONArray();\n\nString tenantId = getTenantIdByToken(request);\n\nList<RoleFunction> roleFunctionList = roleFunctionService.getRoleFunctionList(type, keyId);\n\nJSONObject json = new JSONObject();\n\nif (roleFunctionList.size() > 0) {\n\nfor (RoleFunction roleFunction : roleFunctionList) {\n\nif (!roleFunction.getFunction().getFunctionId().equals(\"system\")) {\n\njson.put(\"functionId\", roleFunction.getFunction().getFunctionId());\njson.put(\"functionName\", roleFunction.getFunction().getFunctionName());\njson.put(\"functionDesc\", roleFunction.getFunction().getFunctionDesc());\njson.put(\"functionType\", roleFunction.getFunction().getFunctionType());\njson.put(\"functionUrl\", roleFunction.getFunction().getFunctionUrl());\njson.put(\"functionIcon\", roleFunction.getFunction().getFunctionIcon());\njson.put(\"functionOrder\", roleFunction.getFunction().getFunctionOrder());\n\nif (tenantId.equals(roleFunction.getFunction().getTenantId())) {\n\njsonArray.add(json);\n\n}\n\n}\n\n}\n\n}\n\njson.put(\"roleFunctionList\", jsonArray);\n\njsonArray.add(json);\n\nreturn jsonArray;\n\n}", "CodeBleu_score": 30.784862153234606}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t\tJSONArray jsonArray = new JSONArray();\n\tString tenantId = getTenantIdByToken(request);\n\tif (tenantId == null) {\n\t\tthrow new Exception(\"Invalid token\");\n\t}\n\tList<RoleFunction> roleFunctions = roleFunctionService.findByTypeAndKeyId(type, keyId);\n\tJSONObject jsonObject = new JSONObject();\n\tList<RoleFunction> roleFunctionList = new ArrayList<>();\n\tif (roleFunctions!= null) {\n\t\troleFunctionList = roleFunctions.stream()\n\t\t\t\t.filter(roleFunction ->!\"\u7cfb\u7edf\u7ba1\u7406\".equals(roleFunction.getFunction().getName()))\n\t\t\t\t.collect(Collectors.toList());\n\t}\n\tjsonObject.put(\"roleFunctions\", roleFunctionList);\n\tjsonArray.add(jsonObject);\n\treturn jsonArray;\n}", "CodeBleu_score": 31.313225449686083}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t\tJSONArray jsonArray = new JSONArray();\n\tJSONObject jsonObject = new JSONObject();\n\tString tenantId = getTenantIdByToken(request);\n\tList<RoleFunction> roleFunctions = roleFunctionService.findRoleFunction(type, keyId);\n\tfor (RoleFunction roleFunction : roleFunctions) {\n\t\tif (!roleFunction.getFunction().getName().equals(\"\u7cfb\u7edf\u7ba1\u7406\") || tenantId.equals(\"admin\")) {\n\t\t\tjsonObject.put(roleFunction.getFunction().getName(), roleFunction.getFunction().getFunctionId());\n\t\t}\n\t}\n\tjsonArray.add(jsonObject);\n\treturn jsonArray;\n}", "CodeBleu_score": 24.207802866196307}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tPlatformConfigInfo platformConfigInfo = platformConfigService.getInfoByKey(platformKey);\n\t\tresponse.setCode(200);\n\t\tresponse.setData(platformConfigInfo);\n\t} catch (Exception e) {\n\t\tlogger.error(\"getInfoByKey\", e);\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 41.83257442527489}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\tresponse.setResponseCode(200);\n\ttry {\n\t\tPlatformConfigurationInfo platformConfigurationInfo = platformConfigService.getInfoByKey(platformKey);\n\t\tresponse.setData(platformConfigurationInfo);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error while retrieving platform configuration information for key \" + platformKey, e);\n\t\tresponse.setResponseCode(500);\n\t\tresponse.setErrorMessage(\"Error while retrieving platform configuration information for key \" + platformKey);\n\t}\n\treturn response;\n}", "CodeBleu_score": 33.18969202757626}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\tresponse.setCode(200);\n\tresponse.setMessage(\"Success\");\n\ttry {\n\t\tPlatformConfigInfo platformConfigInfo = platformConfigService.getInfoByKey(platformKey);\n\t\tresponse.setData(platformConfigInfo);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error retrieving platform configuration information: \" + e.getMessage());\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(\"Error retrieving platform configuration information\");\n\t}\n\treturn response;\n}", "CodeBleu_score": 36.24560470597503}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tresponse.setResponseCode(200);\n\t\tresponse.setResponseData(getSystemConfig());\n\t} catch (Exception e) {\n\t\tresponse.setResponseCode(500);\n\t\tresponse.setResponseMessage(e.getMessage());\n\t\tlog.error(\"Error retrieving current system configuration information\", e);\n\t}\n\treturn response;\n}", "CodeBleu_score": 28.319051047922095}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tresponse.setResponseCode(200);\n\t\tresponse.setResponseData(getSystemConfig());\n\t} catch (Exception e) {\n\t\tresponse.setResponseCode(500);\n\t\tresponse.setErrorMessage(e.getMessage());\n\t\tlog.error(\"Error retrieving system configuration information\", e);\n\t}\n\treturn response;\n}", "CodeBleu_score": 28.24984068456935}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\tresponse.setResponseCode(200);\n\tresponse.setResponseData(getSystemConfig());\n\treturn response;\n}", "CodeBleu_score": 16.895531811730326}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\ttry {\n\t\tString businessPath = getParameter(request, \"businessPath\");\n\t\tString file = getParameter(request, \"file\");\n\t\tString fileUploadType = getParameter(request, \"fileUploadType\");\n\t\tString fileId = getParameter(request, \"fileId\");\n\t\tif (isNotEmpty(businessPath) && isNotEmpty(file) && isNotEmpty(fileUploadType)) {\n\t\t\tif (fileUploadType.equals(\"local\")) {\n\t\t\t\tuploadLocal(businessPath, file, responseInfo);\n\t\t\t} else if (fileUploadType.equals(\"aliOss\")) {\n\t\t\t\tuploadAliOss(businessPath, file, responseInfo, fileId);\n\t\t\t}\n\t\t} else {\n\t\t\tresponseInfo.setResponseCode(ResponseCode.PARAM_ERROR);\n\t\t\tresponseInfo.setResponseMsg(\"businessPath, file, fileUploadType are required\");\n\t\t}\n\t} catch (Exception e) {\n\t\tresponseInfo.setResponseCode(ResponseCode.SERVER_ERROR);\n\t\tresponseInfo.setResponseMsg(\"Server Error\");\n\t\tlog.error(\"upload error\", e);\n\t}\n\treturn responseInfo;\n}", "CodeBleu_score": 28.14831714935972}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tBaseResponseInfo result = new BaseResponseInfo();\n\ttry {\n\t\tString businessPath = getParameter(request, \"businessPath\");\n\t\tif (isNotEmpty(businessPath)) {\n\t\t\tbusinessPath = businessPath.trim();\n\t\t\tif (isNotEmpty(businessPath)) {\n\t\t\t\tString fileName = getParameter(request, \"fileName\");\n\t\t\t\tif (isNotEmpty(fileName)) {\n\t\t\t\t\tfileName = fileName.trim();\n\t\t\t\t\tif (isNotEmpty(fileName)) {\n\t\t\t\t\t\tString fileType = getParameter(request, \"fileType\");\n\t\t\t\t\t\tif (isNotEmpty(fileType)) {\n\t\t\t\t\t\t\tfileType = fileType.trim();\n\t\t\t\t\t\t\tif (isNotEmpty(fileType)) {\n\t\t\t\t\t\t\t\tString file = request.getParameter(\"file\");\n\t\t\t\t\t\t\t\tif (isNotEmpty(file)) {\n\t\t\t\t\t\t\t\t\tfile = file.trim();\n\t\t\t\t\t\t\t\t\tif (isNotEmpty(file)) {\n\t\t\t\t\t\t\t\t\t\tString fileId = uploadLocal(businessPath, fileName, fileType, file);\n\t\t\t\t\t\t\t\t\t\tif (isNotEmpty(fileId)) {\n\t\t\t\t\t\t\t\t\t\t\tresult.setCode(BaseResponseInfo.CODE_SUCCESS);\n\t\t\t\t\t\t\t\t\t\t\tresult.setData(fileId);\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tresult.setCode(BaseResponseInfo.CODE_ERROR);\n\t\t\t\t\t\t\t\t\t\t\tresult.setMessage(BaseResponseInfo.MSG_UPLOAD_ERROR);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tresult.setCode(BaseResponseInfo.CODE_ERROR);\n\t\t\t\t\t\t\t\t\t\tresult.setMessage(BaseResponseInfo.MSG_UPLOAD_ERROR);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tresult.setCode(BaseResponseInfo.CODE_ERROR);\n\t\t\t\t\t\t\t\t\tresult.setMessage(BaseResponseInfo.MSG_UPLOAD_ERROR);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresult.setCode(BaseResponseInfo.CODE_ERROR);\n\t\t\t\t\t\t\t\tresult.setMessage(BaseResponseInfo.MSG_UPLOAD_ERROR);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.setCode(BaseResponseInfo.CODE_ERROR);\n\t\t\t\t\t\t\tresult.setMessage(BaseResponseInfo.MSG_UPLOAD_ERROR);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.setCode(BaseResponseInfo.CODE_ERROR);\n\t\t\t\t\t\tresult.setMessage(BaseResponseInfo.MSG_UPLOAD_ERROR);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tresult.setCode(BaseResponseInfo.CODE_ERROR);\n\t\t\t\t\tresult.setMessage(BaseResponseInfo.MSG_UPLOAD_ERROR);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresult.setCode(", "CodeBleu_score": 27.487983693433833}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\ttry {\n\t\tString businessPath = getBusinessPath(request);\n\t\tMultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n\t\tMultipartFile file = multipartRequest.getFile(\"file\");\n\t\tString fileName = file.getOriginalFilename();\n\t\tString uploadType = getParameter(request, \"uploadType\");\n\t\tif (\"local\".equals(uploadType)) {\n\t\t\tuploadLocal(businessPath, file);\n\t\t} else if (\"oss\".equals(uploadType)) {\n\t\t\tuploadAliOss(businessPath, file);\n\t\t}\n\t\tresponseInfo.setCode(ResponseCode.SUCCESS.getCode());\n\t\tresponseInfo.setMessage(\"\u6587\u4ef6\u4e0a\u4f20\u6210\u529f\");\n\t\tresponseInfo.setData(fileName);\n\t} catch (Exception e) {\n\t\tlogger.error(\"\u6587\u4ef6\u4e0a\u4f20\u5f02\u5e38\", e);\n\t\tresponseInfo.setCode(ResponseCode.FAIL.getCode());\n\t\tresponseInfo.setMessage(\"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\");\n\t}\n\treturn responseInfo;\n}", "CodeBleu_score": 37.700255769221}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t\n```\n", "CodeBleu_score": 4.816792905744858}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t\n//        String title = jsonObject.getString(\"title\");\n//        String head = jsonObject.getString(\"head\");\n//        String tip = jsonObject.getString(\"tip\");\n//        JSONArray data = jsonObject.getJSONArray(\"data\");\n        String title = \"test\";\n        String head = \"test\";\n        String tip = \"test\";\n        JSONArray data = null;\n        try {\n            data = jsonObject.getJSONArray(\"data\");\n        } catch (JSONException e) {\n            e.printStackTrace();\n        }\n        String fileName = \"test\";\n        try {\n            exportExcel(response, fileName, title, head, tip, data);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }", "CodeBleu_score": 39.82448604015845}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t\n//    try {\n//      String title = jsonObject.getString(\"title\");\n//      JSONArray head = jsonObject.getJSONArray(\"head\");\n//      JSONArray tip = jsonObject.getJSONArray(\"tip\");\n//      JSONArray data = jsonObject.getJSONArray(\"data\");\n//      String fileName = jsonObject.getString(\"fileName\");\n//      String sheetName = jsonObject.getString(\"sheetName\");\n//      String sheetTitle = jsonObject.getString(\"sheetTitle\");\n//      String sheetTip = jsonObject.getString(\"sheetTip\");\n//      String sheetData = jsonObject.getString(\"sheetData\");\n//      String sheetHead = jsonObject.getString(\"sheetHead\");\n//      String sheetTip = jsonObject.getString(\"sheetTip\");\n//      String sheetData = jsonObject.getString(\"sheetData\");\n//\n//      String[] headArray = new String[head.length()];\n//      String[] tipArray = new String[tip.length()];\n//      String[] dataArray = new String[data.length()];\n//\n//      for (int i = 0; i < head.length(); i++) {\n//        headArray[i] = head.getString(i);\n//      }\n//      for (int i = 0; i < tip.length(); i++) {\n//        tipArray[i] = tip.getString(i);\n//      }\n//      for (int i = 0; i < data.length(); i++) {\n//        dataArray[i] = data.getString(i);\n//      }\n//\n//      exportExcel(title, headArray, tipArray, dataArray, fileName, sheetName, sheetTitle, sheetTip, sheetData, sheetHead, sheetTip, sheetData);\n//    } catch (JSONException e) {\n//      e.printStackTrace();\n//    }\n  }", "CodeBleu_score": 4.842893009750053}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tAccount account = new Account();\n\taccount.setAccountNumber(obj.getString(\"accountNumber\"));\n\taccount.setAccountType(obj.getString(\"accountType\"));\n\taccount.setAccountTypeDescription(obj.getString(\"accountTypeDescription\"));\n\taccount.setAccountBalance(0.0);\n\taccount.setAccountStatus(obj.getString(\"accountStatus\"));\n\taccount.setAccountStatusDescription(obj.getString(\"accountStatusDescription\"));\n\taccount.setAccountOwner(obj.getString(\"accountOwner\"));\n\taccount.setAccountOwnerDescription(obj.getString(\"accountOwnerDescription\"));\n\taccount.setAccountDescription(obj.getString(\"accountDescription\"));\n\taccount.setAccountEnabled(obj.getString(\"accountEnabled\"));\n\taccount.setAccountEnabledDescription(obj.getString(\"accountEnabledDescription\"));\n\taccount.setAccountDefault(obj.getString(\"accountDefault\"));\n\taccount.setAccountDefaultDescription(obj.getString(\"accountDefaultDescription\"));\n\taccount.setAccountInitialAmount(0.0);\n\taccount.setAccountInitialAmountDescription(obj.getString(\"accountInitialAmountDescription\"));\n\taccount.setAccountInitialAmountEnabled(obj.getString(\"accountInitialAmountEnabled\"));\n\taccount.setAccountInitialAmountEnabledDescription(obj.getString(\"accountInitialAmountEnabledDescription\"));\n\taccount.setAccountInitialAmountValue(obj.getString(\"accountInitialAmountValue\"));\n\taccount.setAccountInitialAmountValueDescription(obj.getString(\"accountInitialAmountValueDescription\"));\n\taccount.setAccountInitialAmountValueEnabled(obj.getString(\"accountInitialAmountValueEnabled\"));\n\taccount.setAccountInitialAmountValueEnabledDescription(obj.getString(\"accountInitialAmountValueEnabledDescription\"));\n\taccount.setAccountInitialAmountValueDescription(obj.getString(\"accountInitialAmountValueDescription\"));\n\taccount.setAccountInitialAmountValueEnabled(obj.getString(\"accountInitialAmountValueEnabled\"));\n\taccount.setAccountInitialAmountValueEnabledDescription(obj.getString(\"accountInitialAmountValueEnabledDescription\"));\n\taccount.setAccountInitialAmountValue(obj.getString(\"accountInitialAmountValue\"));\n\taccount.setAccountInitialAmountValueDescription(obj.getString(\"accountInitialAmountValueDescription\"));\n\taccount.setAccountInitialAmountValueEnabled(obj.getString(\"accountInitialAmountValueEnabled\"));\n\taccount.setAccountInitialAmountValueEnabledDescription(obj.getString(\"accountInitialAmountValueEnabled", "CodeBleu_score": 15.073881600027006}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tAccount account = parseObject(obj);\n\taccount.setAccountNumber(getAccountByParam(account.getAccountNumber(), account.getAccountName()));\n\taccount.setInitialAmount(account.getInitialAmount() == null? 0 : account.getInitialAmount());\n\taccount.setDefault(getInitialAmount() == 0? true : getDefault());\n\taccount.setEnabled(true);\n\taccount.setCreatedDate(new Date());\n\taccount.setCreatedBy(request.getRemoteAddr());\n\taccount.setUpdatedDate(new Date());\n\taccount.setUpdatedBy(request.getRemoteAddr());\n\tint result = insert(account);\n\tinsertLog(request, account, result);\n\treturn result;\n}", "CodeBleu_score": 30.912328511331534}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tint result = 0;\n\ttry {\n\t\tAccount account = new Account();\n\t\taccount.setAccountType(obj.getString(\"accountType\"));\n\t\taccount.setAccountNumber(obj.getString(\"accountNumber\"));\n\t\taccount.setAccountHolder(obj.getString(\"accountHolder\"));\n\t\taccount.setAccountBalance(obj.getDouble(\"accountBalance\"));\n\t\taccount.setAccountDescription(obj.getString(\"accountDescription\"));\n\t\taccount.setAccountStatus(obj.getString(\"accountStatus\"));\n\t\taccount.setAccountDate(obj.getString(\"accountDate\"));\n\t\taccount.setAccountStatus(obj.getString(\"accountStatus\"));\n\t\taccount.setAccountDate(obj.getString(\"accountDate\"));\n\t\taccount.setAccountStatus(obj.getString(\"accountStatus\"));\n\t\taccount.setAccountDate(obj.getString(\"accountDate\"));\n\t\taccount.setAccountStatus(obj.getString(\"accountStatus\"));\n\t\taccount.setAccountDate(obj.getString(\"accountDate\"));\n\t\taccount.setAccountStatus(obj.getString(\"accountStatus\"));\n\t\taccount.setAccountDate(obj.getString(\"accountDate\"));\n\t\taccount.setAccountStatus(obj.getString(\"accountStatus\"));\n\t\taccount.setAccountDate(obj.getString(\"accountDate\"));\n\t\taccount.setAccountStatus(obj.getString(\"accountStatus\"));\n\t\taccount.setAccountDate(obj.getString(\"accountDate\"));\n\t\taccount.setAccountStatus(obj.getString(\"accountStatus\"));\n\t\taccount.setAccountDate(obj.getString(\"accountDate\"));\n\t\taccount.setAccountStatus(obj.getString(\"accountStatus\"));\n\t\taccount.setAccountDate(obj.getString(\"accountDate\"));\n\t\taccount.setAccountStatus(obj.getString(\"accountStatus\"));\n\t\taccount.setAccountDate(obj.getString(\"accountDate\"));\n\t\taccount.setAccountStatus(obj.getString(\"accountStatus\"));\n\t\taccount.setAccountDate(obj.getString(\"accountDate\"));\n\t\taccount.setAccountStatus(obj.getString(\"accountStatus\"));\n\t\taccount.setAccountDate(obj.getString(\"accountDate\"));\n\t\taccount.setAccountStatus(obj.getString(\"accountStatus\"));\n\t\taccount.setAccountDate(obj.getString(\"accountDate\"));\n\t\taccount.setAccountStatus(obj.getString(\"accountStatus\"));\n\t\taccount.setAccountDate(obj.getString(\"account", "CodeBleu_score": 15.576877110307743}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\treturn listWithBalanceCount(name, serialNo, null);\n}", "CodeBleu_score": 14.113795446619548}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\tLong count = null;\n\ttry {\n\t\tcount = (Long) context.mapReduce(\n\t\t\t\tnew Mapper() {\n\t\t\t\t\tpublic Object map(Object key, Object value) {\n\t\t\t\t\t\tAccount account = (Account) value;\n\t\t\t\t\t\tif (account.getName().equals(name) && account.getSerialNo().equals(serialNo)) {\n\t\t\t\t\t\t\treturn 1L;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn 0L;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tnew Reducer() {\n\t\t\t\t\tpublic Object reduce(Object key, Iterator values) {\n\t\t\t\t\t\tlong sum = 0;\n\t\t\t\t\t\twhile (values.hasNext()) {\n\t\t\t\t\t\t\tsum += (Long) values.next();\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn sum;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"accounts\",\n\t\t\t\t\"counts\",\n\t\t\t\t\"com.example.mapreduce.LongWritable\",\n\t\t\t\t\"com.example.mapreduce.LongWritable\");\n\t} catch (Exception e) {\n\t\tLOG.error(\"Exception in listWithBalanceCount: \" + e);\n\t}\n\treturn count;\n}", "CodeBleu_score": 28.30720131553909}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\ttry {\n\t\treturn listWithBalanceMapper.listWithBalanceCount(name, serialNo);\n\t} catch (Exception e) {\n\t\tlog.error(\"Error in listWithBalanceCount: \" + e.getMessage());\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 25.043757007631008}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result = 0;\n\ttry {\n\t\tresult = depotItemMapper.deleteByPrimaryKey(id);\n\t\tif (result == 0) {\n\t\t\tthrow new Exception(\"No depot item with ID \" + id + \" was found.\");\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error deleting depot item with ID \" + id + \" from the database.\", e);\n\t\tthrow e;\n\t}\n\treturn result;\n}", "CodeBleu_score": 54.95009357282095}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result = 0;\n\ttry {\n\t\tresult = depotItemMapper.deleteByPrimaryKey(id);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error deleting depot item with ID: \" + id, e);\n\t\tthrow new Exception(\"Error deleting depot item with ID: \" + id, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 56.88652952793414}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result = 0;\n\ttry {\n\t\tresult = depotItemMapper.deleteByPrimaryKey(id);\n\t\tif (result == 0) {\n\t\t\tthrow new Exception(\"Delete Failed\");\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\tthrow new Exception(\"Delete Failed\");\n\t}\n\treturn result;\n}", "CodeBleu_score": 52.955398316894694}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\ttry {\nHttpClient client = HttpClientBuilder.create().build();\nString url = String.format(\"%s/projects/%s/nodes?type=%s&key=%s\", getHost(), projectName, nodeType, nodeKey);\nHttpGet request = new HttpGet(url);\nHttpResponse response = client.execute(request);\nint statusCode = response.getStatusLine().getStatusCode();\nif (statusCode == 200) {\nHttpEntity entity = response.getEntity();\nif (entity!= null) {\nString responseString = EntityUtils.toString(entity);\nJsonNode root = new ObjectMapper().readTree(responseString);\nif (root.has(\"key\")) {\nreturn true;\n}\n}\n}\n} catch (Exception e) {\ne.printStackTrace();\n} finally {\ntry {\nclient.close();\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\nreturn false;\n}", "CodeBleu_score": 49.662060005358036}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\ttry {\nHttpClient client = HttpClientBuilder.create().build();\nHttpGet request = new HttpGet(getEndpoint(projectName, nodeType, nodeKey));\nHttpResponse response = client.execute(request);\nHttpEntity entity = response.getEntity();\nif (entity!= null) {\nString responseString = EntityUtils.toString(entity);\nif (responseString.contains(nodeKey)) {\nreturn true;\n}\n}\n} catch (Exception e) {\ne.printStackTrace();\n} finally {\ntry {\nclient.close();\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\nreturn false;\n}", "CodeBleu_score": 36.69197132316793}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\ttry {\nHttpClient client = HttpClientBuilder.create().build();\nHttpGet request = new HttpGet(getEndpoint(projectName, nodeType, nodeKey));\nHttpResponse response = client.execute(request);\nHttpEntity entity = response.getEntity();\nif (entity!= null) {\nString responseString = EntityUtils.toString(entity);\nJsonNode root = new ObjectMapper().readTree(responseString);\nJsonNode key = root.get(\"key\");\nif (key!= null) {\nreturn true;\n}\n}\n} catch (Exception e) {\ne.printStackTrace();\n} finally {\nclient.close();\n}\nreturn false;\n}", "CodeBleu_score": 43.1183637406807}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tCloseableHttpClient client = HttpClientBuilder.create().build();\ntry {\nHttpGet request = new HttpGet(getEndpoint() + \"/edge/\" + projectName + \"/\" + edgeType + \"/\" + fromType + \"/\" + from + \"/\" + toType + \"/\" + to);\nrequest.addHeader(\"Content-Type\", \"application/json\");\nCloseableHttpResponse response = client.execute(request);\nHttpEntity entity = response.getEntity();\nif (entity!= null) {\nInputStream instream = entity.getContent();\nObjectMapper mapper = new ObjectMapper();\nJsonNode root = mapper.readTree(instream);\nif (root.has(\"key\")) {\nreturn true;\n}\n}\n} catch (IOException e) {\ne.printStackTrace();\n} finally {\ntry {\nclient.close();\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\nreturn false;\n}", "CodeBleu_score": 50.62944954054617}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tCloseableHttpClient httpclient = HttpClients.createDefault();\ntry {\nHttpGet httpget = new HttpGet(this.url + \"/projects/\" + projectName + \"/edges/\" + edgeType + \"/from/\" + fromType + \"/to/\" + toType + \"/from/\" + from + \"/to/\" + to);\nCloseableHttpResponse response = httpclient.execute(httpget);\nHttpEntity entity = response.getEntity();\nString responseBody = EntityUtils.toString(entity);\nJSONObject json = new JSONObject(responseBody);\nif (json.has(\"key\")) {\nreturn true;\n}\n} catch (IOException e) {\ne.printStackTrace();\n} finally {\ntry {\nhttpclient.close();\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\nreturn false;\n}", "CodeBleu_score": 43.27317680757358}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\ttry {\nCloseableHttpClient client = HttpClients.createDefault();\nHttpUriRequest request = new HttpGet(getEndpoint(projectName, edgeType, fromType, toType, from, to));\nCloseableHttpResponse response = client.execute(request);\nString responseBody = EntityUtils.toString(response.getEntity());\nJSONObject json = new JSONObject(responseBody);\nif (json.has(\"key\")) {\nreturn true;\n}\n} catch (Exception e) {\nSystem.out.println(e);\n}\nreturn false;\n}", "CodeBleu_score": 33.87063248792798}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\t\tif (event == null || event.getMessage() == null) {\n\t\tthrow new IllegalArgumentException(\"Event or message cannot be null\");\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(testingLocation);\n\t}\n\tevent.setTime(System.currentTimeMillis());\n\tString json = null;\n\ttry {\n\t\tjson = objectMapper.writeValueAsString(event);\n\t} catch (JsonProcessingException e) {\n\t\tthrow new RuntimeException(\"Could not convert event to JSON\", e);\n\t}\n\tString topic = event.getTarget() == null? \"test\" : event.getTarget();\n\tProducerRecord<String, String> record = new ProducerRecord<>(topic, json);\n\tproducer.send(record);\n\tproducer.flush();\n}", "CodeBleu_score": 43.48550414096969}, {"code": "public void sendEvent(Event event){\n\t\tif (event == null || event.getMessage() == null) {\n\t\treturn;\n\t}\n\tLocation location = event.getLocation();\n\tif (location == null) {\n\t\tevent.setLocation(acquireTestingLocation());\n\t}\n\tevent.setTime(System.currentTimeMillis());\n\tString message = writeValueAsString(event);\n\tString topic = event.getTarget() == null? \"test\" : event.getTarget();\n\tProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, message);\n\tproducer.send(record);\n\tproducer.flush();\n}", "CodeBleu_score": 41.88516425258651}, {"code": "public void sendEvent(Event event){\n\t\tif (event == null || event.getMessage() == null) {\n\t\treturn;\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(acquireTestingLocation());\n\t}\n\tevent.setTime(new Date().getTime());\n\tString json = null;\n\ttry {\n\t\tjson = objectMapper.writeValueAsString(event);\n\t} catch (JsonProcessingException e) {\n\t\te.printStackTrace();\n\t}\n\tString topic = (event.getTarget() == null)? \"test\" : event.getTarget();\n\tProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, json);\n\tproducer.send(record);\n\tproducer.flush();\n}", "CodeBleu_score": 51.450662126106515}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t\tOssClient ossClient = new OssClient(getEndpoint(), getAccessKeyId(), getAccessKeySecret());\n\tossClient.putObject(getOssBucket(), objName, new ByteArrayInputStream(content));\n\tossClient.shutdown();\n\treturn getEndpoint() + \"/\" + getOssBucket() + \"/\" + objName;\n}", "CodeBleu_score": 31.826079193021084}, {"code": "public String upload(String objName, byte[] content){\n\t\t// Create an OSSClient instance\n\tOSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\n\t// Create a PutObjectRequest to describe the upload\n\tPutObjectRequest putObjectRequest = new PutObjectRequest(bucket, objName, new ByteArrayInputStream(content));\n\n\t// Upload the file to OSS\n\tossClient.putObject(putObjectRequest);\n\n\t// Shut down the OSSClient\n\tossClient.shutdown();\n\n\t// Return the URL of the uploaded object\n\treturn \"https://\" + bucket + \".\" + endpoint + \"/\" + objName;\n}", "CodeBleu_score": 34.04588702330679}, {"code": "public String upload(String objName, byte[] content){\n\t\t// Initialize the OSS client with access credentials\n\tOSSClient ossClient = new OSSClient(getEndpoint(), getAccessKeyId(), getAccessKeySecret());\n\n\t// Upload the file content as an object with the specified name\n\tossClient.putObject(getOssBucket(), objName, new ByteArrayInputStream(content));\n\n\t// Shut down the OSS client\n\tossClient.shutdown();\n\n\t// Return the URL of the uploaded object\n\treturn \"https://\" + getOssBucket() + \".\" + getEndpoint() + \"/\" + objName;\n}", "CodeBleu_score": 35.454356876596584}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\tensureIpToLocationWorker();\n\tsetIpAddress(ipAddress);\n\treturn getIpToLocationWorker().getIpToLocation(ipAddress);\n}", "CodeBleu_score": 11.747946195565278}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\tif (ipAddress == null) {\n\t\treturn new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\",", "CodeBleu_score": 8.164328747328186}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\tif (ipAddress == null) {\n\t\treturn null;\n\t}\n\tif (ipAddress.length() == 0) {\n\t\treturn null;\n\t}\n\tensureIpToLocationWorker();\n\treturn ipToLocationWorker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 17.795518873717388}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\tif (esClient == null) {\nsynchronized (this) {\nif (esClient == null) {\nesClient = new ElasticsearchClient(clusterHosts, clusterPorts, clusterName, clusterUser, clusterPassword);\n}\n}\n}\n}", "CodeBleu_score": 18.870848687809943}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\tif (esClient!= null && esClient.getLowLevelClient()!= null && esClient.getHighLevelClient()!= null) {\nreturn;\n}\nsynchronized (this) {\nif (esClient!= null && esClient.getLowLevelClient()!= null && esClient.getHighLevelClient()!= null) {\nreturn;\n}\nif (esClient == null) {\nesClient = new ElasticsearchClient();\n}\nif (esClient.getLowLevelClient() == null) {\nesClient.setLowLevelClient(new RestClient.Builder(parseHosts(clusterHostList)).build());\n}\nif (esClient.getHighLevelClient() == null) {\nesClient.setHighLevelClient(new RestHighLevelClient(esClient.getLowLevelClient()));\n}\n}\n}", "CodeBleu_score": 33.88653851461508}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\tif (this.esClient == null) {\nsynchronized (this) {\nif (this.esClient == null) {\nthis.esClient = this.buildESClient();\n}\n}\n}\n}", "CodeBleu_score": 12.19590745261411}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tString[] hostList = clusterHostList.split(\",\");\n\tfor (String host : hostList) {\n\t\tint port = clusterPort;\n\t\tif (host.indexOf(\":\") > 0) {\n\t\t\tString[] hostAndPort = host.split(\":\");\n\t\t\thost = hostAndPort[0];\n\t\t\tport = Integer.parseInt(hostAndPort[1]);\n\t\t}\n\t\thosts.add(new HttpHost(host, port));\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 45.274056461048794}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tString[] hostsAndPorts = clusterHostList.split(\",\");\n\tfor (String hostAndPort : hostsAndPorts) {\n\t\tString[] hostAndPortParts = hostAndPort.split(\":\");\n\t\tif (hostAndPortParts.length == 1) {\n\t\t\thosts.add(new HttpHost(hostAndPortParts[0], clusterPort));\n\t\t} else if (hostAndPortParts.length == 2) {\n\t\t\thosts.add(new HttpHost(hostAndPortParts[0], Integer.parseInt(hostAndPortParts[1])));\n\t\t} else {\n\t\t\tthrow new IllegalArgumentException(\"Invalid cluster host: \" + hostAndPort);\n\t\t}\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 41.661795844943406}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tString[] hostList = clusterHostList.split(\",\");\n\tfor (String host : hostList) {\n\t\tint port = clusterPort;\n\t\tif (host.indexOf(\":\") > -1) {\n\t\t\tString[] hostPort = host.split(\":\");\n\t\t\thost = hostPort[0];\n\t\t\tport = Integer.parseInt(hostPort[1]);\n\t\t}\n\t\thosts.add(new HttpHost(host, port));\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 45.51064557080718}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\twhile\n(\ntrue\n)\n{\nprintln\n(\n\"Polling for messages\n\"\n)\n;\n//\n// Poll for messages\n//\nMessage\nmessage\n=\nqueue\n.\npoll\n(\n30000\n)\n;\nif\n(\nmessage\n!\n=\nnull\n)\n{\n//\n// Process the message\n//\nif\n(\nmessage\n.\ngetType\n(\n)\n=\n=\nMessage\n.\nType\n.\nTEXT_MESSAGE\n)\n{\n//\n// Handle text message\n//\nTextMessage\ntextMessage\n=\n(\nTextMessage\n)\nmessage\n;\nString\nrecipient\n=\ntextMessage\n.\ngetRecipient\n(\n)\n;\nString\nmessageText\n=\ntextMessage\n.\ngetText\n(\n)\n;\nif\n(\nrecipient\n!\n=\nnull\n&\n&\nmessageText\n!\n=\nnull\n)\n{\n//\n// Validate the recipient and message\n//\nif\n(\nrecipient\n.\nstartsWith\n(\n\"\n+\n1\n\"\n)\n&\n&\nmessageText\n.\nlength\n(\n)\n<\n=\n160\n)\n{\n//\n// Send the message\n//\nsendPlainTextMessage\n(\nrecipient\nmessageText\n)\n;\n}\nelse\n{\n//\n// Log an error\n//\nprintln\n(\n\"Invalid recipient or message\n\"\n)\n;\n}\n}\nelse\n{\n//\n// Log an error\n//\nprintln\n(\n\"Invalid recipient or message\n\"\n)\n;\n}\n}\nelse\n{\n//\n// Log an error\n//\nprintln\n(\n\"Message type not supported\n\"\n)\n;\n}\n}\nelse\n{\n//\n// No message retrieved\n//\nprintln\n(\n\"No messages\n\"\n)\n;\n}\n}\n}", "CodeBleu_score": 12.217119680103398}, {"code": "protected void pollingWork() throws InterruptedException{\n\twhile\n(\ntrue\n)\n{\n// Poll for tasks with a 30-second timeout.\nTask\ntask\n=\nqueue\n.\npoll\n(\n30\n,\nTimeUnit\n.\nSECONDS\n)\n;\nif\n(\ntask\n!\n=\nnull\n)\n{\n// Check the task type.\nif\n(\ntask\n.\ngetTaskType\n(\n)\n.\nequals\n(\n\"\nplainTextMessageTask\n\"\n)\n)\n{\n// Extract the recipient number and message data from the task.\nString\nrecipient\n=\ntask\n.\ngetTaskData\n(\n)\n.\nget\n(\n\"\nrecipient\n\"\n)\n;\nString\nmessage\n=\ntask\n.\ngetTaskData\n(\n)\n.\nget\n(\n\"\nmessage\n\"\n)\n;\n// Validate the data.\nif\n(\nrecipient\n!\n=\nnull\n&\n&\n!\nrecipient\n.\nisEmpty\n(\n)\n&\n&\nmessage\n!\n=\nnull\n&\n&\n!\nmessage\n.\nisEmpty\n(\n)\n)\n{\n// Send the message.\nsendPlainTextMessage\n(\nrecipient\nmessage\n)\n;\n}\nelse\n{\n// Log an error message.\nSystem\n.\nout\n.\nprintln\n(\n\"\nInvalid\nmessage\ndata\n.\n\"\n)\n;\n}\n}\nelse\n{\n// Log an error message.\nSystem\n.\nout\n.\nprintln\n(\n\"\nInvalid\ntask\ntype\n.\n\"\n)\n;\n}\n}\n}\n}", "CodeBleu_score": 14.102389880138148}, {"code": "protected void pollingWork() throws InterruptedException{\n\twhile\n(\ntrue\n)\n{\n// Poll for a task with a 30-second timeout\nTask\ntask\n=\ntaskQueue\n.\npoll\n(\n30\n)\n;\nif\n(\ntask\n=\n=\nnull\n)\n{\n// No task available\ncontinue\n;\n}\n// Get the task type\nString\ntaskType\n=\ntask\n.\nget\n(\nTask\n.\nTASK_TYPE_KEY\n)\n;\nif\n(\ntaskType\n.\nequals\n(\nTask\n.\nTASK_TYPE_PLAIN_TEXT_MESSAGE\n)\n)\n{\n// Extract the recipient number and message data\nString\nrecipientNumber\n=\ntask\n.\nget\n(\nTask\n.\nRECIPIENT_NUMBER_KEY\n)\n;\nString\nmessage\n=\ntask\n.\nget\n(\nTask\n.\nMESSAGE_KEY\n)\n;\n// Validate the data\nif\n(\nrecipientNumber\n=\n=\nnull\n|\n|\nrecipientNumber\n.\ntrim\n(\n)\n.\nlength\n(\n)\n=\n=\n0\n|\n|\nmessage\n=\n=\nnull\n|\n|\nmessage\n.\ntrim\n(\n)\n.\nlength\n(\n)\n=\n=\n0\n)\n{\n// Invalid data\nlog\n.\nerror\n(\n\"\nInvalid\ntask\ndata\n\"\n)\n;\ncontinue\n;\n}\n// Send the message\ntry\n{\nsendPlainTextMessage\n(\nrecipientNumber\nmessage\n)\n;\n}\ncatch\n(\nException\ne\n)\n{\n// Log an error\nlog\n.\nerror\n(\n\"\nError\nsending\nmessage\nto\n\"\n+\nrecipientNumber\n+\n\"\n:\n\"\n+\ne\n.\ngetMessage\n(\n)\n)\n;\n}\n}\nelse\n{\n// Invalid task type\nlog\n.\nerror\n(\n\"\nInvalid\ntask\ntype\n:\n\"\n+\ntaskType\n)\n;\n}\n}\n}", "CodeBleu_score": 19.00279525989295}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpClient httpclient = HttpClients.createDefault();\n\nHttpGet httpGet = new HttpGet(uri);\nCloseableHttpResponse response = httpclient.execute(httpGet);\n\nHttpEntity entity = response.getEntity();\nString content = EntityUtils.toString(entity, \"UTF-8\");\n\nEntityUtils.consume(entity);\nresponse.close();\nhttpclient.close();\n\nreturn content;\n}", "CodeBleu_score": 58.99631829212934}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpClient client = HttpClients.createDefault();\nHttpGet httpGet = new HttpGet(uri);\nCloseableHttpResponse response = client.execute(httpGet);\n\ntry {\nHttpEntity entity = response.getEntity();\n\nif (entity!= null) {\nInputStream instream = entity.getContent();\n\ntry {\nBufferedReader reader = new BufferedReader(new InputStreamReader(instream, \"UTF-8\"));\nStringBuilder sb = new StringBuilder();\nString line = null;\nwhile ((line = reader.readLine())!= null) {\nsb.append(line + \"\n\");\n}\n\nlog.info(sb.toString());\nreturn sb.toString();\n} finally {\ninstream.close();\n}\n}\n} finally {\nresponse.close();\n}\n}", "CodeBleu_score": 47.61396311921837}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpClient httpClient = HttpClients.createDefault();\nHttpGet httpGet = new HttpGet(uri);\nhttpGet.setHeader(\"Accept\", \"application/xml\");\nhttpGet.setHeader(\"Content-Type\", \"application/xml\");\nhttpGet.setHeader(\"Authorization\", \"Basic \" + getEncodedCredentials());\n\nCloseableHttpResponse response = httpClient.execute(httpGet);\n\nString responseContent = EntityUtils.toString(response.getEntity(), \"UTF-8\");\n\nSystem.out.println(\"Response content: \" + responseContent);\n\nreturn responseContent;\n}", "CodeBleu_score": 46.99299572852041}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tMap<String, Object> map = null;\n\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument document = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes()));\n\tNodeList nodeList = document.getDocumentElement().getChildNodes();\n\tif (nodeList!= null) {\n\t\tmap = decodeNodeToMap(nodeList, doTrim);\n\t}\n\treturn map;\n}", "CodeBleu_score": 45.692085301803004}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder db = dbf.newDocumentBuilder();\n\tDocument doc = db.parse(new InputSource(new StringReader(messageXmlStr)));\n\tNodeList children = doc.getDocumentElement().getChildNodes();\n\treturn decodeNodeToMap(children, doTrim);\n}", "CodeBleu_score": 34.582766955489944}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tDocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\tDocument doc = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(\"UTF-8\")));\n\tNodeList nodes = doc.getDocumentElement().getChildNodes();\n\treturn decodeNodeToMap(nodes, doTrim);\n}", "CodeBleu_score": 31.915018145336425}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tfinal boolean isEligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\tif (isEligibleForAutoProcessing) {\n\t\tfinal String trxName = getTrxName(orderRecord);\n\t\taddLog(orderRecord, trxName, \"Auto-processing order\");\n\t\tscheduleIfNotPostponed(orderRecord, trxName);\n\t} else {\n\t\taddLog(orderRecord, null, \"Scheduling missing shipment schedules\");\n\t\tscheduleIfNotPostponed(orderRecord, null);\n\t}\n}", "CodeBleu_score": 30.58524858774132}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tif (isEligibleForAutoProcessing(orderRecord)) {\n\t\taddLog(orderRecord, \"Order is eligible for auto-processing. Enqueuing order for automatic shipping and invoicing.\");\n\t\tscheduleIfNotPostponed(orderRecord);\n\t} else {\n\t\taddLog(orderRecord, \"Order is not eligible for auto-processing. Scheduling missing shipment schedules.\");\n\t\tscheduleIfNotPostponed(orderRecord);\n\t}\n}", "CodeBleu_score": 19.912019185483228}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tif (isEligibleForAutoProcessing(orderRecord)) {\n\t\taddLog(orderRecord, \"Auto-processing order with ID \" + orderRecord.getC_Order_ID() + \" for order \" + orderRecord.get_ID() + \" is eligible for auto-processing. Enqueuing for automatic shipping and invoicing.\");\n\t\tscheduleIfNotPostponed(orderRecord);\n\t} else {\n\t\taddLog(orderRecord, \"Auto-processing order with ID \" + orderRecord.getC_Order_ID() + \" for order \" + orderRecord.get_ID() + \" is not eligible for auto-processing. Scheduling creation of missing shipment schedules.\");\n\t\tscheduleIfNotPostponed(orderRecord);\n\t}\n}", "CodeBleu_score": 25.898082240020432}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\tuser = $this->provider->retrieveByCredentials($request);\n\nif ($user && $this->provider->validateCredentials($user, $request)) {\nreturn $user; } return null; }", "CodeBleu_score": 28.724724491028432}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\tuser = $this->guard->getProvider()->retrieveByCredentials($credentials);\n\nif (!$user) {\nreturn null;\n}\n\nif (!$this->guard->getProvider()->validateCredentials($user, $credentials)) {\nreturn null;\n}\n\nreturn $user; }", "CodeBleu_score": 19.888485982859848}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\tuser = User::where('email', $request->email)->first();\n\nif ($user && $this->guard->getProvider()->validateCredentials($user, $request->only('password'))) {\nreturn $user;\n}\n\nreturn null;\n}", "CodeBleu_score": 30.165400672381242}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->limiter->increment\n$message = $this->getFailedLoginMessage($request)\n$this->events->dispatch(new FailedLoginEvent($request, $this->limiter->attempts($request), $message))\nthrow ValidationException::withMessages([\n$this->username() => [$message]\n])\n}", "CodeBleu_score": 45.75854624282408}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->limiter->increment\n$this->throwValidationException($request, [\n'error' => 'invalid_credentials',\n'message' => 'These credentials do not match our records.',\n]);\n}", "CodeBleu_score": 22.362797988631023}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t\t$this->limiter->increment($request);\n\tthrow ValidationException::withMessages([\n\t\t'email' => [trans('auth.failed')],\n\t]);\n}", "CodeBleu_score": 89.27527197476113}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\tuser = User::find($request->session()->get('login.user_id'));\n\t$data = [\n\t\t'user' => $user,\n\t\t'public_key' => optional($user)->two_factor_secret,\n\t];\n\treturn Inertia::render('Auth/TwoFactorChallenge', $data + [\n\t\t'twoFactor' => optional($user)->two_factor_secret &&! is_null(optional($user)->two_factor_confirmed_at),\n\t\t'remember' => $request->session()->get('login.remember'),\n\t])->toResponse($request);\n}", "CodeBleu_score": 54.959269510107376}, {"code": "<?\npublic function toResponse($request){\n\tuser = User::find($request->session()->get('login.id'));\n\n\tif ($user) {\n\t\t$data = Webauthn::prepareAssertion($user);\n\n\t\treturn Inertia::render('Auth/TwoFactorChallenge', $data + [\n\t\t\t'twoFactor' => optional($user)->two_factor_secret &&! is_null(optional($user)->two_factor_confirmed_at),\n\t\t\t'remember' => $request->session()->get('login.remember'),\n\t\t])->toResponse($request);\n\t}\n\n\treturn redirect()->route('login');\n}", "CodeBleu_score": 54.480401076303096}, {"code": "<?\npublic function toResponse($request){\n\tuserId = $request->session()->get('login.userId');\n\t$user = User::find($userId);\n\tif ($user) {\n\t\t$assertion = Webauthn::prepareAssertion($user);\n\t\t$data = [\n\t\t\t'publicKey' => $assertion->publicKey,\n\t\t\t'user' => $user,\n\t\t];\n\t\treturn Inertia::render('Auth/TwoFactorChallenge', $data + [\n\t\t\t'twoFactor' => optional($user)->two_factor_secret &&! is_null(optional($user)->two_factor_confirmed_at),\n\t\t\t'remember' => $request->session()->get('login.remember'),\n\t\t])->toResponse($request);\n\t}\n}", "CodeBleu_score": 64.08887228565752}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t\t$userToken = UserToken::firstWhere([\n\t\t'driver' => $driver,\n\t\t'socialite_id' => $socialite->getId(),\n\t]);\n\n\tif ($userToken) {\n\t\t$user = $this->getUserOrCreate($userToken->user_id);\n\t\t$this->checkUserAssociation($user, $userToken);\n\n\t\treturn $user;\n\t}\n\n\t$user = $this->createUserToken($socialite, $driver);\n\n\treturn $user;\n}", "CodeBleu_score": 41.67657316989545}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t\t$userToken = UserToken::firstWhere('driver', $driver, 'user_id', $socialite->getId());\n\n\tif ($userToken) {\n\t\t$user = $userToken->user;\n\n\t\tif ($this->checkUserAssociation($user, $socialite)) {\n\t\t\treturn $user;\n\t\t}\n\t}\n\n\treturn $this->createUserToken($socialite, $request);\n}", "CodeBleu_score": 36.88182215590877}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t\t$userToken = UserToken::firstWhere([\n\t\t'driver' => $driver,\n\t\t'socialite_user_id' => $socialite->getId(),\n\t]);\n\n\tif ($userToken) {\n\t\treturn $this->getUserOrCreate($userToken);\n\t}\n\n\treturn $this->createUserToken($request, $socialite);\n}", "CodeBleu_score": 33.18955406913869}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t\t$user = $request->user();\n\tif (! $user) {\n\t\treturn false;\n\t}\n\n\t$this->filterCredentials($request, $user);\n\n\ttry {\n\t\t$this->validateAssertion($request, $user);\n\t} catch (WebauthnException $exception) {\n\t\t$this->fireFailedEvent($request, $exception);\n\t\t$this->throwFailedAuthenticationException($request, $exception);\n\t\treturn false;\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 46.92732992634215}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t\t$user = $request->user();\n\tif (! $user) {\n\t\treturn false;\n\t}\n\n\t$this->filterCredentials($request);\n\tif (! $this->fireFailedEvent($request)) {\n\t\treturn false;\n\t}\n\n\tif (! $this->validateAssertion($request)) {\n\t\t$this->throwFailedAuthenticationException($request);\n\t\treturn false;\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 52.30419535529003}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$user = $request->user();\nif ($user === null) {\nreturn false;\n}\n$credentials = $this->filterCredentials($request);\nif (! $this->validateAssertion($request, $credentials)) {\n$this->fireFailedEvent($request);\n$this->throwFailedAuthenticationException($request);\nreturn false;\n}\nreturn true;\n}", "CodeBleu_score": 64.45894188112385}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\temail = $this->option('email');\nif (empty($email)) {\n$this->error('No email provided.');\nreturn null;\n}\ntry {\nreturn User::where('email', $email)->firstOrFail(); } catch (Exception$exception) {\n$this->error('User not found.'); return null; } }", "CodeBleu_score": 43.625551314988506}, {"code": "<?\nprivate function user(): ?User{\n\temail = $this->option('email');\nif (!$email) {\n$this->error('No email provided.'); return null; } try { return User::where('email', $email)->firstOrFail(); } catch (ModelNotFoundException $e) { $this->error('User not found.'); return null; } }", "CodeBleu_score": 44.325270462984044}, {"code": "<?\nprivate function user(): ?User{\n\t$email = $this->email;\n\tif (empty($email)) {\n\t\t$this->error('No email provided.');\n\t\treturn null;\n\t}\n\ttry {\n\t\treturn User::where('email', $email)->firstOrFail();\n\t} catch (\\Exception $e) {\n\t\t$this->error('User not found.');\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 52.15127561684055}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\tif ($this->option('flush')) {\n$this->info('Flushing Meilisearch indexes...');\n$settings = $this->getMeilisearchSettings();\nforeach ($settings['indexes'] as $index) {\n$this->artisan('scout:flush', ['name' => $index['uid']]);\n}\n$this->info('Meilisearch indexes flushed successfully.');\n}\n}", "CodeBleu_score": 39.278065270697724}, {"code": "<?\nprotected function scoutFlush(): void{\n\tif ($this->option('flush')) {\n$this->info('Flushing Meilisearch indexes...');\n$indexes = config('scout.driver.options.indexes');\nforeach ($indexes as $index) {\n$this->artisan('scout:flush', ['index' => $index]);\n}\n$this->info('Meilisearch indexes flushed successfully.');\n}\n}", "CodeBleu_score": 37.799634560782}, {"code": "<?\nprotected function scoutFlush(): void{\n\tif (config('scout.driver') ==='meilisearch') {\nforeach (config('scout.index') as $index) {\n$table = (new $index)->getTable();\n$this->artisan('scout:flush', [\n'--model' => $table,\n]);\n}\n$this->info('Scout indexes flushed.');\n}\n}", "CodeBleu_score": 54.10843826459239}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$vcard = $this->read($resource);\nif ($vcard === null) {\n$vcard = $this->create($resource);\n}\n\nforeach ($this->exporters as $exporter) {\n$exporter->export($vcard, $resource);\n}\n\nreturn $vcard; }", "CodeBleu_score": 19.385678767726915}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$vcard = new VCard();", "CodeBleu_score": 8.487993132517479}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$vcard = $this->read($resource)\nif (!$vcard) {\n$vcard = new VCard();\n$vcard->setUid(Uuid::uuid4()->toString());\n}\nforeach ($this->exporters as $exporter) {\n$exporter->export($vcard, $resource);\n}\nreturn $vcard; }", "CodeBleu_score": 22.303124777661832}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$obj = $this->getObject($addressBookId, $cardUri);\nif ($obj === null) {\n    return false;\n}\nif ($obj->type === 'contact') {\n    DestroyContact::dispatch([\n        'account_id' => $this->user->account_id,\n        'author_id' => $this->user->id,\n        'vault_id' => $obj->vault_id,\n        'contact_id' => $obj->id,\n    ])->onQueue('high');\n} elseif ($obj->type === 'group') {\n    DestroyGroup::dispatch([\n        'account_id' => $this->user->account_id,\n        'author_id' => $this->user->id,\n        'vault_id' => $obj->vault_id,\n        'group_id' => $obj->id,\n    ])->onQueue('high');\n}\nreturn true;\n}", "CodeBleu_score": 75.720399320596}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$obj = $this->getObject($addressBookId, $cardUri);\nif ($obj === null) {\nreturn false;\n}\nif ($obj->type === 'contact') {\nDestroyContact::dispatch([\n'account_id' => $this->user->account_id,\n'author_id' => $this->user->id,\n'vault_id' => $obj->vault_id,\n'contact_id' => $obj->id,\n])->onQueue('high');\n}\nif ($obj->type === 'group') {\nDestroyGroup::dispatch([\n'account_id' => $this->user->account_id,\n'author_id' => $this->user->id,\n'vault_id' => $obj->vault_id,\n'group_id' => $obj->id,\n])->onQueue('high');\n}\nreturn true;\n}", "CodeBleu_score": 70.9497497621076}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$obj = $this->getObject($addressBookId, $cardUri);\nif (is_null($obj)) {\n    return false;\n}\nif ($obj instanceof Contact) {\n    DestroyContact::dispatch([\n        'account_id' => $this->user->account_id,\n        'author_id' => $this->user->id,\n        'vault_id' => $obj->vault_id,\n        'contact_id' => $obj->id,\n    ])->onQueue('high');\n} elseif ($obj instanceof Group) {\n    DestroyGroup::dispatch([\n        'account_id' => $this->user->account_id,\n        'author_id' => $this->user->id,\n        'vault_id' => $obj->vault_id,\n        'group_id' => $obj->id,\n    ])->onQueue('high');\n}\nreturn true;\n}", "CodeBleu_score": 79.54785134030632}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\t\tif (!request()->hasFile('file')) {\n\t\treturn;\n\t}\n\n\t$activity = $this->activityRepository->create($data, auth()->guard()->user());\n\n\t$path = request()->file('file')->store('public/files');\n\n\t$activity->file()->create(['name' => request()->file('file')->getClientOriginalName(), 'path' => $path]);\n\n\treturn $activity;\n}", "CodeBleu_score": 45.7187589772605}, {"code": "<?\npublic function upload(array $data){\n\t\tif (!request()->hasFile('file')) {\n\t\treturn;\n\t}\n\n\t$leadActivity = $this->activityRepository->create($data);\n\n\t$file = request()->file('file');\n\t$file->storeAs('public/lead_files', $file->getClientOriginalName());\n\n\treturn $this->activityRepository->create([\n\t\t'name' => $file->getClientOriginalName(),\n\t\t'storage_path' => $file->storeAs('public/lead_files', $file->getClientOriginalName()),\n\t\t'lead_id' => $leadActivity->lead_id,\n\t\t'user_id' => auth()->guard()->user()->id\n\t]);\n}", "CodeBleu_score": 43.807844617652044}, {"code": "<?\npublic function upload(array $data){\n\tif (!request()->hasFile('file')) {\nreturn;\n}\n$user = auth()->guard()->user();\n$activity = $this->activityRepository->create($data, $user);\n$path = request()->file('file')->store('uploads', 'public');\n$activity->file = $path;\n$activity->save();\nreturn $activity; }", "CodeBleu_score": 42.31813837930821}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t\tif ($exception instanceof ModelNotFoundException) {\n\t\treturn response()->view('errors.404', [], 404);\n\t}\n\tif ($exception instanceof PDOException) {\n\t\treturn response()->view('errors.500', [], 500);\n\t}\n\tif ($exception instanceof ParseError) {\n\t\treturn response()->view('errors.500', [], 500);\n\t}\n\tif ($exception instanceof HttpException) {\n\t\treturn response()->view('errors.500', [], $exception->getStatusCode());\n\t}\n\tif ($exception instanceof Exception) {\n\t\treturn response()->view('errors.500', [], 500);\n\t}\n\treturn response()->view('errors.500', [], 500);\n}", "CodeBleu_score": 33.78833056576183}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t\tif ($exception instanceof ModelNotFoundException) {\n\t\treturn response()->json([\n\t\t\t'message' => 'The requested resource was not found.',\n\t\t\t'code' => 404\n\t\t], 404);\n\t}\n\n\tif ($exception instanceof PDOException) {\n\t\treturn response()->json([\n\t\t\t'message' => 'The database connection failed.',\n\t\t\t'code' => 500\n\t\t], 500);\n\t}\n\n\tif ($exception instanceof ParseError) {\n\t\treturn response()->json([\n\t\t\t'message' => 'The request body is not in valid JSON format.',\n\t\t\t'code' => 400\n\t\t], 400);\n\t}\n\n\tif ($exception instanceof HttpException) {\n\t\treturn response()->json([\n\t\t\t'message' => 'The request failed.',\n\t\t\t'code' => $exception->getStatusCode()\n\t\t], $exception->getStatusCode());\n\t}\n\n\treturn response()->json([\n\t\t'message' => 'An error occurred.',\n\t\t'code' => 500\n\t], 500);\n}", "CodeBleu_score": 32.62419686971182}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\tif ($exception instanceof ModelNotFoundException) {\nreturn $this->renderNotFoundResponse($exception);\n}\nif ($exception instanceof PDOException) {\nreturn $this->renderDatabaseErrorResponse($exception);\n}\nif ($exception instanceof ParseError) {\nreturn $this->renderParseError($exception);\n}\nif ($exception instanceof HttpException) {\nreturn $this->renderHttpException($exception);\n}\nreturn $this->renderInternalServerError($exception);\n}", "CodeBleu_score": 26.82968931612455}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\treturn $this->responseJson($path, $statusCode);\n}", "CodeBleu_score": 24.74103900686419}, {"code": "<?\nprivate function response($path, $statusCode){\n\tif (request()->expectsJson()) {\nreturn response()->json([\n'message' => $this->messages[$statusCode]\n], $statusCode);\n}\nreturn response()->view($path, [\n'message' => $this->messages[$statusCode]\n], $statusCode);\n}", "CodeBleu_score": 51.33955496980208}, {"code": "<?\nprivate function response($path, $statusCode){\n\t\tif (request()->expectsJson()) {\n\t\treturn response()->json(['error' => $path], $statusCode);\n\t}\n\n\treturn response()->view($path, ['statusCode' => $statusCode], $statusCode);\n}", "CodeBleu_score": 40.58384383184618}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t$ids = request()->input('ids');\n$count = 0;\nforeach ($ids as $id) {\n$activity = $this->activityRepository->find($id);\n$this->activityRepository->update(['is_done' => request()->input('is_done')], $id);\n$count++;\n}\nreturn response()->json(['count' => $count]);\n}", "CodeBleu_score": 29.048276984818877}, {"code": "<?\npublic function massUpdate(){\n\t$activityIds = request('activity_ids');\n$isDone = request('is_done');\n\n$updated = 0;\n\nforeach ($activityIds as $id) {\n$this->activityRepository->update($id, ['is_done' => $isDone]);\n$updated++;\n}\n\nif ($updated > 0) {\nreturn response()->json(['success' => true, 'updated' => $updated]);\n}\n\nreturn response()->json(['success' => false, 'updated' => $updated]);\n}", "CodeBleu_score": 25.70690392067916}, {"code": "<?\npublic function massUpdate(){\n\t$activityIds = request()->input('ids');\n$isDone = request()->input('is_done');\n$count = 0;\n\nforeach ($activityIds as $id) {\n$activity = $this->activityRepository->find($id);\n\n$this->activityRepository->update(['is_done' => $isDone], $id);\n$count++;\n}\n\nreturn response()->json(['count' => $count]);\n}", "CodeBleu_score": 31.648108414019205}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t$activities = Activity::whereIn('id', request('ids'))->get();\nforeach ($activities as $activity) {\n$this->activityRepository->delete($activity);\n}\nreturn response()->json(['message' => 'Activity deleted successfully!']);\n}", "CodeBleu_score": 24.282996628534917}, {"code": "<?\n public function massDestroy(){\n\t $ids = request('ids');\n if ($ids) {\n $ids = explode(',', $ids);\n $this->activityRepository->delete($ids);\n }\n return response()->json(['message' => 'Activities were successfully deleted']);\n }", "CodeBleu_score": 22.4911832648656}, {"code": "<?\n public function massDestroy(){\n\t$ids = request('ids');\n$count = 0;\nforeach ($ids as $id) {\n$this->activityRepository->delete($id);\n$count++;\n}\nreturn response()->json([\n'success' => $count.'Activities were successfully deleted' ]); }", "CodeBleu_score": 22.7545769852911}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t$cards = $this->dashboardHelper->getCards();\n $requestData = request()->all();\n foreach ($cards as $card) {\n if (isset($requestData[$card['id']])) {\n $card['selected'] = true;\n } else {\n $card['selected'] = false;\n }\n }\n return response()->json($cards);\n }", "CodeBleu_score": 39.47361686937836}, {"code": "<?\n public function updateCards(){\n\tcards\n= $this->dashboardHelper->getCards\nrequest()->all\n$updatedCards\n= []\nforeach\n($cards\nas\n$card) {\nif\n(isset\n$request\n[$card\n->id]) {\n$card\n->selected\n= true\n}\nelse {\n$card\n->selected\n= false\n}\n$updatedCards\n[]\n= $card\n}\nreturn\nresponse()->json\n($updatedCards)\n}", "CodeBleu_score": 16.930709369426133}, {"code": "<?\n public function updateCards(){\n\tcards = $this->dashboardHelper->getCards();\nforeach ($cards as $card) {\n$card->selected = false;\nforeach ($request->all() as $requestCard) {\nif ($card->id == $requestCard['id']) {\n$card->selected = true;\nbreak;\n}\n}\n}\nreturn response()->json($cards);\n}", "CodeBleu_score": 30.199463946172507}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t$this->event->dispatch(new ConfigurationWasCreated($this->configurationRepository->create(request()->all())));\nsession()->flash('success', trans('configuration.configuration_created'));\nreturn redirect()->back();\n}", "CodeBleu_score": 37.9796182612264}, {"code": "<?\npublic function store(){\n\tEvent::dispatch('before.store.configuration');\n$configuration = $this->configurationRepository->create(request()->all());\nEvent::dispatch('after.store.configuration');\nsession()->flash('success', trans('configuration.create.success'));\nreturn redirect()->back();\n}", "CodeBleu_score": 44.70598851426036}, {"code": "<?\npublic function store(){\n\t\t$this->event->dispatch(new ConfigurationCreated);\n\n\t$configuration = $this->configurationRepository->create(request()->all());\n\n\t$this->event->dispatch(new ConfigurationSaved($configuration));\n\n\tsession()->flash('success', trans('configuration.success'));\n\n\treturn redirect()->back();\n}", "CodeBleu_score": 40.200612867760164}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t$file = request()->route()->parameters['file'];\n$configuration = $this->configurationRepository->findOneByField('file', $file);\n$fullFileName = storage_path(). '/'. $configuration->get('path');\nreturn Storage::download($fullFileName, $configuration->get('name'));\n}", "CodeBleu_score": 49.993651800892685}, {"code": "<?\npublic function download(){\n\t\t$path = request()->route()->parameters['path'];\n\t$fileName = $this->configurationRepository->findOneByField('path', $path)->getValue();\n\t$file = Storage::disk('local')->get($fileName);\n\treturn response($file, 200)->header('Content-Type', 'application/pdf');\n}", "CodeBleu_score": 48.83413872608503}, {"code": "<?\npublic function download(){\n\t$filePath = $this->configurationRepository->findOneByField('key', $this->request->route()->parameters['key'])->value;\n$fileName = $this->configurationRepository->findOneByField('key', $this->request->route()->parameters['key'])->name;\nreturn Storage::download($filePath, $fileName);\n}", "CodeBleu_score": 43.558351181356116}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tList<AdminModelSort> adminModelSortList = new ArrayList<>();\nfor (String model : list) {\nAdminModelSort adminModelSort = new AdminModelSort();\nadminModelSort.setSort(model);\nadminModelSortList.add(adminModelSort);\n}\nadminModelSortRepository.deleteByUserId(getUserId());\nadminModelSortRepository.saveBatch(adminModelSortList);\nreturn new Result(true);\n}", "CodeBleu_score": 33.712336087021214}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\tList<AdminModelSort> sortList = new ArrayList<>();\n\tfor (String model : list) {\n\t\tAdminModelSort sort = new AdminModelSort();\n\t\tsort.setModel(model);\n\t\tsort.setSort(0);\n\t\tsort.setUserId(getUserId());\n\t\tsort.setIsHidden(false);\n\t\tsortList.add(sort);\n\t}\n\tremoveHeaderModelSort(getUserId());\n\tsaveBatch(sortList);\n\treturn Result.success();\n}", "CodeBleu_score": 33.64584192043528}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tList<AdminModelSort> list2 = new ArrayList<>();\nfor (String s : list) {\nAdminModelSort adminModelSort = new AdminModelSort();\nadminModelSort.setSort(s);\nadminModelSort.setType(SortType.HEADER);\nadminModelSort.setUserId(getUserId());\nlist2.add(adminModelSort);\n}\nadminModelSortService.remove(getUserId(), SortType.HEADER);\nadminModelSortService.saveBatch(list2);\nreturn Result.success();\n}", "CodeBleu_score": 39.478954963962735}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t\tif (moduleSetting.getSettingId().equals(ModuleSettingEnum.CRM.getId())) {\n\t\treturn new Result(false, \"Cannot update CRM module setting\");\n\t}\n\tmoduleSettingService.updateModuleSetting(moduleSetting);\n\treturn new Result(true, \"Module setting updated\");\n}", "CodeBleu_score": 22.68895069527888}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t\tif (moduleSetting.getSettingId() == null) {\n\t\treturn new Result(false, \"The setting ID cannot be null.\");\n\t}\n\tif (moduleSetting.getStatus() == null) {\n\t\treturn new Result(false, \"The status cannot be null.\");\n\t}\n\tif (moduleSetting.getStatus() == ModuleSettingStatus.CRM) {\n\t\treturn new Result(false, \"The CRM module cannot be modified.\");\n\t}\n\tModuleSetting moduleSettingFromDB = moduleSettingRepository.findById(moduleSetting.getSettingId()).orElse(null);\n\tif (moduleSettingFromDB == null) {\n\t\treturn new Result(false, \"The setting ID does not exist.\");\n\t}\n\tmoduleSettingFromDB.setStatus(moduleSetting.getStatus());\n\tmoduleSettingRepository.save(moduleSettingFromDB);\n\treturn new Result(true, \"The setting was successfully updated.\");\n}", "CodeBleu_score": 42.80729670447692}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t\ttry {\n\t\tif (moduleSetting.getSettingId() == null) {\n\t\t\treturn new Result(false, \"Setting ID cannot be null\");\n\t\t}\n\n\t\tif (moduleSetting.getStatus() == null) {\n\t\t\treturn new Result(false, \"Status cannot be null\");\n\t\t}\n\n\t\tif (moduleSetting.getStatus()!= 1 && moduleSetting.getStatus()!= 0) {\n\t\t\treturn new Result(false, \"Status must be 0 or 1\");\n\t\t}\n\n\t\tAdminConfiguration adminConfiguration = adminConfigurationService.getById(moduleSetting.getSettingId());\n\t\tif (adminConfiguration.getModuleId() == Module.CRM) {\n\t\t\treturn new Result(false, \"Cannot update CRM module setting\");\n\t\t}\n\n\t\tadminConfiguration.setStatus(moduleSetting.getStatus());\n\t\tadminConfigurationService.save(adminConfiguration);\n\n\t\treturn new Result(true, \"Module setting updated successfully\");\n\t} catch (Exception e) {\n\t\treturn new Result(false, e.getMessage());\n\t}\n}", "CodeBleu_score": 45.717409239174316}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\ttry {\n\t\tUserConfig userConfig = userConfigService.queryUserConfigByName(customKey);\n\t\tif (userConfig!= null) {\n\t\t\tuserConfig.setValue(json.toJSONString());\n\t\t\tuserConfigService.updateById(userConfig);\n\t\t} else {\n\t\t\tUserConfig userConfigNew = new UserConfig();\n\t\t\tuserConfigNew.setUserId(getUserId());\n\t\t\tuserConfigNew.setCustomKey(customKey);\n\t\t\tuserConfigNew.setValue(json.toJSONString());\n\t\t\tuserConfigNew.setStatus(1);\n\t\t\tuserConfigService.save(userConfigNew);\n\t\t}\n\t\treturn Result.success();\n\t} catch (Exception e) {\n\t\treturn Result.error(\"Error: \" + e.getMessage());\n\t}\n}", "CodeBleu_score": 54.115782363237784}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t//        String customKey = \"test\";\n//        JSONArray json = new JSONArray();\n//        json.put(\"test\", \"test\");\n//        json.put(\"test2\", \"test2\");\n        String userId = getCurrentUser().getUserId();\n        UserConfig userConfig = userConfigService.queryUserConfigByName(userId, customKey);\n        if (userConfig == null) {\n            userConfig = new UserConfig();\n            userConfig.setUserId(userId);\n            userConfig.setCustomKey(customKey);\n            userConfig.setValue(json.toJSONString());\n            userConfigService.save(userConfig);\n        } else {\n            userConfig.setValue(json.toJSONString());\n            userConfigService.updateById(userConfig);\n        }\n        return Result.success(userConfig);\n    }", "CodeBleu_score": 57.02030917804406}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t//    String customKey = request.getParameter(\"customKey\");\n//    JSONArray json = request.getJSONArray(\"json\");\n    UserConfig userConfig = userConfigService.queryUserConfigByName(customKey);\n    if (userConfig!= null) {\n        userConfig.setValue(json.toJSONString());\n        userConfigService.updateById(userConfig);\n    } else {\n        UserConfig userConfigNew = new UserConfig();\n        userConfigNew.setCustomKey(customKey);\n        userConfigNew.setValue(json.toJSONString());\n        userConfigNew.setUserId(getUserId());\n        userConfigNew.setStatus(1);\n        userConfigService.save(userConfigNew);\n    }\n    return Result.ok(\"success\");\n}", "CodeBleu_score": 58.43963938486962}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser user = adminUserDao.getAdminUserById(userId);\n\tif (user == null) {\n\t\treturn new Result<AdminUser>(ResultCode.USER_NOT_EXIST);\n\t}\n\tString deptName = adminUserDao.getDeptNameByDeptId(user.getDeptId());\n\tuser.setDeptName(deptName);\n\tuser.setSalt(null);\n\tuser.setPassword();\n\treturn new Result<AdminUser>(ResultCode.SUCCESS, user);\n}", "CodeBleu_score": 46.617448158039295}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser user = adminUserService.getUserInfo(userId);\n\tif (user!= null) {\n\t\tString deptName = adminUserService.getDeptName(user.getDeptId());\n\t\tuser.setDeptName(deptName);\n\t\tuser.setSalt(null);\n\t\tuser.setPassword(null);\n\t}\n\treturn Result.ok(user);\n}", "CodeBleu_score": 48.32761090133344}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser user = adminUserService.getUserInfo(userId);\n\tif (user == null) {\n\t\treturn new Result<AdminUser>(false, \"User not found\", null);\n\t}\n\tLong deptId = user.getDeptId();\n\tString deptName = adminDeptService.getDeptName(deptId);\n\tuser.setDeptName(deptName);\n\tuser.setSalt(null);\n\tuser.setPassword(null);\n\treturn new Result<AdminUser>(true, \"User info retrieved\", user);\n}", "CodeBleu_score": 46.04382397522889}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t\t// TODO: Implement this function\n\treturn null;\n}", "CodeBleu_score": 0.8829483007523543}, {"code": " public Result readNotice() {\n\t\n// Get the user ID\nString userId = getUserId();\n\n// Check if there are multiple \"readNotice\" entries for the user\nList<ReadNotice> readNotices = readNoticeService.findByUserId(userId);\n\n// If there are multiple entries, update the status to 1 for all matching entries\nif (readNotices.size() > 0) {\nfor (ReadNotice readNotice : readNotices) {\nreadNotice.setStatus(1);\nreadNoticeService.update(readNotice);\n}\n}\n\n// If not, create a new \"readNotice\" entry with status 1 and save it\nelse {\nReadNotice readNotice = new ReadNotice();\nreadNotice.setUserId(userId);\nreadNotice.setStatus(1);\nreadNoticeService.save(readNotice);\n}\n\n// Return a success result\nreturn Result.success();\n}", "CodeBleu_score": 21.676509855897148}, {"code": " public Result readNotice() {\n\t\tUser user = userRepository.findById(getUserId()).orElseThrow(() -> new UserNotFoundException(getUserId()));\n\tList<ReadNotice> readNotices = readNoticeRepository.findByUserId(getUserId());\n\tif (readNotices.isEmpty()) {\n\t\tReadNotice readNotice = new ReadNotice();\n\t\treadNotice.setStatus(1);\n\t\treadNotice.setUserId(getUserId());\n\t\treadNoticeRepository.save(readNotice);\n\t\treturn Result.success();\n\t} else {\n\t\tfor (ReadNotice readNotice : readNotices) {\n\t\t\treadNotice.setStatus(1);\n\t\t\treadNoticeRepository.save(readNotice);\n\t\t}\n\t\treturn Result.success();\n\t}\n}", "CodeBleu_score": 28.43423602044518}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\tAdminConfig adminConfig = adminConfigRepository.findOneByName(\"companyInfo\");\n\tif (adminConfig == null) {\n\t\tadminConfig = new AdminConfig();\n\t\tadminConfig.setName(\"companyInfo\");\n\t\tadminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n\t\tadminConfigRepository.save(adminConfig);\n\t} else {\n\t\tadminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n\t\tadminConfigRepository.save(adminConfig);\n\t}\n}", "CodeBleu_score": 44.80656788733708}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\t// get the company information configuration\n\tAdminConfig config = getAdminConfig(ADMIN_COMPANY_CONFIG_NAME);\n\n\t// if the configuration is null, create a new one\n\tif (config == null) {\n\t\tconfig = new AdminConfig();\n\t\tconfig.setName(ADMIN_COMPANY_CONFIG_NAME);\n\t}\n\n\t// set the company information\n\tconfig.setValue(adminCompanyBO.toJSONString());\n\n\t// save or update the configuration\n\tsaveOrUpdate(config);\n}", "CodeBleu_score": 24.132344875634782}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\tAdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n\tadminCompanyBO.setName(\"companyInfo\");\n\tadminCompanyBO.setLast(adminCompanyBO.getLast() == null? \"\" : adminCompanyBO.getLast());\n\tadminCompanyBO.setSetDescription(adminCompanyBO.getSetDescription() == null? \"\" : adminCompanyBO.getSetDescription());\n\tadminCompanyBO.setSetName(adminCompanyBO.getSetName() == null? \"\" : adminCompanyBO.getSetName());\n\tadminCompanyBO.setLambdaQuery(adminCompanyBO.getLambdaQuery() == null? \"\" : adminCompanyBO.getLambdaQuery());\n\tadminCompanyBO.setStatus(adminCompanyBO.getStatus() == null? \"\" : adminCompanyBO.getStatus());\n\tadminCompanyBO.setValue(adminCompanyBO.getValue() == null? \"\" : adminCompanyBO.getValue());\n\tAdminCompany adminCompany = new AdminCompany();\n\tadminCompany.setName(adminCompanyBO.getName());\n\tadminCompany.setLast(adminCompanyBO.getLast());\n\tadminCompany.setDescription(adminCompanyBO.getDescription());\n\tadminCompany.setSetDescription(adminCompanyBO.getSetDescription());\n\tadminCompany.setName(adminCompanyBO.getName());\n\tadminCompany.setLambdaQuery(adminCompanyBO.getLambdaQuery());\n\tadminCompany.setStatus(adminCompanyBO.getStatus());\n\tadminCompany.setValue(adminCompanyBO.getValue());\n\tif (adminCompanyService.findOne(adminCompany)!= null) {\n\t\tadminCompany.setId(adminCompanyService.findOne(adminCompany).getId());\n\t\tadminCompanyService.saveOrUpdate(adminCompany);\n\t} else {\n\t\tadminCompanyService.save(adminCompany);\n\t}\n}", "CodeBleu_score": 31.005967802919006}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\treturn\nnew\nAdminCompanyBO\n();\n}", "CodeBleu_score": 5.1348334328974286}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\treturn (AdminCompanyBO) this.queryAdminConfig(this.getAdminConfigKey());\n}", "CodeBleu_score": 4.824329280368041}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n\tString query = \"SELECT * FROM admin_config WHERE key = '\" + key + \"'\";\n\tList<Map<String, Object>> result = jdbcTemplate.queryForList(query);\n\tif (result.size() > 0) {\n\t\tMap<String, Object> row = result.get(0);\n\t\tadminCompanyBO.setKey(row.get(\"key\").toString());\n\t\tadminCompanyBO.setValue(row.get(\"value\").toString());\n\t}\n\treturn adminCompanyBO;\n}", "CodeBleu_score": 37.021570510015565}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t\n// 1. Remove existing log welcome speech configurations\n AdminConfig.remove(AdminConfig.list(\"LogWelcomeSpeech\", null, null));\n\n// 2. Create AdminConfig objects for each string\n List<AdminConfig> adminConfigList = new ArrayList<>();\n for (String string : stringList) {\n adminConfigList.add(AdminConfig.create(\"LogWelcomeSpeech\", null, null, \"speech\", string));\n }\n\n// 3. Set the properties of each AdminConfig object\n for (AdminConfig adminConfig : adminConfigList) {\n AdminConfig.setAttribute(adminConfig, \"speech\", \"true\");\n AdminConfig.setAttribute(adminConfig, \"speechType\", \"welcome\");\n }\n\n// 4. Remove existing configurations with the specified log configuration name\n AdminConfig.remove(AdminConfig.list(\"LogWelcomeSpeech\", null, null));\n\n// 5. Save the new list of configurations in batch\n AdminConfig.saveBatch(adminConfigList.toArray(new AdminConfig[0]), null, null, null);\n }", "CodeBleu_score": 30.264573575722753}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t String logWelcomeSpeech = \"logWelcomeSpeech\";\n String logWelcomeSpeechName = \"logWelcomeSpeechName\";\n String logWelcomeSpeechValue = \"logWelcomeSpeechValue\";\n String logWelcomeSpeechStatus = \"logWelcomeSpeechStatus\";\n String logWelcomeSpeechAdd = \"logWelcomeSpeechAdd\";\n String logWelcomeSpeechSetValue = \"logWelcomeSpeechSetValue\";\n String logWelcomeSpeechRemove = \"logWelcomeSpeechRemove\";\n String logWelcomeSpeechBatch = \"logWelcomeSpeechBatch\";\n String logWelcomeSpeechSet = \"logWelcomeSpeechSet\";\n String logWelcomeSpeechForEach = \"logWelcomeSpeechForEach\";\n String logWelcomeSpeechEq = \"logWelcomeSpeechEq\";\n String logWelcomeSpeechSetStatus = \"logWelcomeSpeechSetStatus\";\n String logWelcomeSpeechAddValue = \"logWelcomeSpeechAddValue\";\n String logWelcomeSpeechRemoveValue = \"logWelcomeSpeechRemoveValue\";\n String logWelcomeSpeechSaveBatch = \"logWelcomeSpeechSaveBatch\";\n\n AdminConfig.remove(AdminConfig.list(logWelcomeSpeech, null, null));\n for (String logWelcomeSpeechValue : stringList) {\n AdminConfig.create(logWelcomeSpeechName, null, null, logWelcomeSpeechValue);\n }\n AdminConfig.save();\n }", "CodeBleu_score": 19.21663746887728}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t String logWelcomeSpeech = \"logWelcomeSpeech\";\n String logWelcomeSpeechType = \"logWelcomeSpeech\";\n String logWelcomeSpeechValue = \"logWelcomeSpeechValue\";\n String logWelcomeSpeechName = \"logWelcomeSpeechName\";\n String logWelcomeSpeechValueName = \"logWelcomeSpeechValueName\";\n String logWelcomeSpeechValueDescription = \"logWelcomeSpeechValueDescription\";\n String logWelcomeSpeechValueDescriptionValue = \"logWelcomeSpeechValueDescriptionValue\";\n String logWelcomeSpeechValueDescriptionValueName = \"logWelcomeSpeechValueDescriptionValueName\";\n String logWelcomeSpeechValueDescriptionValueDescription = \"logWelcomeSpeechValueDescriptionValueDescription\";\n String logWelcomeSpeechValueDescriptionValueDescriptionValue = \"logWelcomeSpeechValueDescriptionValueDescriptionValue\";\n String logWelcomeSpeechValueDescriptionValueDescriptionValueName = \"logWelcomeSpeechValueDescriptionValueDescriptionValueName\";\n String logWelcomeSpeechValueDescriptionValueDescriptionValueDescription = \"logWelcomeSpeechValueDescriptionValueDescriptionValueDescription\";\n String logWelcomeSpeechValueDescriptionValueDescriptionValueDescriptionValue = \"logWelcomeSpeechValueDescriptionValueDescriptionValueDescriptionValue\";\n String logWelcomeSpeechValueDescriptionValueDescriptionValueDescriptionValueName = \"logWelcomeSpeechValueDescriptionValueDescriptionValueDescriptionValueName\";\n String logWelcomeSpeechValueDescriptionValueDescriptionValueDescriptionValueDescription = \"logWelcomeSpeechValueDescriptionValueDescriptionValueDescriptionValueDescription\";\n String logWelcomeSpeechValueDescriptionValueDescriptionValueDescriptionValueDescriptionValue = \"logWelcomeSpeechValueDescriptionValueDescriptionValueDescriptionValueDescriptionValue\";\n String logWelcomeSpeechValueDescriptionValueDescriptionValueDescriptionValueDescriptionValueName = \"logWelcomeSpeechValueDescriptionValueDescriptionValueDescriptionValueDescriptionValueName\";\n String logWelcomeSpeechValueDescriptionValueDescriptionValueDescriptionValueDescriptionValueDescription = \"logWelcomeSpeechValueDescriptionValueDescriptionValueDescriptionValueDescriptionValueDescription\";\n String logWelcomeSpeechValueDescriptionValueDescriptionValueDescriptionValueDescriptionValueDescriptionValue = \"logWelcomeSpeechValueDescriptionValueDescriptionValueDescriptionValueDescriptionValueDescriptionValue\";\n String logWelcomeSpeechValueDescriptionValueDescriptionValueDescriptionValueDescriptionValueDescriptionValueName = \"logWelcomeSpeechValueDescriptionValueDescriptionValueDescriptionValueDescriptionValueDescriptionValueName\";\n String logWelcomeSpeechValueDescriptionValueDescriptionValueDescriptionValueDescriptionValueDescriptionValueDescription = \"logWelcomeSpeechValueDescriptionValueDescriptionValueDescriptionValueDescriptionValueDescriptionValueDescription\";\n String logWelcomeSpeechValueDescriptionValueDescriptionValueDescriptionValueDescriptionValueDescriptionValueDescriptionValue = \"logWelcomeSpeechValueDescriptionValueDescriptionValueDescriptionValueDescriptionValueDescriptionValueDescriptionValue\";\n String", "CodeBleu_score": 12.264246525919773}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tString username = adminInitDataBO.getUsername();\n\tString password = ();\n\tString salt = adminInitDataBO.getSalt();\n\tString userId = getUserId(username);\n\tif (userId == null) {\n\t\tthrow new InvalidPasswordException(\"Invalid username\");\n\t}\n\tString storedPassword = getPassword(userId);\n\tString storedSalt = getSalt(userId);\n\tif (!password.equals(storedPassword)) {\n\t\tthrow new InvalidPasswordException(\"Invalid password\");\n\t}\n\tString accessCode = generateAccessCode();\n\tsetex(accessCode, 600, userId);\n\treturn accessCode;\n}", "CodeBleu_score": 28.21807393680268}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tString username = adminInitDataBO.getUsername();\n\tString password = ();\n\tString salt = adminInitDataBO.getSalt();\n\tString userId = getUserId(username);\n\tUser user = getUser(userId);\n\tString storedPassword = user.getPassword();\n\tString storedSalt = user.getSalt();\n\tString storedUsername = user.getUsername();\n\tif (!verify(password, storedPassword, storedSalt, storedUsername)) {\n\t\tthrow new InvalidPasswordException(\"Invalid password\");\n\t}\n\tString code = generateCode();\n\tsetex(code, 600, code);\n\treturn code;\n}", "CodeBleu_score": 31.48270968050627}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tString userId = getUserId(adminInitDataBO.getUsername());\n\tAdminUserBO adminUserBO = getAdminUser(userId);\n\tString salt = adminUserBO.getSalt();\n\tString password = adminInitDataBO.getPassword();\n\tString hashedPassword = getHashedPassword(password, salt);\n\tif (hashedPassword.equals(adminUserBO.getPassword())) {\n\t\tString code = generateCode();\n\t\tsetex(userId, code, 600);\n\t\treturn code;\n\t} else {\n\t\tthrow new InvalidPasswordException();\n\t}\n}", "CodeBleu_score": 30.617520351742623}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\t\tString userId = getUserId();\n\tif (userId == null) {\n\t\treturn false;\n\t}\n\tString key = \"auth:\" + userId;\n\tList<String> unauthUrls = getRedis().smembers(key);\n\tif (unauthUrls!= null && unauthUrls.contains(getInitialAuthUrl())) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 30.815371156818127}, {"code": "private boolean verifyInitAuth(){\n\t\tString userId = getUserId();\n\tString key = \"auth:init:\" + userId;\n\tSet<String> unauthorizedUrls = getRedis().smembers(key);\n\tif (unauthorizedUrls.contains(getInitAuthUrl())) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 27.706468786471426}, {"code": "private boolean verifyInitAuth(){\n\t\tString userId = getUserId();\n\tString key = \"unauth:\" + userId;\n\tString unauth = getRedis().get(key);\n\tif (unauth!= null && unauth.contains(getInitAuth())) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 26.729489732189922}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tList<AdminRoleMenu> list = new ArrayList<AdminRoleMenu>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n\t\tadminRoleMenu.setRoleId(roleId);\n\t\tadminRoleMenu.setMenuId(menuId);\n\t\tlist.add(adminRoleMenu);\n\t}\n\tsaveBatch(list);\n}", "CodeBleu_score": 51.49797498235604}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\tList<AdminRoleMenu> list = new ArrayList<AdminRoleMenu>();\nfor (Integer menuId : menuIdList) {\nAdminRoleMenu roleMenu = new AdminRoleMenu();\nroleMenu.setRoleId(roleId);\nroleMenu.setMenuId(menuId);\nlist.add(roleMenu);\n}\nif (list.size() > 0) {\nadminRoleMenuMapper.saveBatch(list);\n}\n}", "CodeBleu_score": 45.250023652505874}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tList<AdminRoleMenu> list = new ArrayList<AdminRoleMenu>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu roleMenu = new AdminRoleMenu();\n\t\troleMenu.setRoleId(roleId);\n\t\troleMenu.setMenuId(menuId);\n\t\tlist.add(roleMenu);\n\t}\n\tadminRoleMenuMapper.saveBatch(list);\n}", "CodeBleu_score": 44.809256399440095}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\tlog\n.info\n(\n\"Saving a system log asynchronously.\"\n);\n\n// Retrieve the log index\nString index = getSysLogIndex();\n\n// Convert the log object to a map\nMap<String, Object> logMap = beanToMap(sysLog);\n\n// Format the creation time\nString createTime = formatDateTime(sysLog.getCreateTime());\n\n// Remove the ID\nlogMap.remove(\"id\");\n\n// Create an index request and submit it to the Elasticsearch client\nIndexRequest indexRequest = new IndexRequest(index)\n.source(logMap)\n.id(sysLog.getId())\n.setCreate(true)\n.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE);\n\ntry {\nclient\n.indexAsync\n(\nindexRequest\n,\nnew ActionListener<IndexResponse>() {\n@Override\npublic void onResponse(IndexResponse indexResponse) {\nlog\n.info\n(\n\"System log saved successfully.\"\n);\n}\n\n@Override\npublic void onFailure(Exception e) {\nlog\n.error\n(\n\"Error saving system log: \" + e.getMessage()\n);\n}\n}\n);\n}\ncatch (ElasticsearchException e) {\nlog\n.error\n(\n\"Error saving system log: \" + e.getMessage()\n);\n}\n}", "CodeBleu_score": 43.211887730768396}, {"code": "public void saveSysLog(SysLog sysLog) {\n\ttry\n{\n// Get the log index\nint logIndex = getSysLogIndex();\n// Convert the log object to a map\nMap<String, Object> logMap = beanToMap(sysLog);\n// Format the creation time\nlogMap.put(\"createTime\", formatDateTime(sysLog.getCreateTime()));\n// Remove the ID\nlogMap.remove(\"id\");\n// Create an index request\nIndexRequest indexRequest = new IndexRequest(\"syslog\", \"syslog\", logIndex + \"\");\n// Add the log map to the request\nindexRequest.source(logMap);\n// Submit the request to the Elasticsearch client\nclient.index(indexRequest);\n}\ncatch (Exception e)\n{\nlog.error(\"Error saving system log: \" + e.getMessage());\n}\n}", "CodeBleu_score": 34.87999225840915}, {"code": "public void saveSysLog(SysLog sysLog) {\n\ttry {\n// Get the log index\nString index = getSysLogIndex();\n\n// Convert the log object to a map\nMap<String, Object> logMap = beanToMap(sysLog);\n\n// Format the creation time\nlogMap.put(\"createTime\", formatDateTime(sysLog.getCreateTime()));\n\n// Remove the ID\nlogMap.remove(\"id\");\n\n// Create an index request\nIndexRequest indexRequest = new IndexRequest(index).id(sysLog.getId()).source(logMap);\n\n// Submit the request\nclient.indexAsync(indexRequest, RequestOptions.DEFAULT, new ActionListener<IndexResponse>() {\n@Override\npublic void onResponse(IndexResponse indexResponse) {\n// Log the status\nSystem.out.println(\"System log saved successfully: \" + indexResponse.status());\n}\n\n@Override\npublic void onFailure(Exception e) {\n// Log the error message\nSystem.out.println(\"Error saving system log: \" + e.getMessage());\n}\n});\n} catch (Exception e) {\n// Log the error message\nSystem.out.println(\"Error saving system log: \" + e.getMessage());\n}\n}", "CodeBleu_score": 52.19703149900141}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t\ttry {\n\t\tSearchRequest searchRequest = new SearchRequest(SysLogIndex.NAME);\n\t\tSearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n\t\tsearchSourceBuilder.query(QueryBuilders.boolQuery()\n\t\t\t\t.must(QueryBuilders.matchAllQuery())\n\t\t\t\t.must(QueryBuilders.rangeQuery(SysLogIndex.CREATED_AT).gte(querySysLogBO.getFromDate())\n\t\t\t\t\t\t.lte(querySysLogBO.getToDate())));\n\t\tsearchSourceBuilder.sort(SysLogIndex.CREATED_AT, SortOrder.DESC);\n\t\tsearchSourceBuilder.exclude(SysLogIndex.SYS_LOG_ID, SysLogIndex.CREATED_AT);\n\t\tsearchRequest.source(searchSourceBuilder);\n\t\tSearchResponse searchResponse = RestClient.getClient().search(searchRequest, RequestOptions.DEFAULT);\n\t\tlong totalHits = searchResponse.getHits().getTotalHits();\n\t\tList<SysLog> sysLogList = new ArrayList<>();\n\t\tfor (SearchHit hit : searchResponse.getHits()) {\n\t\t\tSysLog sysLog = new SysLog();\n\t\t\tMap<String, Object> sourceAsMap = hit.getSourceAsMap();\n\t\t\tsysLog.setSysLogId(sourceAsMap.get(SysLogIndex.SYS_LOG_ID).toString());\n\t\t\tsysLog.setSysLogType(sourceAsMap.get(SysLogIndex.SYS_LOG_TYPE).toString());\n\t\t\tsysLog.setSysLogMessage(sourceAsMap.get(SysLogIndex.SYS_LOG_MESSAGE).toString());\n\t\t\tsysLog.setSysLogLevel(sourceAsMap.get(SysLogIndex.SYS_LOG_LEVEL).toString());\n\t\t\tsysLog.setSysLogCreatedDate(sourceAsMap.get(SysLogIndex.CREATED_AT).toString());\n\t\t\tsysLogList.add(sysLog);\n\t\t}\n\t\tBasePage<SysLog> basePage = new BasePage<>(totalHits, querySysLogBO.getCurrentPage(), querySysLogBO.getPageSize(),\n\t\t\t\tsysLogList);\n\t\treturn basePage;\n\t} catch (IOException e) {\n\t\tLOGGER.error(e.getMessage(), e);\n\t}\n\treturn null;\n}", "CodeBleu_score": 47.78500561465269}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t\tBasePage<SysLog> page = new BasePage<>();\n\tSearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n\tsearchSourceBuilder.query(QueryBuilders.matchAllQuery());\n\tsearchSourceBuilder.sort(SortBuilders.fieldSort(\"createdTime\").order(SortOrder.DESC));\n\tsearchSourceBuilder.exclude(\"logMessage\");\n\tsearchSourceBuilder.exclude(\"logMessage.content\");\n\tsearchSourceBuilder.exclude(\"logMessage.content.content\");\n\tsearchSourceBuilder.exclude(\"logMessage.content.content.content\");\n\tsearchSourceBuilder.exclude(\"logMessage.content.content.content.content\");\n\tsearchSourceBuilder.exclude(\"logMessage.content.content.content.content.content\");\n\tsearchSourceBuilder.exclude(\"logMessage.content.content.content.content.content.content\");\n\tsearchSourceBuilder.exclude(\"logMessage.content.content.content.content.content.content.content\");\n\tsearchSourceBuilder.exclude(\"logMessage.content.content.content.content.content.content.content.content\");\n\tsearchSourceBuilder.exclude(\"logMessage.content.content.content.content.content.content.content.content.content\");\n\tsearchSourceBuilder.exclude(\"logMessage.content.content.content.content.content.content.content.content.content.content\");\n\tsearchSourceBuilder.exclude(\"logMessage.content.content.content.content.content.content.content.content.content.content.content\");\n\tsearchSourceBuilder.exclude(\"logMessage.content.content.content.content.content.content.content.content.content.content.content.content\");\n\tsearchSourceBuilder.exclude(\"logMessage.content.content.content.content.content.content.content.content.content.content.content.content.content\");\n\tsearchSourceBuilder.exclude(\"logMessage.content.content.content.content.content.content.content.content.content.content.content.content.content.content\");\n\tsearchSourceBuilder.exclude(\"logMessage.content.content.content.content.content.content.content.content.content.content.content.content.content.content.content\");\n\tsearchSourceBuilder.exclude(\"logMessage.content.content.content.content.content.content.content.content.content.content.", "CodeBleu_score": 20.156100404205123}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t\t// Initialize the search criteria\n\tSearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n\n\t// Add the query criteria to the search source builder\n\tif (querySysLogBO.getSearchText()!= null &&!querySysLogBO.getSearchText().isEmpty()) {\n\t\tsearchSourceBuilder.query(QueryBuilders.matchQuery(\"message\", querySysLogBO.getSearchText()));\n\t}\n\n\t// Add the sorting criteria to the search source builder\n\tif (querySysLogBO.getSortBy()!= null &&!querySysLogBO.getSortBy().isEmpty()) {\n\t\tif (querySysLogBO.getSortOrder()!= null &&!querySysLogBO.getSortOrder().isEmpty()) {\n\t\t\tif (querySysLogBO.getSortOrder().equalsIgnoreCase(\"asc\")) {\n\t\t\t\tsearchSourceBuilder.sort(querySysLogBO.getSortBy(), SortOrder.ASC);\n\t\t\t} else if (querySysLogBO.getSortOrder().equalsIgnoreCase(\"desc\")) {\n\t\t\t\tsearchSourceBuilder.sort(querySysLogBO.getSortBy(), SortOrder.DESC);\n\t\t\t}\n\t\t} else {\n\t\t\tsearchSourceBuilder.sort(querySysLogBO.getSortBy(), SortOrder.DESC);\n\t\t}\n\t}\n\n\t// Exclude specific fields from the response\n\tsearchSourceBuilder.fetchSource(new String[] { \"id\", \"message\", \"timestamp\" }, null);\n\n\t// Execute the search request using a REST client\n\tSearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n\tsearchRequest.types(SysLog.class.getSimpleName());\n\tsearchRequest.source(searchSourceBuilder);\n\n\t// Perform the search request\n\tSearchResponse searchResponse;\n\ttry {\n\t\tsearchResponse = getRestClient().search(searchRequest, RequestOptions.DEFAULT);\n\t} catch (IOException e) {\n\t\tlog.error(\"Error while querying system logs: {}\", e.getMessage());\n\t\treturn null;\n\t}\n\n\t// Map the search results to SysLog objects\n\tList<SysLog> sysLogList = new ArrayList<>();\n\tfor (SearchHit hit : searchResponse.getHits().getHits()) {\n\t\tSysLog sysLog = mapToBean(hit.getSourceAsMap());\n\t\tsysLogList.add(sysLog);\n\t}\n\n\t// Populate the BasePage object with", "CodeBleu_score": 44.37422683520471}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\ty {\n\t\tconst file = fs.createWriteStream(dest);\n\t\tconst response = await https.get(url);\n\t\tresponse.pipe(file);\n\t\tawait new Promise((resolve, reject) => {\n\t\t\tfile.on(\"finish\", () => {\n\t\t\t\tfile.close(resolve);\n\t\t\t});\n\t\t\tfile.on(\"error\", (err) => {\n\t\t\t\tfs.unlink(dest, () => {\n\t\t\t\t\treject(err);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t} catch (err) {\n\t\tconsole.error(err);\n\t}\n}", "CodeBleu_score": 45.67897609076472}, {"code": "async function downloadFile(url, dest){\n\ty {\n\t\tconst file = fs.createWriteStream(dest);\n\t\tconst response = await https.get(url);\n\t\tresponse.pipe(file);\n\t\tawait new Promise((resolve, reject) => {\n\t\t\tfile.on(\"finish\", () => {\n\t\t\t\tfile.close(resolve);\n\t\t\t});\n\t\t\tfile.on(\"error\", (err) => {\n\t\t\t\tfs.unlink(dest, () => {\n\t\t\t\t\treject(err);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t} catch (error) {\n\t\tconsole.error(error);\n\t}\n}", "CodeBleu_score": 45.566254684322594}, {"code": "async function downloadFile(url, dest){\n\ty {\n\t\tconst file = fs.createWriteStream(dest);\n\t\tconst response = await https.get(url);\n\t\tresponse.pipe(file);\n\t\tawait new Promise((resolve, reject) => {\n\t\t\tfile.on(\"finish\", resolve);\n\t\t\tfile.on(\"error\", reject);\n\t\t});\n\t\tfile.close();\n\t} catch (err) {\n\t\tfs.unlink(dest, () => {});\n\t\tthrow err;\n\t}\n}", "CodeBleu_score": 42.28657057750116}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t return Flux.fromIterable(module.getDependentModules())\n.filter(dependentModule ->!circularDependencyCheckSet.contains(dependentModule.getId()))\n.doOnNext(dependentModule -> circularDependencyCheckSet.add(dependentModule.getId()))\n.flatMap(dependentModule -> getModule(dependentModule.getId()))\n.onErrorContinue((e, module) -> warn(\"Error retrieving dependent module {}: {}\", module.getId(), e.getMessage()))\n.collectList();\n }", "CodeBleu_score": 50.19959938980691}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t return Flux.fromIterable(module.getDependencies())\n.flatMap(dependency -> {\n String dependencyId = dependency.getDependency().getId();\n if (circularDependencyCheckSet.contains(dependencyId)) {\n return Mono.empty();\n } else {\n circularDependencyCheckSet.add(dependencyId);\n return getModule(dependencyId)\n.doOnError(error -> {\n log.warn(\"Error while retrieving dependent module {}: {}\", dependencyId, error.getMessage());\n })\n.onErrorContinue((error, module) -> {\n log.warn(\"Error while retrieving dependent module {}: {}\", dependencyId, error.getMessage());\n });\n }\n })\n.collect(Collectors.toSet())\n.map(dependentModules -> {\n module.setDependencies(dependentModules);\n return module;\n });\n }", "CodeBleu_score": 38.10098321606069}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t return Flux.fromIterable(module.getDependencies())\n.filter(dependency ->!circularDependencyCheckSet.contains(dependency.getModuleName()))\n.doOnNext(dependency -> circularDependencyCheckSet.add(dependency.getModuleName()))\n.flatMap(dependency -> getModule(dependency.getModuleName())\n.doOnNext(dependentModule -> circularDependencyCheckSet.remove(dependentModule.getModuleName()))\n.onErrorContinue((throwable, module) -> warn(\"Failed to retrieve dependent module: \" + module.getModuleName()))\n )\n.collectList()\n.flatMap(modules -> Flux.fromIterable(modules)\n.flatMap(this::getDependentModules)\n.collectList()\n )\n.doOnNext(dependentModules -> module.setDependentModules(dependentModules))\n.doOnError(throwable -> warn(\"Failed to retrieve dependent modules: \" + module.getModuleName()))\n.onErrorContinue((throwable, module) -> warn(\"Failed to retrieve dependent modules: \" + module.getModuleName()))\n ;\n}", "CodeBleu_score": 45.84692767351427}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tf (map.containsKey\n(\"componentType\")\n&& map.get\n(\"componentType\")\n.equals\n(\"module\")\n&& isNotBlank\n((String) map.get\n(\"appId\"))) {\ndependentModuleIds.add\n((String) map.get\n(\"appId\"));\n}\nif (map.containsKey\n(\"children\")) {\nfor (Map<?,?> child : (List<Map<?,?>>) map.get\n(\"children\")) {\ndoGetDependentModules\n(child, dependentModuleIds);\n}\n}\n}", "CodeBleu_score": 27.620562872806083}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tor (Map.Entry<?,?> entry : map.entrySet()) {\nif (entry.getValue() instanceof Map) {\ndoGetDependentModules((Map<?,?>) entry.getValue(), dependentModuleIds);\n}\nelse if (entry.getValue() instanceof List) {\nfor (Object value : (List<?>) entry.getValue()) {\nif (value instanceof Map) {\ndoGetDependentModules((Map<?,?>) value, dependentModuleIds);\n}\n}\n}\nelse if (entry.getValue() instanceof String) {\nString value = (String) entry.getValue();\nif (isNotBlank(value)) {\ndependentModuleIds.add(value);\n}\n}\n}\n}", "CodeBleu_score": 30.535505219840076}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tf (map == null) {\nreturn;\n}\nfor (Map.Entry<?,?> entry : map.entrySet()) {\nif (entry.getKey()!= null && entry.getValue()!= null) {\nif (entry.getKey().equals(\"type\") && entry.getValue().equals(\"module\")) {\nif (entry.getValue() instanceof Map) {\ndoGetDependentModules((Map<String, Object>) entry.getValue(), dependentModuleIds);\n}\nif (entry.getValue() instanceof List) {\nList<?> list = (List<?>) entry.getValue();\nfor (Object obj : list) {\nif (obj instanceof Map) {\ndoGetDependentModules((Map<String, Object>) obj, dependentModuleIds);\n}\n}\n}\n}\n}\n}\n}", "CodeBleu_score": 29.842799891068644}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t Asset asset = new Asset.Builder(srcContentType)\n.setDataBuffer(dataBuffer)\n.build();\n if (createThumbnail) {\n asset = resizeImage(asset, 200, 200);\n }\n return asset;\n}", "CodeBleu_score": 28.59879978316908}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t // Create a new asset with the given content type.\n Asset asset = new Asset.Builder()\n.setContentType(srcContentType)\n.setData(dataBuffer)\n.build();\n\n // If creating a thumbnail, resize the image.\n if (createThumbnail) {\n asset = resizeImage(asset);\n }\n\n // Release the data buffer.\n dataBuffer.release();\n\n return asset;\n }", "CodeBleu_score": 32.5467617992558}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t\n// 1. Get the content type of the image\nMediaType contentType = srcContentType;\n\n// 2. If creating a thumbnail, resize the image\nif (createThumbnail) {\ncontentType = MediaType.IMAGE_JPEG;\n\n// 3. Read the image data\nbyte[] data = dataBuffer.getData();\n\n// 4. Create a new BufferedImage object from the image data\nBufferedImage image = ImageIO.read(new ByteArrayInputStream(data));\n\n// 5. Resize the image\nint newWidth = 100;\nint newHeight = 100;\n\n// 6. Create a new BufferedImage object with the new dimensions\nBufferedImage resizedImage = new BufferedImage(newWidth, newHeight, BufferedImage.TYPE_INT_RGB);\nGraphics2D graphics = resizedImage.createGraphics();\ngraphics.drawImage(image, 0, 0, newWidth, newHeight, null);\ngraphics.dispose();\n\n// 7. Write the resized image to a byte array\nByteArrayOutputStream outputStream = new ByteArrayOutputStream();\nImageIO.write(resizedImage, \"jpg\", outputStream);\nbyte[] resizedData = outputStream.toByteArray();\n\n// 8. Create a new DataBuffer object with the resized image data\nDataBuffer resizedDataBuffer = new DataBufferByte(resizedData, resizedData.length);\n\n// 9. Create a new Asset object with the resized image data and content type\nAsset asset = new Asset(resizedDataBuffer, contentType);\n\n// 10. Release the DataBuffer\ndataBuffer.release();\n\nreturn asset;\n}\nelse {\n// 11. Create a new Asset object with the original image data and content type\nAsset asset = new Asset(dataBuffer, contentType);\n\n// 12. Release the DataBuffer\ndataBuffer.release();\n\nreturn asset;\n}\n}", "CodeBleu_score": 40.34128450515869}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn assetRepository.findById(assetId)\n\t\t\t.flatMap(asset -> {\n\t\t\t\texchange.getResponse().setStatusCode(HttpStatus.OK);\n\t\t\t\tif (asset.getContentType()!= null) {\n\t\t\t\t\texchange.getResponse().getHeaders().setContentType(asset.getContentType());\n\t\t\t\t}\n\t\t\t\treturn exchange.getResponse().writeWith(Mono.just(asset.getData()));\n\t\t\t});\n}", "CodeBleu_score": 33.10503555534245}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn assetRepository.findById(assetId)\n\t\t.map(asset -> {\n\t\t\texchange.getResponse().setStatusCode(HttpStatus.OK);\n\t\t\tif (asset.getContentType()!= null) {\n\t\t\t\texchange.getResponse().getHeaders().setContentType(asset.getContentType());\n\t\t\t}\n\t\t\treturn asset.getData();\n\t\t})\n\t\t.flatMap(dataBuffer -> exchange.getResponse().writeWith(Mono.just(dataBuffer)));\n}", "CodeBleu_score": 33.175934708545654}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn assetService.getAsset(assetId)\n\t.flatMap(asset -> {\n\t\texchange.getResponse().setStatusCode(HttpStatus.OK);\n\t\tif (asset.getContentType()!= null) {\n\t\t\texchange.getResponse().getHeaders().setContentType(asset.getContentType());\n\t\t}\n\t\treturn exchange.getResponse().writeWith(Mono.just(asset.getData()));\n\t});\n}", "CodeBleu_score": 32.643408271885306}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\treturn getOrganizationInEnterpriseMode()\n\t\t.flatMapIterable(org -> org.getAuthConfigs())\n\t\t.map(FindAuthConfig::new);\n}", "CodeBleu_score": 12.119810597746008}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\treturn this.getOrganizationInEnterpriseMode()\n.flatMapIterable(organization -> organization.getAuthConfigs())\n.map(authConfig -> new FindAuthConfig(authConfig.getId(), authConfig.getName(), authConfig.getAuthType().toString()));\n}", "CodeBleu_score": 18.953855052077394}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\treturn getOrganizationInEnterpriseMode()\n\t\t.flatMapIterable(org -> getWorkspace(org.getOrganizationId())\n\t\t\t.map(workspace -> getAuthConfigs(workspace.getId())\n\t\t\t\t.collectList())\n\t\t\t.map(authConfigs -> new FindAuthConfig(org.getOrganizationId(), authConfigs)))\n\t\t.collectList();\n}", "CodeBleu_score": 20.22829612638889}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\treturn MongockSpring5.builder()\n.setDriver(mongoTemplate)\n.setWriteConcern(WriteConcern.ACKNOWLEDGED)\n.setReadConcern(ReadConcern.LOCAL)\n.addChangeLogsScanPackages(\"com.example.demo.changelogs\")\n.setSpringContext(springContext)\n.buildApplicationRunner();\n}", "CodeBleu_score": 29.600849484814155}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\tMongockApplicationRunner.Builder builder = MongockApplicationRunner.builder()\n\t\t\t.withMongoTemplate(mongoTemplate)\n\t\t\t.withDefaultWriteConcern(WriteConcern.UNACKNOWLEDGED)\n\t\t\t.withDefaultReadConcern(ReadConcern.LOCAL)\n\t\t\t.addChangeLogsScanPackages(ChangeLogScanPackage.of(\"com.example.mongock.changelogs\"))\n\t\t\t.setSpringContext(springContext);\n\treturn builder.buildApplicationRunner();\n}", "CodeBleu_score": 46.21102765157787}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\treturn new MongockApplicationRunner\n.builder\n.setSpringContext\n(springContext)\n.setDriver\n(new MongoDriver(mongoTemplate.getDb().getMongo(), mongoTemplate.getDb().getName()))\n.setWriteConcern\n(WriteConcern.ACKNOWLEDGED)\n.setReadConcern\n(ReadConcern.LOCAL)\n.addChangeLogsScanPackages\n(\"com.github.cloudyrock.mongock.changelogs\")\n.withJournal\n(new MongoDbChangeLogJournal())\n.buildApplicationRunner();\n}", "CodeBleu_score": 31.407791510505795}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\tReactiveMongoTemplate template = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\ttemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\treturn template;\n}", "CodeBleu_score": 76.62547287398485}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\tReactiveMongoTemplate template = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\ttemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\treturn template;\n}", "CodeBleu_score": 76.62547287398485}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\tReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\treactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\treturn reactiveMongoTemplate;\n}", "CodeBleu_score": 76.68946433531822}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t\treturn getLatestRecordByLibraryQueryId(libraryQueryId)\n\t\t.switchIfEmpty(getById(libraryQueryId))\n\t\t.map(record -> {\n\t\t\tif (record == null) {\n\t\t\t\tthrow new NotFoundException(\"No record found for library query ID \" + libraryQueryId);\n\t\t\t}\n\n\t\t\treturn record.getDsl();\n\t\t});\n}", "CodeBleu_score": 42.73002959621678}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t\treturn getLatestRecordByLibraryQueryId(libraryQueryId)\n\t\t\t.flatMap(record -> Mono.justOrEmpty(record.getDsl()))\n\t\t\t.switchIfEmpty(getById(libraryQueryId)\n\t\t\t\t\t.map(libraryQuery -> libraryQuery.getDsl()));\n}", "CodeBleu_score": 43.297912363554794}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t\treturn getLatestRecordByLibraryQueryId(libraryQueryId)\n\t\t.map(record -> record.getDsl())\n\t\t.switchIfEmpty(getById(libraryQueryId))\n\t\t.map(dsl -> {\n\t\t\ttry {\n\t\t\t\treturn new ObjectMapper().readValue(dsl, Map.class);\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(\"Failed to parse library query DSL\", e);\n\t\t\t}\n\t\t});\n}", "CodeBleu_score": 43.02528499378375}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t-        if (datasource.getDatasourceType() == DatasourceType.JS) {\n-            return executeLocally(datasource, queryConfig, requestParams, timeoutStr, queryVisitorContext);\n-        } else {\n-            return executeByNodeJs(datasource, queryConfig, requestParams, timeoutStr, queryVisitorContext);\n-        }\n-    }", "CodeBleu_score": 21.882681569322614}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t-        return executeQuery(datasource, queryConfig, requestParams, timeoutStr, queryVisitorContext, null);\n+        return executeQuery(datasource, queryConfig, requestParams, timeoutStr, queryVisitorContext, null, null);\n     }", "CodeBleu_score": 16.28782663928402}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t return Mono.defer(() -> {\n try {\n long timeout = parseQueryTimeoutMs(timeoutStr);\n return executeLocally(datasource, queryConfig, requestParams, timeout, queryVisitorContext);\n } catch (TimeoutException e) {\n return Mono.error(new QueryTimeoutException(e.getMessage(), e));\n } catch (Exception e) {\n return Mono.error(new QueryExecutionException(e.getMessage(), e));\n }\n });\n }", "CodeBleu_score": 29.016440447706458}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\tQueryExecutor queryExecutor = getQueryExecutor(datasource);\nQueryExecutionContext queryExecutionContext = buildQueryExecutionContext(datasource, queryConfig, queryVisitorContext);\nreturn getOrCreateConnection(datasource)\n.flatMap(connection -> doExecuteQuery(connection, datasource, queryExecutor, queryExecutionContext, requestParams))\n.onErrorResume(e -> {\nlog.error(\"Error executing query locally\", e);\nreturn Mono.just(new QueryExecutionResult(e));\n});\n}", "CodeBleu_score": 30.691411305208504}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\n//        QueryExecutor queryExecutor = getQueryExecutor(datasource);\n//        QueryExecutionContext queryExecutionContext = buildQueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n//        Mono<Connection> connectionMono = getOrCreateConnection(datasource);\n//\n//        return connectionMono.flatMap(connection -> {\n//            try {\n//                return doExecuteQuery(queryExecutor, queryExecutionContext, connection);\n//            } catch (SQLException e) {\n//                throw new RuntimeException(e);\n//            }\n//        });\n\n}", "CodeBleu_score": 9.634820991429324}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\tQueryExecutor queryExecutor = getQueryExecutor(datasource);\n\tQueryExecutionContext queryExecutionContext = buildQueryExecutionContext(datasource, queryConfig, queryVisitorContext);\n\tMono<Connection> connectionMono = getOrCreateConnection(datasource);\n\treturn connectionMono.flatMap(connection -> {\n\t\ttry {\n\t\t\treturn doExecuteQuery(queryExecutor, connection, queryExecutionContext, requestParams);\n\t\t} catch (Exception e) {\n\t\t\treturn Mono.error(e);\n\t\t}\n\t});\n}", "CodeBleu_score": 32.11195118563738}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t\tif (isBlank(timeoutStr)) {\n\t\treturn DEFAULT_QUERY_TIMEOUT_MS;\n\t}\n\tString unit = getUnitInfo(timeoutStr);\n\tString valueStr = substring(timeoutStr, 0, length(timeoutStr) - length(unit));\n\tdouble value = Double.parseDouble(valueStr);\n\tif (value > MAX_QUERY_TIMEOUT_MS) {\n\t\tthrow new IllegalArgumentException(\"Query timeout value \" + value + \" is greater than the maximum allowed value of \" + MAX_QUERY_TIMEOUT_MS + \".\");\n\t}\n\tif (unit.equals(\"s\")) {\n\t\treturn ofSeconds(value).toMillis().intValue();\n\t} else if (unit.equals(\"m\")) {\n\t\treturn ofMinutes(value).toMillis().intValue();\n\t} else if (unit.equals(\"h\")) {\n\t\treturn ofHours(value).toMillis().intValue();\n\t} else {\n\t\tthrow new IllegalArgumentException(\"Query timeout unit \" + unit + \" is not supported.\");\n\t}\n}", "CodeBleu_score": 32.96388853511646}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t\tif (isBlank(timeoutStr)) {\n\t\treturn DEFAULT_QUERY_TIMEOUT_MS;\n\t}\n\tString valueStr = getLeft(timeoutStr);\n\tString unitStr = getRight(timeoutStr);\n\tlong value = ofSeconds(toMillis(toDouble(valueStr))).longValue();\n\tif (value < 0 || value > MAX_QUERY_TIMEOUT_MS) {\n\t\tthrow new IllegalArgumentException(\"Invalid query timeout value: \" + valueStr + \" \" + unitStr);\n\t}\n\treturn (int) value;\n}", "CodeBleu_score": 23.1330363319578}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tif (isBlank(timeoutStr)) {\nreturn DEFAULT_QUERY_TIMEOUT_MS;\n}\ntry {\nlong timeout = getLong(timeoutStr);\nif (timeout < 0) {\nthrow new IllegalArgumentException(\"Query timeout cannot be negative: \" + timeoutStr);\n}\nif (timeout > MAX_QUERY_TIMEOUT_MS) {\nthrow new IllegalArgumentException(\"Query timeout cannot exceed \" + MAX_QUERY_TIMEOUT_MS + \"ms: \" + timeoutStr);\n}\nreturn (int) timeout;\n} catch (NumberFormatException e) {\nthrow new IllegalArgumentException(\"Invalid query timeout: \" + timeoutStr);\n}\n}", "CodeBleu_score": 22.002774926205447}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\treturn", "CodeBleu_score": 6.9664119055773295}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\treturn getLiveQueries(application, visitorId)\n.flatMapIterable(queries -> queries)\n.map(query -> {\nString datasourceId = getDatasourceId(query);\nif (datasourceId == null) {\nthrow new IllegalStateException(\"No datasource ID found for query \" + query.getId());\n}\nreturn Pair.of(datasourceId, datasourceId);\n})\n.collect(Collectors.toList())\n.flatMap(pair -> doCopyDatasource(pair.getLeft(), currentOrganizationId))\n.map(pair -> Pair.of(pair.getLeft(), pair.getRight()))\n.collect(Collectors.toList());\n}", "CodeBleu_score": 35.9511641836238}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\treturn getLiveQueries(application, visitorId)\n.flatMapIterable(liveQueries\n-> liveQueries.stream()\n.map(query\n-> Pair.of(query.getId(), query.getDatasourceId()))\n.collect(Collectors.toList()))\n.flatMap(pair\n-> copyDatasource(currentOrganizationId, pair.getLeft(), visitorId)\n.map(datasourceId\n-> Pair.of(pair.getLeft(), datasourceId)))\n.collectList()\n.doOnSuccess(copiedDatasources\n-> {\nif (copiedDatasources.isEmpty()) {\nthrow new IllegalStateException(\n\"No datasources found in the application \"\n+ application.getName()\n+ \" for visitor \"\n+ visitorId\n);\n}\n})\n.doOnSuccess(copiedDatasources\n-> {\nlogger\n.info(\"Copied {} datasources from template to current organization\",\ncopiedDatasources.size());\n})\n.doOnSuccess(copiedDatasources\n-> {\nlogger\n.info(\"Copied datasources from template to current organization: {}\",\ncopiedDatasources);\n})\n.doOnError(error\n-> {\nlogger\n.error(\n\"Error copying datasources from template to current organization\",\nerror\n);\n})\n.doOnSuccess(copiedDatasources\n-> {\nlogger\n.info(\"Copied datasources from template to current organization: {}\",\ncopiedDatasources);\n});\n}", "CodeBleu_score": 27.934047168142474}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t\treturn getDatasourceById(datasourceId)\n\t\t.flatMap(datasource -> {\n\t\t\tif (isSystemStatic(datasource)) {\n\t\t\t\treturn Mono.just(datasourceId);\n\t\t\t} else if (isLegacyQuickRestApi(datasource) || isLegacyOpenblocksApi(datasource)) {\n\t\t\t\treturn getNewDatasourceId(datasource, organizationId, visitorId);\n\t\t\t} else {\n\t\t\t\treturn createNewDatasource(datasource, organizationId, visitorId);\n\t\t\t}\n\t\t});\n}", "CodeBleu_score": 29.35577579447531}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t\treturn getDatasource(datasourceId)\n\t.flatMap(datasource -> {\n\t\tif (datasource.isSystemStatic()) {\n\t\t\treturn Mono.just(datasource.getId());\n\t\t} else if (isLegacyQuickRestApi(datasource.getApiType()) || isLegacyOpenblocksApi(datasource.getApiType())) {\n\t\t\treturn createNewDatasourceFrom(datasource, organizationId, visitorId);\n\t\t} else {\n\t\t\treturn createNewDatasource(organizationId, visitorId, datasource);\n\t\t}\n\t});\n}", "CodeBleu_score": 48.36164513687785}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t\treturn this.getDatasourceById(datasourceId)\n\t.flatMap(datasource -> {\n\t\tif (this.isSystemStatic(datasource)) {\n\t\t\treturn Mono.just(datasourceId);\n\t\t}\n\t\tif (this.isLegacyQuickRestApi(datasource)) {\n\t\t\treturn this.createNewDatasourceFromLegacyQuickRestApiDatasource(organizationId, datasourceId, visitorId);\n\t\t}\n\t\tif (this.isLegacyOpenblocksApi(datasource)) {\n\t\t\treturn this.createNewDatasourceFromLegacyOpenblocksApiDatasource(organizationId, datasourceId, visitorId);\n\t\t}\n\t\treturn this.createNewDatasource(organizationId, datasourceId, visitorId);\n\t});\n}", "CodeBleu_score": 34.58112965800536}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t return Mono.just(filePart)\n.map(Part::getInputStream)\n.map(InputStream::read)\n.flatMap(bytes -> {\n if (user.getAvatar()!= null) {\n return this.remove(user.getAvatar());\n }\n return Mono.empty();\n })\n.then(Mono.fromCallable(() -> {\n String fileName = filePart.getSubmittedFileName();\n String contentType = filePart.getContentType();\n String extension = fileName.substring(fileName.lastIndexOf(\".\"));\n String avatar = UUID.randomUUID().toString() + extension;\n this.upload(avatar, bytes, contentType);\n return this.updateUserAvatar(user, avatar);\n }))\n.map(user -> true);\n }", "CodeBleu_score": 40.075162334382675}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\treturn Mono.zip(\nMono.fromCallable(() -> {\nif (user.getAvatar()!= null) {\nreturn this.remove(user.getAvatar());\n}\nreturn null;\n}),\nMono.fromCallable(() -> {\nif (filePart.getSize() > 0) {\nreturn this.upload(filePart);\n}\nreturn null;\n}),\n(remove, upload) -> {\nif (remove!= null && upload!= null) {\nuser.setAvatar(upload);\nreturn this.updateUserAvatar(user);\n}\nreturn false;\n})\n.then(Mono.just(true));\n}", "CodeBleu_score": 23.26922720639522}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t return Mono.fromCallable(() -> {\n String fileName = filePart.getSubmittedFileName();\n String contentType = filePart.getContentType();\n if (fileName == null || fileName.isEmpty() || contentType == null || contentType.isEmpty()) {\n throw new IllegalArgumentException(\"Invalid file\");\n }\n String extension = fileName.substring(fileName.lastIndexOf('.'));\n if (!extension.equals(\".jpg\") &&!extension.equals(\".png\")) {\n throw new IllegalArgumentException(\"Invalid file type\");\n }\n String avatar = user.getAvatar();\n if (avatar!= null &&!avatar.isEmpty()) {\n removeAvatar(avatar);\n }\n String newAvatar = saveAvatar(filePart, user.getId(), extension);\n user.setAvatar(newAvatar);\n return userRepository.save(user).block()!= null;\n });\n}", "CodeBleu_score": 38.6889521155039}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t\tString username = authUser.getUsername();\n\tString source = authUser.getSource();\n\tString state = authUser.getState();\n\tString password = authUser.getPassword();\n\tString avatarLink = authUser.getAvatarLink();\n\tboolean isEnabled = authUser.getIsEnabled();\n\tboolean isNewUser = authUser.getIsNewUser();\n\tSet<String> connections = authUser.getConnections();\n\n\tif (source.equals(AuthSource.EMAIL) && password!= null) {\n\t\tpassword = encryptPassword(password);\n\t}\n\n\treturn userRepository.save(new User(username, source, state, password, avatarLink, isEnabled, isNewUser, connections))\n\t\t\t.flatMap(user -> {\n\t\t\t\tif (isNewUser) {\n\t\t\t\t\treturn userRepository.updateUserConnections(user.getId(), connections);\n\t\t\t\t} else {\n\t\t\t\t\treturn Mono.just(user);\n\t\t\t\t}\n\t\t\t});\n}", "CodeBleu_score": 33.6876800129548}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t\treturn Mono.just(authUser)\n\t\t.map(user -> {\n\t\t\tuser.setName(user.getDisplayName());\n\t\t\tuser.setState(UserState.ACTIVE);\n\t\t\tuser.setIsEnabled(true);\n\t\t\tuser.setTpAvatarLink(user.getAvatar());\n\t\t\tif (user.getAuthSource().equals(AuthSource.EMAIL) && user.getAuthContext().containsKey(\"password\")) {\n\t\t\t\tuser.setPassword(encryptPassword(user.getAuthContext().get(\"password\")));\n\t\t\t}\n\t\t\tuser.setConnections(newHashSet(new Connection(ConnectionType.EMAIL, user.getAuthContext().get(\"email\"))));\n\t\t\tuser.setIsNewUser(true);\n\t\t\treturn user;\n\t\t})\n\t\t.flatMap(user -> create(user))\n\t\t.map(user -> {\n\t\t\tuser.setAuthContext(newHashMap());\n\t\t\treturn user;\n\t\t});\n}", "CodeBleu_score": 38.88915757815353}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t\treturn Mono.just(authUser)\n\t\t.map(user -> {\n\t\t\tuser.setName(user.getFirstName() + \" \" + user.getLastName());\n\t\t\tuser.setState(user.getState());\n\t\t\tuser.setIsEnabled(true);\n\t\t\tuser.setAvatar(user.getTpAvatarLink());\n\t\t\tif (authUser.getAuthSource().equals(AuthSource.EMAIL) && authUser.getAuthContext()!= null) {\n\t\t\t\tString encryptedPassword = encryptPassword(authUser.getAuthContext().getPassword());\n\t\t\t\tuser.setPassword(encryptedPassword);\n\t\t\t}\n\t\t\tuser.setConnections(newHashSet(toAuthConnection(authUser)));\n\t\t\tuser.setIsNewUser(true);\n\t\t\treturn user;\n\t\t})\n\t\t.flatMap(user -> create(user));\n}", "CodeBleu_score": 42.63453109325213}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\treturn\nMono\n.zip(\nMono\n.just(user)\n.flatMap(\nu ->\nu\n.getConnections()\n.add(\nnew\nConnection(\nemail\n,\nConnectionSource\n.\nEMAIL\n)\n)\n)\n.flatMap(\nu ->\nu\n.save()\n)\n.onErrorResume(\ne ->\ne\n.\ngetClass\n(\n)\n.\nequals\n(\nDuplicateKeyException\n.\nclass\n)\n?\nMono\n.\njust\n(\nfalse\n)\n:\nMono\n.\nerror\n(\ne\n)\n)\n)\n.\nmap\n(\nv\n-\n>\nv\n)\n;\n}", "CodeBleu_score": 20.635916646482343}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\treturn\nMono\n.defer\n(\n()\n->\n{\ntry\n{\n//\n// Create the connection\n//\nConnection connection\n=\nnew\nConnection\n(\nuser\n.\ngetId\n(\n)\n,\nemail\n,\nConnectionSource\n.\nEMAIL\n)\n;\n//\n// Save the connection\n//\nreturn\nconnectionRepository\n.\nsave\n(\nconnection\n)\n;\n}\ncatch\n(\nDuplicateKeyException\ne\n)\n{\nreturn\nMono\n.\njust\n(\nfalse\n)\n.\ndoOnError\n(\nDuplicateEmailException\n.\nclass\n)\n;\n}\n}\n)\n.\nflatMap\n(\nconnection\n-\n>\n{\n//\n// Save the user\n//\nreturn\nuserRepository\n.\nsave\n(\nuser\n)\n;\n}\n)\n.\nonErrorResume\n(\nDuplicateEmailException\n.\nclass\n:\n:\nMono\n.\njust\n(\nfalse\n)\n)\n.\nthen\n(\nMono\n.\njust\n(\ntrue\n)\n)\n;\n}", "CodeBleu_score": 31.145633371073274}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\treturn", "CodeBleu_score": 4.439736572803697}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t\treturn findById(userId)\n\t\t.flatMap(user -> {\n\t\t\tif (user.getPassword().equals(oldPassword)) {\n\t\t\t\treturn Mono.just(true)\n\t\t\t\t\t.doOnNext(valid -> {\n\t\t\t\t\t\tif (valid) {\n\t\t\t\t\t\t\tuser.setPassword(encryptPassword(newPassword));\n\t\t\t\t\t\t\tuserRepository.save(user);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn Mono.error(new InvalidPasswordException());\n\t\t\t}\n\t\t});\n}", "CodeBleu_score": 19.153852153483626}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t\treturn findById(userId)\n\t\t.flatMap(user -> {\n\t\t\tif (!user.getPassword().equals(oldPassword)) {\n\t\t\t\treturn Mono.error(new IllegalArgumentException(\"Invalid old password\"));\n\t\t\t}\n\t\t\tuser.setPassword(encryptPassword(newPassword));\n\t\t\treturn save(user);\n\t\t})\n\t\t.map(user -> true);\n}", "CodeBleu_score": 15.081023591854148}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\treturn findById(userId)\n.flatMap(user -> {\nif (user.getPassword().equals(oldPassword)) {\nuser.setPassword(encryptPassword(newPassword));\nreturn save(user);\n}\nreturn Mono.error(new InvalidPasswordException(\"Invalid password\"));\n});\n}", "CodeBleu_score": 14.198641481754981}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\treturn Mono.zip(Mono.just(orgMember), Mono.just(userId),\n(orgMember, userId) -> {\nList<String> userGroupIds = orgMember.isAdmin()? orgMember.getUserGroupIdsInOrg() : orgMember.getNonDynamicUserGroupIdsInOrg();\nif (withoutDynamicGroups) {\nuserGroupIds = userGroupIds.stream()\n.filter(id ->!id.equals(ALL_USERS_GROUP_ID))\n.collect(Collectors.toList());\n}\nreturn userGroupIds.stream()\n.map(id -> {\nreturn Mono.zip(Mono.just(id), Mono.just(locale),\n(id, locale) -> {\nreturn userGroupService.getById(id)\n.map(group -> {\nreturn Map.of(\n\"id\", group.getId(),\n\"name\", group.getName(locale)\n);\n});\n});\n})\n.collect(Collectors.toList());\n})\n.flatMapMany(Function.identity())\n.collectList()\n.map(groups -> {\nreturn groups.stream()\n.filter(group ->!group.get(\"id\").equals(ALL_USERS_GROUP_ID))\n.collect(Collectors.toList());\n});\n}", "CodeBleu_score": 39.85648519308377}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t\treturn Mono.zip(Mono.just(orgMember), getOrgId(orgMember), getNonDynamicUserGroupIdsInOrg(orgMember),\n\t\t\tgetUserGroupIdsInOrg(orgMember), getByIds(orgMember, withoutDynamicGroups),\n\t\t\tisAdmin(orgMember).map(isAdmin -> isAdmin? getOrgAdminGroupIds(orgMember) : Mono.empty()))\n\t\t\t.map(tuple -> {\n\t\t\t\tList<String> nonDynamicUserGroupIds = tuple.getT3();\n\t\t\t\tList<String> userGroupIdsInOrg = tuple.getT4();\n\t\t\t\tList<UserGroup> allUserGroups = tuple.getT5();\n\t\t\t\tList<UserGroup> adminGroups = tuple.getT6();\n\t\t\t\tList<UserGroup> allGroups = nonDynamicUserGroupIds.stream().map(id -> allUserGroups.stream().filter(group -> group.getId().equals(id)).findFirst().orElse(null))\n\t\t\t\t\t\t.filter(Objects::nonNull).collect(Collectors.toList());\n\t\t\t\tList<UserGroup> userGroups = userGroupIdsInOrg.stream().map(id -> allUserGroups.stream().filter(group -> group.getId().equals(id)).findFirst().orElse(null))\n\t\t\t\t\t\t.filter(Objects::nonNull).collect(Collectors.toList());\n\t\t\t\tList<UserGroup> allGroupsWithLocalizedNames = allGroups.stream().map(group -> {\n\t\t\t\t\tString name = group.getName(locale);\n\t\t\t\t\treturn Map.of(\"id\", group.getId(), \"name\", name);\n\t\t\t\t}).collect(Collectors.toList());\n\t\t\t\tList<UserGroup> userGroupsWithLocalizedNames = userGroups.stream().map(group -> {\n\t\t\t\t\tString name = group.getName(locale);\n\t\t\t\t\treturn Map.of(\"id\", group.getId(), \"name\", name);\n\t\t\t\t}).collect(Collectors.toList());\n\t\t\t\tList<UserGroup> adminGroupsWithLocalizedNames = adminGroups.stream().map(group -> {\n\t\t\t\t\tString name = group.getName(locale);\n\t\t\t\t\treturn Map.of(\"id\", group.getId(), \"name\", name);\n\t\t\t\t}).collect(Collectors.toList());\n\t\t\t\treturn List.of(Map.of(\"id\", userId, \"userGroups\", userGroupsWithLocalizedNames, \"allGroups\", allGroupsWithLocalizedNames, \"adminGroups\", adminGroupsWithLocalizedNames));\n\t\t\t});\n}", "CodeBleu_score": 35.40000213302727}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t\treturn Mono.zip(Mono.just(userId), Mono.just(orgMember), Mono.just(withoutDynamicGroups), Mono.just(locale))\n\t\t\t.flatMapMany(tuple -> {\n\t\t\t\tString userId = tuple.getT1();\n\t\t\t\tOrgMember orgMember = tuple.getT2();\n\t\t\t\tboolean withoutDynamicGroups = tuple.getT3();\n\t\t\t\tLocale locale = tuple.getT4();\n\t\t\t\treturn buildUserDetailGroups(userId, orgMember, withoutDynamicGroups, locale);\n\t\t\t});\n}", "CodeBleu_score": 24.260874861755383}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\treturn mongoUpsertHelper.upsert(\n\t\tUserStatus.class,\n\t\tnew UserStatus(userId),\n\t\tUserStatus::setHasShowNewUserGuidance,\n\t\ttrue\n\t);\n}", "CodeBleu_score": 17.734340690063323}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\treturn mongoUpsertHelper.upsert(\n\t\tUserStatus.collectionName,\n\t\tnew UserStatus(userId, true),\n\t\tUserStatus.class\n\t);\n}", "CodeBleu_score": 16.401130441478873}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\treturn mongoUpsertHelper.upsert(UserStatus.class, new Document(UserStatus.USER_ID_FIELD, userId),\n\t\t\tnew Document(UserStatus.HAS_SHOW_NEW_USER_GUIDANCE_FIELD, true));\n}", "CodeBleu_score": 19.032389647863234}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\npanic(\"predicatePartition is nil\")\n}\nif predicateValue == nil {\npanic(\"predicateValue is nil\")\n}\ng := rungroup.Run(c.options.PartitionCount)\nfor i := 0; i < c.options.PartitionCount; i++ {\nif predicatePartition(c.partitions[i].Name(), c.partitions[i]) {\ng.Enqueue(func() {\nc.partitions[i].ClearMatching(predicateValue)\n})\n}\n}\ng.Wait()\n}", "CodeBleu_score": 33.583709676076246}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\tg := new(rungroup.Group)\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.Name(), p) {\n\t\t\tg.Enqueue(func() {\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t})\n\t\t}\n\t}\n\tg.Wait()\n}", "CodeBleu_score": 36.583986056367536}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\npanic(\"predicatePartition cannot be nil\")\n}\nif predicateValue == nil {\npanic(\"predicateValue cannot be nil\")\n}\ng := new(errgroup.Group)\nfor _, p := range c.partitions {\nif predicatePartition(p.Name(), p) {\ng.Go(func() error {\nreturn p.ClearMatching(predicateValue)\n})\n}\n}\nif err := g.Wait(); err!= nil {\npanic(err)\n}\n}", "CodeBleu_score": 37.64874740315007}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif maxItemsTotal <= 0 || totalWeightQuantity <= 0 || numPartitions <= 0 {\n\t\tpanic(\"invalid input\")\n\t}\n\taverageWeightPerPartition := totalWeightQuantity / numPartitions\n\treturn int(math.Floor(float64(maxItemsTotal) / float64(averageWeightPerPartition)))\n}", "CodeBleu_score": 48.644817292682355}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\tpanic(\"Invalid input\")\n\t}\n\n\taverageWeightPerPartition := totalWeightQuantity / numPartitions\n\tmaxSizePerPartition := int(math.Floor(float64(averageWeightPerPartition)))\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 45.31641237415097}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif maxItemsTotal <= 0 || totalWeightQuantity <= 0 || numPartitions <= 0 {\n\t\tpanic(\"Invalid input: maxItemsTotal, totalWeightQuantity, and numPartitions must be greater than zero\")\n\t}\n\n\taverageWeightPerPartition := totalWeightQuantity / numPartitions\n\tmaxSizePerPartition := int(math.Floor(float64(averageWeightPerPartition) * 1.25))\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 46.25506302677425}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\tMap<String, Object> contributorMap = new HashMap<>();\nDatabaseConnectionMetadata metadata = getConnectionMetadata();\nif (metadata!= null) {\ncontributorMap.put(DatabaseConnectionMetadata.PRODUCT_NAME, getDatabaseProductName());\ncontributorMap.put(DatabaseConnectionMetadata.PRODUCT_VERSION, getDatabaseVersion());\n}\nreturn contributorMap;\n}", "CodeBleu_score": 34.251342438486155}, {"code": "public Map<String, Object> contributorMap(){\n\tMap<String, Object> contributorMap = new HashMap<>();\nDatabaseMetaData databaseMetaData = getConnection().getMetaData();\nif (databaseMetaData!= null) {\ncontributorMap.put(DatabaseConnectionContributor.DATABASE_PRODUCT_NAME, getDatabaseProductName());\ncontributorMap.put(DatabaseConnectionContributor.DATABASE_VERSION, getDatabaseVersion());\n}\nreturn contributorMap;\n}", "CodeBleu_score": 36.12168663010954}, {"code": "public Map<String, Object> contributorMap(){\n\tMap<String, Object> map = new HashMap<>();\nDatabaseConnectionMetadata metadata = getDatabaseConnectionMetadata();\nif (metadata!= null) {\nmap.put(\"product\", getDatabaseProductName());\nmap.put(\"version\", getDatabaseVersion());\n}\nreturn map;\n}", "CodeBleu_score": 34.541589932104706}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tif (configMap == null) {\n\t\tinfo.setMustVerifyEmailOnRegistration(false);\n\t\tinfo.setAllowRegistration(false);\n\t} else {\n\t\tinfo.setMustVerifyEmailOnRegistration(configMap.get(\"mustVerifyEmailOnRegistration\", Boolean.class));\n\t\tinfo.setAllowRegistration(configMap.get(\"allowRegistration\", Boolean.class));\n\t}\n}", "CodeBleu_score": 28.739637824743227}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tif (configMap == null) {\ninfo.setMustVerifyEmailOnRegistration(false);\ninfo.setAllowRegistration(false);\n} else {\ninfo.setMustVerifyEmailOnRegistration(configMap.getBoolean(\"mustVerifyEmailOnRegistration\"));\ninfo.setAllowRegistration(configMap.getBoolean(\"allowRegistration\"));\n}\n}", "CodeBleu_score": 27.18076967782579}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tif (configMap == null) {\n\t\tinfo.setMustVerifyEmailOnRegistration(false);\n\t\tinfo.setAllowRegistration(false);\n\t} else {\n\t\tinfo.setMustVerifyEmailOnRegistration(configMap.getBoolean(MUST_VERIFY_EMAIL_ON_REGISTRATION));\n\t\tinfo.setAllowRegistration(configMap.getBoolean(ALLOW_REGISTRATION));\n\t}\n}", "CodeBleu_score": 25.57780275013145}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\t\t// Create a new thread group and thread to execute the restart process\n\tThreadGroup group = new ThreadGroup(\"Restart\");\n\tThread thread = new Thread(group, \"Restart\") {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\t// Set the thread as non-daemon and assign the application class loader as its context class loader\n\t\t\tsetDaemon(false);\n\t\t\tsetContextClassLoader(getClassLoader());\n\t\t\t// Start the restart process\n\t\t\trestartProcess();\n\t\t}\n\t};\n\t// Start the thread\n\tthread.start();\n\t// Return a message indicating the restart has begun\n\treturn \"Application restart has begun.\";\n}", "CodeBleu_score": 46.55865640726539}, {"code": "public Object restart(){\n\t\tThreadGroup group = new ThreadGroup(\"Application restart\");\n\tThread thread = new Thread(group, new Runnable() {\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tsetContextClassLoader(getClassLoader());\n\t\t\t\tsetDaemon(false);\n\t\t\t\trestart(false);\n\t\t\t} catch (Throwable t) {\n\t\t\t\tt.printStackTrace();\n\t\t\t}\n\t\t}\n\t});\n\tthread.start();\n\treturn \"Application restart has begun.\";\n}", "CodeBleu_score": 39.32034999283248}, {"code": "public Object restart(){\n\t\tThreadGroup group = new ThreadGroup(\"Restart Thread Group\");\n\tThread thread = new Thread(group, new Runnable() {\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tsetContextClassLoader(getClassLoader());\n\t\t\t\tsetDaemon(false);\n\t\t\t\trestart();\n\t\t\t} catch (Throwable t) {\n\t\t\t\tt.printStackTrace();\n\t\t\t}\n\t\t}\n\t}, \"Restart Thread\");\n\tthread.start();\n\treturn \"Restarting application...\";\n}", "CodeBleu_score": 41.66942294359918}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t configurer.defaultCodecs().jackson2JsonDecoder(objectMapper);\n configurer.defaultCodecs().jackson2JsonEncoder(objectMapper);\n }", "CodeBleu_score": 47.02052549432227}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t configurer.defaultCodecs().jackson2JsonEncoder(objectMapper);\n configurer.defaultCodecs().jackson2JsonDecoder(objectMapper);\n }", "CodeBleu_score": 47.02052549432227}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t configurer.defaultCodecs().jackson2JsonEncoder(objectMapper)\n.jackson2JsonDecoder(objectMapper);\n }", "CodeBleu_score": 29.312992030173003}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t\treturn RouterFunctions\n\t\t\t.path(\"/console/**\", \"/console/assets/**\")\n\t\t\t.predicate(negate(isWebSocket()))\n\t\t\t.and(accept(MediaType.TEXT_HTML))\n\t\t\t.and(route(GET, \"/console/**\", \"/console/assets/**\"))\n\t\t\t.and(serveIndex(\"console/index.html\", \"index.html\"));\n}", "CodeBleu_score": 22.39319867040068}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t\treturn route(GET(\"/console/**\").and(not(path(\"/console/assets/**\"))),\n\t\t\trequest -> ServerResponse.ok().contentType(MediaType.TEXT_HTML).syncBody(\n\t\t\t\t\tnew ClassPathResource(\"static/console/index.html\")));\n}", "CodeBleu_score": 19.815388526400685}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t\treturn GET(\"/console/**\")\n\t\t\t.and(negate(path(\"/console/assets/**\")))\n\t\t\t.and(accept(MediaType.TEXT_HTML))\n\t\t\t.and(negate(isWebSocketRequest()))\n\t\t\t.and(path(\"/console/**\"))\n\t\t\t.and(routeTo(indexFile(\"/console/index.html\")));\n}", "CodeBleu_score": 24.960643467561468}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t\treturn GET()\n\t\t\t.and(path(\"/uc/**\"))\n\t\t\t.and(not(path(\"/uc/assets/**\")))\n\t\t\t.and(accept(MediaType.TEXT_HTML))\n\t\t\t.and(negate(exchange -> exchange.getAttribute(WebFluxServerWebExchangeUtils.WEBSOCKET_HANDSHAKE_ATTRIBUTE)))\n\t\t\t.and(exchange -> {\n\t\t\t\tString location = exchange.getAttribute(WebFluxServerWebExchangeUtils.LOCATION_ATTRIBUTE);\n\t\t\t\treturn ServerResponse.ok()\n\t\t\t\t\t\t.contentType(MediaType.TEXT_HTML)\n\t\t\t\t\t\t.header(HttpHeaders.LOCATION, location + \"/index.html\")\n\t\t\t\t\t\t.build();\n\t\t\t});\n}", "CodeBleu_score": 28.29375543857342}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t\treturn GET(\"/uc/**\")\n\t\t\t.and(negate(path(\"/uc/assets/**\")))\n\t\t\t.and(accept(MediaType.TEXT_HTML))\n\t\t\t.and(negate(method(HttpMethod.GET, \"/uc/ws\")))\n\t\t\t.and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and(and", "CodeBleu_score": 14.554976518147416}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t\treturn route(GET(\"/uc/**\").and(negate(method(GET, \"/uc/assets/**\"))),\n\t\t\trequest -> request.accept(MediaType.TEXT_HTML).flatMap(a -> {\n\t\t\t\tString ucPath = request.path().get();\n\t\t\t\tif (ucPath.startsWith(\"/uc/assets/\")) {\n\t\t\t\t\treturn getUc().flatMap(uc -> ServerResponse.notFound().build());\n\t\t\t\t} else {\n\t\t\t\t\treturn ServerResponse.ok().location(Path.of(ucPath)).build();\n\t\t\t\t}\n\t\t\t}));\n}", "CodeBleu_score": 28.273940498945514}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\tstatic {\n\t\tReactiveIndexedSessionRepository.setDefaultConcurrentSessionMap(new ConcurrentHashMap<>());\n\t}\n\tstatic {\n\t\tReactiveIndexedSessionRepository.setDefaultMaxInactiveInterval(60);\n\t}\n\tstatic {\n\t\tReactiveIndexedSessionRepository.setDefaultTimeout(60);\n\t}\n\tstatic {\n\t\tReactiveIndexedSessionRepository.setDefaultReactiveSessionRepository(new ReactiveIndexedSessionRepository<>());\n\t}\n\n\t/**\n\t * Creates and configures an in-memory reactive session repository.\n\t * @param sessionMap the map to use for storing sessions\n\t * @param maxInactiveInterval the default session timeout\n\t * @param timeout the default session timeout\n\t * @return the configured repository\n\t */\n\tpublic static ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository(Map<String,?> sessionMap, int maxInactiveInterval, int timeout) {\n\t\tReactiveIndexedSessionRepository<MapSession> repository = new ReactiveIndexedSessionRepository<>();\n\t\trepository.setConcurrentSessionMap(sessionMap);\n\t\trepository.setMaxInactiveInterval(maxInactiveInterval);\n\t\trepository.setTimeout(timeout);\n\t\treturn repository;\n\t}\n\n\t/**\n\t * Creates and configures an in-memory reactive session repository.\n\t * @param sessionMap the map to use for storing sessions\n\t * @param maxInactiveInterval the default session timeout\n\t * @return the configured repository\n\t */\n\tpublic static ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository(Map<String,?> sessionMap, int maxInactiveInterval) {\n\t\treturn reactiveSessionRepository(sessionMap, maxInactiveInterval, maxInactiveInterval);\n\t}\n\n\t/**\n\t * Creates and configures an in-memory reactive session repository.\n\t * @param sessionMap the map to use for storing sessions\n\t * @return the configured repository\n\t */\n\tpublic static ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository(Map<String,?> sessionMap) {\n\t\treturn reactiveSessionRepository(sessionMap, 60);\n\t}\n\n\t/**\n\t * Creates and configures an in-memory reactive session repository.\n\t * @param maxInactiveInterval the default session timeout\n\t * @return the configured repository\n\t */\n\tpublic static ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository(int maxInactiveInterval) {\n\t\treturn reactiveSessionRepository(new ConcurrentHashMap<>(), maxInactiveInterval);\n\t}\n\n\t/**\n\t * Creates and configures an in", "CodeBleu_score": 29.84306305308625}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\t/**\n\t * This function creates and configures an in-memory reactive session repository. It initializes the repository with a concurrent hash map and sets the default session timeout based on properties from the session and server configurations. The configured repository is then returned.\n\t */\n\tpublic ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository {\n\t\t/**\n\t\t * This function creates and configures an in-memory reactive session repository. It initializes the repository with a concurrent hash map and sets the default session timeout based on properties from the session and server configurations. The configured repository is then returned.\n\t\t */\n\t\tpublic ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository {\n\t\t\t/**\n\t\t\t * This function creates and configures an in-memory reactive session repository. It initializes the repository with a concurrent hash map and sets the default session timeout based on properties from the session and server configurations. The configured repository is then returned.\n\t\t\t */\n\t\t\tpublic ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository {\n\t\t\t\t/**\n\t\t\t\t * This function creates and configures an in-memory reactive session repository. It initializes the repository with a concurrent hash map and sets the default session timeout based on properties from the session and server configurations. The configured repository is then returned.\n\t\t\t\t */\n\t\t\t\tpublic ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository {\n\t\t\t\t\t/**\n\t\t\t\t\t * This function creates and configures an in-memory reactive session repository. It initializes the repository with a concurrent hash map and sets the default session timeout based on properties from the session and server configurations. The configured repository is then returned.\n\t\t\t\t\t */\n\t\t\t\t\tpublic ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository {\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * This function creates and configures an in-memory reactive session repository. It initializes the repository with a concurrent hash map and sets the default session timeout based on properties from the session and server configurations. The configured repository is then returned.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tpublic ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository {\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * This function creates and configures an in-memory reactive session repository. It initializes the repository with a concurrent hash map and sets the default session timeout based on properties from the session and server configurations. The configured repository is then returned.\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tpublic ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository {\n\t\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t\t * This function creates and configures an in-memory reactive session repository. It initializes the repository with a concurrent hash map and sets the default session timeout based on properties", "CodeBleu_score": 13.544412217285707}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\tdef sessionRepository = new ReactiveIndexedSessionRepository<>(new ConcurrentHashMapSessionRepository())\n\tdef timeout = sessionRepository.determineTimeout()\n\tsessionRepository.setDefaultMaxInactiveInterval(timeout)\n\treturn sessionRepository\n}", "CodeBleu_score": 30.514027645351355}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\n}", "CodeBleu_score": 8.115039031832884}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\nDefaultUserDetailService userDetailsService = new DefaultUserDetailService();\n\nuserDetailsService.setUserDetailsService(userService);\nuserDetailsService.setRoleService(roleService);\n\nuserDetailsService.setTwoFactorAuthEnabled(haloProperties.getSecurity().isTwoFactorAuthEnabled());\n\nreturn userDetailsService;\n}", "CodeBleu_score": 38.3800628764668}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\tDefaultUserDetailService userDetailsService = new DefaultUserDetailService();\n\tuserDetailsService.setUserDetailsService(userService);\n\tuserDetailsService.setRoleService(roleService);\n\tuserDetailsService.setEnableTwoFactorAuthentication(haloProperties.getSecurity().isTwoFactorAuthenticationEnabled());\n\treturn userDetailsService;\n}", "CodeBleu_score": 37.004882007078955}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\tString email = getEmail();\nif (email == null) {\nemail = \"\";\n}\nComment.CommentOwner owner = new Comment.CommentOwner();\nowner.setKind(\"email\");\nowner.setDisplayName(getDisplayName());\nowner.setEmail(email);\nowner.setAnnotations(new Comment.CommentOwner.Annotations());\nComment.CommentOwner.Annotations annotations = owner.getAnnotations();\nannotations.setAvatar(new Comment.CommentOwner.Annotations.Avatar());\nComment.CommentOwner.Annotations.Avatar avatar = annotations.getAvatar();\navatar.setUrl(getAvatarUrl());\navatar.setHeight(getAvatarHeight());\navatar.setWidth(getAvatarWidth());\nannotations.setWebsite(getWebsite());\nreturn owner;\n}", "CodeBleu_score": 33.69488223009955}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\tComment.CommentOwner commentOwner = new Comment.CommentOwner", "CodeBleu_score": 6.47608029354242}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\treturn new Comment.CommentOwner", "CodeBleu_score": 2.936893489716241}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tif (commentOwner.getKind() == Comment.CommentOwner.Kind.EMAIL) {\nUser user = fetchUser(commentOwner.getName());\nreturn user.getEmail().equals(post.getOwner().getEmail());\n} else {\nreturn commentOwner.getName().equals(post.getOwner().getName());\n}\n}", "CodeBleu_score": 31.093413469955973}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tif (commentOwner.getKind() == Comment.CommentOwner.Kind.EMAIL) {\nUser user = fetch(commentOwner.getName());\nreturn user.getEmail().equals(post.getOwner().getEmail());\n} else {\nreturn commentOwner.getName().equals(post.getOwner().getName());\n}\n}", "CodeBleu_score": 30.27426098144056}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (commentOwner.getKind() == Comment.CommentOwner.Kind.EMAIL) {\n\t\tUser user = fetch(commentOwner.getName());\n\t\treturn user.getEmail().equals(post.getOwner().getName());\n\t} else {\n\t\treturn commentOwner.getName().equals(post.getOwner().getName());\n\t}\n}", "CodeBleu_score": 29.6567210072248}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\tListOptions listOptions = new ListOptions();\nString fieldQuery = getFieldSelector();\nif (fieldQuery!= null && fieldQuery.length() > 0) {\nlistOptions.setQuery(fieldQuery);\n}\nif (getLabelSelector()!= null && getLabelSelector().length() > 0) {\nlistOptions.setQuery(listOptions.getQuery() + \" AND \" + getLabelSelector());\n}\nif (getOwnerKind()!= null && getOwnerKind().length() > 0) {\nlistOptions.setQuery(listOptions.getQuery() + \" AND \" + getOwnerKind());\n}\nif (getOwnerIdentity()!= null && getOwnerIdentity().length() > 0) {\nlistOptions.setQuery(listOptions.getQuery() + \" AND \" + getOwnerIdentity());\n}\nif (getKeyword()!= null && getKeyword().length() > 0) {\nlistOptions.setQuery(listOptions.getQuery() + \" AND \" + getKeyword());\n}\nlistOptions.setFieldSelector(fieldQuery);\nreturn listOptions;\n}", "CodeBleu_score": 27.231159258390697}, {"code": "public ListOptions toListOptions(){\n\tListOptions listOptions = new ListOptions();\n\n// Build field query\nString fieldQuery = \"\";\nif (isNotBlank(getLabelSelector())) {\nfieldQuery += \"label:\" + getLabelSelector();\n}\nif (isNotBlank(getFieldSelector())) {\nif (isNotBlank(fieldQuery)) {\nfieldQuery += \" AND \";\n}\nfieldQuery += \"field:\" + getFieldSelector();\n}\n\n// Add conditions based on keyword and owner name\nif (isNotBlank(getKeyword())) {\nfieldQuery += \" AND name:\" + getKeyword();\n}\nif (isNotBlank(getOwnerIdentity())) {\nfieldQuery += \" AND owner:\" + getOwnerIdentity();\n}\n\n// Set field query in ListOptions object\nlistOptions.setFieldQuery(fieldQuery);\nreturn listOptions;\n}", "CodeBleu_score": 26.10813095526561}, {"code": "public ListOptions toListOptions(){\n\tListOptions listOptions = new ListOptions();\n\nString fieldSelector = getFieldSelector();\nif (fieldSelector!= null) {\nlistOptions.setFieldSelector(fieldSelector);\n}\n\nif (getKeyword()!= null) {\nString query = getKeyword();\nif (getOwnerKind()!= null && getOwnerName()!= null) {\nquery = String.format(\"%s ownerKind=%s ownerName=%s\", query, getOwnerKind(), getOwnerName());\n}\nlistOptions.setQuery(query);\n}\n\nreturn listOptions;\n}", "CodeBleu_score": 26.826594450221837}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\treturn Mono.just(commentName)", "CodeBleu_score": 20.17332821904795}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\treturn Mono.just(commentName)\n\t\t.filter(notNull())\n\t\t.flatMap(nameOf(commentName))\n\t\t.map(getUpvote())\n\t\t.map(upvoteCount -> new CommentStats(commentName, upvoteCount));\n}", "CodeBleu_score": 29.985130943828963}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\treturn Mono\n.just(commentName)\n.filter(notNull())\n.flatMap(commentName -> getCounter(commentName)\n.map(upvote -> CommentStats.builder()\n.commentName(commentName)\n.upvoteCount(upvote)\n.build()));\n}", "CodeBleu_score": 43.25440968317501}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\t\tSubscriber subscriber = createSubscriber(identity);\n\tsetReasonType(subscriber, \"someone replied to you\");\n\tsetExpression(subscriber, identity.getName());\n\tsubscribe(subscriber);\n\tblock(subscriber);\n}", "CodeBleu_score": 23.408913852032224}, {"code": "void subscribeReply(UserIdentity identity){\n\t\tSubscriber subscriber = createSubscriber(identity);\n\tif (subscriber == null) {\n\t\tSystem.out.println(\"Could not create subscriber\");\n\t\treturn;\n\t}\n\n\tsetReasonType(subscriber, \"someone replied to you\");\n\tsetExpression(subscriber, \"replyToOwner(\" + identity.getName() + \")\");\n\tsubscribe(subscriber);\n\tblock(subscriber);\n}", "CodeBleu_score": 37.60450004183649}, {"code": "void subscribeReply(UserIdentity identity){\n\t\tSubscriber subscriber = createSubscriber(identity);\n\tif (subscriber!= null) {\n\t\tsetReasonType(subscriber, \"someone replied to you\");\n\t\tsetExpression(subscriber, \"ownerName == \" + identity.getName());\n\t\tsubscribe(subscriber);\n\t\tblock(subscriber);\n\t}\n}", "CodeBleu_score": 29.35000177627929}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\treturn commentRepository\n.findById(comment.getId())\n.flatMap(foundComment -> {\nif (foundComment.isApproved()) {\nreturn Mono.just(foundComment);\n}\nreturn commentRepository\n.save(comment.toBuilder()\n.approved(true)\n.approvedTime(now())\n.build());\n})\n.onErrorResume(OptimisticLockingFailureException.class, e -> {\nlog.warn(\"Optimistic locking failure, retrying update\", e);\nreturn commentRepository\n.findById(comment.getId())\n.flatMap(foundComment -> {\nif (foundComment.isApproved()) {\nreturn Mono.just(foundComment);\n}\nreturn commentRepository\n.save(comment.toBuilder()\n.approved(true)\n.approvedTime(now())\n.build());\n});\n});\n}", "CodeBleu_score": 36.47627019091741}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\treturn commentRepository\n.findById(comment.getId())\n.flatMap(\nexistingComment -> {\nif (existingComment.getApproved()) {\nreturn Mono.just(existingComment);\n}\ncomment.setApproved(true);\ncomment.setApprovedTime(now());\nreturn commentRepository\n.save(comment);\n}\n)\n.onErrorResume(\nOptimisticLockingFailureException.class,\ne -> {\nlog.warn(\"Optimistic locking failure when updating comment with id \" + comment.getId());\nreturn commentRepository\n.findById(comment.getId())\n.flatMap(\nexistingComment -> {\nif (existingComment.getApproved()) {\nreturn Mono.just(existingComment);\n}\ncomment.setApproved(true);\ncomment.setApprovedTime(now());\nreturn commentRepository\n.save(comment);\n}\n);\n}\n)\n.switchIfEmpty(Mono.just(comment));\n}", "CodeBleu_score": 34.605853291393686}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\treturn this\n.updateCommentWithRetry\n(comment\n.withApproved(true)\n.withApprovedTime(ZonedDateTime.now())\n)\n.onErrorResume(OptimisticLockingFailureException.class\n, this\n::updateCommentWithRetry\n)\n;\n}", "CodeBleu_score": 17.26750704487961}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\tif ($action instanceof MountableAction) {\n\t\t$action->setLivewire($this);\n\t}\n\tif ($action instanceof HasRecord && $this->getRecord()) {\n\t\t$action->setRecord($this->getRecord());\n\t}\n\treturn $action;\n}", "CodeBleu_score": 55.12084927642296}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction && $this->getLivewire() instanceof Livewire) {\n$action->livewire = $this->getLivewire();\n}\n\nif ($action instanceof HasRecord && $this->getRecord()) {\n$action->record = $this->getRecord();\n}\n\nreturn $action; }", "CodeBleu_score": 44.63566035611517}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction) {\n$action->setLivewire($this);\n}\nif ($action instanceof HasRecord) {\n$action->setRecord($this->getRecord());\n}\nreturn $action; }", "CodeBleu_score": 53.43632206450376}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\tif (empty($this->successRedirectUrl)) { return $this;\n}\n\n$this->evaluate($this->successRedirectUrl);\n\nif (!empty($this->successRedirectUrl)) { return$this->redirect($this->successRedirectUrl); } return$this;\n}", "CodeBleu_score": 26.386076529385626}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t\tif (empty($this->successRedirectUrl)) {\n\t\treturn $this;\n\t}\n\n\t$this->evaluate\n\t$this->redirect\n\n\treturn $this;\n}", "CodeBleu_score": 28.439886022488775}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$this->evaluate\n$this->redirect\nreturn $this\n}", "CodeBleu_score": 13.027483240828207}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tf (!$record?->hasMethod('tags')?? true) {\n    return;\n}\n\n$tagClassName = $this->getTagClassName();\n\n$tagIds = collect($state)->map(function ($tagName) use ($tagClassName) {\n    $locale = $tagClassName::getLocale();\n\n    $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n    if ($tag?->isEmpty()?? true) {\n        $tag = $tagClassName::create([\n            'name' => [$locale => $tagName],\n        ]);\n    }\n\n    return $tag->id;\n})->flatten;\n\n$record->tags()->sync($tagIds);\n}", "CodeBleu_score": 66.98453402486841}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\trecord->tags", "CodeBleu_score": 7.242990654206022}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tf ($record?->hasMethod('tags')?? false) {\n            $tagClassName = $this->getTagModelClass();\n\n            $this->syncTags($record, $tagClassName, $state);\n        }\n    }", "CodeBleu_score": 16.883244111484743}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// Dissect the repository path to obtain the space path and repository name.\n\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err!= nil {\n\t\treturn fmt.Errorf(\"dissecting repository path %q failed: %w\", repoPath, err)\n\t}\n\n\t// Create a scope and resource for the pipeline.\n\tscope := auth.NewScope(auth.ScopeSpace, spacePath)\n\tresource := auth.NewResource(auth.ResourceRepository, repoName)\n\n\t// Perform the authorization check.\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 55.88214250876054}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// Dissect the repository path to obtain the space path and repository name.\n\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err!= nil {\n\t\treturn fmt.Errorf(\"error dissecting repository path: %w\", err)\n\t}\n\n\t// Create a scope and resource for the pipeline.\n\tscope := authz.Scope{\n\t\tSpace:  spacePath,\n\t\tEntity: repoName,\n\t}\n\tresource := authz.Resource{\n\t\tType:  enum.PipelineResourceType,\n\t\tScope: scope,\n\t}\n\n\t// Perform the authorization check.\n\treturn authorizer.Check(ctx, session, resource, permission)\n}", "CodeBleu_score": 62.52208578914002}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tscope, resource, err := paths.DisectLeaf(repoPath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 31.43459669506599}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tvar err error\n\tif space.ParentSpaceID!= nil {\n\t\tparentSpace, err := GetSpace(*space.ParentSpaceID)\n\t\tif err!= nil {\n\t\t\treturn err\n\t\t}\n\t\tspace.ParentSpaceID = &parentSpace.ID\n\t\tspace.ParentSpaceName = parentSpace.Name\n\t}\n\tscope := &authz.Scope{\n\t\tType: authz.ScopeTypeSpace,\n\t\tID:   &space.ID,\n\t\tName: space.Name,\n\t}\n\tresource := &authz.Resource{\n\t\tType: authz.ResourceTypeSpace,\n\t\tID:   &space.ID,\n\t\tName: space.Name,\n\t}\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 50.33114310793471}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tif authorizer == nil {\n\t\treturn fmt.Errorf(\"authorizer is nil\")\n\t}\n\tif session == nil {\n\t\treturn fmt.Errorf(\"session is nil\")\n\t}\n\tif space == nil {\n\t\treturn fmt.Errorf(\"space is nil\")\n\t}\n\tif permission == enum.Permission_PERMISSION_NONE {\n\t\treturn fmt.Errorf(\"permission is PERMISSION_NONE\")\n\t}\n\n\tscope, resource, err := paths.DisectLeaf(space.Path)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 49.883084003850556}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tif space == nil {\n\t\treturn fmt.Errorf(\"space is nil\")\n\t}\n\n\tparentSpace, name, err := paths.DisectLeaf(space.Path)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\tscope, err := auth.GetScope(ctx, authorizer, session, parentSpace)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\tresource, err := auth.GetResource(ctx, authorizer, session, parentSpace, name)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\treturn auth.Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 57.873640775585656}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\treturn json.Marshal(data)\n\t}\n\n\tvar decodedData map[string]any\n\tif err := json.NewDecoder(bytes.NewReader(source)).Decode(&decodedData); err!= nil {\n\t\treturn nil, err\n\t}\n\n\tif err := json.NewEncoder(buffer).Encode(data); err!= nil {\n\t\treturn nil, err\n\t}\n\n\tsanitizedJSON := buffer.Bytes()\n\tif len(sanitizedJSON) > 0 && sanitizedJSON[len(sanitizedJSON)-1] == '\n' {\n\t\tsanitizedJSON = sanitizedJSON[:len(sanitizedJSON)-1]\n\t}\n\n\treturn sanitizedJSON, nil\n}", "CodeBleu_score": 54.874968789880526}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource, err := json.Marshal(data)\n\t\tif err!= nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn source, nil\n\t}\n\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\tif err := decoder.Decode(data); err!= nil {\n\t\treturn nil, err\n\t}\n\n\tencoder := json.NewEncoder(buffer.New(nil))\n\tencoder.SetEscapeHTML(false)\n\tif err := encoder.Encode(data); err!= nil {\n\t\treturn nil, err\n\t}\n\n\tresult := buffer.Bytes()\n\tif len(result) > 0 && result[len(result)-1] == '\n' {\n\t\tresult = result[:len(result)-1]\n\t}\n\n\treturn result, nil\n}", "CodeBleu_score": 66.25109664165969}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\treturn json.Marshal(data)\n\t}\n\n\tvar decodedData map[string]any\n\terr := json.NewDecoder(bytes.NewReader(source)).Decode(&decodedData)\n\tif err!= nil {\n\t\treturn nil, fmt.Errorf(\"failed to decode JSON: %w\", err)\n\t}\n\n\terr = json.NewEncoder(buffer).Encode(data)\n\tif err!= nil {\n\t\treturn nil, fmt.Errorf(\"failed to encode JSON: %w\", err)\n\t}\n\n\tsanitizedJSON := buffer.Bytes()\n\tif len(sanitizedJSON) > 0 && sanitizedJSON[len(sanitizedJSON)-1] == '\n' {\n\t\tsanitizedJSON = sanitizedJSON[:len(sanitizedJSON)-1]\n\t}\n\n\treturn json.RawMessage(sanitizedJSON), nil\n}", "CodeBleu_score": 58.174184086232785}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\tif err := repo.CheckAccess(session, reqPermission); err!= nil {\n\t\treturn nil, err\n\t}\n\treturn repo, nil\n}", "CodeBleu_score": 33.1030532109374}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference.\n\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the required permissions for the session on the repository.\n\tif err := c.repoStore.CheckAccess(ctx, session, repo, reqPermission); err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 38.60194531891945}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference\n\tif err := c.repoStore.ValidateRef(repoRef); err!= nil {\n\t\treturn nil, usererror.BadRequest(err)\n\t}\n\n\t// Fetch the repository\n\trepo, err := c.repoStore.FindByRef(repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the required permissions for the session on the repository\n\tif err := auth.CheckRepo(repo, session, reqPermission); err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 41.003680307859085}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tsanitizerMap := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\tsanitizerMap[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer()\n\tsanitizerMap[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer()\n\tsanitizerMap[enum.CheckPayloadKindMarkdown] = createMarkdownPayloadSanitizer()\n\tsanitizerMap[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer()\n\treturn sanitizerMap\n}", "CodeBleu_score": 62.49999144490004}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tcheckSanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\n\tcheckSanitizers[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer\n\tcheckSanitizers[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer\n\tcheckSanitizers[enum.CheckPayloadKindMarkdown] = createMarkdownPayloadSanitizer\n\tcheckSanitizers[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer\n\n\treturn checkSanitizers\n}", "CodeBleu_score": 46.21304592061833}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tcheckSanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\n\t// Empty payloads are sanitized by the empty payload sanitizer.\n\tcheckSanitizers[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer()\n\n\t// Pipeline payloads are sanitized by the pipeline payload sanitizer.\n\tcheckSanitizers[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer()\n\n\t// Markdown payloads are sanitized by the markdown payload sanitizer.\n\tcheckSanitizers[enum.CheckPayloadKindMarkdown] = createMarkdownPayloadSanitizer()\n\n\t// Raw payloads are sanitized by the raw payload sanitizer.\n\tcheckSanitizers[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer()\n\n\treturn checkSanitizers\n}", "CodeBleu_score": 60.57485668278968}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\t\tif not self.attached then\n\t\tself.attached = true\n\t\tself.renderer.attach(self)\n\tend\n\tself.state.on_render = on_render\n\treturn self", "CodeBleu_score": 47.18254332187173}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tif self.renderer == nil then\n\t\tself.renderer = Renderer:new()\n\t\tself.renderer:attach(self)\n\tend\n\tself.renderer.on_render = on_render\n\treturn self", "CodeBleu_score": 43.44938777121683}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tlocal buffer = self\n\tlocal state = buffer.state\n\tlocal renderer = buffer.renderer\n\tif renderer ~= nil then\n\t\trenderer:detach_buffer(buffer)\n\tend\n\trenderer = on_render(buffer)\n\tif renderer ~= nil then\n\t\trenderer:attach_buffer(buffer)\n\tend\n\tbuffer.renderer = renderer\n\treturn buffer", "CodeBleu_score": 46.93088382477812}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\t\tif not self:is_valid() then\n\t\treturn\n\tend\n\tlocal filename = self:filename()\n\tif not filename then\n\t\treturn\n\tend\n\tif not callback then\n\t\treturn\n\tend\n\tlocal watcher = self.watcher\n\tif not watcher then\n\t\twatcher = self.watcher = filewatcher.new()\n\tend\n\twatcher:watch_file(filename, callback)", "CodeBleu_score": 38.35091007991004}, {"code": "function Buffer:watch(callback)\n\t\tif self:is_valid() and callback then\n\t\tlocal filename = self.filename\n\t\tlocal watcher = self.watcher\n\t\tlocal loop = watcher.loop\n\t\tlocal free_textlock = loop.free_textlock\n\t\tlocal coroutine = loop.coroutine\n\t\tlocal debug_error = console.debug.error\n\t\tlocal format = string.format\n\t\tlocal watch_file = self.watcher:watch_file\n\n\t\tfree_textlock(function()\n\t\t\twatch_file(filename, function(err)\n\t\t\t\tif err then\n\t\t\t\t\tdebug_error(format(\"Error watching file %q: %s\", filename, err))\n\t\t\t\tend\n\t\t\t\tcoroutine(callback, self)\n\t\t\tend)\n\t\tend)\n\tend", "CodeBleu_score": 47.580346295708054}, {"code": "function Buffer:watch(callback)\n\t\tif self:is_valid() then\n\t\tself.watcher:watch_file(self:filename(), callback)\n\telse\n\t\tconsole.debug.error(\"Buffer is not valid.\")\n\tend", "CodeBleu_score": 22.495803626391425}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\t\tif self.hex then return self.hex end\n\tlocal attr = self.attr\n\tlocal fg = attr == 'fg' and self.fg or self.bg\n\tlocal hl = vim.api.nvim_get_hl_by_id(fg)\n\tif hl then\n\t\tlocal r, g, b = hl.foreground:match('(%d+),(%d+),(%d+)')\n\t\tr, g, b = tonumber(r), tonumber(g), tonumber(b)\n\t\tself.hex = ('#%02x%02x%02x'):format(r, g, b)\n\telse\n\t\tself.hex = nil\n\tend\n\treturn self.hex", "CodeBleu_score": 54.34398499572324}, {"code": "function Color:to_hex()\n\t\tlocal hex = self.hex\n\tif hex then\n\t\treturn hex\n\tend\n\n\tlocal spec = self.spec\n\tlocal hl_attr = self.hl_attr\n\tlocal hl_group = self.hl_group\n\tlocal hl_color = self.hl_color\n\n\tif hl_attr == \"fg\" then\n\t\thl_group = \"fg\"\n\telseif hl_attr == \"bg\" then\n\t\thl_group = \"bg\"\n\tend\n\n\tif hl_color then\n\t\tlocal ok, hex = pcall(vim.api.nvim_get_hl_by_name, hl_group, true)\n\t\tif ok and hex then\n\t\t\thex = bit.tohex(hex)\n\t\t\tself.hex = hex\n\t\t\treturn hex\n\t\tend\n\tend\n\n\tif spec then\n\t\tlocal r, g, b = spec[1], spec[2], spec[3]\n\t\tif r and g and b then\n\t\t\tlocal hex = string.format(\"#%02x%02x%02x\", r, g, b)\n\t\t\tself.hex = hex\n\t\t\treturn hex\n\t\tend\n\tend\n\n\treturn nil", "CodeBleu_score": 48.13339205121322}, {"code": "function Color:to_hex()\n\t\tlocal hex = self.cache[self.name]\n\tif hex then\n\t\treturn hex\n\tend\n\n\tlocal attr = self.attr\n\tlocal name = self.name\n\tlocal color = self.color\n\tlocal cache = self.cache\n\n\tlocal hl = vim.api.nvim_get_hl_by_name(name, true)\n\tlocal fg = hl.foreground\n\tlocal bg = hl.background\n\tlocal fg_hex = bit.tohex(fg)\n\tlocal bg_hex = bit.tohex(bg)\n\n\tif attr == 'foreground' then\n\t\thex = fg_hex\n\telseif attr == 'background' then\n\t\thex = bg_hex\n\telse\n\t\thex = fg_hex.. bg_hex\n\tend\n\n\tcache[name] = hex\n\treturn hex", "CodeBleu_score": 44.34930686262828}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = buffer:get_lines()\n\tfor line in lines:iter() do\n\t\tlocal matches = line:match_all(pattern)\n\t\tfor _, match in ipairs(matches) do\n\t\t\tbuffer:add_highlight(match[1], match[2], hl)\n\t\tend\n\tend\n\treturn self", "CodeBleu_score": 35.263562101748875}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = buffer:get_lines()\n\tlocal line_num = 1\n\tfor line in lines:gmatch(\"(.-)", "CodeBleu_score": 15.0575830805176}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = buffer:get_lines()\n\tlocal ns = self:new()\n\tfor _, line in ipairs(lines) do\n\t\tlocal matches = line:find_all(pattern)\n\t\tfor _, match in ipairs(matches) do\n\t\t\tns:add_highlight(buffer, match[1], match[2], hl)\n\t\tend\n\tend\n\treturn ns", "CodeBleu_score": 41.25920814009923}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = vim.api.nvim_buf_get_extmark_id(buffer, self.ns, row, col, {\n\t\tid = 0,\n\t\tns = self.ns,\n\t\trow = row,\n\t\tcol = col,\n\t\tend_row = row,\n\t\tend_col = col,\n\t\tvirt_text = { { text, hl }, { pos, priority } },\n\t\tvirt_text_pos = 'overlay',\n\t\tvirt_text_align = 'center',\n\t\tvirt_text_win_col = 0,\n\t\tvirt_text_hide = false,\n\t})\n\treturn id", "CodeBleu_score": 56.77379520399949}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = row * 10000 + col\n\tlocal virtual_text = { { text = text, hl = hl } }\n\tlocal extmark = vim.api.nvim_buf_set_extmark(buffer, Namespace.ns, id, pos, { virt_text = virtual_text, priority = priority })\n\treturn id", "CodeBleu_score": 50.16671922840772}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = row * 100000 + col * 1000 + pos\n\tlocal mark = vim.api.nvim_buf_set_extmark(buffer, self.ns, id, {\n\t\tvirt_text = { { text, hl } },\n\t\tvirt_text_pos = pos,\n\t\tvirt_text_top = true,\n\t\tpriority = priority\n\t})\n\treturn id", "CodeBleu_score": 58.08314778997175}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\t\tlocal lines = {}\n\tlocal line = \"\"\n\tfor c in output:gmatch(\".\") do\n\t\tif c == \"", "CodeBleu_score": 10.449300922156848}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = \"\"\n\tfor c in output:gmatch(\".\") do\n\t\tif c == \"", "CodeBleu_score": 7.144238054574907}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = \"\"\n\tlocal callback_called = false\n\tfor i = 1, #output do\n\t\tlocal char = output:sub(i, i)\n\t\tif char == \"", "CodeBleu_score": 23.913345237245597}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t\tif self.watcher then\n\t\treturn self.watcher\n\tend\n\tself.watcher = vim.loop.new_fs_event()\n\tvim.loop.fs_event_start(self.watcher, path, handler, vim.loop.FS_EVENT_WRITE)\n\treturn self.watcher", "CodeBleu_score": 65.94644086732934}, {"code": "function Watcher:watch_file(path, handler)\n\t\tif self.watcher[path] then\n\t\treturn self.watcher[path]\n\tend\n\n\tlocal watcher = vim.loop.new_fs_event()\n\tvim.loop.fs_event_start(watcher, path, handler, 0)\n\n\tself.watcher[path] = watcher\n\n\treturn watcher", "CodeBleu_score": 49.131801850636904}, {"code": "function Watcher:watch_file(path, handler)\n\t\tif self.watchers[path] then\n\t\treturn self.watchers[path]\n\tend\n\n\tlocal watcher = vim.loop.new_fs_event()\n\tself.watchers[path] = watcher\n\n\tvim.loop.fs_event_start(watcher, path, handler, vim.loop.FS_EVENT_CREATE, vim.loop.FS_EVENT_DELETE, vim.loop.FS_EVENT_RENAME)\n\n\treturn watcher", "CodeBleu_score": 46.42971417660397}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t\tlocal lines = self:get_lines()\n\tlocal hunks = self.git_object:live_hunks(lines)\n\tif hunks == nil then\n\t\treturn hunks\n\tend\n\tlocal signs = {}\n\tfor _, hunk in ipairs(hunks) do\n\t\tlocal type = hunk.type\n\t\tlocal priority = hunk.priority\n\t\tlocal sign = {\n\t\t\tbuffer = self,\n\t\t\thunk = hunk,\n\t\t\ttype = type,\n\t\t\tpriority = priority\n\t\t}\n\t\tsigns[type] = signs[type] or {}\n\t\tsigns[type][priority] = sign\n\tend\n\tfor type, priority_signs in pairs(signs) do\n\t\tfor priority, sign in pairs(priority_signs) do\n\t\t\tself:set_sign(sign)\n\t\tend\n\tend\n\tself:update_signs()\n\treturn hunks", "CodeBleu_score": 41.47018858657}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal buffer = self.buffer\n\tlocal git_object = self.git_object\n\tlocal hunks = {}\n\tlocal signs_setting = self.signs_setting\n\tlocal signs = buffer.signs\n\tlocal lines = self:get_lines()\n\tif not lines then return end\n\tlocal live_hunks = git_object:live_hunks(lines)\n\tif not live_hunks then return end\n\tlocal ns_id = self.namespace:get_sign_ns_id()\n\tfor _, hunk in ipairs(live_hunks) do\n\t\tlocal priority = 1000\n\t\tif hunk.type == \"insert\" then\n\t\t\tpriority = signs_setting.insert_priority\n\t\telseif hunk.type == \"delete\" then\n\t\t\tpriority = signs_setting.delete_priority\n\t\telseif hunk.type == \"change\" then\n\t\t\tpriority = signs_setting.change_priority\n\t\tend\n\t\tlocal sign = signs:new(ns_id, priority)\n\t\tsign:set_text(hunk.type)\n\t\tsign:set_buffer(buffer)\n\t\tsign:set_line(hunk.line)\n\t\tsign:set_icon(hunk.type)\n\t\tsign:set_hl_group(hunk.type)\n\t\tsign:set_id(hunk.line)\n\t\tsign:set_name(hunk.type)\n\t\tsign:set_text_hl_group(hunk.type)\n\t\tsign:set_text_hl_group(hunk.type)\n\t\tsign:set_text_hl_group(hunk.type)\n\t\tsign:set_text_hl_group(hunk.type)\n\t\tsign:set_text_hl_group(hunk.type)\n\t\tsign:set_text_hl_group(hunk.type)\n\t\tsign:set_text_hl_group(hunk.type)\n\t\tsign:set_text_hl_group(hunk.type)\n\t\tsign:set_text_hl_group(hunk.type)\n\t\tsign:set_text_hl_group(hunk.type)\n\t\tsign:set_text_hl_group(hunk.type)\n\t\t", "CodeBleu_score": 37.61629375290764}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal lines = self:get_lines()\n\tlocal hunks = self.git_object:live_hunks(lines)\n\tif hunks == nil then\n\t\treturn hunks\n\tend\n\tself:set_signs(hunks)\n\treturn hunks", "CodeBleu_score": 17.97281147443927}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal tmp_file = self.loop.tmpname()\n\tself.loop.free_textlock(tmp_file)\n\tself.fs.write_file(tmp_file, patch)\n\tself.git:stage_hunk_from_patch(tmp_file)\n\tself.fs.remove_file(tmp_file)", "CodeBleu_score": 44.97325395628407}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal tmp_file = self.fs:tmpname()\n\tself.fs:write_file(tmp_file, patch)\n\tlocal result, err = self.git:stage_hunk_from_patch(tmp_file)\n\tself.fs:remove_file(tmp_file)\n\treturn result, err", "CodeBleu_score": 49.50041599497907}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal tmpfile = fs.tmpname()\n\tlocal success, err = fs.write_file(tmpfile, patch)\n\tif not success then\n\t\treturn false, err\n\tend\n\tlocal _, err = self.git:stage_hunk_from_patch(tmpfile)\n\tif err then\n\t\treturn false, err\n\tend\n\tfs.remove_file(tmpfile)\n\treturn true", "CodeBleu_score": 55.43737061802327}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\tOAuthRequest request = new OAuthRequest(getAccessTokenVerb(), getAccessTokenEndpoint());\n\trequest.addHeader(getAccessTokenHeader(), getHttpBasicAuthHeaderValue());\n\trequest.addBodyParameter(getConsumerKeyParameter(), getConsumerKey());\n\trequest.addBodyParameter(getConsumerSecretParameter(), getConsumerSecret());\n\trequest.addBodyParameter(getRequestTokenParameter(), requestToken.getToken());\n\trequest.addBodyParameter(getRequestTokenSecretParameter(), requestToken.getTokenSecret());\n\trequest.addBodyParameter(getVerifierParameter(), verifier.getValue());\n\tsend(request);\n\treturn extract(request);\n}", "CodeBleu_score": 39.675907365292126}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\tString accessTokenEndpoint = getAccessTokenEndpoint();\n\tRequest request = new Request(getAccessTokenVerb(), accessTokenEndpoint);\n\trequest.addHeader(getHttpBasicAuthHeaderValue());\n\trequest.addBodyParameter(OAuth.OAUTH_TOKEN, requestToken.getToken());\n\trequest.addBodyParameter(OAuth.OAUTH_VERIFIER, verifier.getValue());\n\trequest.addBodyParameter(OAuth.OAUTH_CONSUMER_KEY, getConsumerKey());\n\trequest.addBodyParameter(OAuth.OAUTH_SIGNATURE_METHOD, getSignatureMethod());\n\trequest.addBodyParameter(OAuth.OAUTH_VERSION, getVersion());\n\tResponse response = send(request);\n\treturn extract(response);\n}", "CodeBleu_score": 40.94961890277791}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\tString url = getAccessTokenEndpoint();\n\tMap<String, String> parameters = new LinkedHashMap<String, String>();\n\tparameters.put(\"oauth_token\", requestToken.getToken());\n\tparameters.put(\"oauth_verifier\", verifier.getValue());\n\tparameters.put(\"oauth_callback\", callbackUrl);\n\tparameters.put(\"oauth_version\", \"1.0\");\n\tparameters.put(\"oauth_nonce\", generateNonce());\n\tparameters.put(\"oauth_timestamp\", generateTimestamp());\n\tparameters.put(\"oauth_signature_method\", getSignatureMethod().getName());\n\tparameters.put(\"oauth_consumer_key\", getConsumerKey());\n\tparameters.put(\"oauth_signature\", generateSignature(getAccessTokenVerb(), url, parameters));\n\treturn getAccessTokenExtractor().extract(send(getAccessTokenVerb(), url, parameters, getBody()));\n}", "CodeBleu_score": 31.6599136518139}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\tCredentialsProvider provider = new BasicCredentialsProvider();\n\tprovider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), new UsernamePasswordCredentials(\"user\", \"\"));\n\tAuthCache authCache = new BasicAuthCache();\n\tauthCache.put(host, new BasicScheme());\n\tcontext.setCredentialsProvider(provider);\n\tcontext.setAuthCache(authCache);\n\tlog.info(\"Configured context for host \" + host);\n}", "CodeBleu_score": 65.34475521531095}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n\tcredsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), new UsernamePasswordCredentials(\"user\", \"\"));\n\tcontext.setCredentialsProvider(credsProvider);\n\tAuthCache authCache = new BasicAuthCache();\n\tauthCache.put(host, new BasicScheme());\n\tcontext.setAuthCache(authCache);\n\tlog.info(\"Configured HTTP client context with credentials for host \" + host.getHostName());\n}", "CodeBleu_score": 52.76156485198806}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\t// Create the credentials provider\n\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n\tcredsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), new UsernamePasswordCredentials(\"admin\", \"admin\"));\n\n\t// Create the authentication cache\n\tAuthCache authCache = new BasicAuthCache();\n\tauthCache.put(host, new BasicScheme());\n\n\t// Add the host to the authentication cache and assign the credentials provider\n\tcontext.setCredentialsProvider(credsProvider);\n\tcontext.setAuthCache(authCache);\n\tlog.info(\"Added host {} to authentication cache\", host);\n}", "CodeBleu_score": 66.00144545994664}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tJenkins jenkins = Jenkins.getInstanceOrNull();\nif (jenkins == null) {\nthrow new IllegalStateException(\"No Jenkins instance found\");\n}\nAvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\nif (cache == null) {\nthrow new IllegalStateException(\"No AvatarCache found\");\n}\nString key = getDigestOf(jenkins.getRootUrl(), source, size);\ncache.seed(key);\nreturn getRootUrlFromRequest(jenkins.getRootUrl()) + \"/\" + encode(key, size);\n}", "CodeBleu_score": 42.143664974917584}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\ttry {\nString rootUrl = getRootUrlFromRequest(request);\nString cacheKey = getDigestOf(hashKey(source, size));\nreturn rootUrl + \"/plugin/avatar-cache/avatar/\" + cacheKey + \"/\" + size;\n}\ncatch (UnsupportedEncodingException e) {\nthrow new IllegalStateException(\"UTF-8 encoding is unsupported\", e);\n}\n}", "CodeBleu_score": 25.068519881467783}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tif (source == null) {\nthrow new NullPointerException(\"source cannot be null\");\n}\nif (size == null) {\nthrow new NullPointerException(\"size cannot be null\");\n}\nJenkins jenkins = Jenkins.getInstance();\nif (jenkins == null) {\nthrow new IllegalStateException(\"Jenkins instance is null\");\n}\nAvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\nif (cache == null) {\nthrow new IllegalStateException(\"AvatarCache instance is null\");\n}\nString key = getCacheKey(source, size);\nString url = getCacheEntry(cache, key);\nif (url == null) {\nString rootUrl = getRootUrlFromRequest(source.getRequest());\nif (rootUrl == null) {\nthrow new IllegalStateException(\"rootUrl cannot be null\");\n}\nString encodedKey = rawEncode(key);\nif (encodedKey == null) {\nthrow new IllegalStateException(\"encodedKey cannot be null\");\n}\nString urlName = getUrlName(size);\nif (urlName == null) {\nthrow new IllegalStateException(\"urlName cannot be null\");\n}\nurl = rootUrl + \"/plugin/avatar-cache/avatar/\" + encodedKey + \"/\" + urlName;\n}\nreturn url;\n}", "CodeBleu_score": 43.82445246948185}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t\tthis.source = source;\n\tthis.image = image;\n\tthis.lastModified = lastModified < 0? System.currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 34.98477217692263}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t\tthis.source = source;\n\tthis.image = image;\n\tthis.lastModified = lastModified < 0? System.currentTimeMillis() : lastModified;\n\tif (image.getWidth() > 128 || image.getHeight() > 128) {\n\t\tscaleImage(image, 128, 128);\n\t}\n}", "CodeBleu_score": 48.650957756297274}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\nthis.image = image;\nthis.lastModified = (lastModified >= 0)? lastModified : System.currentTimeMillis();\nif (image.getWidth() > 128 || image.getHeight() > 128) {\nscaleImage(image);\n}\n}", "CodeBleu_score": 43.233727542603546}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false;\n\t}\n\ttry {\n\t\tif (future.isDone()) {\n\t\t\tfuture = null;\n\t\t\timage = future.get();\n\t\t\tlastModified = future.lastModified();\n\t\t}\n\t} catch (ExecutionException e) {\n\t\tfuture = null;\n\t\treturn true;\n\t} catch (InterruptedException e) {\n\t\tThread.currentThread().interrupt();\n\t\tfuture = null;\n\t\treturn true;\n\t}\n\treturn true;\n}", "CodeBleu_score": 37.9496389342651}, {"code": "private synchronized boolean pending(){\n\t\tif (future == null)\n\t\treturn false;\n\ttry {\n\t\tcacheEntry = future.get();\n\t\tif (cacheEntry!= null) {\n\t\t\timage = cacheEntry.image;\n\t\t\tlastModified = cacheEntry.lastModified;\n\t\t\tfuture = null;\n\t\t}\n\t} catch (ExecutionException e) {\n\t\t// ignore\n\t} catch (InterruptedException e) {\n\t\t// ignore\n\t}\n\treturn true;\n}", "CodeBleu_score": 35.93716232031759}, {"code": "private synchronized boolean pending(){\n\t\tif (future == null)\n\t\treturn false;\n\ttry {\n\t\tif (future.isDone()) {\n\t\t\ttry {\n\t\t\t\tImage image = future.get();\n\t\t\t\tlastModified = System.currentTimeMillis();\n\t\t\t\tthis.image = image;\n\t\t\t\tfuture = null;\n\t\t\t\treturn false;\n\t\t\t} catch (ExecutionException e) {\n\t\t\t\treturn true;\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t} catch (CancellationException e) {\n\t\treturn true;\n\t}\n}", "CodeBleu_score": 44.21993228772551}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\nByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n// write the image to the byte array output stream\nwriteImage(baos);\n\n// if the image is to be cached, set the appropriate headers\nif (isCacheable(req)) {\naddCacheHeaders(rsp);\n}\n\n// set the content type and length\naddHeader(rsp, \"Content-Type\", \"image/png\");\naddHeader(rsp, \"Content-Length\", String.valueOf(baos.size()));\n\n// write the image to the output stream\nwrite(rsp.getOutputStream(), baos.toByteArray());\n}", "CodeBleu_score": 31.980571816882296}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t// set appropriate headers for caching and content type\n        rsp.setContentType(\"image/png\");\n        rsp.addHeader(\"Cache-Control\", \"public, max-age=3600\");\n        rsp.addDateHeader(\"Expires\", new Date().getTime() + 3600000);\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        try {\n            generateImage(req, baos);\n            byte[] bytes = baos.toByteArray();\n            rsp.setContentLength(bytes.length);\n            rsp.getOutputStream().write(bytes);\n        } finally {\n            baos.close();\n        }\n    }", "CodeBleu_score": 52.017167266204645}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\n//        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n//        ImageIO.write(image, \"png\", baos);\n//        baos.flush();\n//        byte[] imageInByte = baos.toByteArray();\n//        baos.close();\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        ImageIO.write(image, \"png\", baos);\n        byte[] imageInByte = baos.toByteArray();\n        baos.close();\n\n        rsp.setContentType(\"image/png\");\n        rsp.addHeader(\"Cache-Control\", \"public, max-age=60\");\n        rsp.addDateHeader(\"Expires\", new Date().getTime() + 60000);\n        rsp.setContentLength(imageInByte.length);\n        rsp.getOutputStream().write(imageInByte);\n        rsp.getOutputStream().flush();\n\n}", "CodeBleu_score": 60.46623206526496}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tsuper(enableCache, teamCacheDuration, repositoriesCacheDuration, owner, projectKey, repositoryName, authenticator);\n}", "CodeBleu_score": 8.901686512317642}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t\n//    this.enableCache = enableCache;", "CodeBleu_score": 7.4529433537785374}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tsuper(enableCache, teamCacheDuration, repositoriesCacheDuration, owner, projectKey, repositoryName, authenticator);\n}", "CodeBleu_score": 8.901686512317642}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\tfinal String sourceBranchName = pullRequest.getSource().getBranch().getName();\n\tfinal String destinationBranchName = pullRequest.getDestination().getBranch().getName();\n\tfinal BitbucketBranchValue sourceBranch = getBranch(sourceBranchName);\n\tfinal BitbucketBranchValue destinationBranch = getBranch(destinationBranchName);\n\tif (sourceBranch!= null) {\n\t\tsetCommitClosure(sourceBranch.getRawNode(), pullRequest.getSource().getCommit());\n\t}\n\tif (destinationBranch!= null) {\n\t\tsetCommitClosure(destinationBranch.getRawNode(), pullRequest.getDestination().getCommit());\n\t}\n}", "CodeBleu_score": 38.81935484009856}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\tString sourceBranchName = pullRequest.getSourceBranch();\n\tString destinationBranchName = pullRequest.getDestinationBranch();\n\tBitbucketBranchValue sourceBranch = bitbucket.getBranch(sourceBranchName);\n\tif (sourceBranch!= null) {\n\t\tBitbucketBranchValue destinationBranch = bitbucket.getBranch(destinationBranchName);\n\t\tif (destinationBranch!= null) {\n\t\t\t// If the source branch exists, assign a new commit closure based on the branch's raw node.\n\t\t\tsetCommitClosure(pullRequest, sourceBranch.getRawNode());\n\t\t\t// If the destination branch exists, assign a new commit closure based on the branch's raw node.\n\t\t\tsetCommitClosure(pullRequest, destinationBranch.getRawNode());\n\t\t}\n\t}\n}", "CodeBleu_score": 34.78561459667157}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\tfinal String sourceBranch = pullRequest.getSourceBranch();\n\tfinal String destinationBranch = pullRequest.getDestinationBranch();\n\n\tfinal BitbucketBranchValue sourceBranchValue = getBranch(sourceBranch);\n\tif (sourceBranchValue!= null) {\n\t\tsetCommitClosure(sourceBranchValue.getRawNode(), sourceBranchValue.getName(), pullRequest.getSourceCommit());\n\t}\n\n\tfinal BitbucketBranchValue destinationBranchValue = getBranch(destinationBranch);\n\tif (destinationBranchValue!= null) {\n\t\tsetCommitClosure(destinationBranchValue.getRawNode(), destinationBranchValue.getName(), pullRequest.getDestinationCommit());\n\t}\n}", "CodeBleu_score": 33.60476504681294}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tString rootURL = build.getRootUrl();\n\tif (rootURL == null) {\n\t\tthrow new IllegalStateException(\"No root URL found for \" + build);\n\t}\n\treturn rootURL;\n}", "CodeBleu_score": 48.452324239571375}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tString rootURL = null;\n\tif (build.getParent() instanceof AbstractProject) {\n\t\tAbstractProject<?,?> project = (AbstractProject<?,?>) build.getParent();\n\t\tif (project.getScm()!= null) {\n\t\t\trootURL = project.getScm().getBrowser().getBrowserName();\n\t\t}\n\t}\n\tif (rootURL == null) {\n\t\tthrow new IllegalStateException(\"Could not determine Jenkins location\");\n\t}\n\treturn rootURL;\n}", "CodeBleu_score": 49.477459737743786}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tString rootURL = null;\n\tif (build instanceof AbstractBuild) {\n\t\tAbstractBuild<?,?> ab = (AbstractBuild<?,?>) build;\n\t\trootURL = ab.getRootURL();\n\t\tif (rootURL == null) {\n\t\t\tthrow new IllegalStateException(\"Build has no root URL\");\n\t\t}\n\t} else if (build instanceof AbstractProject) {\n\t\tAbstractProject<?,?> project = (AbstractProject<?,?>) build;\n\t\trootURL = project.getRootUrl();\n\t\tif (rootURL == null) {\n\t\t\tthrow new IllegalStateException(\"Project has no root URL\");\n\t\t}\n\t} else {\n\t\tthrow new IllegalStateException(\"Build has no root URL\");\n\t}\n\treturn rootURL;\n}", "CodeBleu_score": 40.06494431862144}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\tif (url == null || url.isEmpty()) {", "CodeBleu_score": 9.845064604032606}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\tif (url == null) {", "CodeBleu_score": 7.464112177072754}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\tif (url == null) {", "CodeBleu_score": 7.464112177072754}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\titbucketSCMSourceContext context = source.createContext(build, listener);\nif (context.notificationsDisabled()) {\nreturn;\n}\nSCMRevision revision = context.getRevision();\nString revisionType = revision.getOriginName();\nString hash = revision.getHash();\nString buildKey = context.getBuildKey();\nif (buildKey == null) {\nbuildKey = hash;\n}\nBitbucketClient client = build.getBitbucketClient();\nif (revisionType.equals(SCMHead.BRANCH)) {\nclient.getNotifications().createBuildStatus(buildKey, BuildStatus.SUCCESSFUL);\n} else if (revisionType.equals(SCMHead.TAG)) {\nclient.getNotifications().createBuildStatus(buildKey, BuildStatus.SUCCESSFUL);\n} else if (revisionType.equals(SCMHead.PULL_REQUEST)) {\nclient.getNotifications().createBuildStatus(buildKey, BuildStatus.SUCCESSFUL);\n} else if (revisionType.equals(SCMHead.NONE)) {\nclient.getNotifications().createBuildStatus(buildKey, BuildStatus.SUCCESSFUL);\n} else {\nlistener.getLogger().println(\"Unknown revision type: \" + revisionType);\n}\n}", "CodeBleu_score": 29.229483462957013}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\tetLogger", "CodeBleu_score": 3.769985734377241}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\tf (build.getNotificationsDisabled()) {\nreturn;\n}\n\nSCMRevision revision = source.getRevision(build);\nif (revision == null) {\nreturn;\n}\n\nString revisionType = revision.getType();\n\nif (revisionType.equals(SCMRevision.NONE)) {\nreturn;\n}\n\nlistener.getLogger().println(\"Sending build notifications to Bitbucket for \" + revisionType);\n\nString buildKey = getBuildKey(build, source);\n\nBitbucketClient client = buildBitbucketClient(source, build, listener);\n\nif (revisionType.equals(SCMRevision.BRANCH)) {\ncreateStatus(client, buildKey, listener, source.getBranchName(), source.getBranchSourceName(), source.getBranchSourceName(), source.getBranchSourceName(), source.getBranchSourceName(), source.getBranchSourceName(), source.getBranchSourceName(), source.getBranchSourceName(), source.getBranchSourceName(), source.getBranchSourceName(), source.getBranchSourceName(), source.getBranchSourceName());\n} else if (revisionType.equals(SCMRevision.PR)) {\ncreateStatus(client, buildKey, listener, source.getPrTitle(), source.getPrTitle(), source.getPrTitle(), source.getPrTitle(), source.getPrTitle(), source.getPrTitle(), source.getPrTitle(), source.getPrTitle(), source.getPrTitle(), source.getPrTitle(), source.getPrTitle(), source.getPrTitle());\n}\n}", "CodeBleu_score": 32.4208183301879}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String buildKey = getFullName(build);\n+    String buildKey = getFullName(build); // TODO: Fix this\n     if (shareBuildKeyBetweenBranchAndPR) {\n         buildKey = build.getParent().getName() + \"/\" + branch;\n     }\n     return buildKey;\n }", "CodeBleu_score": 42.355741882302226}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String key = build.getParent().getFullName();\n+    String key = build.getParent().getFullName(); // getFullName() returns the full name of the job\n     if (shareBuildKeyBetweenBranchAndPR) {\n         key += branch;\n     }\n     return key;\n }", "CodeBleu_score": 50.08709985896039}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String key = build.getParent().getFullName();\n+    String key = build.getParent().getFullName(); // TODO: this is not a good way to get the parent name.\n     if (shareBuildKeyBetweenBranchAndPR) {\n         key += branch;\n     }\n     return key;\n }", "CodeBleu_score": 50.659283586406744}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\tif\n(\nserverUrl\n==\nnull\n)\n{\nserverUrl\n=\nBitbucketSCMNavigator\n.\nDEFAULT_SERVER_URL\n;\nlog\n.\nwarn\n(\n\"\nServer\nURL\nwas\nnull\nin\nBitbucketSCMNavigator\n;\nsetting\nto\n\"\n+\nserverUrl\n)\n;\n}\nif\n(\ntraits\n==\nnull\n)\n{\ntraits\n=\nnew\nBitbucketSCMNavigator\n.\nTrait\n(\n)\n;\nlog\n.\nwarn\n(\n\"\nTraits\nwere\nnull\nin\nBitbucketSCMNavigator\n;\nreconstructing\nlegacy\ntraits\n\"\n)\n;\n}\nreturn\nthis\n;\n}", "CodeBleu_score": 9.191603770459087}, {"code": "private Object readResolve() throws ObjectStreamException{\n\tif\n(\nserverUrl\n==\nnull\n)\n{\nserverUrl\n=\nBitbucketSCMNavigator\n.\nDEFAULT_SERVER_URL\n;\n}\nelse\n{\nlogger\n.\nlog\n(\nLevel\n.\nWARNING\n,\n\"\nThe\nserver\nURL\nis\nnull\n.\nSetting\nto\n{0}\n\"\n,\nserverUrl\n)\n;\n}\nif\n(\ntraits\n==\nnull\n)\n{\ntraits\n=\nnew\nBitbucketSCMNavigatorTraits\n(\n)\n;\n}\nelse\n{\nlogger\n.\nlog\n(\nLevel\n.\nWARNING\n,\n\"\nThe\ntraits\nare\nnull\n.\nReconstructing\nlegacy\ntraits\n\"\n)\n;\n}\nreturn\nthis\n;\n}", "CodeBleu_score": 10.689902919311832}, {"code": "private Object readResolve() throws ObjectStreamException{\n\tif\n(\nserverUrl\n==\nnull\n)\n{\nserverUrl\n=\nBitbucketSCMNavigator\n.\ngetDefaultServerUrl\n(\n)\n;\n}\nelse\n{\nlog\n.\nwarn\n(\n\"\nThe\nserver\nURL\nwas\nnot\nset\nfor\nthe\nBitbucketSCMNavigator\n.\nThis\nis\ndeprecated\nbehavior\nand\nwill\nbe\nremoved\nin\na\nfuture\nversion\n.\nPlease\nset\nthe\nserver\nURL\nto\na\nnon\n-\nnull\nvalue\n.\n\"\n)\n;\n}\nif\n(\ntraits\n==\nnull\n)\n{\ntraits\n=\nnew\nBitbucketSCMNavigator\n.\nBitbucketSCMNavigatorTraits\n(\n)\n;\n}\nreturn\nthis\n;\n}", "CodeBleu_score": 7.6328062454524686}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tif (isMatch) {\n\t\tlogger.info(\"Repository {} matched\", name);\n\t\tproposedRepositoryCount.increment();\n\t}\n\telse {\n\t\tlogger.info(\"Repository {} not matched\", name);\n\t}\n}", "CodeBleu_score": 26.40821688767897}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tif (isMatch) {\n\t\tif (proposedRepositoryNames.contains(name)) {\n\t\t\tproposedRepositoryNames.remove(name);\n\t\t\tproposedRepositoryCount.incrementAndGet();\n\t\t} else {\n\t\t\tignoredRepositoryNames.add(name);\n\t\t}\n\t} else {\n\t\tif (ignoredRepositoryNames.contains(name)) {\n\t\t\tignoredRepositoryNames.remove(name);\n\t\t} else {\n\t\t\tproposedRepositoryNames.add(name);\n\t\t}\n\t}\n}", "CodeBleu_score": 28.83231108807356}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tBitbucketRepository repository = getBitbucketRepository(name);\n\tif (isMatch) {\n\t\tlog.info(\"Proposing repository {} ({})\", repository.getFullName(), repository.getUuid());\n\t\tproposedCount++;\n\t} else {\n\t\tlog.info(\"Ignoring repository {} ({})\", repository.getFullName(), repository.getUuid());\n\t}\n}", "CodeBleu_score": 49.547388631892744}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tefSpec", "CodeBleu_score": 7.8067445815786325}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t..\n", "CodeBleu_score": 7.509125533959585}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tRevision decorated = decorateRevision(scm, build, git, listener, marked, rev);\n if (decorated == null) {\n return null;\n }\n if (decorated.getSha1String().equals(rev.getSha1String())) {\n return decorated;\n }\n if (decorated.getSha1String().equals(marked.getSha1String())) {\n return decorated;\n }\n List<RefSpec> refSpecs = getRefSpecs(scm, decorated, git, listener);\n if (refSpecs.isEmpty()) {\n return decorated;\n }\n listener.getLogger().println(\"Fetching missing commits from \" + scm.getRemote() + \" using \" + refSpecs);\n git.fetch(scm.getRemote(), refSpecs);\n return decorated;\n}", "CodeBleu_score": 25.218989591209134}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tif (links == null) {\n\t\treturn null;\n\t}\n\tMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n\tfor (Map.Entry<String, BitbucketHref> entry : links.entrySet()) {\n\t\tresult.put(entry.getKey(), entry.getValue());\n\t}\n\treturn result;\n}", "CodeBleu_score": 56.260616183007215}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\tif (links == null) {\nreturn null;\n}\nMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\nfor (Map.Entry<String, BitbucketHref> entry : links.entrySet()) {\nresult.put(entry.getKey(), entry.getValue());\n}\nreturn result;\n}", "CodeBleu_score": 56.05345330592842}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\tif (links == null) {\nreturn null;\n}\nMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\nfor (Map.Entry<String, BitbucketHref> entry : links.entrySet()) {\nresult.put(entry.getKey(), entry.getValue());\n}\nreturn result;\n}", "CodeBleu_score": 56.05345330592842}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tif (resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\tconst repository = await this.getRepository(resourceStates[0]);\n\tif (!repository) {\n\t\treturn;\n\t}\n\n\tconst filePaths = await this.getFilePaths(resourceStates);\n\tif (filePaths.length === 0) {\n\t\treturn;\n\t}\n\n\tconst addedFileCount = await repository.addFiles(filePaths);\n\tif (addedFileCount === 0) {\n\t\treturn;\n\t}\n\n\tconst message = nls.localize('addFiles', \"Added {0} file(s) to {1}.\", addedFileCount, repository.name);\n\twindow.showInformationMessage(message);\n}", "CodeBleu_score": 47.001426167088475}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tconst resources = await this.getResourceStates(resourceStates);\n\tif (resources.length === 0) {\n\t\treturn;\n\t}\n\n\tconst uris = resources.map(resource => resource.resource.uri);\n\tconst filePaths = await this.convertResourceUrisToFilePaths(uris);\n\tconst repository = await this.getRepository(uris[0]);\n\tconst operations = filePaths.map(filePath => repository.createResourceOperation(filePath));\n\n\tconst errors = await repository.executeOperations(operations);\n\tif (errors.length > 0) {\n\t\tconst message = errors.map(error => error.message).join('\n');\n\t\twindow.showErrorMessage(message);\n\t}\n}", "CodeBleu_score": 52.49791093490575}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tconst selectedResourceStates = resourceStates.filter(resourceState => resourceState.resource.fsPath);\n\tif (selectedResourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\tconst resources = selectedResourceStates.map(resourceState => resourceState.resource);\n\tconst filePaths = await Promise.all(resources.map(resource => resource.fsPath));\n\tconst repositories = await Promise.all(filePaths.map(filePath => this._provider.getRepositoryForResource(filePath)));\n\tconst repositoryUris = repositories.map(repository => repository.rootUri);\n\n\tconst repositoryToFilePaths = new Map<string, string[]>();\n\tfor (const repository of repositories) {\n\t\tconst filePaths = await repository.getFilePaths(filePaths);\n\t\tif (filePaths.length > 0) {\n\t\t\trepositoryToFilePaths.set(repository.rootUri.toString(), filePaths);\n\t\t}\n\t}\n\n\tconst promises = Array.from(repositoryToFilePaths.entries()).map(async ([repositoryUri, filePaths]) => {\n\t\tconst repository = await this._provider.getRepository(repositoryUri);\n\t\tif (!repository) {\n\t\t\treturn;\n\t\t}\n\t\treturn repository.add(filePaths);\n\t});\n\n\tconst errors = await Promise.all(promises);\n\tconst errorMessages = errors.filter(error => error!== undefined).map(error => error.message);\n\tif (errorMessages.length > 0) {\n\t\tconst message = errorMessages.join('\n');\n\t\tthis._outputChannel.appendLine(message);\n\t\tthis._outputChannel.show();\n\t}\n}", "CodeBleu_score": 43.20615404196049}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\t\tconst resourceStates: ResourceState[] = [];\n\tconst sourceControlResource: Resource = await this.getSourceControlResource();\n\tif (sourceControlResource) {\n\t\tresourceStates.push(...await this.getSCMResourceStates(sourceControlResource));\n\t}\n\treturn resourceStates;\n}", "CodeBleu_score": 31.828353398142905}, {"code": "protected async getResourceStates{\n\t\tlet resourceStates: ResourceState[] = [];\n\tlet resource: Resource | undefined;\n\tlet resourceUri: Uri | undefined;\n\tif (this.resourceStates.length === 0 && this.sourceControlResource.uri) {\n\t\tresourceUri = this.sourceControlResource.uri;\n\t\tresource = await this.getResource(resourceUri);\n\t\tif (resource) {\n\t\t\tresourceStates.push(resource);\n\t\t}\n\t} else {\n\t\tresourceStates = this.resourceStates;\n\t}\n\treturn resourceStates.filter(resource => resource instanceof Resource);\n}", "CodeBleu_score": 32.036671987957284}, {"code": "protected async getResourceStates{\n\t\tlet resourceStates: ResourceState[] = [];\n\n\tif (this.resourceStates.length === 0 ||!this.resourceStates[0].uri ||!(this.resourceStates[0].uri instanceof Uri)) {\n\t\tconst scmResource = await this.getScmResource();\n\t\tif (scmResource) {\n\t\t\tthis.resourceStates = [scmResource];\n\t\t}\n\t}\n\n\tresourceStates = this.resourceStates.filter(resourceState => resourceState instanceof Resource);\n\treturn resourceStates;\n}", "CodeBleu_score": 36.58611148817156}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t\tif (uri) {\n\t\tif (uri.scheme ==='svn') {\n\t\t\turi = Uri.file(uri.toString().replace(/^svn:\\/\\//, ''));\n\t\t}\n\t\tconst repository = await this.repository.getResourceFromFile(uri);\n\t\tif (repository) {\n\t\t\treturn await this.sourceControlManager.getRepository(repository);\n\t\t}\n\t}\n\treturn undefined;\n}", "CodeBleu_score": 23.41814995322728}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t\tlet resource: Resource | undefined;\n\tif (!uri) {\n\t\tconst activeTextEditor = window.activeTextEditor;\n\t\tif (activeTextEditor) {\n\t\t\turi = activeTextEditor.document.uri;\n\t\t}\n\t}\n\tif (uri) {\n\t\tif (uri.scheme === \"svn\") {\n\t\t\turi = Uri.file(uri.fsPath);\n\t\t}\n\t\tconst sourceControlManager = sourceControlManagerInstance;\n\t\tif (sourceControlManager) {\n\t\t\tconst repository = sourceControlManager.getRepository(uri);\n\t\t\tif (repository) {\n\t\t\t\tresource = repository.getResourceFromFile(uri);\n\t\t\t}\n\t\t}\n\t}\n\treturn resource;\n}", "CodeBleu_score": 43.022598442475655}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t\tconst activeEditor = window.activeTextEditor;\n\tif (uri === undefined) {\n\t\tif (activeEditor === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\t\turi = activeEditor.document.uri;\n\t}\n\tif (uri.scheme!== \"file\") {\n\t\treturn undefined;\n\t}\n\tconst sourceControlManager = await sourceControlManager.getSourceControlManager(uri);\n\tif (sourceControlManager === undefined) {\n\t\treturn undefined;\n\t}\n\tconst repository = await sourceControlManager.getRepository(uri);\n\tif (repository === undefined) {\n\t\treturn undefined;\n\t}\n\treturn repository.getResourceFromFile(uri);\n}", "CodeBleu_score": 42.07397297022011}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\t if (element.isModified) {\n const oldRevision = element.oldRevision;\n const newRevision = element.newRevision;\n const remoteRepository = await this.model.getRemoteRepository(element.path);\n const oldPath = this.model.getRemotePath(element.path, oldRevision);\n const newPath = this.model.getRemotePath(element.path, newRevision);\n const command = remoteRepository.getDiffCommand(oldPath, newPath);\n if (command) {\n await vscode.commands.executeCommand(command);\n }\n } else {\n const newRevision = element.newRevision;\n const remoteRepository = await this.model.getRemoteRepository(element.path);\n const newPath = this.model.getRemotePath(element.path, newRevision);\n await vscode.commands.executeCommand('vscode.open', vscode.Uri.parse(newPath));\n }\n }", "CodeBleu_score": 35.412119920465166}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\tconst remoteRepository = await this.model.getRemoteRepository(element);\nif (element.isModified()) {\nreturn remoteRepository.openDiff(element.path, element.oldRevision, element.newRevision);\n}\nreturn remoteRepository.openFile(element.path, element.newRevision);\n}", "CodeBleu_score": 32.39172965118663}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\tlet remoteRepository = this.model.getRemoteRepository(element.path);", "CodeBleu_score": 20.318965547238044}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (await clipboard.isSupported()) {\n\t\tif (item instanceof CommitTreeItem) {\n\t\t\tconst commit = await item.getCommit();\n\t\t\tif (commit) {\n\t\t\t\tlet commitMessage = commit.message;\n\t\t\t\tif (what ==='revision') {\n\t\t\t\t\tcommitMessage = commit.revision;\n\t\t\t\t}\n\t\t\t\tclipboard.writeText(commitMessage);\n\t\t\t}\n\t\t}\n\t} else {\n\t\twindow.showErrorMessage('Your system does not support clipboard operations.');\n\t}\n}", "CodeBleu_score": 39.094070431092376}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!clipboard.writeText) {\n\t\twindow.showErrorMessage(`Unable to copy ${what} to clipboard.`);\n\t\treturn;\n\t}\n\n\tif (item instanceof Commit) {\n\t\tawait clipboard.writeText(item.message);\n\t} else if (item instanceof Revision) {\n\t\tawait clipboard.writeText(item.revision);\n\t}\n}", "CodeBleu_score": 26.825018472069978}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!clipboard.writeText) {\n\t\twindow.showErrorMessage(\"Clipboard is not supported\");\n\t\treturn;\n\t}\n\n\tconst commit = item as ICommit;\n\tif (commit) {\n\t\tif (what === \"message\") {\n\t\t\tclipboard.writeText(commit.message);\n\t\t} else if (what === \"revision\") {\n\t\t\tclipboard.writeText(commit.revision);\n\t\t}\n\t}\n}", "CodeBleu_score": 34.116047499246456}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t\tfor (GiteaConnectionFactory factory : factories) {\n\t\ttry {\n\t\t\tGiteaConnection connection = factory.open();\n\t\t\tif (connection!= null) {\n\t\t\t\treturn connection;\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\t// ignore\n\t\t}\n\t}\n\tthrow new IOException(\"No suitable GiteaConnectionFactory found\");\n}", "CodeBleu_score": 13.130666401825314}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t\tList<GiteaConnectionFactory> factories = new ArrayList<>();\n\tfor (GiteaConnectionFactory factory : GiteaConnectionFactory.getFactories()) {\n\t\tif (factory.canOpen()) {\n\t\t\tfactories.add(factory);\n\t\t}\n\t}\n\tCollections.sort(factories, new Comparator<GiteaConnectionFactory>() {\n\t\t@Override\n\t\tpublic int compare(GiteaConnectionFactory factory1, GiteaConnectionFactory factory2) {\n\t\t\treturn factory2.getPriority() - factory1.getPriority();\n\t\t}\n\t});\n\tfor (GiteaConnectionFactory factory : factories) {\n\t\ttry {\n\t\t\treturn factory.open(this);\n\t\t} catch (IOException e) {\n\t\t\t// do nothing\n\t\t}\n\t}\n\tthrow new IOException(\"No suitable GiteaConnectionFactory found\");\n}", "CodeBleu_score": 30.531504145397232}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t\tfor (GiteaConnectionFactory factory : factories) {\n\t\ttry {\n\t\t\treturn factory.open();\n\t\t} catch (IOException e) {\n\t\t\t// Ignore, keep trying\n\t\t}\n\t}\n\tthrow new IOException(\"Unable to open Gitea connection\");\n}", "CodeBleu_score": 5.491162473408057}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tGitea gitea = Gitea.getInstanceOrNull();\n\tif (gitea == null) {\n\t\treturn this;\n\t}\n\tif (gitea.getPluginManager() == null) {\n\t\treturn this;\n\t}\n\treturn gitea;\n}", "CodeBleu_score": 33.26371343081512}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tGitea gitea = this;\n\tif (jenkins!= null) {\n\t\tgitea = new Gitea(jenkins.getPluginManager().uberClassLoader);\n\t}\n\treturn gitea;\n}", "CodeBleu_score": 31.322394767333662}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tGitea gitea = this;\n\tif (jenkins == null) {\n\t\tgitea.jenkins = Jenkins.get();\n\t}\n\tif (gitea.jenkins!= null) {\n\t\tgitea.pluginClassLoader = gitea.jenkins.getPluginManager().uberClassLoader;\n\t} else {\n\t\tgitea.pluginClassLoader = getClass().getClassLoader();\n\t}\n\treturn gitea;\n}", "CodeBleu_score": 40.10404372747898}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tthis.displayName = displayName;\nthis.serverUrl = normalizeServerUrl(serverUrl);\nthis.manageHooks = manageHooks;\nthis.credentialsId = credentialsId;\nthis.aliasUrl = aliasUrl!= null? aliasUrl.trim() : null;\n}", "CodeBleu_score": 29.257273854169263}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\tthis.displayName = displayName;\n\tthis.serverUrl = normalizeServerUrl(serverUrl);\n\tthis.manageHooks = manageHooks;\n\tif (credentialsId!= null) {\n\t\tthis.credentialsId = credentialsId;\n\t}\n\tthis.aliasUrl = normalizeServerUrl(aliasUrl);\n}", "CodeBleu_score": 30.014266739760213}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\tthis.displayName = displayName;\n\tthis.serverUrl = normalizeServerUrl(serverUrl);\n\tthis.manageHooks = manageHooks;\n\tthis.credentialsId = credentialsId;\n\tthis.aliasUrl = normalizeServerUrl(aliasUrl);\n}", "CodeBleu_score": 28.126031364320287}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tList<GiteaAuth> giteaAuths = GiteaAuth.getGiteaAuths();\n\tif (giteaAuths.isEmpty()) {\n\t\treturn new ListBoxModel();\n\t}\n\tList<GiteaAuth> giteaAuthsForServerUrl = new ArrayList<>();\n\tfor (GiteaAuth giteaAuth : giteaAuths) {\n\t\tif (giteaAuth.getGiteaServerUrl().equals(serverUrl)) {\n\t\t\tgiteaAuthsForServerUrl.add(giteaAuth);\n\t\t}\n\t}\n\tif (giteaAuthsForServerUrl.isEmpty()) {\n\t\treturn new ListBoxModel();\n\t}\n\tList<GiteaAuth> giteaAuthsForServerUrlAndAuthenticationTokens = new ArrayList<>();\n\tfor (GiteaAuth giteaAuth : giteaAuthsForServerUrl) {\n\t\tif (giteaAuth.getAuthenticationToken()!= null) {\n\t\t\tgiteaAuthsForServerUrlAndAuthenticationTokens.add(giteaAuth);\n\t\t}\n\t}\n\tif (giteaAuthsForServerUrlAndAuthenticationTokens.isEmpty()) {\n\t\treturn new ListBoxModel();\n\t}\n\treturn new ListBoxModel(giteaAuthsForServerUrlAndAuthenticationTokens).includeMatchingAs(GiteaAuth.class, \"credentialsId\", \"credentialsId\", \"credentialsId\");\n}", "CodeBleu_score": 29.550460835406188}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn new ListBoxModel();\n\t}\n\tif (serverUrl.startsWith(\"http\")) {\n\t\tserverUrl = serverUrl.substring(7);\n\t}\n\tserverUrl = serverUrl.substring(serverUrl.indexOf(\"//\") + 2);\n\tserverUrl = serverUrl.substring(0, serverUrl.indexOf(\"/\"));\n\tserverUrl = serverUrl.replaceAll(\"-\", \".\");\n\tserverUrl = serverUrl.replaceAll(\"_\", \"-\");\n\tserverUrl = serverUrl.replaceAll(\" \", \"-\");\n\tserverUrl = serverUrl.toLowerCase();\n\tList<CredentialsMatcher> matchers = new ArrayList<>();\n\tmatchers.add(new GiteaAuthMatcher());\n\tList<CredentialsMatcher> matchingMatchers = new ArrayList<>();\n\tfor (CredentialsMatcher matcher : matchers) {\n\t\tif (matcher.matches(serverUrl)) {\n\t\t\tmatchingMatchers.add(matcher);\n\t\t}\n\t}\n\tList<CredentialsMatcher> sortedMatchers = new ArrayList<>();\n\tsortedMatchers.addAll(matchingMatchers);\n\tCollections.sort(sortedMatchers);\n\tList<CredentialsMatcher> sortedMatchingMatchers = new ArrayList<>();\n\tfor (CredentialsMatcher matcher : sortedMatchers) {\n\t\tsortedMatchingMatchers.add(matcher);\n\t}\n\tList<CredentialsMatcher> sortedMatchingMatchers2 = new ArrayList<>();\n\tfor (CredentialsMatcher matcher : sortedMatchingMatchers) {\n\t\tsortedMatchingMatchers2.add(matcher);\n\t}\n\tList<CredentialsMatcher> sortedMatchingMatchers3 = new ArrayList<>();\n\tfor (CredentialsMatcher matcher : sortedMatchingMatchers2) {\n\t\tsortedMatchingMatchers3.add(matcher);\n\t}\n\tList<CredentialsMatcher> sortedMatchingMatchers4 = new ArrayList<>();\n\tfor (CredentialsMatcher matcher : sortedMatchingMatchers3) {\n\t\tsortedMatchingMatchers4.add(matcher);\n\t}\n\tList<CredentialsMatcher> sortedMatchingMatchers5 = new ArrayList<>();\n\tfor (CredentialsMatcher matcher : sortedMatchingMatchers4) {\n\t\tsortedMatchingMatchers5.add(matcher);\n\t}\n\tList<CredentialsMatcher> sortedMatchingMatchers6 = new ArrayList<>();\n\tfor (CredentialsMatcher matcher : sortedMatchingMatchers5) {\n\t\tsortedMatchingMatchers6.add(matcher);\n\t}\n\tList<CredentialsMatcher> sortedMatchingMatchers7 = new ArrayList<>();", "CodeBleu_score": 30.03236690867665}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tList<String> items = new ArrayList<String>();\n\tif (hasAdminPermission()) {\n\t\titems.add(CredentialsMatchers.firstOrNull(\n\t\t\t\tCredentialsProvider.lookupCredentials(\n\t\t\t\t\t\tStandardCredentials.class,\n\t\t\t\t\t\tJenkins.getInstance(),\n\t\t\t\t\t\tACL.SYSTEM,\n\t\t\t\t\t\tJenkins.getInstance().getDescriptorByType(GitSCM.class)\n\t\t\t\t\t\t\t\t.getGlobalConfig().getAuthConfig().getAuthConfig()\n\t\t\t\t\t\t\t\t.getAuthConfig().getAuthConfig().getAuthConfig()\n\t\t\t\t\t\t\t\t.getAuthConfig().getAuthConfig()\n\t\t\t\t\t\t\t\t.getAuthConfig().getAuthConfig().getAuthConfig()\n\t\t\t\t\t\t\t\t.getAuthConfig().getAuthConfig().getAuthConfig()\n\t\t\t\t\t\t\t\t.getAuthConfig().getAuthConfig().getAuthConfig()\n\t\t\t\t\t\t\t\t.getAuthConfig().getAuthConfig().getAuthConfig()\n\t\t\t\t\t\t\t\t.getAuthConfig().getAuthConfig().getAuthConfig()\n\t\t\t\t\t\t\t\t.getAuthConfig().getAuthConfig().getAuthConfig()\n\t\t\t\t\t\t\t\t.getAuthConfig().getAuthConfig().getAuthConfig()\n\t\t\t\t\t\t\t\t.getAuthConfig().getAuthConfig().getAuthConfig()\n\t\t\t\t\t\t\t\t.getAuthConfig().getAuthConfig().getAuthConfig()\n\t\t\t\t\t\t\t\t.getAuthConfig().getAuthConfig().getAuthConfig()\n\t\t\t\t\t\t\t\t.getAuthConfig().getAuthConfig().getAuthConfig()\n\t\t\t\t\t\t\t\t.getAuthConfig().getAuthConfig().getAuthConfig()\n\t\t\t\t\t\t\t\t.getAuthConfig().getAuthConfig().getAuthConfig()\n\t\t\t\t\t\t\t\t.getAuthConfig().getAuthConfig().getAuthConfig()\n\t\t\t\t\t\t\t\t.getAuthConfig().getAuthConfig().getAuthConfig()\n\t\t\t\t\t\t\t\t.getAuthConfig().getAuthConfig().getAuthConfig()\n\t\t\t\t\t\t\t\t.getAuthConfig().getAuthConfig().getAuthConfig()\n\t\t\t\t\t\t\t\t.getAuthConfig().getAuthConfig().getAuthConfig()\n\t\t\t\t\t\t\t\t.getAuthConfig().getAuthConfig().getAuthConfig()\n\t\t\t\t\t\t\t\t.getAuthConfig().getAuthConfig().getAuthConfig()\n\t\t\t\t\t\t\t\t.getAuthConfig().getAuthConfig().getAuthConfig()\n\t\t\t\t\t\t\t\t.getAuthConfig().getAuthConfig().getAuthConfig()\n\t\t\t\t\t\t\t\t.getAuthConfig().getAuthConfig().getAuthConfig()\n\t\t\t\t\t\t\t\t.getAuthConfig().getAuthConfig().getAuthConfig()\n\t\t\t\t\t\t\t\t.getAuthConfig().getAuthConfig().getAuthConfig()\n\t\t\t\t\t\t\t\t.getAuthConfig().getAuthConfig().getAuthConfig()\n\t\t\t\t\t\t\t\t.getAuth", "CodeBleu_score": 25.823227889714307}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\ttry {\nURI uri = new URI(serverUrl);\nreturn uri.normalize().toASCIIString().replaceAll(\"/+$\", \"\");\n} catch (URISyntaxException e) {\nreturn serverUrl;\n}\n}", "CodeBleu_score": 14.627385605372229}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\nreturn null;\n}\ntry {\nURI uri = new URI(serverUrl);\nString scheme = uri.getScheme().toLowerCase();\nString host = uri.getHost().toLowerCase();\nint port = uri.getPort();\nif (port == -1) {\nif (scheme.equals(\"http\")) {\nport = 80;\n} else if (scheme.equals(\"https\")) {\nport = 443;\n}\n}\nString path = uri.getPath();\nif (path == null) {\npath = \"\";\n}\nString query = uri.getQuery();\nif (query == null) {\nquery = \"\";\n}\nString fragment = uri.getFragment();\nif (fragment == null) {\nfragment = \"\";\n}\nreturn scheme + \"://\" + host + \":\" + port + path + (query.isEmpty()? \"\" : \"?\" + query) + (fragment.isEmpty()? \"\" : \"#\" + fragment);\n} catch (URISyntaxException e) {\nreturn null;\n}\n}", "CodeBleu_score": 36.23316049810278}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tURI uri = new URI(serverUrl);\n\t\tif (uri.getScheme()!= null && uri.getScheme().equalsIgnoreCase(\"http\")) {\n\t\t\tif (uri.getPort() == null || uri.getPort() == 80) {\n\t\t\t\turi = uri.normalize().resolve(\"://\");\n\t\t\t}\n\t\t} else if (uri.getScheme()!= null && uri.getScheme().equalsIgnoreCase(\"https\")) {\n\t\t\tif (uri.getPort() == null || uri.getPort() == 443) {\n\t\t\t\turi = uri.normalize().resolve(\"://\");\n\t\t\t}\n\t\t}\n\t\treturn uri.normalize().toString();\n\t} catch (URISyntaxException e) {\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 25.790891144775923}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\tList<GiteaServer> servers = GiteaServer.getServers();\nListBoxModel items = new ListBoxModel();\nfor (GiteaServer server : servers) {\nitems.add(server.getDisplayName().isEmpty()? server.getServerUrl() : server.getDisplayName() + \" (\" + server.getServerUrl() + \")\");\n}\nreturn items;\n}", "CodeBleu_score": 36.39990899393548}, {"code": "public ListBoxModel getServerItems(){\n\tListBoxModel items = new ListBoxModel();\nfor (GiteaServer server : GiteaServer.list()) {\nif (isBlank(server.getDisplayName())) {\nitems.add(server.getServerUrl());\n} else {\nitems.add(server.getServerUrl(), server.getDisplayName());\n}\n}\nreturn items;\n}", "CodeBleu_score": 32.931010852382094}, {"code": "public ListBoxModel getServerItems(){\n\tListBoxModel items = new ListBoxModel();\nfor (GiteaServer server : GiteaServer.list()) {\nif (isBlank(server.getDisplayName())) {\nitems.add(server.getServerUrl());\n} else {\nitems.add(server.getDisplayName(), server.getServerUrl());\n}\n}\nreturn items;\n}", "CodeBleu_score": 32.931010852382094}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tif (servers == null) {\n\t\tservers = new ArrayList<>();\n\t}\n\tList<GiteaServer> newServers = new ArrayList<>();\n\tfor (GiteaServer server : servers) {\n\t\tif (server == null) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (server.getUrl()!= null &&!server.getUrl().isBlank()) {\n\t\t\tnewServers.add(server);\n\t\t}\n\t}\n\tList<GiteaServer> oldServers = getServers();\n\tList<GiteaServer> removedServers = new ArrayList<>();\n\tfor (GiteaServer server : oldServers) {\n\t\tif (!newServers.contains(server)) {\n\t\t\tremovedServers.add(server);\n\t\t}\n\t}\n\tfor (GiteaServer server : removedServers) {\n\t\toldServers.remove(server);\n\t}\n\tsetServers(oldServers);\n\tsetServers(newServers);\n\tsave();\n}", "CodeBleu_score": 31.659674019483937}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tif (servers == null) {\n\t\tservers = new ArrayList<>();\n\t}\n\tList<GiteaServer> newServers = new ArrayList<>();\n\tfor (GiteaServer server : servers) {\n\t\tif (server == null) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (server.getUrl()!= null &&!server.getUrl().isBlank()) {\n\t\t\tnewServers.add(server);\n\t\t}\n\t}\n\tif (newServers.size() == 0) {\n\t\tnewServers.add(new GiteaServer(\"https://try.gitea.io\", \"https://try.gitea.io/api/v1\"));\n\t}\n\tif (newServers.size()!= servers.size()) {\n\t\tservers.clear();\n\t\tservers.addAll(newServers);\n\t}\n\tsave();\n}", "CodeBleu_score": 30.084709725314056}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tif (servers == null) {\n\t\tservers = new ArrayList<>();\n\t}\n\tList<GiteaServer> newServers = new ArrayList<>();\n\tfor (GiteaServer server : servers) {\n\t\tif (server == null) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (server.getBaseUrl() == null || server.getBaseUrl().isEmpty()) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (server.getBaseUrl().endsWith(\"/\")) {\n\t\t\tserver.setBaseUrl(server.getBaseUrl().substring(0, server.getBaseUrl().length() - 1));\n\t\t}\n\t\tif (server.getBaseUrl().startsWith(\"http\")) {\n\t\t\tnewServers.add(server);\n\t\t} else {\n\t\t\tnewServers.add(new GiteaServer(server.getBaseUrl(), server.getLogin(), server.getPassword(), server.getAccessToken(), server.isUseAccessToken()));\n\t\t}\n\t}\n\tif (newServers.size() == 0) {\n\t\tnewServers.add(new GiteaServer());\n\t}\n\tservers = newServers;\n\tCollections.sort(servers);\n\tif (servers.size() == 0) {\n\t\tservers.add(new GiteaServer());\n\t}\n\tsave();\n}", "CodeBleu_score": 28.834213282709932}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\tif (serverUrl == null)\nreturn false;\nserverUrl = normalizeServerUrl(serverUrl);\nIterator<Server> iter = servers.iterator();\nwhile (iter.hasNext()) {\nServer server = iter.next();\nif (server.getUrl().equals(serverUrl)) {\niter.remove();\nupdateServers();\nreturn true;\n}\n}\nreturn false;\n}", "CodeBleu_score": 32.313683304006766}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\tserverUrl\n=\nnormalizeServerUrl\n(\nserverUrl\n)\n;\nif\n(\nserverUrl\n==\nnull\n)\n{\nreturn\nfalse\n;\n}\nboolean\nremoved\n=\nfalse\n;\nfor\n(\nint\ni\n=\n0\n;\ni\n<\nservers\n.\nsize\n(\n)\n;\ni\n+\n+\n)\n{\nif\n(\nservers\n.\nget\n(\ni\n)\n.\nequals\n(\nserverUrl\n)\n)\n{\nservers\n.\nremove\n(\ni\n)\n;\nremoved\n=\ntrue\n;\nbreak\n;\n}\n}\nif\n(\nremoved\n)\n{\nupdateServerList\n(\n)\n;\n}\nreturn\nremoved\n;\n}", "CodeBleu_score": 24.68506186196089}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\nreturn false;\n}\nserverUrl = normalizeServerUrl(serverUrl);\nif (serverUrl == null) {\nreturn false;\n}\nfor (Iterator<GiteaServer> iterator = servers.iterator(); iterator.hasNext();) {\nGiteaServer server = iterator.next();\nif (serverUrl.equals(server.getUrl())) {\niterator.remove();\nupdateServers();\nreturn true;\n}\n}\nreturn false;\n}", "CodeBleu_score": 40.78261654204232}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tfor (Element annotatedElement : roundEnv.getElementsAnnotatedWith(annotation)) {\nfor (AnnotationMirror annotationMirror : annotatedElement.getAnnotationMirrors()) {\nif (annotationMirror.getAnnotationType().asElement().equals(annotation)) {\nfor (Map.Entry<String, Attribute> entry : getAttributesFromAnnotation(annotationMirror).entrySet()) {\nString attributeName = entry.getKey();\nAttribute attribute = entry.getValue();\nString type = asType(attribute.getType());\ndescriptorElements.add(new DescriptorElement(attributeName, type, attribute.getValue()));\n}\nbreak;\n}\n}\n}\n}", "CodeBleu_score": 36.01251689941595}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tfor (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {", "CodeBleu_score": 14.644409938945119}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tSet<Element> annotatedElements = roundEnv.getElementsAnnotatedWith(annotation);\nfor (Element annotatedElement : annotatedElements) {\nMap<String, Object> attributes = getAttributesFromAnnotation(annotatedElement, annotation);\nString type = toString(annotatedElement.asType());\ndescriptorElements.add(new ConfigElement(type, attributes));\n}\n}", "CodeBleu_score": 60.176721057721004}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tfor\n(\nTypeElement annotation\n:\nannotations\n)\n{\nif\n(\nannotationClass\n.\ngetSimpleName\n(\n)\n.\nequals\n(\nannotation\n.\ngetQualifiedName\n(\n)\n.\nreplace\n(\n'\n'\n'\n.\n'\n)\n)\n)\n{\nreturn\nannotation\n;\n}\n}\nreturn\nnull\n;\n}", "CodeBleu_score": 32.904814621136644}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tfor\n(\nTypeElement annotation\n:\nannotations\n)\n{\nif\n(\nannotationClass\n.\ngetName\n(\n)\n.\nequals\n(\nannotation\n.\ngetQualifiedName\n(\n)\n.\nreplace\n(\n'\n'\n'\n.\n'\n)\n)\n)\n{\nreturn\nannotation\n;\n}\n}\nreturn\nnull\n;\n}", "CodeBleu_score": 32.871867294496695}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tfor\n(\nTypeElement annotation\n:\nannotations\n)\n{\nif\n(\nannotation\n.\ngetQualifiedName\n(\n)\n.\nreplace\n(\n\"\n\"\n,\n\"\n.\n\"\n)\n.\nequals\n(\nannotationClass\n.\ngetName\n(\n)\n)\n)\n{\nreturn\nannotation\n;\n}\n}\nreturn\nnull\n;\n}", "CodeBleu_score": 35.75843463215301}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {}\n    if approver_id:\n        filters.update({\"approver\": approver_id})\n    if for_approval:\n        filters.update(\n            {\n                \"status\": [\"in\", [\"Pending Approval\", \"Approved\"]],\n                \"workflow_state\": [\"!=\", \"Cancelled\"],\n                \"owner\": [\"!=\", employee],\n            }\n        )\n    else:\n        filters.update(\n            {\n                \"status\": [\"in\", [\"Open\", \"Approved\"]],\n                \"workflow_state\": [\"!=\", \"Cancelled\"],\n                \"owner\": employee,\n            }\n        )\n    return filters\n\n", "CodeBleu_score": 25.040350510422556}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"employee\": employee,\n        \"workflow_state\": get_allowed_states_for_workflow(\n            \"Leave Application\", employee, for_approval\n        ),\n    }\n    if approver_id:\n        filters[\"approver\"] = approver_id\n    if for_approval:\n        filters[\"status\"] = \"Open\"\n    else:\n        filters[\"status\"] = (\"Open\", \"Approved\", \"Rejected\")\n    return filters\n\n", "CodeBleu_score": 27.484415962752763}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n        \"status\": \"Open\",\n    }\n    if approver_id:\n        filters[\"approver\"] = approver_id\n    elif for_approval:\n        filters.update(get_allowed_states_for_workflow(\"Leave Application\", \"Leave Application\"))\n        filters[\"docstatus\"] = 1\n        filters[\"status\"]!= \"Cancelled\"\n    else:\n        filters[\"status\"]!= \"Cancelled\"\n    return filters\n\n", "CodeBleu_score": 29.196366559289032}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = getdate()\n    leave_details = get_leave_details(employee, current_date)\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        allocated_leaves = leave_details[leave_type][\"allocated\"]\n        balance_leaves = leave_details[leave_type][\"balance\"]\n        leave_balance_map[leave_type] = {\"allocated\": allocated_leaves, \"balance\": balance_leaves}\n    return leave_balance_map\n\n", "CodeBleu_score": 43.121133104249544}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = getdate()\n    leave_details = get_leave_details(employee)\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_details[leave_type][\"allocated\"],\n            \"balance\": leave_details[leave_type][\"balance\"]\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 35.9966275712288}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = getdate()\n    leave_details = get_leave_details(employee)\n    leave_balance_map = {}\n    for leave_type, leave_details_dict in leave_details.items():\n        allocated_leaves = leave_details_dict[\"allocated_leaves\"]\n        balance_leaves = leave_details_dict[\"balance_leaves\"]\n        leave_balance_map[leave_type] = {\"allocated_leaves\": allocated_leaves, \"balance_leaves\": balance_leaves}\n    return leave_balance_map\n\n", "CodeBleu_score": 42.292399718176355}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays = run(\n        f\"\"\"\n        select\n            holiday_id\n           , holiday_date\n           , holiday_name\n           , holiday_description\n           , holiday_type\n           , holiday_type_name\n           , holiday_type_description\n        from\n            holiday\n        where\n            holiday_id in {holiday_list}\n            and holiday_type not in ('W', 'H')\n        order by\n            holiday_date\n        \"\"\"\n    )\n    for holiday in holidays:\n        holiday[\"holiday_description\"] = strip(holiday[\"holiday_description\"])\n    return holidays\n\n", "CodeBleu_score": 26.36214705861398}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays = db.select(\n        from_", "CodeBleu_score": 11.508602035026009}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if holiday_list is None:\n        return []\n    holidays = [\n        {\n            \"date\": holiday[\"date\"],\n            \"description\": strip(holiday[\"description\"]),\n            \"run\": holiday[\"run\"],\n            \"strip_html\": holiday[\"strip_html\"],\n        }\n        for holiday in holiday_list\n        if not holiday[\"run\"]\n    ]\n    holidays.sort(key=lambda holiday: holiday[\"date\"])\n    return holidays\n\n", "CodeBleu_score": 26.05741877283714}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t\n    # Get the settings\n    settings = get_settings()\n    # If the settings are valid and the frequency is set to \"Weekly\"\n    if settings and settings['frequency'] == 'Weekly':\n        # Get the holiday reminders\n        holiday_reminders = get_holiday_reminders()\n        # If the holiday reminders are valid and the number of holiday reminders is greater than 0\n        if holiday_reminders and len(holiday_reminders) > 0:\n            # Get the current date\n            current_date = get_current_date()\n            # Get the current day of the week\n            current_day_of_week = get_current_day_of_week()\n            # If the current day of the week is the same as the day of the week specified in the settings\n            if current_day_of_week == settings['day_of_week']:\n                # Get the current week of the year\n                current_week_of_year = get_current_week_of_year()\n                # If the current week of the year is the same as the week of the year specified in the settings\n                if current_week_of_year == settings['week_of_year']:\n                    # Get the current year\n                    current_year = get_current_year()\n                    # If the current year is the same as the year specified in the settings\n                    if current_year == settings['year']:\n                        # Call the send_advance_holiday_reminders function\n                        send_advance_holiday_reminders(holiday_reminders)\n\n", "CodeBleu_score": 22.437346448906226}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    holiday_reminders_setting = get_single_value(\"Holiday Reminders\")\n    if holiday_reminders_setting == \"Yes\":\n        holiday_reminder_frequency = get_single_value(\"Holiday Reminder Frequency\")\n        if holiday_reminder_frequency == \"Weekly\":\n            send_advance_holiday_reminders()\n\n", "CodeBleu_score": 25.748819585090644}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    hr_settings = get_hr_settings()\n    if hr_settings[\"send_reminders\"] and hr_settings[\"reminder_frequency\"] == \"Weekly\":\n        # Get all the users who have a holiday in the next 7 days\n        users = get_users_with_holiday_in_next_7_days()\n        # Get the users who have a holiday in the next 7 days that have not yet been sent a reminder\n        users_with_no_reminder = get_users_with_holiday_in_next_7_days_with_no_reminder()\n        # Send the reminders to the users\n        send_advance_holiday_reminders(users, users_with_no_reminder)\n\n", "CodeBleu_score": 22.53718062624319}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t\n    self_appraisal_score = 0\n    for self_rating in self.self_ratings:\n        self_appraisal_score += self_rating.rating * 5 * self_rating.percentage_weightage\n    self.self_appraisal_score = round(self_appraisal_score, self.precision)\n    return self.self_appraisal_score\n\n", "CodeBleu_score": 21.09623504286447}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self_appraisal_score = 0\n    for self_rating in self.self_ratings:\n        self_appraisal_score += (self_rating.rating * 5) * self_rating.weightage\n    self.self_appraisal_score = self_appraisal_score\n    self.self_appraisal_score = round(self.self_appraisal_score, self.precision)\n    return self.self_appraisal_score\n\n", "CodeBleu_score": 23.689851580220335}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self_appraisal_score = 0\n    for self_rating in self.self_ratings:\n        self_appraisal_score += self_rating.rating * 5 * self_rating.percentage_weightage\n    self.self_appraisal_score = round(self_appraisal_score, self.precision)\n    return self.self_appraisal_score\n\n", "CodeBleu_score": 21.09623504286447}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle_doc = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle_doc.final_score_formula:\n        self.final_score = self.calculate_final_score_from_formula(appraisal_cycle_doc.final_score_formula)\n    else:\n        self.final_score = (self.total_score + self.average_feedback_score + self.self_appraisal_score) / 3\n    self.final_score = frappe.utils.flt(self.final_score, appraisal_cycle_doc.final_score_precision)", "CodeBleu_score": 22.462280226240104}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle_doc = frappe.get_cached_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle_doc.final_score_formula:\n        data = {\n            \"employee\": self.employee,\n            \"appraisal_cycle\": self.appraisal_cycle,\n            \"appraisal_cycle_doc\": appraisal_cycle_doc,\n            \"self_appraisal\": self,\n            \"employee_doc\": frappe.get_cached_doc(\"Employee\", self.employee),\n            \"appraisal_doc\": frappe.get_cached_doc(\"Appraisal\", self.parent),\n            \"appraisal_cycle_doc\": frappe.get_cached_doc(\"Appraisal Cycle\", self.appraisal_cycle),\n        }\n        formula = sanitize_expression(appraisal_cycle_doc.final_score_formula)\n        final_score = eval(formula, data)\n        self.final_score = flt(final_score, self.precision)\n    else:\n        self.final_score = (\n            (self.total_score + self.average_feedback_score + self.self_appraisal_score)\n            / 3\n        )\n\n", "CodeBleu_score": 38.66775894647462}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle_doc = frappe.get_cached_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle_doc.final_score_formula:\n        self.final_score = self.calculate_final_score_from_formula(appraisal_cycle_doc.final_score_formula)\n    else:\n        self.final_score = (self.total_score + self.average_feedback_score + self.self_appraisal_score) / 3\n    self.final_score = round(self.final_score, appraisal_cycle_doc.final_score_precision)\n", "CodeBleu_score": 20.896696357944418}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\t\n    if self.status == \"On Leave\" and not self.is_leave_application_approved():\n        frappe.throw(_(\"Cannot mark attendance for {0} as {1} is on leave\").format(self.employee, self.status))\n    elif self.attendance_date < self.employee.date_of_joining:\n        frappe.throw(_(\"Attendance date cannot be earlier than employee's date of joining\"))\n\n", "CodeBleu_score": 22.26145961109384}, {"code": "def validate_attendance_date(self)\n\t\n    employee = frappe.get_doc(\"Employee\", self.employee)\n    if employee.date_of_joining > self.attendance_date:\n        frappe.throw(_(\"Attendance Date cannot be earlier than Employee's Date of Joining\"))\n    if self.attendance_date > nowdate():\n        if self.status!= \"On Leave\" and not frappe.db.exists(\"Leave Application\", {\"employee\": employee.name, \"from_date\": self.attendance_date, \"to_date\": self.attendance_date, \"status\": \"Approved\"}):\n            frappe.throw(_(\"Attendance Date cannot be a future date unless the status is On Leave and there is no leave application\"))\n\n", "CodeBleu_score": 28.992705544627988}, {"code": "def validate_attendance_date(self)\n\t\n    if self.status == \"On Leave\":\n        leave_applications = frappe.get_all(\n            \"Leave Application\",\n            filters={\n                \"employee\": self.employee,\n                \"status\": [\"in\", [\"Approved\", \"Pending\"]],\n                \"from_date\": (\"<=\", self.attendance_date),\n                \"to_date\": (\">=\", self.attendance_date),\n            },\n            fields=[\"status\", \"from_date\", \"to_date\"],\n        )\n        if leave_applications:\n            frappe.throw(\n                _(\"Attendance date must be after the last leave application date or on leave.\")\n            )\n    if self.attendance_date < self.employee.date_of_joining:\n        frappe.throw(\n            _(\"Attendance date must be after the employee's date of joining.\")\n        )\n\n", "CodeBleu_score": 35.44181527832922}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\t\n    duplicate_attendance_record = self.get_duplicate_attendance_record()\n    if duplicate_attendance_record:\n        frappe.throw(\n            _(\"Duplicate attendance record found for {0} on {1}. {2}\").format(\n                self.employee,\n                format_date(self.date),\n                get_link_to_form(duplicate_attendance_record.doctype, duplicate_attendance_record.name),\n            )\n        )\n\n", "CodeBleu_score": 28.71107112686585}, {"code": "def validate_duplicate_record(self)\n\t\n    if self.get_duplicate_attendance_record():\n        frappe.throw(\n            _(\"Duplicate attendance record for {0} on {1}\").format(\n                self.employee,\n                format_date(self.attendance_date),\n                get_link_to_form(\"Attendance\", self.name),\n            )\n        )\n\n", "CodeBleu_score": 27.105274687801256}, {"code": "def validate_duplicate_record(self)\n\t\n    duplicate_attendance_record = self.get_duplicate_attendance_record()\n    if duplicate_attendance_record:\n        msg = _(\"Duplicate attendance record for employee {0} on {1}\").format(\n            duplicate_attendance_record.employee,\n            format_date(duplicate_attendance_record.attendance_date),\n        )\n        msg += get_link_to_form(duplicate_attendance_record)\n        frappe.throw(msg)\n\n", "CodeBleu_score": 33.982886161206046}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t\n    if self.status == \"Sent\":\n        return\n    self.status = \"Sent\"\n    self.db_set(\"status\", self.status)\n    self.send_mail_to_group()\n    self.send_mail_to_users()\n    self.send_mail_to_all()\n    self.send_mail_to_followers()\n    self.send_mail_to_followers_of_followers()\n    self.send_mail_to_followers_of_followers_of_followers()\n    self.send_mail_to_followers_of_followers_of_followers_of_followers()\n    self.send_mail_to_followers_of_followers_of_followers_of_followers_of_followers()\n    self.send_mail_to_followers_of_followers_of_followers_of_followers_of_followers_of_followers()\n    self.send_mail_to_followers_of_followers_of_followers_of_followers_of_followers_of_followers_of_followers()\n    self.send_mail_to_followers_of_followers_of_followers_of_followers_of_followers_of_followers_of_followers_of_followers()\n    self.send_mail_to_followers_of_followers_of_followers_of_followers_of_followers_of_followers_of_followers_of_followers_of_followers()\n    self.send_mail_to_followers_of_followers_of_followers_of_followers_of_followers_of_followers_of_followers_of_followers_of_followers_of_followers()\n    self.send_mail_to_followers_of_followers_of_followers_of_followers_of_followers_of_followers_of_followers_of_followers_of_followers_of_followers_of_followers()\n    self.send_mail_to_followers_of_followers_of_followers_of_followers_of_followers_of_followers_of_followers_of_followers_of_followers_of_followers_of_followers_of_followers()\n    self.send_mail_to_followers_of_followers_of_followers_of_followers_of_followers_of_followers_of_followers_of_followers_of_followers_of_followers_of_followers_", "CodeBleu_score": 15.260979706992806}, {"code": "def send_summary(self)\n\t\n    self.get_message_details()\n    self.get_user_emails_from_group()\n    self.send_message()\n    self.db_set('status', 'Sent')\n\n", "CodeBleu_score": 9.458944548560268}, {"code": "def send_summary(self)\n\t\n    message_details = self.get_message_details()\n    emails = self.get_user_emails_from_group()\n    if emails:\n        self.send_email(emails, message_details)\n        self.db_set('status', 'Sent')\n    else:\n        self.db_set('status', 'No recipients')\n\n", "CodeBleu_score": 30.640840891942954}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t\n    if self.interview_round:\n        existing_interview = frappe.get_all(\n            \"Interview\",\n            {\n                \"job_applicant\": self.job_applicant,\n                \"interview_round\": self.interview_round,\n            },\n            fields=[\"name\"],\n        )\n        if existing_interview:\n            existing_interview = existing_interview[0]\n            existing_interview_link = get_link_to_form(\n                \"Interview\", existing_interview.name\n            )\n            existing_interview_link = frappe.utils.get_url(existing_interview_link)\n            existing_interview_link = frappe.utils.format_link(\n                existing_interview_link, \"Interview\", existing_interview.name\n            )\n            existing_interview_link = frappe.bold(existing_interview_link)\n            existing_interview_link = frappe.utils.html_escape(existing_interview_link)\n            frappe.throw(\n                f\"Job applicant {self.job_applicant} is already interviewed in {self.interview_round}. {existing_interview_link}\"\n            )\n\n", "CodeBleu_score": 37.35203163422549}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.interview_round:\n        interview_round = frappe.get_doc(\"Interview Round\", self.interview_round)\n        if interview_round.interview_type == \"Interview\":\n            if frappe.db.exists(\n                \"Interview\",\n                {\n                    \"applicant\": self.name,\n                    \"interview_round\": self.interview_round,\n                    \"interview_type\": \"Interview\",\n                },\n            ):\n                existing_interview = frappe.get_doc(\n                    \"Interview\",\n                    {\n                        \"applicant\": self.name,\n                        \"interview_round\": self.interview_round,\n                        \"interview_type\": \"Interview\",\n                    },\n                )\n                frappe.throw(\n                    _(\n                        \"Job applicant {0} has already been scheduled for interview round {1}. Please edit the existing interview record {2} to update the interview details.\".format(\n                            self.applicant,\n                            interview_round.interview_round,\n                            existing_interview.name,\n                        )\n                    )\n                )\n\n", "CodeBleu_score": 36.680072141141395}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.status == 'Interview Scheduled':\n        if self.interview_round:\n            existing_interview = frappe.get_all('Interview', filters={'interview_round': self.interview_round, 'applicant': self.applicant}, fields=['name'])\n            if existing_interview:\n                frappe.throw('Job applicants are not allowed to appear twice for the same interview round. <a href=\"/desk/Form/Interview/{0}\">Click here</a> to view the existing interview record and the job applicant\\'s information.'.format(existing_interview[0].name))\n", "CodeBleu_score": 47.96617287651194}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\t\n    if self.skill_assessments:\n        ratings = [assessment.rating for assessment in self.skill_assessments if assessment.rating]\n        self.average_rating = sum(ratings)/len(ratings)\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 29.413452631208948}, {"code": "def calculate_average_rating(self)\n\t\n    self.average_rating = 0\n    if len(self.skill_assessments) > 0:\n        sum_of_ratings = 0\n        for assessment in self.skill_assessments:\n            if assessment.rating is not None:\n                sum_of_ratings += assessment.rating\n        self.average_rating = sum_of_ratings / len(self.skill_assessments)\n\n", "CodeBleu_score": 34.76152860659135}, {"code": "def calculate_average_rating(self)\n\t\n    sum = 0\n    count = 0\n    for assessment in self.assessments:\n        if assessment.rating is not None:\n            sum += assessment.rating\n            count += 1\n    if count == 0:\n        self.average_rating = 0\n    else:\n        self.average_rating = sum / count\n\n", "CodeBleu_score": 21.779452742871754}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t\n    # Initialize the interview document\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n\n    # Add interviewers to the interview details\n    if doc.interviewers:\n        for interviewer in doc.interviewers:\n            interview.append(\"interview_details\", {\n                \"interviewer\": interviewer\n            })\n\n    # Save the interview document\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 45.05002298196738}, {"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    if doc.interviewers:\n        interview.interviewers = doc.interviewers\n    interview.insert()\n    return interview\n\n", "CodeBleu_score": 39.20948153076788}, {"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = frappe.get_doc(doc)\n    elif isinstance(doc, dict):\n        doc = frappe.new_doc(\"Interview\")\n        doc.update(doc)\n    doc.interview_round = frappe.get_doc(\"Interview Round\", interview_round)\n    doc.designation = frappe.get_doc(\"Designation\", designation)\n    if interviewers:\n        for interviewer in interviewers:\n            doc.append(\"interviewers\", {\"interviewer\": interviewer})\n    doc.save()\n    return doc\n", "CodeBleu_score": 47.0305478931412}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offers = self.env['hr.job.offer'].search([('date_from', '>=', from_date), ('date_to', '<=', to_date), ('designation_id', '=', self.id), ('company_id', '=', self.company_id.id), ('state', '=', 'draft')])\n    return job_offers\n\n", "CodeBleu_score": 41.035114730380975}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    return self.env['hr.job.offer'].search([('date_from', '>=', from_date), ('date_from', '<=', to_date), ('designation_id', '=', self.designation_id.id), ('company_id', '=', self.company_id.id), ('state', '=', 'draft')])\n\n", "CodeBleu_score": 41.981277757760395}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offers = self.env['hr.job'].search([('date_start', '>=', from_date), ('date_start', '<=', to_date), ('company_id', '=', self.company_id.id), ('job_offer_status', '=', 1)])\n    return job_offers\n\n", "CodeBleu_score": 40.939644001314754}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if company is not None:\n        offer_count = db(db.offer.company == company).count()\n        accepted_count = db(db.offer.company == company & db.offer.docstatus == 1).count()\n    elif department is not None:\n        offer_count = db(db.offer.department == department).count()\n        accepted_count = db(db.offer.department == department & db.offer.docstatus == 1).count()\n    else:\n        offer_count = db(db.offer.docstatus == 1).count()\n        accepted_count = db(db.offer.docstatus == 1 & db.offer.docstatus == 1).count()\n    if offer_count == 0:\n        return 0\n    else:\n        return accepted_count / offer_count * 100\n\n", "CodeBleu_score": 21.613610991314097}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if company:\n        job_offers = db(db.job_offer.company == company).select()\n    elif department:\n        job_offers = db(db.job_offer.department == department).select()\n    else:\n        job_offers = db(db.job_offer.docstatus == 1).select()\n\n    total_job_offers = len(job_offers)\n    accepted_job_offers = 0\n    for job_offer in job_offers:\n        if job_offer.docstatus == 1:\n            accepted_job_offers += 1\n\n    if total_job_offers == 0:\n        return 0\n    else:\n        return (accepted_job_offers / total_job_offers) * 100\n\n", "CodeBleu_score": 25.48832635028529}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if company is None and department is None:\n        count = db(db.job_offer.docstatus == 1).count()\n        accepted = db((db.job_offer.docstatus == 1) & (db.job_offer.acceptance_status == \"Accepted\")).count()\n        return accepted / count * 100\n    elif company is not None and department is None:\n        count = db((db.job_offer.docstatus == 1) & (db.job_offer.company == company)).count()\n        accepted = db((db.job_offer.docstatus == 1) & (db.job_offer.acceptance_status == \"Accepted\") & (db.job_offer.company == company)).count()\n        return accepted / count * 100\n    elif company is None and department is not None:\n        count = db((db.job_offer.docstatus == 1) & (db.job_offer.department == department)).count()\n        accepted = db((db.job_offer.docstatus == 1) & (db.job_offer.acceptance_status == \"Accepted\") & (db.job_offer.department == department)).count()\n        return accepted / count * 100\n    elif company is not None and department is not None:\n        count = db((db.job_offer.docstatus == 1) & (db.job_offer.company == company) & (db.job_offer.department == department)).count()\n        accepted = db((db.job_offer.docstatus == 1) & (db.job_offer.acceptance_status == \"Accepted\") & (db.job_offer.company == company) & (db.job_offer.department == department)).count()\n        return accepted / count * 100\n\n", "CodeBleu_score": 25.450739350205197}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\ttry {\n\t\tfinal Employer employer = employerService.register(employerForRegisterDto);\n\t\treturn new ResponseEntity<>(new Result(employer.getId(), true, \"Employer registered successfully.\"), HttpStatus.OK);\n\t} catch (final Exception e) {\n\t\treturn new ResponseEntity<>(new Result(null, false, e.getMessage()), HttpStatus.BAD_REQUEST);\n\t}\n}", "CodeBleu_score": 46.24583496154086}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\ttry {\n\t\temployerService.register(employerForRegisterDto);\n\t\treturn new ResponseEntity<>(new Result(true, \"Employer registered successfully\"), HttpStatus.OK);\n\t} catch (Exception e) {\n\t\treturn new ResponseEntity<>(new Result(false, e.getMessage()), HttpStatus.BAD_REQUEST);\n\t}\n}", "CodeBleu_score": 37.621885683775766}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\treturn employerService.register(employerForRegisterDto)\n\t\t\t.map(result -> ResponseEntity.ok(result))\n\t\t\t.orElseGet(() -> ResponseEntity.badRequest().body(new Result(false, \"Registration failed.\")));\n}", "CodeBleu_score": 36.106685892341865}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal CompanyStaff companyStaff = companyStaffRepository.findById(companyStaffForUpdateDto.getId()).orElseThrow(() -> new NotFoundException(\"Company staff not found\"));\nif (!companyStaffForUpdateDto.getPassword().equals(companyStaff.getPassword())) {\nreturn Result.failure(new BusinessRuleViolationException(\"Passwords do not match\"));\n}\ncompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\ncompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\ncompanyStaffRepository.save(companyStaff);\nreturn Result.success();\n}", "CodeBleu_score": 41.91800657604296}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\tfinal CompanyStaff companyStaff = companyStaffRepository.findById(companyStaffForUpdateDto.getId()).orElseThrow(() -> new NotFoundException(String.format(\"Staff with id %s not found\", companyStaffForUpdateDto.getId())));\n\tfinal String password = companyStaffForUpdateDto.getPassword();\n\tif (!password.equals(companyStaff.getPassword())) {\n\t\treturn new FailureResult(String.format(\"Password provided does not match existing password for staff with id %s\", companyStaff.getId()));\n\t}\n\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\tcompanyStaffRepository.save(companyStaff);\n\treturn new SuccessResult(String.format(\"Staff with id %s updated successfully\", companyStaff.getId()));\n}", "CodeBleu_score": 45.149258125347124}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t//TODO: Implement this method\n}", "CodeBleu_score": 3.271163369261834}]}
