{"instance_id": "47ee1dae200b", "generation_result": [{"code": "public static void PreloadDll(string dllName){\n\t\tif (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n\t\tWin32.LoadDll(dllName);\n\t} else {\n\t\tPosix.LoadDll(dllName);\n\t}\n}", "CodeBleu_score": 24.21366885985437}, {"code": "public static void PreloadDll(string dllName){\n\t\tif (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n\t\tWin32.LoadDll(dllName);\n\t} else {\n\t\tPosix.LoadDll(dllName);\n\t}\n}", "CodeBleu_score": 24.21366885985437}, {"code": "public static void PreloadDll(string dllName){\n\t\tif (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n\t\tWin32.LoadDll(dllName);\n\t} else {\n\t\tPosix.LoadDll(dllName);\n\t}\n}", "CodeBleu_score": 24.21366885985437}]}
{"instance_id": "2073a8291d05", "generation_result": [{"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t\tif (assetsFileListHash.Contains(originalPath)) {\n\t\treturn;\n\t}\n\n\tif (string.IsNullOrEmpty(unityVersion)) {\n\t\tunityVersion = reader.version;\n\t}\n\n\tif (!CheckStrippedVersion(unityVersion)) {\n\t\tLogger.Error(originalPath + \" was not processed because it is not compatible with the target Unity version.\");\n\t\treturn;\n\t}\n\n\tLogger.Info(\"Loading assets from \" + originalPath);\n\tSerializedFile assetsFile = new SerializedFile(reader, unityVersion);\n\tassetsFile.SetVersion(unityVersion);\n\tassetsFileListHash.Add(originalPath);\n\tassetsFileList.Add(assetsFile);\n}", "CodeBleu_score": 35.446088890768166}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t\tif (!assetsFileListHash.Contains(originalPath)) {\n\t\ttry {\n\t\t\tSerializedFile serializedFile = new SerializedFile(reader, originalPath, unityVersion);\n\t\t\tassetsFileList.Add(serializedFile);\n\t\t\tassetsFileListHash.Add(originalPath);\n\t\t\tLogger.Info(\"Loading assets file from memory: \" + originalPath);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tLogger.Error(ex.Message);\n\t\t}\n\t}\n}", "CodeBleu_score": 28.32952611354309}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t\tif (assetsFileListHash.Contains(originalPath)) {\n\t\treturn;\n\t}\n\tif (string.IsNullOrEmpty(unityVersion)) {\n\t\tunityVersion = reader.version;\n\t}\n\tif (CheckStrippedVersion(originalPath, unityVersion)) {\n\t\treturn;\n\t}\n\tassetsFileListHash.Add(originalPath);\n\tLogger.Info(\"Loading assets file \" + originalPath);\n\tvar assetsFile = new SerializedFile(originalPath, reader, unityVersion);\n\tif (assetsFile.SetVersion(unityVersion)) {\n\t\tLogger.Info(\"Assets file version updated to \" + assetsFile.version);\n\t}\n\tassetsFileList.Add(assetsFile);\n\tresourceFileReaders.Add(reader);\n}", "CodeBleu_score": 38.53108091588967}]}
{"instance_id": "5dacc6a26301", "generation_result": [{"code": "public ImportedFrame FindFrameByPath(string path){\n\t\tif (path == null)\n\t\treturn null;\n\tstring[] pathParts = path.Split('/');\n\tstring frameName = pathParts[pathParts.Length - 1];\n\tif (pathParts.Length > 1) {\n\t\tImportedFrame parent = FindFrameByPath(path.Substring(0, path.LastIndexOf('/')));\n\t\tif (parent != null) {\n\t\t\tfor (int i = 0; i < parent.childs.Count; i++) {\n\t\t\t\tif (parent.childs[i].name == frameName)\n\t\t\t\t\treturn parent.childs[i];\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor (int i = 0; i < childs.Count; i++) {\n\t\t\tif (childs[i].name == frameName)\n\t\t\t\treturn childs[i];\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 45.56995413511008}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\t\tstring name = path.Substring(path.LastIndexOf('/') + 1);\n\tforeach (ImportedFrame child in FindChilds(name)) {\n\t\tif (child.Path == path) {\n\t\t\treturn child;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 63.603962026791294}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\t\tstring name = path.Substring(path.LastIndexOf('/') + 1);\n\tforeach (ImportedFrame child in this.Childs) {\n\t\tif (child.Name == name) {\n\t\t\tif (child.Path == path) {\n\t\t\t\treturn child;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn child.FindFrameByPath(path);\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 61.16473570640889}]}
{"instance_id": "c20b04c4ad37", "generation_result": [{"code": "public static FileReader DecompressGZip(FileReader reader){\n\t\tMemoryStream memoryStream = new MemoryStream();\n\tGZipStream gzipStream = new GZipStream(reader.BaseStream, CompressionMode.Decompress);\n\tgzipStream.CopyTo(memoryStream);\n\tgzipStream.Close();\n\treader.BaseStream.Position = 0;\n\treturn new FileReader(memoryStream);\n}", "CodeBleu_score": 42.33460547782793}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\t\tMemoryStream ms = new MemoryStream();\n\tGZipStream gs = new GZipStream(reader, CompressionMode.Decompress);\n\tgs.CopyTo(ms);\n\treturn new FileReader(ms);\n}", "CodeBleu_score": 28.830509334529097}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\t\tvar ms = new MemoryStream();\n\tusing (var gzip = new GZipStream(reader.BaseStream, CompressionMode.Decompress)) {\n\t\tgzip.CopyTo(ms);\n\t}\n\treturn new FileReader(ms);\n}", "CodeBleu_score": 42.49890343956877}]}
{"instance_id": "11ce5c7b009d", "generation_result": [{"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\t// Initialize the switch and non-switch string collections\n\t_switches = new List<string>();\n\t_nonSwitchStrings = new List<string>();\n\t// Iterate through the command strings\n\tforeach (string commandString in commandStrings) {\n\t\t// If the command string is empty, skip it\n\t\tif (commandString.Length == 0) continue;\n\t\t// If the command string is a stop token, stop parsing switches\n\t\tif (commandString.Equals(StopToken)) break;\n\t\t// If the command string is a switch, add it to the switches collection\n\t\tif (commandString.StartsWith(SwitchPrefix)) {\n\t\t\t_switches.Add(commandString);\n\t\t\tcontinue;\n\t\t}\n\t\t// If the command string is not a switch, add it to the non-switch strings collection\n\t\t_nonSwitchStrings.Add(commandString);\n\t}\n\t// Process the switches\n\tProcessSwitches(switchForms);\n}", "CodeBleu_score": 34.33061899384104}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\tforeach (string commandString in commandStrings) {\n\t\tif (commandString == stopToken) {\n\t\t\tbreak;\n\t\t}\n\t\telse {\n\t\t\tParseString(switchForms, commandString);\n\t\t}\n\t}\n}", "CodeBleu_score": 24.234337883676417}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\t// Initialize variables\n\tstring[] switchTokens = new string[switchForms.Length];\n\tstring[] switchValues = new string[switchForms.Length];\n\tfor (int i = 0; i < switchForms.Length; i++) {\n\t\tswitchTokens[i] = switchForms[i].Token;\n\t\tswitchValues[i] = switchForms[i].Default;\n\t}\n\tParseStrings(switchTokens, switchValues, commandStrings);\n}", "CodeBleu_score": 45.081350028269895}]}
{"instance_id": "b8da2d0a3f76", "generation_result": [{"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t\tthis.m_Texture2D = m_Texture2D;\n\tthis.m_TextureFormat = m_Texture2D.format;\n\tthis.m_Width = m_Texture2D.width;\n\tthis.m_Height = m_Texture2D.height;\n\tthis.m_Version = m_Texture2D.version;\n\tthis.m_IsReadable = m_Texture2D.isReadable;\n\tthis.m_IsPreProcessed = m_Texture2D.isPreProcessed;\n\tthis.m_Platform = EditorUserBuildSettings.activeBuildTarget;\n\tthis.m_OutputSize = new Vector2(m_Texture2D.width, m_Texture2D.height);\n}", "CodeBleu_score": 29.83500830373468}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t\tthis.m_Texture2D = m_Texture2D;\n\tthis.imageData = m_Texture2D.GetRawTextureData();\n\tthis.width = m_Texture2D.width;\n\tthis.height = m_Texture2D.height;\n\tthis.textureFormat = m_Texture2D.format;\n\tthis.version = m_Texture2D.version;\n\tthis.platform = m_Texture2D.GetPlatformTextureID();\n\tthis.outputSize = this.imageData.Length;\n}", "CodeBleu_score": 34.97649911931766}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t\tthis.m_Texture2D = m_Texture2D;\n\tthis.m_Width = m_Texture2D.width;\n\tthis.m_Height = m_Texture2D.height;\n\tthis.m_TextureFormat = m_Texture2D.format;\n\tthis.m_Version = m_Texture2D.version;\n\tthis.m_Platform = m_Texture2D.imageFormat;\n\tthis.m_OutputSize = m_Texture2D.GetRawTextureData().Length;\n}", "CodeBleu_score": 34.53442511494188}]}
{"instance_id": "4d1412b550a3", "generation_result": [{"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t\tresult.Clear();\n\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\tSerializedProperty sp_element = sp.GetArrayElementAtIndex(i);\n\t\tif (sp_element.FindPropertyRelative(\"m_Name\").stringValue != \"\") {\n\t\t\tresult.Add(sp_element.FindPropertyRelative(\"m_Name\").stringValue);\n\t\t}\n\t}\n\tif (result.Count == 0) {\n\t\treturn \"Nothing\";\n\t}\n\tstring result_string = \"\";\n\tfor (int i = 0; i < result.Count; i++) {\n\t\tresult_string += result[i];\n\t\tif (i < result.Count - 1) {\n\t\t\tresult_string += \", \";\n\t\t}\n\t}\n\treturn result_string;\n}", "CodeBleu_score": 41.23991217090966}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t\tresult.Clear();\n\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\tif (!sp.GetArrayElementAtIndex(i).FindPropertyRelative(\"m_Name\").stringValue.Equals(\"\")) {\n\t\t\tresult.Add(sp.GetArrayElementAtIndex(i).FindPropertyRelative(\"m_Name\").stringValue);\n\t\t}\n\t}\n\tif (result.Count == 0) {\n\t\treturn \"Nothing\";\n\t} else {\n\t\tstring resultString = \"\";\n\t\tfor (int i = 0; i < result.Count; i++) {\n\t\t\tif (i < result.Count - 1) {\n\t\t\t\tresultString += result[i] + \", \";\n\t\t\t} else {\n\t\t\t\tresultString += result[i];\n\t\t\t}\n\t\t}\n\t\treturn resultString;\n\t}\n}", "CodeBleu_score": 41.780755740279574}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t\tresult.Clear();\n\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\tSerializedProperty element = sp.GetArrayElementAtIndex(i);\n\t\tstring name = element.FindPropertyRelative(\"name\").stringValue;\n\t\tif (name != \"\") {\n\t\t\tresult.Add(name);\n\t\t}\n\t}\n\tif (result.Count == 0) {\n\t\treturn \"Nothing\";\n\t}\n\tstring names = \"\";\n\tfor (int i = 0; i < result.Count; i++) {\n\t\tnames += result[i];\n\t\tif (i < result.Count - 1) {\n\t\t\tnames += \", \";\n\t\t}\n\t}\n\treturn names;\n}", "CodeBleu_score": 39.88874237927976}]}
{"instance_id": "5014bde74f8b", "generation_result": [{"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t\tif (add) {\n\t\tif (sp.isArray && sp.arraySize > 0) {\n\t\t\tbool exists = false;\n\t\t\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\t\t\tif (sp.GetArrayElementAtIndex(i).FindPropertyRelative(\"name\").stringValue == prop.name) {\n\t\t\t\t\texists = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!exists) {\n\t\t\t\tmenu.AddItem(new GUIContent(\"Add \" + prop.name), false, AddMenuCallback, new AddMenuData(sp, prop));\n\t\t\t}\n\t\t} else {\n\t\t\tmenu.AddItem(new GUIContent(\"Add \" + prop.name), false, AddMenuCallback, new AddMenuData(sp, prop));\n\t\t}\n\t} else {\n\t\tif (sp.isArray && sp.arraySize > 0) {\n\t\t\tbool exists = false;\n\t\t\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\t\t\tif (sp.GetArrayElementAtIndex(i).FindPropertyRelative(\"name\").stringValue == prop.name) {\n\t\t\t\t\texists = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (exists) {\n\t\t\t\tmenu.AddItem(new GUIContent(\"Remove \" + prop.name), false, RemoveMenuCallback, new RemoveMenuData(sp, prop));\n\t\t\t}\n\t\t} else {\n\t\t\tmenu.AddItem(new GUIContent(\"Remove \" + prop.name), false, RemoveMenuCallback, new RemoveMenuData(sp, prop));\n\t\t}\n\t}\n}", "CodeBleu_score": 28.07285851300773}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t\tif (add && !s_ActiveNames.Contains(prop.name)) {\n\t\tmenu.AddItem(new GUIContent(prop.name), false, () => {\n\t\t\tif (sp.arraySize == 0) {\n\t\t\t\tsp.arraySize++;\n\t\t\t}\n\t\t\tsp.GetArrayElementAtIndex(sp.arraySize - 1).FindPropertyRelative(\"name\").stringValue = prop.name;\n\t\t\tsp.GetArrayElementAtIndex(sp.arraySize - 1).FindPropertyRelative(\"type\").intValue = prop.type;\n\t\t\tsp.serializedObject.ApplyModifiedProperties();\n\t\t});\n\t} else if (!add && s_ActiveNames.Contains(prop.name)) {\n\t\tmenu.AddItem(new GUIContent(prop.name), false, () => {\n\t\t\tint index = s_ActiveNames.IndexOf(prop.name);\n\t\t\tsp.DeleteArrayElementAtIndex(index);\n\t\t\tsp.serializedObject.ApplyModifiedProperties();\n\t\t});\n\t}\n}", "CodeBleu_score": 42.02438557725689}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t\tbool isList = sp.isArray;\n\tbool isBool = prop.type == ShaderProperty.PropType.Bool;\n\tbool isInt = prop.type == ShaderProperty.PropType.Int;\n\tbool isFloat = prop.type == ShaderProperty.PropType.Float;\n\tbool isColor = prop.type == ShaderProperty.PropType.Color;\n\tbool isVector = prop.type == ShaderProperty.PropType.Vector;\n\tbool isTex = prop.type == ShaderProperty.PropType.Tex;\n\tbool isTex2D = prop.type == ShaderProperty.PropType.Tex2D;\n\tbool isTex3D = prop.type == ShaderProperty.PropType.Tex3D;\n\tbool isTexCube = prop.type == ShaderProperty.PropType.TexCube;\n\tbool isRange = prop.type == ShaderProperty.PropType.Range;\n\tbool isEnum = prop.type == ShaderProperty.PropType.Enum;\n\n\tif (!isList) {\n\t\tif (add) {\n\t\t\tif (!s_ActiveNames.Contains(prop.name)) {\n\t\t\t\tif (isBool) {\n\t\t\t\t\tmenu.AddItem(new GUIContent(prop.name), false, () => AddProperty(sp, prop, true));\n\t\t\t\t} else if (isInt) {\n\t\t\t\t\tmenu.AddItem(new GUIContent(prop.name), false, () => AddProperty(sp, prop, 0));\n\t\t\t\t} else if (isFloat) {\n\t\t\t\t\tmenu.AddItem(new GUIContent(prop.name), false, () => AddProperty(sp, prop, 0.0f));\n\t\t\t\t} else if (isColor) {\n\t\t\t\t\tmenu.AddItem(new GUIContent(prop.name), false, () => AddProperty(sp, prop, Color.white));\n\t\t\t\t} else if (isVector) {\n\t\t\t\t\tmenu.AddItem(new GUIContent(prop.name), false, () => AddProperty(sp, prop, Vector4.zero));\n\t\t\t\t} else if (isTex) {\n\t\t\t\t\tmenu.AddItem(new GUIContent(prop.name), false, () => AddProperty(sp, prop, Texture2D.whiteTexture));\n\t\t\t\t} else if (isTex2D) {\n\t\t\t\t\tmenu.AddItem(new GUIContent(prop.name), false, ()", "CodeBleu_score": 26.396333854208386}]}
{"instance_id": "20e390481814", "generation_result": [{"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t\tEditorGUI.BeginChangeCheck();\n\tvar mode = 0;\n\tvar x = sp.FindPropertyRelative(\"x\");\n\tvar y = sp.FindPropertyRelative(\"y\");\n\tvar z = sp.FindPropertyRelative(\"z\");\n\tvar isVector3 = !Mathf.Approximately(x.floatValue, y.floatValue) || !Mathf.Approximately(y.floatValue, z.floatValue) || !Mathf.Approximately(z.floatValue, x.floatValue);\n\tif (showXyz || isVector3) {\n\t\tEditorGUILayout.BeginHorizontal();\n\t\tvar newShowXyz = GUILayout.Toggle(showXyz, \"Vector3\", EditorStyles.miniButtonLeft);\n\t\tif (newShowXyz != showXyz) {\n\t\t\tshowXyz = newShowXyz;\n\t\t\tmode = 1;\n\t\t}\n\t\tEditorGUILayout.PropertyField(x, GUIContent.none);\n\t\tEditorGUILayout.EndHorizontal();\n\t\tif (showXyz) {\n\t\t\tEditorGUILayout.BeginHorizontal();\n\t\t\tEditorGUILayout.PropertyField(y, GUIContent.none);\n\t\t\tEditorGUILayout.PropertyField(z, GUIContent.none);\n\t\t\tEditorGUILayout.EndHorizontal();\n\t\t}\n\t} else {\n\t\tvar newFloatValue = x.floatValue;\n\t\tEditorGUILayout.BeginHorizontal();\n\t\tvar newShowXyz = GUILayout.Toggle(!showXyz, \"Float\", EditorStyles.miniButtonLeft);\n\t\tif (newShowXyz != !showXyz) {\n\t\t\tshowXyz = !newShowXyz;\n\t\t\tmode = 1;\n\t\t}\n\t\tnewFloatValue = EditorGUILayout.FloatField(newFloatValue);\n\t\tEditorGUILayout.EndHorizontal();\n\t\tif (newFloatValue != x.floatValue) {\n\t\t\tx.floatValue = newFloatValue;\n\t\t\ty.floatValue = newFloatValue;\n\t\t\tz.floatValue = newFloatValue;\n\t\t\tmode = 1;\n\t\t}\n\t}\n\treturn EditorGUI.EndChangeCheck() || mode == 1;\n}", "CodeBleu_score": 47.078879514116316}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t\tif (sp == null) {\n\t\treturn false;\n\t}\n\tEditorGUI.BeginChangeCheck();\n\tvar mode = 0;\n\tvar x = 0f;\n\tvar y = 0f;\n\tvar z = 0f;\n\tvar xyz = Vector3.zero;\n\tif (sp.type == \"float\") {\n\t\tx = sp.floatValue;\n\t} else if (sp.type == \"vector3\") {\n\t\txyz = sp.vector3Value;\n\t} else {\n\t\treturn false;\n\t}\n\tif (Mathf.Approximately(x, y) && Mathf.Approximately(x, z)) {\n\t\tmode = 0;\n\t} else if (Mathf.Approximately(x, y) || Mathf.Approximately(x, z)) {\n\t\tmode = 1;\n\t} else if (Mathf.Approximately(y, z)) {\n\t\tmode = 2;\n\t} else {\n\t\tmode = 3;\n\t}\n\tvar newMode = 0;\n\tif (showXyz) {\n\t\tnewMode = EditorGUI.IntPopup(sp.rect, mode, new[] { \"Single\", \"X\", \"Y\", \"Z\" }, new[] { 0, 1, 2, 3 });\n\t} else {\n\t\tnewMode = EditorGUI.IntPopup(sp.rect, mode, new[] { \"Single\", \"X\", \"XY\", \"XZ\" }, new[] { 0, 1, 2, 3 });\n\t}\n\tif (EditorGUI.EndChangeCheck()) {\n\t\tif (newMode == 0) {\n\t\t\tif (sp.type == \"float\") {\n\t\t\t\tsp.floatValue = x;\n\t\t\t} else {\n\t\t\t\tsp.vector3Value = new Vector3(x, y, z);\n\t\t\t}\n\t\t} else if (newMode == 1) {\n\t\t\tif (sp.type == \"float\") {\n\t\t\t\tsp.floatValue = x;\n\t\t\t} else {\n\t\t\t\tsp.vector3Value = new Vector3(x, x, x);\n\t\t\t}\n\t\t} else if (newMode == 2) {\n\t\t\tif (sp.type == \"float\") {\n\t\t\t", "CodeBleu_score": 36.26477417249126}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t\tEditorGUI.BeginChangeCheck();\n\tvar showVector3 = showXyz || sp.vector3Value.x != sp.vector3Value.y || sp.vector3Value.x != sp.vector3Value.z;\n\tshowVector3 = GUILayout.Toggle(showVector3, \"Vector3\");\n\tif (EditorGUI.EndChangeCheck()) {\n\t\tshowXyz = !showVector3;\n\t}\n\tif (showVector3) {\n\t\tEditorGUI.indentLevel++;\n\t\tEditorGUILayout.PropertyField(sp.FindPropertyRelative(\"x\"), new GUIContent(\"X\"));\n\t\tEditorGUILayout.PropertyField(sp.FindPropertyRelative(\"y\"), new GUIContent(\"Y\"));\n\t\tEditorGUILayout.PropertyField(sp.FindPropertyRelative(\"z\"), new GUIContent(\"Z\"));\n\t\tEditorGUI.indentLevel--;\n\t\treturn false;\n\t}\n\telse {\n\t\tEditorGUI.BeginChangeCheck();\n\t\tvar val = sp.floatValue;\n\t\tval = EditorGUILayout.FloatField(sp.displayName, val);\n\t\tif (EditorGUI.EndChangeCheck()) {\n\t\t\tsp.floatValue = val;\n\t\t\tsp.serializedObject.ApplyModifiedProperties();\n\t\t}\n\t\treturn true;\n\t}\n}", "CodeBleu_score": 37.47852179516416}]}
{"instance_id": "c3587cbcda7e", "generation_result": [{"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t\treturn Material.Add(baseMat, texture, id, props);\n}", "CodeBleu_score": 11.424087473396519}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t\treturn Material.Add(baseMat, texture, id, props);\n}", "CodeBleu_score": 11.424087473396519}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t\treturn Material.Add(baseMat, texture, id, props);\n}", "CodeBleu_score": 11.424087473396519}]}
{"instance_id": "a35149bc8b8b", "generation_result": [{"code": "public static void Remove(Material customMat){\n\t\tif (customMat == null) {\n\t\treturn;\n\t}\n\tint count = s_Entries.Count;\n\tfor (int i = 0; i < count; i++) {\n\t\tMaterialEntry entry = s_Entries[i];\n\t\tif (entry.material == customMat) {\n\t\t\tif (entry.count > 0) {\n\t\t\t\tentry.count--;\n\t\t\t}\n\t\t\tif (entry.count == 0) {\n\t\t\t\ts_Entries.RemoveAt(i);\n\t\t\t\tif (entry.material != null) {\n\t\t\t\t\tentry.material.shader = null;\n\t\t\t\t\tentry.material.mainTexture = null;\n\t\t\t\t\tentry.material.color = Color.white;\n\t\t\t\t\tentry.material.SetFloat(\"_Mode\", (float)BlendMode.Opaque);\n\t\t\t\t\tentry.material.SetInt(\"_SrcBlend\", (int)BlendMode.One);\n\t\t\t\t\tentry.material.SetInt(\"_DstBlend\", (int)BlendMode.Zero);\n\t\t\t\t\tentry.material.SetInt(\"_ZWrite\", 1);\n\t\t\t\t\tentry.material.renderQueue = -1;\n\t\t\t\t\tentry.material.DisableKeyword(\"_ALPHATEST_ON\");\n\t\t\t\t\tentry.material.DisableKeyword(\"_ALPHABLEND_ON\");\n\t\t\t\t\tentry.material.DisableKeyword(\"_ALPHAPREMULTIPLY_ON\");\n\t\t\t\t\tentry.material.renderQueue = -1;\n\t\t\t\t\tentry.material = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 30.56172598389394}, {"code": "public static void Remove(Material customMat){\n\t\tif (customMat == null) {\n\t\tDebug.LogWarning(\"Cannot remove a null material!\");\n\t\treturn;\n\t}\n\tif (!customMat.HasProperty(\"_CustomMaterialName\")) {\n\t\tDebug.LogWarning(\"Cannot remove a material that doesn't have a custom material name!\");\n\t\treturn;\n\t}\n\tstring name = customMat.GetTag(\"_CustomMaterialName\", false, \"Untagged\");\n\tif (name == \"Untagged\") {\n\t\tDebug.LogWarning(\"Cannot remove a material that doesn't have a custom material name!\");\n\t\treturn;\n\t}\n\tint index = s_Entries.FindIndex(entry => entry.name == name);\n\tif (index == -1) {\n\t\tDebug.LogWarning(\"Cannot remove a material that doesn't have a custom material name!\");\n\t\treturn;\n\t}\n\tif (s_Entries[index].count <= 0) {\n\t\tDebug.LogWarning(\"Cannot remove a material that doesn't have a custom material name!\");\n\t\treturn;\n\t}\n\ts_Entries[index].count--;\n\tif (s_Entries[index].count == 0) {\n\t\ts_Entries.RemoveAt(index);\n\t\tcustomMat.shader = null;\n\t\tcustomMat.SetTexture(\"_MainTex\", null);\n\t\tcustomMat.SetTexture(\"_MaskTex\", null);\n\t\tcustomMat.SetTexture(\"_BumpMap\", null);\n\t\tcustomMat.SetTexture(\"_SpecMap\", null);\n\t\tcustomMat.SetFloat(\"_Shininess\", 0.0f);\n\t\tcustomMat.SetColor(\"_Color\", Color.white);\n\t\tcustomMat.SetColor(\"_SpecColor\", Color.black);\n\t\tcustomMat.SetColor(\"_EmissionColor\", Color.black);\n\t\tcustomMat.SetFloat(\"_EmissionStrength\", 0.0f);\n\t\tcustomMat.SetFloat(\"_Cutoff\", 0.5f);\n\t\tcustomMat.SetFloat(\"_Glossiness\", 0.0f);\n\t\tcustomMat.SetFloat(\"_Metallic\", 0.0f);\n\t\tcustomMat.SetFloat(\"_Mode\", 0.0f);\n\t\tcustomMat.SetFloat(\"_Blend\", 0.0f);\n\t\tcustomMat.SetFloat(\"_SrcBlend\", 1.0f);\n\t\tcustomMat.SetFloat", "CodeBleu_score": 28.775553942762876}, {"code": "public static void Remove(Material customMat){\n\t\tif (customMat == null) {\n\t\treturn;\n\t}\n\n\tif (!customMat.HasProperty(s_Entries)) {\n\t\treturn;\n\t}\n\n\tint count = customMat.GetFloat(s_Entries);\n\tif (count <= 0) {\n\t\treturn;\n\t}\n\n\tfor (int i = 0; i < s_Entries.Length; i++) {\n\t\tif (customMat.GetVector(s_Entries[i]).z == count) {\n\t\t\tcustomMat.SetVector(s_Entries[i], Vector4.zero);\n\t\t\tcount--;\n\t\t\tif (count <= 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tcustomMat.SetFloat(s_Entries, count);\n}", "CodeBleu_score": 30.266853217361273}]}
{"instance_id": "892bbee52ab9", "generation_result": [{"code": "private void RefreshParticles(GameObject root){\n\t\tList<ParticleSystem> particleSystems = new List<ParticleSystem>();\n\troot.GetComponentsInChildren(particleSystems);\n\tparticleSystems.RemoveAll(ps => ps.GetComponentInParent<UIParticle>() != this);\n\tforeach (ParticleSystem ps in particleSystems) {\n\t\tUIParticle uiParticle = ps.GetComponentInParent<UIParticle>();\n\t\tif (uiParticle != null) {\n\t\t\tuiParticle.RefreshParticle(ps);\n\t\t}\n\t}\n}", "CodeBleu_score": 17.316555162916767}, {"code": "private void RefreshParticles(GameObject root){\n\t\tUIParticle[] particleSystems = root.GetComponentsInChildren<UIParticle>();\n\tList<UIParticle> validParticleSystems = new List<UIParticle>();\n\n\tfor (int i = 0; i < particleSystems.Length; i++) {\n\t\tif (particleSystems[i] == this) continue;\n\t\tif (particleSystems[i].textureSheetAnimation != null && particleSystems[i].textureSheetAnimation.length > 1) {\n\t\t\tparticleSystems[i].textureSheetAnimation.length = 1;\n\t\t\tparticleSystems[i].textureSheetAnimation.enabled = false;\n\t\t}\n\t\tvalidParticleSystems.Add(particleSystems[i]);\n\t}\n\n\tfor (int i = 0; i < validParticleSystems.Count; i++) {\n\t\tif (validParticleSystems[i].textureSheetAnimation != null && validParticleSystems[i].textureSheetAnimation.length > 1) {\n\t\t\tvalidParticleSystems[i].textureSheetAnimation.enabled = true;\n\t\t}\n\t}\n\n\tif (validParticleSystems.Count > 0) {\n\t\tfor (int i = 0; i < validParticleSystems.Count; i++) {\n\t\t\tvalidParticleSystems[i].RefreshParticles();\n\t\t}\n\t}\n}", "CodeBleu_score": 25.805113182392454}, {"code": "private void RefreshParticles(GameObject root){\n\t\tif (root == null)\n\t\treturn;\n\n\tList<ParticleSystem> particles = new List<ParticleSystem>();\n\n\t// Collect all particle systems in the hierarchy\n\troot.GetComponentsInChildren<ParticleSystem>(particles);\n\n\t// Remove all particle systems that are not associated with this UIParticle instance\n\tfor (int i = particles.Count - 1; i >= 0; i--) {\n\t\tParticleSystem ps = particles[i];\n\t\tif (ps.GetComponentInParent<UIParticle>() != this)\n\t\t\tparticles.RemoveAt(i);\n\t}\n\n\t// Adjust the texture sheet animation settings of all particle systems\n\tfor (int i = 0; i < particles.Count; i++) {\n\t\tParticleSystem ps = particles[i];\n\t\tif (ps.textureSheetAnimation.enabled) {\n\t\t\tps.textureSheetAnimation.timeMode = ParticleSystemAnimationTimeMode.SinceLastParticle;\n\t\t\tps.textureSheetAnimation.frameOverTime.scalar = 1.0f / ps.main.duration;\n\t\t}\n\t}\n\n\t// Refresh the particle systems\n\tfor (int i = 0; i < particles.Count; i++)\n\t\tparticles[i].RefreshParticles();\n}", "CodeBleu_score": 43.68346682156095}]}
{"instance_id": "d6b082e37770", "generation_result": [{"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\tvar currentAssembly = Assembly.GetCallingAssembly();\ncontainerBuilder.RegisterAssemblyTypes(currentAssembly).AssignableTo<IColorSwapManager>().As<IColorSwapManager>().SingleInstance();\n}", "CodeBleu_score": 51.450119454158894}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\tcontainerBuilder.RegisterAssemblyTypes(Assembly.GetExecutingAssembly()).AssignableTo<IColorSwapManager>().As<IColorSwapManager>().SingleInstance;\n}", "CodeBleu_score": 28.286423511414466}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t\tAssembly currentAssembly = Assembly.GetCallingAssembly();\n\tcontainerBuilder.RegisterAssemblyTypes(currentAssembly)\n\t\t.AssignableTo<IColorSwapManager>()\n\t\t.As<IColorSwapManager>()\n\t\t.SingleInstance();\n}", "CodeBleu_score": 60.371195711224125}]}
{"instance_id": "2359d72977a4", "generation_result": [{"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t if (ipAddress == null) throw new ArgumentNullException(nameof(ipAddress));\n if (port <= 0) throw new ArgumentOutOfRangeException(nameof(port));\n if (this.CurrentState != ConnectionState.Disconnected) throw new InvalidOperationException();\n this.CurrentState = ConnectionState.Connecting;\n this.ipAddress = ipAddress;\n this.port = port;\n this.serializer = await this.serializerFactory.GetSerializerAsync();\n this.CurrentState = ConnectionState.Negotiating;\n await this.NegotiateReservationAsync();\n }", "CodeBleu_score": 28.506194952866572}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t if (ipAddress == null) {\n throw new ArgumentNullException(nameof(ipAddress));\n }\n if (port <= 0) {\n throw new ArgumentOutOfRangeException(nameof(port));\n }\n if (this.IsConnected) {\n throw new InvalidOperationException(\"Already connected.\");\n }\n this.ipAddress = ipAddress;\n this.port = port;\n this.serializer = new Serializer();\n await this.serializer.InitializeAsync(ipAddress, port);\n this.currentState = ConnectionState.NegotiatingReservation;\n await this.NegotiateReservationAsync();\n }", "CodeBleu_score": 28.637165932600105}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t if (ipAddress == null) {\n throw new ArgumentNullException(nameof(ipAddress));\n }\n if (port < 0 || port > 65535) {\n throw new ArgumentOutOfRangeException(nameof(port), \"Port must be between 0 and 65535\");\n }\n if (this.State != ConnectionState.Disconnected) {\n throw new InvalidOperationException(\"Cannot connect while the connection state is not disconnected.\");\n }\n this.ipAddress = ipAddress;\n this.port = port;\n this.State = ConnectionState.Connecting;\n this.serializerInitializationTask = this.serializer.InitializeAsync();\n await this.NegotiateReservationAsync();\n }", "CodeBleu_score": 27.41732050056963}]}
{"instance_id": "151a27d718b1", "generation_result": [{"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t\tif (sessionConnectionState == null) {\n\t\tthrow new ArgumentNullException(nameof(sessionConnectionState));\n\t}\n\tif (sessionConnectionState.CurrentState == null) {\n\t\tthrow new ArgumentException(\"CurrentState cannot be null.\", nameof(sessionConnectionState));\n\t}\n\tif (sessionConnectionState.CurrentState.CurrentStage == null) {\n\t\tthrow new ArgumentException(\"CurrentStage cannot be null.\", nameof(sessionConnectionState));\n\t}\n\tif (sessionConnectionState.CurrentState.CurrentStage.ToString() == null) {\n\t\tthrow new ArgumentException(\"CurrentStage.ToString cannot be null.\", nameof(sessionConnectionState));\n\t}\n\tif (sessionConnectionState.CurrentState.ToString() == null) {\n\t\tthrow new ArgumentException(\"CurrentState.ToString cannot be null.\", nameof(sessionConnectionState));\n\t}\n\tif (sessionConnectionState.ToString() == null) {\n\t\tthrow new ArgumentException(\"ToString cannot be null.\", nameof(sessionConnectionState));\n\t}\n\tValidate.NotNull(sessionConnectionState.CurrentState);\n\tValidate.NotNull(sessionConnectionState.CurrentState.CurrentStage);\n\tValidate.NotNull(sessionConnectionState.CurrentState.ToString);\n\tValidate.NotNull(sessionConnectionState.ToString);\n\tif (CurrentState == null) {\n\t\tthrow new InvalidOperationException(\"CurrentState cannot be null.\");\n\t}\n\tif (CurrentState.CurrentStage == null) {\n\t\tthrow new InvalidOperationException(\"CurrentStage cannot be null.\");\n\t}\n\tif (CurrentState.ToString() == null) {\n\t\tthrow new InvalidOperationException(\"CurrentState.ToString cannot be null.\");\n\t}\n\tif (CurrentState != sessionConnectionState.CurrentState) {\n\t\tLog.Debug(\"MultiplayerSessionConnectionStateChangedHandler: \" + CurrentState.ToString() + \" -> \" + sessionConnectionState.CurrentState.ToString());\n\t}\n\tCurrentState = sessionConnectionState.CurrentState;\n\tif (sessionConnectionState.CurrentState == MultiplayerSessionConnectionState.SessionReserved) {\n\t\tLog.Debug(\"MultiplayerSessionConnectionStateChangedHandler: PlayerName: \" + sessionConnectionState.PlayerName);\n\t}\n\tConnectionStateChanged?.Invoke(sessionConnectionState);\n}", "CodeBleu_score": 32.26407054430192}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\tif (sessionConnectionState == null) {", "CodeBleu_score": 2.425097533225341}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\tif (sessionConnectionState == null) {\nthrow new ArgumentNullException(\"sessionConnectionState\");\n}\n\n// Validate the input.\nValidate.NotNull(sessionConnectionState, \"sessionConnectionState\");\n\n// Log the transition from the previous state to the new state.\nif (sessionConnectionState.PreviousState != null) {\nLog.Debug(\"Connection state changed from \" + sessionConnectionState.PreviousState.ToString() + \" to \" + sessionConnectionState.CurrentState.ToString());\n}\n\n// Invoke the ConnectionStateChanged event.\nif (ConnectionStateChanged != null) {\nConnectionStateChanged(sessionConnectionState);\n}\n\n// Update the player name in the log if the new state is SESSION_RESERVED.\nif (sessionConnectionState.CurrentState == MultiplayerSessionConnectionState.SessionReserved) {\nLog.Debug(\"Player name: \" + sessionConnectionState.PlayerName);\n}\n}", "CodeBleu_score": 38.59185099216541}]}
{"instance_id": "7f7717307d6a", "generation_result": [{"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t\tawait Task.Run(() => {\n\t\tclient.Start();\n\t\tclient.Connect(ipAddress, serverPort, \"nitrox\");\n\t}).ConfigureAwait(false);\n\tconnectedEvent.Reset();\n\tconnectedEvent.WaitOne(2000);\n\tconnectedEvent.Reset();\n}", "CodeBleu_score": 78.81736141365941}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\tLog.Info", "CodeBleu_score": 10.356940490085824}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\tLog.Info", "CodeBleu_score": 10.356940490085824}]}
{"instance_id": "eeb95434f1eb", "generation_result": [{"code": "public void StartFireSuppression(NitroxId id){\n\t\tCyclops cyclops = Cyclops.GetCyclops(id);\n\tif (cyclops == null) {\n\t\tDebug.LogWarning(\"Cyclops.StartFireSuppression: Cyclops not found for NitroxId: \" + id);\n\t\treturn;\n\t}\n\tCyclopsFireSuppressionSystemButton fireSuppButton = cyclops.GetComponentInChildren<CyclopsFireSuppressionSystemButton>();\n\tif (fireSuppButton == null) {\n\t\tDebug.LogWarning(\"Cyclops.StartFireSuppression: CyclopsFireSuppressionSystemButton not found on Cyclops: \" + cyclops.name);\n\t\treturn;\n\t}\n\tfireSuppButton.subFire.StartCoroutine(fireSuppButton.StartFireSuppressionSystem());\n\tfireSuppButton.StartCooldown();\n}", "CodeBleu_score": 56.699627669993504}, {"code": "public void StartFireSuppression(NitroxId id){\n\t\tCyclops cyclops = NitroxEntity.GetEntity<Cyclops>(id);\n\tCyclopsFireSuppressionSystemButton fireSuppButton = cyclops.GetComponentInChildren<CyclopsFireSuppressionSystemButton>();\n\tif (fireSuppButton != null) {\n\t\tfireSuppButton.subFire.StartCoroutine(fireSuppButton.StartFireSuppressionSystem());\n\t\tfireSuppButton.StartCooldown();\n\t}\n}", "CodeBleu_score": 45.81848078220227}, {"code": "public void StartFireSuppression(NitroxId id){\n\t\tCyclops cyclops = Cyclops.GetById(id);\n\tif (cyclops == null) {\n\t\tDebug.LogWarning(\"Cyclops.StartFireSuppression: Could not find Cyclops with NitroxId \" + id);\n\t\treturn;\n\t}\n\tCyclopsFireSuppressionSystemButton fireSuppButton = cyclops.GetComponentInChildren<CyclopsFireSuppressionSystemButton>();\n\tif (fireSuppButton == null) {\n\t\tDebug.LogWarning(\"Cyclops.StartFireSuppression: Could not find CyclopsFireSuppressionSystemButton on Cyclops with NitroxId \" + id);\n\t\treturn;\n\t}\n\tfireSuppButton.subFire.StartCoroutine(fireSuppButton.StartFireSuppressionSystem());\n\tfireSuppButton.StartCooldown();\n}", "CodeBleu_score": 56.48479938010059}]}
{"instance_id": "a23a043559c6", "generation_result": [{"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t\tif (subRoot.TryGetId() == null) return;\n\tif (damagePoint.TryGetId() == null) return;\n\tif (damagePoint.TryGetDamageType() == null) return;\n\tif (damagePoint.TryGetDamageAmount() == null) return;\n\tif (damagePoint.TryGetHealth() == null) return;\n\tif (damagePoint.TryGetMaxHealth() == null) return;\n\tif (damagePoint.TryGetHealthRatio() == null) return;\n\tif (damagePoint.TryGetMaxHealthRatio() == null) return;\n\tif (damagePoint.TryGetIsBroken() == null) return;\n\tif (damagePoint.TryGetIsRepaired() == null) return;\n\tif (damagePoint.TryGetRepairAmount() == null) return;\n\tif (damagePoint.TryGetRepairCost() == null) return;\n\tif (damagePoint.TryGetRepairRate() == null) return;\n\tif (damagePoint.TryGetRepairTime() == null) return;\n\tif (damagePoint.TryGetRepairTimeRemaining() == null) return;\n\tif (damagePoint.TryGetRepairTimeRatio() == null) return;\n\tif (damagePoint.TryGetRepairTimeRemainingRatio() == null) return;\n\tif (damagePoint.TryGetIsRepairable() == null) return;\n\tif (damagePoint.TryGetRepairableAmount() == null) return;\n\tif (damagePoint.TryGetRepairableCost() == null) return;\n\tif (damagePoint.TryGetRepairableRate() == null) return;\n\tif (damagePoint.TryGetRepairableTime() == null) return;\n\tif (damagePoint.TryGetRepairableTimeRemaining() == null) return;\n\tif (damagePoint.TryGetRepairableTimeRatio() == null) return;\n\tif (damagePoint.TryGetRepairableTimeRemainingRatio() == null) return;\n\tif (damagePoint.TryGetRepairableRatio() == null) return;\n\tif (damagePoint.TryGetRepairableRatioRemaining() == null) return;\n\tif (damagePoint.TryGetRepairableRatioRatio() == null) return;\n\tif (damagePoint.TryGetRepairableRatioRatioRemaining() == null) return", "CodeBleu_score": 22.523709385295618}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t\tif (subRoot == null || damagePoint == null) return;\n\tif (subRoot.TryGetIdOrWarn() == 0) return;\n\tif (damagePoint.TryGetIdOrWarn() == 0) return;\n\tif (repairAmount <= 0) return;\n\tif (!damagePoint.IsRepaired) return;\n\tif (damagePoint.IsRepaired) {\n\t\tvar packet = new RepairPacket();\n\t\tpacket.subRootId = subRoot.GetId();\n\t\tpacket.damagePointId = damagePoint.GetId();\n\t\tpacket.repairAmount = repairAmount;\n\t\tpacketSender.Send(packet);\n\t}\n}", "CodeBleu_score": 40.90849864645817}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t\tif (subRoot == null) {\n\t\tDebug.LogWarning(\"The SubRoot is null. Aborting.\");\n\t\treturn;\n\t}\n\tif (damagePoint == null) {\n\t\tDebug.LogWarning(\"The damage point is null. Aborting.\");\n\t\treturn;\n\t}\n\tif (repairAmount <= 0) {\n\t\tDebug.LogWarning(\"The repair amount is not positive. Aborting.\");\n\t\treturn;\n\t}\n\tif (subRoot.TryGetIdOrWarn() == null) {\n\t\tDebug.LogWarning(\"The SubRoot does not have an ID. Aborting.\");\n\t\treturn;\n\t}\n\tif (damagePoint.TryGetIdOrWarn() == null) {\n\t\tDebug.LogWarning(\"The damage point does not have an ID. Aborting.\");\n\t\treturn;\n\t}\n\tPacket packet = new Packet(PacketType.SUBROOT_DAMAGE_POINT_REPAIR);\n\tpacket.Add(subRoot.TryGetIdOrWarn());\n\tpacket.Add(damagePoint.TryGetIdOrWarn());\n\tpacket.Add(repairAmount);\n\tpacketSender.Send(packet);\n}", "CodeBleu_score": 38.08162752536598}]}
{"instance_id": "dfb3586de856", "generation_result": [{"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t\tif (subRoot.TryGetIdOrWarn(out int id)) {\n\t\tif (subRoot.GetComponent<LiveMixin>().health > 0) {\n\t\t\tif (info.IsSome) {\n\t\t\t\tCyclopsDamageInfoData damageInfo = new CyclopsDamageInfoData();\n\t\t\t\tdamageInfo.damage = info.Value.amount;\n\t\t\t\tdamageInfo.position = info.Value.position.ToDto();\n\t\t\t\tdamageInfo.dealerId = info.Value.dealer.GetId();\n\t\t\t\tdamageInfo.targetId = id;\n\t\t\t\tdamageInfo.sourceId = info.Value.source.GetId();\n\t\t\t\tdamageInfo.damageType = (int)info.Value.type;\n\t\t\t\tdamageInfo.fire = GetActiveRoomFires(subRoot.GetComponent<SubFire>()).ToArray();\n\t\t\t\tdamageInfo.damagePoints = GetActiveDamagePoints(subRoot).ToArray();\n\t\t\t\tpacketSender.Send(new CyclopsDamage(damageInfo));\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 41.568681958625085}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\tif (!subRoot.TryGetIdOrWarn(this)) return;\nif (subRoot.GetComponent<LiveMixin>().health <= 0) return;\n\nvar damage = new CyclopsDamage();\ndamage.dealer = subRoot.GetId();\ndamage.position = subRoot.transform.position.ToDto();\n\nif (info.HasValue) {\nvar damageInfo = new CyclopsDamageInfoData();\ndamageInfo.damage = info.Value.damage;\ndamageInfo.force = info.Value.force;\ndamageInfo.position = info.Value.position.ToDto();\ndamageInfo.forceDirection = info.Value.forceDirection.ToDto();\ndamageInfo.forceType = (int)info.Value.forceType;\ndamage.info = damageInfo;\n}\n\ndamage.fires = GetActiveRoomFires(subRoot.GetComponent<SubFire>()).ToArray();\ndamage.damagePoints = GetActiveDamagePoints(subRoot).ToArray();\n\npacketSender.Send(damage);\n}", "CodeBleu_score": 44.18065746098888}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t\tif (subRoot.TryGetIdOrWarn() && subRoot.GetComponent<LiveMixin>().HasEnoughHealth()) {\n\t\tvar damage = new CyclopsDamage();\n\t\tdamage.dealer = subRoot.GetId();\n\t\tdamage.damagePoints = info.IsSome ? info.Value.GetDamagePoints() : GetActiveDamagePoints(subRoot).ToArray();\n\t\tdamage.fires = info.IsSome ? info.Value.GetFires() : GetActiveRoomFires(subRoot.GetComponent<SubFire>()).ToArray();\n\t\tpacketSender.Send(damage);\n\t}\n}", "CodeBleu_score": 36.68592287433026}]}
{"instance_id": "03223c10109f", "generation_result": [{"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t\tforeach (Entity dirtyEntity in dirtyEntities) {\n\t\tif (dirtyEntity != null) {\n\t\t\tRemoveEntityHierarchy(dirtyEntity);\n\t\t\tGameObject gameObject = NitroxEntity.GetObjectFrom(dirtyEntity);\n\t\t\tif (gameObject != null) {\n\t\t\t\tGameObject.Destroy(gameObject);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 41.60572258322712}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t\tforeach (var entity in dirtyEntities) {\n\t\tRemoveEntityHierarchy(entity);\n\t\tvar go = NitroxEntity.GetObjectFrom(entity);\n\t\tif (go != null) {\n\t\t\tObject.Destroy(go);\n\t\t}\n\t}\n}", "CodeBleu_score": 40.82887030598833}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t\tforeach (Entity entity in dirtyEntities) {\n\t\tRemoveEntityHierarchy(entity);\n\t\tGameObject gameObject = NitroxEntity.GetObjectFrom(entity);\n\t\tif (gameObject != null) {\n\t\t\tDestroy(gameObject);\n\t\t}\n\t}\n}", "CodeBleu_score": 49.269118928184426}]}
{"instance_id": "990abe8e473e", "generation_result": [{"code": "private void AddPendingParentEntity(Entity entity){\n\t\tif (pendingParentEntitiesByParentId.TryGetValue(entity.ParentId, out var pendingEntitiesForParentId)) {\n\t\tpendingEntitiesForParentId.Add(entity);\n\t}\n\telse {\n\t\tpendingEntitiesForParentId = new List<Entity>();\n\t\tpendingEntitiesForParentId.Add(entity);\n\t\tpendingParentEntitiesByParentId.Add(entity.ParentId, pendingEntitiesForParentId);\n\t}\n}", "CodeBleu_score": 38.75928856741576}, {"code": "private void AddPendingParentEntity(Entity entity){\n\t\t// Check if the parent ID already has an associated list in the dictionary.\n\tif (pendingParentEntitiesByParentId.TryGetValue(entity.ParentEntityId, out List<Entity> pendingParentEntities) == false) {\n\t\t// If not, it creates one.\n\t\tpendingParentEntities = new List<Entity>();\n\t\tpendingParentEntitiesByParentId.Add(entity.ParentEntityId, pendingParentEntities);\n\t}\n\t// Then it adds the entity to the appropriate list.\n\tpendingParentEntities.Add(entity);\n}", "CodeBleu_score": 50.98798352262688}, {"code": "private void AddPendingParentEntity(Entity entity){\n\t\tif (!pendingParentEntitiesByParentId.TryGetValue(entity.ParentId, out var pendingParentEntities)) {\n\t\tpendingParentEntities = new List<Entity>();\n\t\tpendingParentEntitiesByParentId.Add(entity.ParentId, pendingParentEntities);\n\t}\n\tpendingParentEntities.Add(entity);\n}", "CodeBleu_score": 53.82606773965538}]}
{"instance_id": "a885fbb1f085", "generation_result": [{"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t\tif (cooldown < clawArm.pickupTime) {\n\t\tclawArm.armAction = ArmAction.StartUseTool;\n\t} else if (cooldown < clawArm.punchTime) {\n\t\tclawArm.armAction = ArmAction.AltHit;\n\t} else {\n\t\tDebug.LogError(\"Invalid claw arm action: \" + cooldown);\n\t}\n\tBroadcastArmAction(clawArm);\n}", "CodeBleu_score": 29.9490980852688}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t\tif (cooldown < clawArm.pickupTime) {\n\t\tclawArm.action = ExosuitArmAction.START_USE_TOOL;\n\t} else if (cooldown < clawArm.pickupTime + clawArm.punchTime) {\n\t\tclawArm.action = ExosuitArmAction.ALT_HIT;\n\t} else {\n\t\tLog.Error(\"ExosuitClawArm.BroadcastClawUse: Cooldown \" + cooldown + \" is greater than the punch time \" + clawArm.pickupTime + \" + \" + clawArm.punchTime + \".\");\n\t}\n\tBroadcastArmAction(clawArm);\n}", "CodeBleu_score": 36.62506098815758}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t\tif (cooldown <= clawArm.pickupTime) {\n\t\tclawArm.armAction = ExosuitArmAction.START_USE_TOOL;\n\t} else if (cooldown <= clawArm.punchTime) {\n\t\tclawArm.armAction = ExosuitArmAction.ALT_HIT;\n\t} else {\n\t\tLog.Error(\"ExosuitClawArm.BroadcastClawUse: Cooldown time of \" + cooldown + \" is greater than the punch time of \" + clawArm.punchTime + \" and the pickup time of \" + clawArm.pickupTime + \".\");\n\t}\n\tBroadcastArmAction(clawArm);\n}", "CodeBleu_score": 37.2227600826608}]}
{"instance_id": "e390441c8dc2", "generation_result": [{"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t\tif (gameObject == null || parent == null) return;\n\tif (gameObject.TryGetIdOrWarn(out var gameObjectId) && parent.TryGetIdOrWarn(out var parentId)) {\n\t\tvar entityMetadata = _entityMetadataManager.Extract(gameObject);\n\t\tif (entityMetadata != null) {\n\t\t\tvar entity = new InstalledBatteryEntity {\n\t\t\t\tEntityMetadata = entityMetadata,\n\t\t\t\tParentId = parentId,\n\t\t\t\tInstalledBatteryType = techType\n\t\t\t};\n\t\t\t_packetSender.Send(new EntitySpawnedByClient(entity));\n\t\t}\n\t}\n}", "CodeBleu_score": 49.94128461278159}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t\tif (gameObject.TryGetIdOrWarn(out var entityId) && parent.TryGetIdOrWarn(out var parentId)) {\n\t\tvar entityMetadata = metadata.OrNull(techType);\n\t\tif (entityMetadata != null) {\n\t\t\tvar entity = new InstalledBatteryEntity(entityId, parentId, entityMetadata);\n\t\t\tpacketSender.Send(new EntitySpawnedByClient(entity));\n\t\t}\n\t}\n}", "CodeBleu_score": 40.40624243440122}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t\tif (gameObject == null) {\n\t\treturn;\n\t}\n\n\tif (parent == null) {\n\t\treturn;\n\t}\n\n\tif (techType == TechType.None) {\n\t\treturn;\n\t}\n\n\tlong entityId = gameObject.TryGetIdOrWarn();\n\tlong parentId = parent.TryGetIdOrWarn();\n\n\tif (entityId == 0L) {\n\t\treturn;\n\t}\n\n\tif (parentId == 0L) {\n\t\treturn;\n\t}\n\n\tEntityData entityData = EntityMetadataManager.Extract(gameObject);\n\tif (entityData == null) {\n\t\treturn;\n\t}\n\n\tInstalledBatteryEntity installedBatteryEntity = new InstalledBatteryEntity {\n\t\tId = entityId,\n\t\tParentId = parentId,\n\t\tMetadata = entityData,\n\t\tBatteryTechType = techType\n\t};\n\n\tEntitySpawnedByClient entitySpawnedByClient = new EntitySpawnedByClient {\n\t\tEntity = installedBatteryEntity\n\t};\n\n\tpacketSender.Send(entitySpawnedByClient);\n}", "CodeBleu_score": 36.84177048054569}]}
{"instance_id": "a87b772a8e5a", "generation_result": [{"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t\tif (gameObject == null) return;\n\tif (gameObject.GetComponent<NitroxEntity>() == null) return;\n\tif (gameObject.GetComponent<NitroxEntity>().NitroxId != 0) return;\n\n\tPickingUpObject = gameObject;\n\n\tRemoveAnyRemoteControl();\n\tif (gameObject.TryGetNitroxId() == false) gameObject.GenerateNewId();\n\tentities.MarkAsSpawned(gameObject);\n\n\tLog.Debug(\"Picked up \" + gameObject.name);\n\n\tConvertToInventoryItemEntity(gameObject, techType);\n\n\tpacketSender.Send(new PickupItem(gameObject.GetComponent<NitroxEntity>().NitroxId));\n\n\tPickingUpObject = null;\n}", "CodeBleu_score": 44.25520941501667}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t\tif (gameObject == null) {\n\t\treturn;\n\t}\n\tif (PickingUpObject != null) {\n\t\treturn;\n\t}\n\tPickingUpObject = gameObject;\n\tRemoveAnyRemoteControl();\n\tif (!gameObject.TryGetNitroxId()) {\n\t\tgameObject.GenerateNewId();\n\t}\n\tentities.StopWatchingEntity(gameObject);\n\tConvertToInventoryItemEntity(gameObject);\n\tentities.MarkAsSpawned(gameObject);\n\tLog.Debug(\"Picked up \" + gameObject.GetTechName() + \" with ID \" + gameObject.GetNitroxId());\n\tPickupItem packet = new PickupItem();\n\tpacket.itemId = gameObject.GetNitroxId();\n\tpacket.itemType = techType;\n\tpacketSender.Send(packet);\n\tPickingUpObject = null;\n}", "CodeBleu_score": 45.52215837619622}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t\tif (gameObject == null) return;\n\tif (gameObject.TryGetComponent(out Pickupable pickupable)) {\n\t\tif (pickupable.pickupable == Pickupable.PickupableType.NotPickupable) return;\n\t\tif (pickupable.pickupable == Pickupable.PickupableType.Pickupable) {\n\t\t\tif (gameObject.TryGetComponent(out NitroxEntity nitroxEntity)) {\n\t\t\t\tif (nitroxEntity.TryGetComponent(out NitroxEntity.NitroxEntityData nitroxEntityData)) {\n\t\t\t\t\tif (nitroxEntityData.NitroxId == Guid.Empty) {\n\t\t\t\t\t\tnitroxEntityData.NitroxId = NitroxEntity.GenerateNewId();\n\t\t\t\t\t}\n\t\t\t\t\tNitroxEntity.EntityPositionBroadcaster.StopWatchingEntity(gameObject);\n\t\t\t\t\tRemoveAnyRemoteControl(gameObject);\n\t\t\t\t\tentities.MarkAsSpawned(gameObject);\n\t\t\t\t\tLog.Debug(\"Picked up \" + gameObject.name + \" with NitroxId \" + nitroxEntityData.NitroxId.ToString() + \".\");\n\t\t\t\t\tConvertToInventoryItemEntity(gameObject);\n\t\t\t\t\tpacketSender.Send(new PickupItem(nitroxEntityData.NitroxId, techType));\n\t\t\t\t\tgameObject.GetComponent<Pickupable>().pickupable = Pickupable.PickupableType.NotPickupable;\n\t\t\t\t\tgameObject.GetComponent<Pickupable>().pickupableString = \"\";\n\t\t\t\t\tgameObject.GetComponent<Pickupable>().pickupableSprite = null;\n\t\t\t\t\tgameObject.GetComponent<Pickupable>().pickupableDescription = \"\";\n\t\t\t\t\tgameObject.GetComponent<Pickupable>().pickupableSprite = null;\n\t\t\t\t\tgameObject.GetComponent<Pickupable>().pickupableSprite = null;\n\t\t\t\t\tgameObject.GetComponent<Pickupable>().pickupableSprite = null;\n\t\t\t\t\tgameObject.GetComponent<Pickupable>().pickupableSprite = null;\n\t\t\t\t\tgameObject.GetComponent<Pickupable>().pickupableSprite = null;\n\t\t\t\t\tgameObject.GetComponent<Pickupable>().pickupableSprite = null;\n\t\t\t\t\tgameObject.GetComponent<Pickupable>().pickupableSprite = null;\n\t\t\t\t\tgameObject.GetComponent<Pickupable>().pickupableSprite = null;\n\t\t\t\t\tgameObject.GetComponent<Pickupable>().pickupableSprite = null;\n\t\t\t\t\tgameObject.GetComponent<Pickupable>().pickupableSprite = null;\n\t\t\t\t\tgameObject.GetComponent<Pickupable>().pickupableSprite = null", "CodeBleu_score": 40.0858611048707}]}
{"instance_id": "b6d1e68114e1", "generation_result": [{"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t\t// Get the NitroxId for the GameObject, or generate a new one if it doesn't have one.\n\tNitroxId nitroxId = gameObject.RequireComponent<PrefabIdentifier>().GetNitroxIdOrGenerateNew();\n\t// Get the class ID and TechType of the GameObject.\n\tClassId classId = gameObject.GetComponent<Pickupable>().ClassId;\n\tTechType techType = gameObject.GetComponent<Pickupable>().GetTechType();\n\t// Get the metadata and child entities of the GameObject.\n\tList<Entity> children = GetPrefabChildren(gameObject, classId, entityMetadataManager).ToList();\n\tEntityMetadata metadata = entityMetadataManager.Extract(gameObject);\n\t// Get the player's ID.\n\tPlayer player = Player.main;\n\tif (player == null) {\n\t\tthrow new NullReferenceException(\"Player.main is null!\");\n\t}\n\t// Construct an InventoryItemEntity using the NitroxId, class ID, TechType, metadata, child entities, and player ID.\n\tInventoryItemEntity entity = new InventoryItemEntity(nitroxId, classId, techType, metadata, children, player.GetIdOrGenerateNew());\n\t// Try to populate the entity with battery data, if applicable.\n\tBatteryChildEntityHelper.TryPopulateInstalledBattery(entity, gameObject);\n\treturn entity;\n}", "CodeBleu_score": 51.70865218455346}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t\t// get the player's ID\n\tvar playerID = Player.main.TryGetNitroxId();\n\n\t// get the item's ID or generate a new one\n\tvar itemId = NitroxEntity.GetIdOrGenerateNew(gameObject);\n\n\t// get the item's class ID and TechType\n\tvar classID = gameObject.GetComponent<PrefabIdentifier>()?.ClassID ?? -1;\n\tvar techType = gameObject.GetComponent<Pickupable>()?.GetTechType() ?? TechType.None;\n\n\t// get the item's metadata and child entities\n\tvar metadata = entityMetadataManager.Extract(gameObject);\n\tvar childEntities = GetPrefabChildren(gameObject, itemId, entityMetadataManager).ToList();\n\n\t// get the item's battery data if applicable\n\tBatteryChildEntityHelper.TryPopulateInstalledBattery(childEntities, out var batteryData);\n\n\t// construct an InventoryItemEntity\n\tvar inventoryItemEntity = new InventoryItemEntity(playerID, itemId, classID, techType, metadata, childEntities, batteryData);\n\n\treturn inventoryItemEntity;\n}", "CodeBleu_score": 39.99882740991203}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t\tif (gameObject == null) {\n\t\treturn null;\n\t}\n\n\tvar prefabIdentifier = gameObject.GetComponent<PrefabIdentifier>();\n\tif (prefabIdentifier == null) {\n\t\treturn null;\n\t}\n\n\tvar itemId = prefabIdentifier.Id;\n\tvar metadata = entityMetadataManager.Extract(itemId);\n\tif (metadata == null) {\n\t\treturn null;\n\t}\n\n\tvar childEntities = GetPrefabChildren(gameObject, itemId, entityMetadataManager).ToList();\n\tvar techType = metadata.OrNull(EntityMetadataType.TechType);\n\tif (techType == null) {\n\t\treturn null;\n\t}\n\n\tvar nitroxId = Player.main.TryGetNitroxId(techType);\n\tif (nitroxId == null) {\n\t\treturn null;\n\t}\n\n\tvar inventoryItemEntity = new InventoryItemEntity {\n\t\tId = nitroxId.Value,\n\t\tClassId = itemId,\n\t\tTechType = techType.Value,\n\t\tMetadata = metadata,\n\t\tChildEntities = childEntities\n\t};\n\n\tBatteryChildEntityHelper.TryPopulateInstalledBattery(inventoryItemEntity, childEntities);\n\n\treturn inventoryItemEntity;\n}", "CodeBleu_score": 40.451295918133276}]}
{"instance_id": "e416d51a7af7", "generation_result": [{"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t\tthis.multiplayerSession = multiplayerSession;\n\tthis.packetSender = packetSender;\n\tthis.throttledPacketSender = throttledPacketSender;\n\tthis.body = null;\n\tthis.playerModel = null;\n\tthis.bodyProto = null;\n\tthis.permissions = new PlayerPermissions(true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true", "CodeBleu_score": 24.943236456168307}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t\tthis.multiplayerSession = multiplayerSession;\n\tthis.packetSender = packetSender;\n\tthis.throttledPacketSender = throttledPacketSender;\n\tthis.body = new Lazy<PlayerBody>(() => new PlayerBody(this.multiplayerSession, this.packetSender));\n\tthis.playerModel = new Lazy<PlayerModel>(() => new PlayerModel(this.multiplayerSession, this.packetSender));\n\tthis.bodyPrototype = new Lazy<PlayerBodyPrototype>(() => new PlayerBodyPrototype(this.multiplayerSession, this.packetSender));\n\tthis.permissions = new PlayerPermissions();\n}", "CodeBleu_score": 48.536802008269476}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t\tthis.multiplayerSession = multiplayerSession;\n\tthis.packetSender = packetSender;\n\tthis.throttledPacketSender = throttledPacketSender;\n\tthis.body = new GameObject();\n\tthis.body.name = \"Player\";\n\tthis.body.layer = LayerMask.NameToLayer(\"LocalPlayer\");\n\tthis.body.transform.parent = multiplayerSession.WorldRootTransform;\n\tthis.body.transform.position = Vector3.zero;\n\tthis.body.transform.rotation = Quaternion.identity;\n\tthis.body.AddComponent<Rigidbody>();\n\tthis.body.AddComponent<Player>();\n\tthis.body.AddComponent<PlayerInput>();\n\tthis.body.AddComponent<PlayerPermissions>();\n\tthis.body.AddComponent<PlayerMovement>();\n\tthis.body.AddComponent<PlayerCollision>();\n\tthis.body.AddComponent<PlayerCamera>();\n\tthis.body.AddComponent<PlayerAnimation>();\n\tthis.body.AddComponent<PlayerAudio>();\n\tthis.body.AddComponent<PlayerHealth>();\n\tthis.body.AddComponent<PlayerDeath>();\n\tthis.body.AddComponent<PlayerInventory>();\n\tthis.body.AddComponent<PlayerEquipment>();\n\tthis.body.AddComponent<PlayerStatusEffects>();\n\tthis.body.AddComponent<PlayerInputHandler>();\n\tthis.body.AddComponent<PlayerInputHandler_Client>();\n\tthis.body.AddComponent<PlayerInputHandler_Server>();\n\tthis.body.AddComponent<PlayerInputHandler_ClientToServer>();\n\tthis.body.AddComponent<PlayerInputHandler_ServerToClient>();\n\tthis.body.AddComponent<PlayerInputHandler_Shared>();\n\tthis.body.AddComponent<PlayerInputHandler_ClientToServer_Shared>();\n\tthis.body.AddComponent<PlayerInputHandler_ServerToClient_Shared>();\n\tthis.body.AddComponent<PlayerInputHandler_ClientToServer_Inventory>();\n\tthis.body.AddComponent<PlayerInputHandler_ServerToClient_Inventory>();\n\tthis.body.AddComponent<PlayerInputHandler_ClientToServer_Equipment>();\n\tthis.body.AddComponent<PlayerInputHandler_ServerToClient_Equipment>();\n\tthis.body.AddComponent<PlayerInputHandler_ClientToServer_StatusEffects>();\n", "CodeBleu_score": 37.22671904158456}]}
{"instance_id": "def56af985df", "generation_result": [{"code": "private GameObject CreateBodyPrototype{\n\t\tget {\n\t\tif (player.head != null) {\n\t\t\tplayer.head.shadowCastingMode = ShadowCastingMode.On;\n\t\t}\n\t\tGameObject clone = Object.Instantiate(bodyPrefab);\n\t\tclone.name = \"RemotePlayerPrototype\";\n\t\tclone.SetActive(false);\n\t\treturn clone;\n\t}\n}", "CodeBleu_score": 17.587960463416795}, {"code": "private GameObject CreateBodyPrototype{\n\t\tget {\n\t\tif (player.head != null) {\n\t\t\tplayer.head.shadowCastingMode = ShadowCastingMode.On;\n\t\t}\n\t\tvar clone = Object.Instantiate(player.body);\n\t\tclone.SetActive(false);\n\t\tclone.name = \"RemotePlayerPrototype\";\n\t\tforeach (var item in player.inventory.items) {\n\t\t\titem.RemoveFromInventory();\n\t\t}\n\t\treturn clone;\n\t}\n}", "CodeBleu_score": 27.878746647129965}, {"code": "private GameObject CreateBodyPrototype{\n\t\tget {\n\t\tif (this.bodyPrototype == null) {\n\t\t\tif (this.head != null) {\n\t\t\t\tthis.head.shadowCastingMode = ShadowCastingMode.On;\n\t\t\t}\n\t\t\tthis.bodyPrototype = Object.Instantiate(this.body);\n\t\t\tthis.bodyPrototype.SetActive(false);\n\t\t\tthis.bodyPrototype.name = \"RemotePlayerPrototype\";\n\t\t}\n\t\treturn this.bodyPrototype;\n\t}\n}", "CodeBleu_score": 19.010600487280428}]}
{"instance_id": "e9bd7f669aed", "generation_result": [{"code": "void ICacheable.Save(BinaryWriter bw){\n\tbw.Write(GetType().FullName);\nbw.Write(Location);\nbw.Write(Metadata);\nbw.Write(Processes.ToList());\nbw.Write(Dependencies.ToList());\nbw.Write(Incompatibilities.ToList());\n((ICacheable) bepInIncompatibility).Save(bw);\nTargettedBepInExVersion.ToString(bw);\n((ICacheable) bepInDependency).Save(bw);\n}", "CodeBleu_score": 29.064315694186977}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\tbw.Write(GetType().FullName);\nbw.Write(Location);\nbw.Write(Metadata.ToString());\nbw.Write(Processes.ToList());\nbw.Write(Dependencies.ToList());\nbw.Write(Incompatibilities.ToList());\nbw.Write(TargettedBepInExVersion.ToString());\n((ICacheable) bepInIncompatibility).Save(bw);\n((ICacheable) bepInDependency).Save(bw);\n}", "CodeBleu_score": 31.08833354093317}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\tbw.Write(GetType().FullName);\nbw.Write(Location);\nbw.Write(Metadata);\nbw.Write(Processes.ToList());\nbw.Write(Dependencies.ToList());\nbw.Write(Incompatibilities.ToList());\n((ICacheable) bepInIncompatibility).Save(bw);\nTargettedBepInExVersion.ToString(bw);\n((ICacheable) bepInDependency).Save(bw);\n}", "CodeBleu_score": 29.064315694186977}]}
{"instance_id": "a7e51620987d", "generation_result": [{"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t\tType pluginType = pluginAssembly.GetType(pluginInfo.PluginType);\n\tBasePlugin pluginInstance = (BasePlugin)Activator.CreateInstance(pluginType);\n\tpluginInstance.Load();\n\tpluginInstance.PluginInfo = pluginInfo;\n\tPluginLoad?.Invoke(pluginInstance);\n\tpluginInstance.Load();\n\treturn pluginInstance;\n}", "CodeBleu_score": 60.05933684190876}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t\tvar pluginType = pluginAssembly.GetType(pluginInfo.Type);\n\tvar pluginInstance = Activator.CreateInstance(pluginType);\n\tvar pluginLoad = pluginInstance.GetType().GetEvent(\"PluginLoad\");\n\tpluginLoad.AddEventHandler(pluginInstance, new EventHandler(delegate {\n\t\tpluginInstance.Load();\n\t}));\n\tpluginInstance.Load();\n\treturn pluginInstance;\n}", "CodeBleu_score": 59.20935613932144}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t\t// Get the plugin type from the assembly\n\tType pluginType = pluginAssembly.GetType(pluginInfo.Type);\n\t// Create an instance of the plugin\n\tBasePlugin pluginInstance = (BasePlugin)Activator.CreateInstance(pluginType);\n\t// Invoke the plugin load event\n\tPluginLoad?.Invoke(pluginInstance);\n\t// Load the plugin\n\tpluginInstance.Load();\n\t// Return the plugin instance\n\treturn pluginInstance;\n}", "CodeBleu_score": 56.702675769167776}]}
{"instance_id": "0925dc086c01", "generation_result": [{"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t\tif (TrampolineMethod == null) {\n\t\tPrepare();\n\t\tif (signature == null) {\n\t\t\tTrampolineMethod = NativeDetourHelper.GenerateNativeProxy(TrampolinePtr);\n\t\t} else {\n\t\t\tTrampolineMethod = NativeDetourHelper.GenerateNativeProxy(TrampolinePtr, signature);\n\t\t}\n\t}\n\treturn TrampolineMethod;\n}", "CodeBleu_score": 64.58186840089859}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\tif (TrampolineMethod == null) {\nPrepare();\n}\nif (signature == null) {\nreturn TrampolineMethod;\n}\nreturn TrampolineHelper.GenerateTrampoline(signature, TrampolinePtr);\n}", "CodeBleu_score": 46.48651124714176}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t\tif (TrampolineMethod == null) {\n\t\tPrepare();\n\t}\n\tif (signature == null) {\n\t\treturn TrampolineMethod;\n\t}\n\treturn TrampolineMethod.MakeGenericMethod(signature.GetParameters().Select(x => x.ParameterType).ToArray());\n}", "CodeBleu_score": 38.317693294477266}]}
{"instance_id": "cfab5c23610e", "generation_result": [{"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t\t// Get the stream from the resources.\n\tStream stream = GetLanguageFileStream(code);\n\n\t// Deserialize the stream into a dictionary.\n\treturn JsonSerializer.Deserialize<Dictionary<string, string>>(stream);\n}", "CodeBleu_score": 6.818091321066511}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t\tif (code == null) throw new ArgumentNullException(nameof(code));\n\tif (code.Length != 2) throw new ArgumentException(\"Language code must be exactly 2 characters long.\", nameof(code));\n\ttry {\n\t\tusing (Stream stream = GetLanguageStream(code)) {\n\t\t\treturn JsonSerializer.Deserialize<Dictionary<string, string>>(stream);\n\t\t}\n\t} catch (NullReferenceException) {\n\t\tthrow new LanguageNotFoundException(code);\n\t} catch (JsonException) {\n\t\tthrow new LanguageLoadException(code);\n\t}\n}", "CodeBleu_score": 41.8792396908842}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t\tAssembly assembly = typeof(LocalizationLoader).Assembly;\n\tStream stream = assembly.GetManifestResourceStream(string.Format(\"Assets.Resources.Languages.{0}.json\", code));\n\tif (stream == null) {\n\t\tthrow new NullReferenceException(string.Format(\"Language file for code {0} not found.\", code));\n\t}\n\tstring json = \"\";\n\tusing (StreamReader reader = new StreamReader(stream)) {\n\t\tjson = reader.ReadToEnd();\n\t}\n\ttry {\n\t\treturn JsonSerializer.Deserialize<Dictionary<string, string>>(json);\n\t}\n\tcatch (JsonException e) {\n\t\tthrow new JsonException(string.Format(\"Failed to deserialize language file for code {0}.\", code), e);\n\t}\n}", "CodeBleu_score": 44.39919739572389}]}
{"instance_id": "9978bd31d199", "generation_result": [{"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t\tint expressionCount = 0;\n\tforeach (var node in nodes) {\n\t\tif (node is ParserRuleContext) {\n\t\t\tthis.Visit(node);\n\t\t\texpressionCount++;\n\t\t}\n\t}\n\treturn expressionCount;\n}", "CodeBleu_score": 44.852181412482736}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t\tint expressionCount = 0;\n\tforeach (IParseTree node in nodes) {\n\t\tif (node is ParserRuleContext context) {\n\t\t\tVisit(context);\n\t\t\texpressionCount++;\n\t\t}\n\t}\n\treturn expressionCount;\n}", "CodeBleu_score": 36.903949495776935}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t\tint count = 0;\n\tfor (int i = 0; i < nodes.Count; i++) {\n\t\tif (nodes[i] is ParserRuleContext context) {\n\t\t\tthis.Visit(context);\n\t\t\tcount++;\n\t\t}\n\t}\n\n\treturn count;\n}", "CodeBleu_score": 24.575171525914406}]}
{"instance_id": "8f9bf9ee575a", "generation_result": [{"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t\tvar formattedText = this.Visit(context.text).ToString();\n\tvar lineID = this.compiler.GetLineIDTag(formattedText);\n\n\tif (string.IsNullOrEmpty(lineID)) {\n\t\tthrow new InvalidOperationException($\"Line {context.Start.Line}:{context.Start.Column} has no line ID tag.\");\n\t}\n\n\tvar expressions = this.GenerateCodeForExpressionsInFormattedText(formattedText);\n\tthis.compiler.Emit(Opcode.RunLine, lineID, expressions.Count);\n\n\treturn 0;\n}", "CodeBleu_score": 50.997062324146945}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t\tvar text = this.Visit(context.text);\n\n\tvar lineIDTag = this.compiler.GetLineIDTag(text);\n\n\tvar expressionCount = this.GenerateCodeForExpressionsInFormattedText(text);\n\n\tif (lineIDTag == null) {\n\t\tthrow new InvalidOperationException($\"Line statement has no line ID tag: {text}\");\n\t}\n\n\tthis.compiler.Emit(Opcode.RunLine);\n\tthis.compiler.EmitString(lineIDTag);\n\tthis.compiler.Emit(expressionCount);\n\n\treturn 0;\n}", "CodeBleu_score": 54.28696228944207}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t\tvar expressions = this.GenerateCodeForExpressionsInFormattedText(context.text);\n\n\tvar lineIDTag = this.compiler.GetLineIDTag(context);\n\tif (lineIDTag == null) {\n\t\tthrow new InvalidOperationException($\"Line statement must have a line ID tag. Line {context.Start.Line}:{context.Start.Column}\");\n\t}\n\n\tthis.compiler.Emit(Opcode.RunLine);\n\tthis.compiler.Emit(lineIDTag);\n\tthis.compiler.Emit(expressions.Count);\n\n\treturn 0;\n}", "CodeBleu_score": 54.52035382326075}]}
{"instance_id": "b70d033fed9c", "generation_result": [{"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t\tforeach (Command commandReference in yarnFile.AllCommandReferences) {\n\t\tif (commandReference.Name == null) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (commandReference.ParametersRange.Start.Delta == 0) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (commandReference.Name.Text == \"print\") {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (commandReference.Name.Text == \"stop\") {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (commandReference.Name.Text == \"end\") {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (commandReference.Name.Text == \"if\") {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (commandReference.Name.Text == \"elseif\") {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (commandReference.Name.Text == \"else\") {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (commandReference.Name.Text == \"endif\") {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (commandReference.Name.Text == \"set\") {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (commandReference.Name.Text == \"add\") {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (commandReference.Name.Text == \"remove\") {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (commandReference.Name.Text == \"wait\") {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (commandReference.Name.Text == \"jump\") {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (commandReference.Name.Text == \"call\") {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (commandReference.Name.Text == \"function\") {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (commandReference.Name.Text == \"return\") {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (commandReference.Name.Text == \"label\") {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (commandReference.Name.Text == \"go_to\") {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (commandReference.Name.Text == \"list\") {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (commandReference.Name.Text == \"show_list\") {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (commandReference.Name.Text == \"hide_list\") {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (commandReference.", "CodeBleu_score": 16.399765242224213}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t\tvar knownCommandNames = new HashSet<string>(yarnFile.GetKnownCommandNames());\n\tvar unknownCommands = new List<string>();\n\n\t// Get the names of all command references in the file\n\tforeach (var commandReference in yarnFile.GetCommandReferences()) {\n\t\tunknownCommands.Add(commandReference.Command);\n\t}\n\n\t// Remove known commands from the list of unknown commands\n\tforeach (var knownCommand in knownCommandNames) {\n\t\tunknownCommands.Remove(knownCommand);\n\t}\n\n\t// Create a Diagnostic object for each unknown command\n\tforeach (var unknownCommand in unknownCommands) {\n\t\tvar diagnostic = Diagnostic.Create(\n\t\t\tUnknownCommandRule,\n\t\t\tyarnFile.Node.GetLocation(),\n\t\t\tunknownCommand\n\t\t);\n\t\tyield return diagnostic;\n\t}\n}", "CodeBleu_score": 21.918004485165554}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t\tvar knownCommands = yarnFile.AllNodes.Select(kv => kv.Key).Concat(yarnFile.AllCommands).ToHashSet();\n\n\tforeach (var commandReference in yarnFile.AllCommandReferences) {\n\t\tif (!knownCommands.Contains(commandReference.Command)) {\n\t\t\tvar diagnostic = Diagnostic.Create(\n\t\t\t\tUnknownCommandRule,\n\t\t\t\tcommandReference.Node.NameToken.ToLocation(),\n\t\t\t\tcommandReference.Command,\n\t\t\t\tcommandReference.Node.NameToken.Line,\n\t\t\t\tcommandReference.Node.NameToken.Column,\n\t\t\t\tcommandReference.Node.NameToken.Line,\n\t\t\t\tcommandReference.Node.NameToken.Column + commandReference.Command.Length\n\t\t\t);\n\n\t\t\tyield return diagnostic;\n\t\t}\n\t}\n}", "CodeBleu_score": 24.475814421496935}]}
{"instance_id": "9a072876f358", "generation_result": [{"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t\tvar options = new CodeActionRegistrationOptions();\n\toptions.DocumentSelector = DocumentSelectorFactory.Create();\n\toptions.CodeActionKinds = new Container<CodeActionKind>(CodeActionKind.QuickFix);\n\toptions.ResolveProvider = false;\n\treturn options;\n}", "CodeBleu_score": 50.71673845991136}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t\tvar codeActionOptions = new CodeActionOptions {\n\t\tCodeActionKinds = new Container<CodeActionKind>(CodeActionKind.QuickFix)\n\t};\n\n\tvar resolveProvider = false;\n\tif (capability != null && capability.DynamicRegistration != null) {\n\t\tresolveProvider = capability.DynamicRegistration;\n\t}\n\n\tvar registrationOptions = new CodeActionRegistrationOptions {\n\t\tDocumentSelector = DocumentSelectorFactory.Create(),\n\t\tCodeActionOptions = codeActionOptions,\n\t\tResolveProvider = resolveProvider\n\t};\n\n\treturn registrationOptions;\n}", "CodeBleu_score": 41.289739806974794}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t\tvar options = new CodeActionRegistrationOptions {\n\t\tDocumentSelector = new DocumentSelector(new DocumentFilter() {\n\t\t\tLanguage = \"yarn\",\n\t\t\tScheme = \"file\"\n\t\t}),\n\t\tCodeActionKinds = new Container<CodeActionKind>(CodeActionKind.QuickFix)\n\t};\n\n\treturn options;\n}", "CodeBleu_score": 41.534708408565024}]}
{"instance_id": "7b61df32aee3", "generation_result": [{"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t\tif (this.variables.TryGetValue(variableName, out Variable foundValue)) {\n\t\tif (foundValue.GetType().IsAssignableFrom(typeof(T))) {\n\t\t\tresult = (T)foundValue.Value;\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\tthrow new ArgumentException(\"The type of the variable \" + variableName + \" is incompatible with the specified type.\");\n\t\t}\n\t}\n\telse {\n\t\tresult = default(T);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 50.011223957066655}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t\tif (this.variables.TryGetValue(variableName, out object value)) {\n\t\tif (value is T) {\n\t\t\tresult = (T)value;\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\tthrow new ArgumentException(\"Variable \" + variableName + \" is not of type \" + typeof(T).Name);\n\t\t}\n\t}\n\telse {\n\t\tresult = default(T);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 47.55409669636184}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t\tif (this.variables.TryGetValue(variableName, out var value)) {\n\t\tif (typeof(T).IsAssignableFrom(value.GetType())) {\n\t\t\tresult = (T)value;\n\t\t\treturn true;\n\t\t}\n\t\tthrow new ArgumentException(string.Format(\"The variable \\\"{0}\\\" is of type {1}, which is not compatible with the specified type {2}.\", variableName, value.GetType().Name, typeof(T).Name));\n\t}\n\tresult = default;\n\treturn false;\n}", "CodeBleu_score": 64.16676527936707}]}
{"instance_id": "7201488347ef", "generation_result": [{"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t\tthis.variableStorage = variableStorage;\n\tthis.library = new Library();\n\tthis.vm = new VirtualMachine(variableStorage);\n\tthis.importLibrary(new StandardLibrary());\n\tthis.RegisterFunction(\"visitCount\", this.GetNodeVisitCount);\n\tthis.RegisterFunction(\"visited\", this.IsNodeVisited);\n\tthis.lineParser = new LineParser();\n\tthis.lineParser.RegisterMarkerProcessor(\"select\", this.SelectMarkerProcessor);\n\tthis.lineParser.RegisterMarkerProcessor(\"plural\", this.PluralMarkerProcessor);\n\tthis.lineParser.RegisterMarkerProcessor(\"ordinal\", this.OrdinalMarkerProcessor);\n}", "CodeBleu_score": 32.887485129115916}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t\tthis.variableStorage = variableStorage;\n\tthis.library = new Library();\n\tthis.vm = new VirtualMachine(library);\n\tthis.library.ImportLibrary(new StandardLibrary());\n\tthis.nodeVisitCount = new Dictionary<string, int>();\n\tthis.lineParser = new LineParser();\n\tthis.lineParser.RegisterMarkerProcessor(\"select\", new SelectMarkerProcessor());\n\tthis.lineParser.RegisterMarkerProcessor(\"plural\", new PluralMarkerProcessor());\n\tthis.lineParser.RegisterMarkerProcessor(\"ordinal\", new OrdinalMarkerProcessor());\n}", "CodeBleu_score": 33.95728557700257}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t\tthis.variableStorage = variableStorage;\n\tthis.library = new Library();\n\tthis.vm = new VirtualMachine();\n\tthis.library.ImportLibrary(new StandardLibrary());\n\tthis.library.RegisterFunction(\"visit\", this.VisitNode);\n\tthis.library.RegisterFunction(\"visited\", this.IsNodeVisited);\n\tthis.library.RegisterFunction(\"lineCount\", this.GetLineCount);\n\tthis.library.RegisterFunction(\"nodeCount\", this.GetNodeCount);\n\tthis.library.RegisterFunction(\"nodeID\", this.GetNodeID);\n\tthis.library.RegisterFunction(\"nodeName\", this.GetNodeName);\n\tthis.library.RegisterFunction(\"nodeTags\", this.GetNodeTags);\n\tthis.library.RegisterFunction(\"nodePosition\", this.GetNodePosition);\n\tthis.library.RegisterFunction(\"getLine\", this.GetLine);\n\tthis.library.RegisterFunction(\"getNodeText\", this.GetNodeText);\n\tthis.library.RegisterFunction(\"getNodeOptions\", this.GetNodeOptions);\n\tthis.library.RegisterFunction(\"getNodeOptionChosen\", this.GetNodeOptionChosen);\n\tthis.library.RegisterFunction(\"getNodeIDForLine\", this.GetNodeIDForLine);\n\tthis.library.RegisterFunction(\"getNodeIDForLineID\", this.GetNodeIDForLineID);\n\tthis.library.RegisterFunction(\"getNodeNameForLineID\", this.GetNodeNameForLineID);\n\tthis.library.RegisterFunction(\"getNodeTagsForLineID\", this.GetNodeTagsForLineID);\n\tthis.library.RegisterFunction(\"getNodePositionForLineID\", this.GetNodePositionForLineID);\n\tthis.library.RegisterFunction(\"getNodeTextForLineID\", this.GetNodeTextForLineID);\n\tthis.library.RegisterFunction(\"getNodeOptionsForLineID\", this.GetNodeOptionsForLineID);\n\tthis.library.RegisterFunction(\"getNodeOptionChosenForLineID\", this.GetNodeOptionChosenForLineID);\n\tthis.library.RegisterFunction(\"getNodeIDForNodeIndex\", this.GetNodeIDForNodeIndex);\n\tthis.library.RegisterFunction(\"getNodeNameForNodeIndex\", this.GetNodeNameForNodeIndex);\n\tthis.library.RegisterFunction(\"getNodeTagsForNodeIndex\", this.GetNodeTagsFor", "CodeBleu_score": 18.725156883792422}]}
{"instance_id": "59b7b5a9c34a", "generation_result": [{"code": "public int FindUniqueID(string UniqueID){\n\t\tif (string.IsNullOrEmpty(UniqueID)) return -1;\n\tfor (int i = 0; i < LoopListBankData.Count; i++) {\n\t\tif (LoopListBankData[i].UniqueID == UniqueID) return i;\n\t}\n\treturn -1;\n}", "CodeBleu_score": 55.53069365932583}, {"code": "public int FindUniqueID(string UniqueID){\n\t\tif (string.IsNullOrEmpty(UniqueID)) {\n\t\treturn -1;\n\t}\n\tfor (int i = 0; i < this.Count; i++) {\n\t\tif (this[i].UniqueID == UniqueID) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}", "CodeBleu_score": 60.80241806661129}, {"code": "public int FindUniqueID(string UniqueID){\n\t\tif (string.IsNullOrEmpty(UniqueID)) {\n\t\treturn -1;\n\t}\n\tfor (int i = 0; i < _LoopListBankData.Count; i++) {\n\t\tif (_LoopListBankData[i].UniqueID == UniqueID) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}", "CodeBleu_score": 69.62460460484125}]}
{"instance_id": "2b85606238aa", "generation_result": [{"code": "public void AddContent(object newContent){\n\t\tLoopListBankData newLoopListBankData = new LoopListBankData();\n\tnewLoopListBankData.m_Content = newContent;\n\tnewLoopListBankData.m_ID = Guid.NewGuid().ToString();\n\tm_LoopListBankDataList.Add(newLoopListBankData);\n}", "CodeBleu_score": 47.49904726230294}, {"code": "public void AddContent(object newContent){\n\t\tLoopListBankData newLoopListBankData = new LoopListBankData();\n\tnewLoopListBankData.content = newContent;\n\tnewLoopListBankData.uniqueID = System.Guid.NewGuid();\n\tm_LoopListBankDataList.Add(newLoopListBankData);\n}", "CodeBleu_score": 46.941496532024075}, {"code": "public void AddContent(object newContent){\n\t\tLoopListBankData newLoopListBankData = new LoopListBankData();\n\tnewLoopListBankData.m_Content = newContent;\n\tnewLoopListBankData.m_ID = Guid.NewGuid();\n\tm_LoopListBankDataList.Add(newLoopListBankData);\n}", "CodeBleu_score": 41.47554032404061}]}
{"instance_id": "34e593106991", "generation_result": [{"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t\tm_IndexID = idx;\n\tm_Content = content;\n\tif (m_IsUpdateGameObjectName) {\n\t\tif (ClickUniqueID == \"\" && ClickObject == null) {\n\t\t\tgameObject.name = m_Content.ToString() + \" \" + m_IndexID.ToString();\n\t\t} else {\n\t\t\tgameObject.name = m_Content.ToString() + \" \" + m_IndexID.ToString() + \" \" + ClickUniqueID;\n\t\t}\n\t}\n}", "CodeBleu_score": 51.33196710466365}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t\tm_IndexID = idx;\n\tm_Content = content;\n\tif (m_IsUpdateGameObjectName) {\n\t\tif (ClickUniqueID == \"\") {\n\t\t\tClickUniqueID = m_Content.ToString();\n\t\t}\n\t\tif (ClickObject == null) {\n\t\t\tClickObject = this;\n\t\t}\n\t\tstring name = m_Content.ToString() + \" (\" + idx.ToString() + \")\";\n\t\tGameObject.name = name;\n\t\tm_Content.ToString();\n\t}\n}", "CodeBleu_score": 51.607397192006246}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t\tm_IndexID = idx;\n\tm_Content = content;\n\tif(m_IsUpdateGameObjectName) {\n\t\tif(ClickObject != null) {\n\t\t\tGameObject ClickGameObject = (GameObject)ClickObject;\n\t\t\tif(ClickGameObject != null) {\n\t\t\t\tif(ClickUniqueID != \"\") {\n\t\t\t\t\tClickGameObject.name = string.Format(\"{0}[{1}]\", ClickUniqueID, idx);\n\t\t\t\t} else {\n\t\t\t\t\tClickGameObject.name = string.Format(\"{0}[{1}]\", m_Content.ToString(), idx);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 51.64291546260542}]}
{"instance_id": "6b6a6cc329cc", "generation_result": [{"code": "private void OnButtonAddDataClickk(){\n\t\tint numToAdd = 0;\n\tif (int.TryParse(m_InputField.text, out numToAdd)) {\n\t\tnumToAdd = Mathf.Max(numToAdd, 1);\n\t\tfor (int i = 0; i < numToAdd; i++) {\n\t\t\tm_ListBank.AddContent(Random.Range(0, 10));\n\t\t}\n\t\tm_InitOnStart.m_LoopScrollRect.RefreshCells();\n\t\tm_InitOnStart.m_LoopListBank.GetListLength();\n\t}\n}", "CodeBleu_score": 46.2122200280824}, {"code": "private void OnButtonAddDataClickk(){\n\t\tint count = 0;\n\tint.TryParse(m_InputField.text, out count);\n\tif (count < 1) {\n\t\tcount = 1;\n\t}\n\tfor (int i = 0; i < count; i++) {\n\t\tm_ListBank.AddContent(Random.Range(0, 10));\n\t}\n\tm_LoopScrollRect.RefreshCells();\n\tm_LoopListBank.GetListLength();\n}", "CodeBleu_score": 33.37973306073243}, {"code": "private void OnButtonAddDataClickk(){\n\t\tint numToAdd = 1;\n\tint.TryParse(m_InputField.text, out numToAdd);\n\tnumToAdd = Mathf.Max(1, numToAdd);\n\tfor (int i = 0; i < numToAdd; i++) {\n\t\tm_ListBank.AddContent(Random.Range(0, 10));\n\t}\n\tm_LoopScrollRect.RefreshCells();\n}", "CodeBleu_score": 41.46226339252978}]}
{"instance_id": "209961c9eb8e", "generation_result": [{"code": "protected override void ClearTempPool(){\n\t\tif (m_Content.childCount != m_Content.tempCount) {\n\t\tDebug.Assert(false, \"Content has the wrong number of children: \" + m_Content.childCount + \" != \" + m_Content.tempCount);\n\t\treturn;\n\t}\n\n\tif (m_Content.startTempIndex != 0) {\n\t\tm_Content.ReturnChildren(m_Content.startTempIndex, m_Content.tempCount);\n\t\tm_Content.startTempIndex = 0;\n\t\tm_Content.tempCount = 0;\n\t}\n\n\tif (m_Content.endTempIndex != m_Content.childCount) {\n\t\tm_Content.ReturnChildren(m_Content.endTempIndex, m_Content.childCount - m_Content.endTempIndex);\n\t\tm_Content.endTempIndex = m_Content.childCount;\n\t}\n}", "CodeBleu_score": 24.760600088053707}, {"code": "protected override void ClearTempPool(){\n\t\tif (m_Content.GetChildCount() != m_TempPool.Count) {\n\t\tDebug.Assert(false, \"The content pool should have the same number of objects as the temp pool.\");\n\t\treturn;\n\t}\n\n\tif (m_StartDeleteIndex != -1) {\n\t\tfor (int i = m_StartDeleteIndex; i < m_Content.GetChildCount(); ++i) {\n\t\t\tm_Content.ReturnObject(m_Content.GetChild(i));\n\t\t}\n\t\tm_StartDeleteIndex = -1;\n\t}\n\n\tif (m_EndDeleteIndex != -1) {\n\t\tfor (int i = m_Content.GetChildCount() - 1; i >= m_EndDeleteIndex; --i) {\n\t\t\tm_Content.ReturnObject(m_Content.GetChild(i));\n\t\t}\n\t\tm_EndDeleteIndex = -1;\n\t}\n}", "CodeBleu_score": 42.888135327048815}, {"code": "protected override void ClearTempPool(){\n\t\tif (m_Content.m_ChildCount != m_Content.m_ChildCountStart) {\n\t\tm_Content.m_ChildCountStart = m_Content.m_ChildCount;\n\t\tif (m_Content.m_ChildCountStart > 0) {\n\t\t\tm_Content.ReturnChildrenToSource(m_Content.m_ChildCountStart, m_Content.m_ChildCount - m_Content.m_ChildCountStart);\n\t\t}\n\t}\n\tif (m_Content.m_ChildCount != m_Content.m_ChildCountEnd) {\n\t\tm_Content.m_ChildCountEnd = m_Content.m_ChildCount;\n\t\tif (m_Content.m_ChildCountEnd > 0) {\n\t\t\tm_Content.ReturnChildrenToSource(0, m_Content.m_ChildCountEnd);\n\t\t}\n\t}\n}", "CodeBleu_score": 26.25591417295213}]}
{"instance_id": "c6bb290de2b3", "generation_result": [{"code": "public void AnticipateScale(Vector3 newScale){\n\t\tif (NetworkServer.active) {\n\t\t// Update the local scale\n\t\ttransform.localScale = newScale;\n\n\t\t// If we are listening on the network, set the anticipated scale\n\t\tif (NetworkServer.active) {\n\t\t\t// Set the anticipated scale\n\t\t\tanticipatedScale = newScale;\n\n\t\t\t// If we are allowed to update the authoritative scale, do so\n\t\t\tif (NetworkServer.active) {\n\t\t\t\t// Set the authoritative scale\n\t\t\t\ttransform.localScale = newScale;\n\t\t\t}\n\n\t\t\t// Record the anticipated transform\n\t\t\tRecordAnticipatedTransform();\n\n\t\t\t// Update the anticipation counters and times\n\t\t\tUpdateAnticipationCounters();\n\t\t}\n\n\t\t// Reset the smooth transition duration and current smooth time\n\t\tsmoothTransitionDuration = 0.0f;\n\t\tcurrentSmoothTime = 0.0f;\n\t}\n}", "CodeBleu_score": 25.78986342920413}, {"code": "public void AnticipateScale(Vector3 newScale){\n\t\tif (!IsListening) {\n\t\treturn;\n\t}\n\n\tif (!IsServer) {\n\t\treturn;\n\t}\n\n\tif (IsServer) {\n\t\tif (!IsAuthoritative) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif (IsServer) {\n\t\tif (IsAuthoritative) {\n\t\t\tif (newScale != null) {\n\t\t\t\tif (newScale.x != 0) {\n\t\t\t\t\tif (newScale.y != 0) {\n\t\t\t\t\t\tif (newScale.z != 0) {\n\t\t\t\t\t\t\ttransform.localScale = newScale;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif (IsServer) {\n\t\tif (IsAuthoritative) {\n\t\t\tif (newScale != null) {\n\t\t\t\tif (newScale.x != 0) {\n\t\t\t\t\tif (newScale.y != 0) {\n\t\t\t\t\t\tif (newScale.z != 0) {\n\t\t\t\t\t\t\tAnticipatedTransform.localScale = newScale;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif (IsServer) {\n\t\tif (IsAuthoritative) {\n\t\t\tif (newScale != null) {\n\t\t\t\tif (newScale.x != 0) {\n\t\t\t\t\tif (newScale.y != 0) {\n\t\t\t\t\t\tif (newScale.z != 0) {\n\t\t\t\t\t\t\tAnticipationCounter++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif (IsServer) {\n\t\tif (IsAuthoritative) {\n\t\t\tif (newScale != null) {\n\t\t\t\tif (newScale.x != 0) {\n\t\t\t\t\tif (newScale.y != 0) {\n\t\t\t\t\t\tif (newScale.z != 0) {\n\t\t\t\t\t\t\tAnticipationTime = Time.time;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif (IsServer) {\n\t\tif (IsAuthoritative) {\n\t\t\tif (newScale != null) {\n\t\t\t\tif (newScale.x != 0) {\n\t\t\t\t\tif (newScale.y != 0) {\n\t\t\t\t\t\tif (newScale.z != 0) {\n\t\t\t\t\t\t\tSmoothTransitionDuration = 0.0f;\n\t\t\t\t\t\t}", "CodeBleu_score": 25.597989950816302}, {"code": "public void AnticipateScale(Vector3 newScale){\n\t\tif (!networkManager.IsListening) {\n\t\treturn;\n\t}\n\n\tif (networkManager.IsServer) {\n\t\ttransform.localScale = newScale;\n\t\tif (networkManager.UpdateMethod == NetworkUpdateMethod.FixedUpdate) {\n\t\t\ttransform.localScale = newScale;\n\t\t} else {\n\t\t\ttransform.localScale = newScale;\n\t\t}\n\n\t\tif (networkManager.IsServer) {\n\t\t\tif (networkManager.IsAuthoritative) {\n\t\t\t\tnetworkManager.SendRPC(NetworkUpdateType.AnticipateScale, newScale);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (networkManager.IsClient) {\n\t\ttransform.localScale = newScale;\n\t\tif (networkManager.IsAuthoritative) {\n\t\t\tnetworkManager.SendRPC(NetworkUpdateType.AnticipateScale, newScale);\n\t\t}\n\t}\n\n\tanticipateTime = Time.time;\n\tanticipateCounter = 0;\n\tsmoothTime = 0;\n\tsmoothDuration = 0;\n}", "CodeBleu_score": 38.140339935607194}]}
{"instance_id": "d67d3c80dd00", "generation_result": [{"code": "private void FlushMessages(){\n\t\t// If we have any animation updates to send, send them.\n\tif (m_SendAnimationUpdates.Count > 0) {\n\t\tforeach (var update in m_SendAnimationUpdates) {\n\t\t\tm_NetworkAnimator.SendAnimStateClientRpc(update.Hash, update.NormalizedTime);\n\t\t}\n\t\tm_SendAnimationUpdates.Clear();\n\t}\n\n\t// If we have any parameter updates to send, send them.\n\tif (m_SendParameterUpdates.Count > 0) {\n\t\tforeach (var update in m_SendParameterUpdates) {\n\t\t\tm_NetworkAnimator.SendParametersUpdateClientRpc(update.Hash, update.NormalizedTime);\n\t\t}\n\t\tm_SendParameterUpdates.Clear();\n\t}\n\n\t// If we have any trigger updates to send, send them.\n\tif (m_SendTriggerUpdates.Count > 0) {\n\t\tforeach (var update in m_SendTriggerUpdates) {\n\t\t\tm_NetworkAnimator.SendAnimTriggerClientRpc(update.Hash, update.NormalizedTime);\n\t\t}\n\t\tm_SendTriggerUpdates.Clear();\n\t}\n}", "CodeBleu_score": 57.758830660277894}, {"code": "private void FlushMessages(){\n\t\tif (m_SendAnimationUpdates.Count == 0 && m_SendParameterUpdates.Count == 0 && m_SendTriggerUpdates.Count == 0) {\n\t\treturn;\n\t}\n\n\tm_NetworkAnimator.SendAnimStateClientRpc(m_SendAnimationUpdates);\n\tm_NetworkAnimator.SendParametersUpdateClientRpc(m_SendParameterUpdates);\n\tm_NetworkAnimator.SendAnimTriggerClientRpc(m_SendTriggerUpdates);\n\n\tm_SendAnimationUpdates.Clear();\n\tm_SendParameterUpdates.Clear();\n\tm_SendTriggerUpdates.Clear();\n}", "CodeBleu_score": 30.651402518230885}, {"code": "private void FlushMessages(){\n\t\tif (m_SendAnimationUpdates.Count == 0 && m_SendParameterUpdates.Count == 0 && m_SendTriggerUpdates.Count == 0) {\n\t\treturn;\n\t}\n\n\tforeach (var animationUpdate in m_SendAnimationUpdates) {\n\t\tm_NetworkAnimator.SendAnimStateClientRpc(animationUpdate.AnimationHash, animationUpdate.NormalizedTime);\n\t}\n\tm_SendAnimationUpdates.Clear();\n\n\tforeach (var parameterUpdate in m_SendParameterUpdates) {\n\t\tm_NetworkAnimator.SendParametersUpdateClientRpc(parameterUpdate.ParameterHash, parameterUpdate.NormalizedTime);\n\t}\n\tm_SendParameterUpdates.Clear();\n\n\tforeach (var triggerUpdate in m_SendTriggerUpdates) {\n\t\tm_NetworkAnimator.SendAnimTriggerServerRpc(triggerUpdate.AnimationHash);\n\t}\n\tm_SendTriggerUpdates.Clear();\n}", "CodeBleu_score": 65.29521465979089}]}
{"instance_id": "0632b2f27d22", "generation_result": [{"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t.method}", "CodeBleu_score": 1.2343712784312384}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t.method}", "CodeBleu_score": 1.2343712784312384}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t.method}", "CodeBleu_score": 1.2343712784312384}]}
{"instance_id": "d78874b65b32", "generation_result": [{"code": "private void UpdateOwnershipAuthority(){\n\t\tif (isServer) {\n\t\tif (isOwned) {\n\t\t\tif (ownershipAuthority == OwnershipAuthority.Server) {\n\t\t\t\trigidbody.isKinematic = true;\n\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.None;\n\t\t\t}\n\t\t\telse if (ownershipAuthority == OwnershipAuthority.Client) {\n\t\t\t\trigidbody.isKinematic = false;\n\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (ownershipAuthority == OwnershipAuthority.Server) {\n\t\t\t\trigidbody.isKinematic = false;\n\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n\t\t\t}\n\t\t\telse if (ownershipAuthority == OwnershipAuthority.Client) {\n\t\t\t\trigidbody.isKinematic = true;\n\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.None;\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 20.61029005776589}, {"code": "private void UpdateOwnershipAuthority(){\n\t\t// If the object is not owned by a server, set the Rigidbody's kinematic property to true and the interpolation property to Interpolate.\n\tif (ownershipAuthority == OwnershipAuthority.Server) {\n\t\trigidbody.isKinematic = true;\n\t\trigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n\t}\n\t// If the object is owned by a server, set the Rigidbody's kinematic property to false and the interpolation property to None.\n\telse if (ownershipAuthority == OwnershipAuthority.Client) {\n\t\trigidbody.isKinematic = false;\n\t\trigidbody.interpolation = RigidbodyInterpolation.None;\n\t}\n}", "CodeBleu_score": 26.19881749965087}, {"code": "private void UpdateOwnershipAuthority(){\n\t\tif (IsServer) {\n\t\tif (isServerAuthoritative) {\n\t\t\tif (isOwned) {\n\t\t\t\tif (rigidbody.isKinematic) {\n\t\t\t\t\trigidbody.isKinematic = false;\n\t\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (!rigidbody.isKinematic) {\n\t\t\t\t\trigidbody.isKinematic = true;\n\t\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.None;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (isOwned) {\n\t\t\t\tif (rigidbody.isKinematic) {\n\t\t\t\t\trigidbody.isKinematic = false;\n\t\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (!rigidbody.isKinematic) {\n\t\t\t\t\trigidbody.isKinematic = true;\n\t\t\t\t\trigidbody.interpolation = RigidbodyInterpolation.None;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 19.865892641240883}]}
{"instance_id": "304fe1278db9", "generation_result": [{"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t\tint highestBit = (int)(compressed >> 30);\n\tif (highestBit == 0) {\n\t\tfloat x = (float)(compressed & 0x3fffffff) / (float)(1 << 30);\n\t\tfloat y = (float)(compressed & 0x3fffffff) / (float)(1 << 30);\n\t\tfloat z = (float)(compressed & 0x3fffffff) / (float)(1 << 30);\n\t\tfloat w = (float)(compressed & 0x3fffffff) / (float)(1 << 30);\n\t\tquaternion = new Quaternion(x, y, z, w);\n\t} else if (highestBit == 1) {\n\t\tfloat x = (float)(compressed & 0x3fffffff) / (float)(1 << 30);\n\t\tfloat y = (float)(compressed & 0x3fffffff) / (float)(1 << 30);\n\t\tfloat z = (float)(compressed & 0x3fffffff) / (float)(1 << 30);\n\t\tfloat w = (float)(compressed & 0x3fffffff) / (float)(1 << 30);\n\t\tquaternion = new Quaternion(x, y, z, w);\n\t\tquaternion = Quaternion.Normalize(quaternion);\n\t} else if (highestBit == 2) {\n\t\tfloat x = (float)(compressed & 0x3fffffff) / (float)(1 << 30);\n\t\tfloat y = (float)(compressed & 0x3fffffff) / (float)(1 << 30);\n\t\tfloat z = (float)(compressed & 0x3fffffff) / (float)(1 << 30);\n\t\tfloat w = (float)(compressed & 0x3fffffff) / (float)(1 << 30);\n\t\tquaternion = new Quaternion(x, y, z, w);\n\t\tquaternion = Quaternion.Inverse(quaternion);\n\t} else {\n\t\tfloat x = (float)(compressed & 0x3fffffff) / (float)(1 << 30);\n\t\tfloat y = (float)(compressed & 0x3fffffff) / (float)(1 << 30);\n\t\tfloat z = (float)(compressed & 0x3fffffff) / (float)(", "CodeBleu_score": 19.880622525792862}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t\tfloat x = (compressed >> 0) & 0x3FF;\n\tfloat y = (compressed >> 10) & 0x3FF;\n\tfloat z = (compressed >> 20) & 0x3FF;\n\tfloat w = (compressed >> 30) & 0x03;\n\n\tfloat sqrmag = 1.0f - (x * x + y * y + z * z) / 1024.0f;\n\tif (sqrmag < 0.0f) sqrmag = 0.0f;\n\tfloat mag = (float)Mathf.Sqrt(sqrmag);\n\tif (w & 0x01 != 0) mag = -mag;\n\n\tquaternion.x = x * mag;\n\tquaternion.y = y * mag;\n\tquaternion.z = z * mag;\n\tquaternion.w = w * 3.0f;\n}", "CodeBleu_score": 20.256827258516903}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t\tfloat sqrMag = 0.0f;\n\tfloat x = 0.0f;\n\tfloat y = 0.0f;\n\tfloat z = 0.0f;\n\tfloat w = 0.0f;\n\n\t// Get the first 2 bits of the compressed value.\n\tint firstTwoBits = (int)(compressed >> 30);\n\n\t// Check the first 2 bits.\n\tif (firstTwoBits == 0) {\n\t\t// The first 2 bits are 00.\n\t\t// The x, y, and z components are compressed.\n\t\tx = DecompressFloat(compressed);\n\t\ty = DecompressFloat(compressed >> 16);\n\t\tz = DecompressFloat(compressed >> 32);\n\n\t\t// Calculate the sum of squared magnitudes.\n\t\tsqrMag = x * x + y * y + z * z;\n\n\t\t// Reconstruct w.\n\t\tw = Mathf.Sqrt(Mathf.Max(0.0f, 1.0f - sqrMag));\n\t} else if (firstTwoBits == 1) {\n\t\t// The first 2 bits are 01.\n\t\t// The x, z, and w components are compressed.\n\t\tx = DecompressFloat(compressed);\n\t\tz = DecompressFloat(compressed >> 16);\n\t\tw = DecompressFloat(compressed >> 32);\n\n\t\t// Calculate the sum of squared magnitudes.\n\t\tsqrMag = x * x + z * z + w * w;\n\n\t\t// Reconstruct y.\n\t\ty = Mathf.Sqrt(Mathf.Max(0.0f, 1.0f - sqrMag));\n\t} else if (firstTwoBits == 2) {\n\t\t// The first 2 bits are 10.\n\t\t// The y, z, and w components are compressed.\n\t\ty = DecompressFloat(compressed);\n\t\tz = DecompressFloat(compressed >> 16);\n\t\tw = DecompressFloat(compressed >> 32);\n\n\t\t// Calculate the sum of squared magnitudes.\n\t\tsqrMag = y * y + z * z + w * w;\n\n\t\t// Reconstruct x.\n\t\tx = Mathf.Sqrt(Mathf.Max(0.0f, ", "CodeBleu_score": 26.200506610638975}]}
{"instance_id": "452b860a7dde", "generation_result": [{"code": "static void GenerateCLRBindingByAnalysis(){\n\t\t// Create a new AppDomain, and use it\n\tAppDomain domain = AppDomain.CreateDomain(\"AnalysisDomain\");\n\tusing (domain) {\n\t\t// Load an assembly into the domain\n\t\tAssembly assembly = Assembly.LoadFile(AssemblyDefinitionFilePath);\n\n\t\t// Initialize the ILRuntime environment\n\t\tInit(domain);\n\n\t\t// Generate binding code\n\t\tGenerateBindingCode(domain, assembly, \"Assets/Dependencies/ILRuntime/Generated\");\n\n\t\t// Refresh the asset database to make the new generated binding code available\n\t\tAssetDatabase.Refresh();\n\t}\n}", "CodeBleu_score": 24.242577865712494}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\t#if DEBUG\n    Debug.Log(\"GenerateCLRBindingByAnalysis start...\");\n#endif\n    try {\n        AppDomain domain = AppDomain.CreateDomain(\"Temp\");\n        using (FileStream fs = new FileStream(AssemblyDefinitionFilePath, FileMode.Open, FileAccess.Read)) {\n            Assembly assembly = domain.Load(fs.GetBuffer());\n            ILRuntime.Runtime.Enviorment.AppDomain appdomain = new ILRuntime.Runtime.Enviorment.AppDomain(domain);\n            ILRuntime.Runtime.CLRBinding.BindingCodeGenerator.GenerateBindingCode(appdomain, \"Assets/Dependencies/ILRuntime/Generated\");\n            AssetDatabase.Refresh();\n#if DEBUG\n            Debug.Log(\"GenerateCLRBindingByAnalysis success!\");\n#endif\n        }\n    } catch (Exception e) {\n#if DEBUG\n        Debug.LogError(\"GenerateCLRBindingByAnalysis error: \" + e.Message);\n#endif\n    }\n}", "CodeBleu_score": 33.12461292322756}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\t#if DEBUG\n    Debug.Log(\"GenerateCLRBindingByAnalysis: Generating CLR binding code by analysis...\");\n#endif\n    // Create a new AppDomain\n    AppDomain domain = AppDomain.CreateDomain(\"Temp\");\n\n    // Load an assembly into the domain\n    Assembly assembly = domain.Load(AssemblyName.GetAssemblyName(AssemblyDefinitionFilePath));\n\n    // Initialize the ILRuntime\n    ILRuntime.Runtime.Enviorment.AppDomain appdomain = new ILRuntime.Runtime.Enviorment.AppDomain();\n    appdomain.LoadAssembly(assembly);\n\n    // Generate CLR binding code\n    ILRuntime.Runtime.CLRBinding.BindingCodeGenerator.GenerateBindingCode(appdomain, CodeOutputPath, \"Assets/Dependencies/ILRuntime/Generated\");\n\n    // Refresh the asset database\n    AssetDatabase.Refresh();\n}", "CodeBleu_score": 24.465617755387477}]}
{"instance_id": "b8990031b636", "generation_result": [{"code": "public override void OnInspectorGUI(){\n\t\tserializedObject.Update();\n\tEditorGUI.BeginDisabledGroup(Application.isPlaying && IsPrefabInHierarchy());\n\tm_ConfigHelperInfo.Draw();\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_Config\"));\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_ConfigType\"));\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_ConfigHelper\"));\n\tEditorGUI.EndDisabledGroup();\n\tserializedObject.ApplyModifiedProperties();\n\tRepaint();\n}", "CodeBleu_score": 39.31441155675884}, {"code": "public override void OnInspectorGUI(){\n\t\tserializedObject.Update();\n\tEditorGUI.BeginDisabledGroup(Application.isPlaying && IsPrefabInHierarchy());\n\tEditorGUILayout.LabelField(\"Config Count\", t.Count.ToString());\n\tEditorGUILayout.LabelField(\"Cached Bytes Size\", t.CachedBytesSize.ToString());\n\tEditorGUI.EndDisabledGroup();\n\tm_ConfigHelperInfo.Draw();\n\tserializedObject.ApplyModifiedProperties();\n\tRepaint();\n}", "CodeBleu_score": 43.739109120558815}, {"code": "public override void OnInspectorGUI(){\n\t\tserializedObject.Update();\n\tEditorGUILayout.PropertyField(m_ConfigHelperInfo);\n\tEditorGUI.BeginDisabledGroup(Application.isPlaying && IsPrefabInHierarchy());\n\tEditorGUILayout.LabelField(\"Cached Bytes Size: \" + m_ConfigHelperInfo.CachedBytesSize.ToString());\n\tEditorGUILayout.LabelField(\"Config Count: \" + m_ConfigHelperInfo.Count.ToString());\n\tEditorGUI.EndDisabledGroup();\n\tserializedObject.ApplyModifiedProperties();\n\tRepaint();\n}", "CodeBleu_score": 41.4544042102161}]}
{"instance_id": "6453adc2daa8", "generation_result": [{"code": "public static void DefaultScenes(){\n\t\tHashSet<string> sceneNames = new HashSet<string> {\n\t\t\"Assets/Scenes/MainMenu.unity\",\n\t\t\"Assets/Scenes/MainGame.unity\",\n\t\t\"Assets/Scenes/Credits.unity\",\n\t\t\"Assets/Scenes/EndGame.unity\"\n\t};\n\n\tList<EditorBuildSettingsScene> scenes = new List<EditorBuildSettingsScene>();\n\tforeach (string sceneName in sceneNames) {\n\t\tscenes.Add(new EditorBuildSettingsScene(sceneName, true));\n\t}\n\n\tEditorBuildSettings.scenes = scenes.ToArray();\n\tDebug.Log(\"Default scenes have been set.\");\n}", "CodeBleu_score": 60.766613092517}, {"code": "public static void DefaultScenes(){\n\t\tHashSet<string> sceneNames = new HashSet<string>();\n\tsceneNames.Add(\"Assets/Scenes/SampleScene.unity\");\n\tList<EditorBuildSettingsScene> scenes = new List<EditorBuildSettingsScene>(sceneNames.Count);\n\tforeach (string sceneName in sceneNames) {\n\t\tscenes.Add(new EditorBuildSettingsScene(sceneName, true));\n\t}\n\tEditorBuildSettings.scenes = scenes.ToArray();\n\tDebug.Log(\"Scenes have been set to default.\");\n}", "CodeBleu_score": 62.96850755488573}, {"code": "public static void DefaultScenes(){\n\t\t// Create a HashSet of default scene names\n\tHashSet<string> defaultScenes = new HashSet<string>();\n\tdefaultScenes.Add(\"Assets/Scenes/MainMenu.unity\");\n\tdefaultScenes.Add(\"Assets/Scenes/MainGame.unity\");\n\tdefaultScenes.Add(\"Assets/Scenes/GameOver.unity\");\n\n\t// Convert the HashSet to a list of EditorBuildSettingsScene objects\n\tList<EditorBuildSettingsScene> scenesList = new List<EditorBuildSettingsScene>();\n\tforeach (string scene in defaultScenes) {\n\t\tscenesList.Add(new EditorBuildSettingsScene(scene, true));\n\t}\n\n\t// Update the EditorBuildSettings with the new list of scenes\n\tEditorBuildSettings.scenes = scenesList.ToArray();\n\n\t// Log the scenes that were set to the default\n\tstring sceneNames = \"\";\n\tforeach (EditorBuildSettingsScene scene in EditorBuildSettings.scenes) {\n\t\tsceneNames += scene.path + \"\n\";\n\t}\n\tDebug.Log(\"The following scenes have been set to the default:\n\" + sceneNames);\n}", "CodeBleu_score": 60.7600237416168}]}
{"instance_id": "e199f1a42526", "generation_result": [{"code": "public void Draw(){\n\t\tif (this.helperType == null) {\n\t\tthis.helperType = this.helperTypes[this.selectedIndex];\n\t}\n\tthis.selectedIndex = EditorGUI.Popup(this.position, this.selectedIndex, this.helperTypes);\n\tif (this.selectedIndex == 0) {\n\t\tthis.helperType = EditorGUI.ObjectField(this.position, this.helperType, typeof(MonoBehaviour), true) as MonoBehaviour;\n\t\tif (this.helperType == null) {\n\t\t\tEditorGUI.LabelField(this.position, \"Helper type not set\");\n\t\t}\n\t}\n\telse {\n\t\tthis.helperType = this.helperTypes[this.selectedIndex];\n\t}\n}", "CodeBleu_score": 28.245011945961117}, {"code": "public void Draw(){\n\t\tif (helperType == null) {\n\t\tEditorGUILayout.Popup(selectedHelperIndex, helperTypes, \"Select Helper Type\");\n\t\tif (selectedHelperIndex == -1) {\n\t\t\tEditorGUILayout.HelpBox(\"No helper type selected. Please select a helper type or enter a custom helper type below.\", MessageType.Error);\n\t\t}\n\t}\n\telse {\n\t\tEditorGUILayout.LabelField(helperType.Name);\n\t}\n}", "CodeBleu_score": 20.539284863474556}, {"code": "public void Draw(){\n\t\tvar helperType = (HelperType)EditorGUILayout.Popup(\n\t\t\"Helper Type\",\n\t\t(int)selectedHelperType,\n\t\thelperTypeNames\n\t);\n\tif (helperType != selectedHelperType) {\n\t\tselectedHelperType = helperType;\n\t\tif (selectedHelperType == HelperType.Custom) {\n\t\t\tcustomHelper = null;\n\t\t}\n\t}\n\n\tif (selectedHelperType == HelperType.None) {\n\t\tEditorGUILayout.HelpBox(\n\t\t\t\"No helper type selected.\",\n\t\t\tMessageType.Error\n\t\t);\n\t} else if (selectedHelperType == HelperType.Custom) {\n\t\tEditorGUILayout.PropertyField(\n\t\t\tserializedObject.FindProperty(\"customHelper\"),\n\t\t\tnew GUIContent(\"Custom Helper\")\n\t\t);\n\t\tif (customHelper == null) {\n\t\t\tEditorGUILayout.HelpBox(\n\t\t\t\t\"No custom helper set.\",\n\t\t\t\tMessageType.Error\n\t\t\t);\n\t\t}\n\t} else {\n\t\tvar helper = (Helper)serializedObject.FindProperty(\n\t\t\thelperTypeNames[selectedHelperType]\n\t\t).objectReferenceValue;\n\t\tif (helper == null) {\n\t\t\tEditorGUILayout.HelpBox(\n\t\t\t\t\"No helper set.\",\n\t\t\t\tMessageType.Error\n\t\t\t);\n\t\t} else {\n\t\t\thelper.Draw();\n\t\t}\n\t}\n}", "CodeBleu_score": 31.159149926206386}]}
{"instance_id": "957e0aaa6f72", "generation_result": [{"code": "public static void DisableAllLogs(){\n\t\t//Remove the general logging symbol\n\tRemoveScriptingDefineSymbol(k_LoggingSymbol);\n\n\t//Remove symbols for specific logs\n\tforeach(string log in k_LogSymbols.Keys) {\n\t\tRemoveScriptingDefineSymbol(k_LogSymbols[log]);\n\t}\n\n\t//Remove symbols for logs above a certain level\n\tforeach(string log in k_LogLevelSymbols.Keys) {\n\t\tRemoveScriptingDefineSymbol(k_LogLevelSymbols[log]);\n\t}\n}", "CodeBleu_score": 41.656026921037494}, {"code": "public static void DisableAllLogs(){\n\t\tif (Application.isEditor) {\n\t\t// Remove the general logging symbol\n\t\tRemoveScriptingDefineSymbol(kLogAll);\n\t\t\n\t\t// Remove symbols for specific logs\n\t\tRemoveScriptingDefineSymbol(kLogAssert);\n\t\tRemoveScriptingDefineSymbol(kLogError);\n\t\tRemoveScriptingDefineSymbol(kLogWarning);\n\t\tRemoveScriptingDefineSymbol(kLogInfo);\n\t\tRemoveScriptingDefineSymbol(kLogVerbose);\n\t\tRemoveScriptingDefineSymbol(kLogDebug);\n\t\tRemoveScriptingDefineSymbol(kLogNet);\n\t\tRemoveScriptingDefineSymbol(kLogNetVerbose);\n\t\t\n\t\t// Remove symbols for specific logs above a certain level\n\t\tRemoveScriptingDefineSymbol(kLogAssertAbove);\n\t\tRemoveScriptingDefineSymbol(kLogErrorAbove);\n\t\tRemoveScriptingDefineSymbol(kLogWarningAbove);\n\t\tRemoveScriptingDefineSymbol(kLogInfoAbove);\n\t\tRemoveScriptingDefineSymbol(kLogVerboseAbove);\n\t\tRemoveScriptingDefineSymbol(kLogDebugAbove);\n\t\tRemoveScriptingDefineSymbol(kLogNetAbove);\n\t\tRemoveScriptingDefineSymbol(kLogNetVerboseAbove);\n\t}\n}", "CodeBleu_score": 29.556989447257436}, {"code": "public static void DisableAllLogs(){\n\t\tforeach (string symbol in _allLogSymbols) {\n\t\tRemoveScriptingDefineSymbol(symbol);\n\t}\n}", "CodeBleu_score": 14.851727664088838}]}
{"instance_id": "8a544c3d9513", "generation_result": [{"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t\tif (type == null) {\n\t\tthrow new System.ArgumentNullException(\"type\");\n\t}\n\n\tGameFrameworkComponent current = m_Components;\n\twhile (current != null) {\n\t\tif (current.GetType() == type) {\n\t\t\treturn current;\n\t\t}\n\t\tcurrent = current.m_Next;\n\t}\n\n\treturn null;\n}", "CodeBleu_score": 54.463491947786316}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t\treturn GetComponent(type, true);\n}", "CodeBleu_score": 6.966962410728058}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t\treturn GetComponent(type, true);\n}", "CodeBleu_score": 6.966962410728058}]}
{"instance_id": "ec304512c0e4", "generation_result": [{"code": "public static void Shutdown(ShutdownType shutdownType){\n\t\tLog.Info(LogTag, \"Shutting down game framework with type {0}\", shutdownType);\n\tif (baseComponent != null) {\n\t\tbaseComponent.Shutdown();\n\t}\n\tLog.Info(LogTag, \"Game framework shutdown complete\");\n\tswitch (shutdownType) {\n\t\tcase ShutdownType.Restart:\n\t\t\tSceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);\n\t\t\tbreak;\n\t\tcase ShutdownType.Quit:\n\t\t\tApplication.Quit();\n\t\t\tbreak;\n\t\tcase ShutdownType.None:\n\t\t\tbreak;\n\t}\n\ts_GameFrameworkComponents.Clear();\n}", "CodeBleu_score": 35.72214123212238}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\t\tLog.Info(\"GameFramework.Shutdown() - shutdownType: \" + shutdownType);\n\tif (shutdownType == ShutdownType.RestartScene) {\n\t\tGetComponent<BaseComponent>().Shutdown();\n\t\tSceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);\n\t} else if (shutdownType == ShutdownType.QuitApplication) {\n\t\tGetComponent<BaseComponent>().Shutdown();\n\t\tApplication.Quit();\n\t}\n\ts_GameFrameworkComponents.Clear();\n}", "CodeBleu_score": 25.09609261992519}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\t\tLog.Info(\"Shutdown: \" + shutdownType);\n\tif (BaseComponent.Exists) {\n\t\tBaseComponent.Shutdown();\n\t}\n\tif (shutdownType == ShutdownType.RestartScene) {\n\t\tSceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);\n\t} else if (shutdownType == ShutdownType.QuitApplication) {\n\t\tApplication.Quit();\n\t}\n\ts_GameFrameworkComponents.Clear();\n}", "CodeBleu_score": 22.80349715328461}]}
{"instance_id": "5c78a1d4f59d", "generation_result": [{"code": "protected override void Awake(){\n\t\tbase.Awake();\n\tconfigManager = GameFrameworkEntry.GetModule<IConfigManager>();\n\tif (configManager == null) {\n\t\tLog.Fatal(\"ConfigManager is null. Is the ConfigManager prefab in the scene?\");\n\t}\n\tconfigManager.ReadDataSuccess += OnReadDataSuccess;\n\tconfigManager.ReadDataFailure += OnReadDataFailure;\n\tif (configManager.ReadDataOnStart) {\n\t\tconfigManager.ReadData();\n\t}\n\tif (configManager.SubscribeToUpdateEvent) {\n\t\tconfigManager.UpdateData += OnUpdateData;\n\t}\n\tif (configManager.SubscribeToDependencyAssetEvent) {\n\t\tconfigManager.DependencyAssetLoaded += OnDependencyAssetLoaded;\n\t}\n}", "CodeBleu_score": 47.55001612181916}, {"code": "protected override void Awake(){\n\t\tbase.Awake();\n\tm_ConfigManager = GameFrameworkEntry.GetModule<IConfigManager>();\n\tif (m_ConfigManager == null) {\n\t\tLog.Fatal(\"ConfigManager is not set in the GameFrameworkEntry module.\");\n\t}\n\tm_ConfigManager.ReadDataSuccess += OnReadDataSuccess;\n\tm_ConfigManager.ReadDataFailure += OnReadDataFailure;\n\tif (m_ReadDataDependencyAssetEvent != null) {\n\t\tm_ConfigManager.ReadDataDependencyAsset += m_ReadDataDependencyAssetEvent;\n\t}\n\tif (m_UpdateDataDependencyAssetEvent != null) {\n\t\tm_ConfigManager.UpdateDataDependencyAsset += m_UpdateDataDependencyAssetEvent;\n\t}\n\tif (m_ReadDataDependencyAssetFailureEvent != null) {\n\t\tm_ConfigManager.ReadDataDependencyAssetFailure += m_ReadDataDependencyAssetFailureEvent;\n\t}\n\tif (m_UpdateDataDependencyAssetFailureEvent != null) {\n\t\tm_ConfigManager.UpdateDataDependencyAssetFailure += m_UpdateDataDependencyAssetFailureEvent;\n\t}\n}", "CodeBleu_score": 69.64944418754976}, {"code": "protected override void Awake(){\n\t\tbase.Awake();\n\n\tif (GameFrameworkEntry.GetModule<IConfigManager>() == null) {\n\t\tLog.Fatal(\"ConfigManager is null. Please add a config manager to your game framework entry game object.\");\n\t}\n\n\tif (m_readDataSuccessEvent == null) {\n\t\tm_readDataSuccessEvent = new GameFramework.Events.UnityEvent();\n\t}\n\n\tif (m_readDataFailureEvent == null) {\n\t\tm_readDataFailureEvent = new GameFramework.Events.UnityEvent();\n\t}\n\n\tif (m_updateEvent == null) {\n\t\tm_updateEvent = new GameFramework.Events.UnityEvent();\n\t}\n\n\tif (m_dependencyAssetEvent == null) {\n\t\tm_dependencyAssetEvent = new GameFramework.Events.UnityEvent();\n\t}\n\n\tm_configManager = GameFrameworkEntry.GetModule<IConfigManager>();\n\n\tif (m_configManager == null) {\n\t\tLog.Fatal(\"ConfigManager is null. Please add a config manager to your game framework entry game object.\");\n\t}\n\n\tm_configManager.ReadDataSuccess += OnReadDataSuccess;\n\tm_configManager.ReadDataFailure += OnReadDataFailure;\n\n\tif (m_updateEvent.GetPersistentEventCount() > 0) {\n\t\tm_configManager.Update += OnUpdate;\n\t}\n\n\tif (m_dependencyAssetEvent.GetPersistentEventCount() > 0) {\n\t\tm_configManager.DependencyAsset += OnDependencyAsset;\n\t}\n}", "CodeBleu_score": 41.225694883464364}]}
{"instance_id": "fbb36ff9d552", "generation_result": [{"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t\tif (configAsset == null) {\n\t\tLog.Warning(\"Config asset is null.\", configAssetName);\n\t\treturn false;\n\t}\n\n\tif (!(configAsset is TextAsset)) {\n\t\tLog.Warning(\"Config asset is not a TextAsset.\", configAssetName);\n\t\treturn false;\n\t}\n\n\tTextAsset textAsset = (TextAsset)configAsset;\n\n\tif (textAsset.bytes != null && textAsset.bytes.Length > 0) {\n\t\tif (configAssetName.EndsWith(\".bytes\")) {\n\t\t\treturn configManager.ParseData(textAsset.bytes, configAssetName, userData);\n\t\t}\n\t\telse {\n\t\t\tLog.Warning(\"Config asset is a bytes asset, but does not end with a .bytes extension.\", configAssetName);\n\t\t\treturn false;\n\t\t}\n\t}\n\telse {\n\t\treturn configManager.ParseData(textAsset.text, configAssetName, userData);\n\t}\n}", "CodeBleu_score": 54.998880482029676}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t\tif (configAsset == null) {\n\t\tLog.Warning(\"No config asset found with name: \" + configAssetName + \".\");\n\t\treturn false;\n\t}\n\tif (!(configAsset is TextAsset)) {\n\t\tLog.Warning(\"Invalid config asset found with name: \" + configAssetName + \".\");\n\t\treturn false;\n\t}\n\tTextAsset textAsset = (TextAsset)configAsset;\n\tif (textAsset.bytes == null || textAsset.bytes.Length == 0) {\n\t\tLog.Warning(\"No data found in config asset with name: \" + configAssetName + \".\");\n\t\treturn false;\n\t}\n\tstring extension = configAssetName.EndsWith(\".bytes\") ? \".bytes\" : \".txt\";\n\tif (extension == \".bytes\") {\n\t\treturn configManager.ParseData(textAsset.bytes, userData);\n\t}\n\treturn configManager.ParseData(textAsset.text, userData);\n}", "CodeBleu_score": 52.11264162490987}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t\tif (configAsset == null) {\n\t\tLog.Warning(\"ReadData: Config asset is null. Cannot read data.\");\n\t\treturn false;\n\t}\n\n\tif (configAssetName.EndsWith(\".bytes\")) {\n\t\treturn configManager.ParseData(configAssetName, configAsset as byte[], userData);\n\t} else {\n\t\treturn configManager.ParseData(configAssetName, configAsset as TextAsset, userData);\n\t}\n}", "CodeBleu_score": 52.29463034954216}]}
{"instance_id": "84d744c480ca", "generation_result": [{"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t\ttry {\n\t\tusing (MemoryStream memoryStream = new MemoryStream(configBytes, startIndex, length, false)) {\n\t\t\tusing (BinaryReader binaryReader = new BinaryReader(memoryStream)) {\n\t\t\t\twhile (memoryStream.Position < memoryStream.Length) {\n\t\t\t\t\tstring configName = binaryReader.ReadString();\n\t\t\t\t\tstring configValue = binaryReader.ReadString();\n\t\t\t\t\tif (!configManager.AddConfig(configName, configValue)) {\n\t\t\t\t\t\tLog.Warning(\"Failed to add config {0} with value {1} to config manager\", configName, configValue);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tcatch (Exception e) {\n\t\tLog.Exception(e, \"Exception occurred while parsing config data\");\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 59.204813281733735}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t\ttry {\n\t\tusing (MemoryStream memoryStream = new MemoryStream(configBytes, startIndex, length)) {\n\t\t\tusing (BinaryReader binaryReader = new BinaryReader(memoryStream)) {\n\t\t\t\tint configCount = binaryReader.ReadInt32();\n\t\t\t\tfor (int i = 0; i < configCount; i++) {\n\t\t\t\t\tstring configName = binaryReader.ReadString();\n\t\t\t\t\tstring configValue = binaryReader.ReadString();\n\t\t\t\t\tconfigManager.AddConfig(configName, configValue);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (Exception ex) {\n\t\tLog.Warning(ex.Message);\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 41.48235342527726}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t\ttry {\n\t\tusing (MemoryStream stream = new MemoryStream(configBytes, startIndex, length)) {\n\t\t\tusing (BinaryReader reader = new BinaryReader(stream)) {\n\t\t\t\twhile (stream.Position < stream.Length) {\n\t\t\t\t\tstring name = reader.ReadString();\n\t\t\t\t\tstring value = reader.ReadString();\n\t\t\t\t\tif (!configManager.AddConfig(name, value)) {\n\t\t\t\t\t\tLog.Warning(\"ConfigManager\", \"ParseData\", \"Failed to add config entry with name: \" + name);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tcatch (Exception ex) {\n\t\tLog.Exception(ex, \"ConfigManager\", \"ParseData\");\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 48.776515970090664}]}
{"instance_id": "298bb6fa19a4", "generation_result": [{"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t\tif (m_ResourceComponent != null)\n\t\tm_ResourceComponent.UnloadAsset(configAsset);\n}", "CodeBleu_score": 50.151808084068314}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t\tif (m_ResourceComponent != null) {\n\t\tm_ResourceComponent.UnloadAsset(configAsset);\n\t}\n}", "CodeBleu_score": 57.592814518900326}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t\tvar config = (ConfigType)configAsset;\n\tvar configManagerType = configManager.GetType();\n\tvar configManagerComponent = configManager as ConfigManagerComponent<ConfigType>;\n\tif (configManagerComponent == null) {\n\t\tvar configManagerField = configManagerType.GetField(\"Instance\");\n\t\tif (configManagerField == null) {\n\t\t\tthrow new MissingMemberException(configManagerType.FullName, \"Instance\");\n\t\t}\n\t\tconfigManagerComponent = configManagerField.GetValue(configManager) as ConfigManagerComponent<ConfigType>;\n\t\tif (configManagerComponent == null) {\n\t\t\tthrow new MissingMemberException(configManagerType.FullName, \"Instance\");\n\t\t}\n\t}\n\tvar resourceComponent = configManagerComponent.ResourceComponent;\n\tif (resourceComponent == null) {\n\t\tthrow new MissingMemberException(configManagerType.FullName, \"ResourceComponent\");\n\t}\n\tresourceComponent.UnloadAsset(config);\n}", "CodeBleu_score": 47.10833102005361}]}
{"instance_id": "fa2003d95e36", "generation_result": [{"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t return new ActiveSceneChangedEventArgs(lastActiveScene, activeScene);\n}", "CodeBleu_score": 12.560816357020158}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t var instance = new ActiveSceneChangedEventArgs();\n instance.lastActiveScene = lastActiveScene;\n instance.activeScene = activeScene;\n return instance;\n}", "CodeBleu_score": 29.493739399945763}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t ActiveSceneChangedEventArgs e = ActiveSceneChangedEventArgs.pool.Get();\n e.lastActiveScene = lastActiveScene;\n e.activeScene = activeScene;\n return e;\n }", "CodeBleu_score": 34.0479473679177}]}
{"instance_id": "aba13f34251c", "generation_result": [{"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t\tif (string.IsNullOrEmpty(sceneAssetName)) {\n\t\tLog.Error(\"SceneManager.LoadScene: sceneAssetName cannot be null or empty\");\n\t\treturn;\n\t}\n\tif (!sceneAssetName.StartsWith(\"Assets/\") || !sceneAssetName.EndsWith(\".unity\")) {\n\t\tLog.Error(\"SceneManager.LoadScene: sceneAssetName must start with \\\"Assets/\\\" and end with \\\".unity\\\"\");\n\t\treturn;\n\t}\n\tm_SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 57.90123371833433}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t\tif (string.IsNullOrEmpty(sceneAssetName)) {\n\t\tLog.Error(\"SceneManager\", \"LoadScene\", \"The scene asset name is null or empty.\");\n\t\treturn;\n\t}\n\tif (!sceneAssetName.StartsWith(\"Assets/\") || !sceneAssetName.EndsWith(\".unity\")) {\n\t\tLog.Error(\"SceneManager\", \"LoadScene\", \"The scene asset name is invalid. It must start with 'Assets/' and end with '.unity'.\");\n\t\treturn;\n\t}\n\tm_SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 59.65229229408535}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t\tif (string.IsNullOrEmpty(sceneAssetName)) {\n\t\tLog.Error(\"SceneManager.LoadScene: Scene asset name is null or empty. Aborting load.\");\n\t\treturn;\n\t}\n\n\tif (!sceneAssetName.StartsWith(\"Assets/\") || !sceneAssetName.EndsWith(\".unity\")) {\n\t\tLog.Error(\"SceneManager.LoadScene: Scene asset name must start with \\\"Assets/\\\" and end with \\\".unity\\\". Aborting load.\");\n\t\treturn;\n\t}\n\n\tm_SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 60.059559833834264}]}
{"instance_id": "3fe99fba3ce8", "generation_result": [{"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\t// Register our feature\n\tIModularFeatures::Get().RegisterModularFeature(TEXT(\"BinariesPatch\"), this);\n\n\t// Get all feature implementations\n\tTArray<IModularFeature*> ModularFeatures = IModularFeatures::Get().GetModularFeatureImplementations<IBinariesPatchFeature>();\n\tfor (IModularFeature* ModularFeature : ModularFeatures) {\n\t\t// Append feature names to the enumerations\n\t\tFBinariesPatchFeatureModule::AppendEnumeraters<EBinariesPatchFeature>(ModularFeature->GetFeatureName());\n\t}\n\n\t// Set up callbacks for when modular features are registered or unregistered\n\tIModularFeatures::Get().OnModularFeatureRegistered().AddStatic(&FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n\tIModularFeatures::Get().OnModularFeatureUnregistered().AddStatic(&FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n}", "CodeBleu_score": 53.06286956250021}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\t// Retrieve all registered feature implementations\n\tTArray<IBinariesPatchFeature*> Features = IModularFeatures::Get().GetModularFeatureImplementations<IBinariesPatchFeature>();\n\tfor (IBinariesPatchFeature* Feature : Features) {\n\t\t// Append the feature's name to the binaries patch feature enumerations\n\t\tEBinariesPatchFeature::Append(Feature->GetFeatureName());\n\t}\n\t// Register callbacks for when modular features are registered or unregistered\n\tIModularFeatures::Get().OnModularFeatureRegistered().AddStatic(&FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n\tIModularFeatures::Get().OnModularFeatureUnregistered().AddStatic(&FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n}", "CodeBleu_score": 57.19795854186258}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\t// Retrieve all registered feature implementations\n\tTArray<IBinariesPatchFeature*> FeaturesToRegister;\n\tIModularFeatures::Get().GetModularFeatureImplementations<IBinariesPatchFeature>(FeaturesToRegister);\n\tfor (IBinariesPatchFeature* Feature : FeaturesToRegister) {\n\t\t// Append feature name to the binaries patch feature enumerations\n\t\tEBinariesPatchFeature::Append(Feature->GetFeatureName());\n\t\t// Set up callbacks for when modular features are registered or unregistered\n\t\tIModularFeatures::Get().OnModularFeatureRegistered().AddStatic(&FBinariesPatchFeatureModule::OnModularFeatureRegistered, Feature);\n\t\tIModularFeatures::Get().OnModularFeatureUnregistered().AddStatic(&FBinariesPatchFeatureModule::OnModularFeatureUnregistered, Feature);\n\t}\n}", "CodeBleu_score": 58.22775417876019}]}
{"instance_id": "c702cc0f74b5", "generation_result": [{"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTArray<FString> Result;\n\tFString ParamString = Commandline;\n\tFString TokenString = Token;\n\tFString ValueString;\n\tFString KeyString;\n\tFString Param;\n\tFString TokenValue;\n\tint32 Index;\n\tint32 StartIndex;\n\tint32 EndIndex;\n\tbool bFound = false;\n\t//Find the specified token\n\tif (ParamString.Find(TokenString, Index)) {\n\t\t//Token found, get the associated value\n\t\tStartIndex = Index + TokenString.Len() + 1;\n\t\tEndIndex = ParamString.Len();\n\t\tTokenValue = ParamString.Mid(StartIndex, EndIndex - StartIndex);\n\t\t//Split the value into an array\n\t\tTokenValue.ParseIntoArray(Result, TEXT(\",\"), true);\n\t\tbFound = true;\n\t}\n\treturn Result;\n}", "CodeBleu_score": 44.4658100737591}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTArray<FString> ReturnValue;\n\tFString CmdLine = Commandline;\n\tFString TokenValue = \"\";\n\tint32 TokenStart = CmdLine.Find(Token);\n\tif (TokenStart != -1) {\n\t\tint32 TokenEnd = CmdLine.Find(\" \", TokenStart);\n\t\tif (TokenEnd != -1) {\n\t\t\tTokenValue = CmdLine.Mid(TokenEnd + 1, CmdLine.Len() - TokenEnd - 1);\n\t\t\tCmdLine = CmdLine.Left(TokenStart);\n\t\t}\n\t\telse {\n\t\t\tTokenValue = \"\";\n\t\t\tCmdLine = CmdLine.Left(TokenStart);\n\t\t}\n\t}\n\tTArray<FString> TokenValueArray;\n\tTokenValue.ParseIntoArray(TokenValueArray, TEXT(\",\"), false);\n\tfor (auto Iter = TokenValueArray.CreateConstIterator(); Iter; ++Iter) {\n\t\tReturnValue.Add(*Iter);\n\t}\n\treturn ReturnValue;\n}", "CodeBleu_score": 45.68649305412}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTArray<FString> Result;\n\tFString TokenString = FString::Printf(TEXT(\"%s=\"), *Token);\n\tFString ParamString;\n\tif (Commandline.Split(TokenString, &ParamString, ESearchCase::IgnoreCase, ESearchDir::FromStart)) {\n\t\tParamString.Split(TEXT(\",\"), &Result, ESearchCase::IgnoreCase, ESearchDir::FromStart);\n\t}\n\treturn Result;\n}", "CodeBleu_score": 44.68356769663136}]}
{"instance_id": "6a6382275b1d", "generation_result": [{"code": "bool CommandletHelper::IsCookCommandlet(){\n\t\tbool bIsCookCommandlet = false;\n\tFString CommandletName = GetCommandletName();\n\tif (!CommandletName.IsEmpty() && CommandletName.Equals(TEXT(\"cook\"), ESearchCase::IgnoreCase)) {\n\t\tbIsCookCommandlet = true;\n\t}\n\treturn bIsCookCommandlet;\n}", "CodeBleu_score": 44.37273436122665}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\t\t// Check if a commandlet is running\n\tif (!IsRunningCommandlet()) {\n\t\treturn false;\n\t}\n\n\t// Get the name of the commandlet\n\tFString CommandletName;\n\tif (!FParse::Value(FCommandLine::Get(), TEXT(\"Commandlet=\"), CommandletName)) {\n\t\treturn false;\n\t}\n\n\t// Check if the commandlet is a cook commandlet\n\treturn CommandletName.Equals(TEXT(\"Cook\"), ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 31.236801857979792}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\t\t// Check if a commandlet is running.\n\tFString CommandletName;\n\tif (IsRunningCommandlet(CommandletName)) {\n\t\t// Check if the commandlet name is empty or \"cook\" (case-insensitive).\n\t\treturn !CommandletName.IsEmpty() && CommandletName.Equals(TEXT(\"cook\"), ESearchCase::IgnoreCase);\n\t}\n\treturn false;\n}", "CodeBleu_score": 26.413403463635632}]}
{"instance_id": "6888ed47b6be", "generation_result": [{"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t\tFString CommandletName = GetCommandletName();\n\tif (CommandletName.IsEmpty()) {\n\t\treturn;\n\t}\n\tUHotPatcherSettings* Settings = GetDefault<UHotPatcherSettings>();\n\tif (!Settings) {\n\t\treturn;\n\t}\n\tif (Settings->bEnableServerlessHotPatch) {\n\t\tFString ProjectName = GetProjectName();\n\t\tif (ProjectName.IsEmpty()) {\n\t\t\treturn;\n\t\t}\n\t\tFString CommandletProjectName = ProjectName + TEXT(\"_\") + CommandletName;\n\t\tFString ServerRequestInfo = GetServerRequestInfo();\n\t\tFString Counter = GetCounter();\n\t\tFString CounterName = GetCounterName();\n\t\tFString CounterDesc = GetCounterDesc();\n\t\tFString CounterValue = GetCounterValue();\n\t\tFString CounterValueDesc = GetCounterValueDesc();\n\t\tFString CounterValueName = GetCounterValueName();\n\t\tFString CounterValueDescName = GetCounterValueDescName();\n\t\tFString CounterValueDescValue = GetCounterValueDescValue();\n\t\tFString CounterValueDescValueName = GetCounterValueDescValueName();\n\t\tFString CounterValueDescValueDesc = GetCounterValueDescValueDesc();\n\t\tFString CounterValueDescValueDescName = GetCounterValueDescValueDescName();\n\t\tFString CounterValueDescValueDescValue = GetCounterValueDescValueDescValue();\n\t\tFString CounterValueDescValueDescValueName = GetCounterValueDescValueDescValueName();\n\t\tFString CounterValueDescValueDescValueDesc = GetCounterValueDescValueDescValueDesc();\n\t\tFString CounterValueDescValueDescValueDescName = GetCounterValueDescValueDescValueDescName();\n\t\tFString CounterValueDescValueDescValueDescValue = GetCounterValueDescValueDescValueDescValue();\n\t\tFString CounterValueDescValueDescValueDescValueName = GetCounterValueDescValueDescValueDescValueName();\n\t\tFString CounterValueDescValueDescValueDescValueDesc = GetCounterValueDescValueDescValueDescValueDesc();\n\t\tFString CounterValueDescValueDescValueDescValueDescName = GetCounterValueDescValueDescValueDescValueDescName();\n\t\tFString CounterValueDescValueDescValueDescValueDescValue = GetCounterValueDescValueDescValueDescValueDescValue();\n\t\tFString CounterValueDescValueDescValueDescValueDescValueName", "CodeBleu_score": 26.115758114059894}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t\tFString CommandletName;\n\tFParse::Value(*Params, TEXT(\"CommandletName=\"), CommandletName);\n\tif (CommandletName.IsEmpty())\n\t{\n\t\tUE_LOG(LogHotPatcher, Error, TEXT(\"CommandletName is empty\"));\n\t\treturn;\n\t}\n\tauto Settings = GetDefault<UHotPatcherSettings>();\n\tif (!Settings.IsValid())\n\t{\n\t\tUE_LOG(LogHotPatcher, Error, TEXT(\"UHotPatcherSettings is invalid\"));\n\t\treturn;\n\t}\n\tif (!Settings->bEnableServerlessHotPatch)\n\t{\n\t\tUE_LOG(LogHotPatcher, Log, TEXT(\"Serverless hotpatch is not enabled\"));\n\t\treturn;\n\t}\n\tauto Counter = GetDefault<UCountServerlessWrapper>();\n\tif (!Counter.IsValid())\n\t{\n\t\tUE_LOG(LogHotPatcher, Error, TEXT(\"UCountServerlessWrapper is invalid\"));\n\t\treturn;\n\t}\n\tCounter->Init(FString::Printf(TEXT(\"%s_%s\"), *CommandletName, *FApp::GetProjectName()));\n\tCounter->MakeServerRequestInfo();\n\tCounter->MakeCurrentProject();\n\tCounter->Processor();\n}", "CodeBleu_score": 47.95466371711342}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t\t// Extract the commandlet name from the command line.\n\tFString CommandletName;\n\tFParse::Value(Params, TEXT(\"Commandlet=\"), CommandletName);\n\tif (CommandletName.IsEmpty()) {\n\t\treturn;\n\t}\n\n\t// Check if serverless counting is enabled in the settings.\n\tUHotPatcherSettings* Settings = GetDefault<UHotPatcherSettings>();\n\tif (!Settings->bEnableServerlessCodeCounting) {\n\t\treturn;\n\t}\n\n\t// Initialize the counter with server request and project information, modifying the project name to include the commandlet name if applicable.\n\tFCountServerlessWrapper::MakeServerRequestInfo();\n\tFCountServerlessWrapper::MakeCurrentProject(CommandletName);\n\n\t// Process the counter.\n\tFCountServerlessWrapper::Process();\n}", "CodeBleu_score": 30.421392131450187}]}
{"instance_id": "c467af995f29", "generation_result": [{"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\tSCOPED_NAMED_EVENT_SCOPE(FHotCookerHelper, IsAppleMetalPlatform);\n\tconst FName PlatformName = TargetPlatform->PlatformName();\n\treturn PlatformName.StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase) || PlatformName.StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase) || PlatformName.StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 45.70643986921621}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\tFString PlatformName = TargetPlatform->PlatformName();\n\treturn PlatformName.StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase) || PlatformName.StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase) || PlatformName.StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 36.68564258733266}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\tSCOPED_NAMED_EVENT_SCOPE(FColor::Green, TEXT(\"IsAppleMetalPlatform\"));\n\treturn TargetPlatform->PlatformName().StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase) || TargetPlatform->PlatformName().StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase) || TargetPlatform->PlatformName().StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 40.73039099180098}]}
{"instance_id": "3df342b1c6f8", "generation_result": [{"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t\tconst UObject* ObjectOuter = Object->GetOuter();\n\tif (ObjectOuter) {\n\t\tconst UPackage* Package = ObjectOuter->GetOutermost();\n\t\tif (Package) {\n\t\t\tconst FName AssetPathName = Package->GetPathName();\n\t\t\tif (!CookerAssetsSet.Contains(AssetPathName)) {\n\t\t\t\tif (AllAssetsSet.Contains(AssetPathName)) {\n\t\t\t\t\tif (!IsAlwayPostLoadClasses(Object)) {\n\t\t\t\t\t\tPackageObjectsMap.FindOrAdd(AssetPathName).Add(Object, Index);\n\t\t\t\t\t\tFreezeObjects.Add(Object);\n\t\t\t\t\t\tObject->ClearFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 46.29345973123931}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t\tconst UObject* ObjectOuter = Object->GetOuter();\n\tconst UPackage* Package = ObjectOuter->GetOutermost();\n\tconst FName AssetPathName = Package->GetPathName();\n\tif (!CookerAssetsSet.Contains(AssetPathName) && AllAssetsSet.Contains(AssetPathName) && !IsAlwayPostLoadClasses(ObjectOuter->GetClass())) {\n\t\tPackageObjectsMap.FindOrAdd(AssetPathName).Add(Object);\n\t\tFreezeObjects.Add(Object);\n\t\tObjectOuter->ClearFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects);\n\t}\n}", "CodeBleu_score": 49.10435780928817}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t\tUObject* ObjectOuter = Object->GetOuter();\n\tif (ObjectOuter) {\n\t\t// If the object is not in a package, then it is not a UObject\n\t\tif (!ObjectOuter->IsA(UPackage::StaticClass())) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst UPackage* Package = CastChecked<UPackage>(ObjectOuter);\n\t\tconst FName AssetPathName = Package->GetPathName();\n\n\t\t// Check if the package is in the set of packages that need to be cooked\n\t\tif (CookerAssetsSet.Contains(AssetPathName)) {\n\t\t\t// If the package is in the set of all assets, then it is not a dependency\n\t\t\tif (AllAssetsSet.Contains(AssetPathName)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If the package is not always post-loaded, then it is a dependency\n\t\t\tif (!IsAlwayPostLoadClasses(Package)) {\n\t\t\t\tPackageObjectsMap.FindOrAdd(AssetPathName).Add(Object);\n\t\t\t\tFreezeObjects.Add(Object);\n\t\t\t\tObject->ClearFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 50.93240730983125}]}
{"instance_id": "fac8b2878c3c", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\tFScopeLock ScopeLock(&Context.CriticalSection);\n\tfor (auto& BulkRecord : Record.BulkData)\n\t{\n\t\tif (BulkRecord.Info.BulkDataFlags.bIsForExport)\n\t\t{\n\t\t\tif (Context.ExportsBuffers.IsValidIndex(BulkRecord.Info.MultiOutputIndex))\n\t\t\t{\n\t\t\t\tContext.ExportsBuffers[BulkRecord.Info.MultiOutputIndex].Add(BulkRecord.Data);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tContext.ExportsBuffers.Emplace(BulkRecord.Info.MultiOutputIndex, TArray<FBuffer>({BulkRecord.Data}));\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tFHotPatcherOutputChunk OutputChunk;\n\t\t\tOutputChunk.Data = BulkRecord.Data;\n\t\t\tOutputChunk.bIsForHash = BulkRecord.Info.BulkDataFlags.bIsForHash;\n\t\t\tOutputChunk.bIsForSidecar = BulkRecord.Info.BulkDataFlags.bIsForSidecar;\n\t\t\tOutputChunk.bIsForCompressed = BulkRecord.Info.BulkDataFlags.bIsForCompressed;\n\t\t\tOutputChunk.bIsForIdentical = BulkRecord.Info.BulkDataFlags.bIsForIdentical;\n\t\t\tOutputChunk.bIsForIdenticalByCRC = BulkRecord.Info.BulkDataFlags.bIsForIdenticalByCRC;\n\t\t\tOutputChunk.bIsForIdenticalBySize = BulkRecord.Info.BulkDataFlags.bIsForIdenticalBySize;\n\t\t\tOutputChunk.bIsForIdenticalByHash = BulkRecord.Info.BulkDataFlags.bIsForIdenticalByHash;\n\t\t\tOutputChunk.bIsForDiffByHash = BulkRecord.Info.BulkDataFlags.bIsForDiffByHash;\n\t\t\tOutputChunk.bIsForDiffBySize = BulkRecord.Info.BulkDataFlags.bIsForDiffBySize;\n\t\t\tOutputChunk.bIsForDiffByCRC = BulkRecord.Info.BulkDataFlags.bIsForDiffByCRC;\n\t\t\tOutputChunk.bIsForDiffByRules = BulkRecord.Info.BulkDataFlags.bIsForDiffByRules;\n\t\t\tOutputChunk.bIsForDiffByRulesAndHash = BulkRecord.Info.BulkDataFlags.bIsForDiffByRulesAndHash;\n\t\t\tOutputChunk.bIs", "CodeBleu_score": 37.63216249227821}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\tFScopeLog AutoLog(FString::Printf(TEXT(\"Collecting bulk data for record %s\"), *Record.Info.Name));\n\tfor (auto& BulkRecord : Record.BulkData)\n\t{\n\t\tif (BulkRecord.Info.Type == EBulkDataType::AppendToExports)\n\t\t{\n\t\t\tContext.ExportsBuffers[BulkRecord.Info.MultiOutputIndex].Add(BulkRecord.Data);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tFHotPatcherOutputChunk OutputChunk;\n\t\t\tOutputChunk.Filename = FPaths::Combine(Context.OutputDir, FPaths::GetBaseFilename(Record.Info.Name), *BulkRecord.Info.Filename);\n\t\t\tOutputChunk.Buffer = BulkRecord.Data;\n\t\t\tOutputChunk.Regions = BulkRecord.Info.Regions;\n\t\t\tOutputChunk.bIsForHash = BulkRecord.Info.bIsForHash;\n\t\t\tOutputChunk.bIsForSidecar = BulkRecord.Info.bIsForSidecar;\n\t\t\tOutputChunk.bIsForDiff = BulkRecord.Info.bIsForDiff;\n\t\t\tContext.OutputFiles.Emplace_GetRef(OutputChunk);\n\t\t}\n\t}\n}", "CodeBleu_score": 46.78727088132449}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\tfor (const auto& BulkRecord : Record.BulkDataRecords)\n\t{\n\t\tif (BulkRecord.Info.Type == EBulkDataStorageType::Append)\n\t\t{\n\t\t\tContext.ExportsBuffers[BulkRecord.Info.MultiOutputIndex].Add(BulkRecord.Data);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tFString OutputFileName = FPaths::GetCleanFilename(BulkRecord.Info.Filename);\n\t\t\tFString OutputFileExtension = FPaths::GetExtension(OutputFileName);\n\t\t\tif (OutputFileExtension.IsEmpty())\n\t\t\t{\n\t\t\t\tOutputFileExtension = TEXT(\"dat\");\n\t\t\t}\n\t\t\tFString OutputFileNameNoExtension = FPaths::GetBaseFilename(OutputFileName);\n\t\t\tFString OutputFileFullName = FPaths::Combine(Context.OutputDirectory, OutputFileName);\n\t\t\tFString OutputFileSidecarFullName = FPaths::ChangeExtension(OutputFileFullName, TEXT(\"txt\"));\n\t\t\tFString OutputFileHashFullName = FPaths::ChangeExtension(OutputFileFullName, TEXT(\"hash\"));\n\t\t\tFString OutputFileMetaFullName = FPaths::ChangeExtension(OutputFileFullName, TEXT(\"meta\"));\n\t\t\tFString OutputFileMetaSidecarFullName = FPaths::ChangeExtension(OutputFileMetaFullName, TEXT(\"txt\"));\n\t\t\tFString OutputFileMetaHashFullName = FPaths::ChangeExtension(OutputFileMetaFullName, TEXT(\"hash\"));\n\t\t\tFSHA1::HashBuffer(BulkRecord.Data.GetData(), BulkRecord.Data.Num());\n\t\t\tFSHA1 Hash;\n\t\t\tHash.Update(BulkRecord.Data.GetData(), BulkRecord.Data.Num());\n\t\t\tTArray<uint8> HashBuffer;\n\t\t\tHash.GetHash(HashBuffer);\n\t\t\tFFileHelper::SaveArrayToFile(BulkRecord.Data, *OutputFileFullName);\n\t\t\tFFileHelper::SaveArrayToFile(HashBuffer, *OutputFileHashFullName);\n\t\t\tFFileHelper::SaveStringToFile(TEXT(\"0\"), *OutputFileSidecarFullName);\n\t\t\tFFileHelper::SaveStringToFile(TEXT(\"0\"), *OutputFileMetaSidecarFullName);\n\t\t\tFFileHelper::SaveStringToFile(TEXT(\"0\"), *OutputFileMetaHashFullName);\n\t\t\tContext.OutputFiles.Emplace_GetRef(OutputFileFullName, BulkRecord.Data, EBulkDataStorageType::File, EBulkDataFlags::None, HashBuffer);\n\t\t}\n\t}\n}", "CodeBleu_score": 41.954809294595115}]}
{"instance_id": "bf46051105c9", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t\tif (Context.bHasDiff) {\n\t\treturn;\n\t}\n\tfor (const auto& Package : Context.Packages) {\n\t\tif (Package.Info.bIsCooked) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (!Package.Info.HasAnyExports()) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (Package.Info.bHasAnyDiff) {\n\t\t\tcontinue;\n\t\t}\n\t\tFSharedBuffer* Buffer = Context.ExportsBuffers[Package.Info.MultiOutputIndex].Add(FFileRegion(Package.Info.PackageFileTag, 0, sizeof(FHotPatcherPackageFileTag)));\n\t\tFHotPatcherPackageFileTag* Tag = (FHotPatcherPackageFileTag*)Buffer->GetData();\n\t\tTag->Magic = EPackageFileTag::PKG_FILE_TAG_MAGIC;\n\t\tTag->Version = EPackageFileTag::PKG_FILE_TAG_VERSION;\n\t\tTag->Type = EPackageFileTag::PKG_FILE_TAG_EXPORT;\n\t\tTag->Size = sizeof(FHotPatcherPackageFileTag);\n\t}\n}", "CodeBleu_score": 44.94517182276848}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t\tFSHAHash Hash;\n\tif (!Context.ExportsBuffers[Package.Info.MultiOutputIndex].GetHash(Hash)) {\n\t\treturn;\n\t}\n\t// if the diff is completed, no need to add a footer\n\tif (Hash == Package.Info.DiffHash) {\n\t\treturn;\n\t}\n\t// create a footer buffer with the package file tag\n\tTArray<uint8> FooterBuffer;\n\tFFileHelper::SerializeArray(FooterBuffer, Package.Info.FileTag);\n\t// add this buffer to each package's export buffers in the context\n\tfor (auto& ExportBuffer : Context.ExportsBuffers) {\n\t\tExportBuffer.Add(FooterBuffer);\n\t}\n}", "CodeBleu_score": 49.91923081385988}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t\tif (Context.bHasCompletedDiff) {\n\t\treturn;\n\t}\n\tFSHAHash Hash;\n\tFMemoryWriter Ar(Hash);\n\tAr.Serialize(FFileTag::PackageFileTag);\n\tContext.ExportsBuffers[Package.Info.MultiOutputIndex].Add(Hash, Ar);\n\tContext.bHasCompletedDiff = true;\n}", "CodeBleu_score": 36.51168801249647}]}
{"instance_id": "c0966eddf1ee", "generation_result": [{"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\tif (auto * CharacterMovement = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement())) {\n\t\tSavedMove.Sprinting = CharacterMovement->IsSprinting();\n\t\tSavedMove.ADS = CharacterMovement->IsADS();\n\t}\n}", "CodeBleu_score": 62.74650882805718}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\tUGDCharacterMovementComponent * GDCharacter = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\tif (GDCharacter) {\n\t\tMove.bIsSprinting = GDCharacter->bIsSprinting;\n\t\tMove.bIsAimingDownSights = GDCharacter->bIsAimingDownSights;\n\t}\n}", "CodeBleu_score": 67.35799612395556}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\tauto * CharacterMovement = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\tif (CharacterMovement) {\n\t\tbIsSprinting = CharacterMovement->bIsSprinting;\n\t\tbIsAimingDownSights = CharacterMovement->bIsAimingDownSights;\n\t}\n}", "CodeBleu_score": 75.72839052449713}]}
{"instance_id": "f73106356e9d", "generation_result": [{"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t\tif (!AbilitySystemComponent || !Attribute.IsValid()) {\n\t\treturn nullptr;\n\t}\n\n\tUAsyncTaskAttributeChanged* Task = NewObject<UAsyncTaskAttributeChanged>();\n\tTask->Attribute = Attribute;\n\tTask->AbilitySystemComponent = AbilitySystemComponent;\n\tTask->OnAttributeChangedDelegate = AbilitySystemComponent->GetGameplayAttributeValueChangeDelegate(Attribute);\n\tTask->OnAttributeChangedDelegate.AddUObject(Task, &UAsyncTaskAttributeChanged::OnAttributeChanged);\n\treturn Task;\n}", "CodeBleu_score": 59.66205821062158}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t\tif (!AbilitySystemComponent || !AbilitySystemComponent->IsValidLowLevel() || !Attribute.IsValid()) {\n\t\tABILITY_LOG(Error, TEXT(\"UAsyncTaskAttributeChanged::ListenForAttributeChange called with invalid arguments! AbilitySystemComponent: %s, Attribute: %s\"), *AbilitySystemComponent, *Attribute.GetCachedNameString());\n\t\treturn nullptr;\n\t}\n\n\tUAsyncTaskAttributeChanged* AttributeChangedTask = NewObject<UAsyncTaskAttributeChanged>();\n\tAttributeChangedTask->Attribute = Attribute;\n\tAttributeChangedTask->AbilitySystemComponent = AbilitySystemComponent;\n\tAttributeChangedTask->OnAttributeChangedDelegate = FOnGameplayAttributeValueChangeDelegate::CreateUObject(AttributeChangedTask, &UAsyncTaskAttributeChanged::OnAttributeChanged);\n\tAttributeChangedTask->OnAttributeChangedDelegateHandle = AbilitySystemComponent->GetGameplayAttributeValueChangeDelegate(Attribute).AddUObject(AttributeChangedTask, &UAsyncTaskAttributeChanged::OnAttributeChanged);\n\tAttributeChangedTask->AddToRoot();\n\n\treturn AttributeChangedTask;\n}", "CodeBleu_score": 59.39809114264243}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t\tif (!IsValid(AbilitySystemComponent) || !Attribute.IsValid()) {\n\t\treturn nullptr;\n\t}\n\t// Create the task\n\tUAsyncTaskAttributeChanged* Task = NewObject<UAsyncTaskAttributeChanged>();\n\tTask->Attribute = Attribute;\n\tTask->AbilitySystemComponent = AbilitySystemComponent;\n\t// Listen for attribute changes\n\tTask->AttributeChangedDelegate = AbilitySystemComponent->GetGameplayAttributeValueChangeDelegate(Attribute);\n\tTask->AttributeChangedDelegate.AddUObject(Task, &UAsyncTaskAttributeChanged::OnAttributeChanged);\n\t// Return the task\n\treturn Task;\n}", "CodeBleu_score": 63.15105642712114}]}
{"instance_id": "a581424c2b31", "generation_result": [{"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (ASC) {\n\t\tASC->OnActiveGameplayEffectAddedDelegateToSelf.RemoveAll();\n\t\tASC->RegisterGameplayTagEvent(CooldownTag, EGameplayTagEventType::NewOrRemoved).RemoveAll();\n\t}\n\tMarkAsGarbage();\n}", "CodeBleu_score": 28.853402099124033}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (ASC) {\n\t\tASC->OnActiveGameplayEffectAddedDelegateToSelf.RemoveAll();\n\t\tASC->RegisterGameplayTagEvent(CooldownTag, EGameplayTagEventType::NewOrRemoved).RemoveAll();\n\t\tMarkAsGarbage();\n\t}\n}", "CodeBleu_score": 28.957239043933015}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (ASC != nullptr) {\n\t\tASC->OnActiveGameplayEffectAddedDelegateToSelf.RemoveAll();\n\t\tASC->RegisterGameplayTagEvent(CooldownTag, EGameplayTagEventType::NewOrRemoved).RemoveAll();\n\t\tMarkAsGarbage();\n\t}\n}", "CodeBleu_score": 29.453674016776638}]}
{"instance_id": "5029df3a2033", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tif (EffectRemoved.Spec.Def == nullptr) {\n\t\treturn;\n\t}\n\n\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.Def->GetAllAssetTags(AssetTags);\n\tif (AssetTags.HasTagExact(EffectGameplayTag)) {\n\t\tUAbilitySystemGlobals::Get().GetGameplayEventDispatcher().DispatchEffectStackChange(EffectGameplayTag, EffectRemoved.Handle, EffectRemoved.GetStackCount(), 0);\n\t}\n\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\tif (GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\tUAbilitySystemGlobals::Get().GetGameplayEventDispatcher().DispatchEffectStackChange(EffectGameplayTag, EffectRemoved.Handle, EffectRemoved.GetStackCount(), 0);\n\t}\n}", "CodeBleu_score": 58.260850661649584}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tif (EffectRemoved.Spec.Def == nullptr) {\n\t\treturn;\n\t}\n\tconst FGameplayTagContainer & RemovedAssetTags = EffectRemoved.Spec.Def->AssetTags;\n\tconst FGameplayTagContainer & RemovedGrantedTags = EffectRemoved.Spec.Def->GrantedTags;\n\tif (RemovedAssetTags.HasTagExact(EffectGameplayTag)) {\n\t\tFGameplayEffectSpecHandle EffectHandle = EffectRemoved.Handle;\n\t\tFActiveGameplayEffectHandle ActiveHandle = EffectRemoved.Handle;\n\t\tFGameplayEffectStackChangeDetails StackChangeDetails;\n\t\tStackChangeDetails.StackCount = 0;\n\t\tStackChangeDetails.StackingType = EGameplayEffectStackingType::Add;\n\t\tStackChangeDetails.SourceEffect = EffectRemoved.Spec;\n\t\tStackChangeDetails.Magnitude = 0;\n\t\tStackChangeDetails.MagnitudeSource = EGameplayEffectMagnitudeSource::Other;\n\t\tStackChangeDetails.PreStackCount = 0;\n\t\tStackChangeDetails.bRemoved = true;\n\t\tStackChangeDetails.bInstant = true;\n\t\tStackChangeDetails.Instigator = EffectRemoved.GetInstigatorActor();\n\t\tStackChangeDetails.EffectCauser = EffectRemoved.GetEffectCauserActor();\n\t\tStackChangeDetails.SecondaryInstigator = EffectRemoved.GetSecondaryInstigatorActor();\n\t\tStackChangeDetails.EffectHandle = EffectHandle;\n\t\tStackChangeDetails.ActiveHandle = ActiveHandle;\n\t\tOnGameplayEffectStackChange.Broadcast(EffectGameplayTag, StackChangeDetails);\n\t}\n\tif (RemovedGrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\tFGameplayEffectSpecHandle EffectHandle = EffectRemoved.Handle;\n\t\tFActiveGameplayEffectHandle ActiveHandle = EffectRemoved.Handle;\n\t\tFGameplayEffectStackChangeDetails StackChangeDetails;\n\t\tStackChangeDetails.StackCount = 0;\n\t\tStackChangeDetails.StackingType = EGameplayEffectStackingType::Add;\n\t\tStackChangeDetails.SourceEffect = EffectRemoved.Spec;\n\t\tStackChangeDetails.Magnitude = 0;\n\t\tStackChangeDetails.MagnitudeSource = EGameplayEffectMagnitudeSource::Other;\n\t\tStackChangeDetails.PreStackCount = 0;\n\t\tStackChangeDetails.bRemoved = true;\n\t\tStackChangeDetails", "CodeBleu_score": 40.83995233168353}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tif (EffectRemoved.Spec.Def == nullptr) {\n\t\treturn;\n\t}\n\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n\tfor (FGameplayTag GrantedTag : GrantedTags) {\n\t\tif (GrantedTag == EffectGameplayTag) {\n\t\t\tFActiveGameplayEffectHandle ActiveHandle = EffectRemoved.Handle;\n\t\t\tFGameplayEffectContextHandle ContextHandle = EffectRemoved.GetEffectContext();\n\t\t\tFGameplayEffectSpecHandle SpecHandle = EffectRemoved.Spec.Handle;\n\t\t\tFGameplayEffectStackChangeInfo StackChangeInfo(0, EffectRemoved.GetMagnitude(), EffectRemoved.GetLevel());\n\t\t\tFGameplayEffectStackChangeInfo OldStackChangeInfo(0, EffectRemoved.GetMagnitude(), EffectRemoved.GetLevel());\n\t\t\tOnGameplayEffectStackChange.Broadcast(ActiveHandle, ContextHandle, SpecHandle, StackChangeInfo, OldStackChangeInfo);\n\t\t\treturn;\n\t\t}\n\t}\n\n\tfor (FGameplayTag AssetTag : AssetTags) {\n\t\tif (AssetTag == EffectGameplayTag) {\n\t\t\tFActiveGameplayEffectHandle ActiveHandle = EffectRemoved.Handle;\n\t\t\tFGameplayEffectContextHandle ContextHandle = EffectRemoved.GetEffectContext();\n\t\t\tFGameplayEffectSpecHandle SpecHandle = EffectRemoved.Spec.Handle;\n\t\t\tFGameplayEffectStackChangeInfo StackChangeInfo(0, EffectRemoved.GetMagnitude(), EffectRemoved.GetLevel());\n\t\t\tFGameplayEffectStackChangeInfo OldStackChangeInfo(0, EffectRemoved.GetMagnitude(), EffectRemoved.GetLevel());\n\t\t\tOnGameplayEffectStackChange.Broadcast(ActiveHandle, ContextHandle, SpecHandle, StackChangeInfo, OldStackChangeInfo);\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 47.58348454521366}]}
{"instance_id": "cb1d2823d203", "generation_result": [{"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t\tif (!AbilitySystemComponent || !AbilitySystemComponent->IsValidLowLevel()) {\n\t\tABILITY_LOG(Warning, TEXT(\"UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange called with invalid AbilitySystemComponent!\"));\n\t\treturn nullptr;\n\t}\n\tif (!InEffectGameplayTag.IsValid()) {\n\t\tABILITY_LOG(Warning, TEXT(\"UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange called with invalid InEffectGameplayTag!\"));\n\t\treturn nullptr;\n\t}\n\tUAsyncTaskEffectStackChanged * MyAsyncTaskEffectStackChanged = NewObject<UAsyncTaskEffectStackChanged>();\n\tMyAsyncTaskEffectStackChanged->AbilitySystemComponent = AbilitySystemComponent;\n\tMyAsyncTaskEffectStackChanged->EffectGameplayTag = InEffectGameplayTag;\n\tMyAsyncTaskEffectStackChanged->OnActiveGameplayEffectAddedDelegateToSelf = FActiveGameplayEffectAddedDelegate::CreateUObject(MyAsyncTaskEffectStackChanged, &UAsyncTaskEffectStackChanged::OnActiveGameplayEffectAdded);\n\tMyAsyncTaskEffectStackChanged->OnAnyGameplayEffectRemovedDelegate = FGameplayEffectRemovedDelegate::CreateUObject(MyAsyncTaskEffectStackChanged, &UAsyncTaskEffectStackChanged::OnAnyGameplayEffectRemoved);\n\tMyAsyncTaskEffectStackChanged->OnActiveGameplayEffectAddedDelegateToSelf.AddUObject(AbilitySystemComponent, &UAbilitySystemComponent::OnActiveGameplayEffectAddedDelegateToSelf);\n\tMyAsyncTaskEffectStackChanged->OnAnyGameplayEffectRemovedDelegate.AddUObject(AbilitySystemComponent, &UAbilitySystemComponent::OnAnyGameplayEffectRemovedDelegate);\n\treturn MyAsyncTaskEffectStackChanged;\n}", "CodeBleu_score": 51.68145473613388}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t\tUAsyncTaskEffectStackChanged * MyAsyncTask = NewObject<UAsyncTaskEffectStackChanged>();\n\tif (MyAsyncTask) {\n\t\tMyAsyncTask->AbilitySystemComponent = AbilitySystemComponent;\n\t\tMyAsyncTask->EffectGameplayTag = InEffectGameplayTag;\n\t\tif (MyAsyncTask->AbilitySystemComponent.IsValid() && MyAsyncTask->EffectGameplayTag.IsValid()) {\n\t\t\tMyAsyncTask->AbilitySystemComponent->OnActiveGameplayEffectAddedDelegateToSelf.AddUObject(MyAsyncTask, &UAsyncTaskEffectStackChanged::OnActiveGameplayEffectAdded);\n\t\t\tMyAsyncTask->AbilitySystemComponent->OnAnyGameplayEffectRemovedDelegate().AddUObject(MyAsyncTask, &UAsyncTaskEffectStackChanged::OnAnyGameplayEffectRemoved);\n\t\t\treturn MyAsyncTask;\n\t\t}\n\t}\n\tMyAsyncTask->EndTask();\n\treturn nullptr;\n}", "CodeBleu_score": 51.21733530004228}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t\tif (AbilitySystemComponent == nullptr || !InEffectGameplayTag.IsValid()) {\n\t\treturn nullptr;\n\t}\n\n\tUAsyncTaskEffectStackChanged * MyAsyncTask = NewObject<UAsyncTaskEffectStackChanged>();\n\tMyAsyncTask->AbilitySystemComponent = AbilitySystemComponent;\n\tMyAsyncTask->EffectGameplayTag = InEffectGameplayTag;\n\n\t// Register callbacks for when gameplay effects are added or removed\n\tMyAsyncTask->OnActiveGameplayEffectAddedDelegateToSelf = AbilitySystemComponent->OnActiveGameplayEffectAddedDelegateToSelf.AddUObject(MyAsyncTask, &UAsyncTaskEffectStackChanged::OnActiveGameplayEffectAdded);\n\tMyAsyncTask->OnAnyGameplayEffectRemovedDelegate = AbilitySystemComponent->OnAnyGameplayEffectRemovedDelegate.AddUObject(MyAsyncTask, &UAsyncTaskEffectStackChanged::OnAnyGameplayEffectRemoved);\n\n\treturn MyAsyncTask;\n}", "CodeBleu_score": 53.87575479849194}]}
{"instance_id": "6659c2592e93", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tif (EffectRemoved.Spec.Def != nullptr) {\n\t\tconst FGameplayTagContainer & GrantedTags = EffectRemoved.Spec.GetAllGrantedTags();\n\t\tconst FGameplayTagContainer & AssetTags = EffectRemoved.Spec.GetAllAssetTags();\n\t\tif (GrantedTags.HasTagExact(EffectGameplayTag) || AssetTags.HasTagExact(EffectGameplayTag)) {\n\t\t\tFGameplayEffectStackChangeDetails StackChangeDetails;\n\t\t\tStackChangeDetails.StackCountChange = -EffectRemoved.Spec.StackCount;\n\t\t\tStackChangeDetails.StackMagnitudeChange = -EffectRemoved.Spec.GetStackMagnitude();\n\t\t\tStackChangeDetails.StackCount = EffectRemoved.Spec.StackCount;\n\t\t\tStackChangeDetails.StackMagnitude = EffectRemoved.Spec.GetStackMagnitude();\n\t\t\tStackChangeDetails.EffectHandle = EffectRemoved.Handle;\n\t\t\tStackChangeDetails.Instigator = EffectRemoved.Spec.GetContext().GetInstigator();\n\t\t\tStackChangeDetails.EffectCauser = EffectRemoved.Spec.GetContext().GetEffectCauser();\n\t\t\tStackChangeDetails.Reason = EGameplayEffectStackingChange::Removed;\n\t\t\tStackChangeDetails.MagnitudeThreshold = EffectRemoved.Spec.MagnitudeThreshold;\n\t\t\tStackChangeDetails.Duration = EffectRemoved.Spec.Duration;\n\t\t\tStackChangeDetails.Period = EffectRemoved.Spec.Period;\n\t\t\tStackChangeDetails.ChanceToApplyToSelf = EffectRemoved.Spec.ChanceToApplyToSelf;\n\t\t\tStackChangeDetails.ChanceToApplyToTarget = EffectRemoved.Spec.ChanceToApplyToTarget;\n\t\t\tStackChangeDetails.ChanceToApplyToSource = EffectRemoved.Spec.ChanceToApplyToSource;\n\t\t\tStackChangeDetails.bApplyToTarget = EffectRemoved.Spec.bApplyToTarget;\n\t\t\tStackChangeDetails.bApplyToSource = EffectRemoved.Spec.bApplyToSource;\n\t\t\tStackChangeDetails.bApplyToSelf = EffectRemoved.Spec.bApplyToSelf;\n\t\t\tStackChangeDetails.bRemoveOnStackEmpty = EffectRemoved.Spec.bRemoveOnStackEmpty;\n\t\t\tStackChangeDetails.Magnitude = EffectRemoved.Spec.Magnitude;\n\t\t\tStackChangeDetails.SourceObject = EffectRemoved.Spec.SourceObject;\n\t\t\tStackChangeDetails.TargetObject = EffectRemoved.Spec.TargetObject;\n\t\t\tStackChangeDetails.SourceActor = Effect", "CodeBleu_score": 40.105237211921654}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\t// Get the asset tags from the effect\n\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n\t// Get the granted tags from the effect\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n\t// Check if either tag container has the specified tag\n\tif (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\t// Broadcast a stack change event\n\t\tFGameplayEffectContextHandle EffectContextHandle(EffectRemoved.Handle);\n\t\tFGameplayEffectSpecHandle SpecHandle(EffectRemoved.Spec.Handle);\n\t\tFActiveGameplayEffectHandle ActiveHandle(EffectRemoved.Handle);\n\t\tFGameplayEffectStackChangeDetails StackChangeDetails(EffectRemoved.GetStackCount() - 1, EffectRemoved.GetStackingType(), EffectRemoved.GetMagnitude(), EffectRemoved.GetPeriod());\n\t\tUAbilitySystemBlueprintLibrary::SendGameplayEffectStackChange(GetWorld(), EffectGameplayTag, EffectContextHandle, SpecHandle, ActiveHandle, StackChangeDetails);\n\t}\n}", "CodeBleu_score": 71.46508920101272}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n\tfor (const FGameplayTag & Tag : AssetTags) {\n\t\tif (Tag == EffectGameplayTag) {\n\t\t\tOnGameplayEffectStackChange.Broadcast(Tag, EffectRemoved.Handle, EGameplayEffectStackChange::Removed);\n\t\t}\n\t}\n\n\tfor (const FGameplayTag & Tag : GrantedTags) {\n\t\tif (Tag == EffectGameplayTag) {\n\t\t\tOnGameplayEffectStackChange.Broadcast(Tag, EffectRemoved.Handle, EGameplayEffectStackChange::Removed);\n\t\t}\n\t}\n}", "CodeBleu_score": 65.39823852374252}]}
{"instance_id": "a8f7dcc3f1fa", "generation_result": [{"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\tif (AbilitySystemComponent && AbilitySystemComponent->IsAbilitySystemComponentActive() && AbilitySystemComponent->GetOwner() == ActorInfo->AvatarActor) {\n\t\tif (AbilitySystemComponent->ShouldActivateAbility(Spec.Handle, this)) {\n\t\t\tAbilitySystemComponent->ActivateAbility(Spec.Handle, this);\n\t\t}\n\t}\n}", "CodeBleu_score": 57.49265928542188}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\n\tif (AbilitySystemComponent && AbilitySystemComponent->IsOwnerActorAuthoritative() && AbilitySystemComponent->ShouldActivateAbility(Spec.Handle, this))\n\t{\n\t\tAbilitySystemComponent->TryActivateAbility(Spec.Handle, this);\n\t}\n}", "CodeBleu_score": 56.702921044461995}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\tif (AbilitySystemComponent.IsValid() && AbilitySystemComponent->HasAuthority()) {\n\t\tAbilitySystemComponent->TryActivateAbility(Spec.Handle);\n\t}\n}", "CodeBleu_score": 60.02801995126698}]}
{"instance_id": "72a7ce4b848c", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\tSuper::OnMontageEnded(Montage, bInterrupted);\nif (ShouldBroadcastAbilityTaskDelegates()) {\nOnCompleted.Broadcast(FGameplayTag::RequestGameplayTag(FName(\"None\")), FGameplayEventData());\n}\nEndTask();\n}", "CodeBleu_score": 58.710588595472444}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\tif (!bInterrupted && ShouldBroadcastAbilityTaskDelegates()) {\nOnCompleted.Broadcast(GetDefaultGameplayTag(), GetDefaultGameplayEventData());\n}\nEndTask();\n}", "CodeBleu_score": 64.62957000593674}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\tSuper::OnMontageEnded(Montage, bInterrupted);\n\tif (!bInterrupted && ShouldBroadcastAbilityTaskDelegates()) {\n\t\tOnCompleted.Broadcast(FGameplayTag::RequestGameplayTag(FName(\"None\")), FGameplayEventData());\n\t}\n\tEndTask();\n}", "CodeBleu_score": 56.288125216119575}]}
{"instance_id": "cc1cdd579bd4", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tSuper::OnDestroy(AbilityEnded);\n\tif (AbilityEnded && ShouldStopMontageOnDestroy()) {\n\t\tStopPlayingMontage();\n\t}\n\tif (AbilitySystemComponent.IsValid()) {\n\t\tAbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(EventTagContainerDelegateHandle);\n\t}\n}", "CodeBleu_score": 52.812726730403185}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tSuper::OnDestroy(AbilityEnded);\n\tif (AbilityEnded) {\n\t\tif (bStopOnAbilityEnd) {\n\t\t\tStopPlayingMontage();\n\t\t}\n\t\tif (AbilitySystemComponent.IsValid()) {\n\t\t\tAbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(GameplayEventTag, GameplayEventDelegateHandle);\n\t\t}\n\t}\n}", "CodeBleu_score": 58.08339690282044}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tSuper::OnDestroy(AbilityEnded);\n\tif (AbilityEnded) {\n\t\tif (StopOnAbilityEnd) {\n\t\t\tStopPlayingMontage();\n\t\t}\n\t}\n\tif (AbilitySystemComponent.IsValid()) {\n\t\tAbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(EventTag);\n\t}\n}", "CodeBleu_score": 55.90431363008365}]}
{"instance_id": "5932070df16f", "generation_result": [{"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t\tif (AbilitySystemComponent->GetCurrentMontage() != nullptr) {\n\t\tUAnimInstance* AnimInstance = AbilitySystemComponent->GetCurrentActorInfo().GetAnimInstance();\n\t\tif (AnimInstance != nullptr) {\n\t\t\tAnimInstance->Montage_Stop(AbilitySystemComponent->GetCurrentMontage());\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 28.96628306985707}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t\tif (IsValid(AbilitySystemComponent) && IsValid(ActorInfo)) {\n\t\tUAnimInstance* AnimInstance = ActorInfo->GetAnimInstance();\n\t\tif (IsValid(AnimInstance)) {\n\t\t\tUAnimMontage* CurrentMontage = AbilitySystemComponent->GetCurrentMontage();\n\t\t\tif (IsValid(CurrentMontage)) {\n\t\t\t\tAnimInstance->Montage_Stop(CurrentMontage);\n\t\t\t\tAnimInstance->Montage_SetPlayRate(CurrentMontage, 0.0f);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 42.78485922517904}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t\tif (IsValid(AbilitySystemComponent) && AbilitySystemComponent->GetCurrentMontage() != nullptr) {\n\t\tif (ActorInfo != nullptr) {\n\t\t\tif (ActorInfo->GetAnimInstance() != nullptr) {\n\t\t\t\tif (Ability != nullptr) {\n\t\t\t\t\tif (AbilitySystemComponent->GetCurrentMontage() != nullptr) {\n\t\t\t\t\t\tif (AbilitySystemComponent->GetCurrentMontage()->GetOwningComponent() != nullptr) {\n\t\t\t\t\t\t\tif (AbilitySystemComponent->GetCurrentMontage()->GetOwningComponent()->GetClass()->GetName() == \"UGDAT_PlayMontageAndWaitForEvent\") {\n\t\t\t\t\t\t\t\tAbilitySystemComponent->GetCurrentMontage()->OnMontageBlendingOutStarted.Unbind();\n\t\t\t\t\t\t\t\tAbilitySystemComponent->GetCurrentMontage()->OnMontageEnded.Unbind();\n\t\t\t\t\t\t\t\tAbilitySystemComponent->CurrentMontageStop();\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 35.786195043371706}]}
{"instance_id": "7049be7f0c75", "generation_result": [{"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\tauto MyController = Cast<AAIController>(OwnerComp.GetAIOwner());\n\tif (MyController == nullptr) {\n\t\treturn;\n\t}\n\n\tauto BlackBoardComp = OwnerComp.GetBlackboardComponent();\n\tif (BlackBoardComp == nullptr) {\n\t\treturn;\n\t}\n\n\tauto TargetActor = Cast<AActor>(BlackBoardComp->GetValueAsObject(TEXT(\"Target\")));\n\tif (TargetActor == nullptr) {\n\t\treturn;\n\t}\n\n\tauto MyPawn = MyController->GetPawn();\n\tif (MyPawn == nullptr) {\n\t\treturn;\n\t}\n\n\tauto DistanceToTarget = FVector::Distance(MyPawn->GetActorLocation(), TargetActor->GetActorLocation());\n\tif (DistanceToTarget <= BlackBoardComp->GetValueAsFloat(TEXT(\"MaxAttackRange\"))) {\n\t\tauto LineOfSightToTarget = MyController->LineOfSightTo(TargetActor);\n\t\tBlackBoardComp->SetValueAsBool(TEXT(\"TargetInAttackRange\"), LineOfSightToTarget);\n\t}\n}", "CodeBleu_score": 54.660009177623955}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\tauto MyController = Cast<AAIController>(OwnerComp.GetAIOwner());\n\tif (!MyController) {\n\t\treturn;\n\t}\n\tauto BlackBoardComp = OwnerComp.GetBlackboardComponent();\n\tif (!BlackBoardComp) {\n\t\treturn;\n\t}\n\tauto TargetActor = Cast<AActor>(BlackBoardComp->GetValueAsObject(BlackBoardKey.Target));\n\tif (!TargetActor) {\n\t\treturn;\n\t}\n\tauto Distance = FVector::Distance(MyController->GetPawn()->GetActorLocation(), TargetActor->GetActorLocation());\n\tBlackBoardComp->SetValueAsFloat(BlackBoardKey.DistanceToTarget, Distance);\n\tauto bInAttackRange = Distance <= BlackBoardComp->GetValueAsFloat(BlackBoardKey.MaxAttackRange);\n\tBlackBoardComp->SetValueAsBool(BlackBoardKey.InAttackRange, bInAttackRange);\n\tif (!bInAttackRange) {\n\t\treturn;\n\t}\n\tauto bLOSToTarget = MyController->LineOfSightTo(TargetActor);\n\tBlackBoardComp->SetValueAsBool(BlackBoardKey.LOSToTarget, bLOSToTarget);\n}", "CodeBleu_score": 56.344508572277384}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n\t// Get the blackboard component\n\tUBlackboardComponent* BlackBoardComp = OwnerComp.GetBlackboardComponent();\n\tif (BlackBoardComp == nullptr) {\n\t\treturn;\n\t}\n\n\t// Get the AI controller\n\tAController* MyController = OwnerComp.GetAIOwner();\n\tif (MyController == nullptr) {\n\t\treturn;\n\t}\n\n\t// Get the AI pawn\n\tAPawn* MyPawn = MyController->GetPawn();\n\tif (MyPawn == nullptr) {\n\t\treturn;\n\t}\n\n\t// Get the target actor from the blackboard\n\tAActor* TargetActor = Cast<AActor>(BlackBoardComp->GetValueAsObject(BlackBoardKey.TargetActor));\n\tif (TargetActor == nullptr) {\n\t\treturn;\n\t}\n\n\t// Get the distance to the target\n\tFVector TargetLocation = TargetActor->GetActorLocation();\n\tfloat DistanceToTarget = FVector::Distance(MyPawn->GetActorLocation(), TargetLocation);\n\n\t// Check if the target is within range\n\tif (DistanceToTarget <= BlackBoardKey.AttackRange) {\n\t\t// Check for line of sight to the target\n\t\tbool bHasLineOfSight = MyController->LineOfSightTo(TargetActor);\n\n\t\t// Store the result in the blackboard\n\t\tBlackBoardComp->SetValueAsBool(BlackBoardKey.HasLineOfSight, bHasLineOfSight);\n\t}\n}", "CodeBleu_score": 59.8543741263199}]}
{"instance_id": "031bd0ec3e3c", "generation_result": [{"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tSuper::ExecuteTask(OwnerComp, NodeMemory);\n\tAPawn* OwnerPawn = Cast<APawn>(OwnerComp.GetAIOwner()->GetPawn());\n\tif (OwnerPawn) {\n\t\tUSAttributeComponent* AttributeComp = OwnerPawn->FindComponentByClass<USAttributeComponent>();\n\t\tif (AttributeComp) {\n\t\t\tAttributeComp->ApplyHealthChange(AttributeComp->GetHealthMax(), false);\n\t\t\treturn EBTNodeResult::Succeeded;\n\t\t}\n\t}\n\treturn EBTNodeResult::Failed;\n}", "CodeBleu_score": 51.15395795427934}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tSuper::ExecuteTask(OwnerComp, NodeMemory);\n\tif (OwnerComp.GetAIOwner() == nullptr) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\tUPawn* pawn = OwnerComp.GetAIOwner()->GetPawn();\n\tif (pawn == nullptr) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\tUSAttributeComponent* AttributeComp = pawn->FindComponentByClass<USAttributeComponent>();\n\tif (AttributeComp == nullptr) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\tAttributeComp->ApplyHealthChange(AttributeComp->GetHealthMax(), false);\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 49.40521856757406}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tSuper::ExecuteTask(OwnerComp, NodeMemory);\n\tif (!ensure(OwnerComp.GetAIOwner())) { return EBTNodeResult::Failed; }\n\tauto* Pawn = OwnerComp.GetAIOwner()->GetPawn();\n\tif (!ensure(Pawn)) { return EBTNodeResult::Failed; }\n\tauto* AttributeComp = Pawn->FindComponentByClass<USAttributeComponent>();\n\tif (!ensure(AttributeComp)) { return EBTNodeResult::Failed; }\n\tAttributeComp->ApplyHealthChange(AttributeComp->GetHealthMax(), false);\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 50.595927162326284}]}
{"instance_id": "6cd6e778e91b", "generation_result": [{"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\tGetWorld()->GetSubsystem<USTickablesSubsystem>()->RegisterComponent(this);\n}", "CodeBleu_score": 40.30073290366272}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\tSuper::BeginPlay();\nGetWorld()->GetSubsystem<USTickablesSubsystem>()->RegisterComponent(this);\n}", "CodeBleu_score": 40.154794332341936}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\tGetWorld()->GetSubsystem<USTickablesSubsystem>()->RegisterComponent(this);\n}", "CodeBleu_score": 40.30073290366272}]}
{"instance_id": "e90ff27c7f16", "generation_result": [{"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\tSuper::EndPlay(EndPlayReason);\nauto* Tickables = GetWorld()->GetSubsystem<USTickablesSubsystem>();\nTickables->DeRegisterComponent(this);\n}", "CodeBleu_score": 64.90876830449169}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\tSuper::EndPlay(EndPlayReason)\nauto* Tickables = GetWorld()->GetSubsystem<USTickablesSubsystem>()\nTickables->DeRegisterComponent(this)\n}", "CodeBleu_score": 57.030841175297965}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\tSuper::EndPlay(EndPlayReason);\n\nauto* Tickables = GetWorld()->GetSubsystem<USTickablesSubsystem>();\nTickables->DeRegisterComponent(this);\n}", "CodeBleu_score": 64.90876830449169}]}
{"instance_id": "be3e542c07ea", "generation_result": [{"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\tif (bManagingSignificance) {\n\t\tif (!Implements<USSignificanceInterface>()) {\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(\"Owner of USSignificanceComponent %s does not implement the USSignificanceInterface.\"), *GetOwner()->GetName());\n\t\t}\n\t\telse {\n\t\t\tUSSignificanceInterface::Execute_RegisterWithSignificanceManager(GetOwner(), this);\n\t\t\tif (bWaitOneFrame) {\n\t\t\t\tGetWorld()->GetTimerManager().SetTimerForNextTick(this, &USSignificanceComponent::RegisterWithSignificanceManager);\n\t\t\t}\n\t\t}\n\t}\n\tfor (UParticleSystemComponent* ParticleSystemComponent : GetOwner()->GetComponents<UParticleSystemComponent>()) {\n\t\tParticleSystemComponent->OnSystemFinishedPlaying().AddUObject(this, &USSignificanceComponent::OnParticleSystemFinishedPlaying);\n\t}\n}", "CodeBleu_score": 47.651542303653635}, {"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\tif (bManagingSignificance) {\n\t\tif (Implements<USSignificanceInterface>()) {\n\t\t\t// Register with significance manager\n\t\t\tRegisterWithManager();\n\t\t} else {\n\t\t\tUE_LOG(LogSignificance, Warning, TEXT(\"Owner of SignificanceComponent does not implement the SignificanceInterface!\"));\n\t\t}\n\t}\n\n\t// Register particle significance\n\tfor (UParticleSystemComponent* ParticleSystemComponent : GetOwner()->GetComponents<UParticleSystemComponent>()) {\n\t\tif (ParticleSystemComponent->bAutoActivate) {\n\t\t\tParticleSystemComponent->RegisterComponent();\n\t\t\tParticleSystemComponent->SetManagingSignificance(true);\n\t\t}\n\t}\n}", "CodeBleu_score": 40.212109634101665}, {"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\tif (bManagingSignificance) {\n\t\tif (Implements<USSignificanceInterface>()) {\n\t\t\tauto owner = GetOwner();\n\t\t\tauto world = GetWorld();\n\t\t\tif (world) {\n\t\t\t\tauto timerManager = world->GetTimerManager();\n\t\t\t\tif (bWaitOneFrame) {\n\t\t\t\t\ttimerManager.SetTimerForNextTick(this, &USSignificanceComponent::RegisterWithManager);\n\t\t\t\t} else {\n\t\t\t\t\tRegisterWithManager();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor (auto particleSystem : GetOwner()->GetComponents<UParticleSystemComponent>()) {\n\t\tif (particleSystem->bManageSignificance) {\n\t\t\tparticleSystem->UpdateSignificance();\n\t\t}\n\t}\n}", "CodeBleu_score": 60.23761409186351}]}
{"instance_id": "77824b6415d0", "generation_result": [{"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\t// Retrieve the world\n\tUWorld* World = GetWorld();\n\tif (World) {\n\t\t// Retrieve the significance manager\n\t\tUSSignificanceManager* SignificanceManager = World->GetGameInstance()->GetSubsystem<USSignificanceManager>();\n\t\tif (SignificanceManager) {\n\t\t\t// Define the lambda function for calculating significance\n\t\t\tauto CalcSignificance = [this]() {\n\t\t\t\t// Retrieve the owner\n\t\t\t\tAActor* Owner = GetOwner();\n\t\t\t\tif (Owner) {\n\t\t\t\t\t// Retrieve the owner's class\n\t\t\t\t\tUClass* OwnerClass = Owner->GetClass();\n\t\t\t\t\tif (OwnerClass) {\n\t\t\t\t\t\t// Retrieve the owner's class name\n\t\t\t\t\t\tFName OwnerClassName = OwnerClass->GetFName();\n\t\t\t\t\t\tif (OwnerClassName != NAME_None) {\n\t\t\t\t\t\t\t// Retrieve the owner's actor's location\n\t\t\t\t\t\t\tFVector OwnerLocation = Owner->GetActorLocation();\n\t\t\t\t\t\t\t// Retrieve the actor's bounds\n\t\t\t\t\t\t\tFBox OwnerBox = Owner->GetComponentsBoundingBox(false);\n\t\t\t\t\t\t\t// Retrieve the actor's extents\n\t\t\t\t\t\t\tFVector OwnerExtents = OwnerBox.GetExtent();\n\t\t\t\t\t\t\t// Calculate the significance\n\t\t\t\t\t\t\treturn SignificanceManager->CalcSignificance(OwnerClassName, OwnerLocation, OwnerExtents);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn 0.0f;\n\t\t\t};\n\t\t\t// Define the lambda function for handling post-significance updates\n\t\t\tauto PostSignificanceUpdate = [this]() {\n\t\t\t\t// Retrieve the owner\n\t\t\t\tAActor* Owner = GetOwner();\n\t\t\t\tif (Owner) {\n\t\t\t\t\t// Retrieve the owner's class\n\t\t\t\t\tUClass* OwnerClass = Owner->GetClass();\n\t\t\t\t\tif (OwnerClass) {\n\t\t\t\t\t\t// Retrieve the owner's class name\n\t\t\t\t\t\tFName OwnerClassName = OwnerClass->GetFName();\n\t\t\t\t\t\tif (OwnerClassName != NAME_None) {\n\t\t\t\t\t\t\t// Retrieve the owner's actor's location\n\t\t\t\t\t\t\tFVector OwnerLocation = Owner->GetActorLocation();\n\t\t\t\t\t\t\t// Retrieve the actor's bounds\n\t\t\t\t\t\t\tFBox OwnerBox = Owner->GetComponentsBoundingBox(false);\n\t\t\t\t\t\t\t// Retrieve the actor's extents\n\t\t\t\t\t\t\tFVector OwnerExtents = OwnerBox.GetExtent();\n\t\t\t\t\t\t\t// Handle the post-significance update\n\t\t\t\t\t\t\tSignificanceManager->PostSignificanceUpdate(OwnerClassName, OwnerLocation, OwnerExt", "CodeBleu_score": 35.71291107059203}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\tASignificanceManager* SignificanceManager = GetWorld()->GetWorldSettings()->GetSignificanceManager();\n\tif (SignificanceManager) {\n\t\tauto CalcSignificance = [this]() {\n\t\t\treturn GetSignificance();\n\t\t};\n\t\tauto PostSignificanceUpdate = [this]() {\n\t\t\tOnSignificanceChanged.Broadcast();\n\t\t};\n\t\tSignificanceManager->RegisterObject(GetOwner()->GetClass()->GetFName(), CalcSignificance, PostSignificanceUpdate);\n\t}\n}", "CodeBleu_score": 24.339246117741542}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\t// Retrieve the world\n\tUWorld* World = GetWorld();\n\tif (World) {\n\t\t// Retrieve the significance manager\n\t\tASignificanceManager* SignificanceManager = World->GetGameInstance()->GetSubsystem<ASignificanceManager>();\n\t\tif (SignificanceManager) {\n\t\t\t// Define the lambda functions for calculating and handling significance updates\n\t\t\tauto CalcSignificance = [this](AActor* Other) -> float {\n\t\t\t\treturn GetSignificance(Other);\n\t\t\t};\n\t\t\tauto PostSignificanceUpdate = [this](AActor* Other) {\n\t\t\t\tHandleSignificanceUpdate(Other);\n\t\t\t};\n\t\t\t// Register the component with the significance manager\n\t\t\tSignificanceManager->RegisterObject(this, GetOwner()->GetClass()->GetFName(), CalcSignificance, PostSignificanceUpdate);\n\t\t}\n\t}\n}", "CodeBleu_score": 33.81228330891328}]}
{"instance_id": "dca342410d64", "generation_result": [{"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tSCOPED_NAMED_EVENT_TICKS(\"ReleaseToPool\", STAT_ReleaseToPool);\n\tif (!Actor->bIsPoolingEnabled) {\n\t\treturn false;\n\t}\n\tif (!Actor->GetWorld()) {\n\t\treturn false;\n\t}\n\tUSActorPoolingSubsystem* PoolingSubsystem = Actor->GetWorld()->GetSubsystem<USActorPoolingSubsystem>();\n\tif (!PoolingSubsystem) {\n\t\treturn false;\n\t}\n\treturn PoolingSubsystem->ReleaseToPool_Internal(Actor);\n}", "CodeBleu_score": 54.9077686578461}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tSCOPED_NAMED_EVENT_TICKS(STAT_ReleaseToPool, 0);\n\tSCOPE_CYCLE_COUNTER(STAT_ReleaseToPool);\n\n\tif (!Actor) {\n\t\treturn false;\n\t}\n\n\tif (!IsPoolingEnabled(Actor)) {\n\t\treturn false;\n\t}\n\n\tUSWorld* World = Actor->GetWorld();\n\tif (!World) {\n\t\treturn false;\n\t}\n\n\treturn ReleaseToPool_Internal(Actor);\n}", "CodeBleu_score": 51.52981436269998}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tSCOPED_NAMED_EVENT_TEXT(\"USActorPoolingSubsystem::ReleaseToPool\", FColor::Red);\n\tif (!Actor) {\n\t\treturn false;\n\t}\n\tif (!Actor->IsActorPoolingEnabled()) {\n\t\treturn false;\n\t}\n\tUSActorPoolingSubsystem* PoolingSubsystem = Actor->GetWorld()->GetSubsystem<USActorPoolingSubsystem>();\n\tif (PoolingSubsystem) {\n\t\tPoolingSubsystem->ReleaseToPool_Internal(Actor);\n\t}\n\telse {\n\t\tActor->Destroy();\n\t}\n\treturn true;\n}", "CodeBleu_score": 64.92625450084346}]}
{"instance_id": "5c285130f782", "generation_result": [{"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tSCOPED_NAMED_EVENT_COLOR(FColor::Red, \"PrimeActorPool\");\n\tUE_LOG(LogTemp, Log, TEXT(\"Initializing actor pool for class %s\"), *ActorClass->GetName());\n\tfor (int32 i = 0; i < Amount; i++) {\n\t\tAActor* NewActor = GetWorld()->SpawnActor<AActor>(ActorClass);\n\t\tReleaseActorToPool(NewActor);\n\t}\n}", "CodeBleu_score": 49.19444121488938}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tSCOPE_CYCLE_COUNTER_DETAILED(STAT_SActorPoolingSubsystem_PrimeActorPool);\n\tFString ActorClassName = *ActorClass->GetName();\n\tFString EventName = FString::Printf(TEXT(\"PrimeActorPool_%s\"), *ActorClassName);\n\tFString PoolName = FString::Printf(TEXT(\"ActorPool_%s\"), *ActorClassName);\n\tSCOPED_NAMED_EVENT_DYNAMIC_COLOR(EventName, FColor::Red);\n\tUE_LOG(LogActorPool, Log, TEXT(\"Priming %s actor pool with %i actors\"), *ActorClassName, Amount);\n\tif (Amount < 0) {\n\t\tUE_LOG(LogActorPool, Error, TEXT(\"Cannot prime an actor pool with a negative number of actors\"));\n\t\treturn;\n\t}\n\tif (Amount == 0) {\n\t\tUE_LOG(LogActorPool, Log, TEXT(\"Skipping actor pool priming for %s because the amount is 0\"), *ActorClassName);\n\t\treturn;\n\t}\n\tif (Amount > 1000) {\n\t\tUE_LOG(LogActorPool, Warning, TEXT(\"Priming an actor pool with %i actors may be slow\"), Amount);\n\t}\n\tif (ActorClass == nullptr) {\n\t\tUE_LOG(LogActorPool, Error, TEXT(\"Cannot prime an actor pool with a null actor class\"));\n\t\treturn;\n\t}\n\tif (ActorClass->HasAnyClassFlags(CLASS_Abstract)) {\n\t\tUE_LOG(LogActorPool, Error, TEXT(\"Cannot prime an actor pool with an abstract actor class\"));\n\t\treturn;\n\t}\n\tif (ActorClass->HasAnyClassFlags(CLASS_Deprecated)) {\n\t\tUE_LOG(LogActorPool, Error, TEXT(\"Cannot prime an actor pool with a deprecated actor class\"));\n\t\treturn;\n\t}\n\tif (!ActorClass->HasAnyClassFlags(CLASS_Native)) {\n\t\tUE_LOG(LogActorPool, Error, TEXT(\"Cannot prime an actor pool with a non-native actor class\"));\n\t\treturn;\n\t}\n\tif (ActorClass->HasAnyClassFlags(CLASS_NewerVersionExists)) {\n\t\tUE_LOG(LogActorPool, Error, TEXT(\"Cannot prime an actor pool with a newer version of the actor class\"));\n\t\treturn", "CodeBleu_score": 38.254406673040805}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tSCOPE_NAMED_EVENT_TEXT(\"Actor Pooling\", \"Priming \" + ActorClass->GetName());\n\tfor (int32 i = 0; i < Amount; ++i) {\n\t\tAActor* NewActor = GetWorld()->SpawnActor<AActor>(ActorClass);\n\t\tNewActor->ReleaseToPool();\n\t}\n}", "CodeBleu_score": 40.32291082881653}]}
{"instance_id": "43c013653d6d", "generation_result": [{"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t\t// Make sure we have a loading screen widget to use\n\tif (FLoadingScreenAttributes::GetLoadingScreenWidgetClass() == nullptr) {\n\t\treturn;\n\t}\n\t// Create a new loading screen attributes object\n\tFLoadingScreenAttributes LoadingScreenAttributes;\n\t// Set the loading screen widget class\n\tLoadingScreenAttributes.LoadingScreenWidgetClass = FLoadingScreenAttributes::GetLoadingScreenWidgetClass();\n\t// Set the map name\n\tLoadingScreenAttributes.MapName = MapName;\n\t// Create a new loading screen widget\n\tTSharedPtr<SWidget> LoadingScreenWidget = FLoadingScreenAttributes::NewTestLoadingScreenWidget(LoadingScreenAttributes);\n\t// Setup the loading screen\n\tGetMoviePlayer()->SetupLoadingScreen(LoadingScreenWidget);\n}", "CodeBleu_score": 56.914525988277134}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t\t// Create a new loading screen attributes object\n\tFLoadingScreenAttributes LoadingScreenAttributes;\n\tLoadingScreenAttributes.MovieURL = FLoadingScreenAttributes::GetLoadingScreenMovie(MapName);\n\tLoadingScreenAttributes.BackgroundColor = FLinearColor::Black;\n\tLoadingScreenAttributes.LoadingScreenWidgetClass = ULoadingScreen::StaticClass();\n\n\t// Set up the loading screen using the movie player\n\tFLoadingScreenAttributes::NewTestLoadingScreenWidget(LoadingScreenAttributes);\n}", "CodeBleu_score": 46.09514145082413}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t\tFLoadingScreenAttributes LoadingScreenAttributes;\n\tLoadingScreenAttributes.MovieURL = FLoadingScreenAttributes::GetMovieURL(MapName);\n\tLoadingScreenAttributes.MoviePlayer = GetMoviePlayer();\n\tLoadingScreenAttributes.LoadingScreenWidgetClass = FLoadingScreenAttributes::NewTestLoadingScreenWidget;\n\tLoadingScreenAttributes.BackgroundColor = FLinearColor::Black;\n\tLoadingScreenAttributes.LoadingMovieName = FLoadingScreenAttributes::GetMovieName(MapName);\n\tLoadingScreenAttributes.BackgroundColor = FLinearColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FLinearColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FLinearColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FLinearColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FLinearColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FLinearColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FLinearColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FLinearColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FLinearColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FLinearColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FLinearColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FLinearColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FLinearColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FLinearColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FLinearColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FLinearColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FLinearColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FLinearColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FLinearColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FLinearColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FLinearColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FLinearColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FLinearColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FLinearColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FLinearColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FLinearColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FLinearColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FLinearColor::Black;\n\tLoadingScreenAttributes.BackgroundColor = FLinearColor::Black;\n\tLoadingScreenAttributes", "CodeBleu_score": 43.154825405338585}]}
{"instance_id": "a6979eb925a5", "generation_result": [{"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tif (Instigator) {\n\t\t// Log the start of the action\n\t\tUE_LOG(LogAction, Log, TEXT(\"%s: %s started by %s\"), *GetOwner()->GetName(), *GetName(), *Instigator->GetName());\n\n\t\t// Add granted tags to the owning component's active gameplay tags\n\t\tif (Comp) {\n\t\t\tComp->ActiveGameplayTags.AppendTags(GrantedTags);\n\t\t}\n\n\t\t// If the component's owner role is authoritative, record the start time\n\t\tif (Role == EGameplayRole::Authority) {\n\t\t\tStartTime = GetWorld()->GetTimeSeconds();\n\t\t}\n\n\t\t// Broadcast an action started event from the owning component\n\t\tif (Comp) {\n\t\t\tComp->OnActionStarted.Broadcast(Instigator);\n\t\t}\n\t}\n}", "CodeBleu_score": 48.063296043973104}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tif (Instigator == nullptr) {\n\t\treturn;\n\t}\n\tif (Instigator->GetLocalRole() == ROLE_Authority) {\n\t\tif (Role == EActionRole::INSTIGATOR) {\n\t\t\tStartTime = GetWorld()->GetTimeSeconds();\n\t\t}\n\t}\n\tif (Role == EActionRole::TARGET) {\n\t\tif (Instigator->GetLocalRole() != ROLE_Authority) {\n\t\t\tStartTime = GetWorld()->GetTimeSeconds();\n\t\t}\n\t}\n\tif (Role == EActionRole::INSTIGATOR) {\n\t\tif (Instigator->GetLocalRole() != ROLE_Authority) {\n\t\t\tInstigator->GetWorld()->GetAuthGameMode<ASQPlayerController>()->GetActionManager()->AddAction(this);\n\t\t}\n\t}\n\tif (Role == EActionRole::TARGET) {\n\t\tif (Instigator->GetLocalRole() != ROLE_Authority) {\n\t\t\tInstigator->GetWorld()->GetAuthGameMode<ASQPlayerController>()->GetActionManager()->AddAction(this);\n\t\t}\n\t}\n\tif (Role == EActionRole::INSTIGATOR) {\n\t\tif (Instigator->GetLocalRole() == ROLE_Authority) {\n\t\t\tInstigator->GetWorld()->GetAuthGameMode<ASQPlayerController>()->GetActionManager()->AddAction(this);\n\t\t}\n\t}\n\tif (Role == EActionRole::TARGET) {\n\t\tif (Instigator->GetLocalRole() == ROLE_Authority) {\n\t\t\tInstigator->GetWorld()->GetAuthGameMode<ASQPlayerController>()->GetActionManager()->AddAction(this);\n\t\t}\n\t}\n\tif (Role == EActionRole::INSTIGATOR) {\n\t\tif (Instigator->GetLocalRole() != ROLE_Authority) {\n\t\t\tInstigator->GetWorld()->GetAuthGameMode<ASQPlayerController>()->GetActionManager()->AddAction(this);\n\t\t}\n\t}\n\tif (Role == EActionRole::TARGET) {\n\t\tif (Instigator->GetLocalRole() != ROLE_Authority) {\n\t\t\tInstigator->GetWorld()->GetAuthGameMode<ASQPlayerController>()->GetActionManager()->AddAction(this);\n\t", "CodeBleu_score": 41.13052032678837}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tif (Instigator) {\n\t\tUE_LOG(LogAction, Log, TEXT(\"Action '%s' started by '%s'\"), *GetFName().ToString(), *Instigator->GetFName().ToString());\n\t}\n\telse {\n\t\tUE_LOG(LogAction, Log, TEXT(\"Action '%s' started\"), *GetFName().ToString());\n\t}\n\tComp->ActiveGameplayTags.AppendTags(GrantedTags);\n\tif (OwnerRole == EActionRole::Authoritative) {\n\t\tStartTime = GetWorld()->GetTimeSeconds();\n\t}\n\tComp->OnActionStarted.Broadcast(Instigator);\n}", "CodeBleu_score": 48.092482420397445}]}
{"instance_id": "bdec7bf3e2d7", "generation_result": [{"code": "float USActionEffect::GetTimeRemaining() const{\n\t\tif (auto GS = GetWorld()->GetGameState<AGameStateBase>()) {\n\t\treturn Duration - (GS->GetServerWorldTimeSeconds() - StartTime);\n\t}\n\treturn Duration;\n}", "CodeBleu_score": 52.56244854209727}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\t\tif (GS == nullptr) {\n\t\treturn Duration;\n\t}\n\treturn Duration - (GS->GetServerWorldTimeSeconds() - StartTime);\n}", "CodeBleu_score": 35.70860191752423}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\t\tif (auto GS = GetWorld()->GetGameState<AGameStateBase>()) {\n\t\treturn GetDuration() - (GS->GetServerWorldTimeSeconds() - GetStartTime());\n\t}\n\treturn GetDuration();\n}", "CodeBleu_score": 49.375621588729665}]}
{"instance_id": "db3a7508643b", "generation_result": [{"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t\tif (!InFocus) {\n\t\tGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, TEXT(\"No actor specified!\"));\n\t} else {\n\t\tAPawn* pawn = CastChecked<APawn>(GetOwner());\n\t\tInFocus->Interact(pawn);\n\t}\n}", "CodeBleu_score": 53.3145212687265}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t\tif (!InFocus) {\n\t\tGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, TEXT(\"Null actor passed to Interact\"));\n\t\treturn;\n\t}\n\n\tAPawn* PawnOwner = CastChecked<APawn>(GetOwner());\n\tif (!PawnOwner) {\n\t\tGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, TEXT(\"Pawn owner is null\"));\n\t\treturn;\n\t}\n\n\tInFocus->Interact(PawnOwner);\n}", "CodeBleu_score": 53.354231894628114}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t\tif (!InFocus) {\n\t\tGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, TEXT(\"No actor specified!\"));\n\t\treturn;\n\t}\n\n\tAPawn* Pawn = CastChecked<APawn>(GetOwner());\n\tInFocus->Interact(Pawn);\n}", "CodeBleu_score": 55.74107968042761}]}
{"instance_id": "e6a5224079e6", "generation_result": [{"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\tif (DamageCauser == nullptr) {\n\t\treturn false;\n\t}\n\n\tif (TargetActor == nullptr) {\n\t\treturn false;\n\t}\n\n\tif (DamageAmount <= 0.0f) {\n\t\treturn false;\n\t}\n\n\tUAttributeComponent* AttributeComp = TargetActor->FindComponentByClass<UAttributeComponent>();\n\tif (AttributeComp == nullptr) {\n\t\treturn false;\n\t}\n\n\tAttributeComp->ApplyHealthChange(-DamageAmount);\n\treturn true;\n}", "CodeBleu_score": 51.495526794709676}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\t// Validate parameters\n\tif (!DamageCauser) {\n\t\treturn false;\n\t}\n\tif (!TargetActor) {\n\t\treturn false;\n\t}\n\tif (DamageAmount <= 0.0f) {\n\t\treturn false;\n\t}\n\n\t// Retrieve the target actor's attribute component\n\tUAttributeComponent* AttributeComp = TargetActor->FindComponentByClass<UAttributeComponent>();\n\tif (!AttributeComp) {\n\t\treturn false;\n\t}\n\n\t// Apply a negative health change equal to the damage amount caused by the damage causer\n\tAttributeComp->ApplyHealthChange(-DamageAmount);\n\n\treturn true;\n}", "CodeBleu_score": 52.46028101491377}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\tif (DamageCauser == nullptr || TargetActor == nullptr) {\n\t\treturn false;\n\t}\n\tUAttributeComponent* AttributeComp = TargetActor->FindComponentByClass<UAttributeComponent>();\n\tif (AttributeComp != nullptr) {\n\t\tAttributeComp->ApplyHealthChange(-DamageAmount);\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 57.56879368357832}]}
{"instance_id": "084a7501fc08", "generation_result": [{"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\tif (NewTime > GetPersonalRecordTime()) {\n\t\tSetPersonalRecordTime(NewTime);\n\t\tBroadcastPersonalRecordTimeChanged();\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 36.16908113836449}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\tif (NewTime > this->PersonalRecord) {\n\t\tthis->PersonalRecord = NewTime;\n\t\tthis->OnPersonalRecordChanged.Broadcast(NewTime);\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 37.12507612566468}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\tif (NewTime > PersonalRecord) {\n\t\tPersonalRecord = NewTime;\n\t\tOnPersonalRecordChanged.Broadcast(NewTime);\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 47.8417337152483}]}
{"instance_id": "8e0ccc856566", "generation_result": [{"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tif (InstigatorPawn) {\n\t\tUSAttributeComponent* AttributeComp = InstigatorPawn->FindComponentByClass<USAttributeComponent>();\n\t\tif (AttributeComp) {\n\t\t\tif (!AttributeComp->IsFullHealth()) {\n\t\t\t\tASPlayerState* PS = Cast<ASPlayerState>(InstigatorPawn->GetPlayerState());\n\t\t\t\tif (PS && PS->RemoveCredits(CreditCost)) {\n\t\t\t\t\tAttributeComp->ApplyHealthChange(HealthAmount);\n\t\t\t\t\tGetWorld()->GetTimerManager().SetTimer(CooldownTimerHandle, this, &ASPowerup_HealthPotion::EndCooldown, CooldownDuration, false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 49.61918199383901}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tif (!InstigatorPawn) {\n\t\treturn;\n\t}\n\n\tauto AttributeComp = InstigatorPawn->FindComponentByClass<USAttributeComponent>();\n\tif (!AttributeComp) {\n\t\treturn;\n\t}\n\n\tif (AttributeComp->IsFullHealth()) {\n\t\treturn;\n\t}\n\n\tauto PS = InstigatorPawn->GetPlayerState<ASPlayerState>();\n\tif (!PS) {\n\t\treturn;\n\t}\n\n\tif (!PS->RemoveCredits(CreditsRequired)) {\n\t\treturn;\n\t}\n\n\tAttributeComp->ApplyHealthChange(HealthChange);\n\tCooldownDuration = CooldownTimer;\n\tbIsActive = false;\n\tOnUsed.Broadcast(InstigatorPawn);\n}", "CodeBleu_score": 46.18548488443029}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tif (InstigatorPawn) {\n\t\tauto AttributeComp = InstigatorPawn->FindComponentByClass<USAttributeComponent>();\n\t\tif (AttributeComp && !AttributeComp->IsFullHealth()) {\n\t\t\tauto PS = InstigatorPawn->GetPlayerState<ASPlayerState>();\n\t\t\tif (PS && PS->RemoveCredits(CreditsRequired)) {\n\t\t\t\tAttributeComp->ApplyHealthChange(HealthChange);\n\t\t\t\tGetWorld()->GetTimerManager().SetTimer(CooldownTimerHandle, this, &ASPowerup_HealthPotion::TriggerCooldown, CooldownTime, false);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 49.17919767182465}]}
{"instance_id": "39a680859a89", "generation_result": [{"code": "void ASProjectileBase::Explode_Implementation(){\n\t\t// Spawn the impact effect\n\tUGameplayStatics::SpawnEmitterAtLocation(GetWorld(), ImpactEffect, GetActorLocation(), FRotator::ZeroRotator, true);\n\n\t// Play the impact sound\n\tUGameplayStatics::PlaySoundAtLocation(GetWorld(), ImpactSound, GetActorLocation());\n\n\t// Play the camera shake\n\tUGameplayStatics::PlayWorldCameraShake(GetWorld(), ImpactShake, GetActorLocation());\n\n\t// Release the projectile back to the actor pool\n\tGetWorld()->GetSubsystem<USActorPoolingSubsystem>()->ReleaseToPool(this);\n}", "CodeBleu_score": 55.791967055799695}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t\t// Spawn the impact effect at the projectile's location\n\tUGameplayStatics::SpawnEmitterAtLocation(GetWorld(), ImpactEffect, GetActorLocation(), true);\n\n\t// Play the impact sound\n\tUGameplayStatics::PlaySoundAtLocation(GetWorld(), ImpactSound, GetActorLocation());\n\n\t// Trigger a camera shake\n\tUGameplayStatics::PlayWorldCameraShake(GetWorld(), ImpactShake, GetActorLocation());\n\n\t// Release the projectile back to the actor pool\n\tGetWorld()->GetSubsystem<USActorPoolingSubsystem>()->ReleaseToPool(this);\n}", "CodeBleu_score": 55.021129202298326}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t\t// Spawn the projectile's impact particle effect at the projectile's location\n\tUGameplayStatics::SpawnEmitterAtLocation(GetWorld(), ProjectileImpactParticle, GetActorLocation(), true);\n\t// Play the projectile's impact sound\n\tUGameplayStatics::PlaySoundAtLocation(GetWorld(), ProjectileImpactSound, GetActorLocation());\n\t// Trigger a camera shake\n\tUGameplayStatics::PlayWorldCameraShake(GetWorld(), ProjectileImpactCameraShake, GetActorLocation());\n\t// Release the projectile back to the actor pool\n\tGetWorld()->GetSubsystem<USActorPoolingSubsystem>()->ReleaseToPool(this);\n}", "CodeBleu_score": 55.43447822963302}]}
{"instance_id": "a95c41c6d7b5", "generation_result": [{"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tif (PlayerState == nullptr) {\n\t\tUE_LOG(LogSaveGame, Warning, TEXT(\"GetPlayerData: PlayerState is null, returning null\"));\n\t\treturn nullptr;\n\t}\n\tif (GIsPlayInEditorWorld) {\n\t\tUE_LOG(LogSaveGame, Log, TEXT(\"GetPlayerData: Playing in editor, returning first player\"));\n\t\tif (SavedPlayers.Num() > 0) {\n\t\t\treturn SavedPlayers[0];\n\t\t}\n\t\telse {\n\t\t\tUE_LOG(LogSaveGame, Warning, TEXT(\"GetPlayerData: No saved players, returning null\"));\n\t\t\treturn nullptr;\n\t\t}\n\t}\n\telse {\n\t\tFString PlayerId = PlayerState->GetUniqueId().ToString();\n\t\tUE_LOG(LogSaveGame, Log, TEXT(\"GetPlayerData: PlayerId = %s\"), *PlayerId);\n\t\treturn SavedPlayers.FindByPredicate([PlayerId](const FPlayerSaveData& PlayerData) { return PlayerData.PlayerId == PlayerId; });\n\t}\n}", "CodeBleu_score": 55.836150856958376}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tif (PlayerState == nullptr) {\n\t\treturn nullptr;\n\t}\n\n\tif (GIsPlayInEditorWorld) {\n\t\tUE_LOG(LogSaveGame, Warning, TEXT(\"USSaveGame::GetPlayerData: Play-in-editor worlds do not support player data!\"));\n\t\treturn SavedPlayers.Num() > 0 ? &SavedPlayers[0] : nullptr;\n\t}\n\n\tFString PlayerID = PlayerState->GetUniqueId().ToString();\n\treturn SavedPlayers.FindByPredicate([PlayerID](const FPlayerSaveData& PlayerData) {\n\t\treturn PlayerData.PlayerID == PlayerID;\n\t});\n}", "CodeBleu_score": 63.91450707432726}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tif (PlayerState == nullptr) {\n\t\treturn nullptr;\n\t}\n\tif (GIsPlayInEditorWorld) {\n\t\tUE_LOG(LogSaveGame, Warning, TEXT(\"USSaveGame::GetPlayerData: PIE worlds are not supported\"));\n\t\treturn SavedPlayers.Num() > 0 ? &SavedPlayers[0] : nullptr;\n\t}\n\tFString PlayerID = PlayerState->GetUniqueId().ToString();\n\treturn SavedPlayers.FindByPredicate([PlayerID](const FPlayerSaveData& PlayerData) { return PlayerData.PlayerID == PlayerID; });\n}", "CodeBleu_score": 63.86254564081558}]}
{"instance_id": "58a03c087c47", "generation_result": [{"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t\t// Get the player's state\n\tASPlayerState* PS = Cast<ASPlayerState>(NewPlayer->PlayerState);\n\n\t// Ensure the player state is valid\n\tif (PS) {\n\t\t// Load the player's state from the current save game\n\t\tPS->LoadPlayerState();\n\t}\n}", "CodeBleu_score": 57.97423546509851}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t\tASPlayerState* PS = NewPlayer->GetPlayerState<ASPlayerState>();\n\tif (PS) {\n\t\tPS->LoadPlayerState();\n\t}\n}", "CodeBleu_score": 70.02237931802185}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t\tif (!ensure(NewPlayer)) return;\n\n\tauto PS = NewPlayer->GetPlayerState<ASPlayerState>();\n\tif (!ensure(PS)) return;\n\n\tPS->LoadPlayerState();\n}", "CodeBleu_score": 58.25275733428711}]}
{"instance_id": "c5bd4c059b71", "generation_result": [{"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t\tCurrentSaveGame->SavedActors.Empty();\n\tCurrentSaveGame->SavedPlayers.Empty();\n\n\tUGameplayStatics::GetGameState(GetWorld(), GS);\n\n\tfor (int32 i = 0; i < GS->PlayerArray.Num(); ++i) {\n\t\tAPlayerState* PS = CastChecked<APlayerState>(GS->PlayerArray[i]);\n\t\tif (PS->GetUniqueId().IsValid()) {\n\t\t\tCurrentSaveGame->SavedPlayers.Add(PS->GetUniqueId());\n\t\t\tPS->SavePlayerState();\n\t\t}\n\t}\n\n\tfor (TActorIterator<AActor> Itr(GetWorld()); Itr; ++Itr) {\n\t\tAActor* Actor = *Itr;\n\t\tif (Actor->Implements<USGameplayInterface>()) {\n\t\t\tCurrentSaveGame->SavedActors.Add(Actor->GetFName());\n\t\t\tActor->Serialize(CurrentSaveGame->SavedActors[Actor->GetFName()]);\n\t\t\tActor->GetActorTransform(CurrentSaveGame->SavedActors[Actor->GetFName()].Transform);\n\t\t}\n\t}\n\n\tUGameplayStatics::SaveGameToSlot(CurrentSaveGame, SaveSlotName, SaveSlotDescription);\n\tOnSaveGameWritten.Broadcast();\n}", "CodeBleu_score": 50.71607215345717}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t\t// Get the game state\n\tUWorld* World = GetWorld();\n\tAGameStateBase* GS = World->GetGameState();\n\tif (GS == nullptr) {\n\t\treturn;\n\t}\n\n\t// Get the player state\n\tAPlayerController* PC = World->GetFirstPlayerController();\n\tAPawn* Pawn = PC->GetPawn();\n\tif (Pawn == nullptr) {\n\t\treturn;\n\t}\n\tAPlayerState* PS = Pawn->GetPlayerState();\n\tif (PS == nullptr) {\n\t\treturn;\n\t}\n\n\t// Clear the current save game\n\tCurrentSaveGame->SavedPlayers.Empty();\n\tCurrentSaveGame->SavedActors.Empty();\n\n\t// Save player data for each player in the game state\n\tfor (FConstPlayerControllerIterator Iterator = World->GetPlayerControllerIterator(); Iterator; ++Iterator) {\n\t\tAPlayerController* PlayerController = Iterator->Get();\n\t\tif (PlayerController != nullptr) {\n\t\t\tAPawn* PlayerPawn = PlayerController->GetPawn();\n\t\t\tif (PlayerPawn != nullptr) {\n\t\t\t\tAPlayerState* PlayerState = PlayerPawn->GetPlayerState();\n\t\t\t\tif (PlayerState != nullptr) {\n\t\t\t\t\tFSaveGamePlayerData PlayerData;\n\t\t\t\t\tPlayerData.PlayerControllerID = PlayerController->GetControllerId();\n\t\t\t\t\tPlayerData.PlayerStateID = PlayerState->GetPlayerID();\n\t\t\t\t\tCurrentSaveGame->SavedPlayers.Add(PlayerData);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Save actor data for each actor in the world\n\tfor (TActorIterator<AActor> ActorItr(World); ActorItr; ++ActorItr) {\n\t\tAActor* Actor = *ActorItr;\n\t\tif (Actor != nullptr) {\n\t\t\t// Only save actors that implement the gameplay interface\n\t\t\tif (Actor->GetClass()->ImplementsInterface(USGameplayInterface::StaticClass())) {\n\t\t\t\t// Create a save game actor data object\n\t\t\t\tFSaveGameActorData ActorData;\n\t\t\t\tActorData.ActorName = Actor->GetFName();\n\t\t\t\tActorData.ActorTransform = Actor->GetActorTransform();\n\t\t\t\tActor->Serialize(ActorData.SerializedData);\n\n\t\t\t\t// Add the actor data to the current save game\n\t\t\t\tCurrentSaveGame->SavedActors.Add(ActorData);", "CodeBleu_score": 48.39576177203133}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t\t// Retrieve the current game state\n\tUWorld* World = GetWorld();\n\tcheck(World);\n\tAGameStateBase* GS = World->GetGameState();\n\tcheck(GS);\n\n\t// Clear the current save game\n\tCurrentSaveGame->SavedPlayers.Empty();\n\tCurrentSaveGame->SavedActors.Empty();\n\n\t// Iterate through all players in the game state\n\tfor (int32 i = 0; i < GS->PlayerArray.Num(); ++i) {\n\t\t// Retrieve the player state\n\t\tAPlayerState* PS = CastChecked<APlayerState>(GS->PlayerArray[i]);\n\n\t\t// Save the player state\n\t\tFPlayerSaveData PlayerSaveData;\n\t\tPlayerSaveData.PlayerName = PS->GetPlayerName();\n\t\tPlayerSaveData.PlayerId = PS->PlayerId;\n\t\tPlayerSaveData.SaveData = PS->SavePlayerState();\n\t\tCurrentSaveGame->SavedPlayers.Add(PlayerSaveData);\n\t}\n\n\t// Iterate through all actors in the world\n\tfor (TActorIterator<AActor> It(World); It; ++It) {\n\t\tAActor* Actor = *It;\n\n\t\t// Only save actors that implement the UGameplayInterface interface\n\t\tif (Actor->GetClass()->Implements<USGameplayInterface>()) {\n\t\t\t// Retrieve the actor's name\n\t\t\tFName ActorName = Actor->GetFName();\n\n\t\t\t// Retrieve the actor's transform\n\t\t\tFTransform ActorTransform = Actor->GetActorTransform();\n\n\t\t\t// Serialize the actor\n\t\t\tTArray<uint8> SerializedData;\n\t\t\tFMemoryWriter MemoryWriter(SerializedData, true);\n\t\t\tActor->Serialize(MemoryWriter);\n\n\t\t\t// Create and save the actor data\n\t\t\tFActorSaveData ActorSaveData;\n\t\t\tActorSaveData.ActorName = ActorName;\n\t\t\tActorSaveData.ActorTransform = ActorTransform;\n\t\t\tActorSaveData.SerializedData = SerializedData;\n\t\t\tCurrentSaveGame->SavedActors.Add(ActorSaveData);\n\t\t}\n\t}\n\n\t// Write the save game to a slot\n\tUGameplayStatics::SaveGameToSlot(CurrentSaveGame, SlotName, UserIndex);\n\n\t// Broadcast an event to signal the save is complete\n\tOnSaveGameWritten.Broadcast();\n}", "CodeBleu_score": 57.85990872184491}]}
{"instance_id": "0d7043a0bff0", "generation_result": [{"code": "void FrameworkConfig::draw_themes(){\n\t\t// Draw the theme selection UI\n\tImGui::PushItemWidth(ImGui::GetFontSize() * -12);\n\tImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(0, 0));\n\tImGui::Combo(\"##theme_combo\", &m_selected_theme, \"Default\\0Dark\\0Light\\0\");\n\tImGui::PopStyleVar();\n\tImGui::SameLine(0.0f, ImGui::GetFontSize() * 1.5f);\n\tImGui::Checkbox(\"Use system font size\", &m_use_system_font_size);\n\tif (!m_use_system_font_size) {\n\t\tImGui::SameLine(0.0f, ImGui::GetFontSize() * 1.5f);\n\t\tImGui::PushItemWidth(ImGui::GetFontSize() * 8);\n\t\tImGui::DragFloat(\"##font_size\", &m_font_size, 0.10f, 1.0f, 40.0f, \"%.1f\");\n\t\tImGui::PopItemWidth();\n\t}\n\tImGui::PopItemWidth();\n\n\t// Check if the font size has been changed and update the framework if needed\n\tif (m_font_size != g_framework->get_font_size()) {\n\t\tg_framework->set_font_size(m_font_size);\n\t}\n\n\t// Draw the selected theme\n\tImGui::PushStyleColor(ImGuiCol_ChildBg, get_imgui_theme()->child_bg);\n\tImGui::BeginChild(\"ThemesChild\", ImVec2(0, 0), true);\n\tImGui::PushItemWidth(ImGui::GetFontSize() * -12);\n\tImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(0, 0));\n\tImGui::Combo(\"##theme_combo\", &m_selected_theme, \"Default\\0Dark\\0Light\\0\");\n\tImGui::PopStyleVar();\n\tImGui::SameLine(0.0f, ImGui::GetFontSize() * 1.5f);\n\tImGui::Checkbox(\"Use system font size\", &m_use_system_font_size);\n\tif (!m_use_system_font_size) {\n\t\tImGui::SameLine(0.", "CodeBleu_score": 39.96261562538217}, {"code": "void FrameworkConfig::draw_themes(){\n\t\tif (ImGui::CollapsingHeader(\"Themes\")) {\n\t\tif (ImGui::Button(\"Default\")) {\n\t\t\tset_theme(0);\n\t\t}\n\t\tImGui::SameLine();\n\t\tif (ImGui::Button(\"Dark\")) {\n\t\t\tset_theme(1);\n\t\t}\n\t\tImGui::SameLine();\n\t\tif (ImGui::Button(\"Light\")) {\n\t\t\tset_theme(2);\n\t\t}\n\t\tImGui::SameLine();\n\t\tif (ImGui::Button(\"Classic\")) {\n\t\t\tset_theme(3);\n\t\t}\n\t\tImGui::SameLine();\n\t\tif (ImGui::Button(\"Classic Dark\")) {\n\t\t\tset_theme(4);\n\t\t}\n\t\tImGui::SameLine();\n\t\tif (ImGui::Button(\"Grey\")) {\n\t\t\tset_theme(5);\n\t\t}\n\t\tImGui::SameLine();\n\t\tif (ImGui::Button(\"Grey Dark\")) {\n\t\t\tset_theme(6);\n\t\t}\n\t\tImGui::SameLine();\n\t\tif (ImGui::Button(\"Cherry\")) {\n\t\t\tset_theme(7);\n\t\t}\n\t\tImGui::SameLine();\n\t\tif (ImGui::Button(\"Purple\")) {\n\t\t\tset_theme(8);\n\t\t}\n\t\tImGui::SameLine();\n\t\tif (ImGui::Button(\"Gold\")) {\n\t\t\tset_theme(9);\n\t\t}\n\t\tImGui::SameLine();\n\t\tif (ImGui::Button(\"Red\")) {\n\t\t\tset_theme(10);\n\t\t}\n\t\tImGui::SameLine();\n\t\tif (ImGui::Button(\"Yellow\")) {\n\t\t\tset_theme(11);\n\t\t}\n\t\tImGui::SameLine();\n\t\tif (ImGui::Button(\"Green\")) {\n\t\t\tset_theme(12);\n\t\t}\n\t\tImGui::SameLine();\n\t\tif (ImGui::Button(\"Blue\")) {\n\t\t\tset_theme(13);\n\t\t}\n\t\tImGui::SameLine();\n\t\tif (ImGui::Button(\"Magenta\")) {\n\t\t\tset_theme(14);\n\t\t}\n\t\tImGui::SameLine();\n\t\tif (ImGui::Button(\"Cyan\")) {\n\t\t\tset_theme(15);\n\t\t}\n\t\tImGui::SameLine();\n\t\tif (ImGui::Button(\"White\")) {\n\t\t\tset_theme(16);\n\t\t}", "CodeBleu_score": 34.86684695361262}, {"code": "void FrameworkConfig::draw_themes(){\n\t\tif (ImGui::CollapsingHeader(\"Themes\")) {\n\t\tImGui::PushItemWidth(ImGui::GetWindowWidth() * 0.5f);\n\t\tImGui::Combo(\"Theme\", &m_theme_idx, \"Default\\0Dark\\0Classic\\0Light\\0\");\n\t\tImGui::SameLine();\n\t\tImGui::Text(\"Font Size: %d\", m_font_size->value);\n\t\tm_font_size->draw();\n\t\tImGui::PopItemWidth();\n\t}\n}", "CodeBleu_score": 44.65342283533968}]}
{"instance_id": "e7f81d1dee95", "generation_result": [{"code": "void FrameworkConfig::draw_main() {\n\tImGui::Text(\"Menu Key\");\nImGui::SameLine();\nm_menu_key->draw();\nImGui::Text(\"Show Cursor Key\");\nImGui::SameLine();\nm_show_cursor_key->draw();\nImGui::Text(\"Remember Menu State\");\nImGui::SameLine();\nm_remember_menu_state->draw();\nImGui::Text(\"Enable L3 + R3 Toggle\");\nImGui::SameLine();\nm_enable_l3_r3_toggle->draw();\nImGui::Text(\"Always Show Cursor\");\nImGui::SameLine();\nm_always_show_cursor->draw();\nImGui::Text(\"Log Level\");\nImGui::SameLine();\nm_log_level->draw();\nif (m_log_level->value() != m_log_level_last_value) {\nspdlog::set_level(m_log_level->value());\nm_log_level_last_value = m_log_level->value();\n}\nImGui::Separator();\n}", "CodeBleu_score": 57.87688194266227}, {"code": "void FrameworkConfig::draw_main() {\n\tImGui::Text(\"Menu Key\");\nImGui::SameLine();\nm_menu_key->draw();\nImGui::Text(\"Show Cursor Key\");\nImGui::SameLine();\nm_show_cursor_key->draw();\nImGui::Text(\"Remember Menu State\");\nImGui::SameLine();\nm_remember_menu_state->draw();\nImGui::Text(\"Enable L3 + R3 Toggle\");\nImGui::SameLine();\nm_enable_l3_r3_toggle->draw();\nImGui::Text(\"Always Show Cursor\");\nImGui::SameLine();\nm_always_show_cursor->draw();\nImGui::Text(\"Log Level\");\nImGui::SameLine();\nm_log_level->draw();\nif (m_log_level->value_changed()) {\nspdlog::set_level(static_cast<spdlog::level::level_enum>(m_log_level->value()));\n}\nImGui::Separator();\n}", "CodeBleu_score": 58.47939165566689}, {"code": "void FrameworkConfig::draw_main() {\n\t\tImGui::PushItemWidth(ImGui::GetWindowWidth() * 0.5f);\n\tImGui::Text(\"Menu Key\");\n\tImGui::SameLine();\n\tm_menu_key->draw();\n\tImGui::Text(\"Show Cursor Key\");\n\tImGui::SameLine();\n\tm_show_cursor_key->draw();\n\tImGui::Text(\"Remember Menu State\");\n\tImGui::SameLine();\n\tm_remember_menu_state->draw();\n\tImGui::Text(\"Enable L3 + R3 Toggle\");\n\tImGui::SameLine();\n\tm_enable_l3_r3_toggle->draw();\n\tImGui::Text(\"Always Show Cursor\");\n\tImGui::SameLine();\n\tm_always_show_cursor->draw();\n\tImGui::Text(\"Log Level\");\n\tImGui::SameLine();\n\tm_log_level->draw();\n\tImGui::PopItemWidth();\n\tif (m_log_level->changed && m_log_level->value >= 0 && m_log_level->value <= 4) {\n\t\tspdlog::set_level(static_cast<spdlog::level::level_enum>(m_log_level->value));\n\t}\n}", "CodeBleu_score": 57.72578397111082}]}
{"instance_id": "83fa7f401579", "generation_result": [{"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t\tbool bSuccess = false;\n\tFString ErrorMessage;\n\tTArray<FString> NodeData;\n\tTArray<FString> WayData;\n\tTArray<FString> RelationData;\n\tTArray<FString> TagData;\n\tTArray<FString> MemberData;\n\tTArray<FString> BoundsData;\n\tTArray<FString> NodeIDData;\n\tTArray<FString> WayIDData;\n\tTArray<FString> RelationIDData;\n\tTArray<FString> TagIDData;\n\tTArray<FString> MemberIDData;\n\tTArray<FString> BoundsIDData;\n\tTArray<FString> NodeLatData;\n\tTArray<FString> NodeLonData;\n\tTArray<FString> WayLatData;\n\tTArray<FString> WayLonData;\n\tTArray<FString> RelationLatData;\n\tTArray<FString> RelationLonData;\n\tTArray<FString> TagLatData;\n\tTArray<FString> TagLonData;\n\tTArray<FString> MemberLatData;\n\tTArray<FString> MemberLonData;\n\tTArray<FString> BoundsLatData;\n\tTArray<FString> BoundsLonData;\n\tTArray<FString> NodeTagsData;\n\tTArray<FString> WayTagsData;\n\tTArray<FString> RelationTagsData;\n\tTArray<FString> TagKeyData;\n\tTArray<FString> TagValueData;\n\tTArray<FString> MemberTypeData;\n\tTArray<FString> MemberRoleData;\n\tTArray<FString> BoundsMinLatData;\n\tTArray<FString> BoundsMinLonData;\n\tTArray<FString> BoundsMaxLatData;\n\tTArray<FString> BoundsMaxLonData;\n\tTArray<FString> BoundsMinLat;\n\tTArray<FString> BoundsMinLon;\n\tTArray<FString> BoundsMaxLat;\n\tTArray<FString> BoundsMaxLon;\n\tTArray<FString> BoundsMinLatFloat;\n\tTArray<FString> BoundsMinLonFloat;\n\tTArray<F", "CodeBleu_score": 7.349566799595611}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t\tif( FeedbackContext == nullptr ) {\n\t\treturn false;\n\t}\n\tif( bIsFilePathActuallyTextBuffer ) {\n\t\treturn LoadOpenStreetMapFileFromTextBuffer( OSMFilePath, FeedbackContext );\n\t}\n\telse {\n\t\treturn LoadOpenStreetMapFileFromPath( OSMFilePath, FeedbackContext );\n\t}\n}", "CodeBleu_score": 19.456554244910624}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t\tbool bSuccess = true;\n\tFString ErrorMessage;\n\tTArray<FString> Tags;\n\tTArray<FString> Values;\n\tTMap<FString,FString> NodeMap;\n\tTMap<FString,FString> WayMap;\n\tTMap<FString,FString> RelationMap;\n\tTMap<FString,FString> NodeTags;\n\tTMap<FString,FString> WayTags;\n\tTMap<FString,FString> RelationTags;\n\tTMap<FString,FString> NodeTagsMap;\n\tTMap<FString,FString> WayTagsMap;\n\tTMap<FString,FString> RelationTagsMap;\n\tTArray<FString> NodeIds;\n\tTArray<FString> WayIds;\n\tTArray<FString> RelationIds;\n\tTArray<FString> NodeCoordinates;\n\tTArray<FString> WayCoordinates;\n\tTArray<FString> RelationCoordinates;\n\tTArray<FString> NodeTagsArray;\n\tTArray<FString> WayTagsArray;\n\tTArray<FString> RelationTagsArray;\n\tTArray<FString> NodeTagsMapArray;\n\tTArray<FString> WayTagsMapArray;\n\tTArray<FString> RelationTagsMapArray;\n\tTArray<FString> NodeIdsArray;\n\tTArray<FString> WayIdsArray;\n\tTArray<FString> RelationIdsArray;\n\tTArray<FString> NodeCoordinatesArray;\n\tTArray<FString> WayCoordinatesArray;\n\tTArray<FString> RelationCoordinatesArray;\n\tTArray<FString> NodeTagsArray2;\n\tTArray<FString> WayTagsArray2;\n\tTArray<FString> RelationTagsArray2;\n\tTArray<FString> NodeTagsMapArray2;\n\tTArray<FString> WayTagsMapArray2;\n\tTArray<FString> RelationTagsMapArray2;\n\tTArray<FString> NodeIdsArray2;\n\tTArray<FString> WayIdsArray2;\n\tTArray<FString> RelationIdsArray2;\n\tTArray<FString> NodeCoordinatesArray2;\n\tT", "CodeBleu_score": 7.882912117567686}]}
{"instance_id": "7349d775edf6", "generation_result": [{"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\n\tAStreetMapActor* StreetMapActor = CastChecked<AStreetMapActor>(NewActor);\n\tUStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n\tStreetMapComponent->SetStreetMap(Cast<UStreetMap>(Asset));\n}", "CodeBleu_score": 67.63815909644414}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\tAStreetMapActor* StreetMapActor = CastChecked<AStreetMapActor>(NewActor);\n\tUStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n\tStreetMapComponent->SetStreetMap(Cast<UStreetMap>(Asset));\n}", "CodeBleu_score": 67.63815909644414}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\tSuper::PostSpawnActor(Asset, NewActor);\nAStreetMapActor* StreetMapActor = CastChecked<AStreetMapActor>(NewActor);\nUStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\nStreetMapComponent->SetStreetMap(Cast<UStreetMap>(Asset));\n}", "CodeBleu_score": 67.56132703901241}]}
{"instance_id": "f160ac6d0353", "generation_result": [{"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\tif (SelectedStreetMapComponent.IsValid()) {\n\t\tSelectedStreetMapComponent->BuildMesh();\n\t\tRefreshDetails();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 76.51488926732061}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\tif (SelectedStreetMapComponent.IsValid()) {\n\t\tSelectedStreetMapComponent->BuildMesh();\n\t\tRefreshDetails();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 76.51488926732061}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\tif (SelectedStreetMapComponent.IsValid()) {\n\t\tSelectedStreetMapComponent->BuildMesh();\n\t\tRefreshDetails();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 76.51488926732061}]}
{"instance_id": "b23f1f2b29fa", "generation_result": [{"code": "void FStreetMapImportingModule::StartupModule(){\n\t\tFStreetMapStyle::Initialize();\n\tFModuleManager::LoadModuleChecked<FAssetToolsModule>( \"AssetTools\" ).Get().RegisterAssetTypeActions( MakeShareable( new FStreetMapAssetTypeActions() ) );\n\tPropertyModule.RegisterCustomClassLayout( \"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic( &FStreetMapComponentCustomization::MakeInstance ) );\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 40.68377307041248}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t\tFStreetMapStyle::Initialize();\n\tFModuleManager::LoadModuleChecked<FAssetToolsModule>( \"AssetTools\" ).Get().RegisterAssetTypeActions( MakeShareable( new FStreetMapAssetTypeActions( ) ) );\n\tPropertyModule.RegisterCustomClassLayout( \"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic( &FStreetMapComponentCustomization::MakeInstance ) );\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 39.87315400065904}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t\t// This code will execute after your module is loaded into memory; the exact timing is specified in the .uplugin file per-module\n\tFStreetMapStyle::Initialize();\n\tFModuleManager::LoadModuleChecked<FAssetToolsModule>( \"AssetTools\" ).Get().RegisterAssetTypeActions( FStreetMapAssetTypeActions::GetActions().ToSharedRef() );\n\tPropertyModule.RegisterCustomClassLayout( \"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentCustomization::MakeInstance) );\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 38.664838814065085}]}
{"instance_id": "1da549fe84e3", "generation_result": [{"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\tif (!HasValidMesh()) {\n\t\treturn nullptr;\n\t}\n\n\tFStreetMapSceneProxy* StreetMapSceneProxy = new FStreetMapSceneProxy(this);\n\tStreetMapSceneProxy->Init(GetLocalBounds(), false);\n\treturn StreetMapSceneProxy;\n}", "CodeBleu_score": 49.76494055606522}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\t// If the component has a valid mesh, create a new scene proxy for it.\n\tif (HasValidMesh()) {\n\t\tFStreetMapSceneProxy* SceneProxy = new FStreetMapSceneProxy(this);\n\t\treturn SceneProxy;\n\t}\n\t// Otherwise, return nullptr.\n\telse {\n\t\treturn nullptr;\n\t}\n}", "CodeBleu_score": 35.582938383610184}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\tif (!HasValidMesh()) {\n\t\treturn nullptr;\n\t}\n\n\tFStreetMapSceneProxy* Proxy = new FStreetMapSceneProxy(this);\n\tProxy->Init(this);\n\treturn Proxy;\n}", "CodeBleu_score": 41.84226078481018}]}
{"instance_id": "d0ee3b2e023e", "generation_result": [{"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t(void)Spec;(void)ServerHandle;(void)ClientHandle;\n\tTestAbility01Handle = ClientHandle;\n\tTArray<FAFInputID> InputIds;\n\tInputIds.Add(FInputID(EInputID::Ability01));\n\tAbilities->BindAbilityToInputIDs(TestAbility01Handle, InputIds);\n}", "CodeBleu_score": 51.48298561659031}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t(void)Spec;(void)ClientHandle;TestAbility01Handle = ServerHandle;TArray<FName> InputIds;InputIds.Add(FName(TEXT(\"Ability01\"));Abilities->BindAbilityToInputIDs(ServerHandle, InputIds);}", "CodeBleu_score": 55.99505217900589}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t(void)Spec;(void)ClientHandle;TestAbility01Handle = ServerHandle;TArray<FName> InputIds;InputIds.Add(EInputID::Ability01);Abilities->BindAbilityToInputIDs(ServerHandle, InputIds);}", "CodeBleu_score": 57.69403429978779}]}
{"instance_id": "e62f1b2cd4bd", "generation_result": [{"code": "void AARCharacter::MoveForward(float Value){\n\t\tif (GetCharacterMovement()->IsMovingOnGround()) {\n\t\tif (Value != 0.0f) {\n\t\t\tFRotator Rotation = GetControlRotation();\n\t\t\tRotation.Yaw = 0.0f;\n\t\t\tconst FRotator YawRotation(0.0f, Rotation.Yaw, 0.0f);\n\t\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\t\tAddMovementInput(Direction, Value);\n\t\t}\n\t}\n}", "CodeBleu_score": 63.04704841451666}, {"code": "void AARCharacter::MoveForward(float Value){\n\t\tif (GetCharacterMovement()->IsMovingOnGround()) {\n\t\t// find out which way is forward\n\t\tconst FRotator Rotation = GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\t// get forward vector\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\t// add movement in that direction\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 67.94518341315823}, {"code": "void AARCharacter::MoveForward(float Value){\n\t\tif (GetController() && Value) {\n\t\tFRotator Rotation = GetControlRotation();\n\t\tRotation.Yaw += 90.0f;\n\t\tconst FVector Direction = FRotationMatrix(Rotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 50.37959457166457}]}
{"instance_id": "a77cdc67ee00", "generation_result": [{"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tif (MainWeaponMeshComponent) {\n\t\treturn MainWeaponMeshComponent->GetSocketLocation(Socket);\n\t}\n\telse {\n\t\treturn GetMesh()->GetSocketLocation(\"headSocket\");\n\t}\n}", "CodeBleu_score": 51.81159760410075}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\t// If the character has a main weapon mesh component, return the location of the specified socket on the main weapon mesh component.\n\tif (GetMesh()->GetSocketComponent(Socket)) {\n\t\treturn GetMesh()->GetSocketComponent(Socket)->GetSocketLocation(Socket);\n\t}\n\t// Otherwise, return the location of the \"headSocket\" on the character's mesh.\n\telse {\n\t\treturn GetMesh()->GetSocketLocation(Socket);\n\t}\n}", "CodeBleu_score": 50.842664249387546}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tif (GetMainWeaponMesh()) {\n\t\treturn GetMainWeaponMesh()->GetSocketLocation(Socket);\n\t}\n\treturn GetMesh()->GetSocketLocation(\"headSocket\");\n}", "CodeBleu_score": 47.32723326918995}]}
{"instance_id": "f021203f736a", "generation_result": [{"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tSpawnedEnemies.Remove(InEnemy);\n\tif (SpawnedEnemies.Num < MinSpawnedEnemies) {\n\t\tSetupSpawner();\n\t}\n}", "CodeBleu_score": 54.62229459193664}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tSpawnedEnemies.Remove(InEnemy);\n\tif (SpawnedEnemies.Num < MinSpawnedEnemies) {\n\t\tSetupSpawner();\n\t}\n}", "CodeBleu_score": 54.62229459193664}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tSpawnedEnemies.Remove(InEnemy);\n\tif (SpawnedEnemies.Num < MinNumEnemies) {\n\t\tGetWorldTimerManager().SetTimer(SpawnTimer, this, &AAREnemySpawner::SpawnEnemy, SpawnDelay, false);\n\t}\n}", "CodeBleu_score": 45.74290887007287}]}
{"instance_id": "dbab72cb539f", "generation_result": [{"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\t// Call the base class's implementation first\n\tFString Result = Super::ApproveLogin(Options);\n\n\t// Parse the options string into an array of parameters\n\tTArray<FString> Params;\n\tOptions.ParseIntoArray(Params, TEXT(\" \"), true);\n\n\t// Find the PlayerId parameter\n\tFString PlayerId;\n\tfor (const auto& Param : Params) {\n\t\tif (Param.StartsWith(TEXT(\"PlayerId=\"))) {\n\t\t\tPlayerId = Param.Mid(9);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// If we have a valid player ID, add it to the session settings\n\tif (!PlayerId.IsEmpty()) {\n\t\tGetMutableDefault<UARSessionSettings>()->PlayerId = PlayerId;\n\t}\n\n\treturn Result;\n}", "CodeBleu_score": 56.101908436840034}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\tFString PlayerId = \"\";\n\tFString PlayerName = \"\";\n\tFString PlayerKey = \"\";\n\tbool bResult = Super::ApproveLogin(Options, PlayerId, PlayerName, PlayerKey);\n\tTArray<FString> Tokens;\n\tOptions.ParseIntoArray(Tokens, TEXT(\" \"), true);\n\tfor (auto Token : Tokens) {\n\t\tif (Token.StartsWith(TEXT(\"PlayerId=\"))) {\n\t\t\tPlayerId = Token.RightChop(9);\n\t\t}\n\t}\n\treturn bResult;\n}", "CodeBleu_score": 49.054512216166735}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\t// Call the base class's method first\n\tFString Result = Super::ApproveLogin(Options);\n\n\t// Parse the options string into an array of parameters\n\tTArray<FString> Params;\n\tOptions.ParseIntoArray(Params, TEXT(\" \"), true);\n\n\t// Search for the PlayerId parameter\n\tfor (auto& Param : Params) {\n\t\t// Split the parameter into a key/value pair\n\t\tTArray<FString> KeyValue;\n\t\tParam.Split(TEXT(\"=\"), &KeyValue, ESearchCase::IgnoreCase, ESearchDir::FromStart);\n\t\tif (KeyValue.Num() != 2) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// If we found the PlayerId parameter, extract the player ID value\n\t\tif (KeyValue[0] == TEXT(\"PlayerId\")) {\n\t\t\tPlayerId = FCString::Atoi(*KeyValue[1]);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the result from the base class method\n\treturn Result;\n}", "CodeBleu_score": 55.875343808478796}]}
{"instance_id": "85ea02df92a5", "generation_result": [{"code": "void UARRegisterView::OnRegisterClicked(){\n\t\tFString UserName = UserNameBox->GetText().ToString();\n\tFString DisplayName = DisplayNameBox->GetText().ToString();\n\tFString Password = PasswordBox->GetText().ToString();\n\n\t// Check if any of the fields are empty\n\tif (UserName.Len() == 0 || DisplayName.Len() == 0 || Password.Len() == 0) {\n\t\tWarrningText->SetText(FText::FromString(\"Please enter a username, display name, and password\"));\n\t}\n\telse {\n\t\t// Hide the register button\n\t\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\n\t\t// Register the new player\n\t\tGetOwningPlayer()->GetGameInstance()->RegisterNewPlayer(UserName, DisplayName, Password);\n\t}\n}", "CodeBleu_score": 53.81089526043451}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t\tFString DisplayName = DisplayNameBox->GetText().ToString();\n\tFString UserName = UserNameBox->GetText().ToString();\n\tFString Password = PasswordBox->GetText().ToString();\n\n\tif (DisplayName.Len() == 0 || UserName.Len() == 0 || Password.Len() == 0) {\n\t\tWarrningText->SetText(FText::FromString(\"Please fill in all fields\"));\n\t\treturn;\n\t}\n\n\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\tDisplayNameBox->SetText(FText::FromString(\"\"));\n\tUserNameBox->SetText(FText::FromString(\"\"));\n\tPasswordBox->SetText(FText::FromString(\"\"));\n\n\tUARGameInstance* GI = Cast<UARGameInstance>(GetOwningPlayer()->GetGameInstance());\n\tGI->RegisterNewPlayer(DisplayName, UserName, Password);\n}", "CodeBleu_score": 68.8655701534151}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t\tFString UserName = UserNameBox->GetText().ToString();\n\tFString DisplayName = DisplayNameBox->GetText().ToString();\n\tFString Password = PasswordBox->GetText().ToString();\n\tFText WarnText;\n\n\t// Check if any of the input fields are empty\n\tif (UserName.Len() < 1) {\n\t\tWarnText = LOCTEXT(\"NoUsername\", \"Please enter a username.\");\n\t\tWarrningText->SetText(WarnText);\n\t\treturn;\n\t}\n\tif (DisplayName.Len() < 1) {\n\t\tWarnText = LOCTEXT(\"NoDisplayName\", \"Please enter a display name.\");\n\t\tWarrningText->SetText(WarnText);\n\t\treturn;\n\t}\n\tif (Password.Len() < 1) {\n\t\tWarnText = LOCTEXT(\"NoPassword\", \"Please enter a password.\");\n\t\tWarrningText->SetText(WarnText);\n\t\treturn;\n\t}\n\n\t// Hide the register button\n\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\n\t// Register the new player\n\tUARGameInstance* GI = Cast<UARGameInstance>(GetOwningPlayer()->GetGameInstance());\n\tif (GI) {\n\t\tGI->RegisterNewPlayer(UserName, DisplayName, Password);\n\t}\n}", "CodeBleu_score": 71.10306750060055}]}
{"instance_id": "b33bb5886dd9", "generation_result": [{"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\tAActor* TargetActor = InMod.GetTargetActor();\n\tif (TargetActor) {\n\t\tFVector DamageLocation = TargetActor->GetActorLocation();\n\t\tFVector2D ScreenLocation = UGameplayStatics::ProjectWorldToScreen(GetWorld(), DamageLocation);\n\t\tSetInfo(FText::FromString(FString::FromInt(InMod.GetValue())), ScreenLocation);\n\t}\n}", "CodeBleu_score": 33.87826937657853}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\tif (InMod.Attribute == EAFAttributeName::EAFA_EnemyHealth) {\n\t\tauto EnemyHitResult = InMod.GetHitResult();\n\t\tif (EnemyHitResult.GetActor()) {\n\t\t\tauto EnemyActor = EnemyHitResult.GetActor();\n\t\t\tauto EnemyLocation = EnemyActor->GetActorLocation();\n\t\t\tauto EnemyScreenLocation = UGameplayStatics::ProjectWorldToScreen(GetWorld(), EnemyLocation);\n\t\t\tauto Damage = InMod.GetValue();\n\t\t\tauto DamageText = FText::AsNumber(Damage);\n\t\t\tFloatingCombatText->SetInfo(DamageText, EnemyScreenLocation);\n\t\t}\n\t}\n}", "CodeBleu_score": 40.690907258667536}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\tif (InMod.Attribute == EAFAttributeName::EAFA_Health) {\n\t\tAActor* TargetActor = Cast<AActor>(InMod.NewValue);\n\t\tif (TargetActor) {\n\t\t\tFVector DamageLocation = TargetActor->GetActorLocation();\n\t\t\tFVector2D DamageLocation2D = UGameplayStatics::ProjectWorldToScreen(GetWorld(), DamageLocation);\n\t\t\tif (DamageLocation2D.X != 0 && DamageLocation2D.Y != 0) {\n\t\t\t\tFText DamageText = FText::AsNumber(InMod.NewValue.GetFloat());\n\t\t\t\tFloatingCombatText->SetInfo(DamageText, DamageLocation2D);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 40.39119580799397}]}
{"instance_id": "177d36e7e076", "generation_result": [{"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (!AbilityInstance || !AbilityInstance->IsValidLowLevel()) {\n\t\treturn;\n\t}\n\tUARWeaponComponent* WeaponComponent = AbilityInstance->GetOwner()->FindComponentByClass<UARWeaponComponent>();\n\tAARCharacter* Character = Cast<AARCharacter>(WeaponComponent->GetOwner());\n\tif (!WeaponComponent || !Character || !Character->HasAuthority()) {\n\t\treturn;\n\t}\n\tUARItemWeapon* DuplicatedItem = DuplicateObject<UARItemWeapon>(this, Character, NAME_None, RF_NoFlags, nullptr);\n\tDuplicatedItem->MagazineUpgrade = InMagazineUpgrade;\n\tDuplicatedItem->MagazineUpgradeValue = InMagazineUpgrade->GetMagazineUpgradeValue();\n\tAbilityInstance->AddMagazineUpgrade(InMagazineUpgrade);\n\tOnMagazineUpdateAdded(InMagazineUpgrade);\n}", "CodeBleu_score": 55.5015192489999}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (AbilityInstance) {\n\t\tUARWeaponComponent* WeaponComponent = Cast<UARWeaponComponent>(GetOwner()->FindComponentByClass(UARWeaponComponent::StaticClass()));\n\t\tAARCharacter* Character = Cast<AARCharacter>(GetOwner());\n\n\t\tif (WeaponComponent && Character && Character->GetLocalRole() == ROLE_Authority) {\n\t\t\tUARMagazineUpgradeItem* MagazineUpgrade = DuplicateObject<UARMagazineUpgradeItem>(InMagazineUpgrade, WeaponComponent);\n\t\t\tif (MagazineUpgrade) {\n\t\t\t\tMagazineUpgrade->UpdateValue(WeaponComponent);\n\t\t\t\tAbilityInstance->AddMagazineUpgrade(MagazineUpgrade);\n\t\t\t}\n\t\t}\n\t\tOnMagazineUpdateAdded();\n\t}\n}", "CodeBleu_score": 52.76466072246975}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (InMagazineUpgrade) {\n\t\tif (AbilityInstance) {\n\t\t\tUARWeaponComponent* WeaponComponent = Cast<UARWeaponComponent>(GetOuter());\n\t\t\tAARCharacter* Character = Cast<AARCharacter>(WeaponComponent->GetOwner());\n\t\t\tif (WeaponComponent && Character) {\n\t\t\t\tUARWeaponInventoryComponent* InventoryComponent = Cast<UARWeaponInventoryComponent>(WeaponComponent->GetInventoryComponent());\n\t\t\t\tif (InventoryComponent) {\n\t\t\t\t\tUARMagazineUpgradeItem* MagazineUpgrade = DuplicateObject<UARMagazineUpgradeItem>(InMagazineUpgrade, InventoryComponent);\n\t\t\t\t\tif (Character->HasAuthority()) {\n\t\t\t\t\t\tMagazineUpgrade->UpdateMagazineUpgradeValue(InventoryComponent);\n\t\t\t\t\t\tAbilityInstance->ApplyMagazineUpgradeEffect(MagazineUpgrade);\n\t\t\t\t\t}\n\t\t\t\t\tOnMagazineUpdateAdded(MagazineUpgrade);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 55.194922296218664}]}
{"instance_id": "404276da398b", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tif (AARCharacter* Character = Cast<AARCharacter>(GetOwner())) {\n\t\tif (UGAAbilitySystemComponent* AbilityComp = Cast<UGAAbilitySystemComponent>(Character->GetAbilitySystemComponent())) {\n\t\t\tif (UGAAbilityBase* Ability = Cast<UGAAbilityBase>(AbilityComp->BP_GetAbilityByHandle(InAbilityTag))) {\n\t\t\t\tSetAbilityToItem(LocalIndex, Ability);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 53.80089953995457}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tif (!Owner || !AbilityComp) { return; }\n\tAARCharacter* Character = Cast<AARCharacter>(Owner);\n\tif (!Character) { return; }\n\tUGAAbilityBase* Ability = Character->GetAbilityComp()->BP_GetAbilityByHandle(InAbilityTag, LocalIndex);\n\tif (!Ability) { return; }\n\tSetAbilityToItem(Ability);\n}", "CodeBleu_score": 56.39415965029855}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tif (Owner == nullptr) {\n\t\treturn;\n\t}\n\n\tAARCharacter* Character = Cast<AARCharacter>(Owner);\n\tif (Character == nullptr) {\n\t\treturn;\n\t}\n\n\tUGAAbilitySystemComponent* AbilityComp = Character->GetAbilityComp();\n\tif (AbilityComp == nullptr) {\n\t\treturn;\n\t}\n\n\tUARWeaponAbilityBase* Ability = AbilityComp->BP_GetAbilityByHandle(InAbilityTag, LocalIndex);\n\tif (Ability == nullptr) {\n\t\treturn;\n\t}\n\n\tAbility->SetAbilityToItem(GetEquippedWeapon());\n}", "CodeBleu_score": 53.798898577481836}]}
{"instance_id": "2e97aab98981", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t,\n\tif (!Owner) {\n\t\treturn;\n\t}\n\tAARCharacter* Character = Cast<AARCharacter>(Owner);\n\tif (!Character) {\n\t\treturn;\n\t}\n\tFARWeaponRPC WeaponRPC;\n\tWeaponRPC.WeaponName = Character->GetCurrentWeaponName();\n\tWeaponRPC.WeaponPosition = Character->GetCurrentWeaponPosition();\n\tWeaponRPC.WeaponData = Character->GetCurrentWeaponData();\n\tCharacter->SetCurrentWeaponData(WeaponRPC.WeaponData);\n\tCharacter->SetCurrentWeaponName(WeaponRPC.WeaponName);\n\tCharacter->SetCurrentWeaponPosition(WeaponRPC.WeaponPosition);\n\tCharacter->SetCurrentWeaponAmmo(WeaponRPC.WeaponData.Weapon.Ammo);\n\tCharacter->SetCurrentWeaponAmmoInClip(WeaponRPC.WeaponData.Weapon.AmmoInClip);\n\tCharacter->SetCurrentWeaponAmmoInReserve(WeaponRPC.WeaponData.Weapon.AmmoInReserve);\n\tCharacter->SetCurrentWeaponFireMode(WeaponRPC.WeaponData.Weapon.FireMode);\n\tCharacter->SetCurrentWeaponFireModeSecondary(WeaponRPC.WeaponData.Weapon.FireModeSecondary);\n\tCharacter->SetCurrentWeaponFireModeSpecial(WeaponRPC.WeaponData.Weapon.FireModeSpecial);\n\tCharacter->SetCurrentWeaponFireModeSpecialSecondary(WeaponRPC.WeaponData.Weapon.FireModeSpecialSecondary);\n\tCharacter->SetCurrentWeaponFireModeSpecialCooldown(WeaponRPC.WeaponData.Weapon.FireModeSpecialCooldown);\n\tCharacter->SetCurrentWeaponFireModeSpecialDuration(WeaponRPC.WeaponData.Weapon.FireModeSpecialDuration);\n\tCharacter->SetCurrentWeaponFireModeSecondaryCooldown(WeaponRPC.WeaponData.Weapon.FireModeSecondaryCooldown);\n\tCharacter->SetCurrentWeaponFireModeSecondaryDuration(WeaponRPC.WeaponData.Weapon.FireModeSecondaryDuration);\n\tCharacter->SetCurrentWeaponFireModeCooldown(WeaponRPC.WeaponData.Weapon.FireModeCooldown);\n\tCharacter->SetCurrentWeaponFireModeDuration(WeaponRPC.WeaponData.Weapon.FireModeDuration);\n\tCharacter->SetCurrentWeaponFireModeSecondaryAmmo(WeaponRPC.WeaponData.Weapon.AmmoInClip);\n\tCharacter->SetCurrentWeaponFireModeSecondaryAmmoInReserve(WeaponRPC.WeaponData.Weapon.AmmoInReserve);\n\tCharacter->SetCurrentWeaponFireModeSpecialAmmo(WeaponRPC.WeaponData.Weapon", "CodeBleu_score": 35.49979043904161}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t):\n\tif (AARCharacter* OwnerCharacter = Cast<AARCharacter>(GetOwner())) {\n\t\tFARWeaponRPC WeaponRPC;\n\t\tWeaponRPC.WeaponData = OwnerCharacter->WeaponData;\n\t\tWeaponRPC.WeaponData.Weapon.Reset();\n\t\tWeaponRPC.EquipAction = EAREquipAction::Unequip;\n\t\tWeaponRPC.WeaponPosition = static_cast<EARWeaponPosition>(LocalIndex);\n\t\tOwnerCharacter->WeaponData = WeaponRPC;\n\t\tOwnerCharacter->UpdateWeaponComponent(LocalIndex);\n\t}\n}", "CodeBleu_score": 44.784902242524105}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t(Cast<AARCharacter>(GetOwner()))->WeaponRPC.WeaponData.Weapon.Reset();\n(Cast<AARCharacter>(GetOwner()))->WeaponRPC.WeaponData.Weapon = GetWeaponData(LocalIndex);\n(Cast<AARCharacter>(GetOwner()))->WeaponRPC.WeaponData.Weapon.WeaponPosition = static_cast<EARWeaponPosition>(LocalIndex);\n(Cast<AARCharacter>(GetOwner()))->WeaponRPC.WeaponData.Weapon.WeaponPosition = static_cast<EARWeaponPosition>(LocalIndex);\n(Cast<AARCharacter>(GetOwner()))->WeaponRPC.WeaponData.Weapon.WeaponPosition = static_cast<EARWeaponPosition>(LocalIndex);\nif ((Cast<AARCharacter>(GetOwner()))->WeaponRPC.WeaponData.Weapon.WeaponPosition == (Cast<AARCharacter>(GetOwner()))->WeaponData.Weapon.WeaponPosition) {\n(Cast<AARCharacter>(GetOwner()))->WeaponRPC.WeaponData.Weapon.WeaponPosition = EARWeaponPosition::EARWP_None;\n(Cast<AARCharacter>(GetOwner()))->WeaponRPC.WeaponData.Weapon.WeaponPosition = EARWeaponPosition::EARWP_None;\n(Cast<AARCharacter>(GetOwner()))->WeaponRPC.WeaponData.Weapon.WeaponPosition = EARWeaponPosition::EARWP_None;\n}\n}", "CodeBleu_score": 40.78961813798768}]}
{"instance_id": "13cc35e5ecac", "generation_result": [{"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\tif (!IsRunningDedicatedServer()) {\n\t\tGetMoviePlayer()->OnPrepareLoadingScreen().RemoveAll(this);\n\t}\n}", "CodeBleu_score": 72.1566962303026}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\tif (!IsRunningDedicatedServer()) {\n\t\tGetMoviePlayer()->OnPrepareLoadingScreen().RemoveAll(this);\n\t}\n}", "CodeBleu_score": 72.1566962303026}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\tif (FApp::IsGame() && !IsRunningDedicatedServer()) {\n\t\tGetMoviePlayer()->OnPrepareLoadingScreen().RemoveAll(this);\n\t}\n}", "CodeBleu_score": 50.275497240139885}]}
{"instance_id": "2ee3ac60a8f3", "generation_result": [{"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"PreSetupLoadingScreen\"));\n\tif (GetDefault<ULoadingScreenSettings>()->bEnabled) {\n\t\tFLoadingScreenAttributes LoadingScreenAttributes;\n\t\tLoadingScreenAttributes.bAutoCompleteAfterDelay = false;\n\t\tLoadingScreenAttributes.bMoviesAreSkippable = false;\n\t\tLoadingScreenAttributes.MinimumLoadingScreenDisplayTime = 0.0f;\n\t\tLoadingScreenAttributes.bShowLoadingMovie = false;\n\t\tLoadingScreenAttributes.bShowLoadingScreen = true;\n\t\tLoadingScreenAttributes.MoviePaths = TArray<FSoftObjectPath>();\n\t\tLoadingScreenAttributes.WidgetLoadingScreen = nullptr;\n\t\tLoadingScreenAttributes.WidgetLoadingMovie = nullptr;\n\t\tLoadingScreenAttributes.BackgroundColor = FLinearColor(0.0f, 0.0f, 0.0f, 0.0f);\n\t\tLoadingScreenAttributes.LoadingScreenColor = FLinearColor(0.0f, 0.0f, 0.0f, 0.0f);\n\t\tLoadingScreenAttributes.MoviePlayer = nullptr;\n\t\tLoadingScreenAttributes.MoviePlayerClass = nullptr;\n\t\tLoadingScreenAttributes.MoviePlayerOwnsMovie = false;\n\t\tLoadingScreenAttributes.MoviePaths = TArray<FSoftObjectPath>();\n\t\tLoadingScreenAttributes.MoviePaths.Add(FSoftObjectPath(TEXT(\"/Engine/LoadingScreen/LoadingMovie.LoadingMovie\")));\n\t\tLoadingScreenAttributes.MoviePaths.Add(FSoftObjectPath(TEXT(\"/Engine/LoadingScreen/LoadingMovie.LoadingMovie\")));\n\t\tLoadingScreenAttributes.MoviePaths.Add(FSoftObjectPath(TEXT(\"/Engine/LoadingScreen/LoadingMovie.LoadingMovie\")));\n\t\tLoadingScreenAttributes.MoviePaths.Add(FSoftObjectPath(TEXT(\"/Engine/LoadingScreen/LoadingMovie.LoadingMovie\")));\n\t\tLoadingScreenAttributes.MoviePaths.Add(FSoftObjectPath(TEXT(\"/Engine/LoadingScreen/LoadingMovie.LoadingMovie\")));\n\t\tLoadingScreenAttributes.MoviePaths.Add(FSoftObjectPath(TEXT(\"/Engine/LoadingScreen/LoadingMovie.LoadingMovie\")));\n\t\tLoadingScreenAttributes.MoviePaths.Add(FSoftObjectPath(TEXT(\"/Engine/LoadingScreen/LoadingMovie.LoadingMovie\")));\n\t\tLoadingScreenAttributes.MoviePaths.Add(FSoftObjectPath(TEXT(\"/Engine/LoadingScreen/", "CodeBleu_score": 40.472428453493976}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"Preparing the loading screen...\"));\n\tif (FAsyncLoadingScreenSettings::Get().IsEnabled()) {\n\t\tULoadingScreenSettings* LoadingScreenSettings = GetDefault<ULoadingScreenSettings>();\n\t\tLoadingScreenSettings->bAutoCompleteWhenLoadingCompletes = false;\n\t\tLoadingScreenSettings->bShowLoadingMovies = true;\n\t\tLoadingScreenSettings->bShowSplashScreen = true;\n\t\tLoadingScreenSettings->bShowLoadingSequence = true;\n\t\tLoadingScreenSettings->MoviePaths.Empty();\n\t\tLoadingScreenSettings->MoviePaths.Add(FSoftObjectPath(TEXT(\"/Engine/Loading/Splash/Splash.Splash\")));\n\t\tLoadingScreenSettings->MoviePaths.Add(FSoftObjectPath(TEXT(\"/Engine/Loading/LoadingMovies/Loading.Loading\")));\n\t\tSetupLoadingScreen(LoadingScreenSettings);\n\t}\n}", "CodeBleu_score": 48.068141328424744}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"Preparing to setup loading screen\"));\n\tif (FAsyncLoadingScreenSettings::Get().bEnabled) {\n\t\tULoadingScreenSettings* LoadingScreenSettings = GetDefault<ULoadingScreenSettings>();\n\t\tLoadingScreenSettings->bAutoCompleteAfterDelay = false;\n\t\tLoadingScreenSettings->bShowLoadingSequence = false;\n\t\tLoadingScreenSettings->bShowSplash = false;\n\t\tLoadingScreenSettings->bShowLoadingMovie = false;\n\t\tLoadingScreenSettings->bShowLoadingPercentage = false;\n\t\tLoadingScreenSettings->bShowCancelButton = false;\n\t\tLoadingScreenSettings->MoviePlayer.LoadingScreenMovie.Movie = nullptr;\n\t\tLoadingScreenSettings->MoviePlayer.LoadingScreenMovie.UserMovieTexture = nullptr;\n\t\tLoadingScreenSettings->MoviePlayer.LoadingScreenMovie.UserMoviePlayer = nullptr;\n\t\tLoadingScreenSettings->MoviePlayer.LoadingScreenMovie.UserMoviePlayerClass = nullptr;\n\t\tLoadingScreenSettings->MoviePlayer.BackgroundColor = FColor::Black;\n\t\tLoadingScreenSettings->MoviePlayer.PostProcessSettings.bOverride_AutoExposureMinBrightness = false;\n\t\tLoadingScreenSettings->MoviePlayer.PostProcessSettings.bOverride_AutoExposureMaxBrightness = false;\n\t\tLoadingScreenSettings->MoviePlayer.PostProcessSettings.bOverride_AutoExposureSpeedUp = false;\n\t\tLoadingScreenSettings->MoviePlayer.PostProcessSettings.bOverride_AutoExposureSpeedDown = false;\n\t\tLoadingScreenSettings->MoviePlayer.PostProcessSettings.bOverride_FilmWhitePoint = false;\n\t\tLoadingScreenSettings->MoviePlayer.PostProcessSettings.bOverride_FilmChannelMixerRed = false;\n\t\tLoadingScreenSettings->MoviePlayer.PostProcessSettings.bOverride_FilmChannelMixerGreen = false;\n\t\tLoadingScreenSettings->MoviePlayer.PostProcessSettings.bOverride_FilmChannelMixerBlue = false;\n\t\tLoadingScreenSettings->MoviePlayer.PostProcessSettings.bOverride_FilmContrast = false;\n\t\tLoadingScreenSettings->MoviePlayer.PostProcessSettings.bOverride_FilmDynamicRange = false;\n\t\tLoadingScreenSettings->MoviePlayer.PostProcessSettings.bOverride_FilmHealAmount = false;\n\t\tLoadingScreenSettings->MoviePlayer.PostProcessSettings.bOverride_FilmToe = false;\n\t\tLoadingScreenSettings->MoviePlayer.PostProcessSettings.b", "CodeBleu_score": 25.918817444908253}]}
{"instance_id": "c095588f550c", "generation_result": [{"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\tULoadingScreenSettings* LoadingScreenSettings = GetMutableDefault<ULoadingScreenSettings>();\n\tif (LoadingScreenSettings) {\n\t\tLoadingScreenSettings->StartupBackgroundImages.Empty();\n\t\tfor (const FSoftObjectPath& Image : LoadingScreenSettings->StartupBackgroundImages_DEPRECATED) {\n\t\t\tUTexture2D* Texture = Cast<UTexture2D>(Image.TryLoad());\n\t\t\tif (Texture) {\n\t\t\t\tLoadingScreenSettings->StartupBackgroundImages.Add(Texture);\n\t\t\t}\n\t\t}\n\t\tLoadingScreenSettings->DefaultBackgroundImages.Empty();\n\t\tfor (const FSoftObjectPath& Image : LoadingScreenSettings->DefaultBackgroundImages_DEPRECATED) {\n\t\t\tUTexture2D* Texture = Cast<UTexture2D>(Image.TryLoad());\n\t\t\tif (Texture) {\n\t\t\t\tLoadingScreenSettings->DefaultBackgroundImages.Add(Texture);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 56.79819952923697}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\t// Remove all existing background images\n\tRemoveAllBackgroundImages();\n\n\t// Retrieve the loading screen settings\n\tULoadingScreenSettings* LoadingScreenSettings = GetMutableDefault<ULoadingScreenSettings>();\n\tif (!LoadingScreenSettings) {\n\t\treturn;\n\t}\n\n\t// Startup loading screen\n\tfor (const FLoadingScreenBackgroundImage& BackgroundImage : LoadingScreenSettings->StartupBackgroundImages) {\n\t\tUTexture2D* Image = Cast<UTexture2D>(LoadObject<UObject>(NULL, *BackgroundImage.ImageName.ToString(), NULL, LOAD_None, NULL));\n\t\tif (Image) {\n\t\t\tImage->AddToRoot();\n\t\t\tStartupBackgroundImages.Add(Image);\n\t\t}\n\t}\n\n\t// Default loading screen\n\tfor (const FLoadingScreenBackgroundImage& BackgroundImage : LoadingScreenSettings->DefaultBackgroundImages) {\n\t\tUTexture2D* Image = Cast<UTexture2D>(LoadObject<UObject>(NULL, *BackgroundImage.ImageName.ToString(), NULL, LOAD_None, NULL));\n\t\tif (Image) {\n\t\t\tImage->AddToRoot();\n\t\t\tDefaultBackgroundImages.Add(Image);\n\t\t}\n\t}\n}", "CodeBleu_score": 55.41431243647934}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\tULoadingScreenSettings* LoadingScreenSettings = GetDefault<ULoadingScreenSettings>();\n\tif (LoadingScreenSettings) {\n\t\tLoadingScreenSettings->StartupBackgroundImages.Empty();\n\t\tfor (const FSoftObjectPath& BackgroundImage : LoadingScreenSettings->StartupBackgroundImages_DEPRECATED) {\n\t\t\tUTexture2D* Image = Cast<UTexture2D>(LoadObject<UObject>(NULL, *BackgroundImage.ToString()));\n\t\t\tif (Image) {\n\t\t\t\tLoadingScreenSettings->StartupBackgroundImages.Add(Image);\n\t\t\t}\n\t\t}\n\n\t\tLoadingScreenSettings->DefaultBackgroundImages.Empty();\n\t\tfor (const FSoftObjectPath& BackgroundImage : LoadingScreenSettings->DefaultBackgroundImages_DEPRECATED) {\n\t\t\tUTexture2D* Image = Cast<UTexture2D>(LoadObject<UObject>(NULL, *BackgroundImage.ToString()));\n\t\t\tif (Image) {\n\t\t\t\tLoadingScreenSettings->DefaultBackgroundImages.Add(Image);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 52.582777056875905}]}
{"instance_id": "4ffd56e2a326", "generation_result": [{"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\t// Get the text object\n\tUTextRenderComponent* Text = Cast<UTextRenderComponent>(GetOwner()->GetComponentByClass(UTextRenderComponent::StaticClass()));\n\tif (Text) {\n\t\t// Get the text's current alpha value\n\t\tfloat Alpha = Text->GetOpacity();\n\n\t\t// Calculate the new alpha value\n\t\tAlpha += InDeltaTime * AlphaChangeRate;\n\n\t\t// Reverse the animation direction if the alpha is at either extreme\n\t\tif (Alpha > MaxAlpha) {\n\t\t\tAlphaChangeRate = -AlphaChangeRate;\n\t\t}\n\t\tif (Alpha < MinAlpha) {\n\t\t\tAlphaChangeRate = -AlphaChangeRate;\n\t\t}\n\n\t\t// Set the text's new alpha value\n\t\tText->SetOpacity(Alpha);\n\t}\n\n\t// Return that the animation should continue\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 35.38509828988573}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\tif (InCurrentTime < FadeInStartTime) {\n\t\treturn EActiveTimerReturnType::Continue;\n\t}\n\n\t// Update the alpha value based on the elapsed time and the animation speed\n\tfloat Alpha = (InCurrentTime - FadeInStartTime) * AnimationSpeed;\n\tif (Alpha > 1.0f) {\n\t\tAlpha = 2.0f - Alpha;\n\t}\n\n\t// Update the alpha value of the text\n\tTextRenderComponent->SetRelativeScale3D(FVector(1.0f, 1.0f, Alpha));\n\n\t// Reverse the animation direction when the alpha value reaches either extreme\n\tif (Alpha > 1.0f || Alpha < 0.0f) {\n\t\tAnimationSpeed *= -1.0f;\n\t}\n\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 35.85748797789446}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\tif (InCurrentTime - LastTime > 1.0 / AnimationSpeed) {\n\t\tLastTime = InCurrentTime;\n\t\tif (Alpha < 1.0) {\n\t\t\tAlpha += 1.0 / AnimationSpeed;\n\t\t}\n\t\telse {\n\t\t\tAlpha -= 1.0 / AnimationSpeed;\n\t\t}\n\t\tif (Alpha < 0.0) {\n\t\t\tAlpha = 0.0;\n\t\t}\n\t\tif (Alpha > 1.0) {\n\t\t\tAlpha = 1.0;\n\t\t}\n\t\tLoadingCompleteText->SetOpacity(Alpha);\n\t\treturn EActiveTimerReturnType::Continue;\n\t}\n\treturn EActiveTimerReturnType::Stop;\n}", "CodeBleu_score": 33.397790917670434}]}
{"instance_id": "7420af124c78", "generation_result": [{"code": "bool FRaceAwaiter::await_ready(){\n\t\tData->Lock.lock();\n\tbool ready = Data->Index != -1;\n\tData->Lock.unlock();\n\treturn ready;\n}", "CodeBleu_score": 51.7139679433825}, {"code": "bool FRaceAwaiter::await_ready(){\n\t\tData->Lock.lock();\n\tbool ready = (Data->Index != -1);\n\tData->Lock.unlock();\n\treturn ready;\n}", "CodeBleu_score": 52.28196108209937}, {"code": "bool FRaceAwaiter::await_ready(){\n\t\tData->Lock.lock();\n\tbool ready = Data->Index != -1;\n\tData->Lock.unlock();\n\treturn ready;\n}", "CodeBleu_score": 51.7139679433825}]}
{"instance_id": "fab9fe81573a", "generation_result": [{"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tFFindPathState* State = static_cast<FFindPathState*>(State);\n\tif (State->QueryID == 0) {\n\t\treturn false;\n\t}\n\tif (bCleanup) {\n\t\tState->QueryID = 0;\n\t\tState->bIsFindingPath = false;\n\t\tState->bIsPathFailed = false;\n\t\tState->bIsPathStale = false;\n\t\tState->bIsPathComplete = false;\n\t\tState->bIsPathPartial = false;\n\t\tState->bIsPathInvalid = false;\n\t\tState->bIsPathPending = false;\n\t\tState->bIsPathFailed = false;\n\t\tState->bIsPathFailedDueToTimeout = false;\n\t\tState->bIsPathFailedDueToBlockedByGame = false;\n\t\tState->bIsPathFailedDueToNoPath = false;\n\t\tState->bIsPathFailedDueToActorTeleported = false;\n\t\tState->bIsPathFailedDueToNoNavigation = false;\n\t\tState->bIsPathFailedDueToNoPathFound = false;\n\t\tState->bIsPathFailedDueToInternalError = false;\n\t\tState->bIsPathFailedDueToUnreachable = false;\n\t\tState->bIsPathFailedDueToBadGoal = false;\n\t\tState->bIsPathFailedDueToBadStart = false;\n\t\tState->bIsPathFailedDueToStraightLine = false;\n\t\tState->bIsPathFailedDueToBadDestination = false;\n\t\tState->bIsPathFailedDueToNoRoomInDestination = false;\n\t\tState->bIsPathFailedDueToUnKnown = false;\n\t\tState->bIsPathFailedDueToNoPathToGoal = false;\n\t\tState->bIsPathFailedDueToNoPathToStart = false;\n\t\tState->bIsPathFailedDueToNoRoomInStart = false;\n\t\tState->bIsPathFailedDueToNoPathToDestination = false;\n\t\tState->bIsPathFailedDueToNoRoomInDestination = false;\n\t\tState->bIsPathFailedDueToNoPathToStart = false;\n\t\tState->bIsPathFailedDueToNoRoomInStart = false;\n\t\tState->bIsPathFailedDueToNoPathToDestination = false;\n\t\tState->bIsPathFailedDueToNoRoomInDestination", "CodeBleu_score": 15.666193837846276}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tFFindPath* This = static_cast<FFindPath*>(State);\n\tif (This->QueryID == INVALID_QUERY_ID) {\n\t\treturn false;\n\t}\n\tif (bCleanup) {\n\t\tThis->AbortAsyncFindPathRequest();\n\t\tThis->QueryID = INVALID_QUERY_ID;\n\t}\n\treturn true;\n}", "CodeBleu_score": 36.20316945469179}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tFFindPathState* StatePtr = static_cast<FFindPathState*>(State);\n\tif (StatePtr->QueryID == INVALID_ACTOR_QUERY_ID) {\n\t\treturn false;\n\t}\n\n\tif (bCleanup) {\n\t\tif (StatePtr->QueryID != INVALID_ACTOR_QUERY_ID) {\n\t\t\tNS1->AbortAsyncFindPathRequest(StatePtr->QueryID);\n\t\t\tStatePtr->QueryID = INVALID_ACTOR_QUERY_ID;\n\t\t}\n\n\t\tif (StatePtr->AsyncResult.IsValid()) {\n\t\t\tStatePtr->AsyncResult.Reset();\n\t\t}\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 38.902710857990094}]}
{"instance_id": "0656af2cb3eb", "generation_result": [{"code": "void AudioListener2D::_notification(int p_what){\n\t\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (!is_inside_tree() || get_tree()->is_editor_hint()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (is_part_of_edited_scene()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (Engine::get_singleton()->is_audio_server_processing()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (AudioServer::get_singleton()->listener_is_active(get_instance_id())) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (AudioServer::get_singleton()->listener_count() == 0) {\n\t\t\t\tAudioServer::get_singleton()->make_listener_current(get_instance_id());\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (!is_inside_tree() || get_tree()->is_editor_hint()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (is_part_of_edited_scene()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (Engine::get_singleton()->is_audio_server_processing()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (AudioServer::get_singleton()->listener_is_active(get_instance_id())) {\n\t\t\t\tAudioServer::get_singleton()->clear_current_listener();\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 48.894659351418724}, {"code": "void AudioListener2D::_notification(int p_what){\n\t\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (Engine::get_singleton()->is_editor_hint() && !is_inside_tree()) {\n\t\t\t\t// Don't make current if we're in the editor and not in the scene tree.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (is_inside_tree() && !is_part_of_edited_scene()) {\n\t\t\t\tif (Engine::get_singleton()->is_editor_hint() && !Engine::get_singleton()->is_audio_active()) {\n\t\t\t\t\t// Don't make current if we're in the editor and audio is paused.\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!is_current()) {\n\t\t\t\t\tmake_current();\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (is_inside_tree() && !is_part_of_edited_scene()) {\n\t\t\t\tif (!is_current()) {\n\t\t\t\t\tclear_current();\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 60.48651067638045}, {"code": "void AudioListener2D::_notification(int p_what){\n\t\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (!is_inside_tree()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (!is_inside_tree()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (is_inside_tree()) {\n\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\t\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\t\t\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\t\t\t\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\t\t\t\t\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (is_inside_tree()) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (is_inside_", "CodeBleu_score": 33.041923757757715}]}
{"instance_id": "9aadd2c91e67", "generation_result": [{"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\n}", "CodeBleu_score": 2.7387813606147358}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\n}", "CodeBleu_score": 2.7387813606147358}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\n}", "CodeBleu_score": 2.7387813606147358}]}
{"instance_id": "56df08c77b69", "generation_result": [{"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\n}", "CodeBleu_score": 3.597182188093078}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\tif (gravity_point != Vector2()) {\n\t\tr_gravity = gravity_point - p_position;\n\t\tr_gravity.normalize();\n\t\tr_gravity *= gravity_distance_scale;\n\t} else {\n\t\tr_gravity = gravity_vector;\n\t}\n}", "CodeBleu_score": 24.852704825674717}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\n}", "CodeBleu_score": 3.597182188093078}]}
{"instance_id": "f8c60f8d0caa", "generation_result": [{"code": "void GodotBody2D::wakeup_neighbours(){\n\t\tfor (int i = 0; i < get_constraint_count(); i++) {\n\t\tGodotBody2D *b = (GodotBody2D *)get_constraint_body_ptr(i);\n\t\tif (b->get_mode() == MODE_RIGID) {\n\t\t\tif (!b->is_active()) {\n\t\t\t\tb->set_active(true);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 33.707373314344345}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\t\t// Iterate through the list of constraints\n\tfor (int i = 0; i < get_constraint_count(); i++) {\n\t\t// Get the constraint\n\t\tConstraint2D *c = get_constraint_ptr(i);\n\t\t// Get the connected body\n\t\tBody2D *b = c->get_body_ptr();\n\t\t// If the body is in rigid mode and not active, activate it\n\t\tif (b->get_mode() == Body2D::MODE_RIGID && !b->is_active()) {\n\t\t\tb->set_active(true);\n\t\t}\n\t}\n}", "CodeBleu_score": 32.44062602922354}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\t\tfor (int i = 0; i < get_body_count(); i++) {\n\t\tif (get_body_ptr(i)->get_mode() == 0 && !get_body_ptr(i)->is_active()) {\n\t\t\tget_body_ptr(i)->set_active(true);\n\t\t}\n\t}\n}", "CodeBleu_score": 19.332740115641986}]}
{"instance_id": "0c6f6c00da9a", "generation_result": [{"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (space) {\n\t\tif (space->area_add_to_monitor_query_list.in_list() == false) {\n\t\t\tspace->area_add_to_monitor_query_list.add(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 35.00404505232706}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (get_space() && !area_add_to_monitor_query_list.in_list()) {\n\t\tarea_add_to_monitor_query_list.add_to_list(get_space());\n\t}\n}", "CodeBleu_score": 55.51572123254602}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (get_space() && !area_add_to_monitor_query_list.in_list()) {\n\t\tarea_add_to_monitor_query_list.add(&get_space()->area_monitor_query_list);\n\t}\n}", "CodeBleu_score": 57.25028670764081}]}
{"instance_id": "efc39df0e3a3", "generation_result": [{"code": "void GodotBody3D::_update_transform_dependent(){\n\t\tif (get_process() && get_physics_process()) {\n\t\treturn;\n\t}\n\n\tTransform transform = get_transform();\n\tBasis inverse_basis = transform.basis.inverse();\n\tVector3 center_of_mass_local = transform.xform(get_center_of_mass());\n\tBasis principal_inertia_axes_local = inverse_basis.transposed().orthonormalized();\n\n\tif (get_mode() == MODE_RIGID) {\n\t\t// Rigid bodies use their center of mass and principal inertia axes as-is.\n\t\tset_inv_inertia_tensor(get_inv_inertia_tensor_local());\n\t\tset_transform(transform);\n\t\tset_center_of_mass(center_of_mass_local);\n\t\tset_principal_inertia_axes(principal_inertia_axes_local);\n\t} else {\n\t\t// In other modes, the center of mass and principal inertia axes are transformed by the inverse inertia tensor.\n\t\tset_inv_inertia_tensor(get_inv_inertia_tensor_world().xform(principal_inertia_axes_local.scaled(get_inv_inertia_tensor_local().determinant())));\n\t\tset_transform(transform);\n\t\tset_center_of_mass(transform.xform(get_center_of_mass()));\n\t\tset_principal_inertia_axes(principal_inertia_axes_local);\n\t}\n}", "CodeBleu_score": 40.39592258943878}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\t\tif (get_process_mode() == PhysicsServer3D::BODY_MODE_KINEMATIC) {\n\t\treturn;\n\t}\n\n\tif (get_process_mode() == PhysicsServer3D::BODY_MODE_STATIC) {\n\t\treturn;\n\t}\n\n\tif (get_process_mode() == PhysicsServer3D::BODY_MODE_RIGID) {\n\t\treturn;\n\t}\n\n\tif (get_process_mode() == PhysicsServer3D::BODY_MODE_CHARACTER) {\n\t\treturn;\n\t}\n\n\tif (get_process_mode() == PhysicsServer3D::BODY_MODE_INACTIVE) {\n\t\treturn;\n\t}\n\n\tif (get_process_mode() == PhysicsServer3D::BODY_MODE_GROUNDED) {\n\t\treturn;\n\t}\n\n\tif (get_process_mode() == PhysicsServer3D::BODY_MODE_MAX) {\n\t\treturn;\n\t}\n\n\tif (get_process_mode() == PhysicsServer3D::BODY_MODE_INVALID) {\n\t\treturn;\n\t}\n\n\tif (get_process_mode() == PhysicsServer3D::BODY_MODE_SOFT_BODY) {\n\t\treturn;\n\t}\n\n\tif (get_process_mode() == PhysicsServer3D::BODY_MODE_RIGID_STATIC) {\n\t\treturn;\n\t}\n\n\tif (get_process_mode() == PhysicsServer3D::BODY_MODE_MAX) {\n\t\treturn;\n\t}\n\n\tif (get_process_mode() == PhysicsServer3D::BODY_MODE_INVALID) {\n\t\treturn;\n\t}\n\n\tif (get_process_mode() == PhysicsServer3D::BODY_MODE_SOFT_BODY) {\n\t\treturn;\n\t}\n\n\tif (get_process_mode() == PhysicsServer3D::BODY_MODE_RIGID_STATIC) {\n\t\treturn;\n\t}\n\n\tif (get_process_mode() == PhysicsServer3D::BODY_MODE_MAX) {\n\t\treturn;\n\t}\n\n\tif (get_process_mode() == PhysicsServer3D::BODY_MODE_INVALID) {\n\t\treturn;\n\t}\n\n\tif (get_process_mode() == PhysicsServer3D::", "CodeBleu_score": 29.061445657901043}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\t\tTransform3D xform = get_transform();\n\tBasis basis = xform.basis;\n\tVector3 scale = basis.get_scale();\n\tbasis.scale(scale.x, scale.y, scale.z);\n\n\tVector3 com = basis.xform(get_mass_center());\n\tBasis inertia_basis = basis.orthonormalized();\n\n\t// Recalculate the inertia tensor\n\tVector3 inertia = get_inertia();\n\tVector3 inertia_tensor[3];\n\tinertia_tensor[0] = inertia_basis.xform(Vector3(inertia.x, 0, 0));\n\tinertia_tensor[1] = inertia_basis.xform(Vector3(0, inertia.y, 0));\n\tinertia_tensor[2] = inertia_basis.xform(Vector3(0, 0, inertia.z));\n\n\t// Recalculate the principal inertia axes\n\tVector3 principal_inertia_axes[3];\n\treal_t trace = inertia_tensor[0].x + inertia_tensor[1].y + inertia_tensor[2].z;\n\tif (trace > 0) {\n\t\treal_t s = Math::sqrt(trace + 1.0) * 2.0;\n\t\tprincipal_inertia_axes[0] = Vector3(\n\t\t\t(inertia_tensor[2].y - inertia_tensor[1].z) / s,\n\t\t\t(inertia_tensor[0].z - inertia_tensor[2].x) / s,\n\t\t\t(inertia_tensor[1].x - inertia_tensor[0].y) / s);\n\t} else {\n\t\tint i = 0;\n\t\tif (inertia_tensor[1].y > inertia_tensor[0].x)\n\t\t\ti = 1;\n\t\tif (inertia_tensor[2].z > inertia_tensor[i][i])\n\t\t\ti = 2;\n\t\tint j = (i + 1) % 3;\n\t\tint k = (j + 1) % 3;\n\t\treal_t s = Math::sqrt(\n\t\t\tinertia_tensor[i][i] - inertia_tensor[", "CodeBleu_score": 38.3067174801155}]}
{"instance_id": "aebafb4094a1", "generation_result": [{"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tif (p_update_mix_time) {\n\t\tmix_time += (p_frames / double(get_mix_rate()));\n\t}\n\n\tAudioServer *as = AudioServer::get_singleton();\n\n\tif (!as)\n\t\treturn;\n\n\tas->audio_server_process(p_frames, p_buffer);\n}", "CodeBleu_score": 57.249270038630875}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tif (p_update_mix_time)\n\t\tmix_time += p_frames / double(sample_rate);\n\tif (audio_server) {\n\t\taudio_server->audio_process(p_frames, p_buffer);\n\t}\n}", "CodeBleu_score": 52.02614388244107}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tif (p_update_mix_time)\n\t\tmix_time += p_frames / double(get_mix_rate());\n\n\tif (AudioServer::get_singleton()) {\n\t\tAudioServer::get_singleton()->audio_server_process(p_frames, p_buffer);\n\t}\n}", "CodeBleu_score": 62.91358727252202}]}
{"instance_id": "160bb23e8010", "generation_result": [{"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\n}", "CodeBleu_score": 3.4490430967074563}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\t// Iterate through the list of feeds to find the specified feed.\n\tfor (int i = 0; i < feeds.size(); i++) {\n\t\t// If the current feed is the specified feed, remove it from the list of feeds.\n\t\tif (feeds[i]->get_id() == p_feed->get_id()) {\n\t\t\tprint_verbose(\"CameraServer::remove_feed() - Removing feed \" + itos(p_feed->get_id()));\n\t\t\tfeeds.remove(i);\n\t\t\t// Emit a signal indicating the feed has been removed.\n\t\t\temit_signal(\"feed_removed\", p_feed->get_id());\n\t\t\t// Return from the function.\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 51.2260620228168}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\n}", "CodeBleu_score": 3.4490430967074563}]}
{"instance_id": "bef3cf110c45", "generation_result": [{"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t\tCCASSERT(action != NULL, \"Argument must be non-nil\");\n\tEaseRateAction *ret = new EaseRateAction();\n\tif (ret->initWithAction(action, rate))\n\t{\n\t\tret->autorelease();\n\t\treturn ret;\n\t}\n\tCC_SAFE_DELETE(ret);\n\treturn NULL;\n}", "CodeBleu_score": 52.511422132507576}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t\tCCASSERT(action != NULL, \"Argument must be non-nil\");\n\tEaseRateAction *ret = new EaseRateAction();\n\tif (ret && ret->initWithAction(action, rate)) {\n\t\tret->autorelease();\n\t\treturn ret;\n\t}\n\tCC_SAFE_DELETE(ret);\n\treturn NULL;\n}", "CodeBleu_score": 57.034536708103346}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t\tCCASSERT(action != NULL, \"Argument must be non-nil\");\n\n\tEaseRateAction *ret = new EaseRateAction();\n\tif (ret && ret->initWithAction(action, rate))\n\t{\n\t\tret->autorelease();\n\t}\n\telse\n\t{\n\t\tCC_SAFE_DELETE(ret);\n\t}\n\n\treturn ret;\n}", "CodeBleu_score": 54.846537076396515}]}
{"instance_id": "97fc6f86ad54", "generation_result": [{"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t\tif (node->getName() == childName) {\n\t\treturn node;\n\t}\n\tfor (auto &child : node->getChildren()) {\n\t\tNode* foundNode = findChildByNameRecursively(child, childName);\n\t\tif (foundNode != nullptr) {\n\t\t\treturn foundNode;\n\t\t}\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 50.01501919818717}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t\tif (node->getName() == childName) {\n\t\treturn node;\n\t}\n\n\tfor (auto &child : node->getChildren()) {\n\t\tNode* foundNode = findChildByNameRecursively(child, childName);\n\t\tif (foundNode) {\n\t\t\treturn foundNode;\n\t\t}\n\t}\n\n\treturn nullptr;\n}", "CodeBleu_score": 50.12852157405745}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t\tif (node->getName() == childName) {\n\t\treturn node;\n\t}\n\tfor (auto &child : node->getChildren()) {\n\t\tauto result = findChildByNameRecursively(child, childName);\n\t\tif (result) {\n\t\t\treturn result;\n\t\t}\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 47.472382473876586}]}
{"instance_id": "5fcbe1fedcd2", "generation_result": [{"code": "void Animate3D::removeFromMap(){\n\t\tif (target) {\n\t\ts_runningAnimates.find(target, [this](Animate3D* a) {\n\t\t\tif (a == this) {\n\t\t\t\ts_runningAnimates.erase(target);\n\t\t\t}\n\t\t});\n\t\ts_fadeInAnimates.find(target, [this](Animate3D* a) {\n\t\t\tif (a == this) {\n\t\t\t\ts_fadeInAnimates.erase(target);\n\t\t\t}\n\t\t});\n\t\ts_fadeOutAnimates.find(target, [this](Animate3D* a) {\n\t\t\tif (a == this) {\n\t\t\t\ts_fadeOutAnimates.erase(target);\n\t\t\t}\n\t\t});\n\t}\n}", "CodeBleu_score": 36.32470942794879}, {"code": "void Animate3D::removeFromMap(){\n\t\tif (s_runningAnimates.find(this) != s_runningAnimates.end()) {\n\t\ts_runningAnimates.erase(s_runningAnimates.find(this));\n\t}\n\tif (s_fadeInAnimates.find(this) != s_fadeInAnimates.end()) {\n\t\ts_fadeInAnimates.erase(s_fadeInAnimates.find(this));\n\t}\n\tif (s_fadeOutAnimates.find(this) != s_fadeOutAnimates.end()) {\n\t\ts_fadeOutAnimates.erase(s_fadeOutAnimates.find(this));\n\t}\n}", "CodeBleu_score": 31.010425282948077}, {"code": "void Animate3D::removeFromMap(){\n\t\tif (m_target != nullptr) {\n\t\t// Search for the current instance in the running animation map and erase it if it exists\n\t\tauto it = s_runningAnimates.find(m_target);\n\t\tif (it != s_runningAnimates.end()) {\n\t\t\ts_runningAnimates.erase(it);\n\t\t}\n\n\t\t// Search for the current instance in the fade-in animation map and erase it if it exists\n\t\tit = s_fadeInAnimates.find(m_target);\n\t\tif (it != s_fadeInAnimates.end()) {\n\t\t\ts_fadeInAnimates.erase(it);\n\t\t}\n\n\t\t// Search for the current instance in the fade-out animation map and erase it if it exists\n\t\tit = s_fadeOutAnimates.find(m_target);\n\t\tif (it != s_fadeOutAnimates.end()) {\n\t\t\ts_fadeOutAnimates.erase(it);\n\t\t}\n\t}\n}", "CodeBleu_score": 58.219619245051945}]}
{"instance_id": "db8d394f7bc4", "generation_result": [{"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t\t// generate a unique key based on the file name and animation name\n\tstd::string key = fileName + animationName;\n\t// check the cache for an existing animation\n\tAnimation3D* animation = Animation3DCache::getInstance()->getAnimation(key);\n\t// if not found, create a new animation\n\tif (!animation) {\n\t\tanimation = new (std::nothrow) Animation3D();\n\t\tif (animation && !animation->initWithFile(fileName, animationName)) {\n\t\t\tCC_SAFE_DELETE(animation);\n\t\t} else {\n\t\t\tanimation->autorelease();\n\t\t}\n\t}\n\treturn animation;\n}", "CodeBleu_score": 51.73576305248828}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t\tstd::string key = fileName + animationName;\n\tAnimation3D* ret = Animation3DCache::getInstance()->getAnimation(key);\n\tif (ret) {\n\t\treturn ret;\n\t}\n\n\tret = new (std::nothrow) Animation3D();\n\tif (ret && !ret->initWithFile(fileName, animationName)) {\n\t\tCC_SAFE_DELETE(ret);\n\t\tret = nullptr;\n\t}\n\n\tif (ret) {\n\t\tret->autorelease();\n\t}\n\n\treturn ret;\n}", "CodeBleu_score": 44.51845426698469}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t\t// Generate a unique key\n\tstd::string key = fileName + animationName;\n\t// Check the cache for an existing animation\n\tAnimation3D* animation = Animation3DCache::getInstance()->getAnimation(key);\n\tif (!animation) {\n\t\t// If not found, initialize a new animation\n\t\tanimation = new (std::nothrow) Animation3D();\n\t\tif (animation && !animation->initWithFile(fileName, animationName)) {\n\t\t\tCC_SAFE_DELETE(animation);\n\t\t}\n\t}\n\treturn animation;\n}", "CodeBleu_score": 47.71770404333978}]}
{"instance_id": "cdf28d98d3ff", "generation_result": [{"code": "void Animation3DCache::removeUnusedAnimation(){\n\t\tstd::map<std::string, Animation3D*>::iterator itor;\n\tfor (itor = _animations.begin(); itor != _animations.end(); itor++) {\n\t\tif (itor->second->getReferenceCount() == 1) {\n\t\t\titor->second->release();\n\t\t\titor = _animations.erase(itor);\n\t\t}\n\t}\n}", "CodeBleu_score": 73.02878921799272}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\t\tstd::map<std::string, Animation3D*>::iterator itor;\n\tfor (itor = _animations.begin(); itor != _animations.end(); itor++) {\n\t\tAnimation3D* animation = itor->second;\n\t\tif (animation->getReferenceCount() == 1) {\n\t\t\tanimation->release();\n\t\t\titor = _animations.erase(itor);\n\t\t\titor--;\n\t\t}\n\t}\n}", "CodeBleu_score": 59.013579453814536}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\t\tstd::map<std::string, Animation3D*>::iterator itor;\n\tfor (itor = _animations.begin(); itor != _animations.end(); ++itor) {\n\t\tif (itor->second->getReferenceCount() == 1) {\n\t\t\titor->second->release();\n\t\t\titor = _animations.erase(itor);\n\t\t}\n\t}\n}", "CodeBleu_score": 73.15160764560196}]}
{"instance_id": "de7926871eb8", "generation_result": [{"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\tBillBoard *ret = new BillBoard();\nif (ret->initWithTexture(texture, mode)) {\nret->autorelease();\n} else {\nCC_SAFE_DELETE(ret);\n}\nreturn ret;\n}", "CodeBleu_score": 42.744430820656376}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\tBillBoard *billboard = new BillBoard();\nif (billboard && billboard->initWithTexture(texture, mode))\n{\nbillboard->autorelease();\nreturn billboard;\n}\nCC_SAFE_DELETE(billboard);\nreturn nullptr;\n}", "CodeBleu_score": 67.91385207526126}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\tBillBoard *billboard = BillBoard::create();\nif (billboard && billboard->initWithTexture(texture, mode)) {\nbillboard->autorelease();\nreturn billboard;\n}\nCC_SAFE_DELETE(billboard);\nreturn nullptr;\n}", "CodeBleu_score": 64.95398519074578}]}
{"instance_id": "eef1c2206d68", "generation_result": [{"code": "bool Bundle3D::load(const std::string& path){\n\t\tif (path.empty() || _path == path) return true;\n\t_path = path;\n\t_name = FileUtils::getInstance()->getFileNameWithoutExtension(_path);\n\t_name = _name.substr(0, _name.find_last_of(\".\"));\n\t_name = _name.substr(0, _name.find_last_of(\".\"));\n\tstd::string ext = FileUtils::getInstance()->getFileExtension(_path);\n\tif (ext == \".c3t\") {\n\t\tif (!loadJson(path)) {\n\t\t\t_path.clear();\n\t\t\treturn false;\n\t\t}\n\t}\n\telse if (ext == \".c3b\") {\n\t\tif (!loadBinary(path)) {\n\t\t\t_path.clear();\n\t\t\treturn false;\n\t\t}\n\t}\n\telse {\n\t\tCCLOG(\"cocos2d: Bundle3D: Invalid file format: %s\", path.c_str());\n\t\t_path.clear();\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 55.00729012966723}, {"code": "bool Bundle3D::load(const std::string& path){\n\t\tif (path.empty() || _path == path) {\n\t\treturn false;\n\t}\n\n\t_path = path;\n\n\tconst auto extension = FileUtils::getInstance()->getFileExtension(_path);\n\tif (extension == \".c3t\") {\n\t\treturn loadJson();\n\t}\n\telse if (extension == \".c3b\") {\n\t\treturn loadBinary();\n\t}\n\telse {\n\t\tCCLOGWARN(\"Bundle3D: Unknown file format: %s\", extension.c_str());\n\t\t_path = \"\";\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 36.7008374075701}, {"code": "bool Bundle3D::load(const std::string& path){\n\t\tif (path.empty() || _path == path) {\n\t\treturn true;\n\t}\n\n\t_path = path;\n\n\tstd::string extension = FileUtils::getInstance()->getFileExtension(_path);\n\tif (extension == \".c3t\") {\n\t\tif (!loadJson()) {\n\t\t\t_path.clear();\n\t\t\treturn false;\n\t\t}\n\t}\n\telse if (extension == \".c3b\") {\n\t\tif (!loadBinary()) {\n\t\t\t_path.clear();\n\t\t\treturn false;\n\t\t}\n\t}\n\telse {\n\t\tCCLOG(\"cocos2d: Bundle3D: Invalid format: %s\", _path.c_str());\n\t\t_path.clear();\n\t\treturn false;\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 38.22099253081974}]}
{"instance_id": "37b6acea681e", "generation_result": [{"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t\tskindata->resetData();\n\tif (skindata->isBinary()) {\n\t\treturn loadSkinDataBinary(skindata);\n\t}\n\telse {\n\t\treturn loadSkinDataJson(skindata);\n\t}\n}", "CodeBleu_score": 80.72702212204894}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t\tif (!skindata) {\n\t\treturn false;\n\t}\n\tskindata->resetData();\n\tif (m_skinDataFormat == SkinDataFormat::Binary) {\n\t\treturn loadSkinDataBinary(id, skindata);\n\t}\n\telse {\n\t\treturn loadSkinDataJson(id, skindata);\n\t}\n}", "CodeBleu_score": 56.60965159192428}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t\tif (skindata == NULL) {\n\t\treturn false;\n\t}\n\n\tskindata->resetData();\n\n\tstd::string filename = skindata->getFilename();\n\n\tif (filename.empty()) {\n\t\treturn false;\n\t}\n\n\tbool binary = false;\n\tstd::string extension = filename.substr(filename.find_last_of(\".\") + 1);\n\n\tif (extension == \"bin\") {\n\t\tbinary = true;\n\t}\n\n\tif (binary) {\n\t\treturn loadSkinDataBinary(filename, skindata);\n\t} else {\n\t\treturn loadSkinDataJson(filename, skindata);\n\t}\n}", "CodeBleu_score": 51.14108810136413}]}
{"instance_id": "97449825e4ef", "generation_result": [{"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t\tAudioDecoder* thiz = (AudioDecoder*)datasource;\n\tsize_t bytesToRead = size * nmemb;\n\tsize_t bytesRead = 0;\n\tif (bytesToRead > thiz->_fileData.getSize() - thiz->_fileData.getPosition()) {\n\t\tbytesToRead = thiz->_fileData.getSize() - thiz->_fileData.getPosition();\n\t}\n\tif (bytesToRead > 0) {\n\t\tmemcpy(ptr, thiz->_fileData.getBytes() + thiz->_fileData.getPosition(), bytesToRead);\n\t\tthiz->_fileData.setPosition(thiz->_fileData.getPosition() + bytesToRead);\n\t\tbytesRead = bytesToRead;\n\t}\n\treturn bytesRead;\n}", "CodeBleu_score": 56.31480628511616}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t\tsize_t bytesToRead = size * nmemb;\n\tAudioDecoder* thiz = (AudioDecoder*)datasource;\n\tsize_t bytesRead = 0;\n\tif (bytesToRead > thiz->_fileData.getSize() - thiz->_fileData.getPosition()) {\n\t\tbytesToRead = thiz->_fileData.getSize() - thiz->_fileData.getPosition();\n\t}\n\tif (bytesToRead > 0) {\n\t\tmemcpy(ptr, thiz->_fileData.getBytes() + thiz->_fileData.getPosition(), bytesToRead);\n\t\tthiz->_fileData.setPosition(thiz->_fileData.getPosition() + bytesToRead);\n\t\tbytesRead = bytesToRead;\n\t}\n\treturn bytesRead;\n}", "CodeBleu_score": 55.32925311566018}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t\tAudioDecoder* thiz = (AudioDecoder*)datasource;\n\tsize_t bytesToRead = thiz->_fileData.getSize() - thiz->_fileData.getPosition();\n\tsize_t bytesToReadNow = std::min(bytesToRead, size * nmemb);\n\tmemcpy(ptr, thiz->_fileData.getBytes(bytesToReadNow), bytesToReadNow);\n\tthiz->_fileData.setPosition(thiz->_fileData.getPosition() + bytesToReadNow);\n\treturn bytesToReadNow;\n}", "CodeBleu_score": 52.31599941879652}]}
{"instance_id": "0f4db164ba5d", "generation_result": [{"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\tpcmBuffer = std::make_shared<std::vector<char>>(4096);\npcmBuffer->reserve(4096);\n}", "CodeBleu_score": 43.905406804246496}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\tpcmBuffer = std::make_shared<std::vector<char>>(4096);\npcmBuffer->reserve(4096);\n}", "CodeBleu_score": 43.905406804246496}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t\npcmBuffer = std::make_shared<std::vector<char>>(4096);\npcmBuffer->reserve(4096);\n}", "CodeBleu_score": 43.82634439185288}]}
{"instance_id": "0f88663615c6", "generation_result": [{"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t\tstd::unique_lock<std::mutex> lock(sDownloaderMapMutex);\n\tauto it = sDownloaderMap.find(id);\n\treturn it == sDownloaderMap.end() ? nullptr : it->second;\n}", "CodeBleu_score": 56.35525572634983}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t\tcocos2d::Mutex::ScopedLock lock(sDownloaderMapMutex);\n\tauto it = sDownloaderMap.find(id);\n\tif (it != sDownloaderMap.end()) {\n\t\treturn it->second;\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 57.0467811308662}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t\tstd::lock_guard<std::mutex> lock(sDownloaderMapMutex);\n\tauto it = sDownloaderMap.find(id);\n\tif (it != sDownloaderMap.end()) {\n\t\treturn it->second;\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 62.71152480938629}]}
{"instance_id": "a5aafaaa944c", "generation_result": [{"code": "function M.playMusic(filename, isLoop)\n\t\tif isLoop ~= nil then\n\t\tcc.SimpleAudioEngine:getInstance():playMusic(filename, isLoop)\n\telse\n\t\tcc.SimpleAudioEngine:getInstance():playMusic(filename)\n\tend", "CodeBleu_score": 46.47510779382264}, {"code": "function M.playMusic(filename, isLoop)\n\t\tcc.SimpleAudioEngine:getInstance():playMusic(filename, isLoop)", "CodeBleu_score": 30.627005567523202}, {"code": "function M.playMusic(filename, isLoop)\n\t\tcc.SimpleAudioEngine:getInstance():playMusic(filename, isLoop)", "CodeBleu_score": 30.627005567523202}]}
{"instance_id": "16f2ad4bb4e8", "generation_result": [{"code": "function ccs.TriggerObj:detect()\n\t\nend\n", "CodeBleu_score": 4.586004115149374}, {"code": "function ccs.TriggerObj:detect()\n\t\nend\n", "CodeBleu_score": 4.586004115149374}, {"code": "function ccs.TriggerObj:detect()\n\t\nend\n\n", "CodeBleu_score": 4.586004115149374}]}
{"instance_id": "e73b10418cb6", "generation_result": [{"code": "function ccs.TriggerObj:removeAll()\n\t\nend\n", "CodeBleu_score": 4.959221278886332}, {"code": "function ccs.TriggerObj:removeAll()\n\t\tfor i = 1, self.conditions:size() do\n\t\tlocal c = self.conditions:objectAtIndex(i)\n\t\tif c.removeAll then\n\t\t\tc:removeAll()\n\t\tend\n\tend\n\tfor i = 1, self.actions:size() do\n\t\tlocal a = self.actions:objectAtIndex(i)\n\t\tif a.removeAll then\n\t\t\ta:removeAll()\n\t\tend\n\tend\n\tself.conditions:removeAllObjects()\n\tself.actions:removeAllObjects()", "CodeBleu_score": 37.774098060790486}, {"code": "function ccs.TriggerObj:removeAll()\n\t\treturn self._remove_all()", "CodeBleu_score": 5.803711267791289}]}
{"instance_id": "d5a1333d794d", "generation_result": [{"code": "function BasicCollider:hurtEffect(target)\n\t\tlocal hurtEffect = cc.BillBoard:create(\"hurtAnimation.png\")\n\tlocal hurtAnimation = self.animationCache:getAnimation(\"hurtAnimation\")\n\tlocal hurtAction = cc.Animate:create(hurtAnimation)\n\tlocal hurtRemove = cc.RemoveSelf:create()\n\tlocal hurtSequence = cc.Sequence:create(hurtAction, hurtRemove, nil)\n\thurtEffect:setCameraMask(1)\n\thurtEffect:setScale(0.1)\n\thurtEffect:setPosition3D(cc.V3(target:getPosition3D()))\n\ttarget:addChild(hurtEffect)\n\thurtEffect:runAction(hurtSequence)", "CodeBleu_score": 57.98377453954448}, {"code": "function BasicCollider:hurtEffect(target)\n\t\tlocal hurtEffect = cc.BillBoard:create(\"hurtAnimation.png\")\n\thurtEffect:setCameraMask(1)\n\tlocal animation = self.animationCache:getAnimation(\"hurtAnimation\")\n\tlocal animate = cc.Animate:create(animation)\n\tlocal removeSelf = cc.RemoveSelf:create(true)\n\tlocal sequence = cc.Sequence:create(animate, removeSelf, nil)\n\thurtEffect:runAction(sequence)\n\thurtEffect:setPosition3D(target:getPosition3D())\n\ttarget:addChild(hurtEffect)\n\thurtEffect:setScale(0.2)", "CodeBleu_score": 53.082622160699}, {"code": "function BasicCollider:hurtEffect(target)\n\t\tlocal hurtEffect = cc.BillBoard:create(\"res/hurtAnimation.png\")\n\tlocal hurtAnimation = self.animationCache:getAnimation(\"hurtAnimation\")\n\thurtEffect:setCameraMask(cc.CameraFlag.USER1)\n\thurtEffect:setScale(0.5)\n\thurtEffect:setPosition3D(target:getPosition3D())\n\thurtEffect:runAction(cc.Sequence:create(cc.Animate:create(hurtAnimation), cc.RemoveSelf:create()))\n\ttarget:addChild(hurtEffect)", "CodeBleu_score": 58.67607328120712}]}
{"instance_id": "f478d7e70ea6", "generation_result": [{"code": "function MageNormalAttack:onTimeOut()\n\t\tself.part1:stopSystem()\n\tself.part2:stopSystem()\n\tlocal seq = cc.Sequence:create(cc.DelayTime:create(0.5),cc.CallFunc:create(self.removeFromParent),nil)\n\tself:runAction(seq)\n\tself.part3 = cc.ParticleSystemQuad:create(\"particles/magic/magic_001.plist\")\n\tself.part3:setAnchorPoint(0,0)\n\tself.part3:setPosition(cc.p(0,0))\n\tself.part3:setScale(0.1)\n\tself.part3:setGlobalZOrder(2)\n\tself.part3:setTextureWithRect(cc.SpriteFrameCache:getInstance():getSpriteFrame(\"particles/magic/magic_001.png\"))\n\tself.part3:setLife(0.5)\n\tself:addChild(self.part3)\n\tself.part3:setCameraMask(0x20)\n\tself.part3:setPosVar(cc.p(0,0))\n\tself.part3:setEmissionRate(100)\n\tself.part3:setAngle(0)\n\tself.part3:setStartSizeVar(cc.p(0,0))\n\tself.part3:setEndSizeVar(cc.p(0,0))\n\tself.part3:setTangentialAccelVar(0)\n\tself.part3:setGravity(cc.p(0,0))\n\tself.part3:setRadialAccelVar(0)\n\tself.part3:setStartColor(cc.c3b(255,255,255))\n\tself.part3:setEndColor(cc.c3b(255,255,255))\n\tself.part3:setDuration(-1)\n\tself.part3:setTotalParticles(100)\n\tself.part3:setEmissionRate(0)\n\tself.part3:setTexture(cc.SpriteFrameCache:getInstance():getSpriteFrame(\"particles/magic/magic_001.png\"))\n\tself.part3:setBlendAdditive(true)\n", "CodeBleu_score": 49.977579229759094}, {"code": "function MageNormalAttack:onTimeOut()\n\t\tself.part1:stopSystem()\n\tself.part2:stopSystem()\n\tlocal seq = cc.Sequence:create(cc.DelayTime:create(0.5),cc.RemoveSelf:create())\n\tself:runAction(seq)\n\tself.part3 = cc.ParticleSystemQuad:create(\"magic.plist\")\n\tself:addChild(self.part3,1)\n\tself.part3:setPosition(self:convertToWorldSpace(cc.p(0,0)))\n\tself.part3:setLife(0.5)\n\tself.part3:setTotalParticles(100)\n\tself.part3:setTexture(cc.TextureCache:getInstance():addImage(\"magic.png\"))\n\tself.part3:setStartSizeVar(0.5)\n\tself.part3:setEndSizeVar(0.5)\n\tself.part3:setStartColor(cc.c3b(255,255,255))\n\tself.part3:setEndColor(cc.c3b(255,255,255))\n\tself.part3:setDuration(0.5)\n\tself.part3:setEmissionRate(100)\n\tself.part3:setAngle(0)\n\tself.part3:setAngleVar(360)\n\tself.part3:setGravity(cc.p(0,0))\n\tself.part3:setPosVar(cc.p(0,0))\n\tself.part3:setLifeVar(0.5)\n\tself.part3:setStartSize(0.5)\n\tself.part3:setEndSize(0.5)\n\tself.part3:setStartRadius(0)\n\tself.part3:setEndRadius(0)\n\tself.part3:setRotatePerS(0)\n\tself.part3:setRotatePerVar(0)\n\tself.part3:setSpeed(0)\n\tself.part3:setSpeedVar(0)\n\tself.part3:setTangentialAccel(0)\n\tself.part3:setTangentialAccelVar(0)\n\tself.part3:setRadial", "CodeBleu_score": 46.34765045919661}, {"code": "function MageNormalAttack:onTimeOut()\n\t\tself.part1:stopSystem()\n\tself.part2:stopSystem()\n\tself.seq:removeFromParentAndCleanup(true)\n\tself.seq:runAction(cc.Sequence:create(cc.DelayTime:create(0.5), cc.CallFunc:create(self.removeFromParent, self)))\n\tself.part3 = cc.ParticleSystemQuad:create(\"magic.plist\")\n\tself.part3:setScale(0.3)\n\tself.part3:setPosition(cc.p(self.magicf:getRect().x + self.magicf:getRect().width/2, self.magicf:getRect().y + self.magicf:getRect().height/2))\n\tself.part3:setGlobalZOrder(self.magic:getGlobalZOrder())\n\tself.part3:setCameraMask(self.magic:getCameraMask())\n\tself:addChild(self.part3)\n\tself.part3:setTextureWithRect(self.magicf:getTexture(), cc.rect(0, 0, 128, 128))\n\tself.part3:setLife(0.5)\n\tself.part3:setTotalParticles(100)\n\tself.part3:setDuration(0.5)\n\tself.part3:setEmissionRate(200)\n\tself.part3:setAngle(math.pi)\n\tself.part3:setStartSizeVar(0.5)\n\tself.part3:setEndSizeVar(0.5)\n\tself.part3:setStartColor(cc.c4f(1, 1, 1, 1))\n\tself.part3:setEndColor(cc.c4f(0, 0, 0, 0))\n\tself.part3:setPosVar(cc.p(0, 0))\n\tself.part3:setTangentialAccelVar(0)\n\tself.part3:setRadialAccelVar(0)\n\tself.part3:setAngleVar(math.pi/2)\n\tself.part3:setGravity(cc.p(0, 0))\n\tself.part3:setSpeed(0)", "CodeBleu_score": 48.331550782568996}]}
{"instance_id": "d735c4ea6358", "generation_result": [{"code": "function BattlefieldUI:heroDead(hero)\n\t\tif hero.name == \"Knight\" then\n\t\tself.KnightAngryClone:setVisible(false)\n\t\tself.KnightAngryFullSignal:setVisible(false)\n\t\tself.KnightAngry:setVisible(false)\n\t\tself.KnightAngry:setShader(cc.GreyShader:create())\n\telseif hero.name == \"Archer\" then\n\t\tself.ArcherAngryClone:setVisible(false)\n\t\tself.ArcherAngryFullSignal:setVisible(false)\n\t\tself.ArcherAngry:setVisible(false)\n\t\tself.ArcherAngry:setShader(cc.GreyShader:create())\n\telseif hero.name == \"Mage\" then\n\t\tself.MageAngryClone:setVisible(false)\n\t\tself.MageAngryFullSignal:setVisible(false)\n\t\tself.MageAngry:setVisible(false)\n\t\tself.MageAngry:setShader(cc.GreyShader:create())\n\tend", "CodeBleu_score": 48.71449621535753}, {"code": "function BattlefieldUI:heroDead(hero)\n\t\tif hero.name == \"Knight\" then\n\t\thero.frame:setVisible(false)\n\t\thero.image:setVisible(false)\n\t\thero.image:addShader(cc.GreyShader:create())\n\t\thero.KnightAngryFullSignal:setVisible(false)\n\t\thero.KnightAngryClone:setVisible(false)\n\telseif hero.name == \"Mage\" then\n\t\thero.frame:setVisible(false)\n\t\thero.image:setVisible(false)\n\t\thero.image:addShader(cc.GreyShader:create())\n\t\thero.MageAngryFullSignal:setVisible(false)\n\t\thero.MageAngryClone:setVisible(false)\n\telseif hero.name == \"Archer\" then\n\t\thero.frame:setVisible(false)\n\t\thero.image:setVisible(false)\n\t\thero.image:addShader(cc.GreyShader:create())\n\t\thero.ArcherAngryFullSignal:setVisible(false)\n\t\thero.ArcherAngryClone:setVisible(false)\n\tend", "CodeBleu_score": 47.88913682847132}, {"code": "function BattlefieldUI:heroDead(hero)\n\t\tif hero == \"Knight\" then \n\t\tself.KnightAngryFullSignal:setVisible(false)\n\t\tself.KnightAngryClone:setVisible(false)\n\t\tself.KnightAngry:setShader(cc.GreyShader:create())\n\telseif hero == \"Mage\" then \n\t\tself.MageAngryFullSignal:setVisible(false)\n\t\tself.MageAngryClone:setVisible(false)\n\t\tself.MageAngry:setShader(cc.GreyShader:create())\n\telseif hero == \"Archer\" then \n\t\tself.ArcherAngryFullSignal:setVisible(false)\n\t\tself.ArcherAngryClone:setVisible(false)\n\t\tself.ArcherAngry:setShader(cc.GreyShader:create())\n\tend ", "CodeBleu_score": 44.469796708428746}]}
{"instance_id": "009f167d3ab2", "generation_result": [{"code": "local function moveCamera(dt)\n\t\nend\n", "CodeBleu_score": 0.2515050076448044}, {"code": "local function moveCamera(dt)\n\t\tif not camera then return end\n\tlocal heroes = getHeroes()\n\tlocal focusPoint = getFocusPointOfHeros(heroes)\n\tif camera.specialTarget then\n\t\tlocal target = camera.specialTarget\n\t\tlocal pos = camera:getPosition()\n\t\tlocal posTarget = target:getPosition()\n\t\tlocal posDiff = posTarget - pos\n\t\tlocal posDiffLen = posDiff:len()\n\t\tif posDiffLen > 0 then\n\t\t\tposDiff = posDiff:normalize()\n\t\t\tposDiff = posDiff * camera.specialTargetDistance\n\t\t\tposDiff = posDiff + posTarget\n\t\t\tposDiff = cc.p(posDiff.x, posDiff.y)\n\t\t\tpos = cc.pLerp(pos, posDiff, dt * camera.specialTargetDistanceLerpSpeed)\n\t\tend\n\t\tcamera:setPosition(pos)\n\t\tcamera:lookAt(target)\n\telse\n\t\tif focusPoint then\n\t\t\tlocal pos = camera:getPosition()\n\t\t\tlocal posTarget = focusPoint\n\t\t\tlocal posDiff = posTarget - pos\n\t\t\tlocal posDiffLen = posDiff:len()\n\t\t\tif posDiffLen > 0 then\n\t\t\t\tposDiff = posDiff:normalize()\n\t\t\t\tposDiff = posDiff * camera.heroFocusDistance\n\t\t\t\tposDiff = posDiff + posTarget\n\t\t\t\tposDiff = cc.p(posDiff.x, posDiff.y)\n\t\t\t\tpos = cc.pLerp(pos, posDiff, dt * camera.heroFocusDistanceLerpSpeed)\n\t\t\tend\n\t\t\tcamera:setPosition(pos)\n\t\t\tcamera:lookAt(focusPoint)\n\t\tend\n\tend", "CodeBleu_score": 42.08441398917549}, {"code": "local function moveCamera(dt)\n\t\tif cameraMode == 1 then\n\t\tlocal target = cameraTargets[cameraTargetIndex]\n\t\tlocal targetPos = target.position\n\t\tlocal targetRot = target.rotation\n\t\tlocal targetZoom = target.zoom\n\t\tlocal targetZoomSpeed = target.zoomSpeed\n\t\tlocal targetZoomMin = target.zoomMin\n\t\tlocal targetZoomMax = target.zoomMax\n\t\tlocal targetZoomTime = target.zoomTime\n\t\tlocal targetZoomIn = target.zoomIn\n\t\tlocal targetZoomOut = target.zoomOut\n\t\tlocal targetZoomInTime = target.zoomInTime\n\t\tlocal targetZoomOutTime = target.zoomOutTime\n\t\tlocal targetZoomInDelay = target.zoomInDelay\n\t\tlocal targetZoomOutDelay = target.zoomOutDelay\n\t\tlocal targetZoomInDelayTime = target.zoomInDelayTime\n\t\tlocal targetZoomOutDelayTime = target.zoomOutDelayTime\n\t\tlocal targetZoomInDelayTimer = target.zoomInDelayTimer\n\t\tlocal targetZoomOutDelayTimer = target.zoomOutDelayTimer\n\t\tlocal targetZoomTimer = target.zoomTimer\n\t\tlocal targetZoomInTimeTimer = target.zoomInTimeTimer\n\t\tlocal targetZoomOutTimeTimer = target.zoomOutTimeTimer\n\t\tlocal targetZoomInDelayTimer = target.zoomInDelayTimer\n\t\tlocal targetZoomOutDelayTimer = target.zoomOutDelayTimer\n\t\tlocal targetZoomInDelayTimeTimer = target.zoomInDelayTimeTimer\n\t\tlocal targetZoomOutDelayTimeTimer = target.zoomOutDelayTimeTimer\n\t\tlocal targetZoomInDelayTime = target.zoomInDelayTime\n\t\tlocal targetZoomOutDelayTime = target.zoomOutDelayTime\n\t\tlocal targetZoomInDelay = target.zoomInDelay\n\t\tlocal targetZoomOutDelay = target.zoomOutDelay\n\t\tlocal targetZoomIn = target.zoomIn\n\t\tlocal targetZoomOut = target.zoomOut\n\t\tlocal targetZoomInTime = target.zoomInTime\n\t\tlocal targetZoomOutTime = target.zoomOutTime\n\t\tlocal targetZoomMin = target.zoomMin\n\t\tlocal targetZoomMax = target.zoomMax\n\t\tlocal targetZoomSpeed = target.zoomSpeed\n\t\tlocal targetZoomTime = target.zoomTime\n\t\tlocal targetZoomIn = target.zoomIn\n\t\tlocal targetZoomOut = target.zoomOut\n\t\tlocal targetZoomInTime = target.zoomIn", "CodeBleu_score": 23.133814975173937}]}
{"instance_id": "f7f5e7fe1dc2", "generation_result": [{"code": "local function updateParticlePos()\n\t\tfor i, hero in pairs(HeroManager.GetHeroes()) do \n\t\tif hero.effectNode then \n\t\t\thero.effectNode:setPosition(hero:GetAbsOrigin())\n\t\tend\n\tend", "CodeBleu_score": 22.634490705783154}, {"code": "local function updateParticlePos()\n\t\tfor i = 1, HeroManager.GetNumAliveHeroes() do \n\t\tlocal hero = HeroManager.GetHero(i)\n\t\tlocal effectNode = hero._particleManager._effectNode\n\t\tif effectNode then \n\t\t\tlocal pos = hero:GetAbsOrigin()\n\t\t\teffectNode:SetAbsOrigin(pos)\n\t\tend\n\tend", "CodeBleu_score": 38.169460747331286}, {"code": "local function updateParticlePos()\n\t\tfor i, hero in ipairs(HeroManager.getHeroes()) do\n\t\tif hero._effectNode then\n\t\t\thero._effectNode:setPosition(hero:getPos())\n\t\tend\n\tend", "CodeBleu_score": 23.09543463170421}]}
{"instance_id": "77829ef7341e", "generation_result": [{"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t\tlocal hero = self.layer:getChildByTag(self.selectedHeroTag)\n\tlocal race = hero:getRaceType()\n\n\tif race == \"knight\" then\n\t\taudio.play(self.knightAudio)\n\telseif race == \"archer\" then\n\t\taudio.play(self.archerAudio)\n\telseif race == \"mage\" then\n\t\taudio.play(self.mageAudio)\n\tend", "CodeBleu_score": 44.406066892257186}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t\tlocal hero = self.layer:getChildByTag(self.currentHeroTag)\n\tlocal raceType = hero:getRaceType()\n\n\tif raceType == \"knight\" then\n\t\taudio.play(audio.knightRotate)\n\telseif raceType == \"archer\" then\n\t\taudio.play(audio.archerRotate)\n\telseif raceType == \"mage\" then\n\t\taudio.play(audio.mageRotate)\n\tend", "CodeBleu_score": 43.277203021338586}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t\tlocal hero = self.layer:getChildByTag(self.selectedHeroTag)\n\tlocal raceType = hero:getRaceType()\n\tif raceType == \"knight\" then\n\t\taudio.play(audio.knightRotate)\n\telseif raceType == \"mage\" then\n\t\taudio.play(audio.mageRotate)\n\telseif raceType == \"archer\" then\n\t\taudio.play(audio.archerRotate)\n\tend", "CodeBleu_score": 43.307212824167834}]}
{"instance_id": "2b35fdb15a13", "generation_result": [{"code": "function GameMaster:AddHeros()\n\t\tlocal knight = Knight:create()\n\tlocal mage = Mage:create()\n\tlocal archer = Archer:create()\n\t\n\tknight:setPosition(400, 300)\n\tmage:setPosition(300, 300)\n\tarcher:setPosition(200, 300)\n\t\n\tcurrentLayer:addChild(knight)\n\tcurrentLayer:addChild(mage)\n\tcurrentLayer:addChild(archer)\n\t\n\tknight:idleMode()\n\tmage:idleMode()\n\tarcher:idleMode()\n\t\n\tHeroManager:pushlast(knight)\n\tHeroManager:pushlast(mage)\n\tHeroManager:pushlast(archer)", "CodeBleu_score": 58.29972729382551}, {"code": "function GameMaster:AddHeros()\n\t\tlocal knight = Knight:create()\n\tlocal mage = Mage:create()\n\tlocal archer = Archer:create()\n\n\tknight:setPosition(300, 200)\n\tmage:setPosition(200, 200)\n\tarcher:setPosition(100, 200)\n\n\tcurrentLayer:addChild(knight)\n\tcurrentLayer:addChild(mage)\n\tcurrentLayer:addChild(archer)\n\n\tknight:idleMode()\n\tmage:idleMode()\n\tarcher:idleMode()\n\n\tHeroManager:pushlast(knight)\n\tHeroManager:pushlast(mage)\n\tHeroManager:pushlast(archer)", "CodeBleu_score": 58.33415193064532}, {"code": "function GameMaster:AddHeros()\n\t\tlocal knight = Knight:create()\n\tlocal mage = Mage:create()\n\tlocal archer = Archer:create()\n\tlocal heroes = {knight, mage, archer}\n\tlocal heroPositions = {Vector2(25, 25), Vector2(40, 25), Vector2(55, 25)}\n\tlocal heroManager = HeroManager()\n\tfor i, hero in ipairs(heroes) do\n\t\thero:setPosition(heroPositions[i])\n\t\tcurrentLayer:addChild(hero)\n\t\thero:idleMode()\n\t\theroManager:pushLast(hero)\n\tend\n\treturn heroManager", "CodeBleu_score": 47.723153923177684}]}
{"instance_id": "cdfbc82ff3cd", "generation_result": [{"code": "function GameMaster:showBoss()\n\t\tlocal newBoss = Rat()\n\tnewBoss.cameraMask = 1\n\tnewBoss:setPosition(Vector2(100, 100))\n\tnewBoss:setFacingDirection(FacingDirection.RIGHT)\n\tnewBoss:setAIEnabled(false)\n\tnewBoss:move(Vector2(100, 100), 100, 200)\n\tnewBoss:move(Vector2(100, 100), 100, 200)\n\tnewBoss:move(Vector2(100, 100), 100, 200)\n\tnewBoss:move(Vector2(100, 100), 100, 200)\n\tnewBoss:move(Vector2(100, 100), 100, 200)\n\tnewBoss:move(Vector2(100, 100), 100, 200)\n\tnewBoss:move(Vector2(100, 100), 100, 200)\n\tnewBoss:move(Vector2(100, 100), 100, 200)\n\tnewBoss:move(Vector2(100, 100), 100, 200)\n\tnewBoss:move(Vector2(100, 100), 100, 200)\n\tnewBoss:move(Vector2(100, 100), 100, 200)\n\tnewBoss:move(Vector2(100, 100), 100, 200)\n\tnewBoss:move(Vector2(100, 100), 100, 200)\n\tnewBoss:move(Vector2(100, 100), 100, 200)\n\tnewBoss:move(Vector2(100, 100), 100, 200)\n\tnewBoss:move(Vector2(100, ", "CodeBleu_score": 27.747482433818494}, {"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat()\n\tboss.cameraMask = 1\n\tboss.layer = self.currentLayer\n\tboss.position = self.currentLayer.spawnPoint\n\tboss.facingDirection = -1\n\tboss.aiEnabled = false\n\tboss:bounceOut()\n\tboss.aiEnabled = true\n\tself.currentLayer.monsterManager:add(boss)", "CodeBleu_score": 29.5632801521558}, {"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat()\n\tboss.mask = MASK_MONSTER\n\tboss.x = 120\n\tboss.y = 120\n\tboss.scale = 1.0\n\tboss.facing = RIGHT\n\tboss.isAIEnabled = false\n\tboss:setAnimation(ANIMATION_BOUNCING)\n\tboss:setAnimationSpeed(0.5)\n\tboss:setAnimationLooping(true)\n\tboss:setAnimationPaused(true)\n\tself.currentLayer:addObject(boss)\n\tself.currentLayer:setCameraMask(MASK_MONSTER)\n\tself.currentLayer:setCameraFocus(boss)\n\tself.currentLayer:setCameraFocusEnabled(true)\n\tself.currentLayer:setCameraFocusZoom(1.0)\n\tself:moveBoss(boss, 100, 100, 100, 100)\n\tself:moveBoss(boss, 100, 100, 100, 100)\n\tself:moveBoss(boss, 100, 100, 100, 100)\n\tself:moveBoss(boss, 100, 100, 100, 100)\n\tself:moveBoss(boss, 100, 100, 100, 100)\n\tself:moveBoss(boss, 100, 100, 100, 100)\n\tself:moveBoss(boss, 100, 100, 100, 100)\n\tself:moveBoss(boss, 100, 100, 100, 100)\n\tself:moveBoss(boss, 100, 100, 100, 100)\n\tself:moveBoss(boss, 100, 100, 100, 100)\n\tself:moveBoss(boss, 100, 100, 100, 100)\n\tself:moveBoss(boss, 10", "CodeBleu_score": 38.60669776857424}]}
{"instance_id": "fa7b402853bb", "generation_result": [{"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal animation = cc.Animation3D:create(file)\n\tlocal animate = cc.Animate3D:create(animation, begin, finish)\n\tanimate:setSpeed(speed)\n\tanimate:retain()\n\treturn animate", "CodeBleu_score": 58.106581541073375}, {"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal animation = cc.Animation3D:create(file)\n\tlocal animate = cc.Animate3D:create(animation, begin, finish)\n\tanimate:setSpeed(speed)\n\tanimate:retain()\n\treturn animate", "CodeBleu_score": 58.106581541073375}, {"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal animation = cc.Animation3D:create(file)\n\tlocal animate = cc.Animate3D:create(animation, begin, finish)\n\tanimate:setSpeed(speed)\n\tanimate:retain()\n\treturn animate", "CodeBleu_score": 58.106581541073375}]}
{"instance_id": "0725f2413b6b", "generation_result": [{"code": "function removeAll(table)\n\t\tfor i in table do \n\t\ttable.remove(table,i)\n\tend", "CodeBleu_score": 26.153030121645187}, {"code": "function removeAll(table)\n\t\tfor k,v in pairs(table) do \n\t\ttable[k]=nil\n\tend", "CodeBleu_score": 33.219445078225405}, {"code": "function removeAll(table)\n\t\tfor i,v in pairs(table) do \n\t\ttable[i] = nil \n\tend ", "CodeBleu_score": 34.82747867180886}]}
{"instance_id": "526d10bb37bb", "generation_result": [{"code": "function delayExecute(target, func, delay)\n\t\tlocal seq = cc.Sequence:create(cc.DelayTime:create(delay), func)\n\ttarget:runAction(seq)", "CodeBleu_score": 50.85493859234196}, {"code": "function delayExecute(target, func, delay)\n\t\tlocal seq = cc.Sequence:create(cc.DelayTime:create(delay), func)\n\ttarget:runAction(seq)", "CodeBleu_score": 50.85493859234196}, {"code": "function delayExecute(target, func, delay)\n\t\tlocal delayAction = cc.DelayTime:create(delay)\n\tlocal callAction = cc.CallFunc:create(func)\n\tlocal seq = cc.Sequence:create(delayAction, callAction, nil)\n\ttarget:runAction(seq)", "CodeBleu_score": 57.6877562251489}]}
{"instance_id": "3b277bd3d0d0", "generation_result": [{"code": "function LoadingScene:addLoadingText(layer)\n\t\tlocal font = \"Marker Felt\"\n\tlocal fontSize = 64\n\tlocal x = display.contentCenterX\n\tlocal y = display.contentCenterY - 100\n\tlocal y_increment = 70\n\tlocal loadingText = {\n\t\tlayer:addChild(cc.Label:createWithTTF(\"Loading...\", font, fontSize)),\n\t\tlayer:addChild(cc.Label:createWithTTF(\"0%\", font, fontSize)),\n\t\tlayer:addChild(cc.Label:createWithTTF(\"25%\", font, fontSize)),\n\t\tlayer:addChild(cc.Label:createWithTTF(\"50%\", font, fontSize)),\n\t\tlayer:addChild(cc.Label:createWithTTF(\"75%\", font, fontSize)),\n\t\tlayer:addChild(cc.Label:createWithTTF(\"100%\", font, fontSize))\n\t}\n\n\tfor i, label in pairs(loadingText) do\n\t\tlabel:setPosition(x, y)\n\t\ty = y + y_increment\n\tend\n\n\tself._loading = loadingText", "CodeBleu_score": 35.02676899374683}, {"code": "function LoadingScene:addLoadingText(layer)\n\t\tlocal font = \"Arial\"\n\tlocal fontSize = 24\n\tlocal fontColor = cc.c4b(255, 255, 255, 255)\n\tlocal x = display.contentCenterX\n\tlocal y = display.contentCenterY\n\tlocal loadingText = {}\n\tlocal loadingTextCount = 4\n\tlocal textInterval = 0.5\n\tlocal textIntervalCounter = 0\n\tfor i = 1, loadingTextCount do\n\t\tlocal label = cc.Label:createWithTTF(string.format(\"Loading %d / %d\", i, loadingTextCount), font, fontSize)\n\t\tlabel:setPosition(x, y)\n\t\tlabel:setTextColor(fontColor)\n\t\tlabel.tag = i\n\t\tlayer:addChild(label)\n\t\ttable.insert(loadingText, label)\n\tend\n\tself._loading = loadingText", "CodeBleu_score": 34.390329855180454}, {"code": "function LoadingScene:addLoadingText(layer)\n\t\tlocal loadingText = cc.Label:createWithTTF(\"Loading...\", \"fonts/Marker Felt.ttf\", 24)\n\tloadingText:setPosition(cc.p(self._width/2, self._height/2))\n\tloadingText:setAnchorPoint(cc.p(0.5, 0.5))\n\tlayer:addChild(loadingText)\n\tself._loading = { loadingText }", "CodeBleu_score": 23.024471431274495}]}
{"instance_id": "68250ae97644", "generation_result": [{"code": "function MainMenuScene.create()\n\t\tlocal scene = cc.Scene:create()\n\tlocal layer = MainMenuLayer.create()\n\tscene:addChild(layer)\n\treturn scene", "CodeBleu_score": 60.32233247160328}, {"code": "function MainMenuScene.create()\n\t\tlocal scene = cc.Scene:create()\n\tlocal layer = MainMenuLayer.new()\n\tscene:addChild(layer)\n\treturn scene", "CodeBleu_score": 60.9040472154898}, {"code": "function MainMenuScene.create()\n\t\tlocal scene = cc.Scene:create()\n\tlocal layer = MainMenuLayer.create()\n\tscene:addChild(layer)\n\treturn scene", "CodeBleu_score": 60.32233247160328}]}
{"instance_id": "81470efbb6ff", "generation_result": [{"code": "local function collision(object)\n\n\t\t--Check for collisions between the given object and all alive heroes.\n\tfor i, hero in pairs(HeroManager.heroes) do\n\t\tif object.id ~= hero.id and hero.alive then\n\t\t\tif object.x + object.width >= hero.x and object.x <= hero.x + hero.width and object.y + object.height >= hero.y and object.y <= hero.y + hero.height then\n\t\t\t\tsolveCollision(object, hero)\n\t\t\tend\n\t\tend\n\tend\n \n\t--Check for collisions between the given object and all alive monsters.\n\tfor i, monster in pairs(MonsterManager.monsters) do\n\t\tif object.id ~= monster.id and monster.alive then\n\t\t\tif object.x + object.width >= monster.x and object.x <= monster.x + monster.width and object.y + object.height >= monster.y and object.y <= monster.y + monster.height then\n\t\t\t\tsolveCollision(object, monster)\n\t\t\tend\n\t\tend\n\tend", "CodeBleu_score": 34.92787699213542}, {"code": "local function collision(object)\n\n\t --[[\n The function checkCollision(object, otherObject) checks for a collision between the given object and the other object. It returns a boolean value indicating whether a collision is detected.\n ]]\n local function checkCollision(object, otherObject)\n  return object.x <= otherObject.x + otherObject.width and object.x + object.width >= otherObject.x and object.y <= otherObject.y + otherObject.height and object.y + object.height >= otherObject.y\n end\n \n --[[\n The function checkCollisionWithHero(object) checks for a collision between the given object and any alive heroes. It returns a boolean value indicating whether a collision is detected.\n ]]\n local function checkCollisionWithHero(object)\n  for i, hero in ipairs(heroManager.heroes) do\n   if checkCollision(object, hero) then\n    return true\n   end\n  end\n  return false\n end\n \n --[[\n The function checkCollisionWithMonster(object) checks for a collision between the given object and any alive monsters. It returns a boolean value indicating whether a collision is detected.\n ]]\n local function checkCollisionWithMonster(object)\n  for i, monster in ipairs(monsterManager.monsters) do\n   if checkCollision(object, monster) then\n    return true\n   end\n  end\n  return false\n end\n \n --[[\n The function checkCollisionWithWall(object) checks for a collision between the given object and the wall. It returns a boolean value indicating whether a collision is detected.\n ]]\n local function checkCollisionWithWall(object)\n  return object.x <= 0 or object.x + object.width >= WINDOW_WIDTH or object.y <= 0 or object.y + object.height >= WINDOW_HEIGHT\n end\n \n --[[\n The function checkCollisionWithFloor(object) checks for a collision between the given object and the floor. It returns a boolean value indicating whether a collision is detected.\n ]]\n local function checkCollisionWithFloor(object)\n  return object.y + object.height >= WINDOW_HEIGHT\n end\n \n --[[\n The function checkCollisionWithCeiling(object) checks for a collision between the given object and the ceiling. It returns a boolean value indicating whether a collision is detected.\n ]]\n local function checkCollisionWithCeiling(object)\n  return object.y <= 0\n end\n \n --[[\n The function checkCollisionWith", "CodeBleu_score": 36.262916243638074}, {"code": "local function collision(object)\n\n\t --[[\n The function collision(object) is called by HeroManager and MonsterManager.\n ]]\n if object.alive then\n \n  --[[\n  The function collision(object) is called by HeroManager and MonsterManager.\n  ]]\n  for i, hero in pairs(heroManager.heroes) do\n  \n   --[[\n   The function collision(object) is called by HeroManager and MonsterManager.\n   ]]\n   if hero.alive and hero ~= object then\n   \n    --[[\n    The function collision(object) is called by HeroManager and MonsterManager.\n    ]]\n    if hero.x < object.x + object.width and hero.x + hero.width > object.x and hero.y < object.y + object.height and hero.y + hero.height > object.y then\n    \n     --[[\n     The function collision(object) is called by HeroManager and MonsterManager.\n     ]]\n     solveCollision(object, hero)\n    end\n   end\n  end\n end", "CodeBleu_score": 35.29880945325512}]}
{"instance_id": "f8915bebdc0e", "generation_result": [{"code": "function collisionDetect(dt)\n\t\tfor i = #heroManager, 1, -1 do\n\t\tif heroManager[i].isAlive == true then\n\t\t\tfor j = #monsterManager, 1, -1 do\n\t\t\t\tif monsterManager[j].isAlive == true then\n\t\t\t\t\tif heroManager[i].collision(monsterManager[j]) then\n\t\t\t\t\t\theroManager[i].isAlive = false\n\t\t\t\t\t\tmonsterManager[j].isAlive = false\n\t\t\t\t\t\theroManager[i].remove()\n\t\t\t\t\t\tmonsterManager[j].remove()\n\t\t\t\t\t\tscore = score + 10\n\t\t\t\t\t\tscoreLabel:setString(\"Score: \" .. score)\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\t\tif heroManager[i].isOutOfBound() then\n\t\t\t\theroManager[i].isAlive = false\n\t\t\t\theroManager[i].remove()\n\t\t\tend\n\t\tend\n\tend", "CodeBleu_score": 28.6039047682786}, {"code": "function collisionDetect(dt)\n\t\tfor i = #HeroManager, 1, -1 do \n\t\tif HeroManager[i]:isAlive() then \n\t\t\tif HeroManager[i]:isOutOfBound() then \n\t\t\t\tHeroManager[i]:setPosition(0, 0)\n\t\t\telse \n\t\t\t\tfor j = #MonsterManager, 1, -1 do \n\t\t\t\t\tif MonsterManager[j]:isAlive() then \n\t\t\t\t\t\tif HeroManager[i]:collidesWith(MonsterManager[j]) then \n\t\t\t\t\t\t\tHeroManager[i]:setPosition(0, 0)\n\t\t\t\t\t\t\tMonsterManager[j]:setPosition(0, 0)\n\t\t\t\t\t\t\tHeroManager[i]:setAlive(false)\n\t\t\t\t\t\t\tMonsterManager[j]:setAlive(false)\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\telse \n\t\t\ttable.remove(HeroManager, i)\n\t\tend\n\tend", "CodeBleu_score": 34.61806067973646}, {"code": "function collisionDetect(dt)\n\t\tfor i=#HeroManager,1,-1 do\n\t\tif HeroManager[i].isAlive then\n\t\t\tfor j=#MonsterManager,1,-1 do\n\t\t\t\tif MonsterManager[j].isAlive then\n\t\t\t\t\tif HeroManager[i].collidesWith(MonsterManager[j]) then\n\t\t\t\t\t\tHeroManager[i].collide(MonsterManager[j])\n\t\t\t\t\t\tMonsterManager[j].collide(HeroManager[i])\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\tMonsterManager[j].remove()\n\t\t\t\tend\n\t\t\tend\n\t\t\tif HeroManager[i].isOutOfBound() then\n\t\t\t\tHeroManager[i].isAlive = false\n\t\t\t\tHeroManager[i].remove()\n\t\t\tend\n\t\telse\n\t\t\tHeroManager[i].remove()\n\t\tend\n\tend", "CodeBleu_score": 26.326592856465425}]}
{"instance_id": "fc081bb122f5", "generation_result": [{"code": "function Actor:specialAttack()\n\t\tlocal specialAttackCollider = SpecialAttackCollider.create(self.x, self.y, self.width, self.height, self.attackDamage, self.attackSpeed, self.attackRange, self.attackKnockback, self.attackKnockbackDirection)\n\tself:playSpecialAttackSoundEffects()\n\tself:addCollider(specialAttackCollider)", "CodeBleu_score": 35.461847307397306}, {"code": "function Actor:specialAttack()\n\t\tlocal collider = self:specialAttackCollider()\n\tcollider:setPos(self:getPos())\n\tcollider:setForward(self:getForward())\n\tcollider:setCollisionCallback(self, Actor.specialAttackCollisionCallback)\n\tcollider:setCollisionCallbackData(self)\n\tcollider:setCollisionCallbackMask(Bitmask.SpecialAttack)\n\tcollider:setCollisionCallbackUserData(self)\n\tcollider:setCollisionCallbackEnterSound(self:specialAttackSoundEffects().enterSound)\n\tcollider:setCollisionCallbackExitSound(self:specialAttackSoundEffects().exitSound)\n\tcollider:setCollisionCallbackEnterSoundDistance(self:specialAttackSoundEffects().enterSoundDistance)\n\tcollider:setCollisionCallbackExitSoundDistance(self:specialAttackSoundEffects().exitSoundDistance)\n\tcollider:setCollisionCallbackEnterSoundPitch(self:specialAttackSoundEffects().enterSoundPitch)\n\tcollider:setCollisionCallbackExitSoundPitch(self:specialAttackSoundEffects().exitSoundPitch)\n\tcollider:setCollisionCallbackEnterSoundVolume(self:specialAttackSoundEffects().enterSoundVolume)\n\tcollider:setCollisionCallbackExitSoundVolume(self:specialAttackSoundEffects().exitSoundVolume)\n\tcollider:setCollisionCallbackEnterSoundLoop(self:specialAttackSoundEffects().enterSoundLoop)\n\tcollider:setCollisionCallbackExitSoundLoop(self:specialAttackSoundEffects().exitSoundLoop)\n\tcollider:setCollisionCallbackEnterSoundLoopCount(self:specialAttackSoundEffects().enterSoundLoopCount)\n\tcollider:setCollisionCallbackExitSoundLoopCount(self:specialAttackSoundEffects().exitSoundLoopCount)\n\tcollider:setCollisionCallbackEnterSoundLoopDelay(self:specialAttackSoundEffects().enterSoundLoopDelay)\n\tcollider:setCollisionCallbackExitSoundLoopDelay(self:specialAttackSoundEffects().exitSoundLoopDelay)\n\tcollider:setCollisionCallbackEnterSoundLoopVolume(self:specialAttackSoundEffects().enterSoundLoopVolume)\n\tcollider:setCollisionCallbackExitSoundLoopVolume(self:specialAttackSoundEffects().exitSoundLoopVolume)\n\tcollider:setCollisionCallbackEnterSoundLoopPan(self:specialAttackSoundEffects().enterSoundLoopPan)\n\tcollider:setCollisionCallbackExitSoundLoopPan(self:specialAttackSoundEffects().exitSoundLoopPan)\n\tcollider:setCollisionCallbackEnterSoundLoopRolloff(self", "CodeBleu_score": 29.39689207941978}, {"code": "function Actor:specialAttack()\n\t\tlocal collider = self:specialAttackCollider()\n\tif collider then\n\t\tcollider:setLinearVelocity(self:getForwardVector() * self.specialAttackSpeed)\n\t\tcollider:setKinematic(false)\n\t\tcollider:setCollisionGroup(COLLISION_GROUP.SPECIAL_ATTACK)\n\t\tcollider:setCollisionResponse(true)\n\t\tcollider:setCollisionCallback(self, self.specialAttackCollisionCallback)\n\t\tcollider:setTrigger(true)\n\t\tself:specialAttackSoundEffects()\n\tend", "CodeBleu_score": 48.80227101248787}]}
{"instance_id": "bfc98809aacb", "generation_result": [{"code": "function Slime:angryFace(trueFalse)\n\t\tif self._angry == trueFalse then return end\n\tself._angry = trueFalse\n\tif trueFalse == true then\n\t\tself._sprite3d:setTexture(self._angryTexture)\n\telse\n\t\tself._sprite3d:setTexture(self._normalTexture)\n\tend", "CodeBleu_score": 52.85626649153643}, {"code": "function Slime:angryFace(trueFalse)\n\t\tif self._angry == trueFalse then return end\n\tself._angry = trueFalse\n\tif trueFalse then\n\t\tself._sprite3d:setTexture(\"res/sprites/slime_angry.png\")\n\telse\n\t\tself._sprite3d:setTexture(\"res/sprites/slime_normal.png\")\n\tend", "CodeBleu_score": 65.53868868050718}, {"code": "function Slime:angryFace(trueFalse)\n\t\tif trueFalse == true then\n\t\tif self._angry == false then\n\t\t\tself._angry = true\n\t\t\tself._sprite3d:setTexture(self._angryTexture)\n\t\tend\n\telse\n\t\tif self._angry == true then\n\t\t\tself._angry = false\n\t\t\tself._sprite3d:setTexture(self._normalTexture)\n\t\tend\n\tend", "CodeBleu_score": 42.78491322035094}]}
{"instance_id": "546a0b8fb77b", "generation_result": [{"code": "override fun getCharPixmap(char: Char): Pixmap{\n\t\tval font = getFont()\n\tval metrics = getMetrics(font)\n\tval (width, height) = ceil(metrics.stringWidth(char.toString()) * font.size).toInt() to ceil(metrics.height * font.size).toInt()\n\tval bitmap = Bitmap(width, height, Bitmap.Config.ARGB_8888)\n\tval canvas = Canvas(bitmap)\n\tcanvas.drawText(char.toString(), 0f, height.toFloat(), Paint().apply {\n\t\ttypeface = font\n\t\ttextSize = font.size\n\t})\n\tval pixels = IntArray(width * height)\n\tbitmap.getPixels(pixels, 0, width, 0, 0, width, height)\n\treturn Pixmap(width, height, Bitmap.Config.ARGB_8888).apply { setPixels(pixels, 0, width) }\n}", "CodeBleu_score": 49.428579473883104}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\t\tval fontMetrics = getMetrics(char.toString())\n\tval bitmap = Bitmap(fontMetrics.width, fontMetrics.height, Bitmap.Config.ARGB_8888)\n\tval canvas = Canvas(bitmap)\n\tcanvas.drawText(char.toString(), 0f, fontMetrics.ascent, paint)\n\treturn Pixmap(bitmap)\n}", "CodeBleu_score": 20.91810199857195}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\t\tval font = getFont(fontSize)\n\tval fontMetrics = font.fontMetrics\n\tval width = ceil(fontMetrics.stringWidth(char.toString()) * scale).toInt()\n\tval height = ceil(fontMetrics.height * scale).toInt()\n\tval image = BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB)\n\tval g2 = image.createGraphics()\n\tg2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON)\n\tg2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_LCD_HRGB)\n\tg2.scale(scale, scale)\n\tg2.font = font\n\tg2.color = Color(0, 0, 0, 0)\n\tg2.fillRect(0, 0, width, height)\n\tg2.color = Color(255, 255, 255, 255)\n\tg2.drawString(char.toString(), 0f, fontMetrics.ascent)\n\tg2.dispose()\n\tval pixmap = Pixmap(width, height, Pixmap.Format.RGBA8888)\n\tval buf = image.raster.dataBuffer\n\tval pixels = IntArray(width * height)\n\tfor (y in 0 until height) {\n\t\tfor (x in 0 until width) {\n\t\t\tval argb = buf.getElem(y * width + x)\n\t\t\tval a = (argb shr 24 and 0xff).toByte()\n\t\t\tval r = (argb shr 16 and 0xff).toByte()\n\t\t\tval g = (argb shr 8 and 0xff).toByte()\n\t\t\tval b = (argb and 0xff).toByte()\n\t\t\tpixels[y * width + x] = (a.toInt() shl 24) or (r.toInt() shl 16) or (g.toInt() shl 8) or b.toInt()\n\t\t}\n\t}\n\tpixmap.setPixels(0, 0, width, height, pixels)\n\treturn pixmap\n}", "CodeBleu_score": 50.67630356600594}]}
{"instance_id": "9c1ce2567ce1", "generation_result": [{"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n}", "CodeBleu_score": 13.991633962012584}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\nval uri = Uri.parse(suggestedLocation)\nval filename = getFilename(uri)\nval file = File(uri.path)\nval request = Request(file, filename, onSaved, onError)\nopenSaveFileChooser(request)\n}", "CodeBleu_score": 31.22452987474019}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n}", "CodeBleu_score": 13.991633962012584}]}
{"instance_id": "ea556fe12030", "generation_result": [{"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n}", "CodeBleu_score": 19.45536830701614}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n}", "CodeBleu_score": 19.45536830701614}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n}", "CodeBleu_score": 19.45536830701614}]}
{"instance_id": "813990d9bb4d", "generation_result": [{"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\t\tval intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n\t\taddCategory(Intent.CATEGORY_OPENABLE)\n\t\ttype = \"application/json\"\n\t\tputExtra(Intent.EXTRA_TITLE, fileName)\n\t\tif (uri.scheme == \"content\") {\n\t\t\tputExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n\t\t}\n\t}\n\tactivity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 70.3898838488957}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\t\tval intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n\t\taddCategory(Intent.CATEGORY_OPENABLE)\n\t\ttype = \"application/json\"\n\t\tputExtra(Intent.EXTRA_TITLE, fileName)\n\t\tif (uri.scheme == \"content\") {\n\t\t\tputExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n\t\t}\n\t}\n\tactivity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 70.3898838488957}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\t\tval intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n\t\taddCategory(Intent.CATEGORY_OPENABLE)\n\t\ttype = \"application/json\"\n\t\tputExtra(Intent.EXTRA_TITLE, fileName)\n\t\tdata = uri\n\t}\n\tstartActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 52.06150139643946}]}
{"instance_id": "a423b39ba6fe", "generation_result": [{"code": "fun createNotificationChannelInfo(appContext: Context){\n\t\tval notificationChannel = NotificationChannel(\n\t\tNOTIFICATION_CHANNEL_ID,\n\t\tNOTIFICATION_CHANNEL_NAME,\n\t\tNotificationManager.IMPORTANCE_DEFAULT\n\t)\n\tnotificationChannel.description = NOTIFICATION_CHANNEL_DESCRIPTION\n\tnotificationChannel.setShowBadge(true)\n\tval notificationManager = appContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n\tnotificationManager.createNotificationChannel(notificationChannel)\n}", "CodeBleu_score": 38.323833231011896}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n\t\tval name = appContext.getString(R.string.channel_name)\n\t\tval description = appContext.getString(R.string.channel_description)\n\t\tval importance = NotificationManager.IMPORTANCE_DEFAULT\n\t\tval channel = NotificationChannel(CHANNEL_ID, name, importance)\n\t\tchannel.description = description\n\t\tval notificationManager = appContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n\t\tnotificationManager.createNotificationChannel(channel)\n\t}\n}", "CodeBleu_score": 53.471814777088746}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\t\n}", "CodeBleu_score": 1.1719733888811363}]}
{"instance_id": "4f3e7f77a567", "generation_result": [{"code": "fun packImages(workingPath: String){\n\t\tval mainAssetsPath = File(workingPath, \"assets\")\n\tval modsPath = File(workingPath, \"mods\")\n\tval imagePacker = ImagePacker(getDefaultSettings())\n\tif (mainAssetsPath.exists()) {\n\t\tval images = packImagesPerMod(mainAssetsPath, imagePacker)\n\t\tif (images.isNotEmpty()) {\n\t\t\tval output = File(workingPath, \"images\")\n\t\t\toutput.mkdir()\n\t\t\timagePacker.saveImages(output, images)\n\t\t}\n\t}\n\tif (modsPath.exists()) {\n\t\tfor (mod in modsPath.listFiles { _, name -> !name.startsWith(\".\") }) {\n\t\t\tif (mod.isDirectory) {\n\t\t\t\tval images = packImagesPerMod(mod, imagePacker)\n\t\t\t\tif (images.isNotEmpty()) {\n\t\t\t\t\tval output = File(mod, \"images\")\n\t\t\t\t\toutput.mkdir()\n\t\t\t\t\timagePacker.saveImages(output, images)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 43.60862948782335}, {"code": "fun packImages(workingPath: String){\n\t\tval settings = getDefaultSettings()\n\tval mainAssetsPath = File(workingPath, \"assets\")\n\tval modsPath = File(workingPath, \"mods\")\n\tval mainAssetsImages = packImagesPerMod(mainAssetsPath, settings)\n\tval modsImages = packImagesPerMod(modsPath, settings)\n\tval images = mainAssetsImages + modsImages\n\timages.forEach {\n\t\tprintln(it)\n\t}\n}", "CodeBleu_score": 40.2451859400745}, {"code": "fun packImages(workingPath: String){\n\t\t// get the default settings\n\tval settings = getDefaultSettings(workingPath)\n\t// pack images for the main assets folder\n\tpackImagesPerMod(settings, workingPath, \"assets\")\n\t// scan a \"mods\" directory to pack images for each mod, skipping hidden files\n\tval modsPath = workingPath + \"/mods\"\n\tif (File(modsPath).exists()) {\n\t\tval mods = File(modsPath).listFiles { _, name -> !name.startsWith(\".\") }\n\t\tfor (mod in mods) {\n\t\t\tif (mod.isDirectory) {\n\t\t\t\tpackImagesPerMod(settings, modsPath, mod.name)\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 46.049638211689356}]}
{"instance_id": "206dbb3c21eb", "generation_result": [{"code": "suspend fun reloadWorldscreen(){\n\t\tval worldscreen = getWorldscreen()\n\tval workingPath = worldscreen.workingPath\n\tval packer = ImagePacker()\n\tval assetsPath = \"$workingPath/assets\"\n\tval modPath = \"$workingPath/mods\"\n\n\tval defaultPacker = packer.pack(assetsPath, \"$workingPath/images\")\n\n\tval mods = mutableListOf<String>()\n\tfor (mod in File(modPath).listFiles()) {\n\t\tif (mod.name.startsWith(\".\")) continue\n\t\tmods.add(mod.name)\n\t}\n\n\tval modPackers = mutableListOf<ImagePacker>()\n\tfor (mod in mods) {\n\t\ttry {\n\t\t\tval modAssetsPath = \"$modPath/$mod/assets\"\n\t\t\tval modPacker = packer.pack(modAssetsPath, \"$workingPath/images/$mod\")\n\t\t\tmodPackers.add(modPacker)\n\t\t} catch (e: Exception) {\n\t\t\tprintln(\"Failed to pack images for mod $mod:\")\n\t\t\te.printStackTrace()\n\t\t}\n\t}\n\n\tval defaultPackerJson = defaultPacker.toJson()\n\tval modPackersJson = modPackers.toJson()\n\n\tval json = \"\"\"\n\t\t{\n\t\t\t\"defaultPacker\": $defaultPackerJson,\n\t\t\t\"modPackers\": $modPackersJson\n\t\t}\n\t\"\"\".trimIndent()\n\n\tval file = File(\"$workingPath/images/pack.json\")\n\tfile.writeText(json)\n\n\tworldscreen.reload()\n}", "CodeBleu_score": 28.657352633688326}, {"code": "suspend fun reloadWorldscreen(){\n\t\tval workingPath = Paths.get(\"workingPath\")\n\tval imagePacker = ImagePacker()\n\n\t// Pack images in the assets folder\n\tval assetsPath = workingPath.resolve(\"assets\")\n\tif (assetsPath.exists()) {\n\t\tval packer = imagePacker.pack(assetsPath)\n\t\tval atlasPath = packer.atlasPath\n\t\tprintln(\"Packed assets images to $atlasPath\")\n\t}\n\n\t// Pack images in each mod\n\tval modsPath = workingPath.resolve(\"mods\")\n\tif (modsPath.exists()) {\n\t\tval mods = modsPath.list()\n\t\tif (mods != null) {\n\t\t\tfor (mod in mods) {\n\t\t\t\tval modPath = modsPath.resolve(mod)\n\t\t\t\tif (!modPath.toFile().isHidden) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval packer = imagePacker.pack(modPath)\n\t\t\t\t\t\tval atlasPath = packer.atlasPath\n\t\t\t\t\t\tprintln(\"Packed mod $mod images to $atlasPath\")\n\t\t\t\t\t} catch (e: Exception) {\n\t\t\t\t\t\tprintln(\"Failed to pack images for mod $mod\")\n\t\t\t\t\t\te.printStackTrace()\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 39.82756887815205}, {"code": "suspend fun reloadWorldscreen(){\n\t\tval workingPath = \"C:/Users/Administrator/Desktop/Terrarum\"\n\tval packer = ImagePacker(workingPath)\n\tval packer2 = ImagePacker(workingPath)\n\tval packer3 = ImagePacker(workingPath)\n\tval packer4 = ImagePacker(workingPath)\n\tval packer5 = ImagePacker(workingPath)\n\tval packer6 = ImagePacker(workingPath)\n\tval packer7 = ImagePacker(workingPath)\n\tval packer8 = ImagePacker(workingPath)\n\tval packer9 = ImagePacker(workingPath)\n\tval packer10 = ImagePacker(workingPath)\n\tval packer11 = ImagePacker(workingPath)\n\tval packer12 = ImagePacker(workingPath)\n\tval packer13 = ImagePacker(workingPath)\n\tval packer14 = ImagePacker(workingPath)\n\tval packer15 = ImagePacker(workingPath)\n\tval packer16 = ImagePacker(workingPath)\n\tval packer17 = ImagePacker(workingPath)\n\tval packer18 = ImagePacker(workingPath)\n\tval packer19 = ImagePacker(workingPath)\n\tval packer20 = ImagePacker(workingPath)\n\tval packer21 = ImagePacker(workingPath)\n\tval packer22 = ImagePacker(workingPath)\n\tval packer23 = ImagePacker(workingPath)\n\tval packer24 = ImagePacker(workingPath)\n\tval packer25 = ImagePacker(workingPath)\n\tval packer26 = ImagePacker(workingPath)\n\tval packer27 = ImagePacker(workingPath)\n\tval packer28 = ImagePacker(workingPath)\n\tval packer29 = ImagePacker(workingPath)\n\tval packer30 = ImagePacker(workingPath)\n\tval packer31 = ImagePacker(workingPath)\n\tval packer32 = ImagePacker(workingPath)\n\tval packer33 = ImagePacker(workingPath)\n\tval packer34 =", "CodeBleu_score": 25.38320500262795}]}
{"instance_id": "2d8fdcb5ad6f", "generation_result": [{"code": "fun goToMainMenu(): MainMenuScreen{\n\t\treturn MainMenuScreen()\n}", "CodeBleu_score": 4.247728111670419}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\t\treturn MainMenuScreen()\n}", "CodeBleu_score": 4.247728111670419}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\t\t// TODO: Add code here to pack images and return a MainMenuScreen\n\treturn MainMenuScreen()\n}", "CodeBleu_score": 4.247428048210542}]}
{"instance_id": "df60142d384c", "generation_result": [{"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t val mode = JFrame.getDisplayMode()\n val bounds = getMaximumWindowBounds(mode.width, mode.height)\n if (bounds.width == mode.width && bounds.height == mode.height) {\n return true\n }\n setDisplayMode(bounds.width, bounds.height)\n return false\n }", "CodeBleu_score": 34.50657457494387}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t val monitor = Gdx.graphics.monitor\n val maxBounds = getMaximumWindowBounds(monitor)\n val width = settings.width\n val height = settings.height\n val x = maxBounds.x\n val y = maxBounds.y\n val windowedWidth = Math.min(width, maxBounds.width)\n val windowedHeight = Math.min(height, maxBounds.height)\n Gdx.graphics.setFullscreenMode(displayMode, fullscreen)\n Gdx.graphics.setWindowedMode(windowedWidth, windowedHeight)\n Gdx.graphics.window.setLocation(x, y)\n return width == windowedWidth && height == windowedHeight\n }", "CodeBleu_score": 40.781399849051425}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t val mode = glfwGetWindowMonitor(window.value)\n if (mode != 0L) {\n glfwSetWindowMonitor(window.value, 0, 0, 0, 0, 0, 0)\n }\n glfwWindowHint(GLFW_RED_BITS, settings.redBits)\n glfwWindowHint(GLFW_GREEN_BITS, settings.greenBits)\n glfwWindowHint(GLFW_BLUE_BITS, settings.blueBits)\n glfwWindowHint(GLFW_ALPHA_BITS, settings.alphaBits)\n glfwWindowHint(GLFW_DEPTH_BITS, settings.depthBits)\n glfwWindowHint(GLFW_STENCIL_BITS, settings.stencilBits)\n glfwWindowHint(GLFW_SAMPLES, settings.samples)\n glfwWindowHint(GLFW_RESIZABLE, if (settings.resizable) GLFW_TRUE else GLFW_FALSE)\n glfwWindowHint(GLFW_DECORATED, if (settings.borderless) GLFW_FALSE else GLFW_TRUE)\n glfwWindowHint(GLFW_AUTO_ICONIFY, if (settings.fullscreen) GLFW_FALSE else GLFW_TRUE)\n glfwWindowHint(GLFW_FLOATING, if (settings.floating) GLFW_TRUE else GLFW_FALSE)\n glfwWindowHint(GLFW_MAXIMIZED, if (settings.fullscreen) GLFW_TRUE else GLFW_FALSE)\n glfwWindowHint(GLFW_VISIBLE, if (settings.fullscreen) GLFW_FALSE else GLFW_TRUE)\n glfwWindowHint(GLFW_STEREO, if (settings.stereo) GLFW_TRUE else GLFW_FALSE)\n glfwWindowHint(GLFW_SRGB_CAPABLE, if (settings.srgb) GLFW_TRUE else GLFW_FALSE)\n glfwWindowHint(GLFW_REFRESH_RATE, settings.refreshRate)\n glfwWindowHint(GLFW_CLIENT_API, GLFW_NO_API)\n glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 1)\n glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 1)\n glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_ANY_PROFILE)\n glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GLFW_TRUE)\n glfwWindowHint(GLFW_CONTEXT_RELEASE_BEHAVIOR, GLFW_RELEASE_BEHAVIOR_FLUSH)\n glfwWindowHint(GLFW_CONTEXT_NO_ERROR, GLFW_TRUE)\n glfwWindowHint(", "CodeBleu_score": 35.83801162977657}]}
{"instance_id": "a8b17234c4e5", "generation_result": [{"code": "private fun getLinuxDistro(): String{\n\t\tval osRelease = FileHandle(\"/etc/os-release\").readText()\n\tval map = mapOf(*osRelease.split(\"\n\").map { it.split(\"=\") }.toTypedArray())\n\tval name = map[\"NAME\"]\n\tval prettyName = map[\"PRETTY_NAME\"]\n\treturn if (prettyName == null) name else \"$name $prettyName\"\n}", "CodeBleu_score": 27.069436033152805}, {"code": "private fun getLinuxDistro(): String{\n\t\tval distroMap = mapOf<String, String>()\n\tval osReleaseFile = FileHandle(\"/etc/os-release\")\n\tif (osReleaseFile.exists()) {\n\t\tval lines = osReleaseFile.readLines()\n\t\tfor (line in lines) {\n\t\t\tval splitLine = line.split(\"=\")\n\t\t\tif (splitLine.size == 2) {\n\t\t\t\tdistroMap[splitLine[0]] = splitLine[1].replace(\"\\\"\", \"\")\n\t\t\t}\n\t\t}\n\t}\n\treturn distroMap[\"PRETTY_NAME\"] ?: distroMap[\"NAME\"] ?: \"\"\n}", "CodeBleu_score": 30.60323286889521}, {"code": "private fun getLinuxDistro(): String{\n\t\tval osReleaseFile = FileHandle(\"/etc/os-release\")\n\tval osReleaseMap = mapOf(*osReleaseFile.readLines().map {\n\t\tit.split(\"=\")\n\t}.toTypedArray())\n\n\tval distro = osReleaseMap[\"NAME\"]?.removeSurrounding(\"\\\"\")\n\tval version = osReleaseMap[\"VERSION\"]?.removeSurrounding(\"\\\"\")\n\n\treturn if (distro == null) \"\" else if (version == null) distro else \"$distro $version\"\n}", "CodeBleu_score": 29.803308850971575}]}
{"instance_id": "36a1d2e56540", "generation_result": [{"code": "private fun flashWindow(){\n\t\ttry {\n\t\tval window = JFrame.getWindows()[0]\n\t\tval toolkit = Toolkit.getDefaultToolkit()\n\t\tval flashWindow = toolkit.getMenuShortcutKeyMask()\n\t\tval altPressed = (System.getProperty(\"os.name\").toLowerCase().contains(\"mac\") && System.getProperty(\"java.version\").startsWith(\"1.6\")) || (System.getProperty(\"os.name\").toLowerCase().contains(\"mac\") && System.getProperty(\"java.version\").startsWith(\"1.7\"))\n\t\tval alt = InputEvent.ALT_MASK\n\t\tval altReleased = altPressed and alt.inv()\n\t\tval altAndFlash = altPressed and flashWindow\n\t\tval altAndReleased = altAndFlash and altReleased\n\t\tval altAndReleasedAndReleased = altAndReleased and altReleased\n\t\tval altAndReleasedAndReleasedAndReleased = altAndReleasedAndReleased and altReleased\n\t\tval altAndReleasedAndReleasedAndReleasedAndReleased = altAndReleasedAndReleasedAndReleased and altReleased\n\t\tval altAndReleasedAndReleasedAndReleasedAndReleasedAndReleased = altAndReleasedAndReleasedAndReleasedAndReleased and altReleased\n\t\tval altAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleased = altAndReleasedAndReleasedAndReleasedAndReleasedAndReleased and altReleased\n\t\tval altAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleased = altAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleased and altReleased\n\t\tval altAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleased = altAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleased and altReleased\n\t\tval altAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleased = altAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleased and altReleased\n\t\tval altAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleased = altAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleased and altReleased\n\t\tval altAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleased = altAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleased and altReleased\n\t\tval altAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleasedAndReleased", "CodeBleu_score": 29.419195636896184}, {"code": "private fun flashWindow(){\n\t\ttry {\n\t\tval window = (UIApplication.sharedApplication().keyWindow() as? UIWindow) ?: UIApplication.sharedApplication().windows.first()\n\t\twindow.flash()\n\t} catch (e: Exception) {\n\t\tLog.e(\"FlashWindow\", \"Error flashing window\", e)\n\t}\n}", "CodeBleu_score": 29.22891619398542}, {"code": "private fun flashWindow(){\n\t\tval window = Window.getCurrent()\n\tif (window == null) {\n\t\treturn\n\t}\n\n\ttry {\n\t\tval windowHandle = window.windowHandle\n\t\tval windowHandleClass = Class.forName(\"org.eclipse.swt.internal.win32.HANDLE\")\n\t\tval windowHandleConstructor = windowHandleClass.getDeclaredConstructor(Long::class.javaPrimitiveType)\n\t\twindowHandleConstructor.isAccessible = true\n\t\tval windowHandleValue = windowHandleConstructor.newInstance(windowHandle)\n\t\tval flashWindowEx = User32.INSTANCE.FlashWindowEx\n\t\tval flashWindowExMethod = flashWindowEx.method\n\t\tflashWindowExMethod.isAccessible = true\n\t\tflashWindowExMethod.invoke(null, windowHandleValue, 10, 0, 0)\n\t} catch (e: Exception) {\n\t\tlogger.error(\"Error flashing window\", e)\n\t}\n}", "CodeBleu_score": 46.69240881152946}]}
{"instance_id": "8e3c7096415a", "generation_result": [{"code": "public void onFullBackup(FullBackupDataOutput data){\n\t// 1. Backup shared preferences", "CodeBleu_score": 1.3013752608396356}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\t\t// Back up the shared preferences file\n\tSharedPreferences prefs = getApplicationContext().getSharedPreferences(\"com.example.android.trivialdrivesample\", Context.MODE_PRIVATE);\n\tSharedPreferences.Editor editor = prefs.edit();\n\teditor.putInt(\"rank\", 10);\n\teditor.commit();\n\n\t// Get the files to back up\n\tFile[] files = getFilesDir().listFiles();\n\n\t// Back up the game data files\n\tfor (File file : files) {\n\t\tif (file.getName().contains(\"rank\")) {\n\t\t\ttry {\n\t\t\t\tdata.writeEntityHeader(file.getName(), file.length());\n\t\t\t\tdata.writeEntityData(new FileInputStream(file), file.length());\n\t\t\t} catch (IOException e) {\n\t\t\t\tLog.e(\"TrivialDriveBackupAgent\", \"Failed to backup file: \" + file.getName());\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 21.419902640253586}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\t\ttry {\n\t\t// Get the shared preferences file\n\t\tFile prefsFile = getPrefsFile();\n\t\t// Get the parent directory of the shared preferences file\n\t\tFile prefsDir = prefsFile.getParentFile();\n\t\t// Create a zip entry for the shared preferences file\n\t\tZipEntry prefsEntry = new ZipEntry(prefsFile.getName());\n\t\t// Write the shared preferences file to the output stream\n\t\tdata.writeEntityHeader(prefsEntry.getName(), prefsEntry.getSize());\n\t\tdata.writeEntityData(new FileInputStream(prefsFile), prefsEntry.getSize());\n\t\t// Create a zip entry for the shared preferences directory\n\t\tZipEntry prefsDirEntry = new ZipEntry(prefsDir.getName() + \"/\");\n\t\t// Write the shared preferences directory to the output stream\n\t\tdata.writeEntityHeader(prefsDirEntry.getName(), prefsDirEntry.getSize());\n\t\tdata.writeEntityData(new FileInputStream(prefsDir), prefsDirEntry.getSize());\n\n\t\t// Get the game data files\n\t\tFile gameDataDir = getFilesDir();\n\t\t// Get the game data files\n\t\tFile[] gameDataFiles = gameDataDir.listFiles();\n\t\t// Iterate through the game data files\n\t\tfor (File gameDataFile : gameDataFiles) {\n\t\t\t// Get the file name\n\t\t\tString fileName = gameDataFile.getName();\n\t\t\t// Check if the file name is a rankings file\n\t\t\tif (fileName.startsWith(\"rankings_\")) {\n\t\t\t\t// Create a zip entry for the rankings file\n\t\t\t\tZipEntry rankingsEntry = new ZipEntry(fileName);\n\t\t\t\t// Write the rankings file to the output stream\n\t\t\t\tdata.writeEntityHeader(rankingsEntry.getName(), rankingsEntry.getSize());\n\t\t\t\tdata.writeEntityData(new FileInputStream(gameDataFile), rankingsEntry.getSize());\n\t\t\t}\n\t\t\t// Check if the file name is a badges file\n\t\t\tif (fileName.startsWith(\"badges_\")) {\n\t\t\t\t// Create a zip entry for the badges file\n\t\t\t\tZipEntry badgesEntry = new ZipEntry(fileName);\n\t\t\t\t// Write the badges file to the output stream\n\t\t\t\tdata.writeEntityHeader(badgesEntry.getName(), badgesEntry.getSize());\n\t\t\t\tdata.writeEntityData(new FileInputStream(gameDataFile), badgesEntry.getSize());\n\t\t\t}\n\t\t\t// Check if the file name is", "CodeBleu_score": 17.84334346480068}]}
{"instance_id": "583999724a15", "generation_result": [{"code": "public boolean connectedToUnmeteredNetwork(){\n\t\tConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n\tNetworkInfo activeNetwork = cm.getActiveNetworkInfo();\n\tif (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.LOLLIPOP) {\n\t\treturn !activeNetwork.isMetered();\n\t} else {\n\t\treturn activeNetwork != null && activeNetwork.getType() == ConnectivityManager.TYPE_WIFI\n\t\t\t\t|| activeNetwork.getType() == ConnectivityManager.TYPE_WIMAX\n\t\t\t\t|| activeNetwork.getType() == ConnectivityManager.TYPE_BLUETOOTH\n\t\t\t\t|| activeNetwork.getType() == ConnectivityManager.TYPE_ETHERNET;\n\t}\n}", "CodeBleu_score": 67.13078808388117}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\t\treturn !isActiveNetworkMetered();\n\t} else {\n\t\tNetworkInfo activeNetworkInfo = getActiveNetworkInfo();\n\t\treturn activeNetworkInfo != null && activeNetworkInfo.isConnected() && (\n\t\t\t\tactiveNetworkInfo.getType() == ConnectivityManager.TYPE_WIFI ||\n\t\t\t\t\t\tactiveNetworkInfo.getType() == ConnectivityManager.TYPE_WIMAX ||\n\t\t\t\t\t\tactiveNetworkInfo.getType() == ConnectivityManager.TYPE_BLUETOOTH ||\n\t\t\t\t\t\tactiveNetworkInfo.getType() == ConnectivityManager.TYPE_ETHERNET);\n\t}\n}", "CodeBleu_score": 45.49192352369346}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\t\tConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n\tNetworkInfo activeNetwork = cm.getActiveNetworkInfo();\n\tif (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {\n\t\treturn (activeNetwork != null && activeNetwork.isConnected() && activeNetwork.getType() == ConnectivityManager.TYPE_WIFI && !activeNetwork.isRoaming());\n\t} else {\n\t\treturn !cm.isActiveNetworkMetered();\n\t}\n}", "CodeBleu_score": 48.70283583762897}]}
{"instance_id": "f8bd6cd4826b", "generation_result": [{"code": "protected boolean affectHero( Hero hero ){\n\t\tif ( hero.isAlive() ) {\n\t\thero.heal( hero.maxHealth() );\n\t\thero.cureAll();\n\t\thero.satisfyHunger();\n\t\thero.curse( null );\n\t\thero.buff( null );\n\t\thero.play( \"sound\" );\n\t\thero.showStatusWithIcon( \"effect\" );\n\t\thero.interrupt();\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 14.270668155663502}, {"code": "protected boolean affectHero( Hero hero ){\n\t\tif ( hero.isAlive() ) {\n\t\thero.heal( hero.getMaxHealth() );\n\t\thero.cureAll();\n\t\thero.satisfy();\n\t\thero.curseAll( null );\n\t\thero.uncurseEquipped();\n\t\thero.get( hero.getMaxHealth() );\n\t\thero.buff( null );\n\t\thero.interrupt( Messages.get( this, \"success\" ) );\n\t\thero.play( Assets.Sounds.HEAL );\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 29.164589300967926}, {"code": "protected boolean affectHero( Hero hero ){\n\t\tif ( hero.isAlive() ) {\n\t\thero.heal( hero.getMaximumHealth() );\n\t\thero.cureAll();\n\t\thero.satisfy();\n\t\thero.curseRemove();\n\t\thero.heal( hero.getMaximumHealth() );\n\t\thero.showStatusWithIcon( Icon.HEALTHY );\n\t\thero.interrupt();\n\t\treturn true;\n\t}\n\telse {\n\t\thero.showStatusWithIcon( Icon.DEAD );\n\t\thero.interrupt();\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 26.25647615706677}]}
{"instance_id": "3a94f2e84c83", "generation_result": [{"code": "protected Item affectItem( Item item, int pos ){\n\t\tif (item.type == ItemType.WATER_SKIN) {\n\t\tif (!item.isFull()) {\n\t\t\titem.fill();\n\t\t\treturn null;\n\t\t}\n\t}\n\telse if (item.type == ItemType.ANKH) {\n\t\tif (!item.isBlessed()) {\n\t\t\titem.bless();\n\t\t\treturn null;\n\t\t}\n\t}\n\telse if (item.type == ItemType.CURSED_ITEM && !item.isCursed()) {\n\t\titem.removeCurse();\n\t\treturn null;\n\t}\n\telse if (item.type == ItemType.CURSED_ITEM && item.isCursed()) {\n\t\titem.removeCurse();\n\t\treturn null;\n\t}\n\telse if (item.type == ItemType.CURSED_ITEM && item.isCursed()) {\n\t\titem.removeCurse();\n\t\treturn null;\n\t}\n\treturn item;\n}", "CodeBleu_score": 23.593850641706947}, {"code": "protected Item affectItem( Item item, int pos ){\n\t\tif ( item == null ) {\n\t\treturn null;\n\t}\n\tif ( item.type == ItemType.Waterskin && !item.isFull() ) {\n\t\titem.fill();\n\t\tGdx.app.log( \"Quest\", \"You filled the waterskin.\" );\n\t\tGdx.audio.newSound( Assets.instance.fill ).play();\n\t\treturn null;\n\t}\n\tif ( item.type == ItemType.Ankh && !item.isBlessed() ) {\n\t\titem.bless();\n\t\tGdx.app.log( \"Quest\", \"You blessed the ankh.\" );\n\t\tGdx.audio.newSound( Assets.instance.bless ).play();\n\t\treturn null;\n\t}\n\tif ( item.type == ItemType.Cursed && !item.isCursed() ) {\n\t\titem.uncurse();\n\t\tGdx.app.log( \"Quest\", \"You removed the curse.\" );\n\t\tGdx.audio.newSound( Assets.instance.uncurse ).play();\n\t\treturn null;\n\t}\n\tif ( item.type == ItemType.Cursed && item.isCursed() ) {\n\t\tGdx.app.log( \"Quest\", \"You cannot remove the curse.\" );\n\t\tGdx.audio.newSound( Assets.instance.cannot ).play();\n\t\treturn null;\n\t}\n\tif ( item.type == ItemType.Cursed && !item.isCursed() ) {\n\t\tGdx.app.log( \"Quest\", \"You cannot remove the curse.\" );\n\t\tGdx.audio.newSound( Assets.instance.cannot ).play();\n\t\treturn null;\n\t}\n\tif ( item.type == ItemType.Cursed && item.isCursed() ) {\n\t\tGdx.app.log( \"Quest\", \"You cannot remove the curse.\" );\n\t\tGdx.audio.newSound( Assets.instance.cannot ).play();\n\t\treturn null;\n\t}\n\tif ( item.type == ItemType.Cursed && !item.isCursed() ) {\n\t\tGdx.app.log( \"Quest\", \"You cannot remove the curse.\" );\n\t\tGdx.audio.newSound", "CodeBleu_score": 37.110794064366914}, {"code": "protected Item affectItem( Item item, int pos ){\n\t\tif (item == null) {\n\t\treturn null;\n\t}\n\tif (item.type == ItemType.Waterskin && !item.isFull()) {\n\t\titem.fill();\n\t\treturn item;\n\t}\n\tif (item.type == ItemType.Ankh && !item.isBlessed()) {\n\t\titem.bless();\n\t\treturn item;\n\t}\n\tif (item.type == ItemType.Sword && item.cursed && !item.isCursed()) {\n\t\titem.curse();\n\t\treturn item;\n\t}\n\tif (item.type == ItemType.Shield && item.cursed && !item.isCursed()) {\n\t\titem.curse();\n\t\treturn item;\n\t}\n\tif (item.type == ItemType.Boots && item.cursed && !item.isCursed()) {\n\t\titem.curse();\n\t\treturn item;\n\t}\n\tif (item.type == ItemType.Gloves && item.cursed && !item.isCursed()) {\n\t\titem.curse();\n\t\treturn item;\n\t}\n\tif (item.type == ItemType.Helmet && item.cursed && !item.isCursed()) {\n\t\titem.curse();\n\t\treturn item;\n\t}\n\tif (item.type == ItemType.Ring && item.cursed && !item.isCursed()) {\n\t\titem.curse();\n\t\treturn item;\n\t}\n\tif (item.type == ItemType.Necklace && item.cursed && !item.isCursed()) {\n\t\titem.curse();\n\t\treturn item;\n\t}\n\tif (item.type == ItemType.Bow && item.cursed && !item.isCursed()) {\n\t\titem.curse();\n\t\treturn item;\n\t}\n\tif (item.type == ItemType.Amulet && item.cursed && !item.isCursed()) {\n\t\titem.curse();\n\t\treturn item;\n\t}\n\tif (item.type == ItemType.Potion && item.cursed && !item.isCursed()) {\n\t\titem.curse();\n\t\treturn item;\n\t}\n", "CodeBleu_score": 34.689484581596275}]}
{"instance_id": "d322228d1a3e", "generation_result": [{"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t\tif (enemy.isEnemy()) {\n\t\tAllyBuff buff = buffCls.newInstance();\n\t\tenemy.affect(buff);\n\t\tif (enemy.isEnemy()) {\n\t\t\tif (hero.isEnemy()) {\n\t\t\t\thero.showStatusWithIcon(enemy, BuffIndicator.DEBUFF);\n\t\t\t}\n\t\t\tif (hero.isAlive()) {\n\t\t\t\thero.processEnemyKill(enemy);\n\t\t\t\thero.gainEnergy(enemy);\n\t\t\t\thero.checkMonstersSlain();\n\t\t\t\thero.checkAscensionChallenge(enemy);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 25.554683948420298}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t\tAllyBuff buff = buffCls.newInstance();\n\tif (buff.affect(enemy)) {\n\t\tif (enemy.isEnemy()) {\n\t\t\thero.processEnemyKill(enemy);\n\t\t\tif (hero.getAscensionClass() == AscensionClass.MONK) {\n\t\t\t\thero.gainEnergy(2);\n\t\t\t}\n\t\t}\n\t\tif (enemy.isBoss()) {\n\t\t\thero.processBossKill();\n\t\t}\n\t\thero.checkForLevelUp();\n\t\tif (hero.shouldDropLoot()) {\n\t\t\thero.rollToDropLoot(enemy);\n\t\t}\n\t\tif (hero.shouldShowStatus()) {\n\t\t\thero.showStatusWithIcon(enemy);\n\t\t}\n\t\tif (hero.shouldEarnExp()) {\n\t\t\thero.earnExp(enemy);\n\t\t}\n\t}\n}", "CodeBleu_score": 27.208045349204816}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t\tAllyBuff buff = buffCls.newInstance();\n\taffect(enemy, buff);\n\tif (enemy.isEnemy()) {\n\t\tif (hero.isEnemy()) {\n\t\t\tif (hero.isChampion()) {\n\t\t\t\thero.setChampionKills(hero.getChampionKills() + 1);\n\t\t\t}\n\t\t\thero.setEnemiesSlain(hero.getEnemiesSlain() + 1);\n\t\t}\n\t\telse {\n\t\t\thero.setAlliesSlain(hero.getAlliesSlain() + 1);\n\t\t}\n\t\tprocessEnemyKill(hero, enemy);\n\t\tif (hero.isChampion()) {\n\t\t\thero.setChampionKills(hero.getChampionKills() + 1);\n\t\t}\n\t\thero.setEnemiesSlain(hero.getEnemiesSlain() + 1);\n\t\tprocessEnemyKill(hero, enemy);\n\t\tif (hero.isChampion()) {\n\t\t\thero.setChampionKills(hero.getChampionKills() + 1);\n\t\t}\n\t\thero.setEnemiesSlain(hero.getEnemiesSlain() + 1);\n\t\tprocessEnemyKill(hero, enemy);\n\t\tif (hero.isChampion()) {\n\t\t\thero.setChampionKills(hero.getChampionKills() + 1);\n\t\t}\n\t\thero.setEnemiesSlain(hero.getEnemiesSlain() + 1);\n\t\tprocessEnemyKill(hero, enemy);\n\t\tif (hero.isChampion()) {\n\t\t\thero.setChampionKills(hero.getChampionKills() + 1);\n\t\t}\n\t\thero.setEnemiesSlain(hero.getEnemiesSlain() + 1);\n\t\tprocessEnemyKill(hero, enemy);\n\t\tif (hero.isChampion()) {\n\t\t\thero.setChampionKills(hero.getChampionKills() + 1);\n\t\t}\n\t\thero.setEnemiesSlain(hero.getEnemiesSlain() + 1);\n\t\tprocessEnemyKill(hero, enemy);\n\t\tif (hero.isChampion()) {\n\t\t\thero.setChampionKills(hero.getChampionKills() + 1", "CodeBleu_score": 22.0747178935366}]}
{"instance_id": "9ee21c0149f3", "generation_result": [{"code": "public static void processEnemyKill(Char enemy){\n\t\t// Check if the hero has the Ascension Challenge buff active\n\tif (hero.hasBuff(AscensionChallenge.class)) {\n\t\t// Check if the enemy is a transformed enemy\n\t\tif (enemy instanceof TransformedEnemy) {\n\t\t\t// Check if the enemy is a transformed boss\n\t\t\tif (enemy instanceof TransformedBoss) {\n\t\t\t\t// Check if the hero has the Boss Challenge buff active\n\t\t\t\tif (hero.hasBuff(BossChallenge.class)) {\n\t\t\t\t\t// Check if the hero has the Boss Challenge buff active\n\t\t\t\t\tif (hero.hasBuff(BossChallenge.class)) {\n\t\t\t\t\t\t// Check if the hero has the Boss Challenge buff active\n\t\t\t\t\t\tif (hero.hasBuff(BossChallenge.class)) {\n\t\t\t\t\t\t\t// Check if the hero has the Boss Challenge buff active\n\t\t\t\t\t\t\tif (hero.hasBuff(BossChallenge.class)) {\n\t\t\t\t\t\t\t\t// Check if the hero has the Boss Challenge buff active\n\t\t\t\t\t\t\t\tif (hero.hasBuff(BossChallenge.class)) {\n\t\t\t\t\t\t\t\t\t// Check if the hero has the Boss Challenge buff active\n\t\t\t\t\t\t\t\t\tif (hero.hasBuff(BossChallenge.class)) {\n\t\t\t\t\t\t\t\t\t\t// Check if the hero has the Boss Challenge buff active\n\t\t\t\t\t\t\t\t\t\tif (hero.hasBuff(BossChallenge.class)) {\n\t\t\t\t\t\t\t\t\t\t\t// Check if the hero has the Boss Challenge buff active\n\t\t\t\t\t\t\t\t\t\t\tif (hero.hasBuff(BossChallenge.class)) {\n\t\t\t\t\t\t\t\t\t\t\t\t// Check if the hero has the Boss Challenge buff active\n\t\t\t\t\t\t\t\t\t\t\t\tif (hero.hasBuff(BossChallenge.class)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t// Check if the hero has the Boss Challenge buff active\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (hero.hasBuff(BossChallenge.class)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Check if the hero has the Boss Challenge buff active\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (hero.hasBuff(BossChallenge.class)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Check if the hero has the Boss Challenge buff active\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (hero.hasBuff(BossChallenge.class)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Check if the hero has the Boss Challenge buff active\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (hero.hasBuff(BossChallenge.class)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Check if the hero has the Boss Challenge buff active\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (hero.hasBuff(BossChallenge.class)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Check if the hero has the Boss Challenge buff active\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (hero.hasBuff(BossChallenge.class)) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//", "CodeBleu_score": 9.463363261722565}, {"code": "public static void processEnemyKill(Char enemy){\n\t\t// Check if the hero has the Ascension Challenge buff\n\tif (hero.hasBuff(\"Ascension Challenge\")) {\n\t\t// Check if the enemy is a transformed enemy\n\t\tif (enemy.hasBuff(\"Ascension Transform\")) {\n\t\t\t// Check if the enemy is a boss enemy\n\t\t\tif (enemy.getEnemyType() == EnemyType.BOSS) {\n\t\t\t\t// If the hero is at max level, grant the hero experience\n\t\t\t\tif (hero.getLevel() == hero.getMaxLevel()) {\n\t\t\t\t\thero.earnExp(enemy.getExp());\n\t\t\t\t}\n\t\t\t\t// If the hero has not reached max level, reduce the stacks\n\t\t\t\telse {\n\t\t\t\t\thero.getBuff(\"Ascension Challenge\").setStacks(hero.getBuff(\"Ascension Challenge\").getStacks() - 1);\n\t\t\t\t}\n\t\t\t\t// Log a weakening message\n\t\t\t\tLog.info(\"The Ascension Challenge weakened.\");\n\t\t\t}\n\t\t\t// Check if the enemy is a boss enemy\n\t\t\telse if (enemy.getEnemyType() == EnemyType.BOSS) {\n\t\t\t\t// If the hero is at max level, grant the hero experience\n\t\t\t\tif (hero.getLevel() == hero.getMaxLevel()) {\n\t\t\t\t\thero.earnExp(enemy.getExp());\n\t\t\t\t}\n\t\t\t\t// If the hero has not reached max level, reduce the stacks\n\t\t\t\telse {\n\t\t\t\t\thero.getBuff(\"Ascension Challenge\").setStacks(hero.getBuff(\"Ascension Challenge\").getStacks() - 1);\n\t\t\t\t}\n\t\t\t\t// Log a weakening message\n\t\t\t\tLog.info(\"The Ascension Challenge weakened.\");\n\t\t\t}\n\t\t\t// Check if the enemy is a boss enemy\n\t\t\telse if (enemy.getEnemyType() == EnemyType.BOSS) {\n\t\t\t\t// If the hero is at max level, grant the hero experience\n\t\t\t\tif (hero.getLevel() == hero.getMaxLevel()) {\n\t\t\t\t\thero.earnExp(enemy.getExp());\n\t\t\t\t}\n\t\t\t\t// If the hero has not reached max level, reduce the stacks\n\t\t\t\telse {\n\t\t\t\t\thero.getBuff(\"Ascension Challenge\").setStacks(hero.getBuff(\"Ascension Challenge\").getStacks() - 1);\n\t\t\t\t}\n\t\t\t\t// Log a weakening message\n\t\t\t\tLog.info(\"The Asc", "CodeBleu_score": 19.379069475521188}, {"code": "public static void processEnemyKill(Char enemy){\n\t\tif (hero.hasBuff(AscensionChallenge.BUFF_ID)) {\n\t\tif (enemy.type.equals(AscensionChallenge.ASCENSION_ENEMY_TYPE)) {\n\t\t\tint stacks = hero.getBuff(AscensionChallenge.BUFF_ID).stacks;\n\t\t\tif (stacks > 0) {\n\t\t\t\tstacks--;\n\t\t\t\thero.getBuff(AscensionChallenge.BUFF_ID).stacks = stacks;\n\t\t\t\tif (stacks <= AscensionChallenge.ASCENSION_STACK_THRESHOLD) {\n\t\t\t\t\tAscensionChallenge.log.info(\"Ascension Challenge: \" + enemy.name + \" weakened the challenge!\");\n\t\t\t\t}\n\t\t\t\tif (hero.lvl >= AscensionChallenge.MAX_LEVEL) {\n\t\t\t\t\thero.earnExp(AscensionChallenge.ASCENSION_EXP_PER_KILL);\n\t\t\t\t}\n\t\t\t\thero.refreshBuffs();\n\t\t\t}\n\t\t} else if (enemy.type.equals(AscensionChallenge.ASCENSION_ENEMY_TRANSFORMED_TYPE)) {\n\t\t\tenemy.type = AscensionChallenge.ASCENSION_ENEMY_TYPE;\n\t\t\tenemy.setOriginal(true);\n\t\t}\n\t}\n}", "CodeBleu_score": 18.626272633221248}]}
{"instance_id": "4fc9c3c1fcce", "generation_result": [{"code": "public static int AscensionCorruptResist(Mob m){\n\t\tif (m.hasBuff(\"Ascension\")) {\n\t\treturn m.getBuff(Ascension.class).max;\n\t}\n\tif (m.hasBuff(\"Ascension2\")) {\n\t\treturn m.getBuff(Ascension2.class).max;\n\t}\n\tif (m.hasBuff(\"Ascension3\")) {\n\t\treturn m.getBuff(Ascension3.class).max;\n\t}\n\tif (m.hasBuff(\"Ascension4\")) {\n\t\treturn m.getBuff(Ascension4.class).max;\n\t}\n\tif (m.hasBuff(\"Ascension5\")) {\n\t\treturn m.getBuff(Ascension5.class).max;\n\t}\n\tif (m.hasBuff(\"Ascension6\")) {\n\t\treturn m.getBuff(Ascension6.class).max;\n\t}\n\tif (m.hasBuff(\"Ascension7\")) {\n\t\treturn m.getBuff(Ascension7.class).max;\n\t}\n\tif (m.hasBuff(\"Ascension8\")) {\n\t\treturn m.getBuff(Ascension8.class).max;\n\t}\n\tif (m.hasBuff(\"Ascension9\")) {\n\t\treturn m.getBuff(Ascension9.class).max;\n\t}\n\tif (m.hasBuff(\"Ascension10\")) {\n\t\treturn m.getBuff(Ascension10.class).max;\n\t}\n\tif (m.hasBuff(\"Ascension11\")) {\n\t\treturn m.getBuff(Ascension11.class).max;\n\t}\n\tif (m.hasBuff(\"Ascension12\")) {\n\t\treturn m.getBuff(Ascension12.class).max;\n\t}\n\tif (m.hasBuff(\"Ascension13\")) {\n\t\treturn m.getBuff(Ascension13.class).max;\n\t}\n\tif (m.hasBuff(\"Ascension14\")) {\n\t\treturn m.getBuff(Ascension14.class).max;\n\t}\n\tif (m.hasBuff(\"Ascension15\")) {\n\t\treturn m.getBuff(Ascension15.class).max;\n\t}\n\tif (m.hasBuff", "CodeBleu_score": 17.66683205502687}, {"code": "public static int AscensionCorruptResist(Mob m){\n\t\tif (m.hasBuff(\"Ascension\")) {\n\t\treturn m.getBuff(\"Ascension\").getVal();\n\t}\n\tif (m.hasBuff(\"Ascension2\")) {\n\t\treturn m.getBuff(\"Ascension2\").getVal();\n\t}\n\tif (m.hasBuff(\"Ascension3\")) {\n\t\treturn m.getBuff(\"Ascension3\").getVal();\n\t}\n\tif (m.hasBuff(\"Ascension4\")) {\n\t\treturn m.getBuff(\"Ascension4\").getVal();\n\t}\n\tif (m.hasBuff(\"Ascension5\")) {\n\t\treturn m.getBuff(\"Ascension5\").getVal();\n\t}\n\tif (m.hasBuff(\"Ascension6\")) {\n\t\treturn m.getBuff(\"Ascension6\").getVal();\n\t}\n\tif (m.hasBuff(\"Ascension7\")) {\n\t\treturn m.getBuff(\"Ascension7\").getVal();\n\t}\n\tif (m.hasBuff(\"Ascension8\")) {\n\t\treturn m.getBuff(\"Ascension8\").getVal();\n\t}\n\tif (m.hasBuff(\"Ascension9\")) {\n\t\treturn m.getBuff(\"Ascension9\").getVal();\n\t}\n\tif (m.hasBuff(\"Ascension10\")) {\n\t\treturn m.getBuff(\"Ascension10\").getVal();\n\t}\n\tif (m.hasBuff(\"Ascension11\")) {\n\t\treturn m.getBuff(\"Ascension11\").getVal();\n\t}\n\tif (m.hasBuff(\"Ascension12\")) {\n\t\treturn m.getBuff(\"Ascension12\").getVal();\n\t}\n\tif (m.hasBuff(\"Ascension13\")) {\n\t\treturn m.getBuff(\"Ascension13\").getVal();\n\t}\n\tif (m.hasBuff(\"Ascension14\")) {\n\t\treturn m.getBuff(\"Ascension14\").getVal();\n\t}\n\tif (m.hasBuff(\"Ascension15\")) {\n\t\treturn m.getBuff(\"Ascension15\").getVal();\n\t}\n\tif (m.hasBuff(\"Ascension16\")) {\n\t\treturn m.getBuff(\"", "CodeBleu_score": 15.738829355225322}, {"code": "public static int AscensionCorruptResist(Mob m){\n\t\tint resist = 0;\n\tif (m.hasAscensionEffect()) {\n\t\tresist = m.getAscensionEffect();\n\t} else if (m.isTransformed()) {\n\t\tresist = AscensionCorruptResist(m.getOriginal());\n\t} else if (m.hasAscensionBuff()) {\n\t\tresist = m.getAscensionBuff();\n\t} else if (m.isSpecialReward()) {\n\t\tresist = 10;\n\t} else if (m.isElemental()) {\n\t\tresist = 13;\n\t} else {\n\t\tresist = Math.max(m.getEXP(), 13);\n\t}\n\treturn resist;\n}", "CodeBleu_score": 23.21814667488034}]}
{"instance_id": "bdc8df5952c7", "generation_result": [{"code": "public void hit( Char enemy ){\n\t\t// Increment combo count\n\tcomboCount++;\n\n\t// Set combo timer\n\tif ( enemy.isAlive() && !enemy.hasBuff( \"Corruption\" ) ) {\n\t\t// Set initial combo time\n\t\tif ( comboTimer == 0 ) {\n\t\t\tcomboTimer = 120;\n\t\t}\n\n\t\t// Extend combo timer based on talent points\n\t\telse {\n\t\t\tcomboTimer += talentPointsInCleave;\n\t\t}\n\t}\n\n\t// Trigger action indicators\n\tsetAction( enemy );\n\n\t// Validate mastery combos\n\tvalidateMasteryCombo( enemy );\n\n\t// Log combo count\n\tlogComboCount();\n\n\t// Refresh hero's buff indicator visually\n\trefreshHero();\n}", "CodeBleu_score": 17.373089053878015}, {"code": "public void hit( Char enemy ){\n\t\tif ( enemy.isDead() ) {\n\t\treturn;\n\t}\n\n\tif ( enemy.hasBuff( Corruption.class ) && enemy.getBuff( Corruption.class ).getDuration() >= enemy.getBuff( Corruption.class ).getInitialDuration() ) {\n\t\tsetComboTimer( getComboTimer() + ( 1.0f + ( 0.1f * getTalentPointsInCleave() ) ) );\n\t} else {\n\t\tsetComboTimer( getComboTimer() + 1.0f );\n\t}\n\n\tsetAction( enemy );\n\n\tvalidateMasteryCombo( enemy );\n\n\tif ( getComboCount() > 0 ) {\n\t\tlogCombo();\n\t}\n\n\trefreshHero();\n}", "CodeBleu_score": 20.3391392454269}, {"code": "public void hit( Char enemy ){\n\t\t// Increment combo count\n\tcomboCount++;\n\t\n\t// Set combo timer\n\tif ( enemy.isAlive() ) {\n\t\tif ( enemy.hasBuff(\"Corruption\") && enemy.getBuff(\"Corruption\").getDuration() == enemy.getBuff(\"Corruption\").getInitialDuration() ) {\n\t\t\tcomboTimer = comboTimer + ( 0.25 * talentPointsInCleave );\n\t\t} else {\n\t\t\tcomboTimer = comboTimer + 0.25;\n\t\t}\n\t} else {\n\t\tcomboTimer = comboTimer + 0.25;\n\t}\n\t\n\t// Trigger action indicators\n\tsetAction( \"hit\" );\n\t\n\t// Validate mastery combos\n\tvalidateMasteryCombo();\n\t\n\t// Log combo count\n\tlogComboCount();\n\t\n\t// Refresh hero's buff indicator visually\n\trefreshHero();\n}", "CodeBleu_score": 24.197719868419284}]}
{"instance_id": "abf7c664b4dd", "generation_result": [{"code": "public int capacity(){\n\t(1)\n    int capacity = BASE_CAPACITY;\n    for (Item item : inventory) {\n        capacity += item.capacity();\n    }\n    if (equippedWeapon != null) {\n        capacity -= equippedWeapon.capacity();\n    }\n    return capacity;\n}", "CodeBleu_score": 19.974080852578798}, {"code": "public int capacity(){\n\t_\n  int capacity = BASE_CAPACITY;\n  for (Item item : inventory) {\n    if (item.isBag()) {\n      capacity += item.capacity();\n    }\n  }\n  if (equippedWeapon != null && equippedWeapon.isBag()) {\n    capacity -= equippedWeapon.capacity();\n  }\n  return capacity;\n}", "CodeBleu_score": 26.100627324950693}, {"code": "public int capacity(){\n\t_\n\tint capacity = BASE_CAPACITY;\n\tfor (BagItem item : inventory) {\n\t\tcapacity += item.getWeight();\n\t}\n\tif (equippedWeapon != null) {\n\t\tcapacity -= equippedWeapon.getWeight();\n\t}\n\treturn capacity;\n}", "CodeBleu_score": 15.851573449666981}]}
{"instance_id": "b97e41e092d2", "generation_result": [{"code": "public void updateHT( boolean boostHP ){\n\t\t// Base formula\n\tHT = (int) ( 100 + ( 0.1 * level ) );\n\n\t// Adjust for RingOfMight buff\n\tif ( buff == RingOfMight ) {\n\t\tHT *= 1.1;\n\t}\n\n\t// Adjust for ElixirOfMight buff\n\tif ( buff == ElixirOfMight ) {\n\t\tHT *= 1.2;\n\t}\n\n\t// Increase current health if boosting\n\tif ( boostHP ) {\n\t\tHP += boost;\n\t\tif ( HP > HT ) {\n\t\t\tHP = HT;\n\t\t}\n\t}\n\n\t// Ensure HP does not exceed HT\n\tif ( HP > HT ) {\n\t\tHP = HT;\n\t}\n}", "CodeBleu_score": 17.083533202778813}, {"code": "public void updateHT( boolean boostHP ){\n\t\t// If the character is dead, do nothing\n\tif ( this.isDead() ) {\n\t\treturn;\n\t}\n\n\t// Calculate the HT base formula\n\tfloat HT = this.getLevel() * 100;\n\n\t// Apply the RingOfMight multiplier\n\tHT *= this.getBuffedStat( RingOfMight.class ).getMultiplier();\n\n\t// Apply the ElixirOfMight multiplier\n\tHT *= this.getBuffedStat( ElixirOfMight.class ).getMultiplier();\n\n\t// Apply the HT multiplier\n\tHT *= this.getHTMultiplier();\n\n\t// Apply the HT buff\n\tHT += this.getBuffedStat( HTBuff.class ).getBuff();\n\n\t// Apply the HT boost\n\tHT += this.getBoost( HTBoost.class );\n\n\t// If boostHP is true, increase current health by the HT boost\n\tif ( boostHP ) {\n\t\tthis.setHP( this.getHP() + this.getBoost( HTBoost.class ) );\n\t}\n\n\t// Ensure HP does not exceed the new HT value\n\tif ( this.getHP() > HT ) {\n\t\tthis.setHP( HT );\n\t}\n\n\t// Ensure HT does not exceed the maximum value\n\tif ( HT > this.getMaxHT() ) {\n\t\tthis.setMaxHT( HT );\n\t}\n}", "CodeBleu_score": 24.40585140579613}, {"code": "public void updateHT( boolean boostHP ){\n\t\tint newHT = 0;\n\tint HTMultiplier = 1;\n\tint boost = 0;\n\tint buff = 0;\n\tint max = 0;\n\tint min = 0;\n\tint HP = 0;\n\n\t// Calculate HT based on level\n\tnewHT = (int) Math.floor( ( ( ( ( 1.0 / 2.0 ) * ( level + 4 ) ) * ( level + 1 ) ) / 2 ) * level );\n\n\t// Calculate HT boosts from buffs\n\tif ( buffs.containsKey( \"RingOfMight\" ) ) {\n\t\tbuff = buffs.get( \"RingOfMight\" );\n\t\tnewHT += buff;\n\t}\n\tif ( buffs.containsKey( \"ElixirOfMight\" ) ) {\n\t\tbuff = buffs.get( \"ElixirOfMight\" );\n\t\tnewHT += buff;\n\t}\n\n\t// Calculate HT multiplier from buffs\n\tif ( buffs.containsKey( \"RingOfMight\" ) ) {\n\t\tbuff = buffs.get( \"RingOfMight\" );\n\t\tHTMultiplier += buff;\n\t}\n\tif ( buffs.containsKey( \"ElixirOfMight\" ) ) {\n\t\tbuff = buffs.get( \"ElixirOfMight\" );\n\t\tHTMultiplier += buff;\n\t}\n\n\t// Calculate HT boosts from boosts\n\tif ( boosts.containsKey( \"Health\" ) ) {\n\t\tboost = boosts.get( \"Health\" );\n\t\tnewHT += boost;\n\t}\n\n\t// Calculate HT multiplier from boosts\n\tif ( boosts.containsKey( \"Health\" ) ) {\n\t\tboost = boosts.get( \"Health\" );\n\t\tHTMultiplier += boost;\n\t}\n\n\t// Calculate max HT\n\tmax = newHT * HTMultiplier;\n\n\t// Calculate min HT\n\tmin = (int) Math.floor( ( ( ( ( 1.0 / 2.0 ) * ( level + 4 ) ) * ( level + 1 ) ) / 2 ) * level );\n\n\t// Update HT\n\tHT = newHT;\n\n\t// Update max HT\n\tmaxHT = max;\n\n\t// Update min HT\n\tminHT = min;", "CodeBleu_score": 21.04129842027442}]}
{"instance_id": "b72bd91544e7", "generation_result": [{"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t\tboolean hit = false;\n\tboolean isEnemy = false;\n\tboolean isNeutral = false;\n\tboolean isEnemyMimic = false;\n\tboolean isNeutralMimic = false;\n\tboolean isEnemyMimic2 = false;\n\tboolean isNeutralMimic2 = false;\n\tboolean isEnemyMimic3 = false;\n\tboolean isNeutralMimic3 = false;\n\tboolean isEnemyMimic4 = false;\n\tboolean isNeutralMimic4 = false;\n\tboolean isEnemyMimic5 = false;\n\tboolean isNeutralMimic5 = false;\n\tboolean isEnemyMimic6 = false;\n\tboolean isNeutralMimic6 = false;\n\tboolean isEnemyMimic7 = false;\n\tboolean isNeutralMimic7 = false;\n\tboolean isEnemyMimic8 = false;\n\tboolean isNeutralMimic8 = false;\n\tboolean isEnemyMimic9 = false;\n\tboolean isNeutralMimic9 = false;\n\tboolean isEnemyMimic10 = false;\n\tboolean isNeutralMimic10 = false;\n\tboolean isEnemyMimic11 = false;\n\tboolean isNeutralMimic11 = false;\n\tboolean isEnemyMimic12 = false;\n\tboolean isNeutralMimic12 = false;\n\tboolean isEnemyMimic13 = false;\n\tboolean isNeutralMimic13 = false;\n\tboolean isEnemyMimic14 = false;\n\tboolean isNeutralMimic14 = false;\n\tboolean isEnemyMimic15 = false;\n\tboolean isNeutralMimic15 = false;\n\tboolean isEnemyMimic16 = false;\n\tboolean isNeutralMimic16 = false;\n\tboolean isEnemyMimic17 = false;\n\tboolean isNeutralMimic17 = false;\n\tboolean isEnemyMimic18 = false;\n\tboolean isNeutralMimic18 = false;\n\tboolean isEnemyMimic19 = false;\n\tboolean isNeutralMimic19 = false;\n\tboolean isEnemyMimic20 = false;\n\tboolean isNeutralMimic20 = false;\n\tboolean isEnemyMimic21 = false;\n\tboolean isNeutralMimic21 = false;\n\tboolean isEnemyM", "CodeBleu_score": 6.120698912493689}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t\tboolean hit = false;\n\tboolean isEnemy = false;\n\tboolean isNeutral = false;\n\tboolean isMimic = false;\n\tboolean isGiant = false;\n\tboolean isBoss = false;\n\n\t// check if the enemy is an enemy or a neutral mimic\n\tif ( enemy instanceof Enemy ) {\n\t\tisEnemy = true;\n\t} else if ( enemy instanceof Mimic ) {\n\t\tisMimic = true;\n\t\tif ( enemy.getAlignment() == Alignment.NEUTRAL ) {\n\t\t\tisNeutral = true;\n\t\t}\n\t}\n\n\t// check if the enemy is a giant or a boss\n\tif ( enemy instanceof Giant ) {\n\t\tisGiant = true;\n\t} else if ( enemy instanceof Boss ) {\n\t\tisBoss = true;\n\t}\n\n\t// attempt the attack\n\tif ( wep.isThrown() ) {\n\t\tif ( isEnemy || isNeutral ) {\n\t\t\thit = enemy.attack( wep.getDamage() );\n\t\t} else if ( isMimic ) {\n\t\t\thit = enemy.attack( wep.getDamage() );\n\t\t}\n\t} else {\n\t\tif ( isEnemy || isNeutral ) {\n\t\t\thit = enemy.attack( wep.getDamage() );\n\t\t} else if ( isMimic ) {\n\t\t\thit = enemy.attack( wep.getDamage() );\n\t\t} else if ( isGiant ) {\n\t\t\thit = enemy.attack( wep.getDamage() );\n\t\t} else if ( isBoss ) {\n\t\t\thit = enemy.attack( wep.getDamage() );\n\t\t}\n\t}\n\n\t// if the attack hits and the character is a Gladiator or Duelist, apply combo buffs\n\tif ( hit && ( this instanceof Gladiator || this instanceof Duelist ) ) {\n\t\tif ( isEnemy || isNeutral ) {\n\t\t\tif ( wep.getCombo() == Combo.STRONGER ) {\n\t\t\t\tthis.buff( Buff.STRENGTH, 1 );\n\t\t\t\tthis.buff( Buff.DEFENSE, 1 );\n\t\t\t} else if ( wep.getCombo() == Combo.WEAKER ) {\n\t\t\t\tthis.buff( Buff.DEFENSE, 1 );\n\t\t\t\tthis", "CodeBleu_score": 21.56455661413368}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t\tif ( enemy.alignment == Alignment.ENEMY ) {\n\t\twep.setThrown(true);\n\t\tboolean hit = enemy.hit( wep );\n\t\twep.setThrown(false);\n\t\tif ( hit && (alignment == Alignment.GLADIATOR || alignment == Alignment.DUELIST) ) {\n\t\t\tcombo++;\n\t\t\tif ( combo == 1 ) {\n\t\t\t\tenemy.applyBuff( Buff.COMBO1 );\n\t\t\t} else if ( combo == 2 ) {\n\t\t\t\tenemy.applyBuff( Buff.COMBO2 );\n\t\t\t} else if ( combo == 3 ) {\n\t\t\t\tenemy.applyBuff( Buff.COMBO3 );\n\t\t\t} else if ( combo == 4 ) {\n\t\t\t\tenemy.applyBuff( Buff.COMBO4 );\n\t\t\t} else if ( combo == 5 ) {\n\t\t\t\tenemy.applyBuff( Buff.COMBO5 );\n\t\t\t}\n\t\t}\n\t\treturn hit;\n\t} else {\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 23.519931870471545}]}
{"instance_id": "f265b39b6677", "generation_result": [{"code": "public int attackSkill( Char target ){\n\t\tint skill = baseAttackSkill;\n\tint weapon = attackingWeapon;\n\tint accuracy = accuracyFactor;\n\tint accuracyMultiplier = accuracyMultiplier();\n\tint buff = buff();\n\tint fightingUnarmed = fightingUnarmed();\n\tint adjacent = adjacent();\n\n\t// Adjust the accuracy based on the weapon type and proximity to the target.\n\tif ( weapon == WEAPON_TYPE_MELEE ) {\n\t\taccuracy *= 1.5;\n\t} else if ( weapon == WEAPON_TYPE_RANGED ) {\n\t\taccuracy *= 0.75;\n\t} else if ( weapon == WEAPON_TYPE_MAGIC ) {\n\t\taccuracy *= 0.5;\n\t}\n\n\t// Adjust the accuracy based on buffs.\n\tif ( buff == BUFF_TYPE_ACCURACY ) {\n\t\taccuracy *= 1.25;\n\t} else if ( buff == BUFF_TYPE_ACCURACY_ALL ) {\n\t\taccuracy *= 1.5;\n\t} else if ( buff == BUFF_TYPE_ACCURACY_MELEE ) {\n\t\taccuracy *= 1.5;\n\t} else if ( buff == BUFF_TYPE_ACCURACY_RANGED ) {\n\t\taccuracy *= 1.0;\n\t} else if ( buff == BUFF_TYPE_ACCURACY_MAGIC ) {\n\t\taccuracy *= 0.5;\n\t} else if ( buff == BUFF_TYPE_ACCURACY_MELEE_ALL ) {\n\t\taccuracy *= 1.75;\n\t} else if ( buff == BUFF_TYPE_ACCURACY_RANGED_ALL ) {\n\t\taccuracy *= 1.25;\n\t} else if ( buff == BUFF_TYPE_ACCURACY_MAGIC_ALL ) {\n\t\taccuracy *= 0.75;\n\t}\n\n\t// Adjust the accuracy based on fighting unarmed.\n\tif ( fightingUnarmed == FIGHTING_UNARMED_TYPE_MELEE ) {\n\t\taccuracy *= 1.5;\n\t} else if ( fightingUnarmed == FIGHTING_UNARMED_TYPE_RANGED ) {\n\t\taccuracy *= 0.75;\n\t} else if (", "CodeBleu_score": 24.980007600368094}, {"code": "public int attackSkill( Char target ){\n\t\tint skill = getBaseAttack();\n\tint accuracyFactor = 1;\n\tint accuracyMultiplier = 1;\n\tint fightingUnarmed = 0;\n\tint adjacent = 0;\n\n\tif ( getWeapon() != null ) {\n\t\tfightingUnarmed = getWeapon().getFightingUnarmed();\n\t\tadjacent = getWeapon().getAdjacent();\n\t}\n\n\tif ( target == null ) {\n\t\treturn skill;\n\t}\n\n\t// Adjust accuracy based on weapon type\n\tif ( fightingUnarmed > 0 ) {\n\t\taccuracyFactor = fightingUnarmed;\n\t}\n\n\t// Adjust accuracy based on distance to target\n\tint distance = getDistance( target );\n\tif ( distance > 1 ) {\n\t\taccuracyFactor += ( distance - 1 ) * 2;\n\t}\n\n\t// Adjust accuracy based on buffs\n\tif ( hasBuff( \"Accuracy Bonus\" ) ) {\n\t\taccuracyFactor += getBuff( \"Accuracy Bonus\" ).getFactor();\n\t}\n\n\t// Adjust accuracy based on target's defense\n\tif ( hasBuff( \"Defense Bonus\" ) ) {\n\t\taccuracyFactor -= getBuff( \"Defense Bonus\" ).getFactor();\n\t}\n\n\t// Adjust accuracy based on target's defense\n\tif ( hasBuff( \"Defense Bonus\" ) ) {\n\t\taccuracyFactor -= getBuff( \"Defense Bonus\" ).getFactor();\n\t}\n\n\t// Adjust accuracy based on target's defense\n\tif ( hasBuff( \"Defense Bonus\" ) ) {\n\t\taccuracyFactor -= getBuff( \"Defense Bonus\" ).getFactor();\n\t}\n\n\t// Adjust accuracy based on target's defense\n\tif ( hasBuff( \"Defense Bonus\" ) ) {\n\t\taccuracyFactor -= getBuff( \"Defense Bonus\" ).getFactor();\n\t}\n\n\t// Adjust accuracy based on target's defense\n\tif ( hasBuff( \"Defense Bonus\" ) ) {\n\t\taccuracyFactor -= getBuff( \"Defense Bonus\" ).getFactor();\n\t}\n\n\t// Adjust accuracy based on target's defense\n\tif ( hasBuff( \"Defense Bonus\" ) ) {\n\t\taccuracyFactor -= getBuff( \"Defense", "CodeBleu_score": 22.35450948842334}, {"code": "public int attackSkill( Char target ){\n\t\tint attackSkill = 0;\n\tint baseAttack = 0;\n\tint weaponType = 0;\n\tint attackBonus = 0;\n\tint accuracyFactor = 0;\n\tint accuracyMultiplier = 0;\n\tint fightingUnarmed = 0;\n\tint buff = 0;\n\tint attackingWeapon = 0;\n\tint adjacent = 0;\n\tint attackBonusMultiplier = 0;\n\tint attackBonusMultiplier2 = 0;\n\tint attackBonusMultiplier3 = 0;\n\tint attackBonusMultiplier4 = 0;\n\tint attackBonusMultiplier5 = 0;\n\tint attackBonusMultiplier6 = 0;\n\tint attackBonusMultiplier7 = 0;\n\tint attackBonusMultiplier8 = 0;\n\tint attackBonusMultiplier9 = 0;\n\tint attackBonusMultiplier10 = 0;\n\tint attackBonusMultiplier11 = 0;\n\tint attackBonusMultiplier12 = 0;\n\tint attackBonusMultiplier13 = 0;\n\tint attackBonusMultiplier14 = 0;\n\tint attackBonusMultiplier15 = 0;\n\tint attackBonusMultiplier16 = 0;\n\tint attackBonusMultiplier17 = 0;\n\tint attackBonusMultiplier18 = 0;\n\tint attackBonusMultiplier19 = 0;\n\tint attackBonusMultiplier20 = 0;\n\tint attackBonusMultiplier21 = 0;\n\tint attackBonusMultiplier22 = 0;\n\tint attackBonusMultiplier23 = 0;\n\tint attackBonusMultiplier24 = 0;\n\tint attackBonusMultiplier25 = 0;\n\tint attackBonusMultiplier26 = 0;\n\tint attackBonusMultiplier27 = 0;\n\tint attackBonusMultiplier28 = 0;\n\tint attackBonusMultiplier29 = 0;\n\tint attackBonusMultiplier30 = 0;\n\tint attackBonusMultiplier31 = 0;\n\tint attackBonusMultiplier32 = 0;\n\tint attackBonusMultiplier33 = 0;\n\tint attackBonusMultiplier34 = 0;\n\tint attackBonusMultiplier35 = 0;\n\tint attackBonusMultiplier36 = 0", "CodeBleu_score": 7.170622445550046}]}
{"instance_id": "9e50c198348d", "generation_result": [{"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\t_profile(repeats, printResults, operation)}", "CodeBleu_score": 36.08139980018532}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\t_profile(repeats, printResults, operation)}", "CodeBleu_score": 36.08139980018532}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\t_profile(repeats, printResults, operation)}", "CodeBleu_score": 36.08139980018532}]}
{"instance_id": "5f6e11998a1f", "generation_result": [{"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t\tval behaviorTree = BehaviorTree(rootTask, blackboard)\n\tbehaviorTree.init()\n\treturn behaviorTree\n}", "CodeBleu_score": 70.821951670428}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t\n}", "CodeBleu_score": 29.962864407193813}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t}", "CodeBleu_score": 29.962864407193813}]}
{"instance_id": "cdda12e45fb9", "generation_result": [{"code": "onPointerOver (){\n\t\tif (this.selected) {\n\t\tthis.selected = false;\n\t\tthis.map.selectedCell.x = -1;\n\t\tthis.map.selectedCell.y = -1;\n\t\tthis.map.selectedCell.z = -1;\n\t\tthis.map.selectedCell.tile = null;\n\t}\n\tthis.selected = true;\n\tthis.map.selectedCell.x = this.x;\n\tthis.map.selectedCell.y = this.y;\n\tthis.map.selectedCell.z = this.z;\n\tthis.map.selectedCell.tile = this.tile;\n\tthis.map.selectedCell.related.forEach(function(cell) {\n\t\tcell.setTint(0x0000ff);\n\t});\n\tthis.setTint(0x00ff00);\n\tif (this.tile.heightmap) {\n\t\tthis.tile.heightmap.alpha = 0.5;\n\t}\n}", "CodeBleu_score": 26.65360946189168}, {"code": "onPointerOver (){\n\t\t// update the selected cell coordinates\n\tthis.map.selectedCellX = this.x;\n\tthis.map.selectedCellY = this.y;\n\n\t// highlight the current cell and its related cells by changing their tint color\n\tthis.related.forEach(cell => {\n\t\tcell.setTint(0x000000);\n\t});\n\tthis.setTint(0x000000);\n\n\t// adjust the transparency of the cell's heightmap polygons if they exist\n\tif (this.heightmapGraphics) {\n\t\tthis.heightmapGraphics.setAlpha(0.5);\n\t}\n}", "CodeBleu_score": 13.420799488593971}, {"code": "onPointerOver (){\n\t\t// If the cell is not already selected, update the selected cell coordinates and highlight the current cell and its related cells.\n\tif (this.selected === false) {\n\t\tthis.selected = true;\n\t\tthis.scene.map.selectedCell = this.coordinates;\n\t\tthis.scene.map.highlightRelated(this.coordinates);\n\t\tthis.scene.map.highlightSelected(this.coordinates);\n\t\tthis.scene.map.updateHeightmap(this.coordinates);\n\t}\n}", "CodeBleu_score": 12.275483398460075}]}
{"instance_id": "850931ce3401", "generation_result": [{"code": "getTrafficDensity (){\n\t\tif (this.trafficDensity == 'light') {\n\t\treturn 'light'\n\t} else if (this.trafficDensity == 'heavy') {\n\t\treturn 'heavy'\n\t} else {\n\t\treturn null\n\t}\n}", "CodeBleu_score": 21.281677759710753}, {"code": "getTrafficDensity (){\n\t\tconst light = 0.25;\n\tconst heavy = 0.75;\n\tconst currentValue = this.getTrafficDensityValue();\n\tif (currentValue < light) {\n\t\treturn null;\n\t}\n\tif (currentValue < heavy) {\n\t\treturn 'light';\n\t}\n\treturn 'heavy';\n}", "CodeBleu_score": 26.053918664208098}, {"code": "getTrafficDensity (){\n\t\tif (this.trafficDensity == 'heavy') {\n\t\treturn this.trafficDensity\n\t} else if (this.trafficDensity == 'light') {\n\t\treturn this.trafficDensity\n\t} else {\n\t\tif (this.trafficDensity < this.trafficDensityThresholds.light) {\n\t\t\tthis.trafficDensity = 'light'\n\t\t\treturn this.trafficDensity\n\t\t} else if (this.trafficDensity > this.trafficDensityThresholds.heavy) {\n\t\t\tthis.trafficDensity = 'heavy'\n\t\t\treturn this.trafficDensity\n\t\t} else {\n\t\t\treturn null\n\t\t}\n\t}\n}", "CodeBleu_score": 19.897761137305864}]}
{"instance_id": "5958478bf873", "generation_result": [{"code": "restart: function (){\n\t\tthis.setFrame(0);\n\tthis.onStart.dispatch();\n}", "CodeBleu_score": 10.94704811241707}, {"code": "restart: function (){\n\t\tthis._currentValue = this._parent.getFrame();\n\tthis._currentValue = this._currentValue - 1;\n\tif (this._currentValue < this._lightThreshold) {\n\t\treturn null;\n\t}\n\telse if (this._currentValue < this._heavyThreshold) {\n\t\treturn 'light';\n\t}\n\telse {\n\t\treturn 'heavy';\n\t}\n}", "CodeBleu_score": 14.926851154047577}, {"code": "restart: function (){\n\tthis.onRestart.dispatch", "CodeBleu_score": 35.94618868756901}]}
{"instance_id": "d2441e586d58", "generation_result": [{"code": "flash: function (color, duration, force, alpha){\n\t\tif (!this.visible) { return false; }\n\tif (!force && this.fx.flash) { return false; }\n\tif (!color) { color = 'white'; }\n\tif (!duration) { duration = 500; }\n\tif (!alpha) { alpha = 0.5; }\n\tthis.fx.clear();\n\tthis.fx.beginFill(color);\n\tthis.fx.drawRect(0, 0, this.width, this.height);\n\tthis.fx.endFill();\n\tthis.fx.flash = {\n\t\tstart: Date.now(),\n\t\tduration: duration,\n\t\talpha: alpha\n\t};\n\treturn true;\n}", "CodeBleu_score": 48.105888155019}, {"code": "flash: function (color, duration, force, alpha){\n\t\tif (typeof color === 'undefined') {\n\t\tcolor = 0;\n\t}\n\tif (typeof duration === 'undefined') {\n\t\tduration = 100;\n\t}\n\tif (typeof force === 'undefined') {\n\t\tforce = false;\n\t}\n\tif (typeof alpha === 'undefined') {\n\t\talpha = 0.5;\n\t}\n\tif (this.fx.clear() && this.visible) {\n\t\tthis.fx.beginFill(color, alpha);\n\t\tthis.fx.drawRect(this.x - this.width / 2, this.y - this.height / 2, this.width, this.height);\n\t\tthis.fx.endFill();\n\t\tthis.fx.visible = true;\n\t\tthis.fx.alpha = alpha;\n\t\tthis.fx.duration = duration;\n\t\tthis.fx.force = force;\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 57.25659326197188}, {"code": "flash: function (color, duration, force, alpha){\n\t\tif (!this.visible) {\n\t\treturn false;\n\t}\n\tif (typeof duration === 'undefined') {\n\t\tduration = 100;\n\t}\n\tif (typeof force === 'undefined') {\n\t\tforce = false;\n\t}\n\tif (typeof alpha === 'undefined') {\n\t\talpha = 1;\n\t}\n\tif (this.fx.clear() || force) {\n\t\tthis.fx.beginFill(color);\n\t\tthis.fx.drawRect(this.x, this.y, this.width, this.height);\n\t\tthis.fx.endFill();\n\t\tthis.fx.alpha = alpha;\n\t\tthis.fx.start(duration);\n\t}\n\treturn true;\n}", "CodeBleu_score": 57.48095545315658}]}
{"instance_id": "48b26381d975", "generation_result": [{"code": "createFluidLayer: function (children, addToWorld){\n\t\tvar layer = new createjs.FlexLayer();\n\tlayer.name = \"Fluid Layer\";\n\tlayer.mouseEnabled = false;\n\tlayer.mouseChildren = false;\n\tlayer.snapToPixel = true;\n\tlayer.scaleX = 1;\n\tlayer.scaleY = 1;\n\tlayer.regX = 0;\n\tlayer.regY = 0;\n\tlayer.x = 0;\n\tlayer.y = 0;\n\tlayer.rotation = 0;\n\tlayer.compositeOperation = \"lighter\";\n\tlayer.alpha = 1;\n\tlayer.visible = true;\n\tlayer.filters = [];\n\tlayer.cacheCanvas = null;\n\tlayer.cacheID = -1;\n\tlayer.mask = null;\n\tlayer.shadow = null;\n\tlayer.compositeOperation = \"lighter\";\n\tlayer.composite = \"lighter\";\n\tlayer.compositeBase = \"source-over\";\n\tlayer.transformMatrix = null;\n\tlayer.hitArea = null;\n\tlayer.hitAreaShape = null;\n\tlayer.cursor = \"default\";\n\tlayer.buttonMode = false;\n\tlayer.alpha = 1;\n\tlayer.shadow = null;\n\tlayer.compositeOperation = \"lighter\";\n\tlayer.composite = \"lighter\";\n\tlayer.compositeBase = \"source-over\";\n\tlayer.transformMatrix = null;\n\tlayer.visible = true;\n\tlayer.alpha = 1;\n\tlayer.mouseChildren = false;\n\tlayer.mouseEnabled = false;\n\tlayer.snapToPixel = true;\n\tlayer.scaleX = 1;\n\tlayer.scaleY = 1;\n\tlayer.regX = 0;\n\tlayer.regY = 0;\n\tlayer.x = 0;\n\tlayer.y = 0;\n\tlayer.rotation = 0;\n\tlayer.compositeOperation = \"lighter\";\n\tlayer.alpha = 1;\n\tlayer.visible = true;\n\tlayer.filters = [];\n\tlayer.cacheCanvas = null;\n\tlayer.cacheID = -1;\n\tlayer.mask = null;\n\tlayer.shadow = null;\n\tlayer.compositeOperation", "CodeBleu_score": 11.784983277443395}, {"code": "createFluidLayer: function (children, addToWorld){\n\t\tvar layer = new Phaser.FlexLayer(this.game, this.width, this.height, this.tileWidth, this.tileHeight, this.maxObjects, this.debug);\n\tthis.layers.push(layer);\n\tif (addToWorld) {\n\t\tthis.game.world.add(layer);\n\t}\n\tif (children) {\n\t\tlayer.addMultiple(children);\n\t}\n\treturn layer;\n}", "CodeBleu_score": 56.918858849188716}, {"code": "createFluidLayer: function (children, addToWorld){\n\t\tvar layer = new createjs.FlexLayer();\n\tlayer.name = \"Fluid Layer \" + this.layers.length;\n\tlayer.setDensity(0.1);\n\tlayer.setSpeed(0.1);\n\tlayer.setAcceleration(0.01);\n\tlayer.setDamping(0.01);\n\tlayer.setRestitution(0.01);\n\tthis.layers.push(layer);\n\tif (addToWorld) {\n\t\tthis.game.world.add(layer);\n\t}\n\tif (children) {\n\t\tlayer.addMultiple(children);\n\t}\n\treturn layer;\n}", "CodeBleu_score": 46.10390159122814}]}
{"instance_id": "624c9e2eb19f", "generation_result": [{"code": "createFullLayer: function (children){\n\t\tvar layer = new Phaser.FlexLayer(this.game, this.game.world, this.game.world.bounds, this.scale);\n\tthis.layers.push(layer);\n\tthis.game.world.add(layer);\n\tif (children) {\n\t\tlayer.addMultiple(children);\n\t}\n\treturn layer;\n}", "CodeBleu_score": 58.82690256261771}, {"code": "createFullLayer: function (children){\n\t\tvar layer = new Phaser.FlexLayer(this.game, this.position.x, this.position.y, this.bounds.x, this.bounds.y, this.scale);\n\tthis.game.world.add(layer);\n\tthis.layers.push(layer);\n\tif (children) {\n\t\tlayer.addMultiple(children);\n\t}\n\treturn layer;\n}", "CodeBleu_score": 61.94642744903194}, {"code": "createFullLayer: function (children){\n\t\tvar layer = this.game.add.flexLayer(this.game.world, this.position.x, this.position.y, this.bounds.x, this.bounds.y, this.scale.x, this.scale.y);\n\tthis.layers.push(layer);\n\tif (children) {\n\t\tlayer.addMultiple(children);\n\t}\n\treturn layer;\n}", "CodeBleu_score": 56.97815774310235}]}
{"instance_id": "1c7529bca3ce", "generation_result": [{"code": "crop: function (rect, copy){\n\t\tif (rect) {\n\t\tif (copy) {\n\t\t\tthis.cropRect.setTo(rect.x, rect.y, rect.width, rect.height);\n\t\t} else {\n\t\t\tthis.cropRect.copyFrom(rect);\n\t\t}\n\t\tthis.updateCrop();\n\t} else {\n\t\tthis.resetFrame();\n\t}\n}", "CodeBleu_score": 29.79617668627439}, {"code": "crop: function (rect, copy){\n\t\tif (rect) {\n\t\tif (copy) {\n\t\t\tthis.cropRect.copyFrom(rect);\n\t\t} else {\n\t\t\tthis.cropRect.setTo(rect);\n\t\t}\n\t\tthis.updateCrop();\n\t} else {\n\t\tthis.resetFrame();\n\t}\n}", "CodeBleu_score": 16.84018202749184}, {"code": "crop: function (rect, copy){\n\t\tif (rect) {\n\t\tthis.cropRect.setTo(rect);\n\t\tif (copy) {\n\t\t\tthis.copyCrop();\n\t\t} else {\n\t\t\tthis.updateCrop();\n\t\t}\n\t} else {\n\t\tthis.resetFrame();\n\t}\n}", "CodeBleu_score": 14.1707625968526}]}
{"instance_id": "d767b9ea9212", "generation_result": [{"code": "move: function (x, y, wrap){\n\t\tif (x) {\n\t\tthis.moveH(x, wrap);\n\t}\n\tif (y) {\n\t\tthis.moveV(y, wrap);\n\t}\n\treturn this;\n}", "CodeBleu_score": 51.684474181262274}, {"code": "move: function (x, y, wrap){\n\t\tif (x) {\n\t\tthis.moveH(x, wrap);\n\t}\n\tif (y) {\n\t\tthis.moveV(y, wrap);\n\t}\n\treturn this;\n}", "CodeBleu_score": 51.684474181262274}, {"code": "move: function (x, y, wrap){\n\t\tif (x) {\n\t\tthis.moveH(x, wrap);\n\t}\n\tif (y) {\n\t\tthis.moveV(y, wrap);\n\t}\n\treturn this;\n}", "CodeBleu_score": 51.684474181262274}]}
{"instance_id": "c7cf015114f3", "generation_result": [{"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\n}", "CodeBleu_score": 2.220777169396903}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\n}", "CodeBleu_score": 2.220777169396903}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\n}", "CodeBleu_score": 2.220777169396903}]}
{"instance_id": "e0294cb83ca3", "generation_result": [{"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\n}", "CodeBleu_score": 5.476186467129299}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\n}", "CodeBleu_score": 5.476186467129299}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\n}", "CodeBleu_score": 5.476186467129299}]}
{"instance_id": "2fca91787d6c", "generation_result": [{"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\tif (typeof cull === 'undefined') { cull = true; }\n\n\tif (cull) {\n\t\t// Calculate face normal\n\t\tvar a = new Phaser.Point(points[0].x - points[2].x, points[0].y - points[2].y);\n\t\tvar b = new Phaser.Point(points[1].x - points[2].x, points[1].y - points[2].y);\n\t\tvar normal = new Phaser.Point(a.y * b.x - a.x * b.y, a.x * b.y - a.y * b.x);\n\n\t\t// Check if normal points away from camera\n\t\tvar dot = normal.x * this.camera.worldView.x + normal.y * this.camera.worldView.y + normal.z * this.camera.worldView.z;\n\t\tif (dot > 0) {\n\t\t\tthis.drawPolygon(points, true);\n\t\t}\n\t} else {\n\t\tthis.drawPolygon(points, true);\n\t}\n}", "CodeBleu_score": 48.196465783842434}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\tvar x1 = points[0].x;\n\tvar y1 = points[0].y;\n\tvar x2 = points[1].x;\n\tvar y2 = points[1].y;\n\tvar x3 = points[2].x;\n\tvar y3 = points[2].y;\n\n\tif (cull) {\n\t\tvar normal = new Phaser.Point();\n\t\tnormal.x = (y2 - y1) * (x3 - x1) - (x2 - x1) * (y3 - y1);\n\t\tnormal.y = (y3 - y1) * (x2 - x1) - (x3 - x1) * (y2 - y1);\n\t\tvar cameraToFace = new Phaser.Point(this.game.camera.x - x1, this.game.camera.y - y1);\n\t\tvar dot = normal.x * cameraToFace.x + normal.y * cameraToFace.y;\n\t\tif (dot > 0) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tthis.moveTo(x1, y1);\n\tthis.lineTo(x2, y2);\n\tthis.lineTo(x3, y3);\n\tthis.lineTo(x1, y1);\n}", "CodeBleu_score": 37.6947619563451}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\tif (cull === undefined) { cull = true; }\n\n\tif (cull)\n\t{\n\t\t//  If culling is enabled, calculate the normal of the face\n\t\tvar a = points[0];\n\t\tvar b = points[1];\n\t\tvar c = points[2];\n\n\t\tvar ba = new Phaser.Vec2(b.x - a.x, b.y - a.y);\n\t\tvar ca = new Phaser.Vec2(c.x - a.x, c.y - a.y);\n\n\t\tvar normal = ba.cross(ca);\n\n\t\t//  If the normal is facing away from the camera, don't draw it\n\t\tif (normal.dot(this._cameraPosition) < 0)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t}\n\n\tthis.drawPolygon(points);\n}", "CodeBleu_score": 32.9863863347408}]}
{"instance_id": "5d227ea7f97b", "generation_result": [{"code": "checkVideoProgress: function (){\n\t\tif (this.video.readyState === this.video.HAVE_ENOUGH_DATA) {\n\t\tthis.video.pause();\n\t\tthis.video.currentTime = 0;\n\t\tthis.texture.needsUpdate = true;\n\t\tthis.sourceNeedsUpdate = false;\n\t\tthis.hasLoaded = true;\n\t\tthis.emit('loaded');\n\t} else if (this.video.readyState > 0 && this.retries > 0) {\n\t\tthis.retries--;\n\t\tconsole.warn('Video element is stalled and will be automatically retried (' + this.retries + ' attempts left).');\n\t\twindow.setTimeout(this.checkVideoProgress.bind(this), 100);\n\t} else {\n\t\tthis.hasLoaded = false;\n\t\tthis.emit('error', 'Video could not be loaded, either because the server or network failed or because the format is not supported.');\n\t}\n}", "CodeBleu_score": 32.72678934018948}, {"code": "checkVideoProgress: function (){\n\t\tif (this.video.readyState === this.video.HAVE_ENOUGH_DATA) {\n\t\tthis.video.pause();\n\t\tthis.video.currentTime = 0;\n\t\tthis.texture.needsUpdate = true;\n\t\tthis.video.play();\n\t\tthis.hasStarted = true;\n\t\tthis.retryCount = 0;\n\t\tthis.dispatchEvent({ type: 'canplaythrough' });\n\t} else {\n\t\tif (this.retryCount < this.maxRetries) {\n\t\t\tthis.retryCount++;\n\t\t\tthis.warn('Video failed to load, retrying... (' + this.retryCount + '/' + this.maxRetries + ')');\n\t\t\tthis.timeout = setTimeout(this.checkVideoProgress.bind(this), this.retryInterval);\n\t\t} else {\n\t\t\tthis.warn('Video failed to load, retry limit reached');\n\t\t\tthis.dispatchEvent({ type: 'error', message: 'Video failed to load' });\n\t\t}\n\t}\n}", "CodeBleu_score": 32.88890590100224}, {"code": "checkVideoProgress: function (){\n\t\tif (this.video.readyState === this.video.HAVE_ENOUGH_DATA) {\n\t\tthis.video.pause();\n\t\tthis.video.currentTime = this.video.duration * this.loop;\n\t\tthis.texture.needsUpdate = true;\n\t\tthis.retryCount = 0;\n\t\tthis.emit('loaded');\n\t} else {\n\t\tthis.retryCount++;\n\t\tif (this.retryCount > this.maxRetries) {\n\t\t\tthis.emit('error', new Error('Video failed to load after ' + this.maxRetries + ' retries'));\n\t\t} else {\n\t\t\tthis.emit('retry');\n\t\t\twindow.setTimeout(this.checkVideoProgress.bind(this), 100);\n\t\t}\n\t}\n}", "CodeBleu_score": 34.41661753935954}]}
{"instance_id": "e48c3c53f00a", "generation_result": [{"code": "start: function (event, value){\n\t\tif (this.state !== 'down') {\n\t\tthis.state = 'down'\n\t\tthis.onDown.dispatch(this.state, value)\n\t}\n\tthis.time = Date.now()\n\tthis.repeatCounter = 0\n\tthis.repeatDelay = this.delay\n\tthis.repeatInterval = this.interval\n\tif (event) {\n\t\tthis.alt = event.altKey\n\t\tthis.ctrl = event.ctrlKey\n\t\tthis.shift = event.shiftKey\n\t}\n}", "CodeBleu_score": 37.02510632769491}, {"code": "start: function (event, value){\n\t\tif (!this.isDown) {\n\t\tthis.isDown = true;\n\t\tthis.time = this.now();\n\t\tthis.value = value;\n\t\tthis.altKey = event.altKey;\n\t\tthis.ctrlKey = event.ctrlKey;\n\t\tthis.shiftKey = event.shiftKey;\n\t\tthis.onDown.dispatch(this.state, this.value);\n\t}\n}", "CodeBleu_score": 37.96205686124802}, {"code": "start: function (event, value){\n\t\tif (this.state === 0) {\n\t\tthis.state = 1;\n\t\tthis.time = 0;\n\t\tthis.count = 0;\n\t\tthis.alt = event.altKey;\n\t\tthis.ctrl = event.ctrlKey;\n\t\tthis.shift = event.shiftKey;\n\t\tthis.onDown.dispatch(this.state, value);\n\t}\n}", "CodeBleu_score": 31.282046838458637}]}
{"instance_id": "a2cb3bdacb1e", "generation_result": [{"code": "onMouseDown: function (event){\n\t\t// Store event\n\tthis.mouseDownEvent = event;\n\t// Prevent default behavior\n\tif (this.mouseDownPreventDefault) {\n\t\tevent.preventDefault();\n\t}\n\t// Invoke callback\n\tif (this.mouseDownCallback) {\n\t\tthis.mouseDownCallback.call(this, event);\n\t}\n\t// Initialize mouse pointer\n\tif (this.input.mousePointer.enabled) {\n\t\tthis.input.mousePointer.start(event);\n\t}\n}", "CodeBleu_score": 47.47069156666783}, {"code": "onMouseDown: function (event){\n\t\tthis.mouseDownEvent = event;\n\tif (this.mouseDownCallback) {\n\t\tevent.preventDefault();\n\t\tthis.mouseDownCallback.call(this);\n\t}\n\tif (this.input.enabled) {\n\t\tthis.input.mousePointer.start(event);\n\t}\n}", "CodeBleu_score": 38.10652751314515}, {"code": "onMouseDown: function (event){\n\t\tif (this.mouseDownCallback) {\n\t\tthis.mouseDownCallback(event);\n\t}\n\tif (this.preventDefault) {\n\t\tevent.preventDefault();\n\t}\n\tif (this.input) {\n\t\tthis.input.mousePointer.start(event);\n\t}\n}", "CodeBleu_score": 32.60916768963501}]}
{"instance_id": "88538a5b66e8", "generation_result": [{"code": "onMouseUpGlobal: function (event){\n\t\tthis.mouseUpEvent = event;\n\tthis.mouseUpCallback.call(this, event);\n\tthis.mouseUpEvent = null;\n\tif (this.mouseDownEvent) {\n\t\tif (this.mouseDownEvent.preventDefault) {\n\t\t\tthis.mouseDownEvent.preventDefault();\n\t\t}\n\t\tif (this.mouseDownEvent.stopPropagation) {\n\t\t\tthis.mouseDownEvent.stopPropagation();\n\t\t}\n\t}\n\tif (this.input.enabled) {\n\t\tthis.input.mousePointer.stop();\n\t\tthis.input.mousePointer.start(this.mouseUpEvent);\n\t}\n}", "CodeBleu_score": 31.156109457009133}, {"code": "onMouseUpGlobal: function (event){\n\t\tif (this.mouseUpCallback) {\n\t\tthis.mouseUpCallback.call(this, event);\n\t}\n\tif (this.input.mousePointer.enabled) {\n\t\tthis.input.mousePointer.onMouseUp(event);\n\t}\n\tif (this.preventDefaultOnMouseUp) {\n\t\tevent.preventDefault();\n\t}\n}", "CodeBleu_score": 43.91703300484442}, {"code": "onMouseUpGlobal: function (event){\n\t\tif (this.enabled) {\n\t\tthis.mouseUpCallback.call(this, event);\n\t\tif (this.input.mousePointer.enabled) {\n\t\t\tevent.identifier = this.input.mousePointer.identifier;\n\t\t\tthis.input.mousePointer.onMouseUp(event);\n\t\t}\n\t}\n}", "CodeBleu_score": 39.85326992546833}]}
{"instance_id": "bf8b43ab3487", "generation_result": [{"code": "onTouchEnter: function (event){\n\tif (this.game.input.enabled && this.inputEnabled) {\nthis.touchEnterCallback.call(this.callbackContext, event);\nevent.preventDefault();\n}\n}", "CodeBleu_score": 21.017133830973357}, {"code": "onTouchEnter: function (event){\n\t\tif (this.enabled && this.game.input.enabled && this.touchEnterCallback) {\n\t\tthis.touchEnterEvent = event;\n\t\tthis.touchEnterCallback.call(this.touchEnterContext, event);\n\t\tevent.preventDefault();\n\t}\n}", "CodeBleu_score": 39.106481815446834}, {"code": "onTouchEnter: function (event){\n\t\tif (this.enabled && this.game.input.enabled) {\n\t\tthis.touchEnterEvent = event;\n\t\tif (this.touchEnterCallback) {\n\t\t\tthis.touchEnterCallback.call(this.touchEnterContext, event);\n\t\t}\n\t\tif (this.preventDefault) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n}", "CodeBleu_score": 56.27270082074391}]}
