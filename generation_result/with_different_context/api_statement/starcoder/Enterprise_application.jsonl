{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = request.args.getlist('id')\n    if not attachment_ids:\n        raise werkzeug.exceptions.BadRequest(gettext('No attachment ID provided.'))\n    attachments = Attachment.search([('id', 'in', attachment_ids)])\n    if not attachments:\n        raise werkzeug.exceptions.NotFound(gettext('No attachment found.'))\n    for attachment in attachments:\n        if not attachment.res_model or not attachment.res_id:\n            raise werkzeug.exceptions.BadRequest(gettext('Invalid attachment ID: %(id)s.', id=attachment.id))\n        if attachment.res_model != self._name or attachment.res_id != int(args.get('id')):\n            raise werkzeug.exceptions.BadRequest(gettext('Invalid attachment ID: %(id)s.', id=attachment.id))\n        if not attachment.can_access_from(request):\n            raise werkzeug.exceptions.Forbidden()\n        if not attachment.can_access_attachment_from(request):\n            raise werkzeug.exceptions.Forbidden()\n    return _build_zip_from_attachments(attachments)\n\n", "CodeBleu_score": 26.100975495485685}, {"code": "def export_zip_documents(self, **args)\n\t\n    # pylint: disable=unused-argument\n    # TODO: remove this function when the zip export is implemented\n    return request.make_response(\n        'This function is not yet implemented.', 501)\n\n", "CodeBleu_score": 1.5242556844079904}, {"code": "def export_zip_documents(self, **args)\n\t\n    if not args.get('res_model') or not args.get('res_id'):\n        raise UserError(_(\"You must specify a resource.\"))\n    if not args.get('model'):\n        raise UserError(_(\"You must specify a model.\"))\n    if not args.get('field'):\n        raise UserError(_(\"You must specify a field.\"))\n    if not args.get('filename'):\n        raise UserError(_(\"You must specify a filename.\"))\n    if not args.get('ids'):\n        raise UserError(_(\"You must specify attachment IDs.\"))\n    if not args.get('mimetype'):\n        raise UserError(_(\"You must specify a mimetype.\"))\n    if not args.get('name'):\n        raise UserError(_(\"You must specify a name.\"))\n    if not args.get('datas'):\n        raise UserError(_(\"You must specify datas.\"))\n    if not args.get('datas_fname'):\n        raise UserError(_(\"You must specify datas_fname.\"))\n    if not args.get('db_datas'):\n        raise UserError(_(\"You must specify db_datas.\"))\n    if not args.get('db_datas_fname'):\n        raise UserError(_(\"You must specify db_datas_fname.\"))\n    if not args.get('res_field'):\n        raise UserError(_(\"You must specify res_field.\"))\n    if not args.get('res_fname'):\n        raise UserError(_(\"You must specify res_fname.\"))\n    if not args.get('res_fname2'):\n        raise UserError(_(\"You must specify res_fname2.\"))\n    if not args.get('res_fname3'):\n        raise UserError(_(\"You must specify res_fname3.\"))\n    if not args.get('res_fname4'):\n        raise UserError(_(\"You must specify res_fname4.\"))\n    if not args.get('res_fname5'):\n        raise UserError(_(\"You must specify res_fname5.\"))\n    if not args.get('res_fname6'):\n        raise UserError(_(\"You must specify res_fname6.\"))\n    if not args.get('res_fname7'):\n        raise UserError(_(\"You must specify res_fname7.\"))\n    if not args.get('res_fname8'):\n        raise UserError(_(\"You must specify res_fname8.\"))\n    if not args.get('res_fname9'):\n        raise UserError(_(\"You must specify res_fname9.\"))\n    if not args.get('res_fname10'):\n        raise UserError(_(\"You must", "CodeBleu_score": 12.835263500588026}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(AccountPortal, self)._prepare_home_portal_values(counters)\n    if self.env.user.has_group('account.group_account_invoice'):\n        invoice_domain = [('state', 'in', ['open', 'paid', 'cancel'])]\n        invoice_domain += self.env['account.move'].get_filter_domain(self.env.user)\n        invoice_count = self.env['account.move'].search_count(invoice_domain)\n        values['invoice_count'] = invoice_count\n    if self.env.user.has_group('account.group_account_invoice'):\n        bill_domain = [('state', 'in', ['open', 'paid', 'cancel'])]\n        bill_domain += self.env['account.move'].get_filter_domain(self.env.user)\n        bill_count = self.env['account.move'].search_count(bill_domain)\n        values['bill_count'] = bill_count\n    return values\n", "CodeBleu_score": 43.21256504663666}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(AccountPortal, self)._prepare_home_portal_values(counters)\n    if self.env.user.has_group('account.group_account_invoice'):\n        values['invoice_count'] = self.env['account.move'].search_count(self._get_invoices_domain())\n    if self.env.user.has_group('account.group_account_invoice'):\n        values['bill_count'] = self.env['account.move'].search_count(self._get_bills_domain())\n    return values\n", "CodeBleu_score": 30.03852986466846}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    # check access rights for 'account.move'\n    if self.env['account.move'].check_access_rights('read', raise_exception=False):\n        values['invoice_count'] = counters.get('account.move', 0)\n        values['bill_count'] = counters.get('account.move', 0)\n    return values\n\n", "CodeBleu_score": 18.746241013870684}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    if date_begin:\n        date_begin = datetime.strptime(date_begin, '%Y-%m-%d')\n    if date_end:\n        date_end = datetime.strptime(date_end, '%Y-%m-%d')\n    self.request.session.flash('You are viewing your invoices.')\n    # Get the invoices\n    invoices = self.request.env['account.invoice'].search([('state', 'in', ['open', 'paid']), ('type', 'in', ['out_invoice', 'out_refund']), ('partner_id', '=', self.request.env.user.partner_id.id)])\n    # If date range is specified, filter the invoices\n    if date_begin and date_end:\n        invoices = invoices.filtered(lambda invoice: invoice.date_invoice >= date_begin and invoice.date_invoice <= date_end)\n    # If sortby is specified, sort the invoices\n    if sortby:\n        invoices = invoices.sorted(sortby)\n    # If filterby is specified, filter the invoices\n    if filterby:\n        invoices = invoices.filtered(filterby)\n    # Update the session history with the latest invoice IDs\n    self.request.session['my_invoices'] = invoices.ids\n    # Prepare the values for the invoices page\n    values = self._prepare_my_invoices_values(invoices, page)\n    # Render the invoices page with the prepared values\n    return request.render('account.portal_my_invoices', values)\n\n", "CodeBleu_score": 37.31113038792435}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    if date_begin:\n        date_begin = datetime.strptime(date_begin, '%Y-%m-%d').date()\n    if date_end:\n        date_end = datetime.strptime(date_end, '%Y-%m-%d').date()\n    if not date_begin and not date_end:\n        date_begin = datetime.now().date()\n    if not sortby:\n        sortby = 'date'\n    if not filterby:\n        filterby = 'all'\n    if not self.user.id:\n        self.session.flash('You must be logged in to view your invoices.', 'error')\n        self.redirect(self.url(controller='user', action='login', came_from='portal_my_invoices'))\n    if self.user.id:\n        self.session.history_invoice_ids = []\n    invoices = self.get_invoices(date_begin, date_end, sortby, filterby)\n    if invoices:\n        self.session.history_invoice_ids = [invoice.id for invoice in invoices]\n    values = self._prepare_my_invoices_values(invoices, page, date_begin, date_end, sortby, filterby)\n    return self.render('portal_my_invoices', **values)\n\n", "CodeBleu_score": 36.354404994624886}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    # Update the session history with the latest invoice IDs\n    if date_begin is None:\n        date_begin = request.utcnow.date()\n    if date_end is None:\n        date_end = request.utcnow.date()\n    if sortby is None:\n        sortby = 'date'\n    if filterby is None:\n        filterby = 'all'\n    session.s3.filter = filterby\n    session.s3.sortby = sortby\n    session.s3.date_begin = date_begin\n    session.s3.date_end = date_end\n    # Get the invoices\n    invoices = self._get_my_invoices(page, date_begin, date_end, sortby, filterby)\n    # Render the invoices page\n    return self.render(\"my_invoices.html\",\n                       invoices=invoices,\n                       date_begin=date_begin,\n                       date_end=date_end,\n                       sortby=sortby,\n                       filterby=filterby,\n                       **self._prepare_my_invoices_values(invoices))\n", "CodeBleu_score": 33.068886291927335}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    invoice_sudo = request.env['account.invoice'].sudo().browse(invoice_id)\n    if not invoice_sudo.exists():\n        return request.redirect(\"/my\")\n    invoice_sudo.check_access_rights('read')\n    invoice_sudo.check_access_rule('read')\n    if report_type:\n        if report_type not in ['pdf', 'text', 'html']:\n            report_type = None\n    if report_type:\n        if report_type == 'pdf':\n            if not invoice_sudo.state == 'open':\n                raise werkzeug.exceptions.Forbidden()\n            if not invoice_sudo.type == 'out_invoice':\n                raise werkzeug.exceptions.Forbidden()\n            if not invoice_sudo.sent:\n                raise werkzeug.exceptions.Forbidden()\n            if not invoice_sudo.check_access_rule('read'):\n                raise werkzeug.exceptions.Forbidden()\n            if not invoice_sudo.check_access_rights('read'):\n                raise werkzeug.exceptions.Forbidden()\n            if not invoice_sudo.company_id.country_id.code == 'FR':\n                raise werkzeug.exceptions.Forbidden()\n            if not invoice_sudo.company_id.vat:\n                raise werkzeug.exceptions.Forbidden()\n            if not invoice_sudo.company_id.partner_id.street:\n                raise werkzeug.exceptions.Forbidden()\n            if not invoice_sudo.company_id.partner_id.city:\n                raise werkzeug.exceptions.Forbidden()\n            if not invoice_sudo.company_id.partner_id.zip:\n                raise werkzeug.exceptions.Forbidden()\n            if not invoice_sudo.company_id.partner_id.country_id.code:\n                raise werkzeug.exceptions.Forbidden()\n            if not invoice_sudo.company_id.partner_id.country_id.name:\n                raise werkzeug.exceptions.Forbidden()\n            if not invoice_sudo.company_id.partner_id.country_id.address_format:\n                raise werkzeug.exceptions.Forbidden()\n            if not invoice_sudo.company_id.partner_id.country_id.phone_code:\n                raise werkzeug.exceptions.Forbidden()\n            if not invoice_sudo.company_id.partner_id.country_id.vat_label:\n                raise werkzeug", "CodeBleu_score": 24.518161897304616}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    invoice_sudo = self.env['account.invoice'].sudo().browse(invoice_id)\n    self._document_check_access(invoice_sudo, 'read')\n    if report_type:\n        return self._show_report(invoice_sudo, report_type, download)\n    if download:\n        return self._get_invoice_report_filename(invoice_sudo, report_type)\n    if invoice_sudo.type in ('out_invoice', 'out_refund'):\n        invoice_sudo.check_access_rights('write')\n        invoice_sudo.check_access_rule('write')\n    if invoice_sudo.state == 'open':\n        invoice_sudo.write({'state': 'paid'})\n    if invoice_sudo.type in ('out_invoice', 'out_refund'):\n        invoice_sudo.action_invoice_open()\n    return request.render(\"account.portal_my_invoice_detail\", self._invoice_get_page_view_values(invoice_sudo, access_token=access_token, **kw))\n", "CodeBleu_score": 26.700981461372734}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    invoice_sudo = request.env['account.invoice'].sudo().browse(int(invoice_id))\n    if not invoice_sudo.exists():\n        raise NotFound()\n    invoice_sudo.check_access_rights('read')\n    invoice_sudo.check_access_rule('read')\n    if access_token:\n        if invoice_sudo.access_token != access_token:\n            raise AccessError(_(\"Invalid access token.\"))\n    if report_type:\n        if report_type not in ['html', 'pdf', 'text']:\n            raise UserError(_(\"Invalid report type.\"))\n    if download:\n        if report_type == 'pdf':\n            if not invoice_sudo.state == 'open':\n                raise UserError(_(\"You can only download a posted invoice in PDF format.\"))\n            if not invoice_sudo.journal_id.post_at_bank_rec:\n                raise UserError(_(\"You can only download a posted invoice in PDF format.\"))\n            if not invoice_sudo.payment_ids:\n                raise UserError(_(\"You can only download a posted invoice in PDF format.\"))\n            if not invoice_sudo.partner_bank_id:\n                raise UserError(_(\"You can only download a posted invoice in PDF format.\"))\n            if not invoice_sudo.journal_id.inbound_payment_method_ids:\n                raise UserError(_(\"You can only download a posted invoice in PDF format.\"))\n            if not invoice_sudo.journal_id.outbound_payment_method_ids:\n                raise UserError(_(\"You can only download a posted invoice in PDF format.\"))\n            if not invoice_sudo.journal_id.outbound_payment_method_ids.mapped('payment_type'):\n                raise UserError(_(\"You can only download a posted invoice in PDF format.\"))\n            if not invoice_sudo.journal_id.inbound_payment_method_ids.mapped('payment_type'):\n                raise UserError(_(\"You can only download a posted invoice in PDF format.\"))\n            if not invoice_sudo.journal_id.outbound_payment_method_ids.mapped('payment_type'):\n                raise UserError(_(\"You can only download a posted invoice in PDF format.\"))\n            if not invoice_sudo.journal_id.inbound_payment_method_ids.mapped('payment_type'):\n                raise UserError(_(\"You can only download a posted invoice in PDF format.\"))\n            if not invoice_sudo.journal_id.outbound_payment_method_ids.mapped('payment_type", "CodeBleu_score": 23.524977613093238}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t\n    self.ensure_one()\n    if not company:\n        company = self\n    domain = [('company_id', '=', company.id), ('sale_ok', '=', True), ('purchase_ok', '=', True)]\n    if company.external_report_layout_id:\n        domain.append(('external_report_layout_id', '=', company.external_report_layout_id.id))\n    products = self.env['product.template'].search(domain)\n    if company.account_sale_tax_id:\n        for product in products:\n            product.write({'taxes_id': [(4, company.account_sale_tax_id.id)]})\n    if company.account_purchase_tax_id:\n        for product in products:\n            product.write({'taxes_id': [(4, company.account_purchase_tax_id.id)]})\n    return products\n", "CodeBleu_score": 35.68514918811706}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    if not company:\n        company = self.env.user.company_id\n\n    # Search for product templates based on the company's domain\n    domain = [('company_id', '=', company.id)]\n    if company.partner_id.commercial_partner_id.country_id:\n        domain += [('sale_ok', '=', True), ('sale_taxes_id', 'in', company.partner_id.commercial_partner_id.country_id.sale_taxes_id.ids)]\n        domain += [('purchase_ok', '=', True), ('purchase_taxes_id', 'in', company.partner_id.commercial_partner_id.country_id.purchase_taxes_id.ids)]\n    else:\n        domain += [('sale_ok', '=', True)]\n        domain += [('purchase_ok', '=', True)]\n\n    product_templates = self.search(domain)\n    # Update the sale taxes for the product templates\n    if company.account_sale_tax_id:\n        product_templates.write({'sale_taxes_id': company.account_sale_tax_id.id})\n    # Update the purchase taxes for the product templates\n    if company.account_purchase_tax_id:\n        product_templates.write({'purchase_taxes_id': company.account_purchase_tax_id.id})\n\n    return product_templates\n", "CodeBleu_score": 37.82187510239614}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    if company:\n        domain = [('sale_ok', '=', True), ('purchase_ok', '=', True), ('company_id', '=', company.id)]\n    else:\n        domain = [('sale_ok', '=', True), ('purchase_ok', '=', True)]\n    product_templates = self.env['product.template'].search(domain)\n    if company:\n        if company.account_sale_tax_id:\n            for product_template in product_templates:\n                product_template.write({'taxes_id': [(6, 0, [company.account_sale_tax_id.id])]})\n        if company.account_purchase_tax_id:\n            for product_template in product_templates:\n                product_template.write({'supplier_taxes_id': [(6, 0, [company.account_purchase_tax_id.id])]})\n    return product_templates\n", "CodeBleu_score": 36.63015766552186}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    if company.id:\n        try:\n            return self.env['res.users'].sudo().browse(self.env['ir.model.data'].sudo().get_object_reference('base', xml_id)[1])\n        except:\n            pass\n        try:\n            return self.env['res.partner'].sudo().search([('company_id', '=', company.id), ('is_company', '=', True), ('type', '=', account_type)], limit=1)\n        except:\n            pass\n        try:\n            return self.env['res.partner'].sudo().search([('company_id', '=', company.id), ('is_company', '=', True), ('type', '=', 'contact')], limit=1)\n        except:\n            pass\n    return False\n\n", "CodeBleu_score": 51.75858760746658}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    company_id = company.id\n    domain = [('company_id', '=', company_id), ('type', '=', account_type), ('xml_id', '=', xml_id)]\n    if self.env['account.account'].search(domain):\n        return self.env['account.account'].search(domain)\n    else:\n        domain = [('company_id', '=', company_id), ('type', '=', account_type)]\n        if self.env['account.account'].search(domain):\n            return self.env['account.account'].search(domain)[0]\n        else:\n            return self.env['account.account'].search([('company_id', '=', company_id)])[0]\n", "CodeBleu_score": 49.6766025557392}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    if not company:\n        return False\n    if not xml_id:\n        return False\n    if not account_type:\n        return False\n    try:\n        domain = [('model', '=', 'res.partner'), ('res_id', '=', company.id), ('module', '=', 'base'), ('name', '=', xml_id)]\n        res_id = self.env['ir.model.data'].sudo().search(domain, limit=1).res_id\n        return self.env['res.partner'].sudo().browse(res_id)\n    except:\n        return self.env['res.partner'].sudo().search([('company_id', '=', company.id), ('is_company', '=', True), ('type', '=', account_type)], limit=1)\n", "CodeBleu_score": 45.37228546873322}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    if self.account_type == \"Current Year Earnings\":\n        accounts = frappe.get_all(\n            \"Account\",\n            filters={\n                \"company\": self.company,\n                \"account_type\": \"Current Year Earnings\",\n                \"is_group\": 0,\n            },\n            fields=[\"name\"],\n        )\n        if len(accounts) > 1:\n            raise ValidationError(\n                _(\"There can be only one Current Year Earnings account per company\")\n            )", "CodeBleu_score": 35.79668326042758}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    if self.account_type == \"Current Year Earnings\":\n        accounts = frappe.db.sql(\n            \"\"\"\n            SELECT\n                name,\n                company\n            FROM\n                `tabAccount`\n            WHERE\n                account_type = %(account_type)s AND\n                company = %(company)s AND\n                is_group = 0\n            \"\"\",\n            values={\n                \"account_type\": self.account_type,\n                \"company\": self.company,\n            },\n            as_dict=True,\n        )\n        if len(accounts) > 1:\n            raise ValidationError(\n                _(\n                    \"There can be only one Current Year Earnings account for each company.\"\n                )\n            )", "CodeBleu_score": 28.821735395478864}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    if self.account_type == \"Current Year Earnings\":\n        accounts = frappe.db.sql(\n            \"\"\"\n            SELECT\n                name, company, account_type\n            FROM\n                `tabAccount`\n            WHERE\n                account_type = 'Current Year Earnings' AND\n                company = %s AND\n                is_group = 0 AND\n                name != %s\n            \"\"\",\n            (self.company, self.name),\n            as_dict=1,\n        )\n        if len(accounts) > 0:\n            account_names = \", \".join([account.name for account in accounts])\n            frappe.throw(\n                f\"\"\"There can be only one Current Year Earnings account for each company. Please delete the following accounts: {account_names}\"\"\"\n            )\n\n", "CodeBleu_score": 29.63201345796286}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t.\n    \"\"\"\n    if name and operator in expression.NEGATIVE_TERM_OPERATORS:\n        name = '%%%s%%' % name\n\n    if not domain:\n        domain = []\n\n    if not order:\n        order = 'name asc'\n\n    if not name:\n        if self.env.context.get('partner_id'):\n            domain += ['|', ('partner_id', '=', self.env.context['partner_id']), ('partner_id', '=', False)]\n            order = self._order_accounts_by_frequency_for_partner()\n        else:\n            domain += [('partner_id', '=', False)]\n    else:\n        domain = expression.AND([domain, [('name', operator, name)]])\n\n    return self.search(domain, limit=limit, order=order)\n", "CodeBleu_score": 7.907857997606701}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t, returning the results.\n\n    :param name: The string to search for.\n    :param domain: A list of additional domain criteria.\n    :param operator: The operator to use for matching the name.\n    :param limit: The maximum number of records to return.\n    :param order: The field to sort on.\n    :returns: A list of records that match the search criteria.\n    \"\"\"\n    if name:\n        return super(Account, self)._name_search(name, domain=domain, operator=operator, limit=limit, order=order)\n    elif self._context.get('search_default_account') and self._context.get('partner_id'):\n        return self._order_accounts_by_frequency_for_partner(self._context['partner_id'], limit=limit, order=order)\n    else:\n        return super(Account, self)._name_search(name, domain=domain, operator=operator, limit=limit, order=order)\n", "CodeBleu_score": 13.305993296748264}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t, returning the results.\n\n    :param name: string, the name or number by which to search\n    :param domain: list, optional domain to search within\n    :param operator: string, optional operator for the search, defaults to ilike\n    :param limit: int, optional maximum number of records to return\n    :param order: string, optional field to sort on\n    :returns: list of records that match the search criteria\n    \"\"\"\n    if not name and self.env.context.get('active_model') == 'res.partner' and self.env.context.get('active_id'):\n        # search on the fly, based on number of children and frequency\n        partners = self.env['res.partner'].browse(self.env.context.get('active_id'))\n        children = partners.child_ids\n        if children:\n            # order partners by frequency, using a left outer join to\n            # avoid to count the number of children for partners that have\n            # no transaction\n            query = \"\"\"\n                SELECT\n                    partner.id,\n                    COUNT(DISTINCT account_move_line.partner_id) AS frequency\n                FROM\n                    res_partner partner\n                    LEFT JOIN account_move_line ON (partner.id = account_move_line.partner_id)\n                WHERE\n                    partner.parent_id = %s\n                GROUP BY\n                    partner.id\n                ORDER BY\n                    frequency DESC\n            \"\"\"\n            self._cr.execute(query, (partners.id,))\n            res = self._cr.dictfetchall()\n            partner_ids = [x['id'] for x in res]\n            return self.browse(partner_ids)\n\n        return self.browse(self.env.context.get('active_ids', []))\n\n    return super(AccountMoveLine, self)._name_search(name, domain=domain, operator=operator, limit=limit, order=order)\n", "CodeBleu_score": 23.09906979988944}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t\n    for field in self._fields:\n        if field.name in excluded:\n            continue\n        if field.name == 'name':\n            new_name = new['name']\n            if new_name:\n                new['name'] = self.name_field.update_translations(new_name)\n        else:\n            value = self[field.name]\n            if value:\n                new[field.name] = field.update_translations(value)\n\n", "CodeBleu_score": 39.069350320301304}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    for field in self._fields:\n        if field.name not in excluded:\n            value = self[field.name]\n            if value:\n                new[field.name] = value\n    return new\n", "CodeBleu_score": 19.076011433890592}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    if self.env.lang and new.env.lang:\n        for field in self._fields.values():\n            if field.type == 'many2one' and field.comodel_name == self._name and field.name not in excluded:\n                for lang in self.env.lang:\n                    if self[lang].id:\n                        new_id = self[lang].id\n                        if new_id:\n                            new[lang].id = new_id\n            elif field.type == 'many2many' and field.comodel_name == self._name and field.name not in excluded:\n                for lang in self.env.lang:\n                    if self[lang]:\n                        new[lang] = [(6, 0, self[lang].ids)]\n            elif field.type == 'one2many' and field.comodel_name == self._name and field.name not in excluded:\n                for lang in self.env.lang:\n                    if self[lang]:\n                        for rec in self[lang]:\n                            new_rec = new[lang].new(rec.name)\n                            new_rec.update(rec)\n                            new_rec.id = False\n            elif field.type == 'text' and field.name not in excluded:\n                for lang in self.env.lang:\n                    if self[lang]:\n                        new[lang] = self[lang]\n            elif field.type == 'selection' and field.name not in excluded:\n                for lang in self.env.lang:\n                    if self[lang]:\n                        new[lang] = self[lang]\n            elif field.type == 'char' and field.name not in excluded:\n                for lang in self.env.lang:\n                    if self[lang]:\n                        new[lang] = self[lang]\n            elif field.type == 'html' and field.name not in excluded:\n                for lang in self.env.lang:\n                    if self[lang]:\n                        new[lang] = self[lang]\n            elif field.type == 'date' and field.name not in excluded:\n                for lang in self.env.lang:\n                    if self[lang]:\n                        new[lang] = self[lang]\n            elif field.type == 'datetime' and field.name not in excluded:\n                for lang in self.env.lang:\n                    if self[lang]:\n                        new[lang] = self[lang]\n            elif field.type ==", "CodeBleu_score": 23.69649982137299}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['context'] = {\n        'default_type': 'out_invoice',\n        'default_journal_id': self.env.company.sale_journal_id.id,\n        'search_default_customer': self.id,\n        'search_default_group_by_ref': 1,\n        'search_default_sale_type': self.type,\n        'search_default_date_from': self.invoice_date_due,\n        'search_default_date_to': self.invoice_date_due,\n        'group_by': 'ref,date,journal_id',\n    }\n    action['domain'] = [('move_id.sale_line_ids.order_id', '=', self.id), ('move_id.state', 'in', ['posted', 'cancel'])]\n    return action\n\n", "CodeBleu_score": 32.77383001808587}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['context'] = {\n        'default_type': 'out_invoice',\n        'default_partner_id': self.id,\n        'default_journal_id': self.property_account_receivable_id.id,\n        'search_default_journal_id': self.property_account_receivable_id.id,\n        'default_invoice_origin': self.name,\n    }\n    action['domain'] = [('move_id', 'in', self.env['account.move'].search([('partner_id', '=', self.id), ('type', 'in', ('out_invoice', 'out_refund'))]).ids)]\n    return action\n", "CodeBleu_score": 34.05382189684567}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    action = self.env.ref('account.action_move_out_invoice_type').read()[0]\n    action['context'] = {\n        'default_type': 'out_invoice',\n        'default_journal_id': self.env.ref('account.sales_journal').id,\n        'search_default_customer': self.id,\n        'search_default_draft': 1,\n        'search_default_group_by_type': 1,\n        'search_default_date_from': self.invoice_date,\n        'search_default_date_to': self.invoice_date,\n        'search_default_sale_type': self.type,\n        'search_default_company_id': self.company_id.id,\n    }\n    action['domain'] = [\n        ('customer_id', '=', self.id),\n        ('state', 'in', ['draft', 'posted']),\n        ('type', 'in', ['out_invoice', 'out_refund']),\n        ('journal_id.type', '=', 'sale'),\n        ('analytic_account_id', 'in', self.env['account.analytic.account'].search([('sale_line_id', 'in', self.ids)]).ids),\n    ]\n    return action\n", "CodeBleu_score": 43.10618029767065}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    account_move_lines = self.env['account.move.line'].search([('purchase_line_id', 'in', self.ids), ('account_id.internal_type', 'in', ['receivable', 'payable']), ('reconciled', '=', False)])\n    move_ids = account_move_lines.mapped('move_id').ids\n    return {\n        'name': _('Bills'),\n        'type': 'ir.actions.act_window',\n        'view_type': 'form',\n        'view_mode': 'tree,form',\n        'res_model': 'account.move',\n        'domain': [('id', 'in', move_ids)],\n        'context': {\n            'search_default_purchase_id': self.id,\n            'default_move_type': 'in_invoice',\n        }\n    }\n\n", "CodeBleu_score": 26.739973171397512}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    action = self.env.ref('account.action_move_out_invoice_type')\n    action['context'] = {\n        'search_default_move_type': 'in_invoice',\n        'search_default_purchase_type': self.id,\n        'default_move_type': 'in_invoice',\n        'search_default_journal_id': self.env.ref('account.purchase_journal').id,\n        'default_journal_id': self.env.ref('account.purchase_journal').id,\n        'search_default_partner_id': self.partner_id.id,\n        'default_partner_id': self.partner_id.id,\n        'search_default_partner_ids': self.partner_id.id,\n        'default_partner_ids': self.partner_id.id,\n        'search_default_date_order': self.invoice_date,\n        'default_date_order': self.invoice_date,\n        'search_default_fiscal_year': self.fiscal_year_id.id,\n        'default_fiscal_year': self.fiscal_year_id.id,\n        'search_default_company_id': self.company_id.id,\n        'default_company_id': self.company_id.id,\n        'search_default_amount_total': self.amount_total,\n        'default_amount_total': self.amount_total,\n        'search_default_amount_untaxed': self.amount_untaxed,\n        'default_amount_untaxed': self.amount_untaxed,\n        'search_default_amount_tax': self.amount_tax,\n        'default_amount_tax': self.amount_tax,\n        'search_default_amount_total_company_currency': self.amount_total_company_currency,\n        'default_amount_total_company_currency': self.amount_total_company_currency,\n        'search_default_amount_untaxed_company_currency': self.amount_untaxed_company_currency,\n        'default_amount_untaxed_company_currency': self.amount_untaxed_company_currency,\n        'search_default_amount_tax_company_currency': self.amount", "CodeBleu_score": 21.699606779034237}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    domain = [('move_id', 'in', self.env['account.move'].search([('purchase_id', '=', self.id)]).ids)]\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['context'] = {\n        'search_default_purchase_id': self.id,\n        'search_default_move_type': 'in_invoice',\n        'search_default_partner_id': self.partner_id.id,\n        'default_move_type': 'in_invoice',\n        'search_default_company_id': self.company_id.id,\n        'search_default_date_from': self.date_order,\n        'search_default_date_to': self.date_order,\n        'search_default_partner_id': self.partner_id.id,\n        'search_default_group_by': 'move_id',\n        'search_default_target_move': 'posted',\n        'search_default_period_from': self.date_order,\n        'search_default_period_to': self.date_order,\n        'search_default_journal_ids': self.journal_id.id,\n        'search_default_account_id': self.partner_id.property_account_payable_id.id,\n        'search_default_partner_category_id': self.partner_id.commercial_partner_id.category_id.id,\n        'search_default_analytic_tag_ids': self.analytic_tag_ids.ids,\n        'search_default_analytic_account_ids': self.analytic_account_id.id,\n        'search_default_analytic_tag_ids': self.analytic_tag_ids.ids,\n        'search_default_analytic_tag_ids': self.analytic_tag_ids.ids,\n        'search_default_analytic_tag_ids': self.analytic_tag_ids.ids,\n        'search_default_analytic_tag_ids': self.analytic_tag_ids.ids,\n        'search_default_analytic_tag_ids': self.analytic_tag_ids.ids,\n        'search_default_analytic", "CodeBleu_score": 23.17915626020703}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        values.pop('attachment_ids')\n    with self._check_attachments():\n        return super(AttachmentMixin, self).write(values)\n", "CodeBleu_score": 31.870816849756483}, {"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        values.pop('attachment_ids')\n    with self._check_attachments():\n        return super(AttachmentMixin, self).write(values)\n", "CodeBleu_score": 31.870816849756483}, {"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        values.pop('attachment_ids')\n    with self._check_attachments():\n        return super(self.__class__, self).write(values)\n", "CodeBleu_score": 31.940420638262403}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\t, or an empty record if none is found.\"\"\"\n    self.ensure_one()\n    if self.company_id.bank_account_required:\n        if self.company_id.bank_account_code_prefix:\n            code = self.company_id.bank_account_code_prefix\n        else:\n            code = self.env.company.bank_account_code_prefix\n        if not self.bank_account_id:\n            if self.env.context.get('default_bank_account_code_prefix'):\n                code = self.env.context.get('default_bank_account_code_prefix')\n            if self.env.context.get('default_bank_account_number'):\n                number = self.env.context.get('default_bank_account_number')\n            else:\n                number = self.env['res.partner.bank'].next_bank_number(code)\n            bank_account = self.env['res.partner.bank'].create({\n                'acc_number': number,\n                'partner_id': self.id,\n                'company_id': self.company_id.id,\n                'acc_type': 'bank',\n                'bank_id': self.env.company.bank_id.id,\n                'acc_holder_name': self.name,\n                'bank_account_code_prefix': code,\n            })\n            return bank_account\n        return self.bank_account_id\n    return self.env['res.partner.bank']\n\n", "CodeBleu_score": 0.4745598468032726}, {"code": "def _find_or_create_bank_account(self)\n\t):\"\"\"\n    if self.env.context.get('skip_bank_account_creation'):\n        return self.env['res.partner.bank']\n    if not self.env.user.company_id.bank_account_required:\n        return self.env['res.partner.bank']\n    if not self.bank_ids:\n        return self.env['res.partner.bank']\n    if self.bank_ids.company_id and self.bank_ids.company_id == self.env.user.company_id:\n        return self.bank_ids\n    return self.bank_ids.filtered(lambda bank: bank.company_id == self.env.user.company_id)\n", "CodeBleu_score": 0.3048780487804878}, {"code": "def _find_or_create_bank_account(self)\n\t, or an empty record if none is found.\n    \"\"\"\n    if self.env.context.get('skip_account_creation'):\n        return self.env['res.partner.bank']\n    else:\n        return self.env['res.partner.bank'].search([('acc_number', '=', self.acc_number), ('partner_id', '=', self.id), ('company_id', '=', self.company_id.id)], limit=1)\n", "CodeBleu_score": 1.0492839575868762}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    # Ensure a single record context\n    self.ensure_one()\n    # Retrieve relevant accounting amounts and currencies\n    amount_currency, amount, amount_company_currency, amount_currency_rate = self._get_accounting_amounts_and_currencies()\n    # Compute the transaction amount, journal amount, and company amount using various exchange rates\n    if currency.is_zero(balance):\n        amount_currency = 0.0\n        amount = 0.0\n        amount_company_currency = 0.0\n        amount_currency_rate = 1.0\n    elif currency.is_zero(amount_currency):\n        amount_currency = balance\n        amount = balance\n        amount_company_currency = balance\n        amount_currency_rate = 1.0\n    elif currency.is_zero(amount):\n        amount_currency = amount_currency / amount_currency_rate\n        amount = amount_currency / amount_currency_rate\n        amount_company_currency = amount_company_currency / amount_currency_rate\n    elif currency.is_zero(amount_company_currency):\n        amount_company_currency = amount_company_currency / amount_currency_rate\n        amount_currency = amount_company_currency * amount_currency_rate\n        amount = amount_company_currency * amount_currency_rate\n    elif currency.is_zero(amount_currency_rate):\n        amount_currency_rate = amount_company_currency / amount_currency\n        amount_company_currency = amount_currency * amount_currency_rate\n        amount = amount_currency * amount_currency_rate\n    else:\n        amount_currency = amount_currency / amount_currency_rate\n        amount = amount_currency / amount_currency_rate\n        amount_company_currency = amount_company_currency / amount_currency_rate\n    # Adjust the transaction amount and balance accordingly\n    if self.currency_id.is_zero(balance):\n        balance = 0.0\n    elif self.currency_id.is_zero(amount_currency):\n        balance = balance\n    elif self.currency_id.is_zero(amount):\n        balance = balance\n    elif self.currency_id.is_zero(amount_company_currency):\n        balance = balance\n    elif self.currency_id.is_zero(amount_currency_rate):\n        balance = balance\n    else:\n        balance = balance\n    return {\n        'balance': balance,\n        '", "CodeBleu_score": 27.502964537736986}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    # We need to ensure we are in a single record context.\n    # We will need to access the partner and the company in order to\n    # compute the accounting amounts and currencies.\n    # We will also need to access the currency of the journal and the\n    # company.\n    self = self.with_context(\n        force_company=self.company_id.id,\n        force_journal_id=self.journal_id.id,\n        force_partner_id=self.partner_id.id,\n        force_currency_id=currency.id,\n    )\n    # Retrieve relevant accounting amounts and currencies.\n    debit_amount, credit_amount, amount_currency = self._get_accounting_amounts_and_currencies(\n        balance\n    )\n    # Compute the transaction amount, journal amount, and company amount using\n    # various exchange rates.\n    if currency.is_zero(amount_currency):\n        # The transaction amount is in company currency.\n        # The journal amount is in company currency.\n        # The company amount is in company currency.\n        transaction_amount = balance\n        journal_amount = balance\n        company_amount = balance\n    elif currency.is_zero(debit_amount) and currency.is_zero(credit_amount):\n        # The transaction amount is in foreign currency.\n        # The journal amount is in foreign currency.\n        # The company amount is in foreign currency.\n        transaction_amount = balance\n        journal_amount = balance\n        company_amount = balance\n    elif currency.is_zero(debit_amount):\n        # The transaction amount is in foreign currency.\n        # The journal amount is in company currency.\n        # The company amount is in company currency.\n        transaction_amount = balance\n        journal_amount = balance\n        company_amount = balance\n    elif currency.is_zero(credit_amount):\n        # The transaction amount is in company currency.\n        # The journal amount is in foreign currency.\n        # The company amount is in foreign currency.\n        transaction_amount = balance\n        journal_amount = balance\n        company_amount = balance\n    elif currency.is_zero(debit_amount) and not currency.is_zero(credit_amount):\n        # The transaction amount is in foreign currency.\n        # The journal amount is in foreign currency.\n        # The company amount is in company currency.\n        transaction_amount = balance\n        journal_amount = balance\n        company_amount", "CodeBleu_score": 21.786036087754418}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    # Ensure a single record context\n    self = self.with_context(check_move_validity=False)\n\n    # Retrieve relevant accounting amounts and currencies\n    amount_currency = amount_currency or self.currency_id\n    balance_currency = self.company_currency_id\n    if self.currency_id != self.company_currency_id:\n        balance_currency = self.currency_id\n    amount_currency = amount_currency.with_context(date=self.date)\n    balance_currency = balance_currency.with_context(date=self.date)\n\n    # Compute the transaction amount, journal amount, and company amount using various exchange rates\n    amount_currency_amount = amount_currency._convert(amount_currency.amount, balance_currency, self.company_id, self.date)\n    balance_currency_amount = balance_currency._convert(balance_currency.amount, amount_currency, self.company_id, self.date)\n    amount = amount_currency_amount\n    balance = balance_currency_amount\n    if self.currency_id != self.company_currency_id:\n        amount = amount_currency.amount\n        balance = balance_currency.amount\n    if self.type in ('entry', 'out_invoice', 'in_refund'):\n        journal_amount = amount\n        company_amount = balance\n    elif self.type in ('out_refund', 'in_invoice', 'entry'):\n        journal_amount = -amount\n        company_amount = -balance\n    else:\n        journal_amount = 0.0\n        company_amount = 0.0\n    return {\n        'amount': amount,\n        'balance': balance,\n        'amount_currency': amount_currency,\n        'balance_currency': balance_currency,\n        'journal_amount': journal_amount,\n        'company_amount': company_amount,\n    }\n", "CodeBleu_score": 30.41417421947374}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    self.outbound_payment_method_line_ids = []\n    if self.type in ('bank', 'cash'):\n        for method in self.env['account.payment.method'].search([('payment_type', '=', 'outbound'), ('id', 'in', self.outbound_payment_method_ids.ids)]):\n            self.outbound_payment_method_line_ids += self.env['account.journal.payment.method'].new({'payment_method_id': method.id, 'journal_id': self.id})\n    return True\n\n", "CodeBleu_score": 34.710022448858005}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    self.outbound_payment_method_line_ids = [(5, 0, 0)]\n    if self.type in ('bank', 'cash'):\n        for method in self.env['account.payment.method'].search([('payment_type', '=', 'outbound'), ('id', 'in', self.env['account.journal'].default_outbound_payment_methods.ids)]):\n            self.outbound_payment_method_line_ids += [(0, 0, {'payment_method_id': method.id, 'sequence': method.sequence})]\n    return True\n", "CodeBleu_score": 30.913319410147544}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    self.outbound_payment_method_line_ids = [(5, 0, 0)]\n    if self.type in ('bank', 'cash'):\n        for method in self._default_outbound_payment_methods:\n            self.outbound_payment_method_line_ids += [(0, 0, {'payment_method_id': method.id})]\n", "CodeBleu_score": 17.646755058727408}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t\n    if not self.date:\n        if not self.invoice_date:\n            self.date = fields.Date.context_today(self)\n        else:\n            if not self._affect_tax_report:\n                self.date = self._get_accounting_date()\n            else:\n                if not self.is_sale_document():\n                    self.date = self._get_accounting_date()\n    elif self.date != self._get_accounting_date():\n        self.date = self._get_accounting_date()\n        self.with_context(recompute=True).recompute()\n\n", "CodeBleu_score": 31.85094769097424}, {"code": "def _compute_date(self)\n\t\n    if not self.date:\n        self.date = fields.Date.context_today(self)\n    if not self.date_maturity:\n        self.date_maturity = fields.Date.context_today(self)\n    if not self.date_expected:\n        self.date_expected = fields.Date.context_today(self)\n    if self.invoice_date and not self.is_sale_document():\n        self.date = self.invoice_date\n        self.date_maturity = self.invoice_date\n        self.date_expected = self.invoice_date\n        self.move_type = 'entry'\n        self._affect_tax_report()\n        self._get_accounting_date()\n        if self.date != fields.Date.context_today(self):\n            self.date = fields.Date.context_today(self)\n            self.date_maturity = fields.Date.context_today(self)\n            self.date_expected = fields.Date.context_today(self)\n            self.move_type = 'entry'\n            self._affect_tax_report()\n            self._get_accounting_date()\n    else:\n        self._affect_tax_report()\n        self._get_accounting_date()\n        if self.date != fields.Date.context_today(self):\n            self.date = fields.Date.context_today(self)\n            self.date_maturity = fields.Date.context_today(self)\n            self.date_expected = fields.Date.context_today(self)\n            self.move_type = 'entry'\n            self._affect_tax_report()\n            self._get_accounting_date()\n", "CodeBleu_score": 28.488212363502903}, {"code": "def _compute_date(self)\n\t\n    if self.date:\n        return\n    if self.invoice_date:\n        if not self.is_sale_document():\n            self.date = self._get_accounting_date()\n            self._affect_tax_report()\n        else:\n            self.date = self.invoice_date\n    else:\n        self.date = fields.Date.context_today(self)\n    self.date_maturity = self.date\n", "CodeBleu_score": 22.79721191488474}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\t\n    if self.is_sale_document() and self.partner_id.property_payment_term:\n        self.invoice_payment_term_id = self.partner_id.property_payment_term.id\n    elif self.is_purchase_document() and self.partner_id.property_supplier_payment_term:\n        self.invoice_payment_term_id = self.partner_id.property_supplier_payment_term.id\n    else:\n        self.invoice_payment_term_id = False\n\n", "CodeBleu_score": 29.20495475748368}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    if self.is_sale_document():\n        if self.partner_id.property_supplier_payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.property_supplier_payment_term_id\n        elif self.partner_id.property_payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.property_payment_term_id\n    elif self.is_purchase_document():\n        if self.partner_id.property_purchase_payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.property_purchase_payment_term_id\n        elif self.partner_id.property_payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.property_payment_term_id\n    else:\n        self.invoice_payment_term_id = False\n", "CodeBleu_score": 31.698409116383257}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    if self.is_sale_document():\n        if self.partner_id.property_supplier_payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.property_supplier_payment_term_id\n        else:\n            self.invoice_payment_term_id = False\n    elif self.is_purchase_document():\n        if self.partner_id.property_customer_payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.property_customer_payment_term_id\n        else:\n            self.invoice_payment_term_id = False\n    else:\n        self.invoice_payment_term_id = False\n\n", "CodeBleu_score": 35.928901835946434}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t\n    self.ensure_one()\n    self.tax_group_id = False\n    if self.company_id:\n        tax_group_domain = [('company_id', '=', self.company_id.id), ('country_id', '=', self.country_id.id)]\n        if self.type_tax_use == 'sale':\n            tax_group_domain.append(('type_tax_use', '=', 'sale'))\n        elif self.type_tax_use == 'purchase':\n            tax_group_domain.append(('type_tax_use', '=', 'purchase'))\n        else:\n            tax_group_domain.append(('type_tax_use', '=', False))\n        tax_group = self.env['account.tax.group'].search(tax_group_domain, limit=1)\n        if tax_group:\n            self.tax_group_id = tax_group.id\n    if not self.tax_group_id:\n        tax_group_domain = [('company_id', '=', self.company_id.id), ('country_id', '=', False)]\n        if self.type_tax_use == 'sale':\n            tax_group_domain.append(('type_tax_use', '=', 'sale'))\n        elif self.type_tax_use == 'purchase':\n            tax_group_domain.append(('type_tax_use', '=', 'purchase'))\n        else:\n            tax_group_domain.append(('type_tax_use', '=', False))\n        tax_group = self.env['account.tax.group'].search(tax_group_domain, limit=1)\n        if tax_group:\n            self.tax_group_id = tax_group.id\n", "CodeBleu_score": 26.414231864460515}, {"code": " def _compute_tax_group_id(self)\n\t\n    self.ensure_one()\n    tax_group_id = False\n    company = self.company_id\n    tax_country = self.country_id\n    if tax_country:\n        if company:\n            tax_group_domain = [('country_id', '=', tax_country.id), ('company_id', '=', company.id)]\n            tax_group = self.env['account.tax.group'].search(tax_group_domain, limit=1)\n            if not tax_group:\n                tax_group_domain = [('country_id', '=', False), ('company_id', '=', company.id)]\n                tax_group = self.env['account.tax.group'].search(tax_group_domain, limit=1)\n            if tax_group:\n                tax_group_id = tax_group.id\n        else:\n            tax_group_domain = [('country_id', '=', tax_country.id), ('company_id', '=', False)]\n            tax_group = self.env['account.tax.group'].search(tax_group_domain, limit=1)\n            if tax_group:\n                tax_group_id = tax_group.id\n    return tax_group_id\n", "CodeBleu_score": 32.0928888501822}, {"code": " def _compute_tax_group_id(self)\n\t\n    self.ensure_one()\n    tax_country = self.company_id.country_id\n    tax_company = self.company_id.id\n    tax_group_id = self.env['account.tax.group']\n    # Search for a tax group with the same country and company.\n    tax_group_domain = [\n        ('company_id', '=', tax_company),\n        ('country_id', '=', tax_country.id)\n    ]\n    tax_group = self.env['account.tax.group'].search(tax_group_domain, limit=1)\n    if tax_group:\n        return tax_group.id\n    # Search for a tax group without a specified country but within the same company.\n    tax_group_domain = [\n        ('company_id', '=', tax_company),\n        ('country_id', '=', False)\n    ]\n    tax_group = self.env['account.tax.group'].search(tax_group_domain, limit=1)\n    if tax_group:\n        return tax_group.id\n    # Create a new tax group.\n    tax_group_vals = {\n        'name': tax_country.name + ' - ' + tax_company.name,\n        'company_id': tax_company,\n        'country_id': tax_country.id,\n    }\n    tax_group = self.env['account.tax.group'].create(tax_group_vals)\n    return tax_group.id\n", "CodeBleu_score": 31.12817909970448}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    if self.session.get(url):\n        self.session.post(url, data={'login': login, 'password': password, 'db': db, 'force': force})\n        with open(module_file, 'rb') as f:\n            data = {'file': f}\n            response = self.session.post(urljoin(url, 'base_import_module/login_upload'), files=data)\n            response.raise_for_status()\n            return response.text\n    else:\n        raise Exception('Invalid server URL: {}'.format(url))\n\n", "CodeBleu_score": 42.09706481069047}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set the database in the session by accessing the login URL.\n    self.get(url)\n    # Prepare the POST request data.\n    data = {'login': login, 'password': password, 'db': db, 'force': force}\n    files = {'module_file': open(module_file, 'rb')}\n    # Upload the module file to the server.\n    r = self.post(url + 'base_import_module/login_upload', data=data, files=files)\n    # Raise an exception if the server does not have the required module installed or is outdated.\n    r.raise_for_status()\n    return r.text\n", "CodeBleu_score": 32.28039428805177}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set the database in the session\n    self.get(url)\n    # Prepare the POST request data\n    data = {\n        'login': login,\n        'password': password,\n        'db': db,\n        'force': force,\n    }\n    # Read the module file\n    with open(module_file, 'rb') as f:\n        module_data = f.read()\n    # Upload the module file\n    response = self.post(\n        url + '/base_import_module/login_upload',\n        data=data,\n        files={'module_file': module_data},\n    )\n    # Raise an exception if the server does not have the required module installed or is outdated\n    response.raise_for_status()\n    return response.text\n\n", "CodeBleu_score": 44.70709511944083}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t\n    # Get configuration settings\n    config = get_config()\n    db_name = config['db_name']\n    overwrite = config['overwrite']\n    # Create a new database registry\n    db_registry = odoo.modules.registry.Registry(db_name)\n    # Create a new cursor\n    new_cursor = db_registry.cursor()\n    # Initialize a TranslationImporter\n    importer = TranslationImporter(new_cursor)\n    # Load translation files\n    importer.load_file(config['source_file'])\n    # Save translations\n    importer.save(overwrite)\n    # Close the cursor\n    new_cursor.close()\n", "CodeBleu_score": 18.955309488870814}, {"code": "def import_translation()\n\t\n    # Set up the database registry and cursor\n    db_name = 'odoo12'\n    overwrite = True\n    registry = Registry(db_name)\n    with registry.cursor() as cr:\n        # Create a new TranslationImporter\n        translation_importer = TranslationImporter(cr, overwrite)\n        # Load the translation files\n        translation_importer.load_file('module', 'web', 'fr_FR', 'web-12.0.zip', 'web')\n        translation_importer.load_file('module', 'web', 'fr_FR', 'web-12.0.zip', 'web-responsive')\n        # Save the translations\n        translation_importer.save()\n\n", "CodeBleu_score": 36.446397620998574}, {"code": "def import_translation()\n\t\n    db_name = 'odoo12'\n    overwrite = True\n    registry = odoo.registry(db_name)\n    cursor = registry.cursor()\n    translation_importer = TranslationImporter(cursor, overwrite)\n    translation_importer.save()\n    translation_importer.load_file(os.path.join(os.path.dirname(__file__), 'i18n', 'fr_FR.csv'))\n    translation_importer.load_file(os.path.join(os.path.dirname(__file__), 'i18n', 'fr_FR.po'))\n", "CodeBleu_score": 35.10756522052812}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\t\n    if name not in self.children:\n        node = Node(name, info)\n        node.depth = self.depth + 1\n        node.parent = self\n        self.children[name] = node\n        self.children_list.append(node)\n        self.children_list.sort(key=lambda x: x.name)\n        return node\n    else:\n        return self.children[name]\n\n", "CodeBleu_score": 48.19927946649413}, {"code": "def add_child(self, name, info)\n\t\n    new_node = Node(name, info)\n    new_node.depth = self.depth + 1\n    if not new_node in self.children:\n        self.children.append(new_node)\n    if self.parent:\n        if hasattr(self.parent, 'name'):\n            new_node.name = self.parent.name + ' ' + new_node.name\n        if hasattr(self.parent, 'info'):\n            new_node.info = self.parent.info + ' ' + new_node.info\n        if hasattr(self.parent, 'children'):\n            new_node.children = self.parent.children\n        if hasattr(self.parent, 'attr'):\n            for attr in self.parent.attr:\n                if not hasattr(new_node, attr):\n                    setattr(new_node, attr, getattr(self.parent, attr))\n    new_node.children.sort(key=lambda x: x.name)\n    return new_node\n\n", "CodeBleu_score": 45.796209988467524}, {"code": "def add_child(self, name, info)\n\t\n    if name not in self.children:\n        new_node = Node(name, info)\n        new_node.depth = self.depth + 1\n        new_node.parent = self\n        self.children[name] = new_node\n        self.children.sort()\n        return new_node\n    else:\n        return self.children[name]\n", "CodeBleu_score": 35.7672821430644}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t\n\n    # initialize result\n    result = []\n    for date in dates:\n        result.append({\n            \"account\": account,\n            \"date\": date,\n            \"debit\": 0,\n            \"credit\": 0,\n            \"balance\": 0\n        })\n\n    # determine root type\n    root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n\n    # iterate through entries\n    for entry in gl_entries:\n        if entry.posting_date < dates[0]:\n            # ignore entries before the start date\n            continue\n        if entry.posting_date > dates[-1]:\n            # reached end of entries\n            break\n\n        # find entry in result\n        entry_date_index = dates.index(entry.posting_date)\n\n        # update balance\n        if root_type in [\"Asset\", \"Expense\"]:\n            result[entry_date_index][\"debit\"] += flt(entry.debit)\n            result[entry_date_index][\"credit\"] += flt(entry.credit)\n            result[entry_date_index][\"balance\"] += flt(entry.debit) - flt(entry.credit)\n        else:\n            result[entry_date_index][\"debit\"] += flt(entry.credit)\n            result[entry_date_index][\"credit\"] += flt(entry.debit)\n            result[entry_date_index][\"balance\"] += flt(entry.credit) - flt(entry.debit)\n\n    return result\n\n", "CodeBleu_score": 24.16746742654375}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = frappe._dict()\n    result.update(dates)\n    result.update({\n        \"account\": account.name,\n        \"account_currency\": account.account_currency,\n        \"account_type\": account.root_type,\n        \"root_type\": account.root_type,\n        \"indent\": flt(account.indent),\n        \"is_group\": account.is_group,\n        \"parent_account\": account.parent_account,\n        \"report_type\": \"Balance Sheet\",\n        \"account_name\": account.account_name\n    })\n\n    if result.root_type not in [\"Asset\", \"Expense\", \"Equity\"]:\n        result.update({\n            \"opening_balance\": -1 * result.opening_balance,\n            \"debit_amount\": -1 * result.debit_amount,\n            \"credit_amount\": -1 * result.credit_amount,\n            \"closing_balance\": -1 * result.closing_balance\n        })\n\n    for entry in gl_entries:\n        if entry.posting_date < result.from_date:\n            if result.opening_balance is None:\n                result.opening_balance = 0\n            result.opening_balance += flt(entry.debit) - flt(entry.credit)\n\n        if entry.posting_date <= result.to_date:\n            if entry.is_opening:\n                result.opening_balance += flt(entry.debit) - flt(entry.credit)\n            else:\n                result.debit_amount += flt(entry.debit)\n                result.credit_amount += flt(entry.credit)\n                result.closing_balance += flt(entry.debit) - flt(entry.credit)\n\n    if result.root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n        result.update({\n            \"total_debit\": result.debit_amount,\n            \"total_credit\": result.credit_amount,\n            \"total_amount\": result.debit_amount - result.credit_amount\n        })\n\n    return result\n\n", "CodeBleu_score": 18.148238182298414}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    # Initialize the result with the dates and zero balances\n    result = {}\n    for d in dates:\n        result[d] = 0\n    # Determine the root type of the account\n    root_type = get_root_type(account)\n    # Iterate through the general ledger entries\n    for entry in gl_entries:\n        # Update the balance for the date\n        if entry.posting_date in dates:\n            result[entry.posting_date] += entry.debit_amount - entry.credit_amount\n    # If the root type is not \"Asset\" or \"Expense,\" negate the balances\n    if root_type not in [\"Asset\", \"Expense\"]:\n        for d in dates:\n            result[d] *= -1\n    # If the root type is \"Asset,\" \"Liability,\" or \"Equity,\" accumulate the balance over time\n    if root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n        for i in range(1, len(dates)):\n            result[dates[i]] += result[dates[i - 1]]\n    return result\n\n", "CodeBleu_score": 31.19640274802538}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t\n    if not self.flags.ignore_validate_receivable_payable_account_type:\n        if self.doctype == \"Account\" and self.account_type in [\"Receivable\", \"Payable\"]:\n            if not self.flags.ignore_mandatory:\n                if self.is_new():\n                    # hack! if doc is not saved yet, it will not have a name\n                    # and in that case, it should not be a problem\n                    return\n                elif self.get_doc_before_save().account_type != self.account_type:\n                    # compare the old and new account type\n                    if self.account_type not in [\"Receivable\", \"Payable\"]:\n                        # get all gl entries for this account\n                        gl_entries = frappe.db.sql(\n                            \"\"\"select name from `tabGL Entry` where account=%s\"\"\",\n                            (self.name),\n                            as_dict=True,\n                        )\n                        if gl_entries:\n                            frappe.msgprint(\n                                _(\n                                    \"Warning: Account type has been changed from {0} to {1}. There are existing General Ledger Entries for this account. Please check Accounts report to verify the entries. If the entries are incorrect, please cancel and correct them.\"\n                                ).format(\n                                    self.get_doc_before_save().account_type,\n                                    self.account_type,\n                                ),\n                                title=\"Warning\",\n                                indicator=\"orange\",\n                            )\n                            # add a comment to the account record\n                            self.add_comment(\n                                _(\n                                    \"Account type has been changed from {0} to {1}. There are existing General Ledger Entries for this account. Please check Accounts report to verify the entries. If the entries are incorrect, please cancel and correct them.\"\n                                ).format(\n                                    self.get_doc_before_save().account_type,\n                                    self.account_type,\n                                )\n                            )\n\n", "CodeBleu_score": 31.63329314950153}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.doctype == \"Account\":\n        if self.account_type in [\"Receivable\", \"Payable\"]:\n            if not self.account_type_changed():\n                return\n\n            gl_entries = frappe.db.sql(\n                \"\"\"\n                select name from `tabGL Entry`\n                where account=%s and (is_cancelled = 0 or is_cancelled is null)\n                and (is_opening = 'No' or is_opening is null)\n                and posting_date >= %s and posting_date <= %s\n                limit 1\n                \"\"\",\n                (self.name, self.modified, nowdate()),\n                as_dict=1,\n            )\n            if gl_entries:\n                frappe.msgprint(\n                    _(\n                        \"Changing the account type to a non-receivable/payable account will result in loss of existing ledger entries. Please contact the support team if you need assistance.\"\n                    ),\n                    title=_(\"Account Type Change Warning\"),\n                )\n                self.add_comment(\n                    _(\n                        \"Changing the account type to a non-receivable/payable account will result in loss of existing ledger entries. Please contact the support team if you need assistance.\"\n                    )\n                )\n\n", "CodeBleu_score": 34.12848050652356}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.doctype == \"Account\":\n        if self.account_type in [\"Receivable\", \"Payable\"]:\n            if self.doctype == \"Account\":\n                if self.account_type in [\"Receivable\", \"Payable\"]:\n                    if self.doctype == \"Account\":\n                        if self.account_type in [\"Receivable\", \"Payable\"]:\n                            if self.doctype == \"Account\":\n                                if self.account_type in [\"Receivable\", \"Payable\"]:\n                                    if self.doctype == \"Account\":\n                                        if self.account_type in [\"Receivable\", \"Payable\"]:\n                                            if self.doctype == \"Account\":\n                                                if self.account_type in [\"Receivable\", \"Payable\"]:\n                                                    if self.doctype == \"Account\":\n                                                        if self.account_type in [\"Receivable\", \"Payable\"]:\n                                                            if self.doctype == \"Account\":\n                                                                if self.account_type in [\"Receivable\", \"Payable\"]:\n                                                                    if self.doctype == \"Account\":\n                                                                        if self.account_type in [\"Receivable\", \"Payable\"]:\n                                                                            if self.doctype == \"Account\":\n                                                                                if self.account_type in [\"Receivable\", \"Payable\"]:\n                                                                                    if self.doctype == \"Account\":\n                                                                                        if self.account_type in [\"Receivable\", \"Payable\"]:\n                                                                                            if self.doctype == \"Account\":\n                                                                                                if self.account_type in [\"Receivable\", \"Payable\"]:\n                                                                                                    if self.doctype == \"Account\":\n                                                                                                        if self.account_type in [\"Receivable\", \"Payable\"]:\n                                                                                                            if self.doctype == \"Account\":\n                                                                                                                if self.account_type in [\"Receivable\", \"Payable\"]:\n                                                                                                                    if self.doctype == \"Account\":\n                                                                                                                        if self.account_type in [\"Receivable\", \"Payable\"]:\n                                                                                                                            if self.doctype == \"Account\":\n                                                                                                                                if self.account_type in [\"Receivable\", \"Payable\"]:\n                                                                                                                                    if self.doctype == \"Account\":\n                                                                                                                                        if self.account_type in [\"Receivable\", \"Payable\"]:\n                                                                                                                                            if self.doctype == \"Account\":\n                                                                                                                                                if self.account_type in [\"Receivable\", \"Payable\"]:\n                                                                                                                                                    if self.doctype == \"Account\":\n                                                                                                                                                        if self.account_", "CodeBleu_score": 13.238088638917873}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t\n    # Check if the account is a root node\n    if self.parent_account:\n        # Check if the account currency is explicitly specified\n        if self.account_currency:\n            # Check if the account currency is the same as the company's default currency\n            if self.account_currency != frappe.get_cached_value('Company', self.company, 'default_currency'):\n                # Check if there are existing general ledger entries with a different currency\n                if not frappe.db.sql(\"\"\"SELECT name FROM `tabGL Entry` WHERE account = %s AND company = %s AND posting_date >= %s AND is_cancelled = 0 AND currency != %s\"\"\", (self.name, self.company, self.creation, self.account_currency)):\n                    frappe.msgprint(_(\"Account currency and company default currency are different but there are no existing general ledger entries with a different currency for this account. Please contact your system manager to rectify this issue.\"))\n        else:\n            # Set the account currency to the company's default currency\n            self.account_currency = frappe.get_cached_value('Company', self.company, 'default_currency')\n    else:\n        # Check if the account currency is explicitly specified\n        if self.account_currency:\n            # Check if the account currency is the same as the company's default currency\n            if self.account_currency != frappe.get_cached_value('Company', self.company, 'default_currency'):\n                # Check if there are existing general ledger entries with a different currency\n                if not frappe.db.sql(\"\"\"SELECT name FROM `tabGL Entry` WHERE account = %s AND company = %s AND posting_date >= %s AND is_cancelled = 0 AND currency != %s\"\"\", (self.name, self.company, self.creation, self.account_currency)):\n                    frappe.msgprint(_(\"Account currency and company default currency are different but there are no existing general ledger entries with a different currency for this account. Please contact your system manager to rectify this issue.\"))\n        else:\n            # Set the account currency to the company's default currency\n            self.account_currency = frappe.get_cached_value('Company', self.company, 'default_currency')\n", "CodeBleu_score": 26.914104688994307}, {"code": "def validate_account_currency(self)\n\t\n    if self.account_currency == self.company_currency:\n        self.account_currency = None\n        self.set_default_account_currency()\n    elif self.account_currency != self.company_currency:\n        self.set_default_account_currency()\n        if not self.get(\"ignore_gle_currency_check\"):\n            # check if there are any existing general ledger entries with a different currency\n            # if yes, prevent the user from updating the account currency\n            gle_currency = frappe.db.sql(\n                \"\"\"select distinct account_currency from `tabGL Entry` where account = %s\"\"\",\n                self.name,\n                as_dict=True,\n            )\n            if gle_currency and gle_currency[0].account_currency != self.account_currency:\n                frappe.throw(\n                    _(\n                        \"You are not allowed to change the currency of an account. First, cancel all existing General Ledger Entries with the currency '{0}' and then change the currency of the account.\".format(\n                            gle_currency[0].account_currency\n                        )\n                    )\n                )\n\n", "CodeBleu_score": 29.124645615307603}, {"code": "def validate_account_currency(self)\n\t\n    if not self.currency:\n        self.currency = frappe.get_cached_value('Company',  self.company,  \"default_currency\")\n    elif self.currency != frappe.get_cached_value('Company',  self.company,  \"default_currency\"):\n        self.set_as_explicit_currency()\n        if frappe.db.sql(\"\"\"select name from `tabGL Entry` where account=%s and company=%s and ifnull(is_cancelled, 'No')='No' and currency != %s\"\"\", (self.name, self.company, self.currency)):\n            frappe.throw(_(\"Account {0} has already been entered with currency {1}. You are not allowed to change the currency to {2}\").format(self.name, frappe.db.get_value(\"Account\", self.name, \"currency\"), self.currency))\n\n", "CodeBleu_score": 34.42900843813008}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    # Initialize a dictionary to merge entries\n    merged_entries = {}\n    # Iterate through each entry\n    for entry in entries:\n        # Generate a unique key\n        key = generate_key(entry, accounting_dimensions)\n        # Initialize debit and credit amounts\n        debit = 0\n        credit = 0\n        # Update debit and credit amounts\n        if entry.debit:\n            debit = entry.debit\n        if entry.credit:\n            credit = entry.credit\n        # Update the dictionary\n        merged_entries.setdefault(key, {'debit': debit, 'credit': credit, 'currency': entry.currency})\n        merged_entries[key]['debit'] += debit\n        merged_entries[key]['credit'] += credit\n    # Return the dictionary\n    return merged_entries\n\n", "CodeBleu_score": 32.74142778614826}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key = generate_key(entry, accounting_dimensions)\n        merged_entries.setdefault(key, {'debit': 0, 'credit': 0})\n        merged_entries[key]['debit'] += entry.debit\n        merged_entries[key]['credit'] += entry.credit\n    return merged_entries\n\n", "CodeBleu_score": 29.27567711326346}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n\n    merged_entries = {}\n    for entry in entries:\n        key = generate_key(entry, accounting_dimensions)\n        merged_entries.setdefault(key, {'debit': 0, 'credit': 0})\n        merged_entries[key]['debit'] += entry.debit\n        merged_entries[key]['credit'] += entry.credit\n    return merged_entries\n\n", "CodeBleu_score": 29.27567711326346}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.payment_type == \"Pay\" and self.party_type == \"Supplier\":\n        supplier = frappe.get_doc(\"Supplier\", self.party)\n        if supplier.on_hold and supplier.hold_type == self.doctype:\n            if getdate(self.posting_date) < getdate(supplier.release_date):\n                frappe.throw(\n                    _(\n                        \"Supplier is on hold and release date has not been reached yet.\"\n                    ),\n                    frappe.DocstatusTransitionError,\n                )\n            else:\n                supplier.db_set(\"on_hold\", 0)\n\n", "CodeBleu_score": 24.914477292945314}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.payment_type == \"Receive\" and self.mode_of_payment == \"Supplier Payment\":\n        supplier = frappe.get_doc(\"Supplier\", self.party)\n        if supplier.on_hold and supplier.hold_type == self.doctype:\n            if not supplier.release_date or getdate(self.posting_date) <= supplier.release_date:\n                frappe.throw(_(\"Supplier is on hold and release date has not been set.\"))\n    elif self.payment_type == \"Pay\" and self.mode_of_payment == \"Supplier Payment\":\n        supplier = frappe.get_doc(\"Supplier\", self.party)\n        if supplier.on_hold and supplier.hold_type == self.doctype:\n            if not supplier.release_date or getdate(self.posting_date) <= supplier.release_date:\n                frappe.throw(_(\"Supplier is on hold and release date has not been set.\"))\n    elif self.payment_type == \"Pay\" and self.mode_of_payment == \"Bank Draft\":\n        supplier = frappe.get_doc(\"Supplier\", self.party)\n        if supplier.on_hold and supplier.hold_type == self.doctype:\n            if not supplier.release_date or getdate(self.posting_date) <= supplier.release_date:\n                frappe.throw(_(\"Supplier is on hold and release date has not been set.\"))\n    elif self.payment_type == \"Pay\" and self.mode_of_payment == \"Cheque\":\n        supplier = frappe.get_doc(\"Supplier\", self.party)\n        if supplier.on_hold and supplier.hold_type == self.doctype:\n            if not supplier.release_date or getdate(self.posting_date) <= supplier.release_date:\n                frappe.throw(_(\"Supplier is on hold and release date has not been set.\"))\n    elif self.payment_type == \"Pay\" and self.mode_of_payment == \"Wire Transfer\":\n        supplier = frappe.get_doc(\"Supplier\", self.party)\n        if supplier.on_hold and supplier.hold_type == self.doctype:\n            if not supplier.release_date or getdate(self.posting_date) <= supplier.release_date:\n                frappe.throw(_(\"Supplier is on hold and release date has not been set.\"))\n    elif", "CodeBleu_score": 24.465810440961395}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.supplier:\n        supplier_is_blocked = frappe.db.get_value(\n            \"Supplier\", self.supplier, \"on_hold\")\n        if supplier_is_blocked:\n            if self.doctype == \"Supplier Payment\":\n                if supplier_is_blocked == 1:\n                    self.release_date = None\n                    self.release_date_time = None\n                    self.on_hold_type = \"Supplier Payment\"\n                    self.db_set(\"on_hold\", 0)\n                    self.db_set(\"release_date\", None)\n                    self.db_set(\"release_date_time\", None)\n                    self.db_set(\"on_hold_type\", None)\n                    frappe.msgprint(\n                        _(\"Supplier has been released from on hold\"), alert=True)\n                elif supplier_is_blocked == 2:\n                    self.release_date = None\n                    self.release_date_time = None\n                    self.on_hold_type = \"Supplier Payment\"\n                    self.db_set(\"on_hold\", 0)\n                    self.db_set(\"release_date\", None)\n                    self.db_set(\"release_date_time\", None)\n                    self.db_set(\"on_hold_type\", None)\n                    frappe.msgprint(\n                        _(\"Supplier has been released from on hold\"), alert=True)\n                elif supplier_is_blocked == 3:\n                    if self.on_hold_type == \"Supplier Payment\":\n                        if self.release_date_time and self.release_date:\n                            if getdate(nowdate()) >= getdate(self.release_date):\n                                self.db_set(\"on_hold\", 0)\n                                self.db_set(\"release_date\", None)\n                                self.db_set(\"release_date_time\", None)\n                                self.db_set(\"on_hold_type\", None)\n                                frappe.msgprint(\n                                    _(\"Supplier has been released from on hold\"), alert=True)\n                            else:\n                                frappe.throw(\n                                    _(\"Supplier is on hold till {0}\").format(self.release_date))\n                        else:\n                            frappe.throw(\n                                _(\"Supplier is on hold till {0}\").format(self.release_date))\n                    else:\n                        frappe.throw(\n                            _(\"Supplier is on hold till {0}\").format(self.release_", "CodeBleu_score": 24.4621766995379}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    for doctype in self.get_repost_doctypes():\n        repost_doctype = frappe.get_meta(doctype).get_link_doctype()\n        if not repost_doctype:\n            continue\n        repost_doc = frappe.get_doc(doctype, self.name)\n        repost_doc.remove_linked_doctypes(repost_doctype, self.doctype, self.name)\n\n", "CodeBleu_score": 10.336219417551053}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    if not self.voucher_no:\n        return\n    repost_doctypes = frappe.get_all(\n        \"Repost Item Valuation\",\n        fields=[\"parent\", \"parenttype\", \"parentfield\"],\n        filters={\n            \"voucher_type\": self.doctype,\n            \"voucher_no\": self.name,\n            \"docstatus\": 1,\n        },\n    )\n    if not repost_doctypes:\n        return\n    references_map = frappe._dict()\n    for repost_doctype in repost_doctypes:\n        repost_doc = frappe.get_doc(repost_doctype.parenttype, repost_doctype.parent)\n        if repost_doctype.parentfield == \"repost_vouchers\":\n            for row in repost_doc.get(\"repost_vouchers\"):\n                if row.voucher_type == self.doctype and row.voucher_no == self.name:\n                    references_map.setdefault(\n                        (repost_doctype.parenttype, repost_doc.get(repost_doctype.parentfield)), []\n                    ).append(row)\n        else:\n            for row in repost_doc.get(\"vouchers\"):\n                if row.voucher_type == self.doctype and row.voucher_no == self.name:\n                    references_map.setdefault(\n                        (repost_doctype.parenttype, repost_doc.get(repost_doctype.parentfield)), []\n                    ).append(row)\n    for (parenttype, parentfield), rows in references_map.items():\n        parent = frappe.get_doc(parenttype, parent)\n        parent.flags.ignore_links = True\n        parent.flags.ignore_mandatory = True\n        parent.flags.ignore_validate = True\n        for row in rows:\n            parent.remove(parentfield, row)\n        parent.save()\n\n", "CodeBleu_score": 29.939589747090828}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    if not self.voucher_type:\n        return\n    doctypes = frappe.db.get_all(\n        \"Repost Item Valuation\",\n        filters={\"document_type\": self.voucher_type},\n        fields=[\"parent\"],\n        distinct=True,\n    )\n    if not doctypes:\n        return\n    references_map = frappe._dict()\n    for doctype in doctypes:\n        for d in frappe.db.get_all(\n            \"Repost Item Valuation\",\n            filters={\n                \"document_type\": self.voucher_type,\n                \"parent\": doctype.parent,\n            },\n            fields=[\"parenttype\", \"parent\", \"repost_vouchers\", \"vouchers\"],\n        ):\n            if d.repost_vouchers:\n                repost_vouchers = json.loads(d.repost_vouchers)\n            else:\n                repost_vouchers = []\n            if d.vouchers:\n                vouchers = json.loads(d.vouchers)\n            else:\n                vouchers = []\n            references_map.setdefault(d.parenttype, {}).setdefault(\n                d.parent, {\"repost_vouchers\": [], \"vouchers\": []}\n            )\n            references_map[d.parenttype][d.parent][\"repost_vouchers\"].extend(\n                repost_vouchers\n            )\n            references_map[d.parenttype][d.parent][\"vouchers\"].extend(vouchers)\n    for parenttype, parent_map in references_map.items():\n        for parent, references in parent_map.items():\n            parent_doc = frappe.get_doc(parenttype, parent)\n            if parent_doc.doctype == \"Repost Item Valuation\":\n                continue\n            for repost_voucher in references[\"repost_vouchers\"]:\n                if repost_voucher.voucher_type == self.voucher_type and repost_voucher.voucher_no == self.voucher_no:\n                    parent_doc.repost_vouchers.remove(repost_voucher)\n            for voucher in references[\"vouchers\"]:\n                if voucher.voucher_type == self.voucher_type and voucher.voucher_no == self.voucher_no:\n                    parent_doc.vouchers.remove(voucher)\n            parent_doc.flags.ignore", "CodeBleu_score": 28.90696297849193}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    transactions = []\n    page_number = 1\n    while True:\n        try:\n            # authenticate\n            self.authenticate()\n            # construct query parameters\n            params = {\n                'page': page_number,\n                'start_date': start_date,\n                'end_date': end_date,\n                'account_id': account_id,\n                'page_size': 1000\n            }\n            # fetch transactions\n            response = self.session.get(self.transactions_url, params=params)\n            # handle errors\n            if response.status_code == 401:\n                raise AuthenticationError\n            elif response.status_code == 400:\n                raise InputError\n            elif response.status_code == 404:\n                raise NotFoundError\n            elif response.status_code == 500:\n                raise ServerError\n            # parse response\n            response_json = response.json()\n            # check if there are more pages\n            if response_json['page_metadata']['total_pages'] > page_number:\n                page_number += 1\n            else:\n                break\n            # add transactions to list\n            transactions.extend(response_json['transactions'])\n        except AuthenticationError:\n            self.auth()\n            continue\n        except InputError:\n            frappe.log_error('InputError: {0}'.format(response.text), 'get_transactions')\n            break\n        except NotFoundError:\n            frappe.log_error('NotFoundError: {0}'.format(response.text), 'get_transactions')\n            break\n        except ServerError:\n            frappe.log_error('ServerError: {0}'.format(response.text), 'get_transactions')\n            break\n        except Exception as e:\n            frappe.log_error('Exception: {0}'.format(e), 'get_transactions')\n            break\n    return transactions\n", "CodeBleu_score": 29.702538020859425}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    if not self.auth:\n        self.authenticate()\n\n    transactions = []\n    page_num = 1\n    while True:\n        try:\n            params = self.get_params(start_date, end_date, account_id, page_num)\n            response = requests.get(self.url, params=params, auth=self.auth)\n            response.raise_for_status()\n            response_json = response.json()\n            transactions.extend(response_json['transactions'])\n            if len(transactions) >= response_json['total']:\n                break\n            page_num += 1\n        except requests.exceptions.HTTPError as err:\n            if err.response.status_code == 401:\n                self.authenticate()\n            else:\n                frappe.log_error(str(err), 'Fyle API Error')\n                raise err\n        except Exception as err:\n            frappe.log_error(str(err), 'Fyle API Error')\n            raise err\n    return transactions\n\n", "CodeBleu_score": 35.13096445430804}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    if not self.auth:\n        self.authenticate()\n    transactions = []\n    page_number = 1\n    while True:\n        params = self._build_params(start_date, end_date, account_id, page_number)\n        try:\n            response = requests.get(self.url, params=params, headers=self.headers)\n            response.raise_for_status()\n            response_json = response.json()\n            transactions.extend(response_json[\"transactions\"])\n            if len(transactions) >= response_json[\"total\"]:\n                break\n            else:\n                page_number += 1\n        except requests.exceptions.HTTPError as e:\n            if e.response.status_code == 401:\n                self.authenticate()\n            else:\n                frappe.log_error(e, \"Client Error\")\n                raise e\n        except Exception as e:\n            frappe.log_error(e, \"Client Error\")\n            raise e\n    return transactions\n\n", "CodeBleu_score": 36.09801080074853}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t\n    try:\n        bank = json.loads(response)\n        access_token = plaid.get_access_token(token, bank['institution']['id'])\n        bank['access_token'] = access_token['access_token']\n        bank['last_updated'] = datetime.now()\n        if not frappe.db.exists('Bank', bank['institution']['name']):\n            bank_doc = frappe.get_doc({\n                'doctype': 'Bank',\n                'bank_name': bank['institution']['name'],\n                'bank_id': bank['institution']['id'],\n                'access_token': access_token['access_token']\n            })\n            bank_doc.insert()\n        else:\n            bank_doc = frappe.get_doc('Bank', bank['institution']['name'])\n            bank_doc.access_token = access_token['access_token']\n            bank_doc.save()\n    except Exception as e:\n        frappe.log_error(frappe.get_traceback(), 'Bank Institution Creation Error')\n\n", "CodeBleu_score": 44.22085113840863}, {"code": "def add_institution(token, response)\n\t\n    try:\n        parsed_response = json.loads(response)\n        access_token = plaid.get_access_token(token, parsed_response)\n        bank = frappe.get_doc(\"Bank\", parsed_response[\"institution\"][\"name\"])\n        if not bank:\n            bank = frappe.new_doc(\"Bank\")\n            bank.bank_name = parsed_response[\"institution\"][\"name\"]\n            bank.save()\n        bank.access_token = access_token\n        bank.save()\n    except Exception as e:\n        frappe.log_error(frappe.get_traceback(), _(\"Bank Creation Error\"))\n", "CodeBleu_score": 46.60187478124968}, {"code": "def add_institution(token, response)\n\t\n    try:\n        # Parse the response\n        response_json = json.loads(response)\n\n        # Retrieve an access token using the PlaidConnector\n        access_token = PlaidConnector.get_access_token(token, response_json)\n\n        # Check if the bank already exists in the database\n        bank = frappe.get_doc(\"Bank\", response_json[\"institution\"][\"name\"])\n\n        # If the bank does not exist, create and insert a new bank record\n        if not bank:\n            bank = frappe.new_doc(\"Bank\")\n            bank.bank_name = response_json[\"institution\"][\"name\"]\n            bank.plaid_access_token = access_token\n            bank.save(ignore_permissions=True)\n        # If the bank exists, update the access token for the existing bank record and save it\n        else:\n            bank.plaid_access_token = access_token\n            bank.save(ignore_permissions=True)\n    except Exception as e:\n        # Log any errors that occur during the process\n        frappe.log_error(frappe.get_traceback(), \"Bank Institution Creation Failed\")\n\n", "CodeBleu_score": 45.718640052257584}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        # Get the last integration date\n        last_integration_date = frappe.db.get_value(\"Bank Account\", bank_account, \"last_integration_date\")\n        if not last_integration_date:\n            # If there is no last integration date, set it to the date of the oldest transaction\n            last_integration_date = get_transactions(bank, bank_account)[0].get(\"date\")\n            frappe.db.set_value(\"Bank Account\", bank_account, \"last_integration_date\", last_integration_date)\n        # Get the start and end dates for the transaction retrieval\n        start_date = add_months(last_integration_date, -1)\n        end_date = add_months(last_integration_date, 1)\n        # Get the transactions\n        transactions = get_transactions(bank, bank_account, start_date, end_date)\n        # Process the transactions\n        new_bank_transactions = []\n        for transaction in transactions:\n            # Create a new bank transaction\n            new_bank_transaction = frappe.new_doc(\"Bank Transaction\")\n            new_bank_transaction.update({\n                \"date\": formatdate(transaction.get(\"date\"), \"yyyy-MM-dd\"),\n                \"reference_number\": transaction.get(\"reference_number\"),\n                \"transaction_type\": transaction.get(\"transaction_type\"),\n                \"amount\": transaction.get(\"amount\"),\n                \"currency\": transaction.get(\"currency\"),\n                \"bank_account\": bank_account\n            })\n            # Add the new bank transaction to the list of new bank transactions\n            new_bank_transactions.append(new_bank_transaction)\n        # Save the new bank transactions\n        for new_bank_transaction in new_bank_transactions:\n            new_bank_transaction.insert()\n        # Update the last integration date to the date of the oldest transaction\n        frappe.db.set_value(\"Bank Account\", bank_account, \"last_integration_date\", get_transactions(bank, bank_account)[0].get(\"date\"))\n        # Log the number of new transactions added\n        frappe.logger().info(f\"Synced {len(new_bank_transactions)} bank transactions for bank account {bank_account} from {start_date} to {end_date}\")\n    except Exception:\n        # Log the error message\n        frappe.log_error(frappe.get", "CodeBleu_score": 40.63589549345392}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        transactions = get_transactions(bank, bank_account)\n        if transactions:\n            start_date = frappe.utils.get_datetime(transactions[0].get(\"date\"))\n            end_date = frappe.utils.get_datetime(transactions[-1].get(\"date\"))\n            if not frappe.db.exists(\"Bank Transaction\", {\"bank\": bank, \"bank_account\": bank_account, \"date\": [\"between\", (start_date, end_date)]}):\n                for transaction in transactions:\n                    new_bank_transaction = frappe.new_doc(\"Bank Transaction\")\n                    new_bank_transaction.update(transaction)\n                    new_bank_transaction.bank = bank\n                    new_bank_transaction.bank_account = bank_account\n                    new_bank_transaction.insert()\n                frappe.db.set_value(\"Bank Account\", bank_account, \"last_sync_date\", end_date)\n                frappe.msgprint(_(\"Successfully synced bank transactions for Bank {0} and Bank Account {1}\").format(frappe.bold(bank), frappe.bold(bank_account)))\n            else:\n                frappe.msgprint(_(\"Bank transactions already synced for Bank {0} and Bank Account {1}\").format(frappe.bold(bank), frappe.bold(bank_account)))\n        else:\n            frappe.msgprint(_(\"No transactions found for Bank {0} and Bank Account {1}\").format(frappe.bold(bank), frappe.bold(bank_account)))\n    except Exception:\n        frappe.log_error(frappe.get_traceback())\n        frappe.msgprint(_(\"An error occurred while syncing bank transactions for Bank {0} and Bank Account {1}\").format(frappe.bold(bank), frappe.bold(bank_account)))\n\n", "CodeBleu_score": 32.480266565017175}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        # Get the last integration date\n        last_integration_date = frappe.db.get_value(\"Bank Account\", bank_account, \"last_integration_date\")\n\n        # Get the start and end dates for the transaction retrieval\n        start_date = last_integration_date if last_integration_date else getdate(today())\n        end_date = add_months(start_date, 1)\n\n        # Get the transactions\n        transactions = get_transactions(bank, bank_account, start_date, end_date)\n\n        # Process the transactions\n        new_transactions = []\n        for transaction in transactions:\n            new_transaction = new_bank_transaction(bank, bank_account, transaction)\n            if new_transaction:\n                new_transactions.append(new_transaction)\n\n        # Update the last integration date\n        if new_transactions:\n            oldest_transaction_date = min([getdate(t.posting_date) for t in new_transactions])\n            frappe.db.set_value(\"Bank Account\", bank_account, \"last_integration_date\", oldest_transaction_date)\n\n        # Log the number of new transactions added\n        frappe.logger().info(\"Synced {} new transactions for bank account {}\".format(len(new_transactions), bank_account))\n    except Exception:\n        frappe.log_error(frappe.get_traceback(), \"Syncing transactions failed\")\n\n", "CodeBleu_score": 41.91735960349175}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t\n    try:\n        self._log_info(\"Migrating entries for entity: \" + entity)\n        uri = self._construct_query_uri(entity)\n        self._log_info(\"Constructed query URI: \" + uri)\n        response = self._get(uri)\n        self._log_info(\"Response status code: \" + str(response.status_code))\n        if response.status_code == 200:\n            entries = []\n            entries.extend(response.json()[\"QueryResponse\"][\"Invoice\"])\n            entries.extend(response.json()[\"QueryResponse\"][\"CreditMemo\"])\n            entries.extend(response.json()[\"QueryResponse\"][\"Bill\"])\n            entries.extend(response.json()[\"QueryResponse\"][\"Purchase\"])\n            entries.extend(response.json()[\"QueryResponse\"][\"SalesReceipt\"])\n            entries.extend(response.json()[\"QueryResponse\"][\"Deposit\"])\n            entries.extend(response.json()[\"QueryResponse\"][\"JournalEntry\"])\n            total_count = response.json()[\"QueryResponse\"][\"totalCount\"]\n            self._log_info(\"Total count: \" + str(total_count))\n            if total_count > 1000:\n                for i in range(1000, total_count, 1000):\n                    uri = self._construct_query_uri(entity, i)\n                    self._log_info(\"Constructed query URI: \" + uri)\n                    response = self._get(uri)\n                    self._log_info(\"Response status code: \" + str(response.status_code))\n                    if response.status_code == 200:\n                        entries.extend(response.json()[\"QueryResponse\"][\"Invoice\"])\n                        entries.extend(response.json()[\"QueryResponse\"][\"CreditMemo\"])\n                        entries.extend(response.json()[\"QueryResponse\"][\"Bill\"])\n                        entries.extend(response.json()[\"QueryResponse\"][\"Purchase\"])\n                        entries.extend(response.json()[\"QueryResponse\"][\"SalesReceipt\"])\n                        entries.extend(response.json()[\"QueryResponse\"][\"Deposit\"])\n                        entries.extend(response.json()[\"QueryResponse\"][\"JournalEntry\"])\n                    else:\n                        self._log_error(\"Error fetching entries for entity: \" + entity)\n                        self._log_error(\"Response text: \" + response.text)\n                        return\n            self._log_info(\"Preprocessing entries for entity: \" + entity)\n            entries = self._preprocess_entries(entries, entity)\n            self._log_info", "CodeBleu_score": 27.111815843106392}, {"code": "def _migrate_entries(self, entity)\n\t\n    uri = self._construct_query_uri(entity)\n    self._log_info(f\"Fetching {entity} entries from {uri}\")\n    response = self._get(uri)\n    total_count = response.json()[\"QueryResponse\"][\"totalCount\"]\n    entries = []\n    for start_position in range(0, total_count, 1000):\n        self._log_info(f\"Fetching entries {start_position} to {start_position + 1000} of {total_count}\")\n        response = self._get(uri, params={\"startPosition\": start_position})\n        entries.extend(response.json()[\"QueryResponse\"][\"QueryResult\"][\"row\"])\n    self._save_entries(entries, entity)\n    self._log_error(response.text)\n    self._preprocess_entries(entries, entity)\n\n", "CodeBleu_score": 37.796255704650136}, {"code": "def _migrate_entries(self, entity)\n\t\n    try:\n        # Construct the query URI\n        query_uri = self._construct_query_uri(entity)\n        # Get the total number of entries for the entity\n        total_count = self._get_total_count(query_uri)\n        # Get the entries in batches\n        for start_position in range(0, total_count, 1000):\n            entries = self._get_entries(query_uri, start_position)\n            self._save_entries(entries, entity)\n    except Exception as e:\n        self._log_error(e, query_uri)\n\n", "CodeBleu_score": 20.838474041201035}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\t\n    if invoice.type == 'out_invoice':\n        self._save_sales_invoice(invoice)\n    elif invoice.type == 'in_invoice':\n        self._save_purchase_invoice(invoice)\n    elif invoice.type == 'out_refund':\n        self._save_sales_return(invoice)\n    elif invoice.type == 'in_refund':\n        self._save_purchase_return(invoice)\n    elif invoice.type == 'out_receipt':\n        self._save_sales_receipt(invoice)\n    elif invoice.type == 'in_receipt':\n        self._save_purchase_receipt(invoice)\n    elif invoice.type == 'entry':\n        self._save_journal_entry(invoice)\n    elif invoice.type == 'general':\n        self._save_general_ledger_entry(invoice)\n    elif invoice.type == 'out_invoice_inter_company':\n        self._save_sales_invoice_inter_company(invoice)\n    elif invoice.type == 'in_invoice_inter_company':\n        self._save_purchase_invoice_inter_company(invoice)\n    elif invoice.type == 'out_refund_inter_company':\n        self._save_sales_return_inter_company(invoice)\n    elif invoice.type == 'in_refund_inter_company':\n        self._save_purchase_return_inter_company(invoice)\n    elif invoice.type == 'out_receipt_inter_company':\n        self._save_sales_receipt_inter_company(invoice)\n    elif invoice.type == 'in_receipt_inter_company':\n        self._save_purchase_receipt_inter_company(invoice)\n    else:\n        raise UserError(_('Invalid invoice type.'))\n\n", "CodeBleu_score": 15.225201943646539}, {"code": "def _save_invoice(self, invoice)\n\t\n    if invoice.is_return:\n        self._save_return_invoice(invoice)\n    elif invoice.is_pos:\n        self._save_pos_invoice(invoice)\n    elif invoice.is_consolidated:\n        self._save_consolidated_invoice(invoice)\n    elif invoice.is_recurring:\n        self._save_recurring_invoice(invoice)\n    elif invoice.is_internal_transfer:\n        self._save_internal_transfer_invoice(invoice)\n    elif invoice.is_a_credit_note:\n        self._save_credit_note(invoice)\n    elif invoice.is_a_down_payment:\n        self._save_down_payment(invoice)\n    elif invoice.is_a_deposit:\n        self._save_deposit(invoice)\n    elif invoice.is_a_pro_forma_invoice:\n        self._save_pro_forma_invoice(invoice)\n    elif invoice.is_a_blanket_invoice:\n        self._save_blanket_invoice(invoice)\n    elif invoice.is_a_free_item:\n        self._save_free_item_invoice(invoice)\n    elif invoice.is_a_free_service:\n        self._save_free_service_invoice(invoice)\n    elif invoice.is_a_subscription:\n        self._save_subscription_invoice(invoice)\n    elif invoice.is_a_statement_charge:\n        self._save_statement_charge_invoice(invoice)\n    elif invoice.is_a_reimburse_charge:\n        self._save_reimburse_charge_invoice(invoice)\n    elif invoice.is_a_deposit_invoice:\n        self._save_deposit_invoice(invoice)\n    elif invoice.is_a_subscription_invoice:\n        self._save_subscription_invoice(invoice)\n    elif invoice.is_a_statement_invoice:\n        self._save_statement_invoice(invoice)\n    elif invoice.is_a_reimburse_invoice:\n        self._save_reimburse_invoice(invoice)\n    elif invoice.is_a_down_payment_invoice:\n        self._save_down_payment_invoice(invoice)\n    elif invoice.is_a_journal_entry:\n        self._save_journal_entry(invoice)\n    else:\n        self._save_sales_invoice(invoice)\n", "CodeBleu_score": 6.990979053499506}, {"code": "def _save_invoice(self, invoice)\n\t\n    if self.qb_is_linked(invoice):\n        self._save_invoice_as_journal_entry(invoice)\n    else:\n        self._save_sales_invoice(invoice)\n\n", "CodeBleu_score": 12.917626053811777}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    start_date = getdate(start_date)\n    end_date = getdate(end_date)\n    no_of_days = date_diff(end_date, start_date) + 1\n    if no_of_days < no_of_visit:\n        frappe.throw(_(\"Number of visits cannot be greater than the number of days.\"))\n    interval = no_of_days // no_of_visit\n    i = 0\n    while i < no_of_visit:\n        schedule_date = add_days(start_date, i * interval)\n        schedule_list.append(schedule_date)\n        i += 1\n    schedule_list = self.validate_schedule_date_for_holiday_list(schedule_list, sales_person)\n    return schedule_list\n", "CodeBleu_score": 24.16859946239167}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    if no_of_visit > 1:\n        diff = add_days(end_date, -start_date)\n        days = diff.days + 1\n        interval = days / (no_of_visit - 1)\n        for i in range(no_of_visit):\n            schedule_date = add_days(start_date, interval * i)\n            schedule_list.append(schedule_date)\n        schedule_list = self.validate_schedule_date_for_holiday_list(schedule_list, sales_person)\n    else:\n        schedule_list.append(start_date)\n    return schedule_list\n\n", "CodeBleu_score": 33.28985131242494}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    if no_of_visit == 1:\n        schedule_list = [start_date]\n        return schedule_list\n    elif no_of_visit == 2:\n        schedule_list = [start_date, add_days(start_date, 1)]\n        return schedule_list\n    else:\n        date_diff = getdate(end_date) - getdate(start_date)\n        interval = date_diff.days / (no_of_visit - 1)\n        schedule_list = [start_date]\n        for i in range(1, no_of_visit - 1):\n            schedule_list.append(add_days(schedule_list[i - 1], interval))\n        schedule_list.append(end_date)\n        schedule_list = self.validate_schedule_date_for_holiday_list(schedule_list, sales_person)\n        return schedule_list\n", "CodeBleu_score": 37.54813947375521}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\t$data['url'] = $this->bulkUrl($data);\n$data['html'] = view('components.index.bulkaction.modal', $data)->render();\n$data['title'] = $this->getTitle();\n$data['path'] = $this->getPath();\n$data['handle'] = $this->getHandle();\n\nreturn response()->json([\n'status' => 'success',\n'message' => 'Bulk action completed.',\n'data' => $data,\n]);\n}", "CodeBleu_score": 26.568262977378943}, {"code": "<?\n   public function response($view, $data = []){\n\t\n$url = $this->getBulkActionURL($view, $data);\n\nreturn response()->json([\n'status' => 'success',\n'message' => trans('admin::messages.bulk_action.success'),\n'data' => [\n'title' => trans('admin::messages.bulk_action.modal_title'),\n'path' => $url,\n'handle' => $this->getBulkActionHandle($view),\n'html' => view('components.index.bulkaction.modal', [\n'url' => $url,\n'handle' => $this->getBulkActionHandle($view),\n'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n'html' => view($view, $data)->render(),\n])->render(),\n],\n]);\n}", "CodeBleu_score": 42.74843460595476}, {"code": "<?\n   public function response($view, $data = []){\n\t$url = $this->getBulkActionUrl($this->getBulkActionHandle($view));\n$data['url'] = $url;\n$data['handle'] = $this->getBulkActionHandle($view);\n$data['selected'] = $this->getSelectedInput(request());\n$data['html'] = view($view, $data)->render();\nreturn response()->json([\n'status' => 'success',\n'message' => trans('admin::messages.bulk_action.success'),\n'data' => $data,\n]);\n}", "CodeBleu_score": 32.06128139505772}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $request->get('contacts');\nforeach($contacts as $contact) {\ntry {\n$this->dispatch(new DeleteContact($contact));\n} catch(Exception $e) {\nflash($e->getMessage())->error();\n}\n}\n}", "CodeBleu_score": 51.1879447810615}, {"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $request->input('contacts');\nforeach ($contacts as $contact) {\ntry {\n$this->dispatch(new DeleteContact($contact));\n} catch (Exception $e) {\nflash($e->getMessage())->error()->important();\n}\n}\n}", "CodeBleu_score": 61.310813308763635}, {"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $request->input('contacts');\nforeach ($contacts as $contact) {\ntry {\n$this->dispatch(new DeleteContact($contact));\n} catch (Exception $e) {\nflash($e->getMessage())->error();\n}\n}\nreturn redirect(route('contacts.index'));\n}", "CodeBleu_score": 56.43030042477677}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t$selected_transactions = $request->get('selected_transactions');\nif (is_null($selected_transactions)) {\nflash('No transactions were selected.')->error();\nreturn redirect()->back();\n}\nforeach ($selected_transactions as $transaction_id) {\ntry {\n$this->dispatch(new DeleteTransaction($transaction_id));\n} catch (\\Exception $e) {\nflash($e->getMessage())->error()->important();\n}\n}\nflash('The selected transactions have been deleted.')->success();\nreturn redirect()->back();\n}", "CodeBleu_score": 55.982068204961124}, {"code": "<?\npublic function deleteTransactions($request){\n\t$selectedTransactions = $request->input('transactions');\nforeach ($selectedTransactions as $transaction) {\n$this->dispatch(new DeleteTransaction($transaction));\n}\nflash('Successfully deleted selected transactions.')->success();\nreturn redirect(route('transactions.index'));\n}", "CodeBleu_score": 42.32376484364822}, {"code": "<?\npublic function deleteTransactions($request){\n\t$transactions = $request->get('transactions');\nforeach ($transactions as $transaction) {\n$this->dispatch(new DeleteTransaction($transaction));\n}\nflash('Successfully deleted the selected transactions.')->success();\nreturn redirect()->back();\n}", "CodeBleu_score": 45.36939448348884}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\t$request = $this->getRequest();\n\nif (! $request instanceof FormRequest) {\nreturn;\n}\n\nforeach ($this->data as $data) {\n$request->initialize();\n$request->setContainer($this->container);\n\n$rules = $request->rules();\n\nif (is_callable($rules)) {\n$rules = $this->prepareRules($rules, $data);\n}\n\n$validator->setData($data);\n\ntry {\nValidator::make($data, $rules)->validate();\n} catch (ValidationException $e) {\n$validator->addFailure($data, $e->validator->failed());\n\nthrow $e;\n}\n}\n}", "CodeBleu_score": 37.237136031420285}, {"code": "<?\npublic function withValidator($validator){\n\t$request = $this->getRequest();\n$requestClass = get_class($request);\nif (!class_exists($requestClass) || !is_subclass_of($requestClass, FormRequest::class)) {\nreturn;\n}\n$data = $request->all();\nforeach ($data as $row) {\n$request->initialize($row);\n$validator->getData();\n$validator->addFailure($request, $validator->failed());\n}\n}", "CodeBleu_score": 22.84339544318464}, {"code": "<?\npublic function withValidator($validator){\n\t$request = $this->getRequest();\n$request->initialize();\n$data = $validator->getData();\nforeach ($data as $row) {\n$request->replace($row);\n$this->prepareRules($request);\ntry {\nValidator::make($data, $request->rules())->validate();\n} catch (ValidationException $e) {\n$validator->addFailure($request, $e->validator);\n}\n}\n}", "CodeBleu_score": 24.108984279151596}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\t$this->model = $arguments[0] ?? null;\n\t$this->request = $arguments[1] ?? null;\n\t$this->getRequestInstance();\n\t$this->update();\n}", "CodeBleu_score": 23.912727079320696}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\tif (count($arguments) > 0 && $arguments[0] instanceof Model) {\n\t\t$this->setModel($arguments[0]);\n\t}\n\n\tif (count($arguments) > 1 && $arguments[1] instanceof Request) {\n\t\t$this->setRequest($arguments[1]);\n\t}\n\n\tif ($this instanceof ShouldUpdate) {\n\t\t$this->update();\n\t}\n}", "CodeBleu_score": 29.92616548239246}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\tif (count($arguments) === 2) {\n\t\t$this->setRequest($arguments[1]);\n\t}\n\n\tif (count($arguments) === 1) {\n\t\t$this->setModel($arguments[0]);\n\t}\n\n\tif ($this->shouldUpdate() && $this->model && $this->request) {\n\t\t$this->update();\n\t}\n}", "CodeBleu_score": 23.51108648627147}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t$request = request();\n$request->expectsJson() && $request->isNotApi() ? $query->get() : $query->usingSearchString()->sortable($sort)->paginate(10);\n}", "CodeBleu_score": 26.893281102573113}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t$request = request();\n$request->expectsJson() || $request->isNotApi() ? $query->sortable($sort) : $query->sortable($sort)->usingSearchString()->paginate($request->get('limit', 20));\nreturn $query;\n}", "CodeBleu_score": 31.94007047427333}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t$request = request();", "CodeBleu_score": 16.901560570082463}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t(new \\Illuminate\\Support\\Facades\\App)->bind('App\\Models\\Invoice');\n    if ($model->status == 'paid') {\n        return [0, 0];\n    }\n\n    $amounts = [\n        'open' => 0,\n        'overdue' => 0,\n    ];\n\n    if ($model->status == 'partial') {\n        foreach ($model->transactions as $transaction) {\n            $amounts['open'] += $transaction->getAmountConvertedToDefault();\n        }\n    }\n\n    $amounts['overdue'] = $model->getDueDate()->lt(Date::today()) ? $amounts['open'] : 0;\n\n    return $amounts;\n}", "CodeBleu_score": 46.4272968427824}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t\",\n        \"/**\n * This function calculates the open and overdue amounts for a given document model. It initializes the amounts and checks if the document status is 'paid', returning zeroes if true. For 'partial' status, it sums the payments from transactions. It then determines if the document is open or overdue based on the due date and adjusts the amounts accordingly. Finally, it returns the calculated open and overdue amounts.\n */", "CodeBleu_score": 11.160564962877991}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t()\n$total = 0;\n$open = 0;\n$overdue = 0;\n\nif ($model->status == 'paid') {\nreturn [0, 0];\n}\n\n$payments = $model->payments()->sum('amount');\n$total += $payments;\n\nif ($model->status == 'partial') {\n$open = $payments;\n}\n\n$due_date = $model->getDueDate();\n\nif ($due_date) {\n$overdue = $model->getOverdueAmount();\n}\n\nreturn [$open, $overdue];\n}", "CodeBleu_score": 43.29355034202514}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\n}", "CodeBleu_score": 15.207249111772198}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$page = $page ?: $this->resolveCurrentPage($pageName);\n$perPage = $perPage ?: $this->model->getPerPage();\n$total = $this->total();\n$results = $total ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\nreturn $this->paginator($results, $total, $perPage, $page, [\n'path' => $this->resolveCurrentPath(),\n'pageName' => $pageName,\n]);\n}", "CodeBleu_score": 66.38170015195055}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\n/**\n * Determine the current page number.\n */\n$page = $page ?: $this->resolveCurrentPage($pageName);\n\n/**\n * Get the total number of records.\n */\n$total = $this->total();\n\n/**\n * Get the list of items for the current page.\n */\n$items = $total ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n\n/**\n * Create the paginator.\n */\n$paginator = $this->newPaginator($items, $total, $perPage, $page, [\n'path' => $this->resolveCurrentPath(),\n'pageName' => $pageName,\n]);\n\nif ($items->count() > 0) {\n$paginator->setPath($this->toBase());\n}\n\nreturn $paginator;\n}", "CodeBleu_score": 59.818445904308184}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t$reconciliations = $request->get('reconciliations');\n\n\\DB::transaction(function() use ($reconciliations) {\nforeach($reconciliations as $reconciliation) {\n$reconciliation = Reconciliation::find($reconciliation);\n$reconciliation->status = Reconciliation::STATUS_RECONCILED;\n$reconciliation->save();\n\n$this->getSelectedRecords($reconciliation)->each(function($item) {\n$item->reconciled = true;\n$item->save();\n});\n}\n});\n}", "CodeBleu_score": 35.11513842097831}, {"code": "<?\npublic function reconcile($request){\n\t\n$reconciliations = $request->get('reconciliations');\n\nforeach ($reconciliations as $reconciliation) {\n\n$reconciliation = Reconciliation::find($reconciliation['id']);\n\n\\DB::transaction(function () use ($reconciliation) {\n$reconciliation->reconciled_at = now();\n$reconciliation->status = Reconciliation::STATUS_RECONCILED;\n$reconciliation->save();\n\n$reconciliation->transactions->each(function ($item) {\n$item->reconciled_at = now();\n$item->status = Transaction::STATUS_RECONCILED;\n$item->save();\n});\n});\n}\n}", "CodeBleu_score": 41.91517965484125}, {"code": "<?\npublic function reconcile($request){\n\t$reconciliations = Reconciliation::where('id', $request->reconciliation_ids)->get();\nforeach ($reconciliations as $reconciliation) {\n\\DB::transaction(function () use ($reconciliation) {\n$reconciliation->status = 'reconciled';\n$reconciliation->save();\n$reconciliation->transactions->each(function ($item) {\n$item->reconciled = true;\n$item->save();\n});\n});\n}\n}", "CodeBleu_score": 44.80913714402888}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t$invitations = UserInvitation::where('user_id', $this->user->id)->get();\n\nforeach ($invitations as $invitation) {\n$invitation->delete();\n}\n\n$invitation = UserInvitation::create([\n'user_id' => $this->user->id,\n'token' => Str::uuid(),\n]);\n\ntry {\n$this->dispatch(new NotifyUserInvitation($invitation));\n} catch (Exception $e) {\n$invitation->delete();\n\nthrow new Exception($e->getMessage());\n}\n\nreturn $invitation;\n}", "CodeBleu_score": 43.33311047780457}, {"code": "<?\npublic function handle(): UserInvitation{\n\t$invitations = UserInvitation::where('user_id', $this->user->id)->get();\n\nforeach ($invitations as $invitation) {\n$invitation->delete();\n}\n\n$invitation = UserInvitation::create([\n'user_id' => $this->user->id,\n'token' => Str::uuid(),\n]);\n\ntry {\n$this->dispatch(new UserInvitationNotification($invitation));\n} catch (Exception $e) {\nthrow new Exception('Failed to send invitation email: ' . $e->getMessage());\n}\n\nreturn $invitation;\n}", "CodeBleu_score": 43.857641692445156}, {"code": "<?\npublic function handle(): UserInvitation{\n\t$this->user = $this->getUser();\n$invitations = UserInvitation::where('user_id', $this->user->id)->get();\n\nforeach ($invitations as $invitation) {\n$invitation->delete();\n}\n\n$token = Str::uuid();\n$invitation = UserInvitation::create([\n'user_id' => $this->user->id,\n'token' => $token,\n]);\n\ntry {\n$this->dispatch(new NotifyUserInvitation($invitation));\n} catch (Exception $e) {\n$invitation->delete();\nthrow $e;\n}\n\nreturn $invitation;\n}", "CodeBleu_score": 40.565295299287705}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\t\tif ($this->model->isTransferTransaction()) {\n\t\tthrow new UnauthorizedException(\"Transfer transactions are not allowed\");\n\t}\n\tif ($this->model->isReconciled()) {\n\t\tthrow new UnauthorizedException(\"This transaction has already been reconciled\");\n\t}\n}", "CodeBleu_score": 28.667391519859788}, {"code": "<?\npublic function authorize(): void{\n\t\tif ($this->isReconciled()) {\n\t\tthrow new Exception(\"The transaction has already been reconciled\");\n\t}\n\tif ($this->isTransferTransaction()) {\n\t\tthrow new UnauthorizedException(\"This transaction is a transfer transaction\");\n\t}\n}", "CodeBleu_score": 20.472262650729707}, {"code": "<?\npublic function authorize(): void{\n\t\tif ($this->isReconciled) {\n\t\tthrow new Exception(\"This transaction has already been reconciled. You cannot authorize it again.\");\n\t}\n\tif ($this->isTransferTransaction) {\n\t\tthrow new UnauthorizedException(\"You do not have permission to authorize this transaction.\");\n\t}\n}", "CodeBleu_score": 19.990972856323204}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t\t// If the tenant ID is not zero, allow access to certain predefined tables\n\tif (getTenantIdByToken() != 0) {\n\t\tif (tableName.equals(\"Table1\") || tableName.equals(\"Table2\") || tableName.equals(\"Table3\")) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} else {\n\t\t// If the tenant ID is zero, deny access to certain predefined tables\n\t\tif (tableName.equals(\"Table4\") || tableName.equals(\"Table5\") || tableName.equals(\"Table6\")) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n}", "CodeBleu_score": 19.348515592655815}, {"code": "public boolean doTableFilter(String tableName){\n\t\tboolean isPermitted = false;\n\tif (tableName.equals(\"table1\") || tableName.equals(\"table2\") || tableName.equals(\"table3\")) {\n\t\tisPermitted = true;\n\t}\n\treturn isPermitted;\n}", "CodeBleu_score": 12.84534683289957}, {"code": "public boolean doTableFilter(String tableName){\n\t\t// If the tenant ID is zero, deny access to certain predefined tables.\n\tif (getTenantIdByToken() == 0) {\n\t\tif (tableName.equals(\"User\") || tableName.equals(\"UserGroup\") || tableName.equals(\"UserGroupRole\")) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}", "CodeBleu_score": 12.327731289662767}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 74.548338294358}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 74.548338294358}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 74.548338294358}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t\n// Get a list of all accounts\nAccountService accountService = new AccountService();\nList<Account> accounts = accountService.findAll();\n\n// Convert the list to a JSON string\nString jsonString = new JSONWithPadding().toJSONString(accounts);\n\n// Return the JSON string\nreturn jsonString;\n\n}", "CodeBleu_score": 18.921021969017495}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\ttry {\nAccountService accountService = new AccountService();\nAccount account = new Account();\nList<Account> accounts = accountService.findBySelect();\nJSONArray jsonArray = new JSONArray();\nfor (Account account : accounts) {\nJSONObject jsonObject = new JSONObject();\njsonObject.put(\"id\", account.getId());\njsonObject.put(\"name\", account.getName());\njsonArray.add(jsonObject);\n}\nreturn jsonArray.toJSONString();\n} catch (Exception e) {\ne.printStackTrace();\nreturn \"{\\\"message\\\":\\\"An error occurred while fetching the accounts\\\"}\";\n}\n}", "CodeBleu_score": 39.970979981915}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\ttry {\n// Get the accountService from the session\nAccountService accountService = (AccountService) request.getSession().getAttribute(\"accountService\");\n// Get the list of accounts\nList<Account> accounts = accountService.findAll();\n// Create an array of account objects\nAccount[] accountArray = new Account[accounts.size()];\n// Copy the list of accounts into the array\naccounts.toArray(accountArray);\n// Convert the array of accounts to JSON format\nString json = Account.toJSONString(accountArray);\n// Return the JSON string\nreturn json;\n} catch (Exception e) {\n// Log the error message\nlogger.error(\"Exception: \" + e.getMessage());\n// Create a JSON object with the error message\nJSONObject error = new JSONObject();\nerror.put(\"message\", e.getMessage());\n// Return the JSON object\nreturn error.toString();\n}\n}", "CodeBleu_score": 36.36726302855682}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t BaseResponseInfo response = new BaseResponseInfo();\n try {\n response.setCount(accountService.listWithBalanceCount(name, serialNo));\n response.setCurrentPage(currentPage);\n response.setPageSize(pageSize);\n response.setList(accountService.listWithBalance(name, serialNo, currentPage, pageSize));\n response.setCode(200);\n response.setMessage(\"OK\");\n } catch (Exception e) {\n log.error(e.getMessage(), e);\n response.setCode(500);\n response.setMessage(e.getMessage());\n }\n return response;\n }", "CodeBleu_score": 33.05150670623176}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t BaseResponseInfo response = new BaseResponseInfo();\n try {\n response.setResultCode(ResponseCode.SUCCESS);\n response.setResultMsg(ResponseCode.getResultMsg(ResponseCode.SUCCESS));\n response.setPage(currentPage);\n response.setPageSize(pageSize);\n AccountService accountService = (AccountService) ContextFactory.getInstance().getService(\"AccountService\");\n PageList<Account> accountList = accountService.listWithBalance(name, serialNo, currentPage, pageSize);\n response.setTotalCount(accountList.getCount());\n response.setPageCount(accountList.getPageCount());\n response.setData(accountList.getResult());\n } catch (ServiceException e) {\n logger.error(e.getMessage(), e);\n response.setResultCode(ResponseCode.FAIL);\n response.setResultMsg(e.getMessage());\n }\n return response;\n }", "CodeBleu_score": 38.379640852680375}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t\n//    if (StringUtils.isEmpty(name) && StringUtils.isEmpty(serialNo)) {\n//        throw new IllegalArgumentException(\"Name or serial number should be provided\");\n//    }\n\n    BaseResponseInfo response = new BaseResponseInfo();\n    response.setCode(200);\n    response.setMessage(\"OK\");\n\n    try {\n        AccountService accountService = new AccountService();\n        List<Account> accounts = accountService.listWithBalance(name, serialNo, currentPage, pageSize);\n        Long count = accountService.listWithBalanceCount(name, serialNo);\n        response.setCount(count);\n        response.setData(accounts);\n        response.setPageSize(pageSize);\n        response.setCurrentPage(currentPage);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        response.setCode(500);\n        response.setMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 41.64021912821316}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t\n//    // Initialize the response.\n//    BaseResponseInfo response = new BaseResponseInfo();\n//\n//    // Set the response code to 200.\n//    response.setResponseCode(200);\n//\n//    // Get the statistics.\n//    AccountService accountService = new AccountService();\n//    try {\n//        response.setData(accountService.getStatistics(name, serialNo));\n//    } catch (Exception e) {\n//        // Set the response code to 500.\n//        response.setResponseCode(500);\n//\n//        // Log the error.\n//        logger.error(e.getMessage());\n//\n//        // Set the response message.\n//        response.setResponseMessage(\"Error getting statistics.\");\n//    }\n//\n//    // Return the response.\n//    return response;\n}", "CodeBleu_score": 10.693504103042025}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\t// Retrieve the account information\n\t\tAccount account = accountService.getAccount(name, serialNo);\n\t\t// Retrieve the account statistics\n\t\tAccountStatistics accountStatistics = accountService.getStatistics(account);\n\t\t// Set the response code to 200\n\t\tresponse.setResponseCode(200);\n\t\t// Set the response data\n\t\tresponse.setData(accountStatistics);\n\t} catch (AccountNotFoundException e) {\n\t\t// Set the response code to 404\n\t\tresponse.setResponseCode(404);\n\t\t// Set the response message\n\t\tresponse.setMessage(\"Account not found\");\n\t} catch (Exception e) {\n\t\t// Log the error\n\t\tlogger.error(e.getMessage());\n\t\t// Set the response code to 500\n\t\tresponse.setResponseCode(500);\n\t\t// Set the response message\n\t\tresponse.setMessage(\"Internal error\");\n\t}\n\t// Return the response\n\treturn response;\n}", "CodeBleu_score": 37.35813323531876}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\t// get the account service\n\t\tAccountService service = AccountServiceFactory.getInstance();\n\n\t\t// call the service to get the statistics\n\t\tStatistics stats = service.getStatistics(name, serialNo);\n\n\t\t// set the response code\n\t\tresponse.setResponseCode(200);\n\n\t\t// set the response data\n\t\tresponse.setData(stats);\n\t} catch (Exception e) {\n\t\t// set the response code\n\t\tresponse.setResponseCode(500);\n\n\t\t// set the response message\n\t\tresponse.setResponseMessage(\"Error occurred while getting statistics: \" + e.getMessage());\n\n\t\t// log the exception\n\t\tLOGGER.error(\"Error occurred while getting statistics: \" + e.getMessage(), e);\n\t}\n\n\t// return the response\n\treturn response;\n}", "CodeBleu_score": 38.09699240148633}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo response = new BaseResponseInfo();\n try {\n //fetch account head details\n AccountHead accountHead = accountHeadService.getAccountHeadByBillNumber(billNo);\n if (accountHead != null) {\n //set response code to 200\n response.setStatusCode(200);\n //add account head details to response\n response.addResponseDetails(accountHead);\n } else {\n //set response code to 404\n response.setStatusCode(404);\n //set response message\n response.setResponseMsg(\"Bill Number Not Found\");\n }\n } catch (Exception e) {\n //set response code to 500\n response.setStatusCode(500);\n //set response message\n response.setResponseMsg(\"Error occurred while fetching details\");\n //log error\n logger.error(\"Error occurred while fetching details for bill number \" + billNo, e);\n }\n return response;\n }", "CodeBleu_score": 31.002754938553394}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo response = new BaseResponseInfo();\n try {\n response.setResponseCode(\"200\");\n response.setResponseMessage(\"Success\");\n response.setResponseDetail(billService.getBillDetails(billNo));\n } catch (Exception e) {\n response.setResponseCode(\"500\");\n response.setResponseMessage(\"Failed to fetch bill details\");\n response.setResponseDetail(e.getMessage());\n }\n return response;\n }", "CodeBleu_score": 26.940523682060398}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo response = new BaseResponseInfo();\n try {\n response.setStatusCode(200);\n response.setSuccess(true);\n response.setMessage(\"Success\");\n response.setData(billService.getBillDetails(billNo));\n } catch (Exception e) {\n logger.error(\"Error occured while fetching bill details for bill number: \" + billNo, e);\n response.setStatusCode(500);\n response.setSuccess(false);\n response.setMessage(e.getMessage());\n }\n return response;\n }", "CodeBleu_score": 29.37301434047333}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tDepot depot = depotService.findDepotByCurrentUser(request);\n\t\tresponse.setCode(200);\n\t\tresponse.setData(depot);\n\t} catch (Exception e) {\n\t\tlogger.error(\"error\", e);\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 39.28645628878725}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tresponse.setResponseCode(\"200\");\n\t\tresponse.setResponseMessage(\"OK\");\n\t\tresponse.setResponseData(depotService.findDepotByCurrentUser(request));\n\t} catch (Exception e) {\n\t\tresponse.setResponseCode(\"500\");\n\t\tresponse.setResponseMessage(\"Error\");\n\t\tresponse.setResponseData(null);\n\t\tlogger.error(\"Error occured while retrieving depot information for the current user\", e);\n\t}\n\treturn response;\n}", "CodeBleu_score": 32.39129285654527}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\tresponse.setStatusCode(200);\n\tresponse.setContentType(\"application/json\");\n\tresponse.setEncoding(\"UTF-8\");\n\n\tDepot depot = null;\n\ttry {\n\t\tdepot = depotService.findDepotByCurrentUser(request);\n\t} catch (Exception e) {\n\t\tlog.error(\"Error while retrieving depot information for the current user.\", e);\n\t\tresponse.setStatusCode(500);\n\t\tresponse.setContentType(\"text/plain\");\n\t\tresponse.setEncoding(\"UTF-8\");\n\t\tresponse.setMessage(\"Error while retrieving depot information for the current user.\");\n\t}\n\n\tresponse.setData(depot);\n\n\treturn response;\n}", "CodeBleu_score": 31.625369593862978}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t\tJSONArray jsonArray = new JSONArray();\n\ttry {\n\t\tList<RoleFunction> roleFunctionList = roleFunctionService.findRoleFunction(type, keyId);\n\t\tif (roleFunctionList != null && roleFunctionList.size() > 0) {\n\t\t\tJSONObject jsonObject = new JSONObject();\n\t\t\tjsonObject.put(\"roleFunctions\", roleFunctionList);\n\t\t\tjsonArray.add(jsonObject);\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(\"Exception in findRoleFunction()\", e);\n\t\tthrow e;\n\t}\n\treturn jsonArray;\n}", "CodeBleu_score": 24.82243177428402}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t\nJSONArray jsonArray = new JSONArray();\n\ntry {\n\nList<RoleFunction> roleFunctionList = roleFunctionService.getFunctionList(type, keyId);\n\nfor (RoleFunction roleFunction : roleFunctionList) {\n\nJSONObject json = new JSONObject();\n\njson.put(\"functionId\", roleFunction.getFunctionId());\njson.put(\"functionName\", roleFunction.getFunctionName());\njson.put(\"functionType\", roleFunction.getFunctionType());\njson.put(\"functionKey\", roleFunction.getFunctionKey());\njson.put(\"functionUrl\", roleFunction.getFunctionUrl());\njson.put(\"functionDesc\", roleFunction.getFunctionDesc());\n\njsonArray.add(json);\n\n}\n\n} catch (Exception e) {\n\nlogger.error(e.getMessage(), e);\n\nthrow e;\n\n}\n\nreturn jsonArray;\n\n}", "CodeBleu_score": 28.862048789020523}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t\nJSONArray roleFunctionList = new JSONArray();\n", "CodeBleu_score": 11.209497721574651}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\tPlatformConfig platformConfig = null;\n\ttry {\n\t\tplatformConfig = platformConfigService.getPlatformConfigByKey(platformKey);\n\t\tresponseInfo.setSuccess(true);\n\t\tresponseInfo.setStatusCode(200);\n\t\tresponseInfo.setBody(platformConfig);\n\t} catch (PlatformConfigServiceException e) {\n\t\tresponseInfo.setSuccess(false);\n\t\tresponseInfo.setStatusCode(500);\n\t\tresponseInfo.setMessage(\"Platform configuration service exception: \" + e.getMessage());\n\t\tlogger.error(\"Platform configuration service exception: \" + e.getMessage());\n\t}\n\treturn responseInfo;\n}", "CodeBleu_score": 34.13235764639718}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\tPlatformConfigService platformConfigService = new PlatformConfigService();\n\ttry {\n\t\tPlatformConfigDTO platformConfigDTO = platformConfigService.getPlatformConfigByKey(platformKey);\n\t\tif (platformConfigDTO != null) {\n\t\t\tresponseInfo.setStatusCode(200);\n\t\t\tresponseInfo.setResponseDetail(\"Platform configuration information retrieved successfully.\");\n\t\t\tresponseInfo.setResponse(platformConfigDTO);\n\t\t} else {\n\t\t\tresponseInfo.setStatusCode(404);\n\t\t\tresponseInfo.setResponseDetail(\"Platform configuration information not found for the provided platform key.\");\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(\"Platform configuration information could not be retrieved for the provided platform key.\", e);\n\t\tresponseInfo.setStatusCode(500);\n\t\tresponseInfo.setResponseDetail(\"Platform configuration information could not be retrieved for the provided platform key.\");\n\t}\n\treturn responseInfo;\n}", "CodeBleu_score": 31.02555882049469}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\tPlatformConfigService platformConfigService = new PlatformConfigService();\n\ttry {\n\t\tPlatformConfig platformConfig = platformConfigService.getPlatformConfigByKey(platformKey);\n\t\tresponse.setResponseCode(200);\n\t\tresponse.setResponseMessage(\"Platform configuration information retrieved successfully.\");\n\t\tresponse.setResponseBody(platformConfig);\n\t}\n\tcatch (Exception e) {\n\t\tlogger.error(e.getMessage());\n\t\tresponse.setResponseCode(500);\n\t\tresponse.setResponseMessage(\"Error retrieving platform configuration information.\");\n\t\tresponse.setResponseBody(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 40.54798914035439}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tresponse.setResponseCode(200);\n\t\tresponse.setData(get(0));\n\t} catch (Exception e) {\n\t\tresponse.setResponseCode(500);\n\t\tresponse.setErrorMessage(e.getMessage());\n\t\tlogger.error(e.getMessage(), e);\n\t}\n\treturn response;\n}", "CodeBleu_score": 28.81028336574624}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\tresponse.setResponseCode(200);\n\ttry {\n\t\tList<SystemConfig> systemConfigList = systemConfigService.getSystemConfigList();\n\t\tif (systemConfigList != null && systemConfigList.size() > 0) {\n\t\t\tresponse.setResponseData(systemConfigList.get(0));\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tresponse.setResponseCode(500);\n\t\tresponse.setResponseData(\"Error occurred while retrieving system configuration information\");\n\t}\n\treturn response;\n}", "CodeBleu_score": 34.618368938254754}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\tresponse.setCode(200);\n\ttry {\n\t\tList<SystemConfig> list = systemConfigService.getSystemConfigList();\n\t\tif (list != null && list.size() > 0) {\n\t\t\tSystemConfig systemConfig = list.get(0);\n\t\t\tresponse.setData(systemConfig);\n\t\t} else {\n\t\t\tresponse.setCode(500);\n\t\t\tresponse.setMessage(\"No system configuration found\");\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(\"Exception occurred while retrieving system configuration\", e);\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(\"Exception occurred while retrieving system configuration\");\n\t}\n\treturn response;\n}", "CodeBleu_score": 34.7306190366162}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\tString businessPath = request.getParameter(\"businessPath\");\n\tMultipartFile file = ((MultipartHttpServletRequest) request).getFile(\"file\");\n\tString fileName = file.getOriginalFilename();\n\tString fileType = fileName.substring(fileName.lastIndexOf(\".\") + 1);\n\tString fileUrl = \"\";\n\tString fileKey = \"\";\n\tString fileUrlPrefix = \"\";\n\tString fileKeyPrefix = \"\";\n\tif (businessPath.equals(\"1\")) {\n\t\tfileUrlPrefix = \"http://127.0.0.1:8080/upload/images/\";\n\t\tfileKeyPrefix = \"images/\";\n\t} else if (businessPath.equals(\"2\")) {\n\t\tfileUrlPrefix = \"http://127.0.0.1:8080/upload/videos/\";\n\t\tfileKeyPrefix = \"videos/\";\n\t} else if (businessPath.equals(\"3\")) {\n\t\tfileUrlPrefix = \"http://127.0.0.1:8080/upload/audios/\";\n\t\tfileKeyPrefix = \"audios/\";\n\t} else {\n\t\tfileUrlPrefix = \"http://127.0.0.1:8080/upload/others/\";\n\t\tfileKeyPrefix = \"others/\";\n\t}\n\ttry {\n\t\tif (businessPath.equals(\"1\") || businessPath.equals(\"2\") || businessPath.equals(\"3\")) {\n\t\t\tfileUrl = fileUrlPrefix + fileName;\n\t\t\tfileKey = fileKeyPrefix + fileName;\n\t\t\tuploadAliOss(file, fileKey);\n\t\t} else {\n\t\t\tfileUrl = fileUrlPrefix + fileName;\n\t\t\tfileKey = fileKeyPrefix + fileName;\n\t\t\tuploadLocal(file, fileKey);\n\t\t}\n\t\tresponseInfo.setCode(\"200\");\n\t\tresponseInfo.setData(fileUrl);\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tresponseInfo.setCode(\"500\");\n\t\tresponseInfo.setData(\"\u4e0a\u4f20\u6587\u4ef6\u5931\u8d25\");\n\t}\n\treturn responseInfo;\n}", "CodeBleu_score": 32.263970501704975}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tString businessPath = getParameter(request, \"businessPath\");\n\tString file = getFile(request);\n\tString uploadType = getParameter(request, \"uploadType\");\n\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\ttry {\n\t\tif (uploadType.equals(\"local\")) {\n\t\t\tresponseInfo = uploadLocal(businessPath, file);\n\t\t} else if (uploadType.equals(\"oss\")) {\n\t\t\tresponseInfo = uploadAliOss(businessPath, file);\n\t\t}\n\t} catch (Exception e) {\n\t\tresponseInfo.setCode(500);\n\t\tresponseInfo.setMsg(\"upload file failed\");\n\t\tresponseInfo.setData(e.getMessage());\n\t\tlogger.error(e.getMessage(), e);\n\t}\n\tresponse.setStatus(responseInfo.getCode());\n\treturn responseInfo;\n}", "CodeBleu_score": 26.919281374661857}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tString businessPath = getParameter(request, \"businessPath\");\n\tif (businessPath == null) {\n\t\treturn BaseResponseInfo.buildFailureResponse(\"businessPath is required\");\n\t}\n\tString file = getFile(request);\n\tif (file == null) {\n\t\treturn BaseResponseInfo.buildFailureResponse(\"file is required\");\n\t}\n\ttry {\n\t\tString uploadType = getParameter(request, \"uploadType\");\n\t\tif (uploadType == null) {\n\t\t\tuploadType = \"local\";\n\t\t}\n\t\tif (uploadType.equals(\"local\")) {\n\t\t\treturn uploadLocal(businessPath, file);\n\t\t} else if (uploadType.equals(\"aliOss\")) {\n\t\t\treturn uploadAliOss(businessPath, file);\n\t\t} else {\n\t\t\treturn BaseResponseInfo.buildFailureResponse(\"uploadType is invalid\");\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\treturn BaseResponseInfo.buildFailureResponse(e.getMessage());\n\t}\n}", "CodeBleu_score": 24.35110835327504}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t try {\n String title = jsonObject.getString(\"title\");\n String head = jsonObject.getString(\"head\");\n String tip = jsonObject.getString(\"tip\");\n JSONArray dataArray = jsonObject.getJSONArray(\"data\");\n String fileName = jsonObject.getString(\"fileName\");\n String sheetName = jsonObject.getString(\"sheetName\");\n String[] headArr = head.split(\",\");\n String[] tipArr = tip.split(\",\");\n List<String[]> dataList = new ArrayList<String[]>();\n for (int i = 0; i < dataArray.size(); i++) {\n String[] dataArr = new String[dataArray.size()];\n for (int j = 0; j < dataArray.size(); j++) {\n dataArr[j] = dataArray.getString(j);\n }\n dataList.add(dataArr);\n }\n ExportExcelUtil.exportExcel(title, headArr, tipArr, dataList, fileName, sheetName, response);\n } catch (Exception e) {\n logger.error(e.getMessage(), e);\n }\n }", "CodeBleu_score": 67.60669979311143}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t\ttry {\n\t\tString title = jsonObject.getString(\"title\");\n\t\tString head = jsonObject.getString(\"head\");\n\t\tString tip = jsonObject.getString(\"tip\");\n\t\tJSONArray dataList = jsonObject.getJSONArray(\"dataList\");\n\t\tString fileName = jsonObject.getString(\"fileName\");\n\t\tString sheetName = jsonObject.getString(\"sheetName\");\n\t\tString sheetName2 = jsonObject.getString(\"sheetName2\");\n\t\tString sheetName3 = jsonObject.getString(\"sheetName3\");\n\t\tString sheetName4 = jsonObject.getString(\"sheetName4\");\n\t\tString sheetName5 = jsonObject.getString(\"sheetName5\");\n\t\tString sheetName6 = jsonObject.getString(\"sheetName6\");\n\t\tString sheetName7 = jsonObject.getString(\"sheetName7\");\n\t\tString sheetName8 = jsonObject.getString(\"sheetName8\");\n\t\tString sheetName9 = jsonObject.getString(\"sheetName9\");\n\t\tString sheetName10 = jsonObject.getString(\"sheetName10\");\n\t\tString sheetName11 = jsonObject.getString(\"sheetName11\");\n\t\tString sheetName12 = jsonObject.getString(\"sheetName12\");\n\t\tString sheetName13 = jsonObject.getString(\"sheetName13\");\n\t\tString sheetName14 = jsonObject.getString(\"sheetName14\");\n\t\tString sheetName15 = jsonObject.getString(\"sheetName15\");\n\t\tString sheetName16 = jsonObject.getString(\"sheetName16\");\n\t\tString sheetName17 = jsonObject.getString(\"sheetName17\");\n\t\tString sheetName18 = jsonObject.getString(\"sheetName18\");\n\t\tString sheetName19 = jsonObject.getString(\"sheetName19\");\n\t\tString sheetName20 = jsonObject.getString(\"sheetName20\");\n\t\tString sheetName21 = jsonObject.getString(\"sheetName21\");\n\t\tString sheetName22 = jsonObject.getString(\"sheetName22\");\n\t\tString sheetName23 = jsonObject.getString(\"sheetName23\");\n\t\tString sheetName24 = jsonObject.getString(\"sheetName24\");\n\t\tString sheetName25 = jsonObject.getString(\"sheetName25\");\n\t\tString sheetName26 = jsonObject.getString(\"sheetName26\");\n\t\tString sheetName27 = jsonObject.getString(\"sheetName27\");\n\t\tString sheetName28 = jsonObject.getString(\"", "CodeBleu_score": 40.53324175601533}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t try {\n // Get the title from the JSON object\n String title = jsonObject.getString(\"title\");\n // Get the head from the JSON object\n JSONArray head = jsonObject.getJSONArray(\"head\");\n // Get the tip from the JSON object\n JSONArray tip = jsonObject.getJSONArray(\"tip\");\n // Get the data list from the JSON object\n JSONArray data = jsonObject.getJSONArray(\"data\");\n // Call the export service\n exportExcelService.exportExcelByParam(title, head, tip, data, response);\n } catch (Exception e) {\n logger.error(e.getMessage(), e);\n }\n }", "CodeBleu_score": 73.14061866145626}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\ttry {\n\t\tAccount account = new Account();\n\t\taccount.setAccountNumber(obj.getInt(\"accountNumber\"));\n\t\taccount.setAccountType(obj.getString(\"accountType\"));\n\t\taccount.setBalance(obj.getDouble(\"balance\"));\n\t\taccount.setCustomer(obj.getInt(\"customer\"));\n\t\taccount.setAccountStatus(obj.getString(\"accountStatus\"));\n\t\taccount.setAccountPin(obj.getString(\"accountPin\"));\n\t\taccount.setAccountPinConfirm(obj.getString(\"accountPinConfirm\"));\n\t\taccount.setAccountEnabled(obj.getBoolean(\"accountEnabled\"));\n\t\taccount.setAccountDefault(obj.getBoolean(\"accountDefault\"));\n\t\taccount.setAccountCreationDate(obj.getString(\"accountCreationDate\"));\n\t\taccount.setAccountLastModifiedDate(obj.getString(\"accountLastModifiedDate\"));\n\t\taccount.setAccountLastModifiedBy(obj.getString(\"accountLastModifiedBy\"));\n\t\taccount.setAccountCreationBy(obj.getString(\"accountCreationBy\"));\n\t\taccount.setAccountBalance(0);\n\t\taccount.setAccountBalance(getInitialAmount(account));\n\t\taccount.setAccountDefault(isDefault(account));\n\t\taccount.setEnabled(account.isAccountEnabled());\n\t\taccount.insertAccount();\n\t\twriteSuccess(account, request);\n\t\treturn 1;\n\t} catch (Exception e) {\n\t\twriteFail(e.getMessage(), request);\n\t\treturn 0;\n\t}\n}", "CodeBleu_score": 24.29510978735584}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tAccount account = new Account();\n\taccount.setAccountNumber(obj.getInt(\"accountNumber\"));\n\taccount.setBalance(obj.getDouble(\"balance\"));\n\taccount.setAccountType(obj.getString(\"accountType\"));\n\taccount.setAccountStatus(obj.getString(\"accountStatus\"));\n\taccount.setAccountHolder(obj.getString(\"accountHolder\"));\n\taccount.setAccountDescription(obj.getString(\"accountDescription\"));\n\taccount.setAccountPin(obj.getString(\"accountPin\"));\n\taccount.setAccountPinConfirm(obj.getString(\"accountPinConfirm\"));\n\taccount.setAccountBalance(obj.getDouble(\"accountBalance\"));\n\taccount.setAccountBalance(0);\n\taccount.setIsDefault(false);\n\taccount.setEnabled(true);\n\taccount.setCreationDate(new Date());\n\taccount.setLastUpdateDate(new Date());\n\taccount.setLastLoginDate(new Date());\n\taccount.setLastLoginAttemptDate(new Date());\n\taccount.setFailedLoginAttempts(0);\n\taccount.setFailedLoginAttemptDate(new Date());\n\taccount.setAccountPinChangeDate(new Date());\n\taccount.setAccountPinChangeDate(new Date());\n\taccount.setAccountPinChangeDate(new Date());\n\taccount.setAccountPinChangeDate(new Date());\n\taccount.setAccountPinChangeDate(new Date());\n\taccount.setAccountPinChangeDate(new Date());\n\taccount.setAccountPinChangeDate(new Date());\n\taccount.setAccountPinChangeDate(new Date());\n\taccount.setAccountPinChangeDate(new Date());\n\taccount.setAccountPinChangeDate(new Date());\n\taccount.setAccountPinChangeDate(new Date());\n\taccount.setAccountPinChangeDate(new Date());\n\taccount.setAccountPinChangeDate(new Date());\n\taccount.setAccountPinChangeDate(new Date());\n\taccount.setAccountPinChangeDate(new Date());\n\taccount.setAccountPinChangeDate(new Date());\n\taccount.setAccountPinChangeDate(new Date());\n\taccount.setAccountPinChangeDate(new Date());\n\taccount.setAccountPinChangeDate(new Date());\n\taccount.setAccountPinChangeDate(new Date());\n\taccount.setAccountPinChangeDate(new", "CodeBleu_score": 18.22523958627316}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tString name = obj.getString(\"name\");\n\tString description = obj.getString(\"description\");\n\tString accountType = obj.getString(\"accountType\");\n\tint initialAmount = obj.getInt(\"initialAmount\");\n\tboolean isDefault = obj.getBoolean(\"isDefault\");\n\tboolean enabled = obj.getBoolean(\"enabled\");\n\tAccount account = new Account(name, description, accountType, initialAmount, isDefault, enabled);\n\taccount = accountDAO.insertAccount(account);\n\tif(account == null) {\n\t\tlogger.log(Level.SEVERE, \"Failed to insert account \" + name);\n\t\twriteFail(request, \"Failed to insert account \" + name);\n\t\treturn 0;\n\t}\n\tlogger.log(Level.INFO, \"Inserted account \" + name);\n\twriteSuccess(request, \"Inserted account \" + name);\n\treturn 1;\n}", "CodeBleu_score": 31.469288810213275}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\ttry {\n\t\treturn listWithBalanceCountMapper(name, serialNo);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error in listWithBalanceCount\", e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 24.12522741214004}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\ttry {\n\t\treturn getSqlMapClientTemplate().queryForObject(\"listWithBalanceCount\", name, serialNo);\n\t} catch (DataAccessException e) {\n\t\tlog.error(\"Error executing listWithBalanceCount\", e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 22.487924965541232}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\ttry {\n\t\treturn mapper.listWithBalanceCount(name, serialNo);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error in listWithBalanceCount\", e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 25.113511120587397}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\ttry{\n\t\tDepotItemMapper depotItemMapper = new DepotItemMapper();\n\t\tint result = depotItemMapper.deleteByPrimaryKey(id);\n\t\treturn result;\n\t}\n\tcatch(Exception e){\n\t\tlog.error(e.getMessage());\n\t\trequest.setAttribute(\"message\", e.getMessage());\n\t\treturn 0;\n\t}\n}", "CodeBleu_score": 38.822890471757255}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tDepotItemMapper depotItemMapper = new DepotItemMapper();\n\tint result = depotItemMapper.deleteByPrimaryKey(id);\n\tif (result == 0) {\n\t\tString errorMessage = \"Error: Unable to delete the depot item with ID \" + id;\n\t\tlogger.error(errorMessage);\n\t\tthrow new Exception(errorMessage);\n\t}\n\treturn result;\n}", "CodeBleu_score": 38.67667272360285}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tDepotItemMapper depotItemMapper = new DepotItemMapper();\n\tDepotItem depotItem = new DepotItem();\n\tdepotItem.setId(id);\n\ttry {\n\t\tdepotItemMapper.deleteByPrimaryKey(depotItem);\n\t\treturn 1;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\tlogger.error(e.getMessage());\n\t\treturn 0;\n\t}\n}", "CodeBleu_score": 28.175912510729983}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\ttry {\n\t\tHttpClient client = HttpClients.createDefault();\n\t\tString url = String.format(\"%s://%s:%d/projects/%s/nodes/%s/%s\", getProtocol(), getHost(), getPort(), projectName, nodeType, nodeKey);\n\t\tHttpGet request = new HttpGet(url);\n\t\tHttpResponse response = client.execute(request);\n\t\tint statusCode = response.getStatusLine().getStatusCode();\n\t\tif (statusCode == 200) {\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tString responseBody = EntityUtils.toString(entity);\n\t\t\tif (responseBody.contains(\"key\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\tSystem.err.println(\"Error adding node to project: \" + e.getMessage());\n\t} finally {\n\t\ttry {\n\t\t\tclient.close();\n\t\t} catch (Exception e) {\n\t\t\tSystem.err.println(\"Error closing HTTP client: \" + e.getMessage());\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 47.883591242438136}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\ttry {\n\t\t// Create an HTTP client and construct the request URL\n\t\tHttpClient client = HttpClients.createDefault();\n\t\tString url = \"http://\" + host + \":\" + port + \"/projects/\" + projectName + \"/nodes/\" + nodeType + \"/\" + nodeKey;\n\n\t\t// Execute the request and process the response\n\t\tHttpResponse response = client.execute(new HttpGet(url));\n\t\tif (response.getStatusLine().getStatusCode() == 200) {\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tif (entity != null) {\n\t\t\t\tInputStream instream = entity.getContent();\n\t\t\t\ttry {\n\t\t\t\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(instream));\n\t\t\t\t\ttry {\n\t\t\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\t\t\tString line = null;\n\t\t\t\t\t\twhile ((line = reader.readLine()) != null) {\n\t\t\t\t\t\t\tsb.append(line);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tString responseBody = sb.toString();\n\t\t\t\t\t\tif (responseBody.contains(\"key\")) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\treader.close();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tinstream.close();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\ttry {\n\t\t\tclient.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 45.05732423607919}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\ttry {\n\t\t// Create an HTTP client and construct the request URL\n\t\tHttpClient client = HttpClientBuilder.create().build();\n\t\tString url = String.format(\"%s://%s:%d/api/projects/%s/nodes/%s/%s\", protocol, host, port, projectName, nodeType, nodeKey);\n\n\t\t// Execute the request\n\t\tHttpResponse response = client.execute(new HttpGet(url));\n\n\t\t// Process the response\n\t\tint status = response.getStatusLine().getStatusCode();\n\t\tif (status == 200) {\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tif (entity != null) {\n\t\t\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(entity.getContent()));\n\t\t\t\tString line = reader.readLine();\n\t\t\t\tif (line != null) {\n\t\t\t\t\tJSONObject json = new JSONObject(line);\n\t\t\t\t\tif (json.has(\"key\")) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\ttry {\n\t\t\tclient.close();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 46.45354368153305}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\ttry {\n\t\tCloseableHttpClient httpclient = HttpClients.createDefault();\n\t\tString url = String.format(\"%s://%s:%d/api/projects/%s/edges?edgeType=%s&fromType=%s&toType=%s&from=%s&to=%s\", getProtocol(), getHost(), getPort(), projectName, edgeType, fromType, toType, from, to);\n\t\tHttpGet httpget = new HttpGet(url);\n\t\thttpget.addHeader(\"Accept\", \"application/json\");\n\t\tCloseableHttpResponse response = httpclient.execute(httpget);\n\t\ttry {\n\t\t\tif (response.getStatusLine().getStatusCode() == 200) {\n\t\t\t\tHttpEntity entity = response.getEntity();\n\t\t\t\tif (entity != null) {\n\t\t\t\t\tInputStream instream = entity.getContent();\n\t\t\t\t\ttry {\n\t\t\t\t\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(instream));\n\t\t\t\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\t\t\t\tString line = null;\n\t\t\t\t\t\twhile ((line = reader.readLine()) != null) {\n\t\t\t\t\t\t\tsb.append(line);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tJSONObject json = new JSONObject(sb.toString());\n\t\t\t\t\t\tif (json.has(\"key\")) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tinstream.close();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tresponse.close();\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\treturn false;\n}", "CodeBleu_score": 47.66353223678313}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\ttry {\n\t\tString url = getHost() + \":\" + getPort() + \"/addEdge?projectName=\" + projectName + \"&edgeType=\" + edgeType + \"&fromType=\" + fromType + \"&toType=\" + toType + \"&from=\" + from + \"&to=\" + to;\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\tHttpGet httpGet = new HttpGet(url);\n\t\tCloseableHttpResponse response = httpClient.execute(httpGet);\n\t\ttry {\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tif (entity != null) {\n\t\t\t\tInputStream instream = entity.getContent();\n\t\t\t\ttry {\n\t\t\t\t\tJsonReader reader = Json.createReader(instream);\n\t\t\t\t\tJsonObject json = reader.readObject();\n\t\t\t\t\tif (json.containsKey(\"key\")) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tinstream.close();\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tresponse.close();\n\t\t}\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 48.5513251001069}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\ttry {\n\t\tCloseableHttpClient httpclient = HttpClients.createDefault();\n\t\tString url = String.format(\"%s://%s:%s/projects/%s/edges/add?type=%s&from=%s&to=%s\", getProtocol(), getHost(), getPort(), projectName, edgeType, fromType, toType);\n\t\tHttpUriRequest request = RequestBuilder.get().setUri(url).build();\n\t\tCloseableHttpResponse response = httpclient.execute(request);\n\t\ttry {\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tif (entity != null) {\n\t\t\t\tInputStream instream = entity.getContent();\n\t\t\t\ttry {\n\t\t\t\t\tString result = IOUtils.toString(instream, \"UTF-8\");\n\t\t\t\t\tJSONObject json = new JSONObject(result);\n\t\t\t\t\tif (json.has(\"key\")) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tinstream.close();\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tresponse.close();\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\treturn false;\n}", "CodeBleu_score": 49.57131634609949}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\t\tif (event == null || event.getMessage() == null) {\n\t\treturn;\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(getLocation());\n\t}\n\tevent.setTime(getTime());\n\tString json = event.writeValueAsString();\n\tif (getTarget() == null) {\n\t\tproducer.send(new ProducerRecord<String, String>(\"test\", json));\n\t} else {\n\t\tproducer.send(new ProducerRecord<String, String>(getTarget(), json));\n\t}\n\tproducer.flush();\n}", "CodeBleu_score": 30.351942884851287}, {"code": "public void sendEvent(Event event){\n\t\tif (event == null || event.getMessage() == null) {\n\t\treturn;\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(acquireTestingLocation());\n\t}\n\tevent.setTime(System.currentTimeMillis());\n\tString jsonString = event.writeValueAsString();\n\tif (target == null) {\n\t\ttarget = \"test\";\n\t}\n\tProducerRecord<String, String> record = new ProducerRecord<String, String>(target, jsonString);\n\tproducer.send(record);\n\tproducer.flush();\n}", "CodeBleu_score": 40.65318046547346}, {"code": "public void sendEvent(Event event){\n\t\tif (event == null || event.getMessage() == null) {\n\t\treturn;\n\t}\n\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(getLocation());\n\t}\n\n\tevent.setTime(getTime());\n\tString eventAsString = event.writeValueAsString();\n\n\tif (getTarget() == null) {\n\t\tgetTarget();\n\t}\n\n\tProducerRecord<String, String> record = new ProducerRecord<String, String>(getTarget(), eventAsString);\n\tgetProducer().send(record);\n\tgetProducer().flush();\n}", "CodeBleu_score": 36.798944708619075}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t\t// Initialize the OSS client with access credentials.\n\tOSSClient ossClient = new OSSClient(getEndpoint(), getAccessKeyId(), getAccessKeySecret());\n\t// Upload the file content as an object with the specified name.\n\tossClient.putObject(getOssBucket(), objName, new ByteArrayInputStream(content));\n\t// Shut down the OSS client.\n\tossClient.shutdown();\n\t// Return the URL of the uploaded object.\n\treturn \"http://\" + getOssBucket() + \".\" + getEndpoint() + \"/\" + objName;\n}", "CodeBleu_score": 35.457587376882984}, {"code": "public String upload(String objName, byte[] content){\n\t\t// Create an OSSClient instance.\n\tOSSClient ossClient = new OSSClient(getEndpoint(), getAccessKeyId(), getAccessKeySecret());\n\t// Upload the file content as an object with the specified name to the OSS bucket.\n\tossClient.putObject(getOssBucket(), objName, new ByteArrayInputStream(content));\n\t// Shut down the OSS client.\n\tossClient.shutdown();\n\t// Return the URL of the uploaded object.\n\treturn \"https://\" + getOssBucket() + \".\" + getEndpoint() + \"/\" + objName;\n}", "CodeBleu_score": 37.05010155744765}, {"code": "public String upload(String objName, byte[] content){\n\t\t// initialize the OSS client with access credentials\n\tOSSClient ossClient = new OSSClient(getEndpoint(), getAccessKeyId(), getAccessKeySecret());\n\t// upload the file content as an object with the specified name\n\tossClient.putObject(getOssBucket(), objName, new ByteArrayInputStream(content));\n\t// shut down the OSS client\n\tossClient.shutdown();\n\t// return the URL of the uploaded object\n\treturn \"https://\" + getOssBucket() + \".\" + getEndpoint() + \"/\" + objName;\n}", "CodeBleu_score": 37.05010155744765}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\tLocationInfo locationInfo = null;\n\tif (ipToLocationWorker == null) {\n\t\tensureIpToLocationWorker();\n\t}\n\tif (ipToLocationWorker != null) {\n\t\tlocationInfo = ipToLocationWorker.getIpToLocationInfo(ipAddress);\n\t}\n\tif (locationInfo == null) {\n\t\tlocationInfo = new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\");\n\t}\n\treturn locationInfo;\n}", "CodeBleu_score": 38.7854075818305}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\t// Get an IpToLocationWorker instance\n\tIpToLocationWorker worker = ensureIpToLocationWorker();\n\n\t// If the worker is unavailable, return an unknown LocationInfo\n\tif (worker == null) {\n\t\treturn new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"", "CodeBleu_score": 19.97785241977245}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\tensureIpToLocationWorker();\n\treturn getIpToLocationWorker().ipToLocation(ipAddress);\n}", "CodeBleu_score": 9.478203697108807}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\tif (esClient != null && esClientLowLevel != null) {\nreturn;\n}\nsynchronized (this) {\nif (esClient != null && esClientLowLevel != null) {\nreturn;\n}\nif (esClient == null) {\nesClient = new ElasticsearchClient(clusterHostList, clusterHostPort, clusterName, clusterUserName, clusterPassword);\n}\nif (esClientLowLevel == null) {\nesClientLowLevel = new ElasticsearchClientLowLevel(clusterHostList, clusterHostPort, clusterName, clusterUserName, clusterPassword);\n}\n}\n}", "CodeBleu_score": 41.21366937175897}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\tif (esClient == null) {\nsynchronized (this) {\nif (esClient == null) {\n// Get the Elasticsearch cluster host and port list\nclusterHostList = getClusterHostList();\n\n// Parse the Elasticsearch cluster host and port list\nclusterHostPort = parseHosts(clusterHostList);\n\n// Build the Elasticsearch low-level REST client\nesClient = new RestClient.Builder(clusterHostPort).build();\n\n// Build the Elasticsearch high-level REST client\nesClientHL = new RestHighLevelClient(esClient);\n}\n}\n}\n}", "CodeBleu_score": 35.665222350250744}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\tif (esClient == null) {\nsynchronized (this) {\nif (esClient == null) {\nesClient = new ElasticsearchClient(build(), clusterName, clusterVersion);\n}\n}\n}\n}", "CodeBleu_score": 19.78041110331641}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tif (clusterHostList == null) {\n\t\treturn null;\n\t}\n\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tfor (String host : clusterHostList.split(\",\")) {\n\t\tString[] hostParts = host.split(\":\");\n\t\tString hostName = hostParts[0].trim();\n\t\tint port = (hostParts.length == 2) ? Integer.parseInt(hostParts[1].trim()) : clusterPort;\n\t\thosts.add(new HttpHost(hostName, port, \"http\"));\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 43.00627116207282}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tString[] hostStrings = clusterHostList.split(\",\");\n\tfor (String hostString : hostStrings) {\n\t\tString[] hostPort = hostString.split(\":\");\n\t\tString host = hostPort[0].trim();\n\t\tint port = clusterPort;\n\t\tif (hostPort.length > 1) {\n\t\t\tport = Integer.parseInt(hostPort[1].trim());\n\t\t}\n\t\thosts.add(new HttpHost(host, port));\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 41.91352857639036}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tString[] hostsList = clusterHostList.split(\",\");\n\tfor (String host : hostsList) {\n\t\tString[] hostParts = host.split(\":\");\n\t\tString hostName = hostParts[0];\n\t\tint hostPort = clusterPort;\n\t\tif (hostParts.length > 1) {\n\t\t\thostPort = Integer.parseInt(hostParts[1]);\n\t\t}\n\t\thosts.add(new HttpHost(hostName, hostPort, \"http\"));\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 41.9084429752627}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\t\t// Retrieve a single message.\n\tQueueMessage message = queueClient.receiveMessage();\n\n\t// If a message is returned, process the message in less than 30 seconds.\n\tif (message != null) {\n\t\t// Check for a task type.\n\t\tString messageType = message.getMessageType();\n\t\tif (messageType.equals(SAMPLE_QUEUE_MESSAGE_TYPE)) {\n\t\t\t// Create a message from the retrieved XML, then add a new property.\n\t\t\tQueueMessage message = queueClient.receiveMessage();\n\t\t\tString messageContent = message.getMessageContent();\n\t\t\tDocument doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new InputSource(new StringReader(messageContent)));\n\t\t\tElement root = doc.getDocumentElement();\n\t\t\tString recipient = root.getElementsByTagName(\"RecipientNumber\").item(0).getTextContent();\n\t\t\tString messageText = root.getElementsByTagName(\"MessageText\").item(0).getTextContent();\n\t\t\tSystem.out.println(\"From number: \" + recipient);\n\t\t\tSystem.out.println(\"Message text: \" + messageText);\n\t\t\t// If the message contains a recipient number and message text, send the message.\n\t\t\tif ((null != recipient) && (null != messageText)) {\n\t\t\t\ttry {\n\t\t\t\t\tsendPlainTextMessage(recipient, messageText);\n\t\t\t\t\tSystem.out.println(\"Message sent\");\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tSystem.out.println(\"Exception encountered while sending message: \" + e.getMessage());\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"Message did not contain a recipient number and message text\");\n\t\t\t}\n\t\t} else {\n\t\t\tSystem.out.println(\"Unknown message type: \" + messageType);\n\t\t}\n\n\t\t// Delete the message.\n\t\tqueueClient.deleteMessage(message);\n\t}\n}", "CodeBleu_score": 33.25214680696126}, {"code": "protected void pollingWork() throws InterruptedException{\n\t\n// Retrieve a task from the queue.\nTask task = queue.poll(30, TimeUnit.SECONDS);\n\n// If a task is found, process it.\nif (task != null) {\n\n// Get the type of the task.\nString taskType = task.getType();\n\nif (taskType.equals(\"message\")) {\n\n// The task is a plain text message.\n\n// Get the message payload as a string.\nString messagePayload = new String(task.getPayload());\n\ntry {\n\n// Extract the recipient number and message.\nJSONObject message = new JSONObject(messagePayload);\nString to = message.getString(\"to\");\nString messageText = message.getString(\"message\");\n\n// Validate the input.\nif (to.length() != 10) {\nthrow new Exception(\"Invalid recipient number: \" + to);\n}\nif (messageText.length() > 160) {\nthrow new Exception(\"Message too long: \" + messageText);\n}\n\n// Send the SMS message.\nsendPlainTextMessage(to, messageText);\n\n}\n\n// If an exception is encountered, log the error message.\ncatch (Exception e) {\nSystem.out.println(\"Error: \" + e.getMessage());\ne.printStackTrace();\n}\n\n}\n\n// If the task type is unknown, log the unknown type.\nelse {\nSystem.out.println(\"Warning: unknown task type: \" + taskType);\n}\n\n}\n\n}", "CodeBleu_score": 38.72361106516545}, {"code": "protected void pollingWork() throws InterruptedException{\n\twhile (true) {\nPollResponse pollResponse = sqs.poll(new ReceiveMessageRequest()\n.withQueueUrl(queueUrl)\n.withWaitTimeSeconds(30)\n.withMaxNumberOfMessages(10),\nnew AsyncHandler<PollResponse, Void>() {\n@Override\npublic void onError(Exception exception) {\nSystem.err.println(\"Polling error: \" + exception.getMessage());\n}\n@Override\npublic void onSuccess(PollResponse pollResponse) {\nfor (Message message : pollResponse.getMessages()) {\ntry {\nprocessTask(message);\n} catch (Exception exception) {\nSystem.err.println(\"Processing error: \" + exception.getMessage());\n}\n}\n}\n});\n}\n}", "CodeBleu_score": 23.698248137868045}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpClient httpclient = HttpClients.createDefault();\ntry {\nHttpGet httpget = new HttpGet(uri);\nSystem.out.println(\"Executing request \" + httpget.getURI());\nCloseableHttpResponse response = httpclient.execute(httpget);\ntry {\nSystem.out.println(\"----------------------------------------\");\nSystem.out.println(response.getStatusLine());\nHttpEntity entity = response.getEntity();\nif (entity != null) {\nSystem.out.println(\"Response content length: \" + entity.getContentLength());\nSystem.out.println(\"----------------------------------------\");\nBufferedReader bufferedReader = new BufferedReader(new InputStreamReader(entity.getContent()));\ntry {\nStringBuilder sb = new StringBuilder();\nString line = bufferedReader.readLine();\nwhile (line != null) {\nsb.append(line);\nline = bufferedReader.readLine();\n}\nreturn sb.toString();\n} finally {\nbufferedReader.close();\n}\n}\n} finally {\nresponse.close();\n}\n} finally {\nhttpclient.close();\n}\n}", "CodeBleu_score": 45.514333034030095}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\tHttpGet request = new HttpGet(uri);\n\trequest.addHeader(\"Accept\", \"application/xml\");\n\tHttpResponse response = httpClient.execute(request);\n\tHttpEntity entity = response.getEntity();\n\tString content = EntityUtils.toString(entity, \"UTF-8\");\n\tSystem.out.println(content);\n\treturn content;\n}", "CodeBleu_score": 57.655636298774716}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tCloseableHttpClient httpclient = HttpClients.createDefault();\n\ttry {\n\t\tHttpGet httpget = new HttpGet(uri);\n\t\tSystem.out.println(\"Executing request \" + httpget.getURI());\n\t\tCloseableHttpResponse response = httpclient.execute(httpget);\n\t\ttry {\n\t\t\tSystem.out.println(\"----------------------------------------\");\n\t\t\tSystem.out.println(response.getStatusLine());\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tif (entity != null) {\n\t\t\t\tSystem.out.println(\"Response content length: \" + entity.getContentLength());\n\t\t\t\tSystem.out.println(\"Response content type: \" + entity.getContentType());\n\t\t\t\tSystem.out.println(\"----------------------------------------\");\n\t\t\t\tBufferedReader bufferedReader = new BufferedReader(new InputStreamReader(entity.getContent()));\n\t\t\t\ttry {\n\t\t\t\t\tStringBuffer stringBuffer = new StringBuffer();\n\t\t\t\t\tString line = bufferedReader.readLine();\n\t\t\t\t\twhile (line != null) {\n\t\t\t\t\t\tstringBuffer.append(line);\n\t\t\t\t\t\tline = bufferedReader.readLine();\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println(stringBuffer.toString());\n\t\t\t\t\treturn stringBuffer.toString();\n\t\t\t\t} finally {\n\t\t\t\t\tbufferedReader.close();\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tresponse.close();\n\t\t}\n\t} finally {\n\t\thttpclient.close();\n\t}\n}", "CodeBleu_score": 44.024191982992924}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tMap<String, Object> map = new HashMap<String, Object>();\n\tDocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\tDocument doc = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n\tNodeList nodeList = doc.getChildNodes();\n\tfor (int i = 0; i < nodeList.getLength(); i++) {\n\t\tNode node = nodeList.item(i);\n\t\tif (node.getNodeType() == Node.ELEMENT_NODE) {\n\t\t\tmap = decodeNodeToMap(node, doTrim);\n\t\t\tif (map != null) {\n\t\t\t\treturn map;\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 47.26355729969561}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tMap<String, Object> resultMap = null;\n\tDocumentBuilder documentBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\tDocument document = documentBuilder.parse(new InputSource(new StringReader(messageXmlStr)));\n\tNodeList nodeList = document.getChildNodes();\n\tfor (int i = 0; i < nodeList.getLength(); i++) {\n\t\tNode node = nodeList.item(i);\n\t\tif (node.getNodeType() == Node.ELEMENT_NODE) {\n\t\t\tresultMap = decodeNodeToMap(node, doTrim);\n\t\t}\n\t}\n\treturn resultMap;\n}", "CodeBleu_score": 39.179351820108145}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tDocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\tDocument doc = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n\treturn decodeNodeToMap(doc.getDocumentElement(), doTrim);\n}", "CodeBleu_score": 26.67290882995697}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tif (orderRecord.isSOTrx()) {\n\t\tfinal boolean isEligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\n\t\tif (isEligibleForAutoProcessing) {\n\t\t\tfinal String trxName = getTrxName();\n\t\t\taddLog(\"Enqueueing order for automatic processing\", orderRecord, trxName);\n\t\t\tenqueue(I_C_Order.Table_Name, orderRecord.getC_Order_ID(), trxName);\n\t\t} else {\n\t\t\taddLog(\"Not eligible for automatic processing\", orderRecord, ITrx.TRXNAME_None);\n\t\t\tscheduleIfNotPostponed(orderRecord);\n\t\t}\n\t}\n}", "CodeBleu_score": 35.604692272003405}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tfinal boolean isEligibleForAutoProcessing = orderBL.isEligibleForAutoProcessing(orderRecord);\n\tif (isEligibleForAutoProcessing) {\n\t\tfinal String trxName = orderBL.getTrxName(orderRecord);\n\t\tServices.get(ITrxManager.class).getTrxListenerManagerOrAutoCommit(trxName)\n\t\t\t\t.newEventListener(I_C_Order.Table_Name)\n\t\t\t\t.invokeMethodJustOnce(false) // invoke the handling method only once\n\t\t\t\t.registerHandlingMethod(innerTrx -> enqueueOrderForAutoProcessing(orderRecord));\n\n\t\tServices.get(IQueryBL.class).createQueryBuilder(I_C_Order.class)\n\t\t\t\t.addEqualsFilter(I_C_Order.COLUMNNAME_C_Order_ID, orderRecord.getC_Order_ID())\n\t\t\t\t.create()\n\t\t\t\t.update()\n\t\t\t\t.addSetColumnValue(I_C_Order.COLUMNNAME_IsAutoProcessing, true)\n\t\t\t\t.execute();\n\n\t\tlogger.info(\"Enqueued order {} for automatic processing\", orderRecord);\n\t} else {\n\t\tlogger.info(\"Order {} is not eligible for automatic processing\", orderRecord);\n\t\tServices.get(IQueryBL.class).createQueryBuilder(I_C_Order.class)\n\t\t\t\t.addEqualsFilter(I_C_Order.COLUMNNAME_C_Order_ID, orderRecord.getC_Order_ID())\n\t\t\t\t.create()\n\t\t\t\t.update()\n\t\t\t\t.addSetColumnValue(I_C_Order.COLUMNNAME_IsAutoProcessing, false)\n\t\t\t\t.execute();\n\n\t\tfinal List<I_M_ShipmentSchedule> missingShipmentSchedules = orderBL.getMissingShipmentSchedules(orderRecord);\n\t\tif (!missingShipmentSchedules.isEmpty()) {\n\t\t\tfinal String trxName = orderBL.getTrxName(orderRecord);\n\t\t\tServices.get(ITrxManager.class).getTrxListenerManagerOrAutoCommit(trxName)\n\t\t\t\t\t.newEventListener(I_C_Order.Table_Name)\n\t\t\t\t\t.invokeMethodJustOnce(false) // invoke the handling method only once\n\t\t\t\t\t.registerHandlingMethod(innerTrx -> scheduleMissingShipmentSchedules(orderRecord, missingShipmentSchedules));\n\n\t\t\tlogger.info(\"Scheduled creation of missing shipment schedules for order {}\", orderRecord", "CodeBleu_score": 42.84990197221965}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tif (orderRecord.isSOTrx()) {\n\t\tfinal boolean isEligibleForAutoProcessing = orderBL.isEligibleForAutoProcessing(orderRecord);\n\t\tif (isEligibleForAutoProcessing) {\n\t\t\tfinal int orderRepoId = orderRecord.getC_Order_ID();\n\t\t\tfinal String trxName = getTrxName();\n\t\t\tfinal I_C_Order order = ofRepoId(I_C_Order.class, orderRepoId);\n\t\t\tfinal I_C_OrderLine orderLine = orderBL.getOrderLineById(orderRepoId);\n\t\t\tfinal String orderLineTrxName = getTrxName(orderLine);\n\t\t\tfinal I_C_OrderLine orderLineRecord = ofRepoId(I_C_OrderLine.class, orderLine.getC_OrderLine_ID());\n\t\t\tfinal I_M_Warehouse warehouse = warehouseBL.getWarehouseById(orderRecord.getM_Warehouse_ID());\n\t\t\tfinal I_C_BPartner bPartner = bpartnerBL.getById(orderRecord.getC_BPartner_ID());\n\n\t\t\tfinal I_C_DocType docType = docTypeBL.getById(orderRecord.getC_DocType_ID());\n\t\t\tfinal String docSubType = docType.getDocSubType();\n\n\t\t\tfinal I_C_DocType invoiceDocType = docTypeBL.getById(orderRecord.getC_DocType_ID());\n\t\t\tfinal String invoiceDocSubType = invoiceDocType.getDocSubType();\n\n\t\t\tfinal I_C_DocType shipmentDocType = docTypeBL.getById(orderRecord.getC_DocType_ID());\n\t\t\tfinal String shipmentDocSubType = shipmentDocType.getDocSubType();\n\n\t\t\tfinal I_C_DocType creditMemoDocType = docTypeBL.getById(orderRecord.getC_DocType_ID());\n\t\t\tfinal String creditMemoDocSubType = creditMemoDocType.getDocSubType();\n\n\t\t\tfinal I_C_DocType purchaseDocType = docTypeBL.getById(orderRecord.getC_DocType_ID());\n\t\t\tfinal String purchaseDocSubType = purchaseDocType.getDocSubType();\n\n\t\t\tfinal I_C_DocType receiptDocType = docTypeBL.getById(orderRecord.getC_DocType_ID());\n\t\t\tfinal String receiptDocSubType = receiptDocType.getDocSubType();\n\n\t\t\tfinal I", "CodeBleu_score": 35.90960396679834}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$user = User::where('email', $request->email)->first();\nif (! $user || ! Hash::check($request->password, $user->password)) {\n$this->fireFailedEvent($user, $request);\n}\nreturn $user;\n}", "CodeBleu_score": 44.654862297293654}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$user = $this->retrieveUser($request);\nif (! $user || ! $this->getProvider()->validateCredentials($user, $request->password)) {\n$this->fireFailedEvent($user, $request);\n$this->throwFailedAuthenticationException($user, $request);\n}\nreturn $user;\n}", "CodeBleu_score": 50.95558332403159}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$credentials = $this->credentials($request);\n\nif (empty($credentials)) {\nreturn null;\n}\n\nif (Auth::once($credentials)) {\nreturn Auth::user();\n}\n\nreturn null;\n}", "CodeBleu_score": 26.718216352852618}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t): void {", "CodeBleu_score": 6.937152107372017}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t): void {\n    $this->limiter->increment($request);\n\n    throw ValidationException::withMessages([\n        'email' => 'The provided credentials are incorrect.',\n    ]);\n}\n", "CodeBleu_score": 70.3154251280027}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t)\n$this->limiter->increment($request->ip());\nthrow ValidationException::withMessages([\n'email' => ['Could not find the provided credentials.'],\n]);\n}", "CodeBleu_score": 33.758153488668675}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t$user = User::find($request->session()->get('login.id'));\n\n$data = [\n'user' => $user,\n'action' => route('login.two-factor.verify'),\n'webauthn_assertion_options' => Webauthn::generateAssertionOptions($user, $request->ip()),\n];\n\n$request->session()->put('login.remember', $request->filled('remember'));\n\nreturn Inertia::render('Auth/TwoFactorChallenge', $data + [\n'twoFactor' => optional($user)->two_factor_secret && ! is_null(optional($user)->two_factor_confirmed_at),\n'remember' => $request->session()->get('login.remember'),\n])->toResponse($request);\n}", "CodeBleu_score": 62.78514709115689}, {"code": "<?\npublic function toResponse($request){\n\t$data = $request->session()->get('login.data');", "CodeBleu_score": 17.353134214395865}, {"code": "<?\npublic function toResponse($request){\n\t$user = $request->user();\n$data = $request->session()->get('login.data');\n$remember = $request->session()->get('login.remember');\n$request->session()->forget('login.data');\n$request->session()->forget('login.remember');\n$request->session()->save();\n$webauthn = Webauthn::prepareAssertion($request, $user, $data['credentialId'], $data['publicKey'], $data['signCount']);\n$data = array_merge($data, [\n'twoFactor' => optional($user)->two_factor_secret && ! is_null(optional($user)->two_factor_confirmed_at),\n'remember' => $remember,\n'publicKey' => $webauthn->getPublicKey(),\n'assertion' => $webauthn->getAssertion(),\n]);\nreturn Inertia::render('Auth/TwoFactorChallenge', $data);\n}", "CodeBleu_score": 52.68877349667703}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$token = UserToken::firstWhere([\n'provider' => $driver,\n'provider_id' => $socialite->getId()\n]);\n\nif ($token) {\n$user = $token->user;\n$this->checkUserAssociation($user, $socialite);\nreturn $user;\n}\n\n$user = $this->getUserOrCreate($socialite);\n$token = $this->createUserToken($user, $socialite);\n\nreturn $user;\n}", "CodeBleu_score": 43.5368675406972}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$userToken = UserToken::firstWhere([\n'driver' => $driver,\n'socialite_id' => $socialite->getId(),\n]);\n\nif ($userToken) {\n$user = $userToken->user;\n\nif ($this->checkUserAssociation($user, $socialite)) {\nreturn $user;\n}\n}\n\n$user = $this->getUserOrCreate($socialite);\n\n$userToken = UserToken::firstWhere([\n'driver' => $driver,\n'socialite_id' => $socialite->getId(),\n]);\n\nif ($userToken) {\n$userToken->user()->associate($user);\n$userToken->save();\n} else {\n$userToken = UserToken::create([\n'driver' => $driver,\n'socialite_id' => $socialite->getId(),\n]);\n\n$userToken->user()->associate($user);\n$userToken->save();\n}\n\nreturn $user;\n}", "CodeBleu_score": 46.365429509949394}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t\n$user = User::where('email', $socialite->getEmail)->first();\n$userToken = UserToken::where('driver', $driver)->where('socialite_id', $socialite->getId)->first();\n\nif ($userToken) {\n$this->checkUserAssociation($userToken, $user);\n} else {\n$user = $this->getUserOrCreate($socialite);\n$userToken = $this->createUserToken($user, $driver, $socialite);\n}\n\nreturn $user;\n}", "CodeBleu_score": 50.47200434184058}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$user = $request->user();\nif (is_null($user)) {\nreturn false;\n}\n$credentials = $this->filterCredentials($request);\nif (is_null($credentials)) {\nreturn false;\n}\nif (! $this->webauthn->validateAssertion($user, $credentials)) {\n$this->fireFailedEvent($user, $request);\n$this->throwFailedAuthenticationException($request);\nreturn false;\n}\nreturn true;\n}", "CodeBleu_score": 59.5788159990672}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$user = $request->user();\nif (! $user) {\n$this->fireFailedEvent($user, $request);\n$this->throwFailedAuthenticationException($request);\n}\n$credentials = $this->filterCredentials($request->get('webauthn_credentials', []));\nif (! $this->validateAssertion($user, $credentials, $request)) {\n$this->fireFailedEvent($user, $request);\n$this->throwFailedAuthenticationException($request);\n}\nreturn true;\n}", "CodeBleu_score": 60.65763196127112}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$user = $request->user();\nif (! $user) {\nreturn false;\n}\n\n$credentials = $this->filterCredentials($request->input('webauthn.credentials'));\n\nif (! $this->validateAssertion($user, $credentials)) {\n$this->fireFailedEvent($user);\n$this->throwFailedAuthenticationException($user);\nreturn false;\n}\n\nreturn true;\n}", "CodeBleu_score": 56.42530145512852}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\t$email = $this->argument('email');\nif (empty($email)) {\n$this->error('No email address provided');\nreturn null;\n}\ntry {\nreturn User::where('email', $email)->firstOrFail();\n} catch (ModelNotFoundException $e) {\n$this->error('No user found with that email address');\nreturn null;\n}\n}", "CodeBleu_score": 67.17567674423783}, {"code": "<?\nprivate function user(): ?User{\n\t$email = $this->argument('email');\nif (empty($email)) {\n$this->error('No email address provided.');\nreturn null;\n}\ntry {\n$user = User::where('email', $email)->firstOrFail();\n} catch (ModelNotFoundException $e) {\n$this->error('User not found.');\nreturn null;\n}\nreturn $user;\n}", "CodeBleu_score": 61.084738320162245}, {"code": "<?\nprivate function user(): ?User{\n\t$email = $this->argument('email');\nif (empty($email)) {\n$this->error('No email provided. Please provide an email address.');\nreturn null;\n}\ntry {\nreturn User::where('email', $email)->firstOrFail();\n} catch (ModelNotFoundException $e) {\n$this->error('User not found.');\nreturn null;\n}\n}", "CodeBleu_score": 67.09752130375577}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\tforeach ($this->config('scout.meilisearch.indexes', []) as $index) {\n$this->line('Flushing index: ' . $index);\n$this->artisan('scout:flush', [\n'index' => $index,\n]);\n}\n$this->line('All indexes flushed.');\n}", "CodeBleu_score": 22.225887817255757}, {"code": "<?\nprotected function scoutFlush(): void{\n\t$this->info('", "CodeBleu_score": 5.0000001328197845}, {"code": "<?\nprotected function scoutFlush(): void{\n\t$this->line('Flushing Scout indexes...');\n$this->line('Scout driver: ' . config('scout.driver'));\nforeach (config('scout.algolia.indices') as $index) {\n$this->line('Flushing index: ' . $index);\n$this->artisan('scout:flush', ['model' => $index]);\n}\n$this->line('Scout indexes flushed!');\n}", "CodeBleu_score": 26.29077732753593}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$vcard = $this->read($resource);\n$exporters = $this->getExporters();\nforeach ($exporters as $exporter) {\n$exporter->export($resource, $vcard);\n}\nreturn $vcard;\n}", "CodeBleu_score": 19.27025345765328}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$this->read($resource);\n$this->exporters->applyExporters($this->vcard);\nreturn $this->vcard;\n}", "CodeBleu_score": 12.157368304392852}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$vcard = $this->read($resource);\n$this->exporters->export($resource, $vcard);\nreturn $vcard;\n}", "CodeBleu_score": 14.78816025826454}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t(Blueprint $blueprint) {\n    $obj = $this->getObject($addressBookId, $cardUri);\n    if ($obj === false) {\n        return false;\n    }\n\n    if ($obj instanceof Contact) {\n        DestroyContact::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'contact_id' => $obj->id,\n        ])->onQueue('high');\n    } elseif ($obj instanceof Group) {\n        DestroyGroup::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'group_id' => $obj->id,\n        ])->onQueue('high');\n    } else {\n        return false;\n    }\n\n    return true;\n}\n", "CodeBleu_score": 83.68658616647569}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t(new AddressBookController)->deleteCard($addressBookId, $cardUri)}", "CodeBleu_score": 14.590027412282602}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t(1)\n    $obj = $this->getObject($addressBookId, $cardUri);\n    if ($obj === false) {\n        return false;\n    }\n    if (is_a($obj, 'AddressBookObject')) {\n        if ($obj->type == 'contact') {\n            DestroyContact::dispatch([\n                'account_id' => $this->user->account_id,\n                'author_id' => $this->user->id,\n                'vault_id' => $obj->vault_id,\n                'contact_id' => $obj->id,\n            ])->onQueue('high');\n        } elseif ($obj->type == 'group') {\n            DestroyGroup::dispatch([\n                'account_id' => $this->user->account_id,\n                'author_id' => $this->user->id,\n                'vault_id' => $obj->vault_id,\n                'group_id' => $obj->id,\n            ])->onQueue('high');\n        } else {\n            return false;\n        }\n    }\n    return true;\n}", "CodeBleu_score": 75.56791070245097}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\tif (!request()->hasFile('file')) {\nreturn;\n}\n$leadActivity = $this->create($data);\n$leadActivityFile = $leadActivity->files()->create([\n'name' => request()->file('file')->getClientOriginalName(),\n'storage_path' => request()->file('file')->store('lead_activities'),\n]);\nreturn $leadActivityFile;\n}", "CodeBleu_score": 47.13161672507597}, {"code": "<?\npublic function upload(array $data){\n\tif (!request()->hasFile('file')) {\nreturn false;\n}\n$leadActivity = $this->activityRepository->create($data);\n$file = request()->file('file');\n$leadActivityFile = $this->leadActivityFileRepository->create([\n'lead_activity_id' => $leadActivity->id,\n'name' => $file->getClientOriginalName(),\n'path' => $file->store('uploads/lead_activities'),\n]);\nreturn $leadActivityFile;\n}", "CodeBleu_score": 46.752189060476624}, {"code": "<?\npublic function upload(array $data){\n\t\nif ( ! request()->hasFile('file')) {\nreturn;\n}\n\n$leadActivity = $this->create($data);\n\n$file = request()->file('file');\n\n$file->store('files');\n\n$file = File::create([\n'name' => $file->getClientOriginalName(),\n'path' => $file->store('files'),\n'activity_id' => $leadActivity->id,\n]);\n\nreturn $file;\n}", "CodeBleu_score": 49.01664880265004}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t\n// Check if the route is for admin or front\nif (in_array(request()->route()->getName(), ['admin.login', 'admin.register'])) {\n\n// Redirect front routes to the admin session creation\nreturn redirect()->route('admin.login');\n\n} else {\n\n// Set the status code to a specified value or 500\nif ($exception instanceof HttpException) {\n$statusCode = $exception->getStatusCode();\n} else {\n$statusCode = 500;\n}\n\n// Return appropriate responses for ModelNotFoundException, PDOException, and ParseError\nif ($exception instanceof ModelNotFoundException) {\nreturn response()->view('errors.404', [], $statusCode);\n} elseif ($exception instanceof PDOException) {\nreturn response()->view('errors.500', [], $statusCode);\n} elseif ($exception instanceof ParseError) {\nreturn response()->view('errors.500', [], $statusCode);\n}\n\n// Return the response\nreturn response()->view('errors.default', ['exception' => $exception], $statusCode);\n\n}\n\n}", "CodeBleu_score": 42.720766484731854}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t$request = request();\n$route = $request->route();\n$routeName = $route->getName();\n$routeIs = $request->routeIs('admin.*');\n$statusCode = $exception->getStatusCode();\n$response = $this->response;\n$response->setStatusCode($statusCode);\n\nif ($routeIs) {\n$response->redirect('/admin/login');\n}\n\nif ($statusCode == 404) {\n$response->setStatusCode(404);\n$response->view('errors/404');\n}\n\nif ($statusCode == 401) {\n$response->setStatusCode(401);\n$response->view('errors/401');\n}\n\nif ($statusCode == 403) {\n$response->setStatusCode(403);\n$response->view('errors/403');\n}\n\nif ($statusCode == 500) {\n$response->setStatusCode(500);\n$response->view('errors/500');\n}\n\nreturn $response;\n}", "CodeBleu_score": 33.4087746451603}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t$request = request();", "CodeBleu_score": 8.212551205266905}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\t$request = Request::capture();\nif ($request->expectsJson()) {\nreturn response()->json(['error' => 'The requested resource could not be found.'], $statusCode);\n} else {\nreturn response()->view('errors.' . $statusCode, ['path' => $path], $statusCode);\n}\n}", "CodeBleu_score": 46.609570504941075}, {"code": "<?\nprivate function response($path, $statusCode){\n\tif(request()->expectsJson()) {\nreturn response()->json([\n\"error\" => \"Invalid request type.\"\n], $statusCode);\n}\nreturn response()->view(\"errors.{$statusCode}\", [\n\"path\" => $path\n], $statusCode);\n}", "CodeBleu_score": 48.762373820252684}, {"code": "<?\nprivate function response($path, $statusCode){\n\t$request = request();\nif ($request->expectsJson()) {\nreturn response()->json([\n'error' => 'Unauthorized'\n], $statusCode);\n} else {\nreturn response()->view('errors.' . $statusCode, [\n'path' => $path\n], $statusCode);\n}\n}", "CodeBleu_score": 47.143199284173875}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t$ids = request('activity_ids');\n$count = 0;\nforeach ($ids as $id) {\n$activity = $this->activityRepository->find($id);\nevent(new ActivityWasUpdated($activity));\n$activity->is_done = request('is_done');\n$activity->save();\nevent(new ActivityWasUpdated($activity));\n$count++;\n}\nreturn response()->json(['success' => true, 'updated_count' => $count]);\n}", "CodeBleu_score": 32.076321886738974}, {"code": "<?\npublic function massUpdate(){\n\t// Get the activity IDs from the request\n$activity_ids = Request::input('activity_ids');\n\n// If no activity IDs were specified, return a JSON response indicating failure\nif (empty($activity_ids)) {\nreturn Response::json([\n'success' => false,\n'error' => 'No activity IDs specified',\n], 400);\n}\n\n// Iterate over the activity IDs\n$count = 0;\nforeach ($activity_ids as $activity_id) {\n// Dispatch an event before updating the activity\nEvent::dispatch('activity.updating', [$activity_id]);\n\n// Update the activity\n$activity = $this->activityRepository->update([\n'is_done' => Request::input('is_done')\n], $activity_id);\n\n// Dispatch an event after updating the activity\nEvent::dispatch('activity.updated', [$activity]);\n\n// Increment the counter\n$count++;\n}\n\n// If no updates were made, return a JSON response indicating failure\nif ($count == 0) {\nreturn Response::json([\n'success' => false,\n'error' => 'No activities were updated',\n], 400);\n}\n\n// Return a JSON response indicating success\nreturn Response::json([\n'success' => true,\n'count' => $count,\n], 200);\n}", "CodeBleu_score": 41.6695881782163}, {"code": "<?\npublic function massUpdate(){\n\t$activityIds = request('activityIds');\n$activityIds = explode(',', $activityIds);\n$updatedActivities = 0;\nforeach ($activityIds as $activityId) {\n$activity = $this->activityRepository->find($activityId);\nEvent::dispatch('activity.updating', $activity);\n$activity->is_done = request('isDone');\n$activity->save();\nEvent::dispatch('activity.updated', $activity);\n$updatedActivities++;\n}\nreturn response()->json([\n'updatedActivities' => $updatedActivities\n]);\n}", "CodeBleu_score": 40.55354106922934}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t$this->activityRepository->massDestroy", "CodeBleu_score": 3.6428293335022426}, {"code": "<?\n public function massDestroy(){\n\t$this->activityRepository->deleteWhereIn('id', request('ids'));\n\nreturn response()->json([\n'message' => trans('brackets/admin-ui::admin.operation.succeeded'),\n]);\n}", "CodeBleu_score": 21.173715090315977}, {"code": "<?\n public function massDestroy(){\n\t$this->activityRepository->massDestroy", "CodeBleu_score": 3.6428293335022426}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t$cards = $this->dashboardHelper->getCards();\n$request_data = request()->all();\nforeach ($cards as $card) {\nif (isset($request_data[$card->id])) {\n$card->selected = $request_data[$card->id];\n$card->save();\n}\n}\nreturn response()->json($cards);\n}", "CodeBleu_score": 34.613814710038234}, {"code": "<?\n public function updateCards(){\n\t $cards = $this->dashboardHelper->getCards();\n $requestData = request()->all();\n foreach ($cards as $card) {\n $cardId = $card['id'];\n if (isset($requestData[$cardId])) {\n $card['selected'] = $requestData[$cardId];\n }\n }\n return response()->json($cards);\n }", "CodeBleu_score": 41.07230532102903}, {"code": "<?\n public function updateCards(){\n\t$request = request()\n$cards = $this->dashboardHelper->getCards()\n$requestData = $request->all()\n$cards->map(function($card) use ($requestData) {\n$card->selected = $requestData['selected']\n$card->save()\n})\nreturn response()->json($cards)\n}", "CodeBleu_score": 24.26366333209845}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t// Dispatches an event before saving\nEvent::dispatch('configuration.before.store', [$this->configurationRepository, $this->request]);\n// Creates the configuration with the provided request data\n$configuration = $this->configurationRepository->create($this->request->all());\n// Dispatches an event after saving\nEvent::dispatch('configuration.after.store', [$configuration]);\n// Flashes a success message to the session\nsession()->flash('success', trans('configuration::configuration.success.create'));\n// Redirects back to the previous page\nreturn redirect()->back();\n}", "CodeBleu_score": 36.91900838577368}, {"code": "<?\npublic function store(){\n\t$this->dispatcher->dispatch(new ConfigurationCreating($this->request->all()));\n\n$configuration = $this->configurationRepository->create($this->request->all());\n\n$this->dispatcher->dispatch(new ConfigurationCreated($configuration));\n\n$this->flash->success(trans('configuration::configuration.success.create'));\n\nreturn redirect()->back();\n}", "CodeBleu_score": 32.595001452436264}, {"code": "<?\npublic function store(){\n\t$this->eventDispatcher->dispatch('configuration.create.before', new Event($this->request));\n$configuration = $this->configurationRepository->create($this->request->all());\n$this->eventDispatcher->dispatch('configuration.create.after', new Event($configuration));\n$this->session->flash('success', $this->trans('Configuration has been created.'));\nreturn redirect()->back();\n}", "CodeBleu_score": 32.188774726404645}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t$path = $this->request->route()->parameters()[\"path\"];\n$file_name = $this->configurationRepository->findOneByField(\"path\", $path)[\"value\"];\n$file_path = storage_path(\"app/public/\") . $file_name;\nreturn response()->download($file_path, $file_name);\n}", "CodeBleu_score": 44.43618307078637}, {"code": "<?\npublic function download(){\n\t$file_path = $this->request->route()->parameters['file_path'];\n$file_name = $file_path;\n$configuration = $this->configurationRepository->findOneByField('file_path', $file_path);\n\nif ($configuration) {\n$file_name = $configuration->getFileName();\n}\n\nreturn Storage::download($file_path, $file_name);\n}", "CodeBleu_score": 48.761442047644685}, {"code": "<?\npublic function download(){\n\t$route = request()->route();\n$parameters = $route->parameters();\n$file_name = $parameters['file_name'];\n$configuration = $this->configurationRepository->findOneByField('file_name', $file_name);\n$file_path = storage_path('app/' . $configuration->file_path);\nreturn response()->download($file_path);\n}", "CodeBleu_score": 48.647095798779795}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\tList<AdminModelSort> modelSorts = new ArrayList<>();\n\tfor (String s : list) {\n\t\tAdminModelSort modelSort = new AdminModelSort();\n\t\tmodelSort.setSort(s);\n\t\tmodelSorts.add(modelSort);\n\t}\n\tAdminUser user = getUser();\n\tuser.setSort(null);\n\tuser.setSortType(null);\n\tuser.setSortList(null);\n\tuser.saveBatch();\n\tuser.setSortList(modelSorts);\n\tuser.save();\n\treturn ok();\n}", "CodeBleu_score": 32.31164620332044}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\tList<AdminModelSort> modelSorts = new ArrayList<>();\n\tfor (String model : list) {\n\t\tAdminModelSort modelSort = new AdminModelSort();\n\t\tmodelSort.setSort(0);\n\t\tmodelSort.setType(AdminModelSort.TYPE_ASC);\n\t\tmodelSort.setModel(model);\n\t\tmodelSorts.add(modelSort);\n\t}\n\tadminUserService.removeHeaderModelSort(getUserId());\n\tadminUserService.saveBatch(getUserId(), modelSorts);\n\treturn Result.ok();\n}", "CodeBleu_score": 37.74856322075371}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\tList<AdminModelSort> modelSorts = new ArrayList<AdminModelSort>();\n\tfor (String s : list) {\n\t\tAdminModelSort modelSort = new AdminModelSort();\n\t\tString[] modelSortArray = s.split(\",\");\n\t\tmodelSort.setSort(Integer.parseInt(modelSortArray[0]));\n\t\tmodelSort.setType(Integer.parseInt(modelSortArray[1]));\n\t\tmodelSort.setOk(Boolean.parseBoolean(modelSortArray[2]));\n\t\tmodelSorts.add(modelSort);\n\t}\n\tadminService.setHeaderModelSort(getUserId(), modelSorts);\n\treturn new Result(true, \"Success\");\n}", "CodeBleu_score": 33.325499786918535}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t\nModuleSettingBO existingModuleSetting = moduleSettingService.getById(moduleSetting.getSettingId());\n\nif (existingModuleSetting == null) {\nreturn Result.error(\"Setting not found\");\n}\n\nif (existingModuleSetting.getModule() == Module.CRM) {\nreturn Result.error(\"CRM module cannot be disabled\");\n}\n\nexistingModuleSetting.setStatus(moduleSetting.getStatus());\n\nreturn moduleSettingService.setModuleSetting(existingModuleSetting);\n}", "CodeBleu_score": 46.98282824900429}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t\tif (moduleSetting.getModule() != null && moduleSetting.getModule().equals(\"CRM\")) {\n\t\treturn new ErrorResult(new IllegalArgumentException(\"You cannot update the status of CRM settings\"));\n\t}\n\tAdminConfiguration adminConfiguration = adminConfigurationRepository.findById(moduleSetting.getSettingId()).orElseThrow(() -> new IllegalArgumentException(\"Admin configuration not found\"));\n\tadminConfiguration.setStatus(moduleSetting.getStatus());\n\tadminConfigurationRepository.save(adminConfiguration);\n\treturn new SuccessResult(adminConfiguration);\n}", "CodeBleu_score": 44.911554186996796}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t\tModuleSettingBO setting = moduleSettingService.findSettingById(moduleSetting.getSettingId());\n\tif (setting == null) {\n\t\treturn Result.error(\"Setting not found\");\n\t}\n\tif (setting.getModule() == Module.CRM) {\n\t\treturn Result.error(\"Cannot change CRM settings\");\n\t}\n\tsetting.setStatus(moduleSetting.getStatus());\n\tmoduleSettingService.save(setting);\n\treturn Result.ok();\n}", "CodeBleu_score": 50.962703790500704}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t String customSetting = json.toString();\n String userConfig = userConfigService.queryUserConfigByName(customKey);\n if (userConfig != null) {\n userConfigService.setValue(customKey, customSetting);\n } else {\n UserConfig userConfig = new UserConfig();\n userConfig.setUserId(getUserId());\n userConfig.setName(customKey);\n userConfig.setDescription(\"Custom Setting\");\n userConfig.setValue(customSetting);\n userConfig.setStatus(UserConfig.STATUS_ENABLED);\n userConfigService.save(userConfig);\n }\n return new Result(Result.STATUS_SUCCESS, \"Custom Setting saved successfully\");\n }", "CodeBleu_score": 52.906411027244616}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\nUserConfig userConfig = userConfigService.queryUserConfigByName(customKey);\n\nif(userConfig == null) {\nuserConfig = new UserConfig();\nuserConfig.setName(customKey);\nuserConfig.setDescription(\"Custom setting\");\nuserConfig.setValue(json.toJSONString());\nuserConfig.setUserId(SecurityUtils.getCurrentUserId());\nuserConfig.setStatus(UserConfigStatus.ENABLED);\nuserConfigService.save(userConfig);\n} else {\nuserConfig.setValue(json.toJSONString());\nuserConfigService.updateById(userConfig);\n}\n\nreturn Result.ok();\n}", "CodeBleu_score": 65.25839660982325}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t UserConfig userConfig = new UserConfig();\n userConfig.setUserId(getUserId());\n userConfig.setConfigKey(customKey);\n userConfig.setValue(json.toJSONString());\n userConfig.setDescription(\"Custom Setting\");\n userConfig.setName(\"Custom Setting\");\n userConfig.setStatus(1);\n UserConfig userConfig1 = userConfigService.queryUserConfigByName(userConfig);\n if (userConfig1 != null) {\n userConfig1.setValue(json.toJSONString());\n userConfig1.setUserId(getUserId());\n userConfig1.setConfigKey(customKey);\n userConfig1.setDescription(\"Custom Setting\");\n userConfig1.setName(\"Custom Setting\");\n userConfig1.setStatus(1);\n userConfigService.updateById(userConfig1);\n } else {\n userConfig.setUserId(getUserId());\n userConfig.setConfigKey(customKey);\n userConfig.setValue(json.toJSONString());\n userConfig.setDescription(\"Custom Setting\");\n userConfig.setName(\"Custom Setting\");\n userConfig.setStatus(1);\n userConfigService.save(userConfig);\n }\n return Result.ok();\n }", "CodeBleu_score": 52.46133440883668}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\n// Query the user information from the database\nAdminUser user = adminUserService.getUserInfo(userId);\n\n// Retrieve the department name based on the user's department ID\nString deptName = adminUserService.getDeptNameByDeptId(user.getDeptId());\n\n// Set the department name in the user object\nuser.setDeptName(deptName);\n\n// Nullify the salt and password fields\nuser.setSalt(null);\nuser.setPassword(<PASSWORD>);\n\n// Return the user information wrapped in a result object\nreturn Result.ok(user);\n}", "CodeBleu_score": 48.386473040976405}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser user = adminUserService.getUserInfo(userId);\n\tif (user == null) {\n\t\treturn Result.error(\"user not found\");\n\t}\n\tString deptName = adminUserService.getDeptName(user.getDeptId());\n\tuser.setDeptName(deptName);\n\tuser.setSalt(null);\n\tuser.setPassword(null);\n\treturn Result.ok(user);\n}", "CodeBleu_score": 49.31593143652204}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\tAdminUser adminUser = adminUserService.queryById(userId);\nif (adminUser == null) {\nreturn Result.error(\"User does not exist\");\n}\nString deptName = adminDeptService.queryById(adminUser.getDeptId()).getName();\nadminUser.setDeptName(deptName);\nadminUser.setSalt(null);\nadminUser.setPassword(null);\nreturn Result.ok(adminUser);\n}", "CodeBleu_score": 52.053898680340616}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t // Get the current user\n User user = getCurrentUser();\n // Get the user ID\n Long userId = user.getId();\n // Get the list of \"readNotice\" entries for the user\n List<Notice> notices = Notice.find.where().eq(\"userId\", userId).eq(\"status\", 0).findList();\n // If there are no \"readNotice\" entries for the user, create a new one\n if (notices.size() == 0) {\n Notice notice = new Notice();\n notice.setUserId(userId);\n notice.setStatus(1);\n notice.save();\n } else {\n // If there are \"readNotice\" entries for the user, update the status for all entries to 1\n for (Notice notice : notices) {\n notice.setStatus(1);\n notice.update();\n }\n }\n // Return a success result\n return ok();\n }", "CodeBleu_score": 30.75580351043022}, {"code": " public Result readNotice() {\n\t\tint userId = getUserId();\n\tint count = 0;\n\tfor (UserNotice userNotice : UserNotice.query(UserNotice.userId.eq(userId))) {\n\t\tif (userNotice.noticeType.equals(\"readNotice\")) {\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (count > 1) {\n\t\tfor (UserNotice userNotice : UserNotice.query(UserNotice.userId.eq(userId))) {\n\t\t\tif (userNotice.noticeType.equals(\"readNotice\")) {\n\t\t\t\tuserNotice.status = 1;\n\t\t\t\tuserNotice.save();\n\t\t\t}\n\t\t}\n\t} else {\n\t\tUserNotice userNotice = new UserNotice();\n\t\tuserNotice.noticeType = \"readNotice\";\n\t\tuserNotice.userId = userId;\n\t\tuserNotice.status = 1;\n\t\tuserNotice.save();\n\t}\n\treturn ok();\n}", "CodeBleu_score": 28.27525161096912}, {"code": " public Result readNotice() {\n\t\tString userId = getUserId();\n\tList<Notice> notices = Notice.find(Notice.class, \"userId = ?\", userId);\n\tif (notices.size() > 1) {\n\t\tfor (Notice notice : notices) {\n\t\t\tnotice.setStatus(1);\n\t\t\tnotice.save();\n\t\t}\n\t} else {\n\t\tNotice notice = new Notice();\n\t\tnotice.setUserId(userId);\n\t\tnotice.setStatus(1);\n\t\tnotice.save();\n\t}\n\treturn ok();\n}", "CodeBleu_score": 23.329964525620987}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\tConfigurationService configurationService = (ConfigurationService) ComponentAccessor.getComponent(ConfigurationService.class);\n\tString companyInfo = configurationService.getConfiguration(Constants.COMPANY_INFO_CONFIG_KEY);\n\tif (companyInfo == null) {\n\t\tcompanyInfo = \"{}\";\n\t}\n\tJSONObject companyInfoJson = JSONObject.fromObject(companyInfo);\n\tcompanyInfoJson.put(\"companyName\", adminCompanyBO.getCompanyName());\n\tcompanyInfoJson.put(\"companyAddress\", adminCompanyBO.getCompanyAddress());\n\tcompanyInfoJson.put(\"companyPhone\", adminCompanyBO.getCompanyPhone());\n\tcompanyInfoJson.put(\"companyEmail\", adminCompanyBO.getCompanyEmail());\n\tcompanyInfoJson.put(\"companyWebsite\", adminCompanyBO.getCompanyWebsite());\n\tcompanyInfoJson.put(\"companyLogo\", adminCompanyBO.getCompanyLogo());\n\tcompanyInfoJson.put(\"companyLogoUrl\", adminCompanyBO.getCompanyLogoUrl());\n\tcompanyInfoJson.put(\"companyLogoAlt\", adminCompanyBO.getCompanyLogoAlt());\n\tcompanyInfoJson.put(\"companyLogoWidth\", adminCompanyBO.getCompanyLogoWidth());\n\tcompanyInfoJson.put(\"companyLogoHeight\", adminCompanyBO.getCompanyLogoHeight());\n\tcompanyInfoJson.put(\"companyBanner\", adminCompanyBO.getCompanyBanner());\n\tcompanyInfoJson.put(\"companyBannerUrl\", adminCompanyBO.getCompanyBannerUrl());\n\tcompanyInfoJson.put(\"companyBannerAlt\", adminCompanyBO.getCompanyBannerAlt());\n\tcompanyInfoJson.put(\"companyBannerWidth\", adminCompanyBO.getCompanyBannerWidth());\n\tcompanyInfoJson.put(\"companyBannerHeight\", adminCompanyBO.getCompanyBannerHeight());\n\tcompanyInfoJson.put(\"companyDescription\", adminCompanyBO.getCompanyDescription());\n\tcompanyInfoJson.put(\"companyKeywords\", adminCompanyBO.getCompanyKeywords());\n\tcompanyInfoJson.put(\"companyCopyright\", adminCompanyBO.getCompanyCopyright());\n\tcompanyInfoJson.put(\"companyMetaDescription\", adminCompanyBO.getCompanyMetaDescription());\n\tcompanyInfoJson.put(\"companyMetaKeywords\", adminCompanyBO.getCompanyMetaKeywords());\n\tcompanyInfoJson.put(\"companyMetaAuthor\", adminCompanyBO.getCompanyMetaAuthor());\n\tcompanyInfoJson.put(\"companyMetaCopyright\", adminCompany", "CodeBleu_score": 29.33988083566006}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\tAdminConfig adminConfig = AdminConfig.getConfig(\"companyInfo\");\n\tif (adminConfig == null) {\n\t\tadminConfig = new AdminConfig();\n\t\tadminConfig.setName(\"companyInfo\");\n\t\tadminConfig.setValue(\"{\\\"companyName\\\":\\\"\\\",\\\"companyAddress\\\":\\\"\\\",\\\"companyCity\\\":\\\"\\\",\\\"companyState\\\":\\\"\\\",\\\"companyZip\\\":\\\"\\\",\\\"companyPhone\\\":\\\"\\\",\\\"companyEmail\\\":\\\"\\\",\\\"companyFax\\\":\\\"\\\",\\\"companyWebsite\\\":\\\"\\\",\\\"companyLogo\\\":\\\"\\\",\\\"companyLogoHeight\\\":0,\\\"companyLogoWidth\\\":0,\\\"companyLogoType\\\":\\\"\\\",\\\"companyLogoName\\\":\\\"\\\",\\\"companyLogoPath\\\":\\\"\\\",\\\"companyLogoUrl\\\":\\\"\\\",\\\"companyLogoAltText\\\":\\\"\\\",\\\"companyLogoTitle\\\":\\\"\\\",\\\"companyLogoTarget\\\":\\\"\\\",\\\"companyLogoTargetBlank\\\":false,\\\"companyLogoAlign\\\":\\\"\\\"}\");\n\t}\n\tadminConfig.setValue(adminCompanyBO.toJSONString());\n\tadminConfig.saveOrUpdate();\n}", "CodeBleu_score": 34.293291635776995}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\nAdminConfig adminConfig = adminConfigService.getAdminConfigByName(\"companyInfo\");\n\nif (adminConfig == null) {\nadminConfig = new AdminConfig();\nadminConfig.setName(\"companyInfo\");\nadminConfig.setValue(\"{}\");\n}\n\nString adminConfigValue = adminConfig.getValue();\n\nif (adminConfigValue == null) {\nadminConfigValue = \"{}\";\n}\n\nJSONObject adminConfigJson = JSONObject.fromObject(adminConfigValue);\n\nadminConfigJson.put(\"companyName\", adminCompanyBO.getCompanyName());\nadminConfigJson.put(\"companyAddress\", adminCompanyBO.getCompanyAddress());\nadminConfigJson.put(\"companyPhone\", adminCompanyBO.getCompanyPhone());\nadminConfigJson.put(\"companyFax\", adminCompanyBO.getCompanyFax());\nadminConfigJson.put(\"companyEmail\", adminCompanyBO.getCompanyEmail());\nadminConfigJson.put(\"companyWebsite\", adminCompanyBO.getCompanyWebsite());\nadminConfigJson.put(\"companyLogo\", adminCompanyBO.getCompanyLogo());\nadminConfigJson.put(\"companyLogoThumbnail\", adminCompanyBO.getCompanyLogoThumbnail());\nadminConfigJson.put(\"companyLogoThumbnailWidth\", adminCompanyBO.getCompanyLogoThumbnailWidth());\nadminConfigJson.put(\"companyLogoThumbnailHeight\", adminCompanyBO.getCompanyLogoThumbnailHeight());\nadminConfigJson.put(\"companyLogoWidth\", adminCompanyBO.getCompanyLogoWidth());\nadminConfigJson.put(\"companyLogoHeight\", adminCompanyBO.getCompanyLogoHeight());\nadminConfigJson.put(\"companyLogoType\", adminCompanyBO.getCompanyLogoType());\nadminConfigJson.put(\"companyLogoExtension\", adminCompanyBO.getCompanyLogoExtension());\nadminConfigJson.put(\"companyLogoContentType\", adminCompanyBO.getCompanyLogoContentType());\nadminConfigJson.put(\"companyLogoThumbnailExtension\", adminCompanyBO.getCompanyLogoThumbnailExtension());\nadminConfigJson.put(\"companyLogoThumbnailContentType\", adminCompanyBO.getCompanyLogoThumbnailContentType());\n\nadminConfig.setValue(adminConfigJson.toString());\nadminConfigService.saveOrUpdate(adminConfig);\n}", "CodeBleu_score": 42.009461029959674}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminCompanyBO adminCompany = new AdminCompanyBO();\n\ttry {\n\t\tString adminConfig = (String) this.getValue(this.getCompanyId(), \"adminConfig\");\n\t\tif (adminConfig != null) {\n\t\t\tadminCompany = (AdminCompanyBO) this.parseObject(adminConfig);\n\t\t}\n\t} catch (Exception e) {\n\t\tlog.error(\"Error parsing admin configuration for company: \" + this.getCompanyId(), e);\n\t}\n\treturn adminCompany;\n}", "CodeBleu_score": 43.2494586330031}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n\tString query = \"SELECT * FROM admin_company WHERE admin_company_key = 'company_config'\";\n\tList<Map<String, Object>> results = lambdaQuery(query).list();\n\tif (results.size() > 0) {\n\t\tMap<String, Object> result = results.get(0);\n\t\tadminCompanyBO.setAdminCompanyKey((String) result.get(\"admin_company_key\"));\n\t\tadminCompanyBO.setAdminCompanyValue((String) result.get(\"admin_company_value\"));\n\t\tadminCompanyBO.setAdminCompanyDescription((String) result.get(\"admin_company_description\"));\n\t\tadminCompanyBO.setAdminCompanyStatus((String) result.get(\"admin_company_status\"));\n\t\tadminCompanyBO.setAdminCompanyCreatedTimestamp((Timestamp) result.get(\"admin_company_created_timestamp\"));\n\t\tadminCompanyBO.setAdminCompanyUpdatedTimestamp((Timestamp) result.get(\"admin_company_updated_timestamp\"));\n\t\tadminCompanyBO.setAdminCompanyCreatedBy((String) result.get(\"admin_company_created_by\"));\n\t\tadminCompanyBO.setAdminCompanyUpdatedBy((String) result.get(\"admin_company_updated_by\"));\n\t\tadminCompanyBO.setAdminCompanyId((Integer) result.get(\"admin_company_id\"));\n\t\tadminCompanyBO.setAdminCompanyVersion((Integer) result.get(\"admin_company_version\"));\n\t\tadminCompanyBO.setAdminCompanyIsDeleted((Boolean) result.get(\"admin_company_is_deleted\"));\n\t\tadminCompanyBO.setAdminCompanyIsLocked((Boolean) result.get(\"admin_company_is_locked\"));\n\t\tadminCompanyBO.setAdminCompanyIsVisible((Boolean) result.get(\"admin_company_is_visible\"));\n\t}\n\treturn adminCompanyBO;\n}", "CodeBleu_score": 30.28171098208193}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n\ttry {\n\t\tString query = \"SELECT value FROM admin_configuration WHERE key = 'company_config'\";\n\t\tList<Map<String, Object>> queryResult = lambdaQuery(query).getResultList();\n\t\tif (queryResult.size() == 1) {\n\t\t\tString companyConfig = (String) queryResult.get(0).get(\"value\");\n\t\t\tadminCompanyBO = parseObject(companyConfig, AdminCompanyBO.class);\n\t\t}\n\t} catch (Exception e) {\n\t\tlog.error(\"Error retrieving admin configuration for company\", e);\n\t}\n\treturn adminCompanyBO;\n}", "CodeBleu_score": 46.28739050902069}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t AdminConfig logConfig = AdminConfig.getid(\"/Log:server1/FileHandler:com.ibm.ws.webcontainer.webapp.WebAppContext_1.0/FileLogging:com.ibm.ws.webcontainer.webapp.WebAppContext_1.0/FileHandler:com.ibm.ws.webcontainer.webapp.WebAppContext_1.0/FileLogging\");\n AdminConfig[] logHandlers = logConfig.list(\"fileHandler\");\n AdminConfig[] fileHandlers = logConfig.list(\"fileHandler\");\n for (int i = 0; i < fileHandlers.length; i++) {\n AdminConfig fileHandler = fileHandlers[i];\n fileHandler.remove();\n }\n for (int i = 0; i < stringList.size(); i++) {\n AdminConfig fileHandler = AdminConfig.create(\"FileHandler\", logConfig.getid());\n AdminConfig fileLogging = AdminConfig.create(\"FileLogging\", fileHandler.getid());\n AdminConfig.create(\"file\", fileLogging.getid());\n AdminConfig.create(\"pattern\", fileLogging.getid(), \"pattern\", stringList.get(i));\n AdminConfig.create(\"append\", fileLogging.getid(), \"append\", \"true\");\n AdminConfig.create(\"rotate\", fileLogging.getid(), \"rotate\", \"false\");\n AdminConfig.create(\"fileHandler\", logConfig.getid(), \"fileHandler\", fileHandler.getid());\n }\n AdminConfig.save();\n }", "CodeBleu_score": 24.02116154913689}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t\tAdminConfig.remove(Constants.LOG_CONFIG_NAME);\n\tfor (String string : stringList) {\n\t\tAdminConfig.create(Constants.LOG_CONFIG_NAME, \"WLLogConfig\", string);\n\t}\n\tAdminConfig.save();\n }", "CodeBleu_score": 12.603327593165965}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t AdminConfig.remove('WebSphere:cell='+cellName+',node='+nodeName+',type=LoggingConfig,name='+logConfigName+',log='+logName+',logFile='+logFileName+',logFileSet='+logFileSetName+',logPublisher='+logPublisherName+',logPublisherSet='+logPublisherSetName);\n AdminConfig.save();\n for(String string : stringList) {\n AdminConfig.create('WebSphere:cell='+cellName+',node='+nodeName+',type=LoggingConfig,name='+logConfigName+',log='+logName+',logFile='+logFileName+',logFileSet='+logFileSetName+',logPublisher='+logPublisherName+',logPublisherSet='+logPublisherSetName, '[[message, '+string+']]');\n }\n AdminConfig.save();\n }", "CodeBleu_score": 23.507904548417237}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tString username = adminInitDataBO.getUsername();\n\tString password = <PASSWORD>();\n\tString salt = adminInitDataBO.getSalt();\n\n\t// get the user's ID\n\tString userId = getUserId(username);\n\n\t// get the user's details\n\tAdminUserBO user = getById(userId);\n\n\t// check the provided password against the stored password\n\tif (user.getPassword().equals(generateHash(password, salt))) {\n\t\t// generate a temporary access code\n\t\tString accessCode = generateRandomString();\n\n\t\t// store the code in Redis with a 10-minute expiration\n\t\tsetex(accessCode, 600, userId);\n\n\t\t// return the code\n\t\treturn accessCode;\n\t} else {\n\t\t// the password is incorrect\n\t\tthrow new InvalidPasswordException();\n\t}\n}", "CodeBleu_score": 27.355789377192664}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\ttry {\n\t\t// Get the user's ID and password from the request body.\n\t\tString username = adminInitDataBO.getUsername();\n\t\tString password = <PASSWORD>();\n\n\t\t// Get the user's ID and details from the database.\n\t\tAdmin admin = adminService.getById(username);\n\t\tString salt = admin.getSalt();\n\t\tString storedPassword = <PASSWORD>();\n\n\t\t// Check the password against the stored password.\n\t\tif (storedPassword.equals(generatePasswordHash(password, salt))) {\n\t\t\t// Generate a temporary access code.\n\t\t\tString accessCode = generateRandomString();\n\n\t\t\t// Store the access code in Redis with a 10-minute expiration.\n\t\t\tString key = username + \"-accessCode\";\n\t\t\tredisService.setex(key, accessCode, 600);\n\n\t\t\treturn accessCode;\n\t\t} else {\n\t\t\tthrow new Exception(\"Invalid password.\");\n\t\t}\n\t} catch (Exception e) {\n\t\tthrow new RuntimeException(e);\n\t}\n}", "CodeBleu_score": 28.757147391174488}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tString username = adminInitDataBO.getUsername();\n\tString password = <PASSWORD>();\n\tString salt = adminInitDataBO.getSalt();\n\tString userId = getUserId(username);\n\tString storedPassword = getPassword(userId);\n\tif (storedPassword == null) {\n\t\tthrow new InvalidPasswordException(\"Invalid password\");\n\t}\n\tString storedSalt = getSalt(userId);\n\tString saltedPassword = password + salt;\n\tString hashedPassword = hashPassword(saltedPassword);\n\tif (!hashedPassword.equals(storedPassword)) {\n\t\tthrow new InvalidPasswordException(\"Invalid password\");\n\t}\n\tString accessCode = generateRandomString();\n\tsetex(accessCode, accessCode, 10 * 60);\n\treturn accessCode;\n}", "CodeBleu_score": 29.41330905127289}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\t\tString userId = getUserId();\n\tString key = \"user:\" + userId + \":unauth\";\n\tList<String> unauth = getRedis().lrange(key, 0, -1);\n\treturn unauth.contains(INIT_AUTH_URL);\n}", "CodeBleu_score": 29.27647363200061}, {"code": "private boolean verifyInitAuth(){\n\t\tString userId = getUserId();\n\tString key = \"unauthorizedMenuUrls:\" + userId;\n\tString unauthorizedMenuUrls = getRedis().get(key);\n\tif (unauthorizedMenuUrls == null) {\n\t\treturn false;\n\t}\n\treturn unauthorizedMenuUrls.contains(getInitAuthUrl());\n}", "CodeBleu_score": 28.30997169639662}, {"code": "private boolean verifyInitAuth(){\n\t\tString userId = getUserId();\n\tString key = \"unauthorized_init_auth_urls:\" + userId;\n\tList<String> unauthorizedUrls = getRedis().lrange(key, 0, -1);\n\treturn unauthorizedUrls.contains(initialAuthUrl);\n}", "CodeBleu_score": 30.11102676956703}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\t// delete the existing role-menu associations for the specified role ID\n\tString hql = \"delete from AdminRoleMenu where roleId = ?\";\n\tgetHibernateTemplate().bulkUpdate(hql, roleId);\n\t// create a list of AdminRoleMenu objects\n\tList<AdminRoleMenu> roleMenuList = new ArrayList<AdminRoleMenu>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu roleMenu = new AdminRoleMenu();\n\t\troleMenu.setRoleId(roleId);\n\t\troleMenu.setMenuId(menuId);\n\t\troleMenuList.add(roleMenu);\n\t}\n\t// save the list of role-menu associations in batches\n\tsaveBatch(roleMenuList);\n}", "CodeBleu_score": 45.40017681826101}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tif (roleId == null) {\n\t\tthrow new IllegalArgumentException(\"roleId is null\");\n\t}\n\tif (menuIdList == null) {\n\t\tthrow new IllegalArgumentException(\"menuIdList is null\");\n\t}\n\tList<AdminRoleMenu> adminRoleMenuList = new ArrayList<AdminRoleMenu>(menuIdList.size());\n\tfor (Integer menuId : menuIdList) {\n\t\tif (menuId == null) {\n\t\t\tthrow new IllegalArgumentException(\"menuId is null\");\n\t\t}\n\t\tAdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n\t\tadminRoleMenu.setRoleId(roleId);\n\t\tadminRoleMenu.setMenuId(menuId);\n\t\tadminRoleMenuList.add(adminRoleMenu);\n\t}\n\tsaveRoleMenuBatch(adminRoleMenuList);\n}", "CodeBleu_score": 52.22397653665144}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tList<AdminRoleMenu> roleMenuList = new ArrayList<>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu roleMenu = new AdminRoleMenu();\n\t\troleMenu.setRoleId(roleId);\n\t\troleMenu.setMenuId(menuId);\n\t\troleMenuList.add(roleMenu);\n\t}\n\tadminRoleMenuDao.saveBatch(roleMenuList);\n}", "CodeBleu_score": 53.99272551822679}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\ttry  {\nString index = getSysLogIndex(sysLog.getLevel());\nMap<String, Object> doc = beanToMap(sysLog);\ndoc.remove(\"id\");\ndoc.put(\"createTime\", formatDateTime(sysLog.getCreateTime()));\nIndexRequest request = new IndexRequest(index).source(doc);\nclient.index(request, RequestOptions.DEFAULT);\n}  catch (Exception e)  {\nlog.error(\"Error saving system log\", e);\n}\n}", "CodeBleu_score": 36.18613549274931}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t\ttry {\n\t\tString index = getSysLogIndex(sysLog.getLogType());\n\t\tMap<String, Object> source = beanToMap(sysLog);\n\t\tsource.put(\"createTime\", formatDateTime(sysLog.getCreateTime()));\n\t\tsource.remove(\"id\");\n\t\tIndexRequest indexRequest = new IndexRequest(index).source(source);\n\t\tindexRequest.opType(DocWriteRequest.OpType.INDEX);\n\t\tindexRequest.id(sysLog.getId().toString());\n\t\tindexRequest.setIfSeqNo(sysLog.getSeqNo());\n\t\tindexRequest.setIfPrimaryTerm(sysLog.getPrimaryTerm());\n\t\tindexRequest.timeout(TimeValue.timeValueSeconds(10));\n\t\tindexRequest.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE);\n\t\tgetClient().index(indexRequest, RequestOptions.DEFAULT);\n\t} catch (Exception e) {\n\t\tlog.error(e.getMessage(), e);\n\t}\n}", "CodeBleu_score": 43.69303860392372}, {"code": "public void saveSysLog(SysLog sysLog) {\n\ttry  {\nif (sysLog != null)  {\nString index = getSysLogIndex(sysLog.getLevel());\nMap<String, Object> logMap = beanToMap(sysLog);\nlogMap.put(\"timestamp\", formatDateTime(sysLog.getCreateTime()));\nlogMap.remove(\"id\");\nIndexRequest indexRequest = new IndexRequest(index).source(logMap);\ngetClient().indexAsync(indexRequest, RequestOptions.DEFAULT, new ActionListener<IndexResponse>()  {\n@Override\npublic void onResponse(IndexResponse indexResponse)  {\nif (indexResponse.status().getStatus() != RestStatus.CREATED)  {\nlog.error(\"Error saving log: \" + indexResponse.status().getStatus());\n}\n}\n@Override\npublic void onFailure(Exception e)  {\nlog.error(\"Error saving log\", e);\n}\n});\n}\n}\ncatch (Exception e)  {\nlog.error(\"Error saving log\", e);\n}\n}", "CodeBleu_score": 44.78157467142341}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t\ttry {\n\t\tSearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n\t\tBoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n\t\tif (querySysLogBO.getSearchText() != null) {\n\t\t\tboolQueryBuilder.must(QueryBuilders.matchQuery(\"message\", querySysLogBO.getSearchText()));\n\t\t}\n\t\tif (querySysLogBO.getFromDate() != null) {\n\t\t\tboolQueryBuilder.must(QueryBuilders.rangeQuery(\"creationTime\").from(querySysLogBO.getFromDate()));\n\t\t}\n\t\tif (querySysLogBO.getToDate() != null) {\n\t\t\tboolQueryBuilder.must(QueryBuilders.rangeQuery(\"creationTime\").to(querySysLogBO.getToDate()));\n\t\t}\n\t\tif (querySysLogBO.getLevel() != null) {\n\t\t\tboolQueryBuilder.must(QueryBuilders.termQuery(\"level\", querySysLogBO.getLevel()));\n\t\t}\n\t\tif (querySysLogBO.getSource() != null) {\n\t\t\tboolQueryBuilder.must(QueryBuilders.termQuery(\"source\", querySysLogBO.getSource()));\n\t\t}\n\t\tif (querySysLogBO.getErrorCode() != null) {\n\t\t\tboolQueryBuilder.must(QueryBuilders.termQuery(\"errorCode\", querySysLogBO.getErrorCode()));\n\t\t}\n\t\tsearchSourceBuilder.query(boolQueryBuilder);\n\t\tsearchSourceBuilder.sort(\"creationTime\", SortOrder.DESC);\n\t\tsearchSourceBuilder.fetchSource(false, \"creationTime\", \"message\", \"level\", \"source\", \"errorCode\");\n\t\tSearchRequest searchRequest = new SearchRequest(SysLogIndex.INDEX_NAME);\n\t\tsearchRequest.source(searchSourceBuilder);\n\t\tSearchResponse searchResponse = esClient.search(searchRequest, RequestOptions.DEFAULT);\n\t\tSearchHit[] searchHits = searchResponse.getHits().getHits();\n\t\tList<SysLog> sysLogList = new ArrayList<>();\n\t\tfor (SearchHit searchHit : searchHits) {\n\t\t\tMap<String, Object> sourceAsMap = searchHit.getSourceAsMap();\n\t\t\tSysLog sysLog = mapToBean(sourceAsMap, SysLog.class);\n\t\t\tsysLogList.add(sysLog);\n\t\t}\n\t\tBasePage<SysLog> basePage = new BasePage<>();\n\t\tbasePage.set", "CodeBleu_score": 44.70964371632867}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t\ttry {\n\t\tSearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n\t\tBoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n\t\tboolQueryBuilder.filter(QueryBuilders.rangeQuery(\"createTime\").gte(querySysLogBO.getStartTime()).lte(querySysLogBO.getEndTime()));\n\t\tboolQueryBuilder.filter(QueryBuilders.matchQuery(\"level\", querySysLogBO.getLevel()));\n\t\tboolQueryBuilder.filter(QueryBuilders.matchQuery(\"type\", querySysLogBO.getType()));\n\t\tboolQueryBuilder.filter(QueryBuilders.matchQuery(\"method\", querySysLogBO.getMethod()));\n\t\tboolQueryBuilder.filter(QueryBuilders.matchQuery(\"uri\", querySysLogBO.getUri()));\n\t\tboolQueryBuilder.filter(QueryBuilders.matchQuery(\"ip\", querySysLogBO.getIp()));\n\t\tboolQueryBuilder.filter(QueryBuilders.matchQuery(\"message\", querySysLogBO.getMessage()));\n\t\tboolQueryBuilder.filter(QueryBuilders.matchQuery(\"username\", querySysLogBO.getUsername()));\n\t\tboolQueryBuilder.filter(QueryBuilders.matchQuery(\"browser\", querySysLogBO.getBrowser()));\n\t\tboolQueryBuilder.filter(QueryBuilders.matchQuery(\"os\", querySysLogBO.getOs()));\n\t\tboolQueryBuilder.filter(QueryBuilders.matchQuery(\"result\", querySysLogBO.getResult()));\n\t\tsearchSourceBuilder.query(boolQueryBuilder);\n\t\tsearchSourceBuilder.from(querySysLogBO.getCurrent() * querySysLogBO.getSize());\n\t\tsearchSourceBuilder.size(querySysLogBO.getSize());\n\t\tsearchSourceBuilder.sort(\"createTime\", SortOrder.DESC);\n\t\tsearchSourceBuilder.exclude(\"hits\");\n\t\tSearchRequest searchRequest = new SearchRequest(SysLogIndex.SYS_LOG_INDEX_NAME);\n\t\tsearchRequest.source(searchSourceBuilder);\n\t\tSearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n\t\tList<SysLog> sysLogList = new ArrayList<>();\n\t\tfor (SearchHit searchHit : searchResponse.getHits().getHits()) {\n\t\t\tSysLog sysLog = new SysLog();\n\t\t\tsysLog.setUsername(searchHit.getSourceAsMap().get(\"username\").toString());\n\t\t\tsysLog.setIp(searchHit.getSourceAsMap().get(\"ip\").toString());\n\t\t\tsysLog", "CodeBleu_score": 42.21354799535253}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t\ttry {\n\t\tSearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n\t\tif (querySysLogBO.getSysLogId() != null) {\n\t\t\tsearchSourceBuilder.query(QueryBuilders.termQuery(\"sysLogId\", querySysLogBO.getSysLogId()));\n\t\t}\n\t\tif (querySysLogBO.getSysLogName() != null) {\n\t\t\tsearchSourceBuilder.query(QueryBuilders.termQuery(\"sysLogName\", querySysLogBO.getSysLogName()));\n\t\t}\n\t\tif (querySysLogBO.getSysLogType() != null) {\n\t\t\tsearchSourceBuilder.query(QueryBuilders.termQuery(\"sysLogType\", querySysLogBO.getSysLogType()));\n\t\t}\n\t\tif (querySysLogBO.getSysLogStatus() != null) {\n\t\t\tsearchSourceBuilder.query(QueryBuilders.termQuery(\"sysLogStatus\", querySysLogBO.getSysLogStatus()));\n\t\t}\n\t\tif (querySysLogBO.getStartTime() != null) {\n\t\t\tsearchSourceBuilder.query(QueryBuilders.rangeQuery(\"sysLogCreateTime\").from(querySysLogBO.getStartTime()));\n\t\t}\n\t\tif (querySysLogBO.getEndTime() != null) {\n\t\t\tsearchSourceBuilder.query(QueryBuilders.rangeQuery(\"sysLogCreateTime\").to(querySysLogBO.getEndTime()));\n\t\t}\n\t\tsearchSourceBuilder.sort(\"sysLogCreateTime\", SortOrder.DESC);\n\t\tsearchSourceBuilder.fetchSource(false, \"sysLogId\", \"sysLogName\", \"sysLogType\", \"sysLogStatus\", \"sysLogContent\", \"sysLogCreateTime\");\n\t\tSearchRequest searchRequest = new SearchRequest(SysLog.SYSLOG_INDEX);\n\t\tsearchRequest.source(searchSourceBuilder);\n\t\tSearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n\t\tSearchHit[] searchHits = searchResponse.getHits().getHits();\n\t\tList<SysLog> sysLogList = new ArrayList<>();\n\t\tfor (SearchHit searchHit : searchHits) {\n\t\t\tMap<String, Object> sourceAsMap = searchHit.getSourceAsMap();\n\t\t\tSysLog sysLog = new SysLog();\n\t\t\tsysLog.setSysLogId(Long.parseLong(sourceAsMap.get(\"", "CodeBleu_score": 43.99375267394985}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\t\n}", "CodeBleu_score": 0.9935619804810477}, {"code": "async function downloadFile(url, dest){\n\tlet file;\ntry {\nfile = fs.createWriteStream(dest);\nconst response = await https.get(url);\nresponse.pipe(file);\n} catch (err) {\nfs.unlink(dest, () => {\n});\nthrow err;\n}\nfile.on(\"finish\", function () {\nfile.close(() => {\n});\n});\n}", "CodeBleu_score": 41.68196140062314}, {"code": "async function downloadFile(url, dest){\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\t\thttps\n\t\t\t.get(url, (response) => {\n\t\t\t\tresponse.pipe(file);\n\t\t\t\tfile.on(\"finish\", () => {\n\t\t\t\t\tfile.close(() => {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t})\n\t\t\t.on(\"error\", (err) => {\n\t\t\t\tfs.unlink(dest, () => {\n\t\t\t\t\treject(err);\n\t\t\t\t});\n\t\t\t});\n\t});\n}", "CodeBleu_score": 64.02690597631681}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t\treturn Flux.fromIterable(module.getDependencies())\n\t\t.filter(d -> !circularDependencyCheckSet.contains(d.getId()))\n\t\t.doOnNext(d -> circularDependencyCheckSet.add(d.getId()))\n\t\t.flatMapMany(d -> getLiveModules(d)\n\t\t\t.doOnError(e -> log.warn(\"Failed to retrieve dependent module '{}' for module '{}'.\", d.getId(), module.getId(), e))\n\t\t\t.onErrorContinue((d, e) -> log.warn(\"Failed to retrieve dependent module '{}' for module '{}'.\", d.getId(), module.getId(), e))\n\t\t\t.doOnNext(d -> circularDependencyCheckSet.remove(d.getId()))\n\t\t\t.map(d -> {\n\t\t\t\td.setDependencies(null);\n\t\t\t\treturn d;\n\t\t\t}))\n\t\t.map(d -> {\n\t\t\td.setDependencies(null);\n\t\t\treturn d;\n\t\t})\n\t\t.collectList()\n\t\t.map(l -> {\n\t\t\tmodule.setDependencies(l);\n\t\t\treturn module;\n\t\t});\n}", "CodeBleu_score": 46.195785733628625}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t\treturn Flux.fromIterable(module.getDependencies())\n\t\t.filter(d -> !circularDependencyCheckSet.contains(d))\n\t\t.doOnNext(d -> circularDependencyCheckSet.add(d))\n\t\t.flatMapMany(d -> applicationRepository.findById(d).switchIfEmpty(Mono.error(new IllegalArgumentException(\"Could not find module with id \" + d))))\n\t\t.onErrorContinue((e, d) -> log.warn(\"Could not find module with id \" + d, e))\n\t\t.doOnNext(d -> circularDependencyCheckSet.remove(d.getId()));\n}", "CodeBleu_score": 52.710110553316106}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t\treturn Flux.fromIterable(module.getDependentModules())\n\t\t.filter(dependentModule -> !circularDependencyCheckSet.contains(dependentModule.getId()))\n\t\t.doOnNext(dependentModule -> circularDependencyCheckSet.add(dependentModule.getId()))\n\t\t.flatMap(dependentModule -> getLiveModules(dependentModule, circularDependencyCheckSet))\n\t\t.onErrorContinue((error, data) -> {\n\t\t\tlogger.warn(\"Could not retrieve dependent module {} for module {}. Error: {}\", data, module.getId(), error.getMessage());\n\t\t});\n}", "CodeBleu_score": 48.39271205372215}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t\tfor (Object entry : map.entrySet()) {\n\t\tif (entry instanceof Map.Entry) {\n\t\t\tMap.Entry entry2 = (Map.Entry) entry;\n\t\t\tObject value = entry2.getValue();\n\t\t\tif (value instanceof Map) {\n\t\t\t\tdoGetDependentModules((Map) value, dependentModuleIds);\n\t\t\t}\n\t\t\telse if (value instanceof List) {\n\t\t\t\tdoGetDependentModules((List) value, dependentModuleIds);\n\t\t\t}\n\t\t\telse if (value instanceof String) {\n\t\t\t\tString stringValue = (String) value;\n\t\t\t\tif (\"module\".equals(stringValue)) {\n\t\t\t\t\tString id = (String) entry2.getKey();\n\t\t\t\t\tif (isNotBlank(id)) {\n\t\t\t\t\t\tdependentModuleIds.add(id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 31.764375501102503}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t\tfor (Object entry : map.entrySet()) {\n\t\tMap.Entry<?, ?> entryObj = (Map.Entry<?, ?>) entry;\n\t\tObject value = entryObj.getValue();\n\t\tif (value instanceof Map) {\n\t\t\tdoGetDependentModules((Map<?, ?>) value, dependentModuleIds);\n\t\t} else if (value instanceof List) {\n\t\t\tList<?> valueList = (List<?>) value;\n\t\t\tfor (Object valueListEntry : valueList) {\n\t\t\t\tif (valueListEntry instanceof Map) {\n\t\t\t\t\tdoGetDependentModules((Map<?, ?>) valueListEntry, dependentModuleIds);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (entryObj.getKey().equals(\"componentType\") && value.equals(\"module\")) {\n\t\t\tString moduleId = (String) map.get(\"id\");\n\t\t\tif (isNotBlank(moduleId)) {\n\t\t\t\tdependentModuleIds.add(moduleId);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 36.181142515190196}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t\tif (map == null) {\n\t\treturn;\n\t}\n\n\tObject componentType = map.get(\"componentType\");\n\tif (componentType != null && \"module\".equals(componentType)) {\n\t\tString appId = (String) map.get(\"appId\");\n\t\tif (isNotBlank(appId)) {\n\t\t\tdependentModuleIds.add(appId);\n\t\t}\n\t}\n\n\tfor (Object entry : map.entrySet()) {\n\t\tObject key = entry.getKey();\n\t\tObject value = entry.getValue();\n\t\tif (value instanceof Map) {\n\t\t\tdoGetDependentModules((Map<?, ?>) value, dependentModuleIds);\n\t\t} else if (value instanceof List) {\n\t\t\tfor (Object listItem : (List<?>) value) {\n\t\t\t\tif (listItem instanceof Map) {\n\t\t\t\t\tdoGetDependentModules((Map<?, ?>) listItem, dependentModuleIds);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 44.57242917210111}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t Asset asset = new Asset();\n InputStream is = dataBuffer.getInputStream();\n try {\n ImageInputStream iis = ImageIO.createImageInputStream(is);\n Iterator<ImageReader> readers = ImageIO.getImageReaders(iis);\n ImageReader reader = readers.next();\n reader.setInput(iis, true);\n ImageReadParam param = reader.getDefaultReadParam();\n if (createThumbnail) {\n param.setSourceRegion(new Rectangle(0, 0, 32, 32));\n }\n BufferedImage image = reader.read(0, param);\n ImageOutputStream ios = ImageIO.createImageOutputStream(dataBuffer.getOutputStream());\n ImageIO.write(image, \"jpeg\", ios);\n dataBuffer.release();\n asset.setContent(dataBuffer);\n if (createThumbnail) {\n asset.setContentType(MediaType.IMAGE_JPEG);\n } else {\n asset.setContentType(srcContentType);\n }\n return asset;\n } finally {\n try {\n is.close();\n } catch (IOException e) {\n }\n }\n }", "CodeBleu_score": 34.28661716036824}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t// 1. Read the image data from the DataBuffer.\n// 2. If creating a thumbnail, resize the image.\n// 3. Set the content type to JPEG.\n// 4. Release the DataBuffer.\n// 5. Return a new Asset object.\n}", "CodeBleu_score": 8.045619396733148}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t\n/**\n * This function creates an Asset object by processing the given DataBuffer. It reads the image data, resizes it if the createThumbnail flag is true, and sets the content type to JPEG. If not creating a thumbnail, it retains the original content type. The function releases the DataBuffer after processing and returns a new Asset with the processed image data and content type.\n */\n private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException  {\n", "CodeBleu_score": 13.022364713722215}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn Mono.just(exchange)\n\t\t.flatMap(this::getAsset)\n\t\t.map(asset -> {\n\t\t\texchange.getResponse().setStatusCode(HttpStatus.OK);\n\t\t\tif (asset.getContentType() != null) {\n\t\t\t\texchange.getResponse().getHeaders().setContentType(asset.getContentType());\n\t\t\t}\n\t\t\treturn exchange.getResponse().writeWith(asset.getData());\n\t\t});\n}", "CodeBleu_score": 31.18025387633976}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn Mono.just(exchange)\n\t\t.map(ex -> ex.getAsset(assetId))\n\t\t.map(asset -> {\n\t\t\tif (asset == null) {\n\t\t\t\tthrow new ResponseStatusException(HttpStatus.NOT_FOUND);\n\t\t\t}\n\t\t\tif (asset.getContentType() != null) {\n\t\t\t\tex.getResponse().getHeaders().setContentType(asset.getContentType());\n\t\t\t}\n\t\t\tex.setStatusCode(HttpStatus.OK);\n\t\t\treturn asset;\n\t\t})\n\t\t.map(asset -> {\n\t\t\tDataBuffer buffer = ex.getResponse().bufferFactory().wrap(asset.getData());\n\t\t\treturn buffer;\n\t\t})\n\t\t.flatMap(buffer -> ex.getResponse().writeWith(Flux.just(buffer)));\n}", "CodeBleu_score": 43.96786535952378}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn getData(assetId)\n\t\t.map(data -> {\n\t\t\texchange.getResponse().setStatusCode(HttpStatus.OK);\n\t\t\tString contentType = getContentType(assetId);\n\t\t\tif (contentType != null) {\n\t\t\t\texchange.getResponse().getHeaders().setContentType(MediaType.parseMediaType(contentType));\n\t\t\t}\n\t\t\treturn data;\n\t\t})\n\t\t.map(data -> exchange.getResponse().writeWith(Flux.just(data)))\n\t\t.then();\n}", "CodeBleu_score": 42.168113353772654}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\tif (workspace.getMode() == WorkspaceMode.SAAS) {\n\t\treturn Flux.empty();\n\t} else {\n\t\treturn enterpriseService.getOrganizationInEnterpriseMode(workspace.getId())\n\t\t\t.map(org -> new FindAuthConfig(org.getId(), org.getAuthConfigId()))\n\t\t\t.collectList()\n\t\t\t.flatMapIterable(List::stream);\n\t}\n}", "CodeBleu_score": 29.042072953152154}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\tif (workspace.getMode() == WorkspaceMode.SAAS) {\n\t\treturn Flux.empty();\n\t} else {\n\t\treturn organizationService.getOrganizationsInEnterpriseMode(workspace.getId())\n\t\t\t\t.map(FindAuthConfig::fromOrganization)\n\t\t\t\t.collectList()\n\t\t\t\t.map(Flux::fromIterable);\n\t}\n}", "CodeBleu_score": 26.830910863017394}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\tif (workspace.getMode() == WorkspaceMode.SAAS) {\n\t\treturn Flux.empty();\n\t} else {\n\t\treturn getOrganizationInEnterpriseMode()\n\t\t\t.map(org -> new FindAuthConfig(org.getId(), org.getAuthConfigs()))\n\t\t\t.flatMapIterable(FindAuthConfig::getAuthConfigs);\n\t}\n}", "CodeBleu_score": 27.32079239097186}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\treturn MongockSpring5.builder()\n.setDriver(mongoTemplate.getMongoDatabase().getMongoClient())\n.setSpringContext(springContext)\n.setChangeLogsScanPackage(\"com.github.cloudyrock.mongock.driver.mongodb.springdata.v2.changelogs\")\n.setWriteConcern(WriteConcern.MAJORITY)\n.setReadConcern(ReadConcern.MAJORITY)\n.buildApplicationRunner();\n}", "CodeBleu_score": 30.305940148365483}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\treturn MongockSpring5.builder()\n\t\t.setDriver(mongoTemplate.getMongoDbFactory().getLegacyDb())\n\t\t.setSpringContext(springContext)\n\t\t.addChangeLogsScanPackage(changeLogsScanPackage)\n\t\t.setWriteConcern(writeConcern)\n\t\t.setReadConcern(readConcern)\n\t\t.buildApplicationRunner();\n}", "CodeBleu_score": 20.367149268618583}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\treturn MongockSpring5.builder()\n\t.setDriver(mongoTemplate.getMongoDatabase().getMongoClient())\n\t.setSpringContext(springContext)\n\t.addChangeLogsScanPackages(ChangeLogService.class.getPackage().getName())\n\t.withWriteConcern(WriteConcern.MAJORITY)\n\t.withReadConcern(ReadConcern.MAJORITY)\n\t.buildApplicationRunner();\n}", "CodeBleu_score": 27.952925125962235}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\tReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\treactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\treturn reactiveMongoTemplate;\n}", "CodeBleu_score": 76.68946433531822}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\tReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\treactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\treturn reactiveMongoTemplate;\n}", "CodeBleu_score": 76.68946433531822}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\tReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\treactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\treturn reactiveMongoTemplate;\n}", "CodeBleu_score": 76.68946433531822}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t\treturn getLatestRecordByLibraryQueryId(libraryQueryId)\n\t\t.map(LibraryQuery::getDsl)\n\t\t.switchIfEmpty(getById(libraryQueryId)\n\t\t\t.map(LibraryQuery::getDsl)\n\t\t);\n}", "CodeBleu_score": 53.7209700422749}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t\treturn getLatestRecordByLibraryQueryId(libraryQueryId)\n\t\t.switchIfEmpty(getById(libraryQueryId))\n\t\t.map(libraryQuery -> libraryQuery.getDsl());\n}", "CodeBleu_score": 32.846985803623625}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t\treturn Mono.defer(() -> {\n\t\tMono<LibraryQuery> libraryQueryMono = libraryQueryService.getById(libraryQueryId);\n\t\treturn libraryQueryMono.map(libraryQuery -> {\n\t\t\tString liveDsl = libraryQuery.getLiveDsl();\n\t\t\tif (StringUtils.isBlank(liveDsl)) {\n\t\t\t\treturn libraryQueryService.getLatestRecordByLibraryQueryId(libraryQueryId).map(libraryQueryRecord -> {\n\t\t\t\t\tString liveDslFromRecord = libraryQueryRecord.getLiveDsl();\n\t\t\t\t\tif (StringUtils.isBlank(liveDslFromRecord)) {\n\t\t\t\t\t\tthrow new IllegalArgumentException(\"Library query with ID \" + libraryQueryId + \" has no live DSL\");\n\t\t\t\t\t}\n\t\t\t\t\treturn liveDslFromRecord;\n\t\t\t\t}).block();\n\t\t\t}\n\t\t\treturn liveDsl;\n\t\t});\n\t});\n}", "CodeBleu_score": 32.093218614275855}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t\n//    // TODO: remove this once we have a way to get the datasource type from the datasource object\n//    if (datasource.getDatasourceType() == DatasourceType.JS) {\n//        return executeByNodeJs(datasource, queryConfig, requestParams, timeoutStr, queryVisitorContext);\n//    }\n//\n//    if (datasource.getDatasourceType() == DatasourceType.REMOTE) {\n//        return executeLocally(datasource, queryConfig, requestParams, timeoutStr, queryVisitorContext);\n//    }\n//\n//    throw new RuntimeException(\"Unsupported datasource type: \" + datasource.getDatasourceType());\n\n    return executeByNodeJs(datasource, queryConfig, requestParams, timeoutStr, queryVisitorContext);\n}", "CodeBleu_score": 14.941464608576482}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t // Get the datasource type.\n        String datasourceType = datasource.getType();\n        // Check if the datasource type is a JS datasource plugin.\n        if (isJsDatasourcePlugin(datasourceType)) {\n            // Execute the query using Node.js.\n            return executeByNodeJs(datasource, queryConfig, requestParams, timeoutStr, queryVisitorContext);\n        } else {\n            // Execute the query locally.\n            return executeLocally(datasource, queryConfig, requestParams, timeoutStr, queryVisitorContext);\n        }\n}", "CodeBleu_score": 26.357526742197074}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t\n//    def datasource = query.datasource", "CodeBleu_score": 8.955242863852348}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\nQueryExecutor queryExecutor = getQueryExecutor(datasource);\nQueryExecutionContext queryExecutionContext = buildQueryExecutionContext(queryExecutor, datasource, queryConfig, requestParams, queryVisitorContext);\nreturn getOrCreateConnection(datasource, queryExecutionContext)\n        .flatMap(connection -> queryExecutor.execute(connection, queryExecutionContext))\n        .onErrorResume(error -> doOnError(queryExecutor, error, queryExecutionContext));\n}", "CodeBleu_score": 33.40989248427828}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\nQueryExecutor queryExecutor = getQueryExecutor(datasource);\nQueryExecutionContext queryExecutionContext = buildQueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\nMono<Connection> connectionMono = getOrCreateConnection(datasource, queryExecutionContext);\n\nreturn connectionMono.flatMap(connection -> {\n    try {\n        return Mono.just(queryExecutor.execute(connection, queryExecutionContext));\n    } catch (Exception e) {\n        return Mono.error(e);\n    }\n}).onErrorResume(error -> {\n    return doOnError(error, datasource, queryExecutionContext, queryVisitorContext);\n});\n}", "CodeBleu_score": 38.269993555943785}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\tQueryExecutor queryExecutor = getQueryExecutor(datasource, queryConfig, requestParams, queryVisitorContext);\nQueryExecutionContext queryExecutionContext = buildQueryExecutionContext(datasource, queryExecutor, queryConfig, requestParams, queryVisitorContext);\nreturn getOrCreateConnection(datasource, queryExecutionContext)\n    .flatMap(conn -> executeQuery(conn, queryExecutionContext, queryExecutor))\n    .onErrorResume(error -> doOnError(datasource, queryExecutionContext, error));\n}", "CodeBleu_score": 31.026419883089606}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tif (StringUtils.isBlank(timeoutStr)) {\nreturn DEFAULT_QUERY_TIMEOUT_MS;\n}\n\nint timeoutMs = 0;\ntry {\ntimeoutMs = convertToMs(timeoutStr);\n} catch (IllegalArgumentException e) {\nthrow new IllegalArgumentException(String.format(\"Invalid query timeout value '%s'.\", timeoutStr), e);\n}\n\nif (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\nthrow new IllegalArgumentException(String.format(\"Query timeout value '%s' exceeds maximum allowed value '%s'.\", timeoutMs, MAX_QUERY_TIMEOUT_MS));\n}\nreturn timeoutMs;\n}", "CodeBleu_score": 22.605242698153305}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t\tif (timeoutStr == null || timeoutStr.isEmpty()) {\n\t\treturn DEFAULT_QUERY_TIMEOUT_MS;\n\t}\n\tint timeout = 0;\n\ttry {\n\t\tString[] parts = timeoutStr.split(\" \");\n\t\tif (parts.length != 2) {\n\t\t\tthrow new IllegalArgumentException(\"Invalid query timeout: \" + timeoutStr);\n\t\t}\n\t\ttimeout = Integer.parseInt(parts[0]);\n\t\tTimeUnit timeUnit = TimeUnit.valueOf(parts[1].toUpperCase());\n\t\ttimeout = (int) timeUnit.toMillis(timeout);\n\t} catch (NumberFormatException e) {\n\t\tthrow new IllegalArgumentException(\"Invalid query timeout: \" + timeoutStr, e);\n\t}\n\tif (timeout > MAX_QUERY_TIMEOUT_MS) {\n\t\tthrow new IllegalArgumentException(\"Query timeout exceeds maximum value: \" + timeoutStr);\n\t}\n\treturn timeout;\n}", "CodeBleu_score": 35.33998792754321}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t\tif (timeoutStr == null || timeoutStr.isEmpty()) {\n\t\treturn DEFAULT_QUERY_TIMEOUT_MS;\n\t}\n\n\tString[] parts = timeoutStr.split(\" \");\n\tif (parts.length != 2) {\n\t\tthrow new IllegalArgumentException(\"Invalid query timeout: \" + timeoutStr);\n\t}\n\n\tint value;\n\ttry {\n\t\tvalue = Integer.parseInt(parts[0]);\n\t} catch (NumberFormatException e) {\n\t\tthrow new IllegalArgumentException(\"Invalid query timeout: \" + timeoutStr, e);\n\t}\n\n\tString unit = parts[1].toLowerCase();\n\tif (unit.startsWith(\"m\")) {\n\t\treturn Math.min(value * 60 * 1000, MAX_QUERY_TIMEOUT_MS);\n\t} else if (unit.startsWith(\"s\")) {\n\t\treturn Math.min(value * 1000, MAX_QUERY_TIMEOUT_MS);\n\t} else if (unit.startsWith(\"h\")) {\n\t\treturn Math.min(value * 60 * 60 * 1000, MAX_QUERY_TIMEOUT_MS);\n\t} else if (unit.startsWith(\"d\")) {\n\t\treturn Math.min(value * 24 * 60 * 60 * 1000, MAX_QUERY_TIMEOUT_MS);\n\t} else {\n\t\tthrow new IllegalArgumentException(\"Invalid query timeout: \" + timeoutStr);\n\t}\n}", "CodeBleu_score": 30.638654615511797}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t\treturn getLiveQueries(application, visitorId).map(query -> query.getDatasourceId()).map(datasourceId -> Pair.of(datasourceId, datasourceId))\n\t\t\t.onErrorResume(EmptyError.class, e -> Mono.just(Collections.emptyList()))\n\t\t\t.flatMap(pair -> copyDatasource(currentOrganizationId, pair.getLeft(), pair.getRight(), visitorId))\n\t\t\t.collectList();\n}", "CodeBleu_score": 24.922602353806443}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t\tMono<List<Pair<String, String>>> datasourceIds = getLiveQueries(application, visitorId)\n\t\t\t.map(Query::getDatasourceId)\n\t\t\t.filter(Objects::nonNull)\n\t\t\t.collect(Collectors.toList());\n\n\treturn datasourceIds\n\t\t\t.map(ids -> ids.stream()\n\t\t\t\t\t.map(id -> Pair.of(id, copyDatasource(id, currentOrganizationId)))\n\t\t\t\t\t.collect(Collectors.toList()));\n}", "CodeBleu_score": 34.56064168689978}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t\treturn getLiveQueries(application, visitorId)\n\t\t\t.map(query -> query.getDatasourceId())\n\t\t\t.filter(Objects::nonNull)\n\t\t\t.collectList()\n\t\t\t.map(datasourceIds -> datasourceIds.stream()\n\t\t\t\t\t.map(datasourceId -> Pair.of(datasourceId, datasourceId))\n\t\t\t\t\t.collect(Collectors.toList()))\n\t\t\t.map(datasourceIdPairs -> datasourceIdPairs.stream()\n\t\t\t\t\t.map(datasourceIdPair -> copyDatasource(currentOrganizationId, datasourceIdPair.getLeft(), datasourceIdPair.getRight()))\n\t\t\t\t\t.collect(Collectors.toList()));\n}", "CodeBleu_score": 30.724066915230008}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t\treturn getDatasourceById(datasourceId)\n\t\t.flatMap(datasource -> {\n\t\t\tif (datasource.isSystemStatic()) {\n\t\t\t\treturn Mono.just(datasourceId);\n\t\t\t} else if (datasource.isLegacyQuickRestApi() || datasource.isLegacyOpenblocksApi()) {\n\t\t\t\treturn datasource.createNewDatasourceFrom(organizationId, visitorId)\n\t\t\t\t\t.map(newDatasource -> newDatasource.getId());\n\t\t\t} else {\n\t\t\t\treturn createNewDatasourceFrom(organizationId, visitorId, datasource.getId())\n\t\t\t\t\t.map(newDatasource -> newDatasource.getId());\n\t\t\t}\n\t\t});\n}", "CodeBleu_score": 47.56115789791823}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t\treturn getById(organizationId, datasourceId).map(datasource -> {\n\t\tif (datasource.isSystemStatic()) {\n\t\t\treturn datasource.getId();\n\t\t}\n\t\tif (datasource.isLegacyQuickRestApi() || datasource.isLegacyOpenblocksApi()) {\n\t\t\treturn datasource.createNewDatasourceFrom(visitorId);\n\t\t}\n\t\treturn datasource.createNewDatasourceFrom(organizationId, visitorId);\n\t});\n}", "CodeBleu_score": 43.06711179894586}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t\treturn getById(datasourceId)\n\t\t.map(datasource -> {\n\t\t\tif (datasource.isSystemStatic()) {\n\t\t\t\treturn datasource.getId();\n\t\t\t} else if (datasource.isLegacyQuickRestApi() || datasource.isLegacyOpenblocksApi()) {\n\t\t\t\treturn datasource.createNewDatasourceFrom(organizationId, visitorId);\n\t\t\t} else {\n\t\t\t\treturn datasource.createNewDatasourceFrom(organizationId, visitorId);\n\t\t\t}\n\t\t});\n}", "CodeBleu_score": 36.892120034679074}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t return Mono.just(user)\n .flatMap(this::remove)\n .then(upload(filePart))\n .map(avatar -> user.setAvatar(avatar))\n .then(this::update)\n .map(user -> true);\n }", "CodeBleu_score": 12.614595463818837}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t\treturn Mono.just(user)\n\t\t.map(u -> u.getAvatar())\n\t\t.defaultIfEmpty(null)\n\t\t.flatMap(oldAvatar -> {\n\t\t\tif (oldAvatar != null) {\n\t\t\t\treturn remove(oldAvatar);\n\t\t\t} else {\n\t\t\t\treturn Mono.just(true);\n\t\t\t}\n\t\t})\n\t\t.then(upload(filePart))\n\t\t.map(avatar -> {\n\t\t\tuser.setAvatar(avatar);\n\t\t\treturn user;\n\t\t})\n\t\t.flatMap(this::updateUserAvatar);\n}", "CodeBleu_score": 24.132234383547345}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t\n/**\n * This function saves a user's profile photo. It uploads the new photo, and if the user has a previous avatar, it removes the old one. It then updates the user's profile with the new avatar. The function returns a Mono<Boolean> indicating the success of the operation.\n */", "CodeBleu_score": 10.074097679421582}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t\treturn Mono.just(User.builder()\n\t\t.username(authUser.getUsername())\n\t\t.name(authUser.getName())\n\t\t.state(State.ACTIVE)\n\t\t.enabled(true)\n\t\t.avatarLink(authUser.getAvatarLink())\n\t\t.authSource(authUser.getAuthSource())\n\t\t.isNewUser(true)\n\t\t.build())\n\t\t.map(user -> {\n\t\t\tif (authUser.getAuthSource() == AuthSource.email && authUser.getAuthContext() != null && authUser.getAuthContext().get(\"password\") != null) {\n\t\t\t\tuser.setPassword(encryptPassword(authUser.getAuthContext().get(\"password\")));\n\t\t\t}\n\t\t\tuser.setConnections(authUser.getConnections());\n\t\t\treturn user;\n\t\t})\n\t\t.map(this::add);\n}", "CodeBleu_score": 31.88392206112058}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t\treturn Mono.fromCallable(() -> {\n\t\tUser user = new User();\n\t\tuser.setName(authUser.getName());\n\t\tuser.setState(UserState.ENABLED);\n\t\tuser.setIsNewUser(true);\n\t\tuser.setAvatar(authUser.getAvatarLink());\n\t\tuser.setTpAvatarLink(authUser.getAvatarLink());\n\t\tuser.setAuthSource(authUser.getAuthSource());\n\t\tuser.setAuthContext(authUser.getAuthContext());\n\t\tuser.setConnections(authUser.getConnections());\n\t\tif (user.getAuthSource() == AuthSource.EMAIL && !Strings.isNullOrEmpty(authUser.getPassword())) {\n\t\t\tuser.encryptPassword(authUser.getPassword());\n\t\t}\n\t\tuser.setIsEnabled(true);\n\t\treturn user;\n\t}).subscribeOn(Schedulers.boundedElastic());\n}", "CodeBleu_score": 43.57806675605754}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t\tUser user = new User();\n\tuser.setName(authUser.getName());\n\tuser.setState(UserState.ACTIVE);\n\tuser.setIsEnabled(true);\n\tuser.setTpAvatarLink(authUser.getAvatar());\n\tuser.setSource(authUser.getSource());\n\tif (authUser.getSource() == AuthSource.EMAIL && authUser.getAuthContext().containsKey(\"password\")) {\n\t\tuser.setPassword(encryptPassword(authUser.getAuthContext().get(\"password\")));\n\t}\n\tuser.setConnections(new HashSet<>());\n\tuser.setIsNewUser(true);\n\treturn create(user);\n}", "CodeBleu_score": 39.558863637136824}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\ttry {\n\t\tfinal Connection emailConnection = Connection.builder()\n\t\t\t.rawId(\"email:\" + email)\n\t\t\t.providerId(\"email\")\n\t\t\t.userId(user.getId())\n\t\t\t.build();\n\t\tuser.getConnections().add(emailConnection);\n\t\tuser = userRepository.save(user);\n\t\treturn Mono.just(true);\n\t} catch (DuplicateKeyException e) {\n\t\treturn Mono.error(new DuplicateEmailException(email));\n\t}\n}", "CodeBleu_score": 40.07910401419624}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\treturn Mono.just(user)\n\t\t.map(u -> u.getId())\n\t\t.flatMap(id -> this.connectionRepository.createConnection(Connection.builder()\n\t\t\t.userId(id)\n\t\t\t.providerId(this.emailProviderId)\n\t\t\t.providerUserId(email)\n\t\t\t.build()))\n\t\t.onErrorResume(DuplicateKeyException.class, e -> Mono.just(new EmailAlreadyInUseException(email)))\n\t\t.then(Mono.defer(() -> this.userRepository.save(user)))\n\t\t.thenReturn(true);\n}", "CodeBleu_score": 22.961869967370692}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\treturn Mono.just(user)\n\t\t.flatMap(u -> {\n\t\t\ttry {\n\t\t\t\treturn Mono.just(u.addConnection(Connection.builder().rawId(email).build()));\n\t\t\t} catch (DuplicateKeyException e) {\n\t\t\t\treturn Mono.error(new EmailAlreadyBoundException(email));\n\t\t\t}\n\t\t})\n\t\t.onErrorResume(DuplicateKeyException.class, e -> Mono.error(new EmailAlreadyBoundException(email)))\n\t\t.flatMap(userRepository::save)\n\t\t.map(u -> true);\n}", "CodeBleu_score": 26.839443808435725}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\treturn userRepository.findById(userId)\n.filter(user -> matchPassword(oldPassword, user.getPassword()))\n.map(user -> encryptPassword(newPassword))\n.map(password -> user.setPassword(password))\n.flatMap(userRepository::save)\n.map(user -> true)\n.switchIfEmpty(Mono.error(new InvalidPasswordException(\"Invalid password!\")));\n}", "CodeBleu_score": 21.252110358501913}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t\treturn findById(userId)\n\t\t.flatMap(user -> matchPassword(user, oldPassword)\n\t\t\t.flatMap(matched -> matched ? Mono.just(user) : Mono.error(new InvalidPasswordException()))\n\t\t\t.flatMap(user -> encryptPassword(newPassword)\n\t\t\t\t.map(password -> {\n\t\t\t\t\tuser.setPassword(password);\n\t\t\t\t\treturn user;\n\t\t\t\t})\n\t\t\t\t.then(Mono.just(user))\n\t\t\t)\n\t\t)\n\t\t.flatMap(user -> save(user)\n\t\t\t.thenReturn(true)\n\t\t)\n\t\t.onErrorResume(InvalidPasswordException.class, e -> Mono.error(new InvalidPasswordException()));\n}", "CodeBleu_score": 29.213941914669604}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\treturn findById(userId)\n.flatMap(user -> matchPassword(user, oldPassword)\n.flatMap(isMatch -> {\nif (isMatch) {\nreturn encryptPassword(newPassword)\n.map(password -> {\nuser.setPassword(password);\nreturn true;\n});\n} else {\nreturn Mono.error(new InvalidPasswordException());\n}\n}));\n}", "CodeBleu_score": 19.28870649225488}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t\tList<String> groupIds = null;\n\tif (orgMember.isAdmin()) {\n\t\tgroupIds = getUserGroupIdsInOrg(orgMember.getOrgId());\n\t} else if (!withoutDynamicGroups) {\n\t\tgroupIds = getNonDynamicUserGroupIdsInOrg(orgMember.getOrgId());\n\t}\n\tif (groupIds == null) {\n\t\treturn Mono.just(Collections.emptyList());\n\t}\n\treturn groupIds.stream()\n\t\t\t.filter(Objects::nonNull)\n\t\t\t.filter(groupId -> !groupId.equals(ALL_USERS_GROUP_ID))\n\t\t\t.map(groupId -> {\n\t\t\t\tMap<String, String> groupMap = new HashMap<>();\n\t\t\t\tgroupMap.put(\"id\", groupId);\n\t\t\t\tgroupMap.put(\"name\", getName(groupId, locale));\n\t\t\t\treturn groupMap;\n\t\t\t})\n\t\t\t.collect(Collectors.toList());\n}", "CodeBleu_score": 34.43058707143295}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t\tif (orgMember.isAdmin()) {\n\t\treturn userGroupService.getUserGroupIdsInOrg(orgMember.getOrgId()).map(group -> {\n\t\t\tMap<String, String> groupMap = new HashMap<>();\n\t\t\tgroupMap.put(GROUP_ID, group);\n\t\t\tgroupMap.put(GROUP_NAME, userGroupService.getName(group, locale));\n\t\t\treturn groupMap;\n\t\t}).collectList();\n\t} else {\n\t\treturn userGroupService.getNonDynamicUserGroupIdsInOrg(orgMember.getOrgId(), withoutDynamicGroups).map(group -> {\n\t\t\tMap<String, String> groupMap = new HashMap<>();\n\t\t\tgroupMap.put(GROUP_ID, group);\n\t\t\tgroupMap.put(GROUP_NAME, userGroupService.getName(group, locale));\n\t\t\treturn groupMap;\n\t\t}).collectList();\n\t}\n}", "CodeBleu_score": 28.930727891737313}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t\tList<String> groupIds;\n\tif (orgMember.isAdmin()) {\n\t\tgroupIds = getOrgId().flatMapMany(orgId -> getNonDynamicUserGroupIdsInOrg(orgId, withoutDynamicGroups)).collectList().block();\n\t} else {\n\t\tgroupIds = getOrgId().flatMapMany(orgId -> getUserGroupIdsInOrg(orgId, userId, withoutDynamicGroups)).collectList().block();\n\t}\n\treturn getByIds(groupIds).map(group -> {\n\t\tMap<String, String> groupMap = new HashMap<>();\n\t\tgroupMap.put(\"id\", group.getId());\n\t\tgroupMap.put(\"name\", group.getName(locale));\n\t\treturn groupMap;\n\t}).collectList();\n}", "CodeBleu_score": 41.39529888381775}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\treturn mongoTemplate.upsert(Query.query(Criteria.where(USER_ID).is(userId)),\nUpdate.update(HAS_SHOWN_NEW_USER_GUIDANCE, true), UserStatus.class).map(result -> result.wasAcknowledged());\n}", "CodeBleu_score": 17.754213598576126}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\tUserStatus userStatus = new UserStatus();\n\tuserStatus.setUserId(userId);\n\tuserStatus.setHasShowNewUserGuidance(true);\n\treturn mongoUpsertHelper.doUpsert(userStatus);\n}", "CodeBleu_score": 34.432350358634054}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\treturn mongoTemplate.insert(new UserStatus(userId, true)).then(Mono.defer(() -> mongoTemplate.upsert(Query.query(Criteria.where(\"_id\").is(userId)), Update.update(\"hasShowNewUserGuidance\", true), UserStatus.class)));\n}", "CodeBleu_score": 21.17754091438871}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\tvar wg sync.WaitGroup\n\trungroup := rungroup.New(context.Background())\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.id, p) {\n\t\t\twg.Add(1)\n\t\t\trungroup.Go(func(ctx context.Context) error {\n\t\t\t\tdefer wg.Done()\n\t\t\t\tp.clearMatching(predicateValue)\n\t\t\t\treturn nil\n\t\t\t})\n\t\t}\n\t}\n\twg.Wait()\n}", "CodeBleu_score": 42.60426532523084}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition must not be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue must not be nil\")\n\t}\n\trungroup := rungroup.New(context.Background())\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.name, p) {\n\t\t\trungroup.Run(func() {\n\t\t\t\tp.clearMatching(predicateValue)\n\t\t\t})\n\t\t}\n\t}\n\trungroup.Wait()\n}", "CodeBleu_score": 37.57838703813309}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"Cache.ClearMatching: partition predicate must not be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"Cache.ClearMatching: value predicate must not be nil\")\n\t}\n\n\trungroup := rungroup.New()\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.name, p) {\n\t\t\trungroup.Go(func() error {\n\t\t\t\tp.clearMatching(predicateValue)\n\t\t\t\treturn nil\n\t\t\t})\n\t\t}\n\t}\n\trungroup.Wait()\n}", "CodeBleu_score": 39.39428648707515}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\tpanic(fmt.Sprintf(\"invalid input: numPartitions=%d, totalWeightQuantity=%d\", numPartitions, totalWeightQuantity))\n\t}\n\taverageWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\tmaxSizePerPartition := int(math.Floor(float64(maxItemsTotal) * averageWeightPerPartition))\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 51.560921877766795}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 {\n\t\tpanic(\"calculateMaxSizePerPartition: number of partitions must be greater than zero\")\n\t}\n\tif totalWeightQuantity <= 0 {\n\t\tpanic(\"calculateMaxSizePerPartition: total weight quantity must be greater than zero\")\n\t}\n\n\taverageWeightPerPartition := totalWeightQuantity / numPartitions\n\treturn int(math.Floor(float64(maxItemsTotal) / float64(averageWeightPerPartition)))\n}", "CodeBleu_score": 55.189415295054}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 {\n\t\tpanic(\"Number of partitions must be greater than zero.\")\n\t}\n\tif totalWeightQuantity <= 0 {\n\t\tpanic(\"Total weight quantity must be greater than zero.\")\n\t}\n\tavgWeightPerPartition := totalWeightQuantity / numPartitions\n\treturn int(math.Floor(float64(maxItemsTotal) / float64(avgWeightPerPartition)))\n}", "CodeBleu_score": 58.13874347294919}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\tMap<String, Object> map = new HashMap<>();\nConnection connection = null;\ntry {\nconnection = getConnection();\nDatabaseMetaData dbmd = connection.getMetaData();\nif (dbmd != null) {\nmap.put(\"databaseProductName\", dbmd.getDatabaseProductName());\nmap.put(\"databaseProductVersion\", dbmd.getDatabaseProductVersion());\n}\n} catch (SQLException e) {\ne.printStackTrace();\n} finally {\ntry {\nconnection.close();\n} catch (SQLException e) {\ne.printStackTrace();\n}\n}\nreturn map;\n}", "CodeBleu_score": 47.79931234320723}, {"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> contributorMap = new HashMap<String, Object>();\n\tConnectionMetaData metadata = connection.getMetaData();\n\tif (metadata != null) {\n\t\tcontributorMap.put(\"databaseProductName\", metadata.getDatabaseProductName());\n\t\tcontributorMap.put(\"databaseProductVersion\", metadata.getDatabaseProductVersion());\n\t}\n\treturn contributorMap;\n}", "CodeBleu_score": 52.01658704536638}, {"code": "public Map<String, Object> contributorMap(){\n\tMap<String, Object> contributorMap = new HashMap<>();\ntry (Connection connection = DriverManager.getConnection(url, user, password)) {\nDatabaseMetaData databaseMetaData = connection.getMetaData();\nif (databaseMetaData != null) {\ncontributorMap.put(\"databaseProductName\", databaseMetaData.getDatabaseProductName());\ncontributorMap.put(\"databaseProductVersion\", databaseMetaData.getDatabaseProductVersion());\n}\n} catch (SQLException e) {\ne.printStackTrace();\n}\nreturn contributorMap;\n}", "CodeBleu_score": 40.65449575498856}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tif (configMap.containsKey(\"userSettings\")) {\n\t\tMap<String, Object> userSettings = (Map<String, Object>) configMap.get(\"userSettings\");\n\t\tif (userSettings != null) {\n\t\t\tif (userSettings.containsKey(\"allowRegistration\")) {\n\t\t\t\tinfo.setAllowRegistration(Boolean.parseBoolean(userSettings.get(\"allowRegistration\").toString()));\n\t\t\t}\n\t\t\tif (userSettings.containsKey(\"mustVerifyEmailOnRegistration\")) {\n\t\t\t\tinfo.setMustVerifyEmailOnRegistration(Boolean.parseBoolean(userSettings.get(\"mustVerifyEmailOnRegistration\").toString()));\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 38.39864022670515}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tString mustVerifyEmailOnRegistration = configMap.getMustVerifyEmailOnRegistration();\n\tString allowRegistration = configMap.getAllowRegistration();\n\tif (mustVerifyEmailOnRegistration == null || allowRegistration == null) {\n\t\tinfo.setMustVerifyEmailOnRegistration(false);\n\t\tinfo.setAllowRegistration(false);\n\t} else {\n\t\tinfo.setMustVerifyEmailOnRegistration(Boolean.parseBoolean(mustVerifyEmailOnRegistration));\n\t\tinfo.setAllowRegistration(Boolean.parseBoolean(allowRegistration));\n\t}\n}", "CodeBleu_score": 40.12613859198789}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tMap<String, Object> userSettings = configMap.getMap(\"userSettings\");\n\tif (userSettings == null) {\n\t\tinfo.setMustVerifyEmailOnRegistration(false);\n\t\tinfo.setAllowRegistration(false);\n\t} else {\n\t\tinfo.setMustVerifyEmailOnRegistration(userSettings.get(\"mustVerifyEmailOnRegistration\") != null && (Boolean) userSettings.get(\"mustVerifyEmailOnRegistration\"));\n\t\tinfo.setAllowRegistration(userSettings.get(\"allowRegistration\") != null && (Boolean) userSettings.get(\"allowRegistration\"));\n\t}\n}", "CodeBleu_score": 38.66615379968357}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\t\tString restartMessage = \"Application restart initiated\";\n\tThreadGroup group = new ThreadGroup(\"Application Restart Thread Group\");\n\tThread restartThread = new Thread(group, new Runnable() {\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n\t\t\t\tURL[] urls = ((URLClassLoader) classLoader).getURLs();\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tString[] command = new String[] {\"java\", \"-jar\", \"target/app.jar\"};\n\t\t\t\tProcessBuilder builder = new ProcessBuilder(command);\n\t\t\t\tbuilder.environment().put(\"APP_HOME\", System.getProperty(\"APP_HOME\"));\n\t\t\t\tbuilder.environment().put(\"APP_BASE\", System.getProperty(\"APP_BASE\"));\n\t\t\t\tbuilder.environment().put(\"APP_PORT\", System.getProperty(\"APP_PORT\"));\n\t\t\t\tbuilder.environment().put(\"APP_VERSION\", System.getProperty(\"APP_VERSION\"));\n\t\t\t\tbuilder.environment().put(\"APP_PROFILE\", System.getProperty(\"APP_PROFILE\"));\n\t\t\t\tbuilder.environment().put(\"APP_RESTART_ATTEMPT\", System.getProperty(\"APP_RESTART_ATTEMPT\"));\n\t\t\t\tbuilder.environment().put(\"APP_RESTART_ATTEMPT_TIMESTAMP\", System.getProperty(\"APP_RESTART_ATTEMPT_TIMESTAMP\"));\n\t\t\t\tbuilder.environment().put(\"APP_RESTART_ATTEMPT_TIMESTAMP_FORMATTED\", System.getProperty(\"APP_RESTART_ATTEMPT_TIMESTAMP_FORMATTED\"));\n\t\t\t\tbuilder.environment().put(\"APP_RESTART_ATTEMPT_TIMESTAMP_FORMATTED_UTC\", System.getProperty(\"APP_RESTART_ATTEMPT_TIMESTAMP_FORMATTED_UTC\"));\n\t\t\t\tbuilder.environment().put(\"APP_RESTART_ATTEMPT_TIMESTAMP_UTC\", System.getProperty(\"APP_RESTART_ATTEMPT_TIMESTAMP_UTC\"));\n\t\t\t\tbuilder.environment().put(\"APP_RESTART_ATTEMPT_TIMESTAMP_UTC_FORMATTED\", System.getProperty(\"APP_RESTART_ATTEMPT_TIMESTAMP_UTC_FORMATTED\"));\n\t\t\t\tbuilder.environment().put(\"APP_RESTART_ATTEMPT_TIMESTAMP_UTC_FORMATTED_UTC\", System.getProperty(\"APP_RESTART_ATTEMPT_TIMESTAMP_UTC_FORMATTED_", "CodeBleu_score": 27.794005901478165}, {"code": "public Object restart(){\n\t\t// Get the thread group for the application\n\tThreadGroup appThreadGroup = Thread.currentThread().getThreadGroup();\n\t// Create a new thread group for the restart process\n\tThreadGroup restartThreadGroup = new ThreadGroup(appThreadGroup, \"Restart Thread Group\");\n\t// Create a new thread to perform the restart process\n\tThread restartThread = new Thread(restartThreadGroup, new Runnable() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\t// Set the thread as non-daemon\n\t\t\tsetDaemon(false);\n\t\t\t// Set the application class loader as the context class loader\n\t\t\tsetContextClassLoader(getClassLoader());\n\t\t\t// Start the thread\n\t\t\tstart();\n\t\t}\n\t});\n\t// Start the thread\n\trestartThread.start();\n\t// Return a message indicating the restart has begun\n\treturn \"Application restart has begun\";\n}", "CodeBleu_score": 36.85557558758324}, {"code": "public Object restart(){\n\t\tThreadGroup group = new ThreadGroup(System.getProperty(\"app.name\"));\n\tThread restartThread = new Thread(group, new Runnable() {\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tSystem.out.println(\"Restarting application\");\n\t\t\t\tThread.sleep(1000);\n\t\t\t\tSystem.exit(0);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t});\n\trestartThread.setContextClassLoader(ClassLoader.getSystemClassLoader());\n\trestartThread.setDaemon(false);\n\trestartThread.start();\n\treturn \"Application restart initiated\";\n}", "CodeBleu_score": 37.13316468983345}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n }", "CodeBleu_score": 92.62032370439991}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n }", "CodeBleu_score": 70.99832409141749}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t configurer.defaultCodecs().jackson2JsonEncoder(objectMapper);\n configurer.defaultCodecs().jackson2JsonDecoder(objectMapper);\n }", "CodeBleu_score": 47.02052549432227}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t\treturn RouterFunctions.route(RequestPredicates.GET(\"/console/**\")\n\t\t\t.and(RequestPredicates.accept(MediaType.TEXT_HTML))\n\t\t\t.and(RequestPredicates.not(RequestPredicates.websocket())),\n\t\t\trequest -> ServerResponse.ok().contentType(MediaType.TEXT_HTML).bodyValue(consoleIndexLocation));\n}", "CodeBleu_score": 23.235934564337423}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t\treturn route(GET(\"/console/**\"), request -> accept(HTML).and(not(isWebSocketUpgrade())).and(negate(path(\"/console/assets/**\"))).and(method(GET)).and(request -> getLocation(request).equals(\"/console/\"))\n\t\t\t.and(request -> getConsole(request).serveIndex()));\n}", "CodeBleu_score": 21.947818432056053}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t\treturn RouterFunctions.route(GET(\"/console/**\").and(negate(accept(MediaType.TEXT_EVENT_STREAM))), accept(MediaType.TEXT_HTML), this::serveIndex);\n}", "CodeBleu_score": 14.143156411030555}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t\treturn RouterFunctions.route(GET(\"/uc/**\").and(accept(MediaType.TEXT_HTML).and(not(WebSocketRequest.class))), this::serveIndex);\n}", "CodeBleu_score": 13.625709415537731}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t\treturn RouterFunctions.route(GET(\"/uc/**\").and(accept(MediaType.TEXT_HTML)).and(not(WebSocket.HANDSHAKE.or(WebSocket.SUBPROTOCOL))), request -> ServerResponse.ok().contentType(MediaType.TEXT_HTML).bodyValue(uc.indexHtml()));\n}", "CodeBleu_score": 23.046527677909577}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t\treturn RouterFunctions.route(RequestPredicates.GET(\"/uc/**\").and(RequestPredicates.accept(MediaType.TEXT_HTML)).and(RequestPredicates.contentType(MediaType.TEXT_HTML)).and(RequestPredicates.not(RequestPredicates.websocket())), this::serveIndex);\n}", "CodeBleu_score": 21.817367103300338}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\tReactiveSessionRepository<MapSession> sessionRepository = new MapReactiveSessionRepository(new ConcurrentHashMap<>());\n\tsessionRepository.setDefaultMaxInactiveInterval(serverProperties.getSession().getTimeout());\n\treturn sessionRepository;\n}", "CodeBleu_score": 31.327196370417475}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\tReactiveSessionRepository<MapSession> sessionRepository = new ReactiveSessionRepository<>(new ConcurrentHashMap<>());\n\tsessionRepository.setDefaultMaxInactiveInterval(serverProperties.getSession().getTimeout());\n\treturn sessionRepository;\n}", "CodeBleu_score": 29.6661310243538}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\treturn new ReactiveSessionRepositoryFilter(\n\t\tnew ReactiveSessionRepositoryAdapter<>(\n\t\t\tnew MapSessionRepository(new ConcurrentHashMap<>())\n\t\t)\n\t)\n}", "CodeBleu_score": 14.355510753559441}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\tDefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService);\nif (haloProperties.getSecurity().getTwoFactorAuth().isEnabled()) {\nuserDetailsService.setTwoFactorAuthEnabled(true);\n} else {\nuserDetailsService.setTwoFactorAuthEnabled(false);\n}\nreturn userDetailsService;\n}", "CodeBleu_score": 46.63613724790132}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\tDefaultUserDetailService userDetailService = new DefaultUserDetailService(userService, roleService);\nuserDetailService.setTwoFactorAuthDisabled(haloProperties.getSecurity().isTwoFactorAuthDisabled());\nreturn userDetailService;\n}", "CodeBleu_score": 50.4029409928277}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\n// Create a DefaultUserDetailService instance using the provided user and role services.\n    DefaultUserDetailService defaultUserDetailService = new DefaultUserDetailService(userService, roleService);\n\n// Get the security settings from the HaloProperties.\n    Security security = haloProperties.getSecurity();\n\n// Determine whether two-factor authentication is enabled or disabled.\n    boolean twoFactorAuthEnabled = security.getTwoFactorAuth().isEnabled();\n\n// Set the two-factor authentication enabled flag on the DefaultUserDetailService instance.\n    defaultUserDetailService.setTwoFactorAuthEnabled(twoFactorAuthEnabled);\n\n// Return the configured DefaultUserDetailService instance.\n    return defaultUserDetailService;\n}", "CodeBleu_score": 58.385371411994036}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\t\tComment.CommentOwner owner = new Comment.CommentOwner();\n\towner.setKind(\"email\");\n\towner.setDisplayName(email);\n\towner.setAvatarUrl(avatarUrl);\n\towner.setWebsiteUrl(websiteUrl);\n\treturn owner;\n}", "CodeBleu_score": 24.4809322522358}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t\tComment.CommentOwner owner = new Comment.CommentOwner();\n\towner.setKind(\"email\");\n\towner.setDisplayName(email == null ? \"\" : email);\n\towner.setAvatarUrl(avatarUrl);\n\towner.setUrl(url);\n\treturn owner;\n}", "CodeBleu_score": 24.605682748085027}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t\tComment.CommentOwner owner = new Comment.CommentOwner();\n\towner.setKind(\"email\");\n\towner.setDisplayName(email == null ? \"\" : email);\n\towner.setAvatarUrl(avatarUrl);\n\towner.setUrl(website);\n\treturn owner;\n}", "CodeBleu_score": 24.898221434108166}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (commentOwner.getKind().equals(\"t1\")) {\n\t\treturn post.getOwner().getDisplayName().equals(commentOwner.getDisplayName())\n\t}\n\telse if (commentOwner.getKind().equals(\"t2\")) {\n\t\treturn post.getOwner().getDisplayName().equals(commentOwner.getDisplayName())\n\t}\n\telse {\n\t\treturn post.getOwner().getDisplayName().equals(commentOwner.getDisplayName())\n\t}\n}", "CodeBleu_score": 27.425342928124298}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (commentOwner.getKind().equals(\"t1\")) {\n\t\treturn post.getOwner().getName().equals(commentOwner.getName());\n\t} else {\n\t\treturn post.getOwner().getEmail().equals(commentOwner.getEmail());\n\t}\n}", "CodeBleu_score": 22.95061659490082}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (commentOwner.getKind().equals(\"t1\")) {\n\t\tif (post.getOwner().getKind().equals(\"t1\")) {\n\t\t\tif (post.getOwner().getName().equals(commentOwner.getName())) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} else if (commentOwner.getKind().equals(\"t2\")) {\n\t\tif (post.getOwner().getKind().equals(\"t2\")) {\n\t\t\tif (post.getOwner().getDisplayName().equals(commentOwner.getDisplayName())) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} else if (commentOwner.getKind().equals(\"t3\")) {\n\t\tif (post.getOwner().getKind().equals(\"t3\")) {\n\t\t\tif (post.getOwner().getDisplayName().equals(commentOwner.getDisplayName())) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} else if (commentOwner.getKind().equals(\"t4\")) {\n\t\tif (post.getOwner().getKind().equals(\"t4\")) {\n\t\t\tif (post.getOwner().getDisplayName().equals(commentOwner.getDisplayName())) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} else if (commentOwner.getKind().equals(\"t5\")) {\n\t\tif (post.getOwner().getKind().equals(\"t5\")) {\n\t\t\tif (post.getOwner().getDisplayName().equals(commentOwner.getDisplayName())) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} else if (commentOwner.getKind().equals(\"t6\")) {\n\t\tif (post.getOwner().getKind().equals(\"t6\")) {\n\t\t\tif (post.getOwner().getDisplayName().equals(commentOwner.getDisplayName())) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} else if (commentOwner.getKind().equals(\"t8\")) {\n\t\tif (post.getOwner().getKind().equals(\"t8\")) {\n\t\t\tif (post.getOwner().getDisplayName().equals(commentOwner.getDisplayName())) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} else if (commentOwner.getKind().equals(\"t9\")) {\n\t\tif (post.getOwner().getKind().equals(\"t9\")) {\n\t\t\tif (post.getOwner().getDisplayName().equals(commentOwner.getDisplayName())) {", "CodeBleu_score": 20.034763610504548}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\tListOptions options = new ListOptions();\nString fieldSelector = getFieldSelector();\nif (StringUtils.isNotBlank(fieldSelector)) {\noptions.setFieldSelector(fieldSelector);\n}\nString keyword = getKeyword();\nif (StringUtils.isNotBlank(keyword)) {\noptions.setKeyword(keyword);\n}\nString ownerName = getOwnerName();\nif (StringUtils.isNotBlank(ownerName)) {\noptions.setLabelSelector(getOwnerKind() + \"=\" + ownerName);\n}\nreturn options;\n}", "CodeBleu_score": 33.22013928603361}, {"code": "public ListOptions toListOptions(){\n\tListOptions options = new ListOptions();\nString fieldSelector = labelAndFieldSelectorToListOptions(getLabelSelector(), getFieldSelector());\nif (isNotBlank(getKeyword())) {\nif (isNotBlank(getOwnerName())) {\nfieldSelector += \",metadata.name=\" + getOwnerName();\n}\nfieldSelector += \",metadata.namespace!=kube-system\";\n}\noptions.setFieldSelector(fieldSelector);\nreturn options;\n}", "CodeBleu_score": 23.437765220791324}, {"code": "public ListOptions toListOptions(){\n\tListOptions listOptions = new ListOptions();\nlistOptions.setLabelSelector(getLabelSelector());\nString fieldSelector = getFieldSelector();\nif (StringUtils.isNotBlank(fieldSelector)) {\nfieldSelector += \",\";\n}\nfieldSelector += getOwnerKind() + \".metadata.name=\" + getOwnerName();\nlistOptions.setFieldSelector(fieldSelector);\nif (StringUtils.isNotBlank(getKeyword())) {\nlistOptions.setKeyword(getKeyword());\n}\nreturn listOptions;\n}", "CodeBleu_score": 26.179043731390383}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\treturn Mono.justOrEmpty(commentName)\n\t\t\t.map(name -> getByName(name))\n\t\t\t.filter(notNull())\n\t\t\t.map(comment -> getUpvote(comment))\n\t\t\t.defaultIfEmpty(empty())\n\t\t\t.map(upvote -> builder().upvotes(upvote).build());\n}", "CodeBleu_score": 32.200684190685834}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\treturn Mono.justOrEmpty(commentName)\n\t\t.map(name -> counterRepository.getByName(name))\n\t\t.filter(notNull())\n\t\t.map(counter -> CommentStats.builder().upvotes(counter.getUpvote()).build())\n\t\t.defaultIfEmpty(CommentStats.builder().build());\n}", "CodeBleu_score": 42.70519742758364}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\treturn Mono.just(commentName)\n\t\t.filter(notNull())\n\t\t.flatMap(getUpvote())\n\t\t.map(upvote -> new CommentStats(commentName, upvote))\n\t\t.defaultIfEmpty(new CommentStats(commentName));\n}", "CodeBleu_score": 31.201559089111484}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\t// Create a subscriber from the given user identity\nSubscriber subscriber = createSubscriber(identity);\n// Set up an interest reason for the subscription, specifying that the reason type is \"someone replied to you\" and the condition is that the replied owner matches the user's name\nsubscriber.setReasonType(ReasonType.SOMEONE_REPLIED_TO_YOU);\nsubscriber.setExpression(new Condition.Builder()\n.setOwnerName(identity.getName())\n.build());\n// Subscribe the user to the notification center and block until the subscription is completed\nNotificationCenter.subscribe(subscriber);\n}", "CodeBleu_score": 29.603116152103432}, {"code": "void subscribeReply(UserIdentity identity){\n\t\t// Create a subscriber from the given user identity.\n\tSubscriber subscriber = createSubscriber(identity);\n\n\t// If the subscriber was created successfully, set up an interest reason for the subscription, specifying that the reason type is \"someone replied to you\" and the condition is that the replied owner matches the user's name.\n\tif (subscriber != null) {\n\t\tReason reason = new Reason();\n\t\treason.setReasonType(ReasonType.SOMEONE_REPLIED_TO_YOU);\n\t\treason.setExpression(new Expression(\"repliedOwner = '\" + identity.getName() + \"'\"));\n\t\tsubscriber.setReason(reason);\n\n\t\t// Subscribe the user to the notification center and block until the subscription is completed.\n\t\tNotificationCenter.getInstance().subscribe(subscriber);\n\t\tNotificationCenter.getInstance().blockUntilSubscribed(subscriber);\n\t}\n}", "CodeBleu_score": 49.845798702267196}, {"code": "void subscribeReply(UserIdentity identity){\n\t\t// Create a subscriber from the given user identity.\n\tSubscriber subscriber = createSubscriber(identity);\n\tif (subscriber == null) {\n\t\treturn;\n\t}\n\n\t// Set up an interest reason for the subscription, specifying that the reason type is \"someone replied to you\" and the condition is that the replied owner matches the user's name.\n\tReason reason = new Reason();\n\treason.setReasonType(ReasonType.SOMEONE_REPLIED_TO_YOU);\n\treason.setCondition(\"repliedOwner == '\" + identity.getName() + \"'\");\n\n\t// Subscribe the user to the notification center.\n\tNotificationCenter.subscribe(subscriber, reason);\n\n\t// Block until the subscription is completed.\n\tNotificationCenter.blockUntilSubscribed(subscriber);\n}", "CodeBleu_score": 55.64337545667076}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\t\treturn Mono.fromCallable(() -> {\n\t\tcomment.setApproved(true);\n\t\tcomment.setApprovedTime(Instant.now());\n\t\treturn comment;\n\t}).retry(3, e -> e instanceof OptimisticLockingFailureException).flatMap(commentUpdateFunction);\n}", "CodeBleu_score": 22.97711874927738}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t\treturn client.update(comment, comment -> {\n\t\tcomment.setApproved(true);\n\t\tcomment.setApprovedTime(now());\n\t\treturn comment;\n\t});\n}", "CodeBleu_score": 13.626502951821399}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t\treturn client.update(comment)\n\t\t.doOnNext(c -> c.setApproved(true))\n\t\t.doOnNext(c -> c.setApprovedTime(now()))\n\t\t.retry(1)\n\t\t.onErrorResume(OptimisticLockingFailureException.class, e -> {\n\t\t\tlog.warn(\"Optimistic locking failure on comment {}. Retrying.\", comment.getId());\n\t\t\treturn updateCommentWithRetry(comment, c -> c.setApproved(true));\n\t\t});\n}", "CodeBleu_score": 30.36201163775229}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction) {\n$action->livewire = $this->getLivewire();\n}\n\nif ($action instanceof HasRecord && $this->getRecord()) {\n$action->record = $this->getRecord();\n}\n\nreturn $action;\n}", "CodeBleu_score": 44.58235249569034}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t$action = $action->mount($this->getLivewire());\nif ($action instanceof HasRecord) {\n$action->setRecord($this->getRecord());\n}\nreturn $action;\n}", "CodeBleu_score": 46.53371469959785}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction) {\n$action->livewire($this->getLivewire());\n}\n\nif ($action instanceof HasRecord && $this->getRecord()) {\n$action->record($this->getRecord());\n}\n\nreturn $action;\n}", "CodeBleu_score": 58.63029155127568}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t\tif (empty($this->successRedirect)) {\n\t\treturn $this;\n\t}\n\t$this->evaluate($this->successRedirect);\n\treturn $this;\n}", "CodeBleu_score": 28.648442314851717}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$this->redirect($this->evaluate($this->successRedirect));\nreturn $this;\n}", "CodeBleu_score": 25.194737163169883}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t\n}", "CodeBleu_score": 3.570348081383481}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t$record?->tags", "CodeBleu_score": 8.002951303501703}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t$record->tags", "CodeBleu_score": 8.002951303494713}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t// If the record doesn't exist, we can't do anything.\nif ($record === null) {\nreturn;\n}\n\n// If the record doesn't have a tags method, we can't do anything.\nif (!method_exists($record, 'tags')) {\nreturn;\n}\n\n// Retrieve the tag model class.\n$tagClassName = $record->tags()->getRelated();\n\n// Process the provided tag names to find or create tags.\n$tags = collect($state)->map(function ($tagName) use ($tagClassName) {\n$locale = $tagClassName::getLocale();\n\n$tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\nif ($tag?->isEmpty() ?? true) {\n$tag = $tagClassName::create([\n'name' => [$locale => $tagName],\n]);\n}\n\nreturn $tag;\n})->flatten();\n\n// Synchronize the tags with the record by syncing their IDs.\n$record->tags()->sync($tags->pluck('id'));\n}", "CodeBleu_score": 78.46117721877015}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// Dissect the repository path to obtain the space path and repository name.\n\tspacePath, repoName, err := paths.DisectRepoPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource for the pipeline.\n\tscope, err := authz.NewRepositoryScope(spacePath, repoName)\n\tif err != nil {\n\t\treturn err\n\t}\n\tresource := authz.NewRepositoryResource(scope, pipelineIdentifier)\n\n\t// Perform the authorization check.\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 48.48000815693475}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// Dissect the repository path to obtain the space path and repository name.\n\tspacePath, repoName, err := paths.DisectRepoPath(repoPath)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"could not dissect repository path %q: %w\", repoPath, err)\n\t}\n\n\t// Create a scope and resource for the pipeline.\n\tscope := authz.NewRepositoryScope(spacePath, repoName)\n\tresource := authz.NewPipelineResource(pipelineIdentifier)\n\n\t// Check if the user has the required permission for the pipeline.\n\tif err := authorizer.Check(ctx, session, scope, resource, permission); err != nil {\n\t\treturn fmt.Errorf(\"user %s does not have %s permission for pipeline %q in repository %q: %w\", session.UserID, permission, pipelineIdentifier, repoPath, err)\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 59.35141294933172}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tif repoPath == \"\" {\n\t\treturn fmt.Errorf(\"empty repo path\")\n\t}\n\tif pipelineIdentifier == \"\" {\n\t\treturn fmt.Errorf(\"empty pipeline identifier\")\n\t}\n\tif permission == enum.Permission_NONE {\n\t\treturn fmt.Errorf(\"permission is not specified\")\n\t}\n\t// Dissect the repository path to obtain the space path and repository name.\n\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Create a scope and resource for the pipeline.\n\tscope, err := authz.NewRepositoryScope(spacePath, repoName)\n\tif err != nil {\n\t\treturn err\n\t}\n\tresource, err := authz.NewPipelineResource(pipelineIdentifier)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Call the Check function with the context, authorizer, session, scope, resource, and permission to perform the authorization check.\n\treturn authz.Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 55.07186527281698}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparentSpace, name, err := paths.DisectLeaf(space.Path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tscope := authz.NewSpaceScope(parentSpace.ID, name)\n\tresource := authz.NewSpaceResource(space.ID)\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 57.67648228655088}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparentSpace, name, err := paths.DisectLeaf(space.Path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tscope := fmt.Sprintf(\"space:%s\", parentSpace.ID)\n\tresource := fmt.Sprintf(\"space:%s:%s\", parentSpace.ID, name)\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 59.68876340150431}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparentSpace, name, err := paths.DisectLeaf(space.Path)\n\tif err != nil {\n\t\treturn err\n\t}\n\tscope := authz.NewSpaceScope(parentSpace.ID)\n\tresource := authz.NewSpaceResource(parentSpace.ID, name)\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 57.86618568065322}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\treturn json.Marshal(data)\n\t}\n\n\tvar decoded map[string]any\n\tif err := json.NewDecoder(bytes.NewReader(source)).Decode(&decoded); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := json.NewDecoder(bytes.NewReader(source)).DisallowUnknownFields(); err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar encoded []byte\n\tif encoded, err = json.Marshal(data); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn encoded, nil\n}", "CodeBleu_score": 44.225001413341545}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif source == nil {\n\t\tvar buf bytes.Buffer\n\t\terr := json.NewEncoder(&buf).Encode(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tsource = buf.Bytes()\n\t}\n\n\tvar result bytes.Buffer\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\tencoder := json.NewEncoder(&result)\n\tencoder.SetEscapeHTML(false)\n\terr := decoder.Decode(data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tresult.Truncate(result.Len() - 1)\n\treturn result.Bytes(), nil\n}", "CodeBleu_score": 44.46826918482123}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif source == nil {\n\t\tsource = json.RawMessage{}\n\t}\n\tif len(source) == 0 {\n\t\tvar err error\n\t\tsource, err = json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\tvar result json.RawMessage\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\terr := decoder.Decode(&result)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tencoder := json.NewEncoder(bytes.NewBuffer(nil))\n\tencoder.SetEscapeHTML(false)\n\terr = encoder.Encode(result)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn bytes.TrimSuffix(encoder.Buffer.Bytes(), []byte(\"\n\")), nil\n}", "CodeBleu_score": 50.99889664498568}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check access permissions.\n\tif err := c.auth.CheckAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 42.33152983653372}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := c.auth.CheckRepo(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 42.343762895263545}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\tif err := c.validateRepoRef(repoRef); err != nil {\n\t\treturn nil, err\n\t}\n\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif err := c.checkAccess(ctx, session, reqPermission, repo); err != nil {\n\t\treturn nil, err\n\t}\n\treturn repo, nil\n}", "CodeBleu_score": 47.18445458881485}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tcheckSanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\tcheckSanitizers[enum.EmptyPayloadKind] = createEmptyPayloadSanitizer()\n\tcheckSanitizers[enum.RawPayloadKind] = createRawPayloadSanitizer()\n\tcheckSanitizers[enum.MarkdownPayloadKind] = createRawPayloadSanitizer()\n\tcheckSanitizers[enum.PipelinePayloadKind] = createPipelinePayloadSanitizer()\n\treturn checkSanitizers\n}", "CodeBleu_score": 62.13593721987694}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tcheckSanitizers := map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{}\n\tcheckSanitizers[enum.EmptyPayloadKind] = createEmptyPayloadSanitizer()\n\tcheckSanitizers[enum.MarkdownPayloadKind] = createMarkdownPayloadSanitizer()\n\tcheckSanitizers[enum.RawPayloadKind] = createRawPayloadSanitizer()\n\tcheckSanitizers[enum.PipelinePayloadKind] = createPipelinePayloadSanitizer()\n\treturn checkSanitizers\n}", "CodeBleu_score": 55.0292354404043}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\t// Create a map to store the sanitizers.\n\tcheckSanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\n\t// Create a sanitizer for empty payloads.\n\tcheckSanitizers[enum.EmptyPayloadKind] = createEmptyPayloadSanitizer()\n\n\t// Create a sanitizer for raw payloads.\n\tcheckSanitizers[enum.RawPayloadKind] = createRawPayloadSanitizer()\n\n\t// Create a sanitizer for markdown payloads.\n\tcheckSanitizers[enum.MarkdownPayloadKind] = createMarkdownPayloadSanitizer()\n\n\t// Create a sanitizer for pipeline payloads.\n\tcheckSanitizers[enum.PipelinePayloadKind] = createPipelinePayloadSanitizer()\n\n\treturn checkSanitizers\n}", "CodeBleu_score": 62.75366575182155}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\t\tif self.renderer.attached_buffer == self then\n\t\treturn self\n\tend\n\n\tif self.renderer.attached_buffer then\n\t\tself.renderer.attached_buffer:detach_from_renderer()\n\tend\n\n\tself.renderer.attached_buffer = self\n\tself.renderer.on_render = on_render\n\tself.state.on_render = on_render\n\tself.state.renderer = self.renderer\n\tself.state.buffer = self\n\n\tself.renderer:attach(self)\n\n\treturn self", "CodeBleu_score": 45.56544266552993}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tif self.renderer and self.renderer.attached_buffer == self then\n\t\treturn self\n\tend\n\tself.renderer = Renderer(on_render)\n\tself.renderer.attached_buffer = self\n\tself.renderer.attach(self)\n\treturn self", "CodeBleu_score": 47.534835865477355}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tif self.renderer and self.renderer.attached_buffer == self then\n\t\treturn self\n\tend\n\tif self.renderer then\n\t\tself.renderer:detach_buffer(self)\n\tend\n\tself.renderer = on_render.renderer\n\tself.renderer:attach_buffer(self)\n\treturn self", "CodeBleu_score": 41.81447277768252}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\t\tif self:is_valid() then\n\t\tself.watcher = Watcher:new(self.filename)\n\t\tself.watcher:watch_file(function(filename)\n\t\t\tif not self:is_valid() then\n\t\t\t\treturn\n\t\t\tend\n\t\t\tif callback then\n\t\t\t\tcallback()\n\t\t\tend\n\t\tend)\n\telse\n\t\tconsole.debug.error(\"Unable to watch invalid buffer\")\n\tend", "CodeBleu_score": 50.76814989343098}, {"code": "function Buffer:watch(callback)\n\t\tif self:is_valid() then\n\t\tif callback then\n\t\t\tself.watcher:watch_file(self.filename, function(filename, event)\n\t\t\t\tif event == \"change\" then\n\t\t\t\t\tcallback()\n\t\t\t\tend\n\t\t\tend)\n\t\telse\n\t\t\tself.watcher:watch_file(self.filename, nil)\n\t\tend\n\tend", "CodeBleu_score": 46.035482986034964}, {"code": "function Buffer:watch(callback)\n\t\tif self:is_valid() then\n\t\tlocal watcher = self.watcher\n\t\tif not watcher then\n\t\t\twatcher = self.watcher = Watcher()\n\t\tend\n\t\twatcher:watch_file(self.filename, function(filename, err)\n\t\t\tif err then\n\t\t\t\tconsole.debug.error(\"Error watching file %s: %s\", filename, err)\n\t\t\tend\n\t\t\tif callback then\n\t\t\t\tcallback()\n\t\t\tend\n\t\tend)\n\tend", "CodeBleu_score": 49.64570631729642}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\t\tlocal hex = self.hex\n\tif hex then\n\t\treturn hex\n\tend\n\n\tlocal spec = self.spec\n\tlocal fg = spec.foreground\n\tlocal bg = spec.background\n\n\tif fg then\n\t\thex = self:_get_hex(fg)\n\telseif bg then\n\t\thex = self:_get_hex(bg)\n\tend\n\n\tif hex then\n\t\tself.hex = hex\n\tend\n\n\treturn hex", "CodeBleu_score": 43.79637133162257}, {"code": "function Color:to_hex()\n\t\tif self._hex ~= nil then \n\t\treturn self._hex\n\tend\n\n\tlocal fg = self._spec.fg\n\tlocal bg = self._spec.bg\n\tlocal hl = self._spec.hl\n\n\tlocal hex = nil\n\n\tif fg then \n\t\tif type(fg) == \"string\" then \n\t\t\thex = fg\n\t\telse \n\t\t\thex = self:to_hex_from_spec(fg)\n\t\tend\n\telseif bg then \n\t\tif type(bg) == \"string\" then \n\t\t\thex = bg\n\t\telse \n\t\t\thex = self:to_hex_from_spec(bg)\n\t\tend\n\telseif hl then \n\t\tif type(hl) == \"string\" then \n\t\t\thex = hl\n\t\telse \n\t\t\thex = self:to_hex_from_spec(hl)\n\t\tend\n\tend\n\n\tif hex ~= nil then \n\t\tself._hex = hex\n\tend\n\n\treturn self._hex", "CodeBleu_score": 41.577013732743076}, {"code": "function Color:to_hex()\n\t\tif self.hex_value then\n\t\treturn self.hex_value\n\tend\n\tlocal spec = self.spec\n\tlocal color = self.color\n\tif spec == 'fg' then\n\t\tlocal hl_group = 'Normal:' .. color\n\t\tlocal hl_group_exists, hl_group_value = pcall(vim.api.nvim_get_hl_by_name, hl_group)\n\t\tif hl_group_exists then\n\t\t\tlocal fg = hl_group_value.foreground\n\t\t\tif fg then\n\t\t\t\tself.hex_value = fg:gsub('#', '')\n\t\t\t\treturn self.hex_value\n\t\t\tend\n\t\tend\n\telseif spec == 'bg' then\n\t\tlocal hl_group = 'Normal:' .. color\n\t\tlocal hl_group_exists, hl_group_value = pcall(vim.api.nvim_get_hl_by_name, hl_group)\n\t\tif hl_group_exists then\n\t\t\tlocal bg = hl_group_value.background\n\t\t\tif bg then\n\t\t\t\tself.hex_value = bg:gsub('#', '')\n\t\t\t\treturn self.hex_value\n\t\t\tend\n\t\tend\n\tend\n\treturn nil", "CodeBleu_score": 49.872665269410625}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = buffer:get_lines()\n\tlocal line_count = #lines\n\tfor i = 1, line_count do\n\t\tlocal line = lines[i]\n\t\tlocal line_length = #line\n\t\tlocal line_index = 1\n\t\twhile line_index <= line_length do\n\t\t\tlocal match_start, match_end = line:find(pattern, line_index, true)\n\t\t\tif match_start then\n\t\t\t\tbuffer:add_highlight(match_start, match_end - match_start, hl)\n\t\t\t\tline_index = match_end\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn self", "CodeBleu_score": 53.47008656150404}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tbuffer:add_highlight(0, 0, -1, hl)", "CodeBleu_score": 6.456678920981044}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\nend\n", "CodeBleu_score": 2.642495415569507}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = buffer:get_number() .. \"-\" .. row .. \"-\" .. col\n\tbuffer:set_extmark(pos, row, col, {virt_text = {{\" \" .. text .. \" \", hl}}, virt_text_pos = \"right_align\", priority = priority})\n\treturn id", "CodeBleu_score": 44.185375145651676}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = string.format(\"%s-%s-%s\", buffer, row, col)\n\tlocal bufnr = vim.api.nvim_get_api_info()[1]['bufnr']\n\tlocal id = string.format(\"%s-%s-%s\", bufnr, row, col)\n\tlocal id = string.format(\"%s-%s-%s\", buffer, row, col)\n\tvim.api.nvim_buf_set_extmark(buffer, self.ns_id, row, col, {\n\t\tvirt_text = {{text, hl}},\n\t\tvirt_text_pos = pos,\n\t\tpriority = priority\n\t})\n\treturn id", "CodeBleu_score": 53.69295467935977}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = tostring(row) .. \":\" .. tostring(col)\n\tlocal ns = vim.api.nvim_create_namespace(id)\n\tvim.api.nvim_buf_set_extmark(buffer, ns, row, col, { virt_text = {{ text, hl }}, virt_text_pos = pos, hl_mode = \"combine\", priority = priority })\n\treturn id", "CodeBleu_score": 55.478630408018816}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\t\tlocal lines = {}\n\tlocal line = \"\"\n\tfor char in output:gmatch(\".\") do\n\t\tif char == \"", "CodeBleu_score": 10.982358467774171}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal lines = {}\n\tlocal current_line = ''\n\tfor c in output:gmatch('.') do\n\t\tif c == '", "CodeBleu_score": 10.248607500046651}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = \"\"\n\tfor i = 1, #output do\n\t\tlocal char = output:sub(i,i)\n\t\tif char == \"", "CodeBleu_score": 20.19564704775633}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t\tif self.watchers[path] then\n\t\treturn self.watchers[path]\n\tend\n\tlocal watcher = vim.loop.new_fs_event()\n\twatcher:start(path, vim.loop.fs_event.FS_EVENT_RECURSIVE, handler)\n\tself.watchers[path] = watcher\n\treturn watcher", "CodeBleu_score": 47.5621205330114}, {"code": "function Watcher:watch_file(path, handler)\n\t\nend\n", "CodeBleu_score": 1.7515213379056636}, {"code": "function Watcher:watch_file(path, handler)\n\t\nend\n", "CodeBleu_score": 1.7515213379056636}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t\tlocal lines, error = self:get_lines()\n\tif error then\n\t\treturn error\n\tend\n\tlocal hunks, error = self.git_object:hunks(lines)\n\tif error then\n\t\treturn error\n\tend\n\tself:setup_signs(hunks)\n\treturn hunks", "CodeBleu_score": 15.204574090449768}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal lines, err = self:get_lines()\n\tif err then return err end\n\n\tlocal hunks, err = self.git_object:hunks()\n\tif err then return err end\n\n\tlocal sign_ns_id = self.namespace:get_sign_ns_id()\n\n\tfor _, hunk in ipairs(hunks) do\n\t\tfor _, hunk_line in ipairs(hunk.lines) do\n\t\t\tlocal line_number = hunk_line.line_number\n\t\t\tlocal line = lines[line_number]\n\t\t\tlocal line_type = hunk_line.type\n\t\t\tlocal sign_id = self.namespace:get_sign_id(line_type)\n\t\t\tlocal sign_priority = self.namespace:get_sign_priority(line_type)\n\n\t\t\tvim.fn.sign_place(sign_id, sign_ns_id, line_number, line_number, sign_priority)\n\t\t\tvim.fn.sign_unplace(sign_id, {buffer=self.bufnr})\n\n\t\t\tvim.fn.sign_place(sign_id, sign_ns_id, line_number, line_number, sign_priority)\n\t\t\tvim.fn.sign_unplace(sign_id, {buffer=self.bufnr})\n\t\tend\n\tend\n\n\treturn hunks", "CodeBleu_score": 49.86604348116297}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal err = self.git_object:live_hunks()\n\tif err then\n\t\treturn err\n\tend\n\tlocal lines = self:get_lines()\n\tlocal hunks = self.git_object.hunks\n\tfor _, hunk in ipairs(hunks) do\n\t\tlocal hunk_lines = hunk.lines\n\t\tfor _, hunk_line in ipairs(hunk_lines) do\n\t\t\tlocal line = lines[hunk_line.line_number]\n\t\t\tline.hunk = hunk\n\t\t\tif hunk_line.type == \"added\" then\n\t\t\t\tline.sign = {\n\t\t\t\t\tid = self.namespace:get_sign_ns_id(self.namespace.added),\n\t\t\t\t\tpriority = 1,\n\t\t\t\t}\n\t\t\telseif hunk_line.type == \"removed\" then\n\t\t\t\tline.sign = {\n\t\t\t\t\tid = self.namespace:get_sign_ns_id(self.namespace.removed),\n\t\t\t\t\tpriority = 1,\n\t\t\t\t}\n\t\t\telseif hunk_line.type == \"context\" then\n\t\t\t\tline.sign = {\n\t\t\t\t\tid = self.namespace:get_sign_ns_id(self.namespace.context),\n\t\t\t\t\tpriority = 2,\n\t\t\t\t}\n\t\t\telseif hunk_line.type == \"changed\" then\n\t\t\t\tline.sign = {\n\t\t\t\t\tid = self.namespace:get_sign_ns_id(self.namespace.changed),\n\t\t\t\t\tpriority = 3,\n\t\t\t\t}\n\t\t\tend\n\t\tend\n\tend\n\tself.namespace:update_signs()\n\treturn hunks", "CodeBleu_score": 47.738688183873634}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal tmp_name = fs.tmpname()\n\tlocal err = fs.write_file(tmp_name, patch)\n\tif err then\n\t\treturn err\n\tend\n\n\tlocal cmd = {\n\t\t\"git\",\n\t\t\"apply\",\n\t\t\"--cached\",\n\t\ttmp_name\n\t}\n\n\tlocal result, err = self.git:run_command(cmd)\n\tif err then\n\t\treturn err\n\tend\n\n\tfs.remove_file(tmp_name)\n\treturn nil", "CodeBleu_score": 50.960545776785594}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal tmpname = fs.tmpname()\n\tlocal err = fs.write_file(tmpname, patch)\n\tif err ~= nil then\n\t\treturn err\n\tend\n\tlocal cmd = { \"git\", \"apply\", \"--cached\", tmpname }\n\tlocal result = git2.runv(cmd, self.repo.path)\n\tfs.remove_file(tmpname)\n\treturn result.error", "CodeBleu_score": 52.25669461188019}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal tmpfile = fs.tmpname()\n\tlocal tmpfile_handle = fs.open_file(tmpfile, \"w\")\n\ttmpfile_handle:write(patch)\n\ttmpfile_handle:close()\n\n\tlocal cmd = \"git apply --cached --ignore-whitespace --whitespace=nowarn \" .. tmpfile\n\tlocal result = self.git:run_command(cmd)\n\tfs.remove_file(tmpfile)\n\n\treturn result", "CodeBleu_score": 49.89461489401281}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\tString accessTokenEndpoint = getAccessTokenEndpoint();\n\tString accessTokenVerb = getAccessTokenVerb();\n\tString body = getBody(accessTokenEndpoint, requestToken, verifier);\n\tString authHeaderValue = getHttpBasicAuthHeaderValue(requestToken);\n\tMap<String, String> headers = new HashMap<String, String>();\n\theaders.put(\"Authorization\", authHeaderValue);\n\theaders.put(\"Content-Type\", \"application/x-www-form-urlencoded\");\n\tString response = send(accessTokenEndpoint, accessTokenVerb, headers, body);\n\tToken accessToken = extract(response);\n\treturn accessToken;\n}", "CodeBleu_score": 32.45542269885525}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\tToken accessToken = new Token();\n\n\tString accessTokenEndpoint = getAccessTokenEndpoint();\n\tString accessTokenVerb = getAccessTokenVerb();\n\tString accessTokenBody = getBody(requestToken, verifier);\n\tString accessTokenContentType = getAccessTokenContentType();\n\tString accessTokenAuthorizationHeader = getAccessTokenAuthorizationHeader(requestToken, verifier);\n\n\tOAuthRequest request = new OAuthRequest(accessTokenVerb, accessTokenEndpoint);\n\trequest.addHeader(\"Content-Type\", accessTokenContentType);\n\trequest.addHeader(\"Authorization\", accessTokenAuthorizationHeader);\n\trequest.addBodyParameter(accessTokenBody);\n\n\tResponse response = send(request);\n\taccessToken = extract(response.getBody());\n\n\treturn accessToken;\n}", "CodeBleu_score": 43.86290338454445}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\tString accessTokenEndpoint = getAccessTokenEndpoint();\n\tString accessTokenVerb = getAccessTokenVerb();\n\tString accessTokenBody = getBody(requestToken, verifier);\n\tString accessTokenAuthHeader = getHttpBasicAuthHeaderValue();\n\n\tMap<String, String> accessTokenHeaders = new HashMap<String, String>();\n\taccessTokenHeaders.put(\"Authorization\", accessTokenAuthHeader);\n\n\tMap<String, String> accessTokenParams = new HashMap<String, String>();\n\taccessTokenParams.put(\"oauth_verifier\", verifier.getValue());\n\n\tString accessTokenResponse = send(accessTokenEndpoint, accessTokenVerb, accessTokenBody, accessTokenHeaders, accessTokenParams);\n\treturn extract(accessTokenResponse);\n}", "CodeBleu_score": 36.20281038294509}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\tBasicCredentialsProvider provider = new BasicCredentialsProvider();\n\tprovider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), new UsernamePasswordCredentials(username, password));\n\tBasicAuthCache cache = new BasicAuthCache();\n\tcache.put(host, new BasicScheme());\n\tcontext.setCredentialsProvider(provider);\n\tcontext.setAuthCache(cache);\n\tlogger.info(\"Added host to the authentication cache: \" + host.getHostName() + \":\" + host.getPort());\n}", "CodeBleu_score": 46.652850443440386}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\tif (host == null) {\n\t\treturn;\n\t}\n\t// Create a credentials provider with the credentials\n\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n\tcredsProvider.setCredentials(\n\t\tnew AuthScope(host.getHostName(), host.getPort()),\n\t\tnew UsernamePasswordCredentials(username, password)\n\t);\n\t// Create an auth cache, and add the host to it\n\tBasicAuthCache authCache = new BasicAuthCache();\n\tauthCache.put(host, new BasicScheme());\n\t// Add the auth cache to the execution context\n\tcontext.setCredentialsProvider(credsProvider);\n\tcontext.setAuthCache(authCache);\n\t// Log the action\n\tlog.info(\"Added host to the auth cache: \" + host.getHostName());\n}", "CodeBleu_score": 50.05357353277914}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\n// Create a BasicCredentialsProvider and add the credentials\nBasicCredentialsProvider credsProvider = new BasicCredentialsProvider();\ncredsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), new UsernamePasswordCredentials(username, password));\n\n// Create an auth cache and add the BasicCredentialsProvider to it\nBasicAuthCache authCache = new BasicAuthCache();\nauthCache.put(host, credsProvider);\n\n// Add the auth cache to the execution context\ncontext.setAuthCache(authCache);\n\n// Log the action\nlogger.info(\"Configured context for host \" + host.getHostName());\n}", "CodeBleu_score": 46.21699756516149}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tAvatarCache avatarCache = AvatarCache.get();\nif (avatarCache == null) {\nthrow new IllegalStateException(\"AvatarCache is not configured\");\n}\nString key = avatarCache.getCacheKey(source, size);\navatarCache.seedCache(key);\nString rootUrl = Jenkins.get().getRootUrl();\nif (rootUrl == null) {\nthrow new IllegalStateException(\"Jenkins root URL is not configured\");\n}\nString url = rootUrl + avatarCache.getUrlName() + \"/\" + source.getKey() + \"/\" + size + \"/\" + AvatarCache.rawEncode(key);\ntry {\nreturn URLDecoder.decode(url, \"UTF-8\");\n} catch (UnsupportedEncodingException e) {\nthrow new IllegalStateException(\"UTF-8 encoding is not supported\", e);\n}\n}", "CodeBleu_score": 52.378990536667466}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tAvatarCache avatarCache = AvatarCache.getInstance();\nif (avatarCache == null) {\nthrow new IllegalStateException(\"AvatarCache is not initialized.\");\n}\n\nString key = AvatarCache.getDigestOf(source, size);\navatarCache.seed(key);\nString urlName = AvatarCache.getUrlName(source, size);\n\nString rootUrl = Jenkins.get().getRootUrl();\nif (rootUrl == null) {\nthrow new IllegalStateException(\"Jenkins root URL is not configured.\");\n}\n\ntry {\nreturn rootUrl + avatarCache.getUrlName(source, size);\n} catch (UnsupportedEncodingException e) {\nthrow new IllegalStateException(\"UTF-8 encoding is not supported.\");\n}\n}", "CodeBleu_score": 43.51962996294524}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tAvatarCache avatarCache = AvatarCache.getInstance();\nif (avatarCache == null) {\nthrow new AvatarCacheException(\"AvatarCache is not configured\");\n}\n\nString key = avatarCache.hashKey(source, size);\navatarCache.seed(source, size);\n\ntry {\nreturn avatarCache.getRootUrlFromRequest() + avatarCache.rawEncode(key, size);\n} catch (UnsupportedEncodingException e) {\nthrow new AvatarCacheException(\"UTF-8 encoding is unsupported\", e);\n}\n}", "CodeBleu_score": 37.94850896753127}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t\tthis.source = source;\n\tthis.image = image;\n\tthis.lastModified = lastModified;\n\tif (image.getWidth() > 128 || image.getHeight() > 128) {\n\t\timage = scaleImage(image);\n\t}\n}", "CodeBleu_score": 36.989860351045614}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t\tthis.source = source;\n\tthis.image = image;\n\tif (lastModified < 0) {\n\t\tthis.lastModified = System.currentTimeMillis();\n\t} else {\n\t\tthis.lastModified = lastModified;\n\t}\n\tif (image.getWidth() > 128 || image.getHeight() > 128) {\n\t\tscaleImage();\n\t}\n}", "CodeBleu_score": 45.25059740018037}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t\tthis.source = source;\n\tthis.lastModified = lastModified;\n\tif (image.getWidth() > 128 || image.getHeight() > 128) {\n\t\tthis.image = scaleImage(image, 128, 128);\n\t} else {\n\t\tthis.image = image;\n\t}\n}", "CodeBleu_score": 48.68597580507398}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\t\tif (future == null)\n\t\treturn false;\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\tfuture.get();\n\t\t} catch (InterruptedException e) {\n\t\t\treturn true;\n\t\t} catch (ExecutionException e) {\n\t\t\treturn true;\n\t\t}\n\t\treturn true;\n\t}\n\treturn true;\n}", "CodeBleu_score": 21.43817297401796}, {"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false;\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\tImage img = future.get();\n\t\t\tif (img != null) {\n\t\t\t\tsetImage(img);\n\t\t\t\tsetLastModified(System.currentTimeMillis());\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tfuture = null;\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 40.664389331471995}, {"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false;\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\tif (future.isCancelled()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\timage = future.get();\n\t\t\tlastModified = System.currentTimeMillis();\n\t\t\tfuture = null;\n\t\t\treturn false;\n\t\t} catch (InterruptedException | ExecutionException e) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn true;\n}", "CodeBleu_score": 44.482206981896226}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\n}", "CodeBleu_score": 9.566626017162672}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\trsp.setContentType(\"image/png\");\nrsp.setHeader(\"Cache-Control\", \"no-cache\");\nrsp.setHeader(\"Pragma\", \"no-cache\");\nrsp.setDateHeader(\"Expires\", 0);\nOutputStream os = rsp.getOutputStream();\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nImageIO.write(image, \"png\", baos);\nbaos.flush();\nbaos.writeTo(os);\n}", "CodeBleu_score": 38.57315510251128}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\tOutputStream out = rsp.getOutputStream();\nout.write(imageData);\nif (flush) {\nout.flush();\n}\nrsp.setContentType(\"image/png\");\nrsp.addHeader(\"Expires\", \"0\");\nrsp.addHeader(\"Cache-Control\", \"must-revalidate,no-cache,no-store\");\nrsp.addHeader(\"Cache-Control\", \"post-check=0,pre-check=0\");\nrsp.addHeader(\"Pragma\", \"no-cache\");\nrsp.setContentLength(imageData.length);\n}", "CodeBleu_score": 35.11868697737385}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t\tthis.enableCache = enableCache;\n\tthis.teamCacheDuration = teamCacheDuration;\n\tthis.repositoriesCacheDuration = repositoriesCacheDuration;\n\tthis.owner = owner;\n\tthis.projectKey = projectKey;\n\tthis.repositoryName = repositoryName;\n\tthis.authenticator = authenticator;\n\tthis.httpClient = HttpClients.createDefault();\n\tthis.context = HttpClientContext.create();\n\tif (this.authenticator != null) {\n\t\tthis.authenticator.configureContext(this.context);\n\t}\n\tthis.httpClient = this.configureBuilder(this.httpClient).build();\n\tthis.setClientProxyParams(this.httpClient);\n\tthis.setConnectionManager(this.httpClient);\n\tthis.setKeepAliveStrategy(this.httpClient);\n\tthis.setRetryHandler(this.httpClient);\n\tthis.setConnectionManagerShared(this.httpClient);\n\tthis.setExpireDuration(this.teamCacheDuration, this.repositoriesCacheDuration);\n}", "CodeBleu_score": 40.229209593954636}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t\tthis.enableCache = enableCache;\n\tthis.teamCacheDuration = teamCacheDuration;\n\tthis.repositoriesCacheDuration = repositoriesCacheDuration;\n\tthis.owner = owner;\n\tthis.projectKey = projectKey;\n\tthis.repositoryName = repositoryName;\n\tthis.authenticator = authenticator;\n\tconfigureHttpClient();\n\tconfigureContext();\n\tbuild();\n}", "CodeBleu_score": 21.829012901683125}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t\tthis.enableCache = enableCache;\n\tthis.teamCacheDuration = teamCacheDuration;\n\tthis.repositoriesCacheDuration = repositoriesCacheDuration;\n\tthis.owner = owner;\n\tthis.projectKey = projectKey;\n\tthis.repositoryName = repositoryName;\n\tthis.authenticator = authenticator;\n\tthis.context = createContext();\n\tthis.clientProxyParams = getClientProxyParams();\n\tthis.configureBuilder();\n\tthis.client = build();\n}", "CodeBleu_score": 26.27141637419105}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\tString sourceBranchName = pullRequest.getSource().getBranch().getName();\n\tString sourceRawNode = pullRequest.getSource().getRawNode();\n\tString destinationBranchName = pullRequest.getDestination().getBranch().getName();\n\tString destinationRawNode = pullRequest.getDestination().getRawNode();\n\n\tif (sourceBranchName != null && sourceRawNode != null) {\n\t\tCommitClosure sourceClosure = CommitClosure.get(sourceRawNode);\n\t\tif (sourceClosure == null) {\n\t\t\tsourceClosure = new CommitClosure(sourceRawNode);\n\t\t\tsourceClosure.save();\n\t\t}\n\t\tpullRequest.setSourceClosure(sourceClosure);\n\t}\n\n\tif (destinationBranchName != null && destinationRawNode != null) {\n\t\tCommitClosure destinationClosure = CommitClosure.get(destinationRawNode);\n\t\tif (destinationClosure == null) {\n\t\t\tdestinationClosure = new CommitClosure(destinationRawNode);\n\t\t\tdestinationClosure.save();\n\t\t}\n\t\tpullRequest.setDestinationClosure(destinationClosure);\n\t}\n}", "CodeBleu_score": 38.18548393356328}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\tString sourceBranchName = pullRequest.getSource().getBranch().getName();\n\tString destinationBranchName = pullRequest.getDestination().getBranch().getName();\n\tString sourceBranchRawNode = getRawNode(pullRequest.getSource().getBranch());\n\tString destinationBranchRawNode = getRawNode(pullRequest.getDestination().getBranch());\n\tif (sourceBranchRawNode != null) {\n\t\tsetCommitClosure(sourceBranchName, sourceBranchRawNode);\n\t}\n\tif (destinationBranchRawNode != null) {\n\t\tsetCommitClosure(destinationBranchName, destinationBranchRawNode);\n\t}\n}", "CodeBleu_score": 40.51253144244097}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\tString sourceBranch = pullRequest.getSource().getBranch().getName();\n\tString destinationBranch = pullRequest.getDestination().getBranch().getName();\n\tString sourceCommit = pullRequest.getSource().getCommit().getHash();\n\tString destinationCommit = pullRequest.getDestination().getCommit().getHash();\n\tString sourceProject = pullRequest.getSource().getRepository().getProject().getKey();\n\tString sourceRepo = pullRequest.getSource().getRepository().getSlug();\n\tString destinationProject = pullRequest.getDestination().getRepository().getProject().getKey();\n\tString destinationRepo = pullRequest.getDestination().getRepository().getSlug();\n\n\tString sourceBranchName = sourceProject + \"/\" + sourceRepo + \"/\" + sourceBranch;\n\tString destinationBranchName = destinationProject + \"/\" + destinationRepo + \"/\" + destinationBranch;\n\n\tString sourceCommitClosureName = sourceBranchName + \"-\" + sourceCommit;\n\tString destinationCommitClosureName = destinationBranchName + \"-\" + destinationCommit;\n\n\tCommitClosure sourceCommitClosure = CommitClosure.get(sourceCommitClosureName);\n\tif (sourceCommitClosure == null) {\n\t\tString sourceCommitNode = getRawNode(sourceProject, sourceRepo, sourceBranch, sourceCommit);\n\t\tif (sourceCommitNode != null) {\n\t\t\tsourceCommitClosure = CommitClosure.create(sourceCommitClosureName, sourceCommitNode);\n\t\t}\n\t}\n\n\tCommitClosure destinationCommitClosure = CommitClosure.get(destinationCommitClosureName);\n\tif (destinationCommitClosure == null) {\n\t\tString destinationCommitNode = getRawNode(destinationProject, destinationRepo, destinationBranch, destinationCommit);\n\t\tif (destinationCommitNode != null) {\n\t\t\tdestinationCommitClosure = CommitClosure.create(destinationCommitClosureName, destinationCommitNode);\n\t\t}\n\t}\n\n\tsetCommitClosure(pullRequest.getSource(), sourceCommitClosure);\n\tsetCommitClosure(pullRequest.getDestination(), destinationCommitClosure);\n}", "CodeBleu_score": 33.93153063124631}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t\tString jenkinsLocationConfiguration = build.getExecutor().getOwner().getDescriptorByType(JenkinsLocationConfiguration.class)\n\tif (jenkinsLocationConfiguration == null) {\n\t\tthrow new IllegalStateException(\"Jenkins location configuration is null\")\n\t}\n\tString jenkinsUrl = jenkinsLocationConfiguration.getUrl()\n\tif (jenkinsUrl == null) {\n\t\tthrow new IllegalStateException(\"Jenkins URL is null\")\n\t}\n\treturn jenkinsUrl\n}", "CodeBleu_score": 46.60159710543152}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t\tString rootURL = build.getExecutor().getOwner().getAbsoluteUrl();\n\tif (rootURL == null) {\n\t\tthrow new IllegalStateException(\"The Jenkins location configuration is not set\");\n\t}\n\treturn rootURL;\n}", "CodeBleu_score": 48.34186177469989}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t\tString rootUrl = build.getAbsoluteUrl();\n\tif (rootUrl == null) {\n\t\tthrow new IllegalStateException(\"The root URL for the build is null\");\n\t}\n\treturn rootUrl;\n}", "CodeBleu_score": 43.49938817569362}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\tif (url.contains(\"localhost\") || url.contains(\"unconfigured-jenkins-location\")) {\n\t\tthrow new IllegalStateException(\"Invalid Jenkins URL: \" + url)\n\t}\n\ttry {\n\t\tURL u = new URL(url)\n\t\tif (bitbucket.isCloud() && !u.getHost().contains(\".\")) {\n\t\t\tthrow new IllegalStateException(\"Invalid Jenkins URL: \" + url)\n\t\t}\n\t\treturn url\n\t} catch (MalformedURLException e) {\n\t\tthrow new IllegalStateException(\"Invalid Jenkins URL: \" + url)\n\t}\n}", "CodeBleu_score": 39.618278341884135}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\tif (url == null || url.isEmpty())  {\nthrow new IllegalStateException(\"Jenkins URL must be specified.\")\n}\nif (url.contains(\"localhost\") || url.contains(\"unconfigured-jenkins-location\"))  {\nthrow new IllegalStateException(\"Jenkins URL cannot contain \\\"localhost\\\" or \\\"unconfigured-jenkins-location\\\".\")\n}\nif (bitbucket.isCloud() && !url.contains(\"bitbucket.org\"))  {\nthrow new IllegalStateException(\"Jenkins URL must be fully qualified for Bitbucket Cloud.\")\n}\ntry  {\nnew URL(url)\n}\ncatch (MalformedURLException e)  {\nthrow new IllegalStateException(\"Jenkins URL is malformed.\", e)\n}\nreturn url\n}", "CodeBleu_score": 41.266781364520455}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\tif (url.contains(\"${bitbucket.baseUrl}\")) {\n\t\treturn url.replace(\"${bitbucket.baseUrl}\", bitbucket.getBaseUrl());\n\t}\n\ttry {\n\t\tURL u = new URL(url);\n\t\tif (u.getHost().equals(\"localhost\") || u.getHost().equals(\"unconfigured-jenkins-location\")) {\n\t\t\tthrow new IllegalStateException(\"The URL provided cannot be used to connect to a Jenkins instance. Please check your configuration.\");\n\t\t}\n\t\tif (bitbucket instanceof BitbucketCloudApiClient) {\n\t\t\tif (u.getHost().contains(\"bitbucket.org\")) {\n\t\t\t\treturn url;\n\t\t\t}\n\t\t\tthrow new IllegalStateException(\"The URL provided is not a fully qualified Bitbucket Cloud URL. Please check your configuration.\");\n\t\t}\n\t\treturn url;\n\t} catch (MalformedURLException e) {\n\t\tthrow new IllegalStateException(\"The URL provided is malformed. Please check your configuration.\");\n\t}\n}", "CodeBleu_score": 58.763860790218445}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\tif (!source.isNotificationDisabled()) {\n            listener.getLogger().println(\"Sending build status notifications to Bitbucket\");\n            String revision = getRevision(build);\n            String hash = getHash(build);\n            String buildKey = getBuildKey(build, source.isShareBuildKey());\n            BitbucketClient client = buildBitbucketClient(source, build, listener);\n            if (isPullRequestBuild(build)) {\n                String originName = getOriginName(build);\n                if (source.isFilterByOrigin()) {\n                    if (anyMatch(filters(source), originName)) {\n                        createStatus(client, buildKey, revision, hash, build, listener);\n                    }\n                } else {\n                    createStatus(client, buildKey, revision, hash, build, listener);\n                }\n            } else {\n                createStatus(client, buildKey, revision, hash, build, listener);\n            }\n        }\n    }", "CodeBleu_score": 30.24270118680975}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\nBitbucketSCMSourceContext context = source.getContext(build, listener);\nif (context == null) {\nreturn;\n}\n\nif (source.isNotificationDisabled(context)) {\nreturn;\n}\n\nSCMRevision revision = context.getRevision(build);\nif (revision == null) {\nreturn;\n}\n\nString revisionType = revision.getType();\nif (revisionType == null) {\nreturn;\n}\n\nString revisionValue = revision.getRevision();\nif (revisionValue == null) {\nreturn;\n}\n\nString hash = revision.getHash();\nif (hash == null) {\nreturn;\n}\n\nString buildKey = context.getBuildKey(build);\nif (buildKey == null) {\nreturn;\n}\n\nString originName = context.getOriginName(build);\nif (originName == null) {\nreturn;\n}\n\nBitbucketClient client = buildBitbucketClient(source, build, listener);\n\nif (revisionType.equals(\"BRANCH\")) {\nif (source.isShareBuildKeyEnabled()) {\nbuildKey = originName + \"-\" + buildKey;\n}\n\ncreateStatus(client, hash, buildKey, source.isCommitStatusForEveryBuild());\n} else if (revisionType.equals(\"PULL_REQUEST\")) {\nPullRequestSCMHead head = (PullRequestSCMHead) context.getHead(build);\nif (head == null) {\nreturn;\n}\n\nif (source.isShareBuildKeyEnabled()) {\nbuildKey = head.getOriginName() + \"-\" + buildKey;\n}\n\nboolean notificationDisabled = head.isNotificationDisabled();\nif (!notificationDisabled) {\nString buildName = head.getOriginName() + \"/\" + head.getPullRequestNumber();\ncreateStatus(client, hash, buildKey, source.isCommitStatusForEveryBuild(), buildName);\n}\n}\n}", "CodeBleu_score": 41.96950298004624}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\tSCMRevision revision = build.getRevision();\n\tif (revision instanceof SCMRevisionImpl) {\n\t\tSCMRevisionImpl revisionImpl = (SCMRevisionImpl) revision;\n\t\tSCMHead head = revisionImpl.getHead();\n\t\tif (head instanceof PullRequestSCMHead) {\n\t\t\tPullRequestSCMHead prHead = (PullRequestSCMHead) head;\n\t\t\tif (prHead.isMerge()) {\n\t\t\t\trevision = prHead.getPullRevision();\n\t\t\t}\n\t\t}\n\t}\n\tif (revision instanceof SCMRevisionImpl) {\n\t\tSCMRevisionImpl revisionImpl = (SCMRevisionImpl) revision;\n\t\tSCMHead head = revisionImpl.getHead();\n\t\tif (head instanceof PullRequestSCMHead) {\n\t\t\tPullRequestSCMHead prHead = (PullRequestSCMHead) head;\n\t\t\tif (prHead.isMerge()) {\n\t\t\t\trevision = prHead.getPullRevision();\n\t\t\t}\n\t\t}\n\t}\n\tString revisionType = revision.getType();\n\tboolean notificationsDisabled = source.isDisableNotifications();\n\tif (!notificationsDisabled) {\n\t\tString revisionString = revision.getRevision();\n\t\tString hash = revision.getHash();\n\t\tString buildKey = build.getDisplayName();\n\t\tString buildName = build.getFullDisplayName();\n\t\tString buildUrl = build.getUrl();\n\t\tString projectName = source.getProjectName();\n\t\tString repositoryName = source.getRepositoryName();\n\t\tString serverUrl = source.getServerUrl();\n\t\tString originName = source.getOriginName();\n\t\tString buildKeyPrefix = source.getBuildKey();\n\t\tString traits = source.getTraits();\n\t\tString buildKeySuffix = \"\";\n\t\tif (traits != null && !traits.isEmpty()) {\n\t\t\tfor (SCMSourceTrait trait : source.getTraitsList()) {\n\t\t\t\tif (trait instanceof BitbucketSCMSourceTrait) {\n\t\t\t\t\tBitbucketSCMSourceTrait bitbucketTrait = (BitbucketSCMSourceTrait) trait;\n\t\t\t\t\tbuildKeySuffix = bitbucketTrait.getBuildKey();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tString buildKeySuffixToUse = buildKeySuffix;\n\t\tif (buildKeySuffixToUse == null || buildKeySuffixToUse.isEmpty()) {\n\t\t\tbuildKeySuffixToUse = \"none\";\n\t\t}\n\t\tString buildKeyToUse = buildKeyPrefix + buildKeySuffixToUse;\n\t\tBitbucket", "CodeBleu_score": 32.530377399969304}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t-    if (shareBuildKeyBetweenBranchAndPR) {\n-        String folderName = build.getParent().getFullName();\n-        return String.format(\"%s_%s\", folderName, branch);\n-    } else {\n-        return build.getParent().getFullName();\n-    }\n+    return String.format(\"%s_%s\", build.getParent().getFullName(), branch);\n }", "CodeBleu_score": 46.43458926284345}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t String key = null;\n if (shareBuildKeyBetweenBranchAndPR) {\n // Use the folder name and branch name to create the key\n String folderName = build.getParent().getFullName();\n key = folderName + \"/\" + branch;\n } else {\n // Use the job's full name as the key\n key = build.getParent().getFullName();\n }\n return key;\n }", "CodeBleu_score": 60.46939995417955}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t String buildKey = build.getParent().getFullName();\n if (shareBuildKeyBetweenBranchAndPR) {\n buildKey += \"#\" + branch;\n }\n return buildKey;\n }", "CodeBleu_score": 31.109307373173777}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\tif (serverUrl == null) {\nString url = get(SCMNavigatorTrait._SERVER_URL);\nif (url != null) {\nsetServerUrl(url);\n} else {\nLOGGER.log(Level.WARNING, \"BitbucketSCMNavigator's serverUrl is null. This is likely due to a Jenkins upgrade. The navigator's traits will be recreated to reflect the new behavior.\");\n}\n}\nif (traits == null) {\nLOGGER.log(Level.WARNING, \"BitbucketSCMNavigator's traits is null. This is likely due to a Jenkins upgrade. The navigator's traits will be recreated to reflect the new behavior.\");\ntraits = new ArrayList<SCMNavigatorTrait<?>>();\ntraits.add(new BitbucketBranchDiscoveryTrait());\ntraits.add(new BitbucketTagDiscoveryTrait());\ntraits.add(new BitbucketForkPullRequestDiscoveryTrait());\ntraits.add(new BitbucketOriginPullRequestDiscoveryTrait());\ntraits.add(new BitbucketServerRepositoryProviderTrait());\ntraits.add(new GitBranchDiscoveryTrait());\ntraits.add(new GitTagDiscoveryTrait());\ntraits.add(new HgBranchDiscoveryTrait());\ntraits.add(new HgTagDiscoveryTrait());\ntraits.add(new PaginatedListTrait());\ntraits.add(new ChangeRequestCheckoutTrait());\n}\nreturn this;\n}", "CodeBleu_score": 29.98837243192632}, {"code": "private Object readResolve() throws ObjectStreamException{\n\tif (serverUrl == null) {\nserverUrl = BitbucketSCMNavigator.resolveServerUrl(bitbucketServerUrl);\n}\nif (serverUrl == null) {\nLOGGER.log(Level.WARNING, \"Bitbucket server URL could not be resolved from bitbucketServerUrl '{0}', using default: {1}\", new Object[]{bitbucketServerUrl, DEFAULT_SERVER_URL});\nserverUrl = DEFAULT_SERVER_URL;\n}\nif (traits == null) {\ntraits = new ArrayList<SCMNavigatorTrait<?>>();\ntraits.add(new BitbucketSCMNavigatorTrait(traits, serverUrl));\n}\nreturn this;\n}", "CodeBleu_score": 21.23724510696228}, {"code": "private Object readResolve() throws ObjectStreamException{\n\tif (serverUrl == null) {\nString url = (String) get(SERVER_URL);\nif (url != null) {\nsetServerUrl(url);\n} else {\nLOGGER.warning(\"Bitbucket SCM navigator's server URL is null, so it cannot be resolved. The navigator will not be valid.\");\n}\n}\n\nif (traits == null) {\ntraits = new ArrayList<SCMNavigatorTrait<?>>();\nfor (SCMNavigatorTrait trait : (List<SCMNavigatorTrait>) get(TRAITS)) {\ntraits.add(trait);\n}\n}\n\nreturn this;\n}", "CodeBleu_score": 22.381258979613655}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tBitbucketRepository repository = getBitbucketRepository(name);\n\tif (repository != null) {\n\t\tString message = format(\"%s %s\", isMatch ? \"Proposed\" : \"Ignored\", getFullName(repository));\n\t\tgetLogger().info(message);\n\t\tif (isMatch) {\n\t\t\tincrementCount();\n\t\t}\n\t}\n}", "CodeBleu_score": 43.664796295470786}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tBitbucketRepository repository = getBitbucketRepository(name);\n\tString fullName = getFullName(repository);\n\tString message = format(\"Repository '%s' %s\", fullName, isMatch ? \"matched\" : \"did not match\");\n\tgetLogger().info(message);\n\tif (isMatch) {\n\t\tincrementCount();\n\t}\n}", "CodeBleu_score": 44.64516715513188}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\tBitbucketRepository repository = getBitbucketRepository(name);\nif (repository != null) {\nif (isMatch) {\nlogger.info(\"Proposing repository {}\", format(repository));\nproposedCount.incrementAndGet();\n} else {\nlogger.info(\"Ignoring repository {}\", format(repository));\nignoredCount.incrementAndGet();\n}\n} else {\nlogger.warn(\"Could not find repository {}\", name);\n}\n}", "CodeBleu_score": 42.90206414409628}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tif (marked == null) {\n    return rev;\n}\n\nif (marked.getBranches().isEmpty()) {\n    return rev;\n}\n\nList<String> branches = marked.getBranches().stream().filter(branch -> !branchExists(git, branch)).collect(toList());\nif (branches.isEmpty()) {\n    return rev;\n}\n\nlistener.getLogger().println(\"Fetching branches \" + branches + \" from upstream repository\");\n\nList<RefSpec> refSpecs = branches.stream().map(branch -> new RefSpec(\"+\" + branch + \":\" + branch)).collect(toList());\ngit.fetch_().from(scm.getExtensions().get(GitSCM.class).getRemote(), refSpecs).execute();\n\nreturn rev;\n}", "CodeBleu_score": 36.855337881967756}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t\n// If the revision is null, we can't decorate it.\nif (rev == null) {\n    return null;\n}\n\n// If the revision is not a branch, we can't decorate it.\nif (!rev.isBranch()) {\n    return rev;\n}\n\n// Get the branch name.\nString branchName = rev.getBranches().get(0).getName();\n\n// Get the list of commits that don't exist locally.\nList<String> commitHashes = commitExists(git, rev.getBranches().get(0).getSHA1());\n\n// If there are no missing commits, we can just return the revision.\nif (commitHashes.isEmpty()) {\n    return rev;\n}\n\n// Otherwise, we need to create a RefSpec for each missing commit.\nList<RefSpec> refSpecs = commitHashes.stream()\n    .map(hash -> new RefSpec(\"+\"+hash+\":\"+branchName))\n    .collect(Collectors.toList());\n\n// Fetch the missing commits.\nlistener.getLogger().println(\"Fetching missing commits from the remote repository...\");\ngit.fetch_().from(scm.getRemote(), refSpecs).execute();\n\n// Return the revision.\nreturn rev;\n}", "CodeBleu_score": 39.73777760722118}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t\n// Get the list of branches to check for commit existence", "CodeBleu_score": 7.466326919035275}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tif (links == null) {\n\t\treturn null;\n\t}\n\tMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n\tfor (Map.Entry<String, BitbucketHref> entry : links.entrySet()) {\n\t\tresult.put(entry.getKey(), entry.getValue());\n\t}\n\treturn result;\n}", "CodeBleu_score": 54.33753925993029}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tif (links == null) {\n\t\treturn null;\n\t}\n\tMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n\tfor (Map.Entry<String, BitbucketHref> entry : links.entrySet()) {\n\t\tresult.put(entry.getKey(), entry.getValue().getHref());\n\t}\n\treturn result;\n}", "CodeBleu_score": 56.34640934770132}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tif (links == null) {\n\t\treturn null;\n\t}\n\n\tMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n\tfor (Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n\t\tresult.put(entry.getKey(), entry.getValue().get(0));\n\t}\n\n\treturn result;\n}", "CodeBleu_score": 61.81094984030457}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tif (resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\tconst repositoryToResourceStates: Map<string, SourceControlResourceState[]> = new Map();\n\n\tfor (const resourceState of resourceStates) {\n\t\tconst repository = await this.repository.getRepository(resourceState);\n\t\tif (!repository) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst resourceStatesForRepository = repositoryToResourceStates.get(repository.rootUri.toString()) || [];\n\t\tresourceStatesForRepository.push(resourceState);\n\t\trepositoryToResourceStates.set(repository.rootUri.toString(), resourceStatesForRepository);\n\t}\n\n\tconst repositoryToErrorMessages: Map<string, string[]> = new Map();\n\tconst repositoryToResourceStatesToDispose: Map<string, SourceControlResourceState[]> = new Map();\n\n\tfor (const [repositoryRootUri, resourceStatesForRepository] of repositoryToResourceStates.entries()) {\n\t\tconst repository = await this.repository.getRepository(resourceStatesForRepository[0]);\n\t\tif (!repository) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst repositoryErrorMessages: string[] = [];\n\t\tconst repositoryResourceStatesToDispose: SourceControlResourceState[] = [];\n\n\t\tconst repositoryRelativePathToResourceState: Map<string, SourceControlResourceState> = new Map();\n\t\tfor (const resourceState of resourceStatesForRepository) {\n\t\t\tconst repositoryRelativePath = await repository.getResourceRelativePath(resourceState);\n\t\t\trepositoryRelativePathToResourceState.set(repositoryRelativePath, resourceState);\n\t\t}\n\n\t\tconst repositoryRelativePathToError: Map<string, string> = new Map();\n\t\tfor (const repositoryRelativePath of repositoryRelativePathToResourceState.keys()) {\n\t\t\ttry {\n\t\t\t\tawait repository.add(repositoryRelativePath);\n\t\t\t\trepositoryResourceStatesToDispose.push(repositoryRelativePathToResourceState.get(repositoryRelativePath)!);\n\t\t\t} catch (e) {\n\t\t\t\trepositoryRelativePathToError.set(repositoryRelativePath, e.message);\n\t\t\t}\n\t\t}\n\n\t\tfor (const repositoryRelativePath of repositoryRelativePathToError.keys()) {\n\t\t\trepositoryErrorMessages.push(repositoryRelativePathToError.get(repositoryRelativePath)!);\n\t\t}\n\n\t\tif (repositoryErrorMessages.length > 0) {\n\t\t\trepositoryToErrorMessages.set(repositoryRootUri, repositoryErrorMessages);\n\t\t\trepositoryToResourceStates", "CodeBleu_score": 36.015618740241266}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tif (resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\tconst resources = resourceStates.map(r => r.resource);\n\tconst uris = resources.map(r => r.uri);\n\tconst repositories = await this.getRepositories(uris);\n\n\tconst repositoryToResources: Map<SourceControlRepository, SourceControlResourceState[]> = new Map();\n\tfor (const repository of repositories) {\n\t\trepositoryToResources.set(repository, []);\n\t}\n\n\tfor (const resourceState of resourceStates) {\n\t\tconst repository = repositories.find(r => r.rootUri === resourceState.resource.uri);\n\t\tif (repository) {\n\t\t\trepositoryToResources.get(repository)!.push(resourceState);\n\t\t}\n\t}\n\n\tconst repositoryToErrorMessages: Map<SourceControlRepository, string[]> = new Map();\n\tfor (const [repository, resourceStates] of repositoryToResources.entries()) {\n\t\tconst repositoryErrorMessage: string[] = [];\n\t\trepositoryToErrorMessages.set(repository, repositoryErrorMessage);\n\n\t\tconst filePaths = resourceStates.map(r => r.resource.fsPath);\n\t\ttry {\n\t\t\tawait repository.add(filePaths);\n\t\t} catch (e) {\n\t\t\trepositoryErrorMessage.push(e.toString());\n\t\t}\n\t}\n\n\tconst errorMessages = Array.from(repositoryToErrorMessages.values()).filter(r => r.length > 0).map(r => r.join('\n'));\n\tif (errorMessages.length > 0) {\n\t\tconst message = localize('add.error', \"Unable to add to source control. Reason: {0}\", errorMessages.join('\n'));\n\t\tthis.errorHandler.showError(message);\n\t}\n}", "CodeBleu_score": 43.79852156507188}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tif (resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\tconst repositoryResources: Map<string, SourceControlResourceState[]> = new Map();\n\tfor (const resourceState of resourceStates) {\n\t\tconst repository = await this.repository.get(resourceState.resource);\n\t\tif (!repository) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst uri = resourceState.resource.uri;\n\t\tconst repositoryResourcesForRepository = repositoryResources.get(repository.rootUri.toString()) || [];\n\t\trepositoryResources.set(repository.rootUri.toString(), [...repositoryResourcesForRepository, resourceState]);\n\t}\n\n\tconst repositoryToErrorMessages: Map<string, string[]> = new Map();\n\tfor (const repositoryUri of repositoryResources.keys()) {\n\t\tconst repositoryResourcesForRepository = repositoryResources.get(repositoryUri)!;\n\t\tconst repository = await this.repository.get(Uri.parse(repositoryUri));\n\t\tif (!repository) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst repositoryToErrorMessagesForRepository = repositoryToErrorMessages.get(repository.rootUri.toString()) || [];\n\t\trepositoryToErrorMessages.set(repository.rootUri.toString(), repositoryToErrorMessagesForRepository);\n\n\t\tconst repositoryToErrorMessagesForRepository = repositoryToErrorMessages.get(repository.rootUri.toString()) || [];\n\t\trepositoryToErrorMessages.set(repository.rootUri.toString(), repositoryToErrorMessagesForRepository);\n\n\t\tconst repositoryToErrorMessagesForRepository = repositoryToErrorMessages.get(repository.rootUri.toString()) || [];\n\t\trepositoryToErrorMessages.set(repository.rootUri.toString(), repositoryToErrorMessagesForRepository);\n\n\t\tconst repositoryToErrorMessagesForRepository = repositoryToErrorMessages.get(repository.rootUri.toString()) || [];\n\t\trepositoryToErrorMessages.set(repository.rootUri.toString(), repositoryToErrorMessagesForRepository);\n\n\t\tconst repositoryToErrorMessagesForRepository = repositoryToErrorMessages.get(repository.rootUri.toString()) || [];\n\t\trepositoryToErrorMessages.set(repository.rootUri.toString(), repositoryToErrorMessagesForRepository);\n\n\t\tconst repositoryToErrorMessagesForRepository = repositoryToErrorMessages.get(repository.rootUri.toString()) || [];\n\t\trepositoryToErrorMessages.set(repository.rootUri.toString(), repositoryTo", "CodeBleu_score": 33.48334520419775}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\t\tconst resourceStates = this.resourceStates;\n\tif (!resourceStates || !resourceStates.length || !(resourceStates[0] instanceof Uri)) {\n\t\tconst scmResource = await this.getResource();\n\t\tif (scmResource) {\n\t\t\tthis.resourceStates = [scmResource];\n\t\t}\n\t}\n\treturn this.resourceStates.filter(resourceState => resourceState instanceof Resource);\n}", "CodeBleu_score": 37.736666864686505}, {"code": "protected async getResourceStates{\n\t\tif (this.resourceStates.length === 0 || !(this.resourceStates[0] instanceof Uri)) {\n\t\tconst scmResource = await this.getResourceState(this.resourceStates[0]);\n\t\tif (scmResource) {\n\t\t\tthis.resourceStates = [scmResource];\n\t\t}\n\t}\n\treturn this.resourceStates.filter(resourceState => resourceState instanceof Resource);\n}", "CodeBleu_score": 34.81801806436762}, {"code": "protected async getResourceStates{\n\t\tconst resourceStates = this.resourceStates;\n\tif (!resourceStates || resourceStates.length === 0 || !(resourceStates[0] instanceof Uri)) {\n\t\tconst scmResource = await this.getResource(this.resourceStates[0]);\n\t\tif (scmResource) {\n\t\t\tthis.resourceStates = [scmResource];\n\t\t}\n\t}\n\n\treturn this.resourceStates.filter(resource => resource instanceof Resource);\n}", "CodeBleu_score": 39.67452838948506}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t\n/**\n * This function converts a URI to a file URI. If the URI is already a file URI, it returns the URI. Otherwise, it returns a new file URI with the same path as the original URI.\n */\n  public static file(uri: Uri): Uri {\n", "CodeBleu_score": 3.0225083542073024}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t\n/**\n * This function converts a URI to a file URI, if the scheme is \"svn\".\n */\n  protected fromSvnUri(uri: Uri): Uri {\n", "CodeBleu_score": 3.0225230096669997}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t\n/**\n * This function retrieves a source control management (SCM) resource for a given URI. If no URI is provided, it uses the URI of the active text editor. If the URI is in the \"svn\" scheme, it converts it to a file URI. For file URIs, it gets the source control manager and retrieves the repository for the URI, returning the corresponding resource. If no valid URI or repository is found, it returns undefined.\n */\n  public getSCMResource(uri?: Uri): Resource | undefined {\n", "CodeBleu_score": 5.8817244906814805}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\t\tconst repository = this.model.getRemoteRepository(element);\n\tif (element.status === SvnStatus.Modified) {\n\t\tconst oldUri = element.oldUri;\n\t\tconst newUri = element.uri;\n\t\tconst oldRef = element.oldRef;\n\t\tconst newRef = element.ref;\n\t\tconst oldFile = element.oldFile;\n\t\tconst newFile = element.file;\n\n\t\tconst oldUriString = oldUri.toString();\n\t\tconst newUriString = newUri.toString();\n\n\t\tconst oldRefString = oldRef.toString();\n\t\tconst newRefString = newRef.toString();\n\n\t\tconst oldFileString = oldFile.toString();\n\t\tconst newFileString = newFile.toString();\n\n\t\tconst oldUriStringFormatted = oldUriString.replace(new RegExp(oldRefString, 'g'), '<span class=\"highlight-deleted\">${oldRefString}</span>');\n\t\tconst newUriStringFormatted = newUriString.replace(new RegExp(newRefString, 'g'), '<span class=\"highlight-inserted\">${newRefString}</span>');\n\n\t\tconst oldUriStringFormattedWithFile = oldUriStringFormatted.replace(new RegExp(oldFileString, 'g'), '<span class=\"highlight-deleted\">${oldFileString}</span>');\n\t\tconst newUriStringFormattedWithFile = newUriStringFormatted.replace(new RegExp(newFileString, 'g'), '<span class=\"highlight-inserted\">${newFileString}</span>');\n\n\t\tconst oldUriStringFormattedWithFileAndRepo = oldUriStringFormattedWithFile.replace(new RegExp(repository.rootUri.toString(), 'g'), '<span class=\"highlight-deleted\">${repository.rootUri.toString()}</span>');\n\t\tconst newUriStringFormattedWithFileAndRepo = newUriStringFormattedWithFile.replace(new RegExp(repository.rootUri.toString(), 'g'), '<span class=\"highlight-inserted\">${repository.rootUri.toString()}</span>');\n\n\t\tconst oldUriStringFormattedWithFileAndRepoAndPath = oldUriStringFormattedWithFileAndRepo.replace(new RegExp(repository.path.toString(), 'g'), '<span class=\"highlight-deleted\">${repository.path.toString()}</span>');\n\t\tconst newUriStringFormattedWithFileAndRepoAndPath = newUriStringFormattedWithFileAndRepo.replace(new RegExp(repository.path.", "CodeBleu_score": 28.39410098257914}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t const repo = this.model.getRemoteRepository(element.repository);\n if (!repo) {\n throw new Error(localize('noRemoteRepository', \"No remote repository found for '{0}'.\", element.repository));\n }\n let url = repo.rootUrl;\n if (element.oldPath) {\n url += element.oldPath;\n } else {\n url += element.path;\n }\n url += '@' + element.oldRevision;\n const newUrl = repo.rootUrl + element.path + '@' + element.newRevision;\n if (element.status === SvnStatus.Modified) {\n await commands.executeCommand('vscode.diff', url, newUrl, localize('diffTitle', \"Diff {0}\", element.path));\n } else if (element.status === SvnStatus.Added) {\n await commands.executeCommand('vscode.open', Uri.parse(newUrl));\n }\n }", "CodeBleu_score": 41.233002740053216}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t const remoteRepository = this.model.getRemoteRepository(element);\n if (remoteRepository) {\n const oldPath = element.oldPath || element.path;\n const oldRevision = element.oldRevision || element.revision;\n const newPath = element.path;\n const newRevision = element.revision;\n if (element.status === SvnStatus.Modified) {\n // Open diff between old and new\n const oldUri = remoteRepository.toUri(oldPath, oldRevision);\n const newUri = remoteRepository.toUri(newPath, newRevision);\n this.openDiff(oldUri, newUri);\n } else if (element.status === SvnStatus.Added) {\n // Open file at new path and revision\n const newUri = remoteRepository.toUri(newPath, newRevision);\n this.openFileRemote(newUri);\n }\n }\n }", "CodeBleu_score": 35.30147786507612}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tconst clipboard = window.activeTextEditor?.document.getText();\n\tif (!clipboard) {\n\t\twindow.showErrorMessage('The clipboard is not supported in this environment');\n\t\treturn;\n\t}\n\tconst commit = item.commit;\n\tif (!commit) {\n\t\twindow.showErrorMessage('The item is not a commit');\n\t\treturn;\n\t}\n\tconst text = what === 'commit' ? commit.message : commit.sha;\n\tclipboard.writeText(text);\n}", "CodeBleu_score": 42.09197040582969}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!vscode.env.clipboard.writeText) {\n\t\twindow.showErrorMessage('Clipboard is not supported in the current environment');\n\t\treturn;\n\t}\n\n\tif (item.type !== 'commit') {\n\t\treturn;\n\t}\n\n\tconst commit = item.commit;\n\tif (what === 'message') {\n\t\tawait vscode.env.clipboard.writeText(commit.message);\n\t} else {\n\t\tawait vscode.env.clipboard.writeText(commit.hash.full);\n\t}\n}", "CodeBleu_score": 33.56234143330194}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!clipboard.writeText) {\n\t\twindow.showErrorMessage('The clipboard is not supported in this environment');\n\t\treturn;\n\t}\n\n\tif (item.type !== 'commit') {\n\t\twindow.showErrorMessage('The clipboard can only be set to a commit');\n\t\treturn;\n\t}\n\n\tconst commit = await git.getCommit(item.commit.sha);\n\tconst text = what === 'message' ? commit.message : commit.sha;\n\tclipboard.writeText(text);\n}", "CodeBleu_score": 40.90481800393215}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t\tGiteaConnectionFactory factory = null;\n\tfor (GiteaConnectionFactory f : getFactories()) {\n\t\tif (canOpen(f)) {\n\t\t\tfactory = f;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (factory == null) {\n\t\tthrow new IOException(\"Unable to open connection to Gitea\");\n\t}\n\treturn factory.open();\n}", "CodeBleu_score": 15.155280488762457}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t\tGiteaConnectionFactory[] factories = GiteaConnectionFactory.load();\n\tif (factories.length == 0) {\n\t\tthrow new IOException(\"No Gitea connection factories found.\");\n\t}\n\n\tGiteaConnection connection = null;\n\tfor (GiteaConnectionFactory factory : factories) {\n\t\tif (factory.canOpen()) {\n\t\t\tconnection = factory.open();\n\t\t\tif (connection != null) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (connection == null) {\n\t\tthrow new IOException(\"Could not open a Gitea connection.\");\n\t}\n\n\treturn connection;\n}", "CodeBleu_score": 23.820193773704617}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t\tGiteaConnectionFactory factory = null;\n\tfor (GiteaConnectionFactory f : ServiceLoader.load(GiteaConnectionFactory.class)) {\n\t\tif (f.canOpen(url)) {\n\t\t\tif (factory == null) {\n\t\t\t\tfactory = f;\n\t\t\t} else {\n\t\t\t\tif (f.priority() > factory.priority()) {\n\t\t\t\t\tfactory = f;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (factory == null) {\n\t\tthrow new IOException(\"No suitable GiteaConnectionFactory found for \" + url);\n\t}\n\treturn factory.open(url);\n}", "CodeBleu_score": 28.65018558820959}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tClassLoader loader = getClassLoader();\n\tif (loader == null) {\n\t\tloader = getClass().getClassLoader();\n\t}\n\tPluginManager pluginManager = getPluginManager();\n\tif (pluginManager != null) {\n\t\tpluginManager.uberClassLoader = loader;\n\t}\n\treturn this;\n}", "CodeBleu_score": 33.23127631024453}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tClassLoader classLoader = getClassLoader()\n\tif (classLoader == null) {\n\t\tclassLoader = Jenkins.get().pluginManager.uberClassLoader\n\t}\n\treturn new Gitea(classLoader)\n}", "CodeBleu_score": 36.1665201166683}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\tClassLoader classLoader = getClassLoader();\nif (classLoader == null) {\nclassLoader = Jenkins.get().pluginManager.uberClassLoader;\n}\nreturn (Gitea)classLoader.loadClass(Gitea.class.getName()).newInstance();\n}", "CodeBleu_score": 36.42380186662635}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\tthis.displayName = StringUtils.defaultIfBlank(displayName, getDisplayNameFromUrl(serverUrl));\n\tthis.serverUrl = normalizeServerUrl(serverUrl);\n\tthis.manageHooks = manageHooks;\n\tthis.credentialsId = StringUtils.defaultIfBlank(credentialsId, null);\n\tthis.aliasUrl = StringUtils.defaultIfBlank(aliasUrl, null);\n}", "CodeBleu_score": 36.499619974385766}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\tthis.displayName = displayName;\n\tthis.serverUrl = normalizeServerUrl(serverUrl);\n\tthis.manageHooks = manageHooks;\n\tthis.credentialsId = credentialsId;\n\tthis.aliasUrl = trimToNull(aliasUrl);\n\tif (manageHooks) {\n\t\tif (credentialsId == null) {\n\t\t\tthrow new IllegalArgumentException(\"Credentials ID is required when managing hooks\");\n\t\t}\n\t}\n\telse {\n\t\tcredentialsId = null;\n\t}\n\tif (displayName == null) {\n\t\tdisplayName = fromUrl(serverUrl);\n\t}\n}", "CodeBleu_score": 36.75879248105141}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\tthis.displayName = displayName;\n\tthis.serverUrl = normalizeServerUrl(serverUrl);\n\tthis.manageHooks = manageHooks;\n\tthis.credentialsId = credentialsId;\n\tthis.aliasUrl = normalizeServerUrl(aliasUrl);\n}", "CodeBleu_score": 28.459364697653623}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tListBoxModel items = new ListBoxModel();\n\ttry {\n\t\tif (!checkPermission(serverUrl)) {\n\t\t\titems.add(\"No credentials found\", \"\");\n\t\t\treturn items;\n\t\t}\n\t\tserverUrl = normalizeServerUrl(serverUrl);\n\t\tList<GiteaAuth> credentials = includeMatchingAs(GiteaAuth.all(), serverUrl);\n\t\tfor (GiteaAuth cred : credentials) {\n\t\t\titems.add(cred.getCredentialsDescription(), cred.getId());\n\t\t}\n\t} catch (Exception e) {\n\t\titems.add(\"Error loading credentials: \" + e.getMessage(), \"\");\n\t}\n\treturn items;\n}", "CodeBleu_score": 37.46053226654057}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tListBoxModel items = new ListBoxModel();\n\tif (checkPermission(serverUrl)) {\n\t\titems.add(\"Select a credential\", \"\");\n\t\titems.add(\"Create a new credential\", \"new\");\n\t\ttry {\n\t\t\tserverUrl = normalizeServerUrl(serverUrl);\n\t\t\tList<GiteaAuth> auths = get(serverUrl + \"/api/v1/users/\" + getUsername() + \"/tokens\");\n\t\t\tfor (GiteaAuth auth : auths) {\n\t\t\t\tif (auth.getScopes().contains(\"repo\")) {\n\t\t\t\t\titems.add(auth.getName(), auth.getId());\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\titems.add(\"Error loading credentials\", \"\");\n\t\t}\n\t} else {\n\t\titems.add(\"Insufficient permissions\", \"\");\n\t}\n\treturn items;\n}", "CodeBleu_score": 31.680599073568505}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tListBoxModel items = new ListBoxModel();\n\tif (checkPermission()) {\n\t\ttry {\n\t\t\tserverUrl = normalizeServerUrl(serverUrl);\n\t\t\titems.add(includeMatchingAs(get(serverUrl)), serverUrl);\n\t\t} catch (Exception e) {\n\t\t\titems.add(e.getMessage(), serverUrl);\n\t\t}\n\t}\n\treturn items;\n}", "CodeBleu_score": 32.52003536115455}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\n\ttry {\n\t\tURI uri = new URI(serverUrl);\n\t\tString scheme = uri.getScheme();\n\t\tString host = uri.getHost();\n\t\tint port = uri.getPort();\n\t\tString path = uri.getPath();\n\t\tString query = uri.getQuery();\n\t\tString fragment = uri.getFragment();\n\t\tString userInfo = uri.getUserInfo();\n\n\t\tif (scheme == null) {\n\t\t\tthrow new URISyntaxException(serverUrl, \"No scheme\");\n\t\t}\n\n\t\tif (host == null) {\n\t\t\tthrow new URISyntaxException(serverUrl, \"No host\");\n\t\t}\n\n\t\tif (path == null) {\n\t\t\tpath = \"\";\n\t\t}\n\n\t\tif (query == null) {\n\t\t\tquery = \"\";\n\t\t}\n\n\t\tif (fragment == null) {\n\t\t\tfragment = \"\";\n\t\t}\n\n\t\tif (userInfo == null) {\n\t\t\tuserInfo = \"\";\n\t\t}\n\n\t\tif (port == -1) {\n\t\t\tport = getPort(scheme);\n\t\t}\n\n\t\tif (port == getPort(scheme)) {\n\t\t\tport = -1;\n\t\t}\n\n\t\tStringBuilder builder = new StringBuilder();\n\t\tbuilder.append(scheme);\n\t\tbuilder.append(\"://\");\n\t\tbuilder.append(host);\n\n\t\tif (port != -1) {\n\t\t\tbuilder.append(\":\");\n\t\t\tbuilder.append(port);\n\t\t}\n\n\t\tbuilder.append(path);\n\t\tbuilder.append(\"?\");\n\t\tbuilder.append(query);\n\t\tbuilder.append(\"#\");\n\t\tbuilder.append(fragment);\n\t\tbuilder.append(\"@\");\n\t\tbuilder.append(userInfo);\n\n\t\treturn builder.toString();\n\t} catch (URISyntaxException e) {\n\t\treturn serverUrl;\n\t}\n}", "CodeBleu_score": 37.1316601175766}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\nreturn null;\n}\ntry {\nURI uri = new URI(serverUrl.toLowerCase());\nint port = uri.getPort();\nif (port == -1) {\nif (\"http\".equals(uri.getScheme())) {\nport = 80;\n} else if (\"https\".equals(uri.getScheme())) {\nport = 443;\n}\n}\nif (port == 80 && \"http\".equals(uri.getScheme())) {\nport = -1;\n} else if (port == 443 && \"https\".equals(uri.getScheme())) {\nport = -1;\n}\nif (port != -1) {\nuri = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), port, uri.getPath(), uri.getQuery(), uri.getFragment());\n}\nreturn uri.toString().replaceAll(\"/$\", \"\");\n} catch (URISyntaxException ex) {\n}\nreturn serverUrl.replaceAll(\"/$\", \"\");\n}", "CodeBleu_score": 41.51893199675908}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\nreturn null;\n}\ntry {\nURI uri = new URI(serverUrl.toLowerCase());\nif (uri.getPort() == -1) {\nif (\"http\".equals(uri.getScheme())) {\nuri = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), 80, uri.getPath(), uri.getQuery(), uri.getFragment());\n} else if (\"https\".equals(uri.getScheme())) {\nuri = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), 443, uri.getPath(), uri.getQuery(), uri.getFragment());\n}\n}\nString path = uri.getPath();\nif (path != null && path.endsWith(\"/\")) {\nuri = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), path.substring(0, path.length() - 1), uri.getQuery(), uri.getFragment());\n}\nreturn uri.toString();\n} catch (URISyntaxException e) {\n// Ignore\n}\nreturn serverUrl;\n}", "CodeBleu_score": 36.88074560404245}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\tListBoxModel items = new ListBoxModel();\nfor (GiteaServer server : getServers()) {\nif (isBlank(server.getDisplayName())) {\nitems.add(server.getUrl());\n} else {\nitems.add(server.getDisplayName(), server.getUrl());\n}\n}\nreturn items;\n}", "CodeBleu_score": 35.32184508284686}, {"code": "public ListBoxModel getServerItems(){\n\tListBoxModel items = new ListBoxModel();\nList<GiteaServer> servers = getServers();\nfor (GiteaServer server : servers) {\nString url = server.getUrl();\nString displayName = server.getDisplayName();\nif (StringUtils.isBlank(displayName)) {\ndisplayName = url;\n}\nitems.add(displayName, url);\n}\nreturn items;\n}", "CodeBleu_score": 46.42661154983081}, {"code": "public ListBoxModel getServerItems(){\n\tListBoxModel items = new ListBoxModel();\nfor (GiteaServer server : getServers()) {\nString serverUrl = server.getServerUrl();\nString displayName = server.getDisplayName();\nif (StringUtils.isBlank(displayName)) {\ndisplayName = serverUrl;\n}\nitems.add(displayName, serverUrl);\n}\nreturn items;\n}", "CodeBleu_score": 54.227548570479264}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tif (servers == null) {\n\t\treturn;\n\t}\n\n\t// Remove duplicates and empty URLs\n\tservers = servers.stream()\n\t\t.filter(Objects::nonNull)\n\t\t.filter(server -> !server.getUrl().isEmpty())\n\t\t.distinct()\n\t\t.collect(Collectors.toList());\n\n\t// Check permissions\n\tfor (GiteaServer server : servers) {\n\t\tif (server.getAdminUser() == null) {\n\t\t\tthrow new IllegalArgumentException(\"Admin user must be specified for all servers\");\n\t\t}\n\n\t\tif (!checkPermission(server.getAdminUser(), Permission.ADMINISTER)) {\n\t\t\tthrow new IllegalArgumentException(\"User \" + server.getAdminUser().getName() + \" does not have admin permission\");\n\t\t}\n\t}\n\n\t// Update servers\n\tthis.servers = servers;\n\n\t// Save configuration\n\tsave();\n}", "CodeBleu_score": 31.424456175394482}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tif (servers == null) {\n\t\treturn;\n\t}\n\tif (!Jenkins.ADMINISTER.equals(Jenkins.getAuthentication())) {\n\t\tthrow new AccessDeniedException(Jenkins.getAuthentication().getName());\n\t}\n\tSet<GiteaServer> serversSet = new LinkedHashSet<>();\n\tfor (GiteaServer server : servers) {\n\t\tif (server != null && !server.getUrl().isEmpty()) {\n\t\t\tserversSet.add(server);\n\t\t}\n\t}\n\tif (serversSet.isEmpty()) {\n\t\treturn;\n\t}\n\tthis.servers = new ArrayList<>(serversSet);\n\tsave();\n}", "CodeBleu_score": 32.32685633524313}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tif (servers == null) {\n\t\tservers = new ArrayList<>();\n\t}\n\tcheckPermission();\n\tservers = fixNull(servers);\n\tservers = listIterator(servers);\n\tservers = new ArrayList<>(new LinkedHashSet<>(servers));\n\tservers = listIterator(servers);\n\tservers = servers.stream().filter(server -> !server.getUrl().isEmpty()).collect(Collectors.toList());\n\tsetServers(servers);\n}", "CodeBleu_score": 30.639619154089427}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\nreturn false;\n}\n\nserverUrl = normalizeServerUrl(serverUrl);\n\nfor (Iterator<GiteaServer> iterator = getServers().iterator(); iterator.hasNext();) {\nGiteaServer server = iterator.next();\nif (serverUrl.equals(server.getServerUrl())) {\niterator.remove();\nreturn true;\n}\n}\n\nreturn false;\n}", "CodeBleu_score": 40.32624082886163}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\nreturn false;\n}\nserverUrl = normalizeServerUrl(serverUrl);\nfor (Iterator<GiteaServer> iterator = getServers().iterator(); iterator.hasNext();) {\nGiteaServer server = iterator.next();\nif (serverUrl.equals(server.getUrl())) {\niterator.remove();\nreturn true;\n}\n}\nreturn false;\n}", "CodeBleu_score": 40.05525948271188}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\nreturn false;\n}\nserverUrl = normalizeServerUrl(serverUrl);\nfor (Iterator<Server> it = servers.iterator(); it.hasNext();) {\nServer server = it.next();\nif (serverUrl.equals(server.getUrl())) {\nit.remove();\nreturn true;\n}\n}\nreturn false;\n}", "CodeBleu_score": 33.10313036950588}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t\tSet<? extends Element> annotatedElements = roundEnv.getElementsAnnotatedWith(annotation);\n\tfor (Element annotatedElement : annotatedElements) {\n\t\tConfigElement configElement = new ConfigElement();\n\t\tconfigElement.setElement(annotatedElement);\n\t\tconfigElement.setType(asType(annotatedElement.asType()));\n\t\tconfigElement.setAttributes(getAttributesFromAnnotation(annotatedElement, annotation));\n\t\tdescriptorElements.add(configElement);\n\t}\n}", "CodeBleu_score": 48.618116324756386}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t\tSet<? extends Element> annotatedElements = roundEnv.getElementsAnnotatedWith(annotation);\n\tfor (Element annotatedElement : annotatedElements) {\n\t\tConfigElement configElement = new ConfigElement();\n\t\tconfigElement.setAnnotationAttributes(getAnnotationAttributes(annotatedElement, annotation));\n\t\tconfigElement.setAsType(asType(annotatedElement.asType()));\n\t\tconfigElement.setToString(toString(annotatedElement));\n\t\tdescriptorElements.add(configElement);\n\t}\n}", "CodeBleu_score": 49.04978748670106}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t\tSet<? extends Element> annotatedElements = roundEnv.getElementsAnnotatedWith(annotation);\n\tfor (Element element : annotatedElements) {\n\t\tConfigElement configElement = new ConfigElement();\n\t\tconfigElement.setAnnotationAttributes(element.getAnnotationMirrors());\n\t\tconfigElement.setType(element.asType().toString());\n\t\tdescriptorElements.add(configElement);\n\t}\n}", "CodeBleu_score": 45.25775218270528}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\tfor (TypeElement annotation : annotations) {\n\t\tString qualifiedName = annotation.getQualifiedName().toString();\n\t\tif (qualifiedName.equals(annotationClass.getCanonicalName())) {\n\t\t\treturn annotation;\n\t\t} else if (qualifiedName.startsWith(annotationClass.getPackage().getName())) {\n\t\t\tString shortName = qualifiedName.substring(annotationClass.getPackage().getName().length() + 1);\n\t\t\tif (shortName.equals(annotationClass.getSimpleName())) {\n\t\t\t\treturn annotation;\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 33.05692862907883}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\tString annotationClassName = annotationClass.getCanonicalName();\n\tfor (TypeElement annotation : annotations) {\n\t\tif (annotation.getQualifiedName().toString().replace(\"$\", \".\").equals(annotationClassName)) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 49.363360334289304}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\tfor (TypeElement annotation : annotations) {\n\t\tString qualifiedName = annotation.getQualifiedName().toString();\n\t\tif (qualifiedName.equals(annotationClass.getCanonicalName()) || qualifiedName.replace(\"$\", \".\").equals(annotationClass.getCanonicalName())) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 40.78905883170309}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n    }\n    if for_approval:\n        filters.update(\n            {\n                \"status\": \"Open\",\n                \"name\": [\n                    \"!=\",\n                    frappe.db.get_value(\n                        \"Leave Application\",\n                        filters={\n                            \"employee\": employee,\n                            \"status\": \"Open\",\n                        },\n                        fieldname=\"name\",\n                    ),\n                ],\n            }\n        )\n    else:\n        filters.update({\"status\": [\"!=\", \"Cancelled\"]})\n    if approver_id:\n        filters.update({\"leave_approver\": approver_id})\n    return filters\n\n", "CodeBleu_score": 23.964002629455738}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"docstatus\": 1,\n        \"employee\": employee,\n    }\n\n    if for_approval:\n        filters.update(\n            {\n                \"status\": (\"!=\", \"Approved\"),\n                \"status\": (\"!=\", \"Rejected\"),\n                \"status\": (\"!=\", \"Cancelled\"),\n            }\n        )\n\n    if approver_id:\n        filters.update({\"approver_id\": approver_id})\n\n    return filters\n\n", "CodeBleu_score": 24.96770822353353}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"employee\": employee,\n        \"status\": [\"!=\", \"Cancelled\"],\n    }\n    if for_approval:\n        filters[\"status\"] = \"Open\"\n        filters[\"leave_approver\"] = [\"!=\", approver_id] if approver_id else [\"!=\", employee]\n    return filters\n\n", "CodeBleu_score": 21.1439711911899}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    leave_details = get_leave_details(employee)\n    current_date = getdate()\n    leave_balance_map = {}\n    for leave_type, leave_details_dict in leave_details.items():\n        leave_balance_map[leave_type] = {}\n        leave_balance_map[leave_type][\"allocated\"] = leave_details_dict[\"allocated\"]\n        leave_balance_map[leave_type][\"balance\"] = leave_details_dict[\"allocated\"] - get_leave_balance(\n            employee, leave_type, current_date\n        )\n    return leave_balance_map\n\n", "CodeBleu_score": 37.85007180699086}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    leave_details = get_leave_details(employee)\n    leave_balance_map = {}\n    for leave_type, details in leave_details.items():\n        leave_balance_map[leave_type] = {}\n        leave_balance_map[leave_type][\"allocated\"] = details.get(\"allocated\")\n        leave_balance_map[leave_type][\"balance\"] = details.get(\"balance\")\n    return leave_balance_map\n\n", "CodeBleu_score": 38.94089502444469}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    leave_details = get_leave_details(employee)\n    leave_balance_map = {}\n    for leave_type, details in leave_details.items():\n        leave_balance_map[leave_type] = {\n            \"allocated\": details.get(\"allocated\"),\n            \"balance\": details.get(\"balance\"),\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 40.20087092869836}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n\n    holiday_list = frappe.db.sql(\n        \"\"\"\n        select holiday_list\n        from `tabHoliday List Employee`\n        where employee=%s\n        \"\"\",\n        (employee,),\n        as_dict=True,\n    )\n\n    if holiday_list:\n        holiday_list = holiday_list[0].holiday_list\n        holidays = frappe.db.sql(\n            \"\"\"\n            select holiday_date, description\n            from `tabHoliday`\n            where holiday_list=%s\n            and weekly_off=0\n            order by holiday_date\n            \"\"\",\n            (holiday_list,),\n            as_dict=True,\n        )\n\n        for holiday in holidays:\n            holiday.description = strip_html(holiday.description)\n\n        return holidays\n    else:\n        return []\n", "CodeBleu_score": 30.35261274563419}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.db.get_list(\"Holiday List\", filters={\"employee\": employee}, fields=[\"name\"])\n    if holiday_list:\n        holidays = frappe.db.sql(\n            \"\"\"\n            select\n                name,\n                holiday_date,\n                description,\n                weekly_off\n            from\n                `tabHoliday`\n            where\n                parent = %(holiday_list)s\n                and weekly_off = 0\n            order by\n                holiday_date\n            \"\"\",\n            values={\"holiday_list\": holiday_list[0].name},\n            as_dict=True,\n        )\n        for holiday in holidays:\n            holiday[\"description\"] = strip_html(holiday[\"description\"])\n        return holidays\n    else:\n        return []\n", "CodeBleu_score": 34.45127778315851}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.db.get_list(\n        \"Holiday List\",\n        filters={\"employee\": employee},\n        fields=[\"name\"],\n        order_by=\"name asc\",\n    )\n    if not holiday_list:\n        return []\n    holiday_list = frappe.db.get_list(\n        \"Holiday\",\n        filters={\"parent\": (\"in\", [x.name for x in holiday_list])},\n        fields=[\"*\"],\n        order_by=\"holiday_date asc\",\n    )\n    for holiday in holiday_list:\n        holiday.description = strip_html(holiday.description)\n    return holiday_list\n", "CodeBleu_score": 33.0155708823224}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t\n    holiday_list = get_holidays()\n    if not holiday_list:\n        return\n    holiday_reminders = frappe.get_doc(\"Holiday Reminder Settings\")\n    if not holiday_reminders.send_weekly_reminder:\n        return\n    if holiday_reminders.frequency == \"Weekly\":\n        send_advance_holiday_reminders(holiday_list, holiday_reminders)\n\n", "CodeBleu_score": 28.167358557412914}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    weekly_frequency = get_single_value(\n        'Holiday Reminder Frequency')\n    weekly_day = get_single_value(\n        'Holiday Reminder Day')\n    weekly_time = get_single_value(\n        'Holiday Reminder Time')\n    weekly_time = datetime.strptime(weekly_time, '%H:%M:%S').time()\n    if weekly_frequency == 'Weekly' and weekly_day and weekly_time:\n        send_advance_holiday_reminders(weekly_day, weekly_time)\n\n", "CodeBleu_score": 33.170055951646184}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    holiday_reminders_enabled = frappe.db.get_single_value(\"HR Settings\", \"send_weekly_holiday_reminders\")\n    if holiday_reminders_enabled:\n        holiday_reminders_frequency = frappe.db.get_single_value(\"HR Settings\", \"weekly_holiday_reminders_frequency\")\n        if holiday_reminders_frequency == \"Weekly\":\n            send_advance_holiday_reminders()\n", "CodeBleu_score": 38.74703932064319}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t\n    self.self_appraisal_score = 0\n    for self_rating in self.self_rating_set.all():\n        self.self_appraisal_score += (self_rating.rating * self_rating.weightage) / 100\n    self.self_appraisal_score = round(self.self_appraisal_score, self.precision)\n    flt(self.self_appraisal_score, self.precision)\n\n", "CodeBleu_score": 24.685720078033462}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self.self_appraisal_score = 0\n    for self_rating in self.self_ratings:\n        self.self_appraisal_score += self_rating.rating * self_rating.weightage\n    self.self_appraisal_score = round(self.self_appraisal_score, self.precision)\n    flt(self.self_appraisal_score)\n    return self.self_appraisal_score\n", "CodeBleu_score": 20.57580937773245}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self.self_appraisal_score = 0\n    for self_rating in self.self_ratings:\n        self.self_appraisal_score += self_rating.rating * self_rating.weightage\n    self.self_appraisal_score = round(self.self_appraisal_score, self.precision)\n\n", "CodeBleu_score": 20.43576159544275}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle_doc = frappe.get_cached_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle_doc.formula:\n        data = self.as_dict()\n        data.update(frappe.get_cached_doc(\"Employee\", self.employee).as_dict())\n        data.update(appraisal_cycle_doc.as_dict())\n        sanitized_formula = sanitize_expression(appraisal_cycle_doc.formula)\n        final_score = frappe.safe_eval(sanitized_formula, None, data)\n        self.db_set(\"final_score\", flt(final_score, self.precision))\n    else:\n        self.db_set(\n            \"final_score\",\n            flt(\n                (\n                    self.total_score\n                    + self.average_feedback_score\n                    + self.self_appraisal_score\n                )\n                / 3,\n                self.precision,\n            ),\n        )\n", "CodeBleu_score": 35.35012797120748}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle_doc = frappe.get_cached_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle_doc.final_score_formula:\n        # gather necessary data\n        employee_doc = frappe.get_cached_doc(\"Employee\", self.employee)\n        self_rating_doc = frappe.get_cached_doc(\"Appraisal Self Rating\", self.name)\n        # sanitize formula\n        sanitized_formula = sanitize_expression(appraisal_cycle_doc.final_score_formula)\n        # evaluate formula\n        data = {\n            \"employee\": employee_doc.as_dict(),\n            \"self\": self_rating_doc.as_dict(),\n            \"appraisal_cycle\": appraisal_cycle_doc.as_dict(),\n        }\n        final_score = frappe.safe_eval(sanitized_formula, None, data)\n        # set final score\n        self.final_score = flt(final_score, self.precision)\n    else:\n        # calculate final score as the average of the total score, average feedback score, and self-appraisal score\n        self.final_score = (\n            (self.total_score + self.average_feedback_score + self.self_rating_score)\n            / 3\n            if self.total_score or self.average_feedback_score or self.self_rating_score\n            else None\n        )\n    # set final score precision\n    self.final_score = flt(self.final_score, self.precision)\n    # update database\n    self.save()\n    frappe.db.commit()\n    return self.final_score\n", "CodeBleu_score": 45.52189176202665}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle_doc = frappe.get_cached_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle_doc.formula:\n        data = self.get_data_for_formula()\n        formula = appraisal_cycle_doc.formula\n        formula = sanitize_expression(formula)\n        score = frappe.safe_eval(formula, None, data)\n        score = flt(score, self.precision)\n        self.final_score = score\n    else:\n        self.final_score = self.get_average_score()\n    self.db_update()\n", "CodeBleu_score": 22.601037501305303}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date and getdate(self.attendance_date) > getdate(nowdate()):\n        frappe.throw(_(\"Attendance date cannot be a future date.\"))\n    if self.attendance_date and getdate(self.attendance_date) < getdate(self.employee.date_of_joining):\n        frappe.throw(_(\"Attendance date cannot be before employee's joining date.\"))\n    if self.status == \"Present\" and self.attendance_date:\n        attendance = frappe.db.sql(\"\"\"select name from `tabAttendance` where employee = %s and attendance_date = %s and docstatus = 1\"\"\", (self.employee, self.attendance_date))\n        if attendance:\n            frappe.throw(_(\"Attendance already marked for employee {0} on {1}\").format(self.employee, formatdate(self.attendance_date)))\n\n", "CodeBleu_score": 42.46473373722572}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > getdate():\n        if self.status != \"On Leave\":\n            frappe.throw(_(\"Attendance date cannot be a future date.\"))\n    if self.attendance_date < self.employee.date_of_joining:\n        frappe.throw(_(\"Attendance date cannot be before employee's joining date.\"))\n", "CodeBleu_score": 18.95811566983745}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > getdate(nowdate()):\n        frappe.throw(_(\"Attendance date cannot be a future date.\"))\n    if self.attendance_date < self.employee_date_of_joining:\n        frappe.throw(\n            _(\"Attendance date cannot be before employee's joining date.\"))\n    if self.status == \"On Leave\" and not self.leave_application:\n        frappe.throw(\n            _(\"Please create a leave application before changing attendance status to 'On Leave'.\"))\n\n", "CodeBleu_score": 26.701591186032374}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\t\n    attendance_records = frappe.db.sql(\"\"\"SELECT name FROM `tabAttendance` WHERE employee = %s AND attendance_date = %s AND docstatus < 2\"\"\", (self.employee, self.attendance_date), as_dict=True)\n    if len(attendance_records) > 0:\n        attendance_record_link = get_link_to_form(\"Attendance\", attendance_records[0].name)\n        frappe.throw(_(\"Attendance record already exists for employee {0} on {1}.\").format(self.employee, format_date(self.attendance_date)) + \"<br><br>\" + _(\"View Attendance Record:\") + \" \" + attendance_record_link)\n", "CodeBleu_score": 38.48609883296513}, {"code": "def validate_duplicate_record(self)\n\t\n    if self.name:\n        # Don't check for duplicates if the attendance record is being edited\n        return\n\n    # Get all attendance records for the employee on the given date\n    attendance_records = frappe.db.sql(\"\"\"select name from `tabAttendance` where employee=%s and attendance_date=%s\"\"\", (self.employee, self.attendance_date))\n\n    if len(attendance_records) > 1:\n        # If multiple records are found, get the link to the existing attendance record\n        existing_attendance_record = get_link_to_form(\"Attendance\", attendance_records[0][0])\n\n        # Raise an exception with a message indicating the employee, the date, and the link to the existing attendance record\n        frappe.throw(_(\"Attendance record already exists for employee {0} on {1}. {2}\").format(format_date(self.attendance_date), self.employee, existing_attendance_record))\n\n", "CodeBleu_score": 39.98139543076511}, {"code": "def validate_duplicate_record(self)\n\t\n    if frappe.db.exists(\n        \"Attendance\",\n        {\n            \"employee\": self.employee,\n            \"attendance_date\": self.attendance_date,\n            \"docstatus\": (\"!=\", 2),\n        },\n    ):\n        attendance_record = frappe.get_doc(\n            \"Attendance\",\n            {\n                \"employee\": self.employee,\n                \"attendance_date\": self.attendance_date,\n                \"docstatus\": (\"!=\", 2),\n            },\n        )\n        frappe.throw(\n            _(\n                \"Attendance record already exists for employee {0} on {1}. <br><br>Please refer <a href='{2}'>here</a> for more details.\"\n            ).format(\n                get_link_to_form(\"Employee\", self.employee),\n                format_date(self.attendance_date),\n                get_link_to_form(\"Attendance\", attendance_record.name),\n            ),\n            title=_(\"Duplicate Attendance Record\"),\n        )\n", "CodeBleu_score": 34.86178511810927}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t\"\"\n    message_details = self.get_message_details()\n    if not message_details:\n        frappe.msgprint(_(\"No replies to send\"))\n        return\n    emails = get_user_emails_from_group(self.group)\n    if not emails:\n        frappe.msgprint(_(\"No recipients found\"))\n        return\n    message = self.get_message_content(message_details)\n    frappe.sendmail(\n        recipients=emails,\n        subject=self.subject,\n        message=message,\n        reference_doctype=self.doctype,\n        reference_name=self.name,\n    )\n    self.db_set(\"status\", \"Sent\")\n\n", "CodeBleu_score": 43.03879139704233}, {"code": "def send_summary(self)\n\t\n    message_details = self.get_message_details()\n    if message_details:\n        group_emails = get_user_emails_from_group(self.group)\n        if group_emails:\n            frappe.sendmail(\n                recipients=group_emails,\n                subject=self.subject,\n                message=self.message,\n                reference_doctype=self.doctype,\n                reference_name=self.name\n            )\n            self.db_set(\"status\", \"Sent\")\n", "CodeBleu_score": 37.94183399762679}, {"code": "def send_summary(self)\n\t\n    if self.status == \"Scheduled\":\n        message_details = self.get_message_details()\n        user_emails = self.get_user_emails_from_group()\n        if user_emails and message_details:\n            email_args = {\n                \"recipients\": user_emails,\n                \"message\": _(message_details),\n                \"subject\": _(\"Daily Summary of Replies to a Group\"),\n                \"reference_doctype\": self.doctype,\n                \"reference_name\": self.name,\n            }\n            frappe.sendmail(**email_args)\n            self.db_set(\"status\", \"Sent\")\n", "CodeBleu_score": 41.71625521167316}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t\n    # Get all interview records for the job applicant in the same interview round\n    interview_records = frappe.get_all(\n        \"Interview\",\n        filters={\n            \"job_applicant\": self.job_applicant,\n            \"interview_round\": self.interview_round,\n            \"docstatus\": 1,\n        },\n        fields=[\"name\"],\n    )\n    # If a duplicate is found, raise an exception\n    if len(interview_records) > 0:\n        # Get the name of the existing interview record\n        existing_interview_record_name = interview_records[0].name\n        # Get the name of the interview round\n        interview_round_name = frappe.get_value(\n            \"Interview Round\", self.interview_round, \"interview_round_name\"\n        )\n        # Get the name of the job applicant\n        job_applicant_name = frappe.get_value(\n            \"Job Applicant\", self.job_applicant, \"applicant_name\"\n        )\n        # Get the name of the job opening\n        job_opening_name = frappe.get_value(\n            \"Job Opening\", self.job_applicant, \"job_title\"\n        )\n        # Get the name of the company\n        company_name = frappe.get_value(\n            \"Job Opening\", self.job_applicant, \"company_name\"\n        )\n        # Raise an exception\n        frappe.throw(\n            _(\n                f\"\"\"This job applicant has already been interviewed for {interview_round_name} at {company_name}. <br> <br> <b>Job Opening:</b> {job_opening_name} <br> <b>Job Applicant:</b> {job_applicant_name} <br> <b>Interview Record:</b> {get_link_to_form(\"Interview\", existing_interview_record_name)}\"\"\"\n            )\n        )\n", "CodeBleu_score": 39.60164467381667}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.job_applicant:\n        interview = frappe.db.sql(\"\"\"SELECT name, job_applicant, interview_round FROM `tabInterview` WHERE job_applicant = %s AND interview_round = %s AND docstatus != 2\"\"\", (self.job_applicant, self.interview_round), as_dict = 1)\n        if interview:\n            if interview[0].name != self.name:\n                frappe.throw(_(\"Job Applicant {0} has already been interviewed for the selected interview round. Please check the existing interview record {1} for the details of the interview.\").format(get_link_to_form(\"Job Applicant\", self.job_applicant), get_link_to_form(\"Interview\", interview[0].name)), DuplicateInterviewError)\n\n", "CodeBleu_score": 40.36531920942077}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.job_applicant:\n        if frappe.db.exists(\n            \"Interview\",\n            {\n                \"job_applicant\": self.job_applicant,\n                \"interview_round\": self.interview_round,\n                \"docstatus\": 1,\n            },\n        ):\n            frappe.throw(\n                _(\n                    \"The job applicant {0} has already been scheduled for interview in this round. Please check the existing interview record <a href='#Form/Interview/{1}'>{1}</a> or the job applicant's information <a href='#Form/Job Applicant/{2}'>{2}</a>.\"\n                ).format(\n                    get_link_to_form(\"Job Applicant\", self.job_applicant),\n                    frappe.db.exists(\n                        \"Interview\",\n                        {\n                            \"job_applicant\": self.job_applicant,\n                            \"interview_round\": self.interview_round,\n                            \"docstatus\": 1,\n                        },\n                    ),\n                    self.job_applicant,\n                ),\n                title=\"Duplicate Interview\",\n            )\n", "CodeBleu_score": 32.035413505219445}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\t\n    self.average_rating = 0\n    if len(self.skill_assessments) > 0:\n        ratings = [x.rating for x in self.skill_assessments if x.rating is not None]\n        self.average_rating = sum(ratings) / len(ratings)\n\n", "CodeBleu_score": 34.848352676227954}, {"code": "def calculate_average_rating(self)\n\t\n    total_rating = 0\n    num_ratings = 0\n    for assessment in self.skill_assessments.all():\n        if assessment.rating is not None:\n            total_rating += assessment.rating\n            num_ratings += 1\n    if num_ratings == 0:\n        self.average_rating = 0\n    else:\n        self.average_rating = total_rating / num_ratings\n    self.save()\n\n", "CodeBleu_score": 23.217751909161013}, {"code": "def calculate_average_rating(self)\n\t\n    total = 0\n    count = 0\n    for assessment in self.assessments.all():\n        if assessment.rating:\n            total += assessment.rating\n            count += 1\n    if count > 0:\n        self.average_rating = total / count\n    else:\n        self.average_rating = 0\n    self.save()\n\n", "CodeBleu_score": 27.26754059565345}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    interview = frappe.new_doc(\"Interview\")\n    interview.designation = doc[\"designation\"]\n    interview.interview_round = doc[\"interview_round\"]\n    if doc[\"interviewers\"]:\n        for interviewer in doc[\"interviewers\"]:\n            interview.append(\"interviewers\", {\"interviewer\": interviewer})\n    return interview\n", "CodeBleu_score": 50.716273808253}, {"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    if isinstance(doc, str):\n        interview_details = json.loads(doc)\n    elif isinstance(doc, dict):\n        interview_details = doc\n    interview.interview_round = interview_details[\"interview_round\"]\n    interview.designation = interview_details[\"designation\"]\n    if \"interviewers\" in interview_details:\n        for interviewer in interview_details[\"interviewers\"]:\n            interview.append(\"interviewers\", {\"interviewer\": interviewer})\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 40.77215031594573}, {"code": "def create_interview(doc):\n\t\n    # If the input is a string, it is converted to a dictionary.\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    # If the input is a dictionary, it is converted to a frappe document.\n    if isinstance(doc, dict):\n        doc = frappe.new_doc(\"Interview\")\n        doc.designation = doc[\"designation\"]\n        doc.interview_round = doc[\"interview_round\"]\n        if \"interviewers\" in doc:\n            for interviewer in doc[\"interviewers\"]:\n                doc.append(\"interview_details\", {\n                    \"interviewer\": interviewer[\"interviewer\"],\n                    \"interview_round\": doc[\"interview_round\"],\n                    \"designation\": doc[\"designation\"]\n                })\n    # The function returns the created document.\n    return doc\n\n", "CodeBleu_score": 42.6866539860122}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\t\n    return frappe.db.sql(\"\"\"SELECT name FROM `tabJob Offer` WHERE designation = %s AND company = %s AND posting_date BETWEEN %s AND %s AND status = 1\"\"\", (self.designation, self.company, from_date, to_date), as_dict=1)\n\n", "CodeBleu_score": 27.638584384311137}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    return frappe.db.sql(\"\"\"select name from `tabJob Offer` where designation = %s and company = %s and creation between %s and %s and docstatus = 1\"\"\", (self.designation, self.company, from_date, to_date), as_dict=1)\n\n", "CodeBleu_score": 27.677734104430673}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    return frappe.db.sql(\"\"\"SELECT name FROM `tabJob Offer` WHERE designation = %s AND company = %s AND status = 1 AND posting_date BETWEEN %s AND %s\"\"\", (self.designation, self.company, from_date, to_date), as_dict=True)\n\n", "CodeBleu_score": 27.561011199450334}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if company:\n        offer_count = frappe.db.count(\"Job Offer\", {\"company\": company, \"status\": \"Accepted\"})\n    elif department:\n        offer_count = frappe.db.count(\"Job Offer\", {\"department\": department, \"status\": \"Accepted\"})\n    else:\n        offer_count = frappe.db.count(\"Job Offer\", {\"status\": \"Accepted\"})\n    if offer_count == 0:\n        return 0\n    else:\n        return round(flt(offer_count / flt(get_job_offer_count(company, department)), 2) * 100, 2)\n\n", "CodeBleu_score": 30.52386038197192}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if company:\n        count = frappe.db.count(\"Job Offer\", filters={\"company\": company, \"status\": \"Accepted\", \"docstatus\": 1})\n        flt = frappe.db.get_value(\"Company\", company, \"field_type\")\n    elif department:\n        count = frappe.db.count(\"Job Offer\", filters={\"department\": department, \"status\": \"Accepted\", \"docstatus\": 1})\n        flt = frappe.db.get_value(\"Department\", department, \"field_type\")\n    else:\n        count = frappe.db.count(\"Job Offer\", filters={\"status\": \"Accepted\", \"docstatus\": 1})\n        flt = \"Percent\"\n    return flt, (count / frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1})) * 100\n\n", "CodeBleu_score": 34.931929419443954}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if not company and not department:\n        return frappe.db.sql(\"\"\"SELECT COUNT(name) AS count,\n            SUM(CASE WHEN offer_acceptance = 1 THEN 1 ELSE 0 END) AS accepted\n            FROM `tabJob Offer`\n            WHERE offer_acceptance IS NOT NULL AND docstatus = 1\"\"\")\n    elif company and not department:\n        return frappe.db.sql(\"\"\"SELECT COUNT(name) AS count,\n            SUM(CASE WHEN offer_acceptance = 1 THEN 1 ELSE 0 END) AS accepted\n            FROM `tabJob Offer`\n            WHERE offer_acceptance IS NOT NULL AND company = %s AND docstatus = 1\"\"\", company)\n    elif not company and department:\n        return frappe.db.sql(\"\"\"SELECT COUNT(name) AS count,\n            SUM(CASE WHEN offer_acceptance = 1 THEN 1 ELSE 0 END) AS accepted\n            FROM `tabJob Offer`\n            WHERE offer_acceptance IS NOT NULL AND department = %s AND docstatus = 1\"\"\", department)\n    else:\n        return frappe.db.sql(\"\"\"SELECT COUNT(name) AS count,\n            SUM(CASE WHEN offer_acceptance = 1 THEN 1 ELSE 0 END) AS accepted\n            FROM `tabJob Offer`\n            WHERE offer_acceptance IS NOT NULL AND company = %s AND department = %s AND docstatus = 1\"\"\", (company, department))\n\n", "CodeBleu_score": 16.527900103809785}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tlog.info(\"Registering employer {}\", employerForRegisterDto);\n\tfinal Result result = employerService.register(employerForRegisterDto);\n\tif (result.isFailure()) {\n\t\tlog.info(\"Registration of employer {} failed\", employerForRegisterDto);\n\t\treturn new ResponseEntity<Result>(result, HttpStatus.BAD_REQUEST);\n\t} else {\n\t\tlog.info(\"Registration of employer {} successful\", employerForRegisterDto);\n\t\treturn new ResponseEntity<Result>(result, HttpStatus.OK);\n\t}\n}", "CodeBleu_score": 57.95733315031279}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tlog.info(\"Registering employer\");\n\tfinal Result result = employerService.register(employerForRegisterDto);\n\tif (result.isFailure()) {\n\t\tlog.info(\"Failed to register employer\");\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\t} else {\n\t\tlog.info(\"Successfully registered employer\");\n\t\treturn new ResponseEntity<>(result, HttpStatus.OK);\n\t}\n}", "CodeBleu_score": 67.15377421704503}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\ttry {\n\t\tfinal Employer employer = employerService.register(employerForRegisterDto);\n\t\treturn ResponseEntity.ok(new Result(true, employer));\n\t} catch (final IllegalArgumentException e) {\n\t\treturn ResponseEntity.badRequest().body(new Result(false, e.getMessage()));\n\t}\n}", "CodeBleu_score": 43.82189302848142}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\nfinal Result<CompanyStaff> companyStaffResult = this.findById(companyStaffForUpdateDto.getId());\n\nif (companyStaffResult.isFailure()) {\nreturn Result.failure(companyStaffResult.getFailureMessages());\n}\n\nfinal CompanyStaff companyStaff = companyStaffResult.getValue();\n\nif (!companyStaff.getPassword().equals(companyStaffForUpdateDto.getPassword())) {\nreturn Result.failure(Collections.singleton(\"Password does not match existing password\"));\n}\n\ncompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\ncompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\nreturn this.save(companyStaff);\n}", "CodeBleu_score": 47.821553505112625}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tResult result = new Result();\nfinal Long staffId = companyStaffForUpdateDto.getStaffId();\nif (staffId == null)  {\nresult.setSuccess(false);\nresult.addError(new Error(ErrorCode.NOT_FOUND));\nreturn result;\n}\nfinal CompanyStaff companyStaff = companyStaffRepository.findById(staffId);\nif (companyStaff == null)  {\nresult.setSuccess(false);\nresult.addError(new Error(ErrorCode.NOT_FOUND));\nreturn result;\n}\nif (!companyStaff.getPassword().equals(companyStaffForUpdateDto.getPassword()))  {\nresult.setSuccess(false);\nresult.addError(new Error(ErrorCode.INCORRECT_PASSWORD));\nreturn result;\n}\ncompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\ncompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\ncompanyStaffRepository.save(companyStaff);\nresult.setSuccess(true);\nresult.addMessage(new Message(MessageCode.STAFF_UPDATED));\nreturn result;\n}", "CodeBleu_score": 40.57921017246105}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal Long staffId = companyStaffForUpdateDto.getId();\nfinal String firstName = companyStaffForUpdateDto.getFirstName();\nfinal String lastName = companyStaffForUpdateDto.getLastName();\nfinal String password = <PASSWORD>StaffForUpdateDto.getPassword();\nfinal String existingPassword = companyStaffForUpdateDto.getExistingPassword();\n\nfinal CompanyStaff companyStaff = companyStaffRepository.findById(staffId).orElseThrow(() -> new NotFoundException(\"Staff not found for id: \" + staffId));\n\nif (!StringUtils.hasText(firstName)) {\nreturn Result.failure(ResultMessages.STAFF_FIRST_NAME_CANNOT_BE_EMPTY);\n}\n\nif (!StringUtils.hasText(lastName)) {\nreturn Result.failure(ResultMessages.STAFF_LAST_NAME_CANNOT_BE_EMPTY);\n}\n\nif (!StringUtils.hasText(password)) {\nreturn Result.failure(ResultMessages.STAFF_PASSWORD_CANNOT_BE_EMPTY);\n}\n\nif (!StringUtils.hasText(existingPassword)) {\nreturn Result.failure(ResultMessages.STAFF_EXISTING_PASSWORD_CANNOT_BE_EMPTY);\n}\n\nif (!passwordEncoder.matches(existingPassword, companyStaff.getPassword())) {\nreturn Result.failure(ResultMessages.STAFF_EXISTING_PASSWORD_DOES_NOT_MATCH);\n}\n\ncompanyStaff.setFirstName(firstName);\ncompanyStaff.setLastName(lastName);\ncompanyStaff.setPassword(passwordEncoder.encode(password));\n\ncompanyStaffRepository.save(companyStaff);\n\nreturn Result.success(ResultMessages.STAFF_UPDATED);\n}", "CodeBleu_score": 33.74175942138628}]}
