{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = args.get('attachment_ids', [])\n    if not attachment_ids:\n        return request.not_found()\n\n    # Check read access rights and rules for the attachments\n    attachments = request.env['ir.attachment'].browse(attachment_ids)\n    attachments.check_access_rights('read')\n    attachments.check_access_rule('read')\n\n    # Build zip file from attachments' content\n    zip_data = attachments._build_zip_from_attachments()\n\n    # Prepare HTTP headers for the zip file\n    headers = [\n        ('Content-Type', 'application/zip'),\n        ('Content-Disposition', content_disposition('attachments.zip'))\n    ]\n\n    # Return the zip file as an HTTP response\n    return request.make_response(zip_data, headers=headers)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 45.094826335239}, {"code": "def export_zip_documents(self, **args)\n\t\n\n    # Get attachment IDs from HTTP request arguments\n    attachment_ids = request.httprequest.args.getlist('attachment_ids')\n\n    # Verify read access rights and rules for the attachments\n    attachments = request.env['ir.attachment'].sudo().search([('id', 'in', attachment_ids)])\n    attachments.check_access_rights('read')\n    attachments.check_access_rule('read')\n\n    # Build zip file from the attachments' content\n    zip_content, zip_filename = attachments._build_zip_from_attachments(attachment_ids)\n\n    # Prepare HTTP headers for the zip file\n    headers = self._get_zip_headers(zip_filename)\n\n    # Return the zip file as an HTTP response\n    return request.make_response(zip_content, headers)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 46.597418503667086}, {"code": "def export_zip_documents(self, **args)\n\t\n    # Retrieve attachment IDs from HTTP request arguments\n    attachment_ids = args.get('attachment_ids', [])\n\n    # Verify read access rights and rules for the attachments\n    attachments = self.env['ir.attachment'].browse(attachment_ids)\n    attachments.check_access_rights('read')\n    attachments.check_access_rule('read')\n\n    # Build zip file from the attachments' content\n    zip_content = attachments._build_zip_from_attachments(attachment_ids)\n\n    # Prepare HTTP headers for the zip file\n    headers = self._get_zip_headers(attachments)\n\n    # Return the zip file as an HTTP response\n    return request.make_response(zip_content, headers=headers)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 33.835545668887896}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        if not self.env['account.move'].check_access_rights('read', raise_exception=False):\n            values['invoice_count'] = 0\n        else:\n            values['invoice_count'] = counters['invoice_count']\n    if 'bill_count' in counters:\n        if not self.env['account.move'].check_access_rights('read', raise_exception=False):\n            values['bill_count'] = 0\n        else:\n            values['bill_count'] = counters['bill_count']\n    return values\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 41.67418980896318}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = self.env['account.move'].search_count(self._get_invoices_domain()) if self.user_has_groups('account.group_account_readonly') else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = self.env['account.move'].search_count(self._get_bills_domain()) if self.user_has_groups('account.group_account_readonly') else 0\n        values['bill_count'] = bill_count\n    return values\n\n", "CodeBleu_score": 54.75419185373036}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = self._get_invoice_count()\n        values['invoice_count'] = invoice_count if self.user_has_groups('account.group_account_readonly') else 0\n    if 'bill_count' in counters:\n        bill_count = self._get_bill_count()\n        values['bill_count'] = bill_count if self.user_has_groups('account.group_account_readonly') else 0\n    return values\n\n", "CodeBleu_score": 40.72767316681878}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby, **kw)\n    request.session['my_invoices_history'] = values['invoices'].ids\n    return request.render(\"portal_my_invoices.portal_my_invoices\", values)\n\n", "CodeBleu_score": 31.40969028250302}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby, **kw)\n    invoices = values.get('invoices')\n    if not invoices:\n        return request.redirect('/my/invoices')\n    self._show_report_aeroo(model=invoices, report_type='pdf', report_ref='account.account_invoices', download=False)\n    values.update({\n        'page_name': 'invoices',\n        'pager': portal_pager,\n        'default_url': '/my/invoices',\n        'searchbar_sortings': self._get_my_invoices_searchbar_sortings(sortby),\n        'sortby': sortby,\n        'searchbar_filters': self._get_my_invoices_searchbar_filters(filterby),\n        'filterby': filterby,\n    })\n    return request.render(\"portal.portal_my_invoices\", values)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 37.84977839177902}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    # Prepare the values for the template\n    values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby, **kw)\n    # Render the template with the prepared values\n    return request.render(\"portal_my_invoices.portal_my_invoices\", values)\n\n", "CodeBleu_score": 24.433983932968715}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    try:\n        invoice_sudo = self._document_check_access('my_invoice', invoice_id, access_token=access_token)\n    except AccessError:\n        return request.redirect('/my')\n\n    if report_type in ('html', 'pdf', 'text'):\n        return self._show_report(model=invoice_sudo, report_type=report_type, report_ref='account.account_invoices', download=download)\n\n    if not invoice_sudo.is_posted():\n        return request.redirect('/my')\n\n    if download and report_type == 'pdf':\n        legal_documents = invoice_sudo._get_invoice_legal_documents()\n        if not legal_documents:\n            return request.redirect('/my')\n        if len(legal_documents) == 1:\n            return request.redirect(url_for('portal.portal_my_document', document_id=legal_documents[0].id, access_token=access_token))\n        zip_headers = _get_zip_headers(legal_documents)\n        return request.make_response(\n            _build_zip_from_attachments(legal_documents),\n            headers=zip_headers,\n            cookies=None\n        )\n\n    values = self._invoice_get_page_view_values(invoice_sudo, access_token, **kw)\n    return request.render('portal.portal_my_invoice_detail', values)\n\n", "CodeBleu_score": 48.47033925902738}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    try:\n        invoice_sudo = self._document_check_access('account.move', invoice_id, access_token)\n    except (AccessError, MissingError):\n        return request.redirect('/my')\n\n    if report_type in ('html', 'pdf', 'text'):\n        return self._show_report(model=invoice_sudo, report_type=report_type, report_ref='account.action_report_invoice', download=download)\n\n    if download:\n        invoice_sudo.check_access_rights('read')\n        invoice_sudo.check_access_rule('read')\n        attachments = invoice_sudo._get_invoice_legal_documents()\n        zip_filename = invoice_sudo._get_invoice_report_filename()\n        if len(attachments) == 1:\n            return request.make_response(\n                attachments[0].datas,\n                headers=[\n                    ('Content-Type', 'application/pdf'),\n                    ('Content-Disposition', content_disposition('%s.pdf' % invoice_sudo.name))\n                ]\n            )\n        elif attachments:\n            return request.make_response(\n                _build_zip_from_attachments(attachments),\n                headers=[\n                    ('Content-Type', 'application/x-zip-compressed'),\n                    ('Content-Disposition', content_disposition(zip_filename))\n                ]\n            )\n\n    values = self._invoice_get_page_view_values(invoice_sudo, access_token, **kw)\n    if not access_token:\n        request.update_context(**values['view_no_attachment_tokens'])\n    return request.render(\"account.portal_invoice_page\", values)\n\n\n", "CodeBleu_score": 50.99841193802741}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    try:\n        invoice_sudo = self._document_check_access('account.move', invoice_id, access_token)\n    except (AccessError, MissingError):\n        return request.redirect('/my')\n\n    if report_type in ('html', 'pdf', 'text'):\n        return self._show_report(model=invoice_sudo, report_type=report_type, report_ref='account.account_invoices', download=download)\n\n    if not invoice_sudo.is_posted():\n        return request.redirect('/my')\n\n    if download and report_type == 'pdf':\n        legal_documents = invoice_sudo._get_invoice_legal_documents()\n        if len(legal_documents) > 1:\n            zip_filename, zip_content = self._build_zip_from_attachments(legal_documents)\n            return request.make_response(zip_content, headers=[\n                ('Content-Type', 'application/x-zip-compressed'),\n                ('Content-Disposition', content_disposition('%s.zip' % invoice_sudo._get_invoice_report_filename())),\n            ], cookies={'fileToken': token_encode(zip_filename, invoice_sudo.id)})\n\n    return request.render(\"account.portal_invoice_page\", self._invoice_get_page_view_values(invoice_sudo, access_token, **kw))\n\n", "CodeBleu_score": 49.75292586803693}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t\n    domain = [('company_id', '=', company.id)]\n    prod_templates = self.env['product.template'].search(domain)\n    if company.account_sale_tax_id:\n        prod_templates_sale = prod_templates.filtered(lambda s: s.taxes_id and s.taxes_id[0].company_id.id == company.id)\n        prod_templates_sale.write({'taxes_id': [(6, 0, [company.account_sale_tax_id.id])]})\n    if company.account_purchase_tax_id:\n        prod_templates_purchase = prod_templates.filtered(lambda p: p.supplier_taxes_id and p.supplier_taxes_id[0].company_id.id == company.id)\n        prod_templates_purchase.write({'supplier_taxes_id': [(6, 0, [company.account_purchase_tax_id.id])]})", "CodeBleu_score": 39.13543889181112}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    domain = [('company_id', '=', company.id)] if company else []\n    prod_templates = self.env['product.template'].search(domain)\n    prod_templates_sale = prod_templates.filtered(lambda p: p.taxes_id)\n    if company and company.account_sale_tax_id:\n        prod_templates_sale.write({'taxes_id': [(6, 0, company.account_sale_tax_id.ids)]})\n    prod_templates_purchase = prod_templates.filtered(lambda p: p.supplier_taxes_id)\n    if company and company.account_purchase_tax_id:\n        prod_templates_purchase.write({'supplier_taxes_id': [(6, 0, company.account_purchase_tax_id.ids)]})\n\n", "CodeBleu_score": 31.51764657086297}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    domain = [('company_id', '=', company.id)] if company else []\n    prod_templates = self.env['product.template'].search(domain)\n    prod_templates_sale = prod_templates.filtered(lambda p: p.taxes_id)\n    if company.account_sale_tax_id:\n        prod_templates_sale.write({'taxes_id': [(6, 0, company.account_sale_tax_id.ids)]})\n    prod_templates_purchase = prod_templates.filtered(lambda p: p.supplier_taxes_id)\n    if company.account_purchase_tax_id:\n        prod_templates_purchase.write({'supplier_taxes_id': [(6, 0, company.account_purchase_tax_id.ids)]})\n    return True\n\n", "CodeBleu_score": 30.89745667155418}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env['ir.model.data'].xmlid_to_res_id_and_model(xml_id, raise_if_not_found=False)\n    if account:\n        return self.env['account.account'].browse(account[1])\n    domain = safe_eval(company.domain or '[]')\n    domain.append(('user_type_id.type', '=', account_type))\n    account = self.env['account.account'].search(domain, limit=1)\n    return account", "CodeBleu_score": 39.00552412145109}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env['ir.model.data'].xmlid_to_res_id_and_model(xml_id, raise_if_not_found=False)\n    if account:\n        account = self.env['account.account'].browse(account[0])\n    if not account:\n        domain = self._get_account_domain(company)\n        domain += [('user_type_id.type', '=', account_type)]\n        account = self.env['account.account'].search(domain, limit=1)\n    return account\n\n", "CodeBleu_score": 43.2677873921052}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env['ir.model.data'].xmlid_to_res_id_and_model(xml_id, raise_if_not_found=False)\n    if account:\n        return self.env['account.account'].browse(account[0])\n    domain = [('deprecated', '=', False), ('company_id', '=', company.id)]\n    if account_type:\n        domain += [('user_type_id', '=', self.env.ref('account.data_account_type_' + account_type).id)]\n    account = self.env['account.account'].search(domain, limit=1)\n    if account:\n        return account\n    domain = [('deprecated', '=', False), ('company_id', 'in', [company.id, False])]\n    if account_type:\n        domain += [('user_type_id', '=', self.env.ref('account.data_account_type_' + account_type).id)]\n    account = self.env['account.account'].search(domain, limit=1)\n    return account\n\n", "CodeBleu_score": 45.72689222928884}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    current_year_earning_accounts = self.filtered(\n        lambda account: account.account_type == \"current_year_earning\"\n    )\n    if not current_year_earning_accounts:\n        return\n    company_to_account = {}\n    for account in current_year_earning_accounts:\n        if account.company_id in company_to_account:\n            raise ValidationError(\n                _(\n                    \"There can only be one account with 'Current Year Earnings' type for each company.\"\n                )\n            )\n        company_to_account[account.company_id] = account\n\n", "CodeBleu_score": 20.83622119890243}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    for company, accounts in self.filtered(lambda a: a.account_type == 'current_year_earning').groupby('company_id'):\n        if len(accounts) > 1:\n            raise ValidationError(_('There can only be one account with \"Current Year Earnings\" type for each company.'))", "CodeBleu_score": 21.787590256132198}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    for company, accounts in self.filtered(lambda a: a.account_type == 'current_year_earnings').groupby('company_id'):\n        if len(accounts) > 1:\n            raise ValidationError(_(\"There can only be one account with 'Current Year Earnings' type per company.\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 18.354527852200782}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n\n    if not name and self._context.get('partner_id') and self._context.get('account_type'):\n        domain = [('partner_id', '=', self._context['partner_id']), ('account_type', '=', self._context['account_type'])]\n        return self._order_accounts_by_frequency_for_partner(domain, limit=limit, order=order)\n    return super()._name_search(name=name, domain=domain, operator=operator, limit=limit, order=order)", "CodeBleu_score": 33.555420134593014}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if name and not domain and self._context.get('reconciliation_widget'):\n        domain = json.loads(self._context.get('reconciliation_widget'))\n        partner_id = self._context.get('partner_id')\n        if partner_id:\n            accounts = self._order_accounts_by_frequency_for_partner(partner_id)\n            domain += [('id', 'in', accounts.ids)]\n    return super(AccountAccount, self)._name_search(name=name, domain=domain, operator=operator, limit=limit, order=order)\n\n", "CodeBleu_score": 33.869377165233395}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self._context.get('partner_id') and self._context.get('account_type'):\n        domain = [('partner_id', '=', self._context['partner_id']), ('account_type', '=', self._context['account_type'])]\n        return self._order_accounts_by_frequency_for_partner(domain, limit=limit, order=order)\n    else:\n        return super(AccountAccount, self)._name_search(name, domain=domain, operator=operator, limit=limit, order=order)\n\n", "CodeBleu_score": 34.49472676328941}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t\n    new = new.with_context(lang=None)\n    for name in self._fields:\n        if name not in excluded and name != \"name\":\n            new[name] = self[name]\n    if new.name:\n        self.env[\"ir.translation\"].update_translations(\n            name_field=self._rec_name,\n            records=new,\n            translations=self._get_stored_translations(self._rec_name, new),\n        )\n\n", "CodeBleu_score": 31.461763859790242}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    for field in self._fields:\n        if field in excluded or field == \"name\":\n            continue\n        new.write({field: self[field]})\n    if new.name_field:\n        new.name_field.update_raw(new.name_get())\n\n", "CodeBleu_score": 21.95052961772497}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    for field in self._fields:\n        if field not in excluded and field != 'name':\n            new[field] = self[field]\n    if new.name:\n        self._get_stored_translations(new).update({new.name: new})\n\n", "CodeBleu_score": 24.896345358105005}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    sale_types = self.get_sale_types()\n    query = self.env['account.move.line'].search([])\n    query.add_where('''\n        aml.move_id IN (SELECT DISTINCT(aml.move_id)\n        FROM account_move_line AS aml\n        INNER JOIN account_move AS am ON aml.move_id = am.id\n        WHERE am.state = 'posted'\n        AND aml.display_type IS NULL\n        AND aml.account_id IS NOT NULL\n        AND aml.exclude_from_invoice_tab = FALSE\n        AND aml.sale_type IN %s\n        AND aml.partner_id = %s\n        AND aml.analytic_account_id IN %s\n        )''', (tuple(sale_types), self.id, tuple(self._search_analytic_accounts().ids)))\n    query.execute()\n    res = query._cr.dictfetchall()\n    action = self.env.ref('account.action_move_out_invoice_type').read()[0]\n    action['context'] = {'search_default_sale_type': sale_types[0]}\n    action['domain'] = [('id', 'in', [r['move_id'] for r in res])]\n    return action", "CodeBleu_score": 28.514411365791343}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    get_sale_types = self.get_sale_types()\n    query = \"\"\"\n        SELECT DISTINCT(aml.move_id)\n        FROM account_move_line aml\n        WHERE aml.sale_type_id IN %s\n        AND aml.res_id = %s\n        AND aml.analytic_account_id IN %s\n        \"\"\"\n    query += self._query_analytic_accounts()\n    self.env.cr.execute(\n        query,\n        (\n            tuple(get_sale_types),\n            self.id,\n            tuple(self.analytic_account_ids.ids),\n        ),\n    )\n    invoices = self.env[\"account.move\"].browse([x[0] for x in self.env.cr.fetchall()])\n    action = self.env.ref(\"account.action_move_out_invoice_type\").read()[0]\n    if len(invoices) > 1:\n        action[\"domain\"] = [(\"id\", \"in\", invoices.ids)]\n    elif len(invoices) == 1:\n        form_view = [(self.env.ref(\"account.view_move_form\").id, \"form\")]\n        if \"views\" in action:\n            action[\"views\"] = form_view + [\n                (state, view) for state, view in action[\"views\"] if view != \"form\"\n            ]\n        else:\n            action[\"views\"] = form_view\n        action[\"res_id\"] = invoices.ids[0]\n    else:\n        action = {\"type\": \"ir.actions.act_window_close\"}\n\n    context = {\n        \"default_type\": \"out_invoice\",\n        \"default_partner_id\": self.partner_id.id,\n        \"default_analytic_account_id\": self.analytic_account_id.id,\n    }\n    action[\"context\"] = context\n    return action\n\n", "CodeBleu_score": 36.13300436418192}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    get_sale_types = self.env['account.move.line'].get_sale_types()\n    query = f\"\"\"\n        SELECT DISTINCT am.id\n        FROM account_move_line aml\n        JOIN account_move am ON aml.move_id = am.id\n        WHERE aml.sale_type IN {get_sale_types}\n        AND aml.exclude_from_invoice_tab IS NOT true\n        AND aml.company_id = {self.env.company.id}\n        AND am.state = 'posted'\n        AND am.type in ('out_invoice', 'out_refund')\n        AND am.invoice_payment_state in ('paid','in_payment','partial')\n        AND am.partner_id = {self.partner_id.id}\n        AND aml.analytic_account_id IN {tuple(self.analytic_account_ids.ids)}\n    \"\"\"\n    query.select\n    query.add_where\n    execute\n    dictfetchall\n    _\n    _search\n    SQL\n    _query_analytic_accounts\n    str\n    line.get\n    return {\n        'name': _('Customer Invoices'),\n        'res_model': 'account.move',\n        'type': 'ir.actions.act_window',\n        'view_mode': 'tree,form',\n        'context': {'create': False, 'edit': False, 'delete': False},\n        'domain': [('id', 'in', invoice_ids)]\n    }\n\n", "CodeBleu_score": 21.155111946729015}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    query = \"\"\"\n    SELECT DISTINCT move_id\n    FROM account_move_line\n    WHERE purchase_type IN %s AND purchase_id = %s\n    \"\"\"\n    query_params = (tuple(self._get_purchase_types()), self.id)\n    self.env.cr.execute(query, query_params)\n    move_ids = [res['move_id'] for res in self.env.cr.dictfetchall()]\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['context'] = {'default_move_type': 'in_invoice', 'create': False}\n    if len(move_ids) > 1:\n        action['domain'] = [('id', 'in', move_ids)]\n    elif move_ids:\n        action['views'] = [(self.env.ref('account.view_move_form').id, 'form')]\n        action['res_id'] = move_ids[0]\n    else:\n        action = {'type': 'ir.actions.act_window_close'}\n    return action\n\n", "CodeBleu_score": 38.760547665596775}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    query = self.env[\"account.move.line\"].search(\n        [\n            (\"purchase_type\", \"=\", \"purchase\"),\n            (\"purchase_id\", \"=\", self.id),\n        ]\n    )\n    move_ids = query.mapped(\"move_id\").ids\n    action = {\n        \"name\": _(\"Vendor Bills\"),\n        \"view_mode\": \"tree,form\",\n        \"res_model\": \"account.move\",\n        \"type\": \"ir.actions.act_window\",\n        \"domain\": [(\"id\", \"in\", move_ids)],\n        \"context\": dict(\n            self.env.context,\n            default_move_type=\"in_invoice\",\n            create=False,\n        ),\n    }\n    return action\n\n", "CodeBleu_score": 35.78565282256182}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    query = \"\"\"SELECT DISTINCT aml.move_id\n                FROM account_move_line aml\n                LEFT JOIN purchase_type pt ON aml.purchase_type = pt.id\n                WHERE aml.purchase_type IS NOT NULL\n                AND pt.name IN %s\n                AND aml.purchase_id = %s\n            \"\"\"\n    query_params = (self._get_purchase_types(), self.id)\n    self.env.cr.execute(query, query_params)\n    data = self.env.cr.dictfetchall()\n    result = []\n    if data:\n        for d in data:\n            result.append(d.get('move_id'))\n    action = {\n        'name': _('Vendor Bills'),\n        'res_model': 'account.move',\n        'type': 'ir.actions.act_window',\n        'view_mode': 'tree,form',\n        'context': {\n            'create': False,\n            'default_move_type': 'in_invoice',\n        },\n        'domain': [('id', 'in', result)],\n    }\n    return action\n\n", "CodeBleu_score": 27.265477328383064}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\t\n    if not values.get(\"attachment_ids\"):\n        return super().write(values)\n    values.pop(\"attachment_ids\")\n    with self.env.cr.savepoint():\n        self._check_attachments()\n        return super().write(values)\n", "CodeBleu_score": 38.22658696429408}, {"code": "def write(self, values)\n\t\n    if values.get('attachment_ids'):\n        values.pop('attachment_ids')\n    with self.env.cr.savepoint():\n        self._check_attachments()\n    return super().write(values)", "CodeBleu_score": 31.41346988095521}, {"code": "def write(self, values)\n\t\n    if len(values) == 1:\n        values = values[0]\n    if 'attachment_ids' in values:\n        values.pop('attachment_ids')\n    with self._check_attachments():\n        return super().write(values)", "CodeBleu_score": 43.859298581837}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_one()\n    with_context = self.env.context.copy()\n    with_context.update(allowed_company_ids=[self.company_id.id])\n    sudo = self.sudo().with_context(**with_context)\n    create = sudo.create\n    search = sudo.search\n    bank_account = self.env[\"res.partner.bank\"]\n    str2bool = self.env[\"ir.config_parameter\"].sudo().get_param\n    if str2bool(\"account_payment_order.skip_bank_account_creation\"):\n        return bank_account\n    bank_account = search(\n        [\n            (\"acc_number\", \"=\", self.acc_number),\n            (\"partner_id\", \"=\", self.partner_id.id),\n        ],\n        limit=1,\n    )\n    if not bank_account:\n        bank_account = create(\n            {\n                \"acc_number\": self.acc_number,\n                \"partner_id\": self.partner_id.id,\n                \"company_id\": self.company_id.id,\n            }\n        )\n    return bank_account.filtered(\n        lambda b: b.company_id.id == self.company_id.id\n    )", "CodeBleu_score": 44.384606405599655}, {"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_one()\n    BankAccount = self.env[\"res.partner.bank\"]\n    if self.env[\"ir.config_parameter\"].sudo().get_param(\"skip_bank_account_creation\"):\n        return BankAccount\n    bank_account = BankAccount.search(\n        [\n            (\"acc_number\", \"=\", self.acc_number),\n            (\"partner_id\", \"=\", self.partner_id.id),\n        ]\n    )\n    if not bank_account:\n        bank_account = BankAccount.create(\n            {\n                \"acc_number\": self.acc_number,\n                \"partner_id\": self.partner_id.id,\n                \"company_id\": self.company_id.id,\n            }\n        )\n    return bank_account.filtered(lambda b: b.company_id.id == self.company_id.id)\n\n", "CodeBleu_score": 45.56620331975921}, {"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_one()\n    with_context(company_id=self.company_id.id)\n    sudo\n    create\n    search\n    bank_account.filtered\n    str2bool\n    get_param\n\n", "CodeBleu_score": 6.780876291300686}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    transaction_currency = self.currency_id\n    company_currency = self.company_id.currency_id\n    journal_currency = self.journal_id.currency_id or company_currency\n    if currency:\n        transaction_currency = currency\n    if not transaction_currency or transaction_currency == journal_currency:\n        return {\n            'transaction_currency': transaction_currency,\n            'transaction_amount': balance,\n            'journal_amount': balance,\n            'company_amount': balance,\n        }\n    if transaction_currency == company_currency:\n        return {\n            'transaction_currency': transaction_currency,\n            'transaction_amount': balance,\n            'journal_amount': abs(amount_currency),\n            'company_amount': balance,\n        }\n    journal_amount = balance\n    company_amount = balance\n    if transaction_currency == self.company_id.currency_id:\n        journal_amount = abs(amount_currency)\n    else:\n        journal_amount = balance * self.journal_id.currency_id._get_conversion_rate(\n            transaction_currency,\n            journal_currency,\n            self.company_id,\n            self.journal_id.date,\n        )\n        company_amount = balance * self.company_id.currency_id._get_conversion_rate(\n            transaction_currency,\n            company_currency,\n            self.company_id,\n            self.journal_id.date,\n        )\n    return {\n        'transaction_currency': transaction_currency,\n        'transaction_amount': balance,\n        'journal_amount': journal_amount,\n        'company_amount': company_amount,\n    }\n\n", "CodeBleu_score": 29.999804004386103}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    transaction_currency = self.currency_id or currency\n    company_currency = self.company_id.currency_id\n    journal_currency = self.journal_id.currency_id or company_currency\n    if transaction_currency != company_currency:\n        if journal_currency == company_currency:\n            amount_currency = self.currency_id.round(amount_currency)\n            balance = transaction_currency.round(balance)\n        elif transaction_currency == journal_currency:\n            amount_currency = company_currency.round(amount_currency)\n            balance = transaction_currency.round(balance)\n        else:\n            amount_currency = transaction_currency._convert(amount_currency, company_currency, self.company_id, self.date)\n            amount_currency = company_currency.round(amount_currency)\n            balance = journal_currency._convert(balance, company_currency, self.company_id, self.date)\n            balance = transaction_currency.round(balance)\n    else:\n        amount_currency = abs(amount_currency)\n        balance = transaction_currency.round(balance)\n    return {\n        'transaction_currency': transaction_currency,\n        'company_currency': company_currency,\n        'journal_currency': journal_currency,\n        'amount_currency': amount_currency,\n        'balance': balance,\n    }\n\n", "CodeBleu_score": 31.552110025667897}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    currency = self.currency_id or currency\n    transaction_currency = self.currency_id or currency\n    journal_currency = self.journal_currency_id or currency\n    company_currency = self.company_currency_id or currency\n    if currency.is_zero(amount_currency):\n        balance_currency = balance\n    else:\n        balance_currency = currency._convert(balance, transaction_currency, company_currency, round=True)\n    if self.is_currency_rate_different():\n        if self.currency_rate_inverted:\n            balance_currency = balance_currency * self.currency_rate\n            amount_currency = amount_currency / self.currency_rate\n        else:\n            balance_currency = balance_currency / self.currency_rate\n            amount_currency = amount_currency * self.currency_rate\n    if currency.is_zero(balance_currency):\n        journal_amount_currency = amount_currency\n    else:\n        journal_amount_currency = currency._convert(balance_currency, journal_currency, company_currency, round=True)\n    if currency.is_zero(amount_currency):\n        transaction_amount = balance\n    else:\n        if currency.is_zero(balance):\n            transaction_amount = amount_currency\n        else:\n            transaction_amount = balance_currency\n    if currency.is_zero(transaction_amount):\n        journal_amount = amount_currency\n    else:\n        if currency.is_zero(balance):\n            journal_amount = amount_currency\n        else:\n            journal_amount = balance_currency\n    return {\n        'transaction_amount': transaction_amount,\n        'journal_amount': journal_amount,\n        'company_amount': balance,\n        'transaction_amount_currency': amount_currency,\n        'journal_amount_currency': journal_amount_currency,\n        'company_amount_currency': balance_currency,\n    }\n\n", "CodeBleu_score": 29.176174215767116}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids = [(5, 0, 0)]\n        if journal.type in [\"bank\", \"cash\"]:\n            for method in journal._default_outbound_payment_methods():\n                journal.outbound_payment_method_line_ids = [\n                    (0, 0, {\"payment_method_id\": method.id})\n                ]", "CodeBleu_score": 35.867474349073966}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal._clear_outbound_payment_method_line_ids()\n        if journal.type in ('bank', 'cash'):\n            for method in journal._default_outbound_payment_methods():\n                journal._create_outbound_payment_method_line_ids(method)\n\n", "CodeBleu_score": 28.924602666631554}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids = [(5, 0, 0)]\n        if journal.type in (\"bank\", \"cash\"):\n            for method in journal._default_outbound_payment_methods():\n                journal.outbound_payment_method_line_ids = [\n                    (0, 0, method._prepare_outbound_payment_method_line())\n                ]\n\n", "CodeBleu_score": 36.30035907670426}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t\n    for move in self:\n        if not move.date and not move.invoice_date:\n            move.date = fields.Date.context_today(move)\n        elif move.invoice_date and not move.is_sale_document():\n            move.date = move._get_accounting_date()\n        if move.date != move._context.get('move_date'):\n            move.with_context(move_date=move.date)._add_to_compute()\n\n", "CodeBleu_score": 30.416143114356874}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if not move.date and not move.invoice_date:\n            move.date = move._get_accounting_date()\n        elif move.invoice_date and not move.is_sale_document(include_receipts=True):\n            invoice_date = fields.Date.from_string(move.invoice_date)\n            accounting_date = move._get_accounting_date(invoice_date)\n            if accounting_date != move.date:\n                move.date = accounting_date\n                move.with_context(check_move_validity=False)._recompute_dynamic_lines(recompute_all_taxes=True, recompute_tax_base_amount=True)\n\n", "CodeBleu_score": 42.10447143889381}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if move.invoice_date and move.date == move.invoice_date:\n            move.date = move.invoice_date\n        elif not move.date:\n            move.date = fields.Date.context_today(move)\n        if move.invoice_date and move.is_sale_document():\n            move_date = move.invoice_date + relativedelta(days=move._affect_tax_report())\n            if move_date != move.date:\n                move.date = move_date\n                move.with_context(check_move_validity=False)._recompute_dynamic_lines(\n                    recompute_all_taxes=True,\n                    recompute_tax_base_amount=True,\n                )\n\n", "CodeBleu_score": 41.08229781896591}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document(include_receipts=True):\n            move.invoice_payment_term_id = move.fiscal_position_id.payment_term_id or move.partner_id.property_payment_term_id\n        elif move.is_purchase_document(include_receipts=True):\n            move.invoice_payment_term_id = move.fiscal_position_id.payment_term_id or move.partner_id.property_supplier_payment_term_id\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 49.16553506103396}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document(include_receipts=True):\n            move.invoice_payment_term_id = move.fiscal_position_id.sale_payment_term_id or move.partner_id.property_payment_term_id\n        elif move.is_purchase_document(include_receipts=True):\n            move.invoice_payment_term_id = move.fiscal_position_id.purchase_payment_term_id or move.partner_id.property_supplier_payment_term_id\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 49.99345114496839}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document(include_receipts=True):\n            move.invoice_payment_term_id = move.fiscal_position_id.payment_term_id or move.partner_id.with_company(move.company_id).property_payment_term_id\n        elif move.is_purchase_document(include_receipts=True):\n            move.invoice_payment_term_id = move.fiscal_position_id.payment_term_id or move.partner_id.with_company(move.company_id).property_supplier_payment_term_id\n        else:\n            move.invoice_payment_term_id = False", "CodeBleu_score": 46.58884270867711}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t\n    for record in self:\n        # Categorize taxes by country and company\n        taxes_by_country_company = defaultdict(list)\n        for tax in record.taxes_id:\n            taxes_by_country_company[(tax.country_id, tax.company_id)].append(tax)\n\n        # Assign tax group based on country and company\n        for (country, company), taxes in taxes_by_country_company.items():\n            tax_group = record.tax_group_id.filtered(\n                lambda g: g.country_id == country and g.company_id == company\n            )\n            if not tax_group:\n                tax_group = record.tax_group_id.filtered(\n                    lambda g: not g.country_id and g.company_id == company\n                )\n            if not tax_group:\n                raise UserError(\n                    _(\n                        \"No tax group found for the following taxes: %s. Please assign a tax group to these taxes.\"\n                    )\n                    % \", \".join(taxes.mapped(\"name\"))\n                )\n            for tax in taxes:\n                tax.tax_group_id = tax_group\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 31.95070415624233}, {"code": " def _compute_tax_group_id(self)\n\t\n\n    # Categorize taxes by their country and company\n    taxes_by_country_company = defaultdict(list)\n    for tax in self:\n        taxes_by_country_company[(tax.country_id, tax.company_id)].append(tax)\n\n    # Search for a matching tax group for each group of taxes\n    for (country, company), taxes in taxes_by_country_company.items():\n        tax_group = self.env['account.tax.group'].search([\n            ('country_id', '=', country.id),\n            ('company_id', '=', company.id),\n        ], limit=1)\n        if not tax_group:\n            tax_group = self.env['account.tax.group'].search([\n                ('country_id', '=', False),\n                ('company_id', '=', company.id),\n            ], limit=1)\n        for tax in taxes:\n            tax.tax_group_id = tax_group\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 39.69867294491454}, {"code": " def _compute_tax_group_id(self)\n\t\n    by_country_company = defaultdict(lambda: defaultdict(lambda: self.env['account.tax.group']))\n    for tax_group in self.tax_group_ids:\n        by_country_company[tax_group.country_id][tax_group.company_id] |= tax_group\n    for tax in self:\n        tax.tax_group_id = by_country_company[tax.company_id.account_fiscal_country_id][tax.company_id]._check_company_domain(tax.country_id)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 20.862421352261634}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n\n    # Set the database in the session by accessing the login URL\n    self.session.get(url, verify=False)\n\n    # Prepare the POST request data\n    data = {\n        'login': login,\n        'password': password,\n        'db': db,\n    }\n    if force:\n        data['force'] = '1'\n\n    # Read the module file and upload it to the server\n    with open(module_file, 'rb') as f:\n        res = self.session.post(url + '/base_import_module/login_upload', files={'mod_file': f}, data=data, verify=False)\n\n    # Check if the server has the required module installed or is outdated\n    if 'Error' in res.text:\n        raise Exception(res.text)\n\n    return res.text\n\n", "CodeBleu_score": 46.556687753856686}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    self.session.get(url)\n    self.session.post(url, data={'login': login, 'password': password, 'db': db})\n    data = {'login': login, 'password': password, 'db': db}\n    if force:\n        data['force'] = '1'\n    with open(module_file, 'rb') as f:\n        data['module_file'] = f.read()\n    response = self.session.post(url + '/base_import_module/login_upload', data=data)\n    if response.status_code != 200:\n        raise Exception('Error uploading module: %s' % response.text)\n    return response.text", "CodeBleu_score": 45.06766084366035}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    self.get(url)\n    self.post(url, data={'login': login, 'password': password, 'db': db})\n    data = {\n        'login': login,\n        'password': password,\n        'db': db,\n        'force': force,\n    }\n    with open(module_file, 'rb') as f:\n        data['module_file'] = f\n        res = self.post(url + '/base_import_module/login_upload', data=data)\n    if res.text == 'No module named %s' % module_name:\n        raise Exception('Server does not have the required module installed or is outdated.')\n    return res.text", "CodeBleu_score": 48.530166355394755}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t\n    db_name = config['db_name']\n    overwrite_translations = config['overwrite_translations']\n    registry = Registry(db_name)\n    with registry.cursor() as cr:\n        translation_importer = TranslationImporter(cr)\n        translation_importer.load_file(\n            config['translation_file'], overwrite_translations)\n        translation_importer.save()\n\n", "CodeBleu_score": 38.15852994386463}, {"code": "def import_translation()\n\t\n    db_name = config['db_name']\n    overwrite = config.getboolean('overwrite_translations')\n\n    registry = Registry(db_name)\n    with registry.cursor() as cr:\n        translation_importer = TranslationImporter(cr)\n        translation_importer.load_file(cr, overwrite=overwrite)\n        translation_importer.save(cr)\n\n", "CodeBleu_score": 37.97611856606723}, {"code": "def import_translation()\n\t\n    db_name = config.get('db_name')\n    overwrite_existing = config.get('overwrite_existing')\n    registry = Registry(db_name)\n    with registry.cursor() as cr:\n        translation_importer = TranslationImporter(cr, overwrite_existing)\n        translation_importer.load_file(config.get('translation_file'))\n        translation_importer.save()\n\n", "CodeBleu_score": 39.86332480247536}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\t\n\n    node = Node(name, info)\n    node.depth = self.depth + 1\n    if node not in self.children:\n        self.children.append(node)\n    if hasattr(self, \"parent\"):\n        node.parent = self.parent\n    if hasattr(self, \"parent_name\"):\n        node.parent_name = self.parent_name\n    if hasattr(self, \"parent_info\"):\n        node.parent_info = self.parent_info\n    if hasattr(self, \"parent_type\"):\n        node.parent_type = self.parent_type\n    if hasattr(self, \"parent_module\"):\n        node.parent_module = self.parent_module\n    if hasattr(self, \"parent_path\"):\n        node.parent_path = self.parent_path\n    if hasattr(self, \"parent_line\"):\n        node.parent_line = self.parent_line\n    if hasattr(self, \"parent_column\"):\n        node.parent_column = self.parent_column\n    if hasattr(self, \"parent_end_line\"):\n        node.parent_end_line = self.parent_end_line\n    if hasattr(self, \"parent_end_column\"):\n        node.parent_end_column = self.parent_end_column\n    if hasattr(self, \"parent_call_line\"):\n        node.parent_call_line = self.parent_call_line\n    if hasattr(self, \"parent_call_column\"):\n        node.parent_call_column = self.parent_call_column\n    if hasattr(self, \"parent_call_name\"):\n        node.parent_call_name = self.parent_call_name\n    if hasattr(self, \"parent_call_path\"):\n        node.parent_call_path = self.parent_call_path\n    if hasattr(self, \"parent_call_module\"):\n        node.parent_call_module = self.parent_call_module\n    if hasattr(self, \"parent_call_class\"):\n        node.parent_call_class = self.parent", "CodeBleu_score": 37.851972811750414}, {"code": "def add_child(self, name, info)\n\t\n\n    new_node = Node(name, info)\n    new_node.depth = self.depth + 1\n    if new_node not in self.children:\n        self.children.append(new_node)\n        if hasattr(self, 'parent'):\n            new_node.parent = self\n            new_node.parent_name = self.name\n        if hasattr(self, 'parent_name'):\n            new_node.parent_name = self.parent_name\n        if hasattr(self, 'parent_info'):\n            new_node.parent_info = self.parent_info\n        if hasattr(self, 'parent_type'):\n            new_node.parent_type = self.parent_type\n        if hasattr(self, 'parent_size'):\n            new_node.parent_size = self.parent_size\n        if hasattr(self, 'parent_modified'):\n            new_node.parent_modified = self.parent_modified\n        if hasattr(self, 'parent_created'):\n            new_node.parent_created = self.parent_created\n        if hasattr(self, 'parent_accessed'):\n            new_node.parent_accessed = self.parent_accessed\n        if hasattr(self, 'parent_permissions'):\n            new_node.parent_permissions = self.parent_permissions\n        if hasattr(self, 'parent_owner'):\n            new_node.parent_owner = self.parent_owner\n        if hasattr(self, 'parent_group'):\n            new_node.parent_group = self.parent_group\n        if hasattr(self, 'parent_inode'):\n            new_node.parent_inode = self.parent_inode\n        if hasattr(self, 'parent_mount'):\n            new_node.parent_mount = self.parent_mount\n        if hasattr(self, 'parent_fs'):\n            new_node.parent_fs = self.parent_fs\n        if hasattr(self, 'parent_drive'):\n            new_node.parent_drive = self.parent_drive\n        if hasattr(self, 'parent", "CodeBleu_score": 30.114326999498907}, {"code": "def add_child(self, name, info)\n\t\n    child = Node(name, info)\n    child.depth = self.depth + 1\n    if child not in self.children:\n        self.children.append(child)\n        if hasattr(self, 'parent'):\n            child.parent = self\n            if hasattr(self, 'parent_name'):\n                child.parent_name = self.parent_name\n            if hasattr(self, 'parent_info'):\n                child.parent_info = self.parent_info\n        if hasattr(self, 'parent_name'):\n            child.parent_name = self.parent_name\n        if hasattr(self, 'parent_info'):\n            child.parent_info = self.parent_info\n        self.children.sort(key=lambda x: x.name)\n    return child\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 38.9659260464657}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t\n    result = [\n        [\n            \"Date\",\n            \"Balance\",\n            \"Debit\",\n            \"Credit\",\n            \"Balance\",\n            \"Debit\",\n            \"Credit\",\n            \"Balance\",\n            \"Debit\",\n            \"Credit\",\n        ]\n    ]\n\n    for d in dates:\n        result[0].append(d)\n        result[0].append(0.0)\n\n    root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n\n    for gle in gl_entries:\n        result[0][dates.index(gle.posting_date) + 1] += gle.debit\n        result[0][dates.index(gle.posting_date) + 2] += gle.credit\n\n    if root_type not in [\"Asset\", \"Expense\"]:\n        for i in range(1, len(result[0])):\n            result[0][i] *= -1\n\n    if root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n        for i in range(1, len(result[0])):\n            result[0][i] += result[0][i - 1]\n\n    return result\n\n", "CodeBleu_score": 24.180909917817335}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\n        \"account\": account,\n        \"account_currency\": frappe.get_cached_value(\"Account\", account, \"account_currency\"),\n        \"company\": frappe.get_cached_value(\"Account\", account, \"company\"),\n        \"root_type\": frappe.get_cached_value(\"Account\", account, \"root_type\"),\n        \"report_currency\": frappe.get_cached_value(\"GL Entry\", gl_entries[0].name, \"currency\"),\n    }\n\n    for date in dates:\n        result[date] = 0\n\n    if result[\"root_type\"] not in [\"Asset\", \"Expense\"]:\n        for key in result:\n            if key not in [\"account\", \"account_currency\", \"company\", \"root_type\", \"report_currency\"]:\n                result[key] = -1 * result[key]\n\n    for entry in gl_entries:\n        result[getdate(entry.posting_date)] += flt(entry.credit) - flt(entry.debit)\n\n    if result[\"root_type\"] in [\"Asset\", \"Liability\", \"Equity\"]:\n        for i, date in enumerate(dates):\n            if i > 0:\n                result[date] += result[dates[i - 1]]\n\n    return result\n\n", "CodeBleu_score": 28.926142590732955}, {"code": "def build_result(account, dates, gl_entries)\n\t\n\n    result = [[\"Date\", \"Balance\"]]\n    for d in dates:\n        result.append([d, 0])\n\n    account_root_type = frappe.get_cached_value(\"Account\", account, \"root_type\")\n\n    for gle in gl_entries:\n        if gle.docstatus == 2:\n            continue\n        index = dates.index(getdate(gle.posting_date))\n        result[index + 1][1] += gle.debit - gle.credit\n\n    if account_root_type not in (\"Asset\", \"Expense\"):\n        for i in range(1, len(result)):\n            result[i][1] = -1 * result[i][1]\n\n    if account_root_type in (\"Asset\", \"Liability\", \"Equity\"):\n        for i in range(2, len(result)):\n            result[i][1] += result[i - 1][1]\n\n    return result\n\n", "CodeBleu_score": 38.047697792170965}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t\n\n    # Get the account type before and after the save operation\n    account_type_before = self.get_doc_before_save().account_type\n    account_type_after = self.account_type\n\n    # Check if the account type has changed from \"Receivable\" or \"Payable\" to a non-receivable/payable type\n    if (account_type_before in [\"Receivable\", \"Payable\"]) and (account_type_after not in [\"Receivable\", \"Payable\"]):\n        # Get all general ledger entries for the account\n        gl_entries = frappe.get_all(\"GL Entry\", filters={\"account\": self.name}, fields=[\"name\"])\n\n        # If there are any general ledger entries, generate a warning message and add a comment\n        if gl_entries:\n            frappe.msgprint(frappe._(\"Warning: The account type has been changed from Receivable/Payable to {0}. Please check the 'Accounts' report for potential issues.\".format(account_type_after)))\n            self.add_comment(\"Label\", \"Account type changed from Receivable/Payable to {0}. Please check the 'Accounts' report for potential issues.\".format(account_type_after))\n\n", "CodeBleu_score": 32.80737762837547}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type in (\"Receivable\", \"Payable\"):\n        if (\n            self.get_doc_before_save()\n            and self.get_doc_before_save().account_type != self.account_type\n        ):\n            if frappe.db.get_value(\n                \"GL Entry\",\n                filters={\n                    \"account\": self.name,\n                    \"docstatus\": 1,\n                    \"is_cancelled\": 0,\n                },\n                fieldname=[\"name\"],\n            ):\n                frappe.msgprint(\n                    _(\n                        \"Account {0} - {1} is changed from receivable / payable to {2}, it is suggested to check this account's ledger entries in the report 'Accounts' and 'Profit and Loss by Account'\"\n                    ).format(\n                        self.account_number,\n                        self.account_name,\n                        self.account_type,\n                    ),\n                    title=_(\"Warning\"),\n                    indicator=\"orange\",\n                )\n                self.add_comment(\n                    text=_(\n                        \"Account {0} - {1} is changed from receivable / payable to {2}, it is suggested to check this account's ledger entries in the report 'Accounts' and 'Profit and Loss by Account'\"\n                    ).format(\n                        self.account_number,\n                        self.account_name,\n                        self.account_type,\n                    )\n                )\n\n", "CodeBleu_score": 27.802886444755465}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.is_new():\n        return\n\n    account_type_before_save = self.get_doc_before_save().account_type\n    account_type_after_save = self.account_type\n\n    if (account_type_before_save in [\"Receivable\", \"Payable\"] and\n            account_type_after_save not in [\"Receivable\", \"Payable\"] and\n            frappe.db.get_value(\"GL Entry\", {\"account\": self.name}, \"name\")):\n        frappe.msgprint(_(\"Account {0} ({1}) has existing transactions. The account type cannot be changed to {2}\").format(\n            self.name, self.account_name, account_type_after_save), title=_(\"Warning\"), indicator=\"orange\")\n\n        comment = _(\"Account {0} ({1}) has existing transactions. The account type has been changed to {2}\").format(\n            self.name, self.account_name, account_type_after_save)\n        self.add_comment(comment)\n\n", "CodeBleu_score": 41.15393074026262}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t\n\n    if not self.currency:\n        self.currency = frappe.get_cached_value('Company',  self.company,  \"default_currency\")\n\n    if self.general_ledger:\n        for entry in self.general_ledger:\n            if entry.currency and entry.currency != self.currency:\n                frappe.throw(_(\"Currency of account {0} should be {1} but is {2}\").format(self.name, self.currency, entry.currency))\n\n    self.explicitly_specified_currency = True\n\n", "CodeBleu_score": 33.9202266153321}, {"code": "def validate_account_currency(self)\n\t\n\n    if self.account_currency:\n        if not frappe.db.exists(\n            \"Account\", self.account_currency\n        ) and not frappe.db.exists(\"Company\", self.account_currency):\n            frappe.throw(\n                _(\"The Account Currency {0} does not exist\").format(\n                    frappe.bold(self.account_currency)\n                )\n            )\n\n        if not self.cost_center_currency:\n            self.cost_center_currency = self.account_currency\n\n    if self.cost_center_currency:\n        if not frappe.db.exists(\n            \"Account\", self.cost_center_currency\n        ) and not frappe.db.exists(\"Company\", self.cost_center_currency):\n            frappe.throw(\n                _(\"The Cost Center Currency {0} does not exist\").format(\n                    frappe.bold(self.cost_center_currency)\n                )\n            )\n\n    if self.account_currency:\n        if (\n            self.account_currency\n            != frappe.get_cached_value(\"Company\", self.company, \"default_currency\")\n            and frappe.get_cached_value(\"Account\", self.name, \"account_currency\")\n        ):\n            frappe.throw(\n                _(\n                    \"Account Currency cannot be changed as there are transactions against this account\"\n                )\n            )\n\n    if self.cost_center_currency:\n        if (\n            self.cost_center_currency\n            != frappe.get_cached_value(\"Company\", self.company, \"default_currency\")\n            and frappe.get_cached_value(\"Account\", self.name, \"cost_center_currency\")\n        ):\n            frappe.throw(\n                _(\n                    \"Cost Center Currency cannot be changed as there are transactions against this account\"\n                )\n            )\n\n    if not self.account_currency:\n        self.account_currency = frappe.get_cached_value(\n            \"Company\", self.company, \"default_currency\"\n        )\n\n   ", "CodeBleu_score": 36.7342254359192}, {"code": "def validate_account_currency(self)\n\t\n    if self.is_group:\n        return\n\n    if self.currency:\n        if self.currency != frappe.get_cached_value(\n            \"Company\", self.company, \"default_currency\"\n        ):\n            frappe.throw(\n                _(\"The currency of the account {0} does not match the company {1}\").format(\n                    self.name, self.company\n                ),\n                InvalidCurrency,\n            )\n\n        if not frappe.get_cached_value(\"Account\", self.name, \"currency\"):\n            frappe.db.set_value(\"Account\", self.name, \"currency\", self.currency)\n\n        self.flags.currency_explicitly_set = True\n\n    else:\n        self.currency = frappe.get_cached_value(\"Company\", self.company, \"default_currency\")\n\n    self.validate_mandatory_fields()\n\n    if self.name == self.root_type:\n        self.root_type_currency = self.currency\n\n    self.validate_perent_and_root_type_currency()\n\n    if self.account_type == \"Stock\":\n        self.validate_stock_account()\n\n    if self.account_type == \"Bank\" and self.is_group == 0:\n        self.validate_bank_account()\n\n    if self.account_type == \"Cash\" and self.is_group == 0:\n        self.validate_cash_account()\n\n    if self.account_type == \"Income\" and self.is_group == 0:\n        self.validate_income_account()\n\n    if self.account_type == \"Expense\" and self.is_group == 0:\n        self.validate_expense_account()\n\n    if self.account_type == \"Asset\" and self.is_group == 0:\n        self.validate_asset_account()\n\n    if self.account_type == \"Liability\" and self.is_group == 0:\n        self.validate_liability_account()\n\n    if self.account_type == \"Equity\" and self.is_", "CodeBleu_score": 28.232063617118985}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key = generate_key(entry, accounting_dimensions)\n        merged_entries.setdefault(key, {\n            \"account\": entry.account,\n            \"party_type\": entry.party_type,\n            \"party\": entry.party,\n            \"against_account\": entry.against_account,\n            \"debit_amount\": 0,\n            \"credit_amount\": 0,\n            \"debit_amount_in_account_currency\": 0,\n            \"credit_amount_in_account_currency\": 0,\n            \"against_voucher_type\": entry.against_voucher_type,\n            \"against_voucher_no\": entry.against_voucher_no,\n            \"cost_center\": entry.cost_center,\n            \"project\": entry.project,\n            \"remarks\": entry.remarks,\n            \"accounting_dimensions\": accounting_dimensions,\n            \"accounting_dimension_values\": entry.accounting_dimension_values,\n            \"accounting_dimension_remaining_values\": entry.accounting_dimension_remaining_values,\n            \"against_accounting_dimension_values\": entry.against_accounting_dimension_values,\n            \"against_accounting_dimension_remaining_values\": entry.against_accounting_dimension_remaining_values,\n            \"account_currency\": entry.account_currency,\n            \"against_account_currency\": entry.against_account_currency,\n            \"is_opening\": entry.is_opening,\n            \"is_advance\": entry.is_advance,\n            \"voucher_type\": entry.voucher_type,\n            \"voucher_no\": entry.voucher_no,\n            \"voucher_detail_no\": entry.voucher_detail_no,\n            \"against_voucher_type\": entry.against_voucher_type,\n            \"against_voucher_no\": entry.against_voucher_no,\n            \"against_voucher_detail_no\": entry.against_voucher_", "CodeBleu_score": 23.570816067882802}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key = generate_key(entry, accounting_dimensions)\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \"account\": entry.account,\n                \"debit\": 0,\n                \"credit\": 0,\n                \"debit_in_account_currency\": 0,\n                \"credit_in_account_currency\": 0,\n            }\n\n        merged_entries[key][\"debit\"] += flt(entry.debit)\n        merged_entries[key][\"credit\"] += flt(entry.credit)\n        merged_entries[key][\"debit_in_account_currency\"] += flt(\n            entry.debit_in_account_currency\n        )\n        merged_entries[key][\"credit_in_account_currency\"] += flt(\n            entry.credit_in_account_currency\n        )\n\n    return merged_entries\n\n", "CodeBleu_score": 45.27219571646333}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key = generate_key(entry, accounting_dimensions)\n        merged_entries.setdefault(key, {\n            \"debit\": 0,\n            \"credit\": 0,\n            \"debit_in_account_currency\": 0,\n            \"credit_in_account_currency\": 0,\n        })\n        merged_entries[key][\"debit\"] += entry.debit\n        merged_entries[key][\"credit\"] += entry.credit\n        merged_entries[key][\"debit_in_account_currency\"] += entry.debit_in_account_currency\n        merged_entries[key][\"credit_in_account_currency\"] += entry.credit_in_account_currency\n    return merged_entries\n\n", "CodeBleu_score": 48.54084936600236}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype == \"Payment Entry\":\n        supplier = self.get_supplier()\n    else:\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n\n    if supplier.on_hold:\n        if supplier.hold_type == \"Temporary\":\n            frappe.throw(\n                \"Supplier is on hold since {0} till {1}\".format(\n                    supplier.on_hold_since, supplier.release_date\n                )\n            )\n        elif supplier.hold_type == \"Permanent\" and self.doctype == \"Payment Entry\":\n            frappe.throw(\n                \"Supplier is blocked permanently since {0}\".format(\n                    supplier.on_hold_since\n                )\n            )\n\n", "CodeBleu_score": 28.069417718846886}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype in [\"Purchase Invoice\", \"Purchase Receipt\"]:\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n    else:\n        supplier = frappe.get_doc(\"Supplier\", self.party)\n\n    if supplier.on_hold == 1:\n        if supplier.hold_type == self.doctype:\n            if getdate(supplier.release_date) > getdate(nowdate()):\n                frappe.throw(\n                    \"Supplier {0} is on hold since {1}, cannot make {2}\".format(\n                        supplier.supplier_name, supplier.release_date, self.doctype\n                    )\n                )\n            else:\n                supplier.on_hold = 0\n                supplier.save()\n        else:\n            frappe.throw(\n                \"Supplier {0} is on hold since {1}, cannot make {2}\".format(\n                    supplier.supplier_name, supplier.release_date, self.doctype\n                )\n            )\n\n", "CodeBleu_score": 29.716996373990945}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype == \"Payment Entry\":\n        supplier = frappe.get_doc(\"Supplier\", self.party)\n    else:\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n    if supplier.on_hold:\n        if supplier.hold_type == \"All Transactions\" or (\n            supplier.hold_type == \"Buying\" and self.doctype == \"Purchase Invoice\"\n        ):\n            if not supplier.release_date:\n                frappe.throw(\n                    _(\"{0} is on hold since {1}\").format(\n                        self.supplier, supplier.on_hold_since\n                    )\n                )\n            elif getdate(supplier.release_date) > getdate(nowdate()):\n                frappe.throw(\n                    _(\"{0} is on hold since {1} till {2}\").format(\n                        self.supplier, supplier.on_hold_since, supplier.release_date\n                    )\n                )\n            else:\n                supplier.on_hold = 0\n                supplier.on_hold_since = None\n                supplier.release_date = None\n                supplier.hold_type = None\n                supplier.save()\n        else:\n            frappe.throw(\n                _(\"{0} cannot make transactions because it is on hold\").format(\n                    self.supplier\n                )\n            )\n\n", "CodeBleu_score": 30.762206042452227}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    # Get the relevant repost doctypes\n    repost_doctypes = self.get_repost_doctypes()\n\n    # Query for rows where the voucher type and number match the current document\n    rows = frappe.get_all(\n        \"Journal Entry Account\",\n        filters={\n            \"voucher_type\": self.doctype,\n            \"voucher_no\": self.name,\n        },\n        fields=[\"parent\", \"parenttype\", \"idx\"],\n    )\n\n    # Organize rows by parent document type and parent\n    references_map = {}\n    for row in rows:\n        references_map.setdefault(row.parenttype, {}).setdefault(\n            row.parent, []\n        ).append(row.idx)\n\n    # Retrieve each parent document and remove the relevant rows\n    for doctype, parents in references_map.items():\n        for parent, idxs in parents.items():\n            doc = frappe.get_doc(doctype, parent)\n\n            # Remove the relevant rows from either \"repost_vouchers\" or \"vouchers\" fields\n            if doctype == \"Sales Invoice\":\n                doc.set(\"repost_vouchers\", [])\n            elif doctype == \"Purchase Invoice\":\n                doc.set(\"vouchers\", [])\n\n            # Set flags to ignore validation and links\n            doc.flags.ignore_validate = True\n            doc.flags.ignore_links = True\n\n            # Save the changes\n            doc.save()\n\n", "CodeBleu_score": 27.755175180642755}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n\n    repost_doctypes = self.get_repost_doctypes()\n\n    if not repost_doctypes:\n        return\n\n    references_map = {}\n\n    for doctype in repost_doctypes:\n        rows = frappe.db.sql(\n            \"\"\"\n            SELECT\n                parent,\n                parenttype,\n                name\n            FROM\n                `tab{0}`\n            WHERE\n                voucher_type = %s\n                AND voucher_no = %s\n        \"\"\".format(\n                doctype\n            ),\n            (self.doctype, self.name),\n            as_dict=1,\n        )\n\n        if rows:\n            for row in rows:\n                references_map.setdefault(row.parenttype, {}).setdefault(\n                    row.parent, []\n                ).append(row.name)\n\n    for parenttype, references in references_map.items():\n        for parent, reference_names in references.items():\n            parent_doc = frappe.get_doc(parenttype, parent)\n\n            if parent_doc.doctype == \"Sales Invoice\":\n                parent_doc.set(\"repost_vouchers\", [])\n            else:\n                parent_doc.set(\"vouchers\", [])\n\n            for reference_name in reference_names:\n                if parent_doc.doctype == \"Sales Invoice\":\n                    parent_doc.append(\n                        \"repost_vouchers\",\n                        {\n                            \"voucher_type\": self.doctype,\n                            \"voucher_no\": self.name,\n                            \"reference_name\": reference_name,\n                        },\n                    )\n                else:\n                    parent_doc.append(\n                        \"vouchers\",\n                        {\n                            \"voucher_type\": self.doctype,\n                            \"voucher_no\": self.name,\n                            \"reference_name\": reference_name,\n                        },\n                    )\n\n            parent_doc.flags.ignore_validate_update_after_submit = True\n            parent_doc.flags.ignore_links = True\n            parent_doc.save", "CodeBleu_score": 25.521490303230575}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    # Get the relevant repost doctypes\n    repost_doctypes = self.get_repost_doctypes()\n\n    # Query for rows where the voucher type and number match the current document\n    rows = frappe.db.sql(\n        \"\"\"\n        SELECT\n            parent,\n            parenttype,\n            voucher_type,\n            voucher_no\n        FROM\n            `tabGL Entry`\n        WHERE\n            voucher_type = %s\n            AND voucher_no = %s\n        \"\"\",\n        (self.doctype, self.name),\n        as_dict=1,\n    )\n\n    # Organize rows into a map by parent document type and parent\n    references_map = {}\n    for row in rows:\n        references_map.setdefault((row.parenttype, row.parent), []).append(row)\n\n    # Loop through each parent document and remove the relevant rows\n    for (parenttype, parent), rows in references_map.items():\n        # Get the parent document\n        parent_doc = frappe.get_doc(parenttype, parent)\n\n        # Remove the relevant rows from either \"repost_vouchers\" or \"vouchers\" fields\n        if parent_doc.doctype == \"Journal Entry\":\n            field_name = \"repost_vouchers\"\n        else:\n            field_name = \"vouchers\"\n\n        for row in rows:\n            for i, voucher in enumerate(parent_doc.get(field_name)):\n                if voucher.voucher_type == row.voucher_type and voucher.voucher_no == row.voucher_no:\n                    del parent_doc.get(field_name)[i]\n                    break\n\n        # Set flags to ignore validation and links\n        parent_doc.flags.ignore_validate = True\n        parent_doc.flags.ignore_links = True\n\n        # Save the changes\n        parent_doc.save()", "CodeBleu_score": 26.166496534571976}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    self.auth()\n    query_params = {\n        \"start_date\": start_date,\n        \"end_date\": end_date,\n        \"limit\": 100,\n        \"offset\": 0,\n    }\n    if account_id:\n        query_params[\"account_id\"] = account_id\n    transactions = []\n    while True:\n        try:\n            response = self.client.get(\"transactions\", params=query_params)\n            response.raise_for_status()\n            data = response.json()\n            transactions.extend(data[\"transactions\"])\n            if len(transactions) < data[\"total_transactions\"]:\n                query_params[\"offset\"] += query_params[\"limit\"]\n            else:\n                break\n        except requests.exceptions.HTTPError as e:\n            if e.response.status_code == 400:\n                raise ValueError(\"Invalid date range\")\n            elif e.response.status_code == 401:\n                raise ValueError(\"Invalid credentials\")\n            else:\n                raise\n        except Exception as e:\n            frappe.log_error(\n                \"Error while fetching transactions from Plaid: {}\".format(str(e))\n            )\n            raise\n    return transactions\n\n", "CodeBleu_score": 34.09184406670887}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        self.auth()\n        params = {\n            \"startDate\": start_date,\n            \"endDate\": end_date,\n            \"accountId\": account_id,\n            \"page\": 1,\n            \"pageSize\": 100,\n        }\n        transactions = []\n        while True:\n            response = self.client.get(\n                \"transactions\",\n                params=params,\n            )\n            response.raise_for_status()\n            data = response.json()\n            transactions.extend(data[\"transactions\"])\n            if len(transactions) < data[\"total\"]:\n                params[\"page\"] += 1\n            else:\n                break\n        return transactions\n    except requests.exceptions.HTTPError as e:\n        if e.response.status_code == 400:\n            raise frappe.ValidationError(\n                \"Please check the start and end date, and try again.\"\n            )\n        elif e.response.status_code == 401:\n            raise frappe.AuthenticationError(\n                \"Invalid credentials. Please check your API key and try again.\"\n            )\n        else:\n            raise e\n    except Exception as e:\n        frappe.log_error(\n            \"An error occurred while retrieving transactions: {}\".format(str(e))\n        )\n        raise\n\n", "CodeBleu_score": 36.0988959602929}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    self.auth()\n    query_params = {\n        \"from\": start_date,\n        \"to\": end_date,\n        \"accountId\": account_id,\n    }\n    transactions = []\n    try:\n        response = self.client.get(self.endpoint, params=query_params)\n        response.raise_for_status()\n        transactions.extend(response.json()[\"transactions\"])\n        while len(transactions) < response.json()[\"total\"]:\n            query_params[\"offset\"] = len(transactions)\n            response = self.client.get(self.endpoint, params=query_params)\n            response.raise_for_status()\n            transactions.extend(response.json()[\"transactions\"])\n        return transactions\n    except requests.exceptions.HTTPError as e:\n        if e.response.status_code == 404:\n            raise TransactionNotFoundError(\n                f\"No transactions found for account {account_id} between {start_date} and {end_date}\"\n            )\n        else:\n            raise e\n    except Exception as e:\n        frappe.log_error(frappe.get_traceback())\n        raise e", "CodeBleu_score": 38.78297188608437}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t\n    try:\n        # Parse the response\n        response = json.loads(response)\n        institution = response[\"institution\"]\n\n        # Get the access token\n        plaid_connector = PlaidConnector()\n        access_token = plaid_connector.get_access_token(token)\n\n        # Check if the bank already exists\n        bank = frappe.get_doc(\"Bank\", institution[\"name\"])\n        if not bank.exists():\n            # Create a new bank record\n            bank = frappe.new_doc(\"Bank\")\n            bank.bank_name = institution[\"name\"]\n            bank.plaid_institution_id = institution[\"institution_id\"]\n            bank.access_token = access_token\n            bank.save()\n        else:\n            # Update the access token for the existing bank record\n            bank.access_token = access_token\n            bank.save()\n    except Exception as e:\n        # Log any errors that occur\n        frappe.log_error(frappe.get_traceback(), \"Error adding bank institution\")\n\n", "CodeBleu_score": 45.6650508561208}, {"code": "def add_institution(token, response)\n\t\n    try:\n        # Parse the response\n        data = json.loads(response)\n        # Get the access token using the PlaidConnector\n        access_token = PlaidConnector().get_access_token(token)\n        # Check if the bank already exists in the database\n        if not frappe.db.exists(\"Bank\", {\"bank_name\": data[\"institution\"][\"name\"]}):\n            # Create and insert a new bank record\n            bank = frappe.get_doc(\n                {\n                    \"doctype\": \"Bank\",\n                    \"bank_name\": data[\"institution\"][\"name\"],\n                    \"access_token\": access_token,\n                }\n            )\n            bank.insert()\n        else:\n            # Update the access token for the existing bank record\n            bank = frappe.get_doc(\"Bank\", {\"bank_name\": data[\"institution\"][\"name\"]})\n            bank.access_token = access_token\n            bank.save()\n    except Exception as e:\n        # Log any errors that occur during the process\n        frappe.log_error(frappe.get_traceback(), \"Plaid Error\")\n\n", "CodeBleu_score": 55.97614108091461}, {"code": "def add_institution(token, response)\n\t\n    try:\n        # Parse the response\n        data = json.loads(response)\n\n        # Get the access token\n        access_token = PlaidConnector(token).get_access_token(data[\"public_token\"])\n\n        # Check if the bank already exists\n        if not exists(\"Bank\", data[\"metadata\"][\"institution\"][\"name\"]):\n            # Create a new bank record\n            bank = frappe.get_doc(\n                {\n                    \"doctype\": \"Bank\",\n                    \"bank_name\": data[\"metadata\"][\"institution\"][\"name\"],\n                    \"plaid_access_token\": access_token,\n                }\n            )\n            # Insert the bank record\n            bank.insert()\n        else:\n            # Update the access token for the existing bank record\n            bank = frappe.get_doc(\"Bank\", data[\"metadata\"][\"institution\"][\"name\"])\n            bank.plaid_access_token = access_token\n            # Save the bank record\n            bank.save()\n    except Exception as e:\n        frappe.log_error(frappe.get_traceback(), \"Plaid Error\")", "CodeBleu_score": 54.76202843879591}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t\n\n    # Determine the start and end dates for transaction retrieval\n    start_date = bank_account.last_integration_date or '1900-01-01'\n    end_date = getdate(today())\n\n    # Attempt to fetch transactions\n    try:\n        transactions = bank.get_transactions(start_date, end_date)\n    except Exception as e:\n        frappe.log_error(e, \"Failed to retrieve transactions\")\n        return\n\n    # Process transactions into new bank transactions\n    new_transactions = []\n    for transaction in transactions:\n        new_transaction = new_bank_transaction(transaction, bank_account)\n        new_transactions.append(new_transaction)\n\n    # Log the number of new transactions added\n    frappe.logger().info(\"Added {} new transactions\".format(len(new_transactions)))\n\n    # Update the last integration date to the date of the oldest transaction\n    if new_transactions:\n        oldest_transaction = min(new_transactions, key=lambda t: t.transaction_date)\n        bank_account.last_integration_date = oldest_transaction.transaction_date\n        bank_account.save()\n\n", "CodeBleu_score": 29.737108365878683}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        # Determine the start and end dates for transaction retrieval\n        start_date, end_date = get_start_and_end_dates(bank, bank_account)\n\n        # Attempt to fetch the transactions\n        transactions = get_transactions(bank, bank_account, start_date, end_date)\n\n        # Process the transactions into new bank transactions\n        new_bank_transactions = []\n        for transaction in transactions:\n            try:\n                new_bank_transaction = process_transaction(transaction)\n                new_bank_transactions.append(new_bank_transaction)\n            except Exception:\n                frappe.log_error(frappe.get_traceback())\n\n        # Add the new bank transactions to the database\n        for new_bank_transaction in new_bank_transactions:\n            new_bank_transaction.insert()\n\n        # Update the last integration date to the date of the oldest transaction\n        if new_bank_transactions:\n            oldest_transaction_date = min(\n                [\n                    transaction.transaction_date\n                    for transaction in new_bank_transactions\n                ]\n            )\n            bank_account.db_set(\n                \"last_integration_date\", oldest_transaction_date\n            )\n\n        # Log the number of new transactions added\n        frappe.logger().info(\n            \"Added {} new bank transactions\".format(len(new_bank_transactions))\n        )\n\n    except Exception:\n        frappe.log_error(frappe.get_traceback())\n\n", "CodeBleu_score": 28.189378510567565}, {"code": "def sync_transactions(bank, bank_account)\n\t\n\n    start_date = bank_account.last_integration\n    end_date = datetime.date.today()\n\n    if bank_account.last_integration:\n        start_date = add_months(start_date, -3)\n\n    try:\n        transactions = bank.get_transactions(\n            start_date=start_date, end_date=end_date, **bank_account.bank_account_details\n        )\n\n        new_transactions = []\n        for transaction in transactions:\n            if transaction.date > bank_account.last_integration:\n                new_transactions.append(transaction)\n\n        if new_transactions:\n            new_transactions = list(reversed(new_transactions))\n            new_bank_transactions = []\n            for transaction in new_transactions:\n                new_bank_transactions.append(\n                    new_bank_transaction(bank_account, transaction)\n                )\n\n            if new_bank_transactions:\n                BankTransaction.bulk_insert(new_bank_transactions)\n\n            frappe.db.set_value(\n                \"Bank Account\", bank_account.name, \"last_integration\", transactions[-1].date\n            )\n            frappe.db.commit()\n\n            frappe.log_error(\n                \"Integrated {0} new transactions for bank account {1}\".format(\n                    len(new_bank_transactions), bank_account.name\n                )\n            )\n\n    except Exception:\n        frappe.log_error(\"Failed to sync transactions for bank account {0}\".format(bank_account.name), \"Bank Integration\")\n", "CodeBleu_score": 30.153059500212205}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t\n\n    # Construct the query URI\n    query = f\"select * from {entity} maxresults 1000 startposition 1\"\n    uri = f\"{self.qb_api_url}/query?query={query}\"\n\n    # Fetch the total number of entries\n    total_count = self._get(uri)[\"QueryResponse\"][\"totalCount\"]\n\n    # Fetch entries in batches of 1000\n    entries = []\n    start_position = 1\n    while start_position <= total_count:\n        uri = f\"{self.qb_api_url}/query?query={query} startposition {start_position}\"\n        response = self._get(uri)\n        entries.extend(response[\"QueryResponse\"][\"Item\"])\n        start_position += 1000\n\n    # Preprocess and save entries\n    self._preprocess_entries(entries)\n    self._save_entries(entries)\n\n    # Log any exceptions encountered during the process\n    if response.status_code != 200:\n        self._log_error(response.text)\n\n", "CodeBleu_score": 22.220637909871556}, {"code": "def _migrate_entries(self, entity)\n\t\n\n    # Construct the query URI\n    query_uri = f\"{self.qb_company_url}/query?query=SELECT * FROM {entity}\"\n\n    # Determine the total number of entries\n    total_count_response = self._get(query_uri, params={\"countOnly\": \"true\"})\n    total_count = int(total_count_response.json()[\"QueryResponse\"][\"totalCount\"])\n\n    # Retrieve entries in batches of 1000\n    for start_position in range(0, total_count, 1000):\n        try:\n            entries_response = self._get(\n                query_uri, params={\"startPosition\": start_position + 1}\n            )\n            entries = entries_response.json()[\"QueryResponse\"][entity]\n\n            # Preprocess and save entries\n            self._preprocess_entries(entries)\n            self._save_entries(entries)\n        except Exception as e:\n            self._log_error(f\"Error fetching entries for {entity}: {e}\")\n            self._log_error(f\"Response text: {entries_response.text}\")\n\n", "CodeBleu_score": 35.59636561295401}, {"code": "def _migrate_entries(self, entity)\n\t\n    query = \"SELECT * FROM {} STARTPOSITION {} MAXRESULTS {}\".format(\n        entity, self._start_position, self._batch_size\n    )\n    self._log_info(\"Fetching {}\".format(entity))\n    response = self._get(query)\n    try:\n        self._log_info(\"Response: {}\".format(response.text))\n        total_count = int(response.json()[\"QueryResponse\"][\"totalCount\"])\n        self._log_info(\"Total Count: {}\".format(total_count))\n        self._log_info(\"Start Position: {}\".format(self._start_position))\n        self._log_info(\"Batch Size: {}\".format(self._batch_size))\n        self._log_info(\"Total Batches: {}\".format(total_count // self._batch_size))\n        for batch in range(total_count // self._batch_size):\n            self._log_info(\"Batch: {}\".format(batch))\n            response = self._get(query)\n            self._log_info(\"Response: {}\".format(response.text))\n            entries = response.json()[\"QueryResponse\"][entity]\n            if isinstance(entries, dict):\n                entries = [entries]\n            self._log_info(\"Entries: {}\".format(entries))\n            self._preprocess_entries(entries)\n            self._save_entries(entries)\n            self._start_position += self._batch_size\n    except Exception as e:\n        self._log_error(e)\n        self._log_error(response.text)\n        raise e", "CodeBleu_score": 34.342244010857826}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\t\n    if invoice.type == 'journal':\n        self._save_invoice_as_journal_entry(invoice)\n    elif invoice.type == 'sales':\n        self._save_sales_invoice(invoice)\n", "CodeBleu_score": 20.55159094284819}, {"code": "def _save_invoice(self, invoice)\n\t\n    self._generate_quickbooks_id(invoice)\n    linked_transactions = self._get_linked_transactions(invoice)\n    if linked_transactions:\n        self._save_invoice_as_journal_entry(invoice)\n    else:\n        self._save_sales_invoice(invoice)\n\n", "CodeBleu_score": 19.727967501334245}, {"code": "def _save_invoice(self, invoice)\n\t\n    self._set_quickbooks_id(invoice)\n    if self._is_journal_entry(invoice):\n        self._save_invoice_as_journal_entry(invoice)\n    else:\n        self._save_sales_invoice(invoice)\n", "CodeBleu_score": 15.883895455746643}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    holiday_list = frappe.get_all(\"Holiday\", filters={\"parent\": \"Holiday List\"}, fields=[\"holiday_date\"])\n    no_of_visit = cint(no_of_visit)\n    if no_of_visit > 0:\n        interval = (getdate(end_date) - getdate(start_date)).days / no_of_visit\n        for i in range(no_of_visit):\n            schedule_date = add_days(getdate(start_date), interval * (i + 1))\n            schedule_date = self.validate_schedule_date_for_holiday_list(schedule_date, holiday_list)\n            schedule_list.append(schedule_date)\n    return schedule_list\n\n", "CodeBleu_score": 43.119483706401546}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    # Calculate the interval between visits\n    interval = (end_date - start_date).days / no_of_visit\n\n    # Create a list of schedule dates\n    schedule_list = []\n    for i in range(no_of_visit):\n        schedule_date = start_date + timedelta(days=i * interval)\n        schedule_list.append(schedule_date)\n\n    # Adjust the schedule dates to avoid holidays\n    holiday_list = self.validate_schedule_date_for_holiday_list(schedule_list, sales_person)\n    if holiday_list:\n        for holiday_date in holiday_list:\n            if holiday_date in schedule_list:\n                schedule_list.remove(holiday_date)\n                schedule_list.append(holiday_date + timedelta(days=1))\n\n    return schedule_list\n\n", "CodeBleu_score": 31.812370279128814}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    schedule_list.append(start_date)\n    no_of_visit = cint(no_of_visit)\n    if no_of_visit > 1:\n        interval = (end_date - start_date).days / (no_of_visit - 1)\n        for i in range(1, no_of_visit):\n            schedule_list.append(add_days(start_date, interval * i))\n    for i in range(len(schedule_list)):\n        schedule_list[i] = self.validate_schedule_date_for_holiday_list(\n            schedule_list[i], sales_person\n        )\n    return schedule_list\n\n", "CodeBleu_score": 35.54172111494493}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\t        $method = request()->get('method');\n        $url = route('admin.bulk.action', [\n            'handle' => $handle = $data['handle'] ?? $this->getSelectedInput(request()),\n        ]);\n\n        $data = [\n            'status' => true,\n            'message' => $this->findTranslation('success'),\n            'data' => [\n                'title' => $data['title'] ?? $this->findTranslation('title'),\n                'path' => $url,\n                'handle' => $handle,\n                'html' => view('components.index.bulkaction.modal', [\n                    'url' => $url,\n                    'handle' => $handle,\n                    'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n                    'html' => view($view, $data)->render(),\n                ])->render(),\n            ],\n        ];\n\n        if ($method == 'get') {\n            return response()->json($data);\n        }\n\n        return response()->json($data);\n    }", "CodeBleu_score": 64.3666395106118}, {"code": "<?\n   public function response($view, $data = []){\n\t        $method = request()->get('method');\n        $url = route('bulk-action.' . $method);\n        $handle = $method . '-' . time();\n\n        return response()->json([\n            'status' => true,\n            'message' => trans('global.message_bulk_action', ['action' => $method]),\n            'data' => [\n                'title' => $this->findTranslation($method),\n                'path' => $url,\n                'handle' => $handle,\n                'html' => view('components.index.bulkaction.modal', [\n                    'url' => $url,\n                    'handle' => $handle,\n                    'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n                    'html' => view($view, $data)->render(),\n                ])->render(),\n            ],\n        ]);\n    }", "CodeBleu_score": 54.45790687578731}, {"code": "<?\n   public function response($view, $data = []){\n\t        $method = request()->get('method');\n        $url = route('admin.bulk.action', [\n            'method' => $method,\n            'handle' => $this->getSelectedInput(request())\n        ]);\n        $handle = $this->findTranslation($this->handle);\n\n        return response()->json([\n            'success' => true,\n            'message' => trans('admin.bulk_action.success'),\n            'data' => [\n                'title' => trans('admin.bulk_action.title', ['action' => $handle]),\n                'path' => $url,\n                'handle' => $handle,\n                'html' => view('components.index.bulkaction.modal', [\n                    'url' => $url,\n                    'handle' => $handle,\n                    'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n                    'html' => view($view, $data)->render(),\n                ])->render(),\n            ]\n        ]);\n    }", "CodeBleu_score": 59.12768564663339}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t    try {\n        $selectedRecords = $this->getSelectedRecords($request);\n        foreach ($selectedRecords as $contact) {\n            $this->dispatch(new DeleteContact($contact));\n        }\n    } catch (\\Exception $e) {\n        flash($e->getMessage())->error()->important();\n    }\n}", "CodeBleu_score": 67.58019990965121}, {"code": "<?\npublic function deleteContacts($request){\n\t    $selectedRecords = $this->getSelectedRecords($request);\n\n    foreach ($selectedRecords as $record) {\n        try {\n            $this->dispatch(new DeleteContact($record));\n        } catch (Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 60.29543923514176}, {"code": "<?\npublic function deleteContacts($request){\n\t    $selectedRecords = $this->getSelectedRecords($request, 'contacts');\n\n    foreach ($selectedRecords as $record) {\n        try {\n            $this->dispatch(new DeleteContact($record));\n        } catch (Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 74.61359973884913}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getSelectedRecords($request);\n    foreach ($transactions as $transaction) {\n        try {\n            $this->dispatch(new DeleteTransaction($transaction));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error();\n        }\n    }\n}", "CodeBleu_score": 69.97841934404008}, {"code": "<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getSelectedRecords($request, 'transactions');\n\n    foreach ($transactions as $transaction) {\n        try {\n            $this->dispatch(new DeleteTransaction($transaction));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error();\n        }\n    }\n}", "CodeBleu_score": 85.29956321398681}, {"code": "<?\npublic function deleteTransactions($request){\n\t    // Retrieve the selected transactions\n    $transactions = $this->getSelectedRecords($request);\n\n    // Iterate over each transaction\n    foreach ($transactions as $transaction) {\n        try {\n            // Dispatch a job to delete the transaction\n            $this->dispatch(new DeleteTransaction($transaction));\n        } catch (\\Exception $e) {\n            // If an exception occurs, flash an error message\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 77.610143422607}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\t    $requestClass = get_class($this);\n    if (!class_exists($requestClass) || !($this instanceof FormRequest)) {\n        return;\n    }\n\n    $request = app($requestClass);\n    $rules = $request->rules();\n\n    foreach ($this->getData() as $data) {\n        $request->initialize($this->query(), $data);\n        $request->prepareRules($rules);\n\n        try {\n            app('validator')->make($data, $rules)->validate();\n        } catch (ValidationException $e) {\n            foreach ($e->validator->failed() as $field => $failures) {\n                foreach ($failures as $failure) {\n                    $validator->addFailure($field, $failure[0], $failure[1]);\n                }\n            }\n\n            throw $e;\n        }\n    }\n}", "CodeBleu_score": 44.55146807287399}, {"code": "<?\npublic function withValidator($validator){\n\t    $requestClass = 'App\\\\Http\\\\Requests\\\\' . class_basename($this) . 'Request';\n\n    if (!class_exists($requestClass) || !is_subclass_of($requestClass, FormRequest::class)) {\n        return;\n    }\n\n    $request = resolve($requestClass);\n    $request->initialize($this->all(), $this->route()->parameters());\n    $rules = $request->rules();\n\n    foreach ($this->getData() as $key => $data) {\n        $validator->addRules([$key => $rules]);\n\n        try {\n            $request->prepareForValidation();\n            $request->setContainer(app())->validateResolved();\n        } catch (ValidationException $e) {\n            foreach ($e->validator->failed() as $field => $errors) {\n                foreach ($errors as $error) {\n                    $validator->addFailure($field, $error['rule'], $error['params']);\n                }\n            }\n\n            throw $e;\n        }\n    }\n}", "CodeBleu_score": 43.5655967613847}, {"code": "<?\npublic function withValidator($validator){\n\t    // Get the current request class\n    $requestClass = get_class($this);\n\n    // Check if the request class exists and is an instance of FormRequest\n    if (!class_exists($requestClass) || !($this instanceof FormRequest)) {\n        return;\n    }\n\n    // Get the request instance\n    $request = $this->getRequestForValidation();\n\n    // Loop through each data row\n    foreach ($validator->getData() as $data) {\n        // Initialize the request with the data\n        $request->initialize($this->query(), $this->request->all(), $this->attributes(), $this->cookies(), $this->files(), $this->server(), $data);\n\n        // Prepare the validation rules\n        $rules = $this->prepareRules($request);\n\n        // Attempt to validate the data\n        try {\n            Validator::make($data, $rules)->validate();\n        } catch (ValidationException $e) {\n            // Add the validation failures to the validator\n            foreach ($e->validator->failed() as $field => $failures) {\n                foreach ($failures as $rule => $params) {\n                    $validator->addFailure($field, $rule, $params);\n                }\n            }\n\n            // Rethrow the exception\n            throw $e;\n        }\n    }\n}", "CodeBleu_score": 52.052295566755724}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    if ($this instanceof ShouldUpdate) {\n        $this->getRequestInstance($arguments[1] ?? null);\n        $this->getModelInstance($arguments[0] ?? null);\n    }\n}", "CodeBleu_score": 22.40490705430777}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    if ($this instanceof ShouldUpdate) {\n        if (isset($arguments[0]) && $arguments[0] instanceof Model) {\n            $this->setModel($arguments[0]);\n        }\n\n        if (isset($arguments[1]) && $arguments[1] instanceof Request) {\n            $this->setRequest($arguments[1]);\n        }\n    }\n}", "CodeBleu_score": 33.96140458743068}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    if ($this instanceof ShouldUpdate) {\n        $this->setModel($arguments[0] ?? null);\n        $this->setRequest($arguments[1] ?? null);\n    }\n}", "CodeBleu_score": 20.49078982350655}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t    $query->usingSearchString()->sortable($sort);\n    if ($this->request->expectsJson() && !$this->request->isNotApi()) {\n        return $query->get();\n    }\n    return $query->paginate($this->request->get('limit', setting('pagination', 15)));\n}", "CodeBleu_score": 32.90844630304829}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t    $sorting = $this->request->get('sorting', $sort);\n    $query->usingSearchString()->sortable($sorting);\n\n    if ($this->request->expectsJson() && !$this->request->isNotApi()) {\n        return $query->get();\n    }\n\n    $limit = $this->request->get('limit', 10);\n    return $query->paginate($limit);\n}", "CodeBleu_score": 47.029237539747285}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t    $sortable = request()->get('sortable') ?? $sort;\n    $query->usingSearchString()->sortable($sortable);\n    if (request()->expectsJson() && !request()->isNotApi()) {\n        return $query->get();\n    }\n    return $query->paginate(request()->get('limit') ?? Setting::get('pagination_limit'))->appends(request()->all());\n}", "CodeBleu_score": 41.49405236847537}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t    $amount_open = $amount_overdue = 0;\n\n    if ($model->status == 'paid') {\n        return [\n            'amount_open' => 0,\n            'amount_overdue' => 0,\n        ];\n    }\n\n    if ($model->status == 'partial') {\n        $amount_open = $model->transactions->sum('amount');\n    }\n\n    if ($model->due_at < Date::today()->toDateString()) {\n        $amount_overdue = $model->amount - $amount_open;\n    } else {\n        $amount_open = $model->amount - $amount_overdue;\n    }\n\n    return [\n        'amount_open' => $amount_open,\n        'amount_overdue' => $amount_overdue,\n    ];\n}", "CodeBleu_score": 46.829437815256405}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t    $amount_open = 0;\n    $amount_overdue = 0;\n\n    if ($model->status == 'paid') {\n        return [\n            'amount_open' => $amount_open,\n            'amount_overdue' => $amount_overdue,\n        ];\n    }\n\n    if ($model->status == 'partial') {\n        $transactions = $model->transactions;\n\n        foreach ($transactions as $transaction) {\n            $amount_open += $transaction->getAmountConvertedToDefault();\n        }\n    }\n\n    if ($model->due_at > Date::today()->toDateString()) {\n        $amount_open = $model->getAmountConvertedToDefault();\n    } else {\n        $amount_overdue = $model->getAmountConvertedToDefault();\n    }\n\n    return [\n        'amount_open' => $amount_open,\n        'amount_overdue' => $amount_overdue,\n    ];\n}", "CodeBleu_score": 47.172402034591535}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t    $amountOpen = 0;\n    $amountOverdue = 0;\n\n    if ($model->status == 'paid') {\n        return [$amountOpen, $amountOverdue];\n    }\n\n    if ($model->status == 'partial') {\n        $amountOpen = $model->transactions()\n            ->where('type', 'income')\n            ->sum('amount');\n    }\n\n    if ($model->due_at > Date::today()->toDateString()) {\n        $amountOverdue = $amountOpen;\n        $amountOpen = 0;\n    }\n\n    return [$amountOpen, $amountOverdue];\n}", "CodeBleu_score": 47.70435699551901}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n    $results = ($total = $this->toBase()->getCountForPagination()) ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 92.65652046498181}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $results = ($total = $this->toBase()->getCountForPagination())\n                ? $this->forPage($page, $perPage)->get($columns)\n                : $this->model->newCollection();\n\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 92.82798015255848}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $results = ($total = $this->toBase()->getCountForPagination())\n                ? $this->forPage($page, $perPage)->get($columns)\n                : $this->model->newCollection();\n\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 92.82798015255848}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t    $reconciliations = $this->getSelectedRecords($request, 'reconciliations');\n\n    \\DB::transaction(function () use ($reconciliations) {\n        foreach ($reconciliations as $reconciliation) {\n            $reconciliation->status = 'reconciled';\n            $reconciliation->save();\n\n            Transaction::where('account_id', $reconciliation->account_id)\n                ->isNotReconciled()\n                ->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])\n                ->each(function ($item) {\n                    $item->reconciled = 1;\n                    $item->save();\n                });\n        }\n    });\n}", "CodeBleu_score": 62.540214938812234}, {"code": "<?\npublic function reconcile($request){\n\t    $reconciliations = $this->getSelectedRecords($request, 'reconciliations');\n\n    \\DB::transaction(function () use ($reconciliations) {\n        foreach ($reconciliations as $reconciliation) {\n            $reconciliation->status = 'reconciled';\n            $reconciliation->save();\n\n            Transaction::where('account_id', $reconciliation->account_id)\n                ->isNotReconciled()\n                ->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])\n                ->each(function ($item) {\n                    $item->reconciled = 1;\n                    $item->save();\n                });\n        }\n    });\n}", "CodeBleu_score": 62.540214938812234}, {"code": "<?\npublic function reconcile($request){\n\t    $reconciliations = $this->getSelectedRecords($request, 'reconciliations');\n\n    \\DB::transaction(function () use ($reconciliations) {\n        foreach ($reconciliations as $reconciliation) {\n            $reconciliation->status = 'reconciled';\n            $reconciliation->save();\n\n            Transaction::where('account_id', $reconciliation->account_id)\n                ->isNotReconciled()\n                ->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])\n                ->each(function ($item) {\n                    $item->reconciled = 1;\n                    $item->save();\n                });\n        }\n    });\n}", "CodeBleu_score": 62.540214938812234}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t    // Retrieve and delete existing invitations for the user\n    $invitations = UserInvitation::where('user_id', $this->user->id)->get();\n    foreach ($invitations as $invitation) {\n        $invitation->delete();\n    }\n\n    // Create a new invitation with a unique token\n    $invitation = UserInvitation::create([\n        'user_id' => $this->user->id,\n        'token' => Str::uuid(),\n    ]);\n\n    // Attempt to dispatch a notification job to notify the user\n    if (!$this->dispatch(new UserInvitationNotificationJob($invitation))) {\n        throw new \\Exception('Failed to send invitation notification');\n    }\n\n    // Return the newly created invitation\n    return $invitation;\n}", "CodeBleu_score": 45.305578515366015}, {"code": "<?\npublic function handle(): UserInvitation{\n\t    $invitations = UserInvitation::where('user_id', $this->user->id)->get();\n\n    foreach ($invitations as $invitation) {\n        $invitation->delete();\n    }\n\n    $invitation = UserInvitation::create([\n        'user_id' => $this->user->id,\n        'token' => Str::uuid(),\n    ]);\n\n    try {\n        $this->dispatch(new NotifyUserOfInvitation($invitation));\n    } catch (Exception $e) {\n        throw new Exception('Failed to send invitation notification: ' . $e->getMessage());\n    }\n\n    return $invitation;\n}", "CodeBleu_score": 48.09516566631432}, {"code": "<?\npublic function handle(): UserInvitation{\n\t    $this->user->invitations()->delete();\n\n    $invitation = UserInvitation::create([\n        'user_id' => $this->user->id,\n        'token' => Str::uuid(),\n    ]);\n\n    try {\n        $this->dispatch(new SendInvitationNotificationJob($this->user, $invitation));\n    } catch (Exception $e) {\n        throw new Exception(__('Could not send invitation notification.'));\n    }\n\n    return $invitation;\n}", "CodeBleu_score": 31.242461988865518}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\t    if ($this->model->isTransferTransaction()) {\n        throw new UnauthorizedException(trans('transactions.transfer_transaction_unauthorized'));\n    }\n    if ($this->model->isReconciled()) {\n        throw new Exception(trans('transactions.reconciled_transaction_warning'));\n    }\n}", "CodeBleu_score": 35.35921419263294}, {"code": "<?\npublic function authorize(): void{\n\t    if ($this->model->isReconciled()) {\n        throw new Exception('Transaction has been reconciled.');\n    }\n\n    if ($this->model->isTransferTransaction()) {\n        throw new UnauthorizedException('Unauthorized.');\n    }\n}", "CodeBleu_score": 37.380523238232364}, {"code": "<?\npublic function authorize(): void{\n\t    if ($this->model->isReconciled) {\n        throw new Exception('Cannot authorize a reconciled transaction');\n    }\n\n    if ($this->model->isTransferTransaction) {\n        throw new UnauthorizedException('Cannot authorize a transfer transaction');\n    }\n}", "CodeBleu_score": 30.389742694340978}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t    if (getTenantIdByToken() == 0) {\n        return false;\n    } else {\n        if (tableName.equals(\"table1\") || tableName.equals(\"table2\")) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}", "CodeBleu_score": 14.564511175957762}, {"code": "public boolean doTableFilter(String tableName){\n\t    // Get the tenant ID from the request's access token\n    int tenantId = getTenantIdByToken();\n\n    // If the tenant ID is not zero, allow access to certain predefined tables\n    if (tenantId != 0) {\n        List<String> allowedTables = Arrays.asList(\"table1\", \"table2\", \"table3\");\n        return allowedTables.contains(tableName);\n    }\n\n    // If the tenant ID is zero, deny access to all tables\n    return false;\n}", "CodeBleu_score": 19.85888044087842}, {"code": "public boolean doTableFilter(String tableName){\n\t    if (getTenantIdByToken() != 0) {\n        if (tableName.equals(\"table1\") || tableName.equals(\"table2\") || tableName.equals(\"table3\")) {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}", "CodeBleu_score": 17.279359640307508}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 63.86783791790074}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 75.08759747992765}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 75.08759747992765}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    try {\n        List<Account> accounts = accountService.findBySelect(request);\n        List<Map<String, Object>> accountList = new ArrayList<>();\n        for (Account account : accounts) {\n            Map<String, Object> accountMap = new HashMap<>();\n            accountMap.put(\"id\", account.getId());\n            accountMap.put(\"name\", account.getName());\n            accountList.add(accountMap);\n        }\n        return JSON.toJSONString(accountList);\n    } catch (Exception e) {\n        logger.error(\"Failed to retrieve account list\", e);\n        return \"{\\\"success\\\": false, \\\"message\\\": \\\"Failed to retrieve account list\\\"}\";\n    }\n}", "CodeBleu_score": 39.420978983043746}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    try {\n        List<Account> accounts = accountService.findBySelect(request.getParameter(\"select\"));\n        List<Map<String, String>> accountList = new ArrayList<>();\n        for (Account account : accounts) {\n            Map<String, String> accountMap = new HashMap<>();\n            accountMap.put(\"id\", account.getId());\n            accountMap.put(\"name\", account.getName());\n            accountList.add(accountMap);\n        }\n        return new Gson().toJson(accountList);\n    } catch (Exception e) {\n        logger.error(\"Error retrieving accounts\", e);\n        return \"failure\";\n    }\n}", "CodeBleu_score": 38.932769483502554}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    try {\n        List<Account> accountList = accountService.findAll();\n        List<Map<String, Object>> accountMapList = new ArrayList<>();\n        for (Account account : accountList) {\n            Map<String, Object> accountMap = new HashMap<>();\n            accountMap.put(\"id\", account.getId());\n            accountMap.put(\"name\", account.getName());\n            accountMap.put(\"type\", account.getType());\n            accountMap.put(\"status\", account.getStatus());\n            accountMap.put(\"dateCreated\", account.getDateCreated());\n            accountMap.put(\"dateModified\", account.getDateModified());\n            accountMap.put(\"createdBy\", account.getCreatedBy());\n            accountMap.put(\"modifiedBy\", account.getModifiedBy());\n            accountMapList.add(accountMap);\n        }\n        return new Gson().toJson(accountMapList);\n    } catch (Exception e) {\n        logger.error(\"Error retrieving account list: \" + e.getMessage());\n        return new Gson().toJson(new ResponseMessage(ResponseMessage.Type.failure, \"Error retrieving account list\"));\n    }\n}", "CodeBleu_score": 42.07207465962867}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<Account> list = accountService.listWithBalance(name, serialNo, currentPage, pageSize);\n        Integer count = accountService.listWithBalanceCount(name, serialNo);\n        response.setData(list);\n        response.setCount(count);\n    } catch (Exception e) {\n        log.error(e.getMessage(), e);\n        response.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n        response.setMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 40.90106157068879}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo response = new BaseResponseInfo();\n        try {\n            Page<Account> page = accountService.listWithBalance(name, serialNo, currentPage, pageSize);\n            response.setCode(200);\n            response.setMessage(\"success\");\n            response.put(\"page\", page);\n        } catch (Exception e) {\n            response.setCode(500);\n            response.setMessage(e.getMessage());\n            logger.error(\"error\", e);\n        }\n        return response;\n    }", "CodeBleu_score": 35.08449529363091}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response.setData(accountService.listWithBalance(name, serialNo, currentPage, pageSize));\n        response.setCount(accountService.listWithBalanceCount(name, serialNo));\n    } catch (Exception e) {\n        log.error(\"listWithBalance error\", e);\n        response.setCode(BaseResponseInfo.FAILED);\n        response.setMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 32.451952774365175}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        Statistics statistics = accountService.getStatistics(name, serialNo);\n        response.setCode(200);\n        response.setData(statistics);\n    } catch (Exception e) {\n        log.error(\"get statistics error\", e);\n        response.setCode(500);\n        response.setMessage(\"get statistics error\");\n    }\n    return response;\n}", "CodeBleu_score": 42.236405988871155}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        Statistics statistics = accountService.getStatistics(name, serialNo);\n        response.setCode(200);\n        response.setData(statistics);\n    } catch (Exception e) {\n        log.error(e.getMessage(), e);\n        response.setCode(500);\n        response.setMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 45.998214002358885}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response.setData(accountService.getStatistics(name, serialNo));\n        response.setCode(200);\n    } catch (Exception e) {\n        logger.error(\"get statistics error: \" + e.getMessage(), e);\n        response.setCode(500);\n        response.setMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 39.64777552769683}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<AccountHead> accountHeadList = accountHeadService.getDetailByNumber(billNo);\n        if (accountHeadList.size() > 0) {\n            response.setStatusCode(200);\n            response.setData(accountHeadList.get(0));\n        }\n    } catch (Exception e) {\n        log.error(e.getMessage(), e);\n        response.setStatusCode(500);\n        response.setErrorMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 44.00812225673929}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t        BaseResponseInfo response = new BaseResponseInfo();\n        try {\n            List<AccountHead> accountHeadList = accountHeadService.getDetailByNumber(billNo);\n            if (accountHeadList != null && accountHeadList.size() > 0) {\n                response.setData(accountHeadList.get(0));\n                response.setStatus(200);\n            }\n        } catch (Exception e) {\n            log.error(e.getMessage());\n            response.setStatus(500);\n            response.setMessage(e.getMessage());\n        }\n        return response;\n    }", "CodeBleu_score": 39.73192280211602}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t   BaseResponseInfo response = new BaseResponseInfo();\n   try {\n     List<AccountHeadInfo> list = accountHeadService.getDetailByNumber(billNo);\n     if (list.size() > 0) {\n       response.setStatusCode(200);\n       response.setData(list.get(0));\n     }\n   } catch (Exception e) {\n     log.error(\"getDetailByNumber error\", e);\n     response.setStatusCode(500);\n     response.setMessage(\"error\");\n   }\n   return response;\n }", "CodeBleu_score": 39.8363356561168}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        Depot depot = depotService.findDepotByCurrentUser(request);\n        response.setCode(200);\n        response.setData(depot);\n    } catch (Exception e) {\n        log.error(e.getMessage(), e);\n        response.setCode(500);\n        response.setMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 45.52400607699577}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        DepotService depotService = new DepotService();\n        List<Depot> depotList = depotService.findDepotByCurrentUser(request);\n        response.setCode(200);\n        response.setData(depotList);\n    } catch (Exception e) {\n        log.error(\"error\", e);\n        response.setCode(500);\n        response.setMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 42.159523079827906}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        DepotInfo depotInfo = depotService.findDepotByCurrentUser(request);\n        response.setCode(200);\n        response.setData(depotInfo);\n    } catch (Exception e) {\n        log.error(\"findDepotByCurrentUser error\", e);\n        response.setCode(500);\n        response.setMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 41.6326785161704}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    JSONArray jsonArray = new JSONArray();\n    List<Function> functionList = functionService.findRoleFunction(type, keyId);\n    JSONObject jsonObject = new JSONObject();\n    jsonObject.put(\"functionList\", functionList);\n    if (!getTenantIdByToken(request).equals(\"000000\")) {\n        jsonObject.put(\"functionList\", functionList.stream().filter(function -> !function.getFunctionName().equals(\"\u7cfb\u7edf\u7ba1\u7406\"))\n                .collect(Collectors.toList()));\n    }\n    jsonArray.add(jsonObject);\n    return jsonArray;\n}", "CodeBleu_score": 24.090778801659766}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    JSONArray jsonArray = new JSONArray();\n    List<Map<String, Object>> list = null;\n    try {\n        list = roleFunctionService.findRoleFunction(type, keyId);\n    } catch (Exception e) {\n        log.error(e.getMessage());\n    }\n    JSONObject jsonObject = new JSONObject();\n    jsonObject.put(\"functions\", list);\n    if (!getTenantIdByToken(request).equals(\"1\")) {\n        jsonObject.put(\"functions\", list.stream().filter(item -> !item.get(\"name\").equals(\"\u7cfb\u7edf\u7ba1\u7406\"))\n                .collect(Collectors.toList()));\n    }\n    jsonArray.add(jsonObject);\n    return jsonArray;\n}", "CodeBleu_score": 27.60465005932534}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    JSONArray jsonArray = new JSONArray();\n    List<Function> functionList = null;\n    try {\n        functionList = functionService.findRoleFunction(type, keyId);\n        JSONObject jsonObject = new JSONObject();\n        jsonObject.put(\"functionList\", functionList);\n        if (!\"admin\".equals(getTenantIdByToken(request))) {\n            List<Function> functionList1 = new ArrayList<>();\n            for (Function function : functionList) {\n                if (!\"\u7cfb\u7edf\u7ba1\u7406\".equals(function.getFunctionName())) {\n                    functionList1.add(function);\n                }\n            }\n            jsonObject.put(\"functionList\", functionList1);\n        }\n        jsonArray.add(jsonObject);\n        return jsonArray;\n    } catch (Exception e) {\n        logger.error(e.getMessage());\n        throw e;\n    }\n}", "CodeBleu_score": 37.18164564635785}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        PlatformConfigInfo platformConfigInfo = platformConfigService.getInfoByKey(platformKey);\n        response.setCode(200);\n        response.setData(platformConfigInfo);\n    } catch (Exception e) {\n        logger.error(\"getInfoByKey error:\", e);\n        response.setCode(500);\n        response.setMessage(\"error\");\n    }\n    return response;\n}", "CodeBleu_score": 44.191352658123925}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response.setData(platformConfigService.getInfoByKey(platformKey));\n        response.setCode(200);\n    } catch (Exception e) {\n        log.error(\"getInfoByKey\", e);\n        response.setCode(500);\n        response.setMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 40.46425753853869}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response.setData(platformConfigService.getInfoByKey(platformKey));\n        response.setCode(200);\n    } catch (Exception e) {\n        log.error(\"getInfoByKey error:\", e);\n        response.setCode(500);\n        response.setMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 40.4583218221518}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> systemConfigList = systemConfigService.getList();\n        if (systemConfigList != null && systemConfigList.size() > 0) {\n            response.setCode(200);\n            response.setData(systemConfigList.get(0));\n        }\n    } catch (Exception e) {\n        logger.error(\"\u83b7\u53d6\u5f53\u524d\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\", e);\n        response.setCode(500);\n        response.setMessage(\"\u83b7\u53d6\u5f53\u524d\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\");\n    }\n    return response;\n}", "CodeBleu_score": 39.06688735320466}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> systemConfigList = systemConfigService.getSystemConfigList(new SystemConfig());\n        if (CollectionUtils.isNotEmpty(systemConfigList)) {\n            response.setCode(200);\n            response.setData(systemConfigList.get(0));\n        } else {\n            response.setCode(500);\n            response.setMessage(\"\u83b7\u53d6\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\");\n        }\n    } catch (Exception e) {\n        logger.error(\"\u83b7\u53d6\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\", e);\n        response.setCode(500);\n        response.setMessage(\"\u83b7\u53d6\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\");\n    }\n    return response;\n}", "CodeBleu_score": 34.42813907722137}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> systemConfigList = systemConfigService.getSystemConfigList();\n        if (systemConfigList != null && systemConfigList.size() > 0) {\n            response.setCode(200);\n            response.setData(systemConfigList.get(0));\n        }\n    } catch (Exception e) {\n        logger.error(\"getCurrentInfo error\", e);\n        response.setCode(500);\n        response.setData(\"getCurrentInfo error\");\n    }\n    return response;\n}", "CodeBleu_score": 38.10063640168973}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    BaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n    try {\n        String businessPath = getParameter(request, \"businessPath\");\n        MultipartFile file = getFile(request);\n        if (file != null) {\n            String fileName = file.getOriginalFilename();\n            if (isNotEmpty(fileName)) {\n                String fileType = fileName.substring(fileName.lastIndexOf(\".\") + 1);\n                String filePath = uploadLocal(file, businessPath, fileType);\n                if (isNotEmpty(filePath)) {\n                    baseResponseInfo.setCode(200);\n                    baseResponseInfo.setData(filePath);\n                } else {\n                    baseResponseInfo.setCode(500);\n                    baseResponseInfo.setMessage(\"\u4e0a\u4f20\u5931\u8d25\");\n                }\n            }\n        }\n    } catch (Exception e) {\n        baseResponseInfo.setCode(500);\n        baseResponseInfo.setMessage(\"\u4e0a\u4f20\u5931\u8d25\");\n        log.error(\"\u4e0a\u4f20\u5931\u8d25\", e);\n    }\n    return baseResponseInfo;\n}", "CodeBleu_score": 38.489716576340236}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    BaseResponseInfo responseInfo = new BaseResponseInfo();\n    try {\n        String businessPath = request.getParameter(\"businessPath\");\n        MultipartFile file = getFile(request);\n        if (file == null) {\n            responseInfo.setCode(BaseResponseInfo.FAIL);\n            responseInfo.setData(\"\u4e0a\u4f20\u5931\u8d25\");\n            return responseInfo;\n        }\n        String fileName = file.getOriginalFilename();\n        if (isNotEmpty(businessPath)) {\n            businessPath = businessPath + \"/\";\n        }\n        String filePath = businessPath + fileName;\n        String uploadType = request.getParameter(\"uploadType\");\n        if (isNotEmpty(uploadType) && uploadType.equals(\"aliOss\")) {\n            uploadAliOss(file, filePath);\n        } else {\n            uploadLocal(file, filePath);\n        }\n        responseInfo.setCode(BaseResponseInfo.SUCCESS);\n        responseInfo.setData(filePath);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        responseInfo.setCode(BaseResponseInfo.FAIL);\n        responseInfo.setData(getMessage(\"response.error\"));\n    }\n    return responseInfo;\n}", "CodeBleu_score": 38.51871563429971}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    BaseResponseInfo responseInfo = new BaseResponseInfo();\n    try {\n        String businessPath = request.getParameter(\"businessPath\");\n        MultipartFile file = getFile(request);\n        if (file == null) {\n            responseInfo.setCode(ResponseCode.ERROR.getCode());\n            responseInfo.setData(\"\u4e0a\u4f20\u5931\u8d25\uff0c\u672a\u83b7\u53d6\u5230\u6587\u4ef6\uff01\");\n            return responseInfo;\n        }\n        if (businessPath == null || \"\".equals(businessPath)) {\n            businessPath = \"\";\n        }\n        if (fileUploadType.equals(FileUploadType.LOCAL)) {\n            uploadLocal(businessPath, file, responseInfo);\n        } else if (fileUploadType.equals(FileUploadType.ALIOSS)) {\n            uploadAliOss(businessPath, file, responseInfo);\n        }\n    } catch (Exception e) {\n        logger.error(\"\u4e0a\u4f20\u5931\u8d25\", e);\n        responseInfo.setCode(ResponseCode.ERROR.getCode());\n        responseInfo.setData(\"\u4e0a\u4f20\u5931\u8d25\uff01\");\n    }\n    return responseInfo;\n}", "CodeBleu_score": 37.605346640440125}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t    try {\n        // Extract the title, head, tip, and data list from the JSON object\n        String title = jsonObject.getString(\"title\");\n        String head = jsonObject.getString(\"head\");\n        String tip = jsonObject.getString(\"tip\");\n        JSONArray dataList = jsonObject.getJSONArray(\"dataList\");\n\n        // Call the service to perform the export\n        OutputStream outputStream = exportExcelService.exportExcel(title, head, tip, dataList);\n\n        // Write the output to the HTTP response\n        response.setHeader(\"Content-Disposition\", \"attachment;filename=\" + URLEncoder.encode(title + \".xls\", \"UTF-8\"));\n        response.setContentType(\"application/vnd.ms-excel;charset=utf-8\");\n        IOUtils.copy(outputStream, response.getOutputStream());\n    } catch (Exception e) {\n        // Handle and log any exceptions that occur during the process\n        log.error(\"exportExcelByParam error\", e);\n        throw new RuntimeException(\"exportExcelByParam error\");\n    }\n}", "CodeBleu_score": 53.33388633748424}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t    try {\n        String title = jsonObject.getString(\"title\");\n        String head = jsonObject.getString(\"head\");\n        String tip = jsonObject.getString(\"tip\");\n        JSONArray dataList = jsonObject.getJSONArray(\"dataList\");\n        service.exportExcelByParam(title, head, tip, dataList, response);\n    } catch (Exception e) {\n        e.printStackTrace();\n        log.error(\"\u5bfc\u51fa\u5931\u8d25\");\n    }\n}", "CodeBleu_score": 79.97068981391406}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t    try {\n        String title = jsonObject.getString(\"title\");\n        String head = jsonObject.getString(\"head\");\n        String tip = jsonObject.getString(\"tip\");\n        JSONArray dataList = jsonObject.getJSONArray(\"dataList\");\n        service.exportExcelByParam(title, head, tip, dataList, response);\n    } catch (Exception e) {\n        logger.error(\"\u5bfc\u51faExcel\u5f02\u5e38\", e);\n    }\n}", "CodeBleu_score": 80.62957550551097}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t    Account account = new Account();\n    account.setName(obj.getString(\"name\"));\n    account.setInitialAmount(obj.getDouble(\"initialAmount\"));\n    account.setIsDefault(obj.getBoolean(\"isDefault\"));\n    account.setEnabled(true);\n    int result = accountMapper.insertSelective(account);\n    insertLog(account.getId(),\"insert\",account.toString(),request);\n    return result;\n}", "CodeBleu_score": 26.858334112566606}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t    Account account = new Account();\n    account.setName(obj.getString(\"name\"));\n    account.setInitialAmount(obj.getBigDecimal(\"initialAmount\"));\n    if(account.getInitialAmount() == null) {\n        account.setInitialAmount(new BigDecimal(0));\n    }\n    List<Account> accounts = getAccountByParam(new Account());\n    if(accounts.size() == 0) {\n        account.setIsDefault(1);\n    }\n    account.setEnabled(1);\n    int result = insertSelective(account);\n    insertLog(account, request);\n    return result;\n}", "CodeBleu_score": 36.493772187250165}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t    int result = 0;\n    try {\n        Account account = new Account();\n        account.init(obj);\n        if(account.getInitialAmount() == null) {\n            account.setInitialAmount(0);\n        }\n        if(getAccountByParam(account.getUserId(), account.getName(), account.getType()) == null) {\n            account.setIsDefault(true);\n        }\n        account.setEnabled(true);\n        result = insertSelective(account);\n        insertLog(account, request);\n    } catch (Exception e) {\n        writeFail(e.getMessage());\n        throw e;\n    }\n    return result;\n}", "CodeBleu_score": 41.31654034316412}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    try {\n        return countsByAccount.map(name, serialNo);\n    } catch (Exception e) {\n        log.error(\"Error while counting accounts with name {} and serial number {}\", name, serialNo, e);\n        return null;\n    }\n}", "CodeBleu_score": 30.51567841890054}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    try {\n        return countsByAccount.get(new Account(name, serialNo));\n    } catch (Exception e) {\n        log.error(\"Error while getting count for account with name {} and serial number {}\", name, serialNo, e);\n        return null;\n    }\n}", "CodeBleu_score": 28.45805796179467}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    try {\n        return mapper.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        log.error(\"listWithBalanceCount error\", e);\n        return null;\n    }\n}", "CodeBleu_score": 30.20415842895711}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    try {\n        int result = depotItemMapper.deleteByPrimaryKey(id);\n        return result;\n    } catch (Exception e) {\n        log.error(\"\u5220\u9664\u4ed3\u5e93\u7269\u54c1\u5931\u8d25\", e);\n        throw new Exception(\"\u5220\u9664\u4ed3\u5e93\u7269\u54c1\u5931\u8d25\");\n    }\n}", "CodeBleu_score": 48.539377856958566}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    try {\n        int result = depotItemMapper.deleteByPrimaryKey(id);\n        return result;\n    } catch (Exception e) {\n        logger.error(\"delete depot item error\", e);\n        throw e;\n    }\n}", "CodeBleu_score": 48.74878892633239}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    try {\n        return depotItemMapper.deleteByPrimaryKey(id);\n    } catch (Exception e) {\n        log.error(\"\u5220\u9664\u4ed3\u5e93\u7269\u54c1\u5931\u8d25\", e);\n        throw new Exception(\"\u5220\u9664\u4ed3\u5e93\u7269\u54c1\u5931\u8d25\");\n    }\n}", "CodeBleu_score": 32.81076754231433}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t    CloseableHttpClient httpClient = HttpClients.createDefault();\n    String requestURL = \"http://localhost:8080/addNode?projectName=\" + projectName + \"&nodeType=\" + nodeType + \"&nodeKey=\" + nodeKey;\n    HttpGet request = new HttpGet(requestURL);\n    try {\n        CloseableHttpResponse response = httpClient.execute(request);\n        HttpEntity entity = response.getEntity();\n        if (entity != null) {\n            String result = EntityUtils.toString(entity);\n            JSONObject json = new JSONObject(result);\n            return json.has(\"key\");\n        }\n    } catch (IOException | JSONException e) {\n        e.printStackTrace();\n    } finally {\n        try {\n            httpClient.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return false;\n}", "CodeBleu_score": 44.420986704562615}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t    CloseableHttpClient httpClient = HttpClients.createDefault();\n    String url = \"http://localhost:8080/addNode?projectName=\" + projectName + \"&nodeType=\" + nodeType + \"&nodeKey=\" + nodeKey;\n    HttpGet request = new HttpGet(url);\n    try {\n        HttpResponse response = httpClient.execute(request);\n        HttpEntity entity = response.getEntity();\n        if (entity != null) {\n            String result = EntityUtils.toString(entity);\n            JSONObject json = new JSONObject(result);\n            if (json.has(\"key\")) {\n                return true;\n            }\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        try {\n            httpClient.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return false;\n}", "CodeBleu_score": 46.866515220500794}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t    CloseableHttpClient httpClient = HttpClients.createDefault();\n    String requestUrl = \"http://localhost:8080/addNode?projectName=\" + projectName + \"&nodeType=\" + nodeType + \"&nodeKey=\" + nodeKey;\n    HttpGet request = new HttpGet(requestUrl);\n    try {\n        CloseableHttpResponse response = httpClient.execute(request);\n        HttpEntity entity = response.getEntity();\n        if (entity != null) {\n            String responseString = EntityUtils.toString(entity);\n            JSONObject jsonObject = new JSONObject(responseString);\n            return jsonObject.has(\"key\");\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        try {\n            httpClient.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return false;\n}", "CodeBleu_score": 44.850776543011065}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t    try (CloseableHttpClient httpClient = HttpClients.createDefault()) {\n        HttpGet request = new HttpGet(String.format(\"http://%s:%s/project/%s/edge/%s?from_type=%s&to_type=%s&from=%s&to=%s\", host, port, projectName, edgeType, fromType, toType, from, to));\n        HttpResponse response = httpClient.execute(request);\n        String json = EntityUtils.toString(response.getEntity());\n        JSONObject jsonObject = new JSONObject(json);\n        if (jsonObject.has(\"key\")) {\n            return true;\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return false;\n}", "CodeBleu_score": 36.246785836698066}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t    CloseableHttpClient httpClient = HttpClients.createDefault();\n    try {\n        String url = \"http://localhost:8080/addEdge\";\n        HttpGet request = new HttpGet(url);\n        UrlEncodedFormEntity params = new UrlEncodedFormEntity(Arrays.asList(\n                new BasicNameValuePair(\"projectName\", projectName),\n                new BasicNameValuePair(\"edgeType\", edgeType),\n                new BasicNameValuePair(\"fromType\", fromType),\n                new BasicNameValuePair(\"toType\", toType),\n                new BasicNameValuePair(\"from\", from),\n                new BasicNameValuePair(\"to\", to)\n        ));\n        request.setEntity(params);\n        HttpResponse response = httpClient.execute(request);\n        HttpEntity entity = response.getEntity();\n        if (entity != null) {\n            String responseString = EntityUtils.toString(entity);\n            JSONObject json = new JSONObject(responseString);\n            if (json.has(\"key\")) {\n                return true;\n            }\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        try {\n            httpClient.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    return false;\n}", "CodeBleu_score": 48.23148392007516}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t    try {\n        CloseableHttpClient httpClient = HttpClients.createDefault();\n        HttpGet httpGet = new HttpGet(\"http://localhost:8080/api/v1/project/\" + projectName + \"/edge/\" + edgeType + \"?fromType=\" + fromType + \"&toType=\" + toType + \"&from=\" + from + \"&to=\" + to);\n        CloseableHttpResponse response = httpClient.execute(httpGet);\n        String jsonResponse = EntityUtils.toString(response.getEntity());\n        JSONObject jsonObject = (JSONObject) new JSONParser().parse(jsonResponse);\n        if (jsonObject.containsKey(\"key\")) {\n            return true;\n        } else {\n            return false;\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n        return false;\n    } finally {\n        httpClient.close();\n    }\n}", "CodeBleu_score": 49.28444546832193}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\t    if (event == null) {\n        throw new IllegalArgumentException(\"Event cannot be null\");\n    }\n\n    if (event.getMessage() == null) {\n        throw new IllegalArgumentException(\"Message cannot be null\");\n    }\n\n    if (event.getLocation() == null) {\n        event.setLocation(acquireTestingLocation());\n    }\n\n    event.setTime(System.currentTimeMillis());\n\n    try {\n        String json = objectMapper.writeValueAsString(event);\n\n        String topic = event.getTarget() != null ? event.getTarget() : \"test\";\n\n        ProducerRecord<String, String> record = new ProducerRecord<>(topic, json);\n\n        producer.send(record);\n\n        producer.flush();\n    } catch (JsonProcessingException e) {\n        throw new RuntimeException(\"Error converting event to JSON\", e);\n    }\n}", "CodeBleu_score": 50.74596161772747}, {"code": "public void sendEvent(Event event){\n\t    if (event == null || event.getMessage() == null) {\n        return;\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(acquireTestingLocation());\n    }\n    event.setTime(System.currentTimeMillis());\n    String jsonString = writeValueAsString(event);\n    String topic = event.getTarget() == null ? \"test\" : event.getTarget();\n    ProducerRecord<String, String> record = new ProducerRecord<>(topic, jsonString);\n    producer.send(record);\n    producer.flush();\n}", "CodeBleu_score": 41.41507352911906}, {"code": "public void sendEvent(Event event){\n\t    if (event != null && event.getMessage() != null) {\n        if (event.getLocation() == null) {\n            event.setLocation(acquireTestingLocation());\n        }\n        event.setTime(System.currentTimeMillis());\n        String json = writeValueAsString(event);\n        String topic = event.getTarget() != null ? event.getTarget() : \"test\";\n        ProducerRecord<String, String> record = new ProducerRecord<>(topic, json);\n        producer.send(record);\n        producer.flush();\n    }\n}", "CodeBleu_score": 39.20355964346004}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t    // Initialize the OSS client with access credentials\n    OSS ossClient = new OSSClientBuilder().build(getEndpoint(), getAccessKeyId(), getAccessKeySecret());\n    // Upload the file content as an object with the specified name\n    ossClient.putObject(getOssBucket(), objName, new ByteArrayInputStream(content));\n    // Shut down the OSS client\n    ossClient.shutdown();\n    // Return the URL of the uploaded object\n    return getEndpoint() + \"/\" + getOssBucket() + \"/\" + objName;\n}", "CodeBleu_score": 34.805639191333675}, {"code": "public String upload(String objName, byte[] content){\n\t    OSS ossClient = new OSSClientBuilder().build(getEndpoint(), getAccessKeyId(), getAccessKeySecret());\n    ossClient.putObject(getOssBucket(), objName, new ByteArrayInputStream(content));\n    ossClient.shutdown();\n    return getEndpoint() + getOssBucket() + \"/\" + objName;\n}", "CodeBleu_score": 34.52453152290107}, {"code": "public String upload(String objName, byte[] content){\n\t    OSSClient ossClient = new OSSClient(getEndpoint(), getAccessKeyId(), getAccessKeySecret());\n    ossClient.putObject(getOssBucket(), objName, new ByteArrayInputStream(content));\n    ossClient.shutdown();\n    return \"https://\" + getOssBucket() + \".\" + getEndpoint() + \"/\" + objName;\n}", "CodeBleu_score": 36.67873225895003}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t    IpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\");\n    }\n    return worker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 29.86016887474623}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t    IpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\",", "CodeBleu_score": 22.17246620771095}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t    IpToLocationWorker ipToLocationWorker = getIpToLocationWorker();\n    if (ipToLocationWorker == null) {\n        return new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\");\n    }\n    return ipToLocationWorker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 26.700948484319543}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\t    synchronized (this) {\n        if (lowLevelRestClient == null || highLevelRestClient == null) {\n            String[] hosts = parseHosts(clusterHostList);\n            builder = RestClient.builder(hosts);\n            builder.setRequestConfigCallback(new RestClientBuilder.RequestConfigCallback() {\n                @Override\n                public RequestConfig.Builder customizeRequestConfig(RequestConfig.Builder requestConfigBuilder) {\n                    return requestConfigBuilder.setConnectTimeout(connectTimeout).setSocketTimeout(socketTimeout);\n                }\n            });\n            builder.setHttpClientConfigCallback(new RestClientBuilder.HttpClientConfigCallback() {\n                @Override\n                public HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder) {\n                    return httpClientBuilder.setMaxConnTotal(maxConnTotal).setMaxConnPerRoute(maxConnPerRoute);\n                }\n            });\n            lowLevelRestClient = builder.build();\n            highLevelRestClient = new RestHighLevelClient(builder);\n        }\n    }\n}", "CodeBleu_score": 34.14810914784749}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t    synchronized (this) {\n        if (lowLevelClient != null && highLevelClient != null) {\n            return;\n        }\n\n        List<String> hosts = parseHosts();\n\n        if (hosts.isEmpty()) {\n            throw new Exception(\"No valid host is provided\");\n        }\n\n        HttpHost[] httpHosts = hosts.stream()\n                .map(host -> {\n                    String[] hostAndPort = host.split(\":\");\n                    return new HttpHost(hostAndPort[0], Integer.parseInt(hostAndPort[1]), \"http\");\n                })\n                .toArray(HttpHost[]::new);\n\n        lowLevelClient = new RestClientBuilder(httpHosts).build();\n        highLevelClient = new RestHighLevelClient(RestClient.builder(httpHosts));\n    }\n}", "CodeBleu_score": 49.96499097914781}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t    if (lowLevelRestClient == null || highLevelRestClient == null) {\n        synchronized (this) {\n            if (lowLevelRestClient == null || highLevelRestClient == null) {\n                String[] hosts = parseHosts(getClusterHostList());\n                int[] ports = getClusterHostPort();\n                builder = RestClient.builder(hosts, ports);\n                lowLevelRestClient = builder.build();\n                highLevelRestClient = new RestHighLevelClient(builder);\n            }\n        }\n    }\n}", "CodeBleu_score": 50.463165555764775}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<>();\n    String[] hostList = clusterHostList.split(\",\");\n    for (String host : hostList) {\n        String[] hostAndPort = host.split(\":\");\n        String hostName = hostAndPort[0];\n        int port = clusterPort;\n        if (hostAndPort.length == 2) {\n            port = Integer.parseInt(hostAndPort[1]);\n        }\n        hosts.add(new HttpHost(hostName, port));\n    }\n    return hosts;\n}", "CodeBleu_score": 42.08737583025678}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<>();\n    String[] hostArray = clusterHostList.split(\",\");\n    for (String host : hostArray) {\n        int port = clusterPort;\n        int index = host.indexOf(\":\");\n        if (index > -1) {\n            port = Integer.parseInt(host.substring(index + 1));\n            host = host.substring(0, index);\n        }\n        hosts.add(new HttpHost(host, port));\n    }\n    return hosts;\n}", "CodeBleu_score": 41.304020835432965}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<>();\n    String[] hostArray = clusterHostList.split(\",\");\n    for (String host : hostArray) {\n        String[] hostAndPort = host.split(\":\");\n        String hostName = hostAndPort[0];\n        int port = clusterPort;\n        if (hostAndPort.length == 2) {\n            port = Integer.parseInt(hostAndPort[1]);\n        }\n        hosts.add(new HttpHost(hostName, port, \"http\"));\n    }\n    return hosts;\n}", "CodeBleu_score": 39.56889198615333}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\t    while (true) {\n        try {\n            // Poll for a task with a 30-second timeout\n            Task task = taskQueue.poll(30, TimeUnit.SECONDS);\n            if (task != null) {\n                // Check the task type\n                if (task.getType() == TaskType.PLAIN_TEXT_MESSAGE) {\n                    // Extract the recipient number and message data\n                    String recipient = task.getRecipient();\n                    String messageData = task.getMessageData();\n\n                    // Validate the message data\n                    if (validateMessageData(messageData)) {\n                        // Send the message\n                        sendPlainTextMessage(recipient, messageData);\n                    } else {\n                        // Log an error message if the message data is invalid\n                        logger.error(\"Invalid message data: \" + messageData);\n                    }\n                }\n            }\n        } catch (InterruptedException e) {\n            // Log an error message if an InterruptedException occurs\n            logger.error(\"Interrupted while polling for tasks\", e);\n            throw e;\n        } catch (Exception e) {\n            // Log an error message if an exception occurs\n            logger.error(\"Error while processing task\", e);\n        }\n    }\n}", "CodeBleu_score": 29.010076604519462}, {"code": "protected void pollingWork() throws InterruptedException{\n\t    while (true) {\n        try {\n            // Poll for a task with a 30-second timeout\n            Task task = queue.poll(30, TimeUnit.SECONDS);\n            if (task != null) {\n                // Check the task type\n                if (task instanceof PlainTextMessageTask) {\n                    // Extract the recipient number and message data\n                    PlainTextMessageTask plainTextMessageTask = (PlainTextMessageTask) task;\n                    String recipientNumber = plainTextMessageTask.getRecipientNumber();\n                    String messageData = plainTextMessageTask.getMessageData();\n\n                    // Validate the data\n                    if (recipientNumber != null && messageData != null) {\n                        // Send the message\n                        sendPlainTextMessage(recipientNumber, messageData);\n                    } else {\n                        // Log an error message if the data is invalid\n                        logger.error(\"Invalid message data: recipientNumber={}, messageData={}\", recipientNumber, messageData);\n                    }\n                }\n            }\n        } catch (Exception e) {\n            // Log an error message if an exception occurs\n            logger.error(\"Error processing task\", e);\n        }\n    }\n}", "CodeBleu_score": 26.199623207217883}, {"code": "protected void pollingWork() throws InterruptedException{\n\t    while (true) {\n        try {\n            Task task = taskQueue.poll(30, TimeUnit.SECONDS);\n            if (task != null) {\n                if (task.getTaskType() == TaskType.PLAIN_TEXT_MESSAGE) {\n                    String recipientNumber = task.getRecipientNumber();\n                    String messageData = task.getMessageData();\n\n                    if (validateMessageData(messageData)) {\n                        sendPlainTextMessage(recipientNumber, messageData);\n                    } else {\n                        log.error(\"Invalid message data: {}\", messageData);\n                    }\n                }\n            }\n        } catch (Exception e) {\n            log.error(\"Error processing task: {}\", e.getMessage());\n            e.printStackTrace();\n        }\n    }\n}", "CodeBleu_score": 30.526071656045122}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t    try (CloseableHttpClient httpClient = HttpClients.createDefault()) {\n        HttpGet httpGet = new HttpGet(uri);\n        httpGet.addHeader(\"Accept\", \"application/xml\");\n        try (CloseableHttpResponse response = httpClient.execute(httpGet)) {\n            HttpEntity entity = response.getEntity();\n            String content = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n            logger.info(\"Response content: {}\", content);\n            return content;\n        }\n    }\n}", "CodeBleu_score": 51.57131451479786}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t    try (CloseableHttpClient httpClient = HttpClients.createDefault()) {\n        HttpGet httpGet = new HttpGet(uri);\n        HttpResponse response = httpClient.execute(httpGet);\n        HttpEntity entity = response.getEntity();\n        String content = EntityUtils.toString(entity, \"UTF-8\");\n        logger.info(\"Response content: {}\", content);\n        return content;\n    }\n}", "CodeBleu_score": 53.29072281644718}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t    try (CloseableHttpClient httpClient = HttpClients.createDefault()) {\n        HttpGet httpGet = new HttpGet(uri);\n        CloseableHttpResponse response = httpClient.execute(httpGet);\n        HttpEntity entity = response.getEntity();\n        String content = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        log.info(\"Response content: {}\", content);\n        return content;\n    }\n}", "CodeBleu_score": 62.247904556826306}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document doc = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n    NodeList childNodes = doc.getDocumentElement().getChildNodes();\n    Object[] decoded = decodeNodeToMap(childNodes, doTrim);\n    if (decoded == null) {\n        return null;\n    }\n    Map<String, Object> map = new HashMap<String, Object>();\n    for (int i = 0; i < decoded.length; i += 2) {\n        map.put((String) decoded[i], decoded[i + 1]);\n    }\n    return map;\n}", "CodeBleu_score": 62.79558052645899}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document doc = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n    NodeList childNodes = doc.getDocumentElement().getChildNodes();\n    String[] result = decodeNodeToMap(childNodes, doTrim);\n    if (result != null) {\n        Map<String, Object> map = new HashMap<>();\n        for (int i = 0; i < result.length; i += 2) {\n            map.put(result[i], result[i + 1]);\n        }\n        return map;\n    }\n    return null;\n}", "CodeBleu_score": 58.86532165418661}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document doc = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n    NodeList childNodes = doc.getDocumentElement().getChildNodes();\n    Map<String, Object> result = decodeNodeToMap(childNodes, doTrim);\n    if (result == null) {\n        throw new Exception(\"Failed to decode message\");\n    }\n    return result;\n}", "CodeBleu_score": 52.651190730153665}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t    if (orderRecord.isEligibleForAutoProcessing()) {\n        log.info(\"Enqueuing tasks to generate schedules after commit for order {}\", orderRecord.getC_Order_ID());\n\n        final String trxName = TrxUtils.getTrxName(orderRecord.get_TrxName());\n        final GenerateSchedulesAfterCommitTask task = new GenerateSchedulesAfterCommitTask(orderRecord.getC_Order_ID(), trxName);\n\n        final IQueue<GenerateSchedulesAfterCommitTask> queue = QueueFactory.getQueue(GenerateSchedulesAfterCommitTask.class);\n        queue.addLog(task);\n        queue.enqueue(task);\n    } else {\n        log.info(\"Schedules will be generated after commit for order {}\", orderRecord.getC_Order_ID());\n\n        final Order order = Order.ofRepoId(orderRecord.getC_Order_ID());\n        if (!order.isPostponed()) {\n            log.info(\"Schedules will be generated after commit for order {}\", orderRecord.getC_Order_ID());\n\n            final String trxName = TrxUtils.getTrxName(orderRecord.get_TrxName());\n            final GenerateSchedulesAfterCommitTask task = new GenerateSchedulesAfterCommitTask(orderRecord.getC_Order_ID(), trxName);\n\n            final IQueue<GenerateSchedulesAfterCommitTask> queue = QueueFactory.getQueue(GenerateSchedulesAfterCommitTask.class);\n            queue.addLog(task);\n            queue.enqueue(task);\n        } else {\n            log.info(\"Schedules will be generated after commit for order {}\", orderRecord.getC_Order_ID());\n        }\n    }\n}", "CodeBleu_score": 40.9032935272435}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t    final OrderId orderId = OrderId.ofRepoId(orderRecord.getC_Order_ID());\n    if (isEligibleForAutoProcessing(orderRecord)) {\n        log.info(\"Order {} is eligible for auto-processing. Enqueuing tasks to generate shipment schedules and invoices.\", orderId);\n        addLog(orderRecord, \"Enqueuing tasks to generate shipment schedules and invoices\");\n        final String trxName = getTrxName();\n        scheduleIfNotPostponed(orderRecord, trxName, \"CreateMissingShipmentSchedules\");\n        scheduleIfNotPostponed(orderRecord, trxName, \"CreateMissingInvoiceSchedules\");\n    } else {\n        log.info(\"Order {} is not eligible for auto-processing. Scheduling the creation of missing shipment schedules if they are not postponed.\", orderId);\n        addLog(orderRecord, \"Scheduling the creation of missing shipment schedules if they are not postponed\");\n        scheduleIfNotPostponed(orderRecord, null, \"CreateMissingShipmentSchedules\");\n    }\n}", "CodeBleu_score": 49.139076281844694}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t    if (orderRecord.isEligibleForAutoProcessing()) {\n        log.addLog(\n                \"Enqueuing order for automatic shipping and invoicing: \" + orderRecord.getC_Order_ID(),\n                orderRecord.getTrxName());\n        final GenerateSchedulesAfterCommitTask task = new GenerateSchedulesAfterCommitTask(orderRecord.getC_Order_ID());\n        final String transactionName = orderRecord.getTrxName();\n        ofRepoId(orderRecord.getRepoId()).withLogger(log).enqueue(task, transactionName);\n    } else {\n        log.addLog(\n                \"Scheduling the creation of missing shipment schedules: \" + orderRecord.getC_Order_ID(),\n                orderRecord.getTrxName());\n        final ScheduleMissingShipmentSchedulesTask task = new ScheduleMissingShipmentSchedulesTask(orderRecord.getC_Order_ID());\n        final String transactionName = orderRecord.getTrxName();\n        ofRepoId(orderRecord.getRepoId()).withLogger(log).scheduleIfNotPostponed(task, transactionName);\n    }\n}", "CodeBleu_score": 39.193898840049656}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = User::where('email', $request->email)->first();\n\n    if ($user && Hash::check($request->password, $user->password)) {\n        return $user;\n    }\n\n    $this->fireFailedEvent($request);\n    $this->throwFailedAuthenticationException($request);\n}", "CodeBleu_score": 47.41913590006342}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = User::where('email', $request->email)->first();\n\n    if (!$user || !Hash::check($request->password, $user->password)) {\n        $this->fireFailedEvent($request);\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    return $user;\n}", "CodeBleu_score": 48.29729772983774}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = User::where('email', $request->email)->first();\n\n    if (!$user || !$this->guard->getProvider()->validateCredentials($user, ['password' => $request->password])) {\n        $this->fireFailedEvent($request);\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    return $user;\n}", "CodeBleu_score": 61.42848754264194}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter->increment($request);\n\n    throw ValidationException::withMessages([\n        ThrottleKey::get($request) => trans('auth.failed'),\n    ]);\n}", "CodeBleu_score": 63.625336846694026}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter->increment($request);\n\n    throw ValidationException::withMessages([\n        Throttle::USERNAME_KEY => trans('auth.failed'),\n    ]);\n}", "CodeBleu_score": 64.12920556598232}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter->increment($request);\n\n    throw ValidationException::withMessages([\n        Fortify::username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 72.95533593440727}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t        $userId = $request->session()->get('login.id');\n        $user = User::find($userId);\n\n        if ($user) {\n            $publicKey = Webauthn::prepareAssertion($user);\n\n            return Inertia::render('Auth/TwoFactorChallenge', $data + [\n                'twoFactor' => optional($user)->two_factor_secret && ! is_null(optional($user)->two_factor_confirmed_at),\n                'remember' => $request->session()->get('login.remember'),\n            ])->toResponse($request);\n        }\n\n        return redirect()->route('login');\n    }", "CodeBleu_score": 74.1736650295981}, {"code": "<?\npublic function toResponse($request){\n\t    $user = $request->session()->get('login.id');\n    $user = User::find($user);\n\n    if ($user) {\n        $publicKey = (new Webauthn)->prepareAssertion($user);\n\n        return Inertia::render('Auth/TwoFactorChallenge', [\n            'publicKey' => $publicKey,\n            'twoFactor' => optional($user)->two_factor_secret && ! is_null(optional($user)->two_factor_confirmed_at),\n            'remember' => $request->session()->get('login.remember'),\n        ])->toResponse($request);\n    }\n}", "CodeBleu_score": 65.8225125975624}, {"code": "<?\npublic function toResponse($request){\n\t    // Get the user ID from the session.\n    $userId = $request->session()->get('login.id');\n\n    // Fetch the user.\n    $user = User::find($userId);\n\n    // If the user exists, prepare a WebAuthn assertion.\n    if ($user) {\n        $publicKey = Webauthn::prepareAssertion($user);\n    }\n\n    // Render the 'TwoFactorChallenge' view with data indicating whether two-factor authentication is enabled and if the \"remember me\" option is set.\n    return Inertia::render('Auth/TwoFactorChallenge', [\n        'publicKey' => $publicKey ?? null,\n        'twoFactor' => optional($user)->two_factor_secret && ! is_null(optional($user)->two_factor_confirmed_at),\n        'remember' => $request->session()->get('login.remember'),\n    ]);\n}", "CodeBleu_score": 65.03417037761753}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    // Retrieve the user token for the given driver and socialite user ID\n    $userToken = UserToken::firstWhere([\n        'driver' => $driver,\n        'socialite_user_id' => $socialite->getId(),\n    ]);\n\n    // If a user token is found, retrieve the associated user\n    if ($userToken) {\n        $user = $userToken->user;\n\n        // Check the user association\n        $this->checkUserAssociation($request, $user);\n    } else {\n        // If no user token is found, create a new user or associate the socialite token with an existing user\n        $user = $this->getUserOrCreate($socialite);\n\n        // Create a new user token\n        $this->createUserToken($user, $driver, $socialite);\n    }\n\n    // Return the authenticated user\n    return $user;\n}", "CodeBleu_score": 58.15886585347268}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    // Get the user token for the given driver and socialite user ID\n    $userToken = UserToken::firstWhere([\n        'driver' => $driver,\n        'socialite_user_id' => $socialite->getId(),\n    ]);\n\n    // If the user token exists, retrieve the associated user\n    if ($userToken) {\n        $user = $userToken->user;\n    } else {\n        // If the user token does not exist, create a new user or associate the socialite token with an existing user\n        $user = $this->getUserOrCreate($socialite);\n\n        // Check the user association\n        $this->checkUserAssociation($user);\n\n        // Create a new user token\n        $this->createUserToken($user, $driver, $socialite);\n    }\n\n    // Return the authenticated user\n    return $user;\n}", "CodeBleu_score": 55.794170717756444}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    $userToken = UserToken::firstWhere([\n        'driver' => $driver,\n        'socialite_user_id' => $socialite->getId(),\n    ]);\n\n    if ($userToken) {\n        $user = $this->getUserOrCreate($socialite);\n\n        if (!$this->checkUserAssociation($user, $userToken)) {\n            throw new Exception('User not associated with this token');\n        }\n    } else {\n        $user = $this->getUserOrCreate($socialite);\n\n        $userToken = UserToken::create([\n            'driver' => $driver,\n            'socialite_user_id' => $socialite->getId(),\n            'user_id' => $user->id,\n        ]);\n    }\n\n    Auth::login($user);\n\n    return $user;\n}", "CodeBleu_score": 47.48022092347922}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $user = $request->user();\n\n    if (! $user) {\n        return false;\n    }\n\n    $credential = $this->filterCredentials($request);\n\n    if (! $credential) {\n        return false;\n    }\n\n    if (! WebauthnFacade::validateAssertion($credential, $user)) {\n        $this->fireFailedEvent($request, $user);\n\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    return true;\n}", "CodeBleu_score": 66.35779626239993}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $user = $request->user();\n\n    if (! $user) {\n        return false;\n    }\n\n    $credential = $this->filterCredentials($request);\n\n    if (! $this->fireFailedEvent($request, $user)) {\n        throw new AuthenticationException();\n    }\n\n    return WebauthnFacade::validateAssertion($credential, $user);\n}", "CodeBleu_score": 56.26035672532479}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $user = $request->user();\n    if (!$user) {\n        return false;\n    }\n\n    $this->filterCredentials($user);\n\n    $credential = $this->validateCredential($request);\n\n    if (!$this->fireFailedEvent($request, $credential)) {\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    return true;\n}", "CodeBleu_score": 57.61431934639978}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\t    if (!$email = $this->option('email')) {\n        $this->error('No email provided');\n        return null;\n    }\n\n    try {\n        return User::where('email', $email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error('User not found');\n        return null;\n    }\n}", "CodeBleu_score": 76.30775858092078}, {"code": "<?\nprivate function user(): ?User{\n\t    if (!$email = $this->option('email')) {\n        $this->error('No email provided');\n        return null;\n    }\n\n    try {\n        return User::where('email', $email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error('User not found');\n        return null;\n    }\n}", "CodeBleu_score": 76.30775858092078}, {"code": "<?\nprivate function user(): ?User{\n\t    if (empty($this->option('email'))) {\n        $this->error('Email is required.');\n        return null;\n    }\n\n    try {\n        $user = User::where('email', $this->option('email'))->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error('User not found.');\n        return null;\n    }\n\n    return $user;\n}", "CodeBleu_score": 58.78570795844804}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\t    if (config('scout.driver') && config('scout.flush')) {\n        foreach (config('scout.indexes') as $index => $settings) {\n            $table = (new $index)->getTable();\n            $this->artisan->call('scout:flush', [$table]);\n        }\n\n        Log::info('Scout indexes flushed');\n    }\n}", "CodeBleu_score": 61.85317005602976}, {"code": "<?\nprotected function scoutFlush(): void{\n\t    if (!config('scout.driver')) {\n        return;\n    }\n\n    if (!$this->option('flush')) {\n        return;\n    }\n\n    foreach (config('scout.meilisearch.index_settings') as $index => $settings) {\n        $table = (new $index)->getTable();\n\n        $this->artisan('scout:flush', [\n            'model' => $table,\n        ]);\n    }\n\n    $this->info('Indexes flushed.');\n}", "CodeBleu_score": 66.24893939680109}, {"code": "<?\nprotected function scoutFlush(): void{\n\t    if (config('scout.driver') && config('scout.flush_on_update')) {\n        foreach (config('scout.meilisearch.index_settings') as $index => $settings) {\n            $table = (new $index)->getTable();\n            $this->artisan('scout:flush', [\n                '--index' => $table,\n            ]);\n        }\n\n        Log::info('Scout indexes flushed.');\n    }\n}", "CodeBleu_score": 64.27547356801924}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    $vcard = new VCard();\n\n    try {\n        $vcard = $this->reader->read($resource->getSource());\n    } catch (VCardException $e) {\n        // ignore\n    }\n\n    if (!$vcard->hasUID()) {\n        $vcard->setUID($resource->getUID());\n    }\n\n    foreach ($this->exporters as $exporter) {\n        if ($exporter instanceof VCardExporterInterface) {\n            $exporter->export($vcard, $resource);\n        }\n    }\n\n    return $vcard;\n}", "CodeBleu_score": 31.70204942035807}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    $vcard = $this->read($resource);\n\n    if (null === $vcard->getUid()) {\n        $vcard->setUid($this->generateUid());\n    }\n\n    foreach ($this->exporters as $exporter) {\n        $exporter->export($resource, $vcard);\n    }\n\n    return $vcard;\n}", "CodeBleu_score": 21.306567898787982}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    $vcard = $this->getSource($resource);\n\n    foreach ($this->exporters as $exporter) {\n        if ($exporter instanceof VCardExporter) {\n            $exporter->export($resource, $vcard);\n        }\n    }\n\n    return $vcard;\n}", "CodeBleu_score": 19.897362202050772}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t        $obj = $this->getObject($addressBookId, $cardUri);\n        if ($obj instanceof Contact) {\n            DestroyContact::dispatch([\n                'account_id' => $this->user->account_id,\n                'author_id' => $this->user->id,\n                'vault_id' => $obj->vault_id,\n                'contact_id' => $obj->id,\n            ])->onQueue('high');\n            return true;\n        }\n        if ($obj instanceof Group) {\n            DestroyGroup::dispatch([\n                'account_id' => $this->user->account_id,\n                'author_id' => $this->user->id,\n                'vault_id' => $obj->vault_id,\n                'group_id' => $obj->id,\n            ])->onQueue('high');\n            return true;\n        }\n        return false;\n    }", "CodeBleu_score": 84.16995521543915}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $obj = $this->getObject($addressBookId, $cardUri);\n    if ($obj instanceof Contact) {\n        DestroyContact::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'contact_id' => $obj->id,\n        ])->onQueue('high');\n    } elseif ($obj instanceof Group) {\n        DestroyGroup::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'group_id' => $obj->id,\n        ])->onQueue('high');\n    } else {\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 82.7297530864468}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $obj = $this->getObject($addressBookId, $cardUri);\n    if ($obj instanceof Contact) {\n        DestroyContact::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'contact_id' => $obj->id,\n        ])->onQueue('high');\n    } elseif ($obj instanceof Group) {\n        DestroyGroup::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'group_id' => $obj->id,\n        ])->onQueue('high');\n    } else {\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 82.7297530864468}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\t    if (!request()->hasFile('file')) {\n        return;\n    }\n\n    $leadActivity = $this->activityRepository->create([\n        'description' => __('uploaded :file file', ['file' => request()->file('file')->getClientOriginalName()]),\n        'lead_id' => $data['lead_id'],\n        'user_id' => auth()->guard()->user()->id,\n    ]);\n\n    return $this->create([\n        'file_name' => request()->file('file')->getClientOriginalName(),\n        'file_path' => request()->file('file')->store('files', 'public'),\n        'activity_id' => $leadActivity->id,\n    ]);\n}", "CodeBleu_score": 65.3982324022721}, {"code": "<?\npublic function upload(array $data){\n\t    if (!request()->hasFile('file')) {\n        return;\n    }\n\n    $leadActivity = $this->activityRepository->create([\n        'type' => 'file',\n        'description' => $data['description'],\n        'user_id' => auth()->guard()->user()->id,\n        'lead_id' => $data['lead_id'],\n    ]);\n\n    return $this->create([\n        'name' => request()->file('file')->getClientOriginalName(),\n        'path' => request()->file('file')->store('files', 'public'),\n        'activity_id' => $leadActivity->id,\n    ]);\n}", "CodeBleu_score": 68.52700799540705}, {"code": "<?\npublic function upload(array $data){\n\t    if (!request()->hasFile('file')) {\n        return;\n    }\n\n    $leadActivity = $this->activityRepository->create([\n        'description' => $data['description'],\n        'type' => $data['type'],\n        'lead_id' => $data['lead_id'],\n        'user_id' => auth()->guard()->user()->id\n    ]);\n\n    return $this->create([\n        'filename' => request()->file('file')->getClientOriginalName(),\n        'path' => request()->file('file')->store('lead_files', 'dir'),\n        'activity_id' => $leadActivity->id\n    ]);\n}", "CodeBleu_score": 64.0722099066598}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    if ($exception instanceof ModelNotFoundException) {\n        return response()->view('errors.404', [], 404);\n    } elseif ($exception instanceof PDOException) {\n        return response()->view('errors.500', [], 500);\n    } elseif ($exception instanceof ParseError) {\n        return response()->view('errors.500', [], 500);\n    }\n\n    if (request()->routeIs('admin.*')) {\n        return redirect()->route('admin.login');\n    } else {\n        return redirect()->route('front.index');\n    }\n}", "CodeBleu_score": 33.66487575414579}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    // If the route is for admin or front, redirect to admin session creation\n    if (request()->routeIs('admin.*') || request()->routeIs('front.*')) {\n        return redirect()->route('admin.session.create');\n    }\n\n    // Handle HTTP exceptions\n    if ($exception instanceof HttpException) {\n        $statusCode = $exception->getStatusCode();\n        $response = response()->view('errors.' . $statusCode);\n    }\n\n    // Handle ModelNotFoundException\n    if ($exception instanceof ModelNotFoundException) {\n        $response = response()->view('errors.404', [], 404);\n    }\n\n    // Handle PDOException\n    if ($exception instanceof PDOException) {\n        $response = response()->view('errors.500', [], 500);\n    }\n\n    // Handle ParseError\n    if ($exception instanceof ParseError) {\n        $response = response()->view('errors.500', [], 500);\n    }\n\n    return $response;\n}", "CodeBleu_score": 54.262912481603756}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    $route = request()->route();\n    $isAdmin = request()->routeIs('admin.*');\n    $isFront = request()->routeIs('front.*');\n\n    if ($isFront) {\n        return redirect()->route('admin.login');\n    }\n\n    if ($exception instanceof ModelNotFoundException) {\n        return $this->response('Model not found', 404);\n    }\n\n    if ($exception instanceof PDOException) {\n        return $this->response('Database error', 500);\n    }\n\n    if ($exception instanceof ParseError) {\n        return $this->response('Parse error', 500);\n    }\n\n    return parent::render($request, $exception);\n}", "CodeBleu_score": 43.88421436425083}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json([\n            'message' => \"Error from {$path}\"\n        ], $statusCode);\n    }\n\n    return response()->view(\"errors.{$statusCode}\", [\n        'message' => \"Error from {$path}\"\n    ], $statusCode);\n}", "CodeBleu_score": 62.076157259241015}, {"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json([\n            'error' => Lang::get('perevorot.laravel-ajax-response::response.error_' . $statusCode)\n        ], $statusCode);\n    }\n\n    return response()->view(config('response.error_view') . '.' . $path, [], $statusCode);\n}", "CodeBleu_score": 57.37881248247205}, {"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json([\n            'error' => $this->getErrorMessage($statusCode)\n        ], $statusCode);\n    }\n\n    return response()->view($path, [\n        'error' => $this->getErrorMessage($statusCode)\n    ], $statusCode);\n}", "CodeBleu_score": 52.10430324447276}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t    $activities = request()->get('activities', []);\n    $count = 0;\n\n    foreach ($activities as $id) {\n        Event::dispatch('activities.updating', $id);\n        $activity = $this->activityRepository->update($id, [\n            'is_done' => trans('statuses.done'),\n        ]);\n        Event::dispatch('activities.updated', $id);\n\n        if ($activity) {\n            $count++;\n        }\n    }\n\n    return response()->json([\n        'message' => $count > 0 ? trans('messages.success') : trans('messages.fail'),\n    ]);\n}", "CodeBleu_score": 52.398199652882774}, {"code": "<?\npublic function massUpdate(){\n\t    $activities = request('activities');\n    $count = 0;\n\n    foreach ($activities as $activity) {\n        Event::dispatch('activities.updating', $activity);\n\n        $this->activityRepository->update($activity, [\n            'is_done' => request('value')\n        ]);\n\n        Event::dispatch('activities.updated', $activity);\n        $count++;\n    }\n\n    return response()->json([\n        'message' => $count ? trans('Activity::lang.completed', ['count' => $count]) : trans('Activity::lang.error'),\n        'status'  => 'success',\n    ]);\n}", "CodeBleu_score": 42.542410808055614}, {"code": "<?\npublic function massUpdate(){\n\t    $activities = request()->all();\n    $count = 0;\n\n    foreach ($activities as $id => $activity) {\n        Event::dispatch('activity.updating', $id);\n        $this->activityRepository->update($id, $activity);\n        Event::dispatch('activity.updated', $id);\n        $count++;\n    }\n\n    if ($count > 0) {\n        return response()->json(['message' => trans('response.success.saved', ['attribute' => 'Activity'])]);\n    }\n\n    return response()->json(['message' => trans('response.error.saved', ['attribute' => 'Activity'])], 500);\n}", "CodeBleu_score": 37.47599800719893}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t    $ids = request('ids');\n    foreach ($ids as $id) {\n        event(new ActivityDeleted($id));\n        $this->activityRepository->delete($id);\n        event(new ActivityDestroyed($id));\n    }\n    return response()->json([\n        'message' => trans('Activity::messages.activitiesDeleted')\n    ]);\n}", "CodeBleu_score": 35.27024249297083}, {"code": "<?\n public function massDestroy(){\n\t    $activities = request('ids');\n    foreach ($activities as $activity) {\n        event(new ActivityDestroyed($activity));\n        $this->activityRepository->delete($activity);\n        event(new ActivityDestroyed($activity));\n    }\n\n    return response()->json([\n        'message' => trans('lang.activity_deleted'),\n    ]);\n}", "CodeBleu_score": 36.90576184731992}, {"code": "<?\n public function massDestroy(){\n\t    $activities = request('ids');\n    foreach ($activities as $activity) {\n        event(new ActivityDeleting($activity));\n        $this->activityRepository->delete($activity);\n        event(new ActivityDeleted($activity));\n    }\n    return response()->json([\n        'message' => trans('activities.deleted'),\n    ]);\n}", "CodeBleu_score": 36.88897935372829}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t    $cards = $this->dashboardHelper->getCards();\n\n    foreach (request()->all() as $key => $value) {\n        $card = array_search($key, array_column($cards, 'id'));\n\n        if ($card !== false) {\n            $cards[$card]['selected'] = $value;\n        }\n    }\n\n    return response()->json($cards);\n}", "CodeBleu_score": 40.55291437604791}, {"code": "<?\n public function updateCards(){\n\t    $cards = $this->dashboardHelper->getCards();\n    $request = request()->all();\n\n    foreach ($cards as $key => $card) {\n        if (isset($request[$card['name']])) {\n            $cards[$key]['selected'] = true;\n        } else {\n            $cards[$key]['selected'] = false;\n        }\n    }\n\n    return response()->json($cards);\n}", "CodeBleu_score": 45.34054882243781}, {"code": "<?\n public function updateCards(){\n\t    $cards = $this->dashboardHelper->getCards();\n    $request = request()->all();\n\n    foreach ($cards as $card) {\n        if (isset($request[$card['id']])) {\n            $card['selected'] = true;\n        } else {\n            $card['selected'] = false;\n        }\n    }\n\n    return response()->json($cards);\n}", "CodeBleu_score": 43.268077957403165}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t    Event::dispatch('core.configuration.create.before');\n\n    $configuration = $this->configurationRepository->create(request()->all());\n\n    Event::dispatch('core.configuration.create.after', $configuration);\n\n    session()->flash('success', trans('admin::app.settings.configurations.create-success'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 45.34322798601759}, {"code": "<?\npublic function store(){\n\t    Event::dispatch('core.configuration.create.before');\n\n    $configuration = $this->configurationRepository->create(request()->all());\n\n    Event::dispatch('core.configuration.create.after', $configuration);\n\n    session()->flash('success', trans('admin::app.settings.configuration.create-success'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 45.4584128507407}, {"code": "<?\npublic function store(){\n\t    Event::dispatch('core.configuration.create.before');\n    $configuration = $this->configurationRepository->create(request()->all());\n    Event::dispatch('core.configuration.create.after', $configuration);\n\n    session()->flash('success', trans('admin::app.settings.configuration.create-success'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 45.4584128507407}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t    $filePath = request()->route()->parameters['filePath'];\n    $fullFileName = $filePath . '.pdf';\n    $configuration = $this->configurationRepository->findOneByField('file_name', $fullFileName);\n\n    return Storage::download($configuration->stored_value);\n}", "CodeBleu_score": 49.26737899074023}, {"code": "<?\npublic function download(){\n\t    $filePath = request()->route()->parameters['filePath'];\n    $fileName = request()->route()->parameters['fileName'];\n    $fullFileName = $filePath . '/' . $fileName;\n    $configuration = $this->configurationRepository->findOneByField('file_name', $fullFileName);\n\n    return Storage::download($configuration->stored_value);\n}", "CodeBleu_score": 50.374580391086454}, {"code": "<?\npublic function download(){\n\t    $filePath = request()->route()->parameters['filePath'];\n    $fileName = 'configuration-' . $filePath . '.json';\n    $configuration = $this->configurationRepository->findOneByField('file_path', $filePath);\n    return Storage::download($configuration->stored_value, $fileName);\n}", "CodeBleu_score": 50.744418331474215}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    List<AdminModelSort> adminModelSortList = new ArrayList<>();\n    for (int i = 0; i < list.size(); i++) {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setModel(list.get(i));\n        adminModelSort.setSort(i);\n        adminModelSort.setUserId(getUserId());\n        adminModelSort.setIsHidden(false);\n        adminModelSortList.add(adminModelSort);\n    }\n    remove(getUserId());\n    saveBatch(adminModelSortList);\n    return ok();\n}", "CodeBleu_score": 61.1965520918356}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\n    List<AdminModelSort> adminModelSorts = new ArrayList<>();\n\n    for (int i = 0; i < list.size(); i++) {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setSort(i);\n        adminModelSort.setModel(list.get(i));\n        adminModelSort.setUserId(getUserId());\n        adminModelSort.setIsHidden(false);\n        adminModelSorts.add(adminModelSort);\n    }\n\n    remove(getUserId());\n    saveBatch(adminModelSorts);\n\n    return ok();\n}", "CodeBleu_score": 60.57192696560389}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    List<AdminModelSort> sortList = new ArrayList<>();\n    for (int i = 0; i < list.size(); i++) {\n        AdminModelSort sort = new AdminModelSort();\n        sort.setSort(i);\n        sort.setUserId(getUserId());\n        sort.setType(AdminModelSort.TYPE_HEADER);\n        sort.setModel(list.get(i));\n        sortList.add(sort);\n    }\n    remove(AdminModelSort.TYPE_HEADER, getUserId());\n    saveBatch(sortList);\n    return ok();\n}", "CodeBleu_score": 57.4247235337348}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    AdminConfiguration adminConfiguration = adminConfigurationRepository.findBySettingId(moduleSetting.getSettingId());\n    if (adminConfiguration == null) {\n        return error(new Error(ErrorCode.NOT_FOUND, \"Admin configuration not found\"));\n    }\n    if (adminConfiguration.getModule() == Module.CRM) {\n        return error(new Error(ErrorCode.BAD_REQUEST, \"Cannot update admin configuration for CRM\"));\n    }\n    adminConfiguration.setStatus(moduleSetting.getStatus());\n    adminConfigurationRepository.save(adminConfiguration);\n    return ok(new SuccessResult(adminConfiguration));\n}", "CodeBleu_score": 48.12645322698018}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    AdminConfiguration adminConfiguration = adminConfigurationRepository.findBySettingId(moduleSetting.getSettingId());\n    if (adminConfiguration.getModule().equals(Module.CRM)) {\n        return ResultGenerator.error(ResultCode.MODULE_SETTING_CRM);\n    }\n    adminConfiguration.setStatus(moduleSetting.getStatus());\n    adminConfigurationRepository.save(adminConfiguration);\n    return ResultGenerator.ok();\n}", "CodeBleu_score": 56.55299496271954}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    AdminConfiguration adminConfiguration = adminConfigurationRepository.findBySettingId(moduleSetting.getSettingId());\n    if (adminConfiguration.getModule().equals(Module.CRM)) {\n        return Result.error(new Error(ErrorCode.CRM_MODULE_SETTING_UPDATE_ERROR));\n    }\n    adminConfiguration.setStatus(moduleSetting.getStatus());\n    adminConfigurationRepository.save(adminConfiguration);\n    return Result.ok();\n}", "CodeBleu_score": 56.33464786046672}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t    UserConfig userConfig = userConfigService.queryUserConfigByName(customKey);\n    if(userConfig != null){\n        userConfig.setValue(json);\n        userConfigService.updateById(userConfig);\n    }else{\n        userConfig = new UserConfig();\n        userConfig.setName(customKey);\n        userConfig.setUserId(userId);\n        userConfig.setValue(json);\n        userConfigService.save(userConfig);\n    }\n    return ResultGenerator.genSuccessResult();\n}", "CodeBleu_score": 54.999312902467366}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t    UserConfig userConfig = userConfigService.queryUserConfigByName(customKey);\n    if (userConfig != null) {\n        userConfig.setValue(json.toString());\n        userConfigService.updateById(userConfig);\n    } else {\n        userConfig = new UserConfig();\n        userConfig.setName(customKey);\n        userConfig.setValue(json.toString());\n        userConfigService.save(userConfig);\n    }\n    return Result.ok();\n}", "CodeBleu_score": 64.95738002192495}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t    UserConfig userConfig = userConfigService.queryUserConfigByName(customKey);\n    if(userConfig != null){\n        userConfig.setValue(json.toString());\n        userConfigService.updateById(userConfig);\n    }else{\n        userConfig = new UserConfig();\n        userConfig.setName(customKey);\n        userConfig.setValue(json.toString());\n        userConfig.setUserId(getUserId());\n        userConfig.setStatus(1);\n        userConfigService.save(userConfig);\n    }\n    return Result.success();\n}", "CodeBleu_score": 64.30371022109462}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser user = adminUserService.getById(userId);\n    if (user == null) {\n        return Result.error(\"\u7528\u6237\u4e0d\u5b58\u5728\");\n    }\n    user.setDeptName(deptService.getNameByDeptId(user.getDeptId()));\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.ok(user);\n}", "CodeBleu_score": 43.91346032737379}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser adminUser = adminUserMapper.selectById(userId);\n    if (adminUser == null) {\n        return Result.error(\"\u7528\u6237\u4e0d\u5b58\u5728\");\n    }\n    String deptName = sysDeptService.getNameByDeptId(adminUser.getDeptId());\n    adminUser.setDeptName(deptName);\n    adminUser.setSalt(null);\n    adminUser.setPassword(null);\n    return Result.success(adminUser);\n}", "CodeBleu_score": 50.53378233016086}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser user = adminUserService.getById(userId);\n    if (user == null) {\n        return Result.error(\"\u7528\u6237\u4e0d\u5b58\u5728\uff0c\u8bf7\u68c0\u67e5\u7528\u6237ID\");\n    }\n    String deptName = sysDeptService.getNameByDeptId(user.getDeptId());\n    user.setDeptName(deptName);\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.ok(user);\n}", "CodeBleu_score": 52.56825209296805}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t    String userId = getUserId();\n    List<ReadNotice> readNoticeList = lambdaQuery(ReadNotice.class).eq(ReadNotice::getUserId, userId).query();\n    if (readNoticeList.size() > 0) {\n        for (ReadNotice readNotice : readNoticeList) {\n            readNotice.setStatus(1);\n            update(readNotice);\n        }\n    } else {\n        ReadNotice readNotice = new ReadNotice();\n        readNotice.setUserId(userId);\n        readNotice.setStatus(1);\n        save(readNotice);\n    }\n    return success();\n}", "CodeBleu_score": 33.51221461738281}, {"code": " public Result readNotice() {\n\t    User user = User.find.byId(getUserId());\n    List<ReadNotice> readNoticeList = ReadNotice.find.where().eq(\"userId\", user.id).findList();\n    if (readNoticeList.size() > 1) {\n        for (ReadNotice readNotice : readNoticeList) {\n            readNotice.setStatus(1);\n            readNotice.update();\n        }\n    } else {\n        ReadNotice readNotice = new ReadNotice();\n        readNotice.setUserId(user.id);\n        readNotice.setStatus(1);\n        readNotice.save();\n    }\n    return ok(Json.toJson(\"success\"));\n}", "CodeBleu_score": 31.65120754143792}, {"code": " public Result readNotice() {\n\t    Long userId = getUserId();\n    List<ReadNotice> readNoticeList = lambdaQuery().eq(ReadNotice::getUserId, userId).list();\n    if (readNoticeList.size() > 1) {\n        for (ReadNotice readNotice : readNoticeList) {\n            readNotice.setStatus(1);\n            update(readNotice);\n        }\n    } else {\n        ReadNotice readNotice = new ReadNotice();\n        readNotice.setUserId(userId);\n        readNotice.setStatus(1);\n        save(readNotice);\n    }\n    return Result.success();\n}", "CodeBleu_score": 34.35496689314971}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    // Check if the configuration already exists\n    AdminConfig adminConfig = AdminConfig.findByName(\"companyInfo\")\n    if (adminConfig == null) {\n        // Create a new configuration if it doesn't exist\n        adminConfig = new AdminConfig(name: \"companyInfo\", description: \"Company Information\", value: \"{}\", status: true)\n    }\n\n    // Update the configuration's value with the provided company information\n    adminConfig.value = adminCompanyBO.toJSONString()\n    adminConfig.save(flush: true)\n}", "CodeBleu_score": 43.651632988677946}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    AdminConfiguration adminConfiguration = AdminConfiguration.findByName(\"companyInfo\");\n    if (adminConfiguration == null) {\n        adminConfiguration = new AdminConfiguration(name: \"companyInfo\", value: \"{}\", description: \"Company Information\", status: true)\n    }\n    adminConfiguration.value = adminCompanyBO.toJSONString()\n    adminConfiguration.save(flush: true)\n}", "CodeBleu_score": 37.223861144914}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    String companyInfo = adminCompanyBO.getCompanyInfo();\n    AdminConfig adminConfig = AdminConfig.findByName(\"companyInfo\");\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(\"companyInfo\");\n        adminConfig.setValue(\"{}\");\n    }\n    JSONObject jsonObject = JSONObject.parseObject(adminConfig.getValue());\n    jsonObject.put(\"companyInfo\", companyInfo);\n    adminConfig.setValue(jsonObject.toJSONString());\n    adminConfig.saveOrUpdate();\n}", "CodeBleu_score": 52.55535650674409}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\t    ParseQuery<ParseObject> query = ParseQuery.getQuery(\"AdminConfig\");\n    query.whereEqualTo(\"key\", \"admin_company\");\n    try {\n        ParseObject adminConfig = query.getFirst();\n        if (adminConfig != null) {\n            return parseObject(adminConfig);\n        }\n    } catch (ParseException e) {\n        e.printStackTrace();\n    }\n    return new AdminCompanyBO();\n}", "CodeBleu_score": 31.785305580803445}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t    ParseQuery<ParseObject> query = ParseQuery.getQuery(\"AdminConfig\");\n    query.whereEqualTo(\"key\", \"adminConfig\");\n    try {\n        ParseObject parseObject = query.getFirst();\n        if (parseObject != null) {\n            return parseObject.getValue(\"value\", AdminCompanyBO.class);\n        } else {\n            return new AdminCompanyBO();\n        }\n    } catch (ParseException e) {\n        e.printStackTrace();\n        return new AdminCompanyBO();\n    }\n}", "CodeBleu_score": 27.394369383696944}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t    def query = new ParseQuery<>(AdminCompany.class)\n    query.whereEqualTo('key', AdminCompany.ADMIN_CONFIG_KEY)\n    query.getFirstInBackground(new GetCallback<AdminCompany>() {\n        @Override\n        void done(AdminCompany adminCompany, ParseException e) {\n            if (e == null) {\n                if (adminCompany != null) {\n                    adminCompanyBO = new AdminCompanyBO(adminCompany.getCompanyName(), adminCompany.getCompanyEmail(), adminCompany.getCompanyPhone())\n                } else {\n                    adminCompanyBO = new AdminCompanyBO()\n                }\n            } else {\n                Log.e(TAG, \"Error retrieving admin configuration: \" + e.getMessage())\n            }\n        }\n    })\n    return adminCompanyBO\n}", "CodeBleu_score": 39.758077269932926}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t    List<AdminConfig> list = new ArrayList<AdminConfig>();\n    for (String string : stringList) {\n        AdminConfig adminConfig = new AdminConfig();\n        adminConfig.setName(\"logWelcomeSpeech\");\n        adminConfig.setStatus(AdminConfig.ACTIVE);\n        adminConfig.setValue(string);\n        list.add(adminConfig);\n    }\n    AdminConfig.remove(\"logWelcomeSpeech\");\n    AdminConfig.saveBatch(list);\n}", "CodeBleu_score": 38.97098886974755}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t    List<AdminConfig> configList = new ArrayList<AdminConfig>();\n\n    for (String string : stringList) {\n        AdminConfig config = new AdminConfig(\"com.ibm.ws.logging.log.welcomeSpeech\", \"\");\n        config.setName(string);\n        config.setValue(string);\n        configList.add(config);\n    }\n\n    AdminConfig.remove(logConfigName);\n    AdminConfig.saveBatch(configList);\n}", "CodeBleu_score": 44.05492989995161}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t    List<AdminConfig> configList = new ArrayList<AdminConfig>();\n    for (String str : stringList) {\n        AdminConfig config = new AdminConfig();\n        config.setName(str);\n        config.setValue(\"\");\n        configList.add(config);\n    }\n    AdminConfig.remove(logConfigurationName);\n    AdminConfig.saveBatch(configList);\n}", "CodeBleu_score": 43.86777216689977}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    String userId = getUserId(adminInitDataBO.getUsername());\n    if (StringUtils.isBlank(userId)) {\n        throw new BusinessException(ErrorCode.USER_NOT_EXIST);\n    }\n    User user = getById(userId);\n    if (user == null) {\n        throw new BusinessException(ErrorCode.USER_NOT_EXIST);\n    }\n    String password = getPassword(adminInitDataBO.getPassword(), user.getSalt());\n    if (!password.equals(user.getPassword())) {\n        throw new BusinessException(ErrorCode.USER_PASSWORD_ERROR);\n    }\n    String code = randomInt(6);\n    setex(getRedis(RedisKey.ADMIN_TEMP_CODE, userId), code, 10 * 60);\n    return code;\n}", "CodeBleu_score": 36.49196447226871}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    // Retrieve the current user ID and user details\n    Long userId = getUserId();\n    User user = getById(userId);\n    String username = getUsername();\n\n    // Check the provided password against the stored password using the username and salt\n    String password = getPassword();\n    String salt = getSalt();\n    if (!verify(password, username, salt)) {\n        throw new RuntimeException(\"Invalid password\");\n    }\n\n    // Generate a temporary access code\n    String accessCode = generateAccessCode();\n\n    // Store the access code in Redis with a 10-minute expiration\n    Redis redis = getRedis();\n    redis.setex(accessCode, 10 * 60, valueOf(userId));\n\n    return accessCode;\n}", "CodeBleu_score": 25.264405202153217}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    String userId = getUserId(adminInitDataBO.getUsername());\n    RedisUserBO redisUserBO = getRedisUserBO(userId);\n    String password = getPassword(adminInitDataBO.getPassword(), redisUserBO.getSalt());\n    if (password.equals(redisUserBO.getPassword())) {\n        String accessCode = generateAccessCode();\n        setex(userId, accessCode, 10 * 60);\n        return accessCode;\n    } else {\n        throw new InvalidPasswordException(\"Invalid password\");\n    }\n}", "CodeBleu_score": 29.667541851912578}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\t    String userId = getUserId();\n    String key = \"auth:init:\" + userId;\n    List<String> unauthorizedMenuUrls = redisTemplate.opsForList().range(key, 0, -1);\n    return unauthorizedMenuUrls != null && unauthorizedMenuUrls.contains(getInitAuthUrl());\n}", "CodeBleu_score": 37.16988473826655}, {"code": "private boolean verifyInitAuth(){\n\t    String userId = getUserId();\n    String key = \"unauthorized_menu_url:\" + userId;\n    List<String> unauthorizedMenuUrls = getRedis().getList(key, String.class);\n    if (unauthorizedMenuUrls == null) {\n        return false;\n    }\n    return unauthorizedMenuUrls.contains(getInitAuthUrl());\n}", "CodeBleu_score": 35.85339678523138}, {"code": "private boolean verifyInitAuth(){\n\t    String userId = getUserId();\n    String key = \"user:\" + userId + \":initAuth\";\n    List<String> unauthUrls = getRedis().getList(key);\n    return !unauthUrls.contains(getInitialAuthUrl());\n}", "CodeBleu_score": 27.57113274129842}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    List<AdminRoleMenu> roleMenuList = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    }\n    saveBatch(roleMenuList);\n}", "CodeBleu_score": 57.29664465964214}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    List<AdminRoleMenu> roleMenuList = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    }\n    saveBatch(roleMenuList);\n}", "CodeBleu_score": 57.29664465964214}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    List<AdminRoleMenu> roleMenuList = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    }\n    saveBatch(roleMenuList);\n}", "CodeBleu_score": 57.29664465964214}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\t        try {\n            // Retrieve the log index\n            String index = getSysLogIndex();\n            // Convert the log object to a map\n            Map<String, Object> map = beanToMap(sysLog);\n            // Format the creation time\n            map.put(\"createTime\", formatDateTime(sysLog.getCreateTime()));\n            // Remove the ID\n            map.remove(\"id\");\n            // Create an index request\n            IndexRequest indexRequest = new IndexRequest(index).source(map);\n            // Submit the request to the Elasticsearch client\n            client.index(indexRequest, RequestOptions.DEFAULT);\n        } catch (Exception e) {\n            // Log the error message\n            log.error(\"\u4fdd\u5b58\u65e5\u5fd7\u9519\u8bef\uff1a{}\uff0c\u4fe1\u606f\uff1a{}\", e, sysLog);\n        }\n    }", "CodeBleu_score": 44.900132755106945}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t    // Get the log index\n    String index = getSysLogIndex();\n    // Convert the log object to a map\n    Map<String, Object> map = beanToMap(sysLog);\n    // Format the creation time\n    map.put(\"createTime\", formatDateTime(sysLog.getCreateTime()));\n    // Remove the ID\n    map.remove(\"id\");\n    // Create an index request\n    IndexRequest indexRequest = new IndexRequest(index)\n            .source(map);\n    // Submit the request asynchronously\n    client.indexAsync(indexRequest, RequestOptions.DEFAULT, new ActionListener<IndexResponse>() {\n        @Override\n        public void onResponse(IndexResponse indexResponse) {\n            // If the response is acknowledged, log the result\n            if (indexResponse.status().getStatus() == 200) {\n                log.info(\"{}\", indexResponse.status());\n            }\n        }\n\n        @Override\n        public void onFailure(Exception e) {\n            // If an error occurs, log the error message\n            log.error(\"{}\", getMessage(e));\n        }\n    });\n}", "CodeBleu_score": 48.3116953868965}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t    // Retrieve the log index\n    String index = getSysLogIndex();\n    // Convert the log object to a map\n    Map<String, Object> map = beanToMap(sysLog);\n    // Format the creation time\n    map.put(\"createTime\", formatDateTime(sysLog.getCreateTime()));\n    // Remove the ID\n    map.remove(\"id\");\n    // Create an index request\n    IndexRequest request = new IndexRequest(index);\n    // Submit the request to the Elasticsearch client\n    try {\n        client.index(request.source(map));\n    } catch (Exception e) {\n        // Log the error message\n        log.error(getMessage(\"ElasticsearchClient.saveSysLog.error\"), e);\n    }\n}", "CodeBleu_score": 35.72533649640693}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t    SearchRequest searchRequest = new SearchRequest(getIndexName());\n    SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();\n    BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();\n    if (querySysLogBO.getKeyword() != null) {\n        boolQueryBuilder.must(QueryBuilders.queryStringQuery(querySysLogBO.getKeyword()));\n    }\n    searchSourceBuilder.query(boolQueryBuilder);\n    searchSourceBuilder.sort(SortBuilders.fieldSort(\"createTime\").order(SortOrder.DESC));\n    searchSourceBuilder.fetchSource(null, new String[]{\"_id\", \"createTime\", \"createBy\", \"type\", \"remoteAddr\", \"requestUri\", \"method\", \"params\", \"time\", \"exception\", \"serviceId\", \"delFlag\"});\n    searchRequest.source(searchSourceBuilder);\n    try {\n        SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n        List<SysLog> sysLogList = mapToBean(searchResponse, SysLog.class);\n        BasePage<SysLog> basePage = new BasePage<>();\n        basePage.setTotal(searchResponse.getHits().getTotalHits().value);\n        basePage.setCurrent(querySysLogBO.getCurrent());\n        basePage.setSize(querySysLogBO.getSize());\n        basePage.setRecords(sysLogList);\n        return basePage;\n    } catch (IOException e) {\n        log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5217\u8868\u5931\u8d25\", e);\n    }\n    return null;\n}", "CodeBleu_score": 50.66120113593272}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t    // Initialize search criteria\n    SearchRequest searchRequest = new SearchRequest(getIndexName());\n    SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n    searchRequest.source(searchSourceBuilder);\n\n    // Sort results by creation time in descending order\n    searchSourceBuilder.sort(SortBuilders.fieldSort(\"createTime\").order(SortOrder.DESC));\n\n    // Exclude specific fields from the response\n    searchSourceBuilder.fetchSource(new String[]{\"id\", \"logType\", \"logContent\", \"createTime\"}, new String[]{});\n\n    // Execute search request using a REST client\n    try (RestHighLevelClient restHighLevelClient = getRestHighLevelClient()) {\n        SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n\n        // Map search results to SysLog objects\n        List<SysLog> sysLogList = mapToBean(searchResponse, SysLog.class);\n\n        // Populate BasePage object with results\n        BasePage<SysLog> basePage = new BasePage<>();\n        basePage.setTotal(getTotalHits(searchResponse));\n        basePage.setCurrent(querySysLogBO.getCurrent());\n        basePage.setSize(querySysLogBO.getSize());\n        basePage.setHits(getHits(searchResponse));\n        basePage.setList(sysLogList);\n        return basePage;\n    } catch (IOException e) {\n        // Handle IO exception\n        log.error(\"querySysLogPageList error\", e);\n        return null;\n    }\n}", "CodeBleu_score": 52.776543928927666}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t    try {\n        // Initialize search criteria\n        SearchRequest searchRequest = new SearchRequest(getIndexAliases());\n        SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder();\n        searchRequest.source(searchSourceBuilder);\n        // Sort results by creation time in descending order\n        searchSourceBuilder.sort(SortBuilders.fieldSort(SysLog.CREATION_TIME).order(SortOrder.DESC));\n        // Exclude specific fields from the response\n        searchSourceBuilder.fetchSource(new String[]{\"id\", \"creationTime\", \"creationUserId\", \"creationUserName\", \"module\", \"operation\", \"content\", \"ip\"}, new String[]{});\n        // Execute search request\n        SearchResponse searchResponse = restClient.search(searchRequest, RequestOptions.DEFAULT);\n        // Map search results to SysLog objects\n        List<SysLog> list = mapToBean(searchResponse, SysLog.class);\n        // Populate BasePage object with results\n        BasePage<SysLog> page = new BasePage<>();\n        page.setTotal(getTotalHits(searchResponse));\n        page.setCurrent(querySysLogBO.getCurrent());\n        page.setList(list);\n        return page;\n    } catch (IOException e) {\n        // Handle IO exception\n        log.error(e.getMessage(), e);\n    }\n    return null;\n}", "CodeBleu_score": 50.27021785835002}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\t  return new Promise((resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n\n    https\n      .get(url, function (response) {\n        response.pipe(file);\n        file.on(\"finish\", function () {\n          file.close(() => {\n            resolve();\n          });\n        });\n      })\n      .on(\"error\", function (err) {\n        fs.unlink(dest, () => {\n          reject(err);\n        });\n      });\n  });\n}", "CodeBleu_score": 84.67517220344354}, {"code": "async function downloadFile(url, dest){\n\t  return new Promise(async (resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n    https\n      .get(url, function (response) {\n        response.pipe(file);\n        file.on(\"finish\", function () {\n          file.close(() => {\n            resolve();\n          });\n        });\n      })\n      .on(\"error\", function (err) {\n        fs.unlink(dest, () => {\n          reject(err);\n        });\n      });\n  });\n}", "CodeBleu_score": 82.58710521999708}, {"code": "async function downloadFile(url, dest){\n\t  return new Promise((resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n    https\n      .get(url, function (response) {\n        response.pipe(file);\n        file.on(\"finish\", function () {\n          file.close(() => {\n            resolve();\n          });\n        });\n      })\n      .on(\"error\", function (err) {\n        fs.unlink(dest, () => {\n          reject(err);\n        });\n      });\n  });\n}", "CodeBleu_score": 84.67517220344354}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t        return Flux.fromIterable(module.getDependentModules())\n                .filter(moduleId -> !circularDependencyCheckSet.contains(moduleId))\n                .doOnNext(circularDependencyCheckSet::add)\n                .flatMap(this::getLiveModules)\n                .onErrorContinue((throwable, moduleId) -> {\n                    log.warn(\"Error while retrieving dependent module: {}\", moduleId, throwable);\n                });\n    }", "CodeBleu_score": 64.28718053530359}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t        return Flux.fromIterable(module.getDependencies())\n                .filter(moduleId -> !circularDependencyCheckSet.contains(moduleId))\n                .doOnNext(circularDependencyCheckSet::add)\n                .flatMap(moduleId -> getLiveModules(moduleId)\n                        .onErrorContinue((ex, obj) -> log.warn(\"Failed to retrieve module with id {}\", moduleId)))\n                .collectList()\n                .flatMapMany(Flux::fromIterable);\n    }", "CodeBleu_score": 62.445532014889984}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t        return getLiveModules(module.getDependencies())\n                .filter(moduleId -> !circularDependencyCheckSet.contains(moduleId))\n                .doOnNext(circularDependencyCheckSet::add)\n                .flatMapMany(this::getModules)\n                .onErrorContinue(\n                        (throwable, moduleId) -> {\n                            log.warn(\n                                    \"Error while retrieving dependent module: {} for module: {}\",\n                                    moduleId,\n                                    module.getId(),\n                                    throwable);\n                        });\n    }", "CodeBleu_score": 56.38638563416234}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        Object key = entry.getKey();\n        Object value = entry.getValue();\n        if (key instanceof String && value instanceof Map) {\n            Map<?, ?> nestedMap = (Map<?, ?>) value;\n            String componentType = (String) nestedMap.get(\"componentType\");\n            if (\"module\".equals(componentType)) {\n                String appId = (String) nestedMap.get(\"appId\");\n                if (isNotBlank(appId)) {\n                    dependentModuleIds.add(appId);\n                }\n            } else {\n                doGetDependentModules(nestedMap, dependentModuleIds);\n            }\n        } else if (value instanceof Map) {\n            doGetDependentModules((Map<?, ?>) value, dependentModuleIds);\n        } else if (value instanceof List) {\n            for (Object item : (List<?>) value) {\n                if (item instanceof Map) {\n                    doGetDependentModules((Map<?, ?>) item, dependentModuleIds);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 46.89228093672489}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    if (map == null) {\n        return;\n    }\n\n    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        if (entry.getKey() == \"componentType\" && entry.getValue() == \"module\") {\n            String appId = (String) map.get(\"appId\");\n            if (appId != null && !appId.isBlank()) {\n                dependentModuleIds.add(appId);\n            }\n        } else if (entry.getValue() instanceof Map) {\n            doGetDependentModules((Map<?, ?>) entry.getValue(), dependentModuleIds);\n        } else if (entry.getValue() instanceof List) {\n            for (Object item : (List<?>) entry.getValue()) {\n                if (item instanceof Map) {\n                    doGetDependentModules((Map<?, ?>) item, dependentModuleIds);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 45.244057758196554}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    if (map == null) {\n        return;\n    }\n    map.forEach((k, v) -> {\n        if (v instanceof Map) {\n            doGetDependentModules((Map<?, ?>) v, dependentModuleIds);\n        } else if (v instanceof List) {\n            ((List<?>) v).forEach(item -> {\n                if (item instanceof Map) {\n                    doGetDependentModules((Map<?, ?>) item, dependentModuleIds);\n                }\n            });\n        } else if (k instanceof String && v instanceof String) {\n            String key = (String) k;\n            String value = (String) v;\n            if (key.equals(\"componentType\") && value.equals(\"module\")) {\n                String appId = (String) map.get(\"appId\");\n                if (isNotBlank(appId)) {\n                    dependentModuleIds.add(appId);\n                }\n            }\n        }\n    });\n}", "CodeBleu_score": 50.03595892132109}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t    byte[] data = dataBuffer.getData();\n    if (createThumbnail) {\n        data = resizeImage(data);\n    }\n    dataBuffer.release();\n    return new Asset(data, srcContentType.toString());\n}", "CodeBleu_score": 30.59224729020087}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t    byte[] imageData = read(dataBuffer);\n    String contentType = createThumbnail ? \"image/jpeg\" : srcContentType.toString();\n    if (createThumbnail) {\n        imageData = resizeImage(imageData);\n    }\n    return new Asset(imageData, contentType);\n}", "CodeBleu_score": 41.32157000949803}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t\n     // Read the image data from the DataBuffer\n     byte[] imageData = read(dataBuffer);\n\n     // If creating a thumbnail, resize the image\n     if (createThumbnail) {\n         imageData = resizeImage(imageData);\n     }\n\n     // Set the content type to JPEG if creating a thumbnail, otherwise retain the original content type\n     MediaType contentType = createThumbnail ? MediaType.IMAGE_JPEG : srcContentType;\n\n     // Release the DataBuffer after processing\n     release(dataBuffer);\n\n     // Return a new Asset with the processed image data and content type\n     return new Asset(imageData, contentType);\n }", "CodeBleu_score": 43.89329550646096}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return assetRepository.findById(assetId)\n            .map(asset -> {\n                ServerHttpResponse response = exchange.getResponse();\n                response.setStatusCode(HttpStatus.OK);\n                response.getHeaders().setContentType(MediaType.valueOf(asset.getContentType()));\n                return response.writeWith(Mono.just(asset.getData()));\n            })\n            .flatMap(Function.identity());\n}", "CodeBleu_score": 48.638844675574575}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return assetService.getAsset(assetId)\n            .flatMap(asset -> {\n                exchange.getResponse().setStatusCode(HttpStatus.OK);\n                exchange.getResponse().getHeaders().setContentType(asset.getContentType());\n                return exchange.getResponse().writeWith(Flux.just(asset.getData()));\n            });\n}", "CodeBleu_score": 32.528234763142976}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return assetRepository.findById(assetId)\n            .map(asset -> {\n                ServerHttpResponse response = exchange.getResponse();\n                response.setStatusCode(HttpStatus.OK);\n                response.getHeaders().setContentType(MediaType.valueOf(asset.getContentType()));\n                return response.writeWith(Mono.just(asset.getData()));\n            })\n            .flatMap(Function.identity());\n}", "CodeBleu_score": 48.638844675574575}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    if (workspace.isSaasMode()) {\n        return Flux.empty();\n    }\n    return organizationService.getOrganizationsInEnterpriseMode()\n            .flatMapIterable(org -> org.getAuthConfigs())\n            .map(FindAuthConfig::new);\n}", "CodeBleu_score": 24.633770095051272}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    return workspaceModeService.getMode()\n            .flatMapIterable(mode -> mode == WorkspaceMode.SAAS ? List.of() : getOrganizationInEnterpriseMode())\n            .map(this::getAuthConfigs)\n            .flatMapIterable(Function.identity());\n}", "CodeBleu_score": 19.51355502330626}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    if (getMode() == toList) {\n        return getOrganizationInEnterpriseMode()\n                .flatMapIterable(org -> org.getAuthConfigs())\n                .map(authConfig -> FindAuthConfig.builder()\n                        .authConfig(authConfig)\n                        .organization(org)\n                        .build());\n    }\n    return Flux.empty();\n}", "CodeBleu_score": 28.627299785094557}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    return MongockSpring5.builder()\n            .setDriver(SpringDataMongo3Driver.withDefaultLock(mongoTemplate))\n            .addChangeLogsScanPackages(\"com.baeldung.mongock.changelogs\")\n            .setSpringContext(springContext)\n            .buildApplicationRunner();\n}", "CodeBleu_score": 25.527993177527282}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    return MongockSpring5.builder()\n            .setDriver(SpringDataMongo3Driver.withDefaultLock(mongoTemplate))\n            .addChangeLogsScanPackages(\"com.example.migration\")\n            .setSpringContext(springContext)\n            .buildApplicationRunner();\n}", "CodeBleu_score": 25.194049470079875}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    return MongockSpring5.builder()\n            .setDriver(SpringDataMongo3Driver.withDefaultLock(mongoTemplate))\n            .addChangeLogsScanPackages(\"com.mongodb.mongock.examples.springdata.v3.changelogs\")\n            .setSpringContext(springContext)\n            .buildApplicationRunner();\n}", "CodeBleu_score": 26.514788244026143}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t        ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory,\n                mappingMongoConverter);\n        reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n        return reactiveMongoTemplate;\n    }", "CodeBleu_score": 74.46363348357978}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t        ReactiveMongoTemplate mongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        mongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n        return mongoTemplate;\n    }", "CodeBleu_score": 95.78632722296167}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t    ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory,\n            mappingMongoConverter);\n    reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n    return reactiveMongoTemplate;\n}", "CodeBleu_score": 76.04143707756195}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return switchIfEmpty(\n        getLatestRecordByLibraryQueryId(libraryQueryId)\n            .map(LibraryQueryRecord::getDsl),\n        getById(libraryQueryId)\n            .map(LibraryQuery::getDsl)\n    );\n}", "CodeBleu_score": 58.79687556702332}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return getLatestRecordByLibraryQueryId(libraryQueryId)\n        .map(LibraryQueryRecord::getDsl)\n        .switchIfEmpty(getById(libraryQueryId)\n            .map(LibraryQuery::getDsl));\n}", "CodeBleu_score": 58.69795309417019}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return switchIfEmpty(getLatestRecordByLibraryQueryId(libraryQueryId)\n            .map(LibraryQueryRecord::getDsl)\n            .map(this::parseDSL)\n            .map(Map.class::cast),\n        getById(libraryQueryId)\n            .map(LibraryQuery::getDsl)\n            .map(this::parseDSL)\n            .map(Map.class::cast));\n}", "CodeBleu_score": 56.30289378218194}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        final Duration timeoutDuration = parseQueryTimeoutMs(timeoutStr);\n        final Mono<QueryExecutionResult> executionResult;\n        if (isJsDatasourcePlugin(datasource)) {\n            executionResult = executeByNodeJs(datasource, queryConfig, requestParams, timeoutDuration, queryVisitorContext);\n        } else {\n            executionResult = executeLocally(datasource, queryConfig, requestParams, timeoutDuration, queryVisitorContext);\n        }\n        return executionResult\n                .timeout(timeoutDuration, Mono.just(QueryExecutionResult.error(error(QueryExecutionErrorType.QUERY_TIMEOUT, \"Query timed out\"))))\n                .onErrorMap(TimeoutException.class, t -> error(QueryExecutionErrorType.QUERY_TIMEOUT, \"Query timed out\"))\n                .onErrorResume(e -> {\n                    if (e instanceof PluginException) {\n                        return just(QueryExecutionResult.error(e));\n                    } else {\n                        log.error(\"Error while executing query\", e);\n                        return just(QueryExecutionResult.error(error(QueryExecutionErrorType.GENERIC_ERROR, \"Error while executing query\")));\n                    }\n                });\n    }", "CodeBleu_score": 45.25186439789552}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        final long timeout = ofMillis(ofMillis(timeoutStr, queryVisitorContext.getLocale()), queryVisitorContext.getLocale());\n        if (isJsDatasourcePlugin(datasource)) {\n            return executeByNodeJs(datasource, queryConfig, requestParams, timeout, queryVisitorContext);\n        } else {\n            return executeLocally(datasource, queryConfig, requestParams, timeout, queryVisitorContext);\n        }\n    }", "CodeBleu_score": 33.455766739567615}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        long timeout = getTimeout(timeoutStr);\n        if (isJsDatasourcePlugin(datasource)) {\n            return executeByNodeJs(datasource, queryConfig, requestParams, timeout, queryVisitorContext);\n        } else {\n            return executeLocally(datasource, queryConfig, requestParams, timeout, queryVisitorContext);\n        }\n    }", "CodeBleu_score": 24.599704536266792}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t    return getQueryExecutor(datasource.getType())\n            .flatMap(queryExecutor -> buildQueryExecutionContextMono(datasource, queryConfig, requestParams, queryVisitorContext))\n            .flatMap(queryExecutionContext -> getOrCreateConnection(queryExecutionContext, queryVisitorContext))\n            .flatMap(queryExecutionContext -> doExecuteQuery(queryExecutionContext, queryVisitorContext))\n            .onErrorResume(throwable -> doOnError(queryVisitorContext, throwable));\n}", "CodeBleu_score": 34.15249698844314}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t    QueryExecutor queryExecutor = getQueryExecutor(datasource.getType());\n    QueryExecutionContext queryExecutionContext = buildQueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n    return getOrCreateConnection(datasource, queryExecutionContext)\n            .flatMap(connection -> doExecuteQuery(queryExecutor, queryExecutionContext, connection))\n            .doOnError(throwable -> doOnError(queryExecutionContext, throwable));\n}", "CodeBleu_score": 39.570195736403114}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t        return getQueryExecutor(datasource)\n            .flatMap(queryExecutor -> buildQueryExecutionContextMono(queryExecutor, datasource, queryConfig, requestParams, queryVisitorContext))\n            .flatMap(queryExecutionContext -> getOrCreateConnection(queryExecutionContext.getDatasource(), queryExecutionContext.getQueryConfig())\n                .flatMap(connection -> doExecuteQuery(queryExecutionContext, connection)))\n            .doOnError(error -> {\n                log.error(\"Error while executing query: \" + error.getMessage(), error);\n                throw new RuntimeException(error);\n            });\n    }", "CodeBleu_score": 36.77889606854228}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t    if (isBlank(timeoutStr)) {\n        return DEFAULT_QUERY_TIMEOUT_MS;\n    }\n\n    String valueStr = substring(timeoutStr, 0, timeoutStr.length() - 1);\n    int value = toInt(valueStr);\n    String unit = substring(timeoutStr, timeoutStr.length() - 1);\n    int unitMs = getUnitInfo(unit).map(TimeUnitInfo::getMs).orElseThrow(() -> new IllegalArgumentException(\"Invalid timeout unit: \" + unit));\n    int ms = value * unitMs;\n    if (ms > MAX_QUERY_TIMEOUT_MS) {\n        throw new IllegalArgumentException(\"Query timeout cannot exceed \" + MAX_QUERY_TIMEOUT_MS + \" ms\");\n    }\n    return ms;\n}", "CodeBleu_score": 36.291825038728064}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t    if (Strings.isBlank(timeoutStr)) {\n        return DEFAULT_QUERY_TIMEOUT_MS;\n    }\n    String value = timeoutStr.substring(0, timeoutStr.length() - 1);\n    String unit = timeoutStr.substring(timeoutStr.length() - 1);\n    UnitInfo unitInfo = getUnitInfo(unit);\n    double valueInMs = Double.parseDouble(value) * unitInfo.toMillis();\n    if (valueInMs > MAX_QUERY_TIMEOUT_MS) {\n        throw new IllegalArgumentException(\"Query timeout must be less than or equal to \" + MAX_QUERY_TIMEOUT_MS + \" ms\");\n    }\n    return (int) valueInMs;\n}", "CodeBleu_score": 33.26865370482617}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t    if (isBlank(timeoutStr)) {\n        return DEFAULT_QUERY_TIMEOUT_MS;\n    }\n\n    // Extract the numeric value and unit from the string\n    Matcher matcher = QUERY_TIMEOUT_PATTERN.matcher(timeoutStr);\n    if (!matcher.matches()) {\n        throw new IllegalArgumentException(\"Invalid query timeout string: \" + timeoutStr);\n    }\n\n    double value = Double.parseDouble(matcher.group(1));\n    String unit = matcher.group(2);\n\n    // Convert the value to milliseconds\n    long timeoutMs = convertToMs(value, unit);\n\n    // Ensure the timeout does not exceed the maximum allowed value\n    if (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n        throw new IllegalArgumentException(\"Query timeout cannot exceed \" + MAX_QUERY_TIMEOUT_MS + \" ms\");\n    }\n\n    return (int) timeoutMs;\n}", "CodeBleu_score": 37.685192881437885}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t    return getLiveQueries(currentOrganizationId, application.getId(), visitorId)\n            .map(queries -> {\n                if (queries.isEmpty()) {\n                    return ofError(new AppsmithException(AppsmithErrorAction.NO_RESOURCE_FOUND, FieldName.QUERY, \"\"));\n                }\n                return queries.stream()\n                        .filter(query -> !isNull(query.getDatasourceId()))\n                        .map(query -> query.getDatasourceId())\n                        .collect(toSet());\n            })\n            .flatMap(datasourceIds -> {\n                List<Pair<String, String>> datasourceIdPairs = new ArrayList<>();\n                return Flux.fromIterable(datasourceIds)\n                        .flatMap(datasourceId -> doCopyDatasource(currentOrganizationId, application.getId(), datasourceId, visitorId))\n                        .map(copiedDatasource -> {\n                            datasourceIdPairs.add(new Pair<>(datasourceId, copiedDatasource.getId()));\n                            return copiedDatasource;\n                        })\n                        .then(Mono.just(datasourceIdPairs));\n            });\n}", "CodeBleu_score": 37.38450458217163}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t    return getLiveQueries(application.getId(), visitorId)\n            .flatMapIterable(queries -> queries)\n            .map(query -> query.getDatasourceId())\n            .collectList()\n            .flatMap(datasourceIds -> {\n                if (datasourceIds.isEmpty()) {\n                    return Mono.error(ofError(ErrorCode.NO_DATASOURCE_FOUND));\n                }\n                return Flux.fromIterable(datasourceIds)\n                        .flatMap(datasourceId -> doCopyDatasource(currentOrganizationId, datasourceId))\n                        .map(datasource -> new Pair<>(datasourceIds.get(datasourceIds.indexOf(datasource.getId())), datasource.getId()))\n                        .collectList();\n            });\n}", "CodeBleu_score": 37.6029079211482}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t        return getLiveQueries(currentOrganizationId, application.getId(), visitorId)\n                .flatMapIterable(liveQueries -> liveQueries.stream()\n                        .map(liveQuery -> liveQuery.getDatasource().getId())\n                        .collect(Collectors.toSet()))\n                .flatMap(datasourceId -> doCopyDatasource(currentOrganizationId, application.getId(), datasourceId, visitorId))\n                .collectList()\n                .map(datasourceIds -> {\n                    if (datasourceIds.isEmpty()) {\n                        return Mono.error(ofError(new RuntimeException(\"No live queries found for application: \" + application.getName())));\n                    }\n                    return datasourceIds;\n                })\n                .flatMap(datasourceIds -> Mono.just(datasourceIds.stream()\n                        .map(datasourceId -> new Pair<>(datasourceId, datasourceId))\n                        .collect(Collectors.toList())));\n    }", "CodeBleu_score": 36.3951144471005}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceRepository.findById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.isSystemStatic()) {\n                    return Mono.just(datasource.getId());\n                } else if (datasource.isLegacyQuickRestApi()) {\n                    return Mono.just(Datasource.LEGACY_QUICK_REST_API_ID);\n                } else if (datasource.isLegacyOpenblocksApi()) {\n                    return Mono.just(Datasource.LEGACY_OPENBLOCKS_API_ID);\n                } else {\n                    return datasourceRepository.createNewDatasourceFrom(datasource, organizationId, visitorId);\n                }\n            });\n}", "CodeBleu_score": 61.22043907077979}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceRepository.findById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.isSystemStatic()) {\n                    return Mono.just(datasource.getId());\n                } else if (datasource.isLegacyQuickRestApi()) {\n                    return Mono.just(Datasource.LEGACY_QUICK_REST_API_DATASOURCE_ID);\n                } else if (datasource.isLegacyOpenblocksApi()) {\n                    return Mono.just(Datasource.LEGACY_OPENBLOCKS_API_DATASOURCE_ID);\n                } else {\n                    return datasourceRepository.createNewDatasourceFrom(datasource, organizationId, visitorId);\n                }\n            });\n}", "CodeBleu_score": 60.52512228392081}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceRepository.findById(datasourceId)\n            .map(datasource -> {\n                if (datasource.isSystemStatic()) {\n                    return datasource.getId();\n                }\n                if (datasource.isLegacyQuickRestApi()) {\n                    return datasource.getLegacyQuickRestApiNewId();\n                }\n                if (datasource.isLegacyOpenblocksApi()) {\n                    return datasource.getLegacyOpenblocksApiNewId();\n                }\n                return createNewDatasourceFrom(datasource, organizationId, visitorId);\n            });\n}", "CodeBleu_score": 59.877079708570804}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t        return filePart.content()\n                .flatMap(dataBuffer -> {\n                    try {\n                        return fileUploadService.upload(dataBuffer.asInputStream(), filePart.filename());\n                    } catch (IOException e) {\n                        return Mono.error(e);\n                    }\n                })\n                .flatMap(url -> {\n                    user.setAvatar(url);\n                    return userRepository.save(user);\n                })\n                .flatMap(updatedUser -> {\n                    if (StringUtils.hasText(user.getAvatar())) {\n                        return fileUploadService.remove(user.getAvatar());\n                    } else {\n                        return Mono.just(true);\n                    }\n                })\n                .flatMap(removed -> {\n                    if (removed) {\n                        return userRepository.save(user);\n                    } else {\n                        return Mono.error(new RuntimeException(\"Failed to remove old avatar\"));\n                    }\n                })\n                .map(updatedUser -> true)\n                .onErrorResume(e -> {\n                    log.error(\"Failed to save profile photo: {}\", e.getMessage());\n                    return Mono.just(false);\n                });\n    }", "CodeBleu_score": 26.45236822821584}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t    return filePart.content().flatMap(dataBuffer -> {\n        String fileName = user.getId() + \"-\" + UUID.randomUUID() + \"-\" + filePart.filename();\n        return fileService.upload(dataBuffer, fileName).flatMap(url -> {\n            if (user.getAvatar() != null) {\n                return fileService.remove(user.getAvatar()).then(userRepository.updateUserAvatar(user.getId(), url));\n            } else {\n                return userRepository.updateUserAvatar(user.getId(), url);\n            }\n        });\n    }).then(Mono.just(true));\n}", "CodeBleu_score": 34.68798602962697}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t        return defaultIfNull(user.getAvatar(), \"\")\n                .flatMap(avatar -> {\n                    if (!avatar.isEmpty()) {\n                        return remove(avatar);\n                    } else {\n                        return Mono.just(avatar);\n                    }\n                })\n                .flatMap(avatar -> {\n                    if (filePart.filename().isEmpty()) {\n                        return Mono.just(avatar);\n                    } else {\n                        return upload(filePart);\n                    }\n                })\n                .flatMap(avatar -> {\n                    if (avatar.isEmpty()) {\n                        return Mono.just(user);\n                    } else {\n                        return get(avatar)\n                                .flatMap(object -> {\n                                    user.setAvatar(avatar);\n                                    return updateUserAvatar(user);\n                                })\n                                .thenReturn(user);\n                    }\n                })\n                .map(user1 -> !user1.getAvatar().isEmpty());\n    }", "CodeBleu_score": 25.985163457912474}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    User user = new User();\n    user.setName(authUser.getName());\n    user.setState(authUser.getState());\n    user.setIsEnabled(authUser.getIsEnabled());\n    user.setAvatar(authUser.getAvatar());\n\n    if (authUser.getSource() == AuthSource.EMAIL && authUser.getAuthContext().containsKey(AuthContext.PASSWORD)) {\n        user.setPassword(encryptPassword(authUser.getAuthContext().get(AuthContext.PASSWORD)));\n    }\n\n    user.setConnections(new HashSet<>());\n    authUser.getAuthContext().forEach((authType, authValue) -> {\n        user.getConnections().add(new AuthConnection(user, authType, authValue));\n    });\n    user.setIsNewUser(true);\n\n    if (StringUtils.isNotEmpty(user.getAvatar())) {\n        user.setTpAvatarLink(user.getAvatar());\n    }\n\n    return userRepository.save(user);\n}", "CodeBleu_score": 49.52566623600432}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    // Create a new user with the authUser's name, state, and enabled status\n    User user = new User();\n    user.setName(authUser.getName());\n    user.setState(authUser.getState());\n    user.setIsEnabled(authUser.getIsEnabled());\n    user.setAvatar(authUser.getAvatar());\n\n    // If the auth source is email and the auth context contains a password, encrypt the password and set it for the user\n    if (authUser.getSource().equals(AuthSource.EMAIL)) {\n        String password = authUser.getAuthContext().get(AuthContextKey.PASSWORD);\n        if (password != null) {\n            user.setPassword(encryptPassword(password));\n        }\n    }\n\n    // Establish user connections from the authUser\n    user.setConnections(authUser.getConnections());\n\n    // Mark the user as new\n    user.setIsNewUser(true);\n\n    // Create and return the new user\n    return create(user);\n}", "CodeBleu_score": 45.926392835665204}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    User user = new User();\n    user.setName(authUser.getUsername());\n    user.setState(UserState.ACTIVE);\n    user.setIsEnabled(true);\n    user.setAvatar(authUser.getAvatar());\n    if (authUser.getAuthSource().equals(AuthSource.EMAIL) && authUser.getAuthContext().containsKey(\"password\")) {\n        user.setPassword(encryptPassword(authUser.getAuthContext().get(\"password\")));\n    }\n    user.setConnections(authUser.getConnections().stream()\n            .map(this::toAuthConnection)\n            .collect(Collectors.toSet()));\n    user.setIsNewUser(true);\n    return create(user);\n}", "CodeBleu_score": 41.974583404643546}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return connectionRepository.findByProviderIdAndProviderUserId(email, email)\n            .switchIfEmpty(Mono.defer(() -> connectionRepository.createConnectionRepository(email).save(new Connection(email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email, email", "CodeBleu_score": 13.557476937753082}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return Mono.fromCallable(() -> {\n        Connection connection = new Connection(Connection.Type.EMAIL, email);\n        user.getConnections().add(connection);\n        save(user);\n        return true;\n    }).onErrorResume(e -> {\n        if (e instanceof DuplicateKeyException) {\n            return Mono.error(new BindEmailException(e.getMessage()));\n        }\n        return Mono.error(e);\n    });\n}", "CodeBleu_score": 41.742363654798986}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return Mono.fromRunnable(() -> {\n        Connection connection = new Connection(Connection.Type.EMAIL, email, email, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null", "CodeBleu_score": 11.881125461980277}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return userRepository.findById(userId)\n        .flatMap(user -> {\n            if (matchPassword(user.getPassword(), oldPassword)) {\n                String encryptedPassword = encryptPassword(newPassword);\n                user.setPassword(encryptedPassword);\n                return userRepository.save(user).thenReturn(true);\n            } else {\n                return Mono.error(new InvalidPasswordException(\"Invalid password\"));\n            }\n        });\n}", "CodeBleu_score": 26.8736627100558}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return userRepository.findById(userId)\n            .flatMap(user -> {\n                if (matchPassword(oldPassword, user.getPassword())) {\n                    String encryptedPassword = encryptPassword(newPassword);\n                    user.setPassword(encryptedPassword);\n                    return userRepository.save(user).thenReturn(true);\n                } else {\n                    return Mono.error(new InvalidPasswordException(\"Invalid password\"));\n                }\n            })\n            .onErrorResume(InvalidPasswordException.class, e -> Mono.error(e));\n}", "CodeBleu_score": 34.29867556848746}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return userRepository.findById(userId)\n        .flatMap(user -> {\n            if (!user.isValidPassword(oldPassword)) {\n                return Mono.error(new InvalidPasswordException(\"Invalid password\"));\n            }\n            String encryptedPassword = encryptPassword(newPassword);\n            user.setPassword(encryptedPassword);\n            return userRepository.save(user);\n        })\n        .thenReturn(true)\n        .onErrorResume(InvalidPasswordException.class, e -> Mono.error(e));\n}", "CodeBleu_score": 28.463865900287928}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t        return getUserGroupIdsInOrg(userId, orgMember.getOrgId(), withoutDynamicGroups)\n                .flatMapMany(groupIds -> getByIds(groupIds, locale))\n                .filter(group -> !group.isAllUsersGroup())\n                .map(group -> Map.of(\n                        \"groupId\", group.getId(),\n                        \"groupName\", group.getName()\n                ))\n                .collectList();\n    }", "CodeBleu_score": 25.323400679830165}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t        return getOrgId(orgMember)\n                .flatMapMany(orgId -> getUserGroupIdsInOrg(orgId, userId, withoutDynamicGroups))\n                .filter(group -> !isAllUsersGroup(group))\n                .map(group -> Map.of(\n                        \"id\", group.getId(),\n                        \"name\", getName(group, locale)))\n                .collectList();\n    }", "CodeBleu_score": 21.832823868624818}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t        return getUserGroupIdsInOrg(userId, orgMember.getOrgId(), withoutDynamicGroups)\n                .flatMapMany(groupIds -> Flux.fromIterable(groupIds))\n                .filter(groupId -> !isAllUsersGroup(groupId))\n                .map(groupId -> Map.of(\"id\", groupId, \"name\", getName(groupId, locale)))\n                .collectList();\n    }", "CodeBleu_score": 24.10091424526718}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    UserStatus userStatus = UserStatus.builder().id(userId).hasShowNewUserGuidance(true).build();\n    return mongoUpsertHelper.upsert(userStatus, UserStatus.class);\n}", "CodeBleu_score": 61.55153830758464}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    UserStatus userStatus = new UserStatus();\n    userStatus.setId(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n    return mongoUpsertHelper.upsert(userStatus);\n}", "CodeBleu_score": 36.67479675721037}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    return Mono.just(UserStatus.builder()\n            .id(userId)\n            .hasShowNewUserGuidance(true)\n            .build())\n            .flatMap(userStatus -> mongoUpsertHelper.upsert(userStatus, UserStatus.class));\n}", "CodeBleu_score": 37.94136279242073}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\n\tg, _ := errgroup.WithContext(context.Background())\n\n\tfor k, p := range c.partitions {\n\t\tk, p := k, p\n\t\tif predicatePartition(k, p) {\n\t\t\tg.Go(func() error {\n\t\t\t\tp.clearMatching(predicateValue)\n\t\t\t\treturn nil\n\t\t\t})\n\t\t}\n\t}\n\n\tg.Wait()\n}", "CodeBleu_score": 41.250504903776}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\n\tg, ctx := rungroup.New(context.Background())\n\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.name, p) {\n\t\t\tp := p\n\t\t\tg.Enqueue(func() {\n\t\t\t\tp.clearMatching(ctx, predicateValue)\n\t\t\t})\n\t\t}\n\t}\n\n\tg.Wait()\n}", "CodeBleu_score": 37.48875943814065}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition must not be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue must not be nil\")\n\t}\n\tg, _ := errgroup.WithContext(context.Background())\n\tg.SetLimit(len(c.partitions))\n\trungroup.Run(g, func(ctx context.Context) error {\n\t\tc.partitions.clearMatching(predicatePartition, predicateValue)\n\t\treturn nil\n\t})\n\tg.Wait()\n}", "CodeBleu_score": 34.90015288543798}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\tpanic(\"invalid input\")\n\t}\n\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\treturn int(math.Floor(float64(maxItemsTotal) / avgWeightPerPartition))\n}", "CodeBleu_score": 50.63965035403436}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 {\n\t\tpanic(\"number of partitions must be greater than zero\")\n\t}\n\tif totalWeightQuantity <= 0 {\n\t\tpanic(\"total weight quantity must be greater than zero\")\n\t}\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\treturn int(math.Floor(0.5 + float64(maxItemsTotal)/avgWeightPerPartition))\n}", "CodeBleu_score": 60.82380494049671}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\tpanic(\"Number of partitions and total weight quantity must be greater than zero\")\n\t}\n\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\n\treturn int(math.Floor(float64(maxItemsTotal) / avgWeightPerPartition))\n}", "CodeBleu_score": 53.722275469613415}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\t    Map<String, Object> map = new HashMap<>();\n    Connection conn = null;\n    try {\n        conn = getConnection();\n        DatabaseMetaData meta = conn.getMetaData();\n        if (meta != null) {\n            map.put(\"databaseProductName\", meta.getDatabaseProductName());\n            map.put(\"databaseVersion\", meta.getDatabaseProductVersion());\n        }\n    } catch (SQLException e) {\n        e.printStackTrace();\n    } finally {\n        if (conn != null) {\n            try {\n                conn.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return map;\n}", "CodeBleu_score": 45.37257635796225}, {"code": "public Map<String, Object> contributorMap(){\n\t    Map<String, Object> map = new HashMap<>();\n    try {\n        Connection connection = getConnection();\n        DatabaseMetaData metaData = connection.getMetaData();\n        if (metaData != null) {\n            map.put(\"databaseProductName\", metaData.getDatabaseProductName());\n            map.put(\"databaseVersion\", metaData.getDatabaseMajorVersion() + \".\" + metaData.getDatabaseMinorVersion());\n        }\n    } catch (SQLException e) {\n        e.printStackTrace();\n    }\n    return map;\n}", "CodeBleu_score": 48.43517699838366}, {"code": "public Map<String, Object> contributorMap(){\n\t    Map<String, Object> contributorMap = new HashMap<>();\n    DatabaseMetaData metadata = getConnectionMetadata();\n    if (metadata != null) {\n        contributorMap.put(\"databaseProductName\", getDatabaseProductName(metadata));\n        contributorMap.put(\"databaseVersion\", getDatabaseVersion(metadata));\n    }\n    return contributorMap;\n}", "CodeBleu_score": 38.63533669319613}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    UserSettings userSettings = configMap.getUserSettings()\n    if (userSettings == null) {\n        info.setAllowRegistration(false)\n        info.setMustVerifyEmailOnRegistration(false)\n    } else {\n        info.setAllowRegistration(userSettings.isAllowRegistration())\n        info.setMustVerifyEmailOnRegistration(userSettings.isMustVerifyEmailOnRegistration())\n    }\n}", "CodeBleu_score": 40.42871723534476}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    UserSettings userSettings = configMap.getUserSettings()\n    if (userSettings == null) {\n        info.setAllowRegistration(false)\n        info.setMustVerifyEmailOnRegistration(false)\n    } else {\n        info.setAllowRegistration(userSettings.getAllowRegistration())\n        info.setMustVerifyEmailOnRegistration(userSettings.getMustVerifyEmailOnRegistration())\n    }\n}", "CodeBleu_score": 40.82355911187444}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    ConfigMap userSettings = configMap.get(GlobalInfo.USER_SETTINGS_CONFIG_KEY)\n    if (userSettings == null) {\n        info.setAllowRegistration(false)\n        info.setMustVerifyEmailOnRegistration(false)\n    } else {\n        info.setAllowRegistration(userSettings.getBoolean(GlobalInfo.ALLOW_REGISTRATION_CONFIG_KEY, false))\n        info.setMustVerifyEmailOnRegistration(userSettings.getBoolean(GlobalInfo.MUST_VERIFY_EMAIL_ON_REGISTRATION_CONFIG_KEY, false))\n    }\n}", "CodeBleu_score": 37.481087905987934}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\t    ThreadGroup threadGroup = new ThreadGroup(\"restart\") {\n        public void uncaughtException(Thread thread, Throwable throwable) {\n            super.uncaughtException(thread, throwable);\n            try {\n                Thread.sleep(10000L);\n            } catch (InterruptedException e) {\n            }\n            System.exit(1);\n        }\n    };\n    Thread thread = new Thread(threadGroup, new Runnable() {\n        public void run() {\n            try {\n                Thread.sleep(1000L);\n                ClassLoader contextClassLoader = getContextClassLoader();\n                ClassLoader applicationClassLoader = getClassLoader();\n                setContextClassLoader(applicationClassLoader);\n                setDaemon(false);\n                start();\n            } catch (InterruptedException e) {\n            }\n        }\n    });\n    thread.setContextClassLoader(getContextClassLoader());\n    thread.setDaemon(true);\n    thread.start();\n    return \"restarting\";\n}", "CodeBleu_score": 36.50427310293297}, {"code": "public Object restart(){\n\t    ThreadGroup threadGroup = new ThreadGroup(\"Restart Thread Group\");\n    threadGroup.setDaemon(false);\n    Thread thread = new Thread(threadGroup, \"Restart Thread\");\n    thread.setContextClassLoader(getClassLoader());\n    thread.start();\n    return \"Restarting application...\";\n}", "CodeBleu_score": 49.7407071728157}, {"code": "public Object restart(){\n\t    ThreadGroup group = new ThreadGroup(\"Restart Thread Group\");\n    Thread thread = new Thread(group, this, \"Restart Thread\");\n    thread.setContextClassLoader(getClassLoader());\n    thread.setDaemon(false);\n    thread.start();\n    return \"Restarting application...\";\n}", "CodeBleu_score": 47.45252700470769}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t    configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n    configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n}", "CodeBleu_score": 71.82220753180427}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t        configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n        configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n    }", "CodeBleu_score": 70.31411393684094}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t        configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n        configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n    }", "CodeBleu_score": 91.93611354982335}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t    return RouterFunctions.route(\n            GET(\"/console/**\")\n                    .and(accept(MediaType.TEXT_HTML))\n                    .and(negate(method(HttpMethod.GET).and(path(\"/console/assets/**\"))))\n                    .and(negate(WebSocketHandlerAdapter.class::isInstance)),\n            request -> ServerResponse.ok().contentType(MediaType.TEXT_HTML)\n                    .body(BodyInserters.fromResource(getConsole().getLocation())));\n}", "CodeBleu_score": 29.319567627670516}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t    return RouterFunctions.route(\n            RequestPredicates.GET(\"/console/**\")\n                    .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n                    .and(RequestPredicates.negate(RequestPredicates.method(HttpMethod.GET))),\n            request -> {\n                if (request.getURI().getPath().contains(\"assets\")) {\n                    return ServerResponse.notFound().build();\n                }\n                return ServerResponse.ok()\n                        .contentType(MediaType.TEXT_HTML)\n                        .body(BodyInserters.fromValue(getConsole().getIndexHtml()));\n            });\n}", "CodeBleu_score": 23.28500081567408}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t    return RouterFunctions.route(\n            RequestPredicates.GET(\"/console/**\")\n                    .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n                    .and(RequestPredicates.path(\"/console/**\").negate())\n                    .and(RequestPredicates.not(RequestPredicates.method(HttpMethod.GET).and(RequestPredicates.headers(headers -> headers.containsKey(\"Upgrade\") && headers.get(\"Upgrade\").contains(\"websocket\"))))),\n            request -> ServerResponse.ok().contentType(MediaType.TEXT_HTML).body(BodyInserters.fromResource(new ClassPathResource(\"console/index.html\"))));\n}", "CodeBleu_score": 23.996361907500138}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t    return route(\n            getUc()\n                    .and(accept(MediaType.TEXT_HTML))\n                    .and(negate(method(HttpMethod.GET)))\n                    .and(negate(WebSocketRequest.class::isInstance)),\n            request -> ok().contentType(MediaType.TEXT_HTML)\n                    .bodyValue(getLocation(request, \"/uc/index.html\")));\n}", "CodeBleu_score": 27.906761979623795}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t    return route(\n        getLocation(\"/uc/**\")\n            .and(accept(MediaType.TEXT_HTML))\n            .and(negate(method(HttpMethod.GET))).and(negate(WebSocketServer.isWebSocketRequest())),\n        request -> serveIndex(getUc(), request)\n    );\n}", "CodeBleu_score": 29.702701525608276}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t  return route(\n    GET(\"/uc/**\")\n      .and(accept(TEXT_HTML))\n      .and(negate(method(HttpMethod.GET)))\n      .and(negate(path(\"/uc/assets/**\"))),\n    req -> {\n      String location = getLocation(req);\n      return serveIndex(location);\n    }\n  );\n}", "CodeBleu_score": 27.109411410888256}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    new MapReactiveIndexedSessionRepository(new ConcurrentHashMap<>()) {\n        @Override\n        protected void onInitialize() {\n            setDefaultMaxInactiveInterval(getSession().getTimeout().getSeconds())\n        }\n    }\n}", "CodeBleu_score": 19.872513567105706}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    ReactiveMapSessionRepository repository = new ReactiveMapSessionRepository(new ConcurrentHashMap<>());\n    repository.setDefaultMaxInactiveInterval(sessionProperties.getTimeout().toSeconds());\n    return repository;\n}", "CodeBleu_score": 32.47405660874585}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    new MapReactiveIndexedSessionRepository(new ConcurrentHashMap<>()) {\n        @Override\n        protected void configureSession(MapSession session, ServerHttpRequest request) {\n            super.configureSession(session, request)\n            setDefaultMaxInactiveInterval(session, request)\n        }\n    }\n}", "CodeBleu_score": 26.661534013242356}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    DefaultUserDetailService userDetailService = new DefaultUserDetailService();\n    userDetailService.setUserService(userService);\n    userDetailService.setRoleService(roleService);\n    userDetailService.setSecurityConfig(haloProperties.getSecurity());\n    return userDetailService;\n}", "CodeBleu_score": 38.56770958452107}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    DefaultUserDetailService userDetailService = new DefaultUserDetailService(userService, roleService);\n    userDetailService.setTwoFactorAuthDisabled(!haloProperties.getSecurity().getTwoFactorAuth().isEnabled());\n    return userDetailService;\n}", "CodeBleu_score": 53.147797637735316}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    DefaultUserDetailService userDetailService = new DefaultUserDetailService(userService, roleService);\n    // Set two-factor authentication\n    if (haloProperties.getSecurity().isTwoFactorAuth()) {\n        userDetailService.setTwoFactorAuth(true);\n    } else {\n        userDetailService.setTwoFactorAuthDisabled(true);\n    }\n    return userDetailService;\n}", "CodeBleu_score": 49.797325938772396}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\t    Comment.CommentOwner owner = new Comment.CommentOwner();\n    owner.setKind(\"email\");\n    owner.setEmail(this.getEmail() != null ? this.getEmail() : \"\");\n    owner.setDisplayName(this.getDisplayName());\n    owner.setAnnotations(new ArrayList<>());\n    owner.getAnnotations().add(new Comment.Annotation().setType(\"avatar\").setValue(this.getAvatar()));\n    owner.getAnnotations().add(new Comment.Annotation().setType(\"website\").setValue(this.getWebsite()));\n    return owner;\n}", "CodeBleu_score": 37.781810169252985}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t    Comment.CommentOwner owner = new Comment.CommentOwner();\n    owner.setKind(\"email\");\n    owner.setEmail(email != null ? email : \"\");\n    owner.setDisplayName(displayName != null ? displayName : \"\");\n    owner.setAnnotations(new HashMap<>());\n    owner.getAnnotations().put(\"avatar\", avatar != null ? avatar : \"\");\n    owner.getAnnotations().put(\"website\", website != null ? website : \"\");\n    return owner;\n}", "CodeBleu_score": 35.940990438909836}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t    Comment.CommentOwner owner = new Comment.CommentOwner();\n    owner.setKind(\"email\");\n    owner.setEmail(email != null ? email : \"\");\n    owner.setDisplayName(displayName);\n    owner.setAnnotations(new ArrayList<>());\n    owner.getAnnotations().add(new Comment.CommentOwner.Annotation(\"avatar\", avatar));\n    owner.getAnnotations().add(new Comment.CommentOwner.Annotation(\"website\", website));\n    return owner;\n}", "CodeBleu_score": 39.16773430925106}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t  if (commentOwner.getKind() == Comment.CommentOwner.Kind.EMAIL) {\n    User user = User.fetch(post.getOwner());\n    return user.getEmail().equals(commentOwner.getName());\n  }\n  return post.getOwner().equals(commentOwner.getName());\n}", "CodeBleu_score": 31.18344467099054}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t  if (commentOwner.getKind() == Comment.CommentOwner.Kind.EMAIL) {\n    User user = User.fetch(post.getOwner().getEmail());\n    return user.getEmail().equals(commentOwner.getName());\n  } else {\n    return post.getOwner().getName().equals(commentOwner.getName());\n  }\n}", "CodeBleu_score": 37.11677405783761}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    if (commentOwner.getKind() == Comment.CommentOwner.Kind.EMAIL) {\n        User user = User.fetch(post.getOwner());\n        return user.getEmail().equals(commentOwner.getName());\n    } else {\n        return post.getOwner().equals(commentOwner.getName());\n    }\n}", "CodeBleu_score": 31.955627261749182}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\t    ListOptions listOptions = new ListOptions();\n    String fieldQuery = labelAndFieldSelectorToListOptions();\n    if (isNotBlank(keyword)) {\n        fieldQuery = fieldQuery + \",\" + \"metadata.name=~\" + keyword;\n    }\n    if (isNotBlank(ownerName)) {\n        fieldQuery = fieldQuery + \",\" + \"metadata.ownerReferences.name=\" + ownerName;\n    }\n    if (isNotBlank(ownerKind)) {\n        fieldQuery = fieldQuery + \",\" + \"metadata.ownerReferences.kind=\" + ownerKind;\n    }\n    listOptions.setFieldSelector(fieldQuery);\n    return listOptions;\n}", "CodeBleu_score": 29.531259346775656}, {"code": "public ListOptions toListOptions(){\n\t    ListOptions listOptions = new ListOptions();\n    String fieldQuery = labelAndFieldSelectorToListOptions();\n    if (isNotBlank(keyword)) {\n        fieldQuery = fieldQuery.concat(String.format(\"|%s\", keyword));\n    }\n    if (isNotBlank(ownerName)) {\n        fieldQuery = fieldQuery.concat(String.format(\"|%s\", ownerName));\n    }\n    listOptions.setFieldSelector(fieldQuery);\n    return listOptions;\n}", "CodeBleu_score": 28.429735288410214}, {"code": "public ListOptions toListOptions(){\n\t    ListOptions listOptions = new ListOptions();\n    String fieldQuery = labelAndFieldSelectorToListOptions();\n    if (isNotBlank(keyword)) {\n        fieldQuery += \",\" + \"metadata.name=\" + keyword;\n    }\n    if (isNotBlank(ownerName)) {\n        fieldQuery += \",\" + \"metadata.ownerReferences.name=\" + ownerName;\n    }\n    listOptions.setFieldSelector(fieldQuery);\n    return listOptions;\n}", "CodeBleu_score": 23.78861880389721}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    return Mono.justOrEmpty(commentName)\n            .flatMap(name -> getByName(name))\n            .map(counter -> upvote(counter))\n            .map(counter -> getUpvote(counter))\n            .map(upvoteCount -> map(upvoteCount))\n            .switchIfEmpty(Mono.defer(() -> Mono.just(build())))\n            .onErrorResume(e -> Mono.just(build()));\n}", "CodeBleu_score": 36.69735688294848}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    return Mono.justOrEmpty(commentName)\n            .flatMap(name -> Mono.justOrEmpty(counters.get(name)))\n            .map(counter -> new CommentStats(counter.get()))\n            .defaultIfEmpty(new CommentStats());\n}", "CodeBleu_score": 38.92938912810751}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    return Mono.justOrEmpty(commentName)\n            .flatMap(nameOf -> Mono.justOrEmpty(upvote.get(nameOf)))\n            .map(getUpvote -> new CommentStats(commentName, getUpvote))\n            .defaultIfEmpty(new CommentStats(commentName, 0));\n}", "CodeBleu_score": 32.880011152471475}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\t    // Create a subscriber from the given user identity.\n    Subscriber subscriber = createSubscriber(identity);\n\n    // Set up an interest reason for the subscription.\n    InterestReason reason = new InterestReason();\n    reason.setReasonType(InterestReason.REASON_TYPE_SOMEONE_REPLIED_TO_YOU);\n    reason.setExpression(\"repliedOwner = \" + identity.getName());\n\n    // Subscribe the user to the notification center.\n    subscribe(subscriber, reason);\n\n    // Block until the subscription is completed.\n    block();\n}", "CodeBleu_score": 38.834196008159935}, {"code": "void subscribeReply(UserIdentity identity){\n\t    // Create a subscriber from the user identity\n    Subscriber subscriber = [Subscriber createSubscriber:identity];\n    \n    // Set up an interest reason for the subscription\n    InterestReason *reason = [[InterestReason alloc] init];\n    [reason setReasonType:InterestReasonTypeSomeoneRepliedToYou];\n    [reason setCondition:[NSPredicate predicateWithFormat:@\"repliedOwner.name == %@\", identity.name]];\n    \n    // Subscribe the user to the notification center\n    [subscriber subscribe:^(Notification notification) {\n        // Handle the received notification\n        // ...\n    } reason:reason];\n    \n    // Block until the subscription is completed\n    [subscriber block];\n}", "CodeBleu_score": 23.160871962174173}, {"code": "void subscribeReply(UserIdentity identity){\n\t    NSString *name = identity.name;\n    Subscriber *subscriber = [[Subscriber alloc] initWithUserIdentity:identity];\n    if (subscriber) {\n        InterestReason *reason = [[InterestReason alloc] init];\n        reason.type = Reply;\n        reason.condition = [NSString stringWithFormat:@\"replied owner = %@\", name];\n        [subscriber setReason:reason];\n        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(replyNotification:) name:subscriber.name object:nil];\n        [[NSNotificationCenter defaultCenter] postNotificationName:subscriber.name object:subscriber];\n        [subscriber block];\n    }\n}", "CodeBleu_score": 26.284295532780433}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\t    return client\n            .update(comment)\n            .flatMap(updated -> {\n                if (updated.isApproved()) {\n                    return Mono.just(updated);\n                } else {\n                    return Mono.error(new OptimisticLockingFailureException(\"Comment update failed due to optimistic locking\"));\n                }\n            })\n            .onErrorResume(OptimisticLockingFailureException.class, e -> {\n                return updateCommentWithRetry(comment, this::setApproved);\n            });\n}", "CodeBleu_score": 27.581151970887262}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t    return client.update(comment.setApproved(true).setApprovedTime(now()))\n            .onErrorResume(OptimisticLockingFailureException.class, e -> updateCommentWithRetry(comment, this::approveComment));\n}", "CodeBleu_score": 17.64886860774461}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t    return client.update(comment)\n            .doOnNext(updatedComment -> {\n                if (!updatedComment.isApproved()) {\n                    updatedComment.setApproved(true);\n                    updatedComment.setApprovedAt(now());\n                }\n            })\n            .onErrorResume(OptimisticLockingFailureException.class, e -> updateCommentWithRetry(comment, this::approveComment));\n}", "CodeBleu_score": 31.861183166601926}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->livewire($this);\n    }\n\n    if ($action instanceof HasRecord && $this instanceof HasRecord) {\n        $action->record($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 63.40732870559565}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->livewire($this);\n    }\n\n    if ($this instanceof HasRecord && $action instanceof HasRecord) {\n        $action->record($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 67.07739332696906}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->livewire($this->getLivewire());\n    }\n\n    if ($action instanceof HasRecord && $this instanceof HasRecord) {\n        $action->record($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 65.08337415352024}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    $successRedirect = $this->getSuccessRedirect();\n    if ($successRedirect) {\n        return $this->evaluate($successRedirect);\n    }\n    return $this;\n}", "CodeBleu_score": 47.89759939826716}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    if ($this->successRedirectUrl) {\n        $this->evaluate($this->successRedirectUrl);\n    }\n    return $this;\n}", "CodeBleu_score": 36.747858867757465}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    if ($this->successRedirect) {\n        $this->evaluate($this->successRedirect);\n    }\n\n    return $this;\n}", "CodeBleu_score": 35.45355701308439}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if (! $record) {\n        return;\n    }\n\n    if (! method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagClassName = config('filament-spatie-tags.tag_resource');\n\n    $tags = collect($state)->map(function ($tagName) use ($tagClassName) {\n        $locale = $tagClassName::getLocale();\n\n        $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n        if ($tag?->isEmpty() ?? true) {\n            $tag = $tagClassName::create([\n                'name' => [$locale => $tagName],\n            ]);\n        }\n\n        return $tag;\n    })->flatten();\n\n    $record->tags()->sync($tags->pluck('id'));\n}", "CodeBleu_score": 78.5356179382964}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if (! $record || ! method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagClassName = config('filament-spatie-laravel-tags-plugin.tag_model');\n\n    collect($state)\n        ->map(function ($tagName) use ($tagClassName) {\n            $locale = $tagClassName::getLocale();\n\n            $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n            if ($tag?->isEmpty() ?? true) {\n                $tag = $tagClassName::create([\n                    'name' => [$locale => $tagName],\n                ]);\n            }\n\n            return $tag;\n        })\n        ->flatten()\n        ->pipe(function (Collection $tags) use ($record) {\n            $record->tags()->sync($tags->pluck('id'));\n        });\n}", "CodeBleu_score": 65.80929985856882}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if (! $record) {\n        return;\n    }\n\n    if (! method_exists($record, 'tags')) {\n        return;\n    }\n\n    /** @var \\Spatie\\Tags\\Tag $tagClassName */\n    $tagClassName = config('tags.tag_model');\n\n    $tags = collect($state)->map(function ($tagName) use ($tagClassName) {\n        $locale = $tagClassName::getLocale();\n\n        $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n        if ($tag?->isEmpty() ?? true) {\n            $tag = $tagClassName::create([\n                'name' => [$locale => $tagName],\n            ]);\n        }\n\n        return $tag;\n    })->flatten();\n\n    $record->tags()->sync($tags->pluck('id')->toArray());\n}", "CodeBleu_score": 77.14604865227386}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\n\t// Dissect the repository path to obtain the space path and repository name\n\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to dissect repository path: %w\", err)\n\t}\n\n\t// Create a scope for the pipeline\n\tscope := authz.NewScope(\n\t\tspacePath,\n\t\tauthz.PipelineScope,\n\t\tpipelineIdentifier,\n\t)\n\n\t// Create a resource for the pipeline\n\tresource := authz.NewResource(\n\t\tspacePath,\n\t\tauthz.PipelineResource,\n\t\tpipelineIdentifier,\n\t)\n\n\t// Perform the authorization check\n\terr = authz.Check(ctx, authorizer, session, scope, resource, permission)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to check authorization: %w\", err)\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 58.979792786199305}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\n\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to disect the path: %w\", err)\n\t}\n\n\tscope := authz.NewScope(\n\t\tspacePath,\n\t\tauthz.Pipeline,\n\t\tpipelineIdentifier,\n\t)\n\n\tresource := authz.NewResource(\n\t\tspacePath,\n\t\tauthz.Pipeline,\n\t\tpipelineIdentifier,\n\t\trepoName,\n\t)\n\n\tif err := authorizer.Check(ctx, authz.NewRequest(session, permission, scope, resource)); err != nil {\n\t\treturn fmt.Errorf(\"failed to check permission: %w\", err)\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 55.141646946760694}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\n\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error disecting repo path: %w\", err)\n\t}\n\n\tscope := enum.Scope{\n\t\tSpace: spacePath,\n\t\tType:  enum.Pipeline,\n\t}\n\n\tresource := enum.Resource{\n\t\tSpace: spacePath,\n\t\tType:  enum.Pipeline,\n\t\tName:  repoName,\n\t\tID:    pipelineIdentifier,\n\t}\n\n\tif err := authorizer.Check(ctx, scope, resource, permission); err != nil {\n\t\treturn fmt.Errorf(\"error checking permission: %w\", err)\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 65.30423139196762}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparent, name, err := paths.DisectLeaf(space.Path)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"unable to disect space path: %w\", err)\n\t}\n\n\tscope := types.Scope{\n\t\tType:  enum.SpaceScope,\n\t\tSpace: parent,\n\t}\n\tresource := types.Resource{\n\t\tType: enum.SpaceResource,\n\t\tName: name,\n\t}\n\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 75.23823968911465}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparent, name := paths.DisectLeaf(space.Path)\n\tscope := fmt.Sprintf(\"%s:%s\", parent, name)\n\tresource := fmt.Sprintf(\"space:%s\", scope)\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 42.51569948558451}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparent, name := paths.DisectLeaf(space.Path)\n\tscope := authz.NewScope(\n\t\tauthz.NewSpacePather(parent),\n\t\tauthz.NewSpacePatcher(name),\n\t)\n\tresource := authz.NewResource(space.Type, space.ID)\n\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 46.90519792779199}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\n\tvar target json.RawMessage\n\tif err := decoder.Decode(&target); err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar buffer bytes.Buffer\n\tencoder := json.NewEncoder(&buffer)\n\tencoder.SetEscapeHTML(false)\n\tif err := encoder.Encode(target); err != nil {\n\t\treturn nil, err\n\t}\n\n\tresult := buffer.Bytes()\n\n\t// Remove trailing newline\n\tif len(result) > 0 && result[len(result)-1] == '\n' {\n\t\tresult = result[:len(result)-1]\n\t}\n\n\treturn result, nil\n}", "CodeBleu_score": 67.09277188605195}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource, _ = json.Marshal(data)\n\t}\n\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\n\tvar payload any\n\tif err := decoder.Decode(&payload); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to decode JSON payload: %w\", err)\n\t}\n\n\tvar buf bytes.Buffer\n\tencoder := json.NewEncoder(&buf)\n\tencoder.SetEscapeHTML(false)\n\n\tif err := encoder.Encode(payload); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to encode JSON payload: %w\", err)\n\t}\n\n\tresult := buf.Bytes()\n\n\t// Remove trailing newline\n\tif len(result) > 0 && result[len(result)-1] == '\n' {\n\t\tresult = result[:len(result)-1]\n\t}\n\n\treturn result, nil\n}", "CodeBleu_score": 64.76570083895908}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource, _ = json.Marshal(data)\n\t}\n\n\tvar result bytes.Buffer\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\tencoder := json.NewEncoder(&result)\n\tencoder.SetEscapeHTML(false)\n\n\tif err := decoder.Decode(data); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to decode JSON payload: %w\", err)\n\t}\n\n\tif err := encoder.Encode(data); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to encode JSON payload: %w\", err)\n\t}\n\n\tresultBytes := result.Bytes()\n\tif len(resultBytes) > 0 && resultBytes[len(resultBytes)-1] == '\n' {\n\t\tresultBytes = resultBytes[:len(resultBytes)-1]\n\t}\n\n\treturn resultBytes, nil\n}", "CodeBleu_score": 63.09292097050698}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.getRepo(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := c.checkAccess(session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 33.926963475778415}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.getRepo(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := c.checkAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 37.90507287867934}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\n\trepoRef, err := apiauth.CheckRepo(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif repo == nil {\n\t\treturn nil, usererror.New(fmt.Errorf(\"repository %s not found\", repoRef))\n\t}\n\n\tif err := c.auth.CheckRepoAccess(ctx, session, repo.ID, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 58.96573922392972}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tsanitizers := map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty:  createEmptyPayloadSanitizer,\n\t\tenum.CheckPayloadKindRaw:    createRawPayloadSanitizer,\n\t\tenum.CheckPayloadKindPipeline: createPipelinePayloadSanitizer,\n\t\tenum.CheckPayloadKindMarkdown: createRawPayloadSanitizer,\n\t}\n\treturn sanitizers\n}", "CodeBleu_score": 31.04274688432668}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tsanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\n\tsanitizers[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindMarkdown] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer()\n\n\treturn sanitizers\n}", "CodeBleu_score": 62.446156573879044}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty:   createEmptyPayloadSanitizer(),\n\t\tenum.CheckPayloadKindRaw:     createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindMarkdown: createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindPipeline: createPipelinePayloadSanitizer(),\n\t}\n}", "CodeBleu_score": 30.24694084693376}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\t    local buffer = self\n    local renderer = buffer.renderer\n    local state = buffer.state\n\n    state.on_render = on_render\n\n    if not renderer.attached_buffers[buffer.id] then\n        renderer.attached_buffers[buffer.id] = buffer\n        renderer.buffer_order[buffer.id] = #renderer.buffer_order + 1\n        renderer:update_buffer_order()\n    end\n\n    return buffer", "CodeBleu_score": 58.2548779513832}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t    if self.state.renderer_id ~= nil then\n        return self\n    end\n    local renderer = self.screen:attach_renderer(on_render)\n    self.state.renderer_id = renderer.id\n    self.state.renderer_name = renderer.name\n    return self", "CodeBleu_score": 48.425858958891595}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t    local buffer = self\n    local renderer = buffer.renderer\n    local screen = renderer.screen\n    local state = buffer.state\n\n    if not state.attached then\n        screen:attach(buffer)\n        state.attached = true\n    end\n\n    state.on_render = on_render\n    return buffer", "CodeBleu_score": 61.84145625467583}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\t    if not self:is_valid() then return end\n\n    if callback then\n        self.watcher = loop.coroutine(function()\n            loop.free_textlock(self.filename)\n            self.watcher = loop.watch_file(self.filename, function()\n                callback(self)\n            end)\n        end)\n    end", "CodeBleu_score": 51.75295498220699}, {"code": "function Buffer:watch(callback)\n\t    if self:is_valid() then\n        if callback then\n            self.watcher = loop.watch_file(self.filename, callback)\n        end\n    else\n        console.debug.error(\"Buffer is invalid\")\n    end", "CodeBleu_score": 30.078535523578754}, {"code": "function Buffer:watch(callback)\n\t    if self:is_valid() then\n        self.watcher:watch_file(self.filename, callback)\n    end", "CodeBleu_score": 19.47945150714105}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\t    if self.hex then \n        return self.hex\n    end\n    local spec = self.spec\n    local attr = spec.attr\n    local hl_name = self.hl_name\n    local hl_id = self.hl_id\n    local hl_name = self.hl_name\n    local hl_id = self.hl_id\n    local hl_name = self.hl_name\n    local hl_id = self.hl_id\n    local hl_name = self.hl_name\n    local hl_id = self.hl_id\n    local hl_name = self.hl_name\n    local hl_id = self.hl_id\n    local hl_name = self.hl_name\n    local hl_id = self.hl_id\n    local hl_name = self.hl_name\n    local hl_id = self.hl_id\n    local hl_name = self.hl_name\n    local hl_id = self.hl_id\n    local hl_name = self.hl_name\n    local hl_id = self.hl_id\n    local hl_name = self.hl_name\n    local hl_id = self.hl_id\n    local hl_name = self.hl_name\n    local hl_id = self.hl_id\n    local hl_name = self.hl_name\n    local hl_id = self.hl_id\n    local hl_name = self.hl_name\n    local hl_id = self.hl_id\n    local hl_name = self.hl_name\n    local hl_id = self.hl_id\n    local hl_name = self.hl_name\n    local hl_id = self.hl_id\n    local hl_name = self.hl_name\n    local hl_id = self.hl_id\n    local hl_name = self.hl_name\n    local hl_id = self.hl_id\n    local hl_name = self.hl_name\n    local hl_id = self.hl_id\n    local hl_name = self.hl_", "CodeBleu_score": 39.1154508500489}, {"code": "function Color:to_hex()\n\t  if self.hex then\n    return self.hex\n  end\n\n  local spec = self:get_spec()\n  local attr = self.attr == \"foreground\" and \"fg\" or \"bg\"\n  local hl_name = spec[attr]\n  if not hl_name then\n    return nil\n  end\n\n  local hl_id = vim.api.nvim_get_hl_by_name(hl_name, true)\n  if not hl_id then\n    return nil\n  end\n\n  local hex = vim.fn.synIDattr(hl_id, \"fg\")\n  if hex == \"\" then\n    hex = vim.fn.synIDattr(hl_id, \"bg\")\n  end\n\n  if hex == \"\" then\n    return nil\n  end\n\n  self.hex = hex\n  return hex", "CodeBleu_score": 54.99793022580729}, {"code": "function Color:to_hex()\n\t    if self._hex then\n        return self._hex\n    end\n\n    local spec = self:spec()\n    local attr = spec.attr\n    local hl = self:get_highlight(attr)\n\n    if hl then\n        local hex = self:get_hex(hl)\n        self._hex = hex\n        return hex\n    end", "CodeBleu_score": 44.987020011544}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t    local lines = buffer:get_lines()\n    for _, line in ipairs(lines) do\n        local start_pos = 1\n        while true do\n            local match_start, match_end = string.find(line, pattern, start_pos)\n            if not match_start then break end\n            buffer:add_highlight(hl, match_start - 1, match_end)\n            start_pos = match_end + 1\n        end\n    end\n    return self", "CodeBleu_score": 51.43596609476203}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t    local lines = buffer:get_lines()\n    for _, line in ipairs(lines) do\n        local start_pos, end_pos = string.find(line, pattern)\n        if start_pos then\n            buffer:add_highlight(hl, start_pos, end_pos)\n        end\n    end\n    return self", "CodeBleu_score": 39.86436178961949}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t    local lines = buffer:get_lines()\n    for _, line in ipairs(lines) do\n        local start_index, end_index = string.find(line, pattern)\n        if start_index then\n            buffer:add_highlight(hl, start_index, end_index)\n        end\n    end\n    return self", "CodeBleu_score": 40.02242920365205}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t    local id = vim.api.nvim_buf_line_index(buffer, -1) + col\n    vim.api.nvim_buf_set_extmark(buffer, Namespace.ns, id, row, col, {\n        virt_text = { { text, hl } },\n        virt_text_pos = pos,\n        virt_lines = true,\n        virt_lines_above = true,\n        virt_lines_below = true,\n        ephemeral = true,\n        priority = priority,\n    })\n    return id", "CodeBleu_score": 56.9527845883409}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t    local id = row .. \":\" .. col\n    local ns_id = vim.api.nvim_buf_create_extmark(buffer, ns_id, row, col, {\n        virt_text = {\n            { text, hl },\n        },\n        virt_text_pos = pos,\n        priority = priority,\n    })\n    return ns_id", "CodeBleu_score": 63.52830921951125}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t    local id = row * 10000 + col\n    vim.api.nvim_buf_set_extmark(buffer, Namespace.namespace, id, row, col, {\n        virt_text = { { text, hl } },\n        virt_text_pos = pos,\n        virt_lines = true,\n        virt_lines_above = true,\n        virt_lines_below = true,\n        priority = priority,\n    })\n    return id", "CodeBleu_score": 64.5097951647496}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\t  local line = ''\n  for _, c in ipairs(output) do\n    if c == '", "CodeBleu_score": 8.452511998369484}, {"code": "function Spawn:parse_result(output, callback)\n\t    local result = table.concat(output)\n    local line = \"\"\n    for i = 1, #result do\n        local char = result:sub(i, i)\n        if char == \"", "CodeBleu_score": 29.6915043827681}, {"code": "function Spawn:parse_result(output, callback)\n\t    local output_str = table.concat(output)\n    local line = \"\"\n    for i = 1, #output_str do\n        local char = output_str:sub(i, i)\n        if char == \"", "CodeBleu_score": 30.849542509169268}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t    if self.watchers[path] then\n        return self.watchers[path]\n    end\n    local watcher = vim.loop.new_fs_event()\n    watcher:start(path, {}, function(err, filename, status)\n        if err then\n            vim.notify(err)\n        else\n            handler(filename, status)\n        end\n    end)\n    self.watchers[path] = watcher\n    return watcher", "CodeBleu_score": 46.09936051933728}, {"code": "function Watcher:watch_file(path, handler)\n\t    local watcher = self.watchers[path]\n    if watcher then\n        return watcher\n    end\n    watcher = vim.loop.new_fs_event()\n    watcher:start(path, {}, vim.schedule_wrap(handler))\n    self.watchers[path] = watcher\n    return watcher", "CodeBleu_score": 50.9838628592001}, {"code": "function Watcher:watch_file(path, handler)\n\t    if not self.watchers[path] then\n        local watcher = vim.loop.new_fs_event()\n        watcher:start(path, {}, vim.schedule_wrap(handler))\n        self.watchers[path] = watcher\n    end\n    return self.watchers[path]", "CodeBleu_score": 47.180432825916355}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t    local lines = self:get_lines()\n    local hunks = self.git_object:live_hunks(lines)\n    if hunks == nil then\n        return nil, \"Error getting hunks\"\n    end\n\n    local signs_setting = signs_setting:get()\n    for _, hunk in ipairs(hunks) do\n        local sign_ns_id = self.namespace:get_sign_ns_id()\n        local sign_group_id = hunk.type\n        local sign_priority = hunk.priority\n        local sign_text = hunk.text\n        local sign_hl_group = hunk.hl_group\n        local sign_virt_text = hunk.virt_text\n        local sign_virt_text_win_col = hunk.virt_text_win_col\n        local sign_virt_text_highlight_args = hunk.virt_text_highlight_args\n        local sign_virt_text_highlight_group = hunk.virt_text_highlight_group\n        local sign_virt_text_highlight_col = hunk.virt_text_highlight_col\n        local sign_virt_text_highlight_transparent = hunk.virt_text_highlight_transparent\n        local sign_virt_text_highlight_overlay = hunk.virt_text_highlight_overlay\n        local sign_virt_text_highlight_blend = hunk.virt_text_highlight_blend\n        local sign_virt_text_highlight_reverse = hunk.virt_text_highlight_reverse\n        local sign_virt_text_highlight_italic = hunk.virt_text_highlight_italic\n        local sign_virt_text_highlight_bold = hunk.virt_text_highlight_bold\n        local sign_virt_text_highlight_strikethrough = hunk.virt_text_highlight_strikethrough\n        local sign_virt_text_highlight_underline = hunk.virt_text_highlight_underline\n        local sign_virt_text_highlight_underline_color = hunk.virt_text_highlight_underline", "CodeBleu_score": 29.091543540011315}, {"code": "function GitBuffer:live_hunks()\n\t    local bufnr = self.bufnr\n    local git_object = self.git_object\n    local lines = self:get_lines()\n    local sign_ns_id = self.namespace:get_sign_ns_id()\n\n    local hunks, err = git_object:live_hunks()\n    if err then\n        return nil, err\n    end\n\n    local signs_setting = signs_setting:get()\n    for _, hunk in ipairs(hunks) do\n        local start_line = hunk.start_line\n        local end_line = hunk.end_line\n        local type = hunk.type\n        local priority = hunk.priority\n\n        for line_num = start_line, end_line do\n            local line = lines[line_num]\n            if line then\n                local sign_id = vim.api.nvim_buf_get_extmark_by_id(bufnr, sign_ns_id, line_num)\n                if sign_id then\n                    vim.api.nvim_buf_del_extmark(bufnr, sign_ns_id, sign_id)\n                end\n                if signs_setting[type] then\n                    local sign_name = signs_setting[type]\n                    local sign_priority = priority\n                    vim.api.nvim_buf_set_extmark(bufnr, sign_ns_id, line_num, 0, {\n                        id = line_num,\n                        virt_text = { { sign_name, sign_priority } },\n                        virt_text_pos = 'eol',\n                        hl_mode = 'combine',\n                    })\n                end\n            end\n        end\n    end\n\n    self.hunks = hunks\n    return hunks", "CodeBleu_score": 47.79894071797489}, {"code": "function GitBuffer:live_hunks()\n\t    local buf_lines = self:get_lines()\n    local hunks = self.git_object:live_hunks()\n    if hunks == nil then\n        return nil, hunks\n    end\n    for _, hunk in ipairs(hunks) do\n        for _, line in ipairs(hunk.lines) do\n            local sign_ns_id = self.namespace:get_sign_ns_id(line.type)\n            if sign_ns_id ~= nil then\n                local sign = {\n                    id = sign_ns_id,\n                    line = line.line_num,\n                    name = \"GitSigns\",\n                    priority = self:get_sign_priority(line.type),\n                    lnum = line.line_num,\n                }\n                self:set_sign(sign)\n            end\n        end\n    end\n    self:update_signs()\n    return hunks", "CodeBleu_score": 42.01964055923598}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\t  local file = fs.tmpname()\n  fs.write_file(file, patch)\n  local _, err = self.git:stage_hunk_from_patch(file)\n  fs.remove_file(file)\n  return err", "CodeBleu_score": 50.50022770639008}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t    local tmp_file = fs.tmpname()\n    fs.write_file(tmp_file, patch)\n    local _, err = self.git:stage_hunk_from_patch(tmp_file)\n    fs.remove_file(tmp_file)\n    return err", "CodeBleu_score": 52.613037525705366}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t  local tmpfile = fs.tmpname()\n  fs.write_file(tmpfile, patch)\n  local _, err = self.git:stage_hunk_from_patch(tmpfile)\n  fs.remove_file(tmpfile)\n  return err", "CodeBleu_score": 51.29678952793917}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    OAuthRequest request = createAccessTokenRequest(requestToken, verifier);\n    return sendAndExtract(request);\n}", "CodeBleu_score": 16.64490903559544}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    OAuthRequest request = new OAuthRequest(getAccessTokenVerb(), getAccessTokenEndpoint());\n    addHttpBasicAuthHeader(request);\n    addBodyParameter(getAccessTokenBodyName(), verifier.getValue());\n    addBodyParameter(OAuthConstants.TOKEN, requestToken.getToken());\n    Response response = sendRequest(request);\n    return extract(response);\n}", "CodeBleu_score": 49.96839357381504}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    OAuthRequest request = new OAuthRequest(getAccessTokenVerb(), getAccessTokenEndpoint());\n    addBodyParameter(request, getHttpBasicAuthHeaderValue());\n    addBodyParameter(request, OAuthConstants.TOKEN, requestToken.getToken());\n    addBodyParameter(request, OAuthConstants.VERIFIER, verifier.getValue());\n    return sendAndExtract(request);\n}", "CodeBleu_score": 45.931564749612555}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    CredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(\n            new AuthScope(host.getHostName(), host.getPort()),\n            new UsernamePasswordCredentials(username, password));\n\n    AuthCache authCache = new BasicAuthCache();\n    BasicScheme basicAuth = new BasicScheme();\n    authCache.put(host, basicAuth);\n\n    BasicHttpContext localcontext = new BasicHttpContext();\n    localcontext.setAttribute(HttpClientContext.CREDS_PROVIDER, credsProvider);\n    localcontext.setAttribute(HttpClientContext.AUTH_CACHE, authCache);\n    context.setAttribute(HttpClientContext.CREDS_PROVIDER, credsProvider);\n    context.setAttribute(HttpClientContext.AUTH_CACHE, authCache);\n    logger.info(\"Added host \" + host.getHostName() + \" to auth cache\");\n}", "CodeBleu_score": 37.69692384557259}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n    credentialsProvider.setCredentials(new AuthScope(host), new UsernamePasswordCredentials(username, password));\n    AuthCache authCache = new BasicAuthCache();\n    BasicScheme basicAuth = new BasicScheme();\n    authCache.put(host, basicAuth);\n    context.setCredentialsProvider(credentialsProvider);\n    context.setAuthCache(authCache);\n    log.info(\"Added host {} to auth cache\", host);\n}", "CodeBleu_score": 69.27093644299151}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    CredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(new AuthScope(host), new UsernamePasswordCredentials(username, password));\n    AuthCache authCache = new BasicAuthCache();\n    BasicScheme basicAuth = new BasicScheme();\n    authCache.put(host, basicAuth);\n    context.setCredentialsProvider(credsProvider);\n    context.setAuthCache(authCache);\n    log.info(\"Added {} to auth cache\", host);\n}", "CodeBleu_score": 63.09363123873024}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins jenkins = Jenkins.get();\n    AvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache not found\");\n    }\n\n    String cacheKey = source.getCacheKey();\n    cache.seedCache(cacheKey, source.getAvatarImage());\n\n    try {\n        return jenkins.getRootUrlFromRequest() + URLEncoder.encode(cacheKey, \"UTF-8\") + \"?s=\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(e);\n    }\n}", "CodeBleu_score": 46.08810573742566}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins jenkins = Jenkins.get();\n    AvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"No AvatarCache extension found\");\n    }\n\n    String cacheKey = cache.hashKey(source);\n    cache.seed(cacheKey);\n\n    try {\n        return jenkins.getRootUrl() + \"/avatar/\" + URLEncoder.encode(cacheKey, \"UTF-8\") + \"/\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding is not supported\", e);\n    }\n}", "CodeBleu_score": 48.90500944784056}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins j = Jenkins.get();\n    AvatarCache cache = j.getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache is not installed\");\n    }\n    String cacheKey = cache.generateCacheKey(source);\n    cache.seedCache(cacheKey);\n    try {\n        return j.rootUrl + cache.getEncodedKey(cacheKey) + \"?s=\" + URLEncoder.encode(size, \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(e);\n    }\n}", "CodeBleu_score": 47.22848171160021}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    this.image = scaleImage(image);\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 41.94488775908607}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    if (image.getWidth() > 128 || image.getHeight() > 128) {\n        this.image = scaleImage(image, 128, 128);\n    } else {\n        this.image = image;\n    }\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 72.4796684952631}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    this.image = image;\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n    if (image.getWidth() > 128 || image.getHeight() > 128) {\n        this.image = scaleImage(image, 128, 128);\n    }\n}", "CodeBleu_score": 62.924407639026114}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false\n    }\n    if (future.isDone) {\n        try {\n            cacheEntry = future.get()\n            lastModified = cacheEntry.lastModified\n            image = cacheEntry.image\n        } catch (ExecutionException | InterruptedException e) {\n            e.printStackTrace()\n        }\n        future = null\n        return true\n    }\n    return true\n}", "CodeBleu_score": 34.86244482461605}, {"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    if (future.isDone()) {\n        try {\n            cacheEntry = future.get();\n            image = cacheEntry.getImage();\n            lastModified = cacheEntry.getLastModified();\n        } catch (Exception e) {\n            // ignore\n        }\n        future = null;\n    }\n    return true;\n}", "CodeBleu_score": 44.79723393980192}, {"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false\n    }\n    if (future.isDone) {\n        try {\n            cacheEntry = future.get()\n            lastModified = cacheEntry.lastModified\n            image = cacheEntry.image\n        } catch (ExecutionException e) {\n            e.printStackTrace()\n        } catch (InterruptedException e) {\n            e.printStackTrace()\n        }\n        future = null\n    }\n    return true\n}", "CodeBleu_score": 40.63070557886004}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t        if (node instanceof Image) {\n            Image image = (Image) node;\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            image.write(baos);\n            if (req.getBooleanParam(\"flush\", false)) {\n                baos.flush();\n            }\n            rsp.setHeader(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n            rsp.setHeader(\"Pragma\", \"no-cache\");\n            rsp.setHeader(\"Expires\", \"0\");\n            rsp.setContentType(\"image/png\");\n            rsp.getOutputStream().write(baos.toByteArray());\n        }\n    }", "CodeBleu_score": 47.069193464938685}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\n    // Generate the image\n    BufferedImage image = generateImage(req, rsp, node);\n\n    // Write the image to a byte array output stream\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    ImageIO.write(image, \"png\", baos);\n    baos.flush();\n\n    // Set headers for caching and content type\n    rsp.setHeader(\"Cache-Control\", \"no-cache\");\n    rsp.setHeader(\"Expires\", \"-1\");\n    rsp.setHeader(\"Pragma\", \"no-cache\");\n    rsp.setContentType(\"image/png\");\n\n    // Write the byte array to the response output stream\n    rsp.getOutputStream().write(baos.toByteArray());\n}", "CodeBleu_score": 45.037915522214576}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t        if (node == null) {\n            rsp.setStatus(HttpServletResponse.SC_NOT_FOUND);\n            return;\n        }\n        if (node instanceof AbstractProject) {\n            node = ((AbstractProject) node).getIcon();\n        }\n        if (node instanceof Icon) {\n            Icon icon = (Icon) node;\n            if (icon.getImage() == null) {\n                rsp.setStatus(HttpServletResponse.SC_NOT_FOUND);\n                return;\n            }\n            if (icon.getImage().getImageType() != Image.IMAGE_PNG) {\n                rsp.setStatus(HttpServletResponse.SC_NOT_FOUND);\n                return;\n            }\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            icon.getImage().writeImage(baos);\n            baos.flush();\n            rsp.setHeader(\"Cache-Control\", \"max-age=0, no-cache, no-store, must-revalidate\");\n            rsp.setHeader(\"Pragma\", \"no-cache\");\n            rsp.setHeader(\"Expires\", \"0\");\n            rsp.setContentType(\"image/png\");\n            rsp.setContentLength(baos.size());\n            rsp.getOutputStream().write(baos.toByteArray());\n            rsp.flush();\n        }\n    }", "CodeBleu_score": 38.93800905223739}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t        if (enableCache) {\n            cacheManager = new CacheManager();\n            cacheManager.setTeamCacheDuration(teamCacheDuration);\n            cacheManager.setRepositoriesCacheDuration(repositoriesCacheDuration);\n        }\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n        configureContext();\n        setClientProxyParams();\n        build();\n        convert();\n        setExpireDuration();\n        setConnectionManagerShared();\n        setRetryHandler();\n        setKeepAliveStrategy();\n        create();\n        configureBuilder();\n    }", "CodeBleu_score": 33.77044932361699}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t        if (enableCache) {\n            setCacheExpiration(teamCacheDuration, repositoriesCacheDuration);\n        }\n        setClientProxyParams();\n        setConnectionManager();\n        setRetryHandler();\n        setKeepAliveStrategy();\n        setConnectionManagerShared();\n        setHttpClientBuilder(configureBuilder(authenticator));\n        setHttpContext(configureContext(authenticator));\n        build();\n        convert();\n    }", "CodeBleu_score": 17.901250508340077}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t        this.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n\n        if (enableCache) {\n            setExpireDuration();\n        }\n\n        setClientProxyParams();\n        setConnectionManagerShared();\n        setRetryHandler();\n        setKeepAliveStrategy();\n        configureContext();\n        configureBuilder();\n\n        if (authenticator != null) {\n            authenticator.configure(httpClientBuilder, context);\n        }\n\n        build();\n    }", "CodeBleu_score": 36.759155272382685}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    def sourceBranch = getSource(pullRequest)\n    if (sourceBranch) {\n        setCommitClosure(sourceBranch, getRawNode(sourceBranch))\n    }\n\n    def destinationBranch = getDestination(pullRequest)\n    if (destinationBranch) {\n        setCommitClosure(destinationBranch, getRawNode(destinationBranch))\n    }\n}", "CodeBleu_score": 27.354317252577253}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    def sourceBranch = pullRequest.getSource\n    if (sourceBranch != null) {\n        def rawNode = sourceBranch.getRawNode()\n        if (rawNode != null) {\n            sourceBranch.setCommitClosure(new CommitClosure(rawNode))\n        }\n    }\n\n    def destinationBranch = pullRequest.getDestination\n    if (destinationBranch != null) {\n        def rawNode = destinationBranch.getRawNode()\n        if (rawNode != null) {\n            destinationBranch.setCommitClosure(new CommitClosure(rawNode))\n        }\n    }\n}", "CodeBleu_score": 39.490636949840386}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    if (pullRequest.getSource() != null) {\n        if (pullRequest.getSource().getBranch() != null) {\n            if (pullRequest.getSource().getBranch().getRawNode() != null) {\n                pullRequest.setCommitClosure(new CommitClosure(pullRequest.getSource().getBranch().getRawNode()))\n            }\n        }\n    }\n    if (pullRequest.getDestination() != null) {\n        if (pullRequest.getDestination().getBranch() != null) {\n            if (pullRequest.getDestination().getBranch().getRawNode() != null) {\n                pullRequest.setCommitClosure(new CommitClosure(pullRequest.getDestination().getBranch().getRawNode()))\n            }\n        }\n    }\n}", "CodeBleu_score": 27.49743519617023}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration jenkinsLocationConfiguration = JenkinsLocationConfiguration.get();\n    if (jenkinsLocationConfiguration == null) {\n        throw new IllegalStateException(\"JenkinsLocationConfiguration is not configured\");\n    }\n    String url = jenkinsLocationConfiguration.getUrl();\n    if (url == null) {\n        throw new IllegalStateException(\"JenkinsLocationConfiguration.url is not configured\");\n    }\n    return DisplayURLProvider.get().getRunURL(build);\n}", "CodeBleu_score": 53.55253999492638}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration jenkinsLocationConfiguration = JenkinsLocationConfiguration.get();\n\n    if (jenkinsLocationConfiguration == null) {\n        throw new IllegalStateException(\"Jenkins Location Configuration is not set\");\n    }\n\n    String url = jenkinsLocationConfiguration.getUrl();\n    if (url == null) {\n        throw new IllegalStateException(\"Jenkins Location URL is not set\");\n    }\n\n    return DisplayURLProvider.get().getRunURL(build);\n}", "CodeBleu_score": 54.257749607627744}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    String url = Jenkins.get().getRootUrl();\n    if (url == null) {\n        throw new IllegalStateException(\"Jenkins root URL needs to be configured\");\n    }\n    return DisplayURLProvider.get().getRunURL(build);\n}", "CodeBleu_score": 57.84548382974691}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    try {\n        URI uri = new URI(url)\n        if (uri.host == null) {\n            throw new IllegalStateException(\"Jenkins URL is malformed: ${url}\")\n        }\n        if (uri.host.contains(\"localhost\") || uri.host.contains(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"Jenkins URL is not configured: ${url}\")\n        }\n        if (bitbucket instanceof BitbucketApiClient) {\n            if (!uri.host.contains(\".\")) {\n                throw new IllegalStateException(\"Jenkins URL is not fully qualified: ${url}\")\n            }\n        }\n        return url\n    } catch (URISyntaxException e) {\n        throw new IllegalStateException(\"Jenkins URL is malformed: ${url}\")\n    }\n}", "CodeBleu_score": 57.63111770656826}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n        throw new IllegalStateException(\"Invalid URL: \" + url);\n    }\n\n    URI uri = URI.create(url);\n\n    String host = uri.getHost();\n    if (host.equals(\"localhost\") || host.equals(\"unconfigured-jenkins-location\")) {\n        throw new IllegalStateException(\"Invalid URL: \" + url);\n    }\n\n    if (bitbucket instanceof BitbucketCloudApiClient) {\n        if (host.startsWith(\"bitbucket.org\")) {\n            throw new IllegalStateException(\"Invalid URL: \" + url);\n        }\n    }\n\n    return url;\n}", "CodeBleu_score": 41.56011046712725}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    if (url == null || url.isEmpty()) {\n        throw new IllegalStateException(\"URL cannot be null or empty\");\n    }\n    try {\n        URL parsedUrl = new URL(url);\n        String host = parsedUrl.getHost();\n        if (host.equals(\"localhost\") || host.equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"URL cannot contain 'localhost' or 'unconfigured-jenkins-location'\");\n        }\n        if (bitbucket instanceof BitbucketCloudApiClient) {\n            if (!host.contains(\".\")) {\n                throw new IllegalStateException(\"URL must be fully qualified for Bitbucket Cloud API clients\");\n            }\n        }\n        return url;\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"Invalid URL: \" + url, e);\n    }\n}", "CodeBleu_score": 60.69487719801073}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t    BitbucketBuildTrigger trigger = BitbucketBuildTrigger.getBitbucketBuildTrigger(build.getProject());\n    if (trigger.isNotificationsDisabled()) {\n        listener.getLogger().println(\"Build notifications are disabled.\");\n        return;\n    }\n\n    AbstractBuild<?, ?> currentBuild = build;\n    RevisionAction revisionAction = currentBuild.getAction(RevisionAction.class);\n    if (revisionAction == null) {\n        listener.getLogger().println(\"Couldn't obtain revision information for this build.\");\n        return;\n    }\n    Revision revision = revisionAction.getRevision();\n    if (revision == null) {\n        listener.getLogger().println(\"Couldn't obtain revision information for this build.\");\n        return;\n    }\n\n    String hash = revision.getSha1String();\n    if (hash == null) {\n        listener.getLogger().println(\"Couldn't obtain hash information for this build.\");\n        return;\n    }\n\n    BitbucketBuildStatus status = BitbucketBuildStatus.getBuildStatus(build);\n    if (status == null) {\n        listener.getLogger().println(\"Couldn't obtain build status for this build.\");\n        return;\n    }\n\n    BitbucketBuildStatus.BuildState state = status.getState();\n    if (state == null) {\n        listener.getLogger().println(\"Couldn't obtain build state for this build.\");\n        return;\n    }\n\n    String buildKey = getBuildKey(source, build);\n\n    BitbucketClient client = source.buildBitbucketClient();\n\n    BitbucketBuildStatus.BuildStatusNotification notification = createStatus(state, buildKey, build.getDisplayName(),\n            build.getAbsoluteUrl(), build.getNumber());\n\n    client.createStatus(source.getTraits(), notification);\n}", "CodeBleu_score": 40.31931092606357}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t        BitbucketContext context = new BitbucketContext(source, build, listener);\n        if (context.notificationsDisabled()) {\n            listener.getLogger().println(\"Notifications are disabled.\");\n            return;\n        }\n\n        SCMRevision revision = context.getHead();\n        String hash = context.getHash();\n        String buildKey = context.getBuildKey();\n\n        if (revision instanceof TagAction) {\n            listener.getLogger().println(\"Not sending notifications for tag builds.\");\n            return;\n        }\n\n        if (revision instanceof BranchAction) {\n            listener.getLogger().println(\"Sending notifications for branch builds.\");\n        } else if (revision instanceof PullRequestAction) {\n            listener.getLogger().println(\"Sending notifications for pull request builds.\");\n        } else {\n            listener.getLogger().println(\"Not sending notifications for unknown revision type.\");\n            return;\n        }\n\n        BitbucketClient client = context.buildBitbucketClient();\n        BitbucketBuildStatus status = context.createStatus(hash, buildKey);\n\n        client.createBuildStatus(status);\n    }", "CodeBleu_score": 35.08657204167082}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t    BitbucketBuildTrigger trigger = BitbucketBuildTrigger.getTrigger(build.getParent());\n    if (trigger.notificationsDisabled) {\n        listener.getLogger().println(\"Build notifications are disabled.\");\n        return;\n    }\n\n    BitbucketBuildStatus status = BitbucketBuildStatus.valueOf(build.getResult());\n    String revision = getRevision(source, build, listener);\n    String hash = getHash(source, build, listener);\n    boolean shareBuildKey = source.getTraits().get(BitbucketSCMSourceTrait.class).isShareBuildKey();\n    String buildKey = getBuildKey(source, build, listener, shareBuildKey);\n    BitbucketClient client = buildBitbucketClient(source, build, listener);\n\n    listener.getLogger().println(\"Sending build notification for \" + status + \" build \" + buildKey);\n\n    createStatus(client, source, build, buildKey, hash, status, listener);\n}", "CodeBleu_score": 32.66428542316292}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String key;\n    if (shareBuildKeyBetweenBranchAndPR) {\n        key = build.getParent().getFullName() + \":\" + branch;\n    } else {\n        key = build.getFullDisplayName();\n    }\n    return key;\n}", "CodeBleu_score": 52.666975699979204}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String key = shareBuildKeyBetweenBranchAndPR ?\n            String.format(\"%s/%s\", build.getParent().getFullName(), branch) :\n            build.getFullDisplayName();\n    return key;\n}", "CodeBleu_score": 39.8137464175177}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String key;\n    if (shareBuildKeyBetweenBranchAndPR) {\n        key = build.getParent().getFullName() + \"-\" + branch;\n    } else {\n        key = build.getFullDisplayName();\n    }\n    return key;\n}", "CodeBleu_score": 52.666975699979204}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        serverUrl = new URL(BitbucketSCMNavigator.DEFAULT_SERVER_URL)\n        log.warning(\"BitbucketSCMNavigator.serverUrl is null. Defaulting to \" + BitbucketSCMNavigator.DEFAULT_SERVER_URL)\n    }\n    if (traits == null) {\n        traits = new BitbucketSCMNavigatorTraits(false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false", "CodeBleu_score": 17.735278399956677}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        serverUrl = BitbucketSCMNavigator.DEFAULT_SERVER_URL\n        log.warning(\"Server URL is null, using default value: \" + serverUrl)\n    }\n    if (traits == null) {\n        traits = new BitbucketSCMNavigatorTraits(false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false", "CodeBleu_score": 13.78058746271939}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        serverUrl = new URL(serverUrlString)\n    }\n    if (serverUrl == null) {\n        log.warning(\"Could not resolve server URL from string: ${serverUrlString}\")\n    }\n    if (traits == null) {\n        traits = new BitbucketSCMNavigatorTraits(true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false", "CodeBleu_score": 17.316161482545446}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\t    BitbucketRepository repository = getBitbucketRepository(name);\n    getLogger().info(format(\"%s %s\", repository.getFullName(), isMatch ? \"is proposed\" : \"is ignored\"));\n    if (isMatch) {\n        count++;\n    }\n}", "CodeBleu_score": 45.24355333967042}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t    BitbucketRepository repository = getBitbucketRepository(name);\n    if (repository == null) {\n        return;\n    }\n\n    String message = format(\"%s %s\", repository.getFullName(), isMatch ? \"is proposed\" : \"is ignored\");\n    getLogger().info(message);\n\n    if (isMatch) {\n        count++;\n    }\n}", "CodeBleu_score": 53.999801321808185}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t    BitbucketRepository repository = getBitbucketRepository(name);\n    getLogger().info(format(\"{} repository {}\", isMatch ? \"Proposed\" : \"Ignored\", getFullName(repository)));\n    if (isMatch) {\n        count++;\n    }\n}", "CodeBleu_score": 43.00330722585438}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t    // Get the branches to filter\n    List<String> branches = scm.getBranches();\n    // Get the clone link\n    String cloneLink = scm.getUserRemoteConfigs().get(0).getUrl();\n    // Get the commit hashes from the revision\n    List<String> commitHashes = rev.getCommitIds();\n    // Filter the branches to find those whose commits don't exist locally\n    List<String> missingCommitHashes = commitHashes.stream()\n        .filter(commitHash -> !commitExists(git, cloneLink, commitHash))\n        .collect(toList());\n    // Create RefSpecs for the missing commits\n    List<RefSpec> missingRefSpecs = missingCommitHashes.stream()\n        .map(commitHash -> new RefSpec(\"+refs/heads/\" + commitHash))\n        .collect(toList());\n    // If there are RefSpecs, fetch the missing commits from the remote repository\n    if (!missingRefSpecs.isEmpty()) {\n        try {\n            fetch_(git, cloneLink, missingRefSpecs, listener);\n        } catch (IOException e) {\n            throw new InterruptedException(\"Failed to fetch missing commits from remote repository\");\n        }\n    }\n    // Return the given revision\n    return rev;\n}", "CodeBleu_score": 47.87452990284915}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t    Revision result = rev;\n    List<RefSpec> refspecs = new ArrayList<>();\n    for (Branch branch : rev.getBranches()) {\n        if (branch.getHash() != null && !commitExists(git, branch.getHash())) {\n            refspecs.add(new RefSpec(\"+refs/heads/\" + branch.getName() + \":\" + branch.getName()));\n        }\n    }\n    if (!refspecs.isEmpty()) {\n        fetch_(git, scm.getUserRemoteConfigs(), scm.getRefspecs(), refspecs, listener, build, git.getRepository(), scm.getFetchTimeout());\n    }\n    return result;\n}", "CodeBleu_score": 29.509646245311355}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t    // Get the current branch name\n    String branchName = getBranch(rev);\n\n    // Check if the revision is a branch with a hash\n    if (branchName != null && !branchName.isEmpty()) {\n        // Get the hash of the revision\n        String hash = getHash(rev);\n\n        // Check if the commit exists locally\n        if (commitExists(git, hash)) {\n            // The commit exists locally, so return the given revision\n            return rev;\n        } else {\n            // The commit does not exist locally\n            // Create a stream of RefSpecs for the missing commits\n            Stream<RefSpec> refSpecs = stream(git, hash)\n                // Filter the commits that don't exist locally\n                .filter(commit -> !commitExists(git, commit))\n                // Create a RefSpec for each missing commit\n                .map(commit -> new RefSpec(\"+\" + commit + \":\" + commit));\n\n            // Fetch the missing commits from the remote repository\n            fetch_(git, scm, build, listener, refSpecs);\n\n            // Return the given revision\n            return rev;\n        }\n    } else {\n        // The revision is not a branch with a hash, so return the given revision\n        return rev;\n    }\n}", "CodeBleu_score": 37.4611464531978}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        List<BitbucketHref> hrefs = entry.getValue();\n        if (hrefs == null || hrefs.isEmpty()) {\n            continue;\n        }\n        result.put(entry.getKey(), hrefs.get(0));\n    }\n    return result;\n}", "CodeBleu_score": 62.00802563354365}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        if (entry.getValue() != null && !entry.getValue().isEmpty()) {\n            result.put(entry.getKey(), entry.getValue().get(0));\n        }\n    }\n    return result;\n}", "CodeBleu_score": 79.55164212380419}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue().get(0));\n    }\n    return result;\n}", "CodeBleu_score": 71.2904221899762}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t  if (!resourceStates.length) {\n    return;\n  }\n\n  const selectedResourceStates = resourceStates.filter(\n    (resourceState) => resourceState.selected\n  );\n  const resources = selectedResourceStates.map(\n    (resourceState) => resourceState.resource\n  );\n  const uris = resources.map((resource) => resource.uri);\n  const repositoryToResources = new Map<string, SourceControlResource[]>();\n\n  for (const uri of uris) {\n    const repository = await this.getRepository(uri);\n    if (!repositoryToResources.has(repository)) {\n      repositoryToResources.set(repository, []);\n    }\n    repositoryToResources.get(repository).push(uri);\n  }\n\n  for (const [repository, resources] of repositoryToResources.entries()) {\n    const filePaths = resources.map((resource) =>\n      this.getFilePath(resource)\n    );\n    try {\n      await this.addToRepository(repository, filePaths);\n    } catch (error) {\n      this.logger.error(`Failed to add files to repository: ${error}`);\n      this.showErrorMessage(`Failed to add files to repository: ${error}`);\n    }\n  }\n}", "CodeBleu_score": 41.47449005541508}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t  if (!resourceStates || resourceStates.length === 0) {\n    return;\n  }\n\n  const resourceMap = new Map<string, string[]>();\n  for (const resourceState of resourceStates) {\n    const uri = resourceState.resourceUri;\n    const repository = this.repositoryManager.getRepositoryForUri(uri);\n    if (!repository) {\n      continue;\n    }\n    const filePath = await this.repositoryManager.getRelativePath(uri, repository);\n    if (!filePath) {\n      continue;\n    }\n    const files = resourceMap.get(repository.rootUri.toString()) || [];\n    files.push(filePath);\n    resourceMap.set(repository.rootUri.toString(), files);\n  }\n\n  for (const [repositoryUri, files] of resourceMap.entries()) {\n    try {\n      await this.repositoryManager.add(repositoryUri, files);\n    } catch (error) {\n      console.error(error);\n      vscode.window.showErrorMessage(`Failed to add files to repository: ${error.message}`);\n    }\n  }\n}", "CodeBleu_score": 42.45267828703824}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t  if (!resourceStates.length) {\n    return;\n  }\n\n  const resources = resourceStates.map((s) => s.resource);\n  const uris = resources.map((r) => r.uri);\n  const repositoryMap = new Map<string, SourceControlResource[]>();\n\n  for (const uri of uris) {\n    const repository = await this.getRepository(uri);\n    const resources = repositoryMap.get(repository.rootUri.toString()) || [];\n    resources.push(uri);\n    repositoryMap.set(repository.rootUri.toString(), resources);\n  }\n\n  for (const [repositoryUri, resources] of repositoryMap) {\n    const repository = this.repositories.find((r) => r.rootUri.toString() === repositoryUri);\n    if (!repository) {\n      continue;\n    }\n\n    const filePaths = resources.map((r) => this.getFilePath(r));\n    try {\n      await this.addFilesToRepository(repository, filePaths);\n    } catch (error) {\n      console.error(error);\n      this.showErrorMessage(`Failed to add files to repository: ${error.message}`);\n    }\n  }\n}", "CodeBleu_score": 45.507688677353244}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\t  if (this.resourceStates.length === 0 || !(this.resourceStates[0] instanceof Uri)) {\n    await this.getSingleScmResource();\n  }\n  return this.resourceStates.filter((resourceState) => resourceState instanceof Resource);\n}", "CodeBleu_score": 17.492646383399535}, {"code": "protected async getResourceStates{\n\t    if (this.resourceStates.length === 0 || !(this.resourceStates[0].resourceUri instanceof Uri)) {\n        return this.resourceStates;\n    }\n\n    const scmResource = await this.getScmResource(this.resourceStates[0].resourceUri);\n    if (scmResource) {\n        this.resourceStates = [new ResourceState(scmResource)];\n    }\n\n    return this.resourceStates.filter((resourceState) => resourceState instanceof Resource);\n}", "CodeBleu_score": 36.33172404556543}, {"code": "protected async getResourceStates{\n\t    const resourceStates = await this.getResourceStates();\n    if (!resourceStates || resourceStates.length === 0 || !(resourceStates[0].uri instanceof Uri)) {\n        return resourceStates;\n    }\n\n    const scmResource = await this.getScmResource(resourceStates[0].uri);\n    if (scmResource) {\n        await this.updateResourceStates(resourceStates, scmResource);\n    }\n\n    return resourceStates.filter(resourceState => resourceState instanceof Resource);\n}", "CodeBleu_score": 44.86078092356103}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    if (!uri) {\n      const editor = window.activeTextEditor;\n      if (!editor) {\n        return undefined;\n      }\n      uri = editor.document.uri;\n    }\n    if (uri.scheme === 'svn') {\n      uri = Uri.file(uri.fsPath);\n    }\n    const scm = sourceControlManager.getRepository(uri);\n    if (!scm) {\n      return undefined;\n    }\n    return scm.getResource(uri);\n  }", "CodeBleu_score": 39.42979065984349}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    if (!uri) {\n      const editor = window.activeTextEditor;\n      if (!editor) {\n        return undefined;\n      }\n      uri = editor.document.uri;\n    }\n    if (uri.scheme === \"svn\") {\n      uri = Uri.file(uri.path);\n    }\n    const scm = sourceControlManager;\n    const repository = await scm.getRepository(uri);\n    if (!repository) {\n      return undefined;\n    }\n    return repository.getResourceFromFile(uri);\n  }", "CodeBleu_score": 46.29635446871764}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    if (!uri) {\n      const editor = window.activeTextEditor;\n      if (!editor) {\n        return undefined;\n      }\n      uri = editor.document.uri;\n    }\n    if (uri.scheme === 'svn') {\n      uri = Uri.file(uri.path);\n    }\n    const scm = this.sourceControlManager;\n    if (!scm) {\n      return undefined;\n    }\n    const repository = await scm.getRepository(uri);\n    if (!repository) {\n      return undefined;\n    }\n    return repository.getResourceFromFile(uri);\n  }", "CodeBleu_score": 47.07376489704846}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\t  const remoteRepository = await this.model.getRemoteRepository(element);\n  if (element.isModified()) {\n    this.openDiff(remoteRepository, element.oldRevision, element.newRevision, element.newPath);\n  } else {\n    this.openFileRemote(remoteRepository, element.newRevision, element.newPath);\n  }\n}", "CodeBleu_score": 35.3345587547755}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t    const remoteRepo = await this.model.getRemoteRepository(element);\n    const oldRevision = element.oldRevision;\n    const newRevision = element.newRevision;\n    const path = element.path;\n    const isModified = element.isModified;\n    const isAdded = element.isAdded;\n\n    if (isModified) {\n      const diff = await openDiff(\n        remoteRepo,\n        path,\n        oldRevision,\n        remoteRepo,\n        path,\n        newRevision\n      );\n      return diff;\n    } else if (isAdded) {\n      const diff = await openDiff(\n        remoteRepo,\n        path,\n        newRevision,\n        remoteRepo,\n        path,\n        newRevision\n      );\n      return diff;\n    }\n  }", "CodeBleu_score": 33.52349506443094}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t    const remoteRepository = await this.model.getRemoteRepository(element);\n    if (remoteRepository) {\n        if (element.type === 'M') {\n            const [oldRevision, newRevision] = element.revision.split(':');\n            const diff = await openDiff(remoteRepository, element.path, oldRevision, newRevision);\n            if (diff) {\n                await diff.show();\n            }\n        } else if (element.type === 'A') {\n            const [newRevision] = element.revision.split(':');\n            await openFileRemote(remoteRepository, element.path, newRevision);\n        }\n    }\n}", "CodeBleu_score": 35.50971443320883}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t    if (!clipboard.isSupported()) {\n        window.showErrorMessage('Clipboard is not supported');\n        return;\n    }\n\n    if (item instanceof CommitTreeItem) {\n        if (what === 'message') {\n            clipboard.writeText(item.commit.message);\n        } else if (what === 'revision') {\n            clipboard.writeText(item.commit.revision);\n        }\n    }\n}", "CodeBleu_score": 34.8888036389816}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t    if (!clipboard.isSupported()) {\n        window.showErrorMessage('Clipboard is not supported');\n        return;\n    }\n\n    if (item instanceof Commit) {\n        const commit = item.commit;\n        if (commit) {\n            if (what === 'message') {\n                clipboard.writeText(commit.message);\n            } else if (what === 'revision') {\n                clipboard.writeText(commit.revision);\n            }\n        }\n    }\n}", "CodeBleu_score": 39.78784269933328}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t    if (!clipboard.isSupported()) {\n        window.showErrorMessage('Clipboard is not supported');\n        return;\n    }\n\n    if (item instanceof CommitItem) {\n        const commit = item.commit;\n        if (what === 'message') {\n            clipboard.writeText(commit.message);\n        } else {\n            clipboard.writeText(commit.revision);\n        }\n    }\n}", "CodeBleu_score": 38.5496549164788}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    List<GiteaConnectionFactory> factories = new ArrayList<>();\n    for (GiteaConnectionFactory factory : ServiceLoader.load(GiteaConnectionFactory.class)) {\n        if (factory.canOpen(this)) {\n            factories.add(factory);\n        }\n    }\n    if (factories.isEmpty()) {\n        throw new IOException(\"No GiteaConnectionFactory implementation found\");\n    }\n    Collections.sort(factories, new Comparator<GiteaConnectionFactory>() {\n        @Override\n        public int compare(GiteaConnectionFactory o1, GiteaConnectionFactory o2) {\n            return o2.priority() - o1.priority();\n        }\n    });\n    for (GiteaConnectionFactory factory : factories) {\n        try {\n            return factory.open(this);\n        } catch (IOException e) {\n            // try the next factory\n        }\n    }\n    throw new IOException(\"Could not open Gitea connection\");\n}", "CodeBleu_score": 37.91443094820921}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    List<GiteaConnectionFactory> factories = ServiceLoader.load(GiteaConnectionFactory.class).stream().map(ServiceLoader.Provider::get).collect(Collectors.toList());\n    Collections.sort(factories, Comparator.comparingInt(GiteaConnectionFactory::priority));\n    for (GiteaConnectionFactory factory : factories) {\n        if (factory.canOpen()) {\n            return factory.open();\n        }\n    }\n    throw new IOException(\"No GiteaConnectionFactory implementation found\");\n}", "CodeBleu_score": 30.01650939103494}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    // Load available GiteaConnectionFactory implementations\n    ServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class);\n    Iterator<GiteaConnectionFactory> iterator = loader.iterator();\n    GiteaConnectionFactory factory = null;\n    int priority = Integer.MIN_VALUE;\n\n    // Iterate through the factories to find the most suitable one\n    while (iterator.hasNext()) {\n        GiteaConnectionFactory currentFactory = iterator.next();\n        int currentPriority = currentFactory.priority();\n        if (currentPriority > priority && currentFactory.canOpen(this)) {\n            factory = currentFactory;\n            priority = currentPriority;\n        }\n    }\n\n    // If a suitable factory is found, open the connection\n    if (factory != null) {\n        return factory.open(this);\n    }\n\n    // If no suitable factory is found, throw an IOException\n    throw new IOException(\"No GiteaConnectionFactory found for \" + this);\n}", "CodeBleu_score": 43.10159637358285}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\t    def jenkins = Jenkins.getInstanceOrNull()\n    if (jenkins) {\n        this.classLoader = jenkins.pluginManager.uberClassLoader\n    } else {\n        this.classLoader = this.getClass().getClassLoader()\n    }\n    return this\n}", "CodeBleu_score": 39.702464681379624}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t    def jenkins = Jenkins.getInstanceOrNull()\n    if (jenkins != null) {\n        def pluginManager = jenkins.getPluginManager()\n        if (pluginManager != null) {\n            this.classLoader = pluginManager.getClassLoader()\n        }\n    }\n    return this\n}", "CodeBleu_score": 36.91307535926689}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t    Jenkins jenkins = Jenkins.getInstanceOrNull();\n    if (jenkins != null) {\n        this.classLoader = jenkins.getPluginManager().getClassLoader();\n    } else {\n        this.classLoader = this.getClass().getClassLoader();\n    }\n    return this;\n}", "CodeBleu_score": 47.53462145874124}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = displayName != null ? displayName : serverUrl;\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    this.manageHooks = manageHooks;\n    this.credentialsId = manageHooks ? credentialsId : null;\n    this.aliasUrl = trimToNull(aliasUrl);\n}", "CodeBleu_score": 41.498535425460894}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = displayName != null ? displayName : serverUrl;\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    this.manageHooks = manageHooks;\n    this.credentialsId = manageHooks ? credentialsId : null;\n    this.aliasUrl = trimToNull(aliasUrl);\n}", "CodeBleu_score": 41.498535425460894}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = trimToNull(displayName);\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    this.manageHooks = manageHooks;\n    this.credentialsId = manageHooks ? trimToNull(credentialsId) : null;\n    this.aliasUrl = trimToNull(aliasUrl);\n\n    if (isBlank(this.displayName)) {\n        this.displayName = fromUrl(this.serverUrl);\n    }\n}", "CodeBleu_score": 42.780504001991225}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    if (!checkPermission(Permission.ADMINISTER)) {\n        return new ListBoxModel()\n    }\n    serverUrl = normalizeServerUrl(serverUrl)\n    def credentials = includeMatchingAs(serverUrl, Credentials.class, GiteaAuth.class)\n    return credentials.collect { c -> new ListBoxModel.Option(c.id, c.description) }\n}", "CodeBleu_score": 38.177493925974716}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    if (!checkPermission(Permission.ADMINISTER)) {\n        return new ListBoxModel()\n    }\n    serverUrl = normalizeServerUrl(serverUrl)\n    def credentials = includeMatchingAs(\n        Credentials.class,\n        serverUrl,\n        GiteaAuth.class,\n        'gitea',\n        'gitea-server',\n        'gitea-server-token',\n        'gitea-server-token-userpass'\n    )\n    return credentials\n}", "CodeBleu_score": 41.801535712043545}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    checkPermission()\n    normalizeServerUrl(serverUrl)\n    return includeMatchingAs(GiteaAuth.class, serverUrl)\n}", "CodeBleu_score": 11.610561086445928}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme().toLowerCase();\n        String host = uri.getHost().toLowerCase();\n        int port = uri.getPort();\n        if (port == -1) {\n            if (scheme.equals(\"http\")) {\n                port = 80;\n            } else if (scheme.equals(\"https\")) {\n                port = 443;\n            }\n        }\n        String path = uri.getPath();\n        if (path.endsWith(\"/\")) {\n            path = path.substring(0, path.length() - 1);\n        }\n        return new URI(scheme, uri.getUserInfo(), host, port, path, uri.getQuery(), uri.getFragment()).toString();\n    } catch (URISyntaxException e) {\n        return serverUrl;\n    }\n}", "CodeBleu_score": 42.505397306738686}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        String host = uri.getHost();\n        int port = uri.getPort();\n        if (port == -1) {\n            if (scheme.equalsIgnoreCase(\"http\")) {\n                port = 80;\n            } else if (scheme.equalsIgnoreCase(\"https\")) {\n                port = 443;\n            }\n        }\n        String path = uri.getPath();\n        if (path.endsWith(\"/\")) {\n            path = path.substring(0, path.length() - 1);\n        }\n        String query = uri.getQuery();\n        String fragment = uri.getFragment();\n        String userInfo = uri.getUserInfo();\n        StringBuilder sb = new StringBuilder();\n        sb.append(scheme).append(\"://\").append(host);\n        if (port != -1) {\n            sb.append(\":\").append(port);\n        }\n        sb.append(path);\n        if (query != null) {\n            sb.append(\"?\").append(query);\n        }\n        if (fragment != null) {\n            sb.append(\"#\").append(fragment);\n        }\n        if (userInfo != null) {\n            sb.insert(7, userInfo + \"@\");\n        }\n        return sb.toString();\n    } catch (URISyntaxException e) {\n        return serverUrl;\n    }\n}", "CodeBleu_score": 43.43804650416292}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return null;\n    }\n\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        String host = uri.getHost();\n        int port = uri.getPort();\n        if (port == -1) {\n            if (scheme.equals(\"http\")) {\n                port = 80;\n            } else if (scheme.equals(\"https\")) {\n                port = 443;\n            }\n        }\n        String path = uri.getPath();\n        if (path.endsWith(\"/\")) {\n            path = path.substring(0, path.length() - 1);\n        }\n        return new URI(scheme, uri.getUserInfo(), host, port, path, uri.getQuery(), uri.getFragment()).toString();\n    } catch (URISyntaxException e) {\n        return null;\n    }\n}", "CodeBleu_score": 41.12332196852348}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel model = new ListBoxModel()\n    for (GiteaServer server in getServers()) {\n        String displayName = server.getDisplayName()\n        if (isBlank(displayName)) {\n            displayName = getServerUrl(server)\n        }\n        model.add(displayName, server.getUrl())\n    }\n    return model\n}", "CodeBleu_score": 36.21378886177018}, {"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel model = new ListBoxModel()\n    getServers().each { GiteaServer server ->\n        String displayName = server.getDisplayName()\n        if (isBlank(displayName)) {\n            model.add(server.getUrl(), server.getUrl())\n        } else {\n            model.add(displayName, server.getUrl())\n        }\n    }\n    return model\n}", "CodeBleu_score": 34.94651257443675}, {"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel model = new ListBoxModel()\n    List<Server> servers = getServers()\n    for (Server server : servers) {\n        String serverUrl = server.getServerUrl()\n        String displayName = server.getDisplayName()\n        if (isBlank(displayName)) {\n            model.add(serverUrl, serverUrl)\n        } else {\n            model.add(displayName, serverUrl)\n        }\n    }\n    return model\n}", "CodeBleu_score": 34.19223966474692}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    checkPermission(Jenkins.ADMINISTER);\n    if (servers != null) {\n        servers = new ArrayList<>(servers);\n        servers.removeIf(s -> s == null || s.getServerUrl() == null || s.getServerUrl().isEmpty());\n        servers = new ArrayList<>(new LinkedHashSet<>(servers));\n    }\n    this.servers = servers;\n    save();\n}", "CodeBleu_score": 28.059327497027752}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    checkPermission(Jenkins.ADMINISTER);\n\n    if (servers == null) {\n        servers = new ArrayList<>();\n    }\n\n    List<GiteaServer> newServers = new ArrayList<>();\n    for (GiteaServer server : servers) {\n        if (!server.getServerUrl().isBlank()) {\n            newServers.add(server);\n        }\n    }\n\n    this.servers = newServers;\n    save();\n}", "CodeBleu_score": 32.83003702914113}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    checkPermission(Jenkins.ADMINISTER);\n    if (servers == null) {\n        servers = new ArrayList<>();\n    } else {\n        servers = new ArrayList<>(servers);\n    }\n    List<GiteaServer> serverList = new ArrayList<>();\n    for (GiteaServer server : servers) {\n        if (server == null) {\n            continue;\n        }\n        String url = getServerUrl(server.getServerUrl());\n        if (url == null || url.isEmpty()) {\n            continue;\n        }\n        if (serverList.contains(server)) {\n            continue;\n        }\n        serverList.add(new GiteaServer(url, server.getCredentialsId(), server.getApiVersion()));\n    }\n    this.servers = serverList;\n    save();\n}", "CodeBleu_score": 42.31612728138997}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return false;\n    }\n    serverUrl = normalizeServerUrl(serverUrl);\n    boolean removed = servers.removeIf(s -> serverUrl.equals(s.getServerUrl()));\n    if (removed) {\n        updateServerList();\n    }\n    return removed;\n}", "CodeBleu_score": 34.91699409297592}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return false;\n    }\n    String normalizedServerUrl = normalizeServerUrl(serverUrl);\n    boolean removed = servers.removeIf(s -> s.getServerUrl().equals(normalizedServerUrl));\n    if (removed) {\n        updateServerList();\n    }\n    return removed;\n}", "CodeBleu_score": 33.18488017398031}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return false;\n    }\n    serverUrl = normalizeServerUrl(serverUrl);\n    boolean removed = servers.removeIf(s -> serverUrl.equals(s.getServerUrl()));\n    if (removed) {\n        updateServerList();\n    }\n    return removed;\n}", "CodeBleu_score": 34.91699409297592}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    Set<? extends Element> annotatedElements = roundEnv.getElementsAnnotatedWith(annotation);\n    for (Element element : annotatedElements) {\n        Map<String, String> attributes = getAttributesFromAnnotation(element);\n        String type = asType(element.asType()).toString();\n        descriptorElements.add(new ConfigElement(attributes, type));\n    }\n}", "CodeBleu_score": 60.10585105323554}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    Set<? extends Element> elementsAnnotatedWith = roundEnv.getElementsAnnotatedWith(annotation);\n    for (Element element : elementsAnnotatedWith) {\n        Map<String, String> attributes = getAttributesFromAnnotation(element);\n        String type = asType(element.asType()).toString();\n        descriptorElements.add(new ConfigElement(attributes, type));\n    }\n}", "CodeBleu_score": 67.43206658865654}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    Set<? extends Element> annotatedElements = roundEnv.getElementsAnnotatedWith(annotation);\n    for (Element element : annotatedElements) {\n        Map<String, String> attributes = getAttributesFromAnnotation(element);\n        String type = asType(element.asType()).toString();\n        descriptorElements.add(new ConfigElement(attributes, type));\n    }\n}", "CodeBleu_score": 60.10585105323554}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    String annotationCanonicalName = annotationClass.getCanonicalName();\n    for (TypeElement annotation : annotations) {\n        if (annotation.getQualifiedName().contentEquals(annotationCanonicalName)) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 46.66928827836825}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    for (TypeElement ann : annotations) {\n        if (ann.getQualifiedName().toString().replace('$', '.')\n                .equals(annotationClass.getName())) {\n            return ann;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 45.819781235018894}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    String annotationClassName = annotationClass.getName().replace(\"$\", \".\");\n    for (TypeElement annotation : annotations) {\n        if (annotation.getQualifiedName().contentEquals(annotationClassName)) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 43.60215084463695}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n\n    filters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n        \"leave_type\": [\"in\", [\"Leave\", \"Compensatory Leave\"]],\n        \"company\": frappe.db.get_value(\"Employee\", employee, \"company\"),\n    }\n\n    if for_approval:\n        filters[\"status\"] = [\"in\", [\"Open\", \"Hold\", \"Scheduled\"]]\n        filters[\"name\"] = [\"not in\", get_approved_applications(employee)]\n        if approver_id:\n            filters[\"leave_approver\"] = approver_id\n    else:\n        filters[\"status\"] = [\"not in\", [\"Cancelled\", \"Rejected\"]]\n\n    return filters\n\n", "CodeBleu_score": 30.54554258756968}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n\n    filters = {\"employee\": employee}\n\n    if for_approval:\n        filters[\"status\"] = \"Open\"\n        filters[\"docstatus\"] = 1\n        filters[\"name\"] = [\"not in\", frappe.get_all(\"Leave Application\", {\"employee\": employee, \"status\": \"Cancelled\"}, pluck=\"name\")]\n        if approver_id:\n            filters[\"workflow_state\"] = get_allowed_states_for_workflow(approver_id, \"Leave Approval\")\n    else:\n        filters[\"status\"] = [\"not in\", [\"Cancelled\"]]\n\n    return filters\n\n", "CodeBleu_score": 37.04593780475728}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n\n    filters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n        \"leave_type\": [\"in\", frappe.get_list(\"Leave Type\", pluck=\"name\")],\n    }\n\n    if for_approval:\n        filters[\"status\"] = \"Open\"\n        filters[\"approver\"] = [\"in\", [employee, approver_id]]\n        filters[\"name\"] = [\"not in\", frappe.get_list(\"Leave Application\", filters={\"employee\": employee, \"status\": \"Cancelled\"}, pluck=\"name\")]\n    else:\n        filters[\"status\"] = [\"not in\", [\"Cancelled\"]]\n\n    workflow_states = get_allowed_states_for_workflow(doctype=\"Leave Application\", workflow_name=\"Leave Approval\")\n    if workflow_states:\n        filters[\"workflow_state\"] = [\"in\", workflow_states]\n    else:\n        filters[\"workflow_state\"] = \"Open\"\n\n    return filters\n\n", "CodeBleu_score": 33.94352567904213}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    today = getdate()\n    leave_details = get_leave_details(employee, today)\n    allocation_map = {}\n    for d in leave_details:\n        leave_type = d.leave_type\n        if leave_type not in allocation_map:\n            allocation_map[leave_type] = {\n                \"allocated\": d.allocation,\n                \"balance\": d.balance,\n            }\n    return allocation_map\n\n", "CodeBleu_score": 40.06184020245285}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    today = getdate()\n    leave_details = get_leave_details(employee, today)\n    leave_balance_map = {}\n    for leave in allocation.items:\n        leave_balance_map[leave.name] = {\n            \"allocated\": leave_details.get(leave.name, 0.0),\n            \"balance\": leave_details.get(leave.name, 0.0),\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 38.527423932403366}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    today = getdate()\n    leave_details = get_leave_details(employee, today)\n    leave_balance_map = {}\n\n    for leave_type in allocation.items():\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_details.get(leave_type, 0),\n            \"balance\": leave_details.get(leave_type, 0),\n        }\n\n    return leave_balance_map", "CodeBleu_score": 43.76917064934125}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n\n    holiday_list = frappe.get_value(\"Employee\", employee, \"holiday_list\")\n    if not holiday_list:\n        return []\n\n    holiday_list = frappe.get_doc(\"Holiday List\", holiday_list)\n\n    if not holiday_list.holidays:\n        return []\n\n    holidays = frappe.get_all(\n        \"Holiday\",\n        filters={\n            \"parent\": holiday_list.name,\n            \"parentfield\": \"holidays\",\n            \"parenttype\": \"Holiday List\",\n        },\n        fields=[\"holiday_date\", \"description\"],\n    )\n\n    # Remove weekly offs\n    holidays = [holiday for holiday in holidays if holiday.description != \"Weekly Off\"]\n\n    # Order by date\n    holidays = sorted(holidays, key=lambda holiday: holiday.holiday_date)\n\n    # Strip HTML from descriptions\n    for holiday in holidays:\n        holiday.description = strip_html(holiday.description)\n\n    return holidays\n\n", "CodeBleu_score": 38.95218100341087}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.get_value(\"Employee\", employee, \"holiday_list\")\n    if not holiday_list:\n        return []\n\n    holiday_list = frappe.get_doc(\"Holiday List\", holiday_list)\n    if not holiday_list:\n        return []\n\n    holidays = frappe.get_all(\n        \"Holiday\",\n        fields=[\"holiday_date\", \"description\"],\n        filters={\"parent\": holiday_list.name, \"parenttype\": \"Holiday List\"},\n        order_by=\"holiday_date\",\n    )\n\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html(holiday[\"description\"])\n\n    return holidays\n\n", "CodeBleu_score": 38.78389902424064}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n\n    holiday_list = frappe.get_value(\"Employee\", employee, \"holiday_list\")\n    if not holiday_list:\n        return []\n\n    holidays = frappe.get_all(\n        \"Holiday\",\n        filters={\n            \"parent\": holiday_list,\n            \"parenttype\": \"Holiday List\",\n            \"holiday_date\": [\">=\", nowdate()],\n            \"weekly_off\": 0,\n        },\n        fields=[\"holiday_date\", \"description\"],\n        order_by=\"holiday_date\",\n    )\n\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html(holiday.description)\n\n    return holidays\n\n", "CodeBleu_score": 38.278476177165}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t\n    if not frappe.db.get_single_value(\"HR Settings\", \"send_holiday_reminders\"):\n        return\n\n    frequency = frappe.db.get_single_value(\"HR Settings\", \"frequency\")\n    if frequency != \"Weekly\":\n        return\n\n    send_advance_holiday_reminders()\n\n", "CodeBleu_score": 49.78471642035518}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    settings = get_settings()\n    if settings.send_reminders and settings.reminder_frequency == \"Weekly\":\n        send_advance_holiday_reminders()\n\n", "CodeBleu_score": 13.721550331479873}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    # Check if the HR settings specify to send reminders\n    if not get_single_value(\"HR Settings\", \"send_reminders\"):\n        return\n\n    # Get the frequency and advance days from the HR settings\n    frequency = get_single_value(\"HR Settings\", \"frequency\")\n    advance_days = get_single_value(\"HR Settings\", \"advance_days\")\n\n    # Check if the frequency is set to \"Weekly\" and if the current day is Monday\n    if frequency == \"Weekly\" and datetime.datetime.today().weekday() == 0:\n        # Call the function to send the reminders in advance\n        send_advance_holiday_reminders(advance_days)\n", "CodeBleu_score": 37.31158939839625}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t\n    self_ratings = self.get_self_ratings()\n    total_score = 0\n    for rating in self_ratings:\n        score = rating.rating * 5 * rating.percentage / 100\n        total_score += score\n    self.self_appraisal_score = flt(total_score, self.precision(\"self_appraisal_score\"))\n\n", "CodeBleu_score": 33.549571380756596}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    total_score = 0\n    for rating in self.self_ratings:\n        score = rating.rating * 5 * rating.percentage / 100\n        total_score += score\n    self.self_appraisal_score = round(total_score, self.precision)\n\n", "CodeBleu_score": 27.91689389988376}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self_appraisal_score = 0\n    for self_rating in self.self_ratings:\n        self_appraisal_score += self_rating.rating * 5 * self_rating.percentage_weightage / 100\n    self.self_appraisal_score = self_appraisal_score\n    self.save()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 19.85522693178193}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t\n\n    appraisal_cycle_doc = frappe.get_cached_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle_doc.calculate_final_score_using_formula:\n        data = self.as_dict()\n        data.update(appraisal_cycle_doc.as_dict())\n        sanitized_formula = sanitize_expression(appraisal_cycle_doc.final_score_formula)\n        final_score = flt(frappe.safe_eval(sanitized_formula, None, data), self.precision(\"final_score\"))\n    else:\n        final_score = flt(\n            (\n                self.total_score\n                + self.average_feedback_score\n                + self.self_appraisal_score\n            )\n            / 3,\n            self.precision(\"final_score\"),\n        )\n    self.final_score = final_score\n\n", "CodeBleu_score": 37.17009277295819}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle_doc = frappe.get_cached_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle_doc.calculate_final_score_based_on_formula:\n        data = self.as_dict()\n        data.update(appraisal_cycle_doc.as_dict())\n        data.update(frappe.get_cached_doc(\"Employee\", self.employee).as_dict())\n        data.update(frappe.get_cached_doc(\"Department\", self.department).as_dict())\n        data.update(frappe.get_cached_doc(\"Branch\", self.branch).as_dict())\n        data.update(frappe.get_cached_doc(\"Designation\", self.designation).as_dict())\n        data.update(frappe.get_cached_doc(\"Company\", self.company).as_dict())\n        data.update(frappe.get_cached_doc(\"Appraisal Template\", self.appraisal_template).as_dict())\n        formula = appraisal_cycle_doc.final_score_formula\n        formula = sanitize_expression(formula)\n        final_score = flt(frappe.safe_eval(formula, None, data), self.precision(\"final_score\"))\n        self.final_score = final_score\n    else:\n        self.final_score = flt((self.total_score + self.average_feedback_score + self.self_appraisal_score) / 3, self.precision(\"final_score\"))\n\n", "CodeBleu_score": 40.53508849599788}, {"code": "def calculate_final_score(self)\n\t\n\n    appraisal_cycle_doc = frappe.get_cached_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n\n    if appraisal_cycle_doc.calculate_final_score_based_on_formula:\n        data = {}\n        for d in self.get(\"appraisal_goals\"):\n            data[d.goal] = d.total_score\n\n        for d in self.get(\"appraisal_feedback\"):\n            data[d.feedback_parameter] = d.average_feedback_score\n\n        data[\"self_appraisal_score\"] = self.self_appraisal_score\n\n        formula = appraisal_cycle_doc.final_score_formula\n        sanitized_formula = sanitize_expression(formula)\n        final_score = flt(frappe.safe_eval(sanitized_formula, None, data))\n\n        self.final_score = final_score\n    else:\n        total_score = sum(d.total_score for d in self.get(\"appraisal_goals\"))\n        average_feedback_score = sum(d.average_feedback_score for d in self.get(\"appraisal_feedback\"))\n        self_appraisal_score = self.self_appraisal_score\n\n        final_score = (total_score + average_feedback_score + self_appraisal_score) / 3\n\n        self.final_score = flt(final_score, self.precision(\"final_score\"))\n\n", "CodeBleu_score": 39.586671553008614}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > getdate():\n        if self.status != \"On Leave\":\n            frappe.throw(\"Attendance date cannot be of future\")\n        else:\n            leave_application = frappe.db.exists(\n                \"Leave Application\",\n                {\n                    \"employee\": self.employee,\n                    \"from_date\": [\"<=\", self.attendance_date],\n                    \"to_date\": [\">=\", self.attendance_date],\n                    \"docstatus\": 1,\n                },\n            )\n            if not leave_application:\n                frappe.throw(\n                    \"Attendance date cannot be of future for On Leave application\"\n                )\n\n    if self.attendance_date < get_value(\"Employee\", self.employee, \"date_of_joining\"):\n        frappe.throw(\n            \"Attendance date cannot be earlier than employee's joining date\"\n        )\n\n", "CodeBleu_score": 35.772876119446394}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > nowdate():\n        if self.status != \"On Leave\":\n            frappe.throw(\"Attendance date cannot be of future dates\")\n        else:\n            leave_application = frappe.db.sql(\"\"\"select name from `tabLeave Application` where employee = %s and %s between from_date and to_date and docstatus = 1\"\"\", (self.employee, self.attendance_date))\n            if leave_application:\n                frappe.throw(\"Attendance date is a Leave. Please change the status accordingly\")\n    else:\n        date_of_joining = frappe.db.get_value(\"Employee\", self.employee, \"date_of_joining\")\n        if self.attendance_date < date_of_joining:\n            frappe.throw(\"Attendance date cannot be earlier than employee's joining date\")", "CodeBleu_score": 40.639310662986794}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > getdate():\n        if self.status != \"On Leave\" and not self.leave_application:\n            frappe.throw(_(\"Attendance date can not be of future\"))\n    if self.attendance_date < self.employee.date_of_joining:\n        frappe.throw(_(\"Attendance date can not be before employee's joining date\"))\n\n", "CodeBleu_score": 24.449412743291727}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\t\n    duplicate_record = self.get_duplicate_attendance_record()\n    if duplicate_record:\n        frappe.throw(\n            _(\n                \"Attendance record for employee {0} already exists on {1}. Please delete the existing record to continue.\"\n            ).format(\n                frappe.bold(self.employee),\n                frappe.bold(format_date(self.attendance_date)),\n                get_link_to_form(\n                    \"Attendance\", duplicate_record.attendance_record\n                ),\n            )\n        )\n\n", "CodeBleu_score": 34.469079321938835}, {"code": "def validate_duplicate_record(self)\n\t\n\n    duplicate_attendance_record = self.get_duplicate_attendance_record()\n\n    if duplicate_attendance_record:\n        # Get the link to the existing attendance record\n        attendance_record_link = get_link_to_form('Attendance', duplicate_attendance_record.name)\n\n        # Format the date using the user's preferred format\n        formatted_date = format_date(self.attendance_date, \"dd-MM-yyyy\")\n\n        # Raise an exception with a message indicating the employee, the date, and a link to the existing attendance record\n        frappe.throw(\n            _(\"Attendance record already exists for {0} on {1}. {2}\").format(\n                self.employee,\n                formatted_date,\n                attendance_record_link\n            )\n        )", "CodeBleu_score": 32.26814324318184}, {"code": "def validate_duplicate_record(self)\n\t\n    duplicate_attendance_record = frappe.db.exists(\n        \"Attendance\",\n        {\n            \"employee\": self.employee,\n            \"attendance_date\": self.attendance_date,\n            \"docstatus\": (\"<\", 2),\n            \"name\": (\"not in\", [self.name]),\n        },\n    )\n\n    if duplicate_attendance_record:\n        attendance_record_link = get_link_to_form(\n            \"Attendance\", duplicate_attendance_record\n        )\n        frappe.throw(\n            _(\n                \"Attendance record for employee {0} already exists for date {1}. Please delete the existing record or update the current record. {2}\"\n            ).format(\n                frappe.bold(self.employee_name),\n                frappe.bold(format_date(self.attendance_date)),\n                attendance_record_link,\n            ),\n            title=_(\"Duplicate Attendance Record\"),\n        )", "CodeBleu_score": 39.51881456171178}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t\n    # Get message details\n    message_details = self.get_message_details()\n    # Get email addresses of users in the specified group\n    user_emails = get_user_emails_from_group(self.group_name)\n    # Send email with summary using a template\n    frappe.sendmail(\n        recipients=user_emails,\n        subject=\"Daily Summary\",\n        message=frappe.render_template(\"templates/daily_summary.html\", {\"message_details\": message_details}),\n        reference_doctype=self.doctype,\n        reference_name=self.name,\n    )\n    # Update status to \"Sent\"\n    self.db_set(\"status\", \"Sent\")\n\n", "CodeBleu_score": 39.82222849704106}, {"code": "def send_summary(self)\n\t\n\n    # Get message details\n    message_details = self.get_message_details()\n\n    # Get email addresses of users in the specified group\n    group_name = \"Support\"\n    user_emails = get_user_emails_from_group(group_name)\n\n    # Send email with the summary using a template\n    frappe.sendmail(\n        recipients=user_emails,\n        subject=\"Daily Summary\",\n        template=\"daily_summary\",\n        args=message_details,\n    )\n\n    # Update status to \"Sent\"\n    self.db_set(\"status\", \"Sent\")\n\n", "CodeBleu_score": 27.85928720543227}, {"code": "def send_summary(self)\n\t\n    try:\n        message_details = self.get_message_details()\n        user_emails = get_user_emails_from_group(self.group)\n        if message_details:\n            frappe.sendmail(\n                recipients=user_emails,\n                subject=\"Daily Summary\",\n                message=frappe.render_template(\n                    \"templates/daily_summary_template.html\",\n                    {\"message_details\": message_details},\n                ),\n            )\n            self.db_set(\"status\", \"Sent\")\n    except Exception as e:\n        frappe.log_error(frappe.get_traceback(), \"Daily Summary Error\")\n\n", "CodeBleu_score": 45.25772370449972}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t\n    interview = frappe.db.exists(\n        \"Interview\",\n        {\n            \"job_applicant\": self.job_applicant,\n            \"interview_round\": self.interview_round,\n            \"name\": [\"not in\", [self.name]],\n        },\n    )\n    if interview:\n        job_applicant = frappe.get_doc(\"Job Applicant\", self.job_applicant)\n        frappe.throw(\n            _(\n                \"Job Applicant {0} - {1} is not allowed to appear twice in the same round\"\n            ).format(\n                frappe.bold(self.job_applicant),\n                get_link_to_form(\n                    \"Job Applicant\", self.job_applicant, job_applicant.name\n                ),\n            ),\n            title=_(\n                \"Duplicate Interview Record\"\n            ),\n        )\n\n", "CodeBleu_score": 40.26203151112262}, {"code": "def validate_duplicate_interview(self)\n\t\n    # Check if the interview round is set\n    if not self.interview_round:\n        frappe.throw(\"Interview Round is mandatory\")\n\n    # Check if there are any existing interview records for the same job applicant and interview round\n    existing_interviews = frappe.get_all(\"Interview\", filters={\n        \"job_applicant\": self.job_applicant,\n        \"interview_round\": self.interview_round,\n        \"name\": [\"not in\", [self.name]],\n        \"docstatus\": [\"<\", 2]\n    })\n\n    # If there are existing interview records, raise an exception\n    if existing_interviews:\n        # Get the link to the existing interview record\n        existing_interview_link = get_link_to_form(\"Interview\", existing_interviews[0].name)\n\n        # Get the link to the job applicant's information\n        job_applicant_link = get_link_to_form(\"Job Applicant\", self.job_applicant)\n\n        # Raise an exception with a message indicating that job applicants are not allowed to appear twice for the same interview round\n        frappe.throw(f\"Job applicants are not allowed to appear twice for the same interview round. Please check the existing interview record: {existing_interview_link}. For more information, please visit {job_applicant_link}.\")\n\n", "CodeBleu_score": 48.16774055093765}, {"code": "def validate_duplicate_interview(self)\n\t\n\n    # Check if the job applicant already has an interview record for the same interview round\n    existing_interview = frappe.db.exists(\n        \"Interview\",\n        {\n            \"job_applicant\": self.job_applicant,\n            \"interview_round\": self.interview_round,\n            \"docstatus\": (\"<\", 2),\n        },\n    )\n\n    if existing_interview:\n        # If a duplicate is found, raise an exception with a message indicating that job applicants are not allowed to appear twice for the same interview round\n        frappe.throw(\n            _(\n                \"Job Applicant {0} {1} is not allowed to appear twice for Interview {2}\").format(\n                frappe.bold(self.applicant_name),\n                get_link_to_form(self.job_applicant,\n                                 self.applicant_name),\n                frappe.bold(self.interview_round),\n            ),\n            title=_(\"Not Allowed\"),\n        )\n\n", "CodeBleu_score": 39.2083659203247}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\t\n    total_rating = 0\n    num_assessments = 0\n    for assessment in self.skill_assessments:\n        if assessment.rating:\n            total_rating += assessment.rating\n            num_assessments += 1\n    if num_assessments > 0:\n        self.average_rating = total_rating / num_assessments\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 25.94149257350562}, {"code": "def calculate_average_rating(self)\n\t\n    total_rating = 0\n    num_assessments = 0\n    for assessment in self.skill_assessments:\n        if assessment.rating is not None:\n            total_rating += assessment.rating\n            num_assessments += 1\n    if num_assessments > 0:\n        self.average_rating = total_rating / num_assessments\n    else:\n        self.average_rating = 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 26.893824900911152}, {"code": "def calculate_average_rating(self)\n\t\n    total_rating = 0\n    num_assessments = 0\n    for assessment in self.skill_assessment.all():\n        if assessment.rating is not None:\n            total_rating += assessment.rating\n            num_assessments += 1\n    if num_assessments > 0:\n        self.average_rating = total_rating / num_assessments\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 25.35226186484146}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.get(\"interview_round\")\n    interview.designation = doc.get(\"designation\")\n    interview.interviewer = doc.get(\"interviewer\")\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 48.2780868605432}, {"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    if doc.interviewers:\n        interview.append(\"interview_details\", {\n            \"interviewer\": doc.interviewers\n        })\n    return interview", "CodeBleu_score": 43.09517135226319}, {"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    if doc.interviewers:\n        for i in doc.interviewers:\n            interview.append(\"interview_details\", {\n                \"interviewer\": i.interviewer\n            })\n    return interview\n\n", "CodeBleu_score": 47.356347597721786}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\t\n    return frappe.get_all(\n        \"Job Offer\",\n        filters={\n            \"designation\": self.designation,\n            \"company\": self.company,\n            \"docstatus\": 1,\n            \"creation\": [\"between\", (from_date, to_date)],\n        },\n        pluck=\"name\",\n    )\n\n", "CodeBleu_score": 66.28035706485703}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n\n    job_offers = frappe.get_all(\n        \"Job Offer\",\n        filters={\n            \"designation\": self.designation,\n            \"company\": self.company,\n            \"docstatus\": 1,\n            \"creation\": [\"between\", (from_date, to_date)],\n        },\n        fields=[\"name\"],\n    )\n\n    return [offer.name for offer in job_offers]\n\n", "CodeBleu_score": 66.47119642818772}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offer = frappe.db.sql(\n        \"\"\"\n        SELECT name FROM `tabJob Offer`\n        WHERE company = %s\n        AND designation = %s\n        AND docstatus = 1\n        AND creation BETWEEN %s AND %s\n        \"\"\",\n        (self.company, self.designation, from_date, to_date),\n    )\n    return [offer[0] for offer in job_offer]\n\n", "CodeBleu_score": 32.98816141805979}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n\n    # Initialize variables to store the total job offers and accepted job offers\n    total_job_offers = 0\n    accepted_job_offers = 0\n\n    # Build the query to filter job offers by company or department, if specified\n    query = {\"docstatus\": 1}\n    if company:\n        query[\"company\"] = company\n    if department:\n        query[\"department\"] = department\n\n    # Get all job offers matching the query\n    job_offers = frappe.get_all(\"Job Offer\", filters=query)\n\n    # Loop through each job offer and count the total job offers and accepted job offers\n    for job_offer in job_offers:\n        total_job_offers += 1\n        if job_offer.offer_accepted == 1:\n            accepted_job_offers += 1\n\n    # Calculate the acceptance rate as a percentage\n    acceptance_rate = (accepted_job_offers / total_job_offers) * 100\n\n    # Return the acceptance rate as a percentage, along with the field type \"Percent\"\n    return acceptance_rate, \"Percent\"\n\n", "CodeBleu_score": 39.442499565988065}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n\n    filters = {\"docstatus\": 1}\n    if company:\n        filters[\"company\"] = company\n    if department:\n        filters[\"department\"] = department\n\n    total_offers = frappe.db.count(\"Job Offer\", filters=filters)\n    accepted_offers = frappe.db.count(\n        \"Job Offer\", filters={**filters, \"offer_status\": \"Accepted\"}\n    )\n\n    acceptance_rate = (accepted_offers / total_offers) * 100 if total_offers > 0 else 0\n\n    return acceptance_rate, \"Percent\"\n\n", "CodeBleu_score": 58.35713540219567}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    total_job_offers = frappe.db.count(\n        \"Job Offer\",\n        filters={\"docstatus\": 1, \"company\": company, \"department\": department},\n    )\n    accepted_job_offers = frappe.db.count(\n        \"Job Offer\",\n        filters={\n            \"docstatus\": 1,\n            \"company\": company,\n            \"department\": department,\n            \"offer_status\": \"Accepted\",\n        },\n    )\n    acceptance_rate = (accepted_job_offers / total_job_offers) * 100\n    return acceptance_rate, \"Percent\"\n\n", "CodeBleu_score": 31.492984020358094}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t    final Result result = this.employerService.register(employerForRegisterDto);\n\n    if (!result.isSuccess()) {\n        return ResponseEntity.badRequest().body(result);\n    }\n\n    return ResponseEntity.ok(result);\n}", "CodeBleu_score": 62.67393358575033}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\n\tfinal Result result = this.employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess()) {\n\t\treturn ResponseEntity.badRequest().body(result);\n\t}\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 63.14526034344736}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t    final Result result = this.employerService.register(employerForRegisterDto);\n    if (!result.isSuccess()) {\n        return ResponseEntity.badRequest().body(result);\n    }\n    return ResponseEntity.ok(result);\n}", "CodeBleu_score": 62.67393358575033}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t    final Optional<CompanyStaff> companyStaffOptional = this.companyStaffRepository.findById(companyStaffForUpdateDto.getId());\n    if (companyStaffOptional.isEmpty()) {\n        return new ErrorResult(BusinessMessages.COMPANY_STAFF_NOT_FOUND);\n    }\n\n    final CompanyStaff companyStaff = companyStaffOptional.get();\n\n    if (!companyStaff.getPassword().equals(companyStaffForUpdateDto.getPassword())) {\n        return new ErrorResult(BusinessMessages.PASSWORD_NOT_MATCH);\n    }\n\n    companyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n    companyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n    this.companyStaffRepository.save(companyStaff);\n    return new SuccessResult(BusinessMessages.COMPANY_STAFF_UPDATED);\n}", "CodeBleu_score": 43.36106010155826}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t        final CompanyStaff companyStaff = companyStaffRepository.findById(companyStaffForUpdateDto.getId()).orElse(null);\n        if (companyStaff == null) {\n            return new ErrorResult(Messages.companyStaffNotFound);\n        }\n        if (!companyStaff.getPassword().equals(companyStaffForUpdateDto.getPassword())) {\n            return new ErrorResult(Messages.passwordDoesNotMatch);\n        }\n        companyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n        companyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n        companyStaffRepository.save(companyStaff);\n        return new SuccessResult(Messages.companyStaffUpdated);\n    }", "CodeBleu_score": 41.61966872100632}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t        final CompanyStaff companyStaff = findById(companyStaffForUpdateDto.getId());\n        if (companyStaff == null) {\n            return Result.failure(ErrorCode.NOT_FOUND);\n        }\n\n        if (!companyStaffForUpdateDto.getPassword().equals(companyStaff.getPassword())) {\n            return Result.failure(ErrorCode.BUSINESS_RULES_VIOLATION);\n        }\n\n        companyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n        companyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n        save(companyStaff);\n\n        return Result.success(companyStaff);\n    }", "CodeBleu_score": 36.88523598966561}]}
