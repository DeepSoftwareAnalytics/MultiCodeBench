{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = args.get('attachment_ids')\n    if not attachment_ids:\n        return request.make_response({'error': 'attachment_ids not specified'}, 400)\n    attachment_ids = json.loads(attachment_ids)\n    attachments = self.env['ir.attachment'].browse(attachment_ids)\n    if not attachments.check_access_rights('read'):\n        return request.make_response({'error': 'Access Denied'}, 403)\n    if not attachments.check_access_rule('read'):\n        return request.make_response({'error': 'Access Denied'}, 403)\n    return self._build_zip_from_attachments(attachments)\n\n", "CodeBleu_score": 32.72772727852914}, {"code": "def export_zip_documents(self, **args)\n\t\n    if not self.env.user.has_group('base.group_user'):\n        raise werkzeug.exceptions.Forbidden()\n    attachment_ids = args.get('attachment_ids', [])\n    if not attachment_ids:\n        attachment_ids = self.env.context.get('active_ids', [])\n    if not attachment_ids:\n        attachment_ids = self.env.context.get('active_id', [])\n    if not attachment_ids:\n        attachment_ids = self.env.context.get('active_model', [])\n    if not attachment_ids:\n        attachment_ids = self.env.context.get('active_id', [])\n    if not attachment_ids:\n        attachment_ids = self.env.context.get('active_model', [])\n    if not attachment_ids:\n        attachment_ids = self.env.context.get('active_id', [])\n    if not attachment_ids:\n        attachment_ids = self.env.context.get('active_model', [])\n    if not attachment_ids:\n        attachment_ids = self.env.context.get('active_id', [])\n    if not attachment_ids:\n        attachment_ids = self.env.context.get('active_model', [])\n    if not attachment_ids:\n        attachment_ids = self.env.context.get('active_id', [])\n    if not attachment_ids:\n        attachment_ids = self.env.context.get('active_model', [])\n    if not attachment_ids:\n        attachment_ids = self.env.context.get('active_id', [])\n    if not attachment_ids:\n        attachment_ids = self.env.context.get('active_model', [])\n    if not attachment_ids:\n        attachment_ids = self.env.context.get('active_id', [])\n    if not attachment_ids:\n        attachment_ids = self.env.context.get('active_model', [])\n    if not attachment_ids:\n        attachment_ids = self.env.context.get('active_id', [])\n    if not attachment_ids:\n        attachment_ids =", "CodeBleu_score": 22.401653201089754}, {"code": "def export_zip_documents(self, **args)\n\t\n    # context is a dictionary containing the current request's context\n    context = args.get('context')\n    # args is a dictionary containing the HTTP request's variables\n    args = args.get('args')\n    # data is a dictionary containing the HTTP request's data\n    data = args.get('data')\n    # res_model is the current request's model\n    res_model = args.get('res_model')\n    # doc_id is the current request's document ID\n    doc_id = args.get('doc_id')\n    # doc_ids is a list of document IDs (used when action is 'action_multi')\n    doc_ids = args.get('doc_ids')\n    # search_domain is the current request's search domain\n    search_domain = args.get('search_domain')\n    # offset is the number of records to skip (used when action is 'action_page')\n    offset = args.get('offset')\n    # limit is the maximum number of records to return (used when action is 'action_page')\n    limit = args.get('limit')\n    # sort is the list of fields to sort on (used when action is 'action_page')\n    sort = args.get('sort')\n    # order is the sorting order (used when action is 'action_page')\n    order = args.get('order')\n    # action is the name of the current action\n    action = args.get('action')\n    # uid is the current user's ID\n    uid = args.get('uid')\n    # ids is a list of current request's record IDs (used when action is 'action_multi')\n    ids = args.get('ids')\n    # id is the current request's record ID (used when action is 'action_multi')\n    id = args.get('id')\n    # model is the name of the current request's model\n    model = args.get('model')\n    # field_name is the name of the field to which the attachment is attached (used when action is 'action_multi')\n    field_name = args.get('field_name')\n    # get the attachment IDs from the HTTP request arguments\n    attachment_ids = args.get('", "CodeBleu_score": 24.52218514726147}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(HomePortal, self)._prepare_home_portal_values(counters)\n    if self.user_has_groups('account.group_account_manager'):\n        values['invoice_count'] = self._get_invoices_count(counters)\n        values['bill_count'] = self._get_bills_count(counters)\n    return values\n\n", "CodeBleu_score": 16.716308208548767}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    res = super(HomePortal, self)._prepare_home_portal_values(counters)\n    if self.env.user.has_group('account.group_account_invoice'):\n        res['invoice_count'] = self._get_invoices_domain().search_count(self.env.cr, self.env.uid, [('state', 'in', ['open', 'paid'])])\n    if self.env.user.has_group('account.group_account_bill'):\n        res['bill_count'] = self._get_invoices_domain().search_count(self.env.cr, self.env.uid, [('type', '=', 'out_invoice'), ('state', 'in', ['open', 'paid'])])\n    return res\n\n", "CodeBleu_score": 33.33469638076949}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    res = super(AccountDashboard, self)._prepare_home_portal_values(counters)\n    if not self.env.user.has_group('account.group_account_invoice'):\n        return res\n    invoices_count = self._get_invoices_count(counters)\n    bills_count = self._get_bills_count(counters)\n    res['invoices_count'] = invoices_count\n    res['bills_count'] = bills_count\n    return res\n\n", "CodeBleu_score": 21.457683925836225}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    # Get the invoices\n    invoices = self.get_invoices(page, date_begin, date_end, sortby, filterby)\n    # Get the invoice IDs\n    invoice_ids = [invoice.id for invoice in invoices]\n    # Update the session history with the latest invoice IDs\n    self.update_history(invoice_ids)\n    # Prepare the values\n    values = self._prepare_my_invoices_values(invoices, page, date_begin, date_end, sortby, filterby)\n    # Render the invoices page\n    return request.render(\"account.portal_my_invoices\", values)\n\n", "CodeBleu_score": 36.32144668542555}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    if not self.user:\n        return\n    if not self.user.id:\n        return\n    if not self.user.has_role(('partner_manager', 'partner_accountant', 'partner_invoice', 'partner_sales_person', 'partner_purchase_person', 'partner_manager')):\n        return\n    if not self.user.has_role('partner_manager') and not self.user.has_role('partner_accountant'):\n        return\n    if not self.user.has_role('partner_manager') and not self.user.has_role('partner_accountant') and not self.user.has_role('partner_invoice'):\n        return\n    if not self.user.has_role('partner_manager') and not self.user.has_role('partner_accountant') and not self.user.has_role('partner_invoice') and not self.user.has_role('partner_sales_person'):\n        return\n    if not self.user.has_role('partner_manager') and not self.user.has_role('partner_accountant') and not self.user.has_role('partner_invoice') and not self.user.has_role('partner_sales_person') and not self.user.has_role('partner_purchase_person'):\n        return\n    # get the partner\n    partner = self.user.partner_id\n    # get the invoices\n    invoices = self.env['account.invoice'].search([('partner_id', '=', partner.id), ('type', '=', 'in_invoice')])\n    # sort the invoices\n    invoices = invoices.sorted(sortby, filterby)\n    # get the invoices to display\n    invoices = invoices.with_user(self.user).with_context(\n        show_address=True,\n        date_begin=date_begin,\n        date_end=date_end,\n    )\n    # get the total number of invoices\n    total_invoices = invoices._search", "CodeBleu_score": 31.749146051084487}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n\n    values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby, **kw)\n    return self.render(\"my_invoices.html\", values)\n", "CodeBleu_score": 22.950030774103105}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n\n    invoice_sudo = self.env['account.invoice'].sudo().browse(invoice_id)\n    if not invoice_sudo.exists():\n        raise werkzeug.exceptions.NotFound()\n    if invoice_sudo.type == 'out_invoice' and not invoice_sudo.state in ('open', 'paid'):\n        raise werkzeug.exceptions.NotFound()\n    if invoice_sudo.type == 'in_invoice' and not invoice_sudo.state in ('open', 'paid'):\n        raise werkzeug.exceptions.NotFound()\n\n    # check access\n    if not invoice_sudo.check_access_rights('read', raise_exception=False):\n        raise werkzeug.exceptions.NotFound()\n    if not invoice_sudo.check_access_rule('read', raise_exception=False):\n        raise werkzeug.exceptions.NotFound()\n\n    # redirect if access denied\n    if not invoice_sudo.check_access_rights('read', raise_exception=False):\n        return request.redirect('/my/invoices')\n    if not invoice_sudo.check_access_rule('read', raise_exception=False):\n        return request.redirect('/my/invoices')\n\n    # get the page view values\n    values = self._invoice_get_page_view_values(invoice_sudo)\n\n    # get the report type\n    if not report_type:\n        report_type = request.params.get('report_type', 'html')\n    if report_type not in ('html', 'pdf', 'text'):\n        report_type = 'html'\n\n    # get the report\n    if report_type == 'pdf' and invoice_sudo.state == 'posted':\n        # get the legal documents\n        legal_documents = self._get_invoice_legal_documents(invoice_sudo)\n        if not legal_documents:\n            raise werkzeug.exceptions.NotFound()\n\n        # create a zip file if there are multiple attachments\n        zip_file = self._build_zip_from_attachments(invoice_sudo)\n\n        # return the file with appropriate headers\n        return", "CodeBleu_score": 38.713579288393476}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n\n    invoice_sudo = self.pool.get('account.invoice').sudo()\n    invoice = invoice_sudo.browse(invoice_id)\n    if not invoice:\n        raise werkzeug.exceptions.NotFound()\n    if not self._document_check_access(invoice, access_token):\n        return request.redirect(self._get_portal_url('invoice_list'))\n    if download:\n        return self._get_invoice_report(invoice, report_type, download)\n    else:\n        values = self._invoice_get_page_view_values(invoice)\n        return request.render('account_invoice_document.portal_invoice_detail', values)\n", "CodeBleu_score": 22.14144978827155}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n\n    invoice_sudo = self.pool.get('account.invoice').browse(self.cr, self.uid, invoice_id, context=self._context)\n    if not invoice_sudo.exists():\n        raise osv.except_osv(_('Invoice not found!'), _('The invoice you are trying to access does not exist.'))\n    if not invoice_sudo.can_access_from_portal():\n        raise osv.except_osv(_('Access Denied!'), _('You do not have access to this invoice.'))\n    if not invoice_sudo.is_posted() and not invoice_sudo.is_draft() and not invoice_sudo.is_paid():\n        raise osv.except_osv(_('Access Denied!'), _('You can only view posted, draft, or paid invoices.'))\n    if invoice_sudo.type in ['out_invoice', 'out_refund'] and invoice_sudo.state == 'cancel':\n        raise osv.except_osv(_('Access Denied!'), _('You can only view posted, draft, or paid invoices.'))\n    if invoice_sudo.type in ['in_invoice', 'in_refund'] and invoice_sudo.state == 'draft':\n        raise osv.except_osv(_('Access Denied!'), _('You can only view posted, draft, or paid invoices.'))\n    if invoice_sudo.type in ['out_invoice', 'out_refund'] and invoice_sudo.state == 'draft':\n        raise osv.except_osv(_('Access Denied!'), _('You can only view posted, draft, or paid invoices.'))\n    if invoice_sudo.type in ['in_invoice', 'in_refund'] and invoice_sudo.state == 'cancel':\n        raise osv.except_osv(_('Access Denied!'), _('You can only view posted, draft, or paid invoices.'))\n    if invoice_sudo.type in ['out_invoice', 'out_refund'] and invoice_sudo.state == 'paid':\n        raise os", "CodeBleu_score": 24.173768188133966}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t\n    if company:\n        domain = ['|', ('company_id', '=', company.id), ('company_id', '=', False)]\n    else:\n        domain = ['|', ('company_id', '=', False)]\n\n    products = self.env['product.template'].search(domain)\n    for product in products:\n        if company:\n            if company.account_sale_tax_id:\n                product.sale_tax_id = company.account_sale_tax_id\n            if company.account_purchase_tax_id:\n                product.purchase_tax_id = company.account_purchase_tax_id\n        else:\n            if product.sale_tax_id:\n                product.sale_tax_id = False\n            if product.purchase_tax_id:\n                product.purchase_tax_id = False\n        product.write({'default_code': product.name})\n\n", "CodeBleu_score": 32.56905766046423}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    # The function _get_demo_data_products searches for product templates based on the specified company's domain, updates the sale taxes for these products if the company's account_sale_tax_id is set, and updates the purchase taxes if the company's account_purchase_tax_id is set.\n    #\n    # Keyword arguments:\n    # self -- A reference to the current company\n    # company -- The company for which the products are being searched for\n    #\n    # Return value:\n    # A list of product templates\n    #\n    # Author:\n    #     - Rodrigo E. Lopez\n    #     - Tatu T\u00f6yry\n    #     - Fr\u00e9d\u00e9ric Bastien\n    #     - Mathieu Gouel\n\n    # The function _get_demo_data_products searches for product templates based on the specified company's domain, updates the sale taxes for these products if the company's account_sale_tax_id is set, and updates the purchase taxes if the company's account_purchase_tax_id is set.\n    #\n    # Keyword arguments:\n    # self -- A reference to the current company\n    # company -- The company for which the products are being searched for\n    #\n    # Return value:\n    # A list of product templates\n    #\n    # Author:\n    #     - Rodrigo E. Lopez\n    #     - Tatu T\u00f6yry\n    #     - Fr\u00e9d\u00e9ric Bastien\n    #     - Mathieu Gouel\n    domain = [('company_id', '=', company.id), ('is_demo_data', '=', True)]\n    if company.country_id:\n        domain += [('country_id', '=', company.country_id.id)]\n    if company.currency_id:\n        domain += [('currency_id', '=', company.currency_id.id)]\n    if company.partner_id:\n        domain += [('partner_id', '=', company.partner_id.id)]\n    if company.partner_id.property_product_pricelist_id:\n        domain += [('property_product_pricelist", "CodeBleu_score": 21.637087752590688}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    if not company:\n        company = self.env.company\n    if company.country_id:\n        domain = [('company_id', '=', company.id), ('country_id', '=', company.country_id.id)]\n    else:\n        domain = [('company_id', '=', company.id)]\n    prod_templates = self.env['product.template'].search(domain)\n    if company.country_id:\n        prod_templates.write({'sale_ok': True})\n    if company.account_sale_tax_id:\n        prod_templates.write({'sale_tax_id': company.account_sale_tax_id.id})\n    if company.account_purchase_tax_id:\n        prod_templates.write({'purchase_tax_id': company.account_purchase_tax_id.id})\n    return prod_templates\n\n", "CodeBleu_score": 37.80888173688915}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    domain = [('company_id', '=', company.id), ('xml_id', '=', xml_id)]\n    account = self.env['account.account'].search(domain, limit=1)\n    if not account:\n        domain = [('company_id', '=', company.id), ('account_type', '=', account_type)]\n        account = self.env['account.account'].search(domain, limit=1)\n    if not account:\n        domain = [('company_id', '=', company.id)]\n        account = self.env['account.account'].search(domain, limit=1)\n    return account\n\n", "CodeBleu_score": 48.77431845101823}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env['account.account'].search([\n        ('company_id', '=', company.id),\n        ('xml_id', '=', xml_id),\n        ('internal_type', '=', account_type)\n    ], limit=1)\n    if not account:\n        account = self.env['account.account'].search([\n            ('company_id', '=', company.id),\n            ('internal_type', '=', account_type)\n        ], limit=1)\n    if not account:\n        account = self.env['account.account'].search([\n            ('company_id', '=', company.id),\n        ], limit=1)\n    return account\n\n", "CodeBleu_score": 51.332741034270434}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    # Search for the account using the company's ID and the xml_id in the 'ir.model.data' model\n    account = self.env['ir.model.data'].xmlid_to_object(xml_id, company=company)\n    if account:\n        return account\n    # Search for an account matching the account_type within the company's domain\n    account = self.env['account.account'].search([('company_id', '=', company.id), ('internal_type', '=', account_type)], limit=1)\n    if account:\n        return account\n    # Return the first account within the company's domain\n    return self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n\n", "CodeBleu_score": 43.36749853854387}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    if not self.company_id:\n        return\n    account_type = self.account_type\n    if account_type != \"Current Year Earnings\":\n        return\n    accounts = self.env[\"account.account\"].search([\n        (\"company_id\", \"=\", self.company_id.id),\n        (\"account_type\", \"=\", account_type),\n        (\"id\", \"!=\", self.id),\n    ])\n    if not accounts:\n        return\n    raise ValidationError(_(\"There can only be one account of type \\\"Current Year Earnings\\\" per company.\"))\n\n", "CodeBleu_score": 34.44502974350594}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    accounts = self.env['account.account'].search([\n        ('company_id', 'in', self.company_ids.ids),\n        ('type', '=', 'earnings'),\n        ('internal_type', '=', 'other'),\n        ('code', '=', 'current_year_earnings')\n    ])\n    grouped_accounts = accounts.read_group([\n        ('company_id', 'in', self.company_ids.ids),\n        ('type', '=', 'earnings'),\n        ('internal_type', '=', 'other'),\n        ('code', '=', 'current_year_earnings')\n    ], ['company_id'], ['company_id'])\n    for account in grouped_accounts:\n        if len(accounted['company_id']) > 1:\n            raise ValidationError(_('There should be only one account of type \"Current Year Earnings\" for each company.'))", "CodeBleu_score": 20.90846260535112}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n\n    accounts = self.env['account.account'].search([\n        ('company_id', 'in', self.company_ids.ids),\n        ('account_type', '=', 'earnings'),\n        ('code', '=', '0000'),\n        ('internal_type', '=', 'other')\n    ])\n\n    for account in accounts:\n        if len(accounts.filtered(lambda x: x.company_id == account.company_id and x != account)) > 0:\n            raise ValidationError(_(\"There is already an account of type \\\"Current Year Earnings\\\" for this company.\"))\n\n", "CodeBleu_score": 21.692511047259902}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if name and name.strip() and not domain:\n        domain = [('name', operator, name)]\n    if not domain:\n        domain = []\n    if name and name.strip() and not domain:\n        domain = [('name', operator, name)]\n    if not domain:\n        domain = []\n    if name and name.strip() and not domain:\n        domain = [('name', operator, name)]\n    if not domain:\n        domain = []\n    if name and name.strip() and not domain:\n        domain = [('name', operator, name)]\n    if not domain:\n        domain = []\n    if name and name.strip() and not domain:\n        domain = [('name', operator, name)]\n    if not domain:\n        domain = []\n    if name and name.strip() and not domain:\n        domain = [('name', operator, name)]\n    if not domain:\n        domain = []\n    if name and name.strip() and not domain:\n        domain = [('name', operator, name)]\n    if not domain:\n        domain = []\n    if name and name.strip() and not domain:\n        domain = [('name', operator, name)]\n    if not domain:\n        domain = []\n    if name and name.strip() and not domain:\n        domain = [('name', operator, name)]\n    if not domain:\n        domain = []\n    if name and name.strip() and not domain:\n        domain = [('name', operator, name)]\n    if not domain:\n        domain = []\n    if name and name.strip() and not domain:\n        domain = [('name', operator, name)]\n    if not domain:\n        domain = []\n    if name and name.strip() and not domain:\n        domain = [('name', operator, name)]\n    if not domain:\n        domain = []\n    if name and name.strip() and not domain:\n        domain = [('name', operator, name)]\n    if not domain:\n        domain = []\n    if name and name.strip() and not domain:\n        domain = [('name', operator, name)]\n    if not domain:\n        domain = []\n    if name and name.strip", "CodeBleu_score": 25.30677738713074}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n\n    if not name and 'partner_id' in self.env.context:\n        return self._order_accounts_by_frequency_for_partner(domain)\n    if not name and 'partner_id' not in self.env.context:\n        return self._search(domain, order=order, limit=limit)\n    if not domain:\n        domain = []\n    if not operator:\n        operator = 'ilike'\n    if not limit:\n        limit = self._search_limit(self.env.context.get('limit'))\n    if not order:\n        order = self._order\n    return self._search([('name', operator, name)] + domain, order=order, limit=limit)\n\n", "CodeBleu_score": 37.47892713861153}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self._context.get('search_default_name'):\n        return self._order_accounts_by_frequency_for_partner(domain)\n    if not name and self._context.get('search_default_name') and self._context.get('search_default_partner_id'):\n        domain = expression.AND([domain, [('partner_id', '=', self._context.get('search_default_partner_id'))]])\n    if name:\n        name_domain = [('name', operator, name)]\n        if domain:\n            domain = expression.AND([name_domain, domain])\n        else:\n            domain = name_domain\n    if not domain:\n        domain = []\n    if limit:\n        domain = expression.AND([domain, [('limit', '<=', limit)]])\n    if order:\n        domain = expression.AND([domain, [('order', '=', order)]])\n    return self.search(domain, limit=limit)\n\n", "CodeBleu_score": 52.109403809913424}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t\n    for field in self.fields:\n        if field not in excluded:\n            if field == 'name':\n                new._get_stored_translations(field)[self.lang] = new.name\n            else:\n                new._get_stored_translations(field)[self.lang] = getattr(self, field)\n\n", "CodeBleu_score": 28.77410965850309}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    for field in self:\n        if field.name not in excluded:\n            if field.name == 'name':\n                if new.name_field._get_stored_translations(self.name_field._get_stored_translations(self.name)):\n                    new.name_field._get_stored_translations(new.name)\n            new[field.name] = self[field.name]\n\n", "CodeBleu_score": 34.72230900615648}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    if new.id:\n        raise Exception(\"Can't copy translations to existing record\")\n    for field in self:\n        if field.name not in excluded:\n            if field.name == 'name':\n                new.name = field._get_stored_translations()\n            else:\n                field._copy_translations(new)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 28.2980616712888}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    sale_types = self.env['sale.order.line'].get_sale_types()\n    query = self.env['account.analytic.line'].with_context(active_ids=self.ids)._query_analytic_accounts(sale_types)\n    query = query.select(self._fields_get()).add_where([('sale_line_id', 'in', self.ids)])\n    move_ids = self.env['account.analytic.line'].with_context(active_ids=self.ids)._search(query, order='date desc, id desc')\n    return {\n        'type': 'ir.actions.act_window',\n        'name': _('Customer Invoices'),\n        'view_type': 'form',\n        'view_mode': 'tree,form',\n        'res_model': 'account.move',\n        'domain': [('id', 'in', move_ids)],\n        'context': {\n            'default_type': 'out_invoice',\n            'default_move_id': move_ids[0],\n            'default_invoice_ids': self.ids,\n            'search_default_invoice_ids': self.ids,\n            'search_default_move_id': move_ids[0],\n            'search_default_type': 'out_invoice',\n        },\n    }\n\n", "CodeBleu_score": 31.63010564554248}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    sale_types = self.get_sale_types()\n    query = self.env['account.analytic.line'].with_context(active_ids=self.ids, active_id=self.id).search([('sale_type', 'in', sale_types)])\n    query = query.with_context(active_ids=self.ids, active_id=self.id)._query_analytic_accounts()\n    move_ids = query.execute()\n    return {\n        'name': _('Customer Invoices'),\n        'type': 'ir.actions.act_window',\n        'res_model': 'account.move',\n        'view_type': 'form',\n        'view_mode': 'tree,form',\n        'domain': [('id', 'in', move_ids)],\n        'context': {\n            'default_type': 'out_invoice',\n            'default_move_id': move_ids[0],\n            'default_invoice_line_id': self.line_ids[0].id,\n            'default_invoice_line_move_id': move_ids[0],\n            'search_default_invoice_line_move_id': move_ids[0],\n            'default_invoice_line_ids': self.line_ids.ids,\n            'search_default_invoice_line_ids': self.line_ids.ids,\n            'default_invoice_line_move_ids': move_ids,\n            'search_default_invoice_line_move_ids': move_ids,\n            'default_invoice_line_move_ids_count': len(move_ids),\n            'search_default_invoice_line_move_ids_count': len(move_ids),\n            'default_invoice_line_move_ids_count_display': len(move_ids),\n            'search_default_invoice_line_move_ids_count_display': len(move_ids),\n            'default_invoice_line_move_ids_display': ', '.join(str(move_id) for move_id in move_ids),\n", "CodeBleu_score": 27.96078461904818}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    sale_types = self.get_sale_types()\n    query = self.env['account.move.line']._query_analytic_accounts(sale_types)\n    query = query.select(['move_id'])\n    query = query.add_where([('sale_line_id', 'in', self.ids)])\n    query = query.add_where([('analytic_account_id', '=', self.analytic_account_id.id)])\n    query = query.add_where([('analytic_tag_ids', 'in', self.analytic_tag_ids.ids)])\n    query = query.add_where([('partner_id', '=', self.partner_id.id)])\n    query = query.add_where([('partner_invoice_id', '=', self.partner_invoice_id.id)])\n    query = query.add_where([('partner_shipping_id', '=', self.partner_shipping_id.id)])\n    query = query.add_where([('partner_contact_id', '=', self.partner_contact_id.id)])\n    query = query.add_where([('partner_ref', '=', self.partner_ref)])\n    query = query.add_where([('partner_bill_id', '=', self.partner_bill_id.id)])\n    query = query.add_where([('partner_payment_term_id', '=', self.partner_payment_term_id.id)])\n    query = query.add_where([('partner_bank_id', '=', self.partner_bank_id.id)])\n    query = query.add_where([('partner_id', '=', self.partner_id.id)])\n    query = query.add_where([('partner_lang', '=', self.partner_lang)])\n    query = query.add_where([('partner_currency_id', '=', self.partner_currency_id.id)", "CodeBleu_score": 20.090911909943244}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    purchase_types = self.env['purchase.order.line']._get_purchase_types()\n    query = self.env['account.move.line'].with_context(active_ids=self.ids)._query_analytic_accounts(purchase_types)\n    query = self.env['account.move.line'].with_context(active_ids=self.ids)._search(query, purchase_types)\n    move_ids = self.env['account.move.line'].with_context(active_ids=self.ids)._search(query, purchase_types)\n    return {\n        'name': _('Vendor Bills'),\n        'type': 'ir.actions.act_window',\n        'res_model': 'account.move',\n        'view_type': 'form',\n        'view_mode': 'tree,form',\n        'view_id': False,\n        'context': {\n            'search_default_move_type': 'in_invoice',\n            'search_default_purchase_type': 'purchase',\n            'search_default_move_ids': move_ids,\n            'search_default_purchase_ids': self.ids,\n            'active_ids': self.ids,\n            'active_id': self.ids[0],\n            'active_model': 'purchase.order',\n            'default_move_type': 'in_invoice',\n            'default_purchase_type': 'purchase',\n            'default_move_ids': move_ids,\n            'default_purchase_ids': self.ids,\n            'default_purchase_id': self.ids[0],\n        },\n    }\n\n", "CodeBleu_score": 27.643742840491587}, {"code": "def action_view_vendor_bill(self)\n\t\n    # Ensure a single record context\n    self.ensure_one()\n    # Search for account move lines related to purchase types and the current record's ID\n    query = self.env['account.move.line'].with_context(active_id=self.id)._query_analytic_accounts()\n    # Retrieve distinct move IDs\n    move_ids = self.env['account.move'].search(query).ids\n    # Construct and return an action to display vendor bills in a tree and form view\n    return {\n        'name': _('Vendor Bills'),\n        'type': 'ir.actions.act_window',\n        'view_type': 'form',\n        'view_mode': 'tree,form',\n        'res_model': 'account.move',\n        'domain': [('id', 'in', move_ids)],\n        'context': {\n            'default_type': 'in_invoice',\n            'default_move_id': move_ids[0],\n            'default_move_ids': move_ids,\n            'active_id': self.id,\n            'active_ids': [self.id],\n            'active_model': self._name,\n            'search_default_move_ids': move_ids,\n            'search_default_move_id': move_ids[0],\n            'search_default_type': 'in_invoice',\n            'search_default_name': self.name,\n            'search_default_partner_id': self.partner_id.id,\n            'search_default_partner_ids': self.partner_id.ids,\n            'search_default_partner_type': 'in',\n            'search_default_partner_name': self.partner_id.name,\n            'search_default_partner_account_id': self.partner_id.property_account_payable.id,\n            'search_default_partner_account_ids': self.partner_id.property_account_payable.ids,\n            'search_default_partner_account_type': 'out',\n            'search_default_partner_account_name': self", "CodeBleu_score": 26.334480617005934}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    query = self.env['account.move.line'].with_context(active_id=self.id).search([('purchase_type', '=', self.purchase_type), ('account_id', '=', self.account_id.id)])\n    move_ids = query.distinct('move_id').ids\n    action = self.env.ref('account.action_move_line_all_move').read()[0]\n    action['context'] = {\n        'search_default_move_id': move_ids,\n        'search_default_move_type': 'in_invoice',\n        'default_move_type': 'in_invoice',\n        'active_ids': move_ids,\n        'active_id': move_ids[0],\n    }\n    return action\n\n", "CodeBleu_score": 31.109259270962962}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        values.pop('attachment_ids')\n    with self.env.cr.savepoint():\n        result = super(Attachment, self).write(values)\n        self._check_attachments()\n        return result\n\n", "CodeBleu_score": 50.5134778575675}, {"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        values.pop('attachment_ids')\n    with self.env.cr.savepoint():\n        result = super(IrAttachment, self).write(values)\n    return result\n\n", "CodeBleu_score": 46.45405777461148}, {"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        values.pop('attachment_ids')\n    with self.env.cr.savepoint():\n        result = super(Issue, self).write(values)\n    return result\n\n", "CodeBleu_score": 45.59145473735611}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_one()\n    if get_param(self.env, 'hr_payroll.skip_bank_account_creation', default=False):\n        return self.env['res.partner.bank']\n    bank_account = self.env['res.partner.bank'].search([\n        ('acc_number', '=', self.acc_number),\n        ('partner_id', '=', self.partner_id.id),\n        ('company_id', '=', self.company_id.id),\n    ])\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create({\n            'acc_number': self.acc_number,\n            'partner_id': self.partner_id.id,\n            'company_id': self.company_id.id,\n        })\n    return bank_account\n\n", "CodeBleu_score": 57.12450701172585}, {"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_one()\n    if self.env['ir.config_parameter'].sudo().get_param('hr_payroll.skip_bank_account_creation', 'False') == 'True':\n        return self.env['account.bank.account'].create({\n            'name': 'Bank Account',\n            'code': 'BANK',\n            'partner_id': self.id,\n            'company_id': self.company_id.id,\n            'currency_id': self.company_id.currency_id.id,\n        })\n    else:\n        bank_account = self.env['account.bank.account'].search([\n            ('partner_id', '=', self.id),\n            ('company_id', '=', self.company_id.id)\n        ])\n        if not bank_account:\n            bank_account = self.env['account.bank.account'].create({\n                'name': 'Bank Account',\n                'code': 'BANK',\n                'partner_id': self.id,\n                'company_id': self.company_id.id,\n                'currency_id': self.company_id.currency_id.id,\n            })\n        return bank_account\n\n", "CodeBleu_score": 47.67309480697416}, {"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_one()\n    if self.env.context.get('skip_bank_account_creation'):\n        return self.env['res.partner.bank']\n    else:\n        bank_account = self.env['res.partner.bank'].search([('acc_number', '=', self.acc_number), ('partner_id', '=', self.id)])\n        if not bank_account:\n            bank_account = self.env['res.partner.bank'].create({\n                'name': self.name,\n                'acc_number': self.acc_number,\n                'partner_id': self.id,\n                'company_id': self.company_id.id,\n            })\n        return bank_account\n\n", "CodeBleu_score": 51.733826412971126}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    # TDE CLEANME: this function is too long, split it\n    # TDE CLEANME: this function is too complex, split it\n    # TDE CLEANME: this function is too complex, split it\n    # TDE CLEANME: this function is too complex, split it\n    # TDE CLEANME: this function is too complex, split it\n    # TDE CLEANME: this function is too complex, split it\n    # TDE CLEANME: this function is too complex, split it\n    # TDE CLEANME: this function is too complex, split it\n    # TDE CLEANME: this function is too complex, split it\n    # TDE CLEANME: this function is too complex, split it\n    # TDE CLEANME: this function is too complex, split it\n    # TDE CLEANME: this function is too complex, split it\n    # TDE CLEANME: this function is too complex, split it\n    # TDE CLEANME: this function is too complex, split it\n    # TDE CLEANME: this function is too complex, split it\n    # TDE CLEANME: this function is too complex, split it\n    # TDE CLEANME: this function is too complex, split it\n    # TDE CLEANME: this function is too complex, split it\n    # TDE CLEANME: this function is too complex, split it\n    # TDE CLEANME: this function is too complex, split it\n    # TDE CLEANME: this function is too complex, split it\n    # TDE CLEANME: this function is too complex, split it\n    # TDE CLEANME: this function is too complex, split it\n    # TDE CLEANME: this function is too complex, split it\n    # TDE CLEANME: this function is too complex, split it\n    # TDE CLEANME: this function is too complex, split it\n    # TDE CLEANME: this function is too complex, split it\n    # TDE CLEANME: this function is too complex, split it\n    # TDE CLEAN", "CodeBleu_score": 1.5725316675342702}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one\n    currency.round\n    company_currency.round\n    abs\n    journal_currency.round\n    self._get_accounting_amounts_and_currencies\n\n", "CodeBleu_score": 2.0176792711109277}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one\n    currency.round\n    company_currency.round\n    abs\n    journal_currency.round\n    self._get_accounting_amounts_and_currencies\n\n", "CodeBleu_score": 2.0176792711109277}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    # Get the journal ids\n    journal_ids = self.ids\n    # Clear the outbound payment method lines\n    self.write({'outbound_payment_method_line_ids': [(4, line.id) for line in self.outbound_payment_method_line_ids]})\n    # Get the outbound payment methods\n    default_outbound_payment_methods = self._default_outbound_payment_methods()\n    # Create new outbound payment method lines\n    for journal in self:\n        if journal.type in ['bank', 'cash']:\n            for outbound_payment_method in default_outbound_payment_methods:\n                self.outbound_payment_method_line_ids.create({'journal_id': journal.id, 'outbound_payment_method_id': outbound_payment_method.id})\n    # Update the journal\n    self.write({'outbound_payment_method_line_ids': [(6, 0, self.outbound_payment_method_line_ids.ids)]})\n\n", "CodeBleu_score": 35.25917784902949}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    self.ensure_one()\n    if self.type == 'bank' or self.type == 'cash':\n        self.outbound_payment_method_line_ids = self._default_outbound_payment_methods()\n\n", "CodeBleu_score": 14.077295735285194}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        if journal.type in ['bank', 'cash']:\n            journal.outbound_payment_method_line_ids.unlink()\n            for payment_method in journal._default_outbound_payment_methods:\n                journal.outbound_payment_method_line_ids.create({'payment_method_id': payment_method.id})\n\n", "CodeBleu_score": 27.809570793509273}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t\n    for move in self:\n        if not move.invoice_date:\n            move.date = fields.Date.today()\n        else:\n            if move.is_sale_document:\n                move.date = move.invoice_date\n            else:\n                move.date = move._get_accounting_date()\n\n", "CodeBleu_score": 23.202816605557196}, {"code": "def _compute_date(self)\n\t\n    today = fields.Date.today()\n    for move in self:\n        if not move.date:\n            if move.invoice_date:\n                if not move.is_sale_document:\n                    move.date = move._get_accounting_date(move.invoice_date)\n            else:\n                move.date = today\n        if move.date != today:\n            move._affect_tax_report()\n            move.is_sale_document = move.is_sale_document\n\n", "CodeBleu_score": 30.09439801178303}, {"code": "def _compute_date(self)\n\t\n    if not self.mapped('invoice_date') and not self.mapped('date'):\n        self.date = fields.Date.today()\n    else:\n        if self.is_sale_document:\n            self.date = self.invoice_date\n        else:\n            self.date = self._get_accounting_date()\n\n", "CodeBleu_score": 16.950674065260472}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_purchase_document:\n            if move.partner_id.property_supplier_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id\n            else:\n                move.invoice_payment_term_id = False\n        elif move.is_sale_document:\n            if move.partner_id.property_customer_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_customer_payment_term_id\n            else:\n                move.invoice_payment_term_id = False\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 47.945236523782725}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.type == 'out_invoice':\n            if move.partner_id.property_supplier_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id\n            else:\n                move.invoice_payment_term_id = False\n        elif move.type == 'in_invoice':\n            if move.partner_id.property_customer_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_customer_payment_term_id\n            else:\n                move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 48.47671727055721}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_purchase_document:\n            payment_term_id = move.partner_id.property_supplier_payment_term_id\n        else:\n            payment_term_id = move.partner_id.property_customer_payment_term_id\n        if payment_term_id:\n            move.invoice_payment_term_id = payment_term_id\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 39.567559535367494}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        if not tax.tax_group_id:\n            tax_groups = self.env['account.tax.group'].search([('country_id', '=', tax.country_id.id), ('company_id', '=', tax.company_id.id)])\n            if not tax_groups:\n                tax_groups = self.env['account.tax.group'].search([('country_id', '=', False), ('company_id', '=', tax.company_id.id)])\n            if tax_groups:\n                tax.tax_group_id = tax_groups[0]\n\n\n def _check_company_domain(self):\n    \"\"\"This function checks whether the company domain of each tax is correct. It first checks whether the company domain of each tax is correct. If not, it corrects the domain.\"\"\"\n    for tax in self:\n        if not tax.company_id.domain:\n            tax.company_id.write({'domain': [('country_id', '=', tax.country_id.id)]})\n\n\n def by_country_company(self):\n    \"\"\"This function categorizes taxes by their country and company. It returns a dictionary containing the tax groups as keys and the corresponding taxes as values.\"\"\"\n    tax_groups_by_country_company = defaultdict(list)\n    for tax in self:\n        tax_groups_by_country_company[(tax.country_id.id, tax.company_id.id)].append(tax)\n    return tax_groups_by_country_company\n\n\n def _compute_tax_group_id(self):\n    \"\"\"This function assigns the appropriate tax group to each tax based on the tax's country and company. It first categorizes taxes by their country and company. For each group, it searches for a matching tax group with the same country and company. If no exact match is found, it searches for a tax group without a specified country but within the same company.\"\"\"\n    for tax in self:\n        if not tax.tax_group_id:\n            tax_groups = self.env['account.tax.group'].search([('country_id', '=', tax.country_id.id), ('company_", "CodeBleu_score": 33.578626919183264}, {"code": " def _compute_tax_group_id(self)\n\t\n    by_country_company = defaultdict(list)\n    for tax in self:\n        by_country_company[(tax.country_id.id, tax.company_id.id)].append(tax)\n    for (country_id, company_id), taxes in by_country_company.items():\n        taxes.sort(key=lambda tax: tax.sequence)\n        for tax in taxes:\n            tax.tax_group_id = _check_company_domain(taxes, country_id, company_id)\n\n\n def _check_company_domain(self, taxes, country_id, company_id):\n    \"\"\"This function checks if a tax group with the same country and company exists. If not, it returns the first tax group without a specified country but within the same company.\"\"\"\n    for tax in taxes:\n        if tax.country_id.id == country_id and tax.company_id.id == company_id:\n            return tax.tax_group_id\n    for tax in taxes:\n        if not tax.country_id and tax.company_id.id == company_id:\n            return tax.tax_group_id\n    return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 29.252220709671704}, {"code": " def _compute_tax_group_id(self)\n\t\n    tax_groups_by_country_company = defaultdict(lambda: defaultdict(list))\n    for tax in self:\n        tax_groups_by_country_company[(tax.country_id.id, tax.company_id.id)].append(tax)\n    for (country_id, company_id), taxes in tax_groups_by_country_company.items():\n        country_id = country_id or False\n        company_id = company_id or False\n        tax_group_id = False\n        for tax in taxes:\n            if tax.tax_group_id.country_id.id == country_id and tax.tax_group_id.company_id.id == company_id:\n                tax_group_id = tax.tax_group_id.id\n                break\n        if not tax_group_id:\n            tax_group_id = self.search([(\"country_id\", \"=\", country_id), (\"company_id\", \"=\", company_id)], limit=1).id\n        for tax in taxes:\n            tax.tax_group_id = tax_group_id\n\n\n def _check_company_domain(self):\n    \"\"\"This function checks that the company domain is correct for each tax group. It first categorizes tax groups by their country and company. For each group, it searches for a matching tax group with the same country and company. If no exact match is found, it searches for a tax group without a specified country but within the same company.\"\"\"\n    tax_groups_by_country_company = defaultdict(lambda: defaultdict(list))\n    for tax_group in self:\n        tax_groups_by_country_company[(tax_group.country_id.id, tax_group.company_id.id)].append(tax_group)\n    for (country_id, company_id), tax_groups in tax_groups_by_country_company.items():\n        country_id = country_id or False\n        company_id = company_id or False\n        for tax_group in tax_groups:\n            if tax_group.country_id.id != country_id or tax_group.company_id.id != company_id:\n                tax_", "CodeBleu_score": 31.86665528973269}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set the database in the session\n    self.login(url, login, password, db)\n    # Prepare the POST data\n    post_data = {'force': force, 'file': open(module_file, 'rb')}\n    # Upload the module file\n    r = self.session.post(url + '/base_import_module/login_upload', data=post_data)\n    # Check the response\n    r.raise_for_status()\n    return r.text\n\n", "CodeBleu_score": 25.84191950954474}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set the database in the session\n    self.set_database(url, login, password, db)\n    # Prepare the POST request data\n    post_data = {'login': login, 'password': password, 'db': db, 'force': force}\n    # Read the module file\n    with open(module_file, 'r') as f:\n        post_data['module'] = f.read()\n    # Upload the module\n    response = self.session.post(self.base_import_module + '/login_upload', data=post_data)\n    # Check the response\n    if not response.ok:\n        raise Exception('Server returned HTTP code %s' % response.status_code)\n    return response.text\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 39.69630201136827}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    self.login(url, login, password, db)\n    with open(module_file, 'rb') as f:\n        module_file = f.read()\n    data = {'module_file': module_file, 'force': force}\n    r = requests.post(url + '/base_import_module/login_upload', data=data, verify=False)\n    r.raise_for_status()\n    return r.text\n\n", "CodeBleu_score": 33.193283824985386}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t\n\n    # Get the database name and overwrite settings\n    database_name = 'odoo'\n    overwrite = True\n\n    # Create a new database registry\n    registry = openerp.modules.registry.RegistryManager.get(database_name)\n\n    # Create a cursor to the database\n    cr = registry.cursor()\n\n    # Create a new TranslationImporter\n    importer = TranslationImporter(cr, overwrite)\n\n    # Load translation files\n    importer.load_file('locale/fr/LC_MESSAGES/odoo.po')\n    importer.load_file('locale/es/LC_MESSAGES/odoo.po')\n    importer.load_file('locale/it/LC_MESSAGES/odoo.po')\n    importer.load_file('locale/de/LC_MESSAGES/odoo.po')\n    importer.load_file('locale/pt_BR/LC_MESSAGES/odoo.po')\n    importer.load_file('locale/ru/LC_MESSAGES/odoo.po')\n    importer.load_file('locale/zh_CN/LC_MESSAGES/odoo.po')\n    importer.load_file('locale/zh_TW/LC_MESSAGES/odoo.po')\n    importer.load_file('locale/ar/LC_MESSAGES/odoo.po')\n    importer.load_file('locale/fa/LC_MESSAGES/odoo.po')\n    importer.load_file('locale/ja/LC_MESSAGES/odoo.po')\n    importer.load_file('locale/ko/LC_MESSAGES/odoo.po')\n    importer.load_file('locale/ms/LC_MESSAGES/odoo.po')\n    importer.load_file('locale/th/LC_MESSAGES/odoo.po')\n    importer.load_file('locale/vi/LC_MESSAGES/odoo.po')\n    importer.load_file('locale/uk/LC_MESSAGES/odoo.po", "CodeBleu_score": 28.32308547181549}, {"code": "def import_translation()\n\t\n    # The database name is retrieved from the configuration file.\n    db_name = config.get('database', 'name')\n    # The overwrite configuration is retrieved from the configuration file.\n    overwrite = config.getboolean('translations', 'overwrite')\n\n    # A new registry is created and initialized with the database name.\n    registry = Registry.new(db_name)\n    # A cursor is created for the new registry.\n    cr = registry.cursor()\n\n    # A new TranslationImporter is created and initialized with the cursor.\n    importer = TranslationImporter(cr)\n    # The importer loads translation files based on the specified configuration.\n    importer.load_file(config.get('translations', 'path'))\n    # The importer saves the translations, with the option to overwrite existing ones.\n    importer.save(overwrite)\n\n", "CodeBleu_score": 32.751890622284854}, {"code": "def import_translation()\n\t\n\n    # Get the database name and whether to overwrite existing translations\n    database_name = config['database_name']\n    overwrite = config['overwrite']\n\n    # Create a new registry for the specified database\n    registry = openerp.modules.registry.RegistryManager.get(database_name)\n\n    # Create a cursor for the specified database\n    cr = registry.cursor()\n\n    # Create a new TranslationImporter\n    importer = TranslationImporter(cr, overwrite)\n\n    # Load translation files\n    importer.load_file('./translations/fr_FR.po')\n    importer.load_file('./translations/en_US.po')\n\n    # Save translations\n    importer.save()\n\n", "CodeBleu_score": 24.312450773561757}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\t\n    if name in self.children:\n        return self.children[name]\n    else:\n        child = Node(name, info)\n        child.depth = self.depth + 1\n        child.parent = self\n        self.children[name] = child\n        for attr in self.attributes:\n            if hasattr(self, attr):\n                setattr(child, attr, getattr(self, attr))\n        self.children = sorted(self.children.items(), key=lambda x: x[0])\n        return child\n\n", "CodeBleu_score": 39.53644575609132}, {"code": "def add_child(self, name, info)\n\t\n    if name in self.children:\n        return self.children[name]\n    node = Node(name, info, self.depth + 1)\n    self.children[name] = node\n    if hasattr(self, 'children'):\n        for attr in self.children:\n            if attr != name:\n                node.add_child(attr, self.children[attr])\n    if hasattr(self, 'info'):\n        node.info = self.info\n    node.children = sorted(node.children.items(), key=lambda x: x[0])\n    return node\n\n", "CodeBleu_score": 34.38200638323773}, {"code": "def add_child(self, name, info)\n\t\n    if name in self.children:\n        return self.children[name]\n    else:\n        new_node = Node(name, info)\n        new_node.depth = self.depth + 1\n        new_node.parent = self\n        self.children[name] = new_node\n        if hasattr(self, \"children_order\"):\n            if name not in self.children_order:\n                self.children_order.append(name)\n                self.children_order.sort()\n        return new_node\n\n", "CodeBleu_score": 36.99185736738168}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {}\n    for date in dates:\n        result[date] = 0.0\n\n    if account.root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n        for date in dates:\n            for entry in gl_entries:\n                if entry.account == account.name and entry.posting_date <= date:\n                    result[date] += entry.debit - entry.credit\n    else:\n        for date in dates:\n            for entry in gl_entries:\n                if entry.account == account.name and entry.posting_date <= date:\n                    result[date] -= entry.debit - entry.credit\n\n    return result\n\n", "CodeBleu_score": 23.078181853914806}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = frappe._dict()\n    for date in dates:\n        result[date] = frappe._dict()\n        result[date].balance = 0\n    for entry in gl_entries:\n        if entry.account == account:\n            if entry.is_opening == \"Yes\":\n                if entry.account_type in [\"Asset\", \"Liability\", \"Equity\"]:\n                    result[entry.posting_date].balance += entry.debit - entry.credit\n                elif entry.account_type in [\"Income\", \"Expense\"]:\n                    result[entry.posting_date].balance -= entry.debit - entry.credit\n                else:\n                    result[entry.posting_date].balance += entry.debit - entry.credit\n            else:\n                if entry.account_type in [\"Asset\", \"Liability\", \"Equity\"]:\n                    result[entry.posting_date].balance += entry.credit - entry.debit\n                elif entry.account_type in [\"Income\", \"Expense\"]:\n                    result[entry.posting_date].balance -= entry.credit - entry.debit\n                else:\n                    result[entry.posting_date].balance += entry.credit - entry.debit\n    return result\n\n", "CodeBleu_score": 20.85958122701834}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\n        \"account\": account,\n        \"account_name\": account.account_name,\n        \"account_type\": account.account_type,\n        \"root_type\": account.root_type,\n        \"opening_balance\": 0.0,\n        \"closing_balance\": 0.0,\n        \"balance\": 0.0,\n        \"values\": []\n    }\n    if not dates:\n        return result\n    result[\"values\"] = [{\"date\": d.date()} for d in dates]\n    opening_balance = frappe.get_cached_value(\"Account\", account.parent_account, \"opening_balance\")\n    if account.root_type in (\"Asset\", \"Liability\", \"Equity\"):\n        for d in dates:\n            result[\"values\"][d.index()][\"balance\"] = opening_balance\n            opening_balance += gl_entries.get_balance(account, d)\n        result[\"closing_balance\"] = opening_balance\n    else:\n        for d in dates:\n            result[\"values\"][d.index()][\"balance\"] = gl_entries.get_balance(account, d)\n            opening_balance += result[\"values\"][d.index()][\"balance\"]\n        result[\"closing_balance\"] = opening_balance\n    result[\"opening_balance\"] = opening_balance\n    result[\"balance\"] = result[\"closing_balance\"]\n    return result\n\n", "CodeBleu_score": 21.727820164909968}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type == \"Receivable\" or self.account_type == \"Payable\":\n        if self.account_type != self.get_doc_before_save().account_type:\n            if frappe.db.sql(\"\"\"select name from `tabGL Entry` where account = %s\"\"\", self.name, as_dict=True):\n                frappe.msgprint(_(\"\"\"Warning: This account is a {0} account. If you change the account type to a non-{0} account type, the existing general ledger entries will be affected. Please note that the Accounts report will not show the correct values for this account and the Accounts report will show incorrect values for the {0} account.\"\"\".format(self.account_type)),\n                    title=_(\"Warning\"), indicator='orange')\n                self.add_comment('Accounts Report', _(\"\"\"Warning: This account is a {0} account. If you change the account type to a non-{0} account type, the existing general ledger entries will be affected. Please note that the Accounts report will not show the correct values for this account and the Accounts report will show incorrect values for the {0} account.\"\"\".format(self.account_type)))\n", "CodeBleu_score": 24.32372507198443}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type == \"Receivable\" or self.account_type == \"Payable\":\n        if self.account_type != self.old_account_type:\n            if self.account_type == \"Bank\":\n                frappe.msgprint(_(\"Warning: Account type changed from Receivable/Payable to Bank. This will result in incorrect entries in the Accounts report.\"))\n            else:\n                frappe.msgprint(_(\"Warning: Account type changed from Receivable/Payable to {0}. This will result in incorrect entries in the Accounts report.\").format(self.account_type))\n            self.add_comment(\"Accounts\", _(\"Warning: Account type changed from Receivable/Payable to {0}. This will result in incorrect entries in the Accounts report.\".format(self.account_type)))\n\n", "CodeBleu_score": 26.056044400957106}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type in [\"Receivable\", \"Payable\"]:\n        if self.account_type != self.get_doc_before_save().account_type:\n            if self.get_gl_entries():\n                frappe.msgprint(\n                    _(\"Warning: Account type changed from {0} to {1} and there are existing general ledger entries for this account. You may need to update the Accounts report.\").format(\n                        self.get_doc_before_save().account_type, self.account_type\n                    ),\n                    title=_(\"Account Type Changed\"),\n                    indicator=\"orange\",\n                )\n                self.add_comment(\n                    _(\n                        \"Warning: Account type changed from {0} to {1} and there are existing general ledger entries for this account. You may need to update the Accounts report.\"\n                    ).format(self.get_doc_before_save().account_type, self.account_type)\n                )\n\n", "CodeBleu_score": 26.31931131795755}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t\n    if self.account_type == \"Cash\" and self.account_currency != self.company_currency:\n        frappe.throw(_(\"Cash account must be in company currency\"))\n\n    if self.account_currency and self.account_currency != self.company_currency:\n        self.explicit_currency = 1\n\n    if self.account_currency == self.company_currency:\n        self.explicit_currency = 1\n\n    if self.account_type in (\"Bank\", \"Cash\"):\n        self.account_currency = self.company_currency\n\n    if self.account_type == \"Bank\" and not self.account_currency:\n        self.account_currency = self.company_currency\n\n    if self.account_type == \"Cash\" and not self.account_currency:\n        self.account_currency = self.company_currency\n\n    if self.account_type == \"Cash\" and self.account_currency != self.company_currency:\n        self.account_currency = self.company_currency\n\n    if self.account_type == \"Bank\" and self.account_currency != self.company_currency:\n        self.account_currency = self.company_currency\n\n    if self.account_type == \"Bank\" and self.account_currency != self.company_currency:\n        self.account_currency = self.company_currency\n\n    if self.account_type == \"Cash\" and self.account_currency != self.company_currency:\n        self.account_currency = self.company_currency\n\n    if self.account_type == \"Bank\" and self.account_currency != self.company_currency:\n        self.account_currency = self.company_currency\n\n    if self.account_type == \"Bank\" and self.account_currency != self.company_currency:\n        self.account_currency = self.company_currency\n\n    if self.account_type == \"Cash\" and self.account_currency != self.company_currency:\n        self.account_currency = self.company_currency\n\n    if self.account_type == \"Bank\" and self.account_currency != self.company_currency:", "CodeBleu_score": 23.049327738809104}, {"code": "def validate_account_currency(self)\n\t\n    if not self.account_currency:\n        self.account_currency = self.company_currency\n        self.explicit_currency = 1\n        self.db_update()\n\n    if not self.explicit_currency:\n        if frappe.db.get_value(\"GL Entry\", {\"account\": self.name}, \"name\"):\n            frappe.throw(_(\"Cannot change currency of an account that has existing GL Entries\"))\n        else:\n            self.explicit_currency = 1\n            self.db_update()\n\n    if self.explicit_currency:\n        if self.account_currency != self.company_currency:\n            frappe.throw(_(\"Cannot change currency of an account that has existing GL Entries\"))\n\n", "CodeBleu_score": 38.15825379952169}, {"code": "def validate_account_currency(self)\n\t\n    if self.account_currency:\n        if self.account_currency == self.company_currency:\n            self.explicit_currency = 1\n        else:\n            self.explicit_currency = 1\n            self.currency = self.account_currency\n    else:\n        self.currency = self.company_currency\n\n", "CodeBleu_score": 15.654570850046415}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        entry.get\n        merged_entries.setdefault\n        merged_entries.setdefault\n        merged_entries.setdefault\n    return merged_entries\n\n", "CodeBleu_score": 11.417729134349894}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    # Create a dictionary to merge entries.\n    merged_entries = {}\n\n    # Iterate through each entry.\n    for entry in entries:\n        # Generate a unique key for each entry.\n        entry_key = generate_key(entry, accounting_dimensions)\n\n        # Set the entry key as the key for the merged_entries dictionary.\n        merged_entries.setdefault(entry_key, entry)\n\n        # Update the debit, credit, and their respective amounts in account currency.\n        merged_entries[entry_key]['debit'] += entry['debit']\n        merged_entries[entry_key]['credit'] += entry['credit']\n        merged_entries[entry_key]['debit_in_account_currency'] += entry['debit_in_account_currency']\n        merged_entries[entry_key]['credit_in_account_currency'] += entry['credit_in_account_currency']\n\n    return merged_entries\n\n", "CodeBleu_score": 37.18600688997152}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        entry_key = generate_key(entry, accounting_dimensions)\n        if entry_key in merged_entries:\n            merged_entries[entry_key].setdefault('debit', 0)\n            merged_entries[entry_key].setdefault('credit', 0)\n            merged_entries[entry_key].setdefault('amount', 0)\n            merged_entries[entry_key].setdefault('amount_in_account_currency', 0)\n            merged_entries[entry_key]['debit'] += entry['debit']\n            merged_entries[entry_key]['credit'] += entry['credit']\n            merged_entries[entry_key]['amount'] += entry['amount']\n            merged_entries[entry_key]['amount_in_account_currency'] += entry['amount_in_account_currency']\n        else:\n            merged_entries[entry_key] = entry\n    return merged_entries\n\n", "CodeBleu_score": 32.007805737273635}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t\n\n    # If the transaction is a supplier payment, the supplier is identified by the supplier field.\n    if self.doctype == \"Payment Entry\" and self.payment_type == \"Receive\":\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n\n    # If the transaction is a buying invoice, the supplier is identified by the supplier field of the item table.\n    elif self.doctype == \"Purchase Invoice\":\n        supplier = frappe.get_doc(\"Supplier\", self.items[0].supplier)\n\n    # If the supplier is on hold and the hold type matches the transaction type, it verifies the release date. If the supplier is still blocked, it raises an exception and displays a message indicating that the transaction cannot proceed.\n    if supplier.on_hold and supplier.hold_type == self.doctype:\n        if supplier.hold_date > nowdate():\n            frappe.throw(\n                _(\"Supplier {0} is on hold. Please check the release date.\").format(\n                    supplier.name\n                )\n            )\n\n", "CodeBleu_score": 30.61087650627856}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype == 'Supplier Payment':\n        supplier = frappe.get_doc('Supplier', self.supplier)\n    elif self.doctype == 'Purchase Invoice':\n        supplier = frappe.get_doc('Supplier', self.supplier)\n    else:\n        frappe.throw(_('Please select a valid transaction type.'))\n\n    if supplier.on_hold and self.doctype == supplier.hold_type:\n        if supplier.hold_date < nowdate():\n            frappe.throw(_('The supplier is still on hold. Please contact the supplier to release the hold.'))\n\n", "CodeBleu_score": 26.114370274285235}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype == \"Supplier Payment\":\n        supplier_name = frappe.get_doc(\"Supplier Payment\", self.name).supplier_name\n    elif self.doctype == \"Purchase Invoice\":\n        supplier_name = frappe.get_doc(\"Purchase Invoice\", self.name).supplier_name\n    else:\n        frappe.throw(\"This function is only applicable for Supplier Payment and Purchase Invoice transactions.\")\n\n    supplier_doc = frappe.get_doc(\"Supplier\", supplier_name)\n\n    if supplier_doc.blocked_by == \"Supplier Hold\" and self.doctype == \"Supplier Payment\":\n        if supplier_doc.hold_type == \"Payment\":\n            if supplier_doc.hold_release_date < nowdate():\n                frappe.throw(\"Supplier is on hold and cannot be paid until {0}\".format(supplier_doc.hold_release_date))\n        elif supplier_doc.hold_type == \"Invoice\":\n            if supplier_doc.hold_release_date < nowdate():\n                frappe.throw(\"Supplier is on hold and cannot be paid until {0}\".format(supplier_doc.hold_release_date))\n\n    elif supplier_doc.blocked_by == \"Supplier Hold\" and self.doctype == \"Purchase Invoice\":\n        if supplier_doc.hold_type == \"Payment\":\n            if supplier_doc.hold_release_date < nowdate():\n                frappe.throw(\"Supplier is on hold and cannot be paid until {0}\".format(supplier_doc.hold_release_date))\n        elif supplier_doc.hold_type == \"Invoice\":\n            if supplier_doc.hold_release_date < nowdate():\n                frappe.throw(\"Supplier is on hold and cannot be paid until {0}\".format(supplier_doc.hold_release_date))\n\n    elif supplier_doc.blocked_by == \"Supplier Hold\" and self.doctype == \"Purchase Order\":\n        if supplier_doc.hold_type == \"Pay", "CodeBleu_score": 31.231509882480502}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = [\"GL Entry\", \"Stock Ledger Entry\", \"Stock Reconciliation\"]\n    references_map = frappe._dict()\n    for doctype in repost_doctypes:\n        for row in frappe.get_all(doctype, fields=[\"voucher_type\", \"voucher_no\", \"repost_vouchers\", \"vouchers\"]):\n            if row.voucher_type == self.doctype and row.voucher_no == self.name:\n                if row.repost_vouchers:\n                    references_map.setdefault(doctype, []).append(row)\n                elif row.vouchers:\n                    references_map.setdefault(doctype, []).append(row)\n    for doctype, rows in references_map.items():\n        for row in rows:\n            if row.repost_vouchers:\n                repost_doc = frappe.get_doc(doctype, row.name)\n                repost_doc.repost_vouchers = [\n                    voucher for voucher in repost_doc.repost_vouchers if voucher != self.name\n                ]\n            elif row.vouchers:\n                repost_doc = frappe.get_doc(doctype, row.name)\n                repost_doc.vouchers = [voucher for voucher in repost_doc.vouchers if voucher != self.name]\n            repost_doc.flags.ignore_validate_links = True\n            repost_doc.flags.ignore_links = True\n            repost_doc.save()\n\n", "CodeBleu_score": 30.38084976605061}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = [\n        \"GL Entry\",\n        \"Payment Entry\",\n        \"Journal Entry\",\n        \"Stock Entry\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Receipt\",\n        \"Sales Invoice\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Purchase Invoice\",\n        \"", "CodeBleu_score": 3.8000822140993122}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    if self.doctype == \"GL Entry\":\n        repost_doctypes = [\"GL Entry Repost\"]\n    elif self.doctype == \"Journal Entry\":\n        repost_doctypes = [\"Journal Entry Repost\"]\n    elif self.doctype == \"Payment Entry\":\n        repost_doctypes = [\"Payment Entry Repost\", \"Journal Entry Repost\"]\n    elif self.doctype == \"Sales Invoice\":\n        repost_doctypes = [\"Sales Invoice Repost\", \"Payment Entry Repost\", \"Journal Entry Repost\"]\n    elif self.doctype == \"Purchase Invoice\":\n        repost_doctypes = [\"Purchase Invoice Repost\", \"Payment Entry Repost\", \"Journal Entry Repost\"]\n    elif self.doctype == \"Purchase Receipt\":\n        repost_doctypes = [\"Purchase Receipt Repost\", \"Payment Entry Repost\", \"Journal Entry Repost\"]\n    elif self.doctype == \"Sales Invoice\":\n        repost_doctypes = [\"Sales Invoice Repost\", \"Payment Entry Repost\", \"Journal Entry Repost\"]\n    elif self.doctype == \"Purchase Invoice\":\n        repost_doctypes = [\"Purchase Invoice Repost\", \"Payment Entry Repost\", \"Journal Entry Repost\"]\n    elif self.doctype == \"Purchase Receipt\":\n        repost_doctypes = [\"Purchase Receipt Repost\", \"Payment Entry Repost\", \"Journal Entry Repost\"]\n    elif self.doctype == \"Sales Invoice\":\n        repost_doctypes = [\"Sales Invoice Repost\", \"Payment Entry Repost\", \"Journal Entry Repost\"]\n    elif self.doctype == \"Purchase Invoice\":\n        repost_doctypes = [\"Purchase Invoice Repost\", \"Payment Entry Repost\", \"Journal Entry Repost\"]\n    elif self.doctype == \"Purchase Receipt\":\n        repost_doctypes = [\"Purchase Receipt Repost\", \"Payment Entry Repost\", \"Journal Entry Repost\"]\n    elif", "CodeBleu_score": 14.822180290536387}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n\n    # Authenticate client\n    self.auth()\n\n    # Construct query parameters\n    params = {\n        'start_date': start_date,\n        'end_date': end_date\n    }\n    if account_id:\n        params['account_id'] = account_id\n\n    # Fetch transactions\n    transactions = []\n    while True:\n        # Get transactions\n        try:\n            response = self.client.get_transactions(params)\n            transactions.extend(response.body['transactions'])\n        except frappe.ValidationError as e:\n            frappe.log_error(e, 'ValidationError')\n            return transactions\n        except frappe.PermissionError as e:\n            frappe.log_error(e, 'PermissionError')\n            return transactions\n        except frappe.DoesNotExistError as e:\n            frappe.log_error(e, 'DoesNotExistError')\n            return transactions\n        except frappe.NotAllowedError as e:\n            frappe.log_error(e, 'NotAllowedError')\n            return transactions\n        except frappe.IntegrityError as e:\n            frappe.log_error(e, 'IntegrityError')\n            return transactions\n        except frappe.InvalidTransactionError as e:\n            frappe.log_error(e, 'InvalidTransactionError')\n            return transactions\n        except frappe.NotFoundError as e:\n            frappe.log_error(e, 'NotFoundError')\n            return transactions\n        except frappe.NotEnoughBalanceError as e:\n            frappe.log_error(e, 'NotEnoughBalanceError')\n            return transactions\n        except frappe.NotEnoughCreditError as e:\n            frappe.log_error(e, 'NotEnoughCreditError')\n            return transactions\n        except frappe.NotEnoughFundsError as e:\n            frappe.log_error(e, 'NotEnoughFundsError')\n            return transactions\n        except frappe.NotEnoughLimitsError as e:\n            frappe.log_error(e, 'NotEnoughLimitsError')\n            return transactions\n        except frappe.NotEn", "CodeBleu_score": 21.97304814815661}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        # Authenticate client\n        self.auth()\n        # Construct query parameters\n        query_params = self.get_query_params(start_date, end_date, account_id)\n        # Fetch transactions\n        transactions = self.get_transactions(query_params)\n        # Continue fetching until all transactions are retrieved\n        while len(transactions) < query_params[\"count\"]:\n            # Increment page number\n            query_params[\"page\"] += 1\n            # Fetch transactions\n            transactions.extend(self.get_transactions(query_params))\n        return transactions\n    except frappe.PermissionError:\n        frappe.log_error(title=\"Plaid Permission Error\", message=frappe._(\"You do not have permission to use Plaid.\"))\n        raise\n    except requests.exceptions.HTTPError as e:\n        frappe.log_error(title=\"Plaid HTTP Error\", message=frappe._(\"Plaid returned an HTTP error.\"))\n        raise\n    except requests.exceptions.RequestException as e:\n        frappe.log_error(title=\"Plaid Request Error\", message=frappe._(\"Plaid returned a request error.\"))\n        raise\n    except Exception as e:\n        frappe.log_error(title=\"Plaid Unknown Error\", message=frappe._(\"Plaid returned an unknown error.\"))\n        raise\n\n", "CodeBleu_score": 31.625274827303794}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    # Authenticate the client\n    self.auth()\n\n    # Construct the query parameters\n    params = {\n        'start_date': start_date,\n        'end_date': end_date\n    }\n\n    if account_id:\n        params['account_id'] = account_id\n\n    # Fetch the transactions\n    transactions = []\n    while True:\n        try:\n            # Make the API call\n            response = self.client.transactions.get(params=params)\n\n            # Check if there are more transactions to retrieve\n            if len(response.data) < response.total:\n                # If not, break the loop\n                break\n\n            # Add the transactions to the list\n            transactions.extend(response.data)\n\n            # Update the query parameters for the next request\n            params['start_date'] = response.data[-1]['date']\n\n        except frappe.exceptions.ValidationError as e:\n            # Handle specific errors\n            if e.http_status_code == 400 and 'start_date' in e.exc.args[0]:\n                # If the start date is invalid, raise a custom error\n                frappe.throw(_('The start date is invalid.'))\n            else:\n                # Otherwise, raise the exception\n                raise\n        except Exception as e:\n            # Log any other exceptions\n            frappe.log_error(e, 'Error getting transactions')\n            # Break the loop\n            break\n\n    return transactions\n\n", "CodeBleu_score": 32.62557036362384}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t\n    try:\n        response = json.loads(response)\n        institution = response['institution']\n        name = institution['name']\n        routing_number = institution['routing_number']\n        if not frappe.db.exists('Bank', name):\n            access_token = PlaidConnector.get_access_token(token)\n            bank = frappe.get_doc({\n                'doctype': 'Bank',\n                'name': name,\n                'routing_number': routing_number,\n                'access_token': access_token\n            })\n            bank.insert()\n            frappe.log_error(message=f\"Added bank {name} with routing number {routing_number}.\")\n        else:\n            bank = frappe.get_doc('Bank', name)\n            bank.access_token = PlaidConnector.get_access_token(token)\n            bank.save()\n            frappe.log_error(message=f\"Updated bank {name} with routing number {routing_number}.\")\n    except Exception as e:\n        frappe.log_error(message=f\"Failed to add bank {name} with routing number {routing_number}. {e}\")\n\n", "CodeBleu_score": 41.76826253836159}, {"code": "def add_institution(token, response)\n\t\n    try:\n        response = json.loads(response)\n        bank = frappe.get_doc(\"Bank\", {\"institution_id\": response[\"institution_id\"]})\n        if bank:\n            bank.access_token = token\n            bank.save()\n            frappe.log_error(\"Bank with institution_id {} already exists.\".format(response[\"institution_id\"]), \"Bank\")\n        else:\n            access_token = PlaidConnector.get_access_token(token)\n            if access_token:\n                bank = frappe.get_doc({\n                    \"doctype\": \"Bank\",\n                    \"institution_id\": response[\"institution_id\"],\n                    \"access_token\": access_token,\n                    \"institution_name\": response[\"institution_name\"],\n                    \"country\": response[\"country_code\"],\n                    \"routing_number\": response[\"routing_numbers\"][0],\n                    \"account_number\": response[\"accounts\"][0][\"account_id\"],\n                    \"account_type\": response[\"accounts\"][0][\"type\"],\n                    \"account_holder_name\": response[\"accounts\"][0][\"official_name\"],\n                    \"account_holder_type\": response[\"accounts\"][0][\"official_name\"].split()[1],\n                    \"account_balance\": response[\"accounts\"][0][\"balances\"][\"available\"],\n                    \"account_currency\": response[\"accounts\"][0][\"balances\"][\"currency\"],\n                    \"account_limit\": response[\"accounts\"][0][\"balances\"][\"limit\"],\n                    \"account_limit_currency\": response[\"accounts\"][0][\"balances\"][\"limit_currency\"]\n                })\n                bank.insert()\n                frappe.log_error(\"Added bank with institution_id {}.\".format(response[\"institution_id\"]), \"Bank\")\n            else:\n                frappe.log_error(\"Could not get access token for institution_id {}.\".format(response[\"institution_id\"]), \"Bank\")\n    except Exception as e:\n        frappe.log_error(e", "CodeBleu_score": 35.09422593440349}, {"code": "def add_institution(token, response)\n\t\n    try:\n        response = json.loads(response)\n        access_token = PlaidConnector.get_access_token(token)\n        bank_name = response[\"institution\"][\"name\"]\n        bank_id = response[\"institution\"][\"institution_id\"]\n        if not exists(bank_name):\n            bank = frappe.get_doc({\n                \"doctype\": \"Bank\",\n                \"bank_name\": bank_name,\n                \"bank_id\": bank_id,\n                \"access_token\": access_token,\n                \"enabled\": 1\n            })\n            bank.insert()\n            frappe.log_error(\"Created new bank record for \" + bank_name)\n        else:\n            bank = frappe.get_doc(\"Bank\", bank_name)\n            bank.access_token = access_token\n            bank.save()\n            frappe.log_error(\"Updated access token for \" + bank_name)\n    except Exception as e:\n        frappe.log_error(e)\n\n", "CodeBleu_score": 46.70876434359496}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t\n    last_integration_date = frappe.get_value(\"Bank Integration\", {\"bank\": bank, \"bank_account\": bank_account}, \"last_integration_date\")\n    if last_integration_date:\n        start_date = add_months(last_integration_date, 1)\n        end_date = today()\n        transactions = get_transactions(bank, bank_account, start_date, end_date)\n        if transactions:\n            new_transactions = process_transactions(transactions)\n            if new_transactions:\n                update_last_integration_date(bank, bank_account, new_transactions[0].posting_date)\n                frappe.log_error(msg=\"Added {0} new transactions\".format(len(new_transactions)), title=\"Bank Integration\")\n            else:\n                frappe.log_error(msg=\"No new transactions found\", title=\"Bank Integration\")\n        else:\n            frappe.log_error(msg=\"No transactions found\", title=\"Bank Integration\")\n    else:\n        frappe.log_error(msg=\"No last integration date found\", title=\"Bank Integration\")\n\n", "CodeBleu_score": 28.949762234234072}, {"code": "def sync_transactions(bank, bank_account)\n\t\n\n    # get last integration date\n    last_integration_date = frappe.get_value(\"Bank Integration\", bank, \"last_integration_date\")\n    if not last_integration_date:\n        last_integration_date = add_months(today(), -1)\n\n    # determine start and end dates\n    start_date = last_integration_date\n    end_date = today()\n\n    # fetch transactions\n    try:\n        transactions = get_transactions(bank, bank_account, start_date, end_date)\n    except:\n        frappe.log_error(frappe.get_traceback())\n        return\n\n    # process transactions\n    new_transactions = []\n    for transaction in transactions:\n        if not frappe.db.exists(\"Bank Transaction\", {\"bank_account\": bank_account, \"transaction_date\": transaction.transaction_date, \"transaction_id\": transaction.transaction_id}):\n            new_transactions.append(process_transaction(transaction))\n\n    # update last integration date\n    if transactions:\n        last_integration_date = min(transactions, key=lambda t: t.transaction_date).transaction_date\n        set_value(\"Bank Integration\", bank, \"last_integration_date\", last_integration_date)\n\n    # log number of new transactions\n    info(f\"Added {len(new_transactions)} new transactions for {bank} {bank_account}\")\n\n", "CodeBleu_score": 38.341195383558336}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    # TODO: Add docstring\n    # TODO: Add logging\n    # TODO: Add exception handling\n    # TODO: Add unit tests\n    # TODO: Add integration date to bank account\n    # TODO: Add transaction to bank account\n    # TODO: Add bank transaction\n    # TODO: Add bank transaction to bank account\n    # TODO: Add bank transaction to bank account\n    # TODO: Add bank transaction\n    # TODO: Add bank transaction to bank account\n    # TODO: Add bank transaction\n    # TODO: Add bank transaction to bank account\n    # TODO: Add bank transaction\n    # TODO: Add bank transaction to bank account\n    # TODO: Add bank transaction\n    # TODO: Add bank transaction to bank account\n    # TODO: Add bank transaction\n    # TODO: Add bank transaction to bank account\n    # TODO: Add bank transaction\n    # TODO: Add bank transaction to bank account\n    # TODO: Add bank transaction\n    # TODO: Add bank transaction to bank account\n    # TODO: Add bank transaction\n    # TODO: Add bank transaction to bank account\n    # TODO: Add bank transaction\n    # TODO: Add bank transaction to bank account\n    # TODO: Add bank transaction\n    # TODO: Add bank transaction to bank account\n    # TODO: Add bank transaction\n    # TODO: Add bank transaction to bank account\n    # TODO: Add bank transaction\n    # TODO: Add bank transaction to bank account\n    # TODO: Add bank transaction\n    # TODO: Add bank transaction to bank account\n    # TODO: Add bank transaction\n    # TODO: Add bank transaction to bank account\n    # TODO: Add bank transaction\n    # TODO: Add bank transaction to bank account\n    # TODO: Add bank transaction\n    # TODO: Add bank transaction to bank account\n    # TODO: Add bank transaction\n    # TODO: Add bank transaction to bank account\n    # TODO: Add bank transaction\n    # TODO: Add bank transaction to bank account\n    # TODO: Add bank transaction\n    # TODO: Add bank transaction to bank account\n    # TODO: Add bank transaction\n    # TODO: Add bank transaction to bank account\n    # TODO: Add bank transaction\n    # TODO: Add bank transaction to bank account\n    # TODO: Add bank transaction\n    # TODO: Add bank transaction to bank account\n    # TODO: Add bank transaction\n    # TODO", "CodeBleu_score": 0.7075471698113208}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t\n\n    # Construct the query URI.\n    query_uri = self._build_query_uri(entity)\n\n    # Determine the total number of entries.\n    response = self._get(query_uri)\n    total = int(response.headers['X-Total-Count'])\n\n    # Retrieve entries in batches of 1000.\n    entries = []\n    for i in range(0, total, 1000):\n        response = self._get(query_uri + '?startPosition={0}'.format(i))\n        entries.extend(self._preprocess_entries(response.json))\n        self._save_entries(entity, entries)\n        entries = []\n\n    # Log any exceptions encountered during the process.\n    if response.status_code != 200:\n        self._log_error(response.text)\n\n", "CodeBleu_score": 20.706414229650893}, {"code": "def _migrate_entries(self, entity)\n\t\n\n    # Construct the query URI\n    query_uri = \"https://quickbooks.api.intuit.com/v3/company/{0}/query?query=select * from {1} startposition 1 maxresults 1000\".format(self.company_id, entity)\n\n    # Determine the total number of entries\n    response = requests.get(query_uri, headers=self.headers)\n    response.raise_for_status()\n    total = int(response.json()['totalCount'])\n\n    # Retrieve entries in batches of 1000\n    entries = []\n    for i in range(0, total, 1000):\n        response = requests.get(query_uri + \" startposition {0} maxresults 1000\".format(i), headers=self.headers)\n        response.raise_for_status()\n        entries.extend(response.json()['QueryResponse'][entity]['", "CodeBleu_score": 31.87315438643147}, {"code": "def _migrate_entries(self, entity)\n\t\n\n    # Construct a query URI\n    query_uri = self.base_uri + entity + '?minorversion=44'\n\n    # Determine the total number of entries\n    response = requests.get(query_uri, headers=self.headers)\n    if response.status_code != 200:\n        self._log_error('Error: Unable to determine the total number of entries for ' + entity + '. Response status code: ' + str(response.status_code) + '. Response text: ' + response.text)\n        return\n    response_json = response.json()\n    total_count = response_json['QueryResponse']['totalCount']\n\n    # Retrieve entries in batches of 1000\n    batch_size = 1000\n    batch_count = math.ceil(total_count / batch_size)\n    for batch_num in range(batch_count):\n        response = requests.get(query_uri + '&page=' + str(batch_num + 1), headers=self.headers)\n        if response.status_code != 200:\n            self._log_error('Error: Unable to retrieve entries for ' + entity + '. Response status code: ' + str(response.status_code) + '. Response text: ' + response.text)\n            return\n        response_json = response.json()\n        entries = response_json['QueryResponse']['entities']\n        self._preprocess_entries(entity, entries)\n\n    # Save entries\n    self._save_entries(entity)\n\n", "CodeBleu_score": 32.80039367456856}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\t\n    if invoice.type == \"SalesInvoice\":\n        self._save_sales_invoice(invoice)\n    elif invoice.type == \"JournalEntry\":\n        self._save_invoice_as_journal_entry(invoice)\n\n", "CodeBleu_score": 21.566862175201017}, {"code": "def _save_invoice(self, invoice)\n\t\n    if invoice.type == \"SalesInvoice\":\n        self._save_sales_invoice(invoice)\n    elif invoice.type == \"JournalEntry\":\n        self._save_invoice_as_journal_entry(invoice)\n    else:\n        raise Exception(\"Invoice type not recognized.\")\n\n", "CodeBleu_score": 24.017898086655354}, {"code": "def _save_invoice(self, invoice)\n\t\n    if invoice.type == \"sales\":\n        self._save_sales_invoice(invoice)\n    else:\n        self._save_invoice_as_journal_entry(invoice)\n\n", "CodeBleu_score": 16.802780012995434}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    interval = int(no_of_visit)\n    start_date = getdate(start_date)\n    end_date = getdate(end_date)\n    for i in range(start_date, end_date, interval):\n        if self.validate_schedule_date_for_holiday_list(i):\n            schedule_list.append(i)\n    return schedule_list\n\n", "CodeBleu_score": 18.273811684033976}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    # The interval between visits\n    interval = 7\n    # The list of schedule dates\n    schedule_list = []\n    # The start date of the visit\n    start_date = getdate(start_date)\n    # The end date of the visit\n    end_date = getdate(end_date)\n    # The number of visits\n    no_of_visit = cint(no_of_visit)\n    # The salesperson\n    sales_person = sales_person\n    # The date of the first visit\n    visit_date = start_date\n    # The number of visits to be made\n    visit_count = 0\n    # The number of visits made\n    visit_made = 0\n    # The number of visits to be made\n    visit_made_today = 0\n    # The number of visits made today\n    visit_made_today_count = 0\n    # The number of visits made today\n    visit_made_today_count_today = 0\n    # The number of visits made today\n    visit_made_today_count_today_today = 0\n    # The number of visits made today\n    visit_made_today_count_today_today_today = 0\n    # The number of visits made today\n    visit_made_today_count_today_today_today_today = 0\n    # The number of visits made today\n    visit_made_today_count_today_today_today_today_today = 0\n    # The number of visits made today\n    visit_made_today_count_today_today_today_today_today_today = 0\n    # The number of visits made today\n    visit_made_today_count_today_today_today_today_today_today_today = 0\n    # The number of visits made today\n    visit_made_today_count_today_today_today_today_today_today_today_today = 0\n    # The number of visits made today\n    visit_made_today_count_today_today_today_today_today_today_today_today_today = 0\n    # The number of visits made today\n   ", "CodeBleu_score": 24.717117561310577}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\n    # Initialise the schedule list\n    schedule_list = []\n\n    # Create a list of dates between start and end date\n    date_list = []\n    for date in range(getdate(start_date), getdate(end_date) + 1):\n        date_list.append(date)\n\n    # Calculate the interval between visits\n    interval = (len(date_list) - 1) / no_of_visit\n\n    # Iterate through the list of dates to create the schedule\n    for i in range(no_of_visit):\n        for j in range(int(interval)):\n            schedule_list.append(date_list[i * int(interval) + j])\n\n    # Adjust the schedule dates to avoid holidays\n    for i in range(len(schedule_list)):\n        schedule_list[i] = self.validate_schedule_date_for_holiday_list(schedule_list[i], sales_person)\n\n    return schedule_list\n\n", "CodeBleu_score": 35.48446334432251}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\t        $method = request()->getMethod();\n        $url = route('admin.bulk-action', [\n            'handle' => $this->handle,\n            'action' => $this->action,\n            'selected' => $this->getSelectedInput(request()),\n        ]);\n        $html = view('components.index.bulkaction.modal', [\n            'url' => $url,\n            'handle' => $this->handle,\n            'selected' => $this->getSelectedInput(request()),\n            'html' => view($view, $data)->render(),\n        ])->render();\n\n        return response()->json([\n            'success' => true,\n            'message' => $this->findTranslation('success', $this->handle),\n            'data' => [\n                'title' => $this->findTranslation('title', $this->handle),\n                'path' => $url,\n                'handle' => $this->handle,\n                'html' => $html,\n            ],\n        ]);\n    }", "CodeBleu_score": 60.47164150253496}, {"code": "<?\n   public function response($view, $data = []){\n\t        $url = route('admin.bulk-action.index', [\n            'resource' => request()->get('resource'),\n            'handle' => request()->get('handle'),\n        ]);\n\n        $handle = $this->findTranslation($view);\n\n        return response()->json([\n            'success' => true,\n            'message' => __('adminhub::responses.bulk_action_success'),\n            'data' => [\n                'title' => __('adminhub::responses.bulk_action_title', ['handle' => $handle]),\n                'path' => $url,\n                'handle' => $handle,\n                'html' => view('components.index.bulkaction.modal', [\n                    'url' => $url,\n                    'handle' => $handle,\n                    'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n                    'html' => view($view, $data)->render(),\n                ])->render(),\n            ],\n        ]);\n    }", "CodeBleu_score": 55.51402814063413}, {"code": "<?\n   public function response($view, $data = []){\n\t        $url = route('admin.bulk-action', $this->handle);\n        $handle = $this->handle;\n        $selected = $data['selected'] ?? $this->getSelectedInput(request());\n        $html = view($view, $data)->render();\n\n        return response()->json([\n            'success' => true,\n            'message' => trans('admin::app.datagrid.bulk-action-success', ['action' => trans('admin::app.datagrid.'.$this->handle)]),\n            'data' => [\n                'title' => trans('admin::app.datagrid.'.$this->handle),\n                'path' => $url,\n                'handle' => $handle,\n                'html' => $html,\n            ],\n        ]);\n    }", "CodeBleu_score": 51.87454000360891}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t    $contacts = $request->get('contacts');\n\n    foreach ($contacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 75.56915948386768}, {"code": "<?\npublic function deleteContacts($request){\n\t    $contacts = $request->get('contacts');\n    $deleted = 0;\n    foreach($contacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n            $deleted++;\n        } catch (Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n    flash('Successfully deleted ' . $deleted . ' contact' . ($deleted == 1 ? '' : 's') . '.');\n    return redirect()->back();\n}", "CodeBleu_score": 54.1093373302894}, {"code": "<?\npublic function deleteContacts($request){\n\t    $contacts = $request->get('contacts');\n    $deleted = 0;\n    foreach($contacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n            $deleted++;\n        } catch(Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n    flash('Deleted ' . $deleted . ' contacts')->success();\n    return redirect()->back();\n}", "CodeBleu_score": 54.59500914145333}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getSelectedRecords($request);\n    foreach ($transactions as $transaction) {\n        try {\n            $this->dispatch(new DeleteTransaction($transaction));\n        } catch (Exception $e) {\n            flash($e->getMessage())->error()->important();\n            return;\n        }\n    }\n    flash('Selected transactions have been deleted.')->success();\n}", "CodeBleu_score": 63.963864550587445}, {"code": "<?\npublic function deleteTransactions($request){\n\t\n    // Retrieve the transactions to be deleted\n    $transactions = $this->getSelectedRecords($request);\n\n    // Delete each transaction\n    foreach ($transactions as $transaction) {\n        try {\n            $this->dispatch(new DeleteTransaction($transaction));\n        } catch (Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n\n    // Redirect to the transactions index\n    return redirect()->route('transactions.index');\n}", "CodeBleu_score": 68.19077914073152}, {"code": "<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getSelectedRecords($request);\n\n    foreach ($transactions as $transaction) {\n        try {\n            $this->dispatch(new DeleteTransactionJob($transaction));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n\n    return redirect()->back();\n}", "CodeBleu_score": 72.07699081642886}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\t    if (! $validator instanceof Validator) {\n        return $validator;\n    }\n\n    $this->prepareRules($validator);\n\n    try {\n        $validator->validate();\n    } catch (ValidationException $e) {\n        $this->addFailuresFrom($e->validator);\n\n        throw $e;\n    }\n\n    return $validator;\n}", "CodeBleu_score": 20.866258024842594}, {"code": "<?\npublic function withValidator($validator){\n\t    if (! $this->container->bound(static::class)) {\n        return $validator;\n    }\n\n    $validator->setData($this->validationData());\n\n    $this->prepareRules($validator);\n\n    if ($validator->fails()) {\n        $this->failedValidation($validator);\n    }\n\n    return $validator;\n}", "CodeBleu_score": 18.06706935059072}, {"code": "<?\npublic function withValidator($validator){\n\t    if (! $validator instanceof Validator) {\n        return $validator;\n    }\n\n    $validator->setContainer($this->container);\n\n    $validator->after(function ($validator) {\n        if (! $validator->errors()->isEmpty()) {\n            $this->container->instance('validator', $validator);\n\n            $this->failedValidation($validator);\n        }\n    });\n\n    $this->runValidator($validator);\n\n    return $validator;\n}", "CodeBleu_score": 21.593529398038754}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    $this->setModel($arguments[0] ?? null);\n    $this->setRequest($arguments[1] ?? null);\n    if ($this instanceof ShouldUpdate) {\n        $this->update();\n    }\n}", "CodeBleu_score": 21.830065677515975}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    if ($this instanceof ShouldUpdate) {\n        if ($arguments[0] instanceof Model) {\n            $this->setModel($arguments[0]);\n        }\n        if ($arguments[1] instanceof Request) {\n            $this->setRequest($arguments[1]);\n        }\n        $this->update();\n    }\n}", "CodeBleu_score": 39.119825968946444}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    if ($this instanceof ShouldUpdate) {\n        if (isset($arguments[0]) && $arguments[0] instanceof Model) {\n            $this->setModel($arguments[0]);\n        }\n        if (isset($arguments[1]) && $arguments[1] instanceof Request) {\n            $this->setRequestInstance($arguments[1]);\n        }\n        $this->update();\n    }\n}", "CodeBleu_score": 33.48999999657555}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t     $query = $query->usingSearchString($query, $sort);\n     $query = $query->sortable();\n     $query = $query->paginate($this->getPaginationLimit($query));\n     $query = $query->get();\n     $query = $this->isNotApi($query);\n     $query = $this->get($query);\n     $query = $this->merge($query);\n     $query = $this->expectsJson($query);\n     $query = $this->usingSearchString($query, $sort);\n     $query = $this->get($query);\n     $query = $this->sortable($query);\n     $query = $this->paginate($query);\n     return $query;\n }", "CodeBleu_score": 38.61212665130509}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t    $query->usingSearchString()->sortable($sort);\n\n    if ($request->expectsJson() && ! $request->isNotApi()) {\n        return $query->get();\n    }\n\n    $limit = $request->get('limit', config('settings.pagination.limit'));\n\n    return $query->paginate($limit);\n}", "CodeBleu_score": 46.18245595386293}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t    $query->usingSearchString()->sortable($sort);\n    return $query->when($this->request->expectsJson() && !$this->request->isNotApi(), function ($query) {\n        return $query->get();\n    })->when(!$this->request->expectsJson() && !$this->request->isNotApi(), function ($query) {\n        return $query->paginate($this->request->get('limit', $this->defaultLimit));\n    });\n}", "CodeBleu_score": 34.454794308341654}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t    $open = 0;\n    $overdue = 0;\n    $document_status = $model->getStatus();\n    if ($document_status == 'paid') {\n        $open = 0;\n        $overdue = 0;\n    } elseif ($document_status == 'partial') {\n        $open = $model->getTotal() - $model->getPaymentTotal();\n        $overdue = 0;\n    } else {\n        $open = $model->getTotal();\n        $overdue = 0;\n        $transactions = $model->getTransactions();\n        foreach ($transactions as $transaction) {\n            if ($transaction->getType() == 'payment') {\n                $open -= $transaction->getAmountConvertedToDefault();\n                $overdue = 0;\n            } elseif ($transaction->getType() == 'receipt') {\n                $open -= $transaction->getAmountConvertedToDefault();\n                $overdue = 0;\n            } elseif ($transaction->getType() == 'expense') {\n                $open -= $transaction->getAmountConvertedToDefault();\n                $overdue = 0;\n            } elseif ($transaction->getType() == 'deposit') {\n                $open -= $transaction->getAmountConvertedToDefault();\n                $overdue = 0;\n            } elseif ($transaction->getType() == 'withdrawal') {\n                $open -= $transaction->getAmountConvertedToDefault();\n                $overdue = 0;\n            } elseif ($transaction->getType() == 'transfer') {\n                $open -= $transaction->getAmountConvertedToDefault();\n                $overdue = 0;\n            } elseif ($transaction->getType() == 'exchange') {\n                $open -= $transaction->getAmountConvertedToDefault();\n                $overdue = 0;\n            } elseif ($transaction->getType() == 'adjustment') {\n                $open -= $transaction->getAmountConvertedToDefault();\n                $overdue = 0;\n            } elseif ($transaction->getType() == 'refund') {\n                $open -= $transaction->getAmountConvertedToDefault();\n               ", "CodeBleu_score": 29.949259140518965}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t    $openAmount = 0;\n    $overdueAmount = 0;\n\n    if ($model->status == 'paid') {\n        $openAmount = 0;\n        $overdueAmount = 0;\n    } elseif ($model->status == 'partial') {\n        $openAmount = $model->getAmountConvertedToDefault();\n        $overdueAmount = $model->getAmountConvertedToDefault();\n\n        $transactions = $model->transactions()->get();\n        foreach ($transactions as $transaction) {\n            $openAmount -= $transaction->getAmountConvertedToDefault();\n            $overdueAmount -= $transaction->getAmountConvertedToDefault();\n        }\n    } else {\n        $openAmount = $model->getAmountConvertedToDefault();\n        $overdueAmount = $model->getAmountConvertedToDefault();\n    }\n\n    if ($model->due_date < Date::today()->toDateString()) {\n        $overdueAmount = $openAmount;\n        $openAmount = 0;\n    }\n\n    return [\n        'open' => $openAmount,\n        'overdue' => $overdueAmount\n    ];\n}", "CodeBleu_score": 44.86229966350066}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t    $openAmount = 0;\n    $overdueAmount = 0;\n    $totalAmount = 0;\n    $currency = $model->currency;\n    $defaultCurrency = $this->defaultCurrency;\n    $defaultCurrencyId = $defaultCurrency->id;\n    $currencyId = $currency->id;\n    $currencyRate = $currency->rate;\n    $defaultCurrencyRate = $defaultCurrency->rate;\n    $currencySymbol = $currency->symbol;\n    $defaultCurrencySymbol = $defaultCurrency->symbol;\n    $currencyCode = $currency->code;\n    $defaultCurrencyCode = $defaultCurrency->code;\n    $currencyDecimalPlaces = $currency->decimal_places;\n    $defaultCurrencyDecimalPlaces = $defaultCurrency->decimal_places;\n    $currencySymbolPosition = $currency->symbol_position;\n    $defaultCurrencySymbolPosition = $defaultCurrency->symbol_position;\n    $currencyThousandsSeparator = $currency->thousands_separator;\n    $defaultCurrencyThousandsSeparator = $defaultCurrency->thousands_separator;\n    $currencyDecimalSeparator = $currency->decimal_separator;\n    $defaultCurrencyDecimalSeparator = $defaultCurrency->decimal_separator;\n    $currencyFormat = $currency->format;\n    $defaultCurrencyFormat = $defaultCurrency->format;\n    $currencyIsDefault = ($currencyId == $defaultCurrencyId) ? true : false;\n    $currencyIsSymbolFirst = ($currencySymbolPosition == 'before') ? true : false;\n    $currencyIsSymbolLast = ($currencySymbolPosition == 'after') ? true : false;\n    $currencyIsSymbolAfterAmount = ($currencySymbolPosition == 'after') ? true : false;\n    $currencyIsSymbolBeforeAmount = ($currencySymbolPosition == 'before') ? true : false;\n    $currencyPrecision = $currencyDecimalPlaces;\n    $defaultCurrencyPrecision = $defaultCurrencyDecimalPlaces;\n    $currencyThousandSeparator = ($currencyThousandsSeparator == ',' || $currencyThousandsSeparator == '|' || $currencyThousandsSe", "CodeBleu_score": 22.006273495366845}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $total = $this->toBase()->getCountForPagination($columns);\n\n    $results = $this->forPage($page, $perPage)->get($columns);\n\n    return new LengthAwarePaginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 76.78270134262966}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n    $results = $this->forPage($page, $perPage)->get($columns);\n    return new LengthAwarePaginator($results, $this->toBase()->getCountForPagination($columns), $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 73.80837851627271}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $total = $this->toBase()->getCountForPagination();\n\n    $results = $this->forPage($page, $perPage)->get($columns);\n\n    return new LengthAwarePaginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 77.55299735517363}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t    $reconciliations = $this->getSelectedRecords($request);\n\n    \\DB::transaction(function () use ($reconciliations) {\n        foreach ($reconciliations as $reconciliation) {\n            $reconciliation->status = Reconciliation::STATUS_RECONCILED;\n            $reconciliation->save();\n\n            $this->getSelectedRecords($reconciliation)->each(function ($item) {\n                $item->status = Transaction::STATUS_RECONCILED;\n                $item->save();\n            });\n        }\n    });\n\n    return $reconciliations;\n}", "CodeBleu_score": 50.04941650506621}, {"code": "<?\npublic function reconcile($request){\n\t    $reconciliations = $this->getSelectedRecords($request);\n\n    foreach ($reconciliations as $reconciliation) {\n        \\DB::transaction(function () use ($reconciliation) {\n            $reconciliation->status = 'reconciled';\n            $reconciliation->save();\n\n            $reconciliation->transactions->each(function ($item) {\n                $item->status = 'reconciled';\n                $item->save();\n            });\n        });\n    }\n}", "CodeBleu_score": 65.69288315665499}, {"code": "<?\npublic function reconcile($request){\n\t    $reconciliations = $this->getSelectedRecords($request);\n\n    \\DB::transaction(function () use ($reconciliations) {\n        foreach ($reconciliations as $reconciliation) {\n            $reconciliation->status = Reconciliation::RECONCILED;\n            $reconciliation->save();\n\n            $this->getSelectedRecords($reconciliation)->each(function ($item) {\n                $item->status = Transaction::RECONCILED;\n                $item->save();\n            });\n        }\n    });\n}", "CodeBleu_score": 48.924651313723}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t    $this->deleteExistingInvitations();\n\n    $invitation = $this->createInvitation();\n\n    try {\n        $this->dispatch($invitation);\n    } catch (\\Exception $e) {\n        throw new \\Exception($e->getMessage());\n    }\n\n    return $invitation;\n}", "CodeBleu_score": 12.403447701931476}, {"code": "<?\npublic function handle(): UserInvitation{\n\t    $this->dispatch(new SendUserInvitation($this->user, $this->getSourceName()));\n    $invitation = $this->createInvitation($this->user);\n    $this->deleteExistingInvitations($this->user);\n    return $invitation;\n}", "CodeBleu_score": 13.074691165627844}, {"code": "<?\npublic function handle(): UserInvitation{\n\t    $invitation = $this->getInvitation();\n\n    $this->deleteExistingInvitations($invitation->user_id);\n\n    $invitation->token = $this->generateToken();\n\n    $invitation->save();\n\n    $this->dispatch($invitation);\n\n    return $invitation;\n}", "CodeBleu_score": 14.462983894927229}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\t    if ($this->isReconciled()) {\n        throw new Exception('Transaction is reconciled.');\n    }\n    if ($this->isTransferTransaction()) {\n        throw new Exception('Transaction is a transfer transaction.');\n    }\n}", "CodeBleu_score": 27.10727196992564}, {"code": "<?\npublic function authorize(): void{\n\t    if ($this->model->isReconciled()) {\n        throw new Exception('Transaction has already been reconciled.');\n    }\n    if ($this->model->isTransferTransaction()) {\n        throw new Exception('Unauthorized');\n    }\n}", "CodeBleu_score": 37.50683446164741}, {"code": "<?\npublic function authorize(): void{\n\t\tif ($this->isReconciled()) {\n\t\tthrow new Exception(sprintf(t::_('Transaction #%1$s has been reconciled.'), $this->getId()));\n\t} elseif ($this->isTransferTransaction()) {\n\t\tthrow new UnauthorizedException(sprintf(t::_('You are not authorized to edit transaction #%1$s.'), $this->getId()));\n\t}\n}", "CodeBleu_score": 22.11174654333552}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t\tif (tableName.equals(\"TENANT_ACCESS\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"TENANT_ACCESS_BY_TENANT_ID\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"TENANT_ACCESS_BY_USER_ID\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"TENANT_ACCESS_BY_USER_ID_AND_TENANT_ID\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"TENANT_ACCESS_BY_USER_ID_AND_TENANT_ID_AND_TENANT_TYPE\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"TENANT_ACCESS_BY_USER_ID_AND_TENANT_ID_AND_TENANT_TYPE_AND_TENANT_ROLE\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"TENANT_ACCESS_BY_USER_ID_AND_TENANT_ID_AND_TENANT_TYPE_AND_TENANT_ROLE_AND_TENANT_ROLE_TYPE\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"TENANT_ACCESS_BY_USER_ID_AND_TENANT_ID_AND_TENANT_TYPE_AND_TENANT_ROLE_AND_TENANT_ROLE_TYPE_AND_TENANT_ROLE_TYPE_ID\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"TENANT_ACCESS_BY_USER_ID_AND_TENANT_ID_AND_TENANT_TYPE_AND_TENANT_ROLE_AND_TENANT_ROLE_TYPE_AND_TENANT_ROLE_TYPE_ID_AND_TENANT_ROLE_TYPE_ID\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"TENANT_ACCESS_BY_USER_ID_AND_TENANT_ID_AND_T", "CodeBleu_score": 13.971665585905027}, {"code": "public boolean doTableFilter(String tableName){\n\t    if (tableName.equals(\"Tenant\")) {\n        return true;\n    } else {\n        // get the tenant ID from the access token\n        String tenantId = getTenantIdByToken();\n        // if the tenant ID is zero, deny access\n        if (tenantId.equals(\"0\")) {\n            return false;\n        } else {\n            // if the tenant ID is not zero, allow access to certain tables\n            if (tableName.equals(\"Tenant_Tenant\")) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n}", "CodeBleu_score": 21.463824621063093}, {"code": "public boolean doTableFilter(String tableName){\n\t    String tenantId = getTenantIdByToken();\n    if (tenantId.equals(\"0\")) {\n        return false;\n    } else {\n        return (tableName.equals(\"TENANT_1\") || tableName.equals(\"TENANT_2\"));\n    }\n}", "CodeBleu_score": 11.869738294151785}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    Properties properties = new Properties();\n    properties.setProperty(\"mappers\", \"com.jsh.erp.datasource.mappers*\");\n    properties.setProperty(\"notEmpty\", \"false\");\n    properties.setProperty(\"IDENTITY\", \"MYSQL\");\n    properties.setProperty(\"ORDER\", \"BEFORE\");\n    mapperScannerConfigurer.setProperties(properties);\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 55.7049304016484}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(setBasePackage);\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 62.91762130151217}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 64.03882826107017}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    String result = null;\n    try {\n        List<Account> accounts = accountService.findBySelect();\n        result = accounts.stream().map(a -> \"{\\\"id\\\": \" + a.getId() + \", \\\"name\\\": \\\"\" + a.getName() + \"\\\"}\").collect(Collectors.joining(\",\"));\n    } catch (Exception e) {\n        logger.error(\"Error in findBySelect\", e);\n        result = \"{\\\"error\\\": \\\"\" + e.getMessage() + \"\\\"}\";\n    }\n    return result;\n}", "CodeBleu_score": 33.74568325829388}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    try {\n        List<Account> accounts = accountService.findAll();\n        List<Map<String, Object>> accountList = new ArrayList<Map<String, Object>>();\n        for (Account account : accounts) {\n            Map<String, Object> accountMap = new HashMap<String, Object>();\n            accountMap.put(\"id\", account.getId());\n            accountMap.put(\"name\", account.getName());\n            accountList.add(accountMap);\n        }\n        return new JSONObject(accountList).toString();\n    } catch (Exception e) {\n        logger.error(\"Error getting account list\", e);\n        return new JSONObject().put(\"message\", \"Error getting account list\").toString();\n    }\n}", "CodeBleu_score": 39.92317591497446}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    try {\n        // get the list of accounts\n        List<Account> accounts = accountService.findAll();\n        // convert the list to a JSON string\n        String json = toJSONString(accounts);\n        // return the JSON string\n        return json;\n    } catch (Exception e) {\n        // log the error message\n        logger.error(e.getMessage());\n        // return a failure message\n        return \"{\\\"error\\\":\\\"\" + e.getMessage() + \"\\\"}\";\n    }\n}", "CodeBleu_score": 20.67527053536443}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<Account> accountList = accountService.listWithBalance(name, serialNo, currentPage, pageSize);\n        response.setResponse(accountList);\n    } catch (Exception e) {\n        logger.error(\"Exception occurred while fetching accounts with balances\", e);\n        response.setStatus(ResponseStatus.FAILURE);\n        response.setMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 36.65491159680656}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t\n    BaseResponseInfo response = new BaseResponseInfo();\n\n    try {\n\n        // get the count of accounts\n        Integer count = accountService.getAccountCount(name, serialNo);\n\n        // get the list of accounts\n        List<Account> accounts = accountService.getAccounts(name, serialNo, currentPage, pageSize);\n\n        // create the response object\n        response.setCount(count);\n        response.setData(accounts);\n\n    } catch (Exception e) {\n        logger.error(e);\n        response.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n        response.setMessage(e.getMessage());\n    }\n\n    return response;\n}", "CodeBleu_score": 37.618853398714776}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t\n    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n\n        // get the account list\n        List<Account> accounts = accountService.listWithBalance(name, serialNo, currentPage, pageSize);\n\n        // get the account count\n        Integer accountCount = accountService.listWithBalanceCount(name, serialNo);\n\n        // construct the response object\n        response.setCode(ResponseCode.SUCCESS.getCode());\n        response.setMessage(ResponseCode.SUCCESS.getMessage());\n        response.setData(new AccountListResponse(accounts, accountCount));\n\n    } catch (Exception e) {\n\n        logger.error(e.getMessage(), e);\n        response.setCode(ResponseCode.ERROR.getCode());\n        response.setMessage(ResponseCode.ERROR.getMessage());\n\n    }\n\n    return response;\n}", "CodeBleu_score": 39.893862990821496}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        // Call the account service to get the statistics.\n        Statistics statistics = accountService.getStatistics(name, serialNo);\n\n        // Set the response code to 200 and include the data.\n        response.setResponseCode(200);\n        response.setResponseData(statistics);\n    } catch (Exception e) {\n        // Log the error and set the response code to 500.\n        logger.error(e.getMessage(), e);\n        response.setResponseCode(500);\n        response.setErrorMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 45.71599191042144}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t\n    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response.setCode(200);\n        response.setMessage(\"Success\");\n        response.setData(accountService.getStatistics(name, serialNo));\n    } catch (Exception e) {\n        logger.error(e.getMessage());\n        response.setCode(500);\n        response.setMessage(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 39.68779920101507}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t\n    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response.setCode(200);\n        response.setMessage(\"Success\");\n        response.setData(accountService.getStatistics(name, serialNo));\n    } catch (Exception e) {\n        logger.error(\"Exception: \", e);\n        response.setCode(500);\n        response.setMessage(\"Error\");\n        response.setData(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 38.14032148006595}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t        BaseResponseInfo response = new BaseResponseInfo();\n        try {\n            List<Bill> bills = accountHeadService.getBillsByBillNo(billNo);\n            if (bills != null && bills.size() > 0) {\n                response.setStatusCode(200);\n                response.setData(bills.get(0));\n            } else {\n                response.setStatusCode(404);\n                response.setErrorMsg(\"No bills found with the bill number: \" + billNo);\n            }\n        } catch (Exception e) {\n            response.setStatusCode(500);\n            response.setErrorMsg(e.getMessage());\n            LOGGER.error(\"Error while fetching bill details: \" + e.getMessage());\n        }\n        return response;\n    }", "CodeBleu_score": 34.849999478065776}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t\n        BaseResponseInfo response = new BaseResponseInfo();\n        try {\n            AccountHeadService accountHeadService = (AccountHeadService) getContext().getBean(\"accountHeadService\");\n            List<AccountHead> accountHeadList = accountHeadService.getAccountHeadByBillNumber(billNo);\n            if (accountHeadList != null && !accountHeadList.isEmpty()) {\n                response.setStatusCode(200);\n                response.setMessage(\"Success\");\n                response.setResult(accountHeadList.get(0));\n            } else {\n                response.setStatusCode(404);\n                response.setMessage(\"Not Found\");\n            }\n        } catch (Exception e) {\n            logger.error(\"Exception in getDetailByNumber\", e);\n            response.setStatusCode(500);\n            response.setMessage(\"Internal Error\");\n        }\n        return response;\n    }", "CodeBleu_score": 38.17898340972654}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t        BaseResponseInfo response = new BaseResponseInfo();\n        try {\n            List<Bill> bills = accountHeadService.getDetailsByBillNumber(billNo);\n            if (bills != null && bills.size() > 0) {\n                response.setStatusCode(200);\n                response.setResponseBody(bills.get(0));\n            } else {\n                response.setStatusCode(404);\n                response.setResponseBody(\"No details found for bill number: \" + billNo);\n            }\n        } catch (Exception e) {\n            logger.error(e.getMessage());\n            response.setStatusCode(500);\n            response.setResponseBody(\"Error occurred while fetching details for bill number: \" + billNo);\n        }\n        return response;\n    }", "CodeBleu_score": 34.75769051370404}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\n\tBaseResponseInfo response = new BaseResponseInfo();\n\n\ttry {\n\t\tresponse.setCode(200);\n\t\tresponse.setMessage(getMessage(\"success\"));\n\t\tresponse.setData(depotService.findDepotByCurrentUser(request));\n\t} catch (Exception e) {\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(getMessage(\"error\"));\n\t\tresponse.setData(e.getMessage());\n\t\te.printStackTrace();\n\t}\n\treturn response;\n}", "CodeBleu_score": 35.0647469924752}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        // Get the depot information for the current user\n        Depot depot = depotService.findDepotByCurrentUser(request);\n        if (depot != null) {\n            // Set the response code to 200 and include the depot information\n            response.setResponseCode(ResponseCode.OK);\n            response.setData(depot);\n        } else {\n            // Set the response code to 404 and include an error message\n            response.setResponseCode(ResponseCode.NOT_FOUND);\n            response.setMessage(getMessage(\"error.depot.notFound\"));\n        }\n    } catch (Exception e) {\n        // Log the error and set the response code to 500\n        logger.error(e.getMessage(), e);\n        response.setResponseCode(ResponseCode.INTERNAL_SERVER_ERROR);\n        response.setMessage(getMessage(\"error.depot.internalServerError\"));\n    }\n    return response;\n}", "CodeBleu_score": 44.72351288297205}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tDepot depot = depotService.findDepotByCurrentUser(request);\n\t\tresponse.setCode(200);\n\t\tresponse.setData(depot);\n\t} catch (Exception e) {\n\t\tlogger.error(\"DepotController.findDepotByCurrentUser() failed\", e);\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(getMessage(\"DepotController.findDepotByCurrentUser() failed\", request));\n\t}\n\treturn response;\n}", "CodeBleu_score": 34.98417401292937}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    JSONArray array = new JSONArray();\n    JSONObject json = new JSONObject();\n    try {\n        List<RoleFunction> list = roleFunctionService.findRoleFunction(type, keyId);\n        json.put(\"functionList\", list);\n        if (!type.equals(\"admin\")) {\n            String tenantId = getTenantIdByToken(request);\n            List<RoleFunction> roleFunctions = (List<RoleFunction>) json.get(\"functionList\");\n            List<RoleFunction> filteredFunctions = new ArrayList<RoleFunction>();\n            for (RoleFunction roleFunction : roleFunctions) {\n                if (!roleFunction.getFunctionName().equals(\"\u7cfb\u7edf\u7ba1\u7406\")) {\n                    filteredFunctions.add(roleFunction);\n                }\n            }\n            json.put(\"functionList\", filteredFunctions);\n        }\n        array.add(json);\n    } catch (Exception e) {\n        logger.error(\"Failed to retrieve role functions: \" + e.getMessage());\n        throw new Exception(\"Failed to retrieve role functions: \" + e.getMessage());\n    }\n    return array;\n}", "CodeBleu_score": 41.19850428405619}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    JSONArray jsonArray = new JSONArray();\n    JSONObject jsonObject = new JSONObject();\n    try {\n        List<RoleFunction> roleFunctionList = roleFunctionService.findRoleFunction(type, keyId);\n        if (roleFunctionList != null && roleFunctionList.size() > 0) {\n            for (RoleFunction roleFunction : roleFunctionList) {\n                if (roleFunction.getFunction().getFunctionName().equals(\"\u7cfb\u7edf\u7ba1\u7406\")) {\n                    String tenantId = getTenantIdByToken(request);\n                    if (!tenantId.equals(\"admin\")) {\n                        continue;\n                    }\n                }\n                JSONObject functionJson = new JSONObject();\n                functionJson.put(\"id\", roleFunction.getFunction().getFunctionId());\n                functionJson.put(\"name\", roleFunction.getFunction().getFunctionName());\n                functionJson.put(\"url\", roleFunction.getFunction().getUrl());\n                functionJson.put(\"type\", roleFunction.getFunction().getFunctionType());\n                functionJson.put(\"level\", roleFunction.getFunction().getFunctionLevel());\n                functionJson.put(\"description\", roleFunction.getFunction().getDescription());\n                functionJson.put(\"parentId\", roleFunction.getFunction().getParentId());\n                functionJson.put(\"parentName\", roleFunction.getFunction().getParentName());\n                functionJson.put(\"isParent\", roleFunction.getFunction().getIsParent());\n                functionJson.put(\"isOpen\", roleFunction.getFunction().getIsOpen());\n                functionJson.put(\"sort\", roleFunction.getFunction().getSort());\n                functionJson.put(\"icon\", roleFunction.getFunction().getIcon());\n                functionJson.put(\"isShow\", roleFunction.getFunction().getIsShow());\n                functionJson.put(\"isMenu\", roleFunction.getFunction().getIsMenu());\n                functionJson.put(\"isButton\", roleFunction.getFunction().getIsButton());\n                functionJson.put(\"isPublic\", roleFunction.getFunction().getIsPublic());\n                functionJson.put(\"isDelete\", roleFunction.getFunction().getIsDelete());\n                functionJson.put(\"createTime\", roleFunction.getFunction().getCreateTime());\n                functionJson", "CodeBleu_score": 31.164366078858023}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t\tJSONArray jsonArray = new JSONArray();\n\tJSONObject jsonObject = new JSONObject();\n\tString tenantId = getTenantIdByToken(request);\n\ttry {\n\t\tList<RoleFunction> functionList = getFunctionList(type, keyId);\n\t\tJSONArray functionArray = new JSONArray();\n\t\tfor (RoleFunction roleFunction : functionList) {\n\t\t\tif (roleFunction.getFunctionName().equals(\"\u7cfb\u7edf\u7ba1\u7406\") && !tenantId.equals(\"admin\")) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tJSONObject function = new JSONObject();\n\t\t\tfunction.put(\"functionId\", roleFunction.getFunctionId());\n\t\t\tfunction.put(\"functionName\", roleFunction.getFunctionName());\n\t\t\tfunction.put(\"functionType\", roleFunction.getFunctionType());\n\t\t\tfunction.put(\"functionUrl\", roleFunction.getFunctionUrl());\n\t\t\tfunction.put(\"functionDesc\", roleFunction.getFunctionDesc());\n\t\t\tfunction.put(\"functionOrder\", roleFunction.getFunctionOrder());\n\t\t\tfunctionArray.add(function);\n\t\t}\n\t\tjsonObject.put(\"functionList\", functionArray);\n\t\tjsonArray.add(jsonObject);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\tthrow e;\n\t}\n\treturn jsonArray;\n}", "CodeBleu_score": 33.973002574295464}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\n    BaseResponseInfo response = new BaseResponseInfo();\n\n    try {\n\n        if (platformKey == null) {\n            throw new Exception(\"platformKey is null\");\n        }\n\n        String userId = request.getHeader(\"userId\");\n\n        if (userId == null) {\n            throw new Exception(\"userId is null\");\n        }\n\n        // Check if the user is authorized to perform this action\n        if (!isAuthorized(userId, \"getInfoByKey\", platformKey)) {\n            throw new Exception(\"User is not authorized to perform this action\");\n        }\n\n        // Get the configuration for the platform\n        PlatformConfig platformConfig = platformConfigService.getConfig(platformKey);\n\n        if (platformConfig != null) {\n            response.setResponseCode(200);\n            response.setResponseBody(platformConfig);\n        } else {\n            response.setResponseCode(404);\n            response.setResponseBody(\"Platform configuration not found\");\n        }\n\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        response.setResponseCode(500);\n        response.setResponseBody(e.getMessage());\n    }\n\n    return response;\n}", "CodeBleu_score": 42.288123224525236}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\n    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response.setResponseCode(ResponseCode.SUCCESS.getCode());\n        response.setResponseMsg(ResponseCode.SUCCESS.getDesc());\n        response.setResponseBody(platformConfigService.getConfigByKey(platformKey));\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        response.setResponseCode(ResponseCode.ERROR.getCode());\n        response.setResponseMsg(ResponseCode.ERROR.getDesc());\n        response.setResponseBody(e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 42.12872418985074}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\n    BaseResponseInfo response = new BaseResponseInfo();\n\n    try {\n        PlatformConfigInfo platformConfigInfo = platformConfigService.getPlatformConfigInfoByKey(platformKey);\n        response.setStatus(ResponseStatus.SUCCESS);\n        response.setData(platformConfigInfo);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        response.setStatus(ResponseStatus.FAILURE);\n        response.setMessage(e.getMessage());\n    }\n\n    return response;\n}", "CodeBleu_score": 48.06235504620856}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\n\tBaseResponseInfo response = new BaseResponseInfo();\n\n\ttry {\n\t\tList<SystemConfigInfo> list = getSystemConfig();\n\n\t\tif (list != null && list.size() > 0) {\n\t\t\tresponse.setCode(200);\n\t\t\tresponse.setData(list.get(0));\n\t\t}\n\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(e.getMessage());\n\t}\n\n\treturn response;\n}", "CodeBleu_score": 31.88261824841328}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        response.setCode(200);\n        response.setData(getCurrentInfo());\n    } catch (Exception e) {\n        logger.error(\"Exception:\", e);\n        response.setCode(500);\n        response.setData(\"Exception: \" + e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 32.091967336224656}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo info = new BaseResponseInfo();\n\ttry {\n\t\tList<SystemConfig> list = getSystemConfig();\n\t\tif (list != null && list.size() > 0) {\n\t\t\tinfo.setCode(200);\n\t\t\tinfo.setData(list.get(0));\n\t\t} else {\n\t\t\tinfo.setCode(500);\n\t\t\tinfo.setErrorMessage(\"System configuration information is not available.\");\n\t\t}\n\t} catch (Exception e) {\n\t\tinfo.setCode(500);\n\t\tinfo.setErrorMessage(\"System configuration information is not available.\");\n\t}\n\treturn info;\n}", "CodeBleu_score": 30.501235428754757}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    BaseResponseInfo responseInfo = new BaseResponseInfo();\n    try {\n        String businessPath = getParameter(request, \"businessPath\");\n        String uploadType = getParameter(request, \"uploadType\");\n        String filePath = getParameter(request, \"filePath\");\n        String fileName = getParameter(request, \"fileName\");\n        String fileType = getParameter(request, \"fileType\");\n        String fileSize = getParameter(request, \"fileSize\");\n        String fileMd5 = getParameter(request, \"fileMd5\");\n        String fileSha1 = getParameter(request, \"fileSha1\");\n        String fileSha256 = getParameter(request, \"fileSha256\");\n        String fileSha512 = getParameter(request, \"fileSha512\");\n        String fileSha3_256 = getParameter(request, \"fileSha3_256\");\n        String fileSha3_512 = getParameter(request, \"fileSha3_512\");\n        String fileSha3_384 = getParameter(request, \"fileSha3_384\");\n        String fileSha3_512_256 = getParameter(request, \"fileSha3_512_256\");\n        String fileSha3_384_256 = getParameter(request, \"fileSha3_384_256\");\n        String fileSha3_256_256 = getParameter(request, \"fileSha3_256_256\");\n        String fileSha3_512_512 = getParameter(request, \"fileSha3_512_512\");\n        String fileSha3_384_512 = getParameter(request, \"fileSha3_384_512\");\n        String fileSha3_256_512 = getParameter(request, \"fileSha3_256_512\");\n        String fileSha3_512_384 = getParameter(request, \"fileSha3_512_3", "CodeBleu_score": 19.815821422883346}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    BaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n    try {\n        String businessPath = getParameter(request, \"businessPath\");\n        String uploadType = getParameter(request, \"uploadType\");\n        String filePath = getParameter(request, \"filePath\");\n        String fileName = getParameter(request, \"fileName\");\n        String fileType = getParameter(request, \"fileType\");\n        String fileSize = getParameter(request, \"fileSize\");\n        String fileSuffix = getParameter(request, \"fileSuffix\");\n        String fileMd5 = getParameter(request, \"fileMd5\");\n        String fileBase64 = getParameter(request, \"fileBase64\");\n        String fileBase64ContentType = getParameter(request, \"fileBase64ContentType\");\n        String fileBase64FileName = getParameter(request, \"fileBase64FileName\");\n        String fileBase64FileType = getParameter(request, \"fileBase64FileType\");\n        String fileBase64FileSize = getParameter(request, \"fileBase64FileSize\");\n        String fileBase64FileSuffix = getParameter(request, \"fileBase64FileSuffix\");\n        String fileBase64FileMd5 = getParameter(request, \"fileBase64FileMd5\");\n        String fileBase64FileBase64 = getParameter(request, \"fileBase64FileBase64\");\n        String fileBase64FileBase64ContentType = getParameter(request, \"fileBase64FileBase64ContentType\");\n        String fileBase64FileBase64FileName = getParameter(request, \"fileBase64FileBase64FileName\");\n        String fileBase64FileBase64FileType = getParameter(request, \"fileBase64FileBase64FileType\");\n        String fileBase64FileBase64FileSize = getParameter(request, \"fileBase64FileBase64FileSize\");\n        String fileBase64FileBase64FileSuffix = getParameter(request, \"fileBase64FileBase64FileSuffix\");\n        String fileBase64FileBase64FileMd5 = getParameter(request,", "CodeBleu_score": 18.906908842143093}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    BaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n    String businessPath = getParameter(request, \"businessPath\");\n    String fileType = getParameter(request, \"fileType\");\n    String filePath = getParameter(request, \"filePath\");\n    String fileName = getParameter(request, \"fileName\");\n    String fileSize = getParameter(request, \"fileSize\");\n    String fileType = getParameter(request, \"fileType\");\n    String fileType = getParameter(request, \"fileType\");\n    String fileType = getParameter(request, \"fileType\");\n    String fileType = getParameter(request, \"fileType\");\n    String fileType = getParameter(request, \"fileType\");\n    String fileType = getParameter(request, \"fileType\");\n    String fileType = getParameter(request, \"fileType\");\n    String fileType = getParameter(request, \"fileType\");\n    String fileType = getParameter(request, \"fileType\");\n    String fileType = getParameter(request, \"fileType\");\n    String fileType = getParameter(request, \"fileType\");\n    String fileType = getParameter(request, \"fileType\");\n    String fileType = getParameter(request, \"fileType\");\n    String fileType = getParameter(request, \"fileType\");\n    String fileType = getParameter(request, \"fileType\");\n    String fileType = getParameter(request, \"fileType\");\n    String fileType = getParameter(request, \"fileType\");\n    String fileType = getParameter(request, \"fileType\");\n    String fileType = getParameter(request, \"fileType\");\n    String fileType = getParameter(request, \"fileType\");\n    String fileType = getParameter(request, \"fileType\");\n    String fileType = getParameter(request, \"fileType\");\n    String fileType = getParameter(request, \"fileType\");\n    String fileType = getParameter(request, \"fileType\");\n    String fileType = getParameter(request, \"fileType\");\n    String fileType = getParameter(request, \"fileType\");\n    String fileType = getParameter(request, \"fileType\");\n    String fileType = getParameter(request, \"fileType\");\n    String fileType", "CodeBleu_score": 12.882685377699731}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t\n        String title = jsonObject.getString(\"title\");\n        String head = jsonObject.getString(\"head\");\n        String tip = jsonObject.getString(\"tip\");\n        String data = jsonObject.getString(\"data\");\n\n        try {\n            List<Map<String, Object>> dataList = JSON.parseObject(data, new TypeReference<List<Map<String, Object>>>() {});\n            exportExcel(title, head, tip, dataList, response);\n        } catch (Exception e) {\n            logger.error(\"Export Excel Error\", e);\n        }\n    }", "CodeBleu_score": 67.71268277802541}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t        try {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            String data = jsonObject.getString(\"data\");\n            String[] headArray = head.split(\",\");\n            String[] dataArray = data.split(\",\");\n            List<String> headList = new ArrayList<String>();\n            List<String> dataList = new ArrayList<String>();\n            for (int i = 0; i < headArray.length; i++) {\n                headList.add(headArray[i]);\n            }\n            for (int i = 0; i < dataArray.length; i++) {\n                dataList.add(dataArray[i]);\n            }\n            exportExcel(title, headList, tip, dataList, response);\n        } catch (Exception e) {\n            logger.error(\"exportExcelByParam error\", e);\n            getMessage(e.getMessage(), response);\n        }\n    }", "CodeBleu_score": 62.97454419242129}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t        String title = jsonObject.getString(\"title\");\n        String head = jsonObject.getString(\"head\");\n        String tip = jsonObject.getString(\"tip\");\n        JSONArray dataList = jsonObject.getJSONArray(\"dataList\");\n        String fileName = jsonObject.getString(\"fileName\");\n        String sheetName = jsonObject.getString(\"sheetName\");\n        String sheetTitle = jsonObject.getString(\"sheetTitle\");\n        String sheetHead = jsonObject.getString(\"sheetHead\");\n        String sheetTip = jsonObject.getString(\"sheetTip\");\n        String sheetData = jsonObject.getString(\"sheetData\");\n        String sheetData2 = jsonObject.getString(\"sheetData2\");\n        String sheetData3 = jsonObject.getString(\"sheetData3\");\n        String sheetData4 = jsonObject.getString(\"sheetData4\");\n        String sheetData5 = jsonObject.getString(\"sheetData5\");\n        String sheetData6 = jsonObject.getString(\"sheetData6\");\n        String sheetData7 = jsonObject.getString(\"sheetData7\");\n        String sheetData8 = jsonObject.getString(\"sheetData8\");\n        String sheetData9 = jsonObject.getString(\"sheetData9\");\n        String sheetData10 = jsonObject.getString(\"sheetData10\");\n        String sheetData11 = jsonObject.getString(\"sheetData11\");\n        String sheetData12 = jsonObject.getString(\"sheetData12\");\n        String sheetData13 = jsonObject.getString(\"sheetData13\");\n        String sheetData14 = jsonObject.getString(\"sheetData14\");\n        String sheetData15 = jsonObject.getString(\"sheetData15\");\n        String sheetData16 = jsonObject.getString(\"sheetData16\");\n        String sheetData17 = jsonObject.getString(\"sheetData17\");\n        String sheetData18 = jsonObject.getString(\"sheetData18\");\n        String sheetData19 = jsonObject.getString(\"sheetData19\");\n        String sheetData20 = jsonObject.getString(\"sheetData20\");\n        String sheetData21 = jsonObject.getString(\"sheetData21\");\n        String sheetData22 = jsonObject.getString(\"sheetData22\");\n        String sheetData23 = jsonObject.getString(\"sheet", "CodeBleu_score": 38.91599523622448}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tAccount account = new Account();\n\taccount.setName(obj.getString(\"name\"));\n\taccount.setDescription(obj.getString(\"description\"));\n\taccount.setEnabled(true);\n\taccount.setIsDefault(false);\n\taccount.setInitialAmount(0.0);\n\tif (obj.containsKey(\"initialAmount\")) {\n\t\taccount.setInitialAmount(obj.getDouble(\"initialAmount\"));\n\t}\n\tif (account.getInitialAmount() == 0.0) {\n\t\taccount.setIsDefault(true);\n\t}\n\taccount.setCreatedBy(request.getRemoteUser());\n\taccount.setCreatedDate(new Date());\n\taccount.setUpdatedBy(request.getRemoteUser());\n\taccount.setUpdatedDate(new Date());\n\taccount.setAccountType(AccountType.valueOf(obj.getString(\"accountType\")));\n\taccount.setCurrency(Currency.valueOf(obj.getString(\"currency\")));\n\taccount.setAccountCategory(AccountCategory.valueOf(obj.getString(\"accountCategory\")));\n\taccount.setAccountClass(AccountClass.valueOf(obj.getString(\"accountClass\")));\n\taccount.setAccountSubclass(AccountSubclass.valueOf(obj.getString(\"accountSubclass\")));\n\taccount.setAccountGroup(AccountGroup.valueOf(obj.getString(\"accountGroup\")));\n\taccount.setAccountGroup2(AccountGroup2.valueOf(obj.getString(\"accountGroup2\")));\n\taccount.setAccountGroup3(AccountGroup3.valueOf(obj.getString(\"accountGroup3\")));\n\taccount.setAccountGroup4(AccountGroup4.valueOf(obj.getString(\"accountGroup4\")));\n\taccount.setAccountGroup5(AccountGroup5.valueOf(obj.getString(\"accountGroup5\")));\n\taccount.setAccountGroup6(AccountGroup6.valueOf(obj.getString(\"accountGroup6\")));\n\taccount.setAccountGroup7(AccountGroup7.valueOf(obj.getString(\"accountGroup7\")));\n\taccount.setAccountGroup8(AccountGroup8.valueOf(obj.getString(\"accountGroup8\")));\n\taccount.setAccountGroup9(AccountGroup9.valueOf(obj.getString(\"accountGroup9\")));\n\taccount.setAccountGroup10(AccountGroup10", "CodeBleu_score": 22.894845173218386}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tAccount account = new Account();\n\taccount.setName(obj.getString(\"name\"));\n\taccount.setInitialAmount(obj.containsKey(\"initialAmount\")?obj.getDouble(\"initialAmount\"):0.0);\n\taccount.setIsDefault(obj.containsKey(\"isDefault\")?obj.getBoolean(\"isDefault\"):false);\n\taccount.setEnabled(true);\n\taccount.setCreated(new Date());\n\taccount.setCreatedBy(getUserId(request));\n\taccount.setUpdated(account.getCreated());\n\taccount.setUpdatedBy(account.getCreatedBy());\n\taccount.setDescription(obj.containsKey(\"description\")?obj.getString(\"description\"):\"\");\n\taccount.setType(obj.containsKey(\"type\")?obj.getInt(\"type\"):0);\n\taccount.setParentId(obj.containsKey(\"parentId\")?obj.getInt(\"parentId\"):0);\n\taccount.setCompanyId(getCompanyId(request));\n\taccount.setLocationId(obj.containsKey(\"locationId\")?obj.getInt(\"locationId\"):0);\n\taccount.setTaxId(obj.containsKey(\"taxId\")?obj.getInt(\"taxId\"):0);\n\taccount.setClassificationId(obj.containsKey(\"classificationId\")?obj.getInt(\"classificationId\"):0);\n\taccount.setCategoryId(obj.containsKey(\"categoryId\")?obj.getInt(\"categoryId\"):0);\n\taccount.setSubcategoryId(obj.containsKey(\"subcategoryId\")?obj.getInt(\"subcategoryId\"):0);\n\taccount.setSubcategory2Id(obj.containsKey(\"subcategory2Id\")?obj.getInt(\"subcategory2Id\"):0);\n\taccount.setSubcategory3Id(obj.containsKey(\"subcategory3Id\")?obj.getInt(\"subcategory3Id\"):0);\n\taccount.setSubcategory4Id(obj.containsKey(\"subcategory4Id\")?obj.getInt(\"subcategory4Id\"):0);\n\taccount.setSubcategory5Id(obj.containsKey(\"subcategory5Id\")?obj.getInt(\"subcategory5Id\"):0);\n", "CodeBleu_score": 21.559408954218576}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tAccount account = new Account();\n\taccount.setName(obj.getString(\"name\"));\n\taccount.setInitialAmount(getInitialAmount(obj));\n\taccount.setIsDefault(isDefault(account));\n\taccount.setEnabled(true);\n\taccount.setCreatedBy(request.getUserPrincipal().getName());\n\taccount.setUpdatedBy(request.getUserPrincipal().getName());\n\taccount.setCreated(new Date());\n\taccount.setUpdated(new Date());\n\taccount.setVersion(0);\n\tint result = accountDao.insertAccount(account);\n\tinsertLog(account, request);\n\treturn result;\n}", "CodeBleu_score": 30.57336821229455}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\tLong count = null;\n\ttry {\n\t\tcount = this.mapper.listWithBalanceCount(name, serialNo);\n\t} catch (Exception e) {\n\t\tlogger.error(e);\n\t}\n\treturn count;\n}", "CodeBleu_score": 44.63445748771646}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    try {\n        return countsByAccount.map(account -> account.getBalance()).filter(balance -> balance > 0).count();\n    } catch (Exception e) {\n        logger.error(\"Error in listWithBalanceCount\", e);\n        return null;\n    }\n}", "CodeBleu_score": 24.335944854365966}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    try {\n        return mapper.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        log.error(\"Exception in listWithBalanceCount\", e);\n        return null;\n    }\n}", "CodeBleu_score": 31.052503253987496}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result = 0;\n\ttry {\n\t\tresult = getDepotItemMapper().deleteByPrimaryKey(id);\n\t} catch (Exception e) {\n\t\tlog.error(e.getMessage());\n\t\tthrow e;\n\t}\n\treturn result;\n}", "CodeBleu_score": 54.27797440295239}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    try {\n        return depotItemMapper.deleteByPrimaryKey(id);\n    } catch (Exception e) {\n        log.error(e.getMessage(), e);\n        throw e;\n    }\n}", "CodeBleu_score": 31.962311572109837}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\ttry {\n\t\treturn deleteDepotItemByPrimaryKey(id);\n\t} catch (Exception e) {\n\t\thandleException(e, request);\n\t\treturn 0;\n\t}\n}", "CodeBleu_score": 24.97455944581337}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t  try {\n    HttpClient client = HttpClientBuilder.create().build();\n    String endpoint = \"http://\" + getHost() + \":\" + getPort() + \"/api/projects/\" + projectName + \"/nodes/\" + nodeType + \"/\" + nodeKey;\n    HttpGet request = new HttpGet(endpoint);\n    request.addHeader(\"Content-Type\", \"application/json\");\n    HttpResponse response = client.execute(request);\n    if (response.getStatusLine().getStatusCode() == 200) {\n      JsonNode node = readValue(response.getEntity().getContent(), JsonNode.class);\n      if (node.has(\"key\")) {\n        return true;\n      }\n    }\n    return false;\n  } catch (Exception e) {\n    printStackTrace(e);\n    return false;\n  } finally {\n    close(null, null);\n  }\n}", "CodeBleu_score": 45.97053769574167}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t  try {\n    HttpClient client = HttpClientBuilder.create().build();\n    String endpoint = \"http://localhost:8080/alfresco/service/projects/\" + projectName + \"/nodes/\" + nodeType + \"/\" + nodeKey;\n    HttpGet request = new HttpGet(endpoint);\n    request.addHeader(\"Accept\", \"application/json\");\n    HttpResponse response = client.execute(request);\n    int status = response.getStatusLine().getStatusCode();\n    if (status == 200) {\n      String responseString = EntityUtils.toString(response.getEntity());\n      JSONObject responseJson = new JSONObject(responseString);\n      if (responseJson.has(\"key\")) {\n        return true;\n      }\n    }\n  } catch (Exception e) {\n    printStackTrace(e);\n  } finally {\n    close();\n  }\n  return false;\n}", "CodeBleu_score": 43.954233927878406}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t  try {\n    HttpClient client = HttpClientBuilder.create().build();\n    String url = getHost() + \":\" + getPort() + \"/\" + projectName + \"/\" + nodeType + \"/\" + nodeKey;\n    HttpGet request = new HttpGet(url);\n    request.addHeader(\"Accept\", \"application/json\");\n    HttpResponse response = client.execute(request);\n    if (response.getStatusLine().getStatusCode() != 200) {\n      System.out.println(\"Request failed: \" + response.getStatusLine().getReasonPhrase());\n      return false;\n    }\n    String responseBody = EntityUtils.toString(response.getEntity());\n    if (responseBody.contains(nodeKey)) {\n      System.out.println(\"Node \" + nodeKey + \" added to project \" + projectName);\n      return true;\n    }\n  } catch (Exception e) {\n    printStackTrace(e);\n  } finally {\n    close(null, null);\n  }\n  return false;\n}", "CodeBleu_score": 41.8273892181118}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t  CloseableHttpClient httpClient = HttpClients.createDefault();\n  String url = getUrl(projectName, \"addEdge\");\n  HttpGet httpGet = new HttpGet(url);\n  httpGet.setHeader(\"Content-type\", \"application/json\");\n  httpGet.setHeader(\"Accept\", \"application/json\");\n  httpGet.setHeader(\"Accept-Charset\", \"UTF-8\");\n  httpGet.setHeader(\"Accept-Encoding\", \"gzip\");\n  httpGet.setHeader(\"User-Agent\", \"gds-client-java/0.1\");\n  httpGet.setHeader(\"X-GDS-PROJECT\", projectName);\n  httpGet.setHeader(\"X-GDS-EDGE-TYPE\", edgeType);\n  httpGet.setHeader(\"X-GDS-FROM-TYPE\", fromType);\n  httpGet.setHeader(\"X-GDS-TO-TYPE\", toType);\n  httpGet.setHeader(\"X-GDS-FROM\", from);\n  httpGet.setHeader(\"X-GDS-TO\", to);\n  CloseableHttpResponse response = null;\n  try {\n    response = httpClient.execute(httpGet);\n    HttpEntity entity = response.getEntity();\n    String json = EntityUtils.toString(entity, \"UTF-8\");\n    JSONObject jsonObject = new JSONObject(json);\n    if (jsonObject.has(\"key\")) {\n      return true;\n    }\n    return false;\n  } catch (Exception e) {\n    throw new RuntimeException(e);\n  } finally {\n    if (response != null) {\n      try {\n        response.close();\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n    try {\n      httpClient.close();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n}", "CodeBleu_score": 41.50039632903812}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t  CloseableHttpClient httpclient = HttpClients.createDefault();\n  HttpGet httpget = new HttpGet(\"http://localhost:7474/db/data/cypher\");\n  httpget.setHeader(\"Content-Type\", \"application/json\");\n  httpget.setHeader(\"Accept\", \"application/json\");\n  httpget.setHeader(\"Authorization\", \"Basic \" + getAuth());\n  httpget.setHeader(\"Accept-Encoding\", \"gzip\");\n  httpget.setHeader(\"Accept-Encoding\", \"deflate\");\n  String query = \"{\\\"query\\\":\\\"MATCH (n1: \" + fromType + \" {id: '\" + from + \"'}), (n2: \" + toType + \" {id: '\" + to + \"'}) CREATE (n1)-[r:\" + edgeType + \"]->(n2) RETURN r.id AS id, r.key AS key\\\",\\\"params\\\":{}}\";\n  StringEntity entity = new StringEntity(query);\n  httpget.setEntity(entity);\n  try {\n    CloseableHttpResponse response = httpclient.execute(httpget);\n    try {\n      HttpEntity ht = response.getEntity();\n      String result = EntityUtils.toString(ht);\n      JSONObject json = new JSONObject(result);\n      JSONArray data = json.getJSONArray(\"data\");\n      if (data.length() > 0) {\n        JSONObject datum = data.getJSONObject(0);\n        if (datum.has(\"key\")) {\n          return true;\n        }\n      }\n    } finally {\n      response.close();\n    }\n  } catch (ClientProtocolException e) {\n    e.printStackTrace();\n  } catch (ParseException e) {\n    e.printStackTrace();\n  } catch (IOException e) {\n    e.printStackTrace();\n  } finally {\n    try {\n      httpclient.close();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n  return false;\n}", "CodeBleu_score": 43.195366435118174}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t  CloseableHttpClient client = HttpClientBuilder.create().build();\n  HttpGet get = new HttpGet(getEndpoint(projectName, \"addEdge\"));\n  get.setHeader(\"Accept\", \"application/json\");\n  get.setHeader(\"Content-type\", \"application/json\");\n  try {\n    HttpResponse response = client.execute(get);\n    int statusCode = response.getStatusLine().getStatusCode();\n    if (statusCode == 200) {\n      HttpEntity entity = response.getEntity();\n      String responseString = EntityUtils.toString(entity);\n      JSONObject jsonResponse = new JSONObject(responseString);\n      if (jsonResponse.has(\"key\")) {\n        return true;\n      }\n    }\n  } catch (Exception e) {\n    e.printStackTrace();\n  } finally {\n    try {\n      client.close();\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n  return false;\n}", "CodeBleu_score": 43.7990604742212}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\t    if (event == null || event.getMessage() == null) {\n        throw new IllegalArgumentException(\"Event and message cannot be null\");\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(acquireTestingLocation());\n    }\n    event.setTime(new Date());\n    String json = gson.toJson(event);\n    ProducerRecord<String, String> record = new ProducerRecord<String, String>(event.getTarget() == null ? \"test\" : event.getTarget(), json);\n    producer.send(record);\n    producer.flush();\n}", "CodeBleu_score": 41.71667689118498}, {"code": "public void sendEvent(Event event){\n\t    if (event != null && event.getMessage() != null) {\n        if (event.getLocation() == null) {\n            event.setLocation(acquireTestingLocation());\n        }\n        event.setTime(new Date());\n        String json = null;\n        try {\n            json = mapper.writeValueAsString(event);\n        } catch (JsonProcessingException e) {\n            e.printStackTrace();\n        }\n        if (event.getTarget() == null) {\n            event.setTarget(\"test\");\n        }\n        ProducerRecord<String, String> record = new ProducerRecord<String, String>(event.getTarget(), json);\n        producer.send(record);\n        producer.flush();\n    }\n}", "CodeBleu_score": 49.96070725026664}, {"code": "public void sendEvent(Event event){\n\t    if (event == null) {\n        throw new IllegalArgumentException(\"Event cannot be null.\");\n    }\n    if (event.getMessage() == null) {\n        throw new IllegalArgumentException(\"Event message cannot be null.\");\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(acquireTestingLocation());\n    }\n    event.setTime(System.currentTimeMillis());\n    String json = gson.toJson(event);\n    ProducerRecord<String, String> record = new ProducerRecord<String, String>(event.getTarget() != null ? event.getTarget() : \"test\", json);\n    producer.send(record);\n    producer.flush();\n}", "CodeBleu_score": 44.48002847435548}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t\n    // Initialize the OSS client\n    OSS ossClient = getOssClient();\n\n    // Upload the file content as an object with the specified name\n    ossClient.putObject(getOssBucket(), objName, new ByteArrayInputStream(content));\n\n    // Shut down the OSS client\n    ossClient.shutdown();\n\n    // Return the URL of the uploaded object\n    return getEndpoint() + \"/\" + getOssBucket() + \"/\" + objName;\n}", "CodeBleu_score": 26.363054736035323}, {"code": "public String upload(String objName, byte[] content){\n\t\t// 1. Initialize the OSS client\n\tString accessKeyId = getAccessKeyId();\n\tString accessKeySecret = getAccessKeySecret();\n\tString endpoint = getEndpoint();\n\tOSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);\n\t\n\t// 2. Upload the file content as an object with the specified name\n\tossClient.putObject(getOssBucket(), objName, new ByteArrayInputStream(content));\n\t\n\t// 3. Shut down the OSS client\n\tossClient.shutdown();\n\t\n\t// 4. Return the URL of the uploaded object\n\treturn getEndpoint() + getOssBucket() + \"/\" + objName;\n}", "CodeBleu_score": 40.96592952166177}, {"code": "public String upload(String objName, byte[] content){\n\t\n    String endpoint = getEndpoint();\n    String accessKeyId = getAccessKeyId();\n    String accessKeySecret = getAccessKeySecret();\n    String bucketName = getOssBucket();\n\n    // Create an OSSClient instance.\n    OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);\n\n    // Upload an object to your bucket.\n    PutObjectResult putResult = ossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\n    // Shut down the OSSClient instance.\n    ossClient.shutdown();\n\n    // Return the URL of the uploaded object.\n    return putResult.getETag();\n}", "CodeBleu_score": 40.58665047204385}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t    IpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo(ipAddress, \"unknown\", \"unknown\", \"unknown\", \"unknown\");\n    }\n    return worker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 29.10156261873688}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t    IpToLocationWorker worker = getIpToLocationWorker()\n    if (!worker) {\n        return new LocationInfo(ipAddress, \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\", \"unknown\")\n    }\n\n    return worker.getLocationInfoByIp(ipAddress)\n}", "CodeBleu_score": 23.164962913372104}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t    IpToLocationWorker worker = ensureIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\");\n    }\n    return worker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 26.49199146690129}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\t    if (this.esClient != null) {\n        return;\n    }\n    synchronized (this) {\n        if (this.esClient != null) {\n            return;\n        }\n        // get the cluster hosts and ports\n        String hosts = getClusterHostList();\n        String ports = getClusterHostPort();\n        // parse the hosts and ports\n        String[] hostArray = parseHosts(hosts);\n        int[] portArray = parsePorts(ports);\n        // build the low-level and high-level REST clients\n        this.esClient = builder(hostArray, portArray).build();\n        this.esClientHL = new RestHighLevelClient(this.esClient);\n    }\n}", "CodeBleu_score": 46.594392241777896}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\n    if (esClient == null) {\n        synchronized (this) {\n            if (esClient == null) {\n                if (esClient == null) {\n                    // parse cluster hosts and ports\n                    String[] hosts = parseHosts(clusterHosts);\n                    int[] ports = parsePorts(clusterPorts);\n\n                    // build low-level REST client\n                    esClient = new RestClient(\n                            hosts.length,\n                            hosts,\n                            ports,\n                            clusterScheme,\n                            clusterUsername,\n                            clusterPassword,\n                            clusterSniff,\n                            clusterSnifferClassName,\n                            clusterSnifferDelay,\n                            clusterSnifferTimeout,\n                            clusterSnifferMaxRetries,\n                            clusterSnifferMaxContentLength,\n                            clusterSslEnabled,\n                            clusterSslKeyStoreLocation,\n                            clusterSslKeyStoreType,\n                            clusterSslKeyStorePassword,\n                            clusterSslTrustStoreLocation,\n                            clusterSslTrustStoreType,\n                            clusterSslTrustStorePassword,\n                            clusterSslKeyPassword,\n                            clusterSslContext,\n                            clusterSslContextParameters,\n                            clusterSslContextBuilder,\n                            clusterSslKeyAlias,\n                            clusterSslKeyAliasPassword,\n                            clusterSslContextAlias,\n                            clusterSslContextAliasPassword,\n                            clusterSslContextAliasKeyPassword,\n                            clusterSslContextAliasTrustManager,\n                            clusterSslContextAliasKeyManager,\n                            clusterSslContextAliasSecureRandom,\n                            clusterSslContextAliasSecureRandomAlgorithm,\n                            clusterSslContextAliasSecureRandomProvider,\n                            clusterSslContextAliasSecureRandomProviderAlgorithm,\n                            clusterSslContextAliasSecureRandomProviderParameters,\n                            clusterSslContextAliasSecureRandomProviderParametersAlgorithm,\n                            clusterSslContextAliasSecureRandomProviderParametersProvider,\n                            clusterSslContextAliasSecureRandomProviderParametersProviderAlgorithm,\n                            clusterSslContextAliasSecureRandom", "CodeBleu_score": 30.80462421005916}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t    if (client != null && client.get() != null && client.get().getLowLevelClient() != null && client.get().getLowLevelClient().ping()) {\n        return;\n    }\n\n    synchronized (this) {\n        if (client != null && client.get() != null && client.get().getLowLevelClient() != null && client.get().getLowLevelClient().ping()) {\n            return;\n        }\n\n        if (client == null) {\n            client = new AtomicReference<>(null);\n        }\n\n        if (client.get() == null) {\n            client.set(null);\n        }\n\n        if (client.get().getLowLevelClient() == null) {\n            client.get().setLowLevelClient(null);\n        }\n\n        if (client.get().getHighLevelClient() == null) {\n            client.get().setHighLevelClient(null);\n        }\n\n        if (client.get().getLowLevelClient() == null) {\n            client.get().setLowLevelClient(buildClient());\n        }\n\n        if (client.get().getHighLevelClient() == null) {\n            client.get().setHighLevelClient(buildClient());\n        }\n    }\n}", "CodeBleu_score": 34.04594346412631}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<HttpHost>();\n    String[] hostList = clusterHostList.split(\",\");\n    for (String host : hostList) {\n        String[] hostPort = host.split(\":\");\n        if (hostPort.length == 2) {\n            hosts.add(new HttpHost(hostPort[0], Integer.parseInt(hostPort[1]), \"http\"));\n        } else {\n            hosts.add(new HttpHost(hostPort[0], clusterPort, \"http\"));\n        }\n    }\n    return hosts;\n}", "CodeBleu_score": 45.15857277575759}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<>();\n    String[] hostList = clusterHostList.split(\",\");\n    for (String host : hostList) {\n        if (host.contains(\":\")) {\n            hosts.add(new HttpHost(host));\n        } else {\n            hosts.add(new HttpHost(host, clusterPort));\n        }\n    }\n    return hosts;\n}", "CodeBleu_score": 39.728841169349785}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<HttpHost>();\n    if (clusterHostList != null) {\n        String[] hostList = clusterHostList.split(\",\");\n        for (String host : hostList) {\n            if (host.contains(\":\")) {\n                String[] hostPort = host.split(\":\");\n                hosts.add(new HttpHost(hostPort[0], Integer.parseInt(hostPort[1]), \"http\"));\n            } else {\n                hosts.add(new HttpHost(host, clusterPort, \"http\"));\n            }\n        }\n    }\n    return hosts;\n}", "CodeBleu_score": 42.28184362825632}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\t    while (true) {\n        // Get the next task from the queue, with a timeout of 30 seconds\n        String task = queue.poll(30, TimeUnit.SECONDS);\n        if (task == null) {\n            // No task was retrieved within 30 seconds, so skip to the next iteration\n            continue;\n        }\n        // The task is a JSON string. Parse it into a JSON object\n        JSONObject taskObject = new JSONObject(task);\n        // Get the task type\n        String taskType = taskObject.getString(\"taskType\");\n        if (taskType.equals(\"plainTextMessage\")) {\n            // This is a plain text message task\n            // Extract the recipient number and message data\n            String recipientNumber = taskObject.getString(\"recipientNumber\");\n            String messageData = taskObject.getString(\"messageData\");\n            // Validate the data\n            if (recipientNumber.length() != 10) {\n                // The recipient number is invalid\n                System.out.println(\"Invalid recipient number\");\n                continue;\n            }\n            if (messageData.length() > 160) {\n                // The message data is too long\n                System.out.println(\"Message data too long\");\n                continue;\n            }\n            // Send the message\n            try {\n                sendPlainTextMessage(recipientNumber, messageData);\n            } catch (Exception e) {\n                // An exception occurred, so log an error message\n                System.out.println(\"Error sending message\");\n                e.printStackTrace();\n            }\n        }\n    }\n}", "CodeBleu_score": 31.1607928651548}, {"code": "protected void pollingWork() throws InterruptedException{\n\t    while (true) {\n        // poll for a task, with a 30-second timeout\n        final Task task = queue.poll(30, TimeUnit.SECONDS);\n        if (task != null) {\n            // check the task type\n            if (task instanceof PlainTextMessageTask) {\n                // cast the task to a PlainTextMessageTask\n                PlainTextMessageTask messageTask = (PlainTextMessageTask) task;\n                // extract the recipient number and message data\n                final String recipientNumber = messageTask.getRecipientNumber();\n                final String messageData = messageTask.getMessageData();\n                // validate the data\n                if (recipientNumber != null && messageData != null) {\n                    // send the message\n                    try {\n                        sendPlainTextMessage(recipientNumber, messageData);\n                    } catch (Exception e) {\n                        // log an error message\n                        logger.error(\"Error sending plain text message to \" + recipientNumber + \":\n\" + getStackTrace(e));\n                    }\n                }\n            } else {\n                // log an error message\n                logger.error(\"Unknown task type: \" + task.getClass().getName());\n            }\n        }\n    }\n}", "CodeBleu_score": 29.934986404163837}, {"code": "protected void pollingWork() throws InterruptedException{\n\t    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here\n    // TODO: Add your code here", "CodeBleu_score": 0.9021038343309515}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t    CloseableHttpClient httpclient = HttpClients.createDefault();\n    try {\n        HttpGet httpGet = new HttpGet(uri);\n        CloseableHttpResponse response = httpclient.execute(httpGet);\n        try {\n            HttpEntity entity = response.getEntity();\n            if (entity != null) {\n                String content = EntityUtils.toString(entity, \"UTF-8\");\n                log.info(content);\n                return content;\n            }\n        } finally {\n            response.close();\n        }\n    } finally {\n        httpclient.close();\n    }\n    return null;\n}", "CodeBleu_score": 50.67723797478016}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t    // Create HTTP client\n    CloseableHttpClient httpClient = HttpClients.createDefault();\n\n    // Create HTTP GET request\n    HttpGet httpGet = new HttpGet(uri);\n\n    // Execute the request\n    CloseableHttpResponse httpResponse = httpClient.execute(httpGet);\n\n    // Retrieve the response content\n    HttpEntity entity = httpResponse.getEntity();\n    String xml = EntityUtils.toString(entity, \"UTF-8\");\n\n    // Log the content\n    System.out.println(xml);\n\n    // Return the content\n    return xml;\n}", "CodeBleu_score": 52.92883870181239}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t    CloseableHttpClient httpClient = HttpClients.createDefault();\n    CloseableHttpResponse response = httpClient.execute(new HttpGet(uri));\n    try {\n        HttpEntity entity = response.getEntity();\n        String content = EntityUtils.toString(entity, \"UTF-8\");\n        log.info(content);\n        return content;\n    } finally {\n        response.close();\n        httpClient.close();\n    }\n}", "CodeBleu_score": 51.799596072087226}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t    DocumentBuilder documentBuilder = newDocumentBuilder();\n    Document document = documentBuilder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(\"UTF-8\")));\n    Element rootElement = document.getDocumentElement();\n    return decodeNodeToMap(rootElement, doTrim);\n}", "CodeBleu_score": 26.33493365402293}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\n\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument document = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes()));\n\n\tNodeList childNodes = document.getDocumentElement().getChildNodes();\n\treturn decodeNodeToMap(childNodes, doTrim);\n}", "CodeBleu_score": 42.00063000786295}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    Document doc = db.parse(new ByteArrayInputStream(messageXmlStr.getBytes()));\n    doc.getDocumentElement().normalize();\n    NodeList nodeList = doc.getDocumentElement().getChildNodes();\n    return decodeNodeToMap(nodeList.item(0), doTrim);\n}", "CodeBleu_score": 38.61617500423533}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tfinal IOrder order = orderBL.getOrderById(OrderId.ofRepoId(orderRecord.getC_Order_ID()));\n\n\tif (!isEligibleForAutoProcessing(order)) {\n\t\t// if the order is not eligible for auto-processing, then we schedule the creation of missing shipment schedules\n\t\tscheduleIfNotPostponed(order);\n\t} else {\n\t\t// if the order is eligible for auto-processing, then we enqueue the order for automatic shipping and invoicing\n\t\tfinal String trxName = getTrxName(orderRecord);\n\t\tfinal IOrderBL orderBL = Services.get(IOrderBL.class);\n\t\tfinal IOrderDAO orderDAO = Services.get(IOrderDAO.class);\n\t\tfinal IOrderLineBL orderLineBL = Services.get(IOrderLineBL.class);\n\t\tfinal IShipmentScheduleBL shipmentScheduleBL = Services.get(IShipmentScheduleBL.class);\n\t\tfinal IInvoiceScheduleBL invoiceScheduleBL = Services.get(IInvoiceScheduleBL.class);\n\n\t\tfinal List<I_C_OrderLine> orderLines = orderDAO.retrieveOrderLines(orderRecord);\n\t\tfinal List<I_C_OrderLine> orderLinesWithoutSchedules = orderLines\n\t\t\t\t.stream()\n\t\t\t\t.filter(orderLineBL::isNotScheduled)\n\t\t\t\t.collect(ImmutableList.toImmutableList());\n\n\t\tfinal List<I_C_OrderLine> orderLinesWithoutInvoiceSchedules = orderLinesWithoutSchedules\n\t\t\t\t.stream()\n\t\t\t\t.filter(orderLineBL::isNotInvoiced)\n\t\t\t\t.collect(ImmutableList.toImmutableList());\n\n\t\tfinal List<I_C_OrderLine> orderLinesWithoutShipmentSchedules = orderLinesWithoutInvoiceSchedules\n\t\t\t\t.stream()\n\t\t\t\t.filter(orderLineBL::isNotShipped)\n\t\t\t\t.collect(ImmutableList.toImmutableList());", "CodeBleu_score": 38.070848296165785}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tif (!isEligibleForAutoProcessing(orderRecord)) {\n\t\taddLog(orderRecord, \"Order is not eligible for auto-processing\");\n\t\treturn;\n\t}\n\n\tfinal I_C_Order order = ofRepoId(orderRecord.getC_Order_ID());\n\tfinal I_C_Order_Process orderProcess = Services.get(IOrderDAO.class).retrieveOrderProcess(order);\n\tfinal String trxName = getTrxName(orderProcess);\n\n\taddLog(orderRecord, \"Order is eligible for auto-processing\");\n\tscheduleIfNotPostponed(order, trxName);\n\n\tfinal I_C_Async_Batch asyncBatch = Services.get(IAsyncBatchDAO.class).createAsyncBatch(\n\t\t\tI_C_Async_Batch.class,\n\t\t\tAsyncBatchType.OrderAutoProcessing,\n\t\t\ttrxName);\n\n\tfinal I_C_Async_Batch_Type asyncBatchType = Services.get(IAsyncBatchDAO.class).retrieveAsyncBatchType(AsyncBatchType.OrderAutoProcessing);\n\n\tfinal I_C_Async_Batch_Workpackage_Candidate asyncBatchWorkpackageCandidate = Services.get(IAsyncBatchBL.class).createAsyncBatchWorkpackageCandidate(\n\t\t\tasyncBatch,\n\t\t\tasyncBatchType,\n\t\t\torder.getC_Order_ID(),\n\t\t\ttrxName);\n\n\tServices.get(IAsyncBatchBL.class).enqueueAsyncBatchWorkpackageCandidate(asyncBatchWorkpackageCandidate);\n}", "CodeBleu_score": 40.33686744655371}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tif (isEligibleForAutoProcessing(orderRecord))\n\t{\n\t\taddLog(\"@Processing@: @Auto@\");\n\t\tfinal String trxName = getTrxName();\n\t\tfinal int orderId = orderRecord.getC_Order_ID();\n\t\tServices.get(IOrderBL.class).schedule(orderId, trxName);\n\t}\n\telse\n\t{\n\t\taddLog(\"@Processing@: @Manual@\");\n\t\tif (!orderRecord.isPostponed())\n\t\t{\n\t\t\tfinal int orderId = orderRecord.getC_Order_ID();\n\t\t\tServices.get(IOrderBL.class).createMissingShipmentSchedules(orderId);\n\t\t}\n\t}\n}", "CodeBleu_score": 33.1351703739266}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = User::where('email', $request->email)->first();\n\n    if ($user && $this->guard->getProvider()->validateCredentials($user, $request->only('password'))) {\n        return $user;\n    }\n\n    $this->fireFailedEvent($request);\n\n    $this->throwFailedAuthenticationException($request);\n}", "CodeBleu_score": 53.860010757550825}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = User::where('email', $request->email)->first();\n\n    if ($user && $this->guard->getProvider()->validateCredentials($user, $request->only('password'))) {\n        $this->fireSuccessfulLogin($user);\n        return $user;\n    }\n\n    $this->fireFailedEvent($user, $request);\n    $this->throwFailedAuthenticationException($request);\n}", "CodeBleu_score": 56.346741531067714}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = User::where('email', $request->email)->first();\n\n    if ($user && $this->guard->getProvider()->validateCredentials($user, $request->only('password'))) {\n        return $user;\n    }\n\n    $this->fireFailedEvent($user, $request);\n\n    throw new AuthenticationException();\n}", "CodeBleu_score": 49.69222398436496}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter->increment($this->throttleKey($request));\n\n    throw ValidationException::withMessages([\n        'email' => [__($this->username()) . ' ' . __('auth.failed')],\n    ]);\n}", "CodeBleu_score": 64.36351994597821}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter->increment($this->throttleKey($request));\n\n    throw ValidationException::withMessages([\n        'email' => [__($this->auth->getProvider()->getConfig('invalid_message'))],\n    ]);\n}", "CodeBleu_score": 61.35224080724569}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter->hit($this->throttleKey($request));\n    $this->limiter->increment($this->throttleKey($request));\n    throw ValidationException::withMessages([\n        $this->username() => [__($this->getFailedLoginMessage())],\n    ]);\n}", "CodeBleu_score": 48.55115938368944}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t    $user = $request->user();\n\n    $data = [\n        'id' => $user->id,\n        'name' => $user->name,\n        'email' => $user->email,\n        'twoFactor' => optional($user)->two_factor_secret && ! is_null(optional($user)->two_factor_confirmed_at),\n        'remember' => $request->session()->get('login.remember'),\n    ];\n\n    $data['publicKey'] = Webauthn::prepareAssertion(\n        $user->id,\n        $user->two_factor_secret,\n        $request->session()->get('login.remember')\n    );\n\n    return Inertia::render('Auth/TwoFactorChallenge', $data)->toResponse($request);\n}", "CodeBleu_score": 58.464939018848014}, {"code": "<?\npublic function toResponse($request){\n\t    $data = [\n        'user' => $request->user(),\n    ];\n\n    $user = $request->user();\n\n    $data = array_merge($data, [\n        'twoFactor' => optional($user)->two_factor_secret && ! is_null(optional($user)->two_factor_confirmed_at),\n        'remember' => $request->session()->get('login.remember'),\n    ]);\n\n    return Inertia::render('Auth/TwoFactorChallenge', $data)->toResponse($request);\n}", "CodeBleu_score": 58.669469526177856}, {"code": "<?\npublic function toResponse($request){\n\t    $data = [\n        'id' => $request->session()->get('login.id'),\n        'remember' => $request->session()->get('login.remember'),\n    ];\n\n    $user = User::find($data['id']);\n\n    if ($user && $user->two_factor_secret && ! is_null($user->two_factor_confirmed_at)) {\n        $data['twoFactor'] = true;\n        $data['publicKey'] = $user->twoFactorQrCodeSvg();\n    }\n\n    return Inertia::render('Auth/TwoFactorChallenge', $data + [\n        'twoFactor' => optional($user)->two_factor_secret && ! is_null(optional($user)->two_factor_confirmed_at),\n        'remember' => $request->session()->get('login.remember'),\n    ])->toResponse($request);\n}", "CodeBleu_score": 64.84214014022052}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    $userToken = UserToken::firstWhere([\n        'driver' => $driver,\n        'socialite_id' => $socialite->getId(),\n    ]);\n\n    if ($userToken) {\n        $this->checkUserAssociation($userToken, $socialite);\n\n        return $userToken->user;\n    }\n\n    return $this->getUserOrCreate($request, $driver, $socialite);\n}", "CodeBleu_score": 42.12755493444923}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    $userToken = UserToken::firstWhere([\n        'driver' => $driver,\n        'token' => $socialite->getId(),\n    ]);\n\n    if ($userToken) {\n        $user = $this->getUserOrCreate($userToken, $socialite);\n        $this->checkUserAssociation($userToken, $user);\n    } else {\n        $user = $this->createUserToken($request, $driver, $socialite);\n    }\n\n    return $user;\n}", "CodeBleu_score": 53.905832452153255}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    $userToken = UserToken::firstWhere('driver', $driver, 'socialite_id', $socialite->getId());\n    if ($userToken) {\n        $user = $this->getUserOrCreate($userToken, $socialite);\n        $this->checkUserAssociation($user, $userToken, $socialite);\n        return $user;\n    }\n\n    $user = $this->createUserToken($request, $driver, $socialite);\n    return $user;\n}", "CodeBleu_score": 46.9353502972238}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    if (! $user = $request->user()) {\n        return false;\n    }\n\n    if (! $this->filterCredentials($request)->fails()) {\n        $this->fireFailedEvent($user, $request);\n\n        $this->throwFailedAuthenticationException($request);\n\n        return false;\n    }\n\n    return $this->validateAssertion($request, $user);\n}", "CodeBleu_score": 53.68802783420477}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $user = $request->user();\n\n    if (! $user) {\n        return false;\n    }\n\n    $this->filterCredentials($request);\n\n    $this->fireFailedEvent($user);\n\n    if (! WebauthnFacade::validateAssertion($user, $request->credentials())) {\n        $this->throwFailedAuthenticationException();\n\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 56.251500966901055}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    if (! $user = $request->user()) {\n        return false;\n    }\n\n    $this->filterCredentials($request);\n\n    if (! $this->fireFailedEvent($request, $user)) {\n        return false;\n    }\n\n    if (! $this->validateAssertion($request, $user)) {\n        $this->throwFailedAuthenticationException($request, $user);\n\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 55.84658519527815}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\t    $email = $this->option('email');\n\n    if (! $email) {\n        $this->error('An email address is required.');\n\n        return null;\n    }\n\n    try {\n        return User::where('email', $email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error('User not found.');\n\n        return null;\n    }\n}", "CodeBleu_score": 71.50861008123815}, {"code": "<?\nprivate function user(): ?User{\n\t    $email = $this->option('email');\n\n    if (! $email) {\n        $this->error('Please provide an email address.');\n\n        return null;\n    }\n\n    try {\n        return User::where('email', $email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error(\"User with email {$email} not found.\");\n\n        return null;\n    }\n}", "CodeBleu_score": 73.35381045778897}, {"code": "<?\nprivate function user(): ?User{\n\t    $email = $this->argument('email');\n    if (! $email) {\n        $this->error('Please provide an email address.');\n\n        return null;\n    }\n\n    try {\n        return User::where('email', $email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error('User not found.');\n\n        return null;\n    }\n}", "CodeBleu_score": 74.05872496886138}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\t    if ($this->option('flush') && config('scout.driver') === 'meilisearch') {\n        $this->info('Flushing Meilisearch indexes...');\n        foreach (config('scout.meilisearch.indexes') as $index => $meilisearchConfig) {\n            $table = (new $index)->getTable();\n            $this->call('scout:flush', [\n                '--model' => $index,\n                '--index' => $meilisearchConfig['name'],\n                '--key' => $meilisearchConfig['key'],\n                '--host' => $meilisearchConfig['host'],\n                '--async' => true,\n            ]);\n            $this->info(\"Flushed index [$table].\");\n        }\n    }\n}", "CodeBleu_score": 57.19562580552642}, {"code": "<?\nprotected function scoutFlush(): void{\n\t    if ($this->option('flush') && $this->meilisearch) {\n        $indexes = $this->meilisearch->getIndexes();\n        foreach ($indexes as $index) {\n            $table = (new $index)->getTable();\n            $this->info(\"Flushing index: $table\");\n            $this->call('scout:flush', [\n                'model' => $index,\n            ]);\n        }\n        $this->info('Indexes flushed.');\n    }\n}", "CodeBleu_score": 55.96875643861128}, {"code": "<?\nprotected function scoutFlush(): void{\n\t    $meilisearch = $this->option('meilisearch');\n    $flush = $this->option('flush');\n    $scoutDriver = config('scout.driver');\n    if ($flush && $meilisearch && $scoutDriver === 'meilisearch') {\n        $indexes = config('scout.meilisearch.indexes');\n        foreach ($indexes as $index) {\n            $table = (new $index)->getTable();\n            $this->info(\"Flushing $table index\");\n            $this->call('scout:flush', ['model' => $index]);\n            $this->info(\"Flushed $table index\");\n        }\n    }\n}", "CodeBleu_score": 50.866418865332896}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    $vcard = $this->getSource($resource);\n    if ($vcard === null) {\n        $vcard = new VCard();\n        $vcard->setUID($resource->getId());\n    }\n    foreach ($this->exporters as $exporter) {\n        $exporter->export($resource, $vcard);\n    }\n    return $vcard;\n}", "CodeBleu_score": 24.184900498044026}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    $vCard = $this->getSource($resource);\n\n    if ($vCard === null) {\n        $vCard = new VCard();\n        $vCard->setUID(uniqid('', true));\n    }\n\n    foreach ($this->exporters as $exporter) {\n        $exporter->export($vCard, $resource);\n    }\n\n    return $vCard;\n}", "CodeBleu_score": 20.496257244150367}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    $vcard = $this->getSource($resource);\n    if (!$vcard) {\n        $vcard = new VCard();\n        $vcard->setUID($resource->getUid());\n    }\n\n    foreach ($this->exporters as $exporter) {\n        $exporter->export($resource, $vcard);\n    }\n\n    return $vcard;\n}", "CodeBleu_score": 23.990172206293717}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t        $obj = $this->getObject($addressBookId, $cardUri);\n        if ($obj === false) {\n            return false;\n        }\n        if ($obj->type == 'contact') {\n            DestroyContact::dispatch([\n                'account_id' => $this->user->account_id,\n                'author_id' => $this->user->id,\n                'vault_id' => $obj->vault_id,\n                'contact_id' => $obj->id,\n            ])->onQueue('high');\n        } elseif ($obj->type == 'group') {\n            DestroyGroup::dispatch([\n                'account_id' => $this->user->account_id,\n                'author_id' => $this->user->id,\n                'vault_id' => $obj->vault_id,\n                'group_id' => $obj->id,\n            ])->onQueue('high');\n        } else {\n            return false;\n        }\n        return true;\n    }", "CodeBleu_score": 76.10004814409544}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $addressBook = $this->getObject($addressBookId);\n    if (!$addressBook) {\n        return false;\n    }\n    $card = $this->getObject($cardUri);\n    if (!$card) {\n        return false;\n    }\n    if ($card->objectType === 'contact') {\n        DestroyContact::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $addressBook->vault_id,\n            'contact_id' => $card->id,\n        ])->onQueue('high');\n    } else if ($card->objectType === 'group') {\n        DestroyGroup::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $addressBook->vault_id,\n            'group_id' => $card->id,\n        ])->onQueue('high');\n    } else {\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 58.79225970354446}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $obj = $this->getObject($addressBookId, $cardUri);\n    if ($obj === false) {\n        return false;\n    }\n    if ($obj->type == 'contact') {\n        DestroyContact::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'contact_id' => $obj->id,\n        ])->onQueue('high');\n        return true;\n    }\n    if ($obj->type == 'group') {\n        DestroyGroup::dispatch([\n            'account_id' => $this->user->account_id,\n            'author_id' => $this->user->id,\n            'vault_id' => $obj->vault_id,\n            'group_id' => $obj->id,\n        ])->onQueue('high');\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 80.89842185365757}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\t    if (!request()->hasFile('file')) {\n        return;\n    }\n    $activity = $this->activityRepository->create($data);\n    $file = request()->file('file')->store('lead_activities/' . $activity->id);\n    return $this->leadActivityFileRepository->create(['lead_activity_id' => $activity->id, 'file' => $file]);\n}", "CodeBleu_score": 42.488515744728815}, {"code": "<?\npublic function upload(array $data){\n\t    if (!request()->hasFile('file')) {\n        return;\n    }\n\n    $this->activityRepository->create([\n        'lead_id' => $data['lead_id'],\n        'user_id' => auth()->guard()->user()->id,\n        'type' => $data['type'],\n        'description' => $data['description'],\n    ]);\n\n    return $this->create([\n        'lead_activity_id' => $this->activityRepository->getLastRecord()->id,\n        'name' => request()->file('file')->getClientOriginalName(),\n        'path' => request()->file('file')->store('lead_activities'),\n    ]);\n}", "CodeBleu_score": 41.27298683795025}, {"code": "<?\npublic function upload(array $data){\n\t    if (!request()->hasFile('file')) {\n        return;\n    }\n\n    $this->activityRepository->create($data);\n\n    return $this->create([\n        'name' => request()->file('file')->getClientOriginalName(),\n        'path' => request()->file('file')->store('public/lead-activities')\n    ]);\n}", "CodeBleu_score": 27.98089979722941}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    if ($exception instanceof ModelNotFoundException) {\n        $model = strtolower(class_basename($exception->getModel()));\n        return redirect()->route('admin.'.$model.'.index')->with('error', 'The '.$model.' you are looking for was not found.');\n    }\n\n    if ($exception instanceof NotFoundHttpException) {\n        if (request()->routeIs('admin.*')) {\n            return redirect()->route('admin.dashboard');\n        }\n\n        return redirect()->route('front.home')->with('error', 'The page you are looking for was not found.');\n    }\n\n    if ($exception instanceof PDOException) {\n        return redirect()->back()->with('error', 'The page you are looking for was not found.');\n    }\n\n    if ($exception instanceof ParseError) {\n        return redirect()->back()->with('error', 'The page you are looking for was not found.');\n    }\n\n    if ($exception instanceof AuthenticationException) {\n        if (request()->routeIs('admin.*')) {\n            return redirect()->route('admin.login');\n        }\n\n        return redirect()->route('front.home')->with('error', 'You need to be logged in to access this page.');\n    }\n\n    if ($exception instanceof AuthorizationException) {\n        return redirect()->back()->with('error', 'You are not authorized to access this page.');\n    }\n\n    if ($exception instanceof MethodNotAllowedHttpException) {\n        return redirect()->back()->with('error', 'The page you are looking for was not found.');\n    }\n\n    if ($exception instanceof ValidationException) {\n        return redirect()->back()->with('error', 'The page you are looking for was not found.');\n    }\n\n    if ($exception instanceof HttpException) {\n        $statusCode = $exception->getStatusCode();\n        $response = $this->response->setStatusCode($statusCode);\n        return $response->withError('The page you are looking for was not found.');\n    }\n\n    if ($exception instanceof TokenMismatchException) {\n        return redirect()->back()->with('error', 'The page you are looking for was not found.');\n    }\n\n    if ($exception instanceof Thrott", "CodeBleu_score": 43.73143845078917}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    if ($exception instanceof ModelNotFoundException) {\n        $model = strtolower(class_basename($exception->getModel()));\n        return response()->view('errors.404', ['model' => $model], 404);\n    }\n\n    if ($exception instanceof PDOException) {\n        return response()->view('errors.500', [], 500);\n    }\n\n    if ($exception instanceof ParseError) {\n        return response()->view('errors.500', [], 500);\n    }\n\n    if ($exception instanceof HttpException) {\n        $statusCode = $exception->getStatusCode();\n        return response()->view('errors.' . $statusCode, [], $statusCode);\n    }\n\n    return $this->prepareResponse($request, $exception);\n}", "CodeBleu_score": 49.01720012590016}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    if ($this->isFrontRoute($request)) {\n        if ($exception instanceof ModelNotFoundException) {\n            return response()->view('errors.404', [], 404);\n        }\n        if ($exception instanceof PDOException) {\n            return response()->view('errors.500', [], 500);\n        }\n        if ($exception instanceof ParseError) {\n            return response()->view('errors.500', [], 500);\n        }\n        if ($exception instanceof NotFoundHttpException) {\n            return response()->view('errors.404', [], 404);\n        }\n        if ($exception instanceof MethodNotAllowedHttpException) {\n            return response()->view('errors.404', [], 404);\n        }\n        if ($exception instanceof UnauthorizedException) {\n            return redirect()->route('admin.login');\n        }\n    }\n    if ($this->isAdminRoute($request)) {\n        if ($exception instanceof ModelNotFoundException) {\n            return response()->view('errors.404', [], 404);\n        }\n        if ($exception instanceof PDOException) {\n            return response()->view('errors.500', [], 500);\n        }\n        if ($exception instanceof ParseError) {\n            return response()->view('errors.500', [], 500);\n        }\n        if ($exception instanceof NotFoundHttpException) {\n            return response()->view('errors.404', [], 404);\n        }\n        if ($exception instanceof MethodNotAllowedHttpException) {\n            return response()->view('errors.404', [], 404);\n        }\n        if ($exception instanceof UnauthorizedException) {\n            return redirect()->route('admin.login');\n        }\n    }\n    if ($exception instanceof UnauthorizedException) {\n        return redirect()->route('admin.login');\n    }\n    if ($exception instanceof ModelNotFoundException) {\n        return response()->view('errors.404', [], 404);\n    }\n    if ($exception instanceof PDOException) {\n        return response()->view('errors.500', [], 500);\n    }\n    if ($", "CodeBleu_score": 28.359870176743158}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json(['message' => $path], $statusCode);\n    }\n\n    return response()->view('errors.' . $statusCode, ['path' => $path], $statusCode);\n}", "CodeBleu_score": 51.14165234179106}, {"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json([\n            'message' => $path\n        ], $statusCode);\n    }\n\n    return response()->view('errors.' . $statusCode, [\n        'path' => $path\n    ], $statusCode);\n}", "CodeBleu_score": 59.98617666631889}, {"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json([\n            'error' => $path . ' ' . $statusCode\n        ], $statusCode);\n    }\n\n    return response()->view('errors/' . $statusCode, [\n        'path' => $path\n    ], $statusCode);\n}", "CodeBleu_score": 58.108132178949745}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t    $ids = request()->input('ids');\n    $data = request()->input('data');\n\n    $updates = 0;\n\n    foreach ($ids as $id) {\n        $activity = $this->activityRepository->getById($id);\n        $this->dispatch(new ActivityIsDoneUpdating($activity, $data['is_done']));\n        $this->activityRepository->update($id, ['is_done' => $data['is_done']]);\n        $updates++;\n        $this->dispatch(new ActivityIsDoneUpdated($activity, $data['is_done']));\n    }\n\n    if ($updates) {\n        return response()->json([\n            'status' => 'success',\n            'message' => trans('texts.updated_activities', ['count' => $updates])\n        ]);\n    } else {\n        return response()->json([\n            'status' => 'failure',\n            'message' => trans('texts.no_activities_were_updated')\n        ]);\n    }\n}", "CodeBleu_score": 43.18491724949789}, {"code": "<?\npublic function massUpdate(){\n\t    $ids = request()->get('ids');\n    $isDone = request()->get('is_done');\n\n    $count = 0;\n\n    foreach ($ids as $id) {\n        $activity = $this->activityRepository->update($id, ['is_done' => $isDone]);\n\n        if ($activity) {\n            $count++;\n            Event::dispatch('activity.updated', $activity);\n        }\n    }\n\n    if ($count > 0) {\n        Event::dispatch('activity.mass_updated', $ids);\n\n        return response()->json(['message' => trans('admin::app.activities.mass-update-success')], 200);\n    } else {\n        return response()->json(['message' => trans('admin::app.activities.mass-update-failure')], 400);\n    }\n}", "CodeBleu_score": 54.63959865902991}, {"code": "<?\npublic function massUpdate(){\n\t    $ids = request()->all()['ids'];\n    $updates = 0;\n\n    foreach ($ids as $id) {\n        $activity = $this->activityRepository->update($id, request()->all());\n\n        if ($activity) {\n            $updates++;\n\n            Event::dispatch(new ActivityUpdated($activity));\n        }\n    }\n\n    return response()->json([\n        'success' => $updates > 0,\n        'message' => $updates > 0 ? 'Activities updated' : 'No activities updated'\n    ]);\n}", "CodeBleu_score": 38.99792096393056}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t        $ids = request('ids');\n\n        foreach ($ids as $id) {\n            $activity = $this->activityRepository->find($id);\n            $activity->delete();\n            Event::dispatch(new ActivityDeleted($activity));\n        }\n\n        return response()->json([\n            'message' => trans('admin.activities.mass_destroyed')\n        ], 200);\n    }", "CodeBleu_score": 36.25431809740979}, {"code": "<?\n public function massDestroy(){\n\t        $request = request();\n        $ids = $request->input('ids');\n\n        $activities = $this->activityRepository->getByIds($ids);\n\n        foreach ($activities as $activity) {\n            $this->dispatcher->dispatch(new ActivityWasDeleted($activity));\n        }\n\n        $this->activityRepository->delete($ids);\n\n        return response()->json([\n            'message' => trans('admin::app.activities.mass-delete-success'),\n        ]);\n    }", "CodeBleu_score": 35.48081936474131}, {"code": "<?\n public function massDestroy(){\n\t        $ids = request('ids');\n        $count = 0;\n        foreach ($ids as $id) {\n            $activity = $this->activityRepository->find($id);\n            if (empty($activity)) {\n                continue;\n            }\n            $this->dispatcher->dispatch(new ActivityDeleting($activity));\n            $this->activityRepository->delete($id);\n            $this->dispatcher->dispatch(new ActivityDeleted($activity));\n            $count++;\n        }\n        return response()->json([\n            'message' => trans('admin::app.activities.mass-delete-success', ['count' => $count]),\n        ]);\n    }", "CodeBleu_score": 32.22470593056798}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t    $cards = $this->dashboardHelper->getCards();\n    $data = request()->all();\n    foreach ($cards as $card) {\n        if (isset($data[$card->id])) {\n            $card->selected = true;\n        } else {\n            $card->selected = false;\n        }\n    }\n    return response()->json($cards);\n}", "CodeBleu_score": 37.564311743612784}, {"code": "<?\n public function updateCards(){\n\t\n    $cards = $this->dashboardHelper->getCards();\n\n    foreach (request()->all() as $card) {\n        foreach ($cards as $key => $value) {\n            if ($card['id'] == $value['id']) {\n                $cards[$key]['selected'] = $card['selected'];\n            }\n        }\n    }\n\n    return response()->json($cards);\n}", "CodeBleu_score": 45.09450413709664}, {"code": "<?\n public function updateCards(){\n\t\n    // Retrieve the current cards\n    $cards = $this->dashboardHelper->getCards();\n\n    // Iterate through the request data\n    foreach (request()->all() as $card => $value) {\n\n        // Match the current card to the request data\n        if ($card == $value) {\n\n            // Update the 'selected' status of the current card\n            $cards[$card]['selected'] = true;\n\n        } else {\n\n            // Update the 'selected' status of the current card\n            $cards[$card]['selected'] = false;\n        }\n    }\n\n    // Return the updated cards as a JSON response\n    return response()->json($cards);\n}", "CodeBleu_score": 35.431485225245915}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t    Event::dispatch('configuration.create.before');\n\n    $configuration = $this->configurationRepository->create(request()->all());\n\n    Event::dispatch('configuration.create.after', $configuration);\n\n    session()->flash('success', trans('admin::app.response.create-success', ['name' => 'Configuration']));\n\n    return redirect()->back();\n}", "CodeBleu_score": 41.63379229395574}, {"code": "<?\npublic function store(){\n\t    Event::dispatch('configuration.create.before');\n\n    $configuration = $this->configurationRepository->create(request()->all());\n\n    Event::dispatch('configuration.create.after', $configuration);\n\n    session()->flash('success', trans('admin::app.configuration.save-message'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 54.587997613940374}, {"code": "<?\npublic function store(){\n\t    Event::dispatch('configuration.create.before');\n\n    $this->configurationRepository->create(request()->all());\n\n    Event::dispatch('configuration.create.after');\n\n    session()->flash('success', trans('admin::app.response.create-success', ['name' => 'Configuration']));\n\n    return redirect()->back();\n}", "CodeBleu_score": 44.247302747276294}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t    $path = request()->route()->parameters()['path'];\n    $fileName = $this->configurationRepository->findOneByField('configuration_key', $path)->configuration_value;\n    return Storage::download($fileName);\n}", "CodeBleu_score": 64.21312027659675}, {"code": "<?\npublic function download(){\n\t    $fileName = request()->route()->parameters()['file'];\n    $filePath = $this->getFilePath($fileName);\n    $file = $this->configurationRepository->findOneByField('value', $filePath);\n\n    return Storage::download($filePath, $file->name);\n}", "CodeBleu_score": 57.77375690579192}, {"code": "<?\npublic function download(){\n\t    $path = request()->route()->parameters()['path'];\n    $fullPath = $this->getFullPath($path);\n    $configuration = $this->configurationRepository->findOneByField('value', $fullPath);\n\n    if ($configuration) {\n        return Storage::download($fullPath);\n    }\n}", "CodeBleu_score": 58.26579324470427}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    List<AdminModelSort> list1 = new ArrayList<AdminModelSort>();\n    for (String s : list) {\n        AdminModelSort ams = new AdminModelSort();\n        ams.setModel(s);\n        ams.setSort(1);\n        ams.setType(1);\n        list1.add(ams);\n    }\n    setSort(list1);\n    remove();\n    saveBatch();\n    return ok();\n}", "CodeBleu_score": 25.093101124058215}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t  List<AdminModelSort> list = new ArrayList<>();\n  list.add(new AdminModelSort(ModelName.USER, \"userId\", Sort.ASC));\n  list.add(new AdminModelSort(ModelName.USER, \"firstName\", Sort.ASC));\n  list.add(new AdminModelSort(ModelName.USER, \"lastName\", Sort.ASC));\n  list.add(new AdminModelSort(ModelName.USER, \"email\", Sort.ASC));\n  list.add(new AdminModelSort(ModelName.USER, \"isHidden\", Sort.ASC));\n  list.add(new AdminModelSort(ModelName.USER, \"created\", Sort.DESC));\n  list.add(new AdminModelSort(ModelName.USER, \"updated\", Sort.DESC));\n\n  // Remove existing sort settings for the user\n  adminModelSortService.remove(getUserId());\n\n  // Save the new sort settings in batch\n  adminModelSortService.saveBatch(list);\n\n  return ok();\n}", "CodeBleu_score": 34.06607227563615}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\tList<AdminModelSort> list2 = new ArrayList<AdminModelSort>();\n\tfor (String s : list) {\n\t\tAdminModelSort sort = new AdminModelSort();\n\t\tsort.setModel(s);\n\t\tsort.setSort(AdminModelSort.Sort.ASC);\n\t\tsort.setType(AdminModelSort.Type.MODEL);\n\t\tlist2.add(sort);\n\t}\n\treturn setSort(list2);\n}", "CodeBleu_score": 24.999346525918437}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    ModuleSettingBO currentModuleSetting = moduleSettingService.getModuleSettingBySettingId(moduleSetting.getSettingId());\n    if (currentModuleSetting.getModule().equals(CRM)) {\n        return new Result(false, \"This module is CRM. Please update the module configuration in the CRM module.\");\n    }\n    currentModuleSetting.setStatus(moduleSetting.getStatus());\n    moduleSettingService.saveModuleSetting(currentModuleSetting);\n    return new Result(true, \"Successfully updated module setting.\");\n}", "CodeBleu_score": 44.85485465611314}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    try {\n        AdminConfiguration adminConfiguration = adminConfigurationService.getById(moduleSetting.getSettingId());\n        if (adminConfiguration.getModule().equals(AdminConfiguration.Module.CRM)) {\n            return new Result(false, \"CRM is not allowed to be disabled\");\n        } else {\n            adminConfiguration.setStatus(moduleSetting.getStatus());\n            adminConfigurationService.save(adminConfiguration);\n            return new Result(true, \"Setting updated successfully\");\n        }\n    } catch (Exception e) {\n        return new Result(false, \"Error updating setting\");\n    }\n}", "CodeBleu_score": 46.79529223563401}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    try {\n        ModuleSetting moduleSettingObj = moduleSettingBO.getModuleSettingById(moduleSetting.getSettingId());\n        if (moduleSettingObj.getModule().equals(Module.CRM)) {\n            return new Result(Status.ERROR, \"Can not update crm module setting\");\n        }\n        moduleSettingObj.setStatus(moduleSetting.getStatus());\n        moduleSettingBO.updateModuleSetting(moduleSettingObj);\n        return new Result(Status.OK, \"Successfully updated module setting\");\n    } catch (Exception e) {\n        return new Result(Status.ERROR, e.getMessage());\n    }\n}", "CodeBleu_score": 46.66187029304307}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t        try {\n            String userId = getUserId();\n            if(userId == null){\n                return Result.fail(\"Please login first\");\n            }\n            UserConfig userConfig = userConfigService.getUserConfigByName(userId,customKey);\n            if(userConfig == null){\n                userConfig = new UserConfig();\n                userConfig.setUserId(userId);\n                userConfig.setName(customKey);\n                userConfig.setValue(json.toJSONString());\n                userConfigService.save(userConfig);\n            }else{\n                userConfig.setValue(json.toJSONString());\n                userConfigService.updateById(userConfig);\n            }\n            return Result.success();\n        } catch (Exception e) {\n            return Result.fail(e.getMessage());\n        }\n    }", "CodeBleu_score": 49.679255042185574}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t        JSONObject jsonObject = new JSONObject();\n        jsonObject.put(\"customKey\",customKey);\n        jsonObject.put(\"customValue\",json);\n        UserConfig userConfig = userConfigService.queryUserConfigByName(jsonObject);\n        if(userConfig!=null){\n            userConfig.setValue(json);\n            userConfigService.updateById(userConfig);\n        }else{\n            UserConfig userConfig1 = new UserConfig();\n            userConfig1.setName(customKey);\n            userConfig1.setValue(json);\n            userConfigService.save(userConfig1);\n        }\n        return Result.success();\n    }", "CodeBleu_score": 47.68309040945768}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t        UserConfig userConfig = new UserConfig();\n        userConfig.setName(customKey);\n        userConfig.setUserId(getUserId());\n        UserConfig userConfig1 = userConfigService.queryUserConfigByName(userConfig);\n        if(userConfig1 != null){\n            userConfig.setValue(json);\n            userConfigService.updateById(userConfig);\n        }else{\n            userConfig.setValue(json);\n            userConfigService.save(userConfig);\n        }\n        return Result.success(userConfig);\n    }", "CodeBleu_score": 48.558719749222824}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser user = adminUserService.getById(userId);\n    if (user == null) {\n        return Result.fail(\"User not found\");\n    }\n    user.setDeptName(adminUserService.getDeptName(userId));\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.success(user);\n}", "CodeBleu_score": 40.46714374389453}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser user = userService.getById(userId);\n    String deptName = deptService.getNameByDeptId(user.getDeptId());\n    user.setDeptName(deptName);\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.success(user);\n}", "CodeBleu_score": 51.61044708666475}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser user = adminUserService.getById(userId);\n    String deptName = adminDeptService.getNameByDeptId(user.getDeptId());\n    user.setDeptName(deptName);\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.success(user);\n}", "CodeBleu_score": 54.2192180361493}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t \n \tfinal String userId = getUserId();\n \t\n \tList<ReadNotice> readNoticeList = ReadNotice.find.where().eq(\"userId\", userId).findList();\n \t\n \tif (readNoticeList.size() > 1) {\n \t\t\n \t\tfor (ReadNotice readNotice : readNoticeList) {\n \t\t\treadNotice.setStatus(1);\n \t\t\treadNotice.update();\n \t\t}\n \t\t\n \t} else {\n \t\t\n \t\tReadNotice readNotice = new ReadNotice();\n \t\treadNotice.setUserId(userId);\n \t\treadNotice.setStatus(1);\n \t\treadNotice.save();\n \t\t\n \t}\n \t\n \treturn ok(\"success\");\n \t\n }", "CodeBleu_score": 29.40644690802291}, {"code": " public Result readNotice() {\n\t\n \t// Retrieve the user ID\n \tString userId = getUserId();\n\n \t// Check if there are multiple \"readNotice\" entries for the user\n \tList<Notice> noticeList = Notice.find.where().eq(\"userId\", userId).findList();\n \tif(noticeList.size() > 1) {\n \t\t// Update the status to 1 for all matching entries\n \t\tfor(Notice notice : noticeList) {\n \t\t\tnotice.status = 1;\n \t\t\tnotice.update();\n \t\t}\n \t} else {\n \t\t// Create a new \"readNotice\" entry with status 1 and save it\n \t\tNotice notice = new Notice();\n \t\tnotice.userId = userId;\n \t\tnotice.status = 1;\n \t\tnotice.save();\n \t}\n\n \t// Return a success result\n \treturn ok(Json.toJson(new Result(true)));\n }", "CodeBleu_score": 23.20048556417159}, {"code": " public Result readNotice() {\n\t \n \t// Retrieves the user ID from the session\n \tString userId = session(\"userId\");\n \t\n \t// Checks if there are multiple \"readNotice\" entries for the user\n \tint count = 0;\n \t\n \ttry {\n \t\tcount = Ebean.find(ReadNotice.class).where().eq(\"userId\", userId).findRowCount();\n \t} catch (Exception e) {\n \t\te.printStackTrace();\n \t}\n \t\n \t// If there are multiple entries, it updates the status to 1 for all matching entries\n \tif (count > 1) {\n \t\ttry {\n \t\t\tEbean.update(Ebean.find(ReadNotice.class).where().eq(\"userId\", userId).findList());\n \t\t} catch (Exception e) {\n \t\t\te.printStackTrace();\n \t\t}\n \t}\n \t\n \t// If there is only one entry, it updates the status to 1 for the matching entry\n \telse if (count == 1) {\n \t\ttry {\n \t\t\tEbean.update(Ebean.find(ReadNotice.class).where().eq(\"userId\", userId).findUnique());\n \t\t} catch (Exception e) {\n \t\t\te.printStackTrace();\n \t\t}\n \t}\n \t\n \t// If there are no entries, it creates a new \"readNotice\" entry with status 1 and saves it\n \telse {\n \t\ttry {\n \t\t\tReadNotice readNotice = new ReadNotice();\n \t\t\treadNotice.setUserId(userId);\n \t\t\treadNotice.setStatus(1);\n \t\t\treadNotice.save();\n \t\t} catch (Exception e) {\n \t\t\te.printStackTrace();\n \t\t}\n \t}\n \t\n \t// Returns a success result\n \treturn ok();\n }", "CodeBleu_score": 38.32455846060382}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\n    AdminConfigBO adminConfigBO = adminConfigDAO.findByName(\"companyInfo\");\n    if (adminConfigBO == null) {\n        adminConfigBO = new AdminConfigBO();\n        adminConfigBO.setName(\"companyInfo\");\n        adminConfigBO.setDescription(\"company information\");\n        adminConfigBO.setStatus(1);\n        adminConfigBO.setValue(adminCompanyBO.toJSONString());\n        adminConfigDAO.save(adminConfigBO);\n    } else {\n        adminConfigBO.setValue(adminCompanyBO.toJSONString());\n        adminConfigDAO.saveOrUpdate(adminConfigBO);\n    }\n}", "CodeBleu_score": 38.16563074453762}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    AdminConfigBO adminConfigBO = adminConfigService.getAdminConfigByName(AdminConfigName.COMPANY_INFO.name());\n    if (adminConfigBO == null) {\n        adminConfigBO = new AdminConfigBO();\n        adminConfigBO.setName(AdminConfigName.COMPANY_INFO.name());\n        adminConfigBO.setDescription(AdminConfigName.COMPANY_INFO.description());\n        adminConfigBO.setStatus(AdminConfigStatus.ACTIVE.name());\n        adminConfigBO.setValue(adminCompanyBO.toJSONString());\n    } else {\n        adminConfigBO.setValue(adminCompanyBO.toJSONString());\n    }\n    adminConfigService.saveOrUpdate(adminConfigBO);\n}", "CodeBleu_score": 35.47892774393573}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\n    AdminConfigBO adminConfigBO = adminConfigService.lambdaQuery()\n            .eq(AdminConfigBO::getStatus, 1)\n            .eq(AdminConfigBO::getName, \"companyInfo\")\n            .one();\n\n    if (adminConfigBO == null) {\n        adminConfigBO = new AdminConfigBO();\n        adminConfigBO.setName(\"companyInfo\");\n        adminConfigBO.setStatus(1);\n        adminConfigBO.setValue(JSON.toJSONString(adminCompanyBO));\n        adminConfigBO.setDescription(\"Company information\");\n        adminConfigBO.save();\n    } else {\n        adminConfigBO.setValue(JSON.toJSONString(adminCompanyBO));\n        adminConfigBO.saveOrUpdate();\n    }\n}", "CodeBleu_score": 49.60863469596065}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\t    AdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n    try {\n        String configValue = getValue(AdminConstants.ADMIN_COMPANY_CONFIG_KEY);\n        if (StringUtils.isNotBlank(configValue)) {\n            adminCompanyBO = parseObject(configValue, AdminCompanyBO.class);\n        }\n    } catch (Exception e) {\n        LOG.error(\"Error retrieving admin configuration\", e);\n    }\n    return adminCompanyBO;\n}", "CodeBleu_score": 40.52279968383867}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t    AdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n    try {\n        String adminConfig = getValue(AdminConfigKey.ADMIN_CONFIG);\n        if (adminConfig != null) {\n            adminCompanyBO = parseObject(adminConfig, AdminCompanyBO.class);\n        }\n    } catch (Exception e) {\n        LOG.error(\"Error retrieving admin configuration\", e);\n    }\n    return adminCompanyBO;\n}", "CodeBleu_score": 48.870364038574245}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminCompanyBO adminConfig = new AdminCompanyBO();\n\tString adminConfigKey = getValue(AdminConfig.ADMIN_CONFIG_KEY);\n\tString adminConfigValue = getValue(adminConfigKey);\n\tif (adminConfigValue != null) {\n\t\tadminConfig = parseObject(adminConfigValue, AdminCompanyBO.class);\n\t}\n\treturn adminConfig;\n}", "CodeBleu_score": 35.23853825926457}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t\n\t\t// Create AdminConfig objects for each string\n\t\tList<AdminConfig> configList = new ArrayList<AdminConfig>();\n\t\tfor (String string : stringList) {\n\t\t\tconfigList.add(AdminConfig.createLogWelcomeSpeech(string));\n\t\t}\n\n\t\t// Remove existing configurations\n\t\tAdminConfig.removeLogWelcomeSpeech(LOG_WELCOME_SPEECH_NAME);\n\n\t\t// Set properties of AdminConfig objects\n\t\tfor (AdminConfig config : configList) {\n\t\t\tconfig.setName(LOG_WELCOME_SPEECH_NAME);\n\t\t\tconfig.setStatus(\"enabled\");\n\t\t}\n\n\t\t// Save configurations in batch\n\t\tAdminConfig.saveBatch(configList);\n\t}", "CodeBleu_score": 33.46788929063618}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t \tAdminConfig logWelcomeSpeech = AdminConfig.createLogWelcomeSpeech();\n \tAdminConfig[] logWelcomeSpeechList = new AdminConfig[stringList.size()];\n \tfor (int i = 0; i < stringList.size(); i++) {\n \t\tlogWelcomeSpeechList[i] = AdminConfig.createLogWelcomeSpeech();\n \t\tlogWelcomeSpeechList[i].setName(stringList.get(i));\n \t\tlogWelcomeSpeechList[i].setStatus(\"enabled\");\n \t}\n \tlogWelcomeSpeech.setValue(logWelcomeSpeechList);\n \tAdminConfig[] existingLogWelcomeSpeech = AdminConfig.list(\"type=LogWelcomeSpeech,name=\" + logWelcomeSpeech.getName()).getCollection();\n \tif (existingLogWelcomeSpeech != null) {\n \t\tfor (int i = 0; i < existingLogWelcomeSpeech.length; i++) {\n \t\t\tAdminConfig.remove(existingLogWelcomeSpeech[i]);\n \t\t}\n \t}\n \tAdminConfig.save();\n }", "CodeBleu_score": 31.356140160011282}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t\n    // Create AdminConfig objects for each string in the list.\n    List<AdminConfig> configList = new ArrayList<AdminConfig>();\n    for (String string : stringList) {\n        AdminConfig config = AdminConfig.createAdminConfig(string, null, null, null, null);\n        configList.add(config);\n    }\n\n    // Remove existing log configuration with the specified name.\n    AdminConfig.remove(AdminConfig.getid(\"/Logging/WelcomeSpeech:WelcomeSpeech\"));\n\n    // Add the new configurations to the batch.\n    for (AdminConfig config : configList) {\n        AdminConfig.add(config);\n    }\n\n    // Save the batch.\n    AdminConfig.save();\n}", "CodeBleu_score": 40.09608505477449}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    String userId = getUserId(adminInitDataBO);\n    AdminUserBO user = getUser(userId);\n    String username = user.getUsername();\n    String password = getPassword(adminInitDataBO);\n    String salt = getSalt(adminInitDataBO);\n    String hashedPassword = getHashedPassword(username, password, salt);\n    if (hashedPassword.equals(user.getPassword())) {\n        String accessCode = getRandomInt();\n        setex(accessCode, 600);\n        return accessCode;\n    }\n    throw new InvalidPasswordException();\n}", "CodeBleu_score": 34.34173823289893}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    String userId = adminInitDataBO.getUserId();\n    String password = adminInitDataBO.getPassword();\n    String username = adminInitDataBO.getUsername();\n    String salt = adminInitDataBO.getSalt();\n    String storedPassword = adminInitDataBO.getPassword();\n    String storedSalt = adminInitDataBO.getSalt();\n    String accessCode = adminInitDataBO.getAccessCode();\n    String storedAccessCode = adminInitDataBO.getAccessCode();\n    String storedAccessCodeExpiration = adminInitDataBO.getAccessCodeExpiration();\n    String redisKey = adminInitDataBO.getRedisKey();\n    String redisKeyExpiration = adminInitDataBO.getRedisKeyExpiration();\n    String redisKeyExpirationInSeconds = adminInitDataBO.getRedisKeyExpirationInSeconds();\n    String redisKeyExpirationInMinutes = adminInitDataBO.getRedisKeyExpirationInMinutes();\n    String redisKeyExpirationInHours = adminInitDataBO.getRedisKeyExpirationInHours();\n    String redisKeyExpirationInDays = adminInitDataBO.getRedisKeyExpirationInDays();\n    String redisKeyExpirationInMonths = adminInitDataBO.getRedisKeyExpirationInMonths();\n    String redisKeyExpirationInYears = adminInitDataBO.getRedisKeyExpirationInYears();\n    String redisKeyExpirationInDecades = adminInitDataBO.getRedisKeyExpirationInDecades();\n    String redisKeyExpirationInCenturies = adminInitDataBO.getRedisKeyExpirationInCenturies();\n    String redisKeyExpirationInMillennia = adminInitDataBO.getRedisKeyExpirationInMillennia();\n    String redisKeyExpirationInEons = adminInitDataBO.getRedisKeyExpirationInEons();\n    String redisKeyExpirationInAeons = adminInitDataBO.getRedisKeyExpirationInAeons();\n    String redisKeyExpirationInEras = adminInitDataBO.getRedisKeyExpirationInEras();\n    String redisKeyExpirationInOrbits = adminInitDataBO.getRedisKeyExpirationInOrbits();\n    String", "CodeBleu_score": 26.89307850502185}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    // Get the user ID\n    String userId = getUserId();\n\n    // Get the user details\n    AdminBO adminBO = getById(userId);\n    String username = adminBO.getUsername();\n\n    // Check the password\n    if (!verify(adminInitDataBO.getPassword(), username)) {\n        throw new InvalidPasswordException();\n    }\n\n    // Generate a temporary access code\n    String accessCode = UUID.randomUUID().toString();\n\n    // Store the access code in Redis with a 10-minute expiration\n    getRedis().setex(ACCESS_CODE_KEY + accessCode, 600, userId);\n\n    // Return the access code\n    return accessCode;\n}", "CodeBleu_score": 28.5553400083652}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\t    String userId = getUserId()\n    String key = \"initAuth:\" + userId\n    def list = redisService.get(key)\n    if (!list) {\n        return false\n    }\n    if (list.contains(getRequest().getRequestURI())) {\n        return true\n    }\n    return false\n}", "CodeBleu_score": 26.94188528533784}, {"code": "private boolean verifyInitAuth(){\n\t    String userId = getUserId()\n    String key = \"unauth-init-auth-urls-\" + userId\n    String url = get(\"init-auth-url\")\n    String urls = redis.get(key)\n    if (urls == null) {\n        return false\n    }\n    return urls.contains(url)\n}", "CodeBleu_score": 31.16247526244871}, {"code": "private boolean verifyInitAuth(){\n\t    def userId = getUserId()\n    def key = \"unauth-menu-${userId}\"\n    def list = redis.get(key)\n    if (list) {\n        def urls = list.split(\",\")\n        if (urls.contains(getRequest().getRequestURI())) {\n            return true\n        }\n    }\n    return false\n}", "CodeBleu_score": 29.971652019835123}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    List<AdminRoleMenu> list = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n        adminRoleMenu.setRoleId(roleId);\n        adminRoleMenu.setMenuId(menuId);\n        list.add(adminRoleMenu);\n    }\n    this.saveBatch(list);\n}", "CodeBleu_score": 63.68374181214179}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    List<AdminRoleMenu> list = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n        adminRoleMenu.setRoleId(roleId);\n        adminRoleMenu.setMenuId(menuId);\n        list.add(adminRoleMenu);\n    }\n    this.saveBatch(list);\n}", "CodeBleu_score": 63.68374181214179}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    List<AdminRoleMenu> list = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n        adminRoleMenu.setRoleId(roleId);\n        adminRoleMenu.setMenuId(menuId);\n        list.add(adminRoleMenu);\n    }\n    this.saveBatch(list);\n}", "CodeBleu_score": 63.68374181214179}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\t    String index = getSysLogIndex();\n    Map<String, Object> map = beanToMap(sysLog);\n    String createTime = formatDateTime(sysLog.getCreateTime());\n    map.remove(\"id\");\n    map.put(\"createTime\", createTime);\n    IndexRequest request = new IndexRequest(index);\n    request.source(map);\n    try {\n        client.indexAsync(request, new ActionListener<IndexResponse>() {\n            @Override\n            public void onResponse(IndexResponse indexResponse) {\n                System.out.println(\"System log saved successfully.\");\n            }\n\n            @Override\n            public void onFailure(Exception e) {\n                System.out.println(\"System log saved failed.\");\n            }\n        });\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}", "CodeBleu_score": 49.46470236735825}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t    String index = getSysLogIndex();\n    Map<String, Object> sysLogMap = beanToMap(sysLog);\n    String createTime = formatDateTime(sysLog.getCreateTime());\n    sysLogMap.remove(\"id\");\n    IndexRequest indexRequest = new IndexRequest(index);\n    indexRequest.id(sysLog.getId().toString());\n    indexRequest.source(sysLogMap);\n    try {\n        client.indexAsync(indexRequest, RequestOptions.DEFAULT, new ActionListener<IndexResponse>() {\n            @Override\n            public void onResponse(IndexResponse indexResponse) {\n                if (indexResponse.getResult() == Result.CREATED) {\n                    logger.info(\"Saved system log: {}\", sysLog);\n                }\n            }\n            @Override\n            public void onFailure(Exception e) {\n                logger.error(\"Failed to save system log: {}\", e.getMessage());\n            }\n        });\n    } catch (IOException e) {\n        logger.error(\"Failed to save system log: {}\", e.getMessage());\n    }\n}", "CodeBleu_score": 52.21693721384278}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t    String index = getSysLogIndex();\n    Map<String, Object> map = beanToMap(sysLog);\n    map.remove(\"id\");\n    String createTime = formatDateTime(sysLog.getCreateTime());\n    map.put(\"createTime\", createTime);\n    IndexRequest request = new IndexRequest(index);\n    request.source(map);\n    try {\n        client.indexAsync(request, new ActionListener<IndexResponse>() {\n            @Override\n            public void onResponse(IndexResponse indexResponse) {\n                // do nothing\n            }\n\n            @Override\n            public void onFailure(Exception e) {\n                logger.error(\"save sys log error: {}\", e.getMessage());\n            }\n        });\n    } catch (Exception e) {\n        logger.error(\"save sys log error: {}\", e.getMessage());\n    }\n}", "CodeBleu_score": 51.97271446737339}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t    try {\n        // 1. Initialize the search criteria\n        SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder();\n        // 2. Sort the results by creation time in descending order\n        searchSourceBuilder.sort(new FieldSortBuilder(\"creationTime\").order(SortOrder.DESC));\n        // 3. Exclude specific fields from the response\n        searchSourceBuilder.fetchSource(false);\n        // 4. Execute the search request using a REST client\n        SearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n        searchRequest.source(searchSourceBuilder);\n        SearchResponse searchResponse = getClient().search(searchRequest, RequestOptions.DEFAULT);\n        // 5. Map the search results to SysLog objects\n        List<SysLog> sysLogList = mapToBean(searchResponse.getHits().getHits(), SysLog.class);\n        // 6. Populate a BasePage object with the results, including total hits and current page\n        return new BasePage<>(getTotalHits(searchResponse), getCurrentPage(querySysLogBO.getPageNum(), querySysLogBO.getPageSize()), sysLogList);\n    } catch (IOException e) {\n        log.error(\"Failed to query system log list. {}\", e.getMessage());\n        return null;\n    }\n}", "CodeBleu_score": 41.87410687252337}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t    // Initialize search criteria\n    SearchSourceBuilder searchSourceBuilder = SearchSourceBuilder.searchSource()\n            .query(QueryBuilders.queryStringQuery(querySysLogBO.getQuery()).defaultOperator(Operator.AND))\n            .sort(SysLog.FIELD_CREATION_TIME, SortOrder.DESC)\n            .fetchSource(false);\n    // Execute search request\n    try {\n        SearchResponse searchResponse = restHighLevelClient.search(new SearchRequest(getSysLogIndex())\n                .source(searchSourceBuilder)\n                .from(querySysLogBO.getCurrent() * querySysLogBO.getPageSize())\n                .size(querySysLogBO.getPageSize()), RequestOptions.DEFAULT);\n        // Map search results to SysLog objects\n        List<SysLog> sysLogList = searchResponse.getHits().getHits().stream().map(hit -> {\n            Map<String, Object> sourceAsMap = hit.getSourceAsMap();\n            SysLog sysLog = new SysLog();\n            sysLog.setId((String) sourceAsMap.get(SysLog.FIELD_ID));\n            sysLog.setCreationTime((Date) sourceAsMap.get(SysLog.FIELD_CREATION_TIME));\n            sysLog.setCreationTimeStr((String) sourceAsMap.get(SysLog.FIELD_CREATION_TIME_STR));\n            sysLog.setLogLevel((String) sourceAsMap.get(SysLog.FIELD_LOG_LEVEL));\n            sysLog.setLogMessage((String) sourceAsMap.get(SysLog.FIELD_LOG_MESSAGE));\n            sysLog.setLogName((String) sourceAsMap.get(SysLog.FIELD_LOG_NAME));\n            sysLog.setLogType((String) sourceAsMap.get(SysLog.FIELD_LOG_TYPE));\n            sysLog.setLogUser((String) sourceAsMap.get(SysLog.FIELD_LOG_USER));\n            sysLog.setLogUserId((String) sourceAsMap.get(SysLog.FIELD_LOG_USER_ID));\n            return sysLog;", "CodeBleu_score": 38.823549922580945}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t\ttry {\n\t\t// Create a search source builder to build the search request\n\t\tSearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder();\n\n\t\t// Set the search source builder to exclude specific fields from the response\n\t\tsearchSourceBuilder.fetchSource(false);\n\n\t\t// Set the search source builder to sort the results by creation time in descending order\n\t\tsearchSourceBuilder.sort(SysLog.CREATION_TIME, SortOrder.DESC);\n\n\t\t// Set the search source builder to query the system log index\n\t\tsearchSourceBuilder.query(QueryBuilders.matchAllQuery());\n\n\t\t// Create a search request to query the system log index\n\t\tSearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n\n\t\t// Set the search source builder to the search request\n\t\tsearchRequest.source(searchSourceBuilder);\n\n\t\t// Execute the search request using a REST client\n\t\tSearchResponse searchResponse = getRestHighLevelClient().search(searchRequest, RequestOptions.DEFAULT);\n\n\t\t// Get the total number of hits from the search response\n\t\tlong totalHits = getTotalHits(searchResponse);\n\n\t\t// Get the current page from the search response\n\t\tint currentPage = getCurrentPage(searchResponse);\n\n\t\t// Get the page size from the search response\n\t\tint pageSize = getPageSize(searchResponse);\n\n\t\t// Get the hits from the search response\n\t\tSearchHits searchHits = getHits(searchResponse);\n\n\t\t// Get the list of system log ids from the search response\n\t\tList<String> sysLogIds = getSysLogIds(searchHits);\n\n\t\t// Get the list of system logs from the search response\n\t\tList<SysLog> sysLogList = getSysLogList(sysLogIds);\n\n\t\t// Create a base page to store the results, including total hits, current page, and the list of system logs\n\t\tBasePage<SysLog> basePage = new BasePage<>(totalHits, currentPage, pageSize, sysLogList);\n\n\t\t// Return the base page\n\t\treturn basePage;\n\t} catch (IOException e) {\n\t\t", "CodeBleu_score": 43.10634895297966}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\t  return new Promise((resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n    https\n      .get(url, function (response) {\n        response.pipe(file);\n        file.on(\"finish\", function () {\n          file.close(() => {\n            resolve();\n          });\n        });\n      })\n      .on\n\n", "CodeBleu_score": 70.7668336253974}, {"code": "async function downloadFile(url, dest){\n\t  return new Promise((resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n    https\n      .get(url, function (response) {\n        response.pipe(file);\n        file.on(\"finish\", function () {\n          file.close(() => {\n            resolve();\n          });\n        });\n      })\n      .on\n\n", "CodeBleu_score": 70.7668336253974}, {"code": "async function downloadFile(url, dest){\n\t  return new Promise((resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n    https\n      .get(url, function (response) {\n        response.pipe(file);\n        file.on(\"finish\", function () {\n          file.close(() => {\n            resolve();\n          });\n        });\n      })\n      .on(\"error\", function (err) {\n        fs.unlink(dest);\n        reject(err);\n      });\n  });\n}", "CodeBleu_score": 91.42567922804416}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t    return getLiveModules()\n            .filter(m -> !circularDependencyCheckSet.contains(m.getId()))\n            .filter(m -> m.getId().equals(module.getId()) || m.getDependencies().contains(module.getId()))\n            .collectList()\n            .flatMapMany(modules -> Flux.fromIterable(modules)\n                    .filter(m -> !circularDependencyCheckSet.contains(m.getId()))\n                    .flatMap(m -> getDependentModules(m, new HashSet<>(circularDependencyCheckSet)).collectList())\n                    .flatMap(dependentModules -> Flux.fromIterable(dependentModules))\n                    .collectList()\n                    .flatMap(dependentModules -> Flux.fromIterable(dependentModules)\n                            .collectList()\n                            .flatMap(dependentModules -> Flux.fromIterable(dependentModules)\n                                    .collectList()\n                                    .flatMap(dependentModules -> Flux.fromIterable(dependentModules)\n                                            .collectList()\n                                            .flatMap(dependentModules -> Flux.fromIterable(dependentModules)\n                                                    .collectList()\n                                                    .flatMap(dependentModules -> Flux.fromIterable(dependentModules)\n                                                            .collectList()\n                                                            .flatMap(dependentModules -> Flux.fromIterable(dependentModules)\n                                                                    .collectList()\n                                                                    .flatMap(dependentModules -> Flux.fromIterable(dependentModules)\n                                                                            .collectList()\n                                                                            .flatMap(dependentModules -> Flux.fromIterable(dependentModules)\n                                                                                    .collectList()\n                                                                                    .flatMap(dependentModules -> Flux.fromIterable(dependentModules)\n                                                                                            .collectList()\n                                                                                            .flatMap(dependentModules -> Flux.fromIterable(dependentModules)\n                                                                                                    .collectList()\n                                                                                                ", "CodeBleu_score": 39.184561170093936}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t        return Flux.fromIterable(module.getDependencies())\n                .filter(dependency -> !circularDependencyCheckSet.contains(dependency.getModuleId()))\n                .doOnNext(dependency -> circularDependencyCheckSet.add(dependency.getModuleId()))\n                .flatMap(dependency -> getModule(dependency.getModuleId()))\n                .collectList()\n                .onErrorContinue((throwable, application) -> warn(getMessage(MessageCodes.WARN_001, module.getModuleId(), throwable.getMessage())));\n    }", "CodeBleu_score": 50.134965258207885}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t    return moduleRepository.findByParentModuleId(module.getId())\n        .filter(m -> !circularDependencyCheckSet.contains(m.getId()))\n        .doOnNext(m -> circularDependencyCheckSet.add(m.getId()))\n        .flatMapMany(m -> getDependentModules(m, circularDependencyCheckSet))\n        .collectList()\n        .onErrorContinue(e -> warn(getMessage(MODULE_CIRCULAR_DEPENDENCY_ERROR, module.getId(), e.getMessage())));\n}", "CodeBleu_score": 51.17290396041789}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        Object value = entry.getValue();\n        if (value instanceof Map) {\n            doGetDependentModules((Map<?, ?>) value, dependentModuleIds);\n        } else if (value instanceof List) {\n            doGetDependentModules((List<?>) value, dependentModuleIds);\n        } else if (value instanceof String && \"module\".equals(entry.getKey()) && isNotBlank((String) value)) {\n            dependentModuleIds.add((String) value);\n        }\n    }\n}", "CodeBleu_score": 27.41415433118638}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    if (map == null) {\n        return;\n    }\n\n    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        Object value = entry.getValue();\n        if (value instanceof Map<?, ?>) {\n            doGetDependentModules((Map<?, ?>) value, dependentModuleIds);\n        } else if (value instanceof List<?>) {\n            doGetDependentModules((List<?>) value, dependentModuleIds);\n        } else if (value instanceof String) {\n            String valueStr = (String) value;\n            if (isNotBlank(valueStr)) {\n                String componentType = (String) entry.getKey();\n                if (\"module\".equals(componentType)) {\n                    dependentModuleIds.add(valueStr);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 38.824539777220124}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    if (map != null) {\n        for (Object entry : map.entrySet()) {\n            Map.Entry<?, ?> entryObject = (Map.Entry<?, ?>) entry;\n            Object key = entryObject.getKey();\n            Object value = entryObject.getValue();\n            if (key instanceof String && value instanceof Map) {\n                String componentType = (String) key;\n                if (equals(componentType, \"module\")) {\n                    String appId = (String) value;\n                    if (isNotBlank(appId)) {\n                        dependentModuleIds.add(appId);\n                    }\n                }\n            }\n            if (value instanceof Map) {\n                doGetDependentModules((Map<?, ?>) value, dependentModuleIds);\n            } else if (value instanceof List) {\n                doGetDependentModules((List<?>) value, dependentModuleIds);\n            }\n        }\n    }\n}", "CodeBleu_score": 43.43647528967077}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t    Asset asset = new Asset();\n    asset.setContentType(srcContentType);\n    if (createThumbnail) {\n        asset.setContentType(MediaType.JPEG);\n    }\n    asset.setData(readableByteCount(dataBuffer));\n    if (createThumbnail) {\n        resizeImage(asset);\n    }\n    return asset;\n}", "CodeBleu_score": 32.31113236740564}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t        Asset asset = new Asset();\n        try {\n            byte[] imageData = read(dataBuffer, srcContentType);\n            if (createThumbnail) {\n                imageData = resizeImage(imageData, srcContentType);\n            }\n            asset.setContentType(MediaType.JPEG);\n            asset.setContent(imageData);\n        } finally {\n            dataBuffer.release();\n        }\n        return asset;\n    }", "CodeBleu_score": 47.219007584220364}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t\t\t// Read the image data.\n\t\tbyte[] imageData = read(dataBuffer);\n\t\t// Resize the image if requested.\n\t\tif (createThumbnail) {\n\t\t\timageData = resizeImage(imageData);\n\t\t}\n\t\t// Set the content type.\n\t\tMediaType contentType = srcContentType;\n\t\tif (createThumbnail) {\n\t\t\tcontentType = MediaType.IMAGE_JPEG;\n\t\t}\n\t\t// Create the asset.\n\t\tAsset asset = new Asset();\n\t\tasset.setContent(imageData);\n\t\tasset.setContentType(contentType);\n\t\t// Release the data buffer.\n\t\tdataBuffer.release();\n\t\treturn asset;\n\t}", "CodeBleu_score": 53.66383351318789}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return getAssetById(assetId)\n            .flatMap(asset -> {\n                setStatusCode(exchange, HttpStatus.OK);\n                setContentType(exchange, asset.getContentType());\n                return writeWith(exchange, asset.getData());\n            });\n}", "CodeBleu_score": 26.999984037375462}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return assetService.getById(assetId)\n            .flatMap(asset -> {\n                setStatusCode(exchange, HttpStatus.OK);\n                if (asset.getContentType() != null) {\n                    setContentType(exchange, asset.getContentType());\n                }\n                return writeWith(exchange, asset.getData());\n            });\n}", "CodeBleu_score": 34.41905934071673}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return getAssetById(exchange, assetId)\n        .flatMap(asset -> {\n            setStatusCode(exchange, HttpStatus.OK);\n            setContentTypeHeader(exchange, asset);\n            return writeWith(exchange, asset.getData());\n        });\n}", "CodeBleu_score": 24.36241257755915}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t  return getWorkspace().map(workspace -> workspace.getMode() == WorkspaceMode.ENTERPRISE ? getOrganizationInEnterpriseMode().flatMapIterable(organization -> organization.getAuthConfigs()).map(authConfig -> new FindAuthConfig(organization.getId(), authConfig.getId(), authConfig.getName(), authConfig.getType())) : Flux.empty());\n}", "CodeBleu_score": 22.828780816479412}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t        return getMode()\n                .flatMapIterable(mode -> {\n                    if (mode.equals(WorkspaceMode.SAAS)) {\n                        return Flux.empty();\n                    } else {\n                        return getOrganizationInEnterpriseMode()\n                                .map(organization -> {\n                                    return new FindAuthConfig(organization, getAuthConfigs(organization));\n                                });\n                    }\n                });\n    }", "CodeBleu_score": 33.23885079231016}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    return getMode()\n        .flatMapIterable(mode -> {\n            if (WorkspaceMode.SAAS.equals(mode)) {\n                return Flux.empty();\n            }\n\n            return getOrganizationInEnterpriseMode();\n        })\n        .map(organization -> {\n            return new FindAuthConfig(organization.getOrganizationId(), organization.getOrganizationName(), organization.getOrganizationDomain(), organization.getOrganizationDescription());\n        });\n}", "CodeBleu_score": 34.10876907955711}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    return MongockSpring5.builder()\n            .setSpringContext(springContext)\n            .setDriver(mongoTemplate)\n            .addChangeLogsScanPackages(\"com.github.cloudyrock.mongock.test.changelogs.profiles.spring5\")\n            .setReadConcern(ReadConcern.MAJORITY)\n            .setWriteConcern(WriteConcern.MAJORITY)\n            .withDefaultLock()\n            .ofType(MongockSpring5.MongockApplicationRunner.class)\n            .build();\n}", "CodeBleu_score": 37.67606536264226}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    MongockSpring5.MongockApplicationRunner runner = MongockSpring5.builder()\n            .setSpringContext(springContext)\n            .setDriver(mongoTemplate.getDb().getMongoClient().getDriver())\n            .setWriteConcern(WriteConcern.ACKNOWLEDGED)\n            .setReadConcern(ReadConcern.MAJORITY)\n            .addChangeLogsScanPackages(\"com.mycompany.mongock.changelogs\")\n            .buildApplicationRunner()\n    return runner\n}", "CodeBleu_score": 46.7804861723382}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    MongockSpring5.MongockApplicationRunner runner = MongockSpring5.mongockApplicationRunner()\n            .setSpringContext(springContext)\n            .setDriver(mongoTemplate)\n            .setWriteConcern(WriteConcern.ACKNOWLEDGED)\n            .setReadConcern(ReadConcern.MAJORITY)\n            .addChangeLogsScanPackages(\"com.mycompany.myproject.changelogs\")\n            .withJournal()\n            .withDefaultLock()\n            .buildApplicationRunner()\n\n    return runner\n}", "CodeBleu_score": 49.398183393655174}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t        return new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n    }", "CodeBleu_score": 27.76222292300263}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\n    ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n    reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n    return reactiveMongoTemplate;\n}", "CodeBleu_score": 77.26795668686601}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t        ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n        return reactiveMongoTemplate;\n    }", "CodeBleu_score": 75.7466843048766}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return getLatestRecordByLibraryQueryId(libraryQueryId)\n            .switchIfEmpty(getById(libraryQueryId))\n            .map(this::map);\n}", "CodeBleu_score": 33.29763191336126}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return Mono.zip(\n            getLatestRecordByLibraryQueryId(libraryQueryId),\n            getById(libraryQueryId)\n    )\n            .map(tuple -> {\n                Map<String, Object> latestRecord = tuple.getT1();\n                Map<String, Object> libraryQuery = tuple.getT2();\n                if (latestRecord != null) {\n                    return latestRecord;\n                } else {\n                    return libraryQuery;\n                }\n            })\n            .map(libraryQuery -> {\n                Map<String, Object> dsl = (Map<String, Object>) libraryQuery.get(\"dsl\");\n                if (dsl == null) {\n                    throw new RuntimeException(\"DSL is null for library query with ID: \" + libraryQueryId);\n                }\n                return dsl;\n            });\n}", "CodeBleu_score": 39.54662981378797}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return getLatestRecordByLibraryQueryId(libraryQueryId)\n            .switchIfEmpty(getById(libraryQueryId))\n            .map(this::getLiveDSL);\n}", "CodeBleu_score": 34.15695085004582}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        Mono<QueryExecutionResult> resultMono;\n        try {\n            if (isJsDatasourcePlugin(datasource.getPluginId())) {\n                resultMono = executeByNodeJs(datasource, queryConfig, requestParams, timeoutStr, queryVisitorContext);\n            } else {\n                resultMono = executeLocally(datasource, queryConfig, requestParams, timeoutStr, queryVisitorContext);\n            }\n        } catch (Exception e) {\n            resultMono = Mono.error(e);\n        }\n        return resultMono\n                .onErrorMap(error -> {\n                    if (error instanceof AppsmithPluginException) {\n                        return error;\n                    }\n                    return new AppsmithPluginException(\n                            AppsmithPluginError.PLUGIN_ERROR,\n                            error.getMessage()\n                    );\n                })\n                .onErrorResume(error -> {\n                    ActionExecutionErrorType errorType = ActionExecutionErrorType.QUERY_EXECUTION_ERROR;\n                    String message = error.getMessage();\n                    if (error instanceof TimeoutException) {\n                        errorType = ActionExecutionErrorType.TIMEOUT_ERROR;\n                        message = \"Query timed out after \" + timeoutStr + \"ms\";\n                    }\n                    return Mono.just(new ActionExecutionResult(\n                            new ActionExecutionResult.ActionExecutionException(\n                                    errorType,\n                                    message,\n                                    error\n                            )\n                    ));\n                })\n                .timeout(parseQueryTimeoutMs(timeoutStr))\n                .doOnError(error -> {\n                    ActionExecutionErrorType errorType = ActionExecutionErrorType.QUERY_EXECUTION_ERROR;\n                    String message = error.getMessage();\n                    if (error instanceof TimeoutException) {\n                        errorType = ActionExecutionErrorType.TIMEOUT_ERROR;\n                        message = \"Query timed out after \" + timeoutStr + \"ms\";\n                    }\n                    log.error(message, error);\n                })\n                .onErrorResume(error -> {\n                    ActionExecutionErrorType errorType = ActionExecutionErrorType.QUERY_EXECUT", "CodeBleu_score": 42.51141692000294}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        Mono<QueryExecutionResult> queryExecutionResultMono;\n        try {\n            if (isJsDatasourcePlugin(datasource)) {\n                queryExecutionResultMono = executeByNodeJs(datasource, queryConfig, requestParams, timeoutStr, queryVisitorContext);\n            } else {\n                queryExecutionResultMono = executeLocally(datasource, queryConfig, requestParams, timeoutStr, queryVisitorContext);\n            }\n        } catch (Exception e) {\n            return Mono.error(new AppsmithPluginException(AppsmithPluginError.PLUGIN_EXECUTE_ARGUMENT_ERROR, e.getMessage()));\n        }\n\n        return queryExecutionResultMono\n                .timeout(parseQueryTimeoutMs(timeoutStr), Mono.error(new AppsmithPluginException(\n                        AppsmithPluginError.PLUGIN_QUERY_TIMED_OUT_ERROR, timeoutStr\n                )))\n                .onErrorResume(e -> {\n                    if (e instanceof TimeoutException) {\n                        return Mono.error(new AppsmithPluginException(\n                                AppsmithPluginError.PLUGIN_QUERY_TIMED_OUT_ERROR, timeoutStr\n                        ));\n                    } else if (e instanceof AppsmithPluginException) {\n                        return Mono.error(e);\n                    } else {\n                        return Mono.error(new AppsmithPluginException(\n                                AppsmithPluginError.PLUGIN_ERROR, e.getMessage()\n                        ));\n                    }\n                })\n                .onErrorMap(e -> {\n                    if (e instanceof AppsmithPluginException) {\n                        return e;\n                    } else {\n                        return new AppsmithPluginException(\n                                AppsmithPluginError.PLUGIN_ERROR, e.getMessage()\n                        );\n                    }\n                })\n                .onErrorResume(e -> {\n                    if (e instanceof AppsmithPluginException) {\n                        return Mono.just(new QueryExecutionResult(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,", "CodeBleu_score": 43.47712946921145}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        try {\n            final Mono<QueryExecutionResult> queryResultMono = Mono.defer(() -> {\n                final Mono<QueryExecutionResult> queryResultMonoForDatasource = executeQueryForDatasource(datasource, queryConfig, requestParams, queryVisitorContext);\n\n                // If timeout is specified, then we should timeout the query execution.\n                if (timeoutStr != null) {\n                    final Long timeout = Long.parseLong(timeoutStr);\n                    return queryResultMonoForDatasource.timeout(Duration.ofMillis(timeout));\n                }\n\n                return queryResultMonoForDatasource;\n            });\n\n            return queryResultMono.onErrorResume(error -> {\n                if (error instanceof TimeoutException) {\n                    return Mono.error(new AppsmithPluginException(\n                            AppsmithPluginError.PLUGIN_QUERY_TIMEOUT_ERROR,\n                            \"Query timed out after \" + timeoutStr + \" ms.\"\n                    ));\n                }\n\n                if (error instanceof AppsmithPluginException) {\n                    return Mono.error(error);\n                }\n\n                log.error(\"Error executing query\", error);\n                return Mono.error(new AppsmithPluginException(\n                        AppsmithPluginError.PLUGIN_ERROR,\n                        \"Error executing query: \" + error.getMessage()\n                ));\n            });\n        } catch (Exception e) {\n            log.error(\"Error executing query\", e);\n            return Mono.error(new AppsmithPluginException(\n                    AppsmithPluginError.PLUGIN_ERROR,\n                    \"Error executing query: \" + e.getMessage()\n            ));\n        }\n    }", "CodeBleu_score": 38.57559280400624}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t        return getT1(datasource, queryConfig, requestParams, queryVisitorContext)\n                .flatMap(queryExecutor -> getT2(queryExecutor, datasource, queryConfig, requestParams, queryVisitorContext))\n                .flatMap(queryExecutionContext -> getT1(queryExecutionContext, datasource))\n                .flatMap(queryExecutionContext -> getT1(queryExecutionContext, datasource.getDatasourceConfiguration()))\n                .flatMap(queryExecutionContext -> getT1(queryExecutionContext, queryConfig, requestParams))\n                .flatMap(queryExecutionContext -> getT1(queryExecutionContext, queryVisitorContext))\n                .flatMap(queryExecutionContext -> getT1(queryExecutionContext, requestParams))\n                .flatMap(queryExecutionContext -> getT1(queryExecutionContext, datasource.getDatasourceConfiguration()))\n                .flatMap(queryExecutionContext -> getT1(queryExecutionContext, datasource))\n                .flatMap(queryExecutionContext -> getT1(queryExecutionContext, datasource.getDatasourceConfiguration()))\n                .flatMap(queryExecutionContext -> getT1(queryExecutionContext, queryConfig, requestParams))\n                .flatMap(queryExecutionContext -> getT1(queryExecutionContext, queryVisitorContext))\n                .flatMap(queryExecutionContext -> getT1(queryExecutionContext, requestParams))\n                .flatMap(queryExecutionContext -> getT1(queryExecutionContext, datasource.getDatasourceConfiguration()))\n                .flatMap(queryExecutionContext -> getT1(queryExecutionContext, datasource))\n                .flatMap(queryExecutionContext -> getT1(queryExecutionContext, datasource.getDatasourceConfiguration()))\n                .flatMap(queryExecutionContext -> getT1(queryExecutionContext, queryConfig, requestParams))\n                .flatMap(queryExecutionContext -> getT1(queryExecutionContext, queryVisitorContext))\n                .flatMap(queryExecutionContext -> getT1(queryExecutionContext, requestParams))\n                .flatMap(queryExecutionContext -> getT1(queryExecutionContext, datasource.getDatasourceConfiguration()))\n                .flatMap(queryExecutionContext -> getT1(queryExecutionContext, datasource))\n                .flatMap(queryExecutionContext -> getT", "CodeBleu_score": 30.8312196538369}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t        return Mono.defer(() -> {\n            final Mono<QueryExecutor> queryExecutorMono = getQueryExecutor(datasource);\n\n            return queryExecutorMono.flatMap(queryExecutor -> {\n                final Mono<QueryExecutionContext> queryExecutionContextMono = buildQueryExecutionContextMono(datasource, queryConfig,\n                        requestParams, queryVisitorContext, queryExecutor);\n\n                return queryExecutionContextMono.flatMap(queryExecutionContext -> {\n                    final Mono<Connection> connectionMono = getOrCreateConnection(datasource);\n\n                    return connectionMono.flatMap(connection -> {\n                        final Mono<QueryExecutionResult> queryExecutionResultMono = doExecuteQuery(queryExecutionContext, connection);\n\n                        return queryExecutionResultMono.onErrorResume(error -> {\n                            final Mono<QueryExecutionResult> onErrorMono = doOnError(queryExecutionContext, connection, error);\n\n                            return onErrorMono.onErrorResume(error1 -> {\n                                // If the error is not handled by the error handler, throw it again\n                                return Mono.error(error1);\n                            });\n                        });\n                    });\n                });\n            });\n        });\n    }", "CodeBleu_score": 35.130898225522536}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t        return Mono.fromCallable(() -> {\n            QueryExecutionContext queryExecutionContext = buildQueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n            return executeQuery(datasource, queryExecutionContext);\n        });\n    }", "CodeBleu_score": 21.606756478367714}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t  if (isBlank(timeoutStr)) {\n    return DEFAULT_QUERY_TIMEOUT_MS;\n  }\n\n  String[] split = timeoutStr.split(\" \");\n  if (split.length != 2) {\n    throw new IllegalArgumentException(\"Invalid timeout string: \" + timeoutStr);\n  }\n\n  String valueStr = split[0];\n  String unitStr = split[1];\n  if (isBlank(valueStr) || isBlank(unitStr)) {\n    throw new IllegalArgumentException(\"Invalid timeout string: \" + timeoutStr);\n  }\n\n  double value = getLeft(substring(valueStr, 0, getRight(valueStr, \".\")));\n  if (value <= 0) {\n    throw new IllegalArgumentException(\"Invalid timeout string: \" + timeoutStr);\n  }\n\n  String unit = getUnitInfo(unitStr).getUnit();\n  if (isBlank(unit)) {\n    throw new IllegalArgumentException(\"Invalid timeout string: \" + timeoutStr);\n  }\n\n  int millis = toMillis(value, unit);\n  if (millis <= 0) {\n    throw new IllegalArgumentException(\"Invalid timeout string: \" + timeoutStr);\n  }\n\n  if (millis > MAX_QUERY_TIMEOUT_MS) {\n    throw new IllegalArgumentException(\"Timeout value exceeds the maximum allowed value of \" + MAX_QUERY_TIMEOUT_MS + \" milliseconds: \" + timeoutStr);\n  }\n\n  return millis;\n}", "CodeBleu_score": 43.59108848732373}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t    if (StringUtils.isBlank(timeoutStr)) {\n        return DEFAULT_QUERY_TIMEOUT_MS;\n    }\n    String[] parts = timeoutStr.split(\" \");\n    if (parts.length != 2) {\n        throw new IllegalArgumentException(\"Invalid query timeout: \" + timeoutStr);\n    }\n    String value = parts[0];\n    String unit = parts[1];\n    int timeoutMs = getTimeoutMs(value, unit);\n    if (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n        throw new IllegalArgumentException(\"Query timeout cannot exceed \" + MAX_QUERY_TIMEOUT_MS + \" milliseconds: \" + timeoutStr);\n    }\n    return timeoutMs;\n}", "CodeBleu_score": 31.338543803732545}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t    if (timeoutStr == null || timeoutStr.isBlank()) {\n        return DEFAULT_QUERY_TIMEOUT_MS;\n    }\n    String[] split = timeoutStr.split(\" \");\n    if (split.length != 2) {\n        throw new IllegalArgumentException(\"Invalid query timeout string: \" + timeoutStr);\n    }\n    int value = Integer.parseInt(split[0]);\n    String unit = split[1].toLowerCase();\n    if (unit.equals(\"ms\")) {\n        return value;\n    }\n    if (unit.equals(\"s\")) {\n        return value * 1000;\n    }\n    if (unit.equals(\"m\")) {\n        return value * 1000 * 60;\n    }\n    if (unit.equals(\"h\")) {\n        return value * 1000 * 60 * 60;\n    }\n    throw new IllegalArgumentException(\"Invalid query timeout unit: \" + unit);\n}", "CodeBleu_score": 31.775473612355974}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t        return getLiveQueries(application.getId())\n                .filter(query -> !isNull(query.getDatasource()))\n                .collectList()\n                .map(queries -> {\n                    if (queries.isEmpty()) {\n                        throw new AppsmithException(AppsmithError.NO_DATASOURCE_FOUND, application.getName());\n                    }\n                    return queries.stream()\n                            .map(query -> {\n                                String datasourceId = query.getDatasource().getId();\n                                return new Pair<>(datasourceId, datasourceId);\n                            })\n                            .collect(Collectors.toList());\n                })\n                .flatMap(datasourceIdPairs -> {\n                    List<String> datasourceIds = datasourceIdPairs.stream()\n                            .map(Pair::getFirst)\n                            .collect(Collectors.toList());\n                    return copyDatasourceFromTemplateToCurrentOrganization(currentOrganizationId, application, datasourceIds, visitorId);\n                });\n    }", "CodeBleu_score": 44.81302283218347}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t\n    // Get the base query for the application\n    return getBaseQuery(application, visitorId)\n\n            // Get the live queries from the application\n            .flatMap(baseQuery -> getLiveQueries(application, visitorId)\n\n                    // If there are no live queries, return an error\n                    .flatMap(liveQueries -> {\n                        if (liveQueries.isEmpty()) {\n                            return Mono.error(new AppsmithException(AppsmithError.NO_LIVE_QUERY_FOUND));\n                        }\n\n                        // Get the datasource IDs from the live queries\n                        return Mono.just(liveQueries.stream()\n                                .map(BaseDomain::getDatasourceId)\n                                .collect(Collectors.toSet()));\n                    })\n\n                    // Get the datasource from the application\n                    .flatMap(datasourceIds -> {\n                        if (datasourceIds.isEmpty()) {\n                            return Mono.error(new AppsmithException(AppsmithError.NO_DATASOURCE_FOUND));\n                        }\n\n                        return datasourceService.findByIdsInOrg(datasourceIds, currentOrganizationId, AclPermission.MANAGE_DATASOURCES)\n                                .collectList();\n                    })\n\n                    // Copy each datasource to the current organization\n                    .flatMap(datasources -> {\n                        List<Mono<Pair<String, String>>> monoList = new ArrayList<>();\n                        for (Datasource datasource : datasources) {\n                            monoList.add(doCopyDatasource(datasource, baseQuery, application, visitorId));\n                        }\n\n                        return Mono.zip(monoList, objects -> {\n                            List<Pair<String, String>> pairList = new ArrayList<>();\n                            for (Object object : objects) {\n                                pairList.add((Pair<String, String>) object);\n                            }\n                            return pairList;\n                        });\n                    })\n            );\n}", "CodeBleu_score": 28.37100076493127}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t        return getLiveQueries(application)\n                .flatMap(queries -> {\n                    if (queries.isEmpty()) {\n                        return Mono.error(new AppsmithException(AppsmithError.NO_RESOURCE_FOUND, FieldName.LIVE_QUERY));\n                    }\n\n                    return Flux.fromIterable(queries)\n                            .map(query -> query.getDatasource().getId())\n                            .collectList()\n                            .map(datasourceIds -> {\n                                List<Pair<String, String>> copiedDatasourceIdPairs = new ArrayList<>();\n                                for (String datasourceId : datasourceIds) {\n                                    copiedDatasourceIdPairs.add(Pair.of(datasourceId, datasourceId));\n                                }\n                                return copiedDatasourceIdPairs;\n                            });\n                })\n                .flatMap(copiedDatasourceIdPairs -> {\n                    List<Mono<Pair<String, String>>> copiedDatasourceIdPairMonoList = copiedDatasourceIdPairs\n                            .stream()\n                            .map(copiedDatasourceIdPair -> copyDatasourceFromTemplateToCurrentOrganization(currentOrganizationId, copiedDatasourceIdPair.getKey(), copiedDatasourceIdPair.getValue(), visitorId))\n                            .collect(Collectors.toList());\n\n                    return Flux.concat(copiedDatasourceIdPairMonoList)\n                            .collectList()\n                            .map(copiedDatasourceIdPairs -> {\n                                List<Pair<String, String>> finalCopiedDatasourceIdPairs = new ArrayList<>();\n                                for (Pair<String, String> copiedDatasourceIdPair : copiedDatasourceIdPairs) {\n                                    finalCopiedDatasourceIdPairs.add(copiedDatasourceIdPair);\n                                }\n                                return finalCopiedDatasourceIdPairs;\n                            });\n                });\n    }", "CodeBleu_score": 35.01006365476072}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceService.getById(datasourceId)\n        .flatMap(datasource -> {\n            if (datasource.isSystemStatic()) {\n                return Mono.just(datasource.getId());\n            } else if (datasource.isLegacyQuickRestApi() || datasource.isLegacyOpenblocksApi()) {\n                return datasourceService.createNewDatasourceFrom(organizationId, visitorId, datasource)\n                    .map(Datasource::getId);\n            } else {\n                return datasourceService.createNewDatasourceFrom(organizationId, visitorId, datasource)\n                    .map(Datasource::getId);\n            }\n        });\n}", "CodeBleu_score": 60.08754876002411}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceService.getById(datasourceId)\n        .flatMap(datasource -> {\n            if (datasource.getIsSystemStatic()) {\n                return Mono.just(datasource.getId());\n            }\n            if (datasource.getPluginId() != null && (isLegacyQuickRestApi(datasource.getPluginId()) || isLegacyOpenblocksApi(datasource.getPluginId()))) {\n                return Mono.just(datasource.getId());\n            }\n            return createNewDatasourceFrom(datasource, organizationId, visitorId);\n        });\n}", "CodeBleu_score": 61.5256974946789}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceService.getById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.getIsSystemStatic()) {\n                    return Mono.just(datasourceId);\n                } else if (isLegacyQuickRestApi(datasource) || isLegacyOpenblocksApi(datasource)) {\n                    return createNewDatasourceFrom(organizationId, datasource, visitorId)\n                            .map(Datasource::getId);\n                } else {\n                    return createNewDatasourceFrom(organizationId, datasource, visitorId)\n                            .flatMap(datasourceService::create);\n                }\n            });\n}", "CodeBleu_score": 54.78858183663717}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t\n        // Check if the user has an avatar\n        if (user.getAvatar() != null) {\n            // Remove the old avatar\n            remove(user.getAvatar());\n        }\n\n        // Save the new avatar\n        String avatarId = save(filePart);\n\n        // Update the user's profile with the new avatar\n        return updateUserAvatar(user, avatarId);\n    }", "CodeBleu_score": 17.73805953819213}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t        // Get the avatar from the user.\n        Mono<String> avatar = user.getAvatar();\n        // If the user has an avatar, remove it.\n        return avatar.flatMap(avatarUrl -> {\n            if (!avatarUrl.isEmpty()) {\n                return remove(avatarUrl);\n            }\n            return Mono.just(true);\n        }).then(filePart.transferTo(new File(filePath + user.getId() + \".jpg\")))\n                .then(updateUserAvatar(user))\n                .then(Mono.just(true));\n    }", "CodeBleu_score": 28.01858437661026}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t    return fileUploadService.uploadFile(filePart)\n            .flatMap(s3File -> {\n                if (user.getAvatar() != null) {\n                    return userRepository.findById(user.getId())\n                            .flatMap(user1 -> {\n                                user1.setAvatar(null);\n                                return userRepository.save(user1);\n                            })\n                            .then(fileUploadService.deleteFile(user.getAvatar()));\n                }\n                return Mono.empty();\n            })\n            .then(userRepository.findById(user.getId()))\n            .flatMap(user1 -> {\n                user1.setAvatar(s3File);\n                return userRepository.save(user1);\n            })\n            .then(Mono.just(true));\n}", "CodeBleu_score": 29.138092654227997}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    User user = new User();\n    user.setName(authUser.getName());\n    user.setState(authUser.getState());\n    user.setIsEnabled(authUser.isEnabled());\n    user.setAvatar(authUser.getAvatar());\n    if (authUser.getSource().equals(AuthSource.EMAIL) && authUser.getAuthContext().containsKey(AuthContextKeys.PASSWORD)) {\n        user.setPassword(encryptPassword(authUser.getAuthContext().get(AuthContextKeys.PASSWORD)));\n    }\n    user.setConnections(authUser.getConnections());\n    user.setIsNewUser(true);\n    return Mono.just(user);\n}", "CodeBleu_score": 44.25995718195688}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    User user = new User();\n    user.setName(authUser.getName());\n    user.setState(authUser.getState());\n    user.setIsEnabled(authUser.isEnabled());\n    user.setAvatar(authUser.getAvatar());\n\n    // If the auth source is email and the auth context contains a password, encrypt the password and set it for the user.\n    if (authUser.getSource().equals(AuthSource.EMAIL) && authUser.getAuthContext().containsKey(AuthContextKeys.PASSWORD.getKey())) {\n        user.setPassword(encryptPassword(authUser.getAuthContext().get(AuthContextKeys.PASSWORD.getKey())));\n    }\n\n    // Establish user connections from the AuthUser and mark the user as new.\n    user.setConnections(authUser.getConnections());\n    user.setIsNewUser(true);\n\n    return Mono.just(user);\n}", "CodeBleu_score": 45.3042277167572}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    User user = new User();\n    user.setName(authUser.getName());\n    user.setState(UserState.ACTIVE);\n    user.setIsEnabled(true);\n    user.setIsNewUser(true);\n    user.setAvatar(authUser.getAvatar());\n    if (authUser.getSource().equals(AuthSource.EMAIL)) {\n        if (authUser.getAuthContext().containsKey(AuthContextKey.PASSWORD)) {\n            user.setPassword(encryptPassword(authUser.getAuthContext().get(AuthContextKey.PASSWORD)));\n        }\n    }\n    user.setConnections(authUser.getConnections());\n    return create(user);\n}", "CodeBleu_score": 45.08014639765179}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return Mono.fromCallable(() -> {\n        Connection emailConnection = new Connection();\n        emailConnection.setSource(Connection.Source.EMAIL);\n        emailConnection.setKey(email);\n        emailConnection.setStrategy(Connection.Strategy.DISCARD);\n        emailConnection.setStatus(Connection.Status.ACTIVE);\n        emailConnection.setUserId(user.getId());\n        emailConnection.setRawId(email);\n        emailConnection.setConnectionId(UUID.randomUUID().toString());\n        emailConnection.setIdentityId(UUID.randomUUID().toString());\n        emailConnection.setType(Connection.Type.EMAIL);\n        emailConnection.setConnectedAt(Instant.now());\n        emailConnection.setUpdatedAt(Instant.now());\n        emailConnection.setCreatedAt(Instant.now());\n        emailConnection.setDomain(email.split(\"@\")[1]);\n        return emailConnection;\n    }).flatMap(connection -> connectionRepository.create(connection)\n            .then(userService.update(user.getId(), UserUpdate.builder().connections(user.getConnections() + 1).build()))\n            .thenReturn(true)\n            .onErrorResume(DuplicateKeyException.class, error -> {\n                if (error.getMessage().contains(\"email\")) {\n                    return Mono.error(new EmailExistsException());\n                }\n                return Mono.error(error);\n            })\n            .onErrorResume(error -> {\n                if (error instanceof DuplicateKeyException) {\n                    return Mono.error(new EmailExistsException());\n                }\n                return Mono.error(error);\n            })\n    );\n}", "CodeBleu_score": 40.43863492715176}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return connectionRepository.findByProviderIdAndProviderUserId(ConnectionKey.of(EmailConnection.PROVIDER_ID, email))\n            .flatMap(connection -> Mono.error(new DuplicateKeyException(\"Email already bound to another account\")))\n            .switchIfEmpty(Mono.defer(() -> {\n                EmailConnection connection = EmailConnection.fromProviderUserId(email);\n                return connectionRepository.save(connection)\n                        .then(user.getConnections().add(connection))\n                        .then(userRepository.save(user))\n                        .then(Mono.just(true));\n            }));\n}", "CodeBleu_score": 37.0884870294102}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return Mono.fromCallable(() -> {\n        Connection<User> connection = Connection.buildConnection(user, email, \"email\", \"email\");\n        user.addConnection(connection);\n        user.save();\n        return true;\n    }).onErrorResume(e -> {\n        if (e instanceof DuplicateKeyException) {\n            return Mono.just(false);\n        } else {\n            throw new RuntimeException(e);\n        }\n    });\n}", "CodeBleu_score": 37.54155989531258}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return userRepository.findById(userId)\n        .flatMap(user -> {\n            if (user.getPassword().equals(encryptPassword(oldPassword))) {\n                user.setPassword(encryptPassword(newPassword));\n                return userRepository.save(user)\n                    .thenReturn(true);\n            }\n            return Mono.error(new InvalidPasswordException());\n        });\n}", "CodeBleu_score": 22.34300718080407}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return userRepository.findById(userId)\n        .flatMap(user -> {\n            if (user.getPassword().equals(encryptPassword(oldPassword))) {\n                user.setPassword(encryptPassword(newPassword));\n                return userRepository.save(user);\n            }\n            return Mono.error(new Exception(\"Invalid password\"));\n        })\n        .thenReturn(true)\n        .onErrorResume(Exception.class, e -> Mono.just(false));\n}", "CodeBleu_score": 25.279890978203866}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return userRepository.findById(userId)\n        .flatMap(user -> {\n            if (user.getPassword().equals(encryptPassword(oldPassword))) {\n                user.setPassword(encryptPassword(newPassword));\n                return userRepository.save(user);\n            }\n            return Mono.error(new IllegalArgumentException(\"Invalid password\"));\n        })\n        .thenReturn(true)\n        .onErrorResume(IllegalArgumentException.class, e -> Mono.just(false));\n}", "CodeBleu_score": 25.847606981632204}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t        return Flux.merge(getUserGroupIdsInOrg(userId, orgMember.getOrgId()), getNonDynamicUserGroupIdsInOrg(userId, orgMember.getOrgId()))\n                        .collectList()\n                        .flatMap(userGroupIds -> {\n                            List<Mono<Map<String, String>>> groupMonoList = userGroupIds.stream()\n                                            .filter(userGroupId -> !isAllUsersGroup(userGroupId))\n                                            .map(userGroupId -> getGroupName(userGroupId, locale))\n                                            .collect(Collectors.toList());\n                            return Flux.merge(groupMonoList).collectList().map(groupNames -> {\n                                List<Map<String, String>> userDetailGroups = new ArrayList<>();\n                                if (!withoutDynamicGroups) {\n                                    userDetailGroups.add(ImmutableMap.of(USER_DETAIL_GROUP_ID_KEY,\n                                                    String.valueOf(orgMember.getOrgId()),\n                                                    USER_DETAIL_GROUP_NAME_KEY,\n                                                    getName(orgMember.getOrgId(), locale)));\n                                }\n                                userDetailGroups.addAll(groupNames.stream()\n                                                .map(groupName -> ImmutableMap.of(USER_DETAIL_GROUP_ID_KEY,\n                                                                groupName.get(GROUP_ID_KEY),\n                                                                USER_DETAIL_GROUP_NAME_KEY,\n                                                                groupName.get(GROUP_NAME_KEY)))\n                                                .collect(Collectors.toList()));\n                                return userDetailGroups;\n                            });\n                        });\n    }", "CodeBleu_score": 33.26142387619365}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t        return orgMember.isAdmin() ? getAdminUserDetailGroups(userId, locale) : getUserDetailGroups(userId, orgMember.getId(), withoutDynamicGroups, locale);\n    }", "CodeBleu_score": 12.042568513895802}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t    // retrieve the user groups\n    Mono<List<UserGroup>> userGroups = getUserGroups(userId, orgMember.getOrgId(), withoutDynamicGroups);\n\n    // retrieve the user group names\n    Mono<List<Map<String, String>>> userGroupNames = userGroups.map(groups ->\n            groups.stream()\n                    .filter(group -> !isAllUsersGroup(group))\n                    .map(group -> Map.of(\"id\", group.getId(), \"name\", group.getName(locale)))\n                    .collect(Collectors.toList())\n    );\n\n    return userGroupNames;\n}", "CodeBleu_score": 37.75801769827959}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    return mongoUpsertHelper.upsert(UserStatus.builder().id(userId).hasShowNewUserGuidance(true).build(), UserStatus.class);\n}", "CodeBleu_score": 27.427995589694458}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    UserStatus userStatus = new UserStatus();\n    userStatus.setUserId(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n\n    return mongoUpsertHelper.upsert(UserStatus.class, userStatus, \"userId\", userId)\n            .map(result -> result.wasUpserted());\n}", "CodeBleu_score": 41.810706168560145}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    return mongoUpsertHelper.upsert(\n        UserStatus.builder()\n            .id(userId)\n            .hasShowNewUserGuidance(true)\n            .build(),\n        UserStatus.class,\n        \"userStatus\",\n        \"id\"\n    );\n}", "CodeBleu_score": 40.85691047981758}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"nil predicatePartition\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"nil predicateValue\")\n\t}\n\n\t// Create a run group to handle clearing matching entries across multiple partitions concurrently.\n\trungroup := new(errgroup.Group)\n\n\t// Enqueue each partition that satisfies the partition predicate.\n\tfor k := range c.partitions {\n\t\tif predicatePartition(k, c.partitions[k]) {\n\t\t\trungroup.Go(func(k string) func() error {\n\t\t\t\treturn func() error {\n\t\t\t\t\tc.partitions[k].clearMatching(predicateValue)\n\t\t\t\t\treturn nil\n\t\t\t\t}\n\t\t\t}(k))\n\t\t}\n\t}\n\n\t// Wait for all tasks to complete.\n\trungroup.Wait()\n}", "CodeBleu_score": 39.72377610295247}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"nil partition predicate\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"nil value predicate\")\n\t}\n\tc.mu.Lock()\n\tdefer c.mu.Unlock()\n\tif c.closed {\n\t\treturn\n\t}\n\trungroup := sync.WaitGroup{}\n\tfor k, p := range c.partitions {\n\t\tif predicatePartition(k, p) {\n\t\t\trungroup.Add(1)\n\t\t\tgo func(k string, p PartitionManager) {\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t\trungroup.Done()\n\t\t\t}(k, p)\n\t\t}\n\t}\n\trungroup.Wait()\n}", "CodeBleu_score": 44.775122468186304}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"nil predicatePartition\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"nil predicateValue\")\n\t}\n\trungroup.Run(context.Background(), func() {\n\t\tfor k, v := range c.partitions {\n\t\t\tif predicatePartition(k, v) {\n\t\t\t\tv.ClearMatching(predicateValue)\n\t\t\t}\n\t\t}\n\t})\n}", "CodeBleu_score": 35.02889440418883}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\tpanic(fmt.Errorf(\"invalid input: numPartitions (%d) and totalWeightQuantity (%d) must be greater than zero\", numPartitions, totalWeightQuantity))\n\t}\n\n\tavgWeightPerPartition := totalWeightQuantity / numPartitions\n\tmaxSizePerPartition := int(math.Floor(float64(maxItemsTotal) / float64(numPartitions)))\n\n\tif avgWeightPerPartition > maxSizePerPartition {\n\t\tmaxSizePerPartition = int(math.Floor(float64(maxItemsTotal) / float64(avgWeightPerPartition)))\n\t}\n\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 45.78625522773875}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\tpanic(\"Invalid input\")\n\t}\n\n\t// Calculate the average weight per partition\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\n\t// Calculate the maximum size per partition\n\tmaxSizePerPartition := int(math.Floor(float64(maxItemsTotal) / avgWeightPerPartition))\n\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 48.96832185200939}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\tpanic(\"number of partitions or total weight quantity must be greater than zero\")\n\t}\n\n\tavgWeightPerPartition := totalWeightQuantity / numPartitions\n\treturn int(math.Floor(float64(maxItemsTotal) / float64(avgWeightPerPartition)))\n}", "CodeBleu_score": 51.59438458475245}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\t  Map<String, Object> contributorMap = [:]\n  DatabaseMetaData databaseMetaData = getConnectionMetadata()\n  if (databaseMetaData != null) {\n    contributorMap.put('databaseProductName', databaseMetaData.getDatabaseProductName())\n    contributorMap.put('databaseVersion', databaseMetaData.getDatabaseProductVersion())\n  }\n  return contributorMap\n}", "CodeBleu_score": 27.297613224559182}, {"code": "public Map<String, Object> contributorMap(){\n\t    Map<String, Object> contributor = new HashMap<String, Object>();\n    try {\n        DatabaseMetaData metaData = getConnectionMetadata();\n        if (metaData != null) {\n            contributor.put(\"databaseProductName\", getDatabaseProductName());\n            contributor.put(\"databaseVersion\", getDatabaseVersion());\n        }\n    } catch (SQLException e) {\n        // Do nothing\n    }\n    return contributor;\n}", "CodeBleu_score": 43.21898025313619}, {"code": "public Map<String, Object> contributorMap(){\n\t    Map<String, Object> contributorMap = new HashMap<>();\n    ConnectionMetadata connectionMetadata = getConnectionMetadata();\n    if (connectionMetadata != null) {\n        contributorMap.put(\"databaseProductName\", connectionMetadata.getDatabaseProductName());\n        contributorMap.put(\"databaseVersion\", connectionMetadata.getDatabaseVersion());\n    }\n    return contributorMap;\n}", "CodeBleu_score": 44.3699032951832}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    // if the user settings are null, it disables registration and email verification on registration in the GlobalInfo object\n    if (configMap.get(GlobalInfo.USER_SETTINGS) == null) {\n        info.setMustVerifyEmailOnRegistration(false)\n        info.setAllowRegistration(false)\n    } else {\n        // otherwise, it updates the GlobalInfo object with the retrieved settings for registration and email verification\n        info.setMustVerifyEmailOnRegistration(configMap.get(GlobalInfo.USER_SETTINGS).get(GlobalInfo.MUST_VERIFY_EMAIL_ON_REGISTRATION))\n        info.setAllowRegistration(configMap.get(GlobalInfo.USER_SETTINGS).get(GlobalInfo.ALLOW_REGISTRATION))\n    }\n}", "CodeBleu_score": 28.86296231147757}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    if (configMap.get(USER_SETTINGS) == null) {\n        info.setMustVerifyEmailOnRegistration(false)\n        info.setAllowRegistration(false)\n    } else {\n        def userSettings = configMap.get(USER_SETTINGS)\n        info.setMustVerifyEmailOnRegistration(userSettings.get(MUST_VERIFY_EMAIL_ON_REGISTRATION))\n        info.setAllowRegistration(userSettings.get(ALLOW_REGISTRATION))\n    }\n}", "CodeBleu_score": 41.019246085851776}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    if (configMap.get(GlobalInfo.USER_SETTINGS) != null) {\n        info.setAllowRegistration(configMap.get(GlobalInfo.USER_SETTINGS).get(GlobalInfo.ALLOW_REGISTRATION))\n        info.setMustVerifyEmailOnRegistration(configMap.get(GlobalInfo.USER_SETTINGS).get(GlobalInfo.MUST_VERIFY_EMAIL_ON_REGISTRATION))\n    } else {\n        info.setAllowRegistration(false)\n        info.setMustVerifyEmailOnRegistration(false)\n    }\n}", "CodeBleu_score": 28.416949274753545}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\t\tThreadGroup group = new ThreadGroup(\"Restart\");\n\tThread thread = new Thread(group, new Runnable() {\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t}\n\t\t\tSystem.out.println(\"Restarting...\");\n\t\t\tThread.currentThread().setContextClassLoader(getClassLoader());\n\t\t\tThread.currentThread().setDaemon(false);\n\t\t\tThread.currentThread().setPriority(Thread.NORM_PRIORITY);\n\t\t\tThread.currentThread().start();\n\t\t\tSystem.out.println(\"Restart completed\");\n\t\t}\n\t});\n\tthread.setDaemon(false);\n\tthread.setPriority(Thread.NORM_PRIORITY);\n\tthread.start();\n\treturn \"Restarting...\";\n}", "CodeBleu_score": 43.123024294246804}, {"code": "public Object restart(){\n\t\tThreadGroup group = new ThreadGroup(getThreadGroup(), \"Restarting\");\n\tThread t = new Thread(group, \"Restarting\") {\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tThread.sleep(5000);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t}\n\t\t\tSystem.exit(0);\n\t\t}\n\t};\n\tt.setContextClassLoader(getClassLoader());\n\tt.setDaemon(false);\n\tt.start();\n\treturn \"Restarting...\";\n}", "CodeBleu_score": 40.02752693735305}, {"code": "public Object restart(){\n\t\tThreadGroup group = new ThreadGroup(\"Restart\");\n\tThread t = new Thread(group, new Runnable() {\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tThread.currentThread().setContextClassLoader(getClassLoader());\n\t\t\t\tThread.currentThread().setDaemon(false);\n\t\t\t\tsetDaemon(false);\n\t\t\t\tstart();\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t});\n\tt.setDaemon(false);\n\tt.start();\n\treturn \"Restarting application...\";\n}", "CodeBleu_score": 43.934581832932196}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t        ObjectMapper objectMapper = new ObjectMapper();\n        configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n        configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n    }", "CodeBleu_score": 52.04673197988888}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t    ObjectMapper objectMapper = new ObjectMapper();\n    configurer.customCodecs().registerWithDefaultConfig(new Jackson2JsonDecoder(objectMapper));\n    configurer.customCodecs().registerWithDefaultConfig(new Jackson2JsonEncoder(objectMapper));\n}", "CodeBleu_score": 47.80475557832223}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t     ObjectMapper objectMapper = new ObjectMapper();\n     objectMapper.registerModule(new JavaTimeModule());\n     objectMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);\n     objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n     objectMapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true);\n     objectMapper.configure(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT, true);\n     objectMapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);\n     objectMapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true);\n     objectMapper.configure(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT, true);\n     objectMapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);\n     objectMapper.configure(DeserializationFeature.ACCEPT_FLOAT_AS_INT, true);\n     objectMapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true);\n     objectMapper.configure(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT, true);\n     objectMapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);\n     objectMapper.configure(DeserializationFeature.ACCEPT_FLOAT_AS_INT, true);\n     objectMapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true);\n     objectMapper.configure(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT, true);\n     objectMapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);", "CodeBleu_score": 17.913078279580336}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t    return RouterFunctions.route(\n            GET(\"/console/**\")\n                    .and(accept(MediaType.TEXT_HTML))\n                    .and(negate(WebSocket.class))\n                    .and(negate(path(\"/console/assets/**\"))),\n            serveIndex(\"classpath:/console/index.html\", MediaType.TEXT_HTML));\n}", "CodeBleu_score": 25.487037206038742}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t    return RouterFunctions.route()\n            .path(\"/console/**\", builder -> builder.nest(accept(MediaType.TEXT_HTML),\n                    builder -> builder.nest(not(pathExtension(\"assets\")),\n                            builder -> builder.nest(not(webSocket()),\n                                    builder -> builder.GET(\"/console/**\",\n                                            request -> getConsole().then(consoleIndex())))))\n            );\n}", "CodeBleu_score": 25.457988666812366}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t    return RouterFunctions.route(\n            RequestPredicates.GET(\"/console/**\")\n                    .and(RequestPredicates.accept(MediaType.TEXT_HTML)\n                            .and(RequestPredicates.negate(RequestPredicates.pathExtension(\"assets\"))))\n                    .and(RequestPredicates.negate(RequestPredicates.websocket())),\n            HandlerFunction.create(serverRequest -> {\n                String path = serverRequest.path();\n                if (path.equals(\"/console\")) {\n                    return serverRequest.response().redirect(\"/console/\");\n                }\n                return serverRequest.response().redirect(path.substring(1));\n            })\n    );\n}", "CodeBleu_score": 24.49929020677107}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t\treturn RouterFunctions.route(\n\t\tRequestPredicates.GET(\"/uc/**\")\n\t\t\t.and(RequestPredicates.accept(MediaType.TEXT_HTML)\n\t\t\t\t.and(RequestPredicates.negate(RequestPredicates.headers(HttpHeaders.UPGRADE, \"websocket\")))\n\t\t\t\t.and(RequestPredicates.not(RequestPredicates.path(\"/uc/assets/**\")))\n\t\t\t)\n\t\t, handler -> handler.apply(ServerResponse.permanentRedirect(URI.create(\"/uc/index.html\")).build())\n\t);\n}", "CodeBleu_score": 21.50505686630982}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t    return RouterFunctions.route(\n            RequestPredicates.GET(\"/uc/**\")\n                    .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n                    .and(negate(RequestPredicates.pathExtension(\"js\")))\n                    .and(negate(RequestPredicates.pathExtension(\"css\")))\n                    .and(negate(RequestPredicates.pathExtension(\"png\")))\n                    .and(negate(RequestPredicates.pathExtension(\"jpg\")))\n                    .and(negate(RequestPredicates.pathExtension(\"ico\")))\n                    .and(negate(RequestPredicates.pathExtension(\"woff\")))\n                    .and(negate(RequestPredicates.pathExtension(\"woff2\")))\n                    .and(negate(RequestPredicates.pathExtension(\"ttf\")))\n                    .and(negate(RequestPredicates.pathExtension(\"map\")))\n                    .and(negate(RequestPredicates.pathExtension(\"svg\")))\n                    .and(negate(RequestPredicates.pathExtension(\"eot\")))\n                    .and(negate(RequestPredicates.pathExtension(\"otf\")))\n                    .and(negate(RequestPredicates.pathExtension(\"json\")))\n                    .and(negate(RequestPredicates.pathExtension(\"mp3\")))\n                    .and(negate(RequestPredicates.pathExtension(\"mp4\")))\n                    .and(negate(RequestPredicates.pathExtension(\"webm\")))\n                    .and(negate(RequestPredicates.pathExtension(\"webp\")))\n                    .and(negate(RequestPredicates.pathExtension(\"wasm\")))\n                    .and(negate(RequestPredicates.pathExtension(\"wav\")))\n                    .and(negate(RequestPredicates.pathExtension(\"ico\")))\n                    .and(negate(RequestPredicates.pathExtension(\"woff\")))\n                    .and(negate(RequestPredicates.pathExtension(\"woff2\")))\n                    .and(negate(RequestPredicates.pathExtension", "CodeBleu_score": 11.639579989318403}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t    return RouterFunctions.route(\n        RequestPredicates.GET(\"/uc/**\")\n            .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n            .and(RequestPredicates.negate(RequestPredicates.WebSocket()))\n            .and(RequestPredicates.not(RequestPredicates.path(\"/uc/assets/**\")))\n            .and(RequestPredicates.not(RequestPredicates.path(\"/uc/favicon.ico\"))),\n        RouterFunctions.route(\n            RequestPredicates.GET(\"/uc/**\"),\n            (req, handler) -> handler.handle(\n                req.mutate().path(\"/uc/index.html\").build())\n        )\n    );\n}", "CodeBleu_score": 24.79438525569627}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\n    @Override\n    public Mono<Void> save(Session session) {\n        return Mono.fromRunnable(() -> {\n            MapSession mapSession = (MapSession) session;\n            String sessionId = mapSession.getId();\n            if (sessionId == null) {\n                throw new IllegalArgumentException(\"Session ID cannot be null\");\n            }\n            if (session.isExpired()) {\n                removeSession(sessionId);\n                return;\n            }\n            sessions.put(sessionId, mapSession);\n            if (mapSession.isExpired()) {\n                removeSession(sessionId);\n            }\n        });\n    }\n\n    @Override\n    public Mono<Boolean> delete(String sessionId) {\n        return Mono.fromCallable(() -> {\n            removeSession(sessionId);\n            return true;\n        });\n    }\n\n    @Override\n    public Mono<Session> findById(String sessionId) {\n        return Mono.fromCallable(() -> {\n            MapSession session = sessions.get(sessionId);\n            if (session != null) {\n                return session;\n            }\n            return null;\n        });\n    }\n\n    @Override\n    public Mono<Boolean> exists(String sessionId) {\n        return Mono.fromCallable(() -> {\n            MapSession session = sessions.get(sessionId);\n            if (session != null) {\n                return true;\n            }\n            return false;\n        });\n    }\n\n    @Override\n    public Flux<String> findByIndexNameAndIndexValue(String indexName, String indexValue) {\n        return Flux.fromIterable(sessions.values())\n                .filter(session -> {\n                    Object value = session.getAttribute(indexName);\n                    return value != null && value.equals(indexValue);\n                })\n                .map(MapSession::getId);\n    }\n\n    @Override\n    public Flux<Session> findByIndexNameAndIndexValue(String indexName, String indexValue, int pageSize) {\n        return Flux.fromIterable(sessions.values())\n                .filter(session -> {\n                    Object value = session", "CodeBleu_score": 32.94498954618702}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    ReactiveIndexedSessionRepository<MapSession> repo = new MapSessionRepository<MapSession>();\n    repo.setDefaultMaxInactiveInterval(getDefaultMaxInactiveInterval());\n    repo.setDefaultLastAccessTime(getDefaultLastAccessTime());\n    repo.setDefaultSavedStatus(getDefaultSavedStatus());\n    repo.setDefaultExpirationPolicyName(getDefaultExpirationPolicyName());\n    return repo;\n}", "CodeBleu_score": 25.035109083294373}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\n    // create the repository\n    ReactiveIndexedSessionRepository<MapSession> repository = new MapSessionRepository<MapSession>()\n\n    // set the default session timeout\n    repository.setDefaultMaxInactiveInterval(getTimeout())\n\n    // return the configured repository\n    return repository\n\n}", "CodeBleu_score": 19.544257572127528}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    DefaultUserDetailService userDetailsService = new DefaultUserDetailService()\n    userDetailsService.userService = userService\n    userDetailsService.roleService = roleService\n    userDetailsService.setTwoFactorAuthDisabled(haloProperties.security.twoFactorAuthDisabled)\n    userDetailsService\n}", "CodeBleu_score": 37.0683296071332}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    DefaultUserDetailService userDetailsService = new DefaultUserDetailService()\n    userDetailsService.userService = userService\n    userDetailsService.roleService = roleService\n    userDetailsService.setTwoFactorAuthDisabled(haloProperties.security.twoFactorAuthDisabled)\n    userDetailsService\n}", "CodeBleu_score": 37.0683296071332}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    def userDetailsService = new DefaultUserDetailService(userService, roleService)\n    userDetailsService.setTwoFactorAuthDisabled(haloProperties.security.twoFactorAuth.disabled)\n    return userDetailsService\n}", "CodeBleu_score": 33.993473251051775}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\t    Comment.CommentOwner commentOwner = new Comment.CommentOwner();\n    commentOwner.setKind(\"email\");\n    commentOwner.setEmail(this.email);\n    commentOwner.setDisplayName(this.displayName);\n    commentOwner.setAvatar(this.avatar);\n    commentOwner.setWebsite(this.website);\n    commentOwner.setAnnotations(this.annotations);\n    return commentOwner;\n}", "CodeBleu_score": 36.139742778737535}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t    Comment.CommentOwner owner = new Comment.CommentOwner();\n    owner.setKind(\"email\");\n    owner.setEmail(email);\n    owner.setDisplayName(displayName);\n    if (avatar != null) {\n        owner.setAnnotations(avatar.toMap());\n    }\n    if (website != null) {\n        owner.setAnnotations(website.toMap());\n    }\n    return owner;\n}", "CodeBleu_score": 33.46225330275537}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t    return new Comment.CommentOwner(kind: \"email\", email: email ?: \"\", displayName: displayName ?: \"\")\n}", "CodeBleu_score": 5.942840502423305}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    if (commentOwner.getKind() == \"email\") {\n        User user = fetch(commentOwner.getEmail());\n        return user.getName().equals(post.getOwner().getName());\n    } else {\n        return commentOwner.getName().equals(post.getOwner().getName());\n    }\n}", "CodeBleu_score": 30.702456012909433}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    if (commentOwner.getKind() == \"email\") {\n        User user = fetch(commentOwner.getEmail());\n        return user.getName().equals(post.getOwner().getName());\n    }\n    return commentOwner.getName().equals(post.getOwner().getName());\n}", "CodeBleu_score": 31.15720266530726}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    if (commentOwner.getKind() == \"email\") {\n        User user = fetch(commentOwner.getName(), User.class);\n        return user.getEmail().equals(post.getOwner().getEmail());\n    } else {\n        return commentOwner.getName().equals(post.getOwner().getName());\n    }\n}", "CodeBleu_score": 34.87911382531227}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\t  def fieldQuery = labelAndFieldSelectorToListOptions(getLabelSelector(), getFieldSelector())\n  def fieldSelector = fieldQuery ?: getFieldSelector()\n  def ownerName = getOwnerName()\n  def ownerKind = getOwnerKind()\n  def ownerIdentity = getOwnerIdentity()\n  def keyword = getKeyword()\n  def options = new ListOptions()\n  if (isNotBlank(ownerName)) {\n    options.setFieldSelector(\"spec.owner.name=${ownerName}\")\n  }\n  if (isNotBlank(ownerKind)) {\n    options.setFieldSelector(\"spec.owner.kind=${ownerKind}\")\n  }\n  if (isNotBlank(ownerIdentity)) {\n    options.setFieldSelector(\"spec.owner.identity=${ownerIdentity}\")\n  }\n  if (isNotBlank(keyword)) {\n    options.setFieldSelector(\"metadata.name~=${keyword}\")\n  }\n  if (isNotBlank(fieldSelector)) {\n    options.setFieldSelector(fieldSelector)\n  }\n  return options\n}", "CodeBleu_score": 29.694444202957538}, {"code": "public ListOptions toListOptions(){\n\t  def labelSelector = getLabelSelector()\n  def fieldSelector = getFieldSelector()\n  def keyword = getKeyword()\n  def ownerName = getOwnerName()\n  def ownerKind = getOwnerKind()\n  def ownerNamespace = getOwnerNamespace()\n\n  def fieldQuery = labelAndFieldSelectorToListOptions(labelSelector, fieldSelector)\n\n  def listOptions = new ListOptions()\n  listOptions.setFieldSelector(fieldQuery)\n\n  if (isNotBlank(keyword) && isNotBlank(ownerName)) {\n    def fieldQueryWithOwner = fieldQuery + \",metadata.name=\" + ownerName\n    listOptions.setFieldSelector(fieldQueryWithOwner)\n  }\n\n  if (isNotBlank(ownerKind) && isNotBlank(ownerName) && isNotBlank(ownerNamespace)) {\n    def fieldQueryWithOwner = fieldQuery + \",metadata.name=\" + ownerName + \",metadata.namespace=\" + ownerNamespace\n    listOptions.setFieldSelector(fieldQueryWithOwner)\n  }\n\n  return listOptions\n}", "CodeBleu_score": 32.78326107076725}, {"code": "public ListOptions toListOptions(){\n\t  ListOptions listOptions = new ListOptionsBuilder()\n    .withLabelSelector(labelAndFieldSelectorToListOptions(getLabelSelector(), getFieldSelector()))\n    .withFieldSelector(fieldSelectorToListOptions(getFieldSelector()))\n    .build();\n\n  if (isNotBlank(getKeyword())) {\n    listOptions.setFieldSelector(listOptions.getFieldSelector() + \",\" + fieldSelectorToListOptions(getFieldSelector(getKeyword())));\n  }\n\n  if (isNotBlank(getOwnerName())) {\n    listOptions.setFieldSelector(listOptions.getFieldSelector() + \",\" + fieldSelectorToListOptions(getFieldSelector(getOwnerName())));\n  }\n\n  return listOptions;\n}", "CodeBleu_score": 30.520546683776782}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    return Mono.just(commentName)\n            .filter(notNull())\n            .flatMap(nameOf -> counters.getByName(nameOf))\n            .map(getUpvote())\n            .defaultIfEmpty(new CommentStats(0, 0))\n            .map(map(CommentStats::new));\n}", "CodeBleu_score": 36.68436572045075}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    return Mono.just(commentName)\n        .filter(notNull())\n        .flatMap(getByName())\n        .switchIfEmpty(Mono.empty())\n        .map(getUpvote())\n        .defaultIfEmpty(new CommentStats())\n        .map(map(upvote -> new CommentStats(upvote)));\n}", "CodeBleu_score": 40.40616613432354}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    return Mono.just(commentName)\n            .filter(notNull())\n            .flatMap(name -> counter.get(name))\n            .map(Counter::getCount)\n            .map(upvote -> new CommentStats(commentName, upvote))\n            .defaultIfEmpty(new CommentStats(commentName, 0));\n}", "CodeBleu_score": 38.70342891211471}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\t    Subscriber subscriber = createSubscriber(identity);\n    if (subscriber == null) {\n        System.out.println(\"Failed to create subscriber\");\n        return;\n    }\n    setReasonType(subscriber, \"someone replied to you\");\n    Subscription subscription = subscribe(subscriber);\n    if (subscription == null) {\n        System.out.println(\"Failed to subscribe subscriber\");\n        return;\n    }\n    System.out.println(\"Subscribed subscriber\");\n    System.out.println(\"Press enter to exit\");\n    try {\n        System.in.read();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    unsubscribe(subscriber);\n}", "CodeBleu_score": 46.58262091555879}, {"code": "void subscribeReply(UserIdentity identity){\n\t    Subscriber subscriber = createSubscriber(identity);\n    if (subscriber != null) {\n        setReasonType(subscriber, \"reply\");\n        setExpression(subscriber, \"repliedOwner\", \"==\", identity.getName());\n        subscribe(subscriber);\n    }\n}", "CodeBleu_score": 30.31356580866494}, {"code": "void subscribeReply(UserIdentity identity){\n\t    Subscriber subscriber = createSubscriber(identity);\n    if (subscriber != null) {\n        setReasonType(subscriber, \"someone replied to you\");\n        setExpression(subscriber, \"repliedOwner\", \"==\", \"identity.name\");\n        subscribe(subscriber);\n    }\n}", "CodeBleu_score": 28.00740499357921}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\t    return updateCommentWithRetry(comment, c -> c.setApproved(true).setApprovedTime(now()));\n}", "CodeBleu_score": 8.851973625181058}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t    return updateCommentWithRetry(comment, (comment1, client) -> {\n        comment1.setApproved(true);\n        comment1.setApprovedTime(now());\n        return client.update(comment1);\n    });\n}", "CodeBleu_score": 18.64206277485004}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t    return updateCommentWithRetry(comment, comment1 -> {\n        comment1.setApproved(true);\n        comment1.setApprovedTime(now());\n        return comment1;\n    });\n}", "CodeBleu_score": 16.38407209210928}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->setLivewire($this->getLivewire());\n    }\n\n    if ($this->getRecord() && $action instanceof HasRecord) {\n        $action->setRecord($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 64.1594204101195}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->setLivewire($this->livewire);\n    }\n\n    if ($action instanceof HasRecord && $this->record) {\n        $action->setRecord($this->record);\n    }\n\n    return $action;\n}", "CodeBleu_score": 52.40985012866203}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->setLivewire($this->livewire);\n    }\n\n    if ($action instanceof HasRecord) {\n        $action->setRecord($this->record);\n    }\n\n    return $action;\n}", "CodeBleu_score": 51.7122960641446}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    $this->redirect($this->getSuccessRedirectUrl());\n    return $this;\n}", "CodeBleu_score": 21.1651498305342}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    $this->evaluateRedirectUrl($this->successRedirectUrl);\n    return $this;\n}", "CodeBleu_score": 26.119201375859102}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    $successRedirect = $this->getSuccessRedirect();\n    if (!empty($successRedirect)) {\n        $this->redirect($successRedirect);\n    }\n    return $this;\n}", "CodeBleu_score": 49.562949785157784}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if (\n        $record instanceof Model &&\n        method_exists($record, 'tags')\n    ) {\n        $tagClassName = config('taggable.tag_model');\n\n        $record->tags()->sync(\n            collect($state)->map(function ($tagName) use ($tagClassName) {\n                $locale = $tagClassName::getLocale();\n\n                $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n                if ($tag?->isEmpty() ?? true) {\n                    $tag = $tagClassName::create([\n                        'name' => [$locale => $tagName],\n                    ]);\n                }\n\n                return $tag;\n            })->flatten\n        );\n    }\n}", "CodeBleu_score": 63.321485654440224}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if (! $record?->exists || ! method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagClassName = config('tags.models.tag');\n\n    $record->tags()->sync(\n        collect($state)->map(function ($tagName) use ($tagClassName) {\n            $locale = $tagClassName::getLocale();\n\n            $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n            if ($tag?->isEmpty() ?? true) {\n                $tag = $tagClassName::create([\n                    'name' => [$locale => $tagName],\n                ]);\n            }\n\n            return $tag;\n        })->flatten\n    );\n}", "CodeBleu_score": 67.45408491720333}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if (! method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagClassName = config('taggable.models.tag');\n\n    $record->tags()->sync(\n        collect($state)->map(function ($tagName) use ($tagClassName) {\n            $locale = $tagClassName::getLocale();\n\n            $tag = $tagClassName::findFromStringOfAnyType($tagName, $locale);\n\n            if ($tag?->isEmpty() ?? true) {\n                $tag = $tagClassName::create([\n                    'name' => [$locale => $tagName],\n                ]);\n            }\n\n            return $tag;\n        })->flatten\n    );\n}", "CodeBleu_score": 67.36768074160345}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// Dissect the repository path to obtain the space path and repository name.\n\tspacePath, repositoryName, err := paths.DissectLeaf(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource for the pipeline.\n\tscope := authz.NewScope(spacePath, authz.PipelineResourceType, repositoryName, pipelineIdentifier)\n\tresource := authz.NewResource(spacePath, authz.PipelineResourceType, repositoryName, pipelineIdentifier)\n\n\t// Call the Check function with the context, authorizer, session, scope, resource, and permission to perform the authorization check.\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 60.286840822956435}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// Dissect the repository path to obtain the space path and repository name.\n\tspacePath, repoName, err := paths.DisectLeaf(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource for the pipeline.\n\tscope := authz.NewScope(scopePipeline, spacePath, repoName, pipelineIdentifier)\n\tresource := authz.NewResource(resourcePipeline, spacePath, repoName, pipelineIdentifier)\n\n\t// Check if the user has the required permission for the pipeline.\n\tif err := authorizer.Check(ctx, session, scope, resource, permission); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 55.08938861391274}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// Dissect the repository path to obtain the space path and repository name.\n\tspacePath, repoName, err := paths.DissectLeaf(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource for the pipeline.\n\tscope := authz.NewScope(\n\t\tauthz.NewResource(\n\t\t\tauthz.PipelineResourceType,\n\t\t\tpipelineIdentifier,\n\t\t),\n\t)\n\n\t// Check if the user has the required permission for the pipeline.\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 53.27960783978695}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tif session == nil {\n\t\treturn nil\n\t}\n\tif space == nil {\n\t\treturn nil\n\t}\n\tif space.Path == \"\" {\n\t\treturn nil\n\t}\n\tif permission == \"\" {\n\t\treturn nil\n\t}\n\n\tscope := &types.Scope{\n\t\tResource: &types.Resource{\n\t\t\tType: types.ResourceTypeSpace,\n\t\t\tID:   space.ID,\n\t\t},\n\t}\n\tresource := &types.Resource{\n\t\tType: types.ResourceTypeSpace,\n\t\tName: space.Name,\n\t}\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 57.65961789041562}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\t// Dissect the space path to get the parent space and name.\n\tparentSpace, name := paths.DissectSpace(space.Path)\n\n\t// Create a scope based on the parent space and name.\n\tscope := authz.NewScope(parentSpace, name)\n\n\t// Create a resource based on the parent space and name.\n\tresource := authz.NewResource(parentSpace, name)\n\n\t// Call the Check function with the context, authorizer, session, scope, resource, and permission.\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 47.566555606413154}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\t// Dissect the space path to get the parent space and name.\n\tparentSpace, name := paths.DissectLeaf(space.Path)\n\n\t// Create a scope based on the parent space and name.\n\tscope := authz.NewScope(parentSpace, name)\n\n\t// Create a resource based on the parent space and name.\n\tresource := authz.NewResource(parentSpace, name)\n\n\t// Check the session for the permission.\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 47.67822948614305}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tvar err error\n\t\tsource, err = json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, usererror.BadRequestf(\"could not marshal data: %w\", err)\n\t\t}\n\t}\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\tif err := decoder.Decode(&data); err != nil {\n\t\treturn nil, usererror.BadRequestf(\"could not decode data: %w\", err)\n\t}\n\tbuffer := bytes.NewBuffer(nil)\n\tencoder := json.NewEncoder(buffer)\n\tencoder.SetEscapeHTML(false)\n\tif err := encoder.Encode(data); err != nil {\n\t\treturn nil, usererror.BadRequestf(\"could not encode data: %w\", err)\n\t}\n\tresult := buffer.Bytes()\n\tif result[len(result)-1] == '\n' {\n\t\tresult = result[:len(result)-1]\n\t}\n\treturn result, nil\n}", "CodeBleu_score": 72.50216747686326}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tmarshaled, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn marshaled, nil\n\t}\n\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\n\terr := decoder.Decode(&data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tbuffer := bytes.NewBuffer(nil)\n\tencoder := json.NewEncoder(buffer)\n\tencoder.SetEscapeHTML(false)\n\n\terr = encoder.Encode(data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn buffer.Bytes(), nil\n}", "CodeBleu_score": 55.63178886367639}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tvar err error\n\tif len(source) == 0 {\n\t\tsource, err = json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\terr = decoder.Decode(&data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tencoder := json.NewEncoder(buffer.NewBuffer(nil))\n\tencoder.SetEscapeHTML(false)\n\terr = encoder.Encode(data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tresult := encoder.Buffer.Bytes()\n\tresult = bytes.TrimSuffix(result, []byte{'\n'})\n\treturn result, nil\n}", "CodeBleu_score": 54.62696813921652}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference.\n\trepoRef, err := reference.Validate(repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Fetch the repository.\n\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the required permissions for the session on the repository.\n\tif err := c.enforcer.Enforce(session.Ctx(), session.User, repo.ResourceID, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 47.80001352882022}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.getRepo(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check access.\n\tif err := c.checkRepoAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 38.19838097758139}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.getRepo(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif !c.repoStore.CheckAccess(ctx, session, repo, reqPermission) {\n\t\treturn nil, usererror.New(usererror.E(usererror.Unauthorized))\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 37.25803213947627}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tm := map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadEmpty: createEmptyPayloadSanitizer(),\n\t\tenum.CheckPayloadRaw:   createRawPayloadSanitizer(),\n\t}\n\n\tm[enum.CheckPayloadMarkdown] = m[enum.CheckPayloadRaw]\n\tm[enum.CheckPayloadPipeline] = createPipelinePayloadSanitizer()\n\n\treturn m\n}", "CodeBleu_score": 40.5606182442845}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tsanitizers := map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty: createEmptyPayloadSanitizer(),\n\t\tenum.CheckPayloadKindRaw:   createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindMD:    createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindPipeline: createPipelinePayloadSanitizer(),\n\t}\n\treturn sanitizers\n}", "CodeBleu_score": 32.547693066253665}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tsanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\n\tsanitizers[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindMarkdown] = sanitizers[enum.CheckPayloadKindRaw]\n\tsanitizers[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer()\n\n\treturn sanitizers\n}", "CodeBleu_score": 60.861045417603655}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\t  if self.attached_to_renderer then return self end\n  self.attached_to_renderer = true\n  self.state.on_render = on_render\n  self.state.renderer = self.state.renderer or self.renderer\n  self.state.renderer:attach(self)\n  return self", "CodeBleu_score": 53.46873772989065}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tif self.renderer ~= nil then\n\t\tself.renderer.attach(self)\n\t\tself.state.on_render = on_render\n\telse\n\t\tself.state.on_render = on_render\n\tend\n\treturn self", "CodeBleu_score": 46.298934949821756}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tlocal state = self.state\n\tif state.attached_to_renderer then\n\t\tstate.on_render = on_render\n\telse\n\t\tstate.attached_to_renderer = true\n\t\tstate.on_render = on_render\n\t\tstate.renderer:attach(self)\n\tend\n\treturn self", "CodeBleu_score": 65.4698445100366}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\t  if self:is_valid() then\n    local filename = self:get_filename()\n    if filename then\n      local watcher = loop.new_file_watcher(filename)\n      if watcher then\n        watcher:watch_file(function(err)\n          if err then\n            console.debug.error(string.format(\"Error watching file '%s': %s\", filename, err))\n          else\n            callback()\n          end\n        end)\n        self.watcher = watcher\n      else\n        console.debug.error(string.format(\"Error creating file watcher for file '%s'\", filename))\n      end\n    else\n      console.debug.error(\"Buffer is not valid\")\n    end\n  else\n    console.debug.error(\"Buffer is not valid\")\n  end", "CodeBleu_score": 41.85936137228102}, {"code": "function Buffer:watch(callback)\n\t\tif not self:is_valid() then return end\n\tif not callback then return end\n\tif self.watcher then return end\n\tlocal filename = self.filename\n\tif not filename then return end\n\tlocal watcher = loop.new_file_watcher(filename)\n\tif not watcher then\n\t\tconsole.debug.error(\"Failed to create file watcher for buffer: \" .. filename)\n\t\treturn\n\tend\n\tself.watcher = watcher\n\twatcher:on_change(function(watcher)\n\t\tif not self:is_valid() then return end\n\t\tif not callback then return end\n\t\tcallback()\n\tend)\n\twatcher:start()", "CodeBleu_score": 44.65351346285751}, {"code": "function Buffer:watch(callback)\n\t    if self:is_valid() then\n        local filename = self:get_filename()\n        if filename then\n            local watcher = self.watcher\n            if not watcher then\n                watcher = self.watcher = {}\n            end\n            local watcher_id = watcher.watcher_id\n            if not watcher_id then\n                watcher_id = watcher.watcher_id = watcher.new(filename)\n            end\n            if watcher_id then\n                local watcher_callback = watcher.watcher_callback\n                if not watcher_callback then\n                    watcher_callback = watcher.watcher_callback = function()\n                        if callback then\n                            callback()\n                        end\n                    end\n                end\n                watcher.watcher_callback = watcher_callback\n                watcher.watcher_id = watcher_id\n                watcher.watcher_filename = filename\n                watcher.watcher_callback = watcher_callback\n                watcher.watcher_callback()\n            else\n                console.debug.error(\"Error watching file: %s\", filename)\n            end\n        else\n            console.debug.error(\"No filename for buffer: %s\", self:get_id())\n        end\n    end", "CodeBleu_score": 43.197205965467106}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\t    if self.hex then return self.hex end\n\n    local attr = self.foreground and \"fg\" or \"bg\"\n    local color_spec = self.color_spec[attr]\n    local color_id = self.color_spec[attr .. \"_id\"]\n\n    if color_id then\n        local hex = vim.api.nvim_get_hl_by_id(color_id, true)[attr]\n        if hex then\n            self.hex = hex\n            return hex\n        end\n    end\n\n    local color_name = self.color_spec[attr]\n    if not color_name then return end\n\n    local color_spec = self.color_spec[attr]\n    local color_id = vim.api.nvim_get_hl_id_by_name(color_name)\n    if not color_id then return end\n\n    self.color_spec[attr .. \"_id\"] = color_id\n    local hex = vim.api.nvim_get_hl_by_id(color_id, true)[attr]\n    if hex then\n        self.hex = hex\n        return hex\n    end", "CodeBleu_score": 49.00431927377994}, {"code": "function Color:to_hex()\n\t  if self.hex then\n    return self.hex\n  end\n  local attr = self.attr\n  local color_spec = self.color_spec\n  local color_name = self.color_name\n  if not color_spec then\n    color_spec = self:get_color_spec()\n  end\n  if not color_name then\n    color_name = self:get_color_name()\n  end\n  if not color_spec then\n    return nil\n  end\n  local hex\n  if attr == 'fg' then\n    hex = vim.fn.synIDattr(color_spec, 'fg')\n  elseif attr == 'bg' then\n    hex = vim.fn.synIDattr(color_spec, 'bg')\n  end\n  if hex == '' then\n    return nil\n  end\n  hex = hex:gsub('#', '')\n  if #hex ~= 6 then\n    return nil\n  end\n  self.hex = hex\n  return hex", "CodeBleu_score": 48.79603769018114}, {"code": "function Color:to_hex()\n\t  if self.hex then return self.hex end\n\n  local spec = self:get_spec()\n  local attr = self:get_attr()\n  local hex\n\n  if attr == \"fg\" then\n    hex = vim.api.nvim_get_hl_by_name(spec, true)\n  elseif attr == \"bg\" then\n    hex = vim.api.nvim_get_hl_by_name(spec, false)\n  end\n\n  if hex then\n    self.hex = hex\n    return hex\n  end\n\n  return nil", "CodeBleu_score": 53.53824526852314}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = buffer:get_lines()\n\tfor i, line in ipairs(lines) do\n\t\tlocal matches = line:find(pattern)\n\t\tif matches then\n\t\t\tfor j, match in ipairs(matches) do\n\t\t\t\tself:add_highlight(buffer, match, match + #pattern, hl)\n\t\t\tend\n\t\tend\n\tend\n\treturn self", "CodeBleu_score": 43.1832042231594}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t  local lines = buffer:get_lines()\n  local linenr = 0\n  for line in lines:lines() do\n    linenr = linenr + 1\n    local start, stop = line:find(pattern)\n    if start then\n      self:add_highlight(buffer, linenr, start, stop, hl)\n    end\n  end\n  return self", "CodeBleu_score": 49.99509623234732}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t  local lines = buffer:get_lines()\n  for _, line in ipairs(lines) do\n    local matches = line:find(pattern)\n    if matches then\n      for i = 1, #matches do\n        self:add_highlight(buffer, matches[i], hl)\n      end\n    end\n  end\n  return self", "CodeBleu_score": 45.54361254782157}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t    local id = self:generate_id(row, col)\n    local extmark = vim.api.nvim_buf_set_extmark(buffer, self.ns_id, row, col, {\n        id = id,\n        virt_text = { { text, hl } },\n        virt_text_pos = pos,\n        virt_text_win_col = col,\n        virt_text_hide = true,\n        hl_mode = 'combine',\n        priority = priority\n    })\n    return extmark", "CodeBleu_score": 67.58763969512196}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t    local id = buffer:generate_unique_id(row, col)\n    buffer:set_extmark(id, row, col, {\n        virt_text = { { text, hl } },\n        virt_text_pos = pos,\n        virt_text_win_col = col,\n        virt_text_hide = false,\n        virt_text_hide_on_insert = true,\n        hl_mode = \"combine\",\n        priority = priority\n    })\n    return id", "CodeBleu_score": 58.078864208139166}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t  if not text or text == \"\" then return end\n  if not hl then hl = \"NeovimCursorLine\" end\n  if not row then row = 1 end\n  if not col then col = 1 end\n  if not pos then pos = \"eol\" end\n  if not priority then priority = 1000 end\n\n  local id = self:get_virtual_text_id(buffer, row, col)\n  if not id then\n    id = self:add_virtual_text_id(buffer, row, col)\n  end\n\n  self.virtual_text[id] = {\n    text = text,\n    hl = hl,\n    row = row,\n    col = col,\n    pos = pos,\n    priority = priority,\n  }\n\n  return id", "CodeBleu_score": 43.951595410752766}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = \"\"\n\tlocal lines = {}\n\tfor i = 1, #output do\n\t\tlocal c = output:sub(i, i)\n\t\tif c == \"", "CodeBleu_score": 23.25031667260393}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = \"\"\n\tlocal i = 1\n\twhile i <= #output do\n\t\tlocal c = output:sub(i, i)\n\t\tif c == \"", "CodeBleu_score": 17.97877111288925}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal lines = {}\n\tlocal line = \"\"\n\tfor i = 1, #output do\n\t\tlocal char = output:sub(i, i)\n\t\tif char == \"", "CodeBleu_score": 26.129737275189658}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t    if self.watchers[path] then\n        return self.watchers[path]\n    end\n\n    local watcher = vim.loop.new_fs_event()\n    vim.loop.fs_event_start(watcher, path, handler)\n    self.watchers[path] = watcher\n    return watcher", "CodeBleu_score": 51.56956080322252}, {"code": "function Watcher:watch_file(path, handler)\n\t  if self.watchers[path] then\n    return self.watchers[path]\n  end\n\n  local watcher = vim.loop.new_fs_event()\n  watcher:start(path, vim.schedule_wrap(handler))\n  self.watchers[path] = watcher\n  return watcher", "CodeBleu_score": 48.24693313867655}, {"code": "function Watcher:watch_file(path, handler)\n\t  local watcher = self.watchers[path]\n  if watcher then\n    return watcher\n  end\n\n  watcher = vim.loop.new_fs_event()\n  watcher:start(path, handler)\n  self.watchers[path] = watcher\n\n  return watcher", "CodeBleu_score": 46.1337614027378}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t  local hunks = self.git_object:live_hunks()\n  if hunks.error then return hunks.error end\n  local lines = self:get_lines()\n  local sign_ns_id = self:get_sign_ns_id()\n  local signs = {}\n  for _, hunk in ipairs(hunks) do\n    local hunk_signs = {}\n    for _, hunk_line in ipairs(hunk) do\n      local line_nr = hunk_line.line_nr\n      local line = lines[line_nr]\n      local sign_name = hunk_line.type .. \":\" .. line_nr\n      local sign_id = vim.fn.sign_getplaced(sign_name, {bufnr = self.bufnr, lnum = line_nr})\n      local sign_id = sign_id[1].signs[1]\n      if sign_id then\n        vim.fn.sign_unplace(sign_ns_id, {id = sign_id})\n      end\n      vim.fn.sign_place(sign_id, sign_ns_id, hunk_line.type, self.bufnr, line_nr, {texthl = hunk_line.type})\n      hunk_signs[line_nr] = sign_id\n    end\n    table.insert(signs, {\n      hunk_signs = hunk_signs,\n      type = hunk.type,\n      hunks = hunk\n    })\n  end\n  self.signs = signs\n  self:update_signs()\n  return hunks", "CodeBleu_score": 50.33978729558074}, {"code": "function GitBuffer:live_hunks()\n\t  \n  local lines = self:get_lines()\n  if not lines then return nil, \"could not retrieve lines\" end\n  \n  local hunks, err = self.git_object:live_hunks()\n  if not hunks then return nil, err end\n  \n  for i, hunk in ipairs(hunks) do\n    local line_start = hunk.line_start\n    local line_end = hunk.line_end\n    local type = hunk.type\n    local priority = hunk.priority\n    local lines_in_hunk = line_end - line_start + 1\n    local lines_to_add = lines_in_hunk\n    local lines_to_remove = lines_in_hunk\n    local lines_to_change = lines_in_hunk\n    \n    local sign_ns_id = self:get_sign_ns_id()\n    \n    if type == \"add\" then\n      for j = line_start, line_end do\n        vim.fn.sign_define(sign_ns_id, {\n          text = \"+\",\n          texthl = \"GitGutterAdd\",\n          linehl = \"GitGutterAddLine\",\n          numhl = \"GitGutterAddLineNr\",\n        })\n        vim.fn.sign_place(i, sign_ns_id, \"GitGutterAdd\", self.bufnr, j, {})\n      end\n    elseif type == \"change\" then\n      for j = line_start, line_end do\n        vim.fn.sign_define(sign_ns_id, {\n          text = \"~\",\n          texthl = \"GitGutterChange\",\n          linehl = \"GitGutterChangeLine\",\n          numhl = \"GitGutterChangeLineNr\",\n        })\n        vim.fn.sign_place(i, sign_ns_id, \"GitGutterChange\", self.bufnr, j, {})\n      end\n    elseif type == \"remove\" then\n      for j = line_start, line_end do\n        vim.fn.sign_define(sign_ns_id, {\n          text = \"-\",\n          texth", "CodeBleu_score": 43.026146607769014}, {"code": "function GitBuffer:live_hunks()\n\t  local lines = self:get_lines()\n  if not lines then return self.git_object:get_error() end\n  local hunks = self.git_object:live_hunks()\n  if not hunks then return self.git_object:get_error() end\n  local signs = {}\n  local sign_priorities = {}\n  for _, hunk in ipairs(hunks) do\n    for _, line in ipairs(hunk.lines) do\n      local line_number = line.line_number\n      local sign_id = self:get_sign_ns_id(line_number)\n      local sign_type = line.type\n      local sign_priority = line.priority\n      signs[sign_id] = {\n        sign_type = sign_type,\n        line_number = line_number,\n        hunk = hunk,\n      }\n      if not sign_priorities[sign_type] then\n        sign_priorities[sign_type] = sign_priority\n      else\n        sign_priorities[sign_type] = math.min(sign_priorities[sign_type], sign_priority)\n      end\n    end\n  end\n  for sign_id, sign in pairs(signs) do\n    vim.fn.sign_place(sign_id, self.sign_group, sign.sign_type, self.bufnr, {\n      lnum = sign.line_number,\n      priority = sign_priorities[sign.sign_type],\n    })\n  end\n  self.signs = signs\n  return hunks", "CodeBleu_score": 49.95037576318365}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\t  local tmp_file = fs.tmpname()\n  local fh = io.open(tmp_file, 'w')\n  fh:write(patch)\n  fh:close()\n  local err = self.git:stage_hunk_from_patch(tmp_file)\n  fs.remove_file(tmp_file)\n  return err", "CodeBleu_score": 56.915197898156286}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal tmpname = fs.tmpname()\n\tlocal fd = fs.open(tmpname, \"w\")\n\tif fd then\n\t\tlocal err = fs.write(fd, patch)\n\t\tif err then\n\t\t\tfs.close(fd)\n\t\t\tfs.remove_file(tmpname)\n\t\t\treturn err\n\t\tend\n\t\terr = fs.close(fd)\n\t\tif err then\n\t\t\tfs.remove_file(tmpname)\n\t\t\treturn err\n\t\tend\n\t\tlocal err = self:stage_hunk_from_file(tmpname)\n\t\tfs.remove_file(tmpname)\n\t\treturn err\n\tend\n\treturn \"Failed to open temporary file for staging hunk\"", "CodeBleu_score": 54.95086956180567}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal tmpname = fs.tmpname()\n\tlocal f = io.open(tmpname, \"w\")\n\tf:write(patch)\n\tf:close()\n\tlocal err = self.git:stage_hunk_from_patch(tmpname)\n\tfs.remove_file(tmpname)\n\treturn err", "CodeBleu_score": 54.515012287337974}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t  String accessTokenEndpoint = getAccessTokenEndpoint();\n  String authHeader = getHttpBasicAuthHeaderValue();\n  String verb = getAccessTokenVerb();\n  Map<String, String> bodyParams = getBody();\n  bodyParams.put(\"oauth_verifier\", verifier.getValue());\n  bodyParams.put(\"oauth_token\", requestToken.getValue());\n  HttpResponse response = sendRequest(accessTokenEndpoint, authHeader, verb, bodyParams);\n  return extract(response);\n}", "CodeBleu_score": 40.51084919587581}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    // Create the OAuth request\n    OAuthRequest request = new OAuthRequest(getAccessTokenVerb(), getAccessTokenEndpoint());\n    // Add the necessary parameters\n    addBodyParameter(request, \"oauth_token\", requestToken.getToken());\n    addBodyParameter(request, \"oauth_verifier\", verifier.getValue());\n    // Add the authentication header\n    request.addHeader(getHttpBasicAuthHeaderValue());\n    // Send the request\n    Response response = send(request);\n    // Extract the access token from the response body\n    return extract(response);\n}", "CodeBleu_score": 49.73553166386691}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    // Create an OAuth request to the access token endpoint\n    OAuthRequest request = new OAuthRequest(getAccessTokenVerb(), getAccessTokenEndpoint());\n\n    // Add the necessary authentication header and body parameters to the request\n    addHeader(request);\n    addBodyParameter(request, getAccessTokenBodyParameters(requestToken, verifier));\n\n    // Send the request\n    Response response = send(request);\n\n    // Extract the access token from the response body\n    return extract(response);\n}", "CodeBleu_score": 43.795175337012445}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\n    CredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(\n            new AuthScope(host.getHostName(), host.getPort()),\n            new UsernamePasswordCredentials(username, password));\n    context.setCredentialsProvider(credsProvider);\n\n    AuthCache authCache = new BasicAuthCache();\n    BasicScheme basicAuth = new BasicScheme();\n    authCache.put(host, basicAuth);\n    context.setAuthCache(authCache);\n\n    log.info(\"Added \" + host.getHostName() + \" to auth cache\");\n}", "CodeBleu_score": 49.48690101681955}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    context.setCredentialsProvider(credsProvider);\n    context.setAuthCache(authCache);\n    authCache.put(host, basicAuthCacheEntry);\n    log.info(\"Added host {} to auth cache\", host);\n}", "CodeBleu_score": 23.536758247126834}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    // Set up the credentials provider\n    CredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(\n            new AuthScope(host.getHostName(), host.getPort()),\n            new UsernamePasswordCredentials(username, password));\n    // Add authentication cache to the execution context\n    AuthCache authCache = new BasicAuthCache();\n    authCache.put(host, new BasicScheme());\n    // Add AuthCache to the execution context\n    context.setCredentialsProvider(credsProvider);\n    context.setAuthCache(authCache);\n    // Log action\n    logger.info(\"Added \" + host.getHostName() + \" to auth cache\");\n}", "CodeBleu_score": 51.978173490548215}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins jenkins = Jenkins.getInstance();\n    if (jenkins == null) {\n        throw new IllegalStateException(\"Jenkins instance is null\");\n    }\n    AvatarCache avatarCache = jenkins.getExtensionList(AvatarCache.class).get(0);\n    if (avatarCache == null) {\n        throw new IllegalStateException(\"AvatarCache extension is null\");\n    }\n    String cacheKey = getCacheKey(source, size);\n    avatarCache.seed(cacheKey);\n    String rootUrl = getRootUrlFromRequest();\n    String encodedKey = rawEncode(cacheKey);\n    return rootUrl + \"/userContent/avatars/\" + size + \"/\" + encodedKey;\n}", "CodeBleu_score": 46.18213031991611}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins jenkins = Jenkins.getInstance();\n    AvatarCacheExtension cache = jenkins.getExtensionList(AvatarCacheExtension.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"No AvatarCacheExtension found\");\n    }\n    String key = cache.getCacheEntry(source).getKey();\n    if (key == null) {\n        throw new IllegalStateException(\"AvatarCacheExtension returned null key\");\n    }\n    String url = jenkins.getRootUrlFromRequest();\n    if (url == null) {\n        throw new IllegalStateException(\"Jenkins instance has no root URL\");\n    }\n    try {\n        return url + \"avatars/\" + key + \"/\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding not supported\");\n    }\n}", "CodeBleu_score": 50.11793335574701}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins jenkins = Jenkins.getInstanceOrNull();\n    if (jenkins == null) {\n        throw new IllegalStateException(\"Jenkins instance is not available\");\n    }\n\n    AvatarCacheExtension extension = jenkins.getExtensionList(AvatarCacheExtension.class).get(0);\n    if (extension == null) {\n        throw new IllegalStateException(\"AvatarCacheExtension is not available\");\n    }\n\n    String key = getCacheEntry(source);\n    if (key == null) {\n        throw new IllegalStateException(\"AvatarCacheExtension is not available\");\n    }\n\n    String cacheKey = getCacheKey(source, size);\n    extension.seed(key, cacheKey);\n\n    String rootUrl = getRootUrlFromRequest();\n    if (rootUrl == null) {\n        throw new IllegalStateException(\"Root URL is not available\");\n    }\n\n    try {\n        return rootUrl + \"/\" + getUrlName() + \"/\" + rawEncode(cacheKey);\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding is not supported\");\n    }\n}", "CodeBleu_score": 49.040067739227}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    this.image = scaleImage(image);\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 41.94488775908607}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t\tthis.source = source;\n\tthis.image = image;\n\tthis.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n\tif (image.getWidth() > 128 || image.getHeight() > 128) {\n\t\tthis.image = scaleImage(image);\n\t}\n}", "CodeBleu_score": 56.08802157175511}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    this.image = scaleImage(image);\n    this.lastModified = (lastModified < 0) ? currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 31.519625745250003}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    try {\n        if (future.isDone()) {\n            try {\n                Image image = future.get();\n                if (image != null) {\n                    this.image = image;\n                    lastModified = System.currentTimeMillis();\n                }\n            } catch (ExecutionException e) {\n                e.printStackTrace();\n            }\n            future = null;\n            return false;\n        } else {\n            return true;\n        }\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n        return true;\n    }\n}", "CodeBleu_score": 56.29953548132289}, {"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    try {\n        if (future.isDone()) {\n            CacheEntry entry = future.get();\n            if (entry != null) {\n                image = entry.image;\n                lastModified = entry.lastModified;\n                future = null;\n            }\n            return false;\n        }\n    } catch (Exception e) {\n        future = null;\n        return true;\n    }\n    return true;\n}", "CodeBleu_score": 56.57304938842199}, {"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    if (future.isDone()) {\n        try {\n            entry = future.get();\n            future = null;\n            return false;\n        } catch (Exception e) {\n            future = null;\n            return true;\n        }\n    }\n    return true;\n}", "CodeBleu_score": 39.8218120915262}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    OutputStream out = rsp.getOutputStream();\n    try {\n        // generate the image\n        generateImage(node, baos);\n\n        // write the image to the response output stream\n        rsp.setContentType(\"image/png\");\n        rsp.addDateHeader(\"Expires\", System.currentTimeMillis() + 60 * 60 * 1000);\n        rsp.setContentLength(baos.size());\n        out.write(baos.toByteArray());\n        out.flush();\n    } finally {\n        baos.close();\n    }\n}", "CodeBleu_score": 47.9449434963081}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    ImageIO.write(img, \"png\", baos);\n    baos.flush();\n    byte[] bytes = baos.toByteArray();\n    baos.close();\n    rsp.setContentType(\"image/png\");\n    rsp.addDateHeader(\"Expires\", System.currentTimeMillis() + 3600000L);\n    rsp.addHeader(\"Cache-Control\", \"max-age=3600\");\n    rsp.setContentLength(bytes.length);\n    rsp.getOutputStream().write(bytes);\n    rsp.getOutputStream().flush();\n}", "CodeBleu_score": 53.042995764609245}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    try {\n        writeImage(node, baos);\n        if (req.checkIfModified(baos.toByteArray(), \"image/png\")) {\n            return;\n        }\n        rsp.setContentType(\"image/png\");\n        rsp.setHeader(\"Pragma\", \"no-cache\");\n        rsp.setDateHeader(\"Expires\", 0);\n        rsp.setHeader(\"Cache-Control\", \"no-cache\");\n        rsp.setHeader(\"Cache-Control\", \"no-store\");\n        rsp.setHeader(\"Cache-Control\", \"must-revalidate\");\n        rsp.setHeader(\"Cache-Control\", \"post-check=0\");\n        rsp.setHeader(\"Cache-Control\", \"pre-check=0\");\n        rsp.setHeader(\"Cache-Control\", \"private\");\n        rsp.setContentLength(baos.size());\n        rsp.getOutputStream().write(baos.toByteArray());\n        rsp.getOutputStream().flush();\n    } finally {\n        baos.close();\n    }\n}", "CodeBleu_score": 43.440786221412154}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t    this.enableCache = enableCache;\n    this.teamCacheDuration = teamCacheDuration;\n    this.repositoriesCacheDuration = repositoriesCacheDuration;\n    this.owner = owner;\n    this.projectKey = projectKey;\n    this.repositoryName = repositoryName;\n    this.authenticator = authenticator;\n    configureContext();\n    setConnectionManager();\n    setClientProxyParams();\n    build();\n    convert();\n    setExpireDuration();\n    setConnectionManagerShared();\n    setRetryHandler();\n    setKeepAliveStrategy();\n    create();\n    configureBuilder();\n}", "CodeBleu_score": 28.83008737359909}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t    super(owner, projectKey, repositoryName);\n    this.enableCache = enableCache;\n    this.teamCacheDuration = teamCacheDuration;\n    this.repositoriesCacheDuration = repositoriesCacheDuration;\n    this.authenticator = authenticator;\n    configureContext();\n    setConnectionManager();\n    setClientProxyParams();\n    build();\n    convert();\n    setExpireDuration();\n    setConnectionManagerShared();\n    setRetryHandler();\n    setKeepAliveStrategy();\n    create();\n    configureBuilder();\n}", "CodeBleu_score": 22.513410871659147}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t        this.enableCache = enableCache;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.teamCache = new ConcurrentHashMap<>();\n        this.repositoriesCache = new ConcurrentHashMap<>();\n    }", "CodeBleu_score": 25.995699224867526}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    def source = getSource(pullRequest)\n    def destination = getDestination(pullRequest)\n\n    if (source) {\n        source.commitClosure = getRawNode(source)\n    }\n\n    if (destination) {\n        destination.commitClosure = getRawNode(destination)\n    }\n}", "CodeBleu_score": 23.879315583587257}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    def source = getSource(pullRequest)\n    def destination = getDestination(pullRequest)\n    def sourceClosure = getCommitClosure(source)\n    def destinationClosure = getCommitClosure(destination)\n    setCommitClosure(source, sourceClosure)\n    setCommitClosure(destination, destinationClosure)\n}", "CodeBleu_score": 22.153131572960298}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    def source = getSource(pullRequest)\n    def destination = getDestination(pullRequest)\n\n    if (source) {\n        def rawNode = getRawNode(source)\n        if (rawNode) {\n            setCommitClosure(source, rawNode)\n        }\n    }\n\n    if (destination) {\n        def rawNode = getRawNode(destination)\n        if (rawNode) {\n            setCommitClosure(destination, rawNode)\n        }\n    }\n}", "CodeBleu_score": 27.530061562958263}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    URL rootUrl = JenkinsLocationConfiguration.get().getUrl();\n    if (rootUrl == null) {\n        throw new IllegalStateException(\"Jenkins URL is not set\");\n    }\n    DisplayURLProvider displayURLProvider = DisplayURLProvider.all().get(rootUrl);\n    if (displayURLProvider == null) {\n        throw new IllegalStateException(\"Display URL provider for Jenkins URL is not set\");\n    }\n    return displayURLProvider.getRunURL(build);\n}", "CodeBleu_score": 54.09788464983771}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    String url = null\n    Location location = JenkinsLocationConfiguration.get()\n    if (location != null) {\n        url = location.getUrl()\n        if (url != null) {\n            url = new DisplayURLProvider().getRunURL(build)\n        }\n    }\n    if (url == null) {\n        throw new IllegalStateException(\"Jenkins URL is not configured correctly.\")\n    }\n    return url\n}", "CodeBleu_score": 48.421285856639734}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration config = JenkinsLocationConfiguration.get();\n    if (config == null) {\n        throw new IllegalStateException(\"Jenkins URL is not configured\");\n    }\n    String url = config.getUrl();\n    if (url == null) {\n        throw new IllegalStateException(\"Jenkins URL is not configured\");\n    }\n    return url;\n}", "CodeBleu_score": 52.14613829911157}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    if (!URLValidator.getInstance().isValid(url)) {\n        throw new IllegalStateException(\"Invalid URL: \" + url);\n    }\n    if (url.startsWith(\"http://localhost:\")) {\n        throw new IllegalStateException(\"Cannot use localhost as the host for a Bitbucket API client. Please configure the URL in the Jenkins global configuration.\");\n    }\n    if (url.startsWith(\"http://unconfigured-jenkins-location:\")) {\n        throw new IllegalStateException(\"Cannot use unconfigured-jenkins-location as the host for a Bitbucket API client. Please configure the URL in the Jenkins global configuration.\");\n    }\n    if (bitbucket.isCloud() && !url.startsWith(\"https://\")) {\n        throw new IllegalStateException(\"Bitbucket Cloud API clients must use HTTPS. Please configure the URL in the Jenkins global configuration.\");\n    }\n    if (bitbucket.isServer() && url.startsWith(\"https://\")) {\n        throw new IllegalStateException(\"Bitbucket Server API clients must use HTTP. Please configure the URL in the Jenkins global configuration.\");\n    }\n    return url;\n}", "CodeBleu_score": 38.843444203726584}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    if (url.startsWith(\"http://localhost:\")) {\n        throw new IllegalStateException(\"The Bitbucket API does not support using \\\"localhost\\\" as the host. Please configure a fully qualified hostname in the Bitbucket plugin settings.\");\n    }\n    if (url.startsWith(\"http://unconfigured-jenkins-location:\")) {\n        throw new IllegalStateException(\"The Bitbucket API does not support using \\\"unconfigured-jenkins-location\\\" as the host. Please configure a fully qualified hostname in the Bitbucket plugin settings.\");\n    }\n    if (bitbucket.isCloud() && !url.startsWith(\"https://\")) {\n        throw new IllegalStateException(\"Bitbucket Cloud API clients must use HTTPS. Please configure a fully qualified HTTPS hostname in the Bitbucket plugin settings.\");\n    }\n    try {\n        new URL(url);\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"The Bitbucket API URL is malformed. Please configure a fully qualified hostname in the Bitbucket plugin settings.\");\n    }\n    return url;\n}", "CodeBleu_score": 43.67265505205121}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    URL parsedUrl = new URL(url)\n    String host = parsedUrl.getHost()\n    String protocol = parsedUrl.getProtocol()\n    if (host == null) {\n        throw new IllegalStateException(\"Unable to parse URL: ${url}. Please check that it is well-formed.\")\n    }\n    if (host.equals(\"localhost\") || host.equals(\"unconfigured-jenkins-location\")) {\n        throw new IllegalStateException(\"The Jenkins URL cannot be localhost or unconfigured-jenkins-location. Please configure a valid Jenkins URL.\")\n    }\n    if (bitbucket.isCloud() && !host.contains(\".\")) {\n        throw new IllegalStateException(\"The Bitbucket Cloud API requires the Jenkins URL to be fully qualified. Please configure a valid Jenkins URL.\")\n    }\n    return protocol + \"://\" + host\n}", "CodeBleu_score": 47.90291295417599}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t    // Get the Bitbucket context\n    BitbucketContext bitbucketContext = BitbucketUtils.getBitbucketContext(source);\n    if (bitbucketContext == null) {\n        listener.getLogger().println(\"[Bitbucket] Could not get Bitbucket context\");\n        return;\n    }\n\n    // Check if notifications are disabled\n    if (bitbucketContext.isNotificationsDisabled()) {\n        listener.getLogger().println(\"[Bitbucket] Notifications are disabled\");\n        return;\n    }\n\n    // Get the SCM revision and its hash\n    SCMRevision revision = source.fetch(build, listener);\n    if (revision == null) {\n        listener.getLogger().println(\"[Bitbucket] Could not get SCM revision\");\n        return;\n    }\n\n    // Determine whether to share the build key between branch and PR\n    String buildKey = getBuildKey(source, build, listener);\n    if (buildKey == null) {\n        listener.getLogger().println(\"[Bitbucket] Could not get build key\");\n        return;\n    }\n\n    // Get the Bitbucket client\n    BitbucketClient client = buildBitbucketClient(bitbucketContext, build, listener);\n    if (client == null) {\n        listener.getLogger().println(\"[Bitbucket] Could not get Bitbucket client\");\n        return;\n    }\n\n    // Get the SCM revision type\n    SCMRevision.Type revisionType = revision.getType();\n    if (revisionType == null) {\n        listener.getLogger().println(\"[Bitbucket] Could not get SCM revision type\");\n        return;\n    }\n\n    // Log the notification type\n    String notificationType = revisionType.toString().toLowerCase();\n    listener.getLogger().println(\"[Bitbucket] Sending \" + notificationType + \" notification\");\n\n    // Construct the build key\n    if (buildKey.startsWith(\"PR-\")) {\n        buildKey = buildKey + \"-\" + notificationType;\n    }\n\n    // Initialize the Bitbucket client\n    client.initialize(buildKey, build.getResult());\n\n    // Create and send the build status notification\n    createStatus(client, revision, listener);\n}", "CodeBleu_score": 37.08685597477155}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t    if (notificationsDisabled()) {\n        return\n    }\n    String revision = getRevision(source, build, listener)\n    String hash = getHash(revision)\n    String buildKey = getBuildKey(source, build, hash)\n    String notificationType = determineNotificationType(source, build)\n    String originName = getOriginName(source, build, listener)\n    BitbucketClient client = buildBitbucketClient(source, build, listener)\n    createStatus(client, notificationType, originName, buildKey, hash, build, listener)\n}", "CodeBleu_score": 17.608555957074945}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t    BitbucketContext context = new BitbucketContext(source, build, listener);\n    if (context.notificationsDisabled()) {\n        return;\n    }\n    String revision = context.getRevision();\n    String hash = context.getHash();\n    String buildKey = context.getBuildKey();\n    BitbucketClient client = context.buildBitbucketClient();\n    client.createStatus(buildKey, context.createStatus(revision, hash));\n}", "CodeBleu_score": 18.775127265398286}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String buildKey = \"\";\n    if (shareBuildKeyBetweenBranchAndPR) {\n        buildKey = build.getParent().getFullName() + \"_\" + branch;\n    } else {\n        buildKey = build.getParent().getFullName();\n    }\n    return buildKey;\n}", "CodeBleu_score": 49.37166510398649}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String buildKey;\n    if (shareBuildKeyBetweenBranchAndPR) {\n        buildKey = getParent(build) + \"/\" + branch;\n    } else {\n        buildKey = getFullName(build);\n    }\n    return buildKey;\n}", "CodeBleu_score": 32.89481937983575}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String key = \"\";\n    if (shareBuildKeyBetweenBranchAndPR) {\n        key = getParent(build).getFullName() + \":\" + branch;\n    } else {\n        key = getParent(build).getFullName();\n    }\n    return key;\n}", "CodeBleu_score": 45.811767060519124}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        serverUrl = BitbucketSCMSource.defaultServerUrl\n        log.warn(\"The serverUrl field is null for BitbucketSCMNavigator '{}'. Defaulting to '{}'.\", getName(), serverUrl)\n    }\n    if (traits == null) {\n        traits = new ArrayList<SCMSourceTrait>(2)\n        traits.add(new BranchDiscoveryTrait(BranchDiscoveryTrait.DONT_FETCH_FROM_REMOTE, BranchDiscoveryTrait.FETCH_HEAD))\n        traits.add(new OriginPullRequestDiscoveryTrait(OriginPullRequestDiscoveryTrait.NOT_BUILD_INCLUDE_BRANCHES, OriginPullRequestDiscoveryTrait.buildOriginPullRequestDiscoveryTrait(OriginPullRequestDiscoveryTrait.OriginPullRequestDiscoveryStrategy.MERGE_REQUEST_STRATEGY)))\n    }\n    return this\n}", "CodeBleu_score": 26.306678160655096}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        serverUrl = BitbucketSCMSource.get().getServerUrl();\n        if (serverUrl == null) {\n            log.warning(\"BitbucketSCMNavigator: serverUrl is null\");\n        }\n    }\n    if (traits == null) {\n        traits = new ArrayList<>();\n        if (includes != null) {\n            traits.add(new BitbucketSCMSourceTrait(includes));\n        }\n        if (excludes != null) {\n            traits.add(new BitbucketSCMSourceTrait(excludes));\n        }\n        if (repoOwner != null) {\n            traits.add(new BitbucketSCMSourceTrait(repoOwner));\n        }\n        if (repoName != null) {\n            traits.add(new BitbucketSCMSourceTrait(repoName));\n        }\n        if (credentialsId != null) {\n            traits.add(new BitbucketSCMSourceTrait(credentialsId));\n        }\n        if (traits.isEmpty()) {\n            traits.add(new BitbucketSCMSourceTrait());\n        }\n    }\n    return this;\n}", "CodeBleu_score": 33.49058340316492}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        serverUrl = BitbucketSCMSource.defaultServerUrl\n        log.log(Level.WARNING, \"BitbucketSCMNavigator: serverUrl is null, using default: {0}\", serverUrl)\n    }\n    if (traits == null) {\n        traits = new ArrayList<SCMSourceTrait>()\n        if (credentialsId != null) {\n            traits.add(new BitbucketCredentialsTrait(credentialsId))\n        }\n        if (repoOwner != null) {\n            traits.add(new BitbucketRepositoryOwnerTrait(repoOwner))\n        }\n        if (repoName != null) {\n            traits.add(new BitbucketRepositoryNameTrait(repoName))\n        }\n        if (pattern != null) {\n            traits.add(new BitbucketRepositoryNamePatternTrait(pattern))\n        }\n        if (includes != null) {\n            traits.add(new BitbucketRepositoryNameIncludeExcludeTrait(includes, null))\n        }\n        if (excludes != null) {\n            traits.add(new BitbucketRepositoryNameIncludeExcludeTrait(null, excludes))\n        }\n        if (branches != null) {\n            traits.add(new BranchDiscoveryTrait(branches))\n        }\n        if (originPRs != null) {\n            traits.add(new OriginPullRequestDiscoveryTrait(originPRs))\n        }\n        if (forkPRs != null) {\n            traits.add(new ForkPullRequestDiscoveryTrait(forkPRs))\n        }\n        if (originBranches != null) {\n            traits.add(new OriginBranchDiscoveryTrait(originBranches))\n        }\n        if (forkBranches != null) {\n            traits.add(new ForkBranchDiscoveryTrait(forkBranches))\n        }\n        if (tags != null) {\n            traits.add(new TagDiscoveryTrait(tags))\n        }\n        if (disableStrictHttps) {\n            traits.add(new BitbucketH", "CodeBleu_score": 37.00415332689245}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\t    def repo = getBitbucketRepository(name)\n    def logger = getLogger()\n    def fullName = getFullName(repo)\n    def format = \"Repository %s %s\"\n    if (isMatch) {\n        logger.info(format, fullName, \"is proposed\")\n        count++\n    } else {\n        logger.info(format, fullName, \"is ignored\")\n    }\n}", "CodeBleu_score": 43.799091280618455}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t    BitbucketRepository repository = getBitbucketRepository(name)\n    if (repository == null) {\n        getLogger().warn(\"Repository ${name} was not found in Bitbucket\")\n        return\n    }\n\n    String message = \"Repository ${repository.fullName} is ${isMatch ? 'proposed' : 'ignored'}\"\n    getLogger().info(message)\n    if (isMatch) {\n        repository.proposedCount++\n    }\n}", "CodeBleu_score": 43.498410062891686}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t    BitbucketRepository repository = getBitbucketRepository(name)\n    if (!repository) {\n        return\n    }\n    String message = format(\"Repository %s %s\", getFullName(repository), isMatch ? \"proposed\" : \"ignored\")\n    logger.info(message)\n    if (isMatch) {\n        repository.proposedCount++\n    }\n}", "CodeBleu_score": 44.82763114974115}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t    List<RefSpec> refSpecs = new ArrayList<RefSpec>();\n    String cloneLink = scm.getUserRemoteConfigs().get(0).getUrl();\n    String branchName = rev.getBranch();\n    String hash = rev.getSha1String();\n    String branchHash = getBranch(git, branchName);\n    if (!branchHash.equals(hash)) {\n        listener.getLogger().println(\"The branch \" + branchName + \" has changed since the last build. The build will be aborted.\");\n        throw new AbortException(\"The branch \" + branchName + \" has changed since the last build. The build will be aborted.\");\n    }\n    if (isEmpty(git)) {\n        listener.getLogger().println(\"The repository is empty. The build will be aborted.\");\n        throw new AbortException(\"The repository is empty. The build will be aborted.\");\n    }\n    if (!commitExists(git, hash)) {\n        refSpecs.add(new RefSpec(hash + \":\" + hash));\n        fetch_(git, listener, cloneLink, refSpecs);\n    }\n    return rev;\n}", "CodeBleu_score": 38.5010405765528}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t    try {\n        if (rev == null) {\n            return null;\n        }\n\n        String branch = rev.getBranch();\n        String hash = rev.getHash();\n\n        // If the branch is null, we're not on a branch.\n        if (branch == null) {\n            return rev;\n        }\n\n        // If the hash is null, we're on a branch.\n        if (hash == null) {\n            return rev;\n        }\n\n        // If the branch is master, we're on a branch.\n        if (branch.equals(\"master\")) {\n            return rev;\n        }\n\n        // If the branch is a pull request, we're on a branch.\n        if (branch.startsWith(\"pull/\")) {\n            return rev;\n        }\n\n        // If the branch is a feature branch, we're on a branch.\n        if (branch.startsWith(\"feature/\")) {\n            return rev;\n        }\n\n        // If the branch is a release branch, we're on a branch.\n        if (branch.startsWith(\"release/\")) {\n            return rev;\n        }\n\n        // If the branch is a hotfix branch, we're on a branch.\n        if (branch.startsWith(\"hotfix/\")) {\n            return rev;\n        }\n\n        // If the branch is a release candidate branch, we're on a branch.\n        if (branch.startsWith(\"release-candidate/\")) {\n            return rev;\n        }\n\n        // If the branch is a release branch, we're on a branch.\n        if (branch.startsWith(\"release-v\")) {\n            return rev;\n        }\n\n        // If the branch is a hotfix branch, we're on a branch.\n        if (branch.startsWith(\"hotfix-v\")) {\n            return rev;\n        }\n\n        // If the branch is a release candidate branch, we're on a branch.\n        if (branch.startsWith(\"release-candidate-v\")) {\n            return rev;\n        }\n\n        // If the branch is a release candidate branch, we're on a branch.\n        if (branch.startsWith", "CodeBleu_score": 25.63133780489813}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t    // Get the branch name.\n    String branchName = rev.getBranch();\n\n    // Get the commit hash.\n    String commitHash = rev.getSha1String();\n\n    // Get the remote URL.\n    String remoteUrl = scm.getUserRemoteConfigs().get(0).getUrl();\n\n    // Get the remote name.\n    String remoteName = scm.getRepositoryByName(scm.getRepositoryNames().get(0)).getRemote();\n\n    // Get the remote refs.\n    List<RefSpec> refSpecs = scm.getRefSpecs();\n\n    // Get the branch.\n    Branch branch = getBranch(git, branchName);\n\n    // Get the hash of the commit.\n    String hash = getHash(git, commitHash);\n\n    // Check if the commit exists.\n    boolean commitExists = !isEmpty(hash);\n\n    // Check if the branch exists.\n    boolean branchExists = !isEmpty(branch);\n\n    // Check if the branch is a hash.\n    boolean isHash = isHash(branchName);\n\n    // Check if the branch is a tag.\n    boolean isTag = isTag(branchName);\n\n    // Check if the branch is a branch.\n    boolean isBranch = isBranch(branchName);\n\n    // Check if the branch is a pull request.\n    boolean isPullRequest = isPullRequest(branchName);\n\n    // Check if the branch is a branch or a pull request.\n    boolean isBranchOrPullRequest = isBranch(branchName) || isPullRequest(branchName);\n\n    // Check if the branch is a tag or a pull request.\n    boolean isTagOrPullRequest = isTag(branchName) || isPullRequest(branchName);\n\n    // Check if the branch is a hash or a pull request.\n    boolean isHashOrPullRequest = isHash(branchName) || isPullRequest(branchName);\n\n    // Check if the branch is a branch, a tag, or a pull request.\n    boolean isBranchOrTagOrPullRequest = isBranch(branchName) || isTag(branchName) || isPullRequest(branchName);\n", "CodeBleu_score": 36.84754034036889}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> newLinks = new HashMap<String, BitbucketHref>();\n    for (Map.Entry<String, BitbucketHref> entry : links.entrySet()) {\n        newLinks.put(entry.getKey(), new BitbucketHref(entry.getValue().getHref()));\n    }\n    return newLinks;\n}", "CodeBleu_score": 55.54407947464273}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n    for (Entry<String, BitbucketHref> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue().clone());\n    }\n    return result;\n}", "CodeBleu_score": 59.967016604185794}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t    Map<String, BitbucketHref> links = this.links;\n    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> newLinks = new HashMap<String, BitbucketHref>();\n    for (Map.Entry<String, BitbucketHref> entry : links.entrySet()) {\n        newLinks.put(entry.getKey(), entry.getValue().clone());\n    }\n    return newLinks;\n}", "CodeBleu_score": 54.5128858015613}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t    if (resourceStates.length === 0) {\n        return;\n    }\n    const resources = await this.getResources(resourceStates);\n    if (resources.length === 0) {\n        return;\n    }\n    const repositories = this.getRepositories(resources);\n    for (const repository of repositories) {\n        await this.addResources(repository, resources);\n    }\n}", "CodeBleu_score": 37.146942528657135}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tif (!resourceStates.length) {\n\t\treturn;\n\t}\n\n\tconst resources = resourceStates.map(r => r.resourceUri);\n\tconst repository = await this.getRepository(resources[0]);\n\tif (!repository) {\n\t\treturn;\n\t}\n\n\tconst uris = resources.map(r => repository.toGitUri(r));\n\n\tconst result = await repository.add(uris);\n\tif (result) {\n\t\tconst message = result.stderr ? result.stderr.trim() : result.stdout.trim();\n\t\tif (message) {\n\t\t\tvoid window.showErrorMessage(message);\n\t\t}\n\t}\n}", "CodeBleu_score": 49.494972698288564}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tif (!resourceStates.length) {\n\t\treturn;\n\t}\n\n\tconst uris = resourceStates.map(r => r.resourceUri);\n\tconst resources = await this.toGitResources(uris);\n\tconst repository = await this.getRepository(resources[0].repository.rootUri);\n\n\tif (!repository) {\n\t\treturn;\n\t}\n\n\tconst addOperation = await repository.add(resources.map(r => r.resourceUri.fsPath));\n\n\tif (addOperation) {\n\t\tawait addOperation.run();\n\t}\n}", "CodeBleu_score": 48.827439085538686}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\t\tif (!this.resourceStates || this.resourceStates.length === 0 || !this.resourceStates[0].resourceUri) {\n\t\tconst scmResource = await this.getSCMResource();\n\n\t\tif (scmResource) {\n\t\t\tthis.resourceStates = [scmResource];\n\t\t}\n\t}\n\n\treturn this.resourceStates.filter(r => r instanceof Resource) as Resource[];\n}", "CodeBleu_score": 38.80050593833457}, {"code": "protected async getResourceStates{\n\t\tif (!this.resourceStates.length || !this.resourceStates[0].resourceUri) {\n\t\tconst resource = await this.getResource();\n\t\tif (resource) {\n\t\t\tthis.resourceStates = [resource];\n\t\t}\n\t}\n\n\treturn this.resourceStates.filter(s => s instanceof Resource);\n}", "CodeBleu_score": 32.11634834236687}, {"code": "protected async getResourceStates{\n\t\tif (this.resourceStates.length === 0 || !(this.resourceStates[0].resource instanceof Uri)) {\n\t\tconst resource = await this.getResource();\n\n\t\tif (resource) {\n\t\t\tthis.resourceStates = [new Resource(resource)];\n\t\t}\n\t}\n\n\treturn this.resourceStates.filter(r => r instanceof Resource);\n}", "CodeBleu_score": 34.31456755037211}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    let resource: Resource | undefined;\n    if (uri) {\n      if (uri.scheme === 'svn') {\n        uri = Uri.file(uri.fsPath);\n      }\n      const scm = this.sourceControlManager.getRepository(uri);\n      if (scm) {\n        resource = scm.getResourceFromFile(uri);\n      }\n    } else {\n      const editor = window.activeTextEditor;\n      if (editor) {\n        const uri = editor.document.uri;\n        if (uri.scheme === 'svn') {\n          uri = Uri.file(uri.fsPath);\n        }\n        const scm = this.sourceControlManager.getRepository(uri);\n        if (scm) {\n          resource = scm.getResourceFromFile(uri);\n        }\n      }\n    }\n    return resource;\n  }", "CodeBleu_score": 43.753001649434644}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    let resource: Resource | undefined;\n    if (uri) {\n      if (uri.scheme === 'svn') {\n        uri = Uri.file(uri.path);\n      }\n      resource = await this.sourceControlManager.getRepository(uri)?.getResourceFromFile(uri);\n    } else {\n      const editor = window.activeTextEditor;\n      if (editor && editor.document.uri.scheme === 'file') {\n        resource = await this.sourceControlManager.getRepository(editor.document.uri)?.getResourceFromFile(editor.document.uri);\n      }\n    }\n    return resource;\n  }", "CodeBleu_score": 33.26567550725841}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    let fileUri: Uri | undefined;\n    if (uri) {\n      if (uri.scheme === 'svn') {\n        fileUri = Uri.file(uri.fsPath);\n      } else {\n        fileUri = uri;\n      }\n    } else {\n      fileUri = window.activeTextEditor?.document.uri;\n    }\n    if (fileUri) {\n      const scm = this.scm;\n      if (scm) {\n        const repository = await scm.getRepository(fileUri);\n        if (repository) {\n          return repository.getResourceFromFile(fileUri);\n        }\n      }\n    }\n  }", "CodeBleu_score": 34.68790676339852}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\t\n    // Get the remote repository for the element\n    let remoteRepository = await this.model.getRemoteRepository(element);\n\n    // If the element is modified, open a diff between the old and new revisions\n    if (element.changeType === 'M') {\n        this.openDiff(element.oldPath, element.newPath, element.oldRevision, element.newRevision, remoteRepository);\n    }\n\n    // If the element is added, open the remote file at the new path and revision\n    else if (element.changeType === 'A') {\n        this.openFileRemote(element.newPath, element.newRevision, remoteRepository);\n    }\n\n}", "CodeBleu_score": 38.125636693245035}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t  const remoteRepo = await this.model.getRemoteRepository();\n  if (remoteRepo === undefined) {\n   return;\n  }\n  const path = element.path;\n  const oldRevision = element.oldRevision;\n  const newRevision = element.newRevision;\n  const oldPath = element.oldPath;\n  const newPath = element.newPath;\n  const oldFile = oldPath ? new File(remoteRepo.path, oldPath) : undefined;\n  const newFile = newPath ? new File(remoteRepo.path, newPath) : undefined;\n  if (element.changeType === ChangeType.Add) {\n   await this.openDiff(newFile, newRevision);\n  } else if (element.changeType === ChangeType.Delete) {\n   await this.openDiff(oldFile, oldRevision);\n  } else {\n   await this.openDiff(newFile, newRevision, oldFile, oldRevision);\n  }\n }", "CodeBleu_score": 34.29210263797754}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t    const remoteRepo = await this.model.getRemoteRepository();\n    if (element.changeType === ChangeType.Added) {\n      const remoteFile = await this.model.getRemoteFile(element.path, element.newRevision);\n      const diff = await this.model.getDiff(remoteRepo, element.path, element.newRevision, element.newRevision);\n      const fileDiff = new FileDiff(diff, remoteFile, remoteFile);\n      this.diffNavigator.setInput(fileDiff);\n    } else {\n      const diff = await this.model.getDiff(remoteRepo, element.path, element.oldRevision, element.newRevision);\n      const fileDiff = new FileDiff(diff, undefined, undefined);\n      this.diffNavigator.setInput(fileDiff);\n    }\n    this.diffNavigator.showPrevious();\n  }", "CodeBleu_score": 35.49751332705105}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\n\tif (!vscode.env.clipboard.writeText) {\n\t\twindow.showErrorMessage(\n\t\t\t'Your OS does not support copying to the clipboard.',\n\t\t\t'Ok'\n\t\t);\n\t\treturn;\n\t}\n\n\tconst clipboard = vscode.env.clipboard;\n\n\tif (what === 'message') {\n\t\tawait clipboard.writeText(item.commit.message);\n\t} else if (what === 'revision') {\n\t\tawait clipboard.writeText(item.commit.revision);\n\t} else if (what === 'hash') {\n\t\tawait clipboard.writeText(item.commit.hash);\n\t} else if (what === 'author') {\n\t\tawait clipboard.writeText(item.commit.author);\n\t} else if (what === 'date') {\n\t\tawait clipboard.writeText(item.commit.date);\n\t} else if (what === 'email') {\n\t\tawait clipboard.writeText(item.commit.email);\n\t} else if (what === 'summary') {\n\t\tawait clipboard.writeText(item.commit.summary);\n\t} else if (what === 'body') {\n\t\tawait clipboard.writeText(item.commit.body);\n\t}\n}", "CodeBleu_score": 29.24825574254246}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t    if (window.activeTextEditor) {\n        let message = '';\n        if (what === 'message') {\n            message = item.commit.message;\n        } else if (what === 'revision') {\n            message = item.commit.revision;\n        }\n        if (message) {\n            if (await isClipboardSupported()) {\n                await window.activeTextEditor.edit(editBuilder => {\n                    editBuilder.insert(new Position(0, 0), message);\n                });\n            } else {\n                window.showErrorMessage('The clipboard is not supported in this VS Code extension.');\n            }\n        }\n    }\n}", "CodeBleu_score": 28.580046347768405}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t    if (window.activeTextEditor) {\n        if (window.activeTextEditor.document.languageId === 'log') {\n            if (item) {\n                if (item.commit) {\n                    if (item.commit.message) {\n                        if (item.commit.message.length > 0) {\n                            if (item.commit.message[0].length > 0) {\n                                if (item.commit.message[0][0].length > 0) {\n                                    if (item.commit.message[0][0][0].length > 0) {\n                                        if (item.commit.message[0][0][0][0].length > 0) {\n                                            if (item.commit.message[0][0][0][0][0].length > 0) {\n                                                if (item.commit.message[0][0][0][0][0][0].length > 0) {\n                                                    if (item.commit.message[0][0][0][0][0][0][0].length > 0) {\n                                                        if (item.commit.message[0][0][0][0][0][0][0][0].length > 0) {\n                                                            if (item.commit.message[0][0][0][0][0][0][0][0][0].length > 0) {\n                                                                if (item.commit.message[0][0][0][0][0][0][0][0][0][0].length > 0) {\n                                                                    if (item.commit.message[0][0][0][0][0][0][0][0][0][0][0].length > 0) {\n                                                                        if (item.commit.message[0][0][0][0][0][0][0][0][0][0][0][0].length > 0) {\n                                                                            if (item.commit.message[0][0][0][0][0][0][0][0][0][0][0][0][0].length > 0) {\n                                                                                if (item.commit.message[", "CodeBleu_score": 17.284121937922936}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    // find a factory that can open the connection\n    GiteaConnectionFactory factory = null;\n    for (GiteaConnectionFactory f : GiteaConnectionFactory.getFactories()) {\n        if (f.canOpen(this)) {\n            if (factory == null || f.getPriority() > factory.getPriority()) {\n                factory = f;\n            }\n        }\n    }\n    if (factory == null) {\n        throw new IOException(\"No factory found that can open connection\");\n    }\n\n    // open the connection\n    return factory.open(this);\n}", "CodeBleu_score": 30.126128498077232}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    for (GiteaConnectionFactory factory : ServiceLoader.load(GiteaConnectionFactory.class)) {\n        if (factory.canOpen(this)) {\n            return factory.open(this);\n        }\n    }\n    throw new IOException(\"No GiteaConnectionFactory found that can open this connection.\");\n}", "CodeBleu_score": 21.3186468787758}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    GiteaConnectionFactory factory = null;\n    for (GiteaConnectionFactory f : GiteaConnectionFactory.all()) {\n        if (f.canOpen(this)) {\n            if (factory == null || f.getPriority() > factory.getPriority()) {\n                factory = f;\n            }\n        }\n    }\n    if (factory == null) {\n        throw new IOException(\"No suitable GiteaConnectionFactory found\");\n    }\n    return factory.open(this);\n}", "CodeBleu_score": 29.992374940677145}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\t    Jenkins jenkinsInstance = Jenkins.getInstanceOrNull();\n    ClassLoader classLoader;\n    if (jenkinsInstance != null) {\n        classLoader = jenkinsInstance.pluginManager.uberClassLoader;\n    } else {\n        classLoader = Gitea.class.classLoader;\n    }\n    return setClassLoader(classLoader);\n}", "CodeBleu_score": 42.85907916700744}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t    def jenkins = Jenkins.getInstanceOrNull()\n    def classLoader = jenkins?.pluginManager?.uberClassLoader\n    if (classLoader == null) {\n        classLoader = this.class.classLoader\n    }\n    return this.class.classLoader = classLoader\n}", "CodeBleu_score": 36.28029925468467}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t    return setClassLoader(Jenkins.getInstanceOrNull()?.pluginManager?.classLoader ?: this.class.classLoader)\n}", "CodeBleu_score": 20.18408583252636}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = displayName\n    this.serverUrl = serverUrl\n    this.manageHooks = manageHooks\n    this.credentialsId = manageHooks ? credentialsId : null\n    this.aliasUrl = aliasUrl\n}", "CodeBleu_score": 29.662334025091848}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = displayName != null ? displayName : normalizeServerUrl(serverUrl);\n    this.serverUrl = serverUrl;\n    this.manageHooks = manageHooks;\n    this.credentialsId = manageHooks ? credentialsId : null;\n    this.aliasUrl = aliasUrl != null ? aliasUrl : normalizeServerUrl(serverUrl);\n}", "CodeBleu_score": 42.97906096343074}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = displayName;\n    this.serverUrl = serverUrl;\n    this.manageHooks = manageHooks;\n    this.credentialsId = credentialsId;\n    this.aliasUrl = aliasUrl;\n}", "CodeBleu_score": 23.469137155679796}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    return doFillCredentialsIdItems(serverUrl, false);\n}", "CodeBleu_score": 6.259335749696576}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    return GiteaAuth.getCredentialsListBoxModel(normalizeServerUrl(serverUrl));\n}", "CodeBleu_score": 5.379594183557633}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    ListBoxModel items = new ListBoxModel();\n    if (checkPermission()) {\n        String normalizedServerUrl = normalizeServerUrl(serverUrl);\n        if (normalizedServerUrl != null) {\n            for (String credentialId : GiteaAuth.getCredentialsIds(normalizedServerUrl)) {\n                items.add(credentialId);\n            }\n        }\n    }\n    return items;\n}", "CodeBleu_score": 36.40636494841189}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        String host = uri.getHost();\n        String port = uri.getPort() == -1 ? \"\" : \":\" + uri.getPort();\n        String path = uri.getPath();\n        String query = uri.getQuery() == null ? \"\" : \"?\" + uri.getQuery();\n        String fragment = uri.getFragment() == null ? \"\" : \"#\" + uri.getFragment();\n        String userInfo = uri.getUserInfo() == null ? \"\" : uri.getUserInfo() + \"@\";\n\n        String normalizedUrl = scheme + \"://\" + userInfo + host + port + path + query + fragment;\n\n        // Remove any trailing slash\n        if (path.endsWith(\"/\")) {\n            normalizedUrl = normalizedUrl.substring(0, normalizedUrl.length() - 1);\n        }\n\n        // Convert to lowercase\n        normalizedUrl = normalizedUrl.toLowerCase();\n\n        // Remove default ports\n        if (scheme.equals(\"http\") && port.equals(\":80\")) {\n            normalizedUrl = normalizedUrl.substring(0, normalizedUrl.length() - 3);\n        } else if (scheme.equals(\"https\") && port.equals(\":443\")) {\n            normalizedUrl = normalizedUrl.substring(0, normalizedUrl.length() - 4);\n        }\n\n        return normalizedUrl;\n    } catch (URISyntaxException e) {\n        return null;\n    }\n}", "CodeBleu_score": 42.89629638502917}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        if (scheme == null) {\n            return null;\n        }\n        String host = uri.getHost();\n        if (host == null) {\n            return null;\n        }\n        int port = uri.getPort();\n        if (port == -1) {\n            if (\"http\".equals(scheme)) {\n                port = 80;\n            } else if (\"https\".equals(scheme)) {\n                port = 443;\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        sb.append(scheme);\n        sb.append(\"://\");\n        sb.append(host);\n        if (port != -1 && (port != 80 || !\"http\".equals(scheme)) && (port != 443 || !\"https\".equals(scheme))) {\n            sb.append(\":\");\n            sb.append(port);\n        }\n        sb.append(uri.getPath());\n        return sb.toString();\n    } catch (URISyntaxException e) {\n        return null;\n    }\n}", "CodeBleu_score": 44.67820736678186}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        String host = uri.getHost();\n        String fragment = uri.getFragment();\n        String query = uri.getQuery();\n        String path = uri.getPath();\n        String userInfo = uri.getUserInfo();\n        String port = uri.getPort() != -1 ? String.valueOf(uri.getPort()) : null;\n        String newUrl = new StringBuilder()\n                .append(scheme)\n                .append(\"://\")\n                .append(host)\n                .append(path)\n                .append(query != null ? \"?\" + query : \"\")\n                .append(fragment != null ? \"#\" + fragment : \"\")\n                .toString();\n        if (port != null && (scheme.equals(\"http\") && port.equals(\"80\") || scheme.equals(\"https\") && port.equals(\"443\"))) {\n            newUrl = new StringBuilder(newUrl).delete(newUrl.length() - port.length(), newUrl.length()).toString();\n        }\n        if (userInfo != null) {\n            newUrl = new StringBuilder(newUrl).insert(scheme.length() + 3, userInfo + \"@\").toString();\n        }\n        return newUrl;\n    } catch (URISyntaxException e) {\n        return serverUrl;\n    }\n}", "CodeBleu_score": 44.01414668842556}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        if (isBlank(server.getDisplayName())) {\n            items.add(server.getServerUrl());\n        } else {\n            items.add(server.getDisplayName() + \" (\" + server.getServerUrl() + \")\");\n        }\n    }\n    return items;\n}", "CodeBleu_score": 44.16202033390564}, {"code": "public ListBoxModel getServerItems(){\n\t\tListBoxModel items = new ListBoxModel();\n\tfor (GiteaServer server : getServers()) {\n\t\titems.add(server.getDisplayName(), server.getServerUrl());\n\t}\n\treturn items;\n}", "CodeBleu_score": 30.253066207107537}, {"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        String displayName = server.getDisplayName();\n        if (isBlank(displayName)) {\n            items.add(server.getServerUrl());\n        } else {\n            items.add(displayName + \" (\" + server.getServerUrl() + \")\");\n        }\n    }\n    return items;\n}", "CodeBleu_score": 56.446986910129226}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    checkPermission(ADMINISTER);\n    servers = new ArrayList<>(fixNull(servers));\n    servers.removeIf(GiteaServer::isBlank);\n    servers.removeIf(s -> s.getUrl().isBlank());\n    servers.removeIf(s -> s.getUrl().equals(getServerUrl()));\n    servers.sort(Comparator.comparing(GiteaServer::getUrl));\n    this.servers = Collections.unmodifiableList(servers);\n    save();\n}", "CodeBleu_score": 29.91488658925716}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    if (servers == null) {\n        servers = Collections.emptyList();\n    }\n    if (servers.isEmpty()) {\n        return;\n    }\n    if (!hasPermission(Jenkins.ADMINISTER)) {\n        throw new AccessDeniedException(Messages.GiteaConfiguration_NoPermission());\n    }\n    Set<String> urls = new HashSet<>();\n    List<GiteaServer> newServers = new ArrayList<>();\n    for (GiteaServer server : servers) {\n        if (server != null) {\n            String url = server.getUrl();\n            if (!isBlank(url)) {\n                if (urls.add(url)) {\n                    newServers.add(server);\n                }\n            }\n        }\n    }\n    servers.clear();\n    servers.addAll(newServers);\n    save();\n}", "CodeBleu_score": 41.76088365580962}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    if (!hasPermission(ADMINISTER)) {\n        throw new AccessDeniedException(Messages.GiteaServers_NotAdmin());\n    }\n    if (servers == null) {\n        servers = Collections.emptyList();\n    }\n    servers = new ArrayList<>(servers);\n    servers.removeIf(s -> isBlank(s.getServerUrl()));\n    servers.removeIf(s -> servers.stream().anyMatch(s2 -> s2 != s && s.getServerUrl().equals(s2.getServerUrl())));\n    this.servers = Collections.unmodifiableList(servers);\n    save();\n}", "CodeBleu_score": 31.776180330276503}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return false;\n    }\n    serverUrl = normalizeServerUrl(serverUrl);\n    boolean removed = false;\n    for (Iterator<String> it = getServers().iterator(); it.hasNext();) {\n        String url = it.next();\n        if (serverUrl.equals(url)) {\n            it.remove();\n            removed = true;\n        }\n    }\n    if (removed) {\n        updateServers();\n    }\n    return removed;\n}", "CodeBleu_score": 51.49952628640095}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return false;\n    }\n    serverUrl = normalizeServerUrl(serverUrl);\n    Iterator<String> iterator = servers.iterator();\n    while (iterator.hasNext()) {\n        String url = iterator.next();\n        if (url.equals(serverUrl)) {\n            iterator.remove();\n            updateServers();\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 38.47841748709861}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn false;\n\t}\n\tserverUrl = normalizeServerUrl(serverUrl);\n\tfor (Iterator<String> it = servers.iterator(); it.hasNext();) {\n\t\tif (serverUrl.equals(it.next())) {\n\t\t\tit.remove();\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 30.937178873001585}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {\n        // Retrieve attributes from the annotation\n        Map<String, Object> attributes = getAttributesFromAnnotation(element, annotation);\n        // Convert the element's type to a string\n        String type = asType(element).toString();\n        // Add a new ConfigElement with these attributes and type to the set of descriptor elements\n        descriptorElements.add(new DescriptorElement(type, attributes));\n    }\n}", "CodeBleu_score": 49.85707006582108}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element annotatedElement : roundEnv.getElementsAnnotatedWith(annotation)) {\n        if (annotatedElement.getKind() == ElementKind.FIELD) {\n            String elementName = annotatedElement.getSimpleName().toString();\n            String elementType = annotatedElement.asType().toString();\n            List<String> elementAttributes = getAttributesFromAnnotation(annotatedElement, annotation);\n            String elementTypeAsString = asType(elementType);\n            descriptorElements.add(new ConfigElement(elementName, elementTypeAsString, elementAttributes));\n        }\n    }\n}", "CodeBleu_score": 38.29744292817943}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element annotatedElement : roundEnv.getElementsAnnotatedWith(annotation)) {\n        List<String> attributes = getAttributesFromAnnotation(annotatedElement, annotation);\n        String type = asType(annotatedElement);\n        descriptorElements.add(new DescriptorElement(type, attributes));\n    }\n}", "CodeBleu_score": 39.410907632372776}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    for (TypeElement annotation : annotations) {\n        if (annotation.getQualifiedName().toString().equals(annotationClass.getName().replace(\"$\", \".\"))) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 54.80338619290501}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\n    for (TypeElement annotation : annotations) {\n        String name = annotation.getQualifiedName().toString();\n        if (name.equals(annotationClass.getName())) {\n            return annotation;\n        } else if (name.replace(\"$\", \".\").equals(annotationClass.getName())) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 41.70156671091229}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    for (TypeElement annotation : annotations) {\n        String qualifiedName = annotation.getQualifiedName().toString();\n        if (qualifiedName.equals(annotationClass.getName())) {\n            return annotation;\n        }\n        if (qualifiedName.replace('$', '.').equals(annotationClass.getName())) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 37.885204176254724}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"docstatus\": 1,\n        \"leave_approver\": approver_id or frappe.session.user,\n        \"employee\": employee,\n    }\n    if for_approval:\n        filters.update(\n            {\n                \"status\": [\"not in\", [\"Approved\", \"Rejected\"]],\n                \"leave_approver\": frappe.session.user,\n            }\n        )\n    else:\n        filters.update(\n            {\n                \"status\": \"Open\",\n                \"leave_approver\": [\"not in\", [employee]],\n                \"cancelled\": 0,\n            }\n        )\n    return filters\n\n", "CodeBleu_score": 24.93557511298562}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n    }\n\n    if for_approval:\n        filters.update(\n            {\n                \"status\": [\"in\", get_allowed_states_for_workflow(\"Leave Application\")],\n                \"name\": [\"not in\", frappe.get_list(\"Leave Application\", filters={\"employee\": employee, \"docstatus\": 1})],\n            }\n        )\n\n        if approver_id:\n            filters.update({\"approver\": approver_id})\n    else:\n        filters.update({\"status\": \"Open\", \"name\": [\"not in\", frappe.get_list(\"Leave Application\", filters={\"employee\": employee, \"status\": \"Open\", \"docstatus\": 1})]})\n\n    return filters\n\n", "CodeBleu_score": 27.54434450128498}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"docstatus\": 1,\n        \"status\": \"Open\" if not for_approval else (\"Approved\" if approver_id else \"Pending Approval\"),\n        \"employee\": employee,\n    }\n    if for_approval:\n        filters[\"employee\"] = frappe.db.get_value(\n            \"Employee\",\n            employee,\n            \"user_id\",\n        )\n        if approver_id:\n            filters[\"approver\"] = approver_id\n    else:\n        filters[\"docstatus\"] = 1\n        filters[\"status\"] = \"Open\"\n        filters[\"employee\"] = employee\n        filters[\"status\"] = \"Open\"\n        filters[\"docstatus\"] = 1\n        filters[\"status\"] = \"Open\"\n        filters[\"docstatus\"] = 1\n        filters[\"status\"] = \"Open\"\n        filters[\"docstatus\"] = 1\n        filters[\"status\"] = \"Open\"\n        filters[\"docstatus\"] = 1\n        filters[\"status\"] = \"Open\"\n        filters[\"docstatus\"] = 1\n        filters[\"status\"] = \"Open\"\n        filters[\"docstatus\"] = 1\n        filters[\"status\"] = \"Open\"\n        filters[\"docstatus\"] = 1\n        filters[\"status\"] = \"Open\"\n        filters[\"docstatus\"] = 1\n        filters[\"status\"] = \"Open\"\n        filters[\"docstatus\"] = 1\n        filters[\"status\"] = \"Open\"\n        filters[\"docstatus\"] = 1\n        filters[\"status\"] = \"Open\"\n        filters[\"docstatus\"] = 1\n        filters[\"status\"] = \"Open\"\n        filters[\"docstatus\"] = 1\n        filters[\"status\"] = \"Open\"\n        filters[\"docstatus\"] = 1\n        filters[\"status\"] = \"Open\"\n        filters[\"docstatus\"] = 1\n        filters[\"status\"] = \"Open\"\n        filters[\"docstatus\"] = 1\n        filters[\"status\"] = \"Open\"\n        filters[\"docstatus\"] = 1\n        filters[\"status\"] = \"Open\"\n        filters[\"docstatus\"] = 1\n        filters[\"status\"] = \"Open\"\n        filters[\"docstatus\"] = 1\n", "CodeBleu_score": 21.714628442466914}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    details = get_leave_details(employee)\n    date = getdate()\n    leave_balance_map = {}\n    for leave_type in details:\n        leave_balance_map[leave_type] = {\n            \"allocated\": details[leave_type][\"allocated_leaves\"],\n            \"balance\": details[leave_type][\"allocated_leaves\"] - details[leave_type][\"leave_taken\"]\n        }\n    return leave_balance_map\n", "CodeBleu_score": 36.820620067070955}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = getdate()\n    leave_details = get_leave_details(employee, current_date)\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {\n            'allocated': leave_details[leave_type]['allocated'],\n            'balance': leave_details[leave_type]['balance']\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 38.39804038087171}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    leave_details = get_leave_details(employee)\n    date = getdate()\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        allocated_leave = 0.0\n        balance_leave = 0.0\n        if leave_type in leave_details[leave_type]:\n            allocated_leave = leave_details[leave_type][\"allocated_leave\"]\n        if leave_type in leave_details[leave_type]:\n            balance_leave = leave_details[leave_type][\"balance_leave\"]\n        leave_balance_map[leave_type] = {\n            \"allocated_leave\": allocated_leave,\n            \"balance_leave\": balance_leave\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 36.62951626678041}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays = frappe.db.sql(\n        \"\"\"select\n            holiday_date, description, holiday_type\n        from\n            `tabHoliday`\n        where\n            parent = %s\n            and holiday_date >= %s\n            and holiday_date <= %s\n            and holiday_type != 'Weekly Off'\n        order by\n            holiday_date\"\"\",\n        (holiday_list, getdate(), getdate()),\n        as_dict=1,\n    )\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html(holiday[\"description\"])\n    return holidays\n\n", "CodeBleu_score": 36.60017204359372}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.get_value(\"Employee\", employee, \"holiday_list\")\n    if not holiday_list:\n        return []\n    holidays = frappe.get_all(\"Holiday\", filters={\"parent\": holiday_list, \"holiday_type\": \"Holiday\", \"from_date\": [\"<=\", today()], \"to_date\": [\">=\", today()]}, fields=[\"name\", \"holiday_date\", \"description\"])\n    if holidays:\n        holidays = [\n            {\n                \"holiday\": holiday.name,\n                \"holiday_date\": holiday.holiday_date,\n                \"description\": strip_html(holiday.description)\n            }\n            for holiday in holidays\n        ]\n        holidays = sorted(holidays, key=lambda holiday: holiday[\"holiday_date\"])\n    return holidays\n\n", "CodeBleu_score": 40.2373432728164}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.get_value(\"Employee\", employee, \"holiday_list\")\n    if not holiday_list:\n        return []\n    holidays = frappe.get_all(\"Holiday\", filters={\"parent\": holiday_list, \"holiday_type\": \"Holiday\"}, fields=[\"name\", \"description\", \"holiday_date\"])\n    holidays = [holiday for holiday in holidays if holiday[\"holiday_date\"] not in get_weekly_offs(employee)]\n    holidays = sorted(holidays, key=lambda holiday: holiday[\"holiday_date\"])\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html(holiday[\"description\"])\n    return holidays\n\n", "CodeBleu_score": 41.45878471493918}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t\n    # Get the settings for the reminders\n    hr_settings = HRSettings.objects.get(id=1)\n    if hr_settings.send_reminders_in_advance == \"Yes\":\n        if hr_settings.reminder_frequency == \"Weekly\":\n            # Get the relevant holidays\n            holidays = Holiday.objects.filter(holiday_date__gte=datetime.date.today(), holiday_date__lte=datetime.date.today() + datetime.timedelta(days=7))\n            # Send the reminders\n            send_advance_holiday_reminders(holidays)\n\n", "CodeBleu_score": 31.897460908930388}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    # get settings\n    settings = get_hr_settings()\n    # check if reminders are enabled\n    if settings.send_reminders:\n        # check if frequency is weekly\n        if settings.frequency == \"Weekly\":\n            # check if reminders are set to be sent in advance\n            if settings.send_reminders_in_advance:\n                # check if the current day is a Monday\n                if datetime.datetime.today().weekday() == 0:\n                    # check if the current time is past the reminder time\n                    if datetime.datetime.now().time() > settings.reminder_time:\n                        # check if the current day is not the same as the last day the reminders were sent\n                        if datetime.datetime.today().date() != settings.last_reminder_sent_date:\n                            # send the reminders\n                            send_advance_holiday_reminders()\n\n", "CodeBleu_score": 19.22607394352429}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    try:\n        # Get the holiday settings\n        holiday_settings = get_holiday_settings()\n        # Get the HR settings\n        hr_settings = get_hr_settings()\n        # Get the date of the last reminder sent\n        last_reminder_date = get_last_reminder_date()\n        # Get the current date\n        current_date = datetime.today()\n        # Check if the holiday settings are valid\n        if holiday_settings:\n            # Check if the HR settings are valid\n            if hr_settings:\n                # Check if the HR settings specify to send reminders\n                if hr_settings.send_reminders:\n                    # Check if the frequency is set to \"Weekly\"\n                    if holiday_settings.frequency == \"Weekly\":\n                        # Check if the current date is within the reminder date range\n                        if current_date >= holiday_settings.start_date and current_date <= holiday_settings.end_date:\n                            # Check if the current date is the same as the last reminder date\n                            if current_date.day != last_reminder_date.day:\n                                # Call the function to send the reminders\n                                send_advance_holiday_reminders()\n                                # Update the last reminder date\n                                set_last_reminder_date(current_date)\n    except Exception as e:\n        print(e)\n\n", "CodeBleu_score": 25.072861166453443}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t\n    self_appraisal_score = 0\n    for entry in self.self_ratings:\n        self_appraisal_score += entry.rating * entry.percentage_weightage\n    self.self_appraisal_score = self_appraisal_score\n    self.self_appraisal_score = round(self_appraisal_score, self.precision)\n\n", "CodeBleu_score": 27.246175069500712}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self_appraisal_score = 0\n    for self_rating in self.self_ratings:\n        self_appraisal_score += self_rating.rating * self_rating.percentage_weightage\n    self_appraisal_score = round(self_appraisal_score, self.precision)\n    self.self_appraisal_score = self_appraisal_score\n\n", "CodeBleu_score": 19.241548144675864}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self_appraisal_score = 0\n    for entry in self.self_ratings:\n        self_appraisal_score += entry.rating * entry.percentage_weightage\n    self.self_appraisal_score = round(self_appraisal_score, self.precision)\n\n", "CodeBleu_score": 29.812614761321814}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle_doc = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle_doc.calculate_final_score_based_on_formula:\n        data = {}\n        data.update(self.as_dict())\n        data.update(self.appraisal_details)\n        data.update(self.appraisal_details.appraisal_details)\n        data.update(self.appraisal_details.appraisal_details.appraisal_details)\n        data.update(self.appraisal_details.appraisal_details.appraisal_details.appraisal_details)\n        data.update(self.appraisal_details.appraisal_details.appraisal_details.appraisal_details.appraisal_details)\n        data.update(self.appraisal_details.appraisal_details.appraisal_details.appraisal_details.appraisal_details.appraisal_details)\n        data.update(self.appraisal_details.appraisal_details.appraisal_details.appraisal_details.appraisal_details.appraisal_details.appraisal_details)\n        data.update(self.appraisal_details.appraisal_details.appraisal_details.appraisal_details.appraisal_details.appraisal_details.appraisal_details.appraisal_details)\n        data.update(self.appraisal_details.appraisal_details.appraisal_details.appraisal_details.appraisal_details.appraisal_details.appraisal_details.appraisal_details.appraisal_details)\n        data.update(self.appraisal_details.appraisal_details.appraisal_details.appraisal_details.appraisal_details.appraisal_details.appraisal_details.appraisal_details.appraisal_details.appraisal_details)\n        data.update(self.appraisal_details.appraisal_details.appraisal_details.appraisal", "CodeBleu_score": 18.486572938776668}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle_doc = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle_doc.final_score_formula:\n        formula = appraisal_cycle_doc.final_score_formula\n        data = {\n            \"total_score\": self.total_score,\n            \"average_feedback_score\": self.average_feedback_score,\n            \"self_appraisal_score\": self.self_appraisal_score,\n            \"total_score_percentage\": flt(self.total_score / 100, self.precision),\n            \"average_feedback_score_percentage\": flt(self.average_feedback_score / 100, self.precision),\n            \"self_appraisal_score_percentage\": flt(self.self_appraisal_score / 100, self.precision),\n            \"total_score_percentage_multiplied_by_average_feedback_score_percentage\": flt(self.total_score / 100 * self.average_feedback_score / 100, self.precision),\n            \"total_score_percentage_multiplied_by_self_appraisal_score_percentage\": flt(self.total_score / 100 * self.self_appraisal_score / 100, self.precision),\n            \"average_feedback_score_percentage_multiplied_by_self_appraisal_score_percentage\": flt(self.average_feedback_score / 100 * self.self_appraisal_score / 100, self.precision),\n            \"total_score_percentage_multiplied_by_average_feedback_score_percentage_multiplied_by_self_appraisal_score_percentage\": flt(self.total_score / 100 * self.average_feedback_score / 100 * self.self_appraisal_score / 100, self.precision),\n        }", "CodeBleu_score": 26.729063378464907}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle_doc = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle_doc.calculate_final_score:\n        data = self.as_dict()\n        data.update(self.employee_appraisal_details.as_dict())\n        data.update(self.appraisal_details.as_dict())\n        data.update(self.appraisal_details.appraisal_template.as_dict())\n        data.update(self.appraisal_details.appraisal_template.appraisal_template_details.as_dict())\n        data.update(self.appraisal_details.appraisal_template.appraisal_template_details.employee_appraisal_details.as_dict())\n        data.update(self.appraisal_details.appraisal_template.appraisal_template_details.employee_appraisal_details.employee_details.as_dict())\n        data.update(self.appraisal_details.appraisal_template.appraisal_template_details.employee_appraisal_details.employee_details.user_details.as_dict())\n        data.update(self.appraisal_details.appraisal_template.appraisal_template_details.employee_appraisal_details.employee_details.department.as_dict())\n        data.update(self.appraisal_details.appraisal_template.appraisal_template_details.employee_appraisal_details.employee_details.designation.as_dict())\n        data.update(self.appraisal_details.appraisal_template.appraisal_template_details.employee_appraisal_details.employee_details.employee_grade.as_dict())\n        data.update(self.appraisal_details.appraisal_template.appraisal_template_details.employee_appraisal_details.employee_details.employee_type.as_dict())\n        data.update(self.appraisal_details.appraisal_template.appraisal_template_details.employee_appraisal_details.employee", "CodeBleu_score": 16.656757667503573}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > getdate(nowdate()):\n        if self.status != \"On Leave\":\n            frappe.throw(\"Attendance cannot be marked for future dates unless the status is 'On Leave' and there is no leave application\")\n        else:\n            if not self.leave_application:\n                frappe.throw(\"Attendance cannot be marked for future dates unless the status is 'On Leave' and there is no leave application\")\n    if self.attendance_date < getdate(self.employee_name.date_of_joining):\n        frappe.throw(\"Attendance cannot be marked before the date of joining\")\n\n", "CodeBleu_score": 27.139518983880716}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > getdate():\n        if self.status != \"On Leave\":\n            frappe.throw(_(\"Attendance date cannot be in future. Please check the Attendance Date.\"))\n        else:\n            leave_app = frappe.db.sql(\"\"\"select name from `tabLeave Application`\n                where employee = %s and leave_type = \"On Leave\" and from_date <= %s and to_date >= %s\"\"\",\n                (self.employee, self.attendance_date, self.attendance_date))\n            if not leave_app:\n                frappe.throw(_(\"Attendance date cannot be in future. Please check the Attendance Date.\"))\n\n    if self.attendance_date < self.employee_name.date_of_joining:\n        frappe.throw(_(\"Attendance date cannot be before the employee's date of joining. Please check the Attendance Date.\"))\n\n", "CodeBleu_score": 36.94679532043595}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > getdate():\n        if self.status != \"On Leave\":\n            if not self.leave_application:\n                frappe.throw(_(\"Attendance cannot be marked for future dates unless the status is 'On Leave' and there is no leave application.\"))\n        else:\n            if self.leave_application:\n                frappe.throw(_(\"Attendance cannot be marked for future dates unless the status is 'On Leave' and there is no leave application.\"))\n    elif self.attendance_date < getdate():\n        if self.attendance_date < getdate():\n            if self.status != \"On Leave\":\n                if not self.leave_application:\n                    frappe.throw(_(\"Attendance cannot be marked for dates earlier than the employee's date of joining.\"))\n            else:\n                if self.leave_application:\n                    frappe.throw(_(\"Attendance cannot be marked for dates earlier than the employee's date of joining.\"))\n\n", "CodeBleu_score": 29.738097979344086}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\t\n    if self.attendance_date:\n        attendance_record = frappe.get_all(\"Attendance\", filters={\"employee\": self.employee, \"attendance_date\": self.attendance_date})\n        if attendance_record:\n            frappe.throw(_(\"Duplicate attendance record for employee {0} on {1}. <a href='{2}'>Click here to view existing attendance record.</a>\").format(self.employee, format_date(self.attendance_date), get_link_to_form(\"Attendance\", attendance_record[0].name)))\n\n", "CodeBleu_score": 40.872608268121105}, {"code": "def validate_duplicate_record(self)\n\t\n\n    if self.employee:\n        attendance_record = frappe.db.get_value(\"Attendance\", {\n            \"employee\": self.employee,\n            \"attendance_date\": self.attendance_date\n        })\n        if attendance_record:\n            frappe.throw(_(\"Attendance record for Employee {0} on {1} already exists. Please check the link below to view the existing attendance record.\").format(self.employee, format_date(self.attendance_date)), title=_(\"Duplicate Attendance Record\"))\n\n", "CodeBleu_score": 38.877469026848466}, {"code": "def validate_duplicate_record(self)\n\t\n    duplicate_attendance_record = frappe.db.sql(\"\"\"\n        SELECT name, employee, date, status\n        FROM `tabAttendance`\n        WHERE employee = %s\n        AND date = %s\n        AND status = %s\n        AND name != %s\n    \"\"\", (self.employee, self.date, self.status, self.name))\n    if duplicate_attendance_record:\n        frappe.bold(\"Duplicate attendance record found for employee {0} on {1}\".format(self.employee, self.date))\n        frappe.bold(\"Existing attendance record: {0}\".format(get_link_to_form(\"Attendance\", duplicate_attendance_record[0][0])))\n        frappe.bold(\"Existing attendance status: {0}\".format(duplicate_attendance_record[0][3]))\n        frappe.bold(\"Existing attendance date: {0}\".format(format_date(duplicate_attendance_record[0][2])))\n        frappe.bold(\"Existing attendance employee: {0}\".format(duplicate_attendance_record[0][1]))\n        frappe.throw(\"Duplicate attendance record found for employee {0} on {1}\".format(self.employee, self.date))\n\n", "CodeBleu_score": 33.16633415247884}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t\n    if self.status == \"Draft\":\n        return\n    if self.status == \"Sent\":\n        return\n    if self.status == \"Failed\":\n        return\n\n    message_details = self.get_message_details()\n    user_emails = self.get_user_emails_from_group()\n    if not user_emails:\n        return\n    self.db_set(\"status\", \"Sending\")\n    frappe.sendmail(\n        recipients=user_emails,\n        subject=self.subject,\n        message=self.get_message_details(),\n        reference_doctype=self.doctype,\n        reference_name=self.name,\n        unsubscribe_message=self.unsubscribe_message,\n        unsubscribe_method=\"unsubscribe_from_summary\",\n        unsubscribe_params={\"summary_name\": self.name},\n        footer=self.footer,\n        header=self.header,\n        message_html=self.message_html,\n        message_text=self.message_text,\n        attachments=self.attachments,\n        delayed=False,\n        retry=1,\n    )\n    self.db_set(\"status\", \"Sent\")\n\n", "CodeBleu_score": 41.679868189597244}, {"code": "def send_summary(self)\n\t\n    # Get message details\n    message_details = self.get_message_details()\n    # Get email addresses of users in the group\n    email_addresses = self.get_user_emails_from_group()\n    # Send email with summary\n    frappe.sendmail(\n        recipients=email_addresses,\n        subject=\"Daily Summary of Replies to Group\",\n        message=message_details,\n        reference_doctype=self.doctype,\n        reference_name=self.name,\n        unsubscribe_message=None,\n        header=None,\n        footer=None,\n        delayed=False,\n        retry=3,\n        now=False,\n        as_bulk=False,\n        email_account=None,\n        print_letterhead=None,\n        communication=None,\n        print_format=None,\n        attachments=None,\n        print_format_attachment=None,\n        send_me_a_copy=False,\n        send_read_receipt=False,\n        print_letterhead=None,\n        communication=None,\n        print_format=None,\n        attachments=None,\n        print_format_attachment=None,\n        send_me_a_copy=False,\n        send_read_receipt=False,\n        print_letterhead=None,\n        communication=None,\n        print_format=None,\n        attachments=None,\n        print_format_attachment=None,\n        send_me_a_copy=False,\n        send_read_receipt=False,\n        print_letterhead=None,\n        communication=None,\n        print_format=None,\n        attachments=None,\n        print_format_attachment=None,\n        send_me_a_copy=False,\n        send_read_receipt=False,\n        print_letterhead=None,\n        communication=None,\n        print_format=None,\n        attachments=None,\n        print_format_attachment=None,\n        send_me_a_copy=False,\n        send_read_receipt=False,\n        print_letterhead=None,\n        communication=", "CodeBleu_score": 23.17265278837125}, {"code": "def send_summary(self)\n\t\n    if self.status == \"Draft\":\n        message_details = self.get_message_details()\n        group_emails = self.get_user_emails_from_group()\n        frappe.sendmail(recipients=group_emails,\n                        subject=message_details.subject,\n                        message=message_details.message,\n                        reference_doctype=message_details.doctype,\n                        reference_name=message_details.name,\n                        unsubscribe_message=message_details.unsubscribe_message,\n                        unsubscribe_method=\"frappe.email.doctype.notification_log.notification_log.unsubscribe_notification\",\n                        attachments=message_details.attachments)\n        self.db_set(\"status\", \"Sent\")\n\n", "CodeBleu_score": 41.29349519871794}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t\n    if self.interview_round:\n        duplicate_interview = frappe.db.sql(\"\"\"select name from `tabInterview` where interview_round=%s and job_applicant=%s and name!=%s\"\"\", (self.interview_round, self.job_applicant, self.name), as_dict=True)\n        if len(duplicate_interview) > 0:\n            frappe.throw(_(\"Duplicate interview record found for Job Applicant {0} in Interview Round {1}. Please remove the duplicate record and try again.\").format(self.job_applicant, self.interview_round), frappe.DuplicateEntryError)\n", "CodeBleu_score": 44.182087562600906}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.interview_round:\n        for row in self.interview_round:\n            if frappe.db.exists(\"Interview\", {\"job_applicant\": self.job_applicant, \"interview_round\": row.interview_round, \"name\": [\"!=\", self.name]}):\n                frappe.throw(_(\"Job applicant {0} has already been interviewed for this round. Please check the link to the existing interview record.\").format(self.job_applicant), frappe.DuplicateEntryError)\n\n", "CodeBleu_score": 33.34740567036543}, {"code": "def validate_duplicate_interview(self)\n\t\n    # Check for duplicate interview records for the same job applicant in the same interview round.\n    # This check is performed only when the interview is being created.\n    # The check is performed only if the interview status is \"Scheduled\" or \"In Progress\".\n    # If the interview status is \"Completed\" or \"Cancelled\", the check is not performed.\n    if self.status in [\"Scheduled\", \"In Progress\"]:\n        # Get the list of all interview records for the same job applicant in the same interview round.\n        # The list is filtered to include only the interview records with status \"Scheduled\" or \"In Progress\".\n        # The list is sorted by the creation date in descending order.\n        # The last record in the list is the most recent record.\n        # The first record in the list is the oldest record.\n        interview_records = frappe.db.sql(\n            \"\"\"\n                SELECT\n                    name,\n                    status\n                FROM\n                    `tabInterview`\n                WHERE\n                    job_applicant = %(job_applicant)s\n                    AND interview_round = %(interview_round)s\n                    AND status IN (\"Scheduled\", \"In Progress\")\n                ORDER BY\n                    creation DESC\n            \"\"\",\n            {\n                \"job_applicant\": self.job_applicant,\n                \"interview_round\": self.interview_round\n            },\n            as_dict=True\n        )\n        # Check if the list is not empty.\n        if interview_records:\n            # Get the name of the most recent record.\n            most_recent_record_name = interview_records[0][\"name\"]\n            # Get the status of the most recent record.\n            most_recent_record_status = interview_records[0][\"status\"]\n            # Check if the most recent record is \"Scheduled\" or \"In Progress\".\n            if most_recent_record_status in [\"Scheduled\", \"In Progress\"]:\n                # Check if the most recent record is the same as the current record.\n                if self.name == most_recent_record_name:\n                    # If the most recent record is the same as the current record,", "CodeBleu_score": 25.145761020328138}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\t\n    total = 0\n    count = 0\n    for assessment in self.assessments:\n        if assessment.rating is not None:\n            total += assessment.rating\n            count += 1\n    if count > 0:\n        self.average_rating = total / count\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 25.699959796080734}, {"code": "def calculate_average_rating(self)\n\t\n    ratings = [assessment.rating for assessment in self.skill_assessments if assessment.rating]\n    if ratings:\n        self.average_rating = sum(ratings) / len(ratings)\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 24.56772013885111}, {"code": "def calculate_average_rating(self)\n\t\n    total_rating = 0\n    num_assessments = 0\n    for assessment in self.skill_assessments:\n        if assessment.rating is not None:\n            total_rating += assessment.rating\n            num_assessments += 1\n    if num_assessments == 0:\n        self.average_rating = 0\n    else:\n        self.average_rating = total_rating / num_assessments\n\n", "CodeBleu_score": 26.125918415082722}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    interview.interviewers = doc.interviewers\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 34.904133372471115}, {"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    if isinstance(doc, str):\n        doc = frappe.get_doc(json.loads(doc))\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    interview.interview_date = doc.interview_date\n    interview.interviewers = doc.interviewers\n    interview.save()\n    return interview\n", "CodeBleu_score": 50.794362490364264}, {"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = frappe.new_doc(\"Interview\")\n        doc.interview_round = doc\n        doc.designation = doc\n        doc.status = \"Open\"\n    elif isinstance(doc, dict):\n        doc = frappe.new_doc(\"Interview\")\n        doc.interview_round = doc.get(\"interview_round\")\n        doc.designation = doc.get(\"designation\")\n        doc.status = \"Open\"\n        interviewers = doc.get(\"interviewers\")\n        if interviewers:\n            for interviewer in interviewers:\n                interview.append(\"interviewers\", interviewer)\n    return doc\n\n", "CodeBleu_score": 37.49810547893265}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offers = []\n    job_offer_list = frappe.get_all(\n        \"Job Offer\",\n        filters={\n            \"date\": (\"between\", (from_date, to_date)),\n            \"docstatus\": 1,\n            \"designation\": self.designation,\n            \"company\": self.company\n        },\n        fields=[\"name\"]\n    )\n    for job_offer in job_offer_list:\n        job_offers.append(job_offer.name)\n    return job_offers\n\n", "CodeBleu_score": 53.54901671316379}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n\n    # Get the list of job offers created within the specified date range\n    job_offers = frappe.get_all('Job Offer', filters={'creation': ['between', [from_date, to_date]]}, fields=['name', 'designation', 'company'])\n\n    # Get the list of job offers created within the specified date range where the document status is 1 (submitted)\n    job_offers_submitted = frappe.get_all('Job Offer', filters={'creation': ['between', [from_date, to_date]], 'docstatus': 1}, fields=['name', 'designation', 'company'])\n\n    # Initialize the list of job offer names\n    job_offer_names = []\n\n    # Initialize the list of job offer names where the document status is 1 (submitted)\n    job_offer_names_submitted = []\n\n    # Loop through the list of job offers created within the specified date range\n    for job_offer in job_offers:\n\n        # Get the list of job offer names\n        job_offer_names.append(job_offer.name)\n\n    # Loop through the list of job offers created within the specified date range where the document status is 1 (submitted)\n    for job_offer in job_offers_submitted:\n\n        # Get the list of job offer names where the document status is 1 (submitted)\n        job_offer_names_submitted.append(job_offer.name)\n\n    # Return the list of job offer names\n    return job_offer_names, job_offer_names_submitted\n\n", "CodeBleu_score": 42.16895678375871}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n\n    # Get the list of job offers\n    job_offers = frappe.get_all(\n        \"Job Offer\",\n        filters={\n            \"designation\": self.designation,\n            \"company\": self.company,\n            \"creation\": [\">=\", from_date],\n            \"creation\": [\"<=\", to_date],\n            \"status\": \"Submitted\"\n        },\n        fields=[\"name\"]\n    )\n\n    # Return the list of job offer names\n    return [job_offer.name for job_offer in job_offers]\n\n", "CodeBleu_score": 50.18642633392274}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if company:\n        query = \"\"\"SELECT COUNT(job_offer.name) AS total, COUNT(job_offer.name) FILTER (WHERE job_offer.docstatus = 1 AND job_offer.status = 'Accepted') AS accepted FROM `tabJob Offer` job_offer WHERE job_offer.docstatus = 1 AND job_offer.company = '{0}'\"\"\".format(company)\n    elif department:\n        query = \"\"\"SELECT COUNT(job_offer.name) AS total, COUNT(job_offer.name) FILTER (WHERE job_offer.docstatus = 1 AND job_offer.status = 'Accepted') AS accepted FROM `tabJob Offer` job_offer WHERE job_offer.docstatus = 1 AND job_offer.department = '{0}'\"\"\".format(department)\n    else:\n        query = \"\"\"SELECT COUNT(job_offer.name) AS total, COUNT(job_offer.name) FILTER (WHERE job_offer.docstatus = 1 AND job_offer.status = 'Accepted') AS accepted FROM `tabJob Offer` job_offer WHERE job_offer.docstatus = 1\"\"\"\n    result = frappe.db.sql(query, as_dict=True)\n    if result:\n        total = result[0].total\n        accepted = result[0].accepted\n        if total:\n            return (accepted / total) * 100\n        else:\n            return 0\n    else:\n        return 0\n\n", "CodeBleu_score": 24.166517928378926}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n\n    total_job_offers = frappe.db.count(\n        \"Job Offer\", {\"docstatus\": 1, \"company\": company, \"department\": department})\n    accepted_job_offers = frappe.db.count(\n        \"Job Offer\", {\"docstatus\": 1, \"company\": company, \"department\": department, \"status\": \"Accepted\"})\n\n    if total_job_offers == 0:\n        return 0\n    else:\n        return (accepted_job_offers/total_job_offers)*100\n\n", "CodeBleu_score": 31.04558597347033}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n\n    # Get the total number of job offers\n    total_job_offers = frappe.db.count('Job Offer', {'docstatus': 1})\n\n    # Get the total number of accepted job offers\n    if company and department:\n        accepted_job_offers = frappe.db.count('Job Offer', {'docstatus': 1, 'company': company, 'department': department, 'status': 'Accepted'})\n    elif company:\n        accepted_job_offers = frappe.db.count('Job Offer', {'docstatus': 1, 'company': company, 'status': 'Accepted'})\n    elif department:\n        accepted_job_offers = frappe.db.count('Job Offer', {'docstatus': 1, 'department': department, 'status': 'Accepted'})\n    else:\n        accepted_job_offers = frappe.db.count('Job Offer', {'docstatus': 1, 'status': 'Accepted'})\n\n    # Calculate the acceptance rate\n    if total_job_offers == 0:\n        acceptance_rate = 0\n    else:\n        acceptance_rate = (accepted_job_offers / total_job_offers) * 100\n\n    return acceptance_rate\n\n", "CodeBleu_score": 28.706749501850375}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t    final Result result = employerService.register(employerForRegisterDto);\n    if (!result.isSuccess()) {\n        return new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n    }\n    return new ResponseEntity<>(result, HttpStatus.OK);\n}", "CodeBleu_score": 74.12127052828261}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t    final Result result = employerService.register(employerForRegisterDto);\n    if (!result.isSuccess()) {\n        return ResponseEntity.badRequest().body(result);\n    }\n    return ResponseEntity.ok(result);\n}", "CodeBleu_score": 67.33797083924128}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t    final Result result = employerService.register(employerForRegisterDto);\n    if (!result.isSuccess()) {\n        return ResponseEntity.badRequest().body(result);\n    }\n    return ResponseEntity.ok(result);\n}", "CodeBleu_score": 67.33797083924128}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t    CompanyStaff staff = companyStaffRepository.findById(companyStaffForUpdateDto.getId()).orElseThrow(notFound());\n    if (!arePasswordMatch(companyStaffForUpdateDto.getPassword(), staff.getPassword())) {\n        return failed(new BusinessRuleException(\"Passwords do not match\"));\n    }\n    staff.setFirstName(companyStaffForUpdateDto.getFirstName());\n    staff.setLastName(companyStaffForUpdateDto.getLastName());\n    companyStaffRepository.save(staff);\n    return success(new CompanyStaffDto(staff.getId(), staff.getFirstName(), staff.getLastName()));\n}", "CodeBleu_score": 39.93891352568426}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t    CompanyStaff companyStaff = getById(companyStaffForUpdateDto.getId());\n    if (companyStaff == null) {\n        return notFound(\"Staff not found\");\n    }\n    if (!arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaff.getPassword())) {\n        return badRequest(\"Provided password does not match existing one\");\n    }\n    companyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n    companyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n    companyStaff.setPassword(companyStaffForUpdateDto.getPassword());\n    companyStaff.setLastUpdate(LocalDateTime.now());\n    companyStaffRepository.save(companyStaff);\n    return updated(\"Staff updated\");\n}", "CodeBleu_score": 36.85148031225148}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t    CompanyStaff companyStaff = this.findById(companyStaffForUpdateDto.getId());\n    if (companyStaff == null) {\n        return Result.failure(CompanyStaffError.NOT_FOUND);\n    }\n    if (!this.arePasswordMatch(companyStaff, companyStaffForUpdateDto.getPassword())) {\n        return Result.failure(CompanyStaffError.PASSWORD_MISMATCH);\n    }\n    this.setFirstName(companyStaff, companyStaffForUpdateDto.getFirstName());\n    this.setLastName(companyStaff, companyStaffForUpdateDto.getLastName());\n    this.updated(companyStaff);\n    this.save(companyStaff);\n    return Result.success(companyStaff);\n}", "CodeBleu_score": 38.747590709404506}]}
